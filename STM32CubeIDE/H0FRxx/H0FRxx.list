
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017634  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000343c  080176f0  080176f0  000276f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab2c  0801ab2c  00030a88  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab2c  0801ab2c  0002ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab34  0801ab34  00030a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ab34  0801ab34  0002ab34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab3c  0801ab3c  0002ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801ab40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a78  20000010  0801ab4c  00030010  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006858  20000a88  0801b5c4  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200072e0  0801b5c4  000372e0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 13 .debug_info   000548b1  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009593  00000000  00000000  00085361  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b5a6  00000000  00000000  0008e8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a70  00000000  00000000  000a9ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002e90  00000000  00000000  000ab910  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000176f2  00000000  00000000  000ae7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a4fc  00000000  00000000  000c5e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d038e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006348  00000000  00000000  000d040c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080176d8 	.word	0x080176d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	080176d8 	.word	0x080176d8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017e20 	.word	0x08017e20
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017e60 	.word	0x08017e60
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017ea0 	.word	0x08017ea0
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2a:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d2c:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2e:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d035      	beq.n	8002da0 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d36:	d02c      	beq.n	8002d92 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <LoadROtopology+0x94>)
 8002d3a:	b2f6      	uxtb	r6, r6
 8002d3c:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <LoadROtopology+0x98>)
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	466b      	mov	r3, sp
 8002d44:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d46:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	469c      	mov	ip, r3
 8002d4e:	4d1c      	ldr	r5, [pc, #112]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d50:	4663      	mov	r3, ip
 8002d52:	700b      	strb	r3, [r1, #0]
 8002d54:	780b      	ldrb	r3, [r1, #0]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d814      	bhi.n	8002d84 <LoadROtopology+0x60>
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d5e:	18c0      	adds	r0, r0, r3
 8002d60:	0040      	lsls	r0, r0, #1
 8002d62:	18c0      	adds	r0, r0, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LoadROtopology+0x8c>)
 8002d66:	18d7      	adds	r7, r2, r3
 8002d68:	780b      	ldrb	r3, [r1, #0]
 8002d6a:	883f      	ldrh	r7, [r7, #0]
 8002d6c:	18c3      	adds	r3, r0, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d72:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d74:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	700b      	strb	r3, [r1, #0]
 8002d7c:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d7e:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d9ef      	bls.n	8002d64 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002d84:	3401      	adds	r4, #1
 8002d86:	b2e4      	uxtb	r4, r4
 8002d88:	42b4      	cmp	r4, r6
 8002d8a:	d9e1      	bls.n	8002d50 <LoadROtopology+0x2c>
 8002d8c:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002d92:	2101      	movs	r1, #1
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002d96:	2601      	movs	r6, #1
			N =1;
 8002d98:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <LoadROtopology+0x98>)
 8002d9c:	7013      	strb	r3, [r2, #0]
 8002d9e:	e7d0      	b.n	8002d42 <LoadROtopology+0x1e>
		N =1;
 8002da0:	2201      	movs	r2, #1
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002da4:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002da6:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LoadROtopology+0x98>)
 8002dac:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dae:	e7ee      	b.n	8002d8e <LoadROtopology+0x6a>
 8002db0:	0801d800 	.word	0x0801d800
 8002db4:	0000ffff 	.word	0x0000ffff
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	20000aa8 	.word	0x20000aa8
 8002dc0:	20000ee4 	.word	0x20000ee4

08002dc4 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	46c6      	mov	lr, r8
 8002dc8:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dca:	4e0f      	ldr	r6, [pc, #60]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dcc:	7833      	ldrb	r3, [r6, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002dd2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4f0c      	ldr	r7, [pc, #48]	; (8002e0c <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dda:	1e61      	subs	r1, r4, #1
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	1c65      	adds	r5, r4, #1
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	b2a8      	uxth	r0, r5
 8002de4:	f004 fd28 	bl	8007838 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de8:	2c19      	cmp	r4, #25
 8002dea:	d901      	bls.n	8002df0 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002dec:	230a      	movs	r3, #10
 8002dee:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002df0:	7833      	ldrb	r3, [r6, #0]
 8002df2:	b2ec      	uxtb	r4, r5
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d2f0      	bcs.n	8002dda <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002df8:	4640      	mov	r0, r8
 8002dfa:	bc04      	pop	{r2}
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	e7f8      	b.n	8002df8 <LoadEEportsDir+0x34>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	20007238 	.word	0x20007238

08002e10 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	464e      	mov	r6, r9
 8002e14:	46de      	mov	lr, fp
 8002e16:	4657      	mov	r7, sl
 8002e18:	4645      	mov	r5, r8
 8002e1a:	b5e0      	push	{r5, r6, r7, lr}
 8002e1c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	1d9e      	adds	r6, r3, #6
 8002e22:	2300      	movs	r3, #0
 8002e24:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e26:	4698      	mov	r8, r3
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e2a:	241c      	movs	r4, #28
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LoadEEalias+0x7c>)
 8002e30:	469b      	mov	fp, r3
 8002e32:	4643      	mov	r3, r8
 8002e34:	009f      	lsls	r7, r3, #2
 8002e36:	18fd      	adds	r5, r7, r3
 8002e38:	1d63      	adds	r3, r4, #5
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e42:	0020      	movs	r0, r4
 8002e44:	0031      	movs	r1, r6
 8002e46:	f004 fcf7 	bl	8007838 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e4a:	8833      	ldrh	r3, [r6, #0]
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	706b      	strb	r3, [r5, #1]
 8002e50:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	702b      	strb	r3, [r5, #0]
 8002e56:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e58:	454c      	cmp	r4, r9
 8002e5a:	d1f2      	bne.n	8002e42 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4447      	add	r7, r8
 8002e60:	007f      	lsls	r7, r7, #1
 8002e62:	4457      	add	r7, sl
 8002e64:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e66:	4643      	mov	r3, r8
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	465b      	mov	r3, fp
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4543      	cmp	r3, r8
 8002e74:	d2dd      	bcs.n	8002e32 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	46ab      	mov	fp, r5
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000dd4 	.word	0x20000dd4
 8002e8c:	20000010 	.word	0x20000010

08002e90 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4646      	mov	r6, r8
 8002e94:	46d6      	mov	lr, sl
 8002e96:	464f      	mov	r7, r9
 8002e98:	b5c0      	push	{r6, r7, lr}
 8002e9a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e9c:	466b      	mov	r3, sp
 8002e9e:	1d9e      	adds	r6, r3, #6
 8002ea0:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ea2:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002ea4:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002ea8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <LoadEEgroup+0x94>
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <LoadEEgroup+0xa0>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	1d1f      	adds	r7, r3, #4
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	30cb      	adds	r0, #203	; 0xcb
 8002ebc:	1879      	adds	r1, r7, r1
 8002ebe:	b280      	uxth	r0, r0
		add++;
 8002ec0:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ec2:	f004 fcb9 	bl	8007838 <EE_ReadVariable>
		add++;
 8002ec6:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b2e9      	uxtb	r1, r5
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d8f2      	bhi.n	8002eb6 <LoadEEgroup+0x26>
 8002ed0:	2338      	movs	r3, #56	; 0x38
 8002ed2:	002c      	movs	r4, r5
 8002ed4:	35cb      	adds	r5, #203	; 0xcb
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	b2ab      	uxth	r3, r5
 8002eda:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002edc:	2300      	movs	r3, #0
 8002ede:	469a      	mov	sl, r3
 8002ee0:	3499      	adds	r4, #153	; 0x99
 8002ee2:	44e1      	add	r9, ip
 8002ee4:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002ee6:	464d      	mov	r5, r9
 8002ee8:	1d67      	adds	r7, r4, #5
 8002eea:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002eec:	0020      	movs	r0, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	f004 fca2 	bl	8007838 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002ef4:	8833      	ldrh	r3, [r6, #0]
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	706b      	strb	r3, [r5, #1]
 8002efa:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f02:	42bc      	cmp	r4, r7
 8002f04:	d1f2      	bne.n	8002eec <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f06:	464b      	mov	r3, r9
 8002f08:	4652      	mov	r2, sl
 8002f0a:	725a      	strb	r2, [r3, #9]
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	469c      	mov	ip, r3
 8002f10:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f12:	45a0      	cmp	r8, r4
 8002f14:	d1e7      	bne.n	8002ee6 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	b002      	add	sp, #8
 8002f1a:	bc1c      	pop	{r2, r3, r4}
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
 8002f20:	46a2      	mov	sl, r4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <LoadEEgroup+0xa0>)
 8002f26:	4699      	mov	r9, r3
 8002f28:	e7d2      	b.n	8002ed0 <LoadEEgroup+0x40>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000010 	.word	0x20000010
 8002f30:	20000aa8 	.word	0x20000aa8

08002f34 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	46ce      	mov	lr, r9
 8002f38:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f3a:	260e      	movs	r6, #14
 8002f3c:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f42:	ac03      	add	r4, sp, #12
 8002f44:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f46:	0021      	movs	r1, r4
 8002f48:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f4e:	f004 fc73 	bl	8007838 <EE_ReadVariable>
	uint8_t direction =0;
 8002f52:	2700      	movs	r7, #0
	if(!status1){
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d100      	bne.n	8002f5a <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002f58:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	20e5      	movs	r0, #229	; 0xe5
 8002f5e:	f004 fc6b 	bl	8007838 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f62:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f64:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f004 fc66 	bl	8007838 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f6c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f6e:	4305      	orrs	r5, r0
 8002f70:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f72:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d104      	bne.n	8002f82 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f78:	8823      	ldrh	r3, [r4, #0]
 8002f7a:	8832      	ldrh	r2, [r6, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f82:	0021      	movs	r1, r4
 8002f84:	20e7      	movs	r0, #231	; 0xe7
 8002f86:	f004 fc57 	bl	8007838 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8a:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8e:	20e8      	movs	r0, #232	; 0xe8
 8002f90:	f004 fc52 	bl	8007838 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f94:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f96:	4305      	orrs	r5, r0
 8002f98:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f9a:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d104      	bne.n	8002faa <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fa0:	8823      	ldrh	r3, [r4, #0]
 8002fa2:	8832      	ldrh	r2, [r6, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e9      	movs	r0, #233	; 0xe9
 8002fae:	f004 fc43 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d030      	beq.n	8003018 <LoadEEstreams+0xe4>
 8002fb6:	4d26      	ldr	r5, [pc, #152]	; (8003050 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fb8:	0021      	movs	r1, r4
 8002fba:	20ea      	movs	r0, #234	; 0xea
 8002fbc:	f004 fc3c 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d103      	bne.n	8002fcc <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	0a1a      	lsrs	r2, r3, #8
 8002fc8:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8002fca:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002fcc:	0021      	movs	r1, r4
 8002fce:	20eb      	movs	r0, #235	; 0xeb
 8002fd0:	f004 fc32 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d105      	bne.n	8002fe4 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8002fd8:	2220      	movs	r2, #32
 8002fda:	8823      	ldrh	r3, [r4, #0]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002fe4:	7f2b      	ldrb	r3, [r5, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LoadEEstreams+0xbc>
 8002fea:	7f6a      	ldrb	r2, [r5, #29]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d120      	bne.n	8003032 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002ff0:	7fab      	ldrb	r3, [r5, #30]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LoadEEstreams+0xc8>
 8002ff6:	7fea      	ldrb	r2, [r5, #31]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d121      	bne.n	8003040 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	5ceb      	ldrb	r3, [r5, r3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <LoadEEstreams+0xd8>
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	5caa      	ldrb	r2, [r5, r2]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10b      	bne.n	8003024 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800300c:	2000      	movs	r0, #0
 800300e:	b005      	add	sp, #20
 8003010:	bc0c      	pop	{r2, r3}
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	4d0d      	ldr	r5, [pc, #52]	; (8003050 <LoadEEstreams+0x11c>)
 800301c:	0a1a      	lsrs	r2, r3, #8
 800301e:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003020:	776b      	strb	r3, [r5, #29]
 8003022:	e7c9      	b.n	8002fb8 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	4641      	mov	r1, r8
 8003028:	464a      	mov	r2, r9
 800302a:	0038      	movs	r0, r7
 800302c:	f006 f994 	bl	8009358 <SetupDMAStreams>
 8003030:	e7ec      	b.n	800300c <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	4641      	mov	r1, r8
 8003036:	464a      	mov	r2, r9
 8003038:	0038      	movs	r0, r7
 800303a:	f006 f98d 	bl	8009358 <SetupDMAStreams>
 800303e:	e7d7      	b.n	8002ff0 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	4641      	mov	r1, r8
 8003044:	464a      	mov	r2, r9
 8003046:	0038      	movs	r0, r7
 8003048:	f006 f986 	bl	8009358 <SetupDMAStreams>
 800304c:	e7d6      	b.n	8002ffc <LoadEEstreams+0xc8>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000b28 	.word	0x20000b28

08003054 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003054:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800305a:	ac01      	add	r4, sp, #4
 800305c:	0021      	movs	r1, r4
 800305e:	0040      	lsls	r0, r0, #1
 8003060:	f004 fbea 	bl	8007838 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d15d      	bne.n	8003124 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003068:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	4d54      	ldr	r5, [pc, #336]	; (80031c0 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800306e:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 8003070:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003072:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003078:	f004 fbde 	bl	8007838 <EE_ReadVariable>

	if(!status1){
 800307c:	2800      	cmp	r0, #0
 800307e:	d15e      	bne.n	800313e <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003080:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003082:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003084:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003086:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003088:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308a:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800308c:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308e:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003090:	f004 fbd2 	bl	8007838 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003094:	4d4b      	ldr	r5, [pc, #300]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003096:	2800      	cmp	r0, #0
 8003098:	d15e      	bne.n	8003158 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309a:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 800309c:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309e:	0021      	movs	r1, r4
 80030a0:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 80030a2:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030a4:	f004 fbc8 	bl	8007838 <EE_ReadVariable>
	if(!status1)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d15f      	bne.n	800316c <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030ac:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80030ae:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b0:	0021      	movs	r1, r4
 80030b2:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 80030b4:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b6:	f004 fbbf 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d160      	bne.n	8003180 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030c6:	208c      	movs	r0, #140	; 0x8c
 80030c8:	0021      	movs	r1, r4
 80030ca:	0040      	lsls	r0, r0, #1
 80030cc:	f004 fbb4 	bl	8007838 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d0:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030d2:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d4:	201a      	movs	r0, #26
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fbad 	bl	8007838 <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4306      	orrs	r6, r0
 80030e0:	b2b6      	uxth	r6, r6
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d15f      	bne.n	80031a6 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80030e6:	466b      	mov	r3, sp
 80030e8:	88db      	ldrh	r3, [r3, #6]
 80030ea:	8822      	ldrh	r2, [r4, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80030f2:	208d      	movs	r0, #141	; 0x8d
 80030f4:	0021      	movs	r1, r4
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	f004 fb9e 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003100:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003102:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003104:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003106:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003108:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800310e:	f004 fb93 	bl	8007838 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003112:	2800      	cmp	r0, #0
 8003114:	d044      	beq.n	80031a0 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003116:	2326      	movs	r3, #38	; 0x26
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <LoadEEparams+0x174>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800311e:	2000      	movs	r0, #0
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003124:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <LoadEEparams+0x174>)
 8003128:	4d25      	ldr	r5, [pc, #148]	; (80031c0 <LoadEEparams+0x16c>)
 800312a:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800312c:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800312e:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003130:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003132:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003134:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003136:	f004 fb7f 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 800313a:	2800      	cmp	r0, #0
 800313c:	d0a0      	beq.n	8003080 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800313e:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003142:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003144:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003146:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003148:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800314a:	895b      	ldrh	r3, [r3, #10]
 800314c:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800314e:	f004 fb73 	bl	8007838 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 8003152:	4d1c      	ldr	r5, [pc, #112]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0a0      	beq.n	800309a <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003158:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800315c:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315e:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003160:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003162:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003164:	f004 fb68 	bl	8007838 <EE_ReadVariable>
	if(!status1)
 8003168:	2800      	cmp	r0, #0
 800316a:	d09f      	beq.n	80030ac <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800316c:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003170:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003172:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003174:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003176:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003178:	f004 fb5e 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d09e      	beq.n	80030be <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <LoadEEparams+0x174>)
 8003182:	7c1a      	ldrb	r2, [r3, #16]
 8003184:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003186:	7c5b      	ldrb	r3, [r3, #17]
 8003188:	716b      	strb	r3, [r5, #5]
 800318a:	e79c      	b.n	80030c6 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 800318c:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800318e:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003194:	0021      	movs	r1, r4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f004 fb4e 	bl	8007838 <EE_ReadVariable>
	if(!status1){
 800319c:	2800      	cmp	r0, #0
 800319e:	d1ba      	bne.n	8003116 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	76ab      	strb	r3, [r5, #26]
 80031a4:	e7bb      	b.n	800311e <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 80031a6:	2322      	movs	r3, #34	; 0x22
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <LoadEEparams+0x178>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031b0:	23e1      	movs	r3, #225	; 0xe1
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	e79c      	b.n	80030f2 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <LoadEEparams+0x174>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60ab      	str	r3, [r5, #8]
 80031be:	e798      	b.n	80030f2 <LoadEEparams+0x9e>
 80031c0:	20006d34 	.word	0x20006d34
 80031c4:	20006db4 	.word	0x20006db4
 80031c8:	20000010 	.word	0x20000010
 80031cc:	20000b28 	.word	0x20000b28

080031d0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	46de      	mov	lr, fp
 80031d4:	4657      	mov	r7, sl
 80031d6:	464e      	mov	r6, r9
 80031d8:	4645      	mov	r5, r8
 80031da:	b5e0      	push	{r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	469c      	mov	ip, r3
 80031e2:	261e      	movs	r6, #30
 80031e4:	2300      	movs	r3, #0
 80031e6:	4466      	add	r6, ip
 80031e8:	8033      	strh	r3, [r6, #0]
 80031ea:	330f      	adds	r3, #15
 80031ec:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031ee:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 80031f0:	2501      	movs	r5, #1
 80031f2:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031f4:	469b      	mov	fp, r3
 80031f6:	e004      	b.n	8003202 <LoadEEbuttons+0x32>
 80031f8:	3404      	adds	r4, #4
 80031fa:	3501      	adds	r5, #1
 80031fc:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80031fe:	2d07      	cmp	r5, #7
 8003200:	d05e      	beq.n	80032c0 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003202:	0031      	movs	r1, r6
 8003204:	0020      	movs	r0, r4
 8003206:	f004 fb17 	bl	8007838 <EE_ReadVariable>
 800320a:	b2eb      	uxtb	r3, r5
 800320c:	1e07      	subs	r7, r0, #0
 800320e:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003210:	d1f2      	bne.n	80031f8 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003212:	8832      	ldrh	r2, [r6, #0]
 8003214:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003216:	0919      	lsrs	r1, r3, #4
 8003218:	42a9      	cmp	r1, r5
 800321a:	d1ed      	bne.n	80031f8 <LoadEEbuttons+0x28>
 800321c:	4651      	mov	r1, sl
 800321e:	400b      	ands	r3, r1
 8003220:	d0ea      	beq.n	80031f8 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003222:	482b      	ldr	r0, [pc, #172]	; (80032d0 <LoadEEbuttons+0x100>)
 8003224:	00e9      	lsls	r1, r5, #3
 8003226:	4680      	mov	r8, r0
 8003228:	1949      	adds	r1, r1, r5
 800322a:	4488      	add	r8, r1
 800322c:	4641      	mov	r1, r8
 800322e:	00a8      	lsls	r0, r5, #2
 8003230:	704b      	strb	r3, [r1, #1]
 8003232:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0018      	movs	r0, r3
 8003236:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 8003238:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800323a:	b280      	uxth	r0, r0
 800323c:	0031      	movs	r1, r6
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f004 fafa 	bl	8007838 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003244:	4641      	mov	r1, r8
 8003246:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003248:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324a:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324c:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003250:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003252:	b280      	uxth	r0, r0
 8003254:	0031      	movs	r1, r6
 8003256:	f004 faef 	bl	8007838 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800325a:	4641      	mov	r1, r8
 800325c:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800325e:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003260:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003262:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003264:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003266:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003268:	b280      	uxth	r0, r0
 800326a:	0031      	movs	r1, r6
 800326c:	f004 fae4 	bl	8007838 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003270:	4641      	mov	r1, r8
 8003272:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800327a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 800327c:	4649      	mov	r1, r9
 800327e:	f005 f8a5 	bl	80083cc <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003282:	4643      	mov	r3, r8
 8003284:	4658      	mov	r0, fp
 8003286:	7a19      	ldrb	r1, [r3, #8]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	104a      	asrs	r2, r1, #1
 800328c:	4002      	ands	r2, r0
 800328e:	4001      	ands	r1, r0
 8003290:	4640      	mov	r0, r8
 8003292:	9705      	str	r7, [sp, #20]
 8003294:	79c0      	ldrb	r0, [r0, #7]
 8003296:	3404      	adds	r4, #4
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4640      	mov	r0, r8
 800329c:	7980      	ldrb	r0, [r0, #6]
 800329e:	3501      	adds	r5, #1
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	4640      	mov	r0, r8
 80032a4:	7940      	ldrb	r0, [r0, #5]
 80032a6:	b2a4      	uxth	r4, r4
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	4640      	mov	r0, r8
 80032ac:	7900      	ldrb	r0, [r0, #4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	4640      	mov	r0, r8
 80032b2:	78c0      	ldrb	r0, [r0, #3]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4648      	mov	r0, r9
 80032b8:	f005 f98e 	bl	80085d8 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80032bc:	2d07      	cmp	r5, #7
 80032be:	d1a0      	bne.n	8003202 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bc3c      	pop	{r2, r3, r4, r5}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	46ab      	mov	fp, r5
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	2000181c 	.word	0x2000181c

080032d4 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4645      	mov	r5, r8
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032de:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 80032e0:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032e2:	f00f fbe3 	bl	8012aac <malloc>
 80032e6:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 80032e8:	d065      	beq.n	80033b6 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ea:	4c3b      	ldr	r4, [pc, #236]	; (80033d8 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 80032ec:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ee:	7822      	ldrb	r2, [r4, #0]
 80032f0:	2afe      	cmp	r2, #254	; 0xfe
 80032f2:	d156      	bne.n	80033a2 <LoadROsnippets+0xce>
 80032f4:	1c6b      	adds	r3, r5, #1
 80032f6:	4698      	mov	r8, r3
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <LoadROsnippets+0x108>)
 80032fe:	4e38      	ldr	r6, [pc, #224]	; (80033e0 <LoadROsnippets+0x10c>)
 8003300:	469b      	mov	fp, r3
 8003302:	44b1      	add	r9, r6
 8003304:	0020      	movs	r0, r4
 8003306:	46a2      	mov	sl, r4
 8003308:	3014      	adds	r0, #20
 800330a:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	550a      	strb	r2, [r1, r4]
 8003310:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003312:	4284      	cmp	r4, r0
 8003314:	d1fa      	bne.n	800330c <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003316:	2214      	movs	r2, #20
 8003318:	4641      	mov	r1, r8
 800331a:	0030      	movs	r0, r6
 800331c:	f00f fe13 	bl	8012f46 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003320:	2100      	movs	r1, #0
 8003322:	2214      	movs	r2, #20
 8003324:	0028      	movs	r0, r5
 8003326:	f00f fe17 	bl	8012f58 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	1c8b      	adds	r3, r1, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d942      	bls.n	80033ba <LoadROsnippets+0xe6>
 8003334:	4657      	mov	r7, sl
 8003336:	0028      	movs	r0, r5
 8003338:	3746      	adds	r7, #70	; 0x46
		i =0;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <LoadROsnippets+0x70>
 800333e:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003340:	42a7      	cmp	r7, r4
 8003342:	d034      	beq.n	80033ae <LoadROsnippets+0xda>
			++currentAdd;
 8003344:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003346:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003348:	7821      	ldrb	r1, [r4, #0]
			++i;
 800334a:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800334c:	1c8a      	adds	r2, r1, #2
 800334e:	b2d2      	uxtb	r2, r2
			++i;
 8003350:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003352:	2a01      	cmp	r2, #1
 8003354:	d8f3      	bhi.n	800333e <LoadROsnippets+0x6a>
 8003356:	469a      	mov	sl, r3
 8003358:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 800335a:	5caa      	ldrb	r2, [r5, r2]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d002      	beq.n	8003366 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 8003366:	4650      	mov	r0, sl
 8003368:	f00f fba0 	bl	8012aac <malloc>
 800336c:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 800336e:	2800      	cmp	r0, #0
 8003370:	d028      	beq.n	80033c4 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003372:	4652      	mov	r2, sl
 8003374:	0029      	movs	r1, r5
 8003376:	f00f fde6 	bl	8012f46 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800337a:	465b      	mov	r3, fp
 800337c:	465a      	mov	r2, fp
 800337e:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003380:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003382:	3301      	adds	r3, #1
 8003384:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003386:	0028      	movs	r0, r5
 8003388:	4652      	mov	r2, sl
 800338a:	f00f fde5 	bl	8012f58 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800338e:	7823      	ldrb	r3, [r4, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d102      	bne.n	800339a <LoadROsnippets+0xc6>
 8003394:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003396:	45b1      	cmp	r9, r6
 8003398:	d1b4      	bne.n	8003304 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 800339a:	0028      	movs	r0, r5
 800339c:	f00f fb90 	bl	8012ac0 <free>
	return BOS_OK;
 80033a0:	2000      	movs	r0, #0
}
 80033a2:	bc3c      	pop	{r2, r3, r4, r5}
 80033a4:	4690      	mov	r8, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	46ab      	mov	fp, r5
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	2231      	movs	r2, #49	; 0x31
 80033b2:	469a      	mov	sl, r3
 80033b4:	e7d1      	b.n	800335a <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 80033b6:	20fb      	movs	r0, #251	; 0xfb
 80033b8:	e7f3      	b.n	80033a2 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	4252      	negs	r2, r2
 80033c0:	469a      	mov	sl, r3
 80033c2:	e7ca      	b.n	800335a <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033c4:	2214      	movs	r2, #20
 80033c6:	2100      	movs	r1, #0
 80033c8:	0030      	movs	r0, r6
 80033ca:	f00f fdc5 	bl	8012f58 <memset>
			free(snipBuffer);
 80033ce:	0028      	movs	r0, r5
 80033d0:	f00f fb76 	bl	8012ac0 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033d4:	200e      	movs	r0, #14
 80033d6:	e7e4      	b.n	80033a2 <LoadROsnippets+0xce>
 80033d8:	0801dc00 	.word	0x0801dc00
 80033dc:	20001150 	.word	0x20001150
 80033e0:	20006dd0 	.word	0x20006dd0

080033e4 <LoadEEvars>:
void LoadEEvars(void){
 80033e4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033e6:	f7ff fc9d 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033ea:	f7ff fceb 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 80033ee:	f7ff fd0f 	bl	8002e10 <LoadEEalias>
	LoadEEgroup();
 80033f2:	f7ff fd4d 	bl	8002e90 <LoadEEgroup>
	LoadEEstreams();
 80033f6:	f7ff fd9d 	bl	8002f34 <LoadEEstreams>
	LoadEEparams();
 80033fa:	f7ff fe2b 	bl	8003054 <LoadEEparams>
	LoadEEbuttons();
 80033fe:	f7ff fee7 	bl	80031d0 <LoadEEbuttons>
	LoadROsnippets();
 8003402:	f7ff ff67 	bl	80032d4 <LoadROsnippets>
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	46c6      	mov	lr, r8
 800340c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800340e:	4e10      	ldr	r6, [pc, #64]	; (8003450 <SaveEEportsDir+0x48>)
 8003410:	7833      	ldrb	r3, [r6, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003416:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003418:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800341a:	4698      	mov	r8, r3
 800341c:	4f0d      	ldr	r7, [pc, #52]	; (8003454 <SaveEEportsDir+0x4c>)
 800341e:	e007      	b.n	8003430 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003420:	2c19      	cmp	r4, #25
 8003422:	d901      	bls.n	8003428 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003424:	230a      	movs	r3, #10
 8003426:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003428:	7833      	ldrb	r3, [r6, #0]
 800342a:	b2ec      	uxtb	r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	d30b      	bcc.n	8003448 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	5af9      	ldrh	r1, [r7, r3]
 8003436:	1c65      	adds	r5, r4, #1
 8003438:	2900      	cmp	r1, #0
 800343a:	d0f1      	beq.n	8003420 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800343c:	b2a8      	uxth	r0, r5
 800343e:	f004 fa2b 	bl	8007898 <EE_WriteVariable>
 8003442:	e7ed      	b.n	8003420 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	4698      	mov	r8, r3
	}
	
	return result;
}
 8003448:	4640      	mov	r0, r8
 800344a:	bc04      	pop	{r2}
 800344c:	4690      	mov	r8, r2
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	20000010 	.word	0x20000010
 8003454:	20007238 	.word	0x20007238

08003458 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 800345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345c:	4646      	mov	r6, r8
 800345e:	46d6      	mov	lr, sl
 8003460:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003462:	4698      	mov	r8, r3
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003466:	b5c0      	push	{r6, r7, lr}
 8003468:	4699      	mov	r9, r3
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800346c:	2600      	movs	r6, #0
 800346e:	469a      	mov	sl, r3
 8003470:	e005      	b.n	800347e <SaveEEalias+0x26>
 8003472:	4653      	mov	r3, sl
 8003474:	3601      	adds	r6, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2f6      	uxtb	r6, r6
 800347a:	42b3      	cmp	r3, r6
 800347c:	d325      	bcc.n	80034ca <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800347e:	464b      	mov	r3, r9
 8003480:	00b4      	lsls	r4, r6, #2
 8003482:	19a4      	adds	r4, r4, r6
 8003484:	0064      	lsls	r4, r4, #1
 8003486:	5d1b      	ldrb	r3, [r3, r4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f2      	beq.n	8003472 <SaveEEalias+0x1a>
 800348c:	4645      	mov	r5, r8
 800348e:	4647      	mov	r7, r8
 8003490:	351c      	adds	r5, #28
 8003492:	3721      	adds	r7, #33	; 0x21
 8003494:	444c      	add	r4, r9
 8003496:	b2ad      	uxth	r5, r5
 8003498:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800349a:	7861      	ldrb	r1, [r4, #1]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	0028      	movs	r0, r5
 80034a2:	3501      	adds	r5, #1
 80034a4:	b289      	uxth	r1, r1
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	f004 f9f6 	bl	8007898 <EE_WriteVariable>
 80034ac:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bd      	cmp	r5, r7
 80034b0:	d001      	beq.n	80034b6 <SaveEEalias+0x5e>
 80034b2:	7823      	ldrb	r3, [r4, #0]
 80034b4:	e7f1      	b.n	800349a <SaveEEalias+0x42>
 80034b6:	4643      	mov	r3, r8
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034be:	4653      	mov	r3, sl
 80034c0:	3601      	adds	r6, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	d2d9      	bcs.n	800347e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	bc1c      	pop	{r2, r3, r4}
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000dd4 	.word	0x20000dd4
 80034dc:	20000010 	.word	0x20000010

080034e0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46de      	mov	lr, fp
 80034e4:	4657      	mov	r7, sl
 80034e6:	464e      	mov	r6, r9
 80034e8:	4645      	mov	r5, r8
 80034ea:	468b      	mov	fp, r1
 80034ec:	b5e0      	push	{r5, r6, r7, lr}
 80034ee:	001e      	movs	r6, r3
 80034f0:	ab0a      	add	r3, sp, #40	; 0x28
 80034f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034f4:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034f6:	469a      	mov	sl, r3
 80034f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fa:	781d      	ldrb	r5, [r3, #0]
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003500:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003502:	4698      	mov	r8, r3
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	781c      	ldrb	r4, [r3, #0]
 8003508:	ab0e      	add	r3, sp, #56	; 0x38
 800350a:	4691      	mov	r9, r2
 800350c:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800350e:	f004 f9c3 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003512:	465b      	mov	r3, fp
 8003514:	0a19      	lsrs	r1, r3, #8
 8003516:	b289      	uxth	r1, r1
 8003518:	20e5      	movs	r0, #229	; 0xe5
 800351a:	f004 f9bd 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800351e:	465b      	mov	r3, fp
 8003520:	20e6      	movs	r0, #230	; 0xe6
 8003522:	b299      	uxth	r1, r3
 8003524:	f004 f9b8 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003528:	464b      	mov	r3, r9
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f004 f9b2 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003536:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003538:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353a:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800353c:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800353e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003540:	f004 f9aa 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003544:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003546:	b2b1      	uxth	r1, r6
 8003548:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800354a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800354c:	f004 f9a4 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003550:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003552:	b2a9      	uxth	r1, r5
 8003554:	20ea      	movs	r0, #234	; 0xea
 8003556:	f004 f99f 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f004 f99b 	bl	8007898 <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003570:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003572:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003574:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <SaveEEparams+0x80>)
 8003576:	0040      	lsls	r0, r0, #1
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	7821      	ldrb	r1, [r4, #0]
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	4319      	orrs	r1, r3
 8003580:	f004 f98a 	bl	8007898 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	208e      	movs	r0, #142	; 0x8e
 8003586:	7921      	ldrb	r1, [r4, #4]
 8003588:	88e3      	ldrh	r3, [r4, #6]
 800358a:	03c9      	lsls	r1, r1, #15
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	0040      	lsls	r0, r0, #1
 8003592:	f004 f981 	bl	8007898 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003596:	2016      	movs	r0, #22
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	30ff      	adds	r0, #255	; 0xff
 800359c:	8821      	ldrh	r1, [r4, #0]
 800359e:	f004 f97b 	bl	8007898 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a2:	208b      	movs	r0, #139	; 0x8b
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	f004 f976 	bl	8007898 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ac:	2018      	movs	r0, #24
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	7b21      	ldrb	r1, [r4, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4319      	orrs	r1, r3
 80035b6:	30ff      	adds	r0, #255	; 0xff
 80035b8:	f004 f96e 	bl	8007898 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035bc:	208c      	movs	r0, #140	; 0x8c
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	0040      	lsls	r0, r0, #1
 80035c2:	f004 f969 	bl	8007898 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c6:	201a      	movs	r0, #26
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	30ff      	adds	r0, #255	; 0xff
 80035cc:	f004 f964 	bl	8007898 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d0:	208d      	movs	r0, #141	; 0x8d
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	7921      	ldrb	r1, [r4, #4]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4319      	orrs	r1, r3
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	f004 f95c 	bl	8007898 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e0:	201c      	movs	r0, #28
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	30ff      	adds	r0, #255	; 0xff
 80035e6:	f004 f957 	bl	8007898 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20006d34 	.word	0x20006d34
 80035f4:	20006db4 	.word	0x20006db4

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fc:	4f12      	ldr	r7, [pc, #72]	; (8003648 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 80035fe:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	2100      	movs	r1, #0
 8003604:	0038      	movs	r0, r7
 8003606:	f00f fca7 	bl	8012f58 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800360a:	4e10      	ldr	r6, [pc, #64]	; (800364c <ClearEEportsDir+0x54>)
 800360c:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800360e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003614:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003616:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003618:	4698      	mov	r8, r3
 800361a:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800361c:	2c19      	cmp	r4, #25
 800361e:	d901      	bls.n	8003624 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003620:	230a      	movs	r3, #10
 8003622:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003624:	7833      	ldrb	r3, [r6, #0]
 8003626:	b2ec      	uxtb	r4, r5
 8003628:	42a3      	cmp	r3, r4
 800362a:	d309      	bcc.n	8003640 <ClearEEportsDir+0x48>
 800362c:	1e63      	subs	r3, r4, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003632:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003634:	2900      	cmp	r1, #0
 8003636:	d0f1      	beq.n	800361c <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003638:	b2a8      	uxth	r0, r5
 800363a:	f004 f92d 	bl	8007898 <EE_WriteVariable>
 800363e:	e7ed      	b.n	800361c <ClearEEportsDir+0x24>
	}
	
	return result;
}
 8003640:	4640      	mov	r0, r8
 8003642:	bc04      	pop	{r2}
 8003644:	4690      	mov	r8, r2
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	20007238 	.word	0x20007238
 800364c:	20000010 	.word	0x20000010

08003650 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003650:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003652:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003654:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003656:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003658:	ad03      	add	r5, sp, #12
 800365a:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800365c:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	002a      	movs	r2, r5
 8003662:	ab06      	add	r3, sp, #24
 8003664:	a905      	add	r1, sp, #20
 8003666:	2001      	movs	r0, #1
 8003668:	f009 fa66 	bl	800cb38 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800366c:	aa04      	add	r2, sp, #16
 800366e:	ab08      	add	r3, sp, #32
 8003670:	a907      	add	r1, sp, #28
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	2002      	movs	r0, #2
 8003676:	f009 fa5f 	bl	800cb38 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003680:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003682:	a909      	add	r1, sp, #36	; 0x24
 8003684:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800368a:	f00d fb5f 	bl	8010d4c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003692:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003694:	a909      	add	r1, sp, #36	; 0x24
 8003696:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369a:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800369c:	f00d fb56 	bl	8010d4c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9805      	ldr	r0, [sp, #20]
 80036a6:	f00d fcf1 	bl	801108c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fdd4 	bl	800d258 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9808      	ldr	r0, [sp, #32]
 80036b4:	f00d fce4 	bl	8011080 <HAL_GPIO_ReadPin>
 80036b8:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036ba:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c0:	8829      	ldrh	r1, [r5, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	f00d fce1 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f009 fdc4 	bl	800d258 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d0:	8821      	ldrh	r1, [r4, #0]
 80036d2:	9808      	ldr	r0, [sp, #32]
 80036d4:	f00d fcd4 	bl	8011080 <HAL_GPIO_ReadPin>
 80036d8:	3801      	subs	r0, #1
 80036da:	4243      	negs	r3, r0
 80036dc:	4158      	adcs	r0, r3
			return 1;
 80036de:	b2c0      	uxtb	r0, r0
}
 80036e0:	b00e      	add	sp, #56	; 0x38
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036e4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036e6:	f009 ffbb 	bl	800d660 <GetUart>
	
	huart->Init.BaudRate =57600;
 80036ea:	23e1      	movs	r3, #225	; 0xe1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036f6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 80036f8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 80036fe:	f00f f807 	bl	8012710 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003702:	2120      	movs	r1, #32
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)

08003710 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003712:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	f7fc fcf5 	bl	8000104 <strcmp>
 800371a:	4243      	negs	r3, r0
 800371c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800371e:	b2c0      	uxtb	r0, r0
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	200000a4 	.word	0x200000a4

08003728 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46de      	mov	lr, fp
 800372c:	4657      	mov	r7, sl
 800372e:	464e      	mov	r6, r9
 8003730:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003732:	4923      	ldr	r1, [pc, #140]	; (80037c0 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003734:	b5e0      	push	{r5, r6, r7, lr}
 8003736:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003738:	f7fc fce4 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800373e:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003740:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 8003744:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 8003746:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 800374a:	4f21      	ldr	r7, [pc, #132]	; (80037d0 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 800374c:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <IsMathOperator+0xac>)
 8003750:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 8003752:	2e00      	cmp	r6, #0
 8003754:	d028      	beq.n	80037a8 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 8003756:	0039      	movs	r1, r7
 8003758:	0020      	movs	r0, r4
 800375a:	f7fc fcd3 	bl	8000104 <strcmp>
 800375e:	2800      	cmp	r0, #0
 8003760:	d024      	beq.n	80037ac <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 8003762:	4641      	mov	r1, r8
 8003764:	0020      	movs	r0, r4
 8003766:	f7fc fccd 	bl	8000104 <strcmp>
 800376a:	2800      	cmp	r0, #0
 800376c:	d020      	beq.n	80037b0 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 800376e:	4649      	mov	r1, r9
 8003770:	0020      	movs	r0, r4
 8003772:	f7fc fcc7 	bl	8000104 <strcmp>
 8003776:	2800      	cmp	r0, #0
 8003778:	d01c      	beq.n	80037b4 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 800377a:	4651      	mov	r1, sl
 800377c:	0020      	movs	r0, r4
 800377e:	f7fc fcc1 	bl	8000104 <strcmp>
 8003782:	2800      	cmp	r0, #0
 8003784:	d018      	beq.n	80037b8 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 8003786:	4659      	mov	r1, fp
 8003788:	0020      	movs	r0, r4
 800378a:	f7fc fcbb 	bl	8000104 <strcmp>
 800378e:	2800      	cmp	r0, #0
 8003790:	d014      	beq.n	80037bc <IsMathOperator+0x94>
 8003792:	3d01      	subs	r5, #1
 8003794:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1db      	bne.n	8003752 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800379a:	2000      	movs	r0, #0
}
 800379c:	bc3c      	pop	{r2, r3, r4, r5}
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	46a2      	mov	sl, r4
 80037a4:	46ab      	mov	fp, r5
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e7f7      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER;
 80037ac:	2002      	movs	r0, #2
 80037ae:	e7f5      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e7f3      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037b4:	2004      	movs	r0, #4
 80037b6:	e7f1      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037b8:	2005      	movs	r0, #5
 80037ba:	e7ef      	b.n	800379c <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037bc:	2006      	movs	r0, #6
 80037be:	e7ed      	b.n	800379c <IsMathOperator+0x74>
 80037c0:	08017ee0 	.word	0x08017ee0
 80037c4:	08017ee8 	.word	0x08017ee8
 80037c8:	08017eec 	.word	0x08017eec
 80037cc:	08017ef0 	.word	0x08017ef0
 80037d0:	08017ee4 	.word	0x08017ee4
 80037d4:	08017ef4 	.word	0x08017ef4

080037d8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037dc:	4e12      	ldr	r6, [pc, #72]	; (8003828 <ExploreNeighbors+0x50>)
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 80037e0:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e2:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037e4:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037e6:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e8:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 80037ea:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037ec:	b082      	sub	sp, #8
		if(port != ignore){
 80037ee:	42a7      	cmp	r7, r4
 80037f0:	d011      	beq.n	8003816 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037f2:	4643      	mov	r3, r8
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 80037fa:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037fc:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037fe:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003800:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003802:	2200      	movs	r2, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	3307      	adds	r3, #7
 800380a:	0020      	movs	r0, r4
 800380c:	f005 fe94 	bl	8009538 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003810:	200a      	movs	r0, #10
 8003812:	f009 ffe9 	bl	800d7e8 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003816:	3401      	adds	r4, #1
 8003818:	b2e4      	uxtb	r4, r4
 800381a:	2c06      	cmp	r4, #6
 800381c:	d1e7      	bne.n	80037ee <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800381e:	2000      	movs	r0, #0
 8003820:	b002      	add	sp, #8
 8003822:	bc04      	pop	{r2}
 8003824:	4690      	mov	r8, r2
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	20000b28 	.word	0x20000b28
 800382c:	20000010 	.word	0x20000010

08003830 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	4657      	mov	r7, sl
 8003834:	464e      	mov	r6, r9
 8003836:	4645      	mov	r5, r8
 8003838:	46de      	mov	lr, fp
 800383a:	b5e0      	push	{r5, r6, r7, lr}
 800383c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800383e:	466a      	mov	r2, sp
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003842:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003844:	781d      	ldrb	r5, [r3, #0]
 8003846:	1deb      	adds	r3, r5, #7
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	469d      	mov	sp, r3
 8003850:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003852:	2d00      	cmp	r5, #0
 8003854:	d00c      	beq.n	8003870 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003856:	2100      	movs	r1, #0
 8003858:	1e6c      	subs	r4, r5, #1
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <FindBroadcastRoutes+0x144>)
 800385c:	b2e4      	uxtb	r4, r4
 800385e:	3401      	adds	r4, #1
 8003860:	3254      	adds	r2, #84	; 0x54
 8003862:	446c      	add	r4, sp
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003868:	8011      	strh	r1, [r2, #0]
 800386a:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800386c:	42a3      	cmp	r3, r4
 800386e:	d1f9      	bne.n	8003864 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003870:	2301      	movs	r3, #1
 8003872:	2216      	movs	r2, #22
 8003874:	3801      	subs	r0, #1
 8003876:	5433      	strb	r3, [r6, r0]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <FindBroadcastRoutes+0x148>)
 800387a:	4342      	muls	r2, r0
 800387c:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <FindBroadcastRoutes+0x144>)
 8003880:	0040      	lsls	r0, r0, #1
 8003882:	1818      	adds	r0, r3, r0
 8003884:	2301      	movs	r3, #1
 8003886:	3202      	adds	r2, #2
 8003888:	4462      	add	r2, ip
 800388a:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800388c:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 800388e:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003890:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003892:	469a      	mov	sl, r3
 8003894:	46b3      	mov	fp, r6
 8003896:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003898:	8813      	ldrh	r3, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800389e:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038a0:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038a2:	46a8      	mov	r8, r5
 80038a4:	4665      	mov	r5, ip
 80038a6:	408d      	lsls	r5, r1
 80038a8:	46a9      	mov	r9, r5
 80038aa:	4645      	mov	r5, r8
 80038ac:	464e      	mov	r6, r9
 80038ae:	4335      	orrs	r5, r6
 80038b0:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038b2:	4655      	mov	r5, sl
 80038b4:	445b      	add	r3, fp
 80038b6:	3b01      	subs	r3, #1
 80038b8:	701d      	strb	r5, [r3, #0]
 80038ba:	3101      	adds	r1, #1
 80038bc:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038be:	2906      	cmp	r1, #6
 80038c0:	d1ea      	bne.n	8003898 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c2:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 80038c4:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c6:	4692      	mov	sl, r2
 80038c8:	465e      	mov	r6, fp
	++level;												// Move one level
 80038ca:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <FindBroadcastRoutes+0x144>)
 80038ce:	687d      	ldr	r5, [r7, #4]
 80038d0:	449a      	add	sl, r3
 80038d2:	4653      	mov	r3, sl
 80038d4:	46a8      	mov	r8, r5
 80038d6:	465d      	mov	r5, fp
 80038d8:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038da:	4643      	mov	r3, r8
		++level;											// Move one level
 80038dc:	3501      	adds	r5, #1
 80038de:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03b      	beq.n	800395c <FindBroadcastRoutes+0x12c>
 80038e4:	1e6b      	subs	r3, r5, #1
 80038e6:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 80038e8:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ea:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038ec:	469c      	mov	ip, r3
 80038ee:	46ab      	mov	fp, r5
 80038f0:	e003      	b.n	80038fa <FindBroadcastRoutes+0xca>
 80038f2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038f4:	b2d3      	uxtb	r3, r2
 80038f6:	4598      	cmp	r8, r3
 80038f8:	d92c      	bls.n	8003954 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038fa:	5cb3      	ldrb	r3, [r6, r2]
 80038fc:	454b      	cmp	r3, r9
 80038fe:	d1f8      	bne.n	80038f2 <FindBroadcastRoutes+0xc2>
 8003900:	2116      	movs	r1, #22
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <FindBroadcastRoutes+0x14c>)
 8003904:	4351      	muls	r1, r2
 8003906:	469a      	mov	sl, r3
 8003908:	2000      	movs	r0, #0
 800390a:	4451      	add	r1, sl
 800390c:	46e2      	mov	sl, ip
 800390e:	4694      	mov	ip, r2
 8003910:	0055      	lsls	r5, r2, #1
 8003912:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003914:	880b      	ldrh	r3, [r1, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <FindBroadcastRoutes+0x110>
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	3b01      	subs	r3, #1
 800391e:	5cf2      	ldrb	r2, [r6, r3]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d10d      	bne.n	8003940 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003924:	683c      	ldr	r4, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	5b15      	ldrh	r5, [r2, r4]
 800392a:	2201      	movs	r2, #1
 800392c:	4082      	lsls	r2, r0
 800392e:	4315      	orrs	r5, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003934:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003936:	465a      	mov	r2, fp
						++untaged;
 8003938:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 800393a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800393c:	b2e3      	uxtb	r3, r4
 800393e:	469a      	mov	sl, r3
 8003940:	3001      	adds	r0, #1
 8003942:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003944:	2806      	cmp	r0, #6
 8003946:	d1e5      	bne.n	8003914 <FindBroadcastRoutes+0xe4>
 8003948:	4662      	mov	r2, ip
 800394a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800394c:	b2d3      	uxtb	r3, r2
 800394e:	46d4      	mov	ip, sl
 8003950:	4598      	cmp	r8, r3
 8003952:	d8d2      	bhi.n	80038fa <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003954:	4663      	mov	r3, ip
 8003956:	465d      	mov	r5, fp
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1be      	bne.n	80038da <FindBroadcastRoutes+0xaa>
	
	return result;
}
 800395c:	2000      	movs	r0, #0
 800395e:	46bd      	mov	sp, r7
 8003960:	b003      	add	sp, #12
 8003962:	bc3c      	pop	{r2, r3, r4, r5}
 8003964:	4690      	mov	r8, r2
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	46ab      	mov	fp, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000010 	.word	0x20000010
 8003974:	20000b28 	.word	0x20000b28
 8003978:	20000ee4 	.word	0x20000ee4
 800397c:	20000ee6 	.word	0x20000ee6

08003980 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	46de      	mov	lr, fp
 8003984:	464e      	mov	r6, r9
 8003986:	4645      	mov	r5, r8
 8003988:	4657      	mov	r7, sl
 800398a:	b5e0      	push	{r5, r6, r7, lr}
 800398c:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 800398e:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003990:	0005      	movs	r5, r0
 8003992:	000e      	movs	r6, r1
 8003994:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003996:	2232      	movs	r2, #50	; 0x32
 8003998:	2100      	movs	r1, #0
 800399a:	0020      	movs	r0, r4
 800399c:	f00f fadc 	bl	8012f58 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 80039a0:	221a      	movs	r2, #26
 80039a2:	2100      	movs	r1, #0
 80039a4:	4862      	ldr	r0, [pc, #392]	; (8003b30 <FindRoute+0x1b0>)
 80039a6:	f00f fad7 	bl	8012f58 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039aa:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039ac:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <FindRoute+0x1b4>)
 80039b0:	1e6a      	subs	r2, r5, #1
 80039b2:	469c      	mov	ip, r3
 80039b4:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039b6:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039b8:	7219      	strb	r1, [r3, #8]
 80039ba:	2316      	movs	r3, #22
 80039bc:	4353      	muls	r3, r2
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <FindRoute+0x1b8>)
 80039c0:	3302      	adds	r3, #2
 80039c2:	4693      	mov	fp, r2
 80039c4:	445b      	add	r3, fp
 80039c6:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039c8:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 80039ca:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039cc:	b2b1      	uxth	r1, r6
 80039ce:	8813      	ldrh	r3, [r2, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <FindRoute+0x5c>
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d100      	bne.n	80039dc <FindRoute+0x5c>
 80039da:	e099      	b.n	8003b10 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 80039dc:	3001      	adds	r0, #1
 80039de:	3202      	adds	r2, #2
 80039e0:	2807      	cmp	r0, #7
 80039e2:	d1f4      	bne.n	80039ce <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 80039e4:	4b55      	ldr	r3, [pc, #340]	; (8003b3c <FindRoute+0x1bc>)
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d100      	bne.n	80039f0 <FindRoute+0x70>
 80039ee:	e09a      	b.n	8003b26 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039f0:	2208      	movs	r2, #8
 80039f2:	4462      	add	r2, ip
 80039f4:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039f6:	2200      	movs	r2, #0
 80039f8:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039fa:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039fc:	4692      	mov	sl, r2
 80039fe:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a00:	429d      	cmp	r5, r3
 8003a02:	d005      	beq.n	8003a10 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a04:	4640      	mov	r0, r8
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	18b2      	adds	r2, r6, r2
 8003a0e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003a10:	3301      	adds	r3, #1
 8003a12:	428b      	cmp	r3, r1
 8003a14:	ddf4      	ble.n	8003a00 <FindRoute+0x80>
 8003a16:	2308      	movs	r3, #8
 8003a18:	4463      	add	r3, ip
	uint8_t u =0;
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003a1e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003a20:	2300      	movs	r3, #0
		temp &=Q[i];
 8003a22:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003a24:	3301      	adds	r3, #1
		temp &=Q[i];
 8003a26:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	dbfa      	blt.n	8003a22 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d000      	beq.n	8003a32 <FindRoute+0xb2>
 8003a30:	e07c      	b.n	8003b2c <FindRoute+0x1ac>
 8003a32:	4663      	mov	r3, ip
 8003a34:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003a36:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003a38:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003a3e:	20ff      	movs	r0, #255	; 0xff
 8003a40:	2500      	movs	r5, #0
 8003a42:	2300      	movs	r3, #0
 8003a44:	e001      	b.n	8003a4a <FindRoute+0xca>
 8003a46:	4642      	mov	r2, r8
 8003a48:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d904      	bls.n	8003a58 <FindRoute+0xd8>
 8003a4e:	5ce6      	ldrb	r6, [r4, r3]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d101      	bne.n	8003a58 <FindRoute+0xd8>
			index =i;
 8003a54:	0010      	movs	r0, r2
 8003a56:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003a58:	3301      	adds	r3, #1
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	dbf3      	blt.n	8003a46 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	3501      	adds	r5, #1
		if(u == desID){
 8003a60:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a62:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003a64:	429d      	cmp	r5, r3
 8003a66:	d023      	beq.n	8003ab0 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003a68:	2301      	movs	r3, #1
 8003a6a:	1e6f      	subs	r7, r5, #1
 8003a6c:	55e3      	strb	r3, [r4, r7]
 8003a6e:	2316      	movs	r3, #22
 8003a70:	465e      	mov	r6, fp
 8003a72:	437b      	muls	r3, r7
 8003a74:	360e      	adds	r6, #14
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	445a      	add	r2, fp
 8003a7a:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7c:	4467      	add	r7, ip
 8003a7e:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a80:	8813      	ldrh	r3, [r2, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003a86:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	5ce0      	ldrb	r0, [r4, r3]
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d109      	bne.n	8003aa6 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a92:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a94:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a96:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a98:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a9a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a9c:	4281      	cmp	r1, r0
 8003a9e:	d902      	bls.n	8003aa6 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003aa0:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003aa2:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003aa4:	545d      	strb	r5, [r3, r1]
 8003aa6:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003aa8:	42b2      	cmp	r2, r6
 8003aaa:	d1e9      	bne.n	8003a80 <FindRoute+0x100>
 8003aac:	9900      	ldr	r1, [sp, #0]
 8003aae:	e7b6      	b.n	8003a1e <FindRoute+0x9e>
 8003ab0:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	4463      	add	r3, ip
 8003ab6:	5c9a      	ldrb	r2, [r3, r2]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <FindRoute+0x142>
 8003abe:	e00b      	b.n	8003ad8 <FindRoute+0x158>
 8003ac0:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <FindRoute+0x1b0>)
 8003ac4:	1c58      	adds	r0, r3, #1
 8003ac6:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ac8:	4663      	mov	r3, ip
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	3323      	adds	r3, #35	; 0x23
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003ad2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003ad8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ada:	464c      	mov	r4, r9
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	4463      	add	r3, ip
 8003ae0:	8822      	ldrh	r2, [r4, #0]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d008      	beq.n	8003af8 <FindRoute+0x178>
 8003ae6:	4d12      	ldr	r5, [pc, #72]	; (8003b30 <FindRoute+0x1b0>)
 8003ae8:	79d9      	ldrb	r1, [r3, #7]
 8003aea:	46ac      	mov	ip, r5
 8003aec:	4461      	add	r1, ip
 8003aee:	3901      	subs	r1, #1
 8003af0:	7809      	ldrb	r1, [r1, #0]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4291      	cmp	r1, r2
 8003af6:	d014      	beq.n	8003b22 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003af8:	3001      	adds	r0, #1
 8003afa:	3402      	adds	r4, #2
 8003afc:	2807      	cmp	r0, #7
 8003afe:	d1ef      	bne.n	8003ae0 <FindRoute+0x160>
	return 0;
 8003b00:	2000      	movs	r0, #0
}
 8003b02:	b011      	add	sp, #68	; 0x44
 8003b04:	bc3c      	pop	{r2, r3, r4, r5}
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	46ab      	mov	fp, r5
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	000b      	movs	r3, r1
 8003b16:	4463      	add	r3, ip
 8003b18:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <FindRoute+0x1b0>)
			return col;
 8003b1c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003b1e:	7019      	strb	r1, [r3, #0]
			return col;
 8003b20:	e7ef      	b.n	8003b02 <FindRoute+0x182>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e7ed      	b.n	8003b02 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003b26:	425b      	negs	r3, r3
 8003b28:	2500      	movs	r5, #0
 8003b2a:	e7c2      	b.n	8003ab2 <FindRoute+0x132>
 8003b2c:	1e6b      	subs	r3, r5, #1
 8003b2e:	e7c0      	b.n	8003ab2 <FindRoute+0x132>
 8003b30:	20006ec8 	.word	0x20006ec8
 8003b34:	20000ba8 	.word	0x20000ba8
 8003b38:	20000ee4 	.word	0x20000ee4
 8003b3c:	20000010 	.word	0x20000010

08003b40 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	4657      	mov	r7, sl
 8003b44:	464e      	mov	r6, r9
 8003b46:	46de      	mov	lr, fp
 8003b48:	4645      	mov	r5, r8
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 8003b4e:	4c3d      	ldr	r4, [pc, #244]	; (8003c44 <remoteBootloaderUpdate+0x104>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b50:	b085      	sub	sp, #20
 8003b52:	4682      	mov	sl, r0
	myOutport =FindRoute(myID,dst);
 8003b54:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b56:	4688      	mov	r8, r1
 8003b58:	0017      	movs	r7, r2
	myOutport =FindRoute(myID,dst);
 8003b5a:	f7ff ff11 	bl	8003980 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b5e:	464b      	mov	r3, r9
	myOutport =FindRoute(myID,dst);
 8003b60:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d126      	bne.n	8003bb4 <remoteBootloaderUpdate+0x74>
		if(NumberOfHops(dst)== 1)
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <remoteBootloaderUpdate+0x108>)
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	4443      	add	r3, r8
 8003b6c:	79da      	ldrb	r2, [r3, #7]
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d04e      	beq.n	8003c10 <remoteBootloaderUpdate+0xd0>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <remoteBootloaderUpdate+0x10c>)
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	3b01      	subs	r3, #1
 8003b78:	781d      	ldrb	r5, [r3, #0]
	if(src == myID){
 8003b7a:	458a      	cmp	sl, r1
 8003b7c:	d120      	bne.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003b7e:	f009 ff3f 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
 8003b82:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <remoteBootloaderUpdate+0x110>)
 8003b86:	4642      	mov	r2, r8
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	4658      	mov	r0, fp
 8003b8c:	f00f fbde 	bl	801334c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <remoteBootloaderUpdate+0x114>)
 8003b92:	4658      	mov	r0, fp
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	f00f fbf9 	bl	801338c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	f7fc fabc 	bl	8000118 <strlen>
 8003ba0:	2332      	movs	r3, #50	; 0x32
 8003ba2:	b282      	uxth	r2, r0
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	0038      	movs	r0, r7
 8003ba8:	f009 fd04 	bl	800d5b4 <writePxITMutex>
		Delay_ms(100);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	f00b fdab 	bl	800f708 <HAL_Delay>
 8003bb2:	e005      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bb4:	7825      	ldrb	r5, [r4, #0]
 8003bb6:	4545      	cmp	r5, r8
 8003bb8:	d026      	beq.n	8003c08 <remoteBootloaderUpdate+0xc8>
	if(src == myID){
 8003bba:	4555      	cmp	r5, sl
 8003bbc:	d02c      	beq.n	8003c18 <remoteBootloaderUpdate+0xd8>
	uint8_t myOutport =0, lastModule =0;
 8003bbe:	2500      	movs	r5, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bc0:	0038      	movs	r0, r7
 8003bc2:	f7ff fd8f 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bc6:	0030      	movs	r0, r6
 8003bc8:	f7ff fd8c 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d012      	beq.n	8003bf8 <remoteBootloaderUpdate+0xb8>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	0032      	movs	r2, r6
 8003be2:	000b      	movs	r3, r1
 8003be4:	0038      	movs	r0, r7
 8003be6:	f005 ff2b 	bl	8009a40 <StartScastDMAStream>
}
 8003bea:	b005      	add	sp, #20
 8003bec:	bc3c      	pop	{r2, r3, r4, r5}
 8003bee:	4690      	mov	r8, r2
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	46ab      	mov	fp, r5
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f009 fd31 	bl	800d660 <GetUart>
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f009 fd3a 	bl	800d678 <SwapUartPins>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	e7e4      	b.n	8003bd2 <remoteBootloaderUpdate+0x92>
	if(src == myID){
 8003c08:	4555      	cmp	r5, sl
 8003c0a:	d016      	beq.n	8003c3a <remoteBootloaderUpdate+0xfa>
 8003c0c:	464e      	mov	r6, r9
 8003c0e:	e7d7      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
 8003c10:	458a      	cmp	sl, r1
 8003c12:	d00d      	beq.n	8003c30 <remoteBootloaderUpdate+0xf0>
 8003c14:	000d      	movs	r5, r1
 8003c16:	e7d3      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c18:	f009 fef2 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
	uint8_t myOutport =0, lastModule =0;
 8003c1c:	2500      	movs	r5, #0
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c1e:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <remoteBootloaderUpdate+0x118>)
 8003c22:	4642      	mov	r2, r8
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	4658      	mov	r0, fp
 8003c28:	464b      	mov	r3, r9
 8003c2a:	f00f fb8f 	bl	801334c <sprintf>
 8003c2e:	e7af      	b.n	8003b90 <remoteBootloaderUpdate+0x50>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c30:	f009 fee6 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
 8003c34:	4655      	mov	r5, sl
 8003c36:	4683      	mov	fp, r0
 8003c38:	e7a4      	b.n	8003b84 <remoteBootloaderUpdate+0x44>
 8003c3a:	f009 fee1 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
 8003c3e:	464e      	mov	r6, r9
 8003c40:	4683      	mov	fp, r0
 8003c42:	e7ed      	b.n	8003c20 <remoteBootloaderUpdate+0xe0>
 8003c44:	20000aa8 	.word	0x20000aa8
 8003c48:	20000ba8 	.word	0x20000ba8
 8003c4c:	20006ec8 	.word	0x20006ec8
 8003c50:	20000098 	.word	0x20000098
 8003c54:	20000090 	.word	0x20000090
 8003c58:	20000094 	.word	0x20000094

08003c5c <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c5c:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003c62:	4645      	mov	r5, r8
 8003c64:	464e      	mov	r6, r9
 8003c66:	46de      	mov	lr, fp
 8003c68:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c6a:	3440      	adds	r4, #64	; 0x40
 8003c6c:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003c6e:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c70:	4698      	mov	r8, r3
 8003c72:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003c74:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c76:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c78:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7a:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c7c:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003c7e:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c84:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c86:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c88:	0021      	movs	r1, r4
 8003c8a:	2332      	movs	r3, #50	; 0x32
 8003c8c:	9500      	str	r5, [sp, #0]
 8003c8e:	2211      	movs	r2, #17
 8003c90:	0038      	movs	r0, r7
 8003c92:	f009 fc5d 	bl	800d550 <writePxMutex>
 8003c96:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <DisplayTopology+0x178>)
 8003c98:	2601      	movs	r6, #1
 8003c9a:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c9c:	0032      	movs	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f00f fb53 	bl	801334c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f7fc fa36 	bl	8000118 <strlen>
 8003cac:	3601      	adds	r6, #1
 8003cae:	b282      	uxth	r2, r0
 8003cb0:	9500      	str	r5, [sp, #0]
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	0021      	movs	r1, r4
 8003cb6:	0038      	movs	r0, r7
 8003cb8:	f009 fc4a 	bl	800d550 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cbc:	2e06      	cmp	r6, #6
 8003cbe:	d1ed      	bne.n	8003c9c <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	9500      	str	r5, [sp, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4944      	ldr	r1, [pc, #272]	; (8003dd8 <DisplayTopology+0x17c>)
 8003cc8:	0038      	movs	r0, r7
 8003cca:	f009 fc41 	bl	800d550 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cce:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <DisplayTopology+0x180>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d061      	beq.n	8003d9a <DisplayTopology+0x13e>
 8003cd6:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cd8:	4645      	mov	r5, r8
 8003cda:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425b      	negs	r3, r3
 8003ce0:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003ce4:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce6:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003ce8:	3540      	adds	r5, #64	; 0x40
 8003cea:	1c63      	adds	r3, r4, #1
 8003cec:	001a      	movs	r2, r3
 8003cee:	493e      	ldr	r1, [pc, #248]	; (8003de8 <DisplayTopology+0x18c>)
 8003cf0:	0028      	movs	r0, r5
 8003cf2:	469a      	mov	sl, r3
 8003cf4:	f00f fb2a 	bl	801334c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf8:	0028      	movs	r0, r5
 8003cfa:	f7fc fa0d 	bl	8000118 <strlen>
 8003cfe:	4643      	mov	r3, r8
 8003d00:	b282      	uxth	r2, r0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	0029      	movs	r1, r5
 8003d06:	2332      	movs	r3, #50	; 0x32
 8003d08:	0038      	movs	r0, r7
 8003d0a:	f009 fc21 	bl	800d550 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d0e:	2316      	movs	r3, #22
 8003d10:	435c      	muls	r4, r3
 8003d12:	464b      	mov	r3, r9
 8003d14:	5b1b      	ldrh	r3, [r3, r4]
 8003d16:	2205      	movs	r2, #5
 8003d18:	0059      	lsls	r1, r3, #1
 8003d1a:	18c9      	adds	r1, r1, r3
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <DisplayTopology+0x190>)
 8003d1e:	0049      	lsls	r1, r1, #1
 8003d20:	469c      	mov	ip, r3
 8003d22:	0028      	movs	r0, r5
 8003d24:	4461      	add	r1, ip
 8003d26:	f00f fb66 	bl	80133f6 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d2a:	4643      	mov	r3, r8
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0029      	movs	r1, r5
 8003d32:	2332      	movs	r3, #50	; 0x32
 8003d34:	0038      	movs	r0, r7
 8003d36:	f009 fc0b 	bl	800d550 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d3a:	4643      	mov	r3, r8
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	492b      	ldr	r1, [pc, #172]	; (8003df0 <DisplayTopology+0x194>)
 8003d42:	2332      	movs	r3, #50	; 0x32
 8003d44:	0038      	movs	r0, r7
 8003d46:	f009 fc03 	bl	800d550 <writePxMutex>
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1ca6      	adds	r6, r4, #2
 8003d4e:	330c      	adds	r3, #12
 8003d50:	444e      	add	r6, r9
 8003d52:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003d54:	8832      	ldrh	r2, [r6, #0]
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d12f      	bne.n	8003dba <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003d5a:	4926      	ldr	r1, [pc, #152]	; (8003df4 <DisplayTopology+0x198>)
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	f00f faf5 	bl	801334c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d62:	0028      	movs	r0, r5
 8003d64:	f7fc f9d8 	bl	8000118 <strlen>
 8003d68:	4643      	mov	r3, r8
 8003d6a:	b282      	uxth	r2, r0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0029      	movs	r1, r5
 8003d70:	2332      	movs	r3, #50	; 0x32
 8003d72:	0038      	movs	r0, r7
 8003d74:	3602      	adds	r6, #2
 8003d76:	f009 fbeb 	bl	800d550 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d1ea      	bne.n	8003d54 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d7e:	4643      	mov	r3, r8
 8003d80:	2202      	movs	r2, #2
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	491c      	ldr	r1, [pc, #112]	; (8003df8 <DisplayTopology+0x19c>)
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	0038      	movs	r0, r7
 8003d8a:	f009 fbe1 	bl	800d550 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d8e:	4653      	mov	r3, sl
 8003d90:	b2dc      	uxtb	r4, r3
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <DisplayTopology+0x180>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	d8a7      	bhi.n	8003cea <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	425b      	negs	r3, r3
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	3333      	adds	r3, #51	; 0x33
 8003da4:	4915      	ldr	r1, [pc, #84]	; (8003dfc <DisplayTopology+0x1a0>)
 8003da6:	0038      	movs	r0, r7
 8003da8:	f009 fbd2 	bl	800d550 <writePxMutex>
}
 8003dac:	b003      	add	sp, #12
 8003dae:	bc3c      	pop	{r2, r3, r4, r5}
 8003db0:	4690      	mov	r8, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	46a2      	mov	sl, r4
 8003db6:	46ab      	mov	fp, r5
 8003db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003dba:	2307      	movs	r3, #7
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	08d2      	lsrs	r2, r2, #3
 8003dc4:	f00f fac2 	bl	801334c <sprintf>
 8003dc8:	e7cb      	b.n	8003d62 <DisplayTopology+0x106>
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	20000ba8 	.word	0x20000ba8
 8003dd0:	08017ef8 	.word	0x08017ef8
 8003dd4:	08017f0c 	.word	0x08017f0c
 8003dd8:	08018b80 	.word	0x08018b80
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	20000ee4 	.word	0x20000ee4
 8003de4:	08017f24 	.word	0x08017f24
 8003de8:	08017f14 	.word	0x08017f14
 8003dec:	0801779c 	.word	0x0801779c
 8003df0:	08017f08 	.word	0x08017f08
 8003df4:	08017f20 	.word	0x08017f20
 8003df8:	08018030 	.word	0x08018030
 8003dfc:	08019594 	.word	0x08019594

08003e00 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	4645      	mov	r5, r8
 8003e04:	46de      	mov	lr, fp
 8003e06:	4657      	mov	r7, sl
 8003e08:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0a:	4934      	ldr	r1, [pc, #208]	; (8003edc <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e0c:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0e:	3140      	adds	r1, #64	; 0x40
 8003e10:	000a      	movs	r2, r1
 8003e12:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e14:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e16:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e18:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e1c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1e:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e20:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e22:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e24:	2301      	movs	r3, #1
 8003e26:	425b      	negs	r3, r3
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	221b      	movs	r2, #27
 8003e2c:	3333      	adds	r3, #51	; 0x33
 8003e2e:	4650      	mov	r0, sl
 8003e30:	f009 fb8e 	bl	800d550 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <DisplayPortsDir+0xe4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d035      	beq.n	8003ea8 <DisplayPortsDir+0xa8>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4699      	mov	r9, r3
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <DisplayPortsDir+0xe8>)
 8003e42:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <DisplayPortsDir+0xec>)
 8003e46:	469b      	mov	fp, r3
 8003e48:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e4a:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e4c:	4f23      	ldr	r7, [pc, #140]	; (8003edc <DisplayPortsDir+0xdc>)
 8003e4e:	1e5d      	subs	r5, r3, #1
 8003e50:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003e52:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e54:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e56:	3740      	adds	r7, #64	; 0x40
 8003e58:	e002      	b.n	8003e60 <DisplayPortsDir+0x60>
 8003e5a:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e5c:	2c0a      	cmp	r4, #10
 8003e5e:	d01b      	beq.n	8003e98 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e60:	0031      	movs	r1, r6
 8003e62:	4642      	mov	r2, r8
 8003e64:	4119      	asrs	r1, r3
 8003e66:	5b52      	ldrh	r2, [r2, r5]
 8003e68:	1c5c      	adds	r4, r3, #1
 8003e6a:	4211      	tst	r1, r2
 8003e6c:	d0f5      	beq.n	8003e5a <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e6e:	0023      	movs	r3, r4
 8003e70:	464a      	mov	r2, r9
 8003e72:	4659      	mov	r1, fp
 8003e74:	0038      	movs	r0, r7
 8003e76:	f00f fa69 	bl	801334c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e7a:	0038      	movs	r0, r7
 8003e7c:	f7fc f94c 	bl	8000118 <strlen>
 8003e80:	2301      	movs	r3, #1
 8003e82:	425b      	negs	r3, r3
 8003e84:	b282      	uxth	r2, r0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	0039      	movs	r1, r7
 8003e8a:	3333      	adds	r3, #51	; 0x33
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	f009 fb5f 	bl	800d550 <writePxMutex>
 8003e92:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e94:	2c0a      	cmp	r4, #10
 8003e96:	d1e3      	bne.n	8003e60 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003e98:	464b      	mov	r3, r9
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <DisplayPortsDir+0xe4>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	454b      	cmp	r3, r9
 8003ea6:	d2cf      	bcs.n	8003e48 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003ea8:	490c      	ldr	r1, [pc, #48]	; (8003edc <DisplayPortsDir+0xdc>)
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <DisplayPortsDir+0xf0>)
 8003eac:	3140      	adds	r1, #64	; 0x40
 8003eae:	000a      	movs	r2, r1
 8003eb0:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb2:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb4:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb6:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb8:	cb11      	ldmia	r3!, {r0, r4}
 8003eba:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	3333      	adds	r3, #51	; 0x33
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f009 fb42 	bl	800d550 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ecc:	b003      	add	sp, #12
 8003ece:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed0:	4690      	mov	r8, r2
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	46a2      	mov	sl, r4
 8003ed6:	46ab      	mov	fp, r5
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20000ba8 	.word	0x20000ba8
 8003ee0:	08017f2c 	.word	0x08017f2c
 8003ee4:	20000010 	.word	0x20000010
 8003ee8:	20007238 	.word	0x20007238
 8003eec:	08017f48 	.word	0x08017f48
 8003ef0:	08017f5c 	.word	0x08017f5c

08003ef4 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	46de      	mov	lr, fp
 8003ef8:	464e      	mov	r6, r9
 8003efa:	4645      	mov	r5, r8
 8003efc:	4657      	mov	r7, sl
 8003efe:	b5e0      	push	{r5, r6, r7, lr}
 8003f00:	b085      	sub	sp, #20
 8003f02:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f04:	f009 fd7c 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f08:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f0a:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f0c:	4d98      	ldr	r5, [pc, #608]	; (8004170 <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 8003f0e:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f10:	4b98      	ldr	r3, [pc, #608]	; (8004174 <DisplayModuleStatus+0x280>)
 8003f12:	3540      	adds	r5, #64	; 0x40
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	4998      	ldr	r1, [pc, #608]	; (8004178 <DisplayModuleStatus+0x284>)
 8003f18:	0028      	movs	r0, r5
 8003f1a:	f00f fa17 	bl	801334c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f1e:	0029      	movs	r1, r5
 8003f20:	0020      	movs	r0, r4
 8003f22:	f00f fa33 	bl	801338c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f26:	4b95      	ldr	r3, [pc, #596]	; (800417c <DisplayModuleStatus+0x288>)
 8003f28:	4995      	ldr	r1, [pc, #596]	; (8004180 <DisplayModuleStatus+0x28c>)
 8003f2a:	7c1a      	ldrb	r2, [r3, #16]
 8003f2c:	0028      	movs	r0, r5
 8003f2e:	4698      	mov	r8, r3
 8003f30:	f00f fa0c 	bl	801334c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f34:	0029      	movs	r1, r5
 8003f36:	0020      	movs	r0, r4
 8003f38:	f00f fa28 	bl	801338c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f3c:	2306      	movs	r3, #6
 8003f3e:	2200      	movs	r2, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4990      	ldr	r1, [pc, #576]	; (8004184 <DisplayModuleStatus+0x290>)
 8003f44:	3b04      	subs	r3, #4
 8003f46:	0028      	movs	r0, r5
 8003f48:	f00f fa00 	bl	801334c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f4c:	0029      	movs	r1, r5
 8003f4e:	0020      	movs	r0, r4
 8003f50:	f00f fa1c 	bl	801338c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f54:	4a8c      	ldr	r2, [pc, #560]	; (8004188 <DisplayModuleStatus+0x294>)
 8003f56:	498d      	ldr	r1, [pc, #564]	; (800418c <DisplayModuleStatus+0x298>)
 8003f58:	0028      	movs	r0, r5
 8003f5a:	f00f f9f7 	bl	801334c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f5e:	0029      	movs	r1, r5
 8003f60:	0020      	movs	r0, r4
 8003f62:	f00f fa13 	bl	801338c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f66:	4a8a      	ldr	r2, [pc, #552]	; (8004190 <DisplayModuleStatus+0x29c>)
 8003f68:	498a      	ldr	r1, [pc, #552]	; (8004194 <DisplayModuleStatus+0x2a0>)
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	f00f f9ee 	bl	801334c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f70:	0029      	movs	r1, r5
 8003f72:	0020      	movs	r0, r4
 8003f74:	f00f fa0a 	bl	801338c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f78:	002a      	movs	r2, r5
 8003f7a:	4b87      	ldr	r3, [pc, #540]	; (8004198 <DisplayModuleStatus+0x2a4>)
 8003f7c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f7e:	c243      	stmia	r2!, {r0, r1, r6}
 8003f80:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f82:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f8a:	8091      	strh	r1, [r2, #4]
 8003f8c:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8e:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f90:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f92:	f00f f9fb 	bl	801338c <strcat>
 8003f96:	4b81      	ldr	r3, [pc, #516]	; (800419c <DisplayModuleStatus+0x2a8>)
 8003f98:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f9a:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <DisplayModuleStatus+0x2ac>)
 8003f9c:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003f9e:	4b81      	ldr	r3, [pc, #516]	; (80041a4 <DisplayModuleStatus+0x2b0>)
 8003fa0:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8003fa2:	0032      	movs	r2, r6
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	f00f f9d0 	bl	801334c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fac:	0029      	movs	r1, r5
 8003fae:	0020      	movs	r0, r4
 8003fb0:	f00f f9ec 	bl	801338c <strcat>
		switch(portStatus[i]){
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	5cf3      	ldrb	r3, [r6, r3]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d80b      	bhi.n	8003fd6 <DisplayModuleStatus+0xe2>
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	58d3      	ldr	r3, [r2, r3]
 8003fc4:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fc6:	002a      	movs	r2, r5
 8003fc8:	4b77      	ldr	r3, [pc, #476]	; (80041a8 <DisplayModuleStatus+0x2b4>)
 8003fca:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fcc:	c283      	stmia	r2!, {r0, r1, r7}
 8003fce:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd0:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fd6:	0029      	movs	r1, r5
 8003fd8:	0020      	movs	r0, r4
 8003fda:	3601      	adds	r6, #1
 8003fdc:	f00f f9d6 	bl	801338c <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003fe0:	2e06      	cmp	r6, #6
 8003fe2:	d1de      	bne.n	8003fa2 <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fe4:	002a      	movs	r2, r5
 8003fe6:	4b71      	ldr	r3, [pc, #452]	; (80041ac <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003fe8:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fea:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fec:	c243      	stmia	r2!, {r0, r1, r6}
 8003fee:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff0:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff2:	0029      	movs	r1, r5
 8003ff4:	0020      	movs	r0, r4
 8003ff6:	f00f f9c9 	bl	801338c <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <DisplayModuleStatus+0x2bc>)
 8003ffc:	4e6d      	ldr	r6, [pc, #436]	; (80041b4 <DisplayModuleStatus+0x2c0>)
 8003ffe:	469b      	mov	fp, r3
 8004000:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004002:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004004:	469a      	mov	sl, r3
 8004006:	e01d      	b.n	8004044 <DisplayModuleStatus+0x150>
 8004008:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800400a:	f007 fbb7 	bl	800b77c <GetPort>
 800400e:	465a      	mov	r2, fp
 8004010:	00ab      	lsls	r3, r5, #2
 8004012:	3b04      	subs	r3, #4
 8004014:	0004      	movs	r4, r0
 8004016:	58d0      	ldr	r0, [r2, r3]
 8004018:	f007 fbb0 	bl	800b77c <GetPort>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	4699      	mov	r9, r3
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <DisplayModuleStatus+0x27c>)
 8004022:	002a      	movs	r2, r5
 8004024:	469c      	mov	ip, r3
 8004026:	44e1      	add	r9, ip
 8004028:	9000      	str	r0, [sp, #0]
 800402a:	0023      	movs	r3, r4
 800402c:	4651      	mov	r1, sl
 800402e:	4648      	mov	r0, r9
 8004030:	f00f f98c 	bl	801334c <sprintf>
 8004034:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004036:	4649      	mov	r1, r9
 8004038:	4640      	mov	r0, r8
 800403a:	f00f f9a7 	bl	801338c <strcat>
 800403e:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004040:	2d07      	cmp	r5, #7
 8004042:	d011      	beq.n	8004068 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1de      	bne.n	8004008 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800404a:	4c49      	ldr	r4, [pc, #292]	; (8004170 <DisplayModuleStatus+0x27c>)
 800404c:	002a      	movs	r2, r5
 800404e:	3440      	adds	r4, #64	; 0x40
 8004050:	495a      	ldr	r1, [pc, #360]	; (80041bc <DisplayModuleStatus+0x2c8>)
 8004052:	0020      	movs	r0, r4
 8004054:	f00f f97a 	bl	801334c <sprintf>
 8004058:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800405a:	0021      	movs	r1, r4
 800405c:	4640      	mov	r0, r8
 800405e:	f00f f995 	bl	801338c <strcat>
 8004062:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004064:	2d07      	cmp	r5, #7
 8004066:	d1ed      	bne.n	8004044 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004068:	4640      	mov	r0, r8
 800406a:	f7fc f855 	bl	8000118 <strlen>
 800406e:	4644      	mov	r4, r8
 8004070:	0005      	movs	r5, r0
 8004072:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <DisplayModuleStatus+0x2cc>)
 8004074:	2202      	movs	r2, #2
 8004076:	0019      	movs	r1, r3
 8004078:	1820      	adds	r0, r4, r0
 800407a:	4698      	mov	r8, r3
 800407c:	f00e ff63 	bl	8012f46 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004080:	1ca8      	adds	r0, r5, #2
 8004082:	221d      	movs	r2, #29
 8004084:	1820      	adds	r0, r4, r0
 8004086:	494f      	ldr	r1, [pc, #316]	; (80041c4 <DisplayModuleStatus+0x2d0>)
 8004088:	f00e ff5d 	bl	8012f46 <memcpy>
	temp =strlen((char* )pcOutputString);
 800408c:	231e      	movs	r3, #30
 800408e:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004090:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 8004092:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 8004094:	4699      	mov	r9, r3
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	469a      	mov	sl, r3
 800409a:	4b35      	ldr	r3, [pc, #212]	; (8004170 <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409c:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 800409e:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 80040a0:	2200      	movs	r2, #0
 80040a2:	4e4a      	ldr	r6, [pc, #296]	; (80041cc <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a4:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 80040a6:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a8:	0029      	movs	r1, r5
 80040aa:	4111      	asrs	r1, r2
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <DisplayModuleStatus+0x280>)
 80040ae:	1c57      	adds	r7, r2, #1
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	5af3      	ldrh	r3, [r6, r3]
 80040b8:	4219      	tst	r1, r3
 80040ba:	d148      	bne.n	800414e <DisplayModuleStatus+0x25a>
 80040bc:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040be:	2f05      	cmp	r7, #5
 80040c0:	d1f2      	bne.n	80040a8 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040c2:	0020      	movs	r0, r4
 80040c4:	f7fc f828 	bl	8000118 <strlen>
 80040c8:	465b      	mov	r3, fp
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	0005      	movs	r5, r0
 80040ce:	1820      	adds	r0, r4, r0
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	d046      	beq.n	8004162 <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040d4:	2203      	movs	r2, #3
 80040d6:	4641      	mov	r1, r8
 80040d8:	f00e ff35 	bl	8012f46 <memcpy>
	
	/* Display output */
	if(port)
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80040e2:	0020      	movs	r0, r4
 80040e4:	f7fc f818 	bl	8000118 <strlen>
 80040e8:	2301      	movs	r3, #1
 80040ea:	425b      	negs	r3, r3
 80040ec:	b282      	uxth	r2, r0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	0021      	movs	r1, r4
 80040f2:	3333      	adds	r3, #51	; 0x33
 80040f4:	9803      	ldr	r0, [sp, #12]
 80040f6:	f009 fa2b 	bl	800d550 <writePxMutex>
	
}
 80040fa:	b005      	add	sp, #20
 80040fc:	bc3c      	pop	{r2, r3, r4, r5}
 80040fe:	4690      	mov	r8, r2
 8004100:	4699      	mov	r9, r3
 8004102:	46a2      	mov	sl, r4
 8004104:	46ab      	mov	fp, r5
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004108:	002a      	movs	r2, r5
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <DisplayModuleStatus+0x2dc>)
 800410c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800410e:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004110:	e761      	b.n	8003fd6 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004112:	002a      	movs	r2, r5
 8004114:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <DisplayModuleStatus+0x2e0>)
 8004116:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004118:	c283      	stmia	r2!, {r0, r1, r7}
 800411a:	cb03      	ldmia	r3!, {r0, r1}
 800411c:	c203      	stmia	r2!, {r0, r1}
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	7013      	strb	r3, [r2, #0]
				break;
 8004122:	e758      	b.n	8003fd6 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004124:	002b      	movs	r3, r5
 8004126:	465a      	mov	r2, fp
 8004128:	ca83      	ldmia	r2!, {r0, r1, r7}
 800412a:	c383      	stmia	r3!, {r0, r1, r7}
 800412c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800412e:	c383      	stmia	r3!, {r0, r1, r7}
 8004130:	6811      	ldr	r1, [r2, #0]
 8004132:	6019      	str	r1, [r3, #0]
 8004134:	8891      	ldrh	r1, [r2, #4]
 8004136:	8099      	strh	r1, [r3, #4]
 8004138:	7992      	ldrb	r2, [r2, #6]
 800413a:	719a      	strb	r2, [r3, #6]
				break;
 800413c:	e74b      	b.n	8003fd6 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <DisplayModuleStatus+0x2e4>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	602a      	str	r2, [r5, #0]
 8004144:	889a      	ldrh	r2, [r3, #4]
 8004146:	80aa      	strh	r2, [r5, #4]
 8004148:	799b      	ldrb	r3, [r3, #6]
 800414a:	71ab      	strb	r3, [r5, #6]
				break;
 800414c:	e743      	b.n	8003fd6 <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 800414e:	4649      	mov	r1, r9
 8004150:	003a      	movs	r2, r7
 8004152:	4650      	mov	r0, sl
 8004154:	f00f f8fa 	bl	801334c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004158:	4651      	mov	r1, sl
 800415a:	0020      	movs	r0, r4
 800415c:	f00f f916 	bl	801338c <strcat>
 8004160:	e7ac      	b.n	80040bc <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 8004162:	2205      	movs	r2, #5
 8004164:	491d      	ldr	r1, [pc, #116]	; (80041dc <DisplayModuleStatus+0x2e8>)
 8004166:	f00e feee 	bl	8012f46 <memcpy>
 800416a:	1d28      	adds	r0, r5, #4
 800416c:	1820      	adds	r0, r4, r0
 800416e:	e7b1      	b.n	80040d4 <DisplayModuleStatus+0x1e0>
 8004170:	20000ba8 	.word	0x20000ba8
 8004174:	20000aa8 	.word	0x20000aa8
 8004178:	08017f7c 	.word	0x08017f7c
 800417c:	20000c28 	.word	0x20000c28
 8004180:	08017f98 	.word	0x08017f98
 8004184:	08017fb4 	.word	0x08017fb4
 8004188:	08017fd4 	.word	0x08017fd4
 800418c:	08017fe0 	.word	0x08017fe0
 8004190:	08017ff8 	.word	0x08017ff8
 8004194:	08018004 	.word	0x08018004
 8004198:	08018020 	.word	0x08018020
 800419c:	08018034 	.word	0x08018034
 80041a0:	080176f0 	.word	0x080176f0
 80041a4:	08018084 	.word	0x08018084
 80041a8:	08018068 	.word	0x08018068
 80041ac:	080180a4 	.word	0x080180a4
 80041b0:	200012f4 	.word	0x200012f4
 80041b4:	20001b84 	.word	0x20001b84
 80041b8:	080180d8 	.word	0x080180d8
 80041bc:	080180bc 	.word	0x080180bc
 80041c0:	08018030 	.word	0x08018030
 80041c4:	08018108 	.word	0x08018108
 80041c8:	08018128 	.word	0x08018128
 80041cc:	20007238 	.word	0x20007238
 80041d0:	0801805c 	.word	0x0801805c
 80041d4:	08018044 	.word	0x08018044
 80041d8:	0801803c 	.word	0x0801803c
 80041dc:	08018130 	.word	0x08018130

080041e0 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041e4:	4929      	ldr	r1, [pc, #164]	; (800428c <GetID+0xac>)
int16_t GetID(char *string){
 80041e6:	b500      	push	{lr}
 80041e8:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 80041ea:	f7fb ff8b 	bl	8000104 <strcmp>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d02c      	beq.n	800424c <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 80041f2:	4927      	ldr	r1, [pc, #156]	; (8004290 <GetID+0xb0>)
 80041f4:	0030      	movs	r0, r6
 80041f6:	f7fb ff85 	bl	8000104 <strcmp>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d02b      	beq.n	8004256 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041fe:	7833      	ldrb	r3, [r6, #0]
 8004200:	4698      	mov	r8, r3
 8004202:	2b23      	cmp	r3, #35	; 0x23
 8004204:	d030      	beq.n	8004268 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <GetID+0xb4>)
 8004208:	781f      	ldrb	r7, [r3, #0]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d00f      	beq.n	800422e <GetID+0x4e>
 800420e:	2400      	movs	r4, #0
 8004210:	4d21      	ldr	r5, [pc, #132]	; (8004298 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004212:	0029      	movs	r1, r5
 8004214:	0030      	movs	r0, r6
 8004216:	f7fb ff75 	bl	8000104 <strcmp>
 800421a:	2800      	cmp	r0, #0
 800421c:	d102      	bne.n	8004224 <GetID+0x44>
 800421e:	4643      	mov	r3, r8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11a      	bne.n	800425a <GetID+0x7a>
		for(i =0; i < N; i++){
 8004224:	3401      	adds	r4, #1
 8004226:	b2e4      	uxtb	r4, r4
 8004228:	350a      	adds	r5, #10
 800422a:	42a7      	cmp	r7, r4
 800422c:	d1f1      	bne.n	8004212 <GetID+0x32>
 800422e:	2400      	movs	r4, #0
 8004230:	4d1a      	ldr	r5, [pc, #104]	; (800429c <GetID+0xbc>)
 8004232:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004234:	0029      	movs	r1, r5
 8004236:	0030      	movs	r0, r6
 8004238:	f7fb ff64 	bl	8000104 <strcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	d00e      	beq.n	800425e <GetID+0x7e>
 8004240:	3401      	adds	r4, #1
 8004242:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004244:	2c0a      	cmp	r4, #10
 8004246:	d1f5      	bne.n	8004234 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	e001      	b.n	8004250 <GetID+0x70>
		return myID;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <GetID+0xbc>)
 800424e:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 8004250:	bc04      	pop	{r2}
 8004252:	4690      	mov	r8, r2
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 8004256:	20ff      	movs	r0, #255	; 0xff
 8004258:	e7fa      	b.n	8004250 <GetID+0x70>
				return (i);
 800425a:	b220      	sxth	r0, r4
 800425c:	e7f8      	b.n	8004250 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	0224      	lsls	r4, r4, #8
 8004262:	4320      	orrs	r0, r4
 8004264:	b200      	sxth	r0, r0
 8004266:	e7f3      	b.n	8004250 <GetID+0x70>
		id =atol(string + 1);
 8004268:	1c70      	adds	r0, r6, #1
 800426a:	f00e fbac 	bl	80129c6 <atol>
 800426e:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <GetID+0x9c>
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <GetID+0xb4>)
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d204      	bcs.n	8004286 <GetID+0xa6>
		else if(id == myID)
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800427e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d1e4      	bne.n	8004250 <GetID+0x70>
			return myID;
 8004286:	b218      	sxth	r0, r3
 8004288:	e7e2      	b.n	8004250 <GetID+0x70>
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	08018138 	.word	0x08018138
 8004290:	0801813c 	.word	0x0801813c
 8004294:	20000010 	.word	0x20000010
 8004298:	20000dd4 	.word	0x20000dd4
 800429c:	20000aa8 	.word	0x20000aa8

080042a0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	46c6      	mov	lr, r8
 80042a4:	4c2c      	ldr	r4, [pc, #176]	; (8004358 <NameModule+0xb8>)
 80042a6:	0007      	movs	r7, r0
 80042a8:	0026      	movs	r6, r4
 80042aa:	000d      	movs	r5, r1
 80042ac:	b500      	push	{lr}
 80042ae:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042b0:	0021      	movs	r1, r4
 80042b2:	0028      	movs	r0, r5
 80042b4:	f7fb ff26 	bl	8000104 <strcmp>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d040      	beq.n	800433e <NameModule+0x9e>
 80042bc:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d1f6      	bne.n	80042b0 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <NameModule+0xbc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d914      	bls.n	80042f4 <NameModule+0x54>
 80042ca:	4c25      	ldr	r4, [pc, #148]	; (8004360 <NameModule+0xc0>)
 80042cc:	009e      	lsls	r6, r3, #2
 80042ce:	18f6      	adds	r6, r6, r3
 80042d0:	0023      	movs	r3, r4
 80042d2:	0076      	lsls	r6, r6, #1
 80042d4:	3b0a      	subs	r3, #10
 80042d6:	18f6      	adds	r6, r6, r3
 80042d8:	e002      	b.n	80042e0 <NameModule+0x40>
 80042da:	340a      	adds	r4, #10
 80042dc:	42b4      	cmp	r4, r6
 80042de:	d009      	beq.n	80042f4 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 80042e0:	0021      	movs	r1, r4
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7fb ff0e 	bl	8000104 <strcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f6      	bne.n	80042da <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 80042ec:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 80042ee:	bc04      	pop	{r2}
 80042f0:	4690      	mov	r8, r2
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	4e1b      	ldr	r6, [pc, #108]	; (8004364 <NameModule+0xc4>)
 80042f6:	0034      	movs	r4, r6
 80042f8:	369c      	adds	r6, #156	; 0x9c
 80042fa:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 80042fc:	0021      	movs	r1, r4
 80042fe:	0028      	movs	r0, r5
 8004300:	f7fb ff00 	bl	8000104 <strcmp>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0f1      	beq.n	80042ec <NameModule+0x4c>
 8004308:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800430a:	42a6      	cmp	r6, r4
 800430c:	d1f6      	bne.n	80042fc <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <NameModule+0xc8>)
 8004310:	4c16      	ldr	r4, [pc, #88]	; (800436c <NameModule+0xcc>)
 8004312:	4698      	mov	r8, r3
 8004314:	61dc      	str	r4, [r3, #28]
 8004316:	e004      	b.n	8004322 <NameModule+0x82>
 8004318:	4643      	mov	r3, r8
 800431a:	6864      	ldr	r4, [r4, #4]
 800431c:	61dc      	str	r4, [r3, #28]
 800431e:	2c00      	cmp	r4, #0
 8004320:	d00f      	beq.n	8004342 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004326:	0030      	movs	r0, r6
 8004328:	f7fb fef6 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800432c:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800432e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004330:	0028      	movs	r0, r5
 8004332:	f00f f84f 	bl	80133d4 <strncmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d1ee      	bne.n	8004318 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800433a:	2008      	movs	r0, #8
 800433c:	e7d7      	b.n	80042ee <NameModule+0x4e>
			return BOS_ERR_Keyword;
 800433e:	2006      	movs	r0, #6
 8004340:	e7d5      	b.n	80042ee <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 8004342:	00b8      	lsls	r0, r7, #2
 8004344:	19c0      	adds	r0, r0, r7
 8004346:	4f0a      	ldr	r7, [pc, #40]	; (8004370 <NameModule+0xd0>)
 8004348:	0040      	lsls	r0, r0, #1
 800434a:	0029      	movs	r1, r5
 800434c:	19c0      	adds	r0, r0, r7
 800434e:	f00f f839 	bl	80133c4 <strcpy>
	result =SaveEEalias();
 8004352:	f7ff f881 	bl	8003458 <SaveEEalias>
	return result;
 8004356:	e7ca      	b.n	80042ee <NameModule+0x4e>
 8004358:	0801774c 	.word	0x0801774c
 800435c:	20000010 	.word	0x20000010
 8004360:	20000dde 	.word	0x20000dde
 8004364:	20000aa8 	.word	0x20000aa8
 8004368:	20000c28 	.word	0x20000c28
 800436c:	200000c8 	.word	0x200000c8
 8004370:	20000dd4 	.word	0x20000dd4

08004374 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	464f      	mov	r7, r9
 8004378:	4646      	mov	r6, r8
 800437a:	46d6      	mov	lr, sl
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <AddModuleToGroup+0x104>)
 800437e:	b5c0      	push	{r6, r7, lr}
 8004380:	001f      	movs	r7, r3
 8004382:	3738      	adds	r7, #56	; 0x38
 8004384:	4680      	mov	r8, r0
 8004386:	000e      	movs	r6, r1
 8004388:	4699      	mov	r9, r3
 800438a:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800438c:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f7fb feb7 	bl	8000104 <strcmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d02a      	beq.n	80043f0 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 800439a:	3501      	adds	r5, #1
 800439c:	340a      	adds	r4, #10
 800439e:	2d0a      	cmp	r5, #10
 80043a0:	d1f5      	bne.n	800438e <AddModuleToGroup+0x1a>
 80043a2:	4c36      	ldr	r4, [pc, #216]	; (800447c <AddModuleToGroup+0x108>)
 80043a4:	0025      	movs	r5, r4
 80043a6:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043a8:	0021      	movs	r1, r4
 80043aa:	0030      	movs	r0, r6
 80043ac:	f7fb feaa 	bl	8000104 <strcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d051      	beq.n	8004458 <AddModuleToGroup+0xe4>
 80043b4:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043b6:	42a5      	cmp	r5, r4
 80043b8:	d1f6      	bne.n	80043a8 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <AddModuleToGroup+0x10c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d920      	bls.n	8004404 <AddModuleToGroup+0x90>
 80043c2:	4c30      	ldr	r4, [pc, #192]	; (8004484 <AddModuleToGroup+0x110>)
 80043c4:	009d      	lsls	r5, r3, #2
 80043c6:	18ed      	adds	r5, r5, r3
 80043c8:	0023      	movs	r3, r4
 80043ca:	006d      	lsls	r5, r5, #1
 80043cc:	3b0a      	subs	r3, #10
 80043ce:	18ed      	adds	r5, r5, r3
 80043d0:	e002      	b.n	80043d8 <AddModuleToGroup+0x64>
 80043d2:	340a      	adds	r4, #10
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d015      	beq.n	8004404 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 80043d8:	0021      	movs	r1, r4
 80043da:	0030      	movs	r0, r6
 80043dc:	f7fb fe92 	bl	8000104 <strcmp>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1f6      	bne.n	80043d2 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 80043e4:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80043e6:	bc1c      	pop	{r2, r3, r4}
 80043e8:	4690      	mov	r8, r2
 80043ea:	4699      	mov	r9, r3
 80043ec:	46a2      	mov	sl, r4
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 80043f0:	2201      	movs	r2, #1
 80043f2:	4647      	mov	r7, r8
 80043f4:	40aa      	lsls	r2, r5
 80043f6:	3f01      	subs	r7, #1
 80043f8:	007f      	lsls	r7, r7, #1
 80043fa:	444f      	add	r7, r9
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
			return result;
 8004402:	e7f0      	b.n	80043e6 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <AddModuleToGroup+0x114>)
 8004406:	4c21      	ldr	r4, [pc, #132]	; (800448c <AddModuleToGroup+0x118>)
 8004408:	469a      	mov	sl, r3
 800440a:	621c      	str	r4, [r3, #32]
 800440c:	e004      	b.n	8004418 <AddModuleToGroup+0xa4>
 800440e:	4653      	mov	r3, sl
 8004410:	6864      	ldr	r4, [r4, #4]
 8004412:	621c      	str	r4, [r3, #32]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d00d      	beq.n	8004434 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800441c:	0028      	movs	r0, r5
 800441e:	f7fb fe7b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004422:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004424:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004426:	0030      	movs	r0, r6
 8004428:	f00e ffd4 	bl	80133d4 <strncmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	d1ee      	bne.n	800440e <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004430:	2008      	movs	r0, #8
 8004432:	e7d8      	b.n	80043e6 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004434:	783b      	ldrb	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800443a:	3401      	adds	r4, #1
 800443c:	370a      	adds	r7, #10
 800443e:	2c0a      	cmp	r4, #10
 8004440:	d1f8      	bne.n	8004434 <AddModuleToGroup+0xc0>
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004446:	4647      	mov	r7, r8
 8004448:	3f01      	subs	r7, #1
 800444a:	007f      	lsls	r7, r7, #1
 800444c:	444f      	add	r7, r9
 800444e:	88ba      	ldrh	r2, [r7, #4]
	return result;
 8004450:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004452:	4313      	orrs	r3, r2
 8004454:	80bb      	strh	r3, [r7, #4]
	return result;
 8004456:	e7c6      	b.n	80043e6 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 8004458:	2006      	movs	r0, #6
 800445a:	e7c4      	b.n	80043e6 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 800445c:	464b      	mov	r3, r9
 800445e:	00a0      	lsls	r0, r4, #2
 8004460:	1900      	adds	r0, r0, r4
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	1818      	adds	r0, r3, r0
 8004468:	0031      	movs	r1, r6
 800446a:	f00e ffab 	bl	80133c4 <strcpy>
 800446e:	2301      	movs	r3, #1
 8004470:	40a3      	lsls	r3, r4
 8004472:	b21b      	sxth	r3, r3
			break;
 8004474:	e7e7      	b.n	8004446 <AddModuleToGroup+0xd2>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000aa8 	.word	0x20000aa8
 800447c:	0801774c 	.word	0x0801774c
 8004480:	20000010 	.word	0x20000010
 8004484:	20000dde 	.word	0x20000dde
 8004488:	20000c28 	.word	0x20000c28
 800448c:	200000c8 	.word	0x200000c8

08004490 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	464e      	mov	r6, r9
 8004494:	46de      	mov	lr, fp
 8004496:	4657      	mov	r7, sl
 8004498:	4645      	mov	r5, r8
 800449a:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <ReadPortsDir+0xb4>)
BOS_Status ReadPortsDir(void){
 800449e:	b083      	sub	sp, #12
	for(uint8_t i =1; i <= N; i++){
 80044a0:	4699      	mov	r9, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d04a      	beq.n	800453e <ReadPortsDir+0xae>
	BOS_Status result =BOS_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <ReadPortsDir+0xb8>)
	for(uint8_t i =1; i <= N; i++){
 80044ae:	2501      	movs	r5, #1
 80044b0:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <ReadPortsDir+0xbc>)
 80044b4:	469a      	mov	sl, r3
			if(responseStatus != BOS_OK){
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <ReadPortsDir+0xc0>)
 80044b8:	469b      	mov	fp, r3
 80044ba:	e014      	b.n	80044e6 <ReadPortsDir+0x56>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044bc:	2200      	movs	r2, #0
 80044be:	2113      	movs	r1, #19
 80044c0:	0028      	movs	r0, r5
 80044c2:	f005 fa99 	bl	80099f8 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f008 fec6 	bl	800d258 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044cc:	2324      	movs	r3, #36	; 0x24
 80044ce:	465a      	mov	r2, fp
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <ReadPortsDir+0x4a>
				result =BOS_ERR_NoResponse;
 80044d6:	2302      	movs	r3, #2
 80044d8:	9301      	str	r3, [sp, #4]
	for(uint8_t i =1; i <= N; i++){
 80044da:	464b      	mov	r3, r9
 80044dc:	3501      	adds	r5, #1
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2ed      	uxtb	r5, r5
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	d323      	bcc.n	800452e <ReadPortsDir+0x9e>
		if(i != myID){
 80044e6:	4643      	mov	r3, r8
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d1e6      	bne.n	80044bc <ReadPortsDir+0x2c>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ee:	2780      	movs	r7, #128	; 0x80
 80044f0:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f2:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044f4:	023f      	lsls	r7, r7, #8
 80044f6:	0020      	movs	r0, r4
 80044f8:	f009 f8b2 	bl	800d660 <GetUart>
 80044fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044fe:	42bb      	cmp	r3, r7
 8004500:	d10a      	bne.n	8004518 <ReadPortsDir+0x88>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004502:	0039      	movs	r1, r7
 8004504:	4643      	mov	r3, r8
 8004506:	4652      	mov	r2, sl
 8004508:	4131      	asrs	r1, r6
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	5a9a      	ldrh	r2, [r3, r2]
 8004512:	430a      	orrs	r2, r1
 8004514:	4651      	mov	r1, sl
 8004516:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004518:	3401      	adds	r4, #1
 800451a:	b2e4      	uxtb	r4, r4
 800451c:	3601      	adds	r6, #1
 800451e:	2c06      	cmp	r4, #6
 8004520:	d1e9      	bne.n	80044f6 <ReadPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8004522:	464b      	mov	r3, r9
 8004524:	3501      	adds	r5, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2ed      	uxtb	r5, r5
 800452a:	42ab      	cmp	r3, r5
 800452c:	d2db      	bcs.n	80044e6 <ReadPortsDir+0x56>
			}
		}
	}
	
	return result;
}
 800452e:	9801      	ldr	r0, [sp, #4]
 8004530:	b003      	add	sp, #12
 8004532:	bc3c      	pop	{r2, r3, r4, r5}
 8004534:	4690      	mov	r8, r2
 8004536:	4699      	mov	r9, r3
 8004538:	46a2      	mov	sl, r4
 800453a:	46ab      	mov	fp, r5
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	e7f4      	b.n	800452e <ReadPortsDir+0x9e>
 8004544:	20000010 	.word	0x20000010
 8004548:	20000aa8 	.word	0x20000aa8
 800454c:	20007238 	.word	0x20007238
 8004550:	20000c28 	.word	0x20000c28

08004554 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	46c6      	mov	lr, r8
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <UpdateMyPortsDir+0x50>)
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800455a:	2680      	movs	r6, #128	; 0x80
BOS_Status UpdateMyPortsDir(void){
 800455c:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800455e:	2401      	movs	r4, #1
 8004560:	4698      	mov	r8, r3
BOS_Status UpdateMyPortsDir(void){
 8004562:	b500      	push	{lr}
 8004564:	4f10      	ldr	r7, [pc, #64]	; (80045a8 <UpdateMyPortsDir+0x54>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004566:	0236      	lsls	r6, r6, #8
 8004568:	4642      	mov	r2, r8
 800456a:	783b      	ldrb	r3, [r7, #0]
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 800456c:	0020      	movs	r0, r4
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800456e:	3b01      	subs	r3, #1
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	5ad3      	ldrh	r3, [r2, r3]
 8004574:	0032      	movs	r2, r6
 8004576:	412a      	asrs	r2, r5
 8004578:	421a      	tst	r2, r3
 800457a:	d10d      	bne.n	8004598 <UpdateMyPortsDir+0x44>
			SwapUartPins(GetUart(p),NORMAL);
 800457c:	f009 f870 	bl	800d660 <GetUart>
 8004580:	2100      	movs	r1, #0
 8004582:	f009 f879 	bl	800d678 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004586:	3401      	adds	r4, #1
 8004588:	b2e4      	uxtb	r4, r4
 800458a:	3501      	adds	r5, #1
 800458c:	2c06      	cmp	r4, #6
 800458e:	d1eb      	bne.n	8004568 <UpdateMyPortsDir+0x14>
			SwapUartPins(GetUart(p),REVERSED);
		}
	}
	
	return result;
}
 8004590:	2000      	movs	r0, #0
 8004592:	bc04      	pop	{r2}
 8004594:	4690      	mov	r8, r2
 8004596:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SwapUartPins(GetUart(p),REVERSED);
 8004598:	f009 f862 	bl	800d660 <GetUart>
 800459c:	2101      	movs	r1, #1
 800459e:	f009 f86b 	bl	800d678 <SwapUartPins>
 80045a2:	e7f0      	b.n	8004586 <UpdateMyPortsDir+0x32>
 80045a4:	20007238 	.word	0x20007238
 80045a8:	20000aa8 	.word	0x20000aa8

080045ac <BOS_Init>:
void BOS_Init(void){
 80045ac:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ae:	f008 fd07 	bl	800cfc0 <RTC_Init>
	GetTimeDate();
 80045b2:	f008 fdab 	bl	800d10c <GetTimeDate>
	EE_Init();
 80045b6:	f003 fa55 	bl	8007a64 <EE_Init>
	GPIO_Init();
 80045ba:	f008 fa69 	bl	800ca90 <GPIO_Init>
	DMA_Init();
 80045be:	f007 fa25 	bl	800ba0c <DMA_Init>
	TIM_USEC_Init();
 80045c2:	f008 fdd5 	bl	800d170 <TIM_USEC_Init>
	CRC_Init();
 80045c6:	f008 fa23 	bl	800ca10 <CRC_Init>
	TIM_MSEC_Init();
 80045ca:	f008 fe03 	bl	800d1d4 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045ce:	f008 fb11 	bl	800cbf4 <IsFactoryReset>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d162      	bne.n	800469c <BOS_Init+0xf0>
	if(IsLowerCLIbaud()){
 80045d6:	f7ff f83b 	bl	8003650 <IsLowerCLIbaud>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d053      	beq.n	8004686 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80045de:	2322      	movs	r3, #34	; 0x22
 80045e0:	2101      	movs	r1, #1
 80045e2:	4a38      	ldr	r2, [pc, #224]	; (80046c4 <BOS_Init+0x118>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045e4:	2032      	movs	r0, #50	; 0x32
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045e6:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 80045e8:	54d1      	strb	r1, [r2, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045ea:	f008 fe35 	bl	800d258 <StartMilliDelay>
		Module_Peripheral_Init();
 80045ee:	f007 f88f 	bl	800b710 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045f2:	21e1      	movs	r1, #225	; 0xe1
 80045f4:	4d34      	ldr	r5, [pc, #208]	; (80046c8 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 80045f6:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f8:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045fa:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045fc:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045fe:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8004600:	f009 f81c 	bl	800d63c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004604:	2c06      	cmp	r4, #6
 8004606:	d007      	beq.n	8004618 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004608:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800460a:	3401      	adds	r4, #1
 800460c:	68a9      	ldr	r1, [r5, #8]
 800460e:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8004610:	f009 f814 	bl	800d63c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004614:	2c06      	cmp	r4, #6
 8004616:	d1f7      	bne.n	8004608 <BOS_Init+0x5c>
	LoadEEvars();
 8004618:	f7fe fee4 	bl	80033e4 <LoadEEvars>
	UpdateMyPortsDir();
 800461c:	f7ff ff9a 	bl	8004554 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004620:	f007 fe92 	bl	800c348 <SetupMessagingRxDMAs>
		IND_ON();
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <BOS_Init+0x120>)
		IND_ON();
 800462a:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 800462c:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800462e:	0109      	lsls	r1, r1, #4
 8004630:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02d      	beq.n	8004692 <BOS_Init+0xe6>
		IND_ON();
 8004636:	f00c fd29 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800463a:	20fa      	movs	r0, #250	; 0xfa
 800463c:	0040      	lsls	r0, r0, #1
 800463e:	f008 fe0b 	bl	800d258 <StartMilliDelay>
		IND_OFF();
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	2090      	movs	r0, #144	; 0x90
 8004646:	2200      	movs	r2, #0
 8004648:	0109      	lsls	r1, r1, #4
 800464a:	05c0      	lsls	r0, r0, #23
 800464c:	f00c fd1e 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	f008 fe01 	bl	800d258 <StartMilliDelay>
		IND_ON();
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	2090      	movs	r0, #144	; 0x90
 800465a:	2201      	movs	r2, #1
 800465c:	05c0      	lsls	r0, r0, #23
 800465e:	0109      	lsls	r1, r1, #4
 8004660:	f00c fd14 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004664:	2064      	movs	r0, #100	; 0x64
 8004666:	f008 fdf7 	bl	800d258 <StartMilliDelay>
		IND_OFF();
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	2090      	movs	r0, #144	; 0x90
 800466e:	2200      	movs	r2, #0
 8004670:	0109      	lsls	r1, r1, #4
 8004672:	05c0      	lsls	r0, r0, #23
 8004674:	f00c fd0a 	bl	801108c <HAL_GPIO_WritePin>
	ResetUartORE();
 8004678:	f003 f864 	bl	8007744 <ResetUartORE>
	BOS_initialized =1;
 800467c:	2325      	movs	r3, #37	; 0x25
 800467e:	2101      	movs	r1, #1
 8004680:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <BOS_Init+0x124>)
 8004682:	54d1      	strb	r1, [r2, r3]
}
 8004684:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004686:	2032      	movs	r0, #50	; 0x32
 8004688:	f008 fde6 	bl	800d258 <StartMilliDelay>
		Module_Peripheral_Init();
 800468c:	f007 f840 	bl	800b710 <Module_Peripheral_Init>
 8004690:	e7c2      	b.n	8004618 <BOS_Init+0x6c>
		IND_ON();
 8004692:	f00c fcfb 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004696:	20fa      	movs	r0, #250	; 0xfa
 8004698:	0040      	lsls	r0, r0, #1
 800469a:	e7e4      	b.n	8004666 <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800469c:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <BOS_Init+0x128>)
 800469e:	4d0e      	ldr	r5, [pc, #56]	; (80046d8 <BOS_Init+0x12c>)
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	42ab      	cmp	r3, r5
 80046a4:	d004      	beq.n	80046b0 <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 80046a6:	f003 f98d 	bl	80079c4 <EE_Format>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d100      	bne.n	80046b0 <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80046ae:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046b0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <BOS_Init+0x130>)
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <BOS_Init+0x134>)
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	e7fd      	b.n	80046be <BOS_Init+0x112>
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	20000b28 	.word	0x20000b28
 80046c8:	20006db4 	.word	0x20006db4
 80046cc:	20000aa8 	.word	0x20000aa8
 80046d0:	20000c28 	.word	0x20000c28
 80046d4:	20007ff0 	.word	0x20007ff0
 80046d8:	beefdead 	.word	0xbeefdead
 80046dc:	e000ed00 	.word	0xe000ed00
 80046e0:	05fa0004 	.word	0x05fa0004

080046e4 <Module_Init>:
void Module_Init(void){
 80046e4:	b510      	push	{r4, lr}
	HAL_Init();
 80046e6:	f00a fff1 	bl	800f6cc <HAL_Init>
	SystemClock_Config();
 80046ea:	f006 feab 	bl	800b444 <SystemClock_Config>
	BOS_Init();
 80046ee:	f7ff ff5d 	bl	80045ac <BOS_Init>
	MX_FREERTOS_Init();
 80046f2:	f003 fb0f 	bl	8007d14 <MX_FREERTOS_Init>
	osKernelStart();
 80046f6:	f009 f871 	bl	800d7dc <osKernelStart>
}
 80046fa:	bd10      	pop	{r4, pc}

080046fc <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	4645      	mov	r5, r8
 8004700:	4657      	mov	r7, sl
 8004702:	464e      	mov	r6, r9
 8004704:	46de      	mov	lr, fp
 8004706:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004708:	4f82      	ldr	r7, [pc, #520]	; (8004914 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800470a:	b083      	sub	sp, #12
 800470c:	ac0c      	add	r4, sp, #48	; 0x30
 800470e:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004710:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004712:	9001      	str	r0, [sp, #4]
 8004714:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004716:	46a8      	mov	r8, r5
	if(timeout)
 8004718:	2e00      	cmp	r6, #0
 800471a:	d059      	beq.n	80047d0 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 800471c:	2520      	movs	r5, #32
 800471e:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004720:	4265      	negs	r5, r4
 8004722:	416c      	adcs	r4, r5
 8004724:	2501      	movs	r5, #1
 8004726:	2022      	movs	r0, #34	; 0x22
 8004728:	4264      	negs	r4, r4
 800472a:	43ac      	bics	r4, r5
 800472c:	46a3      	mov	fp, r4
 800472e:	4684      	mov	ip, r0
 8004730:	b2d5      	uxtb	r5, r2
 8004732:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004734:	4d78      	ldr	r5, [pc, #480]	; (8004918 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004736:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004738:	42aa      	cmp	r2, r5
 800473a:	d829      	bhi.n	8004790 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 800473c:	2224      	movs	r2, #36	; 0x24
 800473e:	464c      	mov	r4, r9
 8004740:	4d76      	ldr	r5, [pc, #472]	; (800491c <WriteToRemote+0x220>)
 8004742:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004744:	002a      	movs	r2, r5
 8004746:	3224      	adds	r2, #36	; 0x24
 8004748:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 800474a:	2b08      	cmp	r3, #8
 800474c:	d814      	bhi.n	8004778 <WriteToRemote+0x7c>
 800474e:	4a74      	ldr	r2, [pc, #464]	; (8004920 <WriteToRemote+0x224>)
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	58d3      	ldr	r3, [r2, r3]
 8004754:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	3524      	adds	r5, #36	; 0x24
 800475a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800475c:	680b      	ldr	r3, [r1, #0]
 800475e:	121b      	asrs	r3, r3, #8
 8004760:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004762:	680b      	ldr	r3, [r1, #0]
 8004764:	141b      	asrs	r3, r3, #16
 8004766:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004768:	680b      	ldr	r3, [r1, #0]
 800476a:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 800476c:	220a      	movs	r2, #10
 800476e:	4659      	mov	r1, fp
 8004770:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004772:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004774:	f005 f940 	bl	80099f8 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004778:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 800477a:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 800477c:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800477e:	2e00      	cmp	r6, #0
 8004780:	d128      	bne.n	80047d4 <WriteToRemote+0xd8>
}
 8004782:	b003      	add	sp, #12
 8004784:	bc3c      	pop	{r2, r3, r4, r5}
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	46a2      	mov	sl, r4
 800478c:	46ab      	mov	fp, r5
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004790:	2024      	movs	r0, #36	; 0x24
 8004792:	4684      	mov	ip, r0
 8004794:	2000      	movs	r0, #0
 8004796:	4682      	mov	sl, r0
 8004798:	4660      	mov	r0, ip
 800479a:	4654      	mov	r4, sl
 800479c:	4d5f      	ldr	r5, [pc, #380]	; (800491c <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 800479e:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047a0:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047a2:	4660      	mov	r0, ip
 80047a4:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047a6:	0e10      	lsrs	r0, r2, #24
 80047a8:	4682      	mov	sl, r0
 80047aa:	4660      	mov	r0, ip
 80047ac:	4654      	mov	r4, sl
 80047ae:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047b0:	0c10      	lsrs	r0, r2, #16
 80047b2:	4682      	mov	sl, r0
 80047b4:	4660      	mov	r0, ip
 80047b6:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047b8:	0a12      	lsrs	r2, r2, #8
 80047ba:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047bc:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047be:	4662      	mov	r2, ip
 80047c0:	4648      	mov	r0, r9
 80047c2:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d8d7      	bhi.n	8004778 <WriteToRemote+0x7c>
 80047c8:	4a56      	ldr	r2, [pc, #344]	; (8004924 <WriteToRemote+0x228>)
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	58d3      	ldr	r3, [r2, r3]
 80047ce:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047d0:	703e      	strb	r6, [r7, #0]
 80047d2:	e7a5      	b.n	8004720 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047d4:	f00a ff92 	bl	800f6fc <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047d8:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047da:	0007      	movs	r7, r0
 80047dc:	4d52      	ldr	r5, [pc, #328]	; (8004928 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047de:	5d28      	ldrb	r0, [r5, r4]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d0ce      	beq.n	8004782 <WriteToRemote+0x86>
 80047e4:	f00a ff8a 	bl	800f6fc <HAL_GetTick>
 80047e8:	1bc0      	subs	r0, r0, r7
 80047ea:	42b0      	cmp	r0, r6
 80047ec:	d3f7      	bcc.n	80047de <WriteToRemote+0xe2>
 80047ee:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80047f0:	e7c7      	b.n	8004782 <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80047f2:	780b      	ldrb	r3, [r1, #0]
 80047f4:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80047f6:	2203      	movs	r2, #3
 80047f8:	2120      	movs	r1, #32
 80047fa:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 80047fc:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80047fe:	f005 f8fb 	bl	80099f8 <SendMessageToModule>
				break;
 8004802:	e7b9      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004804:	780b      	ldrb	r3, [r1, #0]
 8004806:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004808:	2207      	movs	r2, #7
 800480a:	4659      	mov	r1, fp
 800480c:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800480e:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004810:	f005 f8f2 	bl	80099f8 <SendMessageToModule>
				break;
 8004814:	e7b0      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004816:	680b      	ldr	r3, [r1, #0]
 8004818:	3524      	adds	r5, #36	; 0x24
 800481a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800481c:	680b      	ldr	r3, [r1, #0]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	0e1b      	lsrs	r3, r3, #24
 800482c:	e79e      	b.n	800476c <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800482e:	780b      	ldrb	r3, [r1, #0]
 8004830:	3524      	adds	r5, #36	; 0x24
 8004832:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004834:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004836:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004838:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800483a:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800483c:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800483e:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004840:	78cb      	ldrb	r3, [r1, #3]
 8004842:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004844:	790b      	ldrb	r3, [r1, #4]
 8004846:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004848:	794b      	ldrb	r3, [r1, #5]
 800484a:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 800484c:	798b      	ldrb	r3, [r1, #6]
 800484e:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004850:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004852:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004854:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004856:	f005 f8cf 	bl	80099f8 <SendMessageToModule>
				break;
 800485a:	e78d      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 800485c:	780b      	ldrb	r3, [r1, #0]
 800485e:	3524      	adds	r5, #36	; 0x24
 8004860:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004862:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004864:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004866:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004868:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 800486a:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800486c:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800486e:	78cb      	ldrb	r3, [r1, #3]
 8004870:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004872:	790b      	ldrb	r3, [r1, #4]
 8004874:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004876:	794b      	ldrb	r3, [r1, #5]
 8004878:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800487a:	798b      	ldrb	r3, [r1, #6]
 800487c:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800487e:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004880:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004882:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004884:	f005 f8b8 	bl	80099f8 <SendMessageToModule>
				break;
 8004888:	e776      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 800488a:	880b      	ldrh	r3, [r1, #0]
 800488c:	3524      	adds	r5, #36	; 0x24
 800488e:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004890:	880b      	ldrh	r3, [r1, #0]
 8004892:	b21b      	sxth	r3, r3
 8004894:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 8004896:	2208      	movs	r2, #8
 8004898:	4659      	mov	r1, fp
 800489a:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800489c:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 800489e:	f005 f8ab 	bl	80099f8 <SendMessageToModule>
				break;
 80048a2:	e769      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048a4:	880b      	ldrh	r3, [r1, #0]
 80048a6:	3524      	adds	r5, #36	; 0x24
 80048a8:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048aa:	880b      	ldrh	r3, [r1, #0]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	e7f2      	b.n	8004896 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048b0:	680b      	ldr	r3, [r1, #0]
 80048b2:	3524      	adds	r5, #36	; 0x24
 80048b4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048b6:	680b      	ldr	r3, [r1, #0]
 80048b8:	121b      	asrs	r3, r3, #8
 80048ba:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048bc:	680b      	ldr	r3, [r1, #0]
 80048be:	141b      	asrs	r3, r3, #16
 80048c0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048c6:	2206      	movs	r2, #6
 80048c8:	2120      	movs	r1, #32
 80048ca:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048cc:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048ce:	f005 f893 	bl	80099f8 <SendMessageToModule>
				break;
 80048d2:	e751      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048d4:	680b      	ldr	r3, [r1, #0]
 80048d6:	3524      	adds	r5, #36	; 0x24
 80048d8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048da:	680b      	ldr	r3, [r1, #0]
 80048dc:	0a1b      	lsrs	r3, r3, #8
 80048de:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80048e6:	680b      	ldr	r3, [r1, #0]
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	e7ec      	b.n	80048c6 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048ec:	880b      	ldrh	r3, [r1, #0]
 80048ee:	3524      	adds	r5, #36	; 0x24
 80048f0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048f2:	880b      	ldrh	r3, [r1, #0]
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80048f8:	2204      	movs	r2, #4
 80048fa:	2120      	movs	r1, #32
 80048fc:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048fe:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004900:	f005 f87a 	bl	80099f8 <SendMessageToModule>
				break;
 8004904:	e738      	b.n	8004778 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004906:	880b      	ldrh	r3, [r1, #0]
 8004908:	3524      	adds	r5, #36	; 0x24
 800490a:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800490c:	880b      	ldrh	r3, [r1, #0]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	e7f2      	b.n	80048f8 <WriteToRemote+0x1fc>
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20006d34 	.word	0x20006d34
 8004918:	07ffffff 	.word	0x07ffffff
 800491c:	20000b28 	.word	0x20000b28
 8004920:	08017704 	.word	0x08017704
 8004924:	08017728 	.word	0x08017728
 8004928:	20000c28 	.word	0x20000c28

0800492c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800492c:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800492e:	2101      	movs	r1, #1
char* GetDateString(void){
 8004930:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 8004932:	201e      	movs	r0, #30
 8004934:	f00e f84e 	bl	80129d4 <calloc>
 8004938:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 800493a:	4809      	ldr	r0, [pc, #36]	; (8004960 <GetDateString+0x34>)
 800493c:	4909      	ldr	r1, [pc, #36]	; (8004964 <GetDateString+0x38>)
 800493e:	7d02      	ldrb	r2, [r0, #20]
 8004940:	8b05      	ldrh	r5, [r0, #24]
 8004942:	7d83      	ldrb	r3, [r0, #22]
 8004944:	3a01      	subs	r2, #1
 8004946:	9501      	str	r5, [sp, #4]
 8004948:	7d40      	ldrb	r0, [r0, #21]
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	188a      	adds	r2, r1, r2
 800494e:	9000      	str	r0, [sp, #0]
 8004950:	6912      	ldr	r2, [r2, #16]
 8004952:	312c      	adds	r1, #44	; 0x2c
 8004954:	0020      	movs	r0, r4
 8004956:	f00e fcf9 	bl	801334c <sprintf>
	return buffer;
}
 800495a:	0020      	movs	r0, r4
 800495c:	b003      	add	sp, #12
 800495e:	bd30      	pop	{r4, r5, pc}
 8004960:	20006db4 	.word	0x20006db4
 8004964:	0801774c 	.word	0x0801774c

08004968 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004968:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800496c:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800496e:	7819      	ldrb	r1, [r3, #0]
 8004970:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004972:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	3b02      	subs	r3, #2
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	3303      	adds	r3, #3
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	000b      	movs	r3, r1
 8004982:	f005 f85d 	bl	8009a40 <StartScastDMAStream>
}
 8004986:	b005      	add	sp, #20
 8004988:	bd00      	pop	{pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	20000aa8 	.word	0x20000aa8

08004990 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004990:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004992:	b530      	push	{r4, r5, lr}
 8004994:	0004      	movs	r4, r0
 8004996:	000d      	movs	r5, r1
 8004998:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7fe fd99 	bl	80034e0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ae:	1e60      	subs	r0, r4, #1
 80049b0:	00c3      	lsls	r3, r0, #3
 80049b2:	4912      	ldr	r1, [pc, #72]	; (80049fc <Unbridge+0x6c>)
 80049b4:	1a1b      	subs	r3, r3, r0
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	585b      	ldr	r3, [r3, r1]
 80049ba:	1e6a      	subs	r2, r5, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <Unbridge+0x56>
 80049c0:	00d3      	lsls	r3, r2, #3
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049c8:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049ce:	f002 fe15 	bl	80075fc <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049d2:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049d4:	b007      	add	sp, #28
 80049d6:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049d8:	f002 fe10 	bl	80075fc <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049dc:	0028      	movs	r0, r5
 80049de:	f002 fe0d 	bl	80075fc <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7f6      	b.n	80049d4 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80049e6:	00d3      	lsls	r3, r2, #3
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	585b      	ldr	r3, [r3, r1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80049f2:	0028      	movs	r0, r5
 80049f4:	e7eb      	b.n	80049ce <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80049f6:	2068      	movs	r0, #104	; 0x68
 80049f8:	e7ec      	b.n	80049d4 <Unbridge+0x44>
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	20001b84 	.word	0x20001b84

08004a00 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a02:	46d6      	mov	lr, sl
 8004a04:	4646      	mov	r6, r8
 8004a06:	464f      	mov	r7, r9
 8004a08:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a0a:	4e27      	ldr	r6, [pc, #156]	; (8004aa8 <AddSnippet.part.0+0xa8>)
 8004a0c:	4d27      	ldr	r5, [pc, #156]	; (8004aac <AddSnippet.part.0+0xac>)
 8004a0e:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a10:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a12:	3b01      	subs	r3, #1
 8004a14:	009c      	lsls	r4, r3, #2
 8004a16:	18e4      	adds	r4, r4, r3
 8004a18:	00a4      	lsls	r4, r4, #2
 8004a1a:	192c      	adds	r4, r5, r4
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	469a      	mov	sl, r3
 8004a20:	f7fb fb7a 	bl	8000118 <strlen>
 8004a24:	4653      	mov	r3, sl
 8004a26:	4681      	mov	r9, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02e      	beq.n	8004a8a <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	f7fb fb73 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a32:	4649      	mov	r1, r9
 8004a34:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a36:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a38:	1809      	adds	r1, r1, r0
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	f00e fabe 	bl	8012fbc <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a40:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a42:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a44:	3a01      	subs	r2, #1
 8004a46:	0093      	lsls	r3, r2, #2
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	18eb      	adds	r3, r5, r3
 8004a4e:	68d8      	ldr	r0, [r3, #12]
 8004a50:	1c7a      	adds	r2, r7, #1
 8004a52:	1880      	adds	r0, r0, r2
 8004a54:	4641      	mov	r1, r8
 8004a56:	f00e fcb5 	bl	80133c4 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a5a:	7832      	ldrb	r2, [r6, #0]
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0093      	lsls	r3, r2, #2
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	2213      	movs	r2, #19
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	18eb      	adds	r3, r5, r3
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	55da      	strb	r2, [r3, r7]
 8004a6c:	7833      	ldrb	r3, [r6, #0]
 8004a6e:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a70:	0098      	lsls	r0, r3, #2
 8004a72:	18c0      	adds	r0, r0, r3
 8004a74:	0080      	lsls	r0, r0, #2
 8004a76:	1828      	adds	r0, r5, r0
 8004a78:	68c3      	ldr	r3, [r0, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a7e:	2000      	movs	r0, #0
}
 8004a80:	bc1c      	pop	{r2, r3, r4}
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	46a2      	mov	sl, r4
 8004a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f00e f80e 	bl	8012aac <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a90:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a92:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a94:	f00e fc96 	bl	80133c4 <strcpy>
 8004a98:	e7f1      	b.n	8004a7e <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004a9a:	2214      	movs	r2, #20
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f00e fa5b 	bl	8012f58 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004aa2:	200e      	movs	r0, #14
 8004aa4:	e7ec      	b.n	8004a80 <AddSnippet.part.0+0x80>
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	20001150 	.word	0x20001150
 8004aac:	20006dd0 	.word	0x20006dd0

08004ab0 <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004ab0:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004ab2:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004ab4:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	d00d      	beq.n	8004ad6 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004aba:	2603      	movs	r6, #3
 8004abc:	f00d ffe8 	bl	8012a90 <__locale_ctype_ptr>
 8004ac0:	1900      	adds	r0, r0, r4
 8004ac2:	7842      	ldrb	r2, [r0, #1]
 8004ac4:	4032      	ands	r2, r6
 8004ac6:	2a01      	cmp	r2, #1
 8004ac8:	d100      	bne.n	8004acc <StringToLowerCase+0x1c>
 8004aca:	3420      	adds	r4, #32
 8004acc:	702c      	strb	r4, [r5, #0]
 8004ace:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004ad0:	782c      	ldrb	r4, [r5, #0]
 8004ad2:	2c00      	cmp	r4, #0
 8004ad4:	d1f2      	bne.n	8004abc <StringToLowerCase+0xc>
}
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}

08004ad8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	4657      	mov	r7, sl
 8004adc:	464e      	mov	r6, r9
 8004ade:	46de      	mov	lr, fp
 8004ae0:	4645      	mov	r5, r8
 8004ae2:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004ae4:	4ed8      	ldr	r6, [pc, #864]	; (8004e48 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004ae6:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004ae8:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004aea:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004aec:	2c05      	cmp	r4, #5
 8004aee:	d067      	beq.n	8004bc0 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004af0:	00a3      	lsls	r3, r4, #2
 8004af2:	4dd6      	ldr	r5, [pc, #856]	; (8004e4c <ParseSnippetCondition+0x374>)
 8004af4:	1918      	adds	r0, r3, r4
 8004af6:	0080      	lsls	r0, r0, #2
 8004af8:	469a      	mov	sl, r3
 8004afa:	182b      	adds	r3, r5, r0
 8004afc:	4699      	mov	r9, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b02:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b04:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b06:	1828      	adds	r0, r5, r0
 8004b08:	2204      	movs	r2, #4
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	f00e fa24 	bl	8012f58 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b10:	783b      	ldrb	r3, [r7, #0]
 8004b12:	2b62      	cmp	r3, #98	; 0x62
 8004b14:	d102      	bne.n	8004b1c <ParseSnippetCondition+0x44>
 8004b16:	78bb      	ldrb	r3, [r7, #2]
 8004b18:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1a:	d057      	beq.n	8004bcc <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b1c:	1d33      	adds	r3, r6, #4
 8004b1e:	4698      	mov	r8, r3
 8004b20:	0018      	movs	r0, r3
 8004b22:	0039      	movs	r1, r7
 8004b24:	f00e fc4e 	bl	80133c4 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b28:	4cc9      	ldr	r4, [pc, #804]	; (8004e50 <ParseSnippetCondition+0x378>)
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	0021      	movs	r1, r4
 8004b2e:	f00f fac9 	bl	80140c4 <strtok>
		secondPart =strtok( NULL," ");
 8004b32:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b34:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b36:	2000      	movs	r0, #0
 8004b38:	f00f fac4 	bl	80140c4 <strtok>
		thirdPart =strtok( NULL," ");
 8004b3c:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b3e:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b40:	2000      	movs	r0, #0
 8004b42:	f00f fabf 	bl	80140c4 <strtok>
 8004b46:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	d02f      	beq.n	8004bac <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b4c:	0038      	movs	r0, r7
 8004b4e:	f7fe fddf 	bl	8003710 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b52:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b54:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b56:	d036      	beq.n	8004bc6 <ParseSnippetCondition+0xee>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d024      	beq.n	8004ba6 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	d025      	beq.n	8004bac <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b60:	0020      	movs	r0, r4
 8004b62:	f7fe fdd5 	bl	8003710 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d06b      	beq.n	8004c42 <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	7833      	ldrb	r3, [r6, #0]
 8004b6e:	009c      	lsls	r4, r3, #2
 8004b70:	4699      	mov	r9, r3
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b78:	18eb      	adds	r3, r5, r3
 8004b7a:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b7c:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f7fe fdd2 	bl	8003728 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b84:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b86:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b88:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b8a:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b8c:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b8e:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b90:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b92:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b94:	18ed      	adds	r5, r5, r3
 8004b96:	786b      	ldrb	r3, [r5, #1]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004b9c:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b9e:	3201      	adds	r2, #1
 8004ba0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	e004      	b.n	8004bb0 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ba6:	2c00      	cmp	r4, #0
 8004ba8:	d100      	bne.n	8004bac <ParseSnippetCondition+0xd4>
 8004baa:	e07f      	b.n	8004cac <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bac:	2367      	movs	r3, #103	; 0x67
 8004bae:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	b00b      	add	sp, #44	; 0x2c
 8004bb4:	bc3c      	pop	{r2, r3, r4, r5}
 8004bb6:	4690      	mov	r8, r2
 8004bb8:	4699      	mov	r9, r3
 8004bba:	46a2      	mov	sl, r4
 8004bbc:	46ab      	mov	fp, r5
 8004bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004bc0:	230e      	movs	r3, #14
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	e7f4      	b.n	8004bb0 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1c8      	bne.n	8004b5c <ParseSnippetCondition+0x84>
 8004bca:	e7ef      	b.n	8004bac <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bcc:	787b      	ldrb	r3, [r7, #1]
 8004bce:	3b30      	subs	r3, #48	; 0x30
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bd8:	465b      	mov	r3, fp
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d8e8      	bhi.n	8004bb0 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bde:	4649      	mov	r1, r9
 8004be0:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004be2:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004be4:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004be6:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004be8:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bea:	2207      	movs	r2, #7
 8004bec:	4999      	ldr	r1, [pc, #612]	; (8004e54 <ParseSnippetCondition+0x37c>)
 8004bee:	0018      	movs	r0, r3
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	f00e fbef 	bl	80133d4 <strncmp>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d03d      	beq.n	8004c76 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004bfa:	220e      	movs	r2, #14
 8004bfc:	4996      	ldr	r1, [pc, #600]	; (8004e58 <ParseSnippetCondition+0x380>)
 8004bfe:	9807      	ldr	r0, [sp, #28]
 8004c00:	f00e fbe8 	bl	80133d4 <strncmp>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d15e      	bne.n	8004cc6 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c08:	2306      	movs	r3, #6
 8004c0a:	464a      	mov	r2, r9
 8004c0c:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c0e:	465b      	mov	r3, fp
 8004c10:	00da      	lsls	r2, r3, #3
 8004c12:	4b92      	ldr	r3, [pc, #584]	; (8004e5c <ParseSnippetCondition+0x384>)
 8004c14:	445a      	add	r2, fp
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	7a1b      	ldrb	r3, [r3, #8]
 8004c1a:	079b      	lsls	r3, r3, #30
 8004c1c:	d40e      	bmi.n	8004c3c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9305      	str	r3, [sp, #20]
 8004c22:	4643      	mov	r3, r8
 8004c24:	2201      	movs	r2, #1
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	9303      	str	r3, [sp, #12]
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2100      	movs	r1, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	4658      	mov	r0, fp
 8004c36:	f003 fccf 	bl	80085d8 <SetButtonEvents>
 8004c3a:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	7034      	strb	r4, [r6, #0]
 8004c40:	e7b6      	b.n	8004bb0 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c42:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c44:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c46:	0093      	lsls	r3, r2, #2
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c50:	18eb      	adds	r3, r5, r3
 8004c52:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c54:	f00d feac 	bl	80129b0 <atof>
 8004c58:	f7fd ffb6 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c5c:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c5e:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c60:	009c      	lsls	r4, r3, #2
 8004c62:	18e0      	adds	r0, r4, r3
 8004c64:	0080      	lsls	r0, r0, #2
 8004c66:	3006      	adds	r0, #6
 8004c68:	1828      	adds	r0, r5, r0
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	a909      	add	r1, sp, #36	; 0x24
 8004c6e:	4699      	mov	r9, r3
 8004c70:	f00e f969 	bl	8012f46 <memcpy>
 8004c74:	e783      	b.n	8004b7e <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c76:	2305      	movs	r3, #5
 8004c78:	4649      	mov	r1, r9
 8004c7a:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <ParseSnippetCondition+0x384>)
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	445a      	add	r2, fp
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	2201      	movs	r2, #1
 8004c88:	7a1b      	ldrb	r3, [r3, #8]
 8004c8a:	421a      	tst	r2, r3
 8004c8c:	d1d6      	bne.n	8004c3c <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c8e:	2301      	movs	r3, #1
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	4643      	mov	r3, r8
 8004c94:	2200      	movs	r2, #0
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4658      	mov	r0, fp
 8004ca4:	f003 fc98 	bl	80085d8 <SetButtonEvents>
 8004ca8:	7834      	ldrb	r4, [r6, #0]
 8004caa:	e7c7      	b.n	8004c3c <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004cac:	2102      	movs	r1, #2
 8004cae:	7832      	ldrb	r2, [r6, #0]
 8004cb0:	0093      	lsls	r3, r2, #2
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cb8:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cba:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cbc:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cbe:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cc0:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004cc2:	4698      	mov	r8, r3
 8004cc4:	e774      	b.n	8004bb0 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004cc6:	220c      	movs	r2, #12
 8004cc8:	4965      	ldr	r1, [pc, #404]	; (8004e60 <ParseSnippetCondition+0x388>)
 8004cca:	9807      	ldr	r0, [sp, #28]
 8004ccc:	f00e fb82 	bl	80133d4 <strncmp>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d131      	bne.n	8004d38 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004cd4:	465b      	mov	r3, fp
 8004cd6:	00da      	lsls	r2, r3, #3
 8004cd8:	4b60      	ldr	r3, [pc, #384]	; (8004e5c <ParseSnippetCondition+0x384>)
 8004cda:	445a      	add	r2, fp
 8004cdc:	189b      	adds	r3, r3, r2
 8004cde:	789a      	ldrb	r2, [r3, #2]
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d063      	beq.n	8004dac <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004ce4:	78da      	ldrb	r2, [r3, #3]
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d07d      	beq.n	8004de6 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cea:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004cec:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cee:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1a3      	bne.n	8004c3c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cf4:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cf6:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cf8:	4453      	add	r3, sl
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	18eb      	adds	r3, r5, r3
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d02:	300f      	adds	r0, #15
 8004d04:	f00d fe59 	bl	80129ba <atoi>
 8004d08:	7832      	ldrb	r2, [r6, #0]
 8004d0a:	b2c0      	uxtb	r0, r0
 8004d0c:	0093      	lsls	r3, r2, #2
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d14:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d16:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	9303      	str	r3, [sp, #12]
 8004d24:	9302      	str	r3, [sp, #8]
 8004d26:	9001      	str	r0, [sp, #4]
 8004d28:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d2a:	4658      	mov	r0, fp
 8004d2c:	f003 fc54 	bl	80085d8 <SetButtonEvents>
					status =BOS_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	7834      	ldrb	r4, [r6, #0]
 8004d34:	4698      	mov	r8, r3
 8004d36:	e781      	b.n	8004c3c <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d38:	220d      	movs	r2, #13
 8004d3a:	494a      	ldr	r1, [pc, #296]	; (8004e64 <ParseSnippetCondition+0x38c>)
 8004d3c:	9807      	ldr	r0, [sp, #28]
 8004d3e:	f00e fb49 	bl	80133d4 <strncmp>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d000      	beq.n	8004d48 <ParseSnippetCondition+0x270>
 8004d46:	e779      	b.n	8004c3c <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d48:	465b      	mov	r3, fp
 8004d4a:	4a44      	ldr	r2, [pc, #272]	; (8004e5c <ParseSnippetCondition+0x384>)
 8004d4c:	00d9      	lsls	r1, r3, #3
 8004d4e:	18cb      	adds	r3, r1, r3
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	7958      	ldrb	r0, [r3, #5]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d05e      	beq.n	8004e16 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d58:	799b      	ldrb	r3, [r3, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d100      	bne.n	8004d60 <ParseSnippetCondition+0x288>
 8004d5e:	e083      	b.n	8004e68 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d60:	4459      	add	r1, fp
 8004d62:	1852      	adds	r2, r2, r1
 8004d64:	79d3      	ldrb	r3, [r2, #7]
 8004d66:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d68:	230d      	movs	r3, #13
 8004d6a:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d000      	beq.n	8004d74 <ParseSnippetCondition+0x29c>
 8004d72:	e763      	b.n	8004c3c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d74:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d76:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d78:	4698      	mov	r8, r3
 8004d7a:	435c      	muls	r4, r3
 8004d7c:	3b06      	subs	r3, #6
 8004d7e:	192c      	adds	r4, r5, r4
 8004d80:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d82:	3010      	adds	r0, #16
 8004d84:	f00d fe19 	bl	80129ba <atoi>
 8004d88:	4642      	mov	r2, r8
 8004d8a:	7833      	ldrb	r3, [r6, #0]
 8004d8c:	b2c0      	uxtb	r0, r0
 8004d8e:	4353      	muls	r3, r2
 8004d90:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d92:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d94:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	464b      	mov	r3, r9
 8004d9a:	9303      	str	r3, [sp, #12]
 8004d9c:	9302      	str	r3, [sp, #8]
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9004      	str	r0, [sp, #16]
 8004da6:	001a      	movs	r2, r3
 8004da8:	0019      	movs	r1, r3
 8004daa:	e7be      	b.n	8004d2a <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dac:	2309      	movs	r3, #9
 8004dae:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004db0:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004db2:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004db4:	300f      	adds	r0, #15
 8004db6:	f00d fe00 	bl	80129ba <atoi>
 8004dba:	7831      	ldrb	r1, [r6, #0]
 8004dbc:	b2c3      	uxtb	r3, r0
 8004dbe:	008a      	lsls	r2, r1, #2
 8004dc0:	1852      	adds	r2, r2, r1
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dc6:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dc8:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dca:	9205      	str	r2, [sp, #20]
 8004dcc:	4642      	mov	r2, r8
 8004dce:	9204      	str	r2, [sp, #16]
 8004dd0:	9203      	str	r2, [sp, #12]
 8004dd2:	9202      	str	r2, [sp, #8]
 8004dd4:	9201      	str	r2, [sp, #4]
 8004dd6:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4658      	mov	r0, fp
 8004dde:	f003 fbfb 	bl	80085d8 <SetButtonEvents>
 8004de2:	7834      	ldrb	r4, [r6, #0]
 8004de4:	e72a      	b.n	8004c3c <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004de6:	230a      	movs	r3, #10
 8004de8:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dea:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004dec:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dee:	300f      	adds	r0, #15
 8004df0:	f00d fde3 	bl	80129ba <atoi>
 8004df4:	7832      	ldrb	r2, [r6, #0]
 8004df6:	b2c0      	uxtb	r0, r0
 8004df8:	0093      	lsls	r3, r2, #2
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e00:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e02:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e04:	9305      	str	r3, [sp, #20]
 8004e06:	4643      	mov	r3, r8
 8004e08:	9000      	str	r0, [sp, #0]
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	9303      	str	r3, [sp, #12]
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e12:	2300      	movs	r3, #0
 8004e14:	e7e0      	b.n	8004dd8 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e16:	230c      	movs	r3, #12
 8004e18:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e1a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e1c:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e1e:	3010      	adds	r0, #16
 8004e20:	f00d fdcb 	bl	80129ba <atoi>
 8004e24:	7832      	ldrb	r2, [r6, #0]
 8004e26:	b2c0      	uxtb	r0, r0
 8004e28:	0093      	lsls	r3, r2, #2
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e30:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e32:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e34:	9305      	str	r3, [sp, #20]
 8004e36:	4643      	mov	r3, r8
 8004e38:	9002      	str	r0, [sp, #8]
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	e7c8      	b.n	8004dd8 <ParseSnippetCondition+0x300>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	20001150 	.word	0x20001150
 8004e4c:	20006dd0 	.word	0x20006dd0
 8004e50:	08018038 	.word	0x08018038
 8004e54:	08018bb4 	.word	0x08018bb4
 8004e58:	08018388 	.word	0x08018388
 8004e5c:	2000181c 	.word	0x2000181c
 8004e60:	08018398 	.word	0x08018398
 8004e64:	080183a8 	.word	0x080183a8
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e68:	0023      	movs	r3, r4
 8004e6a:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e6c:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e6e:	4453      	add	r3, sl
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	18eb      	adds	r3, r5, r3
 8004e74:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e76:	3010      	adds	r0, #16
 8004e78:	f00d fd9f 	bl	80129ba <atoi>
 8004e7c:	7832      	ldrb	r2, [r6, #0]
 8004e7e:	b2c0      	uxtb	r0, r0
 8004e80:	0093      	lsls	r3, r2, #2
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e88:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e8a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9003      	str	r0, [sp, #12]
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	e744      	b.n	8004d2a <ParseSnippetCondition+0x252>

08004ea0 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	46de      	mov	lr, fp
 8004ea4:	4657      	mov	r7, sl
 8004ea6:	4645      	mov	r5, r8
 8004ea8:	464e      	mov	r6, r9
 8004eaa:	468a      	mov	sl, r1
 8004eac:	b5e0      	push	{r5, r6, r7, lr}
 8004eae:	b08b      	sub	sp, #44	; 0x2c
 8004eb0:	9002      	str	r0, [sp, #8]
 8004eb2:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	2209      	movs	r2, #9
 8004eb8:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004eba:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004ebc:	f00e f84c 	bl	8012f58 <memset>
 8004ec0:	4bcd      	ldr	r3, [pc, #820]	; (80051f8 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004ec2:	4656      	mov	r6, sl
 8004ec4:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ec6:	4bcd      	ldr	r3, [pc, #820]	; (80051fc <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ec8:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004eca:	469b      	mov	fp, r3
 8004ecc:	e02d      	b.n	8004f2a <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004ece:	2206      	movs	r2, #6
 8004ed0:	49cb      	ldr	r1, [pc, #812]	; (8005200 <CLI_CommandParser+0x360>)
 8004ed2:	0028      	movs	r0, r5
 8004ed4:	f00e fa7e 	bl	80133d4 <strncmp>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d057      	beq.n	8004f8c <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004edc:	2f02      	cmp	r7, #2
 8004ede:	d100      	bne.n	8004ee2 <CLI_CommandParser+0x42>
 8004ee0:	e0d2      	b.n	8005088 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004ee2:	212e      	movs	r1, #46	; 0x2e
 8004ee4:	0028      	movs	r0, r5
 8004ee6:	f00e fa5f 	bl	80133a8 <strchr>
 8004eea:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004eec:	d007      	beq.n	8004efe <CLI_CommandParser+0x5e>
 8004eee:	3803      	subs	r0, #3
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f00e fa6e 	bl	80133d4 <strncmp>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d000      	beq.n	8004efe <CLI_CommandParser+0x5e>
 8004efc:	e079      	b.n	8004ff2 <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004efe:	2299      	movs	r2, #153	; 0x99
 8004f00:	0021      	movs	r1, r4
 8004f02:	0092      	lsls	r2, r2, #2
 8004f04:	0028      	movs	r0, r5
 8004f06:	f008 fd03 	bl	800d910 <FreeRTOS_CLIProcessCommand>
 8004f0a:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f0c:	7823      	ldrb	r3, [r4, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d139      	bne.n	8004f86 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f12:	0020      	movs	r0, r4
 8004f14:	f7fb f900 	bl	8000118 <strlen>
 8004f18:	2100      	movs	r1, #0
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	0020      	movs	r0, r4
 8004f1e:	f00e f81b 	bl	8012f58 <memset>
	} while(xReturned != pdFALSE);
 8004f22:	4653      	mov	r3, sl
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d100      	bne.n	8004f2a <CLI_CommandParser+0x8a>
 8004f28:	e1d0      	b.n	80052cc <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f2a:	0028      	movs	r0, r5
 8004f2c:	f7ff fdc0 	bl	8004ab0 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f30:	2336      	movs	r3, #54	; 0x36
 8004f32:	4699      	mov	r9, r3
 8004f34:	4643      	mov	r3, r8
 8004f36:	464a      	mov	r2, r9
 8004f38:	5c9f      	ldrb	r7, [r3, r2]
 8004f3a:	2f00      	cmp	r7, #0
 8004f3c:	d1c7      	bne.n	8004ece <CLI_CommandParser+0x2e>
 8004f3e:	3a33      	subs	r2, #51	; 0x33
 8004f40:	49b0      	ldr	r1, [pc, #704]	; (8005204 <CLI_CommandParser+0x364>)
 8004f42:	0028      	movs	r0, r5
 8004f44:	f00e fa46 	bl	80133d4 <strncmp>
 8004f48:	1e07      	subs	r7, r0, #0
 8004f4a:	d1ca      	bne.n	8004ee2 <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f4c:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f4e:	f7ff fdc3 	bl	8004ad8 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d000      	beq.n	8004f58 <CLI_CommandParser+0xb8>
 8004f56:	e09f      	b.n	8005098 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f60:	330b      	adds	r3, #11
 8004f62:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	d027      	beq.n	8004fb8 <CLI_CommandParser+0x118>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f6c:	0020      	movs	r0, r4
 8004f6e:	f7fb f8d3 	bl	8000118 <strlen>
 8004f72:	2301      	movs	r3, #1
 8004f74:	425b      	negs	r3, r3
 8004f76:	b282      	uxth	r2, r0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	0021      	movs	r1, r4
 8004f7c:	3333      	adds	r3, #51	; 0x33
 8004f7e:	9802      	ldr	r0, [sp, #8]
 8004f80:	f008 fae6 	bl	800d550 <writePxMutex>
 8004f84:	e7c5      	b.n	8004f12 <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	d0c3      	beq.n	8004f12 <CLI_CommandParser+0x72>
 8004f8a:	e7ef      	b.n	8004f6c <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	464a      	mov	r2, r9
 8004f90:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	3a01      	subs	r2, #1
 8004f96:	0093      	lsls	r3, r2, #2
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	4a9b      	ldr	r2, [pc, #620]	; (8005208 <CLI_CommandParser+0x368>)
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	18d3      	adds	r3, r2, r3
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fa4:	f006 faa6 	bl	800b4f4 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fa8:	2241      	movs	r2, #65	; 0x41
 8004faa:	4998      	ldr	r1, [pc, #608]	; (800520c <CLI_CommandParser+0x36c>)
 8004fac:	0020      	movs	r0, r4
 8004fae:	f00d ffca 	bl	8012f46 <memcpy>
 8004fb2:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1d5      	bne.n	8004f64 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fb8:	0020      	movs	r0, r4
 8004fba:	f7fb f8ad 	bl	8000118 <strlen>
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	0020      	movs	r0, r4
 8004fc4:	46b2      	mov	sl, r6
 8004fc6:	f00d ffc7 	bl	8012f58 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fca:	2209      	movs	r2, #9
 8004fcc:	2100      	movs	r1, #0
 8004fce:	a807      	add	r0, sp, #28
 8004fd0:	f00d ffc2 	bl	8012f58 <memset>
	if(!recordSnippet && enableOutput)
 8004fd4:	2336      	movs	r3, #54	; 0x36
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	5cd3      	ldrb	r3, [r2, r3]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <CLI_CommandParser+0x144>
 8004fde:	4653      	mov	r3, sl
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d16a      	bne.n	80050ba <CLI_CommandParser+0x21a>
}
 8004fe4:	b00b      	add	sp, #44	; 0x2c
 8004fe6:	bc3c      	pop	{r2, r3, r4, r5}
 8004fe8:	4690      	mov	r8, r2
 8004fea:	4699      	mov	r9, r3
 8004fec:	46a2      	mov	sl, r4
 8004fee:	46ab      	mov	fp, r5
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ff2:	f00d fd4d 	bl	8012a90 <__locale_ctype_ptr>
 8004ff6:	787b      	ldrb	r3, [r7, #1]
 8004ff8:	18c0      	adds	r0, r0, r3
 8004ffa:	7843      	ldrb	r3, [r0, #1]
 8004ffc:	075b      	lsls	r3, r3, #29
 8004ffe:	d500      	bpl.n	8005002 <CLI_CommandParser+0x162>
 8005000:	e77d      	b.n	8004efe <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005002:	1b7a      	subs	r2, r7, r5
 8005004:	0029      	movs	r1, r5
 8005006:	a807      	add	r0, sp, #28
 8005008:	f00e f9f5 	bl	80133f6 <strncpy>
				id =GetID(idString);
 800500c:	a807      	add	r0, sp, #28
 800500e:	f7ff f8e7 	bl	80041e0 <GetID>
				if(id == myID){
 8005012:	4b7f      	ldr	r3, [pc, #508]	; (8005210 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005014:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	4298      	cmp	r0, r3
 800501c:	d057      	beq.n	80050ce <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	2b64      	cmp	r3, #100	; 0x64
 8005022:	d100      	bne.n	8005026 <CLI_CommandParser+0x186>
 8005024:	e0da      	b.n	80051dc <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	2b66      	cmp	r3, #102	; 0x66
 800502a:	d100      	bne.n	800502e <CLI_CommandParser+0x18e>
 800502c:	e0dd      	b.n	80051ea <CLI_CommandParser+0x34a>
 800502e:	1c7b      	adds	r3, r7, #1
 8005030:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	2bff      	cmp	r3, #255	; 0xff
 8005036:	d100      	bne.n	800503a <CLI_CommandParser+0x19a>
 8005038:	e08b      	b.n	8005152 <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 800503a:	466b      	mov	r3, sp
 800503c:	7b1b      	ldrb	r3, [r3, #12]
 800503e:	4699      	mov	r9, r3
 8005040:	2bfe      	cmp	r3, #254	; 0xfe
 8005042:	d100      	bne.n	8005046 <CLI_CommandParser+0x1a6>
 8005044:	e102      	b.n	800524c <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005046:	2206      	movs	r2, #6
 8005048:	4972      	ldr	r1, [pc, #456]	; (8005214 <CLI_CommandParser+0x374>)
 800504a:	9804      	ldr	r0, [sp, #16]
 800504c:	f00e f9c2 	bl	80133d4 <strncmp>
 8005050:	2800      	cmp	r0, #0
 8005052:	d144      	bne.n	80050de <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005054:	4b70      	ldr	r3, [pc, #448]	; (8005218 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005056:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005058:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 800505a:	2119      	movs	r1, #25
 800505c:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800505e:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8005060:	f004 fcca 	bl	80099f8 <SendMessageToModule>
						osDelay(100);
 8005064:	2064      	movs	r0, #100	; 0x64
 8005066:	f008 fbbf 	bl	800d7e8 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800506a:	4b6c      	ldr	r3, [pc, #432]	; (800521c <CLI_CommandParser+0x37c>)
 800506c:	4649      	mov	r1, r9
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <CLI_CommandParser+0x370>)
 8005072:	7818      	ldrb	r0, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	f7fe fd63 	bl	8003b40 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800507a:	4653      	mov	r3, sl
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d100      	bne.n	8005084 <CLI_CommandParser+0x1e4>
 8005082:	e095      	b.n	80051b0 <CLI_CommandParser+0x310>
 8005084:	7823      	ldrb	r3, [r4, #0]
 8005086:	e795      	b.n	8004fb4 <CLI_CommandParser+0x114>
 8005088:	0028      	movs	r0, r5
 800508a:	f7ff fcb9 	bl	8004a00 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 800508e:	2800      	cmp	r0, #0
 8005090:	d10c      	bne.n	80050ac <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8005092:	230d      	movs	r3, #13
 8005094:	7023      	strb	r3, [r4, #0]
 8005096:	e765      	b.n	8004f64 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005098:	2252      	movs	r2, #82	; 0x52
 800509a:	4961      	ldr	r1, [pc, #388]	; (8005220 <CLI_CommandParser+0x380>)
 800509c:	0020      	movs	r0, r4
 800509e:	f00d ff52 	bl	8012f46 <memcpy>
				recordSnippet =0;
 80050a2:	4643      	mov	r3, r8
 80050a4:	464a      	mov	r2, r9
 80050a6:	549f      	strb	r7, [r3, r2]
 80050a8:	7823      	ldrb	r3, [r4, #0]
 80050aa:	e783      	b.n	8004fb4 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050ac:	2252      	movs	r2, #82	; 0x52
 80050ae:	495c      	ldr	r1, [pc, #368]	; (8005220 <CLI_CommandParser+0x380>)
 80050b0:	0020      	movs	r0, r4
 80050b2:	f00d ff48 	bl	8012f46 <memcpy>
 80050b6:	7823      	ldrb	r3, [r4, #0]
 80050b8:	e77c      	b.n	8004fb4 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050ba:	2301      	movs	r3, #1
 80050bc:	425b      	negs	r3, r3
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2238      	movs	r2, #56	; 0x38
 80050c2:	3333      	adds	r3, #51	; 0x33
 80050c4:	4957      	ldr	r1, [pc, #348]	; (8005224 <CLI_CommandParser+0x384>)
 80050c6:	9802      	ldr	r0, [sp, #8]
 80050c8:	f008 fa42 	bl	800d550 <writePxMutex>
}
 80050cc:	e78a      	b.n	8004fe4 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050ce:	2299      	movs	r2, #153	; 0x99
 80050d0:	1c78      	adds	r0, r7, #1
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	0021      	movs	r1, r4
 80050d6:	f008 fc1b 	bl	800d910 <FreeRTOS_CLIProcessCommand>
 80050da:	4682      	mov	sl, r0
 80050dc:	e716      	b.n	8004f0c <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050de:	0028      	movs	r0, r5
 80050e0:	f7fb f81a 	bl	8000118 <strlen>
 80050e4:	0007      	movs	r7, r0
 80050e6:	a807      	add	r0, sp, #28
 80050e8:	f7fb f816 	bl	8000118 <strlen>
 80050ec:	4682      	mov	sl, r0
 80050ee:	1e7a      	subs	r2, r7, #1
 80050f0:	1a12      	subs	r2, r2, r0
 80050f2:	9904      	ldr	r1, [sp, #16]
 80050f4:	484c      	ldr	r0, [pc, #304]	; (8005228 <CLI_CommandParser+0x388>)
 80050f6:	f00e f97e 	bl	80133f6 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80050fa:	0028      	movs	r0, r5
 80050fc:	f7fb f80c 	bl	8000118 <strlen>
 8005100:	4653      	mov	r3, sl
 8005102:	3801      	subs	r0, #1
 8005104:	1ac2      	subs	r2, r0, r3
 8005106:	b292      	uxth	r2, r2
 8005108:	2117      	movs	r1, #23
 800510a:	4648      	mov	r0, r9
 800510c:	f004 fc74 	bl	80099f8 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005110:	9a03      	ldr	r2, [sp, #12]
 8005112:	4946      	ldr	r1, [pc, #280]	; (800522c <CLI_CommandParser+0x38c>)
 8005114:	0020      	movs	r0, r4
 8005116:	f00e f919 	bl	801334c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800511a:	7823      	ldrb	r3, [r4, #0]
 800511c:	0020      	movs	r0, r4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00d      	beq.n	800513e <CLI_CommandParser+0x29e>
 8005122:	f7fa fff9 	bl	8000118 <strlen>
 8005126:	0002      	movs	r2, r0
 8005128:	2e00      	cmp	r6, #0
 800512a:	d00b      	beq.n	8005144 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800512c:	2301      	movs	r3, #1
 800512e:	b282      	uxth	r2, r0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	0021      	movs	r1, r4
 8005134:	3331      	adds	r3, #49	; 0x31
 8005136:	9802      	ldr	r0, [sp, #8]
 8005138:	f008 fa0a 	bl	800d550 <writePxMutex>
 800513c:	0020      	movs	r0, r4
 800513e:	f7fa ffeb 	bl	8000118 <strlen>
 8005142:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005144:	2100      	movs	r1, #0
 8005146:	0020      	movs	r0, r4
 8005148:	f00d ff06 	bl	8012f58 <memset>
 800514c:	4b32      	ldr	r3, [pc, #200]	; (8005218 <CLI_CommandParser+0x378>)
 800514e:	469a      	mov	sl, r3
 8005150:	e793      	b.n	800507a <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005152:	221a      	movs	r2, #26
 8005154:	2100      	movs	r1, #0
 8005156:	4836      	ldr	r0, [pc, #216]	; (8005230 <CLI_CommandParser+0x390>)
 8005158:	f00d fefe 	bl	8012f58 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800515c:	0028      	movs	r0, r5
 800515e:	f7fa ffdb 	bl	8000118 <strlen>
 8005162:	0007      	movs	r7, r0
 8005164:	a807      	add	r0, sp, #28
 8005166:	f7fa ffd7 	bl	8000118 <strlen>
 800516a:	4681      	mov	r9, r0
 800516c:	3f01      	subs	r7, #1
 800516e:	1a3a      	subs	r2, r7, r0
 8005170:	9f04      	ldr	r7, [sp, #16]
 8005172:	482d      	ldr	r0, [pc, #180]	; (8005228 <CLI_CommandParser+0x388>)
 8005174:	0039      	movs	r1, r7
 8005176:	f00e f93e 	bl	80133f6 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800517a:	0028      	movs	r0, r5
 800517c:	f7fa ffcc 	bl	8000118 <strlen>
 8005180:	464b      	mov	r3, r9
 8005182:	1ac3      	subs	r3, r0, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	2217      	movs	r2, #23
 8005188:	21ff      	movs	r1, #255	; 0xff
 800518a:	9805      	ldr	r0, [sp, #20]
 800518c:	f004 fbee 	bl	800996c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005190:	2299      	movs	r2, #153	; 0x99
 8005192:	0021      	movs	r1, r4
 8005194:	0092      	lsls	r2, r2, #2
 8005196:	0038      	movs	r0, r7
 8005198:	f008 fbba 	bl	800d910 <FreeRTOS_CLIProcessCommand>
 800519c:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 800519e:	0020      	movs	r0, r4
 80051a0:	f7fa ffba 	bl	8000118 <strlen>
 80051a4:	221d      	movs	r2, #29
 80051a6:	1820      	adds	r0, r4, r0
 80051a8:	4922      	ldr	r1, [pc, #136]	; (8005234 <CLI_CommandParser+0x394>)
 80051aa:	f00d fecc 	bl	8012f46 <memcpy>
 80051ae:	e6ad      	b.n	8004f0c <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051b0:	21fa      	movs	r1, #250	; 0xfa
 80051b2:	2001      	movs	r0, #1
 80051b4:	0089      	lsls	r1, r1, #2
 80051b6:	f009 fe89 	bl	800eecc <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051ba:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <CLI_CommandParser+0x398>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d100      	bne.n	80051c4 <CLI_CommandParser+0x324>
 80051c2:	e75f      	b.n	8005084 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051c4:	4a1d      	ldr	r2, [pc, #116]	; (800523c <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051c6:	491e      	ldr	r1, [pc, #120]	; (8005240 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051c8:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051ca:	0020      	movs	r0, r4
							++timedoutMsg;
 80051cc:	3301      	adds	r3, #1
 80051ce:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	0022      	movs	r2, r4
 80051d4:	f00e f8ba 	bl	801334c <sprintf>
 80051d8:	7823      	ldrb	r3, [r4, #0]
 80051da:	e6eb      	b.n	8004fb4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051dc:	2227      	movs	r2, #39	; 0x27
 80051de:	4919      	ldr	r1, [pc, #100]	; (8005244 <CLI_CommandParser+0x3a4>)
 80051e0:	0020      	movs	r0, r4
 80051e2:	f00d feb0 	bl	8012f46 <memcpy>
 80051e6:	7823      	ldrb	r3, [r4, #0]
 80051e8:	e6e4      	b.n	8004fb4 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80051ea:	2225      	movs	r2, #37	; 0x25
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <CLI_CommandParser+0x3a8>)
 80051ee:	0020      	movs	r0, r4
 80051f0:	f00d fea9 	bl	8012f46 <memcpy>
 80051f4:	7823      	ldrb	r3, [r4, #0]
 80051f6:	e6dd      	b.n	8004fb4 <CLI_CommandParser+0x114>
 80051f8:	20001150 	.word	0x20001150
 80051fc:	0801845c 	.word	0x0801845c
 8005200:	08018410 	.word	0x08018410
 8005204:	080183b8 	.word	0x080183b8
 8005208:	20006dd0 	.word	0x20006dd0
 800520c:	08018418 	.word	0x08018418
 8005210:	20000aa8 	.word	0x20000aa8
 8005214:	080184fc 	.word	0x080184fc
 8005218:	20006d34 	.word	0x20006d34
 800521c:	20000c38 	.word	0x20000c38
 8005220:	080183bc 	.word	0x080183bc
 8005224:	08018548 	.word	0x08018548
 8005228:	20000b4c 	.word	0x20000b4c
 800522c:	08018504 	.word	0x08018504
 8005230:	20000db8 	.word	0x20000db8
 8005234:	080184b0 	.word	0x080184b0
 8005238:	20000c4c 	.word	0x20000c4c
 800523c:	20001aba 	.word	0x20001aba
 8005240:	08018528 	.word	0x08018528
 8005244:	08018460 	.word	0x08018460
 8005248:	08018488 	.word	0x08018488
					group =id >> 8;
 800524c:	4640      	mov	r0, r8
 800524e:	2237      	movs	r2, #55	; 0x37
 8005250:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005252:	2100      	movs	r1, #0
					group =id >> 8;
 8005254:	121f      	asrs	r7, r3, #8
 8005256:	b2fb      	uxtb	r3, r7
 8005258:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800525a:	3a1d      	subs	r2, #29
 800525c:	481c      	ldr	r0, [pc, #112]	; (80052d0 <CLI_CommandParser+0x430>)
					group =id >> 8;
 800525e:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005260:	f00d fe7a 	bl	8012f58 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005264:	0028      	movs	r0, r5
 8005266:	f7fa ff57 	bl	8000118 <strlen>
 800526a:	0007      	movs	r7, r0
 800526c:	a807      	add	r0, sp, #28
 800526e:	f7fa ff53 	bl	8000118 <strlen>
 8005272:	4681      	mov	r9, r0
 8005274:	3f01      	subs	r7, #1
 8005276:	1a3a      	subs	r2, r7, r0
 8005278:	9904      	ldr	r1, [sp, #16]
 800527a:	4816      	ldr	r0, [pc, #88]	; (80052d4 <CLI_CommandParser+0x434>)
 800527c:	f00e f8bb 	bl	80133f6 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005280:	0028      	movs	r0, r5
 8005282:	f7fa ff49 	bl	8000118 <strlen>
 8005286:	464f      	mov	r7, r9
 8005288:	1bc3      	subs	r3, r0, r7
 800528a:	b29b      	uxth	r3, r3
 800528c:	2217      	movs	r2, #23
 800528e:	9903      	ldr	r1, [sp, #12]
 8005290:	9805      	ldr	r0, [sp, #20]
 8005292:	f004 fb6b 	bl	800996c <BroadcastMessage>
					if(InGroup(myID,group))
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <CLI_CommandParser+0x438>)
 8005298:	4a10      	ldr	r2, [pc, #64]	; (80052dc <CLI_CommandParser+0x43c>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4641      	mov	r1, r8
 800529e:	3b01      	subs	r3, #1
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	5a9b      	ldrh	r3, [r3, r2]
 80052a4:	2237      	movs	r2, #55	; 0x37
 80052a6:	5c8a      	ldrb	r2, [r1, r2]
 80052a8:	4113      	asrs	r3, r2
 80052aa:	07db      	lsls	r3, r3, #31
 80052ac:	d406      	bmi.n	80052bc <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052ae:	ab07      	add	r3, sp, #28
 80052b0:	0022      	movs	r2, r4
 80052b2:	490b      	ldr	r1, [pc, #44]	; (80052e0 <CLI_CommandParser+0x440>)
 80052b4:	0020      	movs	r0, r4
 80052b6:	f00e f849 	bl	801334c <sprintf>
 80052ba:	e627      	b.n	8004f0c <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052bc:	2299      	movs	r2, #153	; 0x99
 80052be:	0021      	movs	r1, r4
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	9804      	ldr	r0, [sp, #16]
 80052c4:	f008 fb24 	bl	800d910 <FreeRTOS_CLIProcessCommand>
 80052c8:	4682      	mov	sl, r0
 80052ca:	e7f0      	b.n	80052ae <CLI_CommandParser+0x40e>
 80052cc:	46b2      	mov	sl, r6
 80052ce:	e67c      	b.n	8004fca <CLI_CommandParser+0x12a>
 80052d0:	20000db8 	.word	0x20000db8
 80052d4:	20000b4c 	.word	0x20000b4c
 80052d8:	20000aa8 	.word	0x20000aa8
 80052dc:	20000aac 	.word	0x20000aac
 80052e0:	080184d0 	.word	0x080184d0

080052e4 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	46de      	mov	lr, fp
 80052e8:	4657      	mov	r7, sl
 80052ea:	464e      	mov	r6, r9
 80052ec:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052ee:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80052f0:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 80052f2:	b5e0      	push	{r5, r6, r7, lr}
 80052f4:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80052f6:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052f8:	4249      	negs	r1, r1
 80052fa:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 80052fc:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052fe:	f009 fde5 	bl	800eecc <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005302:	f008 fb7d 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005306:	23e1      	movs	r3, #225	; 0xe1
 8005308:	4a62      	ldr	r2, [pc, #392]	; (8005494 <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800530a:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800530c:	6892      	ldr	r2, [r2, #8]
 800530e:	031b      	lsls	r3, r3, #12
 8005310:	429a      	cmp	r2, r3
 8005312:	d011      	beq.n	8005338 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005314:	2501      	movs	r5, #1
 8005316:	4b60      	ldr	r3, [pc, #384]	; (8005498 <prvCLITask+0x1b4>)
 8005318:	7819      	ldrb	r1, [r3, #0]
 800531a:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 800531c:	428d      	cmp	r5, r1
 800531e:	d006      	beq.n	800532e <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005320:	21e1      	movs	r1, #225	; 0xe1
 8005322:	0028      	movs	r0, r5
 8005324:	0309      	lsls	r1, r1, #12
 8005326:	f008 f989 	bl	800d63c <UpdateBaudrate>
 800532a:	9b02      	ldr	r3, [sp, #8]
 800532c:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800532e:	3501      	adds	r5, #1
 8005330:	b2ed      	uxtb	r5, r5
 8005332:	2d06      	cmp	r5, #6
 8005334:	d1f2      	bne.n	800531c <prvCLITask+0x38>
 8005336:	e002      	b.n	800533e <prvCLITask+0x5a>
 8005338:	4b57      	ldr	r3, [pc, #348]	; (8005498 <prvCLITask+0x1b4>)
 800533a:	7819      	ldrb	r1, [r3, #0]
 800533c:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800533e:	4b57      	ldr	r3, [pc, #348]	; (800549c <prvCLITask+0x1b8>)
 8005340:	4d57      	ldr	r5, [pc, #348]	; (80054a0 <prvCLITask+0x1bc>)
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	3538      	adds	r5, #56	; 0x38
 8005346:	0053      	lsls	r3, r2, #1
 8005348:	189b      	adds	r3, r3, r2
 800534a:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <prvCLITask+0x1c0>)
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	189b      	adds	r3, r3, r2
 8005350:	4a55      	ldr	r2, [pc, #340]	; (80054a8 <prvCLITask+0x1c4>)
 8005352:	0028      	movs	r0, r5
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	9100      	str	r1, [sp, #0]
 8005358:	4954      	ldr	r1, [pc, #336]	; (80054ac <prvCLITask+0x1c8>)
 800535a:	f00d fff7 	bl	801334c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800535e:	22a4      	movs	r2, #164	; 0xa4
 8005360:	9c02      	ldr	r4, [sp, #8]
 8005362:	230a      	movs	r3, #10
 8005364:	0092      	lsls	r2, r2, #2
 8005366:	4952      	ldr	r1, [pc, #328]	; (80054b0 <prvCLITask+0x1cc>)
 8005368:	7820      	ldrb	r0, [r4, #0]
 800536a:	f008 f923 	bl	800d5b4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800536e:	0028      	movs	r0, r5
 8005370:	f7fa fed2 	bl	8000118 <strlen>
 8005374:	230a      	movs	r3, #10
 8005376:	b282      	uxth	r2, r0
 8005378:	0029      	movs	r1, r5
 800537a:	7820      	ldrb	r0, [r4, #0]
 800537c:	f008 f91a 	bl	800d5b4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005380:	2300      	movs	r3, #0
 8005382:	4a4c      	ldr	r2, [pc, #304]	; (80054b4 <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 8005384:	2600      	movs	r6, #0
 8005386:	4690      	mov	r8, r2
 8005388:	4699      	mov	r9, r3
 800538a:	4d4b      	ldr	r5, [pc, #300]	; (80054b8 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800538c:	9b02      	ldr	r3, [sp, #8]
 800538e:	781f      	ldrb	r7, [r3, #0]
 8005390:	1e7c      	subs	r4, r7, #1
 8005392:	5d28      	ldrb	r0, [r5, r4]
 8005394:	b283      	uxth	r3, r0
 8005396:	2bbf      	cmp	r3, #191	; 0xbf
 8005398:	d81d      	bhi.n	80053d6 <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 800539a:	0062      	lsls	r2, r4, #1
 800539c:	1911      	adds	r1, r2, r4
 800539e:	0189      	lsls	r1, r1, #6
 80053a0:	4441      	add	r1, r8
 80053a2:	4692      	mov	sl, r2
 80053a4:	5c0a      	ldrb	r2, [r1, r0]
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d10d      	bne.n	80053c6 <prvCLITask+0xe2>
 80053aa:	1c4a      	adds	r2, r1, #1
 80053ac:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 80053ae:	2bbf      	cmp	r3, #191	; 0xbf
 80053b0:	d135      	bne.n	800541e <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053b2:	465b      	mov	r3, fp
 80053b4:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80053b6:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	d160      	bne.n	800547e <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053bc:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 80053be:	5cca      	ldrb	r2, [r1, r3]
 80053c0:	0018      	movs	r0, r3
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	d0f3      	beq.n	80053ae <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80053c6:	a902      	add	r1, sp, #8
 80053c8:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 80053ca:	4652      	mov	r2, sl
 80053cc:	1912      	adds	r2, r2, r4
 80053ce:	0192      	lsls	r2, r2, #6
 80053d0:	4442      	add	r2, r8
 80053d2:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 80053d4:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80053d6:	a802      	add	r0, sp, #8
 80053d8:	4684      	mov	ip, r0
 80053da:	210f      	movs	r1, #15
 80053dc:	230a      	movs	r3, #10
 80053de:	2201      	movs	r2, #1
 80053e0:	4461      	add	r1, ip
 80053e2:	0038      	movs	r0, r7
 80053e4:	f008 f8e6 	bl	800d5b4 <writePxITMutex>
		if(cRxedChar == '\r'){
 80053e8:	ab02      	add	r3, sp, #8
 80053ea:	7bdb      	ldrb	r3, [r3, #15]
 80053ec:	2b0d      	cmp	r3, #13
 80053ee:	d026      	beq.n	800543e <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 80053f0:	2b0a      	cmp	r3, #10
 80053f2:	d011      	beq.n	8005418 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d015      	beq.n	8005424 <prvCLITask+0x140>
 80053f8:	2b7f      	cmp	r3, #127	; 0x7f
 80053fa:	d013      	beq.n	8005424 <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80053fc:	001a      	movs	r2, r3
 80053fe:	3a20      	subs	r2, #32
 8005400:	2a5e      	cmp	r2, #94	; 0x5e
 8005402:	d809      	bhi.n	8005418 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005404:	464a      	mov	r2, r9
 8005406:	2a31      	cmp	r2, #49	; 0x31
 8005408:	dc06      	bgt.n	8005418 <prvCLITask+0x134>
						cInputIndex++;
 800540a:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <prvCLITask+0x1d8>)
						cInputIndex++;
 800540e:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 8005410:	444a      	add	r2, r9
 8005412:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 8005414:	b263      	sxtb	r3, r4
 8005416:	4699      	mov	r9, r3
		taskYIELD();
 8005418:	f00a f81e 	bl	800f458 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800541c:	e7b6      	b.n	800538c <prvCLITask+0xa8>
 800541e:	3301      	adds	r3, #1
 8005420:	b29b      	uxth	r3, r3
 8005422:	e7cc      	b.n	80053be <prvCLITask+0xda>
				if(cInputIndex > 0){
 8005424:	464b      	mov	r3, r9
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f6      	beq.n	8005418 <prvCLITask+0x134>
					cInputIndex--;
 800542a:	464c      	mov	r4, r9
 800542c:	3c01      	subs	r4, #1
 800542e:	b2e3      	uxtb	r3, r4
 8005430:	b25a      	sxtb	r2, r3
 8005432:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 8005434:	4a21      	ldr	r2, [pc, #132]	; (80054bc <prvCLITask+0x1d8>)
 8005436:	4694      	mov	ip, r2
 8005438:	4463      	add	r3, ip
 800543a:	751e      	strb	r6, [r3, #20]
 800543c:	e7ec      	b.n	8005418 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	2202      	movs	r2, #2
 8005442:	7818      	ldrb	r0, [r3, #0]
 8005444:	491e      	ldr	r1, [pc, #120]	; (80054c0 <prvCLITask+0x1dc>)
 8005446:	230a      	movs	r3, #10
 8005448:	f008 f8b4 	bl	800d5b4 <writePxITMutex>
			if(cInputIndex == 0){
 800544c:	464b      	mov	r3, r9
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005452:	4c1a      	ldr	r4, [pc, #104]	; (80054bc <prvCLITask+0x1d8>)
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	3414      	adds	r4, #20
 8005458:	7818      	ldrb	r0, [r3, #0]
 800545a:	0022      	movs	r2, r4
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	2101      	movs	r1, #1
 8005460:	f7ff fd1e 	bl	8004ea0 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 8005464:	480e      	ldr	r0, [pc, #56]	; (80054a0 <prvCLITask+0x1bc>)
 8005466:	0021      	movs	r1, r4
 8005468:	3060      	adds	r0, #96	; 0x60
 800546a:	f00d ffab 	bl	80133c4 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800546e:	2232      	movs	r2, #50	; 0x32
 8005470:	2100      	movs	r1, #0
 8005472:	0020      	movs	r0, r4
 8005474:	f00d fd70 	bl	8012f58 <memset>
			cInputIndex =0;
 8005478:	2300      	movs	r3, #0
 800547a:	4699      	mov	r9, r3
 800547c:	e7cc      	b.n	8005418 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 800547e:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005480:	2301      	movs	r3, #1
 8005482:	e7a0      	b.n	80053c6 <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005484:	4906      	ldr	r1, [pc, #24]	; (80054a0 <prvCLITask+0x1bc>)
 8005486:	480d      	ldr	r0, [pc, #52]	; (80054bc <prvCLITask+0x1d8>)
 8005488:	3160      	adds	r1, #96	; 0x60
 800548a:	3014      	adds	r0, #20
 800548c:	f00d ff9a 	bl	80133c4 <strcpy>
 8005490:	e7df      	b.n	8005452 <prvCLITask+0x16e>
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	20006db4 	.word	0x20006db4
 8005498:	20000c38 	.word	0x20000c38
 800549c:	20000038 	.word	0x20000038
 80054a0:	20001150 	.word	0x20001150
 80054a4:	0801779c 	.word	0x0801779c
 80054a8:	20000aa8 	.word	0x20000aa8
 80054ac:	08018584 	.word	0x08018584
 80054b0:	080185b0 	.word	0x080185b0
 80054b4:	20001350 	.word	0x20001350
 80054b8:	20001310 	.word	0x20001310
 80054bc:	200011d0 	.word	0x200011d0
 80054c0:	08019da0 	.word	0x08019da0

080054c4 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054c6:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054c8:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0093      	lsls	r3, r2, #2
 80054d0:	189b      	adds	r3, r3, r2
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <ParseSnippetCommand+0x70>)
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d018      	beq.n	8005510 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054de:	4e16      	ldr	r6, [pc, #88]	; (8005538 <ParseSnippetCommand+0x74>)
 80054e0:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	d016      	beq.n	8005514 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054e6:	782b      	ldrb	r3, [r5, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054ec:	2113      	movs	r1, #19
 80054ee:	0028      	movs	r0, r5
 80054f0:	f00d ff5a 	bl	80133a8 <strchr>
 80054f4:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80054f6:	d010      	beq.n	800551a <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80054f8:	1b42      	subs	r2, r0, r5
 80054fa:	0029      	movs	r1, r5
 80054fc:	0020      	movs	r0, r4
 80054fe:	f00d ff7a 	bl	80133f6 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005502:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005504:	3701      	adds	r7, #1
 8005506:	64b7      	str	r7, [r6, #72]	; 0x48
}
 8005508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800550a:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 800550c:	2000      	movs	r0, #0
 800550e:	e7fb      	b.n	8005508 <ParseSnippetCommand+0x44>
		return false;
 8005510:	2000      	movs	r0, #0
 8005512:	e7f9      	b.n	8005508 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 8005514:	64b0      	str	r0, [r6, #72]	; 0x48
 8005516:	0005      	movs	r5, r0
 8005518:	e7e5      	b.n	80054e6 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 800551a:	0029      	movs	r1, r5
 800551c:	0020      	movs	r0, r4
 800551e:	f00d ff51 	bl	80133c4 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005522:	0020      	movs	r0, r4
 8005524:	f7fa fdf8 	bl	8000118 <strlen>
 8005528:	182d      	adds	r5, r5, r0
 800552a:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 800552c:	2001      	movs	r0, #1
 800552e:	e7eb      	b.n	8005508 <ParseSnippetCommand+0x44>
 8005530:	20001150 	.word	0x20001150
 8005534:	20006dd0 	.word	0x20006dd0
 8005538:	200011d0 	.word	0x200011d0

0800553c <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 800553c:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800553e:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 8005540:	1818      	adds	r0, r3, r0
 8005542:	492e      	ldr	r1, [pc, #184]	; (80055fc <CheckSnippetCondition+0xc0>)
 8005544:	0080      	lsls	r0, r0, #2
 8005546:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005548:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 800554a:	2b01      	cmp	r3, #1
 800554c:	d020      	beq.n	8005590 <CheckSnippetCondition+0x54>
 800554e:	2b03      	cmp	r3, #3
 8005550:	d11b      	bne.n	800558a <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005552:	180c      	adds	r4, r1, r0
 8005554:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005556:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005558:	3a01      	subs	r2, #1
 800555a:	0053      	lsls	r3, r2, #1
 800555c:	189b      	adds	r3, r3, r2
 800555e:	4a28      	ldr	r2, [pc, #160]	; (8005600 <CheckSnippetCondition+0xc4>)
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005564:	1841      	adds	r1, r0, r1
 8005566:	2204      	movs	r2, #4
 8005568:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800556a:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800556c:	f00d fceb 	bl	8012f46 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005570:	7863      	ldrb	r3, [r4, #1]
 8005572:	2b06      	cmp	r3, #6
 8005574:	d809      	bhi.n	800558a <CheckSnippetCondition+0x4e>
 8005576:	4a23      	ldr	r2, [pc, #140]	; (8005604 <CheckSnippetCondition+0xc8>)
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	58d3      	ldr	r3, [r2, r3]
 800557c:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800557e:	1c29      	adds	r1, r5, #0
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	f7fa ffbf 	bl	8000504 <__aeabi_fcmpgt>
 8005586:	2800      	cmp	r0, #0
 8005588:	d114      	bne.n	80055b4 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 800558a:	2000      	movs	r0, #0
}
 800558c:	b003      	add	sp, #12
 800558e:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005590:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005592:	7882      	ldrb	r2, [r0, #2]
 8005594:	78c0      	ldrb	r0, [r0, #3]
 8005596:	00d3      	lsls	r3, r2, #3
 8005598:	189b      	adds	r3, r3, r2
 800559a:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <CheckSnippetCondition+0xcc>)
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	1a18      	subs	r0, r3, r0
 80055a0:	4243      	negs	r3, r0
 80055a2:	4158      	adcs	r0, r3
 80055a4:	b2c0      	uxtb	r0, r0
 80055a6:	e7f1      	b.n	800558c <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 80055a8:	1c29      	adds	r1, r5, #0
 80055aa:	9801      	ldr	r0, [sp, #4]
 80055ac:	f7fa ff90 	bl	80004d0 <__aeabi_fcmpeq>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1ea      	bne.n	800558a <CheckSnippetCondition+0x4e>
 80055b4:	2100      	movs	r1, #0
 80055b6:	1c28      	adds	r0, r5, #0
 80055b8:	f7fa ff8a 	bl	80004d0 <__aeabi_fcmpeq>
 80055bc:	4243      	negs	r3, r0
 80055be:	4158      	adcs	r0, r3
 80055c0:	e7e4      	b.n	800558c <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 80055c2:	1c29      	adds	r1, r5, #0
 80055c4:	9801      	ldr	r0, [sp, #4]
 80055c6:	f7fa ff83 	bl	80004d0 <__aeabi_fcmpeq>
 80055ca:	1e43      	subs	r3, r0, #1
 80055cc:	4198      	sbcs	r0, r3
 80055ce:	e7dd      	b.n	800558c <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055d0:	1c29      	adds	r1, r5, #0
 80055d2:	9801      	ldr	r0, [sp, #4]
 80055d4:	f7fa ff82 	bl	80004dc <__aeabi_fcmplt>
 80055d8:	1e43      	subs	r3, r0, #1
 80055da:	4198      	sbcs	r0, r3
 80055dc:	e7d6      	b.n	800558c <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055de:	1c29      	adds	r1, r5, #0
 80055e0:	9801      	ldr	r0, [sp, #4]
 80055e2:	f7fa ff85 	bl	80004f0 <__aeabi_fcmple>
 80055e6:	1e43      	subs	r3, r0, #1
 80055e8:	4198      	sbcs	r0, r3
 80055ea:	e7cf      	b.n	800558c <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055ec:	1c29      	adds	r1, r5, #0
 80055ee:	9801      	ldr	r0, [sp, #4]
 80055f0:	f7fa ff92 	bl	8000518 <__aeabi_fcmpge>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d1dd      	bne.n	80055b4 <CheckSnippetCondition+0x78>
 80055f8:	e7c7      	b.n	800558a <CheckSnippetCondition+0x4e>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	20006dd0 	.word	0x20006dd0
 8005600:	200000a4 	.word	0x200000a4
 8005604:	08017844 	.word	0x08017844
 8005608:	2000181c 	.word	0x2000181c

0800560c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	46de      	mov	lr, fp
 8005610:	464e      	mov	r6, r9
 8005612:	4645      	mov	r5, r8
 8005614:	4657      	mov	r7, sl
 8005616:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005618:	f008 f9f2 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 800561c:	4b23      	ldr	r3, [pc, #140]	; (80056ac <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800561e:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 8005620:	4698      	mov	r8, r3
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d039      	beq.n	800569c <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <ExecuteSnippet+0xa4>)
 800562a:	4f22      	ldr	r7, [pc, #136]	; (80056b4 <ExecuteSnippet+0xa8>)
 800562c:	469b      	mov	fp, r3
 800562e:	2320      	movs	r3, #32
 8005630:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <ExecuteSnippet+0xac>)
 8005634:	4d21      	ldr	r5, [pc, #132]	; (80056bc <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005636:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005638:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800563a:	4699      	mov	r9, r3
 800563c:	e006      	b.n	800564c <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 800563e:	4643      	mov	r3, r8
 8005640:	3401      	adds	r4, #1
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b2a4      	uxth	r4, r4
 8005646:	3514      	adds	r5, #20
 8005648:	42a3      	cmp	r3, r4
 800564a:	d927      	bls.n	800569c <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 800564c:	7c2b      	ldrb	r3, [r5, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f5      	beq.n	800563e <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005652:	b2e0      	uxtb	r0, r4
 8005654:	f7ff ff72 	bl	800553c <CheckSnippetCondition>
 8005658:	2800      	cmp	r0, #0
 800565a:	d0f0      	beq.n	800563e <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800565c:	465b      	mov	r3, fp
 800565e:	4652      	mov	r2, sl
 8005660:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005662:	e00e      	b.n	8005682 <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005664:	464b      	mov	r3, r9
 8005666:	003a      	movs	r2, r7
 8005668:	7818      	ldrb	r0, [r3, #0]
 800566a:	2100      	movs	r1, #0
 800566c:	0033      	movs	r3, r6
 800566e:	f7ff fc17 	bl	8004ea0 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005672:	0030      	movs	r0, r6
 8005674:	f7fa fd50 	bl	8000118 <strlen>
 8005678:	2100      	movs	r1, #0
 800567a:	0002      	movs	r2, r0
 800567c:	0030      	movs	r0, r6
 800567e:	f00d fc6b 	bl	8012f58 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005682:	0039      	movs	r1, r7
 8005684:	68e8      	ldr	r0, [r5, #12]
 8005686:	f7ff ff1d 	bl	80054c4 <ParseSnippetCommand>
 800568a:	2800      	cmp	r0, #0
 800568c:	d1ea      	bne.n	8005664 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800568e:	4643      	mov	r3, r8
 8005690:	3401      	adds	r4, #1
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2a4      	uxth	r4, r4
 8005696:	3514      	adds	r5, #20
 8005698:	42a3      	cmp	r3, r4
 800569a:	d8d7      	bhi.n	800564c <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 800569c:	2000      	movs	r0, #0
 800569e:	bc3c      	pop	{r2, r3, r4, r5}
 80056a0:	4690      	mov	r8, r2
 80056a2:	4699      	mov	r9, r3
 80056a4:	46a2      	mov	sl, r4
 80056a6:	46ab      	mov	fp, r5
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	20001150 	.word	0x20001150
 80056b0:	20006d34 	.word	0x20006d34
 80056b4:	200011d0 	.word	0x200011d0
 80056b8:	20000c38 	.word	0x20000c38
 80056bc:	20006dd0 	.word	0x20006dd0

080056c0 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr

080056c4 <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80056c4:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	0004      	movs	r4, r0
 80056cc:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056ce:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80056d0:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d017      	beq.n	8005706 <setBaudrateCommand+0x42>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056d6:	466a      	mov	r2, sp
 80056d8:	2101      	movs	r1, #1
 80056da:	0028      	movs	r0, r5
 80056dc:	f008 f994 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80056e0:	2300      	movs	r3, #0
 80056e2:	56c3      	ldrsb	r3, [r0, r3]
 80056e4:	2b70      	cmp	r3, #112	; 0x70
 80056e6:	d010      	beq.n	800570a <setBaudrateCommand+0x46>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056e8:	aa01      	add	r2, sp, #4
 80056ea:	2102      	movs	r1, #2
 80056ec:	0028      	movs	r0, r5
 80056ee:	f008 f98b 	bl	800da08 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056f2:	f00d f968 	bl	80129c6 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80056f6:	2213      	movs	r2, #19
 80056f8:	4910      	ldr	r1, [pc, #64]	; (800573c <setBaudrateCommand+0x78>)
 80056fa:	0020      	movs	r0, r4
 80056fc:	f00d fc23 	bl	8012f46 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005700:	2000      	movs	r0, #0
 8005702:	b002      	add	sp, #8
 8005704:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005706:	b672      	cpsid	i
 8005708:	e7fe      	b.n	8005708 <setBaudrateCommand+0x44>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800570a:	3001      	adds	r0, #1
 800570c:	f00d f95b 	bl	80129c6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005710:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005712:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005714:	2102      	movs	r1, #2
 8005716:	0028      	movs	r0, r5
 8005718:	f008 f976 	bl	800da08 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800571c:	f00d f953 	bl	80129c6 <atol>
 8005720:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 8005722:	b2f0      	uxtb	r0, r6
 8005724:	0029      	movs	r1, r5
 8005726:	f007 ff89 	bl	800d63c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800572a:	23ff      	movs	r3, #255	; 0xff
 800572c:	002a      	movs	r2, r5
 800572e:	4033      	ands	r3, r6
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <setBaudrateCommand+0x7c>)
 8005732:	0020      	movs	r0, r4
 8005734:	f00d fe0a 	bl	801334c <sprintf>
 8005738:	e7e2      	b.n	8005700 <setBaudrateCommand+0x3c>
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	0801886c 	.word	0x0801886c
 8005740:	08018844 	.word	0x08018844

08005744 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005744:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005746:	2800      	cmp	r0, #0
 8005748:	d101      	bne.n	800574e <flashsizeCommand+0xa>
 800574a:	b672      	cpsid	i
 800574c:	e7fe      	b.n	800574c <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <flashsizeCommand+0x18>)
 8005750:	4903      	ldr	r1, [pc, #12]	; (8005760 <flashsizeCommand+0x1c>)
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	f00d fdfa 	bl	801334c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005758:	2000      	movs	r0, #0
 800575a:	bd10      	pop	{r4, pc}
 800575c:	1ffff7cc 	.word	0x1ffff7cc
 8005760:	08018880 	.word	0x08018880

08005764 <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005764:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005766:	b510      	push	{r4, lr}
 8005768:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 800576a:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 800576c:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800576e:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 8005770:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005772:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005774:	2c00      	cmp	r4, #0
 8005776:	d00f      	beq.n	8005798 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005778:	466a      	mov	r2, sp
 800577a:	2101      	movs	r1, #1
 800577c:	f008 f944 	bl	800da08 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005780:	7803      	ldrb	r3, [r0, #0]
 8005782:	3b32      	subs	r3, #50	; 0x32
 8005784:	2b01      	cmp	r3, #1
 8005786:	d909      	bls.n	800579c <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005788:	2215      	movs	r2, #21
 800578a:	490c      	ldr	r1, [pc, #48]	; (80057bc <GetReadPrecentageCommand+0x58>)
 800578c:	0020      	movs	r0, r4
 800578e:	f00d fbda 	bl	8012f46 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005792:	2000      	movs	r0, #0
 8005794:	b002      	add	sp, #8
 8005796:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005798:	b672      	cpsid	i
 800579a:	e7fe      	b.n	800579a <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800579c:	f00d f913 	bl	80129c6 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80057a0:	a901      	add	r1, sp, #4
 80057a2:	b2c0      	uxtb	r0, r0
 80057a4:	f003 f956 	bl	8008a54 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80057a8:	9801      	ldr	r0, [sp, #4]
 80057aa:	f7fd f9bb 	bl	8002b24 <__aeabi_f2d>
 80057ae:	0002      	movs	r2, r0
 80057b0:	000b      	movs	r3, r1
 80057b2:	0020      	movs	r0, r4
 80057b4:	4902      	ldr	r1, [pc, #8]	; (80057c0 <GetReadPrecentageCommand+0x5c>)
 80057b6:	f00d fdc9 	bl	801334c <sprintf>
 80057ba:	e7ea      	b.n	8005792 <GetReadPrecentageCommand+0x2e>
 80057bc:	080188c4 	.word	0x080188c4
 80057c0:	080188a0 	.word	0x080188a0

080057c4 <ReadVrefCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057c4:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c6:	b510      	push	{r4, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80057d0:	d101      	bne.n	80057d6 <ReadVrefCommand+0x12>
 80057d2:	b672      	cpsid	i
 80057d4:	e7fe      	b.n	80057d4 <ReadVrefCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057d6:	a901      	add	r1, sp, #4
 80057d8:	4668      	mov	r0, sp
 80057da:	f003 f875 	bl	80088c8 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057de:	4669      	mov	r1, sp
 80057e0:	0020      	movs	r0, r4
 80057e2:	f00d fdef 	bl	80133c4 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80057e6:	9801      	ldr	r0, [sp, #4]
 80057e8:	f7fd f99c 	bl	8002b24 <__aeabi_f2d>
 80057ec:	0002      	movs	r2, r0
 80057ee:	000b      	movs	r3, r1
 80057f0:	0020      	movs	r0, r4
 80057f2:	4903      	ldr	r1, [pc, #12]	; (8005800 <ReadVrefCommand+0x3c>)
 80057f4:	f00d fdaa 	bl	801334c <sprintf>
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	b002      	add	sp, #8
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	080188dc 	.word	0x080188dc

08005804 <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005804:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005806:	b510      	push	{r4, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005810:	d101      	bne.n	8005816 <ReadTempCommand+0x12>
 8005812:	b672      	cpsid	i
 8005814:	e7fe      	b.n	8005814 <ReadTempCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005816:	a901      	add	r1, sp, #4
 8005818:	4668      	mov	r0, sp
 800581a:	f003 f855 	bl	80088c8 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800581e:	4669      	mov	r1, sp
 8005820:	0020      	movs	r0, r4
 8005822:	f00d fdcf 	bl	80133c4 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005826:	9800      	ldr	r0, [sp, #0]
 8005828:	f7fd f97c 	bl	8002b24 <__aeabi_f2d>
 800582c:	0002      	movs	r2, r0
 800582e:	000b      	movs	r3, r1
 8005830:	0020      	movs	r0, r4
 8005832:	4903      	ldr	r1, [pc, #12]	; (8005840 <ReadTempCommand+0x3c>)
 8005834:	f00d fd8a 	bl	801334c <sprintf>
}
 8005838:	2000      	movs	r0, #0
 800583a:	b002      	add	sp, #8
 800583c:	bd10      	pop	{r4, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	08018904 	.word	0x08018904

08005844 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005844:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005848:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 800584a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800584c:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800584e:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005850:	0004      	movs	r4, r0
 8005852:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 8005854:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005856:	2800      	cmp	r0, #0
 8005858:	d017      	beq.n	800588a <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800585a:	aa01      	add	r2, sp, #4
 800585c:	2101      	movs	r1, #1
 800585e:	0030      	movs	r0, r6
 8005860:	f008 f8d2 	bl	800da08 <FreeRTOS_CLIGetParameter>
 8005864:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005866:	aa02      	add	r2, sp, #8
 8005868:	2102      	movs	r1, #2
 800586a:	0030      	movs	r0, r6
 800586c:	f008 f8cc 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005870:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005872:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005874:	3b32      	subs	r3, #50	; 0x32
 8005876:	2b01      	cmp	r3, #1
 8005878:	d909      	bls.n	800588e <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800587a:	2215      	movs	r2, #21
 800587c:	491a      	ldr	r1, [pc, #104]	; (80058e8 <ADCReadCommand+0xa4>)
 800587e:	0020      	movs	r0, r4
 8005880:	f00d fb61 	bl	8012f46 <memcpy>
}
 8005884:	2000      	movs	r0, #0
 8005886:	b005      	add	sp, #20
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800588a:	b672      	cpsid	i
 800588c:	e7fe      	b.n	800588c <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800588e:	0028      	movs	r0, r5
 8005890:	f00d f899 	bl	80129c6 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005894:	4e15      	ldr	r6, [pc, #84]	; (80058ec <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005896:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005898:	0031      	movs	r1, r6
 800589a:	0038      	movs	r0, r7
 800589c:	f7fa fc32 	bl	8000104 <strcmp>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d005      	beq.n	80058b0 <ADCReadCommand+0x6c>
 80058a4:	4912      	ldr	r1, [pc, #72]	; (80058f0 <ADCReadCommand+0xac>)
 80058a6:	0038      	movs	r0, r7
 80058a8:	f7fa fc2c 	bl	8000104 <strcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d115      	bne.n	80058dc <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 80058b0:	0031      	movs	r1, r6
 80058b2:	0028      	movs	r0, r5
 80058b4:	f003 f9ce 	bl	8008c54 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80058b8:	aa03      	add	r2, sp, #12
 80058ba:	0031      	movs	r1, r6
 80058bc:	0028      	movs	r0, r5
 80058be:	f003 fa19 	bl	8008cf4 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80058c2:	a903      	add	r1, sp, #12
 80058c4:	0020      	movs	r0, r4
 80058c6:	f00d fd7d 	bl	80133c4 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80058ca:	9803      	ldr	r0, [sp, #12]
 80058cc:	f7fa fe78 	bl	80005c0 <__aeabi_f2uiz>
 80058d0:	4908      	ldr	r1, [pc, #32]	; (80058f4 <ADCReadCommand+0xb0>)
 80058d2:	b282      	uxth	r2, r0
 80058d4:	0020      	movs	r0, r4
 80058d6:	f00d fd39 	bl	801334c <sprintf>
 80058da:	e7d3      	b.n	8005884 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058dc:	2212      	movs	r2, #18
 80058de:	4906      	ldr	r1, [pc, #24]	; (80058f8 <ADCReadCommand+0xb4>)
 80058e0:	0020      	movs	r0, r4
 80058e2:	f00d fb30 	bl	8012f46 <memcpy>
 80058e6:	e7cd      	b.n	8005884 <ADCReadCommand+0x40>
 80058e8:	080188c4 	.word	0x080188c4
 80058ec:	08018928 	.word	0x08018928
 80058f0:	0801892c 	.word	0x0801892c
 80058f4:	08018934 	.word	0x08018934
 80058f8:	08018944 	.word	0x08018944

080058fc <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	4645      	mov	r5, r8
 8005900:	46de      	mov	lr, fp
 8005902:	4657      	mov	r7, sl
 8005904:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005906:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005908:	b5e0      	push	{r5, r6, r7, lr}
 800590a:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 800590c:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800590e:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <testportCommand+0x190>)
 8005910:	ad02      	add	r5, sp, #8
 8005912:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005914:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 8005916:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005918:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800591a:	2c00      	cmp	r4, #0
 800591c:	d100      	bne.n	8005920 <testportCommand+0x24>
 800591e:	e074      	b.n	8005a0a <testportCommand+0x10e>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005920:	2101      	movs	r1, #1
 8005922:	aa03      	add	r2, sp, #12
 8005924:	f008 f870 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005928:	4959      	ldr	r1, [pc, #356]	; (8005a90 <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800592a:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 800592c:	f7fa fbea 	bl	8000104 <strcmp>
 8005930:	2800      	cmp	r0, #0
 8005932:	d159      	bne.n	80059e8 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005934:	2701      	movs	r7, #1
 8005936:	4e57      	ldr	r6, [pc, #348]	; (8005a94 <testportCommand+0x198>)
 8005938:	4b57      	ldr	r3, [pc, #348]	; (8005a98 <testportCommand+0x19c>)
 800593a:	7832      	ldrb	r2, [r6, #0]
 800593c:	189b      	adds	r3, r3, r2
 800593e:	3b01      	subs	r3, #1
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005944:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <testportCommand+0x1a0>)
 8005946:	469b      	mov	fp, r3
 8005948:	b2fb      	uxtb	r3, r7
 800594a:	469a      	mov	sl, r3
			if(PcPort != ports){
 800594c:	429a      	cmp	r2, r3
 800594e:	d107      	bne.n	8005960 <testportCommand+0x64>
 8005950:	3701      	adds	r7, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005952:	2f06      	cmp	r7, #6
 8005954:	d051      	beq.n	80059fa <testportCommand+0xfe>
 8005956:	7832      	ldrb	r2, [r6, #0]
 8005958:	b2fb      	uxtb	r3, r7
 800595a:	469a      	mov	sl, r3
			if(PcPort != ports){
 800595c:	429a      	cmp	r2, r3
 800595e:	d0f7      	beq.n	8005950 <testportCommand+0x54>
				WriteVaule[0] =rand();
 8005960:	f00d fb12 	bl	8012f88 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005964:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005966:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005968:	2201      	movs	r2, #1
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	0029      	movs	r1, r5
 800596e:	4699      	mov	r9, r3
 8005970:	4650      	mov	r0, sl
 8005972:	3b5a      	subs	r3, #90	; 0x5a
 8005974:	f007 fdec 	bl	800d550 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005978:	4650      	mov	r0, sl
 800597a:	f007 fe71 	bl	800d660 <GetUart>
 800597e:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005980:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005984:	b2db      	uxtb	r3, r3
 8005986:	429a      	cmp	r2, r3
 8005988:	d041      	beq.n	8005a0e <testportCommand+0x112>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800598a:	003a      	movs	r2, r7
 800598c:	4944      	ldr	r1, [pc, #272]	; (8005aa0 <testportCommand+0x1a4>)
 800598e:	0020      	movs	r0, r4
 8005990:	f00d fcdc 	bl	801334c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005994:	0020      	movs	r0, r4
 8005996:	f7fa fbbf 	bl	8000118 <strlen>
 800599a:	464b      	mov	r3, r9
 800599c:	b282      	uxth	r2, r0
 800599e:	0021      	movs	r1, r4
 80059a0:	7830      	ldrb	r0, [r6, #0]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	230a      	movs	r3, #10
 80059a6:	f007 fdd3 	bl	800d550 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80059aa:	2254      	movs	r2, #84	; 0x54
 80059ac:	493d      	ldr	r1, [pc, #244]	; (8005aa4 <testportCommand+0x1a8>)
 80059ae:	0020      	movs	r0, r4
 80059b0:	f00d fac9 	bl	8012f46 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059b4:	2364      	movs	r3, #100	; 0x64
 80059b6:	7830      	ldrb	r0, [r6, #0]
 80059b8:	2253      	movs	r2, #83	; 0x53
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	0021      	movs	r1, r4
 80059be:	3b5a      	subs	r3, #90	; 0x5a
 80059c0:	f007 fdc6 	bl	800d550 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059c4:	2301      	movs	r3, #1
 80059c6:	469c      	mov	ip, r3
 80059c8:	44e0      	add	r8, ip
 80059ca:	e002      	b.n	80059d2 <testportCommand+0xd6>
					Delay_ms(1);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f009 fe9b 	bl	800f708 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059d2:	7832      	ldrb	r2, [r6, #0]
 80059d4:	3a01      	subs	r2, #1
 80059d6:	0053      	lsls	r3, r2, #1
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	4642      	mov	r2, r8
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	445b      	add	r3, fp
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f2      	beq.n	80059cc <testportCommand+0xd0>
 80059e6:	e7b3      	b.n	8005950 <testportCommand+0x54>
	else if(pcParameterString1[0] == 'p'){
 80059e8:	2300      	movs	r3, #0
 80059ea:	56f3      	ldrsb	r3, [r6, r3]
 80059ec:	2b70      	cmp	r3, #112	; 0x70
 80059ee:	d01f      	beq.n	8005a30 <testportCommand+0x134>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059f0:	220f      	movs	r2, #15
 80059f2:	492d      	ldr	r1, [pc, #180]	; (8005aa8 <testportCommand+0x1ac>)
 80059f4:	0020      	movs	r0, r4
 80059f6:	f00d faa6 	bl	8012f46 <memcpy>
}
 80059fa:	2000      	movs	r0, #0
 80059fc:	b005      	add	sp, #20
 80059fe:	bc3c      	pop	{r2, r3, r4, r5}
 8005a00:	4690      	mov	r8, r2
 8005a02:	4699      	mov	r9, r3
 8005a04:	46a2      	mov	sl, r4
 8005a06:	46ab      	mov	fp, r5
 8005a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005a0a:	b672      	cpsid	i
 8005a0c:	e7fe      	b.n	8005a0c <testportCommand+0x110>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005a0e:	003a      	movs	r2, r7
 8005a10:	4926      	ldr	r1, [pc, #152]	; (8005aac <testportCommand+0x1b0>)
 8005a12:	0020      	movs	r0, r4
 8005a14:	f00d fc9a 	bl	801334c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a18:	0020      	movs	r0, r4
 8005a1a:	f7fa fb7d 	bl	8000118 <strlen>
 8005a1e:	464b      	mov	r3, r9
 8005a20:	b282      	uxth	r2, r0
 8005a22:	0021      	movs	r1, r4
 8005a24:	7830      	ldrb	r0, [r6, #0]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	3b5a      	subs	r3, #90	; 0x5a
 8005a2a:	f007 fd91 	bl	800d550 <writePxMutex>
 8005a2e:	e7bc      	b.n	80059aa <testportCommand+0xae>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a30:	1c70      	adds	r0, r6, #1
 8005a32:	f00c ffc8 	bl	80129c6 <atol>
 8005a36:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a38:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a3a:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d905      	bls.n	8005a4c <testportCommand+0x150>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005a40:	221b      	movs	r2, #27
 8005a42:	491b      	ldr	r1, [pc, #108]	; (8005ab0 <testportCommand+0x1b4>)
 8005a44:	0020      	movs	r0, r4
 8005a46:	f00d fa7e 	bl	8012f46 <memcpy>
 8005a4a:	e7d6      	b.n	80059fa <testportCommand+0xfe>
				WriteVaule[0] =rand();
 8005a4c:	f00d fa9c 	bl	8012f88 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a50:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005a52:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a54:	2201      	movs	r2, #1
 8005a56:	0029      	movs	r1, r5
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	0038      	movs	r0, r7
 8005a5c:	3b32      	subs	r3, #50	; 0x32
 8005a5e:	f007 fd77 	bl	800d550 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a62:	0038      	movs	r0, r7
 8005a64:	f007 fdfc 	bl	800d660 <GetUart>
 8005a68:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005a6a:	7829      	ldrb	r1, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a6e:	b2f2      	uxtb	r2, r6
			if(WriteVaule[0] == ReadValue[0])
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4299      	cmp	r1, r3
 8005a74:	d004      	beq.n	8005a80 <testportCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <testportCommand+0x1a4>)
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f00d fc67 	bl	801334c <sprintf>
 8005a7e:	e7bc      	b.n	80059fa <testportCommand+0xfe>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a80:	490a      	ldr	r1, [pc, #40]	; (8005aac <testportCommand+0x1b0>)
 8005a82:	0020      	movs	r0, r4
 8005a84:	f00d fc62 	bl	801334c <sprintf>
 8005a88:	e7b7      	b.n	80059fa <testportCommand+0xfe>
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	08017abc 	.word	0x08017abc
 8005a90:	0801813c 	.word	0x0801813c
 8005a94:	20000c38 	.word	0x20000c38
 8005a98:	20001310 	.word	0x20001310
 8005a9c:	20001350 	.word	0x20001350
 8005aa0:	08018974 	.word	0x08018974
 8005aa4:	08018988 	.word	0x08018988
 8005aa8:	080189f8 	.word	0x080189f8
 8005aac:	08018958 	.word	0x08018958
 8005ab0:	080189dc 	.word	0x080189dc

08005ab4 <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ab4:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	0004      	movs	r4, r0
 8005abc:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d019      	beq.n	8005afa <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ac6:	466a      	mov	r2, sp
 8005ac8:	2101      	movs	r1, #1
 8005aca:	0028      	movs	r0, r5
 8005acc:	f007 ff9c 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	56c3      	ldrsb	r3, [r0, r3]
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d012      	beq.n	8005afe <unbridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ad8:	aa01      	add	r2, sp, #4
 8005ada:	2102      	movs	r1, #2
 8005adc:	0028      	movs	r0, r5
 8005ade:	f007 ff93 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	56c3      	ldrsb	r3, [r0, r3]
 8005ae6:	2b70      	cmp	r3, #112	; 0x70
 8005ae8:	d029      	beq.n	8005b3e <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005aea:	220f      	movs	r2, #15
 8005aec:	491a      	ldr	r1, [pc, #104]	; (8005b58 <unbridgeCommand+0xa4>)
 8005aee:	0020      	movs	r0, r4
 8005af0:	f00d fa29 	bl	8012f46 <memcpy>
}
 8005af4:	2000      	movs	r0, #0
 8005af6:	b003      	add	sp, #12
 8005af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005afa:	b672      	cpsid	i
 8005afc:	e7fe      	b.n	8005afc <unbridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005afe:	3001      	adds	r0, #1
 8005b00:	f00c ff61 	bl	80129c6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b04:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b06:	0006      	movs	r6, r0
 8005b08:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	0028      	movs	r0, r5
 8005b0e:	f007 ff7b 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b12:	2300      	movs	r3, #0
 8005b14:	56c3      	ldrsb	r3, [r0, r3]
 8005b16:	2b70      	cmp	r3, #112	; 0x70
 8005b18:	d1e7      	bne.n	8005aea <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f00c ff53 	bl	80129c6 <atol>
 8005b20:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005b22:	b2c1      	uxtb	r1, r0
 8005b24:	0038      	movs	r0, r7
 8005b26:	f7fe ff33 	bl	8004990 <Unbridge>
	if(result == BOS_OK)
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d00b      	beq.n	8005b46 <unbridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005b2e:	2867      	cmp	r0, #103	; 0x67
 8005b30:	d0db      	beq.n	8005aea <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b32:	2219      	movs	r2, #25
 8005b34:	4909      	ldr	r1, [pc, #36]	; (8005b5c <unbridgeCommand+0xa8>)
 8005b36:	0020      	movs	r0, r4
 8005b38:	f00d fa05 	bl	8012f46 <memcpy>
	return pdFALSE;
 8005b3c:	e7da      	b.n	8005af4 <unbridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f00c ff41 	bl	80129c6 <atol>
 8005b44:	e7d1      	b.n	8005aea <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b46:	22ff      	movs	r2, #255	; 0xff
 8005b48:	002b      	movs	r3, r5
 8005b4a:	4905      	ldr	r1, [pc, #20]	; (8005b60 <unbridgeCommand+0xac>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	0020      	movs	r0, r4
 8005b50:	4032      	ands	r2, r6
 8005b52:	f00d fbfb 	bl	801334c <sprintf>
 8005b56:	e7cd      	b.n	8005af4 <unbridgeCommand+0x40>
 8005b58:	080189f8 	.word	0x080189f8
 8005b5c:	08018a28 	.word	0x08018a28
 8005b60:	08018a08 	.word	0x08018a08

08005b64 <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b64:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	0004      	movs	r4, r0
 8005b6c:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d019      	beq.n	8005baa <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b76:	466a      	mov	r2, sp
 8005b78:	2101      	movs	r1, #1
 8005b7a:	0028      	movs	r0, r5
 8005b7c:	f007 ff44 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b80:	2300      	movs	r3, #0
 8005b82:	56c3      	ldrsb	r3, [r0, r3]
 8005b84:	2b70      	cmp	r3, #112	; 0x70
 8005b86:	d012      	beq.n	8005bae <bridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b88:	aa01      	add	r2, sp, #4
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	0028      	movs	r0, r5
 8005b8e:	f007 ff3b 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b92:	2300      	movs	r3, #0
 8005b94:	56c3      	ldrsb	r3, [r0, r3]
 8005b96:	2b70      	cmp	r3, #112	; 0x70
 8005b98:	d029      	beq.n	8005bee <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	491a      	ldr	r1, [pc, #104]	; (8005c08 <bridgeCommand+0xa4>)
 8005b9e:	0020      	movs	r0, r4
 8005ba0:	f00d f9d1 	bl	8012f46 <memcpy>
}
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	b003      	add	sp, #12
 8005ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005baa:	b672      	cpsid	i
 8005bac:	e7fe      	b.n	8005bac <bridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f00c ff09 	bl	80129c6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bb4:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bb6:	0006      	movs	r6, r0
 8005bb8:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bba:	2102      	movs	r1, #2
 8005bbc:	0028      	movs	r0, r5
 8005bbe:	f007 ff23 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	56c3      	ldrsb	r3, [r0, r3]
 8005bc6:	2b70      	cmp	r3, #112	; 0x70
 8005bc8:	d1e7      	bne.n	8005b9a <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f00c fefb 	bl	80129c6 <atol>
 8005bd0:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005bd2:	b2c1      	uxtb	r1, r0
 8005bd4:	0038      	movs	r0, r7
 8005bd6:	f7fe fec7 	bl	8004968 <Bridge>
	if(result == BOS_OK)
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d00b      	beq.n	8005bf6 <bridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005bde:	2867      	cmp	r0, #103	; 0x67
 8005be0:	d0db      	beq.n	8005b9a <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005be2:	2217      	movs	r2, #23
 8005be4:	4909      	ldr	r1, [pc, #36]	; (8005c0c <bridgeCommand+0xa8>)
 8005be6:	0020      	movs	r0, r4
 8005be8:	f00d f9ad 	bl	8012f46 <memcpy>
	return pdFALSE;
 8005bec:	e7da      	b.n	8005ba4 <bridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f00c fee9 	bl	80129c6 <atol>
 8005bf4:	e7d1      	b.n	8005b9a <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	002b      	movs	r3, r5
 8005bfa:	4905      	ldr	r1, [pc, #20]	; (8005c10 <bridgeCommand+0xac>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	0020      	movs	r0, r4
 8005c00:	4032      	ands	r2, r6
 8005c02:	f00d fba3 	bl	801334c <sprintf>
 8005c06:	e7cd      	b.n	8005ba4 <bridgeCommand+0x40>
 8005c08:	080189f8 	.word	0x080189f8
 8005c0c:	08018a68 	.word	0x08018a68
 8005c10:	08018a44 	.word	0x08018a44

08005c14 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	464e      	mov	r6, r9
 8005c18:	4645      	mov	r5, r8
 8005c1a:	46de      	mov	lr, fp
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4657      	mov	r7, sl
	configASSERT(pcWriteBuffer);
 8005c20:	4643      	mov	r3, r8
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c22:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005c24:	2600      	movs	r6, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c26:	b083      	sub	sp, #12
 8005c28:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c2a:	9601      	str	r6, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01a      	beq.n	8005c66 <delSnipCommand+0x52>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c30:	aa01      	add	r2, sp, #4
 8005c32:	2101      	movs	r1, #1
 8005c34:	f007 fee8 	bl	800da08 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c38:	f00c febf 	bl	80129ba <atoi>
 8005c3c:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	d004      	beq.n	8005c4c <delSnipCommand+0x38>
 8005c42:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <delSnipCommand+0xdc>)
 8005c44:	4699      	mov	r9, r3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d20e      	bcs.n	8005c6a <delSnipCommand+0x56>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c4c:	2223      	movs	r2, #35	; 0x23
 8005c4e:	4929      	ldr	r1, [pc, #164]	; (8005cf4 <delSnipCommand+0xe0>)
 8005c50:	4640      	mov	r0, r8
 8005c52:	f00d f978 	bl	8012f46 <memcpy>
}
 8005c56:	2000      	movs	r0, #0
 8005c58:	b003      	add	sp, #12
 8005c5a:	bc3c      	pop	{r2, r3, r4, r5}
 8005c5c:	4690      	mov	r8, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	46a2      	mov	sl, r4
 8005c62:	46ab      	mov	fp, r5
 8005c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005c66:	b672      	cpsid	i
 8005c68:	e7fe      	b.n	8005c68 <delSnipCommand+0x54>
		snippets[index - 1].cond.conditionType =0;
 8005c6a:	2714      	movs	r7, #20
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <delSnipCommand+0xe4>)
 8005c6e:	b2c3      	uxtb	r3, r0
 8005c70:	4692      	mov	sl, r2
 8005c72:	469b      	mov	fp, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	437b      	muls	r3, r7
 8005c78:	189d      	adds	r5, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	4453      	add	r3, sl
 8005c7e:	0018      	movs	r0, r3
		snippets[index - 1].cond.conditionType =0;
 8005c80:	802e      	strh	r6, [r5, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c82:	2204      	movs	r2, #4
 8005c84:	2100      	movs	r1, #0
 8005c86:	f00d f967 	bl	8012f58 <memset>
		snippets[index - 1].state = false;
 8005c8a:	742e      	strb	r6, [r5, #16]
		free(snippets[index - 1].cmd);
 8005c8c:	68e8      	ldr	r0, [r5, #12]
 8005c8e:	f00c ff17 	bl	8012ac0 <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c92:	464b      	mov	r3, r9
		snippets[index - 1].cmd = NULL;
 8005c94:	60ee      	str	r6, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c96:	781e      	ldrb	r6, [r3, #0]
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d91d      	bls.n	8005cd8 <delSnipCommand+0xc4>
 8005c9c:	465d      	mov	r5, fp
 8005c9e:	4653      	mov	r3, sl
 8005ca0:	3e01      	subs	r6, #1
 8005ca2:	1b34      	subs	r4, r6, r4
 8005ca4:	b2e4      	uxtb	r4, r4
 8005ca6:	445c      	add	r4, fp
 8005ca8:	437d      	muls	r5, r7
 8005caa:	437c      	muls	r4, r7
 8005cac:	3314      	adds	r3, #20
 8005cae:	4455      	add	r5, sl
 8005cb0:	18e4      	adds	r4, r4, r3
 8005cb2:	e002      	b.n	8005cba <delSnipCommand+0xa6>
 8005cb4:	3514      	adds	r5, #20
 8005cb6:	42a5      	cmp	r5, r4
 8005cb8:	d00f      	beq.n	8005cda <delSnipCommand+0xc6>
			if(snippets[s].cond.conditionType){
 8005cba:	782b      	ldrb	r3, [r5, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f9      	beq.n	8005cb4 <delSnipCommand+0xa0>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005cc0:	0028      	movs	r0, r5
 8005cc2:	003a      	movs	r2, r7
 8005cc4:	0029      	movs	r1, r5
 8005cc6:	3814      	subs	r0, #20
 8005cc8:	f00d f93d 	bl	8012f46 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005ccc:	003a      	movs	r2, r7
 8005cce:	2100      	movs	r1, #0
 8005cd0:	0028      	movs	r0, r5
 8005cd2:	f00d f941 	bl	8012f58 <memset>
 8005cd6:	e7ed      	b.n	8005cb4 <delSnipCommand+0xa0>
 8005cd8:	3e01      	subs	r6, #1
		--numOfRecordedSnippets;
 8005cda:	464b      	mov	r3, r9
 8005cdc:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005cde:	f005 fc09 	bl	800b4f4 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005ce2:	2236      	movs	r2, #54	; 0x36
 8005ce4:	4905      	ldr	r1, [pc, #20]	; (8005cfc <delSnipCommand+0xe8>)
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	f00d f92d 	bl	8012f46 <memcpy>
 8005cec:	e7b3      	b.n	8005c56 <delSnipCommand+0x42>
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	20001150 	.word	0x20001150
 8005cf4:	08018ab8 	.word	0x08018ab8
 8005cf8:	20006dd0 	.word	0x20006dd0
 8005cfc:	08018a80 	.word	0x08018a80

08005d00 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d00:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005d02:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d04:	b083      	sub	sp, #12
 8005d06:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d08:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d0a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d0c:	2c00      	cmp	r4, #0
 8005d0e:	d014      	beq.n	8005d3a <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d10:	aa01      	add	r2, sp, #4
 8005d12:	2101      	movs	r1, #1
 8005d14:	f007 fe78 	bl	800da08 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d18:	f00c fe4f 	bl	80129ba <atoi>
 8005d1c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <pauseSnipCommand+0x2a>
 8005d22:	4a0e      	ldr	r2, [pc, #56]	; (8005d5c <pauseSnipCommand+0x5c>)
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d209      	bcs.n	8005d3e <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d2a:	2223      	movs	r2, #35	; 0x23
 8005d2c:	490c      	ldr	r1, [pc, #48]	; (8005d60 <pauseSnipCommand+0x60>)
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f00d f909 	bl	8012f46 <memcpy>
}
 8005d34:	2000      	movs	r0, #0
 8005d36:	b003      	add	sp, #12
 8005d38:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8005d3a:	b672      	cpsid	i
 8005d3c:	e7fe      	b.n	8005d3c <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005d3e:	2314      	movs	r3, #20
 8005d40:	b2c0      	uxtb	r0, r0
 8005d42:	3801      	subs	r0, #1
 8005d44:	4343      	muls	r3, r0
 8005d46:	4807      	ldr	r0, [pc, #28]	; (8005d64 <pauseSnipCommand+0x64>)
 8005d48:	18c0      	adds	r0, r0, r3
 8005d4a:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005d4c:	f005 fbd2 	bl	800b4f4 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d50:	2235      	movs	r2, #53	; 0x35
 8005d52:	4905      	ldr	r1, [pc, #20]	; (8005d68 <pauseSnipCommand+0x68>)
 8005d54:	0020      	movs	r0, r4
 8005d56:	f00d f8f6 	bl	8012f46 <memcpy>
 8005d5a:	e7eb      	b.n	8005d34 <pauseSnipCommand+0x34>
 8005d5c:	20001150 	.word	0x20001150
 8005d60:	08018ab8 	.word	0x08018ab8
 8005d64:	20006dd0 	.word	0x20006dd0
 8005d68:	08018adc 	.word	0x08018adc

08005d6c <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005d6c:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d74:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d76:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d014      	beq.n	8005da6 <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d7c:	aa01      	add	r2, sp, #4
 8005d7e:	2101      	movs	r1, #1
 8005d80:	f007 fe42 	bl	800da08 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d84:	f00c fe19 	bl	80129ba <atoi>
 8005d88:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <actSnipCommand+0x2a>
 8005d8e:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <actSnipCommand+0x60>)
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d209      	bcs.n	8005daa <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d96:	2223      	movs	r2, #35	; 0x23
 8005d98:	490d      	ldr	r1, [pc, #52]	; (8005dd0 <actSnipCommand+0x64>)
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	f00d f8d3 	bl	8012f46 <memcpy>
}
 8005da0:	2000      	movs	r0, #0
 8005da2:	b002      	add	sp, #8
 8005da4:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005da6:	b672      	cpsid	i
 8005da8:	e7fe      	b.n	8005da8 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8005daa:	2314      	movs	r3, #20
 8005dac:	b2c0      	uxtb	r0, r0
 8005dae:	3801      	subs	r0, #1
 8005db0:	4343      	muls	r3, r0
 8005db2:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <actSnipCommand+0x68>)
 8005db4:	18c0      	adds	r0, r0, r3
 8005db6:	2301      	movs	r3, #1
 8005db8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005dba:	f005 fb9b 	bl	800b4f4 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005dbe:	2238      	movs	r2, #56	; 0x38
 8005dc0:	4905      	ldr	r1, [pc, #20]	; (8005dd8 <actSnipCommand+0x6c>)
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	f00d f8bf 	bl	8012f46 <memcpy>
 8005dc8:	e7ea      	b.n	8005da0 <actSnipCommand+0x34>
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	20001150 	.word	0x20001150
 8005dd0:	08018ab8 	.word	0x08018ab8
 8005dd4:	20006dd0 	.word	0x20006dd0
 8005dd8:	08018b14 	.word	0x08018b14

08005ddc <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dde:	464e      	mov	r6, r9
 8005de0:	4645      	mov	r5, r8
 8005de2:	46de      	mov	lr, fp
 8005de4:	4657      	mov	r7, sl
 8005de6:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005de8:	4b70      	ldr	r3, [pc, #448]	; (8005fac <snipCommand+0x1d0>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dea:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 8005dec:	4699      	mov	r9, r3
 8005dee:	aa08      	add	r2, sp, #32
 8005df0:	3304      	adds	r3, #4
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df2:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005df4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005df6:	c223      	stmia	r2!, {r0, r1, r5}
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d100      	bne.n	8005e02 <snipCommand+0x26>
 8005e00:	e0a2      	b.n	8005f48 <snipCommand+0x16c>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005e02:	4b6b      	ldr	r3, [pc, #428]	; (8005fb0 <snipCommand+0x1d4>)
 8005e04:	2237      	movs	r2, #55	; 0x37
 8005e06:	7818      	ldrb	r0, [r3, #0]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	4969      	ldr	r1, [pc, #420]	; (8005fb4 <snipCommand+0x1d8>)
 8005e10:	3333      	adds	r3, #51	; 0x33
 8005e12:	f007 fb9d 	bl	800d550 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e16:	4b68      	ldr	r3, [pc, #416]	; (8005fb8 <snipCommand+0x1dc>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d041      	beq.n	8005ea2 <snipCommand+0xc6>
 8005e1e:	2500      	movs	r5, #0
 8005e20:	4e66      	ldr	r6, [pc, #408]	; (8005fbc <snipCommand+0x1e0>)
 8005e22:	4f67      	ldr	r7, [pc, #412]	; (8005fc0 <snipCommand+0x1e4>)
 8005e24:	1c6b      	adds	r3, r5, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	469a      	mov	sl, r3
		if(snippets[s].cond.conditionType)
 8005e2a:	00ab      	lsls	r3, r5, #2
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	195b      	adds	r3, r3, r5
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4698      	mov	r8, r3
 8005e34:	5cf3      	ldrb	r3, [r6, r3]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d140      	bne.n	8005ebc <snipCommand+0xe0>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e3a:	9b05      	ldr	r3, [sp, #20]
 8005e3c:	469c      	mov	ip, r3
 8005e3e:	4465      	add	r5, ip
 8005e40:	00ad      	lsls	r5, r5, #2
 8005e42:	1975      	adds	r5, r6, r5
 8005e44:	e00d      	b.n	8005e62 <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005e46:	0022      	movs	r2, r4
 8005e48:	495e      	ldr	r1, [pc, #376]	; (8005fc4 <snipCommand+0x1e8>)
 8005e4a:	003b      	movs	r3, r7
 8005e4c:	0020      	movs	r0, r4
 8005e4e:	f00d fa7d 	bl	801334c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005e52:	0038      	movs	r0, r7
 8005e54:	f7fa f960 	bl	8000118 <strlen>
 8005e58:	2100      	movs	r1, #0
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	0038      	movs	r0, r7
 8005e5e:	f00d f87b 	bl	8012f58 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e62:	0039      	movs	r1, r7
 8005e64:	68e8      	ldr	r0, [r5, #12]
 8005e66:	f7ff fb2d 	bl	80054c4 <ParseSnippetCommand>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1eb      	bne.n	8005e46 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e6e:	0020      	movs	r0, r4
 8005e70:	f7fa f952 	bl	8000118 <strlen>
 8005e74:	0005      	movs	r5, r0
 8005e76:	220c      	movs	r2, #12
 8005e78:	4953      	ldr	r1, [pc, #332]	; (8005fc8 <snipCommand+0x1ec>)
 8005e7a:	1820      	adds	r0, r4, r0
 8005e7c:	f00d f863 	bl	8012f46 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e80:	4b4b      	ldr	r3, [pc, #300]	; (8005fb0 <snipCommand+0x1d4>)
 8005e82:	002a      	movs	r2, r5
 8005e84:	7818      	ldrb	r0, [r3, #0]
 8005e86:	2301      	movs	r3, #1
 8005e88:	320b      	adds	r2, #11
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	3333      	adds	r3, #51	; 0x33
 8005e92:	0021      	movs	r1, r4
 8005e94:	f007 fb5c 	bl	800d550 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e98:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <snipCommand+0x1dc>)
 8005e9a:	4655      	mov	r5, sl
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	4553      	cmp	r3, sl
 8005ea0:	d8c0      	bhi.n	8005e24 <snipCommand+0x48>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005ea2:	22b5      	movs	r2, #181	; 0xb5
 8005ea4:	4949      	ldr	r1, [pc, #292]	; (8005fcc <snipCommand+0x1f0>)
 8005ea6:	0020      	movs	r0, r4
 8005ea8:	f00d f84d 	bl	8012f46 <memcpy>
}
 8005eac:	2000      	movs	r0, #0
 8005eae:	b00d      	add	sp, #52	; 0x34
 8005eb0:	bc3c      	pop	{r2, r3, r4, r5}
 8005eb2:	4690      	mov	r8, r2
 8005eb4:	4699      	mov	r9, r3
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	46ab      	mov	fp, r5
 8005eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005ebc:	46b3      	mov	fp, r6
 8005ebe:	44c3      	add	fp, r8
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	7c1a      	ldrb	r2, [r3, #16]
 8005ec4:	4942      	ldr	r1, [pc, #264]	; (8005fd0 <snipCommand+0x1f4>)
 8005ec6:	00d3      	lsls	r3, r2, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	aa08      	add	r2, sp, #32
 8005ecc:	4694      	mov	ip, r2
 8005ece:	0020      	movs	r0, r4
 8005ed0:	4463      	add	r3, ip
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	f00d fa3a 	bl	801334c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005ed8:	4643      	mov	r3, r8
 8005eda:	5cf3      	ldrb	r3, [r6, r3]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d027      	beq.n	8005f30 <snipCommand+0x154>
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d1aa      	bne.n	8005e3a <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	3106      	adds	r1, #6
 8005ee8:	1871      	adds	r1, r6, r1
 8005eea:	2204      	movs	r2, #4
 8005eec:	a807      	add	r0, sp, #28
 8005eee:	f00d f82a 	bl	8012f46 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005ef2:	465b      	mov	r3, fp
 8005ef4:	78da      	ldrb	r2, [r3, #3]
 8005ef6:	9807      	ldr	r0, [sp, #28]
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	0053      	lsls	r3, r2, #1
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	4a35      	ldr	r2, [pc, #212]	; (8005fd4 <snipCommand+0x1f8>)
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4698      	mov	r8, r3
 8005f08:	f7fc fe0c 	bl	8002b24 <__aeabi_f2d>
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	464a      	mov	r2, r9
 8005f10:	9002      	str	r0, [sp, #8]
 8005f12:	9103      	str	r1, [sp, #12]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	3214      	adds	r2, #20
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	0059      	lsls	r1, r3, #1
 8005f1c:	18cb      	adds	r3, r1, r3
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	0022      	movs	r2, r4
 8005f24:	4643      	mov	r3, r8
 8005f26:	492c      	ldr	r1, [pc, #176]	; (8005fd8 <snipCommand+0x1fc>)
 8005f28:	0020      	movs	r0, r4
 8005f2a:	f00d fa0f 	bl	801334c <sprintf>
				break;
 8005f2e:	e784      	b.n	8005e3a <snipCommand+0x5e>
 8005f30:	465b      	mov	r3, fp
 8005f32:	68da      	ldr	r2, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005f34:	78db      	ldrb	r3, [r3, #3]
 8005f36:	3b05      	subs	r3, #5
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d900      	bls.n	8005f40 <snipCommand+0x164>
 8005f3e:	e77c      	b.n	8005e3a <snipCommand+0x5e>
 8005f40:	4926      	ldr	r1, [pc, #152]	; (8005fdc <snipCommand+0x200>)
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	58cb      	ldr	r3, [r1, r3]
 8005f46:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8005f48:	b672      	cpsid	i
 8005f4a:	e7fe      	b.n	8005f4a <snipCommand+0x16e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f4c:	2314      	movs	r3, #20
 8005f4e:	436b      	muls	r3, r5
 8005f50:	18f3      	adds	r3, r6, r3
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	4922      	ldr	r1, [pc, #136]	; (8005fe0 <snipCommand+0x204>)
 8005f56:	9200      	str	r2, [sp, #0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	0022      	movs	r2, r4
 8005f5c:	f00d f9f6 	bl	801334c <sprintf>
						break;
 8005f60:	e76b      	b.n	8005e3a <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f62:	2114      	movs	r1, #20
 8005f64:	4369      	muls	r1, r5
 8005f66:	1871      	adds	r1, r6, r1
 8005f68:	788b      	ldrb	r3, [r1, #2]
 8005f6a:	9201      	str	r2, [sp, #4]
 8005f6c:	790a      	ldrb	r2, [r1, #4]
 8005f6e:	0020      	movs	r0, r4
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	491c      	ldr	r1, [pc, #112]	; (8005fe4 <snipCommand+0x208>)
 8005f74:	0022      	movs	r2, r4
 8005f76:	f00d f9e9 	bl	801334c <sprintf>
						break;
 8005f7a:	e75e      	b.n	8005e3a <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f7c:	2114      	movs	r1, #20
 8005f7e:	4369      	muls	r1, r5
 8005f80:	1871      	adds	r1, r6, r1
 8005f82:	788b      	ldrb	r3, [r1, #2]
 8005f84:	9201      	str	r2, [sp, #4]
 8005f86:	790a      	ldrb	r2, [r1, #4]
 8005f88:	0020      	movs	r0, r4
 8005f8a:	9200      	str	r2, [sp, #0]
 8005f8c:	4916      	ldr	r1, [pc, #88]	; (8005fe8 <snipCommand+0x20c>)
 8005f8e:	0022      	movs	r2, r4
 8005f90:	f00d f9dc 	bl	801334c <sprintf>
						break;
 8005f94:	e751      	b.n	8005e3a <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f96:	2314      	movs	r3, #20
 8005f98:	436b      	muls	r3, r5
 8005f9a:	18f3      	adds	r3, r6, r3
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	4913      	ldr	r1, [pc, #76]	; (8005fec <snipCommand+0x210>)
 8005fa0:	9200      	str	r2, [sp, #0]
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	0022      	movs	r2, r4
 8005fa6:	f00d f9d1 	bl	801334c <sprintf>
						break;
 8005faa:	e746      	b.n	8005e3a <snipCommand+0x5e>
 8005fac:	08017abc 	.word	0x08017abc
 8005fb0:	20000c38 	.word	0x20000c38
 8005fb4:	08018b4c 	.word	0x08018b4c
 8005fb8:	20001150 	.word	0x20001150
 8005fbc:	20006dd0 	.word	0x20006dd0
 8005fc0:	20001250 	.word	0x20001250
 8005fc4:	08018c00 	.word	0x08018c00
 8005fc8:	08018c08 	.word	0x08018c08
 8005fcc:	08018c14 	.word	0x08018c14
 8005fd0:	08018b84 	.word	0x08018b84
 8005fd4:	200000a4 	.word	0x200000a4
 8005fd8:	08018bf0 	.word	0x08018bf0
 8005fdc:	08017860 	.word	0x08017860
 8005fe0:	08018b90 	.word	0x08018b90
 8005fe4:	08018bd4 	.word	0x08018bd4
 8005fe8:	08018bbc 	.word	0x08018bbc
 8005fec:	08018ba4 	.word	0x08018ba4

08005ff0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ff4:	d00c      	beq.n	8006010 <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 8005ff6:	f009 fb9b 	bl	800f730 <HAL_GetDEVID>
	switch(dev){
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	; (8006070 <idcodeCommand+0x80>)
 8005ffc:	0403      	lsls	r3, r0, #16
 8005ffe:	4694      	mov	ip, r2
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	4463      	add	r3, ip
 8006004:	2b08      	cmp	r3, #8
 8006006:	d805      	bhi.n	8006014 <idcodeCommand+0x24>
 8006008:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <idcodeCommand+0x84>)
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	58d3      	ldr	r3, [r2, r3]
 800600e:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8006010:	b672      	cpsid	i
 8006012:	e7fe      	b.n	8006012 <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <idcodeCommand+0x88>)
 8006016:	4919      	ldr	r1, [pc, #100]	; (800607c <idcodeCommand+0x8c>)
 8006018:	0020      	movs	r0, r4
 800601a:	f00d f997 	bl	801334c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800601e:	f009 fb81 	bl	800f724 <HAL_GetREVID>
 8006022:	0022      	movs	r2, r4
 8006024:	0b03      	lsrs	r3, r0, #12
 8006026:	4916      	ldr	r1, [pc, #88]	; (8006080 <idcodeCommand+0x90>)
 8006028:	0020      	movs	r0, r4
 800602a:	f00d f98f 	bl	801334c <sprintf>
}
 800602e:	2000      	movs	r0, #0
 8006030:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8006032:	4a14      	ldr	r2, [pc, #80]	; (8006084 <idcodeCommand+0x94>)
 8006034:	4911      	ldr	r1, [pc, #68]	; (800607c <idcodeCommand+0x8c>)
 8006036:	0020      	movs	r0, r4
 8006038:	f00d f988 	bl	801334c <sprintf>
			break;
 800603c:	e7ef      	b.n	800601e <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 800603e:	4a12      	ldr	r2, [pc, #72]	; (8006088 <idcodeCommand+0x98>)
 8006040:	490e      	ldr	r1, [pc, #56]	; (800607c <idcodeCommand+0x8c>)
 8006042:	0020      	movs	r0, r4
 8006044:	f00d f982 	bl	801334c <sprintf>
			break;
 8006048:	e7e9      	b.n	800601e <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <idcodeCommand+0x9c>)
 800604c:	490b      	ldr	r1, [pc, #44]	; (800607c <idcodeCommand+0x8c>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00d f97c 	bl	801334c <sprintf>
			break;
 8006054:	e7e3      	b.n	800601e <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <idcodeCommand+0xa0>)
 8006058:	4908      	ldr	r1, [pc, #32]	; (800607c <idcodeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00d f976 	bl	801334c <sprintf>
			break;
 8006060:	e7dd      	b.n	800601e <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8006062:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <idcodeCommand+0xa4>)
 8006064:	4905      	ldr	r1, [pc, #20]	; (800607c <idcodeCommand+0x8c>)
 8006066:	0020      	movs	r0, r4
 8006068:	f00d f970 	bl	801334c <sprintf>
			break;
 800606c:	e7d7      	b.n	800601e <idcodeCommand+0x2e>
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	fffffbc0 	.word	0xfffffbc0
 8006074:	08017888 	.word	0x08017888
 8006078:	08018d1c 	.word	0x08018d1c
 800607c:	08018cd8 	.word	0x08018cd8
 8006080:	08018d24 	.word	0x08018d24
 8006084:	08018d04 	.word	0x08018d04
 8006088:	08018cec 	.word	0x08018cec
 800608c:	08018ccc 	.word	0x08018ccc
 8006090:	08018d10 	.word	0x08018d10
 8006094:	08018cf8 	.word	0x08018cf8

08006098 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006098:	b510      	push	{r4, lr}
 800609a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800609c:	d101      	bne.n	80060a2 <dateCommand+0xa>
 800609e:	b672      	cpsid	i
 80060a0:	e7fe      	b.n	80060a0 <dateCommand+0x8>
	GetTimeDate();
 80060a2:	f007 f833 	bl	800d10c <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80060a6:	f7fe fc41 	bl	800492c <GetDateString>
 80060aa:	4903      	ldr	r1, [pc, #12]	; (80060b8 <dateCommand+0x20>)
 80060ac:	0002      	movs	r2, r0
 80060ae:	0020      	movs	r0, r4
 80060b0:	f00d f94c 	bl	801334c <sprintf>
}
 80060b4:	2000      	movs	r0, #0
 80060b6:	bd10      	pop	{r4, pc}
 80060b8:	08018d3c 	.word	0x08018d3c

080060bc <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	46ce      	mov	lr, r9
 80060c0:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060c2:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b083      	sub	sp, #12
 80060c8:	0004      	movs	r4, r0
 80060ca:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d023      	beq.n	800611c <getCommand+0x60>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d4:	466a      	mov	r2, sp
 80060d6:	2101      	movs	r1, #1
 80060d8:	0028      	movs	r0, r5
 80060da:	f007 fc95 	bl	800da08 <FreeRTOS_CLIGetParameter>
 80060de:	4b6c      	ldr	r3, [pc, #432]	; (8006290 <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060e0:	2204      	movs	r2, #4
 80060e2:	496c      	ldr	r1, [pc, #432]	; (8006294 <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e4:	0007      	movs	r7, r0
 80060e6:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060e8:	f00d f974 	bl	80133d4 <strncmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d117      	bne.n	8006120 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	1d3e      	adds	r6, r7, #4
 80060f4:	1f1d      	subs	r5, r3, #4
 80060f6:	002a      	movs	r2, r5
 80060f8:	4967      	ldr	r1, [pc, #412]	; (8006298 <getCommand+0x1dc>)
 80060fa:	0030      	movs	r0, r6
 80060fc:	f00d f96a 	bl	80133d4 <strncmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	d125      	bne.n	8006150 <getCommand+0x94>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006104:	4b65      	ldr	r3, [pc, #404]	; (800629c <getCommand+0x1e0>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d01b      	beq.n	8006144 <getCommand+0x88>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 800610c:	2b20      	cmp	r3, #32
 800610e:	d12c      	bne.n	800616a <getCommand+0xae>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006110:	4a63      	ldr	r2, [pc, #396]	; (80062a0 <getCommand+0x1e4>)
 8006112:	4964      	ldr	r1, [pc, #400]	; (80062a4 <getCommand+0x1e8>)
 8006114:	0020      	movs	r0, r4
 8006116:	f00d f919 	bl	801334c <sprintf>
 800611a:	e00d      	b.n	8006138 <getCommand+0x7c>
	configASSERT(pcWriteBuffer);
 800611c:	b672      	cpsid	i
 800611e:	e7fe      	b.n	800611e <getCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006120:	2205      	movs	r2, #5
 8006122:	4961      	ldr	r1, [pc, #388]	; (80062a8 <getCommand+0x1ec>)
 8006124:	0038      	movs	r0, r7
 8006126:	f00d f955 	bl	80133d4 <strncmp>
 800612a:	2800      	cmp	r0, #0
 800612c:	d025      	beq.n	800617a <getCommand+0xbe>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800612e:	2213      	movs	r2, #19
 8006130:	495e      	ldr	r1, [pc, #376]	; (80062ac <getCommand+0x1f0>)
 8006132:	0020      	movs	r0, r4
 8006134:	f00c ff07 	bl	8012f46 <memcpy>
}
 8006138:	2000      	movs	r0, #0
 800613a:	b003      	add	sp, #12
 800613c:	bc0c      	pop	{r2, r3}
 800613e:	4690      	mov	r8, r2
 8006140:	4699      	mov	r9, r3
 8006142:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006144:	4a5a      	ldr	r2, [pc, #360]	; (80062b0 <getCommand+0x1f4>)
 8006146:	4957      	ldr	r1, [pc, #348]	; (80062a4 <getCommand+0x1e8>)
 8006148:	0020      	movs	r0, r4
 800614a:	f00d f8ff 	bl	801334c <sprintf>
 800614e:	e7f3      	b.n	8006138 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006150:	002a      	movs	r2, r5
 8006152:	4958      	ldr	r1, [pc, #352]	; (80062b4 <getCommand+0x1f8>)
 8006154:	0030      	movs	r0, r6
 8006156:	f00d f93d 	bl	80133d4 <strncmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	d14a      	bne.n	80061f4 <getCommand+0x138>
			if(BOSMessaging.trace == TRACE_BOTH)
 800615e:	4b4f      	ldr	r3, [pc, #316]	; (800629c <getCommand+0x1e0>)
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d0ee      	beq.n	8006144 <getCommand+0x88>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006166:	2b01      	cmp	r3, #1
 8006168:	d0d2      	beq.n	8006110 <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 800616a:	2b00      	cmp	r3, #0
 800616c:	d03c      	beq.n	80061e8 <getCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800616e:	003a      	movs	r2, r7
 8006170:	4951      	ldr	r1, [pc, #324]	; (80062b8 <getCommand+0x1fc>)
 8006172:	0020      	movs	r0, r4
 8006174:	f00d f8ea 	bl	801334c <sprintf>
 8006178:	e7de      	b.n	8006138 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800617a:	0028      	movs	r0, r5
 800617c:	aa01      	add	r2, sp, #4
 800617e:	2102      	movs	r1, #2
 8006180:	f007 fc42 	bl	800da08 <FreeRTOS_CLIGetParameter>
 8006184:	2600      	movs	r6, #0
 8006186:	0005      	movs	r5, r0
 8006188:	4f4c      	ldr	r7, [pc, #304]	; (80062bc <getCommand+0x200>)
 800618a:	e003      	b.n	8006194 <getCommand+0xd8>
 800618c:	3601      	adds	r6, #1
 800618e:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8006190:	2e0a      	cmp	r6, #10
 8006192:	d05a      	beq.n	800624a <getCommand+0x18e>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006194:	0039      	movs	r1, r7
 8006196:	0028      	movs	r0, r5
 8006198:	f7f9 ffb4 	bl	8000104 <strcmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	d1f5      	bne.n	800618c <getCommand+0xd0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80061a0:	002a      	movs	r2, r5
 80061a2:	4947      	ldr	r1, [pc, #284]	; (80062c0 <getCommand+0x204>)
 80061a4:	0020      	movs	r0, r4
 80061a6:	f00d f8d1 	bl	801334c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80061aa:	4f46      	ldr	r7, [pc, #280]	; (80062c4 <getCommand+0x208>)
 80061ac:	783b      	ldrb	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0c2      	beq.n	8006138 <getCommand+0x7c>
 80061b2:	2501      	movs	r5, #1
 80061b4:	002b      	movs	r3, r5
 80061b6:	40b3      	lsls	r3, r6
 80061b8:	4698      	mov	r8, r3
 80061ba:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <getCommand+0x20c>)
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061bc:	4e43      	ldr	r6, [pc, #268]	; (80062cc <getCommand+0x210>)
 80061be:	4699      	mov	r9, r3
 80061c0:	e004      	b.n	80061cc <getCommand+0x110>
			for(j =1; j <= N; j++)						// N modules
 80061c2:	3501      	adds	r5, #1
 80061c4:	783b      	ldrb	r3, [r7, #0]
 80061c6:	b2ed      	uxtb	r5, r5
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	d3b5      	bcc.n	8006138 <getCommand+0x7c>
				if(InGroup(j,i)){
 80061cc:	464a      	mov	r2, r9
 80061ce:	1e6b      	subs	r3, r5, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	5ad3      	ldrh	r3, [r2, r3]
 80061d4:	4642      	mov	r2, r8
 80061d6:	421a      	tst	r2, r3
 80061d8:	d0f3      	beq.n	80061c2 <getCommand+0x106>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061da:	002b      	movs	r3, r5
 80061dc:	0022      	movs	r2, r4
 80061de:	0031      	movs	r1, r6
 80061e0:	0020      	movs	r0, r4
 80061e2:	f00d f8b3 	bl	801334c <sprintf>
 80061e6:	e7ec      	b.n	80061c2 <getCommand+0x106>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80061e8:	4a39      	ldr	r2, [pc, #228]	; (80062d0 <getCommand+0x214>)
 80061ea:	492e      	ldr	r1, [pc, #184]	; (80062a4 <getCommand+0x1e8>)
 80061ec:	0020      	movs	r0, r4
 80061ee:	f00d f8ad 	bl	801334c <sprintf>
 80061f2:	e7a1      	b.n	8006138 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80061f4:	002a      	movs	r2, r5
 80061f6:	4937      	ldr	r1, [pc, #220]	; (80062d4 <getCommand+0x218>)
 80061f8:	0030      	movs	r0, r6
 80061fa:	f00d f8eb 	bl	80133d4 <strncmp>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d037      	beq.n	8006272 <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006202:	002a      	movs	r2, r5
 8006204:	4934      	ldr	r1, [pc, #208]	; (80062d8 <getCommand+0x21c>)
 8006206:	0030      	movs	r0, r6
 8006208:	f00d f8e4 	bl	80133d4 <strncmp>
 800620c:	2800      	cmp	r0, #0
 800620e:	d029      	beq.n	8006264 <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006210:	002a      	movs	r2, r5
 8006212:	4932      	ldr	r1, [pc, #200]	; (80062dc <getCommand+0x220>)
 8006214:	0030      	movs	r0, r6
 8006216:	f00d f8dd 	bl	80133d4 <strncmp>
 800621a:	2800      	cmp	r0, #0
 800621c:	d030      	beq.n	8006280 <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800621e:	002a      	movs	r2, r5
 8006220:	492f      	ldr	r1, [pc, #188]	; (80062e0 <getCommand+0x224>)
 8006222:	0030      	movs	r0, r6
 8006224:	f00d f8d6 	bl	80133d4 <strncmp>
 8006228:	2800      	cmp	r0, #0
 800622a:	d014      	beq.n	8006256 <getCommand+0x19a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800622c:	002a      	movs	r2, r5
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <getCommand+0x228>)
 8006230:	0030      	movs	r0, r6
 8006232:	f00d f8cf 	bl	80133d4 <strncmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	d000      	beq.n	800623c <getCommand+0x180>
 800623a:	e778      	b.n	800612e <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800623c:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <getCommand+0x22c>)
 800623e:	492b      	ldr	r1, [pc, #172]	; (80062ec <getCommand+0x230>)
 8006240:	795a      	ldrb	r2, [r3, #5]
 8006242:	0020      	movs	r0, r4
 8006244:	f00d f882 	bl	801334c <sprintf>
 8006248:	e776      	b.n	8006138 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800624a:	002a      	movs	r2, r5
 800624c:	4928      	ldr	r1, [pc, #160]	; (80062f0 <getCommand+0x234>)
 800624e:	0020      	movs	r0, r4
 8006250:	f00d f87c 	bl	801334c <sprintf>
			return pdFALSE;
 8006254:	e770      	b.n	8006138 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <getCommand+0x22c>)
 8006258:	4924      	ldr	r1, [pc, #144]	; (80062ec <getCommand+0x230>)
 800625a:	791a      	ldrb	r2, [r3, #4]
 800625c:	0020      	movs	r0, r4
 800625e:	f00d f875 	bl	801334c <sprintf>
 8006262:	e769      	b.n	8006138 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006264:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <getCommand+0x22c>)
 8006266:	4921      	ldr	r1, [pc, #132]	; (80062ec <getCommand+0x230>)
 8006268:	881a      	ldrh	r2, [r3, #0]
 800626a:	0020      	movs	r0, r4
 800626c:	f00d f86e 	bl	801334c <sprintf>
 8006270:	e762      	b.n	8006138 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <getCommand+0x22c>)
 8006274:	491d      	ldr	r1, [pc, #116]	; (80062ec <getCommand+0x230>)
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	0020      	movs	r0, r4
 800627a:	f00d f867 	bl	801334c <sprintf>
 800627e:	e75b      	b.n	8006138 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <getCommand+0x22c>)
 8006282:	491a      	ldr	r1, [pc, #104]	; (80062ec <getCommand+0x230>)
 8006284:	885a      	ldrh	r2, [r3, #2]
 8006286:	0020      	movs	r0, r4
 8006288:	f00d f860 	bl	801334c <sprintf>
 800628c:	e754      	b.n	8006138 <getCommand+0x7c>
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	20001250 	.word	0x20001250
 8006294:	08018d54 	.word	0x08018d54
 8006298:	08018d5c 	.word	0x08018d5c
 800629c:	20006d34 	.word	0x20006d34
 80062a0:	08018d68 	.word	0x08018d68
 80062a4:	08018018 	.word	0x08018018
 80062a8:	08018dcc 	.word	0x08018dcc
 80062ac:	08018ddc 	.word	0x08018ddc
 80062b0:	0801813c 	.word	0x0801813c
 80062b4:	08018d74 	.word	0x08018d74
 80062b8:	08018df0 	.word	0x08018df0
 80062bc:	20000ae0 	.word	0x20000ae0
 80062c0:	08018e2c 	.word	0x08018e2c
 80062c4:	20000010 	.word	0x20000010
 80062c8:	20000aac 	.word	0x20000aac
 80062cc:	08018dd4 	.word	0x08018dd4
 80062d0:	08018d6c 	.word	0x08018d6c
 80062d4:	08018d7c 	.word	0x08018d7c
 80062d8:	08018d88 	.word	0x08018d88
 80062dc:	08018d94 	.word	0x08018d94
 80062e0:	08018da4 	.word	0x08018da4
 80062e4:	08018db8 	.word	0x08018db8
 80062e8:	20006db4 	.word	0x20006db4
 80062ec:	08018520 	.word	0x08018520
 80062f0:	08018e10 	.word	0x08018e10

080062f4 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80062f4:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f6:	b570      	push	{r4, r5, r6, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 80062fc:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062fe:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006300:	2c00      	cmp	r4, #0
 8006302:	d02c      	beq.n	800635e <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006304:	aa01      	add	r2, sp, #4
 8006306:	2101      	movs	r1, #1
 8006308:	f007 fb7e 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800630c:	9e01      	ldr	r6, [sp, #4]
 800630e:	4920      	ldr	r1, [pc, #128]	; (8006390 <defaultCommand+0x9c>)
 8006310:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006312:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006314:	f00d f85e 	bl	80133d4 <strncmp>
 8006318:	2800      	cmp	r0, #0
 800631a:	d022      	beq.n	8006362 <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 800631c:	0032      	movs	r2, r6
 800631e:	491d      	ldr	r1, [pc, #116]	; (8006394 <defaultCommand+0xa0>)
 8006320:	0028      	movs	r0, r5
 8006322:	f00d f857 	bl	80133d4 <strncmp>
 8006326:	2800      	cmp	r0, #0
 8006328:	d12c      	bne.n	8006384 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800632a:	2116      	movs	r1, #22
 800632c:	2200      	movs	r2, #0
 800632e:	20ff      	movs	r0, #255	; 0xff
 8006330:	f003 fb62 	bl	80099f8 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006334:	2202      	movs	r2, #2
 8006336:	4b18      	ldr	r3, [pc, #96]	; (8006398 <defaultCommand+0xa4>)
		osDelay(100);
 8006338:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 800633a:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 800633c:	f007 fa54 	bl	800d7e8 <osDelay>
		ClearEEportsDir();
 8006340:	f7fd f95a 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 8006344:	f005 f9ce 	bl	800b6e4 <ClearROtopology>
		osDelay(100);
 8006348:	2064      	movs	r0, #100	; 0x64
 800634a:	f007 fa4d 	bl	800d7e8 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	4912      	ldr	r1, [pc, #72]	; (800639c <defaultCommand+0xa8>)
 8006352:	0020      	movs	r0, r4
 8006354:	f00c fdf7 	bl	8012f46 <memcpy>
}
 8006358:	2000      	movs	r0, #0
 800635a:	b002      	add	sp, #8
 800635c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800635e:	b672      	cpsid	i
 8006360:	e7fe      	b.n	8006360 <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006362:	490f      	ldr	r1, [pc, #60]	; (80063a0 <defaultCommand+0xac>)
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <defaultCommand+0xb0>)
 8006366:	000a      	movs	r2, r1
 8006368:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636a:	c223      	stmia	r2!, {r0, r1, r5}
 800636c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636e:	c223      	stmia	r2!, {r0, r1, r5}
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006374:	f7fd f8fc 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006378:	2227      	movs	r2, #39	; 0x27
 800637a:	490b      	ldr	r1, [pc, #44]	; (80063a8 <defaultCommand+0xb4>)
 800637c:	0020      	movs	r0, r4
 800637e:	f00c fde2 	bl	8012f46 <memcpy>
 8006382:	e7e9      	b.n	8006358 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006384:	220f      	movs	r2, #15
 8006386:	4909      	ldr	r1, [pc, #36]	; (80063ac <defaultCommand+0xb8>)
 8006388:	0020      	movs	r0, r4
 800638a:	f00c fddc 	bl	8012f46 <memcpy>
 800638e:	e7e3      	b.n	8006358 <defaultCommand+0x64>
 8006390:	08018e40 	.word	0x08018e40
 8006394:	08018e70 	.word	0x08018e70
 8006398:	2000114e 	.word	0x2000114e
 800639c:	08018e88 	.word	0x08018e88
 80063a0:	20006db4 	.word	0x20006db4
 80063a4:	2000001c 	.word	0x2000001c
 80063a8:	08018e48 	.word	0x08018e48
 80063ac:	08018e78 	.word	0x08018e78

080063b0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b2:	4657      	mov	r7, sl
 80063b4:	46de      	mov	lr, fp
 80063b6:	464e      	mov	r6, r9
 80063b8:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063ba:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063bc:	b5e0      	push	{r5, r6, r7, lr}
 80063be:	b08f      	sub	sp, #60	; 0x3c
 80063c0:	0007      	movs	r7, r0
 80063c2:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	930a      	str	r3, [sp, #40]	; 0x28
 80063c8:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063ca:	930c      	str	r3, [sp, #48]	; 0x30
 80063cc:	930d      	str	r3, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d029      	beq.n	8006426 <setCommand+0x76>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063d2:	aa09      	add	r2, sp, #36	; 0x24
 80063d4:	2101      	movs	r1, #1
 80063d6:	0020      	movs	r0, r4
 80063d8:	f007 fb16 	bl	800da08 <FreeRTOS_CLIGetParameter>
 80063dc:	4dbf      	ldr	r5, [pc, #764]	; (80066dc <setCommand+0x32c>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063de:	2204      	movs	r2, #4
 80063e0:	49bf      	ldr	r1, [pc, #764]	; (80066e0 <setCommand+0x330>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063e2:	4681      	mov	r9, r0
 80063e4:	63a8      	str	r0, [r5, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063e6:	f00c fff5 	bl	80133d4 <strncmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d01d      	beq.n	800642a <setCommand+0x7a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063ee:	2204      	movs	r2, #4
 80063f0:	49bc      	ldr	r1, [pc, #752]	; (80066e4 <setCommand+0x334>)
 80063f2:	4648      	mov	r0, r9
 80063f4:	f00c ffee 	bl	80133d4 <strncmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d100      	bne.n	80063fe <setCommand+0x4e>
 80063fc:	e0ed      	b.n	80065da <setCommand+0x22a>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80063fe:	2204      	movs	r2, #4
 8006400:	49b9      	ldr	r1, [pc, #740]	; (80066e8 <setCommand+0x338>)
 8006402:	4648      	mov	r0, r9
 8006404:	f00c ffe6 	bl	80133d4 <strncmp>
 8006408:	2800      	cmp	r0, #0
 800640a:	d04b      	beq.n	80064a4 <setCommand+0xf4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800640c:	2213      	movs	r2, #19
 800640e:	49b7      	ldr	r1, [pc, #732]	; (80066ec <setCommand+0x33c>)
 8006410:	0038      	movs	r0, r7
 8006412:	f00c fd98 	bl	8012f46 <memcpy>
}
 8006416:	2000      	movs	r0, #0
 8006418:	b00f      	add	sp, #60	; 0x3c
 800641a:	bc3c      	pop	{r2, r3, r4, r5}
 800641c:	4690      	mov	r8, r2
 800641e:	4699      	mov	r9, r3
 8006420:	46a2      	mov	sl, r4
 8006422:	46ab      	mov	fp, r5
 8006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006426:	b672      	cpsid	i
 8006428:	e7fe      	b.n	8006428 <setCommand+0x78>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800642a:	aa0a      	add	r2, sp, #40	; 0x28
 800642c:	2102      	movs	r1, #2
 800642e:	0020      	movs	r0, r4
 8006430:	f007 faea 	bl	800da08 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006434:	6bab      	ldr	r3, [r5, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006436:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006438:	1d1e      	adds	r6, r3, #4
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800643c:	63e8      	str	r0, [r5, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800643e:	3b04      	subs	r3, #4
 8006440:	4698      	mov	r8, r3
 8006442:	4bab      	ldr	r3, [pc, #684]	; (80066f0 <setCommand+0x340>)
 8006444:	4642      	mov	r2, r8
 8006446:	0019      	movs	r1, r3
 8006448:	0030      	movs	r0, r6
 800644a:	4699      	mov	r9, r3
 800644c:	f00c ffc2 	bl	80133d4 <strncmp>
 8006450:	2800      	cmp	r0, #0
 8006452:	d000      	beq.n	8006456 <setCommand+0xa6>
 8006454:	e269      	b.n	800692a <setCommand+0x57a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006458:	49a6      	ldr	r1, [pc, #664]	; (80066f4 <setCommand+0x344>)
 800645a:	0032      	movs	r2, r6
 800645c:	0020      	movs	r0, r4
 800645e:	f00c ffb9 	bl	80133d4 <strncmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	d100      	bne.n	8006468 <setCommand+0xb8>
 8006466:	e25d      	b.n	8006924 <setCommand+0x574>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006468:	0032      	movs	r2, r6
 800646a:	49a3      	ldr	r1, [pc, #652]	; (80066f8 <setCommand+0x348>)
 800646c:	0020      	movs	r0, r4
 800646e:	f00c ffb1 	bl	80133d4 <strncmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	d100      	bne.n	8006478 <setCommand+0xc8>
 8006476:	e252      	b.n	800691e <setCommand+0x56e>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006478:	0032      	movs	r2, r6
 800647a:	49a0      	ldr	r1, [pc, #640]	; (80066fc <setCommand+0x34c>)
 800647c:	0020      	movs	r0, r4
 800647e:	f00c ffa9 	bl	80133d4 <strncmp>
 8006482:	2800      	cmp	r0, #0
 8006484:	d100      	bne.n	8006488 <setCommand+0xd8>
 8006486:	e23f      	b.n	8006908 <setCommand+0x558>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006488:	0032      	movs	r2, r6
 800648a:	499d      	ldr	r1, [pc, #628]	; (8006700 <setCommand+0x350>)
 800648c:	0020      	movs	r0, r4
 800648e:	f00c ffa1 	bl	80133d4 <strncmp>
 8006492:	2800      	cmp	r0, #0
 8006494:	d100      	bne.n	8006498 <setCommand+0xe8>
 8006496:	e0fd      	b.n	8006694 <setCommand+0x2e4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006498:	220f      	movs	r2, #15
 800649a:	499a      	ldr	r1, [pc, #616]	; (8006704 <setCommand+0x354>)
 800649c:	0038      	movs	r0, r7
 800649e:	f00c fd52 	bl	8012f46 <memcpy>
 80064a2:	e7b8      	b.n	8006416 <setCommand+0x66>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064a4:	aa0a      	add	r2, sp, #40	; 0x28
 80064a6:	2102      	movs	r1, #2
 80064a8:	0020      	movs	r0, r4
 80064aa:	f007 faad 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064ae:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064b0:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064b2:	2103      	movs	r1, #3
 80064b4:	0020      	movs	r0, r4
 80064b6:	f007 faa7 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ba:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064bc:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064be:	2104      	movs	r1, #4
 80064c0:	0020      	movs	r0, r4
 80064c2:	f007 faa1 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064c6:	aa0d      	add	r2, sp, #52	; 0x34
 80064c8:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ca:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064cc:	0020      	movs	r0, r4
 80064ce:	f007 fa9b 	bl	800da08 <FreeRTOS_CLIGetParameter>
 80064d2:	64a8      	str	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064d4:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80064d6:	f00c fa70 	bl	80129ba <atoi>
 80064da:	b2c3      	uxtb	r3, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064dc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064de:	469b      	mov	fp, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e0:	f00c fa6b 	bl	80129ba <atoi>
 80064e4:	b283      	uxth	r3, r0
 80064e6:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80064ea:	2206      	movs	r2, #6
 80064ec:	4986      	ldr	r1, [pc, #536]	; (8006708 <setCommand+0x358>)
 80064ee:	0018      	movs	r0, r3
 80064f0:	4698      	mov	r8, r3
 80064f2:	f00c ff6f 	bl	80133d4 <strncmp>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d100      	bne.n	80064fc <setCommand+0x14c>
 80064fa:	e201      	b.n	8006900 <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80064fc:	2207      	movs	r2, #7
 80064fe:	4983      	ldr	r1, [pc, #524]	; (800670c <setCommand+0x35c>)
 8006500:	4640      	mov	r0, r8
 8006502:	f00c ff67 	bl	80133d4 <strncmp>
 8006506:	4b82      	ldr	r3, [pc, #520]	; (8006710 <setCommand+0x360>)
 8006508:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	0019      	movs	r1, r3
 800650e:	2207      	movs	r2, #7
 8006510:	0020      	movs	r0, r4
 8006512:	469a      	mov	sl, r3
 8006514:	f00c ff5e 	bl	80133d4 <strncmp>
 8006518:	9b06      	ldr	r3, [sp, #24]
 800651a:	9007      	str	r0, [sp, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d100      	bne.n	8006522 <setCommand+0x172>
 8006520:	e1ec      	b.n	80068fc <setCommand+0x54c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006522:	2209      	movs	r2, #9
 8006524:	497b      	ldr	r1, [pc, #492]	; (8006714 <setCommand+0x364>)
 8006526:	4640      	mov	r0, r8
 8006528:	f00c ff54 	bl	80133d4 <strncmp>
 800652c:	2800      	cmp	r0, #0
 800652e:	d100      	bne.n	8006532 <setCommand+0x182>
 8006530:	e1e2      	b.n	80068f8 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006532:	2208      	movs	r2, #8
 8006534:	4978      	ldr	r1, [pc, #480]	; (8006718 <setCommand+0x368>)
 8006536:	4640      	mov	r0, r8
 8006538:	f00c ff4c 	bl	80133d4 <strncmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	d100      	bne.n	8006542 <setCommand+0x192>
 8006540:	e1d8      	b.n	80068f4 <setCommand+0x544>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006542:	2206      	movs	r2, #6
 8006544:	4975      	ldr	r1, [pc, #468]	; (800671c <setCommand+0x36c>)
 8006546:	4640      	mov	r0, r8
 8006548:	f00c ff44 	bl	80133d4 <strncmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	d100      	bne.n	8006552 <setCommand+0x1a2>
 8006550:	e1ce      	b.n	80068f0 <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006552:	2208      	movs	r2, #8
 8006554:	4972      	ldr	r1, [pc, #456]	; (8006720 <setCommand+0x370>)
 8006556:	4640      	mov	r0, r8
 8006558:	f00c ff3c 	bl	80133d4 <strncmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	d100      	bne.n	8006562 <setCommand+0x1b2>
 8006560:	e1c4      	b.n	80068ec <setCommand+0x53c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006562:	2206      	movs	r2, #6
 8006564:	496f      	ldr	r1, [pc, #444]	; (8006724 <setCommand+0x374>)
 8006566:	4640      	mov	r0, r8
 8006568:	f00c ff34 	bl	80133d4 <strncmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	d000      	beq.n	8006572 <setCommand+0x1c2>
 8006570:	e0ea      	b.n	8006748 <setCommand+0x398>
			temp81 =SUNDAY;
 8006572:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006574:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006576:	2207      	movs	r2, #7
 8006578:	4651      	mov	r1, sl
 800657a:	0020      	movs	r0, r4
 800657c:	f00c ff2a 	bl	80133d4 <strncmp>
 8006580:	2800      	cmp	r0, #0
 8006582:	d000      	beq.n	8006586 <setCommand+0x1d6>
 8006584:	e098      	b.n	80066b8 <setCommand+0x308>
			temp82 =JANUARY;
 8006586:	2401      	movs	r4, #1
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006588:	465b      	mov	r3, fp
 800658a:	3b01      	subs	r3, #1
 800658c:	2b1e      	cmp	r3, #30
 800658e:	d883      	bhi.n	8006498 <setCommand+0xe8>
 8006590:	4b65      	ldr	r3, [pc, #404]	; (8006728 <setCommand+0x378>)
 8006592:	444b      	add	r3, r9
 8006594:	2b64      	cmp	r3, #100	; 0x64
 8006596:	d900      	bls.n	800659a <setCommand+0x1ea>
 8006598:	e77e      	b.n	8006498 <setCommand+0xe8>
				GetTimeDate();
 800659a:	f006 fdb7 	bl	800d10c <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 800659e:	220c      	movs	r2, #12
 80065a0:	4b62      	ldr	r3, [pc, #392]	; (800672c <setCommand+0x37c>)
 80065a2:	4659      	mov	r1, fp
 80065a4:	569a      	ldrsb	r2, [r3, r2]
 80065a6:	0020      	movs	r0, r4
 80065a8:	9204      	str	r2, [sp, #16]
 80065aa:	7cda      	ldrb	r2, [r3, #19]
 80065ac:	9203      	str	r2, [sp, #12]
 80065ae:	7c9a      	ldrb	r2, [r3, #18]
 80065b0:	9202      	str	r2, [sp, #8]
 80065b2:	7c5a      	ldrb	r2, [r3, #17]
 80065b4:	9201      	str	r2, [sp, #4]
 80065b6:	7c1b      	ldrb	r3, [r3, #16]
 80065b8:	464a      	mov	r2, r9
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	0033      	movs	r3, r6
 80065be:	f006 fd4b 	bl	800d058 <BOS_CalendarConfig>
 80065c2:	4680      	mov	r8, r0
	if(result == BOS_OK){
 80065c4:	4643      	mov	r3, r8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06c      	beq.n	80066a4 <setCommand+0x2f4>
	else if(result == BOS_ERR_WrongParam)
 80065ca:	4643      	mov	r3, r8
 80065cc:	2b67      	cmp	r3, #103	; 0x67
 80065ce:	d100      	bne.n	80065d2 <setCommand+0x222>
 80065d0:	e71c      	b.n	800640c <setCommand+0x5c>
	else if(result == BOS_ERR_WrongValue)
 80065d2:	2b68      	cmp	r3, #104	; 0x68
 80065d4:	d000      	beq.n	80065d8 <setCommand+0x228>
 80065d6:	e71e      	b.n	8006416 <setCommand+0x66>
 80065d8:	e75e      	b.n	8006498 <setCommand+0xe8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065da:	aa0a      	add	r2, sp, #40	; 0x28
 80065dc:	2102      	movs	r1, #2
 80065de:	0020      	movs	r0, r4
 80065e0:	f007 fa12 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065e4:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065e6:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065e8:	2103      	movs	r1, #3
 80065ea:	0020      	movs	r0, r4
 80065ec:	f007 fa0c 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065f0:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f2:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065f4:	2104      	movs	r1, #4
 80065f6:	0020      	movs	r0, r4
 80065f8:	f007 fa06 	bl	800da08 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80065fc:	aa0d      	add	r2, sp, #52	; 0x34
 80065fe:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006600:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006602:	0020      	movs	r0, r4
 8006604:	f007 fa00 	bl	800da08 <FreeRTOS_CLIGetParameter>
 8006608:	64a8      	str	r0, [r5, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800660a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800660c:	f00c f9d5 	bl	80129ba <atoi>
 8006610:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006612:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006614:	f00c f9d1 	bl	80129ba <atoi>
 8006618:	b2c3      	uxtb	r3, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800661a:	6c68      	ldr	r0, [r5, #68]	; 0x44
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800661c:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800661e:	f00c f9cc 	bl	80129ba <atoi>
		if(pcParameterString5 != NULL){
 8006622:	6cac      	ldr	r4, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006624:	b2c3      	uxtb	r3, r0
 8006626:	469a      	mov	sl, r3
		if(pcParameterString5 != NULL){
 8006628:	2c00      	cmp	r4, #0
 800662a:	d010      	beq.n	800664e <setCommand+0x29e>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800662c:	2202      	movs	r2, #2
 800662e:	4940      	ldr	r1, [pc, #256]	; (8006730 <setCommand+0x380>)
 8006630:	0020      	movs	r0, r4
 8006632:	f00c fecf 	bl	80133d4 <strncmp>
 8006636:	2800      	cmp	r0, #0
 8006638:	d029      	beq.n	800668e <setCommand+0x2de>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800663a:	2202      	movs	r2, #2
 800663c:	493d      	ldr	r1, [pc, #244]	; (8006734 <setCommand+0x384>)
 800663e:	0020      	movs	r0, r4
 8006640:	f00c fec8 	bl	80133d4 <strncmp>
 8006644:	2800      	cmp	r0, #0
 8006646:	d000      	beq.n	800664a <setCommand+0x29a>
 8006648:	e726      	b.n	8006498 <setCommand+0xe8>
				temp84 =RTC_PM;
 800664a:	2302      	movs	r3, #2
 800664c:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800664e:	2e17      	cmp	r6, #23
 8006650:	d900      	bls.n	8006654 <setCommand+0x2a4>
 8006652:	e721      	b.n	8006498 <setCommand+0xe8>
 8006654:	464b      	mov	r3, r9
 8006656:	2b3b      	cmp	r3, #59	; 0x3b
 8006658:	d900      	bls.n	800665c <setCommand+0x2ac>
 800665a:	e71d      	b.n	8006498 <setCommand+0xe8>
 800665c:	4653      	mov	r3, sl
 800665e:	2b3b      	cmp	r3, #59	; 0x3b
 8006660:	d900      	bls.n	8006664 <setCommand+0x2b4>
 8006662:	e719      	b.n	8006498 <setCommand+0xe8>
				GetTimeDate();
 8006664:	f006 fd52 	bl	800d10c <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006668:	4c30      	ldr	r4, [pc, #192]	; (800672c <setCommand+0x37c>)
 800666a:	7d23      	ldrb	r3, [r4, #20]
 800666c:	8b22      	ldrh	r2, [r4, #24]
 800666e:	7d61      	ldrb	r1, [r4, #21]
 8006670:	7da0      	ldrb	r0, [r4, #22]
 8006672:	7b24      	ldrb	r4, [r4, #12]
 8006674:	9602      	str	r6, [sp, #8]
 8006676:	b264      	sxtb	r4, r4
 8006678:	9404      	str	r4, [sp, #16]
 800667a:	4644      	mov	r4, r8
 800667c:	9403      	str	r4, [sp, #12]
 800667e:	464c      	mov	r4, r9
 8006680:	9401      	str	r4, [sp, #4]
 8006682:	4654      	mov	r4, sl
 8006684:	9400      	str	r4, [sp, #0]
 8006686:	f006 fce7 	bl	800d058 <BOS_CalendarConfig>
 800668a:	4680      	mov	r8, r0
 800668c:	e79a      	b.n	80065c4 <setCommand+0x214>
				temp84 =RTC_AM;
 800668e:	2301      	movs	r3, #1
 8006690:	4698      	mov	r8, r3
 8006692:	e7dc      	b.n	800664e <setCommand+0x29e>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006694:	4b28      	ldr	r3, [pc, #160]	; (8006738 <setCommand+0x388>)
 8006696:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006698:	208a      	movs	r0, #138	; 0x8a
 800669a:	7859      	ldrb	r1, [r3, #1]
 800669c:	0040      	lsls	r0, r0, #1
 800669e:	0209      	lsls	r1, r1, #8
 80066a0:	f001 f8fa 	bl	8007898 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066a4:	2300      	movs	r3, #0
 80066a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066aa:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066ac:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80066b0:	4922      	ldr	r1, [pc, #136]	; (800673c <setCommand+0x38c>)
 80066b2:	f00c fe4b 	bl	801334c <sprintf>
	return pdFALSE;
 80066b6:	e6ae      	b.n	8006416 <setCommand+0x66>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066b8:	2202      	movs	r2, #2
 80066ba:	4921      	ldr	r1, [pc, #132]	; (8006740 <setCommand+0x390>)
 80066bc:	0020      	movs	r0, r4
 80066be:	f00c fe89 	bl	80133d4 <strncmp>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d100      	bne.n	80066c8 <setCommand+0x318>
 80066c6:	e75e      	b.n	8006586 <setCommand+0x1d6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80066c8:	2208      	movs	r2, #8
 80066ca:	491e      	ldr	r1, [pc, #120]	; (8006744 <setCommand+0x394>)
 80066cc:	0020      	movs	r0, r4
 80066ce:	f00c fe81 	bl	80133d4 <strncmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d000      	beq.n	80066d8 <setCommand+0x328>
 80066d6:	e0fe      	b.n	80068d6 <setCommand+0x526>
			temp82 =FEBRUARY;
 80066d8:	2402      	movs	r4, #2
 80066da:	e755      	b.n	8006588 <setCommand+0x1d8>
 80066dc:	20001250 	.word	0x20001250
 80066e0:	08018d54 	.word	0x08018d54
 80066e4:	08018fcc 	.word	0x08018fcc
 80066e8:	08018fdc 	.word	0x08018fdc
 80066ec:	08018ddc 	.word	0x08018ddc
 80066f0:	08018d5c 	.word	0x08018d5c
 80066f4:	0801813c 	.word	0x0801813c
 80066f8:	08018ec8 	.word	0x08018ec8
 80066fc:	08018ed0 	.word	0x08018ed0
 8006700:	08018d6c 	.word	0x08018d6c
 8006704:	08018e78 	.word	0x08018e78
 8006708:	08018fe4 	.word	0x08018fe4
 800670c:	08018fec 	.word	0x08018fec
 8006710:	08018ff4 	.word	0x08018ff4
 8006714:	08018ffc 	.word	0x08018ffc
 8006718:	08019008 	.word	0x08019008
 800671c:	08019014 	.word	0x08019014
 8006720:	0801901c 	.word	0x0801901c
 8006724:	08019028 	.word	0x08019028
 8006728:	fffff830 	.word	0xfffff830
 800672c:	20006db4 	.word	0x20006db4
 8006730:	08018fd4 	.word	0x08018fd4
 8006734:	08018fd8 	.word	0x08018fd8
 8006738:	20006d34 	.word	0x20006d34
 800673c:	08018ed4 	.word	0x08018ed4
 8006740:	080190b0 	.word	0x080190b0
 8006744:	080190b4 	.word	0x080190b4
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d100      	bne.n	8006750 <setCommand+0x3a0>
 800674e:	e6a3      	b.n	8006498 <setCommand+0xe8>
 8006750:	2202      	movs	r2, #2
 8006752:	49c7      	ldr	r1, [pc, #796]	; (8006a70 <setCommand+0x6c0>)
 8006754:	0020      	movs	r0, r4
 8006756:	f00c fe3d 	bl	80133d4 <strncmp>
 800675a:	2800      	cmp	r0, #0
 800675c:	d100      	bne.n	8006760 <setCommand+0x3b0>
 800675e:	e69b      	b.n	8006498 <setCommand+0xe8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006760:	2208      	movs	r2, #8
 8006762:	49c4      	ldr	r1, [pc, #784]	; (8006a74 <setCommand+0x6c4>)
 8006764:	0020      	movs	r0, r4
 8006766:	f00c fe35 	bl	80133d4 <strncmp>
 800676a:	2800      	cmp	r0, #0
 800676c:	d100      	bne.n	8006770 <setCommand+0x3c0>
 800676e:	e693      	b.n	8006498 <setCommand+0xe8>
 8006770:	2202      	movs	r2, #2
 8006772:	49c1      	ldr	r1, [pc, #772]	; (8006a78 <setCommand+0x6c8>)
 8006774:	0020      	movs	r0, r4
 8006776:	f00c fe2d 	bl	80133d4 <strncmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	d100      	bne.n	8006780 <setCommand+0x3d0>
 800677e:	e68b      	b.n	8006498 <setCommand+0xe8>
			result =BOS_ERR_WrongValue;
 8006780:	2368      	movs	r3, #104	; 0x68
 8006782:	4698      	mov	r8, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006784:	2205      	movs	r2, #5
 8006786:	49bd      	ldr	r1, [pc, #756]	; (8006a7c <setCommand+0x6cc>)
 8006788:	0020      	movs	r0, r4
 800678a:	f00c fe23 	bl	80133d4 <strncmp>
 800678e:	2800      	cmp	r0, #0
 8006790:	d100      	bne.n	8006794 <setCommand+0x3e4>
 8006792:	e09e      	b.n	80068d2 <setCommand+0x522>
 8006794:	2202      	movs	r2, #2
 8006796:	49ba      	ldr	r1, [pc, #744]	; (8006a80 <setCommand+0x6d0>)
 8006798:	0020      	movs	r0, r4
 800679a:	f00c fe1b 	bl	80133d4 <strncmp>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d100      	bne.n	80067a4 <setCommand+0x3f4>
 80067a2:	e096      	b.n	80068d2 <setCommand+0x522>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80067a4:	2205      	movs	r2, #5
 80067a6:	49b7      	ldr	r1, [pc, #732]	; (8006a84 <setCommand+0x6d4>)
 80067a8:	0020      	movs	r0, r4
 80067aa:	f00c fe13 	bl	80133d4 <strncmp>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d100      	bne.n	80067b4 <setCommand+0x404>
 80067b2:	e08c      	b.n	80068ce <setCommand+0x51e>
 80067b4:	2202      	movs	r2, #2
 80067b6:	49b4      	ldr	r1, [pc, #720]	; (8006a88 <setCommand+0x6d8>)
 80067b8:	0020      	movs	r0, r4
 80067ba:	f00c fe0b 	bl	80133d4 <strncmp>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d100      	bne.n	80067c4 <setCommand+0x414>
 80067c2:	e084      	b.n	80068ce <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80067c4:	2203      	movs	r2, #3
 80067c6:	49b1      	ldr	r1, [pc, #708]	; (8006a8c <setCommand+0x6dc>)
 80067c8:	0020      	movs	r0, r4
 80067ca:	f00c fe03 	bl	80133d4 <strncmp>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d07b      	beq.n	80068ca <setCommand+0x51a>
 80067d2:	2202      	movs	r2, #2
 80067d4:	49ae      	ldr	r1, [pc, #696]	; (8006a90 <setCommand+0x6e0>)
 80067d6:	0020      	movs	r0, r4
 80067d8:	f00c fdfc 	bl	80133d4 <strncmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d074      	beq.n	80068ca <setCommand+0x51a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067e0:	2204      	movs	r2, #4
 80067e2:	49ac      	ldr	r1, [pc, #688]	; (8006a94 <setCommand+0x6e4>)
 80067e4:	0020      	movs	r0, r4
 80067e6:	f00c fdf5 	bl	80133d4 <strncmp>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d06b      	beq.n	80068c6 <setCommand+0x516>
 80067ee:	2202      	movs	r2, #2
 80067f0:	49a9      	ldr	r1, [pc, #676]	; (8006a98 <setCommand+0x6e8>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00c fdee 	bl	80133d4 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d064      	beq.n	80068c6 <setCommand+0x516>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80067fc:	2204      	movs	r2, #4
 80067fe:	49a7      	ldr	r1, [pc, #668]	; (8006a9c <setCommand+0x6ec>)
 8006800:	0020      	movs	r0, r4
 8006802:	f00c fde7 	bl	80133d4 <strncmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	d05b      	beq.n	80068c2 <setCommand+0x512>
 800680a:	2202      	movs	r2, #2
 800680c:	49a4      	ldr	r1, [pc, #656]	; (8006aa0 <setCommand+0x6f0>)
 800680e:	0020      	movs	r0, r4
 8006810:	f00c fde0 	bl	80133d4 <strncmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	d054      	beq.n	80068c2 <setCommand+0x512>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006818:	2205      	movs	r2, #5
 800681a:	49a2      	ldr	r1, [pc, #648]	; (8006aa4 <setCommand+0x6f4>)
 800681c:	0020      	movs	r0, r4
 800681e:	f00c fdd9 	bl	80133d4 <strncmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	d04b      	beq.n	80068be <setCommand+0x50e>
 8006826:	2202      	movs	r2, #2
 8006828:	499f      	ldr	r1, [pc, #636]	; (8006aa8 <setCommand+0x6f8>)
 800682a:	0020      	movs	r0, r4
 800682c:	f00c fdd2 	bl	80133d4 <strncmp>
 8006830:	2800      	cmp	r0, #0
 8006832:	d044      	beq.n	80068be <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006834:	2209      	movs	r2, #9
 8006836:	499d      	ldr	r1, [pc, #628]	; (8006aac <setCommand+0x6fc>)
 8006838:	0020      	movs	r0, r4
 800683a:	f00c fdcb 	bl	80133d4 <strncmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	d03b      	beq.n	80068ba <setCommand+0x50a>
 8006842:	2202      	movs	r2, #2
 8006844:	499a      	ldr	r1, [pc, #616]	; (8006ab0 <setCommand+0x700>)
 8006846:	0020      	movs	r0, r4
 8006848:	f00c fdc4 	bl	80133d4 <strncmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	d034      	beq.n	80068ba <setCommand+0x50a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006850:	2207      	movs	r2, #7
 8006852:	4998      	ldr	r1, [pc, #608]	; (8006ab4 <setCommand+0x704>)
 8006854:	0020      	movs	r0, r4
 8006856:	f00c fdbd 	bl	80133d4 <strncmp>
 800685a:	2800      	cmp	r0, #0
 800685c:	d02b      	beq.n	80068b6 <setCommand+0x506>
 800685e:	2202      	movs	r2, #2
 8006860:	4995      	ldr	r1, [pc, #596]	; (8006ab8 <setCommand+0x708>)
 8006862:	0020      	movs	r0, r4
 8006864:	f00c fdb6 	bl	80133d4 <strncmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	d024      	beq.n	80068b6 <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 800686c:	2208      	movs	r2, #8
 800686e:	4993      	ldr	r1, [pc, #588]	; (8006abc <setCommand+0x70c>)
 8006870:	0020      	movs	r0, r4
 8006872:	f00c fdaf 	bl	80133d4 <strncmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	d01b      	beq.n	80068b2 <setCommand+0x502>
 800687a:	2202      	movs	r2, #2
 800687c:	4990      	ldr	r1, [pc, #576]	; (8006ac0 <setCommand+0x710>)
 800687e:	0020      	movs	r0, r4
 8006880:	f00c fda8 	bl	80133d4 <strncmp>
 8006884:	2800      	cmp	r0, #0
 8006886:	d014      	beq.n	80068b2 <setCommand+0x502>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006888:	2208      	movs	r2, #8
 800688a:	498e      	ldr	r1, [pc, #568]	; (8006ac4 <setCommand+0x714>)
 800688c:	0020      	movs	r0, r4
 800688e:	f00c fda1 	bl	80133d4 <strncmp>
 8006892:	2800      	cmp	r0, #0
 8006894:	d007      	beq.n	80068a6 <setCommand+0x4f6>
 8006896:	2202      	movs	r2, #2
 8006898:	498b      	ldr	r1, [pc, #556]	; (8006ac8 <setCommand+0x718>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00c fd9a 	bl	80133d4 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d000      	beq.n	80068a6 <setCommand+0x4f6>
 80068a4:	e5f8      	b.n	8006498 <setCommand+0xe8>
			temp82 =DECEMBER;
 80068a6:	240c      	movs	r4, #12
		if(result == BOS_OK){
 80068a8:	4643      	mov	r3, r8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d000      	beq.n	80068b0 <setCommand+0x500>
 80068ae:	e68c      	b.n	80065ca <setCommand+0x21a>
 80068b0:	e66a      	b.n	8006588 <setCommand+0x1d8>
			temp82 =NOVEMBER;
 80068b2:	240b      	movs	r4, #11
 80068b4:	e7f8      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =OCTOBER;
 80068b6:	240a      	movs	r4, #10
 80068b8:	e7f6      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =SEPTEMBER;
 80068ba:	2409      	movs	r4, #9
 80068bc:	e7f4      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =AUGUST;
 80068be:	2408      	movs	r4, #8
 80068c0:	e7f2      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =JULY;
 80068c2:	2407      	movs	r4, #7
 80068c4:	e7f0      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =JUNE;
 80068c6:	2406      	movs	r4, #6
 80068c8:	e7ee      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =MAY;
 80068ca:	2405      	movs	r4, #5
 80068cc:	e7ec      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =APRIL;
 80068ce:	2404      	movs	r4, #4
 80068d0:	e7ea      	b.n	80068a8 <setCommand+0x4f8>
			temp82 =MARCH;
 80068d2:	2403      	movs	r4, #3
 80068d4:	e7e8      	b.n	80068a8 <setCommand+0x4f8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068d6:	2202      	movs	r2, #2
 80068d8:	4967      	ldr	r1, [pc, #412]	; (8006a78 <setCommand+0x6c8>)
 80068da:	0020      	movs	r0, r4
 80068dc:	f00c fd7a 	bl	80133d4 <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x536>
 80068e4:	e6f8      	b.n	80066d8 <setCommand+0x328>
 80068e6:	2300      	movs	r3, #0
 80068e8:	4698      	mov	r8, r3
 80068ea:	e74b      	b.n	8006784 <setCommand+0x3d4>
			temp81 =SATURDAY;
 80068ec:	2606      	movs	r6, #6
 80068ee:	e641      	b.n	8006574 <setCommand+0x1c4>
			temp81 =FRIDAY;
 80068f0:	2605      	movs	r6, #5
 80068f2:	e63f      	b.n	8006574 <setCommand+0x1c4>
			temp81 =THURSDAY;
 80068f4:	2604      	movs	r6, #4
 80068f6:	e63d      	b.n	8006574 <setCommand+0x1c4>
			temp81 =WEDNESDAY;
 80068f8:	2603      	movs	r6, #3
 80068fa:	e63b      	b.n	8006574 <setCommand+0x1c4>
			temp81 =TUESDAY;
 80068fc:	2602      	movs	r6, #2
 80068fe:	e639      	b.n	8006574 <setCommand+0x1c4>
 8006900:	4b72      	ldr	r3, [pc, #456]	; (8006acc <setCommand+0x71c>)
			temp81 =MONDAY;
 8006902:	2601      	movs	r6, #1
 8006904:	469a      	mov	sl, r3
 8006906:	e635      	b.n	8006574 <setCommand+0x1c4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006908:	2140      	movs	r1, #64	; 0x40
 800690a:	4b71      	ldr	r3, [pc, #452]	; (8006ad0 <setCommand+0x720>)
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800690c:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	3015      	adds	r0, #21
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4319      	orrs	r1, r3
 8006916:	30ff      	adds	r0, #255	; 0xff
 8006918:	f000 ffbe 	bl	8007898 <EE_WriteVariable>
 800691c:	e6c2      	b.n	80066a4 <setCommand+0x2f4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800691e:	4b6c      	ldr	r3, [pc, #432]	; (8006ad0 <setCommand+0x720>)
 8006920:	2120      	movs	r1, #32
 8006922:	e7f3      	b.n	800690c <setCommand+0x55c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <setCommand+0x720>)
 8006926:	2160      	movs	r1, #96	; 0x60
 8006928:	e7f0      	b.n	800690c <setCommand+0x55c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800692a:	4642      	mov	r2, r8
 800692c:	4969      	ldr	r1, [pc, #420]	; (8006ad4 <setCommand+0x724>)
 800692e:	0030      	movs	r0, r6
 8006930:	f00c fd50 	bl	80133d4 <strncmp>
 8006934:	2800      	cmp	r0, #0
 8006936:	d127      	bne.n	8006988 <setCommand+0x5d8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006938:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800693a:	4967      	ldr	r1, [pc, #412]	; (8006ad8 <setCommand+0x728>)
 800693c:	0032      	movs	r2, r6
 800693e:	0020      	movs	r0, r4
 8006940:	f00c fd48 	bl	80133d4 <strncmp>
 8006944:	2800      	cmp	r0, #0
 8006946:	d100      	bne.n	800694a <setCommand+0x59a>
 8006948:	e10b      	b.n	8006b62 <setCommand+0x7b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800694a:	0032      	movs	r2, r6
 800694c:	4963      	ldr	r1, [pc, #396]	; (8006adc <setCommand+0x72c>)
 800694e:	0020      	movs	r0, r4
 8006950:	f00c fd40 	bl	80133d4 <strncmp>
 8006954:	2800      	cmp	r0, #0
 8006956:	d100      	bne.n	800695a <setCommand+0x5aa>
 8006958:	e0f7      	b.n	8006b4a <setCommand+0x79a>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800695a:	0032      	movs	r2, r6
 800695c:	4649      	mov	r1, r9
 800695e:	0020      	movs	r0, r4
 8006960:	f00c fd38 	bl	80133d4 <strncmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	d048      	beq.n	80069fa <setCommand+0x64a>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006968:	0032      	movs	r2, r6
 800696a:	495d      	ldr	r1, [pc, #372]	; (8006ae0 <setCommand+0x730>)
 800696c:	0020      	movs	r0, r4
 800696e:	f00c fd31 	bl	80133d4 <strncmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	d000      	beq.n	8006978 <setCommand+0x5c8>
 8006976:	e58f      	b.n	8006498 <setCommand+0xe8>
				BOSMessaging.trace =TRACE_NONE;
 8006978:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <setCommand+0x720>)
 800697a:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800697c:	3015      	adds	r0, #21
 800697e:	7819      	ldrb	r1, [r3, #0]
 8006980:	30ff      	adds	r0, #255	; 0xff
 8006982:	f000 ff89 	bl	8007898 <EE_WriteVariable>
 8006986:	e68d      	b.n	80066a4 <setCommand+0x2f4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006988:	4642      	mov	r2, r8
 800698a:	4956      	ldr	r1, [pc, #344]	; (8006ae4 <setCommand+0x734>)
 800698c:	0030      	movs	r0, r6
 800698e:	f00c fd21 	bl	80133d4 <strncmp>
 8006992:	4681      	mov	r9, r0
 8006994:	2800      	cmp	r0, #0
 8006996:	d100      	bne.n	800699a <setCommand+0x5ea>
 8006998:	e0b0      	b.n	8006afc <setCommand+0x74c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800699a:	4642      	mov	r2, r8
 800699c:	4952      	ldr	r1, [pc, #328]	; (8006ae8 <setCommand+0x738>)
 800699e:	0030      	movs	r0, r6
 80069a0:	f00c fd18 	bl	80133d4 <strncmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d055      	beq.n	8006a54 <setCommand+0x6a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069a8:	4642      	mov	r2, r8
 80069aa:	4950      	ldr	r1, [pc, #320]	; (8006aec <setCommand+0x73c>)
 80069ac:	0030      	movs	r0, r6
 80069ae:	f00c fd11 	bl	80133d4 <strncmp>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d040      	beq.n	8006a38 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069b6:	4642      	mov	r2, r8
 80069b8:	494d      	ldr	r1, [pc, #308]	; (8006af0 <setCommand+0x740>)
 80069ba:	0030      	movs	r0, r6
 80069bc:	f00c fd0a 	bl	80133d4 <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d026      	beq.n	8006a12 <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80069c4:	4642      	mov	r2, r8
 80069c6:	494b      	ldr	r1, [pc, #300]	; (8006af4 <setCommand+0x744>)
 80069c8:	0030      	movs	r0, r6
 80069ca:	f00c fd03 	bl	80133d4 <strncmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d000      	beq.n	80069d4 <setCommand+0x624>
 80069d2:	e51b      	b.n	800640c <setCommand+0x5c>
			temp16 =atoi((const char* )pcParameterString2);
 80069d4:	0020      	movs	r0, r4
 80069d6:	f00b fff0 	bl	80129ba <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069da:	1e43      	subs	r3, r0, #1
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2bfe      	cmp	r3, #254	; 0xfe
 80069e0:	d900      	bls.n	80069e4 <setCommand+0x634>
 80069e2:	e559      	b.n	8006498 <setCommand+0xe8>
				BOS.buttons.maxInterClickTime =temp16;
 80069e4:	4b44      	ldr	r3, [pc, #272]	; (8006af8 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069e6:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80069e8:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069ea:	0200      	lsls	r0, r0, #8
 80069ec:	4301      	orrs	r1, r0
 80069ee:	2018      	movs	r0, #24
 80069f0:	b289      	uxth	r1, r1
 80069f2:	30ff      	adds	r0, #255	; 0xff
 80069f4:	f000 ff50 	bl	8007898 <EE_WriteVariable>
 80069f8:	e654      	b.n	80066a4 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_RESPONSE;
 80069fa:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069fc:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80069fe:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <setCommand+0x720>)
 8006a00:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	0089      	lsls	r1, r1, #2
 8006a06:	3015      	adds	r0, #21
 8006a08:	4319      	orrs	r1, r3
 8006a0a:	30ff      	adds	r0, #255	; 0xff
 8006a0c:	f000 ff44 	bl	8007898 <EE_WriteVariable>
 8006a10:	e648      	b.n	80066a4 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a12:	0020      	movs	r0, r4
 8006a14:	f00b ffd1 	bl	80129ba <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a18:	1e43      	subs	r3, r0, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a1e:	d900      	bls.n	8006a22 <setCommand+0x672>
 8006a20:	e53a      	b.n	8006498 <setCommand+0xe8>
				BOS.buttons.minInterClickTime =temp16;
 8006a22:	4b35      	ldr	r3, [pc, #212]	; (8006af8 <setCommand+0x748>)
 8006a24:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a26:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006a28:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a2a:	0209      	lsls	r1, r1, #8
 8006a2c:	4301      	orrs	r1, r0
 8006a2e:	2018      	movs	r0, #24
 8006a30:	30ff      	adds	r0, #255	; 0xff
 8006a32:	f000 ff31 	bl	8007898 <EE_WriteVariable>
 8006a36:	e635      	b.n	80066a4 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a38:	0020      	movs	r0, r4
 8006a3a:	f00b ffbe 	bl	80129ba <atoi>
 8006a3e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d100      	bne.n	8006a46 <setCommand+0x696>
 8006a44:	e528      	b.n	8006498 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a46:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006a48:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a4a:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006a4c:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a4e:	f000 ff23 	bl	8007898 <EE_WriteVariable>
 8006a52:	e627      	b.n	80066a4 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a54:	0020      	movs	r0, r4
 8006a56:	f00b ffb0 	bl	80129ba <atoi>
 8006a5a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d100      	bne.n	8006a62 <setCommand+0x6b2>
 8006a60:	e51a      	b.n	8006498 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a62:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006a64:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a66:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006a68:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a6a:	f000 ff15 	bl	8007898 <EE_WriteVariable>
 8006a6e:	e619      	b.n	80066a4 <setCommand+0x2f4>
 8006a70:	080190b0 	.word	0x080190b0
 8006a74:	080190b4 	.word	0x080190b4
 8006a78:	080190c0 	.word	0x080190c0
 8006a7c:	08019030 	.word	0x08019030
 8006a80:	08019038 	.word	0x08019038
 8006a84:	0801903c 	.word	0x0801903c
 8006a88:	08019044 	.word	0x08019044
 8006a8c:	08019048 	.word	0x08019048
 8006a90:	0801904c 	.word	0x0801904c
 8006a94:	08019050 	.word	0x08019050
 8006a98:	08019058 	.word	0x08019058
 8006a9c:	0801905c 	.word	0x0801905c
 8006aa0:	08019064 	.word	0x08019064
 8006aa4:	08019068 	.word	0x08019068
 8006aa8:	08019070 	.word	0x08019070
 8006aac:	08019074 	.word	0x08019074
 8006ab0:	08019080 	.word	0x08019080
 8006ab4:	08019084 	.word	0x08019084
 8006ab8:	0801908c 	.word	0x0801908c
 8006abc:	08019090 	.word	0x08019090
 8006ac0:	0801909c 	.word	0x0801909c
 8006ac4:	080190a0 	.word	0x080190a0
 8006ac8:	080190ac 	.word	0x080190ac
 8006acc:	08018ff4 	.word	0x08018ff4
 8006ad0:	20006d34 	.word	0x20006d34
 8006ad4:	08018d74 	.word	0x08018d74
 8006ad8:	0801813c 	.word	0x0801813c
 8006adc:	08018ec8 	.word	0x08018ec8
 8006ae0:	08018d6c 	.word	0x08018d6c
 8006ae4:	08018d7c 	.word	0x08018d7c
 8006ae8:	08018d88 	.word	0x08018d88
 8006aec:	08018d94 	.word	0x08018d94
 8006af0:	08018da4 	.word	0x08018da4
 8006af4:	08018db8 	.word	0x08018db8
 8006af8:	20006db4 	.word	0x20006db4
			temp2 =atoi((const char* )pcParameterString2);
 8006afc:	0020      	movs	r0, r4
 8006afe:	f00b ff5c 	bl	80129ba <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006b02:	23e1      	movs	r3, #225	; 0xe1
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	4298      	cmp	r0, r3
 8006b08:	d900      	bls.n	8006b0c <setCommand+0x75c>
 8006b0a:	e4c5      	b.n	8006498 <setCommand+0xe8>
				BOS.clibaudrate =temp2;
 8006b0c:	4c18      	ldr	r4, [pc, #96]	; (8006b70 <setCommand+0x7c0>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b0e:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006b10:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b12:	208c      	movs	r0, #140	; 0x8c
 8006b14:	0040      	lsls	r0, r0, #1
 8006b16:	f000 febf 	bl	8007898 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006b1a:	201a      	movs	r0, #26
 8006b1c:	68a1      	ldr	r1, [r4, #8]
 8006b1e:	30ff      	adds	r0, #255	; 0xff
 8006b20:	0c09      	lsrs	r1, r1, #16
 8006b22:	f000 feb9 	bl	8007898 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b26:	4649      	mov	r1, r9
 8006b28:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b2c:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b2e:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b32:	4910      	ldr	r1, [pc, #64]	; (8006b74 <setCommand+0x7c4>)
 8006b34:	f00c fc0a 	bl	801334c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006b38:	490f      	ldr	r1, [pc, #60]	; (8006b78 <setCommand+0x7c8>)
 8006b3a:	0038      	movs	r0, r7
 8006b3c:	f00c fc26 	bl	801338c <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006b40:	490e      	ldr	r1, [pc, #56]	; (8006b7c <setCommand+0x7cc>)
 8006b42:	0038      	movs	r0, r7
 8006b44:	f00c fc22 	bl	801338c <strcat>
 8006b48:	e465      	b.n	8006416 <setCommand+0x66>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b4a:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b4c:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b50:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b52:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	3015      	adds	r0, #21
 8006b58:	4319      	orrs	r1, r3
 8006b5a:	30ff      	adds	r0, #255	; 0xff
 8006b5c:	f000 fe9c 	bl	8007898 <EE_WriteVariable>
 8006b60:	e5a0      	b.n	80066a4 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_BOTH;
 8006b62:	2203      	movs	r2, #3
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b66:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006b68:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	e74a      	b.n	8006a04 <setCommand+0x654>
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	20006db4 	.word	0x20006db4
 8006b74:	08018ed4 	.word	0x08018ed4
 8006b78:	08018ee8 	.word	0x08018ee8
 8006b7c:	08018f18 	.word	0x08018f18
 8006b80:	20006d34 	.word	0x20006d34

08006b84 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006b84:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b86:	b530      	push	{r4, r5, lr}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006b8c:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b8e:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	d010      	beq.n	8006bb6 <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b94:	aa01      	add	r2, sp, #4
 8006b96:	2101      	movs	r1, #1
 8006b98:	f006 ff36 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006ba0:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006ba2:	2b70      	cmp	r3, #112	; 0x70
 8006ba4:	d009      	beq.n	8006bba <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006ba6:	0020      	movs	r0, r4
 8006ba8:	f001 fc8a 	bl	80084c0 <RemovePortButton>
	if(result == BOS_OK){
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d009      	beq.n	8006bc4 <removebuttonCommand+0x40>
}
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	b003      	add	sp, #12
 8006bb4:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006bb6:	b672      	cpsid	i
 8006bb8:	e7fe      	b.n	8006bb8 <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f00b ff03 	bl	80129c6 <atol>
 8006bc0:	b2c4      	uxtb	r4, r0
 8006bc2:	e7f0      	b.n	8006ba6 <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bc4:	0023      	movs	r3, r4
 8006bc6:	0022      	movs	r2, r4
 8006bc8:	4902      	ldr	r1, [pc, #8]	; (8006bd4 <removebuttonCommand+0x50>)
 8006bca:	0028      	movs	r0, r5
 8006bcc:	f00c fbbe 	bl	801334c <sprintf>
 8006bd0:	e7ee      	b.n	8006bb0 <removebuttonCommand+0x2c>
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	080190c4 	.word	0x080190c4

08006bd8 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bda:	46ce      	mov	lr, r9
 8006bdc:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bde:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b085      	sub	sp, #20
 8006be4:	1e06      	subs	r6, r0, #0
 8006be6:	4691      	mov	r9, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006bec:	d036      	beq.n	8006c5c <addbuttonCommand+0x84>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bee:	aa02      	add	r2, sp, #8
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4648      	mov	r0, r9
 8006bf4:	f006 ff08 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bf8:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bfa:	4f25      	ldr	r7, [pc, #148]	; (8006c90 <addbuttonCommand+0xb8>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bfc:	001a      	movs	r2, r3
 8006bfe:	4925      	ldr	r1, [pc, #148]	; (8006c94 <addbuttonCommand+0xbc>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c00:	0005      	movs	r5, r0
 8006c02:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c04:	4698      	mov	r8, r3
 8006c06:	f00c fbe5 	bl	80133d4 <strncmp>
		type =MOMENTARY_NO;
 8006c0a:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d00f      	beq.n	8006c30 <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c10:	4642      	mov	r2, r8
 8006c12:	4921      	ldr	r1, [pc, #132]	; (8006c98 <addbuttonCommand+0xc0>)
 8006c14:	0028      	movs	r0, r5
 8006c16:	f00c fbdd 	bl	80133d4 <strncmp>
		type =MOMENTARY_NC;
 8006c1a:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d007      	beq.n	8006c30 <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c20:	4642      	mov	r2, r8
 8006c22:	491e      	ldr	r1, [pc, #120]	; (8006c9c <addbuttonCommand+0xc4>)
 8006c24:	0028      	movs	r0, r5
 8006c26:	f00c fbd5 	bl	80133d4 <strncmp>
		type =ONOFF_NO;
 8006c2a:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d117      	bne.n	8006c60 <addbuttonCommand+0x88>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c30:	aa03      	add	r2, sp, #12
 8006c32:	2102      	movs	r1, #2
 8006c34:	4648      	mov	r0, r9
 8006c36:	f006 fee7 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c3e:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006c40:	2b70      	cmp	r3, #112	; 0x70
 8006c42:	d020      	beq.n	8006c86 <addbuttonCommand+0xae>
	result =AddPortButton(type,port);
 8006c44:	0029      	movs	r1, r5
 8006c46:	0020      	movs	r0, r4
 8006c48:	f001 fbc0 	bl	80083cc <AddPortButton>
	if(result == BOS_OK){
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d010      	beq.n	8006c72 <addbuttonCommand+0x9a>
}
 8006c50:	2000      	movs	r0, #0
 8006c52:	b005      	add	sp, #20
 8006c54:	bc0c      	pop	{r2, r3}
 8006c56:	4690      	mov	r8, r2
 8006c58:	4699      	mov	r9, r3
 8006c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006c5c:	b672      	cpsid	i
 8006c5e:	e7fe      	b.n	8006c5e <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c60:	4642      	mov	r2, r8
 8006c62:	490f      	ldr	r1, [pc, #60]	; (8006ca0 <addbuttonCommand+0xc8>)
 8006c64:	0028      	movs	r0, r5
 8006c66:	f00c fbb5 	bl	80133d4 <strncmp>
		type =ONOFF_NC;
 8006c6a:	4244      	negs	r4, r0
 8006c6c:	4144      	adcs	r4, r0
 8006c6e:	00a4      	lsls	r4, r4, #2
 8006c70:	e7de      	b.n	8006c30 <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c74:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c76:	490b      	ldr	r1, [pc, #44]	; (8006ca4 <addbuttonCommand+0xcc>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c78:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c7a:	9500      	str	r5, [sp, #0]
 8006c7c:	002b      	movs	r3, r5
 8006c7e:	0030      	movs	r0, r6
 8006c80:	f00c fb64 	bl	801334c <sprintf>
 8006c84:	e7e4      	b.n	8006c50 <addbuttonCommand+0x78>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c86:	3001      	adds	r0, #1
 8006c88:	f00b fe9d 	bl	80129c6 <atol>
 8006c8c:	b2c5      	uxtb	r5, r0
 8006c8e:	e7d9      	b.n	8006c44 <addbuttonCommand+0x6c>
 8006c90:	20001250 	.word	0x20001250
 8006c94:	080190ec 	.word	0x080190ec
 8006c98:	080190fc 	.word	0x080190fc
 8006c9c:	0801910c 	.word	0x0801910c
 8006ca0:	08019118 	.word	0x08019118
 8006ca4:	08019124 	.word	0x08019124

08006ca8 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	46de      	mov	lr, fp
 8006cac:	4645      	mov	r5, r8
 8006cae:	4657      	mov	r7, sl
 8006cb0:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cb2:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cb4:	b5e0      	push	{r5, r6, r7, lr}
 8006cb6:	b09b      	sub	sp, #108	; 0x6c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cb8:	af11      	add	r7, sp, #68	; 0x44
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cba:	0004      	movs	r4, r0
 8006cbc:	9009      	str	r0, [sp, #36]	; 0x24
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cbe:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc0:	0015      	movs	r5, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cc2:	0038      	movs	r0, r7
 8006cc4:	220a      	movs	r2, #10
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cca:	930c      	str	r3, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8006cce:	930e      	str	r3, [sp, #56]	; 0x38
 8006cd0:	930f      	str	r3, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8006cd2:	9310      	str	r3, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cd4:	f00c f940 	bl	8012f58 <memset>
 8006cd8:	ab14      	add	r3, sp, #80	; 0x50
 8006cda:	220a      	movs	r2, #10
 8006cdc:	2100      	movs	r1, #0
 8006cde:	0018      	movs	r0, r3
 8006ce0:	4698      	mov	r8, r3
 8006ce2:	f00c f939 	bl	8012f58 <memset>
 8006ce6:	ab17      	add	r3, sp, #92	; 0x5c
 8006ce8:	220a      	movs	r2, #10
 8006cea:	2100      	movs	r1, #0
 8006cec:	0018      	movs	r0, r3
 8006cee:	f00c f933 	bl	8012f58 <memset>
	configASSERT(pcWriteBuffer);
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d100      	bne.n	8006cf8 <scastCommand+0x50>
 8006cf6:	e07d      	b.n	8006df4 <scastCommand+0x14c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cf8:	aa0a      	add	r2, sp, #40	; 0x28
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	0028      	movs	r0, r5
 8006cfe:	f006 fe83 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d02:	2300      	movs	r3, #0
 8006d04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d06:	2600      	movs	r6, #0
	if(pcParameterString1[0] == 'P'){
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d100      	bne.n	8006d0e <scastCommand+0x66>
 8006d0c:	e074      	b.n	8006df8 <scastCommand+0x150>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d10:	2102      	movs	r1, #2
 8006d12:	0028      	movs	r0, r5
 8006d14:	f006 fe78 	bl	800da08 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d1a:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d1c:	0038      	movs	r0, r7
 8006d1e:	f00c fb6a 	bl	80133f6 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d22:	0038      	movs	r0, r7
 8006d24:	f7fd fa5c 	bl	80041e0 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d28:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 8006d2a:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d2c:	2103      	movs	r1, #3
 8006d2e:	0028      	movs	r0, r5
	srcM =(uint8_t )GetID(par1);
 8006d30:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d32:	f006 fe69 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d36:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d38:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006d3a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d3c:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006d3e:	2b70      	cmp	r3, #112	; 0x70
 8006d40:	d06e      	beq.n	8006e20 <scastCommand+0x178>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d42:	aa0d      	add	r2, sp, #52	; 0x34
 8006d44:	2104      	movs	r1, #4
 8006d46:	0028      	movs	r0, r5
 8006d48:	f006 fe5e 	bl	800da08 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d4e:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d50:	4640      	mov	r0, r8
 8006d52:	f00c fb50 	bl	80133f6 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7fd fa42 	bl	80041e0 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d5c:	aa0e      	add	r2, sp, #56	; 0x38
	dstM =(uint8_t )GetID(par2);
 8006d5e:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d60:	2105      	movs	r1, #5
 8006d62:	0028      	movs	r0, r5
	dstM =(uint8_t )GetID(par2);
 8006d64:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d66:	f006 fe4f 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d6c:	492f      	ldr	r1, [pc, #188]	; (8006e2c <scastCommand+0x184>)
 8006d6e:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d70:	4681      	mov	r9, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d72:	469a      	mov	sl, r3
 8006d74:	f00c fb2e 	bl	80133d4 <strncmp>
		direction =FORWARD;
 8006d78:	2400      	movs	r4, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d00f      	beq.n	8006d9e <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d7e:	4652      	mov	r2, sl
 8006d80:	492b      	ldr	r1, [pc, #172]	; (8006e30 <scastCommand+0x188>)
 8006d82:	4648      	mov	r0, r9
 8006d84:	f00c fb26 	bl	80133d4 <strncmp>
		direction =BACKWARD;
 8006d88:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d007      	beq.n	8006d9e <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4928      	ldr	r1, [pc, #160]	; (8006e34 <scastCommand+0x18c>)
 8006d92:	4648      	mov	r0, r9
 8006d94:	f00c fb1e 	bl	80133d4 <strncmp>
		direction =BIDIRECTIONAL;
 8006d98:	4244      	negs	r4, r0
 8006d9a:	4144      	adcs	r4, r0
 8006d9c:	0064      	lsls	r4, r4, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4652      	mov	r2, sl
 8006da2:	a817      	add	r0, sp, #92	; 0x5c
 8006da4:	f00c fb27 	bl	80133f6 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006da8:	aa0f      	add	r2, sp, #60	; 0x3c
 8006daa:	2106      	movs	r1, #6
 8006dac:	0028      	movs	r0, r5
 8006dae:	f006 fe2b 	bl	800da08 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006db2:	f00b fe08 	bl	80129c6 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006db6:	aa10      	add	r2, sp, #64	; 0x40
 8006db8:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dba:	4681      	mov	r9, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dbc:	0028      	movs	r0, r5
 8006dbe:	f006 fe23 	bl	800da08 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dc2:	f00b fe00 	bl	80129c6 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	464b      	mov	r3, r9
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dcc:	0005      	movs	r5, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dce:	9002      	str	r0, [sp, #8]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	9400      	str	r4, [sp, #0]
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	465a      	mov	r2, fp
 8006dd8:	9907      	ldr	r1, [sp, #28]
 8006dda:	0030      	movs	r0, r6
 8006ddc:	f002 fe30 	bl	8009a40 <StartScastDMAStream>
	if(result == BOS_OK){
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d00e      	beq.n	8006e02 <scastCommand+0x15a>
}
 8006de4:	2000      	movs	r0, #0
 8006de6:	b01b      	add	sp, #108	; 0x6c
 8006de8:	bc3c      	pop	{r2, r3, r4, r5}
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	46a2      	mov	sl, r4
 8006df0:	46ab      	mov	fp, r5
 8006df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006df4:	b672      	cpsid	i
 8006df6:	e7fe      	b.n	8006df6 <scastCommand+0x14e>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f00b fde4 	bl	80129c6 <atol>
 8006dfe:	b2c6      	uxtb	r6, r0
 8006e00:	e785      	b.n	8006d0e <scastCommand+0x66>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e02:	464b      	mov	r3, r9
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	4643      	mov	r3, r8
 8006e08:	9302      	str	r3, [sp, #8]
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	9504      	str	r5, [sp, #16]
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	9700      	str	r7, [sp, #0]
 8006e12:	0033      	movs	r3, r6
 8006e14:	aa17      	add	r2, sp, #92	; 0x5c
 8006e16:	4908      	ldr	r1, [pc, #32]	; (8006e38 <scastCommand+0x190>)
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	f00c fa97 	bl	801334c <sprintf>
 8006e1e:	e7e1      	b.n	8006de4 <scastCommand+0x13c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e20:	3001      	adds	r0, #1
 8006e22:	f00b fdd0 	bl	80129c6 <atol>
 8006e26:	b2c3      	uxtb	r3, r0
 8006e28:	469b      	mov	fp, r3
 8006e2a:	e78a      	b.n	8006d42 <scastCommand+0x9a>
 8006e2c:	08019158 	.word	0x08019158
 8006e30:	08019160 	.word	0x08019160
 8006e34:	0801916c 	.word	0x0801916c
 8006e38:	0801917c 	.word	0x0801917c

08006e3c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	0004      	movs	r4, r0
 8006e40:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d041      	beq.n	8006eca <infoCommand+0x8e>
	if(N > 1)
 8006e46:	4d22      	ldr	r5, [pc, #136]	; (8006ed0 <infoCommand+0x94>)
	BOS_Status result =BOS_OK;
 8006e48:	2700      	movs	r7, #0
	if(N > 1)
 8006e4a:	782a      	ldrb	r2, [r5, #0]
 8006e4c:	2a01      	cmp	r2, #1
 8006e4e:	d903      	bls.n	8006e58 <infoCommand+0x1c>
		result =ReadPortsDir();
 8006e50:	f7fd fb1e 	bl	8004490 <ReadPortsDir>
 8006e54:	0007      	movs	r7, r0
 8006e56:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e58:	491e      	ldr	r1, [pc, #120]	; (8006ed4 <infoCommand+0x98>)
 8006e5a:	0020      	movs	r0, r4
 8006e5c:	f00c fa76 	bl	801334c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e60:	2601      	movs	r6, #1
 8006e62:	0020      	movs	r0, r4
 8006e64:	f7f9 f958 	bl	8000118 <strlen>
 8006e68:	4d1b      	ldr	r5, [pc, #108]	; (8006ed8 <infoCommand+0x9c>)
 8006e6a:	4276      	negs	r6, r6
 8006e6c:	b282      	uxth	r2, r0
 8006e6e:	2332      	movs	r3, #50	; 0x32
 8006e70:	7828      	ldrb	r0, [r5, #0]
 8006e72:	0021      	movs	r1, r4
 8006e74:	9600      	str	r6, [sp, #0]
 8006e76:	f006 fb6b 	bl	800d550 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e7a:	2213      	movs	r2, #19
 8006e7c:	4917      	ldr	r1, [pc, #92]	; (8006edc <infoCommand+0xa0>)
 8006e7e:	0020      	movs	r0, r4
 8006e80:	f00c f861 	bl	8012f46 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e84:	7828      	ldrb	r0, [r5, #0]
 8006e86:	2332      	movs	r3, #50	; 0x32
 8006e88:	2212      	movs	r2, #18
 8006e8a:	0021      	movs	r1, r4
 8006e8c:	9600      	str	r6, [sp, #0]
 8006e8e:	f006 fb5f 	bl	800d550 <writePxMutex>
	DisplayTopology(PcPort);
 8006e92:	7828      	ldrb	r0, [r5, #0]
 8006e94:	f7fc fee2 	bl	8003c5c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006e98:	7828      	ldrb	r0, [r5, #0]
 8006e9a:	f7fc ffb1 	bl	8003e00 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e9e:	2f02      	cmp	r7, #2
 8006ea0:	d10b      	bne.n	8006eba <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006ea2:	2244      	movs	r2, #68	; 0x44
 8006ea4:	490e      	ldr	r1, [pc, #56]	; (8006ee0 <infoCommand+0xa4>)
 8006ea6:	0020      	movs	r0, r4
 8006ea8:	f00c f84d 	bl	8012f46 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eac:	7828      	ldrb	r0, [r5, #0]
 8006eae:	2332      	movs	r3, #50	; 0x32
 8006eb0:	9600      	str	r6, [sp, #0]
 8006eb2:	2243      	movs	r2, #67	; 0x43
 8006eb4:	0021      	movs	r1, r4
 8006eb6:	f006 fb4b 	bl	800d550 <writePxMutex>
	sprintf((char* )pcWriteBuffer," ");
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4909      	ldr	r1, [pc, #36]	; (8006ee4 <infoCommand+0xa8>)
 8006ebe:	0020      	movs	r0, r4
 8006ec0:	f00c f841 	bl	8012f46 <memcpy>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	b003      	add	sp, #12
 8006ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006eca:	b672      	cpsid	i
 8006ecc:	e7fe      	b.n	8006ecc <infoCommand+0x90>
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	20000010 	.word	0x20000010
 8006ed4:	08019204 	.word	0x08019204
 8006ed8:	20000c38 	.word	0x20000c38
 8006edc:	08019220 	.word	0x08019220
 8006ee0:	08019234 	.word	0x08019234
 8006ee4:	08018038 	.word	0x08018038

08006ee8 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ee8:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d101      	bne.n	8006ef2 <statusCommand+0xa>
 8006eee:	b672      	cpsid	i
 8006ef0:	e7fe      	b.n	8006ef0 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	f7fc fffe 	bl	8003ef4 <DisplayModuleStatus>
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	bd10      	pop	{r4, pc}

08006efc <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efe:	464e      	mov	r6, r9
 8006f00:	46de      	mov	lr, fp
 8006f02:	4645      	mov	r5, r8
 8006f04:	4657      	mov	r7, sl
 8006f06:	b5e0      	push	{r5, r6, r7, lr}
 8006f08:	b08f      	sub	sp, #60	; 0x3c
	char module[MaxLengthOfAlias + 30] ={0};
 8006f0a:	ae04      	add	r6, sp, #16
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f0c:	0005      	movs	r5, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006f0e:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f10:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006f12:	0030      	movs	r0, r6
 8006f14:	2227      	movs	r2, #39	; 0x27
 8006f16:	f00c f81f 	bl	8012f58 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	a801      	add	r0, sp, #4
 8006f20:	f00c f81a 	bl	8012f58 <memset>
	configASSERT(pcWriteBuffer);
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	d063      	beq.n	8006ff0 <groupCommand+0xf4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f28:	4c54      	ldr	r4, [pc, #336]	; (800707c <groupCommand+0x180>)
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	0022      	movs	r2, r4
 8006f2e:	4648      	mov	r0, r9
 8006f30:	3250      	adds	r2, #80	; 0x50
 8006f32:	f006 fd69 	bl	800da08 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f36:	6d22      	ldr	r2, [r4, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f38:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f3a:	a801      	add	r0, sp, #4
 8006f3c:	f00c fa5b 	bl	80133f6 <strncpy>
 8006f40:	2364      	movs	r3, #100	; 0x64
 8006f42:	4698      	mov	r8, r3
 8006f44:	4f4e      	ldr	r7, [pc, #312]	; (8007080 <groupCommand+0x184>)
 8006f46:	44b8      	add	r8, r7
		if(!strcmp(alias,groupAlias[i])){
 8006f48:	0039      	movs	r1, r7
 8006f4a:	a801      	add	r0, sp, #4
 8006f4c:	f7f9 f8da 	bl	8000104 <strcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d04a      	beq.n	8006fea <groupCommand+0xee>
 8006f54:	370a      	adds	r7, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f56:	45b8      	cmp	r8, r7
 8006f58:	d1f6      	bne.n	8006f48 <groupCommand+0x4c>
	type =1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	469a      	mov	sl, r3
	count =2;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	2754      	movs	r7, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f62:	220a      	movs	r2, #10
 8006f64:	4947      	ldr	r1, [pc, #284]	; (8007084 <groupCommand+0x188>)
 8006f66:	0028      	movs	r0, r5
	count =2;
 8006f68:	55e3      	strb	r3, [r4, r7]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f6a:	f00b ffec 	bl	8012f46 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f6e:	0022      	movs	r2, r4
 8006f70:	2102      	movs	r1, #2
 8006f72:	3258      	adds	r2, #88	; 0x58
 8006f74:	4648      	mov	r0, r9
 8006f76:	f006 fd47 	bl	800da08 <FreeRTOS_CLIGetParameter>
 8006f7a:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d039      	beq.n	8006ff4 <groupCommand+0xf8>
		module[xParameterStringLength] ='\0';
 8006f80:	2300      	movs	r3, #0
 8006f82:	469b      	mov	fp, r3
		if(count > 2)
 8006f84:	3354      	adds	r3, #84	; 0x54
 8006f86:	4698      	mov	r8, r3
 8006f88:	e00f      	b.n	8006faa <groupCommand+0xae>
		strcat((char* )pcWriteBuffer,module);
 8006f8a:	0031      	movs	r1, r6
 8006f8c:	0028      	movs	r0, r5
 8006f8e:	f00c f9fd 	bl	801338c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f92:	0022      	movs	r2, r4
 8006f94:	4643      	mov	r3, r8
 8006f96:	1c79      	adds	r1, r7, #1
 8006f98:	b249      	sxtb	r1, r1
 8006f9a:	3258      	adds	r2, #88	; 0x58
 8006f9c:	4648      	mov	r0, r9
 8006f9e:	54e1      	strb	r1, [r4, r3]
 8006fa0:	f006 fd32 	bl	800da08 <FreeRTOS_CLIGetParameter>
 8006fa4:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d03c      	beq.n	8007024 <groupCommand+0x128>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006faa:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8006fac:	0001      	movs	r1, r0
 8006fae:	003a      	movs	r2, r7
 8006fb0:	0030      	movs	r0, r6
 8006fb2:	f00c fa20 	bl	80133f6 <strncpy>
		module[xParameterStringLength] ='\0';
 8006fb6:	465b      	mov	r3, fp
		modID =GetID(module);
 8006fb8:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006fba:	55f3      	strb	r3, [r6, r7]
		modID =GetID(module);
 8006fbc:	f7fd f910 	bl	80041e0 <GetID>
		if(modID < 0)
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	db49      	blt.n	8007058 <groupCommand+0x15c>
		result =AddModuleToGroup(modID,alias);
 8006fc4:	b2c0      	uxtb	r0, r0
 8006fc6:	a901      	add	r1, sp, #4
 8006fc8:	f7fd f9d4 	bl	8004374 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d133      	bne.n	8007038 <groupCommand+0x13c>
		if(count > 2)
 8006fd0:	4643      	mov	r3, r8
 8006fd2:	56e7      	ldrsb	r7, [r4, r3]
 8006fd4:	2f02      	cmp	r7, #2
 8006fd6:	ddd8      	ble.n	8006f8a <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 8006fd8:	0028      	movs	r0, r5
 8006fda:	f7f9 f89d 	bl	8000118 <strlen>
 8006fde:	2203      	movs	r2, #3
 8006fe0:	1828      	adds	r0, r5, r0
 8006fe2:	4929      	ldr	r1, [pc, #164]	; (8007088 <groupCommand+0x18c>)
 8006fe4:	f00b ffaf 	bl	8012f46 <memcpy>
 8006fe8:	e7cf      	b.n	8006f8a <groupCommand+0x8e>
			type =0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	469a      	mov	sl, r3
 8006fee:	e7b6      	b.n	8006f5e <groupCommand+0x62>
	configASSERT(pcWriteBuffer);
 8006ff0:	b672      	cpsid	i
 8006ff2:	e7fe      	b.n	8006ff2 <groupCommand+0xf6>
	else if(count == 2)
 8006ff4:	57e3      	ldrsb	r3, [r4, r7]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d018      	beq.n	800702c <groupCommand+0x130>
	else if(result == BOS_OK && type){
 8006ffa:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006ffc:	aa01      	add	r2, sp, #4
 8006ffe:	4923      	ldr	r1, [pc, #140]	; (800708c <groupCommand+0x190>)
	else if(result == BOS_OK && type){
 8007000:	2b00      	cmp	r3, #0
 8007002:	d100      	bne.n	8007006 <groupCommand+0x10a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007004:	4922      	ldr	r1, [pc, #136]	; (8007090 <groupCommand+0x194>)
 8007006:	0030      	movs	r0, r6
 8007008:	f00c f9a0 	bl	801334c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800700c:	0031      	movs	r1, r6
 800700e:	0028      	movs	r0, r5
 8007010:	f00c f9bc 	bl	801338c <strcat>
}
 8007014:	2000      	movs	r0, #0
 8007016:	b00f      	add	sp, #60	; 0x3c
 8007018:	bc3c      	pop	{r2, r3, r4, r5}
 800701a:	4690      	mov	r8, r2
 800701c:	4699      	mov	r9, r3
 800701e:	46a2      	mov	sl, r4
 8007020:	46ab      	mov	fp, r5
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007024:	4643      	mov	r3, r8
 8007026:	56e3      	ldrsb	r3, [r4, r3]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d1e6      	bne.n	8006ffa <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 800702c:	aa01      	add	r2, sp, #4
 800702e:	4919      	ldr	r1, [pc, #100]	; (8007094 <groupCommand+0x198>)
 8007030:	0028      	movs	r0, r5
 8007032:	f00c f98b 	bl	801334c <sprintf>
 8007036:	e7ed      	b.n	8007014 <groupCommand+0x118>
	else if(count == 2)
 8007038:	2354      	movs	r3, #84	; 0x54
 800703a:	56e3      	ldrsb	r3, [r4, r3]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d0f5      	beq.n	800702c <groupCommand+0x130>
	else if(result == BOS_ERR_Keyword)
 8007040:	2806      	cmp	r0, #6
 8007042:	d015      	beq.n	8007070 <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 8007044:	2807      	cmp	r0, #7
 8007046:	d00d      	beq.n	8007064 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8007048:	2808      	cmp	r0, #8
 800704a:	d1e3      	bne.n	8007014 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 800704c:	aa01      	add	r2, sp, #4
 800704e:	4912      	ldr	r1, [pc, #72]	; (8007098 <groupCommand+0x19c>)
 8007050:	0028      	movs	r0, r5
 8007052:	f00c f97b 	bl	801334c <sprintf>
 8007056:	e7dd      	b.n	8007014 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007058:	0032      	movs	r2, r6
 800705a:	4910      	ldr	r1, [pc, #64]	; (800709c <groupCommand+0x1a0>)
 800705c:	0028      	movs	r0, r5
 800705e:	f00c f975 	bl	801334c <sprintf>
	return pdFALSE;
 8007062:	e7d7      	b.n	8007014 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007064:	aa01      	add	r2, sp, #4
 8007066:	490e      	ldr	r1, [pc, #56]	; (80070a0 <groupCommand+0x1a4>)
 8007068:	0028      	movs	r0, r5
 800706a:	f00c f96f 	bl	801334c <sprintf>
 800706e:	e7d1      	b.n	8007014 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007070:	aa01      	add	r2, sp, #4
 8007072:	490c      	ldr	r1, [pc, #48]	; (80070a4 <groupCommand+0x1a8>)
 8007074:	0028      	movs	r0, r5
 8007076:	f00c f969 	bl	801334c <sprintf>
 800707a:	e7cb      	b.n	8007014 <groupCommand+0x118>
 800707c:	20001250 	.word	0x20001250
 8007080:	20000ae0 	.word	0x20000ae0
 8007084:	08019278 	.word	0x08019278
 8007088:	08019284 	.word	0x08019284
 800708c:	080192b4 	.word	0x080192b4
 8007090:	080192d0 	.word	0x080192d0
 8007094:	08019288 	.word	0x08019288
 8007098:	08019364 	.word	0x08019364
 800709c:	080193a4 	.word	0x080193a4
 80070a0:	08019330 	.word	0x08019330
 80070a4:	080192f0 	.word	0x080192f0

080070a8 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	0005      	movs	r5, r0
 80070ac:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	d01a      	beq.n	80070e8 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070b2:	4c1b      	ldr	r4, [pc, #108]	; (8007120 <nameCommand+0x78>)
 80070b4:	2101      	movs	r1, #1
 80070b6:	0022      	movs	r2, r4
 80070b8:	3260      	adds	r2, #96	; 0x60
 80070ba:	f006 fca5 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070be:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070c0:	0001      	movs	r1, r0
 80070c2:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	dd01      	ble.n	80070cc <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070c8:	2300      	movs	r3, #0
 80070ca:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070cc:	4e15      	ldr	r6, [pc, #84]	; (8007124 <nameCommand+0x7c>)
 80070ce:	7830      	ldrb	r0, [r6, #0]
 80070d0:	f7fd f8e6 	bl	80042a0 <NameModule>
	if(result == BOS_OK)
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d009      	beq.n	80070ec <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070d8:	2806      	cmp	r0, #6
 80070da:	d01a      	beq.n	8007112 <nameCommand+0x6a>
	else if(result == BOS_ERR_ExistingAlias)
 80070dc:	2807      	cmp	r0, #7
 80070de:	d012      	beq.n	8007106 <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 80070e0:	2808      	cmp	r0, #8
 80070e2:	d00a      	beq.n	80070fa <nameCommand+0x52>
}
 80070e4:	2000      	movs	r0, #0
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80070e8:	b672      	cpsid	i
 80070ea:	e7fe      	b.n	80070ea <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070ec:	7832      	ldrb	r2, [r6, #0]
 80070ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070f0:	490d      	ldr	r1, [pc, #52]	; (8007128 <nameCommand+0x80>)
 80070f2:	0028      	movs	r0, r5
 80070f4:	f00c f92a 	bl	801334c <sprintf>
 80070f8:	e7f4      	b.n	80070e4 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80070fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070fc:	490b      	ldr	r1, [pc, #44]	; (800712c <nameCommand+0x84>)
 80070fe:	0028      	movs	r0, r5
 8007100:	f00c f924 	bl	801334c <sprintf>
 8007104:	e7ee      	b.n	80070e4 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007108:	4909      	ldr	r1, [pc, #36]	; (8007130 <nameCommand+0x88>)
 800710a:	0028      	movs	r0, r5
 800710c:	f00c f91e 	bl	801334c <sprintf>
 8007110:	e7e8      	b.n	80070e4 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <nameCommand+0x8c>)
 8007116:	0028      	movs	r0, r5
 8007118:	f00c f918 	bl	801334c <sprintf>
 800711c:	e7e2      	b.n	80070e4 <nameCommand+0x3c>
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	20001250 	.word	0x20001250
 8007124:	20000aa8 	.word	0x20000aa8
 8007128:	080193c8 	.word	0x080193c8
 800712c:	08019364 	.word	0x08019364
 8007130:	08019330 	.word	0x08019330
 8007134:	080192f0 	.word	0x080192f0

08007138 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713a:	46c6      	mov	lr, r8
 800713c:	b500      	push	{lr}
 800713e:	0005      	movs	r5, r0
 8007140:	b082      	sub	sp, #8
 8007142:	4690      	mov	r8, r2
	configASSERT(pcWriteBuffer);
 8007144:	2800      	cmp	r0, #0
 8007146:	d018      	beq.n	800717a <bootloaderUpdateCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007148:	4c4d      	ldr	r4, [pc, #308]	; (8007280 <bootloaderUpdateCommand+0x148>)
 800714a:	2101      	movs	r1, #1
 800714c:	0022      	movs	r2, r4
 800714e:	4640      	mov	r0, r8
 8007150:	3268      	adds	r2, #104	; 0x68
 8007152:	f006 fc59 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007156:	2800      	cmp	r0, #0
 8007158:	d048      	beq.n	80071ec <bootloaderUpdateCommand+0xb4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 800715a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800715c:	4949      	ldr	r1, [pc, #292]	; (8007284 <bootloaderUpdateCommand+0x14c>)
 800715e:	f00c f939 	bl	80133d4 <strncmp>
 8007162:	2800      	cmp	r0, #0
 8007164:	d00b      	beq.n	800717e <bootloaderUpdateCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007166:	220f      	movs	r2, #15
 8007168:	4947      	ldr	r1, [pc, #284]	; (8007288 <bootloaderUpdateCommand+0x150>)
 800716a:	0028      	movs	r0, r5
 800716c:	f00b feeb 	bl	8012f46 <memcpy>
}
 8007170:	2000      	movs	r0, #0
 8007172:	b002      	add	sp, #8
 8007174:	bc04      	pop	{r2}
 8007176:	4690      	mov	r8, r2
 8007178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800717a:	b672      	cpsid	i
 800717c:	e7fe      	b.n	800717c <bootloaderUpdateCommand+0x44>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800717e:	0022      	movs	r2, r4
 8007180:	2102      	movs	r1, #2
 8007182:	326c      	adds	r2, #108	; 0x6c
 8007184:	4640      	mov	r0, r8
 8007186:	f006 fc3f 	bl	800da08 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800718a:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800718c:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800718e:	3274      	adds	r2, #116	; 0x74
 8007190:	2103      	movs	r1, #3
 8007192:	4640      	mov	r0, r8
 8007194:	f006 fc38 	bl	800da08 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8007198:	2200      	movs	r2, #0
				result =BOS_ERR_WrongValue;
 800719a:	2168      	movs	r1, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 800719c:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800719e:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80071a0:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80071a2:	4688      	mov	r8, r1
			if(pcParameterString2[0] == '#'){
 80071a4:	2a23      	cmp	r2, #35	; 0x23
 80071a6:	d062      	beq.n	800726e <bootloaderUpdateCommand+0x136>
			if(pcParameterString3[0] == 'p'){
 80071a8:	2300      	movs	r3, #0
 80071aa:	56c3      	ldrsb	r3, [r0, r3]
 80071ac:	2b70      	cmp	r3, #112	; 0x70
 80071ae:	d059      	beq.n	8007264 <bootloaderUpdateCommand+0x12c>
				result =BOS_ERR_WrongValue;
 80071b0:	2368      	movs	r3, #104	; 0x68
 80071b2:	4698      	mov	r8, r3
			if(module != myID){
 80071b4:	4c35      	ldr	r4, [pc, #212]	; (800728c <bootloaderUpdateCommand+0x154>)
 80071b6:	7823      	ldrb	r3, [r4, #0]
 80071b8:	42bb      	cmp	r3, r7
 80071ba:	d041      	beq.n	8007240 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071bc:	2200      	movs	r2, #0
 80071be:	4b34      	ldr	r3, [pc, #208]	; (8007290 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071c0:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071c2:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071c4:	4b33      	ldr	r3, [pc, #204]	; (8007294 <bootloaderUpdateCommand+0x15c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071c6:	3201      	adds	r2, #1
 80071c8:	0038      	movs	r0, r7
				messageParams[0] =port;
 80071ca:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071cc:	f002 fc14 	bl	80099f8 <SendMessageToModule>
				osDelay(100);
 80071d0:	2064      	movs	r0, #100	; 0x64
 80071d2:	f006 fb09 	bl	800d7e8 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071d6:	4b30      	ldr	r3, [pc, #192]	; (8007298 <bootloaderUpdateCommand+0x160>)
 80071d8:	7820      	ldrb	r0, [r4, #0]
 80071da:	781a      	ldrb	r2, [r3, #0]
 80071dc:	0039      	movs	r1, r7
 80071de:	0033      	movs	r3, r6
 80071e0:	f7fc fcae 	bl	8003b40 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071e4:	4643      	mov	r3, r8
 80071e6:	2b68      	cmp	r3, #104	; 0x68
 80071e8:	d1c2      	bne.n	8007170 <bootloaderUpdateCommand+0x38>
 80071ea:	e7bc      	b.n	8007166 <bootloaderUpdateCommand+0x2e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <bootloaderUpdateCommand+0x154>)
 80071ee:	492b      	ldr	r1, [pc, #172]	; (800729c <bootloaderUpdateCommand+0x164>)
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	0028      	movs	r0, r5
 80071f4:	f00c f8aa 	bl	801334c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80071f8:	4b29      	ldr	r3, [pc, #164]	; (80072a0 <bootloaderUpdateCommand+0x168>)
 80071fa:	0028      	movs	r0, r5
 80071fc:	6819      	ldr	r1, [r3, #0]
 80071fe:	f00c f8c5 	bl	801338c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007202:	0028      	movs	r0, r5
 8007204:	f7f8 ff88 	bl	8000118 <strlen>
 8007208:	4b23      	ldr	r3, [pc, #140]	; (8007298 <bootloaderUpdateCommand+0x160>)
 800720a:	b282      	uxth	r2, r0
 800720c:	7818      	ldrb	r0, [r3, #0]
 800720e:	2301      	movs	r3, #1
 8007210:	425b      	negs	r3, r3
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	0029      	movs	r1, r5
 8007216:	3333      	adds	r3, #51	; 0x33
 8007218:	f006 f99a 	bl	800d550 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <bootloaderUpdateCommand+0x16c>)
 800721e:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8007220:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007222:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007224:	2201      	movs	r2, #1
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <bootloaderUpdateCommand+0x174>)
 8007228:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800722a:	f006 fadd 	bl	800d7e8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	4b1f      	ldr	r3, [pc, #124]	; (80072b0 <bootloaderUpdateCommand+0x178>)
 8007234:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <bootloaderUpdateCommand+0x17c>)
 8007236:	60da      	str	r2, [r3, #12]
 8007238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	e7fd      	b.n	800723c <bootloaderUpdateCommand+0x104>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007240:	2100      	movs	r1, #0
 8007242:	2319      	movs	r3, #25
 8007244:	9100      	str	r1, [sp, #0]
 8007246:	000a      	movs	r2, r1
 8007248:	0030      	movs	r0, r6
 800724a:	f002 f975 	bl	8009538 <SendMessageFromPort>
				osDelay(100);
 800724e:	2064      	movs	r0, #100	; 0x64
 8007250:	f006 faca 	bl	800d7e8 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007254:	7820      	ldrb	r0, [r4, #0]
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <bootloaderUpdateCommand+0x160>)
 8007258:	0001      	movs	r1, r0
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	0033      	movs	r3, r6
 800725e:	f7fc fc6f 	bl	8003b40 <remoteBootloaderUpdate>
 8007262:	e7bf      	b.n	80071e4 <bootloaderUpdateCommand+0xac>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007264:	3001      	adds	r0, #1
 8007266:	f00b fbae 	bl	80129c6 <atol>
 800726a:	b2c6      	uxtb	r6, r0
 800726c:	e7a2      	b.n	80071b4 <bootloaderUpdateCommand+0x7c>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800726e:	1c58      	adds	r0, r3, #1
 8007270:	f00b fba9 	bl	80129c6 <atol>
	BOS_Status result =BOS_OK;
 8007274:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007276:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8007278:	4698      	mov	r8, r3
 800727a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800727c:	e794      	b.n	80071a8 <bootloaderUpdateCommand+0x70>
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	20001250 	.word	0x20001250
 8007284:	08019400 	.word	0x08019400
 8007288:	08018e78 	.word	0x08018e78
 800728c:	20000aa8 	.word	0x20000aa8
 8007290:	20006d34 	.word	0x20006d34
 8007294:	20000b4c 	.word	0x20000b4c
 8007298:	20000c38 	.word	0x20000c38
 800729c:	080193e0 	.word	0x080193e0
 80072a0:	2000008c 	.word	0x2000008c
 80072a4:	20007ff0 	.word	0x20007ff0
 80072a8:	deadbeef 	.word	0xdeadbeef
 80072ac:	2000114e 	.word	0x2000114e
 80072b0:	e000ed00 	.word	0xe000ed00
 80072b4:	05fa0004 	.word	0x05fa0004

080072b8 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072b8:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d01f      	beq.n	80072fe <pingCommand+0x46>
	if(!moduleAlias[myID][0])
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <pingCommand+0x54>)
 80072c0:	4913      	ldr	r1, [pc, #76]	; (8007310 <pingCommand+0x58>)
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	0093      	lsls	r3, r2, #2
 80072c6:	189b      	adds	r3, r3, r2
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	5c5c      	ldrb	r4, [r3, r1]
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d018      	beq.n	8007302 <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072d0:	185b      	adds	r3, r3, r1
 80072d2:	4910      	ldr	r1, [pc, #64]	; (8007314 <pingCommand+0x5c>)
 80072d4:	f00c f83a 	bl	801334c <sprintf>
	RTOS_IND_blink(200);
 80072d8:	2180      	movs	r1, #128	; 0x80
 80072da:	2090      	movs	r0, #144	; 0x90
 80072dc:	2201      	movs	r2, #1
 80072de:	0109      	lsls	r1, r1, #4
 80072e0:	05c0      	lsls	r0, r0, #23
 80072e2:	f009 fed3 	bl	801108c <HAL_GPIO_WritePin>
 80072e6:	20c8      	movs	r0, #200	; 0xc8
 80072e8:	f006 fa7e 	bl	800d7e8 <osDelay>
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	2090      	movs	r0, #144	; 0x90
 80072f0:	2200      	movs	r2, #0
 80072f2:	0109      	lsls	r1, r1, #4
 80072f4:	05c0      	lsls	r0, r0, #23
 80072f6:	f009 fec9 	bl	801108c <HAL_GPIO_WritePin>
}
 80072fa:	2000      	movs	r0, #0
 80072fc:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80072fe:	b672      	cpsid	i
 8007300:	e7fe      	b.n	8007300 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007302:	4905      	ldr	r1, [pc, #20]	; (8007318 <pingCommand+0x60>)
 8007304:	f00c f822 	bl	801334c <sprintf>
 8007308:	e7e6      	b.n	80072d8 <pingCommand+0x20>
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	20000aa8 	.word	0x20000aa8
 8007310:	20000dd4 	.word	0x20000dd4
 8007314:	08019418 	.word	0x08019418
 8007318:	08019404 	.word	0x08019404

0800731c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800731c:	b510      	push	{r4, lr}
 800731e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007320:	d101      	bne.n	8007326 <prvRunTimeStatsCommand+0xa>
 8007322:	b672      	cpsid	i
 8007324:	e7fe      	b.n	8007324 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007326:	2241      	movs	r2, #65	; 0x41
 8007328:	4904      	ldr	r1, [pc, #16]	; (800733c <prvRunTimeStatsCommand+0x20>)
 800732a:	f00b fe0c 	bl	8012f46 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800732e:	0020      	movs	r0, r4
 8007330:	3040      	adds	r0, #64	; 0x40
 8007332:	f007 fd63 	bl	800edfc <vTaskGetRunTimeStats>
}
 8007336:	2000      	movs	r0, #0
 8007338:	bd10      	pop	{r4, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	08019434 	.word	0x08019434

08007340 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007340:	b510      	push	{r4, lr}
 8007342:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007344:	d101      	bne.n	800734a <prvTaskStatsCommand+0xa>
 8007346:	b672      	cpsid	i
 8007348:	e7fe      	b.n	8007348 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800734a:	2250      	movs	r2, #80	; 0x50
 800734c:	4904      	ldr	r1, [pc, #16]	; (8007360 <prvTaskStatsCommand+0x20>)
 800734e:	f00b fdfa 	bl	8012f46 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007352:	0020      	movs	r0, r4
 8007354:	304f      	adds	r0, #79	; 0x4f
 8007356:	f007 fcf7 	bl	800ed48 <vTaskList>
}
 800735a:	2000      	movs	r0, #0
 800735c:	bd10      	pop	{r4, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	08019478 	.word	0x08019478

08007364 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007368:	d023      	beq.n	80073b2 <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 800736a:	220e      	movs	r2, #14
 800736c:	4912      	ldr	r1, [pc, #72]	; (80073b8 <uuidCommand+0x54>)
 800736e:	f00b fdea 	bl	8012f46 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8007372:	4d12      	ldr	r5, [pc, #72]	; (80073bc <uuidCommand+0x58>)
 8007374:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <uuidCommand+0x5c>)
 8007376:	0029      	movs	r1, r5
 8007378:	0022      	movs	r2, r4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	0020      	movs	r0, r4
 800737e:	f00b ffe5 	bl	801334c <sprintf>
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <uuidCommand+0x60>)
 8007384:	0029      	movs	r1, r5
 8007386:	0022      	movs	r2, r4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	0020      	movs	r0, r4
 800738c:	f00b ffde 	bl	801334c <sprintf>
 8007390:	4b0d      	ldr	r3, [pc, #52]	; (80073c8 <uuidCommand+0x64>)
 8007392:	0029      	movs	r1, r5
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	0022      	movs	r2, r4
 8007398:	0020      	movs	r0, r4
 800739a:	f00b ffd7 	bl	801334c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 800739e:	0020      	movs	r0, r4
 80073a0:	f7f8 feba 	bl	8000118 <strlen>
 80073a4:	2203      	movs	r2, #3
 80073a6:	1820      	adds	r0, r4, r0
 80073a8:	4908      	ldr	r1, [pc, #32]	; (80073cc <uuidCommand+0x68>)
 80073aa:	f00b fdcc 	bl	8012f46 <memcpy>
}
 80073ae:	2000      	movs	r0, #0
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80073b2:	b672      	cpsid	i
 80073b4:	e7fe      	b.n	80073b4 <uuidCommand+0x50>
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	080194c8 	.word	0x080194c8
 80073bc:	080194d8 	.word	0x080194d8
 80073c0:	1ffff7ac 	.word	0x1ffff7ac
 80073c4:	1ffff7b0 	.word	0x1ffff7b0
 80073c8:	1ffff7b4 	.word	0x1ffff7b4
 80073cc:	08019da0 	.word	0x08019da0

080073d0 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073d0:	b510      	push	{r4, lr}
 80073d2:	0004      	movs	r4, r0
 80073d4:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d00a      	beq.n	80073f0 <timeCommand+0x20>
	GetTimeDate();
 80073da:	f005 fe97 	bl	800d10c <GetTimeDate>
	if(BOS.hourformat == 24)
 80073de:	4916      	ldr	r1, [pc, #88]	; (8007438 <timeCommand+0x68>)
 80073e0:	7b4b      	ldrb	r3, [r1, #13]
 80073e2:	2b18      	cmp	r3, #24
 80073e4:	d006      	beq.n	80073f4 <timeCommand+0x24>
	else if(BOS.hourformat == 12){
 80073e6:	2b0c      	cmp	r3, #12
 80073e8:	d00f      	beq.n	800740a <timeCommand+0x3a>
}
 80073ea:	2000      	movs	r0, #0
 80073ec:	b004      	add	sp, #16
 80073ee:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80073f0:	b672      	cpsid	i
 80073f2:	e7fe      	b.n	80073f2 <timeCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 80073f4:	89c8      	ldrh	r0, [r1, #14]
 80073f6:	7c4b      	ldrb	r3, [r1, #17]
 80073f8:	7c8a      	ldrb	r2, [r1, #18]
 80073fa:	9001      	str	r0, [sp, #4]
 80073fc:	7c09      	ldrb	r1, [r1, #16]
 80073fe:	0020      	movs	r0, r4
 8007400:	9100      	str	r1, [sp, #0]
 8007402:	490e      	ldr	r1, [pc, #56]	; (800743c <timeCommand+0x6c>)
 8007404:	f00b ffa2 	bl	801334c <sprintf>
 8007408:	e7ef      	b.n	80073ea <timeCommand+0x1a>
		if(BOS.time.ampm == RTC_AM)
 800740a:	7ccb      	ldrb	r3, [r1, #19]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d00e      	beq.n	800742e <timeCommand+0x5e>
		else if(BOS.time.ampm == RTC_PM)
 8007410:	2b02      	cmp	r3, #2
 8007412:	d1ea      	bne.n	80073ea <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007414:	7c4b      	ldrb	r3, [r1, #17]
 8007416:	7c8a      	ldrb	r2, [r1, #18]
 8007418:	4809      	ldr	r0, [pc, #36]	; (8007440 <timeCommand+0x70>)
 800741a:	9002      	str	r0, [sp, #8]
 800741c:	89c8      	ldrh	r0, [r1, #14]
 800741e:	9001      	str	r0, [sp, #4]
 8007420:	7c09      	ldrb	r1, [r1, #16]
 8007422:	0020      	movs	r0, r4
 8007424:	9100      	str	r1, [sp, #0]
 8007426:	4907      	ldr	r1, [pc, #28]	; (8007444 <timeCommand+0x74>)
 8007428:	f00b ff90 	bl	801334c <sprintf>
 800742c:	e7dd      	b.n	80073ea <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800742e:	7c4b      	ldrb	r3, [r1, #17]
 8007430:	7c8a      	ldrb	r2, [r1, #18]
 8007432:	4805      	ldr	r0, [pc, #20]	; (8007448 <timeCommand+0x78>)
 8007434:	e7f1      	b.n	800741a <timeCommand+0x4a>
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	20006db4 	.word	0x20006db4
 800743c:	080194e0 	.word	0x080194e0
 8007440:	08019538 	.word	0x08019538
 8007444:	08019508 	.word	0x08019508
 8007448:	08019534 	.word	0x08019534

0800744c <resetCommand>:
	configASSERT(pcWriteBuffer);
 800744c:	2800      	cmp	r0, #0
 800744e:	d008      	beq.n	8007462 <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <resetCommand+0x1c>)
 8007456:	4a05      	ldr	r2, [pc, #20]	; (800746c <resetCommand+0x20>)
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	e7fd      	b.n	800745e <resetCommand+0x12>
 8007462:	b672      	cpsid	i
 8007464:	e7fe      	b.n	8007464 <resetCommand+0x18>
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	e000ed00 	.word	0xe000ed00
 800746c:	05fa0004 	.word	0x05fa0004

08007470 <RegisterUserCLICommands>:
}
 8007470:	4770      	bx	lr
 8007472:	46c0      	nop			; (mov r8, r8)

08007474 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007474:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007476:	4c45      	ldr	r4, [pc, #276]	; (800758c <vRegisterCLICommands+0x118>)
 8007478:	0020      	movs	r0, r4
 800747a:	f006 fa2d 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 800747e:	0020      	movs	r0, r4
 8007480:	3010      	adds	r0, #16
 8007482:	f006 fa29 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007486:	0020      	movs	r0, r4
 8007488:	3020      	adds	r0, #32
 800748a:	f006 fa25 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800748e:	0020      	movs	r0, r4
 8007490:	3030      	adds	r0, #48	; 0x30
 8007492:	f006 fa21 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007496:	0020      	movs	r0, r4
 8007498:	3040      	adds	r0, #64	; 0x40
 800749a:	f006 fa1d 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800749e:	0020      	movs	r0, r4
 80074a0:	3050      	adds	r0, #80	; 0x50
 80074a2:	f006 fa19 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80074a6:	0020      	movs	r0, r4
 80074a8:	3060      	adds	r0, #96	; 0x60
 80074aa:	f006 fa15 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80074ae:	0020      	movs	r0, r4
 80074b0:	3070      	adds	r0, #112	; 0x70
 80074b2:	f006 fa11 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80074b6:	4c36      	ldr	r4, [pc, #216]	; (8007590 <vRegisterCLICommands+0x11c>)
 80074b8:	0020      	movs	r0, r4
 80074ba:	f006 fa0d 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80074be:	0020      	movs	r0, r4
 80074c0:	3010      	adds	r0, #16
 80074c2:	f006 fa09 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80074c6:	0020      	movs	r0, r4
 80074c8:	3020      	adds	r0, #32
 80074ca:	f006 fa05 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80074ce:	0020      	movs	r0, r4
 80074d0:	3030      	adds	r0, #48	; 0x30
 80074d2:	f006 fa01 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80074d6:	0020      	movs	r0, r4
 80074d8:	3040      	adds	r0, #64	; 0x40
 80074da:	f006 f9fd 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80074de:	0020      	movs	r0, r4
 80074e0:	3050      	adds	r0, #80	; 0x50
 80074e2:	f006 f9f9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80074e6:	0020      	movs	r0, r4
 80074e8:	3060      	adds	r0, #96	; 0x60
 80074ea:	f006 f9f5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80074ee:	0020      	movs	r0, r4
 80074f0:	3070      	adds	r0, #112	; 0x70
 80074f2:	f006 f9f1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80074f6:	4c27      	ldr	r4, [pc, #156]	; (8007594 <vRegisterCLICommands+0x120>)
 80074f8:	0020      	movs	r0, r4
 80074fa:	f006 f9ed 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80074fe:	0020      	movs	r0, r4
 8007500:	3010      	adds	r0, #16
 8007502:	f006 f9e9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007506:	0020      	movs	r0, r4
 8007508:	3020      	adds	r0, #32
 800750a:	f006 f9e5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800750e:	0020      	movs	r0, r4
 8007510:	3030      	adds	r0, #48	; 0x30
 8007512:	f006 f9e1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007516:	0020      	movs	r0, r4
 8007518:	3040      	adds	r0, #64	; 0x40
 800751a:	f006 f9dd 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800751e:	0020      	movs	r0, r4
 8007520:	3050      	adds	r0, #80	; 0x50
 8007522:	f006 f9d9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007526:	0020      	movs	r0, r4
 8007528:	3060      	adds	r0, #96	; 0x60
 800752a:	f006 f9d5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800752e:	0020      	movs	r0, r4
 8007530:	3070      	adds	r0, #112	; 0x70
 8007532:	f006 f9d1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007536:	4c18      	ldr	r4, [pc, #96]	; (8007598 <vRegisterCLICommands+0x124>)
 8007538:	0020      	movs	r0, r4
 800753a:	f006 f9cd 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 800753e:	0020      	movs	r0, r4
 8007540:	3010      	adds	r0, #16
 8007542:	f006 f9c9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007546:	0020      	movs	r0, r4
 8007548:	3020      	adds	r0, #32
 800754a:	f006 f9c5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800754e:	0020      	movs	r0, r4
 8007550:	3030      	adds	r0, #48	; 0x30
 8007552:	f006 f9c1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007556:	0020      	movs	r0, r4
 8007558:	3040      	adds	r0, #64	; 0x40
 800755a:	f006 f9bd 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800755e:	0020      	movs	r0, r4
 8007560:	3050      	adds	r0, #80	; 0x50
 8007562:	f006 f9b9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007566:	0020      	movs	r0, r4
 8007568:	3060      	adds	r0, #96	; 0x60
 800756a:	f006 f9b5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 800756e:	0020      	movs	r0, r4
 8007570:	3070      	adds	r0, #112	; 0x70
 8007572:	f006 f9b1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007576:	4809      	ldr	r0, [pc, #36]	; (800759c <vRegisterCLICommands+0x128>)
 8007578:	f006 f9ae 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 800757c:	2223      	movs	r2, #35	; 0x23
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <vRegisterCLICommands+0x12c>)
 8007580:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007582:	f004 f8e7 	bl	800b754 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007586:	f7ff ff73 	bl	8007470 <RegisterUserCLICommands>
}
 800758a:	bd10      	pop	{r4, pc}
 800758c:	080178ac 	.word	0x080178ac
 8007590:	0801792c 	.word	0x0801792c
 8007594:	080179ac 	.word	0x080179ac
 8007598:	08017a2c 	.word	0x08017a2c
 800759c:	08017aac 	.word	0x08017aac
 80075a0:	20006d30 	.word	0x20006d30

080075a4 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80075a4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80075a6:	1e44      	subs	r4, r0, #1
 80075a8:	00e5      	lsls	r5, r4, #3
 80075aa:	4e07      	ldr	r6, [pc, #28]	; (80075c8 <StopStreamDMA+0x24>)
 80075ac:	1b2d      	subs	r5, r5, r4
 80075ae:	00ed      	lsls	r5, r5, #3
 80075b0:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 80075b2:	f008 fdc1 	bl	8010138 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 80075ba:	4804      	ldr	r0, [pc, #16]	; (80075cc <StopStreamDMA+0x28>)
 80075bc:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 80075be:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80075c0:	5023      	str	r3, [r4, r0]
	dmaStreamTotal[port - 1] =0;
 80075c2:	1904      	adds	r4, r0, r4
 80075c4:	6163      	str	r3, [r4, #20]
	
}
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	20001b84 	.word	0x20001b84
 80075cc:	200012cc 	.word	0x200012cc

080075d0 <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 80075d0:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80075d2:	b570      	push	{r4, r5, r6, lr}
 80075d4:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <SwitchMsgDMAToStream+0x24>)
 80075d8:	1a24      	subs	r4, r4, r0
 80075da:	00e4      	lsls	r4, r4, #3
 80075dc:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 80075de:	f008 fdab 	bl	8010138 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075e6:	4804      	ldr	r0, [pc, #16]	; (80075f8 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 80075e8:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075ea:	1820      	adds	r0, r4, r0
 80075ec:	f004 fae4 	bl	800bbb8 <DMA_STREAM_CH_Init>
}
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	20001d7c 	.word	0x20001d7c
 80075f8:	20001b84 	.word	0x20001b84

080075fc <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80075fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fe:	46d6      	mov	lr, sl
 8007600:	464f      	mov	r7, r9
 8007602:	4646      	mov	r6, r8
 8007604:	b5c0      	push	{r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 8007606:	1e46      	subs	r6, r0, #1
 8007608:	00f4      	lsls	r4, r6, #3
 800760a:	4f15      	ldr	r7, [pc, #84]	; (8007660 <SwitchStreamDMAToMsg+0x64>)
 800760c:	1ba4      	subs	r4, r4, r6
 800760e:	00e4      	lsls	r4, r4, #3
 8007610:	19e3      	adds	r3, r4, r7
void SwitchStreamDMAToMsg(uint8_t port){
 8007612:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 8007614:	0018      	movs	r0, r3
	hDMA =&streamDMA[port - 1];
 8007616:	4699      	mov	r9, r3
	HAL_DMA_Abort(hDMA);
 8007618:	f008 fd8e 	bl	8010138 <HAL_DMA_Abort>
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <SwitchStreamDMAToMsg+0x68>)
	hDMA->Instance->CNDTR =0;
 800761e:	2500      	movs	r5, #0
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007620:	469a      	mov	sl, r3
	hDMA->Instance->CNDTR =0;
 8007622:	59e1      	ldr	r1, [r4, r7]
	dmaStreamCount[port - 1] =0;
 8007624:	4a10      	ldr	r2, [pc, #64]	; (8007668 <SwitchStreamDMAToMsg+0x6c>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007626:	44a2      	add	sl, r4
	dmaStreamCount[port - 1] =0;
 8007628:	00b6      	lsls	r6, r6, #2
	hDMA->Instance->CNDTR =0;
 800762a:	604d      	str	r5, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800762c:	4650      	mov	r0, sl
	dmaStreamCount[port - 1] =0;
 800762e:	50b5      	str	r5, [r6, r2]
	dmaStreamTotal[port - 1] =0;
 8007630:	1996      	adds	r6, r2, r6
 8007632:	6175      	str	r5, [r6, #20]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007634:	f004 faae 	bl	800bb94 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007638:	464b      	mov	r3, r9
 800763a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800763c:	f004 f89e 	bl	800b77c <GetPort>
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <SwitchStreamDMAToMsg+0x70>)
	streamDMA[port - 1].Instance =0;
 8007642:	51e5      	str	r5, [r4, r7]
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007644:	541d      	strb	r5, [r3, r0]
	dmaStreamDst[port - 1] =0;
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007646:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 8007648:	62b5      	str	r5, [r6, #40]	; 0x28
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800764a:	f006 f809 	bl	800d660 <GetUart>
 800764e:	4651      	mov	r1, sl
 8007650:	f004 fe60 	bl	800c314 <DMA_MSG_RX_Setup>
	
}
 8007654:	bc1c      	pop	{r2, r3, r4}
 8007656:	4690      	mov	r8, r2
 8007658:	4699      	mov	r9, r3
 800765a:	46a2      	mov	sl, r4
 800765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	20001b84 	.word	0x20001b84
 8007664:	20001d7c 	.word	0x20001d7c
 8007668:	200012cc 	.word	0x200012cc
 800766c:	20000c3c 	.word	0x20000c3c

08007670 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007672:	46c6      	mov	lr, r8
 8007674:	b500      	push	{lr}
 8007676:	0005      	movs	r5, r0
 8007678:	000f      	movs	r7, r1
 800767a:	4690      	mov	r8, r2
	uint8_t srcPort =GetPort(huartSrc);
 800767c:	f004 f87e 	bl	800b77c <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007680:	4e0e      	ldr	r6, [pc, #56]	; (80076bc <StartDMAstream+0x4c>)
	uint8_t srcPort =GetPort(huartSrc);
 8007682:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007684:	5c33      	ldrb	r3, [r6, r0]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d902      	bls.n	8007690 <StartDMAstream+0x20>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800768a:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800768c:	2b03      	cmp	r3, #3
 800768e:	d111      	bne.n	80076b4 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 8007690:	0020      	movs	r0, r4
 8007692:	f7ff ff9d 	bl	80075d0 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <StartDMAstream+0x50>)
 8007698:	1e63      	subs	r3, r4, #1
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	18d1      	adds	r1, r2, r3
 800769e:	628f      	str	r7, [r1, #40]	; 0x28
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80076a0:	2102      	movs	r1, #2
 80076a2:	5531      	strb	r1, [r6, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80076a4:	2100      	movs	r1, #0
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076a6:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 80076a8:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076aa:	4642      	mov	r2, r8
 80076ac:	0039      	movs	r1, r7
 80076ae:	f004 fe8b 	bl	800c3c8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80076b2:	2000      	movs	r0, #0
}
 80076b4:	bc04      	pop	{r2}
 80076b6:	4690      	mov	r8, r2
 80076b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	20000c3c 	.word	0x20000c3c
 80076c0:	200012cc 	.word	0x200012cc

080076c4 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	46ce      	mov	lr, r9
 80076c8:	4647      	mov	r7, r8
 80076ca:	b580      	push	{r7, lr}
	if(portStatus[port] != STREAM){
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <DMA_IRQHandler+0x70>)
 80076ce:	1e45      	subs	r5, r0, #1
 80076d0:	00ee      	lsls	r6, r5, #3
 80076d2:	5c12      	ldrb	r2, [r2, r0]
 80076d4:	1b73      	subs	r3, r6, r5
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	2a02      	cmp	r2, #2
 80076da:	d007      	beq.n	80076ec <DMA_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076dc:	4816      	ldr	r0, [pc, #88]	; (8007738 <DMA_IRQHandler+0x74>)
 80076de:	1818      	adds	r0, r3, r0
 80076e0:	f008 fd52 	bl	8010188 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80076e4:	bc0c      	pop	{r2, r3}
 80076e6:	4690      	mov	r8, r2
 80076e8:	4699      	mov	r9, r3
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076ec:	4a13      	ldr	r2, [pc, #76]	; (800773c <DMA_IRQHandler+0x78>)
		if(dmaStreamTotal[port - 1])
 80076ee:	00af      	lsls	r7, r5, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076f0:	4691      	mov	r9, r2
 80076f2:	444b      	add	r3, r9
 80076f4:	0018      	movs	r0, r3
 80076f6:	001c      	movs	r4, r3
 80076f8:	f008 fd46 	bl	8010188 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <DMA_IRQHandler+0x7c>)
 80076fe:	4698      	mov	r8, r3
 8007700:	19db      	adds	r3, r3, r7
 8007702:	695a      	ldr	r2, [r3, #20]
 8007704:	2a00      	cmp	r2, #0
 8007706:	d006      	beq.n	8007716 <DMA_IRQHandler+0x52>
			++dmaStreamCount[port - 1];
 8007708:	4643      	mov	r3, r8
 800770a:	4641      	mov	r1, r8
 800770c:	59db      	ldr	r3, [r3, r7]
 800770e:	3301      	adds	r3, #1
 8007710:	51cb      	str	r3, [r1, r7]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007712:	429a      	cmp	r2, r3
 8007714:	d8e6      	bhi.n	80076e4 <DMA_IRQHandler+0x20>
	HAL_DMA_Abort(hDMA);
 8007716:	0020      	movs	r0, r4
 8007718:	f008 fd0e 	bl	8010138 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800771c:	464b      	mov	r3, r9
 800771e:	1b75      	subs	r5, r6, r5
 8007720:	00ed      	lsls	r5, r5, #3
 8007722:	595a      	ldr	r2, [r3, r5]
 8007724:	2300      	movs	r3, #0
 8007726:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007728:	4642      	mov	r2, r8
 800772a:	51d3      	str	r3, [r2, r7]
	dmaStreamTotal[port - 1] =0;
 800772c:	4447      	add	r7, r8
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e7d8      	b.n	80076e4 <DMA_IRQHandler+0x20>
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	20000c3c 	.word	0x20000c3c
 8007738:	20001d7c 	.word	0x20001d7c
 800773c:	20001b84 	.word	0x20001b84
 8007740:	200012cc 	.word	0x200012cc

08007744 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <ResetUartORE+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	2308      	movs	r3, #8
 800774a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800774c:	4a07      	ldr	r2, [pc, #28]	; (800776c <ResetUartORE+0x28>)
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <ResetUartORE+0x2c>)
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <ResetUartORE+0x30>)
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800775e:	4a06      	ldr	r2, [pc, #24]	; (8007778 <ResetUartORE+0x34>)
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	6213      	str	r3, [r2, #32]
#endif
}
 8007764:	4770      	bx	lr
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	20007010 	.word	0x20007010
 800776c:	20007108 	.word	0x20007108
 8007770:	20006ee8 	.word	0x20006ee8
 8007774:	20006fa0 	.word	0x20006fa0
 8007778:	20007090 	.word	0x20007090

0800777c <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	000d      	movs	r5, r1
 8007780:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007782:	4c25      	ldr	r4, [pc, #148]	; (8007818 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007784:	f009 f9a0 	bl	8010ac8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007788:	4924      	ldr	r1, [pc, #144]	; (800781c <EE_VerifyPageFullWriteVariable+0xa0>)
 800778a:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800778c:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800778e:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007790:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 8007796:	4b22      	ldr	r3, [pc, #136]	; (8007820 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007798:	429a      	cmp	r2, r3
 800779a:	d007      	beq.n	80077ac <EE_VerifyPageFullWriteVariable+0x30>
 800779c:	4a21      	ldr	r2, [pc, #132]	; (8007824 <EE_VerifyPageFullWriteVariable+0xa8>)
 800779e:	0023      	movs	r3, r4
 80077a0:	e007      	b.n	80077b2 <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d122      	bne.n	80077ec <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 80077a6:	4a1e      	ldr	r2, [pc, #120]	; (8007820 <EE_VerifyPageFullWriteVariable+0xa4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d0f7      	beq.n	800779c <EE_VerifyPageFullWriteVariable+0x20>
 80077ac:	000c      	movs	r4, r1
 80077ae:	000b      	movs	r3, r1
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	d103      	bne.n	80077c0 <EE_VerifyPageFullWriteVariable+0x44>
 80077b8:	e009      	b.n	80077ce <EE_VerifyPageFullWriteVariable+0x52>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	d006      	beq.n	80077ce <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80077c0:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80077c2:	42a2      	cmp	r2, r4
 80077c4:	d8f9      	bhi.n	80077ba <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 80077c6:	f009 f991 	bl	8010aec <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077ca:	2080      	movs	r0, #128	; 0x80
}
 80077cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80077ce:	002a      	movs	r2, r5
 80077d0:	2300      	movs	r3, #0
 80077d2:	0021      	movs	r1, r4
 80077d4:	2001      	movs	r0, #1
 80077d6:	f009 f9d7 	bl	8010b88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80077da:	4814      	ldr	r0, [pc, #80]	; (800782c <EE_VerifyPageFullWriteVariable+0xb0>)
 80077dc:	f009 f990 	bl	8010b00 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d005      	beq.n	80077f0 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 80077e4:	4b12      	ldr	r3, [pc, #72]	; (8007830 <EE_VerifyPageFullWriteVariable+0xb4>)
 80077e6:	69d8      	ldr	r0, [r3, #28]
 80077e8:	b280      	uxth	r0, r0
 80077ea:	e7ef      	b.n	80077cc <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 80077ec:	20ab      	movs	r0, #171	; 0xab
 80077ee:	e7ed      	b.n	80077cc <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077f0:	2701      	movs	r7, #1
 80077f2:	4d10      	ldr	r5, [pc, #64]	; (8007834 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 80077f4:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077f6:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 80077f8:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077fa:	43bb      	bics	r3, r7
 80077fc:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 80077fe:	2001      	movs	r0, #1
 8007800:	2300      	movs	r3, #0
 8007802:	f009 f9c1 	bl	8010b88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007806:	4809      	ldr	r0, [pc, #36]	; (800782c <EE_VerifyPageFullWriteVariable+0xb0>)
 8007808:	f009 f97a 	bl	8010b00 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800780c:	2800      	cmp	r0, #0
 800780e:	d1e9      	bne.n	80077e4 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007810:	692b      	ldr	r3, [r5, #16]
 8007812:	43bb      	bics	r3, r7
 8007814:	612b      	str	r3, [r5, #16]
 8007816:	e7e5      	b.n	80077e4 <EE_VerifyPageFullWriteVariable+0x68>
 8007818:	0801f000 	.word	0x0801f000
 800781c:	0801e000 	.word	0x0801e000
 8007820:	0000eeee 	.word	0x0000eeee
 8007824:	0801fffe 	.word	0x0801fffe
 8007828:	0801effe 	.word	0x0801effe
 800782c:	0000c350 	.word	0x0000c350
 8007830:	200072b0 	.word	0x200072b0
 8007834:	40022000 	.word	0x40022000

08007838 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007838:	4b11      	ldr	r3, [pc, #68]	; (8007880 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800783a:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800783c:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <EE_ReadVariable+0x4c>)
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007844:	2a00      	cmp	r2, #0
 8007846:	d005      	beq.n	8007854 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 8007848:	2b00      	cmp	r3, #0
 800784a:	d117      	bne.n	800787c <EE_ReadVariable+0x44>
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <EE_ReadVariable+0x50>)
 800784e:	4c0f      	ldr	r4, [pc, #60]	; (800788c <EE_ReadVariable+0x54>)
 8007850:	001a      	movs	r2, r3
 8007852:	e002      	b.n	800785a <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <EE_ReadVariable+0x58>)
 8007856:	4c0f      	ldr	r4, [pc, #60]	; (8007894 <EE_ReadVariable+0x5c>)
 8007858:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800785a:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800785c:	4290      	cmp	r0, r2
 800785e:	d103      	bne.n	8007868 <EE_ReadVariable+0x30>
 8007860:	e007      	b.n	8007872 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007862:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 8007864:	4282      	cmp	r2, r0
 8007866:	d004      	beq.n	8007872 <EE_ReadVariable+0x3a>
			Address =Address - 4;
 8007868:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800786a:	42a3      	cmp	r3, r4
 800786c:	d8f9      	bhi.n	8007862 <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800786e:	2001      	movs	r0, #1
}
 8007870:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007872:	3b02      	subs	r3, #2
 8007874:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 8007876:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007878:	800b      	strh	r3, [r1, #0]
			break;
 800787a:	e7f9      	b.n	8007870 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800787c:	20ab      	movs	r0, #171	; 0xab
 800787e:	e7f7      	b.n	8007870 <EE_ReadVariable+0x38>
 8007880:	0801e000 	.word	0x0801e000
 8007884:	0801f000 	.word	0x0801f000
 8007888:	0801fffe 	.word	0x0801fffe
 800788c:	0801f002 	.word	0x0801f002
 8007890:	0801effe 	.word	0x0801effe
 8007894:	0801e002 	.word	0x0801e002

08007898 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789a:	46d6      	mov	lr, sl
 800789c:	4646      	mov	r6, r8
 800789e:	464f      	mov	r7, r9
 80078a0:	000c      	movs	r4, r1
 80078a2:	b5c0      	push	{r6, r7, lr}
 80078a4:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 80078a6:	f009 f90f 	bl	8010ac8 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078aa:	0021      	movs	r1, r4
 80078ac:	0030      	movs	r0, r6
 80078ae:	f7ff ff65 	bl	800777c <EE_VerifyPageFullWriteVariable>
 80078b2:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 80078b4:	2880      	cmp	r0, #128	; 0x80
 80078b6:	d007      	beq.n	80078c8 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 80078b8:	f009 f918 	bl	8010aec <HAL_FLASH_Lock>
}
 80078bc:	0028      	movs	r0, r5
 80078be:	bc1c      	pop	{r2, r3, r4}
 80078c0:	4690      	mov	r8, r2
 80078c2:	4699      	mov	r9, r3
 80078c4:	46a2      	mov	sl, r4
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 80078c8:	f009 f8fe 	bl	8010ac8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078cc:	4935      	ldr	r1, [pc, #212]	; (80079a4 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078ce:	4a36      	ldr	r2, [pc, #216]	; (80079a8 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078d0:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078d2:	8813      	ldrh	r3, [r2, #0]
 80078d4:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d013      	beq.n	8007902 <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 80078da:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1eb      	bne.n	80078b8 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 80078e0:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 80078e2:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 80078e4:	4a31      	ldr	r2, [pc, #196]	; (80079ac <EE_WriteVariable+0x114>)
 80078e6:	2300      	movs	r3, #0
 80078e8:	4641      	mov	r1, r8
 80078ea:	2001      	movs	r0, #1
 80078ec:	f009 f94c 	bl	8010b88 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078f0:	482f      	ldr	r0, [pc, #188]	; (80079b0 <EE_WriteVariable+0x118>)
 80078f2:	f009 f905 	bl	8010b00 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d006      	beq.n	8007908 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 80078fa:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <EE_WriteVariable+0x11c>)
 80078fc:	69dd      	ldr	r5, [r3, #28]
 80078fe:	b2ad      	uxth	r5, r5
 8007900:	e7da      	b.n	80078b8 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007902:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007904:	4690      	mov	r8, r2
 8007906:	e7ed      	b.n	80078e4 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007908:	2101      	movs	r1, #1
 800790a:	4a2b      	ldr	r2, [pc, #172]	; (80079b8 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800790c:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800790e:	6913      	ldr	r3, [r2, #16]
 8007910:	438b      	bics	r3, r1
 8007912:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007914:	0021      	movs	r1, r4
 8007916:	f7ff ff31 	bl	800777c <EE_VerifyPageFullWriteVariable>
 800791a:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800791c:	d1cc      	bne.n	80078b8 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800791e:	4b27      	ldr	r3, [pc, #156]	; (80079bc <EE_WriteVariable+0x124>)
 8007920:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007922:	4f27      	ldr	r7, [pc, #156]	; (80079c0 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007924:	469a      	mov	sl, r3
 8007926:	e003      	b.n	8007930 <EE_WriteVariable+0x98>
 8007928:	3401      	adds	r4, #1
 800792a:	b2a4      	uxth	r4, r4
 800792c:	4554      	cmp	r4, sl
 800792e:	d00f      	beq.n	8007950 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007930:	42a6      	cmp	r6, r4
 8007932:	d0f9      	beq.n	8007928 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007934:	0039      	movs	r1, r7
 8007936:	0020      	movs	r0, r4
 8007938:	f7ff ff7e 	bl	8007838 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800793c:	2801      	cmp	r0, #1
 800793e:	d0f3      	beq.n	8007928 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007940:	8839      	ldrh	r1, [r7, #0]
 8007942:	0020      	movs	r0, r4
 8007944:	f7ff ff1a 	bl	800777c <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007948:	2800      	cmp	r0, #0
 800794a:	d0ed      	beq.n	8007928 <EE_WriteVariable+0x90>
 800794c:	0005      	movs	r5, r0
 800794e:	e7b3      	b.n	80078b8 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 8007950:	4648      	mov	r0, r9
 8007952:	f009 f9e9 	bl	8010d28 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007956:	4816      	ldr	r0, [pc, #88]	; (80079b0 <EE_WriteVariable+0x118>)
 8007958:	f009 f8d2 	bl	8010b00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800795c:	2800      	cmp	r0, #0
 800795e:	d1cc      	bne.n	80078fa <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007960:	2080      	movs	r0, #128	; 0x80
 8007962:	0100      	lsls	r0, r0, #4
 8007964:	4448      	add	r0, r9
 8007966:	f009 f9df 	bl	8010d28 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800796a:	4811      	ldr	r0, [pc, #68]	; (80079b0 <EE_WriteVariable+0x118>)
 800796c:	f009 f8c8 	bl	8010b00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007970:	2800      	cmp	r0, #0
 8007972:	d1c2      	bne.n	80078fa <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007974:	2202      	movs	r2, #2
 8007976:	4c10      	ldr	r4, [pc, #64]	; (80079b8 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007978:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800797a:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800797c:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800797e:	4393      	bics	r3, r2
 8007980:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	f009 f8ff 	bl	8010b88 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800798a:	4809      	ldr	r0, [pc, #36]	; (80079b0 <EE_WriteVariable+0x118>)
 800798c:	f009 f8b8 	bl	8010b00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007990:	2800      	cmp	r0, #0
 8007992:	d1b2      	bne.n	80078fa <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007994:	2201      	movs	r2, #1
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	4393      	bics	r3, r2
 800799a:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800799c:	f009 f8a6 	bl	8010aec <HAL_FLASH_Lock>
 80079a0:	e78a      	b.n	80078b8 <EE_WriteVariable+0x20>
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	0801e000 	.word	0x0801e000
 80079a8:	0801f000 	.word	0x0801f000
 80079ac:	0000eeee 	.word	0x0000eeee
 80079b0:	0000c350 	.word	0x0000c350
 80079b4:	200072b0 	.word	0x200072b0
 80079b8:	40022000 	.word	0x40022000
 80079bc:	00000401 	.word	0x00000401
 80079c0:	20001710 	.word	0x20001710

080079c4 <EE_Format>:
uint16_t EE_Format(void){
 80079c4:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 80079c6:	f009 f87f 	bl	8010ac8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80079ca:	481f      	ldr	r0, [pc, #124]	; (8007a48 <EE_Format+0x84>)
 80079cc:	f009 f9ac 	bl	8010d28 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079d0:	481e      	ldr	r0, [pc, #120]	; (8007a4c <EE_Format+0x88>)
 80079d2:	f009 f895 	bl	8010b00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d003      	beq.n	80079e2 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 80079da:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <EE_Format+0x8c>)
 80079dc:	69d8      	ldr	r0, [r3, #28]
 80079de:	b280      	uxth	r0, r0
}
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079e2:	481c      	ldr	r0, [pc, #112]	; (8007a54 <EE_Format+0x90>)
 80079e4:	f009 f9a0 	bl	8010d28 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079e8:	4818      	ldr	r0, [pc, #96]	; (8007a4c <EE_Format+0x88>)
 80079ea:	f009 f889 	bl	8010b00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d1f3      	bne.n	80079da <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079f2:	2202      	movs	r2, #2
 80079f4:	4c18      	ldr	r4, [pc, #96]	; (8007a58 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80079f6:	4914      	ldr	r1, [pc, #80]	; (8007a48 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079f8:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80079fa:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079fc:	4393      	bics	r3, r2
 80079fe:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	f009 f8c0 	bl	8010b88 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a08:	4810      	ldr	r0, [pc, #64]	; (8007a4c <EE_Format+0x88>)
 8007a0a:	f009 f879 	bl	8010b00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d1e3      	bne.n	80079da <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a12:	2501      	movs	r5, #1
 8007a14:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a16:	4811      	ldr	r0, [pc, #68]	; (8007a5c <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a18:	43ab      	bics	r3, r5
 8007a1a:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a1c:	f009 f984 	bl	8010d28 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a20:	480a      	ldr	r0, [pc, #40]	; (8007a4c <EE_Format+0x88>)
 8007a22:	f009 f86d 	bl	8010b00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d1d7      	bne.n	80079da <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a2a:	480d      	ldr	r0, [pc, #52]	; (8007a60 <EE_Format+0x9c>)
 8007a2c:	f009 f97c 	bl	8010d28 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a30:	4806      	ldr	r0, [pc, #24]	; (8007a4c <EE_Format+0x88>)
 8007a32:	f009 f865 	bl	8010b00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d1cf      	bne.n	80079da <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	43ab      	bics	r3, r5
 8007a3e:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8007a40:	f009 f854 	bl	8010aec <HAL_FLASH_Lock>
	return FlashStatus;
 8007a44:	2000      	movs	r0, #0
 8007a46:	e7cb      	b.n	80079e0 <EE_Format+0x1c>
 8007a48:	0801e000 	.word	0x0801e000
 8007a4c:	0000c350 	.word	0x0000c350
 8007a50:	200072b0 	.word	0x200072b0
 8007a54:	0801e800 	.word	0x0801e800
 8007a58:	40022000 	.word	0x40022000
 8007a5c:	0801f000 	.word	0x0801f000
 8007a60:	0801f800 	.word	0x0801f800

08007a64 <EE_Init>:
uint16_t EE_Init(void){
 8007a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a66:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a68:	4c9d      	ldr	r4, [pc, #628]	; (8007ce0 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 8007a6a:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a6c:	4d9d      	ldr	r5, [pc, #628]	; (8007ce4 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 8007a6e:	f009 f82b 	bl	8010ac8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a72:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 8007a74:	499c      	ldr	r1, [pc, #624]	; (8007ce8 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a76:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a78:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a7a:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	d100      	bne.n	8007a82 <EE_Init+0x1e>
 8007a80:	e06f      	b.n	8007b62 <EE_Init+0xfe>
 8007a82:	489a      	ldr	r0, [pc, #616]	; (8007cec <EE_Init+0x288>)
 8007a84:	4283      	cmp	r3, r0
 8007a86:	d05c      	beq.n	8007b42 <EE_Init+0xde>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00e      	beq.n	8007aaa <EE_Init+0x46>
			FlashStatus =EE_Format();
 8007a8c:	f7ff ff9a 	bl	80079c4 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a90:	4897      	ldr	r0, [pc, #604]	; (8007cf0 <EE_Init+0x28c>)
 8007a92:	f009 f835 	bl	8010b00 <FLASH_WaitForLastOperation>
 8007a96:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007a98:	2d00      	cmp	r5, #0
 8007a9a:	d102      	bne.n	8007aa2 <EE_Init+0x3e>
	HAL_FLASH_Lock();
 8007a9c:	f009 f826 	bl	8010aec <HAL_FLASH_Lock>
	return HAL_OK;
 8007aa0:	2500      	movs	r5, #0
}
 8007aa2:	0028      	movs	r0, r5
 8007aa4:	bc04      	pop	{r2}
 8007aa6:	4690      	mov	r8, r2
 8007aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d0ee      	beq.n	8007a8c <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007aae:	4282      	cmp	r2, r0
 8007ab0:	d100      	bne.n	8007ab4 <EE_Init+0x50>
 8007ab2:	e103      	b.n	8007cbc <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ab4:	4b8f      	ldr	r3, [pc, #572]	; (8007cf4 <EE_Init+0x290>)
	int16_t x =-1;
 8007ab6:	2601      	movs	r6, #1
 8007ab8:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007aba:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007abc:	4f8e      	ldr	r7, [pc, #568]	; (8007cf8 <EE_Init+0x294>)
	int16_t x =-1;
 8007abe:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ac0:	883b      	ldrh	r3, [r7, #0]
 8007ac2:	b2a5      	uxth	r5, r4
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	d100      	bne.n	8007aca <EE_Init+0x66>
						x =VarIdx;
 8007ac8:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007aca:	42b4      	cmp	r4, r6
 8007acc:	d010      	beq.n	8007af0 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ace:	4641      	mov	r1, r8
 8007ad0:	0028      	movs	r0, r5
 8007ad2:	f7ff feb1 	bl	8007838 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007ad6:	2801      	cmp	r0, #1
 8007ad8:	d00a      	beq.n	8007af0 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ada:	4643      	mov	r3, r8
 8007adc:	0028      	movs	r0, r5
 8007ade:	8819      	ldrh	r1, [r3, #0]
 8007ae0:	f7ff fe4c 	bl	800777c <EE_VerifyPageFullWriteVariable>
 8007ae4:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae6:	4882      	ldr	r0, [pc, #520]	; (8007cf0 <EE_Init+0x28c>)
 8007ae8:	f009 f80a 	bl	8010b00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1d8      	bne.n	8007aa2 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007af0:	4b82      	ldr	r3, [pc, #520]	; (8007cfc <EE_Init+0x298>)
 8007af2:	3401      	adds	r4, #1
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d1e3      	bne.n	8007ac0 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007af8:	2200      	movs	r2, #0
 8007afa:	2300      	movs	r3, #0
 8007afc:	4979      	ldr	r1, [pc, #484]	; (8007ce4 <EE_Init+0x280>)
 8007afe:	2001      	movs	r0, #1
 8007b00:	f009 f842 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b04:	487a      	ldr	r0, [pc, #488]	; (8007cf0 <EE_Init+0x28c>)
 8007b06:	f008 fffb 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d125      	bne.n	8007b5a <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4c7b      	ldr	r4, [pc, #492]	; (8007d00 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b12:	4873      	ldr	r0, [pc, #460]	; (8007ce0 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	4393      	bics	r3, r2
 8007b18:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b1a:	f009 f905 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b1e:	4874      	ldr	r0, [pc, #464]	; (8007cf0 <EE_Init+0x28c>)
 8007b20:	f008 ffee 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d118      	bne.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b28:	4876      	ldr	r0, [pc, #472]	; (8007d04 <EE_Init+0x2a0>)
 8007b2a:	f009 f8fd 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b2e:	4870      	ldr	r0, [pc, #448]	; (8007cf0 <EE_Init+0x28c>)
 8007b30:	f008 ffe6 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d110      	bne.n	8007b5a <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b38:	2202      	movs	r2, #2
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	4393      	bics	r3, r2
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	e7ac      	b.n	8007a9c <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d07b      	beq.n	8007c3e <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007b46:	428a      	cmp	r2, r1
 8007b48:	d100      	bne.n	8007b4c <EE_Init+0xe8>
 8007b4a:	e08f      	b.n	8007c6c <EE_Init+0x208>
				FlashStatus =EE_Format();
 8007b4c:	f7ff ff3a 	bl	80079c4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b50:	4867      	ldr	r0, [pc, #412]	; (8007cf0 <EE_Init+0x28c>)
 8007b52:	f008 ffd5 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d0a0      	beq.n	8007a9c <EE_Init+0x38>
						return pFlash.ErrorCode;
 8007b5a:	4b6b      	ldr	r3, [pc, #428]	; (8007d08 <EE_Init+0x2a4>)
 8007b5c:	69dd      	ldr	r5, [r3, #28]
 8007b5e:	b2ad      	uxth	r5, r5
 8007b60:	e79f      	b.n	8007aa2 <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	d143      	bne.n	8007bee <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b66:	4b63      	ldr	r3, [pc, #396]	; (8007cf4 <EE_Init+0x290>)
	int16_t x =-1;
 8007b68:	2601      	movs	r6, #1
 8007b6a:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b6c:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b6e:	4f67      	ldr	r7, [pc, #412]	; (8007d0c <EE_Init+0x2a8>)
	int16_t x =-1;
 8007b70:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b72:	883b      	ldrh	r3, [r7, #0]
 8007b74:	b2a5      	uxth	r5, r4
 8007b76:	42ab      	cmp	r3, r5
 8007b78:	d100      	bne.n	8007b7c <EE_Init+0x118>
						x =VarIdx;
 8007b7a:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007b7c:	42b4      	cmp	r4, r6
 8007b7e:	d011      	beq.n	8007ba4 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b80:	4641      	mov	r1, r8
 8007b82:	0028      	movs	r0, r5
 8007b84:	f7ff fe58 	bl	8007838 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b88:	2801      	cmp	r0, #1
 8007b8a:	d00b      	beq.n	8007ba4 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b8c:	4643      	mov	r3, r8
 8007b8e:	0028      	movs	r0, r5
 8007b90:	8819      	ldrh	r1, [r3, #0]
 8007b92:	f7ff fdf3 	bl	800777c <EE_VerifyPageFullWriteVariable>
 8007b96:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b98:	4855      	ldr	r0, [pc, #340]	; (8007cf0 <EE_Init+0x28c>)
 8007b9a:	f008 ffb1 	bl	8010b00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d000      	beq.n	8007ba4 <EE_Init+0x140>
 8007ba2:	e77e      	b.n	8007aa2 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007ba4:	4b55      	ldr	r3, [pc, #340]	; (8007cfc <EE_Init+0x298>)
 8007ba6:	3401      	adds	r4, #1
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	d1e2      	bne.n	8007b72 <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007bac:	2200      	movs	r2, #0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	494b      	ldr	r1, [pc, #300]	; (8007ce0 <EE_Init+0x27c>)
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	f008 ffe8 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bb8:	484d      	ldr	r0, [pc, #308]	; (8007cf0 <EE_Init+0x28c>)
 8007bba:	f008 ffa1 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1cb      	bne.n	8007b5a <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4c4e      	ldr	r4, [pc, #312]	; (8007d00 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bc6:	4847      	ldr	r0, [pc, #284]	; (8007ce4 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	4393      	bics	r3, r2
 8007bcc:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bce:	f009 f8ab 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd2:	4847      	ldr	r0, [pc, #284]	; (8007cf0 <EE_Init+0x28c>)
 8007bd4:	f008 ff94 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1be      	bne.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bdc:	484c      	ldr	r0, [pc, #304]	; (8007d10 <EE_Init+0x2ac>)
 8007bde:	f009 f8a3 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007be2:	4843      	ldr	r0, [pc, #268]	; (8007cf0 <EE_Init+0x28c>)
 8007be4:	f008 ff8c 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0a5      	beq.n	8007b38 <EE_Init+0xd4>
 8007bec:	e7b5      	b.n	8007b5a <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bee:	4b3f      	ldr	r3, [pc, #252]	; (8007cec <EE_Init+0x288>)
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d1ab      	bne.n	8007b4c <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bf4:	0028      	movs	r0, r5
 8007bf6:	f009 f897 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bfa:	483d      	ldr	r0, [pc, #244]	; (8007cf0 <EE_Init+0x28c>)
 8007bfc:	f008 ff80 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d1aa      	bne.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c04:	4842      	ldr	r0, [pc, #264]	; (8007d10 <EE_Init+0x2ac>)
 8007c06:	f009 f88f 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c0a:	4839      	ldr	r0, [pc, #228]	; (8007cf0 <EE_Init+0x28c>)
 8007c0c:	f008 ff78 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1a2      	bne.n	8007b5a <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c14:	2202      	movs	r2, #2
 8007c16:	4d3a      	ldr	r5, [pc, #232]	; (8007d00 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c18:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c1a:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c1c:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c1e:	4393      	bics	r3, r2
 8007c20:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	f008 ffaf 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c2a:	4831      	ldr	r0, [pc, #196]	; (8007cf0 <EE_Init+0x28c>)
 8007c2c:	f008 ff68 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d192      	bne.n	8007b5a <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c34:	2201      	movs	r2, #1
 8007c36:	692b      	ldr	r3, [r5, #16]
 8007c38:	4393      	bics	r3, r2
 8007c3a:	612b      	str	r3, [r5, #16]
 8007c3c:	e72e      	b.n	8007a9c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c3e:	0020      	movs	r0, r4
 8007c40:	f009 f872 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c44:	482a      	ldr	r0, [pc, #168]	; (8007cf0 <EE_Init+0x28c>)
 8007c46:	f008 ff5b 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d185      	bne.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c4e:	482d      	ldr	r0, [pc, #180]	; (8007d04 <EE_Init+0x2a0>)
 8007c50:	f009 f86a 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c54:	4826      	ldr	r0, [pc, #152]	; (8007cf0 <EE_Init+0x28c>)
 8007c56:	f008 ff53 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d000      	beq.n	8007c60 <EE_Init+0x1fc>
 8007c5e:	e77c      	b.n	8007b5a <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c60:	2102      	movs	r1, #2
 8007c62:	4a27      	ldr	r2, [pc, #156]	; (8007d00 <EE_Init+0x29c>)
 8007c64:	6913      	ldr	r3, [r2, #16]
 8007c66:	438b      	bics	r3, r1
 8007c68:	6113      	str	r3, [r2, #16]
 8007c6a:	e717      	b.n	8007a9c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c6c:	0020      	movs	r0, r4
 8007c6e:	f009 f85b 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c72:	481f      	ldr	r0, [pc, #124]	; (8007cf0 <EE_Init+0x28c>)
 8007c74:	f008 ff44 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d000      	beq.n	8007c7e <EE_Init+0x21a>
 8007c7c:	e76d      	b.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c7e:	4821      	ldr	r0, [pc, #132]	; (8007d04 <EE_Init+0x2a0>)
 8007c80:	f009 f852 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c84:	481a      	ldr	r0, [pc, #104]	; (8007cf0 <EE_Init+0x28c>)
 8007c86:	f008 ff3b 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d000      	beq.n	8007c90 <EE_Init+0x22c>
 8007c8e:	e764      	b.n	8007b5a <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c90:	2202      	movs	r2, #2
 8007c92:	4c1b      	ldr	r4, [pc, #108]	; (8007d00 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007c94:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c96:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007c98:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c9a:	4393      	bics	r3, r2
 8007c9c:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f008 ff71 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ca6:	4812      	ldr	r0, [pc, #72]	; (8007cf0 <EE_Init+0x28c>)
 8007ca8:	f008 ff2a 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d000      	beq.n	8007cb2 <EE_Init+0x24e>
 8007cb0:	e753      	b.n	8007b5a <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	4393      	bics	r3, r2
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	e6ef      	b.n	8007a9c <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cbc:	0028      	movs	r0, r5
 8007cbe:	f009 f833 	bl	8010d28 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cc2:	480b      	ldr	r0, [pc, #44]	; (8007cf0 <EE_Init+0x28c>)
 8007cc4:	f008 ff1c 	bl	8010b00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d000      	beq.n	8007cce <EE_Init+0x26a>
 8007ccc:	e745      	b.n	8007b5a <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cce:	4810      	ldr	r0, [pc, #64]	; (8007d10 <EE_Init+0x2ac>)
 8007cd0:	f009 f82a 	bl	8010d28 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd4:	4806      	ldr	r0, [pc, #24]	; (8007cf0 <EE_Init+0x28c>)
 8007cd6:	f008 ff13 	bl	8010b00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0c0      	beq.n	8007c60 <EE_Init+0x1fc>
 8007cde:	e73c      	b.n	8007b5a <EE_Init+0xf6>
 8007ce0:	0801e000 	.word	0x0801e000
 8007ce4:	0801f000 	.word	0x0801f000
 8007ce8:	0000eeee 	.word	0x0000eeee
 8007cec:	0000ffff 	.word	0x0000ffff
 8007cf0:	0000c350 	.word	0x0000c350
 8007cf4:	20001710 	.word	0x20001710
 8007cf8:	0801f006 	.word	0x0801f006
 8007cfc:	00000401 	.word	0x00000401
 8007d00:	40022000 	.word	0x40022000
 8007d04:	0801e800 	.word	0x0801e800
 8007d08:	200072b0 	.word	0x200072b0
 8007d0c:	0801e006 	.word	0x0801e006
 8007d10:	0801f800 	.word	0x0801f800

08007d14 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d16:	46c6      	mov	lr, r8
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d18:	26a0      	movs	r6, #160	; 0xa0
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 8007d1e:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d20:	4d5a      	ldr	r5, [pc, #360]	; (8007e8c <MX_FREERTOS_Init+0x178>)
void MX_FREERTOS_Init(void){
 8007d22:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d24:	0076      	lsls	r6, r6, #1
 8007d26:	9501      	str	r5, [sp, #4]
 8007d28:	9700      	str	r7, [sp, #0]
 8007d2a:	0032      	movs	r2, r6
 8007d2c:	9403      	str	r4, [sp, #12]
 8007d2e:	9402      	str	r4, [sp, #8]
 8007d30:	2300      	movs	r3, #0
 8007d32:	4957      	ldr	r1, [pc, #348]	; (8007e90 <MX_FREERTOS_Init+0x17c>)
 8007d34:	4857      	ldr	r0, [pc, #348]	; (8007e94 <MX_FREERTOS_Init+0x180>)
 8007d36:	f006 fc5f 	bl	800e5f8 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007d3a:	1d2b      	adds	r3, r5, #4
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	9700      	str	r7, [sp, #0]
 8007d40:	0032      	movs	r2, r6
 8007d42:	9403      	str	r4, [sp, #12]
 8007d44:	9402      	str	r4, [sp, #8]
 8007d46:	2300      	movs	r3, #0
 8007d48:	4953      	ldr	r1, [pc, #332]	; (8007e98 <MX_FREERTOS_Init+0x184>)
 8007d4a:	4854      	ldr	r0, [pc, #336]	; (8007e9c <MX_FREERTOS_Init+0x188>)
 8007d4c:	f006 fc54 	bl	800e5f8 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007d50:	002b      	movs	r3, r5
 8007d52:	3308      	adds	r3, #8
 8007d54:	0032      	movs	r2, r6
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	9700      	str	r7, [sp, #0]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4950      	ldr	r1, [pc, #320]	; (8007ea0 <MX_FREERTOS_Init+0x18c>)
 8007d5e:	9403      	str	r4, [sp, #12]
 8007d60:	9402      	str	r4, [sp, #8]
 8007d62:	4850      	ldr	r0, [pc, #320]	; (8007ea4 <MX_FREERTOS_Init+0x190>)
 8007d64:	f006 fc48 	bl	800e5f8 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007d68:	f7ff fb84 	bl	8007474 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007d6c:	002b      	movs	r3, r5
 8007d6e:	330c      	adds	r3, #12
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	9700      	str	r7, [sp, #0]
 8007d74:	0032      	movs	r2, r6
 8007d76:	9403      	str	r4, [sp, #12]
 8007d78:	9402      	str	r4, [sp, #8]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	494a      	ldr	r1, [pc, #296]	; (8007ea8 <MX_FREERTOS_Init+0x194>)
 8007d7e:	484b      	ldr	r0, [pc, #300]	; (8007eac <MX_FREERTOS_Init+0x198>)
 8007d80:	f006 fc3a 	bl	800e5f8 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007d84:	002b      	movs	r3, r5
 8007d86:	3310      	adds	r3, #16
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2304      	movs	r3, #4
 8007d8c:	4f48      	ldr	r7, [pc, #288]	; (8007eb0 <MX_FREERTOS_Init+0x19c>)
 8007d8e:	4698      	mov	r8, r3
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	0032      	movs	r2, r6
 8007d94:	9403      	str	r4, [sp, #12]
 8007d96:	9402      	str	r4, [sp, #8]
 8007d98:	3b03      	subs	r3, #3
 8007d9a:	4946      	ldr	r1, [pc, #280]	; (8007eb4 <MX_FREERTOS_Init+0x1a0>)
 8007d9c:	0038      	movs	r0, r7
 8007d9e:	f006 fc2b 	bl	800e5f8 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007da2:	002b      	movs	r3, r5
 8007da4:	3314      	adds	r3, #20
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	4643      	mov	r3, r8
 8007daa:	0032      	movs	r2, r6
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	9403      	str	r4, [sp, #12]
 8007db0:	9402      	str	r4, [sp, #8]
 8007db2:	3b02      	subs	r3, #2
 8007db4:	4940      	ldr	r1, [pc, #256]	; (8007eb8 <MX_FREERTOS_Init+0x1a4>)
 8007db6:	0038      	movs	r0, r7
 8007db8:	f006 fc1e 	bl	800e5f8 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007dbc:	002b      	movs	r3, r5
 8007dbe:	3318      	adds	r3, #24
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	4643      	mov	r3, r8
 8007dc4:	0032      	movs	r2, r6
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	9403      	str	r4, [sp, #12]
 8007dca:	9402      	str	r4, [sp, #8]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	493b      	ldr	r1, [pc, #236]	; (8007ebc <MX_FREERTOS_Init+0x1a8>)
 8007dd0:	0038      	movs	r0, r7
 8007dd2:	f006 fc11 	bl	800e5f8 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007dd6:	002b      	movs	r3, r5
 8007dd8:	331c      	adds	r3, #28
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	4643      	mov	r3, r8
 8007dde:	0032      	movs	r2, r6
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	9403      	str	r4, [sp, #12]
 8007de4:	9402      	str	r4, [sp, #8]
 8007de6:	4936      	ldr	r1, [pc, #216]	; (8007ec0 <MX_FREERTOS_Init+0x1ac>)
 8007de8:	0038      	movs	r0, r7
 8007dea:	f006 fc05 	bl	800e5f8 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007dee:	4643      	mov	r3, r8
 8007df0:	3520      	adds	r5, #32
 8007df2:	0032      	movs	r2, r6
 8007df4:	9501      	str	r5, [sp, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	9403      	str	r4, [sp, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	9402      	str	r4, [sp, #8]
 8007dfe:	4931      	ldr	r1, [pc, #196]	; (8007ec4 <MX_FREERTOS_Init+0x1b0>)
 8007e00:	0038      	movs	r0, r7
 8007e02:	f006 fbf9 	bl	800e5f8 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e06:	2101      	movs	r1, #1
 8007e08:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007e0a:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e0c:	f005 fd18 	bl	800d840 <osSemaphoreCreate>
 8007e10:	4e2d      	ldr	r6, [pc, #180]	; (8007ec8 <MX_FREERTOS_Init+0x1b4>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e12:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e14:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e16:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007e18:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e1a:	f005 fd11 	bl	800d840 <osSemaphoreCreate>
 8007e1e:	4d2b      	ldr	r5, [pc, #172]	; (8007ecc <MX_FREERTOS_Init+0x1b8>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e20:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e22:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e24:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007e26:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e28:	f005 fd0a 	bl	800d840 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e2c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e2e:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e30:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007e32:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e34:	f005 fd04 	bl	800d840 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e38:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e3a:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e3c:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007e3e:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e40:	f005 fcfe 	bl	800d840 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e44:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e46:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e48:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007e4a:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e4c:	f005 fcf8 	bl	800d840 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e50:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e52:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e54:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007e56:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e58:	f005 fcf2 	bl	800d840 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e5c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e5e:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e60:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007e62:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e64:	f005 fcec 	bl	800d840 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e68:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e6a:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e6c:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007e6e:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e70:	f005 fce6 	bl	800d840 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e74:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e76:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e78:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007e7a:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e7c:	f005 fce0 	bl	800d840 <osSemaphoreCreate>
 8007e80:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007e82:	b00e      	add	sp, #56	; 0x38
 8007e84:	bc04      	pop	{r2}
 8007e86:	4690      	mov	r8, r2
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	20001714 	.word	0x20001714
 8007e90:	0801a430 	.word	0x0801a430
 8007e94:	080082d1 	.word	0x080082d1
 8007e98:	0801a43c 	.word	0x0801a43c
 8007e9c:	08009bb9 	.word	0x08009bb9
 8007ea0:	0801a448 	.word	0x0801a448
 8007ea4:	080129ad 	.word	0x080129ad
 8007ea8:	0801a454 	.word	0x0801a454
 8007eac:	080052e5 	.word	0x080052e5
 8007eb0:	08009fa5 	.word	0x08009fa5
 8007eb4:	0801a45c 	.word	0x0801a45c
 8007eb8:	0801a468 	.word	0x0801a468
 8007ebc:	0801a474 	.word	0x0801a474
 8007ec0:	0801a480 	.word	0x0801a480
 8007ec4:	0801a48c 	.word	0x0801a48c
 8007ec8:	20006e58 	.word	0x20006e58
 8007ecc:	20006e38 	.word	0x20006e38

08007ed0 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed2:	46de      	mov	lr, fp
 8007ed4:	4657      	mov	r7, sl
 8007ed6:	464e      	mov	r6, r9
 8007ed8:	4645      	mov	r5, r8
 8007eda:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007edc:	4bd4      	ldr	r3, [pc, #848]	; (8008230 <ExecuteMonitor+0x360>)
{
 8007ede:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 8007ee0:	469b      	mov	fp, r3
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d006      	beq.n	8007ef6 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007ee8:	b005      	add	sp, #20
 8007eea:	bc3c      	pop	{r2, r3, r4, r5}
 8007eec:	4690      	mov	r8, r2
 8007eee:	4699      	mov	r9, r3
 8007ef0:	46a2      	mov	sl, r4
 8007ef2:	46ab      	mov	fp, r5
 8007ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	465a      	mov	r2, fp
 8007efa:	6013      	str	r3, [r2, #0]
	flag=0;
 8007efc:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 8007efe:	3320      	adds	r3, #32
 8007f00:	7153      	strb	r3, [r2, #5]
 8007f02:	4bcc      	ldr	r3, [pc, #816]	; (8008234 <ExecuteMonitor+0x364>)
 8007f04:	4ecc      	ldr	r6, [pc, #816]	; (8008238 <ExecuteMonitor+0x368>)
 8007f06:	4699      	mov	r9, r3
 8007f08:	4bcc      	ldr	r3, [pc, #816]	; (800823c <ExecuteMonitor+0x36c>)
 8007f0a:	4dcd      	ldr	r5, [pc, #820]	; (8008240 <ExecuteMonitor+0x370>)
 8007f0c:	469a      	mov	sl, r3
 8007f0e:	4ccd      	ldr	r4, [pc, #820]	; (8008244 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 8007f10:	2200      	movs	r2, #0
 8007f12:	4bcd      	ldr	r3, [pc, #820]	; (8008248 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 8007f14:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 8007f16:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f18:	2320      	movs	r3, #32
 8007f1a:	4698      	mov	r8, r3
 8007f1c:	e004      	b.n	8007f28 <ExecuteMonitor+0x58>
 8007f1e:	2a01      	cmp	r2, #1
 8007f20:	d04c      	beq.n	8007fbc <ExecuteMonitor+0xec>
 8007f22:	2a02      	cmp	r2, #2
 8007f24:	d100      	bne.n	8007f28 <ExecuteMonitor+0x58>
 8007f26:	e0a8      	b.n	800807a <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007f28:	464b      	mov	r3, r9
		            	    Delay_us(100);
 8007f2a:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007f2c:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 8007f2e:	f005 f981 	bl	800d234 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007f32:	465b      	mov	r3, fp
 8007f34:	464a      	mov	r2, r9
 8007f36:	795b      	ldrb	r3, [r3, #5]
 8007f38:	7812      	ldrb	r2, [r2, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d00b      	beq.n	8007f56 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007f3e:	4ac2      	ldr	r2, [pc, #776]	; (8008248 <ExecuteMonitor+0x378>)
 8007f40:	48c1      	ldr	r0, [pc, #772]	; (8008248 <ExecuteMonitor+0x378>)
 8007f42:	7812      	ldrb	r2, [r2, #0]
 8007f44:	1c51      	adds	r1, r2, #1
 8007f46:	7001      	strb	r1, [r0, #0]
 8007f48:	2124      	movs	r1, #36	; 0x24
 8007f4a:	4452      	add	r2, sl
 8007f4c:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 8007f4e:	464a      	mov	r2, r9
 8007f50:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007f52:	465a      	mov	r2, fp
 8007f54:	7157      	strb	r7, [r2, #5]
 8007f56:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f58:	4641      	mov	r1, r8
 8007f5a:	7912      	ldrb	r2, [r2, #4]
 8007f5c:	438b      	bics	r3, r1
 8007f5e:	d1de      	bne.n	8007f1e <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d129      	bne.n	8007fb8 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007f64:	4bb8      	ldr	r3, [pc, #736]	; (8008248 <ExecuteMonitor+0x378>)
 8007f66:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007f68:	4653      	mov	r3, sl
 8007f6a:	3224      	adds	r2, #36	; 0x24
 8007f6c:	5c9b      	ldrb	r3, [r3, r2]
 8007f6e:	2b5b      	cmp	r3, #91	; 0x5b
 8007f70:	d100      	bne.n	8007f74 <ExecuteMonitor+0xa4>
 8007f72:	e0eb      	b.n	800814c <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007f74:	2b23      	cmp	r3, #35	; 0x23
 8007f76:	d100      	bne.n	8007f7a <ExecuteMonitor+0xaa>
 8007f78:	e141      	b.n	80081fe <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007f7a:	2b3d      	cmp	r3, #61	; 0x3d
 8007f7c:	d100      	bne.n	8007f80 <ExecuteMonitor+0xb0>
 8007f7e:	e175      	b.n	800826c <ExecuteMonitor+0x39c>
 8007f80:	2338      	movs	r3, #56	; 0x38
 8007f82:	4652      	mov	r2, sl
 8007f84:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007f86:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007f88:	4bb0      	ldr	r3, [pc, #704]	; (800824c <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007f8a:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007f8c:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007f8e:	304c      	adds	r0, #76	; 0x4c
 8007f90:	1bcf      	subs	r7, r1, r7
 8007f92:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007f94:	4657      	mov	r7, sl
 8007f96:	3738      	adds	r7, #56	; 0x38
 8007f98:	0039      	movs	r1, r7
 8007f9a:	220f      	movs	r2, #15
 8007f9c:	f00a ffd3 	bl	8012f46 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	2214      	movs	r2, #20
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	3024      	adds	r0, #36	; 0x24
 8007fa8:	f00a ffd6 	bl	8012f58 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007fac:	2214      	movs	r2, #20
 8007fae:	2100      	movs	r1, #0
 8007fb0:	0038      	movs	r0, r7
 8007fb2:	f00a ffd1 	bl	8012f58 <memset>
 8007fb6:	e7ab      	b.n	8007f10 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007fb8:	2a01      	cmp	r2, #1
 8007fba:	d15b      	bne.n	8008074 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007fbc:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007fbe:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007fc0:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8007fc2:	4ba3      	ldr	r3, [pc, #652]	; (8008250 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007fc4:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8007fc6:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007fc8:	4ba2      	ldr	r3, [pc, #648]	; (8008254 <ExecuteMonitor+0x384>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d02e      	beq.n	800802e <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007fd0:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007fd6:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8007fd8:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007fda:	0010      	movs	r0, r2
 8007fdc:	2720      	movs	r7, #32
 8007fde:	001a      	movs	r2, r3
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	e002      	b.n	8007fea <ExecuteMonitor+0x11a>
 8007fe4:	4b9a      	ldr	r3, [pc, #616]	; (8008250 <ExecuteMonitor+0x380>)
 8007fe6:	781a      	ldrb	r2, [r3, #0]
 8007fe8:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007fea:	1c58      	adds	r0, r3, #1
 8007fec:	7028      	strb	r0, [r5, #0]
 8007fee:	1c48      	adds	r0, r1, #1
 8007ff0:	7030      	strb	r0, [r6, #0]
 8007ff2:	0110      	lsls	r0, r2, #4
 8007ff4:	1a82      	subs	r2, r0, r2
 8007ff6:	4452      	add	r2, sl
 8007ff8:	18d2      	adds	r2, r2, r3
 8007ffa:	4643      	mov	r3, r8
 8007ffc:	5cd3      	ldrb	r3, [r2, r3]
 8007ffe:	2244      	movs	r2, #68	; 0x44
 8008000:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 8008002:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008004:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8008006:	f007 fb7f 	bl	800f708 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800800a:	7831      	ldrb	r1, [r6, #0]
 800800c:	1863      	adds	r3, r4, r1
 800800e:	3343      	adds	r3, #67	; 0x43
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	43bb      	bics	r3, r7
 8008014:	d1e6      	bne.n	8007fe4 <ExecuteMonitor+0x114>
		                   counter++;
 8008016:	4b8e      	ldr	r3, [pc, #568]	; (8008250 <ExecuteMonitor+0x380>)
 8008018:	4a8d      	ldr	r2, [pc, #564]	; (8008250 <ExecuteMonitor+0x380>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	b2db      	uxtb	r3, r3
 8008020:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8008022:	2201      	movs	r2, #1
 8008024:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 8008026:	4a8b      	ldr	r2, [pc, #556]	; (8008254 <ExecuteMonitor+0x384>)
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d1d4      	bne.n	8007fd8 <ExecuteMonitor+0x108>
		          		   flag=0;
 800802e:	2300      	movs	r3, #0
 8008030:	465a      	mov	r2, fp
 8008032:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8008034:	4a86      	ldr	r2, [pc, #536]	; (8008250 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008036:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 8008038:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800803a:	4a87      	ldr	r2, [pc, #540]	; (8008258 <ExecuteMonitor+0x388>)
 800803c:	7013      	strb	r3, [r2, #0]
 800803e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008040:	4a86      	ldr	r2, [pc, #536]	; (800825c <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 8008042:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008044:	18d2      	adds	r2, r2, r3
 8008046:	18e3      	adds	r3, r4, r3
 8008048:	5ddb      	ldrb	r3, [r3, r7]
 800804a:	3281      	adds	r2, #129	; 0x81
 800804c:	32ff      	adds	r2, #255	; 0xff
 800804e:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8008050:	f007 fb5a 	bl	800f708 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008054:	4b80      	ldr	r3, [pc, #512]	; (8008258 <ExecuteMonitor+0x388>)
 8008056:	4a80      	ldr	r2, [pc, #512]	; (8008258 <ExecuteMonitor+0x388>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	7013      	strb	r3, [r2, #0]
 8008060:	2b3f      	cmp	r3, #63	; 0x3f
 8008062:	d9ed      	bls.n	8008040 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008064:	0020      	movs	r0, r4
 8008066:	2240      	movs	r2, #64	; 0x40
 8008068:	3044      	adds	r0, #68	; 0x44
 800806a:	2100      	movs	r1, #0
 800806c:	f00a ff74 	bl	8012f58 <memset>
 8008070:	465b      	mov	r3, fp
 8008072:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8008074:	2a02      	cmp	r2, #2
 8008076:	d000      	beq.n	800807a <ExecuteMonitor+0x1aa>
 8008078:	e74a      	b.n	8007f10 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 800807a:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 800807c:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 800807e:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8008080:	4b73      	ldr	r3, [pc, #460]	; (8008250 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8008082:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8008084:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8008086:	4b73      	ldr	r3, [pc, #460]	; (8008254 <ExecuteMonitor+0x384>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d033      	beq.n	80080f6 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800808e:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 8008090:	2100      	movs	r1, #0
 8008092:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008094:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 8008096:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008098:	0010      	movs	r0, r2
 800809a:	2720      	movs	r7, #32
 800809c:	001a      	movs	r2, r3
 800809e:	0003      	movs	r3, r0
 80080a0:	e001      	b.n	80080a6 <ExecuteMonitor+0x1d6>
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080a6:	1c58      	adds	r0, r3, #1
 80080a8:	7028      	strb	r0, [r5, #0]
 80080aa:	1c48      	adds	r0, r1, #1
 80080ac:	7030      	strb	r0, [r6, #0]
 80080ae:	0110      	lsls	r0, r2, #4
 80080b0:	1a82      	subs	r2, r0, r2
 80080b2:	4452      	add	r2, sl
 80080b4:	18d2      	adds	r2, r2, r3
 80080b6:	4643      	mov	r3, r8
 80080b8:	5cd3      	ldrb	r3, [r2, r3]
 80080ba:	2244      	movs	r2, #68	; 0x44
 80080bc:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 80080be:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080c0:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 80080c2:	f007 fb21 	bl	800f708 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80080c6:	7831      	ldrb	r1, [r6, #0]
 80080c8:	1863      	adds	r3, r4, r1
 80080ca:	3343      	adds	r3, #67	; 0x43
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	4b60      	ldr	r3, [pc, #384]	; (8008250 <ExecuteMonitor+0x380>)
 80080d0:	43ba      	bics	r2, r7
 80080d2:	d1e6      	bne.n	80080a2 <ExecuteMonitor+0x1d2>
   		             counter++;
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	485e      	ldr	r0, [pc, #376]	; (8008250 <ExecuteMonitor+0x380>)
 80080d8:	3301      	adds	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 80080de:	2001      	movs	r0, #1
 80080e0:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 80080e2:	485c      	ldr	r0, [pc, #368]	; (8008254 <ExecuteMonitor+0x384>)
 80080e4:	7800      	ldrb	r0, [r0, #0]
 80080e6:	4298      	cmp	r0, r3
 80080e8:	d1d5      	bne.n	8008096 <ExecuteMonitor+0x1c6>
 80080ea:	465b      	mov	r3, fp
		            counter=0;
 80080ec:	4958      	ldr	r1, [pc, #352]	; (8008250 <ExecuteMonitor+0x380>)
 80080ee:	791b      	ldrb	r3, [r3, #4]
 80080f0:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01e      	beq.n	8008134 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80080f6:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80080f8:	2200      	movs	r2, #0
 80080fa:	4b57      	ldr	r3, [pc, #348]	; (8008258 <ExecuteMonitor+0x388>)
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008100:	4a56      	ldr	r2, [pc, #344]	; (800825c <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 8008102:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008104:	18d2      	adds	r2, r2, r3
 8008106:	18e3      	adds	r3, r4, r3
 8008108:	5ddb      	ldrb	r3, [r3, r7]
 800810a:	3281      	adds	r2, #129	; 0x81
 800810c:	32ff      	adds	r2, #255	; 0xff
 800810e:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8008110:	f005 f890 	bl	800d234 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008114:	4b50      	ldr	r3, [pc, #320]	; (8008258 <ExecuteMonitor+0x388>)
 8008116:	4a50      	ldr	r2, [pc, #320]	; (8008258 <ExecuteMonitor+0x388>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	3301      	adds	r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	7013      	strb	r3, [r2, #0]
 8008120:	2b3f      	cmp	r3, #63	; 0x3f
 8008122:	d9ed      	bls.n	8008100 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 8008124:	465b      	mov	r3, fp
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	f007 faee 	bl	800f708 <HAL_Delay>
                  while(flag != NonActive)
 800812c:	465b      	mov	r3, fp
 800812e:	791b      	ldrb	r3, [r3, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e1      	bne.n	80080f8 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008134:	0020      	movs	r0, r4
 8008136:	2240      	movs	r2, #64	; 0x40
 8008138:	2100      	movs	r1, #0
 800813a:	3044      	adds	r0, #68	; 0x44
 800813c:	f00a ff0c 	bl	8012f58 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8008140:	22c0      	movs	r2, #192	; 0xc0
 8008142:	2100      	movs	r1, #0
 8008144:	4846      	ldr	r0, [pc, #280]	; (8008260 <ExecuteMonitor+0x390>)
 8008146:	f00a ff07 	bl	8012f58 <memset>
 800814a:	e6e1      	b.n	8007f10 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 800814c:	4a3e      	ldr	r2, [pc, #248]	; (8008248 <ExecuteMonitor+0x378>)
 800814e:	3b5a      	subs	r3, #90	; 0x5a
 8008150:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8008152:	4b44      	ldr	r3, [pc, #272]	; (8008264 <ExecuteMonitor+0x394>)
 8008154:	210a      	movs	r1, #10
 8008156:	781f      	ldrb	r7, [r3, #0]
 8008158:	4653      	mov	r3, sl
 800815a:	9701      	str	r7, [sp, #4]
 800815c:	3324      	adds	r3, #36	; 0x24
 800815e:	7858      	ldrb	r0, [r3, #1]
 8008160:	f7f8 f87c 	bl	800025c <__aeabi_uidivmod>
 8008164:	2303      	movs	r3, #3
 8008166:	b2c9      	uxtb	r1, r1
 8008168:	4698      	mov	r8, r3
 800816a:	42b9      	cmp	r1, r7
 800816c:	d101      	bne.n	8008172 <ExecuteMonitor+0x2a2>
 800816e:	e0a1      	b.n	80082b4 <ExecuteMonitor+0x3e4>
 8008170:	46b8      	mov	r8, r7
 8008172:	4643      	mov	r3, r8
 8008174:	1c9f      	adds	r7, r3, #2
 8008176:	4653      	mov	r3, sl
 8008178:	2224      	movs	r2, #36	; 0x24
 800817a:	4443      	add	r3, r8
 800817c:	5c98      	ldrb	r0, [r3, r2]
 800817e:	210a      	movs	r1, #10
 8008180:	f7f8 f86c 	bl	800025c <__aeabi_uidivmod>
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	b2c9      	uxtb	r1, r1
 8008188:	b2ff      	uxtb	r7, r7
 800818a:	4299      	cmp	r1, r3
 800818c:	d1f0      	bne.n	8008170 <ExecuteMonitor+0x2a0>
 800818e:	4643      	mov	r3, r8
 8008190:	46b8      	mov	r8, r7
 8008192:	3301      	adds	r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 800819a:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <ExecuteMonitor+0x378>)
 800819c:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800819e:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 80081a0:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	5c9b      	ldrb	r3, [r3, r2]
 80081a6:	210a      	movs	r1, #10
 80081a8:	0018      	movs	r0, r3
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	f7f8 f856 	bl	800025c <__aeabi_uidivmod>
 80081b0:	2338      	movs	r3, #56	; 0x38
 80081b2:	4652      	mov	r2, sl
 80081b4:	b2cf      	uxtb	r7, r1
 80081b6:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	2b5d      	cmp	r3, #93	; 0x5d
 80081bc:	d00d      	beq.n	80081da <ExecuteMonitor+0x30a>
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	3301      	adds	r3, #1
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	e000      	b.n	80081c8 <ExecuteMonitor+0x2f8>
 80081c6:	0013      	movs	r3, r2
 80081c8:	2124      	movs	r1, #36	; 0x24
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	4453      	add	r3, sl
 80081ce:	5c5b      	ldrb	r3, [r3, r1]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	2b5d      	cmp	r3, #93	; 0x5d
 80081d4:	d1f7      	bne.n	80081c6 <ExecuteMonitor+0x2f6>
 80081d6:	4690      	mov	r8, r2
 80081d8:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 80081da:	4642      	mov	r2, r8
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80081de:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 80081e0:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80081e6:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 80081e8:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80081ea:	9b02      	ldr	r3, [sp, #8]
 80081ec:	2214      	movs	r2, #20
 80081ee:	469c      	mov	ip, r3
 80081f0:	3124      	adds	r1, #36	; 0x24
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	4461      	add	r1, ip
 80081f6:	3039      	adds	r0, #57	; 0x39
 80081f8:	f00a fea5 	bl	8012f46 <memcpy>
 80081fc:	e6c3      	b.n	8007f86 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80081fe:	4653      	mov	r3, sl
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	7858      	ldrb	r0, [r3, #1]
 8008204:	210a      	movs	r1, #10
 8008206:	f7f8 f829 	bl	800025c <__aeabi_uidivmod>
 800820a:	4652      	mov	r2, sl
 800820c:	2338      	movs	r3, #56	; 0x38
 800820e:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008210:	4650      	mov	r0, sl
 8008212:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008214:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8008216:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <ExecuteMonitor+0x378>)
 8008218:	3b36      	subs	r3, #54	; 0x36
 800821a:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 800821c:	4a12      	ldr	r2, [pc, #72]	; (8008268 <ExecuteMonitor+0x398>)
 800821e:	3b01      	subs	r3, #1
 8008220:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008222:	3126      	adds	r1, #38	; 0x26
 8008224:	2212      	movs	r2, #18
 8008226:	3039      	adds	r0, #57	; 0x39
 8008228:	f00a fe8d 	bl	8012f46 <memcpy>
 800822c:	e6ab      	b.n	8007f86 <ExecuteMonitor+0xb6>
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	20000000 	.word	0x20000000
 8008234:	20006e34 	.word	0x20006e34
 8008238:	20006e78 	.word	0x20006e78
 800823c:	20001714 	.word	0x20001714
 8008240:	20006e75 	.word	0x20006e75
 8008244:	20001794 	.word	0x20001794
 8008248:	20006e55 	.word	0x20006e55
 800824c:	20006e77 	.word	0x20006e77
 8008250:	20006e56 	.word	0x20006e56
 8008254:	20006e74 	.word	0x20006e74
 8008258:	20006e35 	.word	0x20006e35
 800825c:	20001350 	.word	0x20001350
 8008260:	200014d0 	.word	0x200014d0
 8008264:	20006e76 	.word	0x20006e76
 8008268:	20006e54 	.word	0x20006e54
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800826c:	4657      	mov	r7, sl
 800826e:	3724      	adds	r7, #36	; 0x24
 8008270:	7878      	ldrb	r0, [r7, #1]
 8008272:	210a      	movs	r1, #10
 8008274:	f7f7 fff2 	bl	800025c <__aeabi_uidivmod>
 8008278:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <ExecuteMonitor+0x3f0>)
 800827a:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800827c:	78b8      	ldrb	r0, [r7, #2]
 800827e:	210a      	movs	r1, #10
 8008280:	f7f7 ffec 	bl	800025c <__aeabi_uidivmod>
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <ExecuteMonitor+0x3f4>)
 8008286:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8008288:	78f8      	ldrb	r0, [r7, #3]
 800828a:	210a      	movs	r1, #10
 800828c:	f7f7 ffe6 	bl	800025c <__aeabi_uidivmod>
 8008290:	4652      	mov	r2, sl
 8008292:	2338      	movs	r3, #56	; 0x38
 8008294:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008296:	4650      	mov	r0, sl
 8008298:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800829a:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 800829c:	4a0a      	ldr	r2, [pc, #40]	; (80082c8 <ExecuteMonitor+0x3f8>)
 800829e:	3b34      	subs	r3, #52	; 0x34
 80082a0:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 80082a2:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <ExecuteMonitor+0x3fc>)
 80082a4:	3b03      	subs	r3, #3
 80082a6:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082a8:	3128      	adds	r1, #40	; 0x28
 80082aa:	2210      	movs	r2, #16
 80082ac:	3039      	adds	r0, #57	; 0x39
 80082ae:	f00a fe4a 	bl	8012f46 <memcpy>
 80082b2:	e668      	b.n	8007f86 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80082b4:	2202      	movs	r2, #2
 80082b6:	9302      	str	r3, [sp, #8]
 80082b8:	9201      	str	r2, [sp, #4]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	e76d      	b.n	800819a <ExecuteMonitor+0x2ca>
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	20006e76 	.word	0x20006e76
 80082c4:	20006e74 	.word	0x20006e74
 80082c8:	20006e55 	.word	0x20006e55
 80082cc:	20006e54 	.word	0x20006e54

080082d0 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4c1e      	ldr	r4, [pc, #120]	; (800834c <StartDefaultTask+0x7c>)
 80082d4:	4d1e      	ldr	r5, [pc, #120]	; (8008350 <StartDefaultTask+0x80>)
 80082d6:	4e1f      	ldr	r6, [pc, #124]	; (8008354 <StartDefaultTask+0x84>)
 80082d8:	e00f      	b.n	80082fa <StartDefaultTask+0x2a>
		switch(indMode){
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d024      	beq.n	8008328 <StartDefaultTask+0x58>
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d02b      	beq.n	800833a <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 80082e2:	f000 fd9b 	bl	8008e1c <CheckAttachedButtons>
		ExecuteSnippet();
 80082e6:	f7fd f991 	bl	800560c <ExecuteSnippet>
		ExecuteMonitor();
 80082ea:	f7ff fdf1 	bl	8007ed0 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 80082ee:	782b      	ldrb	r3, [r5, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d100      	bne.n	80082f6 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 80082f4:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 80082f6:	f007 f8af 	bl	800f458 <vPortYield>
		switch(indMode){
 80082fa:	7823      	ldrb	r3, [r4, #0]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d1ec      	bne.n	80082da <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8008300:	2180      	movs	r1, #128	; 0x80
 8008302:	2090      	movs	r0, #144	; 0x90
 8008304:	2201      	movs	r2, #1
 8008306:	05c0      	lsls	r0, r0, #23
 8008308:	0109      	lsls	r1, r1, #4
 800830a:	f008 febf 	bl	801108c <HAL_GPIO_WritePin>
 800830e:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8008310:	f005 fa6a 	bl	800d7e8 <osDelay>
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	2090      	movs	r0, #144	; 0x90
 8008318:	2200      	movs	r2, #0
 800831a:	0109      	lsls	r1, r1, #4
 800831c:	05c0      	lsls	r0, r0, #23
 800831e:	f008 feb5 	bl	801108c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008322:	2300      	movs	r3, #0
 8008324:	7023      	strb	r3, [r4, #0]
				break;
 8008326:	e7dc      	b.n	80082e2 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8008328:	2180      	movs	r1, #128	; 0x80
 800832a:	2090      	movs	r0, #144	; 0x90
 800832c:	2201      	movs	r2, #1
 800832e:	05c0      	lsls	r0, r0, #23
 8008330:	0109      	lsls	r1, r1, #4
 8008332:	f008 feab 	bl	801108c <HAL_GPIO_WritePin>
 8008336:	201e      	movs	r0, #30
 8008338:	e7ea      	b.n	8008310 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	2090      	movs	r0, #144	; 0x90
 800833e:	2201      	movs	r2, #1
 8008340:	05c0      	lsls	r0, r0, #23
 8008342:	0109      	lsls	r1, r1, #4
 8008344:	f008 fea2 	bl	801108c <HAL_GPIO_WritePin>
 8008348:	20c8      	movs	r0, #200	; 0xc8
 800834a:	e7e1      	b.n	8008310 <StartDefaultTask+0x40>
 800834c:	2000114e 	.word	0x2000114e
 8008350:	200018bb 	.word	0x200018bb
 8008354:	200018b0 	.word	0x200018b0

08008358 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 800835a:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	4904      	ldr	r1, [pc, #16]	; (8008370 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008360:	f7f7 fef6 	bl	8000150 <__udivsi3>
 8008364:	4b03      	ldr	r3, [pc, #12]	; (8008374 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008366:	6058      	str	r0, [r3, #4]
}
 8008368:	bd10      	pop	{r4, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	200000c0 	.word	0x200000c0
 8008370:	00002710 	.word	0x00002710
 8008374:	20001814 	.word	0x20001814

08008378 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008378:	21fa      	movs	r1, #250	; 0xfa
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 800837c:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	0089      	lsls	r1, r1, #2
 8008382:	f7f7 fee5 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008386:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008388:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800838a:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 800838c:	f006 f9de 	bl	800e74c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <ulMainGetRunTimeCounterValue+0x48>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	015b      	lsls	r3, r3, #5
 8008396:	d50c      	bpl.n	80083b2 <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008398:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 800839a:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800839c:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 80083a0:	0084      	lsls	r4, r0, #2
 80083a2:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083a4:	6859      	ldr	r1, [r3, #4]
 80083a6:	0028      	movs	r0, r5
 80083a8:	f7f7 fed2 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 80083ac:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083ae:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083b2:	1bad      	subs	r5, r5, r6
 80083b4:	e7f3      	b.n	800839e <ulMainGetRunTimeCounterValue+0x26>
 80083b6:	46c0      	nop			; (mov r8, r8)
 80083b8:	200000c0 	.word	0x200000c0
 80083bc:	e000e018 	.word	0xe000e018
 80083c0:	e000ed04 	.word	0xe000ed04
 80083c4:	20001814 	.word	0x20001814

080083c8 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 80083c8:	4770      	bx	lr
 80083ca:	46c0      	nop			; (mov r8, r8)

080083cc <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 80083cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 80083ce:	4d37      	ldr	r5, [pc, #220]	; (80084ac <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 80083d0:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 80083d2:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 80083d4:	0006      	movs	r6, r0
 80083d6:	000c      	movs	r4, r1
	if (BOS_initialized) {
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d152      	bne.n	8008482 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 80083dc:	2204      	movs	r2, #4
 80083de:	4b34      	ldr	r3, [pc, #208]	; (80084b0 <AddPortButton+0xe4>)
 80083e0:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80083e2:	250e      	movs	r5, #14
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	446d      	add	r5, sp
 80083e8:	002a      	movs	r2, r5
 80083ea:	ab06      	add	r3, sp, #24
 80083ec:	a905      	add	r1, sp, #20
 80083ee:	9700      	str	r7, [sp, #0]
 80083f0:	0020      	movs	r0, r4
 80083f2:	f004 fba1 	bl	800cb38 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 80083f6:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f8:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 80083fa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083fc:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 80083fe:	a907      	add	r1, sp, #28
 8008400:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008402:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008404:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008406:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008408:	f008 fca0 	bl	8010d4c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800840c:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800840e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 8008410:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008412:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8008414:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008416:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008418:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800841a:	f008 fc97 	bl	8010d4c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800841e:	00e2      	lsls	r2, r4, #3
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <AddPortButton+0xe8>)
 8008422:	1912      	adds	r2, r2, r4
 8008424:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008426:	0025      	movs	r5, r4
	button[port].type = buttonType;
 8008428:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800842a:	2312      	movs	r3, #18
 800842c:	353a      	adds	r5, #58	; 0x3a
 800842e:	00ad      	lsls	r5, r5, #2
 8008430:	446b      	add	r3, sp
 8008432:	0019      	movs	r1, r3
 8008434:	0028      	movs	r0, r5
 8008436:	f7ff f9ff 	bl	8007838 <EE_ReadVariable>
	if (!res)											// This variable exists
 800843a:	2800      	cmp	r0, #0
 800843c:	d109      	bne.n	8008452 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800843e:	466b      	mov	r3, sp
 8008440:	8a5b      	ldrh	r3, [r3, #18]
 8008442:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008444:	091a      	lsrs	r2, r3, #4
 8008446:	42a2      	cmp	r2, r4
 8008448:	d103      	bne.n	8008452 <AddPortButton+0x86>
 800844a:	220f      	movs	r2, #15
 800844c:	4013      	ands	r3, r2
 800844e:	42b3      	cmp	r3, r6
 8008450:	d014      	beq.n	800847c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8008452:	466b      	mov	r3, sp
 8008454:	0324      	lsls	r4, r4, #12
 8008456:	0231      	lsls	r1, r6, #8
 8008458:	4321      	orrs	r1, r4
 800845a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800845c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800845e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008460:	f7ff fa1a 	bl	8007898 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008464:	2100      	movs	r1, #0
 8008466:	1c68      	adds	r0, r5, #1
 8008468:	f7ff fa16 	bl	8007898 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800846c:	2100      	movs	r1, #0
 800846e:	1ca8      	adds	r0, r5, #2
 8008470:	f7ff fa12 	bl	8007898 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008474:	1ce8      	adds	r0, r5, #3
 8008476:	2100      	movs	r1, #0
 8008478:	f7ff fa0e 	bl	8007898 <EE_WriteVariable>
	}

	return result;
}
 800847c:	2000      	movs	r0, #0
 800847e:	b00d      	add	sp, #52	; 0x34
 8008480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <AddPortButton+0xec>)
 8008484:	008f      	lsls	r7, r1, #2
 8008486:	58f8      	ldr	r0, [r7, r3]
 8008488:	f005 fa1a 	bl	800d8c0 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <AddPortButton+0xf0>)
 800848e:	58f8      	ldr	r0, [r7, r3]
 8008490:	f005 fa16 	bl	800d8c0 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 8008494:	2104      	movs	r1, #4
 8008496:	4a06      	ldr	r2, [pc, #24]	; (80084b0 <AddPortButton+0xe4>)
 8008498:	782b      	ldrb	r3, [r5, #0]
 800849a:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800849c:	2b00      	cmp	r3, #0
 800849e:	d0a0      	beq.n	80083e2 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 80084a0:	0020      	movs	r0, r4
 80084a2:	f005 f8dd 	bl	800d660 <GetUart>
 80084a6:	f009 fd67 	bl	8011f78 <HAL_UART_DeInit>
 80084aa:	e79a      	b.n	80083e2 <AddPortButton+0x16>
 80084ac:	20000c4d 	.word	0x20000c4d
 80084b0:	20000c3c 	.word	0x20000c3c
 80084b4:	2000181c 	.word	0x2000181c
 80084b8:	20006e58 	.word	0x20006e58
 80084bc:	20006e38 	.word	0x20006e38

080084c0 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	4839      	ldr	r0, [pc, #228]	; (80085ac <RemovePortButton+0xec>)
 80084c8:	00e9      	lsls	r1, r5, #3
 80084ca:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80084cc:	002c      	movs	r4, r5
	button[port].type = NONE;
 80084ce:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 80084d0:	b082      	sub	sp, #8
	button[port].state = NONE;
 80084d2:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 80084d4:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 80084d6:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 80084d8:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 80084da:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 80084dc:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 80084de:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 80084e0:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 80084e2:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80084e4:	466b      	mov	r3, sp
 80084e6:	343a      	adds	r4, #58	; 0x3a
 80084e8:	00a4      	lsls	r4, r4, #2
 80084ea:	1d99      	adds	r1, r3, #6
 80084ec:	0020      	movs	r0, r4
 80084ee:	f7ff f9a3 	bl	8007838 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d02d      	beq.n	8008552 <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 80084f6:	0028      	movs	r0, r5
 80084f8:	f005 f8b2 	bl	800d660 <GetUart>

	if (huart->Instance == USART1) {
 80084fc:	4a2c      	ldr	r2, [pc, #176]	; (80085b0 <RemovePortButton+0xf0>)
 80084fe:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 8008500:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 8008502:	4293      	cmp	r3, r2
 8008504:	d03d      	beq.n	8008582 <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 8008506:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <RemovePortButton+0xf4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d03e      	beq.n	800858a <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800850c:	4a2a      	ldr	r2, [pc, #168]	; (80085b8 <RemovePortButton+0xf8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d03f      	beq.n	8008592 <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 8008512:	4a2a      	ldr	r2, [pc, #168]	; (80085bc <RemovePortButton+0xfc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d01a      	beq.n	800854e <RemovePortButton+0x8e>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 8008518:	4a29      	ldr	r2, [pc, #164]	; (80085c0 <RemovePortButton+0x100>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d03d      	beq.n	800859a <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800851e:	4a29      	ldr	r2, [pc, #164]	; (80085c4 <RemovePortButton+0x104>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d03e      	beq.n	80085a2 <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 8008524:	4a28      	ldr	r2, [pc, #160]	; (80085c8 <RemovePortButton+0x108>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d011      	beq.n	800854e <RemovePortButton+0x8e>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800852a:	4a28      	ldr	r2, [pc, #160]	; (80085cc <RemovePortButton+0x10c>)
 800852c:	4694      	mov	ip, r2
 800852e:	4463      	add	r3, ip
 8008530:	1e5c      	subs	r4, r3, #1
 8008532:	41a3      	sbcs	r3, r4
 8008534:	425c      	negs	r4, r3
 8008536:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008538:	2200      	movs	r2, #0
 800853a:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800853c:	4925      	ldr	r1, [pc, #148]	; (80085d4 <RemovePortButton+0x114>)
	portStatus[port] = FREE;
 800853e:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008540:	0030      	movs	r0, r6
 8008542:	3201      	adds	r2, #1
 8008544:	f009 fd66 	bl	8012014 <HAL_UART_Receive_IT>

	return result;
}
 8008548:	0020      	movs	r0, r4
 800854a:	b002      	add	sp, #8
 800854c:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 800854e:	2400      	movs	r4, #0
 8008550:	e7f2      	b.n	8008538 <RemovePortButton+0x78>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 8008552:	2100      	movs	r1, #0
 8008554:	0020      	movs	r0, r4
 8008556:	f7ff f99f 	bl	8007898 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800855a:	2100      	movs	r1, #0
 800855c:	1c60      	adds	r0, r4, #1
 800855e:	f7ff f99b 	bl	8007898 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008562:	2100      	movs	r1, #0
 8008564:	1ca0      	adds	r0, r4, #2
 8008566:	f7ff f997 	bl	8007898 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800856a:	2100      	movs	r1, #0
 800856c:	1ce0      	adds	r0, r4, #3
 800856e:	f7ff f993 	bl	8007898 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 8008572:	0028      	movs	r0, r5
 8008574:	f005 f874 	bl	800d660 <GetUart>
	if (huart->Instance == USART1) {
 8008578:	4a0d      	ldr	r2, [pc, #52]	; (80085b0 <RemovePortButton+0xf0>)
 800857a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800857c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800857e:	4293      	cmp	r3, r2
 8008580:	d1c1      	bne.n	8008506 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 8008582:	f004 fe7b 	bl	800d27c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008586:	2400      	movs	r4, #0
 8008588:	e7d6      	b.n	8008538 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800858a:	f004 fe8f 	bl	800d2ac <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800858e:	2400      	movs	r4, #0
 8008590:	e7d2      	b.n	8008538 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008592:	f004 fea3 	bl	800d2dc <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008596:	2400      	movs	r4, #0
 8008598:	e7ce      	b.n	8008538 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800859a:	f004 feb7 	bl	800d30c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800859e:	2400      	movs	r4, #0
 80085a0:	e7ca      	b.n	8008538 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80085a2:	f004 fecb 	bl	800d33c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 80085a6:	2400      	movs	r4, #0
 80085a8:	e7c6      	b.n	8008538 <RemovePortButton+0x78>
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	2000181c 	.word	0x2000181c
 80085b0:	40013800 	.word	0x40013800
 80085b4:	40004400 	.word	0x40004400
 80085b8:	40004800 	.word	0x40004800
 80085bc:	40004c00 	.word	0x40004c00
 80085c0:	40005000 	.word	0x40005000
 80085c4:	40011400 	.word	0x40011400
 80085c8:	40011800 	.word	0x40011800
 80085cc:	bffee400 	.word	0xbffee400
 80085d0:	20000c3c 	.word	0x20000c3c
 80085d4:	20000c5d 	.word	0x20000c5d

080085d8 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 80085d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085da:	464e      	mov	r6, r9
 80085dc:	4645      	mov	r5, r8
 80085de:	46de      	mov	lr, fp
 80085e0:	4657      	mov	r7, sl
 80085e2:	b5e0      	push	{r5, r6, r7, lr}
 80085e4:	b087      	sub	sp, #28
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	ab10      	add	r3, sp, #64	; 0x40
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	0005      	movs	r5, r0
 80085ee:	9302      	str	r3, [sp, #8]
 80085f0:	ab11      	add	r3, sp, #68	; 0x44
 80085f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 80085f4:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 80085f6:	9303      	str	r3, [sp, #12]
 80085f8:	ab12      	add	r3, sp, #72	; 0x48
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	469a      	mov	sl, r3
 80085fe:	ab13      	add	r3, sp, #76	; 0x4c
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	4699      	mov	r9, r3
 8008604:	ab14      	add	r3, sp, #80	; 0x50
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	469b      	mov	fp, r3
 800860a:	ab15      	add	r3, sp, #84	; 0x54
 800860c:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800860e:	4b80      	ldr	r3, [pc, #512]	; (8008810 <SetButtonEvents+0x238>)
 8008610:	4698      	mov	r8, r3
 8008612:	1963      	adds	r3, r4, r5
 8008614:	4443      	add	r3, r8
 8008616:	785e      	ldrb	r6, [r3, #1]
 8008618:	2e00      	cmp	r6, #0
 800861a:	d050      	beq.n	80086be <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800861c:	9e01      	ldr	r6, [sp, #4]
 800861e:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 8008620:	9e02      	ldr	r6, [sp, #8]
 8008622:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 8008624:	9e03      	ldr	r6, [sp, #12]
 8008626:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008628:	4656      	mov	r6, sl
 800862a:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800862c:	464e      	mov	r6, r9
 800862e:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 8008630:	465e      	mov	r6, fp
 8008632:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 8008634:	2801      	cmp	r0, #1
 8008636:	d04b      	beq.n	80086d0 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008638:	2800      	cmp	r0, #0
 800863a:	d000      	beq.n	800863e <SetButtonEvents+0x66>
 800863c:	e076      	b.n	800872c <SetButtonEvents+0x154>
 800863e:	2900      	cmp	r1, #0
 8008640:	d000      	beq.n	8008644 <SetButtonEvents+0x6c>
 8008642:	e0bf      	b.n	80087c4 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 8008644:	2601      	movs	r6, #1
 8008646:	7a19      	ldrb	r1, [r3, #8]
 8008648:	43b1      	bics	r1, r6
 800864a:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800864c:	2a00      	cmp	r2, #0
 800864e:	d142      	bne.n	80086d6 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 8008650:	2302      	movs	r3, #2
 8008652:	4399      	bics	r1, r3
 8008654:	1963      	adds	r3, r4, r5
 8008656:	4443      	add	r3, r8
 8008658:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d143      	bne.n	80086e8 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008660:	2304      	movs	r3, #4
 8008662:	4399      	bics	r1, r3
 8008664:	1963      	adds	r3, r4, r5
 8008666:	4443      	add	r3, r8
 8008668:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d144      	bne.n	80086fa <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008670:	2308      	movs	r3, #8
 8008672:	4399      	bics	r1, r3
 8008674:	1963      	adds	r3, r4, r5
 8008676:	4443      	add	r3, r8
 8008678:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d145      	bne.n	800870c <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008680:	2310      	movs	r3, #16
 8008682:	000a      	movs	r2, r1
 8008684:	439a      	bics	r2, r3
 8008686:	1963      	adds	r3, r4, r5
 8008688:	4443      	add	r3, r8
 800868a:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800868c:	4653      	mov	r3, sl
 800868e:	2b00      	cmp	r3, #0
 8008690:	d100      	bne.n	8008694 <SetButtonEvents+0xbc>
 8008692:	e09c      	b.n	80087ce <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008694:	2120      	movs	r1, #32
 8008696:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008698:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800869a:	1963      	adds	r3, r4, r5
 800869c:	4443      	add	r3, r8
 800869e:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	d100      	bne.n	80086a6 <SetButtonEvents+0xce>
 80086a4:	e09d      	b.n	80087e2 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086a6:	2240      	movs	r2, #64	; 0x40
 80086a8:	430a      	orrs	r2, r1
 80086aa:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 80086ac:	465b      	mov	r3, fp
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d136      	bne.n	8008720 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80086b2:	217f      	movs	r1, #127	; 0x7f
 80086b4:	1963      	adds	r3, r4, r5
 80086b6:	4443      	add	r3, r8
 80086b8:	4011      	ands	r1, r2
 80086ba:	7219      	strb	r1, [r3, #8]
 80086bc:	e036      	b.n	800872c <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80086be:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 80086c0:	0020      	movs	r0, r4
 80086c2:	b007      	add	sp, #28
 80086c4:	bc3c      	pop	{r2, r3, r4, r5}
 80086c6:	4690      	mov	r8, r2
 80086c8:	4699      	mov	r9, r3
 80086ca:	46a2      	mov	sl, r4
 80086cc:	46ab      	mov	fp, r5
 80086ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 80086d0:	7a19      	ldrb	r1, [r3, #8]
 80086d2:	2301      	movs	r3, #1
 80086d4:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80086d6:	2202      	movs	r2, #2
 80086d8:	1963      	adds	r3, r4, r5
 80086da:	4443      	add	r3, r8
 80086dc:	4311      	orrs	r1, r2
 80086de:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80086e0:	2801      	cmp	r0, #1
 80086e2:	d000      	beq.n	80086e6 <SetButtonEvents+0x10e>
 80086e4:	e08c      	b.n	8008800 <SetButtonEvents+0x228>
 80086e6:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80086e8:	2204      	movs	r2, #4
 80086ea:	1963      	adds	r3, r4, r5
 80086ec:	4443      	add	r3, r8
 80086ee:	4311      	orrs	r1, r2
 80086f0:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80086f2:	2801      	cmp	r0, #1
 80086f4:	d000      	beq.n	80086f8 <SetButtonEvents+0x120>
 80086f6:	e07f      	b.n	80087f8 <SetButtonEvents+0x220>
 80086f8:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80086fa:	2208      	movs	r2, #8
 80086fc:	1963      	adds	r3, r4, r5
 80086fe:	4443      	add	r3, r8
 8008700:	4311      	orrs	r1, r2
 8008702:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008704:	2801      	cmp	r0, #1
 8008706:	d000      	beq.n	800870a <SetButtonEvents+0x132>
 8008708:	e07e      	b.n	8008808 <SetButtonEvents+0x230>
 800870a:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800870c:	2210      	movs	r2, #16
 800870e:	1963      	adds	r3, r4, r5
 8008710:	4443      	add	r3, r8
 8008712:	4311      	orrs	r1, r2
 8008714:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008716:	2801      	cmp	r0, #1
 8008718:	d16a      	bne.n	80087f0 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800871a:	2260      	movs	r2, #96	; 0x60
 800871c:	b2c9      	uxtb	r1, r1
 800871e:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	1963      	adds	r3, r4, r5
 8008724:	4249      	negs	r1, r1
 8008726:	4443      	add	r3, r8
 8008728:	4311      	orrs	r1, r2
 800872a:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800872c:	002e      	movs	r6, r5
 800872e:	ab04      	add	r3, sp, #16
 8008730:	363a      	adds	r6, #58	; 0x3a
 8008732:	00b6      	lsls	r6, r6, #2
 8008734:	1d9f      	adds	r7, r3, #6
 8008736:	0039      	movs	r1, r7
 8008738:	0030      	movs	r0, r6
 800873a:	f7ff f87d 	bl	8007838 <EE_ReadVariable>
	if (!res)											// This variable exists
 800873e:	2800      	cmp	r0, #0
 8008740:	d1bd      	bne.n	80086be <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 8008742:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 8008744:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 8008746:	4444      	add	r4, r8
 8008748:	7a22      	ldrb	r2, [r4, #8]
 800874a:	b2d9      	uxtb	r1, r3
 800874c:	4291      	cmp	r1, r2
 800874e:	d006      	beq.n	800875e <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008750:	0a19      	lsrs	r1, r3, #8
 8008752:	0209      	lsls	r1, r1, #8
 8008754:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008756:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008758:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800875a:	f7ff f89d 	bl	8007898 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800875e:	1c74      	adds	r4, r6, #1
 8008760:	0039      	movs	r1, r7
 8008762:	0020      	movs	r0, r4
 8008764:	f7ff f868 	bl	8007838 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 8008768:	4652      	mov	r2, sl
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	0219      	lsls	r1, r3, #8
 800876e:	883b      	ldrh	r3, [r7, #0]
 8008770:	430a      	orrs	r2, r1
		if (temp16
 8008772:	4293      	cmp	r3, r2
 8008774:	d003      	beq.n	800877e <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 8008776:	b291      	uxth	r1, r2
 8008778:	0020      	movs	r0, r4
 800877a:	f7ff f88d 	bl	8007898 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800877e:	1cb4      	adds	r4, r6, #2
 8008780:	0039      	movs	r1, r7
 8008782:	0020      	movs	r0, r4
 8008784:	f7ff f858 	bl	8007838 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 8008788:	464a      	mov	r2, r9
 800878a:	9b02      	ldr	r3, [sp, #8]
 800878c:	0219      	lsls	r1, r3, #8
 800878e:	883b      	ldrh	r3, [r7, #0]
 8008790:	430a      	orrs	r2, r1
		if (temp16
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 8008796:	b291      	uxth	r1, r2
 8008798:	0020      	movs	r0, r4
 800879a:	f7ff f87d 	bl	8007898 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800879e:	3603      	adds	r6, #3
 80087a0:	0039      	movs	r1, r7
 80087a2:	0030      	movs	r0, r6
 80087a4:	f7ff f848 	bl	8007838 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087a8:	465a      	mov	r2, fp
 80087aa:	9b03      	ldr	r3, [sp, #12]
	return result;
 80087ac:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087ae:	0219      	lsls	r1, r3, #8
 80087b0:	883b      	ldrh	r3, [r7, #0]
 80087b2:	430a      	orrs	r2, r1
		if (temp16
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d100      	bne.n	80087ba <SetButtonEvents+0x1e2>
 80087b8:	e782      	b.n	80086c0 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 80087ba:	b291      	uxth	r1, r2
 80087bc:	0030      	movs	r0, r6
 80087be:	f7ff f86b 	bl	8007898 <EE_WriteVariable>
 80087c2:	e77d      	b.n	80086c0 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80087c4:	2601      	movs	r6, #1
 80087c6:	7a19      	ldrb	r1, [r3, #8]
 80087c8:	4331      	orrs	r1, r6
 80087ca:	7219      	strb	r1, [r3, #8]
 80087cc:	e73e      	b.n	800864c <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80087ce:	2320      	movs	r3, #32
 80087d0:	439a      	bics	r2, r3
 80087d2:	1963      	adds	r3, r4, r5
 80087d4:	4443      	add	r3, r8
 80087d6:	0011      	movs	r1, r2
 80087d8:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80087da:	464a      	mov	r2, r9
 80087dc:	2a00      	cmp	r2, #0
 80087de:	d000      	beq.n	80087e2 <SetButtonEvents+0x20a>
 80087e0:	e761      	b.n	80086a6 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	000a      	movs	r2, r1
 80087e6:	439a      	bics	r2, r3
 80087e8:	1963      	adds	r3, r4, r5
 80087ea:	4443      	add	r3, r8
 80087ec:	721a      	strb	r2, [r3, #8]
 80087ee:	e75d      	b.n	80086ac <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d19b      	bne.n	800872c <SetButtonEvents+0x154>
 80087f4:	7a1a      	ldrb	r2, [r3, #8]
 80087f6:	e749      	b.n	800868c <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d197      	bne.n	800872c <SetButtonEvents+0x154>
 80087fc:	7a19      	ldrb	r1, [r3, #8]
 80087fe:	e734      	b.n	800866a <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008800:	2800      	cmp	r0, #0
 8008802:	d193      	bne.n	800872c <SetButtonEvents+0x154>
 8008804:	7a19      	ldrb	r1, [r3, #8]
 8008806:	e728      	b.n	800865a <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008808:	2800      	cmp	r0, #0
 800880a:	d18f      	bne.n	800872c <SetButtonEvents+0x154>
 800880c:	7a19      	ldrb	r1, [r3, #8]
 800880e:	e734      	b.n	800867a <SetButtonEvents+0xa2>
 8008810:	2000181c 	.word	0x2000181c

08008814 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 8008814:	4811      	ldr	r0, [pc, #68]	; (800885c <MX_ADC_Init+0x48>)
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 8008818:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800881a:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800881c:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800881e:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008820:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008822:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008824:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008826:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008828:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800882a:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800882c:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800882e:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008830:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008832:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008834:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008836:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008838:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800883a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800883c:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800883e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008840:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008842:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008844:	f007 f83a 	bl	800f8bc <HAL_ADC_Init>
 8008848:	2800      	cmp	r0, #0
 800884a:	d002      	beq.n	8008852 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800884c:	2064      	movs	r0, #100	; 0x64
 800884e:	f006 ff5b 	bl	800f708 <HAL_Delay>
	ADC_flag = 1;
 8008852:	2368      	movs	r3, #104	; 0x68
 8008854:	2101      	movs	r1, #1
 8008856:	4a03      	ldr	r2, [pc, #12]	; (8008864 <MX_ADC_Init+0x50>)
 8008858:	54d1      	strb	r1, [r2, r3]
}
 800885a:	bd10      	pop	{r4, pc}
 800885c:	20006e7c 	.word	0x20006e7c
 8008860:	40012400 	.word	0x40012400
 8008864:	2000181c 	.word	0x2000181c

08008868 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8008868:	b500      	push	{lr}
 800886a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800886c:	2214      	movs	r2, #20
 800886e:	2100      	movs	r1, #0
 8008870:	a803      	add	r0, sp, #12
 8008872:	f00a fb71 	bl	8012f58 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008876:	2080      	movs	r0, #128	; 0x80
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <HAL_ADC_MspInit+0x58>)
 800887a:	0080      	lsls	r0, r0, #2
 800887c:	6999      	ldr	r1, [r3, #24]
 800887e:	4301      	orrs	r1, r0
 8008880:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008882:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008884:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008886:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008888:	4002      	ands	r2, r0
 800888a:	9201      	str	r2, [sp, #4]
 800888c:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	430a      	orrs	r2, r1
 8008892:	615a      	str	r2, [r3, #20]
 8008894:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 8008896:	4a0b      	ldr	r2, [pc, #44]	; (80088c4 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008898:	400b      	ands	r3, r1
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800889e:	2369      	movs	r3, #105	; 0x69
 80088a0:	5cd3      	ldrb	r3, [r2, r3]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d001      	beq.n	80088aa <HAL_ADC_MspInit+0x42>
}
 80088a6:	b009      	add	sp, #36	; 0x24
 80088a8:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088aa:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088ac:	333b      	adds	r3, #59	; 0x3b
 80088ae:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088b0:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088b2:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088b4:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088b6:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088b8:	f008 fa48 	bl	8010d4c <HAL_GPIO_Init>
}
 80088bc:	e7f3      	b.n	80088a6 <HAL_ADC_MspInit+0x3e>
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	40021000 	.word	0x40021000
 80088c4:	2000181c 	.word	0x2000181c

080088c8 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	46ce      	mov	lr, r9
 80088cc:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 80088ce:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 80088d0:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 80088d2:	4c54      	ldr	r4, [pc, #336]	; (8008a24 <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 80088d4:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 80088d6:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 80088d8:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d100      	bne.n	80088e0 <ReadTempAndVref+0x18>
 80088de:	e09d      	b.n	8008a1c <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80088e0:	2310      	movs	r3, #16
 80088e2:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80088e4:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088e6:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80088e8:	015b      	lsls	r3, r3, #5
 80088ea:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088ec:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088ee:	4d4e      	ldr	r5, [pc, #312]	; (8008a28 <ReadTempAndVref+0x160>)
 80088f0:	316c      	adds	r1, #108	; 0x6c
 80088f2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088f4:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088f6:	f007 f9af 	bl	800fc58 <HAL_ADC_ConfigChannel>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d000      	beq.n	8008900 <ReadTempAndVref+0x38>
 80088fe:	e089      	b.n	8008a14 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 8008900:	0028      	movs	r0, r5
 8008902:	f007 f87d 	bl	800fa00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008906:	2164      	movs	r1, #100	; 0x64
 8008908:	0028      	movs	r0, r5
 800890a:	f007 f8c5 	bl	800fa98 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800890e:	0028      	movs	r0, r5
 8008910:	f007 f926 	bl	800fb60 <HAL_ADC_GetValue>
 8008914:	2378      	movs	r3, #120	; 0x78
 8008916:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008918:	0400      	lsls	r0, r0, #16
 800891a:	0c00      	lsrs	r0, r0, #16
 800891c:	f7fa f896 	bl	8002a4c <__aeabi_i2d>
 8008920:	4a42      	ldr	r2, [pc, #264]	; (8008a2c <ReadTempAndVref+0x164>)
 8008922:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <ReadTempAndVref+0x168>)
 8008924:	f7f9 fa86 	bl	8001e34 <__aeabi_dmul>
 8008928:	2200      	movs	r2, #0
 800892a:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <ReadTempAndVref+0x16c>)
 800892c:	f7f8 fe78 	bl	8001620 <__aeabi_ddiv>
 8008930:	4a41      	ldr	r2, [pc, #260]	; (8008a38 <ReadTempAndVref+0x170>)
 8008932:	4b42      	ldr	r3, [pc, #264]	; (8008a3c <ReadTempAndVref+0x174>)
 8008934:	f7f9 fcf0 	bl	8002318 <__aeabi_dsub>
 8008938:	4a41      	ldr	r2, [pc, #260]	; (8008a40 <ReadTempAndVref+0x178>)
 800893a:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <ReadTempAndVref+0x17c>)
 800893c:	f7f8 fe70 	bl	8001620 <__aeabi_ddiv>
 8008940:	4b41      	ldr	r3, [pc, #260]	; (8008a48 <ReadTempAndVref+0x180>)
 8008942:	2200      	movs	r2, #0
 8008944:	f7f8 fb50 	bl	8000fe8 <__aeabi_dadd>
 8008948:	f7fa f93e 	bl	8002bc8 <__aeabi_d2f>
 800894c:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800894e:	0028      	movs	r0, r5
 8008950:	f007 f882 	bl	800fa58 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008954:	2310      	movs	r3, #16
 8008956:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 8008958:	4b3c      	ldr	r3, [pc, #240]	; (8008a4c <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800895a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800895c:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800895e:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008960:	316c      	adds	r1, #108	; 0x6c
 8008962:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008964:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008966:	f007 f977 	bl	800fc58 <HAL_ADC_ConfigChannel>
 800896a:	2800      	cmp	r0, #0
 800896c:	d14e      	bne.n	8008a0c <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800896e:	2311      	movs	r3, #17
 8008970:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008972:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008974:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008976:	015b      	lsls	r3, r3, #5
 8008978:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800897a:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800897c:	316c      	adds	r1, #108	; 0x6c
 800897e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008980:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008982:	f007 f969 	bl	800fc58 <HAL_ADC_ConfigChannel>
 8008986:	2800      	cmp	r0, #0
 8008988:	d13c      	bne.n	8008a04 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800898a:	0028      	movs	r0, r5
 800898c:	f007 f838 	bl	800fa00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008990:	2164      	movs	r1, #100	; 0x64
 8008992:	0028      	movs	r0, r5
 8008994:	f007 f880 	bl	800fa98 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 8008998:	0028      	movs	r0, r5
 800899a:	f007 f8e1 	bl	800fb60 <HAL_ADC_GetValue>
 800899e:	237a      	movs	r3, #122	; 0x7a
 80089a0:	4680      	mov	r8, r0
 80089a2:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089a4:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <ReadTempAndVref+0x188>)
 80089a6:	8818      	ldrh	r0, [r3, #0]
 80089a8:	f7fa f850 	bl	8002a4c <__aeabi_i2d>
 80089ac:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <ReadTempAndVref+0x164>)
 80089ae:	4b20      	ldr	r3, [pc, #128]	; (8008a30 <ReadTempAndVref+0x168>)
 80089b0:	f7f9 fa40 	bl	8001e34 <__aeabi_dmul>
 80089b4:	4643      	mov	r3, r8
 80089b6:	0006      	movs	r6, r0
 80089b8:	0418      	lsls	r0, r3, #16
 80089ba:	0c00      	lsrs	r0, r0, #16
 80089bc:	000f      	movs	r7, r1
 80089be:	f7fa f845 	bl	8002a4c <__aeabi_i2d>
 80089c2:	0002      	movs	r2, r0
 80089c4:	000b      	movs	r3, r1
 80089c6:	0030      	movs	r0, r6
 80089c8:	0039      	movs	r1, r7
 80089ca:	f7f8 fe29 	bl	8001620 <__aeabi_ddiv>
 80089ce:	f7fa f8fb 	bl	8002bc8 <__aeabi_d2f>
 80089d2:	464b      	mov	r3, r9
 80089d4:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 80089d6:	0028      	movs	r0, r5
 80089d8:	f007 f83e 	bl	800fa58 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089dc:	2311      	movs	r3, #17
 80089de:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 80089e0:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089e2:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 80089e4:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089e6:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089e8:	316c      	adds	r1, #108	; 0x6c
 80089ea:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ec:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089ee:	f007 f933 	bl	800fc58 <HAL_ADC_ConfigChannel>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d002      	beq.n	80089fc <ReadTempAndVref+0x134>
	HAL_Delay(100);
 80089f6:	2064      	movs	r0, #100	; 0x64
 80089f8:	f006 fe86 	bl	800f708 <HAL_Delay>
}
 80089fc:	bc0c      	pop	{r2, r3}
 80089fe:	4690      	mov	r8, r2
 8008a00:	4699      	mov	r9, r3
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 8008a04:	2064      	movs	r0, #100	; 0x64
 8008a06:	f006 fe7f 	bl	800f708 <HAL_Delay>
 8008a0a:	e7be      	b.n	800898a <ReadTempAndVref+0xc2>
 8008a0c:	2064      	movs	r0, #100	; 0x64
 8008a0e:	f006 fe7b 	bl	800f708 <HAL_Delay>
 8008a12:	e7ac      	b.n	800896e <ReadTempAndVref+0xa6>
 8008a14:	2064      	movs	r0, #100	; 0x64
 8008a16:	f006 fe77 	bl	800f708 <HAL_Delay>
 8008a1a:	e771      	b.n	8008900 <ReadTempAndVref+0x38>
		MX_ADC_Init();
 8008a1c:	f7ff fefa 	bl	8008814 <MX_ADC_Init>
 8008a20:	e75e      	b.n	80088e0 <ReadTempAndVref+0x18>
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	2000181c 	.word	0x2000181c
 8008a28:	20006e7c 	.word	0x20006e7c
 8008a2c:	66666666 	.word	0x66666666
 8008a30:	400a6666 	.word	0x400a6666
 8008a34:	40affe00 	.word	0x40affe00
 8008a38:	28f5c28f 	.word	0x28f5c28f
 8008a3c:	3ff68f5c 	.word	0x3ff68f5c
 8008a40:	33333333 	.word	0x33333333
 8008a44:	40113333 	.word	0x40113333
 8008a48:	40390000 	.word	0x40390000
 8008a4c:	00001001 	.word	0x00001001
 8008a50:	1ffff7ba 	.word	0x1ffff7ba

08008a54 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 8008a56:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008a58:	b087      	sub	sp, #28
 8008a5a:	0005      	movs	r5, r0
 8008a5c:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d901      	bls.n	8008a66 <GetReadPrecentage+0x12>
}
 8008a62:	b007      	add	sp, #28
 8008a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 8008a66:	2368      	movs	r3, #104	; 0x68
 8008a68:	4c57      	ldr	r4, [pc, #348]	; (8008bc8 <GetReadPrecentage+0x174>)
 8008a6a:	5ce3      	ldrb	r3, [r4, r3]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d062      	beq.n	8008b36 <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 8008a70:	0028      	movs	r0, r5
 8008a72:	f004 fdf5 	bl	800d660 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008a76:	4a55      	ldr	r2, [pc, #340]	; (8008bcc <GetReadPrecentage+0x178>)
 8008a78:	6803      	ldr	r3, [r0, #0]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d07e      	beq.n	8008b7c <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 8008a7e:	4a54      	ldr	r2, [pc, #336]	; (8008bd0 <GetReadPrecentage+0x17c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d04d      	beq.n	8008b20 <GetReadPrecentage+0xcc>
 8008a84:	2300      	movs	r3, #0
 8008a86:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 8008a88:	227c      	movs	r2, #124	; 0x7c
 8008a8a:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a8c:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 8008a8e:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a90:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a92:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a94:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a96:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a98:	4d4e      	ldr	r5, [pc, #312]	; (8008bd4 <GetReadPrecentage+0x180>)
 8008a9a:	316c      	adds	r1, #108	; 0x6c
 8008a9c:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a9e:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008aa0:	f007 f8da 	bl	800fc58 <HAL_ADC_ConfigChannel>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d142      	bne.n	8008b2e <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 8008aa8:	0028      	movs	r0, r5
 8008aaa:	f006 ffa9 	bl	800fa00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008aae:	2164      	movs	r1, #100	; 0x64
 8008ab0:	0028      	movs	r0, r5
 8008ab2:	f006 fff1 	bl	800fa98 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008ab6:	0028      	movs	r0, r5
 8008ab8:	f007 f852 	bl	800fb60 <HAL_ADC_GetValue>
 8008abc:	f7f8 fa54 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008ac0:	f7fa f830 	bl	8002b24 <__aeabi_f2d>
 8008ac4:	4a44      	ldr	r2, [pc, #272]	; (8008bd8 <GetReadPrecentage+0x184>)
 8008ac6:	4b45      	ldr	r3, [pc, #276]	; (8008bdc <GetReadPrecentage+0x188>)
 8008ac8:	f7f9 f9b4 	bl	8001e34 <__aeabi_dmul>
 8008acc:	2200      	movs	r2, #0
 8008ace:	4b44      	ldr	r3, [pc, #272]	; (8008be0 <GetReadPrecentage+0x18c>)
 8008ad0:	f7f8 fda6 	bl	8001620 <__aeabi_ddiv>
 8008ad4:	f7fa f878 	bl	8002bc8 <__aeabi_d2f>
 8008ad8:	4f42      	ldr	r7, [pc, #264]	; (8008be4 <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 8008ada:	4943      	ldr	r1, [pc, #268]	; (8008be8 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 8008adc:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 8008ade:	f7f7 ff2d 	bl	800093c <__aeabi_fmul>
 8008ae2:	f7fa f81f 	bl	8002b24 <__aeabi_f2d>
 8008ae6:	4b3d      	ldr	r3, [pc, #244]	; (8008bdc <GetReadPrecentage+0x188>)
 8008ae8:	4a3b      	ldr	r2, [pc, #236]	; (8008bd8 <GetReadPrecentage+0x184>)
 8008aea:	f7f8 fd99 	bl	8001620 <__aeabi_ddiv>
 8008aee:	f7fa f86b 	bl	8002bc8 <__aeabi_d2f>
 8008af2:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 8008af4:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 8008af6:	0028      	movs	r0, r5
 8008af8:	f006 ffae 	bl	800fa58 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008afc:	237c      	movs	r3, #124	; 0x7c
 8008afe:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b00:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 8008b02:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008b04:	4b39      	ldr	r3, [pc, #228]	; (8008bec <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b06:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008b08:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b0a:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b0c:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b0e:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b10:	f007 f8a2 	bl	800fc58 <HAL_ADC_ConfigChannel>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d0a4      	beq.n	8008a62 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 8008b18:	2064      	movs	r0, #100	; 0x64
 8008b1a:	f006 fdf5 	bl	800f708 <HAL_Delay>
 8008b1e:	e7a0      	b.n	8008a62 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008b20:	4a33      	ldr	r2, [pc, #204]	; (8008bf0 <GetReadPrecentage+0x19c>)
 8008b22:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <GetReadPrecentage+0x1a0>)
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d04c      	beq.n	8008bc2 <GetReadPrecentage+0x16e>
 8008b28:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 8008b2a:	2305      	movs	r3, #5
 8008b2c:	e7ac      	b.n	8008a88 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 8008b2e:	2064      	movs	r0, #100	; 0x64
 8008b30:	f006 fdea 	bl	800f708 <HAL_Delay>
 8008b34:	e7b8      	b.n	8008aa8 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 8008b36:	f7ff fe6d 	bl	8008814 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008b3a:	0028      	movs	r0, r5
 8008b3c:	f004 fd90 	bl	800d660 <GetUart>
 8008b40:	f009 fa1a 	bl	8011f78 <HAL_UART_DeInit>
			if (port == 3) {
 8008b44:	2d03      	cmp	r5, #3
 8008b46:	d020      	beq.n	8008b8a <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8008b48:	2090      	movs	r0, #144	; 0x90
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	05c0      	lsls	r0, r0, #23
 8008b4e:	f008 f9f9 	bl	8010f44 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b52:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b54:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b56:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b58:	3b03      	subs	r3, #3
 8008b5a:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b5c:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008b5e:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b60:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008b62:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b64:	f008 f8f2 	bl	8010d4c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008b68:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008b6a:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 8008b6c:	4b22      	ldr	r3, [pc, #136]	; (8008bf8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008b6e:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 8008b70:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008b72:	05c0      	lsls	r0, r0, #23
 8008b74:	3a05      	subs	r2, #5
 8008b76:	f008 fa89 	bl	801108c <HAL_GPIO_WritePin>
 8008b7a:	e779      	b.n	8008a70 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 8008b7c:	4a1c      	ldr	r2, [pc, #112]	; (8008bf0 <GetReadPrecentage+0x19c>)
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <GetReadPrecentage+0x1a0>)
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d01b      	beq.n	8008bbc <GetReadPrecentage+0x168>
 8008b84:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e77e      	b.n	8008a88 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008b8a:	2090      	movs	r0, #144	; 0x90
 8008b8c:	2110      	movs	r1, #16
 8008b8e:	05c0      	lsls	r0, r0, #23
 8008b90:	f008 f9d8 	bl	8010f44 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008b94:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b96:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008b98:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b9a:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b9c:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b9e:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ba0:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008ba2:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ba4:	f008 f8d2 	bl	8010d4c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008ba8:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008baa:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 8008bac:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008bae:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 8008bb0:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008bb2:	05c0      	lsls	r0, r0, #23
 8008bb4:	3a05      	subs	r2, #5
 8008bb6:	f008 fa69 	bl	801108c <HAL_GPIO_WritePin>
 8008bba:	e759      	b.n	8008a70 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 8008bbc:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e762      	b.n	8008a88 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 8008bc2:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	e75f      	b.n	8008a88 <GetReadPrecentage+0x34>
 8008bc8:	2000181c 	.word	0x2000181c
 8008bcc:	40004400 	.word	0x40004400
 8008bd0:	40011400 	.word	0x40011400
 8008bd4:	20006e7c 	.word	0x20006e7c
 8008bd8:	66666666 	.word	0x66666666
 8008bdc:	400a6666 	.word	0x400a6666
 8008be0:	40affe00 	.word	0x40affe00
 8008be4:	2000189c 	.word	0x2000189c
 8008be8:	42c80000 	.word	0x42c80000
 8008bec:	00001001 	.word	0x00001001
 8008bf0:	0801892c 	.word	0x0801892c
 8008bf4:	08018928 	.word	0x08018928
 8008bf8:	20000c3c 	.word	0x20000c3c

08008bfc <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008bfc:	2802      	cmp	r0, #2
 8008bfe:	d00e      	beq.n	8008c1e <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008c00:	2803      	cmp	r0, #3
 8008c02:	d002      	beq.n	8008c0a <Get_Rank+0xe>
 8008c04:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <Get_Rank+0x4c>)
 8008c06:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 8008c08:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 8008c0a:	4b10      	ldr	r3, [pc, #64]	; (8008c4c <Get_Rank+0x50>)
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	d016      	beq.n	8008c3e <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <Get_Rank+0x54>)
 8008c12:	4299      	cmp	r1, r3
 8008c14:	d1f6      	bne.n	8008c04 <Get_Rank+0x8>
		Rank_t = 3;
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <Get_Rank+0x4c>)
 8008c18:	7218      	strb	r0, [r3, #8]
 8008c1a:	2003      	movs	r0, #3
 8008c1c:	e7f4      	b.n	8008c08 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <Get_Rank+0x50>)
 8008c20:	4299      	cmp	r1, r3
 8008c22:	d007      	beq.n	8008c34 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 8008c24:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <Get_Rank+0x54>)
 8008c26:	4299      	cmp	r1, r3
 8008c28:	d1ec      	bne.n	8008c04 <Get_Rank+0x8>
		Rank_t = 1;
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <Get_Rank+0x4c>)
 8008c2e:	2001      	movs	r0, #1
 8008c30:	721a      	strb	r2, [r3, #8]
 8008c32:	e7e9      	b.n	8008c08 <Get_Rank+0xc>
		Rank_t = 0;
 8008c34:	2200      	movs	r2, #0
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <Get_Rank+0x4c>)
 8008c38:	2000      	movs	r0, #0
 8008c3a:	721a      	strb	r2, [r3, #8]
 8008c3c:	e7e4      	b.n	8008c08 <Get_Rank+0xc>
		Rank_t = 2;
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <Get_Rank+0x4c>)
 8008c42:	3801      	subs	r0, #1
 8008c44:	721a      	strb	r2, [r3, #8]
 8008c46:	e7df      	b.n	8008c08 <Get_Rank+0xc>
 8008c48:	2000189c 	.word	0x2000189c
 8008c4c:	08018928 	.word	0x08018928
 8008c50:	0801892c 	.word	0x0801892c

08008c54 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 8008c56:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008c58:	0004      	movs	r4, r0
 8008c5a:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d900      	bls.n	8008c62 <ADCSelectChannel+0xe>
}
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 8008c62:	2369      	movs	r3, #105	; 0x69
 8008c64:	2201      	movs	r2, #1
 8008c66:	4e1c      	ldr	r6, [pc, #112]	; (8008cd8 <ADCSelectChannel+0x84>)
 8008c68:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 8008c6a:	f004 fcf9 	bl	800d660 <GetUart>
 8008c6e:	f009 f983 	bl	8011f78 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008c72:	2206      	movs	r2, #6
 8008c74:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 8008c76:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 8008c78:	191b      	adds	r3, r3, r4
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008c7e:	f004 fcef 	bl	800d660 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008c82:	4a17      	ldr	r2, [pc, #92]	; (8008ce0 <ADCSelectChannel+0x8c>)
 8008c84:	6803      	ldr	r3, [r0, #0]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d011      	beq.n	8008cae <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 8008c8a:	4a16      	ldr	r2, [pc, #88]	; (8008ce4 <ADCSelectChannel+0x90>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d016      	beq.n	8008cbe <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 8008c90:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 8008c92:	0029      	movs	r1, r5
 8008c94:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 8008c96:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 8008c98:	f7ff ffb0 	bl	8008bfc <Get_Rank>
 8008c9c:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <ADCSelectChannel+0x94>)
 8008c9e:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 8008ca0:	2368      	movs	r3, #104	; 0x68
 8008ca2:	5cf3      	ldrb	r3, [r6, r3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1db      	bne.n	8008c60 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008ca8:	f7ff fdb4 	bl	8008814 <MX_ADC_Init>
}
 8008cac:	e7d8      	b.n	8008c60 <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 8008cae:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <ADCSelectChannel+0x98>)
 8008cb0:	429d      	cmp	r5, r3
 8008cb2:	d00e      	beq.n	8008cd2 <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <ADCSelectChannel+0x9c>)
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	d1ea      	bne.n	8008c90 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 8008cba:	2703      	movs	r7, #3
 8008cbc:	e7e8      	b.n	8008c90 <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <ADCSelectChannel+0x98>)
 8008cc0:	429d      	cmp	r5, r3
 8008cc2:	d004      	beq.n	8008cce <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <ADCSelectChannel+0x9c>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	d1e2      	bne.n	8008c90 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 8008cca:	2705      	movs	r7, #5
 8008ccc:	e7e0      	b.n	8008c90 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 8008cce:	2704      	movs	r7, #4
 8008cd0:	e7de      	b.n	8008c90 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 8008cd2:	2702      	movs	r7, #2
 8008cd4:	e7dc      	b.n	8008c90 <ADCSelectChannel+0x3c>
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	2000181c 	.word	0x2000181c
 8008cdc:	20000c3c 	.word	0x20000c3c
 8008ce0:	40004400 	.word	0x40004400
 8008ce4:	40011400 	.word	0x40011400
 8008ce8:	2000189c 	.word	0x2000189c
 8008cec:	08018928 	.word	0x08018928
 8008cf0:	0801892c 	.word	0x0801892c

08008cf4 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	4647      	mov	r7, r8
 8008cf8:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 8008cfa:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008cfc:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 8008cfe:	4d3a      	ldr	r5, [pc, #232]	; (8008de8 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d00:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 8008d02:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d04:	000c      	movs	r4, r1
 8008d06:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d00b      	beq.n	8008d24 <ReadADCChannel+0x30>
 8008d0c:	4c37      	ldr	r4, [pc, #220]	; (8008dec <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008d0e:	7a23      	ldrb	r3, [r4, #8]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	18e4      	adds	r4, r4, r3
 8008d14:	89a0      	ldrh	r0, [r4, #12]
 8008d16:	f7f8 f927 	bl	8000f68 <__aeabi_ui2f>
 8008d1a:	6030      	str	r0, [r6, #0]
}
 8008d1c:	bc0c      	pop	{r2, r3}
 8008d1e:	4690      	mov	r8, r2
 8008d20:	4699      	mov	r9, r3
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008d24:	f004 fc9c 	bl	800d660 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008d28:	4a31      	ldr	r2, [pc, #196]	; (8008df0 <ReadADCChannel+0xfc>)
 8008d2a:	6803      	ldr	r3, [r0, #0]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d03f      	beq.n	8008db0 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 8008d30:	4a30      	ldr	r2, [pc, #192]	; (8008df4 <ReadADCChannel+0x100>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d049      	beq.n	8008dca <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 8008d36:	237c      	movs	r3, #124	; 0x7c
 8008d38:	464a      	mov	r2, r9
 8008d3a:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 8008d3c:	0021      	movs	r1, r4
 8008d3e:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 8008d40:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 8008d42:	f7ff ff5b 	bl	8008bfc <Get_Rank>
		sConfig.Channel = Channel;
 8008d46:	4643      	mov	r3, r8
 8008d48:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d4a:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 8008d4c:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d4e:	2380      	movs	r3, #128	; 0x80
 8008d50:	015b      	lsls	r3, r3, #5
 8008d52:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d54:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 8008d56:	4c25      	ldr	r4, [pc, #148]	; (8008dec <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d58:	4f27      	ldr	r7, [pc, #156]	; (8008df8 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 8008d5a:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d5c:	316c      	adds	r1, #108	; 0x6c
 8008d5e:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d60:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d62:	f006 ff79 	bl	800fc58 <HAL_ADC_ConfigChannel>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d12b      	bne.n	8008dc2 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 8008d6a:	0038      	movs	r0, r7
 8008d6c:	f006 fe48 	bl	800fa00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008d70:	2164      	movs	r1, #100	; 0x64
 8008d72:	0038      	movs	r0, r7
 8008d74:	f006 fe90 	bl	800fa98 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008d78:	0038      	movs	r0, r7
 8008d7a:	f006 fef1 	bl	800fb60 <HAL_ADC_GetValue>
 8008d7e:	7a23      	ldrb	r3, [r4, #8]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	18e3      	adds	r3, r4, r3
 8008d84:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 8008d86:	0038      	movs	r0, r7
 8008d88:	f006 fe66 	bl	800fa58 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008d8c:	237c      	movs	r3, #124	; 0x7c
 8008d8e:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d90:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 8008d92:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008d94:	4b19      	ldr	r3, [pc, #100]	; (8008dfc <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d96:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 8008d98:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d9a:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d9c:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d9e:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008da0:	f006 ff5a 	bl	800fc58 <HAL_ADC_ConfigChannel>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d0b2      	beq.n	8008d0e <ReadADCChannel+0x1a>
	HAL_Delay(100);
 8008da8:	2064      	movs	r0, #100	; 0x64
 8008daa:	f006 fcad 	bl	800f708 <HAL_Delay>
 8008dae:	e7ae      	b.n	8008d0e <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 8008db0:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <ReadADCChannel+0x10c>)
 8008db2:	429c      	cmp	r4, r3
 8008db4:	d012      	beq.n	8008ddc <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 8008db6:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <ReadADCChannel+0x110>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d1bc      	bne.n	8008d36 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	e7b9      	b.n	8008d36 <ReadADCChannel+0x42>
	HAL_Delay(100);
 8008dc2:	2064      	movs	r0, #100	; 0x64
 8008dc4:	f006 fca0 	bl	800f708 <HAL_Delay>
 8008dc8:	e7cf      	b.n	8008d6a <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <ReadADCChannel+0x10c>)
 8008dcc:	429c      	cmp	r4, r3
 8008dce:	d008      	beq.n	8008de2 <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <ReadADCChannel+0x110>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d1af      	bne.n	8008d36 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 8008dd6:	2305      	movs	r3, #5
 8008dd8:	4699      	mov	r9, r3
 8008dda:	e7ac      	b.n	8008d36 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	4699      	mov	r9, r3
 8008de0:	e7a9      	b.n	8008d36 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 8008de2:	2304      	movs	r3, #4
 8008de4:	4699      	mov	r9, r3
 8008de6:	e7a6      	b.n	8008d36 <ReadADCChannel+0x42>
 8008de8:	2000181c 	.word	0x2000181c
 8008dec:	2000189c 	.word	0x2000189c
 8008df0:	40004400 	.word	0x40004400
 8008df4:	40011400 	.word	0x40011400
 8008df8:	20006e7c 	.word	0x20006e7c
 8008dfc:	00001001 	.word	0x00001001
 8008e00:	08018928 	.word	0x08018928
 8008e04:	0801892c 	.word	0x0801892c

08008e08 <buttonReleasedCallback>:
 8008e08:	4770      	bx	lr
 8008e0a:	46c0      	nop			; (mov r8, r8)

08008e0c <buttonClickedCallback>:
 8008e0c:	4770      	bx	lr
 8008e0e:	46c0      	nop			; (mov r8, r8)

08008e10 <buttonDblClickedCallback>:
 8008e10:	4770      	bx	lr
 8008e12:	46c0      	nop			; (mov r8, r8)

08008e14 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008e14:	4770      	bx	lr
 8008e16:	46c0      	nop			; (mov r8, r8)

08008e18 <buttonReleasedForYCallback>:
 8008e18:	4770      	bx	lr
 8008e1a:	46c0      	nop			; (mov r8, r8)

08008e1c <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	4645      	mov	r5, r8
 8008e20:	46de      	mov	lr, fp
 8008e22:	464e      	mov	r6, r9
 8008e24:	4657      	mov	r7, sl
 8008e26:	4bc5      	ldr	r3, [pc, #788]	; (800913c <CheckAttachedButtons+0x320>)
 8008e28:	b5e0      	push	{r5, r6, r7, lr}
 8008e2a:	4698      	mov	r8, r3
 8008e2c:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e2e:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 8008e30:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 8008e36:	4bc2      	ldr	r3, [pc, #776]	; (8009140 <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 8008e38:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	b2eb      	uxtb	r3, r5
 8008e3e:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 8008e40:	7aa3      	ldrb	r3, [r4, #10]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d100      	bne.n	8008e48 <CheckAttachedButtons+0x2c>
 8008e46:	e0c0      	b.n	8008fca <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 8008e48:	464b      	mov	r3, r9
 8008e4a:	7d1b      	ldrb	r3, [r3, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d100      	bne.n	8008e52 <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 8008e50:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008e52:	ab04      	add	r3, sp, #16
 8008e54:	469c      	mov	ip, r3
 8008e56:	270e      	movs	r7, #14
 8008e58:	ae07      	add	r6, sp, #28
 8008e5a:	4467      	add	r7, ip
 8008e5c:	ab09      	add	r3, sp, #36	; 0x24
 8008e5e:	0032      	movs	r2, r6
 8008e60:	a908      	add	r1, sp, #32
 8008e62:	9700      	str	r7, [sp, #0]
 8008e64:	4650      	mov	r0, sl
 8008e66:	f003 fe67 	bl	800cb38 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008e6a:	8831      	ldrh	r1, [r6, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	9808      	ldr	r0, [sp, #32]
 8008e70:	f008 f90c 	bl	801108c <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e74:	200a      	movs	r0, #10
 8008e76:	f004 f9dd 	bl	800d234 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8008e7a:	8839      	ldrh	r1, [r7, #0]
 8008e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e7e:	f008 f8ff 	bl	8011080 <HAL_GPIO_ReadPin>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d100      	bne.n	8008e88 <CheckAttachedButtons+0x6c>
 8008e86:	e14b      	b.n	8009120 <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008e88:	8831      	ldrh	r1, [r6, #0]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	9808      	ldr	r0, [sp, #32]
 8008e8e:	f008 f8fd 	bl	801108c <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8008e92:	7aa3      	ldrb	r3, [r4, #10]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d100      	bne.n	8008e9a <CheckAttachedButtons+0x7e>
 8008e98:	e0a6      	b.n	8008fe8 <CheckAttachedButtons+0x1cc>
 8008e9a:	d800      	bhi.n	8008e9e <CheckAttachedButtons+0x82>
 8008e9c:	e0a1      	b.n	8008fe2 <CheckAttachedButtons+0x1c6>
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d100      	bne.n	8008ea4 <CheckAttachedButtons+0x88>
 8008ea2:	e170      	b.n	8009186 <CheckAttachedButtons+0x36a>
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d000      	beq.n	8008eaa <CheckAttachedButtons+0x8e>
 8008ea8:	e156      	b.n	8009158 <CheckAttachedButtons+0x33c>
 8008eaa:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 8008eac:	4658      	mov	r0, fp
 8008eae:	00aa      	lsls	r2, r5, #2
 8008eb0:	3138      	adds	r1, #56	; 0x38
 8008eb2:	588b      	ldr	r3, [r1, r2]
 8008eb4:	2801      	cmp	r0, #1
 8008eb6:	d100      	bne.n	8008eba <CheckAttachedButtons+0x9e>
 8008eb8:	e170      	b.n	800919c <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d100      	bne.n	8008ec0 <CheckAttachedButtons+0xa4>
 8008ebe:	e217      	b.n	80092f0 <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 8008ec0:	9904      	ldr	r1, [sp, #16]
 8008ec2:	2904      	cmp	r1, #4
 8008ec4:	d100      	bne.n	8008ec8 <CheckAttachedButtons+0xac>
 8008ec6:	e14f      	b.n	8009168 <CheckAttachedButtons+0x34c>
 8008ec8:	9904      	ldr	r1, [sp, #16]
 8008eca:	2902      	cmp	r1, #2
 8008ecc:	d100      	bne.n	8008ed0 <CheckAttachedButtons+0xb4>
 8008ece:	e14b      	b.n	8009168 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 8008ed0:	9904      	ldr	r1, [sp, #16]
 8008ed2:	2903      	cmp	r1, #3
 8008ed4:	d002      	beq.n	8008edc <CheckAttachedButtons+0xc0>
 8008ed6:	489b      	ldr	r0, [pc, #620]	; (8009144 <CheckAttachedButtons+0x328>)
 8008ed8:	2901      	cmp	r1, #1
 8008eda:	d114      	bne.n	8008f06 <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 8008edc:	4640      	mov	r0, r8
 8008ede:	3050      	adds	r0, #80	; 0x50
 8008ee0:	5881      	ldr	r1, [r0, r2]
 8008ee2:	4e99      	ldr	r6, [pc, #612]	; (8009148 <CheckAttachedButtons+0x32c>)
 8008ee4:	42b1      	cmp	r1, r6
 8008ee6:	d900      	bls.n	8008eea <CheckAttachedButtons+0xce>
 8008ee8:	e092      	b.n	8009010 <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 8008eea:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 8008eec:	3101      	adds	r1, #1
 8008eee:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 8008ef0:	7fbf      	ldrb	r7, [r7, #30]
 8008ef2:	4996      	ldr	r1, [pc, #600]	; (800914c <CheckAttachedButtons+0x330>)
 8008ef4:	4893      	ldr	r0, [pc, #588]	; (8009144 <CheckAttachedButtons+0x328>)
 8008ef6:	5c69      	ldrb	r1, [r5, r1]
 8008ef8:	7946      	ldrb	r6, [r0, #5]
 8008efa:	2f02      	cmp	r7, #2
 8008efc:	d100      	bne.n	8008f00 <CheckAttachedButtons+0xe4>
 8008efe:	e092      	b.n	8009026 <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008f00:	42b1      	cmp	r1, r6
 8008f02:	d900      	bls.n	8008f06 <CheckAttachedButtons+0xea>
 8008f04:	e139      	b.n	800917a <CheckAttachedButtons+0x35e>
 8008f06:	4646      	mov	r6, r8
 8008f08:	3650      	adds	r6, #80	; 0x50
 8008f0a:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 8008f0c:	8801      	ldrh	r1, [r0, #0]
 8008f0e:	9603      	str	r6, [sp, #12]
 8008f10:	4299      	cmp	r1, r3
 8008f12:	d826      	bhi.n	8008f62 <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 8008f14:	d105      	bne.n	8008f22 <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8008f16:	2707      	movs	r7, #7
 8008f18:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 8008f1a:	4647      	mov	r7, r8
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	3738      	adds	r7, #56	; 0x38
 8008f20:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008f22:	9e03      	ldr	r6, [sp, #12]
 8008f24:	42b1      	cmp	r1, r6
 8008f26:	d205      	bcs.n	8008f34 <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 8008f28:	4646      	mov	r6, r8
 8008f2a:	2700      	movs	r7, #0
 8008f2c:	3650      	adds	r6, #80	; 0x50
 8008f2e:	50b7      	str	r7, [r6, r2]
 8008f30:	2600      	movs	r6, #0
 8008f32:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 8008f34:	8847      	ldrh	r7, [r0, #2]
 8008f36:	9705      	str	r7, [sp, #20]
 8008f38:	429f      	cmp	r7, r3
 8008f3a:	d300      	bcc.n	8008f3e <CheckAttachedButtons+0x122>
 8008f3c:	e07a      	b.n	8009034 <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 8008f3e:	27f4      	movs	r7, #244	; 0xf4
 8008f40:	37ff      	adds	r7, #255	; 0xff
 8008f42:	42bb      	cmp	r3, r7
 8008f44:	d900      	bls.n	8008f48 <CheckAttachedButtons+0x12c>
 8008f46:	e075      	b.n	8009034 <CheckAttachedButtons+0x218>
					if (clicked == 0)
 8008f48:	464b      	mov	r3, r9
 8008f4a:	7f9b      	ldrb	r3, [r3, #30]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d100      	bne.n	8008f52 <CheckAttachedButtons+0x136>
 8008f50:	e1d8      	b.n	8009304 <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d105      	bne.n	8008f62 <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8008f56:	4b7d      	ldr	r3, [pc, #500]	; (800914c <CheckAttachedButtons+0x330>)
 8008f58:	7907      	ldrb	r7, [r0, #4]
 8008f5a:	5ceb      	ldrb	r3, [r5, r3]
 8008f5c:	429f      	cmp	r7, r3
 8008f5e:	d200      	bcs.n	8008f62 <CheckAttachedButtons+0x146>
 8008f60:	e1dc      	b.n	800931c <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d822      	bhi.n	8008fae <CheckAttachedButtons+0x192>
 8008f68:	4643      	mov	r3, r8
 8008f6a:	8840      	ldrh	r0, [r0, #2]
 8008f6c:	3338      	adds	r3, #56	; 0x38
 8008f6e:	589b      	ldr	r3, [r3, r2]
 8008f70:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8008f72:	9803      	ldr	r0, [sp, #12]
 8008f74:	4281      	cmp	r1, r0
 8008f76:	d100      	bne.n	8008f7a <CheckAttachedButtons+0x15e>
 8008f78:	e19b      	b.n	80092b2 <CheckAttachedButtons+0x496>
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	3050      	adds	r0, #80	; 0x50
 8008f7e:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d203      	bcs.n	8008f8c <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 8008f84:	4643      	mov	r3, r8
 8008f86:	2100      	movs	r1, #0
 8008f88:	3338      	adds	r3, #56	; 0x38
 8008f8a:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	4283      	cmp	r3, r0
 8008f90:	d300      	bcc.n	8008f94 <CheckAttachedButtons+0x178>
 8008f92:	e091      	b.n	80090b8 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 8008f94:	23f4      	movs	r3, #244	; 0xf4
 8008f96:	33ff      	adds	r3, #255	; 0xff
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	d900      	bls.n	8008f9e <CheckAttachedButtons+0x182>
 8008f9c:	e08c      	b.n	80090b8 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	7f9b      	ldrb	r3, [r3, #30]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d100      	bne.n	8008fa8 <CheckAttachedButtons+0x18c>
 8008fa6:	e15c      	b.n	8009262 <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d100      	bne.n	8008fae <CheckAttachedButtons+0x192>
 8008fac:	e12d      	b.n	800920a <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 8008fae:	7a63      	ldrb	r3, [r4, #9]
 8008fb0:	3b05      	subs	r3, #5
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b09      	cmp	r3, #9
 8008fb6:	d808      	bhi.n	8008fca <CheckAttachedButtons+0x1ae>
 8008fb8:	4a65      	ldr	r2, [pc, #404]	; (8009150 <CheckAttachedButtons+0x334>)
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	58d3      	ldr	r3, [r2, r3]
 8008fbe:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f7ff fa01 	bl	80083c8 <buttonPressedCallback>
				button[i].state = NONE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	7263      	strb	r3, [r4, #9]
 8008fca:	3501      	adds	r5, #1
 8008fcc:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8008fce:	2d06      	cmp	r5, #6
 8008fd0:	d000      	beq.n	8008fd4 <CheckAttachedButtons+0x1b8>
 8008fd2:	e733      	b.n	8008e3c <CheckAttachedButtons+0x20>
}
 8008fd4:	b00b      	add	sp, #44	; 0x2c
 8008fd6:	bc3c      	pop	{r2, r3, r4, r5}
 8008fd8:	4690      	mov	r8, r2
 8008fda:	4699      	mov	r9, r3
 8008fdc:	46a2      	mov	sl, r4
 8008fde:	46ab      	mov	fp, r5
 8008fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d000      	beq.n	8008fe8 <CheckAttachedButtons+0x1cc>
 8008fe6:	e0b7      	b.n	8009158 <CheckAttachedButtons+0x33c>
 8008fe8:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 8008fea:	4658      	mov	r0, fp
 8008fec:	00aa      	lsls	r2, r5, #2
 8008fee:	3138      	adds	r1, #56	; 0x38
 8008ff0:	588b      	ldr	r3, [r1, r2]
 8008ff2:	2801      	cmp	r0, #1
 8008ff4:	d100      	bne.n	8008ff8 <CheckAttachedButtons+0x1dc>
 8008ff6:	e163      	b.n	80092c0 <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d000      	beq.n	8008ffe <CheckAttachedButtons+0x1e2>
 8008ffc:	e760      	b.n	8008ec0 <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 8008ffe:	4640      	mov	r0, r8
 8009000:	2103      	movs	r1, #3
 8009002:	3050      	adds	r0, #80	; 0x50
 8009004:	9104      	str	r1, [sp, #16]
 8009006:	4e50      	ldr	r6, [pc, #320]	; (8009148 <CheckAttachedButtons+0x32c>)
 8009008:	5881      	ldr	r1, [r0, r2]
 800900a:	42b1      	cmp	r1, r6
 800900c:	d800      	bhi.n	8009010 <CheckAttachedButtons+0x1f4>
 800900e:	e76c      	b.n	8008eea <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 8009010:	2100      	movs	r1, #0
				if (clicked == 2
 8009012:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 8009014:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 8009016:	7fbf      	ldrb	r7, [r7, #30]
 8009018:	494c      	ldr	r1, [pc, #304]	; (800914c <CheckAttachedButtons+0x330>)
 800901a:	484a      	ldr	r0, [pc, #296]	; (8009144 <CheckAttachedButtons+0x328>)
 800901c:	5c69      	ldrb	r1, [r5, r1]
 800901e:	7946      	ldrb	r6, [r0, #5]
 8009020:	2f02      	cmp	r7, #2
 8009022:	d000      	beq.n	8009026 <CheckAttachedButtons+0x20a>
 8009024:	e76c      	b.n	8008f00 <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8009026:	42b1      	cmp	r1, r6
 8009028:	d900      	bls.n	800902c <CheckAttachedButtons+0x210>
 800902a:	e0a6      	b.n	800917a <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800902c:	4e47      	ldr	r6, [pc, #284]	; (800914c <CheckAttachedButtons+0x330>)
 800902e:	3101      	adds	r1, #1
 8009030:	55a9      	strb	r1, [r5, r6]
 8009032:	e768      	b.n	8008f06 <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8009034:	4f47      	ldr	r7, [pc, #284]	; (8009154 <CheckAttachedButtons+0x338>)
 8009036:	46bc      	mov	ip, r7
 8009038:	001f      	movs	r7, r3
 800903a:	3ff5      	subs	r7, #245	; 0xf5
 800903c:	3fff      	subs	r7, #255	; 0xff
 800903e:	4567      	cmp	r7, ip
 8009040:	d900      	bls.n	8009044 <CheckAttachedButtons+0x228>
 8009042:	e78e      	b.n	8008f62 <CheckAttachedButtons+0x146>
					if (clicked)
 8009044:	464f      	mov	r7, r9
 8009046:	7fbf      	ldrb	r7, [r7, #30]
 8009048:	2f00      	cmp	r7, #0
 800904a:	d002      	beq.n	8009052 <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800904c:	2700      	movs	r7, #0
 800904e:	464e      	mov	r6, r9
 8009050:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8009052:	7ae7      	ldrb	r7, [r4, #11]
 8009054:	46bc      	mov	ip, r7
	t1 *= 1000;
 8009056:	4666      	mov	r6, ip
 8009058:	017f      	lsls	r7, r7, #5
 800905a:	1bbf      	subs	r7, r7, r6
 800905c:	00bf      	lsls	r7, r7, #2
 800905e:	4467      	add	r7, ip
 8009060:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 8009062:	429f      	cmp	r7, r3
 8009064:	d100      	bne.n	8009068 <CheckAttachedButtons+0x24c>
 8009066:	e0e5      	b.n	8009234 <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8009068:	7b26      	ldrb	r6, [r4, #12]
 800906a:	46b4      	mov	ip, r6
	t2 *= 1000;
 800906c:	0177      	lsls	r7, r6, #5
 800906e:	1bbf      	subs	r7, r7, r6
 8009070:	00bf      	lsls	r7, r7, #2
 8009072:	4467      	add	r7, ip
 8009074:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 8009076:	429f      	cmp	r7, r3
 8009078:	d009      	beq.n	800908e <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800907a:	7b66      	ldrb	r6, [r4, #13]
 800907c:	46b4      	mov	ip, r6
	t3 *= 1000;
 800907e:	0177      	lsls	r7, r6, #5
 8009080:	1bbf      	subs	r7, r7, r6
 8009082:	00bf      	lsls	r7, r7, #2
 8009084:	4467      	add	r7, ip
 8009086:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 8009088:	429f      	cmp	r7, r3
 800908a:	d000      	beq.n	800908e <CheckAttachedButtons+0x272>
 800908c:	e769      	b.n	8008f62 <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800908e:	200a      	movs	r0, #10
 8009090:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8009092:	9803      	ldr	r0, [sp, #12]
 8009094:	4281      	cmp	r1, r0
 8009096:	d800      	bhi.n	800909a <CheckAttachedButtons+0x27e>
 8009098:	e76b      	b.n	8008f72 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800909a:	464b      	mov	r3, r9
 800909c:	7d1b      	ldrb	r3, [r3, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d193      	bne.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 80090a2:	7c63      	ldrb	r3, [r4, #17]
 80090a4:	071b      	lsls	r3, r3, #28
 80090a6:	d590      	bpl.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 80090a8:	2301      	movs	r3, #1
 80090aa:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 80090ac:	2102      	movs	r1, #2
 80090ae:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80090b0:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 80090b2:	f7ff feaf 	bl	8008e14 <buttonPressedForXCallback>
 80090b6:	e788      	b.n	8008fca <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 80090b8:	0003      	movs	r3, r0
 80090ba:	4a26      	ldr	r2, [pc, #152]	; (8009154 <CheckAttachedButtons+0x338>)
 80090bc:	3bf5      	subs	r3, #245	; 0xf5
 80090be:	3bff      	subs	r3, #255	; 0xff
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d900      	bls.n	80090c6 <CheckAttachedButtons+0x2aa>
 80090c4:	e773      	b.n	8008fae <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80090c6:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 80090c8:	014b      	lsls	r3, r1, #5
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	185b      	adds	r3, r3, r1
 80090d0:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 80090d2:	4283      	cmp	r3, r0
 80090d4:	d100      	bne.n	80090d8 <CheckAttachedButtons+0x2bc>
 80090d6:	e0d9      	b.n	800928c <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80090d8:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 80090da:	014b      	lsls	r3, r1, #5
 80090dc:	1a5b      	subs	r3, r3, r1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	185b      	adds	r3, r3, r1
 80090e2:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 80090e4:	4283      	cmp	r3, r0
 80090e6:	d008      	beq.n	80090fa <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 80090e8:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 80090ea:	014b      	lsls	r3, r1, #5
 80090ec:	1a5b      	subs	r3, r3, r1
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	185b      	adds	r3, r3, r1
 80090f2:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 80090f4:	4283      	cmp	r3, r0
 80090f6:	d000      	beq.n	80090fa <CheckAttachedButtons+0x2de>
 80090f8:	e759      	b.n	8008fae <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 80090fa:	230d      	movs	r3, #13
 80090fc:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 80090fe:	464b      	mov	r3, r9
 8009100:	7d1b      	ldrb	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <CheckAttachedButtons+0x2ec>
 8009106:	e760      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 8009108:	7c63      	ldrb	r3, [r4, #17]
 800910a:	065b      	lsls	r3, r3, #25
 800910c:	d400      	bmi.n	8009110 <CheckAttachedButtons+0x2f4>
 800910e:	e75c      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 8009110:	2301      	movs	r3, #1
 8009112:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 8009114:	2102      	movs	r1, #2
 8009116:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009118:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800911a:	f7ff fe7d 	bl	8008e18 <buttonReleasedForYCallback>
 800911e:	e754      	b.n	8008fca <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8009120:	8831      	ldrh	r1, [r6, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	9808      	ldr	r0, [sp, #32]
 8009126:	f007 ffb1 	bl	801108c <HAL_GPIO_WritePin>
				Delay_us(10);
 800912a:	200a      	movs	r0, #10
 800912c:	f004 f882 	bl	800d234 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8009130:	8839      	ldrh	r1, [r7, #0]
 8009132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009134:	f007 ffa4 	bl	8011080 <HAL_GPIO_ReadPin>
 8009138:	4683      	mov	fp, r0
 800913a:	e6a5      	b.n	8008e88 <CheckAttachedButtons+0x6c>
 800913c:	2000181c 	.word	0x2000181c
 8009140:	2000189c 	.word	0x2000189c
 8009144:	20006db4 	.word	0x20006db4
 8009148:	0000fffe 	.word	0x0000fffe
 800914c:	200018b4 	.word	0x200018b4
 8009150:	08017ae4 	.word	0x08017ae4
 8009154:	0000fe0a 	.word	0x0000fe0a
 8009158:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800915a:	9904      	ldr	r1, [sp, #16]
 800915c:	3338      	adds	r3, #56	; 0x38
 800915e:	00aa      	lsls	r2, r5, #2
 8009160:	589b      	ldr	r3, [r3, r2]
 8009162:	2904      	cmp	r1, #4
 8009164:	d000      	beq.n	8009168 <CheckAttachedButtons+0x34c>
 8009166:	e6af      	b.n	8008ec8 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 8009168:	4972      	ldr	r1, [pc, #456]	; (8009334 <CheckAttachedButtons+0x518>)
 800916a:	428b      	cmp	r3, r1
 800916c:	d819      	bhi.n	80091a2 <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800916e:	4641      	mov	r1, r8
 8009170:	3301      	adds	r3, #1
 8009172:	3138      	adds	r1, #56	; 0x38
 8009174:	508b      	str	r3, [r1, r2]
 8009176:	4870      	ldr	r0, [pc, #448]	; (8009338 <CheckAttachedButtons+0x51c>)
 8009178:	e6c5      	b.n	8008f06 <CheckAttachedButtons+0xea>
					clicked = 0;
 800917a:	2100      	movs	r1, #0
 800917c:	464e      	mov	r6, r9
 800917e:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8009180:	4e6e      	ldr	r6, [pc, #440]	; (800933c <CheckAttachedButtons+0x520>)
 8009182:	55a9      	strb	r1, [r5, r6]
 8009184:	e6bf      	b.n	8008f06 <CheckAttachedButtons+0xea>
 8009186:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 8009188:	4658      	mov	r0, fp
 800918a:	00aa      	lsls	r2, r5, #2
 800918c:	3138      	adds	r1, #56	; 0x38
 800918e:	588b      	ldr	r3, [r1, r2]
 8009190:	2801      	cmp	r0, #1
 8009192:	d100      	bne.n	8009196 <CheckAttachedButtons+0x37a>
 8009194:	e09d      	b.n	80092d2 <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 8009196:	2800      	cmp	r0, #0
 8009198:	d000      	beq.n	800919c <CheckAttachedButtons+0x380>
 800919a:	e691      	b.n	8008ec0 <CheckAttachedButtons+0xa4>
					state = OFF;
 800919c:	2101      	movs	r1, #1
 800919e:	9104      	str	r1, [sp, #16]
 80091a0:	e69c      	b.n	8008edc <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 80091a2:	4643      	mov	r3, r8
 80091a4:	2100      	movs	r1, #0
 80091a6:	3338      	adds	r3, #56	; 0x38
 80091a8:	5099      	str	r1, [r3, r2]
 80091aa:	4863      	ldr	r0, [pc, #396]	; (8009338 <CheckAttachedButtons+0x51c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	e6aa      	b.n	8008f06 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 80091b0:	464b      	mov	r3, r9
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d000      	beq.n	80091ba <CheckAttachedButtons+0x39e>
 80091b8:	e707      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 80091ba:	7c63      	ldrb	r3, [r4, #17]
 80091bc:	06db      	lsls	r3, r3, #27
 80091be:	d400      	bmi.n	80091c2 <CheckAttachedButtons+0x3a6>
 80091c0:	e703      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 80091c2:	2301      	movs	r3, #1
 80091c4:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 80091c6:	2103      	movs	r1, #3
 80091c8:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80091ca:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 80091cc:	f7ff fe22 	bl	8008e14 <buttonPressedForXCallback>
 80091d0:	e6fb      	b.n	8008fca <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7ff fe18 	bl	8008e08 <buttonReleasedCallback>
				button[i].state = NONE;
 80091d8:	2300      	movs	r3, #0
 80091da:	3501      	adds	r5, #1
 80091dc:	7263      	strb	r3, [r4, #9]
 80091de:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 80091e0:	2d06      	cmp	r5, #6
 80091e2:	d000      	beq.n	80091e6 <CheckAttachedButtons+0x3ca>
 80091e4:	e62a      	b.n	8008e3c <CheckAttachedButtons+0x20>
 80091e6:	e6f5      	b.n	8008fd4 <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 80091e8:	464b      	mov	r3, r9
 80091ea:	7d1b      	ldrb	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d000      	beq.n	80091f2 <CheckAttachedButtons+0x3d6>
 80091f0:	e6eb      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 80091f2:	7c63      	ldrb	r3, [r4, #17]
 80091f4:	2b7f      	cmp	r3, #127	; 0x7f
 80091f6:	d800      	bhi.n	80091fa <CheckAttachedButtons+0x3de>
 80091f8:	e6e7      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 80091fa:	2301      	movs	r3, #1
 80091fc:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 80091fe:	2103      	movs	r1, #3
 8009200:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009202:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8009204:	f7ff fe08 	bl	8008e18 <buttonReleasedForYCallback>
 8009208:	e6df      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800920a:	3303      	adds	r3, #3
 800920c:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800920e:	464a      	mov	r2, r9
 8009210:	2300      	movs	r3, #0
 8009212:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 8009214:	464b      	mov	r3, r9
 8009216:	7d1b      	ldrb	r3, [r3, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d000      	beq.n	800921e <CheckAttachedButtons+0x402>
 800921c:	e6d5      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800921e:	7c63      	ldrb	r3, [r4, #17]
 8009220:	079b      	lsls	r3, r3, #30
 8009222:	d400      	bmi.n	8009226 <CheckAttachedButtons+0x40a>
 8009224:	e6d1      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 8009226:	2301      	movs	r3, #1
 8009228:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800922a:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800922c:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800922e:	f7ff fdef 	bl	8008e10 <buttonDblClickedCallback>
 8009232:	e6ca      	b.n	8008fca <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 8009234:	2009      	movs	r0, #9
 8009236:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8009238:	9803      	ldr	r0, [sp, #12]
 800923a:	4281      	cmp	r1, r0
 800923c:	d800      	bhi.n	8009240 <CheckAttachedButtons+0x424>
 800923e:	e698      	b.n	8008f72 <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 8009240:	464b      	mov	r3, r9
 8009242:	7d1b      	ldrb	r3, [r3, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d000      	beq.n	800924a <CheckAttachedButtons+0x42e>
 8009248:	e6bf      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800924a:	7c63      	ldrb	r3, [r4, #17]
 800924c:	075b      	lsls	r3, r3, #29
 800924e:	d400      	bmi.n	8009252 <CheckAttachedButtons+0x436>
 8009250:	e6bb      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 8009252:	2301      	movs	r3, #1
 8009254:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 8009256:	2101      	movs	r1, #1
 8009258:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800925a:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800925c:	f7ff fdda 	bl	8008e14 <buttonPressedForXCallback>
 8009260:	e6b3      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 8009262:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 8009264:	3304      	adds	r3, #4
 8009266:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 8009268:	3b03      	subs	r3, #3
 800926a:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800926c:	464b      	mov	r3, r9
 800926e:	7d1b      	ldrb	r3, [r3, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d000      	beq.n	8009276 <CheckAttachedButtons+0x45a>
 8009274:	e6a9      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 8009276:	7c62      	ldrb	r2, [r4, #17]
 8009278:	3301      	adds	r3, #1
 800927a:	4213      	tst	r3, r2
 800927c:	d100      	bne.n	8009280 <CheckAttachedButtons+0x464>
 800927e:	e6a4      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 8009280:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 8009282:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009284:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 8009286:	f7ff fdc1 	bl	8008e0c <buttonClickedCallback>
 800928a:	e69e      	b.n	8008fca <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800928c:	230c      	movs	r3, #12
 800928e:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 8009290:	464b      	mov	r3, r9
 8009292:	7d1b      	ldrb	r3, [r3, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d000      	beq.n	800929a <CheckAttachedButtons+0x47e>
 8009298:	e697      	b.n	8008fca <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800929a:	7c63      	ldrb	r3, [r4, #17]
 800929c:	069b      	lsls	r3, r3, #26
 800929e:	d400      	bmi.n	80092a2 <CheckAttachedButtons+0x486>
 80092a0:	e693      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 80092a2:	2301      	movs	r3, #1
 80092a4:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 80092a6:	2101      	movs	r1, #1
 80092a8:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80092aa:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 80092ac:	f7ff fdb4 	bl	8008e18 <buttonReleasedForYCallback>
 80092b0:	e68b      	b.n	8008fca <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80092b2:	2008      	movs	r0, #8
					++releaseCounter[i];
 80092b4:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80092b6:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 80092b8:	3650      	adds	r6, #80	; 0x50
 80092ba:	1c48      	adds	r0, r1, #1
 80092bc:	50b0      	str	r0, [r6, r2]
 80092be:	e65f      	b.n	8008f80 <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 80092c0:	481c      	ldr	r0, [pc, #112]	; (8009334 <CheckAttachedButtons+0x518>)
 80092c2:	4283      	cmp	r3, r0
 80092c4:	d80e      	bhi.n	80092e4 <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 80092c6:	3301      	adds	r3, #1
 80092c8:	508b      	str	r3, [r1, r2]
 80092ca:	2104      	movs	r1, #4
 80092cc:	481a      	ldr	r0, [pc, #104]	; (8009338 <CheckAttachedButtons+0x51c>)
 80092ce:	9104      	str	r1, [sp, #16]
 80092d0:	e619      	b.n	8008f06 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 80092d2:	4818      	ldr	r0, [pc, #96]	; (8009334 <CheckAttachedButtons+0x518>)
 80092d4:	4283      	cmp	r3, r0
 80092d6:	d919      	bls.n	800930c <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 80092d8:	2300      	movs	r3, #0
 80092da:	508b      	str	r3, [r1, r2]
 80092dc:	2102      	movs	r1, #2
 80092de:	4816      	ldr	r0, [pc, #88]	; (8009338 <CheckAttachedButtons+0x51c>)
 80092e0:	9104      	str	r1, [sp, #16]
 80092e2:	e610      	b.n	8008f06 <CheckAttachedButtons+0xea>
 80092e4:	2300      	movs	r3, #0
 80092e6:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 80092e8:	2104      	movs	r1, #4
 80092ea:	4813      	ldr	r0, [pc, #76]	; (8009338 <CheckAttachedButtons+0x51c>)
 80092ec:	9104      	str	r1, [sp, #16]
 80092ee:	e60a      	b.n	8008f06 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 80092f0:	4810      	ldr	r0, [pc, #64]	; (8009334 <CheckAttachedButtons+0x518>)
 80092f2:	4283      	cmp	r3, r0
 80092f4:	d90a      	bls.n	800930c <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 80092f6:	465b      	mov	r3, fp
 80092f8:	508b      	str	r3, [r1, r2]
					state = ON;
 80092fa:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 80092fc:	2300      	movs	r3, #0
					state = ON;
 80092fe:	9104      	str	r1, [sp, #16]
 8009300:	480d      	ldr	r0, [pc, #52]	; (8009338 <CheckAttachedButtons+0x51c>)
 8009302:	e600      	b.n	8008f06 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 8009304:	464e      	mov	r6, r9
 8009306:	3301      	adds	r3, #1
 8009308:	77b3      	strb	r3, [r6, #30]
 800930a:	e62a      	b.n	8008f62 <CheckAttachedButtons+0x146>
					state = ON;
 800930c:	2102      	movs	r1, #2
 800930e:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 8009310:	4641      	mov	r1, r8
 8009312:	3301      	adds	r3, #1
 8009314:	3138      	adds	r1, #56	; 0x38
 8009316:	508b      	str	r3, [r1, r2]
 8009318:	4807      	ldr	r0, [pc, #28]	; (8009338 <CheckAttachedButtons+0x51c>)
 800931a:	e5f4      	b.n	8008f06 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800931c:	7947      	ldrb	r7, [r0, #5]
 800931e:	429f      	cmp	r7, r3
 8009320:	d800      	bhi.n	8009324 <CheckAttachedButtons+0x508>
 8009322:	e61e      	b.n	8008f62 <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 8009324:	2303      	movs	r3, #3
 8009326:	464e      	mov	r6, r9
 8009328:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800932a:	2300      	movs	r3, #0
 800932c:	4e03      	ldr	r6, [pc, #12]	; (800933c <CheckAttachedButtons+0x520>)
 800932e:	55ab      	strb	r3, [r5, r6]
 8009330:	e617      	b.n	8008f62 <CheckAttachedButtons+0x146>
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	0000fffe 	.word	0x0000fffe
 8009338:	20006db4 	.word	0x20006db4
 800933c:	200018b4 	.word	0x200018b4

08009340 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009340:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009342:	f006 f827 	bl	800f394 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8009346:	b2c4      	uxtb	r4, r0
 8009348:	0020      	movs	r0, r4
 800934a:	f7fe f92b 	bl	80075a4 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800934e:	0020      	movs	r0, r4
 8009350:	f7fe f954 	bl	80075fc <SwitchStreamDMAToMsg>
}
 8009354:	bd10      	pop	{r4, pc}
 8009356:	46c0      	nop			; (mov r8, r8)

08009358 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935a:	46ce      	mov	lr, r9
 800935c:	4647      	mov	r7, r8
 800935e:	b580      	push	{r7, lr}
 8009360:	b085      	sub	sp, #20
 8009362:	0015      	movs	r5, r2
 8009364:	466a      	mov	r2, sp
 8009366:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009368:	aa0c      	add	r2, sp, #48	; 0x30
 800936a:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 800936c:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800936e:	4293      	cmp	r3, r2
 8009370:	d06b      	beq.n	800944a <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009372:	2b00      	cmp	r3, #0
 8009374:	d051      	beq.n	800941a <SetupDMAStreams+0xc2>
 8009376:	2a00      	cmp	r2, #0
 8009378:	d04f      	beq.n	800941a <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 800937a:	2800      	cmp	r0, #0
 800937c:	d06a      	beq.n	8009454 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 800937e:	2801      	cmp	r0, #1
 8009380:	d052      	beq.n	8009428 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8009382:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8009384:	2802      	cmp	r0, #2
 8009386:	d149      	bne.n	800941c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009388:	0018      	movs	r0, r3
 800938a:	f004 f969 	bl	800d660 <GetUart>
 800938e:	ab0c      	add	r3, sp, #48	; 0x30
 8009390:	0004      	movs	r4, r0
 8009392:	7818      	ldrb	r0, [r3, #0]
 8009394:	f004 f964 	bl	800d660 <GetUart>
 8009398:	2201      	movs	r2, #1
 800939a:	0001      	movs	r1, r0
 800939c:	0020      	movs	r0, r4
 800939e:	f7fe f967 	bl	8007670 <StartDMAstream>
 80093a2:	2817      	cmp	r0, #23
 80093a4:	d04f      	beq.n	8009446 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80093a6:	21fa      	movs	r1, #250	; 0xfa
 80093a8:	0168      	lsls	r0, r5, #5
 80093aa:	1b40      	subs	r0, r0, r5
 80093ac:	0080      	lsls	r0, r0, #2
 80093ae:	1940      	adds	r0, r0, r5
 80093b0:	0089      	lsls	r1, r1, #2
 80093b2:	00c0      	lsls	r0, r0, #3
 80093b4:	f7f6 fecc 	bl	8000150 <__udivsi3>
 80093b8:	4b49      	ldr	r3, [pc, #292]	; (80094e0 <SetupDMAStreams+0x188>)
 80093ba:	4d4a      	ldr	r5, [pc, #296]	; (80094e4 <SetupDMAStreams+0x18c>)
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4698      	mov	r8, r3
 80093c0:	230f      	movs	r3, #15
 80093c2:	0001      	movs	r1, r0
 80093c4:	2200      	movs	r2, #0
 80093c6:	446b      	add	r3, sp
 80093c8:	0007      	movs	r7, r0
 80093ca:	0028      	movs	r0, r5
 80093cc:	f005 fe7e 	bl	800f0cc <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80093d0:	466b      	mov	r3, sp
 80093d2:	7bdb      	ldrb	r3, [r3, #15]
 80093d4:	4c44      	ldr	r4, [pc, #272]	; (80094e8 <SetupDMAStreams+0x190>)
 80093d6:	3b01      	subs	r3, #1
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80093dc:	ab0c      	add	r3, sp, #48	; 0x30
 80093de:	7818      	ldrb	r0, [r3, #0]
 80093e0:	f004 f93e 	bl	800d660 <GetUart>
 80093e4:	466b      	mov	r3, sp
 80093e6:	4681      	mov	r9, r0
 80093e8:	7bd8      	ldrb	r0, [r3, #15]
 80093ea:	f004 f939 	bl	800d660 <GetUart>
 80093ee:	2201      	movs	r2, #1
 80093f0:	0001      	movs	r1, r0
 80093f2:	4648      	mov	r0, r9
 80093f4:	f7fe f93c 	bl	8007670 <StartDMAstream>
 80093f8:	2817      	cmp	r0, #23
 80093fa:	d024      	beq.n	8009446 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80093fc:	4643      	mov	r3, r8
 80093fe:	0028      	movs	r0, r5
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	ab0c      	add	r3, sp, #48	; 0x30
 8009406:	0039      	movs	r1, r7
 8009408:	f005 fe60 	bl	800f0cc <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 800940c:	ab0c      	add	r3, sp, #48	; 0x30
 800940e:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009410:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8009412:	3b01      	subs	r3, #1
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	511e      	str	r6, [r3, r4]
 8009418:	e044      	b.n	80094a4 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 800941a:	2467      	movs	r4, #103	; 0x67
}
 800941c:	0020      	movs	r0, r4
 800941e:	b005      	add	sp, #20
 8009420:	bc0c      	pop	{r2, r3}
 8009422:	4690      	mov	r8, r2
 8009424:	4699      	mov	r9, r3
 8009426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009428:	0010      	movs	r0, r2
 800942a:	f004 f919 	bl	800d660 <GetUart>
 800942e:	466b      	mov	r3, sp
 8009430:	0004      	movs	r4, r0
 8009432:	7bd8      	ldrb	r0, [r3, #15]
 8009434:	f004 f914 	bl	800d660 <GetUart>
 8009438:	2201      	movs	r2, #1
 800943a:	0001      	movs	r1, r0
 800943c:	0020      	movs	r0, r4
 800943e:	f7fe f917 	bl	8007670 <StartDMAstream>
 8009442:	2817      	cmp	r0, #23
 8009444:	d13d      	bne.n	80094c2 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8009446:	2417      	movs	r4, #23
 8009448:	e7e8      	b.n	800941c <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 800944a:	2102      	movs	r1, #2
 800944c:	4a27      	ldr	r2, [pc, #156]	; (80094ec <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 800944e:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8009450:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8009452:	e7e3      	b.n	800941c <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009454:	0018      	movs	r0, r3
 8009456:	f004 f903 	bl	800d660 <GetUart>
 800945a:	ab0c      	add	r3, sp, #48	; 0x30
 800945c:	0004      	movs	r4, r0
 800945e:	7818      	ldrb	r0, [r3, #0]
 8009460:	f004 f8fe 	bl	800d660 <GetUart>
 8009464:	2201      	movs	r2, #1
 8009466:	0001      	movs	r1, r0
 8009468:	0020      	movs	r0, r4
 800946a:	f7fe f901 	bl	8007670 <StartDMAstream>
 800946e:	2817      	cmp	r0, #23
 8009470:	d0e9      	beq.n	8009446 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009472:	21fa      	movs	r1, #250	; 0xfa
 8009474:	0168      	lsls	r0, r5, #5
 8009476:	1b40      	subs	r0, r0, r5
 8009478:	0080      	lsls	r0, r0, #2
 800947a:	1940      	adds	r0, r0, r5
 800947c:	0089      	lsls	r1, r1, #2
 800947e:	00c0      	lsls	r0, r0, #3
 8009480:	f7f6 fe66 	bl	8000150 <__udivsi3>
 8009484:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <SetupDMAStreams+0x188>)
 8009486:	0001      	movs	r1, r0
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	230f      	movs	r3, #15
 800948c:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800948e:	2200      	movs	r2, #0
 8009490:	4814      	ldr	r0, [pc, #80]	; (80094e4 <SetupDMAStreams+0x18c>)
 8009492:	f005 fe1b 	bl	800f0cc <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009496:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009498:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 800949a:	7bdb      	ldrb	r3, [r3, #15]
 800949c:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <SetupDMAStreams+0x190>)
 800949e:	3b01      	subs	r3, #1
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 80094a4:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	d0b8      	beq.n	800941c <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80094aa:	f005 f949 	bl	800e740 <xTaskGetTickCount>
 80094ae:	2301      	movs	r3, #1
 80094b0:	425b      	negs	r3, r3
 80094b2:	0002      	movs	r2, r0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2101      	movs	r1, #1
 80094b8:	2300      	movs	r3, #0
 80094ba:	0028      	movs	r0, r5
 80094bc:	f005 fe26 	bl	800f10c <xTimerGenericCommand>
 80094c0:	e7ac      	b.n	800941c <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094c2:	21fa      	movs	r1, #250	; 0xfa
 80094c4:	0168      	lsls	r0, r5, #5
 80094c6:	1b40      	subs	r0, r0, r5
 80094c8:	0080      	lsls	r0, r0, #2
 80094ca:	1940      	adds	r0, r0, r5
 80094cc:	0089      	lsls	r1, r1, #2
 80094ce:	00c0      	lsls	r0, r0, #3
 80094d0:	f7f6 fe3e 	bl	8000150 <__udivsi3>
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <SetupDMAStreams+0x188>)
 80094d6:	0001      	movs	r1, r0
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	ab0c      	add	r3, sp, #48	; 0x30
 80094dc:	e7d7      	b.n	800948e <SetupDMAStreams+0x136>
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	08009341 	.word	0x08009341
 80094e4:	0801a498 	.word	0x0801a498
 80094e8:	200012e0 	.word	0x200012e0
 80094ec:	20000c3c 	.word	0x20000c3c

080094f0 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80094f0:	b510      	push	{r4, lr}
	switch(port){
 80094f2:	2805      	cmp	r0, #5
 80094f4:	d80a      	bhi.n	800950c <NotifyMessagingTask+0x1c>
 80094f6:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <NotifyMessagingTask+0x30>)
 80094f8:	0080      	lsls	r0, r0, #2
 80094fa:	581b      	ldr	r3, [r3, r0]
 80094fc:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 80094fe:	4b09      	ldr	r3, [pc, #36]	; (8009524 <NotifyMessagingTask+0x34>)
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	2202      	movs	r2, #2
 8009504:	2300      	movs	r3, #0
 8009506:	2100      	movs	r1, #0
 8009508:	f005 fd20 	bl	800ef4c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 800950c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <NotifyMessagingTask+0x38>)
 8009510:	e7f6      	b.n	8009500 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <NotifyMessagingTask+0x3c>)
 8009514:	e7f4      	b.n	8009500 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009516:	4b06      	ldr	r3, [pc, #24]	; (8009530 <NotifyMessagingTask+0x40>)
 8009518:	e7f2      	b.n	8009500 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <NotifyMessagingTask+0x44>)
 800951c:	e7f0      	b.n	8009500 <NotifyMessagingTask+0x10>
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	08017b0c 	.word	0x08017b0c
 8009524:	20001734 	.word	0x20001734
 8009528:	20001724 	.word	0x20001724
 800952c:	20001728 	.word	0x20001728
 8009530:	2000172c 	.word	0x2000172c
 8009534:	20001730 	.word	0x20001730

08009538 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	ac06      	add	r4, sp, #24
 800953e:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009540:	0004      	movs	r4, r0
 8009542:	4314      	orrs	r4, r2
 8009544:	d011      	beq.n	800956a <SendMessageFromPort+0x32>
 8009546:	2800      	cmp	r0, #0
 8009548:	d10b      	bne.n	8009562 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800954a:	1c96      	adds	r6, r2, #2
 800954c:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800954e:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009550:	2e01      	cmp	r6, #1
 8009552:	d803      	bhi.n	800955c <SendMessageFromPort+0x24>
 8009554:	9500      	str	r5, [sp, #0]
 8009556:	f000 f80b 	bl	8009570 <SendMessageFromPort.part.0>
 800955a:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 800955c:	0020      	movs	r0, r4
 800955e:	b002      	add	sp, #8
 8009560:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009562:	2900      	cmp	r1, #0
 8009564:	d0f6      	beq.n	8009554 <SendMessageFromPort+0x1c>
 8009566:	2a00      	cmp	r2, #0
 8009568:	d1f4      	bne.n	8009554 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 800956a:	2467      	movs	r4, #103	; 0x67
 800956c:	e7f6      	b.n	800955c <SendMessageFromPort+0x24>
 800956e:	46c0      	nop			; (mov r8, r8)

08009570 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	46de      	mov	lr, fp
 8009574:	464e      	mov	r6, r9
 8009576:	4645      	mov	r5, r8
 8009578:	4657      	mov	r7, sl
 800957a:	b5e0      	push	{r5, r6, r7, lr}
 800957c:	b087      	sub	sp, #28
 800957e:	0005      	movs	r5, r0
 8009580:	9004      	str	r0, [sp, #16]
 8009582:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8009584:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009586:	ab10      	add	r3, sp, #64	; 0x40
 8009588:	4689      	mov	r9, r1
 800958a:	4690      	mov	r8, r2
 800958c:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 800958e:	f005 f847 	bl	800e620 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009592:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8009594:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009596:	2000      	movs	r0, #0
 8009598:	f005 f852 	bl	800e640 <vTaskPrioritySet>
	message[0] ='H';
 800959c:	2348      	movs	r3, #72	; 0x48
 800959e:	4cd2      	ldr	r4, [pc, #840]	; (80098e8 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a0:	464a      	mov	r2, r9
	message[0] ='H';
 80095a2:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 80095a4:	3312      	adds	r3, #18
 80095a6:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a8:	002b      	movs	r3, r5
 80095aa:	4313      	orrs	r3, r2
 80095ac:	d000      	beq.n	80095b0 <SendMessageFromPort.part.0+0x40>
 80095ae:	e094      	b.n	80096da <SendMessageFromPort.part.0+0x16a>
 80095b0:	4643      	mov	r3, r8
 80095b2:	1c9f      	adds	r7, r3, #2
 80095b4:	b2ff      	uxtb	r7, r7
 80095b6:	2f01      	cmp	r7, #1
 80095b8:	d800      	bhi.n	80095bc <SendMessageFromPort.part.0+0x4c>
 80095ba:	e095      	b.n	80096e8 <SendMessageFromPort.part.0+0x178>
 80095bc:	465b      	mov	r3, fp
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d100      	bne.n	80095c4 <SendMessageFromPort.part.0+0x54>
 80095c2:	e091      	b.n	80096e8 <SendMessageFromPort.part.0+0x178>
			src =myID;
 80095c4:	4bc9      	ldr	r3, [pc, #804]	; (80098ec <SendMessageFromPort.part.0+0x37c>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	4699      	mov	r9, r3
		message[2] =length;
 80095ca:	2300      	movs	r3, #0
 80095cc:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 80095ce:	4643      	mov	r3, r8
 80095d0:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 80095d2:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095d4:	4ac6      	ldr	r2, [pc, #792]	; (80098f0 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 80095d6:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095d8:	7913      	ldrb	r3, [r2, #4]
 80095da:	7851      	ldrb	r1, [r2, #1]
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	7812      	ldrb	r2, [r2, #0]
 80095e0:	0089      	lsls	r1, r1, #2
 80095e2:	430b      	orrs	r3, r1
 80095e4:	4313      	orrs	r3, r2
		if(code > 0xFF)
 80095e6:	22ff      	movs	r2, #255	; 0xff
 80095e8:	455a      	cmp	r2, fp
 80095ea:	4192      	sbcs	r2, r2
 80095ec:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095ee:	0052      	lsls	r2, r2, #1
 80095f0:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 80095f2:	465a      	mov	r2, fp
 80095f4:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 80095f6:	2200      	movs	r2, #0
 80095f8:	4692      	mov	sl, r2
 80095fa:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8009600:	2aff      	cmp	r2, #255	; 0xff
 8009602:	d903      	bls.n	800960c <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009604:	0a12      	lsrs	r2, r2, #8
 8009606:	71e2      	strb	r2, [r4, #7]
			++shift;
 8009608:	2201      	movs	r2, #1
 800960a:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800960c:	2e2e      	cmp	r6, #46	; 0x2e
 800960e:	d800      	bhi.n	8009612 <SendMessageFromPort.part.0+0xa2>
 8009610:	e157      	b.n	80098c2 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8009612:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009614:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8009616:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8009618:	4db6      	ldr	r5, [pc, #728]	; (80098f4 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 800961a:	4313      	orrs	r3, r2
 800961c:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 800961e:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009620:	2e2d      	cmp	r6, #45	; 0x2d
 8009622:	d900      	bls.n	8009626 <SendMessageFromPort.part.0+0xb6>
 8009624:	e136      	b.n	8009894 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009626:	237f      	movs	r3, #127	; 0x7f
 8009628:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800962a:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800962c:	4013      	ands	r3, r2
 800962e:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009630:	4653      	mov	r3, sl
 8009632:	1dd8      	adds	r0, r3, #7
 8009634:	4bb0      	ldr	r3, [pc, #704]	; (80098f8 <SendMessageFromPort.part.0+0x388>)
 8009636:	1820      	adds	r0, r4, r0
 8009638:	18c9      	adds	r1, r1, r3
 800963a:	0032      	movs	r2, r6
 800963c:	f009 fc83 	bl	8012f46 <memcpy>
					ptrShift =0;
 8009640:	2300      	movs	r3, #0
 8009642:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8009644:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8009646:	4653      	mov	r3, sl
 8009648:	1d1d      	adds	r5, r3, #4
 800964a:	19ad      	adds	r5, r5, r6
 800964c:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 800964e:	4bab      	ldr	r3, [pc, #684]	; (80098fc <SendMessageFromPort.part.0+0x38c>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d03d      	beq.n	80096d2 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8009656:	4baa      	ldr	r3, [pc, #680]	; (8009900 <SendMessageFromPort.part.0+0x390>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2bff      	cmp	r3, #255	; 0xff
 800965c:	d100      	bne.n	8009660 <SendMessageFromPort.part.0+0xf0>
 800965e:	e106      	b.n	800986e <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009660:	4aa8      	ldr	r2, [pc, #672]	; (8009904 <SendMessageFromPort.part.0+0x394>)
 8009662:	7817      	ldrb	r7, [r2, #0]
 8009664:	2f00      	cmp	r7, #0
 8009666:	d100      	bne.n	800966a <SendMessageFromPort.part.0+0xfa>
 8009668:	e139      	b.n	80098de <SendMessageFromPort.part.0+0x36e>
 800966a:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800966c:	0021      	movs	r1, r4
 800966e:	409a      	lsls	r2, r3
 8009670:	4451      	add	r1, sl
 8009672:	4694      	mov	ip, r2
 8009674:	9105      	str	r1, [sp, #20]
 8009676:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8009678:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800967a:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 800967c:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800967e:	46ac      	mov	ip, r5
 8009680:	000d      	movs	r5, r1
 8009682:	48a1      	ldr	r0, [pc, #644]	; (8009908 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8009684:	8801      	ldrh	r1, [r0, #0]
 8009686:	420f      	tst	r7, r1
 8009688:	d009      	beq.n	800969e <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 800968a:	3201      	adds	r2, #1
 800968c:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800968e:	1991      	adds	r1, r2, r6
 8009690:	292c      	cmp	r1, #44	; 0x2c
 8009692:	dd00      	ble.n	8009696 <SendMessageFromPort.part.0+0x126>
 8009694:	e0fc      	b.n	8009890 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009696:	9905      	ldr	r1, [sp, #20]
 8009698:	1889      	adds	r1, r1, r2
 800969a:	1989      	adds	r1, r1, r6
 800969c:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 800969e:	3301      	adds	r3, #1
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3002      	adds	r0, #2
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	d9ed      	bls.n	8009684 <SendMessageFromPort.part.0+0x114>
 80096a8:	4665      	mov	r5, ip
 80096aa:	0010      	movs	r0, r2
 80096ac:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80096ae:	4653      	mov	r3, sl
 80096b0:	3307      	adds	r3, #7
 80096b2:	199e      	adds	r6, r3, r6
 80096b4:	1836      	adds	r6, r6, r0
 80096b6:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80096b8:	292b      	cmp	r1, #43	; 0x2b
 80096ba:	dd00      	ble.n	80096be <SendMessageFromPort.part.0+0x14e>
 80096bc:	e0e8      	b.n	8009890 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80096be:	4993      	ldr	r1, [pc, #588]	; (800990c <SendMessageFromPort.part.0+0x39c>)
 80096c0:	3502      	adds	r5, #2
 80096c2:	780b      	ldrb	r3, [r1, #0]
 80096c4:	19a6      	adds	r6, r4, r6
 80096c6:	3301      	adds	r3, #1
 80096c8:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80096ca:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80096cc:	700b      	strb	r3, [r1, #0]
 80096ce:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80096d0:	b2ed      	uxtb	r5, r5
 80096d2:	4647      	mov	r7, r8
 80096d4:	3702      	adds	r7, #2
 80096d6:	b2ff      	uxtb	r7, r7
 80096d8:	e012      	b.n	8009700 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80096da:	465b      	mov	r3, fp
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d000      	beq.n	80096e2 <SendMessageFromPort.part.0+0x172>
 80096e0:	e0af      	b.n	8009842 <SendMessageFromPort.part.0+0x2d2>
 80096e2:	4647      	mov	r7, r8
 80096e4:	3702      	adds	r7, #2
 80096e6:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 80096e8:	3e01      	subs	r6, #1
 80096ea:	4b89      	ldr	r3, [pc, #548]	; (8009910 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80096ec:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 80096ee:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80096f0:	1b89      	subs	r1, r1, r6
 80096f2:	4e88      	ldr	r6, [pc, #544]	; (8009914 <SendMessageFromPort.part.0+0x3a4>)
 80096f4:	00c9      	lsls	r1, r1, #3
 80096f6:	1989      	adds	r1, r1, r6
 80096f8:	002a      	movs	r2, r5
 80096fa:	4887      	ldr	r0, [pc, #540]	; (8009918 <SendMessageFromPort.part.0+0x3a8>)
 80096fc:	f009 fc23 	bl	8012f46 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8009700:	1ceb      	adds	r3, r5, #3
 8009702:	469a      	mov	sl, r3
 8009704:	4e85      	ldr	r6, [pc, #532]	; (800991c <SendMessageFromPort.part.0+0x3ac>)
 8009706:	001a      	movs	r2, r3
 8009708:	0021      	movs	r1, r4
 800970a:	0030      	movs	r0, r6
	message[2] =length;
 800970c:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 800970e:	f009 fc1a 	bl	8012f46 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8009712:	b2ab      	uxth	r3, r5
 8009714:	4651      	mov	r1, sl
 8009716:	0030      	movs	r0, r6
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	f003 f99b 	bl	800ca54 <CalculateCRC8>
 800971e:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009720:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8009722:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009724:	2100      	movs	r1, #0
 8009726:	0030      	movs	r0, r6
 8009728:	f009 fc16 	bl	8012f58 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800972c:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 800972e:	2f01      	cmp	r7, #1
 8009730:	d94a      	bls.n	80097c8 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009732:	3b2c      	subs	r3, #44	; 0x2c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d800      	bhi.n	800973a <SendMessageFromPort.part.0+0x1ca>
 8009738:	e08d      	b.n	8009856 <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800973a:	4b6d      	ldr	r3, [pc, #436]	; (80098f0 <SendMessageFromPort.part.0+0x380>)
 800973c:	4698      	mov	r8, r3
 800973e:	88db      	ldrh	r3, [r3, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d100      	bne.n	8009746 <SendMessageFromPort.part.0+0x1d6>
 8009744:	e08f      	b.n	8009866 <SendMessageFromPort.part.0+0x2f6>
 8009746:	9e05      	ldr	r6, [sp, #20]
 8009748:	4f75      	ldr	r7, [pc, #468]	; (8009920 <SendMessageFromPort.part.0+0x3b0>)
 800974a:	4b76      	ldr	r3, [pc, #472]	; (8009924 <SendMessageFromPort.part.0+0x3b4>)
 800974c:	3604      	adds	r6, #4
 800974e:	46ba      	mov	sl, r7
 8009750:	b2b6      	uxth	r6, r6
 8009752:	2500      	movs	r5, #0
 8009754:	4699      	mov	r9, r3
 8009756:	9f04      	ldr	r7, [sp, #16]
 8009758:	e005      	b.n	8009766 <SendMessageFromPort.part.0+0x1f6>
 800975a:	4643      	mov	r3, r8
 800975c:	3501      	adds	r5, #1
 800975e:	88db      	ldrh	r3, [r3, #6]
 8009760:	b2ed      	uxtb	r5, r5
 8009762:	42ab      	cmp	r3, r5
 8009764:	d91c      	bls.n	80097a0 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009766:	2332      	movs	r3, #50	; 0x32
 8009768:	0032      	movs	r2, r6
 800976a:	0021      	movs	r1, r4
 800976c:	0038      	movs	r0, r7
 800976e:	f003 ff41 	bl	800d5f4 <writePxDMAMutex>
				osDelay(200);
 8009772:	20c8      	movs	r0, #200	; 0xc8
 8009774:	f004 f838 	bl	800d7e8 <osDelay>
				if(ACK_FLAG == true)
 8009778:	464b      	mov	r3, r9
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10f      	bne.n	80097a0 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8009780:	4653      	mov	r3, sl
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0e8      	beq.n	800975a <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009788:	2332      	movs	r3, #50	; 0x32
 800978a:	0032      	movs	r2, r6
 800978c:	0021      	movs	r1, r4
 800978e:	0038      	movs	r0, r7
 8009790:	f003 ff30 	bl	800d5f4 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8009794:	4643      	mov	r3, r8
 8009796:	3501      	adds	r5, #1
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	b2ed      	uxtb	r5, r5
 800979c:	42ab      	cmp	r3, r5
 800979e:	d8e2      	bhi.n	8009766 <SendMessageFromPort.part.0+0x1f6>
 80097a0:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 80097a2:	2300      	movs	r3, #0
 80097a4:	464a      	mov	r2, r9
 80097a6:	703b      	strb	r3, [r7, #0]
 80097a8:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 80097aa:	2000      	movs	r0, #0
 80097ac:	9903      	ldr	r1, [sp, #12]
 80097ae:	f004 ff47 	bl	800e640 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 80097b2:	2202      	movs	r2, #2
	return result;
 80097b4:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 80097b6:	4b5c      	ldr	r3, [pc, #368]	; (8009928 <SendMessageFromPort.part.0+0x3b8>)
 80097b8:	701a      	strb	r2, [r3, #0]
}
 80097ba:	b007      	add	sp, #28
 80097bc:	bc3c      	pop	{r2, r3, r4, r5}
 80097be:	4690      	mov	r8, r2
 80097c0:	4699      	mov	r9, r3
 80097c2:	46a2      	mov	sl, r4
 80097c4:	46ab      	mov	fp, r5
 80097c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d03e      	beq.n	800984a <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 80097cc:	4648      	mov	r0, r9
 80097ce:	f7fa f82f 	bl	8003830 <FindBroadcastRoutes>
 80097d2:	2300      	movs	r3, #0
 80097d4:	4698      	mov	r8, r3
 80097d6:	4b45      	ldr	r3, [pc, #276]	; (80098ec <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097d8:	9e05      	ldr	r6, [sp, #20]
 80097da:	4699      	mov	r9, r3
 80097dc:	4b53      	ldr	r3, [pc, #332]	; (800992c <SendMessageFromPort.part.0+0x3bc>)
 80097de:	3604      	adds	r6, #4
 80097e0:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80097e2:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097e4:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80097e6:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097e8:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80097ea:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80097ec:	4646      	mov	r6, r8
 80097ee:	4698      	mov	r8, r3
 80097f0:	4f4b      	ldr	r7, [pc, #300]	; (8009920 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80097f2:	464b      	mov	r3, r9
 80097f4:	465a      	mov	r2, fp
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	5ad3      	ldrh	r3, [r2, r3]
 80097fe:	4652      	mov	r2, sl
 8009800:	4133      	asrs	r3, r6
 8009802:	421a      	tst	r2, r3
 8009804:	d10a      	bne.n	800981c <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 8009806:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009808:	3501      	adds	r5, #1
			Delay_us(10);
 800980a:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800980c:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 800980e:	703b      	strb	r3, [r7, #0]
 8009810:	3601      	adds	r6, #1
			Delay_us(10);
 8009812:	f003 fd0f 	bl	800d234 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009816:	2d06      	cmp	r5, #6
 8009818:	d1eb      	bne.n	80097f2 <SendMessageFromPort.part.0+0x282>
 800981a:	e7c6      	b.n	80097aa <SendMessageFromPort.part.0+0x23a>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800981c:	2332      	movs	r3, #50	; 0x32
 800981e:	4642      	mov	r2, r8
 8009820:	0021      	movs	r1, r4
 8009822:	0028      	movs	r0, r5
 8009824:	f003 fee6 	bl	800d5f4 <writePxDMAMutex>
				osDelay(200);
 8009828:	20c8      	movs	r0, #200	; 0xc8
 800982a:	f003 ffdd 	bl	800d7e8 <osDelay>
				if(rejected_FLAG == true)
 800982e:	783b      	ldrb	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0e8      	beq.n	8009806 <SendMessageFromPort.part.0+0x296>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009834:	2332      	movs	r3, #50	; 0x32
 8009836:	4642      	mov	r2, r8
 8009838:	0021      	movs	r1, r4
 800983a:	9804      	ldr	r0, [sp, #16]
 800983c:	f003 feda 	bl	800d5f4 <writePxDMAMutex>
 8009840:	e7e1      	b.n	8009806 <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8009842:	2a00      	cmp	r2, #0
 8009844:	d000      	beq.n	8009848 <SendMessageFromPort.part.0+0x2d8>
 8009846:	e6c0      	b.n	80095ca <SendMessageFromPort.part.0+0x5a>
 8009848:	e6bc      	b.n	80095c4 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800984a:	464b      	mov	r3, r9
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1bd      	bne.n	80097cc <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8009850:	7923      	ldrb	r3, [r4, #4]
 8009852:	4699      	mov	r9, r3
 8009854:	e7ba      	b.n	80097cc <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009856:	9a05      	ldr	r2, [sp, #20]
 8009858:	2332      	movs	r3, #50	; 0x32
 800985a:	3204      	adds	r2, #4
 800985c:	b292      	uxth	r2, r2
 800985e:	0021      	movs	r1, r4
 8009860:	9804      	ldr	r0, [sp, #16]
 8009862:	f003 fec7 	bl	800d5f4 <writePxDMAMutex>
 8009866:	4b2f      	ldr	r3, [pc, #188]	; (8009924 <SendMessageFromPort.part.0+0x3b4>)
 8009868:	4f2d      	ldr	r7, [pc, #180]	; (8009920 <SendMessageFromPort.part.0+0x3b0>)
 800986a:	4699      	mov	r9, r3
 800986c:	e799      	b.n	80097a2 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800986e:	2e2c      	cmp	r6, #44	; 0x2c
 8009870:	d80e      	bhi.n	8009890 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8009872:	4a26      	ldr	r2, [pc, #152]	; (800990c <SendMessageFromPort.part.0+0x39c>)
 8009874:	4647      	mov	r7, r8
 8009876:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8009878:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 800987a:	3301      	adds	r3, #1
 800987c:	b2db      	uxtb	r3, r3
 800987e:	7013      	strb	r3, [r2, #0]
 8009880:	4652      	mov	r2, sl
 8009882:	18a2      	adds	r2, r4, r2
 8009884:	1996      	adds	r6, r2, r6
 8009886:	3702      	adds	r7, #2
 8009888:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 800988a:	b2ed      	uxtb	r5, r5
 800988c:	b2ff      	uxtb	r7, r7
 800988e:	e737      	b.n	8009700 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009890:	2069      	movs	r0, #105	; 0x69
 8009892:	e792      	b.n	80097ba <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009894:	465b      	mov	r3, fp
 8009896:	4642      	mov	r2, r8
 8009898:	4649      	mov	r1, r9
 800989a:	9700      	str	r7, [sp, #0]
 800989c:	9804      	ldr	r0, [sp, #16]
 800989e:	f7ff fe4b 	bl	8009538 <SendMessageFromPort>
					osDelay(10);
 80098a2:	200a      	movs	r0, #10
 80098a4:	f003 ffa0 	bl	800d7e8 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80098a8:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80098aa:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 80098ac:	3e2e      	subs	r6, #46	; 0x2e
 80098ae:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 80098b0:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 80098b2:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 80098b4:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	d000      	beq.n	80098bc <SendMessageFromPort.part.0+0x34c>
 80098ba:	e6b1      	b.n	8009620 <SendMessageFromPort.part.0+0xb0>
 80098bc:	2500      	movs	r5, #0
 80098be:	362e      	adds	r6, #46	; 0x2e
 80098c0:	e6c5      	b.n	800964e <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80098c2:	4653      	mov	r3, sl
 80098c4:	1dd8      	adds	r0, r3, #7
 80098c6:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 80098c8:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80098ca:	8819      	ldrh	r1, [r3, #0]
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <SendMessageFromPort.part.0+0x388>)
 80098ce:	1820      	adds	r0, r4, r0
 80098d0:	18c9      	adds	r1, r1, r3
 80098d2:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 80098d4:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80098d6:	f009 fb36 	bl	8012f46 <memcpy>
			length =numberOfParams + shift + 4;
 80098da:	b2ed      	uxtb	r5, r5
 80098dc:	e6b7      	b.n	800964e <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098de:	0031      	movs	r1, r6
 80098e0:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 80098e2:	2200      	movs	r2, #0
 80098e4:	e6e3      	b.n	80096ae <SendMessageFromPort.part.0+0x13e>
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	20000c68 	.word	0x20000c68
 80098ec:	20000aa8 	.word	0x20000aa8
 80098f0:	20006d34 	.word	0x20006d34
 80098f4:	200018bc 	.word	0x200018bc
 80098f8:	20000b4c 	.word	0x20000b4c
 80098fc:	20001120 	.word	0x20001120
 8009900:	20000058 	.word	0x20000058
 8009904:	20000010 	.word	0x20000010
 8009908:	20000aac 	.word	0x20000aac
 800990c:	20000c58 	.word	0x20000c58
 8009910:	20000c60 	.word	0x20000c60
 8009914:	20000ca0 	.word	0x20000ca0
 8009918:	20000c6b 	.word	0x20000c6b
 800991c:	20001318 	.word	0x20001318
 8009920:	2000114c 	.word	0x2000114c
 8009924:	2000114d 	.word	0x2000114d
 8009928:	20000c4c 	.word	0x20000c4c
 800992c:	20000b7c 	.word	0x20000b7c

08009930 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8009930:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009932:	b500      	push	{lr}
	AddBcastPayload = false;
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009936:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009938:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <BroadcastReceivedMessage+0x38>)
 800993c:	b289      	uxth	r1, r1
 800993e:	7018      	strb	r0, [r3, #0]
 8009940:	9100      	str	r1, [sp, #0]
 8009942:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8009944:	28ff      	cmp	r0, #255	; 0xff
 8009946:	d007      	beq.n	8009958 <BroadcastReceivedMessage+0x28>
 8009948:	22fe      	movs	r2, #254	; 0xfe
 800994a:	2100      	movs	r1, #0
 800994c:	2000      	movs	r0, #0
 800994e:	f7ff fe0f 	bl	8009570 <SendMessageFromPort.part.0>
}
 8009952:	2000      	movs	r0, #0
 8009954:	b003      	add	sp, #12
 8009956:	bd00      	pop	{pc}
 8009958:	32ff      	adds	r2, #255	; 0xff
 800995a:	2100      	movs	r1, #0
 800995c:	2000      	movs	r0, #0
 800995e:	f7ff fe07 	bl	8009570 <SendMessageFromPort.part.0>
 8009962:	e7f6      	b.n	8009952 <BroadcastReceivedMessage+0x22>
 8009964:	20001120 	.word	0x20001120
 8009968:	20000058 	.word	0x20000058

0800996c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 800996c:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 800996e:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009970:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009972:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009974:	b083      	sub	sp, #12
	AddBcastPayload = true;
 8009976:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009978:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <BroadcastMessage+0x44>)
 800997a:	7019      	strb	r1, [r3, #0]
 800997c:	9400      	str	r4, [sp, #0]
 800997e:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 8009980:	29ff      	cmp	r1, #255	; 0xff
 8009982:	d00c      	beq.n	800999e <BroadcastMessage+0x32>
 8009984:	0001      	movs	r1, r0
 8009986:	22fe      	movs	r2, #254	; 0xfe
 8009988:	2000      	movs	r0, #0
 800998a:	f7ff fdf1 	bl	8009570 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 800998e:	0022      	movs	r2, r4
 8009990:	2100      	movs	r1, #0
 8009992:	4808      	ldr	r0, [pc, #32]	; (80099b4 <BroadcastMessage+0x48>)
 8009994:	f009 fae0 	bl	8012f58 <memset>
}
 8009998:	2000      	movs	r0, #0
 800999a:	b003      	add	sp, #12
 800999c:	bd30      	pop	{r4, r5, pc}
 800999e:	0001      	movs	r1, r0
 80099a0:	22ff      	movs	r2, #255	; 0xff
 80099a2:	2000      	movs	r0, #0
 80099a4:	f7ff fde4 	bl	8009570 <SendMessageFromPort.part.0>
 80099a8:	e7f1      	b.n	800998e <BroadcastMessage+0x22>
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	20001120 	.word	0x20001120
 80099b0:	20000058 	.word	0x20000058
 80099b4:	20000b4c 	.word	0x20000b4c

080099b8 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80099b8:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80099ba:	b530      	push	{r4, r5, lr}
 80099bc:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80099c0:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80099c2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80099c4:	1e42      	subs	r2, r0, #1
 80099c6:	00d3      	lsls	r3, r2, #3
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <ForwardReceivedMessage+0x38>)
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 80099d0:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <ForwardReceivedMessage+0x3c>)
 80099d2:	0021      	movs	r1, r4
 80099d4:	7818      	ldrb	r0, [r3, #0]
 80099d6:	f7f9 ffd3 	bl	8003980 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80099da:	9500      	str	r5, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	0022      	movs	r2, r4
 80099e0:	2100      	movs	r1, #0
 80099e2:	f7ff fda9 	bl	8009538 <SendMessageFromPort>
}
 80099e6:	2000      	movs	r0, #0
 80099e8:	b003      	add	sp, #12
 80099ea:	bd30      	pop	{r4, r5, pc}
 80099ec:	20001120 	.word	0x20001120
 80099f0:	20000ca0 	.word	0x20000ca0
 80099f4:	20000aa8 	.word	0x20000aa8

080099f8 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fa:	4d0f      	ldr	r5, [pc, #60]	; (8009a38 <SendMessageToModule+0x40>)
 80099fc:	0004      	movs	r4, r0
 80099fe:	b083      	sub	sp, #12
 8009a00:	000f      	movs	r7, r1
 8009a02:	0016      	movs	r6, r2
 8009a04:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8009a06:	2cff      	cmp	r4, #255	; 0xff
 8009a08:	d010      	beq.n	8009a2c <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	f7f9 ffb8 	bl	8003980 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009a10:	7829      	ldrb	r1, [r5, #0]
 8009a12:	0022      	movs	r2, r4
 8009a14:	9600      	str	r6, [sp, #0]
 8009a16:	003b      	movs	r3, r7
 8009a18:	f7ff fd8e 	bl	8009538 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009a1c:	0032      	movs	r2, r6
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4806      	ldr	r0, [pc, #24]	; (8009a3c <SendMessageToModule+0x44>)
 8009a22:	f009 fa99 	bl	8012f58 <memset>
}
 8009a26:	2000      	movs	r0, #0
 8009a28:	b003      	add	sp, #12
 8009a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009a2c:	0013      	movs	r3, r2
 8009a2e:	000a      	movs	r2, r1
 8009a30:	21ff      	movs	r1, #255	; 0xff
 8009a32:	f7ff ff9b 	bl	800996c <BroadcastMessage>
 8009a36:	e7f6      	b.n	8009a26 <SendMessageToModule+0x2e>
 8009a38:	20000aa8 	.word	0x20000aa8
 8009a3c:	20000b4c 	.word	0x20000b4c

08009a40 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a42:	4657      	mov	r7, sl
 8009a44:	46de      	mov	lr, fp
 8009a46:	464e      	mov	r6, r9
 8009a48:	4645      	mov	r5, r8
 8009a4a:	b5e0      	push	{r5, r6, r7, lr}
 8009a4c:	b08f      	sub	sp, #60	; 0x3c
 8009a4e:	001e      	movs	r6, r3
 8009a50:	ab18      	add	r3, sp, #96	; 0x60
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	4693      	mov	fp, r2
 8009a56:	469a      	mov	sl, r3
 8009a58:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a5e:	000f      	movs	r7, r1
 8009a60:	0e19      	lsrs	r1, r3, #24
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	b2dc      	uxtb	r4, r3
 8009a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a68:	4684      	mov	ip, r0
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	b2dd      	uxtb	r5, r3
 8009a6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a70:	900d      	str	r0, [sp, #52]	; 0x34
 8009a72:	0e1b      	lsrs	r3, r3, #24
 8009a74:	0018      	movs	r0, r3
 8009a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a7a:	9206      	str	r2, [sp, #24]
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a84:	9109      	str	r1, [sp, #36]	; 0x24
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009a8c:	4b47      	ldr	r3, [pc, #284]	; (8009bac <StartScastDMAStream+0x16c>)
 8009a8e:	940a      	str	r4, [sp, #40]	; 0x28
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	950c      	str	r5, [sp, #48]	; 0x30
 8009a94:	42bb      	cmp	r3, r7
 8009a96:	d16d      	bne.n	8009b74 <StartScastDMAStream+0x134>
 8009a98:	231a      	movs	r3, #26
 8009a9a:	4698      	mov	r8, r3
 8009a9c:	4d44      	ldr	r5, [pc, #272]	; (8009bb0 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009a9e:	4c45      	ldr	r4, [pc, #276]	; (8009bb4 <StartScastDMAStream+0x174>)
 8009aa0:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 8009aa2:	0031      	movs	r1, r6
 8009aa4:	0038      	movs	r0, r7
 8009aa6:	f7f9 ff6b 	bl	8003980 <FindRoute>
		if(route[i]){
 8009aaa:	7868      	ldrb	r0, [r5, #1]
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d035      	beq.n	8009b1c <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8009ab0:	78a9      	ldrb	r1, [r5, #2]
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d100      	bne.n	8009ab8 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8009ab6:	0039      	movs	r1, r7
 8009ab8:	f7f9 ff62 	bl	8003980 <FindRoute>
			FindRoute(srcM,dstM);
 8009abc:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009abe:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009ac0:	0038      	movs	r0, r7
 8009ac2:	f7f9 ff5d 	bl	8003980 <FindRoute>
			if(route[i] == dstM){
 8009ac6:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8009ac8:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8009aca:	42b0      	cmp	r0, r6
 8009acc:	d003      	beq.n	8009ad6 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009ace:	7829      	ldrb	r1, [r5, #0]
 8009ad0:	f7f9 ff56 	bl	8003980 <FindRoute>
 8009ad4:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8009ad8:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009ada:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009ade:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009ae0:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8009ae4:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8009ae6:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009ae8:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8009aea:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009aec:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8009af0:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009af2:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009af4:	9a07      	ldr	r2, [sp, #28]
 8009af6:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009af8:	9a08      	ldr	r2, [sp, #32]
 8009afa:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009afe:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009b00:	4652      	mov	r2, sl
 8009b02:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009b04:	464a      	mov	r2, r9
 8009b06:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8009b08:	f7f9 ff3a 	bl	8003980 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009b0c:	7868      	ldrb	r0, [r5, #1]
 8009b0e:	220c      	movs	r2, #12
 8009b10:	211b      	movs	r1, #27
 8009b12:	f7ff ff71 	bl	80099f8 <SendMessageToModule>
			osDelay(10);
 8009b16:	200a      	movs	r0, #10
 8009b18:	f003 fe66 	bl	800d7e8 <osDelay>
 8009b1c:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b1e:	4545      	cmp	r5, r8
 8009b20:	d1bf      	bne.n	8009aa2 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009b22:	42b7      	cmp	r7, r6
 8009b24:	d112      	bne.n	8009b4c <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009b26:	465b      	mov	r3, fp
 8009b28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b30:	4650      	mov	r0, sl
 8009b32:	f7ff fc11 	bl	8009358 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009b36:	9b06      	ldr	r3, [sp, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10d      	bne.n	8009b58 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	b00f      	add	sp, #60	; 0x3c
 8009b40:	bc3c      	pop	{r2, r3, r4, r5}
 8009b42:	4690      	mov	r8, r2
 8009b44:	4699      	mov	r9, r3
 8009b46:	46a2      	mov	sl, r4
 8009b48:	46ab      	mov	fp, r5
 8009b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009b4c:	0031      	movs	r1, r6
 8009b4e:	0038      	movs	r0, r7
 8009b50:	f7f9 ff16 	bl	8003980 <FindRoute>
 8009b54:	4683      	mov	fp, r0
 8009b56:	e7e6      	b.n	8009b26 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9304      	str	r3, [sp, #16]
 8009b5c:	9303      	str	r3, [sp, #12]
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	465b      	mov	r3, fp
 8009b64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	f7f9 fcb7 	bl	80034e0 <SaveEEstreams>
 8009b72:	e7e3      	b.n	8009b3c <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b74:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <StartScastDMAStream+0x174>)
 8009b76:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009b78:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 8009b7a:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009b7c:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009b7e:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 8009b80:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009b82:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009b84:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b86:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 8009b88:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009b8a:	4651      	mov	r1, sl
 8009b8c:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009b8e:	4661      	mov	r1, ip
 8009b90:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 8009b92:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8009b94:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 8009b96:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009b98:	220d      	movs	r2, #13
 8009b9a:	211c      	movs	r1, #28
 8009b9c:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 8009b9e:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009ba0:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 8009ba2:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009ba4:	f7ff ff28 	bl	80099f8 <SendMessageToModule>
		return result;
 8009ba8:	e7c8      	b.n	8009b3c <StartScastDMAStream+0xfc>
 8009baa:	46c0      	nop			; (mov r8, r8)
 8009bac:	20000aa8 	.word	0x20000aa8
 8009bb0:	20006ec7 	.word	0x20006ec7
 8009bb4:	20000b4c 	.word	0x20000b4c

08009bb8 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	4657      	mov	r7, sl
 8009bbc:	4645      	mov	r5, r8
 8009bbe:	46de      	mov	lr, fp
 8009bc0:	464e      	mov	r6, r9
 8009bc2:	4bd6      	ldr	r3, [pc, #856]	; (8009f1c <BackEndTask+0x364>)
 8009bc4:	b5e0      	push	{r5, r6, r7, lr}
 8009bc6:	4698      	mov	r8, r3
 8009bc8:	4bd5      	ldr	r3, [pc, #852]	; (8009f20 <BackEndTask+0x368>)
 8009bca:	4fd6      	ldr	r7, [pc, #856]	; (8009f24 <BackEndTask+0x36c>)
 8009bcc:	469a      	mov	sl, r3
 8009bce:	2301      	movs	r3, #1
 8009bd0:	b089      	sub	sp, #36	; 0x24
 8009bd2:	1bdb      	subs	r3, r3, r7
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2601      	movs	r6, #1
 8009bda:	001c      	movs	r4, r3
 8009bdc:	b2f3      	uxtb	r3, r6
 8009bde:	469b      	mov	fp, r3
	/* Infinite loop */
	for(;;){
		/* Search the circular receive buffers for any complete packets */
		for(port =1; port <= NumOfPorts; port++){
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009be0:	4643      	mov	r3, r8
 8009be2:	5d9b      	ldrb	r3, [r3, r6]
 8009be4:	1e75      	subs	r5, r6, #1
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d91d      	bls.n	8009c26 <BackEndTask+0x6e>
 8009bea:	4bcf      	ldr	r3, [pc, #828]	; (8009f28 <BackEndTask+0x370>)
 8009bec:	469c      	mov	ip, r3
 8009bee:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009bf0:	782b      	ldrb	r3, [r5, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00e      	beq.n	8009c14 <BackEndTask+0x5c>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 8009bf6:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 8009bf8:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 8009bfa:	199b      	adds	r3, r3, r6
 8009bfc:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8009bfe:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8009c00:	2905      	cmp	r1, #5
 8009c02:	d100      	bne.n	8009c06 <BackEndTask+0x4e>
					portStatus[port] =FREE;
 8009c04:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009c06:	4658      	mov	r0, fp
 8009c08:	f003 fd2a 	bl	800d660 <GetUart>
 8009c0c:	1939      	adds	r1, r7, r4
 8009c0e:	22c0      	movs	r2, #192	; 0xc0
 8009c10:	f008 faa4 	bl	801215c <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009c14:	23f0      	movs	r3, #240	; 0xf0
 8009c16:	34c0      	adds	r4, #192	; 0xc0
 8009c18:	3601      	adds	r6, #1
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d1dd      	bne.n	8009bdc <BackEndTask+0x24>
			}
		}

		taskYIELD();
 8009c20:	f005 fc1a 	bl	800f458 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009c24:	e7d7      	b.n	8009bd6 <BackEndTask+0x1e>
 8009c26:	4bc1      	ldr	r3, [pc, #772]	; (8009f2c <BackEndTask+0x374>)
 8009c28:	469c      	mov	ip, r3
 8009c2a:	44ac      	add	ip, r5
 8009c2c:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	9303      	str	r3, [sp, #12]
 8009c32:	2abf      	cmp	r2, #191	; 0xbf
 8009c34:	dc2a      	bgt.n	8009c8c <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 8009c36:	4bbe      	ldr	r3, [pc, #760]	; (8009f30 <BackEndTask+0x378>)
 8009c38:	2100      	movs	r1, #0
 8009c3a:	7e9b      	ldrb	r3, [r3, #26]
 8009c3c:	9102      	str	r1, [sp, #8]
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	1913      	adds	r3, r2, r4
 8009c42:	4699      	mov	r9, r3
 8009c44:	0073      	lsls	r3, r6, #1
 8009c46:	3201      	adds	r2, #1
 8009c48:	199b      	adds	r3, r3, r6
 8009c4a:	019b      	lsls	r3, r3, #6
 8009c4c:	9206      	str	r2, [sp, #24]
 8009c4e:	9a07      	ldr	r2, [sp, #28]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	44b9      	add	r9, r7
 8009c56:	1b12      	subs	r2, r2, r4
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	9501      	str	r5, [sp, #4]
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	0011      	movs	r1, r2
 8009c60:	e002      	b.n	8009c68 <BackEndTask+0xb0>
 8009c62:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c64:	2dc0      	cmp	r5, #192	; 0xc0
 8009c66:	d07c      	beq.n	8009d62 <BackEndTask+0x1aa>
 8009c68:	1b1a      	subs	r2, r3, r4
 8009c6a:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009c6c:	2abf      	cmp	r2, #191	; 0xbf
 8009c6e:	d100      	bne.n	8009c72 <BackEndTask+0xba>
 8009c70:	e0bb      	b.n	8009dea <BackEndTask+0x232>
 8009c72:	7818      	ldrb	r0, [r3, #0]
 8009c74:	18cd      	adds	r5, r1, r3
 8009c76:	2848      	cmp	r0, #72	; 0x48
 8009c78:	d1f3      	bne.n	8009c62 <BackEndTask+0xaa>
 8009c7a:	7858      	ldrb	r0, [r3, #1]
 8009c7c:	285a      	cmp	r0, #90	; 0x5a
 8009c7e:	d1f0      	bne.n	8009c62 <BackEndTask+0xaa>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009c80:	4653      	mov	r3, sl
 8009c82:	9d01      	ldr	r5, [sp, #4]
 8009c84:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1c3      	bne.n	8009c14 <BackEndTask+0x5c>
				totalnumberofrecevedmesg++;
 8009c8c:	4653      	mov	r3, sl
 8009c8e:	4652      	mov	r2, sl
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009c96:	6853      	ldr	r3, [r2, #4]
 8009c98:	4699      	mov	r9, r3
 8009c9a:	2bbd      	cmp	r3, #189	; 0xbd
 8009c9c:	d100      	bne.n	8009ca0 <BackEndTask+0xe8>
 8009c9e:	e080      	b.n	8009da2 <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009ca0:	2bbe      	cmp	r3, #190	; 0xbe
 8009ca2:	d100      	bne.n	8009ca6 <BackEndTask+0xee>
 8009ca4:	e09b      	b.n	8009dde <BackEndTask+0x226>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009ca6:	2bbf      	cmp	r3, #191	; 0xbf
 8009ca8:	d100      	bne.n	8009cac <BackEndTask+0xf4>
 8009caa:	e0c2      	b.n	8009e32 <BackEndTask+0x27a>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009cac:	006b      	lsls	r3, r5, #1
 8009cae:	195b      	adds	r3, r3, r5
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	18fb      	adds	r3, r7, r3
 8009cb4:	444b      	add	r3, r9
 8009cb6:	789a      	ldrb	r2, [r3, #2]
 8009cb8:	4653      	mov	r3, sl
 8009cba:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	4651      	mov	r1, sl
 8009cc0:	3303      	adds	r3, #3
 8009cc2:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009cc4:	1cd3      	adds	r3, r2, #3
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009cca:	2bbf      	cmp	r3, #191	; 0xbf
 8009ccc:	dd4b      	ble.n	8009d66 <BackEndTask+0x1ae>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009cce:	4651      	mov	r1, sl
 8009cd0:	3bc0      	subs	r3, #192	; 0xc0
 8009cd2:	610b      	str	r3, [r1, #16]
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	1908      	adds	r0, r1, r4
 8009cd8:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009cda:	4599      	cmp	r9, r3
 8009cdc:	d04a      	beq.n	8009d74 <BackEndTask+0x1bc>
					if(packetStart < packetEnd){
 8009cde:	4599      	cmp	r9, r3
 8009ce0:	da6a      	bge.n	8009db8 <BackEndTask+0x200>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009ce2:	0001      	movs	r1, r0
 8009ce4:	9a01      	ldr	r2, [sp, #4]
 8009ce6:	4893      	ldr	r0, [pc, #588]	; (8009f34 <BackEndTask+0x37c>)
 8009ce8:	f009 f92d 	bl	8012f46 <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009cec:	466b      	mov	r3, sp
 8009cee:	4891      	ldr	r0, [pc, #580]	; (8009f34 <BackEndTask+0x37c>)
 8009cf0:	8899      	ldrh	r1, [r3, #4]
 8009cf2:	f002 feaf 	bl	800ca54 <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009cf6:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009cf8:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	488d      	ldr	r0, [pc, #564]	; (8009f34 <BackEndTask+0x37c>)
 8009cfe:	f009 f92b 	bl	8012f58 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009d02:	4653      	mov	r3, sl
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	4699      	mov	r9, r3
 8009d08:	464a      	mov	r2, r9
 8009d0a:	006b      	lsls	r3, r5, #1
 8009d0c:	195b      	adds	r3, r3, r5
 8009d0e:	019b      	lsls	r3, r3, #6
 8009d10:	18fb      	adds	r3, r7, r3
 8009d12:	5c9b      	ldrb	r3, [r3, r2]
 8009d14:	9a01      	ldr	r2, [sp, #4]
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d100      	bne.n	8009d1c <BackEndTask+0x164>
 8009d1a:	e092      	b.n	8009e42 <BackEndTask+0x28a>
				if(packetStart < packetEnd){
 8009d1c:	4653      	mov	r3, sl
 8009d1e:	4652      	mov	r2, sl
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	6892      	ldr	r2, [r2, #8]
 8009d24:	1918      	adds	r0, r3, r4
 8009d26:	3204      	adds	r2, #4
 8009d28:	1838      	adds	r0, r7, r0
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	4599      	cmp	r9, r3
 8009d2e:	dd23      	ble.n	8009d78 <BackEndTask+0x1c0>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009d30:	2100      	movs	r1, #0
 8009d32:	f009 f911 	bl	8012f58 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009d36:	464b      	mov	r3, r9
 8009d38:	2bbf      	cmp	r3, #191	; 0xbf
 8009d3a:	d02e      	beq.n	8009d9a <BackEndTask+0x1e2>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009d3c:	9a03      	ldr	r2, [sp, #12]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009d42:	00f3      	lsls	r3, r6, #3
 8009d44:	1b9b      	subs	r3, r3, r6
 8009d46:	4a7c      	ldr	r2, [pc, #496]	; (8009f38 <BackEndTask+0x380>)
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	3b37      	subs	r3, #55	; 0x37
 8009d4c:	5cd0      	ldrb	r0, [r2, r3]
 8009d4e:	212d      	movs	r1, #45	; 0x2d
 8009d50:	2200      	movs	r2, #0
 8009d52:	f7ff fe51 	bl	80099f8 <SendMessageToModule>
				++rejectedMsg;
 8009d56:	4653      	mov	r3, sl
 8009d58:	4652      	mov	r2, sl
 8009d5a:	8adb      	ldrh	r3, [r3, #22]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	82d3      	strh	r3, [r2, #22]
 8009d60:	e743      	b.n	8009bea <BackEndTask+0x32>
 8009d62:	9d01      	ldr	r5, [sp, #4]
 8009d64:	e78f      	b.n	8009c86 <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009d66:	4651      	mov	r1, sl
 8009d68:	610b      	str	r3, [r1, #16]
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	1908      	adds	r0, r1, r4
 8009d6e:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009d70:	4599      	cmp	r9, r3
 8009d72:	d1b4      	bne.n	8009cde <BackEndTask+0x126>
 8009d74:	3204      	adds	r2, #4
 8009d76:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 8009d78:	22c0      	movs	r2, #192	; 0xc0
 8009d7a:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009d7c:	001a      	movs	r2, r3
 8009d7e:	2100      	movs	r1, #0
 8009d80:	9302      	str	r3, [sp, #8]
 8009d82:	f009 f8e9 	bl	8012f58 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009d86:	9b02      	ldr	r3, [sp, #8]
 8009d88:	9a01      	ldr	r2, [sp, #4]
 8009d8a:	1938      	adds	r0, r7, r4
 8009d8c:	1ad2      	subs	r2, r2, r3
 8009d8e:	2100      	movs	r1, #0
 8009d90:	f009 f8e2 	bl	8012f58 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009d94:	464b      	mov	r3, r9
 8009d96:	2bbf      	cmp	r3, #191	; 0xbf
 8009d98:	d1d0      	bne.n	8009d3c <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9a03      	ldr	r2, [sp, #12]
 8009d9e:	7013      	strb	r3, [r2, #0]
 8009da0:	e7cf      	b.n	8009d42 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009da2:	0073      	lsls	r3, r6, #1
 8009da4:	199b      	adds	r3, r3, r6
 8009da6:	019b      	lsls	r3, r3, #6
 8009da8:	3b01      	subs	r3, #1
 8009daa:	5cfa      	ldrb	r2, [r7, r3]
 8009dac:	4653      	mov	r3, sl
					parseStart =0;
 8009dae:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009db0:	609a      	str	r2, [r3, #8]
					parseStart =0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60cb      	str	r3, [r1, #12]
 8009db6:	e785      	b.n	8009cc4 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 8009db8:	22c0      	movs	r2, #192	; 0xc0
 8009dba:	464b      	mov	r3, r9
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009dc0:	001a      	movs	r2, r3
 8009dc2:	0001      	movs	r1, r0
 8009dc4:	485b      	ldr	r0, [pc, #364]	; (8009f34 <BackEndTask+0x37c>)
 8009dc6:	f009 f8be 	bl	8012f46 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009dca:	464a      	mov	r2, r9
 8009dcc:	4b59      	ldr	r3, [pc, #356]	; (8009f34 <BackEndTask+0x37c>)
 8009dce:	1939      	adds	r1, r7, r4
 8009dd0:	444b      	add	r3, r9
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	9b01      	ldr	r3, [sp, #4]
 8009dd6:	1a9a      	subs	r2, r3, r2
 8009dd8:	f009 f8b5 	bl	8012f46 <memcpy>
 8009ddc:	e786      	b.n	8009cec <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8009dde:	4653      	mov	r3, sl
					parseStart =1;
 8009de0:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8009de2:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8009de4:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 8009de6:	609a      	str	r2, [r3, #8]
 8009de8:	e76c      	b.n	8009cc4 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	7800      	ldrb	r0, [r0, #0]
 8009dee:	2848      	cmp	r0, #72	; 0x48
 8009df0:	d07a      	beq.n	8009ee8 <BackEndTask+0x330>
							if(BOS.disableCLI == false){
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	d000      	beq.n	8009dfa <BackEndTask+0x242>
 8009df8:	e70c      	b.n	8009c14 <BackEndTask+0x5c>
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009dfe:	7805      	ldrb	r5, [r0, #0]
 8009e00:	469c      	mov	ip, r3
 8009e02:	1e53      	subs	r3, r2, #1
 8009e04:	2d0d      	cmp	r5, #13
 8009e06:	d009      	beq.n	8009e1c <BackEndTask+0x264>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e0c:	2ac0      	cmp	r2, #192	; 0xc0
 8009e0e:	d100      	bne.n	8009e12 <BackEndTask+0x25a>
 8009e10:	e700      	b.n	8009c14 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009e12:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e14:	7805      	ldrb	r5, [r0, #0]
 8009e16:	1e53      	subs	r3, r2, #1
 8009e18:	2d0d      	cmp	r5, #13
 8009e1a:	d1f5      	bne.n	8009e08 <BackEndTask+0x250>
 8009e1c:	2bbf      	cmp	r3, #191	; 0xbf
 8009e1e:	d100      	bne.n	8009e22 <BackEndTask+0x26a>
 8009e20:	e0ad      	b.n	8009f7e <BackEndTask+0x3c6>
 8009e22:	7845      	ldrb	r5, [r0, #1]
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	d100      	bne.n	8009e2a <BackEndTask+0x272>
 8009e28:	e08c      	b.n	8009f44 <BackEndTask+0x38c>
 8009e2a:	1c55      	adds	r5, r2, #1
 8009e2c:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8009e2e:	002a      	movs	r2, r5
 8009e30:	e7f0      	b.n	8009e14 <BackEndTask+0x25c>
					packetLength =UARTRxBuf[port - 1][1];
 8009e32:	193b      	adds	r3, r7, r4
 8009e34:	785a      	ldrb	r2, [r3, #1]
 8009e36:	4653      	mov	r3, sl
					parseStart =2;
 8009e38:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 8009e3a:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	60cb      	str	r3, [r1, #12]
 8009e40:	e740      	b.n	8009cc4 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8009e42:	4643      	mov	r3, r8
 8009e44:	2201      	movs	r2, #1
 8009e46:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009e48:	4653      	mov	r3, sl
 8009e4a:	4a3c      	ldr	r2, [pc, #240]	; (8009f3c <BackEndTask+0x384>)
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	00f0      	lsls	r0, r6, #3
 8009e50:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009e52:	4652      	mov	r2, sl
 8009e54:	68d1      	ldr	r1, [r2, #12]
 8009e56:	2238      	movs	r2, #56	; 0x38
 8009e58:	4252      	negs	r2, r2
 8009e5a:	4694      	mov	ip, r2
 8009e5c:	1b80      	subs	r0, r0, r6
 8009e5e:	00c0      	lsls	r0, r0, #3
 8009e60:	4484      	add	ip, r0
 8009e62:	4662      	mov	r2, ip
 8009e64:	9202      	str	r2, [sp, #8]
 8009e66:	4a34      	ldr	r2, [pc, #208]	; (8009f38 <BackEndTask+0x380>)
 8009e68:	000d      	movs	r5, r1
 8009e6a:	3a38      	subs	r2, #56	; 0x38
 8009e6c:	1810      	adds	r0, r2, r0
 8009e6e:	22bf      	movs	r2, #191	; 0xbf
 8009e70:	9104      	str	r1, [sp, #16]
 8009e72:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009e78:	1b52      	subs	r2, r2, r5
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	dc38      	bgt.n	8009ef0 <BackEndTask+0x338>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009e7e:	001a      	movs	r2, r3
 8009e80:	f009 f861 	bl	8012f46 <memcpy>
						if(packetStart < packetEnd){
 8009e84:	4653      	mov	r3, sl
 8009e86:	9a01      	ldr	r2, [sp, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	3204      	adds	r2, #4
 8009e8c:	1918      	adds	r0, r3, r4
 8009e8e:	1838      	adds	r0, r7, r0
 8009e90:	9201      	str	r2, [sp, #4]
 8009e92:	4599      	cmp	r9, r3
 8009e94:	dc08      	bgt.n	8009ea8 <BackEndTask+0x2f0>
							MSG_RX_BUF_SIZE - packetStart);
 8009e96:	25c0      	movs	r5, #192	; 0xc0
 8009e98:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009e9a:	002a      	movs	r2, r5
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	f009 f85b 	bl	8012f58 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	1938      	adds	r0, r7, r4
 8009ea6:	1b5a      	subs	r2, r3, r5
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	f009 f855 	bl	8012f58 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009eae:	464b      	mov	r3, r9
 8009eb0:	2bbf      	cmp	r3, #191	; 0xbf
 8009eb2:	d02e      	beq.n	8009f12 <BackEndTask+0x35a>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009eb4:	9a03      	ldr	r2, [sp, #12]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009eba:	4653      	mov	r3, sl
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 8009ec0:	4658      	mov	r0, fp
						++acceptedMsg;
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009ec6:	9a02      	ldr	r2, [sp, #8]
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <BackEndTask+0x380>)
 8009eca:	5c9b      	ldrb	r3, [r3, r2]
 8009ecc:	4a1c      	ldr	r2, [pc, #112]	; (8009f40 <BackEndTask+0x388>)
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d006      	beq.n	8009ee2 <BackEndTask+0x32a>
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d902      	bls.n	8009ee2 <BackEndTask+0x32a>
							ForwardReceivedMessage(port);
 8009edc:	f7ff fd6c 	bl	80099b8 <ForwardReceivedMessage>
 8009ee0:	e698      	b.n	8009c14 <BackEndTask+0x5c>
							NotifyMessagingTask(port);
 8009ee2:	f7ff fb05 	bl	80094f0 <NotifyMessagingTask>
 8009ee6:	e695      	b.n	8009c14 <BackEndTask+0x5c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009ee8:	5d38      	ldrb	r0, [r7, r4]
 8009eea:	285a      	cmp	r0, #90	; 0x5a
 8009eec:	d181      	bne.n	8009df2 <BackEndTask+0x23a>
 8009eee:	e6c7      	b.n	8009c80 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8009ef0:	25c0      	movs	r5, #192	; 0xc0
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009ef6:	002a      	movs	r2, r5
 8009ef8:	f009 f825 	bl	8012f46 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009efc:	9b02      	ldr	r3, [sp, #8]
 8009efe:	1939      	adds	r1, r7, r4
 8009f00:	18e8      	adds	r0, r5, r3
 8009f02:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <BackEndTask+0x380>)
 8009f04:	469c      	mov	ip, r3
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	4460      	add	r0, ip
 8009f0a:	1b5a      	subs	r2, r3, r5
 8009f0c:	f009 f81b 	bl	8012f46 <memcpy>
 8009f10:	e7b8      	b.n	8009e84 <BackEndTask+0x2cc>
							UARTRxBufIndex[port - 1] =0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	9a03      	ldr	r2, [sp, #12]
 8009f16:	7013      	strb	r3, [r2, #0]
 8009f18:	e7cf      	b.n	8009eba <BackEndTask+0x302>
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	20000c3c 	.word	0x20000c3c
 8009f20:	200018c4 	.word	0x200018c4
 8009f24:	20001350 	.word	0x20001350
 8009f28:	20001308 	.word	0x20001308
 8009f2c:	20001310 	.word	0x20001310
 8009f30:	20006db4 	.word	0x20006db4
 8009f34:	20001318 	.word	0x20001318
 8009f38:	20000ca0 	.word	0x20000ca0
 8009f3c:	20000c60 	.word	0x20000c60
 8009f40:	20000aa8 	.word	0x20000aa8
 8009f44:	0018      	movs	r0, r3
 8009f46:	9d01      	ldr	r5, [sp, #4]
 8009f48:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	006b      	lsls	r3, r5, #1
 8009f4e:	195b      	adds	r3, r3, r5
 8009f50:	019b      	lsls	r3, r3, #6
 8009f52:	18fb      	adds	r3, r7, r3
 8009f54:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009f5a:	4642      	mov	r2, r8
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <BackEndTask+0x3e0>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009f62:	2303      	movs	r3, #3
 8009f64:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 8009f66:	465a      	mov	r2, fp
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <BackEndTask+0x3e0>)
 8009f6a:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <BackEndTask+0x3e4>)
 8009f6e:	2202      	movs	r2, #2
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	9801      	ldr	r0, [sp, #4]
 8009f76:	2300      	movs	r3, #0
 8009f78:	f004 ffe8 	bl	800ef4c <xTaskGenericNotify>
										break;
 8009f7c:	e64a      	b.n	8009c14 <BackEndTask+0x5c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009f7e:	5d3a      	ldrb	r2, [r7, r4]
 8009f80:	0018      	movs	r0, r3
 8009f82:	4663      	mov	r3, ip
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	d003      	beq.n	8009f90 <BackEndTask+0x3d8>
							emptyBuffer = true;
 8009f88:	2201      	movs	r2, #1
 8009f8a:	18cd      	adds	r5, r1, r3
 8009f8c:	9202      	str	r2, [sp, #8]
 8009f8e:	e668      	b.n	8009c62 <BackEndTask+0xaa>
 8009f90:	9d01      	ldr	r5, [sp, #4]
 8009f92:	22c0      	movs	r2, #192	; 0xc0
 8009f94:	e7d9      	b.n	8009f4a <BackEndTask+0x392>
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	20000c38 	.word	0x20000c38
 8009f9c:	20001720 	.word	0x20001720

08009fa0 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	4770      	bx	lr

08009fa4 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa6:	4657      	mov	r7, sl
 8009fa8:	4645      	mov	r5, r8
 8009faa:	46de      	mov	lr, fp
 8009fac:	464e      	mov	r6, r9
 8009fae:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 8009fb0:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 8009fb2:	b09d      	sub	sp, #116	; 0x74
	port =(int8_t )(unsigned )argument;
 8009fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009fb6:	23ff      	movs	r3, #255	; 0xff
 8009fb8:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 8009fba:	1e5d      	subs	r5, r3, #1
 8009fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fbe:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009fc0:	4adf      	ldr	r2, [pc, #892]	; (800a340 <PxMessagingTask+0x39c>)
 8009fc2:	9306      	str	r3, [sp, #24]
 8009fc4:	1b5b      	subs	r3, r3, r5
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4693      	mov	fp, r2
 8009fca:	001a      	movs	r2, r3
 8009fcc:	445a      	add	r2, fp
 8009fce:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_StatusTypeDef status =HAL_OK;
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	920f      	str	r2, [sp, #60]	; 0x3c
 8009fd4:	4adb      	ldr	r2, [pc, #876]	; (800a344 <PxMessagingTask+0x3a0>)
 8009fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009fd8:	4690      	mov	r8, r2
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	3305      	adds	r3, #5
 8009fde:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fe0:	4bd9      	ldr	r3, [pc, #868]	; (800a348 <PxMessagingTask+0x3a4>)
 8009fe2:	9216      	str	r2, [sp, #88]	; 0x58
 8009fe4:	4699      	mov	r9, r3
									ADCSide =cMessage[port - 1][shift + 1];
 8009fe6:	2338      	movs	r3, #56	; 0x38
 8009fe8:	00aa      	lsls	r2, r5, #2
 8009fea:	9210      	str	r2, [sp, #64]	; 0x40
 8009fec:	4ad7      	ldr	r2, [pc, #860]	; (800a34c <PxMessagingTask+0x3a8>)
	BOS_Status result =BOS_OK;
 8009fee:	2700      	movs	r7, #0
 8009ff0:	4692      	mov	sl, r2
									ADCSide =cMessage[port - 1][shift + 1];
 8009ff2:	436b      	muls	r3, r5
 8009ff4:	445b      	add	r3, fp
 8009ff6:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	4249      	negs	r1, r1
 8009ffe:	f004 ff65 	bl	800eecc <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a002:	4643      	mov	r3, r8
 800a004:	5d5e      	ldrb	r6, [r3, r5]
 800a006:	2e00      	cmp	r6, #0
 800a008:	d076      	beq.n	800a0f8 <PxMessagingTask+0x154>
			if(cMessage[port - 1][2] >> 7){
 800a00a:	9b06      	ldr	r3, [sp, #24]
 800a00c:	1b5b      	subs	r3, r3, r5
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	445b      	add	r3, fp
 800a012:	7899      	ldrb	r1, [r3, #2]
 800a014:	b24b      	sxtb	r3, r1
 800a016:	2b00      	cmp	r3, #0
 800a018:	da01      	bge.n	800a01e <PxMessagingTask+0x7a>
 800a01a:	f000 fcc9 	bl	800a9b0 <PxMessagingTask+0xa0c>
				longMessage =0;
 800a01e:	2300      	movs	r3, #0
 800a020:	4acb      	ldr	r2, [pc, #812]	; (800a350 <PxMessagingTask+0x3ac>)
 800a022:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 800a024:	465a      	mov	r2, fp
 800a026:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a028:	4eca      	ldr	r6, [pc, #808]	; (800a354 <PxMessagingTask+0x3b0>)
			dst =cMessage[port - 1][0];
 800a02a:	1b5b      	subs	r3, r3, r5
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 800a030:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 800a032:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 800a034:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a036:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800a038:	9204      	str	r2, [sp, #16]
 800a03a:	2201      	movs	r2, #1
 800a03c:	0014      	movs	r4, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a03e:	0f80      	lsrs	r0, r0, #30
 800a040:	7070      	strb	r0, [r6, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a042:	0908      	lsrs	r0, r1, #4
 800a044:	400c      	ands	r4, r1
 800a046:	4002      	ands	r2, r0
 800a048:	46a4      	mov	ip, r4
 800a04a:	b2d0      	uxtb	r0, r2
 800a04c:	70f2      	strb	r2, [r6, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a04e:	2260      	movs	r2, #96	; 0x60
 800a050:	4463      	add	r3, ip
 800a052:	400a      	ands	r2, r1
 800a054:	940c      	str	r4, [sp, #48]	; 0x30
 800a056:	7032      	strb	r2, [r6, #0]
 800a058:	0022      	movs	r2, r4
 800a05a:	78dc      	ldrb	r4, [r3, #3]
 800a05c:	9408      	str	r4, [sp, #32]
			if(extendCode == true){
 800a05e:	0789      	lsls	r1, r1, #30
 800a060:	d507      	bpl.n	800a072 <PxMessagingTask+0xce>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a062:	46a4      	mov	ip, r4
 800a064:	791b      	ldrb	r3, [r3, #4]
				++shift;
 800a066:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	4463      	add	r3, ip
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	9308      	str	r3, [sp, #32]
				++shift;
 800a070:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800a072:	2800      	cmp	r0, #0
 800a074:	d001      	beq.n	800a07a <PxMessagingTask+0xd6>
 800a076:	f000 fca0 	bl	800a9ba <PxMessagingTask+0xa16>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a07a:	9a07      	ldr	r2, [sp, #28]
 800a07c:	1e53      	subs	r3, r2, #1
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2bfc      	cmp	r3, #252	; 0xfc
 800a082:	d801      	bhi.n	800a088 <PxMessagingTask+0xe4>
 800a084:	f000 fc6e 	bl	800a964 <PxMessagingTask+0x9c0>
 800a088:	4643      	mov	r3, r8
 800a08a:	5d5e      	ldrb	r6, [r3, r5]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a08c:	9b07      	ldr	r3, [sp, #28]
 800a08e:	2bff      	cmp	r3, #255	; 0xff
 800a090:	d001      	beq.n	800a096 <PxMessagingTask+0xf2>
 800a092:	f000 fca7 	bl	800a9e4 <PxMessagingTask+0xa40>
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	4aaf      	ldr	r2, [pc, #700]	; (800a358 <PxMessagingTask+0x3b4>)
 800a09a:	1b5c      	subs	r4, r3, r5
 800a09c:	00e4      	lsls	r4, r4, #3
 800a09e:	445c      	add	r4, fp
 800a0a0:	19a3      	adds	r3, r4, r6
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a0a8:	2703      	movs	r7, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d024      	beq.n	800a0f8 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a0ae:	4aaa      	ldr	r2, [pc, #680]	; (800a358 <PxMessagingTask+0x3b4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a0b0:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a0b2:	7613      	strb	r3, [r2, #24]
 800a0b4:	4aa9      	ldr	r2, [pc, #676]	; (800a35c <PxMessagingTask+0x3b8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a0b6:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a0b8:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a0ba:	f7ff fc39 	bl	8009930 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a0be:	4643      	mov	r3, r8
 800a0c0:	5d5e      	ldrb	r6, [r3, r5]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	19a4      	adds	r4, r4, r6
 800a0c6:	3c01      	subs	r4, #1
 800a0c8:	7023      	strb	r3, [r4, #0]
				shift +=4;
 800a0ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a0cc:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a0ce:	1b32      	subs	r2, r6, r4
 800a0d0:	b2d3      	uxtb	r3, r2
 800a0d2:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800a0d4:	9b08      	ldr	r3, [sp, #32]
 800a0d6:	2b2d      	cmp	r3, #45	; 0x2d
 800a0d8:	d900      	bls.n	800a0dc <PxMessagingTask+0x138>
 800a0da:	e084      	b.n	800a1e6 <PxMessagingTask+0x242>
 800a0dc:	4aa0      	ldr	r2, [pc, #640]	; (800a360 <PxMessagingTask+0x3bc>)
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	58d3      	ldr	r3, [r2, r3]
 800a0e2:	469f      	mov	pc, r3
							SaveToRO();
 800a0e4:	f001 fa06 	bl	800b4f4 <SaveToRO>
							SaveEEportsDir();
 800a0e8:	f7f9 f98e 	bl	8003408 <SaveEEportsDir>
							indMode =IND_PING;
 800a0ec:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 800a0ee:	4a9d      	ldr	r2, [pc, #628]	; (800a364 <PxMessagingTask+0x3c0>)
 800a0f0:	7013      	strb	r3, [r2, #0]
 800a0f2:	4643      	mov	r3, r8
							IND_toggle();
 800a0f4:	2700      	movs	r7, #0
 800a0f6:	5d5e      	ldrb	r6, [r3, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a0f8:	0032      	movs	r2, r6
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0fe:	f008 ff2b 	bl	8012f58 <memset>
		messageLength[port - 1] =0;
 800a102:	4643      	mov	r3, r8
 800a104:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a106:	990b      	ldr	r1, [sp, #44]	; 0x2c
		messageLength[port - 1] =0;
 800a108:	555a      	strb	r2, [r3, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a10a:	4b97      	ldr	r3, [pc, #604]	; (800a368 <PxMessagingTask+0x3c4>)
 800a10c:	5c5b      	ldrb	r3, [r3, r1]
 800a10e:	3b02      	subs	r3, #2
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <PxMessagingTask+0x174>
			portStatus[port] =FREE;
 800a114:	4b94      	ldr	r3, [pc, #592]	; (800a368 <PxMessagingTask+0x3c4>)
 800a116:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a118:	f005 f99e 	bl	800f458 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a11c:	e76c      	b.n	8009ff8 <PxMessagingTask+0x54>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a11e:	9b05      	ldr	r3, [sp, #20]
 800a120:	191a      	adds	r2, r3, r4
 800a122:	7893      	ldrb	r3, [r2, #2]
 800a124:	78d1      	ldrb	r1, [r2, #3]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	0409      	lsls	r1, r1, #16
 800a12a:	185b      	adds	r3, r3, r1
 800a12c:	7851      	ldrb	r1, [r2, #1]
 800a12e:	7912      	ldrb	r2, [r2, #4]
 800a130:	185b      	adds	r3, r3, r1
 800a132:	0612      	lsls	r2, r2, #24
 800a134:	189b      	adds	r3, r3, r2
 800a136:	4a8d      	ldr	r2, [pc, #564]	; (800a36c <PxMessagingTask+0x3c8>)
 800a138:	6393      	str	r3, [r2, #56]	; 0x38
									ADCPort =cMessage[port - 1][shift];
 800a13a:	2644      	movs	r6, #68	; 0x44
									ADCSide =cMessage[port - 1][shift + 1];
 800a13c:	2146      	movs	r1, #70	; 0x46
									ADCPort =cMessage[port - 1][shift];
 800a13e:	4b8b      	ldr	r3, [pc, #556]	; (800a36c <PxMessagingTask+0x3c8>)
									ADCSide =cMessage[port - 1][shift + 1];
 800a140:	4a8a      	ldr	r2, [pc, #552]	; (800a36c <PxMessagingTask+0x3c8>)
									ADCPort =cMessage[port - 1][shift];
 800a142:	5398      	strh	r0, [r3, r6]
									ADCSide =cMessage[port - 1][shift + 1];
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	191b      	adds	r3, r3, r4
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	5253      	strh	r3, [r2, r1]
									if(0 == ADCSide){
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <PxMessagingTask+0x1b0>
 800a150:	f000 fdfc 	bl	800ad4c <PxMessagingTask+0xda8>
									else if(1 == ADCSide){
 800a154:	2b01      	cmp	r3, #1
 800a156:	d109      	bne.n	800a16c <PxMessagingTask+0x1c8>
										ADCSelectChannel(ADCPort,"bottom");
 800a158:	4985      	ldr	r1, [pc, #532]	; (800a370 <PxMessagingTask+0x3cc>)
 800a15a:	f7fe fd7b 	bl	8008c54 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a15e:	4a83      	ldr	r2, [pc, #524]	; (800a36c <PxMessagingTask+0x3c8>)
 800a160:	4b82      	ldr	r3, [pc, #520]	; (800a36c <PxMessagingTask+0x3c8>)
 800a162:	3248      	adds	r2, #72	; 0x48
 800a164:	5d98      	ldrb	r0, [r3, r6]
 800a166:	4982      	ldr	r1, [pc, #520]	; (800a370 <PxMessagingTask+0x3cc>)
 800a168:	f7fe fdc4 	bl	8008cf4 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a16c:	497f      	ldr	r1, [pc, #508]	; (800a36c <PxMessagingTask+0x3c8>)
 800a16e:	487f      	ldr	r0, [pc, #508]	; (800a36c <PxMessagingTask+0x3c8>)
 800a170:	314c      	adds	r1, #76	; 0x4c
 800a172:	3050      	adds	r0, #80	; 0x50
 800a174:	f7fe fba8 	bl	80088c8 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800a178:	4a7c      	ldr	r2, [pc, #496]	; (800a36c <PxMessagingTask+0x3c8>)
 800a17a:	9b06      	ldr	r3, [sp, #24]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a17c:	0011      	movs	r1, r2
									ADCPort =cMessage[port - 1][shift];
 800a17e:	1b5e      	subs	r6, r3, r5
 800a180:	2344      	movs	r3, #68	; 0x44
 800a182:	00f6      	lsls	r6, r6, #3
 800a184:	445e      	add	r6, fp
 800a186:	5d30      	ldrb	r0, [r6, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a188:	3154      	adds	r1, #84	; 0x54
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a18a:	1934      	adds	r4, r6, r4
									ADCPort =cMessage[port - 1][shift];
 800a18c:	52d0      	strh	r0, [r2, r3]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a18e:	f7fe fc61 	bl	8008a54 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a192:	79a3      	ldrb	r3, [r4, #6]
 800a194:	79e2      	ldrb	r2, [r4, #7]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	0412      	lsls	r2, r2, #16
 800a19a:	189b      	adds	r3, r3, r2
 800a19c:	7962      	ldrb	r2, [r4, #5]
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	7a22      	ldrb	r2, [r4, #8]
 800a1a2:	0612      	lsls	r2, r2, #24
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	4a71      	ldr	r2, [pc, #452]	; (800a36c <PxMessagingTask+0x3c8>)
 800a1a8:	63d3      	str	r3, [r2, #60]	; 0x3c
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a1aa:	7aa3      	ldrb	r3, [r4, #10]
 800a1ac:	7ae2      	ldrb	r2, [r4, #11]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	0412      	lsls	r2, r2, #16
 800a1b2:	189b      	adds	r3, r3, r2
 800a1b4:	7a62      	ldrb	r2, [r4, #9]
 800a1b6:	189b      	adds	r3, r3, r2
 800a1b8:	7b22      	ldrb	r2, [r4, #12]
 800a1ba:	0612      	lsls	r2, r2, #24
 800a1bc:	189b      	adds	r3, r3, r2
 800a1be:	4a6b      	ldr	r2, [pc, #428]	; (800a36c <PxMessagingTask+0x3c8>)
 800a1c0:	6413      	str	r3, [r2, #64]	; 0x40
							ACK_FLAG =1;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4a6b      	ldr	r2, [pc, #428]	; (800a374 <PxMessagingTask+0x3d0>)
 800a1c6:	2700      	movs	r7, #0
 800a1c8:	7013      	strb	r3, [r2, #0]
 800a1ca:	4643      	mov	r3, r8
 800a1cc:	5d5e      	ldrb	r6, [r3, r5]
 800a1ce:	e793      	b.n	800a0f8 <PxMessagingTask+0x154>
							switch(cMessage[port - 1][0 + shift]){
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	1b5b      	subs	r3, r3, r5
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	445b      	add	r3, fp
 800a1d8:	5d18      	ldrb	r0, [r3, r4]
 800a1da:	282b      	cmp	r0, #43	; 0x2b
 800a1dc:	d8f1      	bhi.n	800a1c2 <PxMessagingTask+0x21e>
 800a1de:	4a66      	ldr	r2, [pc, #408]	; (800a378 <PxMessagingTask+0x3d4>)
 800a1e0:	0083      	lsls	r3, r0, #2
 800a1e2:	58d3      	ldr	r3, [r2, r3]
 800a1e4:	469f      	mov	pc, r3
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a1e6:	9400      	str	r4, [sp, #0]
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	9a04      	ldr	r2, [sp, #16]
 800a1ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1ee:	9808      	ldr	r0, [sp, #32]
 800a1f0:	f7ff fed6 	bl	8009fa0 <User_MessagingParser>
 800a1f4:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800a1f6:	2801      	cmp	r0, #1
 800a1f8:	d101      	bne.n	800a1fe <PxMessagingTask+0x25a>
 800a1fa:	f000 fc3d 	bl	800aa78 <PxMessagingTask+0xad4>
 800a1fe:	4643      	mov	r3, r8
 800a200:	5d5e      	ldrb	r6, [r3, r5]
 800a202:	e779      	b.n	800a0f8 <PxMessagingTask+0x154>
							rejected_FLAG =1;
 800a204:	2301      	movs	r3, #1
 800a206:	4a5d      	ldr	r2, [pc, #372]	; (800a37c <PxMessagingTask+0x3d8>)
 800a208:	7013      	strb	r3, [r2, #0]
 800a20a:	e772      	b.n	800a0f2 <PxMessagingTask+0x14e>
							for(p =0; p < numOfParams; p++){
 800a20c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01d      	beq.n	800a24e <PxMessagingTask+0x2aa>
 800a212:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a214:	4659      	mov	r1, fp
 800a216:	46b4      	mov	ip, r6
 800a218:	1930      	adds	r0, r6, r4
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a21a:	2680      	movs	r6, #128	; 0x80
 800a21c:	3101      	adds	r1, #1
 800a21e:	4461      	add	r1, ip
 800a220:	9a04      	ldr	r2, [sp, #16]
 800a222:	190c      	adds	r4, r1, r4
 800a224:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a226:	3a01      	subs	r2, #1
 800a228:	4b55      	ldr	r3, [pc, #340]	; (800a380 <PxMessagingTask+0x3dc>)
 800a22a:	0052      	lsls	r2, r2, #1
 800a22c:	3901      	subs	r1, #1
 800a22e:	b2c9      	uxtb	r1, r1
 800a230:	5a9b      	ldrh	r3, [r3, r2]
 800a232:	4458      	add	r0, fp
 800a234:	1864      	adds	r4, r4, r1
 800a236:	0236      	lsls	r6, r6, #8
 800a238:	0037      	movs	r7, r6
 800a23a:	7801      	ldrb	r1, [r0, #0]
 800a23c:	3001      	adds	r0, #1
 800a23e:	3901      	subs	r1, #1
 800a240:	410f      	asrs	r7, r1
 800a242:	433b      	orrs	r3, r7
 800a244:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a246:	4284      	cmp	r4, r0
 800a248:	d1f6      	bne.n	800a238 <PxMessagingTask+0x294>
 800a24a:	494d      	ldr	r1, [pc, #308]	; (800a380 <PxMessagingTask+0x3dc>)
 800a24c:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	e0fd      	b.n	800a44e <PxMessagingTask+0x4aa>
							temp =0;
 800a252:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a254:	2680      	movs	r6, #128	; 0x80
							for(p =1; p <= NumOfPorts; p++){
 800a256:	2401      	movs	r4, #1
							temp =0;
 800a258:	9309      	str	r3, [sp, #36]	; 0x24
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a25a:	0236      	lsls	r6, r6, #8
 800a25c:	0020      	movs	r0, r4
 800a25e:	f003 f9ff 	bl	800d660 <GetUart>
 800a262:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a264:	42b3      	cmp	r3, r6
 800a266:	d105      	bne.n	800a274 <PxMessagingTask+0x2d0>
									messageParams[temp++] =p;
 800a268:	4651      	mov	r1, sl
 800a26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26c:	1c53      	adds	r3, r2, #1
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	548c      	strb	r4, [r1, r2]
 800a272:	9309      	str	r3, [sp, #36]	; 0x24
							for(p =1; p <= NumOfPorts; p++){
 800a274:	3401      	adds	r4, #1
 800a276:	b2e4      	uxtb	r4, r4
 800a278:	2c06      	cmp	r4, #6
 800a27a:	d1ef      	bne.n	800a25c <PxMessagingTask+0x2b8>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a27c:	466b      	mov	r3, sp
 800a27e:	2114      	movs	r1, #20
 800a280:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a282:	9804      	ldr	r0, [sp, #16]
 800a284:	f7ff fbb8 	bl	80099f8 <SendMessageToModule>
 800a288:	e733      	b.n	800a0f2 <PxMessagingTask+0x14e>
 800a28a:	4b3e      	ldr	r3, [pc, #248]	; (800a384 <PxMessagingTask+0x3e0>)
 800a28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a28e:	881f      	ldrh	r7, [r3, #0]
 800a290:	4b3d      	ldr	r3, [pc, #244]	; (800a388 <PxMessagingTask+0x3e4>)
 800a292:	4694      	mov	ip, r2
 800a294:	19d8      	adds	r0, r3, r7
 800a296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a298:	4467      	add	r7, ip
 800a29a:	18e1      	adds	r1, r4, r3
 800a29c:	4643      	mov	r3, r8
 800a29e:	5d5e      	ldrb	r6, [r3, r5]
							if(longMessage){
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <PxMessagingTask+0x3ac>)
 800a2a2:	b2bf      	uxth	r7, r7
 800a2a4:	781c      	ldrb	r4, [r3, #0]
 800a2a6:	4459      	add	r1, fp
 800a2a8:	2c00      	cmp	r4, #0
 800a2aa:	d101      	bne.n	800a2b0 <PxMessagingTask+0x30c>
 800a2ac:	f000 fc76 	bl	800ab9c <PxMessagingTask+0xbf8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a2b0:	f008 fe49 	bl	8012f46 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a2b4:	4b33      	ldr	r3, [pc, #204]	; (800a384 <PxMessagingTask+0x3e0>)
 800a2b6:	801f      	strh	r7, [r3, #0]
 800a2b8:	2700      	movs	r7, #0
 800a2ba:	e71d      	b.n	800a0f8 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a2bc:	9b06      	ldr	r3, [sp, #24]
 800a2be:	1b5b      	subs	r3, r3, r5
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	445b      	add	r3, fp
 800a2c4:	5d1b      	ldrb	r3, [r3, r4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <PxMessagingTask+0x32a>
 800a2ca:	f000 fc0c 	bl	800aae6 <PxMessagingTask+0xb42>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a2ce:	9b05      	ldr	r3, [sp, #20]
 800a2d0:	469c      	mov	ip, r3
 800a2d2:	4464      	add	r4, ip
 800a2d4:	78a3      	ldrb	r3, [r4, #2]
 800a2d6:	78e2      	ldrb	r2, [r4, #3]
 800a2d8:	061b      	lsls	r3, r3, #24
 800a2da:	0412      	lsls	r2, r2, #16
 800a2dc:	189b      	adds	r3, r3, r2
 800a2de:	7962      	ldrb	r2, [r4, #5]
 800a2e0:	189b      	adds	r3, r3, r2
 800a2e2:	7922      	ldrb	r2, [r4, #4]
 800a2e4:	0212      	lsls	r2, r2, #8
 800a2e6:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a2e8:	7862      	ldrb	r2, [r4, #1]
 800a2ea:	3a01      	subs	r2, #1
 800a2ec:	b2d2      	uxtb	r2, r2
 800a2ee:	2a07      	cmp	r2, #7
 800a2f0:	d900      	bls.n	800a2f4 <PxMessagingTask+0x350>
 800a2f2:	e6fe      	b.n	800a0f2 <PxMessagingTask+0x14e>
 800a2f4:	4925      	ldr	r1, [pc, #148]	; (800a38c <PxMessagingTask+0x3e8>)
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	588a      	ldr	r2, [r1, r2]
 800a2fa:	4697      	mov	pc, r2
							ExploreNeighbors(port);
 800a2fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2fe:	f7f9 fa6b 	bl	80037d8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a302:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a304:	2401      	movs	r4, #1
							temp =0;
 800a306:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 800a308:	4a16      	ldr	r2, [pc, #88]	; (800a364 <PxMessagingTask+0x3c0>)
							osDelay(10);
 800a30a:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a30c:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a30e:	f003 fa6b 	bl	800d7e8 <osDelay>
 800a312:	4e1f      	ldr	r6, [pc, #124]	; (800a390 <PxMessagingTask+0x3ec>)
								if(neighbors[p - 1][0]){
 800a314:	8833      	ldrh	r3, [r6, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d009      	beq.n	800a32e <PxMessagingTask+0x38a>
									messageParams[temp] =p;
 800a31a:	4653      	mov	r3, sl
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a31c:	1c78      	adds	r0, r7, #1
 800a31e:	4450      	add	r0, sl
 800a320:	2204      	movs	r2, #4
 800a322:	0031      	movs	r1, r6
									messageParams[temp] =p;
 800a324:	55dc      	strb	r4, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a326:	f008 fe0e 	bl	8012f46 <memcpy>
									temp +=5;
 800a32a:	3705      	adds	r7, #5
 800a32c:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a32e:	3401      	adds	r4, #1
 800a330:	b2e4      	uxtb	r4, r4
 800a332:	3604      	adds	r6, #4
 800a334:	2c06      	cmp	r4, #6
 800a336:	d1ed      	bne.n	800a314 <PxMessagingTask+0x370>
 800a338:	9709      	str	r7, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a33a:	b2ba      	uxth	r2, r7
 800a33c:	210d      	movs	r1, #13
 800a33e:	e7a0      	b.n	800a282 <PxMessagingTask+0x2de>
 800a340:	20000ca0 	.word	0x20000ca0
 800a344:	20000c60 	.word	0x20000c60
 800a348:	20000c50 	.word	0x20000c50
 800a34c:	20000b4c 	.word	0x20000b4c
 800a350:	20000c5c 	.word	0x20000c5c
 800a354:	20006d34 	.word	0x20006d34
 800a358:	200018c4 	.word	0x200018c4
 800a35c:	20000c58 	.word	0x20000c58
 800a360:	08017b24 	.word	0x08017b24
 800a364:	2000114e 	.word	0x2000114e
 800a368:	20000c3c 	.word	0x20000c3c
 800a36c:	20001944 	.word	0x20001944
 800a370:	0801892c 	.word	0x0801892c
 800a374:	2000114d 	.word	0x2000114d
 800a378:	08017bdc 	.word	0x08017bdc
 800a37c:	2000114c 	.word	0x2000114c
 800a380:	20007238 	.word	0x20007238
 800a384:	20000c5a 	.word	0x20000c5a
 800a388:	2000199c 	.word	0x2000199c
 800a38c:	08017c8c 	.word	0x08017c8c
 800a390:	20001138 	.word	0x20001138
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a394:	9b06      	ldr	r3, [sp, #24]
 800a396:	9904      	ldr	r1, [sp, #16]
 800a398:	1b5b      	subs	r3, r3, r5
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	445b      	add	r3, fp
 800a39e:	1918      	adds	r0, r3, r4
 800a3a0:	7882      	ldrb	r2, [r0, #2]
 800a3a2:	0209      	lsls	r1, r1, #8
 800a3a4:	4ed8      	ldr	r6, [pc, #864]	; (800a708 <PxMessagingTask+0x764>)
 800a3a6:	1852      	adds	r2, r2, r1
 800a3a8:	9910      	ldr	r1, [sp, #64]	; 0x40
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a3aa:	2700      	movs	r7, #0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a3ac:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a3ae:	468c      	mov	ip, r1
 800a3b0:	0032      	movs	r2, r6
 800a3b2:	5d19      	ldrb	r1, [r3, r4]
 800a3b4:	7843      	ldrb	r3, [r0, #1]
 800a3b6:	0209      	lsls	r1, r1, #8
 800a3b8:	4462      	add	r2, ip
 800a3ba:	185b      	adds	r3, r3, r1
 800a3bc:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a3be:	4652      	mov	r2, sl
 800a3c0:	4bd2      	ldr	r3, [pc, #840]	; (800a70c <PxMessagingTask+0x768>)
							messageParams[2] =port;
 800a3c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 800a3c4:	881b      	ldrh	r3, [r3, #0]
							osDelay(2);
 800a3c6:	2002      	movs	r0, #2
							messageParams[1] =(uint8_t )myPN;
 800a3c8:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a3ce:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a3d0:	f003 fa0a 	bl	800d7e8 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	2100      	movs	r1, #0
 800a3dc:	3308      	adds	r3, #8
 800a3de:	0020      	movs	r0, r4
 800a3e0:	f7ff f8aa 	bl	8009538 <SendMessageFromPort>
 800a3e4:	4643      	mov	r3, r8
 800a3e6:	5d5e      	ldrb	r6, [r3, r5]
 800a3e8:	e686      	b.n	800a0f8 <PxMessagingTask+0x154>
							IND_toggle();
 800a3ea:	2180      	movs	r1, #128	; 0x80
 800a3ec:	2090      	movs	r0, #144	; 0x90
 800a3ee:	0109      	lsls	r1, r1, #4
 800a3f0:	05c0      	lsls	r0, r0, #23
 800a3f2:	f006 fe51 	bl	8011098 <HAL_GPIO_TogglePin>
 800a3f6:	e67c      	b.n	800a0f2 <PxMessagingTask+0x14e>
							IND_OFF();
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	2090      	movs	r0, #144	; 0x90
 800a3fe:	0109      	lsls	r1, r1, #4
 800a400:	05c0      	lsls	r0, r0, #23
 800a402:	f006 fe43 	bl	801108c <HAL_GPIO_WritePin>
 800a406:	e674      	b.n	800a0f2 <PxMessagingTask+0x14e>
							IND_ON();
 800a408:	2201      	movs	r2, #1
 800a40a:	e7f6      	b.n	800a3fa <PxMessagingTask+0x456>
							if(!moduleAlias[myID][0])
 800a40c:	4bc0      	ldr	r3, [pc, #768]	; (800a710 <PxMessagingTask+0x76c>)
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	0093      	lsls	r3, r2, #2
 800a412:	189b      	adds	r3, r3, r2
 800a414:	4abf      	ldr	r2, [pc, #764]	; (800a714 <PxMessagingTask+0x770>)
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	5cd3      	ldrb	r3, [r2, r3]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <PxMessagingTask+0x47e>
 800a41e:	f000 fd8d 	bl	800af3c <PxMessagingTask+0xf98>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a422:	48bd      	ldr	r0, [pc, #756]	; (800a718 <PxMessagingTask+0x774>)
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	301c      	adds	r0, #28
 800a428:	49bc      	ldr	r1, [pc, #752]	; (800a71c <PxMessagingTask+0x778>)
 800a42a:	f008 ff8f 	bl	801334c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a42e:	4cba      	ldr	r4, [pc, #744]	; (800a718 <PxMessagingTask+0x774>)
 800a430:	341c      	adds	r4, #28
 800a432:	0020      	movs	r0, r4
 800a434:	f7f5 fe70 	bl	8000118 <strlen>
 800a438:	4bb9      	ldr	r3, [pc, #740]	; (800a720 <PxMessagingTask+0x77c>)
 800a43a:	b282      	uxth	r2, r0
 800a43c:	7818      	ldrb	r0, [r3, #0]
 800a43e:	2301      	movs	r3, #1
 800a440:	425b      	negs	r3, r3
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	0021      	movs	r1, r4
 800a446:	3333      	adds	r3, #51	; 0x33
 800a448:	f003 f882 	bl	800d550 <writePxMutex>
							responseStatus =BOS_OK;
 800a44c:	2300      	movs	r3, #0
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a44e:	4ab5      	ldr	r2, [pc, #724]	; (800a724 <PxMessagingTask+0x780>)
 800a450:	2700      	movs	r7, #0
 800a452:	7013      	strb	r3, [r2, #0]
 800a454:	4643      	mov	r3, r8
 800a456:	5d5e      	ldrb	r6, [r3, r5]
 800a458:	e64e      	b.n	800a0f8 <PxMessagingTask+0x154>
							indMode =IND_PING;
 800a45a:	2301      	movs	r3, #1
 800a45c:	4ab2      	ldr	r2, [pc, #712]	; (800a728 <PxMessagingTask+0x784>)
							osDelay(10);
 800a45e:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a460:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a462:	f003 f9c1 	bl	800d7e8 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a466:	2240      	movs	r2, #64	; 0x40
 800a468:	4bb0      	ldr	r3, [pc, #704]	; (800a72c <PxMessagingTask+0x788>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	4393      	bics	r3, r2
 800a46e:	2b20      	cmp	r3, #32
 800a470:	d000      	beq.n	800a474 <PxMessagingTask+0x4d0>
 800a472:	e63e      	b.n	800a0f2 <PxMessagingTask+0x14e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a474:	2200      	movs	r2, #0
 800a476:	2102      	movs	r1, #2
 800a478:	e703      	b.n	800a282 <PxMessagingTask+0x2de>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a47e:	469c      	mov	ip, r3
 800a480:	9b06      	ldr	r3, [sp, #24]
 800a482:	1c61      	adds	r1, r4, #1
 800a484:	1b5b      	subs	r3, r3, r5
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	445b      	add	r3, fp
 800a48a:	5d18      	ldrb	r0, [r3, r4]
 800a48c:	230a      	movs	r3, #10
 800a48e:	4461      	add	r1, ip
 800a490:	3a01      	subs	r2, #1
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	b292      	uxth	r2, r2
 800a496:	4459      	add	r1, fp
 800a498:	f003 f85a 	bl	800d550 <writePxMutex>
 800a49c:	4643      	mov	r3, r8
 800a49e:	2700      	movs	r7, #0
 800a4a0:	5d5e      	ldrb	r6, [r3, r5]
 800a4a2:	e629      	b.n	800a0f8 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	1b5b      	subs	r3, r3, r5
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	445b      	add	r3, fp
 800a4ac:	5d1b      	ldrb	r3, [r3, r4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d000      	beq.n	800a4b4 <PxMessagingTask+0x510>
 800a4b2:	e340      	b.n	800ab36 <PxMessagingTask+0xb92>
								myID =cMessage[port - 1][1 + shift];
 800a4b4:	9b05      	ldr	r3, [sp, #20]
 800a4b6:	4a96      	ldr	r2, [pc, #600]	; (800a710 <PxMessagingTask+0x76c>)
 800a4b8:	469c      	mov	ip, r3
 800a4ba:	4464      	add	r4, ip
 800a4bc:	7863      	ldrb	r3, [r4, #1]
 800a4be:	2700      	movs	r7, #0
 800a4c0:	7013      	strb	r3, [r2, #0]
 800a4c2:	4643      	mov	r3, r8
 800a4c4:	5d5e      	ldrb	r6, [r3, r5]
 800a4c6:	e617      	b.n	800a0f8 <PxMessagingTask+0x154>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a4c8:	9b06      	ldr	r3, [sp, #24]
 800a4ca:	1b5b      	subs	r3, r3, r5
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	445b      	add	r3, fp
 800a4d0:	5d1f      	ldrb	r7, [r3, r4]
 800a4d2:	191b      	adds	r3, r3, r4
 800a4d4:	78da      	ldrb	r2, [r3, #3]
 800a4d6:	063f      	lsls	r7, r7, #24
 800a4d8:	18bf      	adds	r7, r7, r2
 800a4da:	785a      	ldrb	r2, [r3, #1]
 800a4dc:	0412      	lsls	r2, r2, #16
 800a4de:	18bf      	adds	r7, r7, r2
 800a4e0:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a4e2:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a4e4:	0212      	lsls	r2, r2, #8
 800a4e6:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ea:	2bff      	cmp	r3, #255	; 0xff
 800a4ec:	d100      	bne.n	800a4f0 <PxMessagingTask+0x54c>
 800a4ee:	e318      	b.n	800ab22 <PxMessagingTask+0xb7e>
								for(p =0; p < numOfParams; p++){
 800a4f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	d100      	bne.n	800a4f8 <PxMessagingTask+0x554>
 800a4f6:	e36f      	b.n	800abd8 <PxMessagingTask+0xc34>
 800a4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4fc:	191e      	adds	r6, r3, r4
 800a4fe:	465b      	mov	r3, fp
 800a500:	468c      	mov	ip, r1
 800a502:	3305      	adds	r3, #5
 800a504:	4463      	add	r3, ip
 800a506:	191c      	adds	r4, r3, r4
 800a508:	0013      	movs	r3, r2
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	18e4      	adds	r4, r4, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a512:	445e      	add	r6, fp
 800a514:	3b01      	subs	r3, #1
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d90a      	bls.n	800a532 <PxMessagingTask+0x58e>
								for(p =0; p < numOfParams; p++){
 800a51c:	42b4      	cmp	r4, r6
 800a51e:	d100      	bne.n	800a522 <PxMessagingTask+0x57e>
 800a520:	e5e7      	b.n	800a0f2 <PxMessagingTask+0x14e>
 800a522:	7833      	ldrb	r3, [r6, #0]
 800a524:	3601      	adds	r6, #1
 800a526:	9309      	str	r3, [sp, #36]	; 0x24
									if(temp > 0 && temp <= NumOfPorts){
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	3b01      	subs	r3, #1
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d8f4      	bhi.n	800a51c <PxMessagingTask+0x578>
										UpdateBaudrate(temp,temp32);
 800a532:	0039      	movs	r1, r7
 800a534:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a536:	f003 f881 	bl	800d63c <UpdateBaudrate>
 800a53a:	e7ef      	b.n	800a51c <PxMessagingTask+0x578>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a53c:	2601      	movs	r6, #1
 800a53e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a540:	18e7      	adds	r7, r4, r3
 800a542:	445f      	add	r7, fp
								if(p != port)
 800a544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a546:	42b3      	cmp	r3, r6
 800a548:	d005      	beq.n	800a556 <PxMessagingTask+0x5b2>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a54a:	0030      	movs	r0, r6
 800a54c:	f003 f888 	bl	800d660 <GetUart>
 800a550:	7839      	ldrb	r1, [r7, #0]
 800a552:	f003 f891 	bl	800d678 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a556:	3601      	adds	r6, #1
 800a558:	b2f6      	uxtb	r6, r6
 800a55a:	3701      	adds	r7, #1
 800a55c:	2e06      	cmp	r6, #6
 800a55e:	d1f1      	bne.n	800a544 <PxMessagingTask+0x5a0>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a560:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a562:	f003 f87d 	bl	800d660 <GetUart>
 800a566:	9b06      	ldr	r3, [sp, #24]
 800a568:	2700      	movs	r7, #0
 800a56a:	1b5b      	subs	r3, r3, r5
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	445b      	add	r3, fp
 800a570:	191c      	adds	r4, r3, r4
 800a572:	7aa1      	ldrb	r1, [r4, #10]
 800a574:	f003 f880 	bl	800d678 <SwapUartPins>
 800a578:	4643      	mov	r3, r8
 800a57a:	5d5e      	ldrb	r6, [r3, r5]
 800a57c:	e5bc      	b.n	800a0f8 <PxMessagingTask+0x154>
							temp =numOfParams / 5;
 800a57e:	2105      	movs	r1, #5
 800a580:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a582:	f7f5 fde5 	bl	8000150 <__udivsi3>
 800a586:	b2c2      	uxtb	r2, r0
 800a588:	9209      	str	r2, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	d100      	bne.n	800a590 <PxMessagingTask+0x5ec>
 800a58e:	e65e      	b.n	800a24e <PxMessagingTask+0x2aa>
 800a590:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a592:	465b      	mov	r3, fp
 800a594:	468c      	mov	ip, r1
 800a596:	3305      	adds	r3, #5
 800a598:	4463      	add	r3, ip
 800a59a:	190e      	adds	r6, r1, r4
 800a59c:	191c      	adds	r4, r3, r4
 800a59e:	1e53      	subs	r3, r2, #1
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	009a      	lsls	r2, r3, #2
 800a5a4:	18d3      	adds	r3, r2, r3
 800a5a6:	445e      	add	r6, fp
 800a5a8:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a5aa:	4b61      	ldr	r3, [pc, #388]	; (800a730 <PxMessagingTask+0x78c>)
 800a5ac:	7830      	ldrb	r0, [r6, #0]
 800a5ae:	469c      	mov	ip, r3
 800a5b0:	3801      	subs	r0, #1
 800a5b2:	0080      	lsls	r0, r0, #2
 800a5b4:	1c71      	adds	r1, r6, #1
 800a5b6:	4460      	add	r0, ip
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	3605      	adds	r6, #5
 800a5bc:	f008 fcc3 	bl	8012f46 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a5c0:	42b4      	cmp	r4, r6
 800a5c2:	d1f2      	bne.n	800a5aa <PxMessagingTask+0x606>
							responseStatus =BOS_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e742      	b.n	800a44e <PxMessagingTask+0x4aa>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	9904      	ldr	r1, [sp, #16]
 800a5cc:	1b5b      	subs	r3, r3, r5
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	445b      	add	r3, fp
 800a5d2:	1918      	adds	r0, r3, r4
 800a5d4:	7882      	ldrb	r2, [r0, #2]
 800a5d6:	0209      	lsls	r1, r1, #8
 800a5d8:	1852      	adds	r2, r2, r1
 800a5da:	4e4b      	ldr	r6, [pc, #300]	; (800a708 <PxMessagingTask+0x764>)
 800a5dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5de:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a5e0:	468c      	mov	ip, r1
 800a5e2:	0032      	movs	r2, r6
 800a5e4:	5d19      	ldrb	r1, [r3, r4]
 800a5e6:	7843      	ldrb	r3, [r0, #1]
 800a5e8:	0209      	lsls	r1, r1, #8
 800a5ea:	185b      	adds	r3, r3, r1
 800a5ec:	4462      	add	r2, ip
 800a5ee:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e72c      	b.n	800a44e <PxMessagingTask+0x4aa>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a5f4:	4b4f      	ldr	r3, [pc, #316]	; (800a734 <PxMessagingTask+0x790>)
 800a5f6:	4a50      	ldr	r2, [pc, #320]	; (800a738 <PxMessagingTask+0x794>)
							osDelay(10);
 800a5f8:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a5fa:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4a4a      	ldr	r2, [pc, #296]	; (800a728 <PxMessagingTask+0x784>)
 800a600:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a602:	f003 f8f1 	bl	800d7e8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	4b4c      	ldr	r3, [pc, #304]	; (800a73c <PxMessagingTask+0x798>)
 800a60c:	4a4c      	ldr	r2, [pc, #304]	; (800a740 <PxMessagingTask+0x79c>)
 800a60e:	60da      	str	r2, [r3, #12]
 800a610:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a614:	46c0      	nop			; (mov r8, r8)
 800a616:	e7fd      	b.n	800a614 <PxMessagingTask+0x670>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a618:	f003 f9f2 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
 800a61c:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a61e:	f7f5 fd7b 	bl	8000118 <strlen>
 800a622:	2100      	movs	r1, #0
 800a624:	0002      	movs	r2, r0
 800a626:	0030      	movs	r0, r6
 800a628:	f008 fc96 	bl	8012f58 <memset>
 800a62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a62e:	18e1      	adds	r1, r4, r3
							if(longMessage){
 800a630:	4b44      	ldr	r3, [pc, #272]	; (800a744 <PxMessagingTask+0x7a0>)
 800a632:	4459      	add	r1, fp
 800a634:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a636:	4b44      	ldr	r3, [pc, #272]	; (800a748 <PxMessagingTask+0x7a4>)
 800a638:	8818      	ldrh	r0, [r3, #0]
 800a63a:	1830      	adds	r0, r6, r0
							if(longMessage){
 800a63c:	2f00      	cmp	r7, #0
 800a63e:	d100      	bne.n	800a642 <PxMessagingTask+0x69e>
 800a640:	e299      	b.n	800ab76 <PxMessagingTask+0xbd2>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a642:	9c0c      	ldr	r4, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800a644:	2700      	movs	r7, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a646:	0022      	movs	r2, r4
 800a648:	f008 fc7d 	bl	8012f46 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a64c:	46a4      	mov	ip, r4
 800a64e:	4b3e      	ldr	r3, [pc, #248]	; (800a748 <PxMessagingTask+0x7a4>)
 800a650:	881a      	ldrh	r2, [r3, #0]
 800a652:	4b3d      	ldr	r3, [pc, #244]	; (800a748 <PxMessagingTask+0x7a4>)
 800a654:	4462      	add	r2, ip
 800a656:	801a      	strh	r2, [r3, #0]
 800a658:	4643      	mov	r3, r8
 800a65a:	5d5e      	ldrb	r6, [r3, r5]
 800a65c:	e54c      	b.n	800a0f8 <PxMessagingTask+0x154>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a65e:	f003 f9cf 	bl	800da00 <FreeRTOS_CLIGetOutputBuffer>
 800a662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a664:	0006      	movs	r6, r0
 800a666:	18e1      	adds	r1, r4, r3
							if(dst == BOS_BROADCAST)
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	4459      	add	r1, fp
 800a66c:	2bff      	cmp	r3, #255	; 0xff
 800a66e:	d100      	bne.n	800a672 <PxMessagingTask+0x6ce>
 800a670:	e212      	b.n	800aa98 <PxMessagingTask+0xaf4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a672:	4829      	ldr	r0, [pc, #164]	; (800a718 <PxMessagingTask+0x774>)
							else if(dst == BOS_MULTICAST)
 800a674:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a676:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 800a678:	2bfe      	cmp	r3, #254	; 0xfe
 800a67a:	d100      	bne.n	800a67e <PxMessagingTask+0x6da>
 800a67c:	e274      	b.n	800ab68 <PxMessagingTask+0xbc4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a67e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a680:	f008 fc61 	bl	8012f46 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a684:	4f24      	ldr	r7, [pc, #144]	; (800a718 <PxMessagingTask+0x774>)
 800a686:	376c      	adds	r7, #108	; 0x6c
 800a688:	e001      	b.n	800a68e <PxMessagingTask+0x6ea>
							} while(xReturned != pdFALSE);
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d028      	beq.n	800a6e0 <PxMessagingTask+0x73c>
								PcPort =port;
 800a68e:	4a24      	ldr	r2, [pc, #144]	; (800a720 <PxMessagingTask+0x77c>)
 800a690:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 800a692:	4b23      	ldr	r3, [pc, #140]	; (800a720 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a694:	0038      	movs	r0, r7
								temp =PcPort;
 800a696:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 800a698:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a69a:	2299      	movs	r2, #153	; 0x99
 800a69c:	0031      	movs	r1, r6
 800a69e:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6a2:	f003 f935 	bl	800d910 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800a6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	; (800a720 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6aa:	0004      	movs	r4, r0
								PcPort =temp;
 800a6ac:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a6ae:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <PxMessagingTask+0x788>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b60      	cmp	r3, #96	; 0x60
 800a6b4:	d1e9      	bne.n	800a68a <PxMessagingTask+0x6e6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a6b6:	0030      	movs	r0, r6
 800a6b8:	f7f5 fd2e 	bl	8000118 <strlen>
 800a6bc:	0031      	movs	r1, r6
 800a6be:	0002      	movs	r2, r0
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	f008 fc40 	bl	8012f46 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a6c6:	0030      	movs	r0, r6
 800a6c8:	f7f5 fd26 	bl	8000118 <strlen>
 800a6cc:	2118      	movs	r1, #24
 800a6ce:	b282      	uxth	r2, r0
 800a6d0:	9804      	ldr	r0, [sp, #16]
 800a6d2:	f7ff f991 	bl	80099f8 <SendMessageToModule>
									osDelay(10);
 800a6d6:	200a      	movs	r0, #10
 800a6d8:	f003 f886 	bl	800d7e8 <osDelay>
							} while(xReturned != pdFALSE);
 800a6dc:	2c00      	cmp	r4, #0
 800a6de:	d1d6      	bne.n	800a68e <PxMessagingTask+0x6ea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a6e0:	480d      	ldr	r0, [pc, #52]	; (800a718 <PxMessagingTask+0x774>)
 800a6e2:	2232      	movs	r2, #50	; 0x32
 800a6e4:	306c      	adds	r0, #108	; 0x6c
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f008 fc36 	bl	8012f58 <memset>
 800a6ec:	4643      	mov	r3, r8
 800a6ee:	2700      	movs	r7, #0
 800a6f0:	5d5e      	ldrb	r6, [r3, r5]
 800a6f2:	e501      	b.n	800a0f8 <PxMessagingTask+0x154>
							ClearEEportsDir();
 800a6f4:	f7f8 ff80 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 800a6f8:	f000 fff4 	bl	800b6e4 <ClearROtopology>
							osDelay(100);
 800a6fc:	2064      	movs	r0, #100	; 0x64
 800a6fe:	f003 f873 	bl	800d7e8 <osDelay>
							indMode =IND_TOPOLOGY;
 800a702:	2302      	movs	r3, #2
 800a704:	e4f3      	b.n	800a0ee <PxMessagingTask+0x14a>
 800a706:	46c0      	nop			; (mov r8, r8)
 800a708:	20001138 	.word	0x20001138
 800a70c:	20000038 	.word	0x20000038
 800a710:	20000aa8 	.word	0x20000aa8
 800a714:	20000dd4 	.word	0x20000dd4
 800a718:	200018c4 	.word	0x200018c4
 800a71c:	08019404 	.word	0x08019404
 800a720:	20000c38 	.word	0x20000c38
 800a724:	20000c4c 	.word	0x20000c4c
 800a728:	2000114e 	.word	0x2000114e
 800a72c:	20006d34 	.word	0x20006d34
 800a730:	20001124 	.word	0x20001124
 800a734:	20007ff0 	.word	0x20007ff0
 800a738:	deadbeef 	.word	0xdeadbeef
 800a73c:	e000ed00 	.word	0xe000ed00
 800a740:	05fa0004 	.word	0x05fa0004
 800a744:	20000c5c 	.word	0x20000c5c
 800a748:	20000c5a 	.word	0x20000c5a
							temp =cMessage[port - 1][11 + shift];
 800a74c:	230b      	movs	r3, #11
 800a74e:	469c      	mov	ip, r3
 800a750:	44a4      	add	ip, r4
 800a752:	4662      	mov	r2, ip
 800a754:	9b06      	ldr	r3, [sp, #24]
 800a756:	9204      	str	r2, [sp, #16]
 800a758:	1b5b      	subs	r3, r3, r5
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	445b      	add	r3, fp
 800a75e:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 800a760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a762:	2a0f      	cmp	r2, #15
 800a764:	d100      	bne.n	800a768 <PxMessagingTask+0x7c4>
 800a766:	e22c      	b.n	800abc2 <PxMessagingTask+0xc1e>
							if(numOfParams == 17)
 800a768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 800a76a:	0019      	movs	r1, r3
							if(numOfParams == 17)
 800a76c:	2a11      	cmp	r2, #17
 800a76e:	d101      	bne.n	800a774 <PxMessagingTask+0x7d0>
 800a770:	f000 fd1b 	bl	800b1aa <PxMessagingTask+0x1206>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a774:	9f06      	ldr	r7, [sp, #24]
 800a776:	1ca2      	adds	r2, r4, #2
 800a778:	9208      	str	r2, [sp, #32]
 800a77a:	1b7a      	subs	r2, r7, r5
 800a77c:	00d2      	lsls	r2, r2, #3
 800a77e:	445a      	add	r2, fp
 800a780:	1ce0      	adds	r0, r4, #3
 800a782:	5d17      	ldrb	r7, [r2, r4]
 800a784:	9009      	str	r0, [sp, #36]	; 0x24
 800a786:	5c10      	ldrb	r0, [r2, r0]
 800a788:	1c66      	adds	r6, r4, #1
 800a78a:	063f      	lsls	r7, r7, #24
 800a78c:	183f      	adds	r7, r7, r0
 800a78e:	5d90      	ldrb	r0, [r2, r6]
 800a790:	9607      	str	r6, [sp, #28]
 800a792:	0400      	lsls	r0, r0, #16
 800a794:	183f      	adds	r7, r7, r0
 800a796:	1ca0      	adds	r0, r4, #2
 800a798:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a79a:	1d66      	adds	r6, r4, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a79c:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a79e:	9612      	str	r6, [sp, #72]	; 0x48
 800a7a0:	1da6      	adds	r6, r4, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a7a2:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a7a4:	9613      	str	r6, [sp, #76]	; 0x4c
 800a7a6:	1d20      	adds	r0, r4, #4
 800a7a8:	1de6      	adds	r6, r4, #7
 800a7aa:	9011      	str	r0, [sp, #68]	; 0x44
 800a7ac:	9614      	str	r6, [sp, #80]	; 0x50
 800a7ae:	5c16      	ldrb	r6, [r2, r0]
 800a7b0:	1d60      	adds	r0, r4, #5
 800a7b2:	5c10      	ldrb	r0, [r2, r0]
 800a7b4:	0636      	lsls	r6, r6, #24
 800a7b6:	0400      	lsls	r0, r0, #16
 800a7b8:	1836      	adds	r6, r6, r0
 800a7ba:	1de0      	adds	r0, r4, #7
 800a7bc:	5c10      	ldrb	r0, [r2, r0]
 800a7be:	1836      	adds	r6, r6, r0
 800a7c0:	1da0      	adds	r0, r4, #6
 800a7c2:	5c10      	ldrb	r0, [r2, r0]
 800a7c4:	0200      	lsls	r0, r0, #8
 800a7c6:	1836      	adds	r6, r6, r0
 800a7c8:	2009      	movs	r0, #9
 800a7ca:	4684      	mov	ip, r0
 800a7cc:	44a4      	add	ip, r4
 800a7ce:	4660      	mov	r0, ip
 800a7d0:	9015      	str	r0, [sp, #84]	; 0x54
							if(temp == false){
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	d001      	beq.n	800a7da <PxMessagingTask+0x836>
 800a7d6:	f000 fc8f 	bl	800b0f8 <PxMessagingTask+0x1154>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a7da:	5c12      	ldrb	r2, [r2, r0]
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	d00e      	beq.n	800a7fe <PxMessagingTask+0x85a>
 800a7e0:	9905      	ldr	r1, [sp, #20]
 800a7e2:	1908      	adds	r0, r1, r4
 800a7e4:	7a81      	ldrb	r1, [r0, #10]
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	d009      	beq.n	800a7fe <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a7ea:	0013      	movs	r3, r2
 800a7ec:	7a00      	ldrb	r0, [r0, #8]
 800a7ee:	0032      	movs	r2, r6
 800a7f0:	9100      	str	r1, [sp, #0]
 800a7f2:	0039      	movs	r1, r7
 800a7f4:	f7fe fdb0 	bl	8009358 <SetupDMAStreams>
 800a7f8:	9b05      	ldr	r3, [sp, #20]
 800a7fa:	9a04      	ldr	r2, [sp, #16]
 800a7fc:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <PxMessagingTask+0x874>
 800a802:	9a05      	ldr	r2, [sp, #20]
 800a804:	1911      	adds	r1, r2, r4
 800a806:	7b0a      	ldrb	r2, [r1, #12]
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d005      	beq.n	800a818 <PxMessagingTask+0x874>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a80c:	7a08      	ldrb	r0, [r1, #8]
 800a80e:	9200      	str	r2, [sp, #0]
 800a810:	0039      	movs	r1, r7
 800a812:	0032      	movs	r2, r6
 800a814:	f7fe fda0 	bl	8009358 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a818:	9b06      	ldr	r3, [sp, #24]
 800a81a:	1b5b      	subs	r3, r3, r5
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	445b      	add	r3, fp
 800a820:	191b      	adds	r3, r3, r4
 800a822:	7b5b      	ldrb	r3, [r3, #13]
 800a824:	9309      	str	r3, [sp, #36]	; 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	d100      	bne.n	800a82c <PxMessagingTask+0x888>
 800a82a:	e462      	b.n	800a0f2 <PxMessagingTask+0x14e>
 800a82c:	9b05      	ldr	r3, [sp, #20]
 800a82e:	469c      	mov	ip, r3
 800a830:	4464      	add	r4, ip
 800a832:	7ba3      	ldrb	r3, [r4, #14]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d000      	beq.n	800a83a <PxMessagingTask+0x896>
 800a838:	e1c7      	b.n	800abca <PxMessagingTask+0xc26>
 800a83a:	4642      	mov	r2, r8
 800a83c:	9309      	str	r3, [sp, #36]	; 0x24
 800a83e:	5d56      	ldrb	r6, [r2, r5]
 800a840:	001f      	movs	r7, r3
 800a842:	e459      	b.n	800a0f8 <PxMessagingTask+0x154>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a844:	9b06      	ldr	r3, [sp, #24]
 800a846:	2200      	movs	r2, #0
 800a848:	1b5e      	subs	r6, r3, r5
 800a84a:	2300      	movs	r3, #0
 800a84c:	00f6      	lsls	r6, r6, #3
 800a84e:	445e      	add	r6, fp
 800a850:	5d30      	ldrb	r0, [r6, r4]
 800a852:	2100      	movs	r1, #0
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	3319      	adds	r3, #25
 800a858:	f7fe fe6e 	bl	8009538 <SendMessageFromPort>
							osDelay(100);
 800a85c:	2064      	movs	r0, #100	; 0x64
 800a85e:	f002 ffc3 	bl	800d7e8 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a862:	4ae8      	ldr	r2, [pc, #928]	; (800ac04 <PxMessagingTask+0xc60>)
 800a864:	5d33      	ldrb	r3, [r6, r4]
 800a866:	7811      	ldrb	r1, [r2, #0]
 800a868:	9804      	ldr	r0, [sp, #16]
 800a86a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a86c:	f7f9 f968 	bl	8003b40 <remoteBootloaderUpdate>
 800a870:	4643      	mov	r3, r8
 800a872:	2700      	movs	r7, #0
 800a874:	5d5e      	ldrb	r6, [r3, r5]
 800a876:	e43f      	b.n	800a0f8 <PxMessagingTask+0x154>
							responseStatus =BOS_OK; // Initialize response
 800a878:	2300      	movs	r3, #0
 800a87a:	4ae3      	ldr	r2, [pc, #908]	; (800ac08 <PxMessagingTask+0xc64>)
 800a87c:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	1b5b      	subs	r3, r3, r5
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	445b      	add	r3, fp
 800a886:	5d1f      	ldrb	r7, [r3, r4]
 800a888:	2f00      	cmp	r7, #0
 800a88a:	d100      	bne.n	800a88e <PxMessagingTask+0x8ea>
 800a88c:	e2ad      	b.n	800adea <PxMessagingTask+0xe46>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a88e:	2f1e      	cmp	r7, #30
 800a890:	d900      	bls.n	800a894 <PxMessagingTask+0x8f0>
 800a892:	e2a6      	b.n	800ade2 <PxMessagingTask+0xe3e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a894:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a896:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a898:	0592      	lsls	r2, r2, #22
 800a89a:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a89c:	1c62      	adds	r2, r4, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a89e:	1e7e      	subs	r6, r7, #1
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8a0:	9207      	str	r2, [sp, #28]
 800a8a2:	5c8f      	ldrb	r7, [r1, r2]
 800a8a4:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8a6:	4bd9      	ldr	r3, [pc, #868]	; (800ac0c <PxMessagingTask+0xc68>)
 800a8a8:	00b6      	lsls	r6, r6, #2
 800a8aa:	599b      	ldr	r3, [r3, r6]
 800a8ac:	0c18      	lsrs	r0, r3, #16
 800a8ae:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8b0:	1e7a      	subs	r2, r7, #1
 800a8b2:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8b4:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8b6:	2a07      	cmp	r2, #7
 800a8b8:	d900      	bls.n	800a8bc <PxMessagingTask+0x918>
 800a8ba:	e1dc      	b.n	800ac76 <PxMessagingTask+0xcd2>
 800a8bc:	49d4      	ldr	r1, [pc, #848]	; (800ac10 <PxMessagingTask+0xc6c>)
 800a8be:	0092      	lsls	r2, r2, #2
 800a8c0:	588a      	ldr	r2, [r1, r2]
 800a8c2:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	4252      	negs	r2, r2
 800a8c8:	17d3      	asrs	r3, r2, #31
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	6808      	ldr	r0, [r1, #0]
 800a8ce:	6849      	ldr	r1, [r1, #4]
 800a8d0:	1812      	adds	r2, r2, r0
 800a8d2:	414b      	adcs	r3, r1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <PxMessagingTask+0x938>
 800a8d8:	f000 fc6f 	bl	800b1ba <PxMessagingTask+0x1216>
 800a8dc:	4643      	mov	r3, r8
 800a8de:	5d5e      	ldrb	r6, [r3, r5]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a8e0:	4bc9      	ldr	r3, [pc, #804]	; (800ac08 <PxMessagingTask+0xc64>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d101      	bne.n	800a8ec <PxMessagingTask+0x948>
 800a8e8:	f000 fc64 	bl	800b1b4 <PxMessagingTask+0x1210>
								responseStatus =BOS_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4ac6      	ldr	r2, [pc, #792]	; (800ac08 <PxMessagingTask+0xc64>)
 800a8f0:	2700      	movs	r7, #0
 800a8f2:	7013      	strb	r3, [r2, #0]
 800a8f4:	f7ff fc00 	bl	800a0f8 <PxMessagingTask+0x154>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a8f8:	9b06      	ldr	r3, [sp, #24]
 800a8fa:	1b5b      	subs	r3, r3, r5
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	445b      	add	r3, fp
 800a900:	5d1b      	ldrb	r3, [r3, r4]
 800a902:	e5a4      	b.n	800a44e <PxMessagingTask+0x4aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a904:	9b06      	ldr	r3, [sp, #24]
 800a906:	49bf      	ldr	r1, [pc, #764]	; (800ac04 <PxMessagingTask+0xc60>)
 800a908:	1b58      	subs	r0, r3, r5
 800a90a:	00c0      	lsls	r0, r0, #3
 800a90c:	7809      	ldrb	r1, [r1, #0]
 800a90e:	4458      	add	r0, fp
 800a910:	1902      	adds	r2, r0, r4
 800a912:	468c      	mov	ip, r1
 800a914:	7a51      	ldrb	r1, [r2, #9]
 800a916:	7ad7      	ldrb	r7, [r2, #11]
 800a918:	9104      	str	r1, [sp, #16]
 800a91a:	7b11      	ldrb	r1, [r2, #12]
 800a91c:	7a93      	ldrb	r3, [r2, #10]
 800a91e:	000e      	movs	r6, r1
 800a920:	1e71      	subs	r1, r6, #1
 800a922:	418e      	sbcs	r6, r1
 800a924:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a926:	7916      	ldrb	r6, [r2, #4]
 800a928:	7951      	ldrb	r1, [r2, #5]
 800a92a:	0636      	lsls	r6, r6, #24
 800a92c:	0409      	lsls	r1, r1, #16
 800a92e:	1871      	adds	r1, r6, r1
 800a930:	79d6      	ldrb	r6, [r2, #7]
 800a932:	1989      	adds	r1, r1, r6
 800a934:	7996      	ldrb	r6, [r2, #6]
 800a936:	0236      	lsls	r6, r6, #8
 800a938:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a93a:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a93c:	5d01      	ldrb	r1, [r0, r4]
 800a93e:	78d0      	ldrb	r0, [r2, #3]
 800a940:	0609      	lsls	r1, r1, #24
 800a942:	1809      	adds	r1, r1, r0
 800a944:	7850      	ldrb	r0, [r2, #1]
 800a946:	0400      	lsls	r0, r0, #16
 800a948:	1809      	adds	r1, r1, r0
 800a94a:	7890      	ldrb	r0, [r2, #2]
 800a94c:	0200      	lsls	r0, r0, #8
 800a94e:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a950:	9101      	str	r1, [sp, #4]
 800a952:	7a12      	ldrb	r2, [r2, #8]
 800a954:	4661      	mov	r1, ip
 800a956:	9200      	str	r2, [sp, #0]
 800a958:	9804      	ldr	r0, [sp, #16]
 800a95a:	003a      	movs	r2, r7
 800a95c:	f7ff f870 	bl	8009a40 <StartScastDMAStream>
 800a960:	f7ff fbc7 	bl	800a0f2 <PxMessagingTask+0x14e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a964:	4ba7      	ldr	r3, [pc, #668]	; (800ac04 <PxMessagingTask+0xc60>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	4293      	cmp	r3, r2
 800a96a:	d033      	beq.n	800a9d4 <PxMessagingTask+0xa30>
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d02e      	beq.n	800a9ce <PxMessagingTask+0xa2a>
				ForwardReceivedMessage(port);
 800a970:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a972:	f7ff f821 	bl	80099b8 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a976:	4ba7      	ldr	r3, [pc, #668]	; (800ac14 <PxMessagingTask+0xc70>)
 800a978:	785b      	ldrb	r3, [r3, #1]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <PxMessagingTask+0x9e0>
					indMode =IND_SHORT_BLINK;
 800a97e:	2303      	movs	r3, #3
 800a980:	4aa5      	ldr	r2, [pc, #660]	; (800ac18 <PxMessagingTask+0xc74>)
 800a982:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	2b19      	cmp	r3, #25
 800a988:	d071      	beq.n	800aa6e <PxMessagingTask+0xaca>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	2b1a      	cmp	r3, #26
 800a98e:	d000      	beq.n	800a992 <PxMessagingTask+0x9ee>
 800a990:	e435      	b.n	800a1fe <PxMessagingTask+0x25a>
					Delay_ms(100);
 800a992:	2064      	movs	r0, #100	; 0x64
 800a994:	f004 feb8 	bl	800f708 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a998:	9b06      	ldr	r3, [sp, #24]
 800a99a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a99c:	1b5b      	subs	r3, r3, r5
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	445b      	add	r3, fp
 800a9a2:	5c9b      	ldrb	r3, [r3, r2]
 800a9a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9a6:	9907      	ldr	r1, [sp, #28]
 800a9a8:	9804      	ldr	r0, [sp, #16]
 800a9aa:	f7f9 f8c9 	bl	8003b40 <remoteBootloaderUpdate>
 800a9ae:	e426      	b.n	800a1fe <PxMessagingTask+0x25a>
				longMessage =1;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4a9a      	ldr	r2, [pc, #616]	; (800ac1c <PxMessagingTask+0xc78>)
 800a9b4:	7013      	strb	r3, [r2, #0]
 800a9b6:	f7ff fb35 	bl	800a024 <PxMessagingTask+0x80>
				BOSMessaging.Acknowledgment =false;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4a95      	ldr	r2, [pc, #596]	; (800ac14 <PxMessagingTask+0xc70>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a9be:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800a9c0:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a9c2:	9804      	ldr	r0, [sp, #16]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f7ff f817 	bl	80099f8 <SendMessageToModule>
 800a9ca:	f7ff fb56 	bl	800a07a <PxMessagingTask+0xd6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d1cd      	bne.n	800a970 <PxMessagingTask+0x9cc>
 800a9d4:	4643      	mov	r3, r8
 800a9d6:	5d5e      	ldrb	r6, [r3, r5]
				if(result == BOS_OK){
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	d101      	bne.n	800a9e0 <PxMessagingTask+0xa3c>
 800a9dc:	f7ff fb75 	bl	800a0ca <PxMessagingTask+0x126>
				}
 800a9e0:	f7ff fb8a 	bl	800a0f8 <PxMessagingTask+0x154>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	2bfe      	cmp	r3, #254	; 0xfe
 800a9e8:	d1f6      	bne.n	800a9d8 <PxMessagingTask+0xa34>
 800a9ea:	9b06      	ldr	r3, [sp, #24]
 800a9ec:	4a8c      	ldr	r2, [pc, #560]	; (800ac20 <PxMessagingTask+0xc7c>)
 800a9ee:	1b5c      	subs	r4, r3, r5
 800a9f0:	00e4      	lsls	r4, r4, #3
 800a9f2:	445c      	add	r4, fp
 800a9f4:	19a3      	adds	r3, r4, r6
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a9fc:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d101      	bne.n	800aa06 <PxMessagingTask+0xa62>
 800aa02:	f7ff fb79 	bl	800a0f8 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa06:	4a86      	ldr	r2, [pc, #536]	; (800ac20 <PxMessagingTask+0xc7c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa08:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa0a:	7613      	strb	r3, [r2, #24]
 800aa0c:	4a85      	ldr	r2, [pc, #532]	; (800ac24 <PxMessagingTask+0xc80>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa0e:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa10:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa12:	f7fe ff8d 	bl	8009930 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800aa16:	4643      	mov	r3, r8
 800aa18:	2200      	movs	r2, #0
 800aa1a:	5d5e      	ldrb	r6, [r3, r5]
 800aa1c:	19a3      	adds	r3, r4, r6
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800aa22:	1eb0      	subs	r0, r6, #2
 800aa24:	5c27      	ldrb	r7, [r4, r0]
 800aa26:	9709      	str	r7, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	d01d      	beq.n	800aa68 <PxMessagingTask+0xac4>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800aa2c:	4b75      	ldr	r3, [pc, #468]	; (800ac04 <PxMessagingTask+0xc60>)
 800aa2e:	1bc0      	subs	r0, r0, r7
 800aa30:	7819      	ldrb	r1, [r3, #0]
 800aa32:	5c23      	ldrb	r3, [r4, r0]
 800aa34:	428b      	cmp	r3, r1
 800aa36:	d101      	bne.n	800aa3c <PxMessagingTask+0xa98>
 800aa38:	f7ff fb47 	bl	800a0ca <PxMessagingTask+0x126>
 800aa3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aa3e:	465a      	mov	r2, fp
 800aa40:	46a4      	mov	ip, r4
 800aa42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa44:	3201      	adds	r2, #1
 800aa46:	1e7c      	subs	r4, r7, #1
 800aa48:	4462      	add	r2, ip
 800aa4a:	b2e4      	uxtb	r4, r4
 800aa4c:	181b      	adds	r3, r3, r0
 800aa4e:	1912      	adds	r2, r2, r4
 800aa50:	445b      	add	r3, fp
 800aa52:	1812      	adds	r2, r2, r0
 800aa54:	e006      	b.n	800aa64 <PxMessagingTask+0xac0>
 800aa56:	3301      	adds	r3, #1
 800aa58:	1e58      	subs	r0, r3, #1
 800aa5a:	7800      	ldrb	r0, [r0, #0]
 800aa5c:	4288      	cmp	r0, r1
 800aa5e:	d101      	bne.n	800aa64 <PxMessagingTask+0xac0>
 800aa60:	f7ff fb33 	bl	800a0ca <PxMessagingTask+0x126>
					for(i =0; i < temp; i++){
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1f6      	bne.n	800aa56 <PxMessagingTask+0xab2>
					result =BOS_ERR_WrongID;
 800aa68:	2766      	movs	r7, #102	; 0x66
 800aa6a:	f7ff fb45 	bl	800a0f8 <PxMessagingTask+0x154>
					Delay_ms(100);
 800aa6e:	2064      	movs	r0, #100	; 0x64
 800aa70:	f004 fe4a 	bl	800f708 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800aa74:	2300      	movs	r3, #0
 800aa76:	e795      	b.n	800a9a4 <PxMessagingTask+0xa00>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa7c:	9400      	str	r4, [sp, #0]
 800aa7e:	9b07      	ldr	r3, [sp, #28]
 800aa80:	9808      	ldr	r0, [sp, #32]
 800aa82:	f000 ff6d 	bl	800b960 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aa86:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aa88:	0007      	movs	r7, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aa8a:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800aa8c:	2801      	cmp	r0, #1
 800aa8e:	d101      	bne.n	800aa94 <PxMessagingTask+0xaf0>
 800aa90:	f7ff fbf7 	bl	800a282 <PxMessagingTask+0x2de>
 800aa94:	f7ff fbb3 	bl	800a1fe <PxMessagingTask+0x25a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800aa98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa9a:	4861      	ldr	r0, [pc, #388]	; (800ac20 <PxMessagingTask+0xc7c>)
 800aa9c:	3a01      	subs	r2, #1
 800aa9e:	306c      	adds	r0, #108	; 0x6c
 800aaa0:	f008 fa51 	bl	8012f46 <memcpy>
 800aaa4:	e5ee      	b.n	800a684 <PxMessagingTask+0x6e0>
										messageParams[0] =*(__IO int8_t* )temp32;
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800aaac:	2201      	movs	r2, #1
											SendMessageToModule(src,
 800aaae:	211f      	movs	r1, #31
 800aab0:	f7ff fbe7 	bl	800a282 <PxMessagingTask+0x2de>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aab4:	4651      	mov	r1, sl
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	1212      	asrs	r2, r2, #8
 800aabe:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	1412      	asrs	r2, r2, #16
 800aac4:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aac6:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800aac8:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aaca:	161b      	asrs	r3, r3, #24
 800aacc:	70cb      	strb	r3, [r1, #3]
 800aace:	e7ee      	b.n	800aaae <PxMessagingTask+0xb0a>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800aad0:	4651      	mov	r1, sl
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800aad6:	785a      	ldrb	r2, [r3, #1]
 800aad8:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800aada:	789a      	ldrb	r2, [r3, #2]
 800aadc:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800aade:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800aae0:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800aae2:	70cb      	strb	r3, [r1, #3]
 800aae4:	e7e3      	b.n	800aaae <PxMessagingTask+0xb0a>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d100      	bne.n	800aaec <PxMessagingTask+0xb48>
 800aaea:	e3ad      	b.n	800b248 <PxMessagingTask+0x12a4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800aaec:	d801      	bhi.n	800aaf2 <PxMessagingTask+0xb4e>
 800aaee:	f7ff fb00 	bl	800a0f2 <PxMessagingTask+0x14e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800aaf2:	3b04      	subs	r3, #4
 800aaf4:	4a45      	ldr	r2, [pc, #276]	; (800ac0c <PxMessagingTask+0xc68>)
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	270f      	movs	r7, #15
 800aafa:	58d2      	ldr	r2, [r2, r3]
 800aafc:	4653      	mov	r3, sl
 800aafe:	4017      	ands	r7, r2
 800ab00:	701f      	strb	r7, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ab02:	d100      	bne.n	800ab06 <PxMessagingTask+0xb62>
 800ab04:	e397      	b.n	800b236 <PxMessagingTask+0x1292>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab06:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 800ab08:	3f01      	subs	r7, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab0a:	0c12      	lsrs	r2, r2, #16
 800ab0c:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800ab0e:	b2ff      	uxtb	r7, r7
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab10:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800ab12:	2f07      	cmp	r7, #7
 800ab14:	d901      	bls.n	800ab1a <PxMessagingTask+0xb76>
 800ab16:	f7ff faec 	bl	800a0f2 <PxMessagingTask+0x14e>
 800ab1a:	4943      	ldr	r1, [pc, #268]	; (800ac28 <PxMessagingTask+0xc84>)
 800ab1c:	00bf      	lsls	r7, r7, #2
 800ab1e:	59c9      	ldr	r1, [r1, r7]
 800ab20:	468f      	mov	pc, r1
								for(p =1; p <= NumOfPorts; p++){
 800ab22:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800ab24:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800ab26:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800ab28:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800ab2a:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800ab2c:	f002 fd86 	bl	800d63c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800ab30:	2c06      	cmp	r4, #6
 800ab32:	d1f7      	bne.n	800ab24 <PxMessagingTask+0xb80>
 800ab34:	e050      	b.n	800abd8 <PxMessagingTask+0xc34>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d001      	beq.n	800ab3e <PxMessagingTask+0xb9a>
 800ab3a:	f7ff fada 	bl	800a0f2 <PxMessagingTask+0x14e>
								messageParams[0] =0; /* change own ID */
 800ab3e:	2700      	movs	r7, #0
 800ab40:	4653      	mov	r3, sl
 800ab42:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ab44:	9b05      	ldr	r3, [sp, #20]
 800ab46:	4652      	mov	r2, sl
 800ab48:	469c      	mov	ip, r3
 800ab4a:	4464      	add	r4, ip
 800ab4c:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ab4e:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ab50:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ab52:	2303      	movs	r3, #3
 800ab54:	003a      	movs	r2, r7
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	0039      	movs	r1, r7
 800ab5a:	330d      	adds	r3, #13
 800ab5c:	f7fe fcec 	bl	8009538 <SendMessageFromPort>
 800ab60:	4643      	mov	r3, r8
 800ab62:	5d5e      	ldrb	r6, [r3, r5]
 800ab64:	f7ff fac8 	bl	800a0f8 <PxMessagingTask+0x154>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800ab68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab6c:	1a9a      	subs	r2, r3, r2
 800ab6e:	3a02      	subs	r2, #2
 800ab70:	f008 f9e9 	bl	8012f46 <memcpy>
 800ab74:	e586      	b.n	800a684 <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ab76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab78:	f008 f9e5 	bl	8012f46 <memcpy>
								longMessageLastPtr =0;
 800ab7c:	4b2b      	ldr	r3, [pc, #172]	; (800ac2c <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ab7e:	482c      	ldr	r0, [pc, #176]	; (800ac30 <PxMessagingTask+0xc8c>)
								longMessageLastPtr =0;
 800ab80:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <PxMessagingTask+0xc64>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ab84:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800ab86:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ab88:	2300      	movs	r3, #0
 800ab8a:	001a      	movs	r2, r3
 800ab8c:	0019      	movs	r1, r3
 800ab8e:	f004 f9dd 	bl	800ef4c <xTaskGenericNotify>
 800ab92:	4643      	mov	r3, r8
 800ab94:	2700      	movs	r7, #0
 800ab96:	5d5e      	ldrb	r6, [r3, r5]
 800ab98:	f7ff faae 	bl	800a0f8 <PxMessagingTask+0x154>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ab9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab9e:	f008 f9d2 	bl	8012f46 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800aba2:	2116      	movs	r1, #22
 800aba4:	0038      	movs	r0, r7
 800aba6:	f7f5 fad3 	bl	8000150 <__udivsi3>
 800abaa:	4b22      	ldr	r3, [pc, #136]	; (800ac34 <PxMessagingTask+0xc90>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800abac:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800abae:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800abb0:	4921      	ldr	r1, [pc, #132]	; (800ac38 <PxMessagingTask+0xc94>)
 800abb2:	4822      	ldr	r0, [pc, #136]	; (800ac3c <PxMessagingTask+0xc98>)
 800abb4:	f008 f9c7 	bl	8012f46 <memcpy>
								longMessageLastPtr =0;
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <PxMessagingTask+0xc88>)
 800abba:	2700      	movs	r7, #0
 800abbc:	801c      	strh	r4, [r3, #0]
 800abbe:	f7ff fa9b 	bl	800a0f8 <PxMessagingTask+0x154>
								temp =cMessage[port - 1][13 + shift];
 800abc2:	9a05      	ldr	r2, [sp, #20]
 800abc4:	1912      	adds	r2, r2, r4
 800abc6:	7b51      	ldrb	r1, [r2, #13]
 800abc8:	e5d4      	b.n	800a774 <PxMessagingTask+0x7d0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800abca:	7a20      	ldrb	r0, [r4, #8]
 800abcc:	0032      	movs	r2, r6
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	0039      	movs	r1, r7
 800abd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd4:	f7fe fbc0 	bl	8009358 <SetupDMAStreams>
 800abd8:	4643      	mov	r3, r8
 800abda:	5d5e      	ldrb	r6, [r3, r5]
 800abdc:	2300      	movs	r3, #0
 800abde:	9309      	str	r3, [sp, #36]	; 0x24
 800abe0:	001f      	movs	r7, r3
 800abe2:	f7ff fa89 	bl	800a0f8 <PxMessagingTask+0x154>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800abe6:	4651      	mov	r1, sl
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	0a12      	lsrs	r2, r2, #8
 800abf0:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	0c12      	lsrs	r2, r2, #16
 800abf6:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800abf8:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800abfa:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800abfc:	0e1b      	lsrs	r3, r3, #24
 800abfe:	70cb      	strb	r3, [r1, #3]
 800ac00:	e755      	b.n	800aaae <PxMessagingTask+0xb0a>
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	20000aa8 	.word	0x20000aa8
 800ac08:	20000c4c 	.word	0x20000c4c
 800ac0c:	20006d3c 	.word	0x20006d3c
 800ac10:	08017cac 	.word	0x08017cac
 800ac14:	20006d34 	.word	0x20006d34
 800ac18:	2000114e 	.word	0x2000114e
 800ac1c:	20000c5c 	.word	0x20000c5c
 800ac20:	200018c4 	.word	0x200018c4
 800ac24:	20000c58 	.word	0x20000c58
 800ac28:	08017ccc 	.word	0x08017ccc
 800ac2c:	20000c5a 	.word	0x20000c5a
 800ac30:	20001720 	.word	0x20001720
 800ac34:	20000010 	.word	0x20000010
 800ac38:	2000199c 	.word	0x2000199c
 800ac3c:	20000ee4 	.word	0x20000ee4
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac40:	4651      	mov	r1, sl
 800ac42:	881a      	ldrh	r2, [r3, #0]
 800ac44:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac46:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800ac48:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac4a:	b21b      	sxth	r3, r3
 800ac4c:	121b      	asrs	r3, r3, #8
 800ac4e:	704b      	strb	r3, [r1, #1]
 800ac50:	e72d      	b.n	800aaae <PxMessagingTask+0xb0a>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac52:	4651      	mov	r1, sl
 800ac54:	881a      	ldrh	r2, [r3, #0]
 800ac56:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac58:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800ac5a:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac5c:	0a1b      	lsrs	r3, r3, #8
 800ac5e:	704b      	strb	r3, [r1, #1]
 800ac60:	e725      	b.n	800aaae <PxMessagingTask+0xb0a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d02c      	beq.n	800acc0 <PxMessagingTask+0xd1c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800ac66:	9b05      	ldr	r3, [sp, #20]
 800ac68:	1919      	adds	r1, r3, r4
 800ac6a:	78ca      	ldrb	r2, [r1, #3]
 800ac6c:	788b      	ldrb	r3, [r1, #2]
 800ac6e:	0212      	lsls	r2, r2, #8
 800ac70:	189b      	adds	r3, r3, r2
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	8003      	strh	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800ac76:	9905      	ldr	r1, [sp, #20]
 800ac78:	9807      	ldr	r0, [sp, #28]
 800ac7a:	5d0b      	ldrb	r3, [r1, r4]
 800ac7c:	5c09      	ldrb	r1, [r1, r0]
 800ac7e:	200f      	movs	r0, #15
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4ad8      	ldr	r2, [pc, #864]	; (800afe4 <PxMessagingTask+0x1040>)
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	58d2      	ldr	r2, [r2, r3]
 800ac88:	4010      	ands	r0, r2
 800ac8a:	4288      	cmp	r0, r1
 800ac8c:	d008      	beq.n	800aca0 <PxMessagingTask+0xcfc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ac8e:	48d6      	ldr	r0, [pc, #856]	; (800afe8 <PxMessagingTask+0x1044>)
 800ac90:	4684      	mov	ip, r0
 800ac92:	4461      	add	r1, ip
 800ac94:	400a      	ands	r2, r1
 800ac96:	49d3      	ldr	r1, [pc, #844]	; (800afe4 <PxMessagingTask+0x1040>)
 800ac98:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ac9a:	2314      	movs	r3, #20
 800ac9c:	4ad3      	ldr	r2, [pc, #844]	; (800afec <PxMessagingTask+0x1048>)
 800ac9e:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800aca0:	2240      	movs	r2, #64	; 0x40
 800aca2:	4bd3      	ldr	r3, [pc, #844]	; (800aff0 <PxMessagingTask+0x104c>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	4393      	bics	r3, r2
 800aca8:	2b20      	cmp	r3, #32
 800acaa:	d001      	beq.n	800acb0 <PxMessagingTask+0xd0c>
 800acac:	f7ff fa21 	bl	800a0f2 <PxMessagingTask+0x14e>
								messageParams[0] =responseStatus;
 800acb0:	4652      	mov	r2, sl
 800acb2:	4bce      	ldr	r3, [pc, #824]	; (800afec <PxMessagingTask+0x1048>)
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800acb4:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800acba:	2201      	movs	r2, #1
 800acbc:	f7ff fae1 	bl	800a282 <PxMessagingTask+0x2de>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800acc0:	2002      	movs	r0, #2
 800acc2:	f007 fef3 	bl	8012aac <malloc>
												if(temp32 != 0){
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d01e      	beq.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acca:	0403      	lsls	r3, r0, #16
 800accc:	4ac5      	ldr	r2, [pc, #788]	; (800afe4 <PxMessagingTask+0x1040>)
 800acce:	3304      	adds	r3, #4
 800acd0:	5193      	str	r3, [r2, r6]
 800acd2:	e7c8      	b.n	800ac66 <PxMessagingTask+0xcc2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d025      	beq.n	800ad24 <PxMessagingTask+0xd80>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	191b      	adds	r3, r3, r4
 800acdc:	789b      	ldrb	r3, [r3, #2]
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	7003      	strb	r3, [r0, #0]
 800ace2:	e7c8      	b.n	800ac76 <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d013      	beq.n	800ad10 <PxMessagingTask+0xd6c>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	1919      	adds	r1, r3, r4
 800acec:	78ca      	ldrb	r2, [r1, #3]
 800acee:	788b      	ldrb	r3, [r1, #2]
 800acf0:	0212      	lsls	r2, r2, #8
 800acf2:	189b      	adds	r3, r3, r2
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	8003      	strh	r3, [r0, #0]
 800acf8:	e7bd      	b.n	800ac76 <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01c      	beq.n	800ad38 <PxMessagingTask+0xd94>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800acfe:	9b05      	ldr	r3, [sp, #20]
 800ad00:	191b      	adds	r3, r3, r4
 800ad02:	789b      	ldrb	r3, [r3, #2]
 800ad04:	7003      	strb	r3, [r0, #0]
 800ad06:	e7b6      	b.n	800ac76 <PxMessagingTask+0xcd2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ad08:	2312      	movs	r3, #18
 800ad0a:	4ab8      	ldr	r2, [pc, #736]	; (800afec <PxMessagingTask+0x1048>)
 800ad0c:	7013      	strb	r3, [r2, #0]
 800ad0e:	e7b2      	b.n	800ac76 <PxMessagingTask+0xcd2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ad10:	2002      	movs	r0, #2
 800ad12:	f007 fecb 	bl	8012aac <malloc>
												if(temp32 != 0){
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d0f6      	beq.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad1a:	0403      	lsls	r3, r0, #16
 800ad1c:	4ab1      	ldr	r2, [pc, #708]	; (800afe4 <PxMessagingTask+0x1040>)
 800ad1e:	3303      	adds	r3, #3
 800ad20:	5193      	str	r3, [r2, r6]
 800ad22:	e7e1      	b.n	800ace8 <PxMessagingTask+0xd44>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ad24:	2001      	movs	r0, #1
 800ad26:	f007 fec1 	bl	8012aac <malloc>
												if(temp32 != 0){
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d0ec      	beq.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad2e:	0403      	lsls	r3, r0, #16
 800ad30:	4aac      	ldr	r2, [pc, #688]	; (800afe4 <PxMessagingTask+0x1040>)
 800ad32:	3302      	adds	r3, #2
 800ad34:	5193      	str	r3, [r2, r6]
 800ad36:	e7cf      	b.n	800acd8 <PxMessagingTask+0xd34>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800ad38:	2001      	movs	r0, #1
 800ad3a:	f007 feb7 	bl	8012aac <malloc>
												if(temp32 != 0){
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0e2      	beq.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad42:	0403      	lsls	r3, r0, #16
 800ad44:	19df      	adds	r7, r3, r7
 800ad46:	4ba7      	ldr	r3, [pc, #668]	; (800afe4 <PxMessagingTask+0x1040>)
 800ad48:	519f      	str	r7, [r3, r6]
 800ad4a:	e7d8      	b.n	800acfe <PxMessagingTask+0xd5a>
										ADCSelectChannel(ADCPort,"top");
 800ad4c:	49a9      	ldr	r1, [pc, #676]	; (800aff4 <PxMessagingTask+0x1050>)
 800ad4e:	f7fd ff81 	bl	8008c54 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800ad52:	4ba9      	ldr	r3, [pc, #676]	; (800aff8 <PxMessagingTask+0x1054>)
 800ad54:	4aa8      	ldr	r2, [pc, #672]	; (800aff8 <PxMessagingTask+0x1054>)
 800ad56:	5d98      	ldrb	r0, [r3, r6]
 800ad58:	3248      	adds	r2, #72	; 0x48
 800ad5a:	49a6      	ldr	r1, [pc, #664]	; (800aff4 <PxMessagingTask+0x1050>)
 800ad5c:	f7fd ffca 	bl	8008cf4 <ReadADCChannel>
 800ad60:	f7ff fa04 	bl	800a16c <PxMessagingTask+0x1c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d100      	bne.n	800ad6a <PxMessagingTask+0xdc6>
 800ad68:	e085      	b.n	800ae76 <PxMessagingTask+0xed2>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ad6a:	9b05      	ldr	r3, [sp, #20]
 800ad6c:	191a      	adds	r2, r3, r4
 800ad6e:	78d3      	ldrb	r3, [r2, #3]
 800ad70:	7911      	ldrb	r1, [r2, #4]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	0409      	lsls	r1, r1, #16
 800ad76:	185b      	adds	r3, r3, r1
 800ad78:	7891      	ldrb	r1, [r2, #2]
 800ad7a:	7952      	ldrb	r2, [r2, #5]
 800ad7c:	185b      	adds	r3, r3, r1
 800ad7e:	0612      	lsls	r2, r2, #24
 800ad80:	189b      	adds	r3, r3, r2
 800ad82:	464a      	mov	r2, r9
 800ad84:	4649      	mov	r1, r9
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ad8c:	6003      	str	r3, [r0, #0]
 800ad8e:	e772      	b.n	800ac76 <PxMessagingTask+0xcd2>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ad90:	9b05      	ldr	r3, [sp, #20]
 800ad92:	469c      	mov	ip, r3
 800ad94:	4464      	add	r4, ip
 800ad96:	78a3      	ldrb	r3, [r4, #2]
 800ad98:	78e2      	ldrb	r2, [r4, #3]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	0412      	lsls	r2, r2, #16
 800ad9e:	189b      	adds	r3, r3, r2
 800ada0:	7862      	ldrb	r2, [r4, #1]
 800ada2:	189b      	adds	r3, r3, r2
 800ada4:	7922      	ldrb	r2, [r4, #4]
 800ada6:	0612      	lsls	r2, r2, #24
 800ada8:	189b      	adds	r3, r3, r2
 800adaa:	4a93      	ldr	r2, [pc, #588]	; (800aff8 <PxMessagingTask+0x1054>)
 800adac:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800adae:	79a3      	ldrb	r3, [r4, #6]
 800adb0:	79e2      	ldrb	r2, [r4, #7]
 800adb2:	021b      	lsls	r3, r3, #8
 800adb4:	0412      	lsls	r2, r2, #16
 800adb6:	189b      	adds	r3, r3, r2
 800adb8:	7962      	ldrb	r2, [r4, #5]
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	7a22      	ldrb	r2, [r4, #8]
 800adbe:	0612      	lsls	r2, r2, #24
 800adc0:	189b      	adds	r3, r3, r2
 800adc2:	4a8d      	ldr	r2, [pc, #564]	; (800aff8 <PxMessagingTask+0x1054>)
 800adc4:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800adc6:	7aa3      	ldrb	r3, [r4, #10]
 800adc8:	7ae2      	ldrb	r2, [r4, #11]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	0412      	lsls	r2, r2, #16
 800adce:	189b      	adds	r3, r3, r2
 800add0:	7a62      	ldrb	r2, [r4, #9]
 800add2:	189b      	adds	r3, r3, r2
 800add4:	7b22      	ldrb	r2, [r4, #12]
 800add6:	0612      	lsls	r2, r2, #24
 800add8:	189b      	adds	r3, r3, r2
 800adda:	4a87      	ldr	r2, [pc, #540]	; (800aff8 <PxMessagingTask+0x1054>)
 800addc:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 800adde:	f7ff f9f0 	bl	800a1c2 <PxMessagingTask+0x21e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ade2:	2313      	movs	r3, #19
 800ade4:	4a81      	ldr	r2, [pc, #516]	; (800afec <PxMessagingTask+0x1048>)
 800ade6:	7013      	strb	r3, [r2, #0]
 800ade8:	e75a      	b.n	800aca0 <PxMessagingTask+0xcfc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	191b      	adds	r3, r3, r4
 800adee:	789e      	ldrb	r6, [r3, #2]
 800adf0:	78da      	ldrb	r2, [r3, #3]
 800adf2:	0636      	lsls	r6, r6, #24
 800adf4:	0412      	lsls	r2, r2, #16
 800adf6:	18b6      	adds	r6, r6, r2
 800adf8:	795a      	ldrb	r2, [r3, #5]
 800adfa:	18b6      	adds	r6, r6, r2
 800adfc:	791a      	ldrb	r2, [r3, #4]
 800adfe:	0212      	lsls	r2, r2, #8
 800ae00:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800ae02:	22e0      	movs	r2, #224	; 0xe0
 800ae04:	0612      	lsls	r2, r2, #24
 800ae06:	18b1      	adds	r1, r6, r2
 800ae08:	4a7c      	ldr	r2, [pc, #496]	; (800affc <PxMessagingTask+0x1058>)
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	d900      	bls.n	800ae10 <PxMessagingTask+0xe6c>
 800ae0e:	e08b      	b.n	800af28 <PxMessagingTask+0xf84>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b07      	cmp	r3, #7
 800ae18:	d900      	bls.n	800ae1c <PxMessagingTask+0xe78>
 800ae1a:	e741      	b.n	800aca0 <PxMessagingTask+0xcfc>
 800ae1c:	4a78      	ldr	r2, [pc, #480]	; (800b000 <PxMessagingTask+0x105c>)
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	58d3      	ldr	r3, [r2, r3]
 800ae22:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ae24:	9b05      	ldr	r3, [sp, #20]
 800ae26:	469c      	mov	ip, r3
 800ae28:	4464      	add	r4, ip
 800ae2a:	78a3      	ldrb	r3, [r4, #2]
 800ae2c:	78e2      	ldrb	r2, [r4, #3]
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	0412      	lsls	r2, r2, #16
 800ae32:	189b      	adds	r3, r3, r2
 800ae34:	7862      	ldrb	r2, [r4, #1]
 800ae36:	189b      	adds	r3, r3, r2
 800ae38:	7922      	ldrb	r2, [r4, #4]
 800ae3a:	0612      	lsls	r2, r2, #24
 800ae3c:	189b      	adds	r3, r3, r2
 800ae3e:	4a6e      	ldr	r2, [pc, #440]	; (800aff8 <PxMessagingTask+0x1054>)
 800ae40:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ae42:	79a3      	ldrb	r3, [r4, #6]
 800ae44:	79e2      	ldrb	r2, [r4, #7]
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	0412      	lsls	r2, r2, #16
 800ae4a:	189b      	adds	r3, r3, r2
 800ae4c:	7962      	ldrb	r2, [r4, #5]
 800ae4e:	189b      	adds	r3, r3, r2
 800ae50:	7a22      	ldrb	r2, [r4, #8]
 800ae52:	0612      	lsls	r2, r2, #24
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	4a68      	ldr	r2, [pc, #416]	; (800aff8 <PxMessagingTask+0x1054>)
 800ae58:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ae5a:	7aa3      	ldrb	r3, [r4, #10]
 800ae5c:	7ae2      	ldrb	r2, [r4, #11]
 800ae5e:	021b      	lsls	r3, r3, #8
 800ae60:	0412      	lsls	r2, r2, #16
 800ae62:	189b      	adds	r3, r3, r2
 800ae64:	7a62      	ldrb	r2, [r4, #9]
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	7b22      	ldrb	r2, [r4, #12]
 800ae6a:	0612      	lsls	r2, r2, #24
 800ae6c:	189b      	adds	r3, r3, r2
 800ae6e:	4a62      	ldr	r2, [pc, #392]	; (800aff8 <PxMessagingTask+0x1054>)
 800ae70:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 800ae72:	f7ff f9a6 	bl	800a1c2 <PxMessagingTask+0x21e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800ae76:	2004      	movs	r0, #4
 800ae78:	f007 fe18 	bl	8012aac <malloc>
												if(temp32 != 0){
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d100      	bne.n	800ae82 <PxMessagingTask+0xede>
 800ae80:	e742      	b.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ae82:	0403      	lsls	r3, r0, #16
 800ae84:	4a57      	ldr	r2, [pc, #348]	; (800afe4 <PxMessagingTask+0x1040>)
 800ae86:	3307      	adds	r3, #7
 800ae88:	5193      	str	r3, [r2, r6]
 800ae8a:	e76e      	b.n	800ad6a <PxMessagingTask+0xdc6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	469c      	mov	ip, r3
 800ae90:	4464      	add	r4, ip
 800ae92:	79e3      	ldrb	r3, [r4, #7]
 800ae94:	79a2      	ldrb	r2, [r4, #6]
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	7a22      	ldrb	r2, [r4, #8]
 800ae9c:	0412      	lsls	r2, r2, #16
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	7a62      	ldrb	r2, [r4, #9]
 800aea2:	0612      	lsls	r2, r2, #24
 800aea4:	189b      	adds	r3, r3, r2
 800aea6:	6033      	str	r3, [r6, #0]
											break;
 800aea8:	e6fa      	b.n	800aca0 <PxMessagingTask+0xcfc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	469c      	mov	ip, r3
 800aeae:	4464      	add	r4, ip
 800aeb0:	79e3      	ldrb	r3, [r4, #7]
 800aeb2:	7a22      	ldrb	r2, [r4, #8]
 800aeb4:	021b      	lsls	r3, r3, #8
 800aeb6:	0412      	lsls	r2, r2, #16
 800aeb8:	189b      	adds	r3, r3, r2
 800aeba:	79a2      	ldrb	r2, [r4, #6]
 800aebc:	e7ef      	b.n	800ae9e <PxMessagingTask+0xefa>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	469c      	mov	ip, r3
 800aec2:	4464      	add	r4, ip
 800aec4:	79e2      	ldrb	r2, [r4, #7]
 800aec6:	79a3      	ldrb	r3, [r4, #6]
 800aec8:	0212      	lsls	r2, r2, #8
 800aeca:	189b      	adds	r3, r3, r2
 800aecc:	b21b      	sxth	r3, r3
 800aece:	8033      	strh	r3, [r6, #0]
											break;
 800aed0:	e6e6      	b.n	800aca0 <PxMessagingTask+0xcfc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	469c      	mov	ip, r3
 800aed6:	4464      	add	r4, ip
 800aed8:	79e2      	ldrb	r2, [r4, #7]
 800aeda:	79a3      	ldrb	r3, [r4, #6]
 800aedc:	0212      	lsls	r2, r2, #8
 800aede:	189b      	adds	r3, r3, r2
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	8033      	strh	r3, [r6, #0]
											break;
 800aee4:	e6dc      	b.n	800aca0 <PxMessagingTask+0xcfc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	469c      	mov	ip, r3
 800aeea:	2306      	movs	r3, #6
 800aeec:	4464      	add	r4, ip
 800aeee:	56e3      	ldrsb	r3, [r4, r3]
 800aef0:	7033      	strb	r3, [r6, #0]
											break;
 800aef2:	e6d5      	b.n	800aca0 <PxMessagingTask+0xcfc>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	469c      	mov	ip, r3
 800aef8:	4464      	add	r4, ip
 800aefa:	79a3      	ldrb	r3, [r4, #6]
 800aefc:	7033      	strb	r3, [r6, #0]
											break;
 800aefe:	e6cf      	b.n	800aca0 <PxMessagingTask+0xcfc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	4649      	mov	r1, r9
 800af04:	469c      	mov	ip, r3
 800af06:	4464      	add	r4, ip
 800af08:	79e3      	ldrb	r3, [r4, #7]
 800af0a:	7a22      	ldrb	r2, [r4, #8]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	0412      	lsls	r2, r2, #16
 800af10:	189b      	adds	r3, r3, r2
 800af12:	79a2      	ldrb	r2, [r4, #6]
 800af14:	189b      	adds	r3, r3, r2
 800af16:	7a62      	ldrb	r2, [r4, #9]
 800af18:	0612      	lsls	r2, r2, #24
 800af1a:	189b      	adds	r3, r3, r2
 800af1c:	464a      	mov	r2, r9
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	2200      	movs	r2, #0
 800af22:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800af24:	6033      	str	r3, [r6, #0]
											break;
 800af26:	e6bb      	b.n	800aca0 <PxMessagingTask+0xcfc>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800af28:	23f8      	movs	r3, #248	; 0xf8
 800af2a:	4a36      	ldr	r2, [pc, #216]	; (800b004 <PxMessagingTask+0x1060>)
 800af2c:	061b      	lsls	r3, r3, #24
 800af2e:	18f3      	adds	r3, r6, r3
 800af30:	4293      	cmp	r3, r2
 800af32:	d910      	bls.n	800af56 <PxMessagingTask+0xfb2>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800af34:	2215      	movs	r2, #21
 800af36:	4b2d      	ldr	r3, [pc, #180]	; (800afec <PxMessagingTask+0x1048>)
 800af38:	701a      	strb	r2, [r3, #0]
 800af3a:	e6b1      	b.n	800aca0 <PxMessagingTask+0xcfc>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800af3c:	230a      	movs	r3, #10
 800af3e:	4932      	ldr	r1, [pc, #200]	; (800b008 <PxMessagingTask+0x1064>)
 800af40:	9a04      	ldr	r2, [sp, #16]
 800af42:	468c      	mov	ip, r1
 800af44:	4353      	muls	r3, r2
 800af46:	4831      	ldr	r0, [pc, #196]	; (800b00c <PxMessagingTask+0x1068>)
 800af48:	4463      	add	r3, ip
 800af4a:	4931      	ldr	r1, [pc, #196]	; (800b010 <PxMessagingTask+0x106c>)
 800af4c:	301c      	adds	r0, #28
 800af4e:	f008 f9fd 	bl	801334c <sprintf>
 800af52:	f7ff fa6c 	bl	800a42e <PxMessagingTask+0x48a>
									HAL_FLASH_Unlock();
 800af56:	f005 fdb7 	bl	8010ac8 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	2b22      	cmp	r3, #34	; 0x22
 800af5e:	d100      	bne.n	800af62 <PxMessagingTask+0xfbe>
 800af60:	e094      	b.n	800b08c <PxMessagingTask+0x10e8>
									if(responseStatus == BOS_OK){
 800af62:	4b22      	ldr	r3, [pc, #136]	; (800afec <PxMessagingTask+0x1048>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d15c      	bne.n	800b024 <PxMessagingTask+0x1080>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800af6a:	9b05      	ldr	r3, [sp, #20]
 800af6c:	191b      	adds	r3, r3, r4
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	3b01      	subs	r3, #1
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b07      	cmp	r3, #7
 800af76:	d855      	bhi.n	800b024 <PxMessagingTask+0x1080>
 800af78:	4a26      	ldr	r2, [pc, #152]	; (800b014 <PxMessagingTask+0x1070>)
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	58d3      	ldr	r3, [r2, r3]
 800af7e:	469f      	mov	pc, r3
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800af80:	2b00      	cmp	r3, #0
 800af82:	d018      	beq.n	800afb6 <PxMessagingTask+0x1012>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800af84:	9b05      	ldr	r3, [sp, #20]
 800af86:	191a      	adds	r2, r3, r4
 800af88:	78d3      	ldrb	r3, [r2, #3]
 800af8a:	7891      	ldrb	r1, [r2, #2]
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	185b      	adds	r3, r3, r1
 800af90:	7911      	ldrb	r1, [r2, #4]
 800af92:	0409      	lsls	r1, r1, #16
 800af94:	7952      	ldrb	r2, [r2, #5]
 800af96:	185b      	adds	r3, r3, r1
 800af98:	0612      	lsls	r2, r2, #24
 800af9a:	189b      	adds	r3, r3, r2
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	e66a      	b.n	800ac76 <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d013      	beq.n	800afcc <PxMessagingTask+0x1028>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800afa4:	9b05      	ldr	r3, [sp, #20]
 800afa6:	191a      	adds	r2, r3, r4
 800afa8:	78d3      	ldrb	r3, [r2, #3]
 800afaa:	7911      	ldrb	r1, [r2, #4]
 800afac:	021b      	lsls	r3, r3, #8
 800afae:	0409      	lsls	r1, r1, #16
 800afb0:	185b      	adds	r3, r3, r1
 800afb2:	7891      	ldrb	r1, [r2, #2]
 800afb4:	e7ee      	b.n	800af94 <PxMessagingTask+0xff0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800afb6:	2004      	movs	r0, #4
 800afb8:	f007 fd78 	bl	8012aac <malloc>
												if(temp32 != 0){
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d100      	bne.n	800afc2 <PxMessagingTask+0x101e>
 800afc0:	e6a2      	b.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800afc2:	0403      	lsls	r3, r0, #16
 800afc4:	4a07      	ldr	r2, [pc, #28]	; (800afe4 <PxMessagingTask+0x1040>)
 800afc6:	3306      	adds	r3, #6
 800afc8:	5193      	str	r3, [r2, r6]
 800afca:	e7db      	b.n	800af84 <PxMessagingTask+0xfe0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800afcc:	2004      	movs	r0, #4
 800afce:	f007 fd6d 	bl	8012aac <malloc>
												if(temp32 != 0){
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d100      	bne.n	800afd8 <PxMessagingTask+0x1034>
 800afd6:	e697      	b.n	800ad08 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800afd8:	0403      	lsls	r3, r0, #16
 800afda:	4a02      	ldr	r2, [pc, #8]	; (800afe4 <PxMessagingTask+0x1040>)
 800afdc:	3305      	adds	r3, #5
 800afde:	5193      	str	r3, [r2, r6]
 800afe0:	e7e0      	b.n	800afa4 <PxMessagingTask+0x1000>
 800afe2:	46c0      	nop			; (mov r8, r8)
 800afe4:	20006d3c 	.word	0x20006d3c
 800afe8:	0000fff0 	.word	0x0000fff0
 800afec:	20000c4c 	.word	0x20000c4c
 800aff0:	20006d34 	.word	0x20006d34
 800aff4:	08018928 	.word	0x08018928
 800aff8:	20001944 	.word	0x20001944
 800affc:	00007fff 	.word	0x00007fff
 800b000:	08017cec 	.word	0x08017cec
 800b004:	0001ffff 	.word	0x0001ffff
 800b008:	20000dd4 	.word	0x20000dd4
 800b00c:	200018c4 	.word	0x200018c4
 800b010:	08019418 	.word	0x08019418
 800b014:	08017d0c 	.word	0x08017d0c
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b018:	6833      	ldr	r3, [r6, #0]
 800b01a:	3301      	adds	r3, #1
 800b01c:	d00c      	beq.n	800b038 <PxMessagingTask+0x1094>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b01e:	2316      	movs	r3, #22
 800b020:	4ad6      	ldr	r2, [pc, #856]	; (800b37c <PxMessagingTask+0x13d8>)
 800b022:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 800b024:	f005 fd62 	bl	8010aec <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d100      	bne.n	800b030 <PxMessagingTask+0x108c>
 800b02e:	e637      	b.n	800aca0 <PxMessagingTask+0xcfc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b030:	2316      	movs	r3, #22
 800b032:	4ad2      	ldr	r2, [pc, #840]	; (800b37c <PxMessagingTask+0x13d8>)
 800b034:	7013      	strb	r3, [r2, #0]
 800b036:	e633      	b.n	800aca0 <PxMessagingTask+0xcfc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	4649      	mov	r1, r9
 800b03c:	469c      	mov	ip, r3
 800b03e:	4464      	add	r4, ip
 800b040:	79e2      	ldrb	r2, [r4, #7]
 800b042:	7a23      	ldrb	r3, [r4, #8]
 800b044:	0212      	lsls	r2, r2, #8
 800b046:	041b      	lsls	r3, r3, #16
 800b048:	18d2      	adds	r2, r2, r3
 800b04a:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b04c:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b04e:	18d2      	adds	r2, r2, r3
 800b050:	7a63      	ldrb	r3, [r4, #9]
 800b052:	061b      	lsls	r3, r3, #24
 800b054:	18d2      	adds	r2, r2, r3
 800b056:	2300      	movs	r3, #0
 800b058:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b05a:	0031      	movs	r1, r6
 800b05c:	f005 fd94 	bl	8010b88 <HAL_FLASH_Program>
 800b060:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b062:	e7df      	b.n	800b024 <PxMessagingTask+0x1080>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b064:	8832      	ldrh	r2, [r6, #0]
 800b066:	4bc6      	ldr	r3, [pc, #792]	; (800b380 <PxMessagingTask+0x13dc>)
 800b068:	429a      	cmp	r2, r3
 800b06a:	d1d8      	bne.n	800b01e <PxMessagingTask+0x107a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b06c:	9b05      	ldr	r3, [sp, #20]
 800b06e:	469c      	mov	ip, r3
 800b070:	4464      	add	r4, ip
 800b072:	79e2      	ldrb	r2, [r4, #7]
 800b074:	79a3      	ldrb	r3, [r4, #6]
 800b076:	0212      	lsls	r2, r2, #8
 800b078:	18d2      	adds	r2, r2, r3
 800b07a:	17d3      	asrs	r3, r2, #31
 800b07c:	4649      	mov	r1, r9
													status =HAL_FLASH_Program(
 800b07e:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b080:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b082:	0031      	movs	r1, r6
 800b084:	f005 fd80 	bl	8010b88 <HAL_FLASH_Program>
 800b088:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b08a:	e7cb      	b.n	800b024 <PxMessagingTask+0x1080>
										erase.NbPages =1;
 800b08c:	3b21      	subs	r3, #33	; 0x21
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b08e:	a918      	add	r1, sp, #96	; 0x60
 800b090:	a819      	add	r0, sp, #100	; 0x64
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b092:	9719      	str	r7, [sp, #100]	; 0x64
										erase.PageAddress =temp32;
 800b094:	961a      	str	r6, [sp, #104]	; 0x68
										erase.NbPages =1;
 800b096:	931b      	str	r3, [sp, #108]	; 0x6c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b098:	f005 fdda 	bl	8010c50 <HAL_FLASHEx_Erase>
 800b09c:	900f      	str	r0, [sp, #60]	; 0x3c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d103      	bne.n	800b0aa <PxMessagingTask+0x1106>
 800b0a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	d100      	bne.n	800b0aa <PxMessagingTask+0x1106>
 800b0a8:	e75b      	b.n	800af62 <PxMessagingTask+0xfbe>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b0aa:	2316      	movs	r3, #22
 800b0ac:	4ab3      	ldr	r2, [pc, #716]	; (800b37c <PxMessagingTask+0x13d8>)
 800b0ae:	7013      	strb	r3, [r2, #0]
 800b0b0:	e757      	b.n	800af62 <PxMessagingTask+0xfbe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b0b2:	8832      	ldrh	r2, [r6, #0]
 800b0b4:	4bb2      	ldr	r3, [pc, #712]	; (800b380 <PxMessagingTask+0x13dc>)
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d1b1      	bne.n	800b01e <PxMessagingTask+0x107a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	469c      	mov	ip, r3
 800b0be:	4464      	add	r4, ip
 800b0c0:	79a2      	ldrb	r2, [r4, #6]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e7da      	b.n	800b07c <PxMessagingTask+0x10d8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b0c6:	6833      	ldr	r3, [r6, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	d1a8      	bne.n	800b01e <PxMessagingTask+0x107a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	469c      	mov	ip, r3
 800b0d2:	4464      	add	r4, ip
 800b0d4:	79e2      	ldrb	r2, [r4, #7]
 800b0d6:	7a23      	ldrb	r3, [r4, #8]
 800b0d8:	0212      	lsls	r2, r2, #8
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	18d2      	adds	r2, r2, r3
 800b0de:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b0e0:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0e2:	18d2      	adds	r2, r2, r3
 800b0e4:	7a63      	ldrb	r3, [r4, #9]
 800b0e6:	061b      	lsls	r3, r3, #24
 800b0e8:	18d2      	adds	r2, r2, r3
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0ee:	0031      	movs	r1, r6
 800b0f0:	f005 fd4a 	bl	8010b88 <HAL_FLASH_Program>
 800b0f4:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b0f6:	e795      	b.n	800b024 <PxMessagingTask+0x1080>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800b0f8:	2338      	movs	r3, #56	; 0x38
 800b0fa:	435d      	muls	r5, r3
 800b0fc:	445d      	add	r5, fp
 800b0fe:	192e      	adds	r6, r5, r4
 800b100:	7a31      	ldrb	r1, [r6, #8]
 800b102:	20e4      	movs	r0, #228	; 0xe4
 800b104:	f7fc fbc8 	bl	8007898 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800b108:	9a07      	ldr	r2, [sp, #28]
 800b10a:	5d2b      	ldrb	r3, [r5, r4]
 800b10c:	5ca9      	ldrb	r1, [r5, r2]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	18c9      	adds	r1, r1, r3
 800b112:	b289      	uxth	r1, r1
 800b114:	20e5      	movs	r0, #229	; 0xe5
 800b116:	f7fc fbbf 	bl	8007898 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800b11a:	9b08      	ldr	r3, [sp, #32]
 800b11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b11e:	5ceb      	ldrb	r3, [r5, r3]
 800b120:	5ca9      	ldrb	r1, [r5, r2]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	18c9      	adds	r1, r1, r3
 800b126:	b289      	uxth	r1, r1
 800b128:	20e6      	movs	r0, #230	; 0xe6
 800b12a:	f7fc fbb5 	bl	8007898 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800b12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b132:	5ceb      	ldrb	r3, [r5, r3]
 800b134:	5ca9      	ldrb	r1, [r5, r2]
 800b136:	021b      	lsls	r3, r3, #8
 800b138:	18c9      	adds	r1, r1, r3
 800b13a:	b289      	uxth	r1, r1
 800b13c:	20e7      	movs	r0, #231	; 0xe7
 800b13e:	f7fc fbab 	bl	8007898 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800b142:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b146:	5ceb      	ldrb	r3, [r5, r3]
 800b148:	5ca9      	ldrb	r1, [r5, r2]
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	18c9      	adds	r1, r1, r3
 800b14e:	b289      	uxth	r1, r1
 800b150:	20e8      	movs	r0, #232	; 0xe8
 800b152:	f7fc fba1 	bl	8007898 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800b156:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b158:	7ab1      	ldrb	r1, [r6, #10]
 800b15a:	5ceb      	ldrb	r3, [r5, r3]
 800b15c:	20e9      	movs	r0, #233	; 0xe9
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	18c9      	adds	r1, r1, r3
 800b162:	b289      	uxth	r1, r1
 800b164:	f7fc fb98 	bl	8007898 <EE_WriteVariable>
								if(numOfParams == 19)
 800b168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b16a:	2b13      	cmp	r3, #19
 800b16c:	d013      	beq.n	800b196 <PxMessagingTask+0x11f2>
								if(numOfParams == 21)
 800b16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b170:	2b15      	cmp	r3, #21
 800b172:	d107      	bne.n	800b184 <PxMessagingTask+0x11e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800b174:	7b73      	ldrb	r3, [r6, #13]
 800b176:	7bb1      	ldrb	r1, [r6, #14]
 800b178:	021b      	lsls	r3, r3, #8
 800b17a:	18c9      	adds	r1, r1, r3
 800b17c:	b289      	uxth	r1, r1
 800b17e:	20eb      	movs	r0, #235	; 0xeb
 800b180:	f7fc fb8a 	bl	8007898 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	4b7e      	ldr	r3, [pc, #504]	; (800b384 <PxMessagingTask+0x13e0>)
 800b18a:	4a7f      	ldr	r2, [pc, #508]	; (800b388 <PxMessagingTask+0x13e4>)
 800b18c:	60da      	str	r2, [r3, #12]
 800b18e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800b192:	46c0      	nop			; (mov r8, r8)
 800b194:	e7fd      	b.n	800b192 <PxMessagingTask+0x11ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800b196:	9b04      	ldr	r3, [sp, #16]
 800b198:	7b31      	ldrb	r1, [r6, #12]
 800b19a:	5ceb      	ldrb	r3, [r5, r3]
 800b19c:	20ea      	movs	r0, #234	; 0xea
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	18c9      	adds	r1, r1, r3
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	f7fc fb78 	bl	8007898 <EE_WriteVariable>
 800b1a8:	e7ec      	b.n	800b184 <PxMessagingTask+0x11e0>
								temp =cMessage[port - 1][15 + shift];
 800b1aa:	9a05      	ldr	r2, [sp, #20]
 800b1ac:	1912      	adds	r2, r2, r4
 800b1ae:	7bd1      	ldrb	r1, [r2, #15]
 800b1b0:	f7ff fae0 	bl	800a774 <PxMessagingTask+0x7d0>
 800b1b4:	2700      	movs	r7, #0
 800b1b6:	f7fe ff9f 	bl	800a0f8 <PxMessagingTask+0x154>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b1ba:	2a01      	cmp	r2, #1
 800b1bc:	d901      	bls.n	800b1c2 <PxMessagingTask+0x121e>
 800b1be:	f7ff fb8d 	bl	800a8dc <PxMessagingTask+0x938>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b1c2:	9b05      	ldr	r3, [sp, #20]
 800b1c4:	4a71      	ldr	r2, [pc, #452]	; (800b38c <PxMessagingTask+0x13e8>)
 800b1c6:	5d1b      	ldrb	r3, [r3, r4]
 800b1c8:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b1ca:	2b08      	cmp	r3, #8
 800b1cc:	d901      	bls.n	800b1d2 <PxMessagingTask+0x122e>
 800b1ce:	f7ff fb85 	bl	800a8dc <PxMessagingTask+0x938>
 800b1d2:	4a6f      	ldr	r2, [pc, #444]	; (800b390 <PxMessagingTask+0x13ec>)
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	58d3      	ldr	r3, [r2, r3]
 800b1d8:	469f      	mov	pc, r3
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b1da:	4651      	mov	r1, sl
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	0a12      	lsrs	r2, r2, #8
 800b1e4:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	0c12      	lsrs	r2, r2, #16
 800b1ea:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b1ec:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b1ee:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b1f0:	0e1b      	lsrs	r3, r3, #24
 800b1f2:	710b      	strb	r3, [r1, #4]
 800b1f4:	e45b      	b.n	800aaae <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b1f6:	4651      	mov	r1, sl
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	1212      	asrs	r2, r2, #8
 800b200:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	1412      	asrs	r2, r2, #16
 800b206:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b208:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b20a:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b20c:	161b      	asrs	r3, r3, #24
 800b20e:	710b      	strb	r3, [r1, #4]
 800b210:	e44d      	b.n	800aaae <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b212:	4651      	mov	r1, sl
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b218:	4b5e      	ldr	r3, [pc, #376]	; (800b394 <PxMessagingTask+0x13f0>)
 800b21a:	18d3      	adds	r3, r2, r3
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b220:	4b5d      	ldr	r3, [pc, #372]	; (800b398 <PxMessagingTask+0x13f4>)
 800b222:	18d3      	adds	r3, r2, r3
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b228:	4b5c      	ldr	r3, [pc, #368]	; (800b39c <PxMessagingTask+0x13f8>)
 800b22a:	469c      	mov	ip, r3
 800b22c:	4462      	add	r2, ip
 800b22e:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b230:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b232:	710b      	strb	r3, [r1, #4]
 800b234:	e43b      	b.n	800aaae <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b236:	2201      	movs	r2, #1
 800b238:	211f      	movs	r1, #31
 800b23a:	9804      	ldr	r0, [sp, #16]
 800b23c:	f7fe fbdc 	bl	80099f8 <SendMessageToModule>
 800b240:	4643      	mov	r3, r8
 800b242:	5d5e      	ldrb	r6, [r3, r5]
 800b244:	f7fe ff58 	bl	800a0f8 <PxMessagingTask+0x154>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b248:	9b05      	ldr	r3, [sp, #20]
 800b24a:	2700      	movs	r7, #0
 800b24c:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b250:	4466      	add	r6, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b252:	469c      	mov	ip, r3
 800b254:	1c60      	adds	r0, r4, #1
 800b256:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b258:	3e01      	subs	r6, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b25a:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b25c:	7037      	strb	r7, [r6, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b25e:	f7f8 fa57 	bl	8003710 <IsModuleParameter>
 800b262:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b264:	42b8      	cmp	r0, r7
 800b266:	d03a      	beq.n	800b2de <PxMessagingTask+0x133a>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b268:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b26a:	494d      	ldr	r1, [pc, #308]	; (800b3a0 <PxMessagingTask+0x13fc>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b26e:	468c      	mov	ip, r1
 800b270:	4651      	mov	r1, sl
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b272:	3b01      	subs	r3, #1
 800b274:	435a      	muls	r2, r3
 800b276:	4b4a      	ldr	r3, [pc, #296]	; (800b3a0 <PxMessagingTask+0x13fc>)
 800b278:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b27a:	4462      	add	r2, ip
 800b27c:	7912      	ldrb	r2, [r2, #4]
 800b27e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b280:	3a01      	subs	r2, #1
 800b282:	b2d2      	uxtb	r2, r2
 800b284:	2a07      	cmp	r2, #7
 800b286:	d901      	bls.n	800b28c <PxMessagingTask+0x12e8>
 800b288:	f7fe ffb9 	bl	800a1fe <PxMessagingTask+0x25a>
 800b28c:	4945      	ldr	r1, [pc, #276]	; (800b3a4 <PxMessagingTask+0x1400>)
 800b28e:	0092      	lsls	r2, r2, #2
 800b290:	588a      	ldr	r2, [r1, r2]
 800b292:	4697      	mov	pc, r2
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b294:	4651      	mov	r1, sl
 800b296:	881a      	ldrh	r2, [r3, #0]
 800b298:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b29a:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b29c:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	708b      	strb	r3, [r1, #2]
 800b2a2:	f7ff fc04 	bl	800aaae <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	f7ff fbfe 	bl	800aaae <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	881a      	ldrh	r2, [r3, #0]
 800b2b6:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b2b8:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b2ba:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b2bc:	b21b      	sxth	r3, r3
 800b2be:	121b      	asrs	r3, r3, #8
 800b2c0:	708b      	strb	r3, [r1, #2]
 800b2c2:	f7ff fbf4 	bl	800aaae <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b2c6:	4651      	mov	r1, sl
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b2cc:	785a      	ldrb	r2, [r3, #1]
 800b2ce:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b2d0:	789a      	ldrb	r2, [r3, #2]
 800b2d2:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b2d4:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b2d6:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b2d8:	710b      	strb	r3, [r1, #4]
 800b2da:	f7ff fbe8 	bl	800aaae <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b2de:	2201      	movs	r2, #1
 800b2e0:	211f      	movs	r1, #31
 800b2e2:	9804      	ldr	r0, [sp, #16]
 800b2e4:	f7fe fb88 	bl	80099f8 <SendMessageToModule>
 800b2e8:	4643      	mov	r3, r8
 800b2ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2ec:	5d5e      	ldrb	r6, [r3, r5]
 800b2ee:	f7fe ff03 	bl	800a0f8 <PxMessagingTask+0x154>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b2f2:	9b05      	ldr	r3, [sp, #20]
 800b2f4:	469c      	mov	ip, r3
 800b2f6:	4464      	add	r4, ip
 800b2f8:	78a3      	ldrb	r3, [r4, #2]
 800b2fa:	7862      	ldrb	r2, [r4, #1]
 800b2fc:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b2fe:	189b      	adds	r3, r3, r2
 800b300:	464a      	mov	r2, r9
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	17db      	asrs	r3, r3, #31
 800b306:	6053      	str	r3, [r2, #4]
										break;
 800b308:	f7ff fae8 	bl	800a8dc <PxMessagingTask+0x938>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b30c:	9b05      	ldr	r3, [sp, #20]
 800b30e:	469c      	mov	ip, r3
 800b310:	4464      	add	r4, ip
 800b312:	78a3      	ldrb	r3, [r4, #2]
 800b314:	7862      	ldrb	r2, [r4, #1]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	189b      	adds	r3, r3, r2
 800b31a:	78e2      	ldrb	r2, [r4, #3]
 800b31c:	0412      	lsls	r2, r2, #16
 800b31e:	189b      	adds	r3, r3, r2
 800b320:	7922      	ldrb	r2, [r4, #4]
 800b322:	0612      	lsls	r2, r2, #24
 800b324:	e7eb      	b.n	800b2fe <PxMessagingTask+0x135a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b326:	9b05      	ldr	r3, [sp, #20]
 800b328:	464a      	mov	r2, r9
 800b32a:	469c      	mov	ip, r3
 800b32c:	2301      	movs	r3, #1
 800b32e:	4464      	add	r4, ip
 800b330:	56e3      	ldrsb	r3, [r4, r3]
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	17db      	asrs	r3, r3, #31
 800b336:	6053      	str	r3, [r2, #4]
										break;
 800b338:	f7ff fad0 	bl	800a8dc <PxMessagingTask+0x938>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	464a      	mov	r2, r9
 800b340:	469c      	mov	ip, r3
 800b342:	4464      	add	r4, ip
 800b344:	7863      	ldrb	r3, [r4, #1]
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	2300      	movs	r3, #0
 800b34a:	6053      	str	r3, [r2, #4]
										break;
 800b34c:	f7ff fac6 	bl	800a8dc <PxMessagingTask+0x938>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b350:	2310      	movs	r3, #16
 800b352:	f7ff f87c 	bl	800a44e <PxMessagingTask+0x4aa>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b356:	9b05      	ldr	r3, [sp, #20]
 800b358:	469c      	mov	ip, r3
 800b35a:	4464      	add	r4, ip
 800b35c:	78a3      	ldrb	r3, [r4, #2]
 800b35e:	78e2      	ldrb	r2, [r4, #3]
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	0412      	lsls	r2, r2, #16
 800b364:	189b      	adds	r3, r3, r2
 800b366:	7862      	ldrb	r2, [r4, #1]
 800b368:	189b      	adds	r3, r3, r2
 800b36a:	7922      	ldrb	r2, [r4, #4]
 800b36c:	0612      	lsls	r2, r2, #24
 800b36e:	189b      	adds	r3, r3, r2
 800b370:	464a      	mov	r2, r9
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	2300      	movs	r3, #0
 800b376:	6053      	str	r3, [r2, #4]
										break;
 800b378:	f7ff fab0 	bl	800a8dc <PxMessagingTask+0x938>
 800b37c:	20000c4c 	.word	0x20000c4c
 800b380:	0000ffff 	.word	0x0000ffff
 800b384:	e000ed00 	.word	0xe000ed00
 800b388:	05fa0004 	.word	0x05fa0004
 800b38c:	2000003a 	.word	0x2000003a
 800b390:	08017d2c 	.word	0x08017d2c
 800b394:	20000001 	.word	0x20000001
 800b398:	20000002 	.word	0x20000002
 800b39c:	20000003 	.word	0x20000003
 800b3a0:	200000a4 	.word	0x200000a4
 800b3a4:	08017d50 	.word	0x08017d50

0800b3a8 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b3a8:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800b3aa:	b530      	push	{r4, r5, lr}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 = 0;
 800b3b0:	9301      	str	r3, [sp, #4]
		const int8_t *pcCommandString) {
 800b3b2:	0010      	movs	r0, r2

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	d01e      	beq.n	800b3f6 <ledModeCommand+0x4e>

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	aa01      	add	r2, sp, #4
 800b3bc:	f002 fb24 	bl	800da08 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 800b3c0:	4919      	ldr	r1, [pc, #100]	; (800b428 <ledModeCommand+0x80>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b3c2:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 800b3c4:	f7f4 fe9e 	bl	8000104 <strcmp>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d016      	beq.n	800b3fa <ledModeCommand+0x52>
			|| !strcmp((char*) pcParameterString1, "ON"))
 800b3cc:	4917      	ldr	r1, [pc, #92]	; (800b42c <ledModeCommand+0x84>)
 800b3ce:	0020      	movs	r0, r4
 800b3d0:	f7f4 fe98 	bl	8000104 <strcmp>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d010      	beq.n	800b3fa <ledModeCommand+0x52>
		SwitchindMode = 1;
	else if (!strcmp((char*) pcParameterString1, "off")
 800b3d8:	4915      	ldr	r1, [pc, #84]	; (800b430 <ledModeCommand+0x88>)
 800b3da:	0020      	movs	r0, r4
 800b3dc:	f7f4 fe92 	bl	8000104 <strcmp>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d115      	bne.n	800b410 <ledModeCommand+0x68>
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4b13      	ldr	r3, [pc, #76]	; (800b434 <ledModeCommand+0x8c>)
 800b3e8:	701a      	strb	r2, [r3, #0]

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800b3ea:	222f      	movs	r2, #47	; 0x2f
 800b3ec:	4912      	ldr	r1, [pc, #72]	; (800b438 <ledModeCommand+0x90>)
 800b3ee:	0028      	movs	r0, r5
 800b3f0:	f007 fda9 	bl	8012f46 <memcpy>
 800b3f4:	e009      	b.n	800b40a <ledModeCommand+0x62>
	configASSERT(pcWriteBuffer);
 800b3f6:	b672      	cpsid	i
 800b3f8:	e7fe      	b.n	800b3f8 <ledModeCommand+0x50>
		SwitchindMode = 1;
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <ledModeCommand+0x8c>)
 800b3fe:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800b400:	222e      	movs	r2, #46	; 0x2e
 800b402:	490e      	ldr	r1, [pc, #56]	; (800b43c <ledModeCommand+0x94>)
 800b404:	0028      	movs	r0, r5
 800b406:	f007 fd9e 	bl	8012f46 <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800b40a:	2000      	movs	r0, #0
 800b40c:	b003      	add	sp, #12
 800b40e:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "OFF"))
 800b410:	490b      	ldr	r1, [pc, #44]	; (800b440 <ledModeCommand+0x98>)
 800b412:	0020      	movs	r0, r4
 800b414:	f7f4 fe76 	bl	8000104 <strcmp>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0e3      	beq.n	800b3e4 <ledModeCommand+0x3c>
	if (SwitchindMode) {
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <ledModeCommand+0x8c>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0e2      	beq.n	800b3ea <ledModeCommand+0x42>
 800b424:	e7ec      	b.n	800b400 <ledModeCommand+0x58>
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	08019bc0 	.word	0x08019bc0
 800b42c:	0801a4a4 	.word	0x0801a4a4
 800b430:	0801a4a8 	.word	0x0801a4a8
 800b434:	20001abc 	.word	0x20001abc
 800b438:	0801a4e0 	.word	0x0801a4e0
 800b43c:	0801a4b0 	.word	0x0801a4b0
 800b440:	0801a4ac 	.word	0x0801a4ac

0800b444 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b444:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 800b446:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b448:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b44a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b44c:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b44e:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b450:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b452:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b454:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b456:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b458:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b45a:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b45c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b45e:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b460:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b462:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b464:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b466:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b468:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b46a:	f005 fe25 	bl	80110b8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b46e:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b470:	2101      	movs	r1, #1
 800b472:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b474:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b476:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b478:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b47a:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b47c:	f006 f8be 	bl	80115fc <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b480:	4b1a      	ldr	r3, [pc, #104]	; (800b4ec <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b482:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b484:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b486:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b488:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b48a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b48c:	f006 fa42 	bl	8011914 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b490:	2180      	movs	r1, #128	; 0x80
 800b492:	4d17      	ldr	r5, [pc, #92]	; (800b4f0 <SystemClock_Config+0xac>)
 800b494:	0549      	lsls	r1, r1, #21
 800b496:	69ea      	ldr	r2, [r5, #28]
 800b498:	430a      	orrs	r2, r1
 800b49a:	61ea      	str	r2, [r5, #28]
 800b49c:	69eb      	ldr	r3, [r5, #28]
 800b49e:	400b      	ands	r3, r1
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800b4a4:	f005 fdfe 	bl	80110a4 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4a8:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4aa:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b4b0:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4b2:	f006 fa2f 	bl	8011914 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800b4b6:	f006 f9ff 	bl	80118b8 <HAL_RCC_GetHCLKFreq>
 800b4ba:	21fa      	movs	r1, #250	; 0xfa
 800b4bc:	0089      	lsls	r1, r1, #2
 800b4be:	f7f4 fe47 	bl	8000150 <__udivsi3>
 800b4c2:	f004 fc99 	bl	800fdf8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b4c6:	2004      	movs	r0, #4
 800b4c8:	f004 fcb2 	bl	800fe30 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4cc:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 800b4ce:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4d0:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 800b4d2:	4323      	orrs	r3, r4
 800b4d4:	61ab      	str	r3, [r5, #24]
 800b4d6:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4d8:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 800b4da:	401c      	ands	r4, r3
 800b4dc:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4de:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 800b4e0:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4e2:	f004 fc49 	bl	800fd78 <HAL_NVIC_SetPriority>
}
 800b4e6:	b01b      	add	sp, #108	; 0x6c
 800b4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	00040003 	.word	0x00040003
 800b4f0:	40021000 	.word	0x40021000

0800b4f4 <SaveToRO>:
uint8_t SaveToRO(void) {
 800b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f6:	46de      	mov	lr, fp
 800b4f8:	4657      	mov	r7, sl
 800b4fa:	464e      	mov	r6, r9
 800b4fc:	4645      	mov	r5, r8
 800b4fe:	b5e0      	push	{r5, r6, r7, lr}
 800b500:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800b502:	2215      	movs	r2, #21
 800b504:	2100      	movs	r1, #0
 800b506:	4668      	mov	r0, sp
 800b508:	f007 fd26 	bl	8012f58 <memset>
	HAL_FLASH_Unlock();
 800b50c:	f005 fadc 	bl	8010ac8 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b510:	486a      	ldr	r0, [pc, #424]	; (800b6bc <SaveToRO+0x1c8>)
 800b512:	f005 fc09 	bl	8010d28 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800b516:	486a      	ldr	r0, [pc, #424]	; (800b6c0 <SaveToRO+0x1cc>)
 800b518:	f005 faf2 	bl	8010b00 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d16e      	bne.n	800b5fe <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b520:	2202      	movs	r2, #2
 800b522:	4c68      	ldr	r4, [pc, #416]	; (800b6c4 <SaveToRO+0x1d0>)
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	4393      	bics	r3, r2
 800b528:	6123      	str	r3, [r4, #16]
	if (myID) {
 800b52a:	4b67      	ldr	r3, [pc, #412]	; (800b6c8 <SaveToRO+0x1d4>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d000      	beq.n	800b534 <SaveToRO+0x40>
 800b532:	e06e      	b.n	800b612 <SaveToRO+0x11e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b534:	4b65      	ldr	r3, [pc, #404]	; (800b6cc <SaveToRO+0x1d8>)
 800b536:	469a      	mov	sl, r3
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d100      	bne.n	800b540 <SaveToRO+0x4c>
 800b53e:	e0b8      	b.n	800b6b2 <SaveToRO+0x1be>
 800b540:	4b63      	ldr	r3, [pc, #396]	; (800b6d0 <SaveToRO+0x1dc>)
 800b542:	2500      	movs	r5, #0
 800b544:	4c63      	ldr	r4, [pc, #396]	; (800b6d4 <SaveToRO+0x1e0>)
 800b546:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b548:	4f5e      	ldr	r7, [pc, #376]	; (800b6c4 <SaveToRO+0x1d0>)
 800b54a:	e006      	b.n	800b55a <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b54c:	4653      	mov	r3, sl
 800b54e:	3501      	adds	r5, #1
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b2ed      	uxtb	r5, r5
 800b554:	42ab      	cmp	r3, r5
 800b556:	d800      	bhi.n	800b55a <SaveToRO+0x66>
 800b558:	e0ab      	b.n	800b6b2 <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 800b55a:	00ab      	lsls	r3, r5, #2
 800b55c:	1959      	adds	r1, r3, r5
 800b55e:	4698      	mov	r8, r3
 800b560:	464b      	mov	r3, r9
 800b562:	0089      	lsls	r1, r1, #2
 800b564:	5c5b      	ldrb	r3, [r3, r1]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0f0      	beq.n	800b54c <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b56a:	466b      	mov	r3, sp
 800b56c:	22fe      	movs	r2, #254	; 0xfe
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b56e:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b570:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b572:	4449      	add	r1, r9
 800b574:	2214      	movs	r2, #20
 800b576:	f007 fce6 	bl	8012f46 <memcpy>
 800b57a:	2314      	movs	r3, #20
 800b57c:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 800b57e:	466b      	mov	r3, sp
 800b580:	44a3      	add	fp, r4
 800b582:	1b1e      	subs	r6, r3, r4
 800b584:	465b      	mov	r3, fp
 800b586:	46ab      	mov	fp, r5
 800b588:	001d      	movs	r5, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b58a:	5b32      	ldrh	r2, [r6, r4]
 800b58c:	2300      	movs	r3, #0
 800b58e:	0021      	movs	r1, r4
 800b590:	2001      	movs	r0, #1
 800b592:	f005 faf9 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b596:	484a      	ldr	r0, [pc, #296]	; (800b6c0 <SaveToRO+0x1cc>)
 800b598:	f005 fab2 	bl	8010b00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d12e      	bne.n	800b5fe <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800b5a4:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5a6:	4393      	bics	r3, r2
 800b5a8:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b5aa:	42ac      	cmp	r4, r5
 800b5ac:	d1ed      	bne.n	800b58a <SaveToRO+0x96>
 800b5ae:	465d      	mov	r5, fp
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b5b0:	4643      	mov	r3, r8
 800b5b2:	195b      	adds	r3, r3, r5
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	444b      	add	r3, r9
 800b5b8:	2600      	movs	r6, #0
 800b5ba:	4698      	mov	r8, r3
 800b5bc:	0025      	movs	r5, r4
 800b5be:	e012      	b.n	800b5e6 <SaveToRO+0xf2>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800b5c0:	0073      	lsls	r3, r6, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b5c2:	5ae2      	ldrh	r2, [r4, r3]
 800b5c4:	0029      	movs	r1, r5
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	f005 fadd 	bl	8010b88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b5ce:	483c      	ldr	r0, [pc, #240]	; (800b6c0 <SaveToRO+0x1cc>)
 800b5d0:	f005 fa96 	bl	8010b00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d112      	bne.n	800b5fe <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5d8:	2201      	movs	r2, #1
 800b5da:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b5dc:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5de:	4393      	bics	r3, r2
 800b5e0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5e2:	3502      	adds	r5, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b5e4:	b2f6      	uxtb	r6, r6
 800b5e6:	4643      	mov	r3, r8
 800b5e8:	68dc      	ldr	r4, [r3, #12]
 800b5ea:	0020      	movs	r0, r4
 800b5ec:	f7f4 fd94 	bl	8000118 <strlen>
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	0840      	lsrs	r0, r0, #1
 800b5f4:	4286      	cmp	r6, r0
 800b5f6:	d3e3      	bcc.n	800b5c0 <SaveToRO+0xcc>
 800b5f8:	002c      	movs	r4, r5
 800b5fa:	465d      	mov	r5, fp
 800b5fc:	e7a6      	b.n	800b54c <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b5fe:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <SaveToRO+0x1e4>)
 800b600:	69d8      	ldr	r0, [r3, #28]
 800b602:	b2c0      	uxtb	r0, r0
}
 800b604:	b007      	add	sp, #28
 800b606:	bc3c      	pop	{r2, r3, r4, r5}
 800b608:	4690      	mov	r8, r2
 800b60a:	4699      	mov	r9, r3
 800b60c:	46a2      	mov	sl, r4
 800b60e:	46ab      	mov	fp, r5
 800b610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800b612:	4a32      	ldr	r2, [pc, #200]	; (800b6dc <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b614:	4929      	ldr	r1, [pc, #164]	; (800b6bc <SaveToRO+0x1c8>)
		temp = (uint16_t) (N << 8) + myID;
 800b616:	4693      	mov	fp, r2
 800b618:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b61a:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 800b61c:	0212      	lsls	r2, r2, #8
 800b61e:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b620:	b292      	uxth	r2, r2
 800b622:	2300      	movs	r3, #0
 800b624:	f005 fab0 	bl	8010b88 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800b628:	4825      	ldr	r0, [pc, #148]	; (800b6c0 <SaveToRO+0x1cc>)
 800b62a:	f005 fa69 	bl	8010b00 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b62e:	2800      	cmp	r0, #0
 800b630:	d1e5      	bne.n	800b5fe <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b632:	2201      	movs	r2, #1
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	4393      	bics	r3, r2
 800b638:	6123      	str	r3, [r4, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800b63a:	465b      	mov	r3, fp
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d100      	bne.n	800b644 <SaveToRO+0x150>
 800b642:	e777      	b.n	800b534 <SaveToRO+0x40>
 800b644:	2301      	movs	r3, #1
 800b646:	469a      	mov	sl, r3
 800b648:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 800b64a:	2602      	movs	r6, #2
 800b64c:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b64e:	46a0      	mov	r8, r4
 800b650:	4653      	mov	r3, sl
 800b652:	1e5d      	subs	r5, r3, #1
 800b654:	2316      	movs	r3, #22
 800b656:	464f      	mov	r7, r9
 800b658:	435d      	muls	r5, r3
 800b65a:	464b      	mov	r3, r9
 800b65c:	3716      	adds	r7, #22
 800b65e:	195c      	adds	r4, r3, r5
 800b660:	197f      	adds	r7, r7, r5
 800b662:	e002      	b.n	800b66a <SaveToRO+0x176>
 800b664:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b666:	42a7      	cmp	r7, r4
 800b668:	d01a      	beq.n	800b6a0 <SaveToRO+0x1ac>
				if (array[i - 1][0]) {
 800b66a:	464b      	mov	r3, r9
 800b66c:	5b5b      	ldrh	r3, [r3, r5]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0f8      	beq.n	800b664 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <SaveToRO+0x1c8>)
 800b674:	8822      	ldrh	r2, [r4, #0]
 800b676:	18f1      	adds	r1, r6, r3
 800b678:	2001      	movs	r0, #1
 800b67a:	2300      	movs	r3, #0
 800b67c:	f005 fa84 	bl	8010b88 <HAL_FLASH_Program>
					add += 2;
 800b680:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation(
 800b682:	480f      	ldr	r0, [pc, #60]	; (800b6c0 <SaveToRO+0x1cc>)
					add += 2;
 800b684:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation(
 800b686:	f005 fa3b 	bl	8010b00 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1b7      	bne.n	800b5fe <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b68e:	4643      	mov	r3, r8
 800b690:	2201      	movs	r2, #1
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	3402      	adds	r4, #2
 800b696:	4393      	bics	r3, r2
 800b698:	4642      	mov	r2, r8
 800b69a:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b69c:	42a7      	cmp	r7, r4
 800b69e:	d1e4      	bne.n	800b66a <SaveToRO+0x176>
		for (uint8_t i = 1; i <= N; i++) {
 800b6a0:	4653      	mov	r3, sl
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	469a      	mov	sl, r3
 800b6a8:	465b      	mov	r3, fp
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	4553      	cmp	r3, sl
 800b6ae:	d2cf      	bcs.n	800b650 <SaveToRO+0x15c>
 800b6b0:	e740      	b.n	800b534 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 800b6b2:	f005 fa1b 	bl	8010aec <HAL_FLASH_Lock>
	return result;
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e7a4      	b.n	800b604 <SaveToRO+0x110>
 800b6ba:	46c0      	nop			; (mov r8, r8)
 800b6bc:	0801d800 	.word	0x0801d800
 800b6c0:	0000c350 	.word	0x0000c350
 800b6c4:	40022000 	.word	0x40022000
 800b6c8:	20000aa8 	.word	0x20000aa8
 800b6cc:	20001150 	.word	0x20001150
 800b6d0:	20006dd0 	.word	0x20006dd0
 800b6d4:	0801dc00 	.word	0x0801dc00
 800b6d8:	200072b0 	.word	0x200072b0
 800b6dc:	20000010 	.word	0x20000010
 800b6e0:	20000ee4 	.word	0x20000ee4

0800b6e4 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 800b6e4:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 800b6e6:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	4805      	ldr	r0, [pc, #20]	; (800b704 <ClearROtopology+0x20>)
 800b6ee:	f007 fc33 	bl	8012f58 <memset>
	N = 1;
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	4b04      	ldr	r3, [pc, #16]	; (800b708 <ClearROtopology+0x24>)
 800b6f6:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4b04      	ldr	r3, [pc, #16]	; (800b70c <ClearROtopology+0x28>)
 800b6fc:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b6fe:	f7ff fef9 	bl	800b4f4 <SaveToRO>
}
 800b702:	bd10      	pop	{r4, pc}
 800b704:	20000ee4 	.word	0x20000ee4
 800b708:	20000010 	.word	0x20000010
 800b70c:	20000aa8 	.word	0x20000aa8

0800b710 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800b710:	b500      	push	{lr}
 800b712:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 800b714:	f001 fdb2 	bl	800d27c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b718:	f001 fdc8 	bl	800d2ac <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b71c:	f001 fdde 	bl	800d2dc <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800b720:	f001 fdf4 	bl	800d30c <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b724:	f001 fe0a 	bl	800d33c <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800b728:	21fa      	movs	r1, #250	; 0xfa
 800b72a:	4b07      	ldr	r3, [pc, #28]	; (800b748 <Module_Peripheral_Init+0x38>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	0089      	lsls	r1, r1, #2
 800b732:	2301      	movs	r3, #1
 800b734:	4805      	ldr	r0, [pc, #20]	; (800b74c <Module_Peripheral_Init+0x3c>)
 800b736:	f003 fcc9 	bl	800f0cc <xTimerCreate>
 800b73a:	4b05      	ldr	r3, [pc, #20]	; (800b750 <Module_Peripheral_Init+0x40>)
 800b73c:	6058      	str	r0, [r3, #4]
	Switch_Init();
 800b73e:	f001 f9e9 	bl	800cb14 <Switch_Init>
}
 800b742:	b003      	add	sp, #12
 800b744:	bd00      	pop	{pc}
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	0800b905 	.word	0x0800b905
 800b74c:	0801a510 	.word	0x0801a510
 800b750:	20001abc 	.word	0x20001abc

0800b754 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800b754:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800b756:	4c08      	ldr	r4, [pc, #32]	; (800b778 <RegisterModuleCLICommands+0x24>)
 800b758:	0020      	movs	r0, r4
 800b75a:	f002 f8bd 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800b75e:	0020      	movs	r0, r4
 800b760:	3010      	adds	r0, #16
 800b762:	f002 f8b9 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800b766:	0020      	movs	r0, r4
 800b768:	3020      	adds	r0, #32
 800b76a:	f002 f8b5 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800b76e:	0020      	movs	r0, r4
 800b770:	3030      	adds	r0, #48	; 0x30
 800b772:	f002 f8b1 	bl	800d8d8 <FreeRTOS_CLIRegisterCommand>
}
 800b776:	bd10      	pop	{r4, pc}
 800b778:	08017d70 	.word	0x08017d70

0800b77c <GetPort>:
	if (huart->Instance == USART5)
 800b77c:	6800      	ldr	r0, [r0, #0]
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <GetPort+0x3c>)
 800b780:	4298      	cmp	r0, r3
 800b782:	d011      	beq.n	800b7a8 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b784:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <GetPort+0x40>)
 800b786:	4298      	cmp	r0, r3
 800b788:	d012      	beq.n	800b7b0 <GetPort+0x34>
	else if (huart->Instance == USART6)
 800b78a:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <GetPort+0x44>)
 800b78c:	4298      	cmp	r0, r3
 800b78e:	d011      	beq.n	800b7b4 <GetPort+0x38>
	else if (huart->Instance == USART3)
 800b790:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <GetPort+0x48>)
 800b792:	4298      	cmp	r0, r3
 800b794:	d00a      	beq.n	800b7ac <GetPort+0x30>
	return 0;
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <GetPort+0x4c>)
 800b798:	469c      	mov	ip, r3
 800b79a:	4460      	add	r0, ip
 800b79c:	4243      	negs	r3, r0
 800b79e:	4158      	adcs	r0, r3
 800b7a0:	2305      	movs	r3, #5
 800b7a2:	4240      	negs	r0, r0
 800b7a4:	4018      	ands	r0, r3
}
 800b7a6:	4770      	bx	lr
		return P1;
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	e7fc      	b.n	800b7a6 <GetPort+0x2a>
		return P4;
 800b7ac:	2004      	movs	r0, #4
 800b7ae:	e7fa      	b.n	800b7a6 <GetPort+0x2a>
		return P2;
 800b7b0:	2002      	movs	r0, #2
 800b7b2:	e7f8      	b.n	800b7a6 <GetPort+0x2a>
		return P3;
 800b7b4:	2003      	movs	r0, #3
 800b7b6:	e7f6      	b.n	800b7a6 <GetPort+0x2a>
 800b7b8:	40005000 	.word	0x40005000
 800b7bc:	40004400 	.word	0x40004400
 800b7c0:	40011400 	.word	0x40011400
 800b7c4:	40004800 	.word	0x40004800
 800b7c8:	bffec800 	.word	0xbffec800

0800b7cc <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800b7cc:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800b7ce:	2201      	movs	r2, #1
Module_Status Output_on(uint32_t timeout) {
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	481b      	ldr	r0, [pc, #108]	; (800b844 <Output_on+0x78>)
 800b7d8:	f005 fc58 	bl	801108c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800b7dc:	4c1a      	ldr	r4, [pc, #104]	; (800b848 <Output_on+0x7c>)
 800b7de:	7823      	ldrb	r3, [r4, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d11e      	bne.n	800b822 <Output_on+0x56>
	if (timeout != portMAX_DELAY) {
 800b7e4:	1c6b      	adds	r3, r5, #1
 800b7e6:	d015      	beq.n	800b814 <Output_on+0x48>
		if (xTimerIsTimerActive(xTimerSwitch))
 800b7e8:	6860      	ldr	r0, [r4, #4]
 800b7ea:	f003 fdc7 	bl	800f37c <xTimerIsTimerActive>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d11f      	bne.n	800b832 <Output_on+0x66>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800b7f2:	21fa      	movs	r1, #250	; 0xfa
 800b7f4:	0168      	lsls	r0, r5, #5
 800b7f6:	1b40      	subs	r0, r0, r5
 800b7f8:	0080      	lsls	r0, r0, #2
 800b7fa:	1940      	adds	r0, r0, r5
 800b7fc:	0089      	lsls	r1, r1, #2
 800b7fe:	00c0      	lsls	r0, r0, #3
 800b800:	f7f4 fca6 	bl	8000150 <__udivsi3>
 800b804:	2364      	movs	r3, #100	; 0x64
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	0002      	movs	r2, r0
 800b80a:	2300      	movs	r3, #0
 800b80c:	2104      	movs	r1, #4
 800b80e:	6860      	ldr	r0, [r4, #4]
 800b810:	f003 fc7c 	bl	800f10c <xTimerGenericCommand>
	Switch_state = STATE_ON;
 800b814:	2301      	movs	r3, #1
}
 800b816:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800b818:	4a0c      	ldr	r2, [pc, #48]	; (800b84c <Output_on+0x80>)
	Switch_state = STATE_ON;
 800b81a:	7223      	strb	r3, [r4, #8]
	Switch_Oldstate = Switch_state;
 800b81c:	7013      	strb	r3, [r2, #0]
}
 800b81e:	b003      	add	sp, #12
 800b820:	bd30      	pop	{r4, r5, pc}
		IND_ON();
 800b822:	2180      	movs	r1, #128	; 0x80
 800b824:	2090      	movs	r0, #144	; 0x90
 800b826:	2201      	movs	r2, #1
 800b828:	0109      	lsls	r1, r1, #4
 800b82a:	05c0      	lsls	r0, r0, #23
 800b82c:	f005 fc2e 	bl	801108c <HAL_GPIO_WritePin>
 800b830:	e7d8      	b.n	800b7e4 <Output_on+0x18>
			xTimerStop(xTimerSwitch, 100);
 800b832:	2364      	movs	r3, #100	; 0x64
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	2200      	movs	r2, #0
 800b838:	2300      	movs	r3, #0
 800b83a:	2103      	movs	r1, #3
 800b83c:	6860      	ldr	r0, [r4, #4]
 800b83e:	f003 fc65 	bl	800f10c <xTimerGenericCommand>
 800b842:	e7d6      	b.n	800b7f2 <Output_on+0x26>
 800b844:	48000400 	.word	0x48000400
 800b848:	20001abc 	.word	0x20001abc
 800b84c:	2000009c 	.word	0x2000009c

0800b850 <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800b850:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800b852:	b530      	push	{r4, r5, lr}
 800b854:	b083      	sub	sp, #12
 800b856:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 = 0;
 800b858:	9301      	str	r3, [sp, #4]
		const int8_t *pcCommandString) {
 800b85a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800b85c:	2c00      	cmp	r4, #0
 800b85e:	d02d      	beq.n	800b8bc <onCommand+0x6c>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b860:	2101      	movs	r1, #1
 800b862:	aa01      	add	r2, sp, #4
 800b864:	f002 f8d0 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800b868:	4915      	ldr	r1, [pc, #84]	; (800b8c0 <onCommand+0x70>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800b86a:	0005      	movs	r5, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800b86c:	f7f4 fc4a 	bl	8000104 <strcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	d10d      	bne.n	800b890 <onCommand+0x40>
	result = Output_on(timeout);
 800b874:	2001      	movs	r0, #1
 800b876:	4240      	negs	r0, r0
 800b878:	f7ff ffa8 	bl	800b7cc <Output_on>
	if (result == H0FRx_OK) {
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d104      	bne.n	800b88a <onCommand+0x3a>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800b880:	2232      	movs	r2, #50	; 0x32
 800b882:	4910      	ldr	r1, [pc, #64]	; (800b8c4 <onCommand+0x74>)
 800b884:	0020      	movs	r0, r4
 800b886:	f007 fb5e 	bl	8012f46 <memcpy>
}
 800b88a:	2000      	movs	r0, #0
 800b88c:	b003      	add	sp, #12
 800b88e:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "INF"))
 800b890:	490d      	ldr	r1, [pc, #52]	; (800b8c8 <onCommand+0x78>)
 800b892:	0028      	movs	r0, r5
 800b894:	f7f4 fc36 	bl	8000104 <strcmp>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d0eb      	beq.n	800b874 <onCommand+0x24>
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800b89c:	0028      	movs	r0, r5
 800b89e:	f007 f892 	bl	80129c6 <atol>
 800b8a2:	0005      	movs	r5, r0
	result = Output_on(timeout);
 800b8a4:	f7ff ff92 	bl	800b7cc <Output_on>
	if (result == H0FRx_OK) {
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1ee      	bne.n	800b88a <onCommand+0x3a>
		if (timeout != portMAX_DELAY) {
 800b8ac:	1c6b      	adds	r3, r5, #1
 800b8ae:	d0e7      	beq.n	800b880 <onCommand+0x30>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800b8b0:	002a      	movs	r2, r5
 800b8b2:	4906      	ldr	r1, [pc, #24]	; (800b8cc <onCommand+0x7c>)
 800b8b4:	0020      	movs	r0, r4
 800b8b6:	f007 fd49 	bl	801334c <sprintf>
 800b8ba:	e7e6      	b.n	800b88a <onCommand+0x3a>
	configASSERT(pcWriteBuffer);
 800b8bc:	b672      	cpsid	i
 800b8be:	e7fe      	b.n	800b8be <onCommand+0x6e>
 800b8c0:	0801a51c 	.word	0x0801a51c
 800b8c4:	0801a55c 	.word	0x0801a55c
 800b8c8:	0801a520 	.word	0x0801a520
 800b8cc:	0801a524 	.word	0x0801a524

0800b8d0 <Output_off>:
Module_Status Output_off(void) {
 800b8d0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	4809      	ldr	r0, [pc, #36]	; (800b8fc <Output_off+0x2c>)
 800b8d8:	f005 fbd8 	bl	801108c <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800b8dc:	4c08      	ldr	r4, [pc, #32]	; (800b900 <Output_off+0x30>)
 800b8de:	7823      	ldrb	r3, [r4, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <Output_off+0x22>
		IND_OFF();
 800b8e4:	2180      	movs	r1, #128	; 0x80
 800b8e6:	2090      	movs	r0, #144	; 0x90
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	0109      	lsls	r1, r1, #4
 800b8ec:	05c0      	lsls	r0, r0, #23
 800b8ee:	f005 fbcd 	bl	801108c <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	2000      	movs	r0, #0
	Switch_state = STATE_OFF;
 800b8f6:	7223      	strb	r3, [r4, #8]
}
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	46c0      	nop			; (mov r8, r8)
 800b8fc:	48000400 	.word	0x48000400
 800b900:	20001abc 	.word	0x20001abc

0800b904 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800b904:	b510      	push	{r4, lr}
	Output_off();
 800b906:	f7ff ffe3 	bl	800b8d0 <Output_off>
}
 800b90a:	bd10      	pop	{r4, pc}

0800b90c <offCommand>:
		const int8_t *pcCommandString) {
 800b90c:	b510      	push	{r4, lr}
 800b90e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800b910:	d005      	beq.n	800b91e <offCommand+0x12>
	result = Output_off();
 800b912:	f7ff ffdd 	bl	800b8d0 <Output_off>
	if (result == H0FRx_OK) {
 800b916:	2800      	cmp	r0, #0
 800b918:	d003      	beq.n	800b922 <offCommand+0x16>
}
 800b91a:	2000      	movs	r0, #0
 800b91c:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800b91e:	b672      	cpsid	i
 800b920:	e7fe      	b.n	800b920 <offCommand+0x14>
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800b922:	2223      	movs	r2, #35	; 0x23
 800b924:	4902      	ldr	r1, [pc, #8]	; (800b930 <offCommand+0x24>)
 800b926:	0020      	movs	r0, r4
 800b928:	f007 fb0d 	bl	8012f46 <memcpy>
 800b92c:	e7f5      	b.n	800b91a <offCommand+0xe>
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	0801a590 	.word	0x0801a590

0800b934 <Output_toggle>:
	if (Switch_state) {
 800b934:	4b08      	ldr	r3, [pc, #32]	; (800b958 <Output_toggle+0x24>)
Module_Status Output_toggle(void) {
 800b936:	b510      	push	{r4, lr}
	if (Switch_state) {
 800b938:	7a1b      	ldrb	r3, [r3, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d105      	bne.n	800b94a <Output_toggle+0x16>
		if (Switch_Oldstate == STATE_ON)
 800b93e:	4b07      	ldr	r3, [pc, #28]	; (800b95c <Output_toggle+0x28>)
	Module_Status result = H0FRx_OK;
 800b940:	2000      	movs	r0, #0
		if (Switch_Oldstate == STATE_ON)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d003      	beq.n	800b950 <Output_toggle+0x1c>
}
 800b948:	bd10      	pop	{r4, pc}
		result = Output_off();
 800b94a:	f7ff ffc1 	bl	800b8d0 <Output_off>
 800b94e:	e7fb      	b.n	800b948 <Output_toggle+0x14>
			result = Output_on(portMAX_DELAY);
 800b950:	3801      	subs	r0, #1
 800b952:	f7ff ff3b 	bl	800b7cc <Output_on>
 800b956:	e7f7      	b.n	800b948 <Output_toggle+0x14>
 800b958:	20001abc 	.word	0x20001abc
 800b95c:	2000009c 	.word	0x2000009c

0800b960 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800b960:	b510      	push	{r4, lr}
 800b962:	ab02      	add	r3, sp, #8
 800b964:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 800b966:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <Module_MessagingTask+0x5c>)
 800b968:	4298      	cmp	r0, r3
 800b96a:	d022      	beq.n	800b9b2 <Module_MessagingTask+0x52>
 800b96c:	3301      	adds	r3, #1
 800b96e:	4298      	cmp	r0, r3
 800b970:	d01b      	beq.n	800b9aa <Module_MessagingTask+0x4a>
 800b972:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <Module_MessagingTask+0x60>)
 800b974:	4298      	cmp	r0, r3
 800b976:	d001      	beq.n	800b97c <Module_MessagingTask+0x1c>
		result = H0FRx_ERR_UnknownMessage;
 800b978:	2001      	movs	r0, #1
}
 800b97a:	bd10      	pop	{r4, pc}
		temp32 = ((uint32_t) cMessage[port - 1][shift] << 24)+ ((uint32_t) cMessage[port - 1][1 + shift] << 16)+ ((uint32_t) cMessage[port - 1][2 + shift] << 8)+ cMessage[port - 1][3 + shift];
 800b97c:	3901      	subs	r1, #1
 800b97e:	00cb      	lsls	r3, r1, #3
 800b980:	1a59      	subs	r1, r3, r1
 800b982:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <Module_MessagingTask+0x64>)
 800b984:	00c9      	lsls	r1, r1, #3
 800b986:	1859      	adds	r1, r3, r1
 800b988:	188b      	adds	r3, r1, r2
 800b98a:	7858      	ldrb	r0, [r3, #1]
 800b98c:	5c8a      	ldrb	r2, [r1, r2]
 800b98e:	0400      	lsls	r0, r0, #16
 800b990:	0612      	lsls	r2, r2, #24
 800b992:	1880      	adds	r0, r0, r2
 800b994:	78da      	ldrb	r2, [r3, #3]
 800b996:	789b      	ldrb	r3, [r3, #2]
 800b998:	1880      	adds	r0, r0, r2
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	18c0      	adds	r0, r0, r3
 800b99e:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <Module_MessagingTask+0x68>)
 800b9a0:	6018      	str	r0, [r3, #0]
		Output_on(temp32);
 800b9a2:	f7ff ff13 	bl	800b7cc <Output_on>
	Module_Status result = H0FRx_OK;
 800b9a6:	2000      	movs	r0, #0
		break;
 800b9a8:	e7e7      	b.n	800b97a <Module_MessagingTask+0x1a>
		Output_toggle();
 800b9aa:	f7ff ffc3 	bl	800b934 <Output_toggle>
	Module_Status result = H0FRx_OK;
 800b9ae:	2000      	movs	r0, #0
		break;
 800b9b0:	e7e3      	b.n	800b97a <Module_MessagingTask+0x1a>
		Output_off();
 800b9b2:	f7ff ff8d 	bl	800b8d0 <Output_off>
	Module_Status result = H0FRx_OK;
 800b9b6:	2000      	movs	r0, #0
		break;
 800b9b8:	e7df      	b.n	800b97a <Module_MessagingTask+0x1a>
 800b9ba:	46c0      	nop			; (mov r8, r8)
 800b9bc:	000002ef 	.word	0x000002ef
 800b9c0:	000002ee 	.word	0x000002ee
 800b9c4:	20000ca0 	.word	0x20000ca0
 800b9c8:	2000708c 	.word	0x2000708c

0800b9cc <toggleCommand>:
		const int8_t *pcCommandString) {
 800b9cc:	b510      	push	{r4, lr}
 800b9ce:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800b9d0:	d00e      	beq.n	800b9f0 <toggleCommand+0x24>
	result = Output_toggle();
 800b9d2:	f7ff ffaf 	bl	800b934 <Output_toggle>
	if (result == H0FRx_OK) {
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d108      	bne.n	800b9ec <toggleCommand+0x20>
		if (Switch_state) {
 800b9da:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <toggleCommand+0x34>)
 800b9dc:	7a1b      	ldrb	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d108      	bne.n	800b9f4 <toggleCommand+0x28>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800b9e2:	2223      	movs	r2, #35	; 0x23
 800b9e4:	4907      	ldr	r1, [pc, #28]	; (800ba04 <toggleCommand+0x38>)
 800b9e6:	0020      	movs	r0, r4
 800b9e8:	f007 faad 	bl	8012f46 <memcpy>
}
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800b9f0:	b672      	cpsid	i
 800b9f2:	e7fe      	b.n	800b9f2 <toggleCommand+0x26>
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800b9f4:	2222      	movs	r2, #34	; 0x22
 800b9f6:	4904      	ldr	r1, [pc, #16]	; (800ba08 <toggleCommand+0x3c>)
 800b9f8:	0020      	movs	r0, r4
 800b9fa:	f007 faa4 	bl	8012f46 <memcpy>
 800b9fe:	e7f5      	b.n	800b9ec <toggleCommand+0x20>
 800ba00:	20001abc 	.word	0x20001abc
 800ba04:	0801a590 	.word	0x0801a590
 800ba08:	0801a5b4 	.word	0x0801a5b4

0800ba0c <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0e:	46de      	mov	lr, fp
 800ba10:	4657      	mov	r7, sl
 800ba12:	464e      	mov	r6, r9
 800ba14:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800ba16:	2201      	movs	r2, #1
 800ba18:	4b53      	ldr	r3, [pc, #332]	; (800bb68 <DMA_Init+0x15c>)
{
 800ba1a:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800ba1c:	6959      	ldr	r1, [r3, #20]
{
 800ba1e:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800ba20:	4311      	orrs	r1, r2
 800ba22:	6159      	str	r1, [r3, #20]
 800ba24:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800ba26:	4c51      	ldr	r4, [pc, #324]	; (800bb6c <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800ba28:	400a      	ands	r2, r1
 800ba2a:	9200      	str	r2, [sp, #0]
 800ba2c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ba2e:	2202      	movs	r2, #2
 800ba30:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ba32:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800ba34:	4311      	orrs	r1, r2
 800ba36:	6159      	str	r1, [r3, #20]
 800ba38:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba3a:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800ba3c:	401a      	ands	r2, r3
 800ba3e:	9201      	str	r2, [sp, #4]
 800ba40:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800ba42:	4b4b      	ldr	r3, [pc, #300]	; (800bb70 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ba44:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800ba46:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba48:	2320      	movs	r3, #32
 800ba4a:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ba4c:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba4e:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ba50:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ba52:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba54:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba56:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba58:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ba5a:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800ba5c:	0020      	movs	r0, r4
 800ba5e:	f004 fb13 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ba62:	4b44      	ldr	r3, [pc, #272]	; (800bb74 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800ba64:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800ba66:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba68:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba6a:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ba6c:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ba6e:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba70:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba72:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba74:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ba76:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800ba78:	3038      	adds	r0, #56	; 0x38
 800ba7a:	f004 fb05 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800ba7e:	4b3e      	ldr	r3, [pc, #248]	; (800bb78 <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba80:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800ba82:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba84:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800ba86:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba88:	50e5      	str	r5, [r4, r3]
 800ba8a:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	50e2      	str	r2, [r4, r3]
 800ba90:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ba92:	3304      	adds	r3, #4
 800ba94:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba96:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ba98:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ba9a:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba9c:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800ba9e:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800baa0:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800baa2:	f004 faf1 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800baa6:	23a8      	movs	r3, #168	; 0xa8
 800baa8:	4a34      	ldr	r2, [pc, #208]	; (800bb7c <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800baaa:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800baac:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800baae:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bab0:	3304      	adds	r3, #4
 800bab2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bab4:	3304      	adds	r3, #4
 800bab6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bab8:	3304      	adds	r3, #4
 800baba:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800babc:	3304      	adds	r3, #4
 800babe:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bac0:	3304      	adds	r3, #4
 800bac2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bac4:	3304      	adds	r3, #4
 800bac6:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bac8:	3304      	adds	r3, #4
 800baca:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800bacc:	30a8      	adds	r0, #168	; 0xa8
 800bace:	f004 fadb 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800bad2:	23e0      	movs	r3, #224	; 0xe0
 800bad4:	4a2a      	ldr	r2, [pc, #168]	; (800bb80 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800bad6:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800bad8:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bada:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800badc:	3304      	adds	r3, #4
 800bade:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bae0:	3304      	adds	r3, #4
 800bae2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bae4:	3304      	adds	r3, #4
 800bae6:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bae8:	3304      	adds	r3, #4
 800baea:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800baec:	3304      	adds	r3, #4
 800baee:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800baf0:	3304      	adds	r3, #4
 800baf2:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800baf4:	3304      	adds	r3, #4
 800baf6:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800baf8:	30e0      	adds	r0, #224	; 0xe0
 800bafa:	f004 fac5 	bl	8010088 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800bafe:	4c21      	ldr	r4, [pc, #132]	; (800bb84 <DMA_Init+0x178>)
 800bb00:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <DMA_Init+0x17c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bb02:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800bb04:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb06:	2310      	movs	r3, #16
 800bb08:	469b      	mov	fp, r3
 800bb0a:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bb0c:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb0e:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb10:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bb12:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bb14:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800bb16:	0020      	movs	r0, r4
 800bb18:	f004 fab6 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800bb1c:	4b1b      	ldr	r3, [pc, #108]	; (800bb8c <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800bb1e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800bb20:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb22:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bb24:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb26:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bb28:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb2a:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb2c:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800bb2e:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bb30:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800bb32:	3038      	adds	r0, #56	; 0x38
 800bb34:	f004 faa8 	bl	8010088 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800bb38:	4b15      	ldr	r3, [pc, #84]	; (800bb90 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800bb3a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800bb3c:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bb3e:	465b      	mov	r3, fp
 800bb40:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb42:	4653      	mov	r3, sl
 800bb44:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bb46:	464b      	mov	r3, r9
 800bb48:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bb4a:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bb4c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bb4e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb50:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bb52:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800bb54:	3070      	adds	r0, #112	; 0x70
 800bb56:	f004 fa97 	bl	8010088 <HAL_DMA_Init>
}
 800bb5a:	b003      	add	sp, #12
 800bb5c:	bc3c      	pop	{r2, r3, r4, r5}
 800bb5e:	4690      	mov	r8, r2
 800bb60:	4699      	mov	r9, r3
 800bb62:	46a2      	mov	sl, r4
 800bb64:	46ab      	mov	fp, r5
 800bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb68:	40021000 	.word	0x40021000
 800bb6c:	20001d7c 	.word	0x20001d7c
 800bb70:	40020008 	.word	0x40020008
 800bb74:	40020030 	.word	0x40020030
 800bb78:	40020058 	.word	0x40020058
 800bb7c:	4002006c 	.word	0x4002006c
 800bb80:	4002041c 	.word	0x4002041c
 800bb84:	20001cd4 	.word	0x20001cd4
 800bb88:	4002001c 	.word	0x4002001c
 800bb8c:	40020044 	.word	0x40020044
 800bb90:	40020080 	.word	0x40020080

0800bb94 <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bb94:	2300      	movs	r3, #0
{
 800bb96:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bb98:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bb9a:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb9c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb9e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bba0:	3320      	adds	r3, #32
 800bba2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bba4:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bba6:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bba8:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800bbaa:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bbac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bbae:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800bbb0:	f004 fa6a 	bl	8010088 <HAL_DMA_Init>
}
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	46c0      	nop			; (mov r8, r8)

0800bbb8 <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bbb8:	2300      	movs	r3, #0
{
 800bbba:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bbbc:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bbbe:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800bbc0:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbc2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bbc4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bbc6:	3320      	adds	r3, #32
 800bbc8:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bbca:	2380      	movs	r3, #128	; 0x80
 800bbcc:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800bbce:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bbd0:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bbd2:	f004 fa59 	bl	8010088 <HAL_DMA_Init>
}
 800bbd6:	bd10      	pop	{r4, pc}

0800bbd8 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800bbd8:	6803      	ldr	r3, [r0, #0]
 800bbda:	4a21      	ldr	r2, [pc, #132]	; (800bc60 <SetupDMAInterrupts+0x88>)
{
 800bbdc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d01c      	beq.n	800bc1c <SetupDMAInterrupts+0x44>
 800bbe2:	d80e      	bhi.n	800bc02 <SetupDMAInterrupts+0x2a>
 800bbe4:	4a1f      	ldr	r2, [pc, #124]	; (800bc64 <SetupDMAInterrupts+0x8c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d026      	beq.n	800bc38 <SetupDMAInterrupts+0x60>
 800bbea:	d82d      	bhi.n	800bc48 <SetupDMAInterrupts+0x70>
 800bbec:	4a1e      	ldr	r2, [pc, #120]	; (800bc68 <SetupDMAInterrupts+0x90>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d131      	bne.n	800bc56 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800bbf2:	2009      	movs	r0, #9
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f004 f8bf 	bl	800fd78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800bbfa:	2009      	movs	r0, #9
 800bbfc:	f004 f8e8 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800bc00:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bc02:	4a1a      	ldr	r2, [pc, #104]	; (800bc6c <SetupDMAInterrupts+0x94>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d017      	beq.n	800bc38 <SetupDMAInterrupts+0x60>
 800bc08:	d910      	bls.n	800bc2c <SetupDMAInterrupts+0x54>
 800bc0a:	4a19      	ldr	r2, [pc, #100]	; (800bc70 <SetupDMAInterrupts+0x98>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d005      	beq.n	800bc1c <SetupDMAInterrupts+0x44>
 800bc10:	4a18      	ldr	r2, [pc, #96]	; (800bc74 <SetupDMAInterrupts+0x9c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d002      	beq.n	800bc1c <SetupDMAInterrupts+0x44>
 800bc16:	4a18      	ldr	r2, [pc, #96]	; (800bc78 <SetupDMAInterrupts+0xa0>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d1f1      	bne.n	800bc00 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	200b      	movs	r0, #11
 800bc20:	f004 f8aa 	bl	800fd78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bc24:	200b      	movs	r0, #11
 800bc26:	f004 f8d3 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
}
 800bc2a:	e7e9      	b.n	800bc00 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bc2c:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <SetupDMAInterrupts+0xa4>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d0f4      	beq.n	800bc1c <SetupDMAInterrupts+0x44>
 800bc32:	4a13      	ldr	r2, [pc, #76]	; (800bc80 <SetupDMAInterrupts+0xa8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d1e3      	bne.n	800bc00 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800bc38:	2200      	movs	r2, #0
 800bc3a:	200a      	movs	r0, #10
 800bc3c:	f004 f89c 	bl	800fd78 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bc40:	200a      	movs	r0, #10
 800bc42:	f004 f8c5 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
			break;
 800bc46:	e7db      	b.n	800bc00 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bc48:	4a0e      	ldr	r2, [pc, #56]	; (800bc84 <SetupDMAInterrupts+0xac>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d0e6      	beq.n	800bc1c <SetupDMAInterrupts+0x44>
 800bc4e:	4a0e      	ldr	r2, [pc, #56]	; (800bc88 <SetupDMAInterrupts+0xb0>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d1d5      	bne.n	800bc00 <SetupDMAInterrupts+0x28>
 800bc54:	e7e2      	b.n	800bc1c <SetupDMAInterrupts+0x44>
 800bc56:	4a0d      	ldr	r2, [pc, #52]	; (800bc8c <SetupDMAInterrupts+0xb4>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d0ed      	beq.n	800bc38 <SetupDMAInterrupts+0x60>
 800bc5c:	e7d0      	b.n	800bc00 <SetupDMAInterrupts+0x28>
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	4002006c 	.word	0x4002006c
 800bc64:	40020030 	.word	0x40020030
 800bc68:	40020008 	.word	0x40020008
 800bc6c:	4002041c 	.word	0x4002041c
 800bc70:	40020444 	.word	0x40020444
 800bc74:	40020458 	.word	0x40020458
 800bc78:	40020430 	.word	0x40020430
 800bc7c:	40020080 	.word	0x40020080
 800bc80:	40020408 	.word	0x40020408
 800bc84:	40020044 	.word	0x40020044
 800bc88:	40020058 	.word	0x40020058
 800bc8c:	4002001c 	.word	0x4002001c

0800bc90 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800bc90:	6803      	ldr	r3, [r0, #0]
 800bc92:	4a1b      	ldr	r2, [pc, #108]	; (800bd00 <UnSetupDMAInterrupts+0x70>)
{
 800bc94:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d018      	beq.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bc9a:	d80a      	bhi.n	800bcb2 <UnSetupDMAInterrupts+0x22>
 800bc9c:	4a19      	ldr	r2, [pc, #100]	; (800bd04 <UnSetupDMAInterrupts+0x74>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d01e      	beq.n	800bce0 <UnSetupDMAInterrupts+0x50>
 800bca2:	d821      	bhi.n	800bce8 <UnSetupDMAInterrupts+0x58>
 800bca4:	4a18      	ldr	r2, [pc, #96]	; (800bd08 <UnSetupDMAInterrupts+0x78>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d125      	bne.n	800bcf6 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bcaa:	2009      	movs	r0, #9
 800bcac:	f004 f89a 	bl	800fde4 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800bcb0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bcb2:	4a16      	ldr	r2, [pc, #88]	; (800bd0c <UnSetupDMAInterrupts+0x7c>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d013      	beq.n	800bce0 <UnSetupDMAInterrupts+0x50>
 800bcb8:	d90c      	bls.n	800bcd4 <UnSetupDMAInterrupts+0x44>
 800bcba:	4a15      	ldr	r2, [pc, #84]	; (800bd10 <UnSetupDMAInterrupts+0x80>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d005      	beq.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bcc0:	4a14      	ldr	r2, [pc, #80]	; (800bd14 <UnSetupDMAInterrupts+0x84>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d002      	beq.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bcc6:	4a14      	ldr	r2, [pc, #80]	; (800bd18 <UnSetupDMAInterrupts+0x88>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d1f1      	bne.n	800bcb0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bccc:	200b      	movs	r0, #11
 800bcce:	f004 f889 	bl	800fde4 <HAL_NVIC_DisableIRQ>
}
 800bcd2:	e7ed      	b.n	800bcb0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bcd4:	4a11      	ldr	r2, [pc, #68]	; (800bd1c <UnSetupDMAInterrupts+0x8c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d0f8      	beq.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bcda:	4a11      	ldr	r2, [pc, #68]	; (800bd20 <UnSetupDMAInterrupts+0x90>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d1e7      	bne.n	800bcb0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bce0:	200a      	movs	r0, #10
 800bce2:	f004 f87f 	bl	800fde4 <HAL_NVIC_DisableIRQ>
			break;
 800bce6:	e7e3      	b.n	800bcb0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bce8:	4a0e      	ldr	r2, [pc, #56]	; (800bd24 <UnSetupDMAInterrupts+0x94>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d0ee      	beq.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bcee:	4a0e      	ldr	r2, [pc, #56]	; (800bd28 <UnSetupDMAInterrupts+0x98>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d1dd      	bne.n	800bcb0 <UnSetupDMAInterrupts+0x20>
 800bcf4:	e7ea      	b.n	800bccc <UnSetupDMAInterrupts+0x3c>
 800bcf6:	4a0d      	ldr	r2, [pc, #52]	; (800bd2c <UnSetupDMAInterrupts+0x9c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d0f1      	beq.n	800bce0 <UnSetupDMAInterrupts+0x50>
 800bcfc:	e7d8      	b.n	800bcb0 <UnSetupDMAInterrupts+0x20>
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	4002006c 	.word	0x4002006c
 800bd04:	40020030 	.word	0x40020030
 800bd08:	40020008 	.word	0x40020008
 800bd0c:	4002041c 	.word	0x4002041c
 800bd10:	40020444 	.word	0x40020444
 800bd14:	40020458 	.word	0x40020458
 800bd18:	40020430 	.word	0x40020430
 800bd1c:	40020080 	.word	0x40020080
 800bd20:	40020408 	.word	0x40020408
 800bd24:	40020044 	.word	0x40020044
 800bd28:	40020058 	.word	0x40020058
 800bd2c:	4002001c 	.word	0x4002001c

0800bd30 <DMA_MSG_TX_UnSetup>:
{	
 800bd30:	b510      	push	{r4, lr}
 800bd32:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bd34:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bd36:	f7ff ffab 	bl	800bc90 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bd3e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800bd40:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bd42:	bd10      	pop	{r4, pc}

0800bd44 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bd44:	6803      	ldr	r3, [r0, #0]
 800bd46:	4ac6      	ldr	r2, [pc, #792]	; (800c060 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800bd48:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d03a      	beq.n	800bdc4 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bd4e:	4ac5      	ldr	r2, [pc, #788]	; (800c064 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d058      	beq.n	800be06 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bd54:	4ac4      	ldr	r2, [pc, #784]	; (800c068 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d100      	bne.n	800bd5c <RemapAndLinkDMAtoUARTRx+0x18>
 800bd5a:	e093      	b.n	800be84 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bd5c:	4ac3      	ldr	r2, [pc, #780]	; (800c06c <RemapAndLinkDMAtoUARTRx+0x328>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d100      	bne.n	800bd64 <RemapAndLinkDMAtoUARTRx+0x20>
 800bd62:	e0c0      	b.n	800bee6 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bd64:	4ac2      	ldr	r2, [pc, #776]	; (800c070 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d100      	bne.n	800bd6c <RemapAndLinkDMAtoUARTRx+0x28>
 800bd6a:	e19d      	b.n	800c0a8 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bd6c:	4ac1      	ldr	r2, [pc, #772]	; (800c074 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d100      	bne.n	800bd74 <RemapAndLinkDMAtoUARTRx+0x30>
 800bd72:	e1b9      	b.n	800c0e8 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bd74:	4ac0      	ldr	r2, [pc, #768]	; (800c078 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d000      	beq.n	800bd7c <RemapAndLinkDMAtoUARTRx+0x38>
 800bd7a:	e265      	b.n	800c248 <RemapAndLinkDMAtoUARTRx+0x504>
 800bd7c:	680b      	ldr	r3, [r1, #0]
 800bd7e:	4abf      	ldr	r2, [pc, #764]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x338>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d100      	bne.n	800bd86 <RemapAndLinkDMAtoUARTRx+0x42>
 800bd84:	e230      	b.n	800c1e8 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800bd86:	4abe      	ldr	r2, [pc, #760]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d100      	bne.n	800bd8e <RemapAndLinkDMAtoUARTRx+0x4a>
 800bd8c:	e237      	b.n	800c1fe <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800bd8e:	4abd      	ldr	r2, [pc, #756]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d100      	bne.n	800bd96 <RemapAndLinkDMAtoUARTRx+0x52>
 800bd94:	e235      	b.n	800c202 <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800bd96:	4abc      	ldr	r2, [pc, #752]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d100      	bne.n	800bd9e <RemapAndLinkDMAtoUARTRx+0x5a>
 800bd9c:	e23d      	b.n	800c21a <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800bd9e:	4abb      	ldr	r2, [pc, #748]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x348>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d100      	bne.n	800bda6 <RemapAndLinkDMAtoUARTRx+0x62>
 800bda4:	e245      	b.n	800c232 <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800bda6:	4aba      	ldr	r2, [pc, #744]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d145      	bne.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800bdac:	4ab9      	ldr	r2, [pc, #740]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdae:	23a8      	movs	r3, #168	; 0xa8
 800bdb0:	4db9      	ldr	r5, [pc, #740]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bdb2:	58d4      	ldr	r4, [r2, r3]
 800bdb4:	402c      	ands	r4, r5
 800bdb6:	50d4      	str	r4, [r2, r3]
 800bdb8:	24e0      	movs	r4, #224	; 0xe0
 800bdba:	58d5      	ldr	r5, [r2, r3]
 800bdbc:	0124      	lsls	r4, r4, #4
 800bdbe:	432c      	orrs	r4, r5
 800bdc0:	50d4      	str	r4, [r2, r3]
 800bdc2:	e039      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bdc4:	680b      	ldr	r3, [r1, #0]
 800bdc6:	4aad      	ldr	r2, [pc, #692]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x338>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d100      	bne.n	800bdce <RemapAndLinkDMAtoUARTRx+0x8a>
 800bdcc:	e07e      	b.n	800becc <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bdce:	4aac      	ldr	r2, [pc, #688]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d100      	bne.n	800bdd6 <RemapAndLinkDMAtoUARTRx+0x92>
 800bdd4:	e085      	b.n	800bee2 <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bdd6:	4aab      	ldr	r2, [pc, #684]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d030      	beq.n	800be3e <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bddc:	4aaa      	ldr	r2, [pc, #680]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d039      	beq.n	800be56 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bde2:	4aaa      	ldr	r2, [pc, #680]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x348>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d042      	beq.n	800be6e <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bde8:	4aa9      	ldr	r2, [pc, #676]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d124      	bne.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bdee:	4aa9      	ldr	r2, [pc, #676]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdf0:	23a8      	movs	r3, #168	; 0xa8
 800bdf2:	4da9      	ldr	r5, [pc, #676]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bdf4:	58d4      	ldr	r4, [r2, r3]
 800bdf6:	402c      	ands	r4, r5
 800bdf8:	50d4      	str	r4, [r2, r3]
 800bdfa:	2480      	movs	r4, #128	; 0x80
 800bdfc:	58d5      	ldr	r5, [r2, r3]
 800bdfe:	0124      	lsls	r4, r4, #4
 800be00:	432c      	orrs	r4, r5
 800be02:	50d4      	str	r4, [r2, r3]
 800be04:	e018      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800be06:	680b      	ldr	r3, [r1, #0]
 800be08:	4a9c      	ldr	r2, [pc, #624]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x338>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d100      	bne.n	800be10 <RemapAndLinkDMAtoUARTRx+0xcc>
 800be0e:	e0b0      	b.n	800bf72 <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800be10:	4a9b      	ldr	r2, [pc, #620]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d100      	bne.n	800be18 <RemapAndLinkDMAtoUARTRx+0xd4>
 800be16:	e0b7      	b.n	800bf88 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800be18:	4a9a      	ldr	r2, [pc, #616]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x340>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d100      	bne.n	800be20 <RemapAndLinkDMAtoUARTRx+0xdc>
 800be1e:	e0bf      	b.n	800bfa0 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800be20:	4a99      	ldr	r2, [pc, #612]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x344>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d100      	bne.n	800be28 <RemapAndLinkDMAtoUARTRx+0xe4>
 800be26:	e0c7      	b.n	800bfb8 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800be28:	4a98      	ldr	r2, [pc, #608]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x348>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d100      	bne.n	800be30 <RemapAndLinkDMAtoUARTRx+0xec>
 800be2e:	e0cf      	b.n	800bfd0 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800be30:	4a97      	ldr	r2, [pc, #604]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d100      	bne.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
 800be36:	e0d6      	b.n	800bfe6 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800be38:	6641      	str	r1, [r0, #100]	; 0x64
 800be3a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800be3c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800be3e:	23a8      	movs	r3, #168	; 0xa8
 800be40:	4a96      	ldr	r2, [pc, #600]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800be42:	4d97      	ldr	r5, [pc, #604]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800be44:	58d4      	ldr	r4, [r2, r3]
 800be46:	402c      	ands	r4, r5
 800be48:	50d4      	str	r4, [r2, r3]
 800be4a:	2480      	movs	r4, #128	; 0x80
 800be4c:	58d5      	ldr	r5, [r2, r3]
 800be4e:	0324      	lsls	r4, r4, #12
 800be50:	432c      	orrs	r4, r5
 800be52:	50d4      	str	r4, [r2, r3]
 800be54:	e7f0      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800be56:	23a8      	movs	r3, #168	; 0xa8
 800be58:	4a90      	ldr	r2, [pc, #576]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800be5a:	4d92      	ldr	r5, [pc, #584]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800be5c:	58d4      	ldr	r4, [r2, r3]
 800be5e:	402c      	ands	r4, r5
 800be60:	50d4      	str	r4, [r2, r3]
 800be62:	2480      	movs	r4, #128	; 0x80
 800be64:	58d5      	ldr	r5, [r2, r3]
 800be66:	0424      	lsls	r4, r4, #16
 800be68:	432c      	orrs	r4, r5
 800be6a:	50d4      	str	r4, [r2, r3]
 800be6c:	e7e4      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800be6e:	23a8      	movs	r3, #168	; 0xa8
 800be70:	25f0      	movs	r5, #240	; 0xf0
 800be72:	4a88      	ldr	r2, [pc, #544]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800be74:	58d4      	ldr	r4, [r2, r3]
 800be76:	43ac      	bics	r4, r5
 800be78:	50d4      	str	r4, [r2, r3]
 800be7a:	58d4      	ldr	r4, [r2, r3]
 800be7c:	3d70      	subs	r5, #112	; 0x70
 800be7e:	432c      	orrs	r4, r5
 800be80:	50d4      	str	r4, [r2, r3]
 800be82:	e7d9      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	4a7d      	ldr	r2, [pc, #500]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x338>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d100      	bne.n	800be8e <RemapAndLinkDMAtoUARTRx+0x14a>
 800be8c:	e0ad      	b.n	800bfea <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800be8e:	4a7c      	ldr	r2, [pc, #496]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d100      	bne.n	800be96 <RemapAndLinkDMAtoUARTRx+0x152>
 800be94:	e0b4      	b.n	800c000 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800be96:	4a7b      	ldr	r2, [pc, #492]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x340>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d100      	bne.n	800be9e <RemapAndLinkDMAtoUARTRx+0x15a>
 800be9c:	e0b2      	b.n	800c004 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800be9e:	4a7a      	ldr	r2, [pc, #488]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d100      	bne.n	800bea6 <RemapAndLinkDMAtoUARTRx+0x162>
 800bea4:	e0ba      	b.n	800c01c <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bea6:	4a79      	ldr	r2, [pc, #484]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x348>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d100      	bne.n	800beae <RemapAndLinkDMAtoUARTRx+0x16a>
 800beac:	e0c2      	b.n	800c034 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800beae:	4a78      	ldr	r2, [pc, #480]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d1c1      	bne.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800beb4:	4a77      	ldr	r2, [pc, #476]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800beb6:	23a8      	movs	r3, #168	; 0xa8
 800beb8:	4d77      	ldr	r5, [pc, #476]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x354>)
 800beba:	58d4      	ldr	r4, [r2, r3]
 800bebc:	402c      	ands	r4, r5
 800bebe:	50d4      	str	r4, [r2, r3]
 800bec0:	24a0      	movs	r4, #160	; 0xa0
 800bec2:	58d5      	ldr	r5, [r2, r3]
 800bec4:	0124      	lsls	r4, r4, #4
 800bec6:	432c      	orrs	r4, r5
 800bec8:	50d4      	str	r4, [r2, r3]
 800beca:	e7b5      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800becc:	23a8      	movs	r3, #168	; 0xa8
 800bece:	250f      	movs	r5, #15
 800bed0:	4a72      	ldr	r2, [pc, #456]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bed2:	58d4      	ldr	r4, [r2, r3]
 800bed4:	43ac      	bics	r4, r5
 800bed6:	50d4      	str	r4, [r2, r3]
 800bed8:	58d4      	ldr	r4, [r2, r3]
 800beda:	3d07      	subs	r5, #7
 800bedc:	432c      	orrs	r4, r5
 800bede:	50d4      	str	r4, [r2, r3]
 800bee0:	e7aa      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800bee2:	4a6e      	ldr	r2, [pc, #440]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bee4:	e784      	b.n	800bdf0 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bee6:	680b      	ldr	r3, [r1, #0]
 800bee8:	4a64      	ldr	r2, [pc, #400]	; (800c07c <RemapAndLinkDMAtoUARTRx+0x338>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d01c      	beq.n	800bf28 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800beee:	4a64      	ldr	r2, [pc, #400]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d024      	beq.n	800bf3e <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800bef4:	4a63      	ldr	r2, [pc, #396]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d023      	beq.n	800bf42 <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800befa:	4a63      	ldr	r2, [pc, #396]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x344>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d02c      	beq.n	800bf5a <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800bf00:	4a62      	ldr	r2, [pc, #392]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x348>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d100      	bne.n	800bf08 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800bf06:	e0a0      	b.n	800c04a <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800bf08:	4a61      	ldr	r2, [pc, #388]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d000      	beq.n	800bf10 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800bf0e:	e793      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800bf10:	4a60      	ldr	r2, [pc, #384]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bf12:	23a8      	movs	r3, #168	; 0xa8
 800bf14:	4d60      	ldr	r5, [pc, #384]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bf16:	58d4      	ldr	r4, [r2, r3]
 800bf18:	402c      	ands	r4, r5
 800bf1a:	50d4      	str	r4, [r2, r3]
 800bf1c:	24b0      	movs	r4, #176	; 0xb0
 800bf1e:	58d5      	ldr	r5, [r2, r3]
 800bf20:	0124      	lsls	r4, r4, #4
 800bf22:	432c      	orrs	r4, r5
 800bf24:	50d4      	str	r4, [r2, r3]
 800bf26:	e787      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bf28:	23a8      	movs	r3, #168	; 0xa8
 800bf2a:	250f      	movs	r5, #15
 800bf2c:	4a5b      	ldr	r2, [pc, #364]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf2e:	58d4      	ldr	r4, [r2, r3]
 800bf30:	43ac      	bics	r4, r5
 800bf32:	50d4      	str	r4, [r2, r3]
 800bf34:	58d4      	ldr	r4, [r2, r3]
 800bf36:	3d04      	subs	r5, #4
 800bf38:	432c      	orrs	r4, r5
 800bf3a:	50d4      	str	r4, [r2, r3]
 800bf3c:	e77c      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bf3e:	4a57      	ldr	r2, [pc, #348]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf40:	e7e7      	b.n	800bf12 <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bf42:	23a8      	movs	r3, #168	; 0xa8
 800bf44:	4a55      	ldr	r2, [pc, #340]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf46:	4d56      	ldr	r5, [pc, #344]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bf48:	58d4      	ldr	r4, [r2, r3]
 800bf4a:	402c      	ands	r4, r5
 800bf4c:	50d4      	str	r4, [r2, r3]
 800bf4e:	24b0      	movs	r4, #176	; 0xb0
 800bf50:	58d5      	ldr	r5, [r2, r3]
 800bf52:	0324      	lsls	r4, r4, #12
 800bf54:	432c      	orrs	r4, r5
 800bf56:	50d4      	str	r4, [r2, r3]
 800bf58:	e76e      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bf5a:	23a8      	movs	r3, #168	; 0xa8
 800bf5c:	4a4f      	ldr	r2, [pc, #316]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf5e:	4d51      	ldr	r5, [pc, #324]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bf60:	58d4      	ldr	r4, [r2, r3]
 800bf62:	402c      	ands	r4, r5
 800bf64:	50d4      	str	r4, [r2, r3]
 800bf66:	24b0      	movs	r4, #176	; 0xb0
 800bf68:	58d5      	ldr	r5, [r2, r3]
 800bf6a:	0424      	lsls	r4, r4, #16
 800bf6c:	432c      	orrs	r4, r5
 800bf6e:	50d4      	str	r4, [r2, r3]
 800bf70:	e762      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bf72:	23a8      	movs	r3, #168	; 0xa8
 800bf74:	250f      	movs	r5, #15
 800bf76:	4a49      	ldr	r2, [pc, #292]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf78:	58d4      	ldr	r4, [r2, r3]
 800bf7a:	43ac      	bics	r4, r5
 800bf7c:	50d4      	str	r4, [r2, r3]
 800bf7e:	58d4      	ldr	r4, [r2, r3]
 800bf80:	3d06      	subs	r5, #6
 800bf82:	432c      	orrs	r4, r5
 800bf84:	50d4      	str	r4, [r2, r3]
 800bf86:	e757      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bf88:	4a44      	ldr	r2, [pc, #272]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bf8a:	23a8      	movs	r3, #168	; 0xa8
 800bf8c:	4d42      	ldr	r5, [pc, #264]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bf8e:	58d4      	ldr	r4, [r2, r3]
 800bf90:	402c      	ands	r4, r5
 800bf92:	50d4      	str	r4, [r2, r3]
 800bf94:	2490      	movs	r4, #144	; 0x90
 800bf96:	58d5      	ldr	r5, [r2, r3]
 800bf98:	0124      	lsls	r4, r4, #4
 800bf9a:	432c      	orrs	r4, r5
 800bf9c:	50d4      	str	r4, [r2, r3]
 800bf9e:	e74b      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bfa0:	23a8      	movs	r3, #168	; 0xa8
 800bfa2:	4a3e      	ldr	r2, [pc, #248]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bfa4:	4d3e      	ldr	r5, [pc, #248]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bfa6:	58d4      	ldr	r4, [r2, r3]
 800bfa8:	402c      	ands	r4, r5
 800bfaa:	50d4      	str	r4, [r2, r3]
 800bfac:	2490      	movs	r4, #144	; 0x90
 800bfae:	58d5      	ldr	r5, [r2, r3]
 800bfb0:	0324      	lsls	r4, r4, #12
 800bfb2:	432c      	orrs	r4, r5
 800bfb4:	50d4      	str	r4, [r2, r3]
 800bfb6:	e73f      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bfb8:	23a8      	movs	r3, #168	; 0xa8
 800bfba:	4a38      	ldr	r2, [pc, #224]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bfbc:	4d39      	ldr	r5, [pc, #228]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bfbe:	58d4      	ldr	r4, [r2, r3]
 800bfc0:	402c      	ands	r4, r5
 800bfc2:	50d4      	str	r4, [r2, r3]
 800bfc4:	2490      	movs	r4, #144	; 0x90
 800bfc6:	58d5      	ldr	r5, [r2, r3]
 800bfc8:	0424      	lsls	r4, r4, #16
 800bfca:	432c      	orrs	r4, r5
 800bfcc:	50d4      	str	r4, [r2, r3]
 800bfce:	e733      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bfd0:	23a8      	movs	r3, #168	; 0xa8
 800bfd2:	25f0      	movs	r5, #240	; 0xf0
 800bfd4:	4a2f      	ldr	r2, [pc, #188]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bfd6:	58d4      	ldr	r4, [r2, r3]
 800bfd8:	43ac      	bics	r4, r5
 800bfda:	50d4      	str	r4, [r2, r3]
 800bfdc:	58d4      	ldr	r4, [r2, r3]
 800bfde:	3d60      	subs	r5, #96	; 0x60
 800bfe0:	432c      	orrs	r4, r5
 800bfe2:	50d4      	str	r4, [r2, r3]
 800bfe4:	e728      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bfe6:	4a2b      	ldr	r2, [pc, #172]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bfe8:	e7cf      	b.n	800bf8a <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bfea:	23a8      	movs	r3, #168	; 0xa8
 800bfec:	250f      	movs	r5, #15
 800bfee:	4a2b      	ldr	r2, [pc, #172]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800bff0:	58d4      	ldr	r4, [r2, r3]
 800bff2:	43ac      	bics	r4, r5
 800bff4:	50d4      	str	r4, [r2, r3]
 800bff6:	58d4      	ldr	r4, [r2, r3]
 800bff8:	3d05      	subs	r5, #5
 800bffa:	432c      	orrs	r4, r5
 800bffc:	50d4      	str	r4, [r2, r3]
 800bffe:	e71b      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c000:	4a26      	ldr	r2, [pc, #152]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c002:	e758      	b.n	800beb6 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c004:	23a8      	movs	r3, #168	; 0xa8
 800c006:	4a25      	ldr	r2, [pc, #148]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c008:	4d25      	ldr	r5, [pc, #148]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c00a:	58d4      	ldr	r4, [r2, r3]
 800c00c:	402c      	ands	r4, r5
 800c00e:	50d4      	str	r4, [r2, r3]
 800c010:	24a0      	movs	r4, #160	; 0xa0
 800c012:	58d5      	ldr	r5, [r2, r3]
 800c014:	0324      	lsls	r4, r4, #12
 800c016:	432c      	orrs	r4, r5
 800c018:	50d4      	str	r4, [r2, r3]
 800c01a:	e70d      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c01c:	23a8      	movs	r3, #168	; 0xa8
 800c01e:	4a1f      	ldr	r2, [pc, #124]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c020:	4d20      	ldr	r5, [pc, #128]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c022:	58d4      	ldr	r4, [r2, r3]
 800c024:	402c      	ands	r4, r5
 800c026:	50d4      	str	r4, [r2, r3]
 800c028:	24a0      	movs	r4, #160	; 0xa0
 800c02a:	58d5      	ldr	r5, [r2, r3]
 800c02c:	0424      	lsls	r4, r4, #16
 800c02e:	432c      	orrs	r4, r5
 800c030:	50d4      	str	r4, [r2, r3]
 800c032:	e701      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c034:	23a8      	movs	r3, #168	; 0xa8
 800c036:	25f0      	movs	r5, #240	; 0xf0
 800c038:	4a16      	ldr	r2, [pc, #88]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c03a:	58d4      	ldr	r4, [r2, r3]
 800c03c:	43ac      	bics	r4, r5
 800c03e:	50d4      	str	r4, [r2, r3]
 800c040:	58d4      	ldr	r4, [r2, r3]
 800c042:	3d50      	subs	r5, #80	; 0x50
 800c044:	432c      	orrs	r4, r5
 800c046:	50d4      	str	r4, [r2, r3]
 800c048:	e6f6      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c04a:	23a8      	movs	r3, #168	; 0xa8
 800c04c:	25f0      	movs	r5, #240	; 0xf0
 800c04e:	4a11      	ldr	r2, [pc, #68]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c050:	58d4      	ldr	r4, [r2, r3]
 800c052:	43ac      	bics	r4, r5
 800c054:	50d4      	str	r4, [r2, r3]
 800c056:	58d4      	ldr	r4, [r2, r3]
 800c058:	3d40      	subs	r5, #64	; 0x40
 800c05a:	432c      	orrs	r4, r5
 800c05c:	50d4      	str	r4, [r2, r3]
 800c05e:	e6eb      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c060:	40013800 	.word	0x40013800
 800c064:	40004400 	.word	0x40004400
 800c068:	40004800 	.word	0x40004800
 800c06c:	40004c00 	.word	0x40004c00
 800c070:	40005000 	.word	0x40005000
 800c074:	40011400 	.word	0x40011400
 800c078:	40011800 	.word	0x40011800
 800c07c:	40020008 	.word	0x40020008
 800c080:	40020030 	.word	0x40020030
 800c084:	40020058 	.word	0x40020058
 800c088:	4002006c 	.word	0x4002006c
 800c08c:	4002041c 	.word	0x4002041c
 800c090:	40020430 	.word	0x40020430
 800c094:	40020400 	.word	0x40020400
 800c098:	fffff0ff 	.word	0xfffff0ff
 800c09c:	40020000 	.word	0x40020000
 800c0a0:	fff0ffff 	.word	0xfff0ffff
 800c0a4:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c0a8:	680b      	ldr	r3, [r1, #0]
 800c0aa:	4a8e      	ldr	r2, [pc, #568]	; (800c2e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d03b      	beq.n	800c128 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c0b0:	4a8d      	ldr	r2, [pc, #564]	; (800c2e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d043      	beq.n	800c13e <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c0b6:	4a8d      	ldr	r2, [pc, #564]	; (800c2ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d042      	beq.n	800c142 <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c0bc:	4a8c      	ldr	r2, [pc, #560]	; (800c2f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d04b      	beq.n	800c15a <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c0c2:	4a8c      	ldr	r2, [pc, #560]	; (800c2f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d054      	beq.n	800c172 <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c0c8:	4a8b      	ldr	r2, [pc, #556]	; (800c2f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d000      	beq.n	800c0d0 <RemapAndLinkDMAtoUARTRx+0x38c>
 800c0ce:	e6b3      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c0d0:	4a8a      	ldr	r2, [pc, #552]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c0d2:	23a8      	movs	r3, #168	; 0xa8
 800c0d4:	4d8a      	ldr	r5, [pc, #552]	; (800c300 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c0d6:	58d4      	ldr	r4, [r2, r3]
 800c0d8:	402c      	ands	r4, r5
 800c0da:	50d4      	str	r4, [r2, r3]
 800c0dc:	24c0      	movs	r4, #192	; 0xc0
 800c0de:	58d5      	ldr	r5, [r2, r3]
 800c0e0:	0124      	lsls	r4, r4, #4
 800c0e2:	432c      	orrs	r4, r5
 800c0e4:	50d4      	str	r4, [r2, r3]
 800c0e6:	e6a7      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c0e8:	680b      	ldr	r3, [r1, #0]
 800c0ea:	4a7e      	ldr	r2, [pc, #504]	; (800c2e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d04b      	beq.n	800c188 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c0f0:	4a7d      	ldr	r2, [pc, #500]	; (800c2e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d053      	beq.n	800c19e <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c0f6:	4a7d      	ldr	r2, [pc, #500]	; (800c2ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d052      	beq.n	800c1a2 <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c0fc:	4a7c      	ldr	r2, [pc, #496]	; (800c2f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d05b      	beq.n	800c1ba <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c102:	4a7c      	ldr	r2, [pc, #496]	; (800c2f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d064      	beq.n	800c1d2 <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c108:	4a7b      	ldr	r2, [pc, #492]	; (800c2f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d000      	beq.n	800c110 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800c10e:	e693      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c110:	4a7a      	ldr	r2, [pc, #488]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c112:	23a8      	movs	r3, #168	; 0xa8
 800c114:	4d7a      	ldr	r5, [pc, #488]	; (800c300 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c116:	58d4      	ldr	r4, [r2, r3]
 800c118:	402c      	ands	r4, r5
 800c11a:	50d4      	str	r4, [r2, r3]
 800c11c:	24d0      	movs	r4, #208	; 0xd0
 800c11e:	58d5      	ldr	r5, [r2, r3]
 800c120:	0124      	lsls	r4, r4, #4
 800c122:	432c      	orrs	r4, r5
 800c124:	50d4      	str	r4, [r2, r3]
 800c126:	e687      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c128:	23a8      	movs	r3, #168	; 0xa8
 800c12a:	250f      	movs	r5, #15
 800c12c:	4a75      	ldr	r2, [pc, #468]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c12e:	58d4      	ldr	r4, [r2, r3]
 800c130:	43ac      	bics	r4, r5
 800c132:	50d4      	str	r4, [r2, r3]
 800c134:	58d4      	ldr	r4, [r2, r3]
 800c136:	3d03      	subs	r5, #3
 800c138:	432c      	orrs	r4, r5
 800c13a:	50d4      	str	r4, [r2, r3]
 800c13c:	e67c      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c13e:	4a71      	ldr	r2, [pc, #452]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c140:	e7c7      	b.n	800c0d2 <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c142:	23a8      	movs	r3, #168	; 0xa8
 800c144:	4a6f      	ldr	r2, [pc, #444]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c146:	4d70      	ldr	r5, [pc, #448]	; (800c308 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c148:	58d4      	ldr	r4, [r2, r3]
 800c14a:	402c      	ands	r4, r5
 800c14c:	50d4      	str	r4, [r2, r3]
 800c14e:	24c0      	movs	r4, #192	; 0xc0
 800c150:	58d5      	ldr	r5, [r2, r3]
 800c152:	0324      	lsls	r4, r4, #12
 800c154:	432c      	orrs	r4, r5
 800c156:	50d4      	str	r4, [r2, r3]
 800c158:	e66e      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c15a:	23a8      	movs	r3, #168	; 0xa8
 800c15c:	4a69      	ldr	r2, [pc, #420]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c15e:	4d6b      	ldr	r5, [pc, #428]	; (800c30c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c160:	58d4      	ldr	r4, [r2, r3]
 800c162:	402c      	ands	r4, r5
 800c164:	50d4      	str	r4, [r2, r3]
 800c166:	24c0      	movs	r4, #192	; 0xc0
 800c168:	58d5      	ldr	r5, [r2, r3]
 800c16a:	0424      	lsls	r4, r4, #16
 800c16c:	432c      	orrs	r4, r5
 800c16e:	50d4      	str	r4, [r2, r3]
 800c170:	e662      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c172:	23a8      	movs	r3, #168	; 0xa8
 800c174:	25f0      	movs	r5, #240	; 0xf0
 800c176:	4a61      	ldr	r2, [pc, #388]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c178:	58d4      	ldr	r4, [r2, r3]
 800c17a:	43ac      	bics	r4, r5
 800c17c:	50d4      	str	r4, [r2, r3]
 800c17e:	58d4      	ldr	r4, [r2, r3]
 800c180:	3d30      	subs	r5, #48	; 0x30
 800c182:	432c      	orrs	r4, r5
 800c184:	50d4      	str	r4, [r2, r3]
 800c186:	e657      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c188:	23a8      	movs	r3, #168	; 0xa8
 800c18a:	250f      	movs	r5, #15
 800c18c:	4a5d      	ldr	r2, [pc, #372]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c18e:	58d4      	ldr	r4, [r2, r3]
 800c190:	43ac      	bics	r4, r5
 800c192:	50d4      	str	r4, [r2, r3]
 800c194:	58d4      	ldr	r4, [r2, r3]
 800c196:	3d02      	subs	r5, #2
 800c198:	432c      	orrs	r4, r5
 800c19a:	50d4      	str	r4, [r2, r3]
 800c19c:	e64c      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c19e:	4a59      	ldr	r2, [pc, #356]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c1a0:	e7b7      	b.n	800c112 <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c1a2:	23a8      	movs	r3, #168	; 0xa8
 800c1a4:	4a57      	ldr	r2, [pc, #348]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c1a6:	4d58      	ldr	r5, [pc, #352]	; (800c308 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c1a8:	58d4      	ldr	r4, [r2, r3]
 800c1aa:	402c      	ands	r4, r5
 800c1ac:	50d4      	str	r4, [r2, r3]
 800c1ae:	24d0      	movs	r4, #208	; 0xd0
 800c1b0:	58d5      	ldr	r5, [r2, r3]
 800c1b2:	0324      	lsls	r4, r4, #12
 800c1b4:	432c      	orrs	r4, r5
 800c1b6:	50d4      	str	r4, [r2, r3]
 800c1b8:	e63e      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c1ba:	23a8      	movs	r3, #168	; 0xa8
 800c1bc:	4a51      	ldr	r2, [pc, #324]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c1be:	4d53      	ldr	r5, [pc, #332]	; (800c30c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c1c0:	58d4      	ldr	r4, [r2, r3]
 800c1c2:	402c      	ands	r4, r5
 800c1c4:	50d4      	str	r4, [r2, r3]
 800c1c6:	24d0      	movs	r4, #208	; 0xd0
 800c1c8:	58d5      	ldr	r5, [r2, r3]
 800c1ca:	0424      	lsls	r4, r4, #16
 800c1cc:	432c      	orrs	r4, r5
 800c1ce:	50d4      	str	r4, [r2, r3]
 800c1d0:	e632      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c1d2:	23a8      	movs	r3, #168	; 0xa8
 800c1d4:	25f0      	movs	r5, #240	; 0xf0
 800c1d6:	4a49      	ldr	r2, [pc, #292]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c1d8:	58d4      	ldr	r4, [r2, r3]
 800c1da:	43ac      	bics	r4, r5
 800c1dc:	50d4      	str	r4, [r2, r3]
 800c1de:	58d4      	ldr	r4, [r2, r3]
 800c1e0:	3d20      	subs	r5, #32
 800c1e2:	432c      	orrs	r4, r5
 800c1e4:	50d4      	str	r4, [r2, r3]
 800c1e6:	e627      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c1e8:	23a8      	movs	r3, #168	; 0xa8
 800c1ea:	250f      	movs	r5, #15
 800c1ec:	4a45      	ldr	r2, [pc, #276]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c1ee:	58d4      	ldr	r4, [r2, r3]
 800c1f0:	43ac      	bics	r4, r5
 800c1f2:	50d4      	str	r4, [r2, r3]
 800c1f4:	58d4      	ldr	r4, [r2, r3]
 800c1f6:	3d01      	subs	r5, #1
 800c1f8:	432c      	orrs	r4, r5
 800c1fa:	50d4      	str	r4, [r2, r3]
 800c1fc:	e61c      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c1fe:	4a41      	ldr	r2, [pc, #260]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c200:	e5d5      	b.n	800bdae <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c202:	23a8      	movs	r3, #168	; 0xa8
 800c204:	4a3f      	ldr	r2, [pc, #252]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c206:	4d40      	ldr	r5, [pc, #256]	; (800c308 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c208:	58d4      	ldr	r4, [r2, r3]
 800c20a:	402c      	ands	r4, r5
 800c20c:	50d4      	str	r4, [r2, r3]
 800c20e:	24e0      	movs	r4, #224	; 0xe0
 800c210:	58d5      	ldr	r5, [r2, r3]
 800c212:	0324      	lsls	r4, r4, #12
 800c214:	432c      	orrs	r4, r5
 800c216:	50d4      	str	r4, [r2, r3]
 800c218:	e60e      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c21a:	23a8      	movs	r3, #168	; 0xa8
 800c21c:	4a39      	ldr	r2, [pc, #228]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c21e:	4d3b      	ldr	r5, [pc, #236]	; (800c30c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c220:	58d4      	ldr	r4, [r2, r3]
 800c222:	402c      	ands	r4, r5
 800c224:	50d4      	str	r4, [r2, r3]
 800c226:	24e0      	movs	r4, #224	; 0xe0
 800c228:	58d5      	ldr	r5, [r2, r3]
 800c22a:	0424      	lsls	r4, r4, #16
 800c22c:	432c      	orrs	r4, r5
 800c22e:	50d4      	str	r4, [r2, r3]
 800c230:	e602      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c232:	23a8      	movs	r3, #168	; 0xa8
 800c234:	25f0      	movs	r5, #240	; 0xf0
 800c236:	4a31      	ldr	r2, [pc, #196]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c238:	58d4      	ldr	r4, [r2, r3]
 800c23a:	43ac      	bics	r4, r5
 800c23c:	50d4      	str	r4, [r2, r3]
 800c23e:	58d4      	ldr	r4, [r2, r3]
 800c240:	3d10      	subs	r5, #16
 800c242:	432c      	orrs	r4, r5
 800c244:	50d4      	str	r4, [r2, r3]
 800c246:	e5f7      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c248:	4a31      	ldr	r2, [pc, #196]	; (800c310 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d000      	beq.n	800c250 <RemapAndLinkDMAtoUARTRx+0x50c>
 800c24e:	e5f3      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c250:	680b      	ldr	r3, [r1, #0]
 800c252:	4a24      	ldr	r2, [pc, #144]	; (800c2e4 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d01b      	beq.n	800c290 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c258:	4a23      	ldr	r2, [pc, #140]	; (800c2e8 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d022      	beq.n	800c2a4 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c25e:	4a23      	ldr	r2, [pc, #140]	; (800c2ec <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d021      	beq.n	800c2a8 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c264:	4a22      	ldr	r2, [pc, #136]	; (800c2f0 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d02a      	beq.n	800c2c0 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c26a:	4a22      	ldr	r2, [pc, #136]	; (800c2f4 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d033      	beq.n	800c2d8 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c270:	4a21      	ldr	r2, [pc, #132]	; (800c2f8 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d000      	beq.n	800c278 <RemapAndLinkDMAtoUARTRx+0x534>
 800c276:	e5df      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c278:	4a20      	ldr	r2, [pc, #128]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c27a:	23a8      	movs	r3, #168	; 0xa8
 800c27c:	4d20      	ldr	r5, [pc, #128]	; (800c300 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c27e:	58d4      	ldr	r4, [r2, r3]
 800c280:	402c      	ands	r4, r5
 800c282:	50d4      	str	r4, [r2, r3]
 800c284:	24f0      	movs	r4, #240	; 0xf0
 800c286:	58d5      	ldr	r5, [r2, r3]
 800c288:	0124      	lsls	r4, r4, #4
 800c28a:	432c      	orrs	r4, r5
 800c28c:	50d4      	str	r4, [r2, r3]
 800c28e:	e5d3      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c290:	23a8      	movs	r3, #168	; 0xa8
 800c292:	260f      	movs	r6, #15
 800c294:	4a1b      	ldr	r2, [pc, #108]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c296:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c298:	43b5      	bics	r5, r6
 800c29a:	50d5      	str	r5, [r2, r3]
 800c29c:	58d4      	ldr	r4, [r2, r3]
 800c29e:	4334      	orrs	r4, r6
 800c2a0:	50d4      	str	r4, [r2, r3]
 800c2a2:	e5c9      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c2a4:	4a17      	ldr	r2, [pc, #92]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c2a6:	e7e8      	b.n	800c27a <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c2a8:	23a8      	movs	r3, #168	; 0xa8
 800c2aa:	4a16      	ldr	r2, [pc, #88]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c2ac:	4d16      	ldr	r5, [pc, #88]	; (800c308 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c2ae:	58d4      	ldr	r4, [r2, r3]
 800c2b0:	402c      	ands	r4, r5
 800c2b2:	50d4      	str	r4, [r2, r3]
 800c2b4:	24f0      	movs	r4, #240	; 0xf0
 800c2b6:	58d5      	ldr	r5, [r2, r3]
 800c2b8:	0324      	lsls	r4, r4, #12
 800c2ba:	432c      	orrs	r4, r5
 800c2bc:	50d4      	str	r4, [r2, r3]
 800c2be:	e5bb      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c2c0:	23a8      	movs	r3, #168	; 0xa8
 800c2c2:	4a10      	ldr	r2, [pc, #64]	; (800c304 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c2c4:	4d11      	ldr	r5, [pc, #68]	; (800c30c <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c2c6:	58d4      	ldr	r4, [r2, r3]
 800c2c8:	402c      	ands	r4, r5
 800c2ca:	50d4      	str	r4, [r2, r3]
 800c2cc:	24f0      	movs	r4, #240	; 0xf0
 800c2ce:	58d5      	ldr	r5, [r2, r3]
 800c2d0:	0424      	lsls	r4, r4, #16
 800c2d2:	432c      	orrs	r4, r5
 800c2d4:	50d4      	str	r4, [r2, r3]
 800c2d6:	e5af      	b.n	800be38 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c2d8:	23a8      	movs	r3, #168	; 0xa8
 800c2da:	4a08      	ldr	r2, [pc, #32]	; (800c2fc <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c2dc:	26f0      	movs	r6, #240	; 0xf0
 800c2de:	58d5      	ldr	r5, [r2, r3]
 800c2e0:	e7da      	b.n	800c298 <RemapAndLinkDMAtoUARTRx+0x554>
 800c2e2:	46c0      	nop			; (mov r8, r8)
 800c2e4:	40020008 	.word	0x40020008
 800c2e8:	40020030 	.word	0x40020030
 800c2ec:	40020058 	.word	0x40020058
 800c2f0:	4002006c 	.word	0x4002006c
 800c2f4:	4002041c 	.word	0x4002041c
 800c2f8:	40020430 	.word	0x40020430
 800c2fc:	40020400 	.word	0x40020400
 800c300:	fffff0ff 	.word	0xfffff0ff
 800c304:	40020000 	.word	0x40020000
 800c308:	fff0ffff 	.word	0xfff0ffff
 800c30c:	ff0fffff 	.word	0xff0fffff
 800c310:	40011c00 	.word	0x40011c00

0800c314 <DMA_MSG_RX_Setup>:
{	
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	000d      	movs	r5, r1
 800c318:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c31a:	f7ff fd13 	bl	800bd44 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c31e:	0028      	movs	r0, r5
 800c320:	2100      	movs	r1, #0
 800c322:	f7ff fc59 	bl	800bbd8 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c326:	0020      	movs	r0, r4
 800c328:	f7ff fa28 	bl	800b77c <GetPort>
 800c32c:	3801      	subs	r0, #1
 800c32e:	0041      	lsls	r1, r0, #1
 800c330:	1809      	adds	r1, r1, r0
 800c332:	4804      	ldr	r0, [pc, #16]	; (800c344 <DMA_MSG_RX_Setup+0x30>)
 800c334:	0189      	lsls	r1, r1, #6
 800c336:	1809      	adds	r1, r1, r0
 800c338:	22c0      	movs	r2, #192	; 0xc0
 800c33a:	0020      	movs	r0, r4
 800c33c:	f005 ff0e 	bl	801215c <HAL_UART_Receive_DMA>
}
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20001350 	.word	0x20001350

0800c348 <SetupMessagingRxDMAs>:
{	
 800c348:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c34a:	4c14      	ldr	r4, [pc, #80]	; (800c39c <SetupMessagingRxDMAs+0x54>)
 800c34c:	7863      	ldrb	r3, [r4, #1]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d01f      	beq.n	800c392 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800c352:	78a3      	ldrb	r3, [r4, #2]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d017      	beq.n	800c388 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800c358:	78e3      	ldrb	r3, [r4, #3]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00f      	beq.n	800c37e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800c35e:	7923      	ldrb	r3, [r4, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d007      	beq.n	800c374 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800c364:	7963      	ldrb	r3, [r4, #5]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d103      	bne.n	800c372 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c36a:	490d      	ldr	r1, [pc, #52]	; (800c3a0 <SetupMessagingRxDMAs+0x58>)
 800c36c:	480d      	ldr	r0, [pc, #52]	; (800c3a4 <SetupMessagingRxDMAs+0x5c>)
 800c36e:	f7ff ffd1 	bl	800c314 <DMA_MSG_RX_Setup>
}
 800c372:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c374:	490c      	ldr	r1, [pc, #48]	; (800c3a8 <SetupMessagingRxDMAs+0x60>)
 800c376:	480d      	ldr	r0, [pc, #52]	; (800c3ac <SetupMessagingRxDMAs+0x64>)
 800c378:	f7ff ffcc 	bl	800c314 <DMA_MSG_RX_Setup>
 800c37c:	e7f2      	b.n	800c364 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c37e:	490c      	ldr	r1, [pc, #48]	; (800c3b0 <SetupMessagingRxDMAs+0x68>)
 800c380:	480c      	ldr	r0, [pc, #48]	; (800c3b4 <SetupMessagingRxDMAs+0x6c>)
 800c382:	f7ff ffc7 	bl	800c314 <DMA_MSG_RX_Setup>
 800c386:	e7ea      	b.n	800c35e <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c388:	490b      	ldr	r1, [pc, #44]	; (800c3b8 <SetupMessagingRxDMAs+0x70>)
 800c38a:	480c      	ldr	r0, [pc, #48]	; (800c3bc <SetupMessagingRxDMAs+0x74>)
 800c38c:	f7ff ffc2 	bl	800c314 <DMA_MSG_RX_Setup>
 800c390:	e7e2      	b.n	800c358 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c392:	490b      	ldr	r1, [pc, #44]	; (800c3c0 <SetupMessagingRxDMAs+0x78>)
 800c394:	480b      	ldr	r0, [pc, #44]	; (800c3c4 <SetupMessagingRxDMAs+0x7c>)
 800c396:	f7ff ffbd 	bl	800c314 <DMA_MSG_RX_Setup>
 800c39a:	e7da      	b.n	800c352 <SetupMessagingRxDMAs+0xa>
 800c39c:	20000c3c 	.word	0x20000c3c
 800c3a0:	20001e5c 	.word	0x20001e5c
 800c3a4:	20007010 	.word	0x20007010
 800c3a8:	20001e24 	.word	0x20001e24
 800c3ac:	20006ee8 	.word	0x20006ee8
 800c3b0:	20001dec 	.word	0x20001dec
 800c3b4:	20007090 	.word	0x20007090
 800c3b8:	20001db4 	.word	0x20001db4
 800c3bc:	20007108 	.word	0x20007108
 800c3c0:	20001d7c 	.word	0x20001d7c
 800c3c4:	20006fa0 	.word	0x20006fa0

0800c3c8 <DMA_STREAM_Setup>:
{	
 800c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ca:	0016      	movs	r6, r2
 800c3cc:	0005      	movs	r5, r0
 800c3ce:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800c3d0:	f7ff f9d4 	bl	800b77c <GetPort>
	hDMA = &streamDMA[port-1];
 800c3d4:	3801      	subs	r0, #1
 800c3d6:	00c4      	lsls	r4, r0, #3
 800c3d8:	1a24      	subs	r4, r4, r0
 800c3da:	480a      	ldr	r0, [pc, #40]	; (800c404 <DMA_STREAM_Setup+0x3c>)
 800c3dc:	00e4      	lsls	r4, r4, #3
 800c3de:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c3e0:	0021      	movs	r1, r4
 800c3e2:	0028      	movs	r0, r5
 800c3e4:	f7ff fcae 	bl	800bd44 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c3e8:	0020      	movs	r0, r4
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	f7ff fbf4 	bl	800bbd8 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c3f0:	2369      	movs	r3, #105	; 0x69
 800c3f2:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c3f4:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800c3f6:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c3f8:	0028      	movs	r0, r5
 800c3fa:	0032      	movs	r2, r6
 800c3fc:	3128      	adds	r1, #40	; 0x28
 800c3fe:	f005 fead 	bl	801215c <HAL_UART_Receive_DMA>
}
 800c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c404:	20001b84 	.word	0x20001b84

0800c408 <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c408:	6803      	ldr	r3, [r0, #0]
 800c40a:	4ac6      	ldr	r2, [pc, #792]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800c40c:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c40e:	4293      	cmp	r3, r2
 800c410:	d03a      	beq.n	800c488 <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c412:	4ac5      	ldr	r2, [pc, #788]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d058      	beq.n	800c4ca <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c418:	4ac4      	ldr	r2, [pc, #784]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d100      	bne.n	800c420 <RemapAndLinkDMAtoUARTTx+0x18>
 800c41e:	e093      	b.n	800c548 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c420:	4ac3      	ldr	r2, [pc, #780]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d100      	bne.n	800c428 <RemapAndLinkDMAtoUARTTx+0x20>
 800c426:	e0c0      	b.n	800c5aa <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c428:	4ac2      	ldr	r2, [pc, #776]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d100      	bne.n	800c430 <RemapAndLinkDMAtoUARTTx+0x28>
 800c42e:	e19d      	b.n	800c76c <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c430:	4ac1      	ldr	r2, [pc, #772]	; (800c738 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d100      	bne.n	800c438 <RemapAndLinkDMAtoUARTTx+0x30>
 800c436:	e1b9      	b.n	800c7ac <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c438:	4ac0      	ldr	r2, [pc, #768]	; (800c73c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d000      	beq.n	800c440 <RemapAndLinkDMAtoUARTTx+0x38>
 800c43e:	e265      	b.n	800c90c <RemapAndLinkDMAtoUARTTx+0x504>
 800c440:	680b      	ldr	r3, [r1, #0]
 800c442:	4abf      	ldr	r2, [pc, #764]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d100      	bne.n	800c44a <RemapAndLinkDMAtoUARTTx+0x42>
 800c448:	e230      	b.n	800c8ac <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c44a:	4abe      	ldr	r2, [pc, #760]	; (800c744 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d100      	bne.n	800c452 <RemapAndLinkDMAtoUARTTx+0x4a>
 800c450:	e237      	b.n	800c8c2 <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c452:	4abd      	ldr	r2, [pc, #756]	; (800c748 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d100      	bne.n	800c45a <RemapAndLinkDMAtoUARTTx+0x52>
 800c458:	e23f      	b.n	800c8da <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c45a:	4abc      	ldr	r2, [pc, #752]	; (800c74c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d100      	bne.n	800c462 <RemapAndLinkDMAtoUARTTx+0x5a>
 800c460:	e247      	b.n	800c8f2 <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c462:	4abb      	ldr	r2, [pc, #748]	; (800c750 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d100      	bne.n	800c46a <RemapAndLinkDMAtoUARTTx+0x62>
 800c468:	e24e      	b.n	800c908 <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c46a:	4aba      	ldr	r2, [pc, #744]	; (800c754 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d145      	bne.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c470:	23a8      	movs	r3, #168	; 0xa8
 800c472:	4ab9      	ldr	r2, [pc, #740]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c474:	4db9      	ldr	r5, [pc, #740]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c476:	58d4      	ldr	r4, [r2, r3]
 800c478:	402c      	ands	r4, r5
 800c47a:	50d4      	str	r4, [r2, r3]
 800c47c:	24e0      	movs	r4, #224	; 0xe0
 800c47e:	58d5      	ldr	r5, [r2, r3]
 800c480:	0324      	lsls	r4, r4, #12
 800c482:	432c      	orrs	r4, r5
 800c484:	50d4      	str	r4, [r2, r3]
 800c486:	e039      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c488:	680b      	ldr	r3, [r1, #0]
 800c48a:	4aad      	ldr	r2, [pc, #692]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d100      	bne.n	800c492 <RemapAndLinkDMAtoUARTTx+0x8a>
 800c490:	e07e      	b.n	800c590 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c492:	4aac      	ldr	r2, [pc, #688]	; (800c744 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d100      	bne.n	800c49a <RemapAndLinkDMAtoUARTTx+0x92>
 800c498:	e085      	b.n	800c5a6 <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c49a:	4aab      	ldr	r2, [pc, #684]	; (800c748 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d030      	beq.n	800c502 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c4a0:	4aaa      	ldr	r2, [pc, #680]	; (800c74c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d039      	beq.n	800c51a <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c4a6:	4aaa      	ldr	r2, [pc, #680]	; (800c750 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d041      	beq.n	800c530 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c4ac:	4aa9      	ldr	r2, [pc, #676]	; (800c754 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d124      	bne.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c4b2:	23a8      	movs	r3, #168	; 0xa8
 800c4b4:	4aa8      	ldr	r2, [pc, #672]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4b6:	4da9      	ldr	r5, [pc, #676]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c4b8:	58d4      	ldr	r4, [r2, r3]
 800c4ba:	402c      	ands	r4, r5
 800c4bc:	50d4      	str	r4, [r2, r3]
 800c4be:	2480      	movs	r4, #128	; 0x80
 800c4c0:	58d5      	ldr	r5, [r2, r3]
 800c4c2:	0324      	lsls	r4, r4, #12
 800c4c4:	432c      	orrs	r4, r5
 800c4c6:	50d4      	str	r4, [r2, r3]
 800c4c8:	e018      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c4ca:	680b      	ldr	r3, [r1, #0]
 800c4cc:	4a9c      	ldr	r2, [pc, #624]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d100      	bne.n	800c4d4 <RemapAndLinkDMAtoUARTTx+0xcc>
 800c4d2:	e0b9      	b.n	800c648 <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c4d4:	4a9b      	ldr	r2, [pc, #620]	; (800c744 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d100      	bne.n	800c4dc <RemapAndLinkDMAtoUARTTx+0xd4>
 800c4da:	e0c0      	b.n	800c65e <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c4dc:	4a9a      	ldr	r2, [pc, #616]	; (800c748 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d100      	bne.n	800c4e4 <RemapAndLinkDMAtoUARTTx+0xdc>
 800c4e2:	e0c8      	b.n	800c676 <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c4e4:	4a99      	ldr	r2, [pc, #612]	; (800c74c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d100      	bne.n	800c4ec <RemapAndLinkDMAtoUARTTx+0xe4>
 800c4ea:	e0d0      	b.n	800c68e <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c4ec:	4a98      	ldr	r2, [pc, #608]	; (800c750 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d100      	bne.n	800c4f4 <RemapAndLinkDMAtoUARTTx+0xec>
 800c4f2:	e0d7      	b.n	800c6a4 <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c4f4:	4a97      	ldr	r2, [pc, #604]	; (800c754 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d100      	bne.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
 800c4fa:	e0d5      	b.n	800c6a8 <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c4fc:	6601      	str	r1, [r0, #96]	; 0x60
 800c4fe:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c500:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c502:	23a8      	movs	r3, #168	; 0xa8
 800c504:	4a96      	ldr	r2, [pc, #600]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c506:	4d97      	ldr	r5, [pc, #604]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c508:	58d4      	ldr	r4, [r2, r3]
 800c50a:	402c      	ands	r4, r5
 800c50c:	50d4      	str	r4, [r2, r3]
 800c50e:	2480      	movs	r4, #128	; 0x80
 800c510:	58d5      	ldr	r5, [r2, r3]
 800c512:	0524      	lsls	r4, r4, #20
 800c514:	432c      	orrs	r4, r5
 800c516:	50d4      	str	r4, [r2, r3]
 800c518:	e7f0      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c51a:	23a8      	movs	r3, #168	; 0xa8
 800c51c:	250f      	movs	r5, #15
 800c51e:	4a8e      	ldr	r2, [pc, #568]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c520:	58d4      	ldr	r4, [r2, r3]
 800c522:	43ac      	bics	r4, r5
 800c524:	50d4      	str	r4, [r2, r3]
 800c526:	58d4      	ldr	r4, [r2, r3]
 800c528:	3d07      	subs	r5, #7
 800c52a:	432c      	orrs	r4, r5
 800c52c:	50d4      	str	r4, [r2, r3]
 800c52e:	e7e5      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c530:	4a89      	ldr	r2, [pc, #548]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c532:	23a8      	movs	r3, #168	; 0xa8
 800c534:	4d8c      	ldr	r5, [pc, #560]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c536:	58d4      	ldr	r4, [r2, r3]
 800c538:	402c      	ands	r4, r5
 800c53a:	50d4      	str	r4, [r2, r3]
 800c53c:	2480      	movs	r4, #128	; 0x80
 800c53e:	58d5      	ldr	r5, [r2, r3]
 800c540:	0224      	lsls	r4, r4, #8
 800c542:	432c      	orrs	r4, r5
 800c544:	50d4      	str	r4, [r2, r3]
 800c546:	e7d9      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c548:	680b      	ldr	r3, [r1, #0]
 800c54a:	4a7d      	ldr	r2, [pc, #500]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d100      	bne.n	800c552 <RemapAndLinkDMAtoUARTTx+0x14a>
 800c550:	e0b6      	b.n	800c6c0 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c552:	4a7c      	ldr	r2, [pc, #496]	; (800c744 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d100      	bne.n	800c55a <RemapAndLinkDMAtoUARTTx+0x152>
 800c558:	e0bd      	b.n	800c6d6 <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c55a:	4a7b      	ldr	r2, [pc, #492]	; (800c748 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d100      	bne.n	800c562 <RemapAndLinkDMAtoUARTTx+0x15a>
 800c560:	e0c5      	b.n	800c6ee <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c562:	4a7a      	ldr	r2, [pc, #488]	; (800c74c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d100      	bne.n	800c56a <RemapAndLinkDMAtoUARTTx+0x162>
 800c568:	e0cd      	b.n	800c706 <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c56a:	4a79      	ldr	r2, [pc, #484]	; (800c750 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d100      	bne.n	800c572 <RemapAndLinkDMAtoUARTTx+0x16a>
 800c570:	e0d4      	b.n	800c71c <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c572:	4a78      	ldr	r2, [pc, #480]	; (800c754 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d1c1      	bne.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c578:	23a8      	movs	r3, #168	; 0xa8
 800c57a:	4a77      	ldr	r2, [pc, #476]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c57c:	4d77      	ldr	r5, [pc, #476]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c57e:	58d4      	ldr	r4, [r2, r3]
 800c580:	402c      	ands	r4, r5
 800c582:	50d4      	str	r4, [r2, r3]
 800c584:	24a0      	movs	r4, #160	; 0xa0
 800c586:	58d5      	ldr	r5, [r2, r3]
 800c588:	0324      	lsls	r4, r4, #12
 800c58a:	432c      	orrs	r4, r5
 800c58c:	50d4      	str	r4, [r2, r3]
 800c58e:	e7b5      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c590:	23a8      	movs	r3, #168	; 0xa8
 800c592:	25f0      	movs	r5, #240	; 0xf0
 800c594:	4a72      	ldr	r2, [pc, #456]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c596:	58d4      	ldr	r4, [r2, r3]
 800c598:	43ac      	bics	r4, r5
 800c59a:	50d4      	str	r4, [r2, r3]
 800c59c:	58d4      	ldr	r4, [r2, r3]
 800c59e:	3d70      	subs	r5, #112	; 0x70
 800c5a0:	432c      	orrs	r4, r5
 800c5a2:	50d4      	str	r4, [r2, r3]
 800c5a4:	e7aa      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c5a6:	4a6e      	ldr	r2, [pc, #440]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c5a8:	e7c3      	b.n	800c532 <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c5aa:	680b      	ldr	r3, [r1, #0]
 800c5ac:	4a64      	ldr	r2, [pc, #400]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d01c      	beq.n	800c5ec <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c5b2:	4a64      	ldr	r2, [pc, #400]	; (800c744 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d024      	beq.n	800c602 <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c5b8:	4a63      	ldr	r2, [pc, #396]	; (800c748 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d02d      	beq.n	800c61a <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c5be:	4a63      	ldr	r2, [pc, #396]	; (800c74c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d036      	beq.n	800c632 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c5c4:	4a62      	ldr	r2, [pc, #392]	; (800c750 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d100      	bne.n	800c5cc <RemapAndLinkDMAtoUARTTx+0x1c4>
 800c5ca:	e0a9      	b.n	800c720 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c5cc:	4a61      	ldr	r2, [pc, #388]	; (800c754 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d000      	beq.n	800c5d4 <RemapAndLinkDMAtoUARTTx+0x1cc>
 800c5d2:	e793      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c5d4:	23a8      	movs	r3, #168	; 0xa8
 800c5d6:	4a60      	ldr	r2, [pc, #384]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c5d8:	4d60      	ldr	r5, [pc, #384]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c5da:	58d4      	ldr	r4, [r2, r3]
 800c5dc:	402c      	ands	r4, r5
 800c5de:	50d4      	str	r4, [r2, r3]
 800c5e0:	24b0      	movs	r4, #176	; 0xb0
 800c5e2:	58d5      	ldr	r5, [r2, r3]
 800c5e4:	0324      	lsls	r4, r4, #12
 800c5e6:	432c      	orrs	r4, r5
 800c5e8:	50d4      	str	r4, [r2, r3]
 800c5ea:	e787      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c5ec:	23a8      	movs	r3, #168	; 0xa8
 800c5ee:	25f0      	movs	r5, #240	; 0xf0
 800c5f0:	4a5b      	ldr	r2, [pc, #364]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c5f2:	58d4      	ldr	r4, [r2, r3]
 800c5f4:	43ac      	bics	r4, r5
 800c5f6:	50d4      	str	r4, [r2, r3]
 800c5f8:	58d4      	ldr	r4, [r2, r3]
 800c5fa:	3d40      	subs	r5, #64	; 0x40
 800c5fc:	432c      	orrs	r4, r5
 800c5fe:	50d4      	str	r4, [r2, r3]
 800c600:	e77c      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c602:	4a57      	ldr	r2, [pc, #348]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c604:	23a8      	movs	r3, #168	; 0xa8
 800c606:	4d58      	ldr	r5, [pc, #352]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c608:	58d4      	ldr	r4, [r2, r3]
 800c60a:	402c      	ands	r4, r5
 800c60c:	50d4      	str	r4, [r2, r3]
 800c60e:	24b0      	movs	r4, #176	; 0xb0
 800c610:	58d5      	ldr	r5, [r2, r3]
 800c612:	0224      	lsls	r4, r4, #8
 800c614:	432c      	orrs	r4, r5
 800c616:	50d4      	str	r4, [r2, r3]
 800c618:	e770      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c61a:	23a8      	movs	r3, #168	; 0xa8
 800c61c:	4a50      	ldr	r2, [pc, #320]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c61e:	4d51      	ldr	r5, [pc, #324]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c620:	58d4      	ldr	r4, [r2, r3]
 800c622:	402c      	ands	r4, r5
 800c624:	50d4      	str	r4, [r2, r3]
 800c626:	24b0      	movs	r4, #176	; 0xb0
 800c628:	58d5      	ldr	r5, [r2, r3]
 800c62a:	0524      	lsls	r4, r4, #20
 800c62c:	432c      	orrs	r4, r5
 800c62e:	50d4      	str	r4, [r2, r3]
 800c630:	e764      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c632:	23a8      	movs	r3, #168	; 0xa8
 800c634:	250f      	movs	r5, #15
 800c636:	4a48      	ldr	r2, [pc, #288]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c638:	58d4      	ldr	r4, [r2, r3]
 800c63a:	43ac      	bics	r4, r5
 800c63c:	50d4      	str	r4, [r2, r3]
 800c63e:	58d4      	ldr	r4, [r2, r3]
 800c640:	3d04      	subs	r5, #4
 800c642:	432c      	orrs	r4, r5
 800c644:	50d4      	str	r4, [r2, r3]
 800c646:	e759      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c648:	23a8      	movs	r3, #168	; 0xa8
 800c64a:	25f0      	movs	r5, #240	; 0xf0
 800c64c:	4a44      	ldr	r2, [pc, #272]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c64e:	58d4      	ldr	r4, [r2, r3]
 800c650:	43ac      	bics	r4, r5
 800c652:	50d4      	str	r4, [r2, r3]
 800c654:	58d4      	ldr	r4, [r2, r3]
 800c656:	3d60      	subs	r5, #96	; 0x60
 800c658:	432c      	orrs	r4, r5
 800c65a:	50d4      	str	r4, [r2, r3]
 800c65c:	e74e      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c65e:	4a40      	ldr	r2, [pc, #256]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c660:	23a8      	movs	r3, #168	; 0xa8
 800c662:	4d41      	ldr	r5, [pc, #260]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c664:	58d4      	ldr	r4, [r2, r3]
 800c666:	402c      	ands	r4, r5
 800c668:	50d4      	str	r4, [r2, r3]
 800c66a:	2490      	movs	r4, #144	; 0x90
 800c66c:	58d5      	ldr	r5, [r2, r3]
 800c66e:	0224      	lsls	r4, r4, #8
 800c670:	432c      	orrs	r4, r5
 800c672:	50d4      	str	r4, [r2, r3]
 800c674:	e742      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c676:	23a8      	movs	r3, #168	; 0xa8
 800c678:	4a39      	ldr	r2, [pc, #228]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c67a:	4d3a      	ldr	r5, [pc, #232]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c67c:	58d4      	ldr	r4, [r2, r3]
 800c67e:	402c      	ands	r4, r5
 800c680:	50d4      	str	r4, [r2, r3]
 800c682:	2490      	movs	r4, #144	; 0x90
 800c684:	58d5      	ldr	r5, [r2, r3]
 800c686:	0524      	lsls	r4, r4, #20
 800c688:	432c      	orrs	r4, r5
 800c68a:	50d4      	str	r4, [r2, r3]
 800c68c:	e736      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c68e:	23a8      	movs	r3, #168	; 0xa8
 800c690:	250f      	movs	r5, #15
 800c692:	4a31      	ldr	r2, [pc, #196]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c694:	58d4      	ldr	r4, [r2, r3]
 800c696:	43ac      	bics	r4, r5
 800c698:	50d4      	str	r4, [r2, r3]
 800c69a:	58d4      	ldr	r4, [r2, r3]
 800c69c:	3d06      	subs	r5, #6
 800c69e:	432c      	orrs	r4, r5
 800c6a0:	50d4      	str	r4, [r2, r3]
 800c6a2:	e72b      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c6a4:	4a2c      	ldr	r2, [pc, #176]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c6a6:	e7db      	b.n	800c660 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c6a8:	23a8      	movs	r3, #168	; 0xa8
 800c6aa:	4a2b      	ldr	r2, [pc, #172]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c6ac:	4d2b      	ldr	r5, [pc, #172]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c6ae:	58d4      	ldr	r4, [r2, r3]
 800c6b0:	402c      	ands	r4, r5
 800c6b2:	50d4      	str	r4, [r2, r3]
 800c6b4:	2490      	movs	r4, #144	; 0x90
 800c6b6:	58d5      	ldr	r5, [r2, r3]
 800c6b8:	0324      	lsls	r4, r4, #12
 800c6ba:	432c      	orrs	r4, r5
 800c6bc:	50d4      	str	r4, [r2, r3]
 800c6be:	e71d      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c6c0:	23a8      	movs	r3, #168	; 0xa8
 800c6c2:	25f0      	movs	r5, #240	; 0xf0
 800c6c4:	4a26      	ldr	r2, [pc, #152]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c6c6:	58d4      	ldr	r4, [r2, r3]
 800c6c8:	43ac      	bics	r4, r5
 800c6ca:	50d4      	str	r4, [r2, r3]
 800c6cc:	58d4      	ldr	r4, [r2, r3]
 800c6ce:	3d50      	subs	r5, #80	; 0x50
 800c6d0:	432c      	orrs	r4, r5
 800c6d2:	50d4      	str	r4, [r2, r3]
 800c6d4:	e712      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c6d6:	4a22      	ldr	r2, [pc, #136]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c6d8:	23a8      	movs	r3, #168	; 0xa8
 800c6da:	4d23      	ldr	r5, [pc, #140]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c6dc:	58d4      	ldr	r4, [r2, r3]
 800c6de:	402c      	ands	r4, r5
 800c6e0:	50d4      	str	r4, [r2, r3]
 800c6e2:	24a0      	movs	r4, #160	; 0xa0
 800c6e4:	58d5      	ldr	r5, [r2, r3]
 800c6e6:	0224      	lsls	r4, r4, #8
 800c6e8:	432c      	orrs	r4, r5
 800c6ea:	50d4      	str	r4, [r2, r3]
 800c6ec:	e706      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c6ee:	23a8      	movs	r3, #168	; 0xa8
 800c6f0:	4a1b      	ldr	r2, [pc, #108]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c6f2:	4d1c      	ldr	r5, [pc, #112]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c6f4:	58d4      	ldr	r4, [r2, r3]
 800c6f6:	402c      	ands	r4, r5
 800c6f8:	50d4      	str	r4, [r2, r3]
 800c6fa:	24a0      	movs	r4, #160	; 0xa0
 800c6fc:	58d5      	ldr	r5, [r2, r3]
 800c6fe:	0524      	lsls	r4, r4, #20
 800c700:	432c      	orrs	r4, r5
 800c702:	50d4      	str	r4, [r2, r3]
 800c704:	e6fa      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c706:	23a8      	movs	r3, #168	; 0xa8
 800c708:	250f      	movs	r5, #15
 800c70a:	4a13      	ldr	r2, [pc, #76]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c70c:	58d4      	ldr	r4, [r2, r3]
 800c70e:	43ac      	bics	r4, r5
 800c710:	50d4      	str	r4, [r2, r3]
 800c712:	58d4      	ldr	r4, [r2, r3]
 800c714:	3d05      	subs	r5, #5
 800c716:	432c      	orrs	r4, r5
 800c718:	50d4      	str	r4, [r2, r3]
 800c71a:	e6ef      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c71c:	4a0e      	ldr	r2, [pc, #56]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c71e:	e7db      	b.n	800c6d8 <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c720:	4a0d      	ldr	r2, [pc, #52]	; (800c758 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c722:	e76f      	b.n	800c604 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c724:	40013800 	.word	0x40013800
 800c728:	40004400 	.word	0x40004400
 800c72c:	40004800 	.word	0x40004800
 800c730:	40004c00 	.word	0x40004c00
 800c734:	40005000 	.word	0x40005000
 800c738:	40011400 	.word	0x40011400
 800c73c:	40011800 	.word	0x40011800
 800c740:	4002001c 	.word	0x4002001c
 800c744:	40020044 	.word	0x40020044
 800c748:	40020080 	.word	0x40020080
 800c74c:	40020408 	.word	0x40020408
 800c750:	40020444 	.word	0x40020444
 800c754:	40020458 	.word	0x40020458
 800c758:	40020400 	.word	0x40020400
 800c75c:	fff0ffff 	.word	0xfff0ffff
 800c760:	40020000 	.word	0x40020000
 800c764:	f0ffffff 	.word	0xf0ffffff
 800c768:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c76c:	680b      	ldr	r3, [r1, #0]
 800c76e:	4a8e      	ldr	r2, [pc, #568]	; (800c9a8 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d03b      	beq.n	800c7ec <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c774:	4a8d      	ldr	r2, [pc, #564]	; (800c9ac <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d043      	beq.n	800c802 <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c77a:	4a8d      	ldr	r2, [pc, #564]	; (800c9b0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d04c      	beq.n	800c81a <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c780:	4a8c      	ldr	r2, [pc, #560]	; (800c9b4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d055      	beq.n	800c832 <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c786:	4a8c      	ldr	r2, [pc, #560]	; (800c9b8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d05d      	beq.n	800c848 <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c78c:	4a8b      	ldr	r2, [pc, #556]	; (800c9bc <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d000      	beq.n	800c794 <RemapAndLinkDMAtoUARTTx+0x38c>
 800c792:	e6b3      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c794:	23a8      	movs	r3, #168	; 0xa8
 800c796:	4a8a      	ldr	r2, [pc, #552]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c798:	4d8a      	ldr	r5, [pc, #552]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c79a:	58d4      	ldr	r4, [r2, r3]
 800c79c:	402c      	ands	r4, r5
 800c79e:	50d4      	str	r4, [r2, r3]
 800c7a0:	24c0      	movs	r4, #192	; 0xc0
 800c7a2:	58d5      	ldr	r5, [r2, r3]
 800c7a4:	0324      	lsls	r4, r4, #12
 800c7a6:	432c      	orrs	r4, r5
 800c7a8:	50d4      	str	r4, [r2, r3]
 800c7aa:	e6a7      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c7ac:	680b      	ldr	r3, [r1, #0]
 800c7ae:	4a7e      	ldr	r2, [pc, #504]	; (800c9a8 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d04b      	beq.n	800c84c <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c7b4:	4a7d      	ldr	r2, [pc, #500]	; (800c9ac <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d053      	beq.n	800c862 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c7ba:	4a7d      	ldr	r2, [pc, #500]	; (800c9b0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d05c      	beq.n	800c87a <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c7c0:	4a7c      	ldr	r2, [pc, #496]	; (800c9b4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d065      	beq.n	800c892 <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c7c6:	4a7c      	ldr	r2, [pc, #496]	; (800c9b8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d06d      	beq.n	800c8a8 <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c7cc:	4a7b      	ldr	r2, [pc, #492]	; (800c9bc <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d000      	beq.n	800c7d4 <RemapAndLinkDMAtoUARTTx+0x3cc>
 800c7d2:	e693      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c7d4:	23a8      	movs	r3, #168	; 0xa8
 800c7d6:	4a7a      	ldr	r2, [pc, #488]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c7d8:	4d7a      	ldr	r5, [pc, #488]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c7da:	58d4      	ldr	r4, [r2, r3]
 800c7dc:	402c      	ands	r4, r5
 800c7de:	50d4      	str	r4, [r2, r3]
 800c7e0:	24d0      	movs	r4, #208	; 0xd0
 800c7e2:	58d5      	ldr	r5, [r2, r3]
 800c7e4:	0324      	lsls	r4, r4, #12
 800c7e6:	432c      	orrs	r4, r5
 800c7e8:	50d4      	str	r4, [r2, r3]
 800c7ea:	e687      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c7ec:	23a8      	movs	r3, #168	; 0xa8
 800c7ee:	25f0      	movs	r5, #240	; 0xf0
 800c7f0:	4a75      	ldr	r2, [pc, #468]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c7f2:	58d4      	ldr	r4, [r2, r3]
 800c7f4:	43ac      	bics	r4, r5
 800c7f6:	50d4      	str	r4, [r2, r3]
 800c7f8:	58d4      	ldr	r4, [r2, r3]
 800c7fa:	3d30      	subs	r5, #48	; 0x30
 800c7fc:	432c      	orrs	r4, r5
 800c7fe:	50d4      	str	r4, [r2, r3]
 800c800:	e67c      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c802:	4a71      	ldr	r2, [pc, #452]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c804:	23a8      	movs	r3, #168	; 0xa8
 800c806:	4d71      	ldr	r5, [pc, #452]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c808:	58d4      	ldr	r4, [r2, r3]
 800c80a:	402c      	ands	r4, r5
 800c80c:	50d4      	str	r4, [r2, r3]
 800c80e:	24c0      	movs	r4, #192	; 0xc0
 800c810:	58d5      	ldr	r5, [r2, r3]
 800c812:	0224      	lsls	r4, r4, #8
 800c814:	432c      	orrs	r4, r5
 800c816:	50d4      	str	r4, [r2, r3]
 800c818:	e670      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c81a:	23a8      	movs	r3, #168	; 0xa8
 800c81c:	4a6a      	ldr	r2, [pc, #424]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c81e:	4d6c      	ldr	r5, [pc, #432]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c820:	58d4      	ldr	r4, [r2, r3]
 800c822:	402c      	ands	r4, r5
 800c824:	50d4      	str	r4, [r2, r3]
 800c826:	24c0      	movs	r4, #192	; 0xc0
 800c828:	58d5      	ldr	r5, [r2, r3]
 800c82a:	0524      	lsls	r4, r4, #20
 800c82c:	432c      	orrs	r4, r5
 800c82e:	50d4      	str	r4, [r2, r3]
 800c830:	e664      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c832:	23a8      	movs	r3, #168	; 0xa8
 800c834:	250f      	movs	r5, #15
 800c836:	4a62      	ldr	r2, [pc, #392]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c838:	58d4      	ldr	r4, [r2, r3]
 800c83a:	43ac      	bics	r4, r5
 800c83c:	50d4      	str	r4, [r2, r3]
 800c83e:	58d4      	ldr	r4, [r2, r3]
 800c840:	3d03      	subs	r5, #3
 800c842:	432c      	orrs	r4, r5
 800c844:	50d4      	str	r4, [r2, r3]
 800c846:	e659      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c848:	4a5d      	ldr	r2, [pc, #372]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c84a:	e7db      	b.n	800c804 <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c84c:	23a8      	movs	r3, #168	; 0xa8
 800c84e:	25f0      	movs	r5, #240	; 0xf0
 800c850:	4a5d      	ldr	r2, [pc, #372]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c852:	58d4      	ldr	r4, [r2, r3]
 800c854:	43ac      	bics	r4, r5
 800c856:	50d4      	str	r4, [r2, r3]
 800c858:	58d4      	ldr	r4, [r2, r3]
 800c85a:	3d20      	subs	r5, #32
 800c85c:	432c      	orrs	r4, r5
 800c85e:	50d4      	str	r4, [r2, r3]
 800c860:	e64c      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c862:	4a59      	ldr	r2, [pc, #356]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c864:	23a8      	movs	r3, #168	; 0xa8
 800c866:	4d59      	ldr	r5, [pc, #356]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c868:	58d4      	ldr	r4, [r2, r3]
 800c86a:	402c      	ands	r4, r5
 800c86c:	50d4      	str	r4, [r2, r3]
 800c86e:	24d0      	movs	r4, #208	; 0xd0
 800c870:	58d5      	ldr	r5, [r2, r3]
 800c872:	0224      	lsls	r4, r4, #8
 800c874:	432c      	orrs	r4, r5
 800c876:	50d4      	str	r4, [r2, r3]
 800c878:	e640      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c87a:	23a8      	movs	r3, #168	; 0xa8
 800c87c:	4a52      	ldr	r2, [pc, #328]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c87e:	4d54      	ldr	r5, [pc, #336]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c880:	58d4      	ldr	r4, [r2, r3]
 800c882:	402c      	ands	r4, r5
 800c884:	50d4      	str	r4, [r2, r3]
 800c886:	24d0      	movs	r4, #208	; 0xd0
 800c888:	58d5      	ldr	r5, [r2, r3]
 800c88a:	0524      	lsls	r4, r4, #20
 800c88c:	432c      	orrs	r4, r5
 800c88e:	50d4      	str	r4, [r2, r3]
 800c890:	e634      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c892:	23a8      	movs	r3, #168	; 0xa8
 800c894:	250f      	movs	r5, #15
 800c896:	4a4a      	ldr	r2, [pc, #296]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c898:	58d4      	ldr	r4, [r2, r3]
 800c89a:	43ac      	bics	r4, r5
 800c89c:	50d4      	str	r4, [r2, r3]
 800c89e:	58d4      	ldr	r4, [r2, r3]
 800c8a0:	3d02      	subs	r5, #2
 800c8a2:	432c      	orrs	r4, r5
 800c8a4:	50d4      	str	r4, [r2, r3]
 800c8a6:	e629      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c8a8:	4a45      	ldr	r2, [pc, #276]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c8aa:	e7db      	b.n	800c864 <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c8ac:	23a8      	movs	r3, #168	; 0xa8
 800c8ae:	25f0      	movs	r5, #240	; 0xf0
 800c8b0:	4a45      	ldr	r2, [pc, #276]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c8b2:	58d4      	ldr	r4, [r2, r3]
 800c8b4:	43ac      	bics	r4, r5
 800c8b6:	50d4      	str	r4, [r2, r3]
 800c8b8:	58d4      	ldr	r4, [r2, r3]
 800c8ba:	3d10      	subs	r5, #16
 800c8bc:	432c      	orrs	r4, r5
 800c8be:	50d4      	str	r4, [r2, r3]
 800c8c0:	e61c      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c8c2:	4a41      	ldr	r2, [pc, #260]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c8c4:	23a8      	movs	r3, #168	; 0xa8
 800c8c6:	4d41      	ldr	r5, [pc, #260]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c8c8:	58d4      	ldr	r4, [r2, r3]
 800c8ca:	402c      	ands	r4, r5
 800c8cc:	50d4      	str	r4, [r2, r3]
 800c8ce:	24e0      	movs	r4, #224	; 0xe0
 800c8d0:	58d5      	ldr	r5, [r2, r3]
 800c8d2:	0224      	lsls	r4, r4, #8
 800c8d4:	432c      	orrs	r4, r5
 800c8d6:	50d4      	str	r4, [r2, r3]
 800c8d8:	e610      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c8da:	23a8      	movs	r3, #168	; 0xa8
 800c8dc:	4a3a      	ldr	r2, [pc, #232]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c8de:	4d3c      	ldr	r5, [pc, #240]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c8e0:	58d4      	ldr	r4, [r2, r3]
 800c8e2:	402c      	ands	r4, r5
 800c8e4:	50d4      	str	r4, [r2, r3]
 800c8e6:	24e0      	movs	r4, #224	; 0xe0
 800c8e8:	58d5      	ldr	r5, [r2, r3]
 800c8ea:	0524      	lsls	r4, r4, #20
 800c8ec:	432c      	orrs	r4, r5
 800c8ee:	50d4      	str	r4, [r2, r3]
 800c8f0:	e604      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c8f2:	23a8      	movs	r3, #168	; 0xa8
 800c8f4:	250f      	movs	r5, #15
 800c8f6:	4a32      	ldr	r2, [pc, #200]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c8f8:	58d4      	ldr	r4, [r2, r3]
 800c8fa:	43ac      	bics	r4, r5
 800c8fc:	50d4      	str	r4, [r2, r3]
 800c8fe:	58d4      	ldr	r4, [r2, r3]
 800c900:	3d01      	subs	r5, #1
 800c902:	432c      	orrs	r4, r5
 800c904:	50d4      	str	r4, [r2, r3]
 800c906:	e5f9      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c908:	4a2d      	ldr	r2, [pc, #180]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c90a:	e7db      	b.n	800c8c4 <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c90c:	4a31      	ldr	r2, [pc, #196]	; (800c9d4 <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d000      	beq.n	800c914 <RemapAndLinkDMAtoUARTTx+0x50c>
 800c912:	e5f3      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
 800c914:	680b      	ldr	r3, [r1, #0]
 800c916:	4a24      	ldr	r2, [pc, #144]	; (800c9a8 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d01b      	beq.n	800c954 <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c91c:	4a23      	ldr	r2, [pc, #140]	; (800c9ac <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d022      	beq.n	800c968 <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c922:	4a23      	ldr	r2, [pc, #140]	; (800c9b0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d02b      	beq.n	800c980 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c928:	4a22      	ldr	r2, [pc, #136]	; (800c9b4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d034      	beq.n	800c998 <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c92e:	4a22      	ldr	r2, [pc, #136]	; (800c9b8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d036      	beq.n	800c9a2 <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c934:	4a21      	ldr	r2, [pc, #132]	; (800c9bc <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d000      	beq.n	800c93c <RemapAndLinkDMAtoUARTTx+0x534>
 800c93a:	e5df      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c93c:	23a8      	movs	r3, #168	; 0xa8
 800c93e:	4a20      	ldr	r2, [pc, #128]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c940:	4d20      	ldr	r5, [pc, #128]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c942:	58d4      	ldr	r4, [r2, r3]
 800c944:	402c      	ands	r4, r5
 800c946:	50d4      	str	r4, [r2, r3]
 800c948:	24f0      	movs	r4, #240	; 0xf0
 800c94a:	58d5      	ldr	r5, [r2, r3]
 800c94c:	0324      	lsls	r4, r4, #12
 800c94e:	432c      	orrs	r4, r5
 800c950:	50d4      	str	r4, [r2, r3]
 800c952:	e5d3      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c954:	23a8      	movs	r3, #168	; 0xa8
 800c956:	26f0      	movs	r6, #240	; 0xf0
 800c958:	4a1b      	ldr	r2, [pc, #108]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c95a:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c95c:	43b5      	bics	r5, r6
 800c95e:	50d5      	str	r5, [r2, r3]
 800c960:	58d4      	ldr	r4, [r2, r3]
 800c962:	4334      	orrs	r4, r6
 800c964:	50d4      	str	r4, [r2, r3]
 800c966:	e5c9      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c968:	4a17      	ldr	r2, [pc, #92]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c96a:	23a8      	movs	r3, #168	; 0xa8
 800c96c:	4d17      	ldr	r5, [pc, #92]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c96e:	58d4      	ldr	r4, [r2, r3]
 800c970:	402c      	ands	r4, r5
 800c972:	50d4      	str	r4, [r2, r3]
 800c974:	24f0      	movs	r4, #240	; 0xf0
 800c976:	58d5      	ldr	r5, [r2, r3]
 800c978:	0224      	lsls	r4, r4, #8
 800c97a:	432c      	orrs	r4, r5
 800c97c:	50d4      	str	r4, [r2, r3]
 800c97e:	e5bd      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c980:	23a8      	movs	r3, #168	; 0xa8
 800c982:	4a11      	ldr	r2, [pc, #68]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c984:	4d12      	ldr	r5, [pc, #72]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c986:	58d4      	ldr	r4, [r2, r3]
 800c988:	402c      	ands	r4, r5
 800c98a:	50d4      	str	r4, [r2, r3]
 800c98c:	24f0      	movs	r4, #240	; 0xf0
 800c98e:	58d5      	ldr	r5, [r2, r3]
 800c990:	0524      	lsls	r4, r4, #20
 800c992:	432c      	orrs	r4, r5
 800c994:	50d4      	str	r4, [r2, r3]
 800c996:	e5b1      	b.n	800c4fc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c998:	23a8      	movs	r3, #168	; 0xa8
 800c99a:	4a09      	ldr	r2, [pc, #36]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c99c:	260f      	movs	r6, #15
 800c99e:	58d5      	ldr	r5, [r2, r3]
 800c9a0:	e7dc      	b.n	800c95c <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c9a2:	4a07      	ldr	r2, [pc, #28]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c9a4:	e7e1      	b.n	800c96a <RemapAndLinkDMAtoUARTTx+0x562>
 800c9a6:	46c0      	nop			; (mov r8, r8)
 800c9a8:	4002001c 	.word	0x4002001c
 800c9ac:	40020044 	.word	0x40020044
 800c9b0:	40020080 	.word	0x40020080
 800c9b4:	40020408 	.word	0x40020408
 800c9b8:	40020444 	.word	0x40020444
 800c9bc:	40020458 	.word	0x40020458
 800c9c0:	40020400 	.word	0x40020400
 800c9c4:	fff0ffff 	.word	0xfff0ffff
 800c9c8:	40020000 	.word	0x40020000
 800c9cc:	ffff0fff 	.word	0xffff0fff
 800c9d0:	f0ffffff 	.word	0xf0ffffff
 800c9d4:	40011c00 	.word	0x40011c00

0800c9d8 <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ca0c <DMA_MSG_TX_Setup+0x34>)
{	
 800c9da:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c9dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9de:	2a00      	cmp	r2, #0
 800c9e0:	d00f      	beq.n	800ca02 <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800c9e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	d00b      	beq.n	800ca00 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800c9e8:	2294      	movs	r2, #148	; 0x94
 800c9ea:	589a      	ldr	r2, [r3, r2]
 800c9ec:	2a00      	cmp	r2, #0
 800c9ee:	d00a      	beq.n	800ca06 <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c9f0:	0021      	movs	r1, r4
 800c9f2:	f7ff fd09 	bl	800c408 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	0020      	movs	r0, r4
 800c9fa:	f7ff f8ed 	bl	800bbd8 <SetupDMAInterrupts>
}
 800c9fe:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800ca00:	3338      	adds	r3, #56	; 0x38
 800ca02:	001c      	movs	r4, r3
 800ca04:	e7f4      	b.n	800c9f0 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800ca06:	3370      	adds	r3, #112	; 0x70
 800ca08:	001c      	movs	r4, r3
 800ca0a:	e7f1      	b.n	800c9f0 <DMA_MSG_TX_Setup+0x18>
 800ca0c:	20001cd4 	.word	0x20001cd4

0800ca10 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800ca10:	2310      	movs	r3, #16
 800ca12:	4807      	ldr	r0, [pc, #28]	; (800ca30 <CRC_Init+0x20>)
{
 800ca14:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800ca16:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800ca18:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <CRC_Init+0x24>)
 800ca1a:	6003      	str	r3, [r0, #0]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800ca20:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800ca22:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800ca24:	3303      	adds	r3, #3
 800ca26:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800ca28:	f003 fa5c 	bl	800fee4 <HAL_CRC_Init>
}
 800ca2c:	bd10      	pop	{r4, pc}
 800ca2e:	46c0      	nop			; (mov r8, r8)
 800ca30:	2000717c 	.word	0x2000717c
 800ca34:	40023000 	.word	0x40023000

0800ca38 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800ca38:	2340      	movs	r3, #64	; 0x40
 800ca3a:	4a05      	ldr	r2, [pc, #20]	; (800ca50 <HAL_CRC_MspInit+0x18>)
{
 800ca3c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800ca3e:	6951      	ldr	r1, [r2, #20]
 800ca40:	4319      	orrs	r1, r3
 800ca42:	6151      	str	r1, [r2, #20]
 800ca44:	6952      	ldr	r2, [r2, #20]
 800ca46:	4013      	ands	r3, r2
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	9b01      	ldr	r3, [sp, #4]
}
 800ca4c:	b002      	add	sp, #8
 800ca4e:	4770      	bx	lr
 800ca50:	40021000 	.word	0x40021000

0800ca54 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	0004      	movs	r4, r0
 800ca58:	000d      	movs	r5, r1
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800ca5a:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800ca5c:	2c00      	cmp	r4, #0
 800ca5e:	d001      	beq.n	800ca64 <CalculateCRC8+0x10>
 800ca60:	2900      	cmp	r1, #0
 800ca62:	d100      	bne.n	800ca66 <CalculateCRC8+0x12>
}
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800ca66:	4f09      	ldr	r7, [pc, #36]	; (800ca8c <CalculateCRC8+0x38>)
 800ca68:	088e      	lsrs	r6, r1, #2
 800ca6a:	0032      	movs	r2, r6
 800ca6c:	0021      	movs	r1, r4
 800ca6e:	0038      	movs	r0, r7
 800ca70:	f003 fa96 	bl	800ffa0 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800ca74:	07ab      	lsls	r3, r5, #30
 800ca76:	d101      	bne.n	800ca7c <CalculateCRC8+0x28>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800ca78:	b2c0      	uxtb	r0, r0
 800ca7a:	e7f3      	b.n	800ca64 <CalculateCRC8+0x10>
 800ca7c:	00b1      	lsls	r1, r6, #2
 800ca7e:	1861      	adds	r1, r4, r1
 800ca80:	2201      	movs	r2, #1
 800ca82:	0038      	movs	r0, r7
 800ca84:	f003 fa62 	bl	800ff4c <HAL_CRC_Accumulate>
 800ca88:	b2c0      	uxtb	r0, r0
 800ca8a:	e7eb      	b.n	800ca64 <CalculateCRC8+0x10>
 800ca8c:	2000717c 	.word	0x2000717c

0800ca90 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800ca90:	2080      	movs	r0, #128	; 0x80
 800ca92:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <GPIO_Init+0x80>)
 800ca94:	0300      	lsls	r0, r0, #12
 800ca96:	6959      	ldr	r1, [r3, #20]
{
 800ca98:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800ca9a:	4301      	orrs	r1, r0
 800ca9c:	6159      	str	r1, [r3, #20]
 800ca9e:	695a      	ldr	r2, [r3, #20]
{
 800caa0:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800caa2:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800caa4:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800caa6:	9200      	str	r2, [sp, #0]
 800caa8:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800caaa:	6959      	ldr	r1, [r3, #20]
 800caac:	0280      	lsls	r0, r0, #10
 800caae:	4301      	orrs	r1, r0
 800cab0:	6159      	str	r1, [r3, #20]
 800cab2:	695a      	ldr	r2, [r3, #20]
 800cab4:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800cab6:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800cab8:	9201      	str	r2, [sp, #4]
 800caba:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800cabc:	6959      	ldr	r1, [r3, #20]
 800cabe:	0340      	lsls	r0, r0, #13
 800cac0:	4301      	orrs	r1, r0
 800cac2:	6159      	str	r1, [r3, #20]
 800cac4:	695a      	ldr	r2, [r3, #20]
 800cac6:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800cac8:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800cace:	6959      	ldr	r1, [r3, #20]
 800cad0:	02c0      	lsls	r0, r0, #11
 800cad2:	4301      	orrs	r1, r0
 800cad4:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cad6:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800cad8:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cada:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800cadc:	4002      	ands	r2, r0
 800cade:	9203      	str	r2, [sp, #12]
 800cae0:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cae2:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cae4:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cae6:	430a      	orrs	r2, r1
 800cae8:	615a      	str	r2, [r3, #20]
 800caea:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800caec:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800caee:	400b      	ands	r3, r1
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800caf4:	2380      	movs	r3, #128	; 0x80
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cafa:	2301      	movs	r3, #1
 800cafc:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafe:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cb00:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb02:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb04:	3303      	adds	r3, #3
 800cb06:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cb08:	f004 f920 	bl	8010d4c <HAL_GPIO_Init>
}
 800cb0c:	b00b      	add	sp, #44	; 0x2c
 800cb0e:	bd00      	pop	{pc}
 800cb10:	40021000 	.word	0x40021000

0800cb14 <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800cb14:	2301      	movs	r3, #1
{
 800cb16:	b500      	push	{lr}
 800cb18:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800cb1a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb1c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb1e:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800cb20:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb22:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800cb24:	4803      	ldr	r0, [pc, #12]	; (800cb34 <Switch_Init+0x20>)
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb26:	3303      	adds	r3, #3
 800cb28:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800cb2a:	f004 f90f 	bl	8010d4c <HAL_GPIO_Init>
}
 800cb2e:	b007      	add	sp, #28
 800cb30:	bd00      	pop	{pc}
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	48000400 	.word	0x48000400

0800cb38 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	0015      	movs	r5, r2
 800cb3c:	001c      	movs	r4, r3
 800cb3e:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800cb40:	f000 fd8e 	bl	800d660 <GetUart>
	
	if (huart == &huart1) 
 800cb44:	4a25      	ldr	r2, [pc, #148]	; (800cbdc <GetPortGPIOs+0xa4>)
	UART_HandleTypeDef* huart = GetUart(port);
 800cb46:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800cb48:	4290      	cmp	r0, r2
 800cb4a:	d00d      	beq.n	800cb68 <GetPortGPIOs+0x30>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800cb4c:	4a24      	ldr	r2, [pc, #144]	; (800cbe0 <GetPortGPIOs+0xa8>)
 800cb4e:	4290      	cmp	r0, r2
 800cb50:	d02e      	beq.n	800cbb0 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cb52:	4a24      	ldr	r2, [pc, #144]	; (800cbe4 <GetPortGPIOs+0xac>)
 800cb54:	4290      	cmp	r0, r2
 800cb56:	d014      	beq.n	800cb82 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800cb58:	4a23      	ldr	r2, [pc, #140]	; (800cbe8 <GetPortGPIOs+0xb0>)
 800cb5a:	4290      	cmp	r0, r2
 800cb5c:	d033      	beq.n	800cbc6 <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cb5e:	4a23      	ldr	r2, [pc, #140]	; (800cbec <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cb60:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d019      	beq.n	800cb9a <GetPortGPIOs+0x62>
	
	return result;	
}
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cb68:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800cb6a:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cb6c:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800cb6e:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cb70:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800cb72:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800cb74:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800cb76:	2380      	movs	r3, #128	; 0x80
 800cb78:	9a04      	ldr	r2, [sp, #16]
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e7f1      	b.n	800cb66 <GetPortGPIOs+0x2e>
		*TX_Pin = USART3_TX_PIN;
 800cb82:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cb84:	4b1a      	ldr	r3, [pc, #104]	; (800cbf0 <GetPortGPIOs+0xb8>)
		*TX_Pin = USART3_TX_PIN;
 800cb86:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cb88:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cb8a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cb8c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800cb8e:	2380      	movs	r3, #128	; 0x80
 800cb90:	9a04      	ldr	r2, [sp, #16]
 800cb92:	011b      	lsls	r3, r3, #4
 800cb94:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb96:	2000      	movs	r0, #0
 800cb98:	e7e5      	b.n	800cb66 <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cb9a:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800cb9c:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cb9e:	05db      	lsls	r3, r3, #23
 800cba0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cba2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cba4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800cba6:	2320      	movs	r3, #32
 800cba8:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800cbaa:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800cbac:	8013      	strh	r3, [r2, #0]
 800cbae:	e7da      	b.n	800cb66 <GetPortGPIOs+0x2e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cbb0:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800cbb2:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cbb4:	05db      	lsls	r3, r3, #23
 800cbb6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cbb8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cbba:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800cbbc:	2308      	movs	r3, #8
 800cbbe:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800cbc0:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800cbc2:	8013      	strh	r3, [r2, #0]
 800cbc4:	e7cf      	b.n	800cb66 <GetPortGPIOs+0x2e>
		*TX_Pin = USART5_TX_PIN;
 800cbc6:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800cbc8:	4b09      	ldr	r3, [pc, #36]	; (800cbf0 <GetPortGPIOs+0xb8>)
	BOS_Status result = BOS_OK;
 800cbca:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800cbcc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800cbce:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800cbd0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800cbd2:	2310      	movs	r3, #16
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	8013      	strh	r3, [r2, #0]
 800cbd8:	e7c5      	b.n	800cb66 <GetPortGPIOs+0x2e>
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	20007010 	.word	0x20007010
 800cbe0:	20007108 	.word	0x20007108
 800cbe4:	20006ee8 	.word	0x20006ee8
 800cbe8:	20006fa0 	.word	0x20006fa0
 800cbec:	20007090 	.word	0x20007090
 800cbf0:	48000400 	.word	0x48000400

0800cbf4 <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800cbf4:	2080      	movs	r0, #128	; 0x80
 800cbf6:	4b38      	ldr	r3, [pc, #224]	; (800ccd8 <IsFactoryReset+0xe4>)
 800cbf8:	0280      	lsls	r0, r0, #10
 800cbfa:	6959      	ldr	r1, [r3, #20]
{
 800cbfc:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800cbfe:	4301      	orrs	r1, r0
 800cc00:	6159      	str	r1, [r3, #20]
 800cc02:	695a      	ldr	r2, [r3, #20]
{
 800cc04:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800cc06:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800cc08:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800cc0a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800cc0e:	6959      	ldr	r1, [r3, #20]
 800cc10:	02c0      	lsls	r0, r0, #11
 800cc12:	4301      	orrs	r1, r0
 800cc14:	6159      	str	r1, [r3, #20]
 800cc16:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cc18:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800cc1a:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800cc1c:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800cc1e:	920a      	str	r2, [sp, #40]	; 0x28
 800cc20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800cc22:	6959      	ldr	r1, [r3, #20]
 800cc24:	0300      	lsls	r0, r0, #12
 800cc26:	4301      	orrs	r1, r0
 800cc28:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800cc2a:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800cc2c:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800cc2e:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800cc30:	4002      	ands	r2, r0
 800cc32:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800cc36:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cc38:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	615a      	str	r2, [r3, #20]
 800cc3e:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cc40:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800cc42:	400b      	ands	r3, r1
 800cc44:	930c      	str	r3, [sp, #48]	; 0x30
 800cc46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cc48:	230e      	movs	r3, #14
 800cc4a:	446b      	add	r3, sp
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	002a      	movs	r2, r5
 800cc50:	ab06      	add	r3, sp, #24
 800cc52:	a905      	add	r1, sp, #20
 800cc54:	2001      	movs	r0, #1
 800cc56:	f7ff ff6f 	bl	800cb38 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cc5a:	aa04      	add	r2, sp, #16
 800cc5c:	ab08      	add	r3, sp, #32
 800cc5e:	a907      	add	r1, sp, #28
 800cc60:	9400      	str	r4, [sp, #0]
 800cc62:	2005      	movs	r0, #5
 800cc64:	f7ff ff68 	bl	800cb38 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc68:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc6a:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc6c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800cc6e:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800cc70:	a90d      	add	r1, sp, #52	; 0x34
 800cc72:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800cc74:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc76:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800cc78:	f004 f868 	bl	8010d4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cc80:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cc82:	a90d      	add	r1, sp, #52	; 0x34
 800cc84:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cc86:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc88:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cc8a:	f004 f85f 	bl	8010d4c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800cc8e:	8829      	ldrh	r1, [r5, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	9805      	ldr	r0, [sp, #20]
 800cc94:	f004 f9fa 	bl	801108c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cc98:	2005      	movs	r0, #5
 800cc9a:	f000 fadd 	bl	800d258 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cc9e:	8821      	ldrh	r1, [r4, #0]
 800cca0:	9808      	ldr	r0, [sp, #32]
 800cca2:	f004 f9ed 	bl	8011080 <HAL_GPIO_ReadPin>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d006      	beq.n	800ccb8 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ccaa:	2201      	movs	r2, #1
	return 0;
 800ccac:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ccae:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <IsFactoryReset+0xe8>)
 800ccb0:	4252      	negs	r2, r2
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	b012      	add	sp, #72	; 0x48
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ccb8:	8829      	ldrh	r1, [r5, #0]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	9805      	ldr	r0, [sp, #20]
 800ccbe:	f004 f9e5 	bl	801108c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ccc2:	2005      	movs	r0, #5
 800ccc4:	f000 fac8 	bl	800d258 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ccc8:	8821      	ldrh	r1, [r4, #0]
 800ccca:	9808      	ldr	r0, [sp, #32]
 800cccc:	f004 f9d8 	bl	8011080 <HAL_GPIO_ReadPin>
 800ccd0:	2801      	cmp	r0, #1
 800ccd2:	d1ea      	bne.n	800ccaa <IsFactoryReset+0xb6>
 800ccd4:	e7ee      	b.n	800ccb4 <IsFactoryReset+0xc0>
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	40021000 	.word	0x40021000
 800ccdc:	20007ff0 	.word	0x20007ff0

0800cce0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cce0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cce2:	f002 fd03 	bl	800f6ec <HAL_IncTick>
  osSystickHandler();  
 800cce6:	f000 fdef 	bl	800d8c8 <osSystickHandler>

}
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ccec:	e7fe      	b.n	800ccec <HardFault_Handler>
 800ccee:	46c0      	nop			; (mov r8, r8)

0800ccf0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800ccf0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800ccf2:	4802      	ldr	r0, [pc, #8]	; (800ccfc <USART1_IRQHandler+0xc>)
 800ccf4:	f005 fdd2 	bl	801289c <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	46c0      	nop			; (mov r8, r8)
 800ccfc:	20007010 	.word	0x20007010

0800cd00 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cd00:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cd02:	4802      	ldr	r0, [pc, #8]	; (800cd0c <USART2_IRQHandler+0xc>)
 800cd04:	f005 fdca 	bl	801289c <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	46c0      	nop			; (mov r8, r8)
 800cd0c:	20007108 	.word	0x20007108

0800cd10 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cd10:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cd12:	4805      	ldr	r0, [pc, #20]	; (800cd28 <USART3_8_IRQHandler+0x18>)
 800cd14:	f005 fdc2 	bl	801289c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cd18:	4804      	ldr	r0, [pc, #16]	; (800cd2c <USART3_8_IRQHandler+0x1c>)
 800cd1a:	f005 fdbf 	bl	801289c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cd1e:	4804      	ldr	r0, [pc, #16]	; (800cd30 <USART3_8_IRQHandler+0x20>)
 800cd20:	f005 fdbc 	bl	801289c <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	46c0      	nop			; (mov r8, r8)
 800cd28:	20006ee8 	.word	0x20006ee8
 800cd2c:	20006fa0 	.word	0x20006fa0
 800cd30:	20007090 	.word	0x20007090

0800cd34 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cd34:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cd36:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	2310      	movs	r3, #16
 800cd3c:	4213      	tst	r3, r2
 800cd3e:	d10e      	bne.n	800cd5e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cd40:	4a0a      	ldr	r2, [pc, #40]	; (800cd6c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cd42:	6811      	ldr	r1, [r2, #0]
 800cd44:	05c9      	lsls	r1, r1, #23
 800cd46:	d406      	bmi.n	800cd56 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cd48:	6812      	ldr	r2, [r2, #0]
 800cd4a:	4213      	tst	r3, r2
 800cd4c:	d002      	beq.n	800cd54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cd4e:	4808      	ldr	r0, [pc, #32]	; (800cd70 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cd50:	f003 fa1a 	bl	8010188 <HAL_DMA_IRQHandler>
	}
}
 800cd54:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cd56:	2002      	movs	r0, #2
 800cd58:	f7fa fcb4 	bl	80076c4 <DMA_IRQHandler>
 800cd5c:	e7fa      	b.n	800cd54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800cd5e:	2005      	movs	r0, #5
 800cd60:	f7fa fcb0 	bl	80076c4 <DMA_IRQHandler>
 800cd64:	e7f6      	b.n	800cd54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800cd66:	46c0      	nop			; (mov r8, r8)
 800cd68:	40020400 	.word	0x40020400
 800cd6c:	40020000 	.word	0x40020000
 800cd70:	20001cd4 	.word	0x20001cd4

0800cd74 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cd74:	4b12      	ldr	r3, [pc, #72]	; (800cdc0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800cd76:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	03d2      	lsls	r2, r2, #15
 800cd7c:	d414      	bmi.n	800cda8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	02d2      	lsls	r2, r2, #11
 800cd82:	d40d      	bmi.n	800cda0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cd84:	4a0f      	ldr	r2, [pc, #60]	; (800cdc4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800cd86:	6812      	ldr	r2, [r2, #0]
 800cd88:	05d2      	lsls	r2, r2, #23
 800cd8a:	d411      	bmi.n	800cdb0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	04d2      	lsls	r2, r2, #19
 800cd90:	d412      	bmi.n	800cdb8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	01db      	lsls	r3, r3, #7
 800cd96:	d506      	bpl.n	800cda6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cd98:	480b      	ldr	r0, [pc, #44]	; (800cdc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cd9a:	f003 f9f5 	bl	8010188 <HAL_DMA_IRQHandler>
	}
}
 800cd9e:	e002      	b.n	800cda6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800cda0:	2004      	movs	r0, #4
 800cda2:	f7fa fc8f 	bl	80076c4 <DMA_IRQHandler>
}
 800cda6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cda8:	2003      	movs	r0, #3
 800cdaa:	f7fa fc8b 	bl	80076c4 <DMA_IRQHandler>
 800cdae:	e7fa      	b.n	800cda6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800cdb0:	2006      	movs	r0, #6
 800cdb2:	f7fa fc87 	bl	80076c4 <DMA_IRQHandler>
 800cdb6:	e7f6      	b.n	800cda6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cdb8:	4804      	ldr	r0, [pc, #16]	; (800cdcc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cdba:	f003 f9e5 	bl	8010188 <HAL_DMA_IRQHandler>
 800cdbe:	e7f2      	b.n	800cda6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800cdc0:	40020000 	.word	0x40020000
 800cdc4:	40020400 	.word	0x40020400
 800cdc8:	20001d44 	.word	0x20001d44
 800cdcc:	20001d0c 	.word	0x20001d0c

0800cdd0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800cdd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800cdd2:	4802      	ldr	r0, [pc, #8]	; (800cddc <ADC1_COMP_IRQHandler+0xc>)
 800cdd4:	f002 fed0 	bl	800fb78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	20006e7c 	.word	0x20006e7c

0800cde0 <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cde0:	2300      	movs	r3, #0
{
 800cde2:	b510      	push	{r4, lr}
 800cde4:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cde6:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cde8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cdea:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cdf0:	f7fe ff9e 	bl	800bd30 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cdf4:	0020      	movs	r0, r4
 800cdf6:	f7fe fcc1 	bl	800b77c <GetPort>
 800cdfa:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <HAL_UART_TxCpltCallback+0x2c>)
 800cdfc:	0080      	lsls	r0, r0, #2
 800cdfe:	58c0      	ldr	r0, [r0, r3]
 800ce00:	a901      	add	r1, sp, #4
 800ce02:	f001 f8e1 	bl	800dfc8 <xQueueGiveFromISR>
}
 800ce06:	b002      	add	sp, #8
 800ce08:	bd10      	pop	{r4, pc}
 800ce0a:	46c0      	nop			; (mov r8, r8)
 800ce0c:	20006e38 	.word	0x20006e38

0800ce10 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce10:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800ce12:	2369      	movs	r3, #105	; 0x69
 800ce14:	2501      	movs	r5, #1
 800ce16:	54c5      	strb	r5, [r0, r3]
{
 800ce18:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800ce1a:	f7fe fcaf 	bl	800b77c <GetPort>
	if (portStatus[port] == STREAM) {
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <HAL_UART_ErrorCallback+0x3c>)
 800ce20:	5c1b      	ldrb	r3, [r3, r0]
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d004      	beq.n	800ce30 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800ce26:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <HAL_UART_ErrorCallback+0x40>)
 800ce28:	1818      	adds	r0, r3, r0
 800ce2a:	3801      	subs	r0, #1
 800ce2c:	7005      	strb	r5, [r0, #0]
	}	
}
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800ce30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce32:	3801      	subs	r0, #1
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	0080      	lsls	r0, r0, #2
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <HAL_UART_ErrorCallback+0x44>)
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	58c3      	ldr	r3, [r0, r3]
 800ce40:	0020      	movs	r0, r4
 800ce42:	6819      	ldr	r1, [r3, #0]
 800ce44:	3128      	adds	r1, #40	; 0x28
 800ce46:	f005 f989 	bl	801215c <HAL_UART_Receive_DMA>
 800ce4a:	e7f0      	b.n	800ce2e <HAL_UART_ErrorCallback+0x1e>
 800ce4c:	20000c3c 	.word	0x20000c3c
 800ce50:	20001308 	.word	0x20001308
 800ce54:	200012f4 	.word	0x200012f4

0800ce58 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800ce5c:	f7fe fc8e 	bl	800b77c <GetPort>
 800ce60:	4d12      	ldr	r5, [pc, #72]	; (800ceac <HAL_UART_RxCpltCallback+0x54>)
 800ce62:	5c2b      	ldrb	r3, [r5, r0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d006      	beq.n	800ce76 <HAL_UART_RxCpltCallback+0x1e>
 800ce68:	0020      	movs	r0, r4
 800ce6a:	f7fe fc87 	bl	800b77c <GetPort>
 800ce6e:	5c2b      	ldrb	r3, [r5, r0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d000      	beq.n	800ce76 <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
	}
}
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800ce76:	0020      	movs	r0, r4
 800ce78:	f7fe fc80 	bl	800b77c <GetPort>
 800ce7c:	4b0c      	ldr	r3, [pc, #48]	; (800ceb0 <HAL_UART_RxCpltCallback+0x58>)
 800ce7e:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800ce80:	0020      	movs	r0, r4
 800ce82:	f7fe fc7b 	bl	800b77c <GetPort>
 800ce86:	2305      	movs	r3, #5
 800ce88:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800ce8a:	0020      	movs	r0, r4
 800ce8c:	f7fe fc76 	bl	800b77c <GetPort>
 800ce90:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <HAL_UART_RxCpltCallback+0x5c>)
 800ce92:	1818      	adds	r0, r3, r0
 800ce94:	2300      	movs	r3, #0
 800ce96:	3801      	subs	r0, #1
 800ce98:	7003      	strb	r3, [r0, #0]
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800ce9a:	0020      	movs	r0, r4
 800ce9c:	f7fe fc6e 	bl	800b77c <GetPort>
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <HAL_UART_RxCpltCallback+0x60>)
 800cea2:	1818      	adds	r0, r3, r0
 800cea4:	2301      	movs	r3, #1
 800cea6:	3801      	subs	r0, #1
 800cea8:	7003      	strb	r3, [r0, #0]
 800ceaa:	e7e3      	b.n	800ce74 <HAL_UART_RxCpltCallback+0x1c>
 800ceac:	20000c3c 	.word	0x20000c3c
 800ceb0:	20006d34 	.word	0x20006d34
 800ceb4:	20001310 	.word	0x20001310
 800ceb8:	20001308 	.word	0x20001308

0800cebc <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cebc:	b672      	cpsid	i
 800cebe:	e7fe      	b.n	800cebe <vApplicationStackOverflowHook+0x2>

0800cec0 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cec0:	b672      	cpsid	i
 800cec2:	e7fe      	b.n	800cec2 <vApplicationMallocFailedHook+0x2>

0800cec4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cec6:	46de      	mov	lr, fp
 800cec8:	464e      	mov	r6, r9
 800ceca:	4645      	mov	r5, r8
 800cecc:	4657      	mov	r7, sl
 800cece:	b5e0      	push	{r5, r6, r7, lr}
 800ced0:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ced2:	ae04      	add	r6, sp, #16
 800ced4:	0032      	movs	r2, r6
 800ced6:	4b34      	ldr	r3, [pc, #208]	; (800cfa8 <RTC_CalendarConfig+0xe4>)
 800ced8:	cb13      	ldmia	r3!, {r0, r1, r4}
 800ceda:	c213      	stmia	r2!, {r0, r1, r4}
 800cedc:	ab01      	add	r3, sp, #4
 800cede:	4698      	mov	r8, r3
 800cee0:	4642      	mov	r2, r8
 800cee2:	4b32      	ldr	r3, [pc, #200]	; (800cfac <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800cee4:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cee6:	cb03      	ldmia	r3!, {r0, r1}
 800cee8:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800ceea:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ceec:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800ceee:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cef0:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cef2:	f005 fd62 	bl	80129ba <atoi>
 800cef6:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800cef8:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800cefa:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800cefc:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800cefe:	f005 fd5c 	bl	80129ba <atoi>
 800cf02:	b2c3      	uxtb	r3, r0
 800cf04:	4699      	mov	r9, r3
 800cf06:	4d2a      	ldr	r5, [pc, #168]	; (800cfb0 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800cf08:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cf0a:	6829      	ldr	r1, [r5, #0]
 800cf0c:	0030      	movs	r0, r6
 800cf0e:	f7f3 f8f9 	bl	8000104 <strcmp>
 800cf12:	3401      	adds	r4, #1
 800cf14:	b2e4      	uxtb	r4, r4
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d100      	bne.n	800cf1c <RTC_CalendarConfig+0x58>
 800cf1a:	0027      	movs	r7, r4
 800cf1c:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800cf1e:	2c0c      	cmp	r4, #12
 800cf20:	d1f3      	bne.n	800cf0a <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cf22:	200a      	movs	r0, #10
 800cf24:	4468      	add	r0, sp
 800cf26:	f005 fd48 	bl	80129ba <atoi>
	*(comDate + 5) = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	7173      	strb	r3, [r6, #5]
 800cf2e:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800cf30:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800cf32:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800cf34:	1dd8      	adds	r0, r3, #7
 800cf36:	f005 fd40 	bl	80129ba <atoi>
	*(comDate + 2) = 0;
 800cf3a:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800cf3c:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800cf3e:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800cf40:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800cf42:	f005 fd3a 	bl	80129ba <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800cf46:	466b      	mov	r3, sp
 800cf48:	4652      	mov	r2, sl
 800cf4a:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800cf4c:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800cf4e:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800cf50:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cf52:	466a      	mov	r2, sp
 800cf54:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf56:	4f17      	ldr	r7, [pc, #92]	; (800cfb4 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800cf58:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cf5a:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf5c:	4669      	mov	r1, sp
 800cf5e:	2200      	movs	r2, #0
 800cf60:	0038      	movs	r0, r7
 800cf62:	f004 fee1 	bl	8011d28 <HAL_RTC_SetDate>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d116      	bne.n	800cf98 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cf6a:	2218      	movs	r2, #24
 800cf6c:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800cf6e:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cf70:	7208      	strb	r0, [r1, #8]
 800cf72:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cf74:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cf76:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800cf7c:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800cf7e:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800cf80:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cf82:	f004 fe3d 	bl	8011c00 <HAL_RTC_SetTime>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d106      	bne.n	800cf98 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cf8a:	0038      	movs	r0, r7
 800cf8c:	4a0b      	ldr	r2, [pc, #44]	; (800cfbc <RTC_CalendarConfig+0xf8>)
 800cf8e:	2101      	movs	r1, #1
 800cf90:	f004 ff46 	bl	8011e20 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cf94:	2000      	movs	r0, #0
 800cf96:	e000      	b.n	800cf9a <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800cf98:	20ff      	movs	r0, #255	; 0xff
}
 800cf9a:	b00d      	add	sp, #52	; 0x34
 800cf9c:	bc3c      	pop	{r2, r3, r4, r5}
 800cf9e:	4690      	mov	r8, r2
 800cfa0:	4699      	mov	r9, r3
 800cfa2:	46a2      	mov	sl, r4
 800cfa4:	46ab      	mov	fp, r5
 800cfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfa8:	08017fd4 	.word	0x08017fd4
 800cfac:	08017ff8 	.word	0x08017ff8
 800cfb0:	2000005c 	.word	0x2000005c
 800cfb4:	200071a0 	.word	0x200071a0
 800cfb8:	20006db4 	.word	0x20006db4
 800cfbc:	000032f2 	.word	0x000032f2

0800cfc0 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800cfc0:	2380      	movs	r3, #128	; 0x80
{
 800cfc2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800cfc4:	4d1e      	ldr	r5, [pc, #120]	; (800d040 <RTC_Init+0x80>)
 800cfc6:	021b      	lsls	r3, r3, #8
 800cfc8:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800cfca:	4c1e      	ldr	r4, [pc, #120]	; (800d044 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800cfd0:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800cfd2:	4b1d      	ldr	r3, [pc, #116]	; (800d048 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800cfd4:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800cfd6:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cfd8:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800cfda:	4a1c      	ldr	r2, [pc, #112]	; (800d04c <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cfdc:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cfde:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800cfe0:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cfe2:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cfe4:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cfe6:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cfe8:	f004 fdc2 	bl	8011b70 <HAL_RTC_Init>
 800cfec:	0006      	movs	r6, r0
 800cfee:	20ff      	movs	r0, #255	; 0xff
 800cff0:	2e00      	cmp	r6, #0
 800cff2:	d119      	bne.n	800d028 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cff4:	2101      	movs	r1, #1
 800cff6:	0020      	movs	r0, r4
 800cff8:	f004 ff18 	bl	8011e2c <HAL_RTCEx_BKUPRead>
 800cffc:	4b14      	ldr	r3, [pc, #80]	; (800d050 <RTC_Init+0x90>)
 800cffe:	4298      	cmp	r0, r3
 800d000:	d113      	bne.n	800d02a <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	d501      	bpl.n	800d00c <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d008:	4b12      	ldr	r3, [pc, #72]	; (800d054 <RTC_Init+0x94>)
 800d00a:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d00c:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <RTC_Init+0x80>)
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	015b      	lsls	r3, r3, #5
 800d012:	d50c      	bpl.n	800d02e <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800d014:	2201      	movs	r2, #1
 800d016:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <RTC_Init+0x94>)
	return BOS_OK;
 800d018:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800d01a:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d01c:	2380      	movs	r3, #128	; 0x80
 800d01e:	4a08      	ldr	r2, [pc, #32]	; (800d040 <RTC_Init+0x80>)
 800d020:	045b      	lsls	r3, r3, #17
 800d022:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d024:	430b      	orrs	r3, r1
 800d026:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d028:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800d02a:	f7ff ff4b 	bl	800cec4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d02e:	2380      	movs	r3, #128	; 0x80
 800d030:	4a03      	ldr	r2, [pc, #12]	; (800d040 <RTC_Init+0x80>)
 800d032:	045b      	lsls	r3, r3, #17
 800d034:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800d036:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d038:	430b      	orrs	r3, r1
 800d03a:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d03c:	e7f4      	b.n	800d028 <RTC_Init+0x68>
 800d03e:	46c0      	nop			; (mov r8, r8)
 800d040:	40021000 	.word	0x40021000
 800d044:	200071a0 	.word	0x200071a0
 800d048:	40002800 	.word	0x40002800
 800d04c:	000007cf 	.word	0x000007cf
 800d050:	000032f2 	.word	0x000032f2
 800d054:	20001ecc 	.word	0x20001ecc

0800d058 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d05a:	46c6      	mov	lr, r8
 800d05c:	b500      	push	{lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	ac0c      	add	r4, sp, #48	; 0x30
 800d062:	7827      	ldrb	r7, [r4, #0]
 800d064:	ac0d      	add	r4, sp, #52	; 0x34
 800d066:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d068:	3230      	adds	r2, #48	; 0x30
{
 800d06a:	46a0      	mov	r8, r4
 800d06c:	ac0e      	add	r4, sp, #56	; 0x38
 800d06e:	7825      	ldrb	r5, [r4, #0]
 800d070:	ac0f      	add	r4, sp, #60	; 0x3c
 800d072:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800d074:	466c      	mov	r4, sp
 800d076:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d078:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d07a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d07c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d07e:	4c20      	ldr	r4, [pc, #128]	; (800d100 <BOS_CalendarConfig+0xa8>)
 800d080:	2200      	movs	r2, #0
 800d082:	4669      	mov	r1, sp
 800d084:	0020      	movs	r0, r4
 800d086:	f004 fe4f 	bl	8011d28 <HAL_RTC_SetDate>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d123      	bne.n	800d0d6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800d08e:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800d090:	a901      	add	r1, sp, #4
 800d092:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800d094:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800d096:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d098:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d09a:	2d0c      	cmp	r5, #12
 800d09c:	d820      	bhi.n	800d0e0 <BOS_CalendarConfig+0x88>
 800d09e:	4d19      	ldr	r5, [pc, #100]	; (800d104 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800d0a0:	2e01      	cmp	r6, #1
 800d0a2:	d022      	beq.n	800d0ea <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d0a4:	2e02      	cmp	r6, #2
 800d0a6:	d025      	beq.n	800d0f4 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d0a8:	2318      	movs	r3, #24
 800d0aa:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	0020      	movs	r0, r4
 800d0b0:	f004 fda6 	bl	8011c00 <HAL_RTC_SetTime>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d10e      	bne.n	800d0d6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d0b8:	7b6b      	ldrb	r3, [r5, #13]
 800d0ba:	7929      	ldrb	r1, [r5, #4]
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	301b      	adds	r0, #27
 800d0c0:	4319      	orrs	r1, r3
 800d0c2:	30ff      	adds	r0, #255	; 0xff
 800d0c4:	f7fa fbe8 	bl	8007898 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d0c8:	0020      	movs	r0, r4
 800d0ca:	4a0f      	ldr	r2, [pc, #60]	; (800d108 <BOS_CalendarConfig+0xb0>)
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	f004 fea7 	bl	8011e20 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e000      	b.n	800d0d8 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800d0d6:	20ff      	movs	r0, #255	; 0xff
}
 800d0d8:	b006      	add	sp, #24
 800d0da:	bc04      	pop	{r2}
 800d0dc:	4690      	mov	r8, r2
 800d0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800d0e0:	2318      	movs	r3, #24
 800d0e2:	4d08      	ldr	r5, [pc, #32]	; (800d104 <BOS_CalendarConfig+0xac>)
 800d0e4:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800d0e6:	2e01      	cmp	r6, #1
 800d0e8:	d1dc      	bne.n	800d0a4 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d0ee:	330c      	adds	r3, #12
 800d0f0:	736b      	strb	r3, [r5, #13]
 800d0f2:	e7db      	b.n	800d0ac <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d0f8:	3b34      	subs	r3, #52	; 0x34
 800d0fa:	736b      	strb	r3, [r5, #13]
 800d0fc:	e7d6      	b.n	800d0ac <BOS_CalendarConfig+0x54>
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	200071a0 	.word	0x200071a0
 800d104:	20006db4 	.word	0x20006db4
 800d108:	000032f2 	.word	0x000032f2

0800d10c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d10c:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d10e:	4d16      	ldr	r5, [pc, #88]	; (800d168 <GetTimeDate+0x5c>)
{
 800d110:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d112:	ac01      	add	r4, sp, #4
 800d114:	0021      	movs	r1, r4
 800d116:	2200      	movs	r2, #0
 800d118:	0028      	movs	r0, r5
 800d11a:	f004 fc91 	bl	8011a40 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d11e:	4669      	mov	r1, sp
 800d120:	2200      	movs	r2, #0
 800d122:	0028      	movs	r0, r5
 800d124:	f004 fcbc 	bl	8011aa0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d128:	7a22      	ldrb	r2, [r4, #8]
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <GetTimeDate+0x60>)
 800d12c:	09d2      	lsrs	r2, r2, #7
 800d12e:	3201      	adds	r2, #1
 800d130:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d132:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800d134:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d136:	0852      	lsrs	r2, r2, #1
 800d138:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d13a:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d13c:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800d13e:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d140:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d142:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800d144:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d146:	7822      	ldrb	r2, [r4, #0]
 800d148:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d14a:	466a      	mov	r2, sp
 800d14c:	7892      	ldrb	r2, [r2, #2]
 800d14e:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d150:	466a      	mov	r2, sp
 800d152:	7852      	ldrb	r2, [r2, #1]
 800d154:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d156:	466a      	mov	r2, sp
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d15c:	466a      	mov	r2, sp
 800d15e:	78d2      	ldrb	r2, [r2, #3]
 800d160:	4462      	add	r2, ip
 800d162:	831a      	strh	r2, [r3, #24]
}
 800d164:	b007      	add	sp, #28
 800d166:	bd30      	pop	{r4, r5, pc}
 800d168:	200071a0 	.word	0x200071a0
 800d16c:	20006db4 	.word	0x20006db4

0800d170 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d170:	2080      	movs	r0, #128	; 0x80
 800d172:	4a13      	ldr	r2, [pc, #76]	; (800d1c0 <TIM_USEC_Init+0x50>)
{
 800d174:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d176:	69d1      	ldr	r1, [r2, #28]
 800d178:	0040      	lsls	r0, r0, #1
 800d17a:	4301      	orrs	r1, r0
 800d17c:	61d1      	str	r1, [r2, #28]
 800d17e:	69d3      	ldr	r3, [r2, #28]
{
 800d180:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d182:	4003      	ands	r3, r0
 800d184:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d186:	4c0f      	ldr	r4, [pc, #60]	; (800d1c4 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d188:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d18a:	4b0f      	ldr	r3, [pc, #60]	; (800d1c8 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d18c:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d18e:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d190:	f004 fba6 	bl	80118e0 <HAL_RCC_GetPCLK1Freq>
 800d194:	490d      	ldr	r1, [pc, #52]	; (800d1cc <TIM_USEC_Init+0x5c>)
 800d196:	f7f2 ffdb 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d19a:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d19c:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d19e:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d1a0:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1a2:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d1a4:	f004 feaa 	bl	8011efc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d1a8:	a902      	add	r1, sp, #8
 800d1aa:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1ac:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1ae:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d1b0:	f004 febe 	bl	8011f30 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d1b4:	0020      	movs	r0, r4
 800d1b6:	f004 fe41 	bl	8011e3c <HAL_TIM_Base_Start>
}
 800d1ba:	b005      	add	sp, #20
 800d1bc:	bd30      	pop	{r4, r5, pc}
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	40021000 	.word	0x40021000
 800d1c4:	200071fc 	.word	0x200071fc
 800d1c8:	40002000 	.word	0x40002000
 800d1cc:	000f4240 	.word	0x000f4240
 800d1d0:	0000ffff 	.word	0x0000ffff

0800d1d4 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d1d4:	2080      	movs	r0, #128	; 0x80
 800d1d6:	4a13      	ldr	r2, [pc, #76]	; (800d224 <TIM_MSEC_Init+0x50>)
{
 800d1d8:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d1da:	6991      	ldr	r1, [r2, #24]
 800d1dc:	0240      	lsls	r0, r0, #9
 800d1de:	4301      	orrs	r1, r0
 800d1e0:	6191      	str	r1, [r2, #24]
 800d1e2:	6993      	ldr	r3, [r2, #24]
{
 800d1e4:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d1e6:	4003      	ands	r3, r0
 800d1e8:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d1ea:	4c0f      	ldr	r4, [pc, #60]	; (800d228 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800d1ec:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1f0:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d1f2:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d1f4:	f004 fb74 	bl	80118e0 <HAL_RCC_GetPCLK1Freq>
 800d1f8:	21fa      	movs	r1, #250	; 0xfa
 800d1fa:	0089      	lsls	r1, r1, #2
 800d1fc:	f7f2 ffa8 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d200:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d202:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800d204:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800d206:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d208:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800d20a:	f004 fe77 	bl	8011efc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d20e:	a902      	add	r1, sp, #8
 800d210:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d212:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d214:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d216:	f004 fe8b 	bl	8011f30 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d21a:	0020      	movs	r0, r4
 800d21c:	f004 fe0e 	bl	8011e3c <HAL_TIM_Base_Start>
}
 800d220:	b005      	add	sp, #20
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	40021000 	.word	0x40021000
 800d228:	200071c0 	.word	0x200071c0
 800d22c:	40014000 	.word	0x40014000
 800d230:	0000ffff 	.word	0x0000ffff

0800d234 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d234:	b510      	push	{r4, lr}
 800d236:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d238:	f002 f91a 	bl	800f470 <vPortEnterCritical>
	
	if (Delay)
 800d23c:	2c00      	cmp	r4, #0
 800d23e:	d006      	beq.n	800d24e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d240:	4b04      	ldr	r3, [pc, #16]	; (800d254 <StartMicroDelay+0x20>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d246:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d248:	1a5b      	subs	r3, r3, r1
 800d24a:	42a3      	cmp	r3, r4
 800d24c:	d9fb      	bls.n	800d246 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d24e:	f002 f91b 	bl	800f488 <vPortExitCritical>
}
 800d252:	bd10      	pop	{r4, pc}
 800d254:	200071fc 	.word	0x200071fc

0800d258 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d258:	b510      	push	{r4, lr}
 800d25a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d25c:	f002 f908 	bl	800f470 <vPortEnterCritical>
	
	if (Delay)
 800d260:	2c00      	cmp	r4, #0
 800d262:	d006      	beq.n	800d272 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d264:	4b04      	ldr	r3, [pc, #16]	; (800d278 <StartMilliDelay+0x20>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d26a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d26c:	1a5b      	subs	r3, r3, r1
 800d26e:	42a3      	cmp	r3, r4
 800d270:	d9fb      	bls.n	800d26a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d272:	f002 f909 	bl	800f488 <vPortExitCritical>
}
 800d276:	bd10      	pop	{r4, pc}
 800d278:	200071c0 	.word	0x200071c0

0800d27c <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800d27c:	4809      	ldr	r0, [pc, #36]	; (800d2a4 <MX_USART1_UART_Init+0x28>)
 800d27e:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <MX_USART1_UART_Init+0x2c>)
{
 800d280:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d282:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d284:	23e1      	movs	r3, #225	; 0xe1
 800d286:	031b      	lsls	r3, r3, #12
 800d288:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d28a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d28c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d28e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d290:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d292:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d294:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d296:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d298:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d29a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d29c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d29e:	f005 fa37 	bl	8012710 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d2a2:	bd10      	pop	{r4, pc}
 800d2a4:	20007010 	.word	0x20007010
 800d2a8:	40013800 	.word	0x40013800

0800d2ac <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d2ac:	4809      	ldr	r0, [pc, #36]	; (800d2d4 <MX_USART2_UART_Init+0x28>)
 800d2ae:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <MX_USART2_UART_Init+0x2c>)
{
 800d2b0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d2b2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d2b4:	23e1      	movs	r3, #225	; 0xe1
 800d2b6:	031b      	lsls	r3, r3, #12
 800d2b8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d2ba:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d2bc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d2be:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d2c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d2c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d2c4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2c6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2c8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d2ca:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d2cc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d2ce:	f005 fa1f 	bl	8012710 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d2d2:	bd10      	pop	{r4, pc}
 800d2d4:	20007108 	.word	0x20007108
 800d2d8:	40004400 	.word	0x40004400

0800d2dc <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d2dc:	4809      	ldr	r0, [pc, #36]	; (800d304 <MX_USART3_UART_Init+0x28>)
 800d2de:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <MX_USART3_UART_Init+0x2c>)
{
 800d2e0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d2e2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d2e4:	23e1      	movs	r3, #225	; 0xe1
 800d2e6:	031b      	lsls	r3, r3, #12
 800d2e8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d2ea:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d2ec:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d2ee:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d2f0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d2f2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d2f4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2f6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2f8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d2fa:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d2fc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d2fe:	f005 fa07 	bl	8012710 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d302:	bd10      	pop	{r4, pc}
 800d304:	20006ee8 	.word	0x20006ee8
 800d308:	40004800 	.word	0x40004800

0800d30c <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d30c:	4809      	ldr	r0, [pc, #36]	; (800d334 <MX_USART5_UART_Init+0x28>)
 800d30e:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <MX_USART5_UART_Init+0x2c>)
{
 800d310:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d312:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d314:	23e1      	movs	r3, #225	; 0xe1
 800d316:	031b      	lsls	r3, r3, #12
 800d318:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d31a:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d31c:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d31e:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d320:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d322:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d324:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d326:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d328:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d32a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d32c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d32e:	f005 f9ef 	bl	8012710 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d332:	bd10      	pop	{r4, pc}
 800d334:	20006fa0 	.word	0x20006fa0
 800d338:	40005000 	.word	0x40005000

0800d33c <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d33c:	4809      	ldr	r0, [pc, #36]	; (800d364 <MX_USART6_UART_Init+0x28>)
 800d33e:	4b0a      	ldr	r3, [pc, #40]	; (800d368 <MX_USART6_UART_Init+0x2c>)
{
 800d340:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d342:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d344:	23e1      	movs	r3, #225	; 0xe1
 800d346:	031b      	lsls	r3, r3, #12
 800d348:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d34a:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d34c:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d34e:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d350:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d352:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d354:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d356:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d358:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d35a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d35c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d35e:	f005 f9d7 	bl	8012710 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d362:	bd10      	pop	{r4, pc}
 800d364:	20007090 	.word	0x20007090
 800d368:	40011400 	.word	0x40011400

0800d36c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36e:	46c6      	mov	lr, r8
 800d370:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d372:	6803      	ldr	r3, [r0, #0]
 800d374:	4a6e      	ldr	r2, [pc, #440]	; (800d530 <HAL_UART_MspInit+0x1c4>)
{
 800d376:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d041      	beq.n	800d400 <HAL_UART_MspInit+0x94>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d37c:	4a6d      	ldr	r2, [pc, #436]	; (800d534 <HAL_UART_MspInit+0x1c8>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d06c      	beq.n	800d45c <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d382:	4a6d      	ldr	r2, [pc, #436]	; (800d538 <HAL_UART_MspInit+0x1cc>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <HAL_UART_MspInit+0x1e>
 800d388:	e094      	b.n	800d4b4 <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d38a:	4a6c      	ldr	r2, [pc, #432]	; (800d53c <HAL_UART_MspInit+0x1d0>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d006      	beq.n	800d39e <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d390:	4a6b      	ldr	r2, [pc, #428]	; (800d540 <HAL_UART_MspInit+0x1d4>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d100      	bne.n	800d398 <HAL_UART_MspInit+0x2c>
 800d396:	e0b0      	b.n	800d4fa <HAL_UART_MspInit+0x18e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d398:	4a6a      	ldr	r2, [pc, #424]	; (800d544 <HAL_UART_MspInit+0x1d8>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d003      	beq.n	800d3a6 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d39e:	b00a      	add	sp, #40	; 0x28
 800d3a0:	bc04      	pop	{r2}
 800d3a2:	4690      	mov	r8, r2
 800d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800d3a6:	2420      	movs	r4, #32
 800d3a8:	4b67      	ldr	r3, [pc, #412]	; (800d548 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d3aa:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d3ac:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ae:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d3b0:	4322      	orrs	r2, r4
 800d3b2:	619a      	str	r2, [r3, #24]
 800d3b4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3b6:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d3b8:	4023      	ands	r3, r4
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d3be:	2310      	movs	r3, #16
 800d3c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3c2:	3b0e      	subs	r3, #14
 800d3c4:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d3c6:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d3c8:	a905      	add	r1, sp, #20
 800d3ca:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ce:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d3d2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d3d4:	f003 fcba 	bl	8010d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d8:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d3da:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d3dc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3e0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d3e2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d3e4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d3e6:	a905      	add	r1, sp, #20
 800d3e8:	05c0      	lsls	r0, r0, #23
 800d3ea:	f003 fcaf 	bl	8010d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	201d      	movs	r0, #29
 800d3f4:	f002 fcc0 	bl	800fd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d3f8:	201d      	movs	r0, #29
 800d3fa:	f002 fce9 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
}
 800d3fe:	e7ce      	b.n	800d39e <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800d400:	2080      	movs	r0, #128	; 0x80
 800d402:	4a51      	ldr	r2, [pc, #324]	; (800d548 <HAL_UART_MspInit+0x1dc>)
 800d404:	01c0      	lsls	r0, r0, #7
 800d406:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d408:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d40a:	4301      	orrs	r1, r0
 800d40c:	6191      	str	r1, [r2, #24]
 800d40e:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d410:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d412:	4003      	ands	r3, r0
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d418:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d41a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d41c:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d41e:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d420:	a905      	add	r1, sp, #20
 800d422:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d424:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d426:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d428:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d42a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d42c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d42e:	f003 fc8d 	bl	8010d4c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d432:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d434:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d436:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d438:	a905      	add	r1, sp, #20
 800d43a:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d43c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d43e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d440:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d442:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d444:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d446:	f003 fc81 	bl	8010d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d44a:	2200      	movs	r2, #0
 800d44c:	2101      	movs	r1, #1
 800d44e:	201b      	movs	r0, #27
 800d450:	f002 fc92 	bl	800fd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d454:	201b      	movs	r0, #27
 800d456:	f002 fcbb 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
 800d45a:	e7a0      	b.n	800d39e <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d45c:	2080      	movs	r0, #128	; 0x80
 800d45e:	4a3a      	ldr	r2, [pc, #232]	; (800d548 <HAL_UART_MspInit+0x1dc>)
 800d460:	0280      	lsls	r0, r0, #10
 800d462:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d464:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d466:	4301      	orrs	r1, r0
 800d468:	61d1      	str	r1, [r2, #28]
 800d46a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d46c:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d46e:	4003      	ands	r3, r0
 800d470:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d472:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d474:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d476:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d478:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d47a:	a905      	add	r1, sp, #20
 800d47c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d47e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d480:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d482:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d484:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d486:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d488:	f003 fc60 	bl	8010d4c <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d48c:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d48e:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d490:	a905      	add	r1, sp, #20
 800d492:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d494:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d496:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d498:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d49a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d49c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d49e:	f003 fc55 	bl	8010d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	201c      	movs	r0, #28
 800d4a8:	f002 fc66 	bl	800fd78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d4ac:	201c      	movs	r0, #28
 800d4ae:	f002 fc8f 	bl	800fdd0 <HAL_NVIC_EnableIRQ>
 800d4b2:	e774      	b.n	800d39e <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d4b4:	2080      	movs	r0, #128	; 0x80
 800d4b6:	4a24      	ldr	r2, [pc, #144]	; (800d548 <HAL_UART_MspInit+0x1dc>)
 800d4b8:	02c0      	lsls	r0, r0, #11
 800d4ba:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4bc:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d4be:	4301      	orrs	r1, r0
 800d4c0:	61d1      	str	r1, [r2, #28]
 800d4c2:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4c4:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d4c6:	4003      	ands	r3, r0
 800d4c8:	9302      	str	r3, [sp, #8]
 800d4ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d4cc:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4ce:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d4d0:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d4d2:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d4d4:	a905      	add	r1, sp, #20
 800d4d6:	481d      	ldr	r0, [pc, #116]	; (800d54c <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d4d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4da:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4dc:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d4e0:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d4e2:	f003 fc33 	bl	8010d4c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d4e6:	2380      	movs	r3, #128	; 0x80
 800d4e8:	011b      	lsls	r3, r3, #4
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d4ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ec:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4ee:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4f0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d4f2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d4f4:	a905      	add	r1, sp, #20
 800d4f6:	4815      	ldr	r0, [pc, #84]	; (800d54c <HAL_UART_MspInit+0x1e0>)
 800d4f8:	e777      	b.n	800d3ea <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800d4fa:	2080      	movs	r0, #128	; 0x80
 800d4fc:	4a12      	ldr	r2, [pc, #72]	; (800d548 <HAL_UART_MspInit+0x1dc>)
 800d4fe:	0340      	lsls	r0, r0, #13
 800d500:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d502:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d504:	4301      	orrs	r1, r0
 800d506:	61d1      	str	r1, [r2, #28]
 800d508:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d50a:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d50c:	4003      	ands	r3, r0
 800d50e:	9303      	str	r3, [sp, #12]
 800d510:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d512:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d514:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d516:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d518:	a905      	add	r1, sp, #20
 800d51a:	480c      	ldr	r0, [pc, #48]	; (800d54c <HAL_UART_MspInit+0x1e0>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d51c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d51e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d520:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d522:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d524:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d526:	f003 fc11 	bl	8010d4c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d52a:	2310      	movs	r3, #16
 800d52c:	e7dd      	b.n	800d4ea <HAL_UART_MspInit+0x17e>
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	40013800 	.word	0x40013800
 800d534:	40004400 	.word	0x40004400
 800d538:	40004800 	.word	0x40004800
 800d53c:	40004c00 	.word	0x40004c00
 800d540:	40005000 	.word	0x40005000
 800d544:	40011400 	.word	0x40011400
 800d548:	40021000 	.word	0x40021000
 800d54c:	48000400 	.word	0x48000400

0800d550 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	4647      	mov	r7, r8
 800d554:	46ce      	mov	lr, r9
 800d556:	b580      	push	{r7, lr}
 800d558:	0017      	movs	r7, r2
 800d55a:	1e42      	subs	r2, r0, #1
 800d55c:	b2d2      	uxtb	r2, r2
 800d55e:	000e      	movs	r6, r1
 800d560:	2a04      	cmp	r2, #4
 800d562:	d80e      	bhi.n	800d582 <writePxMutex+0x32>
 800d564:	4911      	ldr	r1, [pc, #68]	; (800d5ac <writePxMutex+0x5c>)
 800d566:	0092      	lsls	r2, r2, #2
 800d568:	5852      	ldr	r2, [r2, r1]
 800d56a:	4690      	mov	r8, r2
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	d008      	beq.n	800d582 <writePxMutex+0x32>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d570:	4a0f      	ldr	r2, [pc, #60]	; (800d5b0 <writePxMutex+0x60>)
 800d572:	0085      	lsls	r5, r0, #2
 800d574:	0019      	movs	r1, r3
 800d576:	5950      	ldr	r0, [r2, r5]
 800d578:	4691      	mov	r9, r2
 800d57a:	f000 f977 	bl	800d86c <osSemaphoreWait>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d007      	beq.n	800d592 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d582:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800d584:	0020      	movs	r0, r4
 800d586:	bc0c      	pop	{r2, r3}
 800d588:	4690      	mov	r8, r2
 800d58a:	4699      	mov	r9, r3
 800d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d58e:	2803      	cmp	r0, #3
 800d590:	d007      	beq.n	800d5a2 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d592:	9b08      	ldr	r3, [sp, #32]
 800d594:	003a      	movs	r2, r7
 800d596:	0031      	movs	r1, r6
 800d598:	4640      	mov	r0, r8
 800d59a:	f005 f817 	bl	80125cc <HAL_UART_Transmit>
 800d59e:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d5a0:	d1f5      	bne.n	800d58e <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d5a2:	464b      	mov	r3, r9
 800d5a4:	5958      	ldr	r0, [r3, r5]
 800d5a6:	f000 f98b 	bl	800d8c0 <osSemaphoreRelease>
 800d5aa:	e7eb      	b.n	800d584 <writePxMutex+0x34>
 800d5ac:	08017db0 	.word	0x08017db0
 800d5b0:	20006e38 	.word	0x20006e38

0800d5b4 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	0015      	movs	r5, r2
 800d5b8:	1e42      	subs	r2, r0, #1
 800d5ba:	b2d2      	uxtb	r2, r2
 800d5bc:	000c      	movs	r4, r1
 800d5be:	2a04      	cmp	r2, #4
 800d5c0:	d80c      	bhi.n	800d5dc <writePxITMutex+0x28>
 800d5c2:	490a      	ldr	r1, [pc, #40]	; (800d5ec <writePxITMutex+0x38>)
 800d5c4:	0092      	lsls	r2, r2, #2
 800d5c6:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d5c8:	2e00      	cmp	r6, #0
 800d5ca:	d007      	beq.n	800d5dc <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d5cc:	4a08      	ldr	r2, [pc, #32]	; (800d5f0 <writePxITMutex+0x3c>)
 800d5ce:	0080      	lsls	r0, r0, #2
 800d5d0:	5880      	ldr	r0, [r0, r2]
 800d5d2:	0019      	movs	r1, r3
 800d5d4:	f000 f94a 	bl	800d86c <osSemaphoreWait>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d001      	beq.n	800d5e0 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d5dc:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d5e0:	002a      	movs	r2, r5
 800d5e2:	0021      	movs	r1, r4
 800d5e4:	0030      	movs	r0, r6
 800d5e6:	f004 fce1 	bl	8011fac <HAL_UART_Transmit_IT>
 800d5ea:	e7f8      	b.n	800d5de <writePxITMutex+0x2a>
 800d5ec:	08017db0 	.word	0x08017db0
 800d5f0:	20006e38 	.word	0x20006e38

0800d5f4 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d5f4:	b570      	push	{r4, r5, r6, lr}
 800d5f6:	0015      	movs	r5, r2
 800d5f8:	1e42      	subs	r2, r0, #1
 800d5fa:	b2d2      	uxtb	r2, r2
 800d5fc:	000c      	movs	r4, r1
 800d5fe:	2a04      	cmp	r2, #4
 800d600:	d80c      	bhi.n	800d61c <writePxDMAMutex+0x28>
 800d602:	490c      	ldr	r1, [pc, #48]	; (800d634 <writePxDMAMutex+0x40>)
 800d604:	0092      	lsls	r2, r2, #2
 800d606:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);

	if (hUart != NULL) {	
 800d608:	2e00      	cmp	r6, #0
 800d60a:	d007      	beq.n	800d61c <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d60c:	4a0a      	ldr	r2, [pc, #40]	; (800d638 <writePxDMAMutex+0x44>)
 800d60e:	0080      	lsls	r0, r0, #2
 800d610:	5880      	ldr	r0, [r0, r2]
 800d612:	0019      	movs	r1, r3
 800d614:	f000 f92a 	bl	800d86c <osSemaphoreWait>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d001      	beq.n	800d620 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d61c:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800d620:	0030      	movs	r0, r6
 800d622:	f7ff f9d9 	bl	800c9d8 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d626:	002a      	movs	r2, r5
 800d628:	0021      	movs	r1, r4
 800d62a:	0030      	movs	r0, r6
 800d62c:	f004 fd50 	bl	80120d0 <HAL_UART_Transmit_DMA>
 800d630:	e7f5      	b.n	800d61e <writePxDMAMutex+0x2a>
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	08017db0 	.word	0x08017db0
 800d638:	20006e38 	.word	0x20006e38

0800d63c <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800d63c:	3801      	subs	r0, #1
 800d63e:	b2c0      	uxtb	r0, r0
 800d640:	b510      	push	{r4, lr}
 800d642:	2804      	cmp	r0, #4
 800d644:	d807      	bhi.n	800d656 <UpdateBaudrate+0x1a>
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <UpdateBaudrate+0x20>)
 800d648:	0080      	lsls	r0, r0, #2
 800d64a:	58c0      	ldr	r0, [r0, r3]
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);

	huart->Init.BaudRate = baudrate;
 800d64c:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d64e:	f005 f85f 	bl	8012710 <HAL_UART_Init>
	
	return result;
}
 800d652:	2000      	movs	r0, #0
 800d654:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d656:	2300      	movs	r3, #0
 800d658:	605b      	str	r3, [r3, #4]
 800d65a:	deff      	udf	#255	; 0xff
 800d65c:	08017db0 	.word	0x08017db0

0800d660 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800d660:	3801      	subs	r0, #1
 800d662:	b2c3      	uxtb	r3, r0
 800d664:	2000      	movs	r0, #0
 800d666:	2b04      	cmp	r3, #4
 800d668:	d802      	bhi.n	800d670 <GetUart+0x10>
 800d66a:	4a02      	ldr	r2, [pc, #8]	; (800d674 <GetUart+0x14>)
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d670:	4770      	bx	lr
 800d672:	46c0      	nop			; (mov r8, r8)
 800d674:	08017db0 	.word	0x08017db0

0800d678 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	0004      	movs	r4, r0
 800d67c:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d67e:	2800      	cmp	r0, #0
 800d680:	d003      	beq.n	800d68a <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d682:	2901      	cmp	r1, #1
 800d684:	d017      	beq.n	800d6b6 <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d686:	2900      	cmp	r1, #0
 800d688:	d000      	beq.n	800d68c <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d68c:	f7fe f876 	bl	800b77c <GetPort>
 800d690:	2180      	movs	r1, #128	; 0x80
 800d692:	3801      	subs	r0, #1
 800d694:	0209      	lsls	r1, r1, #8
 800d696:	4101      	asrs	r1, r0
 800d698:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <SwapUartPins+0x6c>)
 800d69a:	4e13      	ldr	r6, [pc, #76]	; (800d6e8 <SwapUartPins+0x70>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d69e:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d6a6:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d6a8:	438a      	bics	r2, r1
 800d6aa:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d6ac:	2308      	movs	r3, #8
 800d6ae:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d6b0:	f005 f82e 	bl	8012710 <HAL_UART_Init>
}
 800d6b4:	e7e9      	b.n	800d68a <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d6b6:	f7fe f861 	bl	800b77c <GetPort>
 800d6ba:	2180      	movs	r1, #128	; 0x80
 800d6bc:	0209      	lsls	r1, r1, #8
 800d6be:	000a      	movs	r2, r1
 800d6c0:	3801      	subs	r0, #1
 800d6c2:	4102      	asrs	r2, r0
 800d6c4:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <SwapUartPins+0x6c>)
 800d6c6:	4d08      	ldr	r5, [pc, #32]	; (800d6e8 <SwapUartPins+0x70>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d6ca:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	5b58      	ldrh	r0, [r3, r5]
 800d6d2:	4302      	orrs	r2, r0
 800d6d4:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d6d6:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d6d8:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d6da:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d6dc:	f005 f818 	bl	8012710 <HAL_UART_Init>
 800d6e0:	e7d3      	b.n	800d68a <SwapUartPins+0x12>
 800d6e2:	46c0      	nop			; (mov r8, r8)
 800d6e4:	20000aa8 	.word	0x20000aa8
 800d6e8:	20007238 	.word	0x20007238

0800d6ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d6ec:	4816      	ldr	r0, [pc, #88]	; (800d748 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d6ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d6f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d6f2:	e003      	b.n	800d6fc <LoopCopyDataInit>

0800d6f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d6f4:	4b15      	ldr	r3, [pc, #84]	; (800d74c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d6f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d6f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d6fa:	3104      	adds	r1, #4

0800d6fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d6fc:	4814      	ldr	r0, [pc, #80]	; (800d750 <LoopForever+0xc>)
  ldr r3, =_edata
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <LoopForever+0x10>)
  adds r2, r0, r1
 800d700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d704:	d3f6      	bcc.n	800d6f4 <CopyDataInit>
  ldr r2, =_sbss
 800d706:	4a14      	ldr	r2, [pc, #80]	; (800d758 <LoopForever+0x14>)
  b LoopFillZerobss
 800d708:	e002      	b.n	800d710 <LoopFillZerobss>

0800d70a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d70a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d70c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d70e:	3204      	adds	r2, #4

0800d710 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d710:	4b12      	ldr	r3, [pc, #72]	; (800d75c <LoopForever+0x18>)
  cmp r2, r3
 800d712:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d714:	d3f9      	bcc.n	800d70a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d716:	4812      	ldr	r0, [pc, #72]	; (800d760 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d718:	4912      	ldr	r1, [pc, #72]	; (800d764 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d71a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d71c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d71e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d720:	d005      	beq.n	800d72e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d722:	f000 f82b 	bl	800d77c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d726:	f005 f98b 	bl	8012a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d72a:	f005 f93b 	bl	80129a4 <main>

0800d72e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d72e:	480e      	ldr	r0, [pc, #56]	; (800d768 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d730:	490e      	ldr	r1, [pc, #56]	; (800d76c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d732:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d734:	480e      	ldr	r0, [pc, #56]	; (800d770 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d736:	490d      	ldr	r1, [pc, #52]	; (800d76c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d738:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d73a:	480e      	ldr	r0, [pc, #56]	; (800d774 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d73c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d73e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d740:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d742:	4700      	bx	r0

0800d744 <LoopForever>:


LoopForever:
    b LoopForever
 800d744:	e7fe      	b.n	800d744 <LoopForever>
 800d746:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d748:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d74c:	0801ab4c 	.word	0x0801ab4c
  ldr r0, =_sdata
 800d750:	20000010 	.word	0x20000010
  ldr r3, =_edata
 800d754:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 800d758:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800d75c:	200072e0 	.word	0x200072e0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d760:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d764:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d768:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d76c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d770:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d774:	1fffd800 	.word	0x1fffd800

0800d778 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d778:	e7fe      	b.n	800d778 <CEC_CAN_IRQHandler>
	...

0800d77c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d77c:	2101      	movs	r1, #1
 800d77e:	4b11      	ldr	r3, [pc, #68]	; (800d7c4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d780:	4811      	ldr	r0, [pc, #68]	; (800d7c8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	430a      	orrs	r2, r1
 800d786:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	4002      	ands	r2, r0
 800d78c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	480e      	ldr	r0, [pc, #56]	; (800d7cc <SystemInit+0x50>)
 800d792:	4002      	ands	r2, r0
 800d794:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	480d      	ldr	r0, [pc, #52]	; (800d7d0 <SystemInit+0x54>)
 800d79a:	4002      	ands	r2, r0
 800d79c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	480c      	ldr	r0, [pc, #48]	; (800d7d4 <SystemInit+0x58>)
 800d7a2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d7a4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d7a6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7aa:	4382      	bics	r2, r0
 800d7ac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d7ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b0:	4809      	ldr	r0, [pc, #36]	; (800d7d8 <SystemInit+0x5c>)
 800d7b2:	4002      	ands	r2, r0
 800d7b4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d7b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7b8:	438a      	bics	r2, r1
 800d7ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d7bc:	2200      	movs	r2, #0
 800d7be:	609a      	str	r2, [r3, #8]

}
 800d7c0:	4770      	bx	lr
 800d7c2:	46c0      	nop			; (mov r8, r8)
 800d7c4:	40021000 	.word	0x40021000
 800d7c8:	08ffb80c 	.word	0x08ffb80c
 800d7cc:	fef6ffff 	.word	0xfef6ffff
 800d7d0:	fffbffff 	.word	0xfffbffff
 800d7d4:	ffc0ffff 	.word	0xffc0ffff
 800d7d8:	fff0feac 	.word	0xfff0feac

0800d7dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7dc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d7de:	f000 ff81 	bl	800e6e4 <vTaskStartScheduler>
  
  return osOK;
}
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	46c0      	nop			; (mov r8, r8)

0800d7e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d7e8:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d100      	bne.n	800d7f0 <osDelay+0x8>
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	f001 f89e 	bl	800e930 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	bd10      	pop	{r4, pc}

0800d7f8 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d7f8:	2300      	movs	r3, #0
{
 800d7fa:	b500      	push	{lr}
 800d7fc:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d7fe:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d800:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00a      	beq.n	800d81e <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d808:	a901      	add	r1, sp, #4
 800d80a:	f000 fbdd 	bl	800dfc8 <xQueueGiveFromISR>
 800d80e:	2801      	cmp	r0, #1
 800d810:	d10c      	bne.n	800d82c <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10b      	bne.n	800d830 <osMutexRelease+0x38>
  osStatus result = osOK;
 800d818:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d81a:	b003      	add	sp, #12
 800d81c:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d81e:	2300      	movs	r3, #0
 800d820:	2200      	movs	r2, #0
 800d822:	2100      	movs	r1, #0
 800d824:	f000 faec 	bl	800de00 <xQueueGenericSend>
 800d828:	2801      	cmp	r0, #1
 800d82a:	d0f5      	beq.n	800d818 <osMutexRelease+0x20>
    result = osErrorOS;
 800d82c:	20ff      	movs	r0, #255	; 0xff
 800d82e:	e7f4      	b.n	800d81a <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d830:	2280      	movs	r2, #128	; 0x80
 800d832:	4b02      	ldr	r3, [pc, #8]	; (800d83c <osMutexRelease+0x44>)
 800d834:	0552      	lsls	r2, r2, #21
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	e7ee      	b.n	800d818 <osMutexRelease+0x20>
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	e000ed04 	.word	0xe000ed04

0800d840 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d840:	b510      	push	{r4, lr}
 800d842:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d844:	2901      	cmp	r1, #1
 800d846:	d005      	beq.n	800d854 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d848:	2100      	movs	r1, #0
 800d84a:	f000 fac5 	bl	800ddd8 <xQueueCreateCountingSemaphore>
 800d84e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d850:	0020      	movs	r0, r4
 800d852:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d854:	2203      	movs	r2, #3
 800d856:	2100      	movs	r1, #0
 800d858:	f000 fa96 	bl	800dd88 <xQueueGenericCreate>
 800d85c:	1e04      	subs	r4, r0, #0
 800d85e:	d0f7      	beq.n	800d850 <osSemaphoreCreate+0x10>
 800d860:	2300      	movs	r3, #0
 800d862:	2200      	movs	r2, #0
 800d864:	2100      	movs	r1, #0
 800d866:	f000 facb 	bl	800de00 <xQueueGenericSend>
 800d86a:	e7f1      	b.n	800d850 <osSemaphoreCreate+0x10>

0800d86c <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d86c:	2300      	movs	r3, #0
{
 800d86e:	b500      	push	{lr}
 800d870:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d872:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d874:	2800      	cmp	r0, #0
 800d876:	d01e      	beq.n	800d8b6 <osSemaphoreWait+0x4a>
 800d878:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00b      	beq.n	800d898 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d880:	aa01      	add	r2, sp, #4
 800d882:	2100      	movs	r1, #0
 800d884:	f000 fc8e 	bl	800e1a4 <xQueueReceiveFromISR>
 800d888:	2801      	cmp	r0, #1
 800d88a:	d10c      	bne.n	800d8a6 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d88c:	9b01      	ldr	r3, [sp, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10b      	bne.n	800d8aa <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d892:	2000      	movs	r0, #0
}
 800d894:	b003      	add	sp, #12
 800d896:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d898:	000a      	movs	r2, r1
 800d89a:	2300      	movs	r3, #0
 800d89c:	2100      	movs	r1, #0
 800d89e:	f000 fbcd 	bl	800e03c <xQueueGenericReceive>
 800d8a2:	2801      	cmp	r0, #1
 800d8a4:	d0f5      	beq.n	800d892 <osSemaphoreWait+0x26>
      return osErrorOS;
 800d8a6:	20ff      	movs	r0, #255	; 0xff
 800d8a8:	e7f4      	b.n	800d894 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d8aa:	2280      	movs	r2, #128	; 0x80
 800d8ac:	4b03      	ldr	r3, [pc, #12]	; (800d8bc <osSemaphoreWait+0x50>)
 800d8ae:	0552      	lsls	r2, r2, #21
 800d8b0:	601a      	str	r2, [r3, #0]
  return osOK;
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	e7ee      	b.n	800d894 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d8b6:	2080      	movs	r0, #128	; 0x80
 800d8b8:	e7ec      	b.n	800d894 <osSemaphoreWait+0x28>
 800d8ba:	46c0      	nop			; (mov r8, r8)
 800d8bc:	e000ed04 	.word	0xe000ed04

0800d8c0 <osSemaphoreRelease>:
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	f7ff ff99 	bl	800d7f8 <osMutexRelease>
 800d8c6:	bd10      	pop	{r4, pc}

0800d8c8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d8c8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d8ca:	f001 f9bf 	bl	800ec4c <xTaskGetSchedulerState>
 800d8ce:	2801      	cmp	r0, #1
 800d8d0:	d001      	beq.n	800d8d6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d8d2:	f001 fe13 	bl	800f4fc <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d8d6:	bd10      	pop	{r4, pc}

0800d8d8 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d8dc:	d013      	beq.n	800d906 <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d8de:	2008      	movs	r0, #8
 800d8e0:	f001 fe44 	bl	800f56c <pvPortMalloc>
 800d8e4:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d8e6:	d101      	bne.n	800d8ec <FreeRTOS_CLIRegisterCommand+0x14>
 800d8e8:	b672      	cpsid	i
 800d8ea:	e7fe      	b.n	800d8ea <FreeRTOS_CLIRegisterCommand+0x12>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d8ec:	f001 fdc0 	bl	800f470 <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8f4:	4b05      	ldr	r3, [pc, #20]	; (800d90c <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d8f6:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d8fc:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d8fe:	f001 fdc3 	bl	800f488 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d902:	2001      	movs	r0, #1
 800d904:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800d906:	b672      	cpsid	i
 800d908:	e7fe      	b.n	800d908 <FreeRTOS_CLIRegisterCommand+0x30>
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	200000c4 	.word	0x200000c4

0800d910 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	4657      	mov	r7, sl
 800d914:	46de      	mov	lr, fp
 800d916:	464e      	mov	r6, r9
 800d918:	4645      	mov	r5, r8
 800d91a:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d91c:	4f34      	ldr	r7, [pc, #208]	; (800d9f0 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d91e:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d920:	683b      	ldr	r3, [r7, #0]
{
 800d922:	468a      	mov	sl, r1
 800d924:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00e      	beq.n	800d948 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	0032      	movs	r2, r6
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	4659      	mov	r1, fp
 800d932:	4650      	mov	r0, sl
 800d934:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d936:	2800      	cmp	r0, #0
 800d938:	d100      	bne.n	800d93c <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d93a:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d93c:	bc3c      	pop	{r2, r3, r4, r5}
 800d93e:	4690      	mov	r8, r2
 800d940:	4699      	mov	r9, r3
 800d942:	46a2      	mov	sl, r4
 800d944:	46ab      	mov	fp, r5
 800d946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d948:	3320      	adds	r3, #32
 800d94a:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d94c:	4c29      	ldr	r4, [pc, #164]	; (800d9f4 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d94e:	3404      	adds	r4, #4
 800d950:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	681d      	ldr	r5, [r3, #0]
 800d956:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d958:	0028      	movs	r0, r5
 800d95a:	f7f2 fbdd 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d95e:	464a      	mov	r2, r9
 800d960:	5c33      	ldrb	r3, [r6, r0]
 800d962:	4393      	bics	r3, r2
 800d964:	d106      	bne.n	800d974 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d966:	0002      	movs	r2, r0
 800d968:	0029      	movs	r1, r5
 800d96a:	0030      	movs	r0, r6
 800d96c:	f005 fd32 	bl	80133d4 <strncmp>
 800d970:	2800      	cmp	r0, #0
 800d972:	d00a      	beq.n	800d98a <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d974:	6864      	ldr	r4, [r4, #4]
 800d976:	603c      	str	r4, [r7, #0]
 800d978:	2c00      	cmp	r4, #0
 800d97a:	d1ea      	bne.n	800d952 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d97c:	465a      	mov	r2, fp
 800d97e:	491e      	ldr	r1, [pc, #120]	; (800d9f8 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d980:	4650      	mov	r0, sl
 800d982:	f005 fd38 	bl	80133f6 <strncpy>
		xReturn = pdFALSE;
 800d986:	2000      	movs	r0, #0
	return xReturn;
 800d988:	e7d8      	b.n	800d93c <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d98a:	4643      	mov	r3, r8
 800d98c:	250c      	movs	r5, #12
 800d98e:	575d      	ldrsb	r5, [r3, r5]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2d00      	cmp	r5, #0
 800d994:	db26      	blt.n	800d9e4 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d996:	2200      	movs	r2, #0
 800d998:	56b2      	ldrsb	r2, [r6, r2]
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	d025      	beq.n	800d9ea <FreeRTOS_CLIProcessCommand+0xda>
 800d99e:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d9a0:	2400      	movs	r4, #0
 800d9a2:	e005      	b.n	800d9b0 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d9a4:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d9a6:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d9a8:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d9aa:	568a      	ldrsb	r2, [r1, r2]
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	d007      	beq.n	800d9c0 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d9b0:	2a20      	cmp	r2, #32
 800d9b2:	d1f7      	bne.n	800d9a4 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d9b4:	2801      	cmp	r0, #1
 800d9b6:	d0f6      	beq.n	800d9a6 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d9b8:	3401      	adds	r4, #1
 800d9ba:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d9bc:	2001      	movs	r0, #1
 800d9be:	e7f2      	b.n	800d9a6 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d9c0:	2801      	cmp	r0, #1
 800d9c2:	d00c      	beq.n	800d9de <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d9c4:	42a5      	cmp	r5, r4
 800d9c6:	d00d      	beq.n	800d9e4 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0d7      	beq.n	800d97c <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d9cc:	465a      	mov	r2, fp
 800d9ce:	490b      	ldr	r1, [pc, #44]	; (800d9fc <FreeRTOS_CLIProcessCommand+0xec>)
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	f005 fd10 	bl	80133f6 <strncpy>
		pxCommand = NULL;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	2000      	movs	r0, #0
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	e7ae      	b.n	800d93c <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d9de:	3c01      	subs	r4, #1
 800d9e0:	b264      	sxtb	r4, r4
 800d9e2:	e7ef      	b.n	800d9c4 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1a0      	bne.n	800d92a <FreeRTOS_CLIProcessCommand+0x1a>
 800d9e8:	e7c8      	b.n	800d97c <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d9ea:	2400      	movs	r4, #0
 800d9ec:	e7ea      	b.n	800d9c4 <FreeRTOS_CLIProcessCommand+0xb4>
 800d9ee:	46c0      	nop			; (mov r8, r8)
 800d9f0:	20001ed0 	.word	0x20001ed0
 800d9f4:	200000c4 	.word	0x200000c4
 800d9f8:	0801a754 	.word	0x0801a754
 800d9fc:	0801a6fc 	.word	0x0801a6fc

0800da00 <FreeRTOS_CLIGetOutputBuffer>:
}
 800da00:	4800      	ldr	r0, [pc, #0]	; (800da04 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800da02:	4770      	bx	lr
 800da04:	20001ee0 	.word	0x20001ee0

0800da08 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800da08:	2300      	movs	r3, #0
{
 800da0a:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800da0c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800da0e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800da10:	2900      	cmp	r1, #0
 800da12:	d021      	beq.n	800da58 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da14:	2300      	movs	r3, #0
 800da16:	56c3      	ldrsb	r3, [r0, r3]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d105      	bne.n	800da28 <FreeRTOS_CLIGetParameter+0x20>
 800da1c:	e01c      	b.n	800da58 <FreeRTOS_CLIGetParameter+0x50>
 800da1e:	2300      	movs	r3, #0
			pcCommandString++;
 800da20:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da22:	56c3      	ldrsb	r3, [r0, r3]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d017      	beq.n	800da58 <FreeRTOS_CLIGetParameter+0x50>
 800da28:	2b20      	cmp	r3, #32
 800da2a:	d1f8      	bne.n	800da1e <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800da2c:	2300      	movs	r3, #0
			pcCommandString++;
 800da2e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800da30:	56c3      	ldrsb	r3, [r0, r3]
 800da32:	2b20      	cmp	r3, #32
 800da34:	d0fa      	beq.n	800da2c <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00e      	beq.n	800da58 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800da3a:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800da3c:	42a1      	cmp	r1, r4
 800da3e:	d1e9      	bne.n	800da14 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da40:	2120      	movs	r1, #32
 800da42:	7803      	ldrb	r3, [r0, #0]
 800da44:	438b      	bics	r3, r1
 800da46:	d007      	beq.n	800da58 <FreeRTOS_CLIGetParameter+0x50>
 800da48:	2300      	movs	r3, #0
 800da4a:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800da4c:	3301      	adds	r3, #1
 800da4e:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800da50:	5cc1      	ldrb	r1, [r0, r3]
 800da52:	43a1      	bics	r1, r4
 800da54:	d1fa      	bne.n	800da4c <FreeRTOS_CLIGetParameter+0x44>
 800da56:	e000      	b.n	800da5a <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800da58:	2000      	movs	r0, #0
}
 800da5a:	bd10      	pop	{r4, pc}

0800da5c <prvHelpCommand>:
{
 800da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5e:	46ce      	mov	lr, r9
 800da60:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800da62:	2300      	movs	r3, #0
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b083      	sub	sp, #12
 800da68:	0004      	movs	r4, r0
 800da6a:	000d      	movs	r5, r1
 800da6c:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800da6e:	2101      	movs	r1, #1
 800da70:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800da72:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800da74:	f7ff ffc8 	bl	800da08 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800da78:	2800      	cmp	r0, #0
 800da7a:	d024      	beq.n	800dac6 <prvHelpCommand+0x6a>
 800da7c:	2206      	movs	r2, #6
 800da7e:	4931      	ldr	r1, [pc, #196]	; (800db44 <prvHelpCommand+0xe8>)
 800da80:	f005 fca8 	bl	80133d4 <strncmp>
 800da84:	1e07      	subs	r7, r0, #0
 800da86:	d118      	bne.n	800daba <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800da88:	4b2f      	ldr	r3, [pc, #188]	; (800db48 <prvHelpCommand+0xec>)
 800da8a:	4698      	mov	r8, r3
 800da8c:	791b      	ldrb	r3, [r3, #4]
 800da8e:	2b07      	cmp	r3, #7
 800da90:	d047      	beq.n	800db22 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	b2d2      	uxtb	r2, r2
 800da96:	4691      	mov	r9, r2
 800da98:	4642      	mov	r2, r8
 800da9a:	4649      	mov	r1, r9
 800da9c:	7111      	strb	r1, [r2, #4]
 800da9e:	4a2b      	ldr	r2, [pc, #172]	; (800db4c <prvHelpCommand+0xf0>)
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	5899      	ldr	r1, [r3, r2]
 800daa4:	0020      	movs	r0, r4
 800daa6:	002a      	movs	r2, r5
 800daa8:	f005 fca5 	bl	80133f6 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800daac:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800daae:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800dab0:	2b07      	cmp	r3, #7
 800dab2:	d102      	bne.n	800daba <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800dab4:	4643      	mov	r3, r8
 800dab6:	2600      	movs	r6, #0
 800dab8:	711f      	strb	r7, [r3, #4]
}
 800daba:	0030      	movs	r0, r6
 800dabc:	b003      	add	sp, #12
 800dabe:	bc0c      	pop	{r2, r3}
 800dac0:	4690      	mov	r8, r2
 800dac2:	4699      	mov	r9, r3
 800dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800dac6:	4f20      	ldr	r7, [pc, #128]	; (800db48 <prvHelpCommand+0xec>)
 800dac8:	68be      	ldr	r6, [r7, #8]
 800daca:	2e00      	cmp	r6, #0
 800dacc:	d020      	beq.n	800db10 <prvHelpCommand+0xb4>
 800dace:	7b3b      	ldrb	r3, [r7, #12]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	b2d2      	uxtb	r2, r2
 800dad4:	4690      	mov	r8, r2
 800dad6:	6832      	ldr	r2, [r6, #0]
 800dad8:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800dada:	4a1d      	ldr	r2, [pc, #116]	; (800db50 <prvHelpCommand+0xf4>)
 800dadc:	7812      	ldrb	r2, [r2, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d22a      	bcs.n	800db38 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800dae2:	002a      	movs	r2, r5
 800dae4:	0020      	movs	r0, r4
 800dae6:	3a08      	subs	r2, #8
 800dae8:	3008      	adds	r0, #8
 800daea:	f005 fc84 	bl	80133f6 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800daee:	1c60      	adds	r0, r4, #1
 800daf0:	4918      	ldr	r1, [pc, #96]	; (800db54 <prvHelpCommand+0xf8>)
 800daf2:	f005 fc67 	bl	80133c4 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800daf6:	2328      	movs	r3, #40	; 0x28
 800daf8:	7023      	strb	r3, [r4, #0]
 800dafa:	3301      	adds	r3, #1
 800dafc:	71a3      	strb	r3, [r4, #6]
 800dafe:	3b09      	subs	r3, #9
 800db00:	71e3      	strb	r3, [r4, #7]
		counter++;
 800db02:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800db04:	6876      	ldr	r6, [r6, #4]
		counter++;
 800db06:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800db08:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800db0a:	1e73      	subs	r3, r6, #1
 800db0c:	419e      	sbcs	r6, r3
 800db0e:	e7d4      	b.n	800daba <prvHelpCommand+0x5e>
			counter = 1;
 800db10:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800db12:	4e11      	ldr	r6, [pc, #68]	; (800db58 <prvHelpCommand+0xfc>)
			counter = 1;
 800db14:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800db16:	3604      	adds	r6, #4
			counter = 1;
 800db18:	3301      	adds	r3, #1
 800db1a:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800db1c:	60be      	str	r6, [r7, #8]
			counter = 1;
 800db1e:	3b01      	subs	r3, #1
 800db20:	e7d9      	b.n	800dad6 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800db22:	4642      	mov	r2, r8
 800db24:	3b06      	subs	r3, #6
 800db26:	7113      	strb	r3, [r2, #4]
 800db28:	4b08      	ldr	r3, [pc, #32]	; (800db4c <prvHelpCommand+0xf0>)
 800db2a:	002a      	movs	r2, r5
 800db2c:	6819      	ldr	r1, [r3, #0]
 800db2e:	0020      	movs	r0, r4
 800db30:	f005 fc61 	bl	80133f6 <strncpy>
			xReturn = pdTRUE;
 800db34:	2601      	movs	r6, #1
 800db36:	e7c0      	b.n	800daba <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800db38:	002a      	movs	r2, r5
 800db3a:	0020      	movs	r0, r4
 800db3c:	f005 fc5b 	bl	80133f6 <strncpy>
 800db40:	e7df      	b.n	800db02 <prvHelpCommand+0xa6>
 800db42:	46c0      	nop			; (mov r8, r8)
 800db44:	08018e40 	.word	0x08018e40
 800db48:	20001ed0 	.word	0x20001ed0
 800db4c:	2000003c 	.word	0x2000003c
 800db50:	20006d30 	.word	0x20006d30
 800db54:	080177f0 	.word	0x080177f0
 800db58:	200000c4 	.word	0x200000c4

0800db5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db5c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db5e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db60:	3308      	adds	r3, #8
 800db62:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db64:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db66:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db68:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db6a:	4252      	negs	r2, r2
 800db6c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db6e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db70:	4770      	bx	lr
 800db72:	46c0      	nop			; (mov r8, r8)

0800db74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db78:	4770      	bx	lr
 800db7a:	46c0      	nop			; (mov r8, r8)

0800db7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800db7c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db7e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800db80:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db84:	689a      	ldr	r2, [r3, #8]
 800db86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800db8a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800db8c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800db8e:	3301      	adds	r3, #1
 800db90:	6003      	str	r3, [r0, #0]
}
 800db92:	4770      	bx	lr

0800db94 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db94:	0002      	movs	r2, r0
{
 800db96:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db98:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db9a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800db9c:	1c63      	adds	r3, r4, #1
 800db9e:	d101      	bne.n	800dba4 <vListInsert+0x10>
 800dba0:	e00d      	b.n	800dbbe <vListInsert+0x2a>
 800dba2:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dba4:	6853      	ldr	r3, [r2, #4]
 800dba6:	681d      	ldr	r5, [r3, #0]
 800dba8:	42a5      	cmp	r5, r4
 800dbaa:	d9fa      	bls.n	800dba2 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dbac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dbae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dbb0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800dbb2:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800dbb4:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800dbb6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dbb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dbba:	6003      	str	r3, [r0, #0]
}
 800dbbc:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbbe:	6902      	ldr	r2, [r0, #16]
 800dbc0:	6853      	ldr	r3, [r2, #4]
 800dbc2:	e7f3      	b.n	800dbac <vListInsert+0x18>

0800dbc4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbc4:	6842      	ldr	r2, [r0, #4]
 800dbc6:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dbc8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbca:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbcc:	6881      	ldr	r1, [r0, #8]
 800dbce:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	4282      	cmp	r2, r0
 800dbd4:	d100      	bne.n	800dbd8 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbd6:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800dbd8:	2200      	movs	r2, #0
 800dbda:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	1e50      	subs	r0, r2, #1
 800dbe0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800dbe2:	4770      	bx	lr

0800dbe4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbe8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800dbea:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbec:	2a00      	cmp	r2, #0
 800dbee:	d107      	bne.n	800dc00 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbf0:	6805      	ldr	r5, [r0, #0]
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	d02d      	beq.n	800dc52 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800dbf6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800dbf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800dc00:	2d00      	cmp	r5, #0
 800dc02:	d10e      	bne.n	800dc22 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dc04:	6880      	ldr	r0, [r0, #8]
 800dc06:	f005 f99e 	bl	8012f46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dc0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dc0c:	68a3      	ldr	r3, [r4, #8]
 800dc0e:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc10:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dc12:	4463      	add	r3, ip
 800dc14:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d3ed      	bcc.n	800dbf6 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc1a:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800dc1c:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc1e:	60a3      	str	r3, [r4, #8]
 800dc20:	e7ea      	b.n	800dbf8 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc22:	68c0      	ldr	r0, [r0, #12]
 800dc24:	f005 f98f 	bl	8012f46 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dc28:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc2a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dc2c:	425a      	negs	r2, r3
 800dc2e:	68e3      	ldr	r3, [r4, #12]
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc34:	428b      	cmp	r3, r1
 800dc36:	d203      	bcs.n	800dc40 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	469c      	mov	ip, r3
 800dc3c:	4462      	add	r2, ip
 800dc3e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800dc40:	2d02      	cmp	r5, #2
 800dc42:	d1d8      	bne.n	800dbf6 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d0d5      	beq.n	800dbf6 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800dc4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc50:	e7d1      	b.n	800dbf6 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dc52:	6840      	ldr	r0, [r0, #4]
 800dc54:	f001 f842 	bl	800ecdc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dc58:	6065      	str	r5, [r4, #4]
 800dc5a:	e7cd      	b.n	800dbf8 <prvCopyDataToQueue+0x14>

0800dc5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800dc5e:	b510      	push	{r4, lr}
 800dc60:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc62:	2a00      	cmp	r2, #0
 800dc64:	d008      	beq.n	800dc78 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dc66:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc68:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dc6a:	1889      	adds	r1, r1, r2
 800dc6c:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc6e:	42a1      	cmp	r1, r4
 800dc70:	d203      	bcs.n	800dc7a <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dc72:	0018      	movs	r0, r3
 800dc74:	f005 f967 	bl	8012f46 <memcpy>
	}
}
 800dc78:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dc7a:	6801      	ldr	r1, [r0, #0]
 800dc7c:	60c1      	str	r1, [r0, #12]
 800dc7e:	e7f8      	b.n	800dc72 <prvCopyDataFromQueue+0x16>

0800dc80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc80:	b570      	push	{r4, r5, r6, lr}
 800dc82:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc84:	f001 fbf4 	bl	800f470 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dc88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dd1b      	ble.n	800dcc6 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d018      	beq.n	800dcc6 <prvUnlockQueue+0x46>
 800dc94:	0025      	movs	r5, r4
 800dc96:	3524      	adds	r5, #36	; 0x24
 800dc98:	e008      	b.n	800dcac <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800dc9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dca0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	dd0f      	ble.n	800dcc6 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00c      	beq.n	800dcc6 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcac:	0028      	movs	r0, r5
 800dcae:	f000 ff49 	bl	800eb44 <xTaskRemoveFromEventList>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d0f1      	beq.n	800dc9a <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800dcb6:	f000 ffc3 	bl	800ec40 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dcba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dcc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	dcef      	bgt.n	800dca6 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	425b      	negs	r3, r3
 800dcca:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800dccc:	f001 fbdc 	bl	800f488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcd0:	f001 fbce 	bl	800f470 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dcd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	dd1b      	ble.n	800dd12 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d018      	beq.n	800dd12 <prvUnlockQueue+0x92>
 800dce0:	0025      	movs	r5, r4
 800dce2:	3510      	adds	r5, #16
 800dce4:	e008      	b.n	800dcf8 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800dce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dce8:	3b01      	subs	r3, #1
 800dcea:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dcec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	dd0f      	ble.n	800dd12 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00c      	beq.n	800dd12 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcf8:	0028      	movs	r0, r5
 800dcfa:	f000 ff23 	bl	800eb44 <xTaskRemoveFromEventList>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0f1      	beq.n	800dce6 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800dd02:	f000 ff9d 	bl	800ec40 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800dd06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dd0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	dcef      	bgt.n	800dcf2 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dd12:	2301      	movs	r3, #1
 800dd14:	425b      	negs	r3, r3
 800dd16:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd18:	f001 fbb6 	bl	800f488 <vPortExitCritical>
}
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
 800dd1e:	46c0      	nop			; (mov r8, r8)

0800dd20 <xQueueGenericReset>:
{
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	0004      	movs	r4, r0
 800dd24:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d01a      	beq.n	800dd60 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800dd2a:	f001 fba1 	bl	800f470 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dd2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dd30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd32:	6822      	ldr	r2, [r4, #0]
 800dd34:	434b      	muls	r3, r1
 800dd36:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dd38:	1a5b      	subs	r3, r3, r1
 800dd3a:	18d3      	adds	r3, r2, r3
 800dd3c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dd3e:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dd40:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd42:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800dd44:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd48:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800dd4a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dd4c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dd4e:	2d00      	cmp	r5, #0
 800dd50:	d108      	bne.n	800dd64 <xQueueGenericReset+0x44>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10e      	bne.n	800dd76 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
 800dd58:	f001 fb96 	bl	800f488 <vPortExitCritical>
}
 800dd5c:	2001      	movs	r0, #1
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800dd60:	b672      	cpsid	i
 800dd62:	e7fe      	b.n	800dd62 <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd64:	0020      	movs	r0, r4
 800dd66:	3010      	adds	r0, #16
 800dd68:	f7ff fef8 	bl	800db5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd6c:	0020      	movs	r0, r4
 800dd6e:	3024      	adds	r0, #36	; 0x24
 800dd70:	f7ff fef4 	bl	800db5c <vListInitialise>
 800dd74:	e7f0      	b.n	800dd58 <xQueueGenericReset+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dd76:	0020      	movs	r0, r4
 800dd78:	3010      	adds	r0, #16
 800dd7a:	f000 fee3 	bl	800eb44 <xTaskRemoveFromEventList>
 800dd7e:	2801      	cmp	r0, #1
 800dd80:	d1ea      	bne.n	800dd58 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800dd82:	f001 fb69 	bl	800f458 <vPortYield>
 800dd86:	e7e7      	b.n	800dd58 <xQueueGenericReset+0x38>

0800dd88 <xQueueGenericCreate>:
{
 800dd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8a:	0005      	movs	r5, r0
 800dd8c:	000e      	movs	r6, r1
 800dd8e:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d101      	bne.n	800dd98 <xQueueGenericCreate+0x10>
 800dd94:	b672      	cpsid	i
 800dd96:	e7fe      	b.n	800dd96 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	d013      	beq.n	800ddc4 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd9c:	0008      	movs	r0, r1
 800dd9e:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dda0:	3055      	adds	r0, #85	; 0x55
 800dda2:	f001 fbe3 	bl	800f56c <pvPortMalloc>
 800dda6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dda8:	d011      	beq.n	800ddce <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800ddaa:	0003      	movs	r3, r0
 800ddac:	3354      	adds	r3, #84	; 0x54
 800ddae:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ddb0:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ddb2:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	0020      	movs	r0, r4
 800ddb8:	f7ff ffb2 	bl	800dd20 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ddbc:	2350      	movs	r3, #80	; 0x50
}
 800ddbe:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800ddc0:	54e7      	strb	r7, [r4, r3]
}
 800ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ddc4:	2054      	movs	r0, #84	; 0x54
 800ddc6:	f001 fbd1 	bl	800f56c <pvPortMalloc>
 800ddca:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ddcc:	d101      	bne.n	800ddd2 <xQueueGenericCreate+0x4a>
	configASSERT( xReturn );
 800ddce:	b672      	cpsid	i
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueGenericCreate+0x48>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ddd2:	6024      	str	r4, [r4, #0]
 800ddd4:	e7ec      	b.n	800ddb0 <xQueueGenericCreate+0x28>
 800ddd6:	46c0      	nop			; (mov r8, r8)

0800ddd8 <xQueueCreateCountingSemaphore>:
	{
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d101      	bne.n	800dde4 <xQueueCreateCountingSemaphore+0xc>
 800dde0:	b672      	cpsid	i
 800dde2:	e7fe      	b.n	800dde2 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dde4:	4288      	cmp	r0, r1
 800dde6:	d201      	bcs.n	800ddec <xQueueCreateCountingSemaphore+0x14>
 800dde8:	b672      	cpsid	i
 800ddea:	e7fe      	b.n	800ddea <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddec:	2202      	movs	r2, #2
 800ddee:	2100      	movs	r1, #0
 800ddf0:	f7ff ffca 	bl	800dd88 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d001      	beq.n	800ddfc <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddf8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ddfa:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ddfc:	b672      	cpsid	i
 800ddfe:	e7fe      	b.n	800ddfe <xQueueCreateCountingSemaphore+0x26>

0800de00 <xQueueGenericSend>:
{
 800de00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de02:	46c6      	mov	lr, r8
 800de04:	b500      	push	{lr}
 800de06:	b084      	sub	sp, #16
 800de08:	0004      	movs	r4, r0
 800de0a:	000f      	movs	r7, r1
 800de0c:	9201      	str	r2, [sp, #4]
 800de0e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800de10:	2800      	cmp	r0, #0
 800de12:	d100      	bne.n	800de16 <xQueueGenericSend+0x16>
 800de14:	e07a      	b.n	800df0c <xQueueGenericSend+0x10c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de16:	2900      	cmp	r1, #0
 800de18:	d100      	bne.n	800de1c <xQueueGenericSend+0x1c>
 800de1a:	e071      	b.n	800df00 <xQueueGenericSend+0x100>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de1c:	2d02      	cmp	r5, #2
 800de1e:	d104      	bne.n	800de2a <xQueueGenericSend+0x2a>
 800de20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de22:	2b01      	cmp	r3, #1
 800de24:	d001      	beq.n	800de2a <xQueueGenericSend+0x2a>
 800de26:	b672      	cpsid	i
 800de28:	e7fe      	b.n	800de28 <xQueueGenericSend+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de2a:	f000 ff0f 	bl	800ec4c <xTaskGetSchedulerState>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d104      	bne.n	800de3c <xQueueGenericSend+0x3c>
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <xQueueGenericSend+0x3c>
 800de38:	b672      	cpsid	i
 800de3a:	e7fe      	b.n	800de3a <xQueueGenericSend+0x3a>
		prvLockQueue( pxQueue );
 800de3c:	2300      	movs	r3, #0
 800de3e:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800de40:	f001 fb16 	bl	800f470 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de48:	2600      	movs	r6, #0
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d335      	bcc.n	800deba <xQueueGenericSend+0xba>
 800de4e:	2d02      	cmp	r5, #2
 800de50:	d033      	beq.n	800deba <xQueueGenericSend+0xba>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de52:	9b01      	ldr	r3, [sp, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d05b      	beq.n	800df10 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800de58:	2e00      	cmp	r6, #0
 800de5a:	d102      	bne.n	800de62 <xQueueGenericSend+0x62>
					vTaskSetTimeOutState( &xTimeOut );
 800de5c:	a802      	add	r0, sp, #8
 800de5e:	f000 feab 	bl	800ebb8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800de62:	f001 fb11 	bl	800f488 <vPortExitCritical>
		vTaskSuspendAll();
 800de66:	f000 fc63 	bl	800e730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de6a:	f001 fb01 	bl	800f470 <vPortEnterCritical>
 800de6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800de70:	3301      	adds	r3, #1
 800de72:	d101      	bne.n	800de78 <xQueueGenericSend+0x78>
 800de74:	4643      	mov	r3, r8
 800de76:	6463      	str	r3, [r4, #68]	; 0x44
 800de78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de7a:	3301      	adds	r3, #1
 800de7c:	d101      	bne.n	800de82 <xQueueGenericSend+0x82>
 800de7e:	4643      	mov	r3, r8
 800de80:	64a3      	str	r3, [r4, #72]	; 0x48
 800de82:	f001 fb01 	bl	800f488 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de86:	a901      	add	r1, sp, #4
 800de88:	a802      	add	r0, sp, #8
 800de8a:	f000 fea5 	bl	800ebd8 <xTaskCheckForTimeOut>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d14b      	bne.n	800df2a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de92:	f001 faed 	bl	800f470 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d01e      	beq.n	800dedc <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800de9e:	f001 faf3 	bl	800f488 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dea2:	0020      	movs	r0, r4
 800dea4:	f7ff feec 	bl	800dc80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dea8:	f000 fce2 	bl	800e870 <xTaskResumeAll>
 800deac:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800deae:	f001 fadf 	bl	800f470 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800deb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d2c9      	bcs.n	800de4e <xQueueGenericSend+0x4e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800deba:	002a      	movs	r2, r5
 800debc:	0039      	movs	r1, r7
 800debe:	0020      	movs	r0, r4
 800dec0:	f7ff fe90 	bl	800dbe4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d126      	bne.n	800df18 <xQueueGenericSend+0x118>
					else if( xYieldRequired != pdFALSE )
 800deca:	2800      	cmp	r0, #0
 800decc:	d12a      	bne.n	800df24 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800dece:	f001 fadb 	bl	800f488 <vPortExitCritical>
				return pdPASS;
 800ded2:	2001      	movs	r0, #1
}
 800ded4:	b004      	add	sp, #16
 800ded6:	bc04      	pop	{r2}
 800ded8:	4690      	mov	r8, r2
 800deda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800dedc:	f001 fad4 	bl	800f488 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dee0:	0020      	movs	r0, r4
 800dee2:	9901      	ldr	r1, [sp, #4]
 800dee4:	3010      	adds	r0, #16
 800dee6:	f000 fdf7 	bl	800ead8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800deea:	0020      	movs	r0, r4
 800deec:	f7ff fec8 	bl	800dc80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800def0:	f000 fcbe 	bl	800e870 <xTaskResumeAll>
 800def4:	2800      	cmp	r0, #0
 800def6:	d1d9      	bne.n	800deac <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800def8:	f001 faae 	bl	800f458 <vPortYield>
 800defc:	2601      	movs	r6, #1
 800defe:	e7d6      	b.n	800deae <xQueueGenericSend+0xae>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df00:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df02:	2b00      	cmp	r3, #0
 800df04:	d100      	bne.n	800df08 <xQueueGenericSend+0x108>
 800df06:	e789      	b.n	800de1c <xQueueGenericSend+0x1c>
 800df08:	b672      	cpsid	i
 800df0a:	e7fe      	b.n	800df0a <xQueueGenericSend+0x10a>
	configASSERT( pxQueue );
 800df0c:	b672      	cpsid	i
 800df0e:	e7fe      	b.n	800df0e <xQueueGenericSend+0x10e>
					taskEXIT_CRITICAL();
 800df10:	f001 faba 	bl	800f488 <vPortExitCritical>
					return errQUEUE_FULL;
 800df14:	2000      	movs	r0, #0
 800df16:	e7dd      	b.n	800ded4 <xQueueGenericSend+0xd4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800df18:	0020      	movs	r0, r4
 800df1a:	3024      	adds	r0, #36	; 0x24
 800df1c:	f000 fe12 	bl	800eb44 <xTaskRemoveFromEventList>
 800df20:	2801      	cmp	r0, #1
 800df22:	d1d4      	bne.n	800dece <xQueueGenericSend+0xce>
							queueYIELD_IF_USING_PREEMPTION();
 800df24:	f001 fa98 	bl	800f458 <vPortYield>
 800df28:	e7d1      	b.n	800dece <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
 800df2a:	0020      	movs	r0, r4
 800df2c:	f7ff fea8 	bl	800dc80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df30:	f000 fc9e 	bl	800e870 <xTaskResumeAll>
			return errQUEUE_FULL;
 800df34:	2000      	movs	r0, #0
 800df36:	e7cd      	b.n	800ded4 <xQueueGenericSend+0xd4>

0800df38 <xQueueGenericSendFromISR>:
{
 800df38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df3a:	46c6      	mov	lr, r8
 800df3c:	0004      	movs	r4, r0
 800df3e:	b500      	push	{lr}
 800df40:	000d      	movs	r5, r1
 800df42:	0017      	movs	r7, r2
 800df44:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800df46:	2800      	cmp	r0, #0
 800df48:	d01d      	beq.n	800df86 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df4a:	2900      	cmp	r1, #0
 800df4c:	d016      	beq.n	800df7c <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df4e:	4643      	mov	r3, r8
 800df50:	2b02      	cmp	r3, #2
 800df52:	d104      	bne.n	800df5e <xQueueGenericSendFromISR+0x26>
 800df54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df56:	2b01      	cmp	r3, #1
 800df58:	d017      	beq.n	800df8a <xQueueGenericSendFromISR+0x52>
 800df5a:	b672      	cpsid	i
 800df5c:	e7fe      	b.n	800df5c <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df5e:	f001 faa1 	bl	800f4a4 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df66:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df68:	4293      	cmp	r3, r2
 800df6a:	d312      	bcc.n	800df92 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800df6c:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df6e:	0030      	movs	r0, r6
 800df70:	f001 fa9e 	bl	800f4b0 <vClearInterruptMaskFromISR>
}
 800df74:	0028      	movs	r0, r5
 800df76:	bc04      	pop	{r2}
 800df78:	4690      	mov	r8, r2
 800df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0e5      	beq.n	800df4e <xQueueGenericSendFromISR+0x16>
 800df82:	b672      	cpsid	i
 800df84:	e7fe      	b.n	800df84 <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800df86:	b672      	cpsid	i
 800df88:	e7fe      	b.n	800df88 <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df8a:	f001 fa8b 	bl	800f4a4 <ulSetInterruptMaskFromISR>
 800df8e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df92:	4642      	mov	r2, r8
 800df94:	0029      	movs	r1, r5
 800df96:	0020      	movs	r0, r4
 800df98:	f7ff fe24 	bl	800dbe4 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800df9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df9e:	3301      	adds	r3, #1
 800dfa0:	d004      	beq.n	800dfac <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800dfa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dfa4:	2501      	movs	r5, #1
				++( pxQueue->xTxLock );
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	64a3      	str	r3, [r4, #72]	; 0x48
 800dfaa:	e7e0      	b.n	800df6e <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfac:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800dfae:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d0dc      	beq.n	800df6e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfb4:	0020      	movs	r0, r4
 800dfb6:	3024      	adds	r0, #36	; 0x24
 800dfb8:	f000 fdc4 	bl	800eb44 <xTaskRemoveFromEventList>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0d6      	beq.n	800df6e <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800dfc0:	2f00      	cmp	r7, #0
 800dfc2:	d0d4      	beq.n	800df6e <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfc4:	603d      	str	r5, [r7, #0]
 800dfc6:	e7d2      	b.n	800df6e <xQueueGenericSendFromISR+0x36>

0800dfc8 <xQueueGiveFromISR>:
{
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	0004      	movs	r4, r0
 800dfcc:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d01e      	beq.n	800e010 <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dfd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <xQueueGiveFromISR+0x14>
 800dfd8:	b672      	cpsid	i
 800dfda:	e7fe      	b.n	800dfda <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dfdc:	6803      	ldr	r3, [r0, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d018      	beq.n	800e014 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfe2:	f001 fa5f 	bl	800f4a4 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dfe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfe8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfea:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800dfec:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d209      	bcs.n	800e006 <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800dff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dff4:	3301      	adds	r3, #1
 800dff6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dff8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dffa:	3301      	adds	r3, #1
 800dffc:	d00f      	beq.n	800e01e <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800dffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e000:	3301      	adds	r3, #1
 800e002:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e004:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e006:	0030      	movs	r0, r6
 800e008:	f001 fa52 	bl	800f4b0 <vClearInterruptMaskFromISR>
}
 800e00c:	0028      	movs	r0, r5
 800e00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e010:	b672      	cpsid	i
 800e012:	e7fe      	b.n	800e012 <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e014:	6843      	ldr	r3, [r0, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0e3      	beq.n	800dfe2 <xQueueGiveFromISR+0x1a>
 800e01a:	b672      	cpsid	i
 800e01c:	e7fe      	b.n	800e01c <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e020:	42ab      	cmp	r3, r5
 800e022:	d0ef      	beq.n	800e004 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e024:	0020      	movs	r0, r4
 800e026:	3024      	adds	r0, #36	; 0x24
 800e028:	f000 fd8c 	bl	800eb44 <xTaskRemoveFromEventList>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0e9      	beq.n	800e004 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e030:	2f00      	cmp	r7, #0
 800e032:	d0e7      	beq.n	800e004 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e034:	2501      	movs	r5, #1
 800e036:	603d      	str	r5, [r7, #0]
 800e038:	e7e5      	b.n	800e006 <xQueueGiveFromISR+0x3e>
 800e03a:	46c0      	nop			; (mov r8, r8)

0800e03c <xQueueGenericReceive>:
{
 800e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e03e:	46c6      	mov	lr, r8
 800e040:	b500      	push	{lr}
 800e042:	b084      	sub	sp, #16
 800e044:	0004      	movs	r4, r0
 800e046:	000d      	movs	r5, r1
 800e048:	9201      	str	r2, [sp, #4]
 800e04a:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d100      	bne.n	800e052 <xQueueGenericReceive+0x16>
 800e050:	e07c      	b.n	800e14c <xQueueGenericReceive+0x110>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e052:	2900      	cmp	r1, #0
 800e054:	d100      	bne.n	800e058 <xQueueGenericReceive+0x1c>
 800e056:	e073      	b.n	800e140 <xQueueGenericReceive+0x104>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e058:	f000 fdf8 	bl	800ec4c <xTaskGetSchedulerState>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d104      	bne.n	800e06a <xQueueGenericReceive+0x2e>
 800e060:	9b01      	ldr	r3, [sp, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <xQueueGenericReceive+0x2e>
 800e066:	b672      	cpsid	i
 800e068:	e7fe      	b.n	800e068 <xQueueGenericReceive+0x2c>
		taskENTER_CRITICAL();
 800e06a:	f001 fa01 	bl	800f470 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e06e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e070:	2b00      	cmp	r3, #0
 800e072:	d14b      	bne.n	800e10c <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e074:	9b01      	ldr	r3, [sp, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d100      	bne.n	800e07c <xQueueGenericReceive+0x40>
 800e07a:	e08f      	b.n	800e19c <xQueueGenericReceive+0x160>
					vTaskSetTimeOutState( &xTimeOut );
 800e07c:	a802      	add	r0, sp, #8
 800e07e:	f000 fd9b 	bl	800ebb8 <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e082:	2324      	movs	r3, #36	; 0x24
 800e084:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800e086:	2600      	movs	r6, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e088:	44a0      	add	r8, r4
 800e08a:	e00f      	b.n	800e0ac <xQueueGenericReceive+0x70>
	taskEXIT_CRITICAL();
 800e08c:	f001 f9fc 	bl	800f488 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e090:	0020      	movs	r0, r4
 800e092:	f7ff fdf5 	bl	800dc80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e096:	f000 fbeb 	bl	800e870 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e09a:	f001 f9e9 	bl	800f470 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e09e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d133      	bne.n	800e10c <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d100      	bne.n	800e0ac <xQueueGenericReceive+0x70>
 800e0aa:	e077      	b.n	800e19c <xQueueGenericReceive+0x160>
		taskEXIT_CRITICAL();
 800e0ac:	f001 f9ec 	bl	800f488 <vPortExitCritical>
		vTaskSuspendAll();
 800e0b0:	f000 fb3e 	bl	800e730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0b4:	f001 f9dc 	bl	800f470 <vPortEnterCritical>
 800e0b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	d100      	bne.n	800e0c0 <xQueueGenericReceive+0x84>
 800e0be:	6466      	str	r6, [r4, #68]	; 0x44
 800e0c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	d100      	bne.n	800e0c8 <xQueueGenericReceive+0x8c>
 800e0c6:	64a6      	str	r6, [r4, #72]	; 0x48
 800e0c8:	f001 f9de 	bl	800f488 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0cc:	a901      	add	r1, sp, #4
 800e0ce:	a802      	add	r0, sp, #8
 800e0d0:	f000 fd82 	bl	800ebd8 <xTaskCheckForTimeOut>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d15a      	bne.n	800e18e <xQueueGenericReceive+0x152>
	taskENTER_CRITICAL();
 800e0d8:	f001 f9ca 	bl	800f470 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e0dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1d4      	bne.n	800e08c <xQueueGenericReceive+0x50>
	taskEXIT_CRITICAL();
 800e0e2:	f001 f9d1 	bl	800f488 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d034      	beq.n	800e156 <xQueueGenericReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0ec:	9901      	ldr	r1, [sp, #4]
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	f000 fcf2 	bl	800ead8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0f4:	0020      	movs	r0, r4
 800e0f6:	f7ff fdc3 	bl	800dc80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0fa:	f000 fbb9 	bl	800e870 <xTaskResumeAll>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d026      	beq.n	800e150 <xQueueGenericReceive+0x114>
		taskENTER_CRITICAL();
 800e102:	f001 f9b5 	bl	800f470 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0cb      	beq.n	800e0a4 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e10c:	0029      	movs	r1, r5
 800e10e:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e110:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e112:	f7ff fda3 	bl	800dc5c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e116:	2f00      	cmp	r7, #0
 800e118:	d125      	bne.n	800e166 <xQueueGenericReceive+0x12a>
					--( pxQueue->uxMessagesWaiting );
 800e11a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e11c:	3b01      	subs	r3, #1
 800e11e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d102      	bne.n	800e12c <xQueueGenericReceive+0xf0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e126:	f000 fec5 	bl	800eeb4 <pvTaskIncrementMutexHeldCount>
 800e12a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e12c:	6923      	ldr	r3, [r4, #16]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d126      	bne.n	800e180 <xQueueGenericReceive+0x144>
				taskEXIT_CRITICAL();
 800e132:	f001 f9a9 	bl	800f488 <vPortExitCritical>
				return pdPASS;
 800e136:	2001      	movs	r0, #1
}
 800e138:	b004      	add	sp, #16
 800e13a:	bc04      	pop	{r2}
 800e13c:	4690      	mov	r8, r2
 800e13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e140:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e142:	2b00      	cmp	r3, #0
 800e144:	d100      	bne.n	800e148 <xQueueGenericReceive+0x10c>
 800e146:	e787      	b.n	800e058 <xQueueGenericReceive+0x1c>
 800e148:	b672      	cpsid	i
 800e14a:	e7fe      	b.n	800e14a <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 800e14c:	b672      	cpsid	i
 800e14e:	e7fe      	b.n	800e14e <xQueueGenericReceive+0x112>
					portYIELD_WITHIN_API();
 800e150:	f001 f982 	bl	800f458 <vPortYield>
 800e154:	e7d5      	b.n	800e102 <xQueueGenericReceive+0xc6>
						taskENTER_CRITICAL();
 800e156:	f001 f98b 	bl	800f470 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e15a:	6860      	ldr	r0, [r4, #4]
 800e15c:	f000 fd86 	bl	800ec6c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e160:	f001 f992 	bl	800f488 <vPortExitCritical>
 800e164:	e7c2      	b.n	800e0ec <xQueueGenericReceive+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e166:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e168:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0e1      	beq.n	800e132 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e16e:	0020      	movs	r0, r4
 800e170:	3024      	adds	r0, #36	; 0x24
 800e172:	f000 fce7 	bl	800eb44 <xTaskRemoveFromEventList>
 800e176:	2800      	cmp	r0, #0
 800e178:	d0db      	beq.n	800e132 <xQueueGenericReceive+0xf6>
							queueYIELD_IF_USING_PREEMPTION();
 800e17a:	f001 f96d 	bl	800f458 <vPortYield>
 800e17e:	e7d8      	b.n	800e132 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e180:	0020      	movs	r0, r4
 800e182:	3010      	adds	r0, #16
 800e184:	f000 fcde 	bl	800eb44 <xTaskRemoveFromEventList>
 800e188:	2801      	cmp	r0, #1
 800e18a:	d1d2      	bne.n	800e132 <xQueueGenericReceive+0xf6>
 800e18c:	e7f5      	b.n	800e17a <xQueueGenericReceive+0x13e>
			prvUnlockQueue( pxQueue );
 800e18e:	0020      	movs	r0, r4
 800e190:	f7ff fd76 	bl	800dc80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e194:	f000 fb6c 	bl	800e870 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e198:	2000      	movs	r0, #0
 800e19a:	e7cd      	b.n	800e138 <xQueueGenericReceive+0xfc>
					taskEXIT_CRITICAL();
 800e19c:	f001 f974 	bl	800f488 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	e7c9      	b.n	800e138 <xQueueGenericReceive+0xfc>

0800e1a4 <xQueueReceiveFromISR>:
{
 800e1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1a6:	46c6      	mov	lr, r8
 800e1a8:	0004      	movs	r4, r0
 800e1aa:	b500      	push	{lr}
 800e1ac:	4688      	mov	r8, r1
 800e1ae:	0017      	movs	r7, r2
	configASSERT( pxQueue );
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d00f      	beq.n	800e1d4 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	d01d      	beq.n	800e1f4 <xQueueReceiveFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1b8:	f001 f974 	bl	800f4a4 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1be:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800e1c0:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d108      	bne.n	800e1d8 <xQueueReceiveFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e1c6:	0030      	movs	r0, r6
 800e1c8:	f001 f972 	bl	800f4b0 <vClearInterruptMaskFromISR>
}
 800e1cc:	0028      	movs	r0, r5
 800e1ce:	bc04      	pop	{r2}
 800e1d0:	4690      	mov	r8, r2
 800e1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e1d4:	b672      	cpsid	i
 800e1d6:	e7fe      	b.n	800e1d6 <xQueueReceiveFromISR+0x32>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1d8:	4641      	mov	r1, r8
 800e1da:	0020      	movs	r0, r4
 800e1dc:	f7ff fd3e 	bl	800dc5c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e1e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e1e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	d008      	beq.n	800e1fe <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e1ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	6463      	str	r3, [r4, #68]	; 0x44
 800e1f2:	e007      	b.n	800e204 <xQueueReceiveFromISR+0x60>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0de      	beq.n	800e1b8 <xQueueReceiveFromISR+0x14>
 800e1fa:	b672      	cpsid	i
 800e1fc:	e7fe      	b.n	800e1fc <xQueueReceiveFromISR+0x58>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	42ab      	cmp	r3, r5
 800e202:	d101      	bne.n	800e208 <xQueueReceiveFromISR+0x64>
			xReturn = pdPASS;
 800e204:	2501      	movs	r5, #1
 800e206:	e7de      	b.n	800e1c6 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e208:	0020      	movs	r0, r4
 800e20a:	3010      	adds	r0, #16
 800e20c:	f000 fc9a 	bl	800eb44 <xTaskRemoveFromEventList>
 800e210:	2800      	cmp	r0, #0
 800e212:	d0f7      	beq.n	800e204 <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e214:	2f00      	cmp	r7, #0
 800e216:	d0f5      	beq.n	800e204 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e218:	2501      	movs	r5, #1
 800e21a:	603d      	str	r5, [r7, #0]
 800e21c:	e7d3      	b.n	800e1c6 <xQueueReceiveFromISR+0x22>
 800e21e:	46c0      	nop			; (mov r8, r8)

0800e220 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e220:	2300      	movs	r3, #0
	{
 800e222:	b570      	push	{r4, r5, r6, lr}
 800e224:	4d06      	ldr	r5, [pc, #24]	; (800e240 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e226:	00dc      	lsls	r4, r3, #3
 800e228:	192a      	adds	r2, r5, r4
 800e22a:	6816      	ldr	r6, [r2, #0]
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	d003      	beq.n	800e238 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e230:	3301      	adds	r3, #1
 800e232:	2b08      	cmp	r3, #8
 800e234:	d1f7      	bne.n	800e226 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e236:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e238:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e23a:	6050      	str	r0, [r2, #4]
				break;
 800e23c:	e7fb      	b.n	800e236 <vQueueAddToRegistry+0x16>
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	2000726c 	.word	0x2000726c

0800e244 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e244:	b570      	push	{r4, r5, r6, lr}
 800e246:	0004      	movs	r4, r0
 800e248:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e24a:	f001 f911 	bl	800f470 <vPortEnterCritical>
 800e24e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e250:	3301      	adds	r3, #1
 800e252:	d101      	bne.n	800e258 <vQueueWaitForMessageRestricted+0x14>
 800e254:	2300      	movs	r3, #0
 800e256:	6463      	str	r3, [r4, #68]	; 0x44
 800e258:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e25a:	3301      	adds	r3, #1
 800e25c:	d101      	bne.n	800e262 <vQueueWaitForMessageRestricted+0x1e>
 800e25e:	2300      	movs	r3, #0
 800e260:	64a3      	str	r3, [r4, #72]	; 0x48
 800e262:	f001 f911 	bl	800f488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d104      	bne.n	800e276 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e26c:	0020      	movs	r0, r4
 800e26e:	0029      	movs	r1, r5
 800e270:	3024      	adds	r0, #36	; 0x24
 800e272:	f000 fc51 	bl	800eb18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e276:	0020      	movs	r0, r4
 800e278:	f7ff fd02 	bl	800dc80 <prvUnlockQueue>
	}
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	46c0      	nop			; (mov r8, r8)

0800e280 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e280:	b510      	push	{r4, lr}
 800e282:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e284:	f005 f89e 	bl	80133c4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e288:	0020      	movs	r0, r4
 800e28a:	f7f1 ff45 	bl	8000118 <strlen>
 800e28e:	0003      	movs	r3, r0
 800e290:	280b      	cmp	r0, #11
 800e292:	d808      	bhi.n	800e2a6 <prvWriteNameToBuffer+0x26>
 800e294:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e296:	2320      	movs	r3, #32
 800e298:	1820      	adds	r0, r4, r0
 800e29a:	320c      	adds	r2, #12
 800e29c:	7003      	strb	r3, [r0, #0]
 800e29e:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e2a0:	4290      	cmp	r0, r2
 800e2a2:	d1fb      	bne.n	800e29c <prvWriteNameToBuffer+0x1c>
 800e2a4:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e2a6:	18e0      	adds	r0, r4, r3
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	46c0      	nop			; (mov r8, r8)

0800e2b0 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b2:	46d6      	mov	lr, sl
 800e2b4:	464f      	mov	r7, r9
 800e2b6:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e2b8:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e2ba:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e2bc:	685f      	ldr	r7, [r3, #4]
 800e2be:	2308      	movs	r3, #8
 800e2c0:	469c      	mov	ip, r3
 800e2c2:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e2c4:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e2c6:	604f      	str	r7, [r1, #4]
 800e2c8:	4567      	cmp	r7, ip
 800e2ca:	d042      	beq.n	800e352 <prvListTaskWithinSingleList.part.1+0xa2>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	0005      	movs	r5, r0
 800e2d0:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e2d2:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e2d4:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e2d6:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e2d8:	687f      	ldr	r7, [r7, #4]
 800e2da:	604f      	str	r7, [r1, #4]
 800e2dc:	45bc      	cmp	ip, r7
 800e2de:	d035      	beq.n	800e34c <prvListTaskWithinSingleList.part.1+0x9c>
 800e2e0:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e2e2:	0033      	movs	r3, r6
 800e2e4:	3334      	adds	r3, #52	; 0x34
 800e2e6:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e2e8:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e2ea:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e2ec:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e2ee:	4653      	mov	r3, sl
 800e2f0:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e2f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e2f4:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e2f6:	4653      	mov	r3, sl
 800e2f8:	2b03      	cmp	r3, #3
 800e2fa:	d018      	beq.n	800e32e <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e2fc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e2fe:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e300:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e302:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e304:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e306:	7813      	ldrb	r3, [r2, #0]
 800e308:	2ba5      	cmp	r3, #165	; 0xa5
 800e30a:	d11d      	bne.n	800e348 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e30c:	2300      	movs	r3, #0
			ulCount++;
 800e30e:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e310:	5cd4      	ldrb	r4, [r2, r3]
 800e312:	2ca5      	cmp	r4, #165	; 0xa5
 800e314:	d0fb      	beq.n	800e30e <prvListTaskWithinSingleList.part.1+0x5e>
 800e316:	089b      	lsrs	r3, r3, #2
 800e318:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e31a:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e31c:	3001      	adds	r0, #1
 800e31e:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e320:	45b0      	cmp	r8, r6
 800e322:	d1d9      	bne.n	800e2d8 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e324:	bc1c      	pop	{r2, r3, r4}
 800e326:	4690      	mov	r8, r2
 800e328:	4699      	mov	r9, r3
 800e32a:	46a2      	mov	sl, r4
 800e32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e32e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0e3      	beq.n	800e2fc <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e334:	464b      	mov	r3, r9
 800e336:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e338:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e33a:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e33c:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e33e:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e340:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e342:	7813      	ldrb	r3, [r2, #0]
 800e344:	2ba5      	cmp	r3, #165	; 0xa5
 800e346:	d0e1      	beq.n	800e30c <prvListTaskWithinSingleList.part.1+0x5c>
 800e348:	2300      	movs	r3, #0
 800e34a:	e7e6      	b.n	800e31a <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e34c:	68cf      	ldr	r7, [r1, #12]
 800e34e:	604f      	str	r7, [r1, #4]
 800e350:	e7c6      	b.n	800e2e0 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e352:	68cf      	ldr	r7, [r1, #12]
 800e354:	e7ba      	b.n	800e2cc <prvListTaskWithinSingleList.part.1+0x1c>
 800e356:	46c0      	nop			; (mov r8, r8)

0800e358 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e358:	4b03      	ldr	r3, [pc, #12]	; (800e368 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	4b02      	ldr	r3, [pc, #8]	; (800e36c <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	4770      	bx	lr
 800e368:	20002144 	.word	0x20002144
 800e36c:	200000d0 	.word	0x200000d0

0800e370 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e370:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e372:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e374:	685a      	ldr	r2, [r3, #4]
{
 800e376:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e378:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	4282      	cmp	r2, r0
 800e37e:	d80a      	bhi.n	800e396 <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e380:	6818      	ldr	r0, [r3, #0]
 800e382:	6859      	ldr	r1, [r3, #4]
 800e384:	3104      	adds	r1, #4
 800e386:	f7ff fc05 	bl	800db94 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0x38>)
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	42a2      	cmp	r2, r4
 800e390:	d900      	bls.n	800e394 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e392:	601c      	str	r4, [r3, #0]
}
 800e394:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e396:	68d8      	ldr	r0, [r3, #12]
 800e398:	6859      	ldr	r1, [r3, #4]
 800e39a:	3104      	adds	r1, #4
 800e39c:	f7ff fbfa 	bl	800db94 <vListInsert>
 800e3a0:	e7f8      	b.n	800e394 <prvAddCurrentTaskToDelayedList+0x24>
 800e3a2:	46c0      	nop			; (mov r8, r8)
 800e3a4:	20002144 	.word	0x20002144
 800e3a8:	200000d0 	.word	0x200000d0

0800e3ac <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ae:	464f      	mov	r7, r9
 800e3b0:	4646      	mov	r6, r8
 800e3b2:	46d6      	mov	lr, sl
 800e3b4:	b5c0      	push	{r6, r7, lr}
 800e3b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	000c      	movs	r4, r1
 800e3bc:	0015      	movs	r5, r2
 800e3be:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3c0:	2f00      	cmp	r7, #0
 800e3c2:	d100      	bne.n	800e3c6 <xTaskGenericCreate.part.5+0x1a>
 800e3c4:	e0ab      	b.n	800e51e <xTaskGenericCreate.part.5+0x172>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e3c6:	2060      	movs	r0, #96	; 0x60
 800e3c8:	f001 f8d0 	bl	800f56c <pvPortMalloc>
 800e3cc:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e3ce:	d100      	bne.n	800e3d2 <xTaskGenericCreate.part.5+0x26>
 800e3d0:	e0ae      	b.n	800e530 <xTaskGenericCreate.part.5+0x184>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e3d2:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e3d4:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e3d6:	002a      	movs	r2, r5
 800e3d8:	0038      	movs	r0, r7
 800e3da:	21a5      	movs	r1, #165	; 0xa5
 800e3dc:	f004 fdbc 	bl	8012f58 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e3e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e3e2:	1f2f      	subs	r7, r5, #4
 800e3e4:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e3e6:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e3e8:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e3ea:	439f      	bics	r7, r3
 800e3ec:	0030      	movs	r0, r6
 800e3ee:	0033      	movs	r3, r6
 800e3f0:	3041      	adds	r0, #65	; 0x41
 800e3f2:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e3f4:	7822      	ldrb	r2, [r4, #0]
 800e3f6:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e3f8:	7822      	ldrb	r2, [r4, #0]
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d003      	beq.n	800e406 <xTaskGenericCreate.part.5+0x5a>
 800e3fe:	3301      	adds	r3, #1
 800e400:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e402:	4298      	cmp	r0, r3
 800e404:	d1f6      	bne.n	800e3f4 <xTaskGenericCreate.part.5+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e406:	2340      	movs	r3, #64	; 0x40
 800e408:	2200      	movs	r2, #0
 800e40a:	9d08      	ldr	r5, [sp, #32]
 800e40c:	54f2      	strb	r2, [r6, r3]
 800e40e:	2d06      	cmp	r5, #6
 800e410:	d84f      	bhi.n	800e4b2 <xTaskGenericCreate.part.5+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e412:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e414:	1d33      	adds	r3, r6, #4
 800e416:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e418:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e41a:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e41c:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e41e:	469a      	mov	sl, r3
 800e420:	f7ff fba8 	bl	800db74 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e424:	0030      	movs	r0, r6
 800e426:	3018      	adds	r0, #24
 800e428:	f7ff fba4 	bl	800db74 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e42c:	2307      	movs	r3, #7
 800e42e:	1b5b      	subs	r3, r3, r5
 800e430:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e432:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e434:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e436:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e438:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e43a:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e43c:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e43e:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e440:	4641      	mov	r1, r8
 800e442:	0038      	movs	r0, r7
 800e444:	f000 ffcc 	bl	800f3e0 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e448:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e44a:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d000      	beq.n	800e452 <xTaskGenericCreate.part.5+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e450:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e452:	f001 f80d 	bl	800f470 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e456:	4c39      	ldr	r4, [pc, #228]	; (800e53c <xTaskGenericCreate.part.5+0x190>)
 800e458:	6923      	ldr	r3, [r4, #16]
 800e45a:	3301      	adds	r3, #1
 800e45c:	6123      	str	r3, [r4, #16]
			if( pxCurrentTCB == NULL )
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d02f      	beq.n	800e4c4 <xTaskGenericCreate.part.5+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e464:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e466:	2b00      	cmp	r3, #0
 800e468:	d025      	beq.n	800e4b6 <xTaskGenericCreate.part.5+0x10a>
 800e46a:	4d35      	ldr	r5, [pc, #212]	; (800e540 <xTaskGenericCreate.part.5+0x194>)
			uxTaskNumber++;
 800e46c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			prvAddTaskToReadyList( pxNewTCB );
 800e46e:	4a35      	ldr	r2, [pc, #212]	; (800e544 <xTaskGenericCreate.part.5+0x198>)
			uxTaskNumber++;
 800e470:	3301      	adds	r3, #1
 800e472:	67e3      	str	r3, [r4, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e474:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e476:	6811      	ldr	r1, [r2, #0]
 800e478:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e47a:	428b      	cmp	r3, r1
 800e47c:	d817      	bhi.n	800e4ae <xTaskGenericCreate.part.5+0x102>
 800e47e:	0098      	lsls	r0, r3, #2
 800e480:	18c0      	adds	r0, r0, r3
 800e482:	0080      	lsls	r0, r0, #2
 800e484:	1828      	adds	r0, r5, r0
 800e486:	4651      	mov	r1, sl
 800e488:	f7ff fb78 	bl	800db7c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e48c:	f000 fffc 	bl	800f488 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e490:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			xReturn = pdPASS;
 800e492:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e494:	2b00      	cmp	r3, #0
 800e496:	d004      	beq.n	800e4a2 <xTaskGenericCreate.part.5+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e498:	6863      	ldr	r3, [r4, #4]
 800e49a:	9a08      	ldr	r2, [sp, #32]
 800e49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d83a      	bhi.n	800e518 <xTaskGenericCreate.part.5+0x16c>
}
 800e4a2:	0028      	movs	r0, r5
 800e4a4:	bc1c      	pop	{r2, r3, r4}
 800e4a6:	4690      	mov	r8, r2
 800e4a8:	4699      	mov	r9, r3
 800e4aa:	46a2      	mov	sl, r4
 800e4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	e7e5      	b.n	800e47e <xTaskGenericCreate.part.5+0xd2>
 800e4b2:	2506      	movs	r5, #6
 800e4b4:	e7ad      	b.n	800e412 <xTaskGenericCreate.part.5+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e4b6:	6863      	ldr	r3, [r4, #4]
 800e4b8:	9a08      	ldr	r2, [sp, #32]
 800e4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d3d4      	bcc.n	800e46a <xTaskGenericCreate.part.5+0xbe>
						pxCurrentTCB = pxNewTCB;
 800e4c0:	6066      	str	r6, [r4, #4]
 800e4c2:	e7d2      	b.n	800e46a <xTaskGenericCreate.part.5+0xbe>
				pxCurrentTCB =  pxNewTCB;
 800e4c4:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e4c6:	6923      	ldr	r3, [r4, #16]
 800e4c8:	4d1d      	ldr	r5, [pc, #116]	; (800e540 <xTaskGenericCreate.part.5+0x194>)
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d1ce      	bne.n	800e46c <xTaskGenericCreate.part.5+0xc0>
 800e4ce:	238c      	movs	r3, #140	; 0x8c
 800e4d0:	4698      	mov	r8, r3
 800e4d2:	002f      	movs	r7, r5
 800e4d4:	44a8      	add	r8, r5
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4d6:	0038      	movs	r0, r7
 800e4d8:	3714      	adds	r7, #20
 800e4da:	f7ff fb3f 	bl	800db5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4de:	45b8      	cmp	r8, r7
 800e4e0:	d1f9      	bne.n	800e4d6 <xTaskGenericCreate.part.5+0x12a>
	vListInitialise( &xDelayedTaskList1 );
 800e4e2:	2314      	movs	r3, #20
 800e4e4:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e4e6:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800e4e8:	44a0      	add	r8, r4
 800e4ea:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800e4ec:	3728      	adds	r7, #40	; 0x28
	vListInitialise( &xDelayedTaskList1 );
 800e4ee:	f7ff fb35 	bl	800db5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4f2:	0038      	movs	r0, r7
 800e4f4:	f7ff fb32 	bl	800db5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4f8:	0020      	movs	r0, r4
 800e4fa:	303c      	adds	r0, #60	; 0x3c
 800e4fc:	f7ff fb2e 	bl	800db5c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e500:	0020      	movs	r0, r4
 800e502:	3050      	adds	r0, #80	; 0x50
 800e504:	f7ff fb2a 	bl	800db5c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e508:	0020      	movs	r0, r4
 800e50a:	3064      	adds	r0, #100	; 0x64
 800e50c:	f7ff fb26 	bl	800db5c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e510:	4643      	mov	r3, r8
 800e512:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e514:	60e7      	str	r7, [r4, #12]
 800e516:	e7a9      	b.n	800e46c <xTaskGenericCreate.part.5+0xc0>
				taskYIELD_IF_USING_PREEMPTION();
 800e518:	f000 ff9e 	bl	800f458 <vPortYield>
 800e51c:	e7c1      	b.n	800e4a2 <xTaskGenericCreate.part.5+0xf6>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e51e:	0090      	lsls	r0, r2, #2
 800e520:	f001 f824 	bl	800f56c <pvPortMalloc>
 800e524:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e526:	d000      	beq.n	800e52a <xTaskGenericCreate.part.5+0x17e>
 800e528:	e74d      	b.n	800e3c6 <xTaskGenericCreate.part.5+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e52a:	2501      	movs	r5, #1
 800e52c:	426d      	negs	r5, r5
 800e52e:	e7b8      	b.n	800e4a2 <xTaskGenericCreate.part.5+0xf6>
 800e530:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e532:	0038      	movs	r0, r7
 800e534:	f001 f896 	bl	800f664 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e538:	426d      	negs	r5, r5
 800e53a:	e7b2      	b.n	800e4a2 <xTaskGenericCreate.part.5+0xf6>
 800e53c:	20002144 	.word	0x20002144
 800e540:	200021e0 	.word	0x200021e0
 800e544:	200021c4 	.word	0x200021c4

0800e548 <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800e548:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e54a:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800e54c:	4d26      	ldr	r5, [pc, #152]	; (800e5e8 <vTaskSwitchContext.part.6+0xa0>)
 800e54e:	606b      	str	r3, [r5, #4]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e550:	f7f9 ff12 	bl	8008378 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e554:	68ab      	ldr	r3, [r5, #8]
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e556:	4c25      	ldr	r4, [pc, #148]	; (800e5ec <vTaskSwitchContext.part.6+0xa4>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e558:	4298      	cmp	r0, r3
 800e55a:	d904      	bls.n	800e566 <vTaskSwitchContext.part.6+0x1e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e55c:	6862      	ldr	r2, [r4, #4]
 800e55e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e560:	1acb      	subs	r3, r1, r3
 800e562:	181b      	adds	r3, r3, r0
 800e564:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e566:	6862      	ldr	r2, [r4, #4]
 800e568:	6863      	ldr	r3, [r4, #4]
 800e56a:	6812      	ldr	r2, [r2, #0]
 800e56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e56e:	60a8      	str	r0, [r5, #8]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e570:	429a      	cmp	r2, r3
 800e572:	d804      	bhi.n	800e57e <vTaskSwitchContext.part.6+0x36>
 800e574:	6860      	ldr	r0, [r4, #4]
 800e576:	6861      	ldr	r1, [r4, #4]
 800e578:	3134      	adds	r1, #52	; 0x34
 800e57a:	f7fe fc9f 	bl	800cebc <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e57e:	6863      	ldr	r3, [r4, #4]
 800e580:	2214      	movs	r2, #20
 800e582:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e584:	491a      	ldr	r1, [pc, #104]	; (800e5f0 <vTaskSwitchContext.part.6+0xa8>)
 800e586:	f004 fccf 	bl	8012f28 <memcmp>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d004      	beq.n	800e598 <vTaskSwitchContext.part.6+0x50>
 800e58e:	6860      	ldr	r0, [r4, #4]
 800e590:	6861      	ldr	r1, [r4, #4]
 800e592:	3134      	adds	r1, #52	; 0x34
 800e594:	f7fe fc92 	bl	800cebc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e598:	6829      	ldr	r1, [r5, #0]
 800e59a:	4a16      	ldr	r2, [pc, #88]	; (800e5f4 <vTaskSwitchContext.part.6+0xac>)
 800e59c:	e006      	b.n	800e5ac <vTaskSwitchContext.part.6+0x64>
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d018      	beq.n	800e5d6 <vTaskSwitchContext.part.6+0x8e>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	6829      	ldr	r1, [r5, #0]
 800e5ac:	008b      	lsls	r3, r1, #2
 800e5ae:	185b      	adds	r3, r3, r1
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	58d3      	ldr	r3, [r2, r3]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0f2      	beq.n	800e59e <vTaskSwitchContext.part.6+0x56>
 800e5b8:	6828      	ldr	r0, [r5, #0]
 800e5ba:	0083      	lsls	r3, r0, #2
 800e5bc:	181b      	adds	r3, r3, r0
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	18d5      	adds	r5, r2, r3
 800e5c2:	6869      	ldr	r1, [r5, #4]
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	6849      	ldr	r1, [r1, #4]
 800e5c8:	18d3      	adds	r3, r2, r3
 800e5ca:	6069      	str	r1, [r5, #4]
 800e5cc:	4299      	cmp	r1, r3
 800e5ce:	d004      	beq.n	800e5da <vTaskSwitchContext.part.6+0x92>
 800e5d0:	68cb      	ldr	r3, [r1, #12]
 800e5d2:	6063      	str	r3, [r4, #4]
}
 800e5d4:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e5d6:	b672      	cpsid	i
 800e5d8:	e7fe      	b.n	800e5d8 <vTaskSwitchContext.part.6+0x90>
 800e5da:	2314      	movs	r3, #20
 800e5dc:	4343      	muls	r3, r0
 800e5de:	6849      	ldr	r1, [r1, #4]
 800e5e0:	18d2      	adds	r2, r2, r3
 800e5e2:	6051      	str	r1, [r2, #4]
 800e5e4:	e7f4      	b.n	800e5d0 <vTaskSwitchContext.part.6+0x88>
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	200021c4 	.word	0x200021c4
 800e5ec:	20002144 	.word	0x20002144
 800e5f0:	08017dd4 	.word	0x08017dd4
 800e5f4:	200021e0 	.word	0x200021e0

0800e5f8 <xTaskGenericCreate>:
{
 800e5f8:	b530      	push	{r4, r5, lr}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d003      	beq.n	800e60a <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e602:	2c06      	cmp	r4, #6
 800e604:	d903      	bls.n	800e60e <xTaskGenericCreate+0x16>
 800e606:	b672      	cpsid	i
 800e608:	e7fe      	b.n	800e608 <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800e60a:	b672      	cpsid	i
 800e60c:	e7fe      	b.n	800e60c <xTaskGenericCreate+0x14>
 800e60e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e610:	9400      	str	r4, [sp, #0]
 800e612:	9502      	str	r5, [sp, #8]
 800e614:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e616:	9501      	str	r5, [sp, #4]
 800e618:	f7ff fec8 	bl	800e3ac <xTaskGenericCreate.part.5>
}
 800e61c:	b005      	add	sp, #20
 800e61e:	bd30      	pop	{r4, r5, pc}

0800e620 <uxTaskPriorityGet>:
	{
 800e620:	b510      	push	{r4, lr}
 800e622:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e624:	f000 ff24 	bl	800f470 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e628:	2c00      	cmp	r4, #0
 800e62a:	d101      	bne.n	800e630 <uxTaskPriorityGet+0x10>
 800e62c:	4b03      	ldr	r3, [pc, #12]	; (800e63c <uxTaskPriorityGet+0x1c>)
 800e62e:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e630:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e632:	f000 ff29 	bl	800f488 <vPortExitCritical>
	}
 800e636:	0020      	movs	r0, r4
 800e638:	bd10      	pop	{r4, pc}
 800e63a:	46c0      	nop			; (mov r8, r8)
 800e63c:	20002144 	.word	0x20002144

0800e640 <vTaskPrioritySet>:
	{
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	0004      	movs	r4, r0
 800e644:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e646:	2906      	cmp	r1, #6
 800e648:	d901      	bls.n	800e64e <vTaskPrioritySet+0xe>
 800e64a:	b672      	cpsid	i
 800e64c:	e7fe      	b.n	800e64c <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e64e:	f000 ff0f 	bl	800f470 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e652:	2c00      	cmp	r4, #0
 800e654:	d101      	bne.n	800e65a <vTaskPrioritySet+0x1a>
 800e656:	4b20      	ldr	r3, [pc, #128]	; (800e6d8 <vTaskPrioritySet+0x98>)
 800e658:	685c      	ldr	r4, [r3, #4]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e65a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e65c:	4295      	cmp	r5, r2
 800e65e:	d01f      	beq.n	800e6a0 <vTaskPrioritySet+0x60>
					if( pxTCB != pxCurrentTCB )
 800e660:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <vTaskPrioritySet+0x98>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e662:	d931      	bls.n	800e6c8 <vTaskPrioritySet+0x88>
					if( pxTCB != pxCurrentTCB )
 800e664:	6859      	ldr	r1, [r3, #4]
 800e666:	42a1      	cmp	r1, r4
 800e668:	d033      	beq.n	800e6d2 <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e66a:	2600      	movs	r6, #0
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	429d      	cmp	r5, r3
 800e672:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e674:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e676:	428a      	cmp	r2, r1
 800e678:	d100      	bne.n	800e67c <vTaskPrioritySet+0x3c>
						pxTCB->uxPriority = uxNewPriority;
 800e67a:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e67c:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e67e:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e680:	2b00      	cmp	r3, #0
 800e682:	db02      	blt.n	800e68a <vTaskPrioritySet+0x4a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e684:	2207      	movs	r2, #7
 800e686:	1b55      	subs	r5, r2, r5
 800e688:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e68a:	2314      	movs	r3, #20
 800e68c:	434b      	muls	r3, r1
 800e68e:	4d13      	ldr	r5, [pc, #76]	; (800e6dc <vTaskPrioritySet+0x9c>)
 800e690:	6962      	ldr	r2, [r4, #20]
 800e692:	18eb      	adds	r3, r5, r3
 800e694:	429a      	cmp	r2, r3
 800e696:	d006      	beq.n	800e6a6 <vTaskPrioritySet+0x66>
				if( xYieldRequired == pdTRUE )
 800e698:	2e01      	cmp	r6, #1
 800e69a:	d101      	bne.n	800e6a0 <vTaskPrioritySet+0x60>
					taskYIELD_IF_USING_PREEMPTION();
 800e69c:	f000 fedc 	bl	800f458 <vPortYield>
		taskEXIT_CRITICAL();
 800e6a0:	f000 fef2 	bl	800f488 <vPortExitCritical>
	}
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e6a6:	1d27      	adds	r7, r4, #4
 800e6a8:	0038      	movs	r0, r7
 800e6aa:	f7ff fa8b 	bl	800dbc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6ae:	4a0c      	ldr	r2, [pc, #48]	; (800e6e0 <vTaskPrioritySet+0xa0>)
 800e6b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e6b2:	6811      	ldr	r1, [r2, #0]
 800e6b4:	428b      	cmp	r3, r1
 800e6b6:	d900      	bls.n	800e6ba <vTaskPrioritySet+0x7a>
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	2014      	movs	r0, #20
 800e6bc:	4358      	muls	r0, r3
 800e6be:	0039      	movs	r1, r7
 800e6c0:	1828      	adds	r0, r5, r0
 800e6c2:	f7ff fa5b 	bl	800db7c <vListInsertEnd>
 800e6c6:	e7e7      	b.n	800e698 <vTaskPrioritySet+0x58>
				else if( pxTCB == pxCurrentTCB )
 800e6c8:	685e      	ldr	r6, [r3, #4]
 800e6ca:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e6cc:	4273      	negs	r3, r6
 800e6ce:	415e      	adcs	r6, r3
 800e6d0:	e7d0      	b.n	800e674 <vTaskPrioritySet+0x34>
	BaseType_t xYieldRequired = pdFALSE;
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	e7ce      	b.n	800e674 <vTaskPrioritySet+0x34>
 800e6d6:	46c0      	nop			; (mov r8, r8)
 800e6d8:	20002144 	.word	0x20002144
 800e6dc:	200021e0 	.word	0x200021e0
 800e6e0:	200021c4 	.word	0x200021c4

0800e6e4 <vTaskStartScheduler>:
{
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	2400      	movs	r4, #0
 800e6e8:	b084      	sub	sp, #16
 800e6ea:	9402      	str	r4, [sp, #8]
 800e6ec:	9401      	str	r4, [sp, #4]
 800e6ee:	9400      	str	r4, [sp, #0]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	22a0      	movs	r2, #160	; 0xa0
 800e6f4:	490b      	ldr	r1, [pc, #44]	; (800e724 <vTaskStartScheduler+0x40>)
 800e6f6:	480c      	ldr	r0, [pc, #48]	; (800e728 <vTaskStartScheduler+0x44>)
 800e6f8:	f7ff fe58 	bl	800e3ac <xTaskGenericCreate.part.5>
		if( xReturn == pdPASS )
 800e6fc:	2801      	cmp	r0, #1
 800e6fe:	d003      	beq.n	800e708 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e700:	2800      	cmp	r0, #0
 800e702:	d10d      	bne.n	800e720 <vTaskStartScheduler+0x3c>
 800e704:	b672      	cpsid	i
 800e706:	e7fe      	b.n	800e706 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e708:	f000 fcc0 	bl	800f08c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e70c:	2801      	cmp	r0, #1
 800e70e:	d1f7      	bne.n	800e700 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e710:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e712:	4b06      	ldr	r3, [pc, #24]	; (800e72c <vTaskStartScheduler+0x48>)
 800e714:	6798      	str	r0, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800e716:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e718:	f7f9 fe1e 	bl	8008358 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e71c:	f000 fe72 	bl	800f404 <xPortStartScheduler>
}
 800e720:	b004      	add	sp, #16
 800e722:	bd10      	pop	{r4, pc}
 800e724:	0801a828 	.word	0x0801a828
 800e728:	0800e975 	.word	0x0800e975
 800e72c:	20002144 	.word	0x20002144

0800e730 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e730:	4a02      	ldr	r2, [pc, #8]	; (800e73c <vTaskSuspendAll+0xc>)
 800e732:	6913      	ldr	r3, [r2, #16]
 800e734:	3301      	adds	r3, #1
 800e736:	6113      	str	r3, [r2, #16]
}
 800e738:	4770      	bx	lr
 800e73a:	46c0      	nop			; (mov r8, r8)
 800e73c:	200021c4 	.word	0x200021c4

0800e740 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e740:	4b01      	ldr	r3, [pc, #4]	; (800e748 <xTaskGetTickCount+0x8>)
 800e742:	6898      	ldr	r0, [r3, #8]
}
 800e744:	4770      	bx	lr
 800e746:	46c0      	nop			; (mov r8, r8)
 800e748:	20002144 	.word	0x20002144

0800e74c <xTaskGetTickCountFromISR>:
 800e74c:	4b01      	ldr	r3, [pc, #4]	; (800e754 <xTaskGetTickCountFromISR+0x8>)
 800e74e:	6898      	ldr	r0, [r3, #8]
 800e750:	4770      	bx	lr
 800e752:	46c0      	nop			; (mov r8, r8)
 800e754:	20002144 	.word	0x20002144

0800e758 <xTaskIncrementTick>:
{
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	4645      	mov	r5, r8
 800e75c:	46de      	mov	lr, fp
 800e75e:	4657      	mov	r7, sl
 800e760:	464e      	mov	r6, r9
 800e762:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e764:	4d3e      	ldr	r5, [pc, #248]	; (800e860 <xTaskIncrementTick+0x108>)
 800e766:	692b      	ldr	r3, [r5, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d119      	bne.n	800e7a0 <xTaskIncrementTick+0x48>
		++xTickCount;
 800e76c:	4c3d      	ldr	r4, [pc, #244]	; (800e864 <xTaskIncrementTick+0x10c>)
 800e76e:	68a3      	ldr	r3, [r4, #8]
 800e770:	3301      	adds	r3, #1
 800e772:	60a3      	str	r3, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e774:	68a3      	ldr	r3, [r4, #8]
 800e776:	469a      	mov	sl, r3
			if( xConstTickCount == ( TickType_t ) 0U )
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d020      	beq.n	800e7be <xTaskIncrementTick+0x66>
 800e77c:	4f3a      	ldr	r7, [pc, #232]	; (800e868 <xTaskIncrementTick+0x110>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e77e:	683b      	ldr	r3, [r7, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e780:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e782:	4553      	cmp	r3, sl
 800e784:	d921      	bls.n	800e7ca <xTaskIncrementTick+0x72>
 800e786:	4b39      	ldr	r3, [pc, #228]	; (800e86c <xTaskIncrementTick+0x114>)
 800e788:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78e:	0093      	lsls	r3, r2, #2
 800e790:	189b      	adds	r3, r3, r2
 800e792:	464a      	mov	r2, r9
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	58d3      	ldr	r3, [r2, r3]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d905      	bls.n	800e7a8 <xTaskIncrementTick+0x50>
				xSwitchRequired = pdTRUE;
 800e79c:	2601      	movs	r6, #1
 800e79e:	e003      	b.n	800e7a8 <xTaskIncrementTick+0x50>
BaseType_t xSwitchRequired = pdFALSE;
 800e7a0:	2600      	movs	r6, #0
		++uxPendedTicks;
 800e7a2:	69ab      	ldr	r3, [r5, #24]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	61ab      	str	r3, [r5, #24]
		if( xYieldPending != pdFALSE )
 800e7a8:	686b      	ldr	r3, [r5, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d000      	beq.n	800e7b0 <xTaskIncrementTick+0x58>
			xSwitchRequired = pdTRUE;
 800e7ae:	2601      	movs	r6, #1
}
 800e7b0:	0030      	movs	r0, r6
 800e7b2:	bc3c      	pop	{r2, r3, r4, r5}
 800e7b4:	4690      	mov	r8, r2
 800e7b6:	4699      	mov	r9, r3
 800e7b8:	46a2      	mov	sl, r4
 800e7ba:	46ab      	mov	fp, r5
 800e7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d039      	beq.n	800e83a <xTaskIncrementTick+0xe2>
 800e7c6:	b672      	cpsid	i
 800e7c8:	e7fe      	b.n	800e7c8 <xTaskIncrementTick+0x70>
 800e7ca:	4b28      	ldr	r3, [pc, #160]	; (800e86c <xTaskIncrementTick+0x114>)
 800e7cc:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ce:	6823      	ldr	r3, [r4, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d02c      	beq.n	800e830 <xTaskIncrementTick+0xd8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	4698      	mov	r8, r3
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e7de:	685b      	ldr	r3, [r3, #4]
						if( xConstTickCount < xItemValue )
 800e7e0:	459a      	cmp	sl, r3
 800e7e2:	d328      	bcc.n	800e836 <xTaskIncrementTick+0xde>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	4443      	add	r3, r8
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	469b      	mov	fp, r3
 800e7ec:	f7ff f9ea 	bl	800dbc4 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7f0:	4643      	mov	r3, r8
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <xTaskIncrementTick+0xa8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	3018      	adds	r0, #24
 800e7fc:	f7ff f9e2 	bl	800dbc4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e800:	4643      	mov	r3, r8
 800e802:	682a      	ldr	r2, [r5, #0]
 800e804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e806:	4293      	cmp	r3, r2
 800e808:	d900      	bls.n	800e80c <xTaskIncrementTick+0xb4>
 800e80a:	602b      	str	r3, [r5, #0]
 800e80c:	0098      	lsls	r0, r3, #2
 800e80e:	18c0      	adds	r0, r0, r3
 800e810:	0080      	lsls	r0, r0, #2
 800e812:	4448      	add	r0, r9
 800e814:	4659      	mov	r1, fp
 800e816:	f7ff f9b1 	bl	800db7c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e81a:	4642      	mov	r2, r8
 800e81c:	6863      	ldr	r3, [r4, #4]
 800e81e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e822:	429a      	cmp	r2, r3
 800e824:	d3d3      	bcc.n	800e7ce <xTaskIncrementTick+0x76>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e826:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e828:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1d2      	bne.n	800e7d6 <xTaskIncrementTick+0x7e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e830:	3b01      	subs	r3, #1
 800e832:	603b      	str	r3, [r7, #0]
						break;
 800e834:	e7a9      	b.n	800e78a <xTaskIncrementTick+0x32>
							xNextTaskUnblockTime = xItemValue;
 800e836:	603b      	str	r3, [r7, #0]
							break;
 800e838:	e7a7      	b.n	800e78a <xTaskIncrementTick+0x32>
				taskSWITCH_DELAYED_LISTS();
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	68e2      	ldr	r2, [r4, #12]
 800e83e:	6022      	str	r2, [r4, #0]
 800e840:	60e3      	str	r3, [r4, #12]
 800e842:	696b      	ldr	r3, [r5, #20]
 800e844:	3301      	adds	r3, #1
 800e846:	616b      	str	r3, [r5, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <xTaskIncrementTick+0x100>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e850:	4f05      	ldr	r7, [pc, #20]	; (800e868 <xTaskIncrementTick+0x110>)
 800e852:	3b01      	subs	r3, #1
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	e792      	b.n	800e77e <xTaskIncrementTick+0x26>
 800e858:	f7ff fd7e 	bl	800e358 <prvResetNextTaskUnblockTime.part.2>
 800e85c:	e78e      	b.n	800e77c <xTaskIncrementTick+0x24>
 800e85e:	46c0      	nop			; (mov r8, r8)
 800e860:	200021c4 	.word	0x200021c4
 800e864:	20002144 	.word	0x20002144
 800e868:	200000d0 	.word	0x200000d0
 800e86c:	200021e0 	.word	0x200021e0

0800e870 <xTaskResumeAll>:
{
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	46ce      	mov	lr, r9
 800e874:	4647      	mov	r7, r8
	configASSERT( uxSchedulerSuspended );
 800e876:	4c2b      	ldr	r4, [pc, #172]	; (800e924 <xTaskResumeAll+0xb4>)
{
 800e878:	b580      	push	{r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e87a:	6923      	ldr	r3, [r4, #16]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <xTaskResumeAll+0x14>
 800e880:	b672      	cpsid	i
 800e882:	e7fe      	b.n	800e882 <xTaskResumeAll+0x12>
	taskENTER_CRITICAL();
 800e884:	f000 fdf4 	bl	800f470 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	6123      	str	r3, [r4, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e88e:	6923      	ldr	r3, [r4, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d12d      	bne.n	800e8f0 <xTaskResumeAll+0x80>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e894:	4d24      	ldr	r5, [pc, #144]	; (800e928 <xTaskResumeAll+0xb8>)
 800e896:	692b      	ldr	r3, [r5, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d029      	beq.n	800e8f0 <xTaskResumeAll+0x80>
					prvAddTaskToReadyList( pxTCB );
 800e89c:	4b23      	ldr	r3, [pc, #140]	; (800e92c <xTaskResumeAll+0xbc>)
 800e89e:	4699      	mov	r9, r3
						xYieldPending = pdTRUE;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4698      	mov	r8, r3
 800e8a4:	e01a      	b.n	800e8dc <xTaskResumeAll+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e8a6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e8a8:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8aa:	0030      	movs	r0, r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e8ac:	1d37      	adds	r7, r6, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8ae:	3018      	adds	r0, #24
 800e8b0:	f7ff f988 	bl	800dbc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e8b4:	0038      	movs	r0, r7
 800e8b6:	f7ff f985 	bl	800dbc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e8bc:	6822      	ldr	r2, [r4, #0]
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d900      	bls.n	800e8c4 <xTaskResumeAll+0x54>
 800e8c2:	6023      	str	r3, [r4, #0]
 800e8c4:	0098      	lsls	r0, r3, #2
 800e8c6:	18c0      	adds	r0, r0, r3
 800e8c8:	0080      	lsls	r0, r0, #2
 800e8ca:	4448      	add	r0, r9
 800e8cc:	0039      	movs	r1, r7
 800e8ce:	f7ff f955 	bl	800db7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8d2:	686b      	ldr	r3, [r5, #4]
 800e8d4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d211      	bcs.n	800e900 <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1e1      	bne.n	800e8a6 <xTaskResumeAll+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e8e2:	69a3      	ldr	r3, [r4, #24]
							xYieldPending = pdTRUE;
 800e8e4:	2501      	movs	r5, #1
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d110      	bne.n	800e90c <xTaskResumeAll+0x9c>
				if( xYieldPending == pdTRUE )
 800e8ea:	6864      	ldr	r4, [r4, #4]
 800e8ec:	2c01      	cmp	r4, #1
 800e8ee:	d00a      	beq.n	800e906 <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 800e8f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e8f2:	f000 fdc9 	bl	800f488 <vPortExitCritical>
}
 800e8f6:	0020      	movs	r0, r4
 800e8f8:	bc0c      	pop	{r2, r3}
 800e8fa:	4690      	mov	r8, r2
 800e8fc:	4699      	mov	r9, r3
 800e8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e900:	4643      	mov	r3, r8
 800e902:	6063      	str	r3, [r4, #4]
 800e904:	e7ea      	b.n	800e8dc <xTaskResumeAll+0x6c>
					taskYIELD_IF_USING_PREEMPTION();
 800e906:	f000 fda7 	bl	800f458 <vPortYield>
 800e90a:	e7f2      	b.n	800e8f2 <xTaskResumeAll+0x82>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e90c:	69a3      	ldr	r3, [r4, #24]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0eb      	beq.n	800e8ea <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800e912:	f7ff ff21 	bl	800e758 <xTaskIncrementTick>
 800e916:	2800      	cmp	r0, #0
 800e918:	d000      	beq.n	800e91c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
 800e91a:	6065      	str	r5, [r4, #4]
						--uxPendedTicks;
 800e91c:	69a3      	ldr	r3, [r4, #24]
 800e91e:	3b01      	subs	r3, #1
 800e920:	61a3      	str	r3, [r4, #24]
 800e922:	e7f3      	b.n	800e90c <xTaskResumeAll+0x9c>
 800e924:	200021c4 	.word	0x200021c4
 800e928:	20002144 	.word	0x20002144
 800e92c:	200021e0 	.word	0x200021e0

0800e930 <vTaskDelay>:
	{
 800e930:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e932:	2800      	cmp	r0, #0
 800e934:	d016      	beq.n	800e964 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e936:	4b0d      	ldr	r3, [pc, #52]	; (800e96c <vTaskDelay+0x3c>)
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	d001      	beq.n	800e942 <vTaskDelay+0x12>
 800e93e:	b672      	cpsid	i
 800e940:	e7fe      	b.n	800e940 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800e942:	691a      	ldr	r2, [r3, #16]
 800e944:	3201      	adds	r2, #1
 800e946:	611a      	str	r2, [r3, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e948:	4b09      	ldr	r3, [pc, #36]	; (800e970 <vTaskDelay+0x40>)
 800e94a:	689c      	ldr	r4, [r3, #8]
 800e94c:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e94e:	6858      	ldr	r0, [r3, #4]
 800e950:	3004      	adds	r0, #4
 800e952:	f7ff f937 	bl	800dbc4 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e956:	0020      	movs	r0, r4
 800e958:	f7ff fd0a 	bl	800e370 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e95c:	f7ff ff88 	bl	800e870 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e960:	2800      	cmp	r0, #0
 800e962:	d101      	bne.n	800e968 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e964:	f000 fd78 	bl	800f458 <vPortYield>
	}
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	46c0      	nop			; (mov r8, r8)
 800e96c:	200021c4 	.word	0x200021c4
 800e970:	20002144 	.word	0x20002144

0800e974 <prvIdleTask>:
{
 800e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e976:	4e15      	ldr	r6, [pc, #84]	; (800e9cc <prvIdleTask+0x58>)
 800e978:	4c15      	ldr	r4, [pc, #84]	; (800e9d0 <prvIdleTask+0x5c>)
 800e97a:	4f16      	ldr	r7, [pc, #88]	; (800e9d4 <prvIdleTask+0x60>)
 800e97c:	e007      	b.n	800e98e <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e97e:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e980:	6d35      	ldr	r5, [r6, #80]	; 0x50
	++uxSchedulerSuspended;
 800e982:	3301      	adds	r3, #1
 800e984:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e986:	f7ff ff73 	bl	800e870 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e98a:	2d00      	cmp	r5, #0
 800e98c:	d108      	bne.n	800e9a0 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e98e:	68e3      	ldr	r3, [r4, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1f4      	bne.n	800e97e <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d9f9      	bls.n	800e98e <prvIdleTask+0x1a>
				taskYIELD();
 800e99a:	f000 fd5d 	bl	800f458 <vPortYield>
 800e99e:	e7f6      	b.n	800e98e <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e9a0:	f000 fd66 	bl	800f470 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e9a4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800e9a6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e9a8:	1d28      	adds	r0, r5, #4
 800e9aa:	f7ff f90b 	bl	800dbc4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e9ae:	6933      	ldr	r3, [r6, #16]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	6133      	str	r3, [r6, #16]
					--uxTasksDeleted;
 800e9b4:	68e3      	ldr	r3, [r4, #12]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e9ba:	f000 fd65 	bl	800f488 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e9be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e9c0:	f000 fe50 	bl	800f664 <vPortFree>
		vPortFree( pxTCB );
 800e9c4:	0028      	movs	r0, r5
 800e9c6:	f000 fe4d 	bl	800f664 <vPortFree>
 800e9ca:	e7e0      	b.n	800e98e <prvIdleTask+0x1a>
 800e9cc:	20002144 	.word	0x20002144
 800e9d0:	200021c4 	.word	0x200021c4
 800e9d4:	200021e0 	.word	0x200021e0

0800e9d8 <uxTaskGetSystemState>:
	{
 800e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9da:	4647      	mov	r7, r8
 800e9dc:	46ce      	mov	lr, r9
 800e9de:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e9e0:	4a33      	ldr	r2, [pc, #204]	; (800eab0 <uxTaskGetSystemState+0xd8>)
	{
 800e9e2:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e9e4:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e9e6:	4f33      	ldr	r7, [pc, #204]	; (800eab4 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e9ec:	693b      	ldr	r3, [r7, #16]
	{
 800e9ee:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e9f0:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e9f2:	428b      	cmp	r3, r1
 800e9f4:	d82c      	bhi.n	800ea50 <uxTaskGetSystemState+0x78>
 800e9f6:	238c      	movs	r3, #140	; 0x8c
 800e9f8:	425b      	negs	r3, r3
 800e9fa:	4699      	mov	r9, r3
 800e9fc:	4c2e      	ldr	r4, [pc, #184]	; (800eab8 <uxTaskGetSystemState+0xe0>)
 800e9fe:	2300      	movs	r3, #0
 800ea00:	44a1      	add	r9, r4
 800ea02:	e002      	b.n	800ea0a <uxTaskGetSystemState+0x32>
 800ea04:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea06:	454c      	cmp	r4, r9
 800ea08:	d00d      	beq.n	800ea26 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea0a:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ea0c:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea0e:	2a00      	cmp	r2, #0
 800ea10:	d0f8      	beq.n	800ea04 <uxTaskGetSystemState+0x2c>
 800ea12:	0021      	movs	r1, r4
 800ea14:	2201      	movs	r2, #1
 800ea16:	f7ff fc4b 	bl	800e2b0 <prvListTaskWithinSingleList.part.1>
 800ea1a:	182d      	adds	r5, r5, r0
 800ea1c:	016b      	lsls	r3, r5, #5
 800ea1e:	3c14      	subs	r4, #20
 800ea20:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea22:	454c      	cmp	r4, r9
 800ea24:	d1f1      	bne.n	800ea0a <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ea26:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea28:	680b      	ldr	r3, [r1, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d121      	bne.n	800ea72 <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ea2e:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea30:	680b      	ldr	r3, [r1, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d127      	bne.n	800ea86 <uxTaskGetSystemState+0xae>
 800ea36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d12d      	bne.n	800ea98 <uxTaskGetSystemState+0xc0>
 800ea3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10d      	bne.n	800ea5e <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800ea42:	4643      	mov	r3, r8
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ea48:	f7f9 fc96 	bl	8008378 <ulMainGetRunTimeCounterValue>
 800ea4c:	4643      	mov	r3, r8
 800ea4e:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800ea50:	f7ff ff0e 	bl	800e870 <xTaskResumeAll>
	}
 800ea54:	0028      	movs	r0, r5
 800ea56:	bc0c      	pop	{r2, r3}
 800ea58:	4690      	mov	r8, r2
 800ea5a:	4699      	mov	r9, r3
 800ea5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea5e:	0039      	movs	r1, r7
 800ea60:	2203      	movs	r2, #3
 800ea62:	3164      	adds	r1, #100	; 0x64
 800ea64:	f7ff fc24 	bl	800e2b0 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800ea68:	4643      	mov	r3, r8
 800ea6a:	182d      	adds	r5, r5, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1eb      	bne.n	800ea48 <uxTaskGetSystemState+0x70>
 800ea70:	e7ee      	b.n	800ea50 <uxTaskGetSystemState+0x78>
 800ea72:	2202      	movs	r2, #2
 800ea74:	f7ff fc1c 	bl	800e2b0 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ea78:	68f9      	ldr	r1, [r7, #12]
 800ea7a:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea7c:	680b      	ldr	r3, [r1, #0]
 800ea7e:	0168      	lsls	r0, r5, #5
 800ea80:	1830      	adds	r0, r6, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0d7      	beq.n	800ea36 <uxTaskGetSystemState+0x5e>
 800ea86:	2202      	movs	r2, #2
 800ea88:	f7ff fc12 	bl	800e2b0 <prvListTaskWithinSingleList.part.1>
 800ea8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea8e:	182d      	adds	r5, r5, r0
 800ea90:	0168      	lsls	r0, r5, #5
 800ea92:	1830      	adds	r0, r6, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0d1      	beq.n	800ea3c <uxTaskGetSystemState+0x64>
 800ea98:	0039      	movs	r1, r7
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	3150      	adds	r1, #80	; 0x50
 800ea9e:	f7ff fc07 	bl	800e2b0 <prvListTaskWithinSingleList.part.1>
 800eaa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaa4:	182d      	adds	r5, r5, r0
 800eaa6:	0168      	lsls	r0, r5, #5
 800eaa8:	1830      	adds	r0, r6, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d0c9      	beq.n	800ea42 <uxTaskGetSystemState+0x6a>
 800eaae:	e7d6      	b.n	800ea5e <uxTaskGetSystemState+0x86>
 800eab0:	200021c4 	.word	0x200021c4
 800eab4:	20002144 	.word	0x20002144
 800eab8:	20002258 	.word	0x20002258

0800eabc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <vTaskSwitchContext+0x18>)
{
 800eabe:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eac0:	691a      	ldr	r2, [r3, #16]
 800eac2:	2a00      	cmp	r2, #0
 800eac4:	d002      	beq.n	800eacc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800eac6:	2201      	movs	r2, #1
 800eac8:	605a      	str	r2, [r3, #4]
}
 800eaca:	bd10      	pop	{r4, pc}
 800eacc:	f7ff fd3c 	bl	800e548 <vTaskSwitchContext.part.6>
 800ead0:	e7fb      	b.n	800eaca <vTaskSwitchContext+0xe>
 800ead2:	46c0      	nop			; (mov r8, r8)
 800ead4:	200021c4 	.word	0x200021c4

0800ead8 <vTaskPlaceOnEventList>:
{
 800ead8:	b570      	push	{r4, r5, r6, lr}
 800eada:	000d      	movs	r5, r1
	configASSERT( pxEventList );
 800eadc:	2800      	cmp	r0, #0
 800eade:	d00f      	beq.n	800eb00 <vTaskPlaceOnEventList+0x28>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eae0:	4c0c      	ldr	r4, [pc, #48]	; (800eb14 <vTaskPlaceOnEventList+0x3c>)
 800eae2:	6861      	ldr	r1, [r4, #4]
 800eae4:	3118      	adds	r1, #24
 800eae6:	f7ff f855 	bl	800db94 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eaea:	6860      	ldr	r0, [r4, #4]
 800eaec:	3004      	adds	r0, #4
 800eaee:	f7ff f869 	bl	800dbc4 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800eaf2:	1c6b      	adds	r3, r5, #1
 800eaf4:	d006      	beq.n	800eb04 <vTaskPlaceOnEventList+0x2c>
			xTimeToWake = xTickCount + xTicksToWait;
 800eaf6:	68a0      	ldr	r0, [r4, #8]
 800eaf8:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eafa:	f7ff fc39 	bl	800e370 <prvAddCurrentTaskToDelayedList>
}
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800eb00:	b672      	cpsid	i
 800eb02:	e7fe      	b.n	800eb02 <vTaskPlaceOnEventList+0x2a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb04:	0020      	movs	r0, r4
 800eb06:	6861      	ldr	r1, [r4, #4]
 800eb08:	3064      	adds	r0, #100	; 0x64
 800eb0a:	3104      	adds	r1, #4
 800eb0c:	f7ff f836 	bl	800db7c <vListInsertEnd>
 800eb10:	e7f5      	b.n	800eafe <vTaskPlaceOnEventList+0x26>
 800eb12:	46c0      	nop			; (mov r8, r8)
 800eb14:	20002144 	.word	0x20002144

0800eb18 <vTaskPlaceOnEventListRestricted>:
	{
 800eb18:	b570      	push	{r4, r5, r6, lr}
 800eb1a:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d101      	bne.n	800eb24 <vTaskPlaceOnEventListRestricted+0xc>
 800eb20:	b672      	cpsid	i
 800eb22:	e7fe      	b.n	800eb22 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb24:	4c06      	ldr	r4, [pc, #24]	; (800eb40 <vTaskPlaceOnEventListRestricted+0x28>)
 800eb26:	6861      	ldr	r1, [r4, #4]
 800eb28:	3118      	adds	r1, #24
 800eb2a:	f7ff f827 	bl	800db7c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb2e:	6860      	ldr	r0, [r4, #4]
 800eb30:	3004      	adds	r0, #4
 800eb32:	f7ff f847 	bl	800dbc4 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800eb36:	68a0      	ldr	r0, [r4, #8]
 800eb38:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eb3a:	f7ff fc19 	bl	800e370 <prvAddCurrentTaskToDelayedList>
	}
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	20002144 	.word	0x20002144

0800eb44 <xTaskRemoveFromEventList>:
{
 800eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800eb46:	68c3      	ldr	r3, [r0, #12]
 800eb48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800eb4a:	2c00      	cmp	r4, #0
 800eb4c:	d024      	beq.n	800eb98 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb4e:	0027      	movs	r7, r4
 800eb50:	3718      	adds	r7, #24
 800eb52:	0038      	movs	r0, r7
 800eb54:	f7ff f836 	bl	800dbc4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb58:	4d14      	ldr	r5, [pc, #80]	; (800ebac <xTaskRemoveFromEventList+0x68>)
 800eb5a:	692b      	ldr	r3, [r5, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d11d      	bne.n	800eb9c <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800eb60:	1d26      	adds	r6, r4, #4
 800eb62:	0030      	movs	r0, r6
 800eb64:	f7ff f82e 	bl	800dbc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb6a:	682a      	ldr	r2, [r5, #0]
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d900      	bls.n	800eb72 <xTaskRemoveFromEventList+0x2e>
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	0098      	lsls	r0, r3, #2
 800eb74:	18c0      	adds	r0, r0, r3
 800eb76:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <xTaskRemoveFromEventList+0x6c>)
 800eb78:	0080      	lsls	r0, r0, #2
 800eb7a:	0031      	movs	r1, r6
 800eb7c:	18c0      	adds	r0, r0, r3
 800eb7e:	f7fe fffd 	bl	800db7c <vListInsertEnd>
 800eb82:	4e0c      	ldr	r6, [pc, #48]	; (800ebb4 <xTaskRemoveFromEventList+0x70>)
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb84:	6873      	ldr	r3, [r6, #4]
 800eb86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800eb8a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d902      	bls.n	800eb96 <xTaskRemoveFromEventList+0x52>
		xYieldPending = pdTRUE;
 800eb90:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800eb92:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800eb94:	606b      	str	r3, [r5, #4]
}
 800eb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxUnblockedTCB );
 800eb98:	b672      	cpsid	i
 800eb9a:	e7fe      	b.n	800eb9a <xTaskRemoveFromEventList+0x56>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb9c:	4e05      	ldr	r6, [pc, #20]	; (800ebb4 <xTaskRemoveFromEventList+0x70>)
 800eb9e:	0039      	movs	r1, r7
 800eba0:	0030      	movs	r0, r6
 800eba2:	303c      	adds	r0, #60	; 0x3c
 800eba4:	f7fe ffea 	bl	800db7c <vListInsertEnd>
 800eba8:	e7ec      	b.n	800eb84 <xTaskRemoveFromEventList+0x40>
 800ebaa:	46c0      	nop			; (mov r8, r8)
 800ebac:	200021c4 	.word	0x200021c4
 800ebb0:	200021e0 	.word	0x200021e0
 800ebb4:	20002144 	.word	0x20002144

0800ebb8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d006      	beq.n	800ebca <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebbc:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <vTaskSetTimeOutState+0x18>)
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebc2:	4b04      	ldr	r3, [pc, #16]	; (800ebd4 <vTaskSetTimeOutState+0x1c>)
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	6043      	str	r3, [r0, #4]
}
 800ebc8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ebca:	b672      	cpsid	i
 800ebcc:	e7fe      	b.n	800ebcc <vTaskSetTimeOutState+0x14>
 800ebce:	46c0      	nop			; (mov r8, r8)
 800ebd0:	200021c4 	.word	0x200021c4
 800ebd4:	20002144 	.word	0x20002144

0800ebd8 <xTaskCheckForTimeOut>:
{
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	0004      	movs	r4, r0
 800ebdc:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d025      	beq.n	800ec2e <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800ebe2:	2900      	cmp	r1, #0
 800ebe4:	d021      	beq.n	800ec2a <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800ebe6:	f000 fc43 	bl	800f470 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ebea:	4f13      	ldr	r7, [pc, #76]	; (800ec38 <xTaskCheckForTimeOut+0x60>)
			if( *pxTicksToWait == portMAX_DELAY )
 800ebec:	6833      	ldr	r3, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800ebee:	68b9      	ldr	r1, [r7, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	d01e      	beq.n	800ec32 <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ebf4:	4a11      	ldr	r2, [pc, #68]	; (800ec3c <xTaskCheckForTimeOut+0x64>)
 800ebf6:	6825      	ldr	r5, [r4, #0]
 800ebf8:	6950      	ldr	r0, [r2, #20]
 800ebfa:	4694      	mov	ip, r2
 800ebfc:	6862      	ldr	r2, [r4, #4]
 800ebfe:	4285      	cmp	r5, r0
 800ec00:	d002      	beq.n	800ec08 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800ec02:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec04:	4291      	cmp	r1, r2
 800ec06:	d20c      	bcs.n	800ec22 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ec08:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800ec0a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ec0c:	4283      	cmp	r3, r0
 800ec0e:	d908      	bls.n	800ec22 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ec10:	1a5b      	subs	r3, r3, r1
 800ec12:	189b      	adds	r3, r3, r2
 800ec14:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec16:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800ec18:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec1a:	695b      	ldr	r3, [r3, #20]
 800ec1c:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800ec22:	f000 fc31 	bl	800f488 <vPortExitCritical>
}
 800ec26:	0028      	movs	r0, r5
 800ec28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800ec2a:	b672      	cpsid	i
 800ec2c:	e7fe      	b.n	800ec2c <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800ec2e:	b672      	cpsid	i
 800ec30:	e7fe      	b.n	800ec30 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 800ec32:	2500      	movs	r5, #0
 800ec34:	e7f5      	b.n	800ec22 <xTaskCheckForTimeOut+0x4a>
 800ec36:	46c0      	nop			; (mov r8, r8)
 800ec38:	20002144 	.word	0x20002144
 800ec3c:	200021c4 	.word	0x200021c4

0800ec40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ec40:	2201      	movs	r2, #1
 800ec42:	4b01      	ldr	r3, [pc, #4]	; (800ec48 <vTaskMissedYield+0x8>)
 800ec44:	605a      	str	r2, [r3, #4]
}
 800ec46:	4770      	bx	lr
 800ec48:	200021c4 	.word	0x200021c4

0800ec4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ec4c:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec4e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ec50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d004      	beq.n	800ec60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec56:	4b04      	ldr	r3, [pc, #16]	; (800ec68 <xTaskGetSchedulerState+0x1c>)
 800ec58:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec5a:	4243      	negs	r3, r0
 800ec5c:	4158      	adcs	r0, r3
 800ec5e:	0040      	lsls	r0, r0, #1
	}
 800ec60:	4770      	bx	lr
 800ec62:	46c0      	nop			; (mov r8, r8)
 800ec64:	20002144 	.word	0x20002144
 800ec68:	200021c4 	.word	0x200021c4

0800ec6c <vTaskPriorityInherit>:
	{
 800ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ec70:	d018      	beq.n	800eca4 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec72:	4d17      	ldr	r5, [pc, #92]	; (800ecd0 <vTaskPriorityInherit+0x64>)
 800ec74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ec76:	686b      	ldr	r3, [r5, #4]
 800ec78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d212      	bcs.n	800eca4 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec7e:	6983      	ldr	r3, [r0, #24]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	db04      	blt.n	800ec8e <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec84:	686b      	ldr	r3, [r5, #4]
 800ec86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ec88:	2307      	movs	r3, #7
 800ec8a:	1a5b      	subs	r3, r3, r1
 800ec8c:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ec8e:	0093      	lsls	r3, r2, #2
 800ec90:	189b      	adds	r3, r3, r2
 800ec92:	4e10      	ldr	r6, [pc, #64]	; (800ecd4 <vTaskPriorityInherit+0x68>)
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	6962      	ldr	r2, [r4, #20]
 800ec98:	18f3      	adds	r3, r6, r3
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d003      	beq.n	800eca6 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec9e:	686b      	ldr	r3, [r5, #4]
 800eca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eca6:	1d27      	adds	r7, r4, #4
 800eca8:	0038      	movs	r0, r7
 800ecaa:	f7fe ff8b 	bl	800dbc4 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecae:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800ecb0:	4a09      	ldr	r2, [pc, #36]	; (800ecd8 <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ecb4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecb6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ecb8:	428b      	cmp	r3, r1
 800ecba:	d900      	bls.n	800ecbe <vTaskPriorityInherit+0x52>
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	0098      	lsls	r0, r3, #2
 800ecc0:	18c0      	adds	r0, r0, r3
 800ecc2:	0080      	lsls	r0, r0, #2
 800ecc4:	1830      	adds	r0, r6, r0
 800ecc6:	0039      	movs	r1, r7
 800ecc8:	f7fe ff58 	bl	800db7c <vListInsertEnd>
	}
 800eccc:	e7ea      	b.n	800eca4 <vTaskPriorityInherit+0x38>
 800ecce:	46c0      	nop			; (mov r8, r8)
 800ecd0:	20002144 	.word	0x20002144
 800ecd4:	200021e0 	.word	0x200021e0
 800ecd8:	200021c4 	.word	0x200021c4

0800ecdc <xTaskPriorityDisinherit>:
	{
 800ecdc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d005      	beq.n	800ecee <xTaskPriorityDisinherit+0x12>
			configASSERT( pxTCB == pxCurrentTCB );
 800ece2:	4b16      	ldr	r3, [pc, #88]	; (800ed3c <xTaskPriorityDisinherit+0x60>)
 800ece4:	685c      	ldr	r4, [r3, #4]
 800ece6:	4284      	cmp	r4, r0
 800ece8:	d003      	beq.n	800ecf2 <xTaskPriorityDisinherit+0x16>
 800ecea:	b672      	cpsid	i
 800ecec:	e7fe      	b.n	800ecec <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
 800ecee:	2000      	movs	r0, #0
	}
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800ecf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <xTaskPriorityDisinherit+0x20>
 800ecf8:	b672      	cpsid	i
 800ecfa:	e7fe      	b.n	800ecfa <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ecfe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ed00:	3b01      	subs	r3, #1
 800ed02:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed04:	428a      	cmp	r2, r1
 800ed06:	d0f2      	beq.n	800ecee <xTaskPriorityDisinherit+0x12>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1f0      	bne.n	800ecee <xTaskPriorityDisinherit+0x12>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed0c:	1d25      	adds	r5, r4, #4
 800ed0e:	0028      	movs	r0, r5
 800ed10:	f7fe ff58 	bl	800dbc4 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed14:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed18:	1ad2      	subs	r2, r2, r3
 800ed1a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed1c:	4a08      	ldr	r2, [pc, #32]	; (800ed40 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed1e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ed20:	6811      	ldr	r1, [r2, #0]
 800ed22:	428b      	cmp	r3, r1
 800ed24:	d900      	bls.n	800ed28 <xTaskPriorityDisinherit+0x4c>
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	2014      	movs	r0, #20
 800ed2a:	4358      	muls	r0, r3
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <xTaskPriorityDisinherit+0x68>)
 800ed2e:	0029      	movs	r1, r5
 800ed30:	18c0      	adds	r0, r0, r3
 800ed32:	f7fe ff23 	bl	800db7c <vListInsertEnd>
					xReturn = pdTRUE;
 800ed36:	2001      	movs	r0, #1
		return xReturn;
 800ed38:	e7da      	b.n	800ecf0 <xTaskPriorityDisinherit+0x14>
 800ed3a:	46c0      	nop			; (mov r8, r8)
 800ed3c:	20002144 	.word	0x20002144
 800ed40:	200021c4 	.word	0x200021c4
 800ed44:	200021e0 	.word	0x200021e0

0800ed48 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ed48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed4a:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ed4c:	2600      	movs	r6, #0
	{
 800ed4e:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ed50:	4b27      	ldr	r3, [pc, #156]	; (800edf0 <vTaskList+0xa8>)
	{
 800ed52:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ed54:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ed56:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ed58:	9202      	str	r2, [sp, #8]
	{
 800ed5a:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ed5c:	6918      	ldr	r0, [r3, #16]
 800ed5e:	0140      	lsls	r0, r0, #5
 800ed60:	f000 fc04 	bl	800f56c <pvPortMalloc>
 800ed64:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ed66:	d03f      	beq.n	800ede8 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ed68:	2200      	movs	r2, #0
 800ed6a:	9902      	ldr	r1, [sp, #8]
 800ed6c:	f7ff fe34 	bl	800e9d8 <uxTaskGetSystemState>
 800ed70:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ed72:	9603      	str	r6, [sp, #12]
 800ed74:	9b03      	ldr	r3, [sp, #12]
 800ed76:	9a02      	ldr	r2, [sp, #8]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d932      	bls.n	800ede2 <vTaskList+0x9a>
 800ed7c:	4b1d      	ldr	r3, [pc, #116]	; (800edf4 <vTaskList+0xac>)
 800ed7e:	4e1e      	ldr	r6, [pc, #120]	; (800edf8 <vTaskList+0xb0>)
 800ed80:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ed82:	9b03      	ldr	r3, [sp, #12]
 800ed84:	2700      	movs	r7, #0
 800ed86:	015b      	lsls	r3, r3, #5
 800ed88:	18eb      	adds	r3, r5, r3
 800ed8a:	7b1b      	ldrb	r3, [r3, #12]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d801      	bhi.n	800ed98 <vTaskList+0x50>
 800ed94:	4443      	add	r3, r8
 800ed96:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	0020      	movs	r0, r4
 800ed9c:	015b      	lsls	r3, r3, #5
 800ed9e:	18eb      	adds	r3, r5, r3
 800eda0:	6859      	ldr	r1, [r3, #4]
 800eda2:	f7ff fa6d 	bl	800e280 <prvWriteNameToBuffer>
 800eda6:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800eda8:	9b03      	ldr	r3, [sp, #12]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	9903      	ldr	r1, [sp, #12]
 800edae:	015b      	lsls	r3, r3, #5
 800edb0:	0149      	lsls	r1, r1, #5
 800edb2:	1869      	adds	r1, r5, r1
 800edb4:	6889      	ldr	r1, [r1, #8]
 800edb6:	18eb      	adds	r3, r5, r3
 800edb8:	0152      	lsls	r2, r2, #5
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	18aa      	adds	r2, r5, r2
 800edbe:	9101      	str	r1, [sp, #4]
 800edc0:	8b92      	ldrh	r2, [r2, #28]
 800edc2:	0031      	movs	r1, r6
 800edc4:	9200      	str	r2, [sp, #0]
 800edc6:	003a      	movs	r2, r7
 800edc8:	f004 fac0 	bl	801334c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800edcc:	0020      	movs	r0, r4
 800edce:	f7f1 f9a3 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800edd2:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800edd4:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800edd6:	3301      	adds	r3, #1
 800edd8:	9303      	str	r3, [sp, #12]
 800edda:	9a03      	ldr	r2, [sp, #12]
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d3cf      	bcc.n	800ed82 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ede2:	0028      	movs	r0, r5
 800ede4:	f000 fc3e 	bl	800f664 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ede8:	b004      	add	sp, #16
 800edea:	bc04      	pop	{r2}
 800edec:	4690      	mov	r8, r2
 800edee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf0:	20002144 	.word	0x20002144
 800edf4:	08017dd4 	.word	0x08017dd4
 800edf8:	0801a830 	.word	0x0801a830

0800edfc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800edfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfe:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ee00:	2600      	movs	r6, #0
	{
 800ee02:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ee04:	4b28      	ldr	r3, [pc, #160]	; (800eea8 <vTaskGetRunTimeStats+0xac>)
	{
 800ee06:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ee08:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ee0a:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ee0c:	9201      	str	r2, [sp, #4]
	{
 800ee0e:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ee10:	6918      	ldr	r0, [r3, #16]
 800ee12:	0140      	lsls	r0, r0, #5
 800ee14:	f000 fbaa 	bl	800f56c <pvPortMalloc>
 800ee18:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ee1a:	d040      	beq.n	800ee9e <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ee1c:	9901      	ldr	r1, [sp, #4]
 800ee1e:	aa03      	add	r2, sp, #12
 800ee20:	f7ff fdda 	bl	800e9d8 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ee24:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ee26:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ee28:	9803      	ldr	r0, [sp, #12]
 800ee2a:	f7f1 f991 	bl	8000150 <__udivsi3>
 800ee2e:	1e01      	subs	r1, r0, #0
 800ee30:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ee32:	d031      	beq.n	800ee98 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ee34:	9602      	str	r6, [sp, #8]
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	9a01      	ldr	r2, [sp, #4]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d92c      	bls.n	800ee98 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ee3e:	4b1b      	ldr	r3, [pc, #108]	; (800eeac <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ee40:	4f1b      	ldr	r7, [pc, #108]	; (800eeb0 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ee42:	4698      	mov	r8, r3
 800ee44:	e00f      	b.n	800ee66 <vTaskGetRunTimeStats+0x6a>
 800ee46:	0033      	movs	r3, r6
 800ee48:	4641      	mov	r1, r8
 800ee4a:	f004 fa7f 	bl	801334c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800ee4e:	0020      	movs	r0, r4
 800ee50:	f7f1 f962 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800ee54:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ee56:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ee58:	3301      	adds	r3, #1
 800ee5a:	9302      	str	r3, [sp, #8]
 800ee5c:	9a02      	ldr	r2, [sp, #8]
 800ee5e:	9b01      	ldr	r3, [sp, #4]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d219      	bcs.n	800ee98 <vTaskGetRunTimeStats+0x9c>
 800ee64:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ee66:	9b02      	ldr	r3, [sp, #8]
 800ee68:	015b      	lsls	r3, r3, #5
 800ee6a:	18eb      	adds	r3, r5, r3
 800ee6c:	6998      	ldr	r0, [r3, #24]
 800ee6e:	f7f1 f96f 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee72:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ee74:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee76:	015b      	lsls	r3, r3, #5
 800ee78:	18eb      	adds	r3, r5, r3
 800ee7a:	6859      	ldr	r1, [r3, #4]
 800ee7c:	0020      	movs	r0, r4
 800ee7e:	f7ff f9ff 	bl	800e280 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ee82:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee84:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ee86:	015b      	lsls	r3, r3, #5
 800ee88:	18eb      	adds	r3, r5, r3
 800ee8a:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800ee8c:	2e00      	cmp	r6, #0
 800ee8e:	d1da      	bne.n	800ee46 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ee90:	0039      	movs	r1, r7
 800ee92:	f004 fa5b 	bl	801334c <sprintf>
 800ee96:	e7da      	b.n	800ee4e <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ee98:	0028      	movs	r0, r5
 800ee9a:	f000 fbe3 	bl	800f664 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee9e:	b004      	add	sp, #16
 800eea0:	bc04      	pop	{r2}
 800eea2:	4690      	mov	r8, r2
 800eea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea6:	46c0      	nop			; (mov r8, r8)
 800eea8:	20002144 	.word	0x20002144
 800eeac:	0801a840 	.word	0x0801a840
 800eeb0:	0801a84c 	.word	0x0801a84c

0800eeb4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eeb4:	4b04      	ldr	r3, [pc, #16]	; (800eec8 <pvTaskIncrementMutexHeldCount+0x14>)
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	2a00      	cmp	r2, #0
 800eeba:	d003      	beq.n	800eec4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eebc:	6859      	ldr	r1, [r3, #4]
 800eebe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800eec0:	3201      	adds	r2, #1
 800eec2:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eec4:	6858      	ldr	r0, [r3, #4]
	}
 800eec6:	4770      	bx	lr
 800eec8:	20002144 	.word	0x20002144

0800eecc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	0006      	movs	r6, r0
 800eed0:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800eed2:	f000 facd 	bl	800f470 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800eed6:	4c1c      	ldr	r4, [pc, #112]	; (800ef48 <ulTaskNotifyTake+0x7c>)
 800eed8:	6863      	ldr	r3, [r4, #4]
 800eeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d105      	bne.n	800eeec <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800eee0:	2101      	movs	r1, #1
 800eee2:	6862      	ldr	r2, [r4, #4]
 800eee4:	335c      	adds	r3, #92	; 0x5c
 800eee6:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800eee8:	2d00      	cmp	r5, #0
 800eeea:	d119      	bne.n	800ef20 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eeec:	f000 facc 	bl	800f488 <vPortExitCritical>

		taskENTER_CRITICAL();
 800eef0:	f000 fabe 	bl	800f470 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800eef8:	2d00      	cmp	r5, #0
 800eefa:	d005      	beq.n	800ef08 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800eefc:	2e00      	cmp	r6, #0
 800eefe:	d10b      	bne.n	800ef18 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ef00:	6862      	ldr	r2, [r4, #4]
 800ef02:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ef04:	3b01      	subs	r3, #1
 800ef06:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ef08:	235c      	movs	r3, #92	; 0x5c
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	6862      	ldr	r2, [r4, #4]
 800ef0e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ef10:	f000 faba 	bl	800f488 <vPortExitCritical>

		return ulReturn;
	}
 800ef14:	0028      	movs	r0, r5
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ef18:	2200      	movs	r2, #0
 800ef1a:	6863      	ldr	r3, [r4, #4]
 800ef1c:	659a      	str	r2, [r3, #88]	; 0x58
 800ef1e:	e7f3      	b.n	800ef08 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ef20:	6860      	ldr	r0, [r4, #4]
 800ef22:	3004      	adds	r0, #4
 800ef24:	f7fe fe4e 	bl	800dbc4 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ef28:	1c6b      	adds	r3, r5, #1
 800ef2a:	d006      	beq.n	800ef3a <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800ef2c:	68a0      	ldr	r0, [r4, #8]
 800ef2e:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ef30:	f7ff fa1e 	bl	800e370 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ef34:	f000 fa90 	bl	800f458 <vPortYield>
 800ef38:	e7d8      	b.n	800eeec <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ef3a:	0020      	movs	r0, r4
 800ef3c:	6861      	ldr	r1, [r4, #4]
 800ef3e:	3064      	adds	r0, #100	; 0x64
 800ef40:	3104      	adds	r1, #4
 800ef42:	f7fe fe1b 	bl	800db7c <vListInsertEnd>
 800ef46:	e7f5      	b.n	800ef34 <ulTaskNotifyTake+0x68>
 800ef48:	20002144 	.word	0x20002144

0800ef4c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	0004      	movs	r4, r0
 800ef50:	000e      	movs	r6, r1
 800ef52:	0015      	movs	r5, r2
 800ef54:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d01b      	beq.n	800ef92 <xTaskGenericNotify+0x46>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ef5a:	f000 fa89 	bl	800f470 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef5e:	2f00      	cmp	r7, #0
 800ef60:	d001      	beq.n	800ef66 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef64:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ef66:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800ef68:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ef6a:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800ef6c:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ef6e:	b2db      	uxtb	r3, r3

			switch( eAction )
 800ef70:	2d02      	cmp	r5, #2
 800ef72:	d010      	beq.n	800ef96 <xTaskGenericNotify+0x4a>
 800ef74:	d934      	bls.n	800efe0 <xTaskGenericNotify+0x94>
 800ef76:	2d03      	cmp	r5, #3
 800ef78:	d003      	beq.n	800ef82 <xTaskGenericNotify+0x36>
 800ef7a:	2d04      	cmp	r5, #4
 800ef7c:	d102      	bne.n	800ef84 <xTaskGenericNotify+0x38>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d02c      	beq.n	800efdc <xTaskGenericNotify+0x90>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef82:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d00a      	beq.n	800ef9e <xTaskGenericNotify+0x52>
 800ef88:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ef8a:	f000 fa7d 	bl	800f488 <vPortExitCritical>

		return xReturn;
	}
 800ef8e:	0020      	movs	r0, r4
 800ef90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 800ef92:	b672      	cpsid	i
 800ef94:	e7fe      	b.n	800ef94 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 800ef96:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ef98:	3201      	adds	r2, #1
 800ef9a:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800ef9c:	e7f2      	b.n	800ef84 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ef9e:	1d25      	adds	r5, r4, #4
 800efa0:	0028      	movs	r0, r5
 800efa2:	f7fe fe0f 	bl	800dbc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800efa6:	4a11      	ldr	r2, [pc, #68]	; (800efec <xTaskGenericNotify+0xa0>)
 800efa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800efaa:	6811      	ldr	r1, [r2, #0]
 800efac:	428b      	cmp	r3, r1
 800efae:	d900      	bls.n	800efb2 <xTaskGenericNotify+0x66>
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	2014      	movs	r0, #20
 800efb4:	4358      	muls	r0, r3
 800efb6:	4b0e      	ldr	r3, [pc, #56]	; (800eff0 <xTaskGenericNotify+0xa4>)
 800efb8:	0029      	movs	r1, r5
 800efba:	18c0      	adds	r0, r0, r3
 800efbc:	f7fe fdde 	bl	800db7c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800efc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <xTaskGenericNotify+0x7e>
 800efc6:	b672      	cpsid	i
 800efc8:	e7fe      	b.n	800efc8 <xTaskGenericNotify+0x7c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efca:	4b0a      	ldr	r3, [pc, #40]	; (800eff4 <xTaskGenericNotify+0xa8>)
 800efcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d9d8      	bls.n	800ef88 <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 800efd6:	f000 fa3f 	bl	800f458 <vPortYield>
 800efda:	e7d5      	b.n	800ef88 <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 800efdc:	2400      	movs	r4, #0
 800efde:	e7d4      	b.n	800ef8a <xTaskGenericNotify+0x3e>
			switch( eAction )
 800efe0:	2d01      	cmp	r5, #1
 800efe2:	d1cf      	bne.n	800ef84 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800efe4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800efe6:	4316      	orrs	r6, r2
 800efe8:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800efea:	e7cb      	b.n	800ef84 <xTaskGenericNotify+0x38>
 800efec:	200021c4 	.word	0x200021c4
 800eff0:	200021e0 	.word	0x200021e0
 800eff4:	20002144 	.word	0x20002144

0800eff8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eff8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800effa:	f000 fa39 	bl	800f470 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800effe:	4c10      	ldr	r4, [pc, #64]	; (800f040 <prvCheckForValidListAndQueue+0x48>)
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f006:	f000 fa3f 	bl	800f488 <vPortExitCritical>
}
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800f00c:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800f00e:	1d26      	adds	r6, r4, #4
 800f010:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800f012:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800f014:	f7fe fda2 	bl	800db5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f018:	0028      	movs	r0, r5
 800f01a:	f7fe fd9f 	bl	800db5c <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f01e:	2200      	movs	r2, #0
 800f020:	2110      	movs	r1, #16
 800f022:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800f024:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800f026:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f028:	f7fe feae 	bl	800dd88 <xQueueGenericCreate>
 800f02c:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800f02e:	2800      	cmp	r0, #0
 800f030:	d003      	beq.n	800f03a <prvCheckForValidListAndQueue+0x42>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f032:	4904      	ldr	r1, [pc, #16]	; (800f044 <prvCheckForValidListAndQueue+0x4c>)
 800f034:	f7ff f8f4 	bl	800e220 <vQueueAddToRegistry>
 800f038:	e7e5      	b.n	800f006 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800f03a:	b672      	cpsid	i
 800f03c:	e7fe      	b.n	800f03c <prvCheckForValidListAndQueue+0x44>
 800f03e:	46c0      	nop			; (mov r8, r8)
 800f040:	2000226c 	.word	0x2000226c
 800f044:	0801a858 	.word	0x0801a858

0800f048 <prvInsertTimerInActiveList>:
{
 800f048:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f04a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f04c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800f04e:	4291      	cmp	r1, r2
 800f050:	d806      	bhi.n	800f060 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f052:	1ad2      	subs	r2, r2, r3
 800f054:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800f056:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f058:	429a      	cmp	r2, r3
 800f05a:	d30d      	bcc.n	800f078 <prvInsertTimerInActiveList+0x30>
}
 800f05c:	0020      	movs	r0, r4
 800f05e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f060:	429a      	cmp	r2, r3
 800f062:	d202      	bcs.n	800f06a <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800f064:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f066:	4299      	cmp	r1, r3
 800f068:	d2f8      	bcs.n	800f05c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f06a:	4b07      	ldr	r3, [pc, #28]	; (800f088 <prvInsertTimerInActiveList+0x40>)
 800f06c:	1d01      	adds	r1, r0, #4
 800f06e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f070:	f7fe fd90 	bl	800db94 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f074:	2400      	movs	r4, #0
 800f076:	e7f1      	b.n	800f05c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f078:	4b03      	ldr	r3, [pc, #12]	; (800f088 <prvInsertTimerInActiveList+0x40>)
 800f07a:	1d01      	adds	r1, r0, #4
 800f07c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f07e:	f7fe fd89 	bl	800db94 <vListInsert>
 800f082:	2400      	movs	r4, #0
 800f084:	e7ea      	b.n	800f05c <prvInsertTimerInActiveList+0x14>
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	2000226c 	.word	0x2000226c

0800f08c <xTimerCreateTimerTask>:
{
 800f08c:	b500      	push	{lr}
 800f08e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f090:	f7ff ffb2 	bl	800eff8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f094:	4b0a      	ldr	r3, [pc, #40]	; (800f0c0 <xTimerCreateTimerTask+0x34>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00d      	beq.n	800f0b8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f09c:	2300      	movs	r3, #0
 800f09e:	9303      	str	r3, [sp, #12]
 800f0a0:	9302      	str	r3, [sp, #8]
 800f0a2:	9301      	str	r3, [sp, #4]
 800f0a4:	3303      	adds	r3, #3
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	22a0      	movs	r2, #160	; 0xa0
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4905      	ldr	r1, [pc, #20]	; (800f0c4 <xTimerCreateTimerTask+0x38>)
 800f0ae:	4806      	ldr	r0, [pc, #24]	; (800f0c8 <xTimerCreateTimerTask+0x3c>)
 800f0b0:	f7ff faa2 	bl	800e5f8 <xTaskGenericCreate>
	configASSERT( xReturn );
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d101      	bne.n	800f0bc <xTimerCreateTimerTask+0x30>
 800f0b8:	b672      	cpsid	i
 800f0ba:	e7fe      	b.n	800f0ba <xTimerCreateTimerTask+0x2e>
}
 800f0bc:	b005      	add	sp, #20
 800f0be:	bd00      	pop	{pc}
 800f0c0:	2000226c 	.word	0x2000226c
 800f0c4:	0801a860 	.word	0x0801a860
 800f0c8:	0800f1d5 	.word	0x0800f1d5

0800f0cc <xTimerCreate>:
{
 800f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ce:	46c6      	mov	lr, r8
 800f0d0:	000d      	movs	r5, r1
 800f0d2:	b500      	push	{lr}
 800f0d4:	4680      	mov	r8, r0
 800f0d6:	0017      	movs	r7, r2
 800f0d8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f0da:	2900      	cmp	r1, #0
 800f0dc:	d014      	beq.n	800f108 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f0de:	202c      	movs	r0, #44	; 0x2c
 800f0e0:	f000 fa44 	bl	800f56c <pvPortMalloc>
 800f0e4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f0e6:	d00b      	beq.n	800f100 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f0e8:	f7ff ff86 	bl	800eff8 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f0ec:	4643      	mov	r3, r8
 800f0ee:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f0f0:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f0f2:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f0f4:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f0f6:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f0f8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f0fa:	1d20      	adds	r0, r4, #4
 800f0fc:	f7fe fd3a 	bl	800db74 <vListInitialiseItem>
}
 800f100:	0020      	movs	r0, r4
 800f102:	bc04      	pop	{r2}
 800f104:	4690      	mov	r8, r2
 800f106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f108:	b672      	cpsid	i
 800f10a:	e7fe      	b.n	800f10a <xTimerCreate+0x3e>

0800f10c <xTimerGenericCommand>:
{
 800f10c:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800f10e:	4d13      	ldr	r5, [pc, #76]	; (800f15c <xTimerGenericCommand+0x50>)
{
 800f110:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800f112:	682c      	ldr	r4, [r5, #0]
{
 800f114:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800f116:	2c00      	cmp	r4, #0
 800f118:	d017      	beq.n	800f14a <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800f11a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f11c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f11e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f120:	2905      	cmp	r1, #5
 800f122:	dc0a      	bgt.n	800f13a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f124:	f7ff fd92 	bl	800ec4c <xTaskGetSchedulerState>
 800f128:	2802      	cmp	r0, #2
 800f12a:	d010      	beq.n	800f14e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f12c:	6828      	ldr	r0, [r5, #0]
 800f12e:	2300      	movs	r3, #0
 800f130:	2200      	movs	r2, #0
 800f132:	4669      	mov	r1, sp
 800f134:	f7fe fe64 	bl	800de00 <xQueueGenericSend>
 800f138:	e005      	b.n	800f146 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f13a:	2300      	movs	r3, #0
 800f13c:	0032      	movs	r2, r6
 800f13e:	4669      	mov	r1, sp
 800f140:	0020      	movs	r0, r4
 800f142:	f7fe fef9 	bl	800df38 <xQueueGenericSendFromISR>
}
 800f146:	b004      	add	sp, #16
 800f148:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800f14a:	2000      	movs	r0, #0
	return xReturn;
 800f14c:	e7fb      	b.n	800f146 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f14e:	6828      	ldr	r0, [r5, #0]
 800f150:	2300      	movs	r3, #0
 800f152:	9a08      	ldr	r2, [sp, #32]
 800f154:	4669      	mov	r1, sp
 800f156:	f7fe fe53 	bl	800de00 <xQueueGenericSend>
 800f15a:	e7f4      	b.n	800f146 <xTimerGenericCommand+0x3a>
 800f15c:	2000226c 	.word	0x2000226c

0800f160 <prvSwitchTimerLists>:
{
 800f160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f162:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f164:	2300      	movs	r3, #0
{
 800f166:	b500      	push	{lr}
 800f168:	4e19      	ldr	r6, [pc, #100]	; (800f1d0 <prvSwitchTimerLists+0x70>)
 800f16a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f16c:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f16e:	e00c      	b.n	800f18a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f170:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f172:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f174:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f176:	1d25      	adds	r5, r4, #4
 800f178:	0028      	movs	r0, r5
 800f17a:	f7fe fd23 	bl	800dbc4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f180:	0020      	movs	r0, r4
 800f182:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f184:	69e3      	ldr	r3, [r4, #28]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d00a      	beq.n	800f1a0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f18a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	2a00      	cmp	r2, #0
 800f190:	d1ee      	bne.n	800f170 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800f192:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800f194:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800f196:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800f198:	b002      	add	sp, #8
 800f19a:	bc04      	pop	{r2}
 800f19c:	4690      	mov	r8, r2
 800f19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f1a0:	69a3      	ldr	r3, [r4, #24]
 800f1a2:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f1a4:	429f      	cmp	r7, r3
 800f1a6:	d206      	bcs.n	800f1b6 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f1a8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1aa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1ac:	0029      	movs	r1, r5
 800f1ae:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f1b0:	f7fe fcf0 	bl	800db94 <vListInsert>
 800f1b4:	e7e9      	b.n	800f18a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1b6:	4643      	mov	r3, r8
 800f1b8:	003a      	movs	r2, r7
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	2100      	movs	r1, #0
 800f1be:	2300      	movs	r3, #0
 800f1c0:	0020      	movs	r0, r4
 800f1c2:	f7ff ffa3 	bl	800f10c <xTimerGenericCommand>
				configASSERT( xResult );
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d1df      	bne.n	800f18a <prvSwitchTimerLists+0x2a>
 800f1ca:	b672      	cpsid	i
 800f1cc:	e7fe      	b.n	800f1cc <prvSwitchTimerLists+0x6c>
 800f1ce:	46c0      	nop			; (mov r8, r8)
 800f1d0:	2000226c 	.word	0x2000226c

0800f1d4 <prvTimerTask>:
{
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1d8:	4646      	mov	r6, r8
 800f1da:	46d6      	mov	lr, sl
 800f1dc:	464f      	mov	r7, r9
 800f1de:	4698      	mov	r8, r3
 800f1e0:	b5c0      	push	{r6, r7, lr}
 800f1e2:	4d65      	ldr	r5, [pc, #404]	; (800f378 <prvTimerTask+0x1a4>)
 800f1e4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	2a00      	cmp	r2, #0
 800f1ec:	d04f      	beq.n	800f28e <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f1f2:	f7ff fa9d 	bl	800e730 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f1f6:	f7ff faa3 	bl	800e740 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f1fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f1fc:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f1fe:	4283      	cmp	r3, r0
 800f200:	d84d      	bhi.n	800f29e <prvTimerTask+0xca>
	xLastTime = xTimeNow;
 800f202:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f204:	4287      	cmp	r7, r0
 800f206:	d960      	bls.n	800f2ca <prvTimerTask+0xf6>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f208:	1b39      	subs	r1, r7, r4
 800f20a:	6828      	ldr	r0, [r5, #0]
 800f20c:	f7ff f81a 	bl	800e244 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f210:	f7ff fb2e 	bl	800e870 <xTaskResumeAll>
 800f214:	2800      	cmp	r0, #0
 800f216:	d055      	beq.n	800f2c4 <prvTimerTask+0xf0>
 800f218:	2684      	movs	r6, #132	; 0x84
 800f21a:	00b6      	lsls	r6, r6, #2
 800f21c:	27c7      	movs	r7, #199	; 0xc7
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f21e:	2300      	movs	r3, #0
 800f220:	2200      	movs	r2, #0
 800f222:	a904      	add	r1, sp, #16
 800f224:	6828      	ldr	r0, [r5, #0]
 800f226:	f7fe ff09 	bl	800e03c <xQueueGenericReceive>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d0db      	beq.n	800f1e6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	9c06      	ldr	r4, [sp, #24]
 800f232:	9302      	str	r3, [sp, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	da0b      	bge.n	800f250 <prvTimerTask+0x7c>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f238:	9b07      	ldr	r3, [sp, #28]
 800f23a:	0020      	movs	r0, r4
 800f23c:	9302      	str	r3, [sp, #8]
 800f23e:	9b05      	ldr	r3, [sp, #20]
 800f240:	9902      	ldr	r1, [sp, #8]
 800f242:	9303      	str	r3, [sp, #12]
 800f244:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f246:	9b04      	ldr	r3, [sp, #16]
 800f248:	9302      	str	r3, [sp, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	dbe7      	blt.n	800f21e <prvTimerTask+0x4a>
 800f24e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f250:	6963      	ldr	r3, [r4, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d002      	beq.n	800f25c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f256:	1d20      	adds	r0, r4, #4
 800f258:	f7fe fcb4 	bl	800dbc4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f25c:	f7ff fa70 	bl	800e740 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f260:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f262:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800f264:	4298      	cmp	r0, r3
 800f266:	d320      	bcc.n	800f2aa <prvTimerTask+0xd6>
	xLastTime = xTimeNow;
 800f268:	464b      	mov	r3, r9
 800f26a:	636b      	str	r3, [r5, #52]	; 0x34
 800f26c:	9b04      	ldr	r3, [sp, #16]
 800f26e:	2b09      	cmp	r3, #9
 800f270:	d8d5      	bhi.n	800f21e <prvTimerTask+0x4a>
 800f272:	4642      	mov	r2, r8
 800f274:	409a      	lsls	r2, r3
 800f276:	0013      	movs	r3, r2
 800f278:	4032      	ands	r2, r6
 800f27a:	4692      	mov	sl, r2
 800f27c:	d15a      	bne.n	800f334 <prvTimerTask+0x160>
 800f27e:	421f      	tst	r7, r3
 800f280:	d132      	bne.n	800f2e8 <prvTimerTask+0x114>
 800f282:	069b      	lsls	r3, r3, #26
 800f284:	d5cb      	bpl.n	800f21e <prvTimerTask+0x4a>
					vPortFree( pxTimer );
 800f286:	0020      	movs	r0, r4
 800f288:	f000 f9ec 	bl	800f664 <vPortFree>
 800f28c:	e7c6      	b.n	800f21c <prvTimerTask+0x48>
	vTaskSuspendAll();
 800f28e:	f7ff fa4f 	bl	800e730 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f292:	f7ff fa55 	bl	800e740 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f296:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f298:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f29a:	4298      	cmp	r0, r3
 800f29c:	d208      	bcs.n	800f2b0 <prvTimerTask+0xdc>
		prvSwitchTimerLists();
 800f29e:	f7ff ff5f 	bl	800f160 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f2a2:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f2a4:	f7ff fae4 	bl	800e870 <xTaskResumeAll>
 800f2a8:	e7b6      	b.n	800f218 <prvTimerTask+0x44>
		prvSwitchTimerLists();
 800f2aa:	f7ff ff59 	bl	800f160 <prvSwitchTimerLists>
 800f2ae:	e7db      	b.n	800f268 <prvTimerTask+0x94>
		xNextExpireTime = ( TickType_t ) 0U;
 800f2b0:	2700      	movs	r7, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f2b2:	6828      	ldr	r0, [r5, #0]
 800f2b4:	1b39      	subs	r1, r7, r4
	xLastTime = xTimeNow;
 800f2b6:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f2b8:	f7fe ffc4 	bl	800e244 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2bc:	f7ff fad8 	bl	800e870 <xTaskResumeAll>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d1a9      	bne.n	800f218 <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 800f2c4:	f000 f8c8 	bl	800f458 <vPortYield>
 800f2c8:	e7a6      	b.n	800f218 <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
 800f2ca:	f7ff fad1 	bl	800e870 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2d4:	1d30      	adds	r0, r6, #4
 800f2d6:	f7fe fc75 	bl	800dbc4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f2da:	69f3      	ldr	r3, [r6, #28]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d034      	beq.n	800f34a <prvTimerTask+0x176>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f2e2:	0030      	movs	r0, r6
 800f2e4:	4798      	blx	r3
 800f2e6:	e797      	b.n	800f218 <prvTimerTask+0x44>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f2e8:	9b05      	ldr	r3, [sp, #20]
 800f2ea:	0020      	movs	r0, r4
 800f2ec:	9302      	str	r3, [sp, #8]
 800f2ee:	9a02      	ldr	r2, [sp, #8]
 800f2f0:	69a3      	ldr	r3, [r4, #24]
 800f2f2:	4694      	mov	ip, r2
 800f2f4:	4463      	add	r3, ip
 800f2f6:	0019      	movs	r1, r3
 800f2f8:	0013      	movs	r3, r2
 800f2fa:	464a      	mov	r2, r9
 800f2fc:	f7ff fea4 	bl	800f048 <prvInsertTimerInActiveList>
 800f300:	2801      	cmp	r0, #1
 800f302:	d18b      	bne.n	800f21c <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f306:	0020      	movs	r0, r4
 800f308:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f30a:	69e3      	ldr	r3, [r4, #28]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d185      	bne.n	800f21c <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f310:	69a1      	ldr	r1, [r4, #24]
 800f312:	9b05      	ldr	r3, [sp, #20]
 800f314:	468c      	mov	ip, r1
 800f316:	9302      	str	r3, [sp, #8]
 800f318:	4463      	add	r3, ip
 800f31a:	001a      	movs	r2, r3
 800f31c:	4653      	mov	r3, sl
 800f31e:	2100      	movs	r1, #0
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	0020      	movs	r0, r4
 800f324:	2300      	movs	r3, #0
 800f326:	f7ff fef1 	bl	800f10c <xTimerGenericCommand>
							configASSERT( xResult );
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d000      	beq.n	800f330 <prvTimerTask+0x15c>
 800f32e:	e775      	b.n	800f21c <prvTimerTask+0x48>
 800f330:	b672      	cpsid	i
 800f332:	e7fe      	b.n	800f332 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f334:	9905      	ldr	r1, [sp, #20]
 800f336:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f338:	2900      	cmp	r1, #0
 800f33a:	d01a      	beq.n	800f372 <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f33c:	4449      	add	r1, r9
 800f33e:	464b      	mov	r3, r9
 800f340:	464a      	mov	r2, r9
 800f342:	0020      	movs	r0, r4
 800f344:	f7ff fe80 	bl	800f048 <prvInsertTimerInActiveList>
 800f348:	e768      	b.n	800f21c <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f34a:	69b3      	ldr	r3, [r6, #24]
 800f34c:	0022      	movs	r2, r4
 800f34e:	18f9      	adds	r1, r7, r3
 800f350:	0030      	movs	r0, r6
 800f352:	003b      	movs	r3, r7
 800f354:	f7ff fe78 	bl	800f048 <prvInsertTimerInActiveList>
 800f358:	2801      	cmp	r0, #1
 800f35a:	d1c1      	bne.n	800f2e0 <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f35c:	2300      	movs	r3, #0
 800f35e:	003a      	movs	r2, r7
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	2100      	movs	r1, #0
 800f364:	0030      	movs	r0, r6
 800f366:	f7ff fed1 	bl	800f10c <xTimerGenericCommand>
			configASSERT( xResult );
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d1b8      	bne.n	800f2e0 <prvTimerTask+0x10c>
 800f36e:	b672      	cpsid	i
 800f370:	e7fe      	b.n	800f370 <prvTimerTask+0x19c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f372:	b672      	cpsid	i
 800f374:	e7fe      	b.n	800f374 <prvTimerTask+0x1a0>
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	2000226c 	.word	0x2000226c

0800f37c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f37c:	b510      	push	{r4, lr}
 800f37e:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f380:	f000 f876 	bl	800f470 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f384:	6964      	ldr	r4, [r4, #20]
 800f386:	1e63      	subs	r3, r4, #1
 800f388:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f38a:	f000 f87d 	bl	800f488 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f38e:	0020      	movs	r0, r4
 800f390:	bd10      	pop	{r4, pc}
 800f392:	46c0      	nop			; (mov r8, r8)

0800f394 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f394:	b510      	push	{r4, lr}
 800f396:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f398:	d101      	bne.n	800f39e <pvTimerGetTimerID+0xa>
 800f39a:	b672      	cpsid	i
 800f39c:	e7fe      	b.n	800f39c <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f39e:	f000 f867 	bl	800f470 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f3a2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f3a4:	f000 f870 	bl	800f488 <vPortExitCritical>

	return pvReturn;
}
 800f3a8:	0020      	movs	r0, r4
 800f3aa:	bd10      	pop	{r4, pc}

0800f3ac <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f3ac:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <prvTaskExitError+0x10>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	d001      	beq.n	800f3b8 <prvTaskExitError+0xc>
 800f3b4:	b672      	cpsid	i
 800f3b6:	e7fe      	b.n	800f3b6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f3b8:	b672      	cpsid	i
 800f3ba:	e7fe      	b.n	800f3ba <prvTaskExitError+0xe>
 800f3bc:	200000d4 	.word	0x200000d4

0800f3c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f3c0:	4a06      	ldr	r2, [pc, #24]	; (800f3dc <pxCurrentTCBConst2>)
 800f3c2:	6813      	ldr	r3, [r2, #0]
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	3020      	adds	r0, #32
 800f3c8:	f380 8809 	msr	PSP, r0
 800f3cc:	2002      	movs	r0, #2
 800f3ce:	f380 8814 	msr	CONTROL, r0
 800f3d2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f3d4:	46ae      	mov	lr, r5
 800f3d6:	b662      	cpsie	i
 800f3d8:	bd00      	pop	{pc}
 800f3da:	46c0      	nop			; (mov r8, r8)

0800f3dc <pxCurrentTCBConst2>:
 800f3dc:	20002148 	.word	0x20002148

0800f3e0 <pxPortInitialiseStack>:
{
 800f3e0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f3e2:	2480      	movs	r4, #128	; 0x80
 800f3e4:	1f03      	subs	r3, r0, #4
 800f3e6:	0464      	lsls	r4, r4, #17
 800f3e8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f3ea:	3b04      	subs	r3, #4
 800f3ec:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f3ee:	4903      	ldr	r1, [pc, #12]	; (800f3fc <pxPortInitialiseStack+0x1c>)
 800f3f0:	3b04      	subs	r3, #4
 800f3f2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3f4:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f3f6:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3f8:	601a      	str	r2, [r3, #0]
}
 800f3fa:	bd10      	pop	{r4, pc}
 800f3fc:	0800f3ad 	.word	0x0800f3ad

0800f400 <SVC_Handler>:
}
 800f400:	4770      	bx	lr
 800f402:	46c0      	nop			; (mov r8, r8)

0800f404 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f404:	22ff      	movs	r2, #255	; 0xff
 800f406:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <xPortStartScheduler+0x40>)
 800f408:	0412      	lsls	r2, r2, #16
 800f40a:	6819      	ldr	r1, [r3, #0]
{
 800f40c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f40e:	430a      	orrs	r2, r1
 800f410:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f412:	22ff      	movs	r2, #255	; 0xff
 800f414:	6819      	ldr	r1, [r3, #0]
 800f416:	0612      	lsls	r2, r2, #24
 800f418:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f41a:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f41c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f41e:	4b0a      	ldr	r3, [pc, #40]	; (800f448 <xPortStartScheduler+0x44>)
 800f420:	0089      	lsls	r1, r1, #2
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	f7f0 fe94 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f428:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f42a:	4b08      	ldr	r3, [pc, #32]	; (800f44c <xPortStartScheduler+0x48>)
 800f42c:	3801      	subs	r0, #1
 800f42e:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f430:	4b07      	ldr	r3, [pc, #28]	; (800f450 <xPortStartScheduler+0x4c>)
 800f432:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f434:	2200      	movs	r2, #0
 800f436:	4b07      	ldr	r3, [pc, #28]	; (800f454 <xPortStartScheduler+0x50>)
 800f438:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f43a:	f7ff ffc1 	bl	800f3c0 <vPortStartFirstTask>
	prvTaskExitError();
 800f43e:	f7ff ffb5 	bl	800f3ac <prvTaskExitError>
 800f442:	46c0      	nop			; (mov r8, r8)
 800f444:	e000ed20 	.word	0xe000ed20
 800f448:	200000c0 	.word	0x200000c0
 800f44c:	e000e014 	.word	0xe000e014
 800f450:	e000e010 	.word	0xe000e010
 800f454:	200000d4 	.word	0x200000d4

0800f458 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f458:	2280      	movs	r2, #128	; 0x80
 800f45a:	4b04      	ldr	r3, [pc, #16]	; (800f46c <vPortYield+0x14>)
 800f45c:	0552      	lsls	r2, r2, #21
 800f45e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f460:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f464:	f3bf 8f6f 	isb	sy
}
 800f468:	4770      	bx	lr
 800f46a:	46c0      	nop			; (mov r8, r8)
 800f46c:	e000ed04 	.word	0xe000ed04

0800f470 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f470:	b672      	cpsid	i
    uxCriticalNesting++;
 800f472:	4a04      	ldr	r2, [pc, #16]	; (800f484 <vPortEnterCritical+0x14>)
 800f474:	6813      	ldr	r3, [r2, #0]
 800f476:	3301      	adds	r3, #1
 800f478:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f47a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f47e:	f3bf 8f6f 	isb	sy
}
 800f482:	4770      	bx	lr
 800f484:	200000d4 	.word	0x200000d4

0800f488 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f488:	4a05      	ldr	r2, [pc, #20]	; (800f4a0 <vPortExitCritical+0x18>)
 800f48a:	6813      	ldr	r3, [r2, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <vPortExitCritical+0xc>
 800f490:	b672      	cpsid	i
 800f492:	e7fe      	b.n	800f492 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f494:	3b01      	subs	r3, #1
 800f496:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d100      	bne.n	800f49e <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 800f49c:	b662      	cpsie	i
}
 800f49e:	4770      	bx	lr
 800f4a0:	200000d4 	.word	0x200000d4

0800f4a4 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f4a4:	f3ef 8010 	mrs	r0, PRIMASK
 800f4a8:	b672      	cpsid	i
 800f4aa:	4770      	bx	lr
}
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	46c0      	nop			; (mov r8, r8)

0800f4b0 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f4b0:	f380 8810 	msr	PRIMASK, r0
 800f4b4:	4770      	bx	lr
 800f4b6:	46c0      	nop			; (mov r8, r8)

0800f4b8 <PendSV_Handler>:
	__asm volatile
 800f4b8:	f3ef 8009 	mrs	r0, PSP
 800f4bc:	4b0e      	ldr	r3, [pc, #56]	; (800f4f8 <pxCurrentTCBConst>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	3820      	subs	r0, #32
 800f4c2:	6010      	str	r0, [r2, #0]
 800f4c4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f4c6:	4644      	mov	r4, r8
 800f4c8:	464d      	mov	r5, r9
 800f4ca:	4656      	mov	r6, sl
 800f4cc:	465f      	mov	r7, fp
 800f4ce:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f4d0:	b508      	push	{r3, lr}
 800f4d2:	b672      	cpsid	i
 800f4d4:	f7ff faf2 	bl	800eabc <vTaskSwitchContext>
 800f4d8:	b662      	cpsie	i
 800f4da:	bc0c      	pop	{r2, r3}
 800f4dc:	6811      	ldr	r1, [r2, #0]
 800f4de:	6808      	ldr	r0, [r1, #0]
 800f4e0:	3010      	adds	r0, #16
 800f4e2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f4e4:	46a0      	mov	r8, r4
 800f4e6:	46a9      	mov	r9, r5
 800f4e8:	46b2      	mov	sl, r6
 800f4ea:	46bb      	mov	fp, r7
 800f4ec:	f380 8809 	msr	PSP, r0
 800f4f0:	3820      	subs	r0, #32
 800f4f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f4f4:	4718      	bx	r3
 800f4f6:	46c0      	nop			; (mov r8, r8)

0800f4f8 <pxCurrentTCBConst>:
 800f4f8:	20002148 	.word	0x20002148

0800f4fc <xPortSysTickHandler>:
{
 800f4fc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4fe:	f7ff ffd1 	bl	800f4a4 <ulSetInterruptMaskFromISR>
 800f502:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f504:	f7ff f928 	bl	800e758 <xTaskIncrementTick>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d003      	beq.n	800f514 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f50c:	2280      	movs	r2, #128	; 0x80
 800f50e:	4b03      	ldr	r3, [pc, #12]	; (800f51c <xPortSysTickHandler+0x20>)
 800f510:	0552      	lsls	r2, r2, #21
 800f512:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f514:	0020      	movs	r0, r4
 800f516:	f7ff ffcb 	bl	800f4b0 <vClearInterruptMaskFromISR>
}
 800f51a:	bd10      	pop	{r4, pc}
 800f51c:	e000ed04 	.word	0xe000ed04

0800f520 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <prvInsertBlockIntoFreeList+0x48>)
{
 800f522:	b530      	push	{r4, r5, lr}
 800f524:	001d      	movs	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	4282      	cmp	r2, r0
 800f52a:	d201      	bcs.n	800f530 <prvInsertBlockIntoFreeList+0x10>
 800f52c:	0013      	movs	r3, r2
 800f52e:	e7fa      	b.n	800f526 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f530:	685c      	ldr	r4, [r3, #4]
 800f532:	1919      	adds	r1, r3, r4
 800f534:	4288      	cmp	r0, r1
 800f536:	d103      	bne.n	800f540 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f538:	6841      	ldr	r1, [r0, #4]
 800f53a:	0018      	movs	r0, r3
 800f53c:	1909      	adds	r1, r1, r4
 800f53e:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f540:	6841      	ldr	r1, [r0, #4]
 800f542:	1844      	adds	r4, r0, r1
 800f544:	42a2      	cmp	r2, r4
 800f546:	d109      	bne.n	800f55c <prvInsertBlockIntoFreeList+0x3c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f548:	68ac      	ldr	r4, [r5, #8]
 800f54a:	42a2      	cmp	r2, r4
 800f54c:	d006      	beq.n	800f55c <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f54e:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f550:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f552:	46a4      	mov	ip, r4
 800f554:	4461      	add	r1, ip
 800f556:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f558:	6002      	str	r2, [r0, #0]
 800f55a:	e000      	b.n	800f55e <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f55c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f55e:	4298      	cmp	r0, r3
 800f560:	d000      	beq.n	800f564 <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f562:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f564:	bd30      	pop	{r4, r5, pc}
 800f566:	46c0      	nop			; (mov r8, r8)
 800f568:	200022a4 	.word	0x200022a4

0800f56c <pvPortMalloc>:
{
 800f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56e:	46c6      	mov	lr, r8
 800f570:	b500      	push	{lr}
 800f572:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800f574:	f7ff f8dc 	bl	800e730 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f578:	4c37      	ldr	r4, [pc, #220]	; (800f658 <pvPortMalloc+0xec>)
 800f57a:	68a3      	ldr	r3, [r4, #8]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d02a      	beq.n	800f5d6 <pvPortMalloc+0x6a>
 800f580:	68e6      	ldr	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f582:	422e      	tst	r6, r5
 800f584:	d143      	bne.n	800f60e <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
 800f586:	2d00      	cmp	r5, #0
 800f588:	d041      	beq.n	800f60e <pvPortMalloc+0xa2>
				xWantedSize += xHeapStructSize;
 800f58a:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f58c:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f58e:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f590:	421a      	tst	r2, r3
 800f592:	d001      	beq.n	800f598 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f594:	4393      	bics	r3, r2
 800f596:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d038      	beq.n	800f60e <pvPortMalloc+0xa2>
 800f59c:	6962      	ldr	r2, [r4, #20]
 800f59e:	4690      	mov	r8, r2
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d334      	bcc.n	800f60e <pvPortMalloc+0xa2>
				pxBlock = xStart.pxNextFreeBlock;
 800f5a4:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800f5a6:	0021      	movs	r1, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5a8:	e004      	b.n	800f5b4 <pvPortMalloc+0x48>
 800f5aa:	6828      	ldr	r0, [r5, #0]
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d004      	beq.n	800f5ba <pvPortMalloc+0x4e>
 800f5b0:	0029      	movs	r1, r5
 800f5b2:	0005      	movs	r5, r0
 800f5b4:	686a      	ldr	r2, [r5, #4]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d3f7      	bcc.n	800f5aa <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f5ba:	68a0      	ldr	r0, [r4, #8]
 800f5bc:	42a8      	cmp	r0, r5
 800f5be:	d026      	beq.n	800f60e <pvPortMalloc+0xa2>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5c0:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5c2:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5c4:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5c6:	1ad1      	subs	r1, r2, r3
 800f5c8:	2910      	cmp	r1, #16
 800f5ca:	d931      	bls.n	800f630 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5cc:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5ce:	0742      	lsls	r2, r0, #29
 800f5d0:	d029      	beq.n	800f626 <pvPortMalloc+0xba>
 800f5d2:	b672      	cpsid	i
 800f5d4:	e7fe      	b.n	800f5d4 <pvPortMalloc+0x68>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5d6:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f5d8:	4b20      	ldr	r3, [pc, #128]	; (800f65c <pvPortMalloc+0xf0>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5da:	4219      	tst	r1, r3
 800f5dc:	d020      	beq.n	800f620 <pvPortMalloc+0xb4>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f5de:	185a      	adds	r2, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f5e0:	438a      	bics	r2, r1
 800f5e2:	0011      	movs	r1, r2
	ulAddress -= xHeapStructSize;
 800f5e4:	4e1e      	ldr	r6, [pc, #120]	; (800f660 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 800f5e6:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 800f5e8:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f5ea:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f5ec:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f5ee:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5f0:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f5f2:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5f4:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f5f6:	6060      	str	r0, [r4, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5f8:	6021      	str	r1, [r4, #0]
	pxEnd->xBlockSize = 0;
 800f5fa:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5fc:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f5fe:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f600:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f602:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f604:	6122      	str	r2, [r4, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f606:	6162      	str	r2, [r4, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f608:	60e6      	str	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f60a:	422e      	tst	r6, r5
 800f60c:	d0bb      	beq.n	800f586 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 800f60e:	f7ff f92f 	bl	800e870 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f612:	f7fd fc55 	bl	800cec0 <vApplicationMallocFailedHook>
 800f616:	2700      	movs	r7, #0
}
 800f618:	0038      	movs	r0, r7
 800f61a:	bc04      	pop	{r2}
 800f61c:	4690      	mov	r8, r2
 800f61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f620:	001a      	movs	r2, r3
 800f622:	0019      	movs	r1, r3
 800f624:	e7de      	b.n	800f5e4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f626:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f628:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f62a:	f7ff ff79 	bl	800f520 <prvInsertBlockIntoFreeList>
 800f62e:	686a      	ldr	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f630:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f632:	6921      	ldr	r1, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f634:	1a9b      	subs	r3, r3, r2
 800f636:	6163      	str	r3, [r4, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f638:	428b      	cmp	r3, r1
 800f63a:	d200      	bcs.n	800f63e <pvPortMalloc+0xd2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f63c:	6123      	str	r3, [r4, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f63e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f640:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f642:	3708      	adds	r7, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f644:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f646:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800f648:	f7ff f912 	bl	800e870 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f64c:	2f00      	cmp	r7, #0
 800f64e:	d0e0      	beq.n	800f612 <pvPortMalloc+0xa6>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f650:	077b      	lsls	r3, r7, #29
 800f652:	d0e1      	beq.n	800f618 <pvPortMalloc+0xac>
 800f654:	b672      	cpsid	i
 800f656:	e7fe      	b.n	800f656 <pvPortMalloc+0xea>
 800f658:	200022a4 	.word	0x200022a4
 800f65c:	200022bc 	.word	0x200022bc
 800f660:	00004a30 	.word	0x00004a30

0800f664 <vPortFree>:
{
 800f664:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f666:	2800      	cmp	r0, #0
 800f668:	d01b      	beq.n	800f6a2 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f66a:	4d0e      	ldr	r5, [pc, #56]	; (800f6a4 <vPortFree+0x40>)
 800f66c:	3808      	subs	r0, #8
 800f66e:	6843      	ldr	r3, [r0, #4]
 800f670:	68ea      	ldr	r2, [r5, #12]
 800f672:	0004      	movs	r4, r0
 800f674:	421a      	tst	r2, r3
 800f676:	d101      	bne.n	800f67c <vPortFree+0x18>
 800f678:	b672      	cpsid	i
 800f67a:	e7fe      	b.n	800f67a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f67c:	6801      	ldr	r1, [r0, #0]
 800f67e:	2900      	cmp	r1, #0
 800f680:	d001      	beq.n	800f686 <vPortFree+0x22>
 800f682:	b672      	cpsid	i
 800f684:	e7fe      	b.n	800f684 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f686:	4393      	bics	r3, r2
 800f688:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f68a:	f7ff f851 	bl	800e730 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f68e:	696a      	ldr	r2, [r5, #20]
 800f690:	6863      	ldr	r3, [r4, #4]
 800f692:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f694:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f696:	4463      	add	r3, ip
 800f698:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f69a:	f7ff ff41 	bl	800f520 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f69e:	f7ff f8e7 	bl	800e870 <xTaskResumeAll>
}
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	200022a4 	.word	0x200022a4

0800f6a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f6ac:	f002 f904 	bl	80118b8 <HAL_RCC_GetHCLKFreq>
 800f6b0:	21fa      	movs	r1, #250	; 0xfa
 800f6b2:	0089      	lsls	r1, r1, #2
 800f6b4:	f7f0 fd4c 	bl	8000150 <__udivsi3>
 800f6b8:	f000 fb9e 	bl	800fdf8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f6bc:	2001      	movs	r0, #1
 800f6be:	2200      	movs	r2, #0
 800f6c0:	0021      	movs	r1, r4
 800f6c2:	4240      	negs	r0, r0
 800f6c4:	f000 fb58 	bl	800fd78 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	bd10      	pop	{r4, pc}

0800f6cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f6cc:	2110      	movs	r1, #16
 800f6ce:	4a06      	ldr	r2, [pc, #24]	; (800f6e8 <HAL_Init+0x1c>)
{
 800f6d0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f6d2:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f6d4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f6d6:	430b      	orrs	r3, r1
 800f6d8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f6da:	f7ff ffe5 	bl	800f6a8 <HAL_InitTick>
  HAL_MspInit();
 800f6de:	f001 fcdf 	bl	80110a0 <HAL_MspInit>
}
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	bd10      	pop	{r4, pc}
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	40022000 	.word	0x40022000

0800f6ec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f6ec:	4a02      	ldr	r2, [pc, #8]	; (800f6f8 <HAL_IncTick+0xc>)
 800f6ee:	6813      	ldr	r3, [r2, #0]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	6013      	str	r3, [r2, #0]
}
 800f6f4:	4770      	bx	lr
 800f6f6:	46c0      	nop			; (mov r8, r8)
 800f6f8:	20006cf4 	.word	0x20006cf4

0800f6fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f6fc:	4b01      	ldr	r3, [pc, #4]	; (800f704 <HAL_GetTick+0x8>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
}
 800f700:	4770      	bx	lr
 800f702:	46c0      	nop			; (mov r8, r8)
 800f704:	20006cf4 	.word	0x20006cf4

0800f708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f708:	b510      	push	{r4, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f70e:	f7ff fff5 	bl	800f6fc <HAL_GetTick>
 800f712:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f714:	f7ff fff2 	bl	800f6fc <HAL_GetTick>
 800f718:	9b01      	ldr	r3, [sp, #4]
 800f71a:	1b00      	subs	r0, r0, r4
 800f71c:	4298      	cmp	r0, r3
 800f71e:	d3f9      	bcc.n	800f714 <HAL_Delay+0xc>
  {
  }
}
 800f720:	b002      	add	sp, #8
 800f722:	bd10      	pop	{r4, pc}

0800f724 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f724:	4b01      	ldr	r3, [pc, #4]	; (800f72c <HAL_GetREVID+0x8>)
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	0c00      	lsrs	r0, r0, #16
}
 800f72a:	4770      	bx	lr
 800f72c:	40015800 	.word	0x40015800

0800f730 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f730:	4b02      	ldr	r3, [pc, #8]	; (800f73c <HAL_GetDEVID+0xc>)
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	0500      	lsls	r0, r0, #20
 800f736:	0d00      	lsrs	r0, r0, #20
}
 800f738:	4770      	bx	lr
 800f73a:	46c0      	nop			; (mov r8, r8)
 800f73c:	40015800 	.word	0x40015800

0800f740 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f740:	2303      	movs	r3, #3
 800f742:	6802      	ldr	r2, [r0, #0]
{
 800f744:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f746:	6891      	ldr	r1, [r2, #8]
{
 800f748:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f74a:	400b      	ands	r3, r1
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d001      	beq.n	800f754 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f750:	2000      	movs	r0, #0
}
 800f752:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f754:	6811      	ldr	r1, [r2, #0]
 800f756:	420b      	tst	r3, r1
 800f758:	d00e      	beq.n	800f778 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f75a:	2305      	movs	r3, #5
 800f75c:	6891      	ldr	r1, [r2, #8]
 800f75e:	400b      	ands	r3, r1
 800f760:	2b01      	cmp	r3, #1
 800f762:	d00d      	beq.n	800f780 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f764:	2210      	movs	r2, #16
 800f766:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f768:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f76a:	4313      	orrs	r3, r2
 800f76c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f76e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f770:	3a0f      	subs	r2, #15
 800f772:	4313      	orrs	r3, r2
 800f774:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f776:	e7ec      	b.n	800f752 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f778:	68d3      	ldr	r3, [r2, #12]
 800f77a:	041b      	lsls	r3, r3, #16
 800f77c:	d4ed      	bmi.n	800f75a <ADC_Disable+0x1a>
 800f77e:	e7e7      	b.n	800f750 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f780:	2102      	movs	r1, #2
 800f782:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f784:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f786:	430b      	orrs	r3, r1
 800f788:	6093      	str	r3, [r2, #8]
 800f78a:	2303      	movs	r3, #3
 800f78c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f78e:	f7ff ffb5 	bl	800f6fc <HAL_GetTick>
 800f792:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f794:	e004      	b.n	800f7a0 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f796:	f7ff ffb1 	bl	800f6fc <HAL_GetTick>
 800f79a:	1b80      	subs	r0, r0, r6
 800f79c:	2802      	cmp	r0, #2
 800f79e:	d804      	bhi.n	800f7aa <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	421d      	tst	r5, r3
 800f7a6:	d1f6      	bne.n	800f796 <ADC_Disable+0x56>
 800f7a8:	e7d2      	b.n	800f750 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7aa:	2210      	movs	r2, #16
 800f7ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f7ae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7b6:	431d      	orrs	r5, r3
 800f7b8:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f7ba:	e7ca      	b.n	800f752 <ADC_Disable+0x12>

0800f7bc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f7bc:	2300      	movs	r3, #0
{
 800f7be:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f7c0:	6802      	ldr	r2, [r0, #0]
{
 800f7c2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f7c4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f7c6:	6891      	ldr	r1, [r2, #8]
 800f7c8:	3303      	adds	r3, #3
{
 800f7ca:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f7cc:	400b      	ands	r3, r1
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d031      	beq.n	800f836 <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f7d2:	6891      	ldr	r1, [r2, #8]
 800f7d4:	4b20      	ldr	r3, [pc, #128]	; (800f858 <ADC_Enable+0x9c>)
 800f7d6:	4219      	tst	r1, r3
 800f7d8:	d122      	bne.n	800f820 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f7da:	2101      	movs	r1, #1
 800f7dc:	6893      	ldr	r3, [r2, #8]
 800f7de:	430b      	orrs	r3, r1
 800f7e0:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f7e2:	4b1e      	ldr	r3, [pc, #120]	; (800f85c <ADC_Enable+0xa0>)
 800f7e4:	491e      	ldr	r1, [pc, #120]	; (800f860 <ADC_Enable+0xa4>)
 800f7e6:	6818      	ldr	r0, [r3, #0]
 800f7e8:	f7f0 fcb2 	bl	8000150 <__udivsi3>
 800f7ec:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d005      	beq.n	800f800 <ADC_Enable+0x44>
      wait_loop_index--;
 800f7f4:	9b01      	ldr	r3, [sp, #4]
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f7fa:	9b01      	ldr	r3, [sp, #4]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d1f9      	bne.n	800f7f4 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f800:	f7ff ff7c 	bl	800f6fc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f804:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f806:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f808:	e004      	b.n	800f814 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f80a:	f7ff ff77 	bl	800f6fc <HAL_GetTick>
 800f80e:	1b80      	subs	r0, r0, r6
 800f810:	2802      	cmp	r0, #2
 800f812:	d818      	bhi.n	800f846 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	421d      	tst	r5, r3
 800f81a:	d0f6      	beq.n	800f80a <ADC_Enable+0x4e>
  return HAL_OK;
 800f81c:	2000      	movs	r0, #0
 800f81e:	e008      	b.n	800f832 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f820:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f822:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f824:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f826:	4313      	orrs	r3, r2
 800f828:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f82a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f82c:	3a0f      	subs	r2, #15
 800f82e:	4313      	orrs	r3, r2
 800f830:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f832:	b002      	add	sp, #8
 800f834:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f836:	6811      	ldr	r1, [r2, #0]
 800f838:	420b      	tst	r3, r1
 800f83a:	d1ef      	bne.n	800f81c <ADC_Enable+0x60>
 800f83c:	68d3      	ldr	r3, [r2, #12]
 800f83e:	041b      	lsls	r3, r3, #16
 800f840:	d5c7      	bpl.n	800f7d2 <ADC_Enable+0x16>
  return HAL_OK;
 800f842:	2000      	movs	r0, #0
 800f844:	e7f5      	b.n	800f832 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f846:	2210      	movs	r2, #16
 800f848:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f84a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f84c:	4313      	orrs	r3, r2
 800f84e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f850:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f852:	431d      	orrs	r5, r3
 800f854:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f856:	e7ec      	b.n	800f832 <ADC_Enable+0x76>
 800f858:	80000017 	.word	0x80000017
 800f85c:	200000c0 	.word	0x200000c0
 800f860:	000f4240 	.word	0x000f4240

0800f864 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f864:	2204      	movs	r2, #4
 800f866:	6803      	ldr	r3, [r0, #0]
{
 800f868:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f86a:	6899      	ldr	r1, [r3, #8]
{
 800f86c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f86e:	420a      	tst	r2, r1
 800f870:	d010      	beq.n	800f894 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f872:	6899      	ldr	r1, [r3, #8]
 800f874:	420a      	tst	r2, r1
 800f876:	d10f      	bne.n	800f898 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f878:	f7ff ff40 	bl	800f6fc <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f87c:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f87e:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f880:	e004      	b.n	800f88c <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f882:	f7ff ff3b 	bl	800f6fc <HAL_GetTick>
 800f886:	1b80      	subs	r0, r0, r6
 800f888:	2802      	cmp	r0, #2
 800f88a:	d80d      	bhi.n	800f8a8 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	421d      	tst	r5, r3
 800f892:	d1f6      	bne.n	800f882 <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f894:	2000      	movs	r0, #0
}
 800f896:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f898:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f89a:	0792      	lsls	r2, r2, #30
 800f89c:	d4ec      	bmi.n	800f878 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f89e:	2110      	movs	r1, #16
 800f8a0:	689a      	ldr	r2, [r3, #8]
 800f8a2:	430a      	orrs	r2, r1
 800f8a4:	609a      	str	r2, [r3, #8]
 800f8a6:	e7e7      	b.n	800f878 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8a8:	2210      	movs	r2, #16
 800f8aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8ac:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8b4:	3a0f      	subs	r2, #15
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f8ba:	e7ec      	b.n	800f896 <ADC_ConversionStop+0x32>

0800f8bc <HAL_ADC_Init>:
{
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f8c0:	d100      	bne.n	800f8c4 <HAL_ADC_Init+0x8>
 800f8c2:	e075      	b.n	800f9b0 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f8c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d068      	beq.n	800f99c <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f8ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8cc:	06db      	lsls	r3, r3, #27
 800f8ce:	d505      	bpl.n	800f8dc <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8d0:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f8d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f8dc:	2004      	movs	r0, #4
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	689a      	ldr	r2, [r3, #8]
 800f8e2:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f8e4:	d1f4      	bne.n	800f8d0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f8e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f8e8:	4942      	ldr	r1, [pc, #264]	; (800f9f4 <HAL_ADC_Init+0x138>)
 800f8ea:	400a      	ands	r2, r1
 800f8ec:	3106      	adds	r1, #6
 800f8ee:	31ff      	adds	r1, #255	; 0xff
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f8f4:	2203      	movs	r2, #3
 800f8f6:	6899      	ldr	r1, [r3, #8]
 800f8f8:	400a      	ands	r2, r1
 800f8fa:	2a01      	cmp	r2, #1
 800f8fc:	d073      	beq.n	800f9e6 <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f8fe:	2118      	movs	r1, #24
 800f900:	68da      	ldr	r2, [r3, #12]
 800f902:	438a      	bics	r2, r1
 800f904:	68a1      	ldr	r1, [r4, #8]
 800f906:	430a      	orrs	r2, r1
 800f908:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f90a:	691a      	ldr	r2, [r3, #16]
 800f90c:	6861      	ldr	r1, [r4, #4]
 800f90e:	0092      	lsls	r2, r2, #2
 800f910:	0892      	lsrs	r2, r2, #2
 800f912:	430a      	orrs	r2, r1
 800f914:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f916:	68da      	ldr	r2, [r3, #12]
 800f918:	4937      	ldr	r1, [pc, #220]	; (800f9f8 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f91a:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f91c:	400a      	ands	r2, r1
 800f91e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f920:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f922:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f924:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f926:	69e2      	ldr	r2, [r4, #28]
 800f928:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f92a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f92c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f92e:	3a01      	subs	r2, #1
 800f930:	1e55      	subs	r5, r2, #1
 800f932:	41aa      	sbcs	r2, r5
 800f934:	0315      	lsls	r5, r2, #12
 800f936:	68e2      	ldr	r2, [r4, #12]
 800f938:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f93a:	6922      	ldr	r2, [r4, #16]
 800f93c:	4339      	orrs	r1, r7
 800f93e:	2a02      	cmp	r2, #2
 800f940:	d100      	bne.n	800f944 <HAL_ADC_Init+0x88>
 800f942:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f944:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f946:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f948:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f94a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f94c:	432a      	orrs	r2, r5
 800f94e:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f950:	2901      	cmp	r1, #1
 800f952:	d042      	beq.n	800f9da <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f954:	20c2      	movs	r0, #194	; 0xc2
 800f956:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f958:	30ff      	adds	r0, #255	; 0xff
 800f95a:	4281      	cmp	r1, r0
 800f95c:	d002      	beq.n	800f964 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f95e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f960:	4301      	orrs	r1, r0
 800f962:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f964:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f966:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f968:	4311      	orrs	r1, r2
 800f96a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f96c:	2180      	movs	r1, #128	; 0x80
 800f96e:	0549      	lsls	r1, r1, #21
 800f970:	428d      	cmp	r5, r1
 800f972:	d01f      	beq.n	800f9b4 <HAL_ADC_Init+0xf8>
 800f974:	1e69      	subs	r1, r5, #1
 800f976:	2906      	cmp	r1, #6
 800f978:	d91c      	bls.n	800f9b4 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	491f      	ldr	r1, [pc, #124]	; (800f9fc <HAL_ADC_Init+0x140>)
 800f97e:	400b      	ands	r3, r1
 800f980:	4293      	cmp	r3, r2
 800f982:	d020      	beq.n	800f9c6 <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f984:	2212      	movs	r2, #18
 800f986:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f988:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f98a:	4393      	bics	r3, r2
 800f98c:	3a02      	subs	r2, #2
 800f98e:	4313      	orrs	r3, r2
 800f990:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f994:	3a0f      	subs	r2, #15
 800f996:	4313      	orrs	r3, r2
 800f998:	64a3      	str	r3, [r4, #72]	; 0x48
 800f99a:	e79e      	b.n	800f8da <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f99c:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f99e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f9a0:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f9a2:	f7f8 ff61 	bl	8008868 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f9a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9a8:	06db      	lsls	r3, r3, #27
 800f9aa:	d500      	bpl.n	800f9ae <HAL_ADC_Init+0xf2>
 800f9ac:	e790      	b.n	800f8d0 <HAL_ADC_Init+0x14>
 800f9ae:	e795      	b.n	800f8dc <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	e792      	b.n	800f8da <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f9b4:	2107      	movs	r1, #7
 800f9b6:	6958      	ldr	r0, [r3, #20]
 800f9b8:	4388      	bics	r0, r1
 800f9ba:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f9bc:	6958      	ldr	r0, [r3, #20]
 800f9be:	4029      	ands	r1, r5
 800f9c0:	4301      	orrs	r1, r0
 800f9c2:	6159      	str	r1, [r3, #20]
 800f9c4:	e7d9      	b.n	800f97a <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f9c6:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f9c8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f9ca:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f9cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f9ce:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f9d0:	4393      	bics	r3, r2
 800f9d2:	3a02      	subs	r2, #2
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	6463      	str	r3, [r4, #68]	; 0x44
 800f9d8:	e77f      	b.n	800f8da <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f9da:	2e00      	cmp	r6, #0
 800f9dc:	d1ba      	bne.n	800f954 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f9de:	2180      	movs	r1, #128	; 0x80
 800f9e0:	0249      	lsls	r1, r1, #9
 800f9e2:	430a      	orrs	r2, r1
 800f9e4:	e7b6      	b.n	800f954 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f9e6:	6819      	ldr	r1, [r3, #0]
 800f9e8:	420a      	tst	r2, r1
 800f9ea:	d194      	bne.n	800f916 <HAL_ADC_Init+0x5a>
 800f9ec:	68da      	ldr	r2, [r3, #12]
 800f9ee:	0412      	lsls	r2, r2, #16
 800f9f0:	d491      	bmi.n	800f916 <HAL_ADC_Init+0x5a>
 800f9f2:	e784      	b.n	800f8fe <HAL_ADC_Init+0x42>
 800f9f4:	fffffefd 	.word	0xfffffefd
 800f9f8:	fffe0219 	.word	0xfffe0219
 800f9fc:	833fffe7 	.word	0x833fffe7

0800fa00 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa00:	6803      	ldr	r3, [r0, #0]
{
 800fa02:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa04:	689a      	ldr	r2, [r3, #8]
{
 800fa06:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fa08:	0752      	lsls	r2, r2, #29
 800fa0a:	d421      	bmi.n	800fa50 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800fa0c:	2240      	movs	r2, #64	; 0x40
 800fa0e:	5c81      	ldrb	r1, [r0, r2]
 800fa10:	2901      	cmp	r1, #1
 800fa12:	d01d      	beq.n	800fa50 <HAL_ADC_Start+0x50>
 800fa14:	2101      	movs	r1, #1
 800fa16:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fa18:	69c2      	ldr	r2, [r0, #28]
 800fa1a:	2a01      	cmp	r2, #1
 800fa1c:	d112      	bne.n	800fa44 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800fa1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fa20:	490c      	ldr	r1, [pc, #48]	; (800fa54 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fa22:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fa24:	4011      	ands	r1, r2
 800fa26:	2280      	movs	r2, #128	; 0x80
 800fa28:	0052      	lsls	r2, r2, #1
 800fa2a:	430a      	orrs	r2, r1
 800fa2c:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fa2e:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800fa30:	2200      	movs	r2, #0
 800fa32:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fa34:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fa36:	321c      	adds	r2, #28
 800fa38:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fa3a:	689a      	ldr	r2, [r3, #8]
 800fa3c:	393c      	subs	r1, #60	; 0x3c
 800fa3e:	430a      	orrs	r2, r1
 800fa40:	609a      	str	r2, [r3, #8]
}
 800fa42:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800fa44:	f7ff feba 	bl	800f7bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	d1fa      	bne.n	800fa42 <HAL_ADC_Start+0x42>
 800fa4c:	6823      	ldr	r3, [r4, #0]
 800fa4e:	e7e6      	b.n	800fa1e <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800fa50:	2002      	movs	r0, #2
 800fa52:	e7f6      	b.n	800fa42 <HAL_ADC_Start+0x42>
 800fa54:	fffff0fe 	.word	0xfffff0fe

0800fa58 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800fa58:	2340      	movs	r3, #64	; 0x40
{ 
 800fa5a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800fa5c:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800fa5e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fa60:	2a01      	cmp	r2, #1
 800fa62:	d014      	beq.n	800fa8e <HAL_ADC_Stop+0x36>
 800fa64:	2501      	movs	r5, #1
 800fa66:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fa68:	f7ff fefc 	bl	800f864 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d003      	beq.n	800fa78 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800fa70:	2340      	movs	r3, #64	; 0x40
 800fa72:	2200      	movs	r2, #0
 800fa74:	54e2      	strb	r2, [r4, r3]
}
 800fa76:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fa78:	0020      	movs	r0, r4
 800fa7a:	f7ff fe61 	bl	800f740 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d1f6      	bne.n	800fa70 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800fa82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa84:	4a03      	ldr	r2, [pc, #12]	; (800fa94 <HAL_ADC_Stop+0x3c>)
 800fa86:	4013      	ands	r3, r2
 800fa88:	431d      	orrs	r5, r3
 800fa8a:	6465      	str	r5, [r4, #68]	; 0x44
 800fa8c:	e7f0      	b.n	800fa70 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800fa8e:	2002      	movs	r0, #2
 800fa90:	e7f1      	b.n	800fa76 <HAL_ADC_Stop+0x1e>
 800fa92:	46c0      	nop			; (mov r8, r8)
 800fa94:	fffffefe 	.word	0xfffffefe

0800fa98 <HAL_ADC_PollForConversion>:
{
 800fa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fa9a:	6943      	ldr	r3, [r0, #20]
{
 800fa9c:	0006      	movs	r6, r0
 800fa9e:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800faa0:	2b08      	cmp	r3, #8
 800faa2:	d04c      	beq.n	800fb3e <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800faa4:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800faa6:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	07db      	lsls	r3, r3, #31
 800faac:	d43e      	bmi.n	800fb2c <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800faae:	f7ff fe25 	bl	800f6fc <HAL_GetTick>
 800fab2:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fab4:	6832      	ldr	r2, [r6, #0]
 800fab6:	e001      	b.n	800fabc <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800fab8:	1c63      	adds	r3, r4, #1
 800faba:	d127      	bne.n	800fb0c <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fabc:	6813      	ldr	r3, [r2, #0]
 800fabe:	421d      	tst	r5, r3
 800fac0:	d0fa      	beq.n	800fab8 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fac2:	2380      	movs	r3, #128	; 0x80
 800fac4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	430b      	orrs	r3, r1
 800faca:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800facc:	23c0      	movs	r3, #192	; 0xc0
 800face:	68d1      	ldr	r1, [r2, #12]
 800fad0:	011b      	lsls	r3, r3, #4
 800fad2:	4219      	tst	r1, r3
 800fad4:	d113      	bne.n	800fafe <HAL_ADC_PollForConversion+0x66>
 800fad6:	6a33      	ldr	r3, [r6, #32]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d110      	bne.n	800fafe <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fadc:	6813      	ldr	r3, [r2, #0]
 800fade:	071b      	lsls	r3, r3, #28
 800fae0:	d50d      	bpl.n	800fafe <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fae2:	6893      	ldr	r3, [r2, #8]
 800fae4:	075b      	lsls	r3, r3, #29
 800fae6:	d42f      	bmi.n	800fb48 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fae8:	210c      	movs	r1, #12
 800faea:	6853      	ldr	r3, [r2, #4]
 800faec:	438b      	bics	r3, r1
 800faee:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800faf0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800faf2:	491a      	ldr	r1, [pc, #104]	; (800fb5c <HAL_ADC_PollForConversion+0xc4>)
 800faf4:	400b      	ands	r3, r1
 800faf6:	3104      	adds	r1, #4
 800faf8:	31ff      	adds	r1, #255	; 0xff
 800fafa:	430b      	orrs	r3, r1
 800fafc:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fafe:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800fb00:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fb06:	330c      	adds	r3, #12
 800fb08:	6013      	str	r3, [r2, #0]
}
 800fb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fb0c:	2c00      	cmp	r4, #0
 800fb0e:	d004      	beq.n	800fb1a <HAL_ADC_PollForConversion+0x82>
 800fb10:	f7ff fdf4 	bl	800f6fc <HAL_GetTick>
 800fb14:	1bc0      	subs	r0, r0, r7
 800fb16:	42a0      	cmp	r0, r4
 800fb18:	d9cc      	bls.n	800fab4 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fb1a:	2204      	movs	r2, #4
 800fb1c:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800fb1e:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fb20:	4313      	orrs	r3, r2
 800fb22:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fb24:	2200      	movs	r2, #0
 800fb26:	2340      	movs	r3, #64	; 0x40
 800fb28:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fb2a:	e7ee      	b.n	800fb0a <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fb30:	4313      	orrs	r3, r2
 800fb32:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fb34:	2200      	movs	r2, #0
 800fb36:	2340      	movs	r3, #64	; 0x40
 800fb38:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fb3a:	2001      	movs	r0, #1
 800fb3c:	e7e5      	b.n	800fb0a <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800fb3e:	f7ff fddd 	bl	800f6fc <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fb42:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800fb44:	0007      	movs	r7, r0
 800fb46:	e7b5      	b.n	800fab4 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb48:	2120      	movs	r1, #32
 800fb4a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fb4c:	430b      	orrs	r3, r1
 800fb4e:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fb50:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fb52:	391f      	subs	r1, #31
 800fb54:	430b      	orrs	r3, r1
 800fb56:	64b3      	str	r3, [r6, #72]	; 0x48
 800fb58:	e7d1      	b.n	800fafe <HAL_ADC_PollForConversion+0x66>
 800fb5a:	46c0      	nop			; (mov r8, r8)
 800fb5c:	fffffefe 	.word	0xfffffefe

0800fb60 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fb60:	2208      	movs	r2, #8
 800fb62:	6803      	ldr	r3, [r0, #0]
 800fb64:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fb66:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fb68:	4770      	bx	lr
 800fb6a:	46c0      	nop			; (mov r8, r8)

0800fb6c <HAL_ADC_ConvCpltCallback>:
 800fb6c:	4770      	bx	lr
 800fb6e:	46c0      	nop			; (mov r8, r8)

0800fb70 <HAL_ADC_LevelOutOfWindowCallback>:
 800fb70:	4770      	bx	lr
 800fb72:	46c0      	nop			; (mov r8, r8)

0800fb74 <HAL_ADC_ErrorCallback>:
 800fb74:	4770      	bx	lr
 800fb76:	46c0      	nop			; (mov r8, r8)

0800fb78 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fb78:	2204      	movs	r2, #4
 800fb7a:	6803      	ldr	r3, [r0, #0]
{
 800fb7c:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fb7e:	6819      	ldr	r1, [r3, #0]
{
 800fb80:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fb82:	420a      	tst	r2, r1
 800fb84:	d04a      	beq.n	800fc1c <HAL_ADC_IRQHandler+0xa4>
 800fb86:	6859      	ldr	r1, [r3, #4]
 800fb88:	420a      	tst	r2, r1
 800fb8a:	d047      	beq.n	800fc1c <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fb8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fb8e:	06d2      	lsls	r2, r2, #27
 800fb90:	d404      	bmi.n	800fb9c <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800fb92:	2280      	movs	r2, #128	; 0x80
 800fb94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fb96:	0092      	lsls	r2, r2, #2
 800fb98:	430a      	orrs	r2, r1
 800fb9a:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fb9c:	22c0      	movs	r2, #192	; 0xc0
 800fb9e:	68d9      	ldr	r1, [r3, #12]
 800fba0:	0112      	lsls	r2, r2, #4
 800fba2:	4211      	tst	r1, r2
 800fba4:	d113      	bne.n	800fbce <HAL_ADC_IRQHandler+0x56>
 800fba6:	6a22      	ldr	r2, [r4, #32]
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	d110      	bne.n	800fbce <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	0712      	lsls	r2, r2, #28
 800fbb0:	d50d      	bpl.n	800fbce <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fbb2:	689a      	ldr	r2, [r3, #8]
 800fbb4:	0752      	lsls	r2, r2, #29
 800fbb6:	d444      	bmi.n	800fc42 <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fbb8:	210c      	movs	r1, #12
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	438a      	bics	r2, r1
 800fbbe:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800fbc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fbc2:	4a24      	ldr	r2, [pc, #144]	; (800fc54 <HAL_ADC_IRQHandler+0xdc>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	3204      	adds	r2, #4
 800fbc8:	32ff      	adds	r2, #255	; 0xff
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800fbce:	0020      	movs	r0, r4
 800fbd0:	f7ff ffcc 	bl	800fb6c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800fbd4:	220c      	movs	r2, #12
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800fbda:	2580      	movs	r5, #128	; 0x80
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	4215      	tst	r5, r2
 800fbe0:	d002      	beq.n	800fbe8 <HAL_ADC_IRQHandler+0x70>
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	4215      	tst	r5, r2
 800fbe6:	d121      	bne.n	800fc2c <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800fbe8:	2210      	movs	r2, #16
 800fbea:	6819      	ldr	r1, [r3, #0]
 800fbec:	420a      	tst	r2, r1
 800fbee:	d014      	beq.n	800fc1a <HAL_ADC_IRQHandler+0xa2>
 800fbf0:	6859      	ldr	r1, [r3, #4]
 800fbf2:	420a      	tst	r2, r1
 800fbf4:	d011      	beq.n	800fc1a <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800fbf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fbf8:	2a01      	cmp	r2, #1
 800fbfa:	d002      	beq.n	800fc02 <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800fbfc:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800fbfe:	07d2      	lsls	r2, r2, #31
 800fc00:	d509      	bpl.n	800fc16 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800fc02:	2102      	movs	r1, #2
 800fc04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800fc06:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800fc0c:	2210      	movs	r2, #16
 800fc0e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800fc10:	f7ff ffb0 	bl	800fb74 <HAL_ADC_ErrorCallback>
 800fc14:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800fc16:	2210      	movs	r2, #16
 800fc18:	601a      	str	r2, [r3, #0]
}
 800fc1a:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fc1c:	2208      	movs	r2, #8
 800fc1e:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fc20:	420a      	tst	r2, r1
 800fc22:	d0da      	beq.n	800fbda <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fc24:	6859      	ldr	r1, [r3, #4]
 800fc26:	420a      	tst	r2, r1
 800fc28:	d0d7      	beq.n	800fbda <HAL_ADC_IRQHandler+0x62>
 800fc2a:	e7af      	b.n	800fb8c <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800fc2c:	2380      	movs	r3, #128	; 0x80
 800fc2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fc30:	025b      	lsls	r3, r3, #9
 800fc32:	4313      	orrs	r3, r2
 800fc34:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800fc36:	0020      	movs	r0, r4
 800fc38:	f7ff ff9a 	bl	800fb70 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	601d      	str	r5, [r3, #0]
 800fc40:	e7d2      	b.n	800fbe8 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc42:	2220      	movs	r2, #32
 800fc44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc46:	4313      	orrs	r3, r2
 800fc48:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc4c:	3a1f      	subs	r2, #31
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	64a3      	str	r3, [r4, #72]	; 0x48
 800fc52:	e7bc      	b.n	800fbce <HAL_ADC_IRQHandler+0x56>
 800fc54:	fffffefe 	.word	0xfffffefe

0800fc58 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800fc58:	2300      	movs	r3, #0
{
 800fc5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc5c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800fc5e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fc60:	3340      	adds	r3, #64	; 0x40
 800fc62:	5cc2      	ldrb	r2, [r0, r3]
{
 800fc64:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fc66:	2a01      	cmp	r2, #1
 800fc68:	d044      	beq.n	800fcf4 <HAL_ADC_ConfigChannel+0x9c>
 800fc6a:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc6c:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fc6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800fc70:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc72:	68b3      	ldr	r3, [r6, #8]
 800fc74:	075b      	lsls	r3, r3, #29
 800fc76:	d509      	bpl.n	800fc8c <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc78:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800fc7a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800fc82:	2340      	movs	r3, #64	; 0x40
 800fc84:	2200      	movs	r2, #0
 800fc86:	54e2      	strb	r2, [r4, r3]
}
 800fc88:	b003      	add	sp, #12
 800fc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc8c:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800fc8e:	4d33      	ldr	r5, [pc, #204]	; (800fd5c <HAL_ADC_ConfigChannel+0x104>)
 800fc90:	001f      	movs	r7, r3
 800fc92:	46ac      	mov	ip, r5
 800fc94:	684d      	ldr	r5, [r1, #4]
 800fc96:	409a      	lsls	r2, r3
 800fc98:	3f10      	subs	r7, #16
 800fc9a:	4565      	cmp	r5, ip
 800fc9c:	d02c      	beq.n	800fcf8 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fc9e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800fca0:	432a      	orrs	r2, r5
 800fca2:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fca4:	2280      	movs	r2, #128	; 0x80
 800fca6:	0552      	lsls	r2, r2, #21
 800fca8:	4290      	cmp	r0, r2
 800fcaa:	d00f      	beq.n	800fccc <HAL_ADC_ConfigChannel+0x74>
 800fcac:	3801      	subs	r0, #1
 800fcae:	2806      	cmp	r0, #6
 800fcb0:	d90c      	bls.n	800fccc <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fcb2:	2207      	movs	r2, #7
 800fcb4:	6888      	ldr	r0, [r1, #8]
 800fcb6:	6971      	ldr	r1, [r6, #20]
 800fcb8:	4011      	ands	r1, r2
 800fcba:	4288      	cmp	r0, r1
 800fcbc:	d006      	beq.n	800fccc <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fcbe:	6971      	ldr	r1, [r6, #20]
 800fcc0:	4391      	bics	r1, r2
 800fcc2:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fcc4:	6971      	ldr	r1, [r6, #20]
 800fcc6:	4002      	ands	r2, r0
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fccc:	2f02      	cmp	r7, #2
 800fcce:	d80f      	bhi.n	800fcf0 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fcd0:	4923      	ldr	r1, [pc, #140]	; (800fd60 <HAL_ADC_ConfigChannel+0x108>)
 800fcd2:	680a      	ldr	r2, [r1, #0]
 800fcd4:	2b10      	cmp	r3, #16
 800fcd6:	d029      	beq.n	800fd2c <HAL_ADC_ConfigChannel+0xd4>
 800fcd8:	3b11      	subs	r3, #17
 800fcda:	4258      	negs	r0, r3
 800fcdc:	4143      	adcs	r3, r0
 800fcde:	4821      	ldr	r0, [pc, #132]	; (800fd64 <HAL_ADC_ConfigChannel+0x10c>)
 800fce0:	425b      	negs	r3, r3
 800fce2:	4003      	ands	r3, r0
 800fce4:	2080      	movs	r0, #128	; 0x80
 800fce6:	0440      	lsls	r0, r0, #17
 800fce8:	4684      	mov	ip, r0
 800fcea:	4463      	add	r3, ip
 800fcec:	4313      	orrs	r3, r2
 800fcee:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	e7c6      	b.n	800fc82 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fcf4:	2002      	movs	r0, #2
 800fcf6:	e7c7      	b.n	800fc88 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fcf8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800fcfa:	4391      	bics	r1, r2
 800fcfc:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fcfe:	2f02      	cmp	r7, #2
 800fd00:	d8f6      	bhi.n	800fcf0 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd02:	4a17      	ldr	r2, [pc, #92]	; (800fd60 <HAL_ADC_ConfigChannel+0x108>)
 800fd04:	6811      	ldr	r1, [r2, #0]
 800fd06:	2b10      	cmp	r3, #16
 800fd08:	d00e      	beq.n	800fd28 <HAL_ADC_ConfigChannel+0xd0>
 800fd0a:	3b11      	subs	r3, #17
 800fd0c:	001a      	movs	r2, r3
 800fd0e:	1e53      	subs	r3, r2, #1
 800fd10:	419a      	sbcs	r2, r3
 800fd12:	4b14      	ldr	r3, [pc, #80]	; (800fd64 <HAL_ADC_ConfigChannel+0x10c>)
 800fd14:	4252      	negs	r2, r2
 800fd16:	4013      	ands	r3, r2
 800fd18:	4a13      	ldr	r2, [pc, #76]	; (800fd68 <HAL_ADC_ConfigChannel+0x110>)
 800fd1a:	4694      	mov	ip, r2
 800fd1c:	4463      	add	r3, ip
 800fd1e:	4a10      	ldr	r2, [pc, #64]	; (800fd60 <HAL_ADC_ConfigChannel+0x108>)
 800fd20:	400b      	ands	r3, r1
 800fd22:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd24:	2000      	movs	r0, #0
 800fd26:	e7ac      	b.n	800fc82 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd28:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <HAL_ADC_ConfigChannel+0x114>)
 800fd2a:	e7f8      	b.n	800fd1e <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd2c:	2380      	movs	r3, #128	; 0x80
 800fd2e:	041b      	lsls	r3, r3, #16
 800fd30:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fd32:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd34:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fd36:	6818      	ldr	r0, [r3, #0]
 800fd38:	490e      	ldr	r1, [pc, #56]	; (800fd74 <HAL_ADC_ConfigChannel+0x11c>)
 800fd3a:	f7f0 fa09 	bl	8000150 <__udivsi3>
 800fd3e:	0083      	lsls	r3, r0, #2
 800fd40:	1818      	adds	r0, r3, r0
 800fd42:	0040      	lsls	r0, r0, #1
 800fd44:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fd46:	9b01      	ldr	r3, [sp, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d0d1      	beq.n	800fcf0 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800fd4c:	9b01      	ldr	r3, [sp, #4]
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fd52:	9b01      	ldr	r3, [sp, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1f9      	bne.n	800fd4c <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e792      	b.n	800fc82 <HAL_ADC_ConfigChannel+0x2a>
 800fd5c:	00001001 	.word	0x00001001
 800fd60:	40012708 	.word	0x40012708
 800fd64:	ff400000 	.word	0xff400000
 800fd68:	ffbfffff 	.word	0xffbfffff
 800fd6c:	ff7fffff 	.word	0xff7fffff
 800fd70:	200000c0 	.word	0x200000c0
 800fd74:	000f4240 	.word	0x000f4240

0800fd78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fd78:	22ff      	movs	r2, #255	; 0xff
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	b530      	push	{r4, r5, lr}
 800fd7e:	0014      	movs	r4, r2
 800fd80:	b2c5      	uxtb	r5, r0
 800fd82:	402b      	ands	r3, r5
 800fd84:	00db      	lsls	r3, r3, #3
 800fd86:	409c      	lsls	r4, r3
 800fd88:	0189      	lsls	r1, r1, #6
 800fd8a:	400a      	ands	r2, r1
 800fd8c:	43e4      	mvns	r4, r4
 800fd8e:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800fd90:	2800      	cmp	r0, #0
 800fd92:	db0b      	blt.n	800fdac <HAL_NVIC_SetPriority+0x34>
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd96:	0880      	lsrs	r0, r0, #2
 800fd98:	469c      	mov	ip, r3
 800fd9a:	23c0      	movs	r3, #192	; 0xc0
 800fd9c:	0080      	lsls	r0, r0, #2
 800fd9e:	4460      	add	r0, ip
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	58c1      	ldr	r1, [r0, r3]
 800fda4:	400c      	ands	r4, r1
 800fda6:	4322      	orrs	r2, r4
 800fda8:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fdaa:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fdac:	230f      	movs	r3, #15
 800fdae:	4907      	ldr	r1, [pc, #28]	; (800fdcc <HAL_NVIC_SetPriority+0x54>)
 800fdb0:	402b      	ands	r3, r5
 800fdb2:	468c      	mov	ip, r1
 800fdb4:	3b08      	subs	r3, #8
 800fdb6:	089b      	lsrs	r3, r3, #2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4463      	add	r3, ip
 800fdbc:	69d9      	ldr	r1, [r3, #28]
 800fdbe:	400c      	ands	r4, r1
 800fdc0:	4322      	orrs	r2, r4
 800fdc2:	61da      	str	r2, [r3, #28]
 800fdc4:	e7f1      	b.n	800fdaa <HAL_NVIC_SetPriority+0x32>
 800fdc6:	46c0      	nop			; (mov r8, r8)
 800fdc8:	e000e100 	.word	0xe000e100
 800fdcc:	e000ed00 	.word	0xe000ed00

0800fdd0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fdd0:	231f      	movs	r3, #31
 800fdd2:	4018      	ands	r0, r3
 800fdd4:	3b1e      	subs	r3, #30
 800fdd6:	4083      	lsls	r3, r0
 800fdd8:	4a01      	ldr	r2, [pc, #4]	; (800fde0 <HAL_NVIC_EnableIRQ+0x10>)
 800fdda:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fddc:	4770      	bx	lr
 800fdde:	46c0      	nop			; (mov r8, r8)
 800fde0:	e000e100 	.word	0xe000e100

0800fde4 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fde4:	231f      	movs	r3, #31
 800fde6:	4018      	ands	r0, r3
 800fde8:	3b1e      	subs	r3, #30
 800fdea:	4083      	lsls	r3, r0
 800fdec:	2280      	movs	r2, #128	; 0x80
 800fdee:	4901      	ldr	r1, [pc, #4]	; (800fdf4 <HAL_NVIC_DisableIRQ+0x10>)
 800fdf0:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fdf2:	4770      	bx	lr
 800fdf4:	e000e100 	.word	0xe000e100

0800fdf8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fdf8:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <HAL_SYSTICK_Config+0x2c>)
 800fdfa:	1e43      	subs	r3, r0, #1
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d80e      	bhi.n	800fe20 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe02:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fe04:	4a08      	ldr	r2, [pc, #32]	; (800fe28 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe06:	4809      	ldr	r0, [pc, #36]	; (800fe2c <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fe08:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe0a:	6a03      	ldr	r3, [r0, #32]
 800fe0c:	0609      	lsls	r1, r1, #24
 800fe0e:	021b      	lsls	r3, r3, #8
 800fe10:	0a1b      	lsrs	r3, r3, #8
 800fe12:	430b      	orrs	r3, r1
 800fe14:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fe16:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fe18:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fe1a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fe1c:	3307      	adds	r3, #7
 800fe1e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fe20:	4770      	bx	lr
 800fe22:	46c0      	nop			; (mov r8, r8)
 800fe24:	00ffffff 	.word	0x00ffffff
 800fe28:	e000e010 	.word	0xe000e010
 800fe2c:	e000ed00 	.word	0xe000ed00

0800fe30 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fe30:	4a05      	ldr	r2, [pc, #20]	; (800fe48 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fe32:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fe34:	2804      	cmp	r0, #4
 800fe36:	d003      	beq.n	800fe40 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fe38:	2104      	movs	r1, #4
 800fe3a:	438b      	bics	r3, r1
 800fe3c:	6013      	str	r3, [r2, #0]
  }
}
 800fe3e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fe40:	4318      	orrs	r0, r3
 800fe42:	6010      	str	r0, [r2, #0]
 800fe44:	e7fb      	b.n	800fe3e <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fe46:	46c0      	nop			; (mov r8, r8)
 800fe48:	e000e010 	.word	0xe000e010

0800fe4c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fe4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe4e:	468c      	mov	ip, r1
 800fe50:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fe52:	0891      	lsrs	r1, r2, #2
 800fe54:	d010      	beq.n	800fe78 <CRC_Handle_8+0x2c>
 800fe56:	4664      	mov	r4, ip
 800fe58:	008f      	lsls	r7, r1, #2
 800fe5a:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fe5c:	7823      	ldrb	r3, [r4, #0]
 800fe5e:	7865      	ldrb	r5, [r4, #1]
 800fe60:	061b      	lsls	r3, r3, #24
 800fe62:	042d      	lsls	r5, r5, #16
 800fe64:	432b      	orrs	r3, r5
 800fe66:	78e5      	ldrb	r5, [r4, #3]
 800fe68:	432b      	orrs	r3, r5
 800fe6a:	78a5      	ldrb	r5, [r4, #2]
 800fe6c:	3404      	adds	r4, #4
 800fe6e:	022d      	lsls	r5, r5, #8
 800fe70:	432b      	orrs	r3, r5
 800fe72:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fe74:	42a7      	cmp	r7, r4
 800fe76:	d1f1      	bne.n	800fe5c <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fe78:	2303      	movs	r3, #3
 800fe7a:	401a      	ands	r2, r3
 800fe7c:	d00b      	beq.n	800fe96 <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fe7e:	0089      	lsls	r1, r1, #2
 800fe80:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fe82:	2a01      	cmp	r2, #1
 800fe84:	d013      	beq.n	800feae <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fe86:	2a02      	cmp	r2, #2
 800fe88:	d107      	bne.n	800fe9a <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fe8a:	5c5a      	ldrb	r2, [r3, r1]
 800fe8c:	4461      	add	r1, ip
 800fe8e:	784b      	ldrb	r3, [r1, #1]
 800fe90:	0212      	lsls	r2, r2, #8
 800fe92:	4313      	orrs	r3, r2
 800fe94:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe96:	6830      	ldr	r0, [r6, #0]
}
 800fe98:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fe9a:	5c5a      	ldrb	r2, [r3, r1]
 800fe9c:	4461      	add	r1, ip
 800fe9e:	784b      	ldrb	r3, [r1, #1]
 800fea0:	0212      	lsls	r2, r2, #8
 800fea2:	4313      	orrs	r3, r2
 800fea4:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fea6:	788b      	ldrb	r3, [r1, #2]
 800fea8:	7033      	strb	r3, [r6, #0]
 800feaa:	6806      	ldr	r6, [r0, #0]
 800feac:	e7f3      	b.n	800fe96 <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800feae:	5ccb      	ldrb	r3, [r1, r3]
 800feb0:	7033      	strb	r3, [r6, #0]
 800feb2:	6806      	ldr	r6, [r0, #0]
 800feb4:	e7ef      	b.n	800fe96 <CRC_Handle_8+0x4a>
 800feb6:	46c0      	nop			; (mov r8, r8)

0800feb8 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800feba:	0857      	lsrs	r7, r2, #1
 800febc:	6805      	ldr	r5, [r0, #0]
 800febe:	d00a      	beq.n	800fed6 <CRC_Handle_16+0x1e>
 800fec0:	0008      	movs	r0, r1
 800fec2:	00be      	lsls	r6, r7, #2
 800fec4:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fec6:	8803      	ldrh	r3, [r0, #0]
 800fec8:	8844      	ldrh	r4, [r0, #2]
 800feca:	041b      	lsls	r3, r3, #16
 800fecc:	4323      	orrs	r3, r4
 800fece:	3004      	adds	r0, #4
 800fed0:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fed2:	4286      	cmp	r6, r0
 800fed4:	d1f7      	bne.n	800fec6 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fed6:	07d3      	lsls	r3, r2, #31
 800fed8:	d502      	bpl.n	800fee0 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800feda:	00bf      	lsls	r7, r7, #2
 800fedc:	5a7b      	ldrh	r3, [r7, r1]
 800fede:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fee0:	6828      	ldr	r0, [r5, #0]
}
 800fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fee4 <HAL_CRC_Init>:
{
 800fee4:	b510      	push	{r4, lr}
 800fee6:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fee8:	d01f      	beq.n	800ff2a <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800feea:	7f43      	ldrb	r3, [r0, #29]
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d01d      	beq.n	800ff2e <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fef2:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fef4:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fef6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fef8:	f000 f8ae 	bl	8010058 <HAL_CRCEx_Init>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d114      	bne.n	800ff2a <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ff00:	7963      	ldrb	r3, [r4, #5]
 800ff02:	6822      	ldr	r2, [r4, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01d      	beq.n	800ff44 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ff08:	6923      	ldr	r3, [r4, #16]
 800ff0a:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ff0c:	2160      	movs	r1, #96	; 0x60
 800ff0e:	6893      	ldr	r3, [r2, #8]
 800ff10:	438b      	bics	r3, r1
 800ff12:	6961      	ldr	r1, [r4, #20]
 800ff14:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ff16:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ff18:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ff1a:	6893      	ldr	r3, [r2, #8]
 800ff1c:	438b      	bics	r3, r1
 800ff1e:	69a1      	ldr	r1, [r4, #24]
 800ff20:	430b      	orrs	r3, r1
 800ff22:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ff24:	2301      	movs	r3, #1
 800ff26:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800ff28:	e000      	b.n	800ff2c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800ff2a:	2001      	movs	r0, #1
}
 800ff2c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ff2e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ff30:	f7fc fd82 	bl	800ca38 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ff34:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ff36:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ff38:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ff3a:	f000 f88d 	bl	8010058 <HAL_CRCEx_Init>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d0de      	beq.n	800ff00 <HAL_CRC_Init+0x1c>
 800ff42:	e7f2      	b.n	800ff2a <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ff44:	3b01      	subs	r3, #1
 800ff46:	6113      	str	r3, [r2, #16]
 800ff48:	e7e0      	b.n	800ff0c <HAL_CRC_Init+0x28>
 800ff4a:	46c0      	nop			; (mov r8, r8)

0800ff4c <HAL_CRC_Accumulate>:
{
 800ff4c:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800ff4e:	7f03      	ldrb	r3, [r0, #28]
{
 800ff50:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d021      	beq.n	800ff9a <HAL_CRC_Accumulate+0x4e>
 800ff56:	2301      	movs	r3, #1
 800ff58:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800ff5e:	6a03      	ldr	r3, [r0, #32]
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d017      	beq.n	800ff94 <HAL_CRC_Accumulate+0x48>
 800ff64:	2b03      	cmp	r3, #3
 800ff66:	d00a      	beq.n	800ff7e <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ff68:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d102      	bne.n	800ff74 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ff6e:	0020      	movs	r0, r4
 800ff70:	f7ff ff6c 	bl	800fe4c <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800ff74:	2301      	movs	r3, #1
 800ff76:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ff78:	2300      	movs	r3, #0
 800ff7a:	7723      	strb	r3, [r4, #28]
}
 800ff7c:	bd10      	pop	{r4, pc}
 800ff7e:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ff80:	2a00      	cmp	r2, #0
 800ff82:	d005      	beq.n	800ff90 <HAL_CRC_Accumulate+0x44>
 800ff84:	0092      	lsls	r2, r2, #2
 800ff86:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ff88:	c908      	ldmia	r1!, {r3}
 800ff8a:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ff8c:	428a      	cmp	r2, r1
 800ff8e:	d1fb      	bne.n	800ff88 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800ff90:	6800      	ldr	r0, [r0, #0]
      break;
 800ff92:	e7ef      	b.n	800ff74 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ff94:	f7ff ff90 	bl	800feb8 <CRC_Handle_16>
      break;
 800ff98:	e7ec      	b.n	800ff74 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800ff9a:	2002      	movs	r0, #2
 800ff9c:	e7ee      	b.n	800ff7c <HAL_CRC_Accumulate+0x30>
 800ff9e:	46c0      	nop			; (mov r8, r8)

0800ffa0 <HAL_CRC_Calculate>:
{
 800ffa0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800ffa2:	7f03      	ldrb	r3, [r0, #28]
{
 800ffa4:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d026      	beq.n	800fff8 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ffaa:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800ffac:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ffae:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ffb0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800ffb2:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800ffb4:	6898      	ldr	r0, [r3, #8]
 800ffb6:	4328      	orrs	r0, r5
 800ffb8:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800ffba:	6a20      	ldr	r0, [r4, #32]
 800ffbc:	2802      	cmp	r0, #2
 800ffbe:	d017      	beq.n	800fff0 <HAL_CRC_Calculate+0x50>
 800ffc0:	2803      	cmp	r0, #3
 800ffc2:	d007      	beq.n	800ffd4 <HAL_CRC_Calculate+0x34>
 800ffc4:	2801      	cmp	r0, #1
 800ffc6:	d00f      	beq.n	800ffe8 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ffc8:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800ffca:	2301      	movs	r3, #1
 800ffcc:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ffce:	2300      	movs	r3, #0
 800ffd0:	7723      	strb	r3, [r4, #28]
}
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ffd4:	2a00      	cmp	r2, #0
 800ffd6:	d005      	beq.n	800ffe4 <HAL_CRC_Calculate+0x44>
 800ffd8:	0092      	lsls	r2, r2, #2
 800ffda:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ffdc:	c901      	ldmia	r1!, {r0}
 800ffde:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800ffe0:	4291      	cmp	r1, r2
 800ffe2:	d1fb      	bne.n	800ffdc <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800ffe4:	6818      	ldr	r0, [r3, #0]
      break;
 800ffe6:	e7f0      	b.n	800ffca <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ffe8:	0020      	movs	r0, r4
 800ffea:	f7ff ff2f 	bl	800fe4c <CRC_Handle_8>
      break;
 800ffee:	e7ec      	b.n	800ffca <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fff0:	0020      	movs	r0, r4
 800fff2:	f7ff ff61 	bl	800feb8 <CRC_Handle_16>
      break;
 800fff6:	e7e8      	b.n	800ffca <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800fff8:	2002      	movs	r0, #2
 800fffa:	e7ea      	b.n	800ffd2 <HAL_CRC_Calculate+0x32>

0800fffc <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800fffc:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800fffe:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010000:	2501      	movs	r5, #1
 8010002:	e001      	b.n	8010008 <HAL_CRCEx_Polynomial_Set+0xc>
 8010004:	3b01      	subs	r3, #1
 8010006:	d312      	bcc.n	801002e <HAL_CRCEx_Polynomial_Set+0x32>
 8010008:	002c      	movs	r4, r5
 801000a:	409c      	lsls	r4, r3
 801000c:	4221      	tst	r1, r4
 801000e:	d0f9      	beq.n	8010004 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 8010010:	2a10      	cmp	r2, #16
 8010012:	d01c      	beq.n	801004e <HAL_CRCEx_Polynomial_Set+0x52>
 8010014:	2a18      	cmp	r2, #24
 8010016:	d012      	beq.n	801003e <HAL_CRCEx_Polynomial_Set+0x42>
 8010018:	2a08      	cmp	r2, #8
 801001a:	d014      	beq.n	8010046 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 801001c:	6800      	ldr	r0, [r0, #0]
 801001e:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010020:	2118      	movs	r1, #24
 8010022:	6883      	ldr	r3, [r0, #8]
 8010024:	438b      	bics	r3, r1
 8010026:	431a      	orrs	r2, r3
 8010028:	6082      	str	r2, [r0, #8]
 801002a:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 801002c:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 801002e:	2a10      	cmp	r2, #16
 8010030:	d003      	beq.n	801003a <HAL_CRCEx_Polynomial_Set+0x3e>
 8010032:	2a18      	cmp	r2, #24
 8010034:	d001      	beq.n	801003a <HAL_CRCEx_Polynomial_Set+0x3e>
 8010036:	2a08      	cmp	r2, #8
 8010038:	d1f0      	bne.n	801001c <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 801003a:	2001      	movs	r0, #1
 801003c:	e7f6      	b.n	801002c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 801003e:	2b06      	cmp	r3, #6
 8010040:	d9ec      	bls.n	801001c <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010042:	2001      	movs	r0, #1
 8010044:	e7f2      	b.n	801002c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010046:	2b0f      	cmp	r3, #15
 8010048:	d9e8      	bls.n	801001c <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 801004a:	2001      	movs	r0, #1
 801004c:	e7ee      	b.n	801002c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 801004e:	2b07      	cmp	r3, #7
 8010050:	d9e4      	bls.n	801001c <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 8010052:	2001      	movs	r0, #1
 8010054:	e7ea      	b.n	801002c <HAL_CRCEx_Polynomial_Set+0x30>
 8010056:	46c0      	nop			; (mov r8, r8)

08010058 <HAL_CRCEx_Init>:
{
 8010058:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801005a:	7903      	ldrb	r3, [r0, #4]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d108      	bne.n	8010072 <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010060:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010062:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 8010064:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010066:	4a07      	ldr	r2, [pc, #28]	; (8010084 <HAL_CRCEx_Init+0x2c>)
 8010068:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801006a:	689a      	ldr	r2, [r3, #8]
 801006c:	438a      	bics	r2, r1
 801006e:	609a      	str	r2, [r3, #8]
}
 8010070:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010072:	68c2      	ldr	r2, [r0, #12]
 8010074:	6881      	ldr	r1, [r0, #8]
 8010076:	f7ff ffc1 	bl	800fffc <HAL_CRCEx_Polynomial_Set>
 801007a:	1e43      	subs	r3, r0, #1
 801007c:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 801007e:	b2c0      	uxtb	r0, r0
 8010080:	e7f6      	b.n	8010070 <HAL_CRCEx_Init+0x18>
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	04c11db7 	.word	0x04c11db7

08010088 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010088:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801008a:	2800      	cmp	r0, #0
 801008c:	d023      	beq.n	80100d6 <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801008e:	2321      	movs	r3, #33	; 0x21
 8010090:	5cc3      	ldrb	r3, [r0, r3]
 8010092:	b2db      	uxtb	r3, r3
 8010094:	2b00      	cmp	r3, #0
 8010096:	d01b      	beq.n	80100d0 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010098:	2121      	movs	r1, #33	; 0x21
 801009a:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801009c:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 801009e:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 80100a0:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80100a2:	4a0e      	ldr	r2, [pc, #56]	; (80100dc <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80100a4:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80100a6:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80100a8:	6843      	ldr	r3, [r0, #4]
 80100aa:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80100ac:	68c5      	ldr	r5, [r0, #12]
 80100ae:	432b      	orrs	r3, r5
 80100b0:	6905      	ldr	r5, [r0, #16]
 80100b2:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80100b4:	6945      	ldr	r5, [r0, #20]
 80100b6:	432b      	orrs	r3, r5
 80100b8:	6985      	ldr	r5, [r0, #24]
 80100ba:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80100bc:	69c5      	ldr	r5, [r0, #28]
 80100be:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80100c0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80100c2:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80100c4:	2300      	movs	r3, #0
 80100c6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80100c8:	3301      	adds	r3, #1
 80100ca:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 80100cc:	2000      	movs	r0, #0
}  
 80100ce:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 80100d0:	2220      	movs	r2, #32
 80100d2:	5483      	strb	r3, [r0, r2]
 80100d4:	e7e0      	b.n	8010098 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 80100d6:	2001      	movs	r0, #1
 80100d8:	e7f9      	b.n	80100ce <HAL_DMA_Init+0x46>
 80100da:	46c0      	nop			; (mov r8, r8)
 80100dc:	ffffc00f 	.word	0xffffc00f

080100e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80100e0:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80100e2:	2420      	movs	r4, #32
 80100e4:	5d05      	ldrb	r5, [r0, r4]
 80100e6:	2d01      	cmp	r5, #1
 80100e8:	d023      	beq.n	8010132 <HAL_DMA_Start_IT+0x52>
 80100ea:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80100ec:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 80100ee:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 80100f0:	3401      	adds	r4, #1
 80100f2:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80100f4:	6804      	ldr	r4, [r0, #0]
 80100f6:	6825      	ldr	r5, [r4, #0]
 80100f8:	43b5      	bics	r5, r6
 80100fa:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80100fc:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80100fe:	6843      	ldr	r3, [r0, #4]
 8010100:	2b10      	cmp	r3, #16
 8010102:	d013      	beq.n	801012c <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010104:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010106:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010108:	2202      	movs	r2, #2
  return HAL_OK;    
 801010a:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801010c:	6823      	ldr	r3, [r4, #0]
 801010e:	4313      	orrs	r3, r2
 8010110:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	3202      	adds	r2, #2
 8010116:	4313      	orrs	r3, r2
 8010118:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	3204      	adds	r2, #4
 801011e:	4313      	orrs	r3, r2
 8010120:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	3a07      	subs	r2, #7
 8010126:	4313      	orrs	r3, r2
 8010128:	6023      	str	r3, [r4, #0]
} 
 801012a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801012c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 801012e:	60e1      	str	r1, [r4, #12]
 8010130:	e7ea      	b.n	8010108 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 8010132:	2002      	movs	r0, #2
 8010134:	e7f9      	b.n	801012a <HAL_DMA_Start_IT+0x4a>
 8010136:	46c0      	nop			; (mov r8, r8)

08010138 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8010138:	2101      	movs	r1, #1
 801013a:	6802      	ldr	r2, [r0, #0]
{
 801013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 801013e:	6813      	ldr	r3, [r2, #0]
{
 8010140:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010142:	438b      	bics	r3, r1
 8010144:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010146:	f7ff fad9 	bl	800f6fc <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801014a:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 801014c:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801014e:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010150:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010152:	e004      	b.n	801015e <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010154:	f7ff fad2 	bl	800f6fc <HAL_GetTick>
 8010158:	1bc0      	subs	r0, r0, r7
 801015a:	42b0      	cmp	r0, r6
 801015c:	d809      	bhi.n	8010172 <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	402b      	ands	r3, r5
 8010164:	d1f6      	bne.n	8010154 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 8010166:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 8010168:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 801016a:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 801016c:	3a01      	subs	r2, #1
 801016e:	54a3      	strb	r3, [r4, r2]
}
 8010170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010172:	2220      	movs	r2, #32
 8010174:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010176:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010178:	4313      	orrs	r3, r2
 801017a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801017c:	2321      	movs	r3, #33	; 0x21
 801017e:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010180:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8010182:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 8010184:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010186:	e7f3      	b.n	8010170 <HAL_DMA_Abort+0x38>

08010188 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010188:	6803      	ldr	r3, [r0, #0]
 801018a:	4aa2      	ldr	r2, [pc, #648]	; (8010414 <HAL_DMA_IRQHandler+0x28c>)
{        
 801018c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801018e:	0019      	movs	r1, r3
{        
 8010190:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010192:	4293      	cmp	r3, r2
 8010194:	d937      	bls.n	8010206 <HAL_DMA_IRQHandler+0x7e>
 8010196:	48a0      	ldr	r0, [pc, #640]	; (8010418 <HAL_DMA_IRQHandler+0x290>)
 8010198:	4da0      	ldr	r5, [pc, #640]	; (801041c <HAL_DMA_IRQHandler+0x294>)
 801019a:	6806      	ldr	r6, [r0, #0]
 801019c:	42ab      	cmp	r3, r5
 801019e:	d100      	bne.n	80101a2 <HAL_DMA_IRQHandler+0x1a>
 80101a0:	e0ed      	b.n	801037e <HAL_DMA_IRQHandler+0x1f6>
 80101a2:	4d9f      	ldr	r5, [pc, #636]	; (8010420 <HAL_DMA_IRQHandler+0x298>)
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	d100      	bne.n	80101aa <HAL_DMA_IRQHandler+0x22>
 80101a8:	e334      	b.n	8010814 <HAL_DMA_IRQHandler+0x68c>
 80101aa:	4d9e      	ldr	r5, [pc, #632]	; (8010424 <HAL_DMA_IRQHandler+0x29c>)
 80101ac:	42ab      	cmp	r3, r5
 80101ae:	d100      	bne.n	80101b2 <HAL_DMA_IRQHandler+0x2a>
 80101b0:	e129      	b.n	8010406 <HAL_DMA_IRQHandler+0x27e>
 80101b2:	4d9d      	ldr	r5, [pc, #628]	; (8010428 <HAL_DMA_IRQHandler+0x2a0>)
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d100      	bne.n	80101ba <HAL_DMA_IRQHandler+0x32>
 80101b8:	e34b      	b.n	8010852 <HAL_DMA_IRQHandler+0x6ca>
 80101ba:	4d9c      	ldr	r5, [pc, #624]	; (801042c <HAL_DMA_IRQHandler+0x2a4>)
 80101bc:	42ab      	cmp	r3, r5
 80101be:	d100      	bne.n	80101c2 <HAL_DMA_IRQHandler+0x3a>
 80101c0:	e38b      	b.n	80108da <HAL_DMA_IRQHandler+0x752>
 80101c2:	4d9b      	ldr	r5, [pc, #620]	; (8010430 <HAL_DMA_IRQHandler+0x2a8>)
 80101c4:	42ab      	cmp	r3, r5
 80101c6:	d100      	bne.n	80101ca <HAL_DMA_IRQHandler+0x42>
 80101c8:	e3cf      	b.n	801096a <HAL_DMA_IRQHandler+0x7e2>
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d100      	bne.n	80101d0 <HAL_DMA_IRQHandler+0x48>
 80101ce:	e35e      	b.n	801088e <HAL_DMA_IRQHandler+0x706>
 80101d0:	4a98      	ldr	r2, [pc, #608]	; (8010434 <HAL_DMA_IRQHandler+0x2ac>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d101      	bne.n	80101da <HAL_DMA_IRQHandler+0x52>
 80101d6:	f000 fbe8 	bl	80109aa <HAL_DMA_IRQHandler+0x822>
 80101da:	4a97      	ldr	r2, [pc, #604]	; (8010438 <HAL_DMA_IRQHandler+0x2b0>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d101      	bne.n	80101e4 <HAL_DMA_IRQHandler+0x5c>
 80101e0:	f000 fc04 	bl	80109ec <HAL_DMA_IRQHandler+0x864>
 80101e4:	4a95      	ldr	r2, [pc, #596]	; (801043c <HAL_DMA_IRQHandler+0x2b4>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d101      	bne.n	80101ee <HAL_DMA_IRQHandler+0x66>
 80101ea:	f000 fc21 	bl	8010a30 <HAL_DMA_IRQHandler+0x8a8>
 80101ee:	4a94      	ldr	r2, [pc, #592]	; (8010440 <HAL_DMA_IRQHandler+0x2b8>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d101      	bne.n	80101f8 <HAL_DMA_IRQHandler+0x70>
 80101f4:	f000 fc37 	bl	8010a66 <HAL_DMA_IRQHandler+0x8de>
 80101f8:	0332      	lsls	r2, r6, #12
 80101fa:	d43c      	bmi.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101fc:	4a86      	ldr	r2, [pc, #536]	; (8010418 <HAL_DMA_IRQHandler+0x290>)
 80101fe:	6810      	ldr	r0, [r2, #0]
 8010200:	2280      	movs	r2, #128	; 0x80
 8010202:	02d2      	lsls	r2, r2, #11
 8010204:	e0c0      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010206:	488f      	ldr	r0, [pc, #572]	; (8010444 <HAL_DMA_IRQHandler+0x2bc>)
 8010208:	4d84      	ldr	r5, [pc, #528]	; (801041c <HAL_DMA_IRQHandler+0x294>)
 801020a:	6806      	ldr	r6, [r0, #0]
 801020c:	42ab      	cmp	r3, r5
 801020e:	d02e      	beq.n	801026e <HAL_DMA_IRQHandler+0xe6>
 8010210:	4d83      	ldr	r5, [pc, #524]	; (8010420 <HAL_DMA_IRQHandler+0x298>)
 8010212:	42ab      	cmp	r3, r5
 8010214:	d100      	bne.n	8010218 <HAL_DMA_IRQHandler+0x90>
 8010216:	e2f6      	b.n	8010806 <HAL_DMA_IRQHandler+0x67e>
 8010218:	4d82      	ldr	r5, [pc, #520]	; (8010424 <HAL_DMA_IRQHandler+0x29c>)
 801021a:	42ab      	cmp	r3, r5
 801021c:	d100      	bne.n	8010220 <HAL_DMA_IRQHandler+0x98>
 801021e:	e0ea      	b.n	80103f6 <HAL_DMA_IRQHandler+0x26e>
 8010220:	4d81      	ldr	r5, [pc, #516]	; (8010428 <HAL_DMA_IRQHandler+0x2a0>)
 8010222:	42ab      	cmp	r3, r5
 8010224:	d100      	bne.n	8010228 <HAL_DMA_IRQHandler+0xa0>
 8010226:	e30c      	b.n	8010842 <HAL_DMA_IRQHandler+0x6ba>
 8010228:	4d80      	ldr	r5, [pc, #512]	; (801042c <HAL_DMA_IRQHandler+0x2a4>)
 801022a:	42ab      	cmp	r3, r5
 801022c:	d100      	bne.n	8010230 <HAL_DMA_IRQHandler+0xa8>
 801022e:	e35b      	b.n	80108e8 <HAL_DMA_IRQHandler+0x760>
 8010230:	4d7f      	ldr	r5, [pc, #508]	; (8010430 <HAL_DMA_IRQHandler+0x2a8>)
 8010232:	42ab      	cmp	r3, r5
 8010234:	d100      	bne.n	8010238 <HAL_DMA_IRQHandler+0xb0>
 8010236:	e390      	b.n	801095a <HAL_DMA_IRQHandler+0x7d2>
 8010238:	4293      	cmp	r3, r2
 801023a:	d100      	bne.n	801023e <HAL_DMA_IRQHandler+0xb6>
 801023c:	e31f      	b.n	801087e <HAL_DMA_IRQHandler+0x6f6>
 801023e:	4a7d      	ldr	r2, [pc, #500]	; (8010434 <HAL_DMA_IRQHandler+0x2ac>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d100      	bne.n	8010246 <HAL_DMA_IRQHandler+0xbe>
 8010244:	e3aa      	b.n	801099c <HAL_DMA_IRQHandler+0x814>
 8010246:	4a7c      	ldr	r2, [pc, #496]	; (8010438 <HAL_DMA_IRQHandler+0x2b0>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d100      	bne.n	801024e <HAL_DMA_IRQHandler+0xc6>
 801024c:	e3c7      	b.n	80109de <HAL_DMA_IRQHandler+0x856>
 801024e:	4a7b      	ldr	r2, [pc, #492]	; (801043c <HAL_DMA_IRQHandler+0x2b4>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d101      	bne.n	8010258 <HAL_DMA_IRQHandler+0xd0>
 8010254:	f000 fbe4 	bl	8010a20 <HAL_DMA_IRQHandler+0x898>
 8010258:	4a79      	ldr	r2, [pc, #484]	; (8010440 <HAL_DMA_IRQHandler+0x2b8>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d100      	bne.n	8010260 <HAL_DMA_IRQHandler+0xd8>
 801025e:	e2e8      	b.n	8010832 <HAL_DMA_IRQHandler+0x6aa>
 8010260:	0332      	lsls	r2, r6, #12
 8010262:	d408      	bmi.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010264:	4a77      	ldr	r2, [pc, #476]	; (8010444 <HAL_DMA_IRQHandler+0x2bc>)
 8010266:	6810      	ldr	r0, [r2, #0]
 8010268:	2280      	movs	r2, #128	; 0x80
 801026a:	02d2      	lsls	r2, r2, #11
 801026c:	e15f      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801026e:	0732      	lsls	r2, r6, #28
 8010270:	d401      	bmi.n	8010276 <HAL_DMA_IRQHandler+0xee>
 8010272:	f000 fc0a 	bl	8010a8a <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010276:	2208      	movs	r2, #8
 8010278:	6818      	ldr	r0, [r3, #0]
 801027a:	4202      	tst	r2, r0
 801027c:	d100      	bne.n	8010280 <HAL_DMA_IRQHandler+0xf8>
 801027e:	e1f4      	b.n	801066a <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010280:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010282:	4d66      	ldr	r5, [pc, #408]	; (801041c <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010284:	4390      	bics	r0, r2
 8010286:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010288:	4862      	ldr	r0, [pc, #392]	; (8010414 <HAL_DMA_IRQHandler+0x28c>)
 801028a:	4283      	cmp	r3, r0
 801028c:	d800      	bhi.n	8010290 <HAL_DMA_IRQHandler+0x108>
 801028e:	e1a9      	b.n	80105e4 <HAL_DMA_IRQHandler+0x45c>
 8010290:	42ab      	cmp	r3, r5
 8010292:	d100      	bne.n	8010296 <HAL_DMA_IRQHandler+0x10e>
 8010294:	e310      	b.n	80108b8 <HAL_DMA_IRQHandler+0x730>
 8010296:	4a62      	ldr	r2, [pc, #392]	; (8010420 <HAL_DMA_IRQHandler+0x298>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d100      	bne.n	801029e <HAL_DMA_IRQHandler+0x116>
 801029c:	e337      	b.n	801090e <HAL_DMA_IRQHandler+0x786>
 801029e:	4a61      	ldr	r2, [pc, #388]	; (8010424 <HAL_DMA_IRQHandler+0x29c>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d100      	bne.n	80102a6 <HAL_DMA_IRQHandler+0x11e>
 80102a4:	e2df      	b.n	8010866 <HAL_DMA_IRQHandler+0x6de>
 80102a6:	4a60      	ldr	r2, [pc, #384]	; (8010428 <HAL_DMA_IRQHandler+0x2a0>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d100      	bne.n	80102ae <HAL_DMA_IRQHandler+0x126>
 80102ac:	e370      	b.n	8010990 <HAL_DMA_IRQHandler+0x808>
 80102ae:	4a5f      	ldr	r2, [pc, #380]	; (801042c <HAL_DMA_IRQHandler+0x2a4>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d100      	bne.n	80102b6 <HAL_DMA_IRQHandler+0x12e>
 80102b4:	e38a      	b.n	80109cc <HAL_DMA_IRQHandler+0x844>
 80102b6:	4a5e      	ldr	r2, [pc, #376]	; (8010430 <HAL_DMA_IRQHandler+0x2a8>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d100      	bne.n	80102be <HAL_DMA_IRQHandler+0x136>
 80102bc:	e3a4      	b.n	8010a08 <HAL_DMA_IRQHandler+0x880>
 80102be:	4283      	cmp	r3, r0
 80102c0:	d100      	bne.n	80102c4 <HAL_DMA_IRQHandler+0x13c>
 80102c2:	e3cd      	b.n	8010a60 <HAL_DMA_IRQHandler+0x8d8>
 80102c4:	4a5b      	ldr	r2, [pc, #364]	; (8010434 <HAL_DMA_IRQHandler+0x2ac>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d100      	bne.n	80102cc <HAL_DMA_IRQHandler+0x144>
 80102ca:	e3d8      	b.n	8010a7e <HAL_DMA_IRQHandler+0x8f6>
 80102cc:	4a5a      	ldr	r2, [pc, #360]	; (8010438 <HAL_DMA_IRQHandler+0x2b0>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d100      	bne.n	80102d4 <HAL_DMA_IRQHandler+0x14c>
 80102d2:	e3d8      	b.n	8010a86 <HAL_DMA_IRQHandler+0x8fe>
 80102d4:	4a59      	ldr	r2, [pc, #356]	; (801043c <HAL_DMA_IRQHandler+0x2b4>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d100      	bne.n	80102dc <HAL_DMA_IRQHandler+0x154>
 80102da:	e2c4      	b.n	8010866 <HAL_DMA_IRQHandler+0x6de>
 80102dc:	4a5a      	ldr	r2, [pc, #360]	; (8010448 <HAL_DMA_IRQHandler+0x2c0>)
 80102de:	189a      	adds	r2, r3, r2
 80102e0:	4250      	negs	r0, r2
 80102e2:	4142      	adcs	r2, r0
 80102e4:	4859      	ldr	r0, [pc, #356]	; (801044c <HAL_DMA_IRQHandler+0x2c4>)
 80102e6:	4252      	negs	r2, r2
 80102e8:	4002      	ands	r2, r0
 80102ea:	2080      	movs	r0, #128	; 0x80
 80102ec:	0300      	lsls	r0, r0, #12
 80102ee:	4684      	mov	ip, r0
 80102f0:	4462      	add	r2, ip
 80102f2:	4849      	ldr	r0, [pc, #292]	; (8010418 <HAL_DMA_IRQHandler+0x290>)
 80102f4:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80102f6:	2001      	movs	r0, #1
 80102f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102fa:	4302      	orrs	r2, r0
 80102fc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80102fe:	2221      	movs	r2, #33	; 0x21
 8010300:	3003      	adds	r0, #3
 8010302:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010304:	2000      	movs	r0, #0
 8010306:	3a01      	subs	r2, #1
 8010308:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801030a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801030c:	2a00      	cmp	r2, #0
 801030e:	d000      	beq.n	8010312 <HAL_DMA_IRQHandler+0x18a>
 8010310:	e1a7      	b.n	8010662 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010312:	4a41      	ldr	r2, [pc, #260]	; (8010418 <HAL_DMA_IRQHandler+0x290>)
 8010314:	4d41      	ldr	r5, [pc, #260]	; (801041c <HAL_DMA_IRQHandler+0x294>)
 8010316:	6810      	ldr	r0, [r2, #0]
 8010318:	2204      	movs	r2, #4
 801031a:	42ab      	cmp	r3, r5
 801031c:	d034      	beq.n	8010388 <HAL_DMA_IRQHandler+0x200>
 801031e:	4d40      	ldr	r5, [pc, #256]	; (8010420 <HAL_DMA_IRQHandler+0x298>)
 8010320:	2240      	movs	r2, #64	; 0x40
 8010322:	42ab      	cmp	r3, r5
 8010324:	d030      	beq.n	8010388 <HAL_DMA_IRQHandler+0x200>
 8010326:	4a3f      	ldr	r2, [pc, #252]	; (8010424 <HAL_DMA_IRQHandler+0x29c>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d100      	bne.n	801032e <HAL_DMA_IRQHandler+0x1a6>
 801032c:	e3b1      	b.n	8010a92 <HAL_DMA_IRQHandler+0x90a>
 801032e:	4a3e      	ldr	r2, [pc, #248]	; (8010428 <HAL_DMA_IRQHandler+0x2a0>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d100      	bne.n	8010336 <HAL_DMA_IRQHandler+0x1ae>
 8010334:	e39e      	b.n	8010a74 <HAL_DMA_IRQHandler+0x8ec>
 8010336:	4a3d      	ldr	r2, [pc, #244]	; (801042c <HAL_DMA_IRQHandler+0x2a4>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d100      	bne.n	801033e <HAL_DMA_IRQHandler+0x1b6>
 801033c:	e760      	b.n	8010200 <HAL_DMA_IRQHandler+0x78>
 801033e:	4a3c      	ldr	r2, [pc, #240]	; (8010430 <HAL_DMA_IRQHandler+0x2a8>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d100      	bne.n	8010346 <HAL_DMA_IRQHandler+0x1be>
 8010344:	e315      	b.n	8010972 <HAL_DMA_IRQHandler+0x7ea>
 8010346:	4a33      	ldr	r2, [pc, #204]	; (8010414 <HAL_DMA_IRQHandler+0x28c>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d100      	bne.n	801034e <HAL_DMA_IRQHandler+0x1c6>
 801034c:	e2a3      	b.n	8010896 <HAL_DMA_IRQHandler+0x70e>
 801034e:	4d39      	ldr	r5, [pc, #228]	; (8010434 <HAL_DMA_IRQHandler+0x2ac>)
 8010350:	2204      	movs	r2, #4
 8010352:	42ab      	cmp	r3, r5
 8010354:	d018      	beq.n	8010388 <HAL_DMA_IRQHandler+0x200>
 8010356:	4d38      	ldr	r5, [pc, #224]	; (8010438 <HAL_DMA_IRQHandler+0x2b0>)
 8010358:	323c      	adds	r2, #60	; 0x3c
 801035a:	42ab      	cmp	r3, r5
 801035c:	d014      	beq.n	8010388 <HAL_DMA_IRQHandler+0x200>
 801035e:	4a37      	ldr	r2, [pc, #220]	; (801043c <HAL_DMA_IRQHandler+0x2b4>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d100      	bne.n	8010366 <HAL_DMA_IRQHandler+0x1de>
 8010364:	e395      	b.n	8010a92 <HAL_DMA_IRQHandler+0x90a>
 8010366:	4a38      	ldr	r2, [pc, #224]	; (8010448 <HAL_DMA_IRQHandler+0x2c0>)
 8010368:	189a      	adds	r2, r3, r2
 801036a:	4255      	negs	r5, r2
 801036c:	416a      	adcs	r2, r5
 801036e:	4d38      	ldr	r5, [pc, #224]	; (8010450 <HAL_DMA_IRQHandler+0x2c8>)
 8010370:	4252      	negs	r2, r2
 8010372:	402a      	ands	r2, r5
 8010374:	2580      	movs	r5, #128	; 0x80
 8010376:	02ed      	lsls	r5, r5, #11
 8010378:	46ac      	mov	ip, r5
 801037a:	4462      	add	r2, ip
 801037c:	e004      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801037e:	0732      	lsls	r2, r6, #28
 8010380:	d500      	bpl.n	8010384 <HAL_DMA_IRQHandler+0x1fc>
 8010382:	e778      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010384:	2204      	movs	r2, #4
 8010386:	6800      	ldr	r0, [r0, #0]
 8010388:	4210      	tst	r0, r2
 801038a:	d000      	beq.n	801038e <HAL_DMA_IRQHandler+0x206>
 801038c:	e0d1      	b.n	8010532 <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801038e:	4a22      	ldr	r2, [pc, #136]	; (8010418 <HAL_DMA_IRQHandler+0x290>)
 8010390:	6810      	ldr	r0, [r2, #0]
 8010392:	4a22      	ldr	r2, [pc, #136]	; (801041c <HAL_DMA_IRQHandler+0x294>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d100      	bne.n	801039a <HAL_DMA_IRQHandler+0x212>
 8010398:	e122      	b.n	80105e0 <HAL_DMA_IRQHandler+0x458>
 801039a:	4a21      	ldr	r2, [pc, #132]	; (8010420 <HAL_DMA_IRQHandler+0x298>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d05b      	beq.n	8010458 <HAL_DMA_IRQHandler+0x2d0>
 80103a0:	4a20      	ldr	r2, [pc, #128]	; (8010424 <HAL_DMA_IRQHandler+0x29c>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d100      	bne.n	80103a8 <HAL_DMA_IRQHandler+0x220>
 80103a6:	e19a      	b.n	80106de <HAL_DMA_IRQHandler+0x556>
 80103a8:	4a1f      	ldr	r2, [pc, #124]	; (8010428 <HAL_DMA_IRQHandler+0x2a0>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d100      	bne.n	80103b0 <HAL_DMA_IRQHandler+0x228>
 80103ae:	e237      	b.n	8010820 <HAL_DMA_IRQHandler+0x698>
 80103b0:	4a1e      	ldr	r2, [pc, #120]	; (801042c <HAL_DMA_IRQHandler+0x2a4>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d100      	bne.n	80103b8 <HAL_DMA_IRQHandler+0x230>
 80103b6:	e239      	b.n	801082c <HAL_DMA_IRQHandler+0x6a4>
 80103b8:	4a1d      	ldr	r2, [pc, #116]	; (8010430 <HAL_DMA_IRQHandler+0x2a8>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d100      	bne.n	80103c0 <HAL_DMA_IRQHandler+0x238>
 80103be:	e24f      	b.n	8010860 <HAL_DMA_IRQHandler+0x6d8>
 80103c0:	4a14      	ldr	r2, [pc, #80]	; (8010414 <HAL_DMA_IRQHandler+0x28c>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d100      	bne.n	80103c8 <HAL_DMA_IRQHandler+0x240>
 80103c6:	e297      	b.n	80108f8 <HAL_DMA_IRQHandler+0x770>
 80103c8:	4a1a      	ldr	r2, [pc, #104]	; (8010434 <HAL_DMA_IRQHandler+0x2ac>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d100      	bne.n	80103d0 <HAL_DMA_IRQHandler+0x248>
 80103ce:	e107      	b.n	80105e0 <HAL_DMA_IRQHandler+0x458>
 80103d0:	4a19      	ldr	r2, [pc, #100]	; (8010438 <HAL_DMA_IRQHandler+0x2b0>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d040      	beq.n	8010458 <HAL_DMA_IRQHandler+0x2d0>
 80103d6:	4a19      	ldr	r2, [pc, #100]	; (801043c <HAL_DMA_IRQHandler+0x2b4>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d100      	bne.n	80103de <HAL_DMA_IRQHandler+0x256>
 80103dc:	e17f      	b.n	80106de <HAL_DMA_IRQHandler+0x556>
 80103de:	4a1a      	ldr	r2, [pc, #104]	; (8010448 <HAL_DMA_IRQHandler+0x2c0>)
 80103e0:	1899      	adds	r1, r3, r2
 80103e2:	424a      	negs	r2, r1
 80103e4:	4151      	adcs	r1, r2
 80103e6:	4a1b      	ldr	r2, [pc, #108]	; (8010454 <HAL_DMA_IRQHandler+0x2cc>)
 80103e8:	4249      	negs	r1, r1
 80103ea:	400a      	ands	r2, r1
 80103ec:	2180      	movs	r1, #128	; 0x80
 80103ee:	0289      	lsls	r1, r1, #10
 80103f0:	468c      	mov	ip, r1
 80103f2:	4462      	add	r2, ip
 80103f4:	e031      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80103f6:	0532      	lsls	r2, r6, #20
 80103f8:	d500      	bpl.n	80103fc <HAL_DMA_IRQHandler+0x274>
 80103fa:	e73c      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80103fc:	2280      	movs	r2, #128	; 0x80
 80103fe:	6800      	ldr	r0, [r0, #0]
 8010400:	0019      	movs	r1, r3
 8010402:	00d2      	lsls	r2, r2, #3
 8010404:	e093      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010406:	0532      	lsls	r2, r6, #20
 8010408:	d500      	bpl.n	801040c <HAL_DMA_IRQHandler+0x284>
 801040a:	e734      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801040c:	2280      	movs	r2, #128	; 0x80
 801040e:	6800      	ldr	r0, [r0, #0]
 8010410:	00d2      	lsls	r2, r2, #3
 8010412:	e7b9      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
 8010414:	40020080 	.word	0x40020080
 8010418:	40020400 	.word	0x40020400
 801041c:	40020008 	.word	0x40020008
 8010420:	4002001c 	.word	0x4002001c
 8010424:	40020030 	.word	0x40020030
 8010428:	40020044 	.word	0x40020044
 801042c:	40020058 	.word	0x40020058
 8010430:	4002006c 	.word	0x4002006c
 8010434:	40020408 	.word	0x40020408
 8010438:	4002041c 	.word	0x4002041c
 801043c:	40020430 	.word	0x40020430
 8010440:	40020444 	.word	0x40020444
 8010444:	40020000 	.word	0x40020000
 8010448:	bffdfbbc 	.word	0xbffdfbbc
 801044c:	fff88000 	.word	0xfff88000
 8010450:	fffc4000 	.word	0xfffc4000
 8010454:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010458:	2220      	movs	r2, #32
 801045a:	4002      	ands	r2, r0
 801045c:	1e51      	subs	r1, r2, #1
 801045e:	418a      	sbcs	r2, r1
 8010460:	b2d2      	uxtb	r2, r2
 8010462:	2a00      	cmp	r2, #0
 8010464:	d050      	beq.n	8010508 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010466:	2202      	movs	r2, #2
 8010468:	6819      	ldr	r1, [r3, #0]
 801046a:	420a      	tst	r2, r1
 801046c:	d04c      	beq.n	8010508 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801046e:	6819      	ldr	r1, [r3, #0]
 8010470:	0689      	lsls	r1, r1, #26
 8010472:	d402      	bmi.n	801047a <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010474:	6819      	ldr	r1, [r3, #0]
 8010476:	4391      	bics	r1, r2
 8010478:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801047a:	4ab5      	ldr	r2, [pc, #724]	; (8010750 <HAL_DMA_IRQHandler+0x5c8>)
 801047c:	49b5      	ldr	r1, [pc, #724]	; (8010754 <HAL_DMA_IRQHandler+0x5cc>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d800      	bhi.n	8010484 <HAL_DMA_IRQHandler+0x2fc>
 8010482:	e12f      	b.n	80106e4 <HAL_DMA_IRQHandler+0x55c>
 8010484:	428b      	cmp	r3, r1
 8010486:	d100      	bne.n	801048a <HAL_DMA_IRQHandler+0x302>
 8010488:	e20e      	b.n	80108a8 <HAL_DMA_IRQHandler+0x720>
 801048a:	49b3      	ldr	r1, [pc, #716]	; (8010758 <HAL_DMA_IRQHandler+0x5d0>)
 801048c:	428b      	cmp	r3, r1
 801048e:	d100      	bne.n	8010492 <HAL_DMA_IRQHandler+0x30a>
 8010490:	e237      	b.n	8010902 <HAL_DMA_IRQHandler+0x77a>
 8010492:	49b2      	ldr	r1, [pc, #712]	; (801075c <HAL_DMA_IRQHandler+0x5d4>)
 8010494:	428b      	cmp	r3, r1
 8010496:	d100      	bne.n	801049a <HAL_DMA_IRQHandler+0x312>
 8010498:	e271      	b.n	801097e <HAL_DMA_IRQHandler+0x7f6>
 801049a:	49b1      	ldr	r1, [pc, #708]	; (8010760 <HAL_DMA_IRQHandler+0x5d8>)
 801049c:	428b      	cmp	r3, r1
 801049e:	d100      	bne.n	80104a2 <HAL_DMA_IRQHandler+0x31a>
 80104a0:	e1fc      	b.n	801089c <HAL_DMA_IRQHandler+0x714>
 80104a2:	49b0      	ldr	r1, [pc, #704]	; (8010764 <HAL_DMA_IRQHandler+0x5dc>)
 80104a4:	428b      	cmp	r3, r1
 80104a6:	d100      	bne.n	80104aa <HAL_DMA_IRQHandler+0x322>
 80104a8:	e28a      	b.n	80109c0 <HAL_DMA_IRQHandler+0x838>
 80104aa:	49af      	ldr	r1, [pc, #700]	; (8010768 <HAL_DMA_IRQHandler+0x5e0>)
 80104ac:	428b      	cmp	r3, r1
 80104ae:	d100      	bne.n	80104b2 <HAL_DMA_IRQHandler+0x32a>
 80104b0:	e2a7      	b.n	8010a02 <HAL_DMA_IRQHandler+0x87a>
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d100      	bne.n	80104b8 <HAL_DMA_IRQHandler+0x330>
 80104b6:	e2c4      	b.n	8010a42 <HAL_DMA_IRQHandler+0x8ba>
 80104b8:	4aac      	ldr	r2, [pc, #688]	; (801076c <HAL_DMA_IRQHandler+0x5e4>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d100      	bne.n	80104c0 <HAL_DMA_IRQHandler+0x338>
 80104be:	e1f3      	b.n	80108a8 <HAL_DMA_IRQHandler+0x720>
 80104c0:	4aab      	ldr	r2, [pc, #684]	; (8010770 <HAL_DMA_IRQHandler+0x5e8>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d100      	bne.n	80104c8 <HAL_DMA_IRQHandler+0x340>
 80104c6:	e21c      	b.n	8010902 <HAL_DMA_IRQHandler+0x77a>
 80104c8:	4aaa      	ldr	r2, [pc, #680]	; (8010774 <HAL_DMA_IRQHandler+0x5ec>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d100      	bne.n	80104d0 <HAL_DMA_IRQHandler+0x348>
 80104ce:	e256      	b.n	801097e <HAL_DMA_IRQHandler+0x7f6>
 80104d0:	4aa9      	ldr	r2, [pc, #676]	; (8010778 <HAL_DMA_IRQHandler+0x5f0>)
 80104d2:	4694      	mov	ip, r2
 80104d4:	4463      	add	r3, ip
 80104d6:	1e5a      	subs	r2, r3, #1
 80104d8:	4193      	sbcs	r3, r2
 80104da:	22f0      	movs	r2, #240	; 0xf0
 80104dc:	425b      	negs	r3, r3
 80104de:	0252      	lsls	r2, r2, #9
 80104e0:	4013      	ands	r3, r2
 80104e2:	2280      	movs	r2, #128	; 0x80
 80104e4:	0192      	lsls	r2, r2, #6
 80104e6:	4694      	mov	ip, r2
 80104e8:	4463      	add	r3, ip
 80104ea:	4aa4      	ldr	r2, [pc, #656]	; (801077c <HAL_DMA_IRQHandler+0x5f4>)
 80104ec:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80104ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80104f0:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80104f2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80104f4:	2321      	movs	r3, #33	; 0x21
 80104f6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80104f8:	2200      	movs	r2, #0
 80104fa:	3b01      	subs	r3, #1
 80104fc:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80104fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 8010504:	0020      	movs	r0, r4
 8010506:	4798      	blx	r3
}  
 8010508:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801050a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801050c:	489c      	ldr	r0, [pc, #624]	; (8010780 <HAL_DMA_IRQHandler+0x5f8>)
 801050e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010510:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010512:	432a      	orrs	r2, r5
 8010514:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010516:	2221      	movs	r2, #33	; 0x21
 8010518:	3503      	adds	r5, #3
 801051a:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801051c:	2500      	movs	r5, #0
 801051e:	3a01      	subs	r2, #1
 8010520:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010522:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010524:	2a00      	cmp	r2, #0
 8010526:	d000      	beq.n	801052a <HAL_DMA_IRQHandler+0x3a2>
 8010528:	e09b      	b.n	8010662 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801052a:	6800      	ldr	r0, [r0, #0]
 801052c:	2204      	movs	r2, #4
 801052e:	4210      	tst	r0, r2
 8010530:	d050      	beq.n	80105d4 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010532:	2204      	movs	r2, #4
 8010534:	6818      	ldr	r0, [r3, #0]
 8010536:	4202      	tst	r2, r0
 8010538:	d048      	beq.n	80105cc <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801053a:	6818      	ldr	r0, [r3, #0]
 801053c:	0680      	lsls	r0, r0, #26
 801053e:	d402      	bmi.n	8010546 <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	4390      	bics	r0, r2
 8010544:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010546:	4a82      	ldr	r2, [pc, #520]	; (8010750 <HAL_DMA_IRQHandler+0x5c8>)
 8010548:	4291      	cmp	r1, r2
 801054a:	d800      	bhi.n	801054e <HAL_DMA_IRQHandler+0x3c6>
 801054c:	e11e      	b.n	801078c <HAL_DMA_IRQHandler+0x604>
 801054e:	4981      	ldr	r1, [pc, #516]	; (8010754 <HAL_DMA_IRQHandler+0x5cc>)
 8010550:	428b      	cmp	r3, r1
 8010552:	d100      	bne.n	8010556 <HAL_DMA_IRQHandler+0x3ce>
 8010554:	e1ac      	b.n	80108b0 <HAL_DMA_IRQHandler+0x728>
 8010556:	4980      	ldr	r1, [pc, #512]	; (8010758 <HAL_DMA_IRQHandler+0x5d0>)
 8010558:	428b      	cmp	r3, r1
 801055a:	d100      	bne.n	801055e <HAL_DMA_IRQHandler+0x3d6>
 801055c:	e1d5      	b.n	801090a <HAL_DMA_IRQHandler+0x782>
 801055e:	497f      	ldr	r1, [pc, #508]	; (801075c <HAL_DMA_IRQHandler+0x5d4>)
 8010560:	428b      	cmp	r3, r1
 8010562:	d100      	bne.n	8010566 <HAL_DMA_IRQHandler+0x3de>
 8010564:	e188      	b.n	8010878 <HAL_DMA_IRQHandler+0x6f0>
 8010566:	497e      	ldr	r1, [pc, #504]	; (8010760 <HAL_DMA_IRQHandler+0x5d8>)
 8010568:	428b      	cmp	r3, r1
 801056a:	d100      	bne.n	801056e <HAL_DMA_IRQHandler+0x3e6>
 801056c:	e20a      	b.n	8010984 <HAL_DMA_IRQHandler+0x7fc>
 801056e:	497d      	ldr	r1, [pc, #500]	; (8010764 <HAL_DMA_IRQHandler+0x5dc>)
 8010570:	428b      	cmp	r3, r1
 8010572:	d100      	bne.n	8010576 <HAL_DMA_IRQHandler+0x3ee>
 8010574:	e22d      	b.n	80109d2 <HAL_DMA_IRQHandler+0x84a>
 8010576:	497c      	ldr	r1, [pc, #496]	; (8010768 <HAL_DMA_IRQHandler+0x5e0>)
 8010578:	428b      	cmp	r3, r1
 801057a:	d100      	bne.n	801057e <HAL_DMA_IRQHandler+0x3f6>
 801057c:	e247      	b.n	8010a0e <HAL_DMA_IRQHandler+0x886>
 801057e:	4293      	cmp	r3, r2
 8010580:	d100      	bne.n	8010584 <HAL_DMA_IRQHandler+0x3fc>
 8010582:	e264      	b.n	8010a4e <HAL_DMA_IRQHandler+0x8c6>
 8010584:	4a79      	ldr	r2, [pc, #484]	; (801076c <HAL_DMA_IRQHandler+0x5e4>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d100      	bne.n	801058c <HAL_DMA_IRQHandler+0x404>
 801058a:	e191      	b.n	80108b0 <HAL_DMA_IRQHandler+0x728>
 801058c:	4a78      	ldr	r2, [pc, #480]	; (8010770 <HAL_DMA_IRQHandler+0x5e8>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d100      	bne.n	8010594 <HAL_DMA_IRQHandler+0x40c>
 8010592:	e1ba      	b.n	801090a <HAL_DMA_IRQHandler+0x782>
 8010594:	4a77      	ldr	r2, [pc, #476]	; (8010774 <HAL_DMA_IRQHandler+0x5ec>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d100      	bne.n	801059c <HAL_DMA_IRQHandler+0x414>
 801059a:	e16d      	b.n	8010878 <HAL_DMA_IRQHandler+0x6f0>
 801059c:	4a76      	ldr	r2, [pc, #472]	; (8010778 <HAL_DMA_IRQHandler+0x5f0>)
 801059e:	189a      	adds	r2, r3, r2
 80105a0:	1e51      	subs	r1, r2, #1
 80105a2:	418a      	sbcs	r2, r1
 80105a4:	21f0      	movs	r1, #240	; 0xf0
 80105a6:	4252      	negs	r2, r2
 80105a8:	0289      	lsls	r1, r1, #10
 80105aa:	400a      	ands	r2, r1
 80105ac:	2180      	movs	r1, #128	; 0x80
 80105ae:	01c9      	lsls	r1, r1, #7
 80105b0:	468c      	mov	ip, r1
 80105b2:	4462      	add	r2, ip
 80105b4:	4971      	ldr	r1, [pc, #452]	; (801077c <HAL_DMA_IRQHandler+0x5f4>)
 80105b6:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80105b8:	2221      	movs	r2, #33	; 0x21
 80105ba:	2111      	movs	r1, #17
 80105bc:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80105be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80105c0:	2a00      	cmp	r2, #0
 80105c2:	d100      	bne.n	80105c6 <HAL_DMA_IRQHandler+0x43e>
 80105c4:	e6e3      	b.n	801038e <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 80105c6:	0020      	movs	r0, r4
 80105c8:	4790      	blx	r2
 80105ca:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105cc:	4a60      	ldr	r2, [pc, #384]	; (8010750 <HAL_DMA_IRQHandler+0x5c8>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d900      	bls.n	80105d4 <HAL_DMA_IRQHandler+0x44c>
 80105d2:	e6dc      	b.n	801038e <HAL_DMA_IRQHandler+0x206>
 80105d4:	4a6a      	ldr	r2, [pc, #424]	; (8010780 <HAL_DMA_IRQHandler+0x5f8>)
 80105d6:	6810      	ldr	r0, [r2, #0]
 80105d8:	4a5e      	ldr	r2, [pc, #376]	; (8010754 <HAL_DMA_IRQHandler+0x5cc>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d000      	beq.n	80105e0 <HAL_DMA_IRQHandler+0x458>
 80105de:	e6dc      	b.n	801039a <HAL_DMA_IRQHandler+0x212>
 80105e0:	2202      	movs	r2, #2
 80105e2:	e73a      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105e4:	42ab      	cmp	r3, r5
 80105e6:	d090      	beq.n	801050a <HAL_DMA_IRQHandler+0x382>
 80105e8:	4a5b      	ldr	r2, [pc, #364]	; (8010758 <HAL_DMA_IRQHandler+0x5d0>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d100      	bne.n	80105f0 <HAL_DMA_IRQHandler+0x468>
 80105ee:	e1a1      	b.n	8010934 <HAL_DMA_IRQHandler+0x7ac>
 80105f0:	4a5a      	ldr	r2, [pc, #360]	; (801075c <HAL_DMA_IRQHandler+0x5d4>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d100      	bne.n	80105f8 <HAL_DMA_IRQHandler+0x470>
 80105f6:	e13c      	b.n	8010872 <HAL_DMA_IRQHandler+0x6ea>
 80105f8:	4a59      	ldr	r2, [pc, #356]	; (8010760 <HAL_DMA_IRQHandler+0x5d8>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d100      	bne.n	8010600 <HAL_DMA_IRQHandler+0x478>
 80105fe:	e1ca      	b.n	8010996 <HAL_DMA_IRQHandler+0x80e>
 8010600:	4a58      	ldr	r2, [pc, #352]	; (8010764 <HAL_DMA_IRQHandler+0x5dc>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d100      	bne.n	8010608 <HAL_DMA_IRQHandler+0x480>
 8010606:	e1de      	b.n	80109c6 <HAL_DMA_IRQHandler+0x83e>
 8010608:	4a57      	ldr	r2, [pc, #348]	; (8010768 <HAL_DMA_IRQHandler+0x5e0>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d100      	bne.n	8010610 <HAL_DMA_IRQHandler+0x488>
 801060e:	e201      	b.n	8010a14 <HAL_DMA_IRQHandler+0x88c>
 8010610:	4283      	cmp	r3, r0
 8010612:	d100      	bne.n	8010616 <HAL_DMA_IRQHandler+0x48e>
 8010614:	e21e      	b.n	8010a54 <HAL_DMA_IRQHandler+0x8cc>
 8010616:	4a55      	ldr	r2, [pc, #340]	; (801076c <HAL_DMA_IRQHandler+0x5e4>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d100      	bne.n	801061e <HAL_DMA_IRQHandler+0x496>
 801061c:	e22d      	b.n	8010a7a <HAL_DMA_IRQHandler+0x8f2>
 801061e:	4a54      	ldr	r2, [pc, #336]	; (8010770 <HAL_DMA_IRQHandler+0x5e8>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d100      	bne.n	8010626 <HAL_DMA_IRQHandler+0x49e>
 8010624:	e22d      	b.n	8010a82 <HAL_DMA_IRQHandler+0x8fa>
 8010626:	4a53      	ldr	r2, [pc, #332]	; (8010774 <HAL_DMA_IRQHandler+0x5ec>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d100      	bne.n	801062e <HAL_DMA_IRQHandler+0x4a6>
 801062c:	e121      	b.n	8010872 <HAL_DMA_IRQHandler+0x6ea>
 801062e:	4a52      	ldr	r2, [pc, #328]	; (8010778 <HAL_DMA_IRQHandler+0x5f0>)
 8010630:	189a      	adds	r2, r3, r2
 8010632:	4250      	negs	r0, r2
 8010634:	4142      	adcs	r2, r0
 8010636:	4853      	ldr	r0, [pc, #332]	; (8010784 <HAL_DMA_IRQHandler+0x5fc>)
 8010638:	4252      	negs	r2, r2
 801063a:	4002      	ands	r2, r0
 801063c:	2080      	movs	r0, #128	; 0x80
 801063e:	0300      	lsls	r0, r0, #12
 8010640:	4684      	mov	ip, r0
 8010642:	4462      	add	r2, ip
 8010644:	484e      	ldr	r0, [pc, #312]	; (8010780 <HAL_DMA_IRQHandler+0x5f8>)
 8010646:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010648:	2001      	movs	r0, #1
 801064a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801064c:	4302      	orrs	r2, r0
 801064e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010650:	2221      	movs	r2, #33	; 0x21
 8010652:	3003      	adds	r0, #3
 8010654:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010656:	2000      	movs	r0, #0
 8010658:	3a01      	subs	r2, #1
 801065a:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801065c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801065e:	2a00      	cmp	r2, #0
 8010660:	d007      	beq.n	8010672 <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 8010662:	0020      	movs	r0, r4
 8010664:	4790      	blx	r2
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801066a:	4a39      	ldr	r2, [pc, #228]	; (8010750 <HAL_DMA_IRQHandler+0x5c8>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d900      	bls.n	8010672 <HAL_DMA_IRQHandler+0x4ea>
 8010670:	e64f      	b.n	8010312 <HAL_DMA_IRQHandler+0x18a>
 8010672:	4a43      	ldr	r2, [pc, #268]	; (8010780 <HAL_DMA_IRQHandler+0x5f8>)
 8010674:	6810      	ldr	r0, [r2, #0]
 8010676:	4a37      	ldr	r2, [pc, #220]	; (8010754 <HAL_DMA_IRQHandler+0x5cc>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d100      	bne.n	801067e <HAL_DMA_IRQHandler+0x4f6>
 801067c:	e756      	b.n	801052c <HAL_DMA_IRQHandler+0x3a4>
 801067e:	4a36      	ldr	r2, [pc, #216]	; (8010758 <HAL_DMA_IRQHandler+0x5d0>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d100      	bne.n	8010686 <HAL_DMA_IRQHandler+0x4fe>
 8010684:	e0c4      	b.n	8010810 <HAL_DMA_IRQHandler+0x688>
 8010686:	4a35      	ldr	r2, [pc, #212]	; (801075c <HAL_DMA_IRQHandler+0x5d4>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d100      	bne.n	801068e <HAL_DMA_IRQHandler+0x506>
 801068c:	e0cb      	b.n	8010826 <HAL_DMA_IRQHandler+0x69e>
 801068e:	4a34      	ldr	r2, [pc, #208]	; (8010760 <HAL_DMA_IRQHandler+0x5d8>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d100      	bne.n	8010696 <HAL_DMA_IRQHandler+0x50e>
 8010694:	e0d2      	b.n	801083c <HAL_DMA_IRQHandler+0x6b4>
 8010696:	4a33      	ldr	r2, [pc, #204]	; (8010764 <HAL_DMA_IRQHandler+0x5dc>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d100      	bne.n	801069e <HAL_DMA_IRQHandler+0x516>
 801069c:	e5e4      	b.n	8010268 <HAL_DMA_IRQHandler+0xe0>
 801069e:	4a32      	ldr	r2, [pc, #200]	; (8010768 <HAL_DMA_IRQHandler+0x5e0>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d100      	bne.n	80106a6 <HAL_DMA_IRQHandler+0x51e>
 80106a4:	e15e      	b.n	8010964 <HAL_DMA_IRQHandler+0x7dc>
 80106a6:	4a2a      	ldr	r2, [pc, #168]	; (8010750 <HAL_DMA_IRQHandler+0x5c8>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d100      	bne.n	80106ae <HAL_DMA_IRQHandler+0x526>
 80106ac:	e0ec      	b.n	8010888 <HAL_DMA_IRQHandler+0x700>
 80106ae:	4a2f      	ldr	r2, [pc, #188]	; (801076c <HAL_DMA_IRQHandler+0x5e4>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d100      	bne.n	80106b6 <HAL_DMA_IRQHandler+0x52e>
 80106b4:	e73a      	b.n	801052c <HAL_DMA_IRQHandler+0x3a4>
 80106b6:	4a2e      	ldr	r2, [pc, #184]	; (8010770 <HAL_DMA_IRQHandler+0x5e8>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d100      	bne.n	80106be <HAL_DMA_IRQHandler+0x536>
 80106bc:	e0a8      	b.n	8010810 <HAL_DMA_IRQHandler+0x688>
 80106be:	4a2d      	ldr	r2, [pc, #180]	; (8010774 <HAL_DMA_IRQHandler+0x5ec>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d100      	bne.n	80106c6 <HAL_DMA_IRQHandler+0x53e>
 80106c4:	e0af      	b.n	8010826 <HAL_DMA_IRQHandler+0x69e>
 80106c6:	4a2c      	ldr	r2, [pc, #176]	; (8010778 <HAL_DMA_IRQHandler+0x5f0>)
 80106c8:	189a      	adds	r2, r3, r2
 80106ca:	4255      	negs	r5, r2
 80106cc:	416a      	adcs	r2, r5
 80106ce:	4d2e      	ldr	r5, [pc, #184]	; (8010788 <HAL_DMA_IRQHandler+0x600>)
 80106d0:	4252      	negs	r2, r2
 80106d2:	402a      	ands	r2, r5
 80106d4:	2580      	movs	r5, #128	; 0x80
 80106d6:	02ed      	lsls	r5, r5, #11
 80106d8:	46ac      	mov	ip, r5
 80106da:	4462      	add	r2, ip
 80106dc:	e727      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80106de:	2280      	movs	r2, #128	; 0x80
 80106e0:	0092      	lsls	r2, r2, #2
 80106e2:	e6ba      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80106e4:	428b      	cmp	r3, r1
 80106e6:	d100      	bne.n	80106ea <HAL_DMA_IRQHandler+0x562>
 80106e8:	e0e0      	b.n	80108ac <HAL_DMA_IRQHandler+0x724>
 80106ea:	491b      	ldr	r1, [pc, #108]	; (8010758 <HAL_DMA_IRQHandler+0x5d0>)
 80106ec:	428b      	cmp	r3, r1
 80106ee:	d100      	bne.n	80106f2 <HAL_DMA_IRQHandler+0x56a>
 80106f0:	e105      	b.n	80108fe <HAL_DMA_IRQHandler+0x776>
 80106f2:	491a      	ldr	r1, [pc, #104]	; (801075c <HAL_DMA_IRQHandler+0x5d4>)
 80106f4:	428b      	cmp	r3, r1
 80106f6:	d100      	bne.n	80106fa <HAL_DMA_IRQHandler+0x572>
 80106f8:	e13e      	b.n	8010978 <HAL_DMA_IRQHandler+0x7f0>
 80106fa:	4919      	ldr	r1, [pc, #100]	; (8010760 <HAL_DMA_IRQHandler+0x5d8>)
 80106fc:	428b      	cmp	r3, r1
 80106fe:	d100      	bne.n	8010702 <HAL_DMA_IRQHandler+0x57a>
 8010700:	e0cf      	b.n	80108a2 <HAL_DMA_IRQHandler+0x71a>
 8010702:	4918      	ldr	r1, [pc, #96]	; (8010764 <HAL_DMA_IRQHandler+0x5dc>)
 8010704:	428b      	cmp	r3, r1
 8010706:	d100      	bne.n	801070a <HAL_DMA_IRQHandler+0x582>
 8010708:	e157      	b.n	80109ba <HAL_DMA_IRQHandler+0x832>
 801070a:	4917      	ldr	r1, [pc, #92]	; (8010768 <HAL_DMA_IRQHandler+0x5e0>)
 801070c:	428b      	cmp	r3, r1
 801070e:	d100      	bne.n	8010712 <HAL_DMA_IRQHandler+0x58a>
 8010710:	e174      	b.n	80109fc <HAL_DMA_IRQHandler+0x874>
 8010712:	4293      	cmp	r3, r2
 8010714:	d100      	bne.n	8010718 <HAL_DMA_IRQHandler+0x590>
 8010716:	e197      	b.n	8010a48 <HAL_DMA_IRQHandler+0x8c0>
 8010718:	4a14      	ldr	r2, [pc, #80]	; (801076c <HAL_DMA_IRQHandler+0x5e4>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d100      	bne.n	8010720 <HAL_DMA_IRQHandler+0x598>
 801071e:	e0c5      	b.n	80108ac <HAL_DMA_IRQHandler+0x724>
 8010720:	4a13      	ldr	r2, [pc, #76]	; (8010770 <HAL_DMA_IRQHandler+0x5e8>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d100      	bne.n	8010728 <HAL_DMA_IRQHandler+0x5a0>
 8010726:	e0ea      	b.n	80108fe <HAL_DMA_IRQHandler+0x776>
 8010728:	4a12      	ldr	r2, [pc, #72]	; (8010774 <HAL_DMA_IRQHandler+0x5ec>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d100      	bne.n	8010730 <HAL_DMA_IRQHandler+0x5a8>
 801072e:	e123      	b.n	8010978 <HAL_DMA_IRQHandler+0x7f0>
 8010730:	4a11      	ldr	r2, [pc, #68]	; (8010778 <HAL_DMA_IRQHandler+0x5f0>)
 8010732:	4694      	mov	ip, r2
 8010734:	4463      	add	r3, ip
 8010736:	1e5a      	subs	r2, r3, #1
 8010738:	4193      	sbcs	r3, r2
 801073a:	22f0      	movs	r2, #240	; 0xf0
 801073c:	425b      	negs	r3, r3
 801073e:	0252      	lsls	r2, r2, #9
 8010740:	4013      	ands	r3, r2
 8010742:	2280      	movs	r2, #128	; 0x80
 8010744:	0192      	lsls	r2, r2, #6
 8010746:	4694      	mov	ip, r2
 8010748:	4463      	add	r3, ip
 801074a:	4a0d      	ldr	r2, [pc, #52]	; (8010780 <HAL_DMA_IRQHandler+0x5f8>)
 801074c:	6053      	str	r3, [r2, #4]
 801074e:	e6ce      	b.n	80104ee <HAL_DMA_IRQHandler+0x366>
 8010750:	40020080 	.word	0x40020080
 8010754:	40020008 	.word	0x40020008
 8010758:	4002001c 	.word	0x4002001c
 801075c:	40020030 	.word	0x40020030
 8010760:	40020044 	.word	0x40020044
 8010764:	40020058 	.word	0x40020058
 8010768:	4002006c 	.word	0x4002006c
 801076c:	40020408 	.word	0x40020408
 8010770:	4002041c 	.word	0x4002041c
 8010774:	40020430 	.word	0x40020430
 8010778:	bffdfbbc 	.word	0xbffdfbbc
 801077c:	40020400 	.word	0x40020400
 8010780:	40020000 	.word	0x40020000
 8010784:	fff88000 	.word	0xfff88000
 8010788:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801078c:	49c2      	ldr	r1, [pc, #776]	; (8010a98 <HAL_DMA_IRQHandler+0x910>)
 801078e:	428b      	cmp	r3, r1
 8010790:	d100      	bne.n	8010794 <HAL_DMA_IRQHandler+0x60c>
 8010792:	e08f      	b.n	80108b4 <HAL_DMA_IRQHandler+0x72c>
 8010794:	49c1      	ldr	r1, [pc, #772]	; (8010a9c <HAL_DMA_IRQHandler+0x914>)
 8010796:	428b      	cmp	r3, r1
 8010798:	d100      	bne.n	801079c <HAL_DMA_IRQHandler+0x614>
 801079a:	e0b4      	b.n	8010906 <HAL_DMA_IRQHandler+0x77e>
 801079c:	49c0      	ldr	r1, [pc, #768]	; (8010aa0 <HAL_DMA_IRQHandler+0x918>)
 801079e:	428b      	cmp	r3, r1
 80107a0:	d064      	beq.n	801086c <HAL_DMA_IRQHandler+0x6e4>
 80107a2:	49c0      	ldr	r1, [pc, #768]	; (8010aa4 <HAL_DMA_IRQHandler+0x91c>)
 80107a4:	428b      	cmp	r3, r1
 80107a6:	d100      	bne.n	80107aa <HAL_DMA_IRQHandler+0x622>
 80107a8:	e0ef      	b.n	801098a <HAL_DMA_IRQHandler+0x802>
 80107aa:	49bf      	ldr	r1, [pc, #764]	; (8010aa8 <HAL_DMA_IRQHandler+0x920>)
 80107ac:	428b      	cmp	r3, r1
 80107ae:	d100      	bne.n	80107b2 <HAL_DMA_IRQHandler+0x62a>
 80107b0:	e112      	b.n	80109d8 <HAL_DMA_IRQHandler+0x850>
 80107b2:	49be      	ldr	r1, [pc, #760]	; (8010aac <HAL_DMA_IRQHandler+0x924>)
 80107b4:	428b      	cmp	r3, r1
 80107b6:	d100      	bne.n	80107ba <HAL_DMA_IRQHandler+0x632>
 80107b8:	e12f      	b.n	8010a1a <HAL_DMA_IRQHandler+0x892>
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d100      	bne.n	80107c0 <HAL_DMA_IRQHandler+0x638>
 80107be:	e14c      	b.n	8010a5a <HAL_DMA_IRQHandler+0x8d2>
 80107c0:	4abb      	ldr	r2, [pc, #748]	; (8010ab0 <HAL_DMA_IRQHandler+0x928>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d076      	beq.n	80108b4 <HAL_DMA_IRQHandler+0x72c>
 80107c6:	4abb      	ldr	r2, [pc, #748]	; (8010ab4 <HAL_DMA_IRQHandler+0x92c>)
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d100      	bne.n	80107ce <HAL_DMA_IRQHandler+0x646>
 80107cc:	e09b      	b.n	8010906 <HAL_DMA_IRQHandler+0x77e>
 80107ce:	4aba      	ldr	r2, [pc, #744]	; (8010ab8 <HAL_DMA_IRQHandler+0x930>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d04b      	beq.n	801086c <HAL_DMA_IRQHandler+0x6e4>
 80107d4:	4ab9      	ldr	r2, [pc, #740]	; (8010abc <HAL_DMA_IRQHandler+0x934>)
 80107d6:	189a      	adds	r2, r3, r2
 80107d8:	1e51      	subs	r1, r2, #1
 80107da:	418a      	sbcs	r2, r1
 80107dc:	21f0      	movs	r1, #240	; 0xf0
 80107de:	4252      	negs	r2, r2
 80107e0:	0289      	lsls	r1, r1, #10
 80107e2:	400a      	ands	r2, r1
 80107e4:	2180      	movs	r1, #128	; 0x80
 80107e6:	01c9      	lsls	r1, r1, #7
 80107e8:	468c      	mov	ip, r1
 80107ea:	4462      	add	r2, ip
 80107ec:	49b4      	ldr	r1, [pc, #720]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 80107ee:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80107f0:	2221      	movs	r2, #33	; 0x21
 80107f2:	2111      	movs	r1, #17
 80107f4:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80107f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107f8:	2a00      	cmp	r2, #0
 80107fa:	d100      	bne.n	80107fe <HAL_DMA_IRQHandler+0x676>
 80107fc:	e6ea      	b.n	80105d4 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 80107fe:	0020      	movs	r0, r4
 8010800:	4790      	blx	r2
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	e6e2      	b.n	80105cc <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010806:	0632      	lsls	r2, r6, #24
 8010808:	d500      	bpl.n	801080c <HAL_DMA_IRQHandler+0x684>
 801080a:	e534      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801080c:	0019      	movs	r1, r3
 801080e:	6800      	ldr	r0, [r0, #0]
 8010810:	2240      	movs	r2, #64	; 0x40
 8010812:	e68c      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010814:	0632      	lsls	r2, r6, #24
 8010816:	d500      	bpl.n	801081a <HAL_DMA_IRQHandler+0x692>
 8010818:	e52d      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801081a:	6800      	ldr	r0, [r0, #0]
 801081c:	2240      	movs	r2, #64	; 0x40
 801081e:	e5b3      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010820:	2280      	movs	r2, #128	; 0x80
 8010822:	0192      	lsls	r2, r2, #6
 8010824:	e619      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010826:	2280      	movs	r2, #128	; 0x80
 8010828:	00d2      	lsls	r2, r2, #3
 801082a:	e680      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801082c:	2280      	movs	r2, #128	; 0x80
 801082e:	0292      	lsls	r2, r2, #10
 8010830:	e613      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010832:	0432      	lsls	r2, r6, #16
 8010834:	d500      	bpl.n	8010838 <HAL_DMA_IRQHandler+0x6b0>
 8010836:	e51e      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010838:	4aa1      	ldr	r2, [pc, #644]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 801083a:	6810      	ldr	r0, [r2, #0]
 801083c:	2280      	movs	r2, #128	; 0x80
 801083e:	01d2      	lsls	r2, r2, #7
 8010840:	e675      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010842:	0432      	lsls	r2, r6, #16
 8010844:	d500      	bpl.n	8010848 <HAL_DMA_IRQHandler+0x6c0>
 8010846:	e516      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010848:	2280      	movs	r2, #128	; 0x80
 801084a:	6800      	ldr	r0, [r0, #0]
 801084c:	0019      	movs	r1, r3
 801084e:	01d2      	lsls	r2, r2, #7
 8010850:	e66d      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010852:	0432      	lsls	r2, r6, #16
 8010854:	d500      	bpl.n	8010858 <HAL_DMA_IRQHandler+0x6d0>
 8010856:	e50e      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010858:	2280      	movs	r2, #128	; 0x80
 801085a:	6800      	ldr	r0, [r0, #0]
 801085c:	01d2      	lsls	r2, r2, #7
 801085e:	e593      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010860:	2280      	movs	r2, #128	; 0x80
 8010862:	0392      	lsls	r2, r2, #14
 8010864:	e5f9      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010866:	2280      	movs	r2, #128	; 0x80
 8010868:	0112      	lsls	r2, r2, #4
 801086a:	e542      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801086c:	2280      	movs	r2, #128	; 0x80
 801086e:	00d2      	lsls	r2, r2, #3
 8010870:	e7bc      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010872:	2280      	movs	r2, #128	; 0x80
 8010874:	0112      	lsls	r2, r2, #4
 8010876:	e6e5      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010878:	2280      	movs	r2, #128	; 0x80
 801087a:	00d2      	lsls	r2, r2, #3
 801087c:	e69a      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801087e:	0132      	lsls	r2, r6, #4
 8010880:	d500      	bpl.n	8010884 <HAL_DMA_IRQHandler+0x6fc>
 8010882:	e4f8      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010884:	0019      	movs	r1, r3
 8010886:	6800      	ldr	r0, [r0, #0]
 8010888:	2280      	movs	r2, #128	; 0x80
 801088a:	04d2      	lsls	r2, r2, #19
 801088c:	e64f      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801088e:	0132      	lsls	r2, r6, #4
 8010890:	d500      	bpl.n	8010894 <HAL_DMA_IRQHandler+0x70c>
 8010892:	e4f0      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010894:	6800      	ldr	r0, [r0, #0]
 8010896:	2280      	movs	r2, #128	; 0x80
 8010898:	04d2      	lsls	r2, r2, #19
 801089a:	e575      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801089c:	2380      	movs	r3, #128	; 0x80
 801089e:	019b      	lsls	r3, r3, #6
 80108a0:	e623      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
 80108a2:	2380      	movs	r3, #128	; 0x80
 80108a4:	019b      	lsls	r3, r3, #6
 80108a6:	e750      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
 80108a8:	2302      	movs	r3, #2
 80108aa:	e61e      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
 80108ac:	2302      	movs	r3, #2
 80108ae:	e74c      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80108b0:	2204      	movs	r2, #4
 80108b2:	e67f      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
 80108b4:	2204      	movs	r2, #4
 80108b6:	e799      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108b8:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108ba:	4882      	ldr	r0, [pc, #520]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 80108bc:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80108c0:	432a      	orrs	r2, r5
 80108c2:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80108c4:	2221      	movs	r2, #33	; 0x21
 80108c6:	3503      	adds	r5, #3
 80108c8:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80108ca:	2500      	movs	r5, #0
 80108cc:	3a01      	subs	r2, #1
 80108ce:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	d000      	beq.n	80108d8 <HAL_DMA_IRQHandler+0x750>
 80108d6:	e6c4      	b.n	8010662 <HAL_DMA_IRQHandler+0x4da>
 80108d8:	e554      	b.n	8010384 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108da:	0332      	lsls	r2, r6, #12
 80108dc:	d500      	bpl.n	80108e0 <HAL_DMA_IRQHandler+0x758>
 80108de:	e4ca      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108e0:	2280      	movs	r2, #128	; 0x80
 80108e2:	6800      	ldr	r0, [r0, #0]
 80108e4:	02d2      	lsls	r2, r2, #11
 80108e6:	e54f      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108e8:	0332      	lsls	r2, r6, #12
 80108ea:	d500      	bpl.n	80108ee <HAL_DMA_IRQHandler+0x766>
 80108ec:	e4c3      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108ee:	2280      	movs	r2, #128	; 0x80
 80108f0:	6800      	ldr	r0, [r0, #0]
 80108f2:	0019      	movs	r1, r3
 80108f4:	02d2      	lsls	r2, r2, #11
 80108f6:	e61a      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80108f8:	2280      	movs	r2, #128	; 0x80
 80108fa:	0492      	lsls	r2, r2, #18
 80108fc:	e5ad      	b.n	801045a <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108fe:	2320      	movs	r3, #32
 8010900:	e723      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
 8010902:	2320      	movs	r3, #32
 8010904:	e5f1      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010906:	2240      	movs	r2, #64	; 0x40
 8010908:	e770      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
 801090a:	2240      	movs	r2, #64	; 0x40
 801090c:	e652      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801090e:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010910:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010912:	486c      	ldr	r0, [pc, #432]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 8010914:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010916:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010918:	432a      	orrs	r2, r5
 801091a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801091c:	2221      	movs	r2, #33	; 0x21
 801091e:	3503      	adds	r5, #3
 8010920:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010922:	2500      	movs	r5, #0
 8010924:	3a01      	subs	r2, #1
 8010926:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010928:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801092a:	2a00      	cmp	r2, #0
 801092c:	d000      	beq.n	8010930 <HAL_DMA_IRQHandler+0x7a8>
 801092e:	e698      	b.n	8010662 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010930:	6800      	ldr	r0, [r0, #0]
 8010932:	e4f4      	b.n	801031e <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010934:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010936:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010938:	4861      	ldr	r0, [pc, #388]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 801093a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801093c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801093e:	432a      	orrs	r2, r5
 8010940:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010942:	2221      	movs	r2, #33	; 0x21
 8010944:	3503      	adds	r5, #3
 8010946:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010948:	2500      	movs	r5, #0
 801094a:	3a01      	subs	r2, #1
 801094c:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801094e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010950:	2a00      	cmp	r2, #0
 8010952:	d000      	beq.n	8010956 <HAL_DMA_IRQHandler+0x7ce>
 8010954:	e685      	b.n	8010662 <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010956:	6800      	ldr	r0, [r0, #0]
 8010958:	e691      	b.n	801067e <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801095a:	0232      	lsls	r2, r6, #8
 801095c:	d500      	bpl.n	8010960 <HAL_DMA_IRQHandler+0x7d8>
 801095e:	e48a      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010960:	0019      	movs	r1, r3
 8010962:	6800      	ldr	r0, [r0, #0]
 8010964:	2280      	movs	r2, #128	; 0x80
 8010966:	03d2      	lsls	r2, r2, #15
 8010968:	e5e1      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801096a:	0232      	lsls	r2, r6, #8
 801096c:	d500      	bpl.n	8010970 <HAL_DMA_IRQHandler+0x7e8>
 801096e:	e482      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010970:	6800      	ldr	r0, [r0, #0]
 8010972:	2280      	movs	r2, #128	; 0x80
 8010974:	03d2      	lsls	r2, r2, #15
 8010976:	e507      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010978:	2380      	movs	r3, #128	; 0x80
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	e6e5      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
 801097e:	2380      	movs	r3, #128	; 0x80
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	e5b2      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010984:	2280      	movs	r2, #128	; 0x80
 8010986:	01d2      	lsls	r2, r2, #7
 8010988:	e614      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
 801098a:	2280      	movs	r2, #128	; 0x80
 801098c:	01d2      	lsls	r2, r2, #7
 801098e:	e72d      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010990:	2280      	movs	r2, #128	; 0x80
 8010992:	0212      	lsls	r2, r2, #8
 8010994:	e4ad      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
 8010996:	2280      	movs	r2, #128	; 0x80
 8010998:	0212      	lsls	r2, r2, #8
 801099a:	e653      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801099c:	0732      	lsls	r2, r6, #28
 801099e:	d500      	bpl.n	80109a2 <HAL_DMA_IRQHandler+0x81a>
 80109a0:	e469      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109a2:	4a47      	ldr	r2, [pc, #284]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 80109a4:	6810      	ldr	r0, [r2, #0]
 80109a6:	2204      	movs	r2, #4
 80109a8:	e5c1      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80109aa:	0732      	lsls	r2, r6, #28
 80109ac:	d500      	bpl.n	80109b0 <HAL_DMA_IRQHandler+0x828>
 80109ae:	e462      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109b0:	4a44      	ldr	r2, [pc, #272]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 80109b2:	493f      	ldr	r1, [pc, #252]	; (8010ab0 <HAL_DMA_IRQHandler+0x928>)
 80109b4:	6810      	ldr	r0, [r2, #0]
 80109b6:	2204      	movs	r2, #4
 80109b8:	e4e6      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80109ba:	2380      	movs	r3, #128	; 0x80
 80109bc:	029b      	lsls	r3, r3, #10
 80109be:	e6c4      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
 80109c0:	2380      	movs	r3, #128	; 0x80
 80109c2:	029b      	lsls	r3, r3, #10
 80109c4:	e591      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109c6:	2280      	movs	r2, #128	; 0x80
 80109c8:	0312      	lsls	r2, r2, #12
 80109ca:	e63b      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
 80109cc:	2280      	movs	r2, #128	; 0x80
 80109ce:	0312      	lsls	r2, r2, #12
 80109d0:	e48f      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80109d2:	2280      	movs	r2, #128	; 0x80
 80109d4:	02d2      	lsls	r2, r2, #11
 80109d6:	e5ed      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
 80109d8:	2280      	movs	r2, #128	; 0x80
 80109da:	02d2      	lsls	r2, r2, #11
 80109dc:	e706      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80109de:	0632      	lsls	r2, r6, #24
 80109e0:	d500      	bpl.n	80109e4 <HAL_DMA_IRQHandler+0x85c>
 80109e2:	e448      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109e4:	4a36      	ldr	r2, [pc, #216]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 80109e6:	6810      	ldr	r0, [r2, #0]
 80109e8:	2240      	movs	r2, #64	; 0x40
 80109ea:	e5a0      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80109ec:	0632      	lsls	r2, r6, #24
 80109ee:	d500      	bpl.n	80109f2 <HAL_DMA_IRQHandler+0x86a>
 80109f0:	e441      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109f2:	4a34      	ldr	r2, [pc, #208]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 80109f4:	492f      	ldr	r1, [pc, #188]	; (8010ab4 <HAL_DMA_IRQHandler+0x92c>)
 80109f6:	6810      	ldr	r0, [r2, #0]
 80109f8:	2240      	movs	r2, #64	; 0x40
 80109fa:	e4c5      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80109fc:	2380      	movs	r3, #128	; 0x80
 80109fe:	039b      	lsls	r3, r3, #14
 8010a00:	e6a3      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
 8010a02:	2380      	movs	r3, #128	; 0x80
 8010a04:	039b      	lsls	r3, r3, #14
 8010a06:	e570      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a08:	2280      	movs	r2, #128	; 0x80
 8010a0a:	0412      	lsls	r2, r2, #16
 8010a0c:	e471      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a0e:	2280      	movs	r2, #128	; 0x80
 8010a10:	03d2      	lsls	r2, r2, #15
 8010a12:	e5cf      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a14:	2280      	movs	r2, #128	; 0x80
 8010a16:	0412      	lsls	r2, r2, #16
 8010a18:	e614      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a1a:	2280      	movs	r2, #128	; 0x80
 8010a1c:	03d2      	lsls	r2, r2, #15
 8010a1e:	e6e5      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010a20:	0532      	lsls	r2, r6, #20
 8010a22:	d500      	bpl.n	8010a26 <HAL_DMA_IRQHandler+0x89e>
 8010a24:	e427      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a26:	4a26      	ldr	r2, [pc, #152]	; (8010ac0 <HAL_DMA_IRQHandler+0x938>)
 8010a28:	6810      	ldr	r0, [r2, #0]
 8010a2a:	2280      	movs	r2, #128	; 0x80
 8010a2c:	00d2      	lsls	r2, r2, #3
 8010a2e:	e57e      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010a30:	0532      	lsls	r2, r6, #20
 8010a32:	d500      	bpl.n	8010a36 <HAL_DMA_IRQHandler+0x8ae>
 8010a34:	e41f      	b.n	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a36:	4a23      	ldr	r2, [pc, #140]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 8010a38:	0019      	movs	r1, r3
 8010a3a:	6810      	ldr	r0, [r2, #0]
 8010a3c:	2280      	movs	r2, #128	; 0x80
 8010a3e:	00d2      	lsls	r2, r2, #3
 8010a40:	e4a2      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a42:	2380      	movs	r3, #128	; 0x80
 8010a44:	049b      	lsls	r3, r3, #18
 8010a46:	e550      	b.n	80104ea <HAL_DMA_IRQHandler+0x362>
 8010a48:	2380      	movs	r3, #128	; 0x80
 8010a4a:	049b      	lsls	r3, r3, #18
 8010a4c:	e67d      	b.n	801074a <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a4e:	2280      	movs	r2, #128	; 0x80
 8010a50:	04d2      	lsls	r2, r2, #19
 8010a52:	e5af      	b.n	80105b4 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a54:	2280      	movs	r2, #128	; 0x80
 8010a56:	0512      	lsls	r2, r2, #20
 8010a58:	e5f4      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a5a:	2280      	movs	r2, #128	; 0x80
 8010a5c:	04d2      	lsls	r2, r2, #19
 8010a5e:	e6c5      	b.n	80107ec <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a60:	2280      	movs	r2, #128	; 0x80
 8010a62:	0512      	lsls	r2, r2, #20
 8010a64:	e445      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010a66:	0432      	lsls	r2, r6, #16
 8010a68:	d501      	bpl.n	8010a6e <HAL_DMA_IRQHandler+0x8e6>
 8010a6a:	f7ff fc04 	bl	8010276 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a6e:	0019      	movs	r1, r3
 8010a70:	4a14      	ldr	r2, [pc, #80]	; (8010ac4 <HAL_DMA_IRQHandler+0x93c>)
 8010a72:	6810      	ldr	r0, [r2, #0]
 8010a74:	2280      	movs	r2, #128	; 0x80
 8010a76:	01d2      	lsls	r2, r2, #7
 8010a78:	e486      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a7a:	2208      	movs	r2, #8
 8010a7c:	e5e2      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
 8010a7e:	2208      	movs	r2, #8
 8010a80:	e437      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
 8010a82:	2280      	movs	r2, #128	; 0x80
 8010a84:	e5de      	b.n	8010644 <HAL_DMA_IRQHandler+0x4bc>
 8010a86:	2280      	movs	r2, #128	; 0x80
 8010a88:	e433      	b.n	80102f2 <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a8a:	6800      	ldr	r0, [r0, #0]
 8010a8c:	0019      	movs	r1, r3
 8010a8e:	2204      	movs	r2, #4
 8010a90:	e54d      	b.n	801052e <HAL_DMA_IRQHandler+0x3a6>
 8010a92:	2280      	movs	r2, #128	; 0x80
 8010a94:	00d2      	lsls	r2, r2, #3
 8010a96:	e477      	b.n	8010388 <HAL_DMA_IRQHandler+0x200>
 8010a98:	40020008 	.word	0x40020008
 8010a9c:	4002001c 	.word	0x4002001c
 8010aa0:	40020030 	.word	0x40020030
 8010aa4:	40020044 	.word	0x40020044
 8010aa8:	40020058 	.word	0x40020058
 8010aac:	4002006c 	.word	0x4002006c
 8010ab0:	40020408 	.word	0x40020408
 8010ab4:	4002041c 	.word	0x4002041c
 8010ab8:	40020430 	.word	0x40020430
 8010abc:	bffdfbbc 	.word	0xbffdfbbc
 8010ac0:	40020000 	.word	0x40020000
 8010ac4:	40020400 	.word	0x40020400

08010ac8 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010ac8:	4b05      	ldr	r3, [pc, #20]	; (8010ae0 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8010aca:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010acc:	691a      	ldr	r2, [r3, #16]
 8010ace:	0612      	lsls	r2, r2, #24
 8010ad0:	d504      	bpl.n	8010adc <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 8010ad2:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010ad4:	4a03      	ldr	r2, [pc, #12]	; (8010ae4 <HAL_FLASH_Unlock+0x1c>)
 8010ad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010ad8:	4a03      	ldr	r2, [pc, #12]	; (8010ae8 <HAL_FLASH_Unlock+0x20>)
 8010ada:	605a      	str	r2, [r3, #4]
}
 8010adc:	4770      	bx	lr
 8010ade:	46c0      	nop			; (mov r8, r8)
 8010ae0:	40022000 	.word	0x40022000
 8010ae4:	45670123 	.word	0x45670123
 8010ae8:	cdef89ab 	.word	0xcdef89ab

08010aec <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010aec:	2180      	movs	r1, #128	; 0x80
 8010aee:	4a03      	ldr	r2, [pc, #12]	; (8010afc <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8010af0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010af2:	6913      	ldr	r3, [r2, #16]
 8010af4:	430b      	orrs	r3, r1
 8010af6:	6113      	str	r3, [r2, #16]
}
 8010af8:	4770      	bx	lr
 8010afa:	46c0      	nop			; (mov r8, r8)
 8010afc:	40022000 	.word	0x40022000

08010b00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b02:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010b04:	f7fe fdfa 	bl	800f6fc <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010b08:	4c1d      	ldr	r4, [pc, #116]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 8010b0a:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010b0c:	2601      	movs	r6, #1
 8010b0e:	e001      	b.n	8010b14 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010b10:	1c6b      	adds	r3, r5, #1
 8010b12:	d11d      	bne.n	8010b50 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010b14:	68e3      	ldr	r3, [r4, #12]
 8010b16:	421e      	tst	r6, r3
 8010b18:	d1fa      	bne.n	8010b10 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010b1a:	2320      	movs	r3, #32
 8010b1c:	68e2      	ldr	r2, [r4, #12]
 8010b1e:	4213      	tst	r3, r2
 8010b20:	d000      	beq.n	8010b24 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010b22:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010b24:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
 8010b26:	68da      	ldr	r2, [r3, #12]
 8010b28:	06d2      	lsls	r2, r2, #27
 8010b2a:	d51a      	bpl.n	8010b62 <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010b2c:	4b14      	ldr	r3, [pc, #80]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	06db      	lsls	r3, r3, #27
 8010b32:	d504      	bpl.n	8010b3e <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010b34:	2102      	movs	r1, #2
 8010b36:	4a13      	ldr	r2, [pc, #76]	; (8010b84 <FLASH_WaitForLastOperation+0x84>)
 8010b38:	69d3      	ldr	r3, [r2, #28]
 8010b3a:	430b      	orrs	r3, r1
 8010b3c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010b3e:	4b10      	ldr	r3, [pc, #64]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	075b      	lsls	r3, r3, #29
 8010b44:	d416      	bmi.n	8010b74 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010b46:	2214      	movs	r2, #20
    return HAL_ERROR;
 8010b48:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010b4a:	4b0d      	ldr	r3, [pc, #52]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
 8010b4c:	60da      	str	r2, [r3, #12]
}
 8010b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	d004      	beq.n	8010b5e <FLASH_WaitForLastOperation+0x5e>
 8010b54:	f7fe fdd2 	bl	800f6fc <HAL_GetTick>
 8010b58:	1bc0      	subs	r0, r0, r7
 8010b5a:	42a8      	cmp	r0, r5
 8010b5c:	d9da      	bls.n	8010b14 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8010b5e:	2003      	movs	r0, #3
 8010b60:	e7f5      	b.n	8010b4e <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010b62:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010b64:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010b66:	075b      	lsls	r3, r3, #29
 8010b68:	d5f1      	bpl.n	8010b4e <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010b6a:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <FLASH_WaitForLastOperation+0x80>)
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	06db      	lsls	r3, r3, #27
 8010b70:	d5e5      	bpl.n	8010b3e <FLASH_WaitForLastOperation+0x3e>
 8010b72:	e7df      	b.n	8010b34 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010b74:	2101      	movs	r1, #1
 8010b76:	4a03      	ldr	r2, [pc, #12]	; (8010b84 <FLASH_WaitForLastOperation+0x84>)
 8010b78:	69d3      	ldr	r3, [r2, #28]
 8010b7a:	430b      	orrs	r3, r1
 8010b7c:	61d3      	str	r3, [r2, #28]
 8010b7e:	e7e2      	b.n	8010b46 <FLASH_WaitForLastOperation+0x46>
 8010b80:	40022000 	.word	0x40022000
 8010b84:	200072b0 	.word	0x200072b0

08010b88 <HAL_FLASH_Program>:
{
 8010b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b8a:	464e      	mov	r6, r9
 8010b8c:	4657      	mov	r7, sl
 8010b8e:	46de      	mov	lr, fp
 8010b90:	4645      	mov	r5, r8
 8010b92:	b5e0      	push	{r5, r6, r7, lr}
 8010b94:	469a      	mov	sl, r3
 8010b96:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010b98:	4b2a      	ldr	r3, [pc, #168]	; (8010c44 <HAL_FLASH_Program+0xbc>)
{
 8010b9a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010b9c:	4699      	mov	r9, r3
 8010b9e:	7e1b      	ldrb	r3, [r3, #24]
{
 8010ba0:	0004      	movs	r4, r0
 8010ba2:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d048      	beq.n	8010c3a <HAL_FLASH_Program+0xb2>
 8010ba8:	2501      	movs	r5, #1
 8010baa:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bac:	4826      	ldr	r0, [pc, #152]	; (8010c48 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010bae:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bb0:	f7ff ffa6 	bl	8010b00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d136      	bne.n	8010c26 <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010bb8:	2c01      	cmp	r4, #1
 8010bba:	d040      	beq.n	8010c3e <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010bbc:	3c02      	subs	r4, #2
 8010bbe:	4263      	negs	r3, r4
 8010bc0:	415c      	adcs	r4, r3
 8010bc2:	2304      	movs	r3, #4
 8010bc4:	4264      	negs	r4, r4
 8010bc6:	43ac      	bics	r4, r5
 8010bc8:	46a0      	mov	r8, r4
 8010bca:	469c      	mov	ip, r3
 8010bcc:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010bce:	2300      	movs	r3, #0
      nbiterations = 4;
 8010bd0:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010bd2:	469b      	mov	fp, r3
 8010bd4:	e018      	b.n	8010c08 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010bd6:	4653      	mov	r3, sl
 8010bd8:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010bda:	464a      	mov	r2, r9
 8010bdc:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010bde:	2701      	movs	r7, #1
 8010be0:	4c1a      	ldr	r4, [pc, #104]	; (8010c4c <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010be2:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010be4:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010be6:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010be8:	433a      	orrs	r2, r7
 8010bea:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bec:	4816      	ldr	r0, [pc, #88]	; (8010c48 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010bee:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bf0:	f7ff ff86 	bl	8010b00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010bf4:	6923      	ldr	r3, [r4, #16]
 8010bf6:	43bb      	bics	r3, r7
 8010bf8:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d113      	bne.n	8010c26 <HAL_FLASH_Program+0x9e>
 8010bfe:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010c00:	b2eb      	uxtb	r3, r5
 8010c02:	3602      	adds	r6, #2
 8010c04:	4598      	cmp	r8, r3
 8010c06:	d90e      	bls.n	8010c26 <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010c08:	2220      	movs	r2, #32
 8010c0a:	012b      	lsls	r3, r5, #4
 8010c0c:	4252      	negs	r2, r2
 8010c0e:	189a      	adds	r2, r3, r2
 8010c10:	d5e1      	bpl.n	8010bd6 <HAL_FLASH_Program+0x4e>
 8010c12:	2220      	movs	r2, #32
 8010c14:	4651      	mov	r1, sl
 8010c16:	1ad2      	subs	r2, r2, r3
 8010c18:	4091      	lsls	r1, r2
 8010c1a:	000a      	movs	r2, r1
 8010c1c:	9901      	ldr	r1, [sp, #4]
 8010c1e:	40d9      	lsrs	r1, r3
 8010c20:	000b      	movs	r3, r1
 8010c22:	4313      	orrs	r3, r2
 8010c24:	e7d9      	b.n	8010bda <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8010c26:	2300      	movs	r3, #0
 8010c28:	464a      	mov	r2, r9
 8010c2a:	7613      	strb	r3, [r2, #24]
}
 8010c2c:	b003      	add	sp, #12
 8010c2e:	bc3c      	pop	{r2, r3, r4, r5}
 8010c30:	4690      	mov	r8, r2
 8010c32:	4699      	mov	r9, r3
 8010c34:	46a2      	mov	sl, r4
 8010c36:	46ab      	mov	fp, r5
 8010c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010c3a:	2002      	movs	r0, #2
 8010c3c:	e7f6      	b.n	8010c2c <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	4698      	mov	r8, r3
 8010c42:	e7c4      	b.n	8010bce <HAL_FLASH_Program+0x46>
 8010c44:	200072b0 	.word	0x200072b0
 8010c48:	0000c350 	.word	0x0000c350
 8010c4c:	40022000 	.word	0x40022000

08010c50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c52:	464f      	mov	r7, r9
 8010c54:	4646      	mov	r6, r8
 8010c56:	46d6      	mov	lr, sl
 8010c58:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010c5a:	4f30      	ldr	r7, [pc, #192]	; (8010d1c <HAL_FLASHEx_Erase+0xcc>)
{
 8010c5c:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010c5e:	7e3b      	ldrb	r3, [r7, #24]
{
 8010c60:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d057      	beq.n	8010d16 <HAL_FLASHEx_Erase+0xc6>
 8010c66:	2301      	movs	r3, #1
 8010c68:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010c6a:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c6c:	482c      	ldr	r0, [pc, #176]	; (8010d20 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	d034      	beq.n	8010cdc <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c72:	f7ff ff45 	bl	8010b00 <FLASH_WaitForLastOperation>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d134      	bne.n	8010ce4 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	464a      	mov	r2, r9
 8010c7e:	425b      	negs	r3, r3
 8010c80:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010c82:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010c84:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010c86:	02db      	lsls	r3, r3, #11
 8010c88:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010c8a:	429d      	cmp	r5, r3
 8010c8c:	d22a      	bcs.n	8010ce4 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c8e:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010c90:	4c24      	ldr	r4, [pc, #144]	; (8010d24 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010c92:	4698      	mov	r8, r3
 8010c94:	e00a      	b.n	8010cac <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010c96:	2380      	movs	r3, #128	; 0x80
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010c9c:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010c9e:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010ca0:	4694      	mov	ip, r2
 8010ca2:	68b3      	ldr	r3, [r6, #8]
 8010ca4:	02db      	lsls	r3, r3, #11
 8010ca6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010ca8:	42ab      	cmp	r3, r5
 8010caa:	d91c      	bls.n	8010ce6 <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010cac:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010cae:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010cb0:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010cb2:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010cb4:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010cb6:	481a      	ldr	r0, [pc, #104]	; (8010d20 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010cbc:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010cbe:	6923      	ldr	r3, [r4, #16]
 8010cc0:	323e      	adds	r2, #62	; 0x3e
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010cc6:	f7ff ff1b 	bl	8010b00 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010cca:	4652      	mov	r2, sl
 8010ccc:	6923      	ldr	r3, [r4, #16]
 8010cce:	4393      	bics	r3, r2
 8010cd0:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d0df      	beq.n	8010c96 <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	601d      	str	r5, [r3, #0]
            break;
 8010cda:	e004      	b.n	8010ce6 <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010cdc:	f7ff ff10 	bl	8010b00 <FLASH_WaitForLastOperation>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d007      	beq.n	8010cf4 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010ce4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	763b      	strb	r3, [r7, #24]
}
 8010cea:	bc1c      	pop	{r2, r3, r4}
 8010cec:	4690      	mov	r8, r2
 8010cee:	4699      	mov	r9, r3
 8010cf0:	46a2      	mov	sl, r4
 8010cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010cf4:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010cf6:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010cf8:	4c0a      	ldr	r4, [pc, #40]	; (8010d24 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010cfa:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010cfc:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010cfe:	4808      	ldr	r0, [pc, #32]	; (8010d20 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010d00:	432b      	orrs	r3, r5
 8010d02:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010d04:	6923      	ldr	r3, [r4, #16]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010d0a:	f7ff fef9 	bl	8010b00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	43ab      	bics	r3, r5
 8010d12:	6123      	str	r3, [r4, #16]
 8010d14:	e7e7      	b.n	8010ce6 <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010d16:	2002      	movs	r0, #2
 8010d18:	e7e7      	b.n	8010cea <HAL_FLASHEx_Erase+0x9a>
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	200072b0 	.word	0x200072b0
 8010d20:	0000c350 	.word	0x0000c350
 8010d24:	40022000 	.word	0x40022000

08010d28 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d28:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010d2a:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d2c:	4b05      	ldr	r3, [pc, #20]	; (8010d44 <FLASH_PageErase+0x1c>)
 8010d2e:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010d30:	4b05      	ldr	r3, [pc, #20]	; (8010d48 <FLASH_PageErase+0x20>)
 8010d32:	691a      	ldr	r2, [r3, #16]
 8010d34:	430a      	orrs	r2, r1
 8010d36:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010d38:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010d3a:	691a      	ldr	r2, [r3, #16]
 8010d3c:	313e      	adds	r1, #62	; 0x3e
 8010d3e:	430a      	orrs	r2, r1
 8010d40:	611a      	str	r2, [r3, #16]
}
 8010d42:	4770      	bx	lr
 8010d44:	200072b0 	.word	0x200072b0
 8010d48:	40022000 	.word	0x40022000

08010d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d4e:	464e      	mov	r6, r9
 8010d50:	46de      	mov	lr, fp
 8010d52:	4657      	mov	r7, sl
 8010d54:	4645      	mov	r5, r8
 8010d56:	b5e0      	push	{r5, r6, r7, lr}
 8010d58:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010d5a:	6809      	ldr	r1, [r1, #0]
{ 
 8010d5c:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010d5e:	2900      	cmp	r1, #0
 8010d60:	d100      	bne.n	8010d64 <HAL_GPIO_Init+0x18>
 8010d62:	e080      	b.n	8010e66 <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d64:	4b70      	ldr	r3, [pc, #448]	; (8010f28 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010d66:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d68:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010d6a:	4b70      	ldr	r3, [pc, #448]	; (8010f2c <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010d6c:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010d6e:	4698      	mov	r8, r3
 8010d70:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010d72:	0033      	movs	r3, r6
 8010d74:	4652      	mov	r2, sl
 8010d76:	40a3      	lsls	r3, r4
 8010d78:	4013      	ands	r3, r2
 8010d7a:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010d7c:	d06f      	beq.n	8010e5e <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010d7e:	464b      	mov	r3, r9
 8010d80:	6859      	ldr	r1, [r3, #4]
 8010d82:	2310      	movs	r3, #16
 8010d84:	000f      	movs	r7, r1
 8010d86:	439f      	bics	r7, r3
 8010d88:	003b      	movs	r3, r7
 8010d8a:	9701      	str	r7, [sp, #4]
 8010d8c:	2f02      	cmp	r7, #2
 8010d8e:	d100      	bne.n	8010d92 <HAL_GPIO_Init+0x46>
 8010d90:	e070      	b.n	8010e74 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010d92:	2203      	movs	r2, #3
 8010d94:	0065      	lsls	r5, r4, #1
 8010d96:	40aa      	lsls	r2, r5
 8010d98:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010d9a:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010d9c:	4013      	ands	r3, r2
 8010d9e:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010da0:	2303      	movs	r3, #3
 8010da2:	400b      	ands	r3, r1
 8010da4:	40ab      	lsls	r3, r5
 8010da6:	469c      	mov	ip, r3
 8010da8:	003b      	movs	r3, r7
 8010daa:	4667      	mov	r7, ip
 8010dac:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010dae:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010db0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010db2:	3f01      	subs	r7, #1
 8010db4:	2f01      	cmp	r7, #1
 8010db6:	d800      	bhi.n	8010dba <HAL_GPIO_Init+0x6e>
 8010db8:	e079      	b.n	8010eae <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010dba:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010dbc:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010dbe:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010dc0:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010dc2:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010dc4:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010dc6:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010dc8:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010dca:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010dcc:	4219      	tst	r1, r3
 8010dce:	d046      	beq.n	8010e5e <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010dd0:	465b      	mov	r3, fp
 8010dd2:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010dd4:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010dd6:	4332      	orrs	r2, r6
 8010dd8:	619a      	str	r2, [r3, #24]
 8010dda:	699a      	ldr	r2, [r3, #24]
 8010ddc:	4b54      	ldr	r3, [pc, #336]	; (8010f30 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010dde:	4027      	ands	r7, r4
 8010de0:	469c      	mov	ip, r3
 8010de2:	230f      	movs	r3, #15
 8010de4:	00bf      	lsls	r7, r7, #2
 8010de6:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010de8:	4032      	ands	r2, r6
 8010dea:	9203      	str	r2, [sp, #12]
 8010dec:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010dee:	08a2      	lsrs	r2, r4, #2
 8010df0:	0092      	lsls	r2, r2, #2
 8010df2:	4462      	add	r2, ip
 8010df4:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010df6:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010df8:	2390      	movs	r3, #144	; 0x90
 8010dfa:	05db      	lsls	r3, r3, #23
 8010dfc:	4298      	cmp	r0, r3
 8010dfe:	d012      	beq.n	8010e26 <HAL_GPIO_Init+0xda>
 8010e00:	4b4c      	ldr	r3, [pc, #304]	; (8010f34 <HAL_GPIO_Init+0x1e8>)
 8010e02:	4298      	cmp	r0, r3
 8010e04:	d100      	bne.n	8010e08 <HAL_GPIO_Init+0xbc>
 8010e06:	e083      	b.n	8010f10 <HAL_GPIO_Init+0x1c4>
 8010e08:	4b4b      	ldr	r3, [pc, #300]	; (8010f38 <HAL_GPIO_Init+0x1ec>)
 8010e0a:	4298      	cmp	r0, r3
 8010e0c:	d100      	bne.n	8010e10 <HAL_GPIO_Init+0xc4>
 8010e0e:	e07b      	b.n	8010f08 <HAL_GPIO_Init+0x1bc>
 8010e10:	4b4a      	ldr	r3, [pc, #296]	; (8010f3c <HAL_GPIO_Init+0x1f0>)
 8010e12:	4298      	cmp	r0, r3
 8010e14:	d100      	bne.n	8010e18 <HAL_GPIO_Init+0xcc>
 8010e16:	e07f      	b.n	8010f18 <HAL_GPIO_Init+0x1cc>
 8010e18:	4b49      	ldr	r3, [pc, #292]	; (8010f40 <HAL_GPIO_Init+0x1f4>)
 8010e1a:	4298      	cmp	r0, r3
 8010e1c:	d100      	bne.n	8010e20 <HAL_GPIO_Init+0xd4>
 8010e1e:	e07f      	b.n	8010f20 <HAL_GPIO_Init+0x1d4>
 8010e20:	2305      	movs	r3, #5
 8010e22:	40bb      	lsls	r3, r7
 8010e24:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010e26:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010e28:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010e2a:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010e30:	03cb      	lsls	r3, r1, #15
 8010e32:	d451      	bmi.n	8010ed8 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010e34:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010e36:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010e38:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010e3a:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010e3c:	038b      	lsls	r3, r1, #14
 8010e3e:	d452      	bmi.n	8010ee6 <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010e40:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010e42:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010e44:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010e46:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010e48:	02cb      	lsls	r3, r1, #11
 8010e4a:	d453      	bmi.n	8010ef4 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010e4c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010e4e:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010e50:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010e52:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010e54:	028b      	lsls	r3, r1, #10
 8010e56:	d454      	bmi.n	8010f02 <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010e58:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010e5a:	4643      	mov	r3, r8
 8010e5c:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010e5e:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010e60:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010e62:	40e3      	lsrs	r3, r4
 8010e64:	d185      	bne.n	8010d72 <HAL_GPIO_Init+0x26>
  } 
}
 8010e66:	b005      	add	sp, #20
 8010e68:	bc3c      	pop	{r2, r3, r4, r5}
 8010e6a:	4690      	mov	r8, r2
 8010e6c:	4699      	mov	r9, r3
 8010e6e:	46a2      	mov	sl, r4
 8010e70:	46ab      	mov	fp, r5
 8010e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010e74:	2507      	movs	r5, #7
 8010e76:	4025      	ands	r5, r4
 8010e78:	00ad      	lsls	r5, r5, #2
 8010e7a:	330d      	adds	r3, #13
 8010e7c:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010e7e:	08e2      	lsrs	r2, r4, #3
 8010e80:	0092      	lsls	r2, r2, #2
 8010e82:	1882      	adds	r2, r0, r2
 8010e84:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010e86:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010e88:	464b      	mov	r3, r9
 8010e8a:	691b      	ldr	r3, [r3, #16]
 8010e8c:	40ab      	lsls	r3, r5
 8010e8e:	001d      	movs	r5, r3
 8010e90:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010e92:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010e94:	2203      	movs	r2, #3
 8010e96:	0065      	lsls	r5, r4, #1
 8010e98:	40aa      	lsls	r2, r5
 8010e9a:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010e9c:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010e9e:	4017      	ands	r7, r2
 8010ea0:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010ea2:	2703      	movs	r7, #3
 8010ea4:	400f      	ands	r7, r1
 8010ea6:	40af      	lsls	r7, r5
 8010ea8:	4663      	mov	r3, ip
 8010eaa:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010eac:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010eae:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010eb0:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010eb2:	4017      	ands	r7, r2
 8010eb4:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010eb6:	68df      	ldr	r7, [r3, #12]
 8010eb8:	4663      	mov	r3, ip
 8010eba:	40af      	lsls	r7, r5
 8010ebc:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010ebe:	0033      	movs	r3, r6
 8010ec0:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010ec2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010ec4:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010ec6:	439f      	bics	r7, r3
 8010ec8:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010eca:	090f      	lsrs	r7, r1, #4
 8010ecc:	4037      	ands	r7, r6
 8010ece:	40a7      	lsls	r7, r4
 8010ed0:	4663      	mov	r3, ip
 8010ed2:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010ed4:	6047      	str	r7, [r0, #4]
 8010ed6:	e770      	b.n	8010dba <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010ed8:	9b00      	ldr	r3, [sp, #0]
 8010eda:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010edc:	4643      	mov	r3, r8
 8010ede:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010ee0:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010ee2:	038b      	lsls	r3, r1, #14
 8010ee4:	d5ac      	bpl.n	8010e40 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010ee6:	9b00      	ldr	r3, [sp, #0]
 8010ee8:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010eea:	4643      	mov	r3, r8
 8010eec:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010eee:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010ef0:	02cb      	lsls	r3, r1, #11
 8010ef2:	d5ab      	bpl.n	8010e4c <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010ef4:	9b00      	ldr	r3, [sp, #0]
 8010ef6:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010ef8:	4643      	mov	r3, r8
 8010efa:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010efc:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010efe:	028b      	lsls	r3, r1, #10
 8010f00:	d5aa      	bpl.n	8010e58 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010f02:	9b00      	ldr	r3, [sp, #0]
 8010f04:	431a      	orrs	r2, r3
 8010f06:	e7a8      	b.n	8010e5a <HAL_GPIO_Init+0x10e>
 8010f08:	2302      	movs	r3, #2
 8010f0a:	40bb      	lsls	r3, r7
 8010f0c:	431d      	orrs	r5, r3
 8010f0e:	e78a      	b.n	8010e26 <HAL_GPIO_Init+0xda>
 8010f10:	0033      	movs	r3, r6
 8010f12:	40bb      	lsls	r3, r7
 8010f14:	431d      	orrs	r5, r3
 8010f16:	e786      	b.n	8010e26 <HAL_GPIO_Init+0xda>
 8010f18:	2303      	movs	r3, #3
 8010f1a:	40bb      	lsls	r3, r7
 8010f1c:	431d      	orrs	r5, r3
 8010f1e:	e782      	b.n	8010e26 <HAL_GPIO_Init+0xda>
 8010f20:	2304      	movs	r3, #4
 8010f22:	40bb      	lsls	r3, r7
 8010f24:	431d      	orrs	r5, r3
 8010f26:	e77e      	b.n	8010e26 <HAL_GPIO_Init+0xda>
 8010f28:	40021000 	.word	0x40021000
 8010f2c:	40010400 	.word	0x40010400
 8010f30:	40010000 	.word	0x40010000
 8010f34:	48000400 	.word	0x48000400
 8010f38:	48000800 	.word	0x48000800
 8010f3c:	48000c00 	.word	0x48000c00
 8010f40:	48001000 	.word	0x48001000

08010f44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f46:	46de      	mov	lr, fp
 8010f48:	4657      	mov	r7, sl
 8010f4a:	464e      	mov	r6, r9
 8010f4c:	4645      	mov	r5, r8
 8010f4e:	b5e0      	push	{r5, r6, r7, lr}
 8010f50:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010f52:	2900      	cmp	r1, #0
 8010f54:	d055      	beq.n	8011002 <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010f56:	2201      	movs	r2, #1
 8010f58:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010f5a:	3202      	adds	r2, #2
 8010f5c:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010f5e:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010f60:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010f62:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010f64:	4666      	mov	r6, ip
 8010f66:	000d      	movs	r5, r1
 8010f68:	409e      	lsls	r6, r3
 8010f6a:	4035      	ands	r5, r6
    if (iocurrent)
 8010f6c:	d045      	beq.n	8010ffa <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010f6e:	4647      	mov	r7, r8
 8010f70:	005c      	lsls	r4, r3, #1
 8010f72:	40a7      	lsls	r7, r4
 8010f74:	43fc      	mvns	r4, r7
 8010f76:	6802      	ldr	r2, [r0, #0]
 8010f78:	4022      	ands	r2, r4
 8010f7a:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010f7c:	08da      	lsrs	r2, r3, #3
 8010f7e:	0092      	lsls	r2, r2, #2
 8010f80:	1887      	adds	r7, r0, r2
 8010f82:	9701      	str	r7, [sp, #4]
 8010f84:	6a3f      	ldr	r7, [r7, #32]
 8010f86:	46ba      	mov	sl, r7
 8010f88:	2707      	movs	r7, #7
 8010f8a:	401f      	ands	r7, r3
 8010f8c:	00bf      	lsls	r7, r7, #2
 8010f8e:	46bb      	mov	fp, r7
 8010f90:	464f      	mov	r7, r9
 8010f92:	465a      	mov	r2, fp
 8010f94:	4097      	lsls	r7, r2
 8010f96:	46bb      	mov	fp, r7
 8010f98:	4657      	mov	r7, sl
 8010f9a:	465a      	mov	r2, fp
 8010f9c:	4397      	bics	r7, r2
 8010f9e:	003a      	movs	r2, r7
 8010fa0:	9f01      	ldr	r7, [sp, #4]
 8010fa2:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010fa4:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fa6:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010fa8:	4022      	ands	r2, r4
 8010faa:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010fac:	6842      	ldr	r2, [r0, #4]
 8010fae:	43b2      	bics	r2, r6
 8010fb0:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010fb2:	68c2      	ldr	r2, [r0, #12]
 8010fb4:	4014      	ands	r4, r2
 8010fb6:	60c4      	str	r4, [r0, #12]
 8010fb8:	4c2b      	ldr	r4, [pc, #172]	; (8011068 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010fba:	089a      	lsrs	r2, r3, #2
 8010fbc:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fbe:	4644      	mov	r4, r8
 8010fc0:	401c      	ands	r4, r3
 8010fc2:	00a4      	lsls	r4, r4, #2
 8010fc4:	40a7      	lsls	r7, r4
 8010fc6:	0092      	lsls	r2, r2, #2
 8010fc8:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010fca:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fcc:	46ba      	mov	sl, r7
 8010fce:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010fd0:	2790      	movs	r7, #144	; 0x90
 8010fd2:	05ff      	lsls	r7, r7, #23
 8010fd4:	42b8      	cmp	r0, r7
 8010fd6:	d01b      	beq.n	8011010 <HAL_GPIO_DeInit+0xcc>
 8010fd8:	4f24      	ldr	r7, [pc, #144]	; (801106c <HAL_GPIO_DeInit+0x128>)
 8010fda:	42b8      	cmp	r0, r7
 8010fdc:	d033      	beq.n	8011046 <HAL_GPIO_DeInit+0x102>
 8010fde:	4f24      	ldr	r7, [pc, #144]	; (8011070 <HAL_GPIO_DeInit+0x12c>)
 8010fe0:	42b8      	cmp	r0, r7
 8010fe2:	d038      	beq.n	8011056 <HAL_GPIO_DeInit+0x112>
 8010fe4:	4f23      	ldr	r7, [pc, #140]	; (8011074 <HAL_GPIO_DeInit+0x130>)
 8010fe6:	42b8      	cmp	r0, r7
 8010fe8:	d039      	beq.n	801105e <HAL_GPIO_DeInit+0x11a>
 8010fea:	4f23      	ldr	r7, [pc, #140]	; (8011078 <HAL_GPIO_DeInit+0x134>)
 8010fec:	42b8      	cmp	r0, r7
 8010fee:	d02e      	beq.n	801104e <HAL_GPIO_DeInit+0x10a>
 8010ff0:	2705      	movs	r7, #5
 8010ff2:	40a7      	lsls	r7, r4
 8010ff4:	003c      	movs	r4, r7
 8010ff6:	42a6      	cmp	r6, r4
 8010ff8:	d00d      	beq.n	8011016 <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010ffa:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010ffc:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010ffe:	40da      	lsrs	r2, r3
 8011000:	d1b0      	bne.n	8010f64 <HAL_GPIO_DeInit+0x20>
  }
}
 8011002:	b003      	add	sp, #12
 8011004:	bc3c      	pop	{r2, r3, r4, r5}
 8011006:	4690      	mov	r8, r2
 8011008:	4699      	mov	r9, r3
 801100a:	46a2      	mov	sl, r4
 801100c:	46ab      	mov	fp, r5
 801100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011010:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011012:	42a6      	cmp	r6, r4
 8011014:	d1f1      	bne.n	8010ffa <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011016:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011018:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801101a:	6894      	ldr	r4, [r2, #8]
    position++;
 801101c:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801101e:	43b4      	bics	r4, r6
 8011020:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011022:	4c16      	ldr	r4, [pc, #88]	; (801107c <HAL_GPIO_DeInit+0x138>)
 8011024:	6822      	ldr	r2, [r4, #0]
 8011026:	402a      	ands	r2, r5
 8011028:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 801102a:	6862      	ldr	r2, [r4, #4]
 801102c:	402a      	ands	r2, r5
 801102e:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011030:	68a2      	ldr	r2, [r4, #8]
 8011032:	402a      	ands	r2, r5
 8011034:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011036:	68e2      	ldr	r2, [r4, #12]
 8011038:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 801103a:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801103c:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 801103e:	40da      	lsrs	r2, r3
 8011040:	d000      	beq.n	8011044 <HAL_GPIO_DeInit+0x100>
 8011042:	e78f      	b.n	8010f64 <HAL_GPIO_DeInit+0x20>
 8011044:	e7dd      	b.n	8011002 <HAL_GPIO_DeInit+0xbe>
 8011046:	4667      	mov	r7, ip
 8011048:	40a7      	lsls	r7, r4
 801104a:	003c      	movs	r4, r7
 801104c:	e7e1      	b.n	8011012 <HAL_GPIO_DeInit+0xce>
 801104e:	2704      	movs	r7, #4
 8011050:	40a7      	lsls	r7, r4
 8011052:	003c      	movs	r4, r7
 8011054:	e7dd      	b.n	8011012 <HAL_GPIO_DeInit+0xce>
 8011056:	2702      	movs	r7, #2
 8011058:	40a7      	lsls	r7, r4
 801105a:	003c      	movs	r4, r7
 801105c:	e7d9      	b.n	8011012 <HAL_GPIO_DeInit+0xce>
 801105e:	4647      	mov	r7, r8
 8011060:	40a7      	lsls	r7, r4
 8011062:	003c      	movs	r4, r7
 8011064:	e7d5      	b.n	8011012 <HAL_GPIO_DeInit+0xce>
 8011066:	46c0      	nop			; (mov r8, r8)
 8011068:	40010000 	.word	0x40010000
 801106c:	48000400 	.word	0x48000400
 8011070:	48000800 	.word	0x48000800
 8011074:	48000c00 	.word	0x48000c00
 8011078:	48001000 	.word	0x48001000
 801107c:	40010400 	.word	0x40010400

08011080 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011080:	6900      	ldr	r0, [r0, #16]
 8011082:	4008      	ands	r0, r1
 8011084:	1e41      	subs	r1, r0, #1
 8011086:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011088:	b2c0      	uxtb	r0, r0
  }
 801108a:	4770      	bx	lr

0801108c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801108c:	2a00      	cmp	r2, #0
 801108e:	d101      	bne.n	8011094 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011090:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011092:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011094:	6181      	str	r1, [r0, #24]
 8011096:	e7fc      	b.n	8011092 <HAL_GPIO_WritePin+0x6>

08011098 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011098:	6943      	ldr	r3, [r0, #20]
 801109a:	4059      	eors	r1, r3
 801109c:	6141      	str	r1, [r0, #20]
}
 801109e:	4770      	bx	lr

080110a0 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80110a0:	4770      	bx	lr
 80110a2:	46c0      	nop			; (mov r8, r8)

080110a4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80110a4:	2380      	movs	r3, #128	; 0x80
 80110a6:	4a03      	ldr	r2, [pc, #12]	; (80110b4 <HAL_PWR_EnableBkUpAccess+0x10>)
 80110a8:	005b      	lsls	r3, r3, #1
 80110aa:	6811      	ldr	r1, [r2, #0]
 80110ac:	430b      	orrs	r3, r1
 80110ae:	6013      	str	r3, [r2, #0]
}
 80110b0:	4770      	bx	lr
 80110b2:	46c0      	nop			; (mov r8, r8)
 80110b4:	40007000 	.word	0x40007000

080110b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80110b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ba:	46c6      	mov	lr, r8
 80110bc:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80110be:	6803      	ldr	r3, [r0, #0]
{
 80110c0:	b082      	sub	sp, #8
 80110c2:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80110c4:	07da      	lsls	r2, r3, #31
 80110c6:	d54b      	bpl.n	8011160 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80110c8:	210c      	movs	r1, #12
 80110ca:	48c4      	ldr	r0, [pc, #784]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80110cc:	6842      	ldr	r2, [r0, #4]
 80110ce:	400a      	ands	r2, r1
 80110d0:	2a04      	cmp	r2, #4
 80110d2:	d100      	bne.n	80110d6 <HAL_RCC_OscConfig+0x1e>
 80110d4:	e153      	b.n	801137e <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80110d6:	6842      	ldr	r2, [r0, #4]
 80110d8:	4011      	ands	r1, r2
 80110da:	2908      	cmp	r1, #8
 80110dc:	d108      	bne.n	80110f0 <HAL_RCC_OscConfig+0x38>
 80110de:	21c0      	movs	r1, #192	; 0xc0
 80110e0:	6842      	ldr	r2, [r0, #4]
 80110e2:	0249      	lsls	r1, r1, #9
 80110e4:	400a      	ands	r2, r1
 80110e6:	2180      	movs	r1, #128	; 0x80
 80110e8:	0249      	lsls	r1, r1, #9
 80110ea:	428a      	cmp	r2, r1
 80110ec:	d100      	bne.n	80110f0 <HAL_RCC_OscConfig+0x38>
 80110ee:	e146      	b.n	801137e <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80110f0:	4dba      	ldr	r5, [pc, #744]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80110f2:	4abb      	ldr	r2, [pc, #748]	; (80113e0 <HAL_RCC_OscConfig+0x328>)
 80110f4:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80110f6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80110f8:	4013      	ands	r3, r2
 80110fa:	602b      	str	r3, [r5, #0]
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	4ab9      	ldr	r2, [pc, #740]	; (80113e4 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011100:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011102:	4013      	ands	r3, r2
 8011104:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011106:	f7fe faf9 	bl	800f6fc <HAL_GetTick>
 801110a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801110c:	e005      	b.n	801111a <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801110e:	f7fe faf5 	bl	800f6fc <HAL_GetTick>
 8011112:	1bc0      	subs	r0, r0, r7
 8011114:	2864      	cmp	r0, #100	; 0x64
 8011116:	d900      	bls.n	801111a <HAL_RCC_OscConfig+0x62>
 8011118:	e13b      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801111a:	682b      	ldr	r3, [r5, #0]
 801111c:	4233      	tst	r3, r6
 801111e:	d1f6      	bne.n	801110e <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011120:	6863      	ldr	r3, [r4, #4]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d100      	bne.n	8011128 <HAL_RCC_OscConfig+0x70>
 8011126:	e196      	b.n	8011456 <HAL_RCC_OscConfig+0x39e>
 8011128:	2b00      	cmp	r3, #0
 801112a:	d000      	beq.n	801112e <HAL_RCC_OscConfig+0x76>
 801112c:	e1bc      	b.n	80114a8 <HAL_RCC_OscConfig+0x3f0>
 801112e:	682b      	ldr	r3, [r5, #0]
 8011130:	4aab      	ldr	r2, [pc, #684]	; (80113e0 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011132:	4eaa      	ldr	r6, [pc, #680]	; (80113dc <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011134:	4013      	ands	r3, r2
 8011136:	602b      	str	r3, [r5, #0]
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	4aaa      	ldr	r2, [pc, #680]	; (80113e4 <HAL_RCC_OscConfig+0x32c>)
 801113c:	4013      	ands	r3, r2
 801113e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011140:	f7fe fadc 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011144:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011146:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011148:	02ad      	lsls	r5, r5, #10
 801114a:	e005      	b.n	8011158 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801114c:	f7fe fad6 	bl	800f6fc <HAL_GetTick>
 8011150:	1bc0      	subs	r0, r0, r7
 8011152:	2864      	cmp	r0, #100	; 0x64
 8011154:	d900      	bls.n	8011158 <HAL_RCC_OscConfig+0xa0>
 8011156:	e11c      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011158:	6833      	ldr	r3, [r6, #0]
 801115a:	422b      	tst	r3, r5
 801115c:	d1f6      	bne.n	801114c <HAL_RCC_OscConfig+0x94>
 801115e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011160:	079a      	lsls	r2, r3, #30
 8011162:	d529      	bpl.n	80111b8 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011164:	220c      	movs	r2, #12
 8011166:	499d      	ldr	r1, [pc, #628]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 8011168:	6848      	ldr	r0, [r1, #4]
 801116a:	4202      	tst	r2, r0
 801116c:	d100      	bne.n	8011170 <HAL_RCC_OscConfig+0xb8>
 801116e:	e0fd      	b.n	801136c <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011170:	6848      	ldr	r0, [r1, #4]
 8011172:	4002      	ands	r2, r0
 8011174:	2a08      	cmp	r2, #8
 8011176:	d100      	bne.n	801117a <HAL_RCC_OscConfig+0xc2>
 8011178:	e0ef      	b.n	801135a <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801117a:	68e3      	ldr	r3, [r4, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d100      	bne.n	8011182 <HAL_RCC_OscConfig+0xca>
 8011180:	e138      	b.n	80113f4 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011182:	2201      	movs	r2, #1
 8011184:	4f95      	ldr	r7, [pc, #596]	; (80113dc <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011186:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	4313      	orrs	r3, r2
 801118c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 801118e:	f7fe fab5 	bl	800f6fc <HAL_GetTick>
 8011192:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011194:	e005      	b.n	80111a2 <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011196:	f7fe fab1 	bl	800f6fc <HAL_GetTick>
 801119a:	1b80      	subs	r0, r0, r6
 801119c:	2864      	cmp	r0, #100	; 0x64
 801119e:	d900      	bls.n	80111a2 <HAL_RCC_OscConfig+0xea>
 80111a0:	e0f7      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	421d      	tst	r5, r3
 80111a6:	d0f6      	beq.n	8011196 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80111a8:	21f8      	movs	r1, #248	; 0xf8
 80111aa:	683a      	ldr	r2, [r7, #0]
 80111ac:	6923      	ldr	r3, [r4, #16]
 80111ae:	438a      	bics	r2, r1
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	4313      	orrs	r3, r2
 80111b4:	603b      	str	r3, [r7, #0]
 80111b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80111b8:	071a      	lsls	r2, r3, #28
 80111ba:	d45d      	bmi.n	8011278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111bc:	075a      	lsls	r2, r3, #29
 80111be:	d474      	bmi.n	80112aa <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80111c0:	06da      	lsls	r2, r3, #27
 80111c2:	d512      	bpl.n	80111ea <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80111c4:	6962      	ldr	r2, [r4, #20]
 80111c6:	2a01      	cmp	r2, #1
 80111c8:	d100      	bne.n	80111cc <HAL_RCC_OscConfig+0x114>
 80111ca:	e18c      	b.n	80114e6 <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80111cc:	3205      	adds	r2, #5
 80111ce:	d000      	beq.n	80111d2 <HAL_RCC_OscConfig+0x11a>
 80111d0:	e124      	b.n	801141c <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80111d2:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80111d4:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80111d6:	4981      	ldr	r1, [pc, #516]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80111d8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80111da:	4382      	bics	r2, r0
 80111dc:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80111de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80111e0:	69a2      	ldr	r2, [r4, #24]
 80111e2:	43a8      	bics	r0, r5
 80111e4:	00d2      	lsls	r2, r2, #3
 80111e6:	4302      	orrs	r2, r0
 80111e8:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80111ea:	069b      	lsls	r3, r3, #26
 80111ec:	d522      	bpl.n	8011234 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80111ee:	220c      	movs	r2, #12
 80111f0:	497a      	ldr	r1, [pc, #488]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80111f2:	684b      	ldr	r3, [r1, #4]
 80111f4:	4013      	ands	r3, r2
 80111f6:	2b0c      	cmp	r3, #12
 80111f8:	d100      	bne.n	80111fc <HAL_RCC_OscConfig+0x144>
 80111fa:	e14a      	b.n	8011492 <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80111fc:	684b      	ldr	r3, [r1, #4]
 80111fe:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011200:	2a08      	cmp	r2, #8
 8011202:	d100      	bne.n	8011206 <HAL_RCC_OscConfig+0x14e>
 8011204:	e13e      	b.n	8011484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011206:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011208:	4d74      	ldr	r5, [pc, #464]	; (80113dc <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801120a:	2b00      	cmp	r3, #0
 801120c:	d100      	bne.n	8011210 <HAL_RCC_OscConfig+0x158>
 801120e:	e156      	b.n	80114be <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8011210:	2680      	movs	r6, #128	; 0x80
 8011212:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011214:	0276      	lsls	r6, r6, #9
 8011216:	4333      	orrs	r3, r6
 8011218:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 801121a:	f7fe fa6f 	bl	800f6fc <HAL_GetTick>
 801121e:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011220:	e005      	b.n	801122e <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011222:	f7fe fa6b 	bl	800f6fc <HAL_GetTick>
 8011226:	1bc0      	subs	r0, r0, r7
 8011228:	2864      	cmp	r0, #100	; 0x64
 801122a:	d900      	bls.n	801122e <HAL_RCC_OscConfig+0x176>
 801122c:	e0b1      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801122e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011230:	4233      	tst	r3, r6
 8011232:	d0f6      	beq.n	8011222 <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011236:	2b00      	cmp	r3, #0
 8011238:	d01c      	beq.n	8011274 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801123a:	220c      	movs	r2, #12
 801123c:	4d67      	ldr	r5, [pc, #412]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 801123e:	6869      	ldr	r1, [r5, #4]
 8011240:	400a      	ands	r2, r1
 8011242:	2a08      	cmp	r2, #8
 8011244:	d100      	bne.n	8011248 <HAL_RCC_OscConfig+0x190>
 8011246:	e098      	b.n	801137a <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011248:	2b02      	cmp	r3, #2
 801124a:	d100      	bne.n	801124e <HAL_RCC_OscConfig+0x196>
 801124c:	e16a      	b.n	8011524 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801124e:	682b      	ldr	r3, [r5, #0]
 8011250:	4a65      	ldr	r2, [pc, #404]	; (80113e8 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011252:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011254:	4013      	ands	r3, r2
 8011256:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011258:	f7fe fa50 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801125c:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 801125e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011260:	e005      	b.n	801126e <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011262:	f7fe fa4b 	bl	800f6fc <HAL_GetTick>
 8011266:	1b80      	subs	r0, r0, r6
 8011268:	2864      	cmp	r0, #100	; 0x64
 801126a:	d900      	bls.n	801126e <HAL_RCC_OscConfig+0x1b6>
 801126c:	e091      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801126e:	682b      	ldr	r3, [r5, #0]
 8011270:	4223      	tst	r3, r4
 8011272:	d1f6      	bne.n	8011262 <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011274:	2000      	movs	r0, #0
 8011276:	e08d      	b.n	8011394 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011278:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 801127a:	4d58      	ldr	r5, [pc, #352]	; (80113dc <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801127c:	2b00      	cmp	r3, #0
 801127e:	d100      	bne.n	8011282 <HAL_RCC_OscConfig+0x1ca>
 8011280:	e08c      	b.n	801139c <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 8011282:	2201      	movs	r2, #1
 8011284:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011286:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8011288:	4313      	orrs	r3, r2
 801128a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801128c:	f7fe fa36 	bl	800f6fc <HAL_GetTick>
 8011290:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011292:	e004      	b.n	801129e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011294:	f7fe fa32 	bl	800f6fc <HAL_GetTick>
 8011298:	1bc0      	subs	r0, r0, r7
 801129a:	2864      	cmp	r0, #100	; 0x64
 801129c:	d879      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801129e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112a0:	421e      	tst	r6, r3
 80112a2:	d0f7      	beq.n	8011294 <HAL_RCC_OscConfig+0x1dc>
 80112a4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80112a6:	075a      	lsls	r2, r3, #29
 80112a8:	d58a      	bpl.n	80111c0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80112aa:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80112ac:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80112ae:	4a4b      	ldr	r2, [pc, #300]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80112b0:	0540      	lsls	r0, r0, #21
 80112b2:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80112b4:	4d4d      	ldr	r5, [pc, #308]	; (80113ec <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80112b6:	4301      	orrs	r1, r0
 80112b8:	61d1      	str	r1, [r2, #28]
 80112ba:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80112bc:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80112be:	4003      	ands	r3, r0
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80112c4:	682b      	ldr	r3, [r5, #0]
 80112c6:	4333      	orrs	r3, r6
 80112c8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80112ca:	f7fe fa17 	bl	800f6fc <HAL_GetTick>
 80112ce:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80112d0:	e004      	b.n	80112dc <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80112d2:	f7fe fa13 	bl	800f6fc <HAL_GetTick>
 80112d6:	1bc0      	subs	r0, r0, r7
 80112d8:	2864      	cmp	r0, #100	; 0x64
 80112da:	d85a      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80112dc:	682b      	ldr	r3, [r5, #0]
 80112de:	4233      	tst	r3, r6
 80112e0:	d0f7      	beq.n	80112d2 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80112e2:	2201      	movs	r2, #1
 80112e4:	4d3d      	ldr	r5, [pc, #244]	; (80113dc <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112e6:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80112e8:	6a2b      	ldr	r3, [r5, #32]
 80112ea:	4393      	bics	r3, r2
 80112ec:	622b      	str	r3, [r5, #32]
 80112ee:	6a2b      	ldr	r3, [r5, #32]
 80112f0:	3203      	adds	r2, #3
 80112f2:	4393      	bics	r3, r2
 80112f4:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 80112f6:	f7fe fa01 	bl	800f6fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112fa:	4b3d      	ldr	r3, [pc, #244]	; (80113f0 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 80112fc:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112fe:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011300:	e004      	b.n	801130c <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011302:	f7fe f9fb 	bl	800f6fc <HAL_GetTick>
 8011306:	1bc0      	subs	r0, r0, r7
 8011308:	4540      	cmp	r0, r8
 801130a:	d842      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801130c:	6a2b      	ldr	r3, [r5, #32]
 801130e:	421e      	tst	r6, r3
 8011310:	d1f7      	bne.n	8011302 <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011312:	68a3      	ldr	r3, [r4, #8]
 8011314:	2b01      	cmp	r3, #1
 8011316:	d100      	bne.n	801131a <HAL_RCC_OscConfig+0x262>
 8011318:	e157      	b.n	80115ca <HAL_RCC_OscConfig+0x512>
 801131a:	2b00      	cmp	r3, #0
 801131c:	d100      	bne.n	8011320 <HAL_RCC_OscConfig+0x268>
 801131e:	e139      	b.n	8011594 <HAL_RCC_OscConfig+0x4dc>
 8011320:	2b05      	cmp	r3, #5
 8011322:	d100      	bne.n	8011326 <HAL_RCC_OscConfig+0x26e>
 8011324:	e155      	b.n	80115d2 <HAL_RCC_OscConfig+0x51a>
 8011326:	2201      	movs	r2, #1
 8011328:	6a2b      	ldr	r3, [r5, #32]
 801132a:	4393      	bics	r3, r2
 801132c:	622b      	str	r3, [r5, #32]
 801132e:	6a2b      	ldr	r3, [r5, #32]
 8011330:	3203      	adds	r2, #3
 8011332:	4393      	bics	r3, r2
 8011334:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011336:	f7fe f9e1 	bl	800f6fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801133a:	4e28      	ldr	r6, [pc, #160]	; (80113dc <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 801133c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801133e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011340:	4f2b      	ldr	r7, [pc, #172]	; (80113f0 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011342:	e005      	b.n	8011350 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011344:	f7fe f9da 	bl	800f6fc <HAL_GetTick>
 8011348:	4643      	mov	r3, r8
 801134a:	1ac0      	subs	r0, r0, r3
 801134c:	42b8      	cmp	r0, r7
 801134e:	d820      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011350:	6a33      	ldr	r3, [r6, #32]
 8011352:	421d      	tst	r5, r3
 8011354:	d0f6      	beq.n	8011344 <HAL_RCC_OscConfig+0x28c>
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	e732      	b.n	80111c0 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801135a:	684a      	ldr	r2, [r1, #4]
 801135c:	21c0      	movs	r1, #192	; 0xc0
 801135e:	0249      	lsls	r1, r1, #9
 8011360:	400a      	ands	r2, r1
 8011362:	2180      	movs	r1, #128	; 0x80
 8011364:	0209      	lsls	r1, r1, #8
 8011366:	428a      	cmp	r2, r1
 8011368:	d000      	beq.n	801136c <HAL_RCC_OscConfig+0x2b4>
 801136a:	e706      	b.n	801117a <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801136c:	4a1b      	ldr	r2, [pc, #108]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 801136e:	6812      	ldr	r2, [r2, #0]
 8011370:	0792      	lsls	r2, r2, #30
 8011372:	d526      	bpl.n	80113c2 <HAL_RCC_OscConfig+0x30a>
 8011374:	68e2      	ldr	r2, [r4, #12]
 8011376:	2a01      	cmp	r2, #1
 8011378:	d023      	beq.n	80113c2 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 801137a:	2001      	movs	r0, #1
 801137c:	e00a      	b.n	8011394 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801137e:	4a17      	ldr	r2, [pc, #92]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	0392      	lsls	r2, r2, #14
 8011384:	d400      	bmi.n	8011388 <HAL_RCC_OscConfig+0x2d0>
 8011386:	e6eb      	b.n	8011160 <HAL_RCC_OscConfig+0xa8>
 8011388:	6862      	ldr	r2, [r4, #4]
 801138a:	2a00      	cmp	r2, #0
 801138c:	d000      	beq.n	8011390 <HAL_RCC_OscConfig+0x2d8>
 801138e:	e6e7      	b.n	8011160 <HAL_RCC_OscConfig+0xa8>
 8011390:	e7f3      	b.n	801137a <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8011392:	2003      	movs	r0, #3
}
 8011394:	b002      	add	sp, #8
 8011396:	bc04      	pop	{r2}
 8011398:	4690      	mov	r8, r2
 801139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 801139c:	2201      	movs	r2, #1
 801139e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113a0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80113a2:	4393      	bics	r3, r2
 80113a4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80113a6:	f7fe f9a9 	bl	800f6fc <HAL_GetTick>
 80113aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113ac:	e004      	b.n	80113b8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113ae:	f7fe f9a5 	bl	800f6fc <HAL_GetTick>
 80113b2:	1bc0      	subs	r0, r0, r7
 80113b4:	2864      	cmp	r0, #100	; 0x64
 80113b6:	d8ec      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80113ba:	421e      	tst	r6, r3
 80113bc:	d1f7      	bne.n	80113ae <HAL_RCC_OscConfig+0x2f6>
 80113be:	6823      	ldr	r3, [r4, #0]
 80113c0:	e771      	b.n	80112a6 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113c2:	25f8      	movs	r5, #248	; 0xf8
 80113c4:	4805      	ldr	r0, [pc, #20]	; (80113dc <HAL_RCC_OscConfig+0x324>)
 80113c6:	6922      	ldr	r2, [r4, #16]
 80113c8:	6801      	ldr	r1, [r0, #0]
 80113ca:	00d2      	lsls	r2, r2, #3
 80113cc:	43a9      	bics	r1, r5
 80113ce:	430a      	orrs	r2, r1
 80113d0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80113d2:	071a      	lsls	r2, r3, #28
 80113d4:	d400      	bmi.n	80113d8 <HAL_RCC_OscConfig+0x320>
 80113d6:	e6f1      	b.n	80111bc <HAL_RCC_OscConfig+0x104>
 80113d8:	e74e      	b.n	8011278 <HAL_RCC_OscConfig+0x1c0>
 80113da:	46c0      	nop			; (mov r8, r8)
 80113dc:	40021000 	.word	0x40021000
 80113e0:	fffeffff 	.word	0xfffeffff
 80113e4:	fffbffff 	.word	0xfffbffff
 80113e8:	feffffff 	.word	0xfeffffff
 80113ec:	40007000 	.word	0x40007000
 80113f0:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 80113f4:	2201      	movs	r2, #1
 80113f6:	4d7b      	ldr	r5, [pc, #492]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113f8:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80113fa:	682b      	ldr	r3, [r5, #0]
 80113fc:	4393      	bics	r3, r2
 80113fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011400:	f7fe f97c 	bl	800f6fc <HAL_GetTick>
 8011404:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011406:	e004      	b.n	8011412 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011408:	f7fe f978 	bl	800f6fc <HAL_GetTick>
 801140c:	1bc0      	subs	r0, r0, r7
 801140e:	2864      	cmp	r0, #100	; 0x64
 8011410:	d8bf      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011412:	682b      	ldr	r3, [r5, #0]
 8011414:	421e      	tst	r6, r3
 8011416:	d1f7      	bne.n	8011408 <HAL_RCC_OscConfig+0x350>
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	e6cd      	b.n	80111b8 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 801141c:	2204      	movs	r2, #4
 801141e:	4d71      	ldr	r5, [pc, #452]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011420:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011422:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011424:	4313      	orrs	r3, r2
 8011426:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011428:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801142a:	3a03      	subs	r2, #3
 801142c:	4393      	bics	r3, r2
 801142e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011430:	f7fe f964 	bl	800f6fc <HAL_GetTick>
 8011434:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011436:	e004      	b.n	8011442 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011438:	f7fe f960 	bl	800f6fc <HAL_GetTick>
 801143c:	1bc0      	subs	r0, r0, r7
 801143e:	2864      	cmp	r0, #100	; 0x64
 8011440:	d8a7      	bhi.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011442:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011444:	421e      	tst	r6, r3
 8011446:	d1f7      	bne.n	8011438 <HAL_RCC_OscConfig+0x380>
 8011448:	6823      	ldr	r3, [r4, #0]
 801144a:	e6ce      	b.n	80111ea <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	682a      	ldr	r2, [r5, #0]
 8011450:	02db      	lsls	r3, r3, #11
 8011452:	4313      	orrs	r3, r2
 8011454:	602b      	str	r3, [r5, #0]
 8011456:	2380      	movs	r3, #128	; 0x80
 8011458:	682a      	ldr	r2, [r5, #0]
 801145a:	025b      	lsls	r3, r3, #9
 801145c:	4313      	orrs	r3, r2
 801145e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011460:	f7fe f94c 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011464:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011466:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011468:	4e5e      	ldr	r6, [pc, #376]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
 801146a:	02ad      	lsls	r5, r5, #10
 801146c:	e005      	b.n	801147a <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801146e:	f7fe f945 	bl	800f6fc <HAL_GetTick>
 8011472:	1bc0      	subs	r0, r0, r7
 8011474:	2864      	cmp	r0, #100	; 0x64
 8011476:	d900      	bls.n	801147a <HAL_RCC_OscConfig+0x3c2>
 8011478:	e78b      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801147a:	6833      	ldr	r3, [r6, #0]
 801147c:	422b      	tst	r3, r5
 801147e:	d0f6      	beq.n	801146e <HAL_RCC_OscConfig+0x3b6>
 8011480:	6823      	ldr	r3, [r4, #0]
 8011482:	e66d      	b.n	8011160 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011484:	22c0      	movs	r2, #192	; 0xc0
 8011486:	684b      	ldr	r3, [r1, #4]
 8011488:	0252      	lsls	r2, r2, #9
 801148a:	4013      	ands	r3, r2
 801148c:	4293      	cmp	r3, r2
 801148e:	d000      	beq.n	8011492 <HAL_RCC_OscConfig+0x3da>
 8011490:	e6b9      	b.n	8011206 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011492:	4b54      	ldr	r3, [pc, #336]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
 8011494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011496:	03db      	lsls	r3, r3, #15
 8011498:	d400      	bmi.n	801149c <HAL_RCC_OscConfig+0x3e4>
 801149a:	e6cb      	b.n	8011234 <HAL_RCC_OscConfig+0x17c>
 801149c:	69e3      	ldr	r3, [r4, #28]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d100      	bne.n	80114a4 <HAL_RCC_OscConfig+0x3ec>
 80114a2:	e6c7      	b.n	8011234 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 80114a4:	2001      	movs	r0, #1
 80114a6:	e775      	b.n	8011394 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80114a8:	2b05      	cmp	r3, #5
 80114aa:	d0cf      	beq.n	801144c <HAL_RCC_OscConfig+0x394>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	4a4e      	ldr	r2, [pc, #312]	; (80115e8 <HAL_RCC_OscConfig+0x530>)
 80114b0:	4013      	ands	r3, r2
 80114b2:	602b      	str	r3, [r5, #0]
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	4a4d      	ldr	r2, [pc, #308]	; (80115ec <HAL_RCC_OscConfig+0x534>)
 80114b8:	4013      	ands	r3, r2
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	e7d0      	b.n	8011460 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 80114be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80114c0:	4a49      	ldr	r2, [pc, #292]	; (80115e8 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80114c2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80114c4:	4013      	ands	r3, r2
 80114c6:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80114c8:	f7fe f918 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80114cc:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 80114ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80114d0:	e005      	b.n	80114de <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80114d2:	f7fe f913 	bl	800f6fc <HAL_GetTick>
 80114d6:	1bc0      	subs	r0, r0, r7
 80114d8:	2864      	cmp	r0, #100	; 0x64
 80114da:	d900      	bls.n	80114de <HAL_RCC_OscConfig+0x426>
 80114dc:	e759      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80114de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80114e0:	4233      	tst	r3, r6
 80114e2:	d1f6      	bne.n	80114d2 <HAL_RCC_OscConfig+0x41a>
 80114e4:	e6a6      	b.n	8011234 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80114e6:	2104      	movs	r1, #4
 80114e8:	4d3e      	ldr	r5, [pc, #248]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80114ea:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80114ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80114ee:	430b      	orrs	r3, r1
 80114f0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80114f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80114f4:	431a      	orrs	r2, r3
 80114f6:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80114f8:	f7fe f900 	bl	800f6fc <HAL_GetTick>
 80114fc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80114fe:	e005      	b.n	801150c <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011500:	f7fe f8fc 	bl	800f6fc <HAL_GetTick>
 8011504:	1bc0      	subs	r0, r0, r7
 8011506:	2864      	cmp	r0, #100	; 0x64
 8011508:	d900      	bls.n	801150c <HAL_RCC_OscConfig+0x454>
 801150a:	e742      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801150c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801150e:	421e      	tst	r6, r3
 8011510:	d0f6      	beq.n	8011500 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011512:	21f8      	movs	r1, #248	; 0xf8
 8011514:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011516:	69a3      	ldr	r3, [r4, #24]
 8011518:	438a      	bics	r2, r1
 801151a:	00db      	lsls	r3, r3, #3
 801151c:	4313      	orrs	r3, r2
 801151e:	636b      	str	r3, [r5, #52]	; 0x34
 8011520:	6823      	ldr	r3, [r4, #0]
 8011522:	e662      	b.n	80111ea <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 8011524:	682b      	ldr	r3, [r5, #0]
 8011526:	4a32      	ldr	r2, [pc, #200]	; (80115f0 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011528:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801152a:	4013      	ands	r3, r2
 801152c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801152e:	f7fe f8e5 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011532:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8011534:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011536:	e005      	b.n	8011544 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011538:	f7fe f8e0 	bl	800f6fc <HAL_GetTick>
 801153c:	1bc0      	subs	r0, r0, r7
 801153e:	2864      	cmp	r0, #100	; 0x64
 8011540:	d900      	bls.n	8011544 <HAL_RCC_OscConfig+0x48c>
 8011542:	e726      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011544:	682b      	ldr	r3, [r5, #0]
 8011546:	4233      	tst	r3, r6
 8011548:	d1f6      	bne.n	8011538 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801154a:	220f      	movs	r2, #15
 801154c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801154e:	4393      	bics	r3, r2
 8011550:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011552:	4313      	orrs	r3, r2
 8011554:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801155a:	686a      	ldr	r2, [r5, #4]
 801155c:	430b      	orrs	r3, r1
 801155e:	4925      	ldr	r1, [pc, #148]	; (80115f4 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011560:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011562:	400a      	ands	r2, r1
 8011564:	4313      	orrs	r3, r2
 8011566:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011568:	2380      	movs	r3, #128	; 0x80
 801156a:	682a      	ldr	r2, [r5, #0]
 801156c:	045b      	lsls	r3, r3, #17
 801156e:	4313      	orrs	r3, r2
 8011570:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011572:	f7fe f8c3 	bl	800f6fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011576:	4d1b      	ldr	r5, [pc, #108]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8011578:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801157a:	04a4      	lsls	r4, r4, #18
 801157c:	e005      	b.n	801158a <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801157e:	f7fe f8bd 	bl	800f6fc <HAL_GetTick>
 8011582:	1b80      	subs	r0, r0, r6
 8011584:	2864      	cmp	r0, #100	; 0x64
 8011586:	d900      	bls.n	801158a <HAL_RCC_OscConfig+0x4d2>
 8011588:	e703      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	4223      	tst	r3, r4
 801158e:	d0f6      	beq.n	801157e <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8011590:	2000      	movs	r0, #0
 8011592:	e6ff      	b.n	8011394 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011594:	2201      	movs	r2, #1
 8011596:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011598:	4e12      	ldr	r6, [pc, #72]	; (80115e4 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801159a:	4393      	bics	r3, r2
 801159c:	622b      	str	r3, [r5, #32]
 801159e:	6a2b      	ldr	r3, [r5, #32]
 80115a0:	3203      	adds	r2, #3
 80115a2:	4393      	bics	r3, r2
 80115a4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80115a6:	f7fe f8a9 	bl	800f6fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115aa:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 80115ac:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115ae:	4f12      	ldr	r7, [pc, #72]	; (80115f8 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115b0:	e006      	b.n	80115c0 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80115b2:	f7fe f8a3 	bl	800f6fc <HAL_GetTick>
 80115b6:	4643      	mov	r3, r8
 80115b8:	1ac0      	subs	r0, r0, r3
 80115ba:	42b8      	cmp	r0, r7
 80115bc:	d900      	bls.n	80115c0 <HAL_RCC_OscConfig+0x508>
 80115be:	e6e8      	b.n	8011392 <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80115c0:	6a33      	ldr	r3, [r6, #32]
 80115c2:	421d      	tst	r5, r3
 80115c4:	d1f5      	bne.n	80115b2 <HAL_RCC_OscConfig+0x4fa>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	e5fa      	b.n	80111c0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80115ca:	6a2a      	ldr	r2, [r5, #32]
 80115cc:	4313      	orrs	r3, r2
 80115ce:	622b      	str	r3, [r5, #32]
 80115d0:	e6b1      	b.n	8011336 <HAL_RCC_OscConfig+0x27e>
 80115d2:	2204      	movs	r2, #4
 80115d4:	6a2b      	ldr	r3, [r5, #32]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	622b      	str	r3, [r5, #32]
 80115da:	6a2b      	ldr	r3, [r5, #32]
 80115dc:	3a03      	subs	r2, #3
 80115de:	4313      	orrs	r3, r2
 80115e0:	622b      	str	r3, [r5, #32]
 80115e2:	e6a8      	b.n	8011336 <HAL_RCC_OscConfig+0x27e>
 80115e4:	40021000 	.word	0x40021000
 80115e8:	fffeffff 	.word	0xfffeffff
 80115ec:	fffbffff 	.word	0xfffbffff
 80115f0:	feffffff 	.word	0xfeffffff
 80115f4:	ffc27fff 	.word	0xffc27fff
 80115f8:	00001388 	.word	0x00001388

080115fc <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fe:	46ce      	mov	lr, r9
 8011600:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011602:	2301      	movs	r3, #1
{
 8011604:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011606:	4985      	ldr	r1, [pc, #532]	; (801181c <HAL_RCC_ClockConfig+0x220>)
{
 8011608:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801160a:	680a      	ldr	r2, [r1, #0]
{
 801160c:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801160e:	401a      	ands	r2, r3
 8011610:	42a2      	cmp	r2, r4
 8011612:	d20c      	bcs.n	801162e <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011614:	680a      	ldr	r2, [r1, #0]
 8011616:	439a      	bics	r2, r3
 8011618:	4322      	orrs	r2, r4
 801161a:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801161c:	680a      	ldr	r2, [r1, #0]
 801161e:	4013      	ands	r3, r2
 8011620:	42a3      	cmp	r3, r4
 8011622:	d054      	beq.n	80116ce <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8011624:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011626:	bc0c      	pop	{r2, r3}
 8011628:	4690      	mov	r8, r2
 801162a:	4699      	mov	r9, r3
 801162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801162e:	6803      	ldr	r3, [r0, #0]
 8011630:	079a      	lsls	r2, r3, #30
 8011632:	d506      	bpl.n	8011642 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011634:	20f0      	movs	r0, #240	; 0xf0
 8011636:	497a      	ldr	r1, [pc, #488]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
 8011638:	684a      	ldr	r2, [r1, #4]
 801163a:	4382      	bics	r2, r0
 801163c:	68a8      	ldr	r0, [r5, #8]
 801163e:	4302      	orrs	r2, r0
 8011640:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011642:	07db      	lsls	r3, r3, #31
 8011644:	d52a      	bpl.n	801169c <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011646:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011648:	4a75      	ldr	r2, [pc, #468]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801164a:	2b01      	cmp	r3, #1
 801164c:	d073      	beq.n	8011736 <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801164e:	2b02      	cmp	r3, #2
 8011650:	d075      	beq.n	801173e <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011652:	2b03      	cmp	r3, #3
 8011654:	d100      	bne.n	8011658 <HAL_RCC_ClockConfig+0x5c>
 8011656:	e09c      	b.n	8011792 <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011658:	6812      	ldr	r2, [r2, #0]
 801165a:	0792      	lsls	r2, r2, #30
 801165c:	d5e2      	bpl.n	8011624 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801165e:	2103      	movs	r1, #3
 8011660:	4e6f      	ldr	r6, [pc, #444]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
 8011662:	6872      	ldr	r2, [r6, #4]
 8011664:	438a      	bics	r2, r1
 8011666:	4313      	orrs	r3, r2
 8011668:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 801166a:	f7fe f847 	bl	800f6fc <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801166e:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011670:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011672:	2b01      	cmp	r3, #1
 8011674:	d07d      	beq.n	8011772 <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011676:	2b02      	cmp	r3, #2
 8011678:	d100      	bne.n	801167c <HAL_RCC_ClockConfig+0x80>
 801167a:	e093      	b.n	80117a4 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801167c:	2b03      	cmp	r3, #3
 801167e:	d066      	beq.n	801174e <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011680:	230c      	movs	r3, #12
 8011682:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011684:	4b67      	ldr	r3, [pc, #412]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 8011686:	4699      	mov	r9, r3
 8011688:	e004      	b.n	8011694 <HAL_RCC_ClockConfig+0x98>
 801168a:	f7fe f837 	bl	800f6fc <HAL_GetTick>
 801168e:	1bc0      	subs	r0, r0, r7
 8011690:	4548      	cmp	r0, r9
 8011692:	d86c      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011694:	4642      	mov	r2, r8
 8011696:	6873      	ldr	r3, [r6, #4]
 8011698:	421a      	tst	r2, r3
 801169a:	d1f6      	bne.n	801168a <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801169c:	2201      	movs	r2, #1
 801169e:	495f      	ldr	r1, [pc, #380]	; (801181c <HAL_RCC_ClockConfig+0x220>)
 80116a0:	680b      	ldr	r3, [r1, #0]
 80116a2:	4393      	bics	r3, r2
 80116a4:	4323      	orrs	r3, r4
 80116a6:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80116a8:	680b      	ldr	r3, [r1, #0]
 80116aa:	401a      	ands	r2, r3
 80116ac:	42a2      	cmp	r2, r4
 80116ae:	d1b9      	bne.n	8011624 <HAL_RCC_ClockConfig+0x28>
 80116b0:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116b2:	075b      	lsls	r3, r3, #29
 80116b4:	d506      	bpl.n	80116c4 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80116b6:	4a5a      	ldr	r2, [pc, #360]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
 80116b8:	495b      	ldr	r1, [pc, #364]	; (8011828 <HAL_RCC_ClockConfig+0x22c>)
 80116ba:	6853      	ldr	r3, [r2, #4]
 80116bc:	400b      	ands	r3, r1
 80116be:	68e9      	ldr	r1, [r5, #12]
 80116c0:	430b      	orrs	r3, r1
 80116c2:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80116c4:	2000      	movs	r0, #0
 80116c6:	f7fd ffef 	bl	800f6a8 <HAL_InitTick>
  return HAL_OK;
 80116ca:	2000      	movs	r0, #0
 80116cc:	e7ab      	b.n	8011626 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116ce:	6803      	ldr	r3, [r0, #0]
 80116d0:	079a      	lsls	r2, r3, #30
 80116d2:	d506      	bpl.n	80116e2 <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80116d4:	20f0      	movs	r0, #240	; 0xf0
 80116d6:	4952      	ldr	r1, [pc, #328]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
 80116d8:	684a      	ldr	r2, [r1, #4]
 80116da:	4382      	bics	r2, r0
 80116dc:	68a8      	ldr	r0, [r5, #8]
 80116de:	4302      	orrs	r2, r0
 80116e0:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80116e2:	07da      	lsls	r2, r3, #31
 80116e4:	d5e5      	bpl.n	80116b2 <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116e6:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116e8:	4a4d      	ldr	r2, [pc, #308]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d056      	beq.n	801179c <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	d029      	beq.n	8011746 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80116f2:	2b03      	cmp	r3, #3
 80116f4:	d073      	beq.n	80117de <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116f6:	6812      	ldr	r2, [r2, #0]
 80116f8:	0792      	lsls	r2, r2, #30
 80116fa:	d593      	bpl.n	8011624 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80116fc:	2103      	movs	r1, #3
 80116fe:	4c48      	ldr	r4, [pc, #288]	; (8011820 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011700:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011702:	6862      	ldr	r2, [r4, #4]
 8011704:	438a      	bics	r2, r1
 8011706:	4313      	orrs	r3, r2
 8011708:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 801170a:	f7fd fff7 	bl	800f6fc <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801170e:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011710:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011712:	2b01      	cmp	r3, #1
 8011714:	d056      	beq.n	80117c4 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011716:	2b02      	cmp	r3, #2
 8011718:	d065      	beq.n	80117e6 <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801171a:	2b03      	cmp	r3, #3
 801171c:	d070      	beq.n	8011800 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801171e:	4b41      	ldr	r3, [pc, #260]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 8011720:	4698      	mov	r8, r3
 8011722:	e004      	b.n	801172e <HAL_RCC_ClockConfig+0x132>
 8011724:	f7fd ffea 	bl	800f6fc <HAL_GetTick>
 8011728:	1b80      	subs	r0, r0, r6
 801172a:	4540      	cmp	r0, r8
 801172c:	d81f      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801172e:	6863      	ldr	r3, [r4, #4]
 8011730:	421f      	tst	r7, r3
 8011732:	d1f7      	bne.n	8011724 <HAL_RCC_ClockConfig+0x128>
 8011734:	e7bc      	b.n	80116b0 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011736:	6812      	ldr	r2, [r2, #0]
 8011738:	0392      	lsls	r2, r2, #14
 801173a:	d490      	bmi.n	801165e <HAL_RCC_ClockConfig+0x62>
 801173c:	e772      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801173e:	6812      	ldr	r2, [r2, #0]
 8011740:	0192      	lsls	r2, r2, #6
 8011742:	d48c      	bmi.n	801165e <HAL_RCC_ClockConfig+0x62>
 8011744:	e76e      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011746:	6812      	ldr	r2, [r2, #0]
 8011748:	0192      	lsls	r2, r2, #6
 801174a:	d4d7      	bmi.n	80116fc <HAL_RCC_ClockConfig+0x100>
 801174c:	e76a      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801174e:	3309      	adds	r3, #9
 8011750:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011752:	4b34      	ldr	r3, [pc, #208]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 8011754:	4699      	mov	r9, r3
 8011756:	e004      	b.n	8011762 <HAL_RCC_ClockConfig+0x166>
 8011758:	f7fd ffd0 	bl	800f6fc <HAL_GetTick>
 801175c:	1bc0      	subs	r0, r0, r7
 801175e:	4548      	cmp	r0, r9
 8011760:	d805      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011762:	4642      	mov	r2, r8
 8011764:	6873      	ldr	r3, [r6, #4]
 8011766:	4013      	ands	r3, r2
 8011768:	2b0c      	cmp	r3, #12
 801176a:	d1f5      	bne.n	8011758 <HAL_RCC_ClockConfig+0x15c>
 801176c:	e796      	b.n	801169c <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801176e:	2003      	movs	r0, #3
 8011770:	e759      	b.n	8011626 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011772:	330b      	adds	r3, #11
 8011774:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011776:	4b2b      	ldr	r3, [pc, #172]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 8011778:	4699      	mov	r9, r3
 801177a:	e004      	b.n	8011786 <HAL_RCC_ClockConfig+0x18a>
 801177c:	f7fd ffbe 	bl	800f6fc <HAL_GetTick>
 8011780:	1bc0      	subs	r0, r0, r7
 8011782:	4548      	cmp	r0, r9
 8011784:	d8f3      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011786:	4642      	mov	r2, r8
 8011788:	6873      	ldr	r3, [r6, #4]
 801178a:	4013      	ands	r3, r2
 801178c:	2b04      	cmp	r3, #4
 801178e:	d1f5      	bne.n	801177c <HAL_RCC_ClockConfig+0x180>
 8011790:	e784      	b.n	801169c <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011792:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011794:	03d2      	lsls	r2, r2, #15
 8011796:	d500      	bpl.n	801179a <HAL_RCC_ClockConfig+0x19e>
 8011798:	e761      	b.n	801165e <HAL_RCC_ClockConfig+0x62>
 801179a:	e743      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801179c:	6812      	ldr	r2, [r2, #0]
 801179e:	0392      	lsls	r2, r2, #14
 80117a0:	d4ac      	bmi.n	80116fc <HAL_RCC_ClockConfig+0x100>
 80117a2:	e73f      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80117a4:	330a      	adds	r3, #10
 80117a6:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117a8:	4b1e      	ldr	r3, [pc, #120]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 80117aa:	4699      	mov	r9, r3
 80117ac:	e004      	b.n	80117b8 <HAL_RCC_ClockConfig+0x1bc>
 80117ae:	f7fd ffa5 	bl	800f6fc <HAL_GetTick>
 80117b2:	1bc0      	subs	r0, r0, r7
 80117b4:	4548      	cmp	r0, r9
 80117b6:	d8da      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80117b8:	4642      	mov	r2, r8
 80117ba:	6873      	ldr	r3, [r6, #4]
 80117bc:	4013      	ands	r3, r2
 80117be:	2b08      	cmp	r3, #8
 80117c0:	d1f5      	bne.n	80117ae <HAL_RCC_ClockConfig+0x1b2>
 80117c2:	e76b      	b.n	801169c <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117c4:	4b17      	ldr	r3, [pc, #92]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 80117c6:	4698      	mov	r8, r3
 80117c8:	e004      	b.n	80117d4 <HAL_RCC_ClockConfig+0x1d8>
 80117ca:	f7fd ff97 	bl	800f6fc <HAL_GetTick>
 80117ce:	1b80      	subs	r0, r0, r6
 80117d0:	4540      	cmp	r0, r8
 80117d2:	d8cc      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80117d4:	6863      	ldr	r3, [r4, #4]
 80117d6:	403b      	ands	r3, r7
 80117d8:	2b04      	cmp	r3, #4
 80117da:	d1f6      	bne.n	80117ca <HAL_RCC_ClockConfig+0x1ce>
 80117dc:	e768      	b.n	80116b0 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80117de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80117e0:	03d2      	lsls	r2, r2, #15
 80117e2:	d48b      	bmi.n	80116fc <HAL_RCC_ClockConfig+0x100>
 80117e4:	e71e      	b.n	8011624 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117e6:	4b0f      	ldr	r3, [pc, #60]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 80117e8:	4698      	mov	r8, r3
 80117ea:	e004      	b.n	80117f6 <HAL_RCC_ClockConfig+0x1fa>
 80117ec:	f7fd ff86 	bl	800f6fc <HAL_GetTick>
 80117f0:	1b80      	subs	r0, r0, r6
 80117f2:	4540      	cmp	r0, r8
 80117f4:	d8bb      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80117f6:	6863      	ldr	r3, [r4, #4]
 80117f8:	403b      	ands	r3, r7
 80117fa:	2b08      	cmp	r3, #8
 80117fc:	d1f6      	bne.n	80117ec <HAL_RCC_ClockConfig+0x1f0>
 80117fe:	e757      	b.n	80116b0 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011800:	4b08      	ldr	r3, [pc, #32]	; (8011824 <HAL_RCC_ClockConfig+0x228>)
 8011802:	4698      	mov	r8, r3
 8011804:	e004      	b.n	8011810 <HAL_RCC_ClockConfig+0x214>
 8011806:	f7fd ff79 	bl	800f6fc <HAL_GetTick>
 801180a:	1b80      	subs	r0, r0, r6
 801180c:	4540      	cmp	r0, r8
 801180e:	d8ae      	bhi.n	801176e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	403b      	ands	r3, r7
 8011814:	2b0c      	cmp	r3, #12
 8011816:	d1f6      	bne.n	8011806 <HAL_RCC_ClockConfig+0x20a>
 8011818:	e74a      	b.n	80116b0 <HAL_RCC_ClockConfig+0xb4>
 801181a:	46c0      	nop			; (mov r8, r8)
 801181c:	40022000 	.word	0x40022000
 8011820:	40021000 	.word	0x40021000
 8011824:	00001388 	.word	0x00001388
 8011828:	fffff8ff 	.word	0xfffff8ff

0801182c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011830:	4669      	mov	r1, sp
 8011832:	4b1c      	ldr	r3, [pc, #112]	; (80118a4 <HAL_RCC_GetSysClockFreq+0x78>)
 8011834:	000a      	movs	r2, r1
 8011836:	0018      	movs	r0, r3
 8011838:	c870      	ldmia	r0!, {r4, r5, r6}
 801183a:	c270      	stmia	r2!, {r4, r5, r6}
 801183c:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801183e:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011840:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011842:	aa04      	add	r2, sp, #16
 8011844:	0010      	movs	r0, r2
 8011846:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011848:	c070      	stmia	r0!, {r4, r5, r6}
 801184a:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801184c:	4d16      	ldr	r5, [pc, #88]	; (80118a8 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801184e:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011850:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8011852:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011854:	4018      	ands	r0, r3
 8011856:	2808      	cmp	r0, #8
 8011858:	d00a      	beq.n	8011870 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801185a:	380c      	subs	r0, #12
 801185c:	4243      	negs	r3, r0
 801185e:	4158      	adcs	r0, r3
 8011860:	4b12      	ldr	r3, [pc, #72]	; (80118ac <HAL_RCC_GetSysClockFreq+0x80>)
 8011862:	4240      	negs	r0, r0
 8011864:	4018      	ands	r0, r3
 8011866:	4b12      	ldr	r3, [pc, #72]	; (80118b0 <HAL_RCC_GetSysClockFreq+0x84>)
 8011868:	469c      	mov	ip, r3
 801186a:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801186c:	b008      	add	sp, #32
 801186e:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011870:	200f      	movs	r0, #15
 8011872:	0c9c      	lsrs	r4, r3, #18
 8011874:	4004      	ands	r4, r0
 8011876:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011878:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801187a:	4008      	ands	r0, r1
 801187c:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801187e:	22c0      	movs	r2, #192	; 0xc0
 8011880:	2080      	movs	r0, #128	; 0x80
 8011882:	0252      	lsls	r2, r2, #9
 8011884:	4013      	ands	r3, r2
 8011886:	0240      	lsls	r0, r0, #9
 8011888:	4283      	cmp	r3, r0
 801188a:	d001      	beq.n	8011890 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801188c:	4293      	cmp	r3, r2
 801188e:	d004      	beq.n	801189a <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011890:	4807      	ldr	r0, [pc, #28]	; (80118b0 <HAL_RCC_GetSysClockFreq+0x84>)
 8011892:	f7ee fc5d 	bl	8000150 <__udivsi3>
 8011896:	4360      	muls	r0, r4
 8011898:	e7e8      	b.n	801186c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801189a:	4806      	ldr	r0, [pc, #24]	; (80118b4 <HAL_RCC_GetSysClockFreq+0x88>)
 801189c:	f7ee fc58 	bl	8000150 <__udivsi3>
 80118a0:	4360      	muls	r0, r4
 80118a2:	e7e3      	b.n	801186c <HAL_RCC_GetSysClockFreq+0x40>
 80118a4:	08017dec 	.word	0x08017dec
 80118a8:	40021000 	.word	0x40021000
 80118ac:	02625a00 	.word	0x02625a00
 80118b0:	007a1200 	.word	0x007a1200
 80118b4:	02dc6c00 	.word	0x02dc6c00

080118b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80118b8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80118ba:	f7ff ffb7 	bl	801182c <HAL_RCC_GetSysClockFreq>
 80118be:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80118c0:	4a05      	ldr	r2, [pc, #20]	; (80118d8 <HAL_RCC_GetHCLKFreq+0x20>)
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	3220      	adds	r2, #32
 80118c6:	061b      	lsls	r3, r3, #24
 80118c8:	0f1b      	lsrs	r3, r3, #28
 80118ca:	5cd3      	ldrb	r3, [r2, r3]
 80118cc:	40d8      	lsrs	r0, r3
 80118ce:	4b03      	ldr	r3, [pc, #12]	; (80118dc <HAL_RCC_GetHCLKFreq+0x24>)
 80118d0:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80118d2:	bd10      	pop	{r4, pc}
 80118d4:	40021000 	.word	0x40021000
 80118d8:	08017dec 	.word	0x08017dec
 80118dc:	200000c0 	.word	0x200000c0

080118e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80118e0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80118e2:	f7ff ffa3 	bl	801182c <HAL_RCC_GetSysClockFreq>
 80118e6:	4908      	ldr	r1, [pc, #32]	; (8011908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80118e8:	4a08      	ldr	r2, [pc, #32]	; (801190c <HAL_RCC_GetPCLK1Freq+0x2c>)
 80118ea:	684b      	ldr	r3, [r1, #4]
 80118ec:	3220      	adds	r2, #32
 80118ee:	061b      	lsls	r3, r3, #24
 80118f0:	0f1b      	lsrs	r3, r3, #28
 80118f2:	5cd3      	ldrb	r3, [r2, r3]
 80118f4:	40d8      	lsrs	r0, r3
 80118f6:	4b06      	ldr	r3, [pc, #24]	; (8011910 <HAL_RCC_GetPCLK1Freq+0x30>)
 80118f8:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80118fa:	684b      	ldr	r3, [r1, #4]
 80118fc:	055b      	lsls	r3, r3, #21
 80118fe:	0f5b      	lsrs	r3, r3, #29
 8011900:	5cd3      	ldrb	r3, [r2, r3]
 8011902:	40d8      	lsrs	r0, r3
}    
 8011904:	bd10      	pop	{r4, pc}
 8011906:	46c0      	nop			; (mov r8, r8)
 8011908:	40021000 	.word	0x40021000
 801190c:	08017dec 	.word	0x08017dec
 8011910:	200000c0 	.word	0x200000c0

08011914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011916:	46c6      	mov	lr, r8
 8011918:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801191a:	6803      	ldr	r3, [r0, #0]
{
 801191c:	b082      	sub	sp, #8
 801191e:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011920:	03da      	lsls	r2, r3, #15
 8011922:	d507      	bpl.n	8011934 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011924:	493e      	ldr	r1, [pc, #248]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011926:	6840      	ldr	r0, [r0, #4]
 8011928:	6a0a      	ldr	r2, [r1, #32]
 801192a:	4042      	eors	r2, r0
 801192c:	20c0      	movs	r0, #192	; 0xc0
 801192e:	0080      	lsls	r0, r0, #2
 8011930:	4202      	tst	r2, r0
 8011932:	d131      	bne.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011934:	07da      	lsls	r2, r3, #31
 8011936:	d506      	bpl.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011938:	2003      	movs	r0, #3
 801193a:	4939      	ldr	r1, [pc, #228]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801193c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801193e:	4382      	bics	r2, r0
 8011940:	68a0      	ldr	r0, [r4, #8]
 8011942:	4302      	orrs	r2, r0
 8011944:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011946:	079a      	lsls	r2, r3, #30
 8011948:	d506      	bpl.n	8011958 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801194a:	4935      	ldr	r1, [pc, #212]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801194c:	4835      	ldr	r0, [pc, #212]	; (8011a24 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 801194e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011950:	4002      	ands	r2, r0
 8011952:	68e0      	ldr	r0, [r4, #12]
 8011954:	4302      	orrs	r2, r0
 8011956:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011958:	035a      	lsls	r2, r3, #13
 801195a:	d506      	bpl.n	801196a <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801195c:	4930      	ldr	r1, [pc, #192]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801195e:	4832      	ldr	r0, [pc, #200]	; (8011a28 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011960:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011962:	4002      	ands	r2, r0
 8011964:	6920      	ldr	r0, [r4, #16]
 8011966:	4302      	orrs	r2, r0
 8011968:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801196a:	069a      	lsls	r2, r3, #26
 801196c:	d506      	bpl.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801196e:	2010      	movs	r0, #16
 8011970:	492b      	ldr	r1, [pc, #172]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011972:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011974:	4382      	bics	r2, r0
 8011976:	6960      	ldr	r0, [r4, #20]
 8011978:	4302      	orrs	r2, r0
 801197a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 801197c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801197e:	055b      	lsls	r3, r3, #21
 8011980:	d506      	bpl.n	8011990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011982:	2140      	movs	r1, #64	; 0x40
 8011984:	4a26      	ldr	r2, [pc, #152]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011986:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011988:	438b      	bics	r3, r1
 801198a:	69a1      	ldr	r1, [r4, #24]
 801198c:	430b      	orrs	r3, r1
 801198e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011990:	b002      	add	sp, #8
 8011992:	bc04      	pop	{r2}
 8011994:	4690      	mov	r8, r2
 8011996:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011998:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801199a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 801199c:	69ca      	ldr	r2, [r1, #28]
 801199e:	0540      	lsls	r0, r0, #21
 80119a0:	4302      	orrs	r2, r0
 80119a2:	61ca      	str	r2, [r1, #28]
 80119a4:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80119a6:	4d21      	ldr	r5, [pc, #132]	; (8011a2c <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80119a8:	4003      	ands	r3, r0
 80119aa:	9301      	str	r3, [sp, #4]
 80119ac:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80119ae:	682b      	ldr	r3, [r5, #0]
 80119b0:	0076      	lsls	r6, r6, #1
 80119b2:	4333      	orrs	r3, r6
 80119b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80119b6:	f7fd fea1 	bl	800f6fc <HAL_GetTick>
 80119ba:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80119bc:	e004      	b.n	80119c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119be:	f7fd fe9d 	bl	800f6fc <HAL_GetTick>
 80119c2:	1bc0      	subs	r0, r0, r7
 80119c4:	2864      	cmp	r0, #100	; 0x64
 80119c6:	d829      	bhi.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	4233      	tst	r3, r6
 80119cc:	d0f7      	beq.n	80119be <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 80119ce:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80119d0:	4d13      	ldr	r5, [pc, #76]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80119d2:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80119d4:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80119d6:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80119d8:	4b15      	ldr	r3, [pc, #84]	; (8011a30 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80119da:	4302      	orrs	r2, r0
 80119dc:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80119de:	6a2a      	ldr	r2, [r5, #32]
 80119e0:	4814      	ldr	r0, [pc, #80]	; (8011a34 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80119e2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80119e4:	4002      	ands	r2, r0
 80119e6:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80119e8:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80119ea:	078b      	lsls	r3, r1, #30
 80119ec:	d408      	bmi.n	8011a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80119ee:	4a0c      	ldr	r2, [pc, #48]	; (8011a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80119f0:	490f      	ldr	r1, [pc, #60]	; (8011a30 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80119f2:	6a13      	ldr	r3, [r2, #32]
 80119f4:	400b      	ands	r3, r1
 80119f6:	6861      	ldr	r1, [r4, #4]
 80119f8:	430b      	orrs	r3, r1
 80119fa:	6213      	str	r3, [r2, #32]
 80119fc:	6823      	ldr	r3, [r4, #0]
 80119fe:	e799      	b.n	8011934 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011a00:	f7fd fe7c 	bl	800f6fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a04:	4b0c      	ldr	r3, [pc, #48]	; (8011a38 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8011a06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a08:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a0a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a0c:	6a2b      	ldr	r3, [r5, #32]
 8011a0e:	421e      	tst	r6, r3
 8011a10:	d1ed      	bne.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a12:	f7fd fe73 	bl	800f6fc <HAL_GetTick>
 8011a16:	1bc0      	subs	r0, r0, r7
 8011a18:	4540      	cmp	r0, r8
 8011a1a:	d9f7      	bls.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011a1c:	2003      	movs	r0, #3
 8011a1e:	e7b7      	b.n	8011990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011a20:	40021000 	.word	0x40021000
 8011a24:	fffcffff 	.word	0xfffcffff
 8011a28:	fff3ffff 	.word	0xfff3ffff
 8011a2c:	40007000 	.word	0x40007000
 8011a30:	fffffcff 	.word	0xfffffcff
 8011a34:	fffeffff 	.word	0xfffeffff
 8011a38:	00001388 	.word	0x00001388

08011a3c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011a3c:	4770      	bx	lr
 8011a3e:	46c0      	nop			; (mov r8, r8)

08011a40 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011a40:	6803      	ldr	r3, [r0, #0]
{
 8011a42:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011a44:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011a46:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011a48:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011a4a:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011a4c:	681c      	ldr	r4, [r3, #0]
 8011a4e:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <HAL_RTC_GetTime+0x5c>)
 8011a50:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011a52:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011a54:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011a56:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011a58:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011a5a:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011a5c:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011a5e:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011a60:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011a62:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011a64:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	d115      	bne.n	8011a96 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011a6a:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011a6c:	0900      	lsrs	r0, r0, #4
 8011a6e:	0082      	lsls	r2, r0, #2
 8011a70:	1810      	adds	r0, r2, r0
 8011a72:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011a74:	4035      	ands	r5, r6
 8011a76:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011a78:	0918      	lsrs	r0, r3, #4
 8011a7a:	0082      	lsls	r2, r0, #2
 8011a7c:	1812      	adds	r2, r2, r0
 8011a7e:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011a80:	4033      	ands	r3, r6
 8011a82:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011a84:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011a86:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011a88:	0093      	lsls	r3, r2, #2
 8011a8a:	189b      	adds	r3, r3, r2
 8011a8c:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011a8e:	4034      	ands	r4, r6
 8011a90:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011a92:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011a94:	708c      	strb	r4, [r1, #2]
}
 8011a96:	2000      	movs	r0, #0
 8011a98:	bd70      	pop	{r4, r5, r6, pc}
 8011a9a:	46c0      	nop			; (mov r8, r8)
 8011a9c:	007f7f7f 	.word	0x007f7f7f

08011aa0 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011aa0:	6803      	ldr	r3, [r0, #0]
 8011aa2:	4815      	ldr	r0, [pc, #84]	; (8011af8 <HAL_RTC_GetDate+0x58>)
 8011aa4:	685b      	ldr	r3, [r3, #4]
{
 8011aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011aa8:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011aaa:	201f      	movs	r0, #31
 8011aac:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011aae:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011ab0:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011ab2:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011ab4:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011ab6:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011ab8:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011aba:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011abc:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011abe:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011ac0:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8011ac2:	2a00      	cmp	r2, #0
 8011ac4:	d115      	bne.n	8011af2 <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 8011ac6:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ac8:	093b      	lsrs	r3, r7, #4
 8011aca:	009a      	lsls	r2, r3, #2
 8011acc:	18d2      	adds	r2, r2, r3
 8011ace:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011ad0:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ad2:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8011ad4:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ad6:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011ad8:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ada:	092a      	lsrs	r2, r5, #4
 8011adc:	18c0      	adds	r0, r0, r3
 8011ade:	0093      	lsls	r3, r2, #2
 8011ae0:	189b      	adds	r3, r3, r2
 8011ae2:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011ae4:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ae6:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011ae8:	4035      	ands	r5, r6
 8011aea:	1904      	adds	r4, r0, r4
 8011aec:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011aee:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011af0:	708b      	strb	r3, [r1, #2]
}
 8011af2:	2000      	movs	r0, #0
 8011af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011af6:	46c0      	nop			; (mov r8, r8)
 8011af8:	00ffff3f 	.word	0x00ffff3f

08011afc <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011afc:	21a0      	movs	r1, #160	; 0xa0
 8011afe:	6802      	ldr	r2, [r0, #0]
{
 8011b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011b02:	68d3      	ldr	r3, [r2, #12]
{
 8011b04:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011b06:	438b      	bics	r3, r1
 8011b08:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8011b0a:	f7fd fdf7 	bl	800f6fc <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b0e:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8011b10:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011b12:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b14:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011b16:	e004      	b.n	8011b22 <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b18:	f7fd fdf0 	bl	800f6fc <HAL_GetTick>
 8011b1c:	1bc0      	subs	r0, r0, r7
 8011b1e:	42b0      	cmp	r0, r6
 8011b20:	d805      	bhi.n	8011b2e <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011b22:	6823      	ldr	r3, [r4, #0]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	421d      	tst	r5, r3
 8011b28:	d0f6      	beq.n	8011b18 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8011b2a:	2000      	movs	r0, #0
}
 8011b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8011b2e:	2003      	movs	r0, #3
 8011b30:	e7fc      	b.n	8011b2c <HAL_RTC_WaitForSynchro+0x30>
 8011b32:	46c0      	nop			; (mov r8, r8)

08011b34 <RTC_EnterInitMode>:
{
 8011b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b36:	6803      	ldr	r3, [r0, #0]
{
 8011b38:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b3a:	68da      	ldr	r2, [r3, #12]
 8011b3c:	0652      	lsls	r2, r2, #25
 8011b3e:	d501      	bpl.n	8011b44 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8011b40:	2000      	movs	r0, #0
}
 8011b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011b44:	2201      	movs	r2, #1
 8011b46:	4252      	negs	r2, r2
 8011b48:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011b4a:	f7fd fdd7 	bl	800f6fc <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b4e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8011b50:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b52:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b54:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b56:	e004      	b.n	8011b62 <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011b58:	f7fd fdd0 	bl	800f6fc <HAL_GetTick>
 8011b5c:	1bc0      	subs	r0, r0, r7
 8011b5e:	42b0      	cmp	r0, r6
 8011b60:	d804      	bhi.n	8011b6c <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b62:	6823      	ldr	r3, [r4, #0]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	421d      	tst	r5, r3
 8011b68:	d0f6      	beq.n	8011b58 <RTC_EnterInitMode+0x24>
 8011b6a:	e7e9      	b.n	8011b40 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011b6c:	2003      	movs	r0, #3
 8011b6e:	e7e8      	b.n	8011b42 <RTC_EnterInitMode+0xe>

08011b70 <HAL_RTC_Init>:
{
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011b74:	d03e      	beq.n	8011bf4 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011b76:	7f43      	ldrb	r3, [r0, #29]
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d036      	beq.n	8011bec <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011b7e:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b80:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011b82:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b84:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b86:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b88:	625a      	str	r2, [r3, #36]	; 0x24
 8011b8a:	3a77      	subs	r2, #119	; 0x77
 8011b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b8e:	f7ff ffd1 	bl	8011b34 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b92:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b94:	2800      	cmp	r0, #0
 8011b96:	d123      	bne.n	8011be0 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011b98:	689a      	ldr	r2, [r3, #8]
 8011b9a:	4917      	ldr	r1, [pc, #92]	; (8011bf8 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011b9c:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011b9e:	400a      	ands	r2, r1
 8011ba0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011ba2:	6862      	ldr	r2, [r4, #4]
 8011ba4:	6899      	ldr	r1, [r3, #8]
 8011ba6:	432a      	orrs	r2, r5
 8011ba8:	6965      	ldr	r5, [r4, #20]
 8011baa:	432a      	orrs	r2, r5
 8011bac:	430a      	orrs	r2, r1
 8011bae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011bb0:	68e2      	ldr	r2, [r4, #12]
 8011bb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011bb4:	68a2      	ldr	r2, [r4, #8]
 8011bb6:	6919      	ldr	r1, [r3, #16]
 8011bb8:	0412      	lsls	r2, r2, #16
 8011bba:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011bbc:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011bbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011bc0:	68da      	ldr	r2, [r3, #12]
 8011bc2:	438a      	bics	r2, r1
 8011bc4:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011bc8:	490c      	ldr	r1, [pc, #48]	; (8011bfc <HAL_RTC_Init+0x8c>)
 8011bca:	400a      	ands	r2, r1
 8011bcc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011bd0:	69a1      	ldr	r1, [r4, #24]
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011bd6:	22ff      	movs	r2, #255	; 0xff
 8011bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	7763      	strb	r3, [r4, #29]
}
 8011bde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011be0:	22ff      	movs	r2, #255	; 0xff
 8011be2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011be4:	2304      	movs	r3, #4
    return HAL_ERROR;
 8011be6:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011be8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011bea:	e7f8      	b.n	8011bde <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011bec:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011bee:	f7ff ff25 	bl	8011a3c <HAL_RTC_MspInit>
 8011bf2:	e7c4      	b.n	8011b7e <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	e7f2      	b.n	8011bde <HAL_RTC_Init+0x6e>
 8011bf8:	ff8fffbf 	.word	0xff8fffbf
 8011bfc:	fffbffff 	.word	0xfffbffff

08011c00 <HAL_RTC_SetTime>:
{
 8011c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011c02:	7f03      	ldrb	r3, [r0, #28]
{
 8011c04:	0004      	movs	r4, r0
 8011c06:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d100      	bne.n	8011c0e <HAL_RTC_SetTime+0xe>
 8011c0c:	e074      	b.n	8011cf8 <HAL_RTC_SetTime+0xf8>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	6806      	ldr	r6, [r0, #0]
 8011c12:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011c14:	3301      	adds	r3, #1
 8011c16:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011c18:	68b3      	ldr	r3, [r6, #8]
 8011c1a:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011c1c:	2a00      	cmp	r2, #0
 8011c1e:	d031      	beq.n	8011c84 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011c20:	403b      	ands	r3, r7
 8011c22:	d065      	beq.n	8011cf0 <HAL_RTC_SetTime+0xf0>
 8011c24:	7a0b      	ldrb	r3, [r1, #8]
 8011c26:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011c28:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011c2a:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011c2c:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011c2e:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011c30:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 8011c32:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011c34:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011c36:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c38:	23ca      	movs	r3, #202	; 0xca
 8011c3a:	6273      	str	r3, [r6, #36]	; 0x24
 8011c3c:	3b77      	subs	r3, #119	; 0x77
 8011c3e:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c40:	0020      	movs	r0, r4
 8011c42:	f7ff ff77 	bl	8011b34 <RTC_EnterInitMode>
 8011c46:	1e06      	subs	r6, r0, #0
 8011c48:	d149      	bne.n	8011cde <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011c4a:	4935      	ldr	r1, [pc, #212]	; (8011d20 <HAL_RTC_SetTime+0x120>)
 8011c4c:	6822      	ldr	r2, [r4, #0]
 8011c4e:	4039      	ands	r1, r7
 8011c50:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011c52:	6893      	ldr	r3, [r2, #8]
 8011c54:	4933      	ldr	r1, [pc, #204]	; (8011d24 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c56:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011c58:	400b      	ands	r3, r1
 8011c5a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c5c:	68eb      	ldr	r3, [r5, #12]
 8011c5e:	6891      	ldr	r1, [r2, #8]
 8011c60:	4303      	orrs	r3, r0
 8011c62:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011c64:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c66:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011c68:	68d3      	ldr	r3, [r2, #12]
 8011c6a:	438b      	bics	r3, r1
 8011c6c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011c6e:	6893      	ldr	r3, [r2, #8]
 8011c70:	069b      	lsls	r3, r3, #26
 8011c72:	d543      	bpl.n	8011cfc <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c74:	23ff      	movs	r3, #255	; 0xff
 8011c76:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011c78:	3bfe      	subs	r3, #254	; 0xfe
 8011c7a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	7723      	strb	r3, [r4, #28]
}
 8011c80:	0030      	movs	r0, r6
 8011c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011c84:	401f      	ands	r7, r3
 8011c86:	d035      	beq.n	8011cf4 <HAL_RTC_SetTime+0xf4>
 8011c88:	7a0f      	ldrb	r7, [r1, #8]
 8011c8a:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011c8c:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011c8e:	2300      	movs	r3, #0
  while(Value >= 10)
 8011c90:	2809      	cmp	r0, #9
 8011c92:	d906      	bls.n	8011ca2 <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8011c94:	380a      	subs	r0, #10
 8011c96:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011c98:	3301      	adds	r3, #1
  while(Value >= 10)
 8011c9a:	2809      	cmp	r0, #9
 8011c9c:	d8fa      	bhi.n	8011c94 <HAL_RTC_SetTime+0x94>
 8011c9e:	011b      	lsls	r3, r3, #4
 8011ca0:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011ca2:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011ca4:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011ca6:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011ca8:	2100      	movs	r1, #0
  while(Value >= 10)
 8011caa:	2b09      	cmp	r3, #9
 8011cac:	d906      	bls.n	8011cbc <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011cae:	3b0a      	subs	r3, #10
 8011cb0:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011cb2:	3101      	adds	r1, #1
  while(Value >= 10)
 8011cb4:	2b09      	cmp	r3, #9
 8011cb6:	d8fa      	bhi.n	8011cae <HAL_RTC_SetTime+0xae>
 8011cb8:	0109      	lsls	r1, r1, #4
 8011cba:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011cbc:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011cbe:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011cc0:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011cc2:	2909      	cmp	r1, #9
 8011cc4:	d929      	bls.n	8011d1a <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011cc6:	390a      	subs	r1, #10
 8011cc8:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011cca:	3201      	adds	r2, #1
  while(Value >= 10)
 8011ccc:	2909      	cmp	r1, #9
 8011cce:	d8fa      	bhi.n	8011cc6 <HAL_RTC_SetTime+0xc6>
 8011cd0:	0112      	lsls	r2, r2, #4
 8011cd2:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011cd4:	4307      	orrs	r7, r0
 8011cd6:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011cd8:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011cda:	430f      	orrs	r7, r1
 8011cdc:	e7ac      	b.n	8011c38 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011cde:	22ff      	movs	r2, #255	; 0xff
 8011ce0:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8011ce2:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ce6:	2304      	movs	r3, #4
 8011ce8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011cea:	2300      	movs	r3, #0
 8011cec:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011cee:	e7c7      	b.n	8011c80 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011cf0:	720b      	strb	r3, [r1, #8]
 8011cf2:	e799      	b.n	8011c28 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011cf4:	720f      	strb	r7, [r1, #8]
 8011cf6:	e7c9      	b.n	8011c8c <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011cf8:	2602      	movs	r6, #2
 8011cfa:	e7c1      	b.n	8011c80 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011cfc:	0020      	movs	r0, r4
 8011cfe:	f7ff fefd 	bl	8011afc <HAL_RTC_WaitForSynchro>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d101      	bne.n	8011d0a <HAL_RTC_SetTime+0x10a>
 8011d06:	6822      	ldr	r2, [r4, #0]
 8011d08:	e7b4      	b.n	8011c74 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011d0a:	22ff      	movs	r2, #255	; 0xff
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011d10:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011d12:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011d14:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011d16:	2601      	movs	r6, #1
 8011d18:	e7b2      	b.n	8011c80 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	e7da      	b.n	8011cd4 <HAL_RTC_SetTime+0xd4>
 8011d1e:	46c0      	nop			; (mov r8, r8)
 8011d20:	007f7f7f 	.word	0x007f7f7f
 8011d24:	fffbffff 	.word	0xfffbffff

08011d28 <HAL_RTC_SetDate>:
{
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011d2a:	7f03      	ldrb	r3, [r0, #28]
{
 8011d2c:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d062      	beq.n	8011df8 <HAL_RTC_SetDate+0xd0>
 8011d32:	2301      	movs	r3, #1
 8011d34:	780f      	ldrb	r7, [r1, #0]
 8011d36:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011d38:	3301      	adds	r3, #1
 8011d3a:	7743      	strb	r3, [r0, #29]
 8011d3c:	7848      	ldrb	r0, [r1, #1]
 8011d3e:	788e      	ldrb	r6, [r1, #2]
 8011d40:	78cb      	ldrb	r3, [r1, #3]
 8011d42:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011d44:	2a00      	cmp	r2, #0
 8011d46:	d022      	beq.n	8011d8e <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011d48:	041b      	lsls	r3, r3, #16
 8011d4a:	433b      	orrs	r3, r7
 8011d4c:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011d4e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011d50:	4334      	orrs	r4, r6
 8011d52:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d54:	22ca      	movs	r2, #202	; 0xca
 8011d56:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d58:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8011d5c:	3a77      	subs	r2, #119	; 0x77
 8011d5e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d60:	f7ff fee8 	bl	8011b34 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011d64:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d66:	1e06      	subs	r6, r0, #0
 8011d68:	d13e      	bne.n	8011de8 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011d6a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011d6c:	4a2b      	ldr	r2, [pc, #172]	; (8011e1c <HAL_RTC_SetDate+0xf4>)
 8011d6e:	4014      	ands	r4, r2
 8011d70:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011d72:	68da      	ldr	r2, [r3, #12]
 8011d74:	438a      	bics	r2, r1
 8011d76:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011d78:	689a      	ldr	r2, [r3, #8]
 8011d7a:	0692      	lsls	r2, r2, #26
 8011d7c:	d53e      	bpl.n	8011dfc <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011d7e:	22ff      	movs	r2, #255	; 0xff
 8011d80:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011d82:	2301      	movs	r3, #1
 8011d84:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011d86:	2300      	movs	r3, #0
 8011d88:	772b      	strb	r3, [r5, #28]
}
 8011d8a:	0030      	movs	r0, r6
 8011d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011d8e:	2410      	movs	r4, #16
 8011d90:	4204      	tst	r4, r0
 8011d92:	d003      	beq.n	8011d9c <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011d94:	43a0      	bics	r0, r4
 8011d96:	300a      	adds	r0, #10
 8011d98:	b2c0      	uxtb	r0, r0
 8011d9a:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011d9c:	2100      	movs	r1, #0
  while(Value >= 10)
 8011d9e:	2b09      	cmp	r3, #9
 8011da0:	d906      	bls.n	8011db0 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8011da2:	3b0a      	subs	r3, #10
 8011da4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011da6:	3101      	adds	r1, #1
  while(Value >= 10)
 8011da8:	2b09      	cmp	r3, #9
 8011daa:	d8fa      	bhi.n	8011da2 <HAL_RTC_SetDate+0x7a>
 8011dac:	0109      	lsls	r1, r1, #4
 8011dae:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011db0:	430b      	orrs	r3, r1
 8011db2:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011db4:	2100      	movs	r1, #0
  while(Value >= 10)
 8011db6:	2809      	cmp	r0, #9
 8011db8:	d906      	bls.n	8011dc8 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011dba:	380a      	subs	r0, #10
 8011dbc:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011dbe:	3101      	adds	r1, #1
  while(Value >= 10)
 8011dc0:	2809      	cmp	r0, #9
 8011dc2:	d8fa      	bhi.n	8011dba <HAL_RTC_SetDate+0x92>
 8011dc4:	0109      	lsls	r1, r1, #4
 8011dc6:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011dc8:	4308      	orrs	r0, r1
 8011dca:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011dcc:	2e09      	cmp	r6, #9
 8011dce:	d922      	bls.n	8011e16 <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011dd0:	3e0a      	subs	r6, #10
 8011dd2:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011dd4:	3201      	adds	r2, #1
  while(Value >= 10)
 8011dd6:	2e09      	cmp	r6, #9
 8011dd8:	d8fa      	bhi.n	8011dd0 <HAL_RTC_SetDate+0xa8>
 8011dda:	0112      	lsls	r2, r2, #4
 8011ddc:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011dde:	433b      	orrs	r3, r7
 8011de0:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011de2:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011de4:	431c      	orrs	r4, r3
 8011de6:	e7b5      	b.n	8011d54 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011de8:	22ff      	movs	r2, #255	; 0xff
 8011dea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011dec:	2304      	movs	r3, #4
 8011dee:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011df0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011df2:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011df4:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011df6:	e7c8      	b.n	8011d8a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011df8:	2602      	movs	r6, #2
 8011dfa:	e7c6      	b.n	8011d8a <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011dfc:	0028      	movs	r0, r5
 8011dfe:	f7ff fe7d 	bl	8011afc <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011e02:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d0ba      	beq.n	8011d7e <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011e08:	22ff      	movs	r2, #255	; 0xff
 8011e0a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011e0c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011e0e:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011e10:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011e12:	2601      	movs	r6, #1
 8011e14:	e7b9      	b.n	8011d8a <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011e16:	2400      	movs	r4, #0
 8011e18:	e7e1      	b.n	8011dde <HAL_RTC_SetDate+0xb6>
 8011e1a:	46c0      	nop			; (mov r8, r8)
 8011e1c:	00ffff3f 	.word	0x00ffff3f

08011e20 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011e20:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011e22:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011e24:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011e26:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011e28:	600a      	str	r2, [r1, #0]
}
 8011e2a:	4770      	bx	lr

08011e2c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011e2c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011e2e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011e30:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011e32:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011e34:	6808      	ldr	r0, [r1, #0]
}
 8011e36:	4770      	bx	lr

08011e38 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011e38:	4770      	bx	lr
 8011e3a:	46c0      	nop			; (mov r8, r8)

08011e3c <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011e3c:	2239      	movs	r2, #57	; 0x39
 8011e3e:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011e40:	2101      	movs	r1, #1
{
 8011e42:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011e44:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011e46:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	430b      	orrs	r3, r1
 8011e4c:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011e4e:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011e50:	2000      	movs	r0, #0
 8011e52:	bd10      	pop	{r4, pc}

08011e54 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011e54:	4a22      	ldr	r2, [pc, #136]	; (8011ee0 <TIM_Base_SetConfig+0x8c>)
{
 8011e56:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	688d      	ldr	r5, [r1, #8]
 8011e5c:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011e5e:	4290      	cmp	r0, r2
 8011e60:	d02c      	beq.n	8011ebc <TIM_Base_SetConfig+0x68>
 8011e62:	2280      	movs	r2, #128	; 0x80
 8011e64:	05d2      	lsls	r2, r2, #23
 8011e66:	4290      	cmp	r0, r2
 8011e68:	d012      	beq.n	8011e90 <TIM_Base_SetConfig+0x3c>
 8011e6a:	4a1e      	ldr	r2, [pc, #120]	; (8011ee4 <TIM_Base_SetConfig+0x90>)
 8011e6c:	4290      	cmp	r0, r2
 8011e6e:	d00f      	beq.n	8011e90 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011e70:	4a1d      	ldr	r2, [pc, #116]	; (8011ee8 <TIM_Base_SetConfig+0x94>)
 8011e72:	4290      	cmp	r0, r2
 8011e74:	d02e      	beq.n	8011ed4 <TIM_Base_SetConfig+0x80>
 8011e76:	4a1d      	ldr	r2, [pc, #116]	; (8011eec <TIM_Base_SetConfig+0x98>)
 8011e78:	4290      	cmp	r0, r2
 8011e7a:	d023      	beq.n	8011ec4 <TIM_Base_SetConfig+0x70>
 8011e7c:	4a1c      	ldr	r2, [pc, #112]	; (8011ef0 <TIM_Base_SetConfig+0x9c>)
 8011e7e:	4290      	cmp	r0, r2
 8011e80:	d020      	beq.n	8011ec4 <TIM_Base_SetConfig+0x70>
 8011e82:	4a1c      	ldr	r2, [pc, #112]	; (8011ef4 <TIM_Base_SetConfig+0xa0>)
 8011e84:	4290      	cmp	r0, r2
 8011e86:	d01d      	beq.n	8011ec4 <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011e88:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e8a:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e8c:	6284      	str	r4, [r0, #40]	; 0x28
 8011e8e:	e012      	b.n	8011eb6 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011e90:	2270      	movs	r2, #112	; 0x70
 8011e92:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011e94:	684a      	ldr	r2, [r1, #4]
 8011e96:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e98:	4a17      	ldr	r2, [pc, #92]	; (8011ef8 <TIM_Base_SetConfig+0xa4>)
 8011e9a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e9c:	68ca      	ldr	r2, [r1, #12]
 8011e9e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011ea0:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011ea2:	4b13      	ldr	r3, [pc, #76]	; (8011ef0 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011ea4:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011ea6:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011ea8:	4298      	cmp	r0, r3
 8011eaa:	d002      	beq.n	8011eb2 <TIM_Base_SetConfig+0x5e>
 8011eac:	4b11      	ldr	r3, [pc, #68]	; (8011ef4 <TIM_Base_SetConfig+0xa0>)
 8011eae:	4298      	cmp	r0, r3
 8011eb0:	d101      	bne.n	8011eb6 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011eb2:	690b      	ldr	r3, [r1, #16]
 8011eb4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	6143      	str	r3, [r0, #20]
}
 8011eba:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011ebc:	2270      	movs	r2, #112	; 0x70
 8011ebe:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011ec0:	684a      	ldr	r2, [r1, #4]
 8011ec2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011ec4:	4a0c      	ldr	r2, [pc, #48]	; (8011ef8 <TIM_Base_SetConfig+0xa4>)
 8011ec6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011ec8:	68ca      	ldr	r2, [r1, #12]
 8011eca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011ecc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011ece:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011ed0:	6284      	str	r4, [r0, #40]	; 0x28
 8011ed2:	e7ee      	b.n	8011eb2 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011ed4:	4a08      	ldr	r2, [pc, #32]	; (8011ef8 <TIM_Base_SetConfig+0xa4>)
 8011ed6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011ed8:	68ca      	ldr	r2, [r1, #12]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	e7d4      	b.n	8011e88 <TIM_Base_SetConfig+0x34>
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	40012c00 	.word	0x40012c00
 8011ee4:	40000400 	.word	0x40000400
 8011ee8:	40002000 	.word	0x40002000
 8011eec:	40014000 	.word	0x40014000
 8011ef0:	40014400 	.word	0x40014400
 8011ef4:	40014800 	.word	0x40014800
 8011ef8:	fffffcff 	.word	0xfffffcff

08011efc <HAL_TIM_Base_Init>:
{
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011f00:	d014      	beq.n	8011f2c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011f02:	2339      	movs	r3, #57	; 0x39
 8011f04:	5cc3      	ldrb	r3, [r0, r3]
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00a      	beq.n	8011f22 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011f0c:	2302      	movs	r3, #2
 8011f0e:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f10:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011f12:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f14:	1d21      	adds	r1, r4, #4
 8011f16:	f7ff ff9d 	bl	8011e54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011f1a:	2301      	movs	r3, #1
  return HAL_OK;
 8011f1c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011f1e:	5563      	strb	r3, [r4, r5]
}
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011f22:	2238      	movs	r2, #56	; 0x38
 8011f24:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011f26:	f7ff ff87 	bl	8011e38 <HAL_TIM_Base_MspInit>
 8011f2a:	e7ef      	b.n	8011f0c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011f2c:	2001      	movs	r0, #1
 8011f2e:	e7f7      	b.n	8011f20 <HAL_TIM_Base_Init+0x24>

08011f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011f30:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011f32:	2438      	movs	r4, #56	; 0x38
 8011f34:	5d03      	ldrb	r3, [r0, r4]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d019      	beq.n	8011f6e <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011f3a:	2539      	movs	r5, #57	; 0x39
 8011f3c:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011f3e:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011f40:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011f42:	6803      	ldr	r3, [r0, #0]
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	43b2      	bics	r2, r6
 8011f48:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011f4a:	685a      	ldr	r2, [r3, #4]
 8011f4c:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011f4e:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011f50:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011f52:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011f54:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011f56:	689a      	ldr	r2, [r3, #8]
 8011f58:	43b2      	bics	r2, r6
 8011f5a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011f5c:	689a      	ldr	r2, [r3, #8]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011f62:	2301      	movs	r3, #1
 8011f64:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011f66:	2300      	movs	r3, #0
 8011f68:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011f6a:	2000      	movs	r0, #0
}
 8011f6c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011f6e:	2002      	movs	r0, #2
 8011f70:	e7fc      	b.n	8011f6c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011f72:	46c0      	nop			; (mov r8, r8)

08011f74 <HAL_UART_MspDeInit>:
 8011f74:	4770      	bx	lr
 8011f76:	46c0      	nop			; (mov r8, r8)

08011f78 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011f7c:	2001      	movs	r0, #1
  if(huart == NULL)
 8011f7e:	2c00      	cmp	r4, #0
 8011f80:	d012      	beq.n	8011fa8 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8011f82:	2669      	movs	r6, #105	; 0x69
 8011f84:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011f86:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011f88:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011f8a:	6823      	ldr	r3, [r4, #0]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	4382      	bics	r2, r0
 8011f90:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8011f92:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8011f94:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011f96:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011f98:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011f9a:	f7ff ffeb 	bl	8011f74 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8011f9e:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8011fa0:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fa2:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011fa4:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011fa6:	54e5      	strb	r5, [r4, r3]
}
 8011fa8:	bd70      	pop	{r4, r5, r6, pc}
 8011faa:	46c0      	nop			; (mov r8, r8)

08011fac <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011fac:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011fae:	2069      	movs	r0, #105	; 0x69
{
 8011fb0:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011fb2:	5c1c      	ldrb	r4, [r3, r0]
 8011fb4:	2c01      	cmp	r4, #1
 8011fb6:	d003      	beq.n	8011fc0 <HAL_UART_Transmit_IT+0x14>
 8011fb8:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011fba:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011fbc:	2c22      	cmp	r4, #34	; 0x22
 8011fbe:	d122      	bne.n	8012006 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8011fc0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011fc2:	2900      	cmp	r1, #0
 8011fc4:	d01f      	beq.n	8012006 <HAL_UART_Transmit_IT+0x5a>
 8011fc6:	2a00      	cmp	r2, #0
 8011fc8:	d01d      	beq.n	8012006 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011fca:	2468      	movs	r4, #104	; 0x68
 8011fcc:	5d1d      	ldrb	r5, [r3, r4]
 8011fce:	2d01      	cmp	r5, #1
 8011fd0:	d01d      	beq.n	801200e <HAL_UART_Transmit_IT+0x62>
 8011fd2:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011fd4:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011fd6:	2150      	movs	r1, #80	; 0x50
 8011fd8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011fda:	3102      	adds	r1, #2
 8011fdc:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fde:	2200      	movs	r2, #0
 8011fe0:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011fe2:	3269      	adds	r2, #105	; 0x69
 8011fe4:	5c99      	ldrb	r1, [r3, r2]
 8011fe6:	2922      	cmp	r1, #34	; 0x22
 8011fe8:	d00e      	beq.n	8012008 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011fea:	2112      	movs	r1, #18
 8011fec:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011fee:	2001      	movs	r0, #1
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	6891      	ldr	r1, [r2, #8]
 8011ff4:	4301      	orrs	r1, r0
 8011ff6:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	2168      	movs	r1, #104	; 0x68
 8011ffc:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011ffe:	6813      	ldr	r3, [r2, #0]
 8012000:	3118      	adds	r1, #24
 8012002:	430b      	orrs	r3, r1
 8012004:	6013      	str	r3, [r2, #0]
  }
}
 8012006:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012008:	3110      	adds	r1, #16
 801200a:	5499      	strb	r1, [r3, r2]
 801200c:	e7ef      	b.n	8011fee <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 801200e:	2002      	movs	r0, #2
 8012010:	e7f9      	b.n	8012006 <HAL_UART_Transmit_IT+0x5a>
 8012012:	46c0      	nop			; (mov r8, r8)

08012014 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012014:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012016:	2069      	movs	r0, #105	; 0x69
{
 8012018:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801201a:	5c1c      	ldrb	r4, [r3, r0]
 801201c:	2c01      	cmp	r4, #1
 801201e:	d003      	beq.n	8012028 <HAL_UART_Receive_IT+0x14>
 8012020:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012022:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012024:	2c12      	cmp	r4, #18
 8012026:	d134      	bne.n	8012092 <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8012028:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801202a:	2900      	cmp	r1, #0
 801202c:	d031      	beq.n	8012092 <HAL_UART_Receive_IT+0x7e>
 801202e:	2a00      	cmp	r2, #0
 8012030:	d02f      	beq.n	8012092 <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 8012032:	2468      	movs	r4, #104	; 0x68
 8012034:	5d1d      	ldrb	r5, [r3, r4]
 8012036:	2d01      	cmp	r5, #1
 8012038:	d041      	beq.n	80120be <HAL_UART_Receive_IT+0xaa>
 801203a:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 801203c:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 801203e:	2158      	movs	r1, #88	; 0x58
 8012040:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8012042:	3102      	adds	r1, #2
 8012044:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8012046:	2180      	movs	r1, #128	; 0x80
 8012048:	689a      	ldr	r2, [r3, #8]
 801204a:	0149      	lsls	r1, r1, #5
 801204c:	428a      	cmp	r2, r1
 801204e:	d021      	beq.n	8012094 <HAL_UART_Receive_IT+0x80>
 8012050:	2a00      	cmp	r2, #0
 8012052:	d129      	bne.n	80120a8 <HAL_UART_Receive_IT+0x94>
 8012054:	691a      	ldr	r2, [r3, #16]
 8012056:	2a00      	cmp	r2, #0
 8012058:	d133      	bne.n	80120c2 <HAL_UART_Receive_IT+0xae>
 801205a:	225c      	movs	r2, #92	; 0x5c
 801205c:	21ff      	movs	r1, #255	; 0xff
 801205e:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012060:	2200      	movs	r2, #0
 8012062:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012064:	3269      	adds	r2, #105	; 0x69
 8012066:	5c99      	ldrb	r1, [r3, r2]
 8012068:	2912      	cmp	r1, #18
 801206a:	d01a      	beq.n	80120a2 <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801206c:	2122      	movs	r1, #34	; 0x22
 801206e:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012070:	2180      	movs	r1, #128	; 0x80
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	0049      	lsls	r1, r1, #1
 8012076:	6810      	ldr	r0, [r2, #0]
 8012078:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801207a:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801207c:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801207e:	6891      	ldr	r1, [r2, #8]
 8012080:	4301      	orrs	r1, r0
 8012082:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8012084:	2000      	movs	r0, #0
 8012086:	2168      	movs	r1, #104	; 0x68
 8012088:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801208a:	6813      	ldr	r3, [r2, #0]
 801208c:	3948      	subs	r1, #72	; 0x48
 801208e:	430b      	orrs	r3, r1
 8012090:	6013      	str	r3, [r2, #0]
  }
}
 8012092:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8012094:	691a      	ldr	r2, [r3, #16]
 8012096:	2a00      	cmp	r2, #0
 8012098:	d1df      	bne.n	801205a <HAL_UART_Receive_IT+0x46>
 801209a:	490c      	ldr	r1, [pc, #48]	; (80120cc <HAL_UART_Receive_IT+0xb8>)
 801209c:	325c      	adds	r2, #92	; 0x5c
 801209e:	5299      	strh	r1, [r3, r2]
 80120a0:	e7de      	b.n	8012060 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80120a2:	3120      	adds	r1, #32
 80120a4:	5499      	strb	r1, [r3, r2]
 80120a6:	e7e3      	b.n	8012070 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 80120a8:	2180      	movs	r1, #128	; 0x80
 80120aa:	0549      	lsls	r1, r1, #21
 80120ac:	428a      	cmp	r2, r1
 80120ae:	d1d7      	bne.n	8012060 <HAL_UART_Receive_IT+0x4c>
 80120b0:	691a      	ldr	r2, [r3, #16]
 80120b2:	2a00      	cmp	r2, #0
 80120b4:	d005      	beq.n	80120c2 <HAL_UART_Receive_IT+0xae>
 80120b6:	225c      	movs	r2, #92	; 0x5c
 80120b8:	213f      	movs	r1, #63	; 0x3f
 80120ba:	5299      	strh	r1, [r3, r2]
 80120bc:	e7d0      	b.n	8012060 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 80120be:	2002      	movs	r0, #2
 80120c0:	e7e7      	b.n	8012092 <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 80120c2:	225c      	movs	r2, #92	; 0x5c
 80120c4:	217f      	movs	r1, #127	; 0x7f
 80120c6:	5299      	strh	r1, [r3, r2]
 80120c8:	e7ca      	b.n	8012060 <HAL_UART_Receive_IT+0x4c>
 80120ca:	46c0      	nop			; (mov r8, r8)
 80120cc:	000001ff 	.word	0x000001ff

080120d0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120d4:	2069      	movs	r0, #105	; 0x69
 80120d6:	5c23      	ldrb	r3, [r4, r0]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d003      	beq.n	80120e4 <HAL_UART_Transmit_DMA+0x14>
 80120dc:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80120de:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120e0:	2b22      	cmp	r3, #34	; 0x22
 80120e2:	d12e      	bne.n	8012142 <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 80120e4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80120e6:	2900      	cmp	r1, #0
 80120e8:	d02b      	beq.n	8012142 <HAL_UART_Transmit_DMA+0x72>
 80120ea:	2a00      	cmp	r2, #0
 80120ec:	d029      	beq.n	8012142 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 80120ee:	2368      	movs	r3, #104	; 0x68
 80120f0:	5ce5      	ldrb	r5, [r4, r3]
 80120f2:	2d01      	cmp	r5, #1
 80120f4:	d029      	beq.n	801214a <HAL_UART_Transmit_DMA+0x7a>
 80120f6:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 80120f8:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 80120fa:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80120fc:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80120fe:	3302      	adds	r3, #2
 8012100:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012102:	2300      	movs	r3, #0
 8012104:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012106:	3369      	adds	r3, #105	; 0x69
 8012108:	5ce0      	ldrb	r0, [r4, r3]
 801210a:	2822      	cmp	r0, #34	; 0x22
 801210c:	d01a      	beq.n	8012144 <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801210e:	2012      	movs	r0, #18
 8012110:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012112:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012114:	4b0e      	ldr	r3, [pc, #56]	; (8012150 <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012116:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012118:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801211a:	4b0e      	ldr	r3, [pc, #56]	; (8012154 <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 801211c:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801211e:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012120:	4b0d      	ldr	r3, [pc, #52]	; (8012158 <HAL_UART_Transmit_DMA+0x88>)
 8012122:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012124:	0013      	movs	r3, r2
 8012126:	002a      	movs	r2, r5
 8012128:	f7fd ffda 	bl	80100e0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801212c:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801212e:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012130:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8012132:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012134:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012136:	689a      	ldr	r2, [r3, #8]
 8012138:	430a      	orrs	r2, r1
 801213a:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 801213c:	2368      	movs	r3, #104	; 0x68
 801213e:	2200      	movs	r2, #0
 8012140:	54e2      	strb	r2, [r4, r3]
  }
}
 8012142:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012144:	3010      	adds	r0, #16
 8012146:	54e0      	strb	r0, [r4, r3]
 8012148:	e7e3      	b.n	8012112 <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 801214a:	2002      	movs	r0, #2
 801214c:	e7f9      	b.n	8012142 <HAL_UART_Transmit_DMA+0x72>
 801214e:	46c0      	nop			; (mov r8, r8)
 8012150:	080121e1 	.word	0x080121e1
 8012154:	08012215 	.word	0x08012215
 8012158:	08012269 	.word	0x08012269

0801215c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012160:	2069      	movs	r0, #105	; 0x69
 8012162:	5c25      	ldrb	r5, [r4, r0]
 8012164:	2d01      	cmp	r5, #1
 8012166:	d003      	beq.n	8012170 <HAL_UART_Receive_DMA+0x14>
 8012168:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801216a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801216c:	2b12      	cmp	r3, #18
 801216e:	d12b      	bne.n	80121c8 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8012170:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012172:	2900      	cmp	r1, #0
 8012174:	d028      	beq.n	80121c8 <HAL_UART_Receive_DMA+0x6c>
 8012176:	2a00      	cmp	r2, #0
 8012178:	d026      	beq.n	80121c8 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 801217a:	2368      	movs	r3, #104	; 0x68
 801217c:	5ce5      	ldrb	r5, [r4, r3]
 801217e:	2d01      	cmp	r5, #1
 8012180:	d026      	beq.n	80121d0 <HAL_UART_Receive_DMA+0x74>
 8012182:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8012184:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8012186:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012188:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801218a:	2300      	movs	r3, #0
 801218c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801218e:	3369      	adds	r3, #105	; 0x69
 8012190:	5ce0      	ldrb	r0, [r4, r3]
 8012192:	2812      	cmp	r0, #18
 8012194:	d019      	beq.n	80121ca <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012196:	2022      	movs	r0, #34	; 0x22
 8012198:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801219a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801219c:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801219e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80121a0:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80121a2:	4b0d      	ldr	r3, [pc, #52]	; (80121d8 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80121a4:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80121a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80121a8:	4b0c      	ldr	r3, [pc, #48]	; (80121dc <HAL_UART_Receive_DMA+0x80>)
 80121aa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80121ac:	0013      	movs	r3, r2
 80121ae:	000a      	movs	r2, r1
 80121b0:	0029      	movs	r1, r5
 80121b2:	f7fd ff95 	bl	80100e0 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80121b6:	2140      	movs	r1, #64	; 0x40
 80121b8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80121ba:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80121bc:	6893      	ldr	r3, [r2, #8]
 80121be:	430b      	orrs	r3, r1
 80121c0:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80121c2:	2368      	movs	r3, #104	; 0x68
 80121c4:	2200      	movs	r2, #0
 80121c6:	54e2      	strb	r2, [r4, r3]
  }
}
 80121c8:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80121ca:	3020      	adds	r0, #32
 80121cc:	54e0      	strb	r0, [r4, r3]
 80121ce:	e7e4      	b.n	801219a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 80121d0:	2002      	movs	r0, #2
 80121d2:	e7f9      	b.n	80121c8 <HAL_UART_Receive_DMA+0x6c>
 80121d4:	08012221 	.word	0x08012221
 80121d8:	0801225d 	.word	0x0801225d
 80121dc:	08012269 	.word	0x08012269

080121e0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80121e0:	6803      	ldr	r3, [r0, #0]
{
 80121e2:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80121e4:	6819      	ldr	r1, [r3, #0]
 80121e6:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80121e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80121ea:	400b      	ands	r3, r1
 80121ec:	d10b      	bne.n	8012206 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 80121ee:	2152      	movs	r1, #82	; 0x52
 80121f0:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80121f2:	6813      	ldr	r3, [r2, #0]
 80121f4:	312e      	adds	r1, #46	; 0x2e
 80121f6:	689a      	ldr	r2, [r3, #8]
 80121f8:	438a      	bics	r2, r1
 80121fa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	3940      	subs	r1, #64	; 0x40
 8012200:	430a      	orrs	r2, r1
 8012202:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012204:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012206:	0010      	movs	r0, r2
 8012208:	f7fa fdea 	bl	800cde0 <HAL_UART_TxCpltCallback>
}
 801220c:	e7fa      	b.n	8012204 <UART_DMATransmitCplt+0x24>
 801220e:	46c0      	nop			; (mov r8, r8)

08012210 <HAL_UART_TxHalfCpltCallback>:
 8012210:	4770      	bx	lr
 8012212:	46c0      	nop			; (mov r8, r8)

08012214 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012214:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012216:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012218:	f7ff fffa 	bl	8012210 <HAL_UART_TxHalfCpltCallback>
}
 801221c:	bd10      	pop	{r4, pc}
 801221e:	46c0      	nop			; (mov r8, r8)

08012220 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012220:	6803      	ldr	r3, [r0, #0]
{
 8012222:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012224:	6819      	ldr	r1, [r3, #0]
 8012226:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012228:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801222a:	400b      	ands	r3, r1
 801222c:	d10c      	bne.n	8012248 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 801222e:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012230:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8012232:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012234:	6811      	ldr	r1, [r2, #0]
 8012236:	688b      	ldr	r3, [r1, #8]
 8012238:	4383      	bics	r3, r0
 801223a:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801223c:	2369      	movs	r3, #105	; 0x69
 801223e:	5cd1      	ldrb	r1, [r2, r3]
 8012240:	2932      	cmp	r1, #50	; 0x32
 8012242:	d005      	beq.n	8012250 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012244:	2101      	movs	r1, #1
 8012246:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012248:	0010      	movs	r0, r2
 801224a:	f7fa fe05 	bl	800ce58 <HAL_UART_RxCpltCallback>
}
 801224e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012250:	3920      	subs	r1, #32
 8012252:	54d1      	strb	r1, [r2, r3]
 8012254:	e7f8      	b.n	8012248 <UART_DMAReceiveCplt+0x28>
 8012256:	46c0      	nop			; (mov r8, r8)

08012258 <HAL_UART_RxHalfCpltCallback>:
 8012258:	4770      	bx	lr
 801225a:	46c0      	nop			; (mov r8, r8)

0801225c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801225c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801225e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012260:	f7ff fffa 	bl	8012258 <HAL_UART_RxHalfCpltCallback>
}
 8012264:	bd10      	pop	{r4, pc}
 8012266:	46c0      	nop			; (mov r8, r8)

08012268 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801226c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801226e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8012270:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012272:	3a08      	subs	r2, #8
 8012274:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012276:	3369      	adds	r3, #105	; 0x69
 8012278:	3a51      	subs	r2, #81	; 0x51
 801227a:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801227c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801227e:	320f      	adds	r2, #15
 8012280:	4313      	orrs	r3, r2
 8012282:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012284:	f7fa fdc4 	bl	800ce10 <HAL_UART_ErrorCallback>
}
 8012288:	bd10      	pop	{r4, pc}
 801228a:	46c0      	nop			; (mov r8, r8)

0801228c <UART_SetConfig>:
{
 801228c:	b570      	push	{r4, r5, r6, lr}
 801228e:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012290:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012292:	69c1      	ldr	r1, [r0, #28]
 8012294:	6883      	ldr	r3, [r0, #8]
 8012296:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012298:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801229a:	4303      	orrs	r3, r0
 801229c:	6968      	ldr	r0, [r5, #20]
 801229e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80122a0:	4861      	ldr	r0, [pc, #388]	; (8012428 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80122a2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80122a4:	4002      	ands	r2, r0
 80122a6:	4313      	orrs	r3, r2
 80122a8:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80122aa:	6863      	ldr	r3, [r4, #4]
 80122ac:	4a5f      	ldr	r2, [pc, #380]	; (801242c <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80122ae:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80122b0:	4013      	ands	r3, r2
 80122b2:	68ea      	ldr	r2, [r5, #12]
 80122b4:	4313      	orrs	r3, r2
 80122b6:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80122b8:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122ba:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80122bc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122be:	485c      	ldr	r0, [pc, #368]	; (8012430 <UART_SetConfig+0x1a4>)
 80122c0:	4002      	ands	r2, r0
 80122c2:	4313      	orrs	r3, r2
 80122c4:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80122c6:	4b5b      	ldr	r3, [pc, #364]	; (8012434 <UART_SetConfig+0x1a8>)
 80122c8:	429c      	cmp	r4, r3
 80122ca:	d044      	beq.n	8012356 <UART_SetConfig+0xca>
 80122cc:	4b5a      	ldr	r3, [pc, #360]	; (8012438 <UART_SetConfig+0x1ac>)
 80122ce:	429c      	cmp	r4, r3
 80122d0:	d018      	beq.n	8012304 <UART_SetConfig+0x78>
 80122d2:	4b5a      	ldr	r3, [pc, #360]	; (801243c <UART_SetConfig+0x1b0>)
 80122d4:	429c      	cmp	r4, r3
 80122d6:	d100      	bne.n	80122da <UART_SetConfig+0x4e>
 80122d8:	e085      	b.n	80123e6 <UART_SetConfig+0x15a>
 80122da:	4b59      	ldr	r3, [pc, #356]	; (8012440 <UART_SetConfig+0x1b4>)
 80122dc:	429c      	cmp	r4, r3
 80122de:	d031      	beq.n	8012344 <UART_SetConfig+0xb8>
 80122e0:	4b58      	ldr	r3, [pc, #352]	; (8012444 <UART_SetConfig+0x1b8>)
 80122e2:	429c      	cmp	r4, r3
 80122e4:	d02e      	beq.n	8012344 <UART_SetConfig+0xb8>
 80122e6:	4b58      	ldr	r3, [pc, #352]	; (8012448 <UART_SetConfig+0x1bc>)
 80122e8:	429c      	cmp	r4, r3
 80122ea:	d02b      	beq.n	8012344 <UART_SetConfig+0xb8>
 80122ec:	4b57      	ldr	r3, [pc, #348]	; (801244c <UART_SetConfig+0x1c0>)
 80122ee:	429c      	cmp	r4, r3
 80122f0:	d028      	beq.n	8012344 <UART_SetConfig+0xb8>
 80122f2:	4b57      	ldr	r3, [pc, #348]	; (8012450 <UART_SetConfig+0x1c4>)
 80122f4:	429c      	cmp	r4, r3
 80122f6:	d025      	beq.n	8012344 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122f8:	2380      	movs	r3, #128	; 0x80
 80122fa:	021b      	lsls	r3, r3, #8
 80122fc:	4299      	cmp	r1, r3
 80122fe:	d050      	beq.n	80123a2 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8012300:	2001      	movs	r0, #1
 8012302:	e01c      	b.n	801233e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012304:	20c0      	movs	r0, #192	; 0xc0
 8012306:	2280      	movs	r2, #128	; 0x80
 8012308:	4b52      	ldr	r3, [pc, #328]	; (8012454 <UART_SetConfig+0x1c8>)
 801230a:	0280      	lsls	r0, r0, #10
 801230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801230e:	0252      	lsls	r2, r2, #9
 8012310:	4003      	ands	r3, r0
 8012312:	4293      	cmp	r3, r2
 8012314:	d049      	beq.n	80123aa <UART_SetConfig+0x11e>
 8012316:	d913      	bls.n	8012340 <UART_SetConfig+0xb4>
 8012318:	2280      	movs	r2, #128	; 0x80
 801231a:	0292      	lsls	r2, r2, #10
 801231c:	4293      	cmp	r3, r2
 801231e:	d100      	bne.n	8012322 <UART_SetConfig+0x96>
 8012320:	e070      	b.n	8012404 <UART_SetConfig+0x178>
 8012322:	4283      	cmp	r3, r0
 8012324:	d1e8      	bne.n	80122f8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012326:	2380      	movs	r3, #128	; 0x80
 8012328:	021b      	lsls	r3, r3, #8
 801232a:	4299      	cmp	r1, r3
 801232c:	d056      	beq.n	80123dc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801232e:	6869      	ldr	r1, [r5, #4]
 8012330:	4849      	ldr	r0, [pc, #292]	; (8012458 <UART_SetConfig+0x1cc>)
 8012332:	f7ed ff0d 	bl	8000150 <__udivsi3>
 8012336:	0400      	lsls	r0, r0, #16
 8012338:	0c00      	lsrs	r0, r0, #16
 801233a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801233c:	2000      	movs	r0, #0
}
 801233e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012340:	2b00      	cmp	r3, #0
 8012342:	d1d9      	bne.n	80122f8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012344:	2380      	movs	r3, #128	; 0x80
 8012346:	021b      	lsls	r3, r3, #8
 8012348:	4299      	cmp	r1, r3
 801234a:	d060      	beq.n	801240e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801234c:	f7ff fac8 	bl	80118e0 <HAL_RCC_GetPCLK1Freq>
 8012350:	682c      	ldr	r4, [r5, #0]
 8012352:	6869      	ldr	r1, [r5, #4]
 8012354:	e7ed      	b.n	8012332 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012356:	4b3f      	ldr	r3, [pc, #252]	; (8012454 <UART_SetConfig+0x1c8>)
 8012358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801235a:	2303      	movs	r3, #3
 801235c:	4013      	ands	r3, r2
 801235e:	4a3f      	ldr	r2, [pc, #252]	; (801245c <UART_SetConfig+0x1d0>)
 8012360:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012362:	2280      	movs	r2, #128	; 0x80
 8012364:	0212      	lsls	r2, r2, #8
 8012366:	4291      	cmp	r1, r2
 8012368:	d00e      	beq.n	8012388 <UART_SetConfig+0xfc>
    switch (clocksource)
 801236a:	2b02      	cmp	r3, #2
 801236c:	d0df      	beq.n	801232e <UART_SetConfig+0xa2>
 801236e:	d956      	bls.n	801241e <UART_SetConfig+0x192>
 8012370:	2b04      	cmp	r3, #4
 8012372:	d01e      	beq.n	80123b2 <UART_SetConfig+0x126>
 8012374:	2b08      	cmp	r3, #8
 8012376:	d1c3      	bne.n	8012300 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012378:	2080      	movs	r0, #128	; 0x80
 801237a:	6869      	ldr	r1, [r5, #4]
 801237c:	0200      	lsls	r0, r0, #8
 801237e:	f7ed fee7 	bl	8000150 <__udivsi3>
 8012382:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012384:	2000      	movs	r0, #0
        break;
 8012386:	e7da      	b.n	801233e <UART_SetConfig+0xb2>
    switch (clocksource)
 8012388:	2b02      	cmp	r3, #2
 801238a:	d027      	beq.n	80123dc <UART_SetConfig+0x150>
 801238c:	d907      	bls.n	801239e <UART_SetConfig+0x112>
 801238e:	2b04      	cmp	r3, #4
 8012390:	d014      	beq.n	80123bc <UART_SetConfig+0x130>
 8012392:	2b08      	cmp	r3, #8
 8012394:	d105      	bne.n	80123a2 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012396:	2080      	movs	r0, #128	; 0x80
 8012398:	6869      	ldr	r1, [r5, #4]
 801239a:	0240      	lsls	r0, r0, #9
 801239c:	e020      	b.n	80123e0 <UART_SetConfig+0x154>
    switch (clocksource)
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d035      	beq.n	801240e <UART_SetConfig+0x182>
 80123a2:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80123a4:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80123a6:	60e3      	str	r3, [r4, #12]
 80123a8:	e7c9      	b.n	801233e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123aa:	2380      	movs	r3, #128	; 0x80
 80123ac:	021b      	lsls	r3, r3, #8
 80123ae:	4299      	cmp	r1, r3
 80123b0:	d004      	beq.n	80123bc <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80123b2:	f7ff fa3b 	bl	801182c <HAL_RCC_GetSysClockFreq>
 80123b6:	682c      	ldr	r4, [r5, #0]
 80123b8:	6869      	ldr	r1, [r5, #4]
 80123ba:	e7ba      	b.n	8012332 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80123bc:	f7ff fa36 	bl	801182c <HAL_RCC_GetSysClockFreq>
 80123c0:	6869      	ldr	r1, [r5, #4]
 80123c2:	0040      	lsls	r0, r0, #1
 80123c4:	f7ed fec4 	bl	8000150 <__udivsi3>
 80123c8:	682c      	ldr	r4, [r5, #0]
 80123ca:	220f      	movs	r2, #15
 80123cc:	0703      	lsls	r3, r0, #28
 80123ce:	0f5b      	lsrs	r3, r3, #29
 80123d0:	4390      	bics	r0, r2
 80123d2:	4303      	orrs	r3, r0
 80123d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80123d6:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80123d8:	60e3      	str	r3, [r4, #12]
 80123da:	e7b0      	b.n	801233e <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80123dc:	6869      	ldr	r1, [r5, #4]
 80123de:	4820      	ldr	r0, [pc, #128]	; (8012460 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80123e0:	f7ed feb6 	bl	8000150 <__udivsi3>
 80123e4:	e7f1      	b.n	80123ca <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123e6:	20c0      	movs	r0, #192	; 0xc0
 80123e8:	2280      	movs	r2, #128	; 0x80
 80123ea:	4b1a      	ldr	r3, [pc, #104]	; (8012454 <UART_SetConfig+0x1c8>)
 80123ec:	0300      	lsls	r0, r0, #12
 80123ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123f0:	02d2      	lsls	r2, r2, #11
 80123f2:	4003      	ands	r3, r0
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d0d8      	beq.n	80123aa <UART_SetConfig+0x11e>
 80123f8:	d9a2      	bls.n	8012340 <UART_SetConfig+0xb4>
 80123fa:	2280      	movs	r2, #128	; 0x80
 80123fc:	0312      	lsls	r2, r2, #12
 80123fe:	4293      	cmp	r3, r2
 8012400:	d000      	beq.n	8012404 <UART_SetConfig+0x178>
 8012402:	e78e      	b.n	8012322 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012404:	2380      	movs	r3, #128	; 0x80
 8012406:	021b      	lsls	r3, r3, #8
 8012408:	4299      	cmp	r1, r3
 801240a:	d1b5      	bne.n	8012378 <UART_SetConfig+0xec>
 801240c:	e7c3      	b.n	8012396 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801240e:	f7ff fa67 	bl	80118e0 <HAL_RCC_GetPCLK1Freq>
 8012412:	6869      	ldr	r1, [r5, #4]
 8012414:	0040      	lsls	r0, r0, #1
 8012416:	f7ed fe9b 	bl	8000150 <__udivsi3>
 801241a:	682c      	ldr	r4, [r5, #0]
 801241c:	e7d5      	b.n	80123ca <UART_SetConfig+0x13e>
    switch (clocksource)
 801241e:	2b00      	cmp	r3, #0
 8012420:	d094      	beq.n	801234c <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 8012422:	2001      	movs	r0, #1
 8012424:	e78b      	b.n	801233e <UART_SetConfig+0xb2>
 8012426:	46c0      	nop			; (mov r8, r8)
 8012428:	efff69f3 	.word	0xefff69f3
 801242c:	ffffcfff 	.word	0xffffcfff
 8012430:	fffff4ff 	.word	0xfffff4ff
 8012434:	40013800 	.word	0x40013800
 8012438:	40004400 	.word	0x40004400
 801243c:	40004800 	.word	0x40004800
 8012440:	40004c00 	.word	0x40004c00
 8012444:	40005000 	.word	0x40005000
 8012448:	40011400 	.word	0x40011400
 801244c:	40011800 	.word	0x40011800
 8012450:	40011c00 	.word	0x40011c00
 8012454:	40021000 	.word	0x40021000
 8012458:	007a1200 	.word	0x007a1200
 801245c:	08017e1c 	.word	0x08017e1c
 8012460:	00f42400 	.word	0x00f42400

08012464 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012464:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8012466:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012468:	07da      	lsls	r2, r3, #31
 801246a:	d506      	bpl.n	801247a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801246c:	6801      	ldr	r1, [r0, #0]
 801246e:	4c28      	ldr	r4, [pc, #160]	; (8012510 <UART_AdvFeatureConfig+0xac>)
 8012470:	684a      	ldr	r2, [r1, #4]
 8012472:	4022      	ands	r2, r4
 8012474:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012476:	4322      	orrs	r2, r4
 8012478:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801247a:	079a      	lsls	r2, r3, #30
 801247c:	d506      	bpl.n	801248c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801247e:	6801      	ldr	r1, [r0, #0]
 8012480:	4c24      	ldr	r4, [pc, #144]	; (8012514 <UART_AdvFeatureConfig+0xb0>)
 8012482:	684a      	ldr	r2, [r1, #4]
 8012484:	4022      	ands	r2, r4
 8012486:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012488:	4322      	orrs	r2, r4
 801248a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801248c:	075a      	lsls	r2, r3, #29
 801248e:	d506      	bpl.n	801249e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012490:	6801      	ldr	r1, [r0, #0]
 8012492:	4c21      	ldr	r4, [pc, #132]	; (8012518 <UART_AdvFeatureConfig+0xb4>)
 8012494:	684a      	ldr	r2, [r1, #4]
 8012496:	4022      	ands	r2, r4
 8012498:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801249a:	4322      	orrs	r2, r4
 801249c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801249e:	071a      	lsls	r2, r3, #28
 80124a0:	d506      	bpl.n	80124b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80124a2:	6801      	ldr	r1, [r0, #0]
 80124a4:	4c1d      	ldr	r4, [pc, #116]	; (801251c <UART_AdvFeatureConfig+0xb8>)
 80124a6:	684a      	ldr	r2, [r1, #4]
 80124a8:	4022      	ands	r2, r4
 80124aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80124ac:	4322      	orrs	r2, r4
 80124ae:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80124b0:	06da      	lsls	r2, r3, #27
 80124b2:	d506      	bpl.n	80124c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80124b4:	6801      	ldr	r1, [r0, #0]
 80124b6:	4c1a      	ldr	r4, [pc, #104]	; (8012520 <UART_AdvFeatureConfig+0xbc>)
 80124b8:	688a      	ldr	r2, [r1, #8]
 80124ba:	4022      	ands	r2, r4
 80124bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80124be:	4322      	orrs	r2, r4
 80124c0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80124c2:	069a      	lsls	r2, r3, #26
 80124c4:	d506      	bpl.n	80124d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80124c6:	6801      	ldr	r1, [r0, #0]
 80124c8:	4c16      	ldr	r4, [pc, #88]	; (8012524 <UART_AdvFeatureConfig+0xc0>)
 80124ca:	688a      	ldr	r2, [r1, #8]
 80124cc:	4022      	ands	r2, r4
 80124ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80124d0:	4322      	orrs	r2, r4
 80124d2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80124d4:	065a      	lsls	r2, r3, #25
 80124d6:	d50a      	bpl.n	80124ee <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80124d8:	6801      	ldr	r1, [r0, #0]
 80124da:	4d13      	ldr	r5, [pc, #76]	; (8012528 <UART_AdvFeatureConfig+0xc4>)
 80124dc:	684a      	ldr	r2, [r1, #4]
 80124de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80124e0:	402a      	ands	r2, r5
 80124e2:	4322      	orrs	r2, r4
 80124e4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80124e6:	2280      	movs	r2, #128	; 0x80
 80124e8:	0352      	lsls	r2, r2, #13
 80124ea:	4294      	cmp	r4, r2
 80124ec:	d009      	beq.n	8012502 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80124ee:	061b      	lsls	r3, r3, #24
 80124f0:	d506      	bpl.n	8012500 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80124f2:	6802      	ldr	r2, [r0, #0]
 80124f4:	490d      	ldr	r1, [pc, #52]	; (801252c <UART_AdvFeatureConfig+0xc8>)
 80124f6:	6853      	ldr	r3, [r2, #4]
 80124f8:	400b      	ands	r3, r1
 80124fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80124fc:	430b      	orrs	r3, r1
 80124fe:	6053      	str	r3, [r2, #4]
}
 8012500:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012502:	684a      	ldr	r2, [r1, #4]
 8012504:	4c0a      	ldr	r4, [pc, #40]	; (8012530 <UART_AdvFeatureConfig+0xcc>)
 8012506:	4022      	ands	r2, r4
 8012508:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801250a:	4322      	orrs	r2, r4
 801250c:	604a      	str	r2, [r1, #4]
 801250e:	e7ee      	b.n	80124ee <UART_AdvFeatureConfig+0x8a>
 8012510:	fffdffff 	.word	0xfffdffff
 8012514:	fffeffff 	.word	0xfffeffff
 8012518:	fffbffff 	.word	0xfffbffff
 801251c:	ffff7fff 	.word	0xffff7fff
 8012520:	ffffefff 	.word	0xffffefff
 8012524:	ffffdfff 	.word	0xffffdfff
 8012528:	ffefffff 	.word	0xffefffff
 801252c:	fff7ffff 	.word	0xfff7ffff
 8012530:	ff9fffff 	.word	0xff9fffff

08012534 <UART_WaitOnFlagUntilTimeout>:
{
 8012534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012536:	46c6      	mov	lr, r8
 8012538:	4690      	mov	r8, r2
 801253a:	b500      	push	{lr}
 801253c:	001d      	movs	r5, r3
 801253e:	0006      	movs	r6, r0
 8012540:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8012542:	f7fd f8db 	bl	800f6fc <HAL_GetTick>
  if(Status == RESET)
 8012546:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012548:	0007      	movs	r7, r0
  if(Status == RESET)
 801254a:	2b00      	cmp	r3, #0
 801254c:	d112      	bne.n	8012574 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801254e:	6832      	ldr	r2, [r6, #0]
 8012550:	e001      	b.n	8012556 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8012552:	1c6b      	adds	r3, r5, #1
 8012554:	d117      	bne.n	8012586 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012556:	69d3      	ldr	r3, [r2, #28]
 8012558:	4023      	ands	r3, r4
 801255a:	42a3      	cmp	r3, r4
 801255c:	d1f9      	bne.n	8012552 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801255e:	2000      	movs	r0, #0
}
 8012560:	bc04      	pop	{r2}
 8012562:	4690      	mov	r8, r2
 8012564:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012566:	2d00      	cmp	r5, #0
 8012568:	d015      	beq.n	8012596 <UART_WaitOnFlagUntilTimeout+0x62>
 801256a:	f7fd f8c7 	bl	800f6fc <HAL_GetTick>
 801256e:	1bc0      	subs	r0, r0, r7
 8012570:	42a8      	cmp	r0, r5
 8012572:	d80f      	bhi.n	8012594 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012574:	6832      	ldr	r2, [r6, #0]
 8012576:	e001      	b.n	801257c <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8012578:	1c6b      	adds	r3, r5, #1
 801257a:	d1f4      	bne.n	8012566 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801257c:	69d3      	ldr	r3, [r2, #28]
 801257e:	4023      	ands	r3, r4
 8012580:	42a3      	cmp	r3, r4
 8012582:	d0f9      	beq.n	8012578 <UART_WaitOnFlagUntilTimeout+0x44>
 8012584:	e7eb      	b.n	801255e <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012586:	2d00      	cmp	r5, #0
 8012588:	d005      	beq.n	8012596 <UART_WaitOnFlagUntilTimeout+0x62>
 801258a:	f7fd f8b7 	bl	800f6fc <HAL_GetTick>
 801258e:	1bc0      	subs	r0, r0, r7
 8012590:	42a8      	cmp	r0, r5
 8012592:	d9dc      	bls.n	801254e <UART_WaitOnFlagUntilTimeout+0x1a>
 8012594:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012596:	2180      	movs	r1, #128	; 0x80
 8012598:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 801259a:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801259c:	438b      	bics	r3, r1
 801259e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80125a0:	6813      	ldr	r3, [r2, #0]
 80125a2:	3960      	subs	r1, #96	; 0x60
 80125a4:	438b      	bics	r3, r1
 80125a6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80125a8:	6813      	ldr	r3, [r2, #0]
 80125aa:	4907      	ldr	r1, [pc, #28]	; (80125c8 <UART_WaitOnFlagUntilTimeout+0x94>)
 80125ac:	400b      	ands	r3, r1
 80125ae:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80125b0:	6893      	ldr	r3, [r2, #8]
 80125b2:	3103      	adds	r1, #3
 80125b4:	31ff      	adds	r1, #255	; 0xff
 80125b6:	438b      	bics	r3, r1
 80125b8:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 80125ba:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 80125bc:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 80125be:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80125c0:	3b01      	subs	r3, #1
 80125c2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80125c4:	e7cc      	b.n	8012560 <UART_WaitOnFlagUntilTimeout+0x2c>
 80125c6:	46c0      	nop			; (mov r8, r8)
 80125c8:	fffffeff 	.word	0xfffffeff

080125cc <HAL_UART_Transmit>:
{
 80125cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ce:	46c6      	mov	lr, r8
 80125d0:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125d2:	2369      	movs	r3, #105	; 0x69
{
 80125d4:	b500      	push	{lr}
 80125d6:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125d8:	5cc1      	ldrb	r1, [r0, r3]
{
 80125da:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125dc:	2901      	cmp	r1, #1
 80125de:	d003      	beq.n	80125e8 <HAL_UART_Transmit+0x1c>
 80125e0:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80125e2:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125e4:	2b22      	cmp	r3, #34	; 0x22
 80125e6:	d147      	bne.n	8012678 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80125e8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80125ea:	2d00      	cmp	r5, #0
 80125ec:	d044      	beq.n	8012678 <HAL_UART_Transmit+0xac>
 80125ee:	2a00      	cmp	r2, #0
 80125f0:	d042      	beq.n	8012678 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80125f2:	2368      	movs	r3, #104	; 0x68
 80125f4:	5ce1      	ldrb	r1, [r4, r3]
 80125f6:	2901      	cmp	r1, #1
 80125f8:	d046      	beq.n	8012688 <HAL_UART_Transmit+0xbc>
 80125fa:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125fc:	2300      	movs	r3, #0
 80125fe:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012600:	3369      	adds	r3, #105	; 0x69
 8012602:	5ce1      	ldrb	r1, [r4, r3]
 8012604:	2922      	cmp	r1, #34	; 0x22
 8012606:	d03a      	beq.n	801267e <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012608:	2112      	movs	r1, #18
 801260a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801260c:	2350      	movs	r3, #80	; 0x50
 801260e:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012610:	2380      	movs	r3, #128	; 0x80
 8012612:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 8012614:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012616:	4698      	mov	r8, r3
 8012618:	e005      	b.n	8012626 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801261a:	782a      	ldrb	r2, [r5, #0]
 801261c:	3501      	adds	r5, #1
 801261e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8012620:	5ba2      	ldrh	r2, [r4, r6]
 8012622:	2a00      	cmp	r2, #0
 8012624:	d018      	beq.n	8012658 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8012626:	3a01      	subs	r2, #1
 8012628:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 801262a:	003b      	movs	r3, r7
 801262c:	2200      	movs	r2, #0
 801262e:	2180      	movs	r1, #128	; 0x80
 8012630:	0020      	movs	r0, r4
 8012632:	f7ff ff7f 	bl	8012534 <UART_WaitOnFlagUntilTimeout>
 8012636:	2800      	cmp	r0, #0
 8012638:	d124      	bne.n	8012684 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801263a:	68a2      	ldr	r2, [r4, #8]
 801263c:	6823      	ldr	r3, [r4, #0]
 801263e:	4542      	cmp	r2, r8
 8012640:	d1eb      	bne.n	801261a <HAL_UART_Transmit+0x4e>
 8012642:	6922      	ldr	r2, [r4, #16]
 8012644:	2a00      	cmp	r2, #0
 8012646:	d1e8      	bne.n	801261a <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012648:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 801264a:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801264c:	05d2      	lsls	r2, r2, #23
 801264e:	0dd2      	lsrs	r2, r2, #23
 8012650:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8012652:	5ba2      	ldrh	r2, [r4, r6]
 8012654:	2a00      	cmp	r2, #0
 8012656:	d1e6      	bne.n	8012626 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012658:	003b      	movs	r3, r7
 801265a:	2140      	movs	r1, #64	; 0x40
 801265c:	0020      	movs	r0, r4
 801265e:	f7ff ff69 	bl	8012534 <UART_WaitOnFlagUntilTimeout>
 8012662:	2800      	cmp	r0, #0
 8012664:	d10e      	bne.n	8012684 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012666:	2369      	movs	r3, #105	; 0x69
 8012668:	5ce2      	ldrb	r2, [r4, r3]
 801266a:	2a32      	cmp	r2, #50	; 0x32
 801266c:	d00e      	beq.n	801268c <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 801266e:	2201      	movs	r2, #1
 8012670:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012672:	2368      	movs	r3, #104	; 0x68
 8012674:	2200      	movs	r2, #0
 8012676:	54e2      	strb	r2, [r4, r3]
}
 8012678:	bc04      	pop	{r2}
 801267a:	4690      	mov	r8, r2
 801267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801267e:	3110      	adds	r1, #16
 8012680:	54e1      	strb	r1, [r4, r3]
 8012682:	e7c3      	b.n	801260c <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8012684:	2003      	movs	r0, #3
 8012686:	e7f7      	b.n	8012678 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8012688:	2002      	movs	r0, #2
 801268a:	e7f5      	b.n	8012678 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801268c:	3a10      	subs	r2, #16
 801268e:	54e2      	strb	r2, [r4, r3]
 8012690:	e7ef      	b.n	8012672 <HAL_UART_Transmit+0xa6>
 8012692:	46c0      	nop			; (mov r8, r8)

08012694 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012694:	2300      	movs	r3, #0
{
 8012696:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012698:	4a1a      	ldr	r2, [pc, #104]	; (8012704 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801269a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801269c:	6803      	ldr	r3, [r0, #0]
{
 801269e:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d00d      	beq.n	80126c0 <UART_CheckIdleState+0x2c>
 80126a4:	4a18      	ldr	r2, [pc, #96]	; (8012708 <UART_CheckIdleState+0x74>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d00a      	beq.n	80126c0 <UART_CheckIdleState+0x2c>
 80126aa:	4a18      	ldr	r2, [pc, #96]	; (801270c <UART_CheckIdleState+0x78>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d007      	beq.n	80126c0 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 80126b0:	2369      	movs	r3, #105	; 0x69
 80126b2:	2201      	movs	r2, #1
 80126b4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80126b6:	2200      	movs	r2, #0
  return HAL_OK;
 80126b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80126ba:	3b01      	subs	r3, #1
 80126bc:	54e2      	strb	r2, [r4, r3]
}
 80126be:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	0712      	lsls	r2, r2, #28
 80126c4:	d40e      	bmi.n	80126e4 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	075b      	lsls	r3, r3, #29
 80126ca:	d5f1      	bpl.n	80126b0 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80126cc:	23fa      	movs	r3, #250	; 0xfa
 80126ce:	2180      	movs	r1, #128	; 0x80
 80126d0:	009b      	lsls	r3, r3, #2
 80126d2:	2200      	movs	r2, #0
 80126d4:	03c9      	lsls	r1, r1, #15
 80126d6:	0020      	movs	r0, r4
 80126d8:	f7ff ff2c 	bl	8012534 <UART_WaitOnFlagUntilTimeout>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d0e7      	beq.n	80126b0 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 80126e0:	2003      	movs	r0, #3
 80126e2:	e7ec      	b.n	80126be <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80126e4:	23fa      	movs	r3, #250	; 0xfa
 80126e6:	2180      	movs	r1, #128	; 0x80
 80126e8:	009b      	lsls	r3, r3, #2
 80126ea:	2200      	movs	r2, #0
 80126ec:	0389      	lsls	r1, r1, #14
 80126ee:	0020      	movs	r0, r4
 80126f0:	f7ff ff20 	bl	8012534 <UART_WaitOnFlagUntilTimeout>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d1f3      	bne.n	80126e0 <UART_CheckIdleState+0x4c>
 80126f8:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	075b      	lsls	r3, r3, #29
 80126fe:	d5d7      	bpl.n	80126b0 <UART_CheckIdleState+0x1c>
 8012700:	e7e4      	b.n	80126cc <UART_CheckIdleState+0x38>
 8012702:	46c0      	nop			; (mov r8, r8)
 8012704:	40013800 	.word	0x40013800
 8012708:	40004400 	.word	0x40004400
 801270c:	40004800 	.word	0x40004800

08012710 <HAL_UART_Init>:
{
 8012710:	b510      	push	{r4, lr}
 8012712:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012714:	d02a      	beq.n	801276c <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8012716:	2369      	movs	r3, #105	; 0x69
 8012718:	5cc3      	ldrb	r3, [r0, r3]
 801271a:	b2db      	uxtb	r3, r3
 801271c:	2b00      	cmp	r3, #0
 801271e:	d020      	beq.n	8012762 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8012720:	2369      	movs	r3, #105	; 0x69
 8012722:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8012724:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8012726:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012728:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801272a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 801272c:	6813      	ldr	r3, [r2, #0]
 801272e:	438b      	bics	r3, r1
 8012730:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012732:	f7ff fdab 	bl	801228c <UART_SetConfig>
 8012736:	2801      	cmp	r0, #1
 8012738:	d018      	beq.n	801276c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801273a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801273c:	2b00      	cmp	r3, #0
 801273e:	d117      	bne.n	8012770 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012740:	6823      	ldr	r3, [r4, #0]
 8012742:	490d      	ldr	r1, [pc, #52]	; (8012778 <HAL_UART_Init+0x68>)
 8012744:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8012746:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012748:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801274a:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801274c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801274e:	689a      	ldr	r2, [r3, #8]
 8012750:	438a      	bics	r2, r1
 8012752:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	3929      	subs	r1, #41	; 0x29
 8012758:	430a      	orrs	r2, r1
 801275a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801275c:	f7ff ff9a 	bl	8012694 <UART_CheckIdleState>
}
 8012760:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012762:	2268      	movs	r2, #104	; 0x68
 8012764:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8012766:	f7fa fe01 	bl	800d36c <HAL_UART_MspInit>
 801276a:	e7d9      	b.n	8012720 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 801276c:	2001      	movs	r0, #1
 801276e:	e7f7      	b.n	8012760 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8012770:	0020      	movs	r0, r4
 8012772:	f7ff fe77 	bl	8012464 <UART_AdvFeatureConfig>
 8012776:	e7e3      	b.n	8012740 <HAL_UART_Init+0x30>
 8012778:	ffffb7ff 	.word	0xffffb7ff

0801277c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801277c:	2269      	movs	r2, #105	; 0x69
{
 801277e:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012780:	5c81      	ldrb	r1, [r0, r2]
{
 8012782:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012784:	2912      	cmp	r1, #18
 8012786:	d003      	beq.n	8012790 <UART_Transmit_IT+0x14>
 8012788:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801278a:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801278c:	2a32      	cmp	r2, #50	; 0x32
 801278e:	d112      	bne.n	80127b6 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012790:	2252      	movs	r2, #82	; 0x52
 8012792:	5a9a      	ldrh	r2, [r3, r2]
 8012794:	6819      	ldr	r1, [r3, #0]
 8012796:	2a00      	cmp	r2, #0
 8012798:	d00e      	beq.n	80127b8 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801279a:	2480      	movs	r4, #128	; 0x80
 801279c:	689d      	ldr	r5, [r3, #8]
 801279e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80127a0:	0164      	lsls	r4, r4, #5
 80127a2:	42a5      	cmp	r5, r4
 80127a4:	d012      	beq.n	80127cc <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80127a6:	1c44      	adds	r4, r0, #1
 80127a8:	64dc      	str	r4, [r3, #76]	; 0x4c
 80127aa:	7800      	ldrb	r0, [r0, #0]
 80127ac:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80127ae:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 80127b0:	2000      	movs	r0, #0
      huart->TxXferCount--;
 80127b2:	3a01      	subs	r2, #1
 80127b4:	525a      	strh	r2, [r3, r1]
  }
}
 80127b6:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80127b8:	680b      	ldr	r3, [r1, #0]
 80127ba:	3280      	adds	r2, #128	; 0x80
 80127bc:	4393      	bics	r3, r2
 80127be:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80127c0:	680b      	ldr	r3, [r1, #0]
 80127c2:	3a40      	subs	r2, #64	; 0x40
 80127c4:	4313      	orrs	r3, r2
 80127c6:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 80127c8:	2000      	movs	r0, #0
 80127ca:	e7f4      	b.n	80127b6 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80127cc:	691c      	ldr	r4, [r3, #16]
 80127ce:	2c00      	cmp	r4, #0
 80127d0:	d1e9      	bne.n	80127a6 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80127d2:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 80127d4:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80127d6:	05e4      	lsls	r4, r4, #23
 80127d8:	0de4      	lsrs	r4, r4, #23
 80127da:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80127dc:	64d8      	str	r0, [r3, #76]	; 0x4c
 80127de:	e7e6      	b.n	80127ae <UART_Transmit_IT+0x32>

080127e0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80127e0:	2140      	movs	r1, #64	; 0x40
 80127e2:	6803      	ldr	r3, [r0, #0]
{
 80127e4:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	438a      	bics	r2, r1
 80127ea:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80127ec:	2269      	movs	r2, #105	; 0x69
 80127ee:	5c81      	ldrb	r1, [r0, r2]
 80127f0:	2932      	cmp	r1, #50	; 0x32
 80127f2:	d008      	beq.n	8012806 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80127f4:	2401      	movs	r4, #1
 80127f6:	6899      	ldr	r1, [r3, #8]
 80127f8:	43a1      	bics	r1, r4
 80127fa:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 80127fc:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 80127fe:	f7fa faef 	bl	800cde0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012802:	2000      	movs	r0, #0
 8012804:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012806:	2322      	movs	r3, #34	; 0x22
 8012808:	5483      	strb	r3, [r0, r2]
 801280a:	e7f8      	b.n	80127fe <UART_EndTransmit_IT+0x1e>

0801280c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801280c:	2369      	movs	r3, #105	; 0x69
{
 801280e:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012810:	5cc2      	ldrb	r2, [r0, r3]
 8012812:	2a22      	cmp	r2, #34	; 0x22
 8012814:	d003      	beq.n	801281e <UART_Receive_IT+0x12>
 8012816:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012818:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801281a:	2b32      	cmp	r3, #50	; 0x32
 801281c:	d12b      	bne.n	8012876 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 801281e:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012820:	2180      	movs	r1, #128	; 0x80
 8012822:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8012824:	5ac3      	ldrh	r3, [r0, r3]
 8012826:	6804      	ldr	r4, [r0, #0]
 8012828:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801282a:	0149      	lsls	r1, r1, #5
 801282c:	428d      	cmp	r5, r1
 801282e:	d024      	beq.n	801287a <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012830:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8012832:	1c54      	adds	r4, r2, #1
 8012834:	400b      	ands	r3, r1
 8012836:	6544      	str	r4, [r0, #84]	; 0x54
 8012838:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 801283a:	225a      	movs	r2, #90	; 0x5a
 801283c:	5a83      	ldrh	r3, [r0, r2]
 801283e:	3b01      	subs	r3, #1
 8012840:	b29b      	uxth	r3, r3
 8012842:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012844:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012846:	2b00      	cmp	r3, #0
 8012848:	d115      	bne.n	8012876 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801284a:	2120      	movs	r1, #32
 801284c:	6803      	ldr	r3, [r0, #0]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	438a      	bics	r2, r1
 8012852:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012854:	2269      	movs	r2, #105	; 0x69
 8012856:	5c81      	ldrb	r1, [r0, r2]
 8012858:	2932      	cmp	r1, #50	; 0x32
 801285a:	d017      	beq.n	801288c <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	4c0d      	ldr	r4, [pc, #52]	; (8012894 <UART_Receive_IT+0x88>)
 8012860:	4021      	ands	r1, r4
 8012862:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012864:	6899      	ldr	r1, [r3, #8]
 8012866:	3403      	adds	r4, #3
 8012868:	34ff      	adds	r4, #255	; 0xff
 801286a:	43a1      	bics	r1, r4
 801286c:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 801286e:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8012870:	f7fa faf2 	bl	800ce58 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012874:	2200      	movs	r2, #0
  }
}
 8012876:	0010      	movs	r0, r2
 8012878:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801287a:	6901      	ldr	r1, [r0, #16]
 801287c:	2900      	cmp	r1, #0
 801287e:	d1d7      	bne.n	8012830 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012880:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8012882:	400b      	ands	r3, r1
 8012884:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012886:	3202      	adds	r2, #2
 8012888:	6542      	str	r2, [r0, #84]	; 0x54
 801288a:	e7d6      	b.n	801283a <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801288c:	2312      	movs	r3, #18
 801288e:	5483      	strb	r3, [r0, r2]
 8012890:	e7ee      	b.n	8012870 <UART_Receive_IT+0x64>
 8012892:	46c0      	nop			; (mov r8, r8)
 8012894:	fffffeff 	.word	0xfffffeff

08012898 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012898:	4770      	bx	lr
 801289a:	46c0      	nop			; (mov r8, r8)

0801289c <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801289c:	2201      	movs	r2, #1
 801289e:	6803      	ldr	r3, [r0, #0]
{
 80128a0:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80128a2:	69d9      	ldr	r1, [r3, #28]
{
 80128a4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80128a6:	420a      	tst	r2, r1
 80128a8:	d002      	beq.n	80128b0 <HAL_UART_IRQHandler+0x14>
 80128aa:	6819      	ldr	r1, [r3, #0]
 80128ac:	05c9      	lsls	r1, r1, #23
 80128ae:	d456      	bmi.n	801295e <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80128b0:	2202      	movs	r2, #2
 80128b2:	69d9      	ldr	r1, [r3, #28]
 80128b4:	420a      	tst	r2, r1
 80128b6:	d003      	beq.n	80128c0 <HAL_UART_IRQHandler+0x24>
 80128b8:	2101      	movs	r1, #1
 80128ba:	6898      	ldr	r0, [r3, #8]
 80128bc:	4201      	tst	r1, r0
 80128be:	d146      	bne.n	801294e <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80128c0:	2204      	movs	r2, #4
 80128c2:	69d9      	ldr	r1, [r3, #28]
 80128c4:	420a      	tst	r2, r1
 80128c6:	d003      	beq.n	80128d0 <HAL_UART_IRQHandler+0x34>
 80128c8:	2101      	movs	r1, #1
 80128ca:	6898      	ldr	r0, [r3, #8]
 80128cc:	4201      	tst	r1, r0
 80128ce:	d136      	bne.n	801293e <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80128d0:	2208      	movs	r2, #8
 80128d2:	69d9      	ldr	r1, [r3, #28]
 80128d4:	420a      	tst	r2, r1
 80128d6:	d003      	beq.n	80128e0 <HAL_UART_IRQHandler+0x44>
 80128d8:	2101      	movs	r1, #1
 80128da:	6898      	ldr	r0, [r3, #8]
 80128dc:	4201      	tst	r1, r0
 80128de:	d120      	bne.n	8012922 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80128e2:	2a00      	cmp	r2, #0
 80128e4:	d126      	bne.n	8012934 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80128e6:	2280      	movs	r2, #128	; 0x80
 80128e8:	69d9      	ldr	r1, [r3, #28]
 80128ea:	0352      	lsls	r2, r2, #13
 80128ec:	4211      	tst	r1, r2
 80128ee:	d002      	beq.n	80128f6 <HAL_UART_IRQHandler+0x5a>
 80128f0:	6899      	ldr	r1, [r3, #8]
 80128f2:	0249      	lsls	r1, r1, #9
 80128f4:	d43e      	bmi.n	8012974 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80128f6:	2220      	movs	r2, #32
 80128f8:	69d9      	ldr	r1, [r3, #28]
 80128fa:	420a      	tst	r2, r1
 80128fc:	d002      	beq.n	8012904 <HAL_UART_IRQHandler+0x68>
 80128fe:	6819      	ldr	r1, [r3, #0]
 8012900:	420a      	tst	r2, r1
 8012902:	d140      	bne.n	8012986 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012904:	2280      	movs	r2, #128	; 0x80
 8012906:	69d9      	ldr	r1, [r3, #28]
 8012908:	420a      	tst	r2, r1
 801290a:	d002      	beq.n	8012912 <HAL_UART_IRQHandler+0x76>
 801290c:	6819      	ldr	r1, [r3, #0]
 801290e:	420a      	tst	r2, r1
 8012910:	d142      	bne.n	8012998 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012912:	2240      	movs	r2, #64	; 0x40
 8012914:	69d9      	ldr	r1, [r3, #28]
 8012916:	420a      	tst	r2, r1
 8012918:	d002      	beq.n	8012920 <HAL_UART_IRQHandler+0x84>
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	421a      	tst	r2, r3
 801291e:	d125      	bne.n	801296c <HAL_UART_IRQHandler+0xd0>
}
 8012920:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012922:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012924:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012926:	4302      	orrs	r2, r0
 8012928:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801292a:	2269      	movs	r2, #105	; 0x69
 801292c:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 801292e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012930:	2a00      	cmp	r2, #0
 8012932:	d0d8      	beq.n	80128e6 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8012934:	0020      	movs	r0, r4
 8012936:	f7fa fa6b 	bl	800ce10 <HAL_UART_ErrorCallback>
 801293a:	6823      	ldr	r3, [r4, #0]
 801293c:	e7d3      	b.n	80128e6 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 801293e:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012940:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012942:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012944:	4302      	orrs	r2, r0
 8012946:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012948:	2269      	movs	r2, #105	; 0x69
 801294a:	54a1      	strb	r1, [r4, r2]
 801294c:	e7c0      	b.n	80128d0 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 801294e:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012950:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012952:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012954:	4302      	orrs	r2, r0
 8012956:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012958:	2269      	movs	r2, #105	; 0x69
 801295a:	54a1      	strb	r1, [r4, r2]
 801295c:	e7b0      	b.n	80128c0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 801295e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012960:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012962:	4311      	orrs	r1, r2
 8012964:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012966:	2169      	movs	r1, #105	; 0x69
 8012968:	5442      	strb	r2, [r0, r1]
 801296a:	e7a1      	b.n	80128b0 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 801296c:	0020      	movs	r0, r4
 801296e:	f7ff ff37 	bl	80127e0 <UART_EndTransmit_IT>
}
 8012972:	e7d5      	b.n	8012920 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012974:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012976:	2369      	movs	r3, #105	; 0x69
 8012978:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 801297a:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 801297c:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 801297e:	f7ff ff8b 	bl	8012898 <HAL_UARTEx_WakeupCallback>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	e7b7      	b.n	80128f6 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8012986:	0020      	movs	r0, r4
 8012988:	f7ff ff40 	bl	801280c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801298c:	2108      	movs	r1, #8
 801298e:	6823      	ldr	r3, [r4, #0]
 8012990:	699a      	ldr	r2, [r3, #24]
 8012992:	430a      	orrs	r2, r1
 8012994:	619a      	str	r2, [r3, #24]
 8012996:	e7b5      	b.n	8012904 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012998:	0020      	movs	r0, r4
 801299a:	f7ff feef 	bl	801277c <UART_Transmit_IT>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	e7b7      	b.n	8012912 <HAL_UART_IRQHandler+0x76>
 80129a2:	46c0      	nop			; (mov r8, r8)

080129a4 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 80129a4:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 80129a6:	f7f1 fe9d 	bl	80046e4 <Module_Init>
 80129aa:	e7fe      	b.n	80129aa <main+0x6>

080129ac <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 80129ac:	e7fe      	b.n	80129ac <UserTask>
 80129ae:	46c0      	nop			; (mov r8, r8)

080129b0 <atof>:
 80129b0:	b510      	push	{r4, lr}
 80129b2:	2100      	movs	r1, #0
 80129b4:	f001 fb74 	bl	80140a0 <strtod>
 80129b8:	bd10      	pop	{r4, pc}

080129ba <atoi>:
 80129ba:	b510      	push	{r4, lr}
 80129bc:	220a      	movs	r2, #10
 80129be:	2100      	movs	r1, #0
 80129c0:	f001 fc3a 	bl	8014238 <strtol>
 80129c4:	bd10      	pop	{r4, pc}

080129c6 <atol>:
 80129c6:	b510      	push	{r4, lr}
 80129c8:	220a      	movs	r2, #10
 80129ca:	2100      	movs	r1, #0
 80129cc:	f001 fc34 	bl	8014238 <strtol>
 80129d0:	bd10      	pop	{r4, pc}
	...

080129d4 <calloc>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	4b03      	ldr	r3, [pc, #12]	; (80129e4 <calloc+0x10>)
 80129d8:	000a      	movs	r2, r1
 80129da:	0001      	movs	r1, r0
 80129dc:	6818      	ldr	r0, [r3, #0]
 80129de:	f000 f803 	bl	80129e8 <_calloc_r>
 80129e2:	bd10      	pop	{r4, pc}
 80129e4:	200000d8 	.word	0x200000d8

080129e8 <_calloc_r>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	4351      	muls	r1, r2
 80129ec:	f000 f872 	bl	8012ad4 <_malloc_r>
 80129f0:	1e04      	subs	r4, r0, #0
 80129f2:	d01a      	beq.n	8012a2a <_calloc_r+0x42>
 80129f4:	0003      	movs	r3, r0
 80129f6:	3b08      	subs	r3, #8
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	2303      	movs	r3, #3
 80129fc:	439a      	bics	r2, r3
 80129fe:	3a04      	subs	r2, #4
 8012a00:	2a24      	cmp	r2, #36	; 0x24
 8012a02:	d819      	bhi.n	8012a38 <_calloc_r+0x50>
 8012a04:	0003      	movs	r3, r0
 8012a06:	2a13      	cmp	r2, #19
 8012a08:	d90b      	bls.n	8012a22 <_calloc_r+0x3a>
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	3308      	adds	r3, #8
 8012a0e:	6001      	str	r1, [r0, #0]
 8012a10:	6041      	str	r1, [r0, #4]
 8012a12:	2a1b      	cmp	r2, #27
 8012a14:	d905      	bls.n	8012a22 <_calloc_r+0x3a>
 8012a16:	6081      	str	r1, [r0, #8]
 8012a18:	60c1      	str	r1, [r0, #12]
 8012a1a:	2a24      	cmp	r2, #36	; 0x24
 8012a1c:	d007      	beq.n	8012a2e <_calloc_r+0x46>
 8012a1e:	0003      	movs	r3, r0
 8012a20:	3310      	adds	r3, #16
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	605a      	str	r2, [r3, #4]
 8012a28:	609a      	str	r2, [r3, #8]
 8012a2a:	0020      	movs	r0, r4
 8012a2c:	bd10      	pop	{r4, pc}
 8012a2e:	0003      	movs	r3, r0
 8012a30:	6101      	str	r1, [r0, #16]
 8012a32:	3318      	adds	r3, #24
 8012a34:	6141      	str	r1, [r0, #20]
 8012a36:	e7f4      	b.n	8012a22 <_calloc_r+0x3a>
 8012a38:	2100      	movs	r1, #0
 8012a3a:	f000 fa8d 	bl	8012f58 <memset>
 8012a3e:	e7f4      	b.n	8012a2a <_calloc_r+0x42>

08012a40 <__libc_init_array>:
 8012a40:	b570      	push	{r4, r5, r6, lr}
 8012a42:	2600      	movs	r6, #0
 8012a44:	4d0c      	ldr	r5, [pc, #48]	; (8012a78 <__libc_init_array+0x38>)
 8012a46:	4c0d      	ldr	r4, [pc, #52]	; (8012a7c <__libc_init_array+0x3c>)
 8012a48:	1b64      	subs	r4, r4, r5
 8012a4a:	10a4      	asrs	r4, r4, #2
 8012a4c:	42a6      	cmp	r6, r4
 8012a4e:	d109      	bne.n	8012a64 <__libc_init_array+0x24>
 8012a50:	2600      	movs	r6, #0
 8012a52:	f004 fe41 	bl	80176d8 <_init>
 8012a56:	4d0a      	ldr	r5, [pc, #40]	; (8012a80 <__libc_init_array+0x40>)
 8012a58:	4c0a      	ldr	r4, [pc, #40]	; (8012a84 <__libc_init_array+0x44>)
 8012a5a:	1b64      	subs	r4, r4, r5
 8012a5c:	10a4      	asrs	r4, r4, #2
 8012a5e:	42a6      	cmp	r6, r4
 8012a60:	d105      	bne.n	8012a6e <__libc_init_array+0x2e>
 8012a62:	bd70      	pop	{r4, r5, r6, pc}
 8012a64:	00b3      	lsls	r3, r6, #2
 8012a66:	58eb      	ldr	r3, [r5, r3]
 8012a68:	4798      	blx	r3
 8012a6a:	3601      	adds	r6, #1
 8012a6c:	e7ee      	b.n	8012a4c <__libc_init_array+0xc>
 8012a6e:	00b3      	lsls	r3, r6, #2
 8012a70:	58eb      	ldr	r3, [r5, r3]
 8012a72:	4798      	blx	r3
 8012a74:	3601      	adds	r6, #1
 8012a76:	e7f2      	b.n	8012a5e <__libc_init_array+0x1e>
 8012a78:	0801ab34 	.word	0x0801ab34
 8012a7c:	0801ab34 	.word	0x0801ab34
 8012a80:	0801ab34 	.word	0x0801ab34
 8012a84:	0801ab3c 	.word	0x0801ab3c

08012a88 <__locale_ctype_ptr_l>:
 8012a88:	30ec      	adds	r0, #236	; 0xec
 8012a8a:	6800      	ldr	r0, [r0, #0]
 8012a8c:	4770      	bx	lr
	...

08012a90 <__locale_ctype_ptr>:
 8012a90:	4b04      	ldr	r3, [pc, #16]	; (8012aa4 <__locale_ctype_ptr+0x14>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d100      	bne.n	8012a9c <__locale_ctype_ptr+0xc>
 8012a9a:	4b03      	ldr	r3, [pc, #12]	; (8012aa8 <__locale_ctype_ptr+0x18>)
 8012a9c:	33ec      	adds	r3, #236	; 0xec
 8012a9e:	6818      	ldr	r0, [r3, #0]
 8012aa0:	4770      	bx	lr
 8012aa2:	46c0      	nop			; (mov r8, r8)
 8012aa4:	200000d8 	.word	0x200000d8
 8012aa8:	20000508 	.word	0x20000508

08012aac <malloc>:
 8012aac:	b510      	push	{r4, lr}
 8012aae:	4b03      	ldr	r3, [pc, #12]	; (8012abc <malloc+0x10>)
 8012ab0:	0001      	movs	r1, r0
 8012ab2:	6818      	ldr	r0, [r3, #0]
 8012ab4:	f000 f80e 	bl	8012ad4 <_malloc_r>
 8012ab8:	bd10      	pop	{r4, pc}
 8012aba:	46c0      	nop			; (mov r8, r8)
 8012abc:	200000d8 	.word	0x200000d8

08012ac0 <free>:
 8012ac0:	b510      	push	{r4, lr}
 8012ac2:	4b03      	ldr	r3, [pc, #12]	; (8012ad0 <free+0x10>)
 8012ac4:	0001      	movs	r1, r0
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	f003 fd10 	bl	80164ec <_free_r>
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	46c0      	nop			; (mov r8, r8)
 8012ad0:	200000d8 	.word	0x200000d8

08012ad4 <_malloc_r>:
 8012ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ad6:	000d      	movs	r5, r1
 8012ad8:	b085      	sub	sp, #20
 8012ada:	350b      	adds	r5, #11
 8012adc:	9001      	str	r0, [sp, #4]
 8012ade:	2d16      	cmp	r5, #22
 8012ae0:	d908      	bls.n	8012af4 <_malloc_r+0x20>
 8012ae2:	2307      	movs	r3, #7
 8012ae4:	439d      	bics	r5, r3
 8012ae6:	d506      	bpl.n	8012af6 <_malloc_r+0x22>
 8012ae8:	230c      	movs	r3, #12
 8012aea:	9a01      	ldr	r2, [sp, #4]
 8012aec:	6013      	str	r3, [r2, #0]
 8012aee:	2000      	movs	r0, #0
 8012af0:	b005      	add	sp, #20
 8012af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af4:	2510      	movs	r5, #16
 8012af6:	428d      	cmp	r5, r1
 8012af8:	d3f6      	bcc.n	8012ae8 <_malloc_r+0x14>
 8012afa:	9801      	ldr	r0, [sp, #4]
 8012afc:	f000 fa34 	bl	8012f68 <__malloc_lock>
 8012b00:	23f8      	movs	r3, #248	; 0xf8
 8012b02:	33ff      	adds	r3, #255	; 0xff
 8012b04:	4ac4      	ldr	r2, [pc, #784]	; (8012e18 <_malloc_r+0x344>)
 8012b06:	429d      	cmp	r5, r3
 8012b08:	d820      	bhi.n	8012b4c <_malloc_r+0x78>
 8012b0a:	0029      	movs	r1, r5
 8012b0c:	3108      	adds	r1, #8
 8012b0e:	1851      	adds	r1, r2, r1
 8012b10:	0008      	movs	r0, r1
 8012b12:	684c      	ldr	r4, [r1, #4]
 8012b14:	3808      	subs	r0, #8
 8012b16:	08eb      	lsrs	r3, r5, #3
 8012b18:	4284      	cmp	r4, r0
 8012b1a:	d104      	bne.n	8012b26 <_malloc_r+0x52>
 8012b1c:	68cc      	ldr	r4, [r1, #12]
 8012b1e:	3302      	adds	r3, #2
 8012b20:	469c      	mov	ip, r3
 8012b22:	42a1      	cmp	r1, r4
 8012b24:	d02a      	beq.n	8012b7c <_malloc_r+0xa8>
 8012b26:	2303      	movs	r3, #3
 8012b28:	6862      	ldr	r2, [r4, #4]
 8012b2a:	68a1      	ldr	r1, [r4, #8]
 8012b2c:	439a      	bics	r2, r3
 8012b2e:	0013      	movs	r3, r2
 8012b30:	68e2      	ldr	r2, [r4, #12]
 8012b32:	18e3      	adds	r3, r4, r3
 8012b34:	60ca      	str	r2, [r1, #12]
 8012b36:	6091      	str	r1, [r2, #8]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	6859      	ldr	r1, [r3, #4]
 8012b3c:	430a      	orrs	r2, r1
 8012b3e:	605a      	str	r2, [r3, #4]
 8012b40:	9801      	ldr	r0, [sp, #4]
 8012b42:	f000 fa19 	bl	8012f78 <__malloc_unlock>
 8012b46:	0020      	movs	r0, r4
 8012b48:	3008      	adds	r0, #8
 8012b4a:	e7d1      	b.n	8012af0 <_malloc_r+0x1c>
 8012b4c:	0a69      	lsrs	r1, r5, #9
 8012b4e:	233f      	movs	r3, #63	; 0x3f
 8012b50:	2900      	cmp	r1, #0
 8012b52:	d003      	beq.n	8012b5c <_malloc_r+0x88>
 8012b54:	2904      	cmp	r1, #4
 8012b56:	d828      	bhi.n	8012baa <_malloc_r+0xd6>
 8012b58:	09ab      	lsrs	r3, r5, #6
 8012b5a:	3338      	adds	r3, #56	; 0x38
 8012b5c:	2103      	movs	r1, #3
 8012b5e:	468c      	mov	ip, r1
 8012b60:	00d8      	lsls	r0, r3, #3
 8012b62:	1880      	adds	r0, r0, r2
 8012b64:	68c4      	ldr	r4, [r0, #12]
 8012b66:	4284      	cmp	r4, r0
 8012b68:	d006      	beq.n	8012b78 <_malloc_r+0xa4>
 8012b6a:	4666      	mov	r6, ip
 8012b6c:	6861      	ldr	r1, [r4, #4]
 8012b6e:	43b1      	bics	r1, r6
 8012b70:	1b4f      	subs	r7, r1, r5
 8012b72:	2f0f      	cmp	r7, #15
 8012b74:	dd31      	ble.n	8012bda <_malloc_r+0x106>
 8012b76:	3b01      	subs	r3, #1
 8012b78:	3301      	adds	r3, #1
 8012b7a:	469c      	mov	ip, r3
 8012b7c:	6914      	ldr	r4, [r2, #16]
 8012b7e:	49a7      	ldr	r1, [pc, #668]	; (8012e1c <_malloc_r+0x348>)
 8012b80:	428c      	cmp	r4, r1
 8012b82:	d055      	beq.n	8012c30 <_malloc_r+0x15c>
 8012b84:	2303      	movs	r3, #3
 8012b86:	6860      	ldr	r0, [r4, #4]
 8012b88:	4398      	bics	r0, r3
 8012b8a:	0003      	movs	r3, r0
 8012b8c:	1b46      	subs	r6, r0, r5
 8012b8e:	2e0f      	cmp	r6, #15
 8012b90:	dd31      	ble.n	8012bf6 <_malloc_r+0x122>
 8012b92:	2701      	movs	r7, #1
 8012b94:	1960      	adds	r0, r4, r5
 8012b96:	433d      	orrs	r5, r7
 8012b98:	4337      	orrs	r7, r6
 8012b9a:	6065      	str	r5, [r4, #4]
 8012b9c:	6150      	str	r0, [r2, #20]
 8012b9e:	6110      	str	r0, [r2, #16]
 8012ba0:	60c1      	str	r1, [r0, #12]
 8012ba2:	6081      	str	r1, [r0, #8]
 8012ba4:	6047      	str	r7, [r0, #4]
 8012ba6:	50e6      	str	r6, [r4, r3]
 8012ba8:	e7ca      	b.n	8012b40 <_malloc_r+0x6c>
 8012baa:	2914      	cmp	r1, #20
 8012bac:	d802      	bhi.n	8012bb4 <_malloc_r+0xe0>
 8012bae:	000b      	movs	r3, r1
 8012bb0:	335b      	adds	r3, #91	; 0x5b
 8012bb2:	e7d3      	b.n	8012b5c <_malloc_r+0x88>
 8012bb4:	2954      	cmp	r1, #84	; 0x54
 8012bb6:	d802      	bhi.n	8012bbe <_malloc_r+0xea>
 8012bb8:	0b2b      	lsrs	r3, r5, #12
 8012bba:	336e      	adds	r3, #110	; 0x6e
 8012bbc:	e7ce      	b.n	8012b5c <_malloc_r+0x88>
 8012bbe:	23aa      	movs	r3, #170	; 0xaa
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	4299      	cmp	r1, r3
 8012bc4:	d802      	bhi.n	8012bcc <_malloc_r+0xf8>
 8012bc6:	0beb      	lsrs	r3, r5, #15
 8012bc8:	3377      	adds	r3, #119	; 0x77
 8012bca:	e7c7      	b.n	8012b5c <_malloc_r+0x88>
 8012bcc:	4894      	ldr	r0, [pc, #592]	; (8012e20 <_malloc_r+0x34c>)
 8012bce:	237e      	movs	r3, #126	; 0x7e
 8012bd0:	4281      	cmp	r1, r0
 8012bd2:	d8c3      	bhi.n	8012b5c <_malloc_r+0x88>
 8012bd4:	0cab      	lsrs	r3, r5, #18
 8012bd6:	337c      	adds	r3, #124	; 0x7c
 8012bd8:	e7c0      	b.n	8012b5c <_malloc_r+0x88>
 8012bda:	68e6      	ldr	r6, [r4, #12]
 8012bdc:	2f00      	cmp	r7, #0
 8012bde:	db08      	blt.n	8012bf2 <_malloc_r+0x11e>
 8012be0:	68a3      	ldr	r3, [r4, #8]
 8012be2:	1861      	adds	r1, r4, r1
 8012be4:	60de      	str	r6, [r3, #12]
 8012be6:	60b3      	str	r3, [r6, #8]
 8012be8:	2301      	movs	r3, #1
 8012bea:	684a      	ldr	r2, [r1, #4]
 8012bec:	4313      	orrs	r3, r2
 8012bee:	604b      	str	r3, [r1, #4]
 8012bf0:	e7a6      	b.n	8012b40 <_malloc_r+0x6c>
 8012bf2:	0034      	movs	r4, r6
 8012bf4:	e7b7      	b.n	8012b66 <_malloc_r+0x92>
 8012bf6:	6151      	str	r1, [r2, #20]
 8012bf8:	6111      	str	r1, [r2, #16]
 8012bfa:	2e00      	cmp	r6, #0
 8012bfc:	db05      	blt.n	8012c0a <_malloc_r+0x136>
 8012bfe:	2101      	movs	r1, #1
 8012c00:	1823      	adds	r3, r4, r0
 8012c02:	685a      	ldr	r2, [r3, #4]
 8012c04:	4311      	orrs	r1, r2
 8012c06:	6059      	str	r1, [r3, #4]
 8012c08:	e79a      	b.n	8012b40 <_malloc_r+0x6c>
 8012c0a:	4986      	ldr	r1, [pc, #536]	; (8012e24 <_malloc_r+0x350>)
 8012c0c:	6857      	ldr	r7, [r2, #4]
 8012c0e:	4288      	cmp	r0, r1
 8012c10:	d900      	bls.n	8012c14 <_malloc_r+0x140>
 8012c12:	e090      	b.n	8012d36 <_malloc_r+0x262>
 8012c14:	08c3      	lsrs	r3, r0, #3
 8012c16:	39ff      	subs	r1, #255	; 0xff
 8012c18:	1098      	asrs	r0, r3, #2
 8012c1a:	39ff      	subs	r1, #255	; 0xff
 8012c1c:	4081      	lsls	r1, r0
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	4339      	orrs	r1, r7
 8012c22:	6051      	str	r1, [r2, #4]
 8012c24:	189a      	adds	r2, r3, r2
 8012c26:	6893      	ldr	r3, [r2, #8]
 8012c28:	60e2      	str	r2, [r4, #12]
 8012c2a:	60a3      	str	r3, [r4, #8]
 8012c2c:	6094      	str	r4, [r2, #8]
 8012c2e:	60dc      	str	r4, [r3, #12]
 8012c30:	4663      	mov	r3, ip
 8012c32:	2201      	movs	r2, #1
 8012c34:	4978      	ldr	r1, [pc, #480]	; (8012e18 <_malloc_r+0x344>)
 8012c36:	109b      	asrs	r3, r3, #2
 8012c38:	6848      	ldr	r0, [r1, #4]
 8012c3a:	409a      	lsls	r2, r3
 8012c3c:	4290      	cmp	r0, r2
 8012c3e:	d32d      	bcc.n	8012c9c <_malloc_r+0x1c8>
 8012c40:	4202      	tst	r2, r0
 8012c42:	d109      	bne.n	8012c58 <_malloc_r+0x184>
 8012c44:	2303      	movs	r3, #3
 8012c46:	4664      	mov	r4, ip
 8012c48:	439c      	bics	r4, r3
 8012c4a:	0023      	movs	r3, r4
 8012c4c:	3304      	adds	r3, #4
 8012c4e:	469c      	mov	ip, r3
 8012c50:	0052      	lsls	r2, r2, #1
 8012c52:	4202      	tst	r2, r0
 8012c54:	d100      	bne.n	8012c58 <_malloc_r+0x184>
 8012c56:	e0a4      	b.n	8012da2 <_malloc_r+0x2ce>
 8012c58:	4663      	mov	r3, ip
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	18cb      	adds	r3, r1, r3
 8012c5e:	9303      	str	r3, [sp, #12]
 8012c60:	001f      	movs	r7, r3
 8012c62:	4663      	mov	r3, ip
 8012c64:	9302      	str	r3, [sp, #8]
 8012c66:	68fc      	ldr	r4, [r7, #12]
 8012c68:	42bc      	cmp	r4, r7
 8012c6a:	d000      	beq.n	8012c6e <_malloc_r+0x19a>
 8012c6c:	e09c      	b.n	8012da8 <_malloc_r+0x2d4>
 8012c6e:	2003      	movs	r0, #3
 8012c70:	9b02      	ldr	r3, [sp, #8]
 8012c72:	3708      	adds	r7, #8
 8012c74:	3301      	adds	r3, #1
 8012c76:	9302      	str	r3, [sp, #8]
 8012c78:	4203      	tst	r3, r0
 8012c7a:	d1f4      	bne.n	8012c66 <_malloc_r+0x192>
 8012c7c:	4663      	mov	r3, ip
 8012c7e:	2003      	movs	r0, #3
 8012c80:	4203      	tst	r3, r0
 8012c82:	d000      	beq.n	8012c86 <_malloc_r+0x1b2>
 8012c84:	e0b3      	b.n	8012dee <_malloc_r+0x31a>
 8012c86:	684b      	ldr	r3, [r1, #4]
 8012c88:	4393      	bics	r3, r2
 8012c8a:	604b      	str	r3, [r1, #4]
 8012c8c:	4b62      	ldr	r3, [pc, #392]	; (8012e18 <_malloc_r+0x344>)
 8012c8e:	0052      	lsls	r2, r2, #1
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d302      	bcc.n	8012c9c <_malloc_r+0x1c8>
 8012c96:	2a00      	cmp	r2, #0
 8012c98:	d000      	beq.n	8012c9c <_malloc_r+0x1c8>
 8012c9a:	e0b9      	b.n	8012e10 <_malloc_r+0x33c>
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	688f      	ldr	r7, [r1, #8]
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	439a      	bics	r2, r3
 8012ca4:	9202      	str	r2, [sp, #8]
 8012ca6:	42aa      	cmp	r2, r5
 8012ca8:	d303      	bcc.n	8012cb2 <_malloc_r+0x1de>
 8012caa:	1b52      	subs	r2, r2, r5
 8012cac:	2a0f      	cmp	r2, #15
 8012cae:	dd00      	ble.n	8012cb2 <_malloc_r+0x1de>
 8012cb0:	e116      	b.n	8012ee0 <_malloc_r+0x40c>
 8012cb2:	4b5d      	ldr	r3, [pc, #372]	; (8012e28 <_malloc_r+0x354>)
 8012cb4:	2008      	movs	r0, #8
 8012cb6:	681e      	ldr	r6, [r3, #0]
 8012cb8:	f002 fd26 	bl	8015708 <sysconf>
 8012cbc:	4b5b      	ldr	r3, [pc, #364]	; (8012e2c <_malloc_r+0x358>)
 8012cbe:	3610      	adds	r6, #16
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	1976      	adds	r6, r6, r5
 8012cc4:	9003      	str	r0, [sp, #12]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	d003      	beq.n	8012cd2 <_malloc_r+0x1fe>
 8012cca:	3e01      	subs	r6, #1
 8012ccc:	1836      	adds	r6, r6, r0
 8012cce:	4243      	negs	r3, r0
 8012cd0:	401e      	ands	r6, r3
 8012cd2:	0031      	movs	r1, r6
 8012cd4:	9801      	ldr	r0, [sp, #4]
 8012cd6:	f000 fb27 	bl	8013328 <_sbrk_r>
 8012cda:	0004      	movs	r4, r0
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d100      	bne.n	8012ce2 <_malloc_r+0x20e>
 8012ce0:	e0d6      	b.n	8012e90 <_malloc_r+0x3bc>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	18fb      	adds	r3, r7, r3
 8012ce6:	4283      	cmp	r3, r0
 8012ce8:	d903      	bls.n	8012cf2 <_malloc_r+0x21e>
 8012cea:	4a4b      	ldr	r2, [pc, #300]	; (8012e18 <_malloc_r+0x344>)
 8012cec:	4297      	cmp	r7, r2
 8012cee:	d000      	beq.n	8012cf2 <_malloc_r+0x21e>
 8012cf0:	e0ce      	b.n	8012e90 <_malloc_r+0x3bc>
 8012cf2:	494f      	ldr	r1, [pc, #316]	; (8012e30 <_malloc_r+0x35c>)
 8012cf4:	680a      	ldr	r2, [r1, #0]
 8012cf6:	18b2      	adds	r2, r6, r2
 8012cf8:	600a      	str	r2, [r1, #0]
 8012cfa:	9903      	ldr	r1, [sp, #12]
 8012cfc:	4694      	mov	ip, r2
 8012cfe:	1e48      	subs	r0, r1, #1
 8012d00:	42a3      	cmp	r3, r4
 8012d02:	d000      	beq.n	8012d06 <_malloc_r+0x232>
 8012d04:	e09a      	b.n	8012e3c <_malloc_r+0x368>
 8012d06:	4203      	tst	r3, r0
 8012d08:	d000      	beq.n	8012d0c <_malloc_r+0x238>
 8012d0a:	e097      	b.n	8012e3c <_malloc_r+0x368>
 8012d0c:	9a02      	ldr	r2, [sp, #8]
 8012d0e:	4b42      	ldr	r3, [pc, #264]	; (8012e18 <_malloc_r+0x344>)
 8012d10:	1992      	adds	r2, r2, r6
 8012d12:	2601      	movs	r6, #1
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	4316      	orrs	r6, r2
 8012d18:	605e      	str	r6, [r3, #4]
 8012d1a:	4b45      	ldr	r3, [pc, #276]	; (8012e30 <_malloc_r+0x35c>)
 8012d1c:	4a45      	ldr	r2, [pc, #276]	; (8012e34 <_malloc_r+0x360>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	6811      	ldr	r1, [r2, #0]
 8012d22:	428b      	cmp	r3, r1
 8012d24:	d900      	bls.n	8012d28 <_malloc_r+0x254>
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	4a43      	ldr	r2, [pc, #268]	; (8012e38 <_malloc_r+0x364>)
 8012d2a:	6811      	ldr	r1, [r2, #0]
 8012d2c:	428b      	cmp	r3, r1
 8012d2e:	d800      	bhi.n	8012d32 <_malloc_r+0x25e>
 8012d30:	e0ae      	b.n	8012e90 <_malloc_r+0x3bc>
 8012d32:	6013      	str	r3, [r2, #0]
 8012d34:	e0ac      	b.n	8012e90 <_malloc_r+0x3bc>
 8012d36:	0a40      	lsrs	r0, r0, #9
 8012d38:	2804      	cmp	r0, #4
 8012d3a:	d810      	bhi.n	8012d5e <_malloc_r+0x28a>
 8012d3c:	0999      	lsrs	r1, r3, #6
 8012d3e:	3138      	adds	r1, #56	; 0x38
 8012d40:	00ce      	lsls	r6, r1, #3
 8012d42:	18b6      	adds	r6, r6, r2
 8012d44:	68b0      	ldr	r0, [r6, #8]
 8012d46:	4286      	cmp	r6, r0
 8012d48:	d124      	bne.n	8012d94 <_malloc_r+0x2c0>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	1089      	asrs	r1, r1, #2
 8012d4e:	408b      	lsls	r3, r1
 8012d50:	433b      	orrs	r3, r7
 8012d52:	6053      	str	r3, [r2, #4]
 8012d54:	60e6      	str	r6, [r4, #12]
 8012d56:	60a0      	str	r0, [r4, #8]
 8012d58:	60b4      	str	r4, [r6, #8]
 8012d5a:	60c4      	str	r4, [r0, #12]
 8012d5c:	e768      	b.n	8012c30 <_malloc_r+0x15c>
 8012d5e:	2814      	cmp	r0, #20
 8012d60:	d802      	bhi.n	8012d68 <_malloc_r+0x294>
 8012d62:	0001      	movs	r1, r0
 8012d64:	315b      	adds	r1, #91	; 0x5b
 8012d66:	e7eb      	b.n	8012d40 <_malloc_r+0x26c>
 8012d68:	2854      	cmp	r0, #84	; 0x54
 8012d6a:	d802      	bhi.n	8012d72 <_malloc_r+0x29e>
 8012d6c:	0b19      	lsrs	r1, r3, #12
 8012d6e:	316e      	adds	r1, #110	; 0x6e
 8012d70:	e7e6      	b.n	8012d40 <_malloc_r+0x26c>
 8012d72:	21aa      	movs	r1, #170	; 0xaa
 8012d74:	0049      	lsls	r1, r1, #1
 8012d76:	4288      	cmp	r0, r1
 8012d78:	d802      	bhi.n	8012d80 <_malloc_r+0x2ac>
 8012d7a:	0bd9      	lsrs	r1, r3, #15
 8012d7c:	3177      	adds	r1, #119	; 0x77
 8012d7e:	e7df      	b.n	8012d40 <_malloc_r+0x26c>
 8012d80:	4e27      	ldr	r6, [pc, #156]	; (8012e20 <_malloc_r+0x34c>)
 8012d82:	217e      	movs	r1, #126	; 0x7e
 8012d84:	42b0      	cmp	r0, r6
 8012d86:	d8db      	bhi.n	8012d40 <_malloc_r+0x26c>
 8012d88:	0c99      	lsrs	r1, r3, #18
 8012d8a:	317c      	adds	r1, #124	; 0x7c
 8012d8c:	e7d8      	b.n	8012d40 <_malloc_r+0x26c>
 8012d8e:	6880      	ldr	r0, [r0, #8]
 8012d90:	4286      	cmp	r6, r0
 8012d92:	d004      	beq.n	8012d9e <_malloc_r+0x2ca>
 8012d94:	2103      	movs	r1, #3
 8012d96:	6842      	ldr	r2, [r0, #4]
 8012d98:	438a      	bics	r2, r1
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d8f7      	bhi.n	8012d8e <_malloc_r+0x2ba>
 8012d9e:	68c6      	ldr	r6, [r0, #12]
 8012da0:	e7d8      	b.n	8012d54 <_malloc_r+0x280>
 8012da2:	2304      	movs	r3, #4
 8012da4:	449c      	add	ip, r3
 8012da6:	e753      	b.n	8012c50 <_malloc_r+0x17c>
 8012da8:	2003      	movs	r0, #3
 8012daa:	6863      	ldr	r3, [r4, #4]
 8012dac:	4383      	bics	r3, r0
 8012dae:	1b5e      	subs	r6, r3, r5
 8012db0:	68e0      	ldr	r0, [r4, #12]
 8012db2:	2e0f      	cmp	r6, #15
 8012db4:	dd0e      	ble.n	8012dd4 <_malloc_r+0x300>
 8012db6:	2701      	movs	r7, #1
 8012db8:	1962      	adds	r2, r4, r5
 8012dba:	433d      	orrs	r5, r7
 8012dbc:	6065      	str	r5, [r4, #4]
 8012dbe:	68a5      	ldr	r5, [r4, #8]
 8012dc0:	4337      	orrs	r7, r6
 8012dc2:	60e8      	str	r0, [r5, #12]
 8012dc4:	6085      	str	r5, [r0, #8]
 8012dc6:	614a      	str	r2, [r1, #20]
 8012dc8:	610a      	str	r2, [r1, #16]
 8012dca:	4914      	ldr	r1, [pc, #80]	; (8012e1c <_malloc_r+0x348>)
 8012dcc:	6057      	str	r7, [r2, #4]
 8012dce:	60d1      	str	r1, [r2, #12]
 8012dd0:	6091      	str	r1, [r2, #8]
 8012dd2:	e6e8      	b.n	8012ba6 <_malloc_r+0xd2>
 8012dd4:	2e00      	cmp	r6, #0
 8012dd6:	db08      	blt.n	8012dea <_malloc_r+0x316>
 8012dd8:	2201      	movs	r2, #1
 8012dda:	18e3      	adds	r3, r4, r3
 8012ddc:	6859      	ldr	r1, [r3, #4]
 8012dde:	430a      	orrs	r2, r1
 8012de0:	605a      	str	r2, [r3, #4]
 8012de2:	68a3      	ldr	r3, [r4, #8]
 8012de4:	60d8      	str	r0, [r3, #12]
 8012de6:	6083      	str	r3, [r0, #8]
 8012de8:	e6aa      	b.n	8012b40 <_malloc_r+0x6c>
 8012dea:	0004      	movs	r4, r0
 8012dec:	e73c      	b.n	8012c68 <_malloc_r+0x194>
 8012dee:	2301      	movs	r3, #1
 8012df0:	425b      	negs	r3, r3
 8012df2:	449c      	add	ip, r3
 8012df4:	9b03      	ldr	r3, [sp, #12]
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	3b08      	subs	r3, #8
 8012dfa:	9003      	str	r0, [sp, #12]
 8012dfc:	4298      	cmp	r0, r3
 8012dfe:	d100      	bne.n	8012e02 <_malloc_r+0x32e>
 8012e00:	e73c      	b.n	8012c7c <_malloc_r+0x1a8>
 8012e02:	e743      	b.n	8012c8c <_malloc_r+0x1b8>
 8012e04:	2004      	movs	r0, #4
 8012e06:	0052      	lsls	r2, r2, #1
 8012e08:	4484      	add	ip, r0
 8012e0a:	421a      	tst	r2, r3
 8012e0c:	d0fa      	beq.n	8012e04 <_malloc_r+0x330>
 8012e0e:	e723      	b.n	8012c58 <_malloc_r+0x184>
 8012e10:	9802      	ldr	r0, [sp, #8]
 8012e12:	4684      	mov	ip, r0
 8012e14:	e7f9      	b.n	8012e0a <_malloc_r+0x336>
 8012e16:	46c0      	nop			; (mov r8, r8)
 8012e18:	20000674 	.word	0x20000674
 8012e1c:	2000067c 	.word	0x2000067c
 8012e20:	00000554 	.word	0x00000554
 8012e24:	000001ff 	.word	0x000001ff
 8012e28:	20006d28 	.word	0x20006d28
 8012e2c:	20000a7c 	.word	0x20000a7c
 8012e30:	20006cf8 	.word	0x20006cf8
 8012e34:	20006d20 	.word	0x20006d20
 8012e38:	20006d24 	.word	0x20006d24
 8012e3c:	492e      	ldr	r1, [pc, #184]	; (8012ef8 <_malloc_r+0x424>)
 8012e3e:	680a      	ldr	r2, [r1, #0]
 8012e40:	3201      	adds	r2, #1
 8012e42:	d133      	bne.n	8012eac <_malloc_r+0x3d8>
 8012e44:	600c      	str	r4, [r1, #0]
 8012e46:	2307      	movs	r3, #7
 8012e48:	4023      	ands	r3, r4
 8012e4a:	d002      	beq.n	8012e52 <_malloc_r+0x37e>
 8012e4c:	2208      	movs	r2, #8
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	18e4      	adds	r4, r4, r3
 8012e52:	9a03      	ldr	r2, [sp, #12]
 8012e54:	19a6      	adds	r6, r4, r6
 8012e56:	18d3      	adds	r3, r2, r3
 8012e58:	4006      	ands	r6, r0
 8012e5a:	1b9e      	subs	r6, r3, r6
 8012e5c:	0031      	movs	r1, r6
 8012e5e:	9801      	ldr	r0, [sp, #4]
 8012e60:	f000 fa62 	bl	8013328 <_sbrk_r>
 8012e64:	1c43      	adds	r3, r0, #1
 8012e66:	d101      	bne.n	8012e6c <_malloc_r+0x398>
 8012e68:	0020      	movs	r0, r4
 8012e6a:	2600      	movs	r6, #0
 8012e6c:	4a23      	ldr	r2, [pc, #140]	; (8012efc <_malloc_r+0x428>)
 8012e6e:	1b00      	subs	r0, r0, r4
 8012e70:	6813      	ldr	r3, [r2, #0]
 8012e72:	199b      	adds	r3, r3, r6
 8012e74:	6013      	str	r3, [r2, #0]
 8012e76:	2301      	movs	r3, #1
 8012e78:	4a21      	ldr	r2, [pc, #132]	; (8012f00 <_malloc_r+0x42c>)
 8012e7a:	1986      	adds	r6, r0, r6
 8012e7c:	431e      	orrs	r6, r3
 8012e7e:	6094      	str	r4, [r2, #8]
 8012e80:	6066      	str	r6, [r4, #4]
 8012e82:	4297      	cmp	r7, r2
 8012e84:	d100      	bne.n	8012e88 <_malloc_r+0x3b4>
 8012e86:	e748      	b.n	8012d1a <_malloc_r+0x246>
 8012e88:	9a02      	ldr	r2, [sp, #8]
 8012e8a:	2a0f      	cmp	r2, #15
 8012e8c:	d813      	bhi.n	8012eb6 <_malloc_r+0x3e2>
 8012e8e:	6063      	str	r3, [r4, #4]
 8012e90:	2203      	movs	r2, #3
 8012e92:	4b1b      	ldr	r3, [pc, #108]	; (8012f00 <_malloc_r+0x42c>)
 8012e94:	689b      	ldr	r3, [r3, #8]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	4393      	bics	r3, r2
 8012e9a:	1b5a      	subs	r2, r3, r5
 8012e9c:	42ab      	cmp	r3, r5
 8012e9e:	d301      	bcc.n	8012ea4 <_malloc_r+0x3d0>
 8012ea0:	2a0f      	cmp	r2, #15
 8012ea2:	dc1d      	bgt.n	8012ee0 <_malloc_r+0x40c>
 8012ea4:	9801      	ldr	r0, [sp, #4]
 8012ea6:	f000 f867 	bl	8012f78 <__malloc_unlock>
 8012eaa:	e620      	b.n	8012aee <_malloc_r+0x1a>
 8012eac:	1ae3      	subs	r3, r4, r3
 8012eae:	4a13      	ldr	r2, [pc, #76]	; (8012efc <_malloc_r+0x428>)
 8012eb0:	4463      	add	r3, ip
 8012eb2:	6013      	str	r3, [r2, #0]
 8012eb4:	e7c7      	b.n	8012e46 <_malloc_r+0x372>
 8012eb6:	2207      	movs	r2, #7
 8012eb8:	9e02      	ldr	r6, [sp, #8]
 8012eba:	3e0c      	subs	r6, #12
 8012ebc:	4396      	bics	r6, r2
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	2205      	movs	r2, #5
 8012ec4:	4333      	orrs	r3, r6
 8012ec6:	607b      	str	r3, [r7, #4]
 8012ec8:	19bb      	adds	r3, r7, r6
 8012eca:	605a      	str	r2, [r3, #4]
 8012ecc:	609a      	str	r2, [r3, #8]
 8012ece:	2e0f      	cmp	r6, #15
 8012ed0:	d800      	bhi.n	8012ed4 <_malloc_r+0x400>
 8012ed2:	e722      	b.n	8012d1a <_malloc_r+0x246>
 8012ed4:	0039      	movs	r1, r7
 8012ed6:	9801      	ldr	r0, [sp, #4]
 8012ed8:	3108      	adds	r1, #8
 8012eda:	f003 fb07 	bl	80164ec <_free_r>
 8012ede:	e71c      	b.n	8012d1a <_malloc_r+0x246>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	0018      	movs	r0, r3
 8012ee4:	4906      	ldr	r1, [pc, #24]	; (8012f00 <_malloc_r+0x42c>)
 8012ee6:	4328      	orrs	r0, r5
 8012ee8:	688c      	ldr	r4, [r1, #8]
 8012eea:	4313      	orrs	r3, r2
 8012eec:	1965      	adds	r5, r4, r5
 8012eee:	6060      	str	r0, [r4, #4]
 8012ef0:	608d      	str	r5, [r1, #8]
 8012ef2:	606b      	str	r3, [r5, #4]
 8012ef4:	e624      	b.n	8012b40 <_malloc_r+0x6c>
 8012ef6:	46c0      	nop			; (mov r8, r8)
 8012ef8:	20000a7c 	.word	0x20000a7c
 8012efc:	20006cf8 	.word	0x20006cf8
 8012f00:	20000674 	.word	0x20000674

08012f04 <__ascii_mbtowc>:
 8012f04:	b082      	sub	sp, #8
 8012f06:	2900      	cmp	r1, #0
 8012f08:	d100      	bne.n	8012f0c <__ascii_mbtowc+0x8>
 8012f0a:	a901      	add	r1, sp, #4
 8012f0c:	1e10      	subs	r0, r2, #0
 8012f0e:	d006      	beq.n	8012f1e <__ascii_mbtowc+0x1a>
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d006      	beq.n	8012f22 <__ascii_mbtowc+0x1e>
 8012f14:	7813      	ldrb	r3, [r2, #0]
 8012f16:	600b      	str	r3, [r1, #0]
 8012f18:	7810      	ldrb	r0, [r2, #0]
 8012f1a:	1e43      	subs	r3, r0, #1
 8012f1c:	4198      	sbcs	r0, r3
 8012f1e:	b002      	add	sp, #8
 8012f20:	4770      	bx	lr
 8012f22:	2002      	movs	r0, #2
 8012f24:	4240      	negs	r0, r0
 8012f26:	e7fa      	b.n	8012f1e <__ascii_mbtowc+0x1a>

08012f28 <memcmp>:
 8012f28:	b530      	push	{r4, r5, lr}
 8012f2a:	2400      	movs	r4, #0
 8012f2c:	42a2      	cmp	r2, r4
 8012f2e:	d101      	bne.n	8012f34 <memcmp+0xc>
 8012f30:	2000      	movs	r0, #0
 8012f32:	e005      	b.n	8012f40 <memcmp+0x18>
 8012f34:	5d03      	ldrb	r3, [r0, r4]
 8012f36:	1c65      	adds	r5, r4, #1
 8012f38:	5d0c      	ldrb	r4, [r1, r4]
 8012f3a:	42a3      	cmp	r3, r4
 8012f3c:	d001      	beq.n	8012f42 <memcmp+0x1a>
 8012f3e:	1b18      	subs	r0, r3, r4
 8012f40:	bd30      	pop	{r4, r5, pc}
 8012f42:	002c      	movs	r4, r5
 8012f44:	e7f2      	b.n	8012f2c <memcmp+0x4>

08012f46 <memcpy>:
 8012f46:	2300      	movs	r3, #0
 8012f48:	b510      	push	{r4, lr}
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d100      	bne.n	8012f50 <memcpy+0xa>
 8012f4e:	bd10      	pop	{r4, pc}
 8012f50:	5ccc      	ldrb	r4, [r1, r3]
 8012f52:	54c4      	strb	r4, [r0, r3]
 8012f54:	3301      	adds	r3, #1
 8012f56:	e7f8      	b.n	8012f4a <memcpy+0x4>

08012f58 <memset>:
 8012f58:	0003      	movs	r3, r0
 8012f5a:	1812      	adds	r2, r2, r0
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d100      	bne.n	8012f62 <memset+0xa>
 8012f60:	4770      	bx	lr
 8012f62:	7019      	strb	r1, [r3, #0]
 8012f64:	3301      	adds	r3, #1
 8012f66:	e7f9      	b.n	8012f5c <memset+0x4>

08012f68 <__malloc_lock>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	4802      	ldr	r0, [pc, #8]	; (8012f74 <__malloc_lock+0xc>)
 8012f6c:	f003 feb2 	bl	8016cd4 <__retarget_lock_acquire_recursive>
 8012f70:	bd10      	pop	{r4, pc}
 8012f72:	46c0      	nop			; (mov r8, r8)
 8012f74:	200072d4 	.word	0x200072d4

08012f78 <__malloc_unlock>:
 8012f78:	b510      	push	{r4, lr}
 8012f7a:	4802      	ldr	r0, [pc, #8]	; (8012f84 <__malloc_unlock+0xc>)
 8012f7c:	f003 feab 	bl	8016cd6 <__retarget_lock_release_recursive>
 8012f80:	bd10      	pop	{r4, pc}
 8012f82:	46c0      	nop			; (mov r8, r8)
 8012f84:	200072d4 	.word	0x200072d4

08012f88 <rand>:
 8012f88:	4b09      	ldr	r3, [pc, #36]	; (8012fb0 <rand+0x28>)
 8012f8a:	b510      	push	{r4, lr}
 8012f8c:	681c      	ldr	r4, [r3, #0]
 8012f8e:	4a09      	ldr	r2, [pc, #36]	; (8012fb4 <rand+0x2c>)
 8012f90:	34a8      	adds	r4, #168	; 0xa8
 8012f92:	6820      	ldr	r0, [r4, #0]
 8012f94:	6861      	ldr	r1, [r4, #4]
 8012f96:	4b08      	ldr	r3, [pc, #32]	; (8012fb8 <rand+0x30>)
 8012f98:	f7ed fae8 	bl	800056c <__aeabi_lmul>
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	1880      	adds	r0, r0, r2
 8012fa2:	4159      	adcs	r1, r3
 8012fa4:	6020      	str	r0, [r4, #0]
 8012fa6:	6061      	str	r1, [r4, #4]
 8012fa8:	0048      	lsls	r0, r1, #1
 8012faa:	0840      	lsrs	r0, r0, #1
 8012fac:	bd10      	pop	{r4, pc}
 8012fae:	46c0      	nop			; (mov r8, r8)
 8012fb0:	200000d8 	.word	0x200000d8
 8012fb4:	4c957f2d 	.word	0x4c957f2d
 8012fb8:	5851f42d 	.word	0x5851f42d

08012fbc <realloc>:
 8012fbc:	b510      	push	{r4, lr}
 8012fbe:	4b03      	ldr	r3, [pc, #12]	; (8012fcc <realloc+0x10>)
 8012fc0:	000a      	movs	r2, r1
 8012fc2:	0001      	movs	r1, r0
 8012fc4:	6818      	ldr	r0, [r3, #0]
 8012fc6:	f000 f803 	bl	8012fd0 <_realloc_r>
 8012fca:	bd10      	pop	{r4, pc}
 8012fcc:	200000d8 	.word	0x200000d8

08012fd0 <_realloc_r>:
 8012fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fd2:	b087      	sub	sp, #28
 8012fd4:	9003      	str	r0, [sp, #12]
 8012fd6:	1e0c      	subs	r4, r1, #0
 8012fd8:	9205      	str	r2, [sp, #20]
 8012fda:	d106      	bne.n	8012fea <_realloc_r+0x1a>
 8012fdc:	0011      	movs	r1, r2
 8012fde:	f7ff fd79 	bl	8012ad4 <_malloc_r>
 8012fe2:	0007      	movs	r7, r0
 8012fe4:	0038      	movs	r0, r7
 8012fe6:	b007      	add	sp, #28
 8012fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fea:	9803      	ldr	r0, [sp, #12]
 8012fec:	f7ff ffbc 	bl	8012f68 <__malloc_lock>
 8012ff0:	0023      	movs	r3, r4
 8012ff2:	3b08      	subs	r3, #8
 8012ff4:	685f      	ldr	r7, [r3, #4]
 8012ff6:	9302      	str	r3, [sp, #8]
 8012ff8:	003a      	movs	r2, r7
 8012ffa:	2303      	movs	r3, #3
 8012ffc:	9e05      	ldr	r6, [sp, #20]
 8012ffe:	439a      	bics	r2, r3
 8013000:	360b      	adds	r6, #11
 8013002:	9204      	str	r2, [sp, #16]
 8013004:	2e16      	cmp	r6, #22
 8013006:	d908      	bls.n	801301a <_realloc_r+0x4a>
 8013008:	3304      	adds	r3, #4
 801300a:	439e      	bics	r6, r3
 801300c:	9601      	str	r6, [sp, #4]
 801300e:	d506      	bpl.n	801301e <_realloc_r+0x4e>
 8013010:	230c      	movs	r3, #12
 8013012:	9a03      	ldr	r2, [sp, #12]
 8013014:	2700      	movs	r7, #0
 8013016:	6013      	str	r3, [r2, #0]
 8013018:	e7e4      	b.n	8012fe4 <_realloc_r+0x14>
 801301a:	2310      	movs	r3, #16
 801301c:	9301      	str	r3, [sp, #4]
 801301e:	9b01      	ldr	r3, [sp, #4]
 8013020:	9a05      	ldr	r2, [sp, #20]
 8013022:	4293      	cmp	r3, r2
 8013024:	d3f4      	bcc.n	8013010 <_realloc_r+0x40>
 8013026:	9b01      	ldr	r3, [sp, #4]
 8013028:	9a04      	ldr	r2, [sp, #16]
 801302a:	4293      	cmp	r3, r2
 801302c:	dc00      	bgt.n	8013030 <_realloc_r+0x60>
 801302e:	e16f      	b.n	8013310 <_realloc_r+0x340>
 8013030:	9b02      	ldr	r3, [sp, #8]
 8013032:	48bc      	ldr	r0, [pc, #752]	; (8013324 <_realloc_r+0x354>)
 8013034:	189b      	adds	r3, r3, r2
 8013036:	6882      	ldr	r2, [r0, #8]
 8013038:	4694      	mov	ip, r2
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	459c      	cmp	ip, r3
 801303e:	d006      	beq.n	801304e <_realloc_r+0x7e>
 8013040:	2501      	movs	r5, #1
 8013042:	0011      	movs	r1, r2
 8013044:	43a9      	bics	r1, r5
 8013046:	1859      	adds	r1, r3, r1
 8013048:	6849      	ldr	r1, [r1, #4]
 801304a:	4229      	tst	r1, r5
 801304c:	d146      	bne.n	80130dc <_realloc_r+0x10c>
 801304e:	2103      	movs	r1, #3
 8013050:	438a      	bics	r2, r1
 8013052:	9904      	ldr	r1, [sp, #16]
 8013054:	188e      	adds	r6, r1, r2
 8013056:	9901      	ldr	r1, [sp, #4]
 8013058:	459c      	cmp	ip, r3
 801305a:	d117      	bne.n	801308c <_realloc_r+0xbc>
 801305c:	3110      	adds	r1, #16
 801305e:	42b1      	cmp	r1, r6
 8013060:	dc3e      	bgt.n	80130e0 <_realloc_r+0x110>
 8013062:	9901      	ldr	r1, [sp, #4]
 8013064:	9b02      	ldr	r3, [sp, #8]
 8013066:	468c      	mov	ip, r1
 8013068:	4463      	add	r3, ip
 801306a:	6083      	str	r3, [r0, #8]
 801306c:	001a      	movs	r2, r3
 801306e:	1a73      	subs	r3, r6, r1
 8013070:	2601      	movs	r6, #1
 8013072:	4333      	orrs	r3, r6
 8013074:	6053      	str	r3, [r2, #4]
 8013076:	0023      	movs	r3, r4
 8013078:	3b08      	subs	r3, #8
 801307a:	685a      	ldr	r2, [r3, #4]
 801307c:	9803      	ldr	r0, [sp, #12]
 801307e:	4016      	ands	r6, r2
 8013080:	430e      	orrs	r6, r1
 8013082:	605e      	str	r6, [r3, #4]
 8013084:	f7ff ff78 	bl	8012f78 <__malloc_unlock>
 8013088:	0027      	movs	r7, r4
 801308a:	e7ab      	b.n	8012fe4 <_realloc_r+0x14>
 801308c:	42b1      	cmp	r1, r6
 801308e:	dc27      	bgt.n	80130e0 <_realloc_r+0x110>
 8013090:	68da      	ldr	r2, [r3, #12]
 8013092:	689b      	ldr	r3, [r3, #8]
 8013094:	60da      	str	r2, [r3, #12]
 8013096:	6093      	str	r3, [r2, #8]
 8013098:	9b01      	ldr	r3, [sp, #4]
 801309a:	9a02      	ldr	r2, [sp, #8]
 801309c:	1af4      	subs	r4, r6, r3
 801309e:	9b02      	ldr	r3, [sp, #8]
 80130a0:	1992      	adds	r2, r2, r6
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	2301      	movs	r3, #1
 80130a8:	9804      	ldr	r0, [sp, #16]
 80130aa:	4018      	ands	r0, r3
 80130ac:	2c0f      	cmp	r4, #15
 80130ae:	d800      	bhi.n	80130b2 <_realloc_r+0xe2>
 80130b0:	e130      	b.n	8013314 <_realloc_r+0x344>
 80130b2:	9d01      	ldr	r5, [sp, #4]
 80130b4:	9902      	ldr	r1, [sp, #8]
 80130b6:	4328      	orrs	r0, r5
 80130b8:	1949      	adds	r1, r1, r5
 80130ba:	9d02      	ldr	r5, [sp, #8]
 80130bc:	431c      	orrs	r4, r3
 80130be:	6068      	str	r0, [r5, #4]
 80130c0:	604c      	str	r4, [r1, #4]
 80130c2:	6850      	ldr	r0, [r2, #4]
 80130c4:	3108      	adds	r1, #8
 80130c6:	4303      	orrs	r3, r0
 80130c8:	6053      	str	r3, [r2, #4]
 80130ca:	9803      	ldr	r0, [sp, #12]
 80130cc:	f003 fa0e 	bl	80164ec <_free_r>
 80130d0:	9803      	ldr	r0, [sp, #12]
 80130d2:	f7ff ff51 	bl	8012f78 <__malloc_unlock>
 80130d6:	9f02      	ldr	r7, [sp, #8]
 80130d8:	3708      	adds	r7, #8
 80130da:	e783      	b.n	8012fe4 <_realloc_r+0x14>
 80130dc:	2200      	movs	r2, #0
 80130de:	0013      	movs	r3, r2
 80130e0:	07f9      	lsls	r1, r7, #31
 80130e2:	d500      	bpl.n	80130e6 <_realloc_r+0x116>
 80130e4:	e0c6      	b.n	8013274 <_realloc_r+0x2a4>
 80130e6:	0021      	movs	r1, r4
 80130e8:	3908      	subs	r1, #8
 80130ea:	680d      	ldr	r5, [r1, #0]
 80130ec:	9902      	ldr	r1, [sp, #8]
 80130ee:	1b4d      	subs	r5, r1, r5
 80130f0:	2103      	movs	r1, #3
 80130f2:	686f      	ldr	r7, [r5, #4]
 80130f4:	438f      	bics	r7, r1
 80130f6:	9904      	ldr	r1, [sp, #16]
 80130f8:	187f      	adds	r7, r7, r1
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d100      	bne.n	8013100 <_realloc_r+0x130>
 80130fe:	e084      	b.n	801320a <_realloc_r+0x23a>
 8013100:	19d6      	adds	r6, r2, r7
 8013102:	459c      	cmp	ip, r3
 8013104:	d148      	bne.n	8013198 <_realloc_r+0x1c8>
 8013106:	9b01      	ldr	r3, [sp, #4]
 8013108:	3310      	adds	r3, #16
 801310a:	42b3      	cmp	r3, r6
 801310c:	dc7d      	bgt.n	801320a <_realloc_r+0x23a>
 801310e:	68aa      	ldr	r2, [r5, #8]
 8013110:	68eb      	ldr	r3, [r5, #12]
 8013112:	002f      	movs	r7, r5
 8013114:	60d3      	str	r3, [r2, #12]
 8013116:	609a      	str	r2, [r3, #8]
 8013118:	000a      	movs	r2, r1
 801311a:	3a04      	subs	r2, #4
 801311c:	3708      	adds	r7, #8
 801311e:	2a24      	cmp	r2, #36	; 0x24
 8013120:	d835      	bhi.n	801318e <_realloc_r+0x1be>
 8013122:	003b      	movs	r3, r7
 8013124:	2a13      	cmp	r2, #19
 8013126:	d908      	bls.n	801313a <_realloc_r+0x16a>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	60ab      	str	r3, [r5, #8]
 801312c:	6863      	ldr	r3, [r4, #4]
 801312e:	60eb      	str	r3, [r5, #12]
 8013130:	2a1b      	cmp	r2, #27
 8013132:	d81a      	bhi.n	801316a <_realloc_r+0x19a>
 8013134:	002b      	movs	r3, r5
 8013136:	3408      	adds	r4, #8
 8013138:	3310      	adds	r3, #16
 801313a:	6822      	ldr	r2, [r4, #0]
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	6862      	ldr	r2, [r4, #4]
 8013140:	605a      	str	r2, [r3, #4]
 8013142:	68a2      	ldr	r2, [r4, #8]
 8013144:	609a      	str	r2, [r3, #8]
 8013146:	9b01      	ldr	r3, [sp, #4]
 8013148:	18ea      	adds	r2, r5, r3
 801314a:	4b76      	ldr	r3, [pc, #472]	; (8013324 <_realloc_r+0x354>)
 801314c:	609a      	str	r2, [r3, #8]
 801314e:	9b01      	ldr	r3, [sp, #4]
 8013150:	1af3      	subs	r3, r6, r3
 8013152:	2601      	movs	r6, #1
 8013154:	4333      	orrs	r3, r6
 8013156:	6053      	str	r3, [r2, #4]
 8013158:	686b      	ldr	r3, [r5, #4]
 801315a:	401e      	ands	r6, r3
 801315c:	9b01      	ldr	r3, [sp, #4]
 801315e:	431e      	orrs	r6, r3
 8013160:	606e      	str	r6, [r5, #4]
 8013162:	9803      	ldr	r0, [sp, #12]
 8013164:	f7ff ff08 	bl	8012f78 <__malloc_unlock>
 8013168:	e73c      	b.n	8012fe4 <_realloc_r+0x14>
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	612b      	str	r3, [r5, #16]
 801316e:	68e3      	ldr	r3, [r4, #12]
 8013170:	616b      	str	r3, [r5, #20]
 8013172:	2a24      	cmp	r2, #36	; 0x24
 8013174:	d003      	beq.n	801317e <_realloc_r+0x1ae>
 8013176:	002b      	movs	r3, r5
 8013178:	3410      	adds	r4, #16
 801317a:	3318      	adds	r3, #24
 801317c:	e7dd      	b.n	801313a <_realloc_r+0x16a>
 801317e:	6923      	ldr	r3, [r4, #16]
 8013180:	61ab      	str	r3, [r5, #24]
 8013182:	002b      	movs	r3, r5
 8013184:	6962      	ldr	r2, [r4, #20]
 8013186:	3320      	adds	r3, #32
 8013188:	61ea      	str	r2, [r5, #28]
 801318a:	3418      	adds	r4, #24
 801318c:	e7d5      	b.n	801313a <_realloc_r+0x16a>
 801318e:	0021      	movs	r1, r4
 8013190:	0038      	movs	r0, r7
 8013192:	f003 fdac 	bl	8016cee <memmove>
 8013196:	e7d6      	b.n	8013146 <_realloc_r+0x176>
 8013198:	9a01      	ldr	r2, [sp, #4]
 801319a:	42b2      	cmp	r2, r6
 801319c:	dc35      	bgt.n	801320a <_realloc_r+0x23a>
 801319e:	0028      	movs	r0, r5
 80131a0:	68da      	ldr	r2, [r3, #12]
 80131a2:	689b      	ldr	r3, [r3, #8]
 80131a4:	3008      	adds	r0, #8
 80131a6:	60da      	str	r2, [r3, #12]
 80131a8:	6093      	str	r3, [r2, #8]
 80131aa:	68aa      	ldr	r2, [r5, #8]
 80131ac:	68eb      	ldr	r3, [r5, #12]
 80131ae:	60d3      	str	r3, [r2, #12]
 80131b0:	609a      	str	r2, [r3, #8]
 80131b2:	9a04      	ldr	r2, [sp, #16]
 80131b4:	3a04      	subs	r2, #4
 80131b6:	2a24      	cmp	r2, #36	; 0x24
 80131b8:	d823      	bhi.n	8013202 <_realloc_r+0x232>
 80131ba:	2a13      	cmp	r2, #19
 80131bc:	d907      	bls.n	80131ce <_realloc_r+0x1fe>
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	60ab      	str	r3, [r5, #8]
 80131c2:	6863      	ldr	r3, [r4, #4]
 80131c4:	60eb      	str	r3, [r5, #12]
 80131c6:	2a1b      	cmp	r2, #27
 80131c8:	d809      	bhi.n	80131de <_realloc_r+0x20e>
 80131ca:	3408      	adds	r4, #8
 80131cc:	3008      	adds	r0, #8
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	6003      	str	r3, [r0, #0]
 80131d2:	6863      	ldr	r3, [r4, #4]
 80131d4:	6043      	str	r3, [r0, #4]
 80131d6:	68a3      	ldr	r3, [r4, #8]
 80131d8:	6083      	str	r3, [r0, #8]
 80131da:	9502      	str	r5, [sp, #8]
 80131dc:	e75c      	b.n	8013098 <_realloc_r+0xc8>
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	612b      	str	r3, [r5, #16]
 80131e2:	68e3      	ldr	r3, [r4, #12]
 80131e4:	616b      	str	r3, [r5, #20]
 80131e6:	2a24      	cmp	r2, #36	; 0x24
 80131e8:	d003      	beq.n	80131f2 <_realloc_r+0x222>
 80131ea:	0028      	movs	r0, r5
 80131ec:	3410      	adds	r4, #16
 80131ee:	3018      	adds	r0, #24
 80131f0:	e7ed      	b.n	80131ce <_realloc_r+0x1fe>
 80131f2:	0028      	movs	r0, r5
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	3020      	adds	r0, #32
 80131f8:	61ab      	str	r3, [r5, #24]
 80131fa:	6963      	ldr	r3, [r4, #20]
 80131fc:	3418      	adds	r4, #24
 80131fe:	61eb      	str	r3, [r5, #28]
 8013200:	e7e5      	b.n	80131ce <_realloc_r+0x1fe>
 8013202:	0021      	movs	r1, r4
 8013204:	f003 fd73 	bl	8016cee <memmove>
 8013208:	e7e7      	b.n	80131da <_realloc_r+0x20a>
 801320a:	9b01      	ldr	r3, [sp, #4]
 801320c:	42bb      	cmp	r3, r7
 801320e:	dc31      	bgt.n	8013274 <_realloc_r+0x2a4>
 8013210:	0028      	movs	r0, r5
 8013212:	68aa      	ldr	r2, [r5, #8]
 8013214:	68eb      	ldr	r3, [r5, #12]
 8013216:	3008      	adds	r0, #8
 8013218:	60d3      	str	r3, [r2, #12]
 801321a:	609a      	str	r2, [r3, #8]
 801321c:	9a04      	ldr	r2, [sp, #16]
 801321e:	3a04      	subs	r2, #4
 8013220:	2a24      	cmp	r2, #36	; 0x24
 8013222:	d823      	bhi.n	801326c <_realloc_r+0x29c>
 8013224:	2a13      	cmp	r2, #19
 8013226:	d907      	bls.n	8013238 <_realloc_r+0x268>
 8013228:	6823      	ldr	r3, [r4, #0]
 801322a:	60ab      	str	r3, [r5, #8]
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	60eb      	str	r3, [r5, #12]
 8013230:	2a1b      	cmp	r2, #27
 8013232:	d809      	bhi.n	8013248 <_realloc_r+0x278>
 8013234:	3408      	adds	r4, #8
 8013236:	3008      	adds	r0, #8
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	6003      	str	r3, [r0, #0]
 801323c:	6863      	ldr	r3, [r4, #4]
 801323e:	6043      	str	r3, [r0, #4]
 8013240:	68a3      	ldr	r3, [r4, #8]
 8013242:	6083      	str	r3, [r0, #8]
 8013244:	003e      	movs	r6, r7
 8013246:	e7c8      	b.n	80131da <_realloc_r+0x20a>
 8013248:	68a3      	ldr	r3, [r4, #8]
 801324a:	612b      	str	r3, [r5, #16]
 801324c:	68e3      	ldr	r3, [r4, #12]
 801324e:	616b      	str	r3, [r5, #20]
 8013250:	2a24      	cmp	r2, #36	; 0x24
 8013252:	d003      	beq.n	801325c <_realloc_r+0x28c>
 8013254:	0028      	movs	r0, r5
 8013256:	3410      	adds	r4, #16
 8013258:	3018      	adds	r0, #24
 801325a:	e7ed      	b.n	8013238 <_realloc_r+0x268>
 801325c:	0028      	movs	r0, r5
 801325e:	6923      	ldr	r3, [r4, #16]
 8013260:	3020      	adds	r0, #32
 8013262:	61ab      	str	r3, [r5, #24]
 8013264:	6963      	ldr	r3, [r4, #20]
 8013266:	3418      	adds	r4, #24
 8013268:	61eb      	str	r3, [r5, #28]
 801326a:	e7e5      	b.n	8013238 <_realloc_r+0x268>
 801326c:	0021      	movs	r1, r4
 801326e:	f003 fd3e 	bl	8016cee <memmove>
 8013272:	e7e7      	b.n	8013244 <_realloc_r+0x274>
 8013274:	9905      	ldr	r1, [sp, #20]
 8013276:	9803      	ldr	r0, [sp, #12]
 8013278:	f7ff fc2c 	bl	8012ad4 <_malloc_r>
 801327c:	1e07      	subs	r7, r0, #0
 801327e:	d100      	bne.n	8013282 <_realloc_r+0x2b2>
 8013280:	e76f      	b.n	8013162 <_realloc_r+0x192>
 8013282:	0023      	movs	r3, r4
 8013284:	2201      	movs	r2, #1
 8013286:	3b08      	subs	r3, #8
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	4393      	bics	r3, r2
 801328c:	9a02      	ldr	r2, [sp, #8]
 801328e:	18d3      	adds	r3, r2, r3
 8013290:	0002      	movs	r2, r0
 8013292:	3a08      	subs	r2, #8
 8013294:	4293      	cmp	r3, r2
 8013296:	d105      	bne.n	80132a4 <_realloc_r+0x2d4>
 8013298:	685e      	ldr	r6, [r3, #4]
 801329a:	2303      	movs	r3, #3
 801329c:	439e      	bics	r6, r3
 801329e:	9b04      	ldr	r3, [sp, #16]
 80132a0:	18f6      	adds	r6, r6, r3
 80132a2:	e6f9      	b.n	8013098 <_realloc_r+0xc8>
 80132a4:	9a04      	ldr	r2, [sp, #16]
 80132a6:	3a04      	subs	r2, #4
 80132a8:	2a24      	cmp	r2, #36	; 0x24
 80132aa:	d82d      	bhi.n	8013308 <_realloc_r+0x338>
 80132ac:	2a13      	cmp	r2, #19
 80132ae:	d928      	bls.n	8013302 <_realloc_r+0x332>
 80132b0:	6823      	ldr	r3, [r4, #0]
 80132b2:	6003      	str	r3, [r0, #0]
 80132b4:	6863      	ldr	r3, [r4, #4]
 80132b6:	6043      	str	r3, [r0, #4]
 80132b8:	2a1b      	cmp	r2, #27
 80132ba:	d80e      	bhi.n	80132da <_realloc_r+0x30a>
 80132bc:	0022      	movs	r2, r4
 80132be:	0003      	movs	r3, r0
 80132c0:	3208      	adds	r2, #8
 80132c2:	3308      	adds	r3, #8
 80132c4:	6811      	ldr	r1, [r2, #0]
 80132c6:	6019      	str	r1, [r3, #0]
 80132c8:	6851      	ldr	r1, [r2, #4]
 80132ca:	6059      	str	r1, [r3, #4]
 80132cc:	6892      	ldr	r2, [r2, #8]
 80132ce:	609a      	str	r2, [r3, #8]
 80132d0:	0021      	movs	r1, r4
 80132d2:	9803      	ldr	r0, [sp, #12]
 80132d4:	f003 f90a 	bl	80164ec <_free_r>
 80132d8:	e743      	b.n	8013162 <_realloc_r+0x192>
 80132da:	68a3      	ldr	r3, [r4, #8]
 80132dc:	6083      	str	r3, [r0, #8]
 80132de:	68e3      	ldr	r3, [r4, #12]
 80132e0:	60c3      	str	r3, [r0, #12]
 80132e2:	2a24      	cmp	r2, #36	; 0x24
 80132e4:	d004      	beq.n	80132f0 <_realloc_r+0x320>
 80132e6:	0022      	movs	r2, r4
 80132e8:	0003      	movs	r3, r0
 80132ea:	3210      	adds	r2, #16
 80132ec:	3310      	adds	r3, #16
 80132ee:	e7e9      	b.n	80132c4 <_realloc_r+0x2f4>
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	0022      	movs	r2, r4
 80132f4:	6103      	str	r3, [r0, #16]
 80132f6:	0003      	movs	r3, r0
 80132f8:	6961      	ldr	r1, [r4, #20]
 80132fa:	3218      	adds	r2, #24
 80132fc:	3318      	adds	r3, #24
 80132fe:	6141      	str	r1, [r0, #20]
 8013300:	e7e0      	b.n	80132c4 <_realloc_r+0x2f4>
 8013302:	0003      	movs	r3, r0
 8013304:	0022      	movs	r2, r4
 8013306:	e7dd      	b.n	80132c4 <_realloc_r+0x2f4>
 8013308:	0021      	movs	r1, r4
 801330a:	f003 fcf0 	bl	8016cee <memmove>
 801330e:	e7df      	b.n	80132d0 <_realloc_r+0x300>
 8013310:	9e04      	ldr	r6, [sp, #16]
 8013312:	e6c1      	b.n	8013098 <_realloc_r+0xc8>
 8013314:	9902      	ldr	r1, [sp, #8]
 8013316:	4306      	orrs	r6, r0
 8013318:	604e      	str	r6, [r1, #4]
 801331a:	6851      	ldr	r1, [r2, #4]
 801331c:	430b      	orrs	r3, r1
 801331e:	6053      	str	r3, [r2, #4]
 8013320:	e6d6      	b.n	80130d0 <_realloc_r+0x100>
 8013322:	46c0      	nop			; (mov r8, r8)
 8013324:	20000674 	.word	0x20000674

08013328 <_sbrk_r>:
 8013328:	2300      	movs	r3, #0
 801332a:	b570      	push	{r4, r5, r6, lr}
 801332c:	4c06      	ldr	r4, [pc, #24]	; (8013348 <_sbrk_r+0x20>)
 801332e:	0005      	movs	r5, r0
 8013330:	0008      	movs	r0, r1
 8013332:	6023      	str	r3, [r4, #0]
 8013334:	f004 f9c0 	bl	80176b8 <_sbrk>
 8013338:	1c43      	adds	r3, r0, #1
 801333a:	d103      	bne.n	8013344 <_sbrk_r+0x1c>
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d000      	beq.n	8013344 <_sbrk_r+0x1c>
 8013342:	602b      	str	r3, [r5, #0]
 8013344:	bd70      	pop	{r4, r5, r6, pc}
 8013346:	46c0      	nop			; (mov r8, r8)
 8013348:	200072dc 	.word	0x200072dc

0801334c <sprintf>:
 801334c:	b40e      	push	{r1, r2, r3}
 801334e:	b500      	push	{lr}
 8013350:	490b      	ldr	r1, [pc, #44]	; (8013380 <sprintf+0x34>)
 8013352:	b09c      	sub	sp, #112	; 0x70
 8013354:	ab1d      	add	r3, sp, #116	; 0x74
 8013356:	9002      	str	r0, [sp, #8]
 8013358:	9006      	str	r0, [sp, #24]
 801335a:	9107      	str	r1, [sp, #28]
 801335c:	9104      	str	r1, [sp, #16]
 801335e:	4809      	ldr	r0, [pc, #36]	; (8013384 <sprintf+0x38>)
 8013360:	4909      	ldr	r1, [pc, #36]	; (8013388 <sprintf+0x3c>)
 8013362:	cb04      	ldmia	r3!, {r2}
 8013364:	9105      	str	r1, [sp, #20]
 8013366:	6800      	ldr	r0, [r0, #0]
 8013368:	a902      	add	r1, sp, #8
 801336a:	9301      	str	r3, [sp, #4]
 801336c:	f000 ff78 	bl	8014260 <_svfprintf_r>
 8013370:	2300      	movs	r3, #0
 8013372:	9a02      	ldr	r2, [sp, #8]
 8013374:	7013      	strb	r3, [r2, #0]
 8013376:	b01c      	add	sp, #112	; 0x70
 8013378:	bc08      	pop	{r3}
 801337a:	b003      	add	sp, #12
 801337c:	4718      	bx	r3
 801337e:	46c0      	nop			; (mov r8, r8)
 8013380:	7fffffff 	.word	0x7fffffff
 8013384:	200000d8 	.word	0x200000d8
 8013388:	ffff0208 	.word	0xffff0208

0801338c <strcat>:
 801338c:	0002      	movs	r2, r0
 801338e:	b510      	push	{r4, lr}
 8013390:	7813      	ldrb	r3, [r2, #0]
 8013392:	1c54      	adds	r4, r2, #1
 8013394:	2b00      	cmp	r3, #0
 8013396:	d105      	bne.n	80133a4 <strcat+0x18>
 8013398:	5ccc      	ldrb	r4, [r1, r3]
 801339a:	54d4      	strb	r4, [r2, r3]
 801339c:	3301      	adds	r3, #1
 801339e:	2c00      	cmp	r4, #0
 80133a0:	d1fa      	bne.n	8013398 <strcat+0xc>
 80133a2:	bd10      	pop	{r4, pc}
 80133a4:	0022      	movs	r2, r4
 80133a6:	e7f3      	b.n	8013390 <strcat+0x4>

080133a8 <strchr>:
 80133a8:	b2c9      	uxtb	r1, r1
 80133aa:	7803      	ldrb	r3, [r0, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d004      	beq.n	80133ba <strchr+0x12>
 80133b0:	428b      	cmp	r3, r1
 80133b2:	d100      	bne.n	80133b6 <strchr+0xe>
 80133b4:	4770      	bx	lr
 80133b6:	3001      	adds	r0, #1
 80133b8:	e7f7      	b.n	80133aa <strchr+0x2>
 80133ba:	424b      	negs	r3, r1
 80133bc:	4159      	adcs	r1, r3
 80133be:	4249      	negs	r1, r1
 80133c0:	4008      	ands	r0, r1
 80133c2:	e7f7      	b.n	80133b4 <strchr+0xc>

080133c4 <strcpy>:
 80133c4:	0003      	movs	r3, r0
 80133c6:	780a      	ldrb	r2, [r1, #0]
 80133c8:	3101      	adds	r1, #1
 80133ca:	701a      	strb	r2, [r3, #0]
 80133cc:	3301      	adds	r3, #1
 80133ce:	2a00      	cmp	r2, #0
 80133d0:	d1f9      	bne.n	80133c6 <strcpy+0x2>
 80133d2:	4770      	bx	lr

080133d4 <strncmp>:
 80133d4:	2300      	movs	r3, #0
 80133d6:	b530      	push	{r4, r5, lr}
 80133d8:	429a      	cmp	r2, r3
 80133da:	d00a      	beq.n	80133f2 <strncmp+0x1e>
 80133dc:	3a01      	subs	r2, #1
 80133de:	5cc4      	ldrb	r4, [r0, r3]
 80133e0:	5ccd      	ldrb	r5, [r1, r3]
 80133e2:	42ac      	cmp	r4, r5
 80133e4:	d104      	bne.n	80133f0 <strncmp+0x1c>
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d002      	beq.n	80133f0 <strncmp+0x1c>
 80133ea:	3301      	adds	r3, #1
 80133ec:	2c00      	cmp	r4, #0
 80133ee:	d1f6      	bne.n	80133de <strncmp+0xa>
 80133f0:	1b63      	subs	r3, r4, r5
 80133f2:	0018      	movs	r0, r3
 80133f4:	bd30      	pop	{r4, r5, pc}

080133f6 <strncpy>:
 80133f6:	b530      	push	{r4, r5, lr}
 80133f8:	0005      	movs	r5, r0
 80133fa:	2a00      	cmp	r2, #0
 80133fc:	d100      	bne.n	8013400 <strncpy+0xa>
 80133fe:	bd30      	pop	{r4, r5, pc}
 8013400:	780c      	ldrb	r4, [r1, #0]
 8013402:	3a01      	subs	r2, #1
 8013404:	1c6b      	adds	r3, r5, #1
 8013406:	702c      	strb	r4, [r5, #0]
 8013408:	3101      	adds	r1, #1
 801340a:	2c00      	cmp	r4, #0
 801340c:	d105      	bne.n	801341a <strncpy+0x24>
 801340e:	189a      	adds	r2, r3, r2
 8013410:	429a      	cmp	r2, r3
 8013412:	d0f4      	beq.n	80133fe <strncpy+0x8>
 8013414:	701c      	strb	r4, [r3, #0]
 8013416:	3301      	adds	r3, #1
 8013418:	e7fa      	b.n	8013410 <strncpy+0x1a>
 801341a:	001d      	movs	r5, r3
 801341c:	e7ed      	b.n	80133fa <strncpy+0x4>
	...

08013420 <sulp>:
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	0016      	movs	r6, r2
 8013424:	000d      	movs	r5, r1
 8013426:	f003 ff17 	bl	8017258 <__ulp>
 801342a:	2e00      	cmp	r6, #0
 801342c:	d00d      	beq.n	801344a <sulp+0x2a>
 801342e:	236b      	movs	r3, #107	; 0x6b
 8013430:	006a      	lsls	r2, r5, #1
 8013432:	0d52      	lsrs	r2, r2, #21
 8013434:	1a9b      	subs	r3, r3, r2
 8013436:	2b00      	cmp	r3, #0
 8013438:	dd07      	ble.n	801344a <sulp+0x2a>
 801343a:	2400      	movs	r4, #0
 801343c:	4a03      	ldr	r2, [pc, #12]	; (801344c <sulp+0x2c>)
 801343e:	051b      	lsls	r3, r3, #20
 8013440:	189d      	adds	r5, r3, r2
 8013442:	002b      	movs	r3, r5
 8013444:	0022      	movs	r2, r4
 8013446:	f7ee fcf5 	bl	8001e34 <__aeabi_dmul>
 801344a:	bd70      	pop	{r4, r5, r6, pc}
 801344c:	3ff00000 	.word	0x3ff00000

08013450 <_strtod_l>:
 8013450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013452:	b0a7      	sub	sp, #156	; 0x9c
 8013454:	9307      	str	r3, [sp, #28]
 8013456:	2300      	movs	r3, #0
 8013458:	9004      	str	r0, [sp, #16]
 801345a:	9807      	ldr	r0, [sp, #28]
 801345c:	9322      	str	r3, [sp, #136]	; 0x88
 801345e:	9106      	str	r1, [sp, #24]
 8013460:	921d      	str	r2, [sp, #116]	; 0x74
 8013462:	f003 fc28 	bl	8016cb6 <__localeconv_l>
 8013466:	0005      	movs	r5, r0
 8013468:	6800      	ldr	r0, [r0, #0]
 801346a:	f7ec fe55 	bl	8000118 <strlen>
 801346e:	2600      	movs	r6, #0
 8013470:	2700      	movs	r7, #0
 8013472:	9b06      	ldr	r3, [sp, #24]
 8013474:	9005      	str	r0, [sp, #20]
 8013476:	9321      	str	r3, [sp, #132]	; 0x84
 8013478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801347a:	781a      	ldrb	r2, [r3, #0]
 801347c:	2a0d      	cmp	r2, #13
 801347e:	d839      	bhi.n	80134f4 <_strtod_l+0xa4>
 8013480:	2a09      	cmp	r2, #9
 8013482:	d23d      	bcs.n	8013500 <_strtod_l+0xb0>
 8013484:	2a00      	cmp	r2, #0
 8013486:	d044      	beq.n	8013512 <_strtod_l+0xc2>
 8013488:	2300      	movs	r3, #0
 801348a:	9313      	str	r3, [sp, #76]	; 0x4c
 801348c:	2200      	movs	r2, #0
 801348e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013490:	920c      	str	r2, [sp, #48]	; 0x30
 8013492:	7823      	ldrb	r3, [r4, #0]
 8013494:	2b30      	cmp	r3, #48	; 0x30
 8013496:	d000      	beq.n	801349a <_strtod_l+0x4a>
 8013498:	e07e      	b.n	8013598 <_strtod_l+0x148>
 801349a:	7863      	ldrb	r3, [r4, #1]
 801349c:	2b58      	cmp	r3, #88	; 0x58
 801349e:	d002      	beq.n	80134a6 <_strtod_l+0x56>
 80134a0:	2b78      	cmp	r3, #120	; 0x78
 80134a2:	d000      	beq.n	80134a6 <_strtod_l+0x56>
 80134a4:	e06e      	b.n	8013584 <_strtod_l+0x134>
 80134a6:	9b07      	ldr	r3, [sp, #28]
 80134a8:	4a96      	ldr	r2, [pc, #600]	; (8013704 <_strtod_l+0x2b4>)
 80134aa:	9302      	str	r3, [sp, #8]
 80134ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134ae:	a921      	add	r1, sp, #132	; 0x84
 80134b0:	9301      	str	r3, [sp, #4]
 80134b2:	ab22      	add	r3, sp, #136	; 0x88
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	9804      	ldr	r0, [sp, #16]
 80134b8:	ab23      	add	r3, sp, #140	; 0x8c
 80134ba:	f003 f914 	bl	80166e6 <__gethex>
 80134be:	2507      	movs	r5, #7
 80134c0:	9005      	str	r0, [sp, #20]
 80134c2:	4005      	ands	r5, r0
 80134c4:	d005      	beq.n	80134d2 <_strtod_l+0x82>
 80134c6:	2d06      	cmp	r5, #6
 80134c8:	d12f      	bne.n	801352a <_strtod_l+0xda>
 80134ca:	2300      	movs	r3, #0
 80134cc:	3401      	adds	r4, #1
 80134ce:	9421      	str	r4, [sp, #132]	; 0x84
 80134d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80134d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <_strtod_l+0x8e>
 80134d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134dc:	601a      	str	r2, [r3, #0]
 80134de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d01d      	beq.n	8013520 <_strtod_l+0xd0>
 80134e4:	2380      	movs	r3, #128	; 0x80
 80134e6:	0032      	movs	r2, r6
 80134e8:	061b      	lsls	r3, r3, #24
 80134ea:	18fb      	adds	r3, r7, r3
 80134ec:	0010      	movs	r0, r2
 80134ee:	0019      	movs	r1, r3
 80134f0:	b027      	add	sp, #156	; 0x9c
 80134f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134f4:	2a2b      	cmp	r2, #43	; 0x2b
 80134f6:	d016      	beq.n	8013526 <_strtod_l+0xd6>
 80134f8:	2a2d      	cmp	r2, #45	; 0x2d
 80134fa:	d003      	beq.n	8013504 <_strtod_l+0xb4>
 80134fc:	2a20      	cmp	r2, #32
 80134fe:	d1c3      	bne.n	8013488 <_strtod_l+0x38>
 8013500:	3301      	adds	r3, #1
 8013502:	e7b8      	b.n	8013476 <_strtod_l+0x26>
 8013504:	2201      	movs	r2, #1
 8013506:	9213      	str	r2, [sp, #76]	; 0x4c
 8013508:	1c5a      	adds	r2, r3, #1
 801350a:	9221      	str	r2, [sp, #132]	; 0x84
 801350c:	785b      	ldrb	r3, [r3, #1]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1bc      	bne.n	801348c <_strtod_l+0x3c>
 8013512:	9b06      	ldr	r3, [sp, #24]
 8013514:	9321      	str	r3, [sp, #132]	; 0x84
 8013516:	2300      	movs	r3, #0
 8013518:	9313      	str	r3, [sp, #76]	; 0x4c
 801351a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801351c:	2b00      	cmp	r3, #0
 801351e:	d1db      	bne.n	80134d8 <_strtod_l+0x88>
 8013520:	0032      	movs	r2, r6
 8013522:	003b      	movs	r3, r7
 8013524:	e7e2      	b.n	80134ec <_strtod_l+0x9c>
 8013526:	2200      	movs	r2, #0
 8013528:	e7ed      	b.n	8013506 <_strtod_l+0xb6>
 801352a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801352c:	2a00      	cmp	r2, #0
 801352e:	d007      	beq.n	8013540 <_strtod_l+0xf0>
 8013530:	2135      	movs	r1, #53	; 0x35
 8013532:	a824      	add	r0, sp, #144	; 0x90
 8013534:	f003 ff7d 	bl	8017432 <__copybits>
 8013538:	9922      	ldr	r1, [sp, #136]	; 0x88
 801353a:	9804      	ldr	r0, [sp, #16]
 801353c:	f003 fc12 	bl	8016d64 <_Bfree>
 8013540:	1e68      	subs	r0, r5, #1
 8013542:	2804      	cmp	r0, #4
 8013544:	d806      	bhi.n	8013554 <_strtod_l+0x104>
 8013546:	f7ec fdef 	bl	8000128 <__gnu_thumb1_case_uqi>
 801354a:	030c      	.short	0x030c
 801354c:	1917      	.short	0x1917
 801354e:	0c          	.byte	0x0c
 801354f:	00          	.byte	0x00
 8013550:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013552:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013554:	9b05      	ldr	r3, [sp, #20]
 8013556:	071b      	lsls	r3, r3, #28
 8013558:	d5bb      	bpl.n	80134d2 <_strtod_l+0x82>
 801355a:	2380      	movs	r3, #128	; 0x80
 801355c:	061b      	lsls	r3, r3, #24
 801355e:	431f      	orrs	r7, r3
 8013560:	e7b7      	b.n	80134d2 <_strtod_l+0x82>
 8013562:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013564:	4a68      	ldr	r2, [pc, #416]	; (8013708 <_strtod_l+0x2b8>)
 8013566:	4969      	ldr	r1, [pc, #420]	; (801370c <_strtod_l+0x2bc>)
 8013568:	401a      	ands	r2, r3
 801356a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801356c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801356e:	185b      	adds	r3, r3, r1
 8013570:	051b      	lsls	r3, r3, #20
 8013572:	431a      	orrs	r2, r3
 8013574:	0017      	movs	r7, r2
 8013576:	e7ed      	b.n	8013554 <_strtod_l+0x104>
 8013578:	4f65      	ldr	r7, [pc, #404]	; (8013710 <_strtod_l+0x2c0>)
 801357a:	e7eb      	b.n	8013554 <_strtod_l+0x104>
 801357c:	2601      	movs	r6, #1
 801357e:	4f65      	ldr	r7, [pc, #404]	; (8013714 <_strtod_l+0x2c4>)
 8013580:	4276      	negs	r6, r6
 8013582:	e7e7      	b.n	8013554 <_strtod_l+0x104>
 8013584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013586:	1c5a      	adds	r2, r3, #1
 8013588:	9221      	str	r2, [sp, #132]	; 0x84
 801358a:	785b      	ldrb	r3, [r3, #1]
 801358c:	2b30      	cmp	r3, #48	; 0x30
 801358e:	d0f9      	beq.n	8013584 <_strtod_l+0x134>
 8013590:	2b00      	cmp	r3, #0
 8013592:	d09e      	beq.n	80134d2 <_strtod_l+0x82>
 8013594:	2301      	movs	r3, #1
 8013596:	930c      	str	r3, [sp, #48]	; 0x30
 8013598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801359a:	220a      	movs	r2, #10
 801359c:	9312      	str	r3, [sp, #72]	; 0x48
 801359e:	2300      	movs	r3, #0
 80135a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80135a2:	9308      	str	r3, [sp, #32]
 80135a4:	930a      	str	r3, [sp, #40]	; 0x28
 80135a6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80135a8:	7804      	ldrb	r4, [r0, #0]
 80135aa:	0023      	movs	r3, r4
 80135ac:	3b30      	subs	r3, #48	; 0x30
 80135ae:	b2d9      	uxtb	r1, r3
 80135b0:	2909      	cmp	r1, #9
 80135b2:	d934      	bls.n	801361e <_strtod_l+0x1ce>
 80135b4:	9a05      	ldr	r2, [sp, #20]
 80135b6:	6829      	ldr	r1, [r5, #0]
 80135b8:	f7ff ff0c 	bl	80133d4 <strncmp>
 80135bc:	2800      	cmp	r0, #0
 80135be:	d040      	beq.n	8013642 <_strtod_l+0x1f2>
 80135c0:	2000      	movs	r0, #0
 80135c2:	0023      	movs	r3, r4
 80135c4:	4684      	mov	ip, r0
 80135c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135c8:	9007      	str	r0, [sp, #28]
 80135ca:	9205      	str	r2, [sp, #20]
 80135cc:	2220      	movs	r2, #32
 80135ce:	0019      	movs	r1, r3
 80135d0:	4391      	bics	r1, r2
 80135d2:	000a      	movs	r2, r1
 80135d4:	2100      	movs	r1, #0
 80135d6:	2a45      	cmp	r2, #69	; 0x45
 80135d8:	d000      	beq.n	80135dc <_strtod_l+0x18c>
 80135da:	e0bf      	b.n	801375c <_strtod_l+0x30c>
 80135dc:	9b05      	ldr	r3, [sp, #20]
 80135de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135e0:	4303      	orrs	r3, r0
 80135e2:	4313      	orrs	r3, r2
 80135e4:	428b      	cmp	r3, r1
 80135e6:	d094      	beq.n	8013512 <_strtod_l+0xc2>
 80135e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ea:	9306      	str	r3, [sp, #24]
 80135ec:	3301      	adds	r3, #1
 80135ee:	9321      	str	r3, [sp, #132]	; 0x84
 80135f0:	9b06      	ldr	r3, [sp, #24]
 80135f2:	785b      	ldrb	r3, [r3, #1]
 80135f4:	2b2b      	cmp	r3, #43	; 0x2b
 80135f6:	d100      	bne.n	80135fa <_strtod_l+0x1aa>
 80135f8:	e082      	b.n	8013700 <_strtod_l+0x2b0>
 80135fa:	000c      	movs	r4, r1
 80135fc:	2b2d      	cmp	r3, #45	; 0x2d
 80135fe:	d105      	bne.n	801360c <_strtod_l+0x1bc>
 8013600:	2401      	movs	r4, #1
 8013602:	9b06      	ldr	r3, [sp, #24]
 8013604:	3302      	adds	r3, #2
 8013606:	9321      	str	r3, [sp, #132]	; 0x84
 8013608:	9b06      	ldr	r3, [sp, #24]
 801360a:	789b      	ldrb	r3, [r3, #2]
 801360c:	001a      	movs	r2, r3
 801360e:	3a30      	subs	r2, #48	; 0x30
 8013610:	2a09      	cmp	r2, #9
 8013612:	d800      	bhi.n	8013616 <_strtod_l+0x1c6>
 8013614:	e084      	b.n	8013720 <_strtod_l+0x2d0>
 8013616:	9a06      	ldr	r2, [sp, #24]
 8013618:	2100      	movs	r1, #0
 801361a:	9221      	str	r2, [sp, #132]	; 0x84
 801361c:	e09e      	b.n	801375c <_strtod_l+0x30c>
 801361e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013620:	2908      	cmp	r1, #8
 8013622:	dc09      	bgt.n	8013638 <_strtod_l+0x1e8>
 8013624:	9908      	ldr	r1, [sp, #32]
 8013626:	4351      	muls	r1, r2
 8013628:	18cb      	adds	r3, r1, r3
 801362a:	9308      	str	r3, [sp, #32]
 801362c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801362e:	3001      	adds	r0, #1
 8013630:	3301      	adds	r3, #1
 8013632:	930a      	str	r3, [sp, #40]	; 0x28
 8013634:	9021      	str	r0, [sp, #132]	; 0x84
 8013636:	e7b6      	b.n	80135a6 <_strtod_l+0x156>
 8013638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801363a:	4351      	muls	r1, r2
 801363c:	18cb      	adds	r3, r1, r3
 801363e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013640:	e7f4      	b.n	801362c <_strtod_l+0x1dc>
 8013642:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013644:	9b05      	ldr	r3, [sp, #20]
 8013646:	4694      	mov	ip, r2
 8013648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801364a:	4463      	add	r3, ip
 801364c:	9321      	str	r3, [sp, #132]	; 0x84
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	2a00      	cmp	r2, #0
 8013652:	d036      	beq.n	80136c2 <_strtod_l+0x272>
 8013654:	4684      	mov	ip, r0
 8013656:	9205      	str	r2, [sp, #20]
 8013658:	001a      	movs	r2, r3
 801365a:	3a30      	subs	r2, #48	; 0x30
 801365c:	2a09      	cmp	r2, #9
 801365e:	d912      	bls.n	8013686 <_strtod_l+0x236>
 8013660:	2201      	movs	r2, #1
 8013662:	9207      	str	r2, [sp, #28]
 8013664:	e7b2      	b.n	80135cc <_strtod_l+0x17c>
 8013666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013668:	3001      	adds	r0, #1
 801366a:	1c5a      	adds	r2, r3, #1
 801366c:	9221      	str	r2, [sp, #132]	; 0x84
 801366e:	785b      	ldrb	r3, [r3, #1]
 8013670:	2b30      	cmp	r3, #48	; 0x30
 8013672:	d0f8      	beq.n	8013666 <_strtod_l+0x216>
 8013674:	001a      	movs	r2, r3
 8013676:	3a31      	subs	r2, #49	; 0x31
 8013678:	2a08      	cmp	r2, #8
 801367a:	d83c      	bhi.n	80136f6 <_strtod_l+0x2a6>
 801367c:	4684      	mov	ip, r0
 801367e:	2000      	movs	r0, #0
 8013680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013682:	9005      	str	r0, [sp, #20]
 8013684:	9212      	str	r2, [sp, #72]	; 0x48
 8013686:	3b30      	subs	r3, #48	; 0x30
 8013688:	1c42      	adds	r2, r0, #1
 801368a:	2b00      	cmp	r3, #0
 801368c:	d013      	beq.n	80136b6 <_strtod_l+0x266>
 801368e:	210a      	movs	r1, #10
 8013690:	4494      	add	ip, r2
 8013692:	9a05      	ldr	r2, [sp, #20]
 8013694:	1885      	adds	r5, r0, r2
 8013696:	42aa      	cmp	r2, r5
 8013698:	d115      	bne.n	80136c6 <_strtod_l+0x276>
 801369a:	9905      	ldr	r1, [sp, #20]
 801369c:	9a05      	ldr	r2, [sp, #20]
 801369e:	3101      	adds	r1, #1
 80136a0:	1809      	adds	r1, r1, r0
 80136a2:	1812      	adds	r2, r2, r0
 80136a4:	9105      	str	r1, [sp, #20]
 80136a6:	2a08      	cmp	r2, #8
 80136a8:	dc1b      	bgt.n	80136e2 <_strtod_l+0x292>
 80136aa:	220a      	movs	r2, #10
 80136ac:	9908      	ldr	r1, [sp, #32]
 80136ae:	434a      	muls	r2, r1
 80136b0:	189b      	adds	r3, r3, r2
 80136b2:	2200      	movs	r2, #0
 80136b4:	9308      	str	r3, [sp, #32]
 80136b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136b8:	0010      	movs	r0, r2
 80136ba:	1c59      	adds	r1, r3, #1
 80136bc:	9121      	str	r1, [sp, #132]	; 0x84
 80136be:	785b      	ldrb	r3, [r3, #1]
 80136c0:	e7ca      	b.n	8013658 <_strtod_l+0x208>
 80136c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80136c4:	e7d4      	b.n	8013670 <_strtod_l+0x220>
 80136c6:	1c54      	adds	r4, r2, #1
 80136c8:	2a08      	cmp	r2, #8
 80136ca:	dc04      	bgt.n	80136d6 <_strtod_l+0x286>
 80136cc:	9a08      	ldr	r2, [sp, #32]
 80136ce:	434a      	muls	r2, r1
 80136d0:	9208      	str	r2, [sp, #32]
 80136d2:	0022      	movs	r2, r4
 80136d4:	e7df      	b.n	8013696 <_strtod_l+0x246>
 80136d6:	2c10      	cmp	r4, #16
 80136d8:	dcfb      	bgt.n	80136d2 <_strtod_l+0x282>
 80136da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136dc:	434a      	muls	r2, r1
 80136de:	920b      	str	r2, [sp, #44]	; 0x2c
 80136e0:	e7f7      	b.n	80136d2 <_strtod_l+0x282>
 80136e2:	9905      	ldr	r1, [sp, #20]
 80136e4:	2200      	movs	r2, #0
 80136e6:	2910      	cmp	r1, #16
 80136e8:	dce5      	bgt.n	80136b6 <_strtod_l+0x266>
 80136ea:	210a      	movs	r1, #10
 80136ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80136ee:	4341      	muls	r1, r0
 80136f0:	185b      	adds	r3, r3, r1
 80136f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80136f4:	e7df      	b.n	80136b6 <_strtod_l+0x266>
 80136f6:	2200      	movs	r2, #0
 80136f8:	4694      	mov	ip, r2
 80136fa:	9205      	str	r2, [sp, #20]
 80136fc:	3201      	adds	r2, #1
 80136fe:	e7b0      	b.n	8013662 <_strtod_l+0x212>
 8013700:	000c      	movs	r4, r1
 8013702:	e77e      	b.n	8013602 <_strtod_l+0x1b2>
 8013704:	0801a878 	.word	0x0801a878
 8013708:	ffefffff 	.word	0xffefffff
 801370c:	00000433 	.word	0x00000433
 8013710:	7ff00000 	.word	0x7ff00000
 8013714:	7fffffff 	.word	0x7fffffff
 8013718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	9221      	str	r2, [sp, #132]	; 0x84
 801371e:	785b      	ldrb	r3, [r3, #1]
 8013720:	2b30      	cmp	r3, #48	; 0x30
 8013722:	d0f9      	beq.n	8013718 <_strtod_l+0x2c8>
 8013724:	001a      	movs	r2, r3
 8013726:	3a31      	subs	r2, #49	; 0x31
 8013728:	2100      	movs	r1, #0
 801372a:	2a08      	cmp	r2, #8
 801372c:	d816      	bhi.n	801375c <_strtod_l+0x30c>
 801372e:	3b30      	subs	r3, #48	; 0x30
 8013730:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013732:	930e      	str	r3, [sp, #56]	; 0x38
 8013734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013736:	1c59      	adds	r1, r3, #1
 8013738:	9121      	str	r1, [sp, #132]	; 0x84
 801373a:	785b      	ldrb	r3, [r3, #1]
 801373c:	001a      	movs	r2, r3
 801373e:	3a30      	subs	r2, #48	; 0x30
 8013740:	2a09      	cmp	r2, #9
 8013742:	d932      	bls.n	80137aa <_strtod_l+0x35a>
 8013744:	1b4a      	subs	r2, r1, r5
 8013746:	4dad      	ldr	r5, [pc, #692]	; (80139fc <_strtod_l+0x5ac>)
 8013748:	0029      	movs	r1, r5
 801374a:	2a08      	cmp	r2, #8
 801374c:	dc03      	bgt.n	8013756 <_strtod_l+0x306>
 801374e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013750:	42a9      	cmp	r1, r5
 8013752:	dd00      	ble.n	8013756 <_strtod_l+0x306>
 8013754:	0029      	movs	r1, r5
 8013756:	2c00      	cmp	r4, #0
 8013758:	d000      	beq.n	801375c <_strtod_l+0x30c>
 801375a:	4249      	negs	r1, r1
 801375c:	9a05      	ldr	r2, [sp, #20]
 801375e:	2a00      	cmp	r2, #0
 8013760:	d149      	bne.n	80137f6 <_strtod_l+0x3a6>
 8013762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013764:	4310      	orrs	r0, r2
 8013766:	d000      	beq.n	801376a <_strtod_l+0x31a>
 8013768:	e6b3      	b.n	80134d2 <_strtod_l+0x82>
 801376a:	9a07      	ldr	r2, [sp, #28]
 801376c:	2a00      	cmp	r2, #0
 801376e:	d000      	beq.n	8013772 <_strtod_l+0x322>
 8013770:	e6cf      	b.n	8013512 <_strtod_l+0xc2>
 8013772:	2b4e      	cmp	r3, #78	; 0x4e
 8013774:	d025      	beq.n	80137c2 <_strtod_l+0x372>
 8013776:	dc1f      	bgt.n	80137b8 <_strtod_l+0x368>
 8013778:	2b49      	cmp	r3, #73	; 0x49
 801377a:	d000      	beq.n	801377e <_strtod_l+0x32e>
 801377c:	e6c9      	b.n	8013512 <_strtod_l+0xc2>
 801377e:	49a0      	ldr	r1, [pc, #640]	; (8013a00 <_strtod_l+0x5b0>)
 8013780:	a821      	add	r0, sp, #132	; 0x84
 8013782:	f003 f9ed 	bl	8016b60 <__match>
 8013786:	2800      	cmp	r0, #0
 8013788:	d100      	bne.n	801378c <_strtod_l+0x33c>
 801378a:	e6c2      	b.n	8013512 <_strtod_l+0xc2>
 801378c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801378e:	499d      	ldr	r1, [pc, #628]	; (8013a04 <_strtod_l+0x5b4>)
 8013790:	3b01      	subs	r3, #1
 8013792:	a821      	add	r0, sp, #132	; 0x84
 8013794:	9321      	str	r3, [sp, #132]	; 0x84
 8013796:	f003 f9e3 	bl	8016b60 <__match>
 801379a:	2800      	cmp	r0, #0
 801379c:	d102      	bne.n	80137a4 <_strtod_l+0x354>
 801379e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137a0:	3301      	adds	r3, #1
 80137a2:	9321      	str	r3, [sp, #132]	; 0x84
 80137a4:	4f98      	ldr	r7, [pc, #608]	; (8013a08 <_strtod_l+0x5b8>)
 80137a6:	2600      	movs	r6, #0
 80137a8:	e693      	b.n	80134d2 <_strtod_l+0x82>
 80137aa:	220a      	movs	r2, #10
 80137ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137ae:	434a      	muls	r2, r1
 80137b0:	18d2      	adds	r2, r2, r3
 80137b2:	3a30      	subs	r2, #48	; 0x30
 80137b4:	920e      	str	r2, [sp, #56]	; 0x38
 80137b6:	e7bd      	b.n	8013734 <_strtod_l+0x2e4>
 80137b8:	2b69      	cmp	r3, #105	; 0x69
 80137ba:	d0e0      	beq.n	801377e <_strtod_l+0x32e>
 80137bc:	2b6e      	cmp	r3, #110	; 0x6e
 80137be:	d000      	beq.n	80137c2 <_strtod_l+0x372>
 80137c0:	e6a7      	b.n	8013512 <_strtod_l+0xc2>
 80137c2:	4992      	ldr	r1, [pc, #584]	; (8013a0c <_strtod_l+0x5bc>)
 80137c4:	a821      	add	r0, sp, #132	; 0x84
 80137c6:	f003 f9cb 	bl	8016b60 <__match>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	d100      	bne.n	80137d0 <_strtod_l+0x380>
 80137ce:	e6a0      	b.n	8013512 <_strtod_l+0xc2>
 80137d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	2b28      	cmp	r3, #40	; 0x28
 80137d6:	d10c      	bne.n	80137f2 <_strtod_l+0x3a2>
 80137d8:	aa24      	add	r2, sp, #144	; 0x90
 80137da:	498d      	ldr	r1, [pc, #564]	; (8013a10 <_strtod_l+0x5c0>)
 80137dc:	a821      	add	r0, sp, #132	; 0x84
 80137de:	f003 f9d3 	bl	8016b88 <__hexnan>
 80137e2:	2805      	cmp	r0, #5
 80137e4:	d105      	bne.n	80137f2 <_strtod_l+0x3a2>
 80137e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80137e8:	4a87      	ldr	r2, [pc, #540]	; (8013a08 <_strtod_l+0x5b8>)
 80137ea:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80137ec:	431a      	orrs	r2, r3
 80137ee:	0017      	movs	r7, r2
 80137f0:	e66f      	b.n	80134d2 <_strtod_l+0x82>
 80137f2:	4f88      	ldr	r7, [pc, #544]	; (8013a14 <_strtod_l+0x5c4>)
 80137f4:	e7d7      	b.n	80137a6 <_strtod_l+0x356>
 80137f6:	4663      	mov	r3, ip
 80137f8:	1acb      	subs	r3, r1, r3
 80137fa:	9307      	str	r3, [sp, #28]
 80137fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d101      	bne.n	8013806 <_strtod_l+0x3b6>
 8013802:	9b05      	ldr	r3, [sp, #20]
 8013804:	930a      	str	r3, [sp, #40]	; 0x28
 8013806:	9c05      	ldr	r4, [sp, #20]
 8013808:	2c10      	cmp	r4, #16
 801380a:	dd00      	ble.n	801380e <_strtod_l+0x3be>
 801380c:	2410      	movs	r4, #16
 801380e:	9808      	ldr	r0, [sp, #32]
 8013810:	f7ef f956 	bl	8002ac0 <__aeabi_ui2d>
 8013814:	9b05      	ldr	r3, [sp, #20]
 8013816:	0006      	movs	r6, r0
 8013818:	000f      	movs	r7, r1
 801381a:	2b09      	cmp	r3, #9
 801381c:	dc15      	bgt.n	801384a <_strtod_l+0x3fa>
 801381e:	9b07      	ldr	r3, [sp, #28]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d100      	bne.n	8013826 <_strtod_l+0x3d6>
 8013824:	e655      	b.n	80134d2 <_strtod_l+0x82>
 8013826:	9b07      	ldr	r3, [sp, #28]
 8013828:	2b00      	cmp	r3, #0
 801382a:	dc00      	bgt.n	801382e <_strtod_l+0x3de>
 801382c:	e07d      	b.n	801392a <_strtod_l+0x4da>
 801382e:	2b16      	cmp	r3, #22
 8013830:	dc62      	bgt.n	80138f8 <_strtod_l+0x4a8>
 8013832:	00dc      	lsls	r4, r3, #3
 8013834:	4b78      	ldr	r3, [pc, #480]	; (8013a18 <_strtod_l+0x5c8>)
 8013836:	0032      	movs	r2, r6
 8013838:	1919      	adds	r1, r3, r4
 801383a:	003b      	movs	r3, r7
 801383c:	6808      	ldr	r0, [r1, #0]
 801383e:	6849      	ldr	r1, [r1, #4]
 8013840:	f7ee faf8 	bl	8001e34 <__aeabi_dmul>
 8013844:	0006      	movs	r6, r0
 8013846:	000f      	movs	r7, r1
 8013848:	e643      	b.n	80134d2 <_strtod_l+0x82>
 801384a:	0022      	movs	r2, r4
 801384c:	4b72      	ldr	r3, [pc, #456]	; (8013a18 <_strtod_l+0x5c8>)
 801384e:	3a09      	subs	r2, #9
 8013850:	00d2      	lsls	r2, r2, #3
 8013852:	189b      	adds	r3, r3, r2
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	f7ee faec 	bl	8001e34 <__aeabi_dmul>
 801385c:	0006      	movs	r6, r0
 801385e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013860:	000f      	movs	r7, r1
 8013862:	f7ef f92d 	bl	8002ac0 <__aeabi_ui2d>
 8013866:	000b      	movs	r3, r1
 8013868:	0002      	movs	r2, r0
 801386a:	0039      	movs	r1, r7
 801386c:	0030      	movs	r0, r6
 801386e:	f7ed fbbb 	bl	8000fe8 <__aeabi_dadd>
 8013872:	9b05      	ldr	r3, [sp, #20]
 8013874:	0006      	movs	r6, r0
 8013876:	000f      	movs	r7, r1
 8013878:	2b0f      	cmp	r3, #15
 801387a:	ddd0      	ble.n	801381e <_strtod_l+0x3ce>
 801387c:	9b05      	ldr	r3, [sp, #20]
 801387e:	1b1c      	subs	r4, r3, r4
 8013880:	9b07      	ldr	r3, [sp, #28]
 8013882:	18e4      	adds	r4, r4, r3
 8013884:	2c00      	cmp	r4, #0
 8013886:	dc00      	bgt.n	801388a <_strtod_l+0x43a>
 8013888:	e094      	b.n	80139b4 <_strtod_l+0x564>
 801388a:	230f      	movs	r3, #15
 801388c:	4023      	ands	r3, r4
 801388e:	d00a      	beq.n	80138a6 <_strtod_l+0x456>
 8013890:	4961      	ldr	r1, [pc, #388]	; (8013a18 <_strtod_l+0x5c8>)
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	18c9      	adds	r1, r1, r3
 8013896:	0032      	movs	r2, r6
 8013898:	6808      	ldr	r0, [r1, #0]
 801389a:	6849      	ldr	r1, [r1, #4]
 801389c:	003b      	movs	r3, r7
 801389e:	f7ee fac9 	bl	8001e34 <__aeabi_dmul>
 80138a2:	0006      	movs	r6, r0
 80138a4:	000f      	movs	r7, r1
 80138a6:	230f      	movs	r3, #15
 80138a8:	439c      	bics	r4, r3
 80138aa:	d06e      	beq.n	801398a <_strtod_l+0x53a>
 80138ac:	3326      	adds	r3, #38	; 0x26
 80138ae:	33ff      	adds	r3, #255	; 0xff
 80138b0:	429c      	cmp	r4, r3
 80138b2:	dd48      	ble.n	8013946 <_strtod_l+0x4f6>
 80138b4:	2400      	movs	r4, #0
 80138b6:	9405      	str	r4, [sp, #20]
 80138b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80138ba:	940a      	str	r4, [sp, #40]	; 0x28
 80138bc:	2322      	movs	r3, #34	; 0x22
 80138be:	2600      	movs	r6, #0
 80138c0:	9a04      	ldr	r2, [sp, #16]
 80138c2:	4f51      	ldr	r7, [pc, #324]	; (8013a08 <_strtod_l+0x5b8>)
 80138c4:	6013      	str	r3, [r2, #0]
 80138c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138c8:	42b3      	cmp	r3, r6
 80138ca:	d100      	bne.n	80138ce <_strtod_l+0x47e>
 80138cc:	e601      	b.n	80134d2 <_strtod_l+0x82>
 80138ce:	9922      	ldr	r1, [sp, #136]	; 0x88
 80138d0:	9804      	ldr	r0, [sp, #16]
 80138d2:	f003 fa47 	bl	8016d64 <_Bfree>
 80138d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138d8:	9804      	ldr	r0, [sp, #16]
 80138da:	f003 fa43 	bl	8016d64 <_Bfree>
 80138de:	9905      	ldr	r1, [sp, #20]
 80138e0:	9804      	ldr	r0, [sp, #16]
 80138e2:	f003 fa3f 	bl	8016d64 <_Bfree>
 80138e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138e8:	9804      	ldr	r0, [sp, #16]
 80138ea:	f003 fa3b 	bl	8016d64 <_Bfree>
 80138ee:	0021      	movs	r1, r4
 80138f0:	9804      	ldr	r0, [sp, #16]
 80138f2:	f003 fa37 	bl	8016d64 <_Bfree>
 80138f6:	e5ec      	b.n	80134d2 <_strtod_l+0x82>
 80138f8:	2325      	movs	r3, #37	; 0x25
 80138fa:	9a05      	ldr	r2, [sp, #20]
 80138fc:	1a9b      	subs	r3, r3, r2
 80138fe:	9a07      	ldr	r2, [sp, #28]
 8013900:	4293      	cmp	r3, r2
 8013902:	dbbb      	blt.n	801387c <_strtod_l+0x42c>
 8013904:	230f      	movs	r3, #15
 8013906:	9a05      	ldr	r2, [sp, #20]
 8013908:	4c43      	ldr	r4, [pc, #268]	; (8013a18 <_strtod_l+0x5c8>)
 801390a:	1a9d      	subs	r5, r3, r2
 801390c:	00e9      	lsls	r1, r5, #3
 801390e:	1861      	adds	r1, r4, r1
 8013910:	0032      	movs	r2, r6
 8013912:	6808      	ldr	r0, [r1, #0]
 8013914:	6849      	ldr	r1, [r1, #4]
 8013916:	003b      	movs	r3, r7
 8013918:	f7ee fa8c 	bl	8001e34 <__aeabi_dmul>
 801391c:	9b07      	ldr	r3, [sp, #28]
 801391e:	1b5e      	subs	r6, r3, r5
 8013920:	00f6      	lsls	r6, r6, #3
 8013922:	19a6      	adds	r6, r4, r6
 8013924:	6832      	ldr	r2, [r6, #0]
 8013926:	6873      	ldr	r3, [r6, #4]
 8013928:	e78a      	b.n	8013840 <_strtod_l+0x3f0>
 801392a:	9b07      	ldr	r3, [sp, #28]
 801392c:	3316      	adds	r3, #22
 801392e:	dba5      	blt.n	801387c <_strtod_l+0x42c>
 8013930:	9b07      	ldr	r3, [sp, #28]
 8013932:	0030      	movs	r0, r6
 8013934:	00da      	lsls	r2, r3, #3
 8013936:	4b38      	ldr	r3, [pc, #224]	; (8013a18 <_strtod_l+0x5c8>)
 8013938:	0039      	movs	r1, r7
 801393a:	1a9b      	subs	r3, r3, r2
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	f7ed fe6e 	bl	8001620 <__aeabi_ddiv>
 8013944:	e77e      	b.n	8013844 <_strtod_l+0x3f4>
 8013946:	2300      	movs	r3, #0
 8013948:	0030      	movs	r0, r6
 801394a:	0039      	movs	r1, r7
 801394c:	001d      	movs	r5, r3
 801394e:	1124      	asrs	r4, r4, #4
 8013950:	2c01      	cmp	r4, #1
 8013952:	dc1d      	bgt.n	8013990 <_strtod_l+0x540>
 8013954:	2b00      	cmp	r3, #0
 8013956:	d001      	beq.n	801395c <_strtod_l+0x50c>
 8013958:	0006      	movs	r6, r0
 801395a:	000f      	movs	r7, r1
 801395c:	4b2f      	ldr	r3, [pc, #188]	; (8013a1c <_strtod_l+0x5cc>)
 801395e:	00ed      	lsls	r5, r5, #3
 8013960:	18ff      	adds	r7, r7, r3
 8013962:	4b2f      	ldr	r3, [pc, #188]	; (8013a20 <_strtod_l+0x5d0>)
 8013964:	0032      	movs	r2, r6
 8013966:	195d      	adds	r5, r3, r5
 8013968:	6828      	ldr	r0, [r5, #0]
 801396a:	6869      	ldr	r1, [r5, #4]
 801396c:	003b      	movs	r3, r7
 801396e:	f7ee fa61 	bl	8001e34 <__aeabi_dmul>
 8013972:	4b25      	ldr	r3, [pc, #148]	; (8013a08 <_strtod_l+0x5b8>)
 8013974:	4a2b      	ldr	r2, [pc, #172]	; (8013a24 <_strtod_l+0x5d4>)
 8013976:	0006      	movs	r6, r0
 8013978:	400b      	ands	r3, r1
 801397a:	4293      	cmp	r3, r2
 801397c:	d89a      	bhi.n	80138b4 <_strtod_l+0x464>
 801397e:	4a2a      	ldr	r2, [pc, #168]	; (8013a28 <_strtod_l+0x5d8>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d913      	bls.n	80139ac <_strtod_l+0x55c>
 8013984:	2601      	movs	r6, #1
 8013986:	4f29      	ldr	r7, [pc, #164]	; (8013a2c <_strtod_l+0x5dc>)
 8013988:	4276      	negs	r6, r6
 801398a:	2300      	movs	r3, #0
 801398c:	9306      	str	r3, [sp, #24]
 801398e:	e07b      	b.n	8013a88 <_strtod_l+0x638>
 8013990:	2201      	movs	r2, #1
 8013992:	4214      	tst	r4, r2
 8013994:	d007      	beq.n	80139a6 <_strtod_l+0x556>
 8013996:	4a22      	ldr	r2, [pc, #136]	; (8013a20 <_strtod_l+0x5d0>)
 8013998:	00eb      	lsls	r3, r5, #3
 801399a:	189b      	adds	r3, r3, r2
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	f7ee fa48 	bl	8001e34 <__aeabi_dmul>
 80139a4:	2301      	movs	r3, #1
 80139a6:	3501      	adds	r5, #1
 80139a8:	1064      	asrs	r4, r4, #1
 80139aa:	e7d1      	b.n	8013950 <_strtod_l+0x500>
 80139ac:	23d4      	movs	r3, #212	; 0xd4
 80139ae:	049b      	lsls	r3, r3, #18
 80139b0:	18cf      	adds	r7, r1, r3
 80139b2:	e7ea      	b.n	801398a <_strtod_l+0x53a>
 80139b4:	2c00      	cmp	r4, #0
 80139b6:	d0e8      	beq.n	801398a <_strtod_l+0x53a>
 80139b8:	230f      	movs	r3, #15
 80139ba:	4264      	negs	r4, r4
 80139bc:	4023      	ands	r3, r4
 80139be:	d00a      	beq.n	80139d6 <_strtod_l+0x586>
 80139c0:	4a15      	ldr	r2, [pc, #84]	; (8013a18 <_strtod_l+0x5c8>)
 80139c2:	00db      	lsls	r3, r3, #3
 80139c4:	18d3      	adds	r3, r2, r3
 80139c6:	0030      	movs	r0, r6
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	0039      	movs	r1, r7
 80139ce:	f7ed fe27 	bl	8001620 <__aeabi_ddiv>
 80139d2:	0006      	movs	r6, r0
 80139d4:	000f      	movs	r7, r1
 80139d6:	1124      	asrs	r4, r4, #4
 80139d8:	d0d7      	beq.n	801398a <_strtod_l+0x53a>
 80139da:	2c1f      	cmp	r4, #31
 80139dc:	dd28      	ble.n	8013a30 <_strtod_l+0x5e0>
 80139de:	2400      	movs	r4, #0
 80139e0:	9405      	str	r4, [sp, #20]
 80139e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80139e4:	940a      	str	r4, [sp, #40]	; 0x28
 80139e6:	2322      	movs	r3, #34	; 0x22
 80139e8:	9a04      	ldr	r2, [sp, #16]
 80139ea:	2600      	movs	r6, #0
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139f0:	2700      	movs	r7, #0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d000      	beq.n	80139f8 <_strtod_l+0x5a8>
 80139f6:	e76a      	b.n	80138ce <_strtod_l+0x47e>
 80139f8:	e56b      	b.n	80134d2 <_strtod_l+0x82>
 80139fa:	46c0      	nop			; (mov r8, r8)
 80139fc:	00004e1f 	.word	0x00004e1f
 8013a00:	0801a8cd 	.word	0x0801a8cd
 8013a04:	0801aa20 	.word	0x0801aa20
 8013a08:	7ff00000 	.word	0x7ff00000
 8013a0c:	0801a8d5 	.word	0x0801a8d5
 8013a10:	0801a88c 	.word	0x0801a88c
 8013a14:	fff80000 	.word	0xfff80000
 8013a18:	0801aa58 	.word	0x0801aa58
 8013a1c:	fcb00000 	.word	0xfcb00000
 8013a20:	0801aa30 	.word	0x0801aa30
 8013a24:	7ca00000 	.word	0x7ca00000
 8013a28:	7c900000 	.word	0x7c900000
 8013a2c:	7fefffff 	.word	0x7fefffff
 8013a30:	2310      	movs	r3, #16
 8013a32:	4023      	ands	r3, r4
 8013a34:	9306      	str	r3, [sp, #24]
 8013a36:	d001      	beq.n	8013a3c <_strtod_l+0x5ec>
 8013a38:	236a      	movs	r3, #106	; 0x6a
 8013a3a:	9306      	str	r3, [sp, #24]
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	0030      	movs	r0, r6
 8013a40:	0039      	movs	r1, r7
 8013a42:	001d      	movs	r5, r3
 8013a44:	2c00      	cmp	r4, #0
 8013a46:	dd00      	ble.n	8013a4a <_strtod_l+0x5fa>
 8013a48:	e10e      	b.n	8013c68 <_strtod_l+0x818>
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <_strtod_l+0x602>
 8013a4e:	0006      	movs	r6, r0
 8013a50:	000f      	movs	r7, r1
 8013a52:	9b06      	ldr	r3, [sp, #24]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d00f      	beq.n	8013a78 <_strtod_l+0x628>
 8013a58:	236b      	movs	r3, #107	; 0x6b
 8013a5a:	0079      	lsls	r1, r7, #1
 8013a5c:	0d49      	lsrs	r1, r1, #21
 8013a5e:	003a      	movs	r2, r7
 8013a60:	1a5b      	subs	r3, r3, r1
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	dd08      	ble.n	8013a78 <_strtod_l+0x628>
 8013a66:	2b1f      	cmp	r3, #31
 8013a68:	dc00      	bgt.n	8013a6c <_strtod_l+0x61c>
 8013a6a:	e112      	b.n	8013c92 <_strtod_l+0x842>
 8013a6c:	2600      	movs	r6, #0
 8013a6e:	2b34      	cmp	r3, #52	; 0x34
 8013a70:	dc00      	bgt.n	8013a74 <_strtod_l+0x624>
 8013a72:	e107      	b.n	8013c84 <_strtod_l+0x834>
 8013a74:	27dc      	movs	r7, #220	; 0xdc
 8013a76:	04bf      	lsls	r7, r7, #18
 8013a78:	2200      	movs	r2, #0
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	0030      	movs	r0, r6
 8013a7e:	0039      	movs	r1, r7
 8013a80:	f7ec fcec 	bl	800045c <__aeabi_dcmpeq>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d1aa      	bne.n	80139de <_strtod_l+0x58e>
 8013a88:	9b08      	ldr	r3, [sp, #32]
 8013a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013a90:	9b05      	ldr	r3, [sp, #20]
 8013a92:	9804      	ldr	r0, [sp, #16]
 8013a94:	f003 f9ae 	bl	8016df4 <__s2b>
 8013a98:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	d100      	bne.n	8013aa0 <_strtod_l+0x650>
 8013a9e:	e709      	b.n	80138b4 <_strtod_l+0x464>
 8013aa0:	9b07      	ldr	r3, [sp, #28]
 8013aa2:	9a07      	ldr	r2, [sp, #28]
 8013aa4:	17db      	asrs	r3, r3, #31
 8013aa6:	4252      	negs	r2, r2
 8013aa8:	4013      	ands	r3, r2
 8013aaa:	9315      	str	r3, [sp, #84]	; 0x54
 8013aac:	9b07      	ldr	r3, [sp, #28]
 8013aae:	2400      	movs	r4, #0
 8013ab0:	43db      	mvns	r3, r3
 8013ab2:	9a07      	ldr	r2, [sp, #28]
 8013ab4:	17db      	asrs	r3, r3, #31
 8013ab6:	401a      	ands	r2, r3
 8013ab8:	921c      	str	r2, [sp, #112]	; 0x70
 8013aba:	9405      	str	r4, [sp, #20]
 8013abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013abe:	9804      	ldr	r0, [sp, #16]
 8013ac0:	6859      	ldr	r1, [r3, #4]
 8013ac2:	f003 f927 	bl	8016d14 <_Balloc>
 8013ac6:	900a      	str	r0, [sp, #40]	; 0x28
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d100      	bne.n	8013ace <_strtod_l+0x67e>
 8013acc:	e6f6      	b.n	80138bc <_strtod_l+0x46c>
 8013ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ad2:	691b      	ldr	r3, [r3, #16]
 8013ad4:	310c      	adds	r1, #12
 8013ad6:	1c9a      	adds	r2, r3, #2
 8013ad8:	0092      	lsls	r2, r2, #2
 8013ada:	300c      	adds	r0, #12
 8013adc:	9308      	str	r3, [sp, #32]
 8013ade:	f7ff fa32 	bl	8012f46 <memcpy>
 8013ae2:	ab24      	add	r3, sp, #144	; 0x90
 8013ae4:	9301      	str	r3, [sp, #4]
 8013ae6:	ab23      	add	r3, sp, #140	; 0x8c
 8013ae8:	9300      	str	r3, [sp, #0]
 8013aea:	0032      	movs	r2, r6
 8013aec:	003b      	movs	r3, r7
 8013aee:	9804      	ldr	r0, [sp, #16]
 8013af0:	960e      	str	r6, [sp, #56]	; 0x38
 8013af2:	970f      	str	r7, [sp, #60]	; 0x3c
 8013af4:	f003 fc22 	bl	801733c <__d2b>
 8013af8:	9022      	str	r0, [sp, #136]	; 0x88
 8013afa:	2800      	cmp	r0, #0
 8013afc:	d100      	bne.n	8013b00 <_strtod_l+0x6b0>
 8013afe:	e6dd      	b.n	80138bc <_strtod_l+0x46c>
 8013b00:	2101      	movs	r1, #1
 8013b02:	9804      	ldr	r0, [sp, #16]
 8013b04:	f003 f9fd 	bl	8016f02 <__i2b>
 8013b08:	9005      	str	r0, [sp, #20]
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	d100      	bne.n	8013b10 <_strtod_l+0x6c0>
 8013b0e:	e6d5      	b.n	80138bc <_strtod_l+0x46c>
 8013b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	da00      	bge.n	8013b18 <_strtod_l+0x6c8>
 8013b16:	e0c1      	b.n	8013c9c <_strtod_l+0x84c>
 8013b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b1a:	189d      	adds	r5, r3, r2
 8013b1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b1e:	4694      	mov	ip, r2
 8013b20:	9906      	ldr	r1, [sp, #24]
 8013b22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013b24:	1a5b      	subs	r3, r3, r1
 8013b26:	2136      	movs	r1, #54	; 0x36
 8013b28:	189b      	adds	r3, r3, r2
 8013b2a:	1a8a      	subs	r2, r1, r2
 8013b2c:	49b2      	ldr	r1, [pc, #712]	; (8013df8 <_strtod_l+0x9a8>)
 8013b2e:	3b01      	subs	r3, #1
 8013b30:	2001      	movs	r0, #1
 8013b32:	428b      	cmp	r3, r1
 8013b34:	db00      	blt.n	8013b38 <_strtod_l+0x6e8>
 8013b36:	e0bd      	b.n	8013cb4 <_strtod_l+0x864>
 8013b38:	1ac9      	subs	r1, r1, r3
 8013b3a:	1a52      	subs	r2, r2, r1
 8013b3c:	291f      	cmp	r1, #31
 8013b3e:	dd00      	ble.n	8013b42 <_strtod_l+0x6f2>
 8013b40:	e0b1      	b.n	8013ca6 <_strtod_l+0x856>
 8013b42:	4088      	lsls	r0, r1
 8013b44:	2300      	movs	r3, #0
 8013b46:	9014      	str	r0, [sp, #80]	; 0x50
 8013b48:	9310      	str	r3, [sp, #64]	; 0x40
 8013b4a:	18ab      	adds	r3, r5, r2
 8013b4c:	9308      	str	r3, [sp, #32]
 8013b4e:	0013      	movs	r3, r2
 8013b50:	9a06      	ldr	r2, [sp, #24]
 8013b52:	4463      	add	r3, ip
 8013b54:	18d3      	adds	r3, r2, r3
 8013b56:	9a08      	ldr	r2, [sp, #32]
 8013b58:	930c      	str	r3, [sp, #48]	; 0x30
 8013b5a:	002b      	movs	r3, r5
 8013b5c:	4295      	cmp	r5, r2
 8013b5e:	dd00      	ble.n	8013b62 <_strtod_l+0x712>
 8013b60:	0013      	movs	r3, r2
 8013b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b64:	4293      	cmp	r3, r2
 8013b66:	dd00      	ble.n	8013b6a <_strtod_l+0x71a>
 8013b68:	0013      	movs	r3, r2
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	dd06      	ble.n	8013b7c <_strtod_l+0x72c>
 8013b6e:	9a08      	ldr	r2, [sp, #32]
 8013b70:	1aed      	subs	r5, r5, r3
 8013b72:	1ad2      	subs	r2, r2, r3
 8013b74:	9208      	str	r2, [sp, #32]
 8013b76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b78:	1ad2      	subs	r2, r2, r3
 8013b7a:	920c      	str	r2, [sp, #48]	; 0x30
 8013b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d017      	beq.n	8013bb2 <_strtod_l+0x762>
 8013b82:	001a      	movs	r2, r3
 8013b84:	9905      	ldr	r1, [sp, #20]
 8013b86:	9804      	ldr	r0, [sp, #16]
 8013b88:	f003 fa54 	bl	8017034 <__pow5mult>
 8013b8c:	9005      	str	r0, [sp, #20]
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	d100      	bne.n	8013b94 <_strtod_l+0x744>
 8013b92:	e693      	b.n	80138bc <_strtod_l+0x46c>
 8013b94:	0001      	movs	r1, r0
 8013b96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013b98:	9804      	ldr	r0, [sp, #16]
 8013b9a:	f003 f9bb 	bl	8016f14 <__multiply>
 8013b9e:	9012      	str	r0, [sp, #72]	; 0x48
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d100      	bne.n	8013ba6 <_strtod_l+0x756>
 8013ba4:	e68a      	b.n	80138bc <_strtod_l+0x46c>
 8013ba6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013ba8:	9804      	ldr	r0, [sp, #16]
 8013baa:	f003 f8db 	bl	8016d64 <_Bfree>
 8013bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bb0:	9322      	str	r3, [sp, #136]	; 0x88
 8013bb2:	9b08      	ldr	r3, [sp, #32]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	dd00      	ble.n	8013bba <_strtod_l+0x76a>
 8013bb8:	e07f      	b.n	8013cba <_strtod_l+0x86a>
 8013bba:	9b07      	ldr	r3, [sp, #28]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	dd08      	ble.n	8013bd2 <_strtod_l+0x782>
 8013bc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013bc4:	9804      	ldr	r0, [sp, #16]
 8013bc6:	f003 fa35 	bl	8017034 <__pow5mult>
 8013bca:	900a      	str	r0, [sp, #40]	; 0x28
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	d100      	bne.n	8013bd2 <_strtod_l+0x782>
 8013bd0:	e674      	b.n	80138bc <_strtod_l+0x46c>
 8013bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	dd08      	ble.n	8013bea <_strtod_l+0x79a>
 8013bd8:	001a      	movs	r2, r3
 8013bda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013bdc:	9804      	ldr	r0, [sp, #16]
 8013bde:	f003 fa6b 	bl	80170b8 <__lshift>
 8013be2:	900a      	str	r0, [sp, #40]	; 0x28
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d100      	bne.n	8013bea <_strtod_l+0x79a>
 8013be8:	e668      	b.n	80138bc <_strtod_l+0x46c>
 8013bea:	2d00      	cmp	r5, #0
 8013bec:	dd08      	ble.n	8013c00 <_strtod_l+0x7b0>
 8013bee:	002a      	movs	r2, r5
 8013bf0:	9905      	ldr	r1, [sp, #20]
 8013bf2:	9804      	ldr	r0, [sp, #16]
 8013bf4:	f003 fa60 	bl	80170b8 <__lshift>
 8013bf8:	9005      	str	r0, [sp, #20]
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d100      	bne.n	8013c00 <_strtod_l+0x7b0>
 8013bfe:	e65d      	b.n	80138bc <_strtod_l+0x46c>
 8013c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c04:	9804      	ldr	r0, [sp, #16]
 8013c06:	f003 fac3 	bl	8017190 <__mdiff>
 8013c0a:	1e04      	subs	r4, r0, #0
 8013c0c:	d100      	bne.n	8013c10 <_strtod_l+0x7c0>
 8013c0e:	e655      	b.n	80138bc <_strtod_l+0x46c>
 8013c10:	2500      	movs	r5, #0
 8013c12:	68c3      	ldr	r3, [r0, #12]
 8013c14:	9905      	ldr	r1, [sp, #20]
 8013c16:	60c5      	str	r5, [r0, #12]
 8013c18:	9312      	str	r3, [sp, #72]	; 0x48
 8013c1a:	f003 fa9f 	bl	801715c <__mcmp>
 8013c1e:	42a8      	cmp	r0, r5
 8013c20:	da55      	bge.n	8013cce <_strtod_l+0x87e>
 8013c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c24:	42ab      	cmp	r3, r5
 8013c26:	d11b      	bne.n	8013c60 <_strtod_l+0x810>
 8013c28:	42ae      	cmp	r6, r5
 8013c2a:	d119      	bne.n	8013c60 <_strtod_l+0x810>
 8013c2c:	033b      	lsls	r3, r7, #12
 8013c2e:	42ab      	cmp	r3, r5
 8013c30:	d116      	bne.n	8013c60 <_strtod_l+0x810>
 8013c32:	22d6      	movs	r2, #214	; 0xd6
 8013c34:	4b71      	ldr	r3, [pc, #452]	; (8013dfc <_strtod_l+0x9ac>)
 8013c36:	04d2      	lsls	r2, r2, #19
 8013c38:	403b      	ands	r3, r7
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d910      	bls.n	8013c60 <_strtod_l+0x810>
 8013c3e:	6963      	ldr	r3, [r4, #20]
 8013c40:	42ab      	cmp	r3, r5
 8013c42:	d102      	bne.n	8013c4a <_strtod_l+0x7fa>
 8013c44:	6923      	ldr	r3, [r4, #16]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	dd0a      	ble.n	8013c60 <_strtod_l+0x810>
 8013c4a:	0021      	movs	r1, r4
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	9804      	ldr	r0, [sp, #16]
 8013c50:	f003 fa32 	bl	80170b8 <__lshift>
 8013c54:	9905      	ldr	r1, [sp, #20]
 8013c56:	0004      	movs	r4, r0
 8013c58:	f003 fa80 	bl	801715c <__mcmp>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	dc6b      	bgt.n	8013d38 <_strtod_l+0x8e8>
 8013c60:	9b06      	ldr	r3, [sp, #24]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d178      	bne.n	8013d58 <_strtod_l+0x908>
 8013c66:	e632      	b.n	80138ce <_strtod_l+0x47e>
 8013c68:	2201      	movs	r2, #1
 8013c6a:	4214      	tst	r4, r2
 8013c6c:	d007      	beq.n	8013c7e <_strtod_l+0x82e>
 8013c6e:	4a64      	ldr	r2, [pc, #400]	; (8013e00 <_strtod_l+0x9b0>)
 8013c70:	00eb      	lsls	r3, r5, #3
 8013c72:	18d3      	adds	r3, r2, r3
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	f7ee f8dc 	bl	8001e34 <__aeabi_dmul>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	3501      	adds	r5, #1
 8013c80:	1064      	asrs	r4, r4, #1
 8013c82:	e6df      	b.n	8013a44 <_strtod_l+0x5f4>
 8013c84:	2101      	movs	r1, #1
 8013c86:	3b20      	subs	r3, #32
 8013c88:	4249      	negs	r1, r1
 8013c8a:	4099      	lsls	r1, r3
 8013c8c:	400a      	ands	r2, r1
 8013c8e:	0017      	movs	r7, r2
 8013c90:	e6f2      	b.n	8013a78 <_strtod_l+0x628>
 8013c92:	2201      	movs	r2, #1
 8013c94:	4252      	negs	r2, r2
 8013c96:	409a      	lsls	r2, r3
 8013c98:	4016      	ands	r6, r2
 8013c9a:	e6ed      	b.n	8013a78 <_strtod_l+0x628>
 8013c9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013ca0:	1ad2      	subs	r2, r2, r3
 8013ca2:	4694      	mov	ip, r2
 8013ca4:	e73c      	b.n	8013b20 <_strtod_l+0x6d0>
 8013ca6:	4957      	ldr	r1, [pc, #348]	; (8013e04 <_strtod_l+0x9b4>)
 8013ca8:	1acb      	subs	r3, r1, r3
 8013caa:	0001      	movs	r1, r0
 8013cac:	4099      	lsls	r1, r3
 8013cae:	9110      	str	r1, [sp, #64]	; 0x40
 8013cb0:	9014      	str	r0, [sp, #80]	; 0x50
 8013cb2:	e74a      	b.n	8013b4a <_strtod_l+0x6fa>
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8013cb8:	e7fa      	b.n	8013cb0 <_strtod_l+0x860>
 8013cba:	9a08      	ldr	r2, [sp, #32]
 8013cbc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013cbe:	9804      	ldr	r0, [sp, #16]
 8013cc0:	f003 f9fa 	bl	80170b8 <__lshift>
 8013cc4:	9022      	str	r0, [sp, #136]	; 0x88
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d000      	beq.n	8013ccc <_strtod_l+0x87c>
 8013cca:	e776      	b.n	8013bba <_strtod_l+0x76a>
 8013ccc:	e5f6      	b.n	80138bc <_strtod_l+0x46c>
 8013cce:	970c      	str	r7, [sp, #48]	; 0x30
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d000      	beq.n	8013cd6 <_strtod_l+0x886>
 8013cd4:	e0a0      	b.n	8013e18 <_strtod_l+0x9c8>
 8013cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cd8:	033b      	lsls	r3, r7, #12
 8013cda:	0b1b      	lsrs	r3, r3, #12
 8013cdc:	2a00      	cmp	r2, #0
 8013cde:	d027      	beq.n	8013d30 <_strtod_l+0x8e0>
 8013ce0:	4a49      	ldr	r2, [pc, #292]	; (8013e08 <_strtod_l+0x9b8>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d157      	bne.n	8013d96 <_strtod_l+0x946>
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	9b06      	ldr	r3, [sp, #24]
 8013cea:	4252      	negs	r2, r2
 8013cec:	0031      	movs	r1, r6
 8013cee:	0010      	movs	r0, r2
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d00b      	beq.n	8013d0c <_strtod_l+0x8bc>
 8013cf4:	25d4      	movs	r5, #212	; 0xd4
 8013cf6:	4b41      	ldr	r3, [pc, #260]	; (8013dfc <_strtod_l+0x9ac>)
 8013cf8:	04ed      	lsls	r5, r5, #19
 8013cfa:	403b      	ands	r3, r7
 8013cfc:	0010      	movs	r0, r2
 8013cfe:	42ab      	cmp	r3, r5
 8013d00:	d804      	bhi.n	8013d0c <_strtod_l+0x8bc>
 8013d02:	306c      	adds	r0, #108	; 0x6c
 8013d04:	0d1b      	lsrs	r3, r3, #20
 8013d06:	1ac3      	subs	r3, r0, r3
 8013d08:	409a      	lsls	r2, r3
 8013d0a:	0010      	movs	r0, r2
 8013d0c:	4281      	cmp	r1, r0
 8013d0e:	d142      	bne.n	8013d96 <_strtod_l+0x946>
 8013d10:	4b3e      	ldr	r3, [pc, #248]	; (8013e0c <_strtod_l+0x9bc>)
 8013d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d102      	bne.n	8013d1e <_strtod_l+0x8ce>
 8013d18:	1c4b      	adds	r3, r1, #1
 8013d1a:	d100      	bne.n	8013d1e <_strtod_l+0x8ce>
 8013d1c:	e5ce      	b.n	80138bc <_strtod_l+0x46c>
 8013d1e:	4b37      	ldr	r3, [pc, #220]	; (8013dfc <_strtod_l+0x9ac>)
 8013d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d22:	2600      	movs	r6, #0
 8013d24:	401a      	ands	r2, r3
 8013d26:	0013      	movs	r3, r2
 8013d28:	2280      	movs	r2, #128	; 0x80
 8013d2a:	0352      	lsls	r2, r2, #13
 8013d2c:	189f      	adds	r7, r3, r2
 8013d2e:	e797      	b.n	8013c60 <_strtod_l+0x810>
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d130      	bne.n	8013d96 <_strtod_l+0x946>
 8013d34:	2e00      	cmp	r6, #0
 8013d36:	d12e      	bne.n	8013d96 <_strtod_l+0x946>
 8013d38:	9906      	ldr	r1, [sp, #24]
 8013d3a:	003b      	movs	r3, r7
 8013d3c:	4a2f      	ldr	r2, [pc, #188]	; (8013dfc <_strtod_l+0x9ac>)
 8013d3e:	2900      	cmp	r1, #0
 8013d40:	d020      	beq.n	8013d84 <_strtod_l+0x934>
 8013d42:	0011      	movs	r1, r2
 8013d44:	20d6      	movs	r0, #214	; 0xd6
 8013d46:	4039      	ands	r1, r7
 8013d48:	04c0      	lsls	r0, r0, #19
 8013d4a:	4281      	cmp	r1, r0
 8013d4c:	dc1a      	bgt.n	8013d84 <_strtod_l+0x934>
 8013d4e:	23dc      	movs	r3, #220	; 0xdc
 8013d50:	049b      	lsls	r3, r3, #18
 8013d52:	4299      	cmp	r1, r3
 8013d54:	dc00      	bgt.n	8013d58 <_strtod_l+0x908>
 8013d56:	e646      	b.n	80139e6 <_strtod_l+0x596>
 8013d58:	4b2d      	ldr	r3, [pc, #180]	; (8013e10 <_strtod_l+0x9c0>)
 8013d5a:	0030      	movs	r0, r6
 8013d5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d5e:	2300      	movs	r3, #0
 8013d60:	931a      	str	r3, [sp, #104]	; 0x68
 8013d62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d66:	0039      	movs	r1, r7
 8013d68:	f7ee f864 	bl	8001e34 <__aeabi_dmul>
 8013d6c:	0006      	movs	r6, r0
 8013d6e:	000f      	movs	r7, r1
 8013d70:	1e0b      	subs	r3, r1, #0
 8013d72:	d000      	beq.n	8013d76 <_strtod_l+0x926>
 8013d74:	e5ab      	b.n	80138ce <_strtod_l+0x47e>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d000      	beq.n	8013d7c <_strtod_l+0x92c>
 8013d7a:	e5a8      	b.n	80138ce <_strtod_l+0x47e>
 8013d7c:	9a04      	ldr	r2, [sp, #16]
 8013d7e:	3322      	adds	r3, #34	; 0x22
 8013d80:	6013      	str	r3, [r2, #0]
 8013d82:	e5a4      	b.n	80138ce <_strtod_l+0x47e>
 8013d84:	2601      	movs	r6, #1
 8013d86:	4013      	ands	r3, r2
 8013d88:	4a22      	ldr	r2, [pc, #136]	; (8013e14 <_strtod_l+0x9c4>)
 8013d8a:	4276      	negs	r6, r6
 8013d8c:	189b      	adds	r3, r3, r2
 8013d8e:	4a1e      	ldr	r2, [pc, #120]	; (8013e08 <_strtod_l+0x9b8>)
 8013d90:	431a      	orrs	r2, r3
 8013d92:	0017      	movs	r7, r2
 8013d94:	e764      	b.n	8013c60 <_strtod_l+0x810>
 8013d96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d015      	beq.n	8013dc8 <_strtod_l+0x978>
 8013d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013da0:	4213      	tst	r3, r2
 8013da2:	d100      	bne.n	8013da6 <_strtod_l+0x956>
 8013da4:	e75c      	b.n	8013c60 <_strtod_l+0x810>
 8013da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013da8:	9a06      	ldr	r2, [sp, #24]
 8013daa:	0030      	movs	r0, r6
 8013dac:	0039      	movs	r1, r7
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d00f      	beq.n	8013dd2 <_strtod_l+0x982>
 8013db2:	f7ff fb35 	bl	8013420 <sulp>
 8013db6:	0002      	movs	r2, r0
 8013db8:	000b      	movs	r3, r1
 8013dba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013dbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013dbe:	f7ed f913 	bl	8000fe8 <__aeabi_dadd>
 8013dc2:	0006      	movs	r6, r0
 8013dc4:	000f      	movs	r7, r1
 8013dc6:	e74b      	b.n	8013c60 <_strtod_l+0x810>
 8013dc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013dca:	4233      	tst	r3, r6
 8013dcc:	d100      	bne.n	8013dd0 <_strtod_l+0x980>
 8013dce:	e747      	b.n	8013c60 <_strtod_l+0x810>
 8013dd0:	e7e9      	b.n	8013da6 <_strtod_l+0x956>
 8013dd2:	f7ff fb25 	bl	8013420 <sulp>
 8013dd6:	0002      	movs	r2, r0
 8013dd8:	000b      	movs	r3, r1
 8013dda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013ddc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013dde:	f7ee fa9b 	bl	8002318 <__aeabi_dsub>
 8013de2:	2200      	movs	r2, #0
 8013de4:	2300      	movs	r3, #0
 8013de6:	0006      	movs	r6, r0
 8013de8:	000f      	movs	r7, r1
 8013dea:	f7ec fb37 	bl	800045c <__aeabi_dcmpeq>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d000      	beq.n	8013df4 <_strtod_l+0x9a4>
 8013df2:	e5f8      	b.n	80139e6 <_strtod_l+0x596>
 8013df4:	e734      	b.n	8013c60 <_strtod_l+0x810>
 8013df6:	46c0      	nop			; (mov r8, r8)
 8013df8:	fffffc02 	.word	0xfffffc02
 8013dfc:	7ff00000 	.word	0x7ff00000
 8013e00:	0801a8a0 	.word	0x0801a8a0
 8013e04:	fffffbe2 	.word	0xfffffbe2
 8013e08:	000fffff 	.word	0x000fffff
 8013e0c:	7fefffff 	.word	0x7fefffff
 8013e10:	39500000 	.word	0x39500000
 8013e14:	fff00000 	.word	0xfff00000
 8013e18:	9905      	ldr	r1, [sp, #20]
 8013e1a:	0020      	movs	r0, r4
 8013e1c:	f003 fae2 	bl	80173e4 <__ratio>
 8013e20:	2380      	movs	r3, #128	; 0x80
 8013e22:	2200      	movs	r2, #0
 8013e24:	05db      	lsls	r3, r3, #23
 8013e26:	9008      	str	r0, [sp, #32]
 8013e28:	9109      	str	r1, [sp, #36]	; 0x24
 8013e2a:	f7ec fb27 	bl	800047c <__aeabi_dcmple>
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	d100      	bne.n	8013e34 <_strtod_l+0x9e4>
 8013e32:	e07f      	b.n	8013f34 <_strtod_l+0xae4>
 8013e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d04b      	beq.n	8013ed2 <_strtod_l+0xa82>
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	4b8a      	ldr	r3, [pc, #552]	; (8014068 <_strtod_l+0xc18>)
 8013e3e:	9210      	str	r2, [sp, #64]	; 0x40
 8013e40:	9311      	str	r3, [sp, #68]	; 0x44
 8013e42:	4b89      	ldr	r3, [pc, #548]	; (8014068 <_strtod_l+0xc18>)
 8013e44:	9308      	str	r3, [sp, #32]
 8013e46:	4a89      	ldr	r2, [pc, #548]	; (801406c <_strtod_l+0xc1c>)
 8013e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e4a:	4013      	ands	r3, r2
 8013e4c:	9314      	str	r3, [sp, #80]	; 0x50
 8013e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e50:	4b87      	ldr	r3, [pc, #540]	; (8014070 <_strtod_l+0xc20>)
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d000      	beq.n	8013e58 <_strtod_l+0xa08>
 8013e56:	e0ba      	b.n	8013fce <_strtod_l+0xb7e>
 8013e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e5c:	921a      	str	r2, [sp, #104]	; 0x68
 8013e5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e60:	4a84      	ldr	r2, [pc, #528]	; (8014074 <_strtod_l+0xc24>)
 8013e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e64:	4694      	mov	ip, r2
 8013e66:	4463      	add	r3, ip
 8013e68:	001f      	movs	r7, r3
 8013e6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e6e:	0030      	movs	r0, r6
 8013e70:	0039      	movs	r1, r7
 8013e72:	920c      	str	r2, [sp, #48]	; 0x30
 8013e74:	930d      	str	r3, [sp, #52]	; 0x34
 8013e76:	f003 f9ef 	bl	8017258 <__ulp>
 8013e7a:	0002      	movs	r2, r0
 8013e7c:	000b      	movs	r3, r1
 8013e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013e80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e82:	f7ed ffd7 	bl	8001e34 <__aeabi_dmul>
 8013e86:	0032      	movs	r2, r6
 8013e88:	003b      	movs	r3, r7
 8013e8a:	f7ed f8ad 	bl	8000fe8 <__aeabi_dadd>
 8013e8e:	4a77      	ldr	r2, [pc, #476]	; (801406c <_strtod_l+0xc1c>)
 8013e90:	4b79      	ldr	r3, [pc, #484]	; (8014078 <_strtod_l+0xc28>)
 8013e92:	0006      	movs	r6, r0
 8013e94:	400a      	ands	r2, r1
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d964      	bls.n	8013f64 <_strtod_l+0xb14>
 8013e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e9c:	4a77      	ldr	r2, [pc, #476]	; (801407c <_strtod_l+0xc2c>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d103      	bne.n	8013eaa <_strtod_l+0xa5a>
 8013ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	d100      	bne.n	8013eaa <_strtod_l+0xa5a>
 8013ea8:	e508      	b.n	80138bc <_strtod_l+0x46c>
 8013eaa:	2601      	movs	r6, #1
 8013eac:	4f73      	ldr	r7, [pc, #460]	; (801407c <_strtod_l+0xc2c>)
 8013eae:	4276      	negs	r6, r6
 8013eb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013eb2:	9804      	ldr	r0, [sp, #16]
 8013eb4:	f002 ff56 	bl	8016d64 <_Bfree>
 8013eb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013eba:	9804      	ldr	r0, [sp, #16]
 8013ebc:	f002 ff52 	bl	8016d64 <_Bfree>
 8013ec0:	9905      	ldr	r1, [sp, #20]
 8013ec2:	9804      	ldr	r0, [sp, #16]
 8013ec4:	f002 ff4e 	bl	8016d64 <_Bfree>
 8013ec8:	0021      	movs	r1, r4
 8013eca:	9804      	ldr	r0, [sp, #16]
 8013ecc:	f002 ff4a 	bl	8016d64 <_Bfree>
 8013ed0:	e5f4      	b.n	8013abc <_strtod_l+0x66c>
 8013ed2:	2e00      	cmp	r6, #0
 8013ed4:	d11e      	bne.n	8013f14 <_strtod_l+0xac4>
 8013ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ed8:	031b      	lsls	r3, r3, #12
 8013eda:	d121      	bne.n	8013f20 <_strtod_l+0xad0>
 8013edc:	9808      	ldr	r0, [sp, #32]
 8013ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	4b61      	ldr	r3, [pc, #388]	; (8014068 <_strtod_l+0xc18>)
 8013ee4:	f7ec fac0 	bl	8000468 <__aeabi_dcmplt>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d11f      	bne.n	8013f2c <_strtod_l+0xadc>
 8013eec:	9808      	ldr	r0, [sp, #32]
 8013eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	4b63      	ldr	r3, [pc, #396]	; (8014080 <_strtod_l+0xc30>)
 8013ef4:	f7ed ff9e 	bl	8001e34 <__aeabi_dmul>
 8013ef8:	0005      	movs	r5, r0
 8013efa:	9108      	str	r1, [sp, #32]
 8013efc:	2280      	movs	r2, #128	; 0x80
 8013efe:	0612      	lsls	r2, r2, #24
 8013f00:	4694      	mov	ip, r2
 8013f02:	9b08      	ldr	r3, [sp, #32]
 8013f04:	951e      	str	r5, [sp, #120]	; 0x78
 8013f06:	4463      	add	r3, ip
 8013f08:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f0e:	9210      	str	r2, [sp, #64]	; 0x40
 8013f10:	9311      	str	r3, [sp, #68]	; 0x44
 8013f12:	e798      	b.n	8013e46 <_strtod_l+0x9f6>
 8013f14:	2e01      	cmp	r6, #1
 8013f16:	d103      	bne.n	8013f20 <_strtod_l+0xad0>
 8013f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d100      	bne.n	8013f20 <_strtod_l+0xad0>
 8013f1e:	e562      	b.n	80139e6 <_strtod_l+0x596>
 8013f20:	2200      	movs	r2, #0
 8013f22:	4b58      	ldr	r3, [pc, #352]	; (8014084 <_strtod_l+0xc34>)
 8013f24:	2500      	movs	r5, #0
 8013f26:	9210      	str	r2, [sp, #64]	; 0x40
 8013f28:	9311      	str	r3, [sp, #68]	; 0x44
 8013f2a:	e78a      	b.n	8013e42 <_strtod_l+0x9f2>
 8013f2c:	4b54      	ldr	r3, [pc, #336]	; (8014080 <_strtod_l+0xc30>)
 8013f2e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013f30:	9308      	str	r3, [sp, #32]
 8013f32:	e7e3      	b.n	8013efc <_strtod_l+0xaac>
 8013f34:	4b52      	ldr	r3, [pc, #328]	; (8014080 <_strtod_l+0xc30>)
 8013f36:	9808      	ldr	r0, [sp, #32]
 8013f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f7ed ff7a 	bl	8001e34 <__aeabi_dmul>
 8013f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f42:	0005      	movs	r5, r0
 8013f44:	9108      	str	r1, [sp, #32]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d107      	bne.n	8013f5a <_strtod_l+0xb0a>
 8013f4a:	2380      	movs	r3, #128	; 0x80
 8013f4c:	061b      	lsls	r3, r3, #24
 8013f4e:	18cb      	adds	r3, r1, r3
 8013f50:	9016      	str	r0, [sp, #88]	; 0x58
 8013f52:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f58:	e7d9      	b.n	8013f0e <_strtod_l+0xabe>
 8013f5a:	0002      	movs	r2, r0
 8013f5c:	9b08      	ldr	r3, [sp, #32]
 8013f5e:	9216      	str	r2, [sp, #88]	; 0x58
 8013f60:	9317      	str	r3, [sp, #92]	; 0x5c
 8013f62:	e7f7      	b.n	8013f54 <_strtod_l+0xb04>
 8013f64:	23d4      	movs	r3, #212	; 0xd4
 8013f66:	049b      	lsls	r3, r3, #18
 8013f68:	18cf      	adds	r7, r1, r3
 8013f6a:	9b06      	ldr	r3, [sp, #24]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d19f      	bne.n	8013eb0 <_strtod_l+0xa60>
 8013f70:	4b3e      	ldr	r3, [pc, #248]	; (801406c <_strtod_l+0xc1c>)
 8013f72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f74:	970c      	str	r7, [sp, #48]	; 0x30
 8013f76:	403b      	ands	r3, r7
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d199      	bne.n	8013eb0 <_strtod_l+0xa60>
 8013f7c:	9908      	ldr	r1, [sp, #32]
 8013f7e:	0028      	movs	r0, r5
 8013f80:	f7ee fd2e 	bl	80029e0 <__aeabi_d2iz>
 8013f84:	f7ee fd62 	bl	8002a4c <__aeabi_i2d>
 8013f88:	000b      	movs	r3, r1
 8013f8a:	0002      	movs	r2, r0
 8013f8c:	9908      	ldr	r1, [sp, #32]
 8013f8e:	0028      	movs	r0, r5
 8013f90:	f7ee f9c2 	bl	8002318 <__aeabi_dsub>
 8013f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f96:	9008      	str	r0, [sp, #32]
 8013f98:	9109      	str	r1, [sp, #36]	; 0x24
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d104      	bne.n	8013fa8 <_strtod_l+0xb58>
 8013f9e:	2e00      	cmp	r6, #0
 8013fa0:	d102      	bne.n	8013fa8 <_strtod_l+0xb58>
 8013fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fa4:	031b      	lsls	r3, r3, #12
 8013fa6:	d058      	beq.n	801405a <_strtod_l+0xc0a>
 8013fa8:	9808      	ldr	r0, [sp, #32]
 8013faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fac:	4a36      	ldr	r2, [pc, #216]	; (8014088 <_strtod_l+0xc38>)
 8013fae:	4b37      	ldr	r3, [pc, #220]	; (801408c <_strtod_l+0xc3c>)
 8013fb0:	f7ec fa5a 	bl	8000468 <__aeabi_dcmplt>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d000      	beq.n	8013fba <_strtod_l+0xb6a>
 8013fb8:	e489      	b.n	80138ce <_strtod_l+0x47e>
 8013fba:	9808      	ldr	r0, [sp, #32]
 8013fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fbe:	4a34      	ldr	r2, [pc, #208]	; (8014090 <_strtod_l+0xc40>)
 8013fc0:	4b2f      	ldr	r3, [pc, #188]	; (8014080 <_strtod_l+0xc30>)
 8013fc2:	f7ec fa65 	bl	8000490 <__aeabi_dcmpgt>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d100      	bne.n	8013fcc <_strtod_l+0xb7c>
 8013fca:	e771      	b.n	8013eb0 <_strtod_l+0xa60>
 8013fcc:	e47f      	b.n	80138ce <_strtod_l+0x47e>
 8013fce:	9b06      	ldr	r3, [sp, #24]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d02a      	beq.n	801402a <_strtod_l+0xbda>
 8013fd4:	23d4      	movs	r3, #212	; 0xd4
 8013fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fd8:	04db      	lsls	r3, r3, #19
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d825      	bhi.n	801402a <_strtod_l+0xbda>
 8013fde:	4a2d      	ldr	r2, [pc, #180]	; (8014094 <_strtod_l+0xc44>)
 8013fe0:	4b2d      	ldr	r3, [pc, #180]	; (8014098 <_strtod_l+0xc48>)
 8013fe2:	0028      	movs	r0, r5
 8013fe4:	9908      	ldr	r1, [sp, #32]
 8013fe6:	f7ec fa49 	bl	800047c <__aeabi_dcmple>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d016      	beq.n	801401c <_strtod_l+0xbcc>
 8013fee:	0028      	movs	r0, r5
 8013ff0:	9908      	ldr	r1, [sp, #32]
 8013ff2:	f7ec fafd 	bl	80005f0 <__aeabi_d2uiz>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d100      	bne.n	8013ffc <_strtod_l+0xbac>
 8013ffa:	3001      	adds	r0, #1
 8013ffc:	f7ee fd60 	bl	8002ac0 <__aeabi_ui2d>
 8014000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014002:	0005      	movs	r5, r0
 8014004:	9108      	str	r1, [sp, #32]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d122      	bne.n	8014050 <_strtod_l+0xc00>
 801400a:	2380      	movs	r3, #128	; 0x80
 801400c:	061b      	lsls	r3, r3, #24
 801400e:	18cb      	adds	r3, r1, r3
 8014010:	9018      	str	r0, [sp, #96]	; 0x60
 8014012:	9319      	str	r3, [sp, #100]	; 0x64
 8014014:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014016:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014018:	9210      	str	r2, [sp, #64]	; 0x40
 801401a:	9311      	str	r3, [sp, #68]	; 0x44
 801401c:	22d6      	movs	r2, #214	; 0xd6
 801401e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014020:	04d2      	lsls	r2, r2, #19
 8014022:	189b      	adds	r3, r3, r2
 8014024:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014026:	1a9b      	subs	r3, r3, r2
 8014028:	9311      	str	r3, [sp, #68]	; 0x44
 801402a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801402c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801402e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014030:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014032:	f003 f911 	bl	8017258 <__ulp>
 8014036:	0002      	movs	r2, r0
 8014038:	000b      	movs	r3, r1
 801403a:	0030      	movs	r0, r6
 801403c:	0039      	movs	r1, r7
 801403e:	f7ed fef9 	bl	8001e34 <__aeabi_dmul>
 8014042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014046:	f7ec ffcf 	bl	8000fe8 <__aeabi_dadd>
 801404a:	0006      	movs	r6, r0
 801404c:	000f      	movs	r7, r1
 801404e:	e78c      	b.n	8013f6a <_strtod_l+0xb1a>
 8014050:	0002      	movs	r2, r0
 8014052:	9b08      	ldr	r3, [sp, #32]
 8014054:	9218      	str	r2, [sp, #96]	; 0x60
 8014056:	9319      	str	r3, [sp, #100]	; 0x64
 8014058:	e7dc      	b.n	8014014 <_strtod_l+0xbc4>
 801405a:	4a0b      	ldr	r2, [pc, #44]	; (8014088 <_strtod_l+0xc38>)
 801405c:	4b0f      	ldr	r3, [pc, #60]	; (801409c <_strtod_l+0xc4c>)
 801405e:	9808      	ldr	r0, [sp, #32]
 8014060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014062:	f7ec fa01 	bl	8000468 <__aeabi_dcmplt>
 8014066:	e7ae      	b.n	8013fc6 <_strtod_l+0xb76>
 8014068:	3ff00000 	.word	0x3ff00000
 801406c:	7ff00000 	.word	0x7ff00000
 8014070:	7fe00000 	.word	0x7fe00000
 8014074:	fcb00000 	.word	0xfcb00000
 8014078:	7c9fffff 	.word	0x7c9fffff
 801407c:	7fefffff 	.word	0x7fefffff
 8014080:	3fe00000 	.word	0x3fe00000
 8014084:	bff00000 	.word	0xbff00000
 8014088:	94a03595 	.word	0x94a03595
 801408c:	3fdfffff 	.word	0x3fdfffff
 8014090:	35afe535 	.word	0x35afe535
 8014094:	ffc00000 	.word	0xffc00000
 8014098:	41dfffff 	.word	0x41dfffff
 801409c:	3fcfffff 	.word	0x3fcfffff

080140a0 <strtod>:
 80140a0:	4b06      	ldr	r3, [pc, #24]	; (80140bc <strtod+0x1c>)
 80140a2:	b510      	push	{r4, lr}
 80140a4:	0004      	movs	r4, r0
 80140a6:	6818      	ldr	r0, [r3, #0]
 80140a8:	000a      	movs	r2, r1
 80140aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d100      	bne.n	80140b2 <strtod+0x12>
 80140b0:	4b03      	ldr	r3, [pc, #12]	; (80140c0 <strtod+0x20>)
 80140b2:	0021      	movs	r1, r4
 80140b4:	f7ff f9cc 	bl	8013450 <_strtod_l>
 80140b8:	bd10      	pop	{r4, pc}
 80140ba:	46c0      	nop			; (mov r8, r8)
 80140bc:	200000d8 	.word	0x200000d8
 80140c0:	20000508 	.word	0x20000508

080140c4 <strtok>:
 80140c4:	4b03      	ldr	r3, [pc, #12]	; (80140d4 <strtok+0x10>)
 80140c6:	b510      	push	{r4, lr}
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	2301      	movs	r3, #1
 80140cc:	325c      	adds	r2, #92	; 0x5c
 80140ce:	f000 f803 	bl	80140d8 <__strtok_r>
 80140d2:	bd10      	pop	{r4, pc}
 80140d4:	200000d8 	.word	0x200000d8

080140d8 <__strtok_r>:
 80140d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140da:	2800      	cmp	r0, #0
 80140dc:	d104      	bne.n	80140e8 <__strtok_r+0x10>
 80140de:	6810      	ldr	r0, [r2, #0]
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d101      	bne.n	80140e8 <__strtok_r+0x10>
 80140e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140e6:	0020      	movs	r0, r4
 80140e8:	000e      	movs	r6, r1
 80140ea:	7805      	ldrb	r5, [r0, #0]
 80140ec:	1c44      	adds	r4, r0, #1
 80140ee:	7837      	ldrb	r7, [r6, #0]
 80140f0:	2f00      	cmp	r7, #0
 80140f2:	d104      	bne.n	80140fe <__strtok_r+0x26>
 80140f4:	2d00      	cmp	r5, #0
 80140f6:	d110      	bne.n	801411a <__strtok_r+0x42>
 80140f8:	6015      	str	r5, [r2, #0]
 80140fa:	0028      	movs	r0, r5
 80140fc:	e7f2      	b.n	80140e4 <__strtok_r+0xc>
 80140fe:	3601      	adds	r6, #1
 8014100:	42bd      	cmp	r5, r7
 8014102:	d1f4      	bne.n	80140ee <__strtok_r+0x16>
 8014104:	2b00      	cmp	r3, #0
 8014106:	d1ee      	bne.n	80140e6 <__strtok_r+0xe>
 8014108:	6014      	str	r4, [r2, #0]
 801410a:	7003      	strb	r3, [r0, #0]
 801410c:	e7ea      	b.n	80140e4 <__strtok_r+0xc>
 801410e:	0033      	movs	r3, r6
 8014110:	e00d      	b.n	801412e <__strtok_r+0x56>
 8014112:	3501      	adds	r5, #1
 8014114:	2f00      	cmp	r7, #0
 8014116:	d103      	bne.n	8014120 <__strtok_r+0x48>
 8014118:	001c      	movs	r4, r3
 801411a:	000d      	movs	r5, r1
 801411c:	7826      	ldrb	r6, [r4, #0]
 801411e:	1c63      	adds	r3, r4, #1
 8014120:	782f      	ldrb	r7, [r5, #0]
 8014122:	42be      	cmp	r6, r7
 8014124:	d1f5      	bne.n	8014112 <__strtok_r+0x3a>
 8014126:	2e00      	cmp	r6, #0
 8014128:	d0f1      	beq.n	801410e <__strtok_r+0x36>
 801412a:	2100      	movs	r1, #0
 801412c:	7021      	strb	r1, [r4, #0]
 801412e:	6013      	str	r3, [r2, #0]
 8014130:	e7d8      	b.n	80140e4 <__strtok_r+0xc>
	...

08014134 <_strtol_l.isra.0>:
 8014134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014136:	001f      	movs	r7, r3
 8014138:	000e      	movs	r6, r1
 801413a:	b087      	sub	sp, #28
 801413c:	9005      	str	r0, [sp, #20]
 801413e:	9101      	str	r1, [sp, #4]
 8014140:	9202      	str	r2, [sp, #8]
 8014142:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014144:	7834      	ldrb	r4, [r6, #0]
 8014146:	f7fe fc9f 	bl	8012a88 <__locale_ctype_ptr_l>
 801414a:	2208      	movs	r2, #8
 801414c:	1900      	adds	r0, r0, r4
 801414e:	7843      	ldrb	r3, [r0, #1]
 8014150:	1c75      	adds	r5, r6, #1
 8014152:	4013      	ands	r3, r2
 8014154:	d136      	bne.n	80141c4 <_strtol_l.isra.0+0x90>
 8014156:	2c2d      	cmp	r4, #45	; 0x2d
 8014158:	d136      	bne.n	80141c8 <_strtol_l.isra.0+0x94>
 801415a:	1cb5      	adds	r5, r6, #2
 801415c:	7874      	ldrb	r4, [r6, #1]
 801415e:	2601      	movs	r6, #1
 8014160:	2f00      	cmp	r7, #0
 8014162:	d062      	beq.n	801422a <_strtol_l.isra.0+0xf6>
 8014164:	2f10      	cmp	r7, #16
 8014166:	d109      	bne.n	801417c <_strtol_l.isra.0+0x48>
 8014168:	2c30      	cmp	r4, #48	; 0x30
 801416a:	d107      	bne.n	801417c <_strtol_l.isra.0+0x48>
 801416c:	2220      	movs	r2, #32
 801416e:	782b      	ldrb	r3, [r5, #0]
 8014170:	4393      	bics	r3, r2
 8014172:	2b58      	cmp	r3, #88	; 0x58
 8014174:	d154      	bne.n	8014220 <_strtol_l.isra.0+0xec>
 8014176:	2710      	movs	r7, #16
 8014178:	786c      	ldrb	r4, [r5, #1]
 801417a:	3502      	adds	r5, #2
 801417c:	4b2d      	ldr	r3, [pc, #180]	; (8014234 <_strtol_l.isra.0+0x100>)
 801417e:	0039      	movs	r1, r7
 8014180:	18f3      	adds	r3, r6, r3
 8014182:	0018      	movs	r0, r3
 8014184:	9303      	str	r3, [sp, #12]
 8014186:	f7ec f869 	bl	800025c <__aeabi_uidivmod>
 801418a:	9104      	str	r1, [sp, #16]
 801418c:	2101      	movs	r1, #1
 801418e:	2300      	movs	r3, #0
 8014190:	4249      	negs	r1, r1
 8014192:	0002      	movs	r2, r0
 8014194:	468c      	mov	ip, r1
 8014196:	0018      	movs	r0, r3
 8014198:	0021      	movs	r1, r4
 801419a:	3930      	subs	r1, #48	; 0x30
 801419c:	2909      	cmp	r1, #9
 801419e:	d81a      	bhi.n	80141d6 <_strtol_l.isra.0+0xa2>
 80141a0:	000c      	movs	r4, r1
 80141a2:	42a7      	cmp	r7, r4
 80141a4:	dd23      	ble.n	80141ee <_strtol_l.isra.0+0xba>
 80141a6:	1c59      	adds	r1, r3, #1
 80141a8:	d009      	beq.n	80141be <_strtol_l.isra.0+0x8a>
 80141aa:	4663      	mov	r3, ip
 80141ac:	4282      	cmp	r2, r0
 80141ae:	d306      	bcc.n	80141be <_strtol_l.isra.0+0x8a>
 80141b0:	d102      	bne.n	80141b8 <_strtol_l.isra.0+0x84>
 80141b2:	9904      	ldr	r1, [sp, #16]
 80141b4:	42a1      	cmp	r1, r4
 80141b6:	db02      	blt.n	80141be <_strtol_l.isra.0+0x8a>
 80141b8:	2301      	movs	r3, #1
 80141ba:	4378      	muls	r0, r7
 80141bc:	1820      	adds	r0, r4, r0
 80141be:	782c      	ldrb	r4, [r5, #0]
 80141c0:	3501      	adds	r5, #1
 80141c2:	e7e9      	b.n	8014198 <_strtol_l.isra.0+0x64>
 80141c4:	002e      	movs	r6, r5
 80141c6:	e7bc      	b.n	8014142 <_strtol_l.isra.0+0xe>
 80141c8:	2c2b      	cmp	r4, #43	; 0x2b
 80141ca:	d001      	beq.n	80141d0 <_strtol_l.isra.0+0x9c>
 80141cc:	001e      	movs	r6, r3
 80141ce:	e7c7      	b.n	8014160 <_strtol_l.isra.0+0x2c>
 80141d0:	1cb5      	adds	r5, r6, #2
 80141d2:	7874      	ldrb	r4, [r6, #1]
 80141d4:	e7fa      	b.n	80141cc <_strtol_l.isra.0+0x98>
 80141d6:	0021      	movs	r1, r4
 80141d8:	3941      	subs	r1, #65	; 0x41
 80141da:	2919      	cmp	r1, #25
 80141dc:	d801      	bhi.n	80141e2 <_strtol_l.isra.0+0xae>
 80141de:	3c37      	subs	r4, #55	; 0x37
 80141e0:	e7df      	b.n	80141a2 <_strtol_l.isra.0+0x6e>
 80141e2:	0021      	movs	r1, r4
 80141e4:	3961      	subs	r1, #97	; 0x61
 80141e6:	2919      	cmp	r1, #25
 80141e8:	d801      	bhi.n	80141ee <_strtol_l.isra.0+0xba>
 80141ea:	3c57      	subs	r4, #87	; 0x57
 80141ec:	e7d9      	b.n	80141a2 <_strtol_l.isra.0+0x6e>
 80141ee:	1c5a      	adds	r2, r3, #1
 80141f0:	d108      	bne.n	8014204 <_strtol_l.isra.0+0xd0>
 80141f2:	9a05      	ldr	r2, [sp, #20]
 80141f4:	3323      	adds	r3, #35	; 0x23
 80141f6:	6013      	str	r3, [r2, #0]
 80141f8:	9b02      	ldr	r3, [sp, #8]
 80141fa:	9803      	ldr	r0, [sp, #12]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d109      	bne.n	8014214 <_strtol_l.isra.0+0xe0>
 8014200:	b007      	add	sp, #28
 8014202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014204:	2e00      	cmp	r6, #0
 8014206:	d000      	beq.n	801420a <_strtol_l.isra.0+0xd6>
 8014208:	4240      	negs	r0, r0
 801420a:	9a02      	ldr	r2, [sp, #8]
 801420c:	2a00      	cmp	r2, #0
 801420e:	d0f7      	beq.n	8014200 <_strtol_l.isra.0+0xcc>
 8014210:	2b00      	cmp	r3, #0
 8014212:	d001      	beq.n	8014218 <_strtol_l.isra.0+0xe4>
 8014214:	1e6b      	subs	r3, r5, #1
 8014216:	9301      	str	r3, [sp, #4]
 8014218:	9b02      	ldr	r3, [sp, #8]
 801421a:	9a01      	ldr	r2, [sp, #4]
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	e7ef      	b.n	8014200 <_strtol_l.isra.0+0xcc>
 8014220:	2430      	movs	r4, #48	; 0x30
 8014222:	2f00      	cmp	r7, #0
 8014224:	d1aa      	bne.n	801417c <_strtol_l.isra.0+0x48>
 8014226:	2708      	movs	r7, #8
 8014228:	e7a8      	b.n	801417c <_strtol_l.isra.0+0x48>
 801422a:	2c30      	cmp	r4, #48	; 0x30
 801422c:	d09e      	beq.n	801416c <_strtol_l.isra.0+0x38>
 801422e:	270a      	movs	r7, #10
 8014230:	e7a4      	b.n	801417c <_strtol_l.isra.0+0x48>
 8014232:	46c0      	nop			; (mov r8, r8)
 8014234:	7fffffff 	.word	0x7fffffff

08014238 <strtol>:
 8014238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801423a:	0013      	movs	r3, r2
 801423c:	4a06      	ldr	r2, [pc, #24]	; (8014258 <strtol+0x20>)
 801423e:	0005      	movs	r5, r0
 8014240:	6810      	ldr	r0, [r2, #0]
 8014242:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014244:	2c00      	cmp	r4, #0
 8014246:	d100      	bne.n	801424a <strtol+0x12>
 8014248:	4c04      	ldr	r4, [pc, #16]	; (801425c <strtol+0x24>)
 801424a:	000a      	movs	r2, r1
 801424c:	9400      	str	r4, [sp, #0]
 801424e:	0029      	movs	r1, r5
 8014250:	f7ff ff70 	bl	8014134 <_strtol_l.isra.0>
 8014254:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8014256:	46c0      	nop			; (mov r8, r8)
 8014258:	200000d8 	.word	0x200000d8
 801425c:	20000508 	.word	0x20000508

08014260 <_svfprintf_r>:
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	b0d9      	sub	sp, #356	; 0x164
 8014264:	910b      	str	r1, [sp, #44]	; 0x2c
 8014266:	9209      	str	r2, [sp, #36]	; 0x24
 8014268:	001c      	movs	r4, r3
 801426a:	900a      	str	r0, [sp, #40]	; 0x28
 801426c:	f002 fd26 	bl	8016cbc <_localeconv_r>
 8014270:	6803      	ldr	r3, [r0, #0]
 8014272:	0018      	movs	r0, r3
 8014274:	931c      	str	r3, [sp, #112]	; 0x70
 8014276:	f7eb ff4f 	bl	8000118 <strlen>
 801427a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801427c:	9014      	str	r0, [sp, #80]	; 0x50
 801427e:	899b      	ldrh	r3, [r3, #12]
 8014280:	061b      	lsls	r3, r3, #24
 8014282:	d518      	bpl.n	80142b6 <_svfprintf_r+0x56>
 8014284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014286:	691b      	ldr	r3, [r3, #16]
 8014288:	9308      	str	r3, [sp, #32]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d113      	bne.n	80142b6 <_svfprintf_r+0x56>
 801428e:	2140      	movs	r1, #64	; 0x40
 8014290:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014292:	f7fe fc1f 	bl	8012ad4 <_malloc_r>
 8014296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014298:	6018      	str	r0, [r3, #0]
 801429a:	6118      	str	r0, [r3, #16]
 801429c:	2800      	cmp	r0, #0
 801429e:	d107      	bne.n	80142b0 <_svfprintf_r+0x50>
 80142a0:	230c      	movs	r3, #12
 80142a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142a4:	6013      	str	r3, [r2, #0]
 80142a6:	3b0d      	subs	r3, #13
 80142a8:	9315      	str	r3, [sp, #84]	; 0x54
 80142aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80142ac:	b059      	add	sp, #356	; 0x164
 80142ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142b0:	2340      	movs	r3, #64	; 0x40
 80142b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142b4:	6153      	str	r3, [r2, #20]
 80142b6:	2600      	movs	r6, #0
 80142b8:	af2f      	add	r7, sp, #188	; 0xbc
 80142ba:	972c      	str	r7, [sp, #176]	; 0xb0
 80142bc:	962e      	str	r6, [sp, #184]	; 0xb8
 80142be:	962d      	str	r6, [sp, #180]	; 0xb4
 80142c0:	960d      	str	r6, [sp, #52]	; 0x34
 80142c2:	961a      	str	r6, [sp, #104]	; 0x68
 80142c4:	9619      	str	r6, [sp, #100]	; 0x64
 80142c6:	961e      	str	r6, [sp, #120]	; 0x78
 80142c8:	961d      	str	r6, [sp, #116]	; 0x74
 80142ca:	9613      	str	r6, [sp, #76]	; 0x4c
 80142cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80142ce:	961f      	str	r6, [sp, #124]	; 0x7c
 80142d0:	9615      	str	r6, [sp, #84]	; 0x54
 80142d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80142d4:	782b      	ldrb	r3, [r5, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d002      	beq.n	80142e0 <_svfprintf_r+0x80>
 80142da:	2b25      	cmp	r3, #37	; 0x25
 80142dc:	d000      	beq.n	80142e0 <_svfprintf_r+0x80>
 80142de:	e095      	b.n	801440c <_svfprintf_r+0x1ac>
 80142e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142e2:	1aee      	subs	r6, r5, r3
 80142e4:	d017      	beq.n	8014316 <_svfprintf_r+0xb6>
 80142e6:	603b      	str	r3, [r7, #0]
 80142e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80142ea:	607e      	str	r6, [r7, #4]
 80142ec:	199b      	adds	r3, r3, r6
 80142ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80142f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80142f2:	3708      	adds	r7, #8
 80142f4:	9308      	str	r3, [sp, #32]
 80142f6:	3301      	adds	r3, #1
 80142f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80142fa:	2b07      	cmp	r3, #7
 80142fc:	dd08      	ble.n	8014310 <_svfprintf_r+0xb0>
 80142fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8014300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014302:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014304:	f003 f900 	bl	8017508 <__ssprint_r>
 8014308:	2800      	cmp	r0, #0
 801430a:	d000      	beq.n	801430e <_svfprintf_r+0xae>
 801430c:	e2d9      	b.n	80148c2 <_svfprintf_r+0x662>
 801430e:	af2f      	add	r7, sp, #188	; 0xbc
 8014310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014312:	199b      	adds	r3, r3, r6
 8014314:	9315      	str	r3, [sp, #84]	; 0x54
 8014316:	782b      	ldrb	r3, [r5, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <_svfprintf_r+0xc0>
 801431c:	f001 f9e5 	bl	80156ea <_svfprintf_r+0x148a>
 8014320:	1c6b      	adds	r3, r5, #1
 8014322:	221b      	movs	r2, #27
 8014324:	9311      	str	r3, [sp, #68]	; 0x44
 8014326:	2300      	movs	r3, #0
 8014328:	a91e      	add	r1, sp, #120	; 0x78
 801432a:	1852      	adds	r2, r2, r1
 801432c:	7013      	strb	r3, [r2, #0]
 801432e:	2201      	movs	r2, #1
 8014330:	001e      	movs	r6, r3
 8014332:	2520      	movs	r5, #32
 8014334:	4252      	negs	r2, r2
 8014336:	9208      	str	r2, [sp, #32]
 8014338:	9316      	str	r3, [sp, #88]	; 0x58
 801433a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	930e      	str	r3, [sp, #56]	; 0x38
 8014340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014342:	3301      	adds	r3, #1
 8014344:	9311      	str	r3, [sp, #68]	; 0x44
 8014346:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014348:	3820      	subs	r0, #32
 801434a:	285a      	cmp	r0, #90	; 0x5a
 801434c:	d901      	bls.n	8014352 <_svfprintf_r+0xf2>
 801434e:	f000 fe3d 	bl	8014fcc <_svfprintf_r+0xd6c>
 8014352:	f7eb fef3 	bl	800013c <__gnu_thumb1_case_shi>
 8014356:	009e      	.short	0x009e
 8014358:	063b063b 	.word	0x063b063b
 801435c:	063b00a7 	.word	0x063b00a7
 8014360:	063b063b 	.word	0x063b063b
 8014364:	063b0080 	.word	0x063b0080
 8014368:	00a9063b 	.word	0x00a9063b
 801436c:	063b00b3 	.word	0x063b00b3
 8014370:	00b900b1 	.word	0x00b900b1
 8014374:	00dd063b 	.word	0x00dd063b
 8014378:	00df00df 	.word	0x00df00df
 801437c:	00df00df 	.word	0x00df00df
 8014380:	00df00df 	.word	0x00df00df
 8014384:	00df00df 	.word	0x00df00df
 8014388:	063b00df 	.word	0x063b00df
 801438c:	063b063b 	.word	0x063b063b
 8014390:	063b063b 	.word	0x063b063b
 8014394:	063b063b 	.word	0x063b063b
 8014398:	063b0240 	.word	0x063b0240
 801439c:	01fd010a 	.word	0x01fd010a
 80143a0:	02400240 	.word	0x02400240
 80143a4:	063b0240 	.word	0x063b0240
 80143a8:	063b063b 	.word	0x063b063b
 80143ac:	00f1063b 	.word	0x00f1063b
 80143b0:	063b063b 	.word	0x063b063b
 80143b4:	063b04e2 	.word	0x063b04e2
 80143b8:	063b063b 	.word	0x063b063b
 80143bc:	063b0537 	.word	0x063b0537
 80143c0:	063b0557 	.word	0x063b0557
 80143c4:	005d063b 	.word	0x005d063b
 80143c8:	063b063b 	.word	0x063b063b
 80143cc:	063b063b 	.word	0x063b063b
 80143d0:	063b063b 	.word	0x063b063b
 80143d4:	063b063b 	.word	0x063b063b
 80143d8:	063b0240 	.word	0x063b0240
 80143dc:	01ff010a 	.word	0x01ff010a
 80143e0:	02400240 	.word	0x02400240
 80143e4:	00f30240 	.word	0x00f30240
 80143e8:	010601ff 	.word	0x010601ff
 80143ec:	00ff063b 	.word	0x00ff063b
 80143f0:	04c5063b 	.word	0x04c5063b
 80143f4:	052704e4 	.word	0x052704e4
 80143f8:	063b0106 	.word	0x063b0106
 80143fc:	fff20537 	.word	0xfff20537
 8014400:	063b0559 	.word	0x063b0559
 8014404:	0582063b 	.word	0x0582063b
 8014408:	fff2063b 	.word	0xfff2063b
 801440c:	3501      	adds	r5, #1
 801440e:	e761      	b.n	80142d4 <_svfprintf_r+0x74>
 8014410:	4bcb      	ldr	r3, [pc, #812]	; (8014740 <_svfprintf_r+0x4e0>)
 8014412:	2220      	movs	r2, #32
 8014414:	931e      	str	r3, [sp, #120]	; 0x78
 8014416:	4032      	ands	r2, r6
 8014418:	d101      	bne.n	801441e <_svfprintf_r+0x1be>
 801441a:	f000 fd21 	bl	8014e60 <_svfprintf_r+0xc00>
 801441e:	2307      	movs	r3, #7
 8014420:	3407      	adds	r4, #7
 8014422:	439c      	bics	r4, r3
 8014424:	0023      	movs	r3, r4
 8014426:	3308      	adds	r3, #8
 8014428:	9312      	str	r3, [sp, #72]	; 0x48
 801442a:	6823      	ldr	r3, [r4, #0]
 801442c:	6864      	ldr	r4, [r4, #4]
 801442e:	9306      	str	r3, [sp, #24]
 8014430:	9407      	str	r4, [sp, #28]
 8014432:	07f3      	lsls	r3, r6, #31
 8014434:	d50a      	bpl.n	801444c <_svfprintf_r+0x1ec>
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	9a07      	ldr	r2, [sp, #28]
 801443a:	4313      	orrs	r3, r2
 801443c:	d006      	beq.n	801444c <_svfprintf_r+0x1ec>
 801443e:	2230      	movs	r2, #48	; 0x30
 8014440:	ab25      	add	r3, sp, #148	; 0x94
 8014442:	701a      	strb	r2, [r3, #0]
 8014444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014446:	705a      	strb	r2, [r3, #1]
 8014448:	2302      	movs	r3, #2
 801444a:	431e      	orrs	r6, r3
 801444c:	4bbd      	ldr	r3, [pc, #756]	; (8014744 <_svfprintf_r+0x4e4>)
 801444e:	401e      	ands	r6, r3
 8014450:	2302      	movs	r3, #2
 8014452:	f000 fc74 	bl	8014d3e <_svfprintf_r+0xade>
 8014456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014458:	f002 fc30 	bl	8016cbc <_localeconv_r>
 801445c:	6843      	ldr	r3, [r0, #4]
 801445e:	0018      	movs	r0, r3
 8014460:	931f      	str	r3, [sp, #124]	; 0x7c
 8014462:	f7eb fe59 	bl	8000118 <strlen>
 8014466:	901b      	str	r0, [sp, #108]	; 0x6c
 8014468:	980a      	ldr	r0, [sp, #40]	; 0x28
 801446a:	f002 fc27 	bl	8016cbc <_localeconv_r>
 801446e:	6883      	ldr	r3, [r0, #8]
 8014470:	9313      	str	r3, [sp, #76]	; 0x4c
 8014472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014474:	2b00      	cmp	r3, #0
 8014476:	d100      	bne.n	801447a <_svfprintf_r+0x21a>
 8014478:	e75f      	b.n	801433a <_svfprintf_r+0xda>
 801447a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801447c:	2b00      	cmp	r3, #0
 801447e:	d100      	bne.n	8014482 <_svfprintf_r+0x222>
 8014480:	e75b      	b.n	801433a <_svfprintf_r+0xda>
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d100      	bne.n	801448a <_svfprintf_r+0x22a>
 8014488:	e757      	b.n	801433a <_svfprintf_r+0xda>
 801448a:	2380      	movs	r3, #128	; 0x80
 801448c:	00db      	lsls	r3, r3, #3
 801448e:	431e      	orrs	r6, r3
 8014490:	e753      	b.n	801433a <_svfprintf_r+0xda>
 8014492:	231b      	movs	r3, #27
 8014494:	aa1e      	add	r2, sp, #120	; 0x78
 8014496:	189b      	adds	r3, r3, r2
 8014498:	781a      	ldrb	r2, [r3, #0]
 801449a:	2a00      	cmp	r2, #0
 801449c:	d000      	beq.n	80144a0 <_svfprintf_r+0x240>
 801449e:	e74c      	b.n	801433a <_svfprintf_r+0xda>
 80144a0:	701d      	strb	r5, [r3, #0]
 80144a2:	e74a      	b.n	801433a <_svfprintf_r+0xda>
 80144a4:	2301      	movs	r3, #1
 80144a6:	e7f2      	b.n	801448e <_svfprintf_r+0x22e>
 80144a8:	6823      	ldr	r3, [r4, #0]
 80144aa:	3404      	adds	r4, #4
 80144ac:	9316      	str	r3, [sp, #88]	; 0x58
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	db00      	blt.n	80144b4 <_svfprintf_r+0x254>
 80144b2:	e742      	b.n	801433a <_svfprintf_r+0xda>
 80144b4:	425b      	negs	r3, r3
 80144b6:	9316      	str	r3, [sp, #88]	; 0x58
 80144b8:	2304      	movs	r3, #4
 80144ba:	e7e8      	b.n	801448e <_svfprintf_r+0x22e>
 80144bc:	231b      	movs	r3, #27
 80144be:	aa1e      	add	r2, sp, #120	; 0x78
 80144c0:	189b      	adds	r3, r3, r2
 80144c2:	222b      	movs	r2, #43	; 0x2b
 80144c4:	701a      	strb	r2, [r3, #0]
 80144c6:	e738      	b.n	801433a <_svfprintf_r+0xda>
 80144c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80144cc:	7812      	ldrb	r2, [r2, #0]
 80144ce:	3301      	adds	r3, #1
 80144d0:	920e      	str	r2, [sp, #56]	; 0x38
 80144d2:	2a2a      	cmp	r2, #42	; 0x2a
 80144d4:	d008      	beq.n	80144e8 <_svfprintf_r+0x288>
 80144d6:	2200      	movs	r2, #0
 80144d8:	9208      	str	r2, [sp, #32]
 80144da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80144dc:	001a      	movs	r2, r3
 80144de:	3930      	subs	r1, #48	; 0x30
 80144e0:	2909      	cmp	r1, #9
 80144e2:	d90c      	bls.n	80144fe <_svfprintf_r+0x29e>
 80144e4:	9211      	str	r2, [sp, #68]	; 0x44
 80144e6:	e72e      	b.n	8014346 <_svfprintf_r+0xe6>
 80144e8:	6821      	ldr	r1, [r4, #0]
 80144ea:	1d22      	adds	r2, r4, #4
 80144ec:	9108      	str	r1, [sp, #32]
 80144ee:	2900      	cmp	r1, #0
 80144f0:	da02      	bge.n	80144f8 <_svfprintf_r+0x298>
 80144f2:	2101      	movs	r1, #1
 80144f4:	4249      	negs	r1, r1
 80144f6:	9108      	str	r1, [sp, #32]
 80144f8:	0014      	movs	r4, r2
 80144fa:	9311      	str	r3, [sp, #68]	; 0x44
 80144fc:	e71d      	b.n	801433a <_svfprintf_r+0xda>
 80144fe:	200a      	movs	r0, #10
 8014500:	9a08      	ldr	r2, [sp, #32]
 8014502:	4342      	muls	r2, r0
 8014504:	1852      	adds	r2, r2, r1
 8014506:	9208      	str	r2, [sp, #32]
 8014508:	781a      	ldrb	r2, [r3, #0]
 801450a:	3301      	adds	r3, #1
 801450c:	920e      	str	r2, [sp, #56]	; 0x38
 801450e:	e7e4      	b.n	80144da <_svfprintf_r+0x27a>
 8014510:	2380      	movs	r3, #128	; 0x80
 8014512:	e7bc      	b.n	801448e <_svfprintf_r+0x22e>
 8014514:	2300      	movs	r3, #0
 8014516:	9316      	str	r3, [sp, #88]	; 0x58
 8014518:	220a      	movs	r2, #10
 801451a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801451c:	4353      	muls	r3, r2
 801451e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014520:	3a30      	subs	r2, #48	; 0x30
 8014522:	18d3      	adds	r3, r2, r3
 8014524:	9316      	str	r3, [sp, #88]	; 0x58
 8014526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	9211      	str	r2, [sp, #68]	; 0x44
 801452e:	930e      	str	r3, [sp, #56]	; 0x38
 8014530:	3b30      	subs	r3, #48	; 0x30
 8014532:	2b09      	cmp	r3, #9
 8014534:	d9f0      	bls.n	8014518 <_svfprintf_r+0x2b8>
 8014536:	e7d5      	b.n	80144e4 <_svfprintf_r+0x284>
 8014538:	2308      	movs	r3, #8
 801453a:	e7a8      	b.n	801448e <_svfprintf_r+0x22e>
 801453c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	2b68      	cmp	r3, #104	; 0x68
 8014542:	d105      	bne.n	8014550 <_svfprintf_r+0x2f0>
 8014544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014546:	3301      	adds	r3, #1
 8014548:	9311      	str	r3, [sp, #68]	; 0x44
 801454a:	2380      	movs	r3, #128	; 0x80
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	e79e      	b.n	801448e <_svfprintf_r+0x22e>
 8014550:	2340      	movs	r3, #64	; 0x40
 8014552:	e79c      	b.n	801448e <_svfprintf_r+0x22e>
 8014554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	2b6c      	cmp	r3, #108	; 0x6c
 801455a:	d104      	bne.n	8014566 <_svfprintf_r+0x306>
 801455c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801455e:	3301      	adds	r3, #1
 8014560:	9311      	str	r3, [sp, #68]	; 0x44
 8014562:	432e      	orrs	r6, r5
 8014564:	e6e9      	b.n	801433a <_svfprintf_r+0xda>
 8014566:	2310      	movs	r3, #16
 8014568:	e791      	b.n	801448e <_svfprintf_r+0x22e>
 801456a:	1d23      	adds	r3, r4, #4
 801456c:	6822      	ldr	r2, [r4, #0]
 801456e:	9312      	str	r3, [sp, #72]	; 0x48
 8014570:	ab3f      	add	r3, sp, #252	; 0xfc
 8014572:	701a      	strb	r2, [r3, #0]
 8014574:	221b      	movs	r2, #27
 8014576:	2000      	movs	r0, #0
 8014578:	a91e      	add	r1, sp, #120	; 0x78
 801457a:	1852      	adds	r2, r2, r1
 801457c:	7010      	strb	r0, [r2, #0]
 801457e:	2201      	movs	r2, #1
 8014580:	0005      	movs	r5, r0
 8014582:	900c      	str	r0, [sp, #48]	; 0x30
 8014584:	9208      	str	r2, [sp, #32]
 8014586:	9017      	str	r0, [sp, #92]	; 0x5c
 8014588:	9010      	str	r0, [sp, #64]	; 0x40
 801458a:	900f      	str	r0, [sp, #60]	; 0x3c
 801458c:	9309      	str	r3, [sp, #36]	; 0x24
 801458e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014590:	9a08      	ldr	r2, [sp, #32]
 8014592:	9318      	str	r3, [sp, #96]	; 0x60
 8014594:	4293      	cmp	r3, r2
 8014596:	da00      	bge.n	801459a <_svfprintf_r+0x33a>
 8014598:	9218      	str	r2, [sp, #96]	; 0x60
 801459a:	231b      	movs	r3, #27
 801459c:	aa1e      	add	r2, sp, #120	; 0x78
 801459e:	189b      	adds	r3, r3, r2
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	1e5a      	subs	r2, r3, #1
 80145a4:	4193      	sbcs	r3, r2
 80145a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145a8:	18d3      	adds	r3, r2, r3
 80145aa:	9318      	str	r3, [sp, #96]	; 0x60
 80145ac:	2302      	movs	r3, #2
 80145ae:	4033      	ands	r3, r6
 80145b0:	9320      	str	r3, [sp, #128]	; 0x80
 80145b2:	d002      	beq.n	80145ba <_svfprintf_r+0x35a>
 80145b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80145b6:	3302      	adds	r3, #2
 80145b8:	9318      	str	r3, [sp, #96]	; 0x60
 80145ba:	2384      	movs	r3, #132	; 0x84
 80145bc:	4033      	ands	r3, r6
 80145be:	9321      	str	r3, [sp, #132]	; 0x84
 80145c0:	d121      	bne.n	8014606 <_svfprintf_r+0x3a6>
 80145c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80145c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145c6:	1a9c      	subs	r4, r3, r2
 80145c8:	2c00      	cmp	r4, #0
 80145ca:	dd1c      	ble.n	8014606 <_svfprintf_r+0x3a6>
 80145cc:	0039      	movs	r1, r7
 80145ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145d0:	485d      	ldr	r0, [pc, #372]	; (8014748 <_svfprintf_r+0x4e8>)
 80145d2:	9322      	str	r3, [sp, #136]	; 0x88
 80145d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80145d6:	3301      	adds	r3, #1
 80145d8:	3108      	adds	r1, #8
 80145da:	6038      	str	r0, [r7, #0]
 80145dc:	2c10      	cmp	r4, #16
 80145de:	dd01      	ble.n	80145e4 <_svfprintf_r+0x384>
 80145e0:	f000 fd08 	bl	8014ff4 <_svfprintf_r+0xd94>
 80145e4:	607c      	str	r4, [r7, #4]
 80145e6:	18a4      	adds	r4, r4, r2
 80145e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80145ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80145ec:	000f      	movs	r7, r1
 80145ee:	2b07      	cmp	r3, #7
 80145f0:	dd09      	ble.n	8014606 <_svfprintf_r+0x3a6>
 80145f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80145f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145f8:	f002 ff86 	bl	8017508 <__ssprint_r>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d001      	beq.n	8014604 <_svfprintf_r+0x3a4>
 8014600:	f001 f852 	bl	80156a8 <_svfprintf_r+0x1448>
 8014604:	af2f      	add	r7, sp, #188	; 0xbc
 8014606:	231b      	movs	r3, #27
 8014608:	aa1e      	add	r2, sp, #120	; 0x78
 801460a:	189b      	adds	r3, r3, r2
 801460c:	781a      	ldrb	r2, [r3, #0]
 801460e:	2a00      	cmp	r2, #0
 8014610:	d017      	beq.n	8014642 <_svfprintf_r+0x3e2>
 8014612:	603b      	str	r3, [r7, #0]
 8014614:	2301      	movs	r3, #1
 8014616:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014618:	607b      	str	r3, [r7, #4]
 801461a:	0013      	movs	r3, r2
 801461c:	3301      	adds	r3, #1
 801461e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014622:	3708      	adds	r7, #8
 8014624:	9322      	str	r3, [sp, #136]	; 0x88
 8014626:	3301      	adds	r3, #1
 8014628:	932d      	str	r3, [sp, #180]	; 0xb4
 801462a:	2b07      	cmp	r3, #7
 801462c:	dd09      	ble.n	8014642 <_svfprintf_r+0x3e2>
 801462e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014634:	f002 ff68 	bl	8017508 <__ssprint_r>
 8014638:	2800      	cmp	r0, #0
 801463a:	d001      	beq.n	8014640 <_svfprintf_r+0x3e0>
 801463c:	f001 f834 	bl	80156a8 <_svfprintf_r+0x1448>
 8014640:	af2f      	add	r7, sp, #188	; 0xbc
 8014642:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014644:	2b00      	cmp	r3, #0
 8014646:	d019      	beq.n	801467c <_svfprintf_r+0x41c>
 8014648:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801464a:	9320      	str	r3, [sp, #128]	; 0x80
 801464c:	ab25      	add	r3, sp, #148	; 0x94
 801464e:	603b      	str	r3, [r7, #0]
 8014650:	2302      	movs	r3, #2
 8014652:	607b      	str	r3, [r7, #4]
 8014654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014656:	3708      	adds	r7, #8
 8014658:	3302      	adds	r3, #2
 801465a:	932e      	str	r3, [sp, #184]	; 0xb8
 801465c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801465e:	9320      	str	r3, [sp, #128]	; 0x80
 8014660:	3301      	adds	r3, #1
 8014662:	932d      	str	r3, [sp, #180]	; 0xb4
 8014664:	2b07      	cmp	r3, #7
 8014666:	dd09      	ble.n	801467c <_svfprintf_r+0x41c>
 8014668:	aa2c      	add	r2, sp, #176	; 0xb0
 801466a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801466c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801466e:	f002 ff4b 	bl	8017508 <__ssprint_r>
 8014672:	2800      	cmp	r0, #0
 8014674:	d001      	beq.n	801467a <_svfprintf_r+0x41a>
 8014676:	f001 f817 	bl	80156a8 <_svfprintf_r+0x1448>
 801467a:	af2f      	add	r7, sp, #188	; 0xbc
 801467c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801467e:	2b80      	cmp	r3, #128	; 0x80
 8014680:	d121      	bne.n	80146c6 <_svfprintf_r+0x466>
 8014682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014684:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014686:	1a9c      	subs	r4, r3, r2
 8014688:	2c00      	cmp	r4, #0
 801468a:	dd1c      	ble.n	80146c6 <_svfprintf_r+0x466>
 801468c:	0039      	movs	r1, r7
 801468e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014690:	482e      	ldr	r0, [pc, #184]	; (801474c <_svfprintf_r+0x4ec>)
 8014692:	9320      	str	r3, [sp, #128]	; 0x80
 8014694:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014696:	3301      	adds	r3, #1
 8014698:	3108      	adds	r1, #8
 801469a:	6038      	str	r0, [r7, #0]
 801469c:	2c10      	cmp	r4, #16
 801469e:	dd01      	ble.n	80146a4 <_svfprintf_r+0x444>
 80146a0:	f000 fcbc 	bl	801501c <_svfprintf_r+0xdbc>
 80146a4:	607c      	str	r4, [r7, #4]
 80146a6:	18a4      	adds	r4, r4, r2
 80146a8:	942e      	str	r4, [sp, #184]	; 0xb8
 80146aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80146ac:	000f      	movs	r7, r1
 80146ae:	2b07      	cmp	r3, #7
 80146b0:	dd09      	ble.n	80146c6 <_svfprintf_r+0x466>
 80146b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80146b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146b8:	f002 ff26 	bl	8017508 <__ssprint_r>
 80146bc:	2800      	cmp	r0, #0
 80146be:	d001      	beq.n	80146c4 <_svfprintf_r+0x464>
 80146c0:	f000 fff2 	bl	80156a8 <_svfprintf_r+0x1448>
 80146c4:	af2f      	add	r7, sp, #188	; 0xbc
 80146c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146c8:	9a08      	ldr	r2, [sp, #32]
 80146ca:	1a9c      	subs	r4, r3, r2
 80146cc:	2c00      	cmp	r4, #0
 80146ce:	dd1c      	ble.n	801470a <_svfprintf_r+0x4aa>
 80146d0:	0039      	movs	r1, r7
 80146d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146d4:	481d      	ldr	r0, [pc, #116]	; (801474c <_svfprintf_r+0x4ec>)
 80146d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80146d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146da:	3301      	adds	r3, #1
 80146dc:	3108      	adds	r1, #8
 80146de:	6038      	str	r0, [r7, #0]
 80146e0:	2c10      	cmp	r4, #16
 80146e2:	dd01      	ble.n	80146e8 <_svfprintf_r+0x488>
 80146e4:	f000 fcb4 	bl	8015050 <_svfprintf_r+0xdf0>
 80146e8:	18a2      	adds	r2, r4, r2
 80146ea:	607c      	str	r4, [r7, #4]
 80146ec:	922e      	str	r2, [sp, #184]	; 0xb8
 80146ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80146f0:	000f      	movs	r7, r1
 80146f2:	2b07      	cmp	r3, #7
 80146f4:	dd09      	ble.n	801470a <_svfprintf_r+0x4aa>
 80146f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80146f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146fc:	f002 ff04 	bl	8017508 <__ssprint_r>
 8014700:	2800      	cmp	r0, #0
 8014702:	d001      	beq.n	8014708 <_svfprintf_r+0x4a8>
 8014704:	f000 ffd0 	bl	80156a8 <_svfprintf_r+0x1448>
 8014708:	af2f      	add	r7, sp, #188	; 0xbc
 801470a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801470c:	9317      	str	r3, [sp, #92]	; 0x5c
 801470e:	05f3      	lsls	r3, r6, #23
 8014710:	d501      	bpl.n	8014716 <_svfprintf_r+0x4b6>
 8014712:	f000 fcb1 	bl	8015078 <_svfprintf_r+0xe18>
 8014716:	9a08      	ldr	r2, [sp, #32]
 8014718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801471a:	4694      	mov	ip, r2
 801471c:	603b      	str	r3, [r7, #0]
 801471e:	9b08      	ldr	r3, [sp, #32]
 8014720:	607b      	str	r3, [r7, #4]
 8014722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014724:	4463      	add	r3, ip
 8014726:	932e      	str	r3, [sp, #184]	; 0xb8
 8014728:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801472a:	9308      	str	r3, [sp, #32]
 801472c:	3301      	adds	r3, #1
 801472e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014730:	2b07      	cmp	r3, #7
 8014732:	dd01      	ble.n	8014738 <_svfprintf_r+0x4d8>
 8014734:	f000 fd94 	bl	8015260 <_svfprintf_r+0x1000>
 8014738:	3708      	adds	r7, #8
 801473a:	f000 fce4 	bl	8015106 <_svfprintf_r+0xea6>
 801473e:	46c0      	nop			; (mov r8, r8)
 8014740:	0801a8e9 	.word	0x0801a8e9
 8014744:	fffffbff 	.word	0xfffffbff
 8014748:	0801a8fc 	.word	0x0801a8fc
 801474c:	0801a90c 	.word	0x0801a90c
 8014750:	2310      	movs	r3, #16
 8014752:	431e      	orrs	r6, r3
 8014754:	06b3      	lsls	r3, r6, #26
 8014756:	d52c      	bpl.n	80147b2 <_svfprintf_r+0x552>
 8014758:	2307      	movs	r3, #7
 801475a:	3407      	adds	r4, #7
 801475c:	439c      	bics	r4, r3
 801475e:	0023      	movs	r3, r4
 8014760:	3308      	adds	r3, #8
 8014762:	9312      	str	r3, [sp, #72]	; 0x48
 8014764:	6823      	ldr	r3, [r4, #0]
 8014766:	6864      	ldr	r4, [r4, #4]
 8014768:	9306      	str	r3, [sp, #24]
 801476a:	9407      	str	r4, [sp, #28]
 801476c:	9b07      	ldr	r3, [sp, #28]
 801476e:	2b00      	cmp	r3, #0
 8014770:	da0b      	bge.n	801478a <_svfprintf_r+0x52a>
 8014772:	9906      	ldr	r1, [sp, #24]
 8014774:	9a07      	ldr	r2, [sp, #28]
 8014776:	2400      	movs	r4, #0
 8014778:	424b      	negs	r3, r1
 801477a:	4194      	sbcs	r4, r2
 801477c:	9306      	str	r3, [sp, #24]
 801477e:	9407      	str	r4, [sp, #28]
 8014780:	231b      	movs	r3, #27
 8014782:	aa1e      	add	r2, sp, #120	; 0x78
 8014784:	189b      	adds	r3, r3, r2
 8014786:	222d      	movs	r2, #45	; 0x2d
 8014788:	701a      	strb	r2, [r3, #0]
 801478a:	9b08      	ldr	r3, [sp, #32]
 801478c:	3301      	adds	r3, #1
 801478e:	d000      	beq.n	8014792 <_svfprintf_r+0x532>
 8014790:	e382      	b.n	8014e98 <_svfprintf_r+0xc38>
 8014792:	9b07      	ldr	r3, [sp, #28]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d000      	beq.n	801479a <_svfprintf_r+0x53a>
 8014798:	e3b0      	b.n	8014efc <_svfprintf_r+0xc9c>
 801479a:	9b06      	ldr	r3, [sp, #24]
 801479c:	2b09      	cmp	r3, #9
 801479e:	d900      	bls.n	80147a2 <_svfprintf_r+0x542>
 80147a0:	e3ac      	b.n	8014efc <_svfprintf_r+0xc9c>
 80147a2:	23e7      	movs	r3, #231	; 0xe7
 80147a4:	aa1e      	add	r2, sp, #120	; 0x78
 80147a6:	189b      	adds	r3, r3, r2
 80147a8:	9a06      	ldr	r2, [sp, #24]
 80147aa:	3230      	adds	r2, #48	; 0x30
 80147ac:	701a      	strb	r2, [r3, #0]
 80147ae:	9309      	str	r3, [sp, #36]	; 0x24
 80147b0:	e395      	b.n	8014ede <_svfprintf_r+0xc7e>
 80147b2:	1d23      	adds	r3, r4, #4
 80147b4:	9312      	str	r3, [sp, #72]	; 0x48
 80147b6:	06f3      	lsls	r3, r6, #27
 80147b8:	d504      	bpl.n	80147c4 <_svfprintf_r+0x564>
 80147ba:	6823      	ldr	r3, [r4, #0]
 80147bc:	9306      	str	r3, [sp, #24]
 80147be:	17db      	asrs	r3, r3, #31
 80147c0:	9307      	str	r3, [sp, #28]
 80147c2:	e7d3      	b.n	801476c <_svfprintf_r+0x50c>
 80147c4:	6823      	ldr	r3, [r4, #0]
 80147c6:	0672      	lsls	r2, r6, #25
 80147c8:	d501      	bpl.n	80147ce <_svfprintf_r+0x56e>
 80147ca:	b21b      	sxth	r3, r3
 80147cc:	e7f6      	b.n	80147bc <_svfprintf_r+0x55c>
 80147ce:	05b2      	lsls	r2, r6, #22
 80147d0:	d5f4      	bpl.n	80147bc <_svfprintf_r+0x55c>
 80147d2:	b25b      	sxtb	r3, r3
 80147d4:	e7f2      	b.n	80147bc <_svfprintf_r+0x55c>
 80147d6:	2307      	movs	r3, #7
 80147d8:	3407      	adds	r4, #7
 80147da:	439c      	bics	r4, r3
 80147dc:	0023      	movs	r3, r4
 80147de:	2201      	movs	r2, #1
 80147e0:	3308      	adds	r3, #8
 80147e2:	9312      	str	r3, [sp, #72]	; 0x48
 80147e4:	6823      	ldr	r3, [r4, #0]
 80147e6:	4252      	negs	r2, r2
 80147e8:	931a      	str	r3, [sp, #104]	; 0x68
 80147ea:	6863      	ldr	r3, [r4, #4]
 80147ec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80147ee:	005c      	lsls	r4, r3, #1
 80147f0:	0864      	lsrs	r4, r4, #1
 80147f2:	9319      	str	r3, [sp, #100]	; 0x64
 80147f4:	0028      	movs	r0, r5
 80147f6:	4bcf      	ldr	r3, [pc, #828]	; (8014b34 <_svfprintf_r+0x8d4>)
 80147f8:	0021      	movs	r1, r4
 80147fa:	f7ee f8d5 	bl	80029a8 <__aeabi_dcmpun>
 80147fe:	2800      	cmp	r0, #0
 8014800:	d125      	bne.n	801484e <_svfprintf_r+0x5ee>
 8014802:	2201      	movs	r2, #1
 8014804:	4bcb      	ldr	r3, [pc, #812]	; (8014b34 <_svfprintf_r+0x8d4>)
 8014806:	4252      	negs	r2, r2
 8014808:	0028      	movs	r0, r5
 801480a:	0021      	movs	r1, r4
 801480c:	f7eb fe36 	bl	800047c <__aeabi_dcmple>
 8014810:	2800      	cmp	r0, #0
 8014812:	d11c      	bne.n	801484e <_svfprintf_r+0x5ee>
 8014814:	2200      	movs	r2, #0
 8014816:	2300      	movs	r3, #0
 8014818:	981a      	ldr	r0, [sp, #104]	; 0x68
 801481a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801481c:	f7eb fe24 	bl	8000468 <__aeabi_dcmplt>
 8014820:	2800      	cmp	r0, #0
 8014822:	d004      	beq.n	801482e <_svfprintf_r+0x5ce>
 8014824:	231b      	movs	r3, #27
 8014826:	aa1e      	add	r2, sp, #120	; 0x78
 8014828:	189b      	adds	r3, r3, r2
 801482a:	222d      	movs	r2, #45	; 0x2d
 801482c:	701a      	strb	r2, [r3, #0]
 801482e:	4bc2      	ldr	r3, [pc, #776]	; (8014b38 <_svfprintf_r+0x8d8>)
 8014830:	9309      	str	r3, [sp, #36]	; 0x24
 8014832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014834:	2b47      	cmp	r3, #71	; 0x47
 8014836:	dc01      	bgt.n	801483c <_svfprintf_r+0x5dc>
 8014838:	4bc0      	ldr	r3, [pc, #768]	; (8014b3c <_svfprintf_r+0x8dc>)
 801483a:	9309      	str	r3, [sp, #36]	; 0x24
 801483c:	2380      	movs	r3, #128	; 0x80
 801483e:	439e      	bics	r6, r3
 8014840:	2300      	movs	r3, #0
 8014842:	930c      	str	r3, [sp, #48]	; 0x30
 8014844:	3303      	adds	r3, #3
 8014846:	9308      	str	r3, [sp, #32]
 8014848:	2300      	movs	r3, #0
 801484a:	9317      	str	r3, [sp, #92]	; 0x5c
 801484c:	e34f      	b.n	8014eee <_svfprintf_r+0xc8e>
 801484e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014852:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014854:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014856:	f7ee f8a7 	bl	80029a8 <__aeabi_dcmpun>
 801485a:	2800      	cmp	r0, #0
 801485c:	d00e      	beq.n	801487c <_svfprintf_r+0x61c>
 801485e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014860:	2b00      	cmp	r3, #0
 8014862:	da04      	bge.n	801486e <_svfprintf_r+0x60e>
 8014864:	231b      	movs	r3, #27
 8014866:	aa1e      	add	r2, sp, #120	; 0x78
 8014868:	189b      	adds	r3, r3, r2
 801486a:	222d      	movs	r2, #45	; 0x2d
 801486c:	701a      	strb	r2, [r3, #0]
 801486e:	4bb4      	ldr	r3, [pc, #720]	; (8014b40 <_svfprintf_r+0x8e0>)
 8014870:	9309      	str	r3, [sp, #36]	; 0x24
 8014872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014874:	2b47      	cmp	r3, #71	; 0x47
 8014876:	dce1      	bgt.n	801483c <_svfprintf_r+0x5dc>
 8014878:	4bb2      	ldr	r3, [pc, #712]	; (8014b44 <_svfprintf_r+0x8e4>)
 801487a:	e7de      	b.n	801483a <_svfprintf_r+0x5da>
 801487c:	2320      	movs	r3, #32
 801487e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014880:	439a      	bics	r2, r3
 8014882:	920f      	str	r2, [sp, #60]	; 0x3c
 8014884:	2a41      	cmp	r2, #65	; 0x41
 8014886:	d124      	bne.n	80148d2 <_svfprintf_r+0x672>
 8014888:	2230      	movs	r2, #48	; 0x30
 801488a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801488c:	ab25      	add	r3, sp, #148	; 0x94
 801488e:	701a      	strb	r2, [r3, #0]
 8014890:	3228      	adds	r2, #40	; 0x28
 8014892:	2961      	cmp	r1, #97	; 0x61
 8014894:	d100      	bne.n	8014898 <_svfprintf_r+0x638>
 8014896:	3220      	adds	r2, #32
 8014898:	705a      	strb	r2, [r3, #1]
 801489a:	2302      	movs	r3, #2
 801489c:	431e      	orrs	r6, r3
 801489e:	9b08      	ldr	r3, [sp, #32]
 80148a0:	2b63      	cmp	r3, #99	; 0x63
 80148a2:	dc00      	bgt.n	80148a6 <_svfprintf_r+0x646>
 80148a4:	e09e      	b.n	80149e4 <_svfprintf_r+0x784>
 80148a6:	1c59      	adds	r1, r3, #1
 80148a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148aa:	f7fe f913 	bl	8012ad4 <_malloc_r>
 80148ae:	9009      	str	r0, [sp, #36]	; 0x24
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d000      	beq.n	80148b6 <_svfprintf_r+0x656>
 80148b4:	e09b      	b.n	80149ee <_svfprintf_r+0x78e>
 80148b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148b8:	899a      	ldrh	r2, [r3, #12]
 80148ba:	2340      	movs	r3, #64	; 0x40
 80148bc:	4313      	orrs	r3, r2
 80148be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80148c0:	8193      	strh	r3, [r2, #12]
 80148c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148c4:	899b      	ldrh	r3, [r3, #12]
 80148c6:	065b      	lsls	r3, r3, #25
 80148c8:	d400      	bmi.n	80148cc <_svfprintf_r+0x66c>
 80148ca:	e4ee      	b.n	80142aa <_svfprintf_r+0x4a>
 80148cc:	2301      	movs	r3, #1
 80148ce:	425b      	negs	r3, r3
 80148d0:	e4ea      	b.n	80142a8 <_svfprintf_r+0x48>
 80148d2:	9b08      	ldr	r3, [sp, #32]
 80148d4:	900c      	str	r0, [sp, #48]	; 0x30
 80148d6:	3301      	adds	r3, #1
 80148d8:	d100      	bne.n	80148dc <_svfprintf_r+0x67c>
 80148da:	e08b      	b.n	80149f4 <_svfprintf_r+0x794>
 80148dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148de:	2b47      	cmp	r3, #71	; 0x47
 80148e0:	d103      	bne.n	80148ea <_svfprintf_r+0x68a>
 80148e2:	9b08      	ldr	r3, [sp, #32]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d100      	bne.n	80148ea <_svfprintf_r+0x68a>
 80148e8:	e087      	b.n	80149fa <_svfprintf_r+0x79a>
 80148ea:	2380      	movs	r3, #128	; 0x80
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	4333      	orrs	r3, r6
 80148f0:	9320      	str	r3, [sp, #128]	; 0x80
 80148f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148f4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	db00      	blt.n	80148fc <_svfprintf_r+0x69c>
 80148fa:	e082      	b.n	8014a02 <_svfprintf_r+0x7a2>
 80148fc:	2280      	movs	r2, #128	; 0x80
 80148fe:	0612      	lsls	r2, r2, #24
 8014900:	4694      	mov	ip, r2
 8014902:	4463      	add	r3, ip
 8014904:	930d      	str	r3, [sp, #52]	; 0x34
 8014906:	232d      	movs	r3, #45	; 0x2d
 8014908:	9322      	str	r3, [sp, #136]	; 0x88
 801490a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801490c:	2b41      	cmp	r3, #65	; 0x41
 801490e:	d000      	beq.n	8014912 <_svfprintf_r+0x6b2>
 8014910:	e105      	b.n	8014b1e <_svfprintf_r+0x8be>
 8014912:	aa26      	add	r2, sp, #152	; 0x98
 8014914:	0020      	movs	r0, r4
 8014916:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014918:	f002 fdc4 	bl	80174a4 <frexp>
 801491c:	23ff      	movs	r3, #255	; 0xff
 801491e:	2200      	movs	r2, #0
 8014920:	059b      	lsls	r3, r3, #22
 8014922:	f7ed fa87 	bl	8001e34 <__aeabi_dmul>
 8014926:	2200      	movs	r2, #0
 8014928:	2300      	movs	r3, #0
 801492a:	0004      	movs	r4, r0
 801492c:	000d      	movs	r5, r1
 801492e:	f7eb fd95 	bl	800045c <__aeabi_dcmpeq>
 8014932:	2800      	cmp	r0, #0
 8014934:	d001      	beq.n	801493a <_svfprintf_r+0x6da>
 8014936:	2301      	movs	r3, #1
 8014938:	9326      	str	r3, [sp, #152]	; 0x98
 801493a:	4b83      	ldr	r3, [pc, #524]	; (8014b48 <_svfprintf_r+0x8e8>)
 801493c:	9317      	str	r3, [sp, #92]	; 0x5c
 801493e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014940:	2b61      	cmp	r3, #97	; 0x61
 8014942:	d101      	bne.n	8014948 <_svfprintf_r+0x6e8>
 8014944:	4b81      	ldr	r3, [pc, #516]	; (8014b4c <_svfprintf_r+0x8ec>)
 8014946:	9317      	str	r3, [sp, #92]	; 0x5c
 8014948:	9b08      	ldr	r3, [sp, #32]
 801494a:	3b01      	subs	r3, #1
 801494c:	9310      	str	r3, [sp, #64]	; 0x40
 801494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014950:	9318      	str	r3, [sp, #96]	; 0x60
 8014952:	2200      	movs	r2, #0
 8014954:	4b7e      	ldr	r3, [pc, #504]	; (8014b50 <_svfprintf_r+0x8f0>)
 8014956:	0020      	movs	r0, r4
 8014958:	0029      	movs	r1, r5
 801495a:	f7ed fa6b 	bl	8001e34 <__aeabi_dmul>
 801495e:	000d      	movs	r5, r1
 8014960:	0004      	movs	r4, r0
 8014962:	f7ee f83d 	bl	80029e0 <__aeabi_d2iz>
 8014966:	9021      	str	r0, [sp, #132]	; 0x84
 8014968:	f7ee f870 	bl	8002a4c <__aeabi_i2d>
 801496c:	0002      	movs	r2, r0
 801496e:	000b      	movs	r3, r1
 8014970:	0020      	movs	r0, r4
 8014972:	0029      	movs	r1, r5
 8014974:	f7ed fcd0 	bl	8002318 <__aeabi_dsub>
 8014978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801497a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801497c:	3301      	adds	r3, #1
 801497e:	930d      	str	r3, [sp, #52]	; 0x34
 8014980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014982:	0004      	movs	r4, r0
 8014984:	5c9b      	ldrb	r3, [r3, r2]
 8014986:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014988:	000d      	movs	r5, r1
 801498a:	7013      	strb	r3, [r2, #0]
 801498c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801498e:	9323      	str	r3, [sp, #140]	; 0x8c
 8014990:	3301      	adds	r3, #1
 8014992:	d00a      	beq.n	80149aa <_svfprintf_r+0x74a>
 8014994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014996:	2200      	movs	r2, #0
 8014998:	3b01      	subs	r3, #1
 801499a:	9310      	str	r3, [sp, #64]	; 0x40
 801499c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801499e:	9318      	str	r3, [sp, #96]	; 0x60
 80149a0:	2300      	movs	r3, #0
 80149a2:	f7eb fd5b 	bl	800045c <__aeabi_dcmpeq>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d0d3      	beq.n	8014952 <_svfprintf_r+0x6f2>
 80149aa:	2200      	movs	r2, #0
 80149ac:	4b69      	ldr	r3, [pc, #420]	; (8014b54 <_svfprintf_r+0x8f4>)
 80149ae:	0020      	movs	r0, r4
 80149b0:	0029      	movs	r1, r5
 80149b2:	f7eb fd6d 	bl	8000490 <__aeabi_dcmpgt>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d126      	bne.n	8014a08 <_svfprintf_r+0x7a8>
 80149ba:	2200      	movs	r2, #0
 80149bc:	4b65      	ldr	r3, [pc, #404]	; (8014b54 <_svfprintf_r+0x8f4>)
 80149be:	0020      	movs	r0, r4
 80149c0:	0029      	movs	r1, r5
 80149c2:	f7eb fd4b 	bl	800045c <__aeabi_dcmpeq>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d002      	beq.n	80149d0 <_svfprintf_r+0x770>
 80149ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149cc:	07db      	lsls	r3, r3, #31
 80149ce:	d41b      	bmi.n	8014a08 <_svfprintf_r+0x7a8>
 80149d0:	2130      	movs	r1, #48	; 0x30
 80149d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80149d6:	1898      	adds	r0, r3, r2
 80149d8:	930d      	str	r3, [sp, #52]	; 0x34
 80149da:	1ac2      	subs	r2, r0, r3
 80149dc:	d426      	bmi.n	8014a2c <_svfprintf_r+0x7cc>
 80149de:	7019      	strb	r1, [r3, #0]
 80149e0:	3301      	adds	r3, #1
 80149e2:	e7f9      	b.n	80149d8 <_svfprintf_r+0x778>
 80149e4:	2300      	movs	r3, #0
 80149e6:	930c      	str	r3, [sp, #48]	; 0x30
 80149e8:	ab3f      	add	r3, sp, #252	; 0xfc
 80149ea:	9309      	str	r3, [sp, #36]	; 0x24
 80149ec:	e77d      	b.n	80148ea <_svfprintf_r+0x68a>
 80149ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149f0:	930c      	str	r3, [sp, #48]	; 0x30
 80149f2:	e77a      	b.n	80148ea <_svfprintf_r+0x68a>
 80149f4:	2306      	movs	r3, #6
 80149f6:	9308      	str	r3, [sp, #32]
 80149f8:	e777      	b.n	80148ea <_svfprintf_r+0x68a>
 80149fa:	9b08      	ldr	r3, [sp, #32]
 80149fc:	930c      	str	r3, [sp, #48]	; 0x30
 80149fe:	2301      	movs	r3, #1
 8014a00:	e7f9      	b.n	80149f6 <_svfprintf_r+0x796>
 8014a02:	930d      	str	r3, [sp, #52]	; 0x34
 8014a04:	2300      	movs	r3, #0
 8014a06:	e77f      	b.n	8014908 <_svfprintf_r+0x6a8>
 8014a08:	2030      	movs	r0, #48	; 0x30
 8014a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a0c:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a10:	7bda      	ldrb	r2, [r3, #15]
 8014a12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a14:	3b01      	subs	r3, #1
 8014a16:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a18:	7819      	ldrb	r1, [r3, #0]
 8014a1a:	4291      	cmp	r1, r2
 8014a1c:	d07d      	beq.n	8014b1a <_svfprintf_r+0x8ba>
 8014a1e:	1c4a      	adds	r2, r1, #1
 8014a20:	b2d2      	uxtb	r2, r2
 8014a22:	2939      	cmp	r1, #57	; 0x39
 8014a24:	d101      	bne.n	8014a2a <_svfprintf_r+0x7ca>
 8014a26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a28:	7a92      	ldrb	r2, [r2, #10]
 8014a2a:	701a      	strb	r2, [r3, #0]
 8014a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a30:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014a32:	1a9b      	subs	r3, r3, r2
 8014a34:	930d      	str	r3, [sp, #52]	; 0x34
 8014a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a38:	2b47      	cmp	r3, #71	; 0x47
 8014a3a:	d000      	beq.n	8014a3e <_svfprintf_r+0x7de>
 8014a3c:	e0d2      	b.n	8014be4 <_svfprintf_r+0x984>
 8014a3e:	1ceb      	adds	r3, r5, #3
 8014a40:	db03      	blt.n	8014a4a <_svfprintf_r+0x7ea>
 8014a42:	9b08      	ldr	r3, [sp, #32]
 8014a44:	42ab      	cmp	r3, r5
 8014a46:	db00      	blt.n	8014a4a <_svfprintf_r+0x7ea>
 8014a48:	e0fd      	b.n	8014c46 <_svfprintf_r+0x9e6>
 8014a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a4c:	3b02      	subs	r3, #2
 8014a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8014a50:	2238      	movs	r2, #56	; 0x38
 8014a52:	466b      	mov	r3, sp
 8014a54:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014a56:	189b      	adds	r3, r3, r2
 8014a58:	3a18      	subs	r2, #24
 8014a5a:	4391      	bics	r1, r2
 8014a5c:	1e6c      	subs	r4, r5, #1
 8014a5e:	000a      	movs	r2, r1
 8014a60:	9426      	str	r4, [sp, #152]	; 0x98
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	2100      	movs	r1, #0
 8014a66:	2a41      	cmp	r2, #65	; 0x41
 8014a68:	d102      	bne.n	8014a70 <_svfprintf_r+0x810>
 8014a6a:	330f      	adds	r3, #15
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	3101      	adds	r1, #1
 8014a70:	aa28      	add	r2, sp, #160	; 0xa0
 8014a72:	7013      	strb	r3, [r2, #0]
 8014a74:	232b      	movs	r3, #43	; 0x2b
 8014a76:	2c00      	cmp	r4, #0
 8014a78:	da02      	bge.n	8014a80 <_svfprintf_r+0x820>
 8014a7a:	2401      	movs	r4, #1
 8014a7c:	232d      	movs	r3, #45	; 0x2d
 8014a7e:	1b64      	subs	r4, r4, r5
 8014a80:	7053      	strb	r3, [r2, #1]
 8014a82:	2c09      	cmp	r4, #9
 8014a84:	dc00      	bgt.n	8014a88 <_svfprintf_r+0x828>
 8014a86:	e0c7      	b.n	8014c18 <_svfprintf_r+0x9b8>
 8014a88:	2537      	movs	r5, #55	; 0x37
 8014a8a:	ab1e      	add	r3, sp, #120	; 0x78
 8014a8c:	18ed      	adds	r5, r5, r3
 8014a8e:	1e6b      	subs	r3, r5, #1
 8014a90:	0020      	movs	r0, r4
 8014a92:	210a      	movs	r1, #10
 8014a94:	9308      	str	r3, [sp, #32]
 8014a96:	f7eb fccb 	bl	8000430 <__aeabi_idivmod>
 8014a9a:	1e6b      	subs	r3, r5, #1
 8014a9c:	3130      	adds	r1, #48	; 0x30
 8014a9e:	7019      	strb	r1, [r3, #0]
 8014aa0:	0020      	movs	r0, r4
 8014aa2:	210a      	movs	r1, #10
 8014aa4:	f7eb fbde 	bl	8000264 <__divsi3>
 8014aa8:	0004      	movs	r4, r0
 8014aaa:	2809      	cmp	r0, #9
 8014aac:	dd00      	ble.n	8014ab0 <_svfprintf_r+0x850>
 8014aae:	e0ac      	b.n	8014c0a <_svfprintf_r+0x9aa>
 8014ab0:	232a      	movs	r3, #42	; 0x2a
 8014ab2:	2137      	movs	r1, #55	; 0x37
 8014ab4:	aa1e      	add	r2, sp, #120	; 0x78
 8014ab6:	3d02      	subs	r5, #2
 8014ab8:	3430      	adds	r4, #48	; 0x30
 8014aba:	702c      	strb	r4, [r5, #0]
 8014abc:	189b      	adds	r3, r3, r2
 8014abe:	1889      	adds	r1, r1, r2
 8014ac0:	001a      	movs	r2, r3
 8014ac2:	428d      	cmp	r5, r1
 8014ac4:	d200      	bcs.n	8014ac8 <_svfprintf_r+0x868>
 8014ac6:	e0a2      	b.n	8014c0e <_svfprintf_r+0x9ae>
 8014ac8:	ab28      	add	r3, sp, #160	; 0xa0
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	931d      	str	r3, [sp, #116]	; 0x74
 8014ace:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ad2:	4694      	mov	ip, r2
 8014ad4:	4463      	add	r3, ip
 8014ad6:	9308      	str	r3, [sp, #32]
 8014ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	dc01      	bgt.n	8014ae2 <_svfprintf_r+0x882>
 8014ade:	07f3      	lsls	r3, r6, #31
 8014ae0:	d504      	bpl.n	8014aec <_svfprintf_r+0x88c>
 8014ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014ae4:	9b08      	ldr	r3, [sp, #32]
 8014ae6:	4694      	mov	ip, r2
 8014ae8:	4463      	add	r3, ip
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	2280      	movs	r2, #128	; 0x80
 8014aee:	4b1a      	ldr	r3, [pc, #104]	; (8014b58 <_svfprintf_r+0x8f8>)
 8014af0:	0052      	lsls	r2, r2, #1
 8014af2:	4033      	ands	r3, r6
 8014af4:	431a      	orrs	r2, r3
 8014af6:	2300      	movs	r3, #0
 8014af8:	001d      	movs	r5, r3
 8014afa:	9220      	str	r2, [sp, #128]	; 0x80
 8014afc:	9310      	str	r3, [sp, #64]	; 0x40
 8014afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d100      	bne.n	8014b08 <_svfprintf_r+0x8a8>
 8014b06:	e270      	b.n	8014fea <_svfprintf_r+0xd8a>
 8014b08:	231b      	movs	r3, #27
 8014b0a:	aa1e      	add	r2, sp, #120	; 0x78
 8014b0c:	189b      	adds	r3, r3, r2
 8014b0e:	222d      	movs	r2, #45	; 0x2d
 8014b10:	701a      	strb	r2, [r3, #0]
 8014b12:	2300      	movs	r3, #0
 8014b14:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014b16:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b18:	e539      	b.n	801458e <_svfprintf_r+0x32e>
 8014b1a:	7018      	strb	r0, [r3, #0]
 8014b1c:	e779      	b.n	8014a12 <_svfprintf_r+0x7b2>
 8014b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b20:	2b46      	cmp	r3, #70	; 0x46
 8014b22:	d01b      	beq.n	8014b5c <_svfprintf_r+0x8fc>
 8014b24:	9d08      	ldr	r5, [sp, #32]
 8014b26:	2b45      	cmp	r3, #69	; 0x45
 8014b28:	d101      	bne.n	8014b2e <_svfprintf_r+0x8ce>
 8014b2a:	9b08      	ldr	r3, [sp, #32]
 8014b2c:	1c5d      	adds	r5, r3, #1
 8014b2e:	2302      	movs	r3, #2
 8014b30:	e016      	b.n	8014b60 <_svfprintf_r+0x900>
 8014b32:	46c0      	nop			; (mov r8, r8)
 8014b34:	7fefffff 	.word	0x7fefffff
 8014b38:	0801a8cc 	.word	0x0801a8cc
 8014b3c:	0801a8c8 	.word	0x0801a8c8
 8014b40:	0801a8d4 	.word	0x0801a8d4
 8014b44:	0801a8d0 	.word	0x0801a8d0
 8014b48:	0801a8e9 	.word	0x0801a8e9
 8014b4c:	0801a8d8 	.word	0x0801a8d8
 8014b50:	40300000 	.word	0x40300000
 8014b54:	3fe00000 	.word	0x3fe00000
 8014b58:	fffffbff 	.word	0xfffffbff
 8014b5c:	2303      	movs	r3, #3
 8014b5e:	9d08      	ldr	r5, [sp, #32]
 8014b60:	aa2a      	add	r2, sp, #168	; 0xa8
 8014b62:	9204      	str	r2, [sp, #16]
 8014b64:	aa27      	add	r2, sp, #156	; 0x9c
 8014b66:	9203      	str	r2, [sp, #12]
 8014b68:	aa26      	add	r2, sp, #152	; 0x98
 8014b6a:	9202      	str	r2, [sp, #8]
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	9501      	str	r5, [sp, #4]
 8014b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b72:	0022      	movs	r2, r4
 8014b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b76:	f000 fe79 	bl	801586c <_dtoa_r>
 8014b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b7c:	9009      	str	r0, [sp, #36]	; 0x24
 8014b7e:	2b47      	cmp	r3, #71	; 0x47
 8014b80:	d101      	bne.n	8014b86 <_svfprintf_r+0x926>
 8014b82:	07f3      	lsls	r3, r6, #31
 8014b84:	d524      	bpl.n	8014bd0 <_svfprintf_r+0x970>
 8014b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b88:	195b      	adds	r3, r3, r5
 8014b8a:	9310      	str	r3, [sp, #64]	; 0x40
 8014b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b8e:	2b46      	cmp	r3, #70	; 0x46
 8014b90:	d113      	bne.n	8014bba <_svfprintf_r+0x95a>
 8014b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	2b30      	cmp	r3, #48	; 0x30
 8014b98:	d10a      	bne.n	8014bb0 <_svfprintf_r+0x950>
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	0020      	movs	r0, r4
 8014ba0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ba2:	f7eb fc5b 	bl	800045c <__aeabi_dcmpeq>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d102      	bne.n	8014bb0 <_svfprintf_r+0x950>
 8014baa:	2301      	movs	r3, #1
 8014bac:	1b5d      	subs	r5, r3, r5
 8014bae:	9526      	str	r5, [sp, #152]	; 0x98
 8014bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bb4:	4694      	mov	ip, r2
 8014bb6:	4463      	add	r3, ip
 8014bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8014bba:	2200      	movs	r2, #0
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	0020      	movs	r0, r4
 8014bc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bc2:	f7eb fc4b 	bl	800045c <__aeabi_dcmpeq>
 8014bc6:	2230      	movs	r2, #48	; 0x30
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d006      	beq.n	8014bda <_svfprintf_r+0x97a>
 8014bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bce:	932a      	str	r3, [sp, #168]	; 0xa8
 8014bd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014bd2:	e72c      	b.n	8014a2e <_svfprintf_r+0x7ce>
 8014bd4:	1c59      	adds	r1, r3, #1
 8014bd6:	912a      	str	r1, [sp, #168]	; 0xa8
 8014bd8:	701a      	strb	r2, [r3, #0]
 8014bda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014bde:	4299      	cmp	r1, r3
 8014be0:	d8f8      	bhi.n	8014bd4 <_svfprintf_r+0x974>
 8014be2:	e7f5      	b.n	8014bd0 <_svfprintf_r+0x970>
 8014be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014be6:	2b46      	cmp	r3, #70	; 0x46
 8014be8:	d000      	beq.n	8014bec <_svfprintf_r+0x98c>
 8014bea:	e731      	b.n	8014a50 <_svfprintf_r+0x7f0>
 8014bec:	9b08      	ldr	r3, [sp, #32]
 8014bee:	2d00      	cmp	r5, #0
 8014bf0:	dd21      	ble.n	8014c36 <_svfprintf_r+0x9d6>
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d101      	bne.n	8014bfa <_svfprintf_r+0x99a>
 8014bf6:	07f3      	lsls	r3, r6, #31
 8014bf8:	d54a      	bpl.n	8014c90 <_svfprintf_r+0xa30>
 8014bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bfc:	18eb      	adds	r3, r5, r3
 8014bfe:	9a08      	ldr	r2, [sp, #32]
 8014c00:	18d3      	adds	r3, r2, r3
 8014c02:	9308      	str	r3, [sp, #32]
 8014c04:	2366      	movs	r3, #102	; 0x66
 8014c06:	930e      	str	r3, [sp, #56]	; 0x38
 8014c08:	e034      	b.n	8014c74 <_svfprintf_r+0xa14>
 8014c0a:	9d08      	ldr	r5, [sp, #32]
 8014c0c:	e73f      	b.n	8014a8e <_svfprintf_r+0x82e>
 8014c0e:	782a      	ldrb	r2, [r5, #0]
 8014c10:	3501      	adds	r5, #1
 8014c12:	701a      	strb	r2, [r3, #0]
 8014c14:	3301      	adds	r3, #1
 8014c16:	e753      	b.n	8014ac0 <_svfprintf_r+0x860>
 8014c18:	232a      	movs	r3, #42	; 0x2a
 8014c1a:	aa1e      	add	r2, sp, #120	; 0x78
 8014c1c:	189b      	adds	r3, r3, r2
 8014c1e:	2900      	cmp	r1, #0
 8014c20:	d105      	bne.n	8014c2e <_svfprintf_r+0x9ce>
 8014c22:	2230      	movs	r2, #48	; 0x30
 8014c24:	ab28      	add	r3, sp, #160	; 0xa0
 8014c26:	709a      	strb	r2, [r3, #2]
 8014c28:	232b      	movs	r3, #43	; 0x2b
 8014c2a:	aa1e      	add	r2, sp, #120	; 0x78
 8014c2c:	189b      	adds	r3, r3, r2
 8014c2e:	3430      	adds	r4, #48	; 0x30
 8014c30:	1c5a      	adds	r2, r3, #1
 8014c32:	701c      	strb	r4, [r3, #0]
 8014c34:	e748      	b.n	8014ac8 <_svfprintf_r+0x868>
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d102      	bne.n	8014c40 <_svfprintf_r+0x9e0>
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	421e      	tst	r6, r3
 8014c3e:	d029      	beq.n	8014c94 <_svfprintf_r+0xa34>
 8014c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c42:	3301      	adds	r3, #1
 8014c44:	e7db      	b.n	8014bfe <_svfprintf_r+0x99e>
 8014c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c48:	42ab      	cmp	r3, r5
 8014c4a:	dc06      	bgt.n	8014c5a <_svfprintf_r+0x9fa>
 8014c4c:	07f3      	lsls	r3, r6, #31
 8014c4e:	d524      	bpl.n	8014c9a <_svfprintf_r+0xa3a>
 8014c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c52:	18eb      	adds	r3, r5, r3
 8014c54:	9308      	str	r3, [sp, #32]
 8014c56:	2367      	movs	r3, #103	; 0x67
 8014c58:	e7d5      	b.n	8014c06 <_svfprintf_r+0x9a6>
 8014c5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c5e:	4694      	mov	ip, r2
 8014c60:	4463      	add	r3, ip
 8014c62:	9308      	str	r3, [sp, #32]
 8014c64:	2367      	movs	r3, #103	; 0x67
 8014c66:	930e      	str	r3, [sp, #56]	; 0x38
 8014c68:	2d00      	cmp	r5, #0
 8014c6a:	dc03      	bgt.n	8014c74 <_svfprintf_r+0xa14>
 8014c6c:	9b08      	ldr	r3, [sp, #32]
 8014c6e:	1b5b      	subs	r3, r3, r5
 8014c70:	3301      	adds	r3, #1
 8014c72:	9308      	str	r3, [sp, #32]
 8014c74:	2380      	movs	r3, #128	; 0x80
 8014c76:	00db      	lsls	r3, r3, #3
 8014c78:	401e      	ands	r6, r3
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	960f      	str	r6, [sp, #60]	; 0x3c
 8014c7e:	9310      	str	r3, [sp, #64]	; 0x40
 8014c80:	2e00      	cmp	r6, #0
 8014c82:	d100      	bne.n	8014c86 <_svfprintf_r+0xa26>
 8014c84:	e73c      	b.n	8014b00 <_svfprintf_r+0x8a0>
 8014c86:	2d00      	cmp	r5, #0
 8014c88:	dc27      	bgt.n	8014cda <_svfprintf_r+0xa7a>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c8e:	e737      	b.n	8014b00 <_svfprintf_r+0x8a0>
 8014c90:	9508      	str	r5, [sp, #32]
 8014c92:	e7b7      	b.n	8014c04 <_svfprintf_r+0x9a4>
 8014c94:	2266      	movs	r2, #102	; 0x66
 8014c96:	920e      	str	r2, [sp, #56]	; 0x38
 8014c98:	e7eb      	b.n	8014c72 <_svfprintf_r+0xa12>
 8014c9a:	9508      	str	r5, [sp, #32]
 8014c9c:	e7db      	b.n	8014c56 <_svfprintf_r+0x9f6>
 8014c9e:	42ab      	cmp	r3, r5
 8014ca0:	da0e      	bge.n	8014cc0 <_svfprintf_r+0xa60>
 8014ca2:	1aed      	subs	r5, r5, r3
 8014ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ca6:	785b      	ldrb	r3, [r3, #1]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d012      	beq.n	8014cd2 <_svfprintf_r+0xa72>
 8014cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cae:	3301      	adds	r3, #1
 8014cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	2bff      	cmp	r3, #255	; 0xff
 8014cbe:	d1ee      	bne.n	8014c9e <_svfprintf_r+0xa3e>
 8014cc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cc4:	189b      	adds	r3, r3, r2
 8014cc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014cc8:	4353      	muls	r3, r2
 8014cca:	9a08      	ldr	r2, [sp, #32]
 8014ccc:	189b      	adds	r3, r3, r2
 8014cce:	9308      	str	r3, [sp, #32]
 8014cd0:	e716      	b.n	8014b00 <_svfprintf_r+0x8a0>
 8014cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8014cd8:	e7ee      	b.n	8014cb8 <_svfprintf_r+0xa58>
 8014cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cde:	e7eb      	b.n	8014cb8 <_svfprintf_r+0xa58>
 8014ce0:	0022      	movs	r2, r4
 8014ce2:	ca08      	ldmia	r2!, {r3}
 8014ce4:	9212      	str	r2, [sp, #72]	; 0x48
 8014ce6:	06b2      	lsls	r2, r6, #26
 8014ce8:	d508      	bpl.n	8014cfc <_svfprintf_r+0xa9c>
 8014cea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cec:	601a      	str	r2, [r3, #0]
 8014cee:	17d2      	asrs	r2, r2, #31
 8014cf0:	605a      	str	r2, [r3, #4]
 8014cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cf4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf8:	f7ff faeb 	bl	80142d2 <_svfprintf_r+0x72>
 8014cfc:	06f2      	lsls	r2, r6, #27
 8014cfe:	d502      	bpl.n	8014d06 <_svfprintf_r+0xaa6>
 8014d00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d02:	601a      	str	r2, [r3, #0]
 8014d04:	e7f5      	b.n	8014cf2 <_svfprintf_r+0xa92>
 8014d06:	0672      	lsls	r2, r6, #25
 8014d08:	d502      	bpl.n	8014d10 <_svfprintf_r+0xab0>
 8014d0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d0c:	801a      	strh	r2, [r3, #0]
 8014d0e:	e7f0      	b.n	8014cf2 <_svfprintf_r+0xa92>
 8014d10:	05b2      	lsls	r2, r6, #22
 8014d12:	d5f5      	bpl.n	8014d00 <_svfprintf_r+0xaa0>
 8014d14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d16:	701a      	strb	r2, [r3, #0]
 8014d18:	e7eb      	b.n	8014cf2 <_svfprintf_r+0xa92>
 8014d1a:	2310      	movs	r3, #16
 8014d1c:	431e      	orrs	r6, r3
 8014d1e:	2220      	movs	r2, #32
 8014d20:	4032      	ands	r2, r6
 8014d22:	d025      	beq.n	8014d70 <_svfprintf_r+0xb10>
 8014d24:	2307      	movs	r3, #7
 8014d26:	3407      	adds	r4, #7
 8014d28:	439c      	bics	r4, r3
 8014d2a:	0023      	movs	r3, r4
 8014d2c:	3308      	adds	r3, #8
 8014d2e:	9312      	str	r3, [sp, #72]	; 0x48
 8014d30:	6823      	ldr	r3, [r4, #0]
 8014d32:	6864      	ldr	r4, [r4, #4]
 8014d34:	9306      	str	r3, [sp, #24]
 8014d36:	9407      	str	r4, [sp, #28]
 8014d38:	4bc2      	ldr	r3, [pc, #776]	; (8015044 <_svfprintf_r+0xde4>)
 8014d3a:	401e      	ands	r6, r3
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	221b      	movs	r2, #27
 8014d40:	a91e      	add	r1, sp, #120	; 0x78
 8014d42:	1852      	adds	r2, r2, r1
 8014d44:	2100      	movs	r1, #0
 8014d46:	7011      	strb	r1, [r2, #0]
 8014d48:	9a08      	ldr	r2, [sp, #32]
 8014d4a:	3201      	adds	r2, #1
 8014d4c:	d100      	bne.n	8014d50 <_svfprintf_r+0xaf0>
 8014d4e:	e0a6      	b.n	8014e9e <_svfprintf_r+0xc3e>
 8014d50:	0032      	movs	r2, r6
 8014d52:	2180      	movs	r1, #128	; 0x80
 8014d54:	9807      	ldr	r0, [sp, #28]
 8014d56:	438e      	bics	r6, r1
 8014d58:	9906      	ldr	r1, [sp, #24]
 8014d5a:	4301      	orrs	r1, r0
 8014d5c:	d000      	beq.n	8014d60 <_svfprintf_r+0xb00>
 8014d5e:	e09e      	b.n	8014e9e <_svfprintf_r+0xc3e>
 8014d60:	9908      	ldr	r1, [sp, #32]
 8014d62:	2900      	cmp	r1, #0
 8014d64:	d100      	bne.n	8014d68 <_svfprintf_r+0xb08>
 8014d66:	e125      	b.n	8014fb4 <_svfprintf_r+0xd54>
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d000      	beq.n	8014d6e <_svfprintf_r+0xb0e>
 8014d6c:	e09a      	b.n	8014ea4 <_svfprintf_r+0xc44>
 8014d6e:	e518      	b.n	80147a2 <_svfprintf_r+0x542>
 8014d70:	1d23      	adds	r3, r4, #4
 8014d72:	9312      	str	r3, [sp, #72]	; 0x48
 8014d74:	2310      	movs	r3, #16
 8014d76:	4033      	ands	r3, r6
 8014d78:	d003      	beq.n	8014d82 <_svfprintf_r+0xb22>
 8014d7a:	6823      	ldr	r3, [r4, #0]
 8014d7c:	9306      	str	r3, [sp, #24]
 8014d7e:	9207      	str	r2, [sp, #28]
 8014d80:	e7da      	b.n	8014d38 <_svfprintf_r+0xad8>
 8014d82:	2240      	movs	r2, #64	; 0x40
 8014d84:	4032      	ands	r2, r6
 8014d86:	d004      	beq.n	8014d92 <_svfprintf_r+0xb32>
 8014d88:	6822      	ldr	r2, [r4, #0]
 8014d8a:	b292      	uxth	r2, r2
 8014d8c:	9206      	str	r2, [sp, #24]
 8014d8e:	9307      	str	r3, [sp, #28]
 8014d90:	e7d2      	b.n	8014d38 <_svfprintf_r+0xad8>
 8014d92:	2380      	movs	r3, #128	; 0x80
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	4033      	ands	r3, r6
 8014d98:	d002      	beq.n	8014da0 <_svfprintf_r+0xb40>
 8014d9a:	6823      	ldr	r3, [r4, #0]
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	e7ed      	b.n	8014d7c <_svfprintf_r+0xb1c>
 8014da0:	6822      	ldr	r2, [r4, #0]
 8014da2:	e7f3      	b.n	8014d8c <_svfprintf_r+0xb2c>
 8014da4:	1d23      	adds	r3, r4, #4
 8014da6:	49a8      	ldr	r1, [pc, #672]	; (8015048 <_svfprintf_r+0xde8>)
 8014da8:	aa25      	add	r2, sp, #148	; 0x94
 8014daa:	9312      	str	r3, [sp, #72]	; 0x48
 8014dac:	6823      	ldr	r3, [r4, #0]
 8014dae:	8011      	strh	r1, [r2, #0]
 8014db0:	4aa6      	ldr	r2, [pc, #664]	; (801504c <_svfprintf_r+0xdec>)
 8014db2:	9306      	str	r3, [sp, #24]
 8014db4:	2300      	movs	r3, #0
 8014db6:	921e      	str	r2, [sp, #120]	; 0x78
 8014db8:	2278      	movs	r2, #120	; 0x78
 8014dba:	9307      	str	r3, [sp, #28]
 8014dbc:	3302      	adds	r3, #2
 8014dbe:	431e      	orrs	r6, r3
 8014dc0:	920e      	str	r2, [sp, #56]	; 0x38
 8014dc2:	e7bc      	b.n	8014d3e <_svfprintf_r+0xade>
 8014dc4:	1d23      	adds	r3, r4, #4
 8014dc6:	9312      	str	r3, [sp, #72]	; 0x48
 8014dc8:	6823      	ldr	r3, [r4, #0]
 8014dca:	2400      	movs	r4, #0
 8014dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8014dce:	231b      	movs	r3, #27
 8014dd0:	aa1e      	add	r2, sp, #120	; 0x78
 8014dd2:	189b      	adds	r3, r3, r2
 8014dd4:	701c      	strb	r4, [r3, #0]
 8014dd6:	9b08      	ldr	r3, [sp, #32]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	d00e      	beq.n	8014dfa <_svfprintf_r+0xb9a>
 8014ddc:	9a08      	ldr	r2, [sp, #32]
 8014dde:	0021      	movs	r1, r4
 8014de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014de2:	f001 ff79 	bl	8016cd8 <memchr>
 8014de6:	900c      	str	r0, [sp, #48]	; 0x30
 8014de8:	42a0      	cmp	r0, r4
 8014dea:	d100      	bne.n	8014dee <_svfprintf_r+0xb8e>
 8014dec:	e100      	b.n	8014ff0 <_svfprintf_r+0xd90>
 8014dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014df0:	1a83      	subs	r3, r0, r2
 8014df2:	9308      	str	r3, [sp, #32]
 8014df4:	940c      	str	r4, [sp, #48]	; 0x30
 8014df6:	0023      	movs	r3, r4
 8014df8:	e527      	b.n	801484a <_svfprintf_r+0x5ea>
 8014dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dfc:	f7eb f98c 	bl	8000118 <strlen>
 8014e00:	9008      	str	r0, [sp, #32]
 8014e02:	e7f7      	b.n	8014df4 <_svfprintf_r+0xb94>
 8014e04:	2310      	movs	r3, #16
 8014e06:	431e      	orrs	r6, r3
 8014e08:	2220      	movs	r2, #32
 8014e0a:	4032      	ands	r2, r6
 8014e0c:	d00b      	beq.n	8014e26 <_svfprintf_r+0xbc6>
 8014e0e:	2307      	movs	r3, #7
 8014e10:	3407      	adds	r4, #7
 8014e12:	439c      	bics	r4, r3
 8014e14:	0023      	movs	r3, r4
 8014e16:	3308      	adds	r3, #8
 8014e18:	9312      	str	r3, [sp, #72]	; 0x48
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	6864      	ldr	r4, [r4, #4]
 8014e1e:	9306      	str	r3, [sp, #24]
 8014e20:	9407      	str	r4, [sp, #28]
 8014e22:	2301      	movs	r3, #1
 8014e24:	e78b      	b.n	8014d3e <_svfprintf_r+0xade>
 8014e26:	1d23      	adds	r3, r4, #4
 8014e28:	9312      	str	r3, [sp, #72]	; 0x48
 8014e2a:	2310      	movs	r3, #16
 8014e2c:	4033      	ands	r3, r6
 8014e2e:	d003      	beq.n	8014e38 <_svfprintf_r+0xbd8>
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	9306      	str	r3, [sp, #24]
 8014e34:	9207      	str	r2, [sp, #28]
 8014e36:	e7f4      	b.n	8014e22 <_svfprintf_r+0xbc2>
 8014e38:	2240      	movs	r2, #64	; 0x40
 8014e3a:	4032      	ands	r2, r6
 8014e3c:	d004      	beq.n	8014e48 <_svfprintf_r+0xbe8>
 8014e3e:	6822      	ldr	r2, [r4, #0]
 8014e40:	b292      	uxth	r2, r2
 8014e42:	9206      	str	r2, [sp, #24]
 8014e44:	9307      	str	r3, [sp, #28]
 8014e46:	e7ec      	b.n	8014e22 <_svfprintf_r+0xbc2>
 8014e48:	2380      	movs	r3, #128	; 0x80
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	4033      	ands	r3, r6
 8014e4e:	d002      	beq.n	8014e56 <_svfprintf_r+0xbf6>
 8014e50:	6823      	ldr	r3, [r4, #0]
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	e7ed      	b.n	8014e32 <_svfprintf_r+0xbd2>
 8014e56:	6822      	ldr	r2, [r4, #0]
 8014e58:	e7f3      	b.n	8014e42 <_svfprintf_r+0xbe2>
 8014e5a:	4b7c      	ldr	r3, [pc, #496]	; (801504c <_svfprintf_r+0xdec>)
 8014e5c:	f7ff fad9 	bl	8014412 <_svfprintf_r+0x1b2>
 8014e60:	1d23      	adds	r3, r4, #4
 8014e62:	9312      	str	r3, [sp, #72]	; 0x48
 8014e64:	2310      	movs	r3, #16
 8014e66:	4033      	ands	r3, r6
 8014e68:	d004      	beq.n	8014e74 <_svfprintf_r+0xc14>
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	9306      	str	r3, [sp, #24]
 8014e6e:	9207      	str	r2, [sp, #28]
 8014e70:	f7ff fadf 	bl	8014432 <_svfprintf_r+0x1d2>
 8014e74:	2240      	movs	r2, #64	; 0x40
 8014e76:	4032      	ands	r2, r6
 8014e78:	d005      	beq.n	8014e86 <_svfprintf_r+0xc26>
 8014e7a:	6822      	ldr	r2, [r4, #0]
 8014e7c:	b292      	uxth	r2, r2
 8014e7e:	9206      	str	r2, [sp, #24]
 8014e80:	9307      	str	r3, [sp, #28]
 8014e82:	f7ff fad6 	bl	8014432 <_svfprintf_r+0x1d2>
 8014e86:	2380      	movs	r3, #128	; 0x80
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	4033      	ands	r3, r6
 8014e8c:	d002      	beq.n	8014e94 <_svfprintf_r+0xc34>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	b2db      	uxtb	r3, r3
 8014e92:	e7eb      	b.n	8014e6c <_svfprintf_r+0xc0c>
 8014e94:	6822      	ldr	r2, [r4, #0]
 8014e96:	e7f2      	b.n	8014e7e <_svfprintf_r+0xc1e>
 8014e98:	0032      	movs	r2, r6
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	e759      	b.n	8014d52 <_svfprintf_r+0xaf2>
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d100      	bne.n	8014ea4 <_svfprintf_r+0xc44>
 8014ea2:	e476      	b.n	8014792 <_svfprintf_r+0x532>
 8014ea4:	2b02      	cmp	r3, #2
 8014ea6:	d06b      	beq.n	8014f80 <_svfprintf_r+0xd20>
 8014ea8:	2507      	movs	r5, #7
 8014eaa:	ab58      	add	r3, sp, #352	; 0x160
 8014eac:	1e5a      	subs	r2, r3, #1
 8014eae:	9209      	str	r2, [sp, #36]	; 0x24
 8014eb0:	9a06      	ldr	r2, [sp, #24]
 8014eb2:	1e59      	subs	r1, r3, #1
 8014eb4:	402a      	ands	r2, r5
 8014eb6:	3230      	adds	r2, #48	; 0x30
 8014eb8:	700a      	strb	r2, [r1, #0]
 8014eba:	9907      	ldr	r1, [sp, #28]
 8014ebc:	074c      	lsls	r4, r1, #29
 8014ebe:	9906      	ldr	r1, [sp, #24]
 8014ec0:	08c8      	lsrs	r0, r1, #3
 8014ec2:	9907      	ldr	r1, [sp, #28]
 8014ec4:	4304      	orrs	r4, r0
 8014ec6:	08c9      	lsrs	r1, r1, #3
 8014ec8:	9107      	str	r1, [sp, #28]
 8014eca:	0021      	movs	r1, r4
 8014ecc:	9807      	ldr	r0, [sp, #28]
 8014ece:	9406      	str	r4, [sp, #24]
 8014ed0:	4301      	orrs	r1, r0
 8014ed2:	d111      	bne.n	8014ef8 <_svfprintf_r+0xc98>
 8014ed4:	07f1      	lsls	r1, r6, #31
 8014ed6:	d502      	bpl.n	8014ede <_svfprintf_r+0xc7e>
 8014ed8:	3b02      	subs	r3, #2
 8014eda:	2a30      	cmp	r2, #48	; 0x30
 8014edc:	d173      	bne.n	8014fc6 <_svfprintf_r+0xd66>
 8014ede:	9b08      	ldr	r3, [sp, #32]
 8014ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ee2:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ee4:	ab58      	add	r3, sp, #352	; 0x160
 8014ee6:	1a9b      	subs	r3, r3, r2
 8014ee8:	9308      	str	r3, [sp, #32]
 8014eea:	2300      	movs	r3, #0
 8014eec:	930c      	str	r3, [sp, #48]	; 0x30
 8014eee:	9310      	str	r3, [sp, #64]	; 0x40
 8014ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ef2:	001d      	movs	r5, r3
 8014ef4:	f7ff fb4b 	bl	801458e <_svfprintf_r+0x32e>
 8014ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014efa:	e7d7      	b.n	8014eac <_svfprintf_r+0xc4c>
 8014efc:	2480      	movs	r4, #128	; 0x80
 8014efe:	2300      	movs	r3, #0
 8014f00:	00e4      	lsls	r4, r4, #3
 8014f02:	930d      	str	r3, [sp, #52]	; 0x34
 8014f04:	4034      	ands	r4, r6
 8014f06:	ab58      	add	r3, sp, #352	; 0x160
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f0c:	220a      	movs	r2, #10
 8014f0e:	9806      	ldr	r0, [sp, #24]
 8014f10:	9907      	ldr	r1, [sp, #28]
 8014f12:	2300      	movs	r3, #0
 8014f14:	f7eb fb0a 	bl	800052c <__aeabi_uldivmod>
 8014f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f1a:	3230      	adds	r2, #48	; 0x30
 8014f1c:	701a      	strb	r2, [r3, #0]
 8014f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f20:	3301      	adds	r3, #1
 8014f22:	930d      	str	r3, [sp, #52]	; 0x34
 8014f24:	2c00      	cmp	r4, #0
 8014f26:	d01d      	beq.n	8014f64 <_svfprintf_r+0xd04>
 8014f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d118      	bne.n	8014f64 <_svfprintf_r+0xd04>
 8014f32:	2aff      	cmp	r2, #255	; 0xff
 8014f34:	d016      	beq.n	8014f64 <_svfprintf_r+0xd04>
 8014f36:	9b07      	ldr	r3, [sp, #28]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d102      	bne.n	8014f42 <_svfprintf_r+0xce2>
 8014f3c:	9b06      	ldr	r3, [sp, #24]
 8014f3e:	2b09      	cmp	r3, #9
 8014f40:	d910      	bls.n	8014f64 <_svfprintf_r+0xd04>
 8014f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014f46:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014f48:	1a9b      	subs	r3, r3, r2
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f4e:	f7fe fa52 	bl	80133f6 <strncpy>
 8014f52:	2200      	movs	r2, #0
 8014f54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f56:	920d      	str	r2, [sp, #52]	; 0x34
 8014f58:	785b      	ldrb	r3, [r3, #1]
 8014f5a:	1e5a      	subs	r2, r3, #1
 8014f5c:	4193      	sbcs	r3, r2
 8014f5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f60:	18d3      	adds	r3, r2, r3
 8014f62:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f64:	220a      	movs	r2, #10
 8014f66:	9806      	ldr	r0, [sp, #24]
 8014f68:	9907      	ldr	r1, [sp, #28]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f7eb fade 	bl	800052c <__aeabi_uldivmod>
 8014f70:	9006      	str	r0, [sp, #24]
 8014f72:	9107      	str	r1, [sp, #28]
 8014f74:	9b06      	ldr	r3, [sp, #24]
 8014f76:	9a07      	ldr	r2, [sp, #28]
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	d0b0      	beq.n	8014ede <_svfprintf_r+0xc7e>
 8014f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f7e:	e7c3      	b.n	8014f08 <_svfprintf_r+0xca8>
 8014f80:	200f      	movs	r0, #15
 8014f82:	ab58      	add	r3, sp, #352	; 0x160
 8014f84:	9309      	str	r3, [sp, #36]	; 0x24
 8014f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8e:	9b06      	ldr	r3, [sp, #24]
 8014f90:	4003      	ands	r3, r0
 8014f92:	5cd3      	ldrb	r3, [r2, r3]
 8014f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f96:	7013      	strb	r3, [r2, #0]
 8014f98:	9b07      	ldr	r3, [sp, #28]
 8014f9a:	0719      	lsls	r1, r3, #28
 8014f9c:	9b06      	ldr	r3, [sp, #24]
 8014f9e:	091a      	lsrs	r2, r3, #4
 8014fa0:	9b07      	ldr	r3, [sp, #28]
 8014fa2:	4311      	orrs	r1, r2
 8014fa4:	091b      	lsrs	r3, r3, #4
 8014fa6:	9307      	str	r3, [sp, #28]
 8014fa8:	000b      	movs	r3, r1
 8014faa:	9a07      	ldr	r2, [sp, #28]
 8014fac:	9106      	str	r1, [sp, #24]
 8014fae:	4313      	orrs	r3, r2
 8014fb0:	d1e9      	bne.n	8014f86 <_svfprintf_r+0xd26>
 8014fb2:	e794      	b.n	8014ede <_svfprintf_r+0xc7e>
 8014fb4:	a958      	add	r1, sp, #352	; 0x160
 8014fb6:	9109      	str	r1, [sp, #36]	; 0x24
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d190      	bne.n	8014ede <_svfprintf_r+0xc7e>
 8014fbc:	07d3      	lsls	r3, r2, #31
 8014fbe:	d58e      	bpl.n	8014ede <_svfprintf_r+0xc7e>
 8014fc0:	23e7      	movs	r3, #231	; 0xe7
 8014fc2:	aa1e      	add	r2, sp, #120	; 0x78
 8014fc4:	189b      	adds	r3, r3, r2
 8014fc6:	2230      	movs	r2, #48	; 0x30
 8014fc8:	f7ff fbf0 	bl	80147ac <_svfprintf_r+0x54c>
 8014fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d100      	bne.n	8014fd4 <_svfprintf_r+0xd74>
 8014fd2:	e38a      	b.n	80156ea <_svfprintf_r+0x148a>
 8014fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fd6:	ab3f      	add	r3, sp, #252	; 0xfc
 8014fd8:	701a      	strb	r2, [r3, #0]
 8014fda:	221b      	movs	r2, #27
 8014fdc:	2000      	movs	r0, #0
 8014fde:	a91e      	add	r1, sp, #120	; 0x78
 8014fe0:	1852      	adds	r2, r2, r1
 8014fe2:	7010      	strb	r0, [r2, #0]
 8014fe4:	9412      	str	r4, [sp, #72]	; 0x48
 8014fe6:	f7ff faca 	bl	801457e <_svfprintf_r+0x31e>
 8014fea:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014fee:	e592      	b.n	8014b16 <_svfprintf_r+0x8b6>
 8014ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ff2:	e42a      	b.n	801484a <_svfprintf_r+0x5ea>
 8014ff4:	2010      	movs	r0, #16
 8014ff6:	1812      	adds	r2, r2, r0
 8014ff8:	6078      	str	r0, [r7, #4]
 8014ffa:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ffc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ffe:	2b07      	cmp	r3, #7
 8015000:	dd08      	ble.n	8015014 <_svfprintf_r+0xdb4>
 8015002:	aa2c      	add	r2, sp, #176	; 0xb0
 8015004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015006:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015008:	f002 fa7e 	bl	8017508 <__ssprint_r>
 801500c:	2800      	cmp	r0, #0
 801500e:	d000      	beq.n	8015012 <_svfprintf_r+0xdb2>
 8015010:	e34a      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015012:	a92f      	add	r1, sp, #188	; 0xbc
 8015014:	3c10      	subs	r4, #16
 8015016:	000f      	movs	r7, r1
 8015018:	f7ff fad8 	bl	80145cc <_svfprintf_r+0x36c>
 801501c:	2010      	movs	r0, #16
 801501e:	1812      	adds	r2, r2, r0
 8015020:	6078      	str	r0, [r7, #4]
 8015022:	922e      	str	r2, [sp, #184]	; 0xb8
 8015024:	932d      	str	r3, [sp, #180]	; 0xb4
 8015026:	2b07      	cmp	r3, #7
 8015028:	dd08      	ble.n	801503c <_svfprintf_r+0xddc>
 801502a:	aa2c      	add	r2, sp, #176	; 0xb0
 801502c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801502e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015030:	f002 fa6a 	bl	8017508 <__ssprint_r>
 8015034:	2800      	cmp	r0, #0
 8015036:	d000      	beq.n	801503a <_svfprintf_r+0xdda>
 8015038:	e336      	b.n	80156a8 <_svfprintf_r+0x1448>
 801503a:	a92f      	add	r1, sp, #188	; 0xbc
 801503c:	3c10      	subs	r4, #16
 801503e:	000f      	movs	r7, r1
 8015040:	f7ff fb24 	bl	801468c <_svfprintf_r+0x42c>
 8015044:	fffffbff 	.word	0xfffffbff
 8015048:	00007830 	.word	0x00007830
 801504c:	0801a8d8 	.word	0x0801a8d8
 8015050:	2010      	movs	r0, #16
 8015052:	1812      	adds	r2, r2, r0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	922e      	str	r2, [sp, #184]	; 0xb8
 8015058:	932d      	str	r3, [sp, #180]	; 0xb4
 801505a:	2b07      	cmp	r3, #7
 801505c:	dd08      	ble.n	8015070 <_svfprintf_r+0xe10>
 801505e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015062:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015064:	f002 fa50 	bl	8017508 <__ssprint_r>
 8015068:	2800      	cmp	r0, #0
 801506a:	d000      	beq.n	801506e <_svfprintf_r+0xe0e>
 801506c:	e31c      	b.n	80156a8 <_svfprintf_r+0x1448>
 801506e:	a92f      	add	r1, sp, #188	; 0xbc
 8015070:	3c10      	subs	r4, #16
 8015072:	000f      	movs	r7, r1
 8015074:	f7ff fb2c 	bl	80146d0 <_svfprintf_r+0x470>
 8015078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801507a:	2b65      	cmp	r3, #101	; 0x65
 801507c:	dc00      	bgt.n	8015080 <_svfprintf_r+0xe20>
 801507e:	e259      	b.n	8015534 <_svfprintf_r+0x12d4>
 8015080:	2200      	movs	r2, #0
 8015082:	2300      	movs	r3, #0
 8015084:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015086:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015088:	f7eb f9e8 	bl	800045c <__aeabi_dcmpeq>
 801508c:	2800      	cmp	r0, #0
 801508e:	d07c      	beq.n	801518a <_svfprintf_r+0xf2a>
 8015090:	4b81      	ldr	r3, [pc, #516]	; (8015298 <_svfprintf_r+0x1038>)
 8015092:	603b      	str	r3, [r7, #0]
 8015094:	2301      	movs	r3, #1
 8015096:	607b      	str	r3, [r7, #4]
 8015098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801509a:	3708      	adds	r7, #8
 801509c:	3301      	adds	r3, #1
 801509e:	932e      	str	r3, [sp, #184]	; 0xb8
 80150a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150a2:	9308      	str	r3, [sp, #32]
 80150a4:	3301      	adds	r3, #1
 80150a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80150a8:	2b07      	cmp	r3, #7
 80150aa:	dd08      	ble.n	80150be <_svfprintf_r+0xe5e>
 80150ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80150ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150b2:	f002 fa29 	bl	8017508 <__ssprint_r>
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d000      	beq.n	80150bc <_svfprintf_r+0xe5c>
 80150ba:	e2f5      	b.n	80156a8 <_svfprintf_r+0x1448>
 80150bc:	af2f      	add	r7, sp, #188	; 0xbc
 80150be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80150c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150c2:	4293      	cmp	r3, r2
 80150c4:	db01      	blt.n	80150ca <_svfprintf_r+0xe6a>
 80150c6:	07f3      	lsls	r3, r6, #31
 80150c8:	d51d      	bpl.n	8015106 <_svfprintf_r+0xea6>
 80150ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150ce:	4694      	mov	ip, r2
 80150d0:	603b      	str	r3, [r7, #0]
 80150d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150d4:	607b      	str	r3, [r7, #4]
 80150d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150d8:	3708      	adds	r7, #8
 80150da:	4463      	add	r3, ip
 80150dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80150de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150e0:	9308      	str	r3, [sp, #32]
 80150e2:	3301      	adds	r3, #1
 80150e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80150e6:	2b07      	cmp	r3, #7
 80150e8:	dd08      	ble.n	80150fc <_svfprintf_r+0xe9c>
 80150ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80150ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150f0:	f002 fa0a 	bl	8017508 <__ssprint_r>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d000      	beq.n	80150fa <_svfprintf_r+0xe9a>
 80150f8:	e2d6      	b.n	80156a8 <_svfprintf_r+0x1448>
 80150fa:	af2f      	add	r7, sp, #188	; 0xbc
 80150fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150fe:	2510      	movs	r5, #16
 8015100:	1e5c      	subs	r4, r3, #1
 8015102:	2c00      	cmp	r4, #0
 8015104:	dc2f      	bgt.n	8015166 <_svfprintf_r+0xf06>
 8015106:	0773      	lsls	r3, r6, #29
 8015108:	d500      	bpl.n	801510c <_svfprintf_r+0xeac>
 801510a:	e2af      	b.n	801566c <_svfprintf_r+0x140c>
 801510c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801510e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015110:	4293      	cmp	r3, r2
 8015112:	da00      	bge.n	8015116 <_svfprintf_r+0xeb6>
 8015114:	0013      	movs	r3, r2
 8015116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015118:	18d3      	adds	r3, r2, r3
 801511a:	9315      	str	r3, [sp, #84]	; 0x54
 801511c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801511e:	9308      	str	r3, [sp, #32]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d007      	beq.n	8015134 <_svfprintf_r+0xed4>
 8015124:	aa2c      	add	r2, sp, #176	; 0xb0
 8015126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015128:	980a      	ldr	r0, [sp, #40]	; 0x28
 801512a:	f002 f9ed 	bl	8017508 <__ssprint_r>
 801512e:	2800      	cmp	r0, #0
 8015130:	d000      	beq.n	8015134 <_svfprintf_r+0xed4>
 8015132:	e2b9      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015134:	2300      	movs	r3, #0
 8015136:	932d      	str	r3, [sp, #180]	; 0xb4
 8015138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801513a:	2b00      	cmp	r3, #0
 801513c:	d000      	beq.n	8015140 <_svfprintf_r+0xee0>
 801513e:	e2cf      	b.n	80156e0 <_svfprintf_r+0x1480>
 8015140:	af2f      	add	r7, sp, #188	; 0xbc
 8015142:	e5d6      	b.n	8014cf2 <_svfprintf_r+0xa92>
 8015144:	3210      	adds	r2, #16
 8015146:	607d      	str	r5, [r7, #4]
 8015148:	922e      	str	r2, [sp, #184]	; 0xb8
 801514a:	932d      	str	r3, [sp, #180]	; 0xb4
 801514c:	2b07      	cmp	r3, #7
 801514e:	dd08      	ble.n	8015162 <_svfprintf_r+0xf02>
 8015150:	aa2c      	add	r2, sp, #176	; 0xb0
 8015152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015156:	f002 f9d7 	bl	8017508 <__ssprint_r>
 801515a:	2800      	cmp	r0, #0
 801515c:	d000      	beq.n	8015160 <_svfprintf_r+0xf00>
 801515e:	e2a3      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015160:	a92f      	add	r1, sp, #188	; 0xbc
 8015162:	000f      	movs	r7, r1
 8015164:	3c10      	subs	r4, #16
 8015166:	0039      	movs	r1, r7
 8015168:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801516a:	484c      	ldr	r0, [pc, #304]	; (801529c <_svfprintf_r+0x103c>)
 801516c:	9308      	str	r3, [sp, #32]
 801516e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015170:	3301      	adds	r3, #1
 8015172:	3108      	adds	r1, #8
 8015174:	6038      	str	r0, [r7, #0]
 8015176:	2c10      	cmp	r4, #16
 8015178:	dce4      	bgt.n	8015144 <_svfprintf_r+0xee4>
 801517a:	607c      	str	r4, [r7, #4]
 801517c:	18a4      	adds	r4, r4, r2
 801517e:	942e      	str	r4, [sp, #184]	; 0xb8
 8015180:	932d      	str	r3, [sp, #180]	; 0xb4
 8015182:	000f      	movs	r7, r1
 8015184:	2b07      	cmp	r3, #7
 8015186:	ddbe      	ble.n	8015106 <_svfprintf_r+0xea6>
 8015188:	e06a      	b.n	8015260 <_svfprintf_r+0x1000>
 801518a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801518c:	2b00      	cmp	r3, #0
 801518e:	dd00      	ble.n	8015192 <_svfprintf_r+0xf32>
 8015190:	e086      	b.n	80152a0 <_svfprintf_r+0x1040>
 8015192:	4b41      	ldr	r3, [pc, #260]	; (8015298 <_svfprintf_r+0x1038>)
 8015194:	603b      	str	r3, [r7, #0]
 8015196:	2301      	movs	r3, #1
 8015198:	607b      	str	r3, [r7, #4]
 801519a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801519c:	3708      	adds	r7, #8
 801519e:	3301      	adds	r3, #1
 80151a0:	932e      	str	r3, [sp, #184]	; 0xb8
 80151a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151a4:	9308      	str	r3, [sp, #32]
 80151a6:	3301      	adds	r3, #1
 80151a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80151aa:	2b07      	cmp	r3, #7
 80151ac:	dd08      	ble.n	80151c0 <_svfprintf_r+0xf60>
 80151ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80151b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151b4:	f002 f9a8 	bl	8017508 <__ssprint_r>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d000      	beq.n	80151be <_svfprintf_r+0xf5e>
 80151bc:	e274      	b.n	80156a8 <_svfprintf_r+0x1448>
 80151be:	af2f      	add	r7, sp, #188	; 0xbc
 80151c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d104      	bne.n	80151d0 <_svfprintf_r+0xf70>
 80151c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d101      	bne.n	80151d0 <_svfprintf_r+0xf70>
 80151cc:	07f3      	lsls	r3, r6, #31
 80151ce:	d59a      	bpl.n	8015106 <_svfprintf_r+0xea6>
 80151d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80151d4:	4694      	mov	ip, r2
 80151d6:	603b      	str	r3, [r7, #0]
 80151d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151da:	607b      	str	r3, [r7, #4]
 80151dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80151de:	3708      	adds	r7, #8
 80151e0:	4463      	add	r3, ip
 80151e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80151e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151e6:	9308      	str	r3, [sp, #32]
 80151e8:	3301      	adds	r3, #1
 80151ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80151ec:	2b07      	cmp	r3, #7
 80151ee:	dd08      	ble.n	8015202 <_svfprintf_r+0xfa2>
 80151f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80151f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151f6:	f002 f987 	bl	8017508 <__ssprint_r>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d000      	beq.n	8015200 <_svfprintf_r+0xfa0>
 80151fe:	e253      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015200:	af2f      	add	r7, sp, #188	; 0xbc
 8015202:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015204:	2c00      	cmp	r4, #0
 8015206:	da1a      	bge.n	801523e <_svfprintf_r+0xfde>
 8015208:	0039      	movs	r1, r7
 801520a:	2510      	movs	r5, #16
 801520c:	4264      	negs	r4, r4
 801520e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015210:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015212:	9308      	str	r3, [sp, #32]
 8015214:	1c5a      	adds	r2, r3, #1
 8015216:	4b21      	ldr	r3, [pc, #132]	; (801529c <_svfprintf_r+0x103c>)
 8015218:	3708      	adds	r7, #8
 801521a:	600b      	str	r3, [r1, #0]
 801521c:	2c10      	cmp	r4, #16
 801521e:	dc29      	bgt.n	8015274 <_svfprintf_r+0x1014>
 8015220:	604c      	str	r4, [r1, #4]
 8015222:	1824      	adds	r4, r4, r0
 8015224:	942e      	str	r4, [sp, #184]	; 0xb8
 8015226:	922d      	str	r2, [sp, #180]	; 0xb4
 8015228:	2a07      	cmp	r2, #7
 801522a:	dd08      	ble.n	801523e <_svfprintf_r+0xfde>
 801522c:	aa2c      	add	r2, sp, #176	; 0xb0
 801522e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015230:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015232:	f002 f969 	bl	8017508 <__ssprint_r>
 8015236:	2800      	cmp	r0, #0
 8015238:	d000      	beq.n	801523c <_svfprintf_r+0xfdc>
 801523a:	e235      	b.n	80156a8 <_svfprintf_r+0x1448>
 801523c:	af2f      	add	r7, sp, #188	; 0xbc
 801523e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015242:	468c      	mov	ip, r1
 8015244:	603b      	str	r3, [r7, #0]
 8015246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015248:	607b      	str	r3, [r7, #4]
 801524a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801524c:	4463      	add	r3, ip
 801524e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015250:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015252:	1c5a      	adds	r2, r3, #1
 8015254:	9308      	str	r3, [sp, #32]
 8015256:	922d      	str	r2, [sp, #180]	; 0xb4
 8015258:	2a07      	cmp	r2, #7
 801525a:	dc01      	bgt.n	8015260 <_svfprintf_r+0x1000>
 801525c:	f7ff fa6c 	bl	8014738 <_svfprintf_r+0x4d8>
 8015260:	aa2c      	add	r2, sp, #176	; 0xb0
 8015262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015264:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015266:	f002 f94f 	bl	8017508 <__ssprint_r>
 801526a:	2800      	cmp	r0, #0
 801526c:	d000      	beq.n	8015270 <_svfprintf_r+0x1010>
 801526e:	e21b      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015270:	af2f      	add	r7, sp, #188	; 0xbc
 8015272:	e748      	b.n	8015106 <_svfprintf_r+0xea6>
 8015274:	3010      	adds	r0, #16
 8015276:	604d      	str	r5, [r1, #4]
 8015278:	902e      	str	r0, [sp, #184]	; 0xb8
 801527a:	922d      	str	r2, [sp, #180]	; 0xb4
 801527c:	2a07      	cmp	r2, #7
 801527e:	dd08      	ble.n	8015292 <_svfprintf_r+0x1032>
 8015280:	aa2c      	add	r2, sp, #176	; 0xb0
 8015282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015284:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015286:	f002 f93f 	bl	8017508 <__ssprint_r>
 801528a:	2800      	cmp	r0, #0
 801528c:	d000      	beq.n	8015290 <_svfprintf_r+0x1030>
 801528e:	e20b      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015290:	af2f      	add	r7, sp, #188	; 0xbc
 8015292:	3c10      	subs	r4, #16
 8015294:	0039      	movs	r1, r7
 8015296:	e7ba      	b.n	801520e <_svfprintf_r+0xfae>
 8015298:	0801a8fa 	.word	0x0801a8fa
 801529c:	0801a90c 	.word	0x0801a90c
 80152a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152a2:	002c      	movs	r4, r5
 80152a4:	429d      	cmp	r5, r3
 80152a6:	dd00      	ble.n	80152aa <_svfprintf_r+0x104a>
 80152a8:	001c      	movs	r4, r3
 80152aa:	2c00      	cmp	r4, #0
 80152ac:	dd15      	ble.n	80152da <_svfprintf_r+0x107a>
 80152ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b0:	607c      	str	r4, [r7, #4]
 80152b2:	603b      	str	r3, [r7, #0]
 80152b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152b6:	3708      	adds	r7, #8
 80152b8:	18e3      	adds	r3, r4, r3
 80152ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80152bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152be:	9308      	str	r3, [sp, #32]
 80152c0:	3301      	adds	r3, #1
 80152c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80152c4:	2b07      	cmp	r3, #7
 80152c6:	dd08      	ble.n	80152da <_svfprintf_r+0x107a>
 80152c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80152ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152ce:	f002 f91b 	bl	8017508 <__ssprint_r>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d000      	beq.n	80152d8 <_svfprintf_r+0x1078>
 80152d6:	e1e7      	b.n	80156a8 <_svfprintf_r+0x1448>
 80152d8:	af2f      	add	r7, sp, #188	; 0xbc
 80152da:	43e3      	mvns	r3, r4
 80152dc:	17db      	asrs	r3, r3, #31
 80152de:	401c      	ands	r4, r3
 80152e0:	1b2c      	subs	r4, r5, r4
 80152e2:	2c00      	cmp	r4, #0
 80152e4:	dd1a      	ble.n	801531c <_svfprintf_r+0x10bc>
 80152e6:	0039      	movs	r1, r7
 80152e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152ea:	48d4      	ldr	r0, [pc, #848]	; (801563c <_svfprintf_r+0x13dc>)
 80152ec:	9308      	str	r3, [sp, #32]
 80152ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80152f0:	3301      	adds	r3, #1
 80152f2:	3108      	adds	r1, #8
 80152f4:	6038      	str	r0, [r7, #0]
 80152f6:	2c10      	cmp	r4, #16
 80152f8:	dd00      	ble.n	80152fc <_svfprintf_r+0x109c>
 80152fa:	e089      	b.n	8015410 <_svfprintf_r+0x11b0>
 80152fc:	607c      	str	r4, [r7, #4]
 80152fe:	18a4      	adds	r4, r4, r2
 8015300:	942e      	str	r4, [sp, #184]	; 0xb8
 8015302:	932d      	str	r3, [sp, #180]	; 0xb4
 8015304:	000f      	movs	r7, r1
 8015306:	2b07      	cmp	r3, #7
 8015308:	dd08      	ble.n	801531c <_svfprintf_r+0x10bc>
 801530a:	aa2c      	add	r2, sp, #176	; 0xb0
 801530c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801530e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015310:	f002 f8fa 	bl	8017508 <__ssprint_r>
 8015314:	2800      	cmp	r0, #0
 8015316:	d000      	beq.n	801531a <_svfprintf_r+0x10ba>
 8015318:	e1c6      	b.n	80156a8 <_svfprintf_r+0x1448>
 801531a:	af2f      	add	r7, sp, #188	; 0xbc
 801531c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801531e:	195d      	adds	r5, r3, r5
 8015320:	0573      	lsls	r3, r6, #21
 8015322:	d50d      	bpl.n	8015340 <_svfprintf_r+0x10e0>
 8015324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015326:	2b00      	cmp	r3, #0
 8015328:	d000      	beq.n	801532c <_svfprintf_r+0x10cc>
 801532a:	e084      	b.n	8015436 <_svfprintf_r+0x11d6>
 801532c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801532e:	2b00      	cmp	r3, #0
 8015330:	d000      	beq.n	8015334 <_svfprintf_r+0x10d4>
 8015332:	e083      	b.n	801543c <_svfprintf_r+0x11dc>
 8015334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015338:	189b      	adds	r3, r3, r2
 801533a:	429d      	cmp	r5, r3
 801533c:	d900      	bls.n	8015340 <_svfprintf_r+0x10e0>
 801533e:	001d      	movs	r5, r3
 8015340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015344:	4293      	cmp	r3, r2
 8015346:	db01      	blt.n	801534c <_svfprintf_r+0x10ec>
 8015348:	07f3      	lsls	r3, r6, #31
 801534a:	d518      	bpl.n	801537e <_svfprintf_r+0x111e>
 801534c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801534e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015350:	4694      	mov	ip, r2
 8015352:	603b      	str	r3, [r7, #0]
 8015354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015356:	607b      	str	r3, [r7, #4]
 8015358:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801535a:	3708      	adds	r7, #8
 801535c:	4463      	add	r3, ip
 801535e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015360:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015362:	9308      	str	r3, [sp, #32]
 8015364:	3301      	adds	r3, #1
 8015366:	932d      	str	r3, [sp, #180]	; 0xb4
 8015368:	2b07      	cmp	r3, #7
 801536a:	dd08      	ble.n	801537e <_svfprintf_r+0x111e>
 801536c:	aa2c      	add	r2, sp, #176	; 0xb0
 801536e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015370:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015372:	f002 f8c9 	bl	8017508 <__ssprint_r>
 8015376:	2800      	cmp	r0, #0
 8015378:	d000      	beq.n	801537c <_svfprintf_r+0x111c>
 801537a:	e195      	b.n	80156a8 <_svfprintf_r+0x1448>
 801537c:	af2f      	add	r7, sp, #188	; 0xbc
 801537e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015382:	4694      	mov	ip, r2
 8015384:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015386:	4463      	add	r3, ip
 8015388:	1b5b      	subs	r3, r3, r5
 801538a:	1a54      	subs	r4, r2, r1
 801538c:	429c      	cmp	r4, r3
 801538e:	dd00      	ble.n	8015392 <_svfprintf_r+0x1132>
 8015390:	001c      	movs	r4, r3
 8015392:	2c00      	cmp	r4, #0
 8015394:	dd14      	ble.n	80153c0 <_svfprintf_r+0x1160>
 8015396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015398:	603d      	str	r5, [r7, #0]
 801539a:	18e3      	adds	r3, r4, r3
 801539c:	932e      	str	r3, [sp, #184]	; 0xb8
 801539e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153a0:	607c      	str	r4, [r7, #4]
 80153a2:	9308      	str	r3, [sp, #32]
 80153a4:	3301      	adds	r3, #1
 80153a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80153a8:	3708      	adds	r7, #8
 80153aa:	2b07      	cmp	r3, #7
 80153ac:	dd08      	ble.n	80153c0 <_svfprintf_r+0x1160>
 80153ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80153b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153b4:	f002 f8a8 	bl	8017508 <__ssprint_r>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d000      	beq.n	80153be <_svfprintf_r+0x115e>
 80153bc:	e174      	b.n	80156a8 <_svfprintf_r+0x1448>
 80153be:	af2f      	add	r7, sp, #188	; 0xbc
 80153c0:	43e3      	mvns	r3, r4
 80153c2:	17db      	asrs	r3, r3, #31
 80153c4:	401c      	ands	r4, r3
 80153c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80153c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ca:	2510      	movs	r5, #16
 80153cc:	1a9b      	subs	r3, r3, r2
 80153ce:	1b1c      	subs	r4, r3, r4
 80153d0:	2c00      	cmp	r4, #0
 80153d2:	dc00      	bgt.n	80153d6 <_svfprintf_r+0x1176>
 80153d4:	e697      	b.n	8015106 <_svfprintf_r+0xea6>
 80153d6:	0039      	movs	r1, r7
 80153d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153da:	4898      	ldr	r0, [pc, #608]	; (801563c <_svfprintf_r+0x13dc>)
 80153dc:	9308      	str	r3, [sp, #32]
 80153de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80153e0:	3301      	adds	r3, #1
 80153e2:	3108      	adds	r1, #8
 80153e4:	6038      	str	r0, [r7, #0]
 80153e6:	2c10      	cmp	r4, #16
 80153e8:	dc00      	bgt.n	80153ec <_svfprintf_r+0x118c>
 80153ea:	e6c6      	b.n	801517a <_svfprintf_r+0xf1a>
 80153ec:	3210      	adds	r2, #16
 80153ee:	607d      	str	r5, [r7, #4]
 80153f0:	922e      	str	r2, [sp, #184]	; 0xb8
 80153f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80153f4:	2b07      	cmp	r3, #7
 80153f6:	dd08      	ble.n	801540a <_svfprintf_r+0x11aa>
 80153f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80153fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153fe:	f002 f883 	bl	8017508 <__ssprint_r>
 8015402:	2800      	cmp	r0, #0
 8015404:	d000      	beq.n	8015408 <_svfprintf_r+0x11a8>
 8015406:	e14f      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015408:	a92f      	add	r1, sp, #188	; 0xbc
 801540a:	3c10      	subs	r4, #16
 801540c:	000f      	movs	r7, r1
 801540e:	e7e2      	b.n	80153d6 <_svfprintf_r+0x1176>
 8015410:	2010      	movs	r0, #16
 8015412:	1812      	adds	r2, r2, r0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	922e      	str	r2, [sp, #184]	; 0xb8
 8015418:	932d      	str	r3, [sp, #180]	; 0xb4
 801541a:	2b07      	cmp	r3, #7
 801541c:	dd08      	ble.n	8015430 <_svfprintf_r+0x11d0>
 801541e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015422:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015424:	f002 f870 	bl	8017508 <__ssprint_r>
 8015428:	2800      	cmp	r0, #0
 801542a:	d000      	beq.n	801542e <_svfprintf_r+0x11ce>
 801542c:	e13c      	b.n	80156a8 <_svfprintf_r+0x1448>
 801542e:	a92f      	add	r1, sp, #188	; 0xbc
 8015430:	3c10      	subs	r4, #16
 8015432:	000f      	movs	r7, r1
 8015434:	e757      	b.n	80152e6 <_svfprintf_r+0x1086>
 8015436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015438:	2b00      	cmp	r3, #0
 801543a:	d061      	beq.n	8015500 <_svfprintf_r+0x12a0>
 801543c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801543e:	3b01      	subs	r3, #1
 8015440:	9310      	str	r3, [sp, #64]	; 0x40
 8015442:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015444:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015446:	4694      	mov	ip, r2
 8015448:	603b      	str	r3, [r7, #0]
 801544a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801544c:	607b      	str	r3, [r7, #4]
 801544e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015450:	3708      	adds	r7, #8
 8015452:	4463      	add	r3, ip
 8015454:	932e      	str	r3, [sp, #184]	; 0xb8
 8015456:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015458:	9308      	str	r3, [sp, #32]
 801545a:	3301      	adds	r3, #1
 801545c:	932d      	str	r3, [sp, #180]	; 0xb4
 801545e:	2b07      	cmp	r3, #7
 8015460:	dd08      	ble.n	8015474 <_svfprintf_r+0x1214>
 8015462:	aa2c      	add	r2, sp, #176	; 0xb0
 8015464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015466:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015468:	f002 f84e 	bl	8017508 <__ssprint_r>
 801546c:	2800      	cmp	r0, #0
 801546e:	d000      	beq.n	8015472 <_svfprintf_r+0x1212>
 8015470:	e11a      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015472:	af2f      	add	r7, sp, #188	; 0xbc
 8015474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015478:	189b      	adds	r3, r3, r2
 801547a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801547c:	1b5b      	subs	r3, r3, r5
 801547e:	7814      	ldrb	r4, [r2, #0]
 8015480:	429c      	cmp	r4, r3
 8015482:	dd00      	ble.n	8015486 <_svfprintf_r+0x1226>
 8015484:	001c      	movs	r4, r3
 8015486:	2c00      	cmp	r4, #0
 8015488:	dd14      	ble.n	80154b4 <_svfprintf_r+0x1254>
 801548a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801548c:	603d      	str	r5, [r7, #0]
 801548e:	18e3      	adds	r3, r4, r3
 8015490:	932e      	str	r3, [sp, #184]	; 0xb8
 8015492:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015494:	607c      	str	r4, [r7, #4]
 8015496:	9308      	str	r3, [sp, #32]
 8015498:	3301      	adds	r3, #1
 801549a:	932d      	str	r3, [sp, #180]	; 0xb4
 801549c:	3708      	adds	r7, #8
 801549e:	2b07      	cmp	r3, #7
 80154a0:	dd08      	ble.n	80154b4 <_svfprintf_r+0x1254>
 80154a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80154a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154a8:	f002 f82e 	bl	8017508 <__ssprint_r>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d000      	beq.n	80154b2 <_svfprintf_r+0x1252>
 80154b0:	e0fa      	b.n	80156a8 <_svfprintf_r+0x1448>
 80154b2:	af2f      	add	r7, sp, #188	; 0xbc
 80154b4:	43e3      	mvns	r3, r4
 80154b6:	17db      	asrs	r3, r3, #31
 80154b8:	401c      	ands	r4, r3
 80154ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	1b1c      	subs	r4, r3, r4
 80154c0:	2c00      	cmp	r4, #0
 80154c2:	dd19      	ble.n	80154f8 <_svfprintf_r+0x1298>
 80154c4:	0039      	movs	r1, r7
 80154c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154c8:	485c      	ldr	r0, [pc, #368]	; (801563c <_svfprintf_r+0x13dc>)
 80154ca:	9308      	str	r3, [sp, #32]
 80154cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154ce:	3301      	adds	r3, #1
 80154d0:	3108      	adds	r1, #8
 80154d2:	6038      	str	r0, [r7, #0]
 80154d4:	2c10      	cmp	r4, #16
 80154d6:	dc1a      	bgt.n	801550e <_svfprintf_r+0x12ae>
 80154d8:	607c      	str	r4, [r7, #4]
 80154da:	18a4      	adds	r4, r4, r2
 80154dc:	942e      	str	r4, [sp, #184]	; 0xb8
 80154de:	932d      	str	r3, [sp, #180]	; 0xb4
 80154e0:	000f      	movs	r7, r1
 80154e2:	2b07      	cmp	r3, #7
 80154e4:	dd08      	ble.n	80154f8 <_svfprintf_r+0x1298>
 80154e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80154e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154ec:	f002 f80c 	bl	8017508 <__ssprint_r>
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d000      	beq.n	80154f6 <_svfprintf_r+0x1296>
 80154f4:	e0d8      	b.n	80156a8 <_svfprintf_r+0x1448>
 80154f6:	af2f      	add	r7, sp, #188	; 0xbc
 80154f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	18ed      	adds	r5, r5, r3
 80154fe:	e711      	b.n	8015324 <_svfprintf_r+0x10c4>
 8015500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015502:	3b01      	subs	r3, #1
 8015504:	9313      	str	r3, [sp, #76]	; 0x4c
 8015506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015508:	3b01      	subs	r3, #1
 801550a:	930f      	str	r3, [sp, #60]	; 0x3c
 801550c:	e799      	b.n	8015442 <_svfprintf_r+0x11e2>
 801550e:	2010      	movs	r0, #16
 8015510:	1812      	adds	r2, r2, r0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	922e      	str	r2, [sp, #184]	; 0xb8
 8015516:	932d      	str	r3, [sp, #180]	; 0xb4
 8015518:	2b07      	cmp	r3, #7
 801551a:	dd08      	ble.n	801552e <_svfprintf_r+0x12ce>
 801551c:	aa2c      	add	r2, sp, #176	; 0xb0
 801551e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015520:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015522:	f001 fff1 	bl	8017508 <__ssprint_r>
 8015526:	2800      	cmp	r0, #0
 8015528:	d000      	beq.n	801552c <_svfprintf_r+0x12cc>
 801552a:	e0bd      	b.n	80156a8 <_svfprintf_r+0x1448>
 801552c:	a92f      	add	r1, sp, #188	; 0xbc
 801552e:	3c10      	subs	r4, #16
 8015530:	000f      	movs	r7, r1
 8015532:	e7c7      	b.n	80154c4 <_svfprintf_r+0x1264>
 8015534:	003c      	movs	r4, r7
 8015536:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015538:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801553a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801553c:	9308      	str	r3, [sp, #32]
 801553e:	3101      	adds	r1, #1
 8015540:	3301      	adds	r3, #1
 8015542:	3408      	adds	r4, #8
 8015544:	2a01      	cmp	r2, #1
 8015546:	dc03      	bgt.n	8015550 <_svfprintf_r+0x12f0>
 8015548:	2201      	movs	r2, #1
 801554a:	4216      	tst	r6, r2
 801554c:	d100      	bne.n	8015550 <_svfprintf_r+0x12f0>
 801554e:	e088      	b.n	8015662 <_svfprintf_r+0x1402>
 8015550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015552:	912e      	str	r1, [sp, #184]	; 0xb8
 8015554:	603a      	str	r2, [r7, #0]
 8015556:	2201      	movs	r2, #1
 8015558:	932d      	str	r3, [sp, #180]	; 0xb4
 801555a:	607a      	str	r2, [r7, #4]
 801555c:	2b07      	cmp	r3, #7
 801555e:	dd08      	ble.n	8015572 <_svfprintf_r+0x1312>
 8015560:	aa2c      	add	r2, sp, #176	; 0xb0
 8015562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015564:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015566:	f001 ffcf 	bl	8017508 <__ssprint_r>
 801556a:	2800      	cmp	r0, #0
 801556c:	d000      	beq.n	8015570 <_svfprintf_r+0x1310>
 801556e:	e09b      	b.n	80156a8 <_svfprintf_r+0x1448>
 8015570:	ac2f      	add	r4, sp, #188	; 0xbc
 8015572:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015574:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015576:	4694      	mov	ip, r2
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801557c:	6063      	str	r3, [r4, #4]
 801557e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015580:	3408      	adds	r4, #8
 8015582:	4463      	add	r3, ip
 8015584:	932e      	str	r3, [sp, #184]	; 0xb8
 8015586:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015588:	9308      	str	r3, [sp, #32]
 801558a:	3301      	adds	r3, #1
 801558c:	932d      	str	r3, [sp, #180]	; 0xb4
 801558e:	2b07      	cmp	r3, #7
 8015590:	dd08      	ble.n	80155a4 <_svfprintf_r+0x1344>
 8015592:	aa2c      	add	r2, sp, #176	; 0xb0
 8015594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015598:	f001 ffb6 	bl	8017508 <__ssprint_r>
 801559c:	2800      	cmp	r0, #0
 801559e:	d000      	beq.n	80155a2 <_svfprintf_r+0x1342>
 80155a0:	e082      	b.n	80156a8 <_svfprintf_r+0x1448>
 80155a2:	ac2f      	add	r4, sp, #188	; 0xbc
 80155a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155a6:	2200      	movs	r2, #0
 80155a8:	1e5d      	subs	r5, r3, #1
 80155aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80155ac:	2300      	movs	r3, #0
 80155ae:	9919      	ldr	r1, [sp, #100]	; 0x64
 80155b0:	f7ea ff54 	bl	800045c <__aeabi_dcmpeq>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d12c      	bne.n	8015612 <_svfprintf_r+0x13b2>
 80155b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80155bc:	9308      	str	r3, [sp, #32]
 80155be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155c0:	6065      	str	r5, [r4, #4]
 80155c2:	1c5a      	adds	r2, r3, #1
 80155c4:	930e      	str	r3, [sp, #56]	; 0x38
 80155c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c8:	922d      	str	r2, [sp, #180]	; 0xb4
 80155ca:	3301      	adds	r3, #1
 80155cc:	6023      	str	r3, [r4, #0]
 80155ce:	9b08      	ldr	r3, [sp, #32]
 80155d0:	3408      	adds	r4, #8
 80155d2:	3b01      	subs	r3, #1
 80155d4:	185b      	adds	r3, r3, r1
 80155d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80155d8:	2a07      	cmp	r2, #7
 80155da:	dd07      	ble.n	80155ec <_svfprintf_r+0x138c>
 80155dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80155de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155e2:	f001 ff91 	bl	8017508 <__ssprint_r>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d15e      	bne.n	80156a8 <_svfprintf_r+0x1448>
 80155ea:	ac2f      	add	r4, sp, #188	; 0xbc
 80155ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80155ee:	ab28      	add	r3, sp, #160	; 0xa0
 80155f0:	4694      	mov	ip, r2
 80155f2:	6023      	str	r3, [r4, #0]
 80155f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155f6:	6063      	str	r3, [r4, #4]
 80155f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155fa:	4463      	add	r3, ip
 80155fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80155fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015600:	9308      	str	r3, [sp, #32]
 8015602:	3301      	adds	r3, #1
 8015604:	932d      	str	r3, [sp, #180]	; 0xb4
 8015606:	2b07      	cmp	r3, #7
 8015608:	dd00      	ble.n	801560c <_svfprintf_r+0x13ac>
 801560a:	e629      	b.n	8015260 <_svfprintf_r+0x1000>
 801560c:	3408      	adds	r4, #8
 801560e:	0027      	movs	r7, r4
 8015610:	e579      	b.n	8015106 <_svfprintf_r+0xea6>
 8015612:	2710      	movs	r7, #16
 8015614:	2d00      	cmp	r5, #0
 8015616:	dde9      	ble.n	80155ec <_svfprintf_r+0x138c>
 8015618:	0021      	movs	r1, r4
 801561a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801561c:	4807      	ldr	r0, [pc, #28]	; (801563c <_svfprintf_r+0x13dc>)
 801561e:	9308      	str	r3, [sp, #32]
 8015620:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015622:	3301      	adds	r3, #1
 8015624:	3108      	adds	r1, #8
 8015626:	6020      	str	r0, [r4, #0]
 8015628:	2d10      	cmp	r5, #16
 801562a:	dc09      	bgt.n	8015640 <_svfprintf_r+0x13e0>
 801562c:	6065      	str	r5, [r4, #4]
 801562e:	000c      	movs	r4, r1
 8015630:	18ad      	adds	r5, r5, r2
 8015632:	952e      	str	r5, [sp, #184]	; 0xb8
 8015634:	932d      	str	r3, [sp, #180]	; 0xb4
 8015636:	2b07      	cmp	r3, #7
 8015638:	ddd8      	ble.n	80155ec <_svfprintf_r+0x138c>
 801563a:	e7cf      	b.n	80155dc <_svfprintf_r+0x137c>
 801563c:	0801a90c 	.word	0x0801a90c
 8015640:	3210      	adds	r2, #16
 8015642:	6067      	str	r7, [r4, #4]
 8015644:	922e      	str	r2, [sp, #184]	; 0xb8
 8015646:	932d      	str	r3, [sp, #180]	; 0xb4
 8015648:	2b07      	cmp	r3, #7
 801564a:	dd07      	ble.n	801565c <_svfprintf_r+0x13fc>
 801564c:	aa2c      	add	r2, sp, #176	; 0xb0
 801564e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015650:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015652:	f001 ff59 	bl	8017508 <__ssprint_r>
 8015656:	2800      	cmp	r0, #0
 8015658:	d126      	bne.n	80156a8 <_svfprintf_r+0x1448>
 801565a:	a92f      	add	r1, sp, #188	; 0xbc
 801565c:	3d10      	subs	r5, #16
 801565e:	000c      	movs	r4, r1
 8015660:	e7da      	b.n	8015618 <_svfprintf_r+0x13b8>
 8015662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015664:	912e      	str	r1, [sp, #184]	; 0xb8
 8015666:	c705      	stmia	r7!, {r0, r2}
 8015668:	932d      	str	r3, [sp, #180]	; 0xb4
 801566a:	e7e4      	b.n	8015636 <_svfprintf_r+0x13d6>
 801566c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801566e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015670:	2510      	movs	r5, #16
 8015672:	1a9c      	subs	r4, r3, r2
 8015674:	2c00      	cmp	r4, #0
 8015676:	dc00      	bgt.n	801567a <_svfprintf_r+0x141a>
 8015678:	e548      	b.n	801510c <_svfprintf_r+0xeac>
 801567a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801567c:	4921      	ldr	r1, [pc, #132]	; (8015704 <_svfprintf_r+0x14a4>)
 801567e:	9308      	str	r3, [sp, #32]
 8015680:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015682:	3301      	adds	r3, #1
 8015684:	6039      	str	r1, [r7, #0]
 8015686:	2c10      	cmp	r4, #16
 8015688:	dc19      	bgt.n	80156be <_svfprintf_r+0x145e>
 801568a:	607c      	str	r4, [r7, #4]
 801568c:	18a4      	adds	r4, r4, r2
 801568e:	942e      	str	r4, [sp, #184]	; 0xb8
 8015690:	932d      	str	r3, [sp, #180]	; 0xb4
 8015692:	2b07      	cmp	r3, #7
 8015694:	dc00      	bgt.n	8015698 <_svfprintf_r+0x1438>
 8015696:	e539      	b.n	801510c <_svfprintf_r+0xeac>
 8015698:	aa2c      	add	r2, sp, #176	; 0xb0
 801569a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801569c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801569e:	f001 ff33 	bl	8017508 <__ssprint_r>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d100      	bne.n	80156a8 <_svfprintf_r+0x1448>
 80156a6:	e531      	b.n	801510c <_svfprintf_r+0xeac>
 80156a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d101      	bne.n	80156b2 <_svfprintf_r+0x1452>
 80156ae:	f7ff f908 	bl	80148c2 <_svfprintf_r+0x662>
 80156b2:	0019      	movs	r1, r3
 80156b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156b6:	f000 ff19 	bl	80164ec <_free_r>
 80156ba:	f7ff f902 	bl	80148c2 <_svfprintf_r+0x662>
 80156be:	3210      	adds	r2, #16
 80156c0:	607d      	str	r5, [r7, #4]
 80156c2:	922e      	str	r2, [sp, #184]	; 0xb8
 80156c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80156c6:	3708      	adds	r7, #8
 80156c8:	2b07      	cmp	r3, #7
 80156ca:	dd07      	ble.n	80156dc <_svfprintf_r+0x147c>
 80156cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80156ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156d2:	f001 ff19 	bl	8017508 <__ssprint_r>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d1e6      	bne.n	80156a8 <_svfprintf_r+0x1448>
 80156da:	af2f      	add	r7, sp, #188	; 0xbc
 80156dc:	3c10      	subs	r4, #16
 80156de:	e7cc      	b.n	801567a <_svfprintf_r+0x141a>
 80156e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80156e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156e4:	f000 ff02 	bl	80164ec <_free_r>
 80156e8:	e52a      	b.n	8015140 <_svfprintf_r+0xee0>
 80156ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156ec:	9306      	str	r3, [sp, #24]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d101      	bne.n	80156f6 <_svfprintf_r+0x1496>
 80156f2:	f7ff f8e6 	bl	80148c2 <_svfprintf_r+0x662>
 80156f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80156f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156fc:	f001 ff04 	bl	8017508 <__ssprint_r>
 8015700:	f7ff f8df 	bl	80148c2 <_svfprintf_r+0x662>
 8015704:	0801a8fc 	.word	0x0801a8fc

08015708 <sysconf>:
 8015708:	2380      	movs	r3, #128	; 0x80
 801570a:	b510      	push	{r4, lr}
 801570c:	015b      	lsls	r3, r3, #5
 801570e:	2808      	cmp	r0, #8
 8015710:	d004      	beq.n	801571c <sysconf+0x14>
 8015712:	f000 fe7d 	bl	8016410 <__errno>
 8015716:	2316      	movs	r3, #22
 8015718:	6003      	str	r3, [r0, #0]
 801571a:	3b17      	subs	r3, #23
 801571c:	0018      	movs	r0, r3
 801571e:	bd10      	pop	{r4, pc}

08015720 <__ascii_wctomb>:
 8015720:	1e0b      	subs	r3, r1, #0
 8015722:	d004      	beq.n	801572e <__ascii_wctomb+0xe>
 8015724:	2aff      	cmp	r2, #255	; 0xff
 8015726:	d904      	bls.n	8015732 <__ascii_wctomb+0x12>
 8015728:	238a      	movs	r3, #138	; 0x8a
 801572a:	6003      	str	r3, [r0, #0]
 801572c:	3b8b      	subs	r3, #139	; 0x8b
 801572e:	0018      	movs	r0, r3
 8015730:	4770      	bx	lr
 8015732:	700a      	strb	r2, [r1, #0]
 8015734:	2301      	movs	r3, #1
 8015736:	e7fa      	b.n	801572e <__ascii_wctomb+0xe>

08015738 <register_fini>:
 8015738:	4b03      	ldr	r3, [pc, #12]	; (8015748 <register_fini+0x10>)
 801573a:	b510      	push	{r4, lr}
 801573c:	2b00      	cmp	r3, #0
 801573e:	d002      	beq.n	8015746 <register_fini+0xe>
 8015740:	4802      	ldr	r0, [pc, #8]	; (801574c <register_fini+0x14>)
 8015742:	f000 f805 	bl	8015750 <atexit>
 8015746:	bd10      	pop	{r4, pc}
 8015748:	00000000 	.word	0x00000000
 801574c:	0801641d 	.word	0x0801641d

08015750 <atexit>:
 8015750:	2300      	movs	r3, #0
 8015752:	b510      	push	{r4, lr}
 8015754:	0001      	movs	r1, r0
 8015756:	001a      	movs	r2, r3
 8015758:	0018      	movs	r0, r3
 801575a:	f001 ff53 	bl	8017604 <__register_exitproc>
 801575e:	bd10      	pop	{r4, pc}

08015760 <quorem>:
 8015760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015762:	6903      	ldr	r3, [r0, #16]
 8015764:	690c      	ldr	r4, [r1, #16]
 8015766:	b089      	sub	sp, #36	; 0x24
 8015768:	0007      	movs	r7, r0
 801576a:	9105      	str	r1, [sp, #20]
 801576c:	2600      	movs	r6, #0
 801576e:	42a3      	cmp	r3, r4
 8015770:	db65      	blt.n	801583e <quorem+0xde>
 8015772:	000b      	movs	r3, r1
 8015774:	3c01      	subs	r4, #1
 8015776:	3314      	adds	r3, #20
 8015778:	00a5      	lsls	r5, r4, #2
 801577a:	9303      	str	r3, [sp, #12]
 801577c:	195b      	adds	r3, r3, r5
 801577e:	9304      	str	r3, [sp, #16]
 8015780:	0003      	movs	r3, r0
 8015782:	3314      	adds	r3, #20
 8015784:	9302      	str	r3, [sp, #8]
 8015786:	195d      	adds	r5, r3, r5
 8015788:	9b04      	ldr	r3, [sp, #16]
 801578a:	6828      	ldr	r0, [r5, #0]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	1c59      	adds	r1, r3, #1
 8015790:	9301      	str	r3, [sp, #4]
 8015792:	f7ea fcdd 	bl	8000150 <__udivsi3>
 8015796:	9001      	str	r0, [sp, #4]
 8015798:	42b0      	cmp	r0, r6
 801579a:	d029      	beq.n	80157f0 <quorem+0x90>
 801579c:	9b03      	ldr	r3, [sp, #12]
 801579e:	9802      	ldr	r0, [sp, #8]
 80157a0:	469c      	mov	ip, r3
 80157a2:	9606      	str	r6, [sp, #24]
 80157a4:	4662      	mov	r2, ip
 80157a6:	ca08      	ldmia	r2!, {r3}
 80157a8:	4694      	mov	ip, r2
 80157aa:	9a01      	ldr	r2, [sp, #4]
 80157ac:	b299      	uxth	r1, r3
 80157ae:	4351      	muls	r1, r2
 80157b0:	0c1b      	lsrs	r3, r3, #16
 80157b2:	4353      	muls	r3, r2
 80157b4:	1989      	adds	r1, r1, r6
 80157b6:	0c0a      	lsrs	r2, r1, #16
 80157b8:	189b      	adds	r3, r3, r2
 80157ba:	9307      	str	r3, [sp, #28]
 80157bc:	0c1e      	lsrs	r6, r3, #16
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	b289      	uxth	r1, r1
 80157c2:	b29a      	uxth	r2, r3
 80157c4:	9b06      	ldr	r3, [sp, #24]
 80157c6:	18d2      	adds	r2, r2, r3
 80157c8:	6803      	ldr	r3, [r0, #0]
 80157ca:	1a52      	subs	r2, r2, r1
 80157cc:	0c19      	lsrs	r1, r3, #16
 80157ce:	466b      	mov	r3, sp
 80157d0:	8b9b      	ldrh	r3, [r3, #28]
 80157d2:	1acb      	subs	r3, r1, r3
 80157d4:	1411      	asrs	r1, r2, #16
 80157d6:	185b      	adds	r3, r3, r1
 80157d8:	1419      	asrs	r1, r3, #16
 80157da:	b292      	uxth	r2, r2
 80157dc:	041b      	lsls	r3, r3, #16
 80157de:	431a      	orrs	r2, r3
 80157e0:	9b04      	ldr	r3, [sp, #16]
 80157e2:	9106      	str	r1, [sp, #24]
 80157e4:	c004      	stmia	r0!, {r2}
 80157e6:	4563      	cmp	r3, ip
 80157e8:	d2dc      	bcs.n	80157a4 <quorem+0x44>
 80157ea:	682b      	ldr	r3, [r5, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d02d      	beq.n	801584c <quorem+0xec>
 80157f0:	9905      	ldr	r1, [sp, #20]
 80157f2:	0038      	movs	r0, r7
 80157f4:	f001 fcb2 	bl	801715c <__mcmp>
 80157f8:	2800      	cmp	r0, #0
 80157fa:	db1f      	blt.n	801583c <quorem+0xdc>
 80157fc:	2500      	movs	r5, #0
 80157fe:	9b01      	ldr	r3, [sp, #4]
 8015800:	9802      	ldr	r0, [sp, #8]
 8015802:	3301      	adds	r3, #1
 8015804:	9903      	ldr	r1, [sp, #12]
 8015806:	9301      	str	r3, [sp, #4]
 8015808:	6802      	ldr	r2, [r0, #0]
 801580a:	c908      	ldmia	r1!, {r3}
 801580c:	b292      	uxth	r2, r2
 801580e:	1955      	adds	r5, r2, r5
 8015810:	b29a      	uxth	r2, r3
 8015812:	1aaa      	subs	r2, r5, r2
 8015814:	6805      	ldr	r5, [r0, #0]
 8015816:	0c1b      	lsrs	r3, r3, #16
 8015818:	0c2d      	lsrs	r5, r5, #16
 801581a:	1aeb      	subs	r3, r5, r3
 801581c:	1415      	asrs	r5, r2, #16
 801581e:	195b      	adds	r3, r3, r5
 8015820:	141d      	asrs	r5, r3, #16
 8015822:	b292      	uxth	r2, r2
 8015824:	041b      	lsls	r3, r3, #16
 8015826:	4313      	orrs	r3, r2
 8015828:	c008      	stmia	r0!, {r3}
 801582a:	9b04      	ldr	r3, [sp, #16]
 801582c:	428b      	cmp	r3, r1
 801582e:	d2eb      	bcs.n	8015808 <quorem+0xa8>
 8015830:	9a02      	ldr	r2, [sp, #8]
 8015832:	00a3      	lsls	r3, r4, #2
 8015834:	18d3      	adds	r3, r2, r3
 8015836:	681a      	ldr	r2, [r3, #0]
 8015838:	2a00      	cmp	r2, #0
 801583a:	d011      	beq.n	8015860 <quorem+0x100>
 801583c:	9e01      	ldr	r6, [sp, #4]
 801583e:	0030      	movs	r0, r6
 8015840:	b009      	add	sp, #36	; 0x24
 8015842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015844:	682b      	ldr	r3, [r5, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d104      	bne.n	8015854 <quorem+0xf4>
 801584a:	3c01      	subs	r4, #1
 801584c:	9b02      	ldr	r3, [sp, #8]
 801584e:	3d04      	subs	r5, #4
 8015850:	42ab      	cmp	r3, r5
 8015852:	d3f7      	bcc.n	8015844 <quorem+0xe4>
 8015854:	613c      	str	r4, [r7, #16]
 8015856:	e7cb      	b.n	80157f0 <quorem+0x90>
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	2a00      	cmp	r2, #0
 801585c:	d104      	bne.n	8015868 <quorem+0x108>
 801585e:	3c01      	subs	r4, #1
 8015860:	9a02      	ldr	r2, [sp, #8]
 8015862:	3b04      	subs	r3, #4
 8015864:	429a      	cmp	r2, r3
 8015866:	d3f7      	bcc.n	8015858 <quorem+0xf8>
 8015868:	613c      	str	r4, [r7, #16]
 801586a:	e7e7      	b.n	801583c <quorem+0xdc>

0801586c <_dtoa_r>:
 801586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801586e:	0014      	movs	r4, r2
 8015870:	001d      	movs	r5, r3
 8015872:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015874:	b09b      	sub	sp, #108	; 0x6c
 8015876:	9002      	str	r0, [sp, #8]
 8015878:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801587a:	9406      	str	r4, [sp, #24]
 801587c:	9507      	str	r5, [sp, #28]
 801587e:	2900      	cmp	r1, #0
 8015880:	d009      	beq.n	8015896 <_dtoa_r+0x2a>
 8015882:	2301      	movs	r3, #1
 8015884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015886:	4093      	lsls	r3, r2
 8015888:	604a      	str	r2, [r1, #4]
 801588a:	608b      	str	r3, [r1, #8]
 801588c:	f001 fa6a 	bl	8016d64 <_Bfree>
 8015890:	2300      	movs	r3, #0
 8015892:	9a02      	ldr	r2, [sp, #8]
 8015894:	6413      	str	r3, [r2, #64]	; 0x40
 8015896:	2d00      	cmp	r5, #0
 8015898:	da20      	bge.n	80158dc <_dtoa_r+0x70>
 801589a:	2301      	movs	r3, #1
 801589c:	6033      	str	r3, [r6, #0]
 801589e:	006b      	lsls	r3, r5, #1
 80158a0:	085b      	lsrs	r3, r3, #1
 80158a2:	9307      	str	r3, [sp, #28]
 80158a4:	9c07      	ldr	r4, [sp, #28]
 80158a6:	4bb2      	ldr	r3, [pc, #712]	; (8015b70 <_dtoa_r+0x304>)
 80158a8:	0022      	movs	r2, r4
 80158aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80158ac:	401a      	ands	r2, r3
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d117      	bne.n	80158e2 <_dtoa_r+0x76>
 80158b2:	4bb0      	ldr	r3, [pc, #704]	; (8015b74 <_dtoa_r+0x308>)
 80158b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80158b6:	6013      	str	r3, [r2, #0]
 80158b8:	9b06      	ldr	r3, [sp, #24]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d103      	bne.n	80158c6 <_dtoa_r+0x5a>
 80158be:	0324      	lsls	r4, r4, #12
 80158c0:	d101      	bne.n	80158c6 <_dtoa_r+0x5a>
 80158c2:	f000 fd89 	bl	80163d8 <_dtoa_r+0xb6c>
 80158c6:	4bac      	ldr	r3, [pc, #688]	; (8015b78 <_dtoa_r+0x30c>)
 80158c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80158ca:	9308      	str	r3, [sp, #32]
 80158cc:	2a00      	cmp	r2, #0
 80158ce:	d002      	beq.n	80158d6 <_dtoa_r+0x6a>
 80158d0:	4baa      	ldr	r3, [pc, #680]	; (8015b7c <_dtoa_r+0x310>)
 80158d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80158d4:	6013      	str	r3, [r2, #0]
 80158d6:	9808      	ldr	r0, [sp, #32]
 80158d8:	b01b      	add	sp, #108	; 0x6c
 80158da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158dc:	2300      	movs	r3, #0
 80158de:	6033      	str	r3, [r6, #0]
 80158e0:	e7e0      	b.n	80158a4 <_dtoa_r+0x38>
 80158e2:	9e06      	ldr	r6, [sp, #24]
 80158e4:	9f07      	ldr	r7, [sp, #28]
 80158e6:	2200      	movs	r2, #0
 80158e8:	2300      	movs	r3, #0
 80158ea:	0030      	movs	r0, r6
 80158ec:	0039      	movs	r1, r7
 80158ee:	f7ea fdb5 	bl	800045c <__aeabi_dcmpeq>
 80158f2:	1e05      	subs	r5, r0, #0
 80158f4:	d00b      	beq.n	801590e <_dtoa_r+0xa2>
 80158f6:	2301      	movs	r3, #1
 80158f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80158fa:	6013      	str	r3, [r2, #0]
 80158fc:	4ba0      	ldr	r3, [pc, #640]	; (8015b80 <_dtoa_r+0x314>)
 80158fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015900:	9308      	str	r3, [sp, #32]
 8015902:	2a00      	cmp	r2, #0
 8015904:	d0e7      	beq.n	80158d6 <_dtoa_r+0x6a>
 8015906:	4a9f      	ldr	r2, [pc, #636]	; (8015b84 <_dtoa_r+0x318>)
 8015908:	9924      	ldr	r1, [sp, #144]	; 0x90
 801590a:	600a      	str	r2, [r1, #0]
 801590c:	e7e3      	b.n	80158d6 <_dtoa_r+0x6a>
 801590e:	ab18      	add	r3, sp, #96	; 0x60
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	ab19      	add	r3, sp, #100	; 0x64
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	0032      	movs	r2, r6
 8015918:	003b      	movs	r3, r7
 801591a:	9802      	ldr	r0, [sp, #8]
 801591c:	f001 fd0e 	bl	801733c <__d2b>
 8015920:	0063      	lsls	r3, r4, #1
 8015922:	9003      	str	r0, [sp, #12]
 8015924:	0d5b      	lsrs	r3, r3, #21
 8015926:	d074      	beq.n	8015a12 <_dtoa_r+0x1a6>
 8015928:	033a      	lsls	r2, r7, #12
 801592a:	4c97      	ldr	r4, [pc, #604]	; (8015b88 <_dtoa_r+0x31c>)
 801592c:	0b12      	lsrs	r2, r2, #12
 801592e:	4314      	orrs	r4, r2
 8015930:	0021      	movs	r1, r4
 8015932:	4a96      	ldr	r2, [pc, #600]	; (8015b8c <_dtoa_r+0x320>)
 8015934:	0030      	movs	r0, r6
 8015936:	9516      	str	r5, [sp, #88]	; 0x58
 8015938:	189e      	adds	r6, r3, r2
 801593a:	2200      	movs	r2, #0
 801593c:	4b94      	ldr	r3, [pc, #592]	; (8015b90 <_dtoa_r+0x324>)
 801593e:	f7ec fceb 	bl	8002318 <__aeabi_dsub>
 8015942:	4a94      	ldr	r2, [pc, #592]	; (8015b94 <_dtoa_r+0x328>)
 8015944:	4b94      	ldr	r3, [pc, #592]	; (8015b98 <_dtoa_r+0x32c>)
 8015946:	f7ec fa75 	bl	8001e34 <__aeabi_dmul>
 801594a:	4a94      	ldr	r2, [pc, #592]	; (8015b9c <_dtoa_r+0x330>)
 801594c:	4b94      	ldr	r3, [pc, #592]	; (8015ba0 <_dtoa_r+0x334>)
 801594e:	f7eb fb4b 	bl	8000fe8 <__aeabi_dadd>
 8015952:	0004      	movs	r4, r0
 8015954:	0030      	movs	r0, r6
 8015956:	000d      	movs	r5, r1
 8015958:	f7ed f878 	bl	8002a4c <__aeabi_i2d>
 801595c:	4a91      	ldr	r2, [pc, #580]	; (8015ba4 <_dtoa_r+0x338>)
 801595e:	4b92      	ldr	r3, [pc, #584]	; (8015ba8 <_dtoa_r+0x33c>)
 8015960:	f7ec fa68 	bl	8001e34 <__aeabi_dmul>
 8015964:	0002      	movs	r2, r0
 8015966:	000b      	movs	r3, r1
 8015968:	0020      	movs	r0, r4
 801596a:	0029      	movs	r1, r5
 801596c:	f7eb fb3c 	bl	8000fe8 <__aeabi_dadd>
 8015970:	0004      	movs	r4, r0
 8015972:	000d      	movs	r5, r1
 8015974:	f7ed f834 	bl	80029e0 <__aeabi_d2iz>
 8015978:	2200      	movs	r2, #0
 801597a:	0007      	movs	r7, r0
 801597c:	2300      	movs	r3, #0
 801597e:	0020      	movs	r0, r4
 8015980:	0029      	movs	r1, r5
 8015982:	f7ea fd71 	bl	8000468 <__aeabi_dcmplt>
 8015986:	2800      	cmp	r0, #0
 8015988:	d009      	beq.n	801599e <_dtoa_r+0x132>
 801598a:	0038      	movs	r0, r7
 801598c:	f7ed f85e 	bl	8002a4c <__aeabi_i2d>
 8015990:	002b      	movs	r3, r5
 8015992:	0022      	movs	r2, r4
 8015994:	f7ea fd62 	bl	800045c <__aeabi_dcmpeq>
 8015998:	4243      	negs	r3, r0
 801599a:	4158      	adcs	r0, r3
 801599c:	1a3f      	subs	r7, r7, r0
 801599e:	2301      	movs	r3, #1
 80159a0:	9314      	str	r3, [sp, #80]	; 0x50
 80159a2:	2f16      	cmp	r7, #22
 80159a4:	d80d      	bhi.n	80159c2 <_dtoa_r+0x156>
 80159a6:	4981      	ldr	r1, [pc, #516]	; (8015bac <_dtoa_r+0x340>)
 80159a8:	00fb      	lsls	r3, r7, #3
 80159aa:	18c9      	adds	r1, r1, r3
 80159ac:	6808      	ldr	r0, [r1, #0]
 80159ae:	6849      	ldr	r1, [r1, #4]
 80159b0:	9a06      	ldr	r2, [sp, #24]
 80159b2:	9b07      	ldr	r3, [sp, #28]
 80159b4:	f7ea fd6c 	bl	8000490 <__aeabi_dcmpgt>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d046      	beq.n	8015a4a <_dtoa_r+0x1de>
 80159bc:	2300      	movs	r3, #0
 80159be:	3f01      	subs	r7, #1
 80159c0:	9314      	str	r3, [sp, #80]	; 0x50
 80159c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80159c4:	1b9e      	subs	r6, r3, r6
 80159c6:	2300      	movs	r3, #0
 80159c8:	930a      	str	r3, [sp, #40]	; 0x28
 80159ca:	0033      	movs	r3, r6
 80159cc:	3b01      	subs	r3, #1
 80159ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80159d0:	d504      	bpl.n	80159dc <_dtoa_r+0x170>
 80159d2:	2301      	movs	r3, #1
 80159d4:	1b9b      	subs	r3, r3, r6
 80159d6:	930a      	str	r3, [sp, #40]	; 0x28
 80159d8:	2300      	movs	r3, #0
 80159da:	930b      	str	r3, [sp, #44]	; 0x2c
 80159dc:	2f00      	cmp	r7, #0
 80159de:	db36      	blt.n	8015a4e <_dtoa_r+0x1e2>
 80159e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159e2:	9711      	str	r7, [sp, #68]	; 0x44
 80159e4:	19db      	adds	r3, r3, r7
 80159e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80159e8:	2300      	movs	r3, #0
 80159ea:	9304      	str	r3, [sp, #16]
 80159ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80159ee:	2401      	movs	r4, #1
 80159f0:	2b09      	cmp	r3, #9
 80159f2:	d900      	bls.n	80159f6 <_dtoa_r+0x18a>
 80159f4:	e082      	b.n	8015afc <_dtoa_r+0x290>
 80159f6:	2b05      	cmp	r3, #5
 80159f8:	dd02      	ble.n	8015a00 <_dtoa_r+0x194>
 80159fa:	2400      	movs	r4, #0
 80159fc:	3b04      	subs	r3, #4
 80159fe:	9320      	str	r3, [sp, #128]	; 0x80
 8015a00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a02:	1e98      	subs	r0, r3, #2
 8015a04:	2803      	cmp	r0, #3
 8015a06:	d900      	bls.n	8015a0a <_dtoa_r+0x19e>
 8015a08:	e082      	b.n	8015b10 <_dtoa_r+0x2a4>
 8015a0a:	f7ea fb8d 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015a0e:	7573      	.short	0x7573
 8015a10:	6828      	.short	0x6828
 8015a12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015a16:	189e      	adds	r6, r3, r2
 8015a18:	4b65      	ldr	r3, [pc, #404]	; (8015bb0 <_dtoa_r+0x344>)
 8015a1a:	18f2      	adds	r2, r6, r3
 8015a1c:	2a20      	cmp	r2, #32
 8015a1e:	dd0f      	ble.n	8015a40 <_dtoa_r+0x1d4>
 8015a20:	2340      	movs	r3, #64	; 0x40
 8015a22:	1a9b      	subs	r3, r3, r2
 8015a24:	409c      	lsls	r4, r3
 8015a26:	4b63      	ldr	r3, [pc, #396]	; (8015bb4 <_dtoa_r+0x348>)
 8015a28:	9806      	ldr	r0, [sp, #24]
 8015a2a:	18f3      	adds	r3, r6, r3
 8015a2c:	40d8      	lsrs	r0, r3
 8015a2e:	4320      	orrs	r0, r4
 8015a30:	f7ed f846 	bl	8002ac0 <__aeabi_ui2d>
 8015a34:	2301      	movs	r3, #1
 8015a36:	4c60      	ldr	r4, [pc, #384]	; (8015bb8 <_dtoa_r+0x34c>)
 8015a38:	3e01      	subs	r6, #1
 8015a3a:	1909      	adds	r1, r1, r4
 8015a3c:	9316      	str	r3, [sp, #88]	; 0x58
 8015a3e:	e77c      	b.n	801593a <_dtoa_r+0xce>
 8015a40:	2320      	movs	r3, #32
 8015a42:	9806      	ldr	r0, [sp, #24]
 8015a44:	1a9b      	subs	r3, r3, r2
 8015a46:	4098      	lsls	r0, r3
 8015a48:	e7f2      	b.n	8015a30 <_dtoa_r+0x1c4>
 8015a4a:	9014      	str	r0, [sp, #80]	; 0x50
 8015a4c:	e7b9      	b.n	80159c2 <_dtoa_r+0x156>
 8015a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a50:	1bdb      	subs	r3, r3, r7
 8015a52:	930a      	str	r3, [sp, #40]	; 0x28
 8015a54:	427b      	negs	r3, r7
 8015a56:	9304      	str	r3, [sp, #16]
 8015a58:	2300      	movs	r3, #0
 8015a5a:	9311      	str	r3, [sp, #68]	; 0x44
 8015a5c:	e7c6      	b.n	80159ec <_dtoa_r+0x180>
 8015a5e:	2301      	movs	r3, #1
 8015a60:	930d      	str	r3, [sp, #52]	; 0x34
 8015a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	dd57      	ble.n	8015b18 <_dtoa_r+0x2ac>
 8015a68:	930c      	str	r3, [sp, #48]	; 0x30
 8015a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	9902      	ldr	r1, [sp, #8]
 8015a70:	644a      	str	r2, [r1, #68]	; 0x44
 8015a72:	3204      	adds	r2, #4
 8015a74:	0010      	movs	r0, r2
 8015a76:	9902      	ldr	r1, [sp, #8]
 8015a78:	3014      	adds	r0, #20
 8015a7a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015a7c:	4298      	cmp	r0, r3
 8015a7e:	d950      	bls.n	8015b22 <_dtoa_r+0x2b6>
 8015a80:	9802      	ldr	r0, [sp, #8]
 8015a82:	f001 f947 	bl	8016d14 <_Balloc>
 8015a86:	9b02      	ldr	r3, [sp, #8]
 8015a88:	9008      	str	r0, [sp, #32]
 8015a8a:	6418      	str	r0, [r3, #64]	; 0x40
 8015a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a8e:	2b0e      	cmp	r3, #14
 8015a90:	d900      	bls.n	8015a94 <_dtoa_r+0x228>
 8015a92:	e10c      	b.n	8015cae <_dtoa_r+0x442>
 8015a94:	2c00      	cmp	r4, #0
 8015a96:	d100      	bne.n	8015a9a <_dtoa_r+0x22e>
 8015a98:	e109      	b.n	8015cae <_dtoa_r+0x442>
 8015a9a:	9b06      	ldr	r3, [sp, #24]
 8015a9c:	9c07      	ldr	r4, [sp, #28]
 8015a9e:	9312      	str	r3, [sp, #72]	; 0x48
 8015aa0:	9413      	str	r4, [sp, #76]	; 0x4c
 8015aa2:	2f00      	cmp	r7, #0
 8015aa4:	dc00      	bgt.n	8015aa8 <_dtoa_r+0x23c>
 8015aa6:	e08b      	b.n	8015bc0 <_dtoa_r+0x354>
 8015aa8:	210f      	movs	r1, #15
 8015aaa:	003a      	movs	r2, r7
 8015aac:	4b3f      	ldr	r3, [pc, #252]	; (8015bac <_dtoa_r+0x340>)
 8015aae:	400a      	ands	r2, r1
 8015ab0:	00d2      	lsls	r2, r2, #3
 8015ab2:	189b      	adds	r3, r3, r2
 8015ab4:	681d      	ldr	r5, [r3, #0]
 8015ab6:	685e      	ldr	r6, [r3, #4]
 8015ab8:	2302      	movs	r3, #2
 8015aba:	113c      	asrs	r4, r7, #4
 8015abc:	930e      	str	r3, [sp, #56]	; 0x38
 8015abe:	06e3      	lsls	r3, r4, #27
 8015ac0:	d50b      	bpl.n	8015ada <_dtoa_r+0x26e>
 8015ac2:	4b3e      	ldr	r3, [pc, #248]	; (8015bbc <_dtoa_r+0x350>)
 8015ac4:	400c      	ands	r4, r1
 8015ac6:	6a1a      	ldr	r2, [r3, #32]
 8015ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015acc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015ace:	f7eb fda7 	bl	8001620 <__aeabi_ddiv>
 8015ad2:	2303      	movs	r3, #3
 8015ad4:	9006      	str	r0, [sp, #24]
 8015ad6:	9107      	str	r1, [sp, #28]
 8015ad8:	930e      	str	r3, [sp, #56]	; 0x38
 8015ada:	2300      	movs	r3, #0
 8015adc:	e03b      	b.n	8015b56 <_dtoa_r+0x2ea>
 8015ade:	2301      	movs	r3, #1
 8015ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8015ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ae4:	18fb      	adds	r3, r7, r3
 8015ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8015ae8:	3301      	adds	r3, #1
 8015aea:	9309      	str	r3, [sp, #36]	; 0x24
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	dcbd      	bgt.n	8015a6c <_dtoa_r+0x200>
 8015af0:	2301      	movs	r3, #1
 8015af2:	e7bb      	b.n	8015a6c <_dtoa_r+0x200>
 8015af4:	2300      	movs	r3, #0
 8015af6:	e7b3      	b.n	8015a60 <_dtoa_r+0x1f4>
 8015af8:	2300      	movs	r3, #0
 8015afa:	e7f1      	b.n	8015ae0 <_dtoa_r+0x274>
 8015afc:	2300      	movs	r3, #0
 8015afe:	940d      	str	r4, [sp, #52]	; 0x34
 8015b00:	9320      	str	r3, [sp, #128]	; 0x80
 8015b02:	3b01      	subs	r3, #1
 8015b04:	2200      	movs	r2, #0
 8015b06:	930c      	str	r3, [sp, #48]	; 0x30
 8015b08:	9309      	str	r3, [sp, #36]	; 0x24
 8015b0a:	3313      	adds	r3, #19
 8015b0c:	9221      	str	r2, [sp, #132]	; 0x84
 8015b0e:	e7ad      	b.n	8015a6c <_dtoa_r+0x200>
 8015b10:	2301      	movs	r3, #1
 8015b12:	930d      	str	r3, [sp, #52]	; 0x34
 8015b14:	3b02      	subs	r3, #2
 8015b16:	e7f5      	b.n	8015b04 <_dtoa_r+0x298>
 8015b18:	2301      	movs	r3, #1
 8015b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b1e:	001a      	movs	r2, r3
 8015b20:	e7f4      	b.n	8015b0c <_dtoa_r+0x2a0>
 8015b22:	9802      	ldr	r0, [sp, #8]
 8015b24:	3101      	adds	r1, #1
 8015b26:	6441      	str	r1, [r0, #68]	; 0x44
 8015b28:	0052      	lsls	r2, r2, #1
 8015b2a:	e7a3      	b.n	8015a74 <_dtoa_r+0x208>
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	421c      	tst	r4, r3
 8015b30:	d00e      	beq.n	8015b50 <_dtoa_r+0x2e4>
 8015b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b34:	4a21      	ldr	r2, [pc, #132]	; (8015bbc <_dtoa_r+0x350>)
 8015b36:	3301      	adds	r3, #1
 8015b38:	930e      	str	r3, [sp, #56]	; 0x38
 8015b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b3c:	0028      	movs	r0, r5
 8015b3e:	00db      	lsls	r3, r3, #3
 8015b40:	189b      	adds	r3, r3, r2
 8015b42:	0031      	movs	r1, r6
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	f7ec f974 	bl	8001e34 <__aeabi_dmul>
 8015b4c:	0005      	movs	r5, r0
 8015b4e:	000e      	movs	r6, r1
 8015b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b52:	1064      	asrs	r4, r4, #1
 8015b54:	3301      	adds	r3, #1
 8015b56:	9310      	str	r3, [sp, #64]	; 0x40
 8015b58:	2c00      	cmp	r4, #0
 8015b5a:	d1e7      	bne.n	8015b2c <_dtoa_r+0x2c0>
 8015b5c:	9806      	ldr	r0, [sp, #24]
 8015b5e:	9907      	ldr	r1, [sp, #28]
 8015b60:	002a      	movs	r2, r5
 8015b62:	0033      	movs	r3, r6
 8015b64:	f7eb fd5c 	bl	8001620 <__aeabi_ddiv>
 8015b68:	9006      	str	r0, [sp, #24]
 8015b6a:	9107      	str	r1, [sp, #28]
 8015b6c:	e043      	b.n	8015bf6 <_dtoa_r+0x38a>
 8015b6e:	46c0      	nop			; (mov r8, r8)
 8015b70:	7ff00000 	.word	0x7ff00000
 8015b74:	0000270f 	.word	0x0000270f
 8015b78:	0801aa26 	.word	0x0801aa26
 8015b7c:	0801aa29 	.word	0x0801aa29
 8015b80:	0801a8fa 	.word	0x0801a8fa
 8015b84:	0801a8fb 	.word	0x0801a8fb
 8015b88:	3ff00000 	.word	0x3ff00000
 8015b8c:	fffffc01 	.word	0xfffffc01
 8015b90:	3ff80000 	.word	0x3ff80000
 8015b94:	636f4361 	.word	0x636f4361
 8015b98:	3fd287a7 	.word	0x3fd287a7
 8015b9c:	8b60c8b3 	.word	0x8b60c8b3
 8015ba0:	3fc68a28 	.word	0x3fc68a28
 8015ba4:	509f79fb 	.word	0x509f79fb
 8015ba8:	3fd34413 	.word	0x3fd34413
 8015bac:	0801aa58 	.word	0x0801aa58
 8015bb0:	00000432 	.word	0x00000432
 8015bb4:	00000412 	.word	0x00000412
 8015bb8:	fe100000 	.word	0xfe100000
 8015bbc:	0801aa30 	.word	0x0801aa30
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8015bc4:	2f00      	cmp	r7, #0
 8015bc6:	d016      	beq.n	8015bf6 <_dtoa_r+0x38a>
 8015bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015bca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015bcc:	427c      	negs	r4, r7
 8015bce:	330d      	adds	r3, #13
 8015bd0:	4023      	ands	r3, r4
 8015bd2:	4acf      	ldr	r2, [pc, #828]	; (8015f10 <_dtoa_r+0x6a4>)
 8015bd4:	00db      	lsls	r3, r3, #3
 8015bd6:	18d3      	adds	r3, r2, r3
 8015bd8:	681a      	ldr	r2, [r3, #0]
 8015bda:	685b      	ldr	r3, [r3, #4]
 8015bdc:	f7ec f92a 	bl	8001e34 <__aeabi_dmul>
 8015be0:	2300      	movs	r3, #0
 8015be2:	2601      	movs	r6, #1
 8015be4:	001d      	movs	r5, r3
 8015be6:	9006      	str	r0, [sp, #24]
 8015be8:	9107      	str	r1, [sp, #28]
 8015bea:	1124      	asrs	r4, r4, #4
 8015bec:	2c00      	cmp	r4, #0
 8015bee:	d000      	beq.n	8015bf2 <_dtoa_r+0x386>
 8015bf0:	e08c      	b.n	8015d0c <_dtoa_r+0x4a0>
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d1b8      	bne.n	8015b68 <_dtoa_r+0x2fc>
 8015bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d100      	bne.n	8015bfe <_dtoa_r+0x392>
 8015bfc:	e096      	b.n	8015d2c <_dtoa_r+0x4c0>
 8015bfe:	9c06      	ldr	r4, [sp, #24]
 8015c00:	9d07      	ldr	r5, [sp, #28]
 8015c02:	2200      	movs	r2, #0
 8015c04:	4bc3      	ldr	r3, [pc, #780]	; (8015f14 <_dtoa_r+0x6a8>)
 8015c06:	0020      	movs	r0, r4
 8015c08:	0029      	movs	r1, r5
 8015c0a:	f7ea fc2d 	bl	8000468 <__aeabi_dcmplt>
 8015c0e:	2800      	cmp	r0, #0
 8015c10:	d100      	bne.n	8015c14 <_dtoa_r+0x3a8>
 8015c12:	e08b      	b.n	8015d2c <_dtoa_r+0x4c0>
 8015c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d100      	bne.n	8015c1c <_dtoa_r+0x3b0>
 8015c1a:	e087      	b.n	8015d2c <_dtoa_r+0x4c0>
 8015c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	dd41      	ble.n	8015ca6 <_dtoa_r+0x43a>
 8015c22:	4bbd      	ldr	r3, [pc, #756]	; (8015f18 <_dtoa_r+0x6ac>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	0020      	movs	r0, r4
 8015c28:	0029      	movs	r1, r5
 8015c2a:	f7ec f903 	bl	8001e34 <__aeabi_dmul>
 8015c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c30:	9006      	str	r0, [sp, #24]
 8015c32:	9107      	str	r1, [sp, #28]
 8015c34:	3301      	adds	r3, #1
 8015c36:	930e      	str	r3, [sp, #56]	; 0x38
 8015c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c3a:	1e7e      	subs	r6, r7, #1
 8015c3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8015c40:	f7ec ff04 	bl	8002a4c <__aeabi_i2d>
 8015c44:	9a06      	ldr	r2, [sp, #24]
 8015c46:	9b07      	ldr	r3, [sp, #28]
 8015c48:	f7ec f8f4 	bl	8001e34 <__aeabi_dmul>
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	4bb3      	ldr	r3, [pc, #716]	; (8015f1c <_dtoa_r+0x6b0>)
 8015c50:	f7eb f9ca 	bl	8000fe8 <__aeabi_dadd>
 8015c54:	4ab2      	ldr	r2, [pc, #712]	; (8015f20 <_dtoa_r+0x6b4>)
 8015c56:	900e      	str	r0, [sp, #56]	; 0x38
 8015c58:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015c5e:	4694      	mov	ip, r2
 8015c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c62:	4463      	add	r3, ip
 8015c64:	9315      	str	r3, [sp, #84]	; 0x54
 8015c66:	001d      	movs	r5, r3
 8015c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d161      	bne.n	8015d32 <_dtoa_r+0x4c6>
 8015c6e:	9806      	ldr	r0, [sp, #24]
 8015c70:	9907      	ldr	r1, [sp, #28]
 8015c72:	2200      	movs	r2, #0
 8015c74:	4bab      	ldr	r3, [pc, #684]	; (8015f24 <_dtoa_r+0x6b8>)
 8015c76:	f7ec fb4f 	bl	8002318 <__aeabi_dsub>
 8015c7a:	0022      	movs	r2, r4
 8015c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c7e:	9006      	str	r0, [sp, #24]
 8015c80:	9107      	str	r1, [sp, #28]
 8015c82:	f7ea fc05 	bl	8000490 <__aeabi_dcmpgt>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d000      	beq.n	8015c8c <_dtoa_r+0x420>
 8015c8a:	e2aa      	b.n	80161e2 <_dtoa_r+0x976>
 8015c8c:	48a6      	ldr	r0, [pc, #664]	; (8015f28 <_dtoa_r+0x6bc>)
 8015c8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c90:	4684      	mov	ip, r0
 8015c92:	4461      	add	r1, ip
 8015c94:	000b      	movs	r3, r1
 8015c96:	9806      	ldr	r0, [sp, #24]
 8015c98:	9907      	ldr	r1, [sp, #28]
 8015c9a:	0022      	movs	r2, r4
 8015c9c:	f7ea fbe4 	bl	8000468 <__aeabi_dcmplt>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d000      	beq.n	8015ca6 <_dtoa_r+0x43a>
 8015ca4:	e297      	b.n	80161d6 <_dtoa_r+0x96a>
 8015ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ca8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015caa:	9306      	str	r3, [sp, #24]
 8015cac:	9407      	str	r4, [sp, #28]
 8015cae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	da00      	bge.n	8015cb6 <_dtoa_r+0x44a>
 8015cb4:	e15e      	b.n	8015f74 <_dtoa_r+0x708>
 8015cb6:	2f0e      	cmp	r7, #14
 8015cb8:	dd00      	ble.n	8015cbc <_dtoa_r+0x450>
 8015cba:	e15b      	b.n	8015f74 <_dtoa_r+0x708>
 8015cbc:	4b94      	ldr	r3, [pc, #592]	; (8015f10 <_dtoa_r+0x6a4>)
 8015cbe:	00fa      	lsls	r2, r7, #3
 8015cc0:	189b      	adds	r3, r3, r2
 8015cc2:	685c      	ldr	r4, [r3, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	9304      	str	r3, [sp, #16]
 8015cc8:	9405      	str	r4, [sp, #20]
 8015cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	db00      	blt.n	8015cd2 <_dtoa_r+0x466>
 8015cd0:	e0da      	b.n	8015e88 <_dtoa_r+0x61c>
 8015cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	dd00      	ble.n	8015cda <_dtoa_r+0x46e>
 8015cd8:	e0d6      	b.n	8015e88 <_dtoa_r+0x61c>
 8015cda:	d000      	beq.n	8015cde <_dtoa_r+0x472>
 8015cdc:	e27f      	b.n	80161de <_dtoa_r+0x972>
 8015cde:	9804      	ldr	r0, [sp, #16]
 8015ce0:	9905      	ldr	r1, [sp, #20]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	4b8f      	ldr	r3, [pc, #572]	; (8015f24 <_dtoa_r+0x6b8>)
 8015ce6:	f7ec f8a5 	bl	8001e34 <__aeabi_dmul>
 8015cea:	9a06      	ldr	r2, [sp, #24]
 8015cec:	9b07      	ldr	r3, [sp, #28]
 8015cee:	f7ea fbd9 	bl	80004a4 <__aeabi_dcmpge>
 8015cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cf4:	9304      	str	r3, [sp, #16]
 8015cf6:	001e      	movs	r6, r3
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d000      	beq.n	8015cfe <_dtoa_r+0x492>
 8015cfc:	e251      	b.n	80161a2 <_dtoa_r+0x936>
 8015cfe:	9b08      	ldr	r3, [sp, #32]
 8015d00:	9a08      	ldr	r2, [sp, #32]
 8015d02:	1c5d      	adds	r5, r3, #1
 8015d04:	2331      	movs	r3, #49	; 0x31
 8015d06:	3701      	adds	r7, #1
 8015d08:	7013      	strb	r3, [r2, #0]
 8015d0a:	e24d      	b.n	80161a8 <_dtoa_r+0x93c>
 8015d0c:	4234      	tst	r4, r6
 8015d0e:	d00a      	beq.n	8015d26 <_dtoa_r+0x4ba>
 8015d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d12:	4a86      	ldr	r2, [pc, #536]	; (8015f2c <_dtoa_r+0x6c0>)
 8015d14:	3301      	adds	r3, #1
 8015d16:	930e      	str	r3, [sp, #56]	; 0x38
 8015d18:	00eb      	lsls	r3, r5, #3
 8015d1a:	189b      	adds	r3, r3, r2
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	f7ec f888 	bl	8001e34 <__aeabi_dmul>
 8015d24:	0033      	movs	r3, r6
 8015d26:	1064      	asrs	r4, r4, #1
 8015d28:	3501      	adds	r5, #1
 8015d2a:	e75f      	b.n	8015bec <_dtoa_r+0x380>
 8015d2c:	003e      	movs	r6, r7
 8015d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d30:	e784      	b.n	8015c3c <_dtoa_r+0x3d0>
 8015d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d34:	1e5a      	subs	r2, r3, #1
 8015d36:	4b76      	ldr	r3, [pc, #472]	; (8015f10 <_dtoa_r+0x6a4>)
 8015d38:	00d2      	lsls	r2, r2, #3
 8015d3a:	189b      	adds	r3, r3, r2
 8015d3c:	6818      	ldr	r0, [r3, #0]
 8015d3e:	6859      	ldr	r1, [r3, #4]
 8015d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d04b      	beq.n	8015dde <_dtoa_r+0x572>
 8015d46:	0002      	movs	r2, r0
 8015d48:	000b      	movs	r3, r1
 8015d4a:	2000      	movs	r0, #0
 8015d4c:	4978      	ldr	r1, [pc, #480]	; (8015f30 <_dtoa_r+0x6c4>)
 8015d4e:	f7eb fc67 	bl	8001620 <__aeabi_ddiv>
 8015d52:	002b      	movs	r3, r5
 8015d54:	0022      	movs	r2, r4
 8015d56:	f7ec fadf 	bl	8002318 <__aeabi_dsub>
 8015d5a:	9b08      	ldr	r3, [sp, #32]
 8015d5c:	900e      	str	r0, [sp, #56]	; 0x38
 8015d5e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015d60:	9315      	str	r3, [sp, #84]	; 0x54
 8015d62:	9806      	ldr	r0, [sp, #24]
 8015d64:	9907      	ldr	r1, [sp, #28]
 8015d66:	f7ec fe3b 	bl	80029e0 <__aeabi_d2iz>
 8015d6a:	0004      	movs	r4, r0
 8015d6c:	f7ec fe6e 	bl	8002a4c <__aeabi_i2d>
 8015d70:	0002      	movs	r2, r0
 8015d72:	000b      	movs	r3, r1
 8015d74:	9806      	ldr	r0, [sp, #24]
 8015d76:	9907      	ldr	r1, [sp, #28]
 8015d78:	f7ec face 	bl	8002318 <__aeabi_dsub>
 8015d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d7e:	3430      	adds	r4, #48	; 0x30
 8015d80:	1c5d      	adds	r5, r3, #1
 8015d82:	701c      	strb	r4, [r3, #0]
 8015d84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d88:	9006      	str	r0, [sp, #24]
 8015d8a:	9107      	str	r1, [sp, #28]
 8015d8c:	f7ea fb6c 	bl	8000468 <__aeabi_dcmplt>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d16c      	bne.n	8015e6e <_dtoa_r+0x602>
 8015d94:	9a06      	ldr	r2, [sp, #24]
 8015d96:	9b07      	ldr	r3, [sp, #28]
 8015d98:	2000      	movs	r0, #0
 8015d9a:	495e      	ldr	r1, [pc, #376]	; (8015f14 <_dtoa_r+0x6a8>)
 8015d9c:	f7ec fabc 	bl	8002318 <__aeabi_dsub>
 8015da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015da4:	f7ea fb60 	bl	8000468 <__aeabi_dcmplt>
 8015da8:	2800      	cmp	r0, #0
 8015daa:	d000      	beq.n	8015dae <_dtoa_r+0x542>
 8015dac:	e0c3      	b.n	8015f36 <_dtoa_r+0x6ca>
 8015dae:	9b08      	ldr	r3, [sp, #32]
 8015db0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015db2:	1aeb      	subs	r3, r5, r3
 8015db4:	429a      	cmp	r2, r3
 8015db6:	dc00      	bgt.n	8015dba <_dtoa_r+0x54e>
 8015db8:	e775      	b.n	8015ca6 <_dtoa_r+0x43a>
 8015dba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015dbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	4b55      	ldr	r3, [pc, #340]	; (8015f18 <_dtoa_r+0x6ac>)
 8015dc2:	f7ec f837 	bl	8001e34 <__aeabi_dmul>
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	900e      	str	r0, [sp, #56]	; 0x38
 8015dca:	910f      	str	r1, [sp, #60]	; 0x3c
 8015dcc:	9806      	ldr	r0, [sp, #24]
 8015dce:	9907      	ldr	r1, [sp, #28]
 8015dd0:	4b51      	ldr	r3, [pc, #324]	; (8015f18 <_dtoa_r+0x6ac>)
 8015dd2:	f7ec f82f 	bl	8001e34 <__aeabi_dmul>
 8015dd6:	9515      	str	r5, [sp, #84]	; 0x54
 8015dd8:	9006      	str	r0, [sp, #24]
 8015dda:	9107      	str	r1, [sp, #28]
 8015ddc:	e7c1      	b.n	8015d62 <_dtoa_r+0x4f6>
 8015dde:	0022      	movs	r2, r4
 8015de0:	002b      	movs	r3, r5
 8015de2:	f7ec f827 	bl	8001e34 <__aeabi_dmul>
 8015de6:	9c08      	ldr	r4, [sp, #32]
 8015de8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015dea:	0023      	movs	r3, r4
 8015dec:	4694      	mov	ip, r2
 8015dee:	900e      	str	r0, [sp, #56]	; 0x38
 8015df0:	910f      	str	r1, [sp, #60]	; 0x3c
 8015df2:	4463      	add	r3, ip
 8015df4:	9315      	str	r3, [sp, #84]	; 0x54
 8015df6:	9806      	ldr	r0, [sp, #24]
 8015df8:	9907      	ldr	r1, [sp, #28]
 8015dfa:	f7ec fdf1 	bl	80029e0 <__aeabi_d2iz>
 8015dfe:	0005      	movs	r5, r0
 8015e00:	f7ec fe24 	bl	8002a4c <__aeabi_i2d>
 8015e04:	000b      	movs	r3, r1
 8015e06:	0002      	movs	r2, r0
 8015e08:	9806      	ldr	r0, [sp, #24]
 8015e0a:	9907      	ldr	r1, [sp, #28]
 8015e0c:	f7ec fa84 	bl	8002318 <__aeabi_dsub>
 8015e10:	3530      	adds	r5, #48	; 0x30
 8015e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e14:	7025      	strb	r5, [r4, #0]
 8015e16:	3401      	adds	r4, #1
 8015e18:	9006      	str	r0, [sp, #24]
 8015e1a:	9107      	str	r1, [sp, #28]
 8015e1c:	42a3      	cmp	r3, r4
 8015e1e:	d12a      	bne.n	8015e76 <_dtoa_r+0x60a>
 8015e20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e24:	9a08      	ldr	r2, [sp, #32]
 8015e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e28:	4694      	mov	ip, r2
 8015e2a:	4463      	add	r3, ip
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	001d      	movs	r5, r3
 8015e30:	4b3f      	ldr	r3, [pc, #252]	; (8015f30 <_dtoa_r+0x6c4>)
 8015e32:	f7eb f8d9 	bl	8000fe8 <__aeabi_dadd>
 8015e36:	0002      	movs	r2, r0
 8015e38:	000b      	movs	r3, r1
 8015e3a:	9806      	ldr	r0, [sp, #24]
 8015e3c:	9907      	ldr	r1, [sp, #28]
 8015e3e:	f7ea fb27 	bl	8000490 <__aeabi_dcmpgt>
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d000      	beq.n	8015e48 <_dtoa_r+0x5dc>
 8015e46:	e076      	b.n	8015f36 <_dtoa_r+0x6ca>
 8015e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e4c:	2000      	movs	r0, #0
 8015e4e:	4938      	ldr	r1, [pc, #224]	; (8015f30 <_dtoa_r+0x6c4>)
 8015e50:	f7ec fa62 	bl	8002318 <__aeabi_dsub>
 8015e54:	0002      	movs	r2, r0
 8015e56:	000b      	movs	r3, r1
 8015e58:	9806      	ldr	r0, [sp, #24]
 8015e5a:	9907      	ldr	r1, [sp, #28]
 8015e5c:	f7ea fb04 	bl	8000468 <__aeabi_dcmplt>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d100      	bne.n	8015e66 <_dtoa_r+0x5fa>
 8015e64:	e71f      	b.n	8015ca6 <_dtoa_r+0x43a>
 8015e66:	1e6b      	subs	r3, r5, #1
 8015e68:	781a      	ldrb	r2, [r3, #0]
 8015e6a:	2a30      	cmp	r2, #48	; 0x30
 8015e6c:	d001      	beq.n	8015e72 <_dtoa_r+0x606>
 8015e6e:	0037      	movs	r7, r6
 8015e70:	e03f      	b.n	8015ef2 <_dtoa_r+0x686>
 8015e72:	001d      	movs	r5, r3
 8015e74:	e7f7      	b.n	8015e66 <_dtoa_r+0x5fa>
 8015e76:	9806      	ldr	r0, [sp, #24]
 8015e78:	9907      	ldr	r1, [sp, #28]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	4b26      	ldr	r3, [pc, #152]	; (8015f18 <_dtoa_r+0x6ac>)
 8015e7e:	f7eb ffd9 	bl	8001e34 <__aeabi_dmul>
 8015e82:	9006      	str	r0, [sp, #24]
 8015e84:	9107      	str	r1, [sp, #28]
 8015e86:	e7b6      	b.n	8015df6 <_dtoa_r+0x58a>
 8015e88:	9e08      	ldr	r6, [sp, #32]
 8015e8a:	9a04      	ldr	r2, [sp, #16]
 8015e8c:	9b05      	ldr	r3, [sp, #20]
 8015e8e:	9806      	ldr	r0, [sp, #24]
 8015e90:	9907      	ldr	r1, [sp, #28]
 8015e92:	f7eb fbc5 	bl	8001620 <__aeabi_ddiv>
 8015e96:	f7ec fda3 	bl	80029e0 <__aeabi_d2iz>
 8015e9a:	0004      	movs	r4, r0
 8015e9c:	f7ec fdd6 	bl	8002a4c <__aeabi_i2d>
 8015ea0:	9a04      	ldr	r2, [sp, #16]
 8015ea2:	9b05      	ldr	r3, [sp, #20]
 8015ea4:	f7eb ffc6 	bl	8001e34 <__aeabi_dmul>
 8015ea8:	0002      	movs	r2, r0
 8015eaa:	000b      	movs	r3, r1
 8015eac:	9806      	ldr	r0, [sp, #24]
 8015eae:	9907      	ldr	r1, [sp, #28]
 8015eb0:	f7ec fa32 	bl	8002318 <__aeabi_dsub>
 8015eb4:	0023      	movs	r3, r4
 8015eb6:	3330      	adds	r3, #48	; 0x30
 8015eb8:	7033      	strb	r3, [r6, #0]
 8015eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ebc:	9b08      	ldr	r3, [sp, #32]
 8015ebe:	1c75      	adds	r5, r6, #1
 8015ec0:	1aeb      	subs	r3, r5, r3
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d148      	bne.n	8015f58 <_dtoa_r+0x6ec>
 8015ec6:	0002      	movs	r2, r0
 8015ec8:	000b      	movs	r3, r1
 8015eca:	f7eb f88d 	bl	8000fe8 <__aeabi_dadd>
 8015ece:	9a04      	ldr	r2, [sp, #16]
 8015ed0:	9b05      	ldr	r3, [sp, #20]
 8015ed2:	9006      	str	r0, [sp, #24]
 8015ed4:	9107      	str	r1, [sp, #28]
 8015ed6:	f7ea fadb 	bl	8000490 <__aeabi_dcmpgt>
 8015eda:	2800      	cmp	r0, #0
 8015edc:	d12a      	bne.n	8015f34 <_dtoa_r+0x6c8>
 8015ede:	9a04      	ldr	r2, [sp, #16]
 8015ee0:	9b05      	ldr	r3, [sp, #20]
 8015ee2:	9806      	ldr	r0, [sp, #24]
 8015ee4:	9907      	ldr	r1, [sp, #28]
 8015ee6:	f7ea fab9 	bl	800045c <__aeabi_dcmpeq>
 8015eea:	2800      	cmp	r0, #0
 8015eec:	d001      	beq.n	8015ef2 <_dtoa_r+0x686>
 8015eee:	07e3      	lsls	r3, r4, #31
 8015ef0:	d420      	bmi.n	8015f34 <_dtoa_r+0x6c8>
 8015ef2:	9903      	ldr	r1, [sp, #12]
 8015ef4:	9802      	ldr	r0, [sp, #8]
 8015ef6:	f000 ff35 	bl	8016d64 <_Bfree>
 8015efa:	2300      	movs	r3, #0
 8015efc:	702b      	strb	r3, [r5, #0]
 8015efe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f00:	3701      	adds	r7, #1
 8015f02:	601f      	str	r7, [r3, #0]
 8015f04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d100      	bne.n	8015f0c <_dtoa_r+0x6a0>
 8015f0a:	e4e4      	b.n	80158d6 <_dtoa_r+0x6a>
 8015f0c:	601d      	str	r5, [r3, #0]
 8015f0e:	e4e2      	b.n	80158d6 <_dtoa_r+0x6a>
 8015f10:	0801aa58 	.word	0x0801aa58
 8015f14:	3ff00000 	.word	0x3ff00000
 8015f18:	40240000 	.word	0x40240000
 8015f1c:	401c0000 	.word	0x401c0000
 8015f20:	fcc00000 	.word	0xfcc00000
 8015f24:	40140000 	.word	0x40140000
 8015f28:	7cc00000 	.word	0x7cc00000
 8015f2c:	0801aa30 	.word	0x0801aa30
 8015f30:	3fe00000 	.word	0x3fe00000
 8015f34:	003e      	movs	r6, r7
 8015f36:	1e6b      	subs	r3, r5, #1
 8015f38:	781a      	ldrb	r2, [r3, #0]
 8015f3a:	2a39      	cmp	r2, #57	; 0x39
 8015f3c:	d106      	bne.n	8015f4c <_dtoa_r+0x6e0>
 8015f3e:	9a08      	ldr	r2, [sp, #32]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d107      	bne.n	8015f54 <_dtoa_r+0x6e8>
 8015f44:	2330      	movs	r3, #48	; 0x30
 8015f46:	7013      	strb	r3, [r2, #0]
 8015f48:	0013      	movs	r3, r2
 8015f4a:	3601      	adds	r6, #1
 8015f4c:	781a      	ldrb	r2, [r3, #0]
 8015f4e:	3201      	adds	r2, #1
 8015f50:	701a      	strb	r2, [r3, #0]
 8015f52:	e78c      	b.n	8015e6e <_dtoa_r+0x602>
 8015f54:	001d      	movs	r5, r3
 8015f56:	e7ee      	b.n	8015f36 <_dtoa_r+0x6ca>
 8015f58:	2200      	movs	r2, #0
 8015f5a:	4ba4      	ldr	r3, [pc, #656]	; (80161ec <_dtoa_r+0x980>)
 8015f5c:	f7eb ff6a 	bl	8001e34 <__aeabi_dmul>
 8015f60:	2200      	movs	r2, #0
 8015f62:	2300      	movs	r3, #0
 8015f64:	9006      	str	r0, [sp, #24]
 8015f66:	9107      	str	r1, [sp, #28]
 8015f68:	002e      	movs	r6, r5
 8015f6a:	f7ea fa77 	bl	800045c <__aeabi_dcmpeq>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d08b      	beq.n	8015e8a <_dtoa_r+0x61e>
 8015f72:	e7be      	b.n	8015ef2 <_dtoa_r+0x686>
 8015f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	d100      	bne.n	8015f7c <_dtoa_r+0x710>
 8015f7a:	e0da      	b.n	8016132 <_dtoa_r+0x8c6>
 8015f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015f7e:	2a01      	cmp	r2, #1
 8015f80:	dd00      	ble.n	8015f84 <_dtoa_r+0x718>
 8015f82:	e0bd      	b.n	8016100 <_dtoa_r+0x894>
 8015f84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f86:	2a00      	cmp	r2, #0
 8015f88:	d100      	bne.n	8015f8c <_dtoa_r+0x720>
 8015f8a:	e0b5      	b.n	80160f8 <_dtoa_r+0x88c>
 8015f8c:	4a98      	ldr	r2, [pc, #608]	; (80161f0 <_dtoa_r+0x984>)
 8015f8e:	189b      	adds	r3, r3, r2
 8015f90:	9d04      	ldr	r5, [sp, #16]
 8015f92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f96:	2101      	movs	r1, #1
 8015f98:	18d2      	adds	r2, r2, r3
 8015f9a:	920a      	str	r2, [sp, #40]	; 0x28
 8015f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f9e:	9802      	ldr	r0, [sp, #8]
 8015fa0:	18d3      	adds	r3, r2, r3
 8015fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fa4:	f000 ffad 	bl	8016f02 <__i2b>
 8015fa8:	0006      	movs	r6, r0
 8015faa:	2c00      	cmp	r4, #0
 8015fac:	dd0e      	ble.n	8015fcc <_dtoa_r+0x760>
 8015fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	dd0b      	ble.n	8015fcc <_dtoa_r+0x760>
 8015fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fb6:	0023      	movs	r3, r4
 8015fb8:	4294      	cmp	r4, r2
 8015fba:	dd00      	ble.n	8015fbe <_dtoa_r+0x752>
 8015fbc:	0013      	movs	r3, r2
 8015fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fc0:	1ae4      	subs	r4, r4, r3
 8015fc2:	1ad2      	subs	r2, r2, r3
 8015fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8015fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d01f      	beq.n	8016012 <_dtoa_r+0x7a6>
 8015fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d100      	bne.n	8015fda <_dtoa_r+0x76e>
 8015fd8:	e0af      	b.n	801613a <_dtoa_r+0x8ce>
 8015fda:	2d00      	cmp	r5, #0
 8015fdc:	d011      	beq.n	8016002 <_dtoa_r+0x796>
 8015fde:	0031      	movs	r1, r6
 8015fe0:	002a      	movs	r2, r5
 8015fe2:	9802      	ldr	r0, [sp, #8]
 8015fe4:	f001 f826 	bl	8017034 <__pow5mult>
 8015fe8:	9a03      	ldr	r2, [sp, #12]
 8015fea:	0001      	movs	r1, r0
 8015fec:	0006      	movs	r6, r0
 8015fee:	9802      	ldr	r0, [sp, #8]
 8015ff0:	f000 ff90 	bl	8016f14 <__multiply>
 8015ff4:	9903      	ldr	r1, [sp, #12]
 8015ff6:	9010      	str	r0, [sp, #64]	; 0x40
 8015ff8:	9802      	ldr	r0, [sp, #8]
 8015ffa:	f000 feb3 	bl	8016d64 <_Bfree>
 8015ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016000:	9303      	str	r3, [sp, #12]
 8016002:	9b04      	ldr	r3, [sp, #16]
 8016004:	1b5a      	subs	r2, r3, r5
 8016006:	d004      	beq.n	8016012 <_dtoa_r+0x7a6>
 8016008:	9903      	ldr	r1, [sp, #12]
 801600a:	9802      	ldr	r0, [sp, #8]
 801600c:	f001 f812 	bl	8017034 <__pow5mult>
 8016010:	9003      	str	r0, [sp, #12]
 8016012:	2101      	movs	r1, #1
 8016014:	9802      	ldr	r0, [sp, #8]
 8016016:	f000 ff74 	bl	8016f02 <__i2b>
 801601a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801601c:	9004      	str	r0, [sp, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d100      	bne.n	8016024 <_dtoa_r+0x7b8>
 8016022:	e1e3      	b.n	80163ec <_dtoa_r+0xb80>
 8016024:	001a      	movs	r2, r3
 8016026:	0001      	movs	r1, r0
 8016028:	9802      	ldr	r0, [sp, #8]
 801602a:	f001 f803 	bl	8017034 <__pow5mult>
 801602e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016030:	9004      	str	r0, [sp, #16]
 8016032:	2b01      	cmp	r3, #1
 8016034:	dd00      	ble.n	8016038 <_dtoa_r+0x7cc>
 8016036:	e082      	b.n	801613e <_dtoa_r+0x8d2>
 8016038:	2500      	movs	r5, #0
 801603a:	9b06      	ldr	r3, [sp, #24]
 801603c:	42ab      	cmp	r3, r5
 801603e:	d10e      	bne.n	801605e <_dtoa_r+0x7f2>
 8016040:	9b07      	ldr	r3, [sp, #28]
 8016042:	031b      	lsls	r3, r3, #12
 8016044:	42ab      	cmp	r3, r5
 8016046:	d10a      	bne.n	801605e <_dtoa_r+0x7f2>
 8016048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801604a:	9a07      	ldr	r2, [sp, #28]
 801604c:	4213      	tst	r3, r2
 801604e:	d006      	beq.n	801605e <_dtoa_r+0x7f2>
 8016050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016052:	3501      	adds	r5, #1
 8016054:	3301      	adds	r3, #1
 8016056:	930a      	str	r3, [sp, #40]	; 0x28
 8016058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801605a:	3301      	adds	r3, #1
 801605c:	930b      	str	r3, [sp, #44]	; 0x2c
 801605e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016060:	2001      	movs	r0, #1
 8016062:	2b00      	cmp	r3, #0
 8016064:	d16c      	bne.n	8016140 <_dtoa_r+0x8d4>
 8016066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016068:	1818      	adds	r0, r3, r0
 801606a:	231f      	movs	r3, #31
 801606c:	4018      	ands	r0, r3
 801606e:	d07e      	beq.n	801616e <_dtoa_r+0x902>
 8016070:	3301      	adds	r3, #1
 8016072:	1a1b      	subs	r3, r3, r0
 8016074:	2b04      	cmp	r3, #4
 8016076:	dd70      	ble.n	801615a <_dtoa_r+0x8ee>
 8016078:	231c      	movs	r3, #28
 801607a:	1a18      	subs	r0, r3, r0
 801607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801607e:	1824      	adds	r4, r4, r0
 8016080:	181b      	adds	r3, r3, r0
 8016082:	930a      	str	r3, [sp, #40]	; 0x28
 8016084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016086:	181b      	adds	r3, r3, r0
 8016088:	930b      	str	r3, [sp, #44]	; 0x2c
 801608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801608c:	2b00      	cmp	r3, #0
 801608e:	dd05      	ble.n	801609c <_dtoa_r+0x830>
 8016090:	001a      	movs	r2, r3
 8016092:	9903      	ldr	r1, [sp, #12]
 8016094:	9802      	ldr	r0, [sp, #8]
 8016096:	f001 f80f 	bl	80170b8 <__lshift>
 801609a:	9003      	str	r0, [sp, #12]
 801609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801609e:	2b00      	cmp	r3, #0
 80160a0:	dd05      	ble.n	80160ae <_dtoa_r+0x842>
 80160a2:	001a      	movs	r2, r3
 80160a4:	9904      	ldr	r1, [sp, #16]
 80160a6:	9802      	ldr	r0, [sp, #8]
 80160a8:	f001 f806 	bl	80170b8 <__lshift>
 80160ac:	9004      	str	r0, [sp, #16]
 80160ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d05e      	beq.n	8016172 <_dtoa_r+0x906>
 80160b4:	9904      	ldr	r1, [sp, #16]
 80160b6:	9803      	ldr	r0, [sp, #12]
 80160b8:	f001 f850 	bl	801715c <__mcmp>
 80160bc:	2800      	cmp	r0, #0
 80160be:	da58      	bge.n	8016172 <_dtoa_r+0x906>
 80160c0:	2300      	movs	r3, #0
 80160c2:	220a      	movs	r2, #10
 80160c4:	9903      	ldr	r1, [sp, #12]
 80160c6:	9802      	ldr	r0, [sp, #8]
 80160c8:	f000 fe56 	bl	8016d78 <__multadd>
 80160cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160ce:	3f01      	subs	r7, #1
 80160d0:	9003      	str	r0, [sp, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d100      	bne.n	80160d8 <_dtoa_r+0x86c>
 80160d6:	e190      	b.n	80163fa <_dtoa_r+0xb8e>
 80160d8:	2300      	movs	r3, #0
 80160da:	0031      	movs	r1, r6
 80160dc:	220a      	movs	r2, #10
 80160de:	9802      	ldr	r0, [sp, #8]
 80160e0:	f000 fe4a 	bl	8016d78 <__multadd>
 80160e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160e6:	0006      	movs	r6, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	dd00      	ble.n	80160ee <_dtoa_r+0x882>
 80160ec:	e088      	b.n	8016200 <_dtoa_r+0x994>
 80160ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160f0:	2b02      	cmp	r3, #2
 80160f2:	dc00      	bgt.n	80160f6 <_dtoa_r+0x88a>
 80160f4:	e084      	b.n	8016200 <_dtoa_r+0x994>
 80160f6:	e044      	b.n	8016182 <_dtoa_r+0x916>
 80160f8:	2336      	movs	r3, #54	; 0x36
 80160fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80160fc:	1a9b      	subs	r3, r3, r2
 80160fe:	e747      	b.n	8015f90 <_dtoa_r+0x724>
 8016100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016102:	1e5d      	subs	r5, r3, #1
 8016104:	9b04      	ldr	r3, [sp, #16]
 8016106:	42ab      	cmp	r3, r5
 8016108:	db08      	blt.n	801611c <_dtoa_r+0x8b0>
 801610a:	1b5d      	subs	r5, r3, r5
 801610c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801610e:	2b00      	cmp	r3, #0
 8016110:	da0c      	bge.n	801612c <_dtoa_r+0x8c0>
 8016112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016116:	1a9c      	subs	r4, r3, r2
 8016118:	2300      	movs	r3, #0
 801611a:	e73b      	b.n	8015f94 <_dtoa_r+0x728>
 801611c:	9b04      	ldr	r3, [sp, #16]
 801611e:	9504      	str	r5, [sp, #16]
 8016120:	1aea      	subs	r2, r5, r3
 8016122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016124:	2500      	movs	r5, #0
 8016126:	189b      	adds	r3, r3, r2
 8016128:	9311      	str	r3, [sp, #68]	; 0x44
 801612a:	e7ef      	b.n	801610c <_dtoa_r+0x8a0>
 801612c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016130:	e730      	b.n	8015f94 <_dtoa_r+0x728>
 8016132:	9d04      	ldr	r5, [sp, #16]
 8016134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016136:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016138:	e737      	b.n	8015faa <_dtoa_r+0x73e>
 801613a:	9a04      	ldr	r2, [sp, #16]
 801613c:	e764      	b.n	8016008 <_dtoa_r+0x79c>
 801613e:	2500      	movs	r5, #0
 8016140:	9b04      	ldr	r3, [sp, #16]
 8016142:	9a04      	ldr	r2, [sp, #16]
 8016144:	691b      	ldr	r3, [r3, #16]
 8016146:	9310      	str	r3, [sp, #64]	; 0x40
 8016148:	3303      	adds	r3, #3
 801614a:	009b      	lsls	r3, r3, #2
 801614c:	18d3      	adds	r3, r2, r3
 801614e:	6858      	ldr	r0, [r3, #4]
 8016150:	f000 fe8e 	bl	8016e70 <__hi0bits>
 8016154:	2320      	movs	r3, #32
 8016156:	1a18      	subs	r0, r3, r0
 8016158:	e785      	b.n	8016066 <_dtoa_r+0x7fa>
 801615a:	2b04      	cmp	r3, #4
 801615c:	d095      	beq.n	801608a <_dtoa_r+0x81e>
 801615e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016160:	331c      	adds	r3, #28
 8016162:	18d2      	adds	r2, r2, r3
 8016164:	920a      	str	r2, [sp, #40]	; 0x28
 8016166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016168:	18e4      	adds	r4, r4, r3
 801616a:	18d3      	adds	r3, r2, r3
 801616c:	e78c      	b.n	8016088 <_dtoa_r+0x81c>
 801616e:	0003      	movs	r3, r0
 8016170:	e7f5      	b.n	801615e <_dtoa_r+0x8f2>
 8016172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016174:	2b00      	cmp	r3, #0
 8016176:	dc3d      	bgt.n	80161f4 <_dtoa_r+0x988>
 8016178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801617a:	2b02      	cmp	r3, #2
 801617c:	dd3a      	ble.n	80161f4 <_dtoa_r+0x988>
 801617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016180:	930c      	str	r3, [sp, #48]	; 0x30
 8016182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016184:	2b00      	cmp	r3, #0
 8016186:	d10c      	bne.n	80161a2 <_dtoa_r+0x936>
 8016188:	9904      	ldr	r1, [sp, #16]
 801618a:	2205      	movs	r2, #5
 801618c:	9802      	ldr	r0, [sp, #8]
 801618e:	f000 fdf3 	bl	8016d78 <__multadd>
 8016192:	9004      	str	r0, [sp, #16]
 8016194:	0001      	movs	r1, r0
 8016196:	9803      	ldr	r0, [sp, #12]
 8016198:	f000 ffe0 	bl	801715c <__mcmp>
 801619c:	2800      	cmp	r0, #0
 801619e:	dd00      	ble.n	80161a2 <_dtoa_r+0x936>
 80161a0:	e5ad      	b.n	8015cfe <_dtoa_r+0x492>
 80161a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161a4:	9d08      	ldr	r5, [sp, #32]
 80161a6:	43df      	mvns	r7, r3
 80161a8:	2300      	movs	r3, #0
 80161aa:	9309      	str	r3, [sp, #36]	; 0x24
 80161ac:	9904      	ldr	r1, [sp, #16]
 80161ae:	9802      	ldr	r0, [sp, #8]
 80161b0:	f000 fdd8 	bl	8016d64 <_Bfree>
 80161b4:	2e00      	cmp	r6, #0
 80161b6:	d100      	bne.n	80161ba <_dtoa_r+0x94e>
 80161b8:	e69b      	b.n	8015ef2 <_dtoa_r+0x686>
 80161ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d005      	beq.n	80161cc <_dtoa_r+0x960>
 80161c0:	42b3      	cmp	r3, r6
 80161c2:	d003      	beq.n	80161cc <_dtoa_r+0x960>
 80161c4:	0019      	movs	r1, r3
 80161c6:	9802      	ldr	r0, [sp, #8]
 80161c8:	f000 fdcc 	bl	8016d64 <_Bfree>
 80161cc:	0031      	movs	r1, r6
 80161ce:	9802      	ldr	r0, [sp, #8]
 80161d0:	f000 fdc8 	bl	8016d64 <_Bfree>
 80161d4:	e68d      	b.n	8015ef2 <_dtoa_r+0x686>
 80161d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161d8:	9304      	str	r3, [sp, #16]
 80161da:	001e      	movs	r6, r3
 80161dc:	e7e1      	b.n	80161a2 <_dtoa_r+0x936>
 80161de:	2300      	movs	r3, #0
 80161e0:	e7fa      	b.n	80161d8 <_dtoa_r+0x96c>
 80161e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161e4:	0037      	movs	r7, r6
 80161e6:	9304      	str	r3, [sp, #16]
 80161e8:	001e      	movs	r6, r3
 80161ea:	e588      	b.n	8015cfe <_dtoa_r+0x492>
 80161ec:	40240000 	.word	0x40240000
 80161f0:	00000433 	.word	0x00000433
 80161f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d100      	bne.n	80161fc <_dtoa_r+0x990>
 80161fa:	e0b2      	b.n	8016362 <_dtoa_r+0xaf6>
 80161fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161fe:	930c      	str	r3, [sp, #48]	; 0x30
 8016200:	2c00      	cmp	r4, #0
 8016202:	dd05      	ble.n	8016210 <_dtoa_r+0x9a4>
 8016204:	0031      	movs	r1, r6
 8016206:	0022      	movs	r2, r4
 8016208:	9802      	ldr	r0, [sp, #8]
 801620a:	f000 ff55 	bl	80170b8 <__lshift>
 801620e:	0006      	movs	r6, r0
 8016210:	0030      	movs	r0, r6
 8016212:	2d00      	cmp	r5, #0
 8016214:	d011      	beq.n	801623a <_dtoa_r+0x9ce>
 8016216:	6871      	ldr	r1, [r6, #4]
 8016218:	9802      	ldr	r0, [sp, #8]
 801621a:	f000 fd7b 	bl	8016d14 <_Balloc>
 801621e:	0031      	movs	r1, r6
 8016220:	0004      	movs	r4, r0
 8016222:	6933      	ldr	r3, [r6, #16]
 8016224:	310c      	adds	r1, #12
 8016226:	1c9a      	adds	r2, r3, #2
 8016228:	0092      	lsls	r2, r2, #2
 801622a:	300c      	adds	r0, #12
 801622c:	f7fc fe8b 	bl	8012f46 <memcpy>
 8016230:	2201      	movs	r2, #1
 8016232:	0021      	movs	r1, r4
 8016234:	9802      	ldr	r0, [sp, #8]
 8016236:	f000 ff3f 	bl	80170b8 <__lshift>
 801623a:	9609      	str	r6, [sp, #36]	; 0x24
 801623c:	0006      	movs	r6, r0
 801623e:	9b08      	ldr	r3, [sp, #32]
 8016240:	930a      	str	r3, [sp, #40]	; 0x28
 8016242:	9904      	ldr	r1, [sp, #16]
 8016244:	9803      	ldr	r0, [sp, #12]
 8016246:	f7ff fa8b 	bl	8015760 <quorem>
 801624a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801624c:	900d      	str	r0, [sp, #52]	; 0x34
 801624e:	0004      	movs	r4, r0
 8016250:	9803      	ldr	r0, [sp, #12]
 8016252:	f000 ff83 	bl	801715c <__mcmp>
 8016256:	0032      	movs	r2, r6
 8016258:	9010      	str	r0, [sp, #64]	; 0x40
 801625a:	9904      	ldr	r1, [sp, #16]
 801625c:	9802      	ldr	r0, [sp, #8]
 801625e:	f000 ff97 	bl	8017190 <__mdiff>
 8016262:	2301      	movs	r3, #1
 8016264:	930b      	str	r3, [sp, #44]	; 0x2c
 8016266:	68c3      	ldr	r3, [r0, #12]
 8016268:	3430      	adds	r4, #48	; 0x30
 801626a:	0005      	movs	r5, r0
 801626c:	2b00      	cmp	r3, #0
 801626e:	d104      	bne.n	801627a <_dtoa_r+0xa0e>
 8016270:	0001      	movs	r1, r0
 8016272:	9803      	ldr	r0, [sp, #12]
 8016274:	f000 ff72 	bl	801715c <__mcmp>
 8016278:	900b      	str	r0, [sp, #44]	; 0x2c
 801627a:	0029      	movs	r1, r5
 801627c:	9802      	ldr	r0, [sp, #8]
 801627e:	f000 fd71 	bl	8016d64 <_Bfree>
 8016282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016284:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016286:	4313      	orrs	r3, r2
 8016288:	d10e      	bne.n	80162a8 <_dtoa_r+0xa3c>
 801628a:	9a06      	ldr	r2, [sp, #24]
 801628c:	3301      	adds	r3, #1
 801628e:	4213      	tst	r3, r2
 8016290:	d10a      	bne.n	80162a8 <_dtoa_r+0xa3c>
 8016292:	2c39      	cmp	r4, #57	; 0x39
 8016294:	d026      	beq.n	80162e4 <_dtoa_r+0xa78>
 8016296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016298:	2b00      	cmp	r3, #0
 801629a:	dd01      	ble.n	80162a0 <_dtoa_r+0xa34>
 801629c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801629e:	3431      	adds	r4, #49	; 0x31
 80162a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162a2:	1c5d      	adds	r5, r3, #1
 80162a4:	701c      	strb	r4, [r3, #0]
 80162a6:	e781      	b.n	80161ac <_dtoa_r+0x940>
 80162a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	db07      	blt.n	80162be <_dtoa_r+0xa52>
 80162ae:	001d      	movs	r5, r3
 80162b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162b2:	431d      	orrs	r5, r3
 80162b4:	d122      	bne.n	80162fc <_dtoa_r+0xa90>
 80162b6:	2301      	movs	r3, #1
 80162b8:	9a06      	ldr	r2, [sp, #24]
 80162ba:	4213      	tst	r3, r2
 80162bc:	d11e      	bne.n	80162fc <_dtoa_r+0xa90>
 80162be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	dded      	ble.n	80162a0 <_dtoa_r+0xa34>
 80162c4:	9903      	ldr	r1, [sp, #12]
 80162c6:	2201      	movs	r2, #1
 80162c8:	9802      	ldr	r0, [sp, #8]
 80162ca:	f000 fef5 	bl	80170b8 <__lshift>
 80162ce:	9904      	ldr	r1, [sp, #16]
 80162d0:	9003      	str	r0, [sp, #12]
 80162d2:	f000 ff43 	bl	801715c <__mcmp>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	dc02      	bgt.n	80162e0 <_dtoa_r+0xa74>
 80162da:	d1e1      	bne.n	80162a0 <_dtoa_r+0xa34>
 80162dc:	07e3      	lsls	r3, r4, #31
 80162de:	d5df      	bpl.n	80162a0 <_dtoa_r+0xa34>
 80162e0:	2c39      	cmp	r4, #57	; 0x39
 80162e2:	d1db      	bne.n	801629c <_dtoa_r+0xa30>
 80162e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162e8:	1c5d      	adds	r5, r3, #1
 80162ea:	2339      	movs	r3, #57	; 0x39
 80162ec:	7013      	strb	r3, [r2, #0]
 80162ee:	1e6b      	subs	r3, r5, #1
 80162f0:	781a      	ldrb	r2, [r3, #0]
 80162f2:	2a39      	cmp	r2, #57	; 0x39
 80162f4:	d067      	beq.n	80163c6 <_dtoa_r+0xb5a>
 80162f6:	3201      	adds	r2, #1
 80162f8:	701a      	strb	r2, [r3, #0]
 80162fa:	e757      	b.n	80161ac <_dtoa_r+0x940>
 80162fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162fe:	1c5d      	adds	r5, r3, #1
 8016300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016302:	2b00      	cmp	r3, #0
 8016304:	dd04      	ble.n	8016310 <_dtoa_r+0xaa4>
 8016306:	2c39      	cmp	r4, #57	; 0x39
 8016308:	d0ec      	beq.n	80162e4 <_dtoa_r+0xa78>
 801630a:	3401      	adds	r4, #1
 801630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801630e:	e7c9      	b.n	80162a4 <_dtoa_r+0xa38>
 8016310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016314:	701c      	strb	r4, [r3, #0]
 8016316:	9b08      	ldr	r3, [sp, #32]
 8016318:	1aeb      	subs	r3, r5, r3
 801631a:	4293      	cmp	r3, r2
 801631c:	d03e      	beq.n	801639c <_dtoa_r+0xb30>
 801631e:	2300      	movs	r3, #0
 8016320:	220a      	movs	r2, #10
 8016322:	9903      	ldr	r1, [sp, #12]
 8016324:	9802      	ldr	r0, [sp, #8]
 8016326:	f000 fd27 	bl	8016d78 <__multadd>
 801632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632c:	9003      	str	r0, [sp, #12]
 801632e:	42b3      	cmp	r3, r6
 8016330:	d109      	bne.n	8016346 <_dtoa_r+0xada>
 8016332:	2300      	movs	r3, #0
 8016334:	220a      	movs	r2, #10
 8016336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016338:	9802      	ldr	r0, [sp, #8]
 801633a:	f000 fd1d 	bl	8016d78 <__multadd>
 801633e:	9009      	str	r0, [sp, #36]	; 0x24
 8016340:	0006      	movs	r6, r0
 8016342:	950a      	str	r5, [sp, #40]	; 0x28
 8016344:	e77d      	b.n	8016242 <_dtoa_r+0x9d6>
 8016346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016348:	2300      	movs	r3, #0
 801634a:	220a      	movs	r2, #10
 801634c:	9802      	ldr	r0, [sp, #8]
 801634e:	f000 fd13 	bl	8016d78 <__multadd>
 8016352:	2300      	movs	r3, #0
 8016354:	9009      	str	r0, [sp, #36]	; 0x24
 8016356:	220a      	movs	r2, #10
 8016358:	0031      	movs	r1, r6
 801635a:	9802      	ldr	r0, [sp, #8]
 801635c:	f000 fd0c 	bl	8016d78 <__multadd>
 8016360:	e7ee      	b.n	8016340 <_dtoa_r+0xad4>
 8016362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016364:	930c      	str	r3, [sp, #48]	; 0x30
 8016366:	9b08      	ldr	r3, [sp, #32]
 8016368:	9306      	str	r3, [sp, #24]
 801636a:	9904      	ldr	r1, [sp, #16]
 801636c:	9803      	ldr	r0, [sp, #12]
 801636e:	f7ff f9f7 	bl	8015760 <quorem>
 8016372:	9b06      	ldr	r3, [sp, #24]
 8016374:	3030      	adds	r0, #48	; 0x30
 8016376:	1c5d      	adds	r5, r3, #1
 8016378:	7018      	strb	r0, [r3, #0]
 801637a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801637c:	9b08      	ldr	r3, [sp, #32]
 801637e:	0004      	movs	r4, r0
 8016380:	1aeb      	subs	r3, r5, r3
 8016382:	429a      	cmp	r2, r3
 8016384:	dd08      	ble.n	8016398 <_dtoa_r+0xb2c>
 8016386:	2300      	movs	r3, #0
 8016388:	220a      	movs	r2, #10
 801638a:	9903      	ldr	r1, [sp, #12]
 801638c:	9802      	ldr	r0, [sp, #8]
 801638e:	f000 fcf3 	bl	8016d78 <__multadd>
 8016392:	9506      	str	r5, [sp, #24]
 8016394:	9003      	str	r0, [sp, #12]
 8016396:	e7e8      	b.n	801636a <_dtoa_r+0xafe>
 8016398:	2300      	movs	r3, #0
 801639a:	9309      	str	r3, [sp, #36]	; 0x24
 801639c:	9903      	ldr	r1, [sp, #12]
 801639e:	2201      	movs	r2, #1
 80163a0:	9802      	ldr	r0, [sp, #8]
 80163a2:	f000 fe89 	bl	80170b8 <__lshift>
 80163a6:	9904      	ldr	r1, [sp, #16]
 80163a8:	9003      	str	r0, [sp, #12]
 80163aa:	f000 fed7 	bl	801715c <__mcmp>
 80163ae:	2800      	cmp	r0, #0
 80163b0:	dc9d      	bgt.n	80162ee <_dtoa_r+0xa82>
 80163b2:	d101      	bne.n	80163b8 <_dtoa_r+0xb4c>
 80163b4:	07e3      	lsls	r3, r4, #31
 80163b6:	d49a      	bmi.n	80162ee <_dtoa_r+0xa82>
 80163b8:	1e6b      	subs	r3, r5, #1
 80163ba:	781a      	ldrb	r2, [r3, #0]
 80163bc:	2a30      	cmp	r2, #48	; 0x30
 80163be:	d000      	beq.n	80163c2 <_dtoa_r+0xb56>
 80163c0:	e6f4      	b.n	80161ac <_dtoa_r+0x940>
 80163c2:	001d      	movs	r5, r3
 80163c4:	e7f8      	b.n	80163b8 <_dtoa_r+0xb4c>
 80163c6:	9a08      	ldr	r2, [sp, #32]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d103      	bne.n	80163d4 <_dtoa_r+0xb68>
 80163cc:	2331      	movs	r3, #49	; 0x31
 80163ce:	3701      	adds	r7, #1
 80163d0:	7013      	strb	r3, [r2, #0]
 80163d2:	e6eb      	b.n	80161ac <_dtoa_r+0x940>
 80163d4:	001d      	movs	r5, r3
 80163d6:	e78a      	b.n	80162ee <_dtoa_r+0xa82>
 80163d8:	4b0b      	ldr	r3, [pc, #44]	; (8016408 <_dtoa_r+0xb9c>)
 80163da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80163dc:	9308      	str	r3, [sp, #32]
 80163de:	4b0b      	ldr	r3, [pc, #44]	; (801640c <_dtoa_r+0xba0>)
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	d001      	beq.n	80163e8 <_dtoa_r+0xb7c>
 80163e4:	f7ff fa75 	bl	80158d2 <_dtoa_r+0x66>
 80163e8:	f7ff fa75 	bl	80158d6 <_dtoa_r+0x6a>
 80163ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	dc00      	bgt.n	80163f4 <_dtoa_r+0xb88>
 80163f2:	e621      	b.n	8016038 <_dtoa_r+0x7cc>
 80163f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80163f6:	2001      	movs	r0, #1
 80163f8:	e635      	b.n	8016066 <_dtoa_r+0x7fa>
 80163fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	dcb2      	bgt.n	8016366 <_dtoa_r+0xafa>
 8016400:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016402:	2b02      	cmp	r3, #2
 8016404:	ddaf      	ble.n	8016366 <_dtoa_r+0xafa>
 8016406:	e6bc      	b.n	8016182 <_dtoa_r+0x916>
 8016408:	0801aa1d 	.word	0x0801aa1d
 801640c:	0801aa25 	.word	0x0801aa25

08016410 <__errno>:
 8016410:	4b01      	ldr	r3, [pc, #4]	; (8016418 <__errno+0x8>)
 8016412:	6818      	ldr	r0, [r3, #0]
 8016414:	4770      	bx	lr
 8016416:	46c0      	nop			; (mov r8, r8)
 8016418:	200000d8 	.word	0x200000d8

0801641c <__libc_fini_array>:
 801641c:	b570      	push	{r4, r5, r6, lr}
 801641e:	4d07      	ldr	r5, [pc, #28]	; (801643c <__libc_fini_array+0x20>)
 8016420:	4c07      	ldr	r4, [pc, #28]	; (8016440 <__libc_fini_array+0x24>)
 8016422:	1b64      	subs	r4, r4, r5
 8016424:	10a4      	asrs	r4, r4, #2
 8016426:	2c00      	cmp	r4, #0
 8016428:	d102      	bne.n	8016430 <__libc_fini_array+0x14>
 801642a:	f001 f95b 	bl	80176e4 <_fini>
 801642e:	bd70      	pop	{r4, r5, r6, pc}
 8016430:	3c01      	subs	r4, #1
 8016432:	00a3      	lsls	r3, r4, #2
 8016434:	58eb      	ldr	r3, [r5, r3]
 8016436:	4798      	blx	r3
 8016438:	e7f5      	b.n	8016426 <__libc_fini_array+0xa>
 801643a:	46c0      	nop			; (mov r8, r8)
 801643c:	0801ab3c 	.word	0x0801ab3c
 8016440:	0801ab40 	.word	0x0801ab40

08016444 <_malloc_trim_r>:
 8016444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016446:	0005      	movs	r5, r0
 8016448:	2008      	movs	r0, #8
 801644a:	000c      	movs	r4, r1
 801644c:	f7ff f95c 	bl	8015708 <sysconf>
 8016450:	0007      	movs	r7, r0
 8016452:	0028      	movs	r0, r5
 8016454:	f7fc fd88 	bl	8012f68 <__malloc_lock>
 8016458:	2203      	movs	r2, #3
 801645a:	4e21      	ldr	r6, [pc, #132]	; (80164e0 <_malloc_trim_r+0x9c>)
 801645c:	0039      	movs	r1, r7
 801645e:	68b3      	ldr	r3, [r6, #8]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	4393      	bics	r3, r2
 8016464:	1b18      	subs	r0, r3, r4
 8016466:	3811      	subs	r0, #17
 8016468:	19c0      	adds	r0, r0, r7
 801646a:	9301      	str	r3, [sp, #4]
 801646c:	f7e9 fe70 	bl	8000150 <__udivsi3>
 8016470:	1e44      	subs	r4, r0, #1
 8016472:	437c      	muls	r4, r7
 8016474:	42a7      	cmp	r7, r4
 8016476:	dd04      	ble.n	8016482 <_malloc_trim_r+0x3e>
 8016478:	0028      	movs	r0, r5
 801647a:	f7fc fd7d 	bl	8012f78 <__malloc_unlock>
 801647e:	2000      	movs	r0, #0
 8016480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016482:	2100      	movs	r1, #0
 8016484:	0028      	movs	r0, r5
 8016486:	f7fc ff4f 	bl	8013328 <_sbrk_r>
 801648a:	68b3      	ldr	r3, [r6, #8]
 801648c:	9a01      	ldr	r2, [sp, #4]
 801648e:	189b      	adds	r3, r3, r2
 8016490:	4298      	cmp	r0, r3
 8016492:	d1f1      	bne.n	8016478 <_malloc_trim_r+0x34>
 8016494:	4261      	negs	r1, r4
 8016496:	0028      	movs	r0, r5
 8016498:	f7fc ff46 	bl	8013328 <_sbrk_r>
 801649c:	1c43      	adds	r3, r0, #1
 801649e:	d110      	bne.n	80164c2 <_malloc_trim_r+0x7e>
 80164a0:	2100      	movs	r1, #0
 80164a2:	0028      	movs	r0, r5
 80164a4:	f7fc ff40 	bl	8013328 <_sbrk_r>
 80164a8:	68b2      	ldr	r2, [r6, #8]
 80164aa:	1a81      	subs	r1, r0, r2
 80164ac:	290f      	cmp	r1, #15
 80164ae:	dde3      	ble.n	8016478 <_malloc_trim_r+0x34>
 80164b0:	4b0c      	ldr	r3, [pc, #48]	; (80164e4 <_malloc_trim_r+0xa0>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	1ac0      	subs	r0, r0, r3
 80164b6:	4b0c      	ldr	r3, [pc, #48]	; (80164e8 <_malloc_trim_r+0xa4>)
 80164b8:	6018      	str	r0, [r3, #0]
 80164ba:	2301      	movs	r3, #1
 80164bc:	430b      	orrs	r3, r1
 80164be:	6053      	str	r3, [r2, #4]
 80164c0:	e7da      	b.n	8016478 <_malloc_trim_r+0x34>
 80164c2:	68b2      	ldr	r2, [r6, #8]
 80164c4:	2601      	movs	r6, #1
 80164c6:	9b01      	ldr	r3, [sp, #4]
 80164c8:	0028      	movs	r0, r5
 80164ca:	1b1b      	subs	r3, r3, r4
 80164cc:	4333      	orrs	r3, r6
 80164ce:	6053      	str	r3, [r2, #4]
 80164d0:	4b05      	ldr	r3, [pc, #20]	; (80164e8 <_malloc_trim_r+0xa4>)
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	1b14      	subs	r4, r2, r4
 80164d6:	601c      	str	r4, [r3, #0]
 80164d8:	f7fc fd4e 	bl	8012f78 <__malloc_unlock>
 80164dc:	0030      	movs	r0, r6
 80164de:	e7cf      	b.n	8016480 <_malloc_trim_r+0x3c>
 80164e0:	20000674 	.word	0x20000674
 80164e4:	20000a7c 	.word	0x20000a7c
 80164e8:	20006cf8 	.word	0x20006cf8

080164ec <_free_r>:
 80164ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164ee:	1e0d      	subs	r5, r1, #0
 80164f0:	9001      	str	r0, [sp, #4]
 80164f2:	d02d      	beq.n	8016550 <_free_r+0x64>
 80164f4:	f7fc fd38 	bl	8012f68 <__malloc_lock>
 80164f8:	2301      	movs	r3, #1
 80164fa:	0029      	movs	r1, r5
 80164fc:	469c      	mov	ip, r3
 80164fe:	3908      	subs	r1, #8
 8016500:	684f      	ldr	r7, [r1, #4]
 8016502:	4662      	mov	r2, ip
 8016504:	003b      	movs	r3, r7
 8016506:	4666      	mov	r6, ip
 8016508:	4393      	bics	r3, r2
 801650a:	18c8      	adds	r0, r1, r3
 801650c:	6845      	ldr	r5, [r0, #4]
 801650e:	3202      	adds	r2, #2
 8016510:	4395      	bics	r5, r2
 8016512:	4a4a      	ldr	r2, [pc, #296]	; (801663c <_free_r+0x150>)
 8016514:	4037      	ands	r7, r6
 8016516:	6896      	ldr	r6, [r2, #8]
 8016518:	4286      	cmp	r6, r0
 801651a:	d11a      	bne.n	8016552 <_free_r+0x66>
 801651c:	195b      	adds	r3, r3, r5
 801651e:	2f00      	cmp	r7, #0
 8016520:	d106      	bne.n	8016530 <_free_r+0x44>
 8016522:	6808      	ldr	r0, [r1, #0]
 8016524:	1a09      	subs	r1, r1, r0
 8016526:	688d      	ldr	r5, [r1, #8]
 8016528:	181b      	adds	r3, r3, r0
 801652a:	68c8      	ldr	r0, [r1, #12]
 801652c:	60e8      	str	r0, [r5, #12]
 801652e:	6085      	str	r5, [r0, #8]
 8016530:	2001      	movs	r0, #1
 8016532:	4318      	orrs	r0, r3
 8016534:	6048      	str	r0, [r1, #4]
 8016536:	6091      	str	r1, [r2, #8]
 8016538:	4a41      	ldr	r2, [pc, #260]	; (8016640 <_free_r+0x154>)
 801653a:	6812      	ldr	r2, [r2, #0]
 801653c:	429a      	cmp	r2, r3
 801653e:	d804      	bhi.n	801654a <_free_r+0x5e>
 8016540:	4b40      	ldr	r3, [pc, #256]	; (8016644 <_free_r+0x158>)
 8016542:	9801      	ldr	r0, [sp, #4]
 8016544:	6819      	ldr	r1, [r3, #0]
 8016546:	f7ff ff7d 	bl	8016444 <_malloc_trim_r>
 801654a:	9801      	ldr	r0, [sp, #4]
 801654c:	f7fc fd14 	bl	8012f78 <__malloc_unlock>
 8016550:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016552:	2600      	movs	r6, #0
 8016554:	6045      	str	r5, [r0, #4]
 8016556:	42b7      	cmp	r7, r6
 8016558:	d109      	bne.n	801656e <_free_r+0x82>
 801655a:	680f      	ldr	r7, [r1, #0]
 801655c:	4c3a      	ldr	r4, [pc, #232]	; (8016648 <_free_r+0x15c>)
 801655e:	1bc9      	subs	r1, r1, r7
 8016560:	19db      	adds	r3, r3, r7
 8016562:	688f      	ldr	r7, [r1, #8]
 8016564:	42a7      	cmp	r7, r4
 8016566:	d02b      	beq.n	80165c0 <_free_r+0xd4>
 8016568:	68cc      	ldr	r4, [r1, #12]
 801656a:	60fc      	str	r4, [r7, #12]
 801656c:	60a7      	str	r7, [r4, #8]
 801656e:	1947      	adds	r7, r0, r5
 8016570:	687c      	ldr	r4, [r7, #4]
 8016572:	2701      	movs	r7, #1
 8016574:	423c      	tst	r4, r7
 8016576:	d10b      	bne.n	8016590 <_free_r+0xa4>
 8016578:	195b      	adds	r3, r3, r5
 801657a:	6885      	ldr	r5, [r0, #8]
 801657c:	2e00      	cmp	r6, #0
 801657e:	d121      	bne.n	80165c4 <_free_r+0xd8>
 8016580:	4c31      	ldr	r4, [pc, #196]	; (8016648 <_free_r+0x15c>)
 8016582:	42a5      	cmp	r5, r4
 8016584:	d11e      	bne.n	80165c4 <_free_r+0xd8>
 8016586:	003e      	movs	r6, r7
 8016588:	6151      	str	r1, [r2, #20]
 801658a:	6111      	str	r1, [r2, #16]
 801658c:	60cd      	str	r5, [r1, #12]
 801658e:	608d      	str	r5, [r1, #8]
 8016590:	2001      	movs	r0, #1
 8016592:	0005      	movs	r5, r0
 8016594:	431d      	orrs	r5, r3
 8016596:	604d      	str	r5, [r1, #4]
 8016598:	50cb      	str	r3, [r1, r3]
 801659a:	2e00      	cmp	r6, #0
 801659c:	d1d5      	bne.n	801654a <_free_r+0x5e>
 801659e:	4d2b      	ldr	r5, [pc, #172]	; (801664c <_free_r+0x160>)
 80165a0:	42ab      	cmp	r3, r5
 80165a2:	d813      	bhi.n	80165cc <_free_r+0xe0>
 80165a4:	08db      	lsrs	r3, r3, #3
 80165a6:	109d      	asrs	r5, r3, #2
 80165a8:	40a8      	lsls	r0, r5
 80165aa:	6854      	ldr	r4, [r2, #4]
 80165ac:	00db      	lsls	r3, r3, #3
 80165ae:	4320      	orrs	r0, r4
 80165b0:	6050      	str	r0, [r2, #4]
 80165b2:	189a      	adds	r2, r3, r2
 80165b4:	6893      	ldr	r3, [r2, #8]
 80165b6:	60ca      	str	r2, [r1, #12]
 80165b8:	608b      	str	r3, [r1, #8]
 80165ba:	6091      	str	r1, [r2, #8]
 80165bc:	60d9      	str	r1, [r3, #12]
 80165be:	e7c4      	b.n	801654a <_free_r+0x5e>
 80165c0:	4666      	mov	r6, ip
 80165c2:	e7d4      	b.n	801656e <_free_r+0x82>
 80165c4:	68c0      	ldr	r0, [r0, #12]
 80165c6:	60e8      	str	r0, [r5, #12]
 80165c8:	6085      	str	r5, [r0, #8]
 80165ca:	e7e1      	b.n	8016590 <_free_r+0xa4>
 80165cc:	0a5d      	lsrs	r5, r3, #9
 80165ce:	2d04      	cmp	r5, #4
 80165d0:	d812      	bhi.n	80165f8 <_free_r+0x10c>
 80165d2:	0998      	lsrs	r0, r3, #6
 80165d4:	3038      	adds	r0, #56	; 0x38
 80165d6:	00c6      	lsls	r6, r0, #3
 80165d8:	18b6      	adds	r6, r6, r2
 80165da:	68b5      	ldr	r5, [r6, #8]
 80165dc:	2703      	movs	r7, #3
 80165de:	42ae      	cmp	r6, r5
 80165e0:	d125      	bne.n	801662e <_free_r+0x142>
 80165e2:	2301      	movs	r3, #1
 80165e4:	1080      	asrs	r0, r0, #2
 80165e6:	4083      	lsls	r3, r0
 80165e8:	6850      	ldr	r0, [r2, #4]
 80165ea:	4303      	orrs	r3, r0
 80165ec:	6053      	str	r3, [r2, #4]
 80165ee:	60ce      	str	r6, [r1, #12]
 80165f0:	608d      	str	r5, [r1, #8]
 80165f2:	60b1      	str	r1, [r6, #8]
 80165f4:	60e9      	str	r1, [r5, #12]
 80165f6:	e7a8      	b.n	801654a <_free_r+0x5e>
 80165f8:	2d14      	cmp	r5, #20
 80165fa:	d802      	bhi.n	8016602 <_free_r+0x116>
 80165fc:	0028      	movs	r0, r5
 80165fe:	305b      	adds	r0, #91	; 0x5b
 8016600:	e7e9      	b.n	80165d6 <_free_r+0xea>
 8016602:	2d54      	cmp	r5, #84	; 0x54
 8016604:	d802      	bhi.n	801660c <_free_r+0x120>
 8016606:	0b18      	lsrs	r0, r3, #12
 8016608:	306e      	adds	r0, #110	; 0x6e
 801660a:	e7e4      	b.n	80165d6 <_free_r+0xea>
 801660c:	20aa      	movs	r0, #170	; 0xaa
 801660e:	0040      	lsls	r0, r0, #1
 8016610:	4285      	cmp	r5, r0
 8016612:	d802      	bhi.n	801661a <_free_r+0x12e>
 8016614:	0bd8      	lsrs	r0, r3, #15
 8016616:	3077      	adds	r0, #119	; 0x77
 8016618:	e7dd      	b.n	80165d6 <_free_r+0xea>
 801661a:	4e0d      	ldr	r6, [pc, #52]	; (8016650 <_free_r+0x164>)
 801661c:	207e      	movs	r0, #126	; 0x7e
 801661e:	42b5      	cmp	r5, r6
 8016620:	d8d9      	bhi.n	80165d6 <_free_r+0xea>
 8016622:	0c98      	lsrs	r0, r3, #18
 8016624:	307c      	adds	r0, #124	; 0x7c
 8016626:	e7d6      	b.n	80165d6 <_free_r+0xea>
 8016628:	68ad      	ldr	r5, [r5, #8]
 801662a:	42ae      	cmp	r6, r5
 801662c:	d003      	beq.n	8016636 <_free_r+0x14a>
 801662e:	686a      	ldr	r2, [r5, #4]
 8016630:	43ba      	bics	r2, r7
 8016632:	429a      	cmp	r2, r3
 8016634:	d8f8      	bhi.n	8016628 <_free_r+0x13c>
 8016636:	68ee      	ldr	r6, [r5, #12]
 8016638:	e7d9      	b.n	80165ee <_free_r+0x102>
 801663a:	46c0      	nop			; (mov r8, r8)
 801663c:	20000674 	.word	0x20000674
 8016640:	20000a80 	.word	0x20000a80
 8016644:	20006d28 	.word	0x20006d28
 8016648:	2000067c 	.word	0x2000067c
 801664c:	000001ff 	.word	0x000001ff
 8016650:	00000554 	.word	0x00000554

08016654 <rshift>:
 8016654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016656:	0004      	movs	r4, r0
 8016658:	6905      	ldr	r5, [r0, #16]
 801665a:	3414      	adds	r4, #20
 801665c:	114b      	asrs	r3, r1, #5
 801665e:	0026      	movs	r6, r4
 8016660:	429d      	cmp	r5, r3
 8016662:	dd14      	ble.n	801668e <rshift+0x3a>
 8016664:	221f      	movs	r2, #31
 8016666:	00ad      	lsls	r5, r5, #2
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	4011      	ands	r1, r2
 801666c:	1965      	adds	r5, r4, r5
 801666e:	18e3      	adds	r3, r4, r3
 8016670:	0022      	movs	r2, r4
 8016672:	2900      	cmp	r1, #0
 8016674:	d01e      	beq.n	80166b4 <rshift+0x60>
 8016676:	cb04      	ldmia	r3!, {r2}
 8016678:	2720      	movs	r7, #32
 801667a:	40ca      	lsrs	r2, r1
 801667c:	46a4      	mov	ip, r4
 801667e:	1a7f      	subs	r7, r7, r1
 8016680:	4666      	mov	r6, ip
 8016682:	429d      	cmp	r5, r3
 8016684:	d80b      	bhi.n	801669e <rshift+0x4a>
 8016686:	6032      	str	r2, [r6, #0]
 8016688:	2a00      	cmp	r2, #0
 801668a:	d000      	beq.n	801668e <rshift+0x3a>
 801668c:	3604      	adds	r6, #4
 801668e:	1b33      	subs	r3, r6, r4
 8016690:	109b      	asrs	r3, r3, #2
 8016692:	6103      	str	r3, [r0, #16]
 8016694:	42a6      	cmp	r6, r4
 8016696:	d101      	bne.n	801669c <rshift+0x48>
 8016698:	2300      	movs	r3, #0
 801669a:	6143      	str	r3, [r0, #20]
 801669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669e:	681e      	ldr	r6, [r3, #0]
 80166a0:	40be      	lsls	r6, r7
 80166a2:	4332      	orrs	r2, r6
 80166a4:	4666      	mov	r6, ip
 80166a6:	c604      	stmia	r6!, {r2}
 80166a8:	cb04      	ldmia	r3!, {r2}
 80166aa:	46b4      	mov	ip, r6
 80166ac:	40ca      	lsrs	r2, r1
 80166ae:	e7e7      	b.n	8016680 <rshift+0x2c>
 80166b0:	cb02      	ldmia	r3!, {r1}
 80166b2:	c202      	stmia	r2!, {r1}
 80166b4:	0016      	movs	r6, r2
 80166b6:	429d      	cmp	r5, r3
 80166b8:	d8fa      	bhi.n	80166b0 <rshift+0x5c>
 80166ba:	e7e8      	b.n	801668e <rshift+0x3a>

080166bc <__hexdig_fun>:
 80166bc:	0003      	movs	r3, r0
 80166be:	3b30      	subs	r3, #48	; 0x30
 80166c0:	2b09      	cmp	r3, #9
 80166c2:	d803      	bhi.n	80166cc <__hexdig_fun+0x10>
 80166c4:	3820      	subs	r0, #32
 80166c6:	b2c3      	uxtb	r3, r0
 80166c8:	0018      	movs	r0, r3
 80166ca:	4770      	bx	lr
 80166cc:	0003      	movs	r3, r0
 80166ce:	3b61      	subs	r3, #97	; 0x61
 80166d0:	2b05      	cmp	r3, #5
 80166d2:	d801      	bhi.n	80166d8 <__hexdig_fun+0x1c>
 80166d4:	3847      	subs	r0, #71	; 0x47
 80166d6:	e7f6      	b.n	80166c6 <__hexdig_fun+0xa>
 80166d8:	0002      	movs	r2, r0
 80166da:	3a41      	subs	r2, #65	; 0x41
 80166dc:	2300      	movs	r3, #0
 80166de:	2a05      	cmp	r2, #5
 80166e0:	d8f2      	bhi.n	80166c8 <__hexdig_fun+0xc>
 80166e2:	3827      	subs	r0, #39	; 0x27
 80166e4:	e7ef      	b.n	80166c6 <__hexdig_fun+0xa>

080166e6 <__gethex>:
 80166e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166e8:	b08d      	sub	sp, #52	; 0x34
 80166ea:	9005      	str	r0, [sp, #20]
 80166ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 80166ee:	9109      	str	r1, [sp, #36]	; 0x24
 80166f0:	9202      	str	r2, [sp, #8]
 80166f2:	930a      	str	r3, [sp, #40]	; 0x28
 80166f4:	f000 fadf 	bl	8016cb6 <__localeconv_l>
 80166f8:	6803      	ldr	r3, [r0, #0]
 80166fa:	0018      	movs	r0, r3
 80166fc:	9307      	str	r3, [sp, #28]
 80166fe:	f7e9 fd0b 	bl	8000118 <strlen>
 8016702:	2202      	movs	r2, #2
 8016704:	9b07      	ldr	r3, [sp, #28]
 8016706:	4252      	negs	r2, r2
 8016708:	181b      	adds	r3, r3, r0
 801670a:	3b01      	subs	r3, #1
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	9004      	str	r0, [sp, #16]
 8016710:	930b      	str	r3, [sp, #44]	; 0x2c
 8016712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016714:	6819      	ldr	r1, [r3, #0]
 8016716:	1c8b      	adds	r3, r1, #2
 8016718:	1a52      	subs	r2, r2, r1
 801671a:	18d1      	adds	r1, r2, r3
 801671c:	9301      	str	r3, [sp, #4]
 801671e:	9108      	str	r1, [sp, #32]
 8016720:	9901      	ldr	r1, [sp, #4]
 8016722:	3301      	adds	r3, #1
 8016724:	7808      	ldrb	r0, [r1, #0]
 8016726:	2830      	cmp	r0, #48	; 0x30
 8016728:	d0f7      	beq.n	801671a <__gethex+0x34>
 801672a:	f7ff ffc7 	bl	80166bc <__hexdig_fun>
 801672e:	1e07      	subs	r7, r0, #0
 8016730:	d000      	beq.n	8016734 <__gethex+0x4e>
 8016732:	e06f      	b.n	8016814 <__gethex+0x12e>
 8016734:	9a04      	ldr	r2, [sp, #16]
 8016736:	9907      	ldr	r1, [sp, #28]
 8016738:	9801      	ldr	r0, [sp, #4]
 801673a:	f7fc fe4b 	bl	80133d4 <strncmp>
 801673e:	2800      	cmp	r0, #0
 8016740:	d000      	beq.n	8016744 <__gethex+0x5e>
 8016742:	e06d      	b.n	8016820 <__gethex+0x13a>
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	9a04      	ldr	r2, [sp, #16]
 8016748:	189c      	adds	r4, r3, r2
 801674a:	7820      	ldrb	r0, [r4, #0]
 801674c:	f7ff ffb6 	bl	80166bc <__hexdig_fun>
 8016750:	2800      	cmp	r0, #0
 8016752:	d069      	beq.n	8016828 <__gethex+0x142>
 8016754:	9401      	str	r4, [sp, #4]
 8016756:	9b01      	ldr	r3, [sp, #4]
 8016758:	7818      	ldrb	r0, [r3, #0]
 801675a:	2830      	cmp	r0, #48	; 0x30
 801675c:	d009      	beq.n	8016772 <__gethex+0x8c>
 801675e:	f7ff ffad 	bl	80166bc <__hexdig_fun>
 8016762:	4243      	negs	r3, r0
 8016764:	4143      	adcs	r3, r0
 8016766:	9303      	str	r3, [sp, #12]
 8016768:	2301      	movs	r3, #1
 801676a:	0026      	movs	r6, r4
 801676c:	9308      	str	r3, [sp, #32]
 801676e:	9c01      	ldr	r4, [sp, #4]
 8016770:	e004      	b.n	801677c <__gethex+0x96>
 8016772:	9b01      	ldr	r3, [sp, #4]
 8016774:	3301      	adds	r3, #1
 8016776:	9301      	str	r3, [sp, #4]
 8016778:	e7ed      	b.n	8016756 <__gethex+0x70>
 801677a:	3401      	adds	r4, #1
 801677c:	7820      	ldrb	r0, [r4, #0]
 801677e:	f7ff ff9d 	bl	80166bc <__hexdig_fun>
 8016782:	2800      	cmp	r0, #0
 8016784:	d1f9      	bne.n	801677a <__gethex+0x94>
 8016786:	9a04      	ldr	r2, [sp, #16]
 8016788:	9907      	ldr	r1, [sp, #28]
 801678a:	0020      	movs	r0, r4
 801678c:	f7fc fe22 	bl	80133d4 <strncmp>
 8016790:	2800      	cmp	r0, #0
 8016792:	d109      	bne.n	80167a8 <__gethex+0xc2>
 8016794:	2e00      	cmp	r6, #0
 8016796:	d10a      	bne.n	80167ae <__gethex+0xc8>
 8016798:	9b04      	ldr	r3, [sp, #16]
 801679a:	18e4      	adds	r4, r4, r3
 801679c:	0026      	movs	r6, r4
 801679e:	7820      	ldrb	r0, [r4, #0]
 80167a0:	f7ff ff8c 	bl	80166bc <__hexdig_fun>
 80167a4:	2800      	cmp	r0, #0
 80167a6:	d139      	bne.n	801681c <__gethex+0x136>
 80167a8:	2700      	movs	r7, #0
 80167aa:	42be      	cmp	r6, r7
 80167ac:	d001      	beq.n	80167b2 <__gethex+0xcc>
 80167ae:	1b37      	subs	r7, r6, r4
 80167b0:	00bf      	lsls	r7, r7, #2
 80167b2:	7823      	ldrb	r3, [r4, #0]
 80167b4:	2b50      	cmp	r3, #80	; 0x50
 80167b6:	d001      	beq.n	80167bc <__gethex+0xd6>
 80167b8:	2b70      	cmp	r3, #112	; 0x70
 80167ba:	d142      	bne.n	8016842 <__gethex+0x15c>
 80167bc:	7863      	ldrb	r3, [r4, #1]
 80167be:	2b2b      	cmp	r3, #43	; 0x2b
 80167c0:	d034      	beq.n	801682c <__gethex+0x146>
 80167c2:	2b2d      	cmp	r3, #45	; 0x2d
 80167c4:	d036      	beq.n	8016834 <__gethex+0x14e>
 80167c6:	2300      	movs	r3, #0
 80167c8:	1c66      	adds	r6, r4, #1
 80167ca:	9306      	str	r3, [sp, #24]
 80167cc:	7830      	ldrb	r0, [r6, #0]
 80167ce:	f7ff ff75 	bl	80166bc <__hexdig_fun>
 80167d2:	1e43      	subs	r3, r0, #1
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	2b18      	cmp	r3, #24
 80167d8:	d833      	bhi.n	8016842 <__gethex+0x15c>
 80167da:	3810      	subs	r0, #16
 80167dc:	0005      	movs	r5, r0
 80167de:	3601      	adds	r6, #1
 80167e0:	7830      	ldrb	r0, [r6, #0]
 80167e2:	f7ff ff6b 	bl	80166bc <__hexdig_fun>
 80167e6:	1e43      	subs	r3, r0, #1
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	2b18      	cmp	r3, #24
 80167ec:	d924      	bls.n	8016838 <__gethex+0x152>
 80167ee:	9b06      	ldr	r3, [sp, #24]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d000      	beq.n	80167f6 <__gethex+0x110>
 80167f4:	426d      	negs	r5, r5
 80167f6:	197f      	adds	r7, r7, r5
 80167f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167fa:	601e      	str	r6, [r3, #0]
 80167fc:	9b03      	ldr	r3, [sp, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d021      	beq.n	8016846 <__gethex+0x160>
 8016802:	9b08      	ldr	r3, [sp, #32]
 8016804:	2606      	movs	r6, #6
 8016806:	425a      	negs	r2, r3
 8016808:	4153      	adcs	r3, r2
 801680a:	425b      	negs	r3, r3
 801680c:	401e      	ands	r6, r3
 801680e:	0030      	movs	r0, r6
 8016810:	b00d      	add	sp, #52	; 0x34
 8016812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016814:	2300      	movs	r3, #0
 8016816:	9303      	str	r3, [sp, #12]
 8016818:	001e      	movs	r6, r3
 801681a:	e7a8      	b.n	801676e <__gethex+0x88>
 801681c:	3401      	adds	r4, #1
 801681e:	e7be      	b.n	801679e <__gethex+0xb8>
 8016820:	9c01      	ldr	r4, [sp, #4]
 8016822:	2301      	movs	r3, #1
 8016824:	9303      	str	r3, [sp, #12]
 8016826:	e7c4      	b.n	80167b2 <__gethex+0xcc>
 8016828:	0007      	movs	r7, r0
 801682a:	e7fa      	b.n	8016822 <__gethex+0x13c>
 801682c:	2300      	movs	r3, #0
 801682e:	9306      	str	r3, [sp, #24]
 8016830:	1ca6      	adds	r6, r4, #2
 8016832:	e7cb      	b.n	80167cc <__gethex+0xe6>
 8016834:	2301      	movs	r3, #1
 8016836:	e7fa      	b.n	801682e <__gethex+0x148>
 8016838:	230a      	movs	r3, #10
 801683a:	435d      	muls	r5, r3
 801683c:	182d      	adds	r5, r5, r0
 801683e:	3d10      	subs	r5, #16
 8016840:	e7cd      	b.n	80167de <__gethex+0xf8>
 8016842:	0026      	movs	r6, r4
 8016844:	e7d8      	b.n	80167f8 <__gethex+0x112>
 8016846:	9b01      	ldr	r3, [sp, #4]
 8016848:	9903      	ldr	r1, [sp, #12]
 801684a:	1ae3      	subs	r3, r4, r3
 801684c:	3b01      	subs	r3, #1
 801684e:	2b07      	cmp	r3, #7
 8016850:	dc47      	bgt.n	80168e2 <__gethex+0x1fc>
 8016852:	9805      	ldr	r0, [sp, #20]
 8016854:	f000 fa5e 	bl	8016d14 <_Balloc>
 8016858:	0003      	movs	r3, r0
 801685a:	3314      	adds	r3, #20
 801685c:	9303      	str	r3, [sp, #12]
 801685e:	9308      	str	r3, [sp, #32]
 8016860:	2300      	movs	r3, #0
 8016862:	0005      	movs	r5, r0
 8016864:	001e      	movs	r6, r3
 8016866:	9306      	str	r3, [sp, #24]
 8016868:	9b01      	ldr	r3, [sp, #4]
 801686a:	42a3      	cmp	r3, r4
 801686c:	d33c      	bcc.n	80168e8 <__gethex+0x202>
 801686e:	9c08      	ldr	r4, [sp, #32]
 8016870:	9b03      	ldr	r3, [sp, #12]
 8016872:	c440      	stmia	r4!, {r6}
 8016874:	1ae4      	subs	r4, r4, r3
 8016876:	10a4      	asrs	r4, r4, #2
 8016878:	612c      	str	r4, [r5, #16]
 801687a:	0030      	movs	r0, r6
 801687c:	f000 faf8 	bl	8016e70 <__hi0bits>
 8016880:	9b02      	ldr	r3, [sp, #8]
 8016882:	0164      	lsls	r4, r4, #5
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	1a26      	subs	r6, r4, r0
 8016888:	9301      	str	r3, [sp, #4]
 801688a:	429e      	cmp	r6, r3
 801688c:	dd5f      	ble.n	801694e <__gethex+0x268>
 801688e:	1af6      	subs	r6, r6, r3
 8016890:	0031      	movs	r1, r6
 8016892:	0028      	movs	r0, r5
 8016894:	f000 fde3 	bl	801745e <__any_on>
 8016898:	1e04      	subs	r4, r0, #0
 801689a:	d00f      	beq.n	80168bc <__gethex+0x1d6>
 801689c:	2401      	movs	r4, #1
 801689e:	211f      	movs	r1, #31
 80168a0:	0020      	movs	r0, r4
 80168a2:	1e73      	subs	r3, r6, #1
 80168a4:	4019      	ands	r1, r3
 80168a6:	4088      	lsls	r0, r1
 80168a8:	0001      	movs	r1, r0
 80168aa:	115a      	asrs	r2, r3, #5
 80168ac:	9803      	ldr	r0, [sp, #12]
 80168ae:	0092      	lsls	r2, r2, #2
 80168b0:	5812      	ldr	r2, [r2, r0]
 80168b2:	420a      	tst	r2, r1
 80168b4:	d002      	beq.n	80168bc <__gethex+0x1d6>
 80168b6:	42a3      	cmp	r3, r4
 80168b8:	dc41      	bgt.n	801693e <__gethex+0x258>
 80168ba:	2402      	movs	r4, #2
 80168bc:	0031      	movs	r1, r6
 80168be:	0028      	movs	r0, r5
 80168c0:	f7ff fec8 	bl	8016654 <rshift>
 80168c4:	19bf      	adds	r7, r7, r6
 80168c6:	9b02      	ldr	r3, [sp, #8]
 80168c8:	689b      	ldr	r3, [r3, #8]
 80168ca:	9304      	str	r3, [sp, #16]
 80168cc:	42bb      	cmp	r3, r7
 80168ce:	da4e      	bge.n	801696e <__gethex+0x288>
 80168d0:	0029      	movs	r1, r5
 80168d2:	9805      	ldr	r0, [sp, #20]
 80168d4:	f000 fa46 	bl	8016d64 <_Bfree>
 80168d8:	2300      	movs	r3, #0
 80168da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168dc:	26a3      	movs	r6, #163	; 0xa3
 80168de:	6013      	str	r3, [r2, #0]
 80168e0:	e795      	b.n	801680e <__gethex+0x128>
 80168e2:	3101      	adds	r1, #1
 80168e4:	105b      	asrs	r3, r3, #1
 80168e6:	e7b2      	b.n	801684e <__gethex+0x168>
 80168e8:	1e63      	subs	r3, r4, #1
 80168ea:	9309      	str	r3, [sp, #36]	; 0x24
 80168ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	4293      	cmp	r3, r2
 80168f2:	d015      	beq.n	8016920 <__gethex+0x23a>
 80168f4:	9b06      	ldr	r3, [sp, #24]
 80168f6:	2b20      	cmp	r3, #32
 80168f8:	d105      	bne.n	8016906 <__gethex+0x220>
 80168fa:	9b08      	ldr	r3, [sp, #32]
 80168fc:	601e      	str	r6, [r3, #0]
 80168fe:	2600      	movs	r6, #0
 8016900:	3304      	adds	r3, #4
 8016902:	9308      	str	r3, [sp, #32]
 8016904:	9606      	str	r6, [sp, #24]
 8016906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016908:	7818      	ldrb	r0, [r3, #0]
 801690a:	f7ff fed7 	bl	80166bc <__hexdig_fun>
 801690e:	230f      	movs	r3, #15
 8016910:	4018      	ands	r0, r3
 8016912:	9b06      	ldr	r3, [sp, #24]
 8016914:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016916:	4098      	lsls	r0, r3
 8016918:	3304      	adds	r3, #4
 801691a:	4306      	orrs	r6, r0
 801691c:	9306      	str	r3, [sp, #24]
 801691e:	e7a3      	b.n	8016868 <__gethex+0x182>
 8016920:	2301      	movs	r3, #1
 8016922:	9a04      	ldr	r2, [sp, #16]
 8016924:	1a9c      	subs	r4, r3, r2
 8016926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016928:	191c      	adds	r4, r3, r4
 801692a:	9b01      	ldr	r3, [sp, #4]
 801692c:	429c      	cmp	r4, r3
 801692e:	d3e1      	bcc.n	80168f4 <__gethex+0x20e>
 8016930:	9907      	ldr	r1, [sp, #28]
 8016932:	0020      	movs	r0, r4
 8016934:	f7fc fd4e 	bl	80133d4 <strncmp>
 8016938:	2800      	cmp	r0, #0
 801693a:	d1db      	bne.n	80168f4 <__gethex+0x20e>
 801693c:	e794      	b.n	8016868 <__gethex+0x182>
 801693e:	1eb1      	subs	r1, r6, #2
 8016940:	0028      	movs	r0, r5
 8016942:	f000 fd8c 	bl	801745e <__any_on>
 8016946:	2800      	cmp	r0, #0
 8016948:	d0b7      	beq.n	80168ba <__gethex+0x1d4>
 801694a:	2403      	movs	r4, #3
 801694c:	e7b6      	b.n	80168bc <__gethex+0x1d6>
 801694e:	9b01      	ldr	r3, [sp, #4]
 8016950:	2400      	movs	r4, #0
 8016952:	429e      	cmp	r6, r3
 8016954:	dab7      	bge.n	80168c6 <__gethex+0x1e0>
 8016956:	1b9e      	subs	r6, r3, r6
 8016958:	0029      	movs	r1, r5
 801695a:	0032      	movs	r2, r6
 801695c:	9805      	ldr	r0, [sp, #20]
 801695e:	f000 fbab 	bl	80170b8 <__lshift>
 8016962:	0003      	movs	r3, r0
 8016964:	3314      	adds	r3, #20
 8016966:	0005      	movs	r5, r0
 8016968:	1bbf      	subs	r7, r7, r6
 801696a:	9303      	str	r3, [sp, #12]
 801696c:	e7ab      	b.n	80168c6 <__gethex+0x1e0>
 801696e:	9b02      	ldr	r3, [sp, #8]
 8016970:	685e      	ldr	r6, [r3, #4]
 8016972:	42be      	cmp	r6, r7
 8016974:	dd6b      	ble.n	8016a4e <__gethex+0x368>
 8016976:	9b01      	ldr	r3, [sp, #4]
 8016978:	1bf6      	subs	r6, r6, r7
 801697a:	42b3      	cmp	r3, r6
 801697c:	dc32      	bgt.n	80169e4 <__gethex+0x2fe>
 801697e:	9b02      	ldr	r3, [sp, #8]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	2b02      	cmp	r3, #2
 8016984:	d026      	beq.n	80169d4 <__gethex+0x2ee>
 8016986:	2b03      	cmp	r3, #3
 8016988:	d028      	beq.n	80169dc <__gethex+0x2f6>
 801698a:	2b01      	cmp	r3, #1
 801698c:	d119      	bne.n	80169c2 <__gethex+0x2dc>
 801698e:	9b01      	ldr	r3, [sp, #4]
 8016990:	42b3      	cmp	r3, r6
 8016992:	d116      	bne.n	80169c2 <__gethex+0x2dc>
 8016994:	2b01      	cmp	r3, #1
 8016996:	dc0d      	bgt.n	80169b4 <__gethex+0x2ce>
 8016998:	9b02      	ldr	r3, [sp, #8]
 801699a:	2662      	movs	r6, #98	; 0x62
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	9301      	str	r3, [sp, #4]
 80169a0:	9a01      	ldr	r2, [sp, #4]
 80169a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169a4:	601a      	str	r2, [r3, #0]
 80169a6:	2301      	movs	r3, #1
 80169a8:	9a03      	ldr	r2, [sp, #12]
 80169aa:	612b      	str	r3, [r5, #16]
 80169ac:	6013      	str	r3, [r2, #0]
 80169ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80169b0:	601d      	str	r5, [r3, #0]
 80169b2:	e72c      	b.n	801680e <__gethex+0x128>
 80169b4:	9901      	ldr	r1, [sp, #4]
 80169b6:	0028      	movs	r0, r5
 80169b8:	3901      	subs	r1, #1
 80169ba:	f000 fd50 	bl	801745e <__any_on>
 80169be:	2800      	cmp	r0, #0
 80169c0:	d1ea      	bne.n	8016998 <__gethex+0x2b2>
 80169c2:	0029      	movs	r1, r5
 80169c4:	9805      	ldr	r0, [sp, #20]
 80169c6:	f000 f9cd 	bl	8016d64 <_Bfree>
 80169ca:	2300      	movs	r3, #0
 80169cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169ce:	2650      	movs	r6, #80	; 0x50
 80169d0:	6013      	str	r3, [r2, #0]
 80169d2:	e71c      	b.n	801680e <__gethex+0x128>
 80169d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d0de      	beq.n	8016998 <__gethex+0x2b2>
 80169da:	e7f2      	b.n	80169c2 <__gethex+0x2dc>
 80169dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d1da      	bne.n	8016998 <__gethex+0x2b2>
 80169e2:	e7ee      	b.n	80169c2 <__gethex+0x2dc>
 80169e4:	1e77      	subs	r7, r6, #1
 80169e6:	2c00      	cmp	r4, #0
 80169e8:	d12f      	bne.n	8016a4a <__gethex+0x364>
 80169ea:	2f00      	cmp	r7, #0
 80169ec:	d004      	beq.n	80169f8 <__gethex+0x312>
 80169ee:	0039      	movs	r1, r7
 80169f0:	0028      	movs	r0, r5
 80169f2:	f000 fd34 	bl	801745e <__any_on>
 80169f6:	0004      	movs	r4, r0
 80169f8:	231f      	movs	r3, #31
 80169fa:	117a      	asrs	r2, r7, #5
 80169fc:	401f      	ands	r7, r3
 80169fe:	3b1e      	subs	r3, #30
 8016a00:	40bb      	lsls	r3, r7
 8016a02:	9903      	ldr	r1, [sp, #12]
 8016a04:	0092      	lsls	r2, r2, #2
 8016a06:	5852      	ldr	r2, [r2, r1]
 8016a08:	421a      	tst	r2, r3
 8016a0a:	d001      	beq.n	8016a10 <__gethex+0x32a>
 8016a0c:	2302      	movs	r3, #2
 8016a0e:	431c      	orrs	r4, r3
 8016a10:	9b01      	ldr	r3, [sp, #4]
 8016a12:	0031      	movs	r1, r6
 8016a14:	1b9b      	subs	r3, r3, r6
 8016a16:	2602      	movs	r6, #2
 8016a18:	0028      	movs	r0, r5
 8016a1a:	9301      	str	r3, [sp, #4]
 8016a1c:	f7ff fe1a 	bl	8016654 <rshift>
 8016a20:	9b02      	ldr	r3, [sp, #8]
 8016a22:	685f      	ldr	r7, [r3, #4]
 8016a24:	2c00      	cmp	r4, #0
 8016a26:	d040      	beq.n	8016aaa <__gethex+0x3c4>
 8016a28:	9b02      	ldr	r3, [sp, #8]
 8016a2a:	68db      	ldr	r3, [r3, #12]
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d010      	beq.n	8016a52 <__gethex+0x36c>
 8016a30:	2b03      	cmp	r3, #3
 8016a32:	d012      	beq.n	8016a5a <__gethex+0x374>
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d106      	bne.n	8016a46 <__gethex+0x360>
 8016a38:	07a2      	lsls	r2, r4, #30
 8016a3a:	d504      	bpl.n	8016a46 <__gethex+0x360>
 8016a3c:	9a03      	ldr	r2, [sp, #12]
 8016a3e:	6812      	ldr	r2, [r2, #0]
 8016a40:	4314      	orrs	r4, r2
 8016a42:	421c      	tst	r4, r3
 8016a44:	d10c      	bne.n	8016a60 <__gethex+0x37a>
 8016a46:	2310      	movs	r3, #16
 8016a48:	e02e      	b.n	8016aa8 <__gethex+0x3c2>
 8016a4a:	2401      	movs	r4, #1
 8016a4c:	e7d4      	b.n	80169f8 <__gethex+0x312>
 8016a4e:	2601      	movs	r6, #1
 8016a50:	e7e8      	b.n	8016a24 <__gethex+0x33e>
 8016a52:	2301      	movs	r3, #1
 8016a54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a56:	1a9b      	subs	r3, r3, r2
 8016a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d0f2      	beq.n	8016a46 <__gethex+0x360>
 8016a60:	692c      	ldr	r4, [r5, #16]
 8016a62:	00a3      	lsls	r3, r4, #2
 8016a64:	9304      	str	r3, [sp, #16]
 8016a66:	002b      	movs	r3, r5
 8016a68:	00a2      	lsls	r2, r4, #2
 8016a6a:	3314      	adds	r3, #20
 8016a6c:	1899      	adds	r1, r3, r2
 8016a6e:	2200      	movs	r2, #0
 8016a70:	4694      	mov	ip, r2
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	1c50      	adds	r0, r2, #1
 8016a76:	d01d      	beq.n	8016ab4 <__gethex+0x3ce>
 8016a78:	3201      	adds	r2, #1
 8016a7a:	601a      	str	r2, [r3, #0]
 8016a7c:	002b      	movs	r3, r5
 8016a7e:	3314      	adds	r3, #20
 8016a80:	2e02      	cmp	r6, #2
 8016a82:	d13a      	bne.n	8016afa <__gethex+0x414>
 8016a84:	9a02      	ldr	r2, [sp, #8]
 8016a86:	9901      	ldr	r1, [sp, #4]
 8016a88:	6812      	ldr	r2, [r2, #0]
 8016a8a:	3a01      	subs	r2, #1
 8016a8c:	428a      	cmp	r2, r1
 8016a8e:	d10a      	bne.n	8016aa6 <__gethex+0x3c0>
 8016a90:	114a      	asrs	r2, r1, #5
 8016a92:	211f      	movs	r1, #31
 8016a94:	9801      	ldr	r0, [sp, #4]
 8016a96:	0092      	lsls	r2, r2, #2
 8016a98:	4001      	ands	r1, r0
 8016a9a:	2001      	movs	r0, #1
 8016a9c:	0004      	movs	r4, r0
 8016a9e:	408c      	lsls	r4, r1
 8016aa0:	58d3      	ldr	r3, [r2, r3]
 8016aa2:	4223      	tst	r3, r4
 8016aa4:	d148      	bne.n	8016b38 <__gethex+0x452>
 8016aa6:	2320      	movs	r3, #32
 8016aa8:	431e      	orrs	r6, r3
 8016aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016aac:	601d      	str	r5, [r3, #0]
 8016aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ab0:	601f      	str	r7, [r3, #0]
 8016ab2:	e6ac      	b.n	801680e <__gethex+0x128>
 8016ab4:	4662      	mov	r2, ip
 8016ab6:	c304      	stmia	r3!, {r2}
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	d8da      	bhi.n	8016a72 <__gethex+0x38c>
 8016abc:	68ab      	ldr	r3, [r5, #8]
 8016abe:	429c      	cmp	r4, r3
 8016ac0:	db12      	blt.n	8016ae8 <__gethex+0x402>
 8016ac2:	686b      	ldr	r3, [r5, #4]
 8016ac4:	9805      	ldr	r0, [sp, #20]
 8016ac6:	1c59      	adds	r1, r3, #1
 8016ac8:	f000 f924 	bl	8016d14 <_Balloc>
 8016acc:	0029      	movs	r1, r5
 8016ace:	692b      	ldr	r3, [r5, #16]
 8016ad0:	9003      	str	r0, [sp, #12]
 8016ad2:	1c9a      	adds	r2, r3, #2
 8016ad4:	0092      	lsls	r2, r2, #2
 8016ad6:	310c      	adds	r1, #12
 8016ad8:	300c      	adds	r0, #12
 8016ada:	f7fc fa34 	bl	8012f46 <memcpy>
 8016ade:	0029      	movs	r1, r5
 8016ae0:	9805      	ldr	r0, [sp, #20]
 8016ae2:	f000 f93f 	bl	8016d64 <_Bfree>
 8016ae6:	9d03      	ldr	r5, [sp, #12]
 8016ae8:	692b      	ldr	r3, [r5, #16]
 8016aea:	1c5a      	adds	r2, r3, #1
 8016aec:	612a      	str	r2, [r5, #16]
 8016aee:	2201      	movs	r2, #1
 8016af0:	3304      	adds	r3, #4
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	18eb      	adds	r3, r5, r3
 8016af6:	605a      	str	r2, [r3, #4]
 8016af8:	e7c0      	b.n	8016a7c <__gethex+0x396>
 8016afa:	692a      	ldr	r2, [r5, #16]
 8016afc:	42a2      	cmp	r2, r4
 8016afe:	dd0a      	ble.n	8016b16 <__gethex+0x430>
 8016b00:	2101      	movs	r1, #1
 8016b02:	0028      	movs	r0, r5
 8016b04:	f7ff fda6 	bl	8016654 <rshift>
 8016b08:	9b02      	ldr	r3, [sp, #8]
 8016b0a:	3701      	adds	r7, #1
 8016b0c:	689b      	ldr	r3, [r3, #8]
 8016b0e:	2601      	movs	r6, #1
 8016b10:	42bb      	cmp	r3, r7
 8016b12:	dac8      	bge.n	8016aa6 <__gethex+0x3c0>
 8016b14:	e6dc      	b.n	80168d0 <__gethex+0x1ea>
 8016b16:	241f      	movs	r4, #31
 8016b18:	9a01      	ldr	r2, [sp, #4]
 8016b1a:	2601      	movs	r6, #1
 8016b1c:	4022      	ands	r2, r4
 8016b1e:	1e14      	subs	r4, r2, #0
 8016b20:	d0c1      	beq.n	8016aa6 <__gethex+0x3c0>
 8016b22:	9a04      	ldr	r2, [sp, #16]
 8016b24:	189b      	adds	r3, r3, r2
 8016b26:	3b04      	subs	r3, #4
 8016b28:	6818      	ldr	r0, [r3, #0]
 8016b2a:	f000 f9a1 	bl	8016e70 <__hi0bits>
 8016b2e:	2120      	movs	r1, #32
 8016b30:	1b0c      	subs	r4, r1, r4
 8016b32:	42a0      	cmp	r0, r4
 8016b34:	dbe4      	blt.n	8016b00 <__gethex+0x41a>
 8016b36:	e7b6      	b.n	8016aa6 <__gethex+0x3c0>
 8016b38:	0006      	movs	r6, r0
 8016b3a:	e7b4      	b.n	8016aa6 <__gethex+0x3c0>

08016b3c <L_shift>:
 8016b3c:	2308      	movs	r3, #8
 8016b3e:	b570      	push	{r4, r5, r6, lr}
 8016b40:	2520      	movs	r5, #32
 8016b42:	1a9a      	subs	r2, r3, r2
 8016b44:	0092      	lsls	r2, r2, #2
 8016b46:	1aad      	subs	r5, r5, r2
 8016b48:	6843      	ldr	r3, [r0, #4]
 8016b4a:	6806      	ldr	r6, [r0, #0]
 8016b4c:	001c      	movs	r4, r3
 8016b4e:	40ac      	lsls	r4, r5
 8016b50:	40d3      	lsrs	r3, r2
 8016b52:	4334      	orrs	r4, r6
 8016b54:	6004      	str	r4, [r0, #0]
 8016b56:	6043      	str	r3, [r0, #4]
 8016b58:	3004      	adds	r0, #4
 8016b5a:	4288      	cmp	r0, r1
 8016b5c:	d3f4      	bcc.n	8016b48 <L_shift+0xc>
 8016b5e:	bd70      	pop	{r4, r5, r6, pc}

08016b60 <__match>:
 8016b60:	b530      	push	{r4, r5, lr}
 8016b62:	6803      	ldr	r3, [r0, #0]
 8016b64:	780c      	ldrb	r4, [r1, #0]
 8016b66:	3301      	adds	r3, #1
 8016b68:	2c00      	cmp	r4, #0
 8016b6a:	d102      	bne.n	8016b72 <__match+0x12>
 8016b6c:	6003      	str	r3, [r0, #0]
 8016b6e:	2001      	movs	r0, #1
 8016b70:	bd30      	pop	{r4, r5, pc}
 8016b72:	781a      	ldrb	r2, [r3, #0]
 8016b74:	0015      	movs	r5, r2
 8016b76:	3d41      	subs	r5, #65	; 0x41
 8016b78:	2d19      	cmp	r5, #25
 8016b7a:	d800      	bhi.n	8016b7e <__match+0x1e>
 8016b7c:	3220      	adds	r2, #32
 8016b7e:	3101      	adds	r1, #1
 8016b80:	42a2      	cmp	r2, r4
 8016b82:	d0ef      	beq.n	8016b64 <__match+0x4>
 8016b84:	2000      	movs	r0, #0
 8016b86:	e7f3      	b.n	8016b70 <__match+0x10>

08016b88 <__hexnan>:
 8016b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b8a:	b08b      	sub	sp, #44	; 0x2c
 8016b8c:	9201      	str	r2, [sp, #4]
 8016b8e:	680a      	ldr	r2, [r1, #0]
 8016b90:	9901      	ldr	r1, [sp, #4]
 8016b92:	1153      	asrs	r3, r2, #5
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	18cb      	adds	r3, r1, r3
 8016b98:	9304      	str	r3, [sp, #16]
 8016b9a:	231f      	movs	r3, #31
 8016b9c:	401a      	ands	r2, r3
 8016b9e:	9008      	str	r0, [sp, #32]
 8016ba0:	9206      	str	r2, [sp, #24]
 8016ba2:	d002      	beq.n	8016baa <__hexnan+0x22>
 8016ba4:	9b04      	ldr	r3, [sp, #16]
 8016ba6:	3304      	adds	r3, #4
 8016ba8:	9304      	str	r3, [sp, #16]
 8016baa:	9b04      	ldr	r3, [sp, #16]
 8016bac:	2500      	movs	r5, #0
 8016bae:	1f1e      	subs	r6, r3, #4
 8016bb0:	0037      	movs	r7, r6
 8016bb2:	0034      	movs	r4, r6
 8016bb4:	9b08      	ldr	r3, [sp, #32]
 8016bb6:	6035      	str	r5, [r6, #0]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	9507      	str	r5, [sp, #28]
 8016bbc:	9305      	str	r3, [sp, #20]
 8016bbe:	9502      	str	r5, [sp, #8]
 8016bc0:	9b05      	ldr	r3, [sp, #20]
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8016bc6:	9b05      	ldr	r3, [sp, #20]
 8016bc8:	785b      	ldrb	r3, [r3, #1]
 8016bca:	9303      	str	r3, [sp, #12]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d028      	beq.n	8016c22 <__hexnan+0x9a>
 8016bd0:	9803      	ldr	r0, [sp, #12]
 8016bd2:	f7ff fd73 	bl	80166bc <__hexdig_fun>
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d145      	bne.n	8016c66 <__hexnan+0xde>
 8016bda:	9b03      	ldr	r3, [sp, #12]
 8016bdc:	2b20      	cmp	r3, #32
 8016bde:	d819      	bhi.n	8016c14 <__hexnan+0x8c>
 8016be0:	9b02      	ldr	r3, [sp, #8]
 8016be2:	9a07      	ldr	r2, [sp, #28]
 8016be4:	4293      	cmp	r3, r2
 8016be6:	dd12      	ble.n	8016c0e <__hexnan+0x86>
 8016be8:	42bc      	cmp	r4, r7
 8016bea:	d206      	bcs.n	8016bfa <__hexnan+0x72>
 8016bec:	2d07      	cmp	r5, #7
 8016bee:	dc04      	bgt.n	8016bfa <__hexnan+0x72>
 8016bf0:	002a      	movs	r2, r5
 8016bf2:	0039      	movs	r1, r7
 8016bf4:	0020      	movs	r0, r4
 8016bf6:	f7ff ffa1 	bl	8016b3c <L_shift>
 8016bfa:	9b01      	ldr	r3, [sp, #4]
 8016bfc:	2508      	movs	r5, #8
 8016bfe:	429c      	cmp	r4, r3
 8016c00:	d905      	bls.n	8016c0e <__hexnan+0x86>
 8016c02:	1f27      	subs	r7, r4, #4
 8016c04:	2500      	movs	r5, #0
 8016c06:	003c      	movs	r4, r7
 8016c08:	9b02      	ldr	r3, [sp, #8]
 8016c0a:	603d      	str	r5, [r7, #0]
 8016c0c:	9307      	str	r3, [sp, #28]
 8016c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c10:	9305      	str	r3, [sp, #20]
 8016c12:	e7d5      	b.n	8016bc0 <__hexnan+0x38>
 8016c14:	9b03      	ldr	r3, [sp, #12]
 8016c16:	2b29      	cmp	r3, #41	; 0x29
 8016c18:	d14a      	bne.n	8016cb0 <__hexnan+0x128>
 8016c1a:	9b05      	ldr	r3, [sp, #20]
 8016c1c:	9a08      	ldr	r2, [sp, #32]
 8016c1e:	3302      	adds	r3, #2
 8016c20:	6013      	str	r3, [r2, #0]
 8016c22:	9b02      	ldr	r3, [sp, #8]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d043      	beq.n	8016cb0 <__hexnan+0x128>
 8016c28:	42bc      	cmp	r4, r7
 8016c2a:	d206      	bcs.n	8016c3a <__hexnan+0xb2>
 8016c2c:	2d07      	cmp	r5, #7
 8016c2e:	dc04      	bgt.n	8016c3a <__hexnan+0xb2>
 8016c30:	002a      	movs	r2, r5
 8016c32:	0039      	movs	r1, r7
 8016c34:	0020      	movs	r0, r4
 8016c36:	f7ff ff81 	bl	8016b3c <L_shift>
 8016c3a:	9b01      	ldr	r3, [sp, #4]
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	d926      	bls.n	8016c8e <__hexnan+0x106>
 8016c40:	cc04      	ldmia	r4!, {r2}
 8016c42:	601a      	str	r2, [r3, #0]
 8016c44:	3304      	adds	r3, #4
 8016c46:	42a6      	cmp	r6, r4
 8016c48:	d2fa      	bcs.n	8016c40 <__hexnan+0xb8>
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	c304      	stmia	r3!, {r2}
 8016c4e:	429e      	cmp	r6, r3
 8016c50:	d2fc      	bcs.n	8016c4c <__hexnan+0xc4>
 8016c52:	6833      	ldr	r3, [r6, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d104      	bne.n	8016c62 <__hexnan+0xda>
 8016c58:	9b01      	ldr	r3, [sp, #4]
 8016c5a:	429e      	cmp	r6, r3
 8016c5c:	d126      	bne.n	8016cac <__hexnan+0x124>
 8016c5e:	2301      	movs	r3, #1
 8016c60:	6033      	str	r3, [r6, #0]
 8016c62:	2005      	movs	r0, #5
 8016c64:	e025      	b.n	8016cb2 <__hexnan+0x12a>
 8016c66:	9b02      	ldr	r3, [sp, #8]
 8016c68:	3501      	adds	r5, #1
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	9302      	str	r3, [sp, #8]
 8016c6e:	2d08      	cmp	r5, #8
 8016c70:	dd06      	ble.n	8016c80 <__hexnan+0xf8>
 8016c72:	9b01      	ldr	r3, [sp, #4]
 8016c74:	429c      	cmp	r4, r3
 8016c76:	d9ca      	bls.n	8016c0e <__hexnan+0x86>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	2501      	movs	r5, #1
 8016c7c:	3c04      	subs	r4, #4
 8016c7e:	6023      	str	r3, [r4, #0]
 8016c80:	220f      	movs	r2, #15
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	4010      	ands	r0, r2
 8016c86:	011b      	lsls	r3, r3, #4
 8016c88:	4318      	orrs	r0, r3
 8016c8a:	6020      	str	r0, [r4, #0]
 8016c8c:	e7bf      	b.n	8016c0e <__hexnan+0x86>
 8016c8e:	9b06      	ldr	r3, [sp, #24]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d0de      	beq.n	8016c52 <__hexnan+0xca>
 8016c94:	2120      	movs	r1, #32
 8016c96:	9a06      	ldr	r2, [sp, #24]
 8016c98:	9b04      	ldr	r3, [sp, #16]
 8016c9a:	1a89      	subs	r1, r1, r2
 8016c9c:	2201      	movs	r2, #1
 8016c9e:	4252      	negs	r2, r2
 8016ca0:	40ca      	lsrs	r2, r1
 8016ca2:	3b04      	subs	r3, #4
 8016ca4:	6819      	ldr	r1, [r3, #0]
 8016ca6:	400a      	ands	r2, r1
 8016ca8:	601a      	str	r2, [r3, #0]
 8016caa:	e7d2      	b.n	8016c52 <__hexnan+0xca>
 8016cac:	3e04      	subs	r6, #4
 8016cae:	e7d0      	b.n	8016c52 <__hexnan+0xca>
 8016cb0:	2004      	movs	r0, #4
 8016cb2:	b00b      	add	sp, #44	; 0x2c
 8016cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016cb6 <__localeconv_l>:
 8016cb6:	30f0      	adds	r0, #240	; 0xf0
 8016cb8:	4770      	bx	lr
	...

08016cbc <_localeconv_r>:
 8016cbc:	4b03      	ldr	r3, [pc, #12]	; (8016ccc <_localeconv_r+0x10>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d100      	bne.n	8016cc8 <_localeconv_r+0xc>
 8016cc6:	4802      	ldr	r0, [pc, #8]	; (8016cd0 <_localeconv_r+0x14>)
 8016cc8:	30f0      	adds	r0, #240	; 0xf0
 8016cca:	4770      	bx	lr
 8016ccc:	200000d8 	.word	0x200000d8
 8016cd0:	20000508 	.word	0x20000508

08016cd4 <__retarget_lock_acquire_recursive>:
 8016cd4:	4770      	bx	lr

08016cd6 <__retarget_lock_release_recursive>:
 8016cd6:	4770      	bx	lr

08016cd8 <memchr>:
 8016cd8:	b2c9      	uxtb	r1, r1
 8016cda:	1882      	adds	r2, r0, r2
 8016cdc:	4290      	cmp	r0, r2
 8016cde:	d101      	bne.n	8016ce4 <memchr+0xc>
 8016ce0:	2000      	movs	r0, #0
 8016ce2:	4770      	bx	lr
 8016ce4:	7803      	ldrb	r3, [r0, #0]
 8016ce6:	428b      	cmp	r3, r1
 8016ce8:	d0fb      	beq.n	8016ce2 <memchr+0xa>
 8016cea:	3001      	adds	r0, #1
 8016cec:	e7f6      	b.n	8016cdc <memchr+0x4>

08016cee <memmove>:
 8016cee:	b510      	push	{r4, lr}
 8016cf0:	4288      	cmp	r0, r1
 8016cf2:	d902      	bls.n	8016cfa <memmove+0xc>
 8016cf4:	188b      	adds	r3, r1, r2
 8016cf6:	4298      	cmp	r0, r3
 8016cf8:	d303      	bcc.n	8016d02 <memmove+0x14>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	e007      	b.n	8016d0e <memmove+0x20>
 8016cfe:	5c8b      	ldrb	r3, [r1, r2]
 8016d00:	5483      	strb	r3, [r0, r2]
 8016d02:	3a01      	subs	r2, #1
 8016d04:	d2fb      	bcs.n	8016cfe <memmove+0x10>
 8016d06:	bd10      	pop	{r4, pc}
 8016d08:	5ccc      	ldrb	r4, [r1, r3]
 8016d0a:	54c4      	strb	r4, [r0, r3]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d1fa      	bne.n	8016d08 <memmove+0x1a>
 8016d12:	e7f8      	b.n	8016d06 <memmove+0x18>

08016d14 <_Balloc>:
 8016d14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d16:	b570      	push	{r4, r5, r6, lr}
 8016d18:	0004      	movs	r4, r0
 8016d1a:	000d      	movs	r5, r1
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d012      	beq.n	8016d46 <_Balloc+0x32>
 8016d20:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016d22:	00ab      	lsls	r3, r5, #2
 8016d24:	18d3      	adds	r3, r2, r3
 8016d26:	6818      	ldr	r0, [r3, #0]
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	d115      	bne.n	8016d58 <_Balloc+0x44>
 8016d2c:	2101      	movs	r1, #1
 8016d2e:	000e      	movs	r6, r1
 8016d30:	40ae      	lsls	r6, r5
 8016d32:	1d72      	adds	r2, r6, #5
 8016d34:	0092      	lsls	r2, r2, #2
 8016d36:	0020      	movs	r0, r4
 8016d38:	f7fb fe56 	bl	80129e8 <_calloc_r>
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	d009      	beq.n	8016d54 <_Balloc+0x40>
 8016d40:	6045      	str	r5, [r0, #4]
 8016d42:	6086      	str	r6, [r0, #8]
 8016d44:	e00a      	b.n	8016d5c <_Balloc+0x48>
 8016d46:	2221      	movs	r2, #33	; 0x21
 8016d48:	2104      	movs	r1, #4
 8016d4a:	f7fb fe4d 	bl	80129e8 <_calloc_r>
 8016d4e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016d50:	2800      	cmp	r0, #0
 8016d52:	d1e5      	bne.n	8016d20 <_Balloc+0xc>
 8016d54:	2000      	movs	r0, #0
 8016d56:	bd70      	pop	{r4, r5, r6, pc}
 8016d58:	6802      	ldr	r2, [r0, #0]
 8016d5a:	601a      	str	r2, [r3, #0]
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	6103      	str	r3, [r0, #16]
 8016d60:	60c3      	str	r3, [r0, #12]
 8016d62:	e7f8      	b.n	8016d56 <_Balloc+0x42>

08016d64 <_Bfree>:
 8016d64:	2900      	cmp	r1, #0
 8016d66:	d006      	beq.n	8016d76 <_Bfree+0x12>
 8016d68:	684b      	ldr	r3, [r1, #4]
 8016d6a:	009a      	lsls	r2, r3, #2
 8016d6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d6e:	189b      	adds	r3, r3, r2
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	600a      	str	r2, [r1, #0]
 8016d74:	6019      	str	r1, [r3, #0]
 8016d76:	4770      	bx	lr

08016d78 <__multadd>:
 8016d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d7a:	001e      	movs	r6, r3
 8016d7c:	2314      	movs	r3, #20
 8016d7e:	469c      	mov	ip, r3
 8016d80:	0007      	movs	r7, r0
 8016d82:	000c      	movs	r4, r1
 8016d84:	2000      	movs	r0, #0
 8016d86:	690d      	ldr	r5, [r1, #16]
 8016d88:	448c      	add	ip, r1
 8016d8a:	4663      	mov	r3, ip
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	3001      	adds	r0, #1
 8016d90:	b299      	uxth	r1, r3
 8016d92:	4663      	mov	r3, ip
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	4351      	muls	r1, r2
 8016d98:	0c1b      	lsrs	r3, r3, #16
 8016d9a:	4353      	muls	r3, r2
 8016d9c:	1989      	adds	r1, r1, r6
 8016d9e:	0c0e      	lsrs	r6, r1, #16
 8016da0:	199b      	adds	r3, r3, r6
 8016da2:	b289      	uxth	r1, r1
 8016da4:	0c1e      	lsrs	r6, r3, #16
 8016da6:	041b      	lsls	r3, r3, #16
 8016da8:	185b      	adds	r3, r3, r1
 8016daa:	4661      	mov	r1, ip
 8016dac:	c108      	stmia	r1!, {r3}
 8016dae:	468c      	mov	ip, r1
 8016db0:	4285      	cmp	r5, r0
 8016db2:	dcea      	bgt.n	8016d8a <__multadd+0x12>
 8016db4:	2e00      	cmp	r6, #0
 8016db6:	d01b      	beq.n	8016df0 <__multadd+0x78>
 8016db8:	68a3      	ldr	r3, [r4, #8]
 8016dba:	42ab      	cmp	r3, r5
 8016dbc:	dc12      	bgt.n	8016de4 <__multadd+0x6c>
 8016dbe:	6863      	ldr	r3, [r4, #4]
 8016dc0:	0038      	movs	r0, r7
 8016dc2:	1c59      	adds	r1, r3, #1
 8016dc4:	f7ff ffa6 	bl	8016d14 <_Balloc>
 8016dc8:	0021      	movs	r1, r4
 8016dca:	6923      	ldr	r3, [r4, #16]
 8016dcc:	9001      	str	r0, [sp, #4]
 8016dce:	1c9a      	adds	r2, r3, #2
 8016dd0:	0092      	lsls	r2, r2, #2
 8016dd2:	310c      	adds	r1, #12
 8016dd4:	300c      	adds	r0, #12
 8016dd6:	f7fc f8b6 	bl	8012f46 <memcpy>
 8016dda:	0021      	movs	r1, r4
 8016ddc:	0038      	movs	r0, r7
 8016dde:	f7ff ffc1 	bl	8016d64 <_Bfree>
 8016de2:	9c01      	ldr	r4, [sp, #4]
 8016de4:	1d2b      	adds	r3, r5, #4
 8016de6:	009b      	lsls	r3, r3, #2
 8016de8:	18e3      	adds	r3, r4, r3
 8016dea:	3501      	adds	r5, #1
 8016dec:	605e      	str	r6, [r3, #4]
 8016dee:	6125      	str	r5, [r4, #16]
 8016df0:	0020      	movs	r0, r4
 8016df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016df4 <__s2b>:
 8016df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016df6:	0006      	movs	r6, r0
 8016df8:	0018      	movs	r0, r3
 8016dfa:	000c      	movs	r4, r1
 8016dfc:	3008      	adds	r0, #8
 8016dfe:	2109      	movs	r1, #9
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	0015      	movs	r5, r2
 8016e04:	f7e9 fa2e 	bl	8000264 <__divsi3>
 8016e08:	2301      	movs	r3, #1
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	4283      	cmp	r3, r0
 8016e0e:	db1f      	blt.n	8016e50 <__s2b+0x5c>
 8016e10:	0030      	movs	r0, r6
 8016e12:	f7ff ff7f 	bl	8016d14 <_Balloc>
 8016e16:	9b08      	ldr	r3, [sp, #32]
 8016e18:	6143      	str	r3, [r0, #20]
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	6103      	str	r3, [r0, #16]
 8016e1e:	2d09      	cmp	r5, #9
 8016e20:	dd19      	ble.n	8016e56 <__s2b+0x62>
 8016e22:	0023      	movs	r3, r4
 8016e24:	3309      	adds	r3, #9
 8016e26:	001f      	movs	r7, r3
 8016e28:	9300      	str	r3, [sp, #0]
 8016e2a:	1964      	adds	r4, r4, r5
 8016e2c:	783b      	ldrb	r3, [r7, #0]
 8016e2e:	0001      	movs	r1, r0
 8016e30:	3b30      	subs	r3, #48	; 0x30
 8016e32:	220a      	movs	r2, #10
 8016e34:	0030      	movs	r0, r6
 8016e36:	3701      	adds	r7, #1
 8016e38:	f7ff ff9e 	bl	8016d78 <__multadd>
 8016e3c:	42a7      	cmp	r7, r4
 8016e3e:	d1f5      	bne.n	8016e2c <__s2b+0x38>
 8016e40:	9b00      	ldr	r3, [sp, #0]
 8016e42:	195c      	adds	r4, r3, r5
 8016e44:	3c08      	subs	r4, #8
 8016e46:	002f      	movs	r7, r5
 8016e48:	9b01      	ldr	r3, [sp, #4]
 8016e4a:	429f      	cmp	r7, r3
 8016e4c:	db06      	blt.n	8016e5c <__s2b+0x68>
 8016e4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	3101      	adds	r1, #1
 8016e54:	e7da      	b.n	8016e0c <__s2b+0x18>
 8016e56:	340a      	adds	r4, #10
 8016e58:	2509      	movs	r5, #9
 8016e5a:	e7f4      	b.n	8016e46 <__s2b+0x52>
 8016e5c:	1b63      	subs	r3, r4, r5
 8016e5e:	5ddb      	ldrb	r3, [r3, r7]
 8016e60:	0001      	movs	r1, r0
 8016e62:	3b30      	subs	r3, #48	; 0x30
 8016e64:	220a      	movs	r2, #10
 8016e66:	0030      	movs	r0, r6
 8016e68:	f7ff ff86 	bl	8016d78 <__multadd>
 8016e6c:	3701      	adds	r7, #1
 8016e6e:	e7eb      	b.n	8016e48 <__s2b+0x54>

08016e70 <__hi0bits>:
 8016e70:	0003      	movs	r3, r0
 8016e72:	0c02      	lsrs	r2, r0, #16
 8016e74:	2000      	movs	r0, #0
 8016e76:	4282      	cmp	r2, r0
 8016e78:	d101      	bne.n	8016e7e <__hi0bits+0xe>
 8016e7a:	041b      	lsls	r3, r3, #16
 8016e7c:	3010      	adds	r0, #16
 8016e7e:	0e1a      	lsrs	r2, r3, #24
 8016e80:	d101      	bne.n	8016e86 <__hi0bits+0x16>
 8016e82:	3008      	adds	r0, #8
 8016e84:	021b      	lsls	r3, r3, #8
 8016e86:	0f1a      	lsrs	r2, r3, #28
 8016e88:	d101      	bne.n	8016e8e <__hi0bits+0x1e>
 8016e8a:	3004      	adds	r0, #4
 8016e8c:	011b      	lsls	r3, r3, #4
 8016e8e:	0f9a      	lsrs	r2, r3, #30
 8016e90:	d101      	bne.n	8016e96 <__hi0bits+0x26>
 8016e92:	3002      	adds	r0, #2
 8016e94:	009b      	lsls	r3, r3, #2
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	db03      	blt.n	8016ea2 <__hi0bits+0x32>
 8016e9a:	3001      	adds	r0, #1
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	d400      	bmi.n	8016ea2 <__hi0bits+0x32>
 8016ea0:	2020      	movs	r0, #32
 8016ea2:	4770      	bx	lr

08016ea4 <__lo0bits>:
 8016ea4:	2207      	movs	r2, #7
 8016ea6:	6803      	ldr	r3, [r0, #0]
 8016ea8:	b510      	push	{r4, lr}
 8016eaa:	0001      	movs	r1, r0
 8016eac:	401a      	ands	r2, r3
 8016eae:	d00d      	beq.n	8016ecc <__lo0bits+0x28>
 8016eb0:	2401      	movs	r4, #1
 8016eb2:	2000      	movs	r0, #0
 8016eb4:	4223      	tst	r3, r4
 8016eb6:	d105      	bne.n	8016ec4 <__lo0bits+0x20>
 8016eb8:	3002      	adds	r0, #2
 8016eba:	4203      	tst	r3, r0
 8016ebc:	d003      	beq.n	8016ec6 <__lo0bits+0x22>
 8016ebe:	40e3      	lsrs	r3, r4
 8016ec0:	0020      	movs	r0, r4
 8016ec2:	600b      	str	r3, [r1, #0]
 8016ec4:	bd10      	pop	{r4, pc}
 8016ec6:	089b      	lsrs	r3, r3, #2
 8016ec8:	600b      	str	r3, [r1, #0]
 8016eca:	e7fb      	b.n	8016ec4 <__lo0bits+0x20>
 8016ecc:	b29c      	uxth	r4, r3
 8016ece:	0010      	movs	r0, r2
 8016ed0:	2c00      	cmp	r4, #0
 8016ed2:	d101      	bne.n	8016ed8 <__lo0bits+0x34>
 8016ed4:	2010      	movs	r0, #16
 8016ed6:	0c1b      	lsrs	r3, r3, #16
 8016ed8:	b2da      	uxtb	r2, r3
 8016eda:	2a00      	cmp	r2, #0
 8016edc:	d101      	bne.n	8016ee2 <__lo0bits+0x3e>
 8016ede:	3008      	adds	r0, #8
 8016ee0:	0a1b      	lsrs	r3, r3, #8
 8016ee2:	071a      	lsls	r2, r3, #28
 8016ee4:	d101      	bne.n	8016eea <__lo0bits+0x46>
 8016ee6:	3004      	adds	r0, #4
 8016ee8:	091b      	lsrs	r3, r3, #4
 8016eea:	079a      	lsls	r2, r3, #30
 8016eec:	d101      	bne.n	8016ef2 <__lo0bits+0x4e>
 8016eee:	3002      	adds	r0, #2
 8016ef0:	089b      	lsrs	r3, r3, #2
 8016ef2:	07da      	lsls	r2, r3, #31
 8016ef4:	d4e8      	bmi.n	8016ec8 <__lo0bits+0x24>
 8016ef6:	085b      	lsrs	r3, r3, #1
 8016ef8:	d001      	beq.n	8016efe <__lo0bits+0x5a>
 8016efa:	3001      	adds	r0, #1
 8016efc:	e7e4      	b.n	8016ec8 <__lo0bits+0x24>
 8016efe:	2020      	movs	r0, #32
 8016f00:	e7e0      	b.n	8016ec4 <__lo0bits+0x20>

08016f02 <__i2b>:
 8016f02:	b510      	push	{r4, lr}
 8016f04:	000c      	movs	r4, r1
 8016f06:	2101      	movs	r1, #1
 8016f08:	f7ff ff04 	bl	8016d14 <_Balloc>
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	6144      	str	r4, [r0, #20]
 8016f10:	6103      	str	r3, [r0, #16]
 8016f12:	bd10      	pop	{r4, pc}

08016f14 <__multiply>:
 8016f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f16:	690b      	ldr	r3, [r1, #16]
 8016f18:	0014      	movs	r4, r2
 8016f1a:	6912      	ldr	r2, [r2, #16]
 8016f1c:	b089      	sub	sp, #36	; 0x24
 8016f1e:	000d      	movs	r5, r1
 8016f20:	4293      	cmp	r3, r2
 8016f22:	da01      	bge.n	8016f28 <__multiply+0x14>
 8016f24:	0025      	movs	r5, r4
 8016f26:	000c      	movs	r4, r1
 8016f28:	692f      	ldr	r7, [r5, #16]
 8016f2a:	6926      	ldr	r6, [r4, #16]
 8016f2c:	6869      	ldr	r1, [r5, #4]
 8016f2e:	19bb      	adds	r3, r7, r6
 8016f30:	9302      	str	r3, [sp, #8]
 8016f32:	68ab      	ldr	r3, [r5, #8]
 8016f34:	19ba      	adds	r2, r7, r6
 8016f36:	4293      	cmp	r3, r2
 8016f38:	da00      	bge.n	8016f3c <__multiply+0x28>
 8016f3a:	3101      	adds	r1, #1
 8016f3c:	f7ff feea 	bl	8016d14 <_Balloc>
 8016f40:	0002      	movs	r2, r0
 8016f42:	19bb      	adds	r3, r7, r6
 8016f44:	3214      	adds	r2, #20
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	18d3      	adds	r3, r2, r3
 8016f4a:	469c      	mov	ip, r3
 8016f4c:	2100      	movs	r1, #0
 8016f4e:	0013      	movs	r3, r2
 8016f50:	9004      	str	r0, [sp, #16]
 8016f52:	4563      	cmp	r3, ip
 8016f54:	d31d      	bcc.n	8016f92 <__multiply+0x7e>
 8016f56:	3514      	adds	r5, #20
 8016f58:	00bf      	lsls	r7, r7, #2
 8016f5a:	19eb      	adds	r3, r5, r7
 8016f5c:	3414      	adds	r4, #20
 8016f5e:	00b6      	lsls	r6, r6, #2
 8016f60:	9305      	str	r3, [sp, #20]
 8016f62:	19a3      	adds	r3, r4, r6
 8016f64:	9503      	str	r5, [sp, #12]
 8016f66:	9401      	str	r4, [sp, #4]
 8016f68:	9307      	str	r3, [sp, #28]
 8016f6a:	9b07      	ldr	r3, [sp, #28]
 8016f6c:	9901      	ldr	r1, [sp, #4]
 8016f6e:	4299      	cmp	r1, r3
 8016f70:	d311      	bcc.n	8016f96 <__multiply+0x82>
 8016f72:	9b02      	ldr	r3, [sp, #8]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	dd06      	ble.n	8016f86 <__multiply+0x72>
 8016f78:	2304      	movs	r3, #4
 8016f7a:	425b      	negs	r3, r3
 8016f7c:	449c      	add	ip, r3
 8016f7e:	4663      	mov	r3, ip
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d051      	beq.n	801702a <__multiply+0x116>
 8016f86:	9b04      	ldr	r3, [sp, #16]
 8016f88:	9a02      	ldr	r2, [sp, #8]
 8016f8a:	0018      	movs	r0, r3
 8016f8c:	611a      	str	r2, [r3, #16]
 8016f8e:	b009      	add	sp, #36	; 0x24
 8016f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f92:	c302      	stmia	r3!, {r1}
 8016f94:	e7dd      	b.n	8016f52 <__multiply+0x3e>
 8016f96:	9b01      	ldr	r3, [sp, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	b298      	uxth	r0, r3
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d01c      	beq.n	8016fda <__multiply+0xc6>
 8016fa0:	0015      	movs	r5, r2
 8016fa2:	2600      	movs	r6, #0
 8016fa4:	9f03      	ldr	r7, [sp, #12]
 8016fa6:	cf02      	ldmia	r7!, {r1}
 8016fa8:	682c      	ldr	r4, [r5, #0]
 8016faa:	b28b      	uxth	r3, r1
 8016fac:	4343      	muls	r3, r0
 8016fae:	0c09      	lsrs	r1, r1, #16
 8016fb0:	4341      	muls	r1, r0
 8016fb2:	b2a4      	uxth	r4, r4
 8016fb4:	191b      	adds	r3, r3, r4
 8016fb6:	199b      	adds	r3, r3, r6
 8016fb8:	000e      	movs	r6, r1
 8016fba:	6829      	ldr	r1, [r5, #0]
 8016fbc:	9506      	str	r5, [sp, #24]
 8016fbe:	0c09      	lsrs	r1, r1, #16
 8016fc0:	1871      	adds	r1, r6, r1
 8016fc2:	0c1e      	lsrs	r6, r3, #16
 8016fc4:	1989      	adds	r1, r1, r6
 8016fc6:	0c0e      	lsrs	r6, r1, #16
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	0409      	lsls	r1, r1, #16
 8016fcc:	430b      	orrs	r3, r1
 8016fce:	c508      	stmia	r5!, {r3}
 8016fd0:	9b05      	ldr	r3, [sp, #20]
 8016fd2:	42bb      	cmp	r3, r7
 8016fd4:	d8e7      	bhi.n	8016fa6 <__multiply+0x92>
 8016fd6:	9b06      	ldr	r3, [sp, #24]
 8016fd8:	605e      	str	r6, [r3, #4]
 8016fda:	9b01      	ldr	r3, [sp, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	0c1d      	lsrs	r5, r3, #16
 8016fe0:	d01e      	beq.n	8017020 <__multiply+0x10c>
 8016fe2:	0010      	movs	r0, r2
 8016fe4:	2700      	movs	r7, #0
 8016fe6:	6813      	ldr	r3, [r2, #0]
 8016fe8:	9e03      	ldr	r6, [sp, #12]
 8016fea:	6831      	ldr	r1, [r6, #0]
 8016fec:	6804      	ldr	r4, [r0, #0]
 8016fee:	b289      	uxth	r1, r1
 8016ff0:	4369      	muls	r1, r5
 8016ff2:	0c24      	lsrs	r4, r4, #16
 8016ff4:	1909      	adds	r1, r1, r4
 8016ff6:	19c9      	adds	r1, r1, r7
 8016ff8:	040f      	lsls	r7, r1, #16
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	433b      	orrs	r3, r7
 8016ffe:	6003      	str	r3, [r0, #0]
 8017000:	ce80      	ldmia	r6!, {r7}
 8017002:	6843      	ldr	r3, [r0, #4]
 8017004:	0c3f      	lsrs	r7, r7, #16
 8017006:	436f      	muls	r7, r5
 8017008:	b29b      	uxth	r3, r3
 801700a:	18fb      	adds	r3, r7, r3
 801700c:	0c09      	lsrs	r1, r1, #16
 801700e:	185b      	adds	r3, r3, r1
 8017010:	9905      	ldr	r1, [sp, #20]
 8017012:	9006      	str	r0, [sp, #24]
 8017014:	0c1f      	lsrs	r7, r3, #16
 8017016:	3004      	adds	r0, #4
 8017018:	42b1      	cmp	r1, r6
 801701a:	d8e6      	bhi.n	8016fea <__multiply+0xd6>
 801701c:	9906      	ldr	r1, [sp, #24]
 801701e:	604b      	str	r3, [r1, #4]
 8017020:	9b01      	ldr	r3, [sp, #4]
 8017022:	3204      	adds	r2, #4
 8017024:	3304      	adds	r3, #4
 8017026:	9301      	str	r3, [sp, #4]
 8017028:	e79f      	b.n	8016f6a <__multiply+0x56>
 801702a:	9b02      	ldr	r3, [sp, #8]
 801702c:	3b01      	subs	r3, #1
 801702e:	9302      	str	r3, [sp, #8]
 8017030:	e79f      	b.n	8016f72 <__multiply+0x5e>
	...

08017034 <__pow5mult>:
 8017034:	2303      	movs	r3, #3
 8017036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017038:	4013      	ands	r3, r2
 801703a:	0006      	movs	r6, r0
 801703c:	000f      	movs	r7, r1
 801703e:	0015      	movs	r5, r2
 8017040:	2b00      	cmp	r3, #0
 8017042:	d008      	beq.n	8017056 <__pow5mult+0x22>
 8017044:	491a      	ldr	r1, [pc, #104]	; (80170b0 <__pow5mult+0x7c>)
 8017046:	3b01      	subs	r3, #1
 8017048:	009a      	lsls	r2, r3, #2
 801704a:	5852      	ldr	r2, [r2, r1]
 801704c:	2300      	movs	r3, #0
 801704e:	0039      	movs	r1, r7
 8017050:	f7ff fe92 	bl	8016d78 <__multadd>
 8017054:	0007      	movs	r7, r0
 8017056:	10ad      	asrs	r5, r5, #2
 8017058:	d027      	beq.n	80170aa <__pow5mult+0x76>
 801705a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801705c:	2c00      	cmp	r4, #0
 801705e:	d107      	bne.n	8017070 <__pow5mult+0x3c>
 8017060:	4914      	ldr	r1, [pc, #80]	; (80170b4 <__pow5mult+0x80>)
 8017062:	0030      	movs	r0, r6
 8017064:	f7ff ff4d 	bl	8016f02 <__i2b>
 8017068:	2300      	movs	r3, #0
 801706a:	0004      	movs	r4, r0
 801706c:	64b0      	str	r0, [r6, #72]	; 0x48
 801706e:	6003      	str	r3, [r0, #0]
 8017070:	2301      	movs	r3, #1
 8017072:	421d      	tst	r5, r3
 8017074:	d00a      	beq.n	801708c <__pow5mult+0x58>
 8017076:	0039      	movs	r1, r7
 8017078:	0022      	movs	r2, r4
 801707a:	0030      	movs	r0, r6
 801707c:	f7ff ff4a 	bl	8016f14 <__multiply>
 8017080:	0039      	movs	r1, r7
 8017082:	9001      	str	r0, [sp, #4]
 8017084:	0030      	movs	r0, r6
 8017086:	f7ff fe6d 	bl	8016d64 <_Bfree>
 801708a:	9f01      	ldr	r7, [sp, #4]
 801708c:	106d      	asrs	r5, r5, #1
 801708e:	d00c      	beq.n	80170aa <__pow5mult+0x76>
 8017090:	6820      	ldr	r0, [r4, #0]
 8017092:	2800      	cmp	r0, #0
 8017094:	d107      	bne.n	80170a6 <__pow5mult+0x72>
 8017096:	0022      	movs	r2, r4
 8017098:	0021      	movs	r1, r4
 801709a:	0030      	movs	r0, r6
 801709c:	f7ff ff3a 	bl	8016f14 <__multiply>
 80170a0:	2300      	movs	r3, #0
 80170a2:	6020      	str	r0, [r4, #0]
 80170a4:	6003      	str	r3, [r0, #0]
 80170a6:	0004      	movs	r4, r0
 80170a8:	e7e2      	b.n	8017070 <__pow5mult+0x3c>
 80170aa:	0038      	movs	r0, r7
 80170ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80170ae:	46c0      	nop			; (mov r8, r8)
 80170b0:	0801ab20 	.word	0x0801ab20
 80170b4:	00000271 	.word	0x00000271

080170b8 <__lshift>:
 80170b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ba:	000d      	movs	r5, r1
 80170bc:	0017      	movs	r7, r2
 80170be:	692b      	ldr	r3, [r5, #16]
 80170c0:	1154      	asrs	r4, r2, #5
 80170c2:	b085      	sub	sp, #20
 80170c4:	18e3      	adds	r3, r4, r3
 80170c6:	9301      	str	r3, [sp, #4]
 80170c8:	3301      	adds	r3, #1
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	6849      	ldr	r1, [r1, #4]
 80170ce:	68ab      	ldr	r3, [r5, #8]
 80170d0:	9002      	str	r0, [sp, #8]
 80170d2:	9a00      	ldr	r2, [sp, #0]
 80170d4:	4293      	cmp	r3, r2
 80170d6:	db35      	blt.n	8017144 <__lshift+0x8c>
 80170d8:	9802      	ldr	r0, [sp, #8]
 80170da:	f7ff fe1b 	bl	8016d14 <_Balloc>
 80170de:	2300      	movs	r3, #0
 80170e0:	0002      	movs	r2, r0
 80170e2:	0006      	movs	r6, r0
 80170e4:	0019      	movs	r1, r3
 80170e6:	3214      	adds	r2, #20
 80170e8:	42a3      	cmp	r3, r4
 80170ea:	db2e      	blt.n	801714a <__lshift+0x92>
 80170ec:	43e3      	mvns	r3, r4
 80170ee:	17db      	asrs	r3, r3, #31
 80170f0:	401c      	ands	r4, r3
 80170f2:	002b      	movs	r3, r5
 80170f4:	00a4      	lsls	r4, r4, #2
 80170f6:	1914      	adds	r4, r2, r4
 80170f8:	692a      	ldr	r2, [r5, #16]
 80170fa:	3314      	adds	r3, #20
 80170fc:	0092      	lsls	r2, r2, #2
 80170fe:	189a      	adds	r2, r3, r2
 8017100:	4694      	mov	ip, r2
 8017102:	221f      	movs	r2, #31
 8017104:	4017      	ands	r7, r2
 8017106:	d024      	beq.n	8017152 <__lshift+0x9a>
 8017108:	3201      	adds	r2, #1
 801710a:	1bd2      	subs	r2, r2, r7
 801710c:	9203      	str	r2, [sp, #12]
 801710e:	2200      	movs	r2, #0
 8017110:	6819      	ldr	r1, [r3, #0]
 8017112:	0020      	movs	r0, r4
 8017114:	40b9      	lsls	r1, r7
 8017116:	430a      	orrs	r2, r1
 8017118:	c404      	stmia	r4!, {r2}
 801711a:	cb04      	ldmia	r3!, {r2}
 801711c:	9903      	ldr	r1, [sp, #12]
 801711e:	40ca      	lsrs	r2, r1
 8017120:	459c      	cmp	ip, r3
 8017122:	d8f5      	bhi.n	8017110 <__lshift+0x58>
 8017124:	6042      	str	r2, [r0, #4]
 8017126:	2a00      	cmp	r2, #0
 8017128:	d002      	beq.n	8017130 <__lshift+0x78>
 801712a:	9b01      	ldr	r3, [sp, #4]
 801712c:	3302      	adds	r3, #2
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	9b00      	ldr	r3, [sp, #0]
 8017132:	9802      	ldr	r0, [sp, #8]
 8017134:	3b01      	subs	r3, #1
 8017136:	6133      	str	r3, [r6, #16]
 8017138:	0029      	movs	r1, r5
 801713a:	f7ff fe13 	bl	8016d64 <_Bfree>
 801713e:	0030      	movs	r0, r6
 8017140:	b005      	add	sp, #20
 8017142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017144:	3101      	adds	r1, #1
 8017146:	005b      	lsls	r3, r3, #1
 8017148:	e7c3      	b.n	80170d2 <__lshift+0x1a>
 801714a:	0098      	lsls	r0, r3, #2
 801714c:	5011      	str	r1, [r2, r0]
 801714e:	3301      	adds	r3, #1
 8017150:	e7ca      	b.n	80170e8 <__lshift+0x30>
 8017152:	cb04      	ldmia	r3!, {r2}
 8017154:	c404      	stmia	r4!, {r2}
 8017156:	459c      	cmp	ip, r3
 8017158:	d8fb      	bhi.n	8017152 <__lshift+0x9a>
 801715a:	e7e9      	b.n	8017130 <__lshift+0x78>

0801715c <__mcmp>:
 801715c:	690a      	ldr	r2, [r1, #16]
 801715e:	6903      	ldr	r3, [r0, #16]
 8017160:	b530      	push	{r4, r5, lr}
 8017162:	1a9b      	subs	r3, r3, r2
 8017164:	d10d      	bne.n	8017182 <__mcmp+0x26>
 8017166:	0092      	lsls	r2, r2, #2
 8017168:	3014      	adds	r0, #20
 801716a:	3114      	adds	r1, #20
 801716c:	1884      	adds	r4, r0, r2
 801716e:	1889      	adds	r1, r1, r2
 8017170:	3c04      	subs	r4, #4
 8017172:	3904      	subs	r1, #4
 8017174:	6825      	ldr	r5, [r4, #0]
 8017176:	680a      	ldr	r2, [r1, #0]
 8017178:	4295      	cmp	r5, r2
 801717a:	d004      	beq.n	8017186 <__mcmp+0x2a>
 801717c:	2301      	movs	r3, #1
 801717e:	4295      	cmp	r5, r2
 8017180:	d304      	bcc.n	801718c <__mcmp+0x30>
 8017182:	0018      	movs	r0, r3
 8017184:	bd30      	pop	{r4, r5, pc}
 8017186:	42a0      	cmp	r0, r4
 8017188:	d3f2      	bcc.n	8017170 <__mcmp+0x14>
 801718a:	e7fa      	b.n	8017182 <__mcmp+0x26>
 801718c:	425b      	negs	r3, r3
 801718e:	e7f8      	b.n	8017182 <__mcmp+0x26>

08017190 <__mdiff>:
 8017190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017192:	000d      	movs	r5, r1
 8017194:	b085      	sub	sp, #20
 8017196:	0007      	movs	r7, r0
 8017198:	0011      	movs	r1, r2
 801719a:	0028      	movs	r0, r5
 801719c:	0014      	movs	r4, r2
 801719e:	f7ff ffdd 	bl	801715c <__mcmp>
 80171a2:	1e06      	subs	r6, r0, #0
 80171a4:	d108      	bne.n	80171b8 <__mdiff+0x28>
 80171a6:	0001      	movs	r1, r0
 80171a8:	0038      	movs	r0, r7
 80171aa:	f7ff fdb3 	bl	8016d14 <_Balloc>
 80171ae:	2301      	movs	r3, #1
 80171b0:	6146      	str	r6, [r0, #20]
 80171b2:	6103      	str	r3, [r0, #16]
 80171b4:	b005      	add	sp, #20
 80171b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171b8:	2301      	movs	r3, #1
 80171ba:	9301      	str	r3, [sp, #4]
 80171bc:	2800      	cmp	r0, #0
 80171be:	db04      	blt.n	80171ca <__mdiff+0x3a>
 80171c0:	0023      	movs	r3, r4
 80171c2:	002c      	movs	r4, r5
 80171c4:	001d      	movs	r5, r3
 80171c6:	2300      	movs	r3, #0
 80171c8:	9301      	str	r3, [sp, #4]
 80171ca:	6861      	ldr	r1, [r4, #4]
 80171cc:	0038      	movs	r0, r7
 80171ce:	f7ff fda1 	bl	8016d14 <_Balloc>
 80171d2:	002f      	movs	r7, r5
 80171d4:	2200      	movs	r2, #0
 80171d6:	9b01      	ldr	r3, [sp, #4]
 80171d8:	6926      	ldr	r6, [r4, #16]
 80171da:	60c3      	str	r3, [r0, #12]
 80171dc:	3414      	adds	r4, #20
 80171de:	00b3      	lsls	r3, r6, #2
 80171e0:	18e3      	adds	r3, r4, r3
 80171e2:	9302      	str	r3, [sp, #8]
 80171e4:	692b      	ldr	r3, [r5, #16]
 80171e6:	3714      	adds	r7, #20
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	18fb      	adds	r3, r7, r3
 80171ec:	9303      	str	r3, [sp, #12]
 80171ee:	0003      	movs	r3, r0
 80171f0:	4694      	mov	ip, r2
 80171f2:	3314      	adds	r3, #20
 80171f4:	cc20      	ldmia	r4!, {r5}
 80171f6:	cf04      	ldmia	r7!, {r2}
 80171f8:	9201      	str	r2, [sp, #4]
 80171fa:	b2aa      	uxth	r2, r5
 80171fc:	4494      	add	ip, r2
 80171fe:	466a      	mov	r2, sp
 8017200:	4661      	mov	r1, ip
 8017202:	8892      	ldrh	r2, [r2, #4]
 8017204:	0c2d      	lsrs	r5, r5, #16
 8017206:	1a8a      	subs	r2, r1, r2
 8017208:	9901      	ldr	r1, [sp, #4]
 801720a:	0c09      	lsrs	r1, r1, #16
 801720c:	1a69      	subs	r1, r5, r1
 801720e:	1415      	asrs	r5, r2, #16
 8017210:	1949      	adds	r1, r1, r5
 8017212:	140d      	asrs	r5, r1, #16
 8017214:	b292      	uxth	r2, r2
 8017216:	0409      	lsls	r1, r1, #16
 8017218:	430a      	orrs	r2, r1
 801721a:	601a      	str	r2, [r3, #0]
 801721c:	9a03      	ldr	r2, [sp, #12]
 801721e:	46ac      	mov	ip, r5
 8017220:	3304      	adds	r3, #4
 8017222:	42ba      	cmp	r2, r7
 8017224:	d8e6      	bhi.n	80171f4 <__mdiff+0x64>
 8017226:	9902      	ldr	r1, [sp, #8]
 8017228:	001a      	movs	r2, r3
 801722a:	428c      	cmp	r4, r1
 801722c:	d305      	bcc.n	801723a <__mdiff+0xaa>
 801722e:	3a04      	subs	r2, #4
 8017230:	6813      	ldr	r3, [r2, #0]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00e      	beq.n	8017254 <__mdiff+0xc4>
 8017236:	6106      	str	r6, [r0, #16]
 8017238:	e7bc      	b.n	80171b4 <__mdiff+0x24>
 801723a:	cc04      	ldmia	r4!, {r2}
 801723c:	b291      	uxth	r1, r2
 801723e:	4461      	add	r1, ip
 8017240:	140d      	asrs	r5, r1, #16
 8017242:	0c12      	lsrs	r2, r2, #16
 8017244:	1952      	adds	r2, r2, r5
 8017246:	1415      	asrs	r5, r2, #16
 8017248:	b289      	uxth	r1, r1
 801724a:	0412      	lsls	r2, r2, #16
 801724c:	430a      	orrs	r2, r1
 801724e:	46ac      	mov	ip, r5
 8017250:	c304      	stmia	r3!, {r2}
 8017252:	e7e8      	b.n	8017226 <__mdiff+0x96>
 8017254:	3e01      	subs	r6, #1
 8017256:	e7ea      	b.n	801722e <__mdiff+0x9e>

08017258 <__ulp>:
 8017258:	000b      	movs	r3, r1
 801725a:	4910      	ldr	r1, [pc, #64]	; (801729c <__ulp+0x44>)
 801725c:	b510      	push	{r4, lr}
 801725e:	4019      	ands	r1, r3
 8017260:	4b0f      	ldr	r3, [pc, #60]	; (80172a0 <__ulp+0x48>)
 8017262:	18c9      	adds	r1, r1, r3
 8017264:	2900      	cmp	r1, #0
 8017266:	dd04      	ble.n	8017272 <__ulp+0x1a>
 8017268:	2200      	movs	r2, #0
 801726a:	000b      	movs	r3, r1
 801726c:	0010      	movs	r0, r2
 801726e:	0019      	movs	r1, r3
 8017270:	bd10      	pop	{r4, pc}
 8017272:	4249      	negs	r1, r1
 8017274:	1509      	asrs	r1, r1, #20
 8017276:	2200      	movs	r2, #0
 8017278:	2300      	movs	r3, #0
 801727a:	2913      	cmp	r1, #19
 801727c:	dc04      	bgt.n	8017288 <__ulp+0x30>
 801727e:	2080      	movs	r0, #128	; 0x80
 8017280:	0300      	lsls	r0, r0, #12
 8017282:	4108      	asrs	r0, r1
 8017284:	0003      	movs	r3, r0
 8017286:	e7f1      	b.n	801726c <__ulp+0x14>
 8017288:	3914      	subs	r1, #20
 801728a:	2001      	movs	r0, #1
 801728c:	291e      	cmp	r1, #30
 801728e:	dc02      	bgt.n	8017296 <__ulp+0x3e>
 8017290:	241f      	movs	r4, #31
 8017292:	1a61      	subs	r1, r4, r1
 8017294:	4088      	lsls	r0, r1
 8017296:	0002      	movs	r2, r0
 8017298:	e7e8      	b.n	801726c <__ulp+0x14>
 801729a:	46c0      	nop			; (mov r8, r8)
 801729c:	7ff00000 	.word	0x7ff00000
 80172a0:	fcc00000 	.word	0xfcc00000

080172a4 <__b2d>:
 80172a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172a6:	0006      	movs	r6, r0
 80172a8:	6903      	ldr	r3, [r0, #16]
 80172aa:	3614      	adds	r6, #20
 80172ac:	009b      	lsls	r3, r3, #2
 80172ae:	18f3      	adds	r3, r6, r3
 80172b0:	1f1d      	subs	r5, r3, #4
 80172b2:	682c      	ldr	r4, [r5, #0]
 80172b4:	000f      	movs	r7, r1
 80172b6:	0020      	movs	r0, r4
 80172b8:	9301      	str	r3, [sp, #4]
 80172ba:	f7ff fdd9 	bl	8016e70 <__hi0bits>
 80172be:	2320      	movs	r3, #32
 80172c0:	1a1b      	subs	r3, r3, r0
 80172c2:	603b      	str	r3, [r7, #0]
 80172c4:	491c      	ldr	r1, [pc, #112]	; (8017338 <__b2d+0x94>)
 80172c6:	280a      	cmp	r0, #10
 80172c8:	dc16      	bgt.n	80172f8 <__b2d+0x54>
 80172ca:	230b      	movs	r3, #11
 80172cc:	0027      	movs	r7, r4
 80172ce:	1a1b      	subs	r3, r3, r0
 80172d0:	40df      	lsrs	r7, r3
 80172d2:	4339      	orrs	r1, r7
 80172d4:	469c      	mov	ip, r3
 80172d6:	000b      	movs	r3, r1
 80172d8:	2100      	movs	r1, #0
 80172da:	42ae      	cmp	r6, r5
 80172dc:	d202      	bcs.n	80172e4 <__b2d+0x40>
 80172de:	9901      	ldr	r1, [sp, #4]
 80172e0:	3908      	subs	r1, #8
 80172e2:	6809      	ldr	r1, [r1, #0]
 80172e4:	3015      	adds	r0, #21
 80172e6:	4084      	lsls	r4, r0
 80172e8:	4660      	mov	r0, ip
 80172ea:	40c1      	lsrs	r1, r0
 80172ec:	430c      	orrs	r4, r1
 80172ee:	0022      	movs	r2, r4
 80172f0:	0010      	movs	r0, r2
 80172f2:	0019      	movs	r1, r3
 80172f4:	b003      	add	sp, #12
 80172f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172f8:	2700      	movs	r7, #0
 80172fa:	42ae      	cmp	r6, r5
 80172fc:	d202      	bcs.n	8017304 <__b2d+0x60>
 80172fe:	9d01      	ldr	r5, [sp, #4]
 8017300:	3d08      	subs	r5, #8
 8017302:	682f      	ldr	r7, [r5, #0]
 8017304:	380b      	subs	r0, #11
 8017306:	4684      	mov	ip, r0
 8017308:	1e03      	subs	r3, r0, #0
 801730a:	d012      	beq.n	8017332 <__b2d+0x8e>
 801730c:	409c      	lsls	r4, r3
 801730e:	2020      	movs	r0, #32
 8017310:	4321      	orrs	r1, r4
 8017312:	003c      	movs	r4, r7
 8017314:	1ac0      	subs	r0, r0, r3
 8017316:	40c4      	lsrs	r4, r0
 8017318:	4321      	orrs	r1, r4
 801731a:	000b      	movs	r3, r1
 801731c:	2100      	movs	r1, #0
 801731e:	42b5      	cmp	r5, r6
 8017320:	d901      	bls.n	8017326 <__b2d+0x82>
 8017322:	3d04      	subs	r5, #4
 8017324:	6829      	ldr	r1, [r5, #0]
 8017326:	4664      	mov	r4, ip
 8017328:	40c1      	lsrs	r1, r0
 801732a:	40a7      	lsls	r7, r4
 801732c:	430f      	orrs	r7, r1
 801732e:	003a      	movs	r2, r7
 8017330:	e7de      	b.n	80172f0 <__b2d+0x4c>
 8017332:	4321      	orrs	r1, r4
 8017334:	000b      	movs	r3, r1
 8017336:	e7fa      	b.n	801732e <__b2d+0x8a>
 8017338:	3ff00000 	.word	0x3ff00000

0801733c <__d2b>:
 801733c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801733e:	001d      	movs	r5, r3
 8017340:	2101      	movs	r1, #1
 8017342:	0014      	movs	r4, r2
 8017344:	9f08      	ldr	r7, [sp, #32]
 8017346:	f7ff fce5 	bl	8016d14 <_Balloc>
 801734a:	032b      	lsls	r3, r5, #12
 801734c:	006d      	lsls	r5, r5, #1
 801734e:	0006      	movs	r6, r0
 8017350:	0b1b      	lsrs	r3, r3, #12
 8017352:	0d6d      	lsrs	r5, r5, #21
 8017354:	d124      	bne.n	80173a0 <__d2b+0x64>
 8017356:	9301      	str	r3, [sp, #4]
 8017358:	2c00      	cmp	r4, #0
 801735a:	d027      	beq.n	80173ac <__d2b+0x70>
 801735c:	4668      	mov	r0, sp
 801735e:	9400      	str	r4, [sp, #0]
 8017360:	f7ff fda0 	bl	8016ea4 <__lo0bits>
 8017364:	9c00      	ldr	r4, [sp, #0]
 8017366:	2800      	cmp	r0, #0
 8017368:	d01e      	beq.n	80173a8 <__d2b+0x6c>
 801736a:	9b01      	ldr	r3, [sp, #4]
 801736c:	2120      	movs	r1, #32
 801736e:	001a      	movs	r2, r3
 8017370:	1a09      	subs	r1, r1, r0
 8017372:	408a      	lsls	r2, r1
 8017374:	40c3      	lsrs	r3, r0
 8017376:	4322      	orrs	r2, r4
 8017378:	6172      	str	r2, [r6, #20]
 801737a:	9301      	str	r3, [sp, #4]
 801737c:	9c01      	ldr	r4, [sp, #4]
 801737e:	61b4      	str	r4, [r6, #24]
 8017380:	1e63      	subs	r3, r4, #1
 8017382:	419c      	sbcs	r4, r3
 8017384:	3401      	adds	r4, #1
 8017386:	6134      	str	r4, [r6, #16]
 8017388:	2d00      	cmp	r5, #0
 801738a:	d018      	beq.n	80173be <__d2b+0x82>
 801738c:	4b12      	ldr	r3, [pc, #72]	; (80173d8 <__d2b+0x9c>)
 801738e:	18ed      	adds	r5, r5, r3
 8017390:	2335      	movs	r3, #53	; 0x35
 8017392:	182d      	adds	r5, r5, r0
 8017394:	603d      	str	r5, [r7, #0]
 8017396:	1a18      	subs	r0, r3, r0
 8017398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801739a:	6018      	str	r0, [r3, #0]
 801739c:	0030      	movs	r0, r6
 801739e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80173a0:	2280      	movs	r2, #128	; 0x80
 80173a2:	0352      	lsls	r2, r2, #13
 80173a4:	4313      	orrs	r3, r2
 80173a6:	e7d6      	b.n	8017356 <__d2b+0x1a>
 80173a8:	6174      	str	r4, [r6, #20]
 80173aa:	e7e7      	b.n	801737c <__d2b+0x40>
 80173ac:	a801      	add	r0, sp, #4
 80173ae:	f7ff fd79 	bl	8016ea4 <__lo0bits>
 80173b2:	2401      	movs	r4, #1
 80173b4:	9b01      	ldr	r3, [sp, #4]
 80173b6:	6134      	str	r4, [r6, #16]
 80173b8:	6173      	str	r3, [r6, #20]
 80173ba:	3020      	adds	r0, #32
 80173bc:	e7e4      	b.n	8017388 <__d2b+0x4c>
 80173be:	4b07      	ldr	r3, [pc, #28]	; (80173dc <__d2b+0xa0>)
 80173c0:	18c0      	adds	r0, r0, r3
 80173c2:	4b07      	ldr	r3, [pc, #28]	; (80173e0 <__d2b+0xa4>)
 80173c4:	6038      	str	r0, [r7, #0]
 80173c6:	18e3      	adds	r3, r4, r3
 80173c8:	009b      	lsls	r3, r3, #2
 80173ca:	18f3      	adds	r3, r6, r3
 80173cc:	6958      	ldr	r0, [r3, #20]
 80173ce:	f7ff fd4f 	bl	8016e70 <__hi0bits>
 80173d2:	0164      	lsls	r4, r4, #5
 80173d4:	1a20      	subs	r0, r4, r0
 80173d6:	e7df      	b.n	8017398 <__d2b+0x5c>
 80173d8:	fffffbcd 	.word	0xfffffbcd
 80173dc:	fffffbce 	.word	0xfffffbce
 80173e0:	3fffffff 	.word	0x3fffffff

080173e4 <__ratio>:
 80173e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173e6:	b085      	sub	sp, #20
 80173e8:	000f      	movs	r7, r1
 80173ea:	a902      	add	r1, sp, #8
 80173ec:	0006      	movs	r6, r0
 80173ee:	f7ff ff59 	bl	80172a4 <__b2d>
 80173f2:	0004      	movs	r4, r0
 80173f4:	000d      	movs	r5, r1
 80173f6:	0038      	movs	r0, r7
 80173f8:	a903      	add	r1, sp, #12
 80173fa:	9400      	str	r4, [sp, #0]
 80173fc:	9501      	str	r5, [sp, #4]
 80173fe:	f7ff ff51 	bl	80172a4 <__b2d>
 8017402:	6936      	ldr	r6, [r6, #16]
 8017404:	693f      	ldr	r7, [r7, #16]
 8017406:	0002      	movs	r2, r0
 8017408:	1bf7      	subs	r7, r6, r7
 801740a:	017e      	lsls	r6, r7, #5
 801740c:	46b4      	mov	ip, r6
 801740e:	9f03      	ldr	r7, [sp, #12]
 8017410:	9e02      	ldr	r6, [sp, #8]
 8017412:	000b      	movs	r3, r1
 8017414:	1bf6      	subs	r6, r6, r7
 8017416:	4466      	add	r6, ip
 8017418:	0537      	lsls	r7, r6, #20
 801741a:	2e00      	cmp	r6, #0
 801741c:	dd07      	ble.n	801742e <__ratio+0x4a>
 801741e:	1979      	adds	r1, r7, r5
 8017420:	9101      	str	r1, [sp, #4]
 8017422:	9800      	ldr	r0, [sp, #0]
 8017424:	9901      	ldr	r1, [sp, #4]
 8017426:	f7ea f8fb 	bl	8001620 <__aeabi_ddiv>
 801742a:	b005      	add	sp, #20
 801742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801742e:	1bcb      	subs	r3, r1, r7
 8017430:	e7f7      	b.n	8017422 <__ratio+0x3e>

08017432 <__copybits>:
 8017432:	0013      	movs	r3, r2
 8017434:	3901      	subs	r1, #1
 8017436:	b510      	push	{r4, lr}
 8017438:	1149      	asrs	r1, r1, #5
 801743a:	6912      	ldr	r2, [r2, #16]
 801743c:	3101      	adds	r1, #1
 801743e:	0089      	lsls	r1, r1, #2
 8017440:	3314      	adds	r3, #20
 8017442:	0092      	lsls	r2, r2, #2
 8017444:	1841      	adds	r1, r0, r1
 8017446:	189a      	adds	r2, r3, r2
 8017448:	429a      	cmp	r2, r3
 801744a:	d803      	bhi.n	8017454 <__copybits+0x22>
 801744c:	2300      	movs	r3, #0
 801744e:	4281      	cmp	r1, r0
 8017450:	d803      	bhi.n	801745a <__copybits+0x28>
 8017452:	bd10      	pop	{r4, pc}
 8017454:	cb10      	ldmia	r3!, {r4}
 8017456:	c010      	stmia	r0!, {r4}
 8017458:	e7f6      	b.n	8017448 <__copybits+0x16>
 801745a:	c008      	stmia	r0!, {r3}
 801745c:	e7f7      	b.n	801744e <__copybits+0x1c>

0801745e <__any_on>:
 801745e:	0002      	movs	r2, r0
 8017460:	6900      	ldr	r0, [r0, #16]
 8017462:	b510      	push	{r4, lr}
 8017464:	3214      	adds	r2, #20
 8017466:	114b      	asrs	r3, r1, #5
 8017468:	4298      	cmp	r0, r3
 801746a:	db12      	blt.n	8017492 <__any_on+0x34>
 801746c:	dd0b      	ble.n	8017486 <__any_on+0x28>
 801746e:	201f      	movs	r0, #31
 8017470:	4001      	ands	r1, r0
 8017472:	d008      	beq.n	8017486 <__any_on+0x28>
 8017474:	0098      	lsls	r0, r3, #2
 8017476:	5884      	ldr	r4, [r0, r2]
 8017478:	0020      	movs	r0, r4
 801747a:	40c8      	lsrs	r0, r1
 801747c:	4088      	lsls	r0, r1
 801747e:	0001      	movs	r1, r0
 8017480:	2001      	movs	r0, #1
 8017482:	428c      	cmp	r4, r1
 8017484:	d104      	bne.n	8017490 <__any_on+0x32>
 8017486:	009b      	lsls	r3, r3, #2
 8017488:	18d3      	adds	r3, r2, r3
 801748a:	4293      	cmp	r3, r2
 801748c:	d803      	bhi.n	8017496 <__any_on+0x38>
 801748e:	2000      	movs	r0, #0
 8017490:	bd10      	pop	{r4, pc}
 8017492:	0003      	movs	r3, r0
 8017494:	e7f7      	b.n	8017486 <__any_on+0x28>
 8017496:	3b04      	subs	r3, #4
 8017498:	6819      	ldr	r1, [r3, #0]
 801749a:	2900      	cmp	r1, #0
 801749c:	d0f5      	beq.n	801748a <__any_on+0x2c>
 801749e:	2001      	movs	r0, #1
 80174a0:	e7f6      	b.n	8017490 <__any_on+0x32>
	...

080174a4 <frexp>:
 80174a4:	b570      	push	{r4, r5, r6, lr}
 80174a6:	0014      	movs	r4, r2
 80174a8:	2500      	movs	r5, #0
 80174aa:	6025      	str	r5, [r4, #0]
 80174ac:	4d10      	ldr	r5, [pc, #64]	; (80174f0 <frexp+0x4c>)
 80174ae:	004b      	lsls	r3, r1, #1
 80174b0:	000a      	movs	r2, r1
 80174b2:	085b      	lsrs	r3, r3, #1
 80174b4:	42ab      	cmp	r3, r5
 80174b6:	dc1a      	bgt.n	80174ee <frexp+0x4a>
 80174b8:	001d      	movs	r5, r3
 80174ba:	4305      	orrs	r5, r0
 80174bc:	d017      	beq.n	80174ee <frexp+0x4a>
 80174be:	4d0d      	ldr	r5, [pc, #52]	; (80174f4 <frexp+0x50>)
 80174c0:	42ab      	cmp	r3, r5
 80174c2:	dc09      	bgt.n	80174d8 <frexp+0x34>
 80174c4:	2200      	movs	r2, #0
 80174c6:	4b0c      	ldr	r3, [pc, #48]	; (80174f8 <frexp+0x54>)
 80174c8:	f7ea fcb4 	bl	8001e34 <__aeabi_dmul>
 80174cc:	2536      	movs	r5, #54	; 0x36
 80174ce:	000a      	movs	r2, r1
 80174d0:	004b      	lsls	r3, r1, #1
 80174d2:	426d      	negs	r5, r5
 80174d4:	085b      	lsrs	r3, r3, #1
 80174d6:	6025      	str	r5, [r4, #0]
 80174d8:	4d08      	ldr	r5, [pc, #32]	; (80174fc <frexp+0x58>)
 80174da:	151b      	asrs	r3, r3, #20
 80174dc:	195b      	adds	r3, r3, r5
 80174de:	6825      	ldr	r5, [r4, #0]
 80174e0:	18eb      	adds	r3, r5, r3
 80174e2:	6023      	str	r3, [r4, #0]
 80174e4:	4b06      	ldr	r3, [pc, #24]	; (8017500 <frexp+0x5c>)
 80174e6:	401a      	ands	r2, r3
 80174e8:	4b06      	ldr	r3, [pc, #24]	; (8017504 <frexp+0x60>)
 80174ea:	4313      	orrs	r3, r2
 80174ec:	0019      	movs	r1, r3
 80174ee:	bd70      	pop	{r4, r5, r6, pc}
 80174f0:	7fefffff 	.word	0x7fefffff
 80174f4:	000fffff 	.word	0x000fffff
 80174f8:	43500000 	.word	0x43500000
 80174fc:	fffffc02 	.word	0xfffffc02
 8017500:	800fffff 	.word	0x800fffff
 8017504:	3fe00000 	.word	0x3fe00000

08017508 <__ssprint_r>:
 8017508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801750a:	6893      	ldr	r3, [r2, #8]
 801750c:	b087      	sub	sp, #28
 801750e:	9002      	str	r0, [sp, #8]
 8017510:	000c      	movs	r4, r1
 8017512:	0016      	movs	r6, r2
 8017514:	2b00      	cmp	r3, #0
 8017516:	d063      	beq.n	80175e0 <__ssprint_r+0xd8>
 8017518:	6813      	ldr	r3, [r2, #0]
 801751a:	9303      	str	r3, [sp, #12]
 801751c:	2300      	movs	r3, #0
 801751e:	001f      	movs	r7, r3
 8017520:	9305      	str	r3, [sp, #20]
 8017522:	2f00      	cmp	r7, #0
 8017524:	d02e      	beq.n	8017584 <__ssprint_r+0x7c>
 8017526:	68a5      	ldr	r5, [r4, #8]
 8017528:	42af      	cmp	r7, r5
 801752a:	d347      	bcc.n	80175bc <__ssprint_r+0xb4>
 801752c:	2390      	movs	r3, #144	; 0x90
 801752e:	89a2      	ldrh	r2, [r4, #12]
 8017530:	00db      	lsls	r3, r3, #3
 8017532:	421a      	tst	r2, r3
 8017534:	d042      	beq.n	80175bc <__ssprint_r+0xb4>
 8017536:	2003      	movs	r0, #3
 8017538:	6921      	ldr	r1, [r4, #16]
 801753a:	6823      	ldr	r3, [r4, #0]
 801753c:	1a5b      	subs	r3, r3, r1
 801753e:	9304      	str	r3, [sp, #16]
 8017540:	6963      	ldr	r3, [r4, #20]
 8017542:	4343      	muls	r3, r0
 8017544:	0fd8      	lsrs	r0, r3, #31
 8017546:	18c3      	adds	r3, r0, r3
 8017548:	105b      	asrs	r3, r3, #1
 801754a:	9301      	str	r3, [sp, #4]
 801754c:	9b04      	ldr	r3, [sp, #16]
 801754e:	9801      	ldr	r0, [sp, #4]
 8017550:	3301      	adds	r3, #1
 8017552:	19db      	adds	r3, r3, r7
 8017554:	4283      	cmp	r3, r0
 8017556:	d900      	bls.n	801755a <__ssprint_r+0x52>
 8017558:	9301      	str	r3, [sp, #4]
 801755a:	0553      	lsls	r3, r2, #21
 801755c:	d544      	bpl.n	80175e8 <__ssprint_r+0xe0>
 801755e:	9901      	ldr	r1, [sp, #4]
 8017560:	9802      	ldr	r0, [sp, #8]
 8017562:	f7fb fab7 	bl	8012ad4 <_malloc_r>
 8017566:	1e05      	subs	r5, r0, #0
 8017568:	d114      	bne.n	8017594 <__ssprint_r+0x8c>
 801756a:	230c      	movs	r3, #12
 801756c:	9a02      	ldr	r2, [sp, #8]
 801756e:	2001      	movs	r0, #1
 8017570:	6013      	str	r3, [r2, #0]
 8017572:	2340      	movs	r3, #64	; 0x40
 8017574:	89a2      	ldrh	r2, [r4, #12]
 8017576:	4240      	negs	r0, r0
 8017578:	4313      	orrs	r3, r2
 801757a:	81a3      	strh	r3, [r4, #12]
 801757c:	2300      	movs	r3, #0
 801757e:	60b3      	str	r3, [r6, #8]
 8017580:	6073      	str	r3, [r6, #4]
 8017582:	e02f      	b.n	80175e4 <__ssprint_r+0xdc>
 8017584:	9b03      	ldr	r3, [sp, #12]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	9305      	str	r3, [sp, #20]
 801758a:	9b03      	ldr	r3, [sp, #12]
 801758c:	685f      	ldr	r7, [r3, #4]
 801758e:	3308      	adds	r3, #8
 8017590:	9303      	str	r3, [sp, #12]
 8017592:	e7c6      	b.n	8017522 <__ssprint_r+0x1a>
 8017594:	9a04      	ldr	r2, [sp, #16]
 8017596:	6921      	ldr	r1, [r4, #16]
 8017598:	f7fb fcd5 	bl	8012f46 <memcpy>
 801759c:	89a3      	ldrh	r3, [r4, #12]
 801759e:	4a18      	ldr	r2, [pc, #96]	; (8017600 <__ssprint_r+0xf8>)
 80175a0:	401a      	ands	r2, r3
 80175a2:	2380      	movs	r3, #128	; 0x80
 80175a4:	4313      	orrs	r3, r2
 80175a6:	81a3      	strh	r3, [r4, #12]
 80175a8:	9b04      	ldr	r3, [sp, #16]
 80175aa:	6125      	str	r5, [r4, #16]
 80175ac:	18ed      	adds	r5, r5, r3
 80175ae:	6025      	str	r5, [r4, #0]
 80175b0:	003d      	movs	r5, r7
 80175b2:	9b01      	ldr	r3, [sp, #4]
 80175b4:	9a04      	ldr	r2, [sp, #16]
 80175b6:	6163      	str	r3, [r4, #20]
 80175b8:	1a9b      	subs	r3, r3, r2
 80175ba:	60a3      	str	r3, [r4, #8]
 80175bc:	42bd      	cmp	r5, r7
 80175be:	d900      	bls.n	80175c2 <__ssprint_r+0xba>
 80175c0:	003d      	movs	r5, r7
 80175c2:	002a      	movs	r2, r5
 80175c4:	9905      	ldr	r1, [sp, #20]
 80175c6:	6820      	ldr	r0, [r4, #0]
 80175c8:	f7ff fb91 	bl	8016cee <memmove>
 80175cc:	68a3      	ldr	r3, [r4, #8]
 80175ce:	1b5b      	subs	r3, r3, r5
 80175d0:	60a3      	str	r3, [r4, #8]
 80175d2:	6823      	ldr	r3, [r4, #0]
 80175d4:	195d      	adds	r5, r3, r5
 80175d6:	68b3      	ldr	r3, [r6, #8]
 80175d8:	6025      	str	r5, [r4, #0]
 80175da:	1bdb      	subs	r3, r3, r7
 80175dc:	60b3      	str	r3, [r6, #8]
 80175de:	d1d1      	bne.n	8017584 <__ssprint_r+0x7c>
 80175e0:	2000      	movs	r0, #0
 80175e2:	6070      	str	r0, [r6, #4]
 80175e4:	b007      	add	sp, #28
 80175e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175e8:	9a01      	ldr	r2, [sp, #4]
 80175ea:	9802      	ldr	r0, [sp, #8]
 80175ec:	f7fb fcf0 	bl	8012fd0 <_realloc_r>
 80175f0:	1e05      	subs	r5, r0, #0
 80175f2:	d1d9      	bne.n	80175a8 <__ssprint_r+0xa0>
 80175f4:	6921      	ldr	r1, [r4, #16]
 80175f6:	9802      	ldr	r0, [sp, #8]
 80175f8:	f7fe ff78 	bl	80164ec <_free_r>
 80175fc:	e7b5      	b.n	801756a <__ssprint_r+0x62>
 80175fe:	46c0      	nop			; (mov r8, r8)
 8017600:	fffffb7f 	.word	0xfffffb7f

08017604 <__register_exitproc>:
 8017604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017606:	4d29      	ldr	r5, [pc, #164]	; (80176ac <__register_exitproc+0xa8>)
 8017608:	0006      	movs	r6, r0
 801760a:	6828      	ldr	r0, [r5, #0]
 801760c:	9301      	str	r3, [sp, #4]
 801760e:	9100      	str	r1, [sp, #0]
 8017610:	0017      	movs	r7, r2
 8017612:	f7ff fb5f 	bl	8016cd4 <__retarget_lock_acquire_recursive>
 8017616:	4b26      	ldr	r3, [pc, #152]	; (80176b0 <__register_exitproc+0xac>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	001c      	movs	r4, r3
 801761c:	34fc      	adds	r4, #252	; 0xfc
 801761e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017620:	2800      	cmp	r0, #0
 8017622:	d103      	bne.n	801762c <__register_exitproc+0x28>
 8017624:	334d      	adds	r3, #77	; 0x4d
 8017626:	33ff      	adds	r3, #255	; 0xff
 8017628:	0018      	movs	r0, r3
 801762a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801762c:	6843      	ldr	r3, [r0, #4]
 801762e:	2b1f      	cmp	r3, #31
 8017630:	dd18      	ble.n	8017664 <__register_exitproc+0x60>
 8017632:	4b20      	ldr	r3, [pc, #128]	; (80176b4 <__register_exitproc+0xb0>)
 8017634:	2b00      	cmp	r3, #0
 8017636:	d105      	bne.n	8017644 <__register_exitproc+0x40>
 8017638:	6828      	ldr	r0, [r5, #0]
 801763a:	f7ff fb4c 	bl	8016cd6 <__retarget_lock_release_recursive>
 801763e:	2001      	movs	r0, #1
 8017640:	4240      	negs	r0, r0
 8017642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017644:	20c8      	movs	r0, #200	; 0xc8
 8017646:	0040      	lsls	r0, r0, #1
 8017648:	f7fb fa30 	bl	8012aac <malloc>
 801764c:	2800      	cmp	r0, #0
 801764e:	d0f3      	beq.n	8017638 <__register_exitproc+0x34>
 8017650:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017652:	2300      	movs	r3, #0
 8017654:	6002      	str	r2, [r0, #0]
 8017656:	22c4      	movs	r2, #196	; 0xc4
 8017658:	0052      	lsls	r2, r2, #1
 801765a:	6043      	str	r3, [r0, #4]
 801765c:	64e0      	str	r0, [r4, #76]	; 0x4c
 801765e:	5083      	str	r3, [r0, r2]
 8017660:	3204      	adds	r2, #4
 8017662:	5083      	str	r3, [r0, r2]
 8017664:	6843      	ldr	r3, [r0, #4]
 8017666:	2e00      	cmp	r6, #0
 8017668:	d014      	beq.n	8017694 <__register_exitproc+0x90>
 801766a:	009a      	lsls	r2, r3, #2
 801766c:	1882      	adds	r2, r0, r2
 801766e:	0011      	movs	r1, r2
 8017670:	3188      	adds	r1, #136	; 0x88
 8017672:	600f      	str	r7, [r1, #0]
 8017674:	2101      	movs	r1, #1
 8017676:	0004      	movs	r4, r0
 8017678:	4099      	lsls	r1, r3
 801767a:	3485      	adds	r4, #133	; 0x85
 801767c:	34ff      	adds	r4, #255	; 0xff
 801767e:	6865      	ldr	r5, [r4, #4]
 8017680:	32fc      	adds	r2, #252	; 0xfc
 8017682:	430d      	orrs	r5, r1
 8017684:	6065      	str	r5, [r4, #4]
 8017686:	9d01      	ldr	r5, [sp, #4]
 8017688:	60d5      	str	r5, [r2, #12]
 801768a:	2e02      	cmp	r6, #2
 801768c:	d102      	bne.n	8017694 <__register_exitproc+0x90>
 801768e:	68a2      	ldr	r2, [r4, #8]
 8017690:	4311      	orrs	r1, r2
 8017692:	60a1      	str	r1, [r4, #8]
 8017694:	1c5a      	adds	r2, r3, #1
 8017696:	6042      	str	r2, [r0, #4]
 8017698:	3302      	adds	r3, #2
 801769a:	9a00      	ldr	r2, [sp, #0]
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	501a      	str	r2, [r3, r0]
 80176a0:	4b02      	ldr	r3, [pc, #8]	; (80176ac <__register_exitproc+0xa8>)
 80176a2:	6818      	ldr	r0, [r3, #0]
 80176a4:	f7ff fb17 	bl	8016cd6 <__retarget_lock_release_recursive>
 80176a8:	2000      	movs	r0, #0
 80176aa:	e7ca      	b.n	8017642 <__register_exitproc+0x3e>
 80176ac:	20000a84 	.word	0x20000a84
 80176b0:	0801a868 	.word	0x0801a868
 80176b4:	08012aad 	.word	0x08012aad

080176b8 <_sbrk>:
 80176b8:	4b05      	ldr	r3, [pc, #20]	; (80176d0 <_sbrk+0x18>)
 80176ba:	0002      	movs	r2, r0
 80176bc:	6819      	ldr	r1, [r3, #0]
 80176be:	2900      	cmp	r1, #0
 80176c0:	d101      	bne.n	80176c6 <_sbrk+0xe>
 80176c2:	4904      	ldr	r1, [pc, #16]	; (80176d4 <_sbrk+0x1c>)
 80176c4:	6019      	str	r1, [r3, #0]
 80176c6:	6818      	ldr	r0, [r3, #0]
 80176c8:	1882      	adds	r2, r0, r2
 80176ca:	601a      	str	r2, [r3, #0]
 80176cc:	4770      	bx	lr
 80176ce:	46c0      	nop			; (mov r8, r8)
 80176d0:	20006d2c 	.word	0x20006d2c
 80176d4:	200072e0 	.word	0x200072e0

080176d8 <_init>:
 80176d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176da:	46c0      	nop			; (mov r8, r8)
 80176dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176de:	bc08      	pop	{r3}
 80176e0:	469e      	mov	lr, r3
 80176e2:	4770      	bx	lr

080176e4 <_fini>:
 80176e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e6:	46c0      	nop			; (mov r8, r8)
 80176e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ea:	bc08      	pop	{r3}
 80176ec:	469e      	mov	lr, r3
 80176ee:	4770      	bx	lr
