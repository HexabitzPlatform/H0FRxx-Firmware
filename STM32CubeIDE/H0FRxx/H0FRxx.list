
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b14  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033f0  08019bd0  08019bd0  00029bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cfc0  0801cfc0  00030a5c  2**0
                  CONTENTS
  4 .ARM          00000008  0801cfc0  0801cfc0  0002cfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cfc8  0801cfc8  00030a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801cfc8  0801cfc8  0002cfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cfd0  0801cfd0  0002cfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a5c  20000000  0801cfd4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006370  20000a60  0801da30  00030a60  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006dd0  0801da30  00036dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a85f  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000099db  00000000  00000000  0008b2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001eccc  00000000  00000000  00094cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  000b3990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002358  00000000  00000000  000b55e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a853  00000000  00000000  000b7940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a145  00000000  00000000  000e2193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec2d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b70  00000000  00000000  000ec32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000f2e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000f2f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a60 	.word	0x20000a60
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019bb8 	.word	0x08019bb8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a64 	.word	0x20000a64
 8000100:	08019bb8 	.word	0x08019bb8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd7f 	bl	8001f60 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe27 	bl	80020bc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe1d 	bl	80020bc <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fda1 	bl	8001fd8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd97 	bl	8001fd8 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb73 	bl	8000bac <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faf7 	bl	8000ac4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb65 	bl	8000bac <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb5b 	bl	8000bac <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb05 	bl	8000b14 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fafb 	bl	8000b14 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8da 	bl	8000714 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0415      	lsls	r5, r2, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	000f      	movs	r7, r1
 8000574:	0001      	movs	r1, r0
 8000576:	002e      	movs	r6, r5
 8000578:	46c6      	mov	lr, r8
 800057a:	4684      	mov	ip, r0
 800057c:	0400      	lsls	r0, r0, #16
 800057e:	0c14      	lsrs	r4, r2, #16
 8000580:	0c00      	lsrs	r0, r0, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4346      	muls	r6, r0
 8000586:	434d      	muls	r5, r1
 8000588:	4360      	muls	r0, r4
 800058a:	4361      	muls	r1, r4
 800058c:	1940      	adds	r0, r0, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	1824      	adds	r4, r4, r0
 8000592:	b500      	push	{lr}
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	0240      	lsls	r0, r0, #9
 800059c:	4680      	mov	r8, r0
 800059e:	4441      	add	r1, r8
 80005a0:	0c25      	lsrs	r5, r4, #16
 80005a2:	186d      	adds	r5, r5, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	4359      	muls	r1, r3
 80005a8:	437a      	muls	r2, r7
 80005aa:	0430      	lsls	r0, r6, #16
 80005ac:	1949      	adds	r1, r1, r5
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	0c00      	lsrs	r0, r0, #16
 80005b2:	1820      	adds	r0, r4, r0
 80005b4:	1889      	adds	r1, r1, r2
 80005b6:	bc80      	pop	{r7}
 80005b8:	46b8      	mov	r8, r7
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005bc <__aeabi_f2uiz>:
 80005bc:	219e      	movs	r1, #158	; 0x9e
 80005be:	b510      	push	{r4, lr}
 80005c0:	05c9      	lsls	r1, r1, #23
 80005c2:	1c04      	adds	r4, r0, #0
 80005c4:	f7ff ffa8 	bl	8000518 <__aeabi_fcmpge>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d103      	bne.n	80005d4 <__aeabi_f2uiz+0x18>
 80005cc:	1c20      	adds	r0, r4, #0
 80005ce:	f000 fe19 	bl	8001204 <__aeabi_f2iz>
 80005d2:	bd10      	pop	{r4, pc}
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	1c20      	adds	r0, r4, #0
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	f000 fc4b 	bl	8000e74 <__aeabi_fsub>
 80005de:	f000 fe11 	bl	8001204 <__aeabi_f2iz>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	061b      	lsls	r3, r3, #24
 80005e6:	469c      	mov	ip, r3
 80005e8:	4460      	add	r0, ip
 80005ea:	e7f2      	b.n	80005d2 <__aeabi_f2uiz+0x16>

080005ec <__aeabi_d2uiz>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__aeabi_d2uiz+0x38>)
 80005f2:	0004      	movs	r4, r0
 80005f4:	000d      	movs	r5, r1
 80005f6:	f7ff ff55 	bl	80004a4 <__aeabi_dcmpge>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d104      	bne.n	8000608 <__aeabi_d2uiz+0x1c>
 80005fe:	0020      	movs	r0, r4
 8000600:	0029      	movs	r1, r5
 8000602:	f002 fbe7 	bl	8002dd4 <__aeabi_d2iz>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__aeabi_d2uiz+0x38>)
 800060a:	2200      	movs	r2, #0
 800060c:	0020      	movs	r0, r4
 800060e:	0029      	movs	r1, r5
 8000610:	f002 f830 	bl	8002674 <__aeabi_dsub>
 8000614:	f002 fbde 	bl	8002dd4 <__aeabi_d2iz>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	469c      	mov	ip, r3
 800061e:	4460      	add	r0, ip
 8000620:	e7f1      	b.n	8000606 <__aeabi_d2uiz+0x1a>
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	41e00000 	.word	0x41e00000

08000628 <__aeabi_d2lz>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	0005      	movs	r5, r0
 800062c:	000c      	movs	r4, r1
 800062e:	2200      	movs	r2, #0
 8000630:	2300      	movs	r3, #0
 8000632:	0028      	movs	r0, r5
 8000634:	0021      	movs	r1, r4
 8000636:	f7ff ff17 	bl	8000468 <__aeabi_dcmplt>
 800063a:	2800      	cmp	r0, #0
 800063c:	d108      	bne.n	8000650 <__aeabi_d2lz+0x28>
 800063e:	0028      	movs	r0, r5
 8000640:	0021      	movs	r1, r4
 8000642:	f000 f80f 	bl	8000664 <__aeabi_d2ulz>
 8000646:	0002      	movs	r2, r0
 8000648:	000b      	movs	r3, r1
 800064a:	0010      	movs	r0, r2
 800064c:	0019      	movs	r1, r3
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	18e1      	adds	r1, r4, r3
 8000656:	0028      	movs	r0, r5
 8000658:	f000 f804 	bl	8000664 <__aeabi_d2ulz>
 800065c:	2300      	movs	r3, #0
 800065e:	4242      	negs	r2, r0
 8000660:	418b      	sbcs	r3, r1
 8000662:	e7f2      	b.n	800064a <__aeabi_d2lz+0x22>

08000664 <__aeabi_d2ulz>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	2200      	movs	r2, #0
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <__aeabi_d2ulz+0x34>)
 800066a:	000d      	movs	r5, r1
 800066c:	0004      	movs	r4, r0
 800066e:	f001 fd95 	bl	800219c <__aeabi_dmul>
 8000672:	f7ff ffbb 	bl	80005ec <__aeabi_d2uiz>
 8000676:	0006      	movs	r6, r0
 8000678:	f002 fc12 	bl	8002ea0 <__aeabi_ui2d>
 800067c:	2200      	movs	r2, #0
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <__aeabi_d2ulz+0x38>)
 8000680:	f001 fd8c 	bl	800219c <__aeabi_dmul>
 8000684:	0002      	movs	r2, r0
 8000686:	000b      	movs	r3, r1
 8000688:	0020      	movs	r0, r4
 800068a:	0029      	movs	r1, r5
 800068c:	f001 fff2 	bl	8002674 <__aeabi_dsub>
 8000690:	f7ff ffac 	bl	80005ec <__aeabi_d2uiz>
 8000694:	0031      	movs	r1, r6
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	3df00000 	.word	0x3df00000
 800069c:	41f00000 	.word	0x41f00000

080006a0 <__aeabi_l2d>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0006      	movs	r6, r0
 80006a4:	0008      	movs	r0, r1
 80006a6:	f002 fbcb 	bl	8002e40 <__aeabi_i2d>
 80006aa:	2200      	movs	r2, #0
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <__aeabi_l2d+0x28>)
 80006ae:	f001 fd75 	bl	800219c <__aeabi_dmul>
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	0030      	movs	r0, r6
 80006b8:	f002 fbf2 	bl	8002ea0 <__aeabi_ui2d>
 80006bc:	002b      	movs	r3, r5
 80006be:	0022      	movs	r2, r4
 80006c0:	f000 fdfc 	bl	80012bc <__aeabi_dadd>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	41f00000 	.word	0x41f00000

080006cc <__aeabi_ul2f>:
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	b5d0      	push	{r4, r6, r7, lr}
 80006d0:	039b      	lsls	r3, r3, #14
 80006d2:	0004      	movs	r4, r0
 80006d4:	0008      	movs	r0, r1
 80006d6:	4299      	cmp	r1, r3
 80006d8:	d301      	bcc.n	80006de <__aeabi_ul2f+0x12>
 80006da:	0563      	lsls	r3, r4, #21
 80006dc:	d111      	bne.n	8000702 <__aeabi_ul2f+0x36>
 80006de:	f002 fbdf 	bl	8002ea0 <__aeabi_ui2d>
 80006e2:	2200      	movs	r2, #0
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <__aeabi_ul2f+0x44>)
 80006e6:	f001 fd59 	bl	800219c <__aeabi_dmul>
 80006ea:	0006      	movs	r6, r0
 80006ec:	000f      	movs	r7, r1
 80006ee:	0020      	movs	r0, r4
 80006f0:	f002 fbd6 	bl	8002ea0 <__aeabi_ui2d>
 80006f4:	0032      	movs	r2, r6
 80006f6:	003b      	movs	r3, r7
 80006f8:	f000 fde0 	bl	80012bc <__aeabi_dadd>
 80006fc:	f002 fc3e 	bl	8002f7c <__aeabi_d2f>
 8000700:	bdd0      	pop	{r4, r6, r7, pc}
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	0ae4      	lsrs	r4, r4, #11
 8000706:	02e4      	lsls	r4, r4, #11
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	431c      	orrs	r4, r3
 800070c:	e7e7      	b.n	80006de <__aeabi_ul2f+0x12>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	41f00000 	.word	0x41f00000

08000714 <__udivmoddi4>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	b5e0      	push	{r5, r6, r7, lr}
 8000720:	0004      	movs	r4, r0
 8000722:	000d      	movs	r5, r1
 8000724:	4692      	mov	sl, r2
 8000726:	4699      	mov	r9, r3
 8000728:	b083      	sub	sp, #12
 800072a:	428b      	cmp	r3, r1
 800072c:	d830      	bhi.n	8000790 <__udivmoddi4+0x7c>
 800072e:	d02d      	beq.n	800078c <__udivmoddi4+0x78>
 8000730:	4649      	mov	r1, r9
 8000732:	4650      	mov	r0, sl
 8000734:	f002 fcc8 	bl	80030c8 <__clzdi2>
 8000738:	0029      	movs	r1, r5
 800073a:	0006      	movs	r6, r0
 800073c:	0020      	movs	r0, r4
 800073e:	f002 fcc3 	bl	80030c8 <__clzdi2>
 8000742:	1a33      	subs	r3, r6, r0
 8000744:	4698      	mov	r8, r3
 8000746:	3b20      	subs	r3, #32
 8000748:	469b      	mov	fp, r3
 800074a:	d433      	bmi.n	80007b4 <__udivmoddi4+0xa0>
 800074c:	465a      	mov	r2, fp
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	4642      	mov	r2, r8
 8000754:	001f      	movs	r7, r3
 8000756:	4653      	mov	r3, sl
 8000758:	4093      	lsls	r3, r2
 800075a:	001e      	movs	r6, r3
 800075c:	42af      	cmp	r7, r5
 800075e:	d83a      	bhi.n	80007d6 <__udivmoddi4+0xc2>
 8000760:	42af      	cmp	r7, r5
 8000762:	d100      	bne.n	8000766 <__udivmoddi4+0x52>
 8000764:	e078      	b.n	8000858 <__udivmoddi4+0x144>
 8000766:	465b      	mov	r3, fp
 8000768:	1ba4      	subs	r4, r4, r6
 800076a:	41bd      	sbcs	r5, r7
 800076c:	2b00      	cmp	r3, #0
 800076e:	da00      	bge.n	8000772 <__udivmoddi4+0x5e>
 8000770:	e075      	b.n	800085e <__udivmoddi4+0x14a>
 8000772:	2200      	movs	r2, #0
 8000774:	2300      	movs	r3, #0
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	465a      	mov	r2, fp
 800077e:	4093      	lsls	r3, r2
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2301      	movs	r3, #1
 8000784:	4642      	mov	r2, r8
 8000786:	4093      	lsls	r3, r2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	e028      	b.n	80007de <__udivmoddi4+0xca>
 800078c:	4282      	cmp	r2, r0
 800078e:	d9cf      	bls.n	8000730 <__udivmoddi4+0x1c>
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <__udivmoddi4+0x8e>
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	605d      	str	r5, [r3, #4]
 80007a2:	9800      	ldr	r0, [sp, #0]
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	b003      	add	sp, #12
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	46bb      	mov	fp, r7
 80007ac:	46b2      	mov	sl, r6
 80007ae:	46a9      	mov	r9, r5
 80007b0:	46a0      	mov	r8, r4
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	4652      	mov	r2, sl
 80007bc:	40da      	lsrs	r2, r3
 80007be:	4641      	mov	r1, r8
 80007c0:	0013      	movs	r3, r2
 80007c2:	464a      	mov	r2, r9
 80007c4:	408a      	lsls	r2, r1
 80007c6:	0017      	movs	r7, r2
 80007c8:	4642      	mov	r2, r8
 80007ca:	431f      	orrs	r7, r3
 80007cc:	4653      	mov	r3, sl
 80007ce:	4093      	lsls	r3, r2
 80007d0:	001e      	movs	r6, r3
 80007d2:	42af      	cmp	r7, r5
 80007d4:	d9c4      	bls.n	8000760 <__udivmoddi4+0x4c>
 80007d6:	2200      	movs	r2, #0
 80007d8:	2300      	movs	r3, #0
 80007da:	9200      	str	r2, [sp, #0]
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	4643      	mov	r3, r8
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0d9      	beq.n	8000798 <__udivmoddi4+0x84>
 80007e4:	07fb      	lsls	r3, r7, #31
 80007e6:	0872      	lsrs	r2, r6, #1
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4646      	mov	r6, r8
 80007ec:	087b      	lsrs	r3, r7, #1
 80007ee:	e00e      	b.n	800080e <__udivmoddi4+0xfa>
 80007f0:	42ab      	cmp	r3, r5
 80007f2:	d101      	bne.n	80007f8 <__udivmoddi4+0xe4>
 80007f4:	42a2      	cmp	r2, r4
 80007f6:	d80c      	bhi.n	8000812 <__udivmoddi4+0xfe>
 80007f8:	1aa4      	subs	r4, r4, r2
 80007fa:	419d      	sbcs	r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	1924      	adds	r4, r4, r4
 8000800:	416d      	adcs	r5, r5
 8000802:	2100      	movs	r1, #0
 8000804:	3e01      	subs	r6, #1
 8000806:	1824      	adds	r4, r4, r0
 8000808:	414d      	adcs	r5, r1
 800080a:	2e00      	cmp	r6, #0
 800080c:	d006      	beq.n	800081c <__udivmoddi4+0x108>
 800080e:	42ab      	cmp	r3, r5
 8000810:	d9ee      	bls.n	80007f0 <__udivmoddi4+0xdc>
 8000812:	3e01      	subs	r6, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2e00      	cmp	r6, #0
 800081a:	d1f8      	bne.n	800080e <__udivmoddi4+0xfa>
 800081c:	9800      	ldr	r0, [sp, #0]
 800081e:	9901      	ldr	r1, [sp, #4]
 8000820:	465b      	mov	r3, fp
 8000822:	1900      	adds	r0, r0, r4
 8000824:	4169      	adcs	r1, r5
 8000826:	2b00      	cmp	r3, #0
 8000828:	db24      	blt.n	8000874 <__udivmoddi4+0x160>
 800082a:	002b      	movs	r3, r5
 800082c:	465a      	mov	r2, fp
 800082e:	4644      	mov	r4, r8
 8000830:	40d3      	lsrs	r3, r2
 8000832:	002a      	movs	r2, r5
 8000834:	40e2      	lsrs	r2, r4
 8000836:	001c      	movs	r4, r3
 8000838:	465b      	mov	r3, fp
 800083a:	0015      	movs	r5, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	db2a      	blt.n	8000896 <__udivmoddi4+0x182>
 8000840:	0026      	movs	r6, r4
 8000842:	409e      	lsls	r6, r3
 8000844:	0033      	movs	r3, r6
 8000846:	0026      	movs	r6, r4
 8000848:	4647      	mov	r7, r8
 800084a:	40be      	lsls	r6, r7
 800084c:	0032      	movs	r2, r6
 800084e:	1a80      	subs	r0, r0, r2
 8000850:	4199      	sbcs	r1, r3
 8000852:	9000      	str	r0, [sp, #0]
 8000854:	9101      	str	r1, [sp, #4]
 8000856:	e79f      	b.n	8000798 <__udivmoddi4+0x84>
 8000858:	42a3      	cmp	r3, r4
 800085a:	d8bc      	bhi.n	80007d6 <__udivmoddi4+0xc2>
 800085c:	e783      	b.n	8000766 <__udivmoddi4+0x52>
 800085e:	4642      	mov	r2, r8
 8000860:	2320      	movs	r3, #32
 8000862:	2100      	movs	r1, #0
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	9100      	str	r1, [sp, #0]
 800086a:	9201      	str	r2, [sp, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	40da      	lsrs	r2, r3
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	e786      	b.n	8000782 <__udivmoddi4+0x6e>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	002a      	movs	r2, r5
 800087c:	4646      	mov	r6, r8
 800087e:	409a      	lsls	r2, r3
 8000880:	0023      	movs	r3, r4
 8000882:	40f3      	lsrs	r3, r6
 8000884:	4644      	mov	r4, r8
 8000886:	4313      	orrs	r3, r2
 8000888:	002a      	movs	r2, r5
 800088a:	40e2      	lsrs	r2, r4
 800088c:	001c      	movs	r4, r3
 800088e:	465b      	mov	r3, fp
 8000890:	0015      	movs	r5, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	dad4      	bge.n	8000840 <__udivmoddi4+0x12c>
 8000896:	4642      	mov	r2, r8
 8000898:	002f      	movs	r7, r5
 800089a:	2320      	movs	r3, #32
 800089c:	0026      	movs	r6, r4
 800089e:	4097      	lsls	r7, r2
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	40de      	lsrs	r6, r3
 80008a4:	003b      	movs	r3, r7
 80008a6:	4333      	orrs	r3, r6
 80008a8:	e7cd      	b.n	8000846 <__udivmoddi4+0x132>
 80008aa:	46c0      	nop			; (mov r8, r8)

080008ac <__aeabi_fdiv>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0245      	lsls	r5, r0, #9
 80008b6:	b5c0      	push	{r6, r7, lr}
 80008b8:	0047      	lsls	r7, r0, #1
 80008ba:	1c0c      	adds	r4, r1, #0
 80008bc:	0a6d      	lsrs	r5, r5, #9
 80008be:	0e3f      	lsrs	r7, r7, #24
 80008c0:	0fc6      	lsrs	r6, r0, #31
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d066      	beq.n	8000994 <__aeabi_fdiv+0xe8>
 80008c6:	2fff      	cmp	r7, #255	; 0xff
 80008c8:	d06c      	beq.n	80009a4 <__aeabi_fdiv+0xf8>
 80008ca:	2300      	movs	r3, #0
 80008cc:	00ea      	lsls	r2, r5, #3
 80008ce:	2580      	movs	r5, #128	; 0x80
 80008d0:	4699      	mov	r9, r3
 80008d2:	469a      	mov	sl, r3
 80008d4:	04ed      	lsls	r5, r5, #19
 80008d6:	4315      	orrs	r5, r2
 80008d8:	3f7f      	subs	r7, #127	; 0x7f
 80008da:	0260      	lsls	r0, r4, #9
 80008dc:	0061      	lsls	r1, r4, #1
 80008de:	0a43      	lsrs	r3, r0, #9
 80008e0:	4698      	mov	r8, r3
 80008e2:	0e09      	lsrs	r1, r1, #24
 80008e4:	0fe4      	lsrs	r4, r4, #31
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d048      	beq.n	800097c <__aeabi_fdiv+0xd0>
 80008ea:	29ff      	cmp	r1, #255	; 0xff
 80008ec:	d010      	beq.n	8000910 <__aeabi_fdiv+0x64>
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	00d8      	lsls	r0, r3, #3
 80008f2:	04d2      	lsls	r2, r2, #19
 80008f4:	4302      	orrs	r2, r0
 80008f6:	4690      	mov	r8, r2
 80008f8:	2000      	movs	r0, #0
 80008fa:	397f      	subs	r1, #127	; 0x7f
 80008fc:	464a      	mov	r2, r9
 80008fe:	0033      	movs	r3, r6
 8000900:	1a7f      	subs	r7, r7, r1
 8000902:	4302      	orrs	r2, r0
 8000904:	496c      	ldr	r1, [pc, #432]	; (8000ab8 <__aeabi_fdiv+0x20c>)
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	588a      	ldr	r2, [r1, r2]
 800090a:	4063      	eors	r3, r4
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4697      	mov	pc, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d16d      	bne.n	80009f0 <__aeabi_fdiv+0x144>
 8000914:	2002      	movs	r0, #2
 8000916:	3fff      	subs	r7, #255	; 0xff
 8000918:	e033      	b.n	8000982 <__aeabi_fdiv+0xd6>
 800091a:	2300      	movs	r3, #0
 800091c:	4698      	mov	r8, r3
 800091e:	0026      	movs	r6, r4
 8000920:	4645      	mov	r5, r8
 8000922:	4682      	mov	sl, r0
 8000924:	4653      	mov	r3, sl
 8000926:	2b02      	cmp	r3, #2
 8000928:	d100      	bne.n	800092c <__aeabi_fdiv+0x80>
 800092a:	e07f      	b.n	8000a2c <__aeabi_fdiv+0x180>
 800092c:	2b03      	cmp	r3, #3
 800092e:	d100      	bne.n	8000932 <__aeabi_fdiv+0x86>
 8000930:	e094      	b.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d017      	beq.n	8000966 <__aeabi_fdiv+0xba>
 8000936:	0038      	movs	r0, r7
 8000938:	307f      	adds	r0, #127	; 0x7f
 800093a:	2800      	cmp	r0, #0
 800093c:	dd5f      	ble.n	80009fe <__aeabi_fdiv+0x152>
 800093e:	076b      	lsls	r3, r5, #29
 8000940:	d004      	beq.n	800094c <__aeabi_fdiv+0xa0>
 8000942:	230f      	movs	r3, #15
 8000944:	402b      	ands	r3, r5
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fdiv+0xa0>
 800094a:	3504      	adds	r5, #4
 800094c:	012b      	lsls	r3, r5, #4
 800094e:	d503      	bpl.n	8000958 <__aeabi_fdiv+0xac>
 8000950:	0038      	movs	r0, r7
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <__aeabi_fdiv+0x210>)
 8000954:	3080      	adds	r0, #128	; 0x80
 8000956:	401d      	ands	r5, r3
 8000958:	28fe      	cmp	r0, #254	; 0xfe
 800095a:	dc67      	bgt.n	8000a2c <__aeabi_fdiv+0x180>
 800095c:	01ad      	lsls	r5, r5, #6
 800095e:	0a6d      	lsrs	r5, r5, #9
 8000960:	b2c0      	uxtb	r0, r0
 8000962:	e002      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000964:	001e      	movs	r6, r3
 8000966:	2000      	movs	r0, #0
 8000968:	2500      	movs	r5, #0
 800096a:	05c0      	lsls	r0, r0, #23
 800096c:	4328      	orrs	r0, r5
 800096e:	07f6      	lsls	r6, r6, #31
 8000970:	4330      	orrs	r0, r6
 8000972:	bce0      	pop	{r5, r6, r7}
 8000974:	46ba      	mov	sl, r7
 8000976:	46b1      	mov	r9, r6
 8000978:	46a8      	mov	r8, r5
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	2b00      	cmp	r3, #0
 800097e:	d12b      	bne.n	80009d8 <__aeabi_fdiv+0x12c>
 8000980:	2001      	movs	r0, #1
 8000982:	464a      	mov	r2, r9
 8000984:	0033      	movs	r3, r6
 8000986:	494e      	ldr	r1, [pc, #312]	; (8000ac0 <__aeabi_fdiv+0x214>)
 8000988:	4302      	orrs	r2, r0
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	588a      	ldr	r2, [r1, r2]
 800098e:	4063      	eors	r3, r4
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4697      	mov	pc, r2
 8000994:	2d00      	cmp	r5, #0
 8000996:	d113      	bne.n	80009c0 <__aeabi_fdiv+0x114>
 8000998:	2304      	movs	r3, #4
 800099a:	4699      	mov	r9, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2700      	movs	r7, #0
 80009a0:	469a      	mov	sl, r3
 80009a2:	e79a      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d105      	bne.n	80009b4 <__aeabi_fdiv+0x108>
 80009a8:	2308      	movs	r3, #8
 80009aa:	4699      	mov	r9, r3
 80009ac:	3b06      	subs	r3, #6
 80009ae:	27ff      	movs	r7, #255	; 0xff
 80009b0:	469a      	mov	sl, r3
 80009b2:	e792      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009b4:	230c      	movs	r3, #12
 80009b6:	4699      	mov	r9, r3
 80009b8:	3b09      	subs	r3, #9
 80009ba:	27ff      	movs	r7, #255	; 0xff
 80009bc:	469a      	mov	sl, r3
 80009be:	e78c      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009c0:	0028      	movs	r0, r5
 80009c2:	f002 fb63 	bl	800308c <__clzsi2>
 80009c6:	2776      	movs	r7, #118	; 0x76
 80009c8:	1f43      	subs	r3, r0, #5
 80009ca:	409d      	lsls	r5, r3
 80009cc:	2300      	movs	r3, #0
 80009ce:	427f      	negs	r7, r7
 80009d0:	4699      	mov	r9, r3
 80009d2:	469a      	mov	sl, r3
 80009d4:	1a3f      	subs	r7, r7, r0
 80009d6:	e780      	b.n	80008da <__aeabi_fdiv+0x2e>
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fb57 	bl	800308c <__clzsi2>
 80009de:	4642      	mov	r2, r8
 80009e0:	1f43      	subs	r3, r0, #5
 80009e2:	2176      	movs	r1, #118	; 0x76
 80009e4:	409a      	lsls	r2, r3
 80009e6:	4249      	negs	r1, r1
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	4690      	mov	r8, r2
 80009ec:	2000      	movs	r0, #0
 80009ee:	e785      	b.n	80008fc <__aeabi_fdiv+0x50>
 80009f0:	21ff      	movs	r1, #255	; 0xff
 80009f2:	2003      	movs	r0, #3
 80009f4:	e782      	b.n	80008fc <__aeabi_fdiv+0x50>
 80009f6:	001e      	movs	r6, r3
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	2500      	movs	r5, #0
 80009fc:	e7b5      	b.n	800096a <__aeabi_fdiv+0xbe>
 80009fe:	2301      	movs	r3, #1
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dcaf      	bgt.n	8000966 <__aeabi_fdiv+0xba>
 8000a06:	379e      	adds	r7, #158	; 0x9e
 8000a08:	0029      	movs	r1, r5
 8000a0a:	40bd      	lsls	r5, r7
 8000a0c:	40d9      	lsrs	r1, r3
 8000a0e:	1e6a      	subs	r2, r5, #1
 8000a10:	4195      	sbcs	r5, r2
 8000a12:	430d      	orrs	r5, r1
 8000a14:	076b      	lsls	r3, r5, #29
 8000a16:	d004      	beq.n	8000a22 <__aeabi_fdiv+0x176>
 8000a18:	230f      	movs	r3, #15
 8000a1a:	402b      	ands	r3, r5
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fdiv+0x176>
 8000a20:	3504      	adds	r5, #4
 8000a22:	016b      	lsls	r3, r5, #5
 8000a24:	d544      	bpl.n	8000ab0 <__aeabi_fdiv+0x204>
 8000a26:	2001      	movs	r0, #1
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e79e      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a2c:	20ff      	movs	r0, #255	; 0xff
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e79b      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a32:	2580      	movs	r5, #128	; 0x80
 8000a34:	2600      	movs	r6, #0
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	03ed      	lsls	r5, r5, #15
 8000a3a:	e796      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4698      	mov	r8, r3
 8000a40:	2080      	movs	r0, #128	; 0x80
 8000a42:	03c0      	lsls	r0, r0, #15
 8000a44:	4205      	tst	r5, r0
 8000a46:	d009      	beq.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000a48:	4643      	mov	r3, r8
 8000a4a:	4203      	tst	r3, r0
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_fdiv+0x1b0>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	4305      	orrs	r5, r0
 8000a52:	026d      	lsls	r5, r5, #9
 8000a54:	0026      	movs	r6, r4
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	e786      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	03c0      	lsls	r0, r0, #15
 8000a60:	4305      	orrs	r5, r0
 8000a62:	026d      	lsls	r5, r5, #9
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	e77f      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000a6a:	4641      	mov	r1, r8
 8000a6c:	016a      	lsls	r2, r5, #5
 8000a6e:	0148      	lsls	r0, r1, #5
 8000a70:	4282      	cmp	r2, r0
 8000a72:	d219      	bcs.n	8000aa8 <__aeabi_fdiv+0x1fc>
 8000a74:	211b      	movs	r1, #27
 8000a76:	2500      	movs	r5, #0
 8000a78:	3f01      	subs	r7, #1
 8000a7a:	2601      	movs	r6, #1
 8000a7c:	0014      	movs	r4, r2
 8000a7e:	006d      	lsls	r5, r5, #1
 8000a80:	0052      	lsls	r2, r2, #1
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	db01      	blt.n	8000a8a <__aeabi_fdiv+0x1de>
 8000a86:	4290      	cmp	r0, r2
 8000a88:	d801      	bhi.n	8000a8e <__aeabi_fdiv+0x1e2>
 8000a8a:	1a12      	subs	r2, r2, r0
 8000a8c:	4335      	orrs	r5, r6
 8000a8e:	3901      	subs	r1, #1
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d1f3      	bne.n	8000a7c <__aeabi_fdiv+0x1d0>
 8000a94:	1e50      	subs	r0, r2, #1
 8000a96:	4182      	sbcs	r2, r0
 8000a98:	0038      	movs	r0, r7
 8000a9a:	307f      	adds	r0, #127	; 0x7f
 8000a9c:	001e      	movs	r6, r3
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_fdiv+0x1fa>
 8000aa4:	e74b      	b.n	800093e <__aeabi_fdiv+0x92>
 8000aa6:	e7aa      	b.n	80009fe <__aeabi_fdiv+0x152>
 8000aa8:	211a      	movs	r1, #26
 8000aaa:	2501      	movs	r5, #1
 8000aac:	1a12      	subs	r2, r2, r0
 8000aae:	e7e4      	b.n	8000a7a <__aeabi_fdiv+0x1ce>
 8000ab0:	01ad      	lsls	r5, r5, #6
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	0a6d      	lsrs	r5, r5, #9
 8000ab6:	e758      	b.n	800096a <__aeabi_fdiv+0xbe>
 8000ab8:	08019be0 	.word	0x08019be0
 8000abc:	f7ffffff 	.word	0xf7ffffff
 8000ac0:	08019c20 	.word	0x08019c20

08000ac4 <__eqsf2>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0042      	lsls	r2, r0, #1
 8000ac8:	024e      	lsls	r6, r1, #9
 8000aca:	004c      	lsls	r4, r1, #1
 8000acc:	0245      	lsls	r5, r0, #9
 8000ace:	0a6d      	lsrs	r5, r5, #9
 8000ad0:	0e12      	lsrs	r2, r2, #24
 8000ad2:	0fc3      	lsrs	r3, r0, #31
 8000ad4:	0a76      	lsrs	r6, r6, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	0fc9      	lsrs	r1, r1, #31
 8000ada:	2aff      	cmp	r2, #255	; 0xff
 8000adc:	d00f      	beq.n	8000afe <__eqsf2+0x3a>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d011      	beq.n	8000b06 <__eqsf2+0x42>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	42a2      	cmp	r2, r4
 8000ae6:	d000      	beq.n	8000aea <__eqsf2+0x26>
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	42b5      	cmp	r5, r6
 8000aec:	d1fc      	bne.n	8000ae8 <__eqsf2+0x24>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d00d      	beq.n	8000b0e <__eqsf2+0x4a>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d1f8      	bne.n	8000ae8 <__eqsf2+0x24>
 8000af6:	0028      	movs	r0, r5
 8000af8:	1e45      	subs	r5, r0, #1
 8000afa:	41a8      	sbcs	r0, r5
 8000afc:	e7f4      	b.n	8000ae8 <__eqsf2+0x24>
 8000afe:	2001      	movs	r0, #1
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d1f1      	bne.n	8000ae8 <__eqsf2+0x24>
 8000b04:	e7eb      	b.n	8000ade <__eqsf2+0x1a>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d1ed      	bne.n	8000ae8 <__eqsf2+0x24>
 8000b0c:	e7e9      	b.n	8000ae2 <__eqsf2+0x1e>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7ea      	b.n	8000ae8 <__eqsf2+0x24>
 8000b12:	46c0      	nop			; (mov r8, r8)

08000b14 <__gesf2>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	0042      	lsls	r2, r0, #1
 8000b18:	0246      	lsls	r6, r0, #9
 8000b1a:	024d      	lsls	r5, r1, #9
 8000b1c:	004c      	lsls	r4, r1, #1
 8000b1e:	0fc3      	lsrs	r3, r0, #31
 8000b20:	0a76      	lsrs	r6, r6, #9
 8000b22:	0e12      	lsrs	r2, r2, #24
 8000b24:	0a6d      	lsrs	r5, r5, #9
 8000b26:	0e24      	lsrs	r4, r4, #24
 8000b28:	0fc8      	lsrs	r0, r1, #31
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d01f      	beq.n	8000b6e <__gesf2+0x5a>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d010      	beq.n	8000b54 <__gesf2+0x40>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d11f      	bne.n	8000b76 <__gesf2+0x62>
 8000b36:	4271      	negs	r1, r6
 8000b38:	4171      	adcs	r1, r6
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d101      	bne.n	8000b42 <__gesf2+0x2e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d01e      	beq.n	8000b80 <__gesf2+0x6c>
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d10e      	bne.n	8000b64 <__gesf2+0x50>
 8000b46:	4283      	cmp	r3, r0
 8000b48:	d01e      	beq.n	8000b88 <__gesf2+0x74>
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	1e58      	subs	r0, r3, #1
 8000b4e:	4008      	ands	r0, r1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d126      	bne.n	8000ba6 <__gesf2+0x92>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d1f4      	bne.n	8000b46 <__gesf2+0x32>
 8000b5c:	4271      	negs	r1, r6
 8000b5e:	4171      	adcs	r1, r6
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d0f0      	beq.n	8000b46 <__gesf2+0x32>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d1f4      	bne.n	8000b52 <__gesf2+0x3e>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	e7f1      	b.n	8000b52 <__gesf2+0x3e>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d119      	bne.n	8000ba6 <__gesf2+0x92>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d0ee      	beq.n	8000b54 <__gesf2+0x40>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1e5      	bne.n	8000b46 <__gesf2+0x32>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d1e3      	bne.n	8000b46 <__gesf2+0x32>
 8000b7e:	e7e4      	b.n	8000b4a <__gesf2+0x36>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d0e5      	beq.n	8000b52 <__gesf2+0x3e>
 8000b86:	e7e0      	b.n	8000b4a <__gesf2+0x36>
 8000b88:	42a2      	cmp	r2, r4
 8000b8a:	dc05      	bgt.n	8000b98 <__gesf2+0x84>
 8000b8c:	dbea      	blt.n	8000b64 <__gesf2+0x50>
 8000b8e:	42ae      	cmp	r6, r5
 8000b90:	d802      	bhi.n	8000b98 <__gesf2+0x84>
 8000b92:	d3e7      	bcc.n	8000b64 <__gesf2+0x50>
 8000b94:	2000      	movs	r0, #0
 8000b96:	e7dc      	b.n	8000b52 <__gesf2+0x3e>
 8000b98:	4241      	negs	r1, r0
 8000b9a:	4141      	adcs	r1, r0
 8000b9c:	4248      	negs	r0, r1
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7d5      	b.n	8000b52 <__gesf2+0x3e>
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	4240      	negs	r0, r0
 8000baa:	e7d2      	b.n	8000b52 <__gesf2+0x3e>

08000bac <__lesf2>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0246      	lsls	r6, r0, #9
 8000bb2:	024d      	lsls	r5, r1, #9
 8000bb4:	004c      	lsls	r4, r1, #1
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a76      	lsrs	r6, r6, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	0e24      	lsrs	r4, r4, #24
 8000bc0:	0fc8      	lsrs	r0, r1, #31
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d00d      	beq.n	8000be2 <__lesf2+0x36>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d00f      	beq.n	8000bea <__lesf2+0x3e>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d123      	bne.n	8000c16 <__lesf2+0x6a>
 8000bce:	4271      	negs	r1, r6
 8000bd0:	4171      	adcs	r1, r6
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d10f      	bne.n	8000bf6 <__lesf2+0x4a>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d10d      	bne.n	8000bf6 <__lesf2+0x4a>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d014      	beq.n	8000c0a <__lesf2+0x5e>
 8000be0:	e00d      	b.n	8000bfe <__lesf2+0x52>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d110      	bne.n	8000c08 <__lesf2+0x5c>
 8000be6:	2cff      	cmp	r4, #255	; 0xff
 8000be8:	d115      	bne.n	8000c16 <__lesf2+0x6a>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d10c      	bne.n	8000c08 <__lesf2+0x5c>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d103      	bne.n	8000bfa <__lesf2+0x4e>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d108      	bne.n	8000c0c <__lesf2+0x60>
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	d010      	beq.n	8000c20 <__lesf2+0x74>
 8000bfe:	2102      	movs	r1, #2
 8000c00:	1e58      	subs	r0, r3, #1
 8000c02:	4008      	ands	r0, r1
 8000c04:	3801      	subs	r0, #1
 8000c06:	e000      	b.n	8000c0a <__lesf2+0x5e>
 8000c08:	2002      	movs	r0, #2
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1fc      	bne.n	8000c0a <__lesf2+0x5e>
 8000c10:	2001      	movs	r0, #1
 8000c12:	4240      	negs	r0, r0
 8000c14:	e7f9      	b.n	8000c0a <__lesf2+0x5e>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1ef      	bne.n	8000bfa <__lesf2+0x4e>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d1ed      	bne.n	8000bfa <__lesf2+0x4e>
 8000c1e:	e7ee      	b.n	8000bfe <__lesf2+0x52>
 8000c20:	42a2      	cmp	r2, r4
 8000c22:	dc05      	bgt.n	8000c30 <__lesf2+0x84>
 8000c24:	dbf2      	blt.n	8000c0c <__lesf2+0x60>
 8000c26:	42ae      	cmp	r6, r5
 8000c28:	d802      	bhi.n	8000c30 <__lesf2+0x84>
 8000c2a:	d3ef      	bcc.n	8000c0c <__lesf2+0x60>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7ec      	b.n	8000c0a <__lesf2+0x5e>
 8000c30:	4241      	negs	r1, r0
 8000c32:	4141      	adcs	r1, r0
 8000c34:	4248      	negs	r0, r1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4008      	ands	r0, r1
 8000c3a:	3801      	subs	r0, #1
 8000c3c:	e7e5      	b.n	8000c0a <__lesf2+0x5e>
 8000c3e:	46c0      	nop			; (mov r8, r8)

08000c40 <__aeabi_fmul>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4657      	mov	r7, sl
 8000c44:	464e      	mov	r6, r9
 8000c46:	4645      	mov	r5, r8
 8000c48:	46de      	mov	lr, fp
 8000c4a:	0244      	lsls	r4, r0, #9
 8000c4c:	b5e0      	push	{r5, r6, r7, lr}
 8000c4e:	0045      	lsls	r5, r0, #1
 8000c50:	1c0f      	adds	r7, r1, #0
 8000c52:	0a64      	lsrs	r4, r4, #9
 8000c54:	0e2d      	lsrs	r5, r5, #24
 8000c56:	0fc6      	lsrs	r6, r0, #31
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d047      	beq.n	8000cec <__aeabi_fmul+0xac>
 8000c5c:	2dff      	cmp	r5, #255	; 0xff
 8000c5e:	d04d      	beq.n	8000cfc <__aeabi_fmul+0xbc>
 8000c60:	2300      	movs	r3, #0
 8000c62:	2080      	movs	r0, #128	; 0x80
 8000c64:	469a      	mov	sl, r3
 8000c66:	469b      	mov	fp, r3
 8000c68:	00e4      	lsls	r4, r4, #3
 8000c6a:	04c0      	lsls	r0, r0, #19
 8000c6c:	4304      	orrs	r4, r0
 8000c6e:	3d7f      	subs	r5, #127	; 0x7f
 8000c70:	0278      	lsls	r0, r7, #9
 8000c72:	0a43      	lsrs	r3, r0, #9
 8000c74:	4699      	mov	r9, r3
 8000c76:	007a      	lsls	r2, r7, #1
 8000c78:	0ffb      	lsrs	r3, r7, #31
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	0e12      	lsrs	r2, r2, #24
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d044      	beq.n	8000d0c <__aeabi_fmul+0xcc>
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d011      	beq.n	8000caa <__aeabi_fmul+0x6a>
 8000c86:	00d8      	lsls	r0, r3, #3
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	04db      	lsls	r3, r3, #19
 8000c8c:	4303      	orrs	r3, r0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	2000      	movs	r0, #0
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	18ad      	adds	r5, r5, r2
 8000c96:	4647      	mov	r7, r8
 8000c98:	4653      	mov	r3, sl
 8000c9a:	4077      	eors	r7, r6
 8000c9c:	1c69      	adds	r1, r5, #1
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d83f      	bhi.n	8000d22 <__aeabi_fmul+0xe2>
 8000ca2:	4a72      	ldr	r2, [pc, #456]	; (8000e6c <__aeabi_fmul+0x22c>)
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	469f      	mov	pc, r3
 8000caa:	35ff      	adds	r5, #255	; 0xff
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fmul+0x72>
 8000cb0:	e079      	b.n	8000da6 <__aeabi_fmul+0x166>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	4692      	mov	sl, r2
 8000cba:	2002      	movs	r0, #2
 8000cbc:	e7eb      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000cbe:	4647      	mov	r7, r8
 8000cc0:	464c      	mov	r4, r9
 8000cc2:	4683      	mov	fp, r0
 8000cc4:	465b      	mov	r3, fp
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d028      	beq.n	8000d1c <__aeabi_fmul+0xdc>
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_fmul+0x90>
 8000cce:	e0c6      	b.n	8000e5e <__aeabi_fmul+0x21e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d14f      	bne.n	8000d74 <__aeabi_fmul+0x134>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ff      	lsls	r7, r7, #31
 8000cdc:	4320      	orrs	r0, r4
 8000cde:	4338      	orrs	r0, r7
 8000ce0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ce2:	46bb      	mov	fp, r7
 8000ce4:	46b2      	mov	sl, r6
 8000ce6:	46a9      	mov	r9, r5
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d171      	bne.n	8000dd4 <__aeabi_fmul+0x194>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	469b      	mov	fp, r3
 8000cfa:	e7b9      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d163      	bne.n	8000dc8 <__aeabi_fmul+0x188>
 8000d00:	2308      	movs	r3, #8
 8000d02:	469a      	mov	sl, r3
 8000d04:	3b06      	subs	r3, #6
 8000d06:	25ff      	movs	r5, #255	; 0xff
 8000d08:	469b      	mov	fp, r3
 8000d0a:	e7b1      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d150      	bne.n	8000db2 <__aeabi_fmul+0x172>
 8000d10:	4652      	mov	r2, sl
 8000d12:	3301      	adds	r3, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	4692      	mov	sl, r2
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7bc      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	2400      	movs	r4, #0
 8000d20:	e7da      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000d22:	4648      	mov	r0, r9
 8000d24:	0c26      	lsrs	r6, r4, #16
 8000d26:	0424      	lsls	r4, r4, #16
 8000d28:	0c22      	lsrs	r2, r4, #16
 8000d2a:	0404      	lsls	r4, r0, #16
 8000d2c:	0c24      	lsrs	r4, r4, #16
 8000d2e:	464b      	mov	r3, r9
 8000d30:	0020      	movs	r0, r4
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	4350      	muls	r0, r2
 8000d36:	4374      	muls	r4, r6
 8000d38:	435a      	muls	r2, r3
 8000d3a:	435e      	muls	r6, r3
 8000d3c:	1912      	adds	r2, r2, r4
 8000d3e:	0c03      	lsrs	r3, r0, #16
 8000d40:	189b      	adds	r3, r3, r2
 8000d42:	429c      	cmp	r4, r3
 8000d44:	d903      	bls.n	8000d4e <__aeabi_fmul+0x10e>
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0252      	lsls	r2, r2, #9
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	4466      	add	r6, ip
 8000d4e:	0400      	lsls	r0, r0, #16
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	0c00      	lsrs	r0, r0, #16
 8000d54:	1812      	adds	r2, r2, r0
 8000d56:	0194      	lsls	r4, r2, #6
 8000d58:	1e60      	subs	r0, r4, #1
 8000d5a:	4184      	sbcs	r4, r0
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	0e92      	lsrs	r2, r2, #26
 8000d60:	199b      	adds	r3, r3, r6
 8000d62:	4314      	orrs	r4, r2
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	431c      	orrs	r4, r3
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	d572      	bpl.n	8000e52 <__aeabi_fmul+0x212>
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	0863      	lsrs	r3, r4, #1
 8000d70:	4004      	ands	r4, r0
 8000d72:	431c      	orrs	r4, r3
 8000d74:	0008      	movs	r0, r1
 8000d76:	307f      	adds	r0, #127	; 0x7f
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	dd3c      	ble.n	8000df6 <__aeabi_fmul+0x1b6>
 8000d7c:	0763      	lsls	r3, r4, #29
 8000d7e:	d004      	beq.n	8000d8a <__aeabi_fmul+0x14a>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d000      	beq.n	8000d8a <__aeabi_fmul+0x14a>
 8000d88:	3404      	adds	r4, #4
 8000d8a:	0123      	lsls	r3, r4, #4
 8000d8c:	d503      	bpl.n	8000d96 <__aeabi_fmul+0x156>
 8000d8e:	3180      	adds	r1, #128	; 0x80
 8000d90:	0008      	movs	r0, r1
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <__aeabi_fmul+0x230>)
 8000d94:	401c      	ands	r4, r3
 8000d96:	28fe      	cmp	r0, #254	; 0xfe
 8000d98:	dcc0      	bgt.n	8000d1c <__aeabi_fmul+0xdc>
 8000d9a:	01a4      	lsls	r4, r4, #6
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	b2c0      	uxtb	r0, r0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000da2:	0037      	movs	r7, r6
 8000da4:	e78e      	b.n	8000cc4 <__aeabi_fmul+0x84>
 8000da6:	4652      	mov	r2, sl
 8000da8:	2303      	movs	r3, #3
 8000daa:	431a      	orrs	r2, r3
 8000dac:	4692      	mov	sl, r2
 8000dae:	2003      	movs	r0, #3
 8000db0:	e771      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000db2:	4648      	mov	r0, r9
 8000db4:	f002 f96a 	bl	800308c <__clzsi2>
 8000db8:	464a      	mov	r2, r9
 8000dba:	1f43      	subs	r3, r0, #5
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	1a2d      	subs	r5, r5, r0
 8000dc0:	4691      	mov	r9, r2
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	3d76      	subs	r5, #118	; 0x76
 8000dc6:	e766      	b.n	8000c96 <__aeabi_fmul+0x56>
 8000dc8:	230c      	movs	r3, #12
 8000dca:	469a      	mov	sl, r3
 8000dcc:	3b09      	subs	r3, #9
 8000dce:	25ff      	movs	r5, #255	; 0xff
 8000dd0:	469b      	mov	fp, r3
 8000dd2:	e74d      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f002 f959 	bl	800308c <__clzsi2>
 8000dda:	2576      	movs	r5, #118	; 0x76
 8000ddc:	1f43      	subs	r3, r0, #5
 8000dde:	409c      	lsls	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	426d      	negs	r5, r5
 8000de4:	469a      	mov	sl, r3
 8000de6:	469b      	mov	fp, r3
 8000de8:	1a2d      	subs	r5, r5, r0
 8000dea:	e741      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000dec:	2480      	movs	r4, #128	; 0x80
 8000dee:	2700      	movs	r7, #0
 8000df0:	20ff      	movs	r0, #255	; 0xff
 8000df2:	03e4      	lsls	r4, r4, #15
 8000df4:	e770      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000df6:	2301      	movs	r3, #1
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	2b1b      	cmp	r3, #27
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_fmul+0x1c0>
 8000dfe:	e769      	b.n	8000cd4 <__aeabi_fmul+0x94>
 8000e00:	319e      	adds	r1, #158	; 0x9e
 8000e02:	0020      	movs	r0, r4
 8000e04:	408c      	lsls	r4, r1
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	1e63      	subs	r3, r4, #1
 8000e0a:	419c      	sbcs	r4, r3
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0763      	lsls	r3, r4, #29
 8000e10:	d004      	beq.n	8000e1c <__aeabi_fmul+0x1dc>
 8000e12:	230f      	movs	r3, #15
 8000e14:	4023      	ands	r3, r4
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d000      	beq.n	8000e1c <__aeabi_fmul+0x1dc>
 8000e1a:	3404      	adds	r4, #4
 8000e1c:	0163      	lsls	r3, r4, #5
 8000e1e:	d51a      	bpl.n	8000e56 <__aeabi_fmul+0x216>
 8000e20:	2001      	movs	r0, #1
 8000e22:	2400      	movs	r4, #0
 8000e24:	e758      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e26:	2080      	movs	r0, #128	; 0x80
 8000e28:	03c0      	lsls	r0, r0, #15
 8000e2a:	4204      	tst	r4, r0
 8000e2c:	d009      	beq.n	8000e42 <__aeabi_fmul+0x202>
 8000e2e:	464b      	mov	r3, r9
 8000e30:	4203      	tst	r3, r0
 8000e32:	d106      	bne.n	8000e42 <__aeabi_fmul+0x202>
 8000e34:	464c      	mov	r4, r9
 8000e36:	4304      	orrs	r4, r0
 8000e38:	0264      	lsls	r4, r4, #9
 8000e3a:	4647      	mov	r7, r8
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	0a64      	lsrs	r4, r4, #9
 8000e40:	e74a      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e42:	2080      	movs	r0, #128	; 0x80
 8000e44:	03c0      	lsls	r0, r0, #15
 8000e46:	4304      	orrs	r4, r0
 8000e48:	0264      	lsls	r4, r4, #9
 8000e4a:	0037      	movs	r7, r6
 8000e4c:	20ff      	movs	r0, #255	; 0xff
 8000e4e:	0a64      	lsrs	r4, r4, #9
 8000e50:	e742      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e52:	0029      	movs	r1, r5
 8000e54:	e78e      	b.n	8000d74 <__aeabi_fmul+0x134>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	2000      	movs	r0, #0
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	e73c      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e5e:	2080      	movs	r0, #128	; 0x80
 8000e60:	03c0      	lsls	r0, r0, #15
 8000e62:	4304      	orrs	r4, r0
 8000e64:	0264      	lsls	r4, r4, #9
 8000e66:	20ff      	movs	r0, #255	; 0xff
 8000e68:	0a64      	lsrs	r4, r4, #9
 8000e6a:	e735      	b.n	8000cd8 <__aeabi_fmul+0x98>
 8000e6c:	08019c60 	.word	0x08019c60
 8000e70:	f7ffffff 	.word	0xf7ffffff

08000e74 <__aeabi_fsub>:
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	4646      	mov	r6, r8
 8000e78:	46d6      	mov	lr, sl
 8000e7a:	464f      	mov	r7, r9
 8000e7c:	0243      	lsls	r3, r0, #9
 8000e7e:	0a5b      	lsrs	r3, r3, #9
 8000e80:	00da      	lsls	r2, r3, #3
 8000e82:	4694      	mov	ip, r2
 8000e84:	024a      	lsls	r2, r1, #9
 8000e86:	b5c0      	push	{r6, r7, lr}
 8000e88:	0044      	lsls	r4, r0, #1
 8000e8a:	0a56      	lsrs	r6, r2, #9
 8000e8c:	1c05      	adds	r5, r0, #0
 8000e8e:	46b0      	mov	r8, r6
 8000e90:	0e24      	lsrs	r4, r4, #24
 8000e92:	004e      	lsls	r6, r1, #1
 8000e94:	0992      	lsrs	r2, r2, #6
 8000e96:	001f      	movs	r7, r3
 8000e98:	0020      	movs	r0, r4
 8000e9a:	4692      	mov	sl, r2
 8000e9c:	0fed      	lsrs	r5, r5, #31
 8000e9e:	0e36      	lsrs	r6, r6, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	2eff      	cmp	r6, #255	; 0xff
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0x34>
 8000ea6:	e07f      	b.n	8000fa8 <__aeabi_fsub+0x134>
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4051      	eors	r1, r2
 8000eac:	428d      	cmp	r5, r1
 8000eae:	d051      	beq.n	8000f54 <__aeabi_fsub+0xe0>
 8000eb0:	1ba2      	subs	r2, r4, r6
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x46>
 8000eb8:	e07e      	b.n	8000fb8 <__aeabi_fsub+0x144>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0x4c>
 8000ebe:	e099      	b.n	8000ff4 <__aeabi_fsub+0x180>
 8000ec0:	2cff      	cmp	r4, #255	; 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x52>
 8000ec4:	e08c      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	4652      	mov	r2, sl
 8000eca:	04db      	lsls	r3, r3, #19
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4692      	mov	sl, r2
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2a1b      	cmp	r2, #27
 8000ed6:	dc08      	bgt.n	8000eea <__aeabi_fsub+0x76>
 8000ed8:	4653      	mov	r3, sl
 8000eda:	2120      	movs	r1, #32
 8000edc:	40d3      	lsrs	r3, r2
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	408a      	lsls	r2, r1
 8000ee4:	1e51      	subs	r1, r2, #1
 8000ee6:	418a      	sbcs	r2, r1
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	4662      	mov	r2, ip
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_fsub+0x80>
 8000ef2:	e0f3      	b.n	80010dc <__aeabi_fsub+0x268>
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	099e      	lsrs	r6, r3, #6
 8000ef8:	0030      	movs	r0, r6
 8000efa:	f002 f8c7 	bl	800308c <__clzsi2>
 8000efe:	3805      	subs	r0, #5
 8000f00:	4086      	lsls	r6, r0
 8000f02:	4284      	cmp	r4, r0
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fsub+0x94>
 8000f06:	e0f7      	b.n	80010f8 <__aeabi_fsub+0x284>
 8000f08:	0032      	movs	r2, r6
 8000f0a:	1b04      	subs	r4, r0, r4
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	3401      	adds	r4, #1
 8000f10:	40e2      	lsrs	r2, r4
 8000f12:	1b04      	subs	r4, r0, r4
 8000f14:	40a6      	lsls	r6, r4
 8000f16:	0033      	movs	r3, r6
 8000f18:	1e5e      	subs	r6, r3, #1
 8000f1a:	41b3      	sbcs	r3, r6
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	075a      	lsls	r2, r3, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0xba>
 8000f24:	220f      	movs	r2, #15
 8000f26:	401a      	ands	r2, r3
 8000f28:	2a04      	cmp	r2, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xba>
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	015a      	lsls	r2, r3, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0xc0>
 8000f32:	e0d6      	b.n	80010e2 <__aeabi_fsub+0x26e>
 8000f34:	1c62      	adds	r2, r4, #1
 8000f36:	2cfe      	cmp	r4, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0xc8>
 8000f3a:	e0da      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	0a5f      	lsrs	r7, r3, #9
 8000f40:	b2d0      	uxtb	r0, r2
 8000f42:	05c0      	lsls	r0, r0, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07ed      	lsls	r5, r5, #31
 8000f48:	4328      	orrs	r0, r5
 8000f4a:	bce0      	pop	{r5, r6, r7}
 8000f4c:	46ba      	mov	sl, r7
 8000f4e:	46b1      	mov	r9, r6
 8000f50:	46a8      	mov	r8, r5
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f54:	1ba2      	subs	r2, r4, r6
 8000f56:	4691      	mov	r9, r2
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	dd63      	ble.n	8001024 <__aeabi_fsub+0x1b0>
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0xee>
 8000f60:	e099      	b.n	8001096 <__aeabi_fsub+0x222>
 8000f62:	2cff      	cmp	r4, #255	; 0xff
 8000f64:	d03c      	beq.n	8000fe0 <__aeabi_fsub+0x16c>
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	4652      	mov	r2, sl
 8000f6a:	04db      	lsls	r3, r3, #19
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	4692      	mov	sl, r2
 8000f70:	464a      	mov	r2, r9
 8000f72:	2301      	movs	r3, #1
 8000f74:	2a1b      	cmp	r2, #27
 8000f76:	dc08      	bgt.n	8000f8a <__aeabi_fsub+0x116>
 8000f78:	4653      	mov	r3, sl
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	1a89      	subs	r1, r1, r2
 8000f80:	4652      	mov	r2, sl
 8000f82:	408a      	lsls	r2, r1
 8000f84:	1e51      	subs	r1, r2, #1
 8000f86:	418a      	sbcs	r2, r1
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	015a      	lsls	r2, r3, #5
 8000f8e:	d400      	bmi.n	8000f92 <__aeabi_fsub+0x11e>
 8000f90:	e0a4      	b.n	80010dc <__aeabi_fsub+0x268>
 8000f92:	3401      	adds	r4, #1
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x126>
 8000f98:	e0ab      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4997      	ldr	r1, [pc, #604]	; (80011fc <__aeabi_fsub+0x388>)
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	e7bb      	b.n	8000f20 <__aeabi_fsub+0xac>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d032      	beq.n	8001012 <__aeabi_fsub+0x19e>
 8000fac:	428d      	cmp	r5, r1
 8000fae:	d035      	beq.n	800101c <__aeabi_fsub+0x1a8>
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	4252      	negs	r2, r2
 8000fb4:	4691      	mov	r9, r2
 8000fb6:	44a1      	add	r9, r4
 8000fb8:	464a      	mov	r2, r9
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d051      	beq.n	8001062 <__aeabi_fsub+0x1ee>
 8000fbe:	1b30      	subs	r0, r6, r4
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x152>
 8000fc4:	e09c      	b.n	8001100 <__aeabi_fsub+0x28c>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x15a>
 8000fcc:	e0df      	b.n	800118e <__aeabi_fsub+0x31a>
 8000fce:	3801      	subs	r0, #1
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x162>
 8000fd4:	e0f7      	b.n	80011c6 <__aeabi_fsub+0x352>
 8000fd6:	2eff      	cmp	r6, #255	; 0xff
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0x168>
 8000fda:	e099      	b.n	8001110 <__aeabi_fsub+0x29c>
 8000fdc:	000d      	movs	r5, r1
 8000fde:	4643      	mov	r3, r8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x172>
 8000fe4:	e085      	b.n	80010f2 <__aeabi_fsub+0x27e>
 8000fe6:	2780      	movs	r7, #128	; 0x80
 8000fe8:	03ff      	lsls	r7, r7, #15
 8000fea:	431f      	orrs	r7, r3
 8000fec:	027f      	lsls	r7, r7, #9
 8000fee:	20ff      	movs	r0, #255	; 0xff
 8000ff0:	0a7f      	lsrs	r7, r7, #9
 8000ff2:	e7a6      	b.n	8000f42 <__aeabi_fsub+0xce>
 8000ff4:	4652      	mov	r2, sl
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d074      	beq.n	80010e4 <__aeabi_fsub+0x270>
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	4690      	mov	r8, r2
 8001000:	44c1      	add	r9, r8
 8001002:	464a      	mov	r2, r9
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x196>
 8001008:	e0c8      	b.n	800119c <__aeabi_fsub+0x328>
 800100a:	2cff      	cmp	r4, #255	; 0xff
 800100c:	d000      	beq.n	8001010 <__aeabi_fsub+0x19c>
 800100e:	e75f      	b.n	8000ed0 <__aeabi_fsub+0x5c>
 8001010:	e7e6      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8001012:	2201      	movs	r2, #1
 8001014:	4051      	eors	r1, r2
 8001016:	42a9      	cmp	r1, r5
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x1a8>
 800101a:	e749      	b.n	8000eb0 <__aeabi_fsub+0x3c>
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	4252      	negs	r2, r2
 8001020:	4691      	mov	r9, r2
 8001022:	44a1      	add	r9, r4
 8001024:	464a      	mov	r2, r9
 8001026:	2a00      	cmp	r2, #0
 8001028:	d043      	beq.n	80010b2 <__aeabi_fsub+0x23e>
 800102a:	1b31      	subs	r1, r6, r4
 800102c:	2c00      	cmp	r4, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x1be>
 8001030:	e08c      	b.n	800114c <__aeabi_fsub+0x2d8>
 8001032:	2eff      	cmp	r6, #255	; 0xff
 8001034:	d100      	bne.n	8001038 <__aeabi_fsub+0x1c4>
 8001036:	e092      	b.n	800115e <__aeabi_fsub+0x2ea>
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	4662      	mov	r2, ip
 800103c:	04db      	lsls	r3, r3, #19
 800103e:	431a      	orrs	r2, r3
 8001040:	4694      	mov	ip, r2
 8001042:	2301      	movs	r3, #1
 8001044:	291b      	cmp	r1, #27
 8001046:	dc09      	bgt.n	800105c <__aeabi_fsub+0x1e8>
 8001048:	2020      	movs	r0, #32
 800104a:	4663      	mov	r3, ip
 800104c:	4662      	mov	r2, ip
 800104e:	40cb      	lsrs	r3, r1
 8001050:	1a41      	subs	r1, r0, r1
 8001052:	408a      	lsls	r2, r1
 8001054:	0011      	movs	r1, r2
 8001056:	1e48      	subs	r0, r1, #1
 8001058:	4181      	sbcs	r1, r0
 800105a:	430b      	orrs	r3, r1
 800105c:	0034      	movs	r4, r6
 800105e:	4453      	add	r3, sl
 8001060:	e794      	b.n	8000f8c <__aeabi_fsub+0x118>
 8001062:	22fe      	movs	r2, #254	; 0xfe
 8001064:	1c66      	adds	r6, r4, #1
 8001066:	4232      	tst	r2, r6
 8001068:	d164      	bne.n	8001134 <__aeabi_fsub+0x2c0>
 800106a:	2c00      	cmp	r4, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_fsub+0x1fc>
 800106e:	e082      	b.n	8001176 <__aeabi_fsub+0x302>
 8001070:	4663      	mov	r3, ip
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x204>
 8001076:	e0ab      	b.n	80011d0 <__aeabi_fsub+0x35c>
 8001078:	4653      	mov	r3, sl
 800107a:	2b00      	cmp	r3, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x20c>
 800107e:	e760      	b.n	8000f42 <__aeabi_fsub+0xce>
 8001080:	4663      	mov	r3, ip
 8001082:	4652      	mov	r2, sl
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	015a      	lsls	r2, r3, #5
 8001088:	d400      	bmi.n	800108c <__aeabi_fsub+0x218>
 800108a:	e0aa      	b.n	80011e2 <__aeabi_fsub+0x36e>
 800108c:	4663      	mov	r3, ip
 800108e:	4652      	mov	r2, sl
 8001090:	000d      	movs	r5, r1
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	e744      	b.n	8000f20 <__aeabi_fsub+0xac>
 8001096:	4652      	mov	r2, sl
 8001098:	2a00      	cmp	r2, #0
 800109a:	d023      	beq.n	80010e4 <__aeabi_fsub+0x270>
 800109c:	2201      	movs	r2, #1
 800109e:	4252      	negs	r2, r2
 80010a0:	4690      	mov	r8, r2
 80010a2:	44c1      	add	r9, r8
 80010a4:	464a      	mov	r2, r9
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d075      	beq.n	8001196 <__aeabi_fsub+0x322>
 80010aa:	2cff      	cmp	r4, #255	; 0xff
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x23c>
 80010ae:	e75f      	b.n	8000f70 <__aeabi_fsub+0xfc>
 80010b0:	e796      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80010b2:	26fe      	movs	r6, #254	; 0xfe
 80010b4:	3401      	adds	r4, #1
 80010b6:	4226      	tst	r6, r4
 80010b8:	d153      	bne.n	8001162 <__aeabi_fsub+0x2ee>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d172      	bne.n	80011a4 <__aeabi_fsub+0x330>
 80010be:	4663      	mov	r3, ip
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x252>
 80010c4:	e093      	b.n	80011ee <__aeabi_fsub+0x37a>
 80010c6:	4653      	mov	r3, sl
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_fsub+0x25a>
 80010cc:	e739      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010ce:	4463      	add	r3, ip
 80010d0:	2400      	movs	r4, #0
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	d502      	bpl.n	80010dc <__aeabi_fsub+0x268>
 80010d6:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <__aeabi_fsub+0x38c>)
 80010d8:	3401      	adds	r4, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	075a      	lsls	r2, r3, #29
 80010de:	d000      	beq.n	80010e2 <__aeabi_fsub+0x26e>
 80010e0:	e720      	b.n	8000f24 <__aeabi_fsub+0xb0>
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	2cff      	cmp	r4, #255	; 0xff
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x276>
 80010e8:	e77a      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80010ea:	025b      	lsls	r3, r3, #9
 80010ec:	0a5f      	lsrs	r7, r3, #9
 80010ee:	b2e0      	uxtb	r0, r4
 80010f0:	e727      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010f2:	20ff      	movs	r0, #255	; 0xff
 80010f4:	2700      	movs	r7, #0
 80010f6:	e724      	b.n	8000f42 <__aeabi_fsub+0xce>
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <__aeabi_fsub+0x38c>)
 80010fa:	1a24      	subs	r4, r4, r0
 80010fc:	4033      	ands	r3, r6
 80010fe:	e70f      	b.n	8000f20 <__aeabi_fsub+0xac>
 8001100:	2eff      	cmp	r6, #255	; 0xff
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x292>
 8001104:	e76a      	b.n	8000fdc <__aeabi_fsub+0x168>
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	4662      	mov	r2, ip
 800110a:	04db      	lsls	r3, r3, #19
 800110c:	431a      	orrs	r2, r3
 800110e:	4694      	mov	ip, r2
 8001110:	2301      	movs	r3, #1
 8001112:	281b      	cmp	r0, #27
 8001114:	dc09      	bgt.n	800112a <__aeabi_fsub+0x2b6>
 8001116:	2420      	movs	r4, #32
 8001118:	4663      	mov	r3, ip
 800111a:	4662      	mov	r2, ip
 800111c:	40c3      	lsrs	r3, r0
 800111e:	1a20      	subs	r0, r4, r0
 8001120:	4082      	lsls	r2, r0
 8001122:	0010      	movs	r0, r2
 8001124:	1e44      	subs	r4, r0, #1
 8001126:	41a0      	sbcs	r0, r4
 8001128:	4303      	orrs	r3, r0
 800112a:	4652      	mov	r2, sl
 800112c:	000d      	movs	r5, r1
 800112e:	0034      	movs	r4, r6
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	e6dc      	b.n	8000eee <__aeabi_fsub+0x7a>
 8001134:	4663      	mov	r3, ip
 8001136:	4652      	mov	r2, sl
 8001138:	1a9e      	subs	r6, r3, r2
 800113a:	0173      	lsls	r3, r6, #5
 800113c:	d417      	bmi.n	800116e <__aeabi_fsub+0x2fa>
 800113e:	2e00      	cmp	r6, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x2d0>
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_fsub+0x84>
 8001144:	2500      	movs	r5, #0
 8001146:	2000      	movs	r0, #0
 8001148:	2700      	movs	r7, #0
 800114a:	e6fa      	b.n	8000f42 <__aeabi_fsub+0xce>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d044      	beq.n	80011dc <__aeabi_fsub+0x368>
 8001152:	3901      	subs	r1, #1
 8001154:	2900      	cmp	r1, #0
 8001156:	d04c      	beq.n	80011f2 <__aeabi_fsub+0x37e>
 8001158:	2eff      	cmp	r6, #255	; 0xff
 800115a:	d000      	beq.n	800115e <__aeabi_fsub+0x2ea>
 800115c:	e771      	b.n	8001042 <__aeabi_fsub+0x1ce>
 800115e:	4643      	mov	r3, r8
 8001160:	e73e      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 8001162:	2cff      	cmp	r4, #255	; 0xff
 8001164:	d0c5      	beq.n	80010f2 <__aeabi_fsub+0x27e>
 8001166:	4652      	mov	r2, sl
 8001168:	4462      	add	r2, ip
 800116a:	0853      	lsrs	r3, r2, #1
 800116c:	e7b6      	b.n	80010dc <__aeabi_fsub+0x268>
 800116e:	4663      	mov	r3, ip
 8001170:	000d      	movs	r5, r1
 8001172:	1ad6      	subs	r6, r2, r3
 8001174:	e6c0      	b.n	8000ef8 <__aeabi_fsub+0x84>
 8001176:	4662      	mov	r2, ip
 8001178:	2a00      	cmp	r2, #0
 800117a:	d116      	bne.n	80011aa <__aeabi_fsub+0x336>
 800117c:	4653      	mov	r3, sl
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0x310>
 8001182:	e72b      	b.n	8000fdc <__aeabi_fsub+0x168>
 8001184:	2780      	movs	r7, #128	; 0x80
 8001186:	2500      	movs	r5, #0
 8001188:	20ff      	movs	r0, #255	; 0xff
 800118a:	03ff      	lsls	r7, r7, #15
 800118c:	e6d9      	b.n	8000f42 <__aeabi_fsub+0xce>
 800118e:	000d      	movs	r5, r1
 8001190:	4643      	mov	r3, r8
 8001192:	0034      	movs	r4, r6
 8001194:	e7a6      	b.n	80010e4 <__aeabi_fsub+0x270>
 8001196:	4653      	mov	r3, sl
 8001198:	4463      	add	r3, ip
 800119a:	e6f7      	b.n	8000f8c <__aeabi_fsub+0x118>
 800119c:	4663      	mov	r3, ip
 800119e:	4652      	mov	r2, sl
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	e6a4      	b.n	8000eee <__aeabi_fsub+0x7a>
 80011a4:	4662      	mov	r2, ip
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d0d9      	beq.n	800115e <__aeabi_fsub+0x2ea>
 80011aa:	4652      	mov	r2, sl
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x33e>
 80011b0:	e716      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	03d2      	lsls	r2, r2, #15
 80011b6:	4213      	tst	r3, r2
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x348>
 80011ba:	e711      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011bc:	4640      	mov	r0, r8
 80011be:	4210      	tst	r0, r2
 80011c0:	d000      	beq.n	80011c4 <__aeabi_fsub+0x350>
 80011c2:	e70d      	b.n	8000fe0 <__aeabi_fsub+0x16c>
 80011c4:	e70a      	b.n	8000fdc <__aeabi_fsub+0x168>
 80011c6:	4652      	mov	r2, sl
 80011c8:	000d      	movs	r5, r1
 80011ca:	0034      	movs	r4, r6
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	e68e      	b.n	8000eee <__aeabi_fsub+0x7a>
 80011d0:	4653      	mov	r3, sl
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <__aeabi_fsub+0x374>
 80011d6:	000d      	movs	r5, r1
 80011d8:	4647      	mov	r7, r8
 80011da:	e6b2      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011dc:	4643      	mov	r3, r8
 80011de:	0034      	movs	r4, r6
 80011e0:	e780      	b.n	80010e4 <__aeabi_fsub+0x270>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d000      	beq.n	80011e8 <__aeabi_fsub+0x374>
 80011e6:	e779      	b.n	80010dc <__aeabi_fsub+0x268>
 80011e8:	2500      	movs	r5, #0
 80011ea:	2700      	movs	r7, #0
 80011ec:	e6a9      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011ee:	4647      	mov	r7, r8
 80011f0:	e6a7      	b.n	8000f42 <__aeabi_fsub+0xce>
 80011f2:	4653      	mov	r3, sl
 80011f4:	0034      	movs	r4, r6
 80011f6:	4463      	add	r3, ip
 80011f8:	e6c8      	b.n	8000f8c <__aeabi_fsub+0x118>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	7dffffff 	.word	0x7dffffff
 8001200:	fbffffff 	.word	0xfbffffff

08001204 <__aeabi_f2iz>:
 8001204:	0241      	lsls	r1, r0, #9
 8001206:	0042      	lsls	r2, r0, #1
 8001208:	0fc3      	lsrs	r3, r0, #31
 800120a:	0a49      	lsrs	r1, r1, #9
 800120c:	2000      	movs	r0, #0
 800120e:	0e12      	lsrs	r2, r2, #24
 8001210:	2a7e      	cmp	r2, #126	; 0x7e
 8001212:	d903      	bls.n	800121c <__aeabi_f2iz+0x18>
 8001214:	2a9d      	cmp	r2, #157	; 0x9d
 8001216:	d902      	bls.n	800121e <__aeabi_f2iz+0x1a>
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <__aeabi_f2iz+0x3c>)
 800121a:	1898      	adds	r0, r3, r2
 800121c:	4770      	bx	lr
 800121e:	2080      	movs	r0, #128	; 0x80
 8001220:	0400      	lsls	r0, r0, #16
 8001222:	4301      	orrs	r1, r0
 8001224:	2a95      	cmp	r2, #149	; 0x95
 8001226:	dc07      	bgt.n	8001238 <__aeabi_f2iz+0x34>
 8001228:	2096      	movs	r0, #150	; 0x96
 800122a:	1a82      	subs	r2, r0, r2
 800122c:	40d1      	lsrs	r1, r2
 800122e:	4248      	negs	r0, r1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f3      	bne.n	800121c <__aeabi_f2iz+0x18>
 8001234:	0008      	movs	r0, r1
 8001236:	e7f1      	b.n	800121c <__aeabi_f2iz+0x18>
 8001238:	3a96      	subs	r2, #150	; 0x96
 800123a:	4091      	lsls	r1, r2
 800123c:	e7f7      	b.n	800122e <__aeabi_f2iz+0x2a>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	7fffffff 	.word	0x7fffffff

08001244 <__aeabi_ui2f>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	1e05      	subs	r5, r0, #0
 8001248:	d00e      	beq.n	8001268 <__aeabi_ui2f+0x24>
 800124a:	f001 ff1f 	bl	800308c <__clzsi2>
 800124e:	239e      	movs	r3, #158	; 0x9e
 8001250:	0004      	movs	r4, r0
 8001252:	1a1b      	subs	r3, r3, r0
 8001254:	2b96      	cmp	r3, #150	; 0x96
 8001256:	dc0c      	bgt.n	8001272 <__aeabi_ui2f+0x2e>
 8001258:	2808      	cmp	r0, #8
 800125a:	dd01      	ble.n	8001260 <__aeabi_ui2f+0x1c>
 800125c:	3c08      	subs	r4, #8
 800125e:	40a5      	lsls	r5, r4
 8001260:	026d      	lsls	r5, r5, #9
 8001262:	0a6d      	lsrs	r5, r5, #9
 8001264:	b2d8      	uxtb	r0, r3
 8001266:	e001      	b.n	800126c <__aeabi_ui2f+0x28>
 8001268:	2000      	movs	r0, #0
 800126a:	2500      	movs	r5, #0
 800126c:	05c0      	lsls	r0, r0, #23
 800126e:	4328      	orrs	r0, r5
 8001270:	bd70      	pop	{r4, r5, r6, pc}
 8001272:	2b99      	cmp	r3, #153	; 0x99
 8001274:	dd09      	ble.n	800128a <__aeabi_ui2f+0x46>
 8001276:	0002      	movs	r2, r0
 8001278:	0029      	movs	r1, r5
 800127a:	321b      	adds	r2, #27
 800127c:	4091      	lsls	r1, r2
 800127e:	1e4a      	subs	r2, r1, #1
 8001280:	4191      	sbcs	r1, r2
 8001282:	2205      	movs	r2, #5
 8001284:	1a12      	subs	r2, r2, r0
 8001286:	40d5      	lsrs	r5, r2
 8001288:	430d      	orrs	r5, r1
 800128a:	2c05      	cmp	r4, #5
 800128c:	dd01      	ble.n	8001292 <__aeabi_ui2f+0x4e>
 800128e:	1f62      	subs	r2, r4, #5
 8001290:	4095      	lsls	r5, r2
 8001292:	0029      	movs	r1, r5
 8001294:	4e08      	ldr	r6, [pc, #32]	; (80012b8 <__aeabi_ui2f+0x74>)
 8001296:	4031      	ands	r1, r6
 8001298:	076a      	lsls	r2, r5, #29
 800129a:	d009      	beq.n	80012b0 <__aeabi_ui2f+0x6c>
 800129c:	200f      	movs	r0, #15
 800129e:	4028      	ands	r0, r5
 80012a0:	2804      	cmp	r0, #4
 80012a2:	d005      	beq.n	80012b0 <__aeabi_ui2f+0x6c>
 80012a4:	3104      	adds	r1, #4
 80012a6:	014a      	lsls	r2, r1, #5
 80012a8:	d502      	bpl.n	80012b0 <__aeabi_ui2f+0x6c>
 80012aa:	239f      	movs	r3, #159	; 0x9f
 80012ac:	4031      	ands	r1, r6
 80012ae:	1b1b      	subs	r3, r3, r4
 80012b0:	0189      	lsls	r1, r1, #6
 80012b2:	0a4d      	lsrs	r5, r1, #9
 80012b4:	b2d8      	uxtb	r0, r3
 80012b6:	e7d9      	b.n	800126c <__aeabi_ui2f+0x28>
 80012b8:	fbffffff 	.word	0xfbffffff

080012bc <__aeabi_dadd>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	464f      	mov	r7, r9
 80012c0:	46d6      	mov	lr, sl
 80012c2:	4646      	mov	r6, r8
 80012c4:	000d      	movs	r5, r1
 80012c6:	0001      	movs	r1, r0
 80012c8:	0018      	movs	r0, r3
 80012ca:	b5c0      	push	{r6, r7, lr}
 80012cc:	0017      	movs	r7, r2
 80012ce:	032b      	lsls	r3, r5, #12
 80012d0:	0a5a      	lsrs	r2, r3, #9
 80012d2:	0f4b      	lsrs	r3, r1, #29
 80012d4:	4313      	orrs	r3, r2
 80012d6:	00ca      	lsls	r2, r1, #3
 80012d8:	4691      	mov	r9, r2
 80012da:	0302      	lsls	r2, r0, #12
 80012dc:	006e      	lsls	r6, r5, #1
 80012de:	0041      	lsls	r1, r0, #1
 80012e0:	0a52      	lsrs	r2, r2, #9
 80012e2:	0fec      	lsrs	r4, r5, #31
 80012e4:	0f7d      	lsrs	r5, r7, #29
 80012e6:	4315      	orrs	r5, r2
 80012e8:	0d76      	lsrs	r6, r6, #21
 80012ea:	0d49      	lsrs	r1, r1, #21
 80012ec:	0fc0      	lsrs	r0, r0, #31
 80012ee:	4682      	mov	sl, r0
 80012f0:	46ac      	mov	ip, r5
 80012f2:	00ff      	lsls	r7, r7, #3
 80012f4:	1a72      	subs	r2, r6, r1
 80012f6:	4284      	cmp	r4, r0
 80012f8:	d100      	bne.n	80012fc <__aeabi_dadd+0x40>
 80012fa:	e098      	b.n	800142e <__aeabi_dadd+0x172>
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	dc00      	bgt.n	8001302 <__aeabi_dadd+0x46>
 8001300:	e081      	b.n	8001406 <__aeabi_dadd+0x14a>
 8001302:	2900      	cmp	r1, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x4c>
 8001306:	e0b6      	b.n	8001476 <__aeabi_dadd+0x1ba>
 8001308:	49c9      	ldr	r1, [pc, #804]	; (8001630 <__aeabi_dadd+0x374>)
 800130a:	428e      	cmp	r6, r1
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x54>
 800130e:	e172      	b.n	80015f6 <__aeabi_dadd+0x33a>
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0028      	movs	r0, r5
 8001314:	0409      	lsls	r1, r1, #16
 8001316:	4308      	orrs	r0, r1
 8001318:	4684      	mov	ip, r0
 800131a:	2a38      	cmp	r2, #56	; 0x38
 800131c:	dd00      	ble.n	8001320 <__aeabi_dadd+0x64>
 800131e:	e15e      	b.n	80015de <__aeabi_dadd+0x322>
 8001320:	2a1f      	cmp	r2, #31
 8001322:	dd00      	ble.n	8001326 <__aeabi_dadd+0x6a>
 8001324:	e1ee      	b.n	8001704 <__aeabi_dadd+0x448>
 8001326:	2020      	movs	r0, #32
 8001328:	0039      	movs	r1, r7
 800132a:	4665      	mov	r5, ip
 800132c:	1a80      	subs	r0, r0, r2
 800132e:	4087      	lsls	r7, r0
 8001330:	40d1      	lsrs	r1, r2
 8001332:	4085      	lsls	r5, r0
 8001334:	430d      	orrs	r5, r1
 8001336:	0039      	movs	r1, r7
 8001338:	1e4f      	subs	r7, r1, #1
 800133a:	41b9      	sbcs	r1, r7
 800133c:	4667      	mov	r7, ip
 800133e:	40d7      	lsrs	r7, r2
 8001340:	4329      	orrs	r1, r5
 8001342:	1bdb      	subs	r3, r3, r7
 8001344:	464a      	mov	r2, r9
 8001346:	1a55      	subs	r5, r2, r1
 8001348:	45a9      	cmp	r9, r5
 800134a:	4189      	sbcs	r1, r1
 800134c:	4249      	negs	r1, r1
 800134e:	1a5b      	subs	r3, r3, r1
 8001350:	4698      	mov	r8, r3
 8001352:	4643      	mov	r3, r8
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	d400      	bmi.n	800135a <__aeabi_dadd+0x9e>
 8001358:	e0cc      	b.n	80014f4 <__aeabi_dadd+0x238>
 800135a:	4643      	mov	r3, r8
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	4698      	mov	r8, r3
 8001362:	4643      	mov	r3, r8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0xae>
 8001368:	e12c      	b.n	80015c4 <__aeabi_dadd+0x308>
 800136a:	4640      	mov	r0, r8
 800136c:	f001 fe8e 	bl	800308c <__clzsi2>
 8001370:	0001      	movs	r1, r0
 8001372:	3908      	subs	r1, #8
 8001374:	2220      	movs	r2, #32
 8001376:	0028      	movs	r0, r5
 8001378:	4643      	mov	r3, r8
 800137a:	1a52      	subs	r2, r2, r1
 800137c:	408b      	lsls	r3, r1
 800137e:	40d0      	lsrs	r0, r2
 8001380:	408d      	lsls	r5, r1
 8001382:	4303      	orrs	r3, r0
 8001384:	428e      	cmp	r6, r1
 8001386:	dd00      	ble.n	800138a <__aeabi_dadd+0xce>
 8001388:	e117      	b.n	80015ba <__aeabi_dadd+0x2fe>
 800138a:	1b8e      	subs	r6, r1, r6
 800138c:	1c72      	adds	r2, r6, #1
 800138e:	2a1f      	cmp	r2, #31
 8001390:	dd00      	ble.n	8001394 <__aeabi_dadd+0xd8>
 8001392:	e1a7      	b.n	80016e4 <__aeabi_dadd+0x428>
 8001394:	2120      	movs	r1, #32
 8001396:	0018      	movs	r0, r3
 8001398:	002e      	movs	r6, r5
 800139a:	1a89      	subs	r1, r1, r2
 800139c:	408d      	lsls	r5, r1
 800139e:	4088      	lsls	r0, r1
 80013a0:	40d6      	lsrs	r6, r2
 80013a2:	40d3      	lsrs	r3, r2
 80013a4:	1e69      	subs	r1, r5, #1
 80013a6:	418d      	sbcs	r5, r1
 80013a8:	4330      	orrs	r0, r6
 80013aa:	4698      	mov	r8, r3
 80013ac:	2600      	movs	r6, #0
 80013ae:	4305      	orrs	r5, r0
 80013b0:	076b      	lsls	r3, r5, #29
 80013b2:	d009      	beq.n	80013c8 <__aeabi_dadd+0x10c>
 80013b4:	230f      	movs	r3, #15
 80013b6:	402b      	ands	r3, r5
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d005      	beq.n	80013c8 <__aeabi_dadd+0x10c>
 80013bc:	1d2b      	adds	r3, r5, #4
 80013be:	42ab      	cmp	r3, r5
 80013c0:	41ad      	sbcs	r5, r5
 80013c2:	426d      	negs	r5, r5
 80013c4:	44a8      	add	r8, r5
 80013c6:	001d      	movs	r5, r3
 80013c8:	4643      	mov	r3, r8
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	d400      	bmi.n	80013d0 <__aeabi_dadd+0x114>
 80013ce:	e094      	b.n	80014fa <__aeabi_dadd+0x23e>
 80013d0:	4b97      	ldr	r3, [pc, #604]	; (8001630 <__aeabi_dadd+0x374>)
 80013d2:	1c72      	adds	r2, r6, #1
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x11e>
 80013d8:	e09d      	b.n	8001516 <__aeabi_dadd+0x25a>
 80013da:	4641      	mov	r1, r8
 80013dc:	4b95      	ldr	r3, [pc, #596]	; (8001634 <__aeabi_dadd+0x378>)
 80013de:	08ed      	lsrs	r5, r5, #3
 80013e0:	4019      	ands	r1, r3
 80013e2:	000b      	movs	r3, r1
 80013e4:	0552      	lsls	r2, r2, #21
 80013e6:	0749      	lsls	r1, r1, #29
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4329      	orrs	r1, r5
 80013ec:	0b1b      	lsrs	r3, r3, #12
 80013ee:	0d52      	lsrs	r2, r2, #21
 80013f0:	0512      	lsls	r2, r2, #20
 80013f2:	4313      	orrs	r3, r2
 80013f4:	07e4      	lsls	r4, r4, #31
 80013f6:	4323      	orrs	r3, r4
 80013f8:	0008      	movs	r0, r1
 80013fa:	0019      	movs	r1, r3
 80013fc:	bce0      	pop	{r5, r6, r7}
 80013fe:	46ba      	mov	sl, r7
 8001400:	46b1      	mov	r9, r6
 8001402:	46a8      	mov	r8, r5
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	2a00      	cmp	r2, #0
 8001408:	d043      	beq.n	8001492 <__aeabi_dadd+0x1d6>
 800140a:	1b8a      	subs	r2, r1, r6
 800140c:	2e00      	cmp	r6, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_dadd+0x156>
 8001410:	e12a      	b.n	8001668 <__aeabi_dadd+0x3ac>
 8001412:	464c      	mov	r4, r9
 8001414:	431c      	orrs	r4, r3
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x15e>
 8001418:	e1d1      	b.n	80017be <__aeabi_dadd+0x502>
 800141a:	1e54      	subs	r4, r2, #1
 800141c:	2a01      	cmp	r2, #1
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x166>
 8001420:	e21f      	b.n	8001862 <__aeabi_dadd+0x5a6>
 8001422:	4d83      	ldr	r5, [pc, #524]	; (8001630 <__aeabi_dadd+0x374>)
 8001424:	42aa      	cmp	r2, r5
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x16e>
 8001428:	e272      	b.n	8001910 <__aeabi_dadd+0x654>
 800142a:	0022      	movs	r2, r4
 800142c:	e123      	b.n	8001676 <__aeabi_dadd+0x3ba>
 800142e:	2a00      	cmp	r2, #0
 8001430:	dc00      	bgt.n	8001434 <__aeabi_dadd+0x178>
 8001432:	e098      	b.n	8001566 <__aeabi_dadd+0x2aa>
 8001434:	2900      	cmp	r1, #0
 8001436:	d042      	beq.n	80014be <__aeabi_dadd+0x202>
 8001438:	497d      	ldr	r1, [pc, #500]	; (8001630 <__aeabi_dadd+0x374>)
 800143a:	428e      	cmp	r6, r1
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x184>
 800143e:	e0da      	b.n	80015f6 <__aeabi_dadd+0x33a>
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0028      	movs	r0, r5
 8001444:	0409      	lsls	r1, r1, #16
 8001446:	4308      	orrs	r0, r1
 8001448:	4684      	mov	ip, r0
 800144a:	2a38      	cmp	r2, #56	; 0x38
 800144c:	dd00      	ble.n	8001450 <__aeabi_dadd+0x194>
 800144e:	e129      	b.n	80016a4 <__aeabi_dadd+0x3e8>
 8001450:	2a1f      	cmp	r2, #31
 8001452:	dc00      	bgt.n	8001456 <__aeabi_dadd+0x19a>
 8001454:	e187      	b.n	8001766 <__aeabi_dadd+0x4aa>
 8001456:	0011      	movs	r1, r2
 8001458:	4665      	mov	r5, ip
 800145a:	3920      	subs	r1, #32
 800145c:	40cd      	lsrs	r5, r1
 800145e:	2a20      	cmp	r2, #32
 8001460:	d004      	beq.n	800146c <__aeabi_dadd+0x1b0>
 8001462:	2040      	movs	r0, #64	; 0x40
 8001464:	4661      	mov	r1, ip
 8001466:	1a82      	subs	r2, r0, r2
 8001468:	4091      	lsls	r1, r2
 800146a:	430f      	orrs	r7, r1
 800146c:	0039      	movs	r1, r7
 800146e:	1e4f      	subs	r7, r1, #1
 8001470:	41b9      	sbcs	r1, r7
 8001472:	430d      	orrs	r5, r1
 8001474:	e11b      	b.n	80016ae <__aeabi_dadd+0x3f2>
 8001476:	0029      	movs	r1, r5
 8001478:	4339      	orrs	r1, r7
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x1c2>
 800147c:	e0b5      	b.n	80015ea <__aeabi_dadd+0x32e>
 800147e:	1e51      	subs	r1, r2, #1
 8001480:	2a01      	cmp	r2, #1
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1ca>
 8001484:	e1ab      	b.n	80017de <__aeabi_dadd+0x522>
 8001486:	486a      	ldr	r0, [pc, #424]	; (8001630 <__aeabi_dadd+0x374>)
 8001488:	4282      	cmp	r2, r0
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1d2>
 800148c:	e1b2      	b.n	80017f4 <__aeabi_dadd+0x538>
 800148e:	000a      	movs	r2, r1
 8001490:	e743      	b.n	800131a <__aeabi_dadd+0x5e>
 8001492:	4969      	ldr	r1, [pc, #420]	; (8001638 <__aeabi_dadd+0x37c>)
 8001494:	1c75      	adds	r5, r6, #1
 8001496:	420d      	tst	r5, r1
 8001498:	d000      	beq.n	800149c <__aeabi_dadd+0x1e0>
 800149a:	e0cf      	b.n	800163c <__aeabi_dadd+0x380>
 800149c:	2e00      	cmp	r6, #0
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x1e6>
 80014a0:	e193      	b.n	80017ca <__aeabi_dadd+0x50e>
 80014a2:	4649      	mov	r1, r9
 80014a4:	4319      	orrs	r1, r3
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x1ee>
 80014a8:	e1d1      	b.n	800184e <__aeabi_dadd+0x592>
 80014aa:	4661      	mov	r1, ip
 80014ac:	4339      	orrs	r1, r7
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x1f6>
 80014b0:	e1e3      	b.n	800187a <__aeabi_dadd+0x5be>
 80014b2:	4649      	mov	r1, r9
 80014b4:	0758      	lsls	r0, r3, #29
 80014b6:	08c9      	lsrs	r1, r1, #3
 80014b8:	4301      	orrs	r1, r0
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	e026      	b.n	800150c <__aeabi_dadd+0x250>
 80014be:	0029      	movs	r1, r5
 80014c0:	4339      	orrs	r1, r7
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x20a>
 80014c4:	e091      	b.n	80015ea <__aeabi_dadd+0x32e>
 80014c6:	1e51      	subs	r1, r2, #1
 80014c8:	2a01      	cmp	r2, #1
 80014ca:	d005      	beq.n	80014d8 <__aeabi_dadd+0x21c>
 80014cc:	4858      	ldr	r0, [pc, #352]	; (8001630 <__aeabi_dadd+0x374>)
 80014ce:	4282      	cmp	r2, r0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_dadd+0x218>
 80014d2:	e18f      	b.n	80017f4 <__aeabi_dadd+0x538>
 80014d4:	000a      	movs	r2, r1
 80014d6:	e7b8      	b.n	800144a <__aeabi_dadd+0x18e>
 80014d8:	003d      	movs	r5, r7
 80014da:	444d      	add	r5, r9
 80014dc:	454d      	cmp	r5, r9
 80014de:	4189      	sbcs	r1, r1
 80014e0:	4463      	add	r3, ip
 80014e2:	4698      	mov	r8, r3
 80014e4:	4249      	negs	r1, r1
 80014e6:	4488      	add	r8, r1
 80014e8:	4643      	mov	r3, r8
 80014ea:	2602      	movs	r6, #2
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	d500      	bpl.n	80014f2 <__aeabi_dadd+0x236>
 80014f0:	e0eb      	b.n	80016ca <__aeabi_dadd+0x40e>
 80014f2:	3e01      	subs	r6, #1
 80014f4:	076b      	lsls	r3, r5, #29
 80014f6:	d000      	beq.n	80014fa <__aeabi_dadd+0x23e>
 80014f8:	e75c      	b.n	80013b4 <__aeabi_dadd+0xf8>
 80014fa:	4643      	mov	r3, r8
 80014fc:	08e9      	lsrs	r1, r5, #3
 80014fe:	075a      	lsls	r2, r3, #29
 8001500:	4311      	orrs	r1, r2
 8001502:	0032      	movs	r2, r6
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	484a      	ldr	r0, [pc, #296]	; (8001630 <__aeabi_dadd+0x374>)
 8001508:	4282      	cmp	r2, r0
 800150a:	d021      	beq.n	8001550 <__aeabi_dadd+0x294>
 800150c:	031b      	lsls	r3, r3, #12
 800150e:	0552      	lsls	r2, r2, #21
 8001510:	0b1b      	lsrs	r3, r3, #12
 8001512:	0d52      	lsrs	r2, r2, #21
 8001514:	e76c      	b.n	80013f0 <__aeabi_dadd+0x134>
 8001516:	2300      	movs	r3, #0
 8001518:	2100      	movs	r1, #0
 800151a:	e769      	b.n	80013f0 <__aeabi_dadd+0x134>
 800151c:	002a      	movs	r2, r5
 800151e:	433a      	orrs	r2, r7
 8001520:	d069      	beq.n	80015f6 <__aeabi_dadd+0x33a>
 8001522:	464a      	mov	r2, r9
 8001524:	0758      	lsls	r0, r3, #29
 8001526:	08d1      	lsrs	r1, r2, #3
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	031b      	lsls	r3, r3, #12
 800152e:	4308      	orrs	r0, r1
 8001530:	421a      	tst	r2, r3
 8001532:	d007      	beq.n	8001544 <__aeabi_dadd+0x288>
 8001534:	0029      	movs	r1, r5
 8001536:	08ed      	lsrs	r5, r5, #3
 8001538:	421d      	tst	r5, r3
 800153a:	d103      	bne.n	8001544 <__aeabi_dadd+0x288>
 800153c:	002a      	movs	r2, r5
 800153e:	08ff      	lsrs	r7, r7, #3
 8001540:	0748      	lsls	r0, r1, #29
 8001542:	4338      	orrs	r0, r7
 8001544:	0f43      	lsrs	r3, r0, #29
 8001546:	00c1      	lsls	r1, r0, #3
 8001548:	075b      	lsls	r3, r3, #29
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	4319      	orrs	r1, r3
 800154e:	0013      	movs	r3, r2
 8001550:	000a      	movs	r2, r1
 8001552:	431a      	orrs	r2, r3
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x29c>
 8001556:	e213      	b.n	8001980 <__aeabi_dadd+0x6c4>
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0312      	lsls	r2, r2, #12
 800155c:	4313      	orrs	r3, r2
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	4a33      	ldr	r2, [pc, #204]	; (8001630 <__aeabi_dadd+0x374>)
 8001562:	0b1b      	lsrs	r3, r3, #12
 8001564:	e744      	b.n	80013f0 <__aeabi_dadd+0x134>
 8001566:	2a00      	cmp	r2, #0
 8001568:	d04b      	beq.n	8001602 <__aeabi_dadd+0x346>
 800156a:	1b8a      	subs	r2, r1, r6
 800156c:	2e00      	cmp	r6, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x2b6>
 8001570:	e0e7      	b.n	8001742 <__aeabi_dadd+0x486>
 8001572:	482f      	ldr	r0, [pc, #188]	; (8001630 <__aeabi_dadd+0x374>)
 8001574:	4281      	cmp	r1, r0
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x2be>
 8001578:	e195      	b.n	80018a6 <__aeabi_dadd+0x5ea>
 800157a:	2080      	movs	r0, #128	; 0x80
 800157c:	0400      	lsls	r0, r0, #16
 800157e:	4303      	orrs	r3, r0
 8001580:	2a38      	cmp	r2, #56	; 0x38
 8001582:	dd00      	ble.n	8001586 <__aeabi_dadd+0x2ca>
 8001584:	e143      	b.n	800180e <__aeabi_dadd+0x552>
 8001586:	2a1f      	cmp	r2, #31
 8001588:	dd00      	ble.n	800158c <__aeabi_dadd+0x2d0>
 800158a:	e1db      	b.n	8001944 <__aeabi_dadd+0x688>
 800158c:	2020      	movs	r0, #32
 800158e:	001d      	movs	r5, r3
 8001590:	464e      	mov	r6, r9
 8001592:	1a80      	subs	r0, r0, r2
 8001594:	4085      	lsls	r5, r0
 8001596:	40d6      	lsrs	r6, r2
 8001598:	4335      	orrs	r5, r6
 800159a:	464e      	mov	r6, r9
 800159c:	4086      	lsls	r6, r0
 800159e:	0030      	movs	r0, r6
 80015a0:	40d3      	lsrs	r3, r2
 80015a2:	1e46      	subs	r6, r0, #1
 80015a4:	41b0      	sbcs	r0, r6
 80015a6:	449c      	add	ip, r3
 80015a8:	4305      	orrs	r5, r0
 80015aa:	19ed      	adds	r5, r5, r7
 80015ac:	42bd      	cmp	r5, r7
 80015ae:	419b      	sbcs	r3, r3
 80015b0:	425b      	negs	r3, r3
 80015b2:	4463      	add	r3, ip
 80015b4:	4698      	mov	r8, r3
 80015b6:	000e      	movs	r6, r1
 80015b8:	e07f      	b.n	80016ba <__aeabi_dadd+0x3fe>
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <__aeabi_dadd+0x378>)
 80015bc:	1a76      	subs	r6, r6, r1
 80015be:	4013      	ands	r3, r2
 80015c0:	4698      	mov	r8, r3
 80015c2:	e6f5      	b.n	80013b0 <__aeabi_dadd+0xf4>
 80015c4:	0028      	movs	r0, r5
 80015c6:	f001 fd61 	bl	800308c <__clzsi2>
 80015ca:	0001      	movs	r1, r0
 80015cc:	3118      	adds	r1, #24
 80015ce:	291f      	cmp	r1, #31
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dadd+0x318>
 80015d2:	e6cf      	b.n	8001374 <__aeabi_dadd+0xb8>
 80015d4:	002b      	movs	r3, r5
 80015d6:	3808      	subs	r0, #8
 80015d8:	4083      	lsls	r3, r0
 80015da:	2500      	movs	r5, #0
 80015dc:	e6d2      	b.n	8001384 <__aeabi_dadd+0xc8>
 80015de:	4662      	mov	r2, ip
 80015e0:	433a      	orrs	r2, r7
 80015e2:	0011      	movs	r1, r2
 80015e4:	1e4f      	subs	r7, r1, #1
 80015e6:	41b9      	sbcs	r1, r7
 80015e8:	e6ac      	b.n	8001344 <__aeabi_dadd+0x88>
 80015ea:	4649      	mov	r1, r9
 80015ec:	0758      	lsls	r0, r3, #29
 80015ee:	08c9      	lsrs	r1, r1, #3
 80015f0:	4301      	orrs	r1, r0
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	e787      	b.n	8001506 <__aeabi_dadd+0x24a>
 80015f6:	4649      	mov	r1, r9
 80015f8:	075a      	lsls	r2, r3, #29
 80015fa:	08c9      	lsrs	r1, r1, #3
 80015fc:	4311      	orrs	r1, r2
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	e7a6      	b.n	8001550 <__aeabi_dadd+0x294>
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <__aeabi_dadd+0x37c>)
 8001604:	1c70      	adds	r0, r6, #1
 8001606:	4208      	tst	r0, r1
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x350>
 800160a:	e0bb      	b.n	8001784 <__aeabi_dadd+0x4c8>
 800160c:	2e00      	cmp	r6, #0
 800160e:	d000      	beq.n	8001612 <__aeabi_dadd+0x356>
 8001610:	e114      	b.n	800183c <__aeabi_dadd+0x580>
 8001612:	4649      	mov	r1, r9
 8001614:	4319      	orrs	r1, r3
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x35e>
 8001618:	e175      	b.n	8001906 <__aeabi_dadd+0x64a>
 800161a:	0029      	movs	r1, r5
 800161c:	4339      	orrs	r1, r7
 800161e:	d000      	beq.n	8001622 <__aeabi_dadd+0x366>
 8001620:	e17e      	b.n	8001920 <__aeabi_dadd+0x664>
 8001622:	4649      	mov	r1, r9
 8001624:	0758      	lsls	r0, r3, #29
 8001626:	08c9      	lsrs	r1, r1, #3
 8001628:	4301      	orrs	r1, r0
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	e76e      	b.n	800150c <__aeabi_dadd+0x250>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	000007ff 	.word	0x000007ff
 8001634:	ff7fffff 	.word	0xff7fffff
 8001638:	000007fe 	.word	0x000007fe
 800163c:	4649      	mov	r1, r9
 800163e:	1bcd      	subs	r5, r1, r7
 8001640:	4661      	mov	r1, ip
 8001642:	1a58      	subs	r0, r3, r1
 8001644:	45a9      	cmp	r9, r5
 8001646:	4189      	sbcs	r1, r1
 8001648:	4249      	negs	r1, r1
 800164a:	4688      	mov	r8, r1
 800164c:	0001      	movs	r1, r0
 800164e:	4640      	mov	r0, r8
 8001650:	1a09      	subs	r1, r1, r0
 8001652:	4688      	mov	r8, r1
 8001654:	0209      	lsls	r1, r1, #8
 8001656:	d500      	bpl.n	800165a <__aeabi_dadd+0x39e>
 8001658:	e0a6      	b.n	80017a8 <__aeabi_dadd+0x4ec>
 800165a:	4641      	mov	r1, r8
 800165c:	4329      	orrs	r1, r5
 800165e:	d000      	beq.n	8001662 <__aeabi_dadd+0x3a6>
 8001660:	e67f      	b.n	8001362 <__aeabi_dadd+0xa6>
 8001662:	2300      	movs	r3, #0
 8001664:	2400      	movs	r4, #0
 8001666:	e751      	b.n	800150c <__aeabi_dadd+0x250>
 8001668:	4cc7      	ldr	r4, [pc, #796]	; (8001988 <__aeabi_dadd+0x6cc>)
 800166a:	42a1      	cmp	r1, r4
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x3b4>
 800166e:	e0c7      	b.n	8001800 <__aeabi_dadd+0x544>
 8001670:	2480      	movs	r4, #128	; 0x80
 8001672:	0424      	lsls	r4, r4, #16
 8001674:	4323      	orrs	r3, r4
 8001676:	2a38      	cmp	r2, #56	; 0x38
 8001678:	dc54      	bgt.n	8001724 <__aeabi_dadd+0x468>
 800167a:	2a1f      	cmp	r2, #31
 800167c:	dd00      	ble.n	8001680 <__aeabi_dadd+0x3c4>
 800167e:	e0cc      	b.n	800181a <__aeabi_dadd+0x55e>
 8001680:	2420      	movs	r4, #32
 8001682:	4648      	mov	r0, r9
 8001684:	1aa4      	subs	r4, r4, r2
 8001686:	001d      	movs	r5, r3
 8001688:	464e      	mov	r6, r9
 800168a:	40a0      	lsls	r0, r4
 800168c:	40d6      	lsrs	r6, r2
 800168e:	40a5      	lsls	r5, r4
 8001690:	0004      	movs	r4, r0
 8001692:	40d3      	lsrs	r3, r2
 8001694:	4662      	mov	r2, ip
 8001696:	4335      	orrs	r5, r6
 8001698:	1e66      	subs	r6, r4, #1
 800169a:	41b4      	sbcs	r4, r6
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	469c      	mov	ip, r3
 80016a0:	4325      	orrs	r5, r4
 80016a2:	e044      	b.n	800172e <__aeabi_dadd+0x472>
 80016a4:	4662      	mov	r2, ip
 80016a6:	433a      	orrs	r2, r7
 80016a8:	0015      	movs	r5, r2
 80016aa:	1e6f      	subs	r7, r5, #1
 80016ac:	41bd      	sbcs	r5, r7
 80016ae:	444d      	add	r5, r9
 80016b0:	454d      	cmp	r5, r9
 80016b2:	4189      	sbcs	r1, r1
 80016b4:	4249      	negs	r1, r1
 80016b6:	4688      	mov	r8, r1
 80016b8:	4498      	add	r8, r3
 80016ba:	4643      	mov	r3, r8
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	d400      	bmi.n	80016c2 <__aeabi_dadd+0x406>
 80016c0:	e718      	b.n	80014f4 <__aeabi_dadd+0x238>
 80016c2:	4bb1      	ldr	r3, [pc, #708]	; (8001988 <__aeabi_dadd+0x6cc>)
 80016c4:	3601      	adds	r6, #1
 80016c6:	429e      	cmp	r6, r3
 80016c8:	d049      	beq.n	800175e <__aeabi_dadd+0x4a2>
 80016ca:	4642      	mov	r2, r8
 80016cc:	4baf      	ldr	r3, [pc, #700]	; (800198c <__aeabi_dadd+0x6d0>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	401a      	ands	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	086a      	lsrs	r2, r5, #1
 80016d6:	400d      	ands	r5, r1
 80016d8:	4315      	orrs	r5, r2
 80016da:	07d9      	lsls	r1, r3, #31
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	4698      	mov	r8, r3
 80016e0:	430d      	orrs	r5, r1
 80016e2:	e665      	b.n	80013b0 <__aeabi_dadd+0xf4>
 80016e4:	0018      	movs	r0, r3
 80016e6:	3e1f      	subs	r6, #31
 80016e8:	40f0      	lsrs	r0, r6
 80016ea:	2a20      	cmp	r2, #32
 80016ec:	d003      	beq.n	80016f6 <__aeabi_dadd+0x43a>
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	1a8a      	subs	r2, r1, r2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	431d      	orrs	r5, r3
 80016f6:	1e69      	subs	r1, r5, #1
 80016f8:	418d      	sbcs	r5, r1
 80016fa:	2300      	movs	r3, #0
 80016fc:	2600      	movs	r6, #0
 80016fe:	4698      	mov	r8, r3
 8001700:	4305      	orrs	r5, r0
 8001702:	e6f7      	b.n	80014f4 <__aeabi_dadd+0x238>
 8001704:	0011      	movs	r1, r2
 8001706:	4665      	mov	r5, ip
 8001708:	3920      	subs	r1, #32
 800170a:	40cd      	lsrs	r5, r1
 800170c:	2a20      	cmp	r2, #32
 800170e:	d004      	beq.n	800171a <__aeabi_dadd+0x45e>
 8001710:	2040      	movs	r0, #64	; 0x40
 8001712:	4661      	mov	r1, ip
 8001714:	1a82      	subs	r2, r0, r2
 8001716:	4091      	lsls	r1, r2
 8001718:	430f      	orrs	r7, r1
 800171a:	0039      	movs	r1, r7
 800171c:	1e4f      	subs	r7, r1, #1
 800171e:	41b9      	sbcs	r1, r7
 8001720:	4329      	orrs	r1, r5
 8001722:	e60f      	b.n	8001344 <__aeabi_dadd+0x88>
 8001724:	464a      	mov	r2, r9
 8001726:	4313      	orrs	r3, r2
 8001728:	001d      	movs	r5, r3
 800172a:	1e6b      	subs	r3, r5, #1
 800172c:	419d      	sbcs	r5, r3
 800172e:	1b7d      	subs	r5, r7, r5
 8001730:	42af      	cmp	r7, r5
 8001732:	419b      	sbcs	r3, r3
 8001734:	4662      	mov	r2, ip
 8001736:	425b      	negs	r3, r3
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	4698      	mov	r8, r3
 800173c:	4654      	mov	r4, sl
 800173e:	000e      	movs	r6, r1
 8001740:	e607      	b.n	8001352 <__aeabi_dadd+0x96>
 8001742:	4648      	mov	r0, r9
 8001744:	4318      	orrs	r0, r3
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x48e>
 8001748:	e0b3      	b.n	80018b2 <__aeabi_dadd+0x5f6>
 800174a:	1e50      	subs	r0, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x496>
 8001750:	e10d      	b.n	800196e <__aeabi_dadd+0x6b2>
 8001752:	4d8d      	ldr	r5, [pc, #564]	; (8001988 <__aeabi_dadd+0x6cc>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x49e>
 8001758:	e0a5      	b.n	80018a6 <__aeabi_dadd+0x5ea>
 800175a:	0002      	movs	r2, r0
 800175c:	e710      	b.n	8001580 <__aeabi_dadd+0x2c4>
 800175e:	0032      	movs	r2, r6
 8001760:	2300      	movs	r3, #0
 8001762:	2100      	movs	r1, #0
 8001764:	e644      	b.n	80013f0 <__aeabi_dadd+0x134>
 8001766:	2120      	movs	r1, #32
 8001768:	0038      	movs	r0, r7
 800176a:	1a89      	subs	r1, r1, r2
 800176c:	4665      	mov	r5, ip
 800176e:	408f      	lsls	r7, r1
 8001770:	408d      	lsls	r5, r1
 8001772:	40d0      	lsrs	r0, r2
 8001774:	1e79      	subs	r1, r7, #1
 8001776:	418f      	sbcs	r7, r1
 8001778:	4305      	orrs	r5, r0
 800177a:	433d      	orrs	r5, r7
 800177c:	4667      	mov	r7, ip
 800177e:	40d7      	lsrs	r7, r2
 8001780:	19db      	adds	r3, r3, r7
 8001782:	e794      	b.n	80016ae <__aeabi_dadd+0x3f2>
 8001784:	4a80      	ldr	r2, [pc, #512]	; (8001988 <__aeabi_dadd+0x6cc>)
 8001786:	4290      	cmp	r0, r2
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x4d0>
 800178a:	e0ec      	b.n	8001966 <__aeabi_dadd+0x6aa>
 800178c:	0039      	movs	r1, r7
 800178e:	4449      	add	r1, r9
 8001790:	4549      	cmp	r1, r9
 8001792:	4192      	sbcs	r2, r2
 8001794:	4463      	add	r3, ip
 8001796:	4252      	negs	r2, r2
 8001798:	189b      	adds	r3, r3, r2
 800179a:	07dd      	lsls	r5, r3, #31
 800179c:	0849      	lsrs	r1, r1, #1
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	4698      	mov	r8, r3
 80017a2:	0006      	movs	r6, r0
 80017a4:	430d      	orrs	r5, r1
 80017a6:	e6a5      	b.n	80014f4 <__aeabi_dadd+0x238>
 80017a8:	464a      	mov	r2, r9
 80017aa:	1abd      	subs	r5, r7, r2
 80017ac:	42af      	cmp	r7, r5
 80017ae:	4189      	sbcs	r1, r1
 80017b0:	4662      	mov	r2, ip
 80017b2:	4249      	negs	r1, r1
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	1a5b      	subs	r3, r3, r1
 80017b8:	4698      	mov	r8, r3
 80017ba:	4654      	mov	r4, sl
 80017bc:	e5d1      	b.n	8001362 <__aeabi_dadd+0xa6>
 80017be:	076c      	lsls	r4, r5, #29
 80017c0:	08f9      	lsrs	r1, r7, #3
 80017c2:	4321      	orrs	r1, r4
 80017c4:	08eb      	lsrs	r3, r5, #3
 80017c6:	0004      	movs	r4, r0
 80017c8:	e69d      	b.n	8001506 <__aeabi_dadd+0x24a>
 80017ca:	464a      	mov	r2, r9
 80017cc:	431a      	orrs	r2, r3
 80017ce:	d175      	bne.n	80018bc <__aeabi_dadd+0x600>
 80017d0:	4661      	mov	r1, ip
 80017d2:	4339      	orrs	r1, r7
 80017d4:	d114      	bne.n	8001800 <__aeabi_dadd+0x544>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	2400      	movs	r4, #0
 80017da:	031b      	lsls	r3, r3, #12
 80017dc:	e6bc      	b.n	8001558 <__aeabi_dadd+0x29c>
 80017de:	464a      	mov	r2, r9
 80017e0:	1bd5      	subs	r5, r2, r7
 80017e2:	45a9      	cmp	r9, r5
 80017e4:	4189      	sbcs	r1, r1
 80017e6:	4662      	mov	r2, ip
 80017e8:	4249      	negs	r1, r1
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	1a5b      	subs	r3, r3, r1
 80017ee:	4698      	mov	r8, r3
 80017f0:	2601      	movs	r6, #1
 80017f2:	e5ae      	b.n	8001352 <__aeabi_dadd+0x96>
 80017f4:	464a      	mov	r2, r9
 80017f6:	08d1      	lsrs	r1, r2, #3
 80017f8:	075a      	lsls	r2, r3, #29
 80017fa:	4311      	orrs	r1, r2
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	e6a7      	b.n	8001550 <__aeabi_dadd+0x294>
 8001800:	4663      	mov	r3, ip
 8001802:	08f9      	lsrs	r1, r7, #3
 8001804:	075a      	lsls	r2, r3, #29
 8001806:	4654      	mov	r4, sl
 8001808:	4311      	orrs	r1, r2
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	e6a0      	b.n	8001550 <__aeabi_dadd+0x294>
 800180e:	464a      	mov	r2, r9
 8001810:	4313      	orrs	r3, r2
 8001812:	001d      	movs	r5, r3
 8001814:	1e6b      	subs	r3, r5, #1
 8001816:	419d      	sbcs	r5, r3
 8001818:	e6c7      	b.n	80015aa <__aeabi_dadd+0x2ee>
 800181a:	0014      	movs	r4, r2
 800181c:	001e      	movs	r6, r3
 800181e:	3c20      	subs	r4, #32
 8001820:	40e6      	lsrs	r6, r4
 8001822:	2a20      	cmp	r2, #32
 8001824:	d005      	beq.n	8001832 <__aeabi_dadd+0x576>
 8001826:	2440      	movs	r4, #64	; 0x40
 8001828:	1aa2      	subs	r2, r4, r2
 800182a:	4093      	lsls	r3, r2
 800182c:	464a      	mov	r2, r9
 800182e:	431a      	orrs	r2, r3
 8001830:	4691      	mov	r9, r2
 8001832:	464d      	mov	r5, r9
 8001834:	1e6b      	subs	r3, r5, #1
 8001836:	419d      	sbcs	r5, r3
 8001838:	4335      	orrs	r5, r6
 800183a:	e778      	b.n	800172e <__aeabi_dadd+0x472>
 800183c:	464a      	mov	r2, r9
 800183e:	431a      	orrs	r2, r3
 8001840:	d000      	beq.n	8001844 <__aeabi_dadd+0x588>
 8001842:	e66b      	b.n	800151c <__aeabi_dadd+0x260>
 8001844:	076b      	lsls	r3, r5, #29
 8001846:	08f9      	lsrs	r1, r7, #3
 8001848:	4319      	orrs	r1, r3
 800184a:	08eb      	lsrs	r3, r5, #3
 800184c:	e680      	b.n	8001550 <__aeabi_dadd+0x294>
 800184e:	4661      	mov	r1, ip
 8001850:	4339      	orrs	r1, r7
 8001852:	d054      	beq.n	80018fe <__aeabi_dadd+0x642>
 8001854:	4663      	mov	r3, ip
 8001856:	08f9      	lsrs	r1, r7, #3
 8001858:	075c      	lsls	r4, r3, #29
 800185a:	4321      	orrs	r1, r4
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	0004      	movs	r4, r0
 8001860:	e654      	b.n	800150c <__aeabi_dadd+0x250>
 8001862:	464a      	mov	r2, r9
 8001864:	1abd      	subs	r5, r7, r2
 8001866:	42af      	cmp	r7, r5
 8001868:	4189      	sbcs	r1, r1
 800186a:	4662      	mov	r2, ip
 800186c:	4249      	negs	r1, r1
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	1a5b      	subs	r3, r3, r1
 8001872:	4698      	mov	r8, r3
 8001874:	0004      	movs	r4, r0
 8001876:	2601      	movs	r6, #1
 8001878:	e56b      	b.n	8001352 <__aeabi_dadd+0x96>
 800187a:	464a      	mov	r2, r9
 800187c:	1bd5      	subs	r5, r2, r7
 800187e:	45a9      	cmp	r9, r5
 8001880:	4189      	sbcs	r1, r1
 8001882:	4662      	mov	r2, ip
 8001884:	4249      	negs	r1, r1
 8001886:	1a9a      	subs	r2, r3, r2
 8001888:	1a52      	subs	r2, r2, r1
 800188a:	4690      	mov	r8, r2
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	d532      	bpl.n	80018f6 <__aeabi_dadd+0x63a>
 8001890:	464a      	mov	r2, r9
 8001892:	1abd      	subs	r5, r7, r2
 8001894:	42af      	cmp	r7, r5
 8001896:	4189      	sbcs	r1, r1
 8001898:	4662      	mov	r2, ip
 800189a:	4249      	negs	r1, r1
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	1a5b      	subs	r3, r3, r1
 80018a0:	4698      	mov	r8, r3
 80018a2:	0004      	movs	r4, r0
 80018a4:	e584      	b.n	80013b0 <__aeabi_dadd+0xf4>
 80018a6:	4663      	mov	r3, ip
 80018a8:	08f9      	lsrs	r1, r7, #3
 80018aa:	075a      	lsls	r2, r3, #29
 80018ac:	4311      	orrs	r1, r2
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	e64e      	b.n	8001550 <__aeabi_dadd+0x294>
 80018b2:	08f9      	lsrs	r1, r7, #3
 80018b4:	0768      	lsls	r0, r5, #29
 80018b6:	4301      	orrs	r1, r0
 80018b8:	08eb      	lsrs	r3, r5, #3
 80018ba:	e624      	b.n	8001506 <__aeabi_dadd+0x24a>
 80018bc:	4662      	mov	r2, ip
 80018be:	433a      	orrs	r2, r7
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dadd+0x608>
 80018c2:	e698      	b.n	80015f6 <__aeabi_dadd+0x33a>
 80018c4:	464a      	mov	r2, r9
 80018c6:	08d1      	lsrs	r1, r2, #3
 80018c8:	075a      	lsls	r2, r3, #29
 80018ca:	4311      	orrs	r1, r2
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	031b      	lsls	r3, r3, #12
 80018d2:	421a      	tst	r2, r3
 80018d4:	d008      	beq.n	80018e8 <__aeabi_dadd+0x62c>
 80018d6:	4660      	mov	r0, ip
 80018d8:	08c5      	lsrs	r5, r0, #3
 80018da:	421d      	tst	r5, r3
 80018dc:	d104      	bne.n	80018e8 <__aeabi_dadd+0x62c>
 80018de:	4654      	mov	r4, sl
 80018e0:	002a      	movs	r2, r5
 80018e2:	08f9      	lsrs	r1, r7, #3
 80018e4:	0743      	lsls	r3, r0, #29
 80018e6:	4319      	orrs	r1, r3
 80018e8:	0f4b      	lsrs	r3, r1, #29
 80018ea:	00c9      	lsls	r1, r1, #3
 80018ec:	075b      	lsls	r3, r3, #29
 80018ee:	08c9      	lsrs	r1, r1, #3
 80018f0:	4319      	orrs	r1, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	e62c      	b.n	8001550 <__aeabi_dadd+0x294>
 80018f6:	4641      	mov	r1, r8
 80018f8:	4329      	orrs	r1, r5
 80018fa:	d000      	beq.n	80018fe <__aeabi_dadd+0x642>
 80018fc:	e5fa      	b.n	80014f4 <__aeabi_dadd+0x238>
 80018fe:	2300      	movs	r3, #0
 8001900:	000a      	movs	r2, r1
 8001902:	2400      	movs	r4, #0
 8001904:	e602      	b.n	800150c <__aeabi_dadd+0x250>
 8001906:	076b      	lsls	r3, r5, #29
 8001908:	08f9      	lsrs	r1, r7, #3
 800190a:	4319      	orrs	r1, r3
 800190c:	08eb      	lsrs	r3, r5, #3
 800190e:	e5fd      	b.n	800150c <__aeabi_dadd+0x250>
 8001910:	4663      	mov	r3, ip
 8001912:	08f9      	lsrs	r1, r7, #3
 8001914:	075b      	lsls	r3, r3, #29
 8001916:	4319      	orrs	r1, r3
 8001918:	4663      	mov	r3, ip
 800191a:	0004      	movs	r4, r0
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	e617      	b.n	8001550 <__aeabi_dadd+0x294>
 8001920:	003d      	movs	r5, r7
 8001922:	444d      	add	r5, r9
 8001924:	4463      	add	r3, ip
 8001926:	454d      	cmp	r5, r9
 8001928:	4189      	sbcs	r1, r1
 800192a:	4698      	mov	r8, r3
 800192c:	4249      	negs	r1, r1
 800192e:	4488      	add	r8, r1
 8001930:	4643      	mov	r3, r8
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	d400      	bmi.n	8001938 <__aeabi_dadd+0x67c>
 8001936:	e5dd      	b.n	80014f4 <__aeabi_dadd+0x238>
 8001938:	4642      	mov	r2, r8
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <__aeabi_dadd+0x6d0>)
 800193c:	2601      	movs	r6, #1
 800193e:	401a      	ands	r2, r3
 8001940:	4690      	mov	r8, r2
 8001942:	e5d7      	b.n	80014f4 <__aeabi_dadd+0x238>
 8001944:	0010      	movs	r0, r2
 8001946:	001e      	movs	r6, r3
 8001948:	3820      	subs	r0, #32
 800194a:	40c6      	lsrs	r6, r0
 800194c:	2a20      	cmp	r2, #32
 800194e:	d005      	beq.n	800195c <__aeabi_dadd+0x6a0>
 8001950:	2040      	movs	r0, #64	; 0x40
 8001952:	1a82      	subs	r2, r0, r2
 8001954:	4093      	lsls	r3, r2
 8001956:	464a      	mov	r2, r9
 8001958:	431a      	orrs	r2, r3
 800195a:	4691      	mov	r9, r2
 800195c:	464d      	mov	r5, r9
 800195e:	1e6b      	subs	r3, r5, #1
 8001960:	419d      	sbcs	r5, r3
 8001962:	4335      	orrs	r5, r6
 8001964:	e621      	b.n	80015aa <__aeabi_dadd+0x2ee>
 8001966:	0002      	movs	r2, r0
 8001968:	2300      	movs	r3, #0
 800196a:	2100      	movs	r1, #0
 800196c:	e540      	b.n	80013f0 <__aeabi_dadd+0x134>
 800196e:	464a      	mov	r2, r9
 8001970:	19d5      	adds	r5, r2, r7
 8001972:	42bd      	cmp	r5, r7
 8001974:	4189      	sbcs	r1, r1
 8001976:	4463      	add	r3, ip
 8001978:	4698      	mov	r8, r3
 800197a:	4249      	negs	r1, r1
 800197c:	4488      	add	r8, r1
 800197e:	e5b3      	b.n	80014e8 <__aeabi_dadd+0x22c>
 8001980:	2100      	movs	r1, #0
 8001982:	4a01      	ldr	r2, [pc, #4]	; (8001988 <__aeabi_dadd+0x6cc>)
 8001984:	000b      	movs	r3, r1
 8001986:	e533      	b.n	80013f0 <__aeabi_dadd+0x134>
 8001988:	000007ff 	.word	0x000007ff
 800198c:	ff7fffff 	.word	0xff7fffff

08001990 <__aeabi_ddiv>:
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	4657      	mov	r7, sl
 8001994:	464e      	mov	r6, r9
 8001996:	4645      	mov	r5, r8
 8001998:	46de      	mov	lr, fp
 800199a:	b5e0      	push	{r5, r6, r7, lr}
 800199c:	4681      	mov	r9, r0
 800199e:	0005      	movs	r5, r0
 80019a0:	030c      	lsls	r4, r1, #12
 80019a2:	0048      	lsls	r0, r1, #1
 80019a4:	4692      	mov	sl, r2
 80019a6:	001f      	movs	r7, r3
 80019a8:	b085      	sub	sp, #20
 80019aa:	0b24      	lsrs	r4, r4, #12
 80019ac:	0d40      	lsrs	r0, r0, #21
 80019ae:	0fce      	lsrs	r6, r1, #31
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d059      	beq.n	8001a68 <__aeabi_ddiv+0xd8>
 80019b4:	4b87      	ldr	r3, [pc, #540]	; (8001bd4 <__aeabi_ddiv+0x244>)
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2c>
 80019ba:	e098      	b.n	8001aee <__aeabi_ddiv+0x15e>
 80019bc:	0f6b      	lsrs	r3, r5, #29
 80019be:	00e4      	lsls	r4, r4, #3
 80019c0:	431c      	orrs	r4, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	4323      	orrs	r3, r4
 80019c8:	4698      	mov	r8, r3
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <__aeabi_ddiv+0x248>)
 80019cc:	00ed      	lsls	r5, r5, #3
 80019ce:	469b      	mov	fp, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4699      	mov	r9, r3
 80019d4:	4483      	add	fp, r0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	033c      	lsls	r4, r7, #12
 80019da:	007b      	lsls	r3, r7, #1
 80019dc:	4650      	mov	r0, sl
 80019de:	0b24      	lsrs	r4, r4, #12
 80019e0:	0d5b      	lsrs	r3, r3, #21
 80019e2:	0fff      	lsrs	r7, r7, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d067      	beq.n	8001ab8 <__aeabi_ddiv+0x128>
 80019e8:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <__aeabi_ddiv+0x244>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d018      	beq.n	8001a20 <__aeabi_ddiv+0x90>
 80019ee:	497a      	ldr	r1, [pc, #488]	; (8001bd8 <__aeabi_ddiv+0x248>)
 80019f0:	0f42      	lsrs	r2, r0, #29
 80019f2:	468c      	mov	ip, r1
 80019f4:	00e4      	lsls	r4, r4, #3
 80019f6:	4659      	mov	r1, fp
 80019f8:	4314      	orrs	r4, r2
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	4463      	add	r3, ip
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	1acb      	subs	r3, r1, r3
 8001a02:	4314      	orrs	r4, r2
 8001a04:	469b      	mov	fp, r3
 8001a06:	00c2      	lsls	r2, r0, #3
 8001a08:	2000      	movs	r0, #0
 8001a0a:	0033      	movs	r3, r6
 8001a0c:	407b      	eors	r3, r7
 8001a0e:	469a      	mov	sl, r3
 8001a10:	464b      	mov	r3, r9
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	d900      	bls.n	8001a18 <__aeabi_ddiv+0x88>
 8001a16:	e0ef      	b.n	8001bf8 <__aeabi_ddiv+0x268>
 8001a18:	4970      	ldr	r1, [pc, #448]	; (8001bdc <__aeabi_ddiv+0x24c>)
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	58cb      	ldr	r3, [r1, r3]
 8001a1e:	469f      	mov	pc, r3
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <__aeabi_ddiv+0x250>)
 8001a22:	4652      	mov	r2, sl
 8001a24:	469c      	mov	ip, r3
 8001a26:	4322      	orrs	r2, r4
 8001a28:	44e3      	add	fp, ip
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_ddiv+0xa0>
 8001a2e:	e095      	b.n	8001b5c <__aeabi_ddiv+0x1cc>
 8001a30:	4649      	mov	r1, r9
 8001a32:	2302      	movs	r3, #2
 8001a34:	4319      	orrs	r1, r3
 8001a36:	4689      	mov	r9, r1
 8001a38:	2400      	movs	r4, #0
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	e7e5      	b.n	8001a0a <__aeabi_ddiv+0x7a>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2400      	movs	r4, #0
 8001a42:	2500      	movs	r5, #0
 8001a44:	4652      	mov	r2, sl
 8001a46:	051b      	lsls	r3, r3, #20
 8001a48:	4323      	orrs	r3, r4
 8001a4a:	07d2      	lsls	r2, r2, #31
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	0028      	movs	r0, r5
 8001a50:	0019      	movs	r1, r3
 8001a52:	b005      	add	sp, #20
 8001a54:	bcf0      	pop	{r4, r5, r6, r7}
 8001a56:	46bb      	mov	fp, r7
 8001a58:	46b2      	mov	sl, r6
 8001a5a:	46a9      	mov	r9, r5
 8001a5c:	46a0      	mov	r8, r4
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a60:	2400      	movs	r4, #0
 8001a62:	2500      	movs	r5, #0
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <__aeabi_ddiv+0x244>)
 8001a66:	e7ed      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001a68:	464b      	mov	r3, r9
 8001a6a:	4323      	orrs	r3, r4
 8001a6c:	4698      	mov	r8, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_ddiv+0xe2>
 8001a70:	e089      	b.n	8001b86 <__aeabi_ddiv+0x1f6>
 8001a72:	2c00      	cmp	r4, #0
 8001a74:	d100      	bne.n	8001a78 <__aeabi_ddiv+0xe8>
 8001a76:	e1e0      	b.n	8001e3a <__aeabi_ddiv+0x4aa>
 8001a78:	0020      	movs	r0, r4
 8001a7a:	f001 fb07 	bl	800308c <__clzsi2>
 8001a7e:	0001      	movs	r1, r0
 8001a80:	0002      	movs	r2, r0
 8001a82:	390b      	subs	r1, #11
 8001a84:	231d      	movs	r3, #29
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	4649      	mov	r1, r9
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	3808      	subs	r0, #8
 8001a90:	4084      	lsls	r4, r0
 8001a92:	000b      	movs	r3, r1
 8001a94:	464d      	mov	r5, r9
 8001a96:	4323      	orrs	r3, r4
 8001a98:	4698      	mov	r8, r3
 8001a9a:	4085      	lsls	r5, r0
 8001a9c:	4851      	ldr	r0, [pc, #324]	; (8001be4 <__aeabi_ddiv+0x254>)
 8001a9e:	033c      	lsls	r4, r7, #12
 8001aa0:	1a83      	subs	r3, r0, r2
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	007b      	lsls	r3, r7, #1
 8001aac:	4650      	mov	r0, sl
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	0d5b      	lsrs	r3, r3, #21
 8001ab2:	0fff      	lsrs	r7, r7, #31
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d197      	bne.n	80019e8 <__aeabi_ddiv+0x58>
 8001ab8:	4652      	mov	r2, sl
 8001aba:	4322      	orrs	r2, r4
 8001abc:	d055      	beq.n	8001b6a <__aeabi_ddiv+0x1da>
 8001abe:	2c00      	cmp	r4, #0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x134>
 8001ac2:	e1ca      	b.n	8001e5a <__aeabi_ddiv+0x4ca>
 8001ac4:	0020      	movs	r0, r4
 8001ac6:	f001 fae1 	bl	800308c <__clzsi2>
 8001aca:	0002      	movs	r2, r0
 8001acc:	3a0b      	subs	r2, #11
 8001ace:	231d      	movs	r3, #29
 8001ad0:	0001      	movs	r1, r0
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	3908      	subs	r1, #8
 8001ad8:	40da      	lsrs	r2, r3
 8001ada:	408c      	lsls	r4, r1
 8001adc:	4314      	orrs	r4, r2
 8001ade:	4652      	mov	r2, sl
 8001ae0:	408a      	lsls	r2, r1
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <__aeabi_ddiv+0x258>)
 8001ae4:	4458      	add	r0, fp
 8001ae6:	469b      	mov	fp, r3
 8001ae8:	4483      	add	fp, r0
 8001aea:	2000      	movs	r0, #0
 8001aec:	e78d      	b.n	8001a0a <__aeabi_ddiv+0x7a>
 8001aee:	464b      	mov	r3, r9
 8001af0:	4323      	orrs	r3, r4
 8001af2:	4698      	mov	r8, r3
 8001af4:	d140      	bne.n	8001b78 <__aeabi_ddiv+0x1e8>
 8001af6:	2308      	movs	r3, #8
 8001af8:	4699      	mov	r9, r3
 8001afa:	3b06      	subs	r3, #6
 8001afc:	2500      	movs	r5, #0
 8001afe:	4683      	mov	fp, r0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	e769      	b.n	80019d8 <__aeabi_ddiv+0x48>
 8001b04:	46b2      	mov	sl, r6
 8001b06:	9b00      	ldr	r3, [sp, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d0a9      	beq.n	8001a60 <__aeabi_ddiv+0xd0>
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0x182>
 8001b10:	e211      	b.n	8001f36 <__aeabi_ddiv+0x5a6>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d093      	beq.n	8001a3e <__aeabi_ddiv+0xae>
 8001b16:	4a35      	ldr	r2, [pc, #212]	; (8001bec <__aeabi_ddiv+0x25c>)
 8001b18:	445a      	add	r2, fp
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	dc00      	bgt.n	8001b20 <__aeabi_ddiv+0x190>
 8001b1e:	e13c      	b.n	8001d9a <__aeabi_ddiv+0x40a>
 8001b20:	076b      	lsls	r3, r5, #29
 8001b22:	d000      	beq.n	8001b26 <__aeabi_ddiv+0x196>
 8001b24:	e1a7      	b.n	8001e76 <__aeabi_ddiv+0x4e6>
 8001b26:	08ed      	lsrs	r5, r5, #3
 8001b28:	4643      	mov	r3, r8
 8001b2a:	01db      	lsls	r3, r3, #7
 8001b2c:	d506      	bpl.n	8001b3c <__aeabi_ddiv+0x1ac>
 8001b2e:	4642      	mov	r2, r8
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <__aeabi_ddiv+0x260>)
 8001b32:	401a      	ands	r2, r3
 8001b34:	4690      	mov	r8, r2
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	00d2      	lsls	r2, r2, #3
 8001b3a:	445a      	add	r2, fp
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <__aeabi_ddiv+0x264>)
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dc8e      	bgt.n	8001a60 <__aeabi_ddiv+0xd0>
 8001b42:	4643      	mov	r3, r8
 8001b44:	0552      	lsls	r2, r2, #21
 8001b46:	0758      	lsls	r0, r3, #29
 8001b48:	025c      	lsls	r4, r3, #9
 8001b4a:	4305      	orrs	r5, r0
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	0d53      	lsrs	r3, r2, #21
 8001b50:	e778      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001b52:	46ba      	mov	sl, r7
 8001b54:	46a0      	mov	r8, r4
 8001b56:	0015      	movs	r5, r2
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	e7d4      	b.n	8001b06 <__aeabi_ddiv+0x176>
 8001b5c:	464a      	mov	r2, r9
 8001b5e:	2303      	movs	r3, #3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	4691      	mov	r9, r2
 8001b64:	2003      	movs	r0, #3
 8001b66:	4652      	mov	r2, sl
 8001b68:	e74f      	b.n	8001a0a <__aeabi_ddiv+0x7a>
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4319      	orrs	r1, r3
 8001b70:	4689      	mov	r9, r1
 8001b72:	2400      	movs	r4, #0
 8001b74:	2001      	movs	r0, #1
 8001b76:	e748      	b.n	8001a0a <__aeabi_ddiv+0x7a>
 8001b78:	230c      	movs	r3, #12
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	3b09      	subs	r3, #9
 8001b7e:	46a0      	mov	r8, r4
 8001b80:	4683      	mov	fp, r0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	e728      	b.n	80019d8 <__aeabi_ddiv+0x48>
 8001b86:	2304      	movs	r3, #4
 8001b88:	4699      	mov	r9, r3
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	469b      	mov	fp, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	2500      	movs	r5, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	e720      	b.n	80019d8 <__aeabi_ddiv+0x48>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2480      	movs	r4, #128	; 0x80
 8001b9a:	469a      	mov	sl, r3
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <__aeabi_ddiv+0x244>)
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	e74f      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	4219      	tst	r1, r3
 8001bac:	d008      	beq.n	8001bc0 <__aeabi_ddiv+0x230>
 8001bae:	421c      	tst	r4, r3
 8001bb0:	d106      	bne.n	8001bc0 <__aeabi_ddiv+0x230>
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	46ba      	mov	sl, r7
 8001bb8:	0015      	movs	r5, r2
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <__aeabi_ddiv+0x244>)
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	e741      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001bc0:	2480      	movs	r4, #128	; 0x80
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	0324      	lsls	r4, r4, #12
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	46b2      	mov	sl, r6
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <__aeabi_ddiv+0x244>)
 8001bce:	0b24      	lsrs	r4, r4, #12
 8001bd0:	e738      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	08019ca0 	.word	0x08019ca0
 8001be0:	fffff801 	.word	0xfffff801
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	000003f3 	.word	0x000003f3
 8001bec:	000003ff 	.word	0x000003ff
 8001bf0:	feffffff 	.word	0xfeffffff
 8001bf4:	000007fe 	.word	0x000007fe
 8001bf8:	4544      	cmp	r4, r8
 8001bfa:	d200      	bcs.n	8001bfe <__aeabi_ddiv+0x26e>
 8001bfc:	e116      	b.n	8001e2c <__aeabi_ddiv+0x49c>
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_ddiv+0x272>
 8001c00:	e111      	b.n	8001e26 <__aeabi_ddiv+0x496>
 8001c02:	2301      	movs	r3, #1
 8001c04:	425b      	negs	r3, r3
 8001c06:	469c      	mov	ip, r3
 8001c08:	002e      	movs	r6, r5
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	44e3      	add	fp, ip
 8001c10:	0223      	lsls	r3, r4, #8
 8001c12:	0e14      	lsrs	r4, r2, #24
 8001c14:	431c      	orrs	r4, r3
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	4699      	mov	r9, r3
 8001c1a:	0423      	lsls	r3, r4, #16
 8001c1c:	0c1f      	lsrs	r7, r3, #16
 8001c1e:	0212      	lsls	r2, r2, #8
 8001c20:	4649      	mov	r1, r9
 8001c22:	9200      	str	r2, [sp, #0]
 8001c24:	9701      	str	r7, [sp, #4]
 8001c26:	f7fe fb19 	bl	800025c <__aeabi_uidivmod>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	437a      	muls	r2, r7
 8001c2e:	040b      	lsls	r3, r1, #16
 8001c30:	0c31      	lsrs	r1, r6, #16
 8001c32:	4680      	mov	r8, r0
 8001c34:	4319      	orrs	r1, r3
 8001c36:	428a      	cmp	r2, r1
 8001c38:	d90b      	bls.n	8001c52 <__aeabi_ddiv+0x2c2>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	469c      	mov	ip, r3
 8001c40:	1909      	adds	r1, r1, r4
 8001c42:	44e0      	add	r8, ip
 8001c44:	428c      	cmp	r4, r1
 8001c46:	d804      	bhi.n	8001c52 <__aeabi_ddiv+0x2c2>
 8001c48:	428a      	cmp	r2, r1
 8001c4a:	d902      	bls.n	8001c52 <__aeabi_ddiv+0x2c2>
 8001c4c:	1e83      	subs	r3, r0, #2
 8001c4e:	4698      	mov	r8, r3
 8001c50:	1909      	adds	r1, r1, r4
 8001c52:	1a88      	subs	r0, r1, r2
 8001c54:	4649      	mov	r1, r9
 8001c56:	f7fe fb01 	bl	800025c <__aeabi_uidivmod>
 8001c5a:	0409      	lsls	r1, r1, #16
 8001c5c:	468c      	mov	ip, r1
 8001c5e:	0431      	lsls	r1, r6, #16
 8001c60:	4666      	mov	r6, ip
 8001c62:	9a01      	ldr	r2, [sp, #4]
 8001c64:	0c09      	lsrs	r1, r1, #16
 8001c66:	4342      	muls	r2, r0
 8001c68:	0003      	movs	r3, r0
 8001c6a:	4331      	orrs	r1, r6
 8001c6c:	428a      	cmp	r2, r1
 8001c6e:	d904      	bls.n	8001c7a <__aeabi_ddiv+0x2ea>
 8001c70:	1909      	adds	r1, r1, r4
 8001c72:	3b01      	subs	r3, #1
 8001c74:	428c      	cmp	r4, r1
 8001c76:	d800      	bhi.n	8001c7a <__aeabi_ddiv+0x2ea>
 8001c78:	e111      	b.n	8001e9e <__aeabi_ddiv+0x50e>
 8001c7a:	1a89      	subs	r1, r1, r2
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	9e00      	ldr	r6, [sp, #0]
 8001c80:	0412      	lsls	r2, r2, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	0c33      	lsrs	r3, r6, #16
 8001c86:	001f      	movs	r7, r3
 8001c88:	0c10      	lsrs	r0, r2, #16
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	0413      	lsls	r3, r2, #16
 8001c90:	0432      	lsls	r2, r6, #16
 8001c92:	0c16      	lsrs	r6, r2, #16
 8001c94:	0032      	movs	r2, r6
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	435a      	muls	r2, r3
 8001c9a:	9603      	str	r6, [sp, #12]
 8001c9c:	437b      	muls	r3, r7
 8001c9e:	4346      	muls	r6, r0
 8001ca0:	4378      	muls	r0, r7
 8001ca2:	0c17      	lsrs	r7, r2, #16
 8001ca4:	46bc      	mov	ip, r7
 8001ca6:	199b      	adds	r3, r3, r6
 8001ca8:	4463      	add	r3, ip
 8001caa:	429e      	cmp	r6, r3
 8001cac:	d903      	bls.n	8001cb6 <__aeabi_ddiv+0x326>
 8001cae:	2680      	movs	r6, #128	; 0x80
 8001cb0:	0276      	lsls	r6, r6, #9
 8001cb2:	46b4      	mov	ip, r6
 8001cb4:	4460      	add	r0, ip
 8001cb6:	0c1e      	lsrs	r6, r3, #16
 8001cb8:	1830      	adds	r0, r6, r0
 8001cba:	0416      	lsls	r6, r2, #16
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	0c36      	lsrs	r6, r6, #16
 8001cc0:	199e      	adds	r6, r3, r6
 8001cc2:	4281      	cmp	r1, r0
 8001cc4:	d200      	bcs.n	8001cc8 <__aeabi_ddiv+0x338>
 8001cc6:	e09c      	b.n	8001e02 <__aeabi_ddiv+0x472>
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x33c>
 8001cca:	e097      	b.n	8001dfc <__aeabi_ddiv+0x46c>
 8001ccc:	1bae      	subs	r6, r5, r6
 8001cce:	1a09      	subs	r1, r1, r0
 8001cd0:	42b5      	cmp	r5, r6
 8001cd2:	4180      	sbcs	r0, r0
 8001cd4:	4240      	negs	r0, r0
 8001cd6:	1a08      	subs	r0, r1, r0
 8001cd8:	4284      	cmp	r4, r0
 8001cda:	d100      	bne.n	8001cde <__aeabi_ddiv+0x34e>
 8001cdc:	e111      	b.n	8001f02 <__aeabi_ddiv+0x572>
 8001cde:	4649      	mov	r1, r9
 8001ce0:	f7fe fabc 	bl	800025c <__aeabi_uidivmod>
 8001ce4:	9a01      	ldr	r2, [sp, #4]
 8001ce6:	040b      	lsls	r3, r1, #16
 8001ce8:	4342      	muls	r2, r0
 8001cea:	0c31      	lsrs	r1, r6, #16
 8001cec:	0005      	movs	r5, r0
 8001cee:	4319      	orrs	r1, r3
 8001cf0:	428a      	cmp	r2, r1
 8001cf2:	d907      	bls.n	8001d04 <__aeabi_ddiv+0x374>
 8001cf4:	1909      	adds	r1, r1, r4
 8001cf6:	3d01      	subs	r5, #1
 8001cf8:	428c      	cmp	r4, r1
 8001cfa:	d803      	bhi.n	8001d04 <__aeabi_ddiv+0x374>
 8001cfc:	428a      	cmp	r2, r1
 8001cfe:	d901      	bls.n	8001d04 <__aeabi_ddiv+0x374>
 8001d00:	1e85      	subs	r5, r0, #2
 8001d02:	1909      	adds	r1, r1, r4
 8001d04:	1a88      	subs	r0, r1, r2
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe faa8 	bl	800025c <__aeabi_uidivmod>
 8001d0c:	0409      	lsls	r1, r1, #16
 8001d0e:	468c      	mov	ip, r1
 8001d10:	0431      	lsls	r1, r6, #16
 8001d12:	4666      	mov	r6, ip
 8001d14:	9a01      	ldr	r2, [sp, #4]
 8001d16:	0c09      	lsrs	r1, r1, #16
 8001d18:	4342      	muls	r2, r0
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	4331      	orrs	r1, r6
 8001d1e:	428a      	cmp	r2, r1
 8001d20:	d907      	bls.n	8001d32 <__aeabi_ddiv+0x3a2>
 8001d22:	1909      	adds	r1, r1, r4
 8001d24:	3b01      	subs	r3, #1
 8001d26:	428c      	cmp	r4, r1
 8001d28:	d803      	bhi.n	8001d32 <__aeabi_ddiv+0x3a2>
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	d901      	bls.n	8001d32 <__aeabi_ddiv+0x3a2>
 8001d2e:	1e83      	subs	r3, r0, #2
 8001d30:	1909      	adds	r1, r1, r4
 8001d32:	9e03      	ldr	r6, [sp, #12]
 8001d34:	1a89      	subs	r1, r1, r2
 8001d36:	0032      	movs	r2, r6
 8001d38:	042d      	lsls	r5, r5, #16
 8001d3a:	431d      	orrs	r5, r3
 8001d3c:	9f02      	ldr	r7, [sp, #8]
 8001d3e:	042b      	lsls	r3, r5, #16
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	435a      	muls	r2, r3
 8001d44:	437b      	muls	r3, r7
 8001d46:	469c      	mov	ip, r3
 8001d48:	0c28      	lsrs	r0, r5, #16
 8001d4a:	4346      	muls	r6, r0
 8001d4c:	0c13      	lsrs	r3, r2, #16
 8001d4e:	44b4      	add	ip, r6
 8001d50:	4463      	add	r3, ip
 8001d52:	4378      	muls	r0, r7
 8001d54:	429e      	cmp	r6, r3
 8001d56:	d903      	bls.n	8001d60 <__aeabi_ddiv+0x3d0>
 8001d58:	2680      	movs	r6, #128	; 0x80
 8001d5a:	0276      	lsls	r6, r6, #9
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	4460      	add	r0, ip
 8001d60:	0c1e      	lsrs	r6, r3, #16
 8001d62:	0412      	lsls	r2, r2, #16
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	0c12      	lsrs	r2, r2, #16
 8001d68:	1830      	adds	r0, r6, r0
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	4281      	cmp	r1, r0
 8001d6e:	d306      	bcc.n	8001d7e <__aeabi_ddiv+0x3ee>
 8001d70:	d002      	beq.n	8001d78 <__aeabi_ddiv+0x3e8>
 8001d72:	2301      	movs	r3, #1
 8001d74:	431d      	orrs	r5, r3
 8001d76:	e6ce      	b.n	8001b16 <__aeabi_ddiv+0x186>
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0x3ee>
 8001d7c:	e6cb      	b.n	8001b16 <__aeabi_ddiv+0x186>
 8001d7e:	1861      	adds	r1, r4, r1
 8001d80:	1e6e      	subs	r6, r5, #1
 8001d82:	42a1      	cmp	r1, r4
 8001d84:	d200      	bcs.n	8001d88 <__aeabi_ddiv+0x3f8>
 8001d86:	e0a4      	b.n	8001ed2 <__aeabi_ddiv+0x542>
 8001d88:	4281      	cmp	r1, r0
 8001d8a:	d200      	bcs.n	8001d8e <__aeabi_ddiv+0x3fe>
 8001d8c:	e0c9      	b.n	8001f22 <__aeabi_ddiv+0x592>
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_ddiv+0x402>
 8001d90:	e0d9      	b.n	8001f46 <__aeabi_ddiv+0x5b6>
 8001d92:	0035      	movs	r5, r6
 8001d94:	e7ed      	b.n	8001d72 <__aeabi_ddiv+0x3e2>
 8001d96:	2501      	movs	r5, #1
 8001d98:	426d      	negs	r5, r5
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	1a89      	subs	r1, r1, r2
 8001d9e:	2938      	cmp	r1, #56	; 0x38
 8001da0:	dd00      	ble.n	8001da4 <__aeabi_ddiv+0x414>
 8001da2:	e64c      	b.n	8001a3e <__aeabi_ddiv+0xae>
 8001da4:	291f      	cmp	r1, #31
 8001da6:	dc00      	bgt.n	8001daa <__aeabi_ddiv+0x41a>
 8001da8:	e07f      	b.n	8001eaa <__aeabi_ddiv+0x51a>
 8001daa:	231f      	movs	r3, #31
 8001dac:	425b      	negs	r3, r3
 8001dae:	1a9a      	subs	r2, r3, r2
 8001db0:	4643      	mov	r3, r8
 8001db2:	40d3      	lsrs	r3, r2
 8001db4:	2920      	cmp	r1, #32
 8001db6:	d004      	beq.n	8001dc2 <__aeabi_ddiv+0x432>
 8001db8:	4644      	mov	r4, r8
 8001dba:	4a65      	ldr	r2, [pc, #404]	; (8001f50 <__aeabi_ddiv+0x5c0>)
 8001dbc:	445a      	add	r2, fp
 8001dbe:	4094      	lsls	r4, r2
 8001dc0:	4325      	orrs	r5, r4
 8001dc2:	1e6a      	subs	r2, r5, #1
 8001dc4:	4195      	sbcs	r5, r2
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	432b      	orrs	r3, r5
 8001dca:	0015      	movs	r5, r2
 8001dcc:	2400      	movs	r4, #0
 8001dce:	401d      	ands	r5, r3
 8001dd0:	421a      	tst	r2, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_ddiv+0x446>
 8001dd4:	e0a1      	b.n	8001f1a <__aeabi_ddiv+0x58a>
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	2400      	movs	r4, #0
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2a04      	cmp	r2, #4
 8001dde:	d100      	bne.n	8001de2 <__aeabi_ddiv+0x452>
 8001de0:	e098      	b.n	8001f14 <__aeabi_ddiv+0x584>
 8001de2:	1d1a      	adds	r2, r3, #4
 8001de4:	429a      	cmp	r2, r3
 8001de6:	419b      	sbcs	r3, r3
 8001de8:	425b      	negs	r3, r3
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	0222      	lsls	r2, r4, #8
 8001df0:	d400      	bmi.n	8001df4 <__aeabi_ddiv+0x464>
 8001df2:	e08f      	b.n	8001f14 <__aeabi_ddiv+0x584>
 8001df4:	2301      	movs	r3, #1
 8001df6:	2400      	movs	r4, #0
 8001df8:	2500      	movs	r5, #0
 8001dfa:	e623      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001dfc:	42b5      	cmp	r5, r6
 8001dfe:	d300      	bcc.n	8001e02 <__aeabi_ddiv+0x472>
 8001e00:	e764      	b.n	8001ccc <__aeabi_ddiv+0x33c>
 8001e02:	4643      	mov	r3, r8
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	9b00      	ldr	r3, [sp, #0]
 8001e08:	469c      	mov	ip, r3
 8001e0a:	4465      	add	r5, ip
 8001e0c:	001f      	movs	r7, r3
 8001e0e:	429d      	cmp	r5, r3
 8001e10:	419b      	sbcs	r3, r3
 8001e12:	425b      	negs	r3, r3
 8001e14:	191b      	adds	r3, r3, r4
 8001e16:	18c9      	adds	r1, r1, r3
 8001e18:	428c      	cmp	r4, r1
 8001e1a:	d23a      	bcs.n	8001e92 <__aeabi_ddiv+0x502>
 8001e1c:	4288      	cmp	r0, r1
 8001e1e:	d863      	bhi.n	8001ee8 <__aeabi_ddiv+0x558>
 8001e20:	d060      	beq.n	8001ee4 <__aeabi_ddiv+0x554>
 8001e22:	4690      	mov	r8, r2
 8001e24:	e752      	b.n	8001ccc <__aeabi_ddiv+0x33c>
 8001e26:	42aa      	cmp	r2, r5
 8001e28:	d900      	bls.n	8001e2c <__aeabi_ddiv+0x49c>
 8001e2a:	e6ea      	b.n	8001c02 <__aeabi_ddiv+0x272>
 8001e2c:	4643      	mov	r3, r8
 8001e2e:	07de      	lsls	r6, r3, #31
 8001e30:	0858      	lsrs	r0, r3, #1
 8001e32:	086b      	lsrs	r3, r5, #1
 8001e34:	431e      	orrs	r6, r3
 8001e36:	07ed      	lsls	r5, r5, #31
 8001e38:	e6ea      	b.n	8001c10 <__aeabi_ddiv+0x280>
 8001e3a:	4648      	mov	r0, r9
 8001e3c:	f001 f926 	bl	800308c <__clzsi2>
 8001e40:	0001      	movs	r1, r0
 8001e42:	0002      	movs	r2, r0
 8001e44:	3115      	adds	r1, #21
 8001e46:	3220      	adds	r2, #32
 8001e48:	291c      	cmp	r1, #28
 8001e4a:	dc00      	bgt.n	8001e4e <__aeabi_ddiv+0x4be>
 8001e4c:	e61a      	b.n	8001a84 <__aeabi_ddiv+0xf4>
 8001e4e:	464b      	mov	r3, r9
 8001e50:	3808      	subs	r0, #8
 8001e52:	4083      	lsls	r3, r0
 8001e54:	2500      	movs	r5, #0
 8001e56:	4698      	mov	r8, r3
 8001e58:	e620      	b.n	8001a9c <__aeabi_ddiv+0x10c>
 8001e5a:	f001 f917 	bl	800308c <__clzsi2>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	001a      	movs	r2, r3
 8001e62:	3215      	adds	r2, #21
 8001e64:	3020      	adds	r0, #32
 8001e66:	2a1c      	cmp	r2, #28
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_ddiv+0x4dc>
 8001e6a:	e630      	b.n	8001ace <__aeabi_ddiv+0x13e>
 8001e6c:	4654      	mov	r4, sl
 8001e6e:	3b08      	subs	r3, #8
 8001e70:	2200      	movs	r2, #0
 8001e72:	409c      	lsls	r4, r3
 8001e74:	e635      	b.n	8001ae2 <__aeabi_ddiv+0x152>
 8001e76:	230f      	movs	r3, #15
 8001e78:	402b      	ands	r3, r5
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_ddiv+0x4f0>
 8001e7e:	e652      	b.n	8001b26 <__aeabi_ddiv+0x196>
 8001e80:	2305      	movs	r3, #5
 8001e82:	425b      	negs	r3, r3
 8001e84:	42ab      	cmp	r3, r5
 8001e86:	419b      	sbcs	r3, r3
 8001e88:	3504      	adds	r5, #4
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	08ed      	lsrs	r5, r5, #3
 8001e8e:	4498      	add	r8, r3
 8001e90:	e64a      	b.n	8001b28 <__aeabi_ddiv+0x198>
 8001e92:	428c      	cmp	r4, r1
 8001e94:	d1c5      	bne.n	8001e22 <__aeabi_ddiv+0x492>
 8001e96:	42af      	cmp	r7, r5
 8001e98:	d9c0      	bls.n	8001e1c <__aeabi_ddiv+0x48c>
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	e716      	b.n	8001ccc <__aeabi_ddiv+0x33c>
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d800      	bhi.n	8001ea4 <__aeabi_ddiv+0x514>
 8001ea2:	e6ea      	b.n	8001c7a <__aeabi_ddiv+0x2ea>
 8001ea4:	1e83      	subs	r3, r0, #2
 8001ea6:	1909      	adds	r1, r1, r4
 8001ea8:	e6e7      	b.n	8001c7a <__aeabi_ddiv+0x2ea>
 8001eaa:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <__aeabi_ddiv+0x5c4>)
 8001eac:	0028      	movs	r0, r5
 8001eae:	445a      	add	r2, fp
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	4095      	lsls	r5, r2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	40c8      	lsrs	r0, r1
 8001eb8:	1e6a      	subs	r2, r5, #1
 8001eba:	4195      	sbcs	r5, r2
 8001ebc:	4644      	mov	r4, r8
 8001ebe:	4303      	orrs	r3, r0
 8001ec0:	432b      	orrs	r3, r5
 8001ec2:	40cc      	lsrs	r4, r1
 8001ec4:	075a      	lsls	r2, r3, #29
 8001ec6:	d092      	beq.n	8001dee <__aeabi_ddiv+0x45e>
 8001ec8:	220f      	movs	r2, #15
 8001eca:	401a      	ands	r2, r3
 8001ecc:	2a04      	cmp	r2, #4
 8001ece:	d188      	bne.n	8001de2 <__aeabi_ddiv+0x452>
 8001ed0:	e78d      	b.n	8001dee <__aeabi_ddiv+0x45e>
 8001ed2:	0035      	movs	r5, r6
 8001ed4:	4281      	cmp	r1, r0
 8001ed6:	d000      	beq.n	8001eda <__aeabi_ddiv+0x54a>
 8001ed8:	e74b      	b.n	8001d72 <__aeabi_ddiv+0x3e2>
 8001eda:	9a00      	ldr	r2, [sp, #0]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d000      	beq.n	8001ee2 <__aeabi_ddiv+0x552>
 8001ee0:	e747      	b.n	8001d72 <__aeabi_ddiv+0x3e2>
 8001ee2:	e618      	b.n	8001b16 <__aeabi_ddiv+0x186>
 8001ee4:	42ae      	cmp	r6, r5
 8001ee6:	d99c      	bls.n	8001e22 <__aeabi_ddiv+0x492>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	425b      	negs	r3, r3
 8001eec:	469c      	mov	ip, r3
 8001eee:	9b00      	ldr	r3, [sp, #0]
 8001ef0:	44e0      	add	r8, ip
 8001ef2:	469c      	mov	ip, r3
 8001ef4:	4465      	add	r5, ip
 8001ef6:	429d      	cmp	r5, r3
 8001ef8:	419b      	sbcs	r3, r3
 8001efa:	425b      	negs	r3, r3
 8001efc:	191b      	adds	r3, r3, r4
 8001efe:	18c9      	adds	r1, r1, r3
 8001f00:	e6e4      	b.n	8001ccc <__aeabi_ddiv+0x33c>
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <__aeabi_ddiv+0x5c8>)
 8001f04:	445a      	add	r2, fp
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	dc00      	bgt.n	8001f0c <__aeabi_ddiv+0x57c>
 8001f0a:	e744      	b.n	8001d96 <__aeabi_ddiv+0x406>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2500      	movs	r5, #0
 8001f10:	4498      	add	r8, r3
 8001f12:	e609      	b.n	8001b28 <__aeabi_ddiv+0x198>
 8001f14:	0765      	lsls	r5, r4, #29
 8001f16:	0264      	lsls	r4, r4, #9
 8001f18:	0b24      	lsrs	r4, r4, #12
 8001f1a:	08db      	lsrs	r3, r3, #3
 8001f1c:	431d      	orrs	r5, r3
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e590      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001f22:	9e00      	ldr	r6, [sp, #0]
 8001f24:	3d02      	subs	r5, #2
 8001f26:	0072      	lsls	r2, r6, #1
 8001f28:	42b2      	cmp	r2, r6
 8001f2a:	41bf      	sbcs	r7, r7
 8001f2c:	427f      	negs	r7, r7
 8001f2e:	193c      	adds	r4, r7, r4
 8001f30:	1909      	adds	r1, r1, r4
 8001f32:	9200      	str	r2, [sp, #0]
 8001f34:	e7ce      	b.n	8001ed4 <__aeabi_ddiv+0x544>
 8001f36:	2480      	movs	r4, #128	; 0x80
 8001f38:	4643      	mov	r3, r8
 8001f3a:	0324      	lsls	r4, r4, #12
 8001f3c:	431c      	orrs	r4, r3
 8001f3e:	0324      	lsls	r4, r4, #12
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <__aeabi_ddiv+0x5cc>)
 8001f42:	0b24      	lsrs	r4, r4, #12
 8001f44:	e57e      	b.n	8001a44 <__aeabi_ddiv+0xb4>
 8001f46:	9a00      	ldr	r2, [sp, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d3ea      	bcc.n	8001f22 <__aeabi_ddiv+0x592>
 8001f4c:	0035      	movs	r5, r6
 8001f4e:	e7c4      	b.n	8001eda <__aeabi_ddiv+0x54a>
 8001f50:	0000043e 	.word	0x0000043e
 8001f54:	0000041e 	.word	0x0000041e
 8001f58:	000003ff 	.word	0x000003ff
 8001f5c:	000007ff 	.word	0x000007ff

08001f60 <__eqdf2>:
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	464f      	mov	r7, r9
 8001f64:	4646      	mov	r6, r8
 8001f66:	46d6      	mov	lr, sl
 8001f68:	4694      	mov	ip, r2
 8001f6a:	4691      	mov	r9, r2
 8001f6c:	031a      	lsls	r2, r3, #12
 8001f6e:	0b12      	lsrs	r2, r2, #12
 8001f70:	4d18      	ldr	r5, [pc, #96]	; (8001fd4 <__eqdf2+0x74>)
 8001f72:	b5c0      	push	{r6, r7, lr}
 8001f74:	004c      	lsls	r4, r1, #1
 8001f76:	030f      	lsls	r7, r1, #12
 8001f78:	4692      	mov	sl, r2
 8001f7a:	005a      	lsls	r2, r3, #1
 8001f7c:	0006      	movs	r6, r0
 8001f7e:	4680      	mov	r8, r0
 8001f80:	0b3f      	lsrs	r7, r7, #12
 8001f82:	2001      	movs	r0, #1
 8001f84:	0d64      	lsrs	r4, r4, #21
 8001f86:	0fc9      	lsrs	r1, r1, #31
 8001f88:	0d52      	lsrs	r2, r2, #21
 8001f8a:	0fdb      	lsrs	r3, r3, #31
 8001f8c:	42ac      	cmp	r4, r5
 8001f8e:	d00a      	beq.n	8001fa6 <__eqdf2+0x46>
 8001f90:	42aa      	cmp	r2, r5
 8001f92:	d003      	beq.n	8001f9c <__eqdf2+0x3c>
 8001f94:	4294      	cmp	r4, r2
 8001f96:	d101      	bne.n	8001f9c <__eqdf2+0x3c>
 8001f98:	4557      	cmp	r7, sl
 8001f9a:	d00d      	beq.n	8001fb8 <__eqdf2+0x58>
 8001f9c:	bce0      	pop	{r5, r6, r7}
 8001f9e:	46ba      	mov	sl, r7
 8001fa0:	46b1      	mov	r9, r6
 8001fa2:	46a8      	mov	r8, r5
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	003d      	movs	r5, r7
 8001fa8:	4335      	orrs	r5, r6
 8001faa:	d1f7      	bne.n	8001f9c <__eqdf2+0x3c>
 8001fac:	42a2      	cmp	r2, r4
 8001fae:	d1f5      	bne.n	8001f9c <__eqdf2+0x3c>
 8001fb0:	4652      	mov	r2, sl
 8001fb2:	4665      	mov	r5, ip
 8001fb4:	432a      	orrs	r2, r5
 8001fb6:	d1f1      	bne.n	8001f9c <__eqdf2+0x3c>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	45c8      	cmp	r8, r9
 8001fbc:	d1ee      	bne.n	8001f9c <__eqdf2+0x3c>
 8001fbe:	4299      	cmp	r1, r3
 8001fc0:	d006      	beq.n	8001fd0 <__eqdf2+0x70>
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d1ea      	bne.n	8001f9c <__eqdf2+0x3c>
 8001fc6:	433e      	orrs	r6, r7
 8001fc8:	0030      	movs	r0, r6
 8001fca:	1e46      	subs	r6, r0, #1
 8001fcc:	41b0      	sbcs	r0, r6
 8001fce:	e7e5      	b.n	8001f9c <__eqdf2+0x3c>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	e7e3      	b.n	8001f9c <__eqdf2+0x3c>
 8001fd4:	000007ff 	.word	0x000007ff

08001fd8 <__gedf2>:
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	464e      	mov	r6, r9
 8001fdc:	4645      	mov	r5, r8
 8001fde:	4657      	mov	r7, sl
 8001fe0:	46de      	mov	lr, fp
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	b5e0      	push	{r5, r6, r7, lr}
 8001fe8:	0016      	movs	r6, r2
 8001fea:	031b      	lsls	r3, r3, #12
 8001fec:	0b1b      	lsrs	r3, r3, #12
 8001fee:	4d32      	ldr	r5, [pc, #200]	; (80020b8 <__gedf2+0xe0>)
 8001ff0:	030f      	lsls	r7, r1, #12
 8001ff2:	004a      	lsls	r2, r1, #1
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	0043      	lsls	r3, r0, #1
 8001ff8:	46a4      	mov	ip, r4
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	0b3f      	lsrs	r7, r7, #12
 8001ffe:	0d52      	lsrs	r2, r2, #21
 8002000:	0fc9      	lsrs	r1, r1, #31
 8002002:	0d5b      	lsrs	r3, r3, #21
 8002004:	0fc0      	lsrs	r0, r0, #31
 8002006:	42aa      	cmp	r2, r5
 8002008:	d029      	beq.n	800205e <__gedf2+0x86>
 800200a:	42ab      	cmp	r3, r5
 800200c:	d018      	beq.n	8002040 <__gedf2+0x68>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d12a      	bne.n	8002068 <__gedf2+0x90>
 8002012:	433c      	orrs	r4, r7
 8002014:	46a3      	mov	fp, r4
 8002016:	4265      	negs	r5, r4
 8002018:	4165      	adcs	r5, r4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <__gedf2+0x4c>
 800201e:	464c      	mov	r4, r9
 8002020:	4326      	orrs	r6, r4
 8002022:	d027      	beq.n	8002074 <__gedf2+0x9c>
 8002024:	2d00      	cmp	r5, #0
 8002026:	d115      	bne.n	8002054 <__gedf2+0x7c>
 8002028:	4281      	cmp	r1, r0
 800202a:	d028      	beq.n	800207e <__gedf2+0xa6>
 800202c:	2002      	movs	r0, #2
 800202e:	3901      	subs	r1, #1
 8002030:	4008      	ands	r0, r1
 8002032:	3801      	subs	r0, #1
 8002034:	bcf0      	pop	{r4, r5, r6, r7}
 8002036:	46bb      	mov	fp, r7
 8002038:	46b2      	mov	sl, r6
 800203a:	46a9      	mov	r9, r5
 800203c:	46a0      	mov	r8, r4
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002040:	464d      	mov	r5, r9
 8002042:	432e      	orrs	r6, r5
 8002044:	d12f      	bne.n	80020a6 <__gedf2+0xce>
 8002046:	2a00      	cmp	r2, #0
 8002048:	d1ee      	bne.n	8002028 <__gedf2+0x50>
 800204a:	433c      	orrs	r4, r7
 800204c:	4265      	negs	r5, r4
 800204e:	4165      	adcs	r5, r4
 8002050:	2d00      	cmp	r5, #0
 8002052:	d0e9      	beq.n	8002028 <__gedf2+0x50>
 8002054:	2800      	cmp	r0, #0
 8002056:	d1ed      	bne.n	8002034 <__gedf2+0x5c>
 8002058:	2001      	movs	r0, #1
 800205a:	4240      	negs	r0, r0
 800205c:	e7ea      	b.n	8002034 <__gedf2+0x5c>
 800205e:	003d      	movs	r5, r7
 8002060:	4325      	orrs	r5, r4
 8002062:	d120      	bne.n	80020a6 <__gedf2+0xce>
 8002064:	4293      	cmp	r3, r2
 8002066:	d0eb      	beq.n	8002040 <__gedf2+0x68>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1dd      	bne.n	8002028 <__gedf2+0x50>
 800206c:	464c      	mov	r4, r9
 800206e:	4326      	orrs	r6, r4
 8002070:	d1da      	bne.n	8002028 <__gedf2+0x50>
 8002072:	e7db      	b.n	800202c <__gedf2+0x54>
 8002074:	465b      	mov	r3, fp
 8002076:	2000      	movs	r0, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0db      	beq.n	8002034 <__gedf2+0x5c>
 800207c:	e7d6      	b.n	800202c <__gedf2+0x54>
 800207e:	429a      	cmp	r2, r3
 8002080:	dc0a      	bgt.n	8002098 <__gedf2+0xc0>
 8002082:	dbe7      	blt.n	8002054 <__gedf2+0x7c>
 8002084:	454f      	cmp	r7, r9
 8002086:	d8d1      	bhi.n	800202c <__gedf2+0x54>
 8002088:	d010      	beq.n	80020ac <__gedf2+0xd4>
 800208a:	2000      	movs	r0, #0
 800208c:	454f      	cmp	r7, r9
 800208e:	d2d1      	bcs.n	8002034 <__gedf2+0x5c>
 8002090:	2900      	cmp	r1, #0
 8002092:	d0e1      	beq.n	8002058 <__gedf2+0x80>
 8002094:	0008      	movs	r0, r1
 8002096:	e7cd      	b.n	8002034 <__gedf2+0x5c>
 8002098:	4243      	negs	r3, r0
 800209a:	4158      	adcs	r0, r3
 800209c:	2302      	movs	r3, #2
 800209e:	4240      	negs	r0, r0
 80020a0:	4018      	ands	r0, r3
 80020a2:	3801      	subs	r0, #1
 80020a4:	e7c6      	b.n	8002034 <__gedf2+0x5c>
 80020a6:	2002      	movs	r0, #2
 80020a8:	4240      	negs	r0, r0
 80020aa:	e7c3      	b.n	8002034 <__gedf2+0x5c>
 80020ac:	45c4      	cmp	ip, r8
 80020ae:	d8bd      	bhi.n	800202c <__gedf2+0x54>
 80020b0:	2000      	movs	r0, #0
 80020b2:	45c4      	cmp	ip, r8
 80020b4:	d2be      	bcs.n	8002034 <__gedf2+0x5c>
 80020b6:	e7eb      	b.n	8002090 <__gedf2+0xb8>
 80020b8:	000007ff 	.word	0x000007ff

080020bc <__ledf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	4657      	mov	r7, sl
 80020c4:	46de      	mov	lr, fp
 80020c6:	0004      	movs	r4, r0
 80020c8:	0018      	movs	r0, r3
 80020ca:	b5e0      	push	{r5, r6, r7, lr}
 80020cc:	0016      	movs	r6, r2
 80020ce:	031b      	lsls	r3, r3, #12
 80020d0:	0b1b      	lsrs	r3, r3, #12
 80020d2:	4d31      	ldr	r5, [pc, #196]	; (8002198 <__ledf2+0xdc>)
 80020d4:	030f      	lsls	r7, r1, #12
 80020d6:	004a      	lsls	r2, r1, #1
 80020d8:	4699      	mov	r9, r3
 80020da:	0043      	lsls	r3, r0, #1
 80020dc:	46a4      	mov	ip, r4
 80020de:	46b0      	mov	r8, r6
 80020e0:	0b3f      	lsrs	r7, r7, #12
 80020e2:	0d52      	lsrs	r2, r2, #21
 80020e4:	0fc9      	lsrs	r1, r1, #31
 80020e6:	0d5b      	lsrs	r3, r3, #21
 80020e8:	0fc0      	lsrs	r0, r0, #31
 80020ea:	42aa      	cmp	r2, r5
 80020ec:	d011      	beq.n	8002112 <__ledf2+0x56>
 80020ee:	42ab      	cmp	r3, r5
 80020f0:	d014      	beq.n	800211c <__ledf2+0x60>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d12f      	bne.n	8002156 <__ledf2+0x9a>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	46a3      	mov	fp, r4
 80020fa:	4265      	negs	r5, r4
 80020fc:	4165      	adcs	r5, r4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <__ledf2+0x70>
 8002102:	464c      	mov	r4, r9
 8002104:	4326      	orrs	r6, r4
 8002106:	d111      	bne.n	800212c <__ledf2+0x70>
 8002108:	465b      	mov	r3, fp
 800210a:	2000      	movs	r0, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d017      	beq.n	8002140 <__ledf2+0x84>
 8002110:	e010      	b.n	8002134 <__ledf2+0x78>
 8002112:	003d      	movs	r5, r7
 8002114:	4325      	orrs	r5, r4
 8002116:	d112      	bne.n	800213e <__ledf2+0x82>
 8002118:	4293      	cmp	r3, r2
 800211a:	d11c      	bne.n	8002156 <__ledf2+0x9a>
 800211c:	464d      	mov	r5, r9
 800211e:	432e      	orrs	r6, r5
 8002120:	d10d      	bne.n	800213e <__ledf2+0x82>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d104      	bne.n	8002130 <__ledf2+0x74>
 8002126:	433c      	orrs	r4, r7
 8002128:	4265      	negs	r5, r4
 800212a:	4165      	adcs	r5, r4
 800212c:	2d00      	cmp	r5, #0
 800212e:	d10d      	bne.n	800214c <__ledf2+0x90>
 8002130:	4281      	cmp	r1, r0
 8002132:	d016      	beq.n	8002162 <__ledf2+0xa6>
 8002134:	2002      	movs	r0, #2
 8002136:	3901      	subs	r1, #1
 8002138:	4008      	ands	r0, r1
 800213a:	3801      	subs	r0, #1
 800213c:	e000      	b.n	8002140 <__ledf2+0x84>
 800213e:	2002      	movs	r0, #2
 8002140:	bcf0      	pop	{r4, r5, r6, r7}
 8002142:	46bb      	mov	fp, r7
 8002144:	46b2      	mov	sl, r6
 8002146:	46a9      	mov	r9, r5
 8002148:	46a0      	mov	r8, r4
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214c:	2800      	cmp	r0, #0
 800214e:	d1f7      	bne.n	8002140 <__ledf2+0x84>
 8002150:	2001      	movs	r0, #1
 8002152:	4240      	negs	r0, r0
 8002154:	e7f4      	b.n	8002140 <__ledf2+0x84>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ea      	bne.n	8002130 <__ledf2+0x74>
 800215a:	464c      	mov	r4, r9
 800215c:	4326      	orrs	r6, r4
 800215e:	d1e7      	bne.n	8002130 <__ledf2+0x74>
 8002160:	e7e8      	b.n	8002134 <__ledf2+0x78>
 8002162:	429a      	cmp	r2, r3
 8002164:	dd06      	ble.n	8002174 <__ledf2+0xb8>
 8002166:	4243      	negs	r3, r0
 8002168:	4158      	adcs	r0, r3
 800216a:	2302      	movs	r3, #2
 800216c:	4240      	negs	r0, r0
 800216e:	4018      	ands	r0, r3
 8002170:	3801      	subs	r0, #1
 8002172:	e7e5      	b.n	8002140 <__ledf2+0x84>
 8002174:	429a      	cmp	r2, r3
 8002176:	dbe9      	blt.n	800214c <__ledf2+0x90>
 8002178:	454f      	cmp	r7, r9
 800217a:	d8db      	bhi.n	8002134 <__ledf2+0x78>
 800217c:	d006      	beq.n	800218c <__ledf2+0xd0>
 800217e:	2000      	movs	r0, #0
 8002180:	454f      	cmp	r7, r9
 8002182:	d2dd      	bcs.n	8002140 <__ledf2+0x84>
 8002184:	2900      	cmp	r1, #0
 8002186:	d0e3      	beq.n	8002150 <__ledf2+0x94>
 8002188:	0008      	movs	r0, r1
 800218a:	e7d9      	b.n	8002140 <__ledf2+0x84>
 800218c:	45c4      	cmp	ip, r8
 800218e:	d8d1      	bhi.n	8002134 <__ledf2+0x78>
 8002190:	2000      	movs	r0, #0
 8002192:	45c4      	cmp	ip, r8
 8002194:	d2d4      	bcs.n	8002140 <__ledf2+0x84>
 8002196:	e7f5      	b.n	8002184 <__ledf2+0xc8>
 8002198:	000007ff 	.word	0x000007ff

0800219c <__aeabi_dmul>:
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	4657      	mov	r7, sl
 80021a0:	464e      	mov	r6, r9
 80021a2:	4645      	mov	r5, r8
 80021a4:	46de      	mov	lr, fp
 80021a6:	b5e0      	push	{r5, r6, r7, lr}
 80021a8:	4698      	mov	r8, r3
 80021aa:	030c      	lsls	r4, r1, #12
 80021ac:	004b      	lsls	r3, r1, #1
 80021ae:	0006      	movs	r6, r0
 80021b0:	4692      	mov	sl, r2
 80021b2:	b087      	sub	sp, #28
 80021b4:	0b24      	lsrs	r4, r4, #12
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	0fcf      	lsrs	r7, r1, #31
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06c      	beq.n	8002298 <__aeabi_dmul+0xfc>
 80021be:	4add      	ldr	r2, [pc, #884]	; (8002534 <__aeabi_dmul+0x398>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x2a>
 80021c4:	e086      	b.n	80022d4 <__aeabi_dmul+0x138>
 80021c6:	0f42      	lsrs	r2, r0, #29
 80021c8:	00e4      	lsls	r4, r4, #3
 80021ca:	4314      	orrs	r4, r2
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0412      	lsls	r2, r2, #16
 80021d0:	4314      	orrs	r4, r2
 80021d2:	4ad9      	ldr	r2, [pc, #868]	; (8002538 <__aeabi_dmul+0x39c>)
 80021d4:	00c5      	lsls	r5, r0, #3
 80021d6:	4694      	mov	ip, r2
 80021d8:	4463      	add	r3, ip
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2300      	movs	r3, #0
 80021de:	4699      	mov	r9, r3
 80021e0:	469b      	mov	fp, r3
 80021e2:	4643      	mov	r3, r8
 80021e4:	4642      	mov	r2, r8
 80021e6:	031e      	lsls	r6, r3, #12
 80021e8:	0fd2      	lsrs	r2, r2, #31
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4650      	mov	r0, sl
 80021ee:	4690      	mov	r8, r2
 80021f0:	0b36      	lsrs	r6, r6, #12
 80021f2:	0d5b      	lsrs	r3, r3, #21
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dmul+0x5c>
 80021f6:	e078      	b.n	80022ea <__aeabi_dmul+0x14e>
 80021f8:	4ace      	ldr	r2, [pc, #824]	; (8002534 <__aeabi_dmul+0x398>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01d      	beq.n	800223a <__aeabi_dmul+0x9e>
 80021fe:	49ce      	ldr	r1, [pc, #824]	; (8002538 <__aeabi_dmul+0x39c>)
 8002200:	0f42      	lsrs	r2, r0, #29
 8002202:	468c      	mov	ip, r1
 8002204:	9900      	ldr	r1, [sp, #0]
 8002206:	4463      	add	r3, ip
 8002208:	00f6      	lsls	r6, r6, #3
 800220a:	468c      	mov	ip, r1
 800220c:	4316      	orrs	r6, r2
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	449c      	add	ip, r3
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	4663      	mov	r3, ip
 8002216:	4316      	orrs	r6, r2
 8002218:	00c2      	lsls	r2, r0, #3
 800221a:	2000      	movs	r0, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	9900      	ldr	r1, [sp, #0]
 8002220:	4643      	mov	r3, r8
 8002222:	3101      	adds	r1, #1
 8002224:	468c      	mov	ip, r1
 8002226:	4649      	mov	r1, r9
 8002228:	407b      	eors	r3, r7
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	290f      	cmp	r1, #15
 800222e:	d900      	bls.n	8002232 <__aeabi_dmul+0x96>
 8002230:	e07e      	b.n	8002330 <__aeabi_dmul+0x194>
 8002232:	4bc2      	ldr	r3, [pc, #776]	; (800253c <__aeabi_dmul+0x3a0>)
 8002234:	0089      	lsls	r1, r1, #2
 8002236:	5859      	ldr	r1, [r3, r1]
 8002238:	468f      	mov	pc, r1
 800223a:	4652      	mov	r2, sl
 800223c:	9b00      	ldr	r3, [sp, #0]
 800223e:	4332      	orrs	r2, r6
 8002240:	d000      	beq.n	8002244 <__aeabi_dmul+0xa8>
 8002242:	e156      	b.n	80024f2 <__aeabi_dmul+0x356>
 8002244:	49bb      	ldr	r1, [pc, #748]	; (8002534 <__aeabi_dmul+0x398>)
 8002246:	2600      	movs	r6, #0
 8002248:	468c      	mov	ip, r1
 800224a:	4463      	add	r3, ip
 800224c:	4649      	mov	r1, r9
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2302      	movs	r3, #2
 8002252:	4319      	orrs	r1, r3
 8002254:	4689      	mov	r9, r1
 8002256:	2002      	movs	r0, #2
 8002258:	e7e1      	b.n	800221e <__aeabi_dmul+0x82>
 800225a:	4643      	mov	r3, r8
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	0034      	movs	r4, r6
 8002260:	0015      	movs	r5, r2
 8002262:	4683      	mov	fp, r0
 8002264:	465b      	mov	r3, fp
 8002266:	2b02      	cmp	r3, #2
 8002268:	d05e      	beq.n	8002328 <__aeabi_dmul+0x18c>
 800226a:	2b03      	cmp	r3, #3
 800226c:	d100      	bne.n	8002270 <__aeabi_dmul+0xd4>
 800226e:	e1f3      	b.n	8002658 <__aeabi_dmul+0x4bc>
 8002270:	2b01      	cmp	r3, #1
 8002272:	d000      	beq.n	8002276 <__aeabi_dmul+0xda>
 8002274:	e118      	b.n	80024a8 <__aeabi_dmul+0x30c>
 8002276:	2200      	movs	r2, #0
 8002278:	2400      	movs	r4, #0
 800227a:	2500      	movs	r5, #0
 800227c:	9b01      	ldr	r3, [sp, #4]
 800227e:	0512      	lsls	r2, r2, #20
 8002280:	4322      	orrs	r2, r4
 8002282:	07db      	lsls	r3, r3, #31
 8002284:	431a      	orrs	r2, r3
 8002286:	0028      	movs	r0, r5
 8002288:	0011      	movs	r1, r2
 800228a:	b007      	add	sp, #28
 800228c:	bcf0      	pop	{r4, r5, r6, r7}
 800228e:	46bb      	mov	fp, r7
 8002290:	46b2      	mov	sl, r6
 8002292:	46a9      	mov	r9, r5
 8002294:	46a0      	mov	r8, r4
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002298:	0025      	movs	r5, r4
 800229a:	4305      	orrs	r5, r0
 800229c:	d100      	bne.n	80022a0 <__aeabi_dmul+0x104>
 800229e:	e141      	b.n	8002524 <__aeabi_dmul+0x388>
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dmul+0x10a>
 80022a4:	e1ad      	b.n	8002602 <__aeabi_dmul+0x466>
 80022a6:	0020      	movs	r0, r4
 80022a8:	f000 fef0 	bl	800308c <__clzsi2>
 80022ac:	0001      	movs	r1, r0
 80022ae:	0002      	movs	r2, r0
 80022b0:	390b      	subs	r1, #11
 80022b2:	231d      	movs	r3, #29
 80022b4:	0010      	movs	r0, r2
 80022b6:	1a5b      	subs	r3, r3, r1
 80022b8:	0031      	movs	r1, r6
 80022ba:	0035      	movs	r5, r6
 80022bc:	3808      	subs	r0, #8
 80022be:	4084      	lsls	r4, r0
 80022c0:	40d9      	lsrs	r1, r3
 80022c2:	4085      	lsls	r5, r0
 80022c4:	430c      	orrs	r4, r1
 80022c6:	489e      	ldr	r0, [pc, #632]	; (8002540 <__aeabi_dmul+0x3a4>)
 80022c8:	1a83      	subs	r3, r0, r2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	4699      	mov	r9, r3
 80022d0:	469b      	mov	fp, r3
 80022d2:	e786      	b.n	80021e2 <__aeabi_dmul+0x46>
 80022d4:	0005      	movs	r5, r0
 80022d6:	4325      	orrs	r5, r4
 80022d8:	d000      	beq.n	80022dc <__aeabi_dmul+0x140>
 80022da:	e11c      	b.n	8002516 <__aeabi_dmul+0x37a>
 80022dc:	2208      	movs	r2, #8
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2302      	movs	r3, #2
 80022e2:	2400      	movs	r4, #0
 80022e4:	4691      	mov	r9, r2
 80022e6:	469b      	mov	fp, r3
 80022e8:	e77b      	b.n	80021e2 <__aeabi_dmul+0x46>
 80022ea:	4652      	mov	r2, sl
 80022ec:	4332      	orrs	r2, r6
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dmul+0x156>
 80022f0:	e10a      	b.n	8002508 <__aeabi_dmul+0x36c>
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dmul+0x15c>
 80022f6:	e176      	b.n	80025e6 <__aeabi_dmul+0x44a>
 80022f8:	0030      	movs	r0, r6
 80022fa:	f000 fec7 	bl	800308c <__clzsi2>
 80022fe:	0002      	movs	r2, r0
 8002300:	3a0b      	subs	r2, #11
 8002302:	231d      	movs	r3, #29
 8002304:	0001      	movs	r1, r0
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	4652      	mov	r2, sl
 800230a:	3908      	subs	r1, #8
 800230c:	40da      	lsrs	r2, r3
 800230e:	408e      	lsls	r6, r1
 8002310:	4316      	orrs	r6, r2
 8002312:	4652      	mov	r2, sl
 8002314:	408a      	lsls	r2, r1
 8002316:	9b00      	ldr	r3, [sp, #0]
 8002318:	4989      	ldr	r1, [pc, #548]	; (8002540 <__aeabi_dmul+0x3a4>)
 800231a:	1a18      	subs	r0, r3, r0
 800231c:	0003      	movs	r3, r0
 800231e:	468c      	mov	ip, r1
 8002320:	4463      	add	r3, ip
 8002322:	2000      	movs	r0, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	e77a      	b.n	800221e <__aeabi_dmul+0x82>
 8002328:	2400      	movs	r4, #0
 800232a:	2500      	movs	r5, #0
 800232c:	4a81      	ldr	r2, [pc, #516]	; (8002534 <__aeabi_dmul+0x398>)
 800232e:	e7a5      	b.n	800227c <__aeabi_dmul+0xe0>
 8002330:	0c2f      	lsrs	r7, r5, #16
 8002332:	042d      	lsls	r5, r5, #16
 8002334:	0c2d      	lsrs	r5, r5, #16
 8002336:	002b      	movs	r3, r5
 8002338:	0c11      	lsrs	r1, r2, #16
 800233a:	0412      	lsls	r2, r2, #16
 800233c:	0c12      	lsrs	r2, r2, #16
 800233e:	4353      	muls	r3, r2
 8002340:	4698      	mov	r8, r3
 8002342:	0013      	movs	r3, r2
 8002344:	0028      	movs	r0, r5
 8002346:	437b      	muls	r3, r7
 8002348:	4699      	mov	r9, r3
 800234a:	4348      	muls	r0, r1
 800234c:	4448      	add	r0, r9
 800234e:	4683      	mov	fp, r0
 8002350:	4640      	mov	r0, r8
 8002352:	000b      	movs	r3, r1
 8002354:	0c00      	lsrs	r0, r0, #16
 8002356:	4682      	mov	sl, r0
 8002358:	4658      	mov	r0, fp
 800235a:	437b      	muls	r3, r7
 800235c:	4450      	add	r0, sl
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	4581      	cmp	r9, r0
 8002362:	d906      	bls.n	8002372 <__aeabi_dmul+0x1d6>
 8002364:	469a      	mov	sl, r3
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	4699      	mov	r9, r3
 800236c:	44ca      	add	sl, r9
 800236e:	4653      	mov	r3, sl
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	0c03      	lsrs	r3, r0, #16
 8002374:	469b      	mov	fp, r3
 8002376:	4643      	mov	r3, r8
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	0400      	lsls	r0, r0, #16
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	4698      	mov	r8, r3
 8002380:	0003      	movs	r3, r0
 8002382:	4443      	add	r3, r8
 8002384:	9304      	str	r3, [sp, #16]
 8002386:	0c33      	lsrs	r3, r6, #16
 8002388:	4699      	mov	r9, r3
 800238a:	002b      	movs	r3, r5
 800238c:	0436      	lsls	r6, r6, #16
 800238e:	0c36      	lsrs	r6, r6, #16
 8002390:	4373      	muls	r3, r6
 8002392:	4698      	mov	r8, r3
 8002394:	0033      	movs	r3, r6
 8002396:	437b      	muls	r3, r7
 8002398:	469a      	mov	sl, r3
 800239a:	464b      	mov	r3, r9
 800239c:	435d      	muls	r5, r3
 800239e:	435f      	muls	r7, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	4455      	add	r5, sl
 80023a4:	0c18      	lsrs	r0, r3, #16
 80023a6:	1940      	adds	r0, r0, r5
 80023a8:	4582      	cmp	sl, r0
 80023aa:	d903      	bls.n	80023b4 <__aeabi_dmul+0x218>
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	469a      	mov	sl, r3
 80023b2:	4457      	add	r7, sl
 80023b4:	0c05      	lsrs	r5, r0, #16
 80023b6:	19eb      	adds	r3, r5, r7
 80023b8:	9305      	str	r3, [sp, #20]
 80023ba:	4643      	mov	r3, r8
 80023bc:	041d      	lsls	r5, r3, #16
 80023be:	0c2d      	lsrs	r5, r5, #16
 80023c0:	0400      	lsls	r0, r0, #16
 80023c2:	1940      	adds	r0, r0, r5
 80023c4:	0c25      	lsrs	r5, r4, #16
 80023c6:	0424      	lsls	r4, r4, #16
 80023c8:	0c24      	lsrs	r4, r4, #16
 80023ca:	0027      	movs	r7, r4
 80023cc:	4357      	muls	r7, r2
 80023ce:	436a      	muls	r2, r5
 80023d0:	4690      	mov	r8, r2
 80023d2:	002a      	movs	r2, r5
 80023d4:	0c3b      	lsrs	r3, r7, #16
 80023d6:	469a      	mov	sl, r3
 80023d8:	434a      	muls	r2, r1
 80023da:	4361      	muls	r1, r4
 80023dc:	4441      	add	r1, r8
 80023de:	4451      	add	r1, sl
 80023e0:	4483      	add	fp, r0
 80023e2:	4588      	cmp	r8, r1
 80023e4:	d903      	bls.n	80023ee <__aeabi_dmul+0x252>
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	4698      	mov	r8, r3
 80023ec:	4442      	add	r2, r8
 80023ee:	043f      	lsls	r7, r7, #16
 80023f0:	0c0b      	lsrs	r3, r1, #16
 80023f2:	0c3f      	lsrs	r7, r7, #16
 80023f4:	0409      	lsls	r1, r1, #16
 80023f6:	19c9      	adds	r1, r1, r7
 80023f8:	0027      	movs	r7, r4
 80023fa:	4698      	mov	r8, r3
 80023fc:	464b      	mov	r3, r9
 80023fe:	4377      	muls	r7, r6
 8002400:	435c      	muls	r4, r3
 8002402:	436e      	muls	r6, r5
 8002404:	435d      	muls	r5, r3
 8002406:	0c3b      	lsrs	r3, r7, #16
 8002408:	4699      	mov	r9, r3
 800240a:	19a4      	adds	r4, r4, r6
 800240c:	444c      	add	r4, r9
 800240e:	4442      	add	r2, r8
 8002410:	9503      	str	r5, [sp, #12]
 8002412:	42a6      	cmp	r6, r4
 8002414:	d904      	bls.n	8002420 <__aeabi_dmul+0x284>
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	4698      	mov	r8, r3
 800241c:	4445      	add	r5, r8
 800241e:	9503      	str	r5, [sp, #12]
 8002420:	9b02      	ldr	r3, [sp, #8]
 8002422:	043f      	lsls	r7, r7, #16
 8002424:	445b      	add	r3, fp
 8002426:	001e      	movs	r6, r3
 8002428:	4283      	cmp	r3, r0
 800242a:	4180      	sbcs	r0, r0
 800242c:	0423      	lsls	r3, r4, #16
 800242e:	4698      	mov	r8, r3
 8002430:	9b05      	ldr	r3, [sp, #20]
 8002432:	0c3f      	lsrs	r7, r7, #16
 8002434:	4447      	add	r7, r8
 8002436:	4698      	mov	r8, r3
 8002438:	1876      	adds	r6, r6, r1
 800243a:	428e      	cmp	r6, r1
 800243c:	4189      	sbcs	r1, r1
 800243e:	4447      	add	r7, r8
 8002440:	4240      	negs	r0, r0
 8002442:	183d      	adds	r5, r7, r0
 8002444:	46a8      	mov	r8, r5
 8002446:	4693      	mov	fp, r2
 8002448:	4249      	negs	r1, r1
 800244a:	468a      	mov	sl, r1
 800244c:	44c3      	add	fp, r8
 800244e:	429f      	cmp	r7, r3
 8002450:	41bf      	sbcs	r7, r7
 8002452:	4580      	cmp	r8, r0
 8002454:	4180      	sbcs	r0, r0
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	44da      	add	sl, fp
 800245a:	4698      	mov	r8, r3
 800245c:	4653      	mov	r3, sl
 800245e:	4240      	negs	r0, r0
 8002460:	427f      	negs	r7, r7
 8002462:	4307      	orrs	r7, r0
 8002464:	0c24      	lsrs	r4, r4, #16
 8002466:	4593      	cmp	fp, r2
 8002468:	4192      	sbcs	r2, r2
 800246a:	458a      	cmp	sl, r1
 800246c:	4189      	sbcs	r1, r1
 800246e:	193f      	adds	r7, r7, r4
 8002470:	0ddc      	lsrs	r4, r3, #23
 8002472:	9b04      	ldr	r3, [sp, #16]
 8002474:	0275      	lsls	r5, r6, #9
 8002476:	431d      	orrs	r5, r3
 8002478:	1e68      	subs	r0, r5, #1
 800247a:	4185      	sbcs	r5, r0
 800247c:	4653      	mov	r3, sl
 800247e:	4252      	negs	r2, r2
 8002480:	4249      	negs	r1, r1
 8002482:	430a      	orrs	r2, r1
 8002484:	18bf      	adds	r7, r7, r2
 8002486:	4447      	add	r7, r8
 8002488:	0df6      	lsrs	r6, r6, #23
 800248a:	027f      	lsls	r7, r7, #9
 800248c:	4335      	orrs	r5, r6
 800248e:	025a      	lsls	r2, r3, #9
 8002490:	433c      	orrs	r4, r7
 8002492:	4315      	orrs	r5, r2
 8002494:	01fb      	lsls	r3, r7, #7
 8002496:	d400      	bmi.n	800249a <__aeabi_dmul+0x2fe>
 8002498:	e0c1      	b.n	800261e <__aeabi_dmul+0x482>
 800249a:	2101      	movs	r1, #1
 800249c:	086a      	lsrs	r2, r5, #1
 800249e:	400d      	ands	r5, r1
 80024a0:	4315      	orrs	r5, r2
 80024a2:	07e2      	lsls	r2, r4, #31
 80024a4:	4315      	orrs	r5, r2
 80024a6:	0864      	lsrs	r4, r4, #1
 80024a8:	4926      	ldr	r1, [pc, #152]	; (8002544 <__aeabi_dmul+0x3a8>)
 80024aa:	4461      	add	r1, ip
 80024ac:	2900      	cmp	r1, #0
 80024ae:	dd56      	ble.n	800255e <__aeabi_dmul+0x3c2>
 80024b0:	076b      	lsls	r3, r5, #29
 80024b2:	d009      	beq.n	80024c8 <__aeabi_dmul+0x32c>
 80024b4:	220f      	movs	r2, #15
 80024b6:	402a      	ands	r2, r5
 80024b8:	2a04      	cmp	r2, #4
 80024ba:	d005      	beq.n	80024c8 <__aeabi_dmul+0x32c>
 80024bc:	1d2a      	adds	r2, r5, #4
 80024be:	42aa      	cmp	r2, r5
 80024c0:	41ad      	sbcs	r5, r5
 80024c2:	426d      	negs	r5, r5
 80024c4:	1964      	adds	r4, r4, r5
 80024c6:	0015      	movs	r5, r2
 80024c8:	01e3      	lsls	r3, r4, #7
 80024ca:	d504      	bpl.n	80024d6 <__aeabi_dmul+0x33a>
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <__aeabi_dmul+0x3ac>)
 80024d0:	00c9      	lsls	r1, r1, #3
 80024d2:	4014      	ands	r4, r2
 80024d4:	4461      	add	r1, ip
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <__aeabi_dmul+0x3b0>)
 80024d8:	4291      	cmp	r1, r2
 80024da:	dd00      	ble.n	80024de <__aeabi_dmul+0x342>
 80024dc:	e724      	b.n	8002328 <__aeabi_dmul+0x18c>
 80024de:	0762      	lsls	r2, r4, #29
 80024e0:	08ed      	lsrs	r5, r5, #3
 80024e2:	0264      	lsls	r4, r4, #9
 80024e4:	0549      	lsls	r1, r1, #21
 80024e6:	4315      	orrs	r5, r2
 80024e8:	0b24      	lsrs	r4, r4, #12
 80024ea:	0d4a      	lsrs	r2, r1, #21
 80024ec:	e6c6      	b.n	800227c <__aeabi_dmul+0xe0>
 80024ee:	9701      	str	r7, [sp, #4]
 80024f0:	e6b8      	b.n	8002264 <__aeabi_dmul+0xc8>
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <__aeabi_dmul+0x398>)
 80024f4:	2003      	movs	r0, #3
 80024f6:	4694      	mov	ip, r2
 80024f8:	4463      	add	r3, ip
 80024fa:	464a      	mov	r2, r9
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	431a      	orrs	r2, r3
 8002502:	4691      	mov	r9, r2
 8002504:	4652      	mov	r2, sl
 8002506:	e68a      	b.n	800221e <__aeabi_dmul+0x82>
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e683      	b.n	800221e <__aeabi_dmul+0x82>
 8002516:	220c      	movs	r2, #12
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2303      	movs	r3, #3
 800251c:	0005      	movs	r5, r0
 800251e:	4691      	mov	r9, r2
 8002520:	469b      	mov	fp, r3
 8002522:	e65e      	b.n	80021e2 <__aeabi_dmul+0x46>
 8002524:	2304      	movs	r3, #4
 8002526:	4699      	mov	r9, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	2400      	movs	r4, #0
 8002530:	469b      	mov	fp, r3
 8002532:	e656      	b.n	80021e2 <__aeabi_dmul+0x46>
 8002534:	000007ff 	.word	0x000007ff
 8002538:	fffffc01 	.word	0xfffffc01
 800253c:	08019ce0 	.word	0x08019ce0
 8002540:	fffffc0d 	.word	0xfffffc0d
 8002544:	000003ff 	.word	0x000003ff
 8002548:	feffffff 	.word	0xfeffffff
 800254c:	000007fe 	.word	0x000007fe
 8002550:	2300      	movs	r3, #0
 8002552:	2480      	movs	r4, #128	; 0x80
 8002554:	2500      	movs	r5, #0
 8002556:	4a44      	ldr	r2, [pc, #272]	; (8002668 <__aeabi_dmul+0x4cc>)
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	0324      	lsls	r4, r4, #12
 800255c:	e68e      	b.n	800227c <__aeabi_dmul+0xe0>
 800255e:	2001      	movs	r0, #1
 8002560:	1a40      	subs	r0, r0, r1
 8002562:	2838      	cmp	r0, #56	; 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_dmul+0x3cc>
 8002566:	e686      	b.n	8002276 <__aeabi_dmul+0xda>
 8002568:	281f      	cmp	r0, #31
 800256a:	dd5b      	ble.n	8002624 <__aeabi_dmul+0x488>
 800256c:	221f      	movs	r2, #31
 800256e:	0023      	movs	r3, r4
 8002570:	4252      	negs	r2, r2
 8002572:	1a51      	subs	r1, r2, r1
 8002574:	40cb      	lsrs	r3, r1
 8002576:	0019      	movs	r1, r3
 8002578:	2820      	cmp	r0, #32
 800257a:	d003      	beq.n	8002584 <__aeabi_dmul+0x3e8>
 800257c:	4a3b      	ldr	r2, [pc, #236]	; (800266c <__aeabi_dmul+0x4d0>)
 800257e:	4462      	add	r2, ip
 8002580:	4094      	lsls	r4, r2
 8002582:	4325      	orrs	r5, r4
 8002584:	1e6a      	subs	r2, r5, #1
 8002586:	4195      	sbcs	r5, r2
 8002588:	002a      	movs	r2, r5
 800258a:	430a      	orrs	r2, r1
 800258c:	2107      	movs	r1, #7
 800258e:	000d      	movs	r5, r1
 8002590:	2400      	movs	r4, #0
 8002592:	4015      	ands	r5, r2
 8002594:	4211      	tst	r1, r2
 8002596:	d05b      	beq.n	8002650 <__aeabi_dmul+0x4b4>
 8002598:	210f      	movs	r1, #15
 800259a:	2400      	movs	r4, #0
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d053      	beq.n	800264a <__aeabi_dmul+0x4ae>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	18a4      	adds	r4, r4, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0223      	lsls	r3, r4, #8
 80025b0:	d54b      	bpl.n	800264a <__aeabi_dmul+0x4ae>
 80025b2:	2201      	movs	r2, #1
 80025b4:	2400      	movs	r4, #0
 80025b6:	2500      	movs	r5, #0
 80025b8:	e660      	b.n	800227c <__aeabi_dmul+0xe0>
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	031b      	lsls	r3, r3, #12
 80025be:	421c      	tst	r4, r3
 80025c0:	d009      	beq.n	80025d6 <__aeabi_dmul+0x43a>
 80025c2:	421e      	tst	r6, r3
 80025c4:	d107      	bne.n	80025d6 <__aeabi_dmul+0x43a>
 80025c6:	4333      	orrs	r3, r6
 80025c8:	031c      	lsls	r4, r3, #12
 80025ca:	4643      	mov	r3, r8
 80025cc:	0015      	movs	r5, r2
 80025ce:	0b24      	lsrs	r4, r4, #12
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <__aeabi_dmul+0x4cc>)
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	e652      	b.n	800227c <__aeabi_dmul+0xe0>
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	0312      	lsls	r2, r2, #12
 80025da:	4314      	orrs	r4, r2
 80025dc:	0324      	lsls	r4, r4, #12
 80025de:	4a22      	ldr	r2, [pc, #136]	; (8002668 <__aeabi_dmul+0x4cc>)
 80025e0:	0b24      	lsrs	r4, r4, #12
 80025e2:	9701      	str	r7, [sp, #4]
 80025e4:	e64a      	b.n	800227c <__aeabi_dmul+0xe0>
 80025e6:	f000 fd51 	bl	800308c <__clzsi2>
 80025ea:	0003      	movs	r3, r0
 80025ec:	001a      	movs	r2, r3
 80025ee:	3215      	adds	r2, #21
 80025f0:	3020      	adds	r0, #32
 80025f2:	2a1c      	cmp	r2, #28
 80025f4:	dc00      	bgt.n	80025f8 <__aeabi_dmul+0x45c>
 80025f6:	e684      	b.n	8002302 <__aeabi_dmul+0x166>
 80025f8:	4656      	mov	r6, sl
 80025fa:	3b08      	subs	r3, #8
 80025fc:	2200      	movs	r2, #0
 80025fe:	409e      	lsls	r6, r3
 8002600:	e689      	b.n	8002316 <__aeabi_dmul+0x17a>
 8002602:	f000 fd43 	bl	800308c <__clzsi2>
 8002606:	0001      	movs	r1, r0
 8002608:	0002      	movs	r2, r0
 800260a:	3115      	adds	r1, #21
 800260c:	3220      	adds	r2, #32
 800260e:	291c      	cmp	r1, #28
 8002610:	dc00      	bgt.n	8002614 <__aeabi_dmul+0x478>
 8002612:	e64e      	b.n	80022b2 <__aeabi_dmul+0x116>
 8002614:	0034      	movs	r4, r6
 8002616:	3808      	subs	r0, #8
 8002618:	2500      	movs	r5, #0
 800261a:	4084      	lsls	r4, r0
 800261c:	e653      	b.n	80022c6 <__aeabi_dmul+0x12a>
 800261e:	9b00      	ldr	r3, [sp, #0]
 8002620:	469c      	mov	ip, r3
 8002622:	e741      	b.n	80024a8 <__aeabi_dmul+0x30c>
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <__aeabi_dmul+0x4d4>)
 8002626:	0022      	movs	r2, r4
 8002628:	4461      	add	r1, ip
 800262a:	002e      	movs	r6, r5
 800262c:	408d      	lsls	r5, r1
 800262e:	408a      	lsls	r2, r1
 8002630:	40c6      	lsrs	r6, r0
 8002632:	1e69      	subs	r1, r5, #1
 8002634:	418d      	sbcs	r5, r1
 8002636:	4332      	orrs	r2, r6
 8002638:	432a      	orrs	r2, r5
 800263a:	40c4      	lsrs	r4, r0
 800263c:	0753      	lsls	r3, r2, #29
 800263e:	d0b6      	beq.n	80025ae <__aeabi_dmul+0x412>
 8002640:	210f      	movs	r1, #15
 8002642:	4011      	ands	r1, r2
 8002644:	2904      	cmp	r1, #4
 8002646:	d1ac      	bne.n	80025a2 <__aeabi_dmul+0x406>
 8002648:	e7b1      	b.n	80025ae <__aeabi_dmul+0x412>
 800264a:	0765      	lsls	r5, r4, #29
 800264c:	0264      	lsls	r4, r4, #9
 800264e:	0b24      	lsrs	r4, r4, #12
 8002650:	08d2      	lsrs	r2, r2, #3
 8002652:	4315      	orrs	r5, r2
 8002654:	2200      	movs	r2, #0
 8002656:	e611      	b.n	800227c <__aeabi_dmul+0xe0>
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0312      	lsls	r2, r2, #12
 800265c:	4314      	orrs	r4, r2
 800265e:	0324      	lsls	r4, r4, #12
 8002660:	4a01      	ldr	r2, [pc, #4]	; (8002668 <__aeabi_dmul+0x4cc>)
 8002662:	0b24      	lsrs	r4, r4, #12
 8002664:	e60a      	b.n	800227c <__aeabi_dmul+0xe0>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	000007ff 	.word	0x000007ff
 800266c:	0000043e 	.word	0x0000043e
 8002670:	0000041e 	.word	0x0000041e

08002674 <__aeabi_dsub>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	4657      	mov	r7, sl
 8002678:	464e      	mov	r6, r9
 800267a:	4645      	mov	r5, r8
 800267c:	46de      	mov	lr, fp
 800267e:	0004      	movs	r4, r0
 8002680:	b5e0      	push	{r5, r6, r7, lr}
 8002682:	001f      	movs	r7, r3
 8002684:	0010      	movs	r0, r2
 8002686:	030b      	lsls	r3, r1, #12
 8002688:	0f62      	lsrs	r2, r4, #29
 800268a:	004e      	lsls	r6, r1, #1
 800268c:	0fcd      	lsrs	r5, r1, #31
 800268e:	0a5b      	lsrs	r3, r3, #9
 8002690:	0339      	lsls	r1, r7, #12
 8002692:	4313      	orrs	r3, r2
 8002694:	0a49      	lsrs	r1, r1, #9
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	0f44      	lsrs	r4, r0, #29
 800269a:	4321      	orrs	r1, r4
 800269c:	4cc2      	ldr	r4, [pc, #776]	; (80029a8 <__aeabi_dsub+0x334>)
 800269e:	4691      	mov	r9, r2
 80026a0:	4692      	mov	sl, r2
 80026a2:	00c0      	lsls	r0, r0, #3
 80026a4:	007a      	lsls	r2, r7, #1
 80026a6:	4680      	mov	r8, r0
 80026a8:	0d76      	lsrs	r6, r6, #21
 80026aa:	0d52      	lsrs	r2, r2, #21
 80026ac:	0fff      	lsrs	r7, r7, #31
 80026ae:	42a2      	cmp	r2, r4
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x40>
 80026b2:	e0b4      	b.n	800281e <__aeabi_dsub+0x1aa>
 80026b4:	2401      	movs	r4, #1
 80026b6:	4067      	eors	r7, r4
 80026b8:	46bb      	mov	fp, r7
 80026ba:	42bd      	cmp	r5, r7
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x4c>
 80026be:	e088      	b.n	80027d2 <__aeabi_dsub+0x15e>
 80026c0:	1ab4      	subs	r4, r6, r2
 80026c2:	46a4      	mov	ip, r4
 80026c4:	2c00      	cmp	r4, #0
 80026c6:	dc00      	bgt.n	80026ca <__aeabi_dsub+0x56>
 80026c8:	e0b2      	b.n	8002830 <__aeabi_dsub+0x1bc>
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x5c>
 80026ce:	e0c5      	b.n	800285c <__aeabi_dsub+0x1e8>
 80026d0:	4ab5      	ldr	r2, [pc, #724]	; (80029a8 <__aeabi_dsub+0x334>)
 80026d2:	4296      	cmp	r6, r2
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x64>
 80026d6:	e28b      	b.n	8002bf0 <__aeabi_dsub+0x57c>
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	0412      	lsls	r2, r2, #16
 80026dc:	4311      	orrs	r1, r2
 80026de:	4662      	mov	r2, ip
 80026e0:	2a38      	cmp	r2, #56	; 0x38
 80026e2:	dd00      	ble.n	80026e6 <__aeabi_dsub+0x72>
 80026e4:	e1a1      	b.n	8002a2a <__aeabi_dsub+0x3b6>
 80026e6:	2a1f      	cmp	r2, #31
 80026e8:	dd00      	ble.n	80026ec <__aeabi_dsub+0x78>
 80026ea:	e216      	b.n	8002b1a <__aeabi_dsub+0x4a6>
 80026ec:	2720      	movs	r7, #32
 80026ee:	000c      	movs	r4, r1
 80026f0:	1abf      	subs	r7, r7, r2
 80026f2:	40bc      	lsls	r4, r7
 80026f4:	0002      	movs	r2, r0
 80026f6:	46a0      	mov	r8, r4
 80026f8:	4664      	mov	r4, ip
 80026fa:	40b8      	lsls	r0, r7
 80026fc:	40e2      	lsrs	r2, r4
 80026fe:	4644      	mov	r4, r8
 8002700:	4314      	orrs	r4, r2
 8002702:	0002      	movs	r2, r0
 8002704:	1e50      	subs	r0, r2, #1
 8002706:	4182      	sbcs	r2, r0
 8002708:	4660      	mov	r0, ip
 800270a:	40c1      	lsrs	r1, r0
 800270c:	4322      	orrs	r2, r4
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	4649      	mov	r1, r9
 8002712:	1a8c      	subs	r4, r1, r2
 8002714:	45a1      	cmp	r9, r4
 8002716:	4192      	sbcs	r2, r2
 8002718:	4252      	negs	r2, r2
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	4698      	mov	r8, r3
 800271e:	4643      	mov	r3, r8
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	d400      	bmi.n	8002726 <__aeabi_dsub+0xb2>
 8002724:	e117      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002726:	4643      	mov	r3, r8
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	0a5b      	lsrs	r3, r3, #9
 800272c:	4698      	mov	r8, r3
 800272e:	4643      	mov	r3, r8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d100      	bne.n	8002736 <__aeabi_dsub+0xc2>
 8002734:	e16c      	b.n	8002a10 <__aeabi_dsub+0x39c>
 8002736:	4640      	mov	r0, r8
 8002738:	f000 fca8 	bl	800308c <__clzsi2>
 800273c:	0002      	movs	r2, r0
 800273e:	3a08      	subs	r2, #8
 8002740:	2120      	movs	r1, #32
 8002742:	0020      	movs	r0, r4
 8002744:	4643      	mov	r3, r8
 8002746:	1a89      	subs	r1, r1, r2
 8002748:	4093      	lsls	r3, r2
 800274a:	40c8      	lsrs	r0, r1
 800274c:	4094      	lsls	r4, r2
 800274e:	4303      	orrs	r3, r0
 8002750:	4296      	cmp	r6, r2
 8002752:	dd00      	ble.n	8002756 <__aeabi_dsub+0xe2>
 8002754:	e157      	b.n	8002a06 <__aeabi_dsub+0x392>
 8002756:	1b96      	subs	r6, r2, r6
 8002758:	1c71      	adds	r1, r6, #1
 800275a:	291f      	cmp	r1, #31
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0xec>
 800275e:	e1cb      	b.n	8002af8 <__aeabi_dsub+0x484>
 8002760:	2220      	movs	r2, #32
 8002762:	0018      	movs	r0, r3
 8002764:	0026      	movs	r6, r4
 8002766:	1a52      	subs	r2, r2, r1
 8002768:	4094      	lsls	r4, r2
 800276a:	4090      	lsls	r0, r2
 800276c:	40ce      	lsrs	r6, r1
 800276e:	40cb      	lsrs	r3, r1
 8002770:	1e62      	subs	r2, r4, #1
 8002772:	4194      	sbcs	r4, r2
 8002774:	4330      	orrs	r0, r6
 8002776:	4698      	mov	r8, r3
 8002778:	2600      	movs	r6, #0
 800277a:	4304      	orrs	r4, r0
 800277c:	0763      	lsls	r3, r4, #29
 800277e:	d009      	beq.n	8002794 <__aeabi_dsub+0x120>
 8002780:	230f      	movs	r3, #15
 8002782:	4023      	ands	r3, r4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d005      	beq.n	8002794 <__aeabi_dsub+0x120>
 8002788:	1d23      	adds	r3, r4, #4
 800278a:	42a3      	cmp	r3, r4
 800278c:	41a4      	sbcs	r4, r4
 800278e:	4264      	negs	r4, r4
 8002790:	44a0      	add	r8, r4
 8002792:	001c      	movs	r4, r3
 8002794:	4643      	mov	r3, r8
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	d400      	bmi.n	800279c <__aeabi_dsub+0x128>
 800279a:	e0df      	b.n	800295c <__aeabi_dsub+0x2e8>
 800279c:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <__aeabi_dsub+0x334>)
 800279e:	3601      	adds	r6, #1
 80027a0:	429e      	cmp	r6, r3
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0x132>
 80027a4:	e0fb      	b.n	800299e <__aeabi_dsub+0x32a>
 80027a6:	4642      	mov	r2, r8
 80027a8:	4b80      	ldr	r3, [pc, #512]	; (80029ac <__aeabi_dsub+0x338>)
 80027aa:	08e4      	lsrs	r4, r4, #3
 80027ac:	401a      	ands	r2, r3
 80027ae:	0013      	movs	r3, r2
 80027b0:	0571      	lsls	r1, r6, #21
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	4322      	orrs	r2, r4
 80027b8:	0b1b      	lsrs	r3, r3, #12
 80027ba:	0d49      	lsrs	r1, r1, #21
 80027bc:	0509      	lsls	r1, r1, #20
 80027be:	07ed      	lsls	r5, r5, #31
 80027c0:	4319      	orrs	r1, r3
 80027c2:	4329      	orrs	r1, r5
 80027c4:	0010      	movs	r0, r2
 80027c6:	bcf0      	pop	{r4, r5, r6, r7}
 80027c8:	46bb      	mov	fp, r7
 80027ca:	46b2      	mov	sl, r6
 80027cc:	46a9      	mov	r9, r5
 80027ce:	46a0      	mov	r8, r4
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d2:	1ab4      	subs	r4, r6, r2
 80027d4:	46a4      	mov	ip, r4
 80027d6:	2c00      	cmp	r4, #0
 80027d8:	dd58      	ble.n	800288c <__aeabi_dsub+0x218>
 80027da:	2a00      	cmp	r2, #0
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x16c>
 80027de:	e09e      	b.n	800291e <__aeabi_dsub+0x2aa>
 80027e0:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <__aeabi_dsub+0x334>)
 80027e2:	4296      	cmp	r6, r2
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x174>
 80027e6:	e13b      	b.n	8002a60 <__aeabi_dsub+0x3ec>
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	0412      	lsls	r2, r2, #16
 80027ec:	4311      	orrs	r1, r2
 80027ee:	4662      	mov	r2, ip
 80027f0:	2a38      	cmp	r2, #56	; 0x38
 80027f2:	dd00      	ble.n	80027f6 <__aeabi_dsub+0x182>
 80027f4:	e0c1      	b.n	800297a <__aeabi_dsub+0x306>
 80027f6:	2a1f      	cmp	r2, #31
 80027f8:	dc00      	bgt.n	80027fc <__aeabi_dsub+0x188>
 80027fa:	e1bb      	b.n	8002b74 <__aeabi_dsub+0x500>
 80027fc:	000c      	movs	r4, r1
 80027fe:	3a20      	subs	r2, #32
 8002800:	40d4      	lsrs	r4, r2
 8002802:	0022      	movs	r2, r4
 8002804:	4664      	mov	r4, ip
 8002806:	2c20      	cmp	r4, #32
 8002808:	d004      	beq.n	8002814 <__aeabi_dsub+0x1a0>
 800280a:	2740      	movs	r7, #64	; 0x40
 800280c:	1b3f      	subs	r7, r7, r4
 800280e:	40b9      	lsls	r1, r7
 8002810:	4308      	orrs	r0, r1
 8002812:	4680      	mov	r8, r0
 8002814:	4644      	mov	r4, r8
 8002816:	1e61      	subs	r1, r4, #1
 8002818:	418c      	sbcs	r4, r1
 800281a:	4314      	orrs	r4, r2
 800281c:	e0b1      	b.n	8002982 <__aeabi_dsub+0x30e>
 800281e:	000c      	movs	r4, r1
 8002820:	4304      	orrs	r4, r0
 8002822:	d02a      	beq.n	800287a <__aeabi_dsub+0x206>
 8002824:	46bb      	mov	fp, r7
 8002826:	42bd      	cmp	r5, r7
 8002828:	d02d      	beq.n	8002886 <__aeabi_dsub+0x212>
 800282a:	4c61      	ldr	r4, [pc, #388]	; (80029b0 <__aeabi_dsub+0x33c>)
 800282c:	46a4      	mov	ip, r4
 800282e:	44b4      	add	ip, r6
 8002830:	4664      	mov	r4, ip
 8002832:	2c00      	cmp	r4, #0
 8002834:	d05c      	beq.n	80028f0 <__aeabi_dsub+0x27c>
 8002836:	1b94      	subs	r4, r2, r6
 8002838:	46a4      	mov	ip, r4
 800283a:	2e00      	cmp	r6, #0
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x1cc>
 800283e:	e115      	b.n	8002a6c <__aeabi_dsub+0x3f8>
 8002840:	464d      	mov	r5, r9
 8002842:	431d      	orrs	r5, r3
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x1d4>
 8002846:	e1c3      	b.n	8002bd0 <__aeabi_dsub+0x55c>
 8002848:	1e65      	subs	r5, r4, #1
 800284a:	2c01      	cmp	r4, #1
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x1dc>
 800284e:	e20c      	b.n	8002c6a <__aeabi_dsub+0x5f6>
 8002850:	4e55      	ldr	r6, [pc, #340]	; (80029a8 <__aeabi_dsub+0x334>)
 8002852:	42b4      	cmp	r4, r6
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x1e4>
 8002856:	e1f8      	b.n	8002c4a <__aeabi_dsub+0x5d6>
 8002858:	46ac      	mov	ip, r5
 800285a:	e10e      	b.n	8002a7a <__aeabi_dsub+0x406>
 800285c:	000a      	movs	r2, r1
 800285e:	4302      	orrs	r2, r0
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x1f0>
 8002862:	e136      	b.n	8002ad2 <__aeabi_dsub+0x45e>
 8002864:	0022      	movs	r2, r4
 8002866:	3a01      	subs	r2, #1
 8002868:	2c01      	cmp	r4, #1
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x1fa>
 800286c:	e1c6      	b.n	8002bfc <__aeabi_dsub+0x588>
 800286e:	4c4e      	ldr	r4, [pc, #312]	; (80029a8 <__aeabi_dsub+0x334>)
 8002870:	45a4      	cmp	ip, r4
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x202>
 8002874:	e0f4      	b.n	8002a60 <__aeabi_dsub+0x3ec>
 8002876:	4694      	mov	ip, r2
 8002878:	e731      	b.n	80026de <__aeabi_dsub+0x6a>
 800287a:	2401      	movs	r4, #1
 800287c:	4067      	eors	r7, r4
 800287e:	46bb      	mov	fp, r7
 8002880:	42bd      	cmp	r5, r7
 8002882:	d000      	beq.n	8002886 <__aeabi_dsub+0x212>
 8002884:	e71c      	b.n	80026c0 <__aeabi_dsub+0x4c>
 8002886:	4c4a      	ldr	r4, [pc, #296]	; (80029b0 <__aeabi_dsub+0x33c>)
 8002888:	46a4      	mov	ip, r4
 800288a:	44b4      	add	ip, r6
 800288c:	4664      	mov	r4, ip
 800288e:	2c00      	cmp	r4, #0
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x220>
 8002892:	e0cf      	b.n	8002a34 <__aeabi_dsub+0x3c0>
 8002894:	1b94      	subs	r4, r2, r6
 8002896:	46a4      	mov	ip, r4
 8002898:	2e00      	cmp	r6, #0
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x22a>
 800289c:	e15c      	b.n	8002b58 <__aeabi_dsub+0x4e4>
 800289e:	4e42      	ldr	r6, [pc, #264]	; (80029a8 <__aeabi_dsub+0x334>)
 80028a0:	42b2      	cmp	r2, r6
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x232>
 80028a4:	e1ec      	b.n	8002c80 <__aeabi_dsub+0x60c>
 80028a6:	2680      	movs	r6, #128	; 0x80
 80028a8:	0436      	lsls	r6, r6, #16
 80028aa:	4333      	orrs	r3, r6
 80028ac:	4664      	mov	r4, ip
 80028ae:	2c38      	cmp	r4, #56	; 0x38
 80028b0:	dd00      	ble.n	80028b4 <__aeabi_dsub+0x240>
 80028b2:	e1b3      	b.n	8002c1c <__aeabi_dsub+0x5a8>
 80028b4:	2c1f      	cmp	r4, #31
 80028b6:	dd00      	ble.n	80028ba <__aeabi_dsub+0x246>
 80028b8:	e238      	b.n	8002d2c <__aeabi_dsub+0x6b8>
 80028ba:	2620      	movs	r6, #32
 80028bc:	1b36      	subs	r6, r6, r4
 80028be:	001c      	movs	r4, r3
 80028c0:	40b4      	lsls	r4, r6
 80028c2:	464f      	mov	r7, r9
 80028c4:	46a0      	mov	r8, r4
 80028c6:	4664      	mov	r4, ip
 80028c8:	40e7      	lsrs	r7, r4
 80028ca:	4644      	mov	r4, r8
 80028cc:	433c      	orrs	r4, r7
 80028ce:	464f      	mov	r7, r9
 80028d0:	40b7      	lsls	r7, r6
 80028d2:	003e      	movs	r6, r7
 80028d4:	1e77      	subs	r7, r6, #1
 80028d6:	41be      	sbcs	r6, r7
 80028d8:	4334      	orrs	r4, r6
 80028da:	4666      	mov	r6, ip
 80028dc:	40f3      	lsrs	r3, r6
 80028de:	18c9      	adds	r1, r1, r3
 80028e0:	1824      	adds	r4, r4, r0
 80028e2:	4284      	cmp	r4, r0
 80028e4:	419b      	sbcs	r3, r3
 80028e6:	425b      	negs	r3, r3
 80028e8:	4698      	mov	r8, r3
 80028ea:	0016      	movs	r6, r2
 80028ec:	4488      	add	r8, r1
 80028ee:	e04e      	b.n	800298e <__aeabi_dsub+0x31a>
 80028f0:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <__aeabi_dsub+0x340>)
 80028f2:	1c74      	adds	r4, r6, #1
 80028f4:	4214      	tst	r4, r2
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x286>
 80028f8:	e0d6      	b.n	8002aa8 <__aeabi_dsub+0x434>
 80028fa:	464a      	mov	r2, r9
 80028fc:	431a      	orrs	r2, r3
 80028fe:	2e00      	cmp	r6, #0
 8002900:	d000      	beq.n	8002904 <__aeabi_dsub+0x290>
 8002902:	e15b      	b.n	8002bbc <__aeabi_dsub+0x548>
 8002904:	2a00      	cmp	r2, #0
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x296>
 8002908:	e1a5      	b.n	8002c56 <__aeabi_dsub+0x5e2>
 800290a:	000a      	movs	r2, r1
 800290c:	4302      	orrs	r2, r0
 800290e:	d000      	beq.n	8002912 <__aeabi_dsub+0x29e>
 8002910:	e1bb      	b.n	8002c8a <__aeabi_dsub+0x616>
 8002912:	464a      	mov	r2, r9
 8002914:	0759      	lsls	r1, r3, #29
 8002916:	08d2      	lsrs	r2, r2, #3
 8002918:	430a      	orrs	r2, r1
 800291a:	08db      	lsrs	r3, r3, #3
 800291c:	e027      	b.n	800296e <__aeabi_dsub+0x2fa>
 800291e:	000a      	movs	r2, r1
 8002920:	4302      	orrs	r2, r0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x2b2>
 8002924:	e174      	b.n	8002c10 <__aeabi_dsub+0x59c>
 8002926:	0022      	movs	r2, r4
 8002928:	3a01      	subs	r2, #1
 800292a:	2c01      	cmp	r4, #1
 800292c:	d005      	beq.n	800293a <__aeabi_dsub+0x2c6>
 800292e:	4c1e      	ldr	r4, [pc, #120]	; (80029a8 <__aeabi_dsub+0x334>)
 8002930:	45a4      	cmp	ip, r4
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x2c2>
 8002934:	e094      	b.n	8002a60 <__aeabi_dsub+0x3ec>
 8002936:	4694      	mov	ip, r2
 8002938:	e759      	b.n	80027ee <__aeabi_dsub+0x17a>
 800293a:	4448      	add	r0, r9
 800293c:	4548      	cmp	r0, r9
 800293e:	4192      	sbcs	r2, r2
 8002940:	185b      	adds	r3, r3, r1
 8002942:	4698      	mov	r8, r3
 8002944:	0004      	movs	r4, r0
 8002946:	4252      	negs	r2, r2
 8002948:	4490      	add	r8, r2
 800294a:	4643      	mov	r3, r8
 800294c:	2602      	movs	r6, #2
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	d500      	bpl.n	8002954 <__aeabi_dsub+0x2e0>
 8002952:	e0c4      	b.n	8002ade <__aeabi_dsub+0x46a>
 8002954:	3e01      	subs	r6, #1
 8002956:	0763      	lsls	r3, r4, #29
 8002958:	d000      	beq.n	800295c <__aeabi_dsub+0x2e8>
 800295a:	e711      	b.n	8002780 <__aeabi_dsub+0x10c>
 800295c:	4643      	mov	r3, r8
 800295e:	46b4      	mov	ip, r6
 8002960:	0759      	lsls	r1, r3, #29
 8002962:	08e2      	lsrs	r2, r4, #3
 8002964:	430a      	orrs	r2, r1
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	490f      	ldr	r1, [pc, #60]	; (80029a8 <__aeabi_dsub+0x334>)
 800296a:	458c      	cmp	ip, r1
 800296c:	d040      	beq.n	80029f0 <__aeabi_dsub+0x37c>
 800296e:	4661      	mov	r1, ip
 8002970:	031b      	lsls	r3, r3, #12
 8002972:	0549      	lsls	r1, r1, #21
 8002974:	0b1b      	lsrs	r3, r3, #12
 8002976:	0d49      	lsrs	r1, r1, #21
 8002978:	e720      	b.n	80027bc <__aeabi_dsub+0x148>
 800297a:	4301      	orrs	r1, r0
 800297c:	000c      	movs	r4, r1
 800297e:	1e61      	subs	r1, r4, #1
 8002980:	418c      	sbcs	r4, r1
 8002982:	444c      	add	r4, r9
 8002984:	454c      	cmp	r4, r9
 8002986:	4192      	sbcs	r2, r2
 8002988:	4252      	negs	r2, r2
 800298a:	4690      	mov	r8, r2
 800298c:	4498      	add	r8, r3
 800298e:	4643      	mov	r3, r8
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	d5e0      	bpl.n	8002956 <__aeabi_dsub+0x2e2>
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__aeabi_dsub+0x334>)
 8002996:	3601      	adds	r6, #1
 8002998:	429e      	cmp	r6, r3
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x32a>
 800299c:	e09f      	b.n	8002ade <__aeabi_dsub+0x46a>
 800299e:	0031      	movs	r1, r6
 80029a0:	2300      	movs	r3, #0
 80029a2:	2200      	movs	r2, #0
 80029a4:	e70a      	b.n	80027bc <__aeabi_dsub+0x148>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	000007ff 	.word	0x000007ff
 80029ac:	ff7fffff 	.word	0xff7fffff
 80029b0:	fffff801 	.word	0xfffff801
 80029b4:	000007fe 	.word	0x000007fe
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x34a>
 80029bc:	e160      	b.n	8002c80 <__aeabi_dsub+0x60c>
 80029be:	000a      	movs	r2, r1
 80029c0:	4302      	orrs	r2, r0
 80029c2:	d04d      	beq.n	8002a60 <__aeabi_dsub+0x3ec>
 80029c4:	464a      	mov	r2, r9
 80029c6:	075c      	lsls	r4, r3, #29
 80029c8:	08d2      	lsrs	r2, r2, #3
 80029ca:	4322      	orrs	r2, r4
 80029cc:	2480      	movs	r4, #128	; 0x80
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	0324      	lsls	r4, r4, #12
 80029d2:	4223      	tst	r3, r4
 80029d4:	d007      	beq.n	80029e6 <__aeabi_dsub+0x372>
 80029d6:	08ce      	lsrs	r6, r1, #3
 80029d8:	4226      	tst	r6, r4
 80029da:	d104      	bne.n	80029e6 <__aeabi_dsub+0x372>
 80029dc:	465d      	mov	r5, fp
 80029de:	0033      	movs	r3, r6
 80029e0:	08c2      	lsrs	r2, r0, #3
 80029e2:	0749      	lsls	r1, r1, #29
 80029e4:	430a      	orrs	r2, r1
 80029e6:	0f51      	lsrs	r1, r2, #29
 80029e8:	00d2      	lsls	r2, r2, #3
 80029ea:	08d2      	lsrs	r2, r2, #3
 80029ec:	0749      	lsls	r1, r1, #29
 80029ee:	430a      	orrs	r2, r1
 80029f0:	0011      	movs	r1, r2
 80029f2:	4319      	orrs	r1, r3
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x384>
 80029f6:	e1c8      	b.n	8002d8a <__aeabi_dsub+0x716>
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	0309      	lsls	r1, r1, #12
 80029fc:	430b      	orrs	r3, r1
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	49d5      	ldr	r1, [pc, #852]	; (8002d58 <__aeabi_dsub+0x6e4>)
 8002a02:	0b1b      	lsrs	r3, r3, #12
 8002a04:	e6da      	b.n	80027bc <__aeabi_dsub+0x148>
 8002a06:	49d5      	ldr	r1, [pc, #852]	; (8002d5c <__aeabi_dsub+0x6e8>)
 8002a08:	1ab6      	subs	r6, r6, r2
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	4698      	mov	r8, r3
 8002a0e:	e6b5      	b.n	800277c <__aeabi_dsub+0x108>
 8002a10:	0020      	movs	r0, r4
 8002a12:	f000 fb3b 	bl	800308c <__clzsi2>
 8002a16:	0002      	movs	r2, r0
 8002a18:	3218      	adds	r2, #24
 8002a1a:	2a1f      	cmp	r2, #31
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dsub+0x3ac>
 8002a1e:	e68f      	b.n	8002740 <__aeabi_dsub+0xcc>
 8002a20:	0023      	movs	r3, r4
 8002a22:	3808      	subs	r0, #8
 8002a24:	4083      	lsls	r3, r0
 8002a26:	2400      	movs	r4, #0
 8002a28:	e692      	b.n	8002750 <__aeabi_dsub+0xdc>
 8002a2a:	4308      	orrs	r0, r1
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	1e50      	subs	r0, r2, #1
 8002a30:	4182      	sbcs	r2, r0
 8002a32:	e66d      	b.n	8002710 <__aeabi_dsub+0x9c>
 8002a34:	4cca      	ldr	r4, [pc, #808]	; (8002d60 <__aeabi_dsub+0x6ec>)
 8002a36:	1c72      	adds	r2, r6, #1
 8002a38:	4222      	tst	r2, r4
 8002a3a:	d000      	beq.n	8002a3e <__aeabi_dsub+0x3ca>
 8002a3c:	e0ad      	b.n	8002b9a <__aeabi_dsub+0x526>
 8002a3e:	464a      	mov	r2, r9
 8002a40:	431a      	orrs	r2, r3
 8002a42:	2e00      	cmp	r6, #0
 8002a44:	d1b8      	bne.n	80029b8 <__aeabi_dsub+0x344>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d100      	bne.n	8002a4c <__aeabi_dsub+0x3d8>
 8002a4a:	e158      	b.n	8002cfe <__aeabi_dsub+0x68a>
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	d000      	beq.n	8002a54 <__aeabi_dsub+0x3e0>
 8002a52:	e159      	b.n	8002d08 <__aeabi_dsub+0x694>
 8002a54:	464a      	mov	r2, r9
 8002a56:	0759      	lsls	r1, r3, #29
 8002a58:	08d2      	lsrs	r2, r2, #3
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	e786      	b.n	800296e <__aeabi_dsub+0x2fa>
 8002a60:	464a      	mov	r2, r9
 8002a62:	0759      	lsls	r1, r3, #29
 8002a64:	08d2      	lsrs	r2, r2, #3
 8002a66:	430a      	orrs	r2, r1
 8002a68:	08db      	lsrs	r3, r3, #3
 8002a6a:	e7c1      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002a6c:	4dba      	ldr	r5, [pc, #744]	; (8002d58 <__aeabi_dsub+0x6e4>)
 8002a6e:	42aa      	cmp	r2, r5
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x400>
 8002a72:	e11e      	b.n	8002cb2 <__aeabi_dsub+0x63e>
 8002a74:	2580      	movs	r5, #128	; 0x80
 8002a76:	042d      	lsls	r5, r5, #16
 8002a78:	432b      	orrs	r3, r5
 8002a7a:	4664      	mov	r4, ip
 8002a7c:	2c38      	cmp	r4, #56	; 0x38
 8002a7e:	dc5d      	bgt.n	8002b3c <__aeabi_dsub+0x4c8>
 8002a80:	2c1f      	cmp	r4, #31
 8002a82:	dd00      	ble.n	8002a86 <__aeabi_dsub+0x412>
 8002a84:	e0d0      	b.n	8002c28 <__aeabi_dsub+0x5b4>
 8002a86:	2520      	movs	r5, #32
 8002a88:	4667      	mov	r7, ip
 8002a8a:	1b2d      	subs	r5, r5, r4
 8002a8c:	464e      	mov	r6, r9
 8002a8e:	001c      	movs	r4, r3
 8002a90:	40fe      	lsrs	r6, r7
 8002a92:	40ac      	lsls	r4, r5
 8002a94:	4334      	orrs	r4, r6
 8002a96:	464e      	mov	r6, r9
 8002a98:	40ae      	lsls	r6, r5
 8002a9a:	0035      	movs	r5, r6
 8002a9c:	40fb      	lsrs	r3, r7
 8002a9e:	1e6e      	subs	r6, r5, #1
 8002aa0:	41b5      	sbcs	r5, r6
 8002aa2:	1ac9      	subs	r1, r1, r3
 8002aa4:	432c      	orrs	r4, r5
 8002aa6:	e04e      	b.n	8002b46 <__aeabi_dsub+0x4d2>
 8002aa8:	464a      	mov	r2, r9
 8002aaa:	1a14      	subs	r4, r2, r0
 8002aac:	45a1      	cmp	r9, r4
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	1a5f      	subs	r7, r3, r1
 8002ab6:	003a      	movs	r2, r7
 8002ab8:	4647      	mov	r7, r8
 8002aba:	1bd2      	subs	r2, r2, r7
 8002abc:	4690      	mov	r8, r2
 8002abe:	0212      	lsls	r2, r2, #8
 8002ac0:	d500      	bpl.n	8002ac4 <__aeabi_dsub+0x450>
 8002ac2:	e08b      	b.n	8002bdc <__aeabi_dsub+0x568>
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	d000      	beq.n	8002acc <__aeabi_dsub+0x458>
 8002aca:	e630      	b.n	800272e <__aeabi_dsub+0xba>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e74d      	b.n	800296e <__aeabi_dsub+0x2fa>
 8002ad2:	464a      	mov	r2, r9
 8002ad4:	0759      	lsls	r1, r3, #29
 8002ad6:	08d2      	lsrs	r2, r2, #3
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	08db      	lsrs	r3, r3, #3
 8002adc:	e744      	b.n	8002968 <__aeabi_dsub+0x2f4>
 8002ade:	4642      	mov	r2, r8
 8002ae0:	4b9e      	ldr	r3, [pc, #632]	; (8002d5c <__aeabi_dsub+0x6e8>)
 8002ae2:	0861      	lsrs	r1, r4, #1
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4014      	ands	r4, r2
 8002aec:	430c      	orrs	r4, r1
 8002aee:	07da      	lsls	r2, r3, #31
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	4698      	mov	r8, r3
 8002af4:	4314      	orrs	r4, r2
 8002af6:	e641      	b.n	800277c <__aeabi_dsub+0x108>
 8002af8:	001a      	movs	r2, r3
 8002afa:	3e1f      	subs	r6, #31
 8002afc:	40f2      	lsrs	r2, r6
 8002afe:	0016      	movs	r6, r2
 8002b00:	2920      	cmp	r1, #32
 8002b02:	d003      	beq.n	8002b0c <__aeabi_dsub+0x498>
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	1a51      	subs	r1, r2, r1
 8002b08:	408b      	lsls	r3, r1
 8002b0a:	431c      	orrs	r4, r3
 8002b0c:	1e62      	subs	r2, r4, #1
 8002b0e:	4194      	sbcs	r4, r2
 8002b10:	2300      	movs	r3, #0
 8002b12:	4334      	orrs	r4, r6
 8002b14:	4698      	mov	r8, r3
 8002b16:	2600      	movs	r6, #0
 8002b18:	e71d      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002b1a:	000c      	movs	r4, r1
 8002b1c:	3a20      	subs	r2, #32
 8002b1e:	40d4      	lsrs	r4, r2
 8002b20:	0022      	movs	r2, r4
 8002b22:	4664      	mov	r4, ip
 8002b24:	2c20      	cmp	r4, #32
 8002b26:	d004      	beq.n	8002b32 <__aeabi_dsub+0x4be>
 8002b28:	2740      	movs	r7, #64	; 0x40
 8002b2a:	1b3f      	subs	r7, r7, r4
 8002b2c:	40b9      	lsls	r1, r7
 8002b2e:	4308      	orrs	r0, r1
 8002b30:	4680      	mov	r8, r0
 8002b32:	4644      	mov	r4, r8
 8002b34:	1e61      	subs	r1, r4, #1
 8002b36:	418c      	sbcs	r4, r1
 8002b38:	4322      	orrs	r2, r4
 8002b3a:	e5e9      	b.n	8002710 <__aeabi_dsub+0x9c>
 8002b3c:	464c      	mov	r4, r9
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	001c      	movs	r4, r3
 8002b42:	1e63      	subs	r3, r4, #1
 8002b44:	419c      	sbcs	r4, r3
 8002b46:	1b04      	subs	r4, r0, r4
 8002b48:	42a0      	cmp	r0, r4
 8002b4a:	419b      	sbcs	r3, r3
 8002b4c:	425b      	negs	r3, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	4698      	mov	r8, r3
 8002b52:	465d      	mov	r5, fp
 8002b54:	0016      	movs	r6, r2
 8002b56:	e5e2      	b.n	800271e <__aeabi_dsub+0xaa>
 8002b58:	464e      	mov	r6, r9
 8002b5a:	431e      	orrs	r6, r3
 8002b5c:	d100      	bne.n	8002b60 <__aeabi_dsub+0x4ec>
 8002b5e:	e0ae      	b.n	8002cbe <__aeabi_dsub+0x64a>
 8002b60:	1e66      	subs	r6, r4, #1
 8002b62:	2c01      	cmp	r4, #1
 8002b64:	d100      	bne.n	8002b68 <__aeabi_dsub+0x4f4>
 8002b66:	e0fd      	b.n	8002d64 <__aeabi_dsub+0x6f0>
 8002b68:	4f7b      	ldr	r7, [pc, #492]	; (8002d58 <__aeabi_dsub+0x6e4>)
 8002b6a:	42bc      	cmp	r4, r7
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x4fc>
 8002b6e:	e107      	b.n	8002d80 <__aeabi_dsub+0x70c>
 8002b70:	46b4      	mov	ip, r6
 8002b72:	e69b      	b.n	80028ac <__aeabi_dsub+0x238>
 8002b74:	4664      	mov	r4, ip
 8002b76:	2220      	movs	r2, #32
 8002b78:	1b12      	subs	r2, r2, r4
 8002b7a:	000c      	movs	r4, r1
 8002b7c:	4094      	lsls	r4, r2
 8002b7e:	0007      	movs	r7, r0
 8002b80:	4090      	lsls	r0, r2
 8002b82:	46a0      	mov	r8, r4
 8002b84:	4664      	mov	r4, ip
 8002b86:	1e42      	subs	r2, r0, #1
 8002b88:	4190      	sbcs	r0, r2
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	40e7      	lsrs	r7, r4
 8002b8e:	4644      	mov	r4, r8
 8002b90:	40d1      	lsrs	r1, r2
 8002b92:	433c      	orrs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	185b      	adds	r3, r3, r1
 8002b98:	e6f3      	b.n	8002982 <__aeabi_dsub+0x30e>
 8002b9a:	4c6f      	ldr	r4, [pc, #444]	; (8002d58 <__aeabi_dsub+0x6e4>)
 8002b9c:	42a2      	cmp	r2, r4
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x52e>
 8002ba0:	e0d5      	b.n	8002d4e <__aeabi_dsub+0x6da>
 8002ba2:	4448      	add	r0, r9
 8002ba4:	185b      	adds	r3, r3, r1
 8002ba6:	4548      	cmp	r0, r9
 8002ba8:	4189      	sbcs	r1, r1
 8002baa:	4249      	negs	r1, r1
 8002bac:	185b      	adds	r3, r3, r1
 8002bae:	07dc      	lsls	r4, r3, #31
 8002bb0:	0840      	lsrs	r0, r0, #1
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	4698      	mov	r8, r3
 8002bb6:	0016      	movs	r6, r2
 8002bb8:	4304      	orrs	r4, r0
 8002bba:	e6cc      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002bbc:	2a00      	cmp	r2, #0
 8002bbe:	d000      	beq.n	8002bc2 <__aeabi_dsub+0x54e>
 8002bc0:	e082      	b.n	8002cc8 <__aeabi_dsub+0x654>
 8002bc2:	000a      	movs	r2, r1
 8002bc4:	4302      	orrs	r2, r0
 8002bc6:	d140      	bne.n	8002c4a <__aeabi_dsub+0x5d6>
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	2500      	movs	r5, #0
 8002bcc:	031b      	lsls	r3, r3, #12
 8002bce:	e713      	b.n	80029f8 <__aeabi_dsub+0x384>
 8002bd0:	074b      	lsls	r3, r1, #29
 8002bd2:	08c2      	lsrs	r2, r0, #3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	465d      	mov	r5, fp
 8002bd8:	08cb      	lsrs	r3, r1, #3
 8002bda:	e6c5      	b.n	8002968 <__aeabi_dsub+0x2f4>
 8002bdc:	464a      	mov	r2, r9
 8002bde:	1a84      	subs	r4, r0, r2
 8002be0:	42a0      	cmp	r0, r4
 8002be2:	4192      	sbcs	r2, r2
 8002be4:	1acb      	subs	r3, r1, r3
 8002be6:	4252      	negs	r2, r2
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	4698      	mov	r8, r3
 8002bec:	465d      	mov	r5, fp
 8002bee:	e59e      	b.n	800272e <__aeabi_dsub+0xba>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	0759      	lsls	r1, r3, #29
 8002bf4:	08d2      	lsrs	r2, r2, #3
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	e6f9      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002bfc:	464a      	mov	r2, r9
 8002bfe:	1a14      	subs	r4, r2, r0
 8002c00:	45a1      	cmp	r9, r4
 8002c02:	4192      	sbcs	r2, r2
 8002c04:	1a5b      	subs	r3, r3, r1
 8002c06:	4252      	negs	r2, r2
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	4698      	mov	r8, r3
 8002c0c:	2601      	movs	r6, #1
 8002c0e:	e586      	b.n	800271e <__aeabi_dsub+0xaa>
 8002c10:	464a      	mov	r2, r9
 8002c12:	0759      	lsls	r1, r3, #29
 8002c14:	08d2      	lsrs	r2, r2, #3
 8002c16:	430a      	orrs	r2, r1
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	e6a5      	b.n	8002968 <__aeabi_dsub+0x2f4>
 8002c1c:	464c      	mov	r4, r9
 8002c1e:	4323      	orrs	r3, r4
 8002c20:	001c      	movs	r4, r3
 8002c22:	1e63      	subs	r3, r4, #1
 8002c24:	419c      	sbcs	r4, r3
 8002c26:	e65b      	b.n	80028e0 <__aeabi_dsub+0x26c>
 8002c28:	4665      	mov	r5, ip
 8002c2a:	001e      	movs	r6, r3
 8002c2c:	3d20      	subs	r5, #32
 8002c2e:	40ee      	lsrs	r6, r5
 8002c30:	2c20      	cmp	r4, #32
 8002c32:	d005      	beq.n	8002c40 <__aeabi_dsub+0x5cc>
 8002c34:	2540      	movs	r5, #64	; 0x40
 8002c36:	1b2d      	subs	r5, r5, r4
 8002c38:	40ab      	lsls	r3, r5
 8002c3a:	464c      	mov	r4, r9
 8002c3c:	431c      	orrs	r4, r3
 8002c3e:	46a2      	mov	sl, r4
 8002c40:	4654      	mov	r4, sl
 8002c42:	1e63      	subs	r3, r4, #1
 8002c44:	419c      	sbcs	r4, r3
 8002c46:	4334      	orrs	r4, r6
 8002c48:	e77d      	b.n	8002b46 <__aeabi_dsub+0x4d2>
 8002c4a:	074b      	lsls	r3, r1, #29
 8002c4c:	08c2      	lsrs	r2, r0, #3
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	465d      	mov	r5, fp
 8002c52:	08cb      	lsrs	r3, r1, #3
 8002c54:	e6cc      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002c56:	000a      	movs	r2, r1
 8002c58:	4302      	orrs	r2, r0
 8002c5a:	d100      	bne.n	8002c5e <__aeabi_dsub+0x5ea>
 8002c5c:	e736      	b.n	8002acc <__aeabi_dsub+0x458>
 8002c5e:	074b      	lsls	r3, r1, #29
 8002c60:	08c2      	lsrs	r2, r0, #3
 8002c62:	431a      	orrs	r2, r3
 8002c64:	465d      	mov	r5, fp
 8002c66:	08cb      	lsrs	r3, r1, #3
 8002c68:	e681      	b.n	800296e <__aeabi_dsub+0x2fa>
 8002c6a:	464a      	mov	r2, r9
 8002c6c:	1a84      	subs	r4, r0, r2
 8002c6e:	42a0      	cmp	r0, r4
 8002c70:	4192      	sbcs	r2, r2
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	4252      	negs	r2, r2
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	4698      	mov	r8, r3
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	2601      	movs	r6, #1
 8002c7e:	e54e      	b.n	800271e <__aeabi_dsub+0xaa>
 8002c80:	074b      	lsls	r3, r1, #29
 8002c82:	08c2      	lsrs	r2, r0, #3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	08cb      	lsrs	r3, r1, #3
 8002c88:	e6b2      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002c8a:	464a      	mov	r2, r9
 8002c8c:	1a14      	subs	r4, r2, r0
 8002c8e:	45a1      	cmp	r9, r4
 8002c90:	4192      	sbcs	r2, r2
 8002c92:	1a5f      	subs	r7, r3, r1
 8002c94:	4252      	negs	r2, r2
 8002c96:	1aba      	subs	r2, r7, r2
 8002c98:	4690      	mov	r8, r2
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	d56b      	bpl.n	8002d76 <__aeabi_dsub+0x702>
 8002c9e:	464a      	mov	r2, r9
 8002ca0:	1a84      	subs	r4, r0, r2
 8002ca2:	42a0      	cmp	r0, r4
 8002ca4:	4192      	sbcs	r2, r2
 8002ca6:	1acb      	subs	r3, r1, r3
 8002ca8:	4252      	negs	r2, r2
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	4698      	mov	r8, r3
 8002cae:	465d      	mov	r5, fp
 8002cb0:	e564      	b.n	800277c <__aeabi_dsub+0x108>
 8002cb2:	074b      	lsls	r3, r1, #29
 8002cb4:	08c2      	lsrs	r2, r0, #3
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	465d      	mov	r5, fp
 8002cba:	08cb      	lsrs	r3, r1, #3
 8002cbc:	e698      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002cbe:	074b      	lsls	r3, r1, #29
 8002cc0:	08c2      	lsrs	r2, r0, #3
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	08cb      	lsrs	r3, r1, #3
 8002cc6:	e64f      	b.n	8002968 <__aeabi_dsub+0x2f4>
 8002cc8:	000a      	movs	r2, r1
 8002cca:	4302      	orrs	r2, r0
 8002ccc:	d090      	beq.n	8002bf0 <__aeabi_dsub+0x57c>
 8002cce:	464a      	mov	r2, r9
 8002cd0:	075c      	lsls	r4, r3, #29
 8002cd2:	08d2      	lsrs	r2, r2, #3
 8002cd4:	4314      	orrs	r4, r2
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	0312      	lsls	r2, r2, #12
 8002cdc:	4213      	tst	r3, r2
 8002cde:	d008      	beq.n	8002cf2 <__aeabi_dsub+0x67e>
 8002ce0:	08ce      	lsrs	r6, r1, #3
 8002ce2:	4216      	tst	r6, r2
 8002ce4:	d105      	bne.n	8002cf2 <__aeabi_dsub+0x67e>
 8002ce6:	08c0      	lsrs	r0, r0, #3
 8002ce8:	0749      	lsls	r1, r1, #29
 8002cea:	4308      	orrs	r0, r1
 8002cec:	0004      	movs	r4, r0
 8002cee:	465d      	mov	r5, fp
 8002cf0:	0033      	movs	r3, r6
 8002cf2:	0f61      	lsrs	r1, r4, #29
 8002cf4:	00e2      	lsls	r2, r4, #3
 8002cf6:	0749      	lsls	r1, r1, #29
 8002cf8:	08d2      	lsrs	r2, r2, #3
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	e678      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002cfe:	074b      	lsls	r3, r1, #29
 8002d00:	08c2      	lsrs	r2, r0, #3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	08cb      	lsrs	r3, r1, #3
 8002d06:	e632      	b.n	800296e <__aeabi_dsub+0x2fa>
 8002d08:	4448      	add	r0, r9
 8002d0a:	185b      	adds	r3, r3, r1
 8002d0c:	4548      	cmp	r0, r9
 8002d0e:	4192      	sbcs	r2, r2
 8002d10:	4698      	mov	r8, r3
 8002d12:	4252      	negs	r2, r2
 8002d14:	4490      	add	r8, r2
 8002d16:	4643      	mov	r3, r8
 8002d18:	0004      	movs	r4, r0
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	d400      	bmi.n	8002d20 <__aeabi_dsub+0x6ac>
 8002d1e:	e61a      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002d20:	4642      	mov	r2, r8
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <__aeabi_dsub+0x6e8>)
 8002d24:	2601      	movs	r6, #1
 8002d26:	401a      	ands	r2, r3
 8002d28:	4690      	mov	r8, r2
 8002d2a:	e614      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002d2c:	4666      	mov	r6, ip
 8002d2e:	001f      	movs	r7, r3
 8002d30:	3e20      	subs	r6, #32
 8002d32:	40f7      	lsrs	r7, r6
 8002d34:	2c20      	cmp	r4, #32
 8002d36:	d005      	beq.n	8002d44 <__aeabi_dsub+0x6d0>
 8002d38:	2640      	movs	r6, #64	; 0x40
 8002d3a:	1b36      	subs	r6, r6, r4
 8002d3c:	40b3      	lsls	r3, r6
 8002d3e:	464c      	mov	r4, r9
 8002d40:	431c      	orrs	r4, r3
 8002d42:	46a2      	mov	sl, r4
 8002d44:	4654      	mov	r4, sl
 8002d46:	1e63      	subs	r3, r4, #1
 8002d48:	419c      	sbcs	r4, r3
 8002d4a:	433c      	orrs	r4, r7
 8002d4c:	e5c8      	b.n	80028e0 <__aeabi_dsub+0x26c>
 8002d4e:	0011      	movs	r1, r2
 8002d50:	2300      	movs	r3, #0
 8002d52:	2200      	movs	r2, #0
 8002d54:	e532      	b.n	80027bc <__aeabi_dsub+0x148>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff
 8002d5c:	ff7fffff 	.word	0xff7fffff
 8002d60:	000007fe 	.word	0x000007fe
 8002d64:	464a      	mov	r2, r9
 8002d66:	1814      	adds	r4, r2, r0
 8002d68:	4284      	cmp	r4, r0
 8002d6a:	4192      	sbcs	r2, r2
 8002d6c:	185b      	adds	r3, r3, r1
 8002d6e:	4698      	mov	r8, r3
 8002d70:	4252      	negs	r2, r2
 8002d72:	4490      	add	r8, r2
 8002d74:	e5e9      	b.n	800294a <__aeabi_dsub+0x2d6>
 8002d76:	4642      	mov	r2, r8
 8002d78:	4322      	orrs	r2, r4
 8002d7a:	d100      	bne.n	8002d7e <__aeabi_dsub+0x70a>
 8002d7c:	e6a6      	b.n	8002acc <__aeabi_dsub+0x458>
 8002d7e:	e5ea      	b.n	8002956 <__aeabi_dsub+0x2e2>
 8002d80:	074b      	lsls	r3, r1, #29
 8002d82:	08c2      	lsrs	r2, r0, #3
 8002d84:	431a      	orrs	r2, r3
 8002d86:	08cb      	lsrs	r3, r1, #3
 8002d88:	e632      	b.n	80029f0 <__aeabi_dsub+0x37c>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4901      	ldr	r1, [pc, #4]	; (8002d94 <__aeabi_dsub+0x720>)
 8002d8e:	0013      	movs	r3, r2
 8002d90:	e514      	b.n	80027bc <__aeabi_dsub+0x148>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_dcmpun>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	0005      	movs	r5, r0
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <__aeabi_dcmpun+0x38>)
 8002d9e:	030c      	lsls	r4, r1, #12
 8002da0:	0016      	movs	r6, r2
 8002da2:	0049      	lsls	r1, r1, #1
 8002da4:	031a      	lsls	r2, r3, #12
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	0b24      	lsrs	r4, r4, #12
 8002daa:	0d49      	lsrs	r1, r1, #21
 8002dac:	0b12      	lsrs	r2, r2, #12
 8002dae:	0d5b      	lsrs	r3, r3, #21
 8002db0:	4281      	cmp	r1, r0
 8002db2:	d008      	beq.n	8002dc6 <__aeabi_dcmpun+0x2e>
 8002db4:	4906      	ldr	r1, [pc, #24]	; (8002dd0 <__aeabi_dcmpun+0x38>)
 8002db6:	2000      	movs	r0, #0
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d103      	bne.n	8002dc4 <__aeabi_dcmpun+0x2c>
 8002dbc:	4332      	orrs	r2, r6
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	1e42      	subs	r2, r0, #1
 8002dc2:	4190      	sbcs	r0, r2
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	432c      	orrs	r4, r5
 8002dca:	d1fb      	bne.n	8002dc4 <__aeabi_dcmpun+0x2c>
 8002dcc:	e7f2      	b.n	8002db4 <__aeabi_dcmpun+0x1c>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	000007ff 	.word	0x000007ff

08002dd4 <__aeabi_d2iz>:
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	b530      	push	{r4, r5, lr}
 8002dd8:	4c13      	ldr	r4, [pc, #76]	; (8002e28 <__aeabi_d2iz+0x54>)
 8002dda:	0053      	lsls	r3, r2, #1
 8002ddc:	0309      	lsls	r1, r1, #12
 8002dde:	0005      	movs	r5, r0
 8002de0:	0b09      	lsrs	r1, r1, #12
 8002de2:	2000      	movs	r0, #0
 8002de4:	0d5b      	lsrs	r3, r3, #21
 8002de6:	0fd2      	lsrs	r2, r2, #31
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	dd04      	ble.n	8002df6 <__aeabi_d2iz+0x22>
 8002dec:	480f      	ldr	r0, [pc, #60]	; (8002e2c <__aeabi_d2iz+0x58>)
 8002dee:	4283      	cmp	r3, r0
 8002df0:	dd02      	ble.n	8002df8 <__aeabi_d2iz+0x24>
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <__aeabi_d2iz+0x5c>)
 8002df4:	18d0      	adds	r0, r2, r3
 8002df6:	bd30      	pop	{r4, r5, pc}
 8002df8:	2080      	movs	r0, #128	; 0x80
 8002dfa:	0340      	lsls	r0, r0, #13
 8002dfc:	4301      	orrs	r1, r0
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <__aeabi_d2iz+0x60>)
 8002e00:	1ac0      	subs	r0, r0, r3
 8002e02:	281f      	cmp	r0, #31
 8002e04:	dd08      	ble.n	8002e18 <__aeabi_d2iz+0x44>
 8002e06:	480c      	ldr	r0, [pc, #48]	; (8002e38 <__aeabi_d2iz+0x64>)
 8002e08:	1ac3      	subs	r3, r0, r3
 8002e0a:	40d9      	lsrs	r1, r3
 8002e0c:	000b      	movs	r3, r1
 8002e0e:	4258      	negs	r0, r3
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d1f0      	bne.n	8002df6 <__aeabi_d2iz+0x22>
 8002e14:	0018      	movs	r0, r3
 8002e16:	e7ee      	b.n	8002df6 <__aeabi_d2iz+0x22>
 8002e18:	4c08      	ldr	r4, [pc, #32]	; (8002e3c <__aeabi_d2iz+0x68>)
 8002e1a:	40c5      	lsrs	r5, r0
 8002e1c:	46a4      	mov	ip, r4
 8002e1e:	4463      	add	r3, ip
 8002e20:	4099      	lsls	r1, r3
 8002e22:	000b      	movs	r3, r1
 8002e24:	432b      	orrs	r3, r5
 8002e26:	e7f2      	b.n	8002e0e <__aeabi_d2iz+0x3a>
 8002e28:	000003fe 	.word	0x000003fe
 8002e2c:	0000041d 	.word	0x0000041d
 8002e30:	7fffffff 	.word	0x7fffffff
 8002e34:	00000433 	.word	0x00000433
 8002e38:	00000413 	.word	0x00000413
 8002e3c:	fffffbed 	.word	0xfffffbed

08002e40 <__aeabi_i2d>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d016      	beq.n	8002e74 <__aeabi_i2d+0x34>
 8002e46:	17c3      	asrs	r3, r0, #31
 8002e48:	18c5      	adds	r5, r0, r3
 8002e4a:	405d      	eors	r5, r3
 8002e4c:	0fc4      	lsrs	r4, r0, #31
 8002e4e:	0028      	movs	r0, r5
 8002e50:	f000 f91c 	bl	800308c <__clzsi2>
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <__aeabi_i2d+0x5c>)
 8002e56:	1a12      	subs	r2, r2, r0
 8002e58:	280a      	cmp	r0, #10
 8002e5a:	dc16      	bgt.n	8002e8a <__aeabi_i2d+0x4a>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	002e      	movs	r6, r5
 8002e60:	3315      	adds	r3, #21
 8002e62:	409e      	lsls	r6, r3
 8002e64:	230b      	movs	r3, #11
 8002e66:	1a18      	subs	r0, r3, r0
 8002e68:	40c5      	lsrs	r5, r0
 8002e6a:	0553      	lsls	r3, r2, #21
 8002e6c:	032d      	lsls	r5, r5, #12
 8002e6e:	0b2d      	lsrs	r5, r5, #12
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	e003      	b.n	8002e7c <__aeabi_i2d+0x3c>
 8002e74:	2400      	movs	r4, #0
 8002e76:	2300      	movs	r3, #0
 8002e78:	2500      	movs	r5, #0
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	051b      	lsls	r3, r3, #20
 8002e7e:	432b      	orrs	r3, r5
 8002e80:	07e4      	lsls	r4, r4, #31
 8002e82:	4323      	orrs	r3, r4
 8002e84:	0030      	movs	r0, r6
 8002e86:	0019      	movs	r1, r3
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	380b      	subs	r0, #11
 8002e8c:	4085      	lsls	r5, r0
 8002e8e:	0553      	lsls	r3, r2, #21
 8002e90:	032d      	lsls	r5, r5, #12
 8002e92:	2600      	movs	r6, #0
 8002e94:	0b2d      	lsrs	r5, r5, #12
 8002e96:	0d5b      	lsrs	r3, r3, #21
 8002e98:	e7f0      	b.n	8002e7c <__aeabi_i2d+0x3c>
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	0000041e 	.word	0x0000041e

08002ea0 <__aeabi_ui2d>:
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	1e04      	subs	r4, r0, #0
 8002ea4:	d010      	beq.n	8002ec8 <__aeabi_ui2d+0x28>
 8002ea6:	f000 f8f1 	bl	800308c <__clzsi2>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <__aeabi_ui2d+0x48>)
 8002eac:	1a1b      	subs	r3, r3, r0
 8002eae:	280a      	cmp	r0, #10
 8002eb0:	dc11      	bgt.n	8002ed6 <__aeabi_ui2d+0x36>
 8002eb2:	220b      	movs	r2, #11
 8002eb4:	0021      	movs	r1, r4
 8002eb6:	1a12      	subs	r2, r2, r0
 8002eb8:	40d1      	lsrs	r1, r2
 8002eba:	3015      	adds	r0, #21
 8002ebc:	030a      	lsls	r2, r1, #12
 8002ebe:	055b      	lsls	r3, r3, #21
 8002ec0:	4084      	lsls	r4, r0
 8002ec2:	0b12      	lsrs	r2, r2, #12
 8002ec4:	0d5b      	lsrs	r3, r3, #21
 8002ec6:	e001      	b.n	8002ecc <__aeabi_ui2d+0x2c>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2200      	movs	r2, #0
 8002ecc:	051b      	lsls	r3, r3, #20
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	0020      	movs	r0, r4
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	0022      	movs	r2, r4
 8002ed8:	380b      	subs	r0, #11
 8002eda:	4082      	lsls	r2, r0
 8002edc:	055b      	lsls	r3, r3, #21
 8002ede:	0312      	lsls	r2, r2, #12
 8002ee0:	2400      	movs	r4, #0
 8002ee2:	0b12      	lsrs	r2, r2, #12
 8002ee4:	0d5b      	lsrs	r3, r3, #21
 8002ee6:	e7f1      	b.n	8002ecc <__aeabi_ui2d+0x2c>
 8002ee8:	0000041e 	.word	0x0000041e

08002eec <__aeabi_f2d>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	0043      	lsls	r3, r0, #1
 8002ef0:	0246      	lsls	r6, r0, #9
 8002ef2:	0fc4      	lsrs	r4, r0, #31
 8002ef4:	20fe      	movs	r0, #254	; 0xfe
 8002ef6:	0e1b      	lsrs	r3, r3, #24
 8002ef8:	1c59      	adds	r1, r3, #1
 8002efa:	0a75      	lsrs	r5, r6, #9
 8002efc:	4208      	tst	r0, r1
 8002efe:	d00c      	beq.n	8002f1a <__aeabi_f2d+0x2e>
 8002f00:	22e0      	movs	r2, #224	; 0xe0
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4694      	mov	ip, r2
 8002f06:	076d      	lsls	r5, r5, #29
 8002f08:	0b36      	lsrs	r6, r6, #12
 8002f0a:	4463      	add	r3, ip
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	4333      	orrs	r3, r6
 8002f10:	07e4      	lsls	r4, r4, #31
 8002f12:	4323      	orrs	r3, r4
 8002f14:	0028      	movs	r0, r5
 8002f16:	0019      	movs	r1, r3
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d114      	bne.n	8002f48 <__aeabi_f2d+0x5c>
 8002f1e:	2d00      	cmp	r5, #0
 8002f20:	d01b      	beq.n	8002f5a <__aeabi_f2d+0x6e>
 8002f22:	0028      	movs	r0, r5
 8002f24:	f000 f8b2 	bl	800308c <__clzsi2>
 8002f28:	280a      	cmp	r0, #10
 8002f2a:	dc1c      	bgt.n	8002f66 <__aeabi_f2d+0x7a>
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	002a      	movs	r2, r5
 8002f30:	1a1b      	subs	r3, r3, r0
 8002f32:	40da      	lsrs	r2, r3
 8002f34:	0003      	movs	r3, r0
 8002f36:	3315      	adds	r3, #21
 8002f38:	409d      	lsls	r5, r3
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <__aeabi_f2d+0x88>)
 8002f3c:	0312      	lsls	r2, r2, #12
 8002f3e:	1a1b      	subs	r3, r3, r0
 8002f40:	055b      	lsls	r3, r3, #21
 8002f42:	0b16      	lsrs	r6, r2, #12
 8002f44:	0d5b      	lsrs	r3, r3, #21
 8002f46:	e7e1      	b.n	8002f0c <__aeabi_f2d+0x20>
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	d009      	beq.n	8002f60 <__aeabi_f2d+0x74>
 8002f4c:	0b32      	lsrs	r2, r6, #12
 8002f4e:	2680      	movs	r6, #128	; 0x80
 8002f50:	0336      	lsls	r6, r6, #12
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <__aeabi_f2d+0x8c>)
 8002f54:	076d      	lsls	r5, r5, #29
 8002f56:	4316      	orrs	r6, r2
 8002f58:	e7d8      	b.n	8002f0c <__aeabi_f2d+0x20>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2600      	movs	r6, #0
 8002f5e:	e7d5      	b.n	8002f0c <__aeabi_f2d+0x20>
 8002f60:	2600      	movs	r6, #0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <__aeabi_f2d+0x8c>)
 8002f64:	e7d2      	b.n	8002f0c <__aeabi_f2d+0x20>
 8002f66:	0003      	movs	r3, r0
 8002f68:	002a      	movs	r2, r5
 8002f6a:	3b0b      	subs	r3, #11
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	2500      	movs	r5, #0
 8002f70:	e7e3      	b.n	8002f3a <__aeabi_f2d+0x4e>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	00000389 	.word	0x00000389
 8002f78:	000007ff 	.word	0x000007ff

08002f7c <__aeabi_d2f>:
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	004b      	lsls	r3, r1, #1
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f82:	0308      	lsls	r0, r1, #12
 8002f84:	0d5b      	lsrs	r3, r3, #21
 8002f86:	4e3d      	ldr	r6, [pc, #244]	; (800307c <__aeabi_d2f+0x100>)
 8002f88:	0fcc      	lsrs	r4, r1, #31
 8002f8a:	0a40      	lsrs	r0, r0, #9
 8002f8c:	0f51      	lsrs	r1, r2, #29
 8002f8e:	1c5f      	adds	r7, r3, #1
 8002f90:	4308      	orrs	r0, r1
 8002f92:	00d5      	lsls	r5, r2, #3
 8002f94:	4237      	tst	r7, r6
 8002f96:	d00a      	beq.n	8002fae <__aeabi_d2f+0x32>
 8002f98:	4939      	ldr	r1, [pc, #228]	; (8003080 <__aeabi_d2f+0x104>)
 8002f9a:	185e      	adds	r6, r3, r1
 8002f9c:	2efe      	cmp	r6, #254	; 0xfe
 8002f9e:	dd16      	ble.n	8002fce <__aeabi_d2f+0x52>
 8002fa0:	23ff      	movs	r3, #255	; 0xff
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	07e0      	lsls	r0, r4, #31
 8002faa:	4318      	orrs	r0, r3
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <__aeabi_d2f+0x44>
 8002fb2:	4328      	orrs	r0, r5
 8002fb4:	d027      	beq.n	8003006 <__aeabi_d2f+0x8a>
 8002fb6:	2105      	movs	r1, #5
 8002fb8:	0189      	lsls	r1, r1, #6
 8002fba:	0a49      	lsrs	r1, r1, #9
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e7f1      	b.n	8002fa4 <__aeabi_d2f+0x28>
 8002fc0:	4305      	orrs	r5, r0
 8002fc2:	d0ed      	beq.n	8002fa0 <__aeabi_d2f+0x24>
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	03c9      	lsls	r1, r1, #15
 8002fc8:	23ff      	movs	r3, #255	; 0xff
 8002fca:	4301      	orrs	r1, r0
 8002fcc:	e7ea      	b.n	8002fa4 <__aeabi_d2f+0x28>
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	dd1c      	ble.n	800300c <__aeabi_d2f+0x90>
 8002fd2:	0192      	lsls	r2, r2, #6
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	1e4a      	subs	r2, r1, #1
 8002fd8:	4191      	sbcs	r1, r2
 8002fda:	00c0      	lsls	r0, r0, #3
 8002fdc:	0f6d      	lsrs	r5, r5, #29
 8002fde:	4301      	orrs	r1, r0
 8002fe0:	4329      	orrs	r1, r5
 8002fe2:	074b      	lsls	r3, r1, #29
 8002fe4:	d048      	beq.n	8003078 <__aeabi_d2f+0xfc>
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	400b      	ands	r3, r1
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d000      	beq.n	8002ff0 <__aeabi_d2f+0x74>
 8002fee:	3104      	adds	r1, #4
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	04db      	lsls	r3, r3, #19
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	d03f      	beq.n	8003078 <__aeabi_d2f+0xfc>
 8002ff8:	1c72      	adds	r2, r6, #1
 8002ffa:	2efe      	cmp	r6, #254	; 0xfe
 8002ffc:	d0d0      	beq.n	8002fa0 <__aeabi_d2f+0x24>
 8002ffe:	0189      	lsls	r1, r1, #6
 8003000:	0a49      	lsrs	r1, r1, #9
 8003002:	b2d3      	uxtb	r3, r2
 8003004:	e7ce      	b.n	8002fa4 <__aeabi_d2f+0x28>
 8003006:	2300      	movs	r3, #0
 8003008:	2100      	movs	r1, #0
 800300a:	e7cb      	b.n	8002fa4 <__aeabi_d2f+0x28>
 800300c:	0032      	movs	r2, r6
 800300e:	3217      	adds	r2, #23
 8003010:	db22      	blt.n	8003058 <__aeabi_d2f+0xdc>
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	221e      	movs	r2, #30
 8003016:	0409      	lsls	r1, r1, #16
 8003018:	4308      	orrs	r0, r1
 800301a:	1b92      	subs	r2, r2, r6
 800301c:	2a1f      	cmp	r2, #31
 800301e:	dd1d      	ble.n	800305c <__aeabi_d2f+0xe0>
 8003020:	2102      	movs	r1, #2
 8003022:	4249      	negs	r1, r1
 8003024:	1b8e      	subs	r6, r1, r6
 8003026:	0001      	movs	r1, r0
 8003028:	40f1      	lsrs	r1, r6
 800302a:	000e      	movs	r6, r1
 800302c:	2a20      	cmp	r2, #32
 800302e:	d004      	beq.n	800303a <__aeabi_d2f+0xbe>
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <__aeabi_d2f+0x108>)
 8003032:	4694      	mov	ip, r2
 8003034:	4463      	add	r3, ip
 8003036:	4098      	lsls	r0, r3
 8003038:	4305      	orrs	r5, r0
 800303a:	0029      	movs	r1, r5
 800303c:	1e4d      	subs	r5, r1, #1
 800303e:	41a9      	sbcs	r1, r5
 8003040:	4331      	orrs	r1, r6
 8003042:	2600      	movs	r6, #0
 8003044:	074b      	lsls	r3, r1, #29
 8003046:	d1ce      	bne.n	8002fe6 <__aeabi_d2f+0x6a>
 8003048:	2080      	movs	r0, #128	; 0x80
 800304a:	000b      	movs	r3, r1
 800304c:	04c0      	lsls	r0, r0, #19
 800304e:	2201      	movs	r2, #1
 8003050:	4003      	ands	r3, r0
 8003052:	4201      	tst	r1, r0
 8003054:	d1d3      	bne.n	8002ffe <__aeabi_d2f+0x82>
 8003056:	e7af      	b.n	8002fb8 <__aeabi_d2f+0x3c>
 8003058:	2300      	movs	r3, #0
 800305a:	e7ac      	b.n	8002fb6 <__aeabi_d2f+0x3a>
 800305c:	490a      	ldr	r1, [pc, #40]	; (8003088 <__aeabi_d2f+0x10c>)
 800305e:	468c      	mov	ip, r1
 8003060:	0029      	movs	r1, r5
 8003062:	4463      	add	r3, ip
 8003064:	40d1      	lsrs	r1, r2
 8003066:	409d      	lsls	r5, r3
 8003068:	000a      	movs	r2, r1
 800306a:	0029      	movs	r1, r5
 800306c:	4098      	lsls	r0, r3
 800306e:	1e4d      	subs	r5, r1, #1
 8003070:	41a9      	sbcs	r1, r5
 8003072:	4301      	orrs	r1, r0
 8003074:	4311      	orrs	r1, r2
 8003076:	e7e4      	b.n	8003042 <__aeabi_d2f+0xc6>
 8003078:	0033      	movs	r3, r6
 800307a:	e79d      	b.n	8002fb8 <__aeabi_d2f+0x3c>
 800307c:	000007fe 	.word	0x000007fe
 8003080:	fffffc80 	.word	0xfffffc80
 8003084:	fffffca2 	.word	0xfffffca2
 8003088:	fffffc82 	.word	0xfffffc82

0800308c <__clzsi2>:
 800308c:	211c      	movs	r1, #28
 800308e:	2301      	movs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	4298      	cmp	r0, r3
 8003094:	d301      	bcc.n	800309a <__clzsi2+0xe>
 8003096:	0c00      	lsrs	r0, r0, #16
 8003098:	3910      	subs	r1, #16
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	4298      	cmp	r0, r3
 800309e:	d301      	bcc.n	80030a4 <__clzsi2+0x18>
 80030a0:	0a00      	lsrs	r0, r0, #8
 80030a2:	3908      	subs	r1, #8
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	4298      	cmp	r0, r3
 80030a8:	d301      	bcc.n	80030ae <__clzsi2+0x22>
 80030aa:	0900      	lsrs	r0, r0, #4
 80030ac:	3904      	subs	r1, #4
 80030ae:	a202      	add	r2, pc, #8	; (adr r2, 80030b8 <__clzsi2+0x2c>)
 80030b0:	5c10      	ldrb	r0, [r2, r0]
 80030b2:	1840      	adds	r0, r0, r1
 80030b4:	4770      	bx	lr
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	02020304 	.word	0x02020304
 80030bc:	01010101 	.word	0x01010101
	...

080030c8 <__clzdi2>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d103      	bne.n	80030d6 <__clzdi2+0xe>
 80030ce:	f7ff ffdd 	bl	800308c <__clzsi2>
 80030d2:	3020      	adds	r0, #32
 80030d4:	e002      	b.n	80030dc <__clzdi2+0x14>
 80030d6:	1c08      	adds	r0, r1, #0
 80030d8:	f7ff ffd8 	bl	800308c <__clzsi2>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	46c0      	nop			; (mov r8, r8)

080030e0 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 80030e4:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 80030e6:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d100      	bne.n	80030ee <minArr+0xe>
		smallest = arr[0];
 80030ec:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <minArr+0x38>)
 80030f0:	781e      	ldrb	r6, [r3, #0]
 80030f2:	2e00      	cmp	r6, #0
 80030f4:	dd0e      	ble.n	8003114 <minArr+0x34>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2000      	movs	r0, #0
 80030fa:	e002      	b.n	8003102 <minArr+0x22>
 80030fc:	3301      	adds	r3, #1
 80030fe:	42b3      	cmp	r3, r6
 8003100:	da09      	bge.n	8003116 <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 8003102:	5cea      	ldrb	r2, [r5, r3]
 8003104:	42a2      	cmp	r2, r4
 8003106:	d2f9      	bcs.n	80030fc <minArr+0x1c>
 8003108:	5ccf      	ldrb	r7, [r1, r3]
 800310a:	2f00      	cmp	r7, #0
 800310c:	d1f6      	bne.n	80030fc <minArr+0x1c>
			smallest = arr[i];
			index = i;
 800310e:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 8003110:	0014      	movs	r4, r2
 8003112:	e7f3      	b.n	80030fc <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 8003114:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 8003116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003118:	2000001c 	.word	0x2000001c

0800311c <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 800311c:	b510      	push	{r4, lr}
 800311e:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <QnotEmpty+0x20>)
 8003122:	781c      	ldrb	r4, [r3, #0]
 8003124:	2c00      	cmp	r4, #0
 8003126:	dd07      	ble.n	8003138 <QnotEmpty+0x1c>
 8003128:	2300      	movs	r3, #0
	char temp = 1;
 800312a:	2001      	movs	r0, #1
		temp &= Q[i];
 800312c:	5cca      	ldrb	r2, [r1, r3]
 800312e:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 8003130:	3301      	adds	r3, #1
 8003132:	42a3      	cmp	r3, r4
 8003134:	dbfa      	blt.n	800312c <QnotEmpty+0x10>
	}	
	
	return temp;
}
 8003136:	bd10      	pop	{r4, pc}
	char temp = 1;
 8003138:	2001      	movs	r0, #1
 800313a:	e7fc      	b.n	8003136 <QnotEmpty+0x1a>
 800313c:	2000001c 	.word	0x2000001c

08003140 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	46de      	mov	lr, fp
 8003144:	4657      	mov	r7, sl
 8003146:	464e      	mov	r6, r9
 8003148:	4645      	mov	r5, r8
 800314a:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 800314c:	2032      	movs	r0, #50	; 0x32
 800314e:	f010 fa11 	bl	8013574 <malloc>
 8003152:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003154:	2800      	cmp	r0, #0
 8003156:	d06c      	beq.n	8003232 <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003158:	4b38      	ldr	r3, [pc, #224]	; (800323c <LoadROsnippets+0xfc>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2bfe      	cmp	r3, #254	; 0xfe
 800315e:	d16a      	bne.n	8003236 <LoadROsnippets+0xf6>
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <LoadROsnippets+0x100>)
 8003162:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 8003164:	4c35      	ldr	r4, [pc, #212]	; (800323c <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003166:	2301      	movs	r3, #1
 8003168:	4443      	add	r3, r8
 800316a:	469a      	mov	sl, r3
 800316c:	e026      	b.n	80031bc <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800316e:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003170:	4643      	mov	r3, r8
 8003172:	195b      	adds	r3, r3, r5
 8003174:	3b01      	subs	r3, #1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <LoadROsnippets+0x40>
 800317c:	3501      	adds	r5, #1
 800317e:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 8003180:	0028      	movs	r0, r5
 8003182:	f010 f9f7 	bl	8013574 <malloc>
 8003186:	465b      	mov	r3, fp
 8003188:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 800318a:	2800      	cmp	r0, #0
 800318c:	d03d      	beq.n	800320a <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 800318e:	002a      	movs	r2, r5
 8003190:	4641      	mov	r1, r8
 8003192:	f010 fc25 	bl	80139e0 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <LoadROsnippets+0x104>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	4a29      	ldr	r2, [pc, #164]	; (8003244 <LoadROsnippets+0x104>)
 800319e:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 80031a0:	002a      	movs	r2, r5
 80031a2:	2100      	movs	r1, #0
 80031a4:	4640      	mov	r0, r8
 80031a6:	f010 fc24 	bl	80139f2 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 80031aa:	783b      	ldrb	r3, [r7, #0]
 80031ac:	2bfe      	cmp	r3, #254	; 0xfe
 80031ae:	d136      	bne.n	800321e <LoadROsnippets+0xde>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 80031b0:	3bea      	subs	r3, #234	; 0xea
 80031b2:	469c      	mov	ip, r3
 80031b4:	44e1      	add	r9, ip
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <LoadROsnippets+0x108>)
 80031b8:	4599      	cmp	r9, r3
 80031ba:	d030      	beq.n	800321e <LoadROsnippets+0xde>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80031bc:	0021      	movs	r1, r4
 80031be:	3114      	adds	r1, #20
{
 80031c0:	0023      	movs	r3, r4
 80031c2:	4642      	mov	r2, r8
 80031c4:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80031ca:	3301      	adds	r3, #1
 80031cc:	428b      	cmp	r3, r1
 80031ce:	d1fa      	bne.n	80031c6 <LoadROsnippets+0x86>
 80031d0:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80031d2:	46cb      	mov	fp, r9
 80031d4:	2214      	movs	r2, #20
 80031d6:	4651      	mov	r1, sl
 80031d8:	4648      	mov	r0, r9
 80031da:	f010 fc01 	bl	80139e0 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80031de:	2214      	movs	r2, #20
 80031e0:	2100      	movs	r1, #0
 80031e2:	4640      	mov	r0, r8
 80031e4:	f010 fc05 	bl	80139f2 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80031e8:	0027      	movs	r7, r4
 80031ea:	7823      	ldrb	r3, [r4, #0]
 80031ec:	2bfd      	cmp	r3, #253	; 0xfd
 80031ee:	d8be      	bhi.n	800316e <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80031f0:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 80031f2:	3e14      	subs	r6, #20
 80031f4:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 80031f6:	3401      	adds	r4, #1
 80031f8:	3501      	adds	r5, #1
 80031fa:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80031fc:	0027      	movs	r7, r4
 80031fe:	7823      	ldrb	r3, [r4, #0]
 8003200:	2bfd      	cmp	r3, #253	; 0xfd
 8003202:	d8b5      	bhi.n	8003170 <LoadROsnippets+0x30>
 8003204:	2d32      	cmp	r5, #50	; 0x32
 8003206:	d1f5      	bne.n	80031f4 <LoadROsnippets+0xb4>
 8003208:	e7b2      	b.n	8003170 <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 800320a:	2214      	movs	r2, #20
 800320c:	2100      	movs	r1, #0
 800320e:	4658      	mov	r0, fp
 8003210:	f010 fbef 	bl	80139f2 <memset>
			free(snipBuffer);			
 8003214:	4640      	mov	r0, r8
 8003216:	f010 f9b7 	bl	8013588 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800321a:	200e      	movs	r0, #14
 800321c:	e003      	b.n	8003226 <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 800321e:	4640      	mov	r0, r8
 8003220:	f010 f9b2 	bl	8013588 <free>
	return BOS_OK;
 8003224:	2000      	movs	r0, #0
}
 8003226:	bcf0      	pop	{r4, r5, r6, r7}
 8003228:	46bb      	mov	fp, r7
 800322a:	46b2      	mov	sl, r6
 800322c:	46a9      	mov	r9, r5
 800322e:	46a0      	mov	r8, r4
 8003230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003232:	20fb      	movs	r0, #251	; 0xfb
 8003234:	e7f7      	b.n	8003226 <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003236:	20ff      	movs	r0, #255	; 0xff
 8003238:	e7f5      	b.n	8003226 <LoadROsnippets+0xe6>
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	0801dc00 	.word	0x0801dc00
 8003240:	200068ec 	.word	0x200068ec
 8003244:	200011e7 	.word	0x200011e7
 8003248:	20006950 	.word	0x20006950

0800324c <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <LoadROtopology+0x94>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 8003256:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <LoadROtopology+0x98>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d011      	beq.n	8003280 <LoadROtopology+0x34>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 800325c:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 800325e:	d017      	beq.n	8003290 <LoadROtopology+0x44>
		N = (uint8_t) (temp>>8);
 8003260:	4921      	ldr	r1, [pc, #132]	; (80032e8 <LoadROtopology+0x9c>)
 8003262:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <LoadROtopology+0xa0>)
 8003266:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <LoadROtopology+0x9c>)
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	2800      	cmp	r0, #0
 800326e:	d035      	beq.n	80032dc <LoadROtopology+0x90>
 8003270:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 8003272:	2202      	movs	r2, #2
		{
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003274:	466b      	mov	r3, sp
 8003276:	1dd9      	adds	r1, r3, #7
 8003278:	2300      	movs	r3, #0
 800327a:	469c      	mov	ip, r3
			{
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 800327c:	4d1c      	ldr	r5, [pc, #112]	; (80032f0 <LoadROtopology+0xa4>)
 800327e:	e00f      	b.n	80032a0 <LoadROtopology+0x54>
		N = 1;
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <LoadROtopology+0x9c>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <LoadROtopology+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 800328c:	20fa      	movs	r0, #250	; 0xfa
 800328e:	e025      	b.n	80032dc <LoadROtopology+0x90>
		if (N == 0)	N = 1;
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <LoadROtopology+0x9c>)
 8003292:	2101      	movs	r1, #1
 8003294:	7011      	strb	r1, [r2, #0]
 8003296:	e7e5      	b.n	8003264 <LoadROtopology+0x18>
		for(uint8_t i=1 ; i<=N ; i++)
 8003298:	3601      	adds	r6, #1
 800329a:	b2f6      	uxtb	r6, r6
 800329c:	4286      	cmp	r6, r0
 800329e:	d81c      	bhi.n	80032da <LoadROtopology+0x8e>
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80032a0:	4663      	mov	r3, ip
 80032a2:	700b      	strb	r3, [r1, #0]
 80032a4:	780b      	ldrb	r3, [r1, #0]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b0a      	cmp	r3, #10
 80032aa:	d8f5      	bhi.n	8003298 <LoadROtopology+0x4c>
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 80032ac:	1e73      	subs	r3, r6, #1
 80032ae:	009c      	lsls	r4, r3, #2
 80032b0:	18e4      	adds	r4, r4, r3
 80032b2:	0064      	lsls	r4, r4, #1
 80032b4:	18e4      	adds	r4, r4, r3
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <LoadROtopology+0x94>)
 80032b8:	18d7      	adds	r7, r2, r3
 80032ba:	780b      	ldrb	r3, [r1, #0]
 80032bc:	883f      	ldrh	r7, [r7, #0]
 80032be:	191b      	adds	r3, r3, r4
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	52ef      	strh	r7, [r5, r3]
				add += 2;			
 80032c4:	3202      	adds	r2, #2
 80032c6:	b292      	uxth	r2, r2
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80032c8:	780b      	ldrb	r3, [r1, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	700b      	strb	r3, [r1, #0]
 80032d0:	780b      	ldrb	r3, [r1, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b0a      	cmp	r3, #10
 80032d6:	d9ee      	bls.n	80032b6 <LoadROtopology+0x6a>
 80032d8:	e7de      	b.n	8003298 <LoadROtopology+0x4c>
			}
		}	
	}
	
	return result;
 80032da:	2000      	movs	r0, #0
}
 80032dc:	b003      	add	sp, #12
 80032de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e0:	0801d800 	.word	0x0801d800
 80032e4:	0000ffff 	.word	0x0000ffff
 80032e8:	2000001c 	.word	0x2000001c
 80032ec:	20001046 	.word	0x20001046
 80032f0:	20000a80 	.word	0x20000a80

080032f4 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <SaveEEportsDir+0x3c>)
 80032f8:	781d      	ldrb	r5, [r3, #0]
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d016      	beq.n	800332c <SaveEEportsDir+0x38>
 80032fe:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003300:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 8003302:	4f0c      	ldr	r7, [pc, #48]	; (8003334 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003304:	001e      	movs	r6, r3
 8003306:	e008      	b.n	800331a <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003308:	1c60      	adds	r0, r4, #1
 800330a:	f004 fbad 	bl	8007a68 <EE_WriteVariable>
 800330e:	e009      	b.n	8003324 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 8003310:	3401      	adds	r4, #1
 8003312:	b2e4      	uxtb	r4, r4
 8003314:	7833      	ldrb	r3, [r6, #0]
 8003316:	42a3      	cmp	r3, r4
 8003318:	d308      	bcc.n	800332c <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 800331a:	1e63      	subs	r3, r4, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	5bd9      	ldrh	r1, [r3, r7]
 8003320:	2900      	cmp	r1, #0
 8003322:	d1f1      	bne.n	8003308 <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003324:	2c19      	cmp	r4, #25
 8003326:	d9f3      	bls.n	8003310 <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003328:	250a      	movs	r5, #10
 800332a:	e7f1      	b.n	8003310 <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 800332c:	0028      	movs	r0, r5
 800332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003330:	2000001c 	.word	0x2000001c
 8003334:	20006d2c 	.word	0x20006d2c

08003338 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 800333a:	2234      	movs	r2, #52	; 0x34
 800333c:	2100      	movs	r1, #0
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <ClearEEportsDir+0x48>)
 8003340:	f010 fb57 	bl	80139f2 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <ClearEEportsDir+0x4c>)
 8003346:	781d      	ldrb	r5, [r3, #0]
 8003348:	2d00      	cmp	r5, #0
 800334a:	d016      	beq.n	800337a <ClearEEportsDir+0x42>
 800334c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800334e:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 8003350:	4f0b      	ldr	r7, [pc, #44]	; (8003380 <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003352:	001e      	movs	r6, r3
 8003354:	e008      	b.n	8003368 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003356:	1c60      	adds	r0, r4, #1
 8003358:	f004 fb86 	bl	8007a68 <EE_WriteVariable>
 800335c:	e009      	b.n	8003372 <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 800335e:	3401      	adds	r4, #1
 8003360:	b2e4      	uxtb	r4, r4
 8003362:	7833      	ldrb	r3, [r6, #0]
 8003364:	42a3      	cmp	r3, r4
 8003366:	d308      	bcc.n	800337a <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 8003368:	1e63      	subs	r3, r4, #1
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	5bd9      	ldrh	r1, [r3, r7]
 800336e:	2900      	cmp	r1, #0
 8003370:	d1f1      	bne.n	8003356 <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003372:	2c19      	cmp	r4, #25
 8003374:	d9f3      	bls.n	800335e <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 8003376:	250a      	movs	r5, #10
 8003378:	e7f1      	b.n	800335e <ClearEEportsDir+0x26>
	}
	
	return result;
}
 800337a:	0028      	movs	r0, r5
 800337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20006d2c 	.word	0x20006d2c
 8003384:	2000001c 	.word	0x2000001c

08003388 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <LoadEEportsDir+0x3c>)
 800338c:	781d      	ldrb	r5, [r3, #0]
 800338e:	2d00      	cmp	r5, #0
 8003390:	d016      	beq.n	80033c0 <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003392:	490d      	ldr	r1, [pc, #52]	; (80033c8 <LoadEEportsDir+0x40>)
 8003394:	2002      	movs	r0, #2
 8003396:	f004 fb3b 	bl	8007a10 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 800339a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800339c:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800339e:	4e09      	ldr	r6, [pc, #36]	; (80033c4 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80033a0:	4f09      	ldr	r7, [pc, #36]	; (80033c8 <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 80033a2:	3401      	adds	r4, #1
 80033a4:	b2e4      	uxtb	r4, r4
 80033a6:	7833      	ldrb	r3, [r6, #0]
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	d309      	bcc.n	80033c0 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80033ac:	1e61      	subs	r1, r4, #1
 80033ae:	0049      	lsls	r1, r1, #1
 80033b0:	19c9      	adds	r1, r1, r7
 80033b2:	1c60      	adds	r0, r4, #1
 80033b4:	f004 fb2c 	bl	8007a10 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80033b8:	2c19      	cmp	r4, #25
 80033ba:	d9f2      	bls.n	80033a2 <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 80033bc:	250a      	movs	r5, #10
 80033be:	e7f0      	b.n	80033a2 <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 80033c0:	0028      	movs	r0, r5
 80033c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c4:	2000001c 	.word	0x2000001c
 80033c8:	20006d2c 	.word	0x20006d2c

080033cc <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ce:	46de      	mov	lr, fp
 80033d0:	464f      	mov	r7, r9
 80033d2:	4646      	mov	r6, r8
 80033d4:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80033d6:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <SaveEEalias+0x7c>)
 80033de:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80033e0:	4f1a      	ldr	r7, [pc, #104]	; (800344c <SaveEEalias+0x80>)
 80033e2:	e004      	b.n	80033ee <SaveEEalias+0x22>
 80033e4:	3501      	adds	r5, #1
 80033e6:	b2ed      	uxtb	r5, r5
 80033e8:	783b      	ldrb	r3, [r7, #0]
 80033ea:	42ab      	cmp	r3, r5
 80033ec:	d325      	bcc.n	800343a <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 80033ee:	00ab      	lsls	r3, r5, #2
 80033f0:	195b      	adds	r3, r3, r5
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	465a      	mov	r2, fp
 80033f6:	5c9b      	ldrb	r3, [r3, r2]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f3      	beq.n	80033e4 <SaveEEalias+0x18>
 80033fc:	00ae      	lsls	r6, r5, #2
 80033fe:	1976      	adds	r6, r6, r5
 8003400:	0076      	lsls	r6, r6, #1
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <SaveEEalias+0x7c>)
 8003404:	469c      	mov	ip, r3
 8003406:	4466      	add	r6, ip
 8003408:	464c      	mov	r4, r9
 800340a:	341c      	adds	r4, #28
 800340c:	b2a4      	uxth	r4, r4
 800340e:	464b      	mov	r3, r9
 8003410:	3321      	adds	r3, #33	; 0x21
 8003412:	b29b      	uxth	r3, r3
 8003414:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003416:	7833      	ldrb	r3, [r6, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	7871      	ldrb	r1, [r6, #1]
 800341c:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 800341e:	b289      	uxth	r1, r1
 8003420:	0020      	movs	r0, r4
 8003422:	f004 fb21 	bl	8007a68 <EE_WriteVariable>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003426:	3602      	adds	r6, #2
 8003428:	3401      	adds	r4, #1
 800342a:	b2a4      	uxth	r4, r4
 800342c:	45a0      	cmp	r8, r4
 800342e:	d1f2      	bne.n	8003416 <SaveEEalias+0x4a>
 8003430:	464b      	mov	r3, r9
 8003432:	3305      	adds	r3, #5
 8003434:	b29b      	uxth	r3, r3
 8003436:	4699      	mov	r9, r3
 8003438:	e7d4      	b.n	80033e4 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 800343a:	2000      	movs	r0, #0
 800343c:	bce0      	pop	{r5, r6, r7}
 800343e:	46bb      	mov	fp, r7
 8003440:	46b1      	mov	r9, r6
 8003442:	46a8      	mov	r8, r5
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	20000f38 	.word	0x20000f38
 800344c:	2000001c 	.word	0x2000001c

08003450 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	46de      	mov	lr, fp
 8003454:	4657      	mov	r7, sl
 8003456:	464e      	mov	r6, r9
 8003458:	4645      	mov	r5, r8
 800345a:	b5e0      	push	{r5, r6, r7, lr}
 800345c:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 800345e:	466b      	mov	r3, sp
 8003460:	2200      	movs	r2, #0
 8003462:	80da      	strh	r2, [r3, #6]
 8003464:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003466:	2300      	movs	r3, #0
 8003468:	4698      	mov	r8, r3
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <LoadEEalias+0x84>)
 800346c:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 800346e:	469a      	mov	sl, r3
 8003470:	e010      	b.n	8003494 <LoadEEalias+0x44>
 8003472:	464b      	mov	r3, r9
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	444b      	add	r3, r9
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4453      	add	r3, sl
 800347c:	2200      	movs	r2, #0
 800347e:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003480:	4643      	mov	r3, r8
 8003482:	3301      	adds	r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4698      	mov	r8, r3
 8003488:	3705      	adds	r7, #5
 800348a:	b2bf      	uxth	r7, r7
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <LoadEEalias+0x88>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4543      	cmp	r3, r8
 8003492:	d317      	bcc.n	80034c4 <LoadEEalias+0x74>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003494:	1f7c      	subs	r4, r7, #5
 8003496:	b2a4      	uxth	r4, r4
 8003498:	4643      	mov	r3, r8
 800349a:	009d      	lsls	r5, r3, #2
 800349c:	4445      	add	r5, r8
 800349e:	006d      	lsls	r5, r5, #1
 80034a0:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80034a2:	466b      	mov	r3, sp
 80034a4:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 80034a6:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80034a8:	0031      	movs	r1, r6
 80034aa:	0020      	movs	r0, r4
 80034ac:	f004 fab0 	bl	8007a10 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 80034b0:	8833      	ldrh	r3, [r6, #0]
 80034b2:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80034b8:	3401      	adds	r4, #1
 80034ba:	b2a4      	uxth	r4, r4
 80034bc:	3502      	adds	r5, #2
 80034be:	42a7      	cmp	r7, r4
 80034c0:	d1f2      	bne.n	80034a8 <LoadEEalias+0x58>
 80034c2:	e7d6      	b.n	8003472 <LoadEEalias+0x22>
	}
	
	return result;
}
 80034c4:	2000      	movs	r0, #0
 80034c6:	b003      	add	sp, #12
 80034c8:	bcf0      	pop	{r4, r5, r6, r7}
 80034ca:	46bb      	mov	fp, r7
 80034cc:	46b2      	mov	sl, r6
 80034ce:	46a9      	mov	r9, r5
 80034d0:	46a0      	mov	r8, r4
 80034d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d4:	20000f38 	.word	0x20000f38
 80034d8:	2000001c 	.word	0x2000001c

080034dc <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 80034dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034de:	46d6      	mov	lr, sl
 80034e0:	464f      	mov	r7, r9
 80034e2:	4646      	mov	r6, r8
 80034e4:	b5c0      	push	{r6, r7, lr}
 80034e6:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80034e8:	466b      	mov	r3, sp
 80034ea:	2200      	movs	r2, #0
 80034ec:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <LoadEEgroup+0xa0>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01d      	beq.n	8003532 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80034f6:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80034f8:	4e21      	ldr	r6, [pc, #132]	; (8003580 <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 80034fa:	4d20      	ldr	r5, [pc, #128]	; (800357c <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80034fc:	b2e1      	uxtb	r1, r4
 80034fe:	0049      	lsls	r1, r1, #1
 8003500:	1871      	adds	r1, r6, r1
 8003502:	0020      	movs	r0, r4
 8003504:	30cb      	adds	r0, #203	; 0xcb
 8003506:	b280      	uxth	r0, r0
 8003508:	f004 fa82 	bl	8007a10 <EE_ReadVariable>
		add++;
 800350c:	1c63      	adds	r3, r4, #1
 800350e:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 8003510:	782a      	ldrb	r2, [r5, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f1      	bhi.n	80034fc <LoadEEgroup+0x20>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <LoadEEgroup+0xa8>)
 800351a:	4699      	mov	r9, r3
 800351c:	0027      	movs	r7, r4
 800351e:	379e      	adds	r7, #158	; 0x9e
 8003520:	b2bf      	uxth	r7, r7
 8003522:	34d0      	adds	r4, #208	; 0xd0
 8003524:	b2a3      	uxth	r3, r4
 8003526:	4698      	mov	r8, r3
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003528:	466b      	mov	r3, sp
 800352a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 800352c:	2300      	movs	r3, #0
 800352e:	469a      	mov	sl, r3
 8003530:	e00b      	b.n	800354a <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003532:	2400      	movs	r4, #0
 8003534:	e7f0      	b.n	8003518 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003536:	464b      	mov	r3, r9
 8003538:	4652      	mov	r2, sl
 800353a:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 800353c:	230a      	movs	r3, #10
 800353e:	469c      	mov	ip, r3
 8003540:	44e1      	add	r9, ip
 8003542:	3705      	adds	r7, #5
 8003544:	b2bf      	uxth	r7, r7
 8003546:	4547      	cmp	r7, r8
 8003548:	d010      	beq.n	800356c <LoadEEgroup+0x90>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800354a:	1f7c      	subs	r4, r7, #5
 800354c:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800354e:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003550:	0031      	movs	r1, r6
 8003552:	0020      	movs	r0, r4
 8003554:	f004 fa5c 	bl	8007a10 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003558:	8833      	ldrh	r3, [r6, #0]
 800355a:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003560:	3401      	adds	r4, #1
 8003562:	b2a4      	uxth	r4, r4
 8003564:	3502      	adds	r5, #2
 8003566:	42bc      	cmp	r4, r7
 8003568:	d1f2      	bne.n	8003550 <LoadEEgroup+0x74>
 800356a:	e7e4      	b.n	8003536 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 800356c:	2000      	movs	r0, #0
 800356e:	b002      	add	sp, #8
 8003570:	bce0      	pop	{r5, r6, r7}
 8003572:	46ba      	mov	sl, r7
 8003574:	46b1      	mov	r9, r6
 8003576:	46a8      	mov	r8, r5
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	2000001c 	.word	0x2000001c
 8003580:	20000e90 	.word	0x20000e90
 8003584:	20000e2c 	.word	0x20000e2c

08003588 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 800358c:	210e      	movs	r1, #14
 800358e:	4469      	add	r1, sp
 8003590:	2300      	movs	r3, #0
 8003592:	800b      	strh	r3, [r1, #0]
 8003594:	aa03      	add	r2, sp, #12
 8003596:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003598:	20e4      	movs	r0, #228	; 0xe4
 800359a:	f004 fa39 	bl	8007a10 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800359e:	2500      	movs	r5, #0
	if (!status1) {
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d102      	bne.n	80035aa <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 80035a4:	230e      	movs	r3, #14
 80035a6:	446b      	add	r3, sp
 80035a8:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 80035aa:	210e      	movs	r1, #14
 80035ac:	4469      	add	r1, sp
 80035ae:	20e5      	movs	r0, #229	; 0xe5
 80035b0:	f004 fa2e 	bl	8007a10 <EE_ReadVariable>
 80035b4:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 80035b6:	a903      	add	r1, sp, #12
 80035b8:	20e6      	movs	r0, #230	; 0xe6
 80035ba:	f004 fa29 	bl	8007a10 <EE_ReadVariable>
	if (!status1 && !status2) {
 80035be:	4304      	orrs	r4, r0
 80035c0:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80035c2:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 80035c4:	2c00      	cmp	r4, #0
 80035c6:	d106      	bne.n	80035d6 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 80035c8:	230e      	movs	r3, #14
 80035ca:	446b      	add	r3, sp
 80035cc:	881e      	ldrh	r6, [r3, #0]
 80035ce:	0436      	lsls	r6, r6, #16
 80035d0:	ab03      	add	r3, sp, #12
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 80035d6:	210e      	movs	r1, #14
 80035d8:	4469      	add	r1, sp
 80035da:	20e7      	movs	r0, #231	; 0xe7
 80035dc:	f004 fa18 	bl	8007a10 <EE_ReadVariable>
 80035e0:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 80035e2:	a903      	add	r1, sp, #12
 80035e4:	20e8      	movs	r0, #232	; 0xe8
 80035e6:	f004 fa13 	bl	8007a10 <EE_ReadVariable>
	if (!status1 && !status2) {
 80035ea:	4320      	orrs	r0, r4
 80035ec:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80035ee:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d106      	bne.n	8003602 <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 80035f4:	230e      	movs	r3, #14
 80035f6:	446b      	add	r3, sp
 80035f8:	881c      	ldrh	r4, [r3, #0]
 80035fa:	0424      	lsls	r4, r4, #16
 80035fc:	ab03      	add	r3, sp, #12
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8003602:	210e      	movs	r1, #14
 8003604:	4469      	add	r1, sp
 8003606:	20e9      	movs	r0, #233	; 0xe9
 8003608:	f004 fa02 	bl	8007a10 <EE_ReadVariable>
	if (!status1) {
 800360c:	2800      	cmp	r0, #0
 800360e:	d107      	bne.n	8003620 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8003610:	230e      	movs	r3, #14
 8003612:	446b      	add	r3, sp
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	0a19      	lsrs	r1, r3, #8
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <LoadEEstreams+0x134>)
 800361a:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 800361c:	4a28      	ldr	r2, [pc, #160]	; (80036c0 <LoadEEstreams+0x138>)
 800361e:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8003620:	210e      	movs	r1, #14
 8003622:	4469      	add	r1, sp
 8003624:	20ea      	movs	r0, #234	; 0xea
 8003626:	f004 f9f3 	bl	8007a10 <EE_ReadVariable>
	if (!status1) {
 800362a:	2800      	cmp	r0, #0
 800362c:	d107      	bne.n	800363e <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 800362e:	230e      	movs	r3, #14
 8003630:	446b      	add	r3, sp
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	0a19      	lsrs	r1, r3, #8
 8003636:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <LoadEEstreams+0x13c>)
 8003638:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 800363a:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <LoadEEstreams+0x140>)
 800363c:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 800363e:	210e      	movs	r1, #14
 8003640:	4469      	add	r1, sp
 8003642:	20eb      	movs	r0, #235	; 0xeb
 8003644:	f004 f9e4 	bl	8007a10 <EE_ReadVariable>
	if (!status1) {
 8003648:	2800      	cmp	r0, #0
 800364a:	d107      	bne.n	800365c <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 800364c:	230e      	movs	r3, #14
 800364e:	446b      	add	r3, sp
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	0a19      	lsrs	r1, r3, #8
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <LoadEEstreams+0x144>)
 8003656:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <LoadEEstreams+0x148>)
 800365a:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <LoadEEstreams+0x134>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <LoadEEstreams+0xe4>
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <LoadEEstreams+0x138>)
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	2a00      	cmp	r2, #0
 800366a:	d112      	bne.n	8003692 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <LoadEEstreams+0x13c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <LoadEEstreams+0xf4>
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <LoadEEstreams+0x140>)
 8003676:	7812      	ldrb	r2, [r2, #0]
 8003678:	2a00      	cmp	r2, #0
 800367a:	d111      	bne.n	80036a0 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <LoadEEstreams+0x144>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <LoadEEstreams+0x104>
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <LoadEEstreams+0x148>)
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	2a00      	cmp	r2, #0
 800368a:	d110      	bne.n	80036ae <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 800368c:	2000      	movs	r0, #0
 800368e:	b004      	add	sp, #16
 8003690:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8003692:	9200      	str	r2, [sp, #0]
 8003694:	0022      	movs	r2, r4
 8003696:	0031      	movs	r1, r6
 8003698:	0028      	movs	r0, r5
 800369a:	f005 fbab 	bl	8008df4 <SetupDMAStreams>
 800369e:	e7e5      	b.n	800366c <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	0022      	movs	r2, r4
 80036a4:	0031      	movs	r1, r6
 80036a6:	0028      	movs	r0, r5
 80036a8:	f005 fba4 	bl	8008df4 <SetupDMAStreams>
 80036ac:	e7e6      	b.n	800367c <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	0022      	movs	r2, r4
 80036b2:	0031      	movs	r1, r6
 80036b4:	0028      	movs	r0, r5
 80036b6:	f005 fb9d 	bl	8008df4 <SetupDMAStreams>
 80036ba:	e7e7      	b.n	800368c <LoadEEstreams+0x104>
 80036bc:	20001112 	.word	0x20001112
 80036c0:	20000e29 	.word	0x20000e29
 80036c4:	20001113 	.word	0x20001113
 80036c8:	20000e2a 	.word	0x20000e2a
 80036cc:	20001114 	.word	0x20001114
 80036d0:	20000e2b 	.word	0x20000e2b

080036d4 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	46de      	mov	lr, fp
 80036d8:	4657      	mov	r7, sl
 80036da:	464e      	mov	r6, r9
 80036dc:	4645      	mov	r5, r8
 80036de:	b5e0      	push	{r5, r6, r7, lr}
 80036e0:	000f      	movs	r7, r1
 80036e2:	0016      	movs	r6, r2
 80036e4:	001c      	movs	r4, r3
 80036e6:	ab0a      	add	r3, sp, #40	; 0x28
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	469b      	mov	fp, r3
 80036ec:	ab0b      	add	r3, sp, #44	; 0x2c
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	469a      	mov	sl, r3
 80036f2:	ab0c      	add	r3, sp, #48	; 0x30
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4699      	mov	r9, r3
 80036f8:	ab0d      	add	r3, sp, #52	; 0x34
 80036fa:	781d      	ldrb	r5, [r3, #0]
 80036fc:	ab0e      	add	r3, sp, #56	; 0x38
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003702:	0001      	movs	r1, r0
 8003704:	20e4      	movs	r0, #228	; 0xe4
 8003706:	f004 f9af 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 800370a:	0a39      	lsrs	r1, r7, #8
 800370c:	b289      	uxth	r1, r1
 800370e:	20e5      	movs	r0, #229	; 0xe5
 8003710:	f004 f9aa 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003714:	b2b9      	uxth	r1, r7
 8003716:	20e6      	movs	r0, #230	; 0xe6
 8003718:	f004 f9a6 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 800371c:	0a31      	lsrs	r1, r6, #8
 800371e:	b289      	uxth	r1, r1
 8003720:	20e7      	movs	r0, #231	; 0xe7
 8003722:	f004 f9a1 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003726:	b2b1      	uxth	r1, r6
 8003728:	20e8      	movs	r0, #232	; 0xe8
 800372a:	f004 f99d 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 800372e:	0224      	lsls	r4, r4, #8
 8003730:	445c      	add	r4, fp
 8003732:	b2a1      	uxth	r1, r4
 8003734:	20e9      	movs	r0, #233	; 0xe9
 8003736:	f004 f997 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 800373a:	4653      	mov	r3, sl
 800373c:	0219      	lsls	r1, r3, #8
 800373e:	4449      	add	r1, r9
 8003740:	b289      	uxth	r1, r1
 8003742:	20ea      	movs	r0, #234	; 0xea
 8003744:	f004 f990 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8003748:	022d      	lsls	r5, r5, #8
 800374a:	4445      	add	r5, r8
 800374c:	b2a9      	uxth	r1, r5
 800374e:	20eb      	movs	r0, #235	; 0xeb
 8003750:	f004 f98a 	bl	8007a68 <EE_WriteVariable>
	
	return result;
}
 8003754:	2000      	movs	r0, #0
 8003756:	bcf0      	pop	{r4, r5, r6, r7}
 8003758:	46bb      	mov	fp, r7
 800375a:	46b2      	mov	sl, r6
 800375c:	46a9      	mov	r9, r5
 800375e:	46a0      	mov	r8, r4
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003764 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003764:	b510      	push	{r4, lr}
 8003766:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003768:	208a      	movs	r0, #138	; 0x8a
 800376a:	466b      	mov	r3, sp
 800376c:	1d99      	adds	r1, r3, #6
 800376e:	0040      	lsls	r0, r0, #1
 8003770:	f004 f94e 	bl	8007a10 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003774:	2800      	cmp	r0, #0
 8003776:	d000      	beq.n	800377a <LoadEEparams+0x16>
 8003778:	e064      	b.n	8003844 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 800377a:	466b      	mov	r3, sp
 800377c:	3306      	adds	r3, #6
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	4a46      	ldr	r2, [pc, #280]	; (800389c <LoadEEparams+0x138>)
 8003782:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8003788:	2016      	movs	r0, #22
 800378a:	466b      	mov	r3, sp
 800378c:	1d99      	adds	r1, r3, #6
 800378e:	30ff      	adds	r0, #255	; 0xff
 8003790:	f004 f93e 	bl	8007a10 <EE_ReadVariable>
	if (!status1) 
 8003794:	2800      	cmp	r0, #0
 8003796:	d15c      	bne.n	8003852 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003798:	466b      	mov	r3, sp
 800379a:	88da      	ldrh	r2, [r3, #6]
 800379c:	4b3f      	ldr	r3, [pc, #252]	; (800389c <LoadEEparams+0x138>)
 800379e:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 80037a0:	208b      	movs	r0, #139	; 0x8b
 80037a2:	466b      	mov	r3, sp
 80037a4:	1d99      	adds	r1, r3, #6
 80037a6:	0040      	lsls	r0, r0, #1
 80037a8:	f004 f932 	bl	8007a10 <EE_ReadVariable>
	if (!status1) 
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d153      	bne.n	8003858 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 80037b0:	466b      	mov	r3, sp
 80037b2:	88da      	ldrh	r2, [r3, #6]
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <LoadEEparams+0x138>)
 80037b6:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 80037b8:	2018      	movs	r0, #24
 80037ba:	466b      	mov	r3, sp
 80037bc:	1d99      	adds	r1, r3, #6
 80037be:	30ff      	adds	r0, #255	; 0xff
 80037c0:	f004 f926 	bl	8007a10 <EE_ReadVariable>
	if (!status1) {
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d14a      	bne.n	800385e <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 80037c8:	466b      	mov	r3, sp
 80037ca:	3306      	adds	r3, #6
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	4a33      	ldr	r2, [pc, #204]	; (800389c <LoadEEparams+0x138>)
 80037d0:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 80037d6:	208c      	movs	r0, #140	; 0x8c
 80037d8:	466b      	mov	r3, sp
 80037da:	1d99      	adds	r1, r3, #6
 80037dc:	0040      	lsls	r0, r0, #1
 80037de:	f004 f917 	bl	8007a10 <EE_ReadVariable>
 80037e2:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 80037e4:	201a      	movs	r0, #26
 80037e6:	a901      	add	r1, sp, #4
 80037e8:	30ff      	adds	r0, #255	; 0xff
 80037ea:	f004 f911 	bl	8007a10 <EE_ReadVariable>
	if (!status1 && !status2) 
 80037ee:	4304      	orrs	r4, r0
 80037f0:	b2a4      	uxth	r4, r4
 80037f2:	2c00      	cmp	r4, #0
 80037f4:	d13a      	bne.n	800386c <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 80037f6:	ab01      	add	r3, sp, #4
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	466a      	mov	r2, sp
 80037fe:	3206      	adds	r2, #6
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	4a25      	ldr	r2, [pc, #148]	; (800389c <LoadEEparams+0x138>)
 8003806:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003808:	208d      	movs	r0, #141	; 0x8d
 800380a:	466b      	mov	r3, sp
 800380c:	1d99      	adds	r1, r3, #6
 800380e:	0040      	lsls	r0, r0, #1
 8003810:	f004 f8fe 	bl	8007a10 <EE_ReadVariable>
	if (!status1) {
 8003814:	2800      	cmp	r0, #0
 8003816:	d137      	bne.n	8003888 <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8003818:	466b      	mov	r3, sp
 800381a:	3306      	adds	r3, #6
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <LoadEEparams+0x138>)
 8003820:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003826:	201c      	movs	r0, #28
 8003828:	466b      	mov	r3, sp
 800382a:	1d99      	adds	r1, r3, #6
 800382c:	30ff      	adds	r0, #255	; 0xff
 800382e:	f004 f8ef 	bl	8007a10 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003832:	2800      	cmp	r0, #0
 8003834:	d12e      	bne.n	8003894 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 8003836:	466b      	mov	r3, sp
 8003838:	799a      	ldrb	r2, [r3, #6]
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <LoadEEparams+0x138>)
 800383c:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 800383e:	2000      	movs	r0, #0
 8003840:	b002      	add	sp, #8
 8003842:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003844:	4b15      	ldr	r3, [pc, #84]	; (800389c <LoadEEparams+0x138>)
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <LoadEEparams+0x13c>)
 8003848:	7991      	ldrb	r1, [r2, #6]
 800384a:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 800384c:	79d2      	ldrb	r2, [r2, #7]
 800384e:	71da      	strb	r2, [r3, #7]
 8003850:	e79a      	b.n	8003788 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <LoadEEparams+0x13c>)
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	e7a1      	b.n	800379c <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <LoadEEparams+0x13c>)
 800385a:	885a      	ldrh	r2, [r3, #2]
 800385c:	e7aa      	b.n	80037b4 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <LoadEEparams+0x138>)
 8003860:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <LoadEEparams+0x13c>)
 8003862:	7911      	ldrb	r1, [r2, #4]
 8003864:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003866:	7952      	ldrb	r2, [r2, #5]
 8003868:	715a      	strb	r2, [r3, #5]
 800386a:	e7b4      	b.n	80037d6 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <LoadEEparams+0x140>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <LoadEEparams+0x138>)
 8003876:	22e1      	movs	r2, #225	; 0xe1
 8003878:	0252      	lsls	r2, r2, #9
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e7c4      	b.n	8003808 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <LoadEEparams+0x13c>)
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <LoadEEparams+0x138>)
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	e7bf      	b.n	8003808 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <LoadEEparams+0x138>)
 800388a:	2218      	movs	r2, #24
 800388c:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 800388e:	2200      	movs	r2, #0
 8003890:	731a      	strb	r2, [r3, #12]
 8003892:	e7c8      	b.n	8003826 <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <LoadEEparams+0x13c>)
 8003896:	7eda      	ldrb	r2, [r3, #27]
 8003898:	e7cf      	b.n	800383a <LoadEEparams+0xd6>
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	200068d0 	.word	0x200068d0
 80038a0:	20000000 	.word	0x20000000
 80038a4:	20000a7e 	.word	0x20000a7e

080038a8 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 80038a8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 80038aa:	4c1a      	ldr	r4, [pc, #104]	; (8003914 <SaveEEparams+0x6c>)
 80038ac:	79e3      	ldrb	r3, [r4, #7]
 80038ae:	015b      	lsls	r3, r3, #5
 80038b0:	79a1      	ldrb	r1, [r4, #6]
 80038b2:	4319      	orrs	r1, r3
 80038b4:	208a      	movs	r0, #138	; 0x8a
 80038b6:	0040      	lsls	r0, r0, #1
 80038b8:	f004 f8d6 	bl	8007a68 <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80038bc:	8821      	ldrh	r1, [r4, #0]
 80038be:	2016      	movs	r0, #22
 80038c0:	30ff      	adds	r0, #255	; 0xff
 80038c2:	f004 f8d1 	bl	8007a68 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 80038c6:	8861      	ldrh	r1, [r4, #2]
 80038c8:	208b      	movs	r0, #139	; 0x8b
 80038ca:	0040      	lsls	r0, r0, #1
 80038cc:	f004 f8cc 	bl	8007a68 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 80038d0:	7963      	ldrb	r3, [r4, #5]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	7b21      	ldrb	r1, [r4, #12]
 80038d6:	4319      	orrs	r1, r3
 80038d8:	2018      	movs	r0, #24
 80038da:	30ff      	adds	r0, #255	; 0xff
 80038dc:	f004 f8c4 	bl	8007a68 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80038e0:	8921      	ldrh	r1, [r4, #8]
 80038e2:	208c      	movs	r0, #140	; 0x8c
 80038e4:	0040      	lsls	r0, r0, #1
 80038e6:	f004 f8bf 	bl	8007a68 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80038ea:	8961      	ldrh	r1, [r4, #10]
 80038ec:	201a      	movs	r0, #26
 80038ee:	30ff      	adds	r0, #255	; 0xff
 80038f0:	f004 f8ba 	bl	8007a68 <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80038f4:	7b63      	ldrb	r3, [r4, #13]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	7921      	ldrb	r1, [r4, #4]
 80038fa:	4319      	orrs	r1, r3
 80038fc:	208d      	movs	r0, #141	; 0x8d
 80038fe:	0040      	lsls	r0, r0, #1
 8003900:	f004 f8b2 	bl	8007a68 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8003904:	7ee1      	ldrb	r1, [r4, #27]
 8003906:	201c      	movs	r0, #28
 8003908:	30ff      	adds	r0, #255	; 0xff
 800390a:	f004 f8ad 	bl	8007a68 <EE_WriteVariable>
	
	return result;
}
 800390e:	2000      	movs	r0, #0
 8003910:	bd10      	pop	{r4, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	200068d0 	.word	0x200068d0

08003918 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391a:	46ce      	mov	lr, r9
 800391c:	4647      	mov	r7, r8
 800391e:	b580      	push	{r7, lr}
 8003920:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003922:	231e      	movs	r3, #30
 8003924:	446b      	add	r3, sp
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 800392a:	4e36      	ldr	r6, [pc, #216]	; (8003a04 <LoadEEbuttons+0xec>)
	uint16_t temp16 = 0, status1 = 0; 
 800392c:	24ec      	movs	r4, #236	; 0xec
 800392e:	2501      	movs	r5, #1
 8003930:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003932:	2301      	movs	r3, #1
 8003934:	4698      	mov	r8, r3
 8003936:	e005      	b.n	8003944 <LoadEEbuttons+0x2c>
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003938:	3501      	adds	r5, #1
 800393a:	3404      	adds	r4, #4
 800393c:	b2a4      	uxth	r4, r4
 800393e:	3609      	adds	r6, #9
 8003940:	2d07      	cmp	r5, #7
 8003942:	d059      	beq.n	80039f8 <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003944:	231e      	movs	r3, #30
 8003946:	446b      	add	r3, sp
 8003948:	0019      	movs	r1, r3
 800394a:	0020      	movs	r0, r4
 800394c:	f004 f860 	bl	8007a10 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 8003950:	2800      	cmp	r0, #0
 8003952:	d1f1      	bne.n	8003938 <LoadEEbuttons+0x20>
			temp8 = (uint8_t)(temp16 >> 8);
 8003954:	466b      	mov	r3, sp
 8003956:	8bdb      	ldrh	r3, [r3, #30]
 8003958:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 800395a:	0b1a      	lsrs	r2, r3, #12
 800395c:	42aa      	cmp	r2, r5
 800395e:	d1eb      	bne.n	8003938 <LoadEEbuttons+0x20>
 8003960:	003a      	movs	r2, r7
 8003962:	400a      	ands	r2, r1
 8003964:	420f      	tst	r7, r1
 8003966:	d0e7      	beq.n	8003938 <LoadEEbuttons+0x20>
				button[i+1].type = temp8 & 0x0F;
 8003968:	7032      	strb	r2, [r6, #0]
				button[i+1].events = (uint8_t)temp16;
 800396a:	71f3      	strb	r3, [r6, #7]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 800396c:	00a8      	lsls	r0, r5, #2
 800396e:	b283      	uxth	r3, r0
 8003970:	4699      	mov	r9, r3
 8003972:	0018      	movs	r0, r3
 8003974:	30e9      	adds	r0, #233	; 0xe9
 8003976:	b280      	uxth	r0, r0
 8003978:	231e      	movs	r3, #30
 800397a:	446b      	add	r3, sp
 800397c:	0019      	movs	r1, r3
 800397e:	f004 f847 	bl	8007a10 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8003982:	466b      	mov	r3, sp
 8003984:	8bdb      	ldrh	r3, [r3, #30]
 8003986:	0a1a      	lsrs	r2, r3, #8
 8003988:	7072      	strb	r2, [r6, #1]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 800398a:	7133      	strb	r3, [r6, #4]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 800398c:	4648      	mov	r0, r9
 800398e:	30ea      	adds	r0, #234	; 0xea
 8003990:	b280      	uxth	r0, r0
 8003992:	231e      	movs	r3, #30
 8003994:	446b      	add	r3, sp
 8003996:	0019      	movs	r1, r3
 8003998:	f004 f83a 	bl	8007a10 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 800399c:	466b      	mov	r3, sp
 800399e:	8bdb      	ldrh	r3, [r3, #30]
 80039a0:	0a1a      	lsrs	r2, r3, #8
 80039a2:	70b2      	strb	r2, [r6, #2]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 80039a4:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 80039a6:	4648      	mov	r0, r9
 80039a8:	30eb      	adds	r0, #235	; 0xeb
 80039aa:	b280      	uxth	r0, r0
 80039ac:	231e      	movs	r3, #30
 80039ae:	446b      	add	r3, sp
 80039b0:	0019      	movs	r1, r3
 80039b2:	f004 f82d 	bl	8007a10 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 80039b6:	466b      	mov	r3, sp
 80039b8:	8bdb      	ldrh	r3, [r3, #30]
 80039ba:	0a1a      	lsrs	r2, r3, #8
 80039bc:	70f2      	strb	r2, [r6, #3]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 80039be:	71b3      	strb	r3, [r6, #6]
				AddPortButton(button[i+1].type, i+1);
 80039c0:	b2eb      	uxtb	r3, r5
 80039c2:	7830      	ldrb	r0, [r6, #0]
 80039c4:	4699      	mov	r9, r3
 80039c6:	0019      	movs	r1, r3
 80039c8:	f004 ff38 	bl	800883c <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 80039cc:	79f1      	ldrb	r1, [r6, #7]
 80039ce:	7873      	ldrb	r3, [r6, #1]
 80039d0:	104a      	asrs	r2, r1, #1
 80039d2:	4640      	mov	r0, r8
 80039d4:	4002      	ands	r2, r0
 80039d6:	4001      	ands	r1, r0
 80039d8:	2000      	movs	r0, #0
 80039da:	9005      	str	r0, [sp, #20]
 80039dc:	79b0      	ldrb	r0, [r6, #6]
 80039de:	9004      	str	r0, [sp, #16]
 80039e0:	7970      	ldrb	r0, [r6, #5]
 80039e2:	9003      	str	r0, [sp, #12]
 80039e4:	7930      	ldrb	r0, [r6, #4]
 80039e6:	9002      	str	r0, [sp, #8]
 80039e8:	78f0      	ldrb	r0, [r6, #3]
 80039ea:	9001      	str	r0, [sp, #4]
 80039ec:	78b0      	ldrb	r0, [r6, #2]
 80039ee:	9000      	str	r0, [sp, #0]
 80039f0:	4648      	mov	r0, r9
 80039f2:	f005 f83b 	bl	8008a6c <SetButtonEvents>
 80039f6:	e79f      	b.n	8003938 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 80039f8:	2000      	movs	r0, #0
 80039fa:	b009      	add	sp, #36	; 0x24
 80039fc:	bcc0      	pop	{r6, r7}
 80039fe:	46b9      	mov	r9, r7
 8003a00:	46b0      	mov	r8, r6
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a04:	2000148a 	.word	0x2000148a

08003a08 <LoadEEvars>:
{
 8003a08:	b510      	push	{r4, lr}
	LoadROtopology();
 8003a0a:	f7ff fc1f 	bl	800324c <LoadROtopology>
	LoadEEportsDir();
 8003a0e:	f7ff fcbb 	bl	8003388 <LoadEEportsDir>
	LoadEEalias();
 8003a12:	f7ff fd1d 	bl	8003450 <LoadEEalias>
	LoadEEgroup();
 8003a16:	f7ff fd61 	bl	80034dc <LoadEEgroup>
	LoadEEstreams();
 8003a1a:	f7ff fdb5 	bl	8003588 <LoadEEstreams>
	LoadEEparams();	
 8003a1e:	f7ff fea1 	bl	8003764 <LoadEEparams>
	LoadEEbuttons();	
 8003a22:	f7ff ff79 	bl	8003918 <LoadEEbuttons>
	LoadROsnippets();
 8003a26:	f7ff fb8b 	bl	8003140 <LoadROsnippets>
}
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003a2c:	b530      	push	{r4, r5, lr}
 8003a2e:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003a30:	ab04      	add	r3, sp, #16
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	ab07      	add	r3, sp, #28
 8003a36:	2212      	movs	r2, #18
 8003a38:	446a      	add	r2, sp
 8003a3a:	a908      	add	r1, sp, #32
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f009 f991 	bl	800cd64 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003a42:	ac03      	add	r4, sp, #12
 8003a44:	9400      	str	r4, [sp, #0]
 8003a46:	ab05      	add	r3, sp, #20
 8003a48:	220e      	movs	r2, #14
 8003a4a:	446a      	add	r2, sp
 8003a4c:	a906      	add	r1, sp, #24
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f009 f988 	bl	800cd64 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a54:	2301      	movs	r3, #1
 8003a56:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2500      	movs	r5, #0
 8003a5a:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003a5c:	466b      	mov	r3, sp
 8003a5e:	8a5b      	ldrh	r3, [r3, #18]
 8003a60:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003a62:	a909      	add	r1, sp, #36	; 0x24
 8003a64:	9808      	ldr	r0, [sp, #32]
 8003a66:	f00d fba5 	bl	80111b4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a6a:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003a70:	8823      	ldrh	r3, [r4, #0]
 8003a72:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003a74:	a909      	add	r1, sp, #36	; 0x24
 8003a76:	9805      	ldr	r0, [sp, #20]
 8003a78:	f00d fb9c 	bl	80111b4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003a7c:	466b      	mov	r3, sp
 8003a7e:	8a59      	ldrh	r1, [r3, #18]
 8003a80:	2200      	movs	r2, #0
 8003a82:	9808      	ldr	r0, [sp, #32]
 8003a84:	f00d fc86 	bl	8011394 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003a88:	2005      	movs	r0, #5
 8003a8a:	f009 fcff 	bl	800d48c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003a8e:	8821      	ldrh	r1, [r4, #0]
 8003a90:	9805      	ldr	r0, [sp, #20]
 8003a92:	f00d fc79 	bl	8011388 <HAL_GPIO_ReadPin>
 8003a96:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 8003a98:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <IsLowerCLIbaud+0x76>
}
 8003a9e:	b00f      	add	sp, #60	; 0x3c
 8003aa0:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003aa2:	3312      	adds	r3, #18
 8003aa4:	446b      	add	r3, sp
 8003aa6:	8819      	ldrh	r1, [r3, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	9808      	ldr	r0, [sp, #32]
 8003aac:	f00d fc72 	bl	8011394 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003ab0:	2005      	movs	r0, #5
 8003ab2:	f009 fceb 	bl	800d48c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003ab6:	ab03      	add	r3, sp, #12
 8003ab8:	8819      	ldrh	r1, [r3, #0]
 8003aba:	9805      	ldr	r0, [sp, #20]
 8003abc:	f00d fc64 	bl	8011388 <HAL_GPIO_ReadPin>
 8003ac0:	3801      	subs	r0, #1
 8003ac2:	4243      	negs	r3, r0
 8003ac4:	4158      	adcs	r0, r3
			return 1;
 8003ac6:	b2c0      	uxtb	r0, r0
 8003ac8:	e7e9      	b.n	8003a9e <IsLowerCLIbaud+0x72>
	...

08003acc <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003acc:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <EE_FormatForFactoryReset+0x20>)
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <EE_FormatForFactoryReset+0x24>)
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d100      	bne.n	8003ada <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8003ad8:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 8003ada:	f004 f875 	bl	8007bc8 <EE_Format>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d1fa      	bne.n	8003ad8 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <EE_FormatForFactoryReset+0x24>)
 8003ae4:	4a01      	ldr	r2, [pc, #4]	; (8003aec <EE_FormatForFactoryReset+0x20>)
 8003ae6:	601a      	str	r2, [r3, #0]
}
 8003ae8:	e7f6      	b.n	8003ad8 <EE_FormatForFactoryReset+0xc>
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	beefdead 	.word	0xbeefdead
 8003af0:	20007ff0 	.word	0x20007ff0

08003af4 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003af4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003af6:	f009 fe69 	bl	800d7cc <GetUart>
 8003afa:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003afc:	23e1      	movs	r3, #225	; 0xe1
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003b0e:	f00f fb97 	bl	8013240 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	2120      	movs	r1, #32
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bd10      	pop	{r4, pc}
	...

08003b20 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003b20:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003b22:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <IsModuleParameter+0x14>)
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	f7fc faed 	bl	8000104 <strcmp>
 8003b2a:	4243      	negs	r3, r0
 8003b2c:	4158      	adcs	r0, r3
 8003b2e:	b2c0      	uxtb	r0, r0
			return i+1;
  }
	return 0;
}
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000088 	.word	0x20000088

08003b38 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003b3c:	491b      	ldr	r1, [pc, #108]	; (8003bac <IsMathOperator+0x74>)
 8003b3e:	f7fc fae1 	bl	8000104 <strcmp>
 8003b42:	0006      	movs	r6, r0
 8003b44:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003b46:	4c1a      	ldr	r4, [pc, #104]	; (8003bb0 <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 8003b48:	2e00      	cmp	r6, #0
 8003b4a:	d023      	beq.n	8003b94 <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 8003b4c:	0021      	movs	r1, r4
 8003b4e:	0028      	movs	r0, r5
 8003b50:	f7fc fad8 	bl	8000104 <strcmp>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d01f      	beq.n	8003b98 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <IsMathOperator+0x7c>)
 8003b5a:	0028      	movs	r0, r5
 8003b5c:	f7fc fad2 	bl	8000104 <strcmp>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d01b      	beq.n	8003b9c <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003b64:	4914      	ldr	r1, [pc, #80]	; (8003bb8 <IsMathOperator+0x80>)
 8003b66:	0028      	movs	r0, r5
 8003b68:	f7fc facc 	bl	8000104 <strcmp>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d017      	beq.n	8003ba0 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003b70:	4912      	ldr	r1, [pc, #72]	; (8003bbc <IsMathOperator+0x84>)
 8003b72:	0028      	movs	r0, r5
 8003b74:	f7fc fac6 	bl	8000104 <strcmp>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d013      	beq.n	8003ba4 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003b7c:	4910      	ldr	r1, [pc, #64]	; (8003bc0 <IsMathOperator+0x88>)
 8003b7e:	0028      	movs	r0, r5
 8003b80:	f7fc fac0 	bl	8000104 <strcmp>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d00f      	beq.n	8003ba8 <IsMathOperator+0x70>
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003b88:	3f01      	subs	r7, #1
 8003b8a:	b2ff      	uxtb	r7, r7
 8003b8c:	2f00      	cmp	r7, #0
 8003b8e:	d1db      	bne.n	8003b48 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 8003b90:	0038      	movs	r0, r7
 8003b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003b94:	2701      	movs	r7, #1
 8003b96:	e7fb      	b.n	8003b90 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003b98:	2702      	movs	r7, #2
 8003b9a:	e7f9      	b.n	8003b90 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003b9c:	2703      	movs	r7, #3
 8003b9e:	e7f7      	b.n	8003b90 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003ba0:	2704      	movs	r7, #4
 8003ba2:	e7f5      	b.n	8003b90 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003ba4:	2705      	movs	r7, #5
 8003ba6:	e7f3      	b.n	8003b90 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003ba8:	2706      	movs	r7, #6
 8003baa:	e7f1      	b.n	8003b90 <IsMathOperator+0x58>
 8003bac:	08019d20 	.word	0x08019d20
 8003bb0:	08019d24 	.word	0x08019d24
 8003bb4:	08019d28 	.word	0x08019d28
 8003bb8:	08019d2c 	.word	0x08019d2c
 8003bbc:	08019d30 	.word	0x08019d30
 8003bc0:	08019d34 	.word	0x08019d34

08003bc4 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003bca:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003bcc:	4d0e      	ldr	r5, [pc, #56]	; (8003c08 <ExploreNeighbors+0x44>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003bce:	2603      	movs	r6, #3
 8003bd0:	e003      	b.n	8003bda <ExploreNeighbors+0x16>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	b2e4      	uxtb	r4, r4
 8003bd6:	2c06      	cmp	r4, #6
 8003bd8:	d012      	beq.n	8003c00 <ExploreNeighbors+0x3c>
		if (port != ignore) 
 8003bda:	42a7      	cmp	r7, r4
 8003bdc:	d0f9      	beq.n	8003bd2 <ExploreNeighbors+0xe>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <ExploreNeighbors+0x48>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	0a1a      	lsrs	r2, r3, #8
 8003be4:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003be6:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003be8:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003bea:	9600      	str	r6, [sp, #0]
 8003bec:	230a      	movs	r3, #10
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	0020      	movs	r0, r4
 8003bf4:	f005 fa12 	bl	800901c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003bf8:	200a      	movs	r0, #10
 8003bfa:	f009 ff34 	bl	800da66 <osDelay>
 8003bfe:	e7e8      	b.n	8003bd2 <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 8003c00:	2000      	movs	r0, #0
 8003c02:	b003      	add	sp, #12
 8003c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	20000f08 	.word	0x20000f08
 8003c0c:	20000050 	.word	0x20000050

08003c10 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	46de      	mov	lr, fp
 8003c14:	4657      	mov	r7, sl
 8003c16:	464e      	mov	r6, r9
 8003c18:	4645      	mov	r5, r8
 8003c1a:	b5e0      	push	{r5, r6, r7, lr}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003c20:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <FindBroadcastRoutes+0x128>)
 8003c22:	781d      	ldrb	r5, [r3, #0]
 8003c24:	1deb      	adds	r3, r5, #7
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	466a      	mov	r2, sp
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	469d      	mov	sp, r3
 8003c30:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	d009      	beq.n	8003c4a <FindBroadcastRoutes+0x3a>
 8003c36:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <FindBroadcastRoutes+0x12c>)
 8003c38:	2300      	movs	r3, #0
	{	
		modules[m] = 0;
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] = 0;
 8003c3e:	8011      	strh	r1, [r2, #0]
	for(m=0 ; m<N ; m++)
 8003c40:	3301      	adds	r3, #1
 8003c42:	3202      	adds	r2, #2
 8003c44:	b2de      	uxtb	r6, r3
 8003c46:	42b5      	cmp	r5, r6
 8003c48:	d8f8      	bhi.n	8003c3c <FindBroadcastRoutes+0x2c>
	}
	modules[src-1] = ++level;					// Tag the source
 8003c4a:	3801      	subs	r0, #1
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 8003c50:	2216      	movs	r2, #22
 8003c52:	4342      	muls	r2, r0
 8003c54:	4b3a      	ldr	r3, [pc, #232]	; (8003d40 <FindBroadcastRoutes+0x130>)
 8003c56:	18d2      	adds	r2, r2, r3
	modules[src-1] = ++level;					// Tag the source
 8003c58:	2100      	movs	r1, #0
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003c5a:	4e38      	ldr	r6, [pc, #224]	; (8003d3c <FindBroadcastRoutes+0x12c>)
 8003c5c:	0040      	lsls	r0, r0, #1
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003c62:	3301      	adds	r3, #1
 8003c64:	469c      	mov	ip, r3
 8003c66:	607d      	str	r5, [r7, #4]
 8003c68:	46a3      	mov	fp, r4
 8003c6a:	e003      	b.n	8003c74 <FindBroadcastRoutes+0x64>
	for(p=1 ; p<=NumOfPorts ; p++)
 8003c6c:	3101      	adds	r1, #1
 8003c6e:	3202      	adds	r2, #2
 8003c70:	2905      	cmp	r1, #5
 8003c72:	d011      	beq.n	8003c98 <FindBroadcastRoutes+0x88>
		if (array[src-1][p]) 
 8003c74:	8853      	ldrh	r3, [r2, #2]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f8      	beq.n	8003c6c <FindBroadcastRoutes+0x5c>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003c7a:	5b85      	ldrh	r5, [r0, r6]
 8003c7c:	46a9      	mov	r9, r5
 8003c7e:	4645      	mov	r5, r8
 8003c80:	408d      	lsls	r5, r1
 8003c82:	46aa      	mov	sl, r5
 8003c84:	464d      	mov	r5, r9
 8003c86:	4654      	mov	r4, sl
 8003c88:	4325      	orrs	r5, r4
 8003c8a:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	445b      	add	r3, fp
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4664      	mov	r4, ip
 8003c94:	701c      	strb	r4, [r3, #0]
 8003c96:	e7e9      	b.n	8003c6c <FindBroadcastRoutes+0x5c>
 8003c98:	687d      	ldr	r5, [r7, #4]
 8003c9a:	465c      	mov	r4, fp
	++level;													// Move one level
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	4699      	mov	r9, r3
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <FindBroadcastRoutes+0x130>)
 8003ca2:	3302      	adds	r3, #2
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003ca4:	469a      	mov	sl, r3
		++level;																					// Move one level
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4699      	mov	r9, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	d038      	beq.n	8003d24 <FindBroadcastRoutes+0x114>
 8003cb2:	2300      	movs	r3, #0
		untaged = 0;																			// Reset the untaged counter
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	4694      	mov	ip, r2
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003cb8:	464a      	mov	r2, r9
 8003cba:	1e56      	subs	r6, r2, #1
 8003cbc:	e021      	b.n	8003d02 <FindBroadcastRoutes+0xf2>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	3102      	adds	r1, #2
 8003cc2:	2805      	cmp	r0, #5
 8003cc4:	d015      	beq.n	8003cf2 <FindBroadcastRoutes+0xe2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003cc6:	880a      	ldrh	r2, [r1, #0]
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d0f8      	beq.n	8003cbe <FindBroadcastRoutes+0xae>
 8003ccc:	08d2      	lsrs	r2, r2, #3
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	5cab      	ldrb	r3, [r5, r2]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f3      	bne.n	8003cbe <FindBroadcastRoutes+0xae>
						bcastRoutes[m] |= (0x01 << (p-1));
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <FindBroadcastRoutes+0x12c>)
 8003cd8:	5ae3      	ldrh	r3, [r4, r3]
 8003cda:	2601      	movs	r6, #1
 8003cdc:	4086      	lsls	r6, r0
 8003cde:	4333      	orrs	r3, r6
 8003ce0:	4e16      	ldr	r6, [pc, #88]	; (8003d3c <FindBroadcastRoutes+0x12c>)
 8003ce2:	53a3      	strh	r3, [r4, r6]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	54ab      	strb	r3, [r5, r2]
						++untaged;
 8003ce8:	4663      	mov	r3, ip
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	469c      	mov	ip, r3
 8003cf0:	e7e5      	b.n	8003cbe <FindBroadcastRoutes+0xae>
 8003cf2:	002c      	movs	r4, r5
 8003cf4:	4645      	mov	r5, r8
 8003cf6:	465b      	mov	r3, fp
 8003cf8:	687e      	ldr	r6, [r7, #4]
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4295      	cmp	r5, r2
 8003d00:	d90d      	bls.n	8003d1e <FindBroadcastRoutes+0x10e>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003d02:	5ce2      	ldrb	r2, [r4, r3]
 8003d04:	42b2      	cmp	r2, r6
 8003d06:	d1f8      	bne.n	8003cfa <FindBroadcastRoutes+0xea>
 8003d08:	2116      	movs	r1, #22
 8003d0a:	4359      	muls	r1, r3
 8003d0c:	4451      	add	r1, sl
 8003d0e:	005a      	lsls	r2, r3, #1
 8003d10:	2000      	movs	r0, #0
 8003d12:	46a8      	mov	r8, r5
 8003d14:	0025      	movs	r5, r4
 8003d16:	0014      	movs	r4, r2
 8003d18:	469b      	mov	fp, r3
 8003d1a:	607e      	str	r6, [r7, #4]
 8003d1c:	e7d3      	b.n	8003cc6 <FindBroadcastRoutes+0xb6>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003d1e:	4663      	mov	r3, ip
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1c0      	bne.n	8003ca6 <FindBroadcastRoutes+0x96>

	
	return result;
}
 8003d24:	2000      	movs	r0, #0
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b003      	add	sp, #12
 8003d2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003d2c:	46bb      	mov	fp, r7
 8003d2e:	46b2      	mov	sl, r6
 8003d30:	46a9      	mov	r9, r5
 8003d32:	46a0      	mov	r8, r4
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	2000001c 	.word	0x2000001c
 8003d3c:	20000cc0 	.word	0x20000cc0
 8003d40:	20000a80 	.word	0x20000a80

08003d44 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d46:	46de      	mov	lr, fp
 8003d48:	4657      	mov	r7, sl
 8003d4a:	464e      	mov	r6, r9
 8003d4c:	4645      	mov	r5, r8
 8003d4e:	b5e0      	push	{r5, r6, r7, lr}
 8003d50:	b091      	sub	sp, #68	; 0x44
 8003d52:	0006      	movs	r6, r0
 8003d54:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003d56:	2400      	movs	r4, #0
 8003d58:	9403      	str	r4, [sp, #12]
 8003d5a:	222e      	movs	r2, #46	; 0x2e
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	a804      	add	r0, sp, #16
 8003d60:	f00f fe47 	bl	80139f2 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003d64:	221a      	movs	r2, #26
 8003d66:	2100      	movs	r1, #0
 8003d68:	4858      	ldr	r0, [pc, #352]	; (8003ecc <FindRoute+0x188>)
 8003d6a:	f00f fe42 	bl	80139f2 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003d6e:	0035      	movs	r5, r6
 8003d70:	1e70      	subs	r0, r6, #1
 8003d72:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <FindRoute+0x18c>)
 8003d74:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003d76:	4b57      	ldr	r3, [pc, #348]	; (8003ed4 <FindRoute+0x190>)
 8003d78:	541c      	strb	r4, [r3, r0]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003d7a:	2616      	movs	r6, #22
 8003d7c:	4370      	muls	r0, r6
 8003d7e:	4e56      	ldr	r6, [pc, #344]	; (8003ed8 <FindRoute+0x194>)
 8003d80:	1981      	adds	r1, r0, r6
 8003d82:	9101      	str	r1, [sp, #4]
 8003d84:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003d86:	4653      	mov	r3, sl
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	e002      	b.n	8003d92 <FindRoute+0x4e>
	for(int col=1 ; col<=6 ; col++)
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	2807      	cmp	r0, #7
 8003d90:	d010      	beq.n	8003db4 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003d92:	0043      	lsls	r3, r0, #1
 8003d94:	5acb      	ldrh	r3, [r1, r3]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f8      	beq.n	8003d8c <FindRoute+0x48>
 8003d9a:	08db      	lsrs	r3, r3, #3
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d1f5      	bne.n	8003d8c <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8003da0:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <FindRoute+0x18c>)
 8003da2:	4453      	add	r3, sl
 8003da4:	3b01      	subs	r3, #1
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8003daa:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <FindRoute+0x188>)
 8003dac:	4652      	mov	r2, sl
 8003dae:	701a      	strb	r2, [r3, #0]
			return col;	
 8003db0:	b2c0      	uxtb	r0, r0
 8003db2:	e083      	b.n	8003ebc <FindRoute+0x178>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8003db4:	4b49      	ldr	r3, [pc, #292]	; (8003edc <FindRoute+0x198>)
 8003db6:	7819      	ldrb	r1, [r3, #0]
 8003db8:	2900      	cmp	r1, #0
 8003dba:	dd14      	ble.n	8003de6 <FindRoute+0xa2>
 8003dbc:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003dbe:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <FindRoute+0x18c>)
 8003dc0:	1e54      	subs	r4, r2, #1
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	4690      	mov	r8, r2
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003dc6:	4a43      	ldr	r2, [pc, #268]	; (8003ed4 <FindRoute+0x190>)
 8003dc8:	1e50      	subs	r0, r2, #1
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4694      	mov	ip, r2
 8003dce:	e002      	b.n	8003dd6 <FindRoute+0x92>
	for (int i=1 ; i<=N ; i++)   					
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	dc07      	bgt.n	8003de6 <FindRoute+0xa2>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003dd6:	429d      	cmp	r5, r3
 8003dd8:	d0fa      	beq.n	8003dd0 <FindRoute+0x8c>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003dda:	4642      	mov	r2, r8
 8003ddc:	54e2      	strb	r2, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003dde:	181a      	adds	r2, r3, r0
 8003de0:	4666      	mov	r6, ip
 8003de2:	7016      	strb	r6, [r2, #0]
 8003de4:	e7f4      	b.n	8003dd0 <FindRoute+0x8c>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003de6:	2400      	movs	r4, #0
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <FindRoute+0x194>)
 8003dea:	4698      	mov	r8, r3
 8003dec:	230c      	movs	r3, #12
 8003dee:	4443      	add	r3, r8
 8003df0:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003df2:	4d37      	ldr	r5, [pc, #220]	; (8003ed0 <FindRoute+0x18c>)
 8003df4:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 8003df6:	a803      	add	r0, sp, #12
 8003df8:	f7ff f990 	bl	800311c <QnotEmpty>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d12e      	bne.n	8003e5e <FindRoute+0x11a>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003e00:	a903      	add	r1, sp, #12
 8003e02:	4833      	ldr	r0, [pc, #204]	; (8003ed0 <FindRoute+0x18c>)
 8003e04:	f7ff f96c 	bl	80030e0 <minArr>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003e0c:	455c      	cmp	r4, fp
 8003e0e:	d00b      	beq.n	8003e28 <FindRoute+0xe4>
			Q[u-1] = 1;													// Remove u from Q 
 8003e10:	1e67      	subs	r7, r4, #1
 8003e12:	ab03      	add	r3, sp, #12
 8003e14:	2201      	movs	r2, #1
 8003e16:	55da      	strb	r2, [r3, r7]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003e18:	2016      	movs	r0, #22
 8003e1a:	4378      	muls	r0, r7
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18c1      	adds	r1, r0, r3
 8003e20:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 8003e22:	aa03      	add	r2, sp, #12
 8003e24:	46ba      	mov	sl, r7
 8003e26:	e005      	b.n	8003e34 <FindRoute+0xf0>
 8003e28:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003e2a:	465c      	mov	r4, fp
 8003e2c:	e018      	b.n	8003e60 <FindRoute+0x11c>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003e2e:	3102      	adds	r1, #2
 8003e30:	4281      	cmp	r1, r0
 8003e32:	d0e0      	beq.n	8003df6 <FindRoute+0xb2>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003e34:	884b      	ldrh	r3, [r1, #2]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f9      	beq.n	8003e2e <FindRoute+0xea>
				v = (array[u-1][n]>>3);
 8003e3a:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	5cd6      	ldrb	r6, [r2, r3]
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d1f3      	bne.n	8003e2e <FindRoute+0xea>
					alt = routeDist[u-1] + 1;					// Add one hop
 8003e46:	4656      	mov	r6, sl
 8003e48:	5dae      	ldrb	r6, [r5, r6]
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8003e4e:	5cef      	ldrb	r7, [r5, r3]
 8003e50:	42b7      	cmp	r7, r6
 8003e52:	d9ec      	bls.n	8003e2e <FindRoute+0xea>
					{
						routeDist[v-1] = alt; 
 8003e54:	4f1e      	ldr	r7, [pc, #120]	; (8003ed0 <FindRoute+0x18c>)
 8003e56:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 8003e58:	4e1e      	ldr	r6, [pc, #120]	; (8003ed4 <FindRoute+0x190>)
 8003e5a:	54f4      	strb	r4, [r6, r3]
 8003e5c:	e7e7      	b.n	8003e2e <FindRoute+0xea>
 8003e5e:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <FindRoute+0x190>)
 8003e62:	191b      	adds	r3, r3, r4
 8003e64:	3b01      	subs	r3, #1
 8003e66:	7819      	ldrb	r1, [r3, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d00d      	beq.n	8003e8a <FindRoute+0x146>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 8003e6e:	4d17      	ldr	r5, [pc, #92]	; (8003ecc <FindRoute+0x188>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003e70:	4818      	ldr	r0, [pc, #96]	; (8003ed4 <FindRoute+0x190>)
 8003e72:	e000      	b.n	8003e76 <FindRoute+0x132>
 8003e74:	0011      	movs	r1, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8003e76:	001a      	movs	r2, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003e7e:	1842      	adds	r2, r0, r1
 8003e80:	3a01      	subs	r2, #1
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	000c      	movs	r4, r1
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	d1f4      	bne.n	8003e74 <FindRoute+0x130>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 8003e8a:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003e8c:	4c0f      	ldr	r4, [pc, #60]	; (8003ecc <FindRoute+0x188>)
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <FindRoute+0x18c>)
 8003e90:	4453      	add	r3, sl
 8003e92:	001f      	movs	r7, r3
 8003e94:	3f01      	subs	r7, #1
 8003e96:	9901      	ldr	r1, [sp, #4]
 8003e98:	e002      	b.n	8003ea0 <FindRoute+0x15c>
	for(int col=1 ; col<=6 ; col++)	
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	2807      	cmp	r0, #7
 8003e9e:	d00c      	beq.n	8003eba <FindRoute+0x176>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003ea0:	0043      	lsls	r3, r0, #1
 8003ea2:	5acb      	ldrh	r3, [r1, r3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f8      	beq.n	8003e9a <FindRoute+0x156>
 8003ea8:	783a      	ldrb	r2, [r7, #0]
 8003eaa:	18a2      	adds	r2, r4, r2
 8003eac:	3a01      	subs	r2, #1
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	08db      	lsrs	r3, r3, #3
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d1f1      	bne.n	8003e9a <FindRoute+0x156>
			return col;	
 8003eb6:	b2c0      	uxtb	r0, r0
 8003eb8:	e000      	b.n	8003ebc <FindRoute+0x178>
		}
	}	

	return 0;			
 8003eba:	2000      	movs	r0, #0
}
 8003ebc:	b011      	add	sp, #68	; 0x44
 8003ebe:	bcf0      	pop	{r4, r5, r6, r7}
 8003ec0:	46bb      	mov	fp, r7
 8003ec2:	46b2      	mov	sl, r6
 8003ec4:	46a9      	mov	r9, r5
 8003ec6:	46a0      	mov	r8, r4
 8003ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	20006988 	.word	0x20006988
 8003ed0:	200010dc 	.word	0x200010dc
 8003ed4:	200010f8 	.word	0x200010f8
 8003ed8:	20000a80 	.word	0x20000a80
 8003edc:	2000001c 	.word	0x2000001c

08003ee0 <remoteBootloaderUpdate>:
{
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	46ce      	mov	lr, r9
 8003ee4:	4647      	mov	r7, r8
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	4680      	mov	r8, r0
 8003eec:	000d      	movs	r5, r1
 8003eee:	0016      	movs	r6, r2
 8003ef0:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003ef4:	7818      	ldrb	r0, [r3, #0]
 8003ef6:	f7ff ff25 	bl	8003d44 <FindRoute>
 8003efa:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	d024      	beq.n	8003f4a <remoteBootloaderUpdate+0x6a>
 8003f00:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	42ab      	cmp	r3, r5
 8003f06:	d05e      	beq.n	8003fc6 <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4691      	mov	r9, r2
	if (src == myID)
 8003f0c:	4543      	cmp	r3, r8
 8003f0e:	d050      	beq.n	8003fb2 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 8003f10:	0030      	movs	r0, r6
 8003f12:	f7ff fdef 	bl	8003af4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003f16:	0020      	movs	r0, r4
 8003f18:	f7ff fdec 	bl	8003af4 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	454b      	cmp	r3, r9
 8003f22:	d03f      	beq.n	8003fa4 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003f26:	7819      	ldrb	r1, [r3, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	3303      	adds	r3, #3
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	000b      	movs	r3, r1
 8003f38:	0022      	movs	r2, r4
 8003f3a:	0030      	movs	r0, r6
 8003f3c:	f005 fabe 	bl	80094bc <StartScastDMAStream>
}
 8003f40:	b005      	add	sp, #20
 8003f42:	bcc0      	pop	{r6, r7}
 8003f44:	46b9      	mov	r9, r7
 8003f46:	46b0      	mov	r8, r6
 8003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <remoteBootloaderUpdate+0xf0>)
 8003f4c:	195b      	adds	r3, r3, r5
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	2a01      	cmp	r2, #1
 8003f54:	d022      	beq.n	8003f9c <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <remoteBootloaderUpdate+0xf4>)
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	4699      	mov	r9, r3
	if (src == myID)
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4543      	cmp	r3, r8
 8003f66:	d1d3      	bne.n	8003f10 <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003f68:	f009 fea0 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 8003f6c:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <remoteBootloaderUpdate+0xf8>)
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	002a      	movs	r2, r5
 8003f74:	f00f ff32 	bl	8013ddc <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <remoteBootloaderUpdate+0xfc>)
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	f00f ff4d 	bl	8013e1c <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7fc f8c8 	bl	8000118 <strlen>
 8003f88:	b282      	uxth	r2, r0
 8003f8a:	2332      	movs	r3, #50	; 0x32
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	0030      	movs	r0, r6
 8003f90:	f009 fc66 	bl	800d860 <writePxITMutex>
		Delay_ms(100);
 8003f94:	2064      	movs	r0, #100	; 0x64
 8003f96:	f00b fde5 	bl	800fb64 <HAL_Delay>
 8003f9a:	e7b9      	b.n	8003f10 <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <remoteBootloaderUpdate+0xec>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	e7dd      	b.n	8003f60 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8003fa4:	0020      	movs	r0, r4
 8003fa6:	f009 fc11 	bl	800d7cc <GetUart>
 8003faa:	2101      	movs	r1, #1
 8003fac:	f009 fca6 	bl	800d8fc <SwapUartPins>
 8003fb0:	e7b8      	b.n	8003f24 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003fb2:	f009 fe7b 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 8003fb6:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <remoteBootloaderUpdate+0x100>)
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	003b      	movs	r3, r7
 8003fbe:	002a      	movs	r2, r5
 8003fc0:	f00f ff0c 	bl	8013ddc <sprintf>
 8003fc4:	e7d8      	b.n	8003f78 <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 8003fc6:	46a9      	mov	r9, r5
		myOutport = outport;
 8003fc8:	003c      	movs	r4, r7
 8003fca:	e79f      	b.n	8003f0c <remoteBootloaderUpdate+0x2c>
 8003fcc:	20001046 	.word	0x20001046
 8003fd0:	200010dc 	.word	0x200010dc
 8003fd4:	20006988 	.word	0x20006988
 8003fd8:	20000078 	.word	0x20000078
 8003fdc:	20000080 	.word	0x20000080
 8003fe0:	2000007c 	.word	0x2000007c

08003fe4 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	46de      	mov	lr, fp
 8003fe8:	4657      	mov	r7, sl
 8003fea:	464e      	mov	r6, r9
 8003fec:	4645      	mov	r5, r8
 8003fee:	b5e0      	push	{r5, r6, r7, lr}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003ff4:	4c5b      	ldr	r4, [pc, #364]	; (8004164 <DisplayTopology+0x180>)
 8003ff6:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <DisplayTopology+0x184>)
 8003ff8:	0022      	movs	r2, r4
 8003ffa:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ffc:	c223      	stmia	r2!, {r0, r1, r5}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	889b      	ldrh	r3, [r3, #4]
 8004004:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004006:	0020      	movs	r0, r4
 8004008:	f7fc f886 	bl	8000118 <strlen>
 800400c:	b282      	uxth	r2, r0
 800400e:	2301      	movs	r3, #1
 8004010:	425b      	negs	r3, r3
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	3333      	adds	r3, #51	; 0x33
 8004016:	0021      	movs	r1, r4
 8004018:	0038      	movs	r0, r7
 800401a:	f009 fbf5 	bl	800d808 <writePxMutex>
 800401e:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <DisplayTopology+0x188>)
 8004022:	4698      	mov	r8, r3
 8004024:	4d4f      	ldr	r5, [pc, #316]	; (8004164 <DisplayTopology+0x180>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004026:	2601      	movs	r6, #1
 8004028:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 800402a:	0022      	movs	r2, r4
 800402c:	4641      	mov	r1, r8
 800402e:	0028      	movs	r0, r5
 8004030:	f00f fed4 	bl	8013ddc <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004034:	0028      	movs	r0, r5
 8004036:	f7fc f86f 	bl	8000118 <strlen>
 800403a:	b282      	uxth	r2, r0
 800403c:	9600      	str	r6, [sp, #0]
 800403e:	2332      	movs	r3, #50	; 0x32
 8004040:	0029      	movs	r1, r5
 8004042:	0038      	movs	r0, r7
 8004044:	f009 fbe0 	bl	800d808 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8004048:	3401      	adds	r4, #1
 800404a:	2c06      	cmp	r4, #6
 800404c:	d1ed      	bne.n	800402a <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 800404e:	2301      	movs	r3, #1
 8004050:	425b      	negs	r3, r3
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	3333      	adds	r3, #51	; 0x33
 8004056:	2203      	movs	r2, #3
 8004058:	4945      	ldr	r1, [pc, #276]	; (8004170 <DisplayTopology+0x18c>)
 800405a:	0038      	movs	r0, r7
 800405c:	f009 fbd4 	bl	800d808 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <DisplayTopology+0x190>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d06c      	beq.n	8004142 <DisplayTopology+0x15e>
 8004068:	2300      	movs	r3, #0
 800406a:	4699      	mov	r9, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800406c:	3b01      	subs	r3, #1
 800406e:	4698      	mov	r8, r3
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <DisplayTopology+0x194>)
 8004072:	469b      	mov	fp, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8004074:	4b41      	ldr	r3, [pc, #260]	; (800417c <DisplayTopology+0x198>)
 8004076:	469a      	mov	sl, r3
 8004078:	e02d      	b.n	80040d6 <DisplayTopology+0xf2>
 800407a:	2307      	movs	r3, #7
 800407c:	4013      	ands	r3, r2
 800407e:	08d2      	lsrs	r2, r2, #3
 8004080:	4651      	mov	r1, sl
 8004082:	4838      	ldr	r0, [pc, #224]	; (8004164 <DisplayTopology+0x180>)
 8004084:	f00f feaa 	bl	8013ddc <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8004088:	4d36      	ldr	r5, [pc, #216]	; (8004164 <DisplayTopology+0x180>)
 800408a:	0028      	movs	r0, r5
 800408c:	f7fc f844 	bl	8000118 <strlen>
 8004090:	b282      	uxth	r2, r0
 8004092:	4643      	mov	r3, r8
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2332      	movs	r3, #50	; 0x32
 8004098:	0029      	movs	r1, r5
 800409a:	0038      	movs	r0, r7
 800409c:	f009 fbb4 	bl	800d808 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80040a0:	3402      	adds	r4, #2
 80040a2:	42b4      	cmp	r4, r6
 80040a4:	d007      	beq.n	80040b6 <DisplayTopology+0xd2>
			if (!array[row][col])
 80040a6:	8862      	ldrh	r2, [r4, #2]
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	d1e6      	bne.n	800407a <DisplayTopology+0x96>
				sprintf(pcUserMessage, "%d\t",0);
 80040ac:	4934      	ldr	r1, [pc, #208]	; (8004180 <DisplayTopology+0x19c>)
 80040ae:	482d      	ldr	r0, [pc, #180]	; (8004164 <DisplayTopology+0x180>)
 80040b0:	f00f fe94 	bl	8013ddc <sprintf>
 80040b4:	e7e8      	b.n	8004088 <DisplayTopology+0xa4>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80040b6:	4643      	mov	r3, r8
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2332      	movs	r3, #50	; 0x32
 80040bc:	2202      	movs	r2, #2
 80040be:	4931      	ldr	r1, [pc, #196]	; (8004184 <DisplayTopology+0x1a0>)
 80040c0:	0038      	movs	r0, r7
 80040c2:	f009 fba1 	bl	800d808 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 80040c6:	464b      	mov	r3, r9
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4699      	mov	r9, r3
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <DisplayTopology+0x190>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	454b      	cmp	r3, r9
 80040d4:	d935      	bls.n	8004142 <DisplayTopology+0x15e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 80040d6:	464b      	mov	r3, r9
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	4c22      	ldr	r4, [pc, #136]	; (8004164 <DisplayTopology+0x180>)
 80040dc:	492a      	ldr	r1, [pc, #168]	; (8004188 <DisplayTopology+0x1a4>)
 80040de:	0020      	movs	r0, r4
 80040e0:	f00f fe7c 	bl	8013ddc <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80040e4:	0020      	movs	r0, r4
 80040e6:	f7fc f817 	bl	8000118 <strlen>
 80040ea:	b282      	uxth	r2, r0
 80040ec:	4643      	mov	r3, r8
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2332      	movs	r3, #50	; 0x32
 80040f2:	0021      	movs	r1, r4
 80040f4:	0038      	movs	r0, r7
 80040f6:	f009 fb87 	bl	800d808 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80040fa:	2616      	movs	r6, #22
 80040fc:	464b      	mov	r3, r9
 80040fe:	435e      	muls	r6, r3
 8004100:	465b      	mov	r3, fp
 8004102:	5af3      	ldrh	r3, [r6, r3]
 8004104:	0059      	lsls	r1, r3, #1
 8004106:	18c9      	adds	r1, r1, r3
 8004108:	0049      	lsls	r1, r1, #1
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <DisplayTopology+0x1a8>)
 800410c:	18c9      	adds	r1, r1, r3
 800410e:	2205      	movs	r2, #5
 8004110:	0020      	movs	r0, r4
 8004112:	f00f feb7 	bl	8013e84 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8004116:	4643      	mov	r3, r8
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2332      	movs	r3, #50	; 0x32
 800411c:	2205      	movs	r2, #5
 800411e:	0021      	movs	r1, r4
 8004120:	0038      	movs	r0, r7
 8004122:	f009 fb71 	bl	800d808 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8004126:	4643      	mov	r3, r8
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2332      	movs	r3, #50	; 0x32
 800412c:	2201      	movs	r2, #1
 800412e:	4918      	ldr	r1, [pc, #96]	; (8004190 <DisplayTopology+0x1ac>)
 8004130:	0038      	movs	r0, r7
 8004132:	f009 fb69 	bl	800d808 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8004136:	465b      	mov	r3, fp
 8004138:	18f4      	adds	r4, r6, r3
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <DisplayTopology+0x1b0>)
 800413c:	469c      	mov	ip, r3
 800413e:	4466      	add	r6, ip
 8004140:	e7b1      	b.n	80040a6 <DisplayTopology+0xc2>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8004142:	2301      	movs	r3, #1
 8004144:	425b      	negs	r3, r3
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	3333      	adds	r3, #51	; 0x33
 800414a:	2201      	movs	r2, #1
 800414c:	4912      	ldr	r1, [pc, #72]	; (8004198 <DisplayTopology+0x1b4>)
 800414e:	0038      	movs	r0, r7
 8004150:	f009 fb5a 	bl	800d808 <writePxMutex>
}
 8004154:	b003      	add	sp, #12
 8004156:	bcf0      	pop	{r4, r5, r6, r7}
 8004158:	46bb      	mov	fp, r7
 800415a:	46b2      	mov	sl, r6
 800415c:	46a9      	mov	r9, r5
 800415e:	46a0      	mov	r8, r4
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	20001070 	.word	0x20001070
 8004168:	08019d38 	.word	0x08019d38
 800416c:	08019d4c 	.word	0x08019d4c
 8004170:	0801a748 	.word	0x0801a748
 8004174:	2000001c 	.word	0x2000001c
 8004178:	20000a80 	.word	0x20000a80
 800417c:	08019d64 	.word	0x08019d64
 8004180:	08019d60 	.word	0x08019d60
 8004184:	08019e70 	.word	0x08019e70
 8004188:	08019d54 	.word	0x08019d54
 800418c:	0801a1e8 	.word	0x0801a1e8
 8004190:	08019d48 	.word	0x08019d48
 8004194:	20000a8a 	.word	0x20000a8a
 8004198:	0801badc 	.word	0x0801badc

0800419c <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	46d6      	mov	lr, sl
 80041a0:	464f      	mov	r7, r9
 80041a2:	4646      	mov	r6, r8
 80041a4:	b5c0      	push	{r6, r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 80041aa:	4c31      	ldr	r4, [pc, #196]	; (8004270 <DisplayPortsDir+0xd4>)
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <DisplayPortsDir+0xd8>)
 80041ae:	0022      	movs	r2, r4
 80041b0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041b2:	c223      	stmia	r2!, {r0, r1, r5}
 80041b4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041b6:	c223      	stmia	r2!, {r0, r1, r5}
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80041bc:	0020      	movs	r0, r4
 80041be:	f7fb ffab 	bl	8000118 <strlen>
 80041c2:	b282      	uxth	r2, r0
 80041c4:	2301      	movs	r3, #1
 80041c6:	425b      	negs	r3, r3
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	3333      	adds	r3, #51	; 0x33
 80041cc:	0021      	movs	r1, r4
 80041ce:	4640      	mov	r0, r8
 80041d0:	f009 fb1a 	bl	800d808 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <DisplayPortsDir+0xdc>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2701      	movs	r7, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02c      	beq.n	8004238 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80041de:	4e27      	ldr	r6, [pc, #156]	; (800427c <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <DisplayPortsDir+0xe4>)
 80041e2:	4699      	mov	r9, r3
 80041e4:	e024      	b.n	8004230 <DisplayPortsDir+0x94>
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <DisplayPortsDir+0xd4>)
 80041e8:	469a      	mov	sl, r3
 80041ea:	0023      	movs	r3, r4
 80041ec:	003a      	movs	r2, r7
 80041ee:	4649      	mov	r1, r9
 80041f0:	4650      	mov	r0, sl
 80041f2:	f00f fdf3 	bl	8013ddc <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80041f6:	4650      	mov	r0, sl
 80041f8:	f7fb ff8e 	bl	8000118 <strlen>
 80041fc:	b282      	uxth	r2, r0
 80041fe:	2301      	movs	r3, #1
 8004200:	425b      	negs	r3, r3
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	3333      	adds	r3, #51	; 0x33
 8004206:	4651      	mov	r1, sl
 8004208:	4640      	mov	r0, r8
 800420a:	f009 fafd 	bl	800d808 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 800420e:	2c0a      	cmp	r4, #10
 8004210:	d008      	beq.n	8004224 <DisplayPortsDir+0x88>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004212:	0021      	movs	r1, r4
 8004214:	3401      	adds	r4, #1
 8004216:	5baa      	ldrh	r2, [r5, r6]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	410b      	asrs	r3, r1
 800421e:	4213      	tst	r3, r2
 8004220:	d0f5      	beq.n	800420e <DisplayPortsDir+0x72>
 8004222:	e7e0      	b.n	80041e6 <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004224:	3701      	adds	r7, #1
 8004226:	b2ff      	uxtb	r7, r7
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <DisplayPortsDir+0xdc>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	42bb      	cmp	r3, r7
 800422e:	d303      	bcc.n	8004238 <DisplayPortsDir+0x9c>
{
 8004230:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004232:	1e7d      	subs	r5, r7, #1
 8004234:	006d      	lsls	r5, r5, #1
 8004236:	e7ec      	b.n	8004212 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8004238:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <DisplayPortsDir+0xd4>)
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <DisplayPortsDir+0xe8>)
 800423c:	0022      	movs	r2, r4
 800423e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004240:	c223      	stmia	r2!, {r0, r1, r5}
 8004242:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004244:	c223      	stmia	r2!, {r0, r1, r5}
 8004246:	cb03      	ldmia	r3!, {r0, r1}
 8004248:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800424a:	0020      	movs	r0, r4
 800424c:	f7fb ff64 	bl	8000118 <strlen>
 8004250:	b282      	uxth	r2, r0
 8004252:	2301      	movs	r3, #1
 8004254:	425b      	negs	r3, r3
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	3333      	adds	r3, #51	; 0x33
 800425a:	0021      	movs	r1, r4
 800425c:	4640      	mov	r0, r8
 800425e:	f009 fad3 	bl	800d808 <writePxMutex>
}
 8004262:	b002      	add	sp, #8
 8004264:	bce0      	pop	{r5, r6, r7}
 8004266:	46ba      	mov	sl, r7
 8004268:	46b1      	mov	r9, r6
 800426a:	46a8      	mov	r8, r5
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20001070 	.word	0x20001070
 8004274:	08019d6c 	.word	0x08019d6c
 8004278:	2000001c 	.word	0x2000001c
 800427c:	20006d2c 	.word	0x20006d2c
 8004280:	08019d88 	.word	0x08019d88
 8004284:	08019d9c 	.word	0x08019d9c

08004288 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	46d6      	mov	lr, sl
 800428c:	464f      	mov	r7, r9
 800428e:	4646      	mov	r6, r8
 8004290:	b5c0      	push	{r6, r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004296:	f009 fd09 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 800429a:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 800429c:	2300      	movs	r3, #0
 800429e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 80042a0:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <DisplayModuleStatus+0x260>)
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	4d91      	ldr	r5, [pc, #580]	; (80044ec <DisplayModuleStatus+0x264>)
 80042a6:	4992      	ldr	r1, [pc, #584]	; (80044f0 <DisplayModuleStatus+0x268>)
 80042a8:	0028      	movs	r0, r5
 80042aa:	f00f fd97 	bl	8013ddc <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042ae:	0029      	movs	r1, r5
 80042b0:	0020      	movs	r0, r4
 80042b2:	f00f fdb3 	bl	8013e1c <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80042b6:	4b8f      	ldr	r3, [pc, #572]	; (80044f4 <DisplayModuleStatus+0x26c>)
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	498f      	ldr	r1, [pc, #572]	; (80044f8 <DisplayModuleStatus+0x270>)
 80042bc:	0028      	movs	r0, r5
 80042be:	f00f fd8d 	bl	8013ddc <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042c2:	0029      	movs	r1, r5
 80042c4:	0020      	movs	r0, r4
 80042c6:	f00f fda9 	bl	8013e1c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 80042ca:	2304      	movs	r3, #4
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	3b02      	subs	r3, #2
 80042d0:	2200      	movs	r2, #0
 80042d2:	498a      	ldr	r1, [pc, #552]	; (80044fc <DisplayModuleStatus+0x274>)
 80042d4:	0028      	movs	r0, r5
 80042d6:	f00f fd81 	bl	8013ddc <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042da:	0029      	movs	r1, r5
 80042dc:	0020      	movs	r0, r4
 80042de:	f00f fd9d 	bl	8013e1c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 80042e2:	4a87      	ldr	r2, [pc, #540]	; (8004500 <DisplayModuleStatus+0x278>)
 80042e4:	4987      	ldr	r1, [pc, #540]	; (8004504 <DisplayModuleStatus+0x27c>)
 80042e6:	0028      	movs	r0, r5
 80042e8:	f00f fd78 	bl	8013ddc <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042ec:	0029      	movs	r1, r5
 80042ee:	0020      	movs	r0, r4
 80042f0:	f00f fd94 	bl	8013e1c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 80042f4:	4a84      	ldr	r2, [pc, #528]	; (8004508 <DisplayModuleStatus+0x280>)
 80042f6:	4985      	ldr	r1, [pc, #532]	; (800450c <DisplayModuleStatus+0x284>)
 80042f8:	0028      	movs	r0, r5
 80042fa:	f00f fd6f 	bl	8013ddc <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 80042fe:	0029      	movs	r1, r5
 8004300:	0020      	movs	r0, r4
 8004302:	f00f fd8b 	bl	8013e1c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8004306:	4b82      	ldr	r3, [pc, #520]	; (8004510 <DisplayModuleStatus+0x288>)
 8004308:	002a      	movs	r2, r5
 800430a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800430c:	c243      	stmia	r2!, {r0, r1, r6}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	8899      	ldrh	r1, [r3, #4]
 8004314:	8091      	strh	r1, [r2, #4]
 8004316:	799b      	ldrb	r3, [r3, #6]
 8004318:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 800431a:	0029      	movs	r1, r5
 800431c:	0020      	movs	r0, r4
 800431e:	f00f fd7d 	bl	8013e1c <strcat>
 8004322:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <DisplayModuleStatus+0x28c>)
 8004326:	4699      	mov	r9, r3
 8004328:	4f70      	ldr	r7, [pc, #448]	; (80044ec <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 800432a:	4b7b      	ldr	r3, [pc, #492]	; (8004518 <DisplayModuleStatus+0x290>)
 800432c:	469a      	mov	sl, r3
 800432e:	e00e      	b.n	800434e <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8004330:	4b6e      	ldr	r3, [pc, #440]	; (80044ec <DisplayModuleStatus+0x264>)
 8004332:	4a7a      	ldr	r2, [pc, #488]	; (800451c <DisplayModuleStatus+0x294>)
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	6019      	str	r1, [r3, #0]
 8004338:	8891      	ldrh	r1, [r2, #4]
 800433a:	8099      	strh	r1, [r3, #4]
 800433c:	7992      	ldrb	r2, [r2, #6]
 800433e:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8004340:	496a      	ldr	r1, [pc, #424]	; (80044ec <DisplayModuleStatus+0x264>)
 8004342:	0020      	movs	r0, r4
 8004344:	f00f fd6a 	bl	8013e1c <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8004348:	3501      	adds	r5, #1
 800434a:	2d06      	cmp	r5, #6
 800434c:	d039      	beq.n	80043c2 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 800434e:	002a      	movs	r2, r5
 8004350:	4649      	mov	r1, r9
 8004352:	0038      	movs	r0, r7
 8004354:	f00f fd42 	bl	8013ddc <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8004358:	0039      	movs	r1, r7
 800435a:	0020      	movs	r0, r4
 800435c:	f00f fd5e 	bl	8013e1c <strcat>
		switch (portStatus[i])
 8004360:	4653      	mov	r3, sl
 8004362:	5ceb      	ldrb	r3, [r5, r3]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d8eb      	bhi.n	8004340 <DisplayModuleStatus+0xb8>
 8004368:	4653      	mov	r3, sl
 800436a:	5ceb      	ldrb	r3, [r5, r3]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4a6c      	ldr	r2, [pc, #432]	; (8004520 <DisplayModuleStatus+0x298>)
 8004370:	58d3      	ldr	r3, [r2, r3]
 8004372:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8004374:	495d      	ldr	r1, [pc, #372]	; (80044ec <DisplayModuleStatus+0x264>)
 8004376:	4b6b      	ldr	r3, [pc, #428]	; (8004524 <DisplayModuleStatus+0x29c>)
 8004378:	000a      	movs	r2, r1
 800437a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800437c:	c243      	stmia	r2!, {r0, r1, r6}
 800437e:	cb03      	ldmia	r3!, {r0, r1}
 8004380:	c203      	stmia	r2!, {r0, r1}
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	7013      	strb	r3, [r2, #0]
 8004386:	e7db      	b.n	8004340 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8004388:	4a58      	ldr	r2, [pc, #352]	; (80044ec <DisplayModuleStatus+0x264>)
 800438a:	4b67      	ldr	r3, [pc, #412]	; (8004528 <DisplayModuleStatus+0x2a0>)
 800438c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800438e:	c243      	stmia	r2!, {r0, r1, r6}
 8004390:	e7d6      	b.n	8004340 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8004392:	4956      	ldr	r1, [pc, #344]	; (80044ec <DisplayModuleStatus+0x264>)
 8004394:	4b65      	ldr	r3, [pc, #404]	; (800452c <DisplayModuleStatus+0x2a4>)
 8004396:	000a      	movs	r2, r1
 8004398:	cb43      	ldmia	r3!, {r0, r1, r6}
 800439a:	c243      	stmia	r2!, {r0, r1, r6}
 800439c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800439e:	c243      	stmia	r2!, {r0, r1, r6}
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	8013      	strh	r3, [r2, #0]
 80043a4:	e7cc      	b.n	8004340 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 80043a6:	4951      	ldr	r1, [pc, #324]	; (80044ec <DisplayModuleStatus+0x264>)
 80043a8:	4b61      	ldr	r3, [pc, #388]	; (8004530 <DisplayModuleStatus+0x2a8>)
 80043aa:	000a      	movs	r2, r1
 80043ac:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043ae:	c243      	stmia	r2!, {r0, r1, r6}
 80043b0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043b2:	c243      	stmia	r2!, {r0, r1, r6}
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	6011      	str	r1, [r2, #0]
 80043b8:	8899      	ldrh	r1, [r3, #4]
 80043ba:	8091      	strh	r1, [r2, #4]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	7193      	strb	r3, [r2, #6]
 80043c0:	e7be      	b.n	8004340 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 80043c2:	494a      	ldr	r1, [pc, #296]	; (80044ec <DisplayModuleStatus+0x264>)
 80043c4:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <DisplayModuleStatus+0x2ac>)
 80043c6:	000a      	movs	r2, r1
 80043c8:	cb61      	ldmia	r3!, {r0, r5, r6}
 80043ca:	c261      	stmia	r2!, {r0, r5, r6}
 80043cc:	cb61      	ldmia	r3!, {r0, r5, r6}
 80043ce:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 80043d0:	0020      	movs	r0, r4
 80043d2:	f00f fd23 	bl	8013e1c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 80043d6:	4e58      	ldr	r6, [pc, #352]	; (8004538 <DisplayModuleStatus+0x2b0>)
	strcat( (char *) pcOutputString, pcUserMessage);	
 80043d8:	2701      	movs	r7, #1
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 80043da:	4d44      	ldr	r5, [pc, #272]	; (80044ec <DisplayModuleStatus+0x264>)
 80043dc:	e00e      	b.n	80043fc <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80043de:	4b43      	ldr	r3, [pc, #268]	; (80044ec <DisplayModuleStatus+0x264>)
 80043e0:	469a      	mov	sl, r3
 80043e2:	003a      	movs	r2, r7
 80043e4:	4955      	ldr	r1, [pc, #340]	; (800453c <DisplayModuleStatus+0x2b4>)
 80043e6:	0018      	movs	r0, r3
 80043e8:	f00f fcf8 	bl	8013ddc <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80043ec:	4651      	mov	r1, sl
 80043ee:	0020      	movs	r0, r4
 80043f0:	f00f fd14 	bl	8013e1c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 80043f4:	3701      	adds	r7, #1
 80043f6:	3638      	adds	r6, #56	; 0x38
 80043f8:	2f07      	cmp	r7, #7
 80043fa:	d017      	beq.n	800442c <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 80043fc:	6833      	ldr	r3, [r6, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ed      	beq.n	80043de <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8004402:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004404:	f007 f864 	bl	800b4d0 <GetPort>
 8004408:	4682      	mov	sl, r0
 800440a:	00bb      	lsls	r3, r7, #2
 800440c:	4a4c      	ldr	r2, [pc, #304]	; (8004540 <DisplayModuleStatus+0x2b8>)
 800440e:	58d0      	ldr	r0, [r2, r3]
 8004410:	f007 f85e 	bl	800b4d0 <GetPort>
 8004414:	9000      	str	r0, [sp, #0]
 8004416:	4653      	mov	r3, sl
 8004418:	003a      	movs	r2, r7
 800441a:	494a      	ldr	r1, [pc, #296]	; (8004544 <DisplayModuleStatus+0x2bc>)
 800441c:	0028      	movs	r0, r5
 800441e:	f00f fcdd 	bl	8013ddc <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8004422:	0029      	movs	r1, r5
 8004424:	0020      	movs	r0, r4
 8004426:	f00f fcf9 	bl	8013e1c <strcat>
 800442a:	e7e3      	b.n	80043f4 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 800442c:	0020      	movs	r0, r4
 800442e:	f7fb fe73 	bl	8000118 <strlen>
 8004432:	1820      	adds	r0, r4, r0
 8004434:	2203      	movs	r2, #3
 8004436:	4944      	ldr	r1, [pc, #272]	; (8004548 <DisplayModuleStatus+0x2c0>)
 8004438:	f00f fad2 	bl	80139e0 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 800443c:	0020      	movs	r0, r4
 800443e:	f7fb fe6b 	bl	8000118 <strlen>
 8004442:	1820      	adds	r0, r4, r0
 8004444:	221d      	movs	r2, #29
 8004446:	4941      	ldr	r1, [pc, #260]	; (800454c <DisplayModuleStatus+0x2c4>)
 8004448:	f00f faca 	bl	80139e0 <memcpy>
	temp = strlen( (char *) pcOutputString);
 800444c:	0020      	movs	r0, r4
 800444e:	f7fb fe63 	bl	8000118 <strlen>
 8004452:	4681      	mov	r9, r0
 8004454:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004456:	4e3e      	ldr	r6, [pc, #248]	; (8004550 <DisplayModuleStatus+0x2c8>)
 8004458:	4f23      	ldr	r7, [pc, #140]	; (80044e8 <DisplayModuleStatus+0x260>)
 800445a:	e00c      	b.n	8004476 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <DisplayModuleStatus+0x264>)
 800445e:	469a      	mov	sl, r3
 8004460:	002a      	movs	r2, r5
 8004462:	493c      	ldr	r1, [pc, #240]	; (8004554 <DisplayModuleStatus+0x2cc>)
 8004464:	0018      	movs	r0, r3
 8004466:	f00f fcb9 	bl	8013ddc <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 800446a:	4651      	mov	r1, sl
 800446c:	0020      	movs	r0, r4
 800446e:	f00f fcd5 	bl	8013e1c <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004472:	2d05      	cmp	r5, #5
 8004474:	d00b      	beq.n	800448e <DisplayModuleStatus+0x206>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004476:	0029      	movs	r1, r5
 8004478:	3501      	adds	r5, #1
 800447a:	783b      	ldrb	r3, [r7, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	5b9a      	ldrh	r2, [r3, r6]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	410b      	asrs	r3, r1
 8004488:	4213      	tst	r3, r2
 800448a:	d0f2      	beq.n	8004472 <DisplayModuleStatus+0x1ea>
 800448c:	e7e6      	b.n	800445c <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 800448e:	0020      	movs	r0, r4
 8004490:	f7fb fe42 	bl	8000118 <strlen>
 8004494:	464b      	mov	r3, r9
 8004496:	041e      	lsls	r6, r3, #16
 8004498:	0c36      	lsrs	r6, r6, #16
 800449a:	42b0      	cmp	r0, r6
 800449c:	d010      	beq.n	80044c0 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 800449e:	0020      	movs	r0, r4
 80044a0:	f7fb fe3a 	bl	8000118 <strlen>
 80044a4:	1820      	adds	r0, r4, r0
 80044a6:	2203      	movs	r2, #3
 80044a8:	4927      	ldr	r1, [pc, #156]	; (8004548 <DisplayModuleStatus+0x2c0>)
 80044aa:	f00f fa99 	bl	80139e0 <memcpy>
	
	/* Display output */
	if (port)
 80044ae:	4643      	mov	r3, r8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 80044b4:	b002      	add	sp, #8
 80044b6:	bce0      	pop	{r5, r6, r7}
 80044b8:	46ba      	mov	sl, r7
 80044ba:	46b1      	mov	r9, r6
 80044bc:	46a8      	mov	r8, r5
 80044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 80044c0:	1820      	adds	r0, r4, r0
 80044c2:	2205      	movs	r2, #5
 80044c4:	4924      	ldr	r1, [pc, #144]	; (8004558 <DisplayModuleStatus+0x2d0>)
 80044c6:	f00f fa8b 	bl	80139e0 <memcpy>
 80044ca:	e7e8      	b.n	800449e <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 80044cc:	0020      	movs	r0, r4
 80044ce:	f7fb fe23 	bl	8000118 <strlen>
 80044d2:	b282      	uxth	r2, r0
 80044d4:	2301      	movs	r3, #1
 80044d6:	425b      	negs	r3, r3
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	3333      	adds	r3, #51	; 0x33
 80044dc:	0021      	movs	r1, r4
 80044de:	4640      	mov	r0, r8
 80044e0:	f009 f992 	bl	800d808 <writePxMutex>
}
 80044e4:	e7e6      	b.n	80044b4 <DisplayModuleStatus+0x22c>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20001046 	.word	0x20001046
 80044ec:	20001070 	.word	0x20001070
 80044f0:	08019dbc 	.word	0x08019dbc
 80044f4:	20000a7f 	.word	0x20000a7f
 80044f8:	08019dd8 	.word	0x08019dd8
 80044fc:	08019df4 	.word	0x08019df4
 8004500:	08019e14 	.word	0x08019e14
 8004504:	08019e20 	.word	0x08019e20
 8004508:	08019e38 	.word	0x08019e38
 800450c:	08019e44 	.word	0x08019e44
 8004510:	08019e60 	.word	0x08019e60
 8004514:	08019e74 	.word	0x08019e74
 8004518:	200010c0 	.word	0x200010c0
 800451c:	08019e7c 	.word	0x08019e7c
 8004520:	08019f78 	.word	0x08019f78
 8004524:	08019e84 	.word	0x08019e84
 8004528:	08019e9c 	.word	0x08019e9c
 800452c:	08019ea8 	.word	0x08019ea8
 8004530:	08019ec4 	.word	0x08019ec4
 8004534:	08019ee4 	.word	0x08019ee4
 8004538:	200018a0 	.word	0x200018a0
 800453c:	08019efc 	.word	0x08019efc
 8004540:	20001428 	.word	0x20001428
 8004544:	08019f18 	.word	0x08019f18
 8004548:	08019e70 	.word	0x08019e70
 800454c:	08019f48 	.word	0x08019f48
 8004550:	20006d2c 	.word	0x20006d2c
 8004554:	08019f68 	.word	0x08019f68
 8004558:	08019f70 	.word	0x08019f70

0800455c <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455e:	46c6      	mov	lr, r8
 8004560:	b500      	push	{lr}
 8004562:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8004564:	4929      	ldr	r1, [pc, #164]	; (800460c <GetID+0xb0>)
 8004566:	f7fb fdcd 	bl	8000104 <strcmp>
 800456a:	2800      	cmp	r0, #0
 800456c:	d010      	beq.n	8004590 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 800456e:	4928      	ldr	r1, [pc, #160]	; (8004610 <GetID+0xb4>)
 8004570:	0030      	movs	r0, r6
 8004572:	f7fb fdc7 	bl	8000104 <strcmp>
 8004576:	2800      	cmp	r0, #0
 8004578:	d045      	beq.n	8004606 <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 800457a:	7833      	ldrb	r3, [r6, #0]
 800457c:	4698      	mov	r8, r3
 800457e:	2b23      	cmp	r3, #35	; 0x23
 8004580:	d00b      	beq.n	800459a <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <GetID+0xb8>)
 8004584:	781f      	ldrb	r7, [r3, #0]
 8004586:	2f00      	cmp	r7, #0
 8004588:	d02a      	beq.n	80045e0 <GetID+0x84>
 800458a:	4d23      	ldr	r5, [pc, #140]	; (8004618 <GetID+0xbc>)
 800458c:	2400      	movs	r4, #0
 800458e:	e01c      	b.n	80045ca <GetID+0x6e>
		return myID;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <GetID+0xc0>)
 8004592:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8004594:	bc80      	pop	{r7}
 8004596:	46b8      	mov	r8, r7
 8004598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800459a:	1c70      	adds	r0, r6, #1
 800459c:	f00e ffbf 	bl	801351e <atol>
 80045a0:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <GetID+0x52>
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <GetID+0xb8>)
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d206      	bcs.n	80045bc <GetID+0x60>
		else if (id == myID)
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <GetID+0xc0>)
 80045b0:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 80045b2:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1ed      	bne.n	8004594 <GetID+0x38>
			return myID;
 80045b8:	b218      	sxth	r0, r3
 80045ba:	e7eb      	b.n	8004594 <GetID+0x38>
			return id;
 80045bc:	b218      	sxth	r0, r3
 80045be:	e7e9      	b.n	8004594 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80045c0:	3401      	adds	r4, #1
 80045c2:	b2e4      	uxtb	r4, r4
 80045c4:	350a      	adds	r5, #10
 80045c6:	42bc      	cmp	r4, r7
 80045c8:	d00a      	beq.n	80045e0 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80045ca:	0029      	movs	r1, r5
 80045cc:	0030      	movs	r0, r6
 80045ce:	f7fb fd99 	bl	8000104 <strcmp>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1f4      	bne.n	80045c0 <GetID+0x64>
 80045d6:	4643      	mov	r3, r8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f1      	beq.n	80045c0 <GetID+0x64>
 80045dc:	b220      	sxth	r0, r4
 80045de:	e7d9      	b.n	8004594 <GetID+0x38>
 80045e0:	4f0f      	ldr	r7, [pc, #60]	; (8004620 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80045e2:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80045e4:	0039      	movs	r1, r7
 80045e6:	0030      	movs	r0, r6
 80045e8:	f7fb fd8c 	bl	8000104 <strcmp>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d005      	beq.n	80045fc <GetID+0xa0>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 80045f0:	3501      	adds	r5, #1
 80045f2:	370a      	adds	r7, #10
 80045f4:	2d0a      	cmp	r5, #10
 80045f6:	d1f5      	bne.n	80045e4 <GetID+0x88>
		return BOS_ERR_WrongName;			
 80045f8:	2064      	movs	r0, #100	; 0x64
 80045fa:	e7cb      	b.n	8004594 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80045fc:	022c      	lsls	r4, r5, #8
 80045fe:	20fe      	movs	r0, #254	; 0xfe
 8004600:	4320      	orrs	r0, r4
 8004602:	b200      	sxth	r0, r0
 8004604:	e7c6      	b.n	8004594 <GetID+0x38>
		return BOS_BROADCAST;				
 8004606:	20ff      	movs	r0, #255	; 0xff
 8004608:	e7c4      	b.n	8004594 <GetID+0x38>
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	08019f8c 	.word	0x08019f8c
 8004610:	08019f90 	.word	0x08019f90
 8004614:	2000001c 	.word	0x2000001c
 8004618:	20000f38 	.word	0x20000f38
 800461c:	20001046 	.word	0x20001046
 8004620:	20000e2c 	.word	0x20000e2c

08004624 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	b083      	sub	sp, #12
 8004628:	9001      	str	r0, [sp, #4]
 800462a:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 800462c:	4c28      	ldr	r4, [pc, #160]	; (80046d0 <NameModule+0xac>)
 800462e:	0025      	movs	r5, r4
 8004630:	3510      	adds	r5, #16
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8004632:	0021      	movs	r1, r4
 8004634:	0030      	movs	r0, r6
 8004636:	f7fb fd65 	bl	8000104 <strcmp>
 800463a:	2800      	cmp	r0, #0
 800463c:	d03f      	beq.n	80046be <NameModule+0x9a>
	for(i=0 ; i<NumOfKeywords ; i++)
 800463e:	3404      	adds	r4, #4
 8004640:	42ac      	cmp	r4, r5
 8004642:	d1f6      	bne.n	8004632 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <NameModule+0xb0>)
 8004646:	781f      	ldrb	r7, [r3, #0]
 8004648:	2f01      	cmp	r7, #1
 800464a:	dd0b      	ble.n	8004664 <NameModule+0x40>
 800464c:	4c22      	ldr	r4, [pc, #136]	; (80046d8 <NameModule+0xb4>)
 800464e:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 8004650:	0021      	movs	r1, r4
 8004652:	0030      	movs	r0, r6
 8004654:	f7fb fd56 	bl	8000104 <strcmp>
 8004658:	2800      	cmp	r0, #0
 800465a:	d032      	beq.n	80046c2 <NameModule+0x9e>
	for(i=1 ; i<N ; i++)
 800465c:	3501      	adds	r5, #1
 800465e:	340a      	adds	r4, #10
 8004660:	42bd      	cmp	r5, r7
 8004662:	dbf5      	blt.n	8004650 <NameModule+0x2c>
 8004664:	4c1d      	ldr	r4, [pc, #116]	; (80046dc <NameModule+0xb8>)
 8004666:	0025      	movs	r5, r4
 8004668:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 800466a:	0021      	movs	r1, r4
 800466c:	0030      	movs	r0, r6
 800466e:	f7fb fd49 	bl	8000104 <strcmp>
 8004672:	2800      	cmp	r0, #0
 8004674:	d028      	beq.n	80046c8 <NameModule+0xa4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004676:	340a      	adds	r4, #10
 8004678:	42ac      	cmp	r4, r5
 800467a:	d1f6      	bne.n	800466a <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800467c:	4c18      	ldr	r4, [pc, #96]	; (80046e0 <NameModule+0xbc>)
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <NameModule+0xc0>)
 8004680:	601c      	str	r4, [r3, #0]
 8004682:	001f      	movs	r7, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004688:	0028      	movs	r0, r5
 800468a:	f7fb fd45 	bl	8000118 <strlen>
 800468e:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004690:	0029      	movs	r1, r5
 8004692:	0030      	movs	r0, r6
 8004694:	f00f fbe5 	bl	8013e62 <strncmp>
 8004698:	2800      	cmp	r0, #0
 800469a:	d017      	beq.n	80046cc <NameModule+0xa8>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800469c:	6864      	ldr	r4, [r4, #4]
 800469e:	603c      	str	r4, [r7, #0]
 80046a0:	2c00      	cmp	r4, #0
 80046a2:	d1ef      	bne.n	8004684 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	0098      	lsls	r0, r3, #2
 80046a8:	469c      	mov	ip, r3
 80046aa:	4460      	add	r0, ip
 80046ac:	0040      	lsls	r0, r0, #1
 80046ae:	4f0e      	ldr	r7, [pc, #56]	; (80046e8 <NameModule+0xc4>)
 80046b0:	19c0      	adds	r0, r0, r7
 80046b2:	0031      	movs	r1, r6
 80046b4:	f00f fbcd 	bl	8013e52 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 80046b8:	f7fe fe88 	bl	80033cc <SaveEEalias>
	
	return result;
 80046bc:	e002      	b.n	80046c4 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 80046be:	2006      	movs	r0, #6
 80046c0:	e000      	b.n	80046c4 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 80046c2:	2007      	movs	r0, #7
}
 80046c4:	b003      	add	sp, #12
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80046c8:	2007      	movs	r0, #7
 80046ca:	e7fb      	b.n	80046c4 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 80046cc:	2008      	movs	r0, #8
 80046ce:	e7f9      	b.n	80046c4 <NameModule+0xa0>
 80046d0:	0801a1c4 	.word	0x0801a1c4
 80046d4:	2000001c 	.word	0x2000001c
 80046d8:	20000f42 	.word	0x20000f42
 80046dc:	20000e2c 	.word	0x20000e2c
 80046e0:	2000009c 	.word	0x2000009c
 80046e4:	200010c8 	.word	0x200010c8
 80046e8:	20000f38 	.word	0x20000f38

080046ec <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 80046ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ee:	46ce      	mov	lr, r9
 80046f0:	b500      	push	{lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	9001      	str	r0, [sp, #4]
 80046f6:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80046f8:	4f36      	ldr	r7, [pc, #216]	; (80047d4 <AddModuleToGroup+0xe8>)
{
 80046fa:	003d      	movs	r5, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80046fc:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 80046fe:	0029      	movs	r1, r5
 8004700:	0030      	movs	r0, r6
 8004702:	f7fb fcff 	bl	8000104 <strcmp>
 8004706:	2800      	cmp	r0, #0
 8004708:	d047      	beq.n	800479a <AddModuleToGroup+0xae>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800470a:	3401      	adds	r4, #1
 800470c:	350a      	adds	r5, #10
 800470e:	2c0a      	cmp	r4, #10
 8004710:	d1f5      	bne.n	80046fe <AddModuleToGroup+0x12>
 8004712:	4c31      	ldr	r4, [pc, #196]	; (80047d8 <AddModuleToGroup+0xec>)
 8004714:	0025      	movs	r5, r4
 8004716:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8004718:	0021      	movs	r1, r4
 800471a:	0030      	movs	r0, r6
 800471c:	f7fb fcf2 	bl	8000104 <strcmp>
 8004720:	2800      	cmp	r0, #0
 8004722:	d050      	beq.n	80047c6 <AddModuleToGroup+0xda>
	for(j=0 ; j<NumOfKeywords ; j++)
 8004724:	3404      	adds	r4, #4
 8004726:	42ac      	cmp	r4, r5
 8004728:	d1f6      	bne.n	8004718 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <AddModuleToGroup+0xf0>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	4699      	mov	r9, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	dd0b      	ble.n	800474c <AddModuleToGroup+0x60>
 8004734:	4c2a      	ldr	r4, [pc, #168]	; (80047e0 <AddModuleToGroup+0xf4>)
 8004736:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 8004738:	0021      	movs	r1, r4
 800473a:	0030      	movs	r0, r6
 800473c:	f7fb fce2 	bl	8000104 <strcmp>
 8004740:	2800      	cmp	r0, #0
 8004742:	d042      	beq.n	80047ca <AddModuleToGroup+0xde>
	for(j=1 ; j<N ; j++)
 8004744:	3501      	adds	r5, #1
 8004746:	340a      	adds	r4, #10
 8004748:	454d      	cmp	r5, r9
 800474a:	dbf5      	blt.n	8004738 <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800474c:	4c25      	ldr	r4, [pc, #148]	; (80047e4 <AddModuleToGroup+0xf8>)
 800474e:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <AddModuleToGroup+0xfc>)
 8004750:	601c      	str	r4, [r3, #0]
 8004752:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004758:	0028      	movs	r0, r5
 800475a:	f7fb fcdd 	bl	8000118 <strlen>
 800475e:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004760:	0029      	movs	r1, r5
 8004762:	0030      	movs	r0, r6
 8004764:	f00f fb7d 	bl	8013e62 <strncmp>
 8004768:	2800      	cmp	r0, #0
 800476a:	d030      	beq.n	80047ce <AddModuleToGroup+0xe2>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800476c:	6864      	ldr	r4, [r4, #4]
 800476e:	464b      	mov	r3, r9
 8004770:	601c      	str	r4, [r3, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d1ee      	bne.n	8004754 <AddModuleToGroup+0x68>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8004776:	783b      	ldrb	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <AddModuleToGroup+0xc8>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800477c:	3401      	adds	r4, #1
 800477e:	370a      	adds	r7, #10
 8004780:	2c0a      	cmp	r4, #10
 8004782:	d1f8      	bne.n	8004776 <AddModuleToGroup+0x8a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 8004784:	9f01      	ldr	r7, [sp, #4]
 8004786:	3f01      	subs	r7, #1
 8004788:	4918      	ldr	r1, [pc, #96]	; (80047ec <AddModuleToGroup+0x100>)
 800478a:	007f      	lsls	r7, r7, #1
 800478c:	2201      	movs	r2, #1
 800478e:	40a2      	lsls	r2, r4
 8004790:	5a7b      	ldrh	r3, [r7, r1]
 8004792:	4313      	orrs	r3, r2
 8004794:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8004796:	2000      	movs	r0, #0
 8004798:	e008      	b.n	80047ac <AddModuleToGroup+0xc0>
			groupModules[module-1] |= (0x0001<<i);	
 800479a:	9f01      	ldr	r7, [sp, #4]
 800479c:	3f01      	subs	r7, #1
 800479e:	4913      	ldr	r1, [pc, #76]	; (80047ec <AddModuleToGroup+0x100>)
 80047a0:	007f      	lsls	r7, r7, #1
 80047a2:	2201      	movs	r2, #1
 80047a4:	40a2      	lsls	r2, r4
 80047a6:	5a7b      	ldrh	r3, [r7, r1]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	527b      	strh	r3, [r7, r1]
}
 80047ac:	b002      	add	sp, #8
 80047ae:	bc80      	pop	{r7}
 80047b0:	46b9      	mov	r9, r7
 80047b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 80047b4:	00a0      	lsls	r0, r4, #2
 80047b6:	1900      	adds	r0, r0, r4
 80047b8:	0040      	lsls	r0, r0, #1
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <AddModuleToGroup+0xe8>)
 80047bc:	1818      	adds	r0, r3, r0
 80047be:	0031      	movs	r1, r6
 80047c0:	f00f fb47 	bl	8013e52 <strcpy>
			break;
 80047c4:	e7de      	b.n	8004784 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 80047c6:	2006      	movs	r0, #6
 80047c8:	e7f0      	b.n	80047ac <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 80047ca:	2007      	movs	r0, #7
 80047cc:	e7ee      	b.n	80047ac <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 80047ce:	2008      	movs	r0, #8
 80047d0:	e7ec      	b.n	80047ac <AddModuleToGroup+0xc0>
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	20000e2c 	.word	0x20000e2c
 80047d8:	0801a1c4 	.word	0x0801a1c4
 80047dc:	2000001c 	.word	0x2000001c
 80047e0:	20000f42 	.word	0x20000f42
 80047e4:	2000009c 	.word	0x2000009c
 80047e8:	200010cc 	.word	0x200010cc
 80047ec:	20000e90 	.word	0x20000e90

080047f0 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	46de      	mov	lr, fp
 80047f4:	464f      	mov	r7, r9
 80047f6:	4646      	mov	r6, r8
 80047f8:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <ReadPortsDir+0x94>)
 80047fc:	781f      	ldrb	r7, [r3, #0]
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d03a      	beq.n	8004878 <ReadPortsDir+0x88>
 8004802:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8004804:	2700      	movs	r7, #0
	{
		if (i != myID) {
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <ReadPortsDir+0x98>)
 8004808:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <ReadPortsDir+0x9c>)
 800480c:	4699      	mov	r9, r3
			if (responseStatus != BOS_OK)	{
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <ReadPortsDir+0xa0>)
 8004810:	469b      	mov	fp, r3
 8004812:	e01f      	b.n	8004854 <ReadPortsDir+0x64>
 8004814:	2500      	movs	r5, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004816:	2680      	movs	r6, #128	; 0x80
 8004818:	0236      	lsls	r6, r6, #8
 800481a:	e002      	b.n	8004822 <ReadPortsDir+0x32>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800481c:	3501      	adds	r5, #1
 800481e:	2d05      	cmp	r5, #5
 8004820:	d012      	beq.n	8004848 <ReadPortsDir+0x58>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004822:	1c68      	adds	r0, r5, #1
 8004824:	b2c0      	uxtb	r0, r0
 8004826:	f008 ffd1 	bl	800d7cc <GetUart>
 800482a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800482c:	42b3      	cmp	r3, r6
 800482e:	d1f5      	bne.n	800481c <ReadPortsDir+0x2c>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <ReadPortsDir+0x98>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	464a      	mov	r2, r9
 800483a:	5a9a      	ldrh	r2, [r3, r2]
 800483c:	0031      	movs	r1, r6
 800483e:	4129      	asrs	r1, r5
 8004840:	430a      	orrs	r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	525a      	strh	r2, [r3, r1]
 8004846:	e7e9      	b.n	800481c <ReadPortsDir+0x2c>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004848:	3401      	adds	r4, #1
 800484a:	b2e4      	uxtb	r4, r4
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <ReadPortsDir+0x94>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	42a3      	cmp	r3, r4
 8004852:	d311      	bcc.n	8004878 <ReadPortsDir+0x88>
		if (i != myID) {
 8004854:	4643      	mov	r3, r8
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	42a3      	cmp	r3, r4
 800485a:	d0db      	beq.n	8004814 <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800485c:	2200      	movs	r2, #0
 800485e:	2113      	movs	r1, #19
 8004860:	0020      	movs	r0, r4
 8004862:	f004 fe05 	bl	8009470 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004866:	2032      	movs	r0, #50	; 0x32
 8004868:	f008 fe10 	bl	800d48c <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 800486c:	465b      	mov	r3, fp
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0e9      	beq.n	8004848 <ReadPortsDir+0x58>
				result = BOS_ERR_NoResponse;
 8004874:	2702      	movs	r7, #2
 8004876:	e7e7      	b.n	8004848 <ReadPortsDir+0x58>
			}
		}
	}
	
	return result;
}
 8004878:	0038      	movs	r0, r7
 800487a:	bce0      	pop	{r5, r6, r7}
 800487c:	46bb      	mov	fp, r7
 800487e:	46b1      	mov	r9, r6
 8004880:	46a8      	mov	r8, r5
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	2000001c 	.word	0x2000001c
 8004888:	20001046 	.word	0x20001046
 800488c:	20006d2c 	.word	0x20006d2c
 8004890:	200010d8 	.word	0x200010d8

08004894 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004898:	4f0f      	ldr	r7, [pc, #60]	; (80048d8 <UpdateMyPortsDir+0x44>)
 800489a:	4e10      	ldr	r6, [pc, #64]	; (80048dc <UpdateMyPortsDir+0x48>)
 800489c:	2580      	movs	r5, #128	; 0x80
 800489e:	022d      	lsls	r5, r5, #8
 80048a0:	e007      	b.n	80048b2 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 80048a2:	f008 ff93 	bl	800d7cc <GetUart>
 80048a6:	2101      	movs	r1, #1
 80048a8:	f009 f828 	bl	800d8fc <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80048ac:	3401      	adds	r4, #1
 80048ae:	2c05      	cmp	r4, #5
 80048b0:	d00f      	beq.n	80048d2 <UpdateMyPortsDir+0x3e>
 80048b2:	1c60      	adds	r0, r4, #1
 80048b4:	b2c0      	uxtb	r0, r0
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80048b6:	7833      	ldrb	r3, [r6, #0]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	5bdb      	ldrh	r3, [r3, r7]
 80048be:	002a      	movs	r2, r5
 80048c0:	4122      	asrs	r2, r4
 80048c2:	421a      	tst	r2, r3
 80048c4:	d1ed      	bne.n	80048a2 <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p), NORMAL);
 80048c6:	f008 ff81 	bl	800d7cc <GetUart>
 80048ca:	2100      	movs	r1, #0
 80048cc:	f009 f816 	bl	800d8fc <SwapUartPins>
 80048d0:	e7ec      	b.n	80048ac <UpdateMyPortsDir+0x18>
		}	
	}		
	
	return result;
}
 80048d2:	2000      	movs	r0, #0
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	20006d2c 	.word	0x20006d2c
 80048dc:	20001046 	.word	0x20001046

080048e0 <BOS_Init>:
{
 80048e0:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80048e2:	f008 fc8b 	bl	800d1fc <RTC_Init>
	GetTimeDate();
 80048e6:	f008 fd29 	bl	800d33c <GetTimeDate>
	EE_Init();
 80048ea:	f003 f9d1 	bl	8007c90 <EE_Init>
  GPIO_Init();
 80048ee:	f008 f9f1 	bl	800ccd4 <GPIO_Init>
	DMA_Init();
 80048f2:	f007 f97d 	bl	800bbf0 <DMA_Init>
	TIM_USEC_Init();
 80048f6:	f008 fd55 	bl	800d3a4 <TIM_USEC_Init>
	CRC_Init();
 80048fa:	f008 f997 	bl	800cc2c <CRC_Init>
	TIM_MSEC_Init();
 80048fe:	f008 fd83 	bl	800d408 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8004902:	f008 fa8b 	bl	800ce1c <IsFactoryReset>
 8004906:	2800      	cmp	r0, #0
 8004908:	d11a      	bne.n	8004940 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 800490a:	f7ff f88f 	bl	8003a2c <IsLowerCLIbaud>
 800490e:	2800      	cmp	r0, #0
 8004910:	d021      	beq.n	8004956 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 8004912:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <BOS_Init+0x12c>)
 8004914:	2201      	movs	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004918:	2032      	movs	r0, #50	; 0x32
 800491a:	f008 fdb7 	bl	800d48c <StartMilliDelay>
		Module_Init();	
 800491e:	f006 fd93 	bl	800b448 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <BOS_Init+0x130>)
 8004924:	22e1      	movs	r2, #225	; 0xe1
 8004926:	0252      	lsls	r2, r2, #9
 8004928:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800492a:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 800492c:	001d      	movs	r5, r3
 800492e:	68a9      	ldr	r1, [r5, #8]
 8004930:	0020      	movs	r0, r4
 8004932:	f008 ffd9 	bl	800d8e8 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004936:	3401      	adds	r4, #1
 8004938:	b2e4      	uxtb	r4, r4
 800493a:	2c06      	cmp	r4, #6
 800493c:	d1f7      	bne.n	800492e <BOS_Init+0x4e>
 800493e:	e00f      	b.n	8004960 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8004940:	f7ff f8c4 	bl	8003acc <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004944:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <BOS_Init+0x134>)
 800494a:	4a33      	ldr	r2, [pc, #204]	; (8004a18 <BOS_Init+0x138>)
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	e7fd      	b.n	8004952 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004956:	2032      	movs	r0, #50	; 0x32
 8004958:	f008 fd98 	bl	800d48c <StartMilliDelay>
		Module_Init();				
 800495c:	f006 fd74 	bl	800b448 <Module_Init>
	LoadEEvars();
 8004960:	f7ff f852 	bl	8003a08 <LoadEEvars>
	UpdateMyPortsDir();
 8004964:	f7ff ff96 	bl	8004894 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004968:	f007 fda8 	bl	800c4bc <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 800496c:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <BOS_Init+0x13c>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d117      	bne.n	80049a4 <BOS_Init+0xc4>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004974:	2580      	movs	r5, #128	; 0x80
 8004976:	012d      	lsls	r5, r5, #4
 8004978:	2490      	movs	r4, #144	; 0x90
 800497a:	05e4      	lsls	r4, r4, #23
 800497c:	2201      	movs	r2, #1
 800497e:	0029      	movs	r1, r5
 8004980:	0020      	movs	r0, r4
 8004982:	f00c fd07 	bl	8011394 <HAL_GPIO_WritePin>
 8004986:	20fa      	movs	r0, #250	; 0xfa
 8004988:	0040      	lsls	r0, r0, #1
 800498a:	f008 fd7f 	bl	800d48c <StartMilliDelay>
 800498e:	2200      	movs	r2, #0
 8004990:	0029      	movs	r1, r5
 8004992:	0020      	movs	r0, r4
 8004994:	f00c fcfe 	bl	8011394 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004998:	f002 ffb4 	bl	8007904 <ResetUartORE>
	BOS_initialized = 1;
 800499c:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <BOS_Init+0x140>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
}
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 80049a4:	2580      	movs	r5, #128	; 0x80
 80049a6:	012d      	lsls	r5, r5, #4
 80049a8:	2490      	movs	r4, #144	; 0x90
 80049aa:	05e4      	lsls	r4, r4, #23
 80049ac:	2201      	movs	r2, #1
 80049ae:	0029      	movs	r1, r5
 80049b0:	0020      	movs	r0, r4
 80049b2:	f00c fcef 	bl	8011394 <HAL_GPIO_WritePin>
 80049b6:	20fa      	movs	r0, #250	; 0xfa
 80049b8:	0040      	lsls	r0, r0, #1
 80049ba:	f008 fd67 	bl	800d48c <StartMilliDelay>
 80049be:	2200      	movs	r2, #0
 80049c0:	0029      	movs	r1, r5
 80049c2:	0020      	movs	r0, r4
 80049c4:	f00c fce6 	bl	8011394 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80049c8:	2064      	movs	r0, #100	; 0x64
 80049ca:	f008 fd5f 	bl	800d48c <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80049ce:	2201      	movs	r2, #1
 80049d0:	0029      	movs	r1, r5
 80049d2:	0020      	movs	r0, r4
 80049d4:	f00c fcde 	bl	8011394 <HAL_GPIO_WritePin>
 80049d8:	2064      	movs	r0, #100	; 0x64
 80049da:	f008 fd57 	bl	800d48c <StartMilliDelay>
 80049de:	2200      	movs	r2, #0
 80049e0:	0029      	movs	r1, r5
 80049e2:	0020      	movs	r0, r4
 80049e4:	f00c fcd6 	bl	8011394 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80049e8:	2064      	movs	r0, #100	; 0x64
 80049ea:	f008 fd4f 	bl	800d48c <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80049ee:	2201      	movs	r2, #1
 80049f0:	0029      	movs	r1, r5
 80049f2:	0020      	movs	r0, r4
 80049f4:	f00c fcce 	bl	8011394 <HAL_GPIO_WritePin>
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	f008 fd47 	bl	800d48c <StartMilliDelay>
 80049fe:	2200      	movs	r2, #0
 8004a00:	0029      	movs	r1, r5
 8004a02:	0020      	movs	r0, r4
 8004a04:	f00c fcc6 	bl	8011394 <HAL_GPIO_WritePin>
 8004a08:	e7c6      	b.n	8004998 <BOS_Init+0xb8>
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20000a7e 	.word	0x20000a7e
 8004a10:	200068d0 	.word	0x200068d0
 8004a14:	e000ed00 	.word	0xe000ed00
 8004a18:	05fa0004 	.word	0x05fa0004
 8004a1c:	20001046 	.word	0x20001046
 8004a20:	20000a7d 	.word	0x20000a7d

08004a24 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004a24:	b510      	push	{r4, lr}
 8004a26:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004a28:	201e      	movs	r0, #30
 8004a2a:	f00e fda3 	bl	8013574 <malloc>
 8004a2e:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8004a30:	221e      	movs	r2, #30
 8004a32:	2100      	movs	r1, #0
 8004a34:	f00e ffdd 	bl	80139f2 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8004a38:	4908      	ldr	r1, [pc, #32]	; (8004a5c <GetDateString+0x38>)
 8004a3a:	7d8b      	ldrb	r3, [r1, #22]
 8004a3c:	7d0a      	ldrb	r2, [r1, #20]
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0092      	lsls	r2, r2, #2
 8004a42:	4807      	ldr	r0, [pc, #28]	; (8004a60 <GetDateString+0x3c>)
 8004a44:	5812      	ldr	r2, [r2, r0]
 8004a46:	8b08      	ldrh	r0, [r1, #24]
 8004a48:	9001      	str	r0, [sp, #4]
 8004a4a:	7d49      	ldrb	r1, [r1, #21]
 8004a4c:	9100      	str	r1, [sp, #0]
 8004a4e:	4905      	ldr	r1, [pc, #20]	; (8004a64 <GetDateString+0x40>)
 8004a50:	0020      	movs	r0, r4
 8004a52:	f00f f9c3 	bl	8013ddc <sprintf>
  return buffer;
}
 8004a56:	0020      	movs	r0, r4
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd10      	pop	{r4, pc}
 8004a5c:	200068d0 	.word	0x200068d0
 8004a60:	0801a274 	.word	0x0801a274
 8004a64:	0801a1d4 	.word	0x0801a1d4

08004a68 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004a68:	b500      	push	{lr}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <Bridge+0x24>)
 8004a70:	7819      	ldrb	r1, [r3, #0]
 8004a72:	2301      	movs	r3, #1
 8004a74:	9303      	str	r3, [sp, #12]
 8004a76:	3b02      	subs	r3, #2
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	3303      	adds	r3, #3
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	000b      	movs	r3, r1
 8004a82:	f004 fd1b 	bl	80094bc <StartScastDMAStream>
}
 8004a86:	b005      	add	sp, #20
 8004a88:	bd00      	pop	{pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	20001046 	.word	0x20001046

08004a90 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004a90:	b530      	push	{r4, r5, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	0005      	movs	r5, r0
 8004a96:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	9303      	str	r3, [sp, #12]
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7fe fe13 	bl	80036d4 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004aae:	1e6a      	subs	r2, r5, #1
 8004ab0:	00d3      	lsls	r3, r2, #3
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <Unbridge+0x78>)
 8004ab8:	589b      	ldr	r3, [r3, r2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <Unbridge+0x58>
 8004abe:	1e62      	subs	r2, r4, #1
 8004ac0:	00d3      	lsls	r3, r2, #3
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <Unbridge+0x78>)
 8004ac8:	589b      	ldr	r3, [r3, r2]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d104      	bne.n	8004ad8 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004ace:	0028      	movs	r0, r5
 8004ad0:	f002 fe88 	bl	80077e4 <SwitchStreamDMAToMsg>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e013      	b.n	8004b00 <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004ad8:	0028      	movs	r0, r5
 8004ada:	f002 fe83 	bl	80077e4 <SwitchStreamDMAToMsg>
 8004ade:	0020      	movs	r0, r4
 8004ae0:	f002 fe80 	bl	80077e4 <SwitchStreamDMAToMsg>
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e00b      	b.n	8004b00 <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 8004ae8:	1e62      	subs	r2, r4, #1
 8004aea:	00d3      	lsls	r3, r2, #3
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <Unbridge+0x78>)
 8004af2:	589b      	ldr	r3, [r3, r2]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004af8:	0020      	movs	r0, r4
 8004afa:	f002 fe73 	bl	80077e4 <SwitchStreamDMAToMsg>
 8004afe:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8004b00:	b007      	add	sp, #28
 8004b02:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 8004b04:	2068      	movs	r0, #104	; 0x68
 8004b06:	e7fb      	b.n	8004b00 <Unbridge+0x70>
 8004b08:	200018a0 	.word	0x200018a0

08004b0c <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004b0c:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 8004b0e:	7803      	ldrb	r3, [r0, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004b14:	4d08      	ldr	r5, [pc, #32]	; (8004b38 <StringToLowerCase+0x2c>)
 8004b16:	2403      	movs	r4, #3
 8004b18:	e004      	b.n	8004b24 <StringToLowerCase+0x18>
 8004b1a:	7001      	strb	r1, [r0, #0]
	for(int i = 0; string[i]; i++){
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	7803      	ldrb	r3, [r0, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004b24:	5cea      	ldrb	r2, [r5, r3]
 8004b26:	4022      	ands	r2, r4
 8004b28:	0019      	movs	r1, r3
 8004b2a:	2a01      	cmp	r2, #1
 8004b2c:	d1f5      	bne.n	8004b1a <StringToLowerCase+0xe>
 8004b2e:	3320      	adds	r3, #32
 8004b30:	0019      	movs	r1, r3
 8004b32:	e7f2      	b.n	8004b1a <StringToLowerCase+0xe>
	}
}
 8004b34:	bd30      	pop	{r4, r5, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	0801cb5d 	.word	0x0801cb5d

08004b3c <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3e:	46ce      	mov	lr, r9
 8004b40:	4647      	mov	r7, r8
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b089      	sub	sp, #36	; 0x24
 8004b46:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004b48:	4bde      	ldr	r3, [pc, #888]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004b4a:	781c      	ldrb	r4, [r3, #0]
 8004b4c:	2c05      	cmp	r4, #5
 8004b4e:	d100      	bne.n	8004b52 <ParseSnippetCondition+0x16>
 8004b50:	e21a      	b.n	8004f88 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004b52:	49dd      	ldr	r1, [pc, #884]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004b54:	00a3      	lsls	r3, r4, #2
 8004b56:	191a      	adds	r2, r3, r4
 8004b58:	0092      	lsls	r2, r2, #2
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004b5e:	191a      	adds	r2, r3, r4
 8004b60:	0092      	lsls	r2, r2, #2
 8004b62:	188a      	adds	r2, r1, r2
 8004b64:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004b66:	1918      	adds	r0, r3, r4
 8004b68:	0080      	lsls	r0, r0, #2
 8004b6a:	3002      	adds	r0, #2
 8004b6c:	1840      	adds	r0, r0, r1
 8004b6e:	2204      	movs	r2, #4
 8004b70:	2100      	movs	r1, #0
 8004b72:	f00e ff3e 	bl	80139f2 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004b76:	782b      	ldrb	r3, [r5, #0]
 8004b78:	2b62      	cmp	r3, #98	; 0x62
 8004b7a:	d102      	bne.n	8004b82 <ParseSnippetCondition+0x46>
 8004b7c:	78ab      	ldrb	r3, [r5, #2]
 8004b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b80:	d032      	beq.n	8004be8 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004b82:	4cd2      	ldr	r4, [pc, #840]	; (8004ecc <ParseSnippetCondition+0x390>)
 8004b84:	0029      	movs	r1, r5
 8004b86:	0020      	movs	r0, r4
 8004b88:	f00f f963 	bl	8013e52 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004b8c:	4dd0      	ldr	r5, [pc, #832]	; (8004ed0 <ParseSnippetCondition+0x394>)
 8004b8e:	0029      	movs	r1, r5
 8004b90:	0020      	movs	r0, r4
 8004b92:	f00f ffd5 	bl	8014b40 <strtok>
 8004b96:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004b98:	0029      	movs	r1, r5
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f00f ffd0 	bl	8014b40 <strtok>
 8004ba0:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004ba2:	0029      	movs	r1, r5
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f00f ffcb 	bl	8014b40 <strtok>
 8004baa:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004bac:	2c00      	cmp	r4, #0
 8004bae:	d100      	bne.n	8004bb2 <ParseSnippetCondition+0x76>
 8004bb0:	e1ec      	b.n	8004f8c <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004bb2:	0020      	movs	r0, r4
 8004bb4:	f7fe ffb4 	bl	8003b20 <IsModuleParameter>
 8004bb8:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004bba:	d100      	bne.n	8004bbe <ParseSnippetCondition+0x82>
 8004bbc:	e194      	b.n	8004ee8 <ParseSnippetCondition+0x3ac>
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d000      	beq.n	8004bc4 <ParseSnippetCondition+0x88>
 8004bc2:	e193      	b.n	8004eec <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004bc4:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	d000      	beq.n	8004bcc <ParseSnippetCondition+0x90>
 8004bca:	e1ba      	b.n	8004f42 <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004bcc:	4dbd      	ldr	r5, [pc, #756]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004bce:	782b      	ldrb	r3, [r5, #0]
 8004bd0:	49bd      	ldr	r1, [pc, #756]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	18d0      	adds	r0, r2, r3
 8004bd6:	0080      	lsls	r0, r0, #2
 8004bd8:	3e65      	subs	r6, #101	; 0x65
 8004bda:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004bdc:	180a      	adds	r2, r1, r0
 8004bde:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004be0:	3301      	adds	r3, #1
 8004be2:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 8004be4:	2600      	movs	r6, #0
 8004be6:	e1ac      	b.n	8004f42 <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004be8:	786f      	ldrb	r7, [r5, #1]
 8004bea:	3f30      	subs	r7, #48	; 0x30
 8004bec:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 8004bee:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004bf0:	2f05      	cmp	r7, #5
 8004bf2:	d900      	bls.n	8004bf6 <ParseSnippetCondition+0xba>
 8004bf4:	e1a5      	b.n	8004f42 <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bf6:	4ab4      	ldr	r2, [pc, #720]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004bf8:	00a3      	lsls	r3, r4, #2
 8004bfa:	1919      	adds	r1, r3, r4
 8004bfc:	0089      	lsls	r1, r1, #2
 8004bfe:	2001      	movs	r0, #1
 8004c00:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004c02:	1853      	adds	r3, r2, r1
 8004c04:	2200      	movs	r2, #0
 8004c06:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004c08:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004c0a:	1cee      	adds	r6, r5, #3
 8004c0c:	3207      	adds	r2, #7
 8004c0e:	49b1      	ldr	r1, [pc, #708]	; (8004ed4 <ParseSnippetCondition+0x398>)
 8004c10:	0030      	movs	r0, r6
 8004c12:	f00f f926 	bl	8013e62 <strncmp>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d124      	bne.n	8004c64 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004c1a:	00a3      	lsls	r3, r4, #2
 8004c1c:	191c      	adds	r4, r3, r4
 8004c1e:	00a4      	lsls	r4, r4, #2
 8004c20:	4ba9      	ldr	r3, [pc, #676]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004c22:	191c      	adds	r4, r3, r4
 8004c24:	2305      	movs	r3, #5
 8004c26:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c28:	00fa      	lsls	r2, r7, #3
 8004c2a:	19d2      	adds	r2, r2, r7
 8004c2c:	4baa      	ldr	r3, [pc, #680]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	7a1b      	ldrb	r3, [r3, #8]
 8004c32:	2201      	movs	r2, #1
 8004c34:	0016      	movs	r6, r2
 8004c36:	401e      	ands	r6, r3
 8004c38:	421a      	tst	r2, r3
 8004c3a:	d005      	beq.n	8004c48 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 8004c3c:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c3e:	4aa1      	ldr	r2, [pc, #644]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004c40:	7813      	ldrb	r3, [r2, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	7013      	strb	r3, [r2, #0]
 8004c46:	e17c      	b.n	8004f42 <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c48:	2301      	movs	r3, #1
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	9303      	str	r3, [sp, #12]
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	0038      	movs	r0, r7
 8004c5e:	f003 ff05 	bl	8008a6c <SetButtonEvents>
 8004c62:	e7ec      	b.n	8004c3e <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004c64:	220e      	movs	r2, #14
 8004c66:	499d      	ldr	r1, [pc, #628]	; (8004edc <ParseSnippetCondition+0x3a0>)
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f00f f8fa 	bl	8013e62 <strncmp>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d120      	bne.n	8004cb4 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004c72:	00a3      	lsls	r3, r4, #2
 8004c74:	191c      	adds	r4, r3, r4
 8004c76:	00a4      	lsls	r4, r4, #2
 8004c78:	4b93      	ldr	r3, [pc, #588]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004c7a:	191c      	adds	r4, r3, r4
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c80:	00fa      	lsls	r2, r7, #3
 8004c82:	19d2      	adds	r2, r2, r7
 8004c84:	4b94      	ldr	r3, [pc, #592]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	7a1b      	ldrb	r3, [r3, #8]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	0016      	movs	r6, r2
 8004c8e:	401e      	ands	r6, r3
 8004c90:	421a      	tst	r2, r3
 8004c92:	d001      	beq.n	8004c98 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 8004c94:	2600      	movs	r6, #0
 8004c96:	e7d2      	b.n	8004c3e <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	9302      	str	r3, [sp, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	2100      	movs	r1, #0
 8004cac:	0038      	movs	r0, r7
 8004cae:	f003 fedd 	bl	8008a6c <SetButtonEvents>
 8004cb2:	e7c4      	b.n	8004c3e <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004cb4:	220c      	movs	r2, #12
 8004cb6:	498a      	ldr	r1, [pc, #552]	; (8004ee0 <ParseSnippetCondition+0x3a4>)
 8004cb8:	0030      	movs	r0, r6
 8004cba:	f00f f8d2 	bl	8013e62 <strncmp>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d17b      	bne.n	8004dba <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 8004cc2:	00fa      	lsls	r2, r7, #3
 8004cc4:	19d2      	adds	r2, r2, r7
 8004cc6:	4b84      	ldr	r3, [pc, #528]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	789e      	ldrb	r6, [r3, #2]
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d00f      	beq.n	8004cf0 <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 8004cd0:	00fa      	lsls	r2, r7, #3
 8004cd2:	19d2      	adds	r2, r2, r7
 8004cd4:	4b80      	ldr	r3, [pc, #512]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	78de      	ldrb	r6, [r3, #3]
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d029      	beq.n	8004d32 <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 8004cde:	00fa      	lsls	r2, r7, #3
 8004ce0:	19d2      	adds	r2, r2, r7
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	791e      	ldrb	r6, [r3, #4]
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	d044      	beq.n	8004d76 <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cec:	260c      	movs	r6, #12
 8004cee:	e7a6      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004cf0:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	00a3      	lsls	r3, r4, #2
 8004cf6:	191b      	adds	r3, r3, r4
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4443      	add	r3, r8
 8004cfc:	2209      	movs	r2, #9
 8004cfe:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d00:	0028      	movs	r0, r5
 8004d02:	300f      	adds	r0, #15
 8004d04:	f00e fc05 	bl	8013512 <atoi>
 8004d08:	b2c3      	uxtb	r3, r0
 8004d0a:	4a6e      	ldr	r2, [pc, #440]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004d0c:	7811      	ldrb	r1, [r2, #0]
 8004d0e:	008a      	lsls	r2, r1, #2
 8004d10:	1852      	adds	r2, r2, r1
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	4442      	add	r2, r8
 8004d16:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	9205      	str	r2, [sp, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	9204      	str	r2, [sp, #16]
 8004d20:	9203      	str	r2, [sp, #12]
 8004d22:	9202      	str	r2, [sp, #8]
 8004d24:	9201      	str	r2, [sp, #4]
 8004d26:	9200      	str	r2, [sp, #0]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	0038      	movs	r0, r7
 8004d2c:	f003 fe9e 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;
 8004d30:	e785      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004d34:	4698      	mov	r8, r3
 8004d36:	00a3      	lsls	r3, r4, #2
 8004d38:	191b      	adds	r3, r3, r4
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4443      	add	r3, r8
 8004d3e:	220a      	movs	r2, #10
 8004d40:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d42:	0028      	movs	r0, r5
 8004d44:	300f      	adds	r0, #15
 8004d46:	f00e fbe4 	bl	8013512 <atoi>
 8004d4a:	b2c0      	uxtb	r0, r0
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	0093      	lsls	r3, r2, #2
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4443      	add	r3, r8
 8004d58:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	9305      	str	r3, [sp, #20]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	9303      	str	r3, [sp, #12]
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	9000      	str	r0, [sp, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	0038      	movs	r0, r7
 8004d70:	f003 fe7c 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;		
 8004d74:	e763      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004d78:	4698      	mov	r8, r3
 8004d7a:	00a3      	lsls	r3, r4, #2
 8004d7c:	191b      	adds	r3, r3, r4
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4443      	add	r3, r8
 8004d82:	220b      	movs	r2, #11
 8004d84:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d86:	0028      	movs	r0, r5
 8004d88:	300f      	adds	r0, #15
 8004d8a:	f00e fbc2 	bl	8013512 <atoi>
 8004d8e:	b2c0      	uxtb	r0, r0
 8004d90:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	0093      	lsls	r3, r2, #2
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4443      	add	r3, r8
 8004d9c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d9e:	2301      	movs	r3, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	9001      	str	r0, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2100      	movs	r1, #0
 8004db2:	0038      	movs	r0, r7
 8004db4:	f003 fe5a 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;	
 8004db8:	e741      	b.n	8004c3e <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004dba:	220d      	movs	r2, #13
 8004dbc:	4949      	ldr	r1, [pc, #292]	; (8004ee4 <ParseSnippetCondition+0x3a8>)
 8004dbe:	0030      	movs	r0, r6
 8004dc0:	f00f f84f 	bl	8013e62 <strncmp>
	BOS_Status status = BOS_OK;
 8004dc4:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d000      	beq.n	8004dcc <ParseSnippetCondition+0x290>
 8004dca:	e738      	b.n	8004c3e <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 8004dcc:	00fa      	lsls	r2, r7, #3
 8004dce:	19d2      	adds	r2, r2, r7
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	795e      	ldrb	r6, [r3, #5]
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d00f      	beq.n	8004dfa <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 8004dda:	00fa      	lsls	r2, r7, #3
 8004ddc:	19d2      	adds	r2, r2, r7
 8004dde:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004de0:	189b      	adds	r3, r3, r2
 8004de2:	799e      	ldrb	r6, [r3, #6]
 8004de4:	2e00      	cmp	r6, #0
 8004de6:	d02a      	beq.n	8004e3e <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 8004de8:	00fa      	lsls	r2, r7, #3
 8004dea:	19d2      	adds	r2, r2, r7
 8004dec:	4b3a      	ldr	r3, [pc, #232]	; (8004ed8 <ParseSnippetCondition+0x39c>)
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	79de      	ldrb	r6, [r3, #7]
 8004df2:	2e00      	cmp	r6, #0
 8004df4:	d044      	beq.n	8004e80 <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004df6:	260d      	movs	r6, #13
 8004df8:	e721      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004dfc:	4698      	mov	r8, r3
 8004dfe:	00a3      	lsls	r3, r4, #2
 8004e00:	191b      	adds	r3, r3, r4
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4443      	add	r3, r8
 8004e06:	220c      	movs	r2, #12
 8004e08:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	3010      	adds	r0, #16
 8004e0e:	f00e fb80 	bl	8013512 <atoi>
 8004e12:	b2c0      	uxtb	r0, r0
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	0093      	lsls	r3, r2, #2
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4443      	add	r3, r8
 8004e20:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004e22:	2301      	movs	r3, #1
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	9002      	str	r0, [sp, #8]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	0038      	movs	r0, r7
 8004e38:	f003 fe18 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;
 8004e3c:	e6ff      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004e40:	4698      	mov	r8, r3
 8004e42:	2314      	movs	r3, #20
 8004e44:	4699      	mov	r9, r3
 8004e46:	435c      	muls	r4, r3
 8004e48:	4444      	add	r4, r8
 8004e4a:	3b07      	subs	r3, #7
 8004e4c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e4e:	0028      	movs	r0, r5
 8004e50:	3010      	adds	r0, #16
 8004e52:	f00e fb5e 	bl	8013512 <atoi>
 8004e56:	b2c0      	uxtb	r0, r0
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	4353      	muls	r3, r2
 8004e60:	4443      	add	r3, r8
 8004e62:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004e64:	2301      	movs	r3, #1
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	9104      	str	r1, [sp, #16]
 8004e6c:	9003      	str	r0, [sp, #12]
 8004e6e:	9102      	str	r1, [sp, #8]
 8004e70:	9101      	str	r1, [sp, #4]
 8004e72:	9100      	str	r1, [sp, #0]
 8004e74:	000b      	movs	r3, r1
 8004e76:	000a      	movs	r2, r1
 8004e78:	0038      	movs	r0, r7
 8004e7a:	f003 fdf7 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;		
 8004e7e:	e6de      	b.n	8004c3e <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <ParseSnippetCondition+0x38c>)
 8004e82:	4698      	mov	r8, r3
 8004e84:	2314      	movs	r3, #20
 8004e86:	4699      	mov	r9, r3
 8004e88:	435c      	muls	r4, r3
 8004e8a:	4444      	add	r4, r8
 8004e8c:	3b06      	subs	r3, #6
 8004e8e:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e90:	0028      	movs	r0, r5
 8004e92:	3010      	adds	r0, #16
 8004e94:	f00e fb3d 	bl	8013512 <atoi>
 8004e98:	b2c0      	uxtb	r0, r0
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <ParseSnippetCondition+0x388>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	464a      	mov	r2, r9
 8004ea0:	4353      	muls	r3, r2
 8004ea2:	4443      	add	r3, r8
 8004ea4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	9004      	str	r0, [sp, #16]
 8004eac:	2100      	movs	r1, #0
 8004eae:	9103      	str	r1, [sp, #12]
 8004eb0:	9102      	str	r1, [sp, #8]
 8004eb2:	9101      	str	r1, [sp, #4]
 8004eb4:	9100      	str	r1, [sp, #0]
 8004eb6:	000b      	movs	r3, r1
 8004eb8:	000a      	movs	r2, r1
 8004eba:	0038      	movs	r0, r7
 8004ebc:	f003 fdd6 	bl	8008a6c <SetButtonEvents>
					status = BOS_OK;	
 8004ec0:	e6bd      	b.n	8004c3e <ParseSnippetCondition+0x102>
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	200011e7 	.word	0x200011e7
 8004ec8:	200068ec 	.word	0x200068ec
 8004ecc:	2000114c 	.word	0x2000114c
 8004ed0:	08019e78 	.word	0x08019e78
 8004ed4:	0801aa24 	.word	0x0801aa24
 8004ed8:	20001480 	.word	0x20001480
 8004edc:	0801a290 	.word	0x0801a290
 8004ee0:	0801a2a0 	.word	0x0801a2a0
 8004ee4:	0801a2b0 	.word	0x0801a2b0
			else if (secondPart != NULL && thirdPart != NULL) 
 8004ee8:	2e00      	cmp	r6, #0
 8004eea:	d051      	beq.n	8004f90 <ParseSnippetCondition+0x454>
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d051      	beq.n	8004f94 <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	f7fe fe15 	bl	8003b20 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d029      	beq.n	8004f4e <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004efa:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <ParseSnippetCondition+0x460>)
 8004efc:	781d      	ldrb	r5, [r3, #0]
 8004efe:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <ParseSnippetCondition+0x464>)
 8004f00:	00ab      	lsls	r3, r5, #2
 8004f02:	1959      	adds	r1, r3, r5
 8004f04:	0089      	lsls	r1, r1, #2
 8004f06:	2704      	movs	r7, #4
 8004f08:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f0a:	1959      	adds	r1, r3, r5
 8004f0c:	0089      	lsls	r1, r1, #2
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004f12:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004f14:	4c21      	ldr	r4, [pc, #132]	; (8004f9c <ParseSnippetCondition+0x460>)
 8004f16:	7825      	ldrb	r5, [r4, #0]
 8004f18:	0030      	movs	r0, r6
 8004f1a:	f7fe fe0d 	bl	8003b38 <IsMathOperator>
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <ParseSnippetCondition+0x464>)
 8004f20:	00ab      	lsls	r3, r5, #2
 8004f22:	195b      	adds	r3, r3, r5
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	18d3      	adds	r3, r2, r3
 8004f28:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004f2a:	7821      	ldrb	r1, [r4, #0]
 8004f2c:	008b      	lsls	r3, r1, #2
 8004f2e:	185b      	adds	r3, r3, r1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	18d3      	adds	r3, r2, r3
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02e      	beq.n	8004f98 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004f3a:	3101      	adds	r1, #1
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <ParseSnippetCondition+0x460>)
 8004f3e:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 8004f40:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004f42:	0030      	movs	r0, r6
 8004f44:	b009      	add	sp, #36	; 0x24
 8004f46:	bcc0      	pop	{r6, r7}
 8004f48:	46b9      	mov	r9, r7
 8004f4a:	46b0      	mov	r8, r6
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <ParseSnippetCondition+0x460>)
 8004f50:	4698      	mov	r8, r3
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	4f12      	ldr	r7, [pc, #72]	; (8004fa0 <ParseSnippetCondition+0x464>)
 8004f56:	0093      	lsls	r3, r2, #2
 8004f58:	1899      	adds	r1, r3, r2
 8004f5a:	0089      	lsls	r1, r1, #2
 8004f5c:	2003      	movs	r0, #3
 8004f5e:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 8004f64:	0028      	movs	r0, r5
 8004f66:	f00e facf 	bl	8013508 <atof>
 8004f6a:	f7fe f807 	bl	8002f7c <__aeabi_d2f>
 8004f6e:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004f70:	4643      	mov	r3, r8
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	0098      	lsls	r0, r3, #2
 8004f76:	18c0      	adds	r0, r0, r3
 8004f78:	0080      	lsls	r0, r0, #2
 8004f7a:	3006      	adds	r0, #6
 8004f7c:	19c0      	adds	r0, r0, r7
 8004f7e:	2204      	movs	r2, #4
 8004f80:	a907      	add	r1, sp, #28
 8004f82:	f00e fd2d 	bl	80139e0 <memcpy>
 8004f86:	e7c5      	b.n	8004f14 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004f88:	260e      	movs	r6, #14
 8004f8a:	e7da      	b.n	8004f42 <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004f8c:	2667      	movs	r6, #103	; 0x67
 8004f8e:	e7d8      	b.n	8004f42 <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004f90:	2667      	movs	r6, #103	; 0x67
 8004f92:	e7d6      	b.n	8004f42 <ParseSnippetCondition+0x406>
 8004f94:	2667      	movs	r6, #103	; 0x67
 8004f96:	e7d4      	b.n	8004f42 <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004f98:	2667      	movs	r6, #103	; 0x67
 8004f9a:	e7d2      	b.n	8004f42 <ParseSnippetCondition+0x406>
 8004f9c:	200011e7 	.word	0x200011e7
 8004fa0:	200068ec 	.word	0x200068ec

08004fa4 <AddSnippet>:
{
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	000c      	movs	r4, r1
	switch (code)
 8004fa8:	2802      	cmp	r0, #2
 8004faa:	d017      	beq.n	8004fdc <AddSnippet+0x38>
 8004fac:	2803      	cmp	r0, #3
 8004fae:	d003      	beq.n	8004fb8 <AddSnippet+0x14>
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d00f      	beq.n	8004fd4 <AddSnippet+0x30>
 8004fb4:	2000      	movs	r0, #0
}
 8004fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8004fb8:	4b35      	ldr	r3, [pc, #212]	; (8005090 <AddSnippet+0xec>)
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0093      	lsls	r3, r2, #2
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4a33      	ldr	r2, [pc, #204]	; (8005094 <AddSnippet+0xf0>)
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	2201      	movs	r2, #1
 8004fca:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fcc:	f006 f908 	bl	800b1e0 <SaveToRO>
	return BOS_OK;
 8004fd0:	2000      	movs	r0, #0
			break;
 8004fd2:	e7f0      	b.n	8004fb6 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004fd4:	0008      	movs	r0, r1
 8004fd6:	f7ff fdb1 	bl	8004b3c <ParseSnippetCondition>
 8004fda:	e7ec      	b.n	8004fb6 <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <AddSnippet+0xec>)
 8004fde:	781d      	ldrb	r5, [r3, #0]
 8004fe0:	3d01      	subs	r5, #1
 8004fe2:	00ab      	lsls	r3, r5, #2
 8004fe4:	195b      	adds	r3, r3, r5
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <AddSnippet+0xf0>)
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	68de      	ldr	r6, [r3, #12]
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d032      	beq.n	8005058 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004ff2:	0030      	movs	r0, r6
 8004ff4:	f7fb f890 	bl	8000118 <strlen>
 8004ff8:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f7fb f88c 	bl	8000118 <strlen>
 8005000:	1839      	adds	r1, r7, r0
 8005002:	3102      	adds	r1, #2
 8005004:	0030      	movs	r0, r6
 8005006:	f00e fd27 	bl	8013a58 <realloc>
 800500a:	4e22      	ldr	r6, [pc, #136]	; (8005094 <AddSnippet+0xf0>)
 800500c:	00ab      	lsls	r3, r5, #2
 800500e:	195d      	adds	r5, r3, r5
 8005010:	00ad      	lsls	r5, r5, #2
 8005012:	1975      	adds	r5, r6, r5
 8005014:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8005016:	4d1e      	ldr	r5, [pc, #120]	; (8005090 <AddSnippet+0xec>)
 8005018:	782a      	ldrb	r2, [r5, #0]
 800501a:	3a01      	subs	r2, #1
 800501c:	0093      	lsls	r3, r2, #2
 800501e:	189b      	adds	r3, r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	18f3      	adds	r3, r6, r3
 8005024:	1c7a      	adds	r2, r7, #1
 8005026:	68d8      	ldr	r0, [r3, #12]
 8005028:	1880      	adds	r0, r0, r2
 800502a:	0021      	movs	r1, r4
 800502c:	f00e ff11 	bl	8013e52 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8005030:	782a      	ldrb	r2, [r5, #0]
 8005032:	3a01      	subs	r2, #1
 8005034:	0093      	lsls	r3, r2, #2
 8005036:	189b      	adds	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	18f3      	adds	r3, r6, r3
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2213      	movs	r2, #19
 8005040:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8005042:	782a      	ldrb	r2, [r5, #0]
 8005044:	3a01      	subs	r2, #1
 8005046:	0093      	lsls	r3, r2, #2
 8005048:	189b      	adds	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	18f6      	adds	r6, r6, r3
 800504e:	68f3      	ldr	r3, [r6, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <AddSnippet+0xd6>
	return BOS_OK;
 8005054:	2000      	movs	r0, #0
 8005056:	e7ae      	b.n	8004fb6 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8005058:	0008      	movs	r0, r1
 800505a:	f7fb f85d 	bl	8000118 <strlen>
 800505e:	3001      	adds	r0, #1
 8005060:	f00e fa88 	bl	8013574 <malloc>
 8005064:	00ab      	lsls	r3, r5, #2
 8005066:	195d      	adds	r5, r3, r5
 8005068:	00ad      	lsls	r5, r5, #2
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <AddSnippet+0xf0>)
 800506c:	195d      	adds	r5, r3, r5
 800506e:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8005070:	0021      	movs	r1, r4
 8005072:	f00e feee 	bl	8013e52 <strcpy>
	return BOS_OK;
 8005076:	2000      	movs	r0, #0
 8005078:	e79d      	b.n	8004fb6 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 800507a:	0090      	lsls	r0, r2, #2
 800507c:	1880      	adds	r0, r0, r2
 800507e:	0080      	lsls	r0, r0, #2
 8005080:	4a04      	ldr	r2, [pc, #16]	; (8005094 <AddSnippet+0xf0>)
 8005082:	1880      	adds	r0, r0, r2
 8005084:	2214      	movs	r2, #20
 8005086:	2100      	movs	r1, #0
 8005088:	f00e fcb3 	bl	80139f2 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800508c:	200e      	movs	r0, #14
 800508e:	e792      	b.n	8004fb6 <AddSnippet+0x12>
 8005090:	200011e7 	.word	0x200011e7
 8005094:	200068ec 	.word	0x200068ec

08005098 <CLI_CommandParser>:
{
 8005098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800509a:	46de      	mov	lr, fp
 800509c:	4657      	mov	r7, sl
 800509e:	464e      	mov	r6, r9
 80050a0:	4645      	mov	r5, r8
 80050a2:	b5e0      	push	{r5, r6, r7, lr}
 80050a4:	b08b      	sub	sp, #44	; 0x2c
 80050a6:	9004      	str	r0, [sp, #16]
 80050a8:	9103      	str	r1, [sp, #12]
 80050aa:	0015      	movs	r5, r2
 80050ac:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 80050ae:	2300      	movs	r3, #0
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	2205      	movs	r2, #5
 80050b4:	2100      	movs	r1, #0
 80050b6:	a808      	add	r0, sp, #32
 80050b8:	f00e fc9b 	bl	80139f2 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 80050bc:	4bd8      	ldr	r3, [pc, #864]	; (8005420 <CLI_CommandParser+0x388>)
 80050be:	4699      	mov	r9, r3
 80050c0:	e129      	b.n	8005316 <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 80050c2:	1ce9      	adds	r1, r5, #3
 80050c4:	3001      	adds	r0, #1
 80050c6:	f7ff ff6d 	bl	8004fa4 <AddSnippet>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d105      	bne.n	80050da <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 80050ce:	4bd4      	ldr	r3, [pc, #848]	; (8005420 <CLI_CommandParser+0x388>)
 80050d0:	2202      	movs	r2, #2
 80050d2:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 80050d4:	230d      	movs	r3, #13
 80050d6:	7023      	strb	r3, [r4, #0]
 80050d8:	e027      	b.n	800512a <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050da:	2252      	movs	r2, #82	; 0x52
 80050dc:	49d1      	ldr	r1, [pc, #836]	; (8005424 <CLI_CommandParser+0x38c>)
 80050de:	0020      	movs	r0, r4
 80050e0:	f00e fc7e 	bl	80139e0 <memcpy>
				recordSnippet = 0;
 80050e4:	4bce      	ldr	r3, [pc, #824]	; (8005420 <CLI_CommandParser+0x388>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e01e      	b.n	800512a <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 80050ec:	2206      	movs	r2, #6
 80050ee:	49ce      	ldr	r1, [pc, #824]	; (8005428 <CLI_CommandParser+0x390>)
 80050f0:	0028      	movs	r0, r5
 80050f2:	f00e feb6 	bl	8013e62 <strncmp>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d00b      	beq.n	8005112 <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 80050fa:	2e02      	cmp	r6, #2
 80050fc:	d000      	beq.n	8005100 <CLI_CommandParser+0x68>
 80050fe:	e11a      	b.n	8005336 <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8005100:	0029      	movs	r1, r5
 8005102:	2002      	movs	r0, #2
 8005104:	f7ff ff4e 	bl	8004fa4 <AddSnippet>
 8005108:	2800      	cmp	r0, #0
 800510a:	d124      	bne.n	8005156 <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 800510c:	230d      	movs	r3, #13
 800510e:	7023      	strb	r3, [r4, #0]
 8005110:	e00b      	b.n	800512a <CLI_CommandParser+0x92>
			recordSnippet = 0;
 8005112:	4bc3      	ldr	r3, [pc, #780]	; (8005420 <CLI_CommandParser+0x388>)
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8005118:	49c4      	ldr	r1, [pc, #784]	; (800542c <CLI_CommandParser+0x394>)
 800511a:	3003      	adds	r0, #3
 800511c:	f7ff ff42 	bl	8004fa4 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8005120:	2241      	movs	r2, #65	; 0x41
 8005122:	49c3      	ldr	r1, [pc, #780]	; (8005430 <CLI_CommandParser+0x398>)
 8005124:	0020      	movs	r0, r4
 8005126:	f00e fc5b 	bl	80139e0 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800512a:	7823      	ldrb	r3, [r4, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d100      	bne.n	8005132 <CLI_CommandParser+0x9a>
 8005130:	e1a8      	b.n	8005484 <CLI_CommandParser+0x3ec>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d100      	bne.n	800513a <CLI_CommandParser+0xa2>
 8005138:	e1bf      	b.n	80054ba <CLI_CommandParser+0x422>
 800513a:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800513c:	0020      	movs	r0, r4
 800513e:	f7fa ffeb 	bl	8000118 <strlen>
 8005142:	b282      	uxth	r2, r0
 8005144:	2301      	movs	r3, #1
 8005146:	425b      	negs	r3, r3
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	3333      	adds	r3, #51	; 0x33
 800514c:	0021      	movs	r1, r4
 800514e:	9804      	ldr	r0, [sp, #16]
 8005150:	f008 fb5a 	bl	800d808 <writePxMutex>
 8005154:	e0d4      	b.n	8005300 <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005156:	2252      	movs	r2, #82	; 0x52
 8005158:	49b2      	ldr	r1, [pc, #712]	; (8005424 <CLI_CommandParser+0x38c>)
 800515a:	0020      	movs	r0, r4
 800515c:	f00e fc40 	bl	80139e0 <memcpy>
 8005160:	e7e3      	b.n	800512a <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005162:	2299      	movs	r2, #153	; 0x99
 8005164:	1c70      	adds	r0, r6, #1
 8005166:	0092      	lsls	r2, r2, #2
 8005168:	0021      	movs	r1, r4
 800516a:	f008 fd15 	bl	800db98 <FreeRTOS_CLIProcessCommand>
 800516e:	0007      	movs	r7, r0
 8005170:	e0c2      	b.n	80052f8 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8005172:	2227      	movs	r2, #39	; 0x27
 8005174:	49af      	ldr	r1, [pc, #700]	; (8005434 <CLI_CommandParser+0x39c>)
 8005176:	0020      	movs	r0, r4
 8005178:	f00e fc32 	bl	80139e0 <memcpy>
					xReturned = pdFALSE;
 800517c:	e7d5      	b.n	800512a <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800517e:	2225      	movs	r2, #37	; 0x25
 8005180:	49ad      	ldr	r1, [pc, #692]	; (8005438 <CLI_CommandParser+0x3a0>)
 8005182:	0020      	movs	r0, r4
 8005184:	f00e fc2c 	bl	80139e0 <memcpy>
					xReturned = pdFALSE;						
 8005188:	e7cf      	b.n	800512a <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800518a:	221a      	movs	r2, #26
 800518c:	2100      	movs	r1, #0
 800518e:	48ab      	ldr	r0, [pc, #684]	; (800543c <CLI_CommandParser+0x3a4>)
 8005190:	f00e fc2f 	bl	80139f2 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005194:	3601      	adds	r6, #1
 8005196:	0028      	movs	r0, r5
 8005198:	f7fa ffbe 	bl	8000118 <strlen>
 800519c:	0007      	movs	r7, r0
 800519e:	a807      	add	r0, sp, #28
 80051a0:	f7fa ffba 	bl	8000118 <strlen>
 80051a4:	3f01      	subs	r7, #1
 80051a6:	1a3a      	subs	r2, r7, r0
 80051a8:	0031      	movs	r1, r6
 80051aa:	48a5      	ldr	r0, [pc, #660]	; (8005440 <CLI_CommandParser+0x3a8>)
 80051ac:	f00e fe6a 	bl	8013e84 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80051b0:	0028      	movs	r0, r5
 80051b2:	f7fa ffb1 	bl	8000118 <strlen>
 80051b6:	0007      	movs	r7, r0
 80051b8:	a807      	add	r0, sp, #28
 80051ba:	f7fa ffad 	bl	8000118 <strlen>
 80051be:	1a3b      	subs	r3, r7, r0
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2217      	movs	r2, #23
 80051c4:	21ff      	movs	r1, #255	; 0xff
 80051c6:	4640      	mov	r0, r8
 80051c8:	f004 f92a 	bl	8009420 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80051cc:	2299      	movs	r2, #153	; 0x99
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	0021      	movs	r1, r4
 80051d2:	0030      	movs	r0, r6
 80051d4:	f008 fce0 	bl	800db98 <FreeRTOS_CLIProcessCommand>
 80051d8:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 80051da:	0020      	movs	r0, r4
 80051dc:	f7fa ff9c 	bl	8000118 <strlen>
 80051e0:	1820      	adds	r0, r4, r0
 80051e2:	221d      	movs	r2, #29
 80051e4:	4997      	ldr	r1, [pc, #604]	; (8005444 <CLI_CommandParser+0x3ac>)
 80051e6:	f00e fbfb 	bl	80139e0 <memcpy>
 80051ea:	e085      	b.n	80052f8 <CLI_CommandParser+0x260>
					group = id >> 8;
 80051ec:	9b05      	ldr	r3, [sp, #20]
 80051ee:	1218      	asrs	r0, r3, #8
 80051f0:	b2c3      	uxtb	r3, r0
 80051f2:	469a      	mov	sl, r3
 80051f4:	4b94      	ldr	r3, [pc, #592]	; (8005448 <CLI_CommandParser+0x3b0>)
 80051f6:	469b      	mov	fp, r3
 80051f8:	4652      	mov	r2, sl
 80051fa:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80051fc:	221a      	movs	r2, #26
 80051fe:	2100      	movs	r1, #0
 8005200:	488e      	ldr	r0, [pc, #568]	; (800543c <CLI_CommandParser+0x3a4>)
 8005202:	f00e fbf6 	bl	80139f2 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005206:	1c73      	adds	r3, r6, #1
 8005208:	9305      	str	r3, [sp, #20]
 800520a:	0028      	movs	r0, r5
 800520c:	f7fa ff84 	bl	8000118 <strlen>
 8005210:	0006      	movs	r6, r0
 8005212:	a807      	add	r0, sp, #28
 8005214:	f7fa ff80 	bl	8000118 <strlen>
 8005218:	3e01      	subs	r6, #1
 800521a:	1a32      	subs	r2, r6, r0
 800521c:	9905      	ldr	r1, [sp, #20]
 800521e:	4888      	ldr	r0, [pc, #544]	; (8005440 <CLI_CommandParser+0x3a8>)
 8005220:	f00e fe30 	bl	8013e84 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8005224:	0028      	movs	r0, r5
 8005226:	f7fa ff77 	bl	8000118 <strlen>
 800522a:	0006      	movs	r6, r0
 800522c:	a807      	add	r0, sp, #28
 800522e:	f7fa ff73 	bl	8000118 <strlen>
 8005232:	1a33      	subs	r3, r6, r0
 8005234:	b29b      	uxth	r3, r3
 8005236:	2217      	movs	r2, #23
 8005238:	4651      	mov	r1, sl
 800523a:	4640      	mov	r0, r8
 800523c:	f004 f8f0 	bl	8009420 <BroadcastMessage>
					if (InGroup(myID, group))
 8005240:	4b82      	ldr	r3, [pc, #520]	; (800544c <CLI_CommandParser+0x3b4>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4a81      	ldr	r2, [pc, #516]	; (8005450 <CLI_CommandParser+0x3b8>)
 800524a:	5a9b      	ldrh	r3, [r3, r2]
 800524c:	465a      	mov	r2, fp
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	4113      	asrs	r3, r2
 8005252:	07db      	lsls	r3, r3, #31
 8005254:	d406      	bmi.n	8005264 <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8005256:	ab07      	add	r3, sp, #28
 8005258:	0022      	movs	r2, r4
 800525a:	497e      	ldr	r1, [pc, #504]	; (8005454 <CLI_CommandParser+0x3bc>)
 800525c:	0020      	movs	r0, r4
 800525e:	f00e fdbd 	bl	8013ddc <sprintf>
 8005262:	e049      	b.n	80052f8 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8005264:	2299      	movs	r2, #153	; 0x99
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	0021      	movs	r1, r4
 800526a:	9805      	ldr	r0, [sp, #20]
 800526c:	f008 fc94 	bl	800db98 <FreeRTOS_CLIProcessCommand>
 8005270:	0007      	movs	r7, r0
 8005272:	e7f0      	b.n	8005256 <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8005274:	0028      	movs	r0, r5
 8005276:	f7fa ff4f 	bl	8000118 <strlen>
 800527a:	0007      	movs	r7, r0
 800527c:	a807      	add	r0, sp, #28
 800527e:	f7fa ff4b 	bl	8000118 <strlen>
 8005282:	3f01      	subs	r7, #1
 8005284:	1a3a      	subs	r2, r7, r0
 8005286:	0031      	movs	r1, r6
 8005288:	486d      	ldr	r0, [pc, #436]	; (8005440 <CLI_CommandParser+0x3a8>)
 800528a:	f00e fdfb 	bl	8013e84 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800528e:	0028      	movs	r0, r5
 8005290:	f7fa ff42 	bl	8000118 <strlen>
 8005294:	0006      	movs	r6, r0
 8005296:	a807      	add	r0, sp, #28
 8005298:	f7fa ff3e 	bl	8000118 <strlen>
 800529c:	3e01      	subs	r6, #1
 800529e:	1a36      	subs	r6, r6, r0
 80052a0:	b2b2      	uxth	r2, r6
 80052a2:	2117      	movs	r1, #23
 80052a4:	4650      	mov	r0, sl
 80052a6:	f004 f8e3 	bl	8009470 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 80052aa:	9a05      	ldr	r2, [sp, #20]
 80052ac:	496a      	ldr	r1, [pc, #424]	; (8005458 <CLI_CommandParser+0x3c0>)
 80052ae:	0020      	movs	r0, r4
 80052b0:	f00e fd94 	bl	8013ddc <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 80052b4:	7823      	ldrb	r3, [r4, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <CLI_CommandParser+0x228>
 80052ba:	9b03      	ldr	r3, [sp, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80052c0:	0020      	movs	r0, r4
 80052c2:	f7fa ff29 	bl	8000118 <strlen>
 80052c6:	0002      	movs	r2, r0
 80052c8:	2100      	movs	r1, #0
 80052ca:	0020      	movs	r0, r4
 80052cc:	f00e fb91 	bl	80139f2 <memset>
 80052d0:	e07c      	b.n	80053cc <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 80052d2:	0020      	movs	r0, r4
 80052d4:	f7fa ff20 	bl	8000118 <strlen>
 80052d8:	b282      	uxth	r2, r0
 80052da:	2301      	movs	r3, #1
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	3331      	adds	r3, #49	; 0x31
 80052e0:	0021      	movs	r1, r4
 80052e2:	9804      	ldr	r0, [sp, #16]
 80052e4:	f008 fa90 	bl	800d808 <writePxMutex>
 80052e8:	e7ea      	b.n	80052c0 <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 80052ea:	2299      	movs	r2, #153	; 0x99
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	0021      	movs	r1, r4
 80052f0:	0028      	movs	r0, r5
 80052f2:	f008 fc51 	bl	800db98 <FreeRTOS_CLIProcessCommand>
 80052f6:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80052f8:	7823      	ldrb	r3, [r4, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d000      	beq.n	8005300 <CLI_CommandParser+0x268>
 80052fe:	e07f      	b.n	8005400 <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005300:	0020      	movs	r0, r4
 8005302:	f7fa ff09 	bl	8000118 <strlen>
 8005306:	0002      	movs	r2, r0
 8005308:	2100      	movs	r1, #0
 800530a:	0020      	movs	r0, r4
 800530c:	f00e fb71 	bl	80139f2 <memset>
	} while( xReturned != pdFALSE );
 8005310:	2f00      	cmp	r7, #0
 8005312:	d100      	bne.n	8005316 <CLI_CommandParser+0x27e>
 8005314:	e0be      	b.n	8005494 <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 8005316:	0028      	movs	r0, r5
 8005318:	f7ff fbf8 	bl	8004b0c <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800531c:	464b      	mov	r3, r9
 800531e:	781e      	ldrb	r6, [r3, #0]
 8005320:	2e00      	cmp	r6, #0
 8005322:	d000      	beq.n	8005326 <CLI_CommandParser+0x28e>
 8005324:	e6e2      	b.n	80050ec <CLI_CommandParser+0x54>
 8005326:	2203      	movs	r2, #3
 8005328:	494c      	ldr	r1, [pc, #304]	; (800545c <CLI_CommandParser+0x3c4>)
 800532a:	0028      	movs	r0, r5
 800532c:	f00e fd99 	bl	8013e62 <strncmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	d100      	bne.n	8005336 <CLI_CommandParser+0x29e>
 8005334:	e6c5      	b.n	80050c2 <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 8005336:	212e      	movs	r1, #46	; 0x2e
 8005338:	0028      	movs	r0, r5
 800533a:	f00e fd7c 	bl	8013e36 <strchr>
 800533e:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8005340:	d0d3      	beq.n	80052ea <CLI_CommandParser+0x252>
 8005342:	3803      	subs	r0, #3
 8005344:	2203      	movs	r2, #3
 8005346:	4946      	ldr	r1, [pc, #280]	; (8005460 <CLI_CommandParser+0x3c8>)
 8005348:	f00e fd8b 	bl	8013e62 <strncmp>
 800534c:	2800      	cmp	r0, #0
 800534e:	d0cc      	beq.n	80052ea <CLI_CommandParser+0x252>
 8005350:	7873      	ldrb	r3, [r6, #1]
 8005352:	4a44      	ldr	r2, [pc, #272]	; (8005464 <CLI_CommandParser+0x3cc>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	075b      	lsls	r3, r3, #29
 8005358:	d4c7      	bmi.n	80052ea <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 800535a:	1b72      	subs	r2, r6, r5
 800535c:	0029      	movs	r1, r5
 800535e:	a807      	add	r0, sp, #28
 8005360:	f00e fd90 	bl	8013e84 <strncpy>
				id = GetID(idString);
 8005364:	a807      	add	r0, sp, #28
 8005366:	f7ff f8f9 	bl	800455c <GetID>
 800536a:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 800536c:	4a37      	ldr	r2, [pc, #220]	; (800544c <CLI_CommandParser+0x3b4>)
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	4690      	mov	r8, r2
 8005372:	4290      	cmp	r0, r2
 8005374:	d100      	bne.n	8005378 <CLI_CommandParser+0x2e0>
 8005376:	e6f4      	b.n	8005162 <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 8005378:	2864      	cmp	r0, #100	; 0x64
 800537a:	d100      	bne.n	800537e <CLI_CommandParser+0x2e6>
 800537c:	e6f9      	b.n	8005172 <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 800537e:	2866      	cmp	r0, #102	; 0x66
 8005380:	d100      	bne.n	8005384 <CLI_CommandParser+0x2ec>
 8005382:	e6fc      	b.n	800517e <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 8005384:	28ff      	cmp	r0, #255	; 0xff
 8005386:	d100      	bne.n	800538a <CLI_CommandParser+0x2f2>
 8005388:	e6ff      	b.n	800518a <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 800538a:	466b      	mov	r3, sp
 800538c:	7d1b      	ldrb	r3, [r3, #20]
 800538e:	469a      	mov	sl, r3
 8005390:	2bfe      	cmp	r3, #254	; 0xfe
 8005392:	d100      	bne.n	8005396 <CLI_CommandParser+0x2fe>
 8005394:	e72a      	b.n	80051ec <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8005396:	3601      	adds	r6, #1
 8005398:	2206      	movs	r2, #6
 800539a:	4933      	ldr	r1, [pc, #204]	; (8005468 <CLI_CommandParser+0x3d0>)
 800539c:	0030      	movs	r0, r6
 800539e:	f00e fd60 	bl	8013e62 <strncmp>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d000      	beq.n	80053a8 <CLI_CommandParser+0x310>
 80053a6:	e765      	b.n	8005274 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 80053a8:	4b30      	ldr	r3, [pc, #192]	; (800546c <CLI_CommandParser+0x3d4>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 80053ae:	2119      	movs	r1, #25
 80053b0:	4650      	mov	r0, sl
 80053b2:	f004 f85d 	bl	8009470 <SendMessageToModule>
						osDelay(100);
 80053b6:	2064      	movs	r0, #100	; 0x64
 80053b8:	f008 fb55 	bl	800da66 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <CLI_CommandParser+0x3d8>)
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <CLI_CommandParser+0x3b4>)
 80053c2:	7818      	ldrb	r0, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	4651      	mov	r1, sl
 80053c8:	f7fe fd8a 	bl	8003ee0 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <CLI_CommandParser+0x3d4>)
 80053ce:	799b      	ldrb	r3, [r3, #6]
 80053d0:	2b60      	cmp	r3, #96	; 0x60
 80053d2:	d000      	beq.n	80053d6 <CLI_CommandParser+0x33e>
 80053d4:	e6a9      	b.n	800512a <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 80053d6:	21fa      	movs	r1, #250	; 0xfa
 80053d8:	0089      	lsls	r1, r1, #2
 80053da:	2001      	movs	r0, #1
 80053dc:	f009 ff60 	bl	800f2a0 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <CLI_CommandParser+0x3dc>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d100      	bne.n	80053ea <CLI_CommandParser+0x352>
 80053e8:	e69f      	b.n	800512a <CLI_CommandParser+0x92>
									++timedoutMsg;
 80053ea:	4a23      	ldr	r2, [pc, #140]	; (8005478 <CLI_CommandParser+0x3e0>)
 80053ec:	8813      	ldrh	r3, [r2, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	0022      	movs	r2, r4
 80053f6:	4921      	ldr	r1, [pc, #132]	; (800547c <CLI_CommandParser+0x3e4>)
 80053f8:	0020      	movs	r0, r4
 80053fa:	f00e fcef 	bl	8013ddc <sprintf>
 80053fe:	e694      	b.n	800512a <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d100      	bne.n	8005408 <CLI_CommandParser+0x370>
 8005406:	e77b      	b.n	8005300 <CLI_CommandParser+0x268>
 8005408:	e698      	b.n	800513c <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800540a:	2301      	movs	r3, #1
 800540c:	425b      	negs	r3, r3
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	3333      	adds	r3, #51	; 0x33
 8005412:	2238      	movs	r2, #56	; 0x38
 8005414:	491a      	ldr	r1, [pc, #104]	; (8005480 <CLI_CommandParser+0x3e8>)
 8005416:	9804      	ldr	r0, [sp, #16]
 8005418:	f008 f9f6 	bl	800d808 <writePxMutex>
}
 800541c:	e046      	b.n	80054ac <CLI_CommandParser+0x414>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20001214 	.word	0x20001214
 8005424:	0801a2c4 	.word	0x0801a2c4
 8005428:	0801a318 	.word	0x0801a318
 800542c:	08019d50 	.word	0x08019d50
 8005430:	0801a320 	.word	0x0801a320
 8005434:	0801a368 	.word	0x0801a368
 8005438:	0801a390 	.word	0x0801a390
 800543c:	20000cf4 	.word	0x20000cf4
 8005440:	20000f08 	.word	0x20000f08
 8005444:	0801a3b8 	.word	0x0801a3b8
 8005448:	200011e6 	.word	0x200011e6
 800544c:	20001046 	.word	0x20001046
 8005450:	20000e90 	.word	0x20000e90
 8005454:	0801a3d8 	.word	0x0801a3d8
 8005458:	0801a40c 	.word	0x0801a40c
 800545c:	0801a2c0 	.word	0x0801a2c0
 8005460:	0801a364 	.word	0x0801a364
 8005464:	0801cb5d 	.word	0x0801cb5d
 8005468:	0801a404 	.word	0x0801a404
 800546c:	200068d0 	.word	0x200068d0
 8005470:	20000a7f 	.word	0x20000a7f
 8005474:	200010d8 	.word	0x200010d8
 8005478:	2000169e 	.word	0x2000169e
 800547c:	0801a430 	.word	0x0801a430
 8005480:	0801a450 	.word	0x0801a450
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005484:	0020      	movs	r0, r4
 8005486:	f7fa fe47 	bl	8000118 <strlen>
 800548a:	0002      	movs	r2, r0
 800548c:	2100      	movs	r1, #0
 800548e:	0020      	movs	r0, r4
 8005490:	f00e faaf 	bl	80139f2 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8005494:	2209      	movs	r2, #9
 8005496:	2100      	movs	r1, #0
 8005498:	a807      	add	r0, sp, #28
 800549a:	f00e faaa 	bl	80139f2 <memset>
	if(!recordSnippet && enableOutput)
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <CLI_CommandParser+0x434>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <CLI_CommandParser+0x414>
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ae      	bne.n	800540a <CLI_CommandParser+0x372>
}
 80054ac:	b00b      	add	sp, #44	; 0x2c
 80054ae:	bcf0      	pop	{r4, r5, r6, r7}
 80054b0:	46bb      	mov	fp, r7
 80054b2:	46b2      	mov	sl, r6
 80054b4:	46a9      	mov	r9, r5
 80054b6:	46a0      	mov	r8, r4
 80054b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80054ba:	0020      	movs	r0, r4
 80054bc:	f7fa fe2c 	bl	8000118 <strlen>
 80054c0:	0002      	movs	r2, r0
 80054c2:	2100      	movs	r1, #0
 80054c4:	0020      	movs	r0, r4
 80054c6:	f00e fa94 	bl	80139f2 <memset>
	} while( xReturned != pdFALSE );
 80054ca:	e7e3      	b.n	8005494 <CLI_CommandParser+0x3fc>
 80054cc:	20001214 	.word	0x20001214

080054d0 <prvCLITask>:
{
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	46d6      	mov	lr, sl
 80054d4:	464f      	mov	r7, r9
 80054d6:	4646      	mov	r6, r8
 80054d8:	b5c0      	push	{r6, r7, lr}
 80054da:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80054dc:	2101      	movs	r1, #1
 80054de:	4249      	negs	r1, r1
 80054e0:	2001      	movs	r0, #1
 80054e2:	f009 fedd 	bl	800f2a0 <ulTaskNotifyTake>
	cRxedChar = '\0';
 80054e6:	230f      	movs	r3, #15
 80054e8:	446b      	add	r3, sp
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80054ee:	f008 fbdd 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 80054f2:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 80054f4:	23e1      	movs	r3, #225	; 0xe1
 80054f6:	031b      	lsls	r3, r3, #12
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <prvCLITask+0x18c>)
 80054fa:	6892      	ldr	r2, [r2, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d00f      	beq.n	8005520 <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005500:	2401      	movs	r4, #1
			if (port != PcPort)
 8005502:	4e57      	ldr	r6, [pc, #348]	; (8005660 <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005504:	001d      	movs	r5, r3
 8005506:	e003      	b.n	8005510 <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005508:	3401      	adds	r4, #1
 800550a:	b2e4      	uxtb	r4, r4
 800550c:	2c06      	cmp	r4, #6
 800550e:	d007      	beq.n	8005520 <prvCLITask+0x50>
			if (port != PcPort)
 8005510:	7833      	ldrb	r3, [r6, #0]
 8005512:	42a3      	cmp	r3, r4
 8005514:	d0f8      	beq.n	8005508 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005516:	0029      	movs	r1, r5
 8005518:	0020      	movs	r0, r4
 800551a:	f008 f9e5 	bl	800d8e8 <UpdateBaudrate>
 800551e:	e7f3      	b.n	8005508 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8005520:	4b50      	ldr	r3, [pc, #320]	; (8005664 <prvCLITask+0x194>)
 8005522:	881a      	ldrh	r2, [r3, #0]
 8005524:	0053      	lsls	r3, r2, #1
 8005526:	189b      	adds	r3, r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4a4f      	ldr	r2, [pc, #316]	; (8005668 <prvCLITask+0x198>)
 800552c:	189b      	adds	r3, r3, r2
 800552e:	4a4f      	ldr	r2, [pc, #316]	; (800566c <prvCLITask+0x19c>)
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	4c4f      	ldr	r4, [pc, #316]	; (8005670 <prvCLITask+0x1a0>)
 8005534:	4d4a      	ldr	r5, [pc, #296]	; (8005660 <prvCLITask+0x190>)
 8005536:	7829      	ldrb	r1, [r5, #0]
 8005538:	9100      	str	r1, [sp, #0]
 800553a:	494e      	ldr	r1, [pc, #312]	; (8005674 <prvCLITask+0x1a4>)
 800553c:	0020      	movs	r0, r4
 800553e:	f00e fc4d 	bl	8013ddc <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8005542:	7828      	ldrb	r0, [r5, #0]
 8005544:	230a      	movs	r3, #10
 8005546:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <prvCLITask+0x1a8>)
 8005548:	494c      	ldr	r1, [pc, #304]	; (800567c <prvCLITask+0x1ac>)
 800554a:	f008 f989 	bl	800d860 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800554e:	0020      	movs	r0, r4
 8005550:	f7fa fde2 	bl	8000118 <strlen>
 8005554:	b282      	uxth	r2, r0
 8005556:	7828      	ldrb	r0, [r5, #0]
 8005558:	230a      	movs	r3, #10
 800555a:	0021      	movs	r1, r4
 800555c:	f008 f980 	bl	800d860 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8005560:	2300      	movs	r3, #0
 8005562:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005564:	4b46      	ldr	r3, [pc, #280]	; (8005680 <prvCLITask+0x1b0>)
 8005566:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8005568:	001f      	movs	r7, r3
 800556a:	e05c      	b.n	8005626 <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 800556c:	200f      	movs	r0, #15
 800556e:	4468      	add	r0, sp
 8005570:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8005572:	0198      	lsls	r0, r3, #6
 8005574:	4a43      	ldr	r2, [pc, #268]	; (8005684 <prvCLITask+0x1b4>)
 8005576:	1812      	adds	r2, r2, r0
 8005578:	2000      	movs	r0, #0
 800557a:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 800557c:	4a40      	ldr	r2, [pc, #256]	; (8005680 <prvCLITask+0x1b0>)
 800557e:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8005580:	240f      	movs	r4, #15
 8005582:	446c      	add	r4, sp
 8005584:	4b36      	ldr	r3, [pc, #216]	; (8005660 <prvCLITask+0x190>)
 8005586:	7818      	ldrb	r0, [r3, #0]
 8005588:	230a      	movs	r3, #10
 800558a:	2201      	movs	r2, #1
 800558c:	0021      	movs	r1, r4
 800558e:	f008 f967 	bl	800d860 <writePxITMutex>
		if( cRxedChar == '\r' )
 8005592:	7823      	ldrb	r3, [r4, #0]
 8005594:	2b0d      	cmp	r3, #13
 8005596:	d027      	beq.n	80055e8 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8005598:	2b0a      	cmp	r3, #10
 800559a:	d042      	beq.n	8005622 <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 800559c:	2b08      	cmp	r3, #8
 800559e:	d051      	beq.n	8005644 <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80055a0:	001a      	movs	r2, r3
 80055a2:	3a20      	subs	r2, #32
 80055a4:	2a5e      	cmp	r2, #94	; 0x5e
 80055a6:	d83c      	bhi.n	8005622 <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 80055a8:	4642      	mov	r2, r8
 80055aa:	2a31      	cmp	r2, #49	; 0x31
 80055ac:	dc39      	bgt.n	8005622 <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 80055ae:	4a36      	ldr	r2, [pc, #216]	; (8005688 <prvCLITask+0x1b8>)
 80055b0:	4641      	mov	r1, r8
 80055b2:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 80055b4:	4643      	mov	r3, r8
 80055b6:	3301      	adds	r3, #1
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	4698      	mov	r8, r3
 80055bc:	e031      	b.n	8005622 <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80055be:	2200      	movs	r2, #0
 80055c0:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 80055c2:	f00a f955 	bl	800f870 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80055c6:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 80055c8:	7833      	ldrb	r3, [r6, #0]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	019a      	lsls	r2, r3, #6
 80055ce:	18aa      	adds	r2, r5, r2
 80055d0:	5d12      	ldrb	r2, [r2, r4]
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d1ca      	bne.n	800556c <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 80055d6:	2c3f      	cmp	r4, #63	; 0x3f
 80055d8:	d0f1      	beq.n	80055be <prvCLITask+0xee>
			taskYIELD();
 80055da:	f00a f949 	bl	800f870 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80055de:	3401      	adds	r4, #1
 80055e0:	b2a4      	uxth	r4, r4
 80055e2:	2c3f      	cmp	r4, #63	; 0x3f
 80055e4:	d9f0      	bls.n	80055c8 <prvCLITask+0xf8>
 80055e6:	e7cb      	b.n	8005580 <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <prvCLITask+0x190>)
 80055ea:	7818      	ldrb	r0, [r3, #0]
 80055ec:	230a      	movs	r3, #10
 80055ee:	2202      	movs	r2, #2
 80055f0:	4926      	ldr	r1, [pc, #152]	; (800568c <prvCLITask+0x1bc>)
 80055f2:	f008 f935 	bl	800d860 <writePxITMutex>
			if( cInputIndex == 0 )
 80055f6:	4643      	mov	r3, r8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01e      	beq.n	800563a <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 80055fc:	4c22      	ldr	r4, [pc, #136]	; (8005688 <prvCLITask+0x1b8>)
 80055fe:	4b18      	ldr	r3, [pc, #96]	; (8005660 <prvCLITask+0x190>)
 8005600:	7818      	ldrb	r0, [r3, #0]
 8005602:	4653      	mov	r3, sl
 8005604:	0022      	movs	r2, r4
 8005606:	2101      	movs	r1, #1
 8005608:	f7ff fd46 	bl	8005098 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800560c:	0021      	movs	r1, r4
 800560e:	4820      	ldr	r0, [pc, #128]	; (8005690 <prvCLITask+0x1c0>)
 8005610:	f00e fc1f 	bl	8013e52 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005614:	2232      	movs	r2, #50	; 0x32
 8005616:	2100      	movs	r1, #0
 8005618:	0020      	movs	r0, r4
 800561a:	f00e f9ea 	bl	80139f2 <memset>
			cInputIndex = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	4698      	mov	r8, r3
		taskYIELD();
 8005622:	f00a f925 	bl	800f870 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <prvCLITask+0x190>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	444b      	add	r3, r9
 800562c:	3b01      	subs	r3, #1
 800562e:	781c      	ldrb	r4, [r3, #0]
 8005630:	2c3f      	cmp	r4, #63	; 0x3f
 8005632:	d8a5      	bhi.n	8005580 <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 8005634:	4e0a      	ldr	r6, [pc, #40]	; (8005660 <prvCLITask+0x190>)
 8005636:	4d13      	ldr	r5, [pc, #76]	; (8005684 <prvCLITask+0x1b4>)
 8005638:	e7c6      	b.n	80055c8 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 800563a:	4915      	ldr	r1, [pc, #84]	; (8005690 <prvCLITask+0x1c0>)
 800563c:	4812      	ldr	r0, [pc, #72]	; (8005688 <prvCLITask+0x1b8>)
 800563e:	f00e fc08 	bl	8013e52 <strcpy>
 8005642:	e7db      	b.n	80055fc <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 8005644:	4643      	mov	r3, r8
 8005646:	2b00      	cmp	r3, #0
 8005648:	ddeb      	ble.n	8005622 <prvCLITask+0x152>
					cInputIndex--;
 800564a:	3b01      	subs	r3, #1
 800564c:	b25b      	sxtb	r3, r3
 800564e:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 8005650:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <prvCLITask+0x1b8>)
 8005652:	2200      	movs	r2, #0
 8005654:	4641      	mov	r1, r8
 8005656:	545a      	strb	r2, [r3, r1]
 8005658:	e7e3      	b.n	8005622 <prvCLITask+0x152>
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	200068d0 	.word	0x200068d0
 8005660:	20000a7f 	.word	0x20000a7f
 8005664:	20000050 	.word	0x20000050
 8005668:	0801a1e8 	.word	0x0801a1e8
 800566c:	20001046 	.word	0x20001046
 8005670:	200011e8 	.word	0x200011e8
 8005674:	0801a48c 	.word	0x0801a48c
 8005678:	00000293 	.word	0x00000293
 800567c:	0801a4b8 	.word	0x0801a4b8
 8005680:	200013d8 	.word	0x200013d8
 8005684:	20001298 	.word	0x20001298
 8005688:	20001118 	.word	0x20001118
 800568c:	0801c834 	.word	0x0801c834
 8005690:	200011b4 	.word	0x200011b4

08005694 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005698:	4b1c      	ldr	r3, [pc, #112]	; (800570c <ParseSnippetCommand+0x78>)
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	3a01      	subs	r2, #1
 800569e:	0093      	lsls	r3, r2, #2
 80056a0:	189b      	adds	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <ParseSnippetCommand+0x7c>)
 80056a6:	18d3      	adds	r3, r2, r3
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d02c      	beq.n	8005708 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <ParseSnippetCommand+0x80>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d014      	beq.n	80056e0 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 80056b6:	4b17      	ldr	r3, [pc, #92]	; (8005714 <ParseSnippetCommand+0x80>)
 80056b8:	681e      	ldr	r6, [r3, #0]
 80056ba:	7833      	ldrb	r3, [r6, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 80056c0:	2113      	movs	r1, #19
 80056c2:	0030      	movs	r0, r6
 80056c4:	f00e fbb7 	bl	8013e36 <strchr>
 80056c8:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 80056ca:	d011      	beq.n	80056f0 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 80056cc:	1b82      	subs	r2, r0, r6
 80056ce:	0031      	movs	r1, r6
 80056d0:	0020      	movs	r0, r4
 80056d2:	f00e fbd7 	bl	8013e84 <strncpy>
		ptrStart = ptrEnd+1;
 80056d6:	3501      	adds	r5, #1
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <ParseSnippetCommand+0x80>)
 80056da:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 80056dc:	2001      	movs	r0, #1
}
 80056de:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <ParseSnippetCommand+0x80>)
 80056e2:	6018      	str	r0, [r3, #0]
 80056e4:	e7e7      	b.n	80056b6 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <ParseSnippetCommand+0x80>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
		return false;
 80056ec:	2000      	movs	r0, #0
 80056ee:	e7f6      	b.n	80056de <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 80056f0:	0031      	movs	r1, r6
 80056f2:	0020      	movs	r0, r4
 80056f4:	f00e fbad 	bl	8013e52 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 80056f8:	0020      	movs	r0, r4
 80056fa:	f7fa fd0d 	bl	8000118 <strlen>
 80056fe:	1836      	adds	r6, r6, r0
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <ParseSnippetCommand+0x80>)
 8005702:	601e      	str	r6, [r3, #0]
	return true;
 8005704:	2001      	movs	r0, #1
 8005706:	e7ea      	b.n	80056de <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005708:	2000      	movs	r0, #0
 800570a:	e7e8      	b.n	80056de <ParseSnippetCommand+0x4a>
 800570c:	200011e7 	.word	0x200011e7
 8005710:	200068ec 	.word	0x200068ec
 8005714:	20001210 	.word	0x20001210

08005718 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800571e:	0083      	lsls	r3, r0, #2
 8005720:	181b      	adds	r3, r3, r0
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a3e      	ldr	r2, [pc, #248]	; (8005820 <CheckSnippetCondition+0x108>)
 8005726:	5c9b      	ldrb	r3, [r3, r2]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d021      	beq.n	8005770 <CheckSnippetCondition+0x58>
 800572c:	2000      	movs	r0, #0
 800572e:	2b03      	cmp	r3, #3
 8005730:	d130      	bne.n	8005794 <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005732:	4d3b      	ldr	r5, [pc, #236]	; (8005820 <CheckSnippetCondition+0x108>)
 8005734:	00a6      	lsls	r6, r4, #2
 8005736:	1933      	adds	r3, r6, r4
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	18eb      	adds	r3, r5, r3
 800573c:	78da      	ldrb	r2, [r3, #3]
 800573e:	3a01      	subs	r2, #1
 8005740:	0053      	lsls	r3, r2, #1
 8005742:	189b      	adds	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a37      	ldr	r2, [pc, #220]	; (8005824 <CheckSnippetCondition+0x10c>)
 8005748:	589b      	ldr	r3, [r3, r2]
 800574a:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800574c:	1931      	adds	r1, r6, r4
 800574e:	0089      	lsls	r1, r1, #2
 8005750:	3106      	adds	r1, #6
 8005752:	1949      	adds	r1, r1, r5
 8005754:	2204      	movs	r2, #4
 8005756:	a801      	add	r0, sp, #4
 8005758:	f00e f942 	bl	80139e0 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 800575c:	1936      	adds	r6, r6, r4
 800575e:	00b6      	lsls	r6, r6, #2
 8005760:	19ad      	adds	r5, r5, r6
 8005762:	786b      	ldrb	r3, [r5, #1]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d853      	bhi.n	8005810 <CheckSnippetCondition+0xf8>
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <CheckSnippetCondition+0x110>)
 800576c:	58d3      	ldr	r3, [r2, r3]
 800576e:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8005770:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <CheckSnippetCondition+0x108>)
 8005772:	0080      	lsls	r0, r0, #2
 8005774:	1903      	adds	r3, r0, r4
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 800577a:	7899      	ldrb	r1, [r3, #2]
 800577c:	00cb      	lsls	r3, r1, #3
 800577e:	185b      	adds	r3, r3, r1
 8005780:	1900      	adds	r0, r0, r4
 8005782:	0080      	lsls	r0, r0, #2
 8005784:	1812      	adds	r2, r2, r0
 8005786:	4929      	ldr	r1, [pc, #164]	; (800582c <CheckSnippetCondition+0x114>)
 8005788:	5c58      	ldrb	r0, [r3, r1]
 800578a:	78d3      	ldrb	r3, [r2, #3]
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	4243      	negs	r3, r0
 8005790:	4158      	adcs	r0, r3
 8005792:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8005794:	b003      	add	sp, #12
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8005798:	1c39      	adds	r1, r7, #0
 800579a:	9801      	ldr	r0, [sp, #4]
 800579c:	f7fa fe98 	bl	80004d0 <__aeabi_fcmpeq>
 80057a0:	1e43      	subs	r3, r0, #1
 80057a2:	4198      	sbcs	r0, r3
 80057a4:	e7f6      	b.n	8005794 <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80057a6:	1c39      	adds	r1, r7, #0
 80057a8:	9801      	ldr	r0, [sp, #4]
 80057aa:	f7fa fe97 	bl	80004dc <__aeabi_fcmplt>
 80057ae:	1e43      	subs	r3, r0, #1
 80057b0:	4198      	sbcs	r0, r3
 80057b2:	e7ef      	b.n	8005794 <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 80057b4:	1c39      	adds	r1, r7, #0
 80057b6:	9801      	ldr	r0, [sp, #4]
 80057b8:	f7fa fea4 	bl	8000504 <__aeabi_fcmpgt>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d029      	beq.n	8005814 <CheckSnippetCondition+0xfc>
 80057c0:	2100      	movs	r1, #0
 80057c2:	1c38      	adds	r0, r7, #0
 80057c4:	f7fa fe84 	bl	80004d0 <__aeabi_fcmpeq>
 80057c8:	4243      	negs	r3, r0
 80057ca:	4158      	adcs	r0, r3
 80057cc:	e7e2      	b.n	8005794 <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 80057ce:	1c39      	adds	r1, r7, #0
 80057d0:	9801      	ldr	r0, [sp, #4]
 80057d2:	f7fa fe8d 	bl	80004f0 <__aeabi_fcmple>
 80057d6:	1e43      	subs	r3, r0, #1
 80057d8:	4198      	sbcs	r0, r3
 80057da:	e7db      	b.n	8005794 <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 80057dc:	1c39      	adds	r1, r7, #0
 80057de:	9801      	ldr	r0, [sp, #4]
 80057e0:	f7fa fe9a 	bl	8000518 <__aeabi_fcmpge>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d017      	beq.n	8005818 <CheckSnippetCondition+0x100>
 80057e8:	2100      	movs	r1, #0
 80057ea:	1c38      	adds	r0, r7, #0
 80057ec:	f7fa fe70 	bl	80004d0 <__aeabi_fcmpeq>
 80057f0:	4243      	negs	r3, r0
 80057f2:	4158      	adcs	r0, r3
 80057f4:	e7ce      	b.n	8005794 <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 80057f6:	1c39      	adds	r1, r7, #0
 80057f8:	9801      	ldr	r0, [sp, #4]
 80057fa:	f7fa fe69 	bl	80004d0 <__aeabi_fcmpeq>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d10c      	bne.n	800581c <CheckSnippetCondition+0x104>
 8005802:	2100      	movs	r1, #0
 8005804:	1c38      	adds	r0, r7, #0
 8005806:	f7fa fe63 	bl	80004d0 <__aeabi_fcmpeq>
 800580a:	4243      	negs	r3, r0
 800580c:	4158      	adcs	r0, r3
 800580e:	e7c1      	b.n	8005794 <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 8005810:	2000      	movs	r0, #0
 8005812:	e7bf      	b.n	8005794 <CheckSnippetCondition+0x7c>
	return false;
 8005814:	2000      	movs	r0, #0
 8005816:	e7bd      	b.n	8005794 <CheckSnippetCondition+0x7c>
 8005818:	2000      	movs	r0, #0
 800581a:	e7bb      	b.n	8005794 <CheckSnippetCondition+0x7c>
 800581c:	2000      	movs	r0, #0
 800581e:	e7b9      	b.n	8005794 <CheckSnippetCondition+0x7c>
 8005820:	200068ec 	.word	0x200068ec
 8005824:	20000088 	.word	0x20000088
 8005828:	0801a74c 	.word	0x0801a74c
 800582c:	20001480 	.word	0x20001480

08005830 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	46ce      	mov	lr, r9
 8005834:	4647      	mov	r7, r8
 8005836:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8005838:	f008 fa38 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 800583c:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <ExecuteSnippet+0x90>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d036      	beq.n	80058b4 <ExecuteSnippet+0x84>
 8005846:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 8005848:	4f1e      	ldr	r7, [pc, #120]	; (80058c4 <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <ExecuteSnippet+0x98>)
 800584c:	4698      	mov	r8, r3
 800584e:	e01a      	b.n	8005886 <ExecuteSnippet+0x56>
 8005850:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <ExecuteSnippet+0x9c>)
 8005852:	7818      	ldrb	r0, [r3, #0]
 8005854:	0033      	movs	r3, r6
 8005856:	4642      	mov	r2, r8
 8005858:	2100      	movs	r1, #0
 800585a:	f7ff fc1d 	bl	8005098 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 800585e:	0030      	movs	r0, r6
 8005860:	f7fa fc5a 	bl	8000118 <strlen>
 8005864:	0002      	movs	r2, r0
 8005866:	2100      	movs	r1, #0
 8005868:	0030      	movs	r0, r6
 800586a:	f00e f8c2 	bl	80139f2 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800586e:	4649      	mov	r1, r9
 8005870:	68e8      	ldr	r0, [r5, #12]
 8005872:	f7ff ff0f 	bl	8005694 <ParseSnippetCommand>
 8005876:	2800      	cmp	r0, #0
 8005878:	d1ea      	bne.n	8005850 <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800587a:	3401      	adds	r4, #1
 800587c:	b2a4      	uxth	r4, r4
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <ExecuteSnippet+0x90>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	42a3      	cmp	r3, r4
 8005884:	d916      	bls.n	80058b4 <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 8005886:	00a3      	lsls	r3, r4, #2
 8005888:	191b      	adds	r3, r3, r4
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	7c1b      	ldrb	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f2      	beq.n	800587a <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8005894:	b2e0      	uxtb	r0, r4
 8005896:	f7ff ff3f 	bl	8005718 <CheckSnippetCondition>
 800589a:	2800      	cmp	r0, #0
 800589c:	d0ed      	beq.n	800587a <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <ExecuteSnippet+0xa0>)
 80058a0:	2220      	movs	r2, #32
 80058a2:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <ExecuteSnippet+0x98>)
 80058a6:	4699      	mov	r9, r3
 80058a8:	00a3      	lsls	r3, r4, #2
 80058aa:	191d      	adds	r5, r3, r4
 80058ac:	00ad      	lsls	r5, r5, #2
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <ExecuteSnippet+0x94>)
 80058b0:	195d      	adds	r5, r3, r5
 80058b2:	e7dc      	b.n	800586e <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 80058b4:	2000      	movs	r0, #0
 80058b6:	bcc0      	pop	{r6, r7}
 80058b8:	46b9      	mov	r9, r7
 80058ba:	46b0      	mov	r8, r6
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	200011e7 	.word	0x200011e7
 80058c4:	200068ec 	.word	0x200068ec
 80058c8:	20001180 	.word	0x20001180
 80058cc:	20000a7f 	.word	0x20000a7f
 80058d0:	200068d0 	.word	0x200068d0

080058d4 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 80058d4:	2000      	movs	r0, #0
 80058d6:	4770      	bx	lr

080058d8 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	0004      	movs	r4, r0
 80058de:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 80058e4:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d015      	beq.n	8005916 <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80058ea:	aa01      	add	r2, sp, #4
 80058ec:	2101      	movs	r1, #1
 80058ee:	0028      	movs	r0, r5
 80058f0:	f008 f9e0 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80058f4:	2300      	movs	r3, #0
 80058f6:	56c3      	ldrsb	r3, [r0, r3]
 80058f8:	2b70      	cmp	r3, #112	; 0x70
 80058fa:	d00e      	beq.n	800591a <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80058fc:	466a      	mov	r2, sp
 80058fe:	2102      	movs	r1, #2
 8005900:	0028      	movs	r0, r5
 8005902:	f008 f9d7 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005906:	f00d fe0a 	bl	801351e <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800590a:	2213      	movs	r2, #19
 800590c:	4910      	ldr	r1, [pc, #64]	; (8005950 <setBaudrateCommand+0x78>)
 800590e:	0020      	movs	r0, r4
 8005910:	f00e f866 	bl	80139e0 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005914:	e018      	b.n	8005948 <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 8005916:	b672      	cpsid	i
 8005918:	e7fe      	b.n	8005918 <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800591a:	3001      	adds	r0, #1
 800591c:	f00d fdff 	bl	801351e <atol>
 8005920:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005922:	466a      	mov	r2, sp
 8005924:	2102      	movs	r1, #2
 8005926:	0028      	movs	r0, r5
 8005928:	f008 f9c4 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800592c:	f00d fdf7 	bl	801351e <atol>
 8005930:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 8005932:	b2f0      	uxtb	r0, r6
 8005934:	0029      	movs	r1, r5
 8005936:	f007 ffd7 	bl	800d8e8 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 800593a:	23ff      	movs	r3, #255	; 0xff
 800593c:	4033      	ands	r3, r6
 800593e:	002a      	movs	r2, r5
 8005940:	4904      	ldr	r1, [pc, #16]	; (8005954 <setBaudrateCommand+0x7c>)
 8005942:	0020      	movs	r0, r4
 8005944:	f00e fa4a 	bl	8013ddc <sprintf>
}
 8005948:	2000      	movs	r0, #0
 800594a:	b002      	add	sp, #8
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	0801a790 	.word	0x0801a790
 8005954:	0801a768 	.word	0x0801a768

08005958 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005958:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800595a:	2800      	cmp	r0, #0
 800595c:	d006      	beq.n	800596c <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <flashsizeCommand+0x18>)
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	4904      	ldr	r1, [pc, #16]	; (8005974 <flashsizeCommand+0x1c>)
 8005964:	f00e fa3a 	bl	8013ddc <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005968:	2000      	movs	r0, #0
 800596a:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800596c:	b672      	cpsid	i
 800596e:	e7fe      	b.n	800596e <flashsizeCommand+0x16>
 8005970:	1ffff7cc 	.word	0x1ffff7cc
 8005974:	0801a7a4 	.word	0x0801a7a4

08005978 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597a:	46d6      	mov	lr, sl
 800597c:	464f      	mov	r7, r9
 800597e:	b580      	push	{r7, lr}
 8005980:	b085      	sub	sp, #20
 8005982:	0004      	movs	r4, r0
 8005984:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 800598a:	4b63      	ldr	r3, [pc, #396]	; (8005b18 <testportCommand+0x1a0>)
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	ab02      	add	r3, sp, #8
 8005990:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005992:	2c00      	cmp	r4, #0
 8005994:	d012      	beq.n	80059bc <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005996:	aa03      	add	r2, sp, #12
 8005998:	2101      	movs	r1, #1
 800599a:	f008 f98b 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 800599e:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 80059a0:	495e      	ldr	r1, [pc, #376]	; (8005b1c <testportCommand+0x1a4>)
 80059a2:	f7fa fbaf 	bl	8000104 <strcmp>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d174      	bne.n	8005a94 <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 80059aa:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <testportCommand+0x1a8>)
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	4b5d      	ldr	r3, [pc, #372]	; (8005b24 <testportCommand+0x1ac>)
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	3b01      	subs	r3, #1
 80059b4:	781f      	ldrb	r7, [r3, #0]
 80059b6:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 80059b8:	4e59      	ldr	r6, [pc, #356]	; (8005b20 <testportCommand+0x1a8>)
 80059ba:	e03e      	b.n	8005a3a <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 80059bc:	b672      	cpsid	i
 80059be:	e7fe      	b.n	80059be <testportCommand+0x46>
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 80059c0:	002a      	movs	r2, r5
 80059c2:	4959      	ldr	r1, [pc, #356]	; (8005b28 <testportCommand+0x1b0>)
 80059c4:	0020      	movs	r0, r4
 80059c6:	f00e fa09 	bl	8013ddc <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 80059ca:	0020      	movs	r0, r4
 80059cc:	f7fa fba4 	bl	8000118 <strlen>
 80059d0:	b282      	uxth	r2, r0
 80059d2:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <testportCommand+0x1a8>)
 80059d4:	7818      	ldrb	r0, [r3, #0]
 80059d6:	2364      	movs	r3, #100	; 0x64
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	3b5a      	subs	r3, #90	; 0x5a
 80059dc:	0021      	movs	r1, r4
 80059de:	f007 ff13 	bl	800d808 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 80059e2:	2254      	movs	r2, #84	; 0x54
 80059e4:	4951      	ldr	r1, [pc, #324]	; (8005b2c <testportCommand+0x1b4>)
 80059e6:	0020      	movs	r0, r4
 80059e8:	f00d fffa 	bl	80139e0 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 80059ec:	0020      	movs	r0, r4
 80059ee:	f7fa fb93 	bl	8000118 <strlen>
 80059f2:	b282      	uxth	r2, r0
 80059f4:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <testportCommand+0x1a8>)
 80059f6:	7818      	ldrb	r0, [r3, #0]
 80059f8:	2364      	movs	r3, #100	; 0x64
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	3b5a      	subs	r3, #90	; 0x5a
 80059fe:	0021      	movs	r1, r4
 8005a00:	f007 ff02 	bl	800d808 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005a04:	3701      	adds	r7, #1
 8005a06:	4b46      	ldr	r3, [pc, #280]	; (8005b20 <testportCommand+0x1a8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	4a48      	ldr	r2, [pc, #288]	; (8005b30 <testportCommand+0x1b8>)
 8005a10:	18d3      	adds	r3, r2, r3
 8005a12:	5ddb      	ldrb	r3, [r3, r7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <testportCommand+0xbc>
 8005a18:	4692      	mov	sl, r2
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <testportCommand+0x1a8>)
 8005a1c:	4699      	mov	r9, r3
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f00a f8a0 	bl	800fb64 <HAL_Delay>
 8005a24:	464b      	mov	r3, r9
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	019b      	lsls	r3, r3, #6
 8005a2c:	4453      	add	r3, sl
 8005a2e:	5ddb      	ldrb	r3, [r3, r7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f4      	beq.n	8005a1e <testportCommand+0xa6>
    for (ports=1;ports<=NumOfPorts;ports++)
 8005a34:	3501      	adds	r5, #1
 8005a36:	2d06      	cmp	r5, #6
 8005a38:	d035      	beq.n	8005aa6 <testportCommand+0x12e>
 8005a3a:	b2eb      	uxtb	r3, r5
 8005a3c:	4699      	mov	r9, r3
      if(PcPort!=ports)
 8005a3e:	7833      	ldrb	r3, [r6, #0]
 8005a40:	454b      	cmp	r3, r9
 8005a42:	d0f7      	beq.n	8005a34 <testportCommand+0xbc>
        WriteVaule[0]=rand();
 8005a44:	f00d ffee 	bl	8013a24 <rand>
 8005a48:	466b      	mov	r3, sp
 8005a4a:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005a4c:	2364      	movs	r3, #100	; 0x64
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	3b5a      	subs	r3, #90	; 0x5a
 8005a52:	2201      	movs	r2, #1
 8005a54:	a902      	add	r1, sp, #8
 8005a56:	4648      	mov	r0, r9
 8005a58:	f007 fed6 	bl	800d808 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005a5c:	4648      	mov	r0, r9
 8005a5e:	f007 feb5 	bl	800d7cc <GetUart>
 8005a62:	6803      	ldr	r3, [r0, #0]
 8005a64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8005a66:	466a      	mov	r2, sp
 8005a68:	7a12      	ldrb	r2, [r2, #8]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1a7      	bne.n	80059c0 <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8005a70:	002a      	movs	r2, r5
 8005a72:	4930      	ldr	r1, [pc, #192]	; (8005b34 <testportCommand+0x1bc>)
 8005a74:	0020      	movs	r0, r4
 8005a76:	f00e f9b1 	bl	8013ddc <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005a7a:	0020      	movs	r0, r4
 8005a7c:	f7fa fb4c 	bl	8000118 <strlen>
 8005a80:	b282      	uxth	r2, r0
 8005a82:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <testportCommand+0x1a8>)
 8005a84:	7818      	ldrb	r0, [r3, #0]
 8005a86:	2364      	movs	r3, #100	; 0x64
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	3b5a      	subs	r3, #90	; 0x5a
 8005a8c:	0021      	movs	r1, r4
 8005a8e:	f007 febb 	bl	800d808 <writePxMutex>
 8005a92:	e7a6      	b.n	80059e2 <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005a94:	2300      	movs	r3, #0
 8005a96:	56eb      	ldrsb	r3, [r5, r3]
 8005a98:	2b70      	cmp	r3, #112	; 0x70
 8005a9a:	d00a      	beq.n	8005ab2 <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005a9c:	220f      	movs	r2, #15
 8005a9e:	4926      	ldr	r1, [pc, #152]	; (8005b38 <testportCommand+0x1c0>)
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	f00d ff9d 	bl	80139e0 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	b005      	add	sp, #20
 8005aaa:	bcc0      	pop	{r6, r7}
 8005aac:	46ba      	mov	sl, r7
 8005aae:	46b1      	mov	r9, r6
 8005ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005ab2:	1c68      	adds	r0, r5, #1
 8005ab4:	f00d fd33 	bl	801351e <atol>
 8005ab8:	0005      	movs	r5, r0
 8005aba:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 8005abc:	1e73      	subs	r3, r6, #1
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d905      	bls.n	8005ace <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005ac2:	221b      	movs	r2, #27
 8005ac4:	491d      	ldr	r1, [pc, #116]	; (8005b3c <testportCommand+0x1c4>)
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f00d ff8a 	bl	80139e0 <memcpy>
	return pdFALSE;
 8005acc:	e7eb      	b.n	8005aa6 <testportCommand+0x12e>
        WriteVaule[0]=rand();
 8005ace:	f00d ffa9 	bl	8013a24 <rand>
 8005ad2:	466b      	mov	r3, sp
 8005ad4:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005ad6:	2364      	movs	r3, #100	; 0x64
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	3b32      	subs	r3, #50	; 0x32
 8005adc:	2201      	movs	r2, #1
 8005ade:	a902      	add	r1, sp, #8
 8005ae0:	0030      	movs	r0, r6
 8005ae2:	f007 fe91 	bl	800d808 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005ae6:	0030      	movs	r0, r6
 8005ae8:	f007 fe70 	bl	800d7cc <GetUart>
 8005aec:	6803      	ldr	r3, [r0, #0]
 8005aee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005af0:	466a      	mov	r2, sp
 8005af2:	7a12      	ldrb	r2, [r2, #8]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d006      	beq.n	8005b08 <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	402a      	ands	r2, r5
 8005afe:	490a      	ldr	r1, [pc, #40]	; (8005b28 <testportCommand+0x1b0>)
 8005b00:	0020      	movs	r0, r4
 8005b02:	f00e f96b 	bl	8013ddc <sprintf>
 8005b06:	e7ce      	b.n	8005aa6 <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	402a      	ands	r2, r5
 8005b0c:	4909      	ldr	r1, [pc, #36]	; (8005b34 <testportCommand+0x1bc>)
 8005b0e:	0020      	movs	r0, r4
 8005b10:	f00e f964 	bl	8013ddc <sprintf>
 8005b14:	e7c7      	b.n	8005aa6 <testportCommand+0x12e>
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	0801a874 	.word	0x0801a874
 8005b1c:	08019f90 	.word	0x08019f90
 8005b20:	20000a7f 	.word	0x20000a7f
 8005b24:	200013d8 	.word	0x200013d8
 8005b28:	0801a7e0 	.word	0x0801a7e0
 8005b2c:	0801a7f4 	.word	0x0801a7f4
 8005b30:	20001298 	.word	0x20001298
 8005b34:	0801a7c4 	.word	0x0801a7c4
 8005b38:	0801a848 	.word	0x0801a848
 8005b3c:	0801a858 	.word	0x0801a858

08005b40 <unbridgeCommand>:
{	
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b083      	sub	sp, #12
 8005b44:	0004      	movs	r4, r0
 8005b46:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d017      	beq.n	8005b82 <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005b52:	aa01      	add	r2, sp, #4
 8005b54:	2101      	movs	r1, #1
 8005b56:	0028      	movs	r0, r5
 8005b58:	f008 f8ac 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	56c3      	ldrsb	r3, [r0, r3]
 8005b60:	2b70      	cmp	r3, #112	; 0x70
 8005b62:	d010      	beq.n	8005b86 <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005b64:	466a      	mov	r2, sp
 8005b66:	2102      	movs	r1, #2
 8005b68:	0028      	movs	r0, r5
 8005b6a:	f008 f8a3 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	56c3      	ldrsb	r3, [r0, r3]
 8005b72:	2b70      	cmp	r3, #112	; 0x70
 8005b74:	d028      	beq.n	8005bc8 <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005b76:	220f      	movs	r2, #15
 8005b78:	491a      	ldr	r1, [pc, #104]	; (8005be4 <unbridgeCommand+0xa4>)
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	f00d ff30 	bl	80139e0 <memcpy>
 8005b80:	e02d      	b.n	8005bde <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005b82:	b672      	cpsid	i
 8005b84:	e7fe      	b.n	8005b84 <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005b86:	3001      	adds	r0, #1
 8005b88:	f00d fcc9 	bl	801351e <atol>
 8005b8c:	0006      	movs	r6, r0
 8005b8e:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005b90:	466a      	mov	r2, sp
 8005b92:	2102      	movs	r1, #2
 8005b94:	0028      	movs	r0, r5
 8005b96:	f008 f88d 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	56c3      	ldrsb	r3, [r0, r3]
 8005b9e:	2b70      	cmp	r3, #112	; 0x70
 8005ba0:	d1e9      	bne.n	8005b76 <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f00d fcbb 	bl	801351e <atol>
 8005ba8:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005baa:	b2c1      	uxtb	r1, r0
 8005bac:	0038      	movs	r0, r7
 8005bae:	f7fe ff6f 	bl	8004a90 <Unbridge>
	if (result == BOS_OK) 
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d10c      	bne.n	8005bd0 <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	002b      	movs	r3, r5
 8005bba:	4013      	ands	r3, r2
 8005bbc:	4032      	ands	r2, r6
 8005bbe:	490a      	ldr	r1, [pc, #40]	; (8005be8 <unbridgeCommand+0xa8>)
 8005bc0:	0020      	movs	r0, r4
 8005bc2:	f00e f90b 	bl	8013ddc <sprintf>
 8005bc6:	e00a      	b.n	8005bde <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f00d fca8 	bl	801351e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005bce:	e7d2      	b.n	8005b76 <unbridgeCommand+0x36>
 8005bd0:	2867      	cmp	r0, #103	; 0x67
 8005bd2:	d0d0      	beq.n	8005b76 <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005bd4:	2219      	movs	r2, #25
 8005bd6:	4905      	ldr	r1, [pc, #20]	; (8005bec <unbridgeCommand+0xac>)
 8005bd8:	0020      	movs	r0, r4
 8005bda:	f00d ff01 	bl	80139e0 <memcpy>
}
 8005bde:	2000      	movs	r0, #0
 8005be0:	b003      	add	sp, #12
 8005be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be4:	0801a848 	.word	0x0801a848
 8005be8:	0801a878 	.word	0x0801a878
 8005bec:	0801a898 	.word	0x0801a898

08005bf0 <bridgeCommand>:
{	
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	0004      	movs	r4, r0
 8005bf6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d017      	beq.n	8005c32 <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c02:	aa01      	add	r2, sp, #4
 8005c04:	2101      	movs	r1, #1
 8005c06:	0028      	movs	r0, r5
 8005c08:	f008 f854 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	56c3      	ldrsb	r3, [r0, r3]
 8005c10:	2b70      	cmp	r3, #112	; 0x70
 8005c12:	d010      	beq.n	8005c36 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c14:	466a      	mov	r2, sp
 8005c16:	2102      	movs	r1, #2
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f008 f84b 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	56c3      	ldrsb	r3, [r0, r3]
 8005c22:	2b70      	cmp	r3, #112	; 0x70
 8005c24:	d028      	beq.n	8005c78 <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005c26:	220f      	movs	r2, #15
 8005c28:	491a      	ldr	r1, [pc, #104]	; (8005c94 <bridgeCommand+0xa4>)
 8005c2a:	0020      	movs	r0, r4
 8005c2c:	f00d fed8 	bl	80139e0 <memcpy>
 8005c30:	e02d      	b.n	8005c8e <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005c32:	b672      	cpsid	i
 8005c34:	e7fe      	b.n	8005c34 <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005c36:	3001      	adds	r0, #1
 8005c38:	f00d fc71 	bl	801351e <atol>
 8005c3c:	0006      	movs	r6, r0
 8005c3e:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c40:	466a      	mov	r2, sp
 8005c42:	2102      	movs	r1, #2
 8005c44:	0028      	movs	r0, r5
 8005c46:	f008 f835 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	56c3      	ldrsb	r3, [r0, r3]
 8005c4e:	2b70      	cmp	r3, #112	; 0x70
 8005c50:	d1e9      	bne.n	8005c26 <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005c52:	3001      	adds	r0, #1
 8005c54:	f00d fc63 	bl	801351e <atol>
 8005c58:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005c5a:	b2c1      	uxtb	r1, r0
 8005c5c:	0038      	movs	r0, r7
 8005c5e:	f7fe ff03 	bl	8004a68 <Bridge>
	if (result == BOS_OK) 
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d10c      	bne.n	8005c80 <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005c66:	22ff      	movs	r2, #255	; 0xff
 8005c68:	002b      	movs	r3, r5
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	4032      	ands	r2, r6
 8005c6e:	490a      	ldr	r1, [pc, #40]	; (8005c98 <bridgeCommand+0xa8>)
 8005c70:	0020      	movs	r0, r4
 8005c72:	f00e f8b3 	bl	8013ddc <sprintf>
 8005c76:	e00a      	b.n	8005c8e <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f00d fc50 	bl	801351e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005c7e:	e7d2      	b.n	8005c26 <bridgeCommand+0x36>
 8005c80:	2867      	cmp	r0, #103	; 0x67
 8005c82:	d0d0      	beq.n	8005c26 <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005c84:	2217      	movs	r2, #23
 8005c86:	4905      	ldr	r1, [pc, #20]	; (8005c9c <bridgeCommand+0xac>)
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f00d fea9 	bl	80139e0 <memcpy>
}
 8005c8e:	2000      	movs	r0, #0
 8005c90:	b003      	add	sp, #12
 8005c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c94:	0801a848 	.word	0x0801a848
 8005c98:	0801a8b4 	.word	0x0801a8b4
 8005c9c:	0801a8d8 	.word	0x0801a8d8

08005ca0 <delSnipCommand>:
{	
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	46de      	mov	lr, fp
 8005ca4:	4657      	mov	r7, sl
 8005ca6:	464e      	mov	r6, r9
 8005ca8:	4645      	mov	r5, r8
 8005caa:	b5e0      	push	{r5, r6, r7, lr}
 8005cac:	b083      	sub	sp, #12
 8005cae:	0007      	movs	r7, r0
 8005cb0:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005cb6:	2f00      	cmp	r7, #0
 8005cb8:	d013      	beq.n	8005ce2 <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005cba:	aa01      	add	r2, sp, #4
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	f007 fff9 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005cc2:	f00d fc26 	bl	8013512 <atoi>
 8005cc6:	4681      	mov	r9, r0
 8005cc8:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	d003      	beq.n	8005cd6 <delSnipCommand+0x36>
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <delSnipCommand+0xf4>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	42ab      	cmp	r3, r5
 8005cd4:	d207      	bcs.n	8005ce6 <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005cd6:	2223      	movs	r2, #35	; 0x23
 8005cd8:	492f      	ldr	r1, [pc, #188]	; (8005d98 <delSnipCommand+0xf8>)
 8005cda:	0038      	movs	r0, r7
 8005cdc:	f00d fe80 	bl	80139e0 <memcpy>
	return pdFALSE;
 8005ce0:	e04f      	b.n	8005d82 <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 8005ce2:	b672      	cpsid	i
 8005ce4:	e7fe      	b.n	8005ce4 <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 8005ce6:	24ff      	movs	r4, #255	; 0xff
 8005ce8:	4004      	ands	r4, r0
 8005cea:	3c01      	subs	r4, #1
 8005cec:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <delSnipCommand+0xfc>)
 8005cee:	4698      	mov	r8, r3
 8005cf0:	00a6      	lsls	r6, r4, #2
 8005cf2:	1933      	adds	r3, r6, r4
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4692      	mov	sl, r2
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 8005d00:	1933      	adds	r3, r6, r4
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4443      	add	r3, r8
 8005d06:	469b      	mov	fp, r3
 8005d08:	4652      	mov	r2, sl
 8005d0a:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005d0c:	1930      	adds	r0, r6, r4
 8005d0e:	0080      	lsls	r0, r0, #2
 8005d10:	3002      	adds	r0, #2
 8005d12:	4440      	add	r0, r8
 8005d14:	3204      	adds	r2, #4
 8005d16:	f00d fe6c 	bl	80139f2 <memset>
		snippets[index-1].state = false;
 8005d1a:	465b      	mov	r3, fp
 8005d1c:	4652      	mov	r2, sl
 8005d1e:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 8005d20:	68d8      	ldr	r0, [r3, #12]
 8005d22:	f00d fc31 	bl	8013588 <free>
		snippets[index-1].cmd = NULL;
 8005d26:	465c      	mov	r4, fp
 8005d28:	4653      	mov	r3, sl
 8005d2a:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <delSnipCommand+0xf4>)
 8005d2e:	781e      	ldrb	r6, [r3, #0]
 8005d30:	42b5      	cmp	r5, r6
 8005d32:	d21c      	bcs.n	8005d6e <delSnipCommand+0xce>
 8005d34:	20ff      	movs	r0, #255	; 0xff
 8005d36:	464b      	mov	r3, r9
 8005d38:	4018      	ands	r0, r3
 8005d3a:	0084      	lsls	r4, r0, #2
 8005d3c:	1824      	adds	r4, r4, r0
 8005d3e:	00a4      	lsls	r4, r4, #2
 8005d40:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <delSnipCommand+0xfc>)
 8005d42:	18e4      	adds	r4, r4, r3
 8005d44:	e004      	b.n	8005d50 <delSnipCommand+0xb0>
 8005d46:	3501      	adds	r5, #1
 8005d48:	b2ed      	uxtb	r5, r5
 8005d4a:	3414      	adds	r4, #20
 8005d4c:	42b5      	cmp	r5, r6
 8005d4e:	d00e      	beq.n	8005d6e <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 8005d50:	7823      	ldrb	r3, [r4, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f7      	beq.n	8005d46 <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005d56:	2214      	movs	r2, #20
 8005d58:	0021      	movs	r1, r4
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	3814      	subs	r0, #20
 8005d5e:	f00d fe3f 	bl	80139e0 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005d62:	2214      	movs	r2, #20
 8005d64:	2100      	movs	r1, #0
 8005d66:	0020      	movs	r0, r4
 8005d68:	f00d fe43 	bl	80139f2 <memset>
 8005d6c:	e7eb      	b.n	8005d46 <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 8005d6e:	3e01      	subs	r6, #1
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <delSnipCommand+0xf4>)
 8005d72:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005d74:	f005 fa34 	bl	800b1e0 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005d78:	2236      	movs	r2, #54	; 0x36
 8005d7a:	4909      	ldr	r1, [pc, #36]	; (8005da0 <delSnipCommand+0x100>)
 8005d7c:	0038      	movs	r0, r7
 8005d7e:	f00d fe2f 	bl	80139e0 <memcpy>
}
 8005d82:	2000      	movs	r0, #0
 8005d84:	b003      	add	sp, #12
 8005d86:	bcf0      	pop	{r4, r5, r6, r7}
 8005d88:	46bb      	mov	fp, r7
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	46a9      	mov	r9, r5
 8005d8e:	46a0      	mov	r8, r4
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	200011e7 	.word	0x200011e7
 8005d98:	0801a928 	.word	0x0801a928
 8005d9c:	200068ec 	.word	0x200068ec
 8005da0:	0801a8f0 	.word	0x0801a8f0

08005da4 <pauseSnipCommand>:
{	
 8005da4:	b510      	push	{r4, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	0004      	movs	r4, r0
 8005daa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	d014      	beq.n	8005dde <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005db4:	aa01      	add	r2, sp, #4
 8005db6:	2101      	movs	r1, #1
 8005db8:	f007 ff7c 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005dbc:	f00d fba9 	bl	8013512 <atoi>
 8005dc0:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <pauseSnipCommand+0x2a>
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <pauseSnipCommand+0x64>)
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d209      	bcs.n	8005de2 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005dce:	2223      	movs	r2, #35	; 0x23
 8005dd0:	490e      	ldr	r1, [pc, #56]	; (8005e0c <pauseSnipCommand+0x68>)
 8005dd2:	0020      	movs	r0, r4
 8005dd4:	f00d fe04 	bl	80139e0 <memcpy>
}
 8005dd8:	2000      	movs	r0, #0
 8005dda:	b002      	add	sp, #8
 8005ddc:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005dde:	b672      	cpsid	i
 8005de0:	e7fe      	b.n	8005de0 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 8005de2:	23ff      	movs	r3, #255	; 0xff
 8005de4:	4003      	ands	r3, r0
 8005de6:	3b01      	subs	r3, #1
 8005de8:	009a      	lsls	r2, r3, #2
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <pauseSnipCommand+0x6c>)
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	2200      	movs	r2, #0
 8005df4:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005df6:	f005 f9f3 	bl	800b1e0 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005dfa:	2235      	movs	r2, #53	; 0x35
 8005dfc:	4905      	ldr	r1, [pc, #20]	; (8005e14 <pauseSnipCommand+0x70>)
 8005dfe:	0020      	movs	r0, r4
 8005e00:	f00d fdee 	bl	80139e0 <memcpy>
 8005e04:	e7e8      	b.n	8005dd8 <pauseSnipCommand+0x34>
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	200011e7 	.word	0x200011e7
 8005e0c:	0801a928 	.word	0x0801a928
 8005e10:	200068ec 	.word	0x200068ec
 8005e14:	0801a94c 	.word	0x0801a94c

08005e18 <actSnipCommand>:
{	
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	0004      	movs	r4, r0
 8005e1e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	d014      	beq.n	8005e52 <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005e28:	aa01      	add	r2, sp, #4
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	f007 ff42 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005e30:	f00d fb6f 	bl	8013512 <atoi>
 8005e34:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <actSnipCommand+0x2a>
 8005e3a:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <actSnipCommand+0x64>)
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d209      	bcs.n	8005e56 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005e42:	2223      	movs	r2, #35	; 0x23
 8005e44:	490e      	ldr	r1, [pc, #56]	; (8005e80 <actSnipCommand+0x68>)
 8005e46:	0020      	movs	r0, r4
 8005e48:	f00d fdca 	bl	80139e0 <memcpy>
}
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005e52:	b672      	cpsid	i
 8005e54:	e7fe      	b.n	8005e54 <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 8005e56:	23ff      	movs	r3, #255	; 0xff
 8005e58:	4003      	ands	r3, r0
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	009a      	lsls	r2, r3, #2
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <actSnipCommand+0x6c>)
 8005e64:	18d3      	adds	r3, r2, r3
 8005e66:	2201      	movs	r2, #1
 8005e68:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005e6a:	f005 f9b9 	bl	800b1e0 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005e6e:	2238      	movs	r2, #56	; 0x38
 8005e70:	4905      	ldr	r1, [pc, #20]	; (8005e88 <actSnipCommand+0x70>)
 8005e72:	0020      	movs	r0, r4
 8005e74:	f00d fdb4 	bl	80139e0 <memcpy>
 8005e78:	e7e8      	b.n	8005e4c <actSnipCommand+0x34>
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	200011e7 	.word	0x200011e7
 8005e80:	0801a928 	.word	0x0801a928
 8005e84:	200068ec 	.word	0x200068ec
 8005e88:	0801a984 	.word	0x0801a984

08005e8c <snipCommand>:
{	
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	46de      	mov	lr, fp
 8005e90:	4657      	mov	r7, sl
 8005e92:	464e      	mov	r6, r9
 8005e94:	4645      	mov	r5, r8
 8005e96:	b5e0      	push	{r5, r6, r7, lr}
 8005e98:	b08b      	sub	sp, #44	; 0x2c
 8005e9a:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005e9c:	aa06      	add	r2, sp, #24
 8005e9e:	4b80      	ldr	r3, [pc, #512]	; (80060a0 <snipCommand+0x214>)
 8005ea0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ea2:	c223      	stmia	r2!, {r0, r1, r5}
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d013      	beq.n	8005ed4 <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005eac:	4b7d      	ldr	r3, [pc, #500]	; (80060a4 <snipCommand+0x218>)
 8005eae:	7818      	ldrb	r0, [r3, #0]
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	425b      	negs	r3, r3
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	3333      	adds	r3, #51	; 0x33
 8005eb8:	2237      	movs	r2, #55	; 0x37
 8005eba:	497b      	ldr	r1, [pc, #492]	; (80060a8 <snipCommand+0x21c>)
 8005ebc:	f007 fca4 	bl	800d808 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005ec0:	4b7a      	ldr	r3, [pc, #488]	; (80060ac <snipCommand+0x220>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d100      	bne.n	8005eca <snipCommand+0x3e>
 8005ec8:	e0dd      	b.n	8006086 <snipCommand+0x1fa>
 8005eca:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 8005ecc:	4b78      	ldr	r3, [pc, #480]	; (80060b0 <snipCommand+0x224>)
 8005ece:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005ed0:	4d78      	ldr	r5, [pc, #480]	; (80060b4 <snipCommand+0x228>)
 8005ed2:	e0c3      	b.n	800605c <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 8005ed4:	b672      	cpsid	i
 8005ed6:	e7fe      	b.n	8005ed6 <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005ed8:	4b75      	ldr	r3, [pc, #468]	; (80060b0 <snipCommand+0x224>)
 8005eda:	469b      	mov	fp, r3
 8005edc:	00b3      	lsls	r3, r6, #2
 8005ede:	4699      	mov	r9, r3
 8005ee0:	199b      	adds	r3, r3, r6
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	445b      	add	r3, fp
 8005ee6:	7c1a      	ldrb	r2, [r3, #16]
 8005ee8:	00d3      	lsls	r3, r2, #3
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	aa06      	add	r2, sp, #24
 8005eee:	4694      	mov	ip, r2
 8005ef0:	4463      	add	r3, ip
 8005ef2:	003a      	movs	r2, r7
 8005ef4:	4970      	ldr	r1, [pc, #448]	; (80060b8 <snipCommand+0x22c>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f00d ff70 	bl	8013ddc <sprintf>
		switch (snippets[s].cond.conditionType)
 8005efc:	464b      	mov	r3, r9
 8005efe:	199b      	adds	r3, r3, r6
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	465a      	mov	r2, fp
 8005f04:	5c9b      	ldrb	r3, [r3, r2]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d11c      	bne.n	8005f44 <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 8005f0a:	00b3      	lsls	r3, r6, #2
 8005f0c:	199b      	adds	r3, r3, r6
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4a67      	ldr	r2, [pc, #412]	; (80060b0 <snipCommand+0x224>)
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	78db      	ldrb	r3, [r3, #3]
 8005f16:	2b0b      	cmp	r3, #11
 8005f18:	d842      	bhi.n	8005fa0 <snipCommand+0x114>
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d861      	bhi.n	8005fe2 <snipCommand+0x156>
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d051      	beq.n	8005fc6 <snipCommand+0x13a>
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d000      	beq.n	8005f28 <snipCommand+0x9c>
 8005f26:	e0a5      	b.n	8006074 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005f28:	00b3      	lsls	r3, r6, #2
 8005f2a:	199e      	adds	r6, r3, r6
 8005f2c:	00b6      	lsls	r6, r6, #2
 8005f2e:	4b60      	ldr	r3, [pc, #384]	; (80060b0 <snipCommand+0x224>)
 8005f30:	199e      	adds	r6, r3, r6
 8005f32:	78b3      	ldrb	r3, [r6, #2]
 8005f34:	68f2      	ldr	r2, [r6, #12]
 8005f36:	9200      	str	r2, [sp, #0]
 8005f38:	0022      	movs	r2, r4
 8005f3a:	4960      	ldr	r1, [pc, #384]	; (80060bc <snipCommand+0x230>)
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	f00d ff4d 	bl	8013ddc <sprintf>
        		break;
 8005f42:	e097      	b.n	8006074 <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d000      	beq.n	8005f4a <snipCommand+0xbe>
 8005f48:	e094      	b.n	8006074 <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005f4a:	00b1      	lsls	r1, r6, #2
 8005f4c:	1989      	adds	r1, r1, r6
 8005f4e:	0089      	lsls	r1, r1, #2
 8005f50:	3106      	adds	r1, #6
 8005f52:	4b57      	ldr	r3, [pc, #348]	; (80060b0 <snipCommand+0x224>)
 8005f54:	4699      	mov	r9, r3
 8005f56:	4449      	add	r1, r9
 8005f58:	2204      	movs	r2, #4
 8005f5a:	a805      	add	r0, sp, #20
 8005f5c:	f00d fd40 	bl	80139e0 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005f60:	00b3      	lsls	r3, r6, #2
 8005f62:	199e      	adds	r6, r3, r6
 8005f64:	00b6      	lsls	r6, r6, #2
 8005f66:	444e      	add	r6, r9
 8005f68:	78f2      	ldrb	r2, [r6, #3]
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	0053      	lsls	r3, r2, #1
 8005f6e:	189b      	adds	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a53      	ldr	r2, [pc, #332]	; (80060c0 <snipCommand+0x234>)
 8005f74:	18d3      	adds	r3, r2, r3
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4699      	mov	r9, r3
 8005f7a:	9805      	ldr	r0, [sp, #20]
 8005f7c:	f7fc ffb6 	bl	8002eec <__aeabi_f2d>
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9103      	str	r1, [sp, #12]
 8005f84:	7873      	ldrb	r3, [r6, #1]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	005a      	lsls	r2, r3, #1
 8005f8a:	18d2      	adds	r2, r2, r3
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <snipCommand+0x238>)
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	464b      	mov	r3, r9
 8005f94:	0022      	movs	r2, r4
 8005f96:	494c      	ldr	r1, [pc, #304]	; (80060c8 <snipCommand+0x23c>)
 8005f98:	0020      	movs	r0, r4
 8005f9a:	f00d ff1f 	bl	8013ddc <sprintf>
				break;
 8005f9e:	e069      	b.n	8006074 <snipCommand+0x1e8>
 8005fa0:	3b0c      	subs	r3, #12
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d866      	bhi.n	8006074 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005fa6:	00b2      	lsls	r2, r6, #2
 8005fa8:	1996      	adds	r6, r2, r6
 8005faa:	00b6      	lsls	r6, r6, #2
 8005fac:	4a40      	ldr	r2, [pc, #256]	; (80060b0 <snipCommand+0x224>)
 8005fae:	1992      	adds	r2, r2, r6
 8005fb0:	7893      	ldrb	r3, [r2, #2]
 8005fb2:	68d1      	ldr	r1, [r2, #12]
 8005fb4:	9101      	str	r1, [sp, #4]
 8005fb6:	7912      	ldrb	r2, [r2, #4]
 8005fb8:	9200      	str	r2, [sp, #0]
 8005fba:	0022      	movs	r2, r4
 8005fbc:	4943      	ldr	r1, [pc, #268]	; (80060cc <snipCommand+0x240>)
 8005fbe:	0020      	movs	r0, r4
 8005fc0:	f00d ff0c 	bl	8013ddc <sprintf>
        		break;						
 8005fc4:	e056      	b.n	8006074 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005fc6:	00b3      	lsls	r3, r6, #2
 8005fc8:	199e      	adds	r6, r3, r6
 8005fca:	00b6      	lsls	r6, r6, #2
 8005fcc:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <snipCommand+0x224>)
 8005fce:	199e      	adds	r6, r3, r6
 8005fd0:	78b3      	ldrb	r3, [r6, #2]
 8005fd2:	68f2      	ldr	r2, [r6, #12]
 8005fd4:	9200      	str	r2, [sp, #0]
 8005fd6:	0022      	movs	r2, r4
 8005fd8:	493d      	ldr	r1, [pc, #244]	; (80060d0 <snipCommand+0x244>)
 8005fda:	0020      	movs	r0, r4
 8005fdc:	f00d fefe 	bl	8013ddc <sprintf>
        		break;
 8005fe0:	e048      	b.n	8006074 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005fe2:	00b2      	lsls	r2, r6, #2
 8005fe4:	1996      	adds	r6, r2, r6
 8005fe6:	00b6      	lsls	r6, r6, #2
 8005fe8:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <snipCommand+0x224>)
 8005fea:	1992      	adds	r2, r2, r6
 8005fec:	7893      	ldrb	r3, [r2, #2]
 8005fee:	68d1      	ldr	r1, [r2, #12]
 8005ff0:	9101      	str	r1, [sp, #4]
 8005ff2:	7912      	ldrb	r2, [r2, #4]
 8005ff4:	9200      	str	r2, [sp, #0]
 8005ff6:	0022      	movs	r2, r4
 8005ff8:	4936      	ldr	r1, [pc, #216]	; (80060d4 <snipCommand+0x248>)
 8005ffa:	0020      	movs	r0, r4
 8005ffc:	f00d feee 	bl	8013ddc <sprintf>
        		break;
 8006000:	e038      	b.n	8006074 <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8006002:	002b      	movs	r3, r5
 8006004:	0022      	movs	r2, r4
 8006006:	4934      	ldr	r1, [pc, #208]	; (80060d8 <snipCommand+0x24c>)
 8006008:	0020      	movs	r0, r4
 800600a:	f00d fee7 	bl	8013ddc <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 800600e:	0028      	movs	r0, r5
 8006010:	f7fa f882 	bl	8000118 <strlen>
 8006014:	0002      	movs	r2, r0
 8006016:	2100      	movs	r1, #0
 8006018:	0028      	movs	r0, r5
 800601a:	f00d fcea 	bl	80139f2 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 800601e:	4649      	mov	r1, r9
 8006020:	68f0      	ldr	r0, [r6, #12]
 8006022:	f7ff fb37 	bl	8005694 <ParseSnippetCommand>
 8006026:	2800      	cmp	r0, #0
 8006028:	d1eb      	bne.n	8006002 <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 800602a:	0020      	movs	r0, r4
 800602c:	f7fa f874 	bl	8000118 <strlen>
 8006030:	1820      	adds	r0, r4, r0
 8006032:	220c      	movs	r2, #12
 8006034:	4929      	ldr	r1, [pc, #164]	; (80060dc <snipCommand+0x250>)
 8006036:	f00d fcd3 	bl	80139e0 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800603a:	0020      	movs	r0, r4
 800603c:	f7fa f86c 	bl	8000118 <strlen>
 8006040:	b282      	uxth	r2, r0
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <snipCommand+0x218>)
 8006044:	7818      	ldrb	r0, [r3, #0]
 8006046:	2301      	movs	r3, #1
 8006048:	425b      	negs	r3, r3
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	3333      	adds	r3, #51	; 0x33
 800604e:	0021      	movs	r1, r4
 8006050:	f007 fbda 	bl	800d808 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <snipCommand+0x220>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	42bb      	cmp	r3, r7
 800605a:	d914      	bls.n	8006086 <snipCommand+0x1fa>
 800605c:	003e      	movs	r6, r7
 800605e:	3701      	adds	r7, #1
 8006060:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8006062:	46b2      	mov	sl, r6
 8006064:	00b3      	lsls	r3, r6, #2
 8006066:	199b      	adds	r3, r3, r6
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4642      	mov	r2, r8
 800606c:	5c9b      	ldrb	r3, [r3, r2]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d000      	beq.n	8006074 <snipCommand+0x1e8>
 8006072:	e731      	b.n	8005ed8 <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <snipCommand+0x228>)
 8006076:	4699      	mov	r9, r3
 8006078:	4653      	mov	r3, sl
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4453      	add	r3, sl
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4e0b      	ldr	r6, [pc, #44]	; (80060b0 <snipCommand+0x224>)
 8006082:	18f6      	adds	r6, r6, r3
 8006084:	e7cb      	b.n	800601e <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8006086:	22a7      	movs	r2, #167	; 0xa7
 8006088:	4915      	ldr	r1, [pc, #84]	; (80060e0 <snipCommand+0x254>)
 800608a:	0020      	movs	r0, r4
 800608c:	f00d fca8 	bl	80139e0 <memcpy>
}
 8006090:	2000      	movs	r0, #0
 8006092:	b00b      	add	sp, #44	; 0x2c
 8006094:	bcf0      	pop	{r4, r5, r6, r7}
 8006096:	46bb      	mov	fp, r7
 8006098:	46b2      	mov	sl, r6
 800609a:	46a9      	mov	r9, r5
 800609c:	46a0      	mov	r8, r4
 800609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a0:	08019bd0 	.word	0x08019bd0
 80060a4:	20000a7f 	.word	0x20000a7f
 80060a8:	0801a9bc 	.word	0x0801a9bc
 80060ac:	200011e7 	.word	0x200011e7
 80060b0:	200068ec 	.word	0x200068ec
 80060b4:	20001218 	.word	0x20001218
 80060b8:	0801a9f4 	.word	0x0801a9f4
 80060bc:	0801aa14 	.word	0x0801aa14
 80060c0:	20000088 	.word	0x20000088
 80060c4:	0801c200 	.word	0x0801c200
 80060c8:	0801aa60 	.word	0x0801aa60
 80060cc:	0801aa44 	.word	0x0801aa44
 80060d0:	0801aa00 	.word	0x0801aa00
 80060d4:	0801aa2c 	.word	0x0801aa2c
 80060d8:	0801aa70 	.word	0x0801aa70
 80060dc:	0801aa78 	.word	0x0801aa78
 80060e0:	0801aa84 	.word	0x0801aa84

080060e4 <idcodeCommand>:
{	
 80060e4:	b510      	push	{r4, lr}
 80060e6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80060e8:	d00c      	beq.n	8006104 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 80060ea:	f009 fd4f 	bl	800fb8c <HAL_GetDEVID>
	switch (dev)
 80060ee:	0403      	lsls	r3, r0, #16
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <idcodeCommand+0x80>)
 80060f4:	4694      	mov	ip, r2
 80060f6:	4463      	add	r3, ip
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d82c      	bhi.n	8006156 <idcodeCommand+0x72>
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <idcodeCommand+0x84>)
 8006100:	58d3      	ldr	r3, [r2, r3]
 8006102:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8006104:	b672      	cpsid	i
 8006106:	e7fe      	b.n	8006106 <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8006108:	4a18      	ldr	r2, [pc, #96]	; (800616c <idcodeCommand+0x88>)
 800610a:	4919      	ldr	r1, [pc, #100]	; (8006170 <idcodeCommand+0x8c>)
 800610c:	0020      	movs	r0, r4
 800610e:	f00d fe65 	bl	8013ddc <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8006112:	f009 fd35 	bl	800fb80 <HAL_GetREVID>
 8006116:	0b03      	lsrs	r3, r0, #12
 8006118:	0022      	movs	r2, r4
 800611a:	4916      	ldr	r1, [pc, #88]	; (8006174 <idcodeCommand+0x90>)
 800611c:	0020      	movs	r0, r4
 800611e:	f00d fe5d 	bl	8013ddc <sprintf>
}
 8006122:	2000      	movs	r0, #0
 8006124:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 8006126:	4a14      	ldr	r2, [pc, #80]	; (8006178 <idcodeCommand+0x94>)
 8006128:	4911      	ldr	r1, [pc, #68]	; (8006170 <idcodeCommand+0x8c>)
 800612a:	0020      	movs	r0, r4
 800612c:	f00d fe56 	bl	8013ddc <sprintf>
  		break;
 8006130:	e7ef      	b.n	8006112 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <idcodeCommand+0x98>)
 8006134:	490e      	ldr	r1, [pc, #56]	; (8006170 <idcodeCommand+0x8c>)
 8006136:	0020      	movs	r0, r4
 8006138:	f00d fe50 	bl	8013ddc <sprintf>
  		break;
 800613c:	e7e9      	b.n	8006112 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <idcodeCommand+0x9c>)
 8006140:	490b      	ldr	r1, [pc, #44]	; (8006170 <idcodeCommand+0x8c>)
 8006142:	0020      	movs	r0, r4
 8006144:	f00d fe4a 	bl	8013ddc <sprintf>
  		break;
 8006148:	e7e3      	b.n	8006112 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 800614a:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <idcodeCommand+0xa0>)
 800614c:	4908      	ldr	r1, [pc, #32]	; (8006170 <idcodeCommand+0x8c>)
 800614e:	0020      	movs	r0, r4
 8006150:	f00d fe44 	bl	8013ddc <sprintf>
  		break;
 8006154:	e7dd      	b.n	8006112 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8006156:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <idcodeCommand+0xa4>)
 8006158:	4905      	ldr	r1, [pc, #20]	; (8006170 <idcodeCommand+0x8c>)
 800615a:	0020      	movs	r0, r4
 800615c:	f00d fe3e 	bl	8013ddc <sprintf>
  		break;
 8006160:	e7d7      	b.n	8006112 <idcodeCommand+0x2e>
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	fffffbc0 	.word	0xfffffbc0
 8006168:	0801ab9c 	.word	0x0801ab9c
 800616c:	0801ab2c 	.word	0x0801ab2c
 8006170:	0801ab38 	.word	0x0801ab38
 8006174:	0801ab84 	.word	0x0801ab84
 8006178:	0801ab4c 	.word	0x0801ab4c
 800617c:	0801ab58 	.word	0x0801ab58
 8006180:	0801ab64 	.word	0x0801ab64
 8006184:	0801ab70 	.word	0x0801ab70
 8006188:	0801ab7c 	.word	0x0801ab7c

0800618c <uuidCommand>:
{
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006190:	d023      	beq.n	80061da <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8006192:	220e      	movs	r2, #14
 8006194:	4912      	ldr	r1, [pc, #72]	; (80061e0 <uuidCommand+0x54>)
 8006196:	f00d fc23 	bl	80139e0 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <uuidCommand+0x58>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4d12      	ldr	r5, [pc, #72]	; (80061e8 <uuidCommand+0x5c>)
 80061a0:	0022      	movs	r2, r4
 80061a2:	0029      	movs	r1, r5
 80061a4:	0020      	movs	r0, r4
 80061a6:	f00d fe19 	bl	8013ddc <sprintf>
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <uuidCommand+0x60>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	0022      	movs	r2, r4
 80061b0:	0029      	movs	r1, r5
 80061b2:	0020      	movs	r0, r4
 80061b4:	f00d fe12 	bl	8013ddc <sprintf>
 80061b8:	4b0d      	ldr	r3, [pc, #52]	; (80061f0 <uuidCommand+0x64>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0022      	movs	r2, r4
 80061be:	0029      	movs	r1, r5
 80061c0:	0020      	movs	r0, r4
 80061c2:	f00d fe0b 	bl	8013ddc <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 80061c6:	0020      	movs	r0, r4
 80061c8:	f7f9 ffa6 	bl	8000118 <strlen>
 80061cc:	1820      	adds	r0, r4, r0
 80061ce:	2203      	movs	r2, #3
 80061d0:	4908      	ldr	r1, [pc, #32]	; (80061f4 <uuidCommand+0x68>)
 80061d2:	f00d fc05 	bl	80139e0 <memcpy>
}
 80061d6:	2000      	movs	r0, #0
 80061d8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80061da:	b672      	cpsid	i
 80061dc:	e7fe      	b.n	80061dc <uuidCommand+0x50>
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	0801abc0 	.word	0x0801abc0
 80061e4:	1ffff7ac 	.word	0x1ffff7ac
 80061e8:	0801abd0 	.word	0x0801abd0
 80061ec:	1ffff7b0 	.word	0x1ffff7b0
 80061f0:	1ffff7b4 	.word	0x1ffff7b4
 80061f4:	0801c834 	.word	0x0801c834

080061f8 <timeCommand>:
{
 80061f8:	b510      	push	{r4, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80061fe:	d00a      	beq.n	8006216 <timeCommand+0x1e>
	GetTimeDate();
 8006200:	f007 f89c 	bl	800d33c <GetTimeDate>
	if (BOS.hourformat == 24)
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <timeCommand+0x80>)
 8006206:	7b5b      	ldrb	r3, [r3, #13]
 8006208:	2b18      	cmp	r3, #24
 800620a:	d006      	beq.n	800621a <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d010      	beq.n	8006232 <timeCommand+0x3a>
}
 8006210:	2000      	movs	r0, #0
 8006212:	b004      	add	sp, #16
 8006214:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006216:	b672      	cpsid	i
 8006218:	e7fe      	b.n	8006218 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 800621a:	4917      	ldr	r1, [pc, #92]	; (8006278 <timeCommand+0x80>)
 800621c:	7c4b      	ldrb	r3, [r1, #17]
 800621e:	7c8a      	ldrb	r2, [r1, #18]
 8006220:	89c8      	ldrh	r0, [r1, #14]
 8006222:	9001      	str	r0, [sp, #4]
 8006224:	7c09      	ldrb	r1, [r1, #16]
 8006226:	9100      	str	r1, [sp, #0]
 8006228:	4914      	ldr	r1, [pc, #80]	; (800627c <timeCommand+0x84>)
 800622a:	0020      	movs	r0, r4
 800622c:	f00d fdd6 	bl	8013ddc <sprintf>
 8006230:	e7ee      	b.n	8006210 <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <timeCommand+0x80>)
 8006234:	7cdb      	ldrb	r3, [r3, #19]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d00f      	beq.n	800625a <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 800623a:	2b02      	cmp	r3, #2
 800623c:	d1e8      	bne.n	8006210 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 800623e:	490e      	ldr	r1, [pc, #56]	; (8006278 <timeCommand+0x80>)
 8006240:	7c4b      	ldrb	r3, [r1, #17]
 8006242:	7c8a      	ldrb	r2, [r1, #18]
 8006244:	480e      	ldr	r0, [pc, #56]	; (8006280 <timeCommand+0x88>)
 8006246:	9002      	str	r0, [sp, #8]
 8006248:	89c8      	ldrh	r0, [r1, #14]
 800624a:	9001      	str	r0, [sp, #4]
 800624c:	7c09      	ldrb	r1, [r1, #16]
 800624e:	9100      	str	r1, [sp, #0]
 8006250:	490c      	ldr	r1, [pc, #48]	; (8006284 <timeCommand+0x8c>)
 8006252:	0020      	movs	r0, r4
 8006254:	f00d fdc2 	bl	8013ddc <sprintf>
 8006258:	e7da      	b.n	8006210 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 800625a:	4907      	ldr	r1, [pc, #28]	; (8006278 <timeCommand+0x80>)
 800625c:	7c4b      	ldrb	r3, [r1, #17]
 800625e:	7c8a      	ldrb	r2, [r1, #18]
 8006260:	4809      	ldr	r0, [pc, #36]	; (8006288 <timeCommand+0x90>)
 8006262:	9002      	str	r0, [sp, #8]
 8006264:	89c8      	ldrh	r0, [r1, #14]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	7c09      	ldrb	r1, [r1, #16]
 800626a:	9100      	str	r1, [sp, #0]
 800626c:	4905      	ldr	r1, [pc, #20]	; (8006284 <timeCommand+0x8c>)
 800626e:	0020      	movs	r0, r4
 8006270:	f00d fdb4 	bl	8013ddc <sprintf>
 8006274:	e7cc      	b.n	8006210 <timeCommand+0x18>
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	200068d0 	.word	0x200068d0
 800627c:	0801abd8 	.word	0x0801abd8
 8006280:	0801ac30 	.word	0x0801ac30
 8006284:	0801ac00 	.word	0x0801ac00
 8006288:	0801ac2c 	.word	0x0801ac2c

0800628c <dateCommand>:
{
 800628c:	b510      	push	{r4, lr}
 800628e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006290:	d00a      	beq.n	80062a8 <dateCommand+0x1c>
	GetTimeDate();
 8006292:	f007 f853 	bl	800d33c <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8006296:	f7fe fbc5 	bl	8004a24 <GetDateString>
 800629a:	0002      	movs	r2, r0
 800629c:	4903      	ldr	r1, [pc, #12]	; (80062ac <dateCommand+0x20>)
 800629e:	0020      	movs	r0, r4
 80062a0:	f00d fd9c 	bl	8013ddc <sprintf>
}
 80062a4:	2000      	movs	r0, #0
 80062a6:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80062a8:	b672      	cpsid	i
 80062aa:	e7fe      	b.n	80062aa <dateCommand+0x1e>
 80062ac:	0801ac34 	.word	0x0801ac34

080062b0 <getCommand>:
{
 80062b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b2:	46c6      	mov	lr, r8
 80062b4:	b500      	push	{lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	0004      	movs	r4, r0
 80062ba:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d026      	beq.n	8006314 <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80062c6:	aa01      	add	r2, sp, #4
 80062c8:	2101      	movs	r1, #1
 80062ca:	0028      	movs	r0, r5
 80062cc:	f007 fcf2 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80062d0:	0006      	movs	r6, r0
 80062d2:	4b74      	ldr	r3, [pc, #464]	; (80064a4 <getCommand+0x1f4>)
 80062d4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80062d6:	2204      	movs	r2, #4
 80062d8:	4973      	ldr	r1, [pc, #460]	; (80064a8 <getCommand+0x1f8>)
 80062da:	f00d fdc2 	bl	8013e62 <strncmp>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d000      	beq.n	80062e4 <getCommand+0x34>
 80062e2:	e092      	b.n	800640a <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80062e4:	1d37      	adds	r7, r6, #4
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	1f1d      	subs	r5, r3, #4
 80062ea:	002a      	movs	r2, r5
 80062ec:	496f      	ldr	r1, [pc, #444]	; (80064ac <getCommand+0x1fc>)
 80062ee:	0038      	movs	r0, r7
 80062f0:	f00d fdb7 	bl	8013e62 <strncmp>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d121      	bne.n	800633c <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 80062f8:	4b6d      	ldr	r3, [pc, #436]	; (80064b0 <getCommand+0x200>)
 80062fa:	799b      	ldrb	r3, [r3, #6]
 80062fc:	2b60      	cmp	r3, #96	; 0x60
 80062fe:	d00b      	beq.n	8006318 <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006300:	2b20      	cmp	r3, #32
 8006302:	d00f      	beq.n	8006324 <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8006308:	0032      	movs	r2, r6
 800630a:	496a      	ldr	r1, [pc, #424]	; (80064b4 <getCommand+0x204>)
 800630c:	0020      	movs	r0, r4
 800630e:	f00d fd65 	bl	8013ddc <sprintf>
 8006312:	e086      	b.n	8006422 <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 8006314:	b672      	cpsid	i
 8006316:	e7fe      	b.n	8006316 <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8006318:	4a67      	ldr	r2, [pc, #412]	; (80064b8 <getCommand+0x208>)
 800631a:	4968      	ldr	r1, [pc, #416]	; (80064bc <getCommand+0x20c>)
 800631c:	0020      	movs	r0, r4
 800631e:	f00d fd5d 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006322:	e07e      	b.n	8006422 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006324:	4a66      	ldr	r2, [pc, #408]	; (80064c0 <getCommand+0x210>)
 8006326:	4965      	ldr	r1, [pc, #404]	; (80064bc <getCommand+0x20c>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00d fd57 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 800632e:	e078      	b.n	8006422 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8006330:	4a64      	ldr	r2, [pc, #400]	; (80064c4 <getCommand+0x214>)
 8006332:	4962      	ldr	r1, [pc, #392]	; (80064bc <getCommand+0x20c>)
 8006334:	0020      	movs	r0, r4
 8006336:	f00d fd51 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 800633a:	e072      	b.n	8006422 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 800633c:	002a      	movs	r2, r5
 800633e:	4962      	ldr	r1, [pc, #392]	; (80064c8 <getCommand+0x218>)
 8006340:	0038      	movs	r0, r7
 8006342:	f00d fd8e 	bl	8013e62 <strncmp>
 8006346:	2800      	cmp	r0, #0
 8006348:	d119      	bne.n	800637e <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 800634a:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <getCommand+0x200>)
 800634c:	79db      	ldrb	r3, [r3, #7]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d009      	beq.n	8006366 <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 8006352:	2b01      	cmp	r3, #1
 8006354:	d00d      	beq.n	8006372 <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1d6      	bne.n	8006308 <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 800635a:	4a5a      	ldr	r2, [pc, #360]	; (80064c4 <getCommand+0x214>)
 800635c:	4957      	ldr	r1, [pc, #348]	; (80064bc <getCommand+0x20c>)
 800635e:	0020      	movs	r0, r4
 8006360:	f00d fd3c 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006364:	e05d      	b.n	8006422 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8006366:	4a54      	ldr	r2, [pc, #336]	; (80064b8 <getCommand+0x208>)
 8006368:	4954      	ldr	r1, [pc, #336]	; (80064bc <getCommand+0x20c>)
 800636a:	0020      	movs	r0, r4
 800636c:	f00d fd36 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006370:	e057      	b.n	8006422 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006372:	4a53      	ldr	r2, [pc, #332]	; (80064c0 <getCommand+0x210>)
 8006374:	4951      	ldr	r1, [pc, #324]	; (80064bc <getCommand+0x20c>)
 8006376:	0020      	movs	r0, r4
 8006378:	f00d fd30 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 800637c:	e051      	b.n	8006422 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800637e:	002a      	movs	r2, r5
 8006380:	4952      	ldr	r1, [pc, #328]	; (80064cc <getCommand+0x21c>)
 8006382:	0038      	movs	r0, r7
 8006384:	f00d fd6d 	bl	8013e62 <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d022      	beq.n	80063d2 <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800638c:	002a      	movs	r2, r5
 800638e:	4950      	ldr	r1, [pc, #320]	; (80064d0 <getCommand+0x220>)
 8006390:	0038      	movs	r0, r7
 8006392:	f00d fd66 	bl	8013e62 <strncmp>
 8006396:	2800      	cmp	r0, #0
 8006398:	d022      	beq.n	80063e0 <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800639a:	002a      	movs	r2, r5
 800639c:	494d      	ldr	r1, [pc, #308]	; (80064d4 <getCommand+0x224>)
 800639e:	0038      	movs	r0, r7
 80063a0:	f00d fd5f 	bl	8013e62 <strncmp>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d022      	beq.n	80063ee <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 80063a8:	002a      	movs	r2, r5
 80063aa:	494b      	ldr	r1, [pc, #300]	; (80064d8 <getCommand+0x228>)
 80063ac:	0038      	movs	r0, r7
 80063ae:	f00d fd58 	bl	8013e62 <strncmp>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d022      	beq.n	80063fc <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80063b6:	002a      	movs	r2, r5
 80063b8:	4948      	ldr	r1, [pc, #288]	; (80064dc <getCommand+0x22c>)
 80063ba:	0038      	movs	r0, r7
 80063bc:	f00d fd51 	bl	8013e62 <strncmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d129      	bne.n	8006418 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 80063c4:	4b3a      	ldr	r3, [pc, #232]	; (80064b0 <getCommand+0x200>)
 80063c6:	795a      	ldrb	r2, [r3, #5]
 80063c8:	4945      	ldr	r1, [pc, #276]	; (80064e0 <getCommand+0x230>)
 80063ca:	0020      	movs	r0, r4
 80063cc:	f00d fd06 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063d0:	e027      	b.n	8006422 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <getCommand+0x200>)
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	4942      	ldr	r1, [pc, #264]	; (80064e0 <getCommand+0x230>)
 80063d8:	0020      	movs	r0, r4
 80063da:	f00d fcff 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063de:	e020      	b.n	8006422 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 80063e0:	4b33      	ldr	r3, [pc, #204]	; (80064b0 <getCommand+0x200>)
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	493e      	ldr	r1, [pc, #248]	; (80064e0 <getCommand+0x230>)
 80063e6:	0020      	movs	r0, r4
 80063e8:	f00d fcf8 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063ec:	e019      	b.n	8006422 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 80063ee:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <getCommand+0x200>)
 80063f0:	885a      	ldrh	r2, [r3, #2]
 80063f2:	493b      	ldr	r1, [pc, #236]	; (80064e0 <getCommand+0x230>)
 80063f4:	0020      	movs	r0, r4
 80063f6:	f00d fcf1 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063fa:	e012      	b.n	8006422 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <getCommand+0x200>)
 80063fe:	791a      	ldrb	r2, [r3, #4]
 8006400:	4937      	ldr	r1, [pc, #220]	; (80064e0 <getCommand+0x230>)
 8006402:	0020      	movs	r0, r4
 8006404:	f00d fcea 	bl	8013ddc <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006408:	e00b      	b.n	8006422 <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 800640a:	2205      	movs	r2, #5
 800640c:	4935      	ldr	r1, [pc, #212]	; (80064e4 <getCommand+0x234>)
 800640e:	0030      	movs	r0, r6
 8006410:	f00d fd27 	bl	8013e62 <strncmp>
 8006414:	2800      	cmp	r0, #0
 8006416:	d009      	beq.n	800642c <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006418:	2213      	movs	r2, #19
 800641a:	4933      	ldr	r1, [pc, #204]	; (80064e8 <getCommand+0x238>)
 800641c:	0020      	movs	r0, r4
 800641e:	f00d fadf 	bl	80139e0 <memcpy>
}
 8006422:	2000      	movs	r0, #0
 8006424:	b002      	add	sp, #8
 8006426:	bc80      	pop	{r7}
 8006428:	46b8      	mov	r8, r7
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800642c:	466a      	mov	r2, sp
 800642e:	2102      	movs	r1, #2
 8006430:	0028      	movs	r0, r5
 8006432:	f007 fc3f 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006436:	0006      	movs	r6, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8006438:	4f2c      	ldr	r7, [pc, #176]	; (80064ec <getCommand+0x23c>)
 800643a:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 800643c:	0039      	movs	r1, r7
 800643e:	0030      	movs	r0, r6
 8006440:	f7f9 fe60 	bl	8000104 <strcmp>
 8006444:	2800      	cmp	r0, #0
 8006446:	d01c      	beq.n	8006482 <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8006448:	3501      	adds	r5, #1
 800644a:	b2ed      	uxtb	r5, r5
 800644c:	370a      	adds	r7, #10
 800644e:	2d0a      	cmp	r5, #10
 8006450:	d1f4      	bne.n	800643c <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 8006452:	0032      	movs	r2, r6
 8006454:	4926      	ldr	r1, [pc, #152]	; (80064f0 <getCommand+0x240>)
 8006456:	0020      	movs	r0, r4
 8006458:	f00d fcc0 	bl	8013ddc <sprintf>
			return pdFALSE;
 800645c:	e7e1      	b.n	8006422 <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 800645e:	3501      	adds	r5, #1
 8006460:	b2ed      	uxtb	r5, r5
 8006462:	783b      	ldrb	r3, [r7, #0]
 8006464:	42ab      	cmp	r3, r5
 8006466:	d3dc      	bcc.n	8006422 <getCommand+0x172>
				if (InGroup(j, i))
 8006468:	1e6b      	subs	r3, r5, #1
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4642      	mov	r2, r8
 800646e:	5a9b      	ldrh	r3, [r3, r2]
 8006470:	421e      	tst	r6, r3
 8006472:	d0f4      	beq.n	800645e <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8006474:	002b      	movs	r3, r5
 8006476:	0022      	movs	r2, r4
 8006478:	491e      	ldr	r1, [pc, #120]	; (80064f4 <getCommand+0x244>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00d fcae 	bl	8013ddc <sprintf>
 8006480:	e7ed      	b.n	800645e <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8006482:	0032      	movs	r2, r6
 8006484:	491c      	ldr	r1, [pc, #112]	; (80064f8 <getCommand+0x248>)
 8006486:	0020      	movs	r0, r4
 8006488:	f00d fca8 	bl	8013ddc <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 800648c:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <getCommand+0x24c>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0c6      	beq.n	8006422 <getCommand+0x172>
 8006494:	2601      	movs	r6, #1
 8006496:	40ae      	lsls	r6, r5
 8006498:	2501      	movs	r5, #1
				if (InGroup(j, i))
 800649a:	4b19      	ldr	r3, [pc, #100]	; (8006500 <getCommand+0x250>)
 800649c:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 800649e:	4f17      	ldr	r7, [pc, #92]	; (80064fc <getCommand+0x24c>)
 80064a0:	e7e2      	b.n	8006468 <getCommand+0x1b8>
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	2000125c 	.word	0x2000125c
 80064a8:	0801ac4c 	.word	0x0801ac4c
 80064ac:	0801ac54 	.word	0x0801ac54
 80064b0:	200068d0 	.word	0x200068d0
 80064b4:	0801ace8 	.word	0x0801ace8
 80064b8:	08019f90 	.word	0x08019f90
 80064bc:	08019e58 	.word	0x08019e58
 80064c0:	0801ac60 	.word	0x0801ac60
 80064c4:	0801ac64 	.word	0x0801ac64
 80064c8:	0801ac6c 	.word	0x0801ac6c
 80064cc:	0801ac74 	.word	0x0801ac74
 80064d0:	0801ac80 	.word	0x0801ac80
 80064d4:	0801ac8c 	.word	0x0801ac8c
 80064d8:	0801ac9c 	.word	0x0801ac9c
 80064dc:	0801acb0 	.word	0x0801acb0
 80064e0:	0801a428 	.word	0x0801a428
 80064e4:	0801acc4 	.word	0x0801acc4
 80064e8:	0801acd4 	.word	0x0801acd4
 80064ec:	20000e2c 	.word	0x20000e2c
 80064f0:	0801ad08 	.word	0x0801ad08
 80064f4:	0801accc 	.word	0x0801accc
 80064f8:	0801ad24 	.word	0x0801ad24
 80064fc:	2000001c 	.word	0x2000001c
 8006500:	20000e90 	.word	0x20000e90

08006504 <defaultCommand>:
{
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	0004      	movs	r4, r0
 800650a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006510:	2c00      	cmp	r4, #0
 8006512:	d01a      	beq.n	800654a <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006514:	aa01      	add	r2, sp, #4
 8006516:	2101      	movs	r1, #1
 8006518:	f007 fbcc 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 800651c:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 800651e:	9e01      	ldr	r6, [sp, #4]
 8006520:	0032      	movs	r2, r6
 8006522:	491f      	ldr	r1, [pc, #124]	; (80065a0 <defaultCommand+0x9c>)
 8006524:	f00d fc9d 	bl	8013e62 <strncmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	d010      	beq.n	800654e <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 800652c:	0032      	movs	r2, r6
 800652e:	491d      	ldr	r1, [pc, #116]	; (80065a4 <defaultCommand+0xa0>)
 8006530:	0028      	movs	r0, r5
 8006532:	f00d fc96 	bl	8013e62 <strncmp>
 8006536:	2800      	cmp	r0, #0
 8006538:	d01a      	beq.n	8006570 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 800653a:	220f      	movs	r2, #15
 800653c:	491a      	ldr	r1, [pc, #104]	; (80065a8 <defaultCommand+0xa4>)
 800653e:	0020      	movs	r0, r4
 8006540:	f00d fa4e 	bl	80139e0 <memcpy>
}
 8006544:	2000      	movs	r0, #0
 8006546:	b002      	add	sp, #8
 8006548:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800654a:	b672      	cpsid	i
 800654c:	e7fe      	b.n	800654c <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 800654e:	4917      	ldr	r1, [pc, #92]	; (80065ac <defaultCommand+0xa8>)
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <defaultCommand+0xac>)
 8006552:	000a      	movs	r2, r1
 8006554:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006556:	c223      	stmia	r2!, {r0, r1, r5}
 8006558:	cb23      	ldmia	r3!, {r0, r1, r5}
 800655a:	c223      	stmia	r2!, {r0, r1, r5}
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006560:	f7fd f9a2 	bl	80038a8 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8006564:	2227      	movs	r2, #39	; 0x27
 8006566:	4913      	ldr	r1, [pc, #76]	; (80065b4 <defaultCommand+0xb0>)
 8006568:	0020      	movs	r0, r4
 800656a:	f00d fa39 	bl	80139e0 <memcpy>
	if (result == BOS_ERR_WrongValue)
 800656e:	e7e9      	b.n	8006544 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8006570:	2200      	movs	r2, #0
 8006572:	2116      	movs	r1, #22
 8006574:	20ff      	movs	r0, #255	; 0xff
 8006576:	f002 ff7b 	bl	8009470 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <defaultCommand+0xb4>)
 800657c:	2202      	movs	r2, #2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	2064      	movs	r0, #100	; 0x64
 8006582:	f007 fa70 	bl	800da66 <osDelay>
		ClearEEportsDir();
 8006586:	f7fc fed7 	bl	8003338 <ClearEEportsDir>
		ClearROtopology();
 800658a:	f004 ff47 	bl	800b41c <ClearROtopology>
		osDelay(100);
 800658e:	2064      	movs	r0, #100	; 0x64
 8006590:	f007 fa69 	bl	800da66 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8006594:	2240      	movs	r2, #64	; 0x40
 8006596:	4909      	ldr	r1, [pc, #36]	; (80065bc <defaultCommand+0xb8>)
 8006598:	0020      	movs	r0, r4
 800659a:	f00d fa21 	bl	80139e0 <memcpy>
	if (result == BOS_ERR_WrongValue)
 800659e:	e7d1      	b.n	8006544 <defaultCommand+0x40>
 80065a0:	0801ad38 	.word	0x0801ad38
 80065a4:	0801ad68 	.word	0x0801ad68
 80065a8:	0801ad70 	.word	0x0801ad70
 80065ac:	200068d0 	.word	0x200068d0
 80065b0:	20000000 	.word	0x20000000
 80065b4:	0801ad40 	.word	0x0801ad40
 80065b8:	20000ec4 	.word	0x20000ec4
 80065bc:	0801ad80 	.word	0x0801ad80

080065c0 <setCommand>:
{
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	46d6      	mov	lr, sl
 80065c4:	464f      	mov	r7, r9
 80065c6:	4646      	mov	r6, r8
 80065c8:	b5c0      	push	{r6, r7, lr}
 80065ca:	b08e      	sub	sp, #56	; 0x38
 80065cc:	4682      	mov	sl, r0
 80065ce:	0014      	movs	r4, r2
 80065d0:	2700      	movs	r7, #0
 80065d2:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 80065d4:	970d      	str	r7, [sp, #52]	; 0x34
 80065d6:	970c      	str	r7, [sp, #48]	; 0x30
 80065d8:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 80065da:	970a      	str	r7, [sp, #40]	; 0x28
 80065dc:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 80065de:	2800      	cmp	r0, #0
 80065e0:	d023      	beq.n	800662a <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065e2:	aa0d      	add	r2, sp, #52	; 0x34
 80065e4:	2101      	movs	r1, #1
 80065e6:	0020      	movs	r0, r4
 80065e8:	f007 fb64 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80065ec:	0005      	movs	r5, r0
 80065ee:	4bd6      	ldr	r3, [pc, #856]	; (8006948 <setCommand+0x388>)
 80065f0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80065f2:	2204      	movs	r2, #4
 80065f4:	49d5      	ldr	r1, [pc, #852]	; (800694c <setCommand+0x38c>)
 80065f6:	f00d fc34 	bl	8013e62 <strncmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d017      	beq.n	800662e <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80065fe:	2204      	movs	r2, #4
 8006600:	49d3      	ldr	r1, [pc, #844]	; (8006950 <setCommand+0x390>)
 8006602:	0028      	movs	r0, r5
 8006604:	f00d fc2d 	bl	8013e62 <strncmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	d100      	bne.n	800660e <setCommand+0x4e>
 800660c:	e15b      	b.n	80068c6 <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 800660e:	2204      	movs	r2, #4
 8006610:	49d0      	ldr	r1, [pc, #832]	; (8006954 <setCommand+0x394>)
 8006612:	0028      	movs	r0, r5
 8006614:	f00d fc25 	bl	8013e62 <strncmp>
 8006618:	2800      	cmp	r0, #0
 800661a:	d100      	bne.n	800661e <setCommand+0x5e>
 800661c:	e1f8      	b.n	8006a10 <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800661e:	2213      	movs	r2, #19
 8006620:	49cd      	ldr	r1, [pc, #820]	; (8006958 <setCommand+0x398>)
 8006622:	4650      	mov	r0, sl
 8006624:	f00d f9dc 	bl	80139e0 <memcpy>
 8006628:	e33c      	b.n	8006ca4 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 800662a:	b672      	cpsid	i
 800662c:	e7fe      	b.n	800662c <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800662e:	aa0c      	add	r2, sp, #48	; 0x30
 8006630:	2102      	movs	r1, #2
 8006632:	0020      	movs	r0, r4
 8006634:	f007 fb3e 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006638:	0004      	movs	r4, r0
 800663a:	4bc8      	ldr	r3, [pc, #800]	; (800695c <setCommand+0x39c>)
 800663c:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 800663e:	4bc2      	ldr	r3, [pc, #776]	; (8006948 <setCommand+0x388>)
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	3504      	adds	r5, #4
 8006644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006646:	1f1e      	subs	r6, r3, #4
 8006648:	0032      	movs	r2, r6
 800664a:	49c5      	ldr	r1, [pc, #788]	; (8006960 <setCommand+0x3a0>)
 800664c:	0028      	movs	r0, r5
 800664e:	f00d fc08 	bl	8013e62 <strncmp>
 8006652:	2800      	cmp	r0, #0
 8006654:	d150      	bne.n	80066f8 <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006658:	002a      	movs	r2, r5
 800665a:	49c2      	ldr	r1, [pc, #776]	; (8006964 <setCommand+0x3a4>)
 800665c:	0020      	movs	r0, r4
 800665e:	f00d fc00 	bl	8013e62 <strncmp>
 8006662:	2800      	cmp	r0, #0
 8006664:	d01a      	beq.n	800669c <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8006666:	002a      	movs	r2, r5
 8006668:	49bf      	ldr	r1, [pc, #764]	; (8006968 <setCommand+0x3a8>)
 800666a:	0020      	movs	r0, r4
 800666c:	f00d fbf9 	bl	8013e62 <strncmp>
 8006670:	2800      	cmp	r0, #0
 8006672:	d01f      	beq.n	80066b4 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8006674:	002a      	movs	r2, r5
 8006676:	49bd      	ldr	r1, [pc, #756]	; (800696c <setCommand+0x3ac>)
 8006678:	0020      	movs	r0, r4
 800667a:	f00d fbf2 	bl	8013e62 <strncmp>
 800667e:	2800      	cmp	r0, #0
 8006680:	d024      	beq.n	80066cc <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006682:	002a      	movs	r2, r5
 8006684:	49ba      	ldr	r1, [pc, #744]	; (8006970 <setCommand+0x3b0>)
 8006686:	0020      	movs	r0, r4
 8006688:	f00d fbeb 	bl	8013e62 <strncmp>
 800668c:	2800      	cmp	r0, #0
 800668e:	d029      	beq.n	80066e4 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006690:	220f      	movs	r2, #15
 8006692:	49b8      	ldr	r1, [pc, #736]	; (8006974 <setCommand+0x3b4>)
 8006694:	4650      	mov	r0, sl
 8006696:	f00d f9a3 	bl	80139e0 <memcpy>
 800669a:	e303      	b.n	8006ca4 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 800669c:	4bb6      	ldr	r3, [pc, #728]	; (8006978 <setCommand+0x3b8>)
 800669e:	2260      	movs	r2, #96	; 0x60
 80066a0:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066a2:	79d9      	ldrb	r1, [r3, #7]
 80066a4:	0209      	lsls	r1, r1, #8
 80066a6:	2360      	movs	r3, #96	; 0x60
 80066a8:	4319      	orrs	r1, r3
 80066aa:	308a      	adds	r0, #138	; 0x8a
 80066ac:	0040      	lsls	r0, r0, #1
 80066ae:	f001 f9db 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 80066b2:	e1a1      	b.n	80069f8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 80066b4:	4bb0      	ldr	r3, [pc, #704]	; (8006978 <setCommand+0x3b8>)
 80066b6:	2220      	movs	r2, #32
 80066b8:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066ba:	79d9      	ldrb	r1, [r3, #7]
 80066bc:	0209      	lsls	r1, r1, #8
 80066be:	2320      	movs	r3, #32
 80066c0:	4319      	orrs	r1, r3
 80066c2:	308a      	adds	r0, #138	; 0x8a
 80066c4:	0040      	lsls	r0, r0, #1
 80066c6:	f001 f9cf 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 80066ca:	e195      	b.n	80069f8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 80066cc:	4baa      	ldr	r3, [pc, #680]	; (8006978 <setCommand+0x3b8>)
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066d2:	79d9      	ldrb	r1, [r3, #7]
 80066d4:	0209      	lsls	r1, r1, #8
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	4319      	orrs	r1, r3
 80066da:	308a      	adds	r0, #138	; 0x8a
 80066dc:	0040      	lsls	r0, r0, #1
 80066de:	f001 f9c3 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 80066e2:	e189      	b.n	80069f8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 80066e4:	4ba4      	ldr	r3, [pc, #656]	; (8006978 <setCommand+0x3b8>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066ea:	79d9      	ldrb	r1, [r3, #7]
 80066ec:	0209      	lsls	r1, r1, #8
 80066ee:	308a      	adds	r0, #138	; 0x8a
 80066f0:	0040      	lsls	r0, r0, #1
 80066f2:	f001 f9b9 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 80066f6:	e17f      	b.n	80069f8 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80066f8:	0032      	movs	r2, r6
 80066fa:	49a0      	ldr	r1, [pc, #640]	; (800697c <setCommand+0x3bc>)
 80066fc:	0028      	movs	r0, r5
 80066fe:	f00d fbb0 	bl	8013e62 <strncmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	d149      	bne.n	800679a <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006708:	002a      	movs	r2, r5
 800670a:	4996      	ldr	r1, [pc, #600]	; (8006964 <setCommand+0x3a4>)
 800670c:	0020      	movs	r0, r4
 800670e:	f00d fba8 	bl	8013e62 <strncmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	d01d      	beq.n	8006752 <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8006716:	002a      	movs	r2, r5
 8006718:	4993      	ldr	r1, [pc, #588]	; (8006968 <setCommand+0x3a8>)
 800671a:	0020      	movs	r0, r4
 800671c:	f00d fba1 	bl	8013e62 <strncmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	d022      	beq.n	800676a <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8006724:	002a      	movs	r2, r5
 8006726:	498e      	ldr	r1, [pc, #568]	; (8006960 <setCommand+0x3a0>)
 8006728:	0020      	movs	r0, r4
 800672a:	f00d fb9a 	bl	8013e62 <strncmp>
 800672e:	2800      	cmp	r0, #0
 8006730:	d027      	beq.n	8006782 <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006732:	002a      	movs	r2, r5
 8006734:	498e      	ldr	r1, [pc, #568]	; (8006970 <setCommand+0x3b0>)
 8006736:	0020      	movs	r0, r4
 8006738:	f00d fb93 	bl	8013e62 <strncmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	d1a7      	bne.n	8006690 <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 8006740:	4b8d      	ldr	r3, [pc, #564]	; (8006978 <setCommand+0x3b8>)
 8006742:	2200      	movs	r2, #0
 8006744:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006746:	7999      	ldrb	r1, [r3, #6]
 8006748:	308a      	adds	r0, #138	; 0x8a
 800674a:	0040      	lsls	r0, r0, #1
 800674c:	f001 f98c 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006750:	e152      	b.n	80069f8 <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 8006752:	4b89      	ldr	r3, [pc, #548]	; (8006978 <setCommand+0x3b8>)
 8006754:	2203      	movs	r2, #3
 8006756:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006758:	799b      	ldrb	r3, [r3, #6]
 800675a:	21c0      	movs	r1, #192	; 0xc0
 800675c:	0089      	lsls	r1, r1, #2
 800675e:	4319      	orrs	r1, r3
 8006760:	308a      	adds	r0, #138	; 0x8a
 8006762:	0040      	lsls	r0, r0, #1
 8006764:	f001 f980 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006768:	e146      	b.n	80069f8 <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 800676a:	4b83      	ldr	r3, [pc, #524]	; (8006978 <setCommand+0x3b8>)
 800676c:	2201      	movs	r2, #1
 800676e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006770:	799b      	ldrb	r3, [r3, #6]
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	0049      	lsls	r1, r1, #1
 8006776:	4319      	orrs	r1, r3
 8006778:	308a      	adds	r0, #138	; 0x8a
 800677a:	0040      	lsls	r0, r0, #1
 800677c:	f001 f974 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006780:	e13a      	b.n	80069f8 <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 8006782:	4b7d      	ldr	r3, [pc, #500]	; (8006978 <setCommand+0x3b8>)
 8006784:	2202      	movs	r2, #2
 8006786:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006788:	799b      	ldrb	r3, [r3, #6]
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	0089      	lsls	r1, r1, #2
 800678e:	4319      	orrs	r1, r3
 8006790:	308a      	adds	r0, #138	; 0x8a
 8006792:	0040      	lsls	r0, r0, #1
 8006794:	f001 f968 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006798:	e12e      	b.n	80069f8 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800679a:	0032      	movs	r2, r6
 800679c:	4978      	ldr	r1, [pc, #480]	; (8006980 <setCommand+0x3c0>)
 800679e:	0028      	movs	r0, r5
 80067a0:	f00d fb5f 	bl	8013e62 <strncmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d02f      	beq.n	8006808 <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80067a8:	0032      	movs	r2, r6
 80067aa:	4976      	ldr	r1, [pc, #472]	; (8006984 <setCommand+0x3c4>)
 80067ac:	0028      	movs	r0, r5
 80067ae:	f00d fb58 	bl	8013e62 <strncmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d058      	beq.n	8006868 <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 80067b6:	0032      	movs	r2, r6
 80067b8:	4973      	ldr	r1, [pc, #460]	; (8006988 <setCommand+0x3c8>)
 80067ba:	0028      	movs	r0, r5
 80067bc:	f00d fb51 	bl	8013e62 <strncmp>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d05f      	beq.n	8006884 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 80067c4:	0032      	movs	r2, r6
 80067c6:	4971      	ldr	r1, [pc, #452]	; (800698c <setCommand+0x3cc>)
 80067c8:	0028      	movs	r0, r5
 80067ca:	f00d fb4a 	bl	8013e62 <strncmp>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d066      	beq.n	80068a0 <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80067d2:	0032      	movs	r2, r6
 80067d4:	496e      	ldr	r1, [pc, #440]	; (8006990 <setCommand+0x3d0>)
 80067d6:	0028      	movs	r0, r5
 80067d8:	f00d fb43 	bl	8013e62 <strncmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d000      	beq.n	80067e2 <setCommand+0x222>
 80067e0:	e71d      	b.n	800661e <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fe95 	bl	8013512 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 80067e8:	1e43      	subs	r3, r0, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2bfe      	cmp	r3, #254	; 0xfe
 80067ee:	d900      	bls.n	80067f2 <setCommand+0x232>
 80067f0:	e74e      	b.n	8006690 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 80067f2:	4b61      	ldr	r3, [pc, #388]	; (8006978 <setCommand+0x3b8>)
 80067f4:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80067f6:	0200      	lsls	r0, r0, #8
 80067f8:	7919      	ldrb	r1, [r3, #4]
 80067fa:	4301      	orrs	r1, r0
 80067fc:	b289      	uxth	r1, r1
 80067fe:	2018      	movs	r0, #24
 8006800:	30ff      	adds	r0, #255	; 0xff
 8006802:	f001 f931 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006806:	e0f7      	b.n	80069f8 <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 8006808:	0020      	movs	r0, r4
 800680a:	f00c fe82 	bl	8013512 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 800680e:	23e1      	movs	r3, #225	; 0xe1
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	4298      	cmp	r0, r3
 8006814:	d900      	bls.n	8006818 <setCommand+0x258>
 8006816:	e73b      	b.n	8006690 <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 8006818:	4c57      	ldr	r4, [pc, #348]	; (8006978 <setCommand+0x3b8>)
 800681a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 800681c:	b281      	uxth	r1, r0
 800681e:	208c      	movs	r0, #140	; 0x8c
 8006820:	0040      	lsls	r0, r0, #1
 8006822:	f001 f921 	bl	8007a68 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8006826:	8961      	ldrh	r1, [r4, #10]
 8006828:	201a      	movs	r0, #26
 800682a:	30ff      	adds	r0, #255	; 0xff
 800682c:	f001 f91c 	bl	8007a68 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006830:	4b45      	ldr	r3, [pc, #276]	; (8006948 <setCommand+0x388>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006838:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800683a:	4b48      	ldr	r3, [pc, #288]	; (800695c <setCommand+0x39c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4955      	ldr	r1, [pc, #340]	; (8006994 <setCommand+0x3d4>)
 8006840:	4650      	mov	r0, sl
 8006842:	f00d facb 	bl	8013ddc <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8006846:	4650      	mov	r0, sl
 8006848:	f7f9 fc66 	bl	8000118 <strlen>
 800684c:	4450      	add	r0, sl
 800684e:	2230      	movs	r2, #48	; 0x30
 8006850:	4951      	ldr	r1, [pc, #324]	; (8006998 <setCommand+0x3d8>)
 8006852:	f00d f8c5 	bl	80139e0 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8006856:	4650      	mov	r0, sl
 8006858:	f7f9 fc5e 	bl	8000118 <strlen>
 800685c:	4450      	add	r0, sl
 800685e:	22a3      	movs	r2, #163	; 0xa3
 8006860:	494e      	ldr	r1, [pc, #312]	; (800699c <setCommand+0x3dc>)
 8006862:	f00d f8bd 	bl	80139e0 <memcpy>
 8006866:	e21d      	b.n	8006ca4 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 8006868:	0020      	movs	r0, r4
 800686a:	f00c fe52 	bl	8013512 <atoi>
 800686e:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006870:	2900      	cmp	r1, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x2b6>
 8006874:	e70c      	b.n	8006690 <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 8006876:	4b40      	ldr	r3, [pc, #256]	; (8006978 <setCommand+0x3b8>)
 8006878:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 800687a:	2016      	movs	r0, #22
 800687c:	30ff      	adds	r0, #255	; 0xff
 800687e:	f001 f8f3 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006882:	e0b9      	b.n	80069f8 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8006884:	0020      	movs	r0, r4
 8006886:	f00c fe44 	bl	8013512 <atoi>
 800688a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 800688c:	2900      	cmp	r1, #0
 800688e:	d100      	bne.n	8006892 <setCommand+0x2d2>
 8006890:	e6fe      	b.n	8006690 <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 8006892:	4b39      	ldr	r3, [pc, #228]	; (8006978 <setCommand+0x3b8>)
 8006894:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8006896:	208b      	movs	r0, #139	; 0x8b
 8006898:	0040      	lsls	r0, r0, #1
 800689a:	f001 f8e5 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 800689e:	e0ab      	b.n	80069f8 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 80068a0:	0020      	movs	r0, r4
 80068a2:	f00c fe36 	bl	8013512 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 80068a6:	1e43      	subs	r3, r0, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2bfe      	cmp	r3, #254	; 0xfe
 80068ac:	d900      	bls.n	80068b0 <setCommand+0x2f0>
 80068ae:	e6ef      	b.n	8006690 <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 80068b0:	b2c0      	uxtb	r0, r0
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <setCommand+0x3b8>)
 80068b4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80068b6:	7959      	ldrb	r1, [r3, #5]
 80068b8:	0209      	lsls	r1, r1, #8
 80068ba:	4301      	orrs	r1, r0
 80068bc:	2018      	movs	r0, #24
 80068be:	30ff      	adds	r0, #255	; 0xff
 80068c0:	f001 f8d2 	bl	8007a68 <EE_WriteVariable>
	if (result == BOS_OK) 
 80068c4:	e098      	b.n	80069f8 <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80068c6:	aa0c      	add	r2, sp, #48	; 0x30
 80068c8:	2102      	movs	r1, #2
 80068ca:	0020      	movs	r0, r4
 80068cc:	f007 f9f2 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80068d0:	4b22      	ldr	r3, [pc, #136]	; (800695c <setCommand+0x39c>)
 80068d2:	4698      	mov	r8, r3
 80068d4:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80068d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80068d8:	2103      	movs	r1, #3
 80068da:	0020      	movs	r0, r4
 80068dc:	f007 f9ea 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80068e0:	4d2f      	ldr	r5, [pc, #188]	; (80069a0 <setCommand+0x3e0>)
 80068e2:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80068e4:	aa0a      	add	r2, sp, #40	; 0x28
 80068e6:	2104      	movs	r1, #4
 80068e8:	0020      	movs	r0, r4
 80068ea:	f007 f9e3 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80068ee:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <setCommand+0x3e4>)
 80068f0:	4699      	mov	r9, r3
 80068f2:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80068f4:	aa09      	add	r2, sp, #36	; 0x24
 80068f6:	2105      	movs	r1, #5
 80068f8:	0020      	movs	r0, r4
 80068fa:	f007 f9db 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80068fe:	4f2a      	ldr	r7, [pc, #168]	; (80069a8 <setCommand+0x3e8>)
 8006900:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006902:	4643      	mov	r3, r8
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f00c fe04 	bl	8013512 <atoi>
 800690a:	b2c3      	uxtb	r3, r0
 800690c:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800690e:	6828      	ldr	r0, [r5, #0]
 8006910:	f00c fdff 	bl	8013512 <atoi>
 8006914:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006916:	464b      	mov	r3, r9
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	f00c fdfa 	bl	8013512 <atoi>
 800691e:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 8006920:	683f      	ldr	r7, [r7, #0]
 8006922:	2f00      	cmp	r7, #0
 8006924:	d047      	beq.n	80069b6 <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006926:	2202      	movs	r2, #2
 8006928:	4920      	ldr	r1, [pc, #128]	; (80069ac <setCommand+0x3ec>)
 800692a:	0038      	movs	r0, r7
 800692c:	f00d fa99 	bl	8013e62 <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d03f      	beq.n	80069b4 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006934:	2202      	movs	r2, #2
 8006936:	491e      	ldr	r1, [pc, #120]	; (80069b0 <setCommand+0x3f0>)
 8006938:	0038      	movs	r0, r7
 800693a:	f00d fa92 	bl	8013e62 <strncmp>
				temp84 = RTC_PM;
 800693e:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006940:	2800      	cmp	r0, #0
 8006942:	d038      	beq.n	80069b6 <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 8006944:	2668      	movs	r6, #104	; 0x68
 8006946:	e1aa      	b.n	8006c9e <setCommand+0x6de>
 8006948:	20001258 	.word	0x20001258
 800694c:	0801ac4c 	.word	0x0801ac4c
 8006950:	0801aeb4 	.word	0x0801aeb4
 8006954:	0801aec4 	.word	0x0801aec4
 8006958:	0801acd4 	.word	0x0801acd4
 800695c:	20001264 	.word	0x20001264
 8006960:	0801ac54 	.word	0x0801ac54
 8006964:	08019f90 	.word	0x08019f90
 8006968:	0801adc0 	.word	0x0801adc0
 800696c:	0801adc8 	.word	0x0801adc8
 8006970:	0801ac64 	.word	0x0801ac64
 8006974:	0801ad70 	.word	0x0801ad70
 8006978:	200068d0 	.word	0x200068d0
 800697c:	0801ac6c 	.word	0x0801ac6c
 8006980:	0801ac74 	.word	0x0801ac74
 8006984:	0801ac80 	.word	0x0801ac80
 8006988:	0801ac8c 	.word	0x0801ac8c
 800698c:	0801ac9c 	.word	0x0801ac9c
 8006990:	0801acb0 	.word	0x0801acb0
 8006994:	0801adcc 	.word	0x0801adcc
 8006998:	0801ade0 	.word	0x0801ade0
 800699c:	0801ae10 	.word	0x0801ae10
 80069a0:	2000126c 	.word	0x2000126c
 80069a4:	20001270 	.word	0x20001270
 80069a8:	20001274 	.word	0x20001274
 80069ac:	0801aebc 	.word	0x0801aebc
 80069b0:	0801aec0 	.word	0x0801aec0
				temp84 = RTC_AM;
 80069b4:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80069b6:	4643      	mov	r3, r8
 80069b8:	2b17      	cmp	r3, #23
 80069ba:	d900      	bls.n	80069be <setCommand+0x3fe>
 80069bc:	e668      	b.n	8006690 <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 80069be:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80069c0:	2d3b      	cmp	r5, #59	; 0x3b
 80069c2:	d900      	bls.n	80069c6 <setCommand+0x406>
 80069c4:	e664      	b.n	8006690 <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 80069c6:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80069c8:	2c3b      	cmp	r4, #59	; 0x3b
 80069ca:	d900      	bls.n	80069ce <setCommand+0x40e>
 80069cc:	e660      	b.n	8006690 <setCommand+0xd0>
				GetTimeDate();				
 80069ce:	f006 fcb5 	bl	800d33c <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 80069d2:	4fb8      	ldr	r7, [pc, #736]	; (8006cb4 <setCommand+0x6f4>)
 80069d4:	7d3b      	ldrb	r3, [r7, #20]
 80069d6:	8b3a      	ldrh	r2, [r7, #24]
 80069d8:	7d79      	ldrb	r1, [r7, #21]
 80069da:	7db8      	ldrb	r0, [r7, #22]
 80069dc:	7b3f      	ldrb	r7, [r7, #12]
 80069de:	b27f      	sxtb	r7, r7
 80069e0:	9704      	str	r7, [sp, #16]
 80069e2:	9603      	str	r6, [sp, #12]
 80069e4:	4646      	mov	r6, r8
 80069e6:	9602      	str	r6, [sp, #8]
 80069e8:	9501      	str	r5, [sp, #4]
 80069ea:	9400      	str	r4, [sp, #0]
 80069ec:	f006 fc4c 	bl	800d288 <BOS_CalendarConfig>
 80069f0:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	d000      	beq.n	80069f8 <setCommand+0x438>
 80069f6:	e14f      	b.n	8006c98 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80069f8:	4baf      	ldr	r3, [pc, #700]	; (8006cb8 <setCommand+0x6f8>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	2300      	movs	r3, #0
 80069fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a00:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8006a02:	4bae      	ldr	r3, [pc, #696]	; (8006cbc <setCommand+0x6fc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	49ae      	ldr	r1, [pc, #696]	; (8006cc0 <setCommand+0x700>)
 8006a08:	4650      	mov	r0, sl
 8006a0a:	f00d f9e7 	bl	8013ddc <sprintf>
	return pdFALSE;
 8006a0e:	e149      	b.n	8006ca4 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006a10:	aa0c      	add	r2, sp, #48	; 0x30
 8006a12:	2102      	movs	r1, #2
 8006a14:	0020      	movs	r0, r4
 8006a16:	f007 f94d 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006a1a:	4da8      	ldr	r5, [pc, #672]	; (8006cbc <setCommand+0x6fc>)
 8006a1c:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a20:	2103      	movs	r1, #3
 8006a22:	0020      	movs	r0, r4
 8006a24:	f007 f946 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006a28:	4ba6      	ldr	r3, [pc, #664]	; (8006cc4 <setCommand+0x704>)
 8006a2a:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006a2c:	aa0a      	add	r2, sp, #40	; 0x28
 8006a2e:	2104      	movs	r1, #4
 8006a30:	0020      	movs	r0, r4
 8006a32:	f007 f93f 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006a36:	4ea4      	ldr	r6, [pc, #656]	; (8006cc8 <setCommand+0x708>)
 8006a38:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006a3a:	aa09      	add	r2, sp, #36	; 0x24
 8006a3c:	2105      	movs	r1, #5
 8006a3e:	0020      	movs	r0, r4
 8006a40:	f007 f938 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006a44:	4ca1      	ldr	r4, [pc, #644]	; (8006ccc <setCommand+0x70c>)
 8006a46:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006a48:	6830      	ldr	r0, [r6, #0]
 8006a4a:	f00c fd62 	bl	8013512 <atoi>
 8006a4e:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	f00c fd5e 	bl	8013512 <atoi>
 8006a56:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006a58:	682c      	ldr	r4, [r5, #0]
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	499c      	ldr	r1, [pc, #624]	; (8006cd0 <setCommand+0x710>)
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f00d f9ff 	bl	8013e62 <strncmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d100      	bne.n	8006a6a <setCommand+0x4aa>
 8006a68:	e170      	b.n	8006d4c <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	4999      	ldr	r1, [pc, #612]	; (8006cd4 <setCommand+0x714>)
 8006a6e:	0020      	movs	r0, r4
 8006a70:	f00d f9f7 	bl	8013e62 <strncmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d100      	bne.n	8006a7a <setCommand+0x4ba>
 8006a78:	e199      	b.n	8006dae <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8006a7a:	2209      	movs	r2, #9
 8006a7c:	4996      	ldr	r1, [pc, #600]	; (8006cd8 <setCommand+0x718>)
 8006a7e:	0020      	movs	r0, r4
 8006a80:	f00d f9ef 	bl	8013e62 <strncmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d100      	bne.n	8006a8a <setCommand+0x4ca>
 8006a88:	e193      	b.n	8006db2 <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4993      	ldr	r1, [pc, #588]	; (8006cdc <setCommand+0x71c>)
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f00d f9e7 	bl	8013e62 <strncmp>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d100      	bne.n	8006a9a <setCommand+0x4da>
 8006a98:	e18d      	b.n	8006db6 <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006a9a:	2206      	movs	r2, #6
 8006a9c:	4990      	ldr	r1, [pc, #576]	; (8006ce0 <setCommand+0x720>)
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	f00d f9df 	bl	8013e62 <strncmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d100      	bne.n	8006aaa <setCommand+0x4ea>
 8006aa8:	e187      	b.n	8006dba <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8006aaa:	2208      	movs	r2, #8
 8006aac:	498d      	ldr	r1, [pc, #564]	; (8006ce4 <setCommand+0x724>)
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f00d f9d7 	bl	8013e62 <strncmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d100      	bne.n	8006aba <setCommand+0x4fa>
 8006ab8:	e181      	b.n	8006dbe <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8006aba:	2206      	movs	r2, #6
 8006abc:	498a      	ldr	r1, [pc, #552]	; (8006ce8 <setCommand+0x728>)
 8006abe:	0020      	movs	r0, r4
 8006ac0:	f00d f9cf 	bl	8013e62 <strncmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d100      	bne.n	8006aca <setCommand+0x50a>
 8006ac8:	e17b      	b.n	8006dc2 <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006aca:	4b7e      	ldr	r3, [pc, #504]	; (8006cc4 <setCommand+0x704>)
 8006acc:	681c      	ldr	r4, [r3, #0]
 8006ace:	2207      	movs	r2, #7
 8006ad0:	4986      	ldr	r1, [pc, #536]	; (8006cec <setCommand+0x72c>)
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f00d f9c5 	bl	8013e62 <strncmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d100      	bne.n	8006ade <setCommand+0x51e>
 8006adc:	e0ab      	b.n	8006c36 <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 8006ade:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	4983      	ldr	r1, [pc, #524]	; (8006cf0 <setCommand+0x730>)
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	f00d f9bc 	bl	8013e62 <strncmp>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d100      	bne.n	8006af0 <setCommand+0x530>
 8006aee:	e0a5      	b.n	8006c3c <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006af0:	2208      	movs	r2, #8
 8006af2:	4980      	ldr	r1, [pc, #512]	; (8006cf4 <setCommand+0x734>)
 8006af4:	0020      	movs	r0, r4
 8006af6:	f00d f9b4 	bl	8013e62 <strncmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d100      	bne.n	8006b00 <setCommand+0x540>
 8006afe:	e0a1      	b.n	8006c44 <setCommand+0x684>
 8006b00:	2202      	movs	r2, #2
 8006b02:	497d      	ldr	r1, [pc, #500]	; (8006cf8 <setCommand+0x738>)
 8006b04:	0020      	movs	r0, r4
 8006b06:	f00d f9ac 	bl	8013e62 <strncmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d100      	bne.n	8006b10 <setCommand+0x550>
 8006b0e:	e09b      	b.n	8006c48 <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006b10:	2205      	movs	r2, #5
 8006b12:	497a      	ldr	r1, [pc, #488]	; (8006cfc <setCommand+0x73c>)
 8006b14:	0020      	movs	r0, r4
 8006b16:	f00d f9a4 	bl	8013e62 <strncmp>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d100      	bne.n	8006b20 <setCommand+0x560>
 8006b1e:	e095      	b.n	8006c4c <setCommand+0x68c>
 8006b20:	2202      	movs	r2, #2
 8006b22:	4977      	ldr	r1, [pc, #476]	; (8006d00 <setCommand+0x740>)
 8006b24:	0020      	movs	r0, r4
 8006b26:	f00d f99c 	bl	8013e62 <strncmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d100      	bne.n	8006b30 <setCommand+0x570>
 8006b2e:	e08f      	b.n	8006c50 <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8006b30:	2205      	movs	r2, #5
 8006b32:	4974      	ldr	r1, [pc, #464]	; (8006d04 <setCommand+0x744>)
 8006b34:	0020      	movs	r0, r4
 8006b36:	f00d f994 	bl	8013e62 <strncmp>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d100      	bne.n	8006b40 <setCommand+0x580>
 8006b3e:	e089      	b.n	8006c54 <setCommand+0x694>
 8006b40:	2202      	movs	r2, #2
 8006b42:	4971      	ldr	r1, [pc, #452]	; (8006d08 <setCommand+0x748>)
 8006b44:	0020      	movs	r0, r4
 8006b46:	f00d f98c 	bl	8013e62 <strncmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d100      	bne.n	8006b50 <setCommand+0x590>
 8006b4e:	e083      	b.n	8006c58 <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006b50:	2203      	movs	r2, #3
 8006b52:	496e      	ldr	r1, [pc, #440]	; (8006d0c <setCommand+0x74c>)
 8006b54:	0020      	movs	r0, r4
 8006b56:	f00d f984 	bl	8013e62 <strncmp>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d07e      	beq.n	8006c5c <setCommand+0x69c>
 8006b5e:	2202      	movs	r2, #2
 8006b60:	496b      	ldr	r1, [pc, #428]	; (8006d10 <setCommand+0x750>)
 8006b62:	0020      	movs	r0, r4
 8006b64:	f00d f97d 	bl	8013e62 <strncmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d079      	beq.n	8006c60 <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	4969      	ldr	r1, [pc, #420]	; (8006d14 <setCommand+0x754>)
 8006b70:	0020      	movs	r0, r4
 8006b72:	f00d f976 	bl	8013e62 <strncmp>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d074      	beq.n	8006c64 <setCommand+0x6a4>
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	4966      	ldr	r1, [pc, #408]	; (8006d18 <setCommand+0x758>)
 8006b7e:	0020      	movs	r0, r4
 8006b80:	f00d f96f 	bl	8013e62 <strncmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d06f      	beq.n	8006c68 <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006b88:	2204      	movs	r2, #4
 8006b8a:	4964      	ldr	r1, [pc, #400]	; (8006d1c <setCommand+0x75c>)
 8006b8c:	0020      	movs	r0, r4
 8006b8e:	f00d f968 	bl	8013e62 <strncmp>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d06a      	beq.n	8006c6c <setCommand+0x6ac>
 8006b96:	2202      	movs	r2, #2
 8006b98:	4961      	ldr	r1, [pc, #388]	; (8006d20 <setCommand+0x760>)
 8006b9a:	0020      	movs	r0, r4
 8006b9c:	f00d f961 	bl	8013e62 <strncmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d065      	beq.n	8006c70 <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006ba4:	2205      	movs	r2, #5
 8006ba6:	495f      	ldr	r1, [pc, #380]	; (8006d24 <setCommand+0x764>)
 8006ba8:	0020      	movs	r0, r4
 8006baa:	f00d f95a 	bl	8013e62 <strncmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d060      	beq.n	8006c74 <setCommand+0x6b4>
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	495c      	ldr	r1, [pc, #368]	; (8006d28 <setCommand+0x768>)
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	f00d f953 	bl	8013e62 <strncmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d05b      	beq.n	8006c78 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006bc0:	2209      	movs	r2, #9
 8006bc2:	495a      	ldr	r1, [pc, #360]	; (8006d2c <setCommand+0x76c>)
 8006bc4:	0020      	movs	r0, r4
 8006bc6:	f00d f94c 	bl	8013e62 <strncmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d056      	beq.n	8006c7c <setCommand+0x6bc>
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4957      	ldr	r1, [pc, #348]	; (8006d30 <setCommand+0x770>)
 8006bd2:	0020      	movs	r0, r4
 8006bd4:	f00d f945 	bl	8013e62 <strncmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d051      	beq.n	8006c80 <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006bdc:	2207      	movs	r2, #7
 8006bde:	4955      	ldr	r1, [pc, #340]	; (8006d34 <setCommand+0x774>)
 8006be0:	0020      	movs	r0, r4
 8006be2:	f00d f93e 	bl	8013e62 <strncmp>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d04c      	beq.n	8006c84 <setCommand+0x6c4>
 8006bea:	2202      	movs	r2, #2
 8006bec:	4952      	ldr	r1, [pc, #328]	; (8006d38 <setCommand+0x778>)
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f00d f937 	bl	8013e62 <strncmp>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d047      	beq.n	8006c88 <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4950      	ldr	r1, [pc, #320]	; (8006d3c <setCommand+0x77c>)
 8006bfc:	0020      	movs	r0, r4
 8006bfe:	f00d f930 	bl	8013e62 <strncmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d042      	beq.n	8006c8c <setCommand+0x6cc>
 8006c06:	2202      	movs	r2, #2
 8006c08:	494d      	ldr	r1, [pc, #308]	; (8006d40 <setCommand+0x780>)
 8006c0a:	0020      	movs	r0, r4
 8006c0c:	f00d f929 	bl	8013e62 <strncmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d03d      	beq.n	8006c90 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c14:	2208      	movs	r2, #8
 8006c16:	494b      	ldr	r1, [pc, #300]	; (8006d44 <setCommand+0x784>)
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f00d f922 	bl	8013e62 <strncmp>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d038      	beq.n	8006c94 <setCommand+0x6d4>
 8006c22:	2202      	movs	r2, #2
 8006c24:	4948      	ldr	r1, [pc, #288]	; (8006d48 <setCommand+0x788>)
 8006c26:	0020      	movs	r0, r4
 8006c28:	f00d f91b 	bl	8013e62 <strncmp>
			temp82 = DECEMBER;
 8006c2c:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d005      	beq.n	8006c3e <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 8006c32:	2668      	movs	r6, #104	; 0x68
	else if (result == BOS_ERR_WrongParam)
 8006c34:	e033      	b.n	8006c9e <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 8006c36:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 8006c38:	2501      	movs	r5, #1
 8006c3a:	e000      	b.n	8006c3e <setCommand+0x67e>
 8006c3c:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d12d      	bne.n	8006c9e <setCommand+0x6de>
 8006c42:	e090      	b.n	8006d66 <setCommand+0x7a6>
			temp82 = FEBRUARY;
 8006c44:	2502      	movs	r5, #2
 8006c46:	e7fa      	b.n	8006c3e <setCommand+0x67e>
 8006c48:	2502      	movs	r5, #2
 8006c4a:	e7f8      	b.n	8006c3e <setCommand+0x67e>
			temp82 = MARCH;
 8006c4c:	2503      	movs	r5, #3
 8006c4e:	e7f6      	b.n	8006c3e <setCommand+0x67e>
 8006c50:	2503      	movs	r5, #3
 8006c52:	e7f4      	b.n	8006c3e <setCommand+0x67e>
			temp82 = APRIL;
 8006c54:	2504      	movs	r5, #4
 8006c56:	e7f2      	b.n	8006c3e <setCommand+0x67e>
 8006c58:	2504      	movs	r5, #4
 8006c5a:	e7f0      	b.n	8006c3e <setCommand+0x67e>
			temp82 = MAY;
 8006c5c:	2505      	movs	r5, #5
 8006c5e:	e7ee      	b.n	8006c3e <setCommand+0x67e>
 8006c60:	2505      	movs	r5, #5
 8006c62:	e7ec      	b.n	8006c3e <setCommand+0x67e>
			temp82 = JUNE;
 8006c64:	2506      	movs	r5, #6
 8006c66:	e7ea      	b.n	8006c3e <setCommand+0x67e>
 8006c68:	2506      	movs	r5, #6
 8006c6a:	e7e8      	b.n	8006c3e <setCommand+0x67e>
			temp82 = JULY;
 8006c6c:	2507      	movs	r5, #7
 8006c6e:	e7e6      	b.n	8006c3e <setCommand+0x67e>
 8006c70:	2507      	movs	r5, #7
 8006c72:	e7e4      	b.n	8006c3e <setCommand+0x67e>
			temp82 = AUGUST;
 8006c74:	2508      	movs	r5, #8
 8006c76:	e7e2      	b.n	8006c3e <setCommand+0x67e>
 8006c78:	2508      	movs	r5, #8
 8006c7a:	e7e0      	b.n	8006c3e <setCommand+0x67e>
			temp82 = SEPTEMBER;
 8006c7c:	2509      	movs	r5, #9
 8006c7e:	e7de      	b.n	8006c3e <setCommand+0x67e>
 8006c80:	2509      	movs	r5, #9
 8006c82:	e7dc      	b.n	8006c3e <setCommand+0x67e>
			temp82 = OCTOBER;
 8006c84:	250a      	movs	r5, #10
 8006c86:	e7da      	b.n	8006c3e <setCommand+0x67e>
 8006c88:	250a      	movs	r5, #10
 8006c8a:	e7d8      	b.n	8006c3e <setCommand+0x67e>
			temp82 = NOVEMBER;
 8006c8c:	250b      	movs	r5, #11
 8006c8e:	e7d6      	b.n	8006c3e <setCommand+0x67e>
 8006c90:	250b      	movs	r5, #11
 8006c92:	e7d4      	b.n	8006c3e <setCommand+0x67e>
			temp82 = DECEMBER;
 8006c94:	250c      	movs	r5, #12
 8006c96:	e7d2      	b.n	8006c3e <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8006c98:	2e67      	cmp	r6, #103	; 0x67
 8006c9a:	d100      	bne.n	8006c9e <setCommand+0x6de>
 8006c9c:	e4bf      	b.n	800661e <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8006c9e:	2e68      	cmp	r6, #104	; 0x68
 8006ca0:	d100      	bne.n	8006ca4 <setCommand+0x6e4>
 8006ca2:	e4f5      	b.n	8006690 <setCommand+0xd0>
}
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	b00e      	add	sp, #56	; 0x38
 8006ca8:	bce0      	pop	{r5, r6, r7}
 8006caa:	46ba      	mov	sl, r7
 8006cac:	46b1      	mov	r9, r6
 8006cae:	46a8      	mov	r8, r5
 8006cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	200068d0 	.word	0x200068d0
 8006cb8:	20001258 	.word	0x20001258
 8006cbc:	20001264 	.word	0x20001264
 8006cc0:	0801adcc 	.word	0x0801adcc
 8006cc4:	2000126c 	.word	0x2000126c
 8006cc8:	20001270 	.word	0x20001270
 8006ccc:	20001274 	.word	0x20001274
 8006cd0:	0801aecc 	.word	0x0801aecc
 8006cd4:	0801aed4 	.word	0x0801aed4
 8006cd8:	0801aedc 	.word	0x0801aedc
 8006cdc:	0801aee8 	.word	0x0801aee8
 8006ce0:	0801aef4 	.word	0x0801aef4
 8006ce4:	0801aefc 	.word	0x0801aefc
 8006ce8:	0801af08 	.word	0x0801af08
 8006cec:	0801af10 	.word	0x0801af10
 8006cf0:	0801af18 	.word	0x0801af18
 8006cf4:	0801af1c 	.word	0x0801af1c
 8006cf8:	0801af28 	.word	0x0801af28
 8006cfc:	0801af2c 	.word	0x0801af2c
 8006d00:	0801af34 	.word	0x0801af34
 8006d04:	0801af38 	.word	0x0801af38
 8006d08:	0801af40 	.word	0x0801af40
 8006d0c:	0801af44 	.word	0x0801af44
 8006d10:	0801af48 	.word	0x0801af48
 8006d14:	0801af4c 	.word	0x0801af4c
 8006d18:	0801af54 	.word	0x0801af54
 8006d1c:	0801af58 	.word	0x0801af58
 8006d20:	0801af60 	.word	0x0801af60
 8006d24:	0801af64 	.word	0x0801af64
 8006d28:	0801af6c 	.word	0x0801af6c
 8006d2c:	0801af70 	.word	0x0801af70
 8006d30:	0801af7c 	.word	0x0801af7c
 8006d34:	0801af80 	.word	0x0801af80
 8006d38:	0801af88 	.word	0x0801af88
 8006d3c:	0801af8c 	.word	0x0801af8c
 8006d40:	0801af98 	.word	0x0801af98
 8006d44:	0801af9c 	.word	0x0801af9c
 8006d48:	0801afa8 	.word	0x0801afa8
			temp81 = MONDAY;
 8006d4c:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <setCommand+0x808>)
 8006d50:	681c      	ldr	r4, [r3, #0]
 8006d52:	2207      	movs	r2, #7
 8006d54:	491d      	ldr	r1, [pc, #116]	; (8006dcc <setCommand+0x80c>)
 8006d56:	0020      	movs	r0, r4
 8006d58:	f00d f883 	bl	8013e62 <strncmp>
			temp82 = JANUARY;
 8006d5c:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006d5e:	2600      	movs	r6, #0
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d000      	beq.n	8006d66 <setCommand+0x7a6>
 8006d64:	e6bc      	b.n	8006ae0 <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006d66:	466b      	mov	r3, sp
 8006d68:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006d6a:	1e73      	subs	r3, r6, #1
 8006d6c:	2b1e      	cmp	r3, #30
 8006d6e:	d900      	bls.n	8006d72 <setCommand+0x7b2>
 8006d70:	e48e      	b.n	8006690 <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006d72:	466b      	mov	r3, sp
 8006d74:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <setCommand+0x810>)
 8006d78:	18e3      	adds	r3, r4, r3
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b64      	cmp	r3, #100	; 0x64
 8006d7e:	d900      	bls.n	8006d82 <setCommand+0x7c2>
 8006d80:	e486      	b.n	8006690 <setCommand+0xd0>
				GetTimeDate();
 8006d82:	f006 fadb 	bl	800d33c <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <setCommand+0x814>)
 8006d88:	220c      	movs	r2, #12
 8006d8a:	569a      	ldrsb	r2, [r3, r2]
 8006d8c:	9204      	str	r2, [sp, #16]
 8006d8e:	7cda      	ldrb	r2, [r3, #19]
 8006d90:	9203      	str	r2, [sp, #12]
 8006d92:	7c9a      	ldrb	r2, [r3, #18]
 8006d94:	9202      	str	r2, [sp, #8]
 8006d96:	7c5a      	ldrb	r2, [r3, #17]
 8006d98:	9201      	str	r2, [sp, #4]
 8006d9a:	7c1b      	ldrb	r3, [r3, #16]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	003b      	movs	r3, r7
 8006da0:	0022      	movs	r2, r4
 8006da2:	0031      	movs	r1, r6
 8006da4:	0028      	movs	r0, r5
 8006da6:	f006 fa6f 	bl	800d288 <BOS_CalendarConfig>
 8006daa:	0006      	movs	r6, r0
 8006dac:	e621      	b.n	80069f2 <setCommand+0x432>
			temp81 = TUESDAY;
 8006dae:	2702      	movs	r7, #2
 8006db0:	e7cd      	b.n	8006d4e <setCommand+0x78e>
			temp81 = WEDNESDAY;
 8006db2:	2703      	movs	r7, #3
 8006db4:	e7cb      	b.n	8006d4e <setCommand+0x78e>
			temp81 = THURSDAY;
 8006db6:	2704      	movs	r7, #4
 8006db8:	e7c9      	b.n	8006d4e <setCommand+0x78e>
			temp81 = FRIDAY;
 8006dba:	2705      	movs	r7, #5
 8006dbc:	e7c7      	b.n	8006d4e <setCommand+0x78e>
			temp81 = SATURDAY;
 8006dbe:	2706      	movs	r7, #6
 8006dc0:	e7c5      	b.n	8006d4e <setCommand+0x78e>
			temp81 = SUNDAY;
 8006dc2:	2707      	movs	r7, #7
 8006dc4:	e7c3      	b.n	8006d4e <setCommand+0x78e>
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	2000126c 	.word	0x2000126c
 8006dcc:	0801af10 	.word	0x0801af10
 8006dd0:	fffff830 	.word	0xfffff830
 8006dd4:	200068d0 	.word	0x200068d0

08006dd8 <removebuttonCommand>:
{
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	0005      	movs	r5, r0
 8006dde:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006de0:	2300      	movs	r3, #0
 8006de2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	d010      	beq.n	8006e0a <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006de8:	aa01      	add	r2, sp, #4
 8006dea:	2101      	movs	r1, #1
 8006dec:	f006 ff62 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006df0:	2300      	movs	r3, #0
 8006df2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006df4:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006df6:	2b70      	cmp	r3, #112	; 0x70
 8006df8:	d009      	beq.n	8006e0e <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	f001 fdb0 	bl	8008960 <RemovePortButton>
	if (result == BOS_OK) 
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d009      	beq.n	8006e18 <removebuttonCommand+0x40>
}
 8006e04:	2000      	movs	r0, #0
 8006e06:	b003      	add	sp, #12
 8006e08:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8006e0a:	b672      	cpsid	i
 8006e0c:	e7fe      	b.n	8006e0c <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f00c fb85 	bl	801351e <atol>
 8006e14:	b2c4      	uxtb	r4, r0
 8006e16:	e7f0      	b.n	8006dfa <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006e18:	0023      	movs	r3, r4
 8006e1a:	0022      	movs	r2, r4
 8006e1c:	4902      	ldr	r1, [pc, #8]	; (8006e28 <removebuttonCommand+0x50>)
 8006e1e:	0028      	movs	r0, r5
 8006e20:	f00c ffdc 	bl	8013ddc <sprintf>
 8006e24:	e7ee      	b.n	8006e04 <removebuttonCommand+0x2c>
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	0801afac 	.word	0x0801afac

08006e2c <addbuttonCommand>:
{
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2e:	46c6      	mov	lr, r8
 8006e30:	b500      	push	{lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	0006      	movs	r6, r0
 8006e36:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d03d      	beq.n	8006ebe <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006e42:	aa03      	add	r2, sp, #12
 8006e44:	2101      	movs	r1, #1
 8006e46:	0038      	movs	r0, r7
 8006e48:	f006 ff34 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006e4c:	0005      	movs	r5, r0
 8006e4e:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <addbuttonCommand+0xb8>)
 8006e50:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	4698      	mov	r8, r3
 8006e56:	001a      	movs	r2, r3
 8006e58:	4923      	ldr	r1, [pc, #140]	; (8006ee8 <addbuttonCommand+0xbc>)
 8006e5a:	f00d f802 	bl	8013e62 <strncmp>
		type = MOMENTARY_NO;
 8006e5e:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d017      	beq.n	8006e94 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006e64:	4642      	mov	r2, r8
 8006e66:	4921      	ldr	r1, [pc, #132]	; (8006eec <addbuttonCommand+0xc0>)
 8006e68:	0028      	movs	r0, r5
 8006e6a:	f00c fffa 	bl	8013e62 <strncmp>
		type = MOMENTARY_NC;
 8006e6e:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d00f      	beq.n	8006e94 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006e74:	4642      	mov	r2, r8
 8006e76:	491e      	ldr	r1, [pc, #120]	; (8006ef0 <addbuttonCommand+0xc4>)
 8006e78:	0028      	movs	r0, r5
 8006e7a:	f00c fff2 	bl	8013e62 <strncmp>
		type = ONOFF_NO;
 8006e7e:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d007      	beq.n	8006e94 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006e84:	4642      	mov	r2, r8
 8006e86:	491b      	ldr	r1, [pc, #108]	; (8006ef4 <addbuttonCommand+0xc8>)
 8006e88:	0028      	movs	r0, r5
 8006e8a:	f00c ffea 	bl	8013e62 <strncmp>
		type = ONOFF_NC;
 8006e8e:	4244      	negs	r4, r0
 8006e90:	4144      	adcs	r4, r0
 8006e92:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006e94:	aa02      	add	r2, sp, #8
 8006e96:	2102      	movs	r1, #2
 8006e98:	0038      	movs	r0, r7
 8006e9a:	f006 ff0b 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006ea2:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 8006ea4:	2b70      	cmp	r3, #112	; 0x70
 8006ea6:	d00c      	beq.n	8006ec2 <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 8006ea8:	0029      	movs	r1, r5
 8006eaa:	0020      	movs	r0, r4
 8006eac:	f001 fcc6 	bl	800883c <AddPortButton>
	if (result == BOS_OK) 
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d00b      	beq.n	8006ecc <addbuttonCommand+0xa0>
}
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	b004      	add	sp, #16
 8006eb8:	bc80      	pop	{r7}
 8006eba:	46b8      	mov	r8, r7
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006ebe:	b672      	cpsid	i
 8006ec0:	e7fe      	b.n	8006ec0 <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f00c fb2b 	bl	801351e <atol>
 8006ec8:	b2c5      	uxtb	r5, r0
 8006eca:	e7ed      	b.n	8006ea8 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <addbuttonCommand+0xb8>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9903      	ldr	r1, [sp, #12]
 8006ed4:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006ed6:	9500      	str	r5, [sp, #0]
 8006ed8:	002b      	movs	r3, r5
 8006eda:	4907      	ldr	r1, [pc, #28]	; (8006ef8 <addbuttonCommand+0xcc>)
 8006edc:	0030      	movs	r0, r6
 8006ede:	f00c ff7d 	bl	8013ddc <sprintf>
 8006ee2:	e7e7      	b.n	8006eb4 <addbuttonCommand+0x88>
 8006ee4:	20001254 	.word	0x20001254
 8006ee8:	0801afd4 	.word	0x0801afd4
 8006eec:	0801afe4 	.word	0x0801afe4
 8006ef0:	0801aff4 	.word	0x0801aff4
 8006ef4:	0801b000 	.word	0x0801b000
 8006ef8:	0801b00c 	.word	0x0801b00c

08006efc <scastCommand>:
{
 8006efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efe:	46de      	mov	lr, fp
 8006f00:	4657      	mov	r7, sl
 8006f02:	464e      	mov	r6, r9
 8006f04:	4645      	mov	r5, r8
 8006f06:	b5e0      	push	{r5, r6, r7, lr}
 8006f08:	b099      	sub	sp, #100	; 0x64
 8006f0a:	0006      	movs	r6, r0
 8006f0c:	9007      	str	r0, [sp, #28]
 8006f0e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006f10:	2500      	movs	r5, #0
 8006f12:	9517      	str	r5, [sp, #92]	; 0x5c
 8006f14:	9516      	str	r5, [sp, #88]	; 0x58
 8006f16:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006f18:	9514      	str	r5, [sp, #80]	; 0x50
 8006f1a:	9513      	str	r5, [sp, #76]	; 0x4c
 8006f1c:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 8006f1e:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006f20:	950e      	str	r5, [sp, #56]	; 0x38
 8006f22:	2206      	movs	r2, #6
 8006f24:	2100      	movs	r1, #0
 8006f26:	a80f      	add	r0, sp, #60	; 0x3c
 8006f28:	f00c fd63 	bl	80139f2 <memset>
 8006f2c:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f2e:	2206      	movs	r2, #6
 8006f30:	2100      	movs	r1, #0
 8006f32:	a80c      	add	r0, sp, #48	; 0x30
 8006f34:	f00c fd5d 	bl	80139f2 <memset>
 8006f38:	9508      	str	r5, [sp, #32]
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	a809      	add	r0, sp, #36	; 0x24
 8006f40:	f00c fd57 	bl	80139f2 <memset>
	configASSERT( pcWriteBuffer );
 8006f44:	2e00      	cmp	r6, #0
 8006f46:	d100      	bne.n	8006f4a <scastCommand+0x4e>
 8006f48:	e07c      	b.n	8007044 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006f4a:	aa17      	add	r2, sp, #92	; 0x5c
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	0020      	movs	r0, r4
 8006f50:	f006 feb0 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006f54:	2300      	movs	r3, #0
 8006f56:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006f58:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 8006f5a:	2b50      	cmp	r3, #80	; 0x50
 8006f5c:	d100      	bne.n	8006f60 <scastCommand+0x64>
 8006f5e:	e073      	b.n	8007048 <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006f60:	aa16      	add	r2, sp, #88	; 0x58
 8006f62:	2102      	movs	r1, #2
 8006f64:	0020      	movs	r0, r4
 8006f66:	f006 fea5 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006f6a:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006f6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f6e:	a80e      	add	r0, sp, #56	; 0x38
 8006f70:	f00c ff88 	bl	8013e84 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006f74:	a80e      	add	r0, sp, #56	; 0x38
 8006f76:	f7fd faf1 	bl	800455c <GetID>
 8006f7a:	b2c3      	uxtb	r3, r0
 8006f7c:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006f7e:	aa15      	add	r2, sp, #84	; 0x54
 8006f80:	2103      	movs	r1, #3
 8006f82:	0020      	movs	r0, r4
 8006f84:	f006 fe96 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006f88:	2300      	movs	r3, #0
 8006f8a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 8006f90:	2b70      	cmp	r3, #112	; 0x70
 8006f92:	d05e      	beq.n	8007052 <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006f94:	aa14      	add	r2, sp, #80	; 0x50
 8006f96:	2104      	movs	r1, #4
 8006f98:	0020      	movs	r0, r4
 8006f9a:	f006 fe8b 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006f9e:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006fa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fa2:	a80b      	add	r0, sp, #44	; 0x2c
 8006fa4:	f00c ff6e 	bl	8013e84 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006fa8:	a80b      	add	r0, sp, #44	; 0x2c
 8006faa:	f7fd fad7 	bl	800455c <GetID>
 8006fae:	b2c3      	uxtb	r3, r0
 8006fb0:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006fb2:	aa13      	add	r2, sp, #76	; 0x4c
 8006fb4:	2105      	movs	r1, #5
 8006fb6:	0020      	movs	r0, r4
 8006fb8:	f006 fe7c 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8006fbc:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	001a      	movs	r2, r3
 8006fc4:	492d      	ldr	r1, [pc, #180]	; (800707c <scastCommand+0x180>)
 8006fc6:	f00c ff4c 	bl	8013e62 <strncmp>
		direction = FORWARD;
 8006fca:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d00f      	beq.n	8006ff0 <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	492b      	ldr	r1, [pc, #172]	; (8007080 <scastCommand+0x184>)
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	f00c ff44 	bl	8013e62 <strncmp>
		direction = BACKWARD;
 8006fda:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d007      	beq.n	8006ff0 <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	4928      	ldr	r1, [pc, #160]	; (8007084 <scastCommand+0x188>)
 8006fe4:	0030      	movs	r0, r6
 8006fe6:	f00c ff3c 	bl	8013e62 <strncmp>
		direction = BIDIRECTIONAL;
 8006fea:	4245      	negs	r5, r0
 8006fec:	4145      	adcs	r5, r0
 8006fee:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	0031      	movs	r1, r6
 8006ff4:	a808      	add	r0, sp, #32
 8006ff6:	f00c ff45 	bl	8013e84 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8006ffa:	aa12      	add	r2, sp, #72	; 0x48
 8006ffc:	2106      	movs	r1, #6
 8006ffe:	0020      	movs	r0, r4
 8007000:	f006 fe58 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8007004:	f00c fa8b 	bl	801351e <atol>
 8007008:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800700a:	aa11      	add	r2, sp, #68	; 0x44
 800700c:	2107      	movs	r1, #7
 800700e:	0020      	movs	r0, r4
 8007010:	f006 fe50 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8007014:	f00c fa83 	bl	801351e <atol>
 8007018:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 800701a:	2300      	movs	r3, #0
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	9002      	str	r0, [sp, #8]
 8007020:	9601      	str	r6, [sp, #4]
 8007022:	9500      	str	r5, [sp, #0]
 8007024:	464b      	mov	r3, r9
 8007026:	4642      	mov	r2, r8
 8007028:	4659      	mov	r1, fp
 800702a:	0038      	movs	r0, r7
 800702c:	f002 fa46 	bl	80094bc <StartScastDMAStream>
	if (result == BOS_OK) 
 8007030:	2800      	cmp	r0, #0
 8007032:	d014      	beq.n	800705e <scastCommand+0x162>
}
 8007034:	2000      	movs	r0, #0
 8007036:	b019      	add	sp, #100	; 0x64
 8007038:	bcf0      	pop	{r4, r5, r6, r7}
 800703a:	46bb      	mov	fp, r7
 800703c:	46b2      	mov	sl, r6
 800703e:	46a9      	mov	r9, r5
 8007040:	46a0      	mov	r8, r4
 8007042:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007044:	b672      	cpsid	i
 8007046:	e7fe      	b.n	8007046 <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8007048:	3001      	adds	r0, #1
 800704a:	f00c fa68 	bl	801351e <atol>
 800704e:	b2c7      	uxtb	r7, r0
 8007050:	e786      	b.n	8006f60 <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8007052:	3001      	adds	r0, #1
 8007054:	f00c fa63 	bl	801351e <atol>
 8007058:	b2c3      	uxtb	r3, r0
 800705a:	4698      	mov	r8, r3
 800705c:	e79a      	b.n	8006f94 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 800705e:	9404      	str	r4, [sp, #16]
 8007060:	9603      	str	r6, [sp, #12]
 8007062:	ab0b      	add	r3, sp, #44	; 0x2c
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	4643      	mov	r3, r8
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	ab0e      	add	r3, sp, #56	; 0x38
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	003b      	movs	r3, r7
 8007070:	aa08      	add	r2, sp, #32
 8007072:	4905      	ldr	r1, [pc, #20]	; (8007088 <scastCommand+0x18c>)
 8007074:	9807      	ldr	r0, [sp, #28]
 8007076:	f00c feb1 	bl	8013ddc <sprintf>
 800707a:	e7db      	b.n	8007034 <scastCommand+0x138>
 800707c:	0801b040 	.word	0x0801b040
 8007080:	0801b048 	.word	0x0801b048
 8007084:	0801b054 	.word	0x0801b054
 8007088:	0801b064 	.word	0x0801b064

0800708c <infoCommand>:
{
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	b083      	sub	sp, #12
 8007090:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007092:	d036      	beq.n	8007102 <infoCommand+0x76>
	if (N > 1)
 8007094:	4b27      	ldr	r3, [pc, #156]	; (8007134 <infoCommand+0xa8>)
 8007096:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8007098:	2500      	movs	r5, #0
	if (N > 1)
 800709a:	2b01      	cmp	r3, #1
 800709c:	d833      	bhi.n	8007106 <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800709e:	4b25      	ldr	r3, [pc, #148]	; (8007134 <infoCommand+0xa8>)
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	4925      	ldr	r1, [pc, #148]	; (8007138 <infoCommand+0xac>)
 80070a4:	0020      	movs	r0, r4
 80070a6:	f00c fe99 	bl	8013ddc <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80070aa:	0020      	movs	r0, r4
 80070ac:	f7f9 f834 	bl	8000118 <strlen>
 80070b0:	b282      	uxth	r2, r0
 80070b2:	4e22      	ldr	r6, [pc, #136]	; (800713c <infoCommand+0xb0>)
 80070b4:	7830      	ldrb	r0, [r6, #0]
 80070b6:	2701      	movs	r7, #1
 80070b8:	427f      	negs	r7, r7
 80070ba:	9700      	str	r7, [sp, #0]
 80070bc:	2332      	movs	r3, #50	; 0x32
 80070be:	0021      	movs	r1, r4
 80070c0:	f006 fba2 	bl	800d808 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 80070c4:	2213      	movs	r2, #19
 80070c6:	491e      	ldr	r1, [pc, #120]	; (8007140 <infoCommand+0xb4>)
 80070c8:	0020      	movs	r0, r4
 80070ca:	f00c fc89 	bl	80139e0 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80070ce:	0020      	movs	r0, r4
 80070d0:	f7f9 f822 	bl	8000118 <strlen>
 80070d4:	b282      	uxth	r2, r0
 80070d6:	7830      	ldrb	r0, [r6, #0]
 80070d8:	9700      	str	r7, [sp, #0]
 80070da:	2332      	movs	r3, #50	; 0x32
 80070dc:	0021      	movs	r1, r4
 80070de:	f006 fb93 	bl	800d808 <writePxMutex>
	DisplayTopology(PcPort);
 80070e2:	7830      	ldrb	r0, [r6, #0]
 80070e4:	f7fc ff7e 	bl	8003fe4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80070e8:	7830      	ldrb	r0, [r6, #0]
 80070ea:	f7fd f857 	bl	800419c <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 80070ee:	2d02      	cmp	r5, #2
 80070f0:	d00d      	beq.n	800710e <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 80070f2:	2202      	movs	r2, #2
 80070f4:	4913      	ldr	r1, [pc, #76]	; (8007144 <infoCommand+0xb8>)
 80070f6:	0020      	movs	r0, r4
 80070f8:	f00c fc72 	bl	80139e0 <memcpy>
}
 80070fc:	2000      	movs	r0, #0
 80070fe:	b003      	add	sp, #12
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007102:	b672      	cpsid	i
 8007104:	e7fe      	b.n	8007104 <infoCommand+0x78>
		result = ReadPortsDir();
 8007106:	f7fd fb73 	bl	80047f0 <ReadPortsDir>
 800710a:	0005      	movs	r5, r0
 800710c:	e7c7      	b.n	800709e <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 800710e:	2244      	movs	r2, #68	; 0x44
 8007110:	490d      	ldr	r1, [pc, #52]	; (8007148 <infoCommand+0xbc>)
 8007112:	0020      	movs	r0, r4
 8007114:	f00c fc64 	bl	80139e0 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8007118:	0020      	movs	r0, r4
 800711a:	f7f8 fffd 	bl	8000118 <strlen>
 800711e:	b282      	uxth	r2, r0
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <infoCommand+0xb0>)
 8007122:	7818      	ldrb	r0, [r3, #0]
 8007124:	003b      	movs	r3, r7
 8007126:	9700      	str	r7, [sp, #0]
 8007128:	3333      	adds	r3, #51	; 0x33
 800712a:	0021      	movs	r1, r4
 800712c:	f006 fb6c 	bl	800d808 <writePxMutex>
 8007130:	e7df      	b.n	80070f2 <infoCommand+0x66>
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	2000001c 	.word	0x2000001c
 8007138:	0801b0ec 	.word	0x0801b0ec
 800713c:	20000a7f 	.word	0x20000a7f
 8007140:	0801b108 	.word	0x0801b108
 8007144:	08019e78 	.word	0x08019e78
 8007148:	0801b11c 	.word	0x0801b11c

0800714c <statusCommand>:
{
 800714c:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800714e:	2800      	cmp	r0, #0
 8007150:	d004      	beq.n	800715c <statusCommand+0x10>
	DisplayModuleStatus(0);
 8007152:	2000      	movs	r0, #0
 8007154:	f7fd f898 	bl	8004288 <DisplayModuleStatus>
}
 8007158:	2000      	movs	r0, #0
 800715a:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800715c:	b672      	cpsid	i
 800715e:	e7fe      	b.n	800715e <statusCommand+0x12>

08007160 <groupCommand>:
{
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	46ce      	mov	lr, r9
 8007164:	4647      	mov	r7, r8
 8007166:	b580      	push	{r7, lr}
 8007168:	b08f      	sub	sp, #60	; 0x3c
 800716a:	0004      	movs	r4, r0
 800716c:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 800716e:	2500      	movs	r5, #0
 8007170:	9504      	str	r5, [sp, #16]
 8007172:	2223      	movs	r2, #35	; 0x23
 8007174:	2100      	movs	r1, #0
 8007176:	a805      	add	r0, sp, #20
 8007178:	f00c fc3b 	bl	80139f2 <memset>
 800717c:	9501      	str	r5, [sp, #4]
 800717e:	2206      	movs	r2, #6
 8007180:	2100      	movs	r1, #0
 8007182:	a802      	add	r0, sp, #8
 8007184:	f00c fc35 	bl	80139f2 <memset>
	configASSERT( pcWriteBuffer );
 8007188:	2c00      	cmp	r4, #0
 800718a:	d02c      	beq.n	80071e6 <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800718c:	4d56      	ldr	r5, [pc, #344]	; (80072e8 <groupCommand+0x188>)
 800718e:	002a      	movs	r2, r5
 8007190:	2101      	movs	r1, #1
 8007192:	0030      	movs	r0, r6
 8007194:	f006 fd8e 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8007198:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800719a:	682a      	ldr	r2, [r5, #0]
 800719c:	a801      	add	r0, sp, #4
 800719e:	f00c fe71 	bl	8013e84 <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 80071a2:	4d52      	ldr	r5, [pc, #328]	; (80072ec <groupCommand+0x18c>)
 80071a4:	002f      	movs	r7, r5
 80071a6:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 80071a8:	0029      	movs	r1, r5
 80071aa:	a801      	add	r0, sp, #4
 80071ac:	f7f8 ffaa 	bl	8000104 <strcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d01a      	beq.n	80071ea <groupCommand+0x8a>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 80071b4:	350a      	adds	r5, #10
 80071b6:	42af      	cmp	r7, r5
 80071b8:	d1f6      	bne.n	80071a8 <groupCommand+0x48>
	type = 1;
 80071ba:	2701      	movs	r7, #1
	count = 2;
 80071bc:	4b4c      	ldr	r3, [pc, #304]	; (80072f0 <groupCommand+0x190>)
 80071be:	2202      	movs	r2, #2
 80071c0:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 80071c2:	3208      	adds	r2, #8
 80071c4:	494b      	ldr	r1, [pc, #300]	; (80072f4 <groupCommand+0x194>)
 80071c6:	0020      	movs	r0, r4
 80071c8:	f00c fc0a 	bl	80139e0 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 80071cc:	4a4a      	ldr	r2, [pc, #296]	; (80072f8 <groupCommand+0x198>)
 80071ce:	2102      	movs	r1, #2
 80071d0:	0030      	movs	r0, r6
 80071d2:	f006 fd6f 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80071d6:	1e01      	subs	r1, r0, #0
 80071d8:	4b48      	ldr	r3, [pc, #288]	; (80072fc <groupCommand+0x19c>)
 80071da:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80071dc:	d100      	bne.n	80071e0 <groupCommand+0x80>
 80071de:	e072      	b.n	80072c6 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80071e0:	4b45      	ldr	r3, [pc, #276]	; (80072f8 <groupCommand+0x198>)
 80071e2:	4698      	mov	r8, r3
 80071e4:	e024      	b.n	8007230 <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 80071e6:	b672      	cpsid	i
 80071e8:	e7fe      	b.n	80071e8 <groupCommand+0x88>
			type = 0; break;
 80071ea:	2700      	movs	r7, #0
 80071ec:	e7e6      	b.n	80071bc <groupCommand+0x5c>
	else if (count == 2)
 80071ee:	4b40      	ldr	r3, [pc, #256]	; (80072f0 <groupCommand+0x190>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d03f      	beq.n	8007278 <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 80071f8:	2806      	cmp	r0, #6
 80071fa:	d04d      	beq.n	8007298 <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 80071fc:	2807      	cmp	r0, #7
 80071fe:	d051      	beq.n	80072a4 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 8007200:	2808      	cmp	r0, #8
 8007202:	d15a      	bne.n	80072ba <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 8007204:	aa01      	add	r2, sp, #4
 8007206:	493e      	ldr	r1, [pc, #248]	; (8007300 <groupCommand+0x1a0>)
 8007208:	0020      	movs	r0, r4
 800720a:	f00c fde7 	bl	8013ddc <sprintf>
 800720e:	e054      	b.n	80072ba <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 8007210:	a904      	add	r1, sp, #16
 8007212:	0020      	movs	r0, r4
 8007214:	f00c fe02 	bl	8013e1c <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8007218:	1c69      	adds	r1, r5, #1
 800721a:	b249      	sxtb	r1, r1
 800721c:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <groupCommand+0x190>)
 800721e:	7019      	strb	r1, [r3, #0]
 8007220:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <groupCommand+0x198>)
 8007222:	0030      	movs	r0, r6
 8007224:	f006 fd46 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8007228:	1e01      	subs	r1, r0, #0
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <groupCommand+0x19c>)
 800722c:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800722e:	d04a      	beq.n	80072c6 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8007230:	4643      	mov	r3, r8
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4699      	mov	r9, r3
 8007236:	ad04      	add	r5, sp, #16
 8007238:	001a      	movs	r2, r3
 800723a:	0028      	movs	r0, r5
 800723c:	f00c fe22 	bl	8013e84 <strncpy>
 8007240:	2300      	movs	r3, #0
 8007242:	464a      	mov	r2, r9
 8007244:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8007246:	0028      	movs	r0, r5
 8007248:	f7fd f988 	bl	800455c <GetID>
		if (modID < 0)	break;
 800724c:	2800      	cmp	r0, #0
 800724e:	db2f      	blt.n	80072b0 <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 8007250:	b2c0      	uxtb	r0, r0
 8007252:	a901      	add	r1, sp, #4
 8007254:	f7fd fa4a 	bl	80046ec <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8007258:	2800      	cmp	r0, #0
 800725a:	d1c8      	bne.n	80071ee <groupCommand+0x8e>
		if (count > 2)
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <groupCommand+0x190>)
 800725e:	2500      	movs	r5, #0
 8007260:	575d      	ldrsb	r5, [r3, r5]
 8007262:	2d02      	cmp	r5, #2
 8007264:	ddd4      	ble.n	8007210 <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8007266:	0020      	movs	r0, r4
 8007268:	f7f8 ff56 	bl	8000118 <strlen>
 800726c:	1820      	adds	r0, r4, r0
 800726e:	2203      	movs	r2, #3
 8007270:	4924      	ldr	r1, [pc, #144]	; (8007304 <groupCommand+0x1a4>)
 8007272:	f00c fbb5 	bl	80139e0 <memcpy>
 8007276:	e7cb      	b.n	8007210 <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8007278:	aa01      	add	r2, sp, #4
 800727a:	4923      	ldr	r1, [pc, #140]	; (8007308 <groupCommand+0x1a8>)
 800727c:	0020      	movs	r0, r4
 800727e:	f00c fdad 	bl	8013ddc <sprintf>
 8007282:	e01a      	b.n	80072ba <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8007284:	aa01      	add	r2, sp, #4
 8007286:	4921      	ldr	r1, [pc, #132]	; (800730c <groupCommand+0x1ac>)
 8007288:	a804      	add	r0, sp, #16
 800728a:	f00c fda7 	bl	8013ddc <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800728e:	a904      	add	r1, sp, #16
 8007290:	0020      	movs	r0, r4
 8007292:	f00c fdc3 	bl	8013e1c <strcat>
 8007296:	e010      	b.n	80072ba <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8007298:	aa01      	add	r2, sp, #4
 800729a:	491d      	ldr	r1, [pc, #116]	; (8007310 <groupCommand+0x1b0>)
 800729c:	0020      	movs	r0, r4
 800729e:	f00c fd9d 	bl	8013ddc <sprintf>
 80072a2:	e00a      	b.n	80072ba <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80072a4:	aa01      	add	r2, sp, #4
 80072a6:	491b      	ldr	r1, [pc, #108]	; (8007314 <groupCommand+0x1b4>)
 80072a8:	0020      	movs	r0, r4
 80072aa:	f00c fd97 	bl	8013ddc <sprintf>
 80072ae:	e004      	b.n	80072ba <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80072b0:	aa04      	add	r2, sp, #16
 80072b2:	4919      	ldr	r1, [pc, #100]	; (8007318 <groupCommand+0x1b8>)
 80072b4:	0020      	movs	r0, r4
 80072b6:	f00c fd91 	bl	8013ddc <sprintf>
}
 80072ba:	2000      	movs	r0, #0
 80072bc:	b00f      	add	sp, #60	; 0x3c
 80072be:	bcc0      	pop	{r6, r7}
 80072c0:	46b9      	mov	r9, r7
 80072c2:	46b0      	mov	r8, r6
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <groupCommand+0x190>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d0d3      	beq.n	8007278 <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 80072d0:	2f00      	cmp	r7, #0
 80072d2:	d1d7      	bne.n	8007284 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 80072d4:	aa01      	add	r2, sp, #4
 80072d6:	4911      	ldr	r1, [pc, #68]	; (800731c <groupCommand+0x1bc>)
 80072d8:	a804      	add	r0, sp, #16
 80072da:	f00c fd7f 	bl	8013ddc <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 80072de:	a904      	add	r1, sp, #16
 80072e0:	0020      	movs	r0, r4
 80072e2:	f00c fd9b 	bl	8013e1c <strcat>
 80072e6:	e7e8      	b.n	80072ba <groupCommand+0x15a>
 80072e8:	20001284 	.word	0x20001284
 80072ec:	20000e2c 	.word	0x20000e2c
 80072f0:	2000124a 	.word	0x2000124a
 80072f4:	0801b160 	.word	0x0801b160
 80072f8:	20001278 	.word	0x20001278
 80072fc:	2000124c 	.word	0x2000124c
 8007300:	0801b24c 	.word	0x0801b24c
 8007304:	0801b16c 	.word	0x0801b16c
 8007308:	0801b170 	.word	0x0801b170
 800730c:	0801b19c 	.word	0x0801b19c
 8007310:	0801b1d8 	.word	0x0801b1d8
 8007314:	0801b218 	.word	0x0801b218
 8007318:	0801b28c 	.word	0x0801b28c
 800731c:	0801b1b8 	.word	0x0801b1b8

08007320 <nameCommand>:
{
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	0004      	movs	r4, r0
 8007324:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 8007326:	2c00      	cmp	r4, #0
 8007328:	d01a      	beq.n	8007360 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800732a:	4d1d      	ldr	r5, [pc, #116]	; (80073a0 <nameCommand+0x80>)
 800732c:	002a      	movs	r2, r5
 800732e:	2101      	movs	r1, #1
 8007330:	f006 fcc0 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8007334:	0001      	movs	r1, r0
 8007336:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <nameCommand+0x84>)
 8007338:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	2b09      	cmp	r3, #9
 800733e:	dd01      	ble.n	8007344 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8007340:	2300      	movs	r3, #0
 8007342:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8007344:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <nameCommand+0x88>)
 8007346:	7818      	ldrb	r0, [r3, #0]
 8007348:	f7fd f96c 	bl	8004624 <NameModule>
	if (result == BOS_OK)
 800734c:	2800      	cmp	r0, #0
 800734e:	d009      	beq.n	8007364 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8007350:	2806      	cmp	r0, #6
 8007352:	d010      	beq.n	8007376 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8007354:	2807      	cmp	r0, #7
 8007356:	d015      	beq.n	8007384 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8007358:	2808      	cmp	r0, #8
 800735a:	d01a      	beq.n	8007392 <nameCommand+0x72>
}
 800735c:	2000      	movs	r0, #0
 800735e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8007360:	b672      	cpsid	i
 8007362:	e7fe      	b.n	8007362 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <nameCommand+0x84>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a0f      	ldr	r2, [pc, #60]	; (80073a8 <nameCommand+0x88>)
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	490f      	ldr	r1, [pc, #60]	; (80073ac <nameCommand+0x8c>)
 800736e:	0020      	movs	r0, r4
 8007370:	f00c fd34 	bl	8013ddc <sprintf>
 8007374:	e7f2      	b.n	800735c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <nameCommand+0x84>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	490d      	ldr	r1, [pc, #52]	; (80073b0 <nameCommand+0x90>)
 800737c:	0020      	movs	r0, r4
 800737e:	f00c fd2d 	bl	8013ddc <sprintf>
 8007382:	e7eb      	b.n	800735c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <nameCommand+0x84>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	490a      	ldr	r1, [pc, #40]	; (80073b4 <nameCommand+0x94>)
 800738a:	0020      	movs	r0, r4
 800738c:	f00c fd26 	bl	8013ddc <sprintf>
 8007390:	e7e4      	b.n	800735c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8007392:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <nameCommand+0x84>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <nameCommand+0x98>)
 8007398:	0020      	movs	r0, r4
 800739a:	f00c fd1f 	bl	8013ddc <sprintf>
 800739e:	e7dd      	b.n	800735c <nameCommand+0x3c>
 80073a0:	20001280 	.word	0x20001280
 80073a4:	20001250 	.word	0x20001250
 80073a8:	20001046 	.word	0x20001046
 80073ac:	0801b2b0 	.word	0x0801b2b0
 80073b0:	0801b1d8 	.word	0x0801b1d8
 80073b4:	0801b218 	.word	0x0801b218
 80073b8:	0801b24c 	.word	0x0801b24c

080073bc <bootloaderUpdateCommand>:
{
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	46c6      	mov	lr, r8
 80073c0:	b500      	push	{lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	0004      	movs	r4, r0
 80073c6:	0017      	movs	r7, r2
 80073c8:	2600      	movs	r6, #0
 80073ca:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d04f      	beq.n	8007470 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80073d0:	4a4d      	ldr	r2, [pc, #308]	; (8007508 <bootloaderUpdateCommand+0x14c>)
 80073d2:	2101      	movs	r1, #1
 80073d4:	0038      	movs	r0, r7
 80073d6:	f006 fc6d 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 80073da:	2800      	cmp	r0, #0
 80073dc:	d04a      	beq.n	8007474 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 80073de:	4b4a      	ldr	r3, [pc, #296]	; (8007508 <bootloaderUpdateCommand+0x14c>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	494a      	ldr	r1, [pc, #296]	; (800750c <bootloaderUpdateCommand+0x150>)
 80073e4:	f00c fd3d 	bl	8013e62 <strncmp>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d137      	bne.n	800745c <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80073ec:	4a48      	ldr	r2, [pc, #288]	; (8007510 <bootloaderUpdateCommand+0x154>)
 80073ee:	2102      	movs	r1, #2
 80073f0:	0038      	movs	r0, r7
 80073f2:	f006 fc5f 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <bootloaderUpdateCommand+0x158>)
 80073f8:	4698      	mov	r8, r3
 80073fa:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80073fc:	4a46      	ldr	r2, [pc, #280]	; (8007518 <bootloaderUpdateCommand+0x15c>)
 80073fe:	2103      	movs	r1, #3
 8007400:	0038      	movs	r0, r7
 8007402:	f006 fc57 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 8007406:	4b45      	ldr	r3, [pc, #276]	; (800751c <bootloaderUpdateCommand+0x160>)
 8007408:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 800740a:	4643      	mov	r3, r8
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	2300      	movs	r3, #0
 8007410:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8007412:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8007414:	2b23      	cmp	r3, #35	; 0x23
 8007416:	d057      	beq.n	80074c8 <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 8007418:	4b40      	ldr	r3, [pc, #256]	; (800751c <bootloaderUpdateCommand+0x160>)
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	56c3      	ldrsb	r3, [r0, r3]
 8007420:	2b70      	cmp	r3, #112	; 0x70
 8007422:	d057      	beq.n	80074d4 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 8007424:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <bootloaderUpdateCommand+0x164>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	42b3      	cmp	r3, r6
 800742c:	d057      	beq.n	80074de <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 800742e:	4b3d      	ldr	r3, [pc, #244]	; (8007524 <bootloaderUpdateCommand+0x168>)
 8007430:	2200      	movs	r2, #0
 8007432:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8007434:	4b3c      	ldr	r3, [pc, #240]	; (8007528 <bootloaderUpdateCommand+0x16c>)
 8007436:	701d      	strb	r5, [r3, #0]
 8007438:	3201      	adds	r2, #1
 800743a:	211a      	movs	r1, #26
 800743c:	0030      	movs	r0, r6
 800743e:	f002 f817 	bl	8009470 <SendMessageToModule>
				osDelay(100);			
 8007442:	2064      	movs	r0, #100	; 0x64
 8007444:	f006 fb0f 	bl	800da66 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8007448:	4b38      	ldr	r3, [pc, #224]	; (800752c <bootloaderUpdateCommand+0x170>)
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	4b34      	ldr	r3, [pc, #208]	; (8007520 <bootloaderUpdateCommand+0x164>)
 800744e:	7818      	ldrb	r0, [r3, #0]
 8007450:	002b      	movs	r3, r5
 8007452:	0031      	movs	r1, r6
 8007454:	f7fc fd44 	bl	8003ee0 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8007458:	2f68      	cmp	r7, #104	; 0x68
 800745a:	d104      	bne.n	8007466 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 800745c:	220f      	movs	r2, #15
 800745e:	4934      	ldr	r1, [pc, #208]	; (8007530 <bootloaderUpdateCommand+0x174>)
 8007460:	0020      	movs	r0, r4
 8007462:	f00c fabd 	bl	80139e0 <memcpy>
}
 8007466:	2000      	movs	r0, #0
 8007468:	b002      	add	sp, #8
 800746a:	bc80      	pop	{r7}
 800746c:	46b8      	mov	r8, r7
 800746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007470:	b672      	cpsid	i
 8007472:	e7fe      	b.n	8007472 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8007474:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <bootloaderUpdateCommand+0x164>)
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	492e      	ldr	r1, [pc, #184]	; (8007534 <bootloaderUpdateCommand+0x178>)
 800747a:	0020      	movs	r0, r4
 800747c:	f00c fcae 	bl	8013ddc <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8007480:	4b2d      	ldr	r3, [pc, #180]	; (8007538 <bootloaderUpdateCommand+0x17c>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	0020      	movs	r0, r4
 8007486:	f00c fcc9 	bl	8013e1c <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800748a:	0020      	movs	r0, r4
 800748c:	f7f8 fe44 	bl	8000118 <strlen>
 8007490:	b282      	uxth	r2, r0
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <bootloaderUpdateCommand+0x170>)
 8007494:	7818      	ldrb	r0, [r3, #0]
 8007496:	2301      	movs	r3, #1
 8007498:	425b      	negs	r3, r3
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	3333      	adds	r3, #51	; 0x33
 800749e:	0021      	movs	r1, r4
 80074a0:	f006 f9b2 	bl	800d808 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <bootloaderUpdateCommand+0x180>)
 80074a6:	4a26      	ldr	r2, [pc, #152]	; (8007540 <bootloaderUpdateCommand+0x184>)
 80074a8:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 80074aa:	4b26      	ldr	r3, [pc, #152]	; (8007544 <bootloaderUpdateCommand+0x188>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80074b0:	200a      	movs	r0, #10
 80074b2:	f006 fad8 	bl	800da66 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	4b23      	ldr	r3, [pc, #140]	; (8007548 <bootloaderUpdateCommand+0x18c>)
 80074bc:	4a23      	ldr	r2, [pc, #140]	; (800754c <bootloaderUpdateCommand+0x190>)
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	e7fd      	b.n	80074c4 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80074c8:	3001      	adds	r0, #1
 80074ca:	f00c f828 	bl	801351e <atol>
 80074ce:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 80074d0:	2700      	movs	r7, #0
 80074d2:	e7a1      	b.n	8007418 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80074d4:	3001      	adds	r0, #1
 80074d6:	f00c f822 	bl	801351e <atol>
 80074da:	b2c5      	uxtb	r5, r0
 80074dc:	e7a3      	b.n	8007426 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 80074de:	2300      	movs	r3, #0
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	3319      	adds	r3, #25
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	0028      	movs	r0, r5
 80074ea:	f001 fd97 	bl	800901c <SendMessageFromPort>
				osDelay(100);
 80074ee:	2064      	movs	r0, #100	; 0x64
 80074f0:	f006 fab9 	bl	800da66 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 80074f4:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <bootloaderUpdateCommand+0x164>)
 80074f6:	7818      	ldrb	r0, [r3, #0]
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <bootloaderUpdateCommand+0x170>)
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	002b      	movs	r3, r5
 80074fe:	0001      	movs	r1, r0
 8007500:	f7fc fcee 	bl	8003ee0 <remoteBootloaderUpdate>
 8007504:	e7a8      	b.n	8007458 <bootloaderUpdateCommand+0x9c>
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	2000127c 	.word	0x2000127c
 800750c:	0801b2e8 	.word	0x0801b2e8
 8007510:	20001288 	.word	0x20001288
 8007514:	20001260 	.word	0x20001260
 8007518:	2000128c 	.word	0x2000128c
 800751c:	20001268 	.word	0x20001268
 8007520:	20001046 	.word	0x20001046
 8007524:	200068d0 	.word	0x200068d0
 8007528:	20000f08 	.word	0x20000f08
 800752c:	20000a7f 	.word	0x20000a7f
 8007530:	0801ad70 	.word	0x0801ad70
 8007534:	0801b2c8 	.word	0x0801b2c8
 8007538:	20000074 	.word	0x20000074
 800753c:	20007ff0 	.word	0x20007ff0
 8007540:	deadbeef 	.word	0xdeadbeef
 8007544:	20000ec4 	.word	0x20000ec4
 8007548:	e000ed00 	.word	0xe000ed00
 800754c:	05fa0004 	.word	0x05fa0004

08007550 <pingCommand>:
{
 8007550:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8007552:	2800      	cmp	r0, #0
 8007554:	d01e      	beq.n	8007594 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <pingCommand+0x5c>)
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	0093      	lsls	r3, r2, #2
 800755c:	189b      	adds	r3, r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4913      	ldr	r1, [pc, #76]	; (80075b0 <pingCommand+0x60>)
 8007562:	5c5b      	ldrb	r3, [r3, r1]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d117      	bne.n	8007598 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8007568:	4912      	ldr	r1, [pc, #72]	; (80075b4 <pingCommand+0x64>)
 800756a:	f00c fc37 	bl	8013ddc <sprintf>
	RTOS_IND_blink(200);	
 800756e:	2580      	movs	r5, #128	; 0x80
 8007570:	012d      	lsls	r5, r5, #4
 8007572:	2490      	movs	r4, #144	; 0x90
 8007574:	05e4      	lsls	r4, r4, #23
 8007576:	2201      	movs	r2, #1
 8007578:	0029      	movs	r1, r5
 800757a:	0020      	movs	r0, r4
 800757c:	f009 ff0a 	bl	8011394 <HAL_GPIO_WritePin>
 8007580:	20c8      	movs	r0, #200	; 0xc8
 8007582:	f006 fa70 	bl	800da66 <osDelay>
 8007586:	2200      	movs	r2, #0
 8007588:	0029      	movs	r1, r5
 800758a:	0020      	movs	r0, r4
 800758c:	f009 ff02 	bl	8011394 <HAL_GPIO_WritePin>
}
 8007590:	2000      	movs	r0, #0
 8007592:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8007594:	b672      	cpsid	i
 8007596:	e7fe      	b.n	8007596 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8007598:	0093      	lsls	r3, r2, #2
 800759a:	189b      	adds	r3, r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4904      	ldr	r1, [pc, #16]	; (80075b0 <pingCommand+0x60>)
 80075a0:	185b      	adds	r3, r3, r1
 80075a2:	4905      	ldr	r1, [pc, #20]	; (80075b8 <pingCommand+0x68>)
 80075a4:	f00c fc1a 	bl	8013ddc <sprintf>
 80075a8:	e7e1      	b.n	800756e <pingCommand+0x1e>
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	20001046 	.word	0x20001046
 80075b0:	20000f38 	.word	0x20000f38
 80075b4:	0801b2ec 	.word	0x0801b2ec
 80075b8:	0801b300 	.word	0x0801b300

080075bc <prvRunTimeStatsCommand>:
{
 80075bc:	b510      	push	{r4, lr}
 80075be:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80075c0:	d009      	beq.n	80075d6 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 80075c2:	2251      	movs	r2, #81	; 0x51
 80075c4:	4905      	ldr	r1, [pc, #20]	; (80075dc <prvRunTimeStatsCommand+0x20>)
 80075c6:	f00c fa0b 	bl	80139e0 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 80075ca:	0020      	movs	r0, r4
 80075cc:	3050      	adds	r0, #80	; 0x50
 80075ce:	f007 fdf7 	bl	800f1c0 <vTaskGetRunTimeStats>
}
 80075d2:	2000      	movs	r0, #0
 80075d4:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80075d6:	b672      	cpsid	i
 80075d8:	e7fe      	b.n	80075d8 <prvRunTimeStatsCommand+0x1c>
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	0801b31c 	.word	0x0801b31c

080075e0 <prvTaskStatsCommand>:
{
 80075e0:	b510      	push	{r4, lr}
 80075e2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80075e4:	d009      	beq.n	80075fa <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80075e6:	225b      	movs	r2, #91	; 0x5b
 80075e8:	4905      	ldr	r1, [pc, #20]	; (8007600 <prvTaskStatsCommand+0x20>)
 80075ea:	f00c f9f9 	bl	80139e0 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 80075ee:	0020      	movs	r0, r4
 80075f0:	305a      	adds	r0, #90	; 0x5a
 80075f2:	f007 fd77 	bl	800f0e4 <vTaskList>
}
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80075fa:	b672      	cpsid	i
 80075fc:	e7fe      	b.n	80075fc <prvTaskStatsCommand+0x1c>
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	0801b370 	.word	0x0801b370

08007604 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8007604:	2800      	cmp	r0, #0
 8007606:	d008      	beq.n	800761a <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <resetCommand+0x1c>)
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <resetCommand+0x20>)
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	e7fd      	b.n	8007616 <resetCommand+0x12>
 800761a:	b672      	cpsid	i
 800761c:	e7fe      	b.n	800761c <resetCommand+0x18>
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	05fa0004 	.word	0x05fa0004

08007628 <RegisterUserCLICommands>:
}
 8007628:	4770      	bx	lr
	...

0800762c <vRegisterCLICommands>:
{
 800762c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 800762e:	482f      	ldr	r0, [pc, #188]	; (80076ec <vRegisterCLICommands+0xc0>)
 8007630:	f006 fa96 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8007634:	482e      	ldr	r0, [pc, #184]	; (80076f0 <vRegisterCLICommands+0xc4>)
 8007636:	f006 fa93 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 800763a:	482e      	ldr	r0, [pc, #184]	; (80076f4 <vRegisterCLICommands+0xc8>)
 800763c:	f006 fa90 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8007640:	482d      	ldr	r0, [pc, #180]	; (80076f8 <vRegisterCLICommands+0xcc>)
 8007642:	f006 fa8d 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 8007646:	482d      	ldr	r0, [pc, #180]	; (80076fc <vRegisterCLICommands+0xd0>)
 8007648:	f006 fa8a 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 800764c:	482c      	ldr	r0, [pc, #176]	; (8007700 <vRegisterCLICommands+0xd4>)
 800764e:	f006 fa87 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8007652:	482c      	ldr	r0, [pc, #176]	; (8007704 <vRegisterCLICommands+0xd8>)
 8007654:	f006 fa84 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8007658:	482b      	ldr	r0, [pc, #172]	; (8007708 <vRegisterCLICommands+0xdc>)
 800765a:	f006 fa81 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 800765e:	482b      	ldr	r0, [pc, #172]	; (800770c <vRegisterCLICommands+0xe0>)
 8007660:	f006 fa7e 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8007664:	482a      	ldr	r0, [pc, #168]	; (8007710 <vRegisterCLICommands+0xe4>)
 8007666:	f006 fa7b 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 800766a:	482a      	ldr	r0, [pc, #168]	; (8007714 <vRegisterCLICommands+0xe8>)
 800766c:	f006 fa78 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8007670:	4829      	ldr	r0, [pc, #164]	; (8007718 <vRegisterCLICommands+0xec>)
 8007672:	f006 fa75 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8007676:	4829      	ldr	r0, [pc, #164]	; (800771c <vRegisterCLICommands+0xf0>)
 8007678:	f006 fa72 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 800767c:	4828      	ldr	r0, [pc, #160]	; (8007720 <vRegisterCLICommands+0xf4>)
 800767e:	f006 fa6f 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8007682:	4828      	ldr	r0, [pc, #160]	; (8007724 <vRegisterCLICommands+0xf8>)
 8007684:	f006 fa6c 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8007688:	4827      	ldr	r0, [pc, #156]	; (8007728 <vRegisterCLICommands+0xfc>)
 800768a:	f006 fa69 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 800768e:	4827      	ldr	r0, [pc, #156]	; (800772c <vRegisterCLICommands+0x100>)
 8007690:	f006 fa66 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8007694:	4826      	ldr	r0, [pc, #152]	; (8007730 <vRegisterCLICommands+0x104>)
 8007696:	f006 fa63 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 800769a:	4826      	ldr	r0, [pc, #152]	; (8007734 <vRegisterCLICommands+0x108>)
 800769c:	f006 fa60 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 80076a0:	4825      	ldr	r0, [pc, #148]	; (8007738 <vRegisterCLICommands+0x10c>)
 80076a2:	f006 fa5d 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 80076a6:	4825      	ldr	r0, [pc, #148]	; (800773c <vRegisterCLICommands+0x110>)
 80076a8:	f006 fa5a 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 80076ac:	4824      	ldr	r0, [pc, #144]	; (8007740 <vRegisterCLICommands+0x114>)
 80076ae:	f006 fa57 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 80076b2:	4824      	ldr	r0, [pc, #144]	; (8007744 <vRegisterCLICommands+0x118>)
 80076b4:	f006 fa54 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 80076b8:	4823      	ldr	r0, [pc, #140]	; (8007748 <vRegisterCLICommands+0x11c>)
 80076ba:	f006 fa51 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 80076be:	4823      	ldr	r0, [pc, #140]	; (800774c <vRegisterCLICommands+0x120>)
 80076c0:	f006 fa4e 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 80076c4:	4822      	ldr	r0, [pc, #136]	; (8007750 <vRegisterCLICommands+0x124>)
 80076c6:	f006 fa4b 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 80076ca:	4822      	ldr	r0, [pc, #136]	; (8007754 <vRegisterCLICommands+0x128>)
 80076cc:	f006 fa48 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 80076d0:	4821      	ldr	r0, [pc, #132]	; (8007758 <vRegisterCLICommands+0x12c>)
 80076d2:	f006 fa45 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 80076d6:	4821      	ldr	r0, [pc, #132]	; (800775c <vRegisterCLICommands+0x130>)
 80076d8:	f006 fa42 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 80076dc:	4b20      	ldr	r3, [pc, #128]	; (8007760 <vRegisterCLICommands+0x134>)
 80076de:	221d      	movs	r2, #29
 80076e0:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80076e2:	f003 fed5 	bl	800b490 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80076e6:	f7ff ff9f 	bl	8007628 <RegisterUserCLICommands>
}
 80076ea:	bd10      	pop	{r4, pc}
 80076ec:	0801c254 	.word	0x0801c254
 80076f0:	0801c244 	.word	0x0801c244
 80076f4:	0801c234 	.word	0x0801c234
 80076f8:	0801c150 	.word	0x0801c150
 80076fc:	0801c1a0 	.word	0x0801c1a0
 8007700:	0801c274 	.word	0x0801c274
 8007704:	0801c214 	.word	0x0801c214
 8007708:	0801c1d0 	.word	0x0801c1d0
 800770c:	0801c2c4 	.word	0x0801c2c4
 8007710:	0801c1f0 	.word	0x0801c1f0
 8007714:	0801c284 	.word	0x0801c284
 8007718:	0801c140 	.word	0x0801c140
 800771c:	0801c264 	.word	0x0801c264
 8007720:	0801c2a4 	.word	0x0801c2a4
 8007724:	0801c1c0 	.word	0x0801c1c0
 8007728:	0801c180 	.word	0x0801c180
 800772c:	0801c2e4 	.word	0x0801c2e4
 8007730:	0801c170 	.word	0x0801c170
 8007734:	0801c294 	.word	0x0801c294
 8007738:	0801c304 	.word	0x0801c304
 800773c:	0801c1e0 	.word	0x0801c1e0
 8007740:	0801c1b0 	.word	0x0801c1b0
 8007744:	0801c2b4 	.word	0x0801c2b4
 8007748:	0801c130 	.word	0x0801c130
 800774c:	0801c224 	.word	0x0801c224
 8007750:	0801c190 	.word	0x0801c190
 8007754:	0801c160 	.word	0x0801c160
 8007758:	0801c2f4 	.word	0x0801c2f4
 800775c:	0801c2d4 	.word	0x0801c2d4
 8007760:	20006854 	.word	0x20006854

08007764 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8007764:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8007766:	1e45      	subs	r5, r0, #1
 8007768:	00ec      	lsls	r4, r5, #3
 800776a:	1b60      	subs	r0, r4, r5
 800776c:	00c0      	lsls	r0, r0, #3
 800776e:	4e05      	ldr	r6, [pc, #20]	; (8007784 <StopMsgDMA+0x20>)
 8007770:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007772:	f008 ff4e 	bl	8010612 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	00e4      	lsls	r4, r4, #3
 800777a:	59a3      	ldr	r3, [r4, r6]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
}
 8007780:	bd70      	pop	{r4, r5, r6, pc}
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	200016a8 	.word	0x200016a8

08007788 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8007788:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800778a:	1e44      	subs	r4, r0, #1
 800778c:	00e5      	lsls	r5, r4, #3
 800778e:	1b28      	subs	r0, r5, r4
 8007790:	00c0      	lsls	r0, r0, #3
 8007792:	4e07      	ldr	r6, [pc, #28]	; (80077b0 <StopStreamDMA+0x28>)
 8007794:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007796:	f008 ff3c 	bl	8010612 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800779a:	1b2d      	subs	r5, r5, r4
 800779c:	00ed      	lsls	r5, r5, #3
 800779e:	59aa      	ldr	r2, [r5, r6]
 80077a0:	2300      	movs	r3, #0
 80077a2:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 80077a4:	00a4      	lsls	r4, r4, #2
 80077a6:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <StopStreamDMA+0x2c>)
 80077a8:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 80077aa:	4a03      	ldr	r2, [pc, #12]	; (80077b8 <StopStreamDMA+0x30>)
 80077ac:	50a3      	str	r3, [r4, r2]

}
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	200018a0 	.word	0x200018a0
 80077b4:	20001418 	.word	0x20001418
 80077b8:	20001440 	.word	0x20001440

080077bc <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 80077bc:	b510      	push	{r4, lr}
 80077be:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80077c0:	f7ff ffd0 	bl	8007764 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 80077c4:	3c01      	subs	r4, #1
 80077c6:	00e0      	lsls	r0, r4, #3
 80077c8:	1b02      	subs	r2, r0, r4
 80077ca:	00d2      	lsls	r2, r2, #3
 80077cc:	4903      	ldr	r1, [pc, #12]	; (80077dc <SwitchMsgDMAToStream+0x20>)
 80077ce:	5851      	ldr	r1, [r2, r1]
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <SwitchMsgDMAToStream+0x24>)
 80077d2:	18d0      	adds	r0, r2, r3
 80077d4:	f004 fa60 	bl	800bc98 <DMA_STREAM_CH_Init>
}
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	200016a8 	.word	0x200016a8
 80077e0:	200018a0 	.word	0x200018a0

080077e4 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 80077e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e6:	46c6      	mov	lr, r8
 80077e8:	b500      	push	{lr}
 80077ea:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80077ec:	f7ff ffcc 	bl	8007788 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 80077f0:	1e7c      	subs	r4, r7, #1
 80077f2:	00e5      	lsls	r5, r4, #3
 80077f4:	1b2e      	subs	r6, r5, r4
 80077f6:	00f6      	lsls	r6, r6, #3
 80077f8:	4b11      	ldr	r3, [pc, #68]	; (8007840 <SwitchStreamDMAToMsg+0x5c>)
 80077fa:	18f6      	adds	r6, r6, r3
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <SwitchStreamDMAToMsg+0x60>)
 80077fe:	4698      	mov	r8, r3
 8007800:	1b2b      	subs	r3, r5, r4
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	4642      	mov	r2, r8
 8007806:	5899      	ldr	r1, [r3, r2]
 8007808:	0030      	movs	r0, r6
 800780a:	f004 f9cf 	bl	800bbac <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800780e:	1b2b      	subs	r3, r5, r4
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4443      	add	r3, r8
 8007814:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007816:	f003 fe5b 	bl	800b4d0 <GetPort>
 800781a:	2300      	movs	r3, #0
 800781c:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <SwitchStreamDMAToMsg+0x64>)
 800781e:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8007820:	1b2d      	subs	r5, r5, r4
 8007822:	00ed      	lsls	r5, r5, #3
 8007824:	4642      	mov	r2, r8
 8007826:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8007828:	00a4      	lsls	r4, r4, #2
 800782a:	4a08      	ldr	r2, [pc, #32]	; (800784c <SwitchStreamDMAToMsg+0x68>)
 800782c:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800782e:	0038      	movs	r0, r7
 8007830:	f005 ffcc 	bl	800d7cc <GetUart>
 8007834:	0031      	movs	r1, r6
 8007836:	f004 fe29 	bl	800c48c <DMA_MSG_RX_Setup>
		
}
 800783a:	bc80      	pop	{r7}
 800783c:	46b8      	mov	r8, r7
 800783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007840:	200016a8 	.word	0x200016a8
 8007844:	200018a0 	.word	0x200018a0
 8007848:	200010c0 	.word	0x200010c0
 800784c:	2000142c 	.word	0x2000142c

08007850 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	0005      	movs	r5, r0
 8007854:	000e      	movs	r6, r1
 8007856:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8007858:	f003 fe3a 	bl	800b4d0 <GetPort>
 800785c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <StartDMAstream+0x44>)
 8007860:	5c1b      	ldrb	r3, [r3, r0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d902      	bls.n	800786c <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007866:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007868:	2b03      	cmp	r3, #3
 800786a:	d112      	bne.n	8007892 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800786c:	0020      	movs	r0, r4
 800786e:	f7ff ffa5 	bl	80077bc <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8007872:	1e63      	subs	r3, r4, #1
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4a08      	ldr	r2, [pc, #32]	; (8007898 <StartDMAstream+0x48>)
 8007878:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800787a:	4a06      	ldr	r2, [pc, #24]	; (8007894 <StartDMAstream+0x44>)
 800787c:	2102      	movs	r1, #2
 800787e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8007880:	4a06      	ldr	r2, [pc, #24]	; (800789c <StartDMAstream+0x4c>)
 8007882:	2100      	movs	r1, #0
 8007884:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007886:	003a      	movs	r2, r7
 8007888:	0031      	movs	r1, r6
 800788a:	0028      	movs	r0, r5
 800788c:	f004 fe5c 	bl	800c548 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007890:	2000      	movs	r0, #0
}
 8007892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007894:	200010c0 	.word	0x200010c0
 8007898:	2000142c 	.word	0x2000142c
 800789c:	20001418 	.word	0x20001418

080078a0 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <DMA_IRQHandler+0x50>)
 80078a6:	5c1b      	ldrb	r3, [r3, r0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d008      	beq.n	80078be <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 80078ac:	3c01      	subs	r4, #1
 80078ae:	00e0      	lsls	r0, r4, #3
 80078b0:	1b00      	subs	r0, r0, r4
 80078b2:	00c0      	lsls	r0, r0, #3
 80078b4:	4c0f      	ldr	r4, [pc, #60]	; (80078f4 <DMA_IRQHandler+0x54>)
 80078b6:	1900      	adds	r0, r0, r4
 80078b8:	f008 fed4 	bl	8010664 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 80078be:	1e45      	subs	r5, r0, #1
 80078c0:	00e8      	lsls	r0, r5, #3
 80078c2:	1b40      	subs	r0, r0, r5
 80078c4:	00c0      	lsls	r0, r0, #3
 80078c6:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <DMA_IRQHandler+0x58>)
 80078c8:	18c0      	adds	r0, r0, r3
 80078ca:	f008 fecb 	bl	8010664 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 80078ce:	00aa      	lsls	r2, r5, #2
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <DMA_IRQHandler+0x5c>)
 80078d2:	58d2      	ldr	r2, [r2, r3]
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d006      	beq.n	80078e6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 80078d8:	4909      	ldr	r1, [pc, #36]	; (8007900 <DMA_IRQHandler+0x60>)
 80078da:	00ad      	lsls	r5, r5, #2
 80078dc:	586b      	ldr	r3, [r5, r1]
 80078de:	3301      	adds	r3, #1
 80078e0:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d8ea      	bhi.n	80078bc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80078e6:	0020      	movs	r0, r4
 80078e8:	f7ff ff4e 	bl	8007788 <StopStreamDMA>
}
 80078ec:	e7e6      	b.n	80078bc <DMA_IRQHandler+0x1c>
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	200010c0 	.word	0x200010c0
 80078f4:	200016a8 	.word	0x200016a8
 80078f8:	200018a0 	.word	0x200018a0
 80078fc:	20001440 	.word	0x20001440
 8007900:	20001418 	.word	0x20001418

08007904 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <ResetUartORE+0x24>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	2308      	movs	r3, #8
 800790a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800790c:	4a07      	ldr	r2, [pc, #28]	; (800792c <ResetUartORE+0x28>)
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007912:	4a07      	ldr	r2, [pc, #28]	; (8007930 <ResetUartORE+0x2c>)
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007918:	4a06      	ldr	r2, [pc, #24]	; (8007934 <ResetUartORE+0x30>)
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800791e:	4a06      	ldr	r2, [pc, #24]	; (8007938 <ResetUartORE+0x34>)
 8007920:	6812      	ldr	r2, [r2, #0]
 8007922:	6213      	str	r3, [r2, #32]
#endif
}
 8007924:	4770      	bx	lr
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	20006acc 	.word	0x20006acc
 800792c:	20006bb4 	.word	0x20006bb4
 8007930:	200069a8 	.word	0x200069a8
 8007934:	20006a58 	.word	0x20006a58
 8007938:	20006b44 	.word	0x20006b44

0800793c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	0006      	movs	r6, r0
 8007940:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007942:	f009 faff 	bl	8010f44 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007946:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <EE_VerifyPageFullWriteVariable+0xb4>)
 8007948:	881a      	ldrh	r2, [r3, #0]
 800794a:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800794c:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 8007956:	4928      	ldr	r1, [pc, #160]	; (80079f8 <EE_VerifyPageFullWriteVariable+0xbc>)
 8007958:	428a      	cmp	r2, r1
 800795a:	d007      	beq.n	800796c <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800795c:	3302      	adds	r3, #2
 800795e:	e005      	b.n	800796c <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8007960:	2a00      	cmp	r2, #0
 8007962:	d140      	bne.n	80079e6 <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 8007964:	4924      	ldr	r1, [pc, #144]	; (80079f8 <EE_VerifyPageFullWriteVariable+0xbc>)
 8007966:	428b      	cmp	r3, r1
 8007968:	d03f      	beq.n	80079ea <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 800796a:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800796c:	4a23      	ldr	r2, [pc, #140]	; (80079fc <EE_VerifyPageFullWriteVariable+0xc0>)
 800796e:	189c      	adds	r4, r3, r2
 8007970:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007972:	02db      	lsls	r3, r3, #11
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <EE_VerifyPageFullWriteVariable+0xc4>)
 8007976:	4694      	mov	ip, r2
 8007978:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	3201      	adds	r2, #1
 800797e:	d006      	beq.n	800798e <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007980:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8007982:	429c      	cmp	r4, r3
 8007984:	d3f9      	bcc.n	800797a <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 8007986:	f009 faf1 	bl	8010f6c <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800798a:	2080      	movs	r0, #128	; 0x80
}
 800798c:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 800798e:	002a      	movs	r2, r5
 8007990:	2300      	movs	r3, #0
 8007992:	0021      	movs	r1, r4
 8007994:	2001      	movs	r0, #1
 8007996:	f009 fb21 	bl	8010fdc <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800799a:	481a      	ldr	r0, [pc, #104]	; (8007a04 <EE_VerifyPageFullWriteVariable+0xc8>)
 800799c:	f009 faf0 	bl	8010f80 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d003      	beq.n	80079ac <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <EE_VerifyPageFullWriteVariable+0xcc>)
 80079a6:	69d8      	ldr	r0, [r3, #28]
 80079a8:	b280      	uxth	r0, r0
 80079aa:	e7ef      	b.n	800798c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80079ac:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <EE_VerifyPageFullWriteVariable+0xd0>)
 80079ae:	6913      	ldr	r3, [r2, #16]
 80079b0:	2101      	movs	r1, #1
 80079b2:	438b      	bics	r3, r1
 80079b4:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80079b6:	1ca1      	adds	r1, r4, #2
 80079b8:	0032      	movs	r2, r6
 80079ba:	2300      	movs	r3, #0
 80079bc:	2001      	movs	r0, #1
 80079be:	f009 fb0d 	bl	8010fdc <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079c2:	4810      	ldr	r0, [pc, #64]	; (8007a04 <EE_VerifyPageFullWriteVariable+0xc8>)
 80079c4:	f009 fadc 	bl	8010f80 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d003      	beq.n	80079d4 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <EE_VerifyPageFullWriteVariable+0xcc>)
 80079ce:	69d8      	ldr	r0, [r3, #28]
 80079d0:	b280      	uxth	r0, r0
 80079d2:	e7db      	b.n	800798c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <EE_VerifyPageFullWriteVariable+0xd0>)
 80079d6:	6913      	ldr	r3, [r2, #16]
 80079d8:	2101      	movs	r1, #1
 80079da:	438b      	bics	r3, r1
 80079dc:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <EE_VerifyPageFullWriteVariable+0xcc>)
 80079e0:	69d8      	ldr	r0, [r3, #28]
 80079e2:	b280      	uxth	r0, r0
 80079e4:	e7d2      	b.n	800798c <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 80079e6:	20ab      	movs	r0, #171	; 0xab
 80079e8:	e7d0      	b.n	800798c <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 80079ea:	2302      	movs	r3, #2
 80079ec:	e7be      	b.n	800796c <EE_VerifyPageFullWriteVariable+0x30>
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	0801e000 	.word	0x0801e000
 80079f4:	0801f000 	.word	0x0801f000
 80079f8:	0000eeee 	.word	0x0000eeee
 80079fc:	0001003c 	.word	0x0001003c
 8007a00:	0801effe 	.word	0x0801effe
 8007a04:	0000c350 	.word	0x0000c350
 8007a08:	20006da0 	.word	0x20006da0
 8007a0c:	40022000 	.word	0x40022000

08007a10 <EE_ReadVariable>:
{
 8007a10:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007a12:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <EE_ReadVariable+0x48>)
 8007a14:	881c      	ldrh	r4, [r3, #0]
 8007a16:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007a18:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <EE_ReadVariable+0x4c>)
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	d009      	beq.n	8007a36 <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d006      	beq.n	8007a34 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 8007a26:	20ab      	movs	r0, #171	; 0xab
 8007a28:	e003      	b.n	8007a32 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8007a2a:	3b02      	subs	r3, #2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007a30:	2000      	movs	r0, #0
}
 8007a32:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 8007a34:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007a36:	02e3      	lsls	r3, r4, #11
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <EE_ReadVariable+0x50>)
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007a3e:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 8007a40:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <EE_ReadVariable+0x54>)
 8007a42:	4694      	mov	ip, r2
 8007a44:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007a4a:	4282      	cmp	r2, r0
 8007a4c:	d0ed      	beq.n	8007a2a <EE_ReadVariable+0x1a>
      Address = Address - 4;
 8007a4e:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d8f8      	bhi.n	8007a46 <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007a54:	2001      	movs	r0, #1
 8007a56:	e7ec      	b.n	8007a32 <EE_ReadVariable+0x22>
 8007a58:	0801e000 	.word	0x0801e000
 8007a5c:	0801f000 	.word	0x0801f000
 8007a60:	0801effe 	.word	0x0801effe
 8007a64:	0801e002 	.word	0x0801e002

08007a68 <EE_WriteVariable>:
{
 8007a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6a:	46de      	mov	lr, fp
 8007a6c:	4657      	mov	r7, sl
 8007a6e:	464e      	mov	r6, r9
 8007a70:	4645      	mov	r5, r8
 8007a72:	b5e0      	push	{r5, r6, r7, lr}
 8007a74:	b083      	sub	sp, #12
 8007a76:	0006      	movs	r6, r0
 8007a78:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 8007a7a:	f009 fa63 	bl	8010f44 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007a7e:	0029      	movs	r1, r5
 8007a80:	0030      	movs	r0, r6
 8007a82:	f7ff ff5b 	bl	800793c <EE_VerifyPageFullWriteVariable>
 8007a86:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007a88:	2880      	cmp	r0, #128	; 0x80
 8007a8a:	d009      	beq.n	8007aa0 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 8007a8c:	f009 fa6e 	bl	8010f6c <HAL_FLASH_Lock>
}
 8007a90:	0020      	movs	r0, r4
 8007a92:	b003      	add	sp, #12
 8007a94:	bcf0      	pop	{r4, r5, r6, r7}
 8007a96:	46bb      	mov	fp, r7
 8007a98:	46b2      	mov	sl, r6
 8007a9a:	46a9      	mov	r9, r5
 8007a9c:	46a0      	mov	r8, r4
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007aa0:	f009 fa50 	bl	8010f44 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007aa4:	4b40      	ldr	r3, [pc, #256]	; (8007ba8 <EE_WriteVariable+0x140>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007aaa:	4a40      	ldr	r2, [pc, #256]	; (8007bac <EE_WriteVariable+0x144>)
 8007aac:	8812      	ldrh	r2, [r2, #0]
 8007aae:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007ab4:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d1e8      	bne.n	8007a8c <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007aba:	4b3c      	ldr	r3, [pc, #240]	; (8007bac <EE_WriteVariable+0x144>)
 8007abc:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007abe:	4b3a      	ldr	r3, [pc, #232]	; (8007ba8 <EE_WriteVariable+0x140>)
 8007ac0:	469a      	mov	sl, r3
 8007ac2:	e003      	b.n	8007acc <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007ac4:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <EE_WriteVariable+0x140>)
 8007ac6:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007ac8:	4b38      	ldr	r3, [pc, #224]	; (8007bac <EE_WriteVariable+0x144>)
 8007aca:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007acc:	4a38      	ldr	r2, [pc, #224]	; (8007bb0 <EE_WriteVariable+0x148>)
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f009 fa82 	bl	8010fdc <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ad8:	4836      	ldr	r0, [pc, #216]	; (8007bb4 <EE_WriteVariable+0x14c>)
 8007ada:	f009 fa51 	bl	8010f80 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d003      	beq.n	8007aea <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 8007ae2:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <EE_WriteVariable+0x150>)
 8007ae4:	69dc      	ldr	r4, [r3, #28]
 8007ae6:	b2a4      	uxth	r4, r4
 8007ae8:	e7d0      	b.n	8007a8c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007aea:	4a34      	ldr	r2, [pc, #208]	; (8007bbc <EE_WriteVariable+0x154>)
 8007aec:	6913      	ldr	r3, [r2, #16]
 8007aee:	2101      	movs	r1, #1
 8007af0:	438b      	bics	r3, r1
 8007af2:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007af4:	0029      	movs	r1, r5
 8007af6:	0030      	movs	r0, r6
 8007af8:	f7ff ff20 	bl	800793c <EE_VerifyPageFullWriteVariable>
 8007afc:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d150      	bne.n	8007ba4 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007b02:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007b04:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <EE_WriteVariable+0x158>)
 8007b06:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b08:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007b0a:	4f2e      	ldr	r7, [pc, #184]	; (8007bc4 <EE_WriteVariable+0x15c>)
 8007b0c:	e003      	b.n	8007b16 <EE_WriteVariable+0xae>
 8007b0e:	3501      	adds	r5, #1
 8007b10:	b2ad      	uxth	r5, r5
 8007b12:	42bd      	cmp	r5, r7
 8007b14:	d00f      	beq.n	8007b36 <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007b16:	42ae      	cmp	r6, r5
 8007b18:	d0f9      	beq.n	8007b0e <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	0028      	movs	r0, r5
 8007b1e:	f7ff ff77 	bl	8007a10 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007b22:	2801      	cmp	r0, #1
 8007b24:	d0f3      	beq.n	8007b0e <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b26:	464b      	mov	r3, r9
 8007b28:	8819      	ldrh	r1, [r3, #0]
 8007b2a:	0028      	movs	r0, r5
 8007b2c:	f7ff ff06 	bl	800793c <EE_VerifyPageFullWriteVariable>
 8007b30:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007b32:	d0ec      	beq.n	8007b0e <EE_WriteVariable+0xa6>
 8007b34:	e7aa      	b.n	8007a8c <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007b36:	4658      	mov	r0, fp
 8007b38:	f009 fac8 	bl	80110cc <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b3c:	481d      	ldr	r0, [pc, #116]	; (8007bb4 <EE_WriteVariable+0x14c>)
 8007b3e:	f009 fa1f 	bl	8010f80 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d003      	beq.n	8007b4e <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 8007b46:	4b1c      	ldr	r3, [pc, #112]	; (8007bb8 <EE_WriteVariable+0x150>)
 8007b48:	69dc      	ldr	r4, [r3, #28]
 8007b4a:	b2a4      	uxth	r4, r4
 8007b4c:	e79e      	b.n	8007a8c <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007b4e:	2080      	movs	r0, #128	; 0x80
 8007b50:	0100      	lsls	r0, r0, #4
 8007b52:	4458      	add	r0, fp
 8007b54:	f009 faba 	bl	80110cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b58:	4816      	ldr	r0, [pc, #88]	; (8007bb4 <EE_WriteVariable+0x14c>)
 8007b5a:	f009 fa11 	bl	8010f80 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d003      	beq.n	8007b6a <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <EE_WriteVariable+0x150>)
 8007b64:	69dc      	ldr	r4, [r3, #28]
 8007b66:	b2a4      	uxth	r4, r4
 8007b68:	e790      	b.n	8007a8c <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b6a:	4a14      	ldr	r2, [pc, #80]	; (8007bbc <EE_WriteVariable+0x154>)
 8007b6c:	6913      	ldr	r3, [r2, #16]
 8007b6e:	2102      	movs	r1, #2
 8007b70:	438b      	bics	r3, r1
 8007b72:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007b74:	2200      	movs	r2, #0
 8007b76:	2300      	movs	r3, #0
 8007b78:	4651      	mov	r1, sl
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	f009 fa2e 	bl	8010fdc <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b80:	480c      	ldr	r0, [pc, #48]	; (8007bb4 <EE_WriteVariable+0x14c>)
 8007b82:	f009 f9fd 	bl	8010f80 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d003      	beq.n	8007b92 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <EE_WriteVariable+0x150>)
 8007b8c:	69dc      	ldr	r4, [r3, #28]
 8007b8e:	b2a4      	uxth	r4, r4
 8007b90:	e77c      	b.n	8007a8c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b92:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <EE_WriteVariable+0x154>)
 8007b94:	6913      	ldr	r3, [r2, #16]
 8007b96:	2101      	movs	r1, #1
 8007b98:	438b      	bics	r3, r1
 8007b9a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 8007b9c:	f009 f9e6 	bl	8010f6c <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007ba0:	9c01      	ldr	r4, [sp, #4]
 8007ba2:	e773      	b.n	8007a8c <EE_WriteVariable+0x24>
    return EepromStatus;
 8007ba4:	9c01      	ldr	r4, [sp, #4]
 8007ba6:	e771      	b.n	8007a8c <EE_WriteVariable+0x24>
 8007ba8:	0801e000 	.word	0x0801e000
 8007bac:	0801f000 	.word	0x0801f000
 8007bb0:	0000eeee 	.word	0x0000eeee
 8007bb4:	0000c350 	.word	0x0000c350
 8007bb8:	20006da0 	.word	0x20006da0
 8007bbc:	40022000 	.word	0x40022000
 8007bc0:	20001454 	.word	0x20001454
 8007bc4:	00000401 	.word	0x00000401

08007bc8 <EE_Format>:
{
 8007bc8:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007bca:	f009 f9bb 	bl	8010f44 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8007bce:	4829      	ldr	r0, [pc, #164]	; (8007c74 <EE_Format+0xac>)
 8007bd0:	f009 fa7c 	bl	80110cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bd4:	4828      	ldr	r0, [pc, #160]	; (8007c78 <EE_Format+0xb0>)
 8007bd6:	f009 f9d3 	bl	8010f80 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d003      	beq.n	8007be6 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007bde:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <EE_Format+0xb4>)
 8007be0:	69d8      	ldr	r0, [r3, #28]
 8007be2:	b280      	uxth	r0, r0
}
 8007be4:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007be6:	4826      	ldr	r0, [pc, #152]	; (8007c80 <EE_Format+0xb8>)
 8007be8:	f009 fa70 	bl	80110cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bec:	4822      	ldr	r0, [pc, #136]	; (8007c78 <EE_Format+0xb0>)
 8007bee:	f009 f9c7 	bl	8010f80 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d003      	beq.n	8007bfe <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <EE_Format+0xb4>)
 8007bf8:	69d8      	ldr	r0, [r3, #28]
 8007bfa:	b280      	uxth	r0, r0
 8007bfc:	e7f2      	b.n	8007be4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <EE_Format+0xbc>)
 8007c00:	6913      	ldr	r3, [r2, #16]
 8007c02:	2102      	movs	r1, #2
 8007c04:	438b      	bics	r3, r1
 8007c06:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4919      	ldr	r1, [pc, #100]	; (8007c74 <EE_Format+0xac>)
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f009 f9e4 	bl	8010fdc <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c14:	4818      	ldr	r0, [pc, #96]	; (8007c78 <EE_Format+0xb0>)
 8007c16:	f009 f9b3 	bl	8010f80 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d003      	beq.n	8007c26 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007c1e:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <EE_Format+0xb4>)
 8007c20:	69d8      	ldr	r0, [r3, #28]
 8007c22:	b280      	uxth	r0, r0
 8007c24:	e7de      	b.n	8007be4 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c26:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <EE_Format+0xbc>)
 8007c28:	6913      	ldr	r3, [r2, #16]
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	438b      	bics	r3, r1
 8007c2e:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c30:	4815      	ldr	r0, [pc, #84]	; (8007c88 <EE_Format+0xc0>)
 8007c32:	f009 fa4b 	bl	80110cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c36:	4810      	ldr	r0, [pc, #64]	; (8007c78 <EE_Format+0xb0>)
 8007c38:	f009 f9a2 	bl	8010f80 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d003      	beq.n	8007c48 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007c40:	4b0e      	ldr	r3, [pc, #56]	; (8007c7c <EE_Format+0xb4>)
 8007c42:	69d8      	ldr	r0, [r3, #28]
 8007c44:	b280      	uxth	r0, r0
 8007c46:	e7cd      	b.n	8007be4 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c48:	4810      	ldr	r0, [pc, #64]	; (8007c8c <EE_Format+0xc4>)
 8007c4a:	f009 fa3f 	bl	80110cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c4e:	480a      	ldr	r0, [pc, #40]	; (8007c78 <EE_Format+0xb0>)
 8007c50:	f009 f996 	bl	8010f80 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d003      	beq.n	8007c60 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007c58:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <EE_Format+0xb4>)
 8007c5a:	69d8      	ldr	r0, [r3, #28]
 8007c5c:	b280      	uxth	r0, r0
 8007c5e:	e7c1      	b.n	8007be4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c60:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <EE_Format+0xbc>)
 8007c62:	6913      	ldr	r3, [r2, #16]
 8007c64:	2101      	movs	r1, #1
 8007c66:	438b      	bics	r3, r1
 8007c68:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007c6a:	f009 f97f 	bl	8010f6c <HAL_FLASH_Lock>
  return FlashStatus;
 8007c6e:	2000      	movs	r0, #0
 8007c70:	e7b8      	b.n	8007be4 <EE_Format+0x1c>
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	0801e000 	.word	0x0801e000
 8007c78:	0000c350 	.word	0x0000c350
 8007c7c:	20006da0 	.word	0x20006da0
 8007c80:	0801e800 	.word	0x0801e800
 8007c84:	40022000 	.word	0x40022000
 8007c88:	0801f000 	.word	0x0801f000
 8007c8c:	0801f800 	.word	0x0801f800

08007c90 <EE_Init>:
{
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	46ce      	mov	lr, r9
 8007c94:	4647      	mov	r7, r8
 8007c96:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8007c98:	f009 f954 	bl	8010f44 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007c9c:	4bbf      	ldr	r3, [pc, #764]	; (8007f9c <EE_Init+0x30c>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007ca2:	4abf      	ldr	r2, [pc, #764]	; (8007fa0 <EE_Init+0x310>)
 8007ca4:	8812      	ldrh	r2, [r2, #0]
 8007ca6:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007ca8:	49be      	ldr	r1, [pc, #760]	; (8007fa4 <EE_Init+0x314>)
 8007caa:	428b      	cmp	r3, r1
 8007cac:	d100      	bne.n	8007cb0 <EE_Init+0x20>
 8007cae:	e075      	b.n	8007d9c <EE_Init+0x10c>
 8007cb0:	49bd      	ldr	r1, [pc, #756]	; (8007fa8 <EE_Init+0x318>)
 8007cb2:	428b      	cmp	r3, r1
 8007cb4:	d012      	beq.n	8007cdc <EE_Init+0x4c>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d100      	bne.n	8007cbc <EE_Init+0x2c>
 8007cba:	e10b      	b.n	8007ed4 <EE_Init+0x244>
      FlashStatus = EE_Format();
 8007cbc:	f7ff ff84 	bl	8007bc8 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cc0:	48ba      	ldr	r0, [pc, #744]	; (8007fac <EE_Init+0x31c>)
 8007cc2:	f009 f95d 	bl	8010f80 <FLASH_WaitForLastOperation>
 8007cc6:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	d102      	bne.n	8007cd2 <EE_Init+0x42>
	HAL_FLASH_Lock();
 8007ccc:	f009 f94e 	bl	8010f6c <HAL_FLASH_Lock>
  return HAL_OK;
 8007cd0:	2500      	movs	r5, #0
}
 8007cd2:	0028      	movs	r0, r5
 8007cd4:	bcc0      	pop	{r6, r7}
 8007cd6:	46b9      	mov	r9, r7
 8007cd8:	46b0      	mov	r8, r6
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	d00d      	beq.n	8007cfc <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007ce0:	4bb0      	ldr	r3, [pc, #704]	; (8007fa4 <EE_Init+0x314>)
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d028      	beq.n	8007d38 <EE_Init+0xa8>
        FlashStatus = EE_Format();
 8007ce6:	f7ff ff6f 	bl	8007bc8 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cea:	48b0      	ldr	r0, [pc, #704]	; (8007fac <EE_Init+0x31c>)
 8007cec:	f009 f948 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0eb      	beq.n	8007ccc <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007cf4:	4bae      	ldr	r3, [pc, #696]	; (8007fb0 <EE_Init+0x320>)
 8007cf6:	69dd      	ldr	r5, [r3, #28]
 8007cf8:	b2ad      	uxth	r5, r5
 8007cfa:	e7ea      	b.n	8007cd2 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007cfc:	48a7      	ldr	r0, [pc, #668]	; (8007f9c <EE_Init+0x30c>)
 8007cfe:	f009 f9e5 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d02:	48aa      	ldr	r0, [pc, #680]	; (8007fac <EE_Init+0x31c>)
 8007d04:	f009 f93c 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d003      	beq.n	8007d14 <EE_Init+0x84>
          return pFlash.ErrorCode;
 8007d0c:	4ba8      	ldr	r3, [pc, #672]	; (8007fb0 <EE_Init+0x320>)
 8007d0e:	69dd      	ldr	r5, [r3, #28]
 8007d10:	b2ad      	uxth	r5, r5
 8007d12:	e7de      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d14:	48a7      	ldr	r0, [pc, #668]	; (8007fb4 <EE_Init+0x324>)
 8007d16:	f009 f9d9 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d1a:	48a4      	ldr	r0, [pc, #656]	; (8007fac <EE_Init+0x31c>)
 8007d1c:	f009 f930 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d105      	bne.n	8007d30 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d24:	4aa4      	ldr	r2, [pc, #656]	; (8007fb8 <EE_Init+0x328>)
 8007d26:	6913      	ldr	r3, [r2, #16]
 8007d28:	2102      	movs	r1, #2
 8007d2a:	438b      	bics	r3, r1
 8007d2c:	6113      	str	r3, [r2, #16]
 8007d2e:	e7cd      	b.n	8007ccc <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007d30:	4b9f      	ldr	r3, [pc, #636]	; (8007fb0 <EE_Init+0x320>)
 8007d32:	69dd      	ldr	r5, [r3, #28]
 8007d34:	b2ad      	uxth	r5, r5
 8007d36:	e7cc      	b.n	8007cd2 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d38:	4898      	ldr	r0, [pc, #608]	; (8007f9c <EE_Init+0x30c>)
 8007d3a:	f009 f9c7 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d3e:	489b      	ldr	r0, [pc, #620]	; (8007fac <EE_Init+0x31c>)
 8007d40:	f009 f91e 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d003      	beq.n	8007d50 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 8007d48:	4b99      	ldr	r3, [pc, #612]	; (8007fb0 <EE_Init+0x320>)
 8007d4a:	69dd      	ldr	r5, [r3, #28]
 8007d4c:	b2ad      	uxth	r5, r5
 8007d4e:	e7c0      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d50:	4898      	ldr	r0, [pc, #608]	; (8007fb4 <EE_Init+0x324>)
 8007d52:	f009 f9bb 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d56:	4895      	ldr	r0, [pc, #596]	; (8007fac <EE_Init+0x31c>)
 8007d58:	f009 f912 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d003      	beq.n	8007d68 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 8007d60:	4b93      	ldr	r3, [pc, #588]	; (8007fb0 <EE_Init+0x320>)
 8007d62:	69dd      	ldr	r5, [r3, #28]
 8007d64:	b2ad      	uxth	r5, r5
 8007d66:	e7b4      	b.n	8007cd2 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d68:	4a93      	ldr	r2, [pc, #588]	; (8007fb8 <EE_Init+0x328>)
 8007d6a:	6913      	ldr	r3, [r2, #16]
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	438b      	bics	r3, r1
 8007d70:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	498a      	ldr	r1, [pc, #552]	; (8007fa0 <EE_Init+0x310>)
 8007d78:	2001      	movs	r0, #1
 8007d7a:	f009 f92f 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d7e:	488b      	ldr	r0, [pc, #556]	; (8007fac <EE_Init+0x31c>)
 8007d80:	f009 f8fe 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d105      	bne.n	8007d94 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d88:	4a8b      	ldr	r2, [pc, #556]	; (8007fb8 <EE_Init+0x328>)
 8007d8a:	6913      	ldr	r3, [r2, #16]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	438b      	bics	r3, r1
 8007d90:	6113      	str	r3, [r2, #16]
 8007d92:	e79b      	b.n	8007ccc <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007d94:	4b86      	ldr	r3, [pc, #536]	; (8007fb0 <EE_Init+0x320>)
 8007d96:	69dd      	ldr	r5, [r3, #28]
 8007d98:	b2ad      	uxth	r5, r5
 8007d9a:	e79a      	b.n	8007cd2 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d158      	bne.n	8007e52 <EE_Init+0x1c2>
 8007da0:	2401      	movs	r4, #1
  int16_t x = -1;
 8007da2:	2601      	movs	r6, #1
 8007da4:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007da6:	4f85      	ldr	r7, [pc, #532]	; (8007fbc <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007da8:	4b85      	ldr	r3, [pc, #532]	; (8007fc0 <EE_Init+0x330>)
 8007daa:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007dac:	4699      	mov	r9, r3
 8007dae:	e005      	b.n	8007dbc <EE_Init+0x12c>
            x = VarIdx;
 8007db0:	b226      	sxth	r6, r4
 8007db2:	e008      	b.n	8007dc6 <EE_Init+0x136>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007db4:	3401      	adds	r4, #1
 8007db6:	4b83      	ldr	r3, [pc, #524]	; (8007fc4 <EE_Init+0x334>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	d018      	beq.n	8007dee <EE_Init+0x15e>
 8007dbc:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007dbe:	883b      	ldrh	r3, [r7, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	42ab      	cmp	r3, r5
 8007dc4:	d0f4      	beq.n	8007db0 <EE_Init+0x120>
          if (VarIdx != x)
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d0f4      	beq.n	8007db4 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007dca:	4641      	mov	r1, r8
 8007dcc:	0028      	movs	r0, r5
 8007dce:	f7ff fe1f 	bl	8007a10 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007dd2:	2801      	cmp	r0, #1
 8007dd4:	d0ee      	beq.n	8007db4 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	8819      	ldrh	r1, [r3, #0]
 8007dda:	0028      	movs	r0, r5
 8007ddc:	f7ff fdae 	bl	800793c <EE_VerifyPageFullWriteVariable>
 8007de0:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007de2:	4872      	ldr	r0, [pc, #456]	; (8007fac <EE_Init+0x31c>)
 8007de4:	f009 f8cc 	bl	8010f80 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d0e3      	beq.n	8007db4 <EE_Init+0x124>
 8007dec:	e771      	b.n	8007cd2 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	496a      	ldr	r1, [pc, #424]	; (8007f9c <EE_Init+0x30c>)
 8007df4:	2001      	movs	r0, #1
 8007df6:	f009 f8f1 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dfa:	486c      	ldr	r0, [pc, #432]	; (8007fac <EE_Init+0x31c>)
 8007dfc:	f009 f8c0 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d003      	beq.n	8007e0c <EE_Init+0x17c>
          return pFlash.ErrorCode;
 8007e04:	4b6a      	ldr	r3, [pc, #424]	; (8007fb0 <EE_Init+0x320>)
 8007e06:	69dd      	ldr	r5, [r3, #28]
 8007e08:	b2ad      	uxth	r5, r5
 8007e0a:	e762      	b.n	8007cd2 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e0c:	4a6a      	ldr	r2, [pc, #424]	; (8007fb8 <EE_Init+0x328>)
 8007e0e:	6913      	ldr	r3, [r2, #16]
 8007e10:	2101      	movs	r1, #1
 8007e12:	438b      	bics	r3, r1
 8007e14:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e16:	4862      	ldr	r0, [pc, #392]	; (8007fa0 <EE_Init+0x310>)
 8007e18:	f009 f958 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e1c:	4863      	ldr	r0, [pc, #396]	; (8007fac <EE_Init+0x31c>)
 8007e1e:	f009 f8af 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d003      	beq.n	8007e2e <EE_Init+0x19e>
          return pFlash.ErrorCode;
 8007e26:	4b62      	ldr	r3, [pc, #392]	; (8007fb0 <EE_Init+0x320>)
 8007e28:	69dd      	ldr	r5, [r3, #28]
 8007e2a:	b2ad      	uxth	r5, r5
 8007e2c:	e751      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e2e:	4866      	ldr	r0, [pc, #408]	; (8007fc8 <EE_Init+0x338>)
 8007e30:	f009 f94c 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e34:	485d      	ldr	r0, [pc, #372]	; (8007fac <EE_Init+0x31c>)
 8007e36:	f009 f8a3 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d105      	bne.n	8007e4a <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007e3e:	4a5e      	ldr	r2, [pc, #376]	; (8007fb8 <EE_Init+0x328>)
 8007e40:	6913      	ldr	r3, [r2, #16]
 8007e42:	2102      	movs	r1, #2
 8007e44:	438b      	bics	r3, r1
 8007e46:	6113      	str	r3, [r2, #16]
 8007e48:	e740      	b.n	8007ccc <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007e4a:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <EE_Init+0x320>)
 8007e4c:	69dd      	ldr	r5, [r3, #28]
 8007e4e:	b2ad      	uxth	r5, r5
 8007e50:	e73f      	b.n	8007cd2 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007e52:	4b55      	ldr	r3, [pc, #340]	; (8007fa8 <EE_Init+0x318>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d00b      	beq.n	8007e70 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 8007e58:	f7ff feb6 	bl	8007bc8 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e5c:	4853      	ldr	r0, [pc, #332]	; (8007fac <EE_Init+0x31c>)
 8007e5e:	f009 f88f 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d100      	bne.n	8007e68 <EE_Init+0x1d8>
 8007e66:	e731      	b.n	8007ccc <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007e68:	4b51      	ldr	r3, [pc, #324]	; (8007fb0 <EE_Init+0x320>)
 8007e6a:	69dd      	ldr	r5, [r3, #28]
 8007e6c:	b2ad      	uxth	r5, r5
 8007e6e:	e730      	b.n	8007cd2 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e70:	484b      	ldr	r0, [pc, #300]	; (8007fa0 <EE_Init+0x310>)
 8007e72:	f009 f92b 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e76:	484d      	ldr	r0, [pc, #308]	; (8007fac <EE_Init+0x31c>)
 8007e78:	f009 f882 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d003      	beq.n	8007e88 <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 8007e80:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <EE_Init+0x320>)
 8007e82:	69dd      	ldr	r5, [r3, #28]
 8007e84:	b2ad      	uxth	r5, r5
 8007e86:	e724      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e88:	484f      	ldr	r0, [pc, #316]	; (8007fc8 <EE_Init+0x338>)
 8007e8a:	f009 f91f 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e8e:	4847      	ldr	r0, [pc, #284]	; (8007fac <EE_Init+0x31c>)
 8007e90:	f009 f876 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d003      	beq.n	8007ea0 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8007e98:	4b45      	ldr	r3, [pc, #276]	; (8007fb0 <EE_Init+0x320>)
 8007e9a:	69dd      	ldr	r5, [r3, #28]
 8007e9c:	b2ad      	uxth	r5, r5
 8007e9e:	e718      	b.n	8007cd2 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007ea0:	4a45      	ldr	r2, [pc, #276]	; (8007fb8 <EE_Init+0x328>)
 8007ea2:	6913      	ldr	r3, [r2, #16]
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	438b      	bics	r3, r1
 8007ea8:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2300      	movs	r3, #0
 8007eae:	493b      	ldr	r1, [pc, #236]	; (8007f9c <EE_Init+0x30c>)
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f009 f893 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007eb6:	483d      	ldr	r0, [pc, #244]	; (8007fac <EE_Init+0x31c>)
 8007eb8:	f009 f862 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d105      	bne.n	8007ecc <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007ec0:	4a3d      	ldr	r2, [pc, #244]	; (8007fb8 <EE_Init+0x328>)
 8007ec2:	6913      	ldr	r3, [r2, #16]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	438b      	bics	r3, r1
 8007ec8:	6113      	str	r3, [r2, #16]
 8007eca:	e6ff      	b.n	8007ccc <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007ecc:	4b38      	ldr	r3, [pc, #224]	; (8007fb0 <EE_Init+0x320>)
 8007ece:	69dd      	ldr	r5, [r3, #28]
 8007ed0:	b2ad      	uxth	r5, r5
 8007ed2:	e6fe      	b.n	8007cd2 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d00a      	beq.n	8007eee <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007ed8:	4b33      	ldr	r3, [pc, #204]	; (8007fa8 <EE_Init+0x318>)
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d011      	beq.n	8007f02 <EE_Init+0x272>
 8007ede:	2401      	movs	r4, #1
  int16_t x = -1;
 8007ee0:	2601      	movs	r6, #1
 8007ee2:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007ee4:	4f39      	ldr	r7, [pc, #228]	; (8007fcc <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007ee6:	4b36      	ldr	r3, [pc, #216]	; (8007fc0 <EE_Init+0x330>)
 8007ee8:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007eea:	4699      	mov	r9, r3
 8007eec:	e02d      	b.n	8007f4a <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 8007eee:	f7ff fe6b 	bl	8007bc8 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ef2:	482e      	ldr	r0, [pc, #184]	; (8007fac <EE_Init+0x31c>)
 8007ef4:	f009 f844 	bl	8010f80 <FLASH_WaitForLastOperation>
 8007ef8:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	d100      	bne.n	8007f00 <EE_Init+0x270>
 8007efe:	e6e5      	b.n	8007ccc <EE_Init+0x3c>
 8007f00:	e6e7      	b.n	8007cd2 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007f02:	4827      	ldr	r0, [pc, #156]	; (8007fa0 <EE_Init+0x310>)
 8007f04:	f009 f8e2 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f08:	4828      	ldr	r0, [pc, #160]	; (8007fac <EE_Init+0x31c>)
 8007f0a:	f009 f839 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d003      	beq.n	8007f1a <EE_Init+0x28a>
          return pFlash.ErrorCode;
 8007f12:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <EE_Init+0x320>)
 8007f14:	69dd      	ldr	r5, [r3, #28]
 8007f16:	b2ad      	uxth	r5, r5
 8007f18:	e6db      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007f1a:	482b      	ldr	r0, [pc, #172]	; (8007fc8 <EE_Init+0x338>)
 8007f1c:	f009 f8d6 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f20:	4822      	ldr	r0, [pc, #136]	; (8007fac <EE_Init+0x31c>)
 8007f22:	f009 f82d 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d105      	bne.n	8007f36 <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007f2a:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <EE_Init+0x328>)
 8007f2c:	6913      	ldr	r3, [r2, #16]
 8007f2e:	2102      	movs	r1, #2
 8007f30:	438b      	bics	r3, r1
 8007f32:	6113      	str	r3, [r2, #16]
 8007f34:	e6ca      	b.n	8007ccc <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007f36:	4b1e      	ldr	r3, [pc, #120]	; (8007fb0 <EE_Init+0x320>)
 8007f38:	69dd      	ldr	r5, [r3, #28]
 8007f3a:	b2ad      	uxth	r5, r5
 8007f3c:	e6c9      	b.n	8007cd2 <EE_Init+0x42>
            x = VarIdx;
 8007f3e:	b226      	sxth	r6, r4
 8007f40:	e008      	b.n	8007f54 <EE_Init+0x2c4>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007f42:	3401      	adds	r4, #1
 8007f44:	4b1f      	ldr	r3, [pc, #124]	; (8007fc4 <EE_Init+0x334>)
 8007f46:	429c      	cmp	r4, r3
 8007f48:	d018      	beq.n	8007f7c <EE_Init+0x2ec>
 8007f4a:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007f4c:	883b      	ldrh	r3, [r7, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	d0f4      	beq.n	8007f3e <EE_Init+0x2ae>
          if (VarIdx != x)
 8007f54:	42a6      	cmp	r6, r4
 8007f56:	d0f4      	beq.n	8007f42 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007f58:	4641      	mov	r1, r8
 8007f5a:	0028      	movs	r0, r5
 8007f5c:	f7ff fd58 	bl	8007a10 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007f60:	2801      	cmp	r0, #1
 8007f62:	d0ee      	beq.n	8007f42 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007f64:	464b      	mov	r3, r9
 8007f66:	8819      	ldrh	r1, [r3, #0]
 8007f68:	0028      	movs	r0, r5
 8007f6a:	f7ff fce7 	bl	800793c <EE_VerifyPageFullWriteVariable>
 8007f6e:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f70:	480e      	ldr	r0, [pc, #56]	; (8007fac <EE_Init+0x31c>)
 8007f72:	f009 f805 	bl	8010f80 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d0e3      	beq.n	8007f42 <EE_Init+0x2b2>
 8007f7a:	e6aa      	b.n	8007cd2 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4907      	ldr	r1, [pc, #28]	; (8007fa0 <EE_Init+0x310>)
 8007f82:	2001      	movs	r0, #1
 8007f84:	f009 f82a 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <EE_Init+0x31c>)
 8007f8a:	f008 fff9 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d01e      	beq.n	8007fd0 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8007f92:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <EE_Init+0x320>)
 8007f94:	69dd      	ldr	r5, [r3, #28]
 8007f96:	b2ad      	uxth	r5, r5
 8007f98:	e69b      	b.n	8007cd2 <EE_Init+0x42>
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	0801e000 	.word	0x0801e000
 8007fa0:	0801f000 	.word	0x0801f000
 8007fa4:	0000eeee 	.word	0x0000eeee
 8007fa8:	0000ffff 	.word	0x0000ffff
 8007fac:	0000c350 	.word	0x0000c350
 8007fb0:	20006da0 	.word	0x20006da0
 8007fb4:	0801e800 	.word	0x0801e800
 8007fb8:	40022000 	.word	0x40022000
 8007fbc:	0801e006 	.word	0x0801e006
 8007fc0:	20001454 	.word	0x20001454
 8007fc4:	00000401 	.word	0x00000401
 8007fc8:	0801f800 	.word	0x0801f800
 8007fcc:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007fd0:	4a11      	ldr	r2, [pc, #68]	; (8008018 <EE_Init+0x388>)
 8007fd2:	6913      	ldr	r3, [r2, #16]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	438b      	bics	r3, r1
 8007fd8:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007fda:	4810      	ldr	r0, [pc, #64]	; (800801c <EE_Init+0x38c>)
 8007fdc:	f009 f876 	bl	80110cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fe0:	480f      	ldr	r0, [pc, #60]	; (8008020 <EE_Init+0x390>)
 8007fe2:	f008 ffcd 	bl	8010f80 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d003      	beq.n	8007ff2 <EE_Init+0x362>
          return pFlash.ErrorCode;
 8007fea:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <EE_Init+0x394>)
 8007fec:	69dd      	ldr	r5, [r3, #28]
 8007fee:	b2ad      	uxth	r5, r5
 8007ff0:	e66f      	b.n	8007cd2 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ff2:	480d      	ldr	r0, [pc, #52]	; (8008028 <EE_Init+0x398>)
 8007ff4:	f009 f86a 	bl	80110cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ff8:	4809      	ldr	r0, [pc, #36]	; (8008020 <EE_Init+0x390>)
 8007ffa:	f008 ffc1 	bl	8010f80 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d105      	bne.n	800800e <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008002:	4a05      	ldr	r2, [pc, #20]	; (8008018 <EE_Init+0x388>)
 8008004:	6913      	ldr	r3, [r2, #16]
 8008006:	2102      	movs	r1, #2
 8008008:	438b      	bics	r3, r1
 800800a:	6113      	str	r3, [r2, #16]
 800800c:	e65e      	b.n	8007ccc <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <EE_Init+0x394>)
 8008010:	69dd      	ldr	r5, [r3, #28]
 8008012:	b2ad      	uxth	r5, r5
 8008014:	e65d      	b.n	8007cd2 <EE_Init+0x42>
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	40022000 	.word	0x40022000
 800801c:	0801e000 	.word	0x0801e000
 8008020:	0000c350 	.word	0x0000c350
 8008024:	20006da0 	.word	0x20006da0
 8008028:	0801e800 	.word	0x0801e800

0800802c <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 800802c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800802e:	46c6      	mov	lr, r8
 8008030:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8008032:	4c2a      	ldr	r4, [pc, #168]	; (80080dc <StartDefaultTask+0xb0>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8008034:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8008036:	46a0      	mov	r8, r4
 8008038:	e01f      	b.n	800807a <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 800803a:	2580      	movs	r5, #128	; 0x80
 800803c:	012d      	lsls	r5, r5, #4
 800803e:	2790      	movs	r7, #144	; 0x90
 8008040:	05ff      	lsls	r7, r7, #23
 8008042:	2201      	movs	r2, #1
 8008044:	0029      	movs	r1, r5
 8008046:	0038      	movs	r0, r7
 8008048:	f009 f9a4 	bl	8011394 <HAL_GPIO_WritePin>
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	f005 fd0a 	bl	800da66 <osDelay>
 8008052:	2200      	movs	r2, #0
 8008054:	0029      	movs	r1, r5
 8008056:	0038      	movs	r0, r7
 8008058:	f009 f99c 	bl	8011394 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800805c:	2300      	movs	r3, #0
 800805e:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008060:	f000 f9dc 	bl	800841c <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008064:	f7fd fbe4 	bl	8005830 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8008068:	4b1d      	ldr	r3, [pc, #116]	; (80080e0 <StartDefaultTask+0xb4>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <StartDefaultTask+0x4a>
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <StartDefaultTask+0xb8>)
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8008076:	f007 fbfb 	bl	800f870 <vPortYield>
		switch (indMode)
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d0dc      	beq.n	800803a <StartDefaultTask+0xe>
 8008080:	2b03      	cmp	r3, #3
 8008082:	d016      	beq.n	80080b2 <StartDefaultTask+0x86>
 8008084:	2b01      	cmp	r3, #1
 8008086:	d1eb      	bne.n	8008060 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8008088:	2580      	movs	r5, #128	; 0x80
 800808a:	012d      	lsls	r5, r5, #4
 800808c:	2790      	movs	r7, #144	; 0x90
 800808e:	05ff      	lsls	r7, r7, #23
 8008090:	2201      	movs	r2, #1
 8008092:	0029      	movs	r1, r5
 8008094:	0038      	movs	r0, r7
 8008096:	f009 f97d 	bl	8011394 <HAL_GPIO_WritePin>
 800809a:	20c8      	movs	r0, #200	; 0xc8
 800809c:	f005 fce3 	bl	800da66 <osDelay>
 80080a0:	2200      	movs	r2, #0
 80080a2:	0029      	movs	r1, r5
 80080a4:	0038      	movs	r0, r7
 80080a6:	f009 f975 	bl	8011394 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <StartDefaultTask+0xb0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
				break;
 80080b0:	e7d6      	b.n	8008060 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 80080b2:	2580      	movs	r5, #128	; 0x80
 80080b4:	012d      	lsls	r5, r5, #4
 80080b6:	2790      	movs	r7, #144	; 0x90
 80080b8:	05ff      	lsls	r7, r7, #23
 80080ba:	2201      	movs	r2, #1
 80080bc:	0029      	movs	r1, r5
 80080be:	0038      	movs	r0, r7
 80080c0:	f009 f968 	bl	8011394 <HAL_GPIO_WritePin>
 80080c4:	201e      	movs	r0, #30
 80080c6:	f005 fcce 	bl	800da66 <osDelay>
 80080ca:	2200      	movs	r2, #0
 80080cc:	0029      	movs	r1, r5
 80080ce:	0038      	movs	r0, r7
 80080d0:	f009 f960 	bl	8011394 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80080d4:	2300      	movs	r3, #0
 80080d6:	4642      	mov	r2, r8
 80080d8:	7013      	strb	r3, [r2, #0]
				break;
 80080da:	e7c1      	b.n	8008060 <StartDefaultTask+0x34>
 80080dc:	20000ec4 	.word	0x20000ec4
 80080e0:	200014bf 	.word	0x200014bf
 80080e4:	200014be 	.word	0x200014be

080080e8 <MX_FREERTOS_Init>:
{
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 80080ec:	25a0      	movs	r5, #160	; 0xa0
 80080ee:	006d      	lsls	r5, r5, #1
 80080f0:	2400      	movs	r4, #0
 80080f2:	9403      	str	r4, [sp, #12]
 80080f4:	9402      	str	r4, [sp, #8]
 80080f6:	4b53      	ldr	r3, [pc, #332]	; (8008244 <MX_FREERTOS_Init+0x15c>)
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	2603      	movs	r6, #3
 80080fc:	9600      	str	r6, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	002a      	movs	r2, r5
 8008102:	4951      	ldr	r1, [pc, #324]	; (8008248 <MX_FREERTOS_Init+0x160>)
 8008104:	4851      	ldr	r0, [pc, #324]	; (800824c <MX_FREERTOS_Init+0x164>)
 8008106:	f006 fac3 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800810a:	9403      	str	r4, [sp, #12]
 800810c:	9402      	str	r4, [sp, #8]
 800810e:	4b50      	ldr	r3, [pc, #320]	; (8008250 <MX_FREERTOS_Init+0x168>)
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	9600      	str	r6, [sp, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	002a      	movs	r2, r5
 8008118:	494e      	ldr	r1, [pc, #312]	; (8008254 <MX_FREERTOS_Init+0x16c>)
 800811a:	484f      	ldr	r0, [pc, #316]	; (8008258 <MX_FREERTOS_Init+0x170>)
 800811c:	f006 fab8 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8008120:	9403      	str	r4, [sp, #12]
 8008122:	9402      	str	r4, [sp, #8]
 8008124:	4b4d      	ldr	r3, [pc, #308]	; (800825c <MX_FREERTOS_Init+0x174>)
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	9600      	str	r6, [sp, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	002a      	movs	r2, r5
 800812e:	494c      	ldr	r1, [pc, #304]	; (8008260 <MX_FREERTOS_Init+0x178>)
 8008130:	484c      	ldr	r0, [pc, #304]	; (8008264 <MX_FREERTOS_Init+0x17c>)
 8008132:	f006 faad 	bl	800e690 <xTaskGenericCreate>
	vRegisterCLICommands();
 8008136:	f7ff fa79 	bl	800762c <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800813a:	9403      	str	r4, [sp, #12]
 800813c:	9402      	str	r4, [sp, #8]
 800813e:	4b4a      	ldr	r3, [pc, #296]	; (8008268 <MX_FREERTOS_Init+0x180>)
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	9600      	str	r6, [sp, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	002a      	movs	r2, r5
 8008148:	4948      	ldr	r1, [pc, #288]	; (800826c <MX_FREERTOS_Init+0x184>)
 800814a:	4849      	ldr	r0, [pc, #292]	; (8008270 <MX_FREERTOS_Init+0x188>)
 800814c:	f006 faa0 	bl	800e690 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8008150:	4d48      	ldr	r5, [pc, #288]	; (8008274 <MX_FREERTOS_Init+0x18c>)
 8008152:	9403      	str	r4, [sp, #12]
 8008154:	9402      	str	r4, [sp, #8]
 8008156:	4b48      	ldr	r3, [pc, #288]	; (8008278 <MX_FREERTOS_Init+0x190>)
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	3601      	adds	r6, #1
 800815c:	9600      	str	r6, [sp, #0]
 800815e:	2301      	movs	r3, #1
 8008160:	22a0      	movs	r2, #160	; 0xa0
 8008162:	4946      	ldr	r1, [pc, #280]	; (800827c <MX_FREERTOS_Init+0x194>)
 8008164:	0028      	movs	r0, r5
 8008166:	f006 fa93 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800816a:	9403      	str	r4, [sp, #12]
 800816c:	9402      	str	r4, [sp, #8]
 800816e:	4b44      	ldr	r3, [pc, #272]	; (8008280 <MX_FREERTOS_Init+0x198>)
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	9600      	str	r6, [sp, #0]
 8008174:	2302      	movs	r3, #2
 8008176:	22a0      	movs	r2, #160	; 0xa0
 8008178:	4942      	ldr	r1, [pc, #264]	; (8008284 <MX_FREERTOS_Init+0x19c>)
 800817a:	0028      	movs	r0, r5
 800817c:	f006 fa88 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8008180:	9403      	str	r4, [sp, #12]
 8008182:	9402      	str	r4, [sp, #8]
 8008184:	4b40      	ldr	r3, [pc, #256]	; (8008288 <MX_FREERTOS_Init+0x1a0>)
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9600      	str	r6, [sp, #0]
 800818a:	2303      	movs	r3, #3
 800818c:	22a0      	movs	r2, #160	; 0xa0
 800818e:	493f      	ldr	r1, [pc, #252]	; (800828c <MX_FREERTOS_Init+0x1a4>)
 8008190:	0028      	movs	r0, r5
 8008192:	f006 fa7d 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8008196:	9403      	str	r4, [sp, #12]
 8008198:	9402      	str	r4, [sp, #8]
 800819a:	4b3d      	ldr	r3, [pc, #244]	; (8008290 <MX_FREERTOS_Init+0x1a8>)
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	9600      	str	r6, [sp, #0]
 80081a0:	2304      	movs	r3, #4
 80081a2:	22a0      	movs	r2, #160	; 0xa0
 80081a4:	493b      	ldr	r1, [pc, #236]	; (8008294 <MX_FREERTOS_Init+0x1ac>)
 80081a6:	0028      	movs	r0, r5
 80081a8:	f006 fa72 	bl	800e690 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 80081ac:	9403      	str	r4, [sp, #12]
 80081ae:	9402      	str	r4, [sp, #8]
 80081b0:	4b39      	ldr	r3, [pc, #228]	; (8008298 <MX_FREERTOS_Init+0x1b0>)
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	9600      	str	r6, [sp, #0]
 80081b6:	2305      	movs	r3, #5
 80081b8:	22a0      	movs	r2, #160	; 0xa0
 80081ba:	4938      	ldr	r1, [pc, #224]	; (800829c <MX_FREERTOS_Init+0x1b4>)
 80081bc:	0028      	movs	r0, r5
 80081be:	f006 fa67 	bl	800e690 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 80081c2:	940d      	str	r4, [sp, #52]	; 0x34
 80081c4:	2101      	movs	r1, #1
 80081c6:	a80d      	add	r0, sp, #52	; 0x34
 80081c8:	f005 fc55 	bl	800da76 <osSemaphoreCreate>
 80081cc:	4e34      	ldr	r6, [pc, #208]	; (80082a0 <MX_FREERTOS_Init+0x1b8>)
 80081ce:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 80081d0:	940c      	str	r4, [sp, #48]	; 0x30
 80081d2:	2101      	movs	r1, #1
 80081d4:	a80c      	add	r0, sp, #48	; 0x30
 80081d6:	f005 fc4e 	bl	800da76 <osSemaphoreCreate>
 80081da:	4d32      	ldr	r5, [pc, #200]	; (80082a4 <MX_FREERTOS_Init+0x1bc>)
 80081dc:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 80081de:	940b      	str	r4, [sp, #44]	; 0x2c
 80081e0:	2101      	movs	r1, #1
 80081e2:	a80b      	add	r0, sp, #44	; 0x2c
 80081e4:	f005 fc47 	bl	800da76 <osSemaphoreCreate>
 80081e8:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 80081ea:	940a      	str	r4, [sp, #40]	; 0x28
 80081ec:	2101      	movs	r1, #1
 80081ee:	a80a      	add	r0, sp, #40	; 0x28
 80081f0:	f005 fc41 	bl	800da76 <osSemaphoreCreate>
 80081f4:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 80081f6:	9409      	str	r4, [sp, #36]	; 0x24
 80081f8:	2101      	movs	r1, #1
 80081fa:	a809      	add	r0, sp, #36	; 0x24
 80081fc:	f005 fc3b 	bl	800da76 <osSemaphoreCreate>
 8008200:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8008202:	9408      	str	r4, [sp, #32]
 8008204:	2101      	movs	r1, #1
 8008206:	a808      	add	r0, sp, #32
 8008208:	f005 fc35 	bl	800da76 <osSemaphoreCreate>
 800820c:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 800820e:	9407      	str	r4, [sp, #28]
 8008210:	2101      	movs	r1, #1
 8008212:	a807      	add	r0, sp, #28
 8008214:	f005 fc2f 	bl	800da76 <osSemaphoreCreate>
 8008218:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800821a:	9406      	str	r4, [sp, #24]
 800821c:	2101      	movs	r1, #1
 800821e:	a806      	add	r0, sp, #24
 8008220:	f005 fc29 	bl	800da76 <osSemaphoreCreate>
 8008224:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 8008226:	9405      	str	r4, [sp, #20]
 8008228:	2101      	movs	r1, #1
 800822a:	a805      	add	r0, sp, #20
 800822c:	f005 fc23 	bl	800da76 <osSemaphoreCreate>
 8008230:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8008232:	9404      	str	r4, [sp, #16]
 8008234:	2101      	movs	r1, #1
 8008236:	a804      	add	r0, sp, #16
 8008238:	f005 fc1d 	bl	800da76 <osSemaphoreCreate>
 800823c:	6168      	str	r0, [r5, #20]
}
 800823e:	b00e      	add	sp, #56	; 0x38
 8008240:	bd70      	pop	{r4, r5, r6, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	20001474 	.word	0x20001474
 8008248:	0801c314 	.word	0x0801c314
 800824c:	0800802d 	.word	0x0800802d
 8008250:	20001458 	.word	0x20001458
 8008254:	0801c320 	.word	0x0801c320
 8008258:	08009665 	.word	0x08009665
 800825c:	20001470 	.word	0x20001470
 8008260:	0801c32c 	.word	0x0801c32c
 8008264:	08013507 	.word	0x08013507
 8008268:	2000147c 	.word	0x2000147c
 800826c:	0801c338 	.word	0x0801c338
 8008270:	080054d1 	.word	0x080054d1
 8008274:	08009a31 	.word	0x08009a31
 8008278:	2000145c 	.word	0x2000145c
 800827c:	0801c340 	.word	0x0801c340
 8008280:	20001460 	.word	0x20001460
 8008284:	0801c34c 	.word	0x0801c34c
 8008288:	20001464 	.word	0x20001464
 800828c:	0801c358 	.word	0x0801c358
 8008290:	20001468 	.word	0x20001468
 8008294:	0801c364 	.word	0x0801c364
 8008298:	2000146c 	.word	0x2000146c
 800829c:	0801c370 	.word	0x0801c370
 80082a0:	2000696c 	.word	0x2000696c
 80082a4:	20006950 	.word	0x20006950

080082a8 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 80082a8:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <vMainConfigureTimerForRunTimeStats+0x14>)
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	4904      	ldr	r1, [pc, #16]	; (80082c0 <vMainConfigureTimerForRunTimeStats+0x18>)
 80082b0:	f7f7 ff4e 	bl	8000150 <__udivsi3>
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80082b6:	6018      	str	r0, [r3, #0]
}
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	20000094 	.word	0x20000094
 80082c0:	00002710 	.word	0x00002710
 80082c4:	20001478 	.word	0x20001478

080082c8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 80082c8:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082ca:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <ulMainGetRunTimeCounterValue+0x40>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	21fa      	movs	r1, #250	; 0xfa
 80082d0:	0089      	lsls	r1, r1, #2
 80082d2:	f7f7 ff3d 	bl	8000150 <__udivsi3>
 80082d6:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <ulMainGetRunTimeCounterValue+0x44>)
 80082da:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 80082dc:	f006 fb78 	bl	800e9d0 <xTaskGetTickCountFromISR>
 80082e0:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80082e2:	4a0b      	ldr	r2, [pc, #44]	; (8008310 <ulMainGetRunTimeCounterValue+0x48>)
 80082e4:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082e6:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80082e8:	0152      	lsls	r2, r2, #5
 80082ea:	d503      	bpl.n	80082f4 <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 80082ec:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082ee:	4a07      	ldr	r2, [pc, #28]	; (800830c <ulMainGetRunTimeCounterValue+0x44>)
 80082f0:	6810      	ldr	r0, [r2, #0]
 80082f2:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 80082f4:	009c      	lsls	r4, r3, #2
 80082f6:	18e4      	adds	r4, r4, r3
 80082f8:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <ulMainGetRunTimeCounterValue+0x4c>)
 80082fc:	6819      	ldr	r1, [r3, #0]
 80082fe:	f7f7 ff27 	bl	8000150 <__udivsi3>
 8008302:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	20000094 	.word	0x20000094
 800830c:	e000e018 	.word	0xe000e018
 8008310:	e000ed04 	.word	0xe000ed04
 8008314:	20001478 	.word	0x20001478

08008318 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 8008318:	4770      	bx	lr

0800831a <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 800831a:	4770      	bx	lr

0800831c <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 800831c:	4770      	bx	lr

0800831e <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 800831e:	4770      	bx	lr

08008320 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8008320:	4770      	bx	lr

08008322 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8008322:	4770      	bx	lr

08008324 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8008324:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008326:	00c2      	lsls	r2, r0, #3
 8008328:	1812      	adds	r2, r2, r0
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <CheckForTimedButtonPress+0x74>)
 800832c:	189b      	adds	r3, r3, r2
 800832e:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 8008330:	0082      	lsls	r2, r0, #2
 8008332:	4b1a      	ldr	r3, [pc, #104]	; (800839c <CheckForTimedButtonPress+0x78>)
 8008334:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008336:	0163      	lsls	r3, r4, #5
 8008338:	1b1b      	subs	r3, r3, r4
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	191b      	adds	r3, r3, r4
 800833e:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8008340:	4299      	cmp	r1, r3
 8008342:	d01c      	beq.n	800837e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008344:	00c2      	lsls	r2, r0, #3
 8008346:	1812      	adds	r2, r2, r0
 8008348:	4b13      	ldr	r3, [pc, #76]	; (8008398 <CheckForTimedButtonPress+0x74>)
 800834a:	189b      	adds	r3, r3, r2
 800834c:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800834e:	0163      	lsls	r3, r4, #5
 8008350:	1b1b      	subs	r3, r3, r4
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	191b      	adds	r3, r3, r4
 8008356:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 8008358:	4299      	cmp	r1, r3
 800835a:	d017      	beq.n	800838c <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 800835c:	00c2      	lsls	r2, r0, #3
 800835e:	1812      	adds	r2, r2, r0
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <CheckForTimedButtonPress+0x74>)
 8008362:	189b      	adds	r3, r3, r2
 8008364:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008366:	0163      	lsls	r3, r4, #5
 8008368:	1b1b      	subs	r3, r3, r4
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	191b      	adds	r3, r3, r4
 800836e:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008370:	4299      	cmp	r1, r3
 8008372:	d109      	bne.n	8008388 <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8008374:	0010      	movs	r0, r2
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <CheckForTimedButtonPress+0x74>)
 8008378:	220a      	movs	r2, #10
 800837a:	54c2      	strb	r2, [r0, r3]
 800837c:	e004      	b.n	8008388 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800837e:	00c3      	lsls	r3, r0, #3
 8008380:	1818      	adds	r0, r3, r0
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <CheckForTimedButtonPress+0x74>)
 8008384:	2209      	movs	r2, #9
 8008386:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008388:	2000      	movs	r0, #0
 800838a:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800838c:	0010      	movs	r0, r2
 800838e:	4b02      	ldr	r3, [pc, #8]	; (8008398 <CheckForTimedButtonPress+0x74>)
 8008390:	220a      	movs	r2, #10
 8008392:	54c2      	strb	r2, [r0, r3]
 8008394:	e7f8      	b.n	8008388 <CheckForTimedButtonPress+0x64>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	20001480 	.word	0x20001480
 800839c:	200014c0 	.word	0x200014c0

080083a0 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 80083a0:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80083a2:	00c2      	lsls	r2, r0, #3
 80083a4:	1812      	adds	r2, r2, r0
 80083a6:	4b1b      	ldr	r3, [pc, #108]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 80083ac:	0082      	lsls	r2, r0, #2
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <CheckForTimedButtonRelease+0x78>)
 80083b0:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083b2:	0163      	lsls	r3, r4, #5
 80083b4:	1b1b      	subs	r3, r3, r4
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	191b      	adds	r3, r3, r4
 80083ba:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 80083bc:	4299      	cmp	r1, r3
 80083be:	d01c      	beq.n	80083fa <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80083c0:	00c2      	lsls	r2, r0, #3
 80083c2:	1812      	adds	r2, r2, r0
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083ca:	0163      	lsls	r3, r4, #5
 80083cc:	1b1b      	subs	r3, r3, r4
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	191b      	adds	r3, r3, r4
 80083d2:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 80083d4:	4299      	cmp	r1, r3
 80083d6:	d017      	beq.n	8008408 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80083d8:	00c2      	lsls	r2, r0, #3
 80083da:	1812      	adds	r2, r2, r0
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 80083de:	189b      	adds	r3, r3, r2
 80083e0:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083e2:	0163      	lsls	r3, r4, #5
 80083e4:	1b1b      	subs	r3, r3, r4
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	191b      	adds	r3, r3, r4
 80083ea:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d109      	bne.n	8008404 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 80083f0:	0010      	movs	r0, r2
 80083f2:	4b08      	ldr	r3, [pc, #32]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 80083f4:	220d      	movs	r2, #13
 80083f6:	54c2      	strb	r2, [r0, r3]
 80083f8:	e004      	b.n	8008404 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80083fa:	00c3      	lsls	r3, r0, #3
 80083fc:	1818      	adds	r0, r3, r0
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 8008400:	220c      	movs	r2, #12
 8008402:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008404:	2000      	movs	r0, #0
 8008406:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008408:	0010      	movs	r0, r2
 800840a:	4b02      	ldr	r3, [pc, #8]	; (8008414 <CheckForTimedButtonRelease+0x74>)
 800840c:	220d      	movs	r2, #13
 800840e:	54c2      	strb	r2, [r0, r3]
 8008410:	e7f8      	b.n	8008404 <CheckForTimedButtonRelease+0x64>
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	20001480 	.word	0x20001480
 8008418:	200014d8 	.word	0x200014d8

0800841c <CheckAttachedButtons>:
{
 800841c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841e:	46de      	mov	lr, fp
 8008420:	4657      	mov	r7, sl
 8008422:	464e      	mov	r6, r9
 8008424:	4645      	mov	r5, r8
 8008426:	b5e0      	push	{r5, r6, r7, lr}
 8008428:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800842a:	4dbd      	ldr	r5, [pc, #756]	; (8008720 <CheckAttachedButtons+0x304>)
 800842c:	4ebd      	ldr	r6, [pc, #756]	; (8008724 <CheckAttachedButtons+0x308>)
 800842e:	4bbe      	ldr	r3, [pc, #760]	; (8008728 <CheckAttachedButtons+0x30c>)
 8008430:	4698      	mov	r8, r3
 8008432:	4bbe      	ldr	r3, [pc, #760]	; (800872c <CheckAttachedButtons+0x310>)
 8008434:	469a      	mov	sl, r3
 8008436:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	e121      	b.n	8008684 <CheckAttachedButtons+0x268>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 8008440:	230e      	movs	r3, #14
 8008442:	aa02      	add	r2, sp, #8
 8008444:	4694      	mov	ip, r2
 8008446:	4463      	add	r3, ip
 8008448:	8819      	ldrh	r1, [r3, #0]
 800844a:	2201      	movs	r2, #1
 800844c:	9807      	ldr	r0, [sp, #28]
 800844e:	f008 ffa1 	bl	8011394 <HAL_GPIO_WritePin>
 8008452:	200a      	movs	r0, #10
 8008454:	f005 f808 	bl	800d468 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8008458:	ab05      	add	r3, sp, #20
 800845a:	8819      	ldrh	r1, [r3, #0]
 800845c:	9806      	ldr	r0, [sp, #24]
 800845e:	f008 ff93 	bl	8011388 <HAL_GPIO_ReadPin>
 8008462:	9002      	str	r0, [sp, #8]
 8008464:	e134      	b.n	80086d0 <CheckAttachedButtons+0x2b4>
			switch (button[i].type)
 8008466:	2b04      	cmp	r3, #4
 8008468:	d10e      	bne.n	8008488 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 800846a:	9b02      	ldr	r3, [sp, #8]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d100      	bne.n	8008472 <CheckAttachedButtons+0x56>
 8008470:	e1d7      	b.n	8008822 <CheckAttachedButtons+0x406>
					else if (connected == GPIO_PIN_RESET) 
 8008472:	2b00      	cmp	r3, #0
 8008474:	d108      	bne.n	8008488 <CheckAttachedButtons+0x6c>
 8008476:	2302      	movs	r3, #2
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	e031      	b.n	80084e0 <CheckAttachedButtons+0xc4>
					if (connected == GPIO_PIN_SET)	
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d02c      	beq.n	80084dc <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET)
 8008482:	2b00      	cmp	r3, #0
 8008484:	d100      	bne.n	8008488 <CheckAttachedButtons+0x6c>
 8008486:	e1c9      	b.n	800881c <CheckAttachedButtons+0x400>
			if (state == CLOSED || state == ON)												
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	2b04      	cmp	r3, #4
 800848c:	d028      	beq.n	80084e0 <CheckAttachedButtons+0xc4>
 800848e:	2b02      	cmp	r3, #2
 8008490:	d026      	beq.n	80084e0 <CheckAttachedButtons+0xc4>
			if (state == OPEN || state == OFF)												
 8008492:	23fd      	movs	r3, #253	; 0xfd
 8008494:	9a03      	ldr	r2, [sp, #12]
 8008496:	4013      	ands	r3, r2
 8008498:	2b01      	cmp	r3, #1
 800849a:	d129      	bne.n	80084f0 <CheckAttachedButtons+0xd4>
				if (releaseCounter[i] < 0xFFFF)
 800849c:	0031      	movs	r1, r6
 800849e:	6872      	ldr	r2, [r6, #4]
 80084a0:	48a3      	ldr	r0, [pc, #652]	; (8008730 <CheckAttachedButtons+0x314>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 80084a2:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 80084a4:	4282      	cmp	r2, r0
 80084a6:	d800      	bhi.n	80084aa <CheckAttachedButtons+0x8e>
					++releaseCounter[i];																		// Advance the debounce counter
 80084a8:	1c53      	adds	r3, r2, #1
 80084aa:	604b      	str	r3, [r1, #4]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80084ac:	4ba1      	ldr	r3, [pc, #644]	; (8008734 <CheckAttachedButtons+0x318>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d045      	beq.n	8008540 <CheckAttachedButtons+0x124>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 80084b4:	4653      	mov	r3, sl
 80084b6:	785a      	ldrb	r2, [r3, #1]
 80084b8:	4b9f      	ldr	r3, [pc, #636]	; (8008738 <CheckAttachedButtons+0x31c>)
 80084ba:	795b      	ldrb	r3, [r3, #5]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d917      	bls.n	80084f0 <CheckAttachedButtons+0xd4>
					clicked = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	4a9c      	ldr	r2, [pc, #624]	; (8008734 <CheckAttachedButtons+0x318>)
 80084c4:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80084c6:	4652      	mov	r2, sl
 80084c8:	7053      	strb	r3, [r2, #1]
 80084ca:	e011      	b.n	80084f0 <CheckAttachedButtons+0xd4>
					if (connected == GPIO_PIN_SET)	
 80084cc:	9b02      	ldr	r3, [sp, #8]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d02f      	beq.n	8008532 <CheckAttachedButtons+0x116>
					else if (connected == GPIO_PIN_RESET) 
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1d8      	bne.n	8008488 <CheckAttachedButtons+0x6c>
						state = OFF;
 80084d6:	2301      	movs	r3, #1
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	e7df      	b.n	800849c <CheckAttachedButtons+0x80>
						state = CLOSED;
 80084dc:	2304      	movs	r3, #4
 80084de:	9303      	str	r3, [sp, #12]
				if (pressCounter[i] < 0xFFFF)	
 80084e0:	4643      	mov	r3, r8
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4a92      	ldr	r2, [pc, #584]	; (8008730 <CheckAttachedButtons+0x314>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d826      	bhi.n	8008538 <CheckAttachedButtons+0x11c>
					++pressCounter[i];																			// Advance the debounce counter
 80084ea:	3301      	adds	r3, #1
 80084ec:	4642      	mov	r2, r8
 80084ee:	6053      	str	r3, [r2, #4]
			if (pressCounter[i] < BOS.buttons.debounce) 									
 80084f0:	4647      	mov	r7, r8
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4b90      	ldr	r3, [pc, #576]	; (8008738 <CheckAttachedButtons+0x31c>)
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d352      	bcc.n	80085a2 <CheckAttachedButtons+0x186>
				if (pressCounter[i] == BOS.buttons.debounce)
 80084fc:	d02a      	beq.n	8008554 <CheckAttachedButtons+0x138>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80084fe:	6872      	ldr	r2, [r6, #4]
 8008500:	4293      	cmp	r3, r2
 8008502:	d201      	bcs.n	8008508 <CheckAttachedButtons+0xec>
					releaseCounter[i] = 0;					
 8008504:	2300      	movs	r3, #0
 8008506:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a8b      	ldr	r2, [pc, #556]	; (8008738 <CheckAttachedButtons+0x31c>)
 800850c:	8852      	ldrh	r2, [r2, #2]
 800850e:	4293      	cmp	r3, r2
 8008510:	d938      	bls.n	8008584 <CheckAttachedButtons+0x168>
 8008512:	22fa      	movs	r2, #250	; 0xfa
 8008514:	0052      	lsls	r2, r2, #1
 8008516:	4293      	cmp	r3, r2
 8008518:	d234      	bcs.n	8008584 <CheckAttachedButtons+0x168>
					if (clicked == 0)
 800851a:	4b86      	ldr	r3, [pc, #536]	; (8008734 <CheckAttachedButtons+0x318>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d11e      	bne.n	8008560 <CheckAttachedButtons+0x144>
						clicked = 1;																					// Record a possible single click 
 8008522:	4b84      	ldr	r3, [pc, #528]	; (8008734 <CheckAttachedButtons+0x318>)
 8008524:	3af4      	subs	r2, #244	; 0xf4
 8008526:	3aff      	subs	r2, #255	; 0xff
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e03a      	b.n	80085a2 <CheckAttachedButtons+0x186>
						state = CLOSED;
 800852c:	2304      	movs	r3, #4
 800852e:	9303      	str	r3, [sp, #12]
 8008530:	e7d6      	b.n	80084e0 <CheckAttachedButtons+0xc4>
 8008532:	2302      	movs	r3, #2
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	e7d3      	b.n	80084e0 <CheckAttachedButtons+0xc4>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8008538:	2300      	movs	r3, #0
 800853a:	4642      	mov	r2, r8
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	e7d7      	b.n	80084f0 <CheckAttachedButtons+0xd4>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8008540:	4653      	mov	r3, sl
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	4a7c      	ldr	r2, [pc, #496]	; (8008738 <CheckAttachedButtons+0x31c>)
 8008546:	7952      	ldrb	r2, [r2, #5]
 8008548:	429a      	cmp	r2, r3
 800854a:	d3b9      	bcc.n	80084c0 <CheckAttachedButtons+0xa4>
					++dblCounter[i];			
 800854c:	3301      	adds	r3, #1
 800854e:	4652      	mov	r2, sl
 8008550:	7053      	strb	r3, [r2, #1]
 8008552:	e7cd      	b.n	80084f0 <CheckAttachedButtons+0xd4>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8008554:	2207      	movs	r2, #7
 8008556:	4649      	mov	r1, r9
 8008558:	724a      	strb	r2, [r1, #9]
					++pressCounter[i];
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	e7ce      	b.n	80084fe <CheckAttachedButtons+0xe2>
					else if (clicked == 2) {
 8008560:	2b02      	cmp	r3, #2
 8008562:	d11e      	bne.n	80085a2 <CheckAttachedButtons+0x186>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8008564:	4651      	mov	r1, sl
 8008566:	784b      	ldrb	r3, [r1, #1]
 8008568:	4a73      	ldr	r2, [pc, #460]	; (8008738 <CheckAttachedButtons+0x31c>)
 800856a:	7912      	ldrb	r2, [r2, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d218      	bcs.n	80085a2 <CheckAttachedButtons+0x186>
 8008570:	4a71      	ldr	r2, [pc, #452]	; (8008738 <CheckAttachedButtons+0x31c>)
 8008572:	7952      	ldrb	r2, [r2, #5]
 8008574:	429a      	cmp	r2, r3
 8008576:	d914      	bls.n	80085a2 <CheckAttachedButtons+0x186>
							clicked = 3;																				// Record a possible double click 
 8008578:	4b6e      	ldr	r3, [pc, #440]	; (8008734 <CheckAttachedButtons+0x318>)
 800857a:	2203      	movs	r2, #3
 800857c:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800857e:	2300      	movs	r3, #0
 8008580:	704b      	strb	r3, [r1, #1]
 8008582:	e00e      	b.n	80085a2 <CheckAttachedButtons+0x186>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008584:	3bf5      	subs	r3, #245	; 0xf5
 8008586:	3bff      	subs	r3, #255	; 0xff
 8008588:	4a6c      	ldr	r2, [pc, #432]	; (800873c <CheckAttachedButtons+0x320>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d809      	bhi.n	80085a2 <CheckAttachedButtons+0x186>
					if (clicked)	clicked = 0;															// Cannot be a click
 800858e:	4b69      	ldr	r3, [pc, #420]	; (8008734 <CheckAttachedButtons+0x318>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <CheckAttachedButtons+0x180>
 8008596:	4b67      	ldr	r3, [pc, #412]	; (8008734 <CheckAttachedButtons+0x318>)
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800859c:	0020      	movs	r0, r4
 800859e:	f7ff fec1 	bl	8008324 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 80085a2:	0031      	movs	r1, r6
 80085a4:	6872      	ldr	r2, [r6, #4]
 80085a6:	4b64      	ldr	r3, [pc, #400]	; (8008738 <CheckAttachedButtons+0x31c>)
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d349      	bcc.n	8008642 <CheckAttachedButtons+0x226>
				if (releaseCounter[i] == BOS.buttons.debounce)
 80085ae:	d028      	beq.n	8008602 <CheckAttachedButtons+0x1e6>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d201      	bcs.n	80085ba <CheckAttachedButtons+0x19e>
					pressCounter[i] = 0;				
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 80085ba:	684b      	ldr	r3, [r1, #4]
 80085bc:	4a5e      	ldr	r2, [pc, #376]	; (8008738 <CheckAttachedButtons+0x31c>)
 80085be:	8852      	ldrh	r2, [r2, #2]
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d939      	bls.n	8008638 <CheckAttachedButtons+0x21c>
 80085c4:	22fa      	movs	r2, #250	; 0xfa
 80085c6:	0052      	lsls	r2, r2, #1
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d235      	bcs.n	8008638 <CheckAttachedButtons+0x21c>
					if (clicked == 1)
 80085cc:	4b59      	ldr	r3, [pc, #356]	; (8008734 <CheckAttachedButtons+0x318>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d01c      	beq.n	800860e <CheckAttachedButtons+0x1f2>
					else if (clicked == 3)
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d134      	bne.n	8008642 <CheckAttachedButtons+0x226>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 80085d8:	3303      	adds	r3, #3
 80085da:	464a      	mov	r2, r9
 80085dc:	7253      	strb	r3, [r2, #9]
						clicked = 0;																					// Prepare for a single click					
 80085de:	4b55      	ldr	r3, [pc, #340]	; (8008734 <CheckAttachedButtons+0x318>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 80085e4:	4b56      	ldr	r3, [pc, #344]	; (8008740 <CheckAttachedButtons+0x324>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d13e      	bne.n	800866a <CheckAttachedButtons+0x24e>
 80085ec:	464b      	mov	r3, r9
 80085ee:	7c5b      	ldrb	r3, [r3, #17]
 80085f0:	079b      	lsls	r3, r3, #30
 80085f2:	d53a      	bpl.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80085f4:	4b52      	ldr	r3, [pc, #328]	; (8008740 <CheckAttachedButtons+0x324>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 80085fa:	0020      	movs	r0, r4
 80085fc:	f7ff fe8f 	bl	800831e <buttonDblClickedCallback>
 8008600:	e033      	b.n	800866a <CheckAttachedButtons+0x24e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8008602:	2208      	movs	r2, #8
 8008604:	4648      	mov	r0, r9
 8008606:	7242      	strb	r2, [r0, #9]
					++releaseCounter[i];
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	6072      	str	r2, [r6, #4]
 800860c:	e7d0      	b.n	80085b0 <CheckAttachedButtons+0x194>
						button[i].state = CLICKED;														// Record a single button click event
 800860e:	3304      	adds	r3, #4
 8008610:	464a      	mov	r2, r9
 8008612:	7253      	strb	r3, [r2, #9]
						clicked = 2;																					// Prepare for a double click
 8008614:	4b47      	ldr	r3, [pc, #284]	; (8008734 <CheckAttachedButtons+0x318>)
 8008616:	2202      	movs	r2, #2
 8008618:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 800861a:	4b49      	ldr	r3, [pc, #292]	; (8008740 <CheckAttachedButtons+0x324>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d123      	bne.n	800866a <CheckAttachedButtons+0x24e>
 8008622:	464b      	mov	r3, r9
 8008624:	7c5b      	ldrb	r3, [r3, #17]
 8008626:	07db      	lsls	r3, r3, #31
 8008628:	d51f      	bpl.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800862a:	4b45      	ldr	r3, [pc, #276]	; (8008740 <CheckAttachedButtons+0x324>)
 800862c:	2201      	movs	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8008630:	0020      	movs	r0, r4
 8008632:	f7ff fe73 	bl	800831c <buttonClickedCallback>
 8008636:	e018      	b.n	800866a <CheckAttachedButtons+0x24e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8008638:	3bf5      	subs	r3, #245	; 0xf5
 800863a:	3bff      	subs	r3, #255	; 0xff
 800863c:	4a3f      	ldr	r2, [pc, #252]	; (800873c <CheckAttachedButtons+0x320>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d909      	bls.n	8008656 <CheckAttachedButtons+0x23a>
			switch (button[i].state)
 8008642:	464b      	mov	r3, r9
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	3b05      	subs	r3, #5
 8008648:	b2da      	uxtb	r2, r3
 800864a:	2a09      	cmp	r2, #9
 800864c:	d80d      	bhi.n	800866a <CheckAttachedButtons+0x24e>
 800864e:	0093      	lsls	r3, r2, #2
 8008650:	4a3c      	ldr	r2, [pc, #240]	; (8008744 <CheckAttachedButtons+0x328>)
 8008652:	58d3      	ldr	r3, [r2, r3]
 8008654:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008656:	0020      	movs	r0, r4
 8008658:	f7ff fea2 	bl	80083a0 <CheckForTimedButtonRelease>
 800865c:	e7f1      	b.n	8008642 <CheckAttachedButtons+0x226>
					buttonPressedCallback(i);
 800865e:	0020      	movs	r0, r4
 8008660:	f7ff fe5a 	bl	8008318 <buttonPressedCallback>
					button[i].state = NONE;
 8008664:	2300      	movs	r3, #0
 8008666:	464a      	mov	r2, r9
 8008668:	7253      	strb	r3, [r2, #9]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800866a:	3401      	adds	r4, #1
 800866c:	b2e4      	uxtb	r4, r4
 800866e:	3509      	adds	r5, #9
 8008670:	3604      	adds	r6, #4
 8008672:	2304      	movs	r3, #4
 8008674:	469c      	mov	ip, r3
 8008676:	44e0      	add	r8, ip
 8008678:	3b03      	subs	r3, #3
 800867a:	469c      	mov	ip, r3
 800867c:	44e2      	add	sl, ip
 800867e:	2c06      	cmp	r4, #6
 8008680:	d100      	bne.n	8008684 <CheckAttachedButtons+0x268>
 8008682:	e0d1      	b.n	8008828 <CheckAttachedButtons+0x40c>
		if (button[i].type)			// Only check defined butons
 8008684:	46a9      	mov	r9, r5
 8008686:	7aab      	ldrb	r3, [r5, #10]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0ee      	beq.n	800866a <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 800868c:	4b2c      	ldr	r3, [pc, #176]	; (8008740 <CheckAttachedButtons+0x324>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d100      	bne.n	8008696 <CheckAttachedButtons+0x27a>
 8008694:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008696:	230e      	movs	r3, #14
 8008698:	aa02      	add	r2, sp, #8
 800869a:	4694      	mov	ip, r2
 800869c:	4463      	add	r3, ip
 800869e:	469b      	mov	fp, r3
 80086a0:	af05      	add	r7, sp, #20
 80086a2:	9700      	str	r7, [sp, #0]
 80086a4:	ab06      	add	r3, sp, #24
 80086a6:	465a      	mov	r2, fp
 80086a8:	a907      	add	r1, sp, #28
 80086aa:	0020      	movs	r0, r4
 80086ac:	f004 fb5a 	bl	800cd64 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 80086b0:	465b      	mov	r3, fp
 80086b2:	8819      	ldrh	r1, [r3, #0]
 80086b4:	2200      	movs	r2, #0
 80086b6:	9807      	ldr	r0, [sp, #28]
 80086b8:	f008 fe6c 	bl	8011394 <HAL_GPIO_WritePin>
 80086bc:	200a      	movs	r0, #10
 80086be:	f004 fed3 	bl	800d468 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 80086c2:	8839      	ldrh	r1, [r7, #0]
 80086c4:	9806      	ldr	r0, [sp, #24]
 80086c6:	f008 fe5f 	bl	8011388 <HAL_GPIO_ReadPin>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d100      	bne.n	80086d0 <CheckAttachedButtons+0x2b4>
 80086ce:	e6b7      	b.n	8008440 <CheckAttachedButtons+0x24>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 80086d0:	230e      	movs	r3, #14
 80086d2:	aa02      	add	r2, sp, #8
 80086d4:	4694      	mov	ip, r2
 80086d6:	4463      	add	r3, ip
 80086d8:	8819      	ldrh	r1, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	9807      	ldr	r0, [sp, #28]
 80086de:	f008 fe59 	bl	8011394 <HAL_GPIO_WritePin>
			switch (button[i].type)
 80086e2:	464b      	mov	r3, r9
 80086e4:	7a9b      	ldrb	r3, [r3, #10]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d100      	bne.n	80086ec <CheckAttachedButtons+0x2d0>
 80086ea:	e6ef      	b.n	80084cc <CheckAttachedButtons+0xb0>
 80086ec:	d900      	bls.n	80086f0 <CheckAttachedButtons+0x2d4>
 80086ee:	e6ba      	b.n	8008466 <CheckAttachedButtons+0x4a>
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d100      	bne.n	80086f6 <CheckAttachedButtons+0x2da>
 80086f4:	e6c2      	b.n	800847c <CheckAttachedButtons+0x60>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d000      	beq.n	80086fc <CheckAttachedButtons+0x2e0>
 80086fa:	e6c5      	b.n	8008488 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 80086fc:	9b02      	ldr	r3, [sp, #8]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d100      	bne.n	8008704 <CheckAttachedButtons+0x2e8>
 8008702:	e713      	b.n	800852c <CheckAttachedButtons+0x110>
					else if (connected == GPIO_PIN_RESET) 
 8008704:	2b00      	cmp	r3, #0
 8008706:	d000      	beq.n	800870a <CheckAttachedButtons+0x2ee>
 8008708:	e6be      	b.n	8008488 <CheckAttachedButtons+0x6c>
						state = OPEN;	
 800870a:	2303      	movs	r3, #3
 800870c:	9303      	str	r3, [sp, #12]
 800870e:	e6c5      	b.n	800849c <CheckAttachedButtons+0x80>
					buttonReleasedCallback(i);
 8008710:	0020      	movs	r0, r4
 8008712:	f7ff fe02 	bl	800831a <buttonReleasedCallback>
					button[i].state = NONE;
 8008716:	2300      	movs	r3, #0
 8008718:	464a      	mov	r2, r9
 800871a:	7253      	strb	r3, [r2, #9]
      		break;
 800871c:	e7a5      	b.n	800866a <CheckAttachedButtons+0x24e>
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	20001480 	.word	0x20001480
 8008724:	200014d8 	.word	0x200014d8
 8008728:	200014c0 	.word	0x200014c0
 800872c:	200014b8 	.word	0x200014b8
 8008730:	0000fffe 	.word	0x0000fffe
 8008734:	200014b6 	.word	0x200014b6
 8008738:	200068d0 	.word	0x200068d0
 800873c:	0000fe0a 	.word	0x0000fe0a
 8008740:	200014be 	.word	0x200014be
 8008744:	0801c37c 	.word	0x0801c37c
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8008748:	4b3b      	ldr	r3, [pc, #236]	; (8008838 <CheckAttachedButtons+0x41c>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d18c      	bne.n	800866a <CheckAttachedButtons+0x24e>
 8008750:	464b      	mov	r3, r9
 8008752:	7c5b      	ldrb	r3, [r3, #17]
 8008754:	075b      	lsls	r3, r3, #29
 8008756:	d588      	bpl.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008758:	4b37      	ldr	r3, [pc, #220]	; (8008838 <CheckAttachedButtons+0x41c>)
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 800875e:	2101      	movs	r1, #1
 8008760:	0020      	movs	r0, r4
 8008762:	f7ff fddd 	bl	8008320 <buttonPressedForXCallback>
 8008766:	e780      	b.n	800866a <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8008768:	4b33      	ldr	r3, [pc, #204]	; (8008838 <CheckAttachedButtons+0x41c>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d000      	beq.n	8008772 <CheckAttachedButtons+0x356>
 8008770:	e77b      	b.n	800866a <CheckAttachedButtons+0x24e>
 8008772:	464b      	mov	r3, r9
 8008774:	7c5b      	ldrb	r3, [r3, #17]
 8008776:	071b      	lsls	r3, r3, #28
 8008778:	d400      	bmi.n	800877c <CheckAttachedButtons+0x360>
 800877a:	e776      	b.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800877c:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <CheckAttachedButtons+0x41c>)
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008782:	2102      	movs	r1, #2
 8008784:	0020      	movs	r0, r4
 8008786:	f7ff fdcb 	bl	8008320 <buttonPressedForXCallback>
 800878a:	e76e      	b.n	800866a <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 800878c:	4b2a      	ldr	r3, [pc, #168]	; (8008838 <CheckAttachedButtons+0x41c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d000      	beq.n	8008796 <CheckAttachedButtons+0x37a>
 8008794:	e769      	b.n	800866a <CheckAttachedButtons+0x24e>
 8008796:	464b      	mov	r3, r9
 8008798:	7c5b      	ldrb	r3, [r3, #17]
 800879a:	06db      	lsls	r3, r3, #27
 800879c:	d400      	bmi.n	80087a0 <CheckAttachedButtons+0x384>
 800879e:	e764      	b.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 80087a6:	2103      	movs	r1, #3
 80087a8:	0020      	movs	r0, r4
 80087aa:	f7ff fdb9 	bl	8008320 <buttonPressedForXCallback>
 80087ae:	e75c      	b.n	800866a <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d000      	beq.n	80087ba <CheckAttachedButtons+0x39e>
 80087b8:	e757      	b.n	800866a <CheckAttachedButtons+0x24e>
 80087ba:	464b      	mov	r3, r9
 80087bc:	7c5b      	ldrb	r3, [r3, #17]
 80087be:	069b      	lsls	r3, r3, #26
 80087c0:	d400      	bmi.n	80087c4 <CheckAttachedButtons+0x3a8>
 80087c2:	e752      	b.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80087c4:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087c6:	2201      	movs	r2, #1
 80087c8:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 80087ca:	2101      	movs	r1, #1
 80087cc:	0020      	movs	r0, r4
 80087ce:	f7ff fda8 	bl	8008322 <buttonReleasedForYCallback>
 80087d2:	e74a      	b.n	800866a <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 80087d4:	4b18      	ldr	r3, [pc, #96]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d000      	beq.n	80087de <CheckAttachedButtons+0x3c2>
 80087dc:	e745      	b.n	800866a <CheckAttachedButtons+0x24e>
 80087de:	464b      	mov	r3, r9
 80087e0:	7c5b      	ldrb	r3, [r3, #17]
 80087e2:	065b      	lsls	r3, r3, #25
 80087e4:	d400      	bmi.n	80087e8 <CheckAttachedButtons+0x3cc>
 80087e6:	e740      	b.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80087e8:	4b13      	ldr	r3, [pc, #76]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 80087ee:	2102      	movs	r1, #2
 80087f0:	0020      	movs	r0, r4
 80087f2:	f7ff fd96 	bl	8008322 <buttonReleasedForYCallback>
 80087f6:	e738      	b.n	800866a <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <CheckAttachedButtons+0x41c>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d000      	beq.n	8008802 <CheckAttachedButtons+0x3e6>
 8008800:	e733      	b.n	800866a <CheckAttachedButtons+0x24e>
 8008802:	464b      	mov	r3, r9
 8008804:	7c5b      	ldrb	r3, [r3, #17]
 8008806:	2b7f      	cmp	r3, #127	; 0x7f
 8008808:	d800      	bhi.n	800880c <CheckAttachedButtons+0x3f0>
 800880a:	e72e      	b.n	800866a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <CheckAttachedButtons+0x41c>)
 800880e:	2201      	movs	r2, #1
 8008810:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8008812:	2103      	movs	r1, #3
 8008814:	0020      	movs	r0, r4
 8008816:	f7ff fd84 	bl	8008322 <buttonReleasedForYCallback>
 800881a:	e726      	b.n	800866a <CheckAttachedButtons+0x24e>
						state = OPEN;			
 800881c:	2303      	movs	r3, #3
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	e63c      	b.n	800849c <CheckAttachedButtons+0x80>
						state = OFF;
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	9303      	str	r3, [sp, #12]
			if (state == OPEN || state == OFF)												
 8008826:	e639      	b.n	800849c <CheckAttachedButtons+0x80>
}
 8008828:	b009      	add	sp, #36	; 0x24
 800882a:	bcf0      	pop	{r4, r5, r6, r7}
 800882c:	46bb      	mov	fp, r7
 800882e:	46b2      	mov	sl, r6
 8008830:	46a9      	mov	r9, r5
 8008832:	46a0      	mov	r8, r4
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	200014be 	.word	0x200014be

0800883c <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 800883c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883e:	b08d      	sub	sp, #52	; 0x34
 8008840:	0006      	movs	r6, r0
 8008842:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008844:	4b41      	ldr	r3, [pc, #260]	; (800894c <AddPortButton+0x110>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d157      	bne.n	80088fc <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 800884c:	4b40      	ldr	r3, [pc, #256]	; (8008950 <AddPortButton+0x114>)
 800884e:	2204      	movs	r2, #4
 8008850:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8008852:	4b3e      	ldr	r3, [pc, #248]	; (800894c <AddPortButton+0x110>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d15a      	bne.n	8008910 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 800885a:	2512      	movs	r5, #18
 800885c:	446d      	add	r5, sp
 800885e:	af04      	add	r7, sp, #16
 8008860:	9700      	str	r7, [sp, #0]
 8008862:	ab05      	add	r3, sp, #20
 8008864:	002a      	movs	r2, r5
 8008866:	a906      	add	r1, sp, #24
 8008868:	0020      	movs	r0, r4
 800886a:	f004 fa7b 	bl	800cd64 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800886e:	882b      	ldrh	r3, [r5, #0]
 8008870:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008872:	2301      	movs	r3, #1
 8008874:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008876:	2500      	movs	r5, #0
 8008878:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800887a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 800887c:	a907      	add	r1, sp, #28
 800887e:	9806      	ldr	r0, [sp, #24]
 8008880:	f008 fc98 	bl	80111b4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008884:	883b      	ldrh	r3, [r7, #0]
 8008886:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008888:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800888a:	2302      	movs	r3, #2
 800888c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 800888e:	a907      	add	r1, sp, #28
 8008890:	9805      	ldr	r0, [sp, #20]
 8008892:	f008 fc8f 	bl	80111b4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8008896:	00e2      	lsls	r2, r4, #3
 8008898:	1912      	adds	r2, r2, r4
 800889a:	4b2e      	ldr	r3, [pc, #184]	; (8008954 <AddPortButton+0x118>)
 800889c:	189b      	adds	r3, r3, r2
 800889e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80088a0:	0025      	movs	r5, r4
 80088a2:	353a      	adds	r5, #58	; 0x3a
 80088a4:	00ad      	lsls	r5, r5, #2
 80088a6:	210e      	movs	r1, #14
 80088a8:	4469      	add	r1, sp
 80088aa:	0028      	movs	r0, r5
 80088ac:	f7ff f8b0 	bl	8007a10 <EE_ReadVariable>
	if(!res)																														// This variable exists
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d133      	bne.n	800891c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 80088b4:	230e      	movs	r3, #14
 80088b6:	446b      	add	r3, sp
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 80088bc:	0b1b      	lsrs	r3, r3, #12
 80088be:	42a3      	cmp	r3, r4
 80088c0:	d103      	bne.n	80088ca <AddPortButton+0x8e>
 80088c2:	230f      	movs	r3, #15
 80088c4:	4013      	ands	r3, r2
 80088c6:	42b3      	cmp	r3, r6
 80088c8:	d015      	beq.n	80088f6 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80088ca:	0324      	lsls	r4, r4, #12
 80088cc:	0231      	lsls	r1, r6, #8
 80088ce:	4321      	orrs	r1, r4
 80088d0:	b289      	uxth	r1, r1
 80088d2:	230e      	movs	r3, #14
 80088d4:	446b      	add	r3, sp
 80088d6:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80088d8:	0028      	movs	r0, r5
 80088da:	f7ff f8c5 	bl	8007a68 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80088de:	1c68      	adds	r0, r5, #1
 80088e0:	2100      	movs	r1, #0
 80088e2:	f7ff f8c1 	bl	8007a68 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80088e6:	1ca8      	adds	r0, r5, #2
 80088e8:	2100      	movs	r1, #0
 80088ea:	f7ff f8bd 	bl	8007a68 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80088ee:	1ce8      	adds	r0, r5, #3
 80088f0:	2100      	movs	r1, #0
 80088f2:	f7ff f8b9 	bl	8007a68 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 80088f6:	2000      	movs	r0, #0
 80088f8:	b00d      	add	sp, #52	; 0x34
 80088fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 80088fc:	008d      	lsls	r5, r1, #2
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <AddPortButton+0x11c>)
 8008900:	58e8      	ldr	r0, [r5, r3]
 8008902:	f005 f8fd 	bl	800db00 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <AddPortButton+0x120>)
 8008908:	58e8      	ldr	r0, [r5, r3]
 800890a:	f005 f8f9 	bl	800db00 <osSemaphoreRelease>
 800890e:	e79d      	b.n	800884c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008910:	0020      	movs	r0, r4
 8008912:	f004 ff5b 	bl	800d7cc <GetUart>
 8008916:	f00a f836 	bl	8012986 <HAL_UART_DeInit>
 800891a:	e79e      	b.n	800885a <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800891c:	0324      	lsls	r4, r4, #12
 800891e:	0231      	lsls	r1, r6, #8
 8008920:	4321      	orrs	r1, r4
 8008922:	b289      	uxth	r1, r1
 8008924:	230e      	movs	r3, #14
 8008926:	446b      	add	r3, sp
 8008928:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 800892a:	0028      	movs	r0, r5
 800892c:	f7ff f89c 	bl	8007a68 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008930:	1c68      	adds	r0, r5, #1
 8008932:	2100      	movs	r1, #0
 8008934:	f7ff f898 	bl	8007a68 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008938:	1ca8      	adds	r0, r5, #2
 800893a:	2100      	movs	r1, #0
 800893c:	f7ff f894 	bl	8007a68 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008940:	1ce8      	adds	r0, r5, #3
 8008942:	2100      	movs	r1, #0
 8008944:	f7ff f890 	bl	8007a68 <EE_WriteVariable>
 8008948:	e7d5      	b.n	80088f6 <AddPortButton+0xba>
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	20000a7d 	.word	0x20000a7d
 8008950:	200010c0 	.word	0x200010c0
 8008954:	20001480 	.word	0x20001480
 8008958:	2000696c 	.word	0x2000696c
 800895c:	20006950 	.word	0x20006950

08008960 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008966:	4836      	ldr	r0, [pc, #216]	; (8008a40 <RemovePortButton+0xe0>)
 8008968:	00e9      	lsls	r1, r5, #3
 800896a:	1949      	adds	r1, r1, r5
 800896c:	1842      	adds	r2, r0, r1
 800896e:	2300      	movs	r3, #0
 8008970:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8008972:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008974:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008976:	7093      	strb	r3, [r2, #2]
 8008978:	70d3      	strb	r3, [r2, #3]
 800897a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 800897c:	7153      	strb	r3, [r2, #5]
 800897e:	7193      	strb	r3, [r2, #6]
 8008980:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008982:	002c      	movs	r4, r5
 8008984:	343a      	adds	r4, #58	; 0x3a
 8008986:	00a4      	lsls	r4, r4, #2
 8008988:	466b      	mov	r3, sp
 800898a:	1d99      	adds	r1, r3, #6
 800898c:	0020      	movs	r0, r4
 800898e:	f7ff f83f 	bl	8007a10 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8008992:	2800      	cmp	r0, #0
 8008994:	d02b      	beq.n	80089ee <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8008996:	0028      	movs	r0, r5
 8008998:	f004 ff18 	bl	800d7cc <GetUart>
 800899c:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 800899e:	6803      	ldr	r3, [r0, #0]
 80089a0:	4a28      	ldr	r2, [pc, #160]	; (8008a44 <RemovePortButton+0xe4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d034      	beq.n	8008a10 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 80089a6:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <RemovePortButton+0xe8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d035      	beq.n	8008a18 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 80089ac:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <RemovePortButton+0xec>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d036      	beq.n	8008a20 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 80089b2:	4a27      	ldr	r2, [pc, #156]	; (8008a50 <RemovePortButton+0xf0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d03f      	beq.n	8008a38 <RemovePortButton+0xd8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 80089b8:	4a26      	ldr	r2, [pc, #152]	; (8008a54 <RemovePortButton+0xf4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d034      	beq.n	8008a28 <RemovePortButton+0xc8>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 80089be:	4a26      	ldr	r2, [pc, #152]	; (8008a58 <RemovePortButton+0xf8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d035      	beq.n	8008a30 <RemovePortButton+0xd0>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 80089c4:	4a25      	ldr	r2, [pc, #148]	; (8008a5c <RemovePortButton+0xfc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d038      	beq.n	8008a3c <RemovePortButton+0xdc>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 80089ca:	4a25      	ldr	r2, [pc, #148]	; (8008a60 <RemovePortButton+0x100>)
 80089cc:	4694      	mov	ip, r2
 80089ce:	4463      	add	r3, ip
 80089d0:	1e5c      	subs	r4, r3, #1
 80089d2:	41a3      	sbcs	r3, r4
 80089d4:	425c      	negs	r4, r3
 80089d6:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 80089d8:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <RemovePortButton+0x104>)
 80089da:	2200      	movs	r2, #0
 80089dc:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 80089de:	3201      	adds	r2, #1
 80089e0:	4921      	ldr	r1, [pc, #132]	; (8008a68 <RemovePortButton+0x108>)
 80089e2:	0030      	movs	r0, r6
 80089e4:	f00a f828 	bl	8012a38 <HAL_UART_Receive_IT>
	
	return result;
}
 80089e8:	0020      	movs	r0, r4
 80089ea:	b002      	add	sp, #8
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 80089ee:	2100      	movs	r1, #0
 80089f0:	0020      	movs	r0, r4
 80089f2:	f7ff f839 	bl	8007a68 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80089f6:	1c60      	adds	r0, r4, #1
 80089f8:	2100      	movs	r1, #0
 80089fa:	f7ff f835 	bl	8007a68 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80089fe:	1ca0      	adds	r0, r4, #2
 8008a00:	2100      	movs	r1, #0
 8008a02:	f7ff f831 	bl	8007a68 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008a06:	1ce0      	adds	r0, r4, #3
 8008a08:	2100      	movs	r1, #0
 8008a0a:	f7ff f82d 	bl	8007a68 <EE_WriteVariable>
 8008a0e:	e7c2      	b.n	8008996 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008a10:	f004 fd4e 	bl	800d4b0 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008a14:	2400      	movs	r4, #0
 8008a16:	e7df      	b.n	80089d8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008a18:	f004 fd62 	bl	800d4e0 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008a1c:	2400      	movs	r4, #0
 8008a1e:	e7db      	b.n	80089d8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008a20:	f004 fd76 	bl	800d510 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008a24:	2400      	movs	r4, #0
 8008a26:	e7d7      	b.n	80089d8 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008a28:	f004 fd8a 	bl	800d540 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008a2c:	2400      	movs	r4, #0
 8008a2e:	e7d3      	b.n	80089d8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008a30:	f004 fd9e 	bl	800d570 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008a34:	2400      	movs	r4, #0
 8008a36:	e7cf      	b.n	80089d8 <RemovePortButton+0x78>
 8008a38:	2400      	movs	r4, #0
 8008a3a:	e7cd      	b.n	80089d8 <RemovePortButton+0x78>
 8008a3c:	2400      	movs	r4, #0
 8008a3e:	e7cb      	b.n	80089d8 <RemovePortButton+0x78>
 8008a40:	20001480 	.word	0x20001480
 8008a44:	40013800 	.word	0x40013800
 8008a48:	40004400 	.word	0x40004400
 8008a4c:	40004800 	.word	0x40004800
 8008a50:	40004c00 	.word	0x40004c00
 8008a54:	40005000 	.word	0x40005000
 8008a58:	40011400 	.word	0x40011400
 8008a5c:	40011800 	.word	0x40011800
 8008a60:	bffee400 	.word	0xbffee400
 8008a64:	200010c0 	.word	0x200010c0
 8008a68:	20000e28 	.word	0x20000e28

08008a6c <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6e:	46de      	mov	lr, fp
 8008a70:	4657      	mov	r7, sl
 8008a72:	464e      	mov	r6, r9
 8008a74:	4645      	mov	r5, r8
 8008a76:	b5e0      	push	{r5, r6, r7, lr}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	0005      	movs	r5, r0
 8008a7c:	469c      	mov	ip, r3
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	ab0e      	add	r3, sp, #56	; 0x38
 8008a82:	781e      	ldrb	r6, [r3, #0]
 8008a84:	ab0f      	add	r3, sp, #60	; 0x3c
 8008a86:	781f      	ldrb	r7, [r3, #0]
 8008a88:	ab10      	add	r3, sp, #64	; 0x40
 8008a8a:	7818      	ldrb	r0, [r3, #0]
 8008a8c:	4681      	mov	r9, r0
 8008a8e:	ab11      	add	r3, sp, #68	; 0x44
 8008a90:	7818      	ldrb	r0, [r3, #0]
 8008a92:	4682      	mov	sl, r0
 8008a94:	ab12      	add	r3, sp, #72	; 0x48
 8008a96:	7818      	ldrb	r0, [r3, #0]
 8008a98:	4680      	mov	r8, r0
 8008a9a:	ab13      	add	r3, sp, #76	; 0x4c
 8008a9c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8008a9e:	00ec      	lsls	r4, r5, #3
 8008aa0:	1964      	adds	r4, r4, r5
 8008aa2:	4bcd      	ldr	r3, [pc, #820]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008aa4:	191b      	adds	r3, r3, r4
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d100      	bne.n	8008aae <SetButtonEvents+0x42>
 8008aac:	e08c      	b.n	8008bc8 <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008aae:	00ec      	lsls	r4, r5, #3
 8008ab0:	1964      	adds	r4, r4, r5
 8008ab2:	4bc9      	ldr	r3, [pc, #804]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008ab4:	191b      	adds	r3, r3, r4
 8008ab6:	4664      	mov	r4, ip
 8008ab8:	709c      	strb	r4, [r3, #2]
 8008aba:	70de      	strb	r6, [r3, #3]
 8008abc:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008abe:	464c      	mov	r4, r9
 8008ac0:	715c      	strb	r4, [r3, #5]
 8008ac2:	4654      	mov	r4, sl
 8008ac4:	719c      	strb	r4, [r3, #6]
 8008ac6:	4644      	mov	r4, r8
 8008ac8:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008aca:	2801      	cmp	r0, #1
 8008acc:	d100      	bne.n	8008ad0 <SetButtonEvents+0x64>
 8008ace:	e0ec      	b.n	8008caa <SetButtonEvents+0x23e>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d000      	beq.n	8008ad6 <SetButtonEvents+0x6a>
 8008ad4:	e124      	b.n	8008d20 <SetButtonEvents+0x2b4>
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d000      	beq.n	8008adc <SetButtonEvents+0x70>
 8008ada:	e170      	b.n	8008dbe <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008adc:	00e9      	lsls	r1, r5, #3
 8008ade:	1949      	adds	r1, r1, r5
 8008ae0:	4bbd      	ldr	r3, [pc, #756]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008ae2:	185b      	adds	r3, r3, r1
 8008ae4:	7a19      	ldrb	r1, [r3, #8]
 8008ae6:	2401      	movs	r4, #1
 8008ae8:	43a1      	bics	r1, r4
 8008aea:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	d100      	bne.n	8008af2 <SetButtonEvents+0x86>
 8008af0:	e0c3      	b.n	8008c7a <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008af2:	00ea      	lsls	r2, r5, #3
 8008af4:	1952      	adds	r2, r2, r5
 8008af6:	4bb8      	ldr	r3, [pc, #736]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008af8:	189b      	adds	r3, r3, r2
 8008afa:	7a1a      	ldrb	r2, [r3, #8]
 8008afc:	2102      	movs	r1, #2
 8008afe:	430a      	orrs	r2, r1
 8008b00:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008b02:	2801      	cmp	r0, #1
 8008b04:	d100      	bne.n	8008b08 <SetButtonEvents+0x9c>
 8008b06:	e0da      	b.n	8008cbe <SetButtonEvents+0x252>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d100      	bne.n	8008b0e <SetButtonEvents+0xa2>
 8008b0c:	e0bd      	b.n	8008c8a <SetButtonEvents+0x21e>
 8008b0e:	e107      	b.n	8008d20 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008b10:	00ea      	lsls	r2, r5, #3
 8008b12:	1952      	adds	r2, r2, r5
 8008b14:	4bb0      	ldr	r3, [pc, #704]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	7a1a      	ldrb	r2, [r3, #8]
 8008b1a:	2110      	movs	r1, #16
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008b20:	2801      	cmp	r0, #1
 8008b22:	d100      	bne.n	8008b26 <SetButtonEvents+0xba>
 8008b24:	e0e3      	b.n	8008cee <SetButtonEvents+0x282>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d000      	beq.n	8008b2c <SetButtonEvents+0xc0>
 8008b2a:	e0f9      	b.n	8008d20 <SetButtonEvents+0x2b4>
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d063      	beq.n	8008bfa <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008b32:	00ea      	lsls	r2, r5, #3
 8008b34:	1952      	adds	r2, r2, r5
 8008b36:	4ba8      	ldr	r3, [pc, #672]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008b38:	189b      	adds	r3, r3, r2
 8008b3a:	7a1a      	ldrb	r2, [r3, #8]
 8008b3c:	2120      	movs	r1, #32
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008b42:	e00a      	b.n	8008b5a <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008b44:	00ea      	lsls	r2, r5, #3
 8008b46:	1952      	adds	r2, r2, r5
 8008b48:	4ba3      	ldr	r3, [pc, #652]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	7a1a      	ldrb	r2, [r3, #8]
 8008b4e:	2120      	movs	r1, #32
 8008b50:	430a      	orrs	r2, r1
 8008b52:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008b54:	2801      	cmp	r0, #1
 8008b56:	d100      	bne.n	8008b5a <SetButtonEvents+0xee>
 8008b58:	e0d1      	b.n	8008cfe <SetButtonEvents+0x292>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d000      	beq.n	8008b60 <SetButtonEvents+0xf4>
 8008b5e:	e0df      	b.n	8008d20 <SetButtonEvents+0x2b4>
 8008b60:	4653      	mov	r3, sl
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d054      	beq.n	8008c10 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008b66:	00ea      	lsls	r2, r5, #3
 8008b68:	1952      	adds	r2, r2, r5
 8008b6a:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	7a1a      	ldrb	r2, [r3, #8]
 8008b70:	2140      	movs	r1, #64	; 0x40
 8008b72:	430a      	orrs	r2, r1
 8008b74:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008b76:	e00a      	b.n	8008b8e <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008b78:	00ea      	lsls	r2, r5, #3
 8008b7a:	1952      	adds	r2, r2, r5
 8008b7c:	4b96      	ldr	r3, [pc, #600]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	7a1a      	ldrb	r2, [r3, #8]
 8008b82:	2140      	movs	r1, #64	; 0x40
 8008b84:	430a      	orrs	r2, r1
 8008b86:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008b88:	2801      	cmp	r0, #1
 8008b8a:	d100      	bne.n	8008b8e <SetButtonEvents+0x122>
 8008b8c:	e0bf      	b.n	8008d0e <SetButtonEvents+0x2a2>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d046      	beq.n	8008c20 <SetButtonEvents+0x1b4>
 8008b92:	e0c5      	b.n	8008d20 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008b94:	0a19      	lsrs	r1, r3, #8
 8008b96:	0209      	lsls	r1, r1, #8
 8008b98:	4301      	orrs	r1, r0
 8008b9a:	ab02      	add	r3, sp, #8
 8008b9c:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008b9e:	0020      	movs	r0, r4
 8008ba0:	f7fe ff62 	bl	8007a68 <EE_WriteVariable>
 8008ba4:	e0d3      	b.n	8008d4e <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	4319      	orrs	r1, r3
 8008baa:	4658      	mov	r0, fp
 8008bac:	f7fe ff5c 	bl	8007a68 <EE_WriteVariable>
 8008bb0:	e0dd      	b.n	8008d6e <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008bb2:	0019      	movs	r1, r3
 8008bb4:	0028      	movs	r0, r5
 8008bb6:	f7fe ff57 	bl	8007a68 <EE_WriteVariable>
 8008bba:	e0ea      	b.n	8008d92 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008bbc:	0019      	movs	r1, r3
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f7fe ff52 	bl	8007a68 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e0f3      	b.n	8008db0 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008bc8:	200b      	movs	r0, #11
 8008bca:	e0f1      	b.n	8008db0 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008bcc:	200b      	movs	r0, #11
 8008bce:	e0ef      	b.n	8008db0 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008bd0:	00ea      	lsls	r2, r5, #3
 8008bd2:	1952      	adds	r2, r2, r5
 8008bd4:	4b80      	ldr	r3, [pc, #512]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	7a1a      	ldrb	r2, [r3, #8]
 8008bda:	2108      	movs	r1, #8
 8008bdc:	438a      	bics	r2, r1
 8008bde:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008be0:	2f00      	cmp	r7, #0
 8008be2:	d195      	bne.n	8008b10 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008be4:	00ea      	lsls	r2, r5, #3
 8008be6:	1952      	adds	r2, r2, r5
 8008be8:	4b7b      	ldr	r3, [pc, #492]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008bea:	189b      	adds	r3, r3, r2
 8008bec:	7a1a      	ldrb	r2, [r3, #8]
 8008bee:	2110      	movs	r1, #16
 8008bf0:	438a      	bics	r2, r1
 8008bf2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008bf4:	464b      	mov	r3, r9
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1a4      	bne.n	8008b44 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008bfa:	00ea      	lsls	r2, r5, #3
 8008bfc:	1952      	adds	r2, r2, r5
 8008bfe:	4b76      	ldr	r3, [pc, #472]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	7a1a      	ldrb	r2, [r3, #8]
 8008c04:	2120      	movs	r1, #32
 8008c06:	438a      	bics	r2, r1
 8008c08:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008c0a:	4653      	mov	r3, sl
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1b3      	bne.n	8008b78 <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008c10:	00ea      	lsls	r2, r5, #3
 8008c12:	1952      	adds	r2, r2, r5
 8008c14:	4b70      	ldr	r3, [pc, #448]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c16:	189b      	adds	r3, r3, r2
 8008c18:	7a1a      	ldrb	r2, [r3, #8]
 8008c1a:	2140      	movs	r1, #64	; 0x40
 8008c1c:	438a      	bics	r2, r1
 8008c1e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008c20:	4643      	mov	r3, r8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d173      	bne.n	8008d0e <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008c26:	00ea      	lsls	r2, r5, #3
 8008c28:	1952      	adds	r2, r2, r5
 8008c2a:	4b6b      	ldr	r3, [pc, #428]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c2c:	189b      	adds	r3, r3, r2
 8008c2e:	7a19      	ldrb	r1, [r3, #8]
 8008c30:	227f      	movs	r2, #127	; 0x7f
 8008c32:	400a      	ands	r2, r1
 8008c34:	721a      	strb	r2, [r3, #8]
 8008c36:	e073      	b.n	8008d20 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008c38:	00ea      	lsls	r2, r5, #3
 8008c3a:	1952      	adds	r2, r2, r5
 8008c3c:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	7a1a      	ldrb	r2, [r3, #8]
 8008c42:	2104      	movs	r1, #4
 8008c44:	438a      	bics	r2, r1
 8008c46:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008c48:	2e00      	cmp	r6, #0
 8008c4a:	d0c1      	beq.n	8008bd0 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008c4c:	00ea      	lsls	r2, r5, #3
 8008c4e:	1952      	adds	r2, r2, r5
 8008c50:	4b61      	ldr	r3, [pc, #388]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c52:	189b      	adds	r3, r3, r2
 8008c54:	7a1a      	ldrb	r2, [r3, #8]
 8008c56:	2108      	movs	r1, #8
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008c5c:	2801      	cmp	r0, #1
 8008c5e:	d03e      	beq.n	8008cde <SetButtonEvents+0x272>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d15d      	bne.n	8008d20 <SetButtonEvents+0x2b4>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	d0bd      	beq.n	8008be4 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008c68:	00ea      	lsls	r2, r5, #3
 8008c6a:	1952      	adds	r2, r2, r5
 8008c6c:	4b5a      	ldr	r3, [pc, #360]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c6e:	189b      	adds	r3, r3, r2
 8008c70:	7a1a      	ldrb	r2, [r3, #8]
 8008c72:	2110      	movs	r1, #16
 8008c74:	430a      	orrs	r2, r1
 8008c76:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008c78:	e755      	b.n	8008b26 <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008c7a:	00ea      	lsls	r2, r5, #3
 8008c7c:	1952      	adds	r2, r2, r5
 8008c7e:	4b56      	ldr	r3, [pc, #344]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c80:	189b      	adds	r3, r3, r2
 8008c82:	7a1a      	ldrb	r2, [r3, #8]
 8008c84:	2102      	movs	r1, #2
 8008c86:	438a      	bics	r2, r1
 8008c88:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0d3      	beq.n	8008c38 <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008c90:	00ea      	lsls	r2, r5, #3
 8008c92:	1952      	adds	r2, r2, r5
 8008c94:	4b50      	ldr	r3, [pc, #320]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008c96:	189b      	adds	r3, r3, r2
 8008c98:	7a1a      	ldrb	r2, [r3, #8]
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008ca0:	2801      	cmp	r0, #1
 8008ca2:	d014      	beq.n	8008cce <SetButtonEvents+0x262>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d0cf      	beq.n	8008c48 <SetButtonEvents+0x1dc>
 8008ca8:	e03a      	b.n	8008d20 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008caa:	00eb      	lsls	r3, r5, #3
 8008cac:	195b      	adds	r3, r3, r5
 8008cae:	4a4a      	ldr	r2, [pc, #296]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008cb0:	18d2      	adds	r2, r2, r3
 8008cb2:	7a13      	ldrb	r3, [r2, #8]
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008cb8:	2102      	movs	r1, #2
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008cbe:	00ea      	lsls	r2, r5, #3
 8008cc0:	1952      	adds	r2, r2, r5
 8008cc2:	4b45      	ldr	r3, [pc, #276]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008cc4:	189b      	adds	r3, r3, r2
 8008cc6:	7a1a      	ldrb	r2, [r3, #8]
 8008cc8:	2104      	movs	r1, #4
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008cce:	00ea      	lsls	r2, r5, #3
 8008cd0:	1952      	adds	r2, r2, r5
 8008cd2:	4b41      	ldr	r3, [pc, #260]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008cd4:	189b      	adds	r3, r3, r2
 8008cd6:	7a1a      	ldrb	r2, [r3, #8]
 8008cd8:	2108      	movs	r1, #8
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008cde:	00ea      	lsls	r2, r5, #3
 8008ce0:	1952      	adds	r2, r2, r5
 8008ce2:	4b3d      	ldr	r3, [pc, #244]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008ce4:	189b      	adds	r3, r3, r2
 8008ce6:	7a1a      	ldrb	r2, [r3, #8]
 8008ce8:	2110      	movs	r1, #16
 8008cea:	430a      	orrs	r2, r1
 8008cec:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008cee:	00ea      	lsls	r2, r5, #3
 8008cf0:	1952      	adds	r2, r2, r5
 8008cf2:	4b39      	ldr	r3, [pc, #228]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	7a1a      	ldrb	r2, [r3, #8]
 8008cf8:	2120      	movs	r1, #32
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008cfe:	00ea      	lsls	r2, r5, #3
 8008d00:	1952      	adds	r2, r2, r5
 8008d02:	4b35      	ldr	r3, [pc, #212]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008d04:	189b      	adds	r3, r3, r2
 8008d06:	7a1a      	ldrb	r2, [r3, #8]
 8008d08:	2140      	movs	r1, #64	; 0x40
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008d0e:	00ea      	lsls	r2, r5, #3
 8008d10:	1952      	adds	r2, r2, r5
 8008d12:	4b31      	ldr	r3, [pc, #196]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	7a19      	ldrb	r1, [r3, #8]
 8008d18:	2280      	movs	r2, #128	; 0x80
 8008d1a:	4252      	negs	r2, r2
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008d20:	002c      	movs	r4, r5
 8008d22:	343a      	adds	r4, #58	; 0x3a
 8008d24:	00a4      	lsls	r4, r4, #2
 8008d26:	ab02      	add	r3, sp, #8
 8008d28:	1d99      	adds	r1, r3, #6
 8008d2a:	0020      	movs	r0, r4
 8008d2c:	f7fe fe70 	bl	8007a10 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d000      	beq.n	8008d36 <SetButtonEvents+0x2ca>
 8008d34:	e74a      	b.n	8008bcc <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008d36:	ab02      	add	r3, sp, #8
 8008d38:	1d9a      	adds	r2, r3, #6
 8008d3a:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008d3c:	00e8      	lsls	r0, r5, #3
 8008d3e:	1945      	adds	r5, r0, r5
 8008d40:	4825      	ldr	r0, [pc, #148]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008d42:	1940      	adds	r0, r0, r5
 8008d44:	7a00      	ldrb	r0, [r0, #8]
 8008d46:	7812      	ldrb	r2, [r2, #0]
 8008d48:	4282      	cmp	r2, r0
 8008d4a:	d000      	beq.n	8008d4e <SetButtonEvents+0x2e2>
 8008d4c:	e722      	b.n	8008b94 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008d4e:	1c63      	adds	r3, r4, #1
 8008d50:	469b      	mov	fp, r3
 8008d52:	ab02      	add	r3, sp, #8
 8008d54:	1d9d      	adds	r5, r3, #6
 8008d56:	0029      	movs	r1, r5
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f7fe fe59 	bl	8007a10 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	0219      	lsls	r1, r3, #8
 8008d62:	882a      	ldrh	r2, [r5, #0]
 8008d64:	464b      	mov	r3, r9
 8008d66:	430b      	orrs	r3, r1
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d000      	beq.n	8008d6e <SetButtonEvents+0x302>
 8008d6c:	e71b      	b.n	8008ba6 <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008d6e:	1ca5      	adds	r5, r4, #2
 8008d70:	2306      	movs	r3, #6
 8008d72:	aa02      	add	r2, sp, #8
 8008d74:	4694      	mov	ip, r2
 8008d76:	4463      	add	r3, ip
 8008d78:	4699      	mov	r9, r3
 8008d7a:	0019      	movs	r1, r3
 8008d7c:	0028      	movs	r0, r5
 8008d7e:	f7fe fe47 	bl	8007a10 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008d82:	0236      	lsls	r6, r6, #8
 8008d84:	464b      	mov	r3, r9
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	4653      	mov	r3, sl
 8008d8a:	4333      	orrs	r3, r6
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d000      	beq.n	8008d92 <SetButtonEvents+0x326>
 8008d90:	e70f      	b.n	8008bb2 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008d92:	3403      	adds	r4, #3
 8008d94:	ab02      	add	r3, sp, #8
 8008d96:	1d9d      	adds	r5, r3, #6
 8008d98:	0029      	movs	r1, r5
 8008d9a:	0020      	movs	r0, r4
 8008d9c:	f7fe fe38 	bl	8007a10 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008da0:	023f      	lsls	r7, r7, #8
 8008da2:	882a      	ldrh	r2, [r5, #0]
 8008da4:	4643      	mov	r3, r8
 8008da6:	433b      	orrs	r3, r7
	return result;
 8008da8:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d000      	beq.n	8008db0 <SetButtonEvents+0x344>
 8008dae:	e705      	b.n	8008bbc <SetButtonEvents+0x150>
}
 8008db0:	b005      	add	sp, #20
 8008db2:	bcf0      	pop	{r4, r5, r6, r7}
 8008db4:	46bb      	mov	fp, r7
 8008db6:	46b2      	mov	sl, r6
 8008db8:	46a9      	mov	r9, r5
 8008dba:	46a0      	mov	r8, r4
 8008dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008dbe:	00e9      	lsls	r1, r5, #3
 8008dc0:	1949      	adds	r1, r1, r5
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <SetButtonEvents+0x36c>)
 8008dc4:	185b      	adds	r3, r3, r1
 8008dc6:	7a19      	ldrb	r1, [r3, #8]
 8008dc8:	2401      	movs	r4, #1
 8008dca:	4321      	orrs	r1, r4
 8008dcc:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d100      	bne.n	8008dd4 <SetButtonEvents+0x368>
 8008dd2:	e68b      	b.n	8008aec <SetButtonEvents+0x80>
 8008dd4:	e7a4      	b.n	8008d20 <SetButtonEvents+0x2b4>
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	20001480 	.word	0x20001480

08008ddc <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008ddc:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008dde:	f006 fce4 	bl	800f7aa <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008de2:	b2c4      	uxtb	r4, r0
 8008de4:	0020      	movs	r0, r4
 8008de6:	f7fe fccf 	bl	8007788 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008dea:	0020      	movs	r0, r4
 8008dec:	f7fe fcfa 	bl	80077e4 <SwitchStreamDMAToMsg>
}
 8008df0:	bd10      	pop	{r4, pc}
	...

08008df4 <SetupDMAStreams>:
{
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	0005      	movs	r5, r0
 8008dfa:	000c      	movs	r4, r1
 8008dfc:	0016      	movs	r6, r2
 8008dfe:	220f      	movs	r2, #15
 8008e00:	446a      	add	r2, sp
 8008e02:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008e04:	aa08      	add	r2, sp, #32
 8008e06:	7810      	ldrb	r0, [r2, #0]
 8008e08:	4283      	cmp	r3, r0
 8008e0a:	d057      	beq.n	8008ebc <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d100      	bne.n	8008e12 <SetupDMAStreams+0x1e>
 8008e10:	e0ba      	b.n	8008f88 <SetupDMAStreams+0x194>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d100      	bne.n	8008e18 <SetupDMAStreams+0x24>
 8008e16:	e0ba      	b.n	8008f8e <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	d054      	beq.n	8008ec6 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008e1c:	2d01      	cmp	r5, #1
 8008e1e:	d100      	bne.n	8008e22 <SetupDMAStreams+0x2e>
 8008e20:	e089      	b.n	8008f36 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8008e22:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008e24:	2d02      	cmp	r5, #2
 8008e26:	d000      	beq.n	8008e2a <SetupDMAStreams+0x36>
 8008e28:	e0af      	b.n	8008f8a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f004 fcce 	bl	800d7cc <GetUart>
 8008e30:	0005      	movs	r5, r0
 8008e32:	ab08      	add	r3, sp, #32
 8008e34:	7818      	ldrb	r0, [r3, #0]
 8008e36:	f004 fcc9 	bl	800d7cc <GetUart>
 8008e3a:	0001      	movs	r1, r0
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	0028      	movs	r0, r5
 8008e40:	f7fe fd06 	bl	8007850 <StartDMAstream>
 8008e44:	2817      	cmp	r0, #23
 8008e46:	d100      	bne.n	8008e4a <SetupDMAStreams+0x56>
 8008e48:	e09f      	b.n	8008f8a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008e4a:	0170      	lsls	r0, r6, #5
 8008e4c:	1b80      	subs	r0, r0, r6
 8008e4e:	0080      	lsls	r0, r0, #2
 8008e50:	1980      	adds	r0, r0, r6
 8008e52:	00c0      	lsls	r0, r0, #3
 8008e54:	21fa      	movs	r1, #250	; 0xfa
 8008e56:	0089      	lsls	r1, r1, #2
 8008e58:	f7f7 f97a 	bl	8000150 <__udivsi3>
 8008e5c:	0005      	movs	r5, r0
 8008e5e:	4b4d      	ldr	r3, [pc, #308]	; (8008f94 <SetupDMAStreams+0x1a0>)
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	230f      	movs	r3, #15
 8008e64:	446b      	add	r3, sp
 8008e66:	2200      	movs	r2, #0
 8008e68:	0001      	movs	r1, r0
 8008e6a:	484b      	ldr	r0, [pc, #300]	; (8008f98 <SetupDMAStreams+0x1a4>)
 8008e6c:	f006 fb36 	bl	800f4dc <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008e70:	466b      	mov	r3, sp
 8008e72:	7bdb      	ldrb	r3, [r3, #15]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4a48      	ldr	r2, [pc, #288]	; (8008f9c <SetupDMAStreams+0x1a8>)
 8008e7a:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008e7c:	ab08      	add	r3, sp, #32
 8008e7e:	7818      	ldrb	r0, [r3, #0]
 8008e80:	f004 fca4 	bl	800d7cc <GetUart>
 8008e84:	0006      	movs	r6, r0
 8008e86:	466b      	mov	r3, sp
 8008e88:	7bd8      	ldrb	r0, [r3, #15]
 8008e8a:	f004 fc9f 	bl	800d7cc <GetUart>
 8008e8e:	0001      	movs	r1, r0
 8008e90:	2201      	movs	r2, #1
 8008e92:	0030      	movs	r0, r6
 8008e94:	f7fe fcdc 	bl	8007850 <StartDMAstream>
 8008e98:	2817      	cmp	r0, #23
 8008e9a:	d076      	beq.n	8008f8a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008e9c:	4b3d      	ldr	r3, [pc, #244]	; (8008f94 <SetupDMAStreams+0x1a0>)
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	ab08      	add	r3, sp, #32
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	0029      	movs	r1, r5
 8008ea6:	483c      	ldr	r0, [pc, #240]	; (8008f98 <SetupDMAStreams+0x1a4>)
 8008ea8:	f006 fb18 	bl	800f4dc <xTimerCreate>
 8008eac:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 8008eae:	ab08      	add	r3, sp, #32
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4a39      	ldr	r2, [pc, #228]	; (8008f9c <SetupDMAStreams+0x1a8>)
 8008eb8:	509c      	str	r4, [r3, r2]
 8008eba:	e02c      	b.n	8008f16 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 8008ebc:	4a38      	ldr	r2, [pc, #224]	; (8008fa0 <SetupDMAStreams+0x1ac>)
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008ec2:	2067      	movs	r0, #103	; 0x67
 8008ec4:	e061      	b.n	8008f8a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f004 fc80 	bl	800d7cc <GetUart>
 8008ecc:	0005      	movs	r5, r0
 8008ece:	ab08      	add	r3, sp, #32
 8008ed0:	7818      	ldrb	r0, [r3, #0]
 8008ed2:	f004 fc7b 	bl	800d7cc <GetUart>
 8008ed6:	0001      	movs	r1, r0
 8008ed8:	2201      	movs	r2, #1
 8008eda:	0028      	movs	r0, r5
 8008edc:	f7fe fcb8 	bl	8007850 <StartDMAstream>
 8008ee0:	2817      	cmp	r0, #23
 8008ee2:	d052      	beq.n	8008f8a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008ee4:	250f      	movs	r5, #15
 8008ee6:	446d      	add	r5, sp
 8008ee8:	0170      	lsls	r0, r6, #5
 8008eea:	1b80      	subs	r0, r0, r6
 8008eec:	0080      	lsls	r0, r0, #2
 8008eee:	1980      	adds	r0, r0, r6
 8008ef0:	00c0      	lsls	r0, r0, #3
 8008ef2:	21fa      	movs	r1, #250	; 0xfa
 8008ef4:	0089      	lsls	r1, r1, #2
 8008ef6:	f7f7 f92b 	bl	8000150 <__udivsi3>
 8008efa:	0001      	movs	r1, r0
 8008efc:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <SetupDMAStreams+0x1a0>)
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	002b      	movs	r3, r5
 8008f02:	2200      	movs	r2, #0
 8008f04:	4824      	ldr	r0, [pc, #144]	; (8008f98 <SetupDMAStreams+0x1a4>)
 8008f06:	f006 fae9 	bl	800f4dc <xTimerCreate>
 8008f0a:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8008f0c:	782b      	ldrb	r3, [r5, #0]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <SetupDMAStreams+0x1a8>)
 8008f14:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 8008f16:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	d036      	beq.n	8008f8a <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008f1c:	f005 fd52 	bl	800e9c4 <xTaskGetTickCount>
 8008f20:	0002      	movs	r2, r0
 8008f22:	2301      	movs	r3, #1
 8008f24:	425b      	negs	r3, r3
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	0030      	movs	r0, r6
 8008f2e:	f006 faf5 	bl	800f51c <xTimerGenericCommand>
	return BOS_OK;
 8008f32:	2000      	movs	r0, #0
 8008f34:	e029      	b.n	8008f8a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008f36:	f004 fc49 	bl	800d7cc <GetUart>
 8008f3a:	0005      	movs	r5, r0
 8008f3c:	230f      	movs	r3, #15
 8008f3e:	446b      	add	r3, sp
 8008f40:	7818      	ldrb	r0, [r3, #0]
 8008f42:	f004 fc43 	bl	800d7cc <GetUart>
 8008f46:	0001      	movs	r1, r0
 8008f48:	2201      	movs	r2, #1
 8008f4a:	0028      	movs	r0, r5
 8008f4c:	f7fe fc80 	bl	8007850 <StartDMAstream>
 8008f50:	2817      	cmp	r0, #23
 8008f52:	d01a      	beq.n	8008f8a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008f54:	0170      	lsls	r0, r6, #5
 8008f56:	1b80      	subs	r0, r0, r6
 8008f58:	0080      	lsls	r0, r0, #2
 8008f5a:	1980      	adds	r0, r0, r6
 8008f5c:	00c0      	lsls	r0, r0, #3
 8008f5e:	21fa      	movs	r1, #250	; 0xfa
 8008f60:	0089      	lsls	r1, r1, #2
 8008f62:	f7f7 f8f5 	bl	8000150 <__udivsi3>
 8008f66:	0001      	movs	r1, r0
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <SetupDMAStreams+0x1a0>)
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	ab08      	add	r3, sp, #32
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4809      	ldr	r0, [pc, #36]	; (8008f98 <SetupDMAStreams+0x1a4>)
 8008f72:	f006 fab3 	bl	800f4dc <xTimerCreate>
 8008f76:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8008f78:	230f      	movs	r3, #15
 8008f7a:	446b      	add	r3, sp
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a06      	ldr	r2, [pc, #24]	; (8008f9c <SetupDMAStreams+0x1a8>)
 8008f84:	509c      	str	r4, [r3, r2]
 8008f86:	e7c6      	b.n	8008f16 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8008f88:	2067      	movs	r0, #103	; 0x67
}
 8008f8a:	b004      	add	sp, #16
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 8008f8e:	2067      	movs	r0, #103	; 0x67
 8008f90:	e7fb      	b.n	8008f8a <SetupDMAStreams+0x196>
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	08008ddd 	.word	0x08008ddd
 8008f98:	0801c3a4 	.word	0x0801c3a4
 8008f9c:	20001440 	.word	0x20001440
 8008fa0:	200010c0 	.word	0x200010c0

08008fa4 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008fa4:	b510      	push	{r4, lr}
	switch (port)
 8008fa6:	2805      	cmp	r0, #5
 8008fa8:	d80a      	bhi.n	8008fc0 <NotifyMessagingTask+0x1c>
 8008faa:	0080      	lsls	r0, r0, #2
 8008fac:	4b15      	ldr	r3, [pc, #84]	; (8009004 <NotifyMessagingTask+0x60>)
 8008fae:	581b      	ldr	r3, [r3, r0]
 8008fb0:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <NotifyMessagingTask+0x64>)
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2202      	movs	r2, #2
 8008fba:	2100      	movs	r1, #0
 8008fbc:	f006 f9bc 	bl	800f338 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008fc0:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <NotifyMessagingTask+0x68>)
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2202      	movs	r2, #2
 8008fca:	2100      	movs	r1, #0
 8008fcc:	f006 f9b4 	bl	800f338 <xTaskGenericNotify>
 8008fd0:	e7f6      	b.n	8008fc0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <NotifyMessagingTask+0x6c>)
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2202      	movs	r2, #2
 8008fda:	2100      	movs	r1, #0
 8008fdc:	f006 f9ac 	bl	800f338 <xTaskGenericNotify>
 8008fe0:	e7ee      	b.n	8008fc0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <NotifyMessagingTask+0x70>)
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2202      	movs	r2, #2
 8008fea:	2100      	movs	r1, #0
 8008fec:	f006 f9a4 	bl	800f338 <xTaskGenericNotify>
 8008ff0:	e7e6      	b.n	8008fc0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <NotifyMessagingTask+0x74>)
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f006 f99c 	bl	800f338 <xTaskGenericNotify>
}
 8009000:	e7de      	b.n	8008fc0 <NotifyMessagingTask+0x1c>
 8009002:	46c0      	nop			; (mov r8, r8)
 8009004:	0801c3b0 	.word	0x0801c3b0
 8009008:	2000145c 	.word	0x2000145c
 800900c:	20001460 	.word	0x20001460
 8009010:	20001464 	.word	0x20001464
 8009014:	20001468 	.word	0x20001468
 8009018:	2000146c 	.word	0x2000146c

0800901c <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	46de      	mov	lr, fp
 8009020:	4657      	mov	r7, sl
 8009022:	464e      	mov	r6, r9
 8009024:	4645      	mov	r5, r8
 8009026:	b5e0      	push	{r5, r6, r7, lr}
 8009028:	b085      	sub	sp, #20
 800902a:	0005      	movs	r5, r0
 800902c:	9102      	str	r1, [sp, #8]
 800902e:	0014      	movs	r4, r2
 8009030:	001e      	movs	r6, r3
 8009032:	ab0e      	add	r3, sp, #56	; 0x38
 8009034:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009036:	0003      	movs	r3, r0
 8009038:	4313      	orrs	r3, r2
 800903a:	d100      	bne.n	800903e <SendMessageFromPort+0x22>
 800903c:	e173      	b.n	8009326 <SendMessageFromPort+0x30a>
 800903e:	2800      	cmp	r0, #0
 8009040:	d14c      	bne.n	80090dc <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009042:	2afd      	cmp	r2, #253	; 0xfd
 8009044:	d800      	bhi.n	8009048 <SendMessageFromPort+0x2c>
 8009046:	e170      	b.n	800932a <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8009048:	2000      	movs	r0, #0
 800904a:	f005 fc1d 	bl	800e888 <uxTaskPriorityGet>
 800904e:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8009050:	2105      	movs	r1, #5
 8009052:	2000      	movs	r0, #0
 8009054:	f005 fc28 	bl	800e8a8 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8009058:	4bc0      	ldr	r3, [pc, #768]	; (800935c <SendMessageFromPort+0x340>)
 800905a:	2248      	movs	r2, #72	; 0x48
 800905c:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 800905e:	3212      	adds	r2, #18
 8009060:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d000      	beq.n	800906a <SendMessageFromPort+0x4e>
 8009068:	e174      	b.n	8009354 <SendMessageFromPort+0x338>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 800906a:	1e7b      	subs	r3, r7, #1
 800906c:	4abc      	ldr	r2, [pc, #752]	; (8009360 <SendMessageFromPort+0x344>)
 800906e:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8009070:	4abc      	ldr	r2, [pc, #752]	; (8009364 <SendMessageFromPort+0x348>)
 8009072:	4690      	mov	r8, r2
 8009074:	00d9      	lsls	r1, r3, #3
 8009076:	1ac9      	subs	r1, r1, r3
 8009078:	00c9      	lsls	r1, r1, #3
 800907a:	4bbb      	ldr	r3, [pc, #748]	; (8009368 <SendMessageFromPort+0x34c>)
 800907c:	18c9      	adds	r1, r1, r3
 800907e:	003a      	movs	r2, r7
 8009080:	4640      	mov	r0, r8
 8009082:	f00a fcad 	bl	80139e0 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8009086:	2303      	movs	r3, #3
 8009088:	425b      	negs	r3, r3
 800908a:	469c      	mov	ip, r3
 800908c:	44e0      	add	r8, ip
 800908e:	4643      	mov	r3, r8
 8009090:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8009092:	1cfb      	adds	r3, r7, #3
 8009094:	469b      	mov	fp, r3
 8009096:	4bb5      	ldr	r3, [pc, #724]	; (800936c <SendMessageFromPort+0x350>)
 8009098:	469a      	mov	sl, r3
 800909a:	465a      	mov	r2, fp
 800909c:	4641      	mov	r1, r8
 800909e:	0018      	movs	r0, r3
 80090a0:	f00a fc9e 	bl	80139e0 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80090a4:	b2bb      	uxth	r3, r7
 80090a6:	4699      	mov	r9, r3
 80090a8:	4659      	mov	r1, fp
 80090aa:	4650      	mov	r0, sl
 80090ac:	f003 fde0 	bl	800cc70 <CalculateCRC8>
 80090b0:	4643      	mov	r3, r8
 80090b2:	465a      	mov	r2, fp
 80090b4:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 80090b6:	2238      	movs	r2, #56	; 0x38
 80090b8:	2100      	movs	r1, #0
 80090ba:	4650      	mov	r0, sl
 80090bc:	f00a fc99 	bl	80139f2 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80090c0:	2cfd      	cmp	r4, #253	; 0xfd
 80090c2:	d800      	bhi.n	80090c6 <SendMessageFromPort+0xaa>
 80090c4:	e102      	b.n	80092cc <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d000      	beq.n	80090cc <SendMessageFromPort+0xb0>
 80090ca:	e0f5      	b.n	80092b8 <SendMessageFromPort+0x29c>
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d000      	beq.n	80090d4 <SendMessageFromPort+0xb8>
 80090d2:	e0f1      	b.n	80092b8 <SendMessageFromPort+0x29c>
			src = message[4];
 80090d4:	4ba1      	ldr	r3, [pc, #644]	; (800935c <SendMessageFromPort+0x340>)
 80090d6:	791b      	ldrb	r3, [r3, #4]
 80090d8:	9302      	str	r3, [sp, #8]
 80090da:	e0ed      	b.n	80092b8 <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 80090dc:	9b02      	ldr	r3, [sp, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <SendMessageFromPort+0xcc>
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	d100      	bne.n	80090e8 <SendMessageFromPort+0xcc>
 80090e6:	e122      	b.n	800932e <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 80090e8:	2000      	movs	r0, #0
 80090ea:	f005 fbcd 	bl	800e888 <uxTaskPriorityGet>
 80090ee:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80090f0:	2105      	movs	r1, #5
 80090f2:	2000      	movs	r0, #0
 80090f4:	f005 fbd8 	bl	800e8a8 <vTaskPrioritySet>
	message[0] = 'H';						
 80090f8:	4b98      	ldr	r3, [pc, #608]	; (800935c <SendMessageFromPort+0x340>)
 80090fa:	2248      	movs	r2, #72	; 0x48
 80090fc:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80090fe:	3212      	adds	r2, #18
 8009100:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009102:	2e00      	cmp	r6, #0
 8009104:	d0b1      	beq.n	800906a <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d078      	beq.n	80091fe <SendMessageFromPort+0x1e2>
		message[2] = length;	
 800910c:	4993      	ldr	r1, [pc, #588]	; (800935c <SendMessageFromPort+0x340>)
 800910e:	2300      	movs	r3, #0
 8009110:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8009112:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8009118:	4a95      	ldr	r2, [pc, #596]	; (8009370 <SendMessageFromPort+0x354>)
 800911a:	79d3      	ldrb	r3, [r2, #7]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	7992      	ldrb	r2, [r2, #6]
 8009120:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8009122:	22ff      	movs	r2, #255	; 0xff
 8009124:	42b2      	cmp	r2, r6
 8009126:	4192      	sbcs	r2, r2
 8009128:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 800912a:	0052      	lsls	r2, r2, #1
 800912c:	4313      	orrs	r3, r2
 800912e:	b2db      	uxtb	r3, r3
 8009130:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8009132:	718e      	strb	r6, [r1, #6]
		if (extendCode == true) {
 8009134:	2200      	movs	r2, #0
 8009136:	4693      	mov	fp, r2
 8009138:	2eff      	cmp	r6, #255	; 0xff
 800913a:	d903      	bls.n	8009144 <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 800913c:	0a32      	lsrs	r2, r6, #8
 800913e:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009140:	2201      	movs	r2, #1
 8009142:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8009144:	2f2e      	cmp	r7, #46	; 0x2e
 8009146:	d95e      	bls.n	8009206 <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 8009148:	2280      	movs	r2, #128	; 0x80
 800914a:	4252      	negs	r2, r2
 800914c:	4313      	orrs	r3, r2
 800914e:	4a83      	ldr	r2, [pc, #524]	; (800935c <SendMessageFromPort+0x340>)
 8009150:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8009152:	4b88      	ldr	r3, [pc, #544]	; (8009374 <SendMessageFromPort+0x358>)
 8009154:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8009156:	232e      	movs	r3, #46	; 0x2e
 8009158:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 800915a:	4b86      	ldr	r3, [pc, #536]	; (8009374 <SendMessageFromPort+0x358>)
 800915c:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 800915e:	4b86      	ldr	r3, [pc, #536]	; (8009378 <SendMessageFromPort+0x35c>)
 8009160:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8009162:	4653      	mov	r3, sl
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	0033      	movs	r3, r6
 8009168:	0022      	movs	r2, r4
 800916a:	9902      	ldr	r1, [sp, #8]
 800916c:	0028      	movs	r0, r5
 800916e:	f7ff ff55 	bl	800901c <SendMessageFromPort>
					osDelay(10);
 8009172:	200a      	movs	r0, #10
 8009174:	f004 fc77 	bl	800da66 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8009178:	464b      	mov	r3, r9
 800917a:	881f      	ldrh	r7, [r3, #0]
 800917c:	3f2e      	subs	r7, #46	; 0x2e
 800917e:	b2bf      	uxth	r7, r7
 8009180:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 8009182:	4643      	mov	r3, r8
 8009184:	8819      	ldrh	r1, [r3, #0]
 8009186:	312e      	adds	r1, #46	; 0x2e
 8009188:	b289      	uxth	r1, r1
 800918a:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 800918c:	2f00      	cmp	r7, #0
 800918e:	d049      	beq.n	8009224 <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8009190:	2f2d      	cmp	r7, #45	; 0x2d
 8009192:	d8e6      	bhi.n	8009162 <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8009194:	4b71      	ldr	r3, [pc, #452]	; (800935c <SendMessageFromPort+0x340>)
 8009196:	7958      	ldrb	r0, [r3, #5]
 8009198:	227f      	movs	r2, #127	; 0x7f
 800919a:	4002      	ands	r2, r0
 800919c:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800919e:	465a      	mov	r2, fp
 80091a0:	1dd0      	adds	r0, r2, #7
 80091a2:	18c0      	adds	r0, r0, r3
 80091a4:	4b75      	ldr	r3, [pc, #468]	; (800937c <SendMessageFromPort+0x360>)
 80091a6:	18c9      	adds	r1, r1, r3
 80091a8:	003a      	movs	r2, r7
 80091aa:	f00a fc19 	bl	80139e0 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	4a71      	ldr	r2, [pc, #452]	; (8009378 <SendMessageFromPort+0x35c>)
 80091b2:	8013      	strh	r3, [r2, #0]
 80091b4:	4a6f      	ldr	r2, [pc, #444]	; (8009374 <SendMessageFromPort+0x358>)
 80091b6:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80091b8:	465b      	mov	r3, fp
 80091ba:	1d1e      	adds	r6, r3, #4
 80091bc:	19f6      	adds	r6, r6, r7
 80091be:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 80091c0:	4b6f      	ldr	r3, [pc, #444]	; (8009380 <SendMessageFromPort+0x364>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d05c      	beq.n	8009282 <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 80091c8:	4b6e      	ldr	r3, [pc, #440]	; (8009384 <SendMessageFromPort+0x368>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2bff      	cmp	r3, #255	; 0xff
 80091ce:	d100      	bne.n	80091d2 <SendMessageFromPort+0x1b6>
 80091d0:	e0b1      	b.n	8009336 <SendMessageFromPort+0x31a>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80091d2:	4a6d      	ldr	r2, [pc, #436]	; (8009388 <SendMessageFromPort+0x36c>)
 80091d4:	7812      	ldrb	r2, [r2, #0]
 80091d6:	4690      	mov	r8, r2
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d075      	beq.n	80092c8 <SendMessageFromPort+0x2ac>
 80091dc:	2201      	movs	r2, #1
 80091de:	409a      	lsls	r2, r3
 80091e0:	4694      	mov	ip, r2
 80091e2:	486a      	ldr	r0, [pc, #424]	; (800938c <SendMessageFromPort+0x370>)
 80091e4:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 80091e6:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80091e8:	495c      	ldr	r1, [pc, #368]	; (800935c <SendMessageFromPort+0x340>)
 80091ea:	4689      	mov	r9, r1
 80091ec:	44b9      	add	r9, r7
 80091ee:	0029      	movs	r1, r5
 80091f0:	4645      	mov	r5, r8
 80091f2:	46a2      	mov	sl, r4
 80091f4:	4664      	mov	r4, ip
 80091f6:	46b4      	mov	ip, r6
 80091f8:	465e      	mov	r6, fp
 80091fa:	4688      	mov	r8, r1
 80091fc:	e01a      	b.n	8009234 <SendMessageFromPort+0x218>
		if (src == 0)		src = myID;
 80091fe:	4b64      	ldr	r3, [pc, #400]	; (8009390 <SendMessageFromPort+0x374>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	e782      	b.n	800910c <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009206:	465b      	mov	r3, fp
 8009208:	3307      	adds	r3, #7
 800920a:	4854      	ldr	r0, [pc, #336]	; (800935c <SendMessageFromPort+0x340>)
 800920c:	1818      	adds	r0, r3, r0
 800920e:	4b5a      	ldr	r3, [pc, #360]	; (8009378 <SendMessageFromPort+0x35c>)
 8009210:	8819      	ldrh	r1, [r3, #0]
 8009212:	4b5a      	ldr	r3, [pc, #360]	; (800937c <SendMessageFromPort+0x360>)
 8009214:	18c9      	adds	r1, r1, r3
 8009216:	003a      	movs	r2, r7
 8009218:	f00a fbe2 	bl	80139e0 <memcpy>
			length = numberOfParams + shift + 4;
 800921c:	1d3e      	adds	r6, r7, #4
 800921e:	445e      	add	r6, fp
 8009220:	b2f6      	uxtb	r6, r6
 8009222:	e7cd      	b.n	80091c0 <SendMessageFromPort+0x1a4>
 8009224:	2600      	movs	r6, #0
 8009226:	372e      	adds	r7, #46	; 0x2e
 8009228:	e7ca      	b.n	80091c0 <SendMessageFromPort+0x1a4>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800922a:	3301      	adds	r3, #1
 800922c:	b29b      	uxth	r3, r3
 800922e:	3002      	adds	r0, #2
 8009230:	42ab      	cmp	r3, r5
 8009232:	d80d      	bhi.n	8009250 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 8009234:	8801      	ldrh	r1, [r0, #0]
 8009236:	420c      	tst	r4, r1
 8009238:	d0f7      	beq.n	800922a <SendMessageFromPort+0x20e>
						++groupMembers;							// Add this member
 800923a:	3201      	adds	r2, #1
 800923c:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800923e:	18b9      	adds	r1, r7, r2
 8009240:	292c      	cmp	r1, #44	; 0x2c
 8009242:	dd00      	ble.n	8009246 <SendMessageFromPort+0x22a>
 8009244:	e075      	b.n	8009332 <SendMessageFromPort+0x316>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009246:	4649      	mov	r1, r9
 8009248:	1889      	adds	r1, r1, r2
 800924a:	1989      	adds	r1, r1, r6
 800924c:	718b      	strb	r3, [r1, #6]
 800924e:	e7ec      	b.n	800922a <SendMessageFromPort+0x20e>
 8009250:	46b3      	mov	fp, r6
 8009252:	4666      	mov	r6, ip
 8009254:	4645      	mov	r5, r8
 8009256:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8009258:	465b      	mov	r3, fp
 800925a:	3307      	adds	r3, #7
 800925c:	19db      	adds	r3, r3, r7
 800925e:	189b      	adds	r3, r3, r2
 8009260:	493e      	ldr	r1, [pc, #248]	; (800935c <SendMessageFromPort+0x340>)
 8009262:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8009264:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009266:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8009268:	2f2b      	cmp	r7, #43	; 0x2b
 800926a:	dc3f      	bgt.n	80092ec <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 800926c:	4849      	ldr	r0, [pc, #292]	; (8009394 <SendMessageFromPort+0x378>)
 800926e:	7801      	ldrb	r1, [r0, #0]
 8009270:	3101      	adds	r1, #1
 8009272:	b2c9      	uxtb	r1, r1
 8009274:	7001      	strb	r1, [r0, #0]
 8009276:	4839      	ldr	r0, [pc, #228]	; (800935c <SendMessageFromPort+0x340>)
 8009278:	18c3      	adds	r3, r0, r3
 800927a:	7059      	strb	r1, [r3, #1]
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800927c:	3602      	adds	r6, #2
 800927e:	18b6      	adds	r6, r6, r2
 8009280:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8009282:	4b36      	ldr	r3, [pc, #216]	; (800935c <SendMessageFromPort+0x340>)
 8009284:	4698      	mov	r8, r3
 8009286:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8009288:	1cf3      	adds	r3, r6, #3
 800928a:	469a      	mov	sl, r3
 800928c:	4f37      	ldr	r7, [pc, #220]	; (800936c <SendMessageFromPort+0x350>)
 800928e:	001a      	movs	r2, r3
 8009290:	4641      	mov	r1, r8
 8009292:	0038      	movs	r0, r7
 8009294:	f00a fba4 	bl	80139e0 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8009298:	b2b3      	uxth	r3, r6
 800929a:	4699      	mov	r9, r3
 800929c:	4651      	mov	r1, sl
 800929e:	0038      	movs	r0, r7
 80092a0:	f003 fce6 	bl	800cc70 <CalculateCRC8>
 80092a4:	4643      	mov	r3, r8
 80092a6:	4652      	mov	r2, sl
 80092a8:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 80092aa:	2238      	movs	r2, #56	; 0x38
 80092ac:	2100      	movs	r1, #0
 80092ae:	0038      	movs	r0, r7
 80092b0:	f00a fb9f 	bl	80139f2 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80092b4:	2cfd      	cmp	r4, #253	; 0xfd
 80092b6:	d909      	bls.n	80092cc <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80092b8:	9802      	ldr	r0, [sp, #8]
 80092ba:	f7fa fca9 	bl	8003c10 <FindBroadcastRoutes>
 80092be:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80092c0:	4e35      	ldr	r6, [pc, #212]	; (8009398 <SendMessageFromPort+0x37c>)
 80092c2:	4d33      	ldr	r5, [pc, #204]	; (8009390 <SendMessageFromPort+0x374>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80092c4:	464f      	mov	r7, r9
 80092c6:	e024      	b.n	8009312 <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 80092c8:	2200      	movs	r2, #0
 80092ca:	e7c5      	b.n	8009258 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 80092cc:	464a      	mov	r2, r9
 80092ce:	3204      	adds	r2, #4
 80092d0:	b292      	uxth	r2, r2
 80092d2:	2332      	movs	r3, #50	; 0x32
 80092d4:	4921      	ldr	r1, [pc, #132]	; (800935c <SendMessageFromPort+0x340>)
 80092d6:	0028      	movs	r0, r5
 80092d8:	f004 fae2 	bl	800d8a0 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 80092dc:	9903      	ldr	r1, [sp, #12]
 80092de:	2000      	movs	r0, #0
 80092e0:	f005 fae2 	bl	800e8a8 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 80092e4:	4b2d      	ldr	r3, [pc, #180]	; (800939c <SendMessageFromPort+0x380>)
 80092e6:	2202      	movs	r2, #2
 80092e8:	701a      	strb	r2, [r3, #0]
	
	return result;
 80092ea:	2000      	movs	r0, #0
}
 80092ec:	b005      	add	sp, #20
 80092ee:	bcf0      	pop	{r4, r5, r6, r7}
 80092f0:	46bb      	mov	fp, r7
 80092f2:	46b2      	mov	sl, r6
 80092f4:	46a9      	mov	r9, r5
 80092f6:	46a0      	mov	r8, r4
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80092fa:	1d3a      	adds	r2, r7, #4
 80092fc:	b292      	uxth	r2, r2
 80092fe:	2332      	movs	r3, #50	; 0x32
 8009300:	4916      	ldr	r1, [pc, #88]	; (800935c <SendMessageFromPort+0x340>)
 8009302:	f004 facd 	bl	800d8a0 <writePxDMAMutex>
				Delay_ms(1);
 8009306:	2001      	movs	r0, #1
 8009308:	f006 fc2c 	bl	800fb64 <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800930c:	3401      	adds	r4, #1
 800930e:	2c05      	cmp	r4, #5
 8009310:	d0e4      	beq.n	80092dc <SendMessageFromPort+0x2c0>
 8009312:	1c60      	adds	r0, r4, #1
 8009314:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009316:	782b      	ldrb	r3, [r5, #0]
 8009318:	3b01      	subs	r3, #1
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	5b9b      	ldrh	r3, [r3, r6]
 800931e:	4123      	asrs	r3, r4
 8009320:	07db      	lsls	r3, r3, #31
 8009322:	d5f3      	bpl.n	800930c <SendMessageFromPort+0x2f0>
 8009324:	e7e9      	b.n	80092fa <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 8009326:	2067      	movs	r0, #103	; 0x67
 8009328:	e7e0      	b.n	80092ec <SendMessageFromPort+0x2d0>
 800932a:	2067      	movs	r0, #103	; 0x67
 800932c:	e7de      	b.n	80092ec <SendMessageFromPort+0x2d0>
 800932e:	2067      	movs	r0, #103	; 0x67
 8009330:	e7dc      	b.n	80092ec <SendMessageFromPort+0x2d0>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009332:	2069      	movs	r0, #105	; 0x69
 8009334:	e7da      	b.n	80092ec <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009336:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009338:	2f2c      	cmp	r7, #44	; 0x2c
 800933a:	d8d7      	bhi.n	80092ec <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 800933c:	4a15      	ldr	r2, [pc, #84]	; (8009394 <SendMessageFromPort+0x378>)
 800933e:	7813      	ldrb	r3, [r2, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	7013      	strb	r3, [r2, #0]
 8009346:	4a05      	ldr	r2, [pc, #20]	; (800935c <SendMessageFromPort+0x340>)
 8009348:	445a      	add	r2, fp
 800934a:	19d7      	adds	r7, r2, r7
 800934c:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 800934e:	3601      	adds	r6, #1
 8009350:	b2f6      	uxtb	r6, r6
 8009352:	e796      	b.n	8009282 <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009354:	2e00      	cmp	r6, #0
 8009356:	d100      	bne.n	800935a <SendMessageFromPort+0x33e>
 8009358:	e687      	b.n	800906a <SendMessageFromPort+0x4e>
 800935a:	e6d7      	b.n	800910c <SendMessageFromPort+0xf0>
 800935c:	20000ec8 	.word	0x20000ec8
 8009360:	20000f00 	.word	0x20000f00
 8009364:	20000ecb 	.word	0x20000ecb
 8009368:	20000d10 	.word	0x20000d10
 800936c:	200013e0 	.word	0x200013e0
 8009370:	200068d0 	.word	0x200068d0
 8009374:	200014f2 	.word	0x200014f2
 8009378:	200014f0 	.word	0x200014f0
 800937c:	20000f08 	.word	0x20000f08
 8009380:	20000a7c 	.word	0x20000a7c
 8009384:	2000001d 	.word	0x2000001d
 8009388:	2000001c 	.word	0x2000001c
 800938c:	20000e90 	.word	0x20000e90
 8009390:	20001046 	.word	0x20001046
 8009394:	20000cbc 	.word	0x20000cbc
 8009398:	20000cc0 	.word	0x20000cc0
 800939c:	200010d8 	.word	0x200010d8

080093a0 <ForwardReceivedMessage>:
{
 80093a0:	b530      	push	{r4, r5, lr}
 80093a2:	b083      	sub	sp, #12
 80093a4:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <ForwardReceivedMessage+0x34>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80093ac:	1e42      	subs	r2, r0, #1
 80093ae:	00d3      	lsls	r3, r2, #3
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <ForwardReceivedMessage+0x38>)
 80093b6:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 80093b8:	4b08      	ldr	r3, [pc, #32]	; (80093dc <ForwardReceivedMessage+0x3c>)
 80093ba:	7818      	ldrb	r0, [r3, #0]
 80093bc:	0029      	movs	r1, r5
 80093be:	f7fa fcc1 	bl	8003d44 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 80093c2:	9400      	str	r4, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	002a      	movs	r2, r5
 80093c8:	2100      	movs	r1, #0
 80093ca:	f7ff fe27 	bl	800901c <SendMessageFromPort>
}
 80093ce:	2000      	movs	r0, #0
 80093d0:	b003      	add	sp, #12
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	20000a7c 	.word	0x20000a7c
 80093d8:	20000d10 	.word	0x20000d10
 80093dc:	20001046 	.word	0x20001046

080093e0 <BroadcastReceivedMessage>:
{
 80093e0:	b500      	push	{lr}
 80093e2:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <BroadcastReceivedMessage+0x38>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <BroadcastReceivedMessage+0x3c>)
 80093ec:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80093ee:	28ff      	cmp	r0, #255	; 0xff
 80093f0:	d009      	beq.n	8009406 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80093f2:	9100      	str	r1, [sp, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	22fe      	movs	r2, #254	; 0xfe
 80093f8:	2100      	movs	r1, #0
 80093fa:	2000      	movs	r0, #0
 80093fc:	f7ff fe0e 	bl	800901c <SendMessageFromPort>
}
 8009400:	2000      	movs	r0, #0
 8009402:	b003      	add	sp, #12
 8009404:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8009406:	9100      	str	r1, [sp, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	32ff      	adds	r2, #255	; 0xff
 800940c:	2100      	movs	r1, #0
 800940e:	2000      	movs	r0, #0
 8009410:	f7ff fe04 	bl	800901c <SendMessageFromPort>
 8009414:	e7f4      	b.n	8009400 <BroadcastReceivedMessage+0x20>
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	20000a7c 	.word	0x20000a7c
 800941c:	2000001d 	.word	0x2000001d

08009420 <BroadcastMessage>:
{
 8009420:	b530      	push	{r4, r5, lr}
 8009422:	b083      	sub	sp, #12
 8009424:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <BroadcastMessage+0x44>)
 8009428:	2501      	movs	r5, #1
 800942a:	701d      	strb	r5, [r3, #0]
 800942c:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <BroadcastMessage+0x48>)
 800942e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009430:	29ff      	cmp	r1, #255	; 0xff
 8009432:	d00e      	beq.n	8009452 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8009434:	9400      	str	r4, [sp, #0]
 8009436:	0013      	movs	r3, r2
 8009438:	22fe      	movs	r2, #254	; 0xfe
 800943a:	0001      	movs	r1, r0
 800943c:	2000      	movs	r0, #0
 800943e:	f7ff fded 	bl	800901c <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8009442:	0022      	movs	r2, r4
 8009444:	2100      	movs	r1, #0
 8009446:	4809      	ldr	r0, [pc, #36]	; (800946c <BroadcastMessage+0x4c>)
 8009448:	f00a fad3 	bl	80139f2 <memset>
}
 800944c:	2000      	movs	r0, #0
 800944e:	b003      	add	sp, #12
 8009450:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8009452:	9400      	str	r4, [sp, #0]
 8009454:	0013      	movs	r3, r2
 8009456:	22ff      	movs	r2, #255	; 0xff
 8009458:	0001      	movs	r1, r0
 800945a:	2000      	movs	r0, #0
 800945c:	f7ff fdde 	bl	800901c <SendMessageFromPort>
 8009460:	e7ef      	b.n	8009442 <BroadcastMessage+0x22>
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	20000a7c 	.word	0x20000a7c
 8009468:	2000001d 	.word	0x2000001d
 800946c:	20000f08 	.word	0x20000f08

08009470 <SendMessageToModule>:
{
 8009470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009472:	b083      	sub	sp, #12
 8009474:	0004      	movs	r4, r0
 8009476:	000e      	movs	r6, r1
 8009478:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 800947a:	28ff      	cmp	r0, #255	; 0xff
 800947c:	d012      	beq.n	80094a4 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 800947e:	4f0d      	ldr	r7, [pc, #52]	; (80094b4 <SendMessageToModule+0x44>)
 8009480:	7838      	ldrb	r0, [r7, #0]
 8009482:	0021      	movs	r1, r4
 8009484:	f7fa fc5e 	bl	8003d44 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8009488:	7839      	ldrb	r1, [r7, #0]
 800948a:	9500      	str	r5, [sp, #0]
 800948c:	0033      	movs	r3, r6
 800948e:	0022      	movs	r2, r4
 8009490:	f7ff fdc4 	bl	800901c <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8009494:	002a      	movs	r2, r5
 8009496:	2100      	movs	r1, #0
 8009498:	4807      	ldr	r0, [pc, #28]	; (80094b8 <SendMessageToModule+0x48>)
 800949a:	f00a faaa 	bl	80139f2 <memset>
}
 800949e:	2000      	movs	r0, #0
 80094a0:	b003      	add	sp, #12
 80094a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 80094a4:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <SendMessageToModule+0x44>)
 80094a6:	7818      	ldrb	r0, [r3, #0]
 80094a8:	0013      	movs	r3, r2
 80094aa:	000a      	movs	r2, r1
 80094ac:	21ff      	movs	r1, #255	; 0xff
 80094ae:	f7ff ffb7 	bl	8009420 <BroadcastMessage>
 80094b2:	e7f4      	b.n	800949e <SendMessageToModule+0x2e>
 80094b4:	20001046 	.word	0x20001046
 80094b8:	20000f08 	.word	0x20000f08

080094bc <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 80094bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094be:	46de      	mov	lr, fp
 80094c0:	4657      	mov	r7, sl
 80094c2:	464e      	mov	r6, r9
 80094c4:	4645      	mov	r5, r8
 80094c6:	b5e0      	push	{r5, r6, r7, lr}
 80094c8:	b091      	sub	sp, #68	; 0x44
 80094ca:	900f      	str	r0, [sp, #60]	; 0x3c
 80094cc:	000f      	movs	r7, r1
 80094ce:	920e      	str	r2, [sp, #56]	; 0x38
 80094d0:	001e      	movs	r6, r3
 80094d2:	ab1a      	add	r3, sp, #104	; 0x68
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	4699      	mov	r9, r3
 80094d8:	ab1d      	add	r3, sp, #116	; 0x74
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 80094de:	4b5e      	ldr	r3, [pc, #376]	; (8009658 <StartScastDMAStream+0x19c>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	428b      	cmp	r3, r1
 80094e4:	d120      	bne.n	8009528 <StartScastDMAStream+0x6c>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80094e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094e8:	0e1b      	lsrs	r3, r3, #24
 80094ea:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 80094ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ee:	0c1b      	lsrs	r3, r3, #16
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 80094f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094f6:	0a1b      	lsrs	r3, r3, #8
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80094fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80094fe:	0e1b      	lsrs	r3, r3, #24
 8009500:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009502:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	b2db      	uxtb	r3, r3
 8009508:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800950a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	b2db      	uxtb	r3, r3
 8009510:	4698      	mov	r8, r3
 8009512:	4d52      	ldr	r5, [pc, #328]	; (800965c <StartScastDMAStream+0x1a0>)
 8009514:	231a      	movs	r3, #26
 8009516:	469a      	mov	sl, r3
 8009518:	44aa      	add	sl, r5
				temp2 = dstP;
 800951a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800951c:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800951e:	4c50      	ldr	r4, [pc, #320]	; (8009660 <StartScastDMAStream+0x1a4>)
 8009520:	464b      	mov	r3, r9
 8009522:	46c1      	mov	r9, r8
 8009524:	4698      	mov	r8, r3
 8009526:	e058      	b.n	80095da <StartScastDMAStream+0x11e>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009528:	4b4d      	ldr	r3, [pc, #308]	; (8009660 <StartScastDMAStream+0x1a4>)
 800952a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800952c:	0e12      	lsrs	r2, r2, #24
 800952e:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8009530:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009532:	0c12      	lsrs	r2, r2, #16
 8009534:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8009536:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009538:	0a12      	lsrs	r2, r2, #8
 800953a:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 800953c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800953e:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009542:	0e12      	lsrs	r2, r2, #24
 8009544:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8009546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009548:	0c12      	lsrs	r2, r2, #16
 800954a:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 800954c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800954e:	0a12      	lsrs	r2, r2, #8
 8009550:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8009552:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009554:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8009556:	464a      	mov	r2, r9
 8009558:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 800955a:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 800955c:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 800955e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009560:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8009562:	465a      	mov	r2, fp
 8009564:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8009566:	220d      	movs	r2, #13
 8009568:	211c      	movs	r1, #28
 800956a:	0038      	movs	r0, r7
 800956c:	f7ff ff80 	bl	8009470 <SendMessageToModule>
		return result;
 8009570:	e055      	b.n	800961e <StartScastDMAStream+0x162>
				temp1 = FindRoute(route[i], srcM);
 8009572:	0039      	movs	r1, r7
 8009574:	f7fa fbe6 	bl	8003d44 <FindRoute>
 8009578:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 800957a:	0031      	movs	r1, r6
 800957c:	0038      	movs	r0, r7
 800957e:	f7fa fbe1 	bl	8003d44 <FindRoute>
			if (route[i] == dstM) {
 8009582:	9a06      	ldr	r2, [sp, #24]
 8009584:	7850      	ldrb	r0, [r2, #1]
				temp2 = dstP;
 8009586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8009588:	42b0      	cmp	r0, r6
 800958a:	d135      	bne.n	80095f8 <StartScastDMAStream+0x13c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800958c:	9a08      	ldr	r2, [sp, #32]
 800958e:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8009590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009592:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8009594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009596:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8009598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800959a:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800959c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800959e:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80095a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a2:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80095a4:	464a      	mov	r2, r9
 80095a6:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 80095a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095aa:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 80095ac:	4642      	mov	r2, r8
 80095ae:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 80095b0:	9a07      	ldr	r2, [sp, #28]
 80095b2:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 80095b4:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 80095b6:	465b      	mov	r3, fp
 80095b8:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 80095ba:	0031      	movs	r1, r6
 80095bc:	0038      	movs	r0, r7
 80095be:	f7fa fbc1 	bl	8003d44 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 80095c2:	9b06      	ldr	r3, [sp, #24]
 80095c4:	7858      	ldrb	r0, [r3, #1]
 80095c6:	220c      	movs	r2, #12
 80095c8:	211b      	movs	r1, #27
 80095ca:	f7ff ff51 	bl	8009470 <SendMessageToModule>
			osDelay(10);
 80095ce:	200a      	movs	r0, #10
 80095d0:	f004 fa49 	bl	800da66 <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 80095d4:	3501      	adds	r5, #1
 80095d6:	4555      	cmp	r5, sl
 80095d8:	d013      	beq.n	8009602 <StartScastDMAStream+0x146>
		FindRoute(srcM, dstM);
 80095da:	0031      	movs	r1, r6
 80095dc:	0038      	movs	r0, r7
 80095de:	f7fa fbb1 	bl	8003d44 <FindRoute>
		if (route[i]) 
 80095e2:	9506      	str	r5, [sp, #24]
 80095e4:	7868      	ldrb	r0, [r5, #1]
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d0f4      	beq.n	80095d4 <StartScastDMAStream+0x118>
			if (route[i+1]) {
 80095ea:	78a9      	ldrb	r1, [r5, #2]
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d0c0      	beq.n	8009572 <StartScastDMAStream+0xb6>
				temp1 = FindRoute(route[i], route[i+1]);
 80095f0:	f7fa fba8 	bl	8003d44 <FindRoute>
 80095f4:	9007      	str	r0, [sp, #28]
 80095f6:	e7c0      	b.n	800957a <StartScastDMAStream+0xbe>
				temp2 = FindRoute(route[i], route[i-1]);
 80095f8:	7811      	ldrb	r1, [r2, #0]
 80095fa:	f7fa fba3 	bl	8003d44 <FindRoute>
 80095fe:	0003      	movs	r3, r0
 8009600:	e7c4      	b.n	800958c <StartScastDMAStream+0xd0>
 8009602:	46c1      	mov	r9, r8
		}
	}
	
	if (srcM == dstM)
 8009604:	42b7      	cmp	r7, r6
 8009606:	d112      	bne.n	800962e <StartScastDMAStream+0x172>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8009608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800960e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009610:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009612:	4648      	mov	r0, r9
 8009614:	f7ff fbee 	bl	8008df4 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 8009618:	465b      	mov	r3, fp
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10d      	bne.n	800963a <StartScastDMAStream+0x17e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 800961e:	2000      	movs	r0, #0
 8009620:	b011      	add	sp, #68	; 0x44
 8009622:	bcf0      	pop	{r4, r5, r6, r7}
 8009624:	46bb      	mov	fp, r7
 8009626:	46b2      	mov	sl, r6
 8009628:	46a9      	mov	r9, r5
 800962a:	46a0      	mov	r8, r4
 800962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 800962e:	0031      	movs	r1, r6
 8009630:	0038      	movs	r0, r7
 8009632:	f7fa fb87 	bl	8003d44 <FindRoute>
 8009636:	900e      	str	r0, [sp, #56]	; 0x38
 8009638:	e7e6      	b.n	8009608 <StartScastDMAStream+0x14c>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 800963a:	2300      	movs	r3, #0
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800964c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800964e:	4648      	mov	r0, r9
 8009650:	f7fa f840 	bl	80036d4 <SaveEEstreams>
 8009654:	e7e3      	b.n	800961e <StartScastDMAStream+0x162>
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	20001046 	.word	0x20001046
 800965c:	20006987 	.word	0x20006987
 8009660:	20000f08 	.word	0x20000f08

08009664 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 8009664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009666:	46de      	mov	lr, fp
 8009668:	4657      	mov	r7, sl
 800966a:	464e      	mov	r6, r9
 800966c:	4645      	mov	r5, r8
 800966e:	b5e0      	push	{r5, r6, r7, lr}
 8009670:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 8009676:	4bbc      	ldr	r3, [pc, #752]	; (8009968 <BackEndTask+0x304>)
 8009678:	469b      	mov	fp, r3
 800967a:	e16d      	b.n	8009958 <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800967c:	9504      	str	r5, [sp, #16]
 800967e:	9603      	str	r6, [sp, #12]
 8009680:	7833      	ldrb	r3, [r6, #0]
 8009682:	2b3f      	cmp	r3, #63	; 0x3f
 8009684:	dd00      	ble.n	8009688 <BackEndTask+0x24>
 8009686:	e190      	b.n	80099aa <BackEndTask+0x346>
 8009688:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 800968a:	1c78      	adds	r0, r7, #1
 800968c:	e183      	b.n	8009996 <BackEndTask+0x332>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800968e:	2a3f      	cmp	r2, #63	; 0x3f
 8009690:	d004      	beq.n	800969c <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009692:	3201      	adds	r2, #1
 8009694:	2a40      	cmp	r2, #64	; 0x40
 8009696:	d000      	beq.n	800969a <BackEndTask+0x36>
 8009698:	e17d      	b.n	8009996 <BackEndTask+0x332>
 800969a:	e186      	b.n	80099aa <BackEndTask+0x346>
 800969c:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800969e:	5cba      	ldrb	r2, [r7, r2]
 80096a0:	2a48      	cmp	r2, #72	; 0x48
 80096a2:	d026      	beq.n	80096f2 <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 80096a4:	4ab1      	ldr	r2, [pc, #708]	; (800996c <BackEndTask+0x308>)
 80096a6:	7ed2      	ldrb	r2, [r2, #27]
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	d02c      	beq.n	8009706 <BackEndTask+0xa2>
		for (port=1 ; port <= NumOfPorts; port++)
 80096ac:	3501      	adds	r5, #1
 80096ae:	3401      	adds	r4, #1
 80096b0:	3740      	adds	r7, #64	; 0x40
 80096b2:	3601      	adds	r6, #1
 80096b4:	2d05      	cmp	r5, #5
 80096b6:	d100      	bne.n	80096ba <BackEndTask+0x56>
 80096b8:	e14c      	b.n	8009954 <BackEndTask+0x2f0>
 80096ba:	1c6b      	adds	r3, r5, #1
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	469a      	mov	sl, r3
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 80096c0:	9400      	str	r4, [sp, #0]
 80096c2:	7863      	ldrb	r3, [r4, #1]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d9d9      	bls.n	800967c <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 80096c8:	465b      	mov	r3, fp
 80096ca:	5d5b      	ldrb	r3, [r3, r5]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0ed      	beq.n	80096ac <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 80096d0:	4ba5      	ldr	r3, [pc, #660]	; (8009968 <BackEndTask+0x304>)
 80096d2:	18eb      	adds	r3, r5, r3
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b05      	cmp	r3, #5
 80096de:	d100      	bne.n	80096e2 <BackEndTask+0x7e>
 80096e0:	e134      	b.n	800994c <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 80096e2:	4650      	mov	r0, sl
 80096e4:	f004 f872 	bl	800d7cc <GetUart>
 80096e8:	2240      	movs	r2, #64	; 0x40
 80096ea:	0039      	movs	r1, r7
 80096ec:	f009 fa68 	bl	8012bc0 <HAL_UART_Receive_DMA>
 80096f0:	e7dc      	b.n	80096ac <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80096f2:	783a      	ldrb	r2, [r7, #0]
 80096f4:	2a5a      	cmp	r2, #90	; 0x5a
 80096f6:	d1d5      	bne.n	80096a4 <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 80096f8:	787b      	ldrb	r3, [r7, #1]
 80096fa:	9302      	str	r3, [sp, #8]
					parseStart = 2;
 80096fc:	233f      	movs	r3, #63	; 0x3f
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	3b3d      	subs	r3, #61	; 0x3d
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	e034      	b.n	8009770 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009706:	1c7a      	adds	r2, r7, #1
 8009708:	4694      	mov	ip, r2
 800970a:	e021      	b.n	8009750 <BackEndTask+0xec>
 800970c:	2b3f      	cmp	r3, #63	; 0x3f
 800970e:	d11c      	bne.n	800974a <BackEndTask+0xe6>
 8009710:	780a      	ldrb	r2, [r1, #0]
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1ca      	bne.n	80096ac <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 8009716:	9a04      	ldr	r2, [sp, #16]
 8009718:	0191      	lsls	r1, r2, #6
 800971a:	4a95      	ldr	r2, [pc, #596]	; (8009970 <BackEndTask+0x30c>)
 800971c:	1852      	adds	r2, r2, r1
 800971e:	2100      	movs	r1, #0
 8009720:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8009722:	3301      	adds	r3, #1
 8009724:	9a03      	ldr	r2, [sp, #12]
 8009726:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8009728:	4b92      	ldr	r3, [pc, #584]	; (8009974 <BackEndTask+0x310>)
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	4892      	ldr	r0, [pc, #584]	; (8009978 <BackEndTask+0x314>)
 800972e:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8009730:	2203      	movs	r2, #3
 8009732:	9900      	ldr	r1, [sp, #0]
 8009734:	704a      	strb	r2, [r1, #1]
										PcPort = port;
 8009736:	4652      	mov	r2, sl
 8009738:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 800973a:	4b90      	ldr	r3, [pc, #576]	; (800997c <BackEndTask+0x318>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	2300      	movs	r3, #0
 8009740:	2202      	movs	r2, #2
 8009742:	2100      	movs	r1, #0
 8009744:	f005 fdf8 	bl	800f338 <xTaskGenericNotify>
										break;
 8009748:	e7b0      	b.n	80096ac <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800974a:	3301      	adds	r3, #1
 800974c:	2b40      	cmp	r3, #64	; 0x40
 800974e:	d0ad      	beq.n	80096ac <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009750:	5cca      	ldrb	r2, [r1, r3]
 8009752:	2a0d      	cmp	r2, #13
 8009754:	d1f9      	bne.n	800974a <BackEndTask+0xe6>
 8009756:	2b3e      	cmp	r3, #62	; 0x3e
 8009758:	dcd8      	bgt.n	800970c <BackEndTask+0xa8>
 800975a:	4662      	mov	r2, ip
 800975c:	5cd2      	ldrb	r2, [r2, r3]
 800975e:	2a00      	cmp	r2, #0
 8009760:	d0d9      	beq.n	8009716 <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8009762:	3301      	adds	r3, #1
 8009764:	e7f4      	b.n	8009750 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 8009766:	233f      	movs	r3, #63	; 0x3f
 8009768:	5cfb      	ldrb	r3, [r7, r3]
 800976a:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 800976c:	2300      	movs	r3, #0
 800976e:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	3303      	adds	r3, #3
 8009774:	4698      	mov	r8, r3
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	4443      	add	r3, r8
 800977a:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	425b      	negs	r3, r3
 8009780:	469c      	mov	ip, r3
 8009782:	44e1      	add	r9, ip
 8009784:	e131      	b.n	80099ea <BackEndTask+0x386>
					packetLength = UARTRxBuf[port-1][0];
 8009786:	783b      	ldrb	r3, [r7, #0]
 8009788:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 800978a:	2301      	movs	r3, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	e7ef      	b.n	8009770 <BackEndTask+0x10c>
					Delay_ms(1);
 8009790:	2001      	movs	r0, #1
 8009792:	f006 f9e7 	bl	800fb64 <HAL_Delay>
					if (packetStart < packetEnd) {
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	4599      	cmp	r9, r3
 800979a:	dd50      	ble.n	800983e <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800979c:	01a9      	lsls	r1, r5, #6
 800979e:	469c      	mov	ip, r3
 80097a0:	4461      	add	r1, ip
 80097a2:	4b73      	ldr	r3, [pc, #460]	; (8009970 <BackEndTask+0x30c>)
 80097a4:	469c      	mov	ip, r3
 80097a6:	4461      	add	r1, ip
 80097a8:	4642      	mov	r2, r8
 80097aa:	4875      	ldr	r0, [pc, #468]	; (8009980 <BackEndTask+0x31c>)
 80097ac:	f00a f918 	bl	80139e0 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	1cd9      	adds	r1, r3, #3
 80097b4:	4872      	ldr	r0, [pc, #456]	; (8009980 <BackEndTask+0x31c>)
 80097b6:	f003 fa5b 	bl	800cc70 <CalculateCRC8>
 80097ba:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 80097bc:	2238      	movs	r2, #56	; 0x38
 80097be:	2100      	movs	r1, #0
 80097c0:	486f      	ldr	r0, [pc, #444]	; (8009980 <BackEndTask+0x31c>)
 80097c2:	f00a f916 	bl	80139f2 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 80097c6:	9b04      	ldr	r3, [sp, #16]
 80097c8:	019b      	lsls	r3, r3, #6
 80097ca:	4a69      	ldr	r2, [pc, #420]	; (8009970 <BackEndTask+0x30c>)
 80097cc:	4694      	mov	ip, r2
 80097ce:	4463      	add	r3, ip
 80097d0:	464a      	mov	r2, r9
 80097d2:	5c9b      	ldrb	r3, [r3, r2]
 80097d4:	4543      	cmp	r3, r8
 80097d6:	d000      	beq.n	80097da <BackEndTask+0x176>
 80097d8:	e10f      	b.n	80099fa <BackEndTask+0x396>
						portStatus[port] = MSG;
 80097da:	2301      	movs	r3, #1
 80097dc:	9a00      	ldr	r2, [sp, #0]
 80097de:	7053      	strb	r3, [r2, #1]
						messageLength[port-1] = packetLength;	
 80097e0:	4b68      	ldr	r3, [pc, #416]	; (8009984 <BackEndTask+0x320>)
 80097e2:	9a02      	ldr	r2, [sp, #8]
 80097e4:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 80097e6:	233f      	movs	r3, #63	; 0x3f
 80097e8:	9905      	ldr	r1, [sp, #20]
 80097ea:	1a5b      	subs	r3, r3, r1
 80097ec:	4293      	cmp	r3, r2
 80097ee:	db6b      	blt.n	80098c8 <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 80097f0:	00e8      	lsls	r0, r5, #3
 80097f2:	1b40      	subs	r0, r0, r5
 80097f4:	00c0      	lsls	r0, r0, #3
 80097f6:	4b64      	ldr	r3, [pc, #400]	; (8009988 <BackEndTask+0x324>)
 80097f8:	18c0      	adds	r0, r0, r3
 80097fa:	01a9      	lsls	r1, r5, #6
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	469c      	mov	ip, r3
 8009800:	4461      	add	r1, ip
 8009802:	4b5b      	ldr	r3, [pc, #364]	; (8009970 <BackEndTask+0x30c>)
 8009804:	18c9      	adds	r1, r1, r3
 8009806:	f00a f8eb 	bl	80139e0 <memcpy>
						if (packetStart < packetEnd) {
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	4599      	cmp	r9, r3
 800980e:	dc00      	bgt.n	8009812 <BackEndTask+0x1ae>
 8009810:	e081      	b.n	8009916 <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009812:	9a02      	ldr	r2, [sp, #8]
 8009814:	3204      	adds	r2, #4
 8009816:	01a8      	lsls	r0, r5, #6
 8009818:	469c      	mov	ip, r3
 800981a:	4460      	add	r0, ip
 800981c:	4b54      	ldr	r3, [pc, #336]	; (8009970 <BackEndTask+0x30c>)
 800981e:	18c0      	adds	r0, r0, r3
 8009820:	2100      	movs	r1, #0
 8009822:	f00a f8e6 	bl	80139f2 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009826:	464b      	mov	r3, r9
 8009828:	3301      	adds	r3, #1
 800982a:	9a03      	ldr	r2, [sp, #12]
 800982c:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800982e:	4a57      	ldr	r2, [pc, #348]	; (800998c <BackEndTask+0x328>)
 8009830:	8813      	ldrh	r3, [r2, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8009836:	4650      	mov	r0, sl
 8009838:	f7ff fbb4 	bl	8008fa4 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 800983c:	e736      	b.n	80096ac <BackEndTask+0x48>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800983e:	01a9      	lsls	r1, r5, #6
 8009840:	2240      	movs	r2, #64	; 0x40
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	1ad0      	subs	r0, r2, r3
 8009846:	9107      	str	r1, [sp, #28]
 8009848:	469c      	mov	ip, r3
 800984a:	4461      	add	r1, ip
 800984c:	4b48      	ldr	r3, [pc, #288]	; (8009970 <BackEndTask+0x30c>)
 800984e:	469c      	mov	ip, r3
 8009850:	4461      	add	r1, ip
 8009852:	9006      	str	r0, [sp, #24]
 8009854:	0002      	movs	r2, r0
 8009856:	484a      	ldr	r0, [pc, #296]	; (8009980 <BackEndTask+0x31c>)
 8009858:	f00a f8c2 	bl	80139e0 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 800985c:	4848      	ldr	r0, [pc, #288]	; (8009980 <BackEndTask+0x31c>)
 800985e:	9906      	ldr	r1, [sp, #24]
 8009860:	468c      	mov	ip, r1
 8009862:	4460      	add	r0, ip
 8009864:	4643      	mov	r3, r8
 8009866:	1a5a      	subs	r2, r3, r1
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	0019      	movs	r1, r3
 800986c:	4b40      	ldr	r3, [pc, #256]	; (8009970 <BackEndTask+0x30c>)
 800986e:	469c      	mov	ip, r3
 8009870:	4461      	add	r1, ip
 8009872:	f00a f8b5 	bl	80139e0 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	1cd9      	adds	r1, r3, #3
 800987a:	4841      	ldr	r0, [pc, #260]	; (8009980 <BackEndTask+0x31c>)
 800987c:	f003 f9f8 	bl	800cc70 <CalculateCRC8>
 8009880:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009882:	2238      	movs	r2, #56	; 0x38
 8009884:	2100      	movs	r1, #0
 8009886:	483e      	ldr	r0, [pc, #248]	; (8009980 <BackEndTask+0x31c>)
 8009888:	f00a f8b3 	bl	80139f2 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	019b      	lsls	r3, r3, #6
 8009890:	4a37      	ldr	r2, [pc, #220]	; (8009970 <BackEndTask+0x30c>)
 8009892:	4694      	mov	ip, r2
 8009894:	4463      	add	r3, ip
 8009896:	464a      	mov	r2, r9
 8009898:	5c9b      	ldrb	r3, [r3, r2]
 800989a:	4543      	cmp	r3, r8
 800989c:	d09d      	beq.n	80097da <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	9b01      	ldr	r3, [sp, #4]
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	4690      	mov	r8, r2
 80098a6:	01a8      	lsls	r0, r5, #6
 80098a8:	469c      	mov	ip, r3
 80098aa:	4460      	add	r0, ip
 80098ac:	4b30      	ldr	r3, [pc, #192]	; (8009970 <BackEndTask+0x30c>)
 80098ae:	18c0      	adds	r0, r0, r3
 80098b0:	2100      	movs	r1, #0
 80098b2:	f00a f89e 	bl	80139f2 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 80098b6:	9a02      	ldr	r2, [sp, #8]
 80098b8:	3204      	adds	r2, #4
 80098ba:	4643      	mov	r3, r8
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	2100      	movs	r1, #0
 80098c0:	0038      	movs	r0, r7
 80098c2:	f00a f896 	bl	80139f2 <memset>
 80098c6:	e0a3      	b.n	8009a10 <BackEndTask+0x3ac>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 80098c8:	00eb      	lsls	r3, r5, #3
 80098ca:	1b5b      	subs	r3, r3, r5
 80098cc:	00d9      	lsls	r1, r3, #3
 80098ce:	01ab      	lsls	r3, r5, #6
 80098d0:	2240      	movs	r2, #64	; 0x40
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	1a12      	subs	r2, r2, r0
 80098d6:	4690      	mov	r8, r2
 80098d8:	4a2b      	ldr	r2, [pc, #172]	; (8009988 <BackEndTask+0x324>)
 80098da:	0010      	movs	r0, r2
 80098dc:	9104      	str	r1, [sp, #16]
 80098de:	468c      	mov	ip, r1
 80098e0:	4460      	add	r0, ip
 80098e2:	9a05      	ldr	r2, [sp, #20]
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	469c      	mov	ip, r3
 80098e8:	4462      	add	r2, ip
 80098ea:	4b21      	ldr	r3, [pc, #132]	; (8009970 <BackEndTask+0x30c>)
 80098ec:	18d1      	adds	r1, r2, r3
 80098ee:	4642      	mov	r2, r8
 80098f0:	f00a f876 	bl	80139e0 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 80098f4:	9904      	ldr	r1, [sp, #16]
 80098f6:	0008      	movs	r0, r1
 80098f8:	4440      	add	r0, r8
 80098fa:	4a23      	ldr	r2, [pc, #140]	; (8009988 <BackEndTask+0x324>)
 80098fc:	4694      	mov	ip, r2
 80098fe:	4460      	add	r0, ip
 8009900:	9a02      	ldr	r2, [sp, #8]
 8009902:	4641      	mov	r1, r8
 8009904:	1a52      	subs	r2, r2, r1
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	0019      	movs	r1, r3
 800990a:	4b19      	ldr	r3, [pc, #100]	; (8009970 <BackEndTask+0x30c>)
 800990c:	4698      	mov	r8, r3
 800990e:	4441      	add	r1, r8
 8009910:	f00a f866 	bl	80139e0 <memcpy>
 8009914:	e779      	b.n	800980a <BackEndTask+0x1a6>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009916:	01ab      	lsls	r3, r5, #6
 8009918:	2240      	movs	r2, #64	; 0x40
 800991a:	9901      	ldr	r1, [sp, #4]
 800991c:	1a52      	subs	r2, r2, r1
 800991e:	4690      	mov	r8, r2
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	0018      	movs	r0, r3
 8009924:	468c      	mov	ip, r1
 8009926:	4460      	add	r0, ip
 8009928:	4b11      	ldr	r3, [pc, #68]	; (8009970 <BackEndTask+0x30c>)
 800992a:	18c0      	adds	r0, r0, r3
 800992c:	2100      	movs	r1, #0
 800992e:	f00a f860 	bl	80139f2 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009932:	9a02      	ldr	r2, [sp, #8]
 8009934:	3204      	adds	r2, #4
 8009936:	4641      	mov	r1, r8
 8009938:	1a52      	subs	r2, r2, r1
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	490c      	ldr	r1, [pc, #48]	; (8009970 <BackEndTask+0x30c>)
 800993e:	468c      	mov	ip, r1
 8009940:	4463      	add	r3, ip
 8009942:	0018      	movs	r0, r3
 8009944:	2100      	movs	r1, #0
 8009946:	f00a f854 	bl	80139f2 <memset>
 800994a:	e76c      	b.n	8009826 <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 800994c:	2300      	movs	r3, #0
 800994e:	9a00      	ldr	r2, [sp, #0]
 8009950:	7053      	strb	r3, [r2, #1]
 8009952:	e6c6      	b.n	80096e2 <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 8009954:	f005 ff8c 	bl	800f870 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8009958:	4b07      	ldr	r3, [pc, #28]	; (8009978 <BackEndTask+0x314>)
 800995a:	4698      	mov	r8, r3
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <BackEndTask+0x32c>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800995e:	4f04      	ldr	r7, [pc, #16]	; (8009970 <BackEndTask+0x30c>)
 8009960:	2500      	movs	r5, #0
 8009962:	4644      	mov	r4, r8
 8009964:	001e      	movs	r6, r3
 8009966:	e6a8      	b.n	80096ba <BackEndTask+0x56>
 8009968:	20001290 	.word	0x20001290
 800996c:	200068d0 	.word	0x200068d0
 8009970:	20001298 	.word	0x20001298
 8009974:	20000a7f 	.word	0x20000a7f
 8009978:	200010c0 	.word	0x200010c0
 800997c:	2000147c 	.word	0x2000147c
 8009980:	200013e0 	.word	0x200013e0
 8009984:	20000f00 	.word	0x20000f00
 8009988:	20000d10 	.word	0x20000d10
 800998c:	200014f4 	.word	0x200014f4
 8009990:	200013d8 	.word	0x200013d8
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009994:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009996:	2a3e      	cmp	r2, #62	; 0x3e
 8009998:	dd00      	ble.n	800999c <BackEndTask+0x338>
 800999a:	e678      	b.n	800968e <BackEndTask+0x2a>
 800999c:	5cb9      	ldrb	r1, [r7, r2]
 800999e:	2948      	cmp	r1, #72	; 0x48
 80099a0:	d1f8      	bne.n	8009994 <BackEndTask+0x330>
 80099a2:	5c81      	ldrb	r1, [r0, r2]
 80099a4:	295a      	cmp	r1, #90	; 0x5a
 80099a6:	d1f5      	bne.n	8009994 <BackEndTask+0x330>
 80099a8:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	2b3d      	cmp	r3, #61	; 0x3d
 80099ae:	d100      	bne.n	80099b2 <BackEndTask+0x34e>
 80099b0:	e6d9      	b.n	8009766 <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	2b3e      	cmp	r3, #62	; 0x3e
 80099b6:	d100      	bne.n	80099ba <BackEndTask+0x356>
 80099b8:	e6e5      	b.n	8009786 <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	2b3f      	cmp	r3, #63	; 0x3f
 80099be:	d100      	bne.n	80099c2 <BackEndTask+0x35e>
 80099c0:	e69a      	b.n	80096f8 <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 80099c2:	9b04      	ldr	r3, [sp, #16]
 80099c4:	019b      	lsls	r3, r3, #6
 80099c6:	4a17      	ldr	r2, [pc, #92]	; (8009a24 <BackEndTask+0x3c0>)
 80099c8:	4694      	mov	ip, r2
 80099ca:	4463      	add	r3, ip
 80099cc:	9a01      	ldr	r2, [sp, #4]
 80099ce:	4694      	mov	ip, r2
 80099d0:	4463      	add	r3, ip
 80099d2:	7899      	ldrb	r1, [r3, #2]
 80099d4:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 80099d6:	0013      	movs	r3, r2
 80099d8:	3203      	adds	r2, #3
 80099da:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 80099dc:	1cca      	adds	r2, r1, #3
 80099de:	4690      	mov	r8, r2
 80099e0:	4443      	add	r3, r8
 80099e2:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 80099e4:	2b3f      	cmp	r3, #63	; 0x3f
 80099e6:	dd00      	ble.n	80099ea <BackEndTask+0x386>
 80099e8:	e6c8      	b.n	800977c <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 80099ea:	9b01      	ldr	r3, [sp, #4]
 80099ec:	4599      	cmp	r9, r3
 80099ee:	d000      	beq.n	80099f2 <BackEndTask+0x38e>
 80099f0:	e6ce      	b.n	8009790 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	4599      	cmp	r9, r3
 80099f6:	dc00      	bgt.n	80099fa <BackEndTask+0x396>
 80099f8:	e751      	b.n	800989e <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80099fa:	9a02      	ldr	r2, [sp, #8]
 80099fc:	3204      	adds	r2, #4
 80099fe:	01a8      	lsls	r0, r5, #6
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	469c      	mov	ip, r3
 8009a04:	4460      	add	r0, ip
 8009a06:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <BackEndTask+0x3c0>)
 8009a08:	18c0      	adds	r0, r0, r3
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f009 fff1 	bl	80139f2 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009a10:	464b      	mov	r3, r9
 8009a12:	3301      	adds	r3, #1
 8009a14:	9a03      	ldr	r2, [sp, #12]
 8009a16:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009a18:	4a03      	ldr	r2, [pc, #12]	; (8009a28 <BackEndTask+0x3c4>)
 8009a1a:	8813      	ldrh	r3, [r2, #0]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	8013      	strh	r3, [r2, #0]
 8009a20:	e652      	b.n	80096c8 <BackEndTask+0x64>
 8009a22:	46c0      	nop			; (mov r8, r8)
 8009a24:	20001298 	.word	0x20001298
 8009a28:	2000169c 	.word	0x2000169c

08009a2c <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	4770      	bx	lr

08009a30 <PxMessagingTask>:
{
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	46de      	mov	lr, fp
 8009a34:	4657      	mov	r7, sl
 8009a36:	464e      	mov	r6, r9
 8009a38:	4645      	mov	r5, r8
 8009a3a:	b5e0      	push	{r5, r6, r7, lr}
 8009a3c:	b097      	sub	sp, #92	; 0x5c
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	930b      	str	r3, [sp, #44]	; 0x2c
	port = (int8_t)(unsigned) argument;
 8009a44:	b2c3      	uxtb	r3, r0
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	27ff      	movs	r7, #255	; 0xff
 8009a4a:	4007      	ands	r7, r0
		if (messageLength[port-1])
 8009a4c:	1e7c      	subs	r4, r7, #1
 8009a4e:	00e3      	lsls	r3, r4, #3
 8009a50:	1b1b      	subs	r3, r3, r4
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009a56:	4ada      	ldr	r2, [pc, #872]	; (8009dc0 <PxMessagingTask+0x390>)
 8009a58:	18d2      	adds	r2, r2, r3
 8009a5a:	9205      	str	r2, [sp, #20]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	930c      	str	r3, [sp, #48]	; 0x30
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	930d      	str	r3, [sp, #52]	; 0x34
 8009a64:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 8009a66:	00e3      	lsls	r3, r4, #3
 8009a68:	1b1b      	subs	r3, r3, r4
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	469a      	mov	sl, r3
 8009a6e:	0013      	movs	r3, r2
 8009a70:	9208      	str	r2, [sp, #32]
 8009a72:	3302      	adds	r3, #2
 8009a74:	469b      	mov	fp, r3
 8009a76:	4656      	mov	r6, sl
 8009a78:	46aa      	mov	sl, r5
 8009a7a:	e024      	b.n	8009ac6 <PxMessagingTask+0x96>
				code = cMessage[port-1][3+shift];
 8009a7c:	4ad0      	ldr	r2, [pc, #832]	; (8009dc0 <PxMessagingTask+0x390>)
 8009a7e:	1992      	adds	r2, r2, r6
 8009a80:	18d3      	adds	r3, r2, r3
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	4699      	mov	r9, r3
 8009a86:	e049      	b.n	8009b1c <PxMessagingTask+0xec>
					indMode = IND_SHORT_BLINK;
 8009a88:	4bce      	ldr	r3, [pc, #824]	; (8009dc4 <PxMessagingTask+0x394>)
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	701a      	strb	r2, [r3, #0]
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8009a8e:	464b      	mov	r3, r9
 8009a90:	2b19      	cmp	r3, #25
 8009a92:	d058      	beq.n	8009b46 <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009a94:	2b1a      	cmp	r3, #26
 8009a96:	d060      	beq.n	8009b5a <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 8009a98:	4653      	mov	r3, sl
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <PxMessagingTask+0x72>
 8009a9e:	f001 faae 	bl	800affe <PxMessagingTask+0x15ce>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009aa2:	4dc9      	ldr	r5, [pc, #804]	; (8009dc8 <PxMessagingTask+0x398>)
 8009aa4:	5d2a      	ldrb	r2, [r5, r4]
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	9805      	ldr	r0, [sp, #20]
 8009aaa:	f009 ffa2 	bl	80139f2 <memset>
		messageLength[port-1] = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8009ab2:	4bc6      	ldr	r3, [pc, #792]	; (8009dcc <PxMessagingTask+0x39c>)
 8009ab4:	5ddb      	ldrb	r3, [r3, r7]
 8009ab6:	3b02      	subs	r3, #2
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d902      	bls.n	8009ac2 <PxMessagingTask+0x92>
			portStatus[port] = FREE;
 8009abc:	4bc3      	ldr	r3, [pc, #780]	; (8009dcc <PxMessagingTask+0x39c>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8009ac2:	f005 fed5 	bl	800f870 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4249      	negs	r1, r1
 8009aca:	2001      	movs	r0, #1
 8009acc:	f005 fbe8 	bl	800f2a0 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8009ad0:	4bbd      	ldr	r3, [pc, #756]	; (8009dc8 <PxMessagingTask+0x398>)
 8009ad2:	5d19      	ldrb	r1, [r3, r4]
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d0df      	beq.n	8009a98 <PxMessagingTask+0x68>
			if (cMessage[port-1][2]>>7) {
 8009ad8:	465b      	mov	r3, fp
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	09d3      	lsrs	r3, r2, #7
 8009ade:	48bc      	ldr	r0, [pc, #752]	; (8009dd0 <PxMessagingTask+0x3a0>)
 8009ae0:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 8009ae2:	4bb7      	ldr	r3, [pc, #732]	; (8009dc0 <PxMessagingTask+0x390>)
 8009ae4:	5cf3      	ldrb	r3, [r6, r3]
 8009ae6:	4698      	mov	r8, r3
			src = cMessage[port-1][1];	
 8009ae8:	9b08      	ldr	r3, [sp, #32]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	9307      	str	r3, [sp, #28]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8009aee:	2301      	movs	r3, #1
 8009af0:	4013      	ands	r3, r2
			shift = 0;
 8009af2:	9306      	str	r3, [sp, #24]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009af4:	4db7      	ldr	r5, [pc, #732]	; (8009dd4 <PxMessagingTask+0x3a4>)
 8009af6:	0710      	lsls	r0, r2, #28
 8009af8:	0f80      	lsrs	r0, r0, #30
 8009afa:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8009afc:	2060      	movs	r0, #96	; 0x60
 8009afe:	4010      	ands	r0, r2
 8009b00:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 8009b02:	0792      	lsls	r2, r2, #30
 8009b04:	d5ba      	bpl.n	8009a7c <PxMessagingTask+0x4c>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009b06:	4aae      	ldr	r2, [pc, #696]	; (8009dc0 <PxMessagingTask+0x390>)
 8009b08:	1992      	adds	r2, r2, r6
 8009b0a:	18d2      	adds	r2, r2, r3
 8009b0c:	7910      	ldrb	r0, [r2, #4]
 8009b0e:	0200      	lsls	r0, r0, #8
 8009b10:	78d2      	ldrb	r2, [r2, #3]
 8009b12:	1812      	adds	r2, r2, r0
 8009b14:	b292      	uxth	r2, r2
 8009b16:	4691      	mov	r9, r2
				++shift;
 8009b18:	3301      	adds	r3, #1
 8009b1a:	9306      	str	r3, [sp, #24]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009b1c:	4643      	mov	r3, r8
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2bfc      	cmp	r3, #252	; 0xfc
 8009b24:	d826      	bhi.n	8009b74 <PxMessagingTask+0x144>
 8009b26:	4bac      	ldr	r3, [pc, #688]	; (8009dd8 <PxMessagingTask+0x3a8>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4543      	cmp	r3, r8
 8009b2c:	d06d      	beq.n	8009c0a <PxMessagingTask+0x1da>
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <PxMessagingTask+0x106>
 8009b32:	f001 fa92 	bl	800b05a <PxMessagingTask+0x162a>
				ForwardReceivedMessage(port);
 8009b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b38:	f7ff fc32 	bl	80093a0 <ForwardReceivedMessage>
				if (BOS.trace)
 8009b3c:	4ba5      	ldr	r3, [pc, #660]	; (8009dd4 <PxMessagingTask+0x3a4>)
 8009b3e:	79db      	ldrb	r3, [r3, #7]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0a4      	beq.n	8009a8e <PxMessagingTask+0x5e>
 8009b44:	e7a0      	b.n	8009a88 <PxMessagingTask+0x58>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8009b46:	2064      	movs	r0, #100	; 0x64
 8009b48:	f006 f80c 	bl	800fb64 <HAL_Delay>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b50:	4641      	mov	r1, r8
 8009b52:	9807      	ldr	r0, [sp, #28]
 8009b54:	f7fa f9c4 	bl	8003ee0 <remoteBootloaderUpdate>
 8009b58:	e79e      	b.n	8009a98 <PxMessagingTask+0x68>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009b5a:	2064      	movs	r0, #100	; 0x64
 8009b5c:	f006 f802 	bl	800fb64 <HAL_Delay>
 8009b60:	4b97      	ldr	r3, [pc, #604]	; (8009dc0 <PxMessagingTask+0x390>)
 8009b62:	199b      	adds	r3, r3, r6
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	5c9b      	ldrb	r3, [r3, r2]
 8009b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	9807      	ldr	r0, [sp, #28]
 8009b6e:	f7fa f9b7 	bl	8003ee0 <remoteBootloaderUpdate>
 8009b72:	e791      	b.n	8009a98 <PxMessagingTask+0x68>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009b74:	4643      	mov	r3, r8
 8009b76:	2bff      	cmp	r3, #255	; 0xff
 8009b78:	d03c      	beq.n	8009bf4 <PxMessagingTask+0x1c4>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009b7a:	2bfe      	cmp	r3, #254	; 0xfe
 8009b7c:	d145      	bne.n	8009c0a <PxMessagingTask+0x1da>
 8009b7e:	4b90      	ldr	r3, [pc, #576]	; (8009dc0 <PxMessagingTask+0x390>)
 8009b80:	199b      	adds	r3, r3, r6
 8009b82:	1859      	adds	r1, r3, r1
 8009b84:	3901      	subs	r1, #1
 8009b86:	780b      	ldrb	r3, [r1, #0]
 8009b88:	4a94      	ldr	r2, [pc, #592]	; (8009ddc <PxMessagingTask+0x3ac>)
 8009b8a:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8009b8c:	2103      	movs	r1, #3
 8009b8e:	468a      	mov	sl, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d086      	beq.n	8009aa2 <PxMessagingTask+0x72>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009b94:	4a91      	ldr	r2, [pc, #580]	; (8009ddc <PxMessagingTask+0x3ac>)
 8009b96:	7013      	strb	r3, [r2, #0]
 8009b98:	4a91      	ldr	r2, [pc, #580]	; (8009de0 <PxMessagingTask+0x3b0>)
 8009b9a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8009b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b9e:	20fe      	movs	r0, #254	; 0xfe
 8009ba0:	f7ff fc1e 	bl	80093e0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009ba4:	4b88      	ldr	r3, [pc, #544]	; (8009dc8 <PxMessagingTask+0x398>)
 8009ba6:	5d19      	ldrb	r1, [r3, r4]
 8009ba8:	4b85      	ldr	r3, [pc, #532]	; (8009dc0 <PxMessagingTask+0x390>)
 8009baa:	199b      	adds	r3, r3, r6
 8009bac:	185b      	adds	r3, r3, r1
 8009bae:	1e5a      	subs	r2, r3, #1
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009bb4:	3b02      	subs	r3, #2
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	920b      	str	r2, [sp, #44]	; 0x2c
					for(i=0 ; i<temp ; i++)
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	d101      	bne.n	8009bc2 <PxMessagingTask+0x192>
 8009bbe:	f001 fa3b 	bl	800b038 <PxMessagingTask+0x1608>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009bc2:	4b85      	ldr	r3, [pc, #532]	; (8009dd8 <PxMessagingTask+0x3a8>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	469c      	mov	ip, r3
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bca:	18c8      	adds	r0, r1, r3
 8009bcc:	1a80      	subs	r0, r0, r2
 8009bce:	3802      	subs	r0, #2
 8009bd0:	4b7b      	ldr	r3, [pc, #492]	; (8009dc0 <PxMessagingTask+0x390>)
 8009bd2:	18c0      	adds	r0, r0, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4665      	mov	r5, ip
 8009bd8:	468c      	mov	ip, r1
 8009bda:	0011      	movs	r1, r2
 8009bdc:	5cc2      	ldrb	r2, [r0, r3]
 8009bde:	42aa      	cmp	r2, r5
 8009be0:	d101      	bne.n	8009be6 <PxMessagingTask+0x1b6>
 8009be2:	f001 fa21 	bl	800b028 <PxMessagingTask+0x15f8>
					for(i=0 ; i<temp ; i++)
 8009be6:	3301      	adds	r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	428a      	cmp	r2, r1
 8009bec:	d3f6      	bcc.n	8009bdc <PxMessagingTask+0x1ac>
					result = BOS_ERR_WrongID;
 8009bee:	2366      	movs	r3, #102	; 0x66
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	e756      	b.n	8009aa2 <PxMessagingTask+0x72>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009bf4:	4b72      	ldr	r3, [pc, #456]	; (8009dc0 <PxMessagingTask+0x390>)
 8009bf6:	199b      	adds	r3, r3, r6
 8009bf8:	1859      	adds	r1, r3, r1
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	780b      	ldrb	r3, [r1, #0]
 8009bfe:	4a77      	ldr	r2, [pc, #476]	; (8009ddc <PxMessagingTask+0x3ac>)
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d115      	bne.n	8009c32 <PxMessagingTask+0x202>
					result = BOS_ERR_MSG_Reflection;
 8009c06:	2303      	movs	r3, #3
 8009c08:	469a      	mov	sl, r3
				if (result == BOS_OK)
 8009c0a:	4653      	mov	r3, sl
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d000      	beq.n	8009c12 <PxMessagingTask+0x1e2>
 8009c10:	e742      	b.n	8009a98 <PxMessagingTask+0x68>
				shift += 4;
 8009c12:	9d06      	ldr	r5, [sp, #24]
 8009c14:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8009c16:	4b6c      	ldr	r3, [pc, #432]	; (8009dc8 <PxMessagingTask+0x398>)
 8009c18:	5d19      	ldrb	r1, [r3, r4]
 8009c1a:	1b48      	subs	r0, r1, r5
 8009c1c:	b2c3      	uxtb	r3, r0
 8009c1e:	469a      	mov	sl, r3
					switch (code)
 8009c20:	464b      	mov	r3, r9
 8009c22:	2b23      	cmp	r3, #35	; 0x23
 8009c24:	d901      	bls.n	8009c2a <PxMessagingTask+0x1fa>
 8009c26:	f001 f9cc 	bl	800afc2 <PxMessagingTask+0x1592>
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4a6d      	ldr	r2, [pc, #436]	; (8009de4 <PxMessagingTask+0x3b4>)
 8009c2e:	58d3      	ldr	r3, [r2, r3]
 8009c30:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009c32:	4a6a      	ldr	r2, [pc, #424]	; (8009ddc <PxMessagingTask+0x3ac>)
 8009c34:	7013      	strb	r3, [r2, #0]
 8009c36:	4a6a      	ldr	r2, [pc, #424]	; (8009de0 <PxMessagingTask+0x3b0>)
 8009c38:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c3c:	20ff      	movs	r0, #255	; 0xff
 8009c3e:	f7ff fbcf 	bl	80093e0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009c42:	4b61      	ldr	r3, [pc, #388]	; (8009dc8 <PxMessagingTask+0x398>)
 8009c44:	5d1a      	ldrb	r2, [r3, r4]
 8009c46:	4b5e      	ldr	r3, [pc, #376]	; (8009dc0 <PxMessagingTask+0x390>)
 8009c48:	199b      	adds	r3, r3, r6
 8009c4a:	189b      	adds	r3, r3, r2
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
 8009c52:	e7da      	b.n	8009c0a <PxMessagingTask+0x1da>
							for (p=0 ; p<numOfParams ; p++) 
 8009c54:	4653      	mov	r3, sl
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d022      	beq.n	8009ca0 <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	469c      	mov	ip, r3
 8009c60:	005a      	lsls	r2, r3, #1
 8009c62:	4b61      	ldr	r3, [pc, #388]	; (8009de8 <PxMessagingTask+0x3b8>)
 8009c64:	5ad3      	ldrh	r3, [r2, r3]
 8009c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c68:	4690      	mov	r8, r2
 8009c6a:	4445      	add	r5, r8
 8009c6c:	4a54      	ldr	r2, [pc, #336]	; (8009dc0 <PxMessagingTask+0x390>)
 8009c6e:	18ad      	adds	r5, r5, r2
 8009c70:	2200      	movs	r2, #0
 8009c72:	2080      	movs	r0, #128	; 0x80
 8009c74:	0200      	lsls	r0, r0, #8
 8009c76:	46a0      	mov	r8, r4
 8009c78:	4654      	mov	r4, sl
 8009c7a:	46b1      	mov	r9, r6
 8009c7c:	001e      	movs	r6, r3
 8009c7e:	5ca9      	ldrb	r1, [r5, r2]
 8009c80:	3901      	subs	r1, #1
 8009c82:	0003      	movs	r3, r0
 8009c84:	410b      	asrs	r3, r1
 8009c86:	431e      	orrs	r6, r3
 8009c88:	b2b6      	uxth	r6, r6
							for (p=0 ; p<numOfParams ; p++) 
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	b2d3      	uxtb	r3, r2
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	d3f5      	bcc.n	8009c7e <PxMessagingTask+0x24e>
 8009c92:	4644      	mov	r4, r8
 8009c94:	0033      	movs	r3, r6
 8009c96:	464e      	mov	r6, r9
 8009c98:	4662      	mov	r2, ip
 8009c9a:	0050      	lsls	r0, r2, #1
 8009c9c:	4a52      	ldr	r2, [pc, #328]	; (8009de8 <PxMessagingTask+0x3b8>)
 8009c9e:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8009ca0:	4b52      	ldr	r3, [pc, #328]	; (8009dec <PxMessagingTask+0x3bc>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
							break;		
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	469a      	mov	sl, r3
 8009caa:	e6fa      	b.n	8009aa2 <PxMessagingTask+0x72>
							indMode = IND_PING;	osDelay(10);
 8009cac:	4b45      	ldr	r3, [pc, #276]	; (8009dc4 <PxMessagingTask+0x394>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	200a      	movs	r0, #10
 8009cb4:	f003 fed7 	bl	800da66 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009cb8:	4b46      	ldr	r3, [pc, #280]	; (8009dd4 <PxMessagingTask+0x3a4>)
 8009cba:	799b      	ldrb	r3, [r3, #6]
 8009cbc:	2240      	movs	r2, #64	; 0x40
 8009cbe:	4393      	bics	r3, r2
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4692      	mov	sl, r2
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d000      	beq.n	8009cca <PxMessagingTask+0x29a>
 8009cc8:	e6eb      	b.n	8009aa2 <PxMessagingTask+0x72>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009cca:	2102      	movs	r1, #2
 8009ccc:	9807      	ldr	r0, [sp, #28]
 8009cce:	f7ff fbcf 	bl	8009470 <SendMessageToModule>
 8009cd2:	e6e6      	b.n	8009aa2 <PxMessagingTask+0x72>
							if (!moduleAlias[myID][0])
 8009cd4:	4b40      	ldr	r3, [pc, #256]	; (8009dd8 <PxMessagingTask+0x3a8>)
 8009cd6:	781a      	ldrb	r2, [r3, #0]
 8009cd8:	0093      	lsls	r3, r2, #2
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	4a44      	ldr	r2, [pc, #272]	; (8009df0 <PxMessagingTask+0x3c0>)
 8009ce0:	5c9b      	ldrb	r3, [r3, r2]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d118      	bne.n	8009d18 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009ce6:	9a07      	ldr	r2, [sp, #28]
 8009ce8:	4942      	ldr	r1, [pc, #264]	; (8009df4 <PxMessagingTask+0x3c4>)
 8009cea:	4843      	ldr	r0, [pc, #268]	; (8009df8 <PxMessagingTask+0x3c8>)
 8009cec:	f00a f876 	bl	8013ddc <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009cf0:	4d41      	ldr	r5, [pc, #260]	; (8009df8 <PxMessagingTask+0x3c8>)
 8009cf2:	0028      	movs	r0, r5
 8009cf4:	f7f6 fa10 	bl	8000118 <strlen>
 8009cf8:	b282      	uxth	r2, r0
 8009cfa:	4b40      	ldr	r3, [pc, #256]	; (8009dfc <PxMessagingTask+0x3cc>)
 8009cfc:	7818      	ldrb	r0, [r3, #0]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	425b      	negs	r3, r3
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	3333      	adds	r3, #51	; 0x33
 8009d06:	0029      	movs	r1, r5
 8009d08:	f003 fd7e 	bl	800d808 <writePxMutex>
							responseStatus = BOS_OK;								
 8009d0c:	4b37      	ldr	r3, [pc, #220]	; (8009dec <PxMessagingTask+0x3bc>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
							break;
 8009d12:	2300      	movs	r3, #0
 8009d14:	469a      	mov	sl, r3
 8009d16:	e6c4      	b.n	8009aa2 <PxMessagingTask+0x72>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009d18:	230a      	movs	r3, #10
 8009d1a:	9907      	ldr	r1, [sp, #28]
 8009d1c:	434b      	muls	r3, r1
 8009d1e:	4a34      	ldr	r2, [pc, #208]	; (8009df0 <PxMessagingTask+0x3c0>)
 8009d20:	189b      	adds	r3, r3, r2
 8009d22:	000a      	movs	r2, r1
 8009d24:	4936      	ldr	r1, [pc, #216]	; (8009e00 <PxMessagingTask+0x3d0>)
 8009d26:	4834      	ldr	r0, [pc, #208]	; (8009df8 <PxMessagingTask+0x3c8>)
 8009d28:	f00a f858 	bl	8013ddc <sprintf>
 8009d2c:	e7e0      	b.n	8009cf0 <PxMessagingTask+0x2c0>
							IND_ON();
 8009d2e:	2180      	movs	r1, #128	; 0x80
 8009d30:	2090      	movs	r0, #144	; 0x90
 8009d32:	2201      	movs	r2, #1
 8009d34:	0109      	lsls	r1, r1, #4
 8009d36:	05c0      	lsls	r0, r0, #23
 8009d38:	f007 fb2c 	bl	8011394 <HAL_GPIO_WritePin>
							break;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	469a      	mov	sl, r3
 8009d40:	e6af      	b.n	8009aa2 <PxMessagingTask+0x72>
							IND_OFF();
 8009d42:	2180      	movs	r1, #128	; 0x80
 8009d44:	2090      	movs	r0, #144	; 0x90
 8009d46:	2200      	movs	r2, #0
 8009d48:	0109      	lsls	r1, r1, #4
 8009d4a:	05c0      	lsls	r0, r0, #23
 8009d4c:	f007 fb22 	bl	8011394 <HAL_GPIO_WritePin>
							break;
 8009d50:	2300      	movs	r3, #0
 8009d52:	469a      	mov	sl, r3
 8009d54:	e6a5      	b.n	8009aa2 <PxMessagingTask+0x72>
							IND_toggle();
 8009d56:	2180      	movs	r1, #128	; 0x80
 8009d58:	2090      	movs	r0, #144	; 0x90
 8009d5a:	0109      	lsls	r1, r1, #4
 8009d5c:	05c0      	lsls	r0, r0, #23
 8009d5e:	f007 fb1f 	bl	80113a0 <HAL_GPIO_TogglePin>
							break;
 8009d62:	2300      	movs	r3, #0
 8009d64:	469a      	mov	sl, r3
 8009d66:	e69c      	b.n	8009aa2 <PxMessagingTask+0x72>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8009d68:	4b26      	ldr	r3, [pc, #152]	; (8009e04 <PxMessagingTask+0x3d4>)
 8009d6a:	469c      	mov	ip, r3
 8009d6c:	00a3      	lsls	r3, r4, #2
 8009d6e:	4a14      	ldr	r2, [pc, #80]	; (8009dc0 <PxMessagingTask+0x390>)
 8009d70:	4691      	mov	r9, r2
 8009d72:	44b1      	add	r9, r6
 8009d74:	464a      	mov	r2, r9
 8009d76:	1950      	adds	r0, r2, r5
 8009d78:	7881      	ldrb	r1, [r0, #2]
 8009d7a:	4688      	mov	r8, r1
 8009d7c:	9907      	ldr	r1, [sp, #28]
 8009d7e:	0209      	lsls	r1, r1, #8
 8009d80:	4441      	add	r1, r8
 8009d82:	4662      	mov	r2, ip
 8009d84:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8009d86:	4463      	add	r3, ip
 8009d88:	464a      	mov	r2, r9
 8009d8a:	5d51      	ldrb	r1, [r2, r5]
 8009d8c:	0209      	lsls	r1, r1, #8
 8009d8e:	7842      	ldrb	r2, [r0, #1]
 8009d90:	1852      	adds	r2, r2, r1
 8009d92:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009d94:	4b1c      	ldr	r3, [pc, #112]	; (8009e08 <PxMessagingTask+0x3d8>)
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <PxMessagingTask+0x3dc>)
 8009d9a:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009da0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009da2:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8009da4:	2002      	movs	r0, #2
 8009da6:	f003 fe5e 	bl	800da66 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009daa:	2303      	movs	r3, #3
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	0028      	movs	r0, r5
 8009db6:	f7ff f931 	bl	800901c <SendMessageFromPort>
							break;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	e670      	b.n	8009aa2 <PxMessagingTask+0x72>
 8009dc0:	20000d10 	.word	0x20000d10
 8009dc4:	20000ec4 	.word	0x20000ec4
 8009dc8:	20000f00 	.word	0x20000f00
 8009dcc:	200010c0 	.word	0x200010c0
 8009dd0:	20000ec5 	.word	0x20000ec5
 8009dd4:	200068d0 	.word	0x200068d0
 8009dd8:	20001046 	.word	0x20001046
 8009ddc:	200014f6 	.word	0x200014f6
 8009de0:	20000cbc 	.word	0x20000cbc
 8009de4:	0801c3c8 	.word	0x0801c3c8
 8009de8:	20006d2c 	.word	0x20006d2c
 8009dec:	200010d8 	.word	0x200010d8
 8009df0:	20000f38 	.word	0x20000f38
 8009df4:	0801b2ec 	.word	0x0801b2ec
 8009df8:	2000164c 	.word	0x2000164c
 8009dfc:	20000a7f 	.word	0x20000a7f
 8009e00:	0801b300 	.word	0x0801b300
 8009e04:	20001048 	.word	0x20001048
 8009e08:	20000050 	.word	0x20000050
 8009e0c:	20000f08 	.word	0x20000f08
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009e10:	4bd7      	ldr	r3, [pc, #860]	; (800a170 <PxMessagingTask+0x740>)
 8009e12:	469c      	mov	ip, r3
 8009e14:	00a3      	lsls	r3, r4, #2
 8009e16:	4ad7      	ldr	r2, [pc, #860]	; (800a174 <PxMessagingTask+0x744>)
 8009e18:	4691      	mov	r9, r2
 8009e1a:	44b1      	add	r9, r6
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	1950      	adds	r0, r2, r5
 8009e20:	7881      	ldrb	r1, [r0, #2]
 8009e22:	4688      	mov	r8, r1
 8009e24:	9907      	ldr	r1, [sp, #28]
 8009e26:	0209      	lsls	r1, r1, #8
 8009e28:	4441      	add	r1, r8
 8009e2a:	4662      	mov	r2, ip
 8009e2c:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009e2e:	4463      	add	r3, ip
 8009e30:	464a      	mov	r2, r9
 8009e32:	5d51      	ldrb	r1, [r2, r5]
 8009e34:	0209      	lsls	r1, r1, #8
 8009e36:	7842      	ldrb	r2, [r0, #1]
 8009e38:	1852      	adds	r2, r2, r1
 8009e3a:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009e3c:	4bce      	ldr	r3, [pc, #824]	; (800a178 <PxMessagingTask+0x748>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
							break;
 8009e42:	2300      	movs	r3, #0
 8009e44:	469a      	mov	sl, r3
 8009e46:	e62c      	b.n	8009aa2 <PxMessagingTask+0x72>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8009e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e4a:	f7f9 febb 	bl	8003bc4 <ExploreNeighbors>
 8009e4e:	4bcb      	ldr	r3, [pc, #812]	; (800a17c <PxMessagingTask+0x74c>)
 8009e50:	2202      	movs	r2, #2
 8009e52:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8009e54:	200a      	movs	r0, #10
 8009e56:	f003 fe06 	bl	800da66 <osDelay>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009e5a:	4bc5      	ldr	r3, [pc, #788]	; (800a170 <PxMessagingTask+0x740>)
 8009e5c:	4698      	mov	r8, r3
 8009e5e:	2501      	movs	r5, #1
							osDelay(10); temp = 0;
 8009e60:	2300      	movs	r3, #0
									messageParams[temp] = p;
 8009e62:	4642      	mov	r2, r8
 8009e64:	46a0      	mov	r8, r4
 8009e66:	46b1      	mov	r9, r6
 8009e68:	001e      	movs	r6, r3
 8009e6a:	0014      	movs	r4, r2
 8009e6c:	e00f      	b.n	8009e8e <PxMessagingTask+0x45e>
 8009e6e:	4bc4      	ldr	r3, [pc, #784]	; (800a180 <PxMessagingTask+0x750>)
 8009e70:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8009e72:	1c70      	adds	r0, r6, #1
 8009e74:	469c      	mov	ip, r3
 8009e76:	4460      	add	r0, ip
 8009e78:	2204      	movs	r2, #4
 8009e7a:	0021      	movs	r1, r4
 8009e7c:	f009 fdb0 	bl	80139e0 <memcpy>
									temp += 5;		
 8009e80:	3605      	adds	r6, #5
 8009e82:	b2f6      	uxtb	r6, r6
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009e84:	3501      	adds	r5, #1
 8009e86:	b2ed      	uxtb	r5, r5
 8009e88:	3404      	adds	r4, #4
 8009e8a:	2d06      	cmp	r5, #6
 8009e8c:	d003      	beq.n	8009e96 <PxMessagingTask+0x466>
								if (neighbors[p-1][0])
 8009e8e:	8823      	ldrh	r3, [r4, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0f7      	beq.n	8009e84 <PxMessagingTask+0x454>
 8009e94:	e7eb      	b.n	8009e6e <PxMessagingTask+0x43e>
 8009e96:	4644      	mov	r4, r8
 8009e98:	0033      	movs	r3, r6
 8009e9a:	960b      	str	r6, [sp, #44]	; 0x2c
 8009e9c:	464e      	mov	r6, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	210d      	movs	r1, #13
 8009ea2:	9807      	ldr	r0, [sp, #28]
 8009ea4:	f7ff fae4 	bl	8009470 <SendMessageToModule>
							break;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	469a      	mov	sl, r3
 8009eac:	e5f9      	b.n	8009aa2 <PxMessagingTask+0x72>
							temp = numOfParams/5;
 8009eae:	2105      	movs	r1, #5
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	f7f6 f94d 	bl	8000150 <__udivsi3>
 8009eb6:	b2c2      	uxtb	r2, r0
 8009eb8:	920b      	str	r2, [sp, #44]	; 0x2c
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009eba:	4653      	mov	r3, sl
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d921      	bls.n	8009f04 <PxMessagingTask+0x4d4>
 8009ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ec2:	1c4b      	adds	r3, r1, #1
 8009ec4:	195d      	adds	r5, r3, r5
 8009ec6:	4bab      	ldr	r3, [pc, #684]	; (800a174 <PxMessagingTask+0x744>)
 8009ec8:	46a8      	mov	r8, r5
 8009eca:	4498      	add	r8, r3
 8009ecc:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8009ece:	4bad      	ldr	r3, [pc, #692]	; (800a184 <PxMessagingTask+0x754>)
 8009ed0:	4699      	mov	r9, r3
 8009ed2:	4643      	mov	r3, r8
 8009ed4:	46a0      	mov	r8, r4
 8009ed6:	9706      	str	r7, [sp, #24]
 8009ed8:	0017      	movs	r7, r2
 8009eda:	46b2      	mov	sl, r6
 8009edc:	000e      	movs	r6, r1
 8009ede:	001c      	movs	r4, r3
 8009ee0:	1ba3      	subs	r3, r4, r6
 8009ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ee4:	5c98      	ldrb	r0, [r3, r2]
 8009ee6:	3801      	subs	r0, #1
 8009ee8:	0080      	lsls	r0, r0, #2
 8009eea:	4448      	add	r0, r9
 8009eec:	2204      	movs	r2, #4
 8009eee:	0021      	movs	r1, r4
 8009ef0:	f009 fd76 	bl	80139e0 <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	b2ed      	uxtb	r5, r5
 8009ef8:	3405      	adds	r4, #5
 8009efa:	42af      	cmp	r7, r5
 8009efc:	d8f0      	bhi.n	8009ee0 <PxMessagingTask+0x4b0>
 8009efe:	4644      	mov	r4, r8
 8009f00:	9f06      	ldr	r7, [sp, #24]
 8009f02:	4656      	mov	r6, sl
							responseStatus = BOS_OK;
 8009f04:	4b9c      	ldr	r3, [pc, #624]	; (800a178 <PxMessagingTask+0x748>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
							break;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	469a      	mov	sl, r3
 8009f0e:	e5c8      	b.n	8009aa2 <PxMessagingTask+0x72>
 8009f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f12:	18eb      	adds	r3, r5, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4a97      	ldr	r2, [pc, #604]	; (800a174 <PxMessagingTask+0x744>)
 8009f18:	4699      	mov	r9, r3
 8009f1a:	4491      	add	r9, r2
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	46a0      	mov	r8, r4
 8009f20:	46b2      	mov	sl, r6
 8009f22:	464e      	mov	r6, r9
 8009f24:	46a9      	mov	r9, r5
 8009f26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f28:	001c      	movs	r4, r3
 8009f2a:	e002      	b.n	8009f32 <PxMessagingTask+0x502>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	2c06      	cmp	r4, #6
 8009f30:	d008      	beq.n	8009f44 <PxMessagingTask+0x514>
 8009f32:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009f34:	42a8      	cmp	r0, r5
 8009f36:	d0f9      	beq.n	8009f2c <PxMessagingTask+0x4fc>
 8009f38:	f003 fc48 	bl	800d7cc <GetUart>
 8009f3c:	5d31      	ldrb	r1, [r6, r4]
 8009f3e:	f003 fcdd 	bl	800d8fc <SwapUartPins>
 8009f42:	e7f3      	b.n	8009f2c <PxMessagingTask+0x4fc>
 8009f44:	4644      	mov	r4, r8
 8009f46:	464d      	mov	r5, r9
 8009f48:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4c:	f003 fc3e 	bl	800d7cc <GetUart>
 8009f50:	4b88      	ldr	r3, [pc, #544]	; (800a174 <PxMessagingTask+0x744>)
 8009f52:	199b      	adds	r3, r3, r6
 8009f54:	195d      	adds	r5, r3, r5
 8009f56:	7aa9      	ldrb	r1, [r5, #10]
 8009f58:	f003 fcd0 	bl	800d8fc <SwapUartPins>
							break;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	469a      	mov	sl, r3
 8009f60:	e59f      	b.n	8009aa2 <PxMessagingTask+0x72>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009f62:	002a      	movs	r2, r5
 8009f64:	4b83      	ldr	r3, [pc, #524]	; (800a174 <PxMessagingTask+0x744>)
 8009f66:	199b      	adds	r3, r3, r6
 8009f68:	5d5b      	ldrb	r3, [r3, r5]
 8009f6a:	469a      	mov	sl, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d108      	bne.n	8009f82 <PxMessagingTask+0x552>
								myID = cMessage[port-1][1+shift];
 8009f70:	2238      	movs	r2, #56	; 0x38
 8009f72:	4362      	muls	r2, r4
 8009f74:	4b7f      	ldr	r3, [pc, #508]	; (800a174 <PxMessagingTask+0x744>)
 8009f76:	189b      	adds	r3, r3, r2
 8009f78:	195d      	adds	r5, r3, r5
 8009f7a:	786a      	ldrb	r2, [r5, #1]
 8009f7c:	4b82      	ldr	r3, [pc, #520]	; (800a188 <PxMessagingTask+0x758>)
 8009f7e:	701a      	strb	r2, [r3, #0]
 8009f80:	e58f      	b.n	8009aa2 <PxMessagingTask+0x72>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d002      	beq.n	8009f8c <PxMessagingTask+0x55c>
 8009f86:	2300      	movs	r3, #0
 8009f88:	469a      	mov	sl, r3
 8009f8a:	e58a      	b.n	8009aa2 <PxMessagingTask+0x72>
								messageParams[0] = 0;											/* change own ID */
 8009f8c:	497c      	ldr	r1, [pc, #496]	; (800a180 <PxMessagingTask+0x750>)
 8009f8e:	2500      	movs	r5, #0
 8009f90:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009f92:	2038      	movs	r0, #56	; 0x38
 8009f94:	4360      	muls	r0, r4
 8009f96:	4b77      	ldr	r3, [pc, #476]	; (800a174 <PxMessagingTask+0x744>)
 8009f98:	181b      	adds	r3, r3, r0
 8009f9a:	189b      	adds	r3, r3, r2
 8009f9c:	785a      	ldrb	r2, [r3, #1]
 8009f9e:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009fa0:	7898      	ldrb	r0, [r3, #2]
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	330d      	adds	r3, #13
 8009fa8:	002a      	movs	r2, r5
 8009faa:	0029      	movs	r1, r5
 8009fac:	f7ff f836 	bl	800901c <SendMessageFromPort>
 8009fb0:	46aa      	mov	sl, r5
 8009fb2:	e576      	b.n	8009aa2 <PxMessagingTask+0x72>
							if (longMessage) {
 8009fb4:	4b75      	ldr	r3, [pc, #468]	; (800a18c <PxMessagingTask+0x75c>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	4698      	mov	r8, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d014      	beq.n	8009fe8 <PxMessagingTask+0x5b8>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009fbe:	4b74      	ldr	r3, [pc, #464]	; (800a190 <PxMessagingTask+0x760>)
 8009fc0:	4699      	mov	r9, r3
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	4698      	mov	r8, r3
 8009fc6:	4873      	ldr	r0, [pc, #460]	; (800a194 <PxMessagingTask+0x764>)
 8009fc8:	4440      	add	r0, r8
 8009fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fcc:	469c      	mov	ip, r3
 8009fce:	4465      	add	r5, ip
 8009fd0:	4968      	ldr	r1, [pc, #416]	; (800a174 <PxMessagingTask+0x744>)
 8009fd2:	1869      	adds	r1, r5, r1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	f009 fd03 	bl	80139e0 <memcpy>
								longMessageLastPtr += numOfParams;
 8009fda:	4645      	mov	r5, r8
 8009fdc:	4455      	add	r5, sl
 8009fde:	464b      	mov	r3, r9
 8009fe0:	801d      	strh	r5, [r3, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	e55c      	b.n	8009aa2 <PxMessagingTask+0x72>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009fe8:	4b69      	ldr	r3, [pc, #420]	; (800a190 <PxMessagingTask+0x760>)
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	4a69      	ldr	r2, [pc, #420]	; (800a194 <PxMessagingTask+0x764>)
 8009fee:	4691      	mov	r9, r2
 8009ff0:	9306      	str	r3, [sp, #24]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	4448      	add	r0, r9
 8009ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ff8:	468c      	mov	ip, r1
 8009ffa:	4465      	add	r5, ip
 8009ffc:	495d      	ldr	r1, [pc, #372]	; (800a174 <PxMessagingTask+0x744>)
 8009ffe:	1869      	adds	r1, r5, r1
 800a000:	4652      	mov	r2, sl
 800a002:	f009 fced 	bl	80139e0 <memcpy>
								longMessageLastPtr += numOfParams;
 800a006:	9b06      	ldr	r3, [sp, #24]
 800a008:	4453      	add	r3, sl
 800a00a:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 800a00c:	2116      	movs	r1, #22
 800a00e:	0028      	movs	r0, r5
 800a010:	f7f6 f89e 	bl	8000150 <__udivsi3>
 800a014:	4b60      	ldr	r3, [pc, #384]	; (800a198 <PxMessagingTask+0x768>)
 800a016:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 800a018:	002a      	movs	r2, r5
 800a01a:	4649      	mov	r1, r9
 800a01c:	485f      	ldr	r0, [pc, #380]	; (800a19c <PxMessagingTask+0x76c>)
 800a01e:	f009 fcdf 	bl	80139e0 <memcpy>
								longMessageLastPtr = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	4a5a      	ldr	r2, [pc, #360]	; (800a190 <PxMessagingTask+0x760>)
 800a026:	8013      	strh	r3, [r2, #0]
 800a028:	46c2      	mov	sl, r8
 800a02a:	e53a      	b.n	8009aa2 <PxMessagingTask+0x72>
							for (uint8_t k=0 ; k<temp ; k++)  {
 800a02c:	2501      	movs	r5, #1
 800a02e:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a030:	2280      	movs	r2, #128	; 0x80
 800a032:	0212      	lsls	r2, r2, #8
 800a034:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 800a036:	46a1      	mov	r9, r4
 800a038:	001c      	movs	r4, r3
 800a03a:	e007      	b.n	800a04c <PxMessagingTask+0x61c>
 800a03c:	1c63      	adds	r3, r4, #1
 800a03e:	4a50      	ldr	r2, [pc, #320]	; (800a180 <PxMessagingTask+0x750>)
 800a040:	5515      	strb	r5, [r2, r4]
 800a042:	b2dc      	uxtb	r4, r3
								for (p=1 ; p<=NumOfPorts ; p++) {
 800a044:	3501      	adds	r5, #1
 800a046:	b2ed      	uxtb	r5, r5
 800a048:	2d06      	cmp	r5, #6
 800a04a:	d006      	beq.n	800a05a <PxMessagingTask+0x62a>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a04c:	0028      	movs	r0, r5
 800a04e:	f003 fbbd 	bl	800d7cc <GetUart>
 800a052:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a054:	4543      	cmp	r3, r8
 800a056:	d1f5      	bne.n	800a044 <PxMessagingTask+0x614>
 800a058:	e7f0      	b.n	800a03c <PxMessagingTask+0x60c>
 800a05a:	0023      	movs	r3, r4
 800a05c:	940b      	str	r4, [sp, #44]	; 0x2c
 800a05e:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 800a060:	b29a      	uxth	r2, r3
 800a062:	2114      	movs	r1, #20
 800a064:	9807      	ldr	r0, [sp, #28]
 800a066:	f7ff fa03 	bl	8009470 <SendMessageToModule>
							break;
 800a06a:	2300      	movs	r3, #0
 800a06c:	469a      	mov	sl, r3
 800a06e:	e518      	b.n	8009aa2 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 800a070:	4b40      	ldr	r3, [pc, #256]	; (800a174 <PxMessagingTask+0x744>)
 800a072:	199b      	adds	r3, r3, r6
 800a074:	5d5a      	ldrb	r2, [r3, r5]
 800a076:	0612      	lsls	r2, r2, #24
 800a078:	195b      	adds	r3, r3, r5
 800a07a:	78d9      	ldrb	r1, [r3, #3]
 800a07c:	1852      	adds	r2, r2, r1
 800a07e:	7859      	ldrb	r1, [r3, #1]
 800a080:	0409      	lsls	r1, r1, #16
 800a082:	1852      	adds	r2, r2, r1
 800a084:	7899      	ldrb	r1, [r3, #2]
 800a086:	0209      	lsls	r1, r1, #8
 800a088:	4690      	mov	r8, r2
 800a08a:	4488      	add	r8, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 800a08c:	791b      	ldrb	r3, [r3, #4]
 800a08e:	2bff      	cmp	r3, #255	; 0xff
 800a090:	d013      	beq.n	800a0ba <PxMessagingTask+0x68a>
									for (p=0 ; p<numOfParams ; p++) 
 800a092:	4653      	mov	r3, sl
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <PxMessagingTask+0x686>
 800a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09a:	469c      	mov	ip, r3
 800a09c:	4465      	add	r5, ip
 800a09e:	3504      	adds	r5, #4
 800a0a0:	4b34      	ldr	r3, [pc, #208]	; (800a174 <PxMessagingTask+0x744>)
 800a0a2:	46a9      	mov	r9, r5
 800a0a4:	4499      	add	r9, r3
 800a0a6:	2500      	movs	r5, #0
 800a0a8:	9406      	str	r4, [sp, #24]
 800a0aa:	0033      	movs	r3, r6
 800a0ac:	464e      	mov	r6, r9
 800a0ae:	46b9      	mov	r9, r7
 800a0b0:	4657      	mov	r7, sl
 800a0b2:	469a      	mov	sl, r3
 800a0b4:	e012      	b.n	800a0dc <PxMessagingTask+0x6ac>
								temp = temp32 = 0;
 800a0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0b8:	e4f3      	b.n	8009aa2 <PxMessagingTask+0x72>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a0ba:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 800a0bc:	4641      	mov	r1, r8
 800a0be:	0028      	movs	r0, r5
 800a0c0:	f003 fc12 	bl	800d8e8 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	b2ed      	uxtb	r5, r5
 800a0c8:	2d06      	cmp	r5, #6
 800a0ca:	d1f7      	bne.n	800a0bc <PxMessagingTask+0x68c>
								temp = temp32 = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d0:	469a      	mov	sl, r3
 800a0d2:	e4e6      	b.n	8009aa2 <PxMessagingTask+0x72>
									for (p=0 ; p<numOfParams ; p++) 
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	b2eb      	uxtb	r3, r5
 800a0d8:	42bb      	cmp	r3, r7
 800a0da:	d208      	bcs.n	800a0ee <PxMessagingTask+0x6be>
										temp = cMessage[port-1][4+shift+p];
 800a0dc:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 800a0de:	1e63      	subs	r3, r4, #1
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d8f7      	bhi.n	800a0d4 <PxMessagingTask+0x6a4>
											UpdateBaudrate(temp, temp32); 
 800a0e4:	4641      	mov	r1, r8
 800a0e6:	0020      	movs	r0, r4
 800a0e8:	f003 fbfe 	bl	800d8e8 <UpdateBaudrate>
 800a0ec:	e7f2      	b.n	800a0d4 <PxMessagingTask+0x6a4>
 800a0ee:	940b      	str	r4, [sp, #44]	; 0x2c
 800a0f0:	9c06      	ldr	r4, [sp, #24]
 800a0f2:	464f      	mov	r7, r9
 800a0f4:	4656      	mov	r6, sl
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	469a      	mov	sl, r3
 800a0fa:	e4d2      	b.n	8009aa2 <PxMessagingTask+0x72>
								SaveToRO();
 800a0fc:	f001 f870 	bl	800b1e0 <SaveToRO>
							SaveEEportsDir();
 800a100:	f7f9 f8f8 	bl	80032f4 <SaveEEportsDir>
							indMode = IND_PING;
 800a104:	4b1d      	ldr	r3, [pc, #116]	; (800a17c <PxMessagingTask+0x74c>)
 800a106:	2201      	movs	r2, #1
 800a108:	701a      	strb	r2, [r3, #0]
							break;
 800a10a:	2300      	movs	r3, #0
 800a10c:	469a      	mov	sl, r3
 800a10e:	e4c8      	b.n	8009aa2 <PxMessagingTask+0x72>
							ClearEEportsDir();
 800a110:	f7f9 f912 	bl	8003338 <ClearEEportsDir>
							ClearROtopology();
 800a114:	f001 f982 	bl	800b41c <ClearROtopology>
							osDelay(100);
 800a118:	2064      	movs	r0, #100	; 0x64
 800a11a:	f003 fca4 	bl	800da66 <osDelay>
							indMode = IND_TOPOLOGY;
 800a11e:	4b17      	ldr	r3, [pc, #92]	; (800a17c <PxMessagingTask+0x74c>)
 800a120:	2202      	movs	r2, #2
 800a122:	701a      	strb	r2, [r3, #0]
							break;
 800a124:	2300      	movs	r3, #0
 800a126:	469a      	mov	sl, r3
 800a128:	e4bb      	b.n	8009aa2 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a12a:	f003 fdbf 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 800a12e:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 800a130:	4643      	mov	r3, r8
 800a132:	2bff      	cmp	r3, #255	; 0xff
 800a134:	d012      	beq.n	800a15c <PxMessagingTask+0x72c>
							else if (dst == BOS_MULTICAST)
 800a136:	2bfe      	cmp	r3, #254	; 0xfe
 800a138:	d038      	beq.n	800a1ac <PxMessagingTask+0x77c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800a13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a13c:	469c      	mov	ip, r3
 800a13e:	4465      	add	r5, ip
 800a140:	490c      	ldr	r1, [pc, #48]	; (800a174 <PxMessagingTask+0x744>)
 800a142:	1869      	adds	r1, r5, r1
 800a144:	4652      	mov	r2, sl
 800a146:	4816      	ldr	r0, [pc, #88]	; (800a1a0 <PxMessagingTask+0x770>)
 800a148:	f009 fc4a 	bl	80139e0 <memcpy>
								temp = PcPort; PcPort = port;
 800a14c:	4d15      	ldr	r5, [pc, #84]	; (800a1a4 <PxMessagingTask+0x774>)
								if (BOS.response == BOS_RESPONSE_ALL)
 800a14e:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <PxMessagingTask+0x778>)
 800a150:	469a      	mov	sl, r3
 800a152:	9406      	str	r4, [sp, #24]
 800a154:	46b8      	mov	r8, r7
 800a156:	464f      	mov	r7, r9
 800a158:	46b1      	mov	r9, r6
 800a15a:	e035      	b.n	800a1c8 <PxMessagingTask+0x798>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 800a15c:	4652      	mov	r2, sl
 800a15e:	3a01      	subs	r2, #1
 800a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a162:	18e9      	adds	r1, r5, r3
 800a164:	4d03      	ldr	r5, [pc, #12]	; (800a174 <PxMessagingTask+0x744>)
 800a166:	1949      	adds	r1, r1, r5
 800a168:	480d      	ldr	r0, [pc, #52]	; (800a1a0 <PxMessagingTask+0x770>)
 800a16a:	f009 fc39 	bl	80139e0 <memcpy>
 800a16e:	e7ed      	b.n	800a14c <PxMessagingTask+0x71c>
 800a170:	20001048 	.word	0x20001048
 800a174:	20000d10 	.word	0x20000d10
 800a178:	200010d8 	.word	0x200010d8
 800a17c:	20000ec4 	.word	0x20000ec4
 800a180:	20000f08 	.word	0x20000f08
 800a184:	2000105c 	.word	0x2000105c
 800a188:	20001046 	.word	0x20001046
 800a18c:	20000ec5 	.word	0x20000ec5
 800a190:	20000ec6 	.word	0x20000ec6
 800a194:	2000152c 	.word	0x2000152c
 800a198:	2000001c 	.word	0x2000001c
 800a19c:	20000a80 	.word	0x20000a80
 800a1a0:	200014f8 	.word	0x200014f8
 800a1a4:	20000a7f 	.word	0x20000a7f
 800a1a8:	200068d0 	.word	0x200068d0
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 800a1ac:	4653      	mov	r3, sl
 800a1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b0:	1a9a      	subs	r2, r3, r2
 800a1b2:	3a02      	subs	r2, #2
 800a1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b6:	18e9      	adds	r1, r5, r3
 800a1b8:	4dd8      	ldr	r5, [pc, #864]	; (800a51c <PxMessagingTask+0xaec>)
 800a1ba:	1949      	adds	r1, r1, r5
 800a1bc:	48d8      	ldr	r0, [pc, #864]	; (800a520 <PxMessagingTask+0xaf0>)
 800a1be:	f009 fc0f 	bl	80139e0 <memcpy>
 800a1c2:	e7c3      	b.n	800a14c <PxMessagingTask+0x71c>
							while( xReturned != pdFALSE );								
 800a1c4:	2c00      	cmp	r4, #0
 800a1c6:	d022      	beq.n	800a20e <PxMessagingTask+0x7de>
								temp = PcPort; PcPort = port;
 800a1c8:	782e      	ldrb	r6, [r5, #0]
 800a1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1cc:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a1ce:	2299      	movs	r2, #153	; 0x99
 800a1d0:	0092      	lsls	r2, r2, #2
 800a1d2:	0039      	movs	r1, r7
 800a1d4:	48d2      	ldr	r0, [pc, #840]	; (800a520 <PxMessagingTask+0xaf0>)
 800a1d6:	f003 fcdf 	bl	800db98 <FreeRTOS_CLIProcessCommand>
 800a1da:	0004      	movs	r4, r0
								PcPort = temp;
 800a1dc:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 800a1de:	4653      	mov	r3, sl
 800a1e0:	799b      	ldrb	r3, [r3, #6]
 800a1e2:	2b60      	cmp	r3, #96	; 0x60
 800a1e4:	d1ee      	bne.n	800a1c4 <PxMessagingTask+0x794>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 800a1e6:	0038      	movs	r0, r7
 800a1e8:	f7f5 ff96 	bl	8000118 <strlen>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	0039      	movs	r1, r7
 800a1f0:	48cc      	ldr	r0, [pc, #816]	; (800a524 <PxMessagingTask+0xaf4>)
 800a1f2:	f009 fbf5 	bl	80139e0 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 800a1f6:	0038      	movs	r0, r7
 800a1f8:	f7f5 ff8e 	bl	8000118 <strlen>
 800a1fc:	b282      	uxth	r2, r0
 800a1fe:	2118      	movs	r1, #24
 800a200:	9807      	ldr	r0, [sp, #28]
 800a202:	f7ff f935 	bl	8009470 <SendMessageToModule>
									osDelay(10); 
 800a206:	200a      	movs	r0, #10
 800a208:	f003 fc2d 	bl	800da66 <osDelay>
 800a20c:	e7da      	b.n	800a1c4 <PxMessagingTask+0x794>
 800a20e:	9c06      	ldr	r4, [sp, #24]
 800a210:	960b      	str	r6, [sp, #44]	; 0x2c
 800a212:	4647      	mov	r7, r8
 800a214:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 800a216:	2232      	movs	r2, #50	; 0x32
 800a218:	2100      	movs	r1, #0
 800a21a:	48c1      	ldr	r0, [pc, #772]	; (800a520 <PxMessagingTask+0xaf0>)
 800a21c:	f009 fbe9 	bl	80139f2 <memset>
							break;
 800a220:	2300      	movs	r3, #0
 800a222:	469a      	mov	sl, r3
 800a224:	e43d      	b.n	8009aa2 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a226:	f003 fd41 	bl	800dcac <FreeRTOS_CLIGetOutputBuffer>
 800a22a:	4680      	mov	r8, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a22c:	f7f5 ff74 	bl	8000118 <strlen>
 800a230:	0002      	movs	r2, r0
 800a232:	2100      	movs	r1, #0
 800a234:	4640      	mov	r0, r8
 800a236:	f009 fbdc 	bl	80139f2 <memset>
							if (longMessage) {
 800a23a:	4bbb      	ldr	r3, [pc, #748]	; (800a528 <PxMessagingTask+0xaf8>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	4699      	mov	r9, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d012      	beq.n	800a26a <PxMessagingTask+0x83a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a244:	4bb9      	ldr	r3, [pc, #740]	; (800a52c <PxMessagingTask+0xafc>)
 800a246:	4699      	mov	r9, r3
 800a248:	8818      	ldrh	r0, [r3, #0]
 800a24a:	4440      	add	r0, r8
 800a24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24e:	469c      	mov	ip, r3
 800a250:	4465      	add	r5, ip
 800a252:	49b2      	ldr	r1, [pc, #712]	; (800a51c <PxMessagingTask+0xaec>)
 800a254:	1869      	adds	r1, r5, r1
 800a256:	4652      	mov	r2, sl
 800a258:	f009 fbc2 	bl	80139e0 <memcpy>
								longMessageLastPtr += numOfParams;
 800a25c:	464b      	mov	r3, r9
 800a25e:	881d      	ldrh	r5, [r3, #0]
 800a260:	4455      	add	r5, sl
 800a262:	801d      	strh	r5, [r3, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	469a      	mov	sl, r3
 800a268:	e41b      	b.n	8009aa2 <PxMessagingTask+0x72>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a26a:	4bb0      	ldr	r3, [pc, #704]	; (800a52c <PxMessagingTask+0xafc>)
 800a26c:	8818      	ldrh	r0, [r3, #0]
 800a26e:	4440      	add	r0, r8
 800a270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a272:	469c      	mov	ip, r3
 800a274:	4465      	add	r5, ip
 800a276:	49a9      	ldr	r1, [pc, #676]	; (800a51c <PxMessagingTask+0xaec>)
 800a278:	1869      	adds	r1, r5, r1
 800a27a:	4652      	mov	r2, sl
 800a27c:	f009 fbb0 	bl	80139e0 <memcpy>
								longMessageLastPtr = 0;
 800a280:	2100      	movs	r1, #0
 800a282:	4baa      	ldr	r3, [pc, #680]	; (800a52c <PxMessagingTask+0xafc>)
 800a284:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 800a286:	4baa      	ldr	r3, [pc, #680]	; (800a530 <PxMessagingTask+0xb00>)
 800a288:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800a28a:	000b      	movs	r3, r1
 800a28c:	000a      	movs	r2, r1
 800a28e:	48a9      	ldr	r0, [pc, #676]	; (800a534 <PxMessagingTask+0xb04>)
 800a290:	6800      	ldr	r0, [r0, #0]
 800a292:	f005 f851 	bl	800f338 <xTaskGenericNotify>
 800a296:	46ca      	mov	sl, r9
 800a298:	f7ff fc03 	bl	8009aa2 <PxMessagingTask+0x72>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800a29c:	4ba6      	ldr	r3, [pc, #664]	; (800a538 <PxMessagingTask+0xb08>)
 800a29e:	4aa7      	ldr	r2, [pc, #668]	; (800a53c <PxMessagingTask+0xb0c>)
 800a2a0:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 800a2a2:	4ba7      	ldr	r3, [pc, #668]	; (800a540 <PxMessagingTask+0xb10>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 800a2a8:	200a      	movs	r0, #10
 800a2aa:	f003 fbdc 	bl	800da66 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	4ba4      	ldr	r3, [pc, #656]	; (800a544 <PxMessagingTask+0xb14>)
 800a2b4:	4aa4      	ldr	r2, [pc, #656]	; (800a548 <PxMessagingTask+0xb18>)
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a2bc:	46c0      	nop			; (mov r8, r8)
 800a2be:	e7fd      	b.n	800a2bc <PxMessagingTask+0x88c>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 800a2c0:	4b96      	ldr	r3, [pc, #600]	; (800a51c <PxMessagingTask+0xaec>)
 800a2c2:	4698      	mov	r8, r3
 800a2c4:	44b0      	add	r8, r6
 800a2c6:	4643      	mov	r3, r8
 800a2c8:	5d58      	ldrb	r0, [r3, r5]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	3319      	adds	r3, #25
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	f7fe fea2 	bl	800901c <SendMessageFromPort>
								osDelay(100);
 800a2d8:	2064      	movs	r0, #100	; 0x64
 800a2da:	f003 fbc4 	bl	800da66 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 800a2de:	4643      	mov	r3, r8
 800a2e0:	5d5b      	ldrb	r3, [r3, r5]
 800a2e2:	4a9a      	ldr	r2, [pc, #616]	; (800a54c <PxMessagingTask+0xb1c>)
 800a2e4:	7811      	ldrb	r1, [r2, #0]
 800a2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e8:	9807      	ldr	r0, [sp, #28]
 800a2ea:	f7f9 fdf9 	bl	8003ee0 <remoteBootloaderUpdate>
								break;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f7ff fbd6 	bl	8009aa2 <PxMessagingTask+0x72>
							temp = cMessage[port-1][11+shift];
 800a2f6:	46a8      	mov	r8, r5
 800a2f8:	230b      	movs	r3, #11
 800a2fa:	4699      	mov	r9, r3
 800a2fc:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a2fe:	4653      	mov	r3, sl
 800a300:	2b0f      	cmp	r3, #15
 800a302:	d011      	beq.n	800a328 <PxMessagingTask+0x8f8>
							temp = cMessage[port-1][11+shift];
 800a304:	2238      	movs	r2, #56	; 0x38
 800a306:	4362      	muls	r2, r4
 800a308:	4b84      	ldr	r3, [pc, #528]	; (800a51c <PxMessagingTask+0xaec>)
 800a30a:	189b      	adds	r3, r3, r2
 800a30c:	464a      	mov	r2, r9
 800a30e:	5c9b      	ldrb	r3, [r3, r2]
 800a310:	9306      	str	r3, [sp, #24]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a312:	4653      	mov	r3, sl
 800a314:	2b11      	cmp	r3, #17
 800a316:	d10e      	bne.n	800a336 <PxMessagingTask+0x906>
 800a318:	2238      	movs	r2, #56	; 0x38
 800a31a:	4362      	muls	r2, r4
 800a31c:	4b7f      	ldr	r3, [pc, #508]	; (800a51c <PxMessagingTask+0xaec>)
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	4443      	add	r3, r8
 800a322:	7bdb      	ldrb	r3, [r3, #15]
 800a324:	9306      	str	r3, [sp, #24]
 800a326:	e006      	b.n	800a336 <PxMessagingTask+0x906>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a328:	2238      	movs	r2, #56	; 0x38
 800a32a:	4362      	muls	r2, r4
 800a32c:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <PxMessagingTask+0xaec>)
 800a32e:	189b      	adds	r3, r3, r2
 800a330:	195d      	adds	r5, r3, r5
 800a332:	7b6b      	ldrb	r3, [r5, #13]
 800a334:	9306      	str	r3, [sp, #24]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a336:	4643      	mov	r3, r8
 800a338:	1c58      	adds	r0, r3, #1
 800a33a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a33c:	1c9d      	adds	r5, r3, #2
 800a33e:	950f      	str	r5, [sp, #60]	; 0x3c
 800a340:	1cd9      	adds	r1, r3, #3
 800a342:	9110      	str	r1, [sp, #64]	; 0x40
 800a344:	4b75      	ldr	r3, [pc, #468]	; (800a51c <PxMessagingTask+0xaec>)
 800a346:	199b      	adds	r3, r3, r6
 800a348:	4642      	mov	r2, r8
 800a34a:	5c9a      	ldrb	r2, [r3, r2]
 800a34c:	0612      	lsls	r2, r2, #24
 800a34e:	5c59      	ldrb	r1, [r3, r1]
 800a350:	1852      	adds	r2, r2, r1
 800a352:	5c19      	ldrb	r1, [r3, r0]
 800a354:	0409      	lsls	r1, r1, #16
 800a356:	1852      	adds	r2, r2, r1
 800a358:	5d59      	ldrb	r1, [r3, r5]
 800a35a:	0209      	lsls	r1, r1, #8
 800a35c:	1852      	adds	r2, r2, r1
 800a35e:	920e      	str	r2, [sp, #56]	; 0x38
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800a360:	4642      	mov	r2, r8
 800a362:	3204      	adds	r2, #4
 800a364:	9211      	str	r2, [sp, #68]	; 0x44
 800a366:	2105      	movs	r1, #5
 800a368:	4441      	add	r1, r8
 800a36a:	468c      	mov	ip, r1
 800a36c:	4641      	mov	r1, r8
 800a36e:	3106      	adds	r1, #6
 800a370:	4640      	mov	r0, r8
 800a372:	3007      	adds	r0, #7
 800a374:	5c9d      	ldrb	r5, [r3, r2]
 800a376:	062d      	lsls	r5, r5, #24
 800a378:	4662      	mov	r2, ip
 800a37a:	5c9a      	ldrb	r2, [r3, r2]
 800a37c:	0412      	lsls	r2, r2, #16
 800a37e:	18aa      	adds	r2, r5, r2
 800a380:	5c1d      	ldrb	r5, [r3, r0]
 800a382:	1952      	adds	r2, r2, r5
 800a384:	5c5d      	ldrb	r5, [r3, r1]
 800a386:	022d      	lsls	r5, r5, #8
 800a388:	1955      	adds	r5, r2, r5
							if (temp == false)
 800a38a:	9b06      	ldr	r3, [sp, #24]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d15b      	bne.n	800a448 <PxMessagingTask+0xa18>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800a390:	4b62      	ldr	r3, [pc, #392]	; (800a51c <PxMessagingTask+0xaec>)
 800a392:	199b      	adds	r3, r3, r6
 800a394:	4443      	add	r3, r8
 800a396:	7a5b      	ldrb	r3, [r3, #9]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d007      	beq.n	800a3ac <PxMessagingTask+0x97c>
 800a39c:	2138      	movs	r1, #56	; 0x38
 800a39e:	4361      	muls	r1, r4
 800a3a0:	4a5e      	ldr	r2, [pc, #376]	; (800a51c <PxMessagingTask+0xaec>)
 800a3a2:	1852      	adds	r2, r2, r1
 800a3a4:	4442      	add	r2, r8
 800a3a6:	7a91      	ldrb	r1, [r2, #10]
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	d123      	bne.n	800a3f4 <PxMessagingTask+0x9c4>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800a3ac:	4b5b      	ldr	r3, [pc, #364]	; (800a51c <PxMessagingTask+0xaec>)
 800a3ae:	199b      	adds	r3, r3, r6
 800a3b0:	464a      	mov	r2, r9
 800a3b2:	5c9b      	ldrb	r3, [r3, r2]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <PxMessagingTask+0x998>
 800a3b8:	2138      	movs	r1, #56	; 0x38
 800a3ba:	4361      	muls	r1, r4
 800a3bc:	4a57      	ldr	r2, [pc, #348]	; (800a51c <PxMessagingTask+0xaec>)
 800a3be:	1852      	adds	r2, r2, r1
 800a3c0:	4442      	add	r2, r8
 800a3c2:	7b11      	ldrb	r1, [r2, #12]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d121      	bne.n	800a40c <PxMessagingTask+0x9dc>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a3c8:	4b54      	ldr	r3, [pc, #336]	; (800a51c <PxMessagingTask+0xaec>)
 800a3ca:	199b      	adds	r3, r3, r6
 800a3cc:	4443      	add	r3, r8
 800a3ce:	7b5b      	ldrb	r3, [r3, #13]
 800a3d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d2:	469a      	mov	sl, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <PxMessagingTask+0x9ac>
 800a3d8:	f7ff fb63 	bl	8009aa2 <PxMessagingTask+0x72>
 800a3dc:	2238      	movs	r2, #56	; 0x38
 800a3de:	4362      	muls	r2, r4
 800a3e0:	4b4e      	ldr	r3, [pc, #312]	; (800a51c <PxMessagingTask+0xaec>)
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	4443      	add	r3, r8
 800a3e6:	7b9b      	ldrb	r3, [r3, #14]
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11a      	bne.n	800a424 <PxMessagingTask+0x9f4>
 800a3ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f0:	f7ff fb57 	bl	8009aa2 <PxMessagingTask+0x72>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800a3f4:	2038      	movs	r0, #56	; 0x38
 800a3f6:	4360      	muls	r0, r4
 800a3f8:	4a48      	ldr	r2, [pc, #288]	; (800a51c <PxMessagingTask+0xaec>)
 800a3fa:	1812      	adds	r2, r2, r0
 800a3fc:	4442      	add	r2, r8
 800a3fe:	7a10      	ldrb	r0, [r2, #8]
 800a400:	9100      	str	r1, [sp, #0]
 800a402:	002a      	movs	r2, r5
 800a404:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a406:	f7fe fcf5 	bl	8008df4 <SetupDMAStreams>
 800a40a:	e7cf      	b.n	800a3ac <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 800a40c:	2038      	movs	r0, #56	; 0x38
 800a40e:	4360      	muls	r0, r4
 800a410:	4a42      	ldr	r2, [pc, #264]	; (800a51c <PxMessagingTask+0xaec>)
 800a412:	1812      	adds	r2, r2, r0
 800a414:	4442      	add	r2, r8
 800a416:	7a10      	ldrb	r0, [r2, #8]
 800a418:	9100      	str	r1, [sp, #0]
 800a41a:	002a      	movs	r2, r5
 800a41c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a41e:	f7fe fce9 	bl	8008df4 <SetupDMAStreams>
 800a422:	e7d1      	b.n	800a3c8 <PxMessagingTask+0x998>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a424:	2238      	movs	r2, #56	; 0x38
 800a426:	4362      	muls	r2, r4
 800a428:	4b3c      	ldr	r3, [pc, #240]	; (800a51c <PxMessagingTask+0xaec>)
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	4443      	add	r3, r8
 800a42e:	7a18      	ldrb	r0, [r3, #8]
 800a430:	4653      	mov	r3, sl
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a436:	002a      	movs	r2, r5
 800a438:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a43a:	f7fe fcdb 	bl	8008df4 <SetupDMAStreams>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	930b      	str	r3, [sp, #44]	; 0x2c
 800a442:	469a      	mov	sl, r3
 800a444:	f7ff fb2d 	bl	8009aa2 <PxMessagingTask+0x72>
 800a448:	4663      	mov	r3, ip
 800a44a:	9305      	str	r3, [sp, #20]
 800a44c:	9106      	str	r1, [sp, #24]
 800a44e:	4683      	mov	fp, r0
 800a450:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a452:	2338      	movs	r3, #56	; 0x38
 800a454:	4363      	muls	r3, r4
 800a456:	4e31      	ldr	r6, [pc, #196]	; (800a51c <PxMessagingTask+0xaec>)
 800a458:	18f6      	adds	r6, r6, r3
 800a45a:	4647      	mov	r7, r8
 800a45c:	19f7      	adds	r7, r6, r7
 800a45e:	7a39      	ldrb	r1, [r7, #8]
 800a460:	20e4      	movs	r0, #228	; 0xe4
 800a462:	f7fd fb01 	bl	8007a68 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a466:	4643      	mov	r3, r8
 800a468:	5cf3      	ldrb	r3, [r6, r3]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a46e:	5cb1      	ldrb	r1, [r6, r2]
 800a470:	18c9      	adds	r1, r1, r3
 800a472:	b289      	uxth	r1, r1
 800a474:	20e5      	movs	r0, #229	; 0xe5
 800a476:	f7fd faf7 	bl	8007a68 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a47a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a47c:	5cf3      	ldrb	r3, [r6, r3]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a482:	5cb1      	ldrb	r1, [r6, r2]
 800a484:	18c9      	adds	r1, r1, r3
 800a486:	b289      	uxth	r1, r1
 800a488:	20e6      	movs	r0, #230	; 0xe6
 800a48a:	f7fd faed 	bl	8007a68 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a48e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a490:	5cf3      	ldrb	r3, [r6, r3]
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	9a05      	ldr	r2, [sp, #20]
 800a496:	5cb1      	ldrb	r1, [r6, r2]
 800a498:	18c9      	adds	r1, r1, r3
 800a49a:	b289      	uxth	r1, r1
 800a49c:	20e7      	movs	r0, #231	; 0xe7
 800a49e:	f7fd fae3 	bl	8007a68 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	5cf3      	ldrb	r3, [r6, r3]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	465a      	mov	r2, fp
 800a4aa:	5cb1      	ldrb	r1, [r6, r2]
 800a4ac:	18c9      	adds	r1, r1, r3
 800a4ae:	b289      	uxth	r1, r1
 800a4b0:	20e8      	movs	r0, #232	; 0xe8
 800a4b2:	f7fd fad9 	bl	8007a68 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a4b6:	7a7b      	ldrb	r3, [r7, #9]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	7ab9      	ldrb	r1, [r7, #10]
 800a4bc:	18c9      	adds	r1, r1, r3
 800a4be:	b289      	uxth	r1, r1
 800a4c0:	20e9      	movs	r0, #233	; 0xe9
 800a4c2:	f7fd fad1 	bl	8007a68 <EE_WriteVariable>
								if (numOfParams == 19)
 800a4c6:	2d13      	cmp	r5, #19
 800a4c8:	d00a      	beq.n	800a4e0 <PxMessagingTask+0xab0>
								if (numOfParams == 21)
 800a4ca:	2d15      	cmp	r5, #21
 800a4cc:	d017      	beq.n	800a4fe <PxMessagingTask+0xace>
  __ASM volatile ("dsb 0xF":::"memory");
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	4b1c      	ldr	r3, [pc, #112]	; (800a544 <PxMessagingTask+0xb14>)
 800a4d4:	4a1c      	ldr	r2, [pc, #112]	; (800a548 <PxMessagingTask+0xb18>)
 800a4d6:	60da      	str	r2, [r3, #12]
 800a4d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a4dc:	46c0      	nop			; (mov r8, r8)
 800a4de:	e7fd      	b.n	800a4dc <PxMessagingTask+0xaac>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a4e0:	2338      	movs	r3, #56	; 0x38
 800a4e2:	4363      	muls	r3, r4
 800a4e4:	4c0d      	ldr	r4, [pc, #52]	; (800a51c <PxMessagingTask+0xaec>)
 800a4e6:	18e4      	adds	r4, r4, r3
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	5ce3      	ldrb	r3, [r4, r3]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	4444      	add	r4, r8
 800a4f0:	7b21      	ldrb	r1, [r4, #12]
 800a4f2:	18c9      	adds	r1, r1, r3
 800a4f4:	b289      	uxth	r1, r1
 800a4f6:	20ea      	movs	r0, #234	; 0xea
 800a4f8:	f7fd fab6 	bl	8007a68 <EE_WriteVariable>
								if (numOfParams == 21)
 800a4fc:	e7e7      	b.n	800a4ce <PxMessagingTask+0xa9e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a4fe:	2338      	movs	r3, #56	; 0x38
 800a500:	435c      	muls	r4, r3
 800a502:	4b06      	ldr	r3, [pc, #24]	; (800a51c <PxMessagingTask+0xaec>)
 800a504:	191b      	adds	r3, r3, r4
 800a506:	4443      	add	r3, r8
 800a508:	7b5a      	ldrb	r2, [r3, #13]
 800a50a:	0212      	lsls	r2, r2, #8
 800a50c:	7b99      	ldrb	r1, [r3, #14]
 800a50e:	1889      	adds	r1, r1, r2
 800a510:	b289      	uxth	r1, r1
 800a512:	20eb      	movs	r0, #235	; 0xeb
 800a514:	f7fd faa8 	bl	8007a68 <EE_WriteVariable>
 800a518:	e7d9      	b.n	800a4ce <PxMessagingTask+0xa9e>
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	20000d10 	.word	0x20000d10
 800a520:	200014f8 	.word	0x200014f8
 800a524:	20000f08 	.word	0x20000f08
 800a528:	20000ec5 	.word	0x20000ec5
 800a52c:	20000ec6 	.word	0x20000ec6
 800a530:	200010d8 	.word	0x200010d8
 800a534:	2000147c 	.word	0x2000147c
 800a538:	20007ff0 	.word	0x20007ff0
 800a53c:	deadbeef 	.word	0xdeadbeef
 800a540:	20000ec4 	.word	0x20000ec4
 800a544:	e000ed00 	.word	0xe000ed00
 800a548:	05fa0004 	.word	0x05fa0004
 800a54c:	20001046 	.word	0x20001046
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a550:	49f2      	ldr	r1, [pc, #968]	; (800a91c <PxMessagingTask+0xeec>)
 800a552:	1989      	adds	r1, r1, r6
 800a554:	194b      	adds	r3, r1, r5
 800a556:	7a9a      	ldrb	r2, [r3, #10]
 800a558:	4691      	mov	r9, r2
 800a55a:	7ada      	ldrb	r2, [r3, #11]
 800a55c:	4690      	mov	r8, r2
 800a55e:	4af0      	ldr	r2, [pc, #960]	; (800a920 <PxMessagingTask+0xef0>)
 800a560:	7812      	ldrb	r2, [r2, #0]
 800a562:	4694      	mov	ip, r2
 800a564:	7a5a      	ldrb	r2, [r3, #9]
 800a566:	9206      	str	r2, [sp, #24]
 800a568:	7b1a      	ldrb	r2, [r3, #12]
 800a56a:	1e50      	subs	r0, r2, #1
 800a56c:	4182      	sbcs	r2, r0
 800a56e:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a570:	791a      	ldrb	r2, [r3, #4]
 800a572:	0612      	lsls	r2, r2, #24
 800a574:	4692      	mov	sl, r2
 800a576:	795a      	ldrb	r2, [r3, #5]
 800a578:	0412      	lsls	r2, r2, #16
 800a57a:	4452      	add	r2, sl
 800a57c:	79d8      	ldrb	r0, [r3, #7]
 800a57e:	4682      	mov	sl, r0
 800a580:	4452      	add	r2, sl
 800a582:	7998      	ldrb	r0, [r3, #6]
 800a584:	0200      	lsls	r0, r0, #8
 800a586:	4682      	mov	sl, r0
 800a588:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a58a:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a58c:	5d4a      	ldrb	r2, [r1, r5]
 800a58e:	0612      	lsls	r2, r2, #24
 800a590:	78d9      	ldrb	r1, [r3, #3]
 800a592:	1852      	adds	r2, r2, r1
 800a594:	7859      	ldrb	r1, [r3, #1]
 800a596:	0409      	lsls	r1, r1, #16
 800a598:	1852      	adds	r2, r2, r1
 800a59a:	7899      	ldrb	r1, [r3, #2]
 800a59c:	0209      	lsls	r1, r1, #8
 800a59e:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a5a0:	9201      	str	r2, [sp, #4]
 800a5a2:	7a1b      	ldrb	r3, [r3, #8]
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	4661      	mov	r1, ip
 800a5ac:	9806      	ldr	r0, [sp, #24]
 800a5ae:	f7fe ff85 	bl	80094bc <StartScastDMAStream>
							break;								
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	469a      	mov	sl, r3
 800a5b6:	f7ff fa74 	bl	8009aa2 <PxMessagingTask+0x72>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a5ba:	4bd8      	ldr	r3, [pc, #864]	; (800a91c <PxMessagingTask+0xeec>)
 800a5bc:	199b      	adds	r3, r3, r6
 800a5be:	5d5b      	ldrb	r3, [r3, r5]
 800a5c0:	469a      	mov	sl, r3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d000      	beq.n	800a5c8 <PxMessagingTask+0xb98>
 800a5c6:	e07f      	b.n	800a6c8 <PxMessagingTask+0xc98>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a5c8:	2238      	movs	r2, #56	; 0x38
 800a5ca:	4362      	muls	r2, r4
 800a5cc:	4bd3      	ldr	r3, [pc, #844]	; (800a91c <PxMessagingTask+0xeec>)
 800a5ce:	189b      	adds	r3, r3, r2
 800a5d0:	195d      	adds	r5, r3, r5
 800a5d2:	78ab      	ldrb	r3, [r5, #2]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	78ea      	ldrb	r2, [r5, #3]
 800a5d8:	0412      	lsls	r2, r2, #16
 800a5da:	189b      	adds	r3, r3, r2
 800a5dc:	796a      	ldrb	r2, [r5, #5]
 800a5de:	189b      	adds	r3, r3, r2
 800a5e0:	792a      	ldrb	r2, [r5, #4]
 800a5e2:	0212      	lsls	r2, r2, #8
 800a5e4:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a5e6:	786a      	ldrb	r2, [r5, #1]
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	b2d1      	uxtb	r1, r2
 800a5ec:	2907      	cmp	r1, #7
 800a5ee:	d901      	bls.n	800a5f4 <PxMessagingTask+0xbc4>
 800a5f0:	f7ff fa52 	bl	8009a98 <PxMessagingTask+0x68>
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	0092      	lsls	r2, r2, #2
 800a5f8:	49ca      	ldr	r1, [pc, #808]	; (800a924 <PxMessagingTask+0xef4>)
 800a5fa:	588a      	ldr	r2, [r1, r2]
 800a5fc:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a5fe:	781a      	ldrb	r2, [r3, #0]
 800a600:	4bc9      	ldr	r3, [pc, #804]	; (800a928 <PxMessagingTask+0xef8>)
 800a602:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a604:	2201      	movs	r2, #1
 800a606:	211f      	movs	r1, #31
 800a608:	9807      	ldr	r0, [sp, #28]
 800a60a:	f7fe ff31 	bl	8009470 <SendMessageToModule>
 800a60e:	f7ff fa48 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	4bc4      	ldr	r3, [pc, #784]	; (800a928 <PxMessagingTask+0xef8>)
 800a616:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a618:	2201      	movs	r2, #1
 800a61a:	211f      	movs	r1, #31
 800a61c:	9807      	ldr	r0, [sp, #28]
 800a61e:	f7fe ff27 	bl	8009470 <SendMessageToModule>
 800a622:	f7ff fa3e 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a626:	8819      	ldrh	r1, [r3, #0]
 800a628:	4abf      	ldr	r2, [pc, #764]	; (800a928 <PxMessagingTask+0xef8>)
 800a62a:	7011      	strb	r1, [r2, #0]
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	0a1b      	lsrs	r3, r3, #8
 800a630:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a632:	2202      	movs	r2, #2
 800a634:	211f      	movs	r1, #31
 800a636:	9807      	ldr	r0, [sp, #28]
 800a638:	f7fe ff1a 	bl	8009470 <SendMessageToModule>
 800a63c:	f7ff fa31 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a640:	8819      	ldrh	r1, [r3, #0]
 800a642:	4ab9      	ldr	r2, [pc, #740]	; (800a928 <PxMessagingTask+0xef8>)
 800a644:	7011      	strb	r1, [r2, #0]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	b21b      	sxth	r3, r3
 800a64a:	121b      	asrs	r3, r3, #8
 800a64c:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a64e:	2202      	movs	r2, #2
 800a650:	211f      	movs	r1, #31
 800a652:	9807      	ldr	r0, [sp, #28]
 800a654:	f7fe ff0c 	bl	8009470 <SendMessageToModule>
 800a658:	f7ff fa23 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a65c:	6819      	ldr	r1, [r3, #0]
 800a65e:	4ab2      	ldr	r2, [pc, #712]	; (800a928 <PxMessagingTask+0xef8>)
 800a660:	7011      	strb	r1, [r2, #0]
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	0a09      	lsrs	r1, r1, #8
 800a666:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	0c09      	lsrs	r1, r1, #16
 800a66c:	7091      	strb	r1, [r2, #2]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	0e1b      	lsrs	r3, r3, #24
 800a672:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a674:	2204      	movs	r2, #4
 800a676:	211f      	movs	r1, #31
 800a678:	9807      	ldr	r0, [sp, #28]
 800a67a:	f7fe fef9 	bl	8009470 <SendMessageToModule>
 800a67e:	f7ff fa10 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	4aa8      	ldr	r2, [pc, #672]	; (800a928 <PxMessagingTask+0xef8>)
 800a686:	7011      	strb	r1, [r2, #0]
 800a688:	6819      	ldr	r1, [r3, #0]
 800a68a:	1209      	asrs	r1, r1, #8
 800a68c:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	1409      	asrs	r1, r1, #16
 800a692:	7091      	strb	r1, [r2, #2]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	161b      	asrs	r3, r3, #24
 800a698:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a69a:	2204      	movs	r2, #4
 800a69c:	211f      	movs	r1, #31
 800a69e:	9807      	ldr	r0, [sp, #28]
 800a6a0:	f7fe fee6 	bl	8009470 <SendMessageToModule>
 800a6a4:	f7ff f9fd 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a6a8:	7819      	ldrb	r1, [r3, #0]
 800a6aa:	4a9f      	ldr	r2, [pc, #636]	; (800a928 <PxMessagingTask+0xef8>)
 800a6ac:	7011      	strb	r1, [r2, #0]
 800a6ae:	7859      	ldrb	r1, [r3, #1]
 800a6b0:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a6b2:	7899      	ldrb	r1, [r3, #2]
 800a6b4:	7091      	strb	r1, [r2, #2]
 800a6b6:	78db      	ldrb	r3, [r3, #3]
 800a6b8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	211f      	movs	r1, #31
 800a6be:	9807      	ldr	r0, [sp, #28]
 800a6c0:	f7fe fed6 	bl	8009470 <SendMessageToModule>
 800a6c4:	f7ff f9ed 	bl	8009aa2 <PxMessagingTask+0x72>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d01d      	beq.n	800a708 <PxMessagingTask+0xcd8>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a6cc:	d801      	bhi.n	800a6d2 <PxMessagingTask+0xca2>
 800a6ce:	f000 fca3 	bl	800b018 <PxMessagingTask+0x15e8>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a6d2:	001d      	movs	r5, r3
 800a6d4:	3d04      	subs	r5, #4
 800a6d6:	00ad      	lsls	r5, r5, #2
 800a6d8:	4b94      	ldr	r3, [pc, #592]	; (800a92c <PxMessagingTask+0xefc>)
 800a6da:	58ea      	ldr	r2, [r5, r3]
 800a6dc:	250f      	movs	r5, #15
 800a6de:	4015      	ands	r5, r2
 800a6e0:	46aa      	mov	sl, r5
 800a6e2:	4b91      	ldr	r3, [pc, #580]	; (800a928 <PxMessagingTask+0xef8>)
 800a6e4:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a6e6:	d100      	bne.n	800a6ea <PxMessagingTask+0xcba>
 800a6e8:	e0af      	b.n	800a84a <PxMessagingTask+0xe1a>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a6ea:	0c12      	lsrs	r2, r2, #16
 800a6ec:	2380      	movs	r3, #128	; 0x80
 800a6ee:	059b      	lsls	r3, r3, #22
 800a6f0:	18d3      	adds	r3, r2, r3
										switch (messageParams[0])											// requested format
 800a6f2:	3d01      	subs	r5, #1
 800a6f4:	b2e9      	uxtb	r1, r5
 800a6f6:	2907      	cmp	r1, #7
 800a6f8:	d901      	bls.n	800a6fe <PxMessagingTask+0xcce>
 800a6fa:	f000 fc7c 	bl	800aff6 <PxMessagingTask+0x15c6>
 800a6fe:	b2ed      	uxtb	r5, r5
 800a700:	00ad      	lsls	r5, r5, #2
 800a702:	498b      	ldr	r1, [pc, #556]	; (800a930 <PxMessagingTask+0xf00>)
 800a704:	5949      	ldr	r1, [r1, r5]
 800a706:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a708:	4b84      	ldr	r3, [pc, #528]	; (800a91c <PxMessagingTask+0xeec>)
 800a70a:	2038      	movs	r0, #56	; 0x38
 800a70c:	4360      	muls	r0, r4
 800a70e:	1818      	adds	r0, r3, r0
 800a710:	1841      	adds	r1, r0, r1
 800a712:	3901      	subs	r1, #1
 800a714:	2000      	movs	r0, #0
 800a716:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a718:	1c68      	adds	r0, r5, #1
 800a71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a71c:	4694      	mov	ip, r2
 800a71e:	4460      	add	r0, ip
 800a720:	18c0      	adds	r0, r0, r3
 800a722:	f7f9 f9fd 	bl	8003b20 <IsModuleParameter>
 800a726:	1e05      	subs	r5, r0, #0
 800a728:	900b      	str	r0, [sp, #44]	; 0x2c
									if (temp == 0) {																					// Parameter does not exist
 800a72a:	d013      	beq.n	800a754 <PxMessagingTask+0xd24>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a72c:	3d01      	subs	r5, #1
 800a72e:	4a81      	ldr	r2, [pc, #516]	; (800a934 <PxMessagingTask+0xf04>)
 800a730:	230c      	movs	r3, #12
 800a732:	435d      	muls	r5, r3
 800a734:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a736:	1952      	adds	r2, r2, r5
 800a738:	7912      	ldrb	r2, [r2, #4]
 800a73a:	497b      	ldr	r1, [pc, #492]	; (800a928 <PxMessagingTask+0xef8>)
 800a73c:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a73e:	3a01      	subs	r2, #1
 800a740:	b2d1      	uxtb	r1, r2
 800a742:	2907      	cmp	r1, #7
 800a744:	d901      	bls.n	800a74a <PxMessagingTask+0xd1a>
 800a746:	f000 fc52 	bl	800afee <PxMessagingTask+0x15be>
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	0092      	lsls	r2, r2, #2
 800a74e:	497a      	ldr	r1, [pc, #488]	; (800a938 <PxMessagingTask+0xf08>)
 800a750:	588a      	ldr	r2, [r1, r2]
 800a752:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a754:	2201      	movs	r2, #1
 800a756:	211f      	movs	r1, #31
 800a758:	9807      	ldr	r0, [sp, #28]
 800a75a:	f7fe fe89 	bl	8009470 <SendMessageToModule>
 800a75e:	46aa      	mov	sl, r5
 800a760:	f7ff f99f 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a764:	781a      	ldrb	r2, [r3, #0]
 800a766:	4b70      	ldr	r3, [pc, #448]	; (800a928 <PxMessagingTask+0xef8>)
 800a768:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a76a:	2202      	movs	r2, #2
 800a76c:	211f      	movs	r1, #31
 800a76e:	9807      	ldr	r0, [sp, #28]
 800a770:	f7fe fe7e 	bl	8009470 <SendMessageToModule>
 800a774:	2300      	movs	r3, #0
 800a776:	469a      	mov	sl, r3
 800a778:	f7ff f993 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	4b6a      	ldr	r3, [pc, #424]	; (800a928 <PxMessagingTask+0xef8>)
 800a780:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a782:	2202      	movs	r2, #2
 800a784:	211f      	movs	r1, #31
 800a786:	9807      	ldr	r0, [sp, #28]
 800a788:	f7fe fe72 	bl	8009470 <SendMessageToModule>
 800a78c:	2300      	movs	r3, #0
 800a78e:	469a      	mov	sl, r3
 800a790:	f7ff f987 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a794:	8819      	ldrh	r1, [r3, #0]
 800a796:	4a64      	ldr	r2, [pc, #400]	; (800a928 <PxMessagingTask+0xef8>)
 800a798:	7051      	strb	r1, [r2, #1]
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	0a1b      	lsrs	r3, r3, #8
 800a79e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a7a0:	2203      	movs	r2, #3
 800a7a2:	211f      	movs	r1, #31
 800a7a4:	9807      	ldr	r0, [sp, #28]
 800a7a6:	f7fe fe63 	bl	8009470 <SendMessageToModule>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	469a      	mov	sl, r3
 800a7ae:	f7ff f978 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a7b2:	8819      	ldrh	r1, [r3, #0]
 800a7b4:	4a5c      	ldr	r2, [pc, #368]	; (800a928 <PxMessagingTask+0xef8>)
 800a7b6:	7051      	strb	r1, [r2, #1]
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b21b      	sxth	r3, r3
 800a7bc:	121b      	asrs	r3, r3, #8
 800a7be:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	211f      	movs	r1, #31
 800a7c4:	9807      	ldr	r0, [sp, #28]
 800a7c6:	f7fe fe53 	bl	8009470 <SendMessageToModule>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	469a      	mov	sl, r3
 800a7ce:	f7ff f968 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	4a54      	ldr	r2, [pc, #336]	; (800a928 <PxMessagingTask+0xef8>)
 800a7d6:	7051      	strb	r1, [r2, #1]
 800a7d8:	6819      	ldr	r1, [r3, #0]
 800a7da:	0a09      	lsrs	r1, r1, #8
 800a7dc:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	0c09      	lsrs	r1, r1, #16
 800a7e2:	70d1      	strb	r1, [r2, #3]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	0e1b      	lsrs	r3, r3, #24
 800a7e8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a7ea:	2205      	movs	r2, #5
 800a7ec:	211f      	movs	r1, #31
 800a7ee:	9807      	ldr	r0, [sp, #28]
 800a7f0:	f7fe fe3e 	bl	8009470 <SendMessageToModule>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	469a      	mov	sl, r3
 800a7f8:	f7ff f953 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a7fc:	6819      	ldr	r1, [r3, #0]
 800a7fe:	4a4a      	ldr	r2, [pc, #296]	; (800a928 <PxMessagingTask+0xef8>)
 800a800:	7051      	strb	r1, [r2, #1]
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	1209      	asrs	r1, r1, #8
 800a806:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	1409      	asrs	r1, r1, #16
 800a80c:	70d1      	strb	r1, [r2, #3]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	161b      	asrs	r3, r3, #24
 800a812:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a814:	2205      	movs	r2, #5
 800a816:	211f      	movs	r1, #31
 800a818:	9807      	ldr	r0, [sp, #28]
 800a81a:	f7fe fe29 	bl	8009470 <SendMessageToModule>
 800a81e:	2300      	movs	r3, #0
 800a820:	469a      	mov	sl, r3
 800a822:	f7ff f93e 	bl	8009aa2 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a826:	7819      	ldrb	r1, [r3, #0]
 800a828:	4a3f      	ldr	r2, [pc, #252]	; (800a928 <PxMessagingTask+0xef8>)
 800a82a:	7051      	strb	r1, [r2, #1]
 800a82c:	7859      	ldrb	r1, [r3, #1]
 800a82e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a830:	7899      	ldrb	r1, [r3, #2]
 800a832:	70d1      	strb	r1, [r2, #3]
 800a834:	78db      	ldrb	r3, [r3, #3]
 800a836:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a838:	2209      	movs	r2, #9
 800a83a:	211f      	movs	r1, #31
 800a83c:	9807      	ldr	r0, [sp, #28]
 800a83e:	f7fe fe17 	bl	8009470 <SendMessageToModule>
 800a842:	2300      	movs	r3, #0
 800a844:	469a      	mov	sl, r3
 800a846:	f7ff f92c 	bl	8009aa2 <PxMessagingTask+0x72>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a84a:	2201      	movs	r2, #1
 800a84c:	211f      	movs	r1, #31
 800a84e:	9807      	ldr	r0, [sp, #28]
 800a850:	f7fe fe0e 	bl	8009470 <SendMessageToModule>
 800a854:	f7ff f925 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a858:	781a      	ldrb	r2, [r3, #0]
 800a85a:	4b33      	ldr	r3, [pc, #204]	; (800a928 <PxMessagingTask+0xef8>)
 800a85c:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a85e:	2202      	movs	r2, #2
 800a860:	211f      	movs	r1, #31
 800a862:	9807      	ldr	r0, [sp, #28]
 800a864:	f7fe fe04 	bl	8009470 <SendMessageToModule>
 800a868:	2300      	movs	r3, #0
 800a86a:	469a      	mov	sl, r3
 800a86c:	f7ff f919 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	4b2d      	ldr	r3, [pc, #180]	; (800a928 <PxMessagingTask+0xef8>)
 800a874:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a876:	2202      	movs	r2, #2
 800a878:	211f      	movs	r1, #31
 800a87a:	9807      	ldr	r0, [sp, #28]
 800a87c:	f7fe fdf8 	bl	8009470 <SendMessageToModule>
 800a880:	2300      	movs	r3, #0
 800a882:	469a      	mov	sl, r3
 800a884:	f7ff f90d 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a888:	8819      	ldrh	r1, [r3, #0]
 800a88a:	4a27      	ldr	r2, [pc, #156]	; (800a928 <PxMessagingTask+0xef8>)
 800a88c:	7051      	strb	r1, [r2, #1]
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	0a1b      	lsrs	r3, r3, #8
 800a892:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a894:	2203      	movs	r2, #3
 800a896:	211f      	movs	r1, #31
 800a898:	9807      	ldr	r0, [sp, #28]
 800a89a:	f7fe fde9 	bl	8009470 <SendMessageToModule>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	469a      	mov	sl, r3
 800a8a2:	f7ff f8fe 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a8a6:	8819      	ldrh	r1, [r3, #0]
 800a8a8:	4a1f      	ldr	r2, [pc, #124]	; (800a928 <PxMessagingTask+0xef8>)
 800a8aa:	7051      	strb	r1, [r2, #1]
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	121b      	asrs	r3, r3, #8
 800a8b2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	211f      	movs	r1, #31
 800a8b8:	9807      	ldr	r0, [sp, #28]
 800a8ba:	f7fe fdd9 	bl	8009470 <SendMessageToModule>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	f7ff f8ee 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a8c6:	6819      	ldr	r1, [r3, #0]
 800a8c8:	4a17      	ldr	r2, [pc, #92]	; (800a928 <PxMessagingTask+0xef8>)
 800a8ca:	7051      	strb	r1, [r2, #1]
 800a8cc:	6819      	ldr	r1, [r3, #0]
 800a8ce:	0a09      	lsrs	r1, r1, #8
 800a8d0:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	0c09      	lsrs	r1, r1, #16
 800a8d6:	70d1      	strb	r1, [r2, #3]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	0e1b      	lsrs	r3, r3, #24
 800a8dc:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a8de:	2205      	movs	r2, #5
 800a8e0:	211f      	movs	r1, #31
 800a8e2:	9807      	ldr	r0, [sp, #28]
 800a8e4:	f7fe fdc4 	bl	8009470 <SendMessageToModule>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	469a      	mov	sl, r3
 800a8ec:	f7ff f8d9 	bl	8009aa2 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a8f0:	6819      	ldr	r1, [r3, #0]
 800a8f2:	4a0d      	ldr	r2, [pc, #52]	; (800a928 <PxMessagingTask+0xef8>)
 800a8f4:	7051      	strb	r1, [r2, #1]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	1209      	asrs	r1, r1, #8
 800a8fa:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a8fc:	6819      	ldr	r1, [r3, #0]
 800a8fe:	1409      	asrs	r1, r1, #16
 800a900:	70d1      	strb	r1, [r2, #3]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	161b      	asrs	r3, r3, #24
 800a906:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a908:	2205      	movs	r2, #5
 800a90a:	211f      	movs	r1, #31
 800a90c:	9807      	ldr	r0, [sp, #28]
 800a90e:	f7fe fdaf 	bl	8009470 <SendMessageToModule>
 800a912:	2300      	movs	r3, #0
 800a914:	469a      	mov	sl, r3
 800a916:	f7ff f8c4 	bl	8009aa2 <PxMessagingTask+0x72>
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	20000d10 	.word	0x20000d10
 800a920:	20001046 	.word	0x20001046
 800a924:	0801c458 	.word	0x0801c458
 800a928:	20000f08 	.word	0x20000f08
 800a92c:	20006858 	.word	0x20006858
 800a930:	0801c478 	.word	0x0801c478
 800a934:	20000088 	.word	0x20000088
 800a938:	0801c498 	.word	0x0801c498
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a93c:	7819      	ldrb	r1, [r3, #0]
 800a93e:	4bd8      	ldr	r3, [pc, #864]	; (800aca0 <PxMessagingTask+0x1270>)
 800a940:	7059      	strb	r1, [r3, #1]
 800a942:	49d8      	ldr	r1, [pc, #864]	; (800aca4 <PxMessagingTask+0x1274>)
 800a944:	1851      	adds	r1, r2, r1
 800a946:	7809      	ldrb	r1, [r1, #0]
 800a948:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a94a:	49d7      	ldr	r1, [pc, #860]	; (800aca8 <PxMessagingTask+0x1278>)
 800a94c:	1851      	adds	r1, r2, r1
 800a94e:	7809      	ldrb	r1, [r1, #0]
 800a950:	70d9      	strb	r1, [r3, #3]
 800a952:	49d6      	ldr	r1, [pc, #856]	; (800acac <PxMessagingTask+0x127c>)
 800a954:	468c      	mov	ip, r1
 800a956:	4462      	add	r2, ip
 800a958:	7812      	ldrb	r2, [r2, #0]
 800a95a:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a95c:	2209      	movs	r2, #9
 800a95e:	211f      	movs	r1, #31
 800a960:	9807      	ldr	r0, [sp, #28]
 800a962:	f7fe fd85 	bl	8009470 <SendMessageToModule>
 800a966:	2300      	movs	r3, #0
 800a968:	469a      	mov	sl, r3
 800a96a:	f7ff f89a 	bl	8009aa2 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a96e:	4bd0      	ldr	r3, [pc, #832]	; (800acb0 <PxMessagingTask+0x1280>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2002      	movs	r0, #2
 800a976:	4240      	negs	r0, r0
 800a978:	17c1      	asrs	r1, r0, #31
 800a97a:	1812      	adds	r2, r2, r0
 800a97c:	414b      	adcs	r3, r1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00a      	beq.n	800a998 <PxMessagingTask+0xf68>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a982:	4bcc      	ldr	r3, [pc, #816]	; (800acb4 <PxMessagingTask+0x1284>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b10      	cmp	r3, #16
 800a988:	d100      	bne.n	800a98c <PxMessagingTask+0xf5c>
 800a98a:	e349      	b.n	800b020 <PxMessagingTask+0x15f0>
 800a98c:	2500      	movs	r5, #0
 800a98e:	4bc9      	ldr	r3, [pc, #804]	; (800acb4 <PxMessagingTask+0x1284>)
 800a990:	701d      	strb	r5, [r3, #0]
 800a992:	46aa      	mov	sl, r5
 800a994:	f7ff f885 	bl	8009aa2 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <PxMessagingTask+0xf70>
 800a99c:	2a01      	cmp	r2, #1
 800a99e:	d8f0      	bhi.n	800a982 <PxMessagingTask+0xf52>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a9a0:	2138      	movs	r1, #56	; 0x38
 800a9a2:	4361      	muls	r1, r4
 800a9a4:	4ac4      	ldr	r2, [pc, #784]	; (800acb8 <PxMessagingTask+0x1288>)
 800a9a6:	1852      	adds	r2, r2, r1
 800a9a8:	5d52      	ldrb	r2, [r2, r5]
 800a9aa:	4692      	mov	sl, r2
 800a9ac:	4ac3      	ldr	r2, [pc, #780]	; (800acbc <PxMessagingTask+0x128c>)
 800a9ae:	4651      	mov	r1, sl
 800a9b0:	7011      	strb	r1, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a9b2:	2908      	cmp	r1, #8
 800a9b4:	d8e5      	bhi.n	800a982 <PxMessagingTask+0xf52>
 800a9b6:	008a      	lsls	r2, r1, #2
 800a9b8:	49c1      	ldr	r1, [pc, #772]	; (800acc0 <PxMessagingTask+0x1290>)
 800a9ba:	588a      	ldr	r2, [r1, r2]
 800a9bc:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a9be:	4bbd      	ldr	r3, [pc, #756]	; (800acb4 <PxMessagingTask+0x1284>)
 800a9c0:	2210      	movs	r2, #16
 800a9c2:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a9c4:	f7ff f86d 	bl	8009aa2 <PxMessagingTask+0x72>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a9c8:	4ab9      	ldr	r2, [pc, #740]	; (800acb0 <PxMessagingTask+0x1280>)
 800a9ca:	2038      	movs	r0, #56	; 0x38
 800a9cc:	4360      	muls	r0, r4
 800a9ce:	49ba      	ldr	r1, [pc, #744]	; (800acb8 <PxMessagingTask+0x1288>)
 800a9d0:	1809      	adds	r1, r1, r0
 800a9d2:	1949      	adds	r1, r1, r5
 800a9d4:	784b      	ldrb	r3, [r1, #1]
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	6053      	str	r3, [r2, #4]
 800a9dc:	e7d1      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a9de:	4ab4      	ldr	r2, [pc, #720]	; (800acb0 <PxMessagingTask+0x1280>)
 800a9e0:	2038      	movs	r0, #56	; 0x38
 800a9e2:	4360      	muls	r0, r4
 800a9e4:	49b4      	ldr	r1, [pc, #720]	; (800acb8 <PxMessagingTask+0x1288>)
 800a9e6:	1809      	adds	r1, r1, r0
 800a9e8:	1949      	adds	r1, r1, r5
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	56cb      	ldrsb	r3, [r1, r3]
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	17db      	asrs	r3, r3, #31
 800a9f2:	6053      	str	r3, [r2, #4]
 800a9f4:	e7c5      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a9f6:	4aae      	ldr	r2, [pc, #696]	; (800acb0 <PxMessagingTask+0x1280>)
 800a9f8:	2038      	movs	r0, #56	; 0x38
 800a9fa:	4360      	muls	r0, r4
 800a9fc:	49ae      	ldr	r1, [pc, #696]	; (800acb8 <PxMessagingTask+0x1288>)
 800a9fe:	1809      	adds	r1, r1, r0
 800aa00:	1949      	adds	r1, r1, r5
 800aa02:	788b      	ldrb	r3, [r1, #2]
 800aa04:	021b      	lsls	r3, r3, #8
 800aa06:	7849      	ldrb	r1, [r1, #1]
 800aa08:	185b      	adds	r3, r3, r1
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	17db      	asrs	r3, r3, #31
 800aa0e:	6053      	str	r3, [r2, #4]
 800aa10:	e7b7      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800aa12:	4aa7      	ldr	r2, [pc, #668]	; (800acb0 <PxMessagingTask+0x1280>)
 800aa14:	2038      	movs	r0, #56	; 0x38
 800aa16:	4360      	muls	r0, r4
 800aa18:	49a7      	ldr	r1, [pc, #668]	; (800acb8 <PxMessagingTask+0x1288>)
 800aa1a:	1809      	adds	r1, r1, r0
 800aa1c:	1949      	adds	r1, r1, r5
 800aa1e:	788b      	ldrb	r3, [r1, #2]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	7849      	ldrb	r1, [r1, #1]
 800aa24:	185b      	adds	r3, r3, r1
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	17db      	asrs	r3, r3, #31
 800aa2a:	6053      	str	r3, [r2, #4]
 800aa2c:	e7a9      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800aa2e:	4aa0      	ldr	r2, [pc, #640]	; (800acb0 <PxMessagingTask+0x1280>)
 800aa30:	2038      	movs	r0, #56	; 0x38
 800aa32:	4360      	muls	r0, r4
 800aa34:	49a0      	ldr	r1, [pc, #640]	; (800acb8 <PxMessagingTask+0x1288>)
 800aa36:	1809      	adds	r1, r1, r0
 800aa38:	1949      	adds	r1, r1, r5
 800aa3a:	788b      	ldrb	r3, [r1, #2]
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	78c8      	ldrb	r0, [r1, #3]
 800aa40:	0400      	lsls	r0, r0, #16
 800aa42:	181b      	adds	r3, r3, r0
 800aa44:	7848      	ldrb	r0, [r1, #1]
 800aa46:	181b      	adds	r3, r3, r0
 800aa48:	7909      	ldrb	r1, [r1, #4]
 800aa4a:	0609      	lsls	r1, r1, #24
 800aa4c:	185b      	adds	r3, r3, r1
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	6053      	str	r3, [r2, #4]
 800aa54:	e795      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800aa56:	4a96      	ldr	r2, [pc, #600]	; (800acb0 <PxMessagingTask+0x1280>)
 800aa58:	2038      	movs	r0, #56	; 0x38
 800aa5a:	4360      	muls	r0, r4
 800aa5c:	4996      	ldr	r1, [pc, #600]	; (800acb8 <PxMessagingTask+0x1288>)
 800aa5e:	1809      	adds	r1, r1, r0
 800aa60:	1949      	adds	r1, r1, r5
 800aa62:	788b      	ldrb	r3, [r1, #2]
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	7848      	ldrb	r0, [r1, #1]
 800aa68:	181b      	adds	r3, r3, r0
 800aa6a:	78c8      	ldrb	r0, [r1, #3]
 800aa6c:	0400      	lsls	r0, r0, #16
 800aa6e:	181b      	adds	r3, r3, r0
 800aa70:	7909      	ldrb	r1, [r1, #4]
 800aa72:	0609      	lsls	r1, r1, #24
 800aa74:	185b      	adds	r3, r3, r1
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	17db      	asrs	r3, r3, #31
 800aa7a:	6053      	str	r3, [r2, #4]
 800aa7c:	e781      	b.n	800a982 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800aa7e:	4a8c      	ldr	r2, [pc, #560]	; (800acb0 <PxMessagingTask+0x1280>)
 800aa80:	2038      	movs	r0, #56	; 0x38
 800aa82:	4360      	muls	r0, r4
 800aa84:	498c      	ldr	r1, [pc, #560]	; (800acb8 <PxMessagingTask+0x1288>)
 800aa86:	1809      	adds	r1, r1, r0
 800aa88:	1949      	adds	r1, r1, r5
 800aa8a:	788b      	ldrb	r3, [r1, #2]
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	78c8      	ldrb	r0, [r1, #3]
 800aa90:	0400      	lsls	r0, r0, #16
 800aa92:	181b      	adds	r3, r3, r0
 800aa94:	7848      	ldrb	r0, [r1, #1]
 800aa96:	181b      	adds	r3, r3, r0
 800aa98:	7909      	ldrb	r1, [r1, #4]
 800aa9a:	0609      	lsls	r1, r1, #24
 800aa9c:	185b      	adds	r3, r3, r1
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6053      	str	r3, [r2, #4]
 800aaa4:	e76d      	b.n	800a982 <PxMessagingTask+0xf52>
							responseStatus = BOS_OK;		// Initialize response
 800aaa6:	4b83      	ldr	r3, [pc, #524]	; (800acb4 <PxMessagingTask+0x1284>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800aaac:	46a8      	mov	r8, r5
 800aaae:	4b82      	ldr	r3, [pc, #520]	; (800acb8 <PxMessagingTask+0x1288>)
 800aab0:	199b      	adds	r3, r3, r6
 800aab2:	5d5b      	ldrb	r3, [r3, r5]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d100      	bne.n	800aaba <PxMessagingTask+0x108a>
 800aab8:	e12e      	b.n	800ad18 <PxMessagingTask+0x12e8>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800aaba:	2b1e      	cmp	r3, #30
 800aabc:	d900      	bls.n	800aac0 <PxMessagingTask+0x1090>
 800aabe:	e113      	b.n	800ace8 <PxMessagingTask+0x12b8>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800aac0:	1e5d      	subs	r5, r3, #1
 800aac2:	00aa      	lsls	r2, r5, #2
 800aac4:	4b7f      	ldr	r3, [pc, #508]	; (800acc4 <PxMessagingTask+0x1294>)
 800aac6:	58d2      	ldr	r2, [r2, r3]
 800aac8:	0c13      	lsrs	r3, r2, #16
 800aaca:	2180      	movs	r1, #128	; 0x80
 800aacc:	0589      	lsls	r1, r1, #22
 800aace:	468c      	mov	ip, r1
 800aad0:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800aad2:	2101      	movs	r1, #1
 800aad4:	4441      	add	r1, r8
 800aad6:	4689      	mov	r9, r1
 800aad8:	2038      	movs	r0, #56	; 0x38
 800aada:	4360      	muls	r0, r4
 800aadc:	4976      	ldr	r1, [pc, #472]	; (800acb8 <PxMessagingTask+0x1288>)
 800aade:	1809      	adds	r1, r1, r0
 800aae0:	4648      	mov	r0, r9
 800aae2:	5c09      	ldrb	r1, [r1, r0]
 800aae4:	468a      	mov	sl, r1
 800aae6:	3901      	subs	r1, #1
 800aae8:	b2c8      	uxtb	r0, r1
 800aaea:	2807      	cmp	r0, #7
 800aaec:	d80d      	bhi.n	800ab0a <PxMessagingTask+0x10da>
 800aaee:	b2c9      	uxtb	r1, r1
 800aaf0:	0089      	lsls	r1, r1, #2
 800aaf2:	4875      	ldr	r0, [pc, #468]	; (800acc8 <PxMessagingTask+0x1298>)
 800aaf4:	5841      	ldr	r1, [r0, r1]
 800aaf6:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aaf8:	0712      	lsls	r2, r2, #28
 800aafa:	d022      	beq.n	800ab42 <PxMessagingTask+0x1112>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800aafc:	2138      	movs	r1, #56	; 0x38
 800aafe:	4361      	muls	r1, r4
 800ab00:	4a6d      	ldr	r2, [pc, #436]	; (800acb8 <PxMessagingTask+0x1288>)
 800ab02:	1852      	adds	r2, r2, r1
 800ab04:	4442      	add	r2, r8
 800ab06:	7892      	ldrb	r2, [r2, #2]
 800ab08:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800ab0a:	2338      	movs	r3, #56	; 0x38
 800ab0c:	4363      	muls	r3, r4
 800ab0e:	4a6a      	ldr	r2, [pc, #424]	; (800acb8 <PxMessagingTask+0x1288>)
 800ab10:	18d2      	adds	r2, r2, r3
 800ab12:	4643      	mov	r3, r8
 800ab14:	5cd3      	ldrb	r3, [r2, r3]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	0098      	lsls	r0, r3, #2
 800ab1a:	496a      	ldr	r1, [pc, #424]	; (800acc4 <PxMessagingTask+0x1294>)
 800ab1c:	5841      	ldr	r1, [r0, r1]
 800ab1e:	4648      	mov	r0, r9
 800ab20:	5c12      	ldrb	r2, [r2, r0]
 800ab22:	200f      	movs	r0, #15
 800ab24:	4008      	ands	r0, r1
 800ab26:	4290      	cmp	r0, r2
 800ab28:	d100      	bne.n	800ab2c <PxMessagingTask+0x10fc>
 800ab2a:	e0e0      	b.n	800acee <PxMessagingTask+0x12be>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4867      	ldr	r0, [pc, #412]	; (800accc <PxMessagingTask+0x129c>)
 800ab30:	4684      	mov	ip, r0
 800ab32:	4462      	add	r2, ip
 800ab34:	400a      	ands	r2, r1
 800ab36:	4963      	ldr	r1, [pc, #396]	; (800acc4 <PxMessagingTask+0x1294>)
 800ab38:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ab3a:	4b5e      	ldr	r3, [pc, #376]	; (800acb4 <PxMessagingTask+0x1284>)
 800ab3c:	2214      	movs	r2, #20
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e0d5      	b.n	800acee <PxMessagingTask+0x12be>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800ab42:	2001      	movs	r0, #1
 800ab44:	f008 fd16 	bl	8013574 <malloc>
 800ab48:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ab4a:	d005      	beq.n	800ab58 <PxMessagingTask+0x1128>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ab4c:	00ad      	lsls	r5, r5, #2
 800ab4e:	0400      	lsls	r0, r0, #16
 800ab50:	4450      	add	r0, sl
 800ab52:	4a5c      	ldr	r2, [pc, #368]	; (800acc4 <PxMessagingTask+0x1294>)
 800ab54:	50a8      	str	r0, [r5, r2]
 800ab56:	e7d1      	b.n	800aafc <PxMessagingTask+0x10cc>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ab58:	4b56      	ldr	r3, [pc, #344]	; (800acb4 <PxMessagingTask+0x1284>)
 800ab5a:	2212      	movs	r2, #18
 800ab5c:	701a      	strb	r2, [r3, #0]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800ab5e:	e7d4      	b.n	800ab0a <PxMessagingTask+0x10da>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ab60:	0712      	lsls	r2, r2, #28
 800ab62:	d008      	beq.n	800ab76 <PxMessagingTask+0x1146>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800ab64:	2138      	movs	r1, #56	; 0x38
 800ab66:	4361      	muls	r1, r4
 800ab68:	4a53      	ldr	r2, [pc, #332]	; (800acb8 <PxMessagingTask+0x1288>)
 800ab6a:	1852      	adds	r2, r2, r1
 800ab6c:	4442      	add	r2, r8
 800ab6e:	7892      	ldrb	r2, [r2, #2]
 800ab70:	b252      	sxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	e7c9      	b.n	800ab0a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800ab76:	2001      	movs	r0, #1
 800ab78:	f008 fcfc 	bl	8013574 <malloc>
 800ab7c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ab7e:	d100      	bne.n	800ab82 <PxMessagingTask+0x1152>
 800ab80:	e25e      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ab82:	00ad      	lsls	r5, r5, #2
 800ab84:	0400      	lsls	r0, r0, #16
 800ab86:	3002      	adds	r0, #2
 800ab88:	4a4e      	ldr	r2, [pc, #312]	; (800acc4 <PxMessagingTask+0x1294>)
 800ab8a:	50a8      	str	r0, [r5, r2]
 800ab8c:	e7ea      	b.n	800ab64 <PxMessagingTask+0x1134>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ab8e:	0712      	lsls	r2, r2, #28
 800ab90:	d00b      	beq.n	800abaa <PxMessagingTask+0x117a>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800ab92:	2138      	movs	r1, #56	; 0x38
 800ab94:	4361      	muls	r1, r4
 800ab96:	4a48      	ldr	r2, [pc, #288]	; (800acb8 <PxMessagingTask+0x1288>)
 800ab98:	1852      	adds	r2, r2, r1
 800ab9a:	4442      	add	r2, r8
 800ab9c:	78d1      	ldrb	r1, [r2, #3]
 800ab9e:	0209      	lsls	r1, r1, #8
 800aba0:	7892      	ldrb	r2, [r2, #2]
 800aba2:	1852      	adds	r2, r2, r1
 800aba4:	b292      	uxth	r2, r2
 800aba6:	801a      	strh	r2, [r3, #0]
 800aba8:	e7af      	b.n	800ab0a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800abaa:	2002      	movs	r0, #2
 800abac:	f008 fce2 	bl	8013574 <malloc>
 800abb0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800abb2:	d100      	bne.n	800abb6 <PxMessagingTask+0x1186>
 800abb4:	e244      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800abb6:	00ad      	lsls	r5, r5, #2
 800abb8:	0400      	lsls	r0, r0, #16
 800abba:	3003      	adds	r0, #3
 800abbc:	4a41      	ldr	r2, [pc, #260]	; (800acc4 <PxMessagingTask+0x1294>)
 800abbe:	50a8      	str	r0, [r5, r2]
 800abc0:	e7e7      	b.n	800ab92 <PxMessagingTask+0x1162>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800abc2:	0712      	lsls	r2, r2, #28
 800abc4:	d00b      	beq.n	800abde <PxMessagingTask+0x11ae>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800abc6:	2138      	movs	r1, #56	; 0x38
 800abc8:	4361      	muls	r1, r4
 800abca:	4a3b      	ldr	r2, [pc, #236]	; (800acb8 <PxMessagingTask+0x1288>)
 800abcc:	1852      	adds	r2, r2, r1
 800abce:	4442      	add	r2, r8
 800abd0:	78d1      	ldrb	r1, [r2, #3]
 800abd2:	0209      	lsls	r1, r1, #8
 800abd4:	7892      	ldrb	r2, [r2, #2]
 800abd6:	1852      	adds	r2, r2, r1
 800abd8:	b212      	sxth	r2, r2
 800abda:	801a      	strh	r2, [r3, #0]
 800abdc:	e795      	b.n	800ab0a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800abde:	2002      	movs	r0, #2
 800abe0:	f008 fcc8 	bl	8013574 <malloc>
 800abe4:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800abe6:	d100      	bne.n	800abea <PxMessagingTask+0x11ba>
 800abe8:	e22a      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800abea:	00ad      	lsls	r5, r5, #2
 800abec:	0400      	lsls	r0, r0, #16
 800abee:	3004      	adds	r0, #4
 800abf0:	4a34      	ldr	r2, [pc, #208]	; (800acc4 <PxMessagingTask+0x1294>)
 800abf2:	50a8      	str	r0, [r5, r2]
 800abf4:	e7e7      	b.n	800abc6 <PxMessagingTask+0x1196>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800abf6:	0712      	lsls	r2, r2, #28
 800abf8:	d010      	beq.n	800ac1c <PxMessagingTask+0x11ec>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800abfa:	2238      	movs	r2, #56	; 0x38
 800abfc:	4362      	muls	r2, r4
 800abfe:	492e      	ldr	r1, [pc, #184]	; (800acb8 <PxMessagingTask+0x1288>)
 800ac00:	1889      	adds	r1, r1, r2
 800ac02:	4441      	add	r1, r8
 800ac04:	78ca      	ldrb	r2, [r1, #3]
 800ac06:	0212      	lsls	r2, r2, #8
 800ac08:	7908      	ldrb	r0, [r1, #4]
 800ac0a:	0400      	lsls	r0, r0, #16
 800ac0c:	1812      	adds	r2, r2, r0
 800ac0e:	7888      	ldrb	r0, [r1, #2]
 800ac10:	1812      	adds	r2, r2, r0
 800ac12:	7949      	ldrb	r1, [r1, #5]
 800ac14:	0609      	lsls	r1, r1, #24
 800ac16:	1852      	adds	r2, r2, r1
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	e776      	b.n	800ab0a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800ac1c:	2004      	movs	r0, #4
 800ac1e:	f008 fca9 	bl	8013574 <malloc>
 800ac22:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ac24:	d100      	bne.n	800ac28 <PxMessagingTask+0x11f8>
 800ac26:	e20b      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ac28:	00ad      	lsls	r5, r5, #2
 800ac2a:	0400      	lsls	r0, r0, #16
 800ac2c:	3005      	adds	r0, #5
 800ac2e:	4a25      	ldr	r2, [pc, #148]	; (800acc4 <PxMessagingTask+0x1294>)
 800ac30:	50a8      	str	r0, [r5, r2]
 800ac32:	e7e2      	b.n	800abfa <PxMessagingTask+0x11ca>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ac34:	0712      	lsls	r2, r2, #28
 800ac36:	d010      	beq.n	800ac5a <PxMessagingTask+0x122a>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800ac38:	2238      	movs	r2, #56	; 0x38
 800ac3a:	4362      	muls	r2, r4
 800ac3c:	491e      	ldr	r1, [pc, #120]	; (800acb8 <PxMessagingTask+0x1288>)
 800ac3e:	1889      	adds	r1, r1, r2
 800ac40:	4441      	add	r1, r8
 800ac42:	78ca      	ldrb	r2, [r1, #3]
 800ac44:	0212      	lsls	r2, r2, #8
 800ac46:	7888      	ldrb	r0, [r1, #2]
 800ac48:	1812      	adds	r2, r2, r0
 800ac4a:	7908      	ldrb	r0, [r1, #4]
 800ac4c:	0400      	lsls	r0, r0, #16
 800ac4e:	1812      	adds	r2, r2, r0
 800ac50:	7949      	ldrb	r1, [r1, #5]
 800ac52:	0609      	lsls	r1, r1, #24
 800ac54:	1852      	adds	r2, r2, r1
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	e757      	b.n	800ab0a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800ac5a:	2004      	movs	r0, #4
 800ac5c:	f008 fc8a 	bl	8013574 <malloc>
 800ac60:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ac62:	d100      	bne.n	800ac66 <PxMessagingTask+0x1236>
 800ac64:	e1ec      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ac66:	00ad      	lsls	r5, r5, #2
 800ac68:	0400      	lsls	r0, r0, #16
 800ac6a:	3006      	adds	r0, #6
 800ac6c:	4a15      	ldr	r2, [pc, #84]	; (800acc4 <PxMessagingTask+0x1294>)
 800ac6e:	50a8      	str	r0, [r5, r2]
 800ac70:	e7e2      	b.n	800ac38 <PxMessagingTask+0x1208>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ac72:	0712      	lsls	r2, r2, #28
 800ac74:	d02c      	beq.n	800acd0 <PxMessagingTask+0x12a0>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800ac76:	2238      	movs	r2, #56	; 0x38
 800ac78:	4362      	muls	r2, r4
 800ac7a:	490f      	ldr	r1, [pc, #60]	; (800acb8 <PxMessagingTask+0x1288>)
 800ac7c:	1889      	adds	r1, r1, r2
 800ac7e:	4441      	add	r1, r8
 800ac80:	78ca      	ldrb	r2, [r1, #3]
 800ac82:	0212      	lsls	r2, r2, #8
 800ac84:	7908      	ldrb	r0, [r1, #4]
 800ac86:	0400      	lsls	r0, r0, #16
 800ac88:	1812      	adds	r2, r2, r0
 800ac8a:	7888      	ldrb	r0, [r1, #2]
 800ac8c:	1812      	adds	r2, r2, r0
 800ac8e:	7949      	ldrb	r1, [r1, #5]
 800ac90:	0609      	lsls	r1, r1, #24
 800ac92:	1852      	adds	r2, r2, r1
 800ac94:	4906      	ldr	r1, [pc, #24]	; (800acb0 <PxMessagingTask+0x1280>)
 800ac96:	600a      	str	r2, [r1, #0]
 800ac98:	2000      	movs	r0, #0
 800ac9a:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	e734      	b.n	800ab0a <PxMessagingTask+0x10da>
 800aca0:	20000f08 	.word	0x20000f08
 800aca4:	20000001 	.word	0x20000001
 800aca8:	20000002 	.word	0x20000002
 800acac:	20000003 	.word	0x20000003
 800acb0:	200010d0 	.word	0x200010d0
 800acb4:	200010d8 	.word	0x200010d8
 800acb8:	20000d10 	.word	0x20000d10
 800acbc:	20000070 	.word	0x20000070
 800acc0:	0801c4b8 	.word	0x0801c4b8
 800acc4:	20006858 	.word	0x20006858
 800acc8:	0801c4dc 	.word	0x0801c4dc
 800accc:	0000fff0 	.word	0x0000fff0
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800acd0:	2004      	movs	r0, #4
 800acd2:	f008 fc4f 	bl	8013574 <malloc>
 800acd6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800acd8:	d100      	bne.n	800acdc <PxMessagingTask+0x12ac>
 800acda:	e1b1      	b.n	800b040 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800acdc:	00ad      	lsls	r5, r5, #2
 800acde:	0400      	lsls	r0, r0, #16
 800ace0:	3007      	adds	r0, #7
 800ace2:	4ae3      	ldr	r2, [pc, #908]	; (800b070 <PxMessagingTask+0x1640>)
 800ace4:	50a8      	str	r0, [r5, r2]
 800ace6:	e7c6      	b.n	800ac76 <PxMessagingTask+0x1246>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800ace8:	4be2      	ldr	r3, [pc, #904]	; (800b074 <PxMessagingTask+0x1644>)
 800acea:	2213      	movs	r2, #19
 800acec:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800acee:	4be2      	ldr	r3, [pc, #904]	; (800b078 <PxMessagingTask+0x1648>)
 800acf0:	799b      	ldrb	r3, [r3, #6]
 800acf2:	2240      	movs	r2, #64	; 0x40
 800acf4:	4393      	bics	r3, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	4692      	mov	sl, r2
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d001      	beq.n	800ad02 <PxMessagingTask+0x12d2>
 800acfe:	f7fe fed0 	bl	8009aa2 <PxMessagingTask+0x72>
								messageParams[0] = responseStatus;
 800ad02:	4bdc      	ldr	r3, [pc, #880]	; (800b074 <PxMessagingTask+0x1644>)
 800ad04:	781a      	ldrb	r2, [r3, #0]
 800ad06:	4bdd      	ldr	r3, [pc, #884]	; (800b07c <PxMessagingTask+0x164c>)
 800ad08:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2121      	movs	r1, #33	; 0x21
 800ad0e:	9807      	ldr	r0, [sp, #28]
 800ad10:	f7fe fbae 	bl	8009470 <SendMessageToModule>
 800ad14:	f7fe fec5 	bl	8009aa2 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800ad18:	2238      	movs	r2, #56	; 0x38
 800ad1a:	4362      	muls	r2, r4
 800ad1c:	4bd8      	ldr	r3, [pc, #864]	; (800b080 <PxMessagingTask+0x1650>)
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	195d      	adds	r5, r3, r5
 800ad22:	78ab      	ldrb	r3, [r5, #2]
 800ad24:	061b      	lsls	r3, r3, #24
 800ad26:	78ea      	ldrb	r2, [r5, #3]
 800ad28:	0412      	lsls	r2, r2, #16
 800ad2a:	189b      	adds	r3, r3, r2
 800ad2c:	796a      	ldrb	r2, [r5, #5]
 800ad2e:	189b      	adds	r3, r3, r2
 800ad30:	792d      	ldrb	r5, [r5, #4]
 800ad32:	022d      	lsls	r5, r5, #8
 800ad34:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800ad36:	23e0      	movs	r3, #224	; 0xe0
 800ad38:	061b      	lsls	r3, r3, #24
 800ad3a:	18ea      	adds	r2, r5, r3
 800ad3c:	2380      	movs	r3, #128	; 0x80
 800ad3e:	021b      	lsls	r3, r3, #8
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d26e      	bcs.n	800ae22 <PxMessagingTask+0x13f2>
									switch (cMessage[port-1][1+shift])															// Requested format
 800ad44:	2238      	movs	r2, #56	; 0x38
 800ad46:	4362      	muls	r2, r4
 800ad48:	4bcd      	ldr	r3, [pc, #820]	; (800b080 <PxMessagingTask+0x1650>)
 800ad4a:	189b      	adds	r3, r3, r2
 800ad4c:	4443      	add	r3, r8
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	2a07      	cmp	r2, #7
 800ad56:	d8ca      	bhi.n	800acee <PxMessagingTask+0x12be>
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4ac9      	ldr	r2, [pc, #804]	; (800b084 <PxMessagingTask+0x1654>)
 800ad5e:	58d3      	ldr	r3, [r2, r3]
 800ad60:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800ad62:	2238      	movs	r2, #56	; 0x38
 800ad64:	4362      	muls	r2, r4
 800ad66:	4bc6      	ldr	r3, [pc, #792]	; (800b080 <PxMessagingTask+0x1650>)
 800ad68:	189b      	adds	r3, r3, r2
 800ad6a:	4443      	add	r3, r8
 800ad6c:	799b      	ldrb	r3, [r3, #6]
 800ad6e:	702b      	strb	r3, [r5, #0]
 800ad70:	e7bd      	b.n	800acee <PxMessagingTask+0x12be>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800ad72:	2238      	movs	r2, #56	; 0x38
 800ad74:	4362      	muls	r2, r4
 800ad76:	4bc2      	ldr	r3, [pc, #776]	; (800b080 <PxMessagingTask+0x1650>)
 800ad78:	189b      	adds	r3, r3, r2
 800ad7a:	4443      	add	r3, r8
 800ad7c:	799b      	ldrb	r3, [r3, #6]
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	702b      	strb	r3, [r5, #0]
 800ad82:	e7b4      	b.n	800acee <PxMessagingTask+0x12be>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800ad84:	2238      	movs	r2, #56	; 0x38
 800ad86:	4362      	muls	r2, r4
 800ad88:	4bbd      	ldr	r3, [pc, #756]	; (800b080 <PxMessagingTask+0x1650>)
 800ad8a:	189b      	adds	r3, r3, r2
 800ad8c:	4443      	add	r3, r8
 800ad8e:	79da      	ldrb	r2, [r3, #7]
 800ad90:	0212      	lsls	r2, r2, #8
 800ad92:	799b      	ldrb	r3, [r3, #6]
 800ad94:	189b      	adds	r3, r3, r2
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	802b      	strh	r3, [r5, #0]
 800ad9a:	e7a8      	b.n	800acee <PxMessagingTask+0x12be>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800ad9c:	2238      	movs	r2, #56	; 0x38
 800ad9e:	4362      	muls	r2, r4
 800ada0:	4bb7      	ldr	r3, [pc, #732]	; (800b080 <PxMessagingTask+0x1650>)
 800ada2:	189b      	adds	r3, r3, r2
 800ada4:	4443      	add	r3, r8
 800ada6:	79da      	ldrb	r2, [r3, #7]
 800ada8:	0212      	lsls	r2, r2, #8
 800adaa:	799b      	ldrb	r3, [r3, #6]
 800adac:	189b      	adds	r3, r3, r2
 800adae:	b21b      	sxth	r3, r3
 800adb0:	802b      	strh	r3, [r5, #0]
 800adb2:	e79c      	b.n	800acee <PxMessagingTask+0x12be>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800adb4:	2338      	movs	r3, #56	; 0x38
 800adb6:	4363      	muls	r3, r4
 800adb8:	4ab1      	ldr	r2, [pc, #708]	; (800b080 <PxMessagingTask+0x1650>)
 800adba:	18d2      	adds	r2, r2, r3
 800adbc:	4442      	add	r2, r8
 800adbe:	79d3      	ldrb	r3, [r2, #7]
 800adc0:	021b      	lsls	r3, r3, #8
 800adc2:	7a11      	ldrb	r1, [r2, #8]
 800adc4:	0409      	lsls	r1, r1, #16
 800adc6:	185b      	adds	r3, r3, r1
 800adc8:	7991      	ldrb	r1, [r2, #6]
 800adca:	185b      	adds	r3, r3, r1
 800adcc:	7a52      	ldrb	r2, [r2, #9]
 800adce:	0612      	lsls	r2, r2, #24
 800add0:	189b      	adds	r3, r3, r2
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	e78b      	b.n	800acee <PxMessagingTask+0x12be>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800add6:	2338      	movs	r3, #56	; 0x38
 800add8:	4363      	muls	r3, r4
 800adda:	4aa9      	ldr	r2, [pc, #676]	; (800b080 <PxMessagingTask+0x1650>)
 800addc:	18d2      	adds	r2, r2, r3
 800adde:	4442      	add	r2, r8
 800ade0:	79d3      	ldrb	r3, [r2, #7]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	7991      	ldrb	r1, [r2, #6]
 800ade6:	185b      	adds	r3, r3, r1
 800ade8:	7a11      	ldrb	r1, [r2, #8]
 800adea:	0409      	lsls	r1, r1, #16
 800adec:	185b      	adds	r3, r3, r1
 800adee:	7a52      	ldrb	r2, [r2, #9]
 800adf0:	0612      	lsls	r2, r2, #24
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	e77a      	b.n	800acee <PxMessagingTask+0x12be>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800adf8:	2338      	movs	r3, #56	; 0x38
 800adfa:	4363      	muls	r3, r4
 800adfc:	4aa0      	ldr	r2, [pc, #640]	; (800b080 <PxMessagingTask+0x1650>)
 800adfe:	18d2      	adds	r2, r2, r3
 800ae00:	4442      	add	r2, r8
 800ae02:	79d3      	ldrb	r3, [r2, #7]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	7a11      	ldrb	r1, [r2, #8]
 800ae08:	0409      	lsls	r1, r1, #16
 800ae0a:	185b      	adds	r3, r3, r1
 800ae0c:	7991      	ldrb	r1, [r2, #6]
 800ae0e:	185b      	adds	r3, r3, r1
 800ae10:	7a52      	ldrb	r2, [r2, #9]
 800ae12:	0612      	lsls	r2, r2, #24
 800ae14:	189b      	adds	r3, r3, r2
 800ae16:	4a9c      	ldr	r2, [pc, #624]	; (800b088 <PxMessagingTask+0x1658>)
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	e765      	b.n	800acee <PxMessagingTask+0x12be>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	0292      	lsls	r2, r2, #10
 800ae26:	23f8      	movs	r3, #248	; 0xf8
 800ae28:	061b      	lsls	r3, r3, #24
 800ae2a:	18eb      	adds	r3, r5, r3
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d303      	bcc.n	800ae38 <PxMessagingTask+0x1408>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ae30:	4b90      	ldr	r3, [pc, #576]	; (800b074 <PxMessagingTask+0x1644>)
 800ae32:	2215      	movs	r2, #21
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	e75a      	b.n	800acee <PxMessagingTask+0x12be>
									HAL_FLASH_Unlock();
 800ae38:	f006 f884 	bl	8010f44 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	2b22      	cmp	r3, #34	; 0x22
 800ae40:	d012      	beq.n	800ae68 <PxMessagingTask+0x1438>
									if (responseStatus == BOS_OK)
 800ae42:	4b8c      	ldr	r3, [pc, #560]	; (800b074 <PxMessagingTask+0x1644>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d129      	bne.n	800ae9e <PxMessagingTask+0x146e>
										switch (cMessage[port-1][1+shift])															// Requested format
 800ae4a:	2238      	movs	r2, #56	; 0x38
 800ae4c:	4362      	muls	r2, r4
 800ae4e:	4b8c      	ldr	r3, [pc, #560]	; (800b080 <PxMessagingTask+0x1650>)
 800ae50:	189b      	adds	r3, r3, r2
 800ae52:	4443      	add	r3, r8
 800ae54:	785b      	ldrb	r3, [r3, #1]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	2a07      	cmp	r2, #7
 800ae5c:	d81f      	bhi.n	800ae9e <PxMessagingTask+0x146e>
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4a8a      	ldr	r2, [pc, #552]	; (800b08c <PxMessagingTask+0x165c>)
 800ae64:	58d3      	ldr	r3, [r2, r3]
 800ae66:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800ae6c:	9514      	str	r5, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800ae72:	a912      	add	r1, sp, #72	; 0x48
 800ae74:	a813      	add	r0, sp, #76	; 0x4c
 800ae76:	f006 f93b 	bl	80110f0 <HAL_FLASHEx_Erase>
 800ae7a:	900d      	str	r0, [sp, #52]	; 0x34
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d102      	bne.n	800ae86 <PxMessagingTask+0x1456>
 800ae80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae82:	3301      	adds	r3, #1
 800ae84:	d0dd      	beq.n	800ae42 <PxMessagingTask+0x1412>
 800ae86:	4b7b      	ldr	r3, [pc, #492]	; (800b074 <PxMessagingTask+0x1644>)
 800ae88:	2216      	movs	r2, #22
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	e7d9      	b.n	800ae42 <PxMessagingTask+0x1412>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800ae8e:	882b      	ldrh	r3, [r5, #0]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4a7f      	ldr	r2, [pc, #508]	; (800b090 <PxMessagingTask+0x1660>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d00c      	beq.n	800aeb2 <PxMessagingTask+0x1482>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ae98:	4b76      	ldr	r3, [pc, #472]	; (800b074 <PxMessagingTask+0x1644>)
 800ae9a:	2216      	movs	r2, #22
 800ae9c:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800ae9e:	f006 f865 	bl	8010f6c <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800aea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d100      	bne.n	800aeaa <PxMessagingTask+0x147a>
 800aea8:	e721      	b.n	800acee <PxMessagingTask+0x12be>
 800aeaa:	4b72      	ldr	r3, [pc, #456]	; (800b074 <PxMessagingTask+0x1644>)
 800aeac:	2216      	movs	r2, #22
 800aeae:	701a      	strb	r2, [r3, #0]
 800aeb0:	e71d      	b.n	800acee <PxMessagingTask+0x12be>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800aeb2:	2238      	movs	r2, #56	; 0x38
 800aeb4:	4362      	muls	r2, r4
 800aeb6:	4b72      	ldr	r3, [pc, #456]	; (800b080 <PxMessagingTask+0x1650>)
 800aeb8:	189b      	adds	r3, r3, r2
 800aeba:	4443      	add	r3, r8
 800aebc:	799a      	ldrb	r2, [r3, #6]
 800aebe:	2300      	movs	r3, #0
 800aec0:	4971      	ldr	r1, [pc, #452]	; (800b088 <PxMessagingTask+0x1658>)
 800aec2:	600a      	str	r2, [r1, #0]
 800aec4:	604b      	str	r3, [r1, #4]
 800aec6:	0029      	movs	r1, r5
 800aec8:	2001      	movs	r0, #1
 800aeca:	f006 f887 	bl	8010fdc <HAL_FLASH_Program>
 800aece:	900d      	str	r0, [sp, #52]	; 0x34
 800aed0:	e7e5      	b.n	800ae9e <PxMessagingTask+0x146e>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800aed2:	882b      	ldrh	r3, [r5, #0]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4a6e      	ldr	r2, [pc, #440]	; (800b090 <PxMessagingTask+0x1660>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d003      	beq.n	800aee4 <PxMessagingTask+0x14b4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800aedc:	4b65      	ldr	r3, [pc, #404]	; (800b074 <PxMessagingTask+0x1644>)
 800aede:	2216      	movs	r2, #22
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	e7dc      	b.n	800ae9e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800aee4:	2238      	movs	r2, #56	; 0x38
 800aee6:	4362      	muls	r2, r4
 800aee8:	4b65      	ldr	r3, [pc, #404]	; (800b080 <PxMessagingTask+0x1650>)
 800aeea:	189b      	adds	r3, r3, r2
 800aeec:	4443      	add	r3, r8
 800aeee:	79da      	ldrb	r2, [r3, #7]
 800aef0:	0212      	lsls	r2, r2, #8
 800aef2:	799b      	ldrb	r3, [r3, #6]
 800aef4:	18d2      	adds	r2, r2, r3
 800aef6:	2300      	movs	r3, #0
 800aef8:	4963      	ldr	r1, [pc, #396]	; (800b088 <PxMessagingTask+0x1658>)
 800aefa:	600a      	str	r2, [r1, #0]
 800aefc:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800aefe:	0029      	movs	r1, r5
 800af00:	2001      	movs	r0, #1
 800af02:	f006 f86b 	bl	8010fdc <HAL_FLASH_Program>
 800af06:	900d      	str	r0, [sp, #52]	; 0x34
 800af08:	e7c9      	b.n	800ae9e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	d003      	beq.n	800af18 <PxMessagingTask+0x14e8>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800af10:	4b58      	ldr	r3, [pc, #352]	; (800b074 <PxMessagingTask+0x1644>)
 800af12:	2216      	movs	r2, #22
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e7c2      	b.n	800ae9e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800af18:	2238      	movs	r2, #56	; 0x38
 800af1a:	4362      	muls	r2, r4
 800af1c:	4b58      	ldr	r3, [pc, #352]	; (800b080 <PxMessagingTask+0x1650>)
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	4443      	add	r3, r8
 800af22:	79da      	ldrb	r2, [r3, #7]
 800af24:	0212      	lsls	r2, r2, #8
 800af26:	7a19      	ldrb	r1, [r3, #8]
 800af28:	0409      	lsls	r1, r1, #16
 800af2a:	1852      	adds	r2, r2, r1
 800af2c:	7999      	ldrb	r1, [r3, #6]
 800af2e:	1852      	adds	r2, r2, r1
 800af30:	7a5b      	ldrb	r3, [r3, #9]
 800af32:	061b      	lsls	r3, r3, #24
 800af34:	18d2      	adds	r2, r2, r3
 800af36:	2300      	movs	r3, #0
 800af38:	4953      	ldr	r1, [pc, #332]	; (800b088 <PxMessagingTask+0x1658>)
 800af3a:	600a      	str	r2, [r1, #0]
 800af3c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800af3e:	0029      	movs	r1, r5
 800af40:	2002      	movs	r0, #2
 800af42:	f006 f84b 	bl	8010fdc <HAL_FLASH_Program>
 800af46:	900d      	str	r0, [sp, #52]	; 0x34
 800af48:	e7a9      	b.n	800ae9e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	d003      	beq.n	800af58 <PxMessagingTask+0x1528>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800af50:	4b48      	ldr	r3, [pc, #288]	; (800b074 <PxMessagingTask+0x1644>)
 800af52:	2216      	movs	r2, #22
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	e7a2      	b.n	800ae9e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800af58:	2238      	movs	r2, #56	; 0x38
 800af5a:	4362      	muls	r2, r4
 800af5c:	4b48      	ldr	r3, [pc, #288]	; (800b080 <PxMessagingTask+0x1650>)
 800af5e:	189b      	adds	r3, r3, r2
 800af60:	4443      	add	r3, r8
 800af62:	79da      	ldrb	r2, [r3, #7]
 800af64:	0212      	lsls	r2, r2, #8
 800af66:	7a19      	ldrb	r1, [r3, #8]
 800af68:	0409      	lsls	r1, r1, #16
 800af6a:	1852      	adds	r2, r2, r1
 800af6c:	7999      	ldrb	r1, [r3, #6]
 800af6e:	1852      	adds	r2, r2, r1
 800af70:	7a5b      	ldrb	r3, [r3, #9]
 800af72:	061b      	lsls	r3, r3, #24
 800af74:	18d2      	adds	r2, r2, r3
 800af76:	2300      	movs	r3, #0
 800af78:	4943      	ldr	r1, [pc, #268]	; (800b088 <PxMessagingTask+0x1658>)
 800af7a:	600a      	str	r2, [r1, #0]
 800af7c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800af7e:	0029      	movs	r1, r5
 800af80:	2003      	movs	r0, #3
 800af82:	f006 f82b 	bl	8010fdc <HAL_FLASH_Program>
 800af86:	900d      	str	r0, [sp, #52]	; 0x34
 800af88:	e789      	b.n	800ae9e <PxMessagingTask+0x146e>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800af8a:	4b3d      	ldr	r3, [pc, #244]	; (800b080 <PxMessagingTask+0x1650>)
 800af8c:	199b      	adds	r3, r3, r6
 800af8e:	5d5a      	ldrb	r2, [r3, r5]
 800af90:	4b38      	ldr	r3, [pc, #224]	; (800b074 <PxMessagingTask+0x1644>)
 800af92:	701a      	strb	r2, [r3, #0]
							break;	
 800af94:	2300      	movs	r3, #0
 800af96:	469a      	mov	sl, r3
 800af98:	f7fe fd83 	bl	8009aa2 <PxMessagingTask+0x72>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800af9c:	4652      	mov	r2, sl
 800af9e:	3a01      	subs	r2, #1
 800afa0:	b292      	uxth	r2, r2
 800afa2:	1c69      	adds	r1, r5, #1
 800afa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa6:	469c      	mov	ip, r3
 800afa8:	4461      	add	r1, ip
 800afaa:	4b35      	ldr	r3, [pc, #212]	; (800b080 <PxMessagingTask+0x1650>)
 800afac:	18c9      	adds	r1, r1, r3
 800afae:	199b      	adds	r3, r3, r6
 800afb0:	5d58      	ldrb	r0, [r3, r5]
 800afb2:	230a      	movs	r3, #10
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	f002 fc27 	bl	800d808 <writePxMutex>
							break;
 800afba:	2300      	movs	r3, #0
 800afbc:	469a      	mov	sl, r3
 800afbe:	f7fe fd70 	bl	8009aa2 <PxMessagingTask+0x72>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800afc2:	9500      	str	r5, [sp, #0]
 800afc4:	4643      	mov	r3, r8
 800afc6:	9a07      	ldr	r2, [sp, #28]
 800afc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afca:	4648      	mov	r0, r9
 800afcc:	f7fe fd2e 	bl	8009a2c <User_MessagingParser>
 800afd0:	4682      	mov	sl, r0
							if (result == BOS_ERR_UnknownMessage) {
 800afd2:	2801      	cmp	r0, #1
 800afd4:	d001      	beq.n	800afda <PxMessagingTask+0x15aa>
 800afd6:	f7fe fd64 	bl	8009aa2 <PxMessagingTask+0x72>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800afda:	9500      	str	r5, [sp, #0]
 800afdc:	4643      	mov	r3, r8
 800afde:	9a07      	ldr	r2, [sp, #28]
 800afe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afe2:	4648      	mov	r0, r9
 800afe4:	f000 fcda 	bl	800b99c <Module_MessagingTask>
 800afe8:	4682      	mov	sl, r0
 800afea:	f7fe fd55 	bl	8009a98 <PxMessagingTask+0x68>
										messageParams[0] = modParam[temp-1].paramFormat;
 800afee:	2300      	movs	r3, #0
 800aff0:	469a      	mov	sl, r3
 800aff2:	f7fe fd51 	bl	8009a98 <PxMessagingTask+0x68>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	469a      	mov	sl, r3
 800affa:	f7fe fd4d 	bl	8009a98 <PxMessagingTask+0x68>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	9807      	ldr	r0, [sp, #28]
 800b004:	f7fe fa34 	bl	8009470 <SendMessageToModule>
			result = BOS_OK;			
 800b008:	2300      	movs	r3, #0
 800b00a:	469a      	mov	sl, r3
 800b00c:	f7fe fd49 	bl	8009aa2 <PxMessagingTask+0x72>
 800b010:	2300      	movs	r3, #0
 800b012:	469a      	mov	sl, r3
 800b014:	f7fe fd45 	bl	8009aa2 <PxMessagingTask+0x72>
									}
 800b018:	2300      	movs	r3, #0
 800b01a:	469a      	mov	sl, r3
 800b01c:	f7fe fd41 	bl	8009aa2 <PxMessagingTask+0x72>
 800b020:	2300      	movs	r3, #0
 800b022:	469a      	mov	sl, r3
 800b024:	f7fe fd3d 	bl	8009aa2 <PxMessagingTask+0x72>
 800b028:	4661      	mov	r1, ip
				shift += 4;
 800b02a:	9d06      	ldr	r5, [sp, #24]
 800b02c:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800b02e:	1b48      	subs	r0, r1, r5
 800b030:	b2c3      	uxtb	r3, r0
 800b032:	469a      	mov	sl, r3
				if (result == BOS_OK)
 800b034:	f7fe fdf4 	bl	8009c20 <PxMessagingTask+0x1f0>
					result = BOS_ERR_WrongID;
 800b038:	2366      	movs	r3, #102	; 0x66
 800b03a:	469a      	mov	sl, r3
		if (result == BOS_ERR_UnknownMessage) {
 800b03c:	f7fe fd31 	bl	8009aa2 <PxMessagingTask+0x72>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800b040:	2338      	movs	r3, #56	; 0x38
 800b042:	4363      	muls	r3, r4
 800b044:	4a0e      	ldr	r2, [pc, #56]	; (800b080 <PxMessagingTask+0x1650>)
 800b046:	18d2      	adds	r2, r2, r3
 800b048:	4643      	mov	r3, r8
 800b04a:	5cd3      	ldrb	r3, [r2, r3]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	0098      	lsls	r0, r3, #2
 800b050:	4907      	ldr	r1, [pc, #28]	; (800b070 <PxMessagingTask+0x1640>)
 800b052:	5841      	ldr	r1, [r0, r1]
 800b054:	4648      	mov	r0, r9
 800b056:	5c12      	ldrb	r2, [r2, r0]
 800b058:	e568      	b.n	800ab2c <PxMessagingTask+0x10fc>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800b05a:	4543      	cmp	r3, r8
 800b05c:	d101      	bne.n	800b062 <PxMessagingTask+0x1632>
 800b05e:	f7fe fdd4 	bl	8009c0a <PxMessagingTask+0x1da>
 800b062:	464b      	mov	r3, r9
 800b064:	2b10      	cmp	r3, #16
 800b066:	d001      	beq.n	800b06c <PxMessagingTask+0x163c>
 800b068:	f7fe fd65 	bl	8009b36 <PxMessagingTask+0x106>
 800b06c:	f7fe fdcd 	bl	8009c0a <PxMessagingTask+0x1da>
 800b070:	20006858 	.word	0x20006858
 800b074:	200010d8 	.word	0x200010d8
 800b078:	200068d0 	.word	0x200068d0
 800b07c:	20000f08 	.word	0x20000f08
 800b080:	20000d10 	.word	0x20000d10
 800b084:	0801c4fc 	.word	0x0801c4fc
 800b088:	200010d0 	.word	0x200010d0
 800b08c:	0801c51c 	.word	0x0801c51c
 800b090:	0000ffff 	.word	0x0000ffff

0800b094 <ledModeCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b094:	b530      	push	{r4, r5, lr}
 800b096:	b083      	sub	sp, #12
 800b098:	0005      	movs	r5, r0
 800b09a:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b09c:	2300      	movs	r3, #0
 800b09e:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	d01a      	beq.n	800b0da <ledModeCommand+0x46>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b0a4:	aa01      	add	r2, sp, #4
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	f002 fe04 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 800b0ac:	0004      	movs	r4, r0
								(
									pcCommandString,		/* The command string itself. */
									1,						/* Return the first parameter. */
									&xParameterStringLength1	/* Store the parameter string length. */
								);
	if (!strcmp( ( char * ) pcParameterString1, "on") || !strcmp( ( char * ) pcParameterString1, "ON"))
 800b0ae:	4919      	ldr	r1, [pc, #100]	; (800b114 <ledModeCommand+0x80>)
 800b0b0:	f7f5 f828 	bl	8000104 <strcmp>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d005      	beq.n	800b0c4 <ledModeCommand+0x30>
 800b0b8:	4917      	ldr	r1, [pc, #92]	; (800b118 <ledModeCommand+0x84>)
 800b0ba:	0020      	movs	r0, r4
 800b0bc:	f7f5 f822 	bl	8000104 <strcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d10c      	bne.n	800b0de <ledModeCommand+0x4a>
		RelayindMode = 1;
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <ledModeCommand+0x88>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	701a      	strb	r2, [r3, #0]
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
		RelayindMode = 0;
	
	/* Respond to the command */
	if (RelayindMode) {
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800b0ca:	222d      	movs	r2, #45	; 0x2d
 800b0cc:	4914      	ldr	r1, [pc, #80]	; (800b120 <ledModeCommand+0x8c>)
 800b0ce:	0028      	movs	r0, r5
 800b0d0:	f008 fc86 	bl	80139e0 <memcpy>

	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	b003      	add	sp, #12
 800b0d8:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800b0da:	b672      	cpsid	i
 800b0dc:	e7fe      	b.n	800b0dc <ledModeCommand+0x48>
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
 800b0de:	4911      	ldr	r1, [pc, #68]	; (800b124 <ledModeCommand+0x90>)
 800b0e0:	0020      	movs	r0, r4
 800b0e2:	f7f5 f80f 	bl	8000104 <strcmp>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d005      	beq.n	800b0f6 <ledModeCommand+0x62>
 800b0ea:	490f      	ldr	r1, [pc, #60]	; (800b128 <ledModeCommand+0x94>)
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	f7f5 f809 	bl	8000104 <strcmp>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d103      	bne.n	800b0fe <ledModeCommand+0x6a>
		RelayindMode = 0;
 800b0f6:	4b09      	ldr	r3, [pc, #36]	; (800b11c <ledModeCommand+0x88>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	701a      	strb	r2, [r3, #0]
	if (RelayindMode) {
 800b0fc:	e003      	b.n	800b106 <ledModeCommand+0x72>
 800b0fe:	4b07      	ldr	r3, [pc, #28]	; (800b11c <ledModeCommand+0x88>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e1      	bne.n	800b0ca <ledModeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800b106:	222e      	movs	r2, #46	; 0x2e
 800b108:	4908      	ldr	r1, [pc, #32]	; (800b12c <ledModeCommand+0x98>)
 800b10a:	0028      	movs	r0, r5
 800b10c:	f008 fc68 	bl	80139e0 <memcpy>
 800b110:	e7e0      	b.n	800b0d4 <ledModeCommand+0x40>
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	0801b910 	.word	0x0801b910
 800b118:	0801c53c 	.word	0x0801c53c
 800b11c:	200016a1 	.word	0x200016a1
 800b120:	0801c548 	.word	0x0801c548
 800b124:	0801c540 	.word	0x0801c540
 800b128:	0801c544 	.word	0x0801c544
 800b12c:	0801c578 	.word	0x0801c578

0800b130 <SystemClock_Config>:
{
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b134:	2401      	movs	r4, #1
 800b136:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b138:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b13a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b13c:	2310      	movs	r3, #16
 800b13e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b140:	2702      	movs	r7, #2
 800b142:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b144:	2680      	movs	r6, #128	; 0x80
 800b146:	0276      	lsls	r6, r6, #9
 800b148:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b14a:	2380      	movs	r3, #128	; 0x80
 800b14c:	035b      	lsls	r3, r3, #13
 800b14e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b150:	2500      	movs	r5, #0
 800b152:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b154:	a80d      	add	r0, sp, #52	; 0x34
 800b156:	f006 f933 	bl	80113c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b15a:	2307      	movs	r3, #7
 800b15c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b15e:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b160:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b162:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b164:	2101      	movs	r1, #1
 800b166:	a809      	add	r0, sp, #36	; 0x24
 800b168:	f006 fbee 	bl	8011948 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b16c:	4b1a      	ldr	r3, [pc, #104]	; (800b1d8 <SystemClock_Config+0xa8>)
 800b16e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b170:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b172:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b174:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b176:	a802      	add	r0, sp, #8
 800b178:	f006 fd96 	bl	8011ca8 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b17c:	4d17      	ldr	r5, [pc, #92]	; (800b1dc <SystemClock_Config+0xac>)
 800b17e:	69ea      	ldr	r2, [r5, #28]
 800b180:	2180      	movs	r1, #128	; 0x80
 800b182:	0549      	lsls	r1, r1, #21
 800b184:	430a      	orrs	r2, r1
 800b186:	61ea      	str	r2, [r5, #28]
 800b188:	69eb      	ldr	r3, [r5, #28]
 800b18a:	400b      	ands	r3, r1
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b190:	f006 f90c 	bl	80113ac <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b194:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b196:	23c0      	movs	r3, #192	; 0xc0
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b19c:	a802      	add	r0, sp, #8
 800b19e:	f006 fd83 	bl	8011ca8 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b1a2:	f006 fd5d 	bl	8011c60 <HAL_RCC_GetHCLKFreq>
 800b1a6:	21fa      	movs	r1, #250	; 0xfa
 800b1a8:	0089      	lsls	r1, r1, #2
 800b1aa:	f7f4 ffd1 	bl	8000150 <__udivsi3>
 800b1ae:	f005 f871 	bl	8010294 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b1b2:	2004      	movs	r0, #4
 800b1b4:	f005 f88a 	bl	80102cc <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b1b8:	69ab      	ldr	r3, [r5, #24]
 800b1ba:	4323      	orrs	r3, r4
 800b1bc:	61ab      	str	r3, [r5, #24]
 800b1be:	69ab      	ldr	r3, [r5, #24]
 800b1c0:	401c      	ands	r4, r3
 800b1c2:	9401      	str	r4, [sp, #4]
 800b1c4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4240      	negs	r0, r0
 800b1ce:	f005 f81b 	bl	8010208 <HAL_NVIC_SetPriority>
}
 800b1d2:	b01b      	add	sp, #108	; 0x6c
 800b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	00040003 	.word	0x00040003
 800b1dc:	40021000 	.word	0x40021000

0800b1e0 <SaveToRO>:
{
 800b1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1e2:	46de      	mov	lr, fp
 800b1e4:	4657      	mov	r7, sl
 800b1e6:	464e      	mov	r6, r9
 800b1e8:	4645      	mov	r5, r8
 800b1ea:	b5e0      	push	{r5, r6, r7, lr}
 800b1ec:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9302      	str	r3, [sp, #8]
 800b1f2:	2211      	movs	r2, #17
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	a803      	add	r0, sp, #12
 800b1f8:	f008 fbfb 	bl	80139f2 <memset>
	HAL_FLASH_Unlock();
 800b1fc:	f005 fea2 	bl	8010f44 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b200:	487c      	ldr	r0, [pc, #496]	; (800b3f4 <SaveToRO+0x214>)
 800b202:	f005 ff63 	bl	80110cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b206:	487c      	ldr	r0, [pc, #496]	; (800b3f8 <SaveToRO+0x218>)
 800b208:	f005 feba 	bl	8010f80 <FLASH_WaitForLastOperation>
 800b20c:	9000      	str	r0, [sp, #0]
 800b20e:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800b210:	2800      	cmp	r0, #0
 800b212:	d112      	bne.n	800b23a <SaveToRO+0x5a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b214:	4a79      	ldr	r2, [pc, #484]	; (800b3fc <SaveToRO+0x21c>)
 800b216:	6913      	ldr	r3, [r2, #16]
 800b218:	2102      	movs	r1, #2
 800b21a:	438b      	bics	r3, r1
 800b21c:	6113      	str	r3, [r2, #16]
	if (myID)
 800b21e:	4b78      	ldr	r3, [pc, #480]	; (800b400 <SaveToRO+0x220>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d115      	bne.n	800b252 <SaveToRO+0x72>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b226:	4b77      	ldr	r3, [pc, #476]	; (800b404 <SaveToRO+0x224>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d100      	bne.n	800b230 <SaveToRO+0x50>
 800b22e:	e0dd      	b.n	800b3ec <SaveToRO+0x20c>
 800b230:	9d00      	ldr	r5, [sp, #0]
 800b232:	4e75      	ldr	r6, [pc, #468]	; (800b408 <SaveToRO+0x228>)
		if (snippets[s].cond.conditionType) 
 800b234:	4b75      	ldr	r3, [pc, #468]	; (800b40c <SaveToRO+0x22c>)
 800b236:	469a      	mov	sl, r3
 800b238:	e092      	b.n	800b360 <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800b23a:	4b75      	ldr	r3, [pc, #468]	; (800b410 <SaveToRO+0x230>)
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	9301      	str	r3, [sp, #4]
}
 800b242:	9801      	ldr	r0, [sp, #4]
 800b244:	b009      	add	sp, #36	; 0x24
 800b246:	bcf0      	pop	{r4, r5, r6, r7}
 800b248:	46bb      	mov	fp, r7
 800b24a:	46b2      	mov	sl, r6
 800b24c:	46a9      	mov	r9, r5
 800b24e:	46a0      	mov	r8, r4
 800b250:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b252:	4a70      	ldr	r2, [pc, #448]	; (800b414 <SaveToRO+0x234>)
 800b254:	7812      	ldrb	r2, [r2, #0]
 800b256:	0212      	lsls	r2, r2, #8
 800b258:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b25a:	b292      	uxth	r2, r2
 800b25c:	2300      	movs	r3, #0
 800b25e:	4965      	ldr	r1, [pc, #404]	; (800b3f4 <SaveToRO+0x214>)
 800b260:	2001      	movs	r0, #1
 800b262:	f005 febb 	bl	8010fdc <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b266:	4864      	ldr	r0, [pc, #400]	; (800b3f8 <SaveToRO+0x218>)
 800b268:	f005 fe8a 	bl	8010f80 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d111      	bne.n	800b294 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b270:	4a62      	ldr	r2, [pc, #392]	; (800b3fc <SaveToRO+0x21c>)
 800b272:	6913      	ldr	r3, [r2, #16]
 800b274:	2101      	movs	r1, #1
 800b276:	438b      	bics	r3, r1
 800b278:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b27a:	4b66      	ldr	r3, [pc, #408]	; (800b414 <SaveToRO+0x234>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2201      	movs	r2, #1
 800b280:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b282:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b284:	2b00      	cmp	r3, #0
 800b286:	d0ce      	beq.n	800b226 <SaveToRO+0x46>
 800b288:	2316      	movs	r3, #22
 800b28a:	469b      	mov	fp, r3
 800b28c:	4b62      	ldr	r3, [pc, #392]	; (800b418 <SaveToRO+0x238>)
 800b28e:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b290:	4698      	mov	r8, r3
 800b292:	e02c      	b.n	800b2ee <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800b294:	4b5e      	ldr	r3, [pc, #376]	; (800b410 <SaveToRO+0x230>)
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	e7d1      	b.n	800b242 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800b29e:	4b5c      	ldr	r3, [pc, #368]	; (800b410 <SaveToRO+0x230>)
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	e7cc      	b.n	800b242 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b2a8:	3402      	adds	r4, #2
 800b2aa:	42b4      	cmp	r4, r6
 800b2ac:	d017      	beq.n	800b2de <SaveToRO+0xfe>
				if (array[i-1][0]) {
 800b2ae:	4643      	mov	r3, r8
 800b2b0:	5afb      	ldrh	r3, [r7, r3]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0f8      	beq.n	800b2a8 <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b2b6:	8822      	ldrh	r2, [r4, #0]
 800b2b8:	4b4e      	ldr	r3, [pc, #312]	; (800b3f4 <SaveToRO+0x214>)
 800b2ba:	18e9      	adds	r1, r5, r3
 800b2bc:	2300      	movs	r3, #0
 800b2be:	2001      	movs	r0, #1
 800b2c0:	f005 fe8c 	bl	8010fdc <HAL_FLASH_Program>
					add += 2;
 800b2c4:	3502      	adds	r5, #2
 800b2c6:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b2c8:	484b      	ldr	r0, [pc, #300]	; (800b3f8 <SaveToRO+0x218>)
 800b2ca:	f005 fe59 	bl	8010f80 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d1e5      	bne.n	800b29e <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b2d2:	4a4a      	ldr	r2, [pc, #296]	; (800b3fc <SaveToRO+0x21c>)
 800b2d4:	6913      	ldr	r3, [r2, #16]
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	438b      	bics	r3, r1
 800b2da:	6113      	str	r3, [r2, #16]
 800b2dc:	e7e4      	b.n	800b2a8 <SaveToRO+0xc8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b2de:	464b      	mov	r3, r9
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	4699      	mov	r9, r3
 800b2e6:	4b4b      	ldr	r3, [pc, #300]	; (800b414 <SaveToRO+0x234>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	454b      	cmp	r3, r9
 800b2ec:	d39b      	bcc.n	800b226 <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b2ee:	465e      	mov	r6, fp
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	435e      	muls	r6, r3
 800b2f4:	0034      	movs	r4, r6
 800b2f6:	3c16      	subs	r4, #22
 800b2f8:	4454      	add	r4, sl
 800b2fa:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b2fc:	1e5f      	subs	r7, r3, #1
 800b2fe:	465b      	mov	r3, fp
 800b300:	435f      	muls	r7, r3
 800b302:	e7d4      	b.n	800b2ae <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800b304:	4b42      	ldr	r3, [pc, #264]	; (800b410 <SaveToRO+0x230>)
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	e799      	b.n	800b242 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b30e:	4643      	mov	r3, r8
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	2201      	movs	r2, #1
 800b314:	4393      	bics	r3, r2
 800b316:	4642      	mov	r2, r8
 800b318:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b31a:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b31c:	3401      	adds	r4, #1
 800b31e:	b2e4      	uxtb	r4, r4
 800b320:	68ef      	ldr	r7, [r5, #12]
 800b322:	0038      	movs	r0, r7
 800b324:	f7f4 fef8 	bl	8000118 <strlen>
 800b328:	3001      	adds	r0, #1
 800b32a:	0840      	lsrs	r0, r0, #1
 800b32c:	4284      	cmp	r4, r0
 800b32e:	d210      	bcs.n	800b352 <SaveToRO+0x172>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b330:	0063      	lsls	r3, r4, #1
 800b332:	5afa      	ldrh	r2, [r7, r3]
 800b334:	2300      	movs	r3, #0
 800b336:	0031      	movs	r1, r6
 800b338:	2001      	movs	r0, #1
 800b33a:	f005 fe4f 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b33e:	4658      	mov	r0, fp
 800b340:	f005 fe1e 	bl	8010f80 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b344:	2800      	cmp	r0, #0
 800b346:	d0e2      	beq.n	800b30e <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800b348:	4b31      	ldr	r3, [pc, #196]	; (800b410 <SaveToRO+0x230>)
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	e777      	b.n	800b242 <SaveToRO+0x62>
 800b352:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b354:	3501      	adds	r5, #1
 800b356:	b2ed      	uxtb	r5, r5
 800b358:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <SaveToRO+0x224>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	d945      	bls.n	800b3ec <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) 
 800b360:	9500      	str	r5, [sp, #0]
 800b362:	00ab      	lsls	r3, r5, #2
 800b364:	195b      	adds	r3, r3, r5
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4652      	mov	r2, sl
 800b36a:	5c9b      	ldrb	r3, [r3, r2]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d0f1      	beq.n	800b354 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b370:	23fe      	movs	r3, #254	; 0xfe
 800b372:	aa02      	add	r2, sp, #8
 800b374:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b376:	00a9      	lsls	r1, r5, #2
 800b378:	1949      	adds	r1, r1, r5
 800b37a:	0089      	lsls	r1, r1, #2
 800b37c:	4b23      	ldr	r3, [pc, #140]	; (800b40c <SaveToRO+0x22c>)
 800b37e:	469c      	mov	ip, r3
 800b380:	4461      	add	r1, ip
 800b382:	2214      	movs	r2, #20
 800b384:	ab02      	add	r3, sp, #8
 800b386:	1c58      	adds	r0, r3, #1
 800b388:	f008 fb2a 	bl	80139e0 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b38c:	2314      	movs	r3, #20
 800b38e:	469b      	mov	fp, r3
 800b390:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b392:	ab02      	add	r3, sp, #8
 800b394:	1b9b      	subs	r3, r3, r6
 800b396:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b398:	4b17      	ldr	r3, [pc, #92]	; (800b3f8 <SaveToRO+0x218>)
 800b39a:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b39c:	4f17      	ldr	r7, [pc, #92]	; (800b3fc <SaveToRO+0x21c>)
 800b39e:	4644      	mov	r4, r8
 800b3a0:	46a8      	mov	r8, r5
 800b3a2:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b3a4:	5ba2      	ldrh	r2, [r4, r6]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	0031      	movs	r1, r6
 800b3aa:	2001      	movs	r0, #1
 800b3ac:	f005 fe16 	bl	8010fdc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b3b0:	4648      	mov	r0, r9
 800b3b2:	f005 fde5 	bl	8010f80 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d1a4      	bne.n	800b304 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	4393      	bics	r3, r2
 800b3c0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b3c2:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b3c4:	42b5      	cmp	r5, r6
 800b3c6:	d1ed      	bne.n	800b3a4 <SaveToRO+0x1c4>
 800b3c8:	0004      	movs	r4, r0
 800b3ca:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b3cc:	9a00      	ldr	r2, [sp, #0]
 800b3ce:	0093      	lsls	r3, r2, #2
 800b3d0:	4694      	mov	ip, r2
 800b3d2:	4463      	add	r3, ip
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <SaveToRO+0x22c>)
 800b3d8:	4691      	mov	r9, r2
 800b3da:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b3dc:	4b06      	ldr	r3, [pc, #24]	; (800b3f8 <SaveToRO+0x218>)
 800b3de:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <SaveToRO+0x21c>)
 800b3e2:	4698      	mov	r8, r3
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	46a9      	mov	r9, r5
 800b3e8:	001d      	movs	r5, r3
 800b3ea:	e799      	b.n	800b320 <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800b3ec:	f005 fdbe 	bl	8010f6c <HAL_FLASH_Lock>
	return result;
 800b3f0:	e727      	b.n	800b242 <SaveToRO+0x62>
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	0801d800 	.word	0x0801d800
 800b3f8:	0000c350 	.word	0x0000c350
 800b3fc:	40022000 	.word	0x40022000
 800b400:	20001046 	.word	0x20001046
 800b404:	200011e7 	.word	0x200011e7
 800b408:	0801dc00 	.word	0x0801dc00
 800b40c:	200068ec 	.word	0x200068ec
 800b410:	20006da0 	.word	0x20006da0
 800b414:	2000001c 	.word	0x2000001c
 800b418:	20000a80 	.word	0x20000a80

0800b41c <ClearROtopology>:
{
 800b41c:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b41e:	228f      	movs	r2, #143	; 0x8f
 800b420:	0092      	lsls	r2, r2, #2
 800b422:	2100      	movs	r1, #0
 800b424:	4805      	ldr	r0, [pc, #20]	; (800b43c <ClearROtopology+0x20>)
 800b426:	f008 fae4 	bl	80139f2 <memset>
	N = 1; myID = 0;
 800b42a:	4b05      	ldr	r3, [pc, #20]	; (800b440 <ClearROtopology+0x24>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <ClearROtopology+0x28>)
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b436:	f7ff fed3 	bl	800b1e0 <SaveToRO>
}
 800b43a:	bd10      	pop	{r4, pc}
 800b43c:	20000a80 	.word	0x20000a80
 800b440:	2000001c 	.word	0x2000001c
 800b444:	20001046 	.word	0x20001046

0800b448 <Module_Init>:
{	
 800b448:	b500      	push	{lr}
 800b44a:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 800b44c:	f002 f830 	bl	800d4b0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b450:	f002 f846 	bl	800d4e0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b454:	f002 f85c 	bl	800d510 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800b458:	f002 f872 	bl	800d540 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b45c:	f002 f888 	bl	800d570 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800b460:	f000 fb42 	bl	800bae8 <MX_ADC_Init>
	xTimerRelay = xTimerCreate( "RelayTimer", pdMS_TO_TICKS(1000), pdFALSE, ( void * ) 1, RelayTimerCallback );	
 800b464:	21fa      	movs	r1, #250	; 0xfa
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <Module_Init+0x3c>)
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	2301      	movs	r3, #1
 800b46c:	2200      	movs	r2, #0
 800b46e:	0089      	lsls	r1, r1, #2
 800b470:	4805      	ldr	r0, [pc, #20]	; (800b488 <Module_Init+0x40>)
 800b472:	f004 f833 	bl	800f4dc <xTimerCreate>
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <Module_Init+0x44>)
 800b478:	6018      	str	r0, [r3, #0]
	Relay_Init();
 800b47a:	f001 fc61 	bl	800cd40 <Relay_Init>
}
 800b47e:	b003      	add	sp, #12
 800b480:	bd00      	pop	{pc}
 800b482:	46c0      	nop			; (mov r8, r8)
 800b484:	0800b879 	.word	0x0800b879
 800b488:	0801c5a8 	.word	0x0801c5a8
 800b48c:	200016a4 	.word	0x200016a4

0800b490 <RegisterModuleCLICommands>:
{
 800b490:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &onCommandDefinition );
 800b492:	4809      	ldr	r0, [pc, #36]	; (800b4b8 <RegisterModuleCLICommands+0x28>)
 800b494:	f002 fb64 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &offCommandDefinition );
 800b498:	4808      	ldr	r0, [pc, #32]	; (800b4bc <RegisterModuleCLICommands+0x2c>)
 800b49a:	f002 fb61 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &toggleCommandDefinition );
 800b49e:	4808      	ldr	r0, [pc, #32]	; (800b4c0 <RegisterModuleCLICommands+0x30>)
 800b4a0:	f002 fb5e 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &ledModeCommandDefinition );
 800b4a4:	4807      	ldr	r0, [pc, #28]	; (800b4c4 <RegisterModuleCLICommands+0x34>)
 800b4a6:	f002 fb5b 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pwmCommandDefinition );
 800b4aa:	4807      	ldr	r0, [pc, #28]	; (800b4c8 <RegisterModuleCLICommands+0x38>)
 800b4ac:	f002 fb58 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &currentCalculationCommandDefinition );
 800b4b0:	4806      	ldr	r0, [pc, #24]	; (800b4cc <RegisterModuleCLICommands+0x3c>)
 800b4b2:	f002 fb55 	bl	800db60 <FreeRTOS_CLIRegisterCommand>
}
 800b4b6:	bd10      	pop	{r4, pc}
 800b4b8:	0801c924 	.word	0x0801c924
 800b4bc:	0801c914 	.word	0x0801c914
 800b4c0:	0801c944 	.word	0x0801c944
 800b4c4:	0801c904 	.word	0x0801c904
 800b4c8:	0801c934 	.word	0x0801c934
 800b4cc:	0801c8f4 	.word	0x0801c8f4

0800b4d0 <GetPort>:
	if (huart->Instance == USART5)
 800b4d0:	6800      	ldr	r0, [r0, #0]
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <GetPort+0x40>)
 800b4d4:	4298      	cmp	r0, r3
 800b4d6:	d012      	beq.n	800b4fe <GetPort+0x2e>
	else if (huart->Instance == USART2)
 800b4d8:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <GetPort+0x44>)
 800b4da:	4298      	cmp	r0, r3
 800b4dc:	d011      	beq.n	800b502 <GetPort+0x32>
	else if (huart->Instance == USART6)
 800b4de:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <GetPort+0x48>)
 800b4e0:	4298      	cmp	r0, r3
 800b4e2:	d010      	beq.n	800b506 <GetPort+0x36>
	else if (huart->Instance == USART3)
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <GetPort+0x4c>)
 800b4e6:	4298      	cmp	r0, r3
 800b4e8:	d00f      	beq.n	800b50a <GetPort+0x3a>
			return P5;
 800b4ea:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <GetPort+0x50>)
 800b4ec:	469c      	mov	ip, r3
 800b4ee:	4460      	add	r0, ip
 800b4f0:	1e43      	subs	r3, r0, #1
 800b4f2:	4198      	sbcs	r0, r3
 800b4f4:	4240      	negs	r0, r0
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	4398      	bics	r0, r3
 800b4fa:	3005      	adds	r0, #5
}
 800b4fc:	4770      	bx	lr
			return P1;
 800b4fe:	2001      	movs	r0, #1
 800b500:	e7fc      	b.n	800b4fc <GetPort+0x2c>
			return P2;
 800b502:	2002      	movs	r0, #2
 800b504:	e7fa      	b.n	800b4fc <GetPort+0x2c>
			return P3;
 800b506:	2003      	movs	r0, #3
 800b508:	e7f8      	b.n	800b4fc <GetPort+0x2c>
			return P4;
 800b50a:	2004      	movs	r0, #4
 800b50c:	e7f6      	b.n	800b4fc <GetPort+0x2c>
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	40005000 	.word	0x40005000
 800b514:	40004400 	.word	0x40004400
 800b518:	40011400 	.word	0x40011400
 800b51c:	40004800 	.word	0x40004800
 800b520:	bffec800 	.word	0xbffec800

0800b524 <TIM3_Init>:
{
 800b524:	b530      	push	{r4, r5, lr}
 800b526:	b095      	sub	sp, #84	; 0x54
  __TIM3_CLK_ENABLE();
 800b528:	4a24      	ldr	r2, [pc, #144]	; (800b5bc <TIM3_Init+0x98>)
 800b52a:	69d1      	ldr	r1, [r2, #28]
 800b52c:	2302      	movs	r3, #2
 800b52e:	4319      	orrs	r1, r3
 800b530:	61d1      	str	r1, [r2, #28]
 800b532:	69d2      	ldr	r2, [r2, #28]
 800b534:	401a      	ands	r2, r3
 800b536:	9201      	str	r2, [sp, #4]
 800b538:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b53a:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b53c:	2500      	movs	r5, #0
 800b53e:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b540:	3301      	adds	r3, #1
 800b542:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = _Relay_PIN;
 800b544:	3b02      	subs	r3, #2
 800b546:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b548:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800b54a:	a90f      	add	r1, sp, #60	; 0x3c
 800b54c:	481c      	ldr	r0, [pc, #112]	; (800b5c0 <TIM3_Init+0x9c>)
 800b54e:	f005 fe31 	bl	80111b4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	2010      	movs	r0, #16
 800b558:	f004 fe56 	bl	8010208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b55c:	2010      	movs	r0, #16
 800b55e:	f004 fe85 	bl	801026c <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800b562:	4c18      	ldr	r4, [pc, #96]	; (800b5c4 <TIM3_Init+0xa0>)
 800b564:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <TIM3_Init+0xa4>)
 800b566:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (uint32_t)(HAL_RCC_GetSysClockFreq()/PWM_TIMER_CLOCK) - 1;
 800b568:	f006 fb2a 	bl	8011bc0 <HAL_RCC_GetSysClockFreq>
 800b56c:	4917      	ldr	r1, [pc, #92]	; (800b5cc <TIM3_Init+0xa8>)
 800b56e:	f7f4 fdef 	bl	8000150 <__udivsi3>
 800b572:	3801      	subs	r0, #1
 800b574:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b576:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800b578:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b57a:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim3);
 800b57c:	0020      	movs	r0, r4
 800b57e:	f007 f87d 	bl	801267c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b582:	2380      	movs	r3, #128	; 0x80
 800b584:	015b      	lsls	r3, r3, #5
 800b586:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b588:	a90b      	add	r1, sp, #44	; 0x2c
 800b58a:	0020      	movs	r0, r4
 800b58c:	f006 ff2e 	bl	80123ec <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim3);
 800b590:	0020      	movs	r0, r4
 800b592:	f007 f88d 	bl	80126b0 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b596:	9509      	str	r5, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b598:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b59a:	a909      	add	r1, sp, #36	; 0x24
 800b59c:	0020      	movs	r0, r4
 800b59e:	f007 f9cb 	bl	8012938 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b5a2:	2360      	movs	r3, #96	; 0x60
 800b5a4:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 800b5a6:	9503      	str	r5, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b5a8:	9504      	str	r5, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b5aa:	9506      	str	r5, [sp, #24]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Relay_TIM_CH);
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	a902      	add	r1, sp, #8
 800b5b0:	0020      	movs	r0, r4
 800b5b2:	f007 f8d7 	bl	8012764 <HAL_TIM_PWM_ConfigChannel>
}
 800b5b6:	b015      	add	sp, #84	; 0x54
 800b5b8:	bd30      	pop	{r4, r5, pc}
 800b5ba:	46c0      	nop			; (mov r8, r8)
 800b5bc:	40021000 	.word	0x40021000
 800b5c0:	48000400 	.word	0x48000400
 800b5c4:	20006a1c 	.word	0x20006a1c
 800b5c8:	40000400 	.word	0x40000400
 800b5cc:	00f42400 	.word	0x00f42400

0800b5d0 <TIM3_DeInit>:
{
 800b5d0:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800b5d2:	2010      	movs	r0, #16
 800b5d4:	f004 fe54 	bl	8010280 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800b5d8:	4c06      	ldr	r4, [pc, #24]	; (800b5f4 <TIM3_DeInit+0x24>)
 800b5da:	0020      	movs	r0, r4
 800b5dc:	f006 feb8 	bl	8012350 <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800b5e0:	0020      	movs	r0, r4
 800b5e2:	f006 fee3 	bl	80123ac <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800b5e6:	4a04      	ldr	r2, [pc, #16]	; (800b5f8 <TIM3_DeInit+0x28>)
 800b5e8:	69d3      	ldr	r3, [r2, #28]
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	438b      	bics	r3, r1
 800b5ee:	61d3      	str	r3, [r2, #28]
}
 800b5f0:	bd10      	pop	{r4, pc}
 800b5f2:	46c0      	nop			; (mov r8, r8)
 800b5f4:	20006a1c 	.word	0x20006a1c
 800b5f8:	40021000 	.word	0x40021000

0800b5fc <Set_Relay_PWM>:
{	
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	1c0d      	adds	r5, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800b600:	0001      	movs	r1, r0
 800b602:	4813      	ldr	r0, [pc, #76]	; (800b650 <Set_Relay_PWM+0x54>)
 800b604:	f7f4 fda4 	bl	8000150 <__udivsi3>
 800b608:	0004      	movs	r4, r0
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b60a:	4b12      	ldr	r3, [pc, #72]	; (800b654 <Set_Relay_PWM+0x58>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d11b      	bne.n	800b64a <Set_Relay_PWM+0x4e>
	htim3.Instance->ARR = ARR - 1;
 800b612:	4e11      	ldr	r6, [pc, #68]	; (800b658 <Set_Relay_PWM+0x5c>)
 800b614:	6837      	ldr	r7, [r6, #0]
 800b616:	1e63      	subs	r3, r4, #1
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float)dutycycle/100.0f) * ARR;
 800b61a:	4910      	ldr	r1, [pc, #64]	; (800b65c <Set_Relay_PWM+0x60>)
 800b61c:	1c28      	adds	r0, r5, #0
 800b61e:	f7f5 f945 	bl	80008ac <__aeabi_fdiv>
 800b622:	1c05      	adds	r5, r0, #0
 800b624:	0020      	movs	r0, r4
 800b626:	f7f5 fe0d 	bl	8001244 <__aeabi_ui2f>
 800b62a:	1c01      	adds	r1, r0, #0
 800b62c:	1c28      	adds	r0, r5, #0
 800b62e:	f7f5 fb07 	bl	8000c40 <__aeabi_fmul>
 800b632:	f7f4 ffc3 	bl	80005bc <__aeabi_f2uiz>
 800b636:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Relay_TIM_CH) != HAL_OK)	
 800b638:	2108      	movs	r1, #8
 800b63a:	0030      	movs	r0, r6
 800b63c:	f007 f914 	bl	8012868 <HAL_TIM_PWM_Start>
 800b640:	1e43      	subs	r3, r0, #1
 800b642:	4198      	sbcs	r0, r3
 800b644:	4240      	negs	r0, r0
 800b646:	b2c0      	uxtb	r0, r0
}
 800b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b64a:	f7ff ff6b 	bl	800b524 <TIM3_Init>
 800b64e:	e7e0      	b.n	800b612 <Set_Relay_PWM+0x16>
 800b650:	00f42400 	.word	0x00f42400
 800b654:	200016a0 	.word	0x200016a0
 800b658:	20006a1c 	.word	0x20006a1c
 800b65c:	42c80000 	.word	0x42c80000

0800b660 <Relay_on>:
{	
 800b660:	b510      	push	{r4, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	0004      	movs	r4, r0
	if (Relay_state == STATE_PWM) 
 800b666:	4b25      	ldr	r3, [pc, #148]	; (800b6fc <Relay_on+0x9c>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d012      	beq.n	800b694 <Relay_on+0x34>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_SET);
 800b66e:	2201      	movs	r2, #1
 800b670:	2101      	movs	r1, #1
 800b672:	4823      	ldr	r0, [pc, #140]	; (800b700 <Relay_on+0xa0>)
 800b674:	f005 fe8e 	bl	8011394 <HAL_GPIO_WritePin>
	if (RelayindMode) IND_ON();
 800b678:	4b22      	ldr	r3, [pc, #136]	; (800b704 <Relay_on+0xa4>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d112      	bne.n	800b6a6 <Relay_on+0x46>
	if (timeout != portMAX_DELAY) 
 800b680:	1c63      	adds	r3, r4, #1
 800b682:	d118      	bne.n	800b6b6 <Relay_on+0x56>
	Relay_state = STATE_ON; Relay_Oldstate = Relay_state;	
 800b684:	2301      	movs	r3, #1
 800b686:	4a1d      	ldr	r2, [pc, #116]	; (800b6fc <Relay_on+0x9c>)
 800b688:	7013      	strb	r3, [r2, #0]
 800b68a:	4a1f      	ldr	r2, [pc, #124]	; (800b708 <Relay_on+0xa8>)
 800b68c:	7013      	strb	r3, [r2, #0]
}
 800b68e:	2000      	movs	r0, #0
 800b690:	b002      	add	sp, #8
 800b692:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800b694:	2108      	movs	r1, #8
 800b696:	481d      	ldr	r0, [pc, #116]	; (800b70c <Relay_on+0xac>)
 800b698:	f007 f90e 	bl	80128b8 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800b69c:	f7ff ff98 	bl	800b5d0 <TIM3_DeInit>
		Relay_Init();
 800b6a0:	f001 fb4e 	bl	800cd40 <Relay_Init>
 800b6a4:	e7e3      	b.n	800b66e <Relay_on+0xe>
	if (RelayindMode) IND_ON();
 800b6a6:	2180      	movs	r1, #128	; 0x80
 800b6a8:	2090      	movs	r0, #144	; 0x90
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	0109      	lsls	r1, r1, #4
 800b6ae:	05c0      	lsls	r0, r0, #23
 800b6b0:	f005 fe70 	bl	8011394 <HAL_GPIO_WritePin>
 800b6b4:	e7e4      	b.n	800b680 <Relay_on+0x20>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b6b6:	4b16      	ldr	r3, [pc, #88]	; (800b710 <Relay_on+0xb0>)
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f004 f86b 	bl	800f794 <xTimerIsTimerActive>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d112      	bne.n	800b6e8 <Relay_on+0x88>
		xTimerChangePeriod( xTimerRelay, pdMS_TO_TICKS(timeout), 100 );
 800b6c2:	0160      	lsls	r0, r4, #5
 800b6c4:	1b00      	subs	r0, r0, r4
 800b6c6:	0080      	lsls	r0, r0, #2
 800b6c8:	1900      	adds	r0, r0, r4
 800b6ca:	00c0      	lsls	r0, r0, #3
 800b6cc:	21fa      	movs	r1, #250	; 0xfa
 800b6ce:	0089      	lsls	r1, r1, #2
 800b6d0:	f7f4 fd3e 	bl	8000150 <__udivsi3>
 800b6d4:	0002      	movs	r2, r0
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	; (800b710 <Relay_on+0xb0>)
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	2364      	movs	r3, #100	; 0x64
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2104      	movs	r1, #4
 800b6e2:	f003 ff1b 	bl	800f51c <xTimerGenericCommand>
 800b6e6:	e7cd      	b.n	800b684 <Relay_on+0x24>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b6e8:	4b09      	ldr	r3, [pc, #36]	; (800b710 <Relay_on+0xb0>)
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	2364      	movs	r3, #100	; 0x64
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2103      	movs	r1, #3
 800b6f6:	f003 ff11 	bl	800f51c <xTimerGenericCommand>
 800b6fa:	e7e2      	b.n	800b6c2 <Relay_on+0x62>
 800b6fc:	200016a0 	.word	0x200016a0
 800b700:	48000400 	.word	0x48000400
 800b704:	200016a1 	.word	0x200016a1
 800b708:	20000084 	.word	0x20000084
 800b70c:	20006a1c 	.word	0x20006a1c
 800b710:	200016a4 	.word	0x200016a4

0800b714 <Current_Calculation>:
{
 800b714:	b570      	push	{r4, r5, r6, lr}
	Relay_on(3000);
 800b716:	4811      	ldr	r0, [pc, #68]	; (800b75c <Current_Calculation+0x48>)
 800b718:	f7ff ffa2 	bl	800b660 <Relay_on>
	Delay_ms(1000);
 800b71c:	20fa      	movs	r0, #250	; 0xfa
 800b71e:	0080      	lsls	r0, r0, #2
 800b720:	f004 fa20 	bl	800fb64 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800b724:	4c0e      	ldr	r4, [pc, #56]	; (800b760 <Current_Calculation+0x4c>)
 800b726:	0020      	movs	r0, r4
 800b728:	f004 fba2 	bl	800fe70 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 800b72c:	210a      	movs	r1, #10
 800b72e:	0020      	movs	r0, r4
 800b730:	f004 fbf0 	bl	800ff14 <HAL_ADC_PollForConversion>
	rawValues = HAL_ADC_GetValue(&hadc);
 800b734:	0020      	movs	r0, r4
 800b736:	f004 fc4b 	bl	800ffd0 <HAL_ADC_GetValue>
 800b73a:	4d0a      	ldr	r5, [pc, #40]	; (800b764 <Current_Calculation+0x50>)
 800b73c:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800b73e:	0020      	movs	r0, r4
 800b740:	f004 fbc6 	bl	800fed0 <HAL_ADC_Stop>
	return Current = rawValues * ADC_CONVERSION;
 800b744:	6828      	ldr	r0, [r5, #0]
 800b746:	f7f7 fbab 	bl	8002ea0 <__aeabi_ui2d>
 800b74a:	4a07      	ldr	r2, [pc, #28]	; (800b768 <Current_Calculation+0x54>)
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <Current_Calculation+0x58>)
 800b74e:	f7f6 fd25 	bl	800219c <__aeabi_dmul>
 800b752:	f7f7 fc13 	bl	8002f7c <__aeabi_d2f>
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <Current_Calculation+0x5c>)
 800b758:	6018      	str	r0, [r3, #0]
}
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	00000bb8 	.word	0x00000bb8
 800b760:	20006c24 	.word	0x20006c24
 800b764:	200069a4 	.word	0x200069a4
 800b768:	a5119ce0 	.word	0xa5119ce0
 800b76c:	3f77c1bd 	.word	0x3f77c1bd
 800b770:	20006ac8 	.word	0x20006ac8

0800b774 <currentCalculationCommand>:
#endif
/*-----------------------------------------------------------*/

#ifdef H0FR7
portBASE_TYPE currentCalculationCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b774:	b510      	push	{r4, lr}
 800b776:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b778:	d00b      	beq.n	800b792 <currentCalculationCommand+0x1e>

	/* Obtain the value. */
	Current = Current_Calculation();
 800b77a:	f7ff ffcb 	bl	800b714 <Current_Calculation>

	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, Current);
 800b77e:	f7f7 fbb5 	bl	8002eec <__aeabi_f2d>
 800b782:	0002      	movs	r2, r0
 800b784:	000b      	movs	r3, r1
 800b786:	4904      	ldr	r1, [pc, #16]	; (800b798 <currentCalculationCommand+0x24>)
 800b788:	0020      	movs	r0, r4
 800b78a:	f008 fb27 	bl	8013ddc <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b78e:	2000      	movs	r0, #0
 800b790:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800b792:	b672      	cpsid	i
 800b794:	e7fe      	b.n	800b794 <currentCalculationCommand+0x20>
 800b796:	46c0      	nop			; (mov r8, r8)
 800b798:	0801c5b4 	.word	0x0801c5b4

0800b79c <onCommand>:
{
 800b79c:	b530      	push	{r4, r5, lr}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	0004      	movs	r4, r0
 800b7a2:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800b7a8:	2c00      	cmp	r4, #0
 800b7aa:	d018      	beq.n	800b7de <onCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b7ac:	aa01      	add	r2, sp, #4
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	f002 fa80 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
 800b7b4:	0005      	movs	r5, r0
	if (!strcmp( ( char * ) pcParameterString1, "inf") || !strcmp( ( char * ) pcParameterString1, "INF"))
 800b7b6:	4916      	ldr	r1, [pc, #88]	; (800b810 <onCommand+0x74>)
 800b7b8:	f7f4 fca4 	bl	8000104 <strcmp>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d005      	beq.n	800b7cc <onCommand+0x30>
 800b7c0:	4914      	ldr	r1, [pc, #80]	; (800b814 <onCommand+0x78>)
 800b7c2:	0028      	movs	r0, r5
 800b7c4:	f7f4 fc9e 	bl	8000104 <strcmp>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d10a      	bne.n	800b7e2 <onCommand+0x46>
	result = Relay_on(timeout);	
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	4240      	negs	r0, r0
 800b7d0:	f7ff ff46 	bl	800b660 <Relay_on>
	if (result == H0FR6_OK) {
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d014      	beq.n	800b802 <onCommand+0x66>
}
 800b7d8:	2000      	movs	r0, #0
 800b7da:	b003      	add	sp, #12
 800b7dc:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800b7de:	b672      	cpsid	i
 800b7e0:	e7fe      	b.n	800b7e0 <onCommand+0x44>
		timeout = ( uint32_t ) atol( ( char * ) pcParameterString1 );
 800b7e2:	0028      	movs	r0, r5
 800b7e4:	f007 fe9b 	bl	801351e <atol>
 800b7e8:	0005      	movs	r5, r0
	result = Relay_on(timeout);	
 800b7ea:	f7ff ff39 	bl	800b660 <Relay_on>
	if (result == H0FR6_OK) {
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1f2      	bne.n	800b7d8 <onCommand+0x3c>
		if (timeout != portMAX_DELAY) {
 800b7f2:	1c6b      	adds	r3, r5, #1
 800b7f4:	d005      	beq.n	800b802 <onCommand+0x66>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, timeout);
 800b7f6:	002a      	movs	r2, r5
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <onCommand+0x7c>)
 800b7fa:	0020      	movs	r0, r4
 800b7fc:	f008 faee 	bl	8013ddc <sprintf>
 800b800:	e7ea      	b.n	800b7d8 <onCommand+0x3c>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOKMessageInf);
 800b802:	2231      	movs	r2, #49	; 0x31
 800b804:	4905      	ldr	r1, [pc, #20]	; (800b81c <onCommand+0x80>)
 800b806:	0020      	movs	r0, r4
 800b808:	f008 f8ea 	bl	80139e0 <memcpy>
 800b80c:	e7e4      	b.n	800b7d8 <onCommand+0x3c>
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	0801c5c8 	.word	0x0801c5c8
 800b814:	0801c5cc 	.word	0x0801c5cc
 800b818:	0801c5d0 	.word	0x0801c5d0
 800b81c:	0801c604 	.word	0x0801c604

0800b820 <Relay_off>:
{	
 800b820:	b510      	push	{r4, lr}
	if (Relay_state == STATE_PWM) 
 800b822:	4b11      	ldr	r3, [pc, #68]	; (800b868 <Relay_off+0x48>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d00d      	beq.n	800b846 <Relay_off+0x26>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_RESET);
 800b82a:	2200      	movs	r2, #0
 800b82c:	2101      	movs	r1, #1
 800b82e:	480f      	ldr	r0, [pc, #60]	; (800b86c <Relay_off+0x4c>)
 800b830:	f005 fdb0 	bl	8011394 <HAL_GPIO_WritePin>
	if (RelayindMode) IND_OFF();
 800b834:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <Relay_off+0x50>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10d      	bne.n	800b858 <Relay_off+0x38>
	Relay_state = STATE_OFF;
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <Relay_off+0x48>)
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
}
 800b842:	2000      	movs	r0, #0
 800b844:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800b846:	2108      	movs	r1, #8
 800b848:	480a      	ldr	r0, [pc, #40]	; (800b874 <Relay_off+0x54>)
 800b84a:	f007 f835 	bl	80128b8 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800b84e:	f7ff febf 	bl	800b5d0 <TIM3_DeInit>
		Relay_Init();
 800b852:	f001 fa75 	bl	800cd40 <Relay_Init>
 800b856:	e7e8      	b.n	800b82a <Relay_off+0xa>
	if (RelayindMode) IND_OFF();
 800b858:	2180      	movs	r1, #128	; 0x80
 800b85a:	2090      	movs	r0, #144	; 0x90
 800b85c:	2200      	movs	r2, #0
 800b85e:	0109      	lsls	r1, r1, #4
 800b860:	05c0      	lsls	r0, r0, #23
 800b862:	f005 fd97 	bl	8011394 <HAL_GPIO_WritePin>
 800b866:	e7e9      	b.n	800b83c <Relay_off+0x1c>
 800b868:	200016a0 	.word	0x200016a0
 800b86c:	48000400 	.word	0x48000400
 800b870:	200016a1 	.word	0x200016a1
 800b874:	20006a1c 	.word	0x20006a1c

0800b878 <RelayTimerCallback>:
{
 800b878:	b510      	push	{r4, lr}
	Relay_off();
 800b87a:	f7ff ffd1 	bl	800b820 <Relay_off>
}
 800b87e:	bd10      	pop	{r4, pc}

0800b880 <offCommand>:
{
 800b880:	b510      	push	{r4, lr}
 800b882:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800b884:	d005      	beq.n	800b892 <offCommand+0x12>
	result = Relay_off();
 800b886:	f7ff ffcb 	bl	800b820 <Relay_off>
	if (result == H0FR6_OK) {
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d003      	beq.n	800b896 <offCommand+0x16>
}
 800b88e:	2000      	movs	r0, #0
 800b890:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800b892:	b672      	cpsid	i
 800b894:	e7fe      	b.n	800b894 <offCommand+0x14>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800b896:	2222      	movs	r2, #34	; 0x22
 800b898:	4902      	ldr	r1, [pc, #8]	; (800b8a4 <offCommand+0x24>)
 800b89a:	0020      	movs	r0, r4
 800b89c:	f008 f8a0 	bl	80139e0 <memcpy>
 800b8a0:	e7f5      	b.n	800b88e <offCommand+0xe>
 800b8a2:	46c0      	nop			; (mov r8, r8)
 800b8a4:	0801c638 	.word	0x0801c638

0800b8a8 <Relay_PWM>:
{	
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	1c04      	adds	r4, r0, #0
	if ( dutyCycle < 0 || dutyCycle > 100 )
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	f7f4 fe15 	bl	80004dc <__aeabi_fcmplt>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d120      	bne.n	800b8f8 <Relay_PWM+0x50>
 800b8b6:	4913      	ldr	r1, [pc, #76]	; (800b904 <Relay_PWM+0x5c>)
 800b8b8:	1c20      	adds	r0, r4, #0
 800b8ba:	f7f4 fe23 	bl	8000504 <__aeabi_fcmpgt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d11c      	bne.n	800b8fc <Relay_PWM+0x54>
	result = Set_Relay_PWM(Relay_PWM_DEF_FREQ, dutyCycle);
 800b8c2:	1c21      	adds	r1, r4, #0
 800b8c4:	4810      	ldr	r0, [pc, #64]	; (800b908 <Relay_PWM+0x60>)
 800b8c6:	f7ff fe99 	bl	800b5fc <Set_Relay_PWM>
 800b8ca:	1e05      	subs	r5, r0, #0
	if (result == H0FR6_OK)
 800b8cc:	d117      	bne.n	800b8fe <Relay_PWM+0x56>
		Relay_OldDC = dutyCycle;
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <Relay_PWM+0x64>)
 800b8d0:	601c      	str	r4, [r3, #0]
		Relay_state = STATE_PWM; Relay_Oldstate = Relay_state;			
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	4a0e      	ldr	r2, [pc, #56]	; (800b910 <Relay_PWM+0x68>)
 800b8d6:	7013      	strb	r3, [r2, #0]
 800b8d8:	4a0e      	ldr	r2, [pc, #56]	; (800b914 <Relay_PWM+0x6c>)
 800b8da:	7013      	strb	r3, [r2, #0]
		if (RelayindMode) IND_ON();
 800b8dc:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <Relay_PWM+0x70>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <Relay_PWM+0x40>
	return result;
 800b8e4:	001d      	movs	r5, r3
 800b8e6:	e00a      	b.n	800b8fe <Relay_PWM+0x56>
		if (RelayindMode) IND_ON();
 800b8e8:	2180      	movs	r1, #128	; 0x80
 800b8ea:	2090      	movs	r0, #144	; 0x90
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	0109      	lsls	r1, r1, #4
 800b8f0:	05c0      	lsls	r0, r0, #23
 800b8f2:	f005 fd4f 	bl	8011394 <HAL_GPIO_WritePin>
 800b8f6:	e002      	b.n	800b8fe <Relay_PWM+0x56>
		return H0FR6_ERR_Wrong_Value;
 800b8f8:	2502      	movs	r5, #2
 800b8fa:	e000      	b.n	800b8fe <Relay_PWM+0x56>
 800b8fc:	2502      	movs	r5, #2
}
 800b8fe:	0028      	movs	r0, r5
 800b900:	bd70      	pop	{r4, r5, r6, pc}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	42c80000 	.word	0x42c80000
 800b908:	00005dc0 	.word	0x00005dc0
 800b90c:	20006a18 	.word	0x20006a18
 800b910:	200016a0 	.word	0x200016a0
 800b914:	20000084 	.word	0x20000084
 800b918:	200016a1 	.word	0x200016a1

0800b91c <Relay_toggle>:
{	
 800b91c:	b510      	push	{r4, lr}
	if (Relay_state) 
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <Relay_toggle+0x34>)
 800b920:	7818      	ldrb	r0, [r3, #0]
 800b922:	2800      	cmp	r0, #0
 800b924:	d106      	bne.n	800b934 <Relay_toggle+0x18>
		if (Relay_Oldstate == STATE_ON)
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <Relay_toggle+0x38>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d005      	beq.n	800b93a <Relay_toggle+0x1e>
		else if (Relay_Oldstate == STATE_PWM)
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d008      	beq.n	800b944 <Relay_toggle+0x28>
}
 800b932:	bd10      	pop	{r4, pc}
		result = Relay_off();
 800b934:	f7ff ff74 	bl	800b820 <Relay_off>
 800b938:	e7fb      	b.n	800b932 <Relay_toggle+0x16>
			result = Relay_on(portMAX_DELAY);
 800b93a:	2001      	movs	r0, #1
 800b93c:	4240      	negs	r0, r0
 800b93e:	f7ff fe8f 	bl	800b660 <Relay_on>
 800b942:	e7f6      	b.n	800b932 <Relay_toggle+0x16>
			result = Relay_PWM(Relay_OldDC);
 800b944:	4b04      	ldr	r3, [pc, #16]	; (800b958 <Relay_toggle+0x3c>)
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	f7ff ffae 	bl	800b8a8 <Relay_PWM>
 800b94c:	e7f1      	b.n	800b932 <Relay_toggle+0x16>
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	200016a0 	.word	0x200016a0
 800b954:	20000084 	.word	0x20000084
 800b958:	20006a18 	.word	0x20006a18

0800b95c <toggleCommand>:
{
 800b95c:	b510      	push	{r4, lr}
 800b95e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800b960:	d00e      	beq.n	800b980 <toggleCommand+0x24>
	result = Relay_toggle();	
 800b962:	f7ff ffdb 	bl	800b91c <Relay_toggle>
	if (result == H0FR6_OK) {
 800b966:	2800      	cmp	r0, #0
 800b968:	d108      	bne.n	800b97c <toggleCommand+0x20>
		if (Relay_state) {
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <toggleCommand+0x34>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <toggleCommand+0x28>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800b972:	2221      	movs	r2, #33	; 0x21
 800b974:	4907      	ldr	r1, [pc, #28]	; (800b994 <toggleCommand+0x38>)
 800b976:	0020      	movs	r0, r4
 800b978:	f008 f832 	bl	80139e0 <memcpy>
}
 800b97c:	2000      	movs	r0, #0
 800b97e:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800b980:	b672      	cpsid	i
 800b982:	e7fe      	b.n	800b982 <toggleCommand+0x26>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800b984:	2222      	movs	r2, #34	; 0x22
 800b986:	4904      	ldr	r1, [pc, #16]	; (800b998 <toggleCommand+0x3c>)
 800b988:	0020      	movs	r0, r4
 800b98a:	f008 f829 	bl	80139e0 <memcpy>
 800b98e:	e7f5      	b.n	800b97c <toggleCommand+0x20>
 800b990:	200016a0 	.word	0x200016a0
 800b994:	0801c65c 	.word	0x0801c65c
 800b998:	0801c638 	.word	0x0801c638

0800b99c <Module_MessagingTask>:
{
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	46ce      	mov	lr, r9
 800b9a0:	4647      	mov	r7, r8
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	ab08      	add	r3, sp, #32
 800b9a6:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ba58 <Module_MessagingTask+0xbc>)
 800b9aa:	469c      	mov	ip, r3
 800b9ac:	4460      	add	r0, ip
 800b9ae:	b283      	uxth	r3, r0
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d84f      	bhi.n	800ba54 <Module_MessagingTask+0xb8>
 800b9b4:	0098      	lsls	r0, r3, #2
 800b9b6:	4b29      	ldr	r3, [pc, #164]	; (800ba5c <Module_MessagingTask+0xc0>)
 800b9b8:	581b      	ldr	r3, [r3, r0]
 800b9ba:	469f      	mov	pc, r3
			temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];						
 800b9bc:	3901      	subs	r1, #1
 800b9be:	4b28      	ldr	r3, [pc, #160]	; (800ba60 <Module_MessagingTask+0xc4>)
 800b9c0:	00cc      	lsls	r4, r1, #3
 800b9c2:	1a65      	subs	r5, r4, r1
 800b9c4:	00ed      	lsls	r5, r5, #3
 800b9c6:	195d      	adds	r5, r3, r5
 800b9c8:	18ae      	adds	r6, r5, r2
 800b9ca:	7870      	ldrb	r0, [r6, #1]
 800b9cc:	0400      	lsls	r0, r0, #16
 800b9ce:	5cad      	ldrb	r5, [r5, r2]
 800b9d0:	062d      	lsls	r5, r5, #24
 800b9d2:	1940      	adds	r0, r0, r5
 800b9d4:	78f5      	ldrb	r5, [r6, #3]
 800b9d6:	1940      	adds	r0, r0, r5
 800b9d8:	78b3      	ldrb	r3, [r6, #2]
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	18c0      	adds	r0, r0, r3
 800b9de:	4b21      	ldr	r3, [pc, #132]	; (800ba64 <Module_MessagingTask+0xc8>)
 800b9e0:	6018      	str	r0, [r3, #0]
			Relay_on(temp32);
 800b9e2:	f7ff fe3d 	bl	800b660 <Relay_on>
	Module_Status result = H0FR6_OK; 
 800b9e6:	2000      	movs	r0, #0
}
 800b9e8:	bcc0      	pop	{r6, r7}
 800b9ea:	46b9      	mov	r9, r7
 800b9ec:	46b0      	mov	r8, r6
 800b9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Relay_off();
 800b9f0:	f7ff ff16 	bl	800b820 <Relay_off>
	Module_Status result = H0FR6_OK; 
 800b9f4:	2000      	movs	r0, #0
			break;
 800b9f6:	e7f7      	b.n	800b9e8 <Module_MessagingTask+0x4c>
			Relay_toggle();
 800b9f8:	f7ff ff90 	bl	800b91c <Relay_toggle>
	Module_Status result = H0FR6_OK; 
 800b9fc:	2000      	movs	r0, #0
			break;
 800b9fe:	e7f3      	b.n	800b9e8 <Module_MessagingTask+0x4c>
				tempFloat = (float)( ((uint64_t)cMessage[port-1][shift]<<24) + ((uint64_t)cMessage[port-1][1+shift]<<16) + ((uint64_t)cMessage[port-1][2+shift]<<8) + ((uint64_t)cMessage[port-1][3+shift]) );
 800ba00:	1e4f      	subs	r7, r1, #1
 800ba02:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <Module_MessagingTask+0xc4>)
 800ba04:	4699      	mov	r9, r3
 800ba06:	00fe      	lsls	r6, r7, #3
 800ba08:	1bf1      	subs	r1, r6, r7
 800ba0a:	00c9      	lsls	r1, r1, #3
 800ba0c:	4449      	add	r1, r9
 800ba0e:	1888      	adds	r0, r1, r2
 800ba10:	4684      	mov	ip, r0
 800ba12:	7840      	ldrb	r0, [r0, #1]
 800ba14:	2500      	movs	r5, #0
 800ba16:	0404      	lsls	r4, r0, #16
 800ba18:	5c89      	ldrb	r1, [r1, r2]
 800ba1a:	4688      	mov	r8, r1
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4643      	mov	r3, r8
 800ba20:	0618      	lsls	r0, r3, #24
 800ba22:	1824      	adds	r4, r4, r0
 800ba24:	414d      	adcs	r5, r1
 800ba26:	4663      	mov	r3, ip
 800ba28:	78d8      	ldrb	r0, [r3, #3]
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	1900      	adds	r0, r0, r4
 800ba2e:	4169      	adcs	r1, r5
 800ba30:	4662      	mov	r2, ip
 800ba32:	7893      	ldrb	r3, [r2, #2]
 800ba34:	2500      	movs	r5, #0
 800ba36:	021c      	lsls	r4, r3, #8
 800ba38:	1900      	adds	r0, r0, r4
 800ba3a:	4169      	adcs	r1, r5
 800ba3c:	f7f4 fe46 	bl	80006cc <__aeabi_ul2f>
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <Module_MessagingTask+0xcc>)
 800ba42:	6018      	str	r0, [r3, #0]
				Relay_PWM(tempFloat);
 800ba44:	f7ff ff30 	bl	800b8a8 <Relay_PWM>
	Module_Status result = H0FR6_OK; 
 800ba48:	2000      	movs	r0, #0
				break;
 800ba4a:	e7cd      	b.n	800b9e8 <Module_MessagingTask+0x4c>
				Current_Calculation();
 800ba4c:	f7ff fe62 	bl	800b714 <Current_Calculation>
	Module_Status result = H0FR6_OK; 
 800ba50:	2000      	movs	r0, #0
				break;
 800ba52:	e7c9      	b.n	800b9e8 <Module_MessagingTask+0x4c>
	Module_Status result = H0FR6_OK; 
 800ba54:	2001      	movs	r0, #1
 800ba56:	e7c7      	b.n	800b9e8 <Module_MessagingTask+0x4c>
 800ba58:	fffffd12 	.word	0xfffffd12
 800ba5c:	0801c680 	.word	0x0801c680
 800ba60:	20000d10 	.word	0x20000d10
 800ba64:	20006b40 	.word	0x20006b40
 800ba68:	20006b3c 	.word	0x20006b3c

0800ba6c <pwmCommand>:
{
 800ba6c:	b530      	push	{r4, r5, lr}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	0005      	movs	r5, r0
 800ba72:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800ba74:	2300      	movs	r3, #0
 800ba76:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	d019      	beq.n	800bab0 <pwmCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800ba7c:	aa01      	add	r2, sp, #4
 800ba7e:	2101      	movs	r1, #1
 800ba80:	f002 f918 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	dutycycle = ( float ) atof( ( char * ) pcParameterString1 );
 800ba84:	f007 fd40 	bl	8013508 <atof>
 800ba88:	f7f7 fa78 	bl	8002f7c <__aeabi_d2f>
 800ba8c:	1c04      	adds	r4, r0, #0
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800ba8e:	2100      	movs	r1, #0
 800ba90:	f7f4 fd24 	bl	80004dc <__aeabi_fcmplt>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d105      	bne.n	800baa4 <pwmCommand+0x38>
 800ba98:	4910      	ldr	r1, [pc, #64]	; (800badc <pwmCommand+0x70>)
 800ba9a:	1c20      	adds	r0, r4, #0
 800ba9c:	f7f4 fd32 	bl	8000504 <__aeabi_fcmpgt>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d007      	beq.n	800bab4 <pwmCommand+0x48>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongValue);
 800baa4:	2237      	movs	r2, #55	; 0x37
 800baa6:	490e      	ldr	r1, [pc, #56]	; (800bae0 <pwmCommand+0x74>)
 800baa8:	0028      	movs	r0, r5
 800baaa:	f007 ff99 	bl	80139e0 <memcpy>
 800baae:	e008      	b.n	800bac2 <pwmCommand+0x56>
	configASSERT( pcWriteBuffer );
 800bab0:	b672      	cpsid	i
 800bab2:	e7fe      	b.n	800bab2 <pwmCommand+0x46>
		result = Relay_PWM(dutycycle);	
 800bab4:	1c20      	adds	r0, r4, #0
 800bab6:	f7ff fef7 	bl	800b8a8 <Relay_PWM>
	if (result == H0FR6_OK) {
 800baba:	2800      	cmp	r0, #0
 800babc:	d004      	beq.n	800bac8 <pwmCommand+0x5c>
	} else if (result == H0FR6_ERR_Wrong_Value) {
 800babe:	2802      	cmp	r0, #2
 800bac0:	d0f0      	beq.n	800baa4 <pwmCommand+0x38>
}
 800bac2:	2000      	movs	r0, #0
 800bac4:	b003      	add	sp, #12
 800bac6:	bd30      	pop	{r4, r5, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, dutycycle);
 800bac8:	1c20      	adds	r0, r4, #0
 800baca:	f7f7 fa0f 	bl	8002eec <__aeabi_f2d>
 800bace:	0002      	movs	r2, r0
 800bad0:	000b      	movs	r3, r1
 800bad2:	4904      	ldr	r1, [pc, #16]	; (800bae4 <pwmCommand+0x78>)
 800bad4:	0028      	movs	r0, r5
 800bad6:	f008 f981 	bl	8013ddc <sprintf>
 800bada:	e7f2      	b.n	800bac2 <pwmCommand+0x56>
 800badc:	42c80000 	.word	0x42c80000
 800bae0:	0801c6d8 	.word	0x0801c6d8
 800bae4:	0801c694 	.word	0x0801c694

0800bae8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;


/* ADC init function */
void MX_ADC_Init(void)
{
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800baec:	220c      	movs	r2, #12
 800baee:	2100      	movs	r1, #0
 800baf0:	a801      	add	r0, sp, #4
 800baf2:	f007 ff7e 	bl	80139f2 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800baf6:	4c12      	ldr	r4, [pc, #72]	; (800bb40 <MX_ADC_Init+0x58>)
 800baf8:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <MX_ADC_Init+0x5c>)
 800bafa:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800bafc:	2500      	movs	r5, #0
 800bafe:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800bb00:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bb02:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800bb04:	2301      	movs	r3, #1
 800bb06:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800bb08:	2208      	movs	r2, #8
 800bb0a:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800bb0c:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800bb0e:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 800bb10:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800bb12:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bb14:	22c2      	movs	r2, #194	; 0xc2
 800bb16:	32ff      	adds	r2, #255	; 0xff
 800bb18:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bb1a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800bb1c:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bb1e:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800bb20:	0020      	movs	r0, r4
 800bb22:	f004 f8f9 	bl	800fd18 <HAL_ADC_Init>
  {

  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800bb26:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bb28:	2380      	movs	r3, #128	; 0x80
 800bb2a:	015b      	lsls	r3, r3, #5
 800bb2c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800bb32:	a901      	add	r1, sp, #4
 800bb34:	0020      	movs	r0, r4
 800bb36:	f004 fac3 	bl	80100c0 <HAL_ADC_ConfigChannel>
  {

  }

}
 800bb3a:	b005      	add	sp, #20
 800bb3c:	bd30      	pop	{r4, r5, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	20006c24 	.word	0x20006c24
 800bb44:	40012400 	.word	0x40012400

0800bb48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb4e:	2214      	movs	r2, #20
 800bb50:	2100      	movs	r1, #0
 800bb52:	a803      	add	r0, sp, #12
 800bb54:	f007 ff4d 	bl	80139f2 <memset>
  if(adcHandle->Instance==ADC1)
 800bb58:	4b12      	ldr	r3, [pc, #72]	; (800bba4 <HAL_ADC_MspInit+0x5c>)
 800bb5a:	6822      	ldr	r2, [r4, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d001      	beq.n	800bb64 <HAL_ADC_MspInit+0x1c>
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  }

}
 800bb60:	b008      	add	sp, #32
 800bb62:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bb64:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <HAL_ADC_MspInit+0x60>)
 800bb66:	6999      	ldr	r1, [r3, #24]
 800bb68:	2080      	movs	r0, #128	; 0x80
 800bb6a:	0080      	lsls	r0, r0, #2
 800bb6c:	4301      	orrs	r1, r0
 800bb6e:	6199      	str	r1, [r3, #24]
 800bb70:	699a      	ldr	r2, [r3, #24]
 800bb72:	4002      	ands	r2, r0
 800bb74:	9201      	str	r2, [sp, #4]
 800bb76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb78:	695a      	ldr	r2, [r3, #20]
 800bb7a:	2180      	movs	r1, #128	; 0x80
 800bb7c:	0289      	lsls	r1, r1, #10
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	615a      	str	r2, [r3, #20]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	400b      	ands	r3, r1
 800bb86:	9302      	str	r3, [sp, #8]
 800bb88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb8e:	3302      	adds	r3, #2
 800bb90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb92:	2300      	movs	r3, #0
 800bb94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb96:	3871      	subs	r0, #113	; 0x71
 800bb98:	38ff      	subs	r0, #255	; 0xff
 800bb9a:	a903      	add	r1, sp, #12
 800bb9c:	05c0      	lsls	r0, r0, #23
 800bb9e:	f005 fb09 	bl	80111b4 <HAL_GPIO_Init>
}
 800bba2:	e7dd      	b.n	800bb60 <HAL_ADC_MspInit+0x18>
 800bba4:	40012400 	.word	0x40012400
 800bba8:	40021000 	.word	0x40021000

0800bbac <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bbac:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bbae:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bbb4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bbb6:	2280      	movs	r2, #128	; 0x80
 800bbb8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbba:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bbbc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bbbe:	3320      	adds	r3, #32
 800bbc0:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bbc2:	2380      	movs	r3, #128	; 0x80
 800bbc4:	019b      	lsls	r3, r3, #6
 800bbc6:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bbc8:	f004 fcc4 	bl	8010554 <HAL_DMA_Init>
}
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bbce:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bbd0:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bbd2:	2310      	movs	r3, #16
 800bbd4:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bbda:	2280      	movs	r2, #128	; 0x80
 800bbdc:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbde:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bbe0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bbe2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bbe4:	2380      	movs	r3, #128	; 0x80
 800bbe6:	019b      	lsls	r3, r3, #6
 800bbe8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bbea:	f004 fcb3 	bl	8010554 <HAL_DMA_Init>
}
 800bbee:	bd10      	pop	{r4, pc}

0800bbf0 <DMA_Init>:
{
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800bbf4:	4b1d      	ldr	r3, [pc, #116]	; (800bc6c <DMA_Init+0x7c>)
 800bbf6:	6959      	ldr	r1, [r3, #20]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	4311      	orrs	r1, r2
 800bbfc:	6159      	str	r1, [r3, #20]
 800bbfe:	6959      	ldr	r1, [r3, #20]
 800bc00:	400a      	ands	r2, r1
 800bc02:	9200      	str	r2, [sp, #0]
 800bc04:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800bc06:	6959      	ldr	r1, [r3, #20]
 800bc08:	2202      	movs	r2, #2
 800bc0a:	4311      	orrs	r1, r2
 800bc0c:	6159      	str	r1, [r3, #20]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	401a      	ands	r2, r3
 800bc12:	9201      	str	r2, [sp, #4]
 800bc14:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800bc16:	4c16      	ldr	r4, [pc, #88]	; (800bc70 <DMA_Init+0x80>)
 800bc18:	4916      	ldr	r1, [pc, #88]	; (800bc74 <DMA_Init+0x84>)
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	f7ff ffc6 	bl	800bbac <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800bc20:	0020      	movs	r0, r4
 800bc22:	3038      	adds	r0, #56	; 0x38
 800bc24:	4914      	ldr	r1, [pc, #80]	; (800bc78 <DMA_Init+0x88>)
 800bc26:	f7ff ffc1 	bl	800bbac <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800bc2a:	0020      	movs	r0, r4
 800bc2c:	3070      	adds	r0, #112	; 0x70
 800bc2e:	4913      	ldr	r1, [pc, #76]	; (800bc7c <DMA_Init+0x8c>)
 800bc30:	f7ff ffbc 	bl	800bbac <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800bc34:	0020      	movs	r0, r4
 800bc36:	30a8      	adds	r0, #168	; 0xa8
 800bc38:	4911      	ldr	r1, [pc, #68]	; (800bc80 <DMA_Init+0x90>)
 800bc3a:	f7ff ffb7 	bl	800bbac <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800bc3e:	0020      	movs	r0, r4
 800bc40:	30e0      	adds	r0, #224	; 0xe0
 800bc42:	4910      	ldr	r1, [pc, #64]	; (800bc84 <DMA_Init+0x94>)
 800bc44:	f7ff ffb2 	bl	800bbac <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800bc48:	4c0f      	ldr	r4, [pc, #60]	; (800bc88 <DMA_Init+0x98>)
 800bc4a:	4910      	ldr	r1, [pc, #64]	; (800bc8c <DMA_Init+0x9c>)
 800bc4c:	0020      	movs	r0, r4
 800bc4e:	f7ff ffbe 	bl	800bbce <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800bc52:	0020      	movs	r0, r4
 800bc54:	3038      	adds	r0, #56	; 0x38
 800bc56:	490e      	ldr	r1, [pc, #56]	; (800bc90 <DMA_Init+0xa0>)
 800bc58:	f7ff ffb9 	bl	800bbce <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	3070      	adds	r0, #112	; 0x70
 800bc60:	490c      	ldr	r1, [pc, #48]	; (800bc94 <DMA_Init+0xa4>)
 800bc62:	f7ff ffb4 	bl	800bbce <DMA_MSG_TX_CH_Init>
}
 800bc66:	b002      	add	sp, #8
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	40021000 	.word	0x40021000
 800bc70:	200016a8 	.word	0x200016a8
 800bc74:	40020008 	.word	0x40020008
 800bc78:	40020030 	.word	0x40020030
 800bc7c:	40020058 	.word	0x40020058
 800bc80:	4002006c 	.word	0x4002006c
 800bc84:	4002041c 	.word	0x4002041c
 800bc88:	200017f8 	.word	0x200017f8
 800bc8c:	4002001c 	.word	0x4002001c
 800bc90:	40020044 	.word	0x40020044
 800bc94:	40020080 	.word	0x40020080

0800bc98 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bc98:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bc9a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bca0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800bca2:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bca4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bca6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bca8:	3320      	adds	r3, #32
 800bcaa:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bcac:	2380      	movs	r3, #128	; 0x80
 800bcae:	015b      	lsls	r3, r3, #5
 800bcb0:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bcb2:	f004 fc4f 	bl	8010554 <HAL_DMA_Init>
}
 800bcb6:	bd10      	pop	{r4, pc}

0800bcb8 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800bcb8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bcba:	6803      	ldr	r3, [r0, #0]
 800bcbc:	4821      	ldr	r0, [pc, #132]	; (800bd44 <SetupDMAInterrupts+0x8c>)
 800bcbe:	4283      	cmp	r3, r0
 800bcc0:	d037      	beq.n	800bd32 <SetupDMAInterrupts+0x7a>
 800bcc2:	d90e      	bls.n	800bce2 <SetupDMAInterrupts+0x2a>
 800bcc4:	4820      	ldr	r0, [pc, #128]	; (800bd48 <SetupDMAInterrupts+0x90>)
 800bcc6:	4283      	cmp	r3, r0
 800bcc8:	d033      	beq.n	800bd32 <SetupDMAInterrupts+0x7a>
 800bcca:	d919      	bls.n	800bd00 <SetupDMAInterrupts+0x48>
 800bccc:	481f      	ldr	r0, [pc, #124]	; (800bd4c <SetupDMAInterrupts+0x94>)
 800bcce:	4283      	cmp	r3, r0
 800bcd0:	d024      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bcd2:	d92b      	bls.n	800bd2c <SetupDMAInterrupts+0x74>
 800bcd4:	4a1e      	ldr	r2, [pc, #120]	; (800bd50 <SetupDMAInterrupts+0x98>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d020      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bcda:	4a1e      	ldr	r2, [pc, #120]	; (800bd54 <SetupDMAInterrupts+0x9c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d01d      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bce0:	e00d      	b.n	800bcfe <SetupDMAInterrupts+0x46>
 800bce2:	4a1d      	ldr	r2, [pc, #116]	; (800bd58 <SetupDMAInterrupts+0xa0>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d107      	bne.n	800bcf8 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800bce8:	2200      	movs	r2, #0
 800bcea:	2009      	movs	r0, #9
 800bcec:	f004 fa8c 	bl	8010208 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800bcf0:	2009      	movs	r0, #9
 800bcf2:	f004 fabb 	bl	801026c <HAL_NVIC_EnableIRQ>
			break;
 800bcf6:	e002      	b.n	800bcfe <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800bcf8:	4a18      	ldr	r2, [pc, #96]	; (800bd5c <SetupDMAInterrupts+0xa4>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d019      	beq.n	800bd32 <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800bcfe:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bd00:	4817      	ldr	r0, [pc, #92]	; (800bd60 <SetupDMAInterrupts+0xa8>)
 800bd02:	4283      	cmp	r3, r0
 800bd04:	d00a      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bd06:	d903      	bls.n	800bd10 <SetupDMAInterrupts+0x58>
 800bd08:	4a16      	ldr	r2, [pc, #88]	; (800bd64 <SetupDMAInterrupts+0xac>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d006      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bd0e:	e7f6      	b.n	800bcfe <SetupDMAInterrupts+0x46>
 800bd10:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <SetupDMAInterrupts+0xb0>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d002      	beq.n	800bd1c <SetupDMAInterrupts+0x64>
 800bd16:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <SetupDMAInterrupts+0xb4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d1f0      	bne.n	800bcfe <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	200b      	movs	r0, #11
 800bd20:	f004 fa72 	bl	8010208 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bd24:	200b      	movs	r0, #11
 800bd26:	f004 faa1 	bl	801026c <HAL_NVIC_EnableIRQ>
}
 800bd2a:	e7e8      	b.n	800bcfe <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800bd2c:	4a10      	ldr	r2, [pc, #64]	; (800bd70 <SetupDMAInterrupts+0xb8>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d1e5      	bne.n	800bcfe <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800bd32:	2200      	movs	r2, #0
 800bd34:	200a      	movs	r0, #10
 800bd36:	f004 fa67 	bl	8010208 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bd3a:	200a      	movs	r0, #10
 800bd3c:	f004 fa96 	bl	801026c <HAL_NVIC_EnableIRQ>
			break;
 800bd40:	e7dd      	b.n	800bcfe <SetupDMAInterrupts+0x46>
 800bd42:	46c0      	nop			; (mov r8, r8)
 800bd44:	40020030 	.word	0x40020030
 800bd48:	40020408 	.word	0x40020408
 800bd4c:	40020430 	.word	0x40020430
 800bd50:	40020444 	.word	0x40020444
 800bd54:	40020458 	.word	0x40020458
 800bd58:	40020008 	.word	0x40020008
 800bd5c:	4002001c 	.word	0x4002001c
 800bd60:	4002006c 	.word	0x4002006c
 800bd64:	40020080 	.word	0x40020080
 800bd68:	40020044 	.word	0x40020044
 800bd6c:	40020058 	.word	0x40020058
 800bd70:	4002041c 	.word	0x4002041c

0800bd74 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800bd74:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bd76:	6803      	ldr	r3, [r0, #0]
 800bd78:	491b      	ldr	r1, [pc, #108]	; (800bde8 <UnSetupDMAInterrupts+0x74>)
 800bd7a:	428b      	cmp	r3, r1
 800bd7c:	d02f      	beq.n	800bdde <UnSetupDMAInterrupts+0x6a>
 800bd7e:	d90e      	bls.n	800bd9e <UnSetupDMAInterrupts+0x2a>
 800bd80:	491a      	ldr	r1, [pc, #104]	; (800bdec <UnSetupDMAInterrupts+0x78>)
 800bd82:	428b      	cmp	r3, r1
 800bd84:	d02b      	beq.n	800bdde <UnSetupDMAInterrupts+0x6a>
 800bd86:	d915      	bls.n	800bdb4 <UnSetupDMAInterrupts+0x40>
 800bd88:	4919      	ldr	r1, [pc, #100]	; (800bdf0 <UnSetupDMAInterrupts+0x7c>)
 800bd8a:	428b      	cmp	r3, r1
 800bd8c:	d020      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bd8e:	d923      	bls.n	800bdd8 <UnSetupDMAInterrupts+0x64>
 800bd90:	4a18      	ldr	r2, [pc, #96]	; (800bdf4 <UnSetupDMAInterrupts+0x80>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d01c      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bd96:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <UnSetupDMAInterrupts+0x84>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d019      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bd9c:	e009      	b.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
 800bd9e:	4a17      	ldr	r2, [pc, #92]	; (800bdfc <UnSetupDMAInterrupts+0x88>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d103      	bne.n	800bdac <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bda4:	2009      	movs	r0, #9
 800bda6:	f004 fa6b 	bl	8010280 <HAL_NVIC_DisableIRQ>
			break;
 800bdaa:	e002      	b.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800bdac:	4a14      	ldr	r2, [pc, #80]	; (800be00 <UnSetupDMAInterrupts+0x8c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d015      	beq.n	800bdde <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800bdb2:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bdb4:	4913      	ldr	r1, [pc, #76]	; (800be04 <UnSetupDMAInterrupts+0x90>)
 800bdb6:	428b      	cmp	r3, r1
 800bdb8:	d00a      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bdba:	d903      	bls.n	800bdc4 <UnSetupDMAInterrupts+0x50>
 800bdbc:	4a12      	ldr	r2, [pc, #72]	; (800be08 <UnSetupDMAInterrupts+0x94>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d006      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bdc2:	e7f6      	b.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
 800bdc4:	4a11      	ldr	r2, [pc, #68]	; (800be0c <UnSetupDMAInterrupts+0x98>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d002      	beq.n	800bdd0 <UnSetupDMAInterrupts+0x5c>
 800bdca:	4a11      	ldr	r2, [pc, #68]	; (800be10 <UnSetupDMAInterrupts+0x9c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d1f0      	bne.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bdd0:	200b      	movs	r0, #11
 800bdd2:	f004 fa55 	bl	8010280 <HAL_NVIC_DisableIRQ>
}
 800bdd6:	e7ec      	b.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800bdd8:	4a0e      	ldr	r2, [pc, #56]	; (800be14 <UnSetupDMAInterrupts+0xa0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d1e9      	bne.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bdde:	200a      	movs	r0, #10
 800bde0:	f004 fa4e 	bl	8010280 <HAL_NVIC_DisableIRQ>
			break;
 800bde4:	e7e5      	b.n	800bdb2 <UnSetupDMAInterrupts+0x3e>
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	40020030 	.word	0x40020030
 800bdec:	40020408 	.word	0x40020408
 800bdf0:	40020430 	.word	0x40020430
 800bdf4:	40020444 	.word	0x40020444
 800bdf8:	40020458 	.word	0x40020458
 800bdfc:	40020008 	.word	0x40020008
 800be00:	4002001c 	.word	0x4002001c
 800be04:	4002006c 	.word	0x4002006c
 800be08:	40020080 	.word	0x40020080
 800be0c:	40020044 	.word	0x40020044
 800be10:	40020058 	.word	0x40020058
 800be14:	4002041c 	.word	0x4002041c

0800be18 <DMA_MSG_TX_UnSetup>:
{	
 800be18:	b510      	push	{r4, lr}
 800be1a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800be1c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800be1e:	f7ff ffa9 	bl	800bd74 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800be22:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800be24:	2300      	movs	r3, #0
 800be26:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800be28:	6623      	str	r3, [r4, #96]	; 0x60
}
 800be2a:	bd10      	pop	{r4, pc}

0800be2c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800be2c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800be2e:	6803      	ldr	r3, [r0, #0]
 800be30:	4ac3      	ldr	r2, [pc, #780]	; (800c140 <RemapAndLinkDMAtoUARTRx+0x314>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d03e      	beq.n	800beb4 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800be36:	4ac3      	ldr	r2, [pc, #780]	; (800c144 <RemapAndLinkDMAtoUARTRx+0x318>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d100      	bne.n	800be3e <RemapAndLinkDMAtoUARTRx+0x12>
 800be3c:	e096      	b.n	800bf6c <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800be3e:	4ac2      	ldr	r2, [pc, #776]	; (800c148 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d100      	bne.n	800be46 <RemapAndLinkDMAtoUARTRx+0x1a>
 800be44:	e0eb      	b.n	800c01e <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800be46:	4ac1      	ldr	r2, [pc, #772]	; (800c14c <RemapAndLinkDMAtoUARTRx+0x320>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d100      	bne.n	800be4e <RemapAndLinkDMAtoUARTRx+0x22>
 800be4c:	e141      	b.n	800c0d2 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800be4e:	4ac0      	ldr	r2, [pc, #768]	; (800c150 <RemapAndLinkDMAtoUARTRx+0x324>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d100      	bne.n	800be56 <RemapAndLinkDMAtoUARTRx+0x2a>
 800be54:	e1bd      	b.n	800c1d2 <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800be56:	4abf      	ldr	r2, [pc, #764]	; (800c154 <RemapAndLinkDMAtoUARTRx+0x328>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d100      	bne.n	800be5e <RemapAndLinkDMAtoUARTRx+0x32>
 800be5c:	e213      	b.n	800c286 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800be5e:	4abe      	ldr	r2, [pc, #760]	; (800c158 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d100      	bne.n	800be66 <RemapAndLinkDMAtoUARTRx+0x3a>
 800be64:	e269      	b.n	800c33a <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800be66:	4abd      	ldr	r2, [pc, #756]	; (800c15c <RemapAndLinkDMAtoUARTRx+0x330>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d136      	bne.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
 800be6c:	680b      	ldr	r3, [r1, #0]
 800be6e:	4abc      	ldr	r2, [pc, #752]	; (800c160 <RemapAndLinkDMAtoUARTRx+0x334>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d100      	bne.n	800be76 <RemapAndLinkDMAtoUARTRx+0x4a>
 800be74:	e2bb      	b.n	800c3ee <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800be76:	4abb      	ldr	r2, [pc, #748]	; (800c164 <RemapAndLinkDMAtoUARTRx+0x338>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d100      	bne.n	800be7e <RemapAndLinkDMAtoUARTRx+0x52>
 800be7c:	e2c1      	b.n	800c402 <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800be7e:	4aba      	ldr	r2, [pc, #744]	; (800c168 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d100      	bne.n	800be86 <RemapAndLinkDMAtoUARTRx+0x5a>
 800be84:	e2c9      	b.n	800c41a <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800be86:	4ab9      	ldr	r2, [pc, #740]	; (800c16c <RemapAndLinkDMAtoUARTRx+0x340>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d100      	bne.n	800be8e <RemapAndLinkDMAtoUARTRx+0x62>
 800be8c:	e2d1      	b.n	800c432 <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800be8e:	4ab8      	ldr	r2, [pc, #736]	; (800c170 <RemapAndLinkDMAtoUARTRx+0x344>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d100      	bne.n	800be96 <RemapAndLinkDMAtoUARTRx+0x6a>
 800be94:	e2d9      	b.n	800c44a <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800be96:	4ab7      	ldr	r2, [pc, #732]	; (800c174 <RemapAndLinkDMAtoUARTRx+0x348>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d11e      	bne.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800be9c:	4ab6      	ldr	r2, [pc, #728]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800be9e:	23a8      	movs	r3, #168	; 0xa8
 800bea0:	58d4      	ldr	r4, [r2, r3]
 800bea2:	4db6      	ldr	r5, [pc, #728]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bea4:	402c      	ands	r4, r5
 800bea6:	50d4      	str	r4, [r2, r3]
 800bea8:	58d5      	ldr	r5, [r2, r3]
 800beaa:	24f0      	movs	r4, #240	; 0xf0
 800beac:	0124      	lsls	r4, r4, #4
 800beae:	432c      	orrs	r4, r5
 800beb0:	50d4      	str	r4, [r2, r3]
 800beb2:	e012      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800beb4:	680b      	ldr	r3, [r1, #0]
 800beb6:	4aaa      	ldr	r2, [pc, #680]	; (800c160 <RemapAndLinkDMAtoUARTRx+0x334>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d011      	beq.n	800bee0 <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bebc:	4aa9      	ldr	r2, [pc, #676]	; (800c164 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d019      	beq.n	800bef6 <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bec2:	4aa9      	ldr	r2, [pc, #676]	; (800c168 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d022      	beq.n	800bf0e <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bec8:	4aa8      	ldr	r2, [pc, #672]	; (800c16c <RemapAndLinkDMAtoUARTRx+0x340>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d02b      	beq.n	800bf26 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bece:	4aa8      	ldr	r2, [pc, #672]	; (800c170 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d034      	beq.n	800bf3e <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bed4:	4aa7      	ldr	r2, [pc, #668]	; (800c174 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d03c      	beq.n	800bf54 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800beda:	6641      	str	r1, [r0, #100]	; 0x64
 800bedc:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bede:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bee0:	4aa7      	ldr	r2, [pc, #668]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bee2:	23a8      	movs	r3, #168	; 0xa8
 800bee4:	58d4      	ldr	r4, [r2, r3]
 800bee6:	250f      	movs	r5, #15
 800bee8:	43ac      	bics	r4, r5
 800beea:	50d4      	str	r4, [r2, r3]
 800beec:	58d4      	ldr	r4, [r2, r3]
 800beee:	3d07      	subs	r5, #7
 800bef0:	432c      	orrs	r4, r5
 800bef2:	50d4      	str	r4, [r2, r3]
 800bef4:	e7f1      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800bef6:	4aa2      	ldr	r2, [pc, #648]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bef8:	23a8      	movs	r3, #168	; 0xa8
 800befa:	58d4      	ldr	r4, [r2, r3]
 800befc:	4d9f      	ldr	r5, [pc, #636]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800befe:	402c      	ands	r4, r5
 800bf00:	50d4      	str	r4, [r2, r3]
 800bf02:	58d5      	ldr	r5, [r2, r3]
 800bf04:	2480      	movs	r4, #128	; 0x80
 800bf06:	0124      	lsls	r4, r4, #4
 800bf08:	432c      	orrs	r4, r5
 800bf0a:	50d4      	str	r4, [r2, r3]
 800bf0c:	e7e5      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800bf0e:	4a9c      	ldr	r2, [pc, #624]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bf10:	23a8      	movs	r3, #168	; 0xa8
 800bf12:	58d4      	ldr	r4, [r2, r3]
 800bf14:	4d9b      	ldr	r5, [pc, #620]	; (800c184 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bf16:	402c      	ands	r4, r5
 800bf18:	50d4      	str	r4, [r2, r3]
 800bf1a:	58d5      	ldr	r5, [r2, r3]
 800bf1c:	2480      	movs	r4, #128	; 0x80
 800bf1e:	0324      	lsls	r4, r4, #12
 800bf20:	432c      	orrs	r4, r5
 800bf22:	50d4      	str	r4, [r2, r3]
 800bf24:	e7d9      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800bf26:	4a96      	ldr	r2, [pc, #600]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bf28:	23a8      	movs	r3, #168	; 0xa8
 800bf2a:	58d4      	ldr	r4, [r2, r3]
 800bf2c:	4d96      	ldr	r5, [pc, #600]	; (800c188 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bf2e:	402c      	ands	r4, r5
 800bf30:	50d4      	str	r4, [r2, r3]
 800bf32:	58d5      	ldr	r5, [r2, r3]
 800bf34:	2480      	movs	r4, #128	; 0x80
 800bf36:	0424      	lsls	r4, r4, #16
 800bf38:	432c      	orrs	r4, r5
 800bf3a:	50d4      	str	r4, [r2, r3]
 800bf3c:	e7cd      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800bf3e:	4a8e      	ldr	r2, [pc, #568]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bf40:	23a8      	movs	r3, #168	; 0xa8
 800bf42:	58d4      	ldr	r4, [r2, r3]
 800bf44:	25f0      	movs	r5, #240	; 0xf0
 800bf46:	43ac      	bics	r4, r5
 800bf48:	50d4      	str	r4, [r2, r3]
 800bf4a:	58d4      	ldr	r4, [r2, r3]
 800bf4c:	3d70      	subs	r5, #112	; 0x70
 800bf4e:	432c      	orrs	r4, r5
 800bf50:	50d4      	str	r4, [r2, r3]
 800bf52:	e7c2      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bf54:	4a88      	ldr	r2, [pc, #544]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bf56:	23a8      	movs	r3, #168	; 0xa8
 800bf58:	58d4      	ldr	r4, [r2, r3]
 800bf5a:	4d88      	ldr	r5, [pc, #544]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bf5c:	402c      	ands	r4, r5
 800bf5e:	50d4      	str	r4, [r2, r3]
 800bf60:	58d5      	ldr	r5, [r2, r3]
 800bf62:	2480      	movs	r4, #128	; 0x80
 800bf64:	0124      	lsls	r4, r4, #4
 800bf66:	432c      	orrs	r4, r5
 800bf68:	50d4      	str	r4, [r2, r3]
 800bf6a:	e7b6      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bf6c:	680b      	ldr	r3, [r1, #0]
 800bf6e:	4a7c      	ldr	r2, [pc, #496]	; (800c160 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d01a      	beq.n	800bfaa <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800bf74:	4a7b      	ldr	r2, [pc, #492]	; (800c164 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d022      	beq.n	800bfc0 <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800bf7a:	4a7b      	ldr	r2, [pc, #492]	; (800c168 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d02b      	beq.n	800bfd8 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800bf80:	4a7a      	ldr	r2, [pc, #488]	; (800c16c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d034      	beq.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bf86:	4a7a      	ldr	r2, [pc, #488]	; (800c170 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d03d      	beq.n	800c008 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800bf8c:	4a79      	ldr	r2, [pc, #484]	; (800c174 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d1a3      	bne.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bf92:	4a79      	ldr	r2, [pc, #484]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bf94:	23a8      	movs	r3, #168	; 0xa8
 800bf96:	58d4      	ldr	r4, [r2, r3]
 800bf98:	4d78      	ldr	r5, [pc, #480]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bf9a:	402c      	ands	r4, r5
 800bf9c:	50d4      	str	r4, [r2, r3]
 800bf9e:	58d5      	ldr	r5, [r2, r3]
 800bfa0:	2490      	movs	r4, #144	; 0x90
 800bfa2:	0124      	lsls	r4, r4, #4
 800bfa4:	432c      	orrs	r4, r5
 800bfa6:	50d4      	str	r4, [r2, r3]
 800bfa8:	e797      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bfaa:	4a75      	ldr	r2, [pc, #468]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bfac:	23a8      	movs	r3, #168	; 0xa8
 800bfae:	58d4      	ldr	r4, [r2, r3]
 800bfb0:	250f      	movs	r5, #15
 800bfb2:	43ac      	bics	r4, r5
 800bfb4:	50d4      	str	r4, [r2, r3]
 800bfb6:	58d4      	ldr	r4, [r2, r3]
 800bfb8:	3d06      	subs	r5, #6
 800bfba:	432c      	orrs	r4, r5
 800bfbc:	50d4      	str	r4, [r2, r3]
 800bfbe:	e78c      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bfc0:	4a6f      	ldr	r2, [pc, #444]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bfc2:	23a8      	movs	r3, #168	; 0xa8
 800bfc4:	58d4      	ldr	r4, [r2, r3]
 800bfc6:	4d6d      	ldr	r5, [pc, #436]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bfc8:	402c      	ands	r4, r5
 800bfca:	50d4      	str	r4, [r2, r3]
 800bfcc:	58d5      	ldr	r5, [r2, r3]
 800bfce:	2490      	movs	r4, #144	; 0x90
 800bfd0:	0124      	lsls	r4, r4, #4
 800bfd2:	432c      	orrs	r4, r5
 800bfd4:	50d4      	str	r4, [r2, r3]
 800bfd6:	e780      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bfd8:	4a69      	ldr	r2, [pc, #420]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bfda:	23a8      	movs	r3, #168	; 0xa8
 800bfdc:	58d4      	ldr	r4, [r2, r3]
 800bfde:	4d69      	ldr	r5, [pc, #420]	; (800c184 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bfe0:	402c      	ands	r4, r5
 800bfe2:	50d4      	str	r4, [r2, r3]
 800bfe4:	58d5      	ldr	r5, [r2, r3]
 800bfe6:	2490      	movs	r4, #144	; 0x90
 800bfe8:	0324      	lsls	r4, r4, #12
 800bfea:	432c      	orrs	r4, r5
 800bfec:	50d4      	str	r4, [r2, r3]
 800bfee:	e774      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bff0:	4a63      	ldr	r2, [pc, #396]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bff2:	23a8      	movs	r3, #168	; 0xa8
 800bff4:	58d4      	ldr	r4, [r2, r3]
 800bff6:	4d64      	ldr	r5, [pc, #400]	; (800c188 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bff8:	402c      	ands	r4, r5
 800bffa:	50d4      	str	r4, [r2, r3]
 800bffc:	58d5      	ldr	r5, [r2, r3]
 800bffe:	2490      	movs	r4, #144	; 0x90
 800c000:	0424      	lsls	r4, r4, #16
 800c002:	432c      	orrs	r4, r5
 800c004:	50d4      	str	r4, [r2, r3]
 800c006:	e768      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c008:	4a5b      	ldr	r2, [pc, #364]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c00a:	23a8      	movs	r3, #168	; 0xa8
 800c00c:	58d4      	ldr	r4, [r2, r3]
 800c00e:	25f0      	movs	r5, #240	; 0xf0
 800c010:	43ac      	bics	r4, r5
 800c012:	50d4      	str	r4, [r2, r3]
 800c014:	58d4      	ldr	r4, [r2, r3]
 800c016:	3d60      	subs	r5, #96	; 0x60
 800c018:	432c      	orrs	r4, r5
 800c01a:	50d4      	str	r4, [r2, r3]
 800c01c:	e75d      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c01e:	680b      	ldr	r3, [r1, #0]
 800c020:	4a4f      	ldr	r2, [pc, #316]	; (800c160 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d01b      	beq.n	800c05e <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c026:	4a4f      	ldr	r2, [pc, #316]	; (800c164 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d023      	beq.n	800c074 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c02c:	4a4e      	ldr	r2, [pc, #312]	; (800c168 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d02c      	beq.n	800c08c <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c032:	4a4e      	ldr	r2, [pc, #312]	; (800c16c <RemapAndLinkDMAtoUARTRx+0x340>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d035      	beq.n	800c0a4 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c038:	4a4d      	ldr	r2, [pc, #308]	; (800c170 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d03e      	beq.n	800c0bc <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c03e:	4a4d      	ldr	r2, [pc, #308]	; (800c174 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d000      	beq.n	800c046 <RemapAndLinkDMAtoUARTRx+0x21a>
 800c044:	e749      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c046:	4a4c      	ldr	r2, [pc, #304]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c048:	23a8      	movs	r3, #168	; 0xa8
 800c04a:	58d4      	ldr	r4, [r2, r3]
 800c04c:	4d4b      	ldr	r5, [pc, #300]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800c04e:	402c      	ands	r4, r5
 800c050:	50d4      	str	r4, [r2, r3]
 800c052:	58d5      	ldr	r5, [r2, r3]
 800c054:	24a0      	movs	r4, #160	; 0xa0
 800c056:	0124      	lsls	r4, r4, #4
 800c058:	432c      	orrs	r4, r5
 800c05a:	50d4      	str	r4, [r2, r3]
 800c05c:	e73d      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c05e:	4a48      	ldr	r2, [pc, #288]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c060:	23a8      	movs	r3, #168	; 0xa8
 800c062:	58d4      	ldr	r4, [r2, r3]
 800c064:	250f      	movs	r5, #15
 800c066:	43ac      	bics	r4, r5
 800c068:	50d4      	str	r4, [r2, r3]
 800c06a:	58d4      	ldr	r4, [r2, r3]
 800c06c:	3d05      	subs	r5, #5
 800c06e:	432c      	orrs	r4, r5
 800c070:	50d4      	str	r4, [r2, r3]
 800c072:	e732      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c074:	4a42      	ldr	r2, [pc, #264]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c076:	23a8      	movs	r3, #168	; 0xa8
 800c078:	58d4      	ldr	r4, [r2, r3]
 800c07a:	4d40      	ldr	r5, [pc, #256]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800c07c:	402c      	ands	r4, r5
 800c07e:	50d4      	str	r4, [r2, r3]
 800c080:	58d5      	ldr	r5, [r2, r3]
 800c082:	24a0      	movs	r4, #160	; 0xa0
 800c084:	0124      	lsls	r4, r4, #4
 800c086:	432c      	orrs	r4, r5
 800c088:	50d4      	str	r4, [r2, r3]
 800c08a:	e726      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c08c:	4a3c      	ldr	r2, [pc, #240]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c08e:	23a8      	movs	r3, #168	; 0xa8
 800c090:	58d4      	ldr	r4, [r2, r3]
 800c092:	4d3c      	ldr	r5, [pc, #240]	; (800c184 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c094:	402c      	ands	r4, r5
 800c096:	50d4      	str	r4, [r2, r3]
 800c098:	58d5      	ldr	r5, [r2, r3]
 800c09a:	24a0      	movs	r4, #160	; 0xa0
 800c09c:	0324      	lsls	r4, r4, #12
 800c09e:	432c      	orrs	r4, r5
 800c0a0:	50d4      	str	r4, [r2, r3]
 800c0a2:	e71a      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c0a4:	4a36      	ldr	r2, [pc, #216]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c0a6:	23a8      	movs	r3, #168	; 0xa8
 800c0a8:	58d4      	ldr	r4, [r2, r3]
 800c0aa:	4d37      	ldr	r5, [pc, #220]	; (800c188 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c0ac:	402c      	ands	r4, r5
 800c0ae:	50d4      	str	r4, [r2, r3]
 800c0b0:	58d5      	ldr	r5, [r2, r3]
 800c0b2:	24a0      	movs	r4, #160	; 0xa0
 800c0b4:	0424      	lsls	r4, r4, #16
 800c0b6:	432c      	orrs	r4, r5
 800c0b8:	50d4      	str	r4, [r2, r3]
 800c0ba:	e70e      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c0bc:	4a2e      	ldr	r2, [pc, #184]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c0be:	23a8      	movs	r3, #168	; 0xa8
 800c0c0:	58d4      	ldr	r4, [r2, r3]
 800c0c2:	25f0      	movs	r5, #240	; 0xf0
 800c0c4:	43ac      	bics	r4, r5
 800c0c6:	50d4      	str	r4, [r2, r3]
 800c0c8:	58d4      	ldr	r4, [r2, r3]
 800c0ca:	3d50      	subs	r5, #80	; 0x50
 800c0cc:	432c      	orrs	r4, r5
 800c0ce:	50d4      	str	r4, [r2, r3]
 800c0d0:	e703      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c0d2:	680b      	ldr	r3, [r1, #0]
 800c0d4:	4a22      	ldr	r2, [pc, #136]	; (800c160 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d01b      	beq.n	800c112 <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c0da:	4a22      	ldr	r2, [pc, #136]	; (800c164 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d023      	beq.n	800c128 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c0e0:	4a21      	ldr	r2, [pc, #132]	; (800c168 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d052      	beq.n	800c18c <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c0e6:	4a21      	ldr	r2, [pc, #132]	; (800c16c <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d05b      	beq.n	800c1a4 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c0ec:	4a20      	ldr	r2, [pc, #128]	; (800c170 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d064      	beq.n	800c1bc <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c0f2:	4a20      	ldr	r2, [pc, #128]	; (800c174 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d000      	beq.n	800c0fa <RemapAndLinkDMAtoUARTRx+0x2ce>
 800c0f8:	e6ef      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c0fa:	4a1f      	ldr	r2, [pc, #124]	; (800c178 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c0fc:	23a8      	movs	r3, #168	; 0xa8
 800c0fe:	58d4      	ldr	r4, [r2, r3]
 800c100:	4d1e      	ldr	r5, [pc, #120]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800c102:	402c      	ands	r4, r5
 800c104:	50d4      	str	r4, [r2, r3]
 800c106:	58d5      	ldr	r5, [r2, r3]
 800c108:	24b0      	movs	r4, #176	; 0xb0
 800c10a:	0124      	lsls	r4, r4, #4
 800c10c:	432c      	orrs	r4, r5
 800c10e:	50d4      	str	r4, [r2, r3]
 800c110:	e6e3      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c112:	4a1b      	ldr	r2, [pc, #108]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c114:	23a8      	movs	r3, #168	; 0xa8
 800c116:	58d4      	ldr	r4, [r2, r3]
 800c118:	250f      	movs	r5, #15
 800c11a:	43ac      	bics	r4, r5
 800c11c:	50d4      	str	r4, [r2, r3]
 800c11e:	58d4      	ldr	r4, [r2, r3]
 800c120:	3d04      	subs	r5, #4
 800c122:	432c      	orrs	r4, r5
 800c124:	50d4      	str	r4, [r2, r3]
 800c126:	e6d8      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c128:	4a15      	ldr	r2, [pc, #84]	; (800c180 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c12a:	23a8      	movs	r3, #168	; 0xa8
 800c12c:	58d4      	ldr	r4, [r2, r3]
 800c12e:	4d13      	ldr	r5, [pc, #76]	; (800c17c <RemapAndLinkDMAtoUARTRx+0x350>)
 800c130:	402c      	ands	r4, r5
 800c132:	50d4      	str	r4, [r2, r3]
 800c134:	58d5      	ldr	r5, [r2, r3]
 800c136:	24b0      	movs	r4, #176	; 0xb0
 800c138:	0124      	lsls	r4, r4, #4
 800c13a:	432c      	orrs	r4, r5
 800c13c:	50d4      	str	r4, [r2, r3]
 800c13e:	e6cc      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
 800c140:	40013800 	.word	0x40013800
 800c144:	40004400 	.word	0x40004400
 800c148:	40004800 	.word	0x40004800
 800c14c:	40004c00 	.word	0x40004c00
 800c150:	40005000 	.word	0x40005000
 800c154:	40011400 	.word	0x40011400
 800c158:	40011800 	.word	0x40011800
 800c15c:	40011c00 	.word	0x40011c00
 800c160:	40020008 	.word	0x40020008
 800c164:	40020030 	.word	0x40020030
 800c168:	40020058 	.word	0x40020058
 800c16c:	4002006c 	.word	0x4002006c
 800c170:	4002041c 	.word	0x4002041c
 800c174:	40020430 	.word	0x40020430
 800c178:	40020400 	.word	0x40020400
 800c17c:	fffff0ff 	.word	0xfffff0ff
 800c180:	40020000 	.word	0x40020000
 800c184:	fff0ffff 	.word	0xfff0ffff
 800c188:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c18c:	4ab4      	ldr	r2, [pc, #720]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c18e:	23a8      	movs	r3, #168	; 0xa8
 800c190:	58d4      	ldr	r4, [r2, r3]
 800c192:	4db4      	ldr	r5, [pc, #720]	; (800c464 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c194:	402c      	ands	r4, r5
 800c196:	50d4      	str	r4, [r2, r3]
 800c198:	58d5      	ldr	r5, [r2, r3]
 800c19a:	24b0      	movs	r4, #176	; 0xb0
 800c19c:	0324      	lsls	r4, r4, #12
 800c19e:	432c      	orrs	r4, r5
 800c1a0:	50d4      	str	r4, [r2, r3]
 800c1a2:	e69a      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c1a4:	4aae      	ldr	r2, [pc, #696]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c1a6:	23a8      	movs	r3, #168	; 0xa8
 800c1a8:	58d4      	ldr	r4, [r2, r3]
 800c1aa:	4daf      	ldr	r5, [pc, #700]	; (800c468 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c1ac:	402c      	ands	r4, r5
 800c1ae:	50d4      	str	r4, [r2, r3]
 800c1b0:	58d5      	ldr	r5, [r2, r3]
 800c1b2:	24b0      	movs	r4, #176	; 0xb0
 800c1b4:	0424      	lsls	r4, r4, #16
 800c1b6:	432c      	orrs	r4, r5
 800c1b8:	50d4      	str	r4, [r2, r3]
 800c1ba:	e68e      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c1bc:	4aab      	ldr	r2, [pc, #684]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c1be:	23a8      	movs	r3, #168	; 0xa8
 800c1c0:	58d4      	ldr	r4, [r2, r3]
 800c1c2:	25f0      	movs	r5, #240	; 0xf0
 800c1c4:	43ac      	bics	r4, r5
 800c1c6:	50d4      	str	r4, [r2, r3]
 800c1c8:	58d4      	ldr	r4, [r2, r3]
 800c1ca:	3d40      	subs	r5, #64	; 0x40
 800c1cc:	432c      	orrs	r4, r5
 800c1ce:	50d4      	str	r4, [r2, r3]
 800c1d0:	e683      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c1d2:	680b      	ldr	r3, [r1, #0]
 800c1d4:	4aa6      	ldr	r2, [pc, #664]	; (800c470 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d01b      	beq.n	800c212 <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c1da:	4aa6      	ldr	r2, [pc, #664]	; (800c474 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d023      	beq.n	800c228 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c1e0:	4aa5      	ldr	r2, [pc, #660]	; (800c478 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d02c      	beq.n	800c240 <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c1e6:	4aa5      	ldr	r2, [pc, #660]	; (800c47c <RemapAndLinkDMAtoUARTRx+0x650>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d035      	beq.n	800c258 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c1ec:	4aa4      	ldr	r2, [pc, #656]	; (800c480 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d03e      	beq.n	800c270 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c1f2:	4aa4      	ldr	r2, [pc, #656]	; (800c484 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d000      	beq.n	800c1fa <RemapAndLinkDMAtoUARTRx+0x3ce>
 800c1f8:	e66f      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c1fa:	4a9c      	ldr	r2, [pc, #624]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c1fc:	23a8      	movs	r3, #168	; 0xa8
 800c1fe:	58d4      	ldr	r4, [r2, r3]
 800c200:	4da1      	ldr	r5, [pc, #644]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c202:	402c      	ands	r4, r5
 800c204:	50d4      	str	r4, [r2, r3]
 800c206:	58d5      	ldr	r5, [r2, r3]
 800c208:	24c0      	movs	r4, #192	; 0xc0
 800c20a:	0124      	lsls	r4, r4, #4
 800c20c:	432c      	orrs	r4, r5
 800c20e:	50d4      	str	r4, [r2, r3]
 800c210:	e663      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c212:	4a93      	ldr	r2, [pc, #588]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c214:	23a8      	movs	r3, #168	; 0xa8
 800c216:	58d4      	ldr	r4, [r2, r3]
 800c218:	250f      	movs	r5, #15
 800c21a:	43ac      	bics	r4, r5
 800c21c:	50d4      	str	r4, [r2, r3]
 800c21e:	58d4      	ldr	r4, [r2, r3]
 800c220:	3d03      	subs	r5, #3
 800c222:	432c      	orrs	r4, r5
 800c224:	50d4      	str	r4, [r2, r3]
 800c226:	e658      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c228:	4a8d      	ldr	r2, [pc, #564]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c22a:	23a8      	movs	r3, #168	; 0xa8
 800c22c:	58d4      	ldr	r4, [r2, r3]
 800c22e:	4d96      	ldr	r5, [pc, #600]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c230:	402c      	ands	r4, r5
 800c232:	50d4      	str	r4, [r2, r3]
 800c234:	58d5      	ldr	r5, [r2, r3]
 800c236:	24c0      	movs	r4, #192	; 0xc0
 800c238:	0124      	lsls	r4, r4, #4
 800c23a:	432c      	orrs	r4, r5
 800c23c:	50d4      	str	r4, [r2, r3]
 800c23e:	e64c      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c240:	4a87      	ldr	r2, [pc, #540]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c242:	23a8      	movs	r3, #168	; 0xa8
 800c244:	58d4      	ldr	r4, [r2, r3]
 800c246:	4d87      	ldr	r5, [pc, #540]	; (800c464 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c248:	402c      	ands	r4, r5
 800c24a:	50d4      	str	r4, [r2, r3]
 800c24c:	58d5      	ldr	r5, [r2, r3]
 800c24e:	24c0      	movs	r4, #192	; 0xc0
 800c250:	0324      	lsls	r4, r4, #12
 800c252:	432c      	orrs	r4, r5
 800c254:	50d4      	str	r4, [r2, r3]
 800c256:	e640      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c258:	4a81      	ldr	r2, [pc, #516]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c25a:	23a8      	movs	r3, #168	; 0xa8
 800c25c:	58d4      	ldr	r4, [r2, r3]
 800c25e:	4d82      	ldr	r5, [pc, #520]	; (800c468 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c260:	402c      	ands	r4, r5
 800c262:	50d4      	str	r4, [r2, r3]
 800c264:	58d5      	ldr	r5, [r2, r3]
 800c266:	24c0      	movs	r4, #192	; 0xc0
 800c268:	0424      	lsls	r4, r4, #16
 800c26a:	432c      	orrs	r4, r5
 800c26c:	50d4      	str	r4, [r2, r3]
 800c26e:	e634      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c270:	4a7e      	ldr	r2, [pc, #504]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c272:	23a8      	movs	r3, #168	; 0xa8
 800c274:	58d4      	ldr	r4, [r2, r3]
 800c276:	25f0      	movs	r5, #240	; 0xf0
 800c278:	43ac      	bics	r4, r5
 800c27a:	50d4      	str	r4, [r2, r3]
 800c27c:	58d4      	ldr	r4, [r2, r3]
 800c27e:	3d30      	subs	r5, #48	; 0x30
 800c280:	432c      	orrs	r4, r5
 800c282:	50d4      	str	r4, [r2, r3]
 800c284:	e629      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c286:	680b      	ldr	r3, [r1, #0]
 800c288:	4a79      	ldr	r2, [pc, #484]	; (800c470 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d01b      	beq.n	800c2c6 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c28e:	4a79      	ldr	r2, [pc, #484]	; (800c474 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d023      	beq.n	800c2dc <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c294:	4a78      	ldr	r2, [pc, #480]	; (800c478 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d02c      	beq.n	800c2f4 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c29a:	4a78      	ldr	r2, [pc, #480]	; (800c47c <RemapAndLinkDMAtoUARTRx+0x650>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d035      	beq.n	800c30c <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c2a0:	4a77      	ldr	r2, [pc, #476]	; (800c480 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d03e      	beq.n	800c324 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c2a6:	4a77      	ldr	r2, [pc, #476]	; (800c484 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d000      	beq.n	800c2ae <RemapAndLinkDMAtoUARTRx+0x482>
 800c2ac:	e615      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c2ae:	4a6f      	ldr	r2, [pc, #444]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c2b0:	23a8      	movs	r3, #168	; 0xa8
 800c2b2:	58d4      	ldr	r4, [r2, r3]
 800c2b4:	4d74      	ldr	r5, [pc, #464]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c2b6:	402c      	ands	r4, r5
 800c2b8:	50d4      	str	r4, [r2, r3]
 800c2ba:	58d5      	ldr	r5, [r2, r3]
 800c2bc:	24d0      	movs	r4, #208	; 0xd0
 800c2be:	0124      	lsls	r4, r4, #4
 800c2c0:	432c      	orrs	r4, r5
 800c2c2:	50d4      	str	r4, [r2, r3]
 800c2c4:	e609      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c2c6:	4a66      	ldr	r2, [pc, #408]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2c8:	23a8      	movs	r3, #168	; 0xa8
 800c2ca:	58d4      	ldr	r4, [r2, r3]
 800c2cc:	250f      	movs	r5, #15
 800c2ce:	43ac      	bics	r4, r5
 800c2d0:	50d4      	str	r4, [r2, r3]
 800c2d2:	58d4      	ldr	r4, [r2, r3]
 800c2d4:	3d02      	subs	r5, #2
 800c2d6:	432c      	orrs	r4, r5
 800c2d8:	50d4      	str	r4, [r2, r3]
 800c2da:	e5fe      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c2dc:	4a60      	ldr	r2, [pc, #384]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2de:	23a8      	movs	r3, #168	; 0xa8
 800c2e0:	58d4      	ldr	r4, [r2, r3]
 800c2e2:	4d69      	ldr	r5, [pc, #420]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c2e4:	402c      	ands	r4, r5
 800c2e6:	50d4      	str	r4, [r2, r3]
 800c2e8:	58d5      	ldr	r5, [r2, r3]
 800c2ea:	24d0      	movs	r4, #208	; 0xd0
 800c2ec:	0124      	lsls	r4, r4, #4
 800c2ee:	432c      	orrs	r4, r5
 800c2f0:	50d4      	str	r4, [r2, r3]
 800c2f2:	e5f2      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c2f4:	4a5a      	ldr	r2, [pc, #360]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2f6:	23a8      	movs	r3, #168	; 0xa8
 800c2f8:	58d4      	ldr	r4, [r2, r3]
 800c2fa:	4d5a      	ldr	r5, [pc, #360]	; (800c464 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c2fc:	402c      	ands	r4, r5
 800c2fe:	50d4      	str	r4, [r2, r3]
 800c300:	58d5      	ldr	r5, [r2, r3]
 800c302:	24d0      	movs	r4, #208	; 0xd0
 800c304:	0324      	lsls	r4, r4, #12
 800c306:	432c      	orrs	r4, r5
 800c308:	50d4      	str	r4, [r2, r3]
 800c30a:	e5e6      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c30c:	4a54      	ldr	r2, [pc, #336]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c30e:	23a8      	movs	r3, #168	; 0xa8
 800c310:	58d4      	ldr	r4, [r2, r3]
 800c312:	4d55      	ldr	r5, [pc, #340]	; (800c468 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c314:	402c      	ands	r4, r5
 800c316:	50d4      	str	r4, [r2, r3]
 800c318:	58d5      	ldr	r5, [r2, r3]
 800c31a:	24d0      	movs	r4, #208	; 0xd0
 800c31c:	0424      	lsls	r4, r4, #16
 800c31e:	432c      	orrs	r4, r5
 800c320:	50d4      	str	r4, [r2, r3]
 800c322:	e5da      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c324:	4a51      	ldr	r2, [pc, #324]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c326:	23a8      	movs	r3, #168	; 0xa8
 800c328:	58d4      	ldr	r4, [r2, r3]
 800c32a:	25f0      	movs	r5, #240	; 0xf0
 800c32c:	43ac      	bics	r4, r5
 800c32e:	50d4      	str	r4, [r2, r3]
 800c330:	58d4      	ldr	r4, [r2, r3]
 800c332:	3d20      	subs	r5, #32
 800c334:	432c      	orrs	r4, r5
 800c336:	50d4      	str	r4, [r2, r3]
 800c338:	e5cf      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c33a:	680b      	ldr	r3, [r1, #0]
 800c33c:	4a4c      	ldr	r2, [pc, #304]	; (800c470 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d01b      	beq.n	800c37a <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c342:	4a4c      	ldr	r2, [pc, #304]	; (800c474 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d023      	beq.n	800c390 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c348:	4a4b      	ldr	r2, [pc, #300]	; (800c478 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d02c      	beq.n	800c3a8 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c34e:	4a4b      	ldr	r2, [pc, #300]	; (800c47c <RemapAndLinkDMAtoUARTRx+0x650>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d035      	beq.n	800c3c0 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c354:	4a4a      	ldr	r2, [pc, #296]	; (800c480 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d03e      	beq.n	800c3d8 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c35a:	4a4a      	ldr	r2, [pc, #296]	; (800c484 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d000      	beq.n	800c362 <RemapAndLinkDMAtoUARTRx+0x536>
 800c360:	e5bb      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c362:	4a42      	ldr	r2, [pc, #264]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c364:	23a8      	movs	r3, #168	; 0xa8
 800c366:	58d4      	ldr	r4, [r2, r3]
 800c368:	4d47      	ldr	r5, [pc, #284]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c36a:	402c      	ands	r4, r5
 800c36c:	50d4      	str	r4, [r2, r3]
 800c36e:	58d5      	ldr	r5, [r2, r3]
 800c370:	24e0      	movs	r4, #224	; 0xe0
 800c372:	0124      	lsls	r4, r4, #4
 800c374:	432c      	orrs	r4, r5
 800c376:	50d4      	str	r4, [r2, r3]
 800c378:	e5af      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c37a:	4a39      	ldr	r2, [pc, #228]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c37c:	23a8      	movs	r3, #168	; 0xa8
 800c37e:	58d4      	ldr	r4, [r2, r3]
 800c380:	250f      	movs	r5, #15
 800c382:	43ac      	bics	r4, r5
 800c384:	50d4      	str	r4, [r2, r3]
 800c386:	58d4      	ldr	r4, [r2, r3]
 800c388:	3d01      	subs	r5, #1
 800c38a:	432c      	orrs	r4, r5
 800c38c:	50d4      	str	r4, [r2, r3]
 800c38e:	e5a4      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c390:	4a33      	ldr	r2, [pc, #204]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c392:	23a8      	movs	r3, #168	; 0xa8
 800c394:	58d4      	ldr	r4, [r2, r3]
 800c396:	4d3c      	ldr	r5, [pc, #240]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c398:	402c      	ands	r4, r5
 800c39a:	50d4      	str	r4, [r2, r3]
 800c39c:	58d5      	ldr	r5, [r2, r3]
 800c39e:	24e0      	movs	r4, #224	; 0xe0
 800c3a0:	0124      	lsls	r4, r4, #4
 800c3a2:	432c      	orrs	r4, r5
 800c3a4:	50d4      	str	r4, [r2, r3]
 800c3a6:	e598      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c3a8:	4a2d      	ldr	r2, [pc, #180]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c3aa:	23a8      	movs	r3, #168	; 0xa8
 800c3ac:	58d4      	ldr	r4, [r2, r3]
 800c3ae:	4d2d      	ldr	r5, [pc, #180]	; (800c464 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c3b0:	402c      	ands	r4, r5
 800c3b2:	50d4      	str	r4, [r2, r3]
 800c3b4:	58d5      	ldr	r5, [r2, r3]
 800c3b6:	24e0      	movs	r4, #224	; 0xe0
 800c3b8:	0324      	lsls	r4, r4, #12
 800c3ba:	432c      	orrs	r4, r5
 800c3bc:	50d4      	str	r4, [r2, r3]
 800c3be:	e58c      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c3c0:	4a27      	ldr	r2, [pc, #156]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c3c2:	23a8      	movs	r3, #168	; 0xa8
 800c3c4:	58d4      	ldr	r4, [r2, r3]
 800c3c6:	4d28      	ldr	r5, [pc, #160]	; (800c468 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c3c8:	402c      	ands	r4, r5
 800c3ca:	50d4      	str	r4, [r2, r3]
 800c3cc:	58d5      	ldr	r5, [r2, r3]
 800c3ce:	24e0      	movs	r4, #224	; 0xe0
 800c3d0:	0424      	lsls	r4, r4, #16
 800c3d2:	432c      	orrs	r4, r5
 800c3d4:	50d4      	str	r4, [r2, r3]
 800c3d6:	e580      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c3d8:	4a24      	ldr	r2, [pc, #144]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c3da:	23a8      	movs	r3, #168	; 0xa8
 800c3dc:	58d4      	ldr	r4, [r2, r3]
 800c3de:	25f0      	movs	r5, #240	; 0xf0
 800c3e0:	43ac      	bics	r4, r5
 800c3e2:	50d4      	str	r4, [r2, r3]
 800c3e4:	58d4      	ldr	r4, [r2, r3]
 800c3e6:	3d10      	subs	r5, #16
 800c3e8:	432c      	orrs	r4, r5
 800c3ea:	50d4      	str	r4, [r2, r3]
 800c3ec:	e575      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c3ee:	4a1c      	ldr	r2, [pc, #112]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c3f0:	23a8      	movs	r3, #168	; 0xa8
 800c3f2:	58d5      	ldr	r5, [r2, r3]
 800c3f4:	260f      	movs	r6, #15
 800c3f6:	43b5      	bics	r5, r6
 800c3f8:	50d5      	str	r5, [r2, r3]
 800c3fa:	58d4      	ldr	r4, [r2, r3]
 800c3fc:	4334      	orrs	r4, r6
 800c3fe:	50d4      	str	r4, [r2, r3]
 800c400:	e56b      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c402:	4a17      	ldr	r2, [pc, #92]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c404:	23a8      	movs	r3, #168	; 0xa8
 800c406:	58d4      	ldr	r4, [r2, r3]
 800c408:	4d1f      	ldr	r5, [pc, #124]	; (800c488 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c40a:	402c      	ands	r4, r5
 800c40c:	50d4      	str	r4, [r2, r3]
 800c40e:	58d5      	ldr	r5, [r2, r3]
 800c410:	24f0      	movs	r4, #240	; 0xf0
 800c412:	0124      	lsls	r4, r4, #4
 800c414:	432c      	orrs	r4, r5
 800c416:	50d4      	str	r4, [r2, r3]
 800c418:	e55f      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c41a:	4a11      	ldr	r2, [pc, #68]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c41c:	23a8      	movs	r3, #168	; 0xa8
 800c41e:	58d4      	ldr	r4, [r2, r3]
 800c420:	4d10      	ldr	r5, [pc, #64]	; (800c464 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c422:	402c      	ands	r4, r5
 800c424:	50d4      	str	r4, [r2, r3]
 800c426:	58d5      	ldr	r5, [r2, r3]
 800c428:	24f0      	movs	r4, #240	; 0xf0
 800c42a:	0324      	lsls	r4, r4, #12
 800c42c:	432c      	orrs	r4, r5
 800c42e:	50d4      	str	r4, [r2, r3]
 800c430:	e553      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c432:	4a0b      	ldr	r2, [pc, #44]	; (800c460 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c434:	23a8      	movs	r3, #168	; 0xa8
 800c436:	58d4      	ldr	r4, [r2, r3]
 800c438:	4d0b      	ldr	r5, [pc, #44]	; (800c468 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c43a:	402c      	ands	r4, r5
 800c43c:	50d4      	str	r4, [r2, r3]
 800c43e:	58d5      	ldr	r5, [r2, r3]
 800c440:	24f0      	movs	r4, #240	; 0xf0
 800c442:	0424      	lsls	r4, r4, #16
 800c444:	432c      	orrs	r4, r5
 800c446:	50d4      	str	r4, [r2, r3]
 800c448:	e547      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c44a:	4a08      	ldr	r2, [pc, #32]	; (800c46c <RemapAndLinkDMAtoUARTRx+0x640>)
 800c44c:	23a8      	movs	r3, #168	; 0xa8
 800c44e:	58d5      	ldr	r5, [r2, r3]
 800c450:	26f0      	movs	r6, #240	; 0xf0
 800c452:	43b5      	bics	r5, r6
 800c454:	50d5      	str	r5, [r2, r3]
 800c456:	58d4      	ldr	r4, [r2, r3]
 800c458:	4334      	orrs	r4, r6
 800c45a:	50d4      	str	r4, [r2, r3]
 800c45c:	e53d      	b.n	800beda <RemapAndLinkDMAtoUARTRx+0xae>
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	40020000 	.word	0x40020000
 800c464:	fff0ffff 	.word	0xfff0ffff
 800c468:	ff0fffff 	.word	0xff0fffff
 800c46c:	40020400 	.word	0x40020400
 800c470:	40020008 	.word	0x40020008
 800c474:	40020030 	.word	0x40020030
 800c478:	40020058 	.word	0x40020058
 800c47c:	4002006c 	.word	0x4002006c
 800c480:	4002041c 	.word	0x4002041c
 800c484:	40020430 	.word	0x40020430
 800c488:	fffff0ff 	.word	0xfffff0ff

0800c48c <DMA_MSG_RX_Setup>:
{	
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	0004      	movs	r4, r0
 800c490:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c492:	f7ff fccb 	bl	800be2c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c496:	2100      	movs	r1, #0
 800c498:	0028      	movs	r0, r5
 800c49a:	f7ff fc0d 	bl	800bcb8 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c49e:	0020      	movs	r0, r4
 800c4a0:	f7ff f816 	bl	800b4d0 <GetPort>
 800c4a4:	1e41      	subs	r1, r0, #1
 800c4a6:	0189      	lsls	r1, r1, #6
 800c4a8:	4803      	ldr	r0, [pc, #12]	; (800c4b8 <DMA_MSG_RX_Setup+0x2c>)
 800c4aa:	1809      	adds	r1, r1, r0
 800c4ac:	2240      	movs	r2, #64	; 0x40
 800c4ae:	0020      	movs	r0, r4
 800c4b0:	f006 fb86 	bl	8012bc0 <HAL_UART_Receive_DMA>
}
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	20001298 	.word	0x20001298

0800c4bc <SetupMessagingRxDMAs>:
{	
 800c4bc:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c4be:	4b17      	ldr	r3, [pc, #92]	; (800c51c <SetupMessagingRxDMAs+0x60>)
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d010      	beq.n	800c4e8 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800c4c6:	4b15      	ldr	r3, [pc, #84]	; (800c51c <SetupMessagingRxDMAs+0x60>)
 800c4c8:	789b      	ldrb	r3, [r3, #2]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d011      	beq.n	800c4f2 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <SetupMessagingRxDMAs+0x60>)
 800c4d0:	78db      	ldrb	r3, [r3, #3]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d012      	beq.n	800c4fc <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c4d6:	4b11      	ldr	r3, [pc, #68]	; (800c51c <SetupMessagingRxDMAs+0x60>)
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d013      	beq.n	800c506 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c4de:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <SetupMessagingRxDMAs+0x60>)
 800c4e0:	795b      	ldrb	r3, [r3, #5]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d014      	beq.n	800c510 <SetupMessagingRxDMAs+0x54>
}
 800c4e6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c4e8:	490d      	ldr	r1, [pc, #52]	; (800c520 <SetupMessagingRxDMAs+0x64>)
 800c4ea:	480e      	ldr	r0, [pc, #56]	; (800c524 <SetupMessagingRxDMAs+0x68>)
 800c4ec:	f7ff ffce 	bl	800c48c <DMA_MSG_RX_Setup>
 800c4f0:	e7e9      	b.n	800c4c6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c4f2:	490d      	ldr	r1, [pc, #52]	; (800c528 <SetupMessagingRxDMAs+0x6c>)
 800c4f4:	480d      	ldr	r0, [pc, #52]	; (800c52c <SetupMessagingRxDMAs+0x70>)
 800c4f6:	f7ff ffc9 	bl	800c48c <DMA_MSG_RX_Setup>
 800c4fa:	e7e8      	b.n	800c4ce <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c4fc:	490c      	ldr	r1, [pc, #48]	; (800c530 <SetupMessagingRxDMAs+0x74>)
 800c4fe:	480d      	ldr	r0, [pc, #52]	; (800c534 <SetupMessagingRxDMAs+0x78>)
 800c500:	f7ff ffc4 	bl	800c48c <DMA_MSG_RX_Setup>
 800c504:	e7e7      	b.n	800c4d6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c506:	490c      	ldr	r1, [pc, #48]	; (800c538 <SetupMessagingRxDMAs+0x7c>)
 800c508:	480c      	ldr	r0, [pc, #48]	; (800c53c <SetupMessagingRxDMAs+0x80>)
 800c50a:	f7ff ffbf 	bl	800c48c <DMA_MSG_RX_Setup>
 800c50e:	e7e6      	b.n	800c4de <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c510:	490b      	ldr	r1, [pc, #44]	; (800c540 <SetupMessagingRxDMAs+0x84>)
 800c512:	480c      	ldr	r0, [pc, #48]	; (800c544 <SetupMessagingRxDMAs+0x88>)
 800c514:	f7ff ffba 	bl	800c48c <DMA_MSG_RX_Setup>
}
 800c518:	e7e5      	b.n	800c4e6 <SetupMessagingRxDMAs+0x2a>
 800c51a:	46c0      	nop			; (mov r8, r8)
 800c51c:	200010c0 	.word	0x200010c0
 800c520:	200016a8 	.word	0x200016a8
 800c524:	20006a58 	.word	0x20006a58
 800c528:	200016e0 	.word	0x200016e0
 800c52c:	20006bb4 	.word	0x20006bb4
 800c530:	20001718 	.word	0x20001718
 800c534:	20006b44 	.word	0x20006b44
 800c538:	20001750 	.word	0x20001750
 800c53c:	200069a8 	.word	0x200069a8
 800c540:	20001788 	.word	0x20001788
 800c544:	20006acc 	.word	0x20006acc

0800c548 <DMA_STREAM_Setup>:
{	
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	0005      	movs	r5, r0
 800c54c:	000f      	movs	r7, r1
 800c54e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c550:	f7fe ffbe 	bl	800b4d0 <GetPort>
	hDMA = &streamDMA[port-1];
 800c554:	3801      	subs	r0, #1
 800c556:	00c4      	lsls	r4, r0, #3
 800c558:	1a24      	subs	r4, r4, r0
 800c55a:	00e4      	lsls	r4, r4, #3
 800c55c:	4809      	ldr	r0, [pc, #36]	; (800c584 <DMA_STREAM_Setup+0x3c>)
 800c55e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c560:	0021      	movs	r1, r4
 800c562:	0028      	movs	r0, r5
 800c564:	f7ff fc62 	bl	800be2c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c568:	2101      	movs	r1, #1
 800c56a:	0020      	movs	r0, r4
 800c56c:	f7ff fba4 	bl	800bcb8 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c570:	2369      	movs	r3, #105	; 0x69
 800c572:	2201      	movs	r2, #1
 800c574:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	3128      	adds	r1, #40	; 0x28
 800c57a:	0032      	movs	r2, r6
 800c57c:	0028      	movs	r0, r5
 800c57e:	f006 fb1f 	bl	8012bc0 <HAL_UART_Receive_DMA>
}
 800c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c584:	200018a0 	.word	0x200018a0

0800c588 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c588:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c58a:	6803      	ldr	r3, [r0, #0]
 800c58c:	4ac3      	ldr	r2, [pc, #780]	; (800c89c <RemapAndLinkDMAtoUARTTx+0x314>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d03e      	beq.n	800c610 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c592:	4ac3      	ldr	r2, [pc, #780]	; (800c8a0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d100      	bne.n	800c59a <RemapAndLinkDMAtoUARTTx+0x12>
 800c598:	e096      	b.n	800c6c8 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c59a:	4ac2      	ldr	r2, [pc, #776]	; (800c8a4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d100      	bne.n	800c5a2 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c5a0:	e0eb      	b.n	800c77a <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c5a2:	4ac1      	ldr	r2, [pc, #772]	; (800c8a8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d100      	bne.n	800c5aa <RemapAndLinkDMAtoUARTTx+0x22>
 800c5a8:	e141      	b.n	800c82e <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c5aa:	4ac0      	ldr	r2, [pc, #768]	; (800c8ac <RemapAndLinkDMAtoUARTTx+0x324>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d100      	bne.n	800c5b2 <RemapAndLinkDMAtoUARTTx+0x2a>
 800c5b0:	e1bd      	b.n	800c92e <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c5b2:	4abf      	ldr	r2, [pc, #764]	; (800c8b0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d100      	bne.n	800c5ba <RemapAndLinkDMAtoUARTTx+0x32>
 800c5b8:	e213      	b.n	800c9e2 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c5ba:	4abe      	ldr	r2, [pc, #760]	; (800c8b4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d100      	bne.n	800c5c2 <RemapAndLinkDMAtoUARTTx+0x3a>
 800c5c0:	e269      	b.n	800ca96 <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c5c2:	4abd      	ldr	r2, [pc, #756]	; (800c8b8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d136      	bne.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
 800c5c8:	680b      	ldr	r3, [r1, #0]
 800c5ca:	4abc      	ldr	r2, [pc, #752]	; (800c8bc <RemapAndLinkDMAtoUARTTx+0x334>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d100      	bne.n	800c5d2 <RemapAndLinkDMAtoUARTTx+0x4a>
 800c5d0:	e2bb      	b.n	800cb4a <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c5d2:	4abb      	ldr	r2, [pc, #748]	; (800c8c0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d100      	bne.n	800c5da <RemapAndLinkDMAtoUARTTx+0x52>
 800c5d8:	e2c1      	b.n	800cb5e <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c5da:	4aba      	ldr	r2, [pc, #744]	; (800c8c4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d100      	bne.n	800c5e2 <RemapAndLinkDMAtoUARTTx+0x5a>
 800c5e0:	e2c9      	b.n	800cb76 <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c5e2:	4ab9      	ldr	r2, [pc, #740]	; (800c8c8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d100      	bne.n	800c5ea <RemapAndLinkDMAtoUARTTx+0x62>
 800c5e8:	e2d1      	b.n	800cb8e <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c5ea:	4ab8      	ldr	r2, [pc, #736]	; (800c8cc <RemapAndLinkDMAtoUARTTx+0x344>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d100      	bne.n	800c5f2 <RemapAndLinkDMAtoUARTTx+0x6a>
 800c5f0:	e2d7      	b.n	800cba2 <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c5f2:	4ab7      	ldr	r2, [pc, #732]	; (800c8d0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d11e      	bne.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c5f8:	4ab6      	ldr	r2, [pc, #728]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c5fa:	23a8      	movs	r3, #168	; 0xa8
 800c5fc:	58d4      	ldr	r4, [r2, r3]
 800c5fe:	4db6      	ldr	r5, [pc, #728]	; (800c8d8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c600:	402c      	ands	r4, r5
 800c602:	50d4      	str	r4, [r2, r3]
 800c604:	58d5      	ldr	r5, [r2, r3]
 800c606:	24f0      	movs	r4, #240	; 0xf0
 800c608:	0324      	lsls	r4, r4, #12
 800c60a:	432c      	orrs	r4, r5
 800c60c:	50d4      	str	r4, [r2, r3]
 800c60e:	e012      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c610:	680b      	ldr	r3, [r1, #0]
 800c612:	4aaa      	ldr	r2, [pc, #680]	; (800c8bc <RemapAndLinkDMAtoUARTTx+0x334>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d011      	beq.n	800c63c <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c618:	4aa9      	ldr	r2, [pc, #676]	; (800c8c0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d019      	beq.n	800c652 <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c61e:	4aa9      	ldr	r2, [pc, #676]	; (800c8c4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d022      	beq.n	800c66a <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c624:	4aa8      	ldr	r2, [pc, #672]	; (800c8c8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d02b      	beq.n	800c682 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c62a:	4aa8      	ldr	r2, [pc, #672]	; (800c8cc <RemapAndLinkDMAtoUARTTx+0x344>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d033      	beq.n	800c698 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c630:	4aa7      	ldr	r2, [pc, #668]	; (800c8d0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d03c      	beq.n	800c6b0 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c636:	6601      	str	r1, [r0, #96]	; 0x60
 800c638:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c63c:	4aa7      	ldr	r2, [pc, #668]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c63e:	23a8      	movs	r3, #168	; 0xa8
 800c640:	58d4      	ldr	r4, [r2, r3]
 800c642:	25f0      	movs	r5, #240	; 0xf0
 800c644:	43ac      	bics	r4, r5
 800c646:	50d4      	str	r4, [r2, r3]
 800c648:	58d4      	ldr	r4, [r2, r3]
 800c64a:	3d70      	subs	r5, #112	; 0x70
 800c64c:	432c      	orrs	r4, r5
 800c64e:	50d4      	str	r4, [r2, r3]
 800c650:	e7f1      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c652:	4aa2      	ldr	r2, [pc, #648]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c654:	23a8      	movs	r3, #168	; 0xa8
 800c656:	58d4      	ldr	r4, [r2, r3]
 800c658:	4da1      	ldr	r5, [pc, #644]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c65a:	402c      	ands	r4, r5
 800c65c:	50d4      	str	r4, [r2, r3]
 800c65e:	58d5      	ldr	r5, [r2, r3]
 800c660:	2480      	movs	r4, #128	; 0x80
 800c662:	0224      	lsls	r4, r4, #8
 800c664:	432c      	orrs	r4, r5
 800c666:	50d4      	str	r4, [r2, r3]
 800c668:	e7e5      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c66a:	4a9c      	ldr	r2, [pc, #624]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c66c:	23a8      	movs	r3, #168	; 0xa8
 800c66e:	58d4      	ldr	r4, [r2, r3]
 800c670:	4d9c      	ldr	r5, [pc, #624]	; (800c8e4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c672:	402c      	ands	r4, r5
 800c674:	50d4      	str	r4, [r2, r3]
 800c676:	58d5      	ldr	r5, [r2, r3]
 800c678:	2480      	movs	r4, #128	; 0x80
 800c67a:	0524      	lsls	r4, r4, #20
 800c67c:	432c      	orrs	r4, r5
 800c67e:	50d4      	str	r4, [r2, r3]
 800c680:	e7d9      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c682:	4a94      	ldr	r2, [pc, #592]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c684:	23a8      	movs	r3, #168	; 0xa8
 800c686:	58d4      	ldr	r4, [r2, r3]
 800c688:	250f      	movs	r5, #15
 800c68a:	43ac      	bics	r4, r5
 800c68c:	50d4      	str	r4, [r2, r3]
 800c68e:	58d4      	ldr	r4, [r2, r3]
 800c690:	3d07      	subs	r5, #7
 800c692:	432c      	orrs	r4, r5
 800c694:	50d4      	str	r4, [r2, r3]
 800c696:	e7ce      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c698:	4a8e      	ldr	r2, [pc, #568]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c69a:	23a8      	movs	r3, #168	; 0xa8
 800c69c:	58d4      	ldr	r4, [r2, r3]
 800c69e:	4d90      	ldr	r5, [pc, #576]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c6a0:	402c      	ands	r4, r5
 800c6a2:	50d4      	str	r4, [r2, r3]
 800c6a4:	58d5      	ldr	r5, [r2, r3]
 800c6a6:	2480      	movs	r4, #128	; 0x80
 800c6a8:	0224      	lsls	r4, r4, #8
 800c6aa:	432c      	orrs	r4, r5
 800c6ac:	50d4      	str	r4, [r2, r3]
 800c6ae:	e7c2      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c6b0:	4a88      	ldr	r2, [pc, #544]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c6b2:	23a8      	movs	r3, #168	; 0xa8
 800c6b4:	58d4      	ldr	r4, [r2, r3]
 800c6b6:	4d88      	ldr	r5, [pc, #544]	; (800c8d8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c6b8:	402c      	ands	r4, r5
 800c6ba:	50d4      	str	r4, [r2, r3]
 800c6bc:	58d5      	ldr	r5, [r2, r3]
 800c6be:	2480      	movs	r4, #128	; 0x80
 800c6c0:	0324      	lsls	r4, r4, #12
 800c6c2:	432c      	orrs	r4, r5
 800c6c4:	50d4      	str	r4, [r2, r3]
 800c6c6:	e7b6      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c6c8:	680b      	ldr	r3, [r1, #0]
 800c6ca:	4a7c      	ldr	r2, [pc, #496]	; (800c8bc <RemapAndLinkDMAtoUARTTx+0x334>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d01a      	beq.n	800c706 <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c6d0:	4a7b      	ldr	r2, [pc, #492]	; (800c8c0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d022      	beq.n	800c71c <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c6d6:	4a7b      	ldr	r2, [pc, #492]	; (800c8c4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d02b      	beq.n	800c734 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c6dc:	4a7a      	ldr	r2, [pc, #488]	; (800c8c8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d034      	beq.n	800c74c <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c6e2:	4a7a      	ldr	r2, [pc, #488]	; (800c8cc <RemapAndLinkDMAtoUARTTx+0x344>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d03c      	beq.n	800c762 <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c6e8:	4a79      	ldr	r2, [pc, #484]	; (800c8d0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d1a3      	bne.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c6ee:	4a79      	ldr	r2, [pc, #484]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c6f0:	23a8      	movs	r3, #168	; 0xa8
 800c6f2:	58d4      	ldr	r4, [r2, r3]
 800c6f4:	4d78      	ldr	r5, [pc, #480]	; (800c8d8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c6f6:	402c      	ands	r4, r5
 800c6f8:	50d4      	str	r4, [r2, r3]
 800c6fa:	58d5      	ldr	r5, [r2, r3]
 800c6fc:	2490      	movs	r4, #144	; 0x90
 800c6fe:	0324      	lsls	r4, r4, #12
 800c700:	432c      	orrs	r4, r5
 800c702:	50d4      	str	r4, [r2, r3]
 800c704:	e797      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c706:	4a75      	ldr	r2, [pc, #468]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c708:	23a8      	movs	r3, #168	; 0xa8
 800c70a:	58d4      	ldr	r4, [r2, r3]
 800c70c:	25f0      	movs	r5, #240	; 0xf0
 800c70e:	43ac      	bics	r4, r5
 800c710:	50d4      	str	r4, [r2, r3]
 800c712:	58d4      	ldr	r4, [r2, r3]
 800c714:	3d60      	subs	r5, #96	; 0x60
 800c716:	432c      	orrs	r4, r5
 800c718:	50d4      	str	r4, [r2, r3]
 800c71a:	e78c      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c71c:	4a6f      	ldr	r2, [pc, #444]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c71e:	23a8      	movs	r3, #168	; 0xa8
 800c720:	58d4      	ldr	r4, [r2, r3]
 800c722:	4d6f      	ldr	r5, [pc, #444]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c724:	402c      	ands	r4, r5
 800c726:	50d4      	str	r4, [r2, r3]
 800c728:	58d5      	ldr	r5, [r2, r3]
 800c72a:	2490      	movs	r4, #144	; 0x90
 800c72c:	0224      	lsls	r4, r4, #8
 800c72e:	432c      	orrs	r4, r5
 800c730:	50d4      	str	r4, [r2, r3]
 800c732:	e780      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c734:	4a69      	ldr	r2, [pc, #420]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c736:	23a8      	movs	r3, #168	; 0xa8
 800c738:	58d4      	ldr	r4, [r2, r3]
 800c73a:	4d6a      	ldr	r5, [pc, #424]	; (800c8e4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c73c:	402c      	ands	r4, r5
 800c73e:	50d4      	str	r4, [r2, r3]
 800c740:	58d5      	ldr	r5, [r2, r3]
 800c742:	2490      	movs	r4, #144	; 0x90
 800c744:	0524      	lsls	r4, r4, #20
 800c746:	432c      	orrs	r4, r5
 800c748:	50d4      	str	r4, [r2, r3]
 800c74a:	e774      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c74c:	4a61      	ldr	r2, [pc, #388]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c74e:	23a8      	movs	r3, #168	; 0xa8
 800c750:	58d4      	ldr	r4, [r2, r3]
 800c752:	250f      	movs	r5, #15
 800c754:	43ac      	bics	r4, r5
 800c756:	50d4      	str	r4, [r2, r3]
 800c758:	58d4      	ldr	r4, [r2, r3]
 800c75a:	3d06      	subs	r5, #6
 800c75c:	432c      	orrs	r4, r5
 800c75e:	50d4      	str	r4, [r2, r3]
 800c760:	e769      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c762:	4a5c      	ldr	r2, [pc, #368]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c764:	23a8      	movs	r3, #168	; 0xa8
 800c766:	58d4      	ldr	r4, [r2, r3]
 800c768:	4d5d      	ldr	r5, [pc, #372]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c76a:	402c      	ands	r4, r5
 800c76c:	50d4      	str	r4, [r2, r3]
 800c76e:	58d5      	ldr	r5, [r2, r3]
 800c770:	2490      	movs	r4, #144	; 0x90
 800c772:	0224      	lsls	r4, r4, #8
 800c774:	432c      	orrs	r4, r5
 800c776:	50d4      	str	r4, [r2, r3]
 800c778:	e75d      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c77a:	680b      	ldr	r3, [r1, #0]
 800c77c:	4a4f      	ldr	r2, [pc, #316]	; (800c8bc <RemapAndLinkDMAtoUARTTx+0x334>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d01b      	beq.n	800c7ba <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c782:	4a4f      	ldr	r2, [pc, #316]	; (800c8c0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d023      	beq.n	800c7d0 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c788:	4a4e      	ldr	r2, [pc, #312]	; (800c8c4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d02c      	beq.n	800c7e8 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c78e:	4a4e      	ldr	r2, [pc, #312]	; (800c8c8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d035      	beq.n	800c800 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c794:	4a4d      	ldr	r2, [pc, #308]	; (800c8cc <RemapAndLinkDMAtoUARTTx+0x344>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d03d      	beq.n	800c816 <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c79a:	4a4d      	ldr	r2, [pc, #308]	; (800c8d0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d000      	beq.n	800c7a2 <RemapAndLinkDMAtoUARTTx+0x21a>
 800c7a0:	e749      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c7a2:	4a4c      	ldr	r2, [pc, #304]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c7a4:	23a8      	movs	r3, #168	; 0xa8
 800c7a6:	58d4      	ldr	r4, [r2, r3]
 800c7a8:	4d4b      	ldr	r5, [pc, #300]	; (800c8d8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c7aa:	402c      	ands	r4, r5
 800c7ac:	50d4      	str	r4, [r2, r3]
 800c7ae:	58d5      	ldr	r5, [r2, r3]
 800c7b0:	24a0      	movs	r4, #160	; 0xa0
 800c7b2:	0324      	lsls	r4, r4, #12
 800c7b4:	432c      	orrs	r4, r5
 800c7b6:	50d4      	str	r4, [r2, r3]
 800c7b8:	e73d      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c7ba:	4a48      	ldr	r2, [pc, #288]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c7bc:	23a8      	movs	r3, #168	; 0xa8
 800c7be:	58d4      	ldr	r4, [r2, r3]
 800c7c0:	25f0      	movs	r5, #240	; 0xf0
 800c7c2:	43ac      	bics	r4, r5
 800c7c4:	50d4      	str	r4, [r2, r3]
 800c7c6:	58d4      	ldr	r4, [r2, r3]
 800c7c8:	3d50      	subs	r5, #80	; 0x50
 800c7ca:	432c      	orrs	r4, r5
 800c7cc:	50d4      	str	r4, [r2, r3]
 800c7ce:	e732      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c7d0:	4a42      	ldr	r2, [pc, #264]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c7d2:	23a8      	movs	r3, #168	; 0xa8
 800c7d4:	58d4      	ldr	r4, [r2, r3]
 800c7d6:	4d42      	ldr	r5, [pc, #264]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c7d8:	402c      	ands	r4, r5
 800c7da:	50d4      	str	r4, [r2, r3]
 800c7dc:	58d5      	ldr	r5, [r2, r3]
 800c7de:	24a0      	movs	r4, #160	; 0xa0
 800c7e0:	0224      	lsls	r4, r4, #8
 800c7e2:	432c      	orrs	r4, r5
 800c7e4:	50d4      	str	r4, [r2, r3]
 800c7e6:	e726      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c7e8:	4a3c      	ldr	r2, [pc, #240]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c7ea:	23a8      	movs	r3, #168	; 0xa8
 800c7ec:	58d4      	ldr	r4, [r2, r3]
 800c7ee:	4d3d      	ldr	r5, [pc, #244]	; (800c8e4 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c7f0:	402c      	ands	r4, r5
 800c7f2:	50d4      	str	r4, [r2, r3]
 800c7f4:	58d5      	ldr	r5, [r2, r3]
 800c7f6:	24a0      	movs	r4, #160	; 0xa0
 800c7f8:	0524      	lsls	r4, r4, #20
 800c7fa:	432c      	orrs	r4, r5
 800c7fc:	50d4      	str	r4, [r2, r3]
 800c7fe:	e71a      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c800:	4a34      	ldr	r2, [pc, #208]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c802:	23a8      	movs	r3, #168	; 0xa8
 800c804:	58d4      	ldr	r4, [r2, r3]
 800c806:	250f      	movs	r5, #15
 800c808:	43ac      	bics	r4, r5
 800c80a:	50d4      	str	r4, [r2, r3]
 800c80c:	58d4      	ldr	r4, [r2, r3]
 800c80e:	3d05      	subs	r5, #5
 800c810:	432c      	orrs	r4, r5
 800c812:	50d4      	str	r4, [r2, r3]
 800c814:	e70f      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c816:	4a2f      	ldr	r2, [pc, #188]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c818:	23a8      	movs	r3, #168	; 0xa8
 800c81a:	58d4      	ldr	r4, [r2, r3]
 800c81c:	4d30      	ldr	r5, [pc, #192]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c81e:	402c      	ands	r4, r5
 800c820:	50d4      	str	r4, [r2, r3]
 800c822:	58d5      	ldr	r5, [r2, r3]
 800c824:	24a0      	movs	r4, #160	; 0xa0
 800c826:	0224      	lsls	r4, r4, #8
 800c828:	432c      	orrs	r4, r5
 800c82a:	50d4      	str	r4, [r2, r3]
 800c82c:	e703      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c82e:	680b      	ldr	r3, [r1, #0]
 800c830:	4a22      	ldr	r2, [pc, #136]	; (800c8bc <RemapAndLinkDMAtoUARTTx+0x334>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d01b      	beq.n	800c86e <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c836:	4a22      	ldr	r2, [pc, #136]	; (800c8c0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d023      	beq.n	800c884 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c83c:	4a21      	ldr	r2, [pc, #132]	; (800c8c4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d052      	beq.n	800c8e8 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c842:	4a21      	ldr	r2, [pc, #132]	; (800c8c8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d05b      	beq.n	800c900 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c848:	4a20      	ldr	r2, [pc, #128]	; (800c8cc <RemapAndLinkDMAtoUARTTx+0x344>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d063      	beq.n	800c916 <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c84e:	4a20      	ldr	r2, [pc, #128]	; (800c8d0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d000      	beq.n	800c856 <RemapAndLinkDMAtoUARTTx+0x2ce>
 800c854:	e6ef      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c856:	4a1f      	ldr	r2, [pc, #124]	; (800c8d4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c858:	23a8      	movs	r3, #168	; 0xa8
 800c85a:	58d4      	ldr	r4, [r2, r3]
 800c85c:	4d1e      	ldr	r5, [pc, #120]	; (800c8d8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c85e:	402c      	ands	r4, r5
 800c860:	50d4      	str	r4, [r2, r3]
 800c862:	58d5      	ldr	r5, [r2, r3]
 800c864:	24b0      	movs	r4, #176	; 0xb0
 800c866:	0324      	lsls	r4, r4, #12
 800c868:	432c      	orrs	r4, r5
 800c86a:	50d4      	str	r4, [r2, r3]
 800c86c:	e6e3      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c86e:	4a1b      	ldr	r2, [pc, #108]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c870:	23a8      	movs	r3, #168	; 0xa8
 800c872:	58d4      	ldr	r4, [r2, r3]
 800c874:	25f0      	movs	r5, #240	; 0xf0
 800c876:	43ac      	bics	r4, r5
 800c878:	50d4      	str	r4, [r2, r3]
 800c87a:	58d4      	ldr	r4, [r2, r3]
 800c87c:	3d40      	subs	r5, #64	; 0x40
 800c87e:	432c      	orrs	r4, r5
 800c880:	50d4      	str	r4, [r2, r3]
 800c882:	e6d8      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c884:	4a15      	ldr	r2, [pc, #84]	; (800c8dc <RemapAndLinkDMAtoUARTTx+0x354>)
 800c886:	23a8      	movs	r3, #168	; 0xa8
 800c888:	58d4      	ldr	r4, [r2, r3]
 800c88a:	4d15      	ldr	r5, [pc, #84]	; (800c8e0 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c88c:	402c      	ands	r4, r5
 800c88e:	50d4      	str	r4, [r2, r3]
 800c890:	58d5      	ldr	r5, [r2, r3]
 800c892:	24b0      	movs	r4, #176	; 0xb0
 800c894:	0224      	lsls	r4, r4, #8
 800c896:	432c      	orrs	r4, r5
 800c898:	50d4      	str	r4, [r2, r3]
 800c89a:	e6cc      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
 800c89c:	40013800 	.word	0x40013800
 800c8a0:	40004400 	.word	0x40004400
 800c8a4:	40004800 	.word	0x40004800
 800c8a8:	40004c00 	.word	0x40004c00
 800c8ac:	40005000 	.word	0x40005000
 800c8b0:	40011400 	.word	0x40011400
 800c8b4:	40011800 	.word	0x40011800
 800c8b8:	40011c00 	.word	0x40011c00
 800c8bc:	4002001c 	.word	0x4002001c
 800c8c0:	40020044 	.word	0x40020044
 800c8c4:	40020080 	.word	0x40020080
 800c8c8:	40020408 	.word	0x40020408
 800c8cc:	40020444 	.word	0x40020444
 800c8d0:	40020458 	.word	0x40020458
 800c8d4:	40020400 	.word	0x40020400
 800c8d8:	fff0ffff 	.word	0xfff0ffff
 800c8dc:	40020000 	.word	0x40020000
 800c8e0:	ffff0fff 	.word	0xffff0fff
 800c8e4:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c8e8:	4ab4      	ldr	r2, [pc, #720]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c8ea:	23a8      	movs	r3, #168	; 0xa8
 800c8ec:	58d4      	ldr	r4, [r2, r3]
 800c8ee:	4db4      	ldr	r5, [pc, #720]	; (800cbc0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c8f0:	402c      	ands	r4, r5
 800c8f2:	50d4      	str	r4, [r2, r3]
 800c8f4:	58d5      	ldr	r5, [r2, r3]
 800c8f6:	24b0      	movs	r4, #176	; 0xb0
 800c8f8:	0524      	lsls	r4, r4, #20
 800c8fa:	432c      	orrs	r4, r5
 800c8fc:	50d4      	str	r4, [r2, r3]
 800c8fe:	e69a      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c900:	4ab0      	ldr	r2, [pc, #704]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c902:	23a8      	movs	r3, #168	; 0xa8
 800c904:	58d4      	ldr	r4, [r2, r3]
 800c906:	250f      	movs	r5, #15
 800c908:	43ac      	bics	r4, r5
 800c90a:	50d4      	str	r4, [r2, r3]
 800c90c:	58d4      	ldr	r4, [r2, r3]
 800c90e:	3d04      	subs	r5, #4
 800c910:	432c      	orrs	r4, r5
 800c912:	50d4      	str	r4, [r2, r3]
 800c914:	e68f      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c916:	4aab      	ldr	r2, [pc, #684]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c918:	23a8      	movs	r3, #168	; 0xa8
 800c91a:	58d4      	ldr	r4, [r2, r3]
 800c91c:	4daa      	ldr	r5, [pc, #680]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c91e:	402c      	ands	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	58d5      	ldr	r5, [r2, r3]
 800c924:	24b0      	movs	r4, #176	; 0xb0
 800c926:	0224      	lsls	r4, r4, #8
 800c928:	432c      	orrs	r4, r5
 800c92a:	50d4      	str	r4, [r2, r3]
 800c92c:	e683      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c92e:	680b      	ldr	r3, [r1, #0]
 800c930:	4aa6      	ldr	r2, [pc, #664]	; (800cbcc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d01b      	beq.n	800c96e <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c936:	4aa6      	ldr	r2, [pc, #664]	; (800cbd0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d023      	beq.n	800c984 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c93c:	4aa5      	ldr	r2, [pc, #660]	; (800cbd4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d02c      	beq.n	800c99c <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c942:	4aa5      	ldr	r2, [pc, #660]	; (800cbd8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d035      	beq.n	800c9b4 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c948:	4aa4      	ldr	r2, [pc, #656]	; (800cbdc <RemapAndLinkDMAtoUARTTx+0x654>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d03d      	beq.n	800c9ca <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c94e:	4aa4      	ldr	r2, [pc, #656]	; (800cbe0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d000      	beq.n	800c956 <RemapAndLinkDMAtoUARTTx+0x3ce>
 800c954:	e66f      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c956:	4a9b      	ldr	r2, [pc, #620]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c958:	23a8      	movs	r3, #168	; 0xa8
 800c95a:	58d4      	ldr	r4, [r2, r3]
 800c95c:	4da1      	ldr	r5, [pc, #644]	; (800cbe4 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800c95e:	402c      	ands	r4, r5
 800c960:	50d4      	str	r4, [r2, r3]
 800c962:	58d5      	ldr	r5, [r2, r3]
 800c964:	24c0      	movs	r4, #192	; 0xc0
 800c966:	0324      	lsls	r4, r4, #12
 800c968:	432c      	orrs	r4, r5
 800c96a:	50d4      	str	r4, [r2, r3]
 800c96c:	e663      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c96e:	4a93      	ldr	r2, [pc, #588]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c970:	23a8      	movs	r3, #168	; 0xa8
 800c972:	58d4      	ldr	r4, [r2, r3]
 800c974:	25f0      	movs	r5, #240	; 0xf0
 800c976:	43ac      	bics	r4, r5
 800c978:	50d4      	str	r4, [r2, r3]
 800c97a:	58d4      	ldr	r4, [r2, r3]
 800c97c:	3d30      	subs	r5, #48	; 0x30
 800c97e:	432c      	orrs	r4, r5
 800c980:	50d4      	str	r4, [r2, r3]
 800c982:	e658      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c984:	4a8d      	ldr	r2, [pc, #564]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c986:	23a8      	movs	r3, #168	; 0xa8
 800c988:	58d4      	ldr	r4, [r2, r3]
 800c98a:	4d8f      	ldr	r5, [pc, #572]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c98c:	402c      	ands	r4, r5
 800c98e:	50d4      	str	r4, [r2, r3]
 800c990:	58d5      	ldr	r5, [r2, r3]
 800c992:	24c0      	movs	r4, #192	; 0xc0
 800c994:	0224      	lsls	r4, r4, #8
 800c996:	432c      	orrs	r4, r5
 800c998:	50d4      	str	r4, [r2, r3]
 800c99a:	e64c      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c99c:	4a87      	ldr	r2, [pc, #540]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c99e:	23a8      	movs	r3, #168	; 0xa8
 800c9a0:	58d4      	ldr	r4, [r2, r3]
 800c9a2:	4d87      	ldr	r5, [pc, #540]	; (800cbc0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c9a4:	402c      	ands	r4, r5
 800c9a6:	50d4      	str	r4, [r2, r3]
 800c9a8:	58d5      	ldr	r5, [r2, r3]
 800c9aa:	24c0      	movs	r4, #192	; 0xc0
 800c9ac:	0524      	lsls	r4, r4, #20
 800c9ae:	432c      	orrs	r4, r5
 800c9b0:	50d4      	str	r4, [r2, r3]
 800c9b2:	e640      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c9b4:	4a83      	ldr	r2, [pc, #524]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c9b6:	23a8      	movs	r3, #168	; 0xa8
 800c9b8:	58d4      	ldr	r4, [r2, r3]
 800c9ba:	250f      	movs	r5, #15
 800c9bc:	43ac      	bics	r4, r5
 800c9be:	50d4      	str	r4, [r2, r3]
 800c9c0:	58d4      	ldr	r4, [r2, r3]
 800c9c2:	3d03      	subs	r5, #3
 800c9c4:	432c      	orrs	r4, r5
 800c9c6:	50d4      	str	r4, [r2, r3]
 800c9c8:	e635      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c9ca:	4a7e      	ldr	r2, [pc, #504]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c9cc:	23a8      	movs	r3, #168	; 0xa8
 800c9ce:	58d4      	ldr	r4, [r2, r3]
 800c9d0:	4d7d      	ldr	r5, [pc, #500]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c9d2:	402c      	ands	r4, r5
 800c9d4:	50d4      	str	r4, [r2, r3]
 800c9d6:	58d5      	ldr	r5, [r2, r3]
 800c9d8:	24c0      	movs	r4, #192	; 0xc0
 800c9da:	0224      	lsls	r4, r4, #8
 800c9dc:	432c      	orrs	r4, r5
 800c9de:	50d4      	str	r4, [r2, r3]
 800c9e0:	e629      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c9e2:	680b      	ldr	r3, [r1, #0]
 800c9e4:	4a79      	ldr	r2, [pc, #484]	; (800cbcc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d01b      	beq.n	800ca22 <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c9ea:	4a79      	ldr	r2, [pc, #484]	; (800cbd0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d023      	beq.n	800ca38 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c9f0:	4a78      	ldr	r2, [pc, #480]	; (800cbd4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d02c      	beq.n	800ca50 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c9f6:	4a78      	ldr	r2, [pc, #480]	; (800cbd8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d035      	beq.n	800ca68 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c9fc:	4a77      	ldr	r2, [pc, #476]	; (800cbdc <RemapAndLinkDMAtoUARTTx+0x654>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d03d      	beq.n	800ca7e <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800ca02:	4a77      	ldr	r2, [pc, #476]	; (800cbe0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d000      	beq.n	800ca0a <RemapAndLinkDMAtoUARTTx+0x482>
 800ca08:	e615      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800ca0a:	4a6e      	ldr	r2, [pc, #440]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca0c:	23a8      	movs	r3, #168	; 0xa8
 800ca0e:	58d4      	ldr	r4, [r2, r3]
 800ca10:	4d74      	ldr	r5, [pc, #464]	; (800cbe4 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800ca12:	402c      	ands	r4, r5
 800ca14:	50d4      	str	r4, [r2, r3]
 800ca16:	58d5      	ldr	r5, [r2, r3]
 800ca18:	24d0      	movs	r4, #208	; 0xd0
 800ca1a:	0324      	lsls	r4, r4, #12
 800ca1c:	432c      	orrs	r4, r5
 800ca1e:	50d4      	str	r4, [r2, r3]
 800ca20:	e609      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800ca22:	4a66      	ldr	r2, [pc, #408]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800ca24:	23a8      	movs	r3, #168	; 0xa8
 800ca26:	58d4      	ldr	r4, [r2, r3]
 800ca28:	25f0      	movs	r5, #240	; 0xf0
 800ca2a:	43ac      	bics	r4, r5
 800ca2c:	50d4      	str	r4, [r2, r3]
 800ca2e:	58d4      	ldr	r4, [r2, r3]
 800ca30:	3d20      	subs	r5, #32
 800ca32:	432c      	orrs	r4, r5
 800ca34:	50d4      	str	r4, [r2, r3]
 800ca36:	e5fe      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800ca38:	4a60      	ldr	r2, [pc, #384]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800ca3a:	23a8      	movs	r3, #168	; 0xa8
 800ca3c:	58d4      	ldr	r4, [r2, r3]
 800ca3e:	4d62      	ldr	r5, [pc, #392]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ca40:	402c      	ands	r4, r5
 800ca42:	50d4      	str	r4, [r2, r3]
 800ca44:	58d5      	ldr	r5, [r2, r3]
 800ca46:	24d0      	movs	r4, #208	; 0xd0
 800ca48:	0224      	lsls	r4, r4, #8
 800ca4a:	432c      	orrs	r4, r5
 800ca4c:	50d4      	str	r4, [r2, r3]
 800ca4e:	e5f2      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800ca50:	4a5a      	ldr	r2, [pc, #360]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800ca52:	23a8      	movs	r3, #168	; 0xa8
 800ca54:	58d4      	ldr	r4, [r2, r3]
 800ca56:	4d5a      	ldr	r5, [pc, #360]	; (800cbc0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800ca58:	402c      	ands	r4, r5
 800ca5a:	50d4      	str	r4, [r2, r3]
 800ca5c:	58d5      	ldr	r5, [r2, r3]
 800ca5e:	24d0      	movs	r4, #208	; 0xd0
 800ca60:	0524      	lsls	r4, r4, #20
 800ca62:	432c      	orrs	r4, r5
 800ca64:	50d4      	str	r4, [r2, r3]
 800ca66:	e5e6      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800ca68:	4a56      	ldr	r2, [pc, #344]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca6a:	23a8      	movs	r3, #168	; 0xa8
 800ca6c:	58d4      	ldr	r4, [r2, r3]
 800ca6e:	250f      	movs	r5, #15
 800ca70:	43ac      	bics	r4, r5
 800ca72:	50d4      	str	r4, [r2, r3]
 800ca74:	58d4      	ldr	r4, [r2, r3]
 800ca76:	3d02      	subs	r5, #2
 800ca78:	432c      	orrs	r4, r5
 800ca7a:	50d4      	str	r4, [r2, r3]
 800ca7c:	e5db      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800ca7e:	4a51      	ldr	r2, [pc, #324]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca80:	23a8      	movs	r3, #168	; 0xa8
 800ca82:	58d4      	ldr	r4, [r2, r3]
 800ca84:	4d50      	ldr	r5, [pc, #320]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ca86:	402c      	ands	r4, r5
 800ca88:	50d4      	str	r4, [r2, r3]
 800ca8a:	58d5      	ldr	r5, [r2, r3]
 800ca8c:	24d0      	movs	r4, #208	; 0xd0
 800ca8e:	0224      	lsls	r4, r4, #8
 800ca90:	432c      	orrs	r4, r5
 800ca92:	50d4      	str	r4, [r2, r3]
 800ca94:	e5cf      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800ca96:	680b      	ldr	r3, [r1, #0]
 800ca98:	4a4c      	ldr	r2, [pc, #304]	; (800cbcc <RemapAndLinkDMAtoUARTTx+0x644>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d01b      	beq.n	800cad6 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800ca9e:	4a4c      	ldr	r2, [pc, #304]	; (800cbd0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d023      	beq.n	800caec <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800caa4:	4a4b      	ldr	r2, [pc, #300]	; (800cbd4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d02c      	beq.n	800cb04 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800caaa:	4a4b      	ldr	r2, [pc, #300]	; (800cbd8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d035      	beq.n	800cb1c <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cab0:	4a4a      	ldr	r2, [pc, #296]	; (800cbdc <RemapAndLinkDMAtoUARTTx+0x654>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d03d      	beq.n	800cb32 <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cab6:	4a4a      	ldr	r2, [pc, #296]	; (800cbe0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d000      	beq.n	800cabe <RemapAndLinkDMAtoUARTTx+0x536>
 800cabc:	e5bb      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cabe:	4a41      	ldr	r2, [pc, #260]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cac0:	23a8      	movs	r3, #168	; 0xa8
 800cac2:	58d4      	ldr	r4, [r2, r3]
 800cac4:	4d47      	ldr	r5, [pc, #284]	; (800cbe4 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800cac6:	402c      	ands	r4, r5
 800cac8:	50d4      	str	r4, [r2, r3]
 800caca:	58d5      	ldr	r5, [r2, r3]
 800cacc:	24e0      	movs	r4, #224	; 0xe0
 800cace:	0324      	lsls	r4, r4, #12
 800cad0:	432c      	orrs	r4, r5
 800cad2:	50d4      	str	r4, [r2, r3]
 800cad4:	e5af      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800cad6:	4a39      	ldr	r2, [pc, #228]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800cad8:	23a8      	movs	r3, #168	; 0xa8
 800cada:	58d4      	ldr	r4, [r2, r3]
 800cadc:	25f0      	movs	r5, #240	; 0xf0
 800cade:	43ac      	bics	r4, r5
 800cae0:	50d4      	str	r4, [r2, r3]
 800cae2:	58d4      	ldr	r4, [r2, r3]
 800cae4:	3d10      	subs	r5, #16
 800cae6:	432c      	orrs	r4, r5
 800cae8:	50d4      	str	r4, [r2, r3]
 800caea:	e5a4      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800caec:	4a33      	ldr	r2, [pc, #204]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800caee:	23a8      	movs	r3, #168	; 0xa8
 800caf0:	58d4      	ldr	r4, [r2, r3]
 800caf2:	4d35      	ldr	r5, [pc, #212]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800caf4:	402c      	ands	r4, r5
 800caf6:	50d4      	str	r4, [r2, r3]
 800caf8:	58d5      	ldr	r5, [r2, r3]
 800cafa:	24e0      	movs	r4, #224	; 0xe0
 800cafc:	0224      	lsls	r4, r4, #8
 800cafe:	432c      	orrs	r4, r5
 800cb00:	50d4      	str	r4, [r2, r3]
 800cb02:	e598      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800cb04:	4a2d      	ldr	r2, [pc, #180]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb06:	23a8      	movs	r3, #168	; 0xa8
 800cb08:	58d4      	ldr	r4, [r2, r3]
 800cb0a:	4d2d      	ldr	r5, [pc, #180]	; (800cbc0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cb0c:	402c      	ands	r4, r5
 800cb0e:	50d4      	str	r4, [r2, r3]
 800cb10:	58d5      	ldr	r5, [r2, r3]
 800cb12:	24e0      	movs	r4, #224	; 0xe0
 800cb14:	0524      	lsls	r4, r4, #20
 800cb16:	432c      	orrs	r4, r5
 800cb18:	50d4      	str	r4, [r2, r3]
 800cb1a:	e58c      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800cb1c:	4a29      	ldr	r2, [pc, #164]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb1e:	23a8      	movs	r3, #168	; 0xa8
 800cb20:	58d4      	ldr	r4, [r2, r3]
 800cb22:	250f      	movs	r5, #15
 800cb24:	43ac      	bics	r4, r5
 800cb26:	50d4      	str	r4, [r2, r3]
 800cb28:	58d4      	ldr	r4, [r2, r3]
 800cb2a:	3d01      	subs	r5, #1
 800cb2c:	432c      	orrs	r4, r5
 800cb2e:	50d4      	str	r4, [r2, r3]
 800cb30:	e581      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800cb32:	4a24      	ldr	r2, [pc, #144]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb34:	23a8      	movs	r3, #168	; 0xa8
 800cb36:	58d4      	ldr	r4, [r2, r3]
 800cb38:	4d23      	ldr	r5, [pc, #140]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb3a:	402c      	ands	r4, r5
 800cb3c:	50d4      	str	r4, [r2, r3]
 800cb3e:	58d5      	ldr	r5, [r2, r3]
 800cb40:	24e0      	movs	r4, #224	; 0xe0
 800cb42:	0224      	lsls	r4, r4, #8
 800cb44:	432c      	orrs	r4, r5
 800cb46:	50d4      	str	r4, [r2, r3]
 800cb48:	e575      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800cb4a:	4a1c      	ldr	r2, [pc, #112]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb4c:	23a8      	movs	r3, #168	; 0xa8
 800cb4e:	58d5      	ldr	r5, [r2, r3]
 800cb50:	26f0      	movs	r6, #240	; 0xf0
 800cb52:	43b5      	bics	r5, r6
 800cb54:	50d5      	str	r5, [r2, r3]
 800cb56:	58d4      	ldr	r4, [r2, r3]
 800cb58:	4334      	orrs	r4, r6
 800cb5a:	50d4      	str	r4, [r2, r3]
 800cb5c:	e56b      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800cb5e:	4a17      	ldr	r2, [pc, #92]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb60:	23a8      	movs	r3, #168	; 0xa8
 800cb62:	58d4      	ldr	r4, [r2, r3]
 800cb64:	4d18      	ldr	r5, [pc, #96]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb66:	402c      	ands	r4, r5
 800cb68:	50d4      	str	r4, [r2, r3]
 800cb6a:	58d5      	ldr	r5, [r2, r3]
 800cb6c:	24f0      	movs	r4, #240	; 0xf0
 800cb6e:	0224      	lsls	r4, r4, #8
 800cb70:	432c      	orrs	r4, r5
 800cb72:	50d4      	str	r4, [r2, r3]
 800cb74:	e55f      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800cb76:	4a11      	ldr	r2, [pc, #68]	; (800cbbc <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb78:	23a8      	movs	r3, #168	; 0xa8
 800cb7a:	58d4      	ldr	r4, [r2, r3]
 800cb7c:	4d10      	ldr	r5, [pc, #64]	; (800cbc0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cb7e:	402c      	ands	r4, r5
 800cb80:	50d4      	str	r4, [r2, r3]
 800cb82:	58d5      	ldr	r5, [r2, r3]
 800cb84:	24f0      	movs	r4, #240	; 0xf0
 800cb86:	0524      	lsls	r4, r4, #20
 800cb88:	432c      	orrs	r4, r5
 800cb8a:	50d4      	str	r4, [r2, r3]
 800cb8c:	e553      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800cb8e:	4a0d      	ldr	r2, [pc, #52]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb90:	23a8      	movs	r3, #168	; 0xa8
 800cb92:	58d5      	ldr	r5, [r2, r3]
 800cb94:	260f      	movs	r6, #15
 800cb96:	43b5      	bics	r5, r6
 800cb98:	50d5      	str	r5, [r2, r3]
 800cb9a:	58d4      	ldr	r4, [r2, r3]
 800cb9c:	4334      	orrs	r4, r6
 800cb9e:	50d4      	str	r4, [r2, r3]
 800cba0:	e549      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800cba2:	4a08      	ldr	r2, [pc, #32]	; (800cbc4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cba4:	23a8      	movs	r3, #168	; 0xa8
 800cba6:	58d4      	ldr	r4, [r2, r3]
 800cba8:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cbaa:	402c      	ands	r4, r5
 800cbac:	50d4      	str	r4, [r2, r3]
 800cbae:	58d5      	ldr	r5, [r2, r3]
 800cbb0:	24f0      	movs	r4, #240	; 0xf0
 800cbb2:	0224      	lsls	r4, r4, #8
 800cbb4:	432c      	orrs	r4, r5
 800cbb6:	50d4      	str	r4, [r2, r3]
 800cbb8:	e53d      	b.n	800c636 <RemapAndLinkDMAtoUARTTx+0xae>
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	40020000 	.word	0x40020000
 800cbc0:	f0ffffff 	.word	0xf0ffffff
 800cbc4:	40020400 	.word	0x40020400
 800cbc8:	ffff0fff 	.word	0xffff0fff
 800cbcc:	4002001c 	.word	0x4002001c
 800cbd0:	40020044 	.word	0x40020044
 800cbd4:	40020080 	.word	0x40020080
 800cbd8:	40020408 	.word	0x40020408
 800cbdc:	40020444 	.word	0x40020444
 800cbe0:	40020458 	.word	0x40020458
 800cbe4:	fff0ffff 	.word	0xfff0ffff

0800cbe8 <DMA_MSG_TX_Setup>:
{	
 800cbe8:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800cbea:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <DMA_MSG_TX_Setup+0x38>)
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d012      	beq.n	800cc18 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <DMA_MSG_TX_Setup+0x38>)
 800cbf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d010      	beq.n	800cc1c <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800cbfa:	4a09      	ldr	r2, [pc, #36]	; (800cc20 <DMA_MSG_TX_Setup+0x38>)
 800cbfc:	2394      	movs	r3, #148	; 0x94
 800cbfe:	58d3      	ldr	r3, [r2, r3]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d007      	beq.n	800cc14 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800cc04:	0021      	movs	r1, r4
 800cc06:	f7ff fcbf 	bl	800c588 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	f7ff f853 	bl	800bcb8 <SetupDMAInterrupts>
}
 800cc12:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800cc14:	4c03      	ldr	r4, [pc, #12]	; (800cc24 <DMA_MSG_TX_Setup+0x3c>)
 800cc16:	e7f5      	b.n	800cc04 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800cc18:	4c01      	ldr	r4, [pc, #4]	; (800cc20 <DMA_MSG_TX_Setup+0x38>)
 800cc1a:	e7f3      	b.n	800cc04 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800cc1c:	4c02      	ldr	r4, [pc, #8]	; (800cc28 <DMA_MSG_TX_Setup+0x40>)
 800cc1e:	e7f1      	b.n	800cc04 <DMA_MSG_TX_Setup+0x1c>
 800cc20:	200017f8 	.word	0x200017f8
 800cc24:	20001868 	.word	0x20001868
 800cc28:	20001830 	.word	0x20001830

0800cc2c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800cc2c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800cc2e:	4807      	ldr	r0, [pc, #28]	; (800cc4c <CRC_Init+0x20>)
 800cc30:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <CRC_Init+0x24>)
 800cc32:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800cc34:	2310      	movs	r3, #16
 800cc36:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800cc38:	2300      	movs	r3, #0
 800cc3a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800cc3c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800cc3e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800cc40:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800cc42:	3303      	adds	r3, #3
 800cc44:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800cc46:	f003 fbb5 	bl	80103b4 <HAL_CRC_Init>
}
 800cc4a:	bd10      	pop	{r4, pc}
 800cc4c:	20006c70 	.word	0x20006c70
 800cc50:	40023000 	.word	0x40023000

0800cc54 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800cc54:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800cc56:	4a05      	ldr	r2, [pc, #20]	; (800cc6c <HAL_CRC_MspInit+0x18>)
 800cc58:	6951      	ldr	r1, [r2, #20]
 800cc5a:	2340      	movs	r3, #64	; 0x40
 800cc5c:	4319      	orrs	r1, r3
 800cc5e:	6151      	str	r1, [r2, #20]
 800cc60:	6952      	ldr	r2, [r2, #20]
 800cc62:	4013      	ands	r3, r2
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	9b01      	ldr	r3, [sp, #4]
}
 800cc68:	b002      	add	sp, #8
 800cc6a:	4770      	bx	lr
 800cc6c:	40021000 	.word	0x40021000

0800cc70 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	0004      	movs	r4, r0
 800cc74:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d015      	beq.n	800cca6 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800cc7a:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	d100      	bne.n	800cc82 <CalculateCRC8+0x12>
}
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800cc82:	088e      	lsrs	r6, r1, #2
 800cc84:	0032      	movs	r2, r6
 800cc86:	0021      	movs	r1, r4
 800cc88:	4808      	ldr	r0, [pc, #32]	; (800ccac <CalculateCRC8+0x3c>)
 800cc8a:	f003 fbef 	bl	801046c <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800cc8e:	07ab      	lsls	r3, r5, #30
 800cc90:	d101      	bne.n	800cc96 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800cc92:	b2c0      	uxtb	r0, r0
 800cc94:	e7f4      	b.n	800cc80 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800cc96:	0131      	lsls	r1, r6, #4
 800cc98:	1861      	adds	r1, r4, r1
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	4803      	ldr	r0, [pc, #12]	; (800ccac <CalculateCRC8+0x3c>)
 800cc9e:	f003 fbba 	bl	8010416 <HAL_CRC_Accumulate>
 800cca2:	b2c0      	uxtb	r0, r0
 800cca4:	e7ec      	b.n	800cc80 <CalculateCRC8+0x10>
	return 0;
 800cca6:	2000      	movs	r0, #0
 800cca8:	e7ea      	b.n	800cc80 <CalculateCRC8+0x10>
 800ccaa:	46c0      	nop			; (mov r8, r8)
 800ccac:	20006c70 	.word	0x20006c70

0800ccb0 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800ccb0:	b500      	push	{lr}
 800ccb2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	011b      	lsls	r3, r3, #4
 800ccb8:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ccc2:	3303      	adds	r3, #3
 800ccc4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ccc6:	2090      	movs	r0, #144	; 0x90
 800ccc8:	a901      	add	r1, sp, #4
 800ccca:	05c0      	lsls	r0, r0, #23
 800cccc:	f004 fa72 	bl	80111b4 <HAL_GPIO_Init>
}
 800ccd0:	b007      	add	sp, #28
 800ccd2:	bd00      	pop	{pc}

0800ccd4 <GPIO_Init>:
{
 800ccd4:	b500      	push	{lr}
 800ccd6:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ccd8:	4b18      	ldr	r3, [pc, #96]	; (800cd3c <GPIO_Init+0x68>)
 800ccda:	6959      	ldr	r1, [r3, #20]
 800ccdc:	2080      	movs	r0, #128	; 0x80
 800ccde:	0300      	lsls	r0, r0, #12
 800cce0:	4301      	orrs	r1, r0
 800cce2:	6159      	str	r1, [r3, #20]
 800cce4:	695a      	ldr	r2, [r3, #20]
 800cce6:	4002      	ands	r2, r0
 800cce8:	9201      	str	r2, [sp, #4]
 800ccea:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ccec:	6959      	ldr	r1, [r3, #20]
 800ccee:	2080      	movs	r0, #128	; 0x80
 800ccf0:	0280      	lsls	r0, r0, #10
 800ccf2:	4301      	orrs	r1, r0
 800ccf4:	6159      	str	r1, [r3, #20]
 800ccf6:	695a      	ldr	r2, [r3, #20]
 800ccf8:	4002      	ands	r2, r0
 800ccfa:	9202      	str	r2, [sp, #8]
 800ccfc:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ccfe:	6959      	ldr	r1, [r3, #20]
 800cd00:	2080      	movs	r0, #128	; 0x80
 800cd02:	0340      	lsls	r0, r0, #13
 800cd04:	4301      	orrs	r1, r0
 800cd06:	6159      	str	r1, [r3, #20]
 800cd08:	695a      	ldr	r2, [r3, #20]
 800cd0a:	4002      	ands	r2, r0
 800cd0c:	9203      	str	r2, [sp, #12]
 800cd0e:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800cd10:	6959      	ldr	r1, [r3, #20]
 800cd12:	2080      	movs	r0, #128	; 0x80
 800cd14:	02c0      	lsls	r0, r0, #11
 800cd16:	4301      	orrs	r1, r0
 800cd18:	6159      	str	r1, [r3, #20]
 800cd1a:	695a      	ldr	r2, [r3, #20]
 800cd1c:	4002      	ands	r2, r0
 800cd1e:	9204      	str	r2, [sp, #16]
 800cd20:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cd22:	695a      	ldr	r2, [r3, #20]
 800cd24:	2180      	movs	r1, #128	; 0x80
 800cd26:	03c9      	lsls	r1, r1, #15
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	615a      	str	r2, [r3, #20]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	400b      	ands	r3, r1
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800cd34:	f7ff ffbc 	bl	800ccb0 <IND_LED_Init>
}
 800cd38:	b007      	add	sp, #28
 800cd3a:	bd00      	pop	{pc}
 800cd3c:	40021000 	.word	0x40021000

0800cd40 <Relay_Init>:

/* --- Configure Relay GPIO --- 
*/
void Relay_Init(void)
{
 800cd40:	b500      	push	{lr}
 800cd42:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Relay_PIN;
 800cd44:	2301      	movs	r3, #1
 800cd46:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd48:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cd4e:	3303      	adds	r3, #3
 800cd50:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800cd52:	a901      	add	r1, sp, #4
 800cd54:	4802      	ldr	r0, [pc, #8]	; (800cd60 <Relay_Init+0x20>)
 800cd56:	f004 fa2d 	bl	80111b4 <HAL_GPIO_Init>
}
 800cd5a:	b007      	add	sp, #28
 800cd5c:	bd00      	pop	{pc}
 800cd5e:	46c0      	nop			; (mov r8, r8)
 800cd60:	48000400 	.word	0x48000400

0800cd64 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd66:	000e      	movs	r6, r1
 800cd68:	0015      	movs	r5, r2
 800cd6a:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800cd6c:	f000 fd2e 	bl	800d7cc <GetUart>
 800cd70:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800cd72:	4824      	ldr	r0, [pc, #144]	; (800ce04 <GetPortGPIOs+0xa0>)
 800cd74:	4284      	cmp	r4, r0
 800cd76:	d017      	beq.n	800cda8 <GetPortGPIOs+0x44>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800cd78:	4b23      	ldr	r3, [pc, #140]	; (800ce08 <GetPortGPIOs+0xa4>)
 800cd7a:	429c      	cmp	r4, r3
 800cd7c:	d021      	beq.n	800cdc2 <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cd7e:	4b23      	ldr	r3, [pc, #140]	; (800ce0c <GetPortGPIOs+0xa8>)
 800cd80:	429c      	cmp	r4, r3
 800cd82:	d029      	beq.n	800cdd8 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800cd84:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <GetPortGPIOs+0xac>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d032      	beq.n	800cdf0 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cd8a:	4b22      	ldr	r3, [pc, #136]	; (800ce14 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cd8c:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800cd8e:	429c      	cmp	r4, r3
 800cd90:	d116      	bne.n	800cdc0 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cd92:	2390      	movs	r3, #144	; 0x90
 800cd94:	05db      	lsls	r3, r3, #23
 800cd96:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cd98:	2210      	movs	r2, #16
 800cd9a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cd9c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800cd9e:	2320      	movs	r3, #32
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cda4:	2000      	movs	r0, #0
 800cda6:	e00b      	b.n	800cdc0 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cda8:	2390      	movs	r3, #144	; 0x90
 800cdaa:	05db      	lsls	r3, r3, #23
 800cdac:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800cdae:	2280      	movs	r2, #128	; 0x80
 800cdb0:	0092      	lsls	r2, r2, #2
 800cdb2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800cdb4:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800cdb6:	2380      	movs	r3, #128	; 0x80
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	9a06      	ldr	r2, [sp, #24]
 800cdbc:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cdbe:	2000      	movs	r0, #0
	
	return result;	
}
 800cdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cdc2:	2390      	movs	r3, #144	; 0x90
 800cdc4:	05db      	lsls	r3, r3, #23
 800cdc6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cdc8:	2204      	movs	r2, #4
 800cdca:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cdcc:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800cdce:	2308      	movs	r3, #8
 800cdd0:	9a06      	ldr	r2, [sp, #24]
 800cdd2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e7f3      	b.n	800cdc0 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <GetPortGPIOs+0xb4>)
 800cdda:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cddc:	2280      	movs	r2, #128	; 0x80
 800cdde:	00d2      	lsls	r2, r2, #3
 800cde0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cde2:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800cde4:	2380      	movs	r3, #128	; 0x80
 800cde6:	011b      	lsls	r3, r3, #4
 800cde8:	9a06      	ldr	r2, [sp, #24]
 800cdea:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cdec:	2000      	movs	r0, #0
 800cdee:	e7e7      	b.n	800cdc0 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800cdf0:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <GetPortGPIOs+0xb4>)
 800cdf2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800cdf4:	2208      	movs	r2, #8
 800cdf6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800cdf8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800cdfa:	2310      	movs	r3, #16
 800cdfc:	9a06      	ldr	r2, [sp, #24]
 800cdfe:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ce00:	2000      	movs	r0, #0
 800ce02:	e7dd      	b.n	800cdc0 <GetPortGPIOs+0x5c>
 800ce04:	20006acc 	.word	0x20006acc
 800ce08:	20006bb4 	.word	0x20006bb4
 800ce0c:	200069a8 	.word	0x200069a8
 800ce10:	20006a58 	.word	0x20006a58
 800ce14:	20006b44 	.word	0x20006b44
 800ce18:	48000400 	.word	0x48000400

0800ce1c <IsFactoryReset>:
{
 800ce1c:	b530      	push	{r4, r5, lr}
 800ce1e:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800ce20:	4b39      	ldr	r3, [pc, #228]	; (800cf08 <IsFactoryReset+0xec>)
 800ce22:	6959      	ldr	r1, [r3, #20]
 800ce24:	2080      	movs	r0, #128	; 0x80
 800ce26:	0280      	lsls	r0, r0, #10
 800ce28:	4301      	orrs	r1, r0
 800ce2a:	6159      	str	r1, [r3, #20]
 800ce2c:	695a      	ldr	r2, [r3, #20]
 800ce2e:	4002      	ands	r2, r0
 800ce30:	9203      	str	r2, [sp, #12]
 800ce32:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ce34:	6959      	ldr	r1, [r3, #20]
 800ce36:	2080      	movs	r0, #128	; 0x80
 800ce38:	02c0      	lsls	r0, r0, #11
 800ce3a:	4301      	orrs	r1, r0
 800ce3c:	6159      	str	r1, [r3, #20]
 800ce3e:	695a      	ldr	r2, [r3, #20]
 800ce40:	4002      	ands	r2, r0
 800ce42:	9204      	str	r2, [sp, #16]
 800ce44:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800ce46:	6959      	ldr	r1, [r3, #20]
 800ce48:	2080      	movs	r0, #128	; 0x80
 800ce4a:	0300      	lsls	r0, r0, #12
 800ce4c:	4301      	orrs	r1, r0
 800ce4e:	6159      	str	r1, [r3, #20]
 800ce50:	695a      	ldr	r2, [r3, #20]
 800ce52:	4002      	ands	r2, r0
 800ce54:	9205      	str	r2, [sp, #20]
 800ce56:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800ce58:	695a      	ldr	r2, [r3, #20]
 800ce5a:	2180      	movs	r1, #128	; 0x80
 800ce5c:	0349      	lsls	r1, r1, #13
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	615a      	str	r2, [r3, #20]
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	400b      	ands	r3, r1
 800ce66:	9306      	str	r3, [sp, #24]
 800ce68:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800ce6a:	ab08      	add	r3, sp, #32
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	ab0b      	add	r3, sp, #44	; 0x2c
 800ce70:	2222      	movs	r2, #34	; 0x22
 800ce72:	446a      	add	r2, sp
 800ce74:	a90c      	add	r1, sp, #48	; 0x30
 800ce76:	2001      	movs	r0, #1
 800ce78:	f7ff ff74 	bl	800cd64 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ce7c:	ac07      	add	r4, sp, #28
 800ce7e:	9400      	str	r4, [sp, #0]
 800ce80:	ab09      	add	r3, sp, #36	; 0x24
 800ce82:	221e      	movs	r2, #30
 800ce84:	446a      	add	r2, sp
 800ce86:	a90a      	add	r1, sp, #40	; 0x28
 800ce88:	2005      	movs	r0, #5
 800ce8a:	f7ff ff6b 	bl	800cd64 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce92:	2500      	movs	r5, #0
 800ce94:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ce96:	466b      	mov	r3, sp
 800ce98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ce9a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ce9c:	a90d      	add	r1, sp, #52	; 0x34
 800ce9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cea0:	f004 f988 	bl	80111b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cea4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cea6:	2302      	movs	r3, #2
 800cea8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ceaa:	8823      	ldrh	r3, [r4, #0]
 800ceac:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ceae:	a90d      	add	r1, sp, #52	; 0x34
 800ceb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceb2:	f004 f97f 	bl	80111b4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ceb6:	466b      	mov	r3, sp
 800ceb8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ceba:	2200      	movs	r2, #0
 800cebc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cebe:	f004 fa69 	bl	8011394 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cec2:	2005      	movs	r0, #5
 800cec4:	f000 fae2 	bl	800d48c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cec8:	8821      	ldrh	r1, [r4, #0]
 800ceca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cecc:	f004 fa5c 	bl	8011388 <HAL_GPIO_ReadPin>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d006      	beq.n	800cee2 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ced4:	4b0d      	ldr	r3, [pc, #52]	; (800cf0c <IsFactoryReset+0xf0>)
 800ced6:	2201      	movs	r2, #1
 800ced8:	4252      	negs	r2, r2
 800ceda:	601a      	str	r2, [r3, #0]
	return 0;
 800cedc:	2000      	movs	r0, #0
}
 800cede:	b013      	add	sp, #76	; 0x4c
 800cee0:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800cee2:	2322      	movs	r3, #34	; 0x22
 800cee4:	446b      	add	r3, sp
 800cee6:	8819      	ldrh	r1, [r3, #0]
 800cee8:	2201      	movs	r2, #1
 800ceea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ceec:	f004 fa52 	bl	8011394 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800cef0:	2005      	movs	r0, #5
 800cef2:	f000 facb 	bl	800d48c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cef6:	ab07      	add	r3, sp, #28
 800cef8:	8819      	ldrh	r1, [r3, #0]
 800cefa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefc:	f004 fa44 	bl	8011388 <HAL_GPIO_ReadPin>
 800cf00:	2801      	cmp	r0, #1
 800cf02:	d1e7      	bne.n	800ced4 <IsFactoryReset+0xb8>
 800cf04:	e7eb      	b.n	800cede <IsFactoryReset+0xc2>
 800cf06:	46c0      	nop			; (mov r8, r8)
 800cf08:	40021000 	.word	0x40021000
 800cf0c:	20007ff0 	.word	0x20007ff0

0800cf10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cf10:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cf12:	f002 fe19 	bl	800fb48 <HAL_IncTick>
  osSystickHandler();  
 800cf16:	f000 fe19 	bl	800db4c <osSystickHandler>

}
 800cf1a:	bd10      	pop	{r4, pc}

0800cf1c <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800cf1c:	e7fe      	b.n	800cf1c <HardFault_Handler>
	...

0800cf20 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cf20:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cf22:	4802      	ldr	r0, [pc, #8]	; (800cf2c <USART1_IRQHandler+0xc>)
 800cf24:	f006 fa65 	bl	80133f2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cf28:	bd10      	pop	{r4, pc}
 800cf2a:	46c0      	nop			; (mov r8, r8)
 800cf2c:	20006acc 	.word	0x20006acc

0800cf30 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cf30:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cf32:	4802      	ldr	r0, [pc, #8]	; (800cf3c <USART2_IRQHandler+0xc>)
 800cf34:	f006 fa5d 	bl	80133f2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	20006bb4 	.word	0x20006bb4

0800cf40 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cf40:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cf42:	4805      	ldr	r0, [pc, #20]	; (800cf58 <USART3_8_IRQHandler+0x18>)
 800cf44:	f006 fa55 	bl	80133f2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cf48:	4804      	ldr	r0, [pc, #16]	; (800cf5c <USART3_8_IRQHandler+0x1c>)
 800cf4a:	f006 fa52 	bl	80133f2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cf4e:	4804      	ldr	r0, [pc, #16]	; (800cf60 <USART3_8_IRQHandler+0x20>)
 800cf50:	f006 fa4f 	bl	80133f2 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	200069a8 	.word	0x200069a8
 800cf5c:	20006a58 	.word	0x20006a58
 800cf60:	20006b44 	.word	0x20006b44

0800cf64 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800cf64:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	06db      	lsls	r3, r3, #27
 800cf6c:	d40b      	bmi.n	800cf86 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cf6e:	4b0b      	ldr	r3, [pc, #44]	; (800cf9c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	05db      	lsls	r3, r3, #23
 800cf74:	d40b      	bmi.n	800cf8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cf76:	4b09      	ldr	r3, [pc, #36]	; (800cf9c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	06db      	lsls	r3, r3, #27
 800cf7c:	d506      	bpl.n	800cf8c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cf7e:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cf80:	f003 fb70 	bl	8010664 <HAL_DMA_IRQHandler>
	}
}
 800cf84:	e002      	b.n	800cf8c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800cf86:	2005      	movs	r0, #5
 800cf88:	f7fa fc8a 	bl	80078a0 <DMA_IRQHandler>
}
 800cf8c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cf8e:	2002      	movs	r0, #2
 800cf90:	f7fa fc86 	bl	80078a0 <DMA_IRQHandler>
 800cf94:	e7fa      	b.n	800cf8c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	40020400 	.word	0x40020400
 800cf9c:	40020000 	.word	0x40020000
 800cfa0:	200017f8 	.word	0x200017f8

0800cfa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cfa4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cfa6:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	03db      	lsls	r3, r3, #15
 800cfac:	d413      	bmi.n	800cfd6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cfae:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	02db      	lsls	r3, r3, #11
 800cfb4:	d413      	bmi.n	800cfde <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cfb6:	4b11      	ldr	r3, [pc, #68]	; (800cffc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	05db      	lsls	r3, r3, #23
 800cfbc:	d413      	bmi.n	800cfe6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cfbe:	4b0e      	ldr	r3, [pc, #56]	; (800cff8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	04db      	lsls	r3, r3, #19
 800cfc4:	d413      	bmi.n	800cfee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cfc6:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	01db      	lsls	r3, r3, #7
 800cfcc:	d506      	bpl.n	800cfdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cfce:	480c      	ldr	r0, [pc, #48]	; (800d000 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cfd0:	f003 fb48 	bl	8010664 <HAL_DMA_IRQHandler>
	}
}
 800cfd4:	e002      	b.n	800cfdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cfd6:	2003      	movs	r0, #3
 800cfd8:	f7fa fc62 	bl	80078a0 <DMA_IRQHandler>
}
 800cfdc:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cfde:	2004      	movs	r0, #4
 800cfe0:	f7fa fc5e 	bl	80078a0 <DMA_IRQHandler>
 800cfe4:	e7fa      	b.n	800cfdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cfe6:	2006      	movs	r0, #6
 800cfe8:	f7fa fc5a 	bl	80078a0 <DMA_IRQHandler>
 800cfec:	e7f6      	b.n	800cfdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cfee:	4805      	ldr	r0, [pc, #20]	; (800d004 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cff0:	f003 fb38 	bl	8010664 <HAL_DMA_IRQHandler>
 800cff4:	e7f2      	b.n	800cfdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cff6:	46c0      	nop			; (mov r8, r8)
 800cff8:	40020000 	.word	0x40020000
 800cffc:	40020400 	.word	0x40020400
 800d000:	20001868 	.word	0x20001868
 800d004:	20001830 	.word	0x20001830

0800d008 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800d008:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d00a:	4802      	ldr	r0, [pc, #8]	; (800d014 <ADC1_COMP_IRQHandler+0xc>)
 800d00c:	f002 ffea 	bl	800ffe4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d010:	bd10      	pop	{r4, pc}
 800d012:	46c0      	nop			; (mov r8, r8)
 800d014:	20006c24 	.word	0x20006c24

0800d018 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d018:	b510      	push	{r4, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d022:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d028:	f7fe fef6 	bl	800be18 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d02c:	0020      	movs	r0, r4
 800d02e:	f7fe fa4f 	bl	800b4d0 <GetPort>
 800d032:	0080      	lsls	r0, r0, #2
 800d034:	4b03      	ldr	r3, [pc, #12]	; (800d044 <HAL_UART_TxCpltCallback+0x2c>)
 800d036:	58c0      	ldr	r0, [r0, r3]
 800d038:	a901      	add	r1, sp, #4
 800d03a:	f001 f921 	bl	800e280 <xQueueGiveFromISR>
}
 800d03e:	b002      	add	sp, #8
 800d040:	bd10      	pop	{r4, pc}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	20006950 	.word	0x20006950

0800d048 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d048:	b510      	push	{r4, lr}
 800d04a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d04c:	2369      	movs	r3, #105	; 0x69
 800d04e:	2201      	movs	r2, #1
 800d050:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d052:	f7fe fa3d 	bl	800b4d0 <GetPort>
	if (portStatus[port] == STREAM) {
 800d056:	4b0c      	ldr	r3, [pc, #48]	; (800d088 <HAL_UART_ErrorCallback+0x40>)
 800d058:	5c1b      	ldrb	r3, [r3, r0]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d005      	beq.n	800d06a <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d05e:	4b0b      	ldr	r3, [pc, #44]	; (800d08c <HAL_UART_ErrorCallback+0x44>)
 800d060:	1818      	adds	r0, r3, r0
 800d062:	3801      	subs	r0, #1
 800d064:	2301      	movs	r3, #1
 800d066:	7003      	strb	r3, [r0, #0]
	}	
}
 800d068:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	b292      	uxth	r2, r2
 800d072:	1e43      	subs	r3, r0, #1
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4906      	ldr	r1, [pc, #24]	; (800d090 <HAL_UART_ErrorCallback+0x48>)
 800d078:	585b      	ldr	r3, [r3, r1]
 800d07a:	6819      	ldr	r1, [r3, #0]
 800d07c:	3128      	adds	r1, #40	; 0x28
 800d07e:	0020      	movs	r0, r4
 800d080:	f005 fd9e 	bl	8012bc0 <HAL_UART_Receive_DMA>
 800d084:	e7f0      	b.n	800d068 <HAL_UART_ErrorCallback+0x20>
 800d086:	46c0      	nop			; (mov r8, r8)
 800d088:	200010c0 	.word	0x200010c0
 800d08c:	20001290 	.word	0x20001290
 800d090:	2000142c 	.word	0x2000142c

0800d094 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d094:	b510      	push	{r4, lr}
 800d096:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d098:	f7fe fa1a 	bl	800b4d0 <GetPort>
 800d09c:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <HAL_UART_RxCpltCallback+0x58>)
 800d09e:	5c1b      	ldrb	r3, [r3, r0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d006      	beq.n	800d0b2 <HAL_UART_RxCpltCallback+0x1e>
 800d0a4:	0020      	movs	r0, r4
 800d0a6:	f7fe fa13 	bl	800b4d0 <GetPort>
 800d0aa:	4b10      	ldr	r3, [pc, #64]	; (800d0ec <HAL_UART_RxCpltCallback+0x58>)
 800d0ac:	5c1b      	ldrb	r3, [r3, r0]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d11a      	bne.n	800d0e8 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d0b2:	0020      	movs	r0, r4
 800d0b4:	f7fe fa0c 	bl	800b4d0 <GetPort>
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <HAL_UART_RxCpltCallback+0x5c>)
 800d0ba:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d0bc:	0020      	movs	r0, r4
 800d0be:	f7fe fa07 	bl	800b4d0 <GetPort>
 800d0c2:	4b0a      	ldr	r3, [pc, #40]	; (800d0ec <HAL_UART_RxCpltCallback+0x58>)
 800d0c4:	2205      	movs	r2, #5
 800d0c6:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d0c8:	0020      	movs	r0, r4
 800d0ca:	f7fe fa01 	bl	800b4d0 <GetPort>
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <HAL_UART_RxCpltCallback+0x60>)
 800d0d0:	181b      	adds	r3, r3, r0
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d0d8:	0020      	movs	r0, r4
 800d0da:	f7fe f9f9 	bl	800b4d0 <GetPort>
 800d0de:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <HAL_UART_RxCpltCallback+0x64>)
 800d0e0:	181b      	adds	r3, r3, r0
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	701a      	strb	r2, [r3, #0]
	}
}
 800d0e8:	bd10      	pop	{r4, pc}
 800d0ea:	46c0      	nop			; (mov r8, r8)
 800d0ec:	200010c0 	.word	0x200010c0
 800d0f0:	200068d0 	.word	0x200068d0
 800d0f4:	200013d8 	.word	0x200013d8
 800d0f8:	20001290 	.word	0x20001290

0800d0fc <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d0fc:	b672      	cpsid	i
	for( ;; );
 800d0fe:	e7fe      	b.n	800d0fe <vApplicationStackOverflowHook+0x2>

0800d100 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d100:	b672      	cpsid	i
	for( ;; );
 800d102:	e7fe      	b.n	800d102 <vApplicationMallocFailedHook+0x2>

0800d104 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d106:	46ce      	mov	lr, r9
 800d108:	4647      	mov	r7, r8
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b08f      	sub	sp, #60	; 0x3c
 800d10e:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d110:	ac05      	add	r4, sp, #20
 800d112:	4b34      	ldr	r3, [pc, #208]	; (800d1e4 <RTC_CalendarConfig+0xe0>)
 800d114:	0022      	movs	r2, r4
 800d116:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d118:	c243      	stmia	r2!, {r0, r1, r6}
 800d11a:	aa02      	add	r2, sp, #8
 800d11c:	4b32      	ldr	r3, [pc, #200]	; (800d1e8 <RTC_CalendarConfig+0xe4>)
 800d11e:	cb03      	ldmia	r3!, {r0, r1}
 800d120:	c203      	stmia	r2!, {r0, r1}
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d126:	2015      	movs	r0, #21
 800d128:	ab02      	add	r3, sp, #8
 800d12a:	469c      	mov	ip, r3
 800d12c:	4460      	add	r0, ip
 800d12e:	f006 f9f0 	bl	8013512 <atoi>
 800d132:	b2c3      	uxtb	r3, r0
 800d134:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d136:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d138:	a806      	add	r0, sp, #24
 800d13a:	f006 f9ea 	bl	8013512 <atoi>
 800d13e:	b2c3      	uxtb	r3, r0
 800d140:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800d142:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d144:	4e29      	ldr	r6, [pc, #164]	; (800d1ec <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800d146:	2401      	movs	r4, #1
 800d148:	e003      	b.n	800d152 <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800d14a:	3401      	adds	r4, #1
 800d14c:	3604      	adds	r6, #4
 800d14e:	2c0d      	cmp	r4, #13
 800d150:	d007      	beq.n	800d162 <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d152:	6831      	ldr	r1, [r6, #0]
 800d154:	a805      	add	r0, sp, #20
 800d156:	f7f2 ffd5 	bl	8000104 <strcmp>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d1f5      	bne.n	800d14a <RTC_CalendarConfig+0x46>
			month = i + 1;
 800d15e:	b2e5      	uxtb	r5, r4
 800d160:	e7f3      	b.n	800d14a <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d162:	ab02      	add	r3, sp, #8
 800d164:	1d98      	adds	r0, r3, #6
 800d166:	f006 f9d4 	bl	8013512 <atoi>
 800d16a:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800d16c:	af05      	add	r7, sp, #20
 800d16e:	2400      	movs	r4, #0
 800d170:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800d172:	ab02      	add	r3, sp, #8
 800d174:	1cd8      	adds	r0, r3, #3
 800d176:	f006 f9cc 	bl	8013512 <atoi>
 800d17a:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800d17c:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800d17e:	a802      	add	r0, sp, #8
 800d180:	f006 f9c7 	bl	8013512 <atoi>
 800d184:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d186:	a90d      	add	r1, sp, #52	; 0x34
 800d188:	464b      	mov	r3, r9
 800d18a:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d18c:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d18e:	4643      	mov	r3, r8
 800d190:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d192:	2301      	movs	r3, #1
 800d194:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d196:	2200      	movs	r2, #0
 800d198:	4815      	ldr	r0, [pc, #84]	; (800d1f0 <RTC_CalendarConfig+0xec>)
 800d19a:	f004 ff3b 	bl	8012014 <HAL_RTC_SetDate>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d11c      	bne.n	800d1dc <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d1a2:	a908      	add	r1, sp, #32
 800d1a4:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800d1a6:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	720b      	strb	r3, [r1, #8]
 800d1b0:	4a10      	ldr	r2, [pc, #64]	; (800d1f4 <RTC_CalendarConfig+0xf0>)
 800d1b2:	3018      	adds	r0, #24
 800d1b4:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d1b6:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d1b8:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	480c      	ldr	r0, [pc, #48]	; (800d1f0 <RTC_CalendarConfig+0xec>)
 800d1be:	f004 fea9 	bl	8011f14 <HAL_RTC_SetTime>
 800d1c2:	1e04      	subs	r4, r0, #0
 800d1c4:	d10c      	bne.n	800d1e0 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	; (800d1f8 <RTC_CalendarConfig+0xf4>)
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <RTC_CalendarConfig+0xec>)
 800d1cc:	f004 ffe6 	bl	801219c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d1d0:	0020      	movs	r0, r4
 800d1d2:	b00f      	add	sp, #60	; 0x3c
 800d1d4:	bcc0      	pop	{r6, r7}
 800d1d6:	46b9      	mov	r9, r7
 800d1d8:	46b0      	mov	r8, r6
 800d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d1dc:	24ff      	movs	r4, #255	; 0xff
 800d1de:	e7f7      	b.n	800d1d0 <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800d1e0:	24ff      	movs	r4, #255	; 0xff
 800d1e2:	e7f5      	b.n	800d1d0 <RTC_CalendarConfig+0xcc>
 800d1e4:	08019e14 	.word	0x08019e14
 800d1e8:	08019e38 	.word	0x08019e38
 800d1ec:	20000020 	.word	0x20000020
 800d1f0:	20006c94 	.word	0x20006c94
 800d1f4:	200068d0 	.word	0x200068d0
 800d1f8:	000032f2 	.word	0x000032f2

0800d1fc <RTC_Init>:
{
 800d1fc:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d1fe:	4a1c      	ldr	r2, [pc, #112]	; (800d270 <RTC_Init+0x74>)
 800d200:	6a11      	ldr	r1, [r2, #32]
 800d202:	2380      	movs	r3, #128	; 0x80
 800d204:	021b      	lsls	r3, r3, #8
 800d206:	430b      	orrs	r3, r1
 800d208:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d20a:	481a      	ldr	r0, [pc, #104]	; (800d274 <RTC_Init+0x78>)
 800d20c:	4b1a      	ldr	r3, [pc, #104]	; (800d278 <RTC_Init+0x7c>)
 800d20e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d210:	2300      	movs	r3, #0
 800d212:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d214:	227c      	movs	r2, #124	; 0x7c
 800d216:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d218:	4a18      	ldr	r2, [pc, #96]	; (800d27c <RTC_Init+0x80>)
 800d21a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d21c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d21e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d220:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d222:	f004 fe19 	bl	8011e58 <HAL_RTC_Init>
 800d226:	1e04      	subs	r4, r0, #0
 800d228:	d11f      	bne.n	800d26a <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d22a:	2101      	movs	r1, #1
 800d22c:	4811      	ldr	r0, [pc, #68]	; (800d274 <RTC_Init+0x78>)
 800d22e:	f004 ffbb 	bl	80121a8 <HAL_RTCEx_BKUPRead>
 800d232:	4b13      	ldr	r3, [pc, #76]	; (800d280 <RTC_Init+0x84>)
 800d234:	4298      	cmp	r0, r3
 800d236:	d10e      	bne.n	800d256 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d238:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <RTC_Init+0x74>)
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	011b      	lsls	r3, r3, #4
 800d23e:	d502      	bpl.n	800d246 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800d240:	4b10      	ldr	r3, [pc, #64]	; (800d284 <RTC_Init+0x88>)
 800d242:	2200      	movs	r2, #0
 800d244:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <RTC_Init+0x74>)
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	015b      	lsls	r3, r3, #5
 800d24c:	d505      	bpl.n	800d25a <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <RTC_Init+0x88>)
 800d250:	2201      	movs	r2, #1
 800d252:	701a      	strb	r2, [r3, #0]
 800d254:	e001      	b.n	800d25a <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800d256:	f7ff ff55 	bl	800d104 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d25a:	4a05      	ldr	r2, [pc, #20]	; (800d270 <RTC_Init+0x74>)
 800d25c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d25e:	2380      	movs	r3, #128	; 0x80
 800d260:	045b      	lsls	r3, r3, #17
 800d262:	430b      	orrs	r3, r1
 800d264:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d266:	0020      	movs	r0, r4
 800d268:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d26a:	24ff      	movs	r4, #255	; 0xff
 800d26c:	e7fb      	b.n	800d266 <RTC_Init+0x6a>
 800d26e:	46c0      	nop			; (mov r8, r8)
 800d270:	40021000 	.word	0x40021000
 800d274:	20006c94 	.word	0x20006c94
 800d278:	40002800 	.word	0x40002800
 800d27c:	000007cf 	.word	0x000007cf
 800d280:	000032f2 	.word	0x000032f2
 800d284:	200019f0 	.word	0x200019f0

0800d288 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28a:	46c6      	mov	lr, r8
 800d28c:	b500      	push	{lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	ac0c      	add	r4, sp, #48	; 0x30
 800d292:	7827      	ldrb	r7, [r4, #0]
 800d294:	ac0d      	add	r4, sp, #52	; 0x34
 800d296:	7824      	ldrb	r4, [r4, #0]
 800d298:	46a0      	mov	r8, r4
 800d29a:	ac0e      	add	r4, sp, #56	; 0x38
 800d29c:	7825      	ldrb	r5, [r4, #0]
 800d29e:	ac0f      	add	r4, sp, #60	; 0x3c
 800d2a0:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d2a2:	ac05      	add	r4, sp, #20
 800d2a4:	3230      	adds	r2, #48	; 0x30
 800d2a6:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d2a8:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d2aa:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d2ac:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	0021      	movs	r1, r4
 800d2b2:	481f      	ldr	r0, [pc, #124]	; (800d330 <BOS_CalendarConfig+0xa8>)
 800d2b4:	f004 feae 	bl	8012014 <HAL_RTC_SetDate>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d134      	bne.n	800d326 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d2bc:	466b      	mov	r3, sp
 800d2be:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d2c0:	4642      	mov	r2, r8
 800d2c2:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d2c4:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d2ca:	2e01      	cmp	r6, #1
 800d2cc:	d01e      	beq.n	800d30c <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d2ce:	2e02      	cmp	r6, #2
 800d2d0:	d022      	beq.n	800d318 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d2d2:	4b18      	ldr	r3, [pc, #96]	; (800d334 <BOS_CalendarConfig+0xac>)
 800d2d4:	2218      	movs	r2, #24
 800d2d6:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4669      	mov	r1, sp
 800d2dc:	4814      	ldr	r0, [pc, #80]	; (800d330 <BOS_CalendarConfig+0xa8>)
 800d2de:	f004 fe19 	bl	8011f14 <HAL_RTC_SetTime>
 800d2e2:	1e04      	subs	r4, r0, #0
 800d2e4:	d121      	bne.n	800d32a <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d2e6:	4a13      	ldr	r2, [pc, #76]	; (800d334 <BOS_CalendarConfig+0xac>)
 800d2e8:	7b53      	ldrb	r3, [r2, #13]
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	7911      	ldrb	r1, [r2, #4]
 800d2ee:	4319      	orrs	r1, r3
 800d2f0:	208d      	movs	r0, #141	; 0x8d
 800d2f2:	0040      	lsls	r0, r0, #1
 800d2f4:	f7fa fbb8 	bl	8007a68 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d2f8:	4a0f      	ldr	r2, [pc, #60]	; (800d338 <BOS_CalendarConfig+0xb0>)
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	480c      	ldr	r0, [pc, #48]	; (800d330 <BOS_CalendarConfig+0xa8>)
 800d2fe:	f004 ff4d 	bl	801219c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d302:	0020      	movs	r0, r4
 800d304:	b006      	add	sp, #24
 800d306:	bc80      	pop	{r7}
 800d308:	46b8      	mov	r8, r7
 800d30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d30c:	466a      	mov	r2, sp
 800d30e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d310:	4b08      	ldr	r3, [pc, #32]	; (800d334 <BOS_CalendarConfig+0xac>)
 800d312:	220c      	movs	r2, #12
 800d314:	735a      	strb	r2, [r3, #13]
 800d316:	e7df      	b.n	800d2d8 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d318:	2340      	movs	r3, #64	; 0x40
 800d31a:	466a      	mov	r2, sp
 800d31c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d31e:	4b05      	ldr	r3, [pc, #20]	; (800d334 <BOS_CalendarConfig+0xac>)
 800d320:	220c      	movs	r2, #12
 800d322:	735a      	strb	r2, [r3, #13]
 800d324:	e7d8      	b.n	800d2d8 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d326:	24ff      	movs	r4, #255	; 0xff
 800d328:	e7eb      	b.n	800d302 <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800d32a:	24ff      	movs	r4, #255	; 0xff
 800d32c:	e7e9      	b.n	800d302 <BOS_CalendarConfig+0x7a>
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	20006c94 	.word	0x20006c94
 800d334:	200068d0 	.word	0x200068d0
 800d338:	000032f2 	.word	0x000032f2

0800d33c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d33c:	b530      	push	{r4, r5, lr}
 800d33e:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d340:	4d16      	ldr	r5, [pc, #88]	; (800d39c <GetTimeDate+0x60>)
 800d342:	2200      	movs	r2, #0
 800d344:	a902      	add	r1, sp, #8
 800d346:	0028      	movs	r0, r5
 800d348:	f004 fee0 	bl	801210c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d34c:	ac07      	add	r4, sp, #28
 800d34e:	2200      	movs	r2, #0
 800d350:	0021      	movs	r1, r4
 800d352:	0028      	movs	r0, r5
 800d354:	f004 ff00 	bl	8012158 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d358:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <GetTimeDate+0x64>)
 800d35a:	aa02      	add	r2, sp, #8
 800d35c:	7a12      	ldrb	r2, [r2, #8]
 800d35e:	09d2      	lsrs	r2, r2, #7
 800d360:	3201      	adds	r2, #1
 800d362:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d364:	9a03      	ldr	r2, [sp, #12]
 800d366:	9201      	str	r2, [sp, #4]
 800d368:	0852      	lsrs	r2, r2, #1
 800d36a:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d36c:	aa02      	add	r2, sp, #8
 800d36e:	7892      	ldrb	r2, [r2, #2]
 800d370:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d372:	aa02      	add	r2, sp, #8
 800d374:	7852      	ldrb	r2, [r2, #1]
 800d376:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d378:	aa02      	add	r2, sp, #8
 800d37a:	7812      	ldrb	r2, [r2, #0]
 800d37c:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d37e:	78a2      	ldrb	r2, [r4, #2]
 800d380:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d382:	7862      	ldrb	r2, [r4, #1]
 800d384:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d386:	7822      	ldrb	r2, [r4, #0]
 800d388:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d38a:	78e2      	ldrb	r2, [r4, #3]
 800d38c:	21fa      	movs	r1, #250	; 0xfa
 800d38e:	00c9      	lsls	r1, r1, #3
 800d390:	468c      	mov	ip, r1
 800d392:	4462      	add	r2, ip
 800d394:	831a      	strh	r2, [r3, #24]
}
 800d396:	b009      	add	sp, #36	; 0x24
 800d398:	bd30      	pop	{r4, r5, pc}
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	20006c94 	.word	0x20006c94
 800d3a0:	200068d0 	.word	0x200068d0

0800d3a4 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d3a4:	b530      	push	{r4, r5, lr}
 800d3a6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d3a8:	4a12      	ldr	r2, [pc, #72]	; (800d3f4 <TIM_USEC_Init+0x50>)
 800d3aa:	69d1      	ldr	r1, [r2, #28]
 800d3ac:	2080      	movs	r0, #128	; 0x80
 800d3ae:	0040      	lsls	r0, r0, #1
 800d3b0:	4301      	orrs	r1, r0
 800d3b2:	61d1      	str	r1, [r2, #28]
 800d3b4:	69d3      	ldr	r3, [r2, #28]
 800d3b6:	4003      	ands	r3, r0
 800d3b8:	9301      	str	r3, [sp, #4]
 800d3ba:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d3bc:	4c0e      	ldr	r4, [pc, #56]	; (800d3f8 <TIM_USEC_Init+0x54>)
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <TIM_USEC_Init+0x58>)
 800d3c0:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d3c2:	f004 fc61 	bl	8011c88 <HAL_RCC_GetPCLK1Freq>
 800d3c6:	490e      	ldr	r1, [pc, #56]	; (800d400 <TIM_USEC_Init+0x5c>)
 800d3c8:	f7f2 fec2 	bl	8000150 <__udivsi3>
 800d3cc:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d3d2:	4b0c      	ldr	r3, [pc, #48]	; (800d404 <TIM_USEC_Init+0x60>)
 800d3d4:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d3d6:	0020      	movs	r0, r4
 800d3d8:	f005 f950 	bl	801267c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3dc:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3de:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d3e0:	a902      	add	r1, sp, #8
 800d3e2:	0020      	movs	r0, r4
 800d3e4:	f005 faa8 	bl	8012938 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d3e8:	0020      	movs	r0, r4
 800d3ea:	f004 ffd1 	bl	8012390 <HAL_TIM_Base_Start>
}
 800d3ee:	b005      	add	sp, #20
 800d3f0:	bd30      	pop	{r4, r5, pc}
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	40021000 	.word	0x40021000
 800d3f8:	20006cf0 	.word	0x20006cf0
 800d3fc:	40002000 	.word	0x40002000
 800d400:	000f4240 	.word	0x000f4240
 800d404:	0000ffff 	.word	0x0000ffff

0800d408 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d408:	b530      	push	{r4, r5, lr}
 800d40a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d40c:	4a12      	ldr	r2, [pc, #72]	; (800d458 <TIM_MSEC_Init+0x50>)
 800d40e:	6991      	ldr	r1, [r2, #24]
 800d410:	2080      	movs	r0, #128	; 0x80
 800d412:	0240      	lsls	r0, r0, #9
 800d414:	4301      	orrs	r1, r0
 800d416:	6191      	str	r1, [r2, #24]
 800d418:	6993      	ldr	r3, [r2, #24]
 800d41a:	4003      	ands	r3, r0
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d420:	4c0e      	ldr	r4, [pc, #56]	; (800d45c <TIM_MSEC_Init+0x54>)
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <TIM_MSEC_Init+0x58>)
 800d424:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d426:	f004 fc2f 	bl	8011c88 <HAL_RCC_GetPCLK1Freq>
 800d42a:	21fa      	movs	r1, #250	; 0xfa
 800d42c:	0089      	lsls	r1, r1, #2
 800d42e:	f7f2 fe8f 	bl	8000150 <__udivsi3>
 800d432:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d434:	2500      	movs	r5, #0
 800d436:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d438:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <TIM_MSEC_Init+0x5c>)
 800d43a:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d43c:	0020      	movs	r0, r4
 800d43e:	f005 f91d 	bl	801267c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d442:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d444:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d446:	a902      	add	r1, sp, #8
 800d448:	0020      	movs	r0, r4
 800d44a:	f005 fa75 	bl	8012938 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d44e:	0020      	movs	r0, r4
 800d450:	f004 ff9e 	bl	8012390 <HAL_TIM_Base_Start>
}
 800d454:	b005      	add	sp, #20
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	40021000 	.word	0x40021000
 800d45c:	20006cb4 	.word	0x20006cb4
 800d460:	40014000 	.word	0x40014000
 800d464:	0000ffff 	.word	0x0000ffff

0800d468 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d468:	b510      	push	{r4, lr}
 800d46a:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d46c:	f002 fa0c 	bl	800f888 <vPortEnterCritical>
	
	if (Delay)
 800d470:	2c00      	cmp	r4, #0
 800d472:	d006      	beq.n	800d482 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d474:	4b04      	ldr	r3, [pc, #16]	; (800d488 <StartMicroDelay+0x20>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d47a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d47c:	1a5b      	subs	r3, r3, r1
 800d47e:	42a3      	cmp	r3, r4
 800d480:	d9fb      	bls.n	800d47a <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d482:	f002 fa0d 	bl	800f8a0 <vPortExitCritical>
}
 800d486:	bd10      	pop	{r4, pc}
 800d488:	20006cf0 	.word	0x20006cf0

0800d48c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d48c:	b510      	push	{r4, lr}
 800d48e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d490:	f002 f9fa 	bl	800f888 <vPortEnterCritical>
	
	if (Delay)
 800d494:	2c00      	cmp	r4, #0
 800d496:	d006      	beq.n	800d4a6 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d498:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <StartMilliDelay+0x20>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d49e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d4a0:	1a5b      	subs	r3, r3, r1
 800d4a2:	42a3      	cmp	r3, r4
 800d4a4:	d9fb      	bls.n	800d49e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d4a6:	f002 f9fb 	bl	800f8a0 <vPortExitCritical>
}
 800d4aa:	bd10      	pop	{r4, pc}
 800d4ac:	20006cb4 	.word	0x20006cb4

0800d4b0 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d4b0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d4b2:	4809      	ldr	r0, [pc, #36]	; (800d4d8 <MX_USART1_UART_Init+0x28>)
 800d4b4:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <MX_USART1_UART_Init+0x2c>)
 800d4b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d4b8:	23e1      	movs	r3, #225	; 0xe1
 800d4ba:	031b      	lsls	r3, r3, #12
 800d4bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d4c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d4c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d4c6:	220c      	movs	r2, #12
 800d4c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d4ce:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d4d0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d4d2:	f005 feb5 	bl	8013240 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d4d6:	bd10      	pop	{r4, pc}
 800d4d8:	20006acc 	.word	0x20006acc
 800d4dc:	40013800 	.word	0x40013800

0800d4e0 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d4e0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d4e2:	4809      	ldr	r0, [pc, #36]	; (800d508 <MX_USART2_UART_Init+0x28>)
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <MX_USART2_UART_Init+0x2c>)
 800d4e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d4e8:	23e1      	movs	r3, #225	; 0xe1
 800d4ea:	031b      	lsls	r3, r3, #12
 800d4ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d4f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d4f4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d4f6:	220c      	movs	r2, #12
 800d4f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4fc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d4fe:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d500:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d502:	f005 fe9d 	bl	8013240 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d506:	bd10      	pop	{r4, pc}
 800d508:	20006bb4 	.word	0x20006bb4
 800d50c:	40004400 	.word	0x40004400

0800d510 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d510:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d512:	4809      	ldr	r0, [pc, #36]	; (800d538 <MX_USART3_UART_Init+0x28>)
 800d514:	4b09      	ldr	r3, [pc, #36]	; (800d53c <MX_USART3_UART_Init+0x2c>)
 800d516:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d518:	23e1      	movs	r3, #225	; 0xe1
 800d51a:	031b      	lsls	r3, r3, #12
 800d51c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d51e:	2300      	movs	r3, #0
 800d520:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d522:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d524:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d526:	220c      	movs	r2, #12
 800d528:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d52a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d52c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d52e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d530:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d532:	f005 fe85 	bl	8013240 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d536:	bd10      	pop	{r4, pc}
 800d538:	200069a8 	.word	0x200069a8
 800d53c:	40004800 	.word	0x40004800

0800d540 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d540:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d542:	4809      	ldr	r0, [pc, #36]	; (800d568 <MX_USART5_UART_Init+0x28>)
 800d544:	4b09      	ldr	r3, [pc, #36]	; (800d56c <MX_USART5_UART_Init+0x2c>)
 800d546:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d548:	23e1      	movs	r3, #225	; 0xe1
 800d54a:	031b      	lsls	r3, r3, #12
 800d54c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d54e:	2300      	movs	r3, #0
 800d550:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d552:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d554:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d556:	220c      	movs	r2, #12
 800d558:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d55a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d55c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d55e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d560:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d562:	f005 fe6d 	bl	8013240 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d566:	bd10      	pop	{r4, pc}
 800d568:	20006a58 	.word	0x20006a58
 800d56c:	40005000 	.word	0x40005000

0800d570 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d570:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d572:	4809      	ldr	r0, [pc, #36]	; (800d598 <MX_USART6_UART_Init+0x28>)
 800d574:	4b09      	ldr	r3, [pc, #36]	; (800d59c <MX_USART6_UART_Init+0x2c>)
 800d576:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d578:	23e1      	movs	r3, #225	; 0xe1
 800d57a:	031b      	lsls	r3, r3, #12
 800d57c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d57e:	2300      	movs	r3, #0
 800d580:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d582:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d584:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d586:	220c      	movs	r2, #12
 800d588:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d58a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d58c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d58e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d590:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d592:	f005 fe55 	bl	8013240 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d596:	bd10      	pop	{r4, pc}
 800d598:	20006b44 	.word	0x20006b44
 800d59c:	40011400 	.word	0x40011400

0800d5a0 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5a2:	46ce      	mov	lr, r9
 800d5a4:	4647      	mov	r7, r8
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d5aa:	6803      	ldr	r3, [r0, #0]
 800d5ac:	4a7f      	ldr	r2, [pc, #508]	; (800d7ac <HAL_UART_MspInit+0x20c>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d015      	beq.n	800d5de <HAL_UART_MspInit+0x3e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d5b2:	4a7f      	ldr	r2, [pc, #508]	; (800d7b0 <HAL_UART_MspInit+0x210>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d040      	beq.n	800d63a <HAL_UART_MspInit+0x9a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d5b8:	4a7e      	ldr	r2, [pc, #504]	; (800d7b4 <HAL_UART_MspInit+0x214>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d069      	beq.n	800d692 <HAL_UART_MspInit+0xf2>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d5be:	4a7e      	ldr	r2, [pc, #504]	; (800d7b8 <HAL_UART_MspInit+0x218>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d007      	beq.n	800d5d4 <HAL_UART_MspInit+0x34>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d5c4:	4a7d      	ldr	r2, [pc, #500]	; (800d7bc <HAL_UART_MspInit+0x21c>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d100      	bne.n	800d5cc <HAL_UART_MspInit+0x2c>
 800d5ca:	e092      	b.n	800d6f2 <HAL_UART_MspInit+0x152>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d5cc:	4a7c      	ldr	r2, [pc, #496]	; (800d7c0 <HAL_UART_MspInit+0x220>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d100      	bne.n	800d5d4 <HAL_UART_MspInit+0x34>
 800d5d2:	e0bc      	b.n	800d74e <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d5d4:	b00b      	add	sp, #44	; 0x2c
 800d5d6:	bcc0      	pop	{r6, r7}
 800d5d8:	46b9      	mov	r9, r7
 800d5da:	46b0      	mov	r8, r6
 800d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d5de:	4a79      	ldr	r2, [pc, #484]	; (800d7c4 <HAL_UART_MspInit+0x224>)
 800d5e0:	6991      	ldr	r1, [r2, #24]
 800d5e2:	2080      	movs	r0, #128	; 0x80
 800d5e4:	01c0      	lsls	r0, r0, #7
 800d5e6:	4301      	orrs	r1, r0
 800d5e8:	6191      	str	r1, [r2, #24]
 800d5ea:	6993      	ldr	r3, [r2, #24]
 800d5ec:	4003      	ands	r3, r0
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d5f2:	2380      	movs	r3, #128	; 0x80
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f8:	2702      	movs	r7, #2
 800d5fa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5fc:	2401      	movs	r4, #1
 800d5fe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d600:	2603      	movs	r6, #3
 800d602:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d604:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d606:	2590      	movs	r5, #144	; 0x90
 800d608:	05ed      	lsls	r5, r5, #23
 800d60a:	a905      	add	r1, sp, #20
 800d60c:	0028      	movs	r0, r5
 800d60e:	f003 fdd1 	bl	80111b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d612:	2380      	movs	r3, #128	; 0x80
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d618:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d61a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d61c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d61e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d620:	a905      	add	r1, sp, #20
 800d622:	0028      	movs	r0, r5
 800d624:	f003 fdc6 	bl	80111b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d628:	2200      	movs	r2, #0
 800d62a:	2101      	movs	r1, #1
 800d62c:	201b      	movs	r0, #27
 800d62e:	f002 fdeb 	bl	8010208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d632:	201b      	movs	r0, #27
 800d634:	f002 fe1a 	bl	801026c <HAL_NVIC_EnableIRQ>
 800d638:	e7cc      	b.n	800d5d4 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d63a:	4a62      	ldr	r2, [pc, #392]	; (800d7c4 <HAL_UART_MspInit+0x224>)
 800d63c:	69d1      	ldr	r1, [r2, #28]
 800d63e:	2080      	movs	r0, #128	; 0x80
 800d640:	0280      	lsls	r0, r0, #10
 800d642:	4301      	orrs	r1, r0
 800d644:	61d1      	str	r1, [r2, #28]
 800d646:	69d3      	ldr	r3, [r2, #28]
 800d648:	4003      	ands	r3, r0
 800d64a:	9301      	str	r3, [sp, #4]
 800d64c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d64e:	2304      	movs	r3, #4
 800d650:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d652:	2702      	movs	r7, #2
 800d654:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d656:	2401      	movs	r4, #1
 800d658:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d65a:	2603      	movs	r6, #3
 800d65c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d65e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d660:	2590      	movs	r5, #144	; 0x90
 800d662:	05ed      	lsls	r5, r5, #23
 800d664:	a905      	add	r1, sp, #20
 800d666:	0028      	movs	r0, r5
 800d668:	f003 fda4 	bl	80111b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d66c:	2308      	movs	r3, #8
 800d66e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d670:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d672:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d674:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d676:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d678:	a905      	add	r1, sp, #20
 800d67a:	0028      	movs	r0, r5
 800d67c:	f003 fd9a 	bl	80111b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d680:	2200      	movs	r2, #0
 800d682:	2101      	movs	r1, #1
 800d684:	201c      	movs	r0, #28
 800d686:	f002 fdbf 	bl	8010208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d68a:	201c      	movs	r0, #28
 800d68c:	f002 fdee 	bl	801026c <HAL_NVIC_EnableIRQ>
 800d690:	e7a0      	b.n	800d5d4 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d692:	4a4c      	ldr	r2, [pc, #304]	; (800d7c4 <HAL_UART_MspInit+0x224>)
 800d694:	69d1      	ldr	r1, [r2, #28]
 800d696:	2080      	movs	r0, #128	; 0x80
 800d698:	02c0      	lsls	r0, r0, #11
 800d69a:	4301      	orrs	r1, r0
 800d69c:	61d1      	str	r1, [r2, #28]
 800d69e:	69d3      	ldr	r3, [r2, #28]
 800d6a0:	4003      	ands	r3, r0
 800d6a2:	9302      	str	r3, [sp, #8]
 800d6a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d6a6:	2380      	movs	r3, #128	; 0x80
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	4698      	mov	r8, r3
 800d6b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6b2:	2701      	movs	r7, #1
 800d6b4:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6b6:	2603      	movs	r6, #3
 800d6b8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d6ba:	2504      	movs	r5, #4
 800d6bc:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d6be:	4c42      	ldr	r4, [pc, #264]	; (800d7c8 <HAL_UART_MspInit+0x228>)
 800d6c0:	a905      	add	r1, sp, #20
 800d6c2:	0020      	movs	r0, r4
 800d6c4:	f003 fd76 	bl	80111b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d6c8:	2380      	movs	r3, #128	; 0x80
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6ce:	4643      	mov	r3, r8
 800d6d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6d2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6d4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800d6d6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d6d8:	a905      	add	r1, sp, #20
 800d6da:	0020      	movs	r0, r4
 800d6dc:	f003 fd6a 	bl	80111b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	201d      	movs	r0, #29
 800d6e6:	f002 fd8f 	bl	8010208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d6ea:	201d      	movs	r0, #29
 800d6ec:	f002 fdbe 	bl	801026c <HAL_NVIC_EnableIRQ>
 800d6f0:	e770      	b.n	800d5d4 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800d6f2:	4a34      	ldr	r2, [pc, #208]	; (800d7c4 <HAL_UART_MspInit+0x224>)
 800d6f4:	69d1      	ldr	r1, [r2, #28]
 800d6f6:	2080      	movs	r0, #128	; 0x80
 800d6f8:	0340      	lsls	r0, r0, #13
 800d6fa:	4301      	orrs	r1, r0
 800d6fc:	61d1      	str	r1, [r2, #28]
 800d6fe:	69d3      	ldr	r3, [r2, #28]
 800d700:	4003      	ands	r3, r0
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d706:	2308      	movs	r3, #8
 800d708:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d70a:	3b06      	subs	r3, #6
 800d70c:	4698      	mov	r8, r3
 800d70e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d710:	2701      	movs	r7, #1
 800d712:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d714:	2603      	movs	r6, #3
 800d716:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d718:	2504      	movs	r5, #4
 800d71a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d71c:	4c2a      	ldr	r4, [pc, #168]	; (800d7c8 <HAL_UART_MspInit+0x228>)
 800d71e:	a905      	add	r1, sp, #20
 800d720:	0020      	movs	r0, r4
 800d722:	f003 fd47 	bl	80111b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d726:	2310      	movs	r3, #16
 800d728:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d72a:	4643      	mov	r3, r8
 800d72c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d72e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d730:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d732:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d734:	a905      	add	r1, sp, #20
 800d736:	0020      	movs	r0, r4
 800d738:	f003 fd3c 	bl	80111b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d73c:	2200      	movs	r2, #0
 800d73e:	2101      	movs	r1, #1
 800d740:	201d      	movs	r0, #29
 800d742:	f002 fd61 	bl	8010208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d746:	201d      	movs	r0, #29
 800d748:	f002 fd90 	bl	801026c <HAL_NVIC_EnableIRQ>
 800d74c:	e742      	b.n	800d5d4 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800d74e:	4b1d      	ldr	r3, [pc, #116]	; (800d7c4 <HAL_UART_MspInit+0x224>)
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	2420      	movs	r4, #32
 800d754:	4322      	orrs	r2, r4
 800d756:	619a      	str	r2, [r3, #24]
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	4023      	ands	r3, r4
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d760:	2310      	movs	r3, #16
 800d762:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d764:	3b0e      	subs	r3, #14
 800d766:	4699      	mov	r9, r3
 800d768:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4698      	mov	r8, r3
 800d76e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d770:	2703      	movs	r7, #3
 800d772:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d774:	2605      	movs	r6, #5
 800d776:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d778:	2590      	movs	r5, #144	; 0x90
 800d77a:	05ed      	lsls	r5, r5, #23
 800d77c:	a905      	add	r1, sp, #20
 800d77e:	0028      	movs	r0, r5
 800d780:	f003 fd18 	bl	80111b4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d784:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d786:	464b      	mov	r3, r9
 800d788:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d78a:	4643      	mov	r3, r8
 800d78c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d78e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d790:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d792:	a905      	add	r1, sp, #20
 800d794:	0028      	movs	r0, r5
 800d796:	f003 fd0d 	bl	80111b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d79a:	2200      	movs	r2, #0
 800d79c:	2101      	movs	r1, #1
 800d79e:	201d      	movs	r0, #29
 800d7a0:	f002 fd32 	bl	8010208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d7a4:	201d      	movs	r0, #29
 800d7a6:	f002 fd61 	bl	801026c <HAL_NVIC_EnableIRQ>
}
 800d7aa:	e713      	b.n	800d5d4 <HAL_UART_MspInit+0x34>
 800d7ac:	40013800 	.word	0x40013800
 800d7b0:	40004400 	.word	0x40004400
 800d7b4:	40004800 	.word	0x40004800
 800d7b8:	40004c00 	.word	0x40004c00
 800d7bc:	40005000 	.word	0x40005000
 800d7c0:	40011400 	.word	0x40011400
 800d7c4:	40021000 	.word	0x40021000
 800d7c8:	48000400 	.word	0x48000400

0800d7cc <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d7cc:	2805      	cmp	r0, #5
 800d7ce:	d80b      	bhi.n	800d7e8 <GetUart+0x1c>
 800d7d0:	0080      	lsls	r0, r0, #2
 800d7d2:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <GetUart+0x24>)
 800d7d4:	581b      	ldr	r3, [r3, r0]
 800d7d6:	469f      	mov	pc, r3
		case P4 :
			return P4uart;
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d7d8:	4806      	ldr	r0, [pc, #24]	; (800d7f4 <GetUart+0x28>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d7da:	4770      	bx	lr
			return P3uart;
 800d7dc:	4806      	ldr	r0, [pc, #24]	; (800d7f8 <GetUart+0x2c>)
 800d7de:	e7fc      	b.n	800d7da <GetUart+0xe>
			return P4uart;
 800d7e0:	4806      	ldr	r0, [pc, #24]	; (800d7fc <GetUart+0x30>)
 800d7e2:	e7fa      	b.n	800d7da <GetUart+0xe>
			return P5uart;
 800d7e4:	4806      	ldr	r0, [pc, #24]	; (800d800 <GetUart+0x34>)
 800d7e6:	e7f8      	b.n	800d7da <GetUart+0xe>
			return 0;
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	e7f6      	b.n	800d7da <GetUart+0xe>
			return P1uart;	
 800d7ec:	4805      	ldr	r0, [pc, #20]	; (800d804 <GetUart+0x38>)
 800d7ee:	e7f4      	b.n	800d7da <GetUart+0xe>
 800d7f0:	0801c954 	.word	0x0801c954
 800d7f4:	20006bb4 	.word	0x20006bb4
 800d7f8:	20006b44 	.word	0x20006b44
 800d7fc:	200069a8 	.word	0x200069a8
 800d800:	20006acc 	.word	0x20006acc
 800d804:	20006a58 	.word	0x20006a58

0800d808 <writePxMutex>:
{
 800d808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d80a:	46ce      	mov	lr, r9
 800d80c:	b500      	push	{lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	0006      	movs	r6, r0
 800d812:	000f      	movs	r7, r1
 800d814:	4691      	mov	r9, r2
 800d816:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d818:	f7ff ffd8 	bl	800d7cc <GetUart>
 800d81c:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d81e:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800d820:	2800      	cmp	r0, #0
 800d822:	d016      	beq.n	800d852 <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d824:	00b3      	lsls	r3, r6, #2
 800d826:	4a0d      	ldr	r2, [pc, #52]	; (800d85c <writePxMutex+0x54>)
 800d828:	5898      	ldr	r0, [r3, r2]
 800d82a:	9901      	ldr	r1, [sp, #4]
 800d82c:	f000 f93a 	bl	800daa4 <osSemaphoreWait>
 800d830:	2800      	cmp	r0, #0
 800d832:	d10e      	bne.n	800d852 <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d834:	9b08      	ldr	r3, [sp, #32]
 800d836:	464a      	mov	r2, r9
 800d838:	0039      	movs	r1, r7
 800d83a:	0028      	movs	r0, r5
 800d83c:	f005 fc54 	bl	80130e8 <HAL_UART_Transmit>
 800d840:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d842:	d001      	beq.n	800d848 <writePxMutex+0x40>
 800d844:	2803      	cmp	r0, #3
 800d846:	d1f5      	bne.n	800d834 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d848:	00b6      	lsls	r6, r6, #2
 800d84a:	4b04      	ldr	r3, [pc, #16]	; (800d85c <writePxMutex+0x54>)
 800d84c:	58f0      	ldr	r0, [r6, r3]
 800d84e:	f000 f957 	bl	800db00 <osSemaphoreRelease>
}
 800d852:	0020      	movs	r0, r4
 800d854:	b002      	add	sp, #8
 800d856:	bc80      	pop	{r7}
 800d858:	46b9      	mov	r9, r7
 800d85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d85c:	20006950 	.word	0x20006950

0800d860 <writePxITMutex>:
{
 800d860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d862:	b083      	sub	sp, #12
 800d864:	0004      	movs	r4, r0
 800d866:	9101      	str	r1, [sp, #4]
 800d868:	0017      	movs	r7, r2
 800d86a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d86c:	f7ff ffae 	bl	800d7cc <GetUart>
 800d870:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d872:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800d874:	2e00      	cmp	r6, #0
 800d876:	d009      	beq.n	800d88c <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d878:	00a4      	lsls	r4, r4, #2
 800d87a:	4b08      	ldr	r3, [pc, #32]	; (800d89c <writePxITMutex+0x3c>)
 800d87c:	58e0      	ldr	r0, [r4, r3]
 800d87e:	0029      	movs	r1, r5
 800d880:	f000 f910 	bl	800daa4 <osSemaphoreWait>
 800d884:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d886:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <writePxITMutex+0x30>
}
 800d88c:	b003      	add	sp, #12
 800d88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d890:	003a      	movs	r2, r7
 800d892:	9901      	ldr	r1, [sp, #4]
 800d894:	0030      	movs	r0, r6
 800d896:	f005 f892 	bl	80129be <HAL_UART_Transmit_IT>
 800d89a:	e7f7      	b.n	800d88c <writePxITMutex+0x2c>
 800d89c:	20006950 	.word	0x20006950

0800d8a0 <writePxDMAMutex>:
{
 800d8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	0004      	movs	r4, r0
 800d8a6:	9101      	str	r1, [sp, #4]
 800d8a8:	0017      	movs	r7, r2
 800d8aa:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800d8ac:	f7ff ff8e 	bl	800d7cc <GetUart>
 800d8b0:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d8b2:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800d8b4:	2e00      	cmp	r6, #0
 800d8b6:	d009      	beq.n	800d8cc <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d8b8:	00a4      	lsls	r4, r4, #2
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <writePxDMAMutex+0x44>)
 800d8bc:	58e0      	ldr	r0, [r4, r3]
 800d8be:	0029      	movs	r1, r5
 800d8c0:	f000 f8f0 	bl	800daa4 <osSemaphoreWait>
 800d8c4:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d8c6:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <writePxDMAMutex+0x30>
}
 800d8cc:	b003      	add	sp, #12
 800d8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d8d0:	0030      	movs	r0, r6
 800d8d2:	f7ff f989 	bl	800cbe8 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d8d6:	003a      	movs	r2, r7
 800d8d8:	9901      	ldr	r1, [sp, #4]
 800d8da:	0030      	movs	r0, r6
 800d8dc:	f005 f91e 	bl	8012b1c <HAL_UART_Transmit_DMA>
 800d8e0:	e7f4      	b.n	800d8cc <writePxDMAMutex+0x2c>
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	20006950 	.word	0x20006950

0800d8e8 <UpdateBaudrate>:
{
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d8ec:	f7ff ff6e 	bl	800d7cc <GetUart>
	huart->Init.BaudRate = baudrate;
 800d8f0:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d8f2:	f005 fca5 	bl	8013240 <HAL_UART_Init>
}
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	bd10      	pop	{r4, pc}
	...

0800d8fc <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d900:	d003      	beq.n	800d90a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d902:	2901      	cmp	r1, #1
 800d904:	d002      	beq.n	800d90c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d906:	2900      	cmp	r1, #0
 800d908:	d016      	beq.n	800d938 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d90c:	f7fd fde0 	bl	800b4d0 <GetPort>
 800d910:	4b14      	ldr	r3, [pc, #80]	; (800d964 <SwapUartPins+0x68>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	3b01      	subs	r3, #1
 800d916:	4d14      	ldr	r5, [pc, #80]	; (800d968 <SwapUartPins+0x6c>)
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	3801      	subs	r0, #1
 800d91c:	2180      	movs	r1, #128	; 0x80
 800d91e:	0209      	lsls	r1, r1, #8
 800d920:	000a      	movs	r2, r1
 800d922:	4102      	asrs	r2, r0
 800d924:	5b58      	ldrh	r0, [r3, r5]
 800d926:	4302      	orrs	r2, r0
 800d928:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d92a:	2308      	movs	r3, #8
 800d92c:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d92e:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d930:	0020      	movs	r0, r4
 800d932:	f005 fc85 	bl	8013240 <HAL_UART_Init>
 800d936:	e7e8      	b.n	800d90a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d938:	f7fd fdca 	bl	800b4d0 <GetPort>
 800d93c:	4b09      	ldr	r3, [pc, #36]	; (800d964 <SwapUartPins+0x68>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	3b01      	subs	r3, #1
 800d942:	4d09      	ldr	r5, [pc, #36]	; (800d968 <SwapUartPins+0x6c>)
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	3801      	subs	r0, #1
 800d948:	2180      	movs	r1, #128	; 0x80
 800d94a:	0209      	lsls	r1, r1, #8
 800d94c:	4101      	asrs	r1, r0
 800d94e:	5b5a      	ldrh	r2, [r3, r5]
 800d950:	438a      	bics	r2, r1
 800d952:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d954:	2308      	movs	r3, #8
 800d956:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d958:	2300      	movs	r3, #0
 800d95a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d95c:	0020      	movs	r0, r4
 800d95e:	f005 fc6f 	bl	8013240 <HAL_UART_Init>
}
 800d962:	e7d2      	b.n	800d90a <SwapUartPins+0xe>
 800d964:	20001046 	.word	0x20001046
 800d968:	20006d2c 	.word	0x20006d2c

0800d96c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d96c:	4816      	ldr	r0, [pc, #88]	; (800d9c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d96e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d972:	e003      	b.n	800d97c <LoopCopyDataInit>

0800d974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d974:	4b15      	ldr	r3, [pc, #84]	; (800d9cc <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d97a:	3104      	adds	r1, #4

0800d97c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d97c:	4814      	ldr	r0, [pc, #80]	; (800d9d0 <LoopForever+0xc>)
  ldr r3, =_edata
 800d97e:	4b15      	ldr	r3, [pc, #84]	; (800d9d4 <LoopForever+0x10>)
  adds r2, r0, r1
 800d980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d984:	d3f6      	bcc.n	800d974 <CopyDataInit>
  ldr r2, =_sbss
 800d986:	4a14      	ldr	r2, [pc, #80]	; (800d9d8 <LoopForever+0x14>)
  b LoopFillZerobss
 800d988:	e002      	b.n	800d990 <LoopFillZerobss>

0800d98a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d98a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d98c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d98e:	3204      	adds	r2, #4

0800d990 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d990:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <LoopForever+0x18>)
  cmp r2, r3
 800d992:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d994:	d3f9      	bcc.n	800d98a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d996:	4812      	ldr	r0, [pc, #72]	; (800d9e0 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d998:	4912      	ldr	r1, [pc, #72]	; (800d9e4 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d99a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d99c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d99e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d9a0:	d005      	beq.n	800d9ae <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d9a2:	f000 f82b 	bl	800d9fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d9a6:	f005 fdc1 	bl	801352c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d9aa:	f005 fda0 	bl	80134ee <main>

0800d9ae <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d9ae:	480e      	ldr	r0, [pc, #56]	; (800d9e8 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d9b0:	490e      	ldr	r1, [pc, #56]	; (800d9ec <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d9b2:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d9b4:	480e      	ldr	r0, [pc, #56]	; (800d9f0 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d9b6:	490d      	ldr	r1, [pc, #52]	; (800d9ec <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d9b8:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d9ba:	480e      	ldr	r0, [pc, #56]	; (800d9f4 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d9bc:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d9be:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d9c0:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d9c2:	4700      	bx	r0

0800d9c4 <LoopForever>:


LoopForever:
    b LoopForever
 800d9c4:	e7fe      	b.n	800d9c4 <LoopForever>
 800d9c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d9c8:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d9cc:	0801cfd4 	.word	0x0801cfd4
  ldr r0, =_sdata
 800d9d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d9d4:	20000a5c 	.word	0x20000a5c
  ldr r2, =_sbss
 800d9d8:	20000a60 	.word	0x20000a60
  ldr r3, = _ebss
 800d9dc:	20006dd0 	.word	0x20006dd0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d9e0:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d9e4:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d9e8:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d9ec:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d9f0:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d9f4:	1fffd800 	.word	0x1fffd800

0800d9f8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d9f8:	e7fe      	b.n	800d9f8 <CEC_CAN_IRQHandler>
	...

0800d9fc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d9fc:	4b11      	ldr	r3, [pc, #68]	; (800da44 <SystemInit+0x48>)
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	2101      	movs	r1, #1
 800da02:	430a      	orrs	r2, r1
 800da04:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	480f      	ldr	r0, [pc, #60]	; (800da48 <SystemInit+0x4c>)
 800da0a:	4002      	ands	r2, r0
 800da0c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	480e      	ldr	r0, [pc, #56]	; (800da4c <SystemInit+0x50>)
 800da12:	4002      	ands	r2, r0
 800da14:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	480d      	ldr	r0, [pc, #52]	; (800da50 <SystemInit+0x54>)
 800da1a:	4002      	ands	r2, r0
 800da1c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	480c      	ldr	r0, [pc, #48]	; (800da54 <SystemInit+0x58>)
 800da22:	4002      	ands	r2, r0
 800da24:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800da26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da28:	200f      	movs	r0, #15
 800da2a:	4382      	bics	r2, r0
 800da2c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800da2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da30:	4809      	ldr	r0, [pc, #36]	; (800da58 <SystemInit+0x5c>)
 800da32:	4002      	ands	r2, r0
 800da34:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800da36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da38:	438a      	bics	r2, r1
 800da3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800da3c:	2200      	movs	r2, #0
 800da3e:	609a      	str	r2, [r3, #8]

}
 800da40:	4770      	bx	lr
 800da42:	46c0      	nop			; (mov r8, r8)
 800da44:	40021000 	.word	0x40021000
 800da48:	08ffb80c 	.word	0x08ffb80c
 800da4c:	fef6ffff 	.word	0xfef6ffff
 800da50:	fffbffff 	.word	0xfffbffff
 800da54:	ffc0ffff 	.word	0xffc0ffff
 800da58:	fff0feac 	.word	0xfff0feac

0800da5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da5c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800da5e:	f000 ff7d 	bl	800e95c <vTaskStartScheduler>
  
  return osOK;
}
 800da62:	2000      	movs	r0, #0
 800da64:	bd10      	pop	{r4, pc}

0800da66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da66:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da68:	2800      	cmp	r0, #0
 800da6a:	d100      	bne.n	800da6e <osDelay+0x8>
 800da6c:	3001      	adds	r0, #1
 800da6e:	f001 f8bd 	bl	800ebec <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da72:	2000      	movs	r0, #0
 800da74:	bd10      	pop	{r4, pc}

0800da76 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800da76:	b510      	push	{r4, lr}
 800da78:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800da7a:	2901      	cmp	r1, #1
 800da7c:	d005      	beq.n	800da8a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800da7e:	2100      	movs	r1, #0
 800da80:	f000 fb06 	bl	800e090 <xQueueCreateCountingSemaphore>
 800da84:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800da86:	0020      	movs	r0, r4
 800da88:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800da8a:	2203      	movs	r2, #3
 800da8c:	2100      	movs	r1, #0
 800da8e:	f000 fada 	bl	800e046 <xQueueGenericCreate>
 800da92:	1e04      	subs	r4, r0, #0
 800da94:	d0f7      	beq.n	800da86 <osSemaphoreCreate+0x10>
 800da96:	2300      	movs	r3, #0
 800da98:	2200      	movs	r2, #0
 800da9a:	2100      	movs	r1, #0
 800da9c:	f000 fb0c 	bl	800e0b8 <xQueueGenericSend>
 800daa0:	e7f1      	b.n	800da86 <osSemaphoreCreate+0x10>
	...

0800daa4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800daa4:	b500      	push	{lr}
 800daa6:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800daa8:	2300      	movs	r3, #0
 800daaa:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800daac:	2800      	cmp	r0, #0
 800daae:	d020      	beq.n	800daf2 <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00e      	beq.n	800dad6 <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dab8:	aa01      	add	r2, sp, #4
 800daba:	2100      	movs	r1, #0
 800dabc:	f000 fcc7 	bl	800e44e <xQueueReceiveFromISR>
 800dac0:	2801      	cmp	r0, #1
 800dac2:	d118      	bne.n	800daf6 <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dac4:	9801      	ldr	r0, [sp, #4]
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d011      	beq.n	800daee <osSemaphoreWait+0x4a>
 800daca:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <osSemaphoreWait+0x58>)
 800dacc:	2280      	movs	r2, #128	; 0x80
 800dace:	0552      	lsls	r2, r2, #21
 800dad0:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800dad2:	2000      	movs	r0, #0
 800dad4:	e00b      	b.n	800daee <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dad6:	2300      	movs	r3, #0
 800dad8:	000a      	movs	r2, r1
 800dada:	2100      	movs	r1, #0
 800dadc:	f000 fc0c 	bl	800e2f8 <xQueueGenericReceive>
    return osErrorOS;
 800dae0:	3801      	subs	r0, #1
 800dae2:	4243      	negs	r3, r0
 800dae4:	4158      	adcs	r0, r3
 800dae6:	4240      	negs	r0, r0
 800dae8:	23fe      	movs	r3, #254	; 0xfe
 800daea:	4398      	bics	r0, r3
 800daec:	30ff      	adds	r0, #255	; 0xff
}
 800daee:	b003      	add	sp, #12
 800daf0:	bd00      	pop	{pc}
    return osErrorParameter;
 800daf2:	2080      	movs	r0, #128	; 0x80
 800daf4:	e7fb      	b.n	800daee <osSemaphoreWait+0x4a>
      return osErrorOS;
 800daf6:	20ff      	movs	r0, #255	; 0xff
 800daf8:	e7f9      	b.n	800daee <osSemaphoreWait+0x4a>
 800dafa:	46c0      	nop			; (mov r8, r8)
 800dafc:	e000ed04 	.word	0xe000ed04

0800db00 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800db00:	b510      	push	{r4, lr}
 800db02:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800db04:	2300      	movs	r3, #0
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800db0c:	2c00      	cmp	r4, #0
 800db0e:	d00d      	beq.n	800db2c <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db10:	a901      	add	r1, sp, #4
 800db12:	f000 fbb5 	bl	800e280 <xQueueGiveFromISR>
 800db16:	2801      	cmp	r0, #1
 800db18:	d113      	bne.n	800db42 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800db1a:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db1c:	9b01      	ldr	r3, [sp, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00c      	beq.n	800db3c <osSemaphoreRelease+0x3c>
 800db22:	4b09      	ldr	r3, [pc, #36]	; (800db48 <osSemaphoreRelease+0x48>)
 800db24:	2280      	movs	r2, #128	; 0x80
 800db26:	0552      	lsls	r2, r2, #21
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e007      	b.n	800db3c <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800db2c:	2300      	movs	r3, #0
 800db2e:	2200      	movs	r2, #0
 800db30:	2100      	movs	r1, #0
 800db32:	f000 fac1 	bl	800e0b8 <xQueueGenericSend>
 800db36:	2801      	cmp	r0, #1
 800db38:	d000      	beq.n	800db3c <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800db3a:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800db3c:	0020      	movs	r0, r4
 800db3e:	b002      	add	sp, #8
 800db40:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800db42:	24ff      	movs	r4, #255	; 0xff
 800db44:	e7fa      	b.n	800db3c <osSemaphoreRelease+0x3c>
 800db46:	46c0      	nop			; (mov r8, r8)
 800db48:	e000ed04 	.word	0xe000ed04

0800db4c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800db4c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800db4e:	f001 fa41 	bl	800efd4 <xTaskGetSchedulerState>
 800db52:	2801      	cmp	r0, #1
 800db54:	d100      	bne.n	800db58 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800db56:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800db58:	f001 fedc 	bl	800f914 <xPortSysTickHandler>
}
 800db5c:	e7fb      	b.n	800db56 <osSystickHandler+0xa>
	...

0800db60 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800db64:	d011      	beq.n	800db8a <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800db66:	2008      	movs	r0, #8
 800db68:	f001 ff10 	bl	800f98c <pvPortMalloc>
 800db6c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800db6e:	d00e      	beq.n	800db8e <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800db70:	f001 fe8a 	bl	800f888 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800db74:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800db7a:	4b06      	ldr	r3, [pc, #24]	; (800db94 <FreeRTOS_CLIRegisterCommand+0x34>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800db80:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800db82:	f001 fe8d 	bl	800f8a0 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800db86:	2001      	movs	r0, #1
 800db88:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800db8a:	b672      	cpsid	i
 800db8c:	e7fe      	b.n	800db8c <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800db8e:	b672      	cpsid	i
 800db90:	e7fe      	b.n	800db90 <FreeRTOS_CLIRegisterCommand+0x30>
 800db92:	46c0      	nop			; (mov r8, r8)
 800db94:	20000098 	.word	0x20000098

0800db98 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800db98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9a:	46de      	mov	lr, fp
 800db9c:	4657      	mov	r7, sl
 800db9e:	464e      	mov	r6, r9
 800dba0:	4645      	mov	r5, r8
 800dba2:	b5e0      	push	{r5, r6, r7, lr}
 800dba4:	b083      	sub	sp, #12
 800dba6:	0006      	movs	r6, r0
 800dba8:	4689      	mov	r9, r1
 800dbaa:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800dbac:	4b3b      	ldr	r3, [pc, #236]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d012      	beq.n	800dbda <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	0032      	movs	r2, r6
 800dbba:	9901      	ldr	r1, [sp, #4]
 800dbbc:	4648      	mov	r0, r9
 800dbbe:	4798      	blx	r3
 800dbc0:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800dbc2:	d102      	bne.n	800dbca <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800dbc4:	4b35      	ldr	r3, [pc, #212]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800dbca:	0028      	movs	r0, r5
 800dbcc:	b003      	add	sp, #12
 800dbce:	bcf0      	pop	{r4, r5, r6, r7}
 800dbd0:	46bb      	mov	fp, r7
 800dbd2:	46b2      	mov	sl, r6
 800dbd4:	46a9      	mov	r9, r5
 800dbd6:	46a0      	mov	r8, r4
 800dbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dbda:	4c31      	ldr	r4, [pc, #196]	; (800dca0 <FreeRTOS_CLIProcessCommand+0x108>)
 800dbdc:	4b2f      	ldr	r3, [pc, #188]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dbde:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dbe4:	4b2d      	ldr	r3, [pc, #180]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dbe6:	469b      	mov	fp, r3
 800dbe8:	e00a      	b.n	800dc00 <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800dbea:	0029      	movs	r1, r5
 800dbec:	0030      	movs	r0, r6
 800dbee:	f006 f938 	bl	8013e62 <strncmp>
 800dbf2:	1e05      	subs	r5, r0, #0
 800dbf4:	d012      	beq.n	800dc1c <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dbf6:	6864      	ldr	r4, [r4, #4]
 800dbf8:	465b      	mov	r3, fp
 800dbfa:	601c      	str	r4, [r3, #0]
 800dbfc:	2c00      	cmp	r4, #0
 800dbfe:	d015      	beq.n	800dc2c <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800dc00:	6827      	ldr	r7, [r4, #0]
 800dc02:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800dc04:	0028      	movs	r0, r5
 800dc06:	f7f2 fa87 	bl	8000118 <strlen>
 800dc0a:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dc0c:	5c33      	ldrb	r3, [r6, r0]
 800dc0e:	4651      	mov	r1, sl
 800dc10:	438b      	bics	r3, r1
 800dc12:	b259      	sxtb	r1, r3
 800dc14:	4688      	mov	r8, r1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1ed      	bne.n	800dbf6 <FreeRTOS_CLIProcessCommand+0x5e>
 800dc1a:	e7e6      	b.n	800dbea <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800dc1c:	7b3f      	ldrb	r7, [r7, #12]
 800dc1e:	b27f      	sxtb	r7, r7
 800dc20:	2f00      	cmp	r7, #0
 800dc22:	da0a      	bge.n	800dc3a <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dc24:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1c3      	bne.n	800dbb4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dc2c:	9a01      	ldr	r2, [sp, #4]
 800dc2e:	491d      	ldr	r1, [pc, #116]	; (800dca4 <FreeRTOS_CLIProcessCommand+0x10c>)
 800dc30:	4648      	mov	r0, r9
 800dc32:	f006 f927 	bl	8013e84 <strncpy>
		xReturn = pdFALSE;
 800dc36:	2500      	movs	r5, #0
	return xReturn;
 800dc38:	e7c7      	b.n	800dbca <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	56f3      	ldrsb	r3, [r6, r3]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d02a      	beq.n	800dc98 <FreeRTOS_CLIProcessCommand+0x100>
 800dc42:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800dc44:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800dc46:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800dc48:	2001      	movs	r0, #1
 800dc4a:	e00b      	b.n	800dc64 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800dc4c:	2a01      	cmp	r2, #1
 800dc4e:	d004      	beq.n	800dc5a <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800dc50:	4643      	mov	r3, r8
 800dc52:	3301      	adds	r3, #1
 800dc54:	b25b      	sxtb	r3, r3
 800dc56:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800dc58:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800dc5a:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	56e3      	ldrsb	r3, [r4, r3]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d003      	beq.n	800dc6c <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800dc64:	2b20      	cmp	r3, #32
 800dc66:	d0f1      	beq.n	800dc4c <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800dc68:	000a      	movs	r2, r1
 800dc6a:	e7f6      	b.n	800dc5a <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800dc6c:	2a01      	cmp	r2, #1
 800dc6e:	d00e      	beq.n	800dc8e <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dc70:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0d9      	beq.n	800dc2c <FreeRTOS_CLIProcessCommand+0x94>
 800dc78:	4547      	cmp	r7, r8
 800dc7a:	d09b      	beq.n	800dbb4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dc7c:	9a01      	ldr	r2, [sp, #4]
 800dc7e:	490a      	ldr	r1, [pc, #40]	; (800dca8 <FreeRTOS_CLIProcessCommand+0x110>)
 800dc80:	4648      	mov	r0, r9
 800dc82:	f006 f8ff 	bl	8013e84 <strncpy>
		pxCommand = NULL;
 800dc86:	4b05      	ldr	r3, [pc, #20]	; (800dc9c <FreeRTOS_CLIProcessCommand+0x104>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	e79d      	b.n	800dbca <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800dc8e:	4643      	mov	r3, r8
 800dc90:	3b01      	subs	r3, #1
 800dc92:	b25b      	sxtb	r3, r3
 800dc94:	4698      	mov	r8, r3
 800dc96:	e7eb      	b.n	800dc70 <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800dc98:	4698      	mov	r8, r3
 800dc9a:	e7e9      	b.n	800dc70 <FreeRTOS_CLIProcessCommand+0xd8>
 800dc9c:	20001c5c 	.word	0x20001c5c
 800dca0:	2000009c 	.word	0x2000009c
 800dca4:	0801c9c4 	.word	0x0801c9c4
 800dca8:	0801c96c 	.word	0x0801c96c

0800dcac <FreeRTOS_CLIGetOutputBuffer>:
}
 800dcac:	4800      	ldr	r0, [pc, #0]	; (800dcb0 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800dcae:	4770      	bx	lr
 800dcb0:	200019f4 	.word	0x200019f4

0800dcb4 <FreeRTOS_CLIGetParameter>:
{
 800dcb4:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800dcba:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800dcbc:	e00d      	b.n	800dcda <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	56c3      	ldrsb	r3, [r0, r3]
 800dcc2:	2b20      	cmp	r3, #32
 800dcc4:	d104      	bne.n	800dcd0 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800dcc6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dcc8:	2300      	movs	r3, #0
 800dcca:	56c3      	ldrsb	r3, [r0, r3]
 800dccc:	2b20      	cmp	r3, #32
 800dcce:	d0fa      	beq.n	800dcc6 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d029      	beq.n	800dd28 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800dcd4:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800dcd6:	42a1      	cmp	r1, r4
 800dcd8:	d00f      	beq.n	800dcfa <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800dcda:	428c      	cmp	r4, r1
 800dcdc:	d026      	beq.n	800dd2c <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dcde:	2300      	movs	r3, #0
 800dce0:	56c3      	ldrsb	r3, [r0, r3]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d006      	beq.n	800dcf4 <FreeRTOS_CLIGetParameter+0x40>
 800dce6:	2b20      	cmp	r3, #32
 800dce8:	d0e9      	beq.n	800dcbe <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800dcea:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dcec:	2300      	movs	r3, #0
 800dcee:	56c3      	ldrsb	r3, [r0, r3]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1f8      	bne.n	800dce6 <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	56c3      	ldrsb	r3, [r0, r3]
 800dcf8:	e7ea      	b.n	800dcd0 <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	56c3      	ldrsb	r3, [r0, r3]
 800dcfe:	0001      	movs	r1, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00f      	beq.n	800dd24 <FreeRTOS_CLIGetParameter+0x70>
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	d007      	beq.n	800dd18 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800dd08:	6813      	ldr	r3, [r2, #0]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800dd0e:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd10:	2300      	movs	r3, #0
 800dd12:	56cb      	ldrsb	r3, [r1, r3]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1f5      	bne.n	800dd04 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800dd18:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800dd1a:	1e5a      	subs	r2, r3, #1
 800dd1c:	4193      	sbcs	r3, r2
 800dd1e:	425b      	negs	r3, r3
 800dd20:	4018      	ands	r0, r3
 800dd22:	e004      	b.n	800dd2e <FreeRTOS_CLIGetParameter+0x7a>
 800dd24:	2000      	movs	r0, #0
 800dd26:	e002      	b.n	800dd2e <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800dd28:	2000      	movs	r0, #0
 800dd2a:	e000      	b.n	800dd2e <FreeRTOS_CLIGetParameter+0x7a>
 800dd2c:	2000      	movs	r0, #0
}
 800dd2e:	bd10      	pop	{r4, pc}

0800dd30 <prvHelpCommand>:
{
 800dd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd32:	46c6      	mov	lr, r8
 800dd34:	b500      	push	{lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	0005      	movs	r5, r0
 800dd3a:	000c      	movs	r4, r1
 800dd3c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800dd42:	aa01      	add	r2, sp, #4
 800dd44:	2101      	movs	r1, #1
 800dd46:	f7ff ffb5 	bl	800dcb4 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d02a      	beq.n	800dda4 <prvHelpCommand+0x74>
 800dd4e:	2206      	movs	r2, #6
 800dd50:	4932      	ldr	r1, [pc, #200]	; (800de1c <prvHelpCommand+0xec>)
 800dd52:	f006 f886 	bl	8013e62 <strncmp>
 800dd56:	1e06      	subs	r6, r0, #0
 800dd58:	d14b      	bne.n	800ddf2 <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800dd5a:	4b31      	ldr	r3, [pc, #196]	; (800de20 <prvHelpCommand+0xf0>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b07      	cmp	r3, #7
 800dd60:	d015      	beq.n	800dd8e <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	b2d2      	uxtb	r2, r2
 800dd66:	4690      	mov	r8, r2
 800dd68:	4a2d      	ldr	r2, [pc, #180]	; (800de20 <prvHelpCommand+0xf0>)
 800dd6a:	4641      	mov	r1, r8
 800dd6c:	7011      	strb	r1, [r2, #0]
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4a2c      	ldr	r2, [pc, #176]	; (800de24 <prvHelpCommand+0xf4>)
 800dd72:	5899      	ldr	r1, [r3, r2]
 800dd74:	0022      	movs	r2, r4
 800dd76:	0028      	movs	r0, r5
 800dd78:	f006 f884 	bl	8013e84 <strncpy>
			xReturn = pdTRUE;
 800dd7c:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800dd7e:	4643      	mov	r3, r8
 800dd80:	2b07      	cmp	r3, #7
 800dd82:	d136      	bne.n	800ddf2 <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800dd84:	4b26      	ldr	r3, [pc, #152]	; (800de20 <prvHelpCommand+0xf0>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	0037      	movs	r7, r6
 800dd8c:	e031      	b.n	800ddf2 <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dd8e:	4b24      	ldr	r3, [pc, #144]	; (800de20 <prvHelpCommand+0xf0>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	701a      	strb	r2, [r3, #0]
 800dd94:	4b23      	ldr	r3, [pc, #140]	; (800de24 <prvHelpCommand+0xf4>)
 800dd96:	6819      	ldr	r1, [r3, #0]
 800dd98:	0022      	movs	r2, r4
 800dd9a:	0028      	movs	r0, r5
 800dd9c:	f006 f872 	bl	8013e84 <strncpy>
			xReturn = pdTRUE;
 800dda0:	2701      	movs	r7, #1
 800dda2:	e026      	b.n	800ddf2 <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800dda4:	4b20      	ldr	r3, [pc, #128]	; (800de28 <prvHelpCommand+0xf8>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d027      	beq.n	800ddfc <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800ddac:	4b1f      	ldr	r3, [pc, #124]	; (800de2c <prvHelpCommand+0xfc>)
 800ddae:	781e      	ldrb	r6, [r3, #0]
 800ddb0:	4b1f      	ldr	r3, [pc, #124]	; (800de30 <prvHelpCommand+0x100>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	42b3      	cmp	r3, r6
 800ddb6:	d228      	bcs.n	800de0a <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ddb8:	0022      	movs	r2, r4
 800ddba:	3a08      	subs	r2, #8
 800ddbc:	4b1a      	ldr	r3, [pc, #104]	; (800de28 <prvHelpCommand+0xf8>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6859      	ldr	r1, [r3, #4]
 800ddc4:	0028      	movs	r0, r5
 800ddc6:	3008      	adds	r0, #8
 800ddc8:	f006 f85c 	bl	8013e84 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ddcc:	1c68      	adds	r0, r5, #1
 800ddce:	4919      	ldr	r1, [pc, #100]	; (800de34 <prvHelpCommand+0x104>)
 800ddd0:	f006 f83f 	bl	8013e52 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ddd4:	2328      	movs	r3, #40	; 0x28
 800ddd6:	702b      	strb	r3, [r5, #0]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	71ab      	strb	r3, [r5, #6]
 800dddc:	3b09      	subs	r3, #9
 800ddde:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800dde0:	4b11      	ldr	r3, [pc, #68]	; (800de28 <prvHelpCommand+0xf8>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	6857      	ldr	r7, [r2, #4]
 800dde6:	601f      	str	r7, [r3, #0]
		counter++;
 800dde8:	3601      	adds	r6, #1
 800ddea:	4b10      	ldr	r3, [pc, #64]	; (800de2c <prvHelpCommand+0xfc>)
 800ddec:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800ddee:	1e7b      	subs	r3, r7, #1
 800ddf0:	419f      	sbcs	r7, r3
}
 800ddf2:	0038      	movs	r0, r7
 800ddf4:	b002      	add	sp, #8
 800ddf6:	bc80      	pop	{r7}
 800ddf8:	46b8      	mov	r8, r7
 800ddfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <prvHelpCommand+0xf8>)
 800ddfe:	4a0e      	ldr	r2, [pc, #56]	; (800de38 <prvHelpCommand+0x108>)
 800de00:	601a      	str	r2, [r3, #0]
			counter = 1;
 800de02:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <prvHelpCommand+0xfc>)
 800de04:	2201      	movs	r2, #1
 800de06:	701a      	strb	r2, [r3, #0]
 800de08:	e7d0      	b.n	800ddac <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800de0a:	4b07      	ldr	r3, [pc, #28]	; (800de28 <prvHelpCommand+0xf8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6859      	ldr	r1, [r3, #4]
 800de12:	0022      	movs	r2, r4
 800de14:	0028      	movs	r0, r5
 800de16:	f006 f835 	bl	8013e84 <strncpy>
 800de1a:	e7e1      	b.n	800dde0 <prvHelpCommand+0xb0>
 800de1c:	0801ad38 	.word	0x0801ad38
 800de20:	20001c64 	.word	0x20001c64
 800de24:	20000054 	.word	0x20000054
 800de28:	20001c60 	.word	0x20001c60
 800de2c:	20001c58 	.word	0x20001c58
 800de30:	20006854 	.word	0x20006854
 800de34:	0801a23c 	.word	0x0801a23c
 800de38:	2000009c 	.word	0x2000009c

0800de3c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de3c:	0003      	movs	r3, r0
 800de3e:	3308      	adds	r3, #8
 800de40:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de42:	2201      	movs	r2, #1
 800de44:	4252      	negs	r2, r2
 800de46:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de48:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de4a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de50:	4770      	bx	lr

0800de52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de56:	4770      	bx	lr

0800de58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800de58:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de5c:	689a      	ldr	r2, [r3, #8]
 800de5e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de60:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de62:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800de64:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800de66:	6803      	ldr	r3, [r0, #0]
 800de68:	3301      	adds	r3, #1
 800de6a:	6003      	str	r3, [r0, #0]
}
 800de6c:	4770      	bx	lr

0800de6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de6e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de70:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de72:	0003      	movs	r3, r0
 800de74:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800de76:	1c62      	adds	r2, r4, #1
 800de78:	d00e      	beq.n	800de98 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de7a:	001a      	movs	r2, r3
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	681d      	ldr	r5, [r3, #0]
 800de80:	42a5      	cmp	r5, r4
 800de82:	d9fa      	bls.n	800de7a <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de84:	6853      	ldr	r3, [r2, #4]
 800de86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de88:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de8a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800de8c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800de8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800de90:	6803      	ldr	r3, [r0, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	6003      	str	r3, [r0, #0]
}
 800de96:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800de98:	6902      	ldr	r2, [r0, #16]
 800de9a:	e7f3      	b.n	800de84 <vListInsert+0x16>

0800de9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800de9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de9e:	6841      	ldr	r1, [r0, #4]
 800dea0:	6882      	ldr	r2, [r0, #8]
 800dea2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dea4:	6841      	ldr	r1, [r0, #4]
 800dea6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	4282      	cmp	r2, r0
 800deac:	d005      	beq.n	800deba <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800deae:	2200      	movs	r2, #0
 800deb0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	1e50      	subs	r0, r2, #1
 800deb6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800deb8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800deba:	6882      	ldr	r2, [r0, #8]
 800debc:	605a      	str	r2, [r3, #4]
 800debe:	e7f6      	b.n	800deae <uxListRemove+0x12>

0800dec0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	0004      	movs	r4, r0
 800dec4:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dec6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dec8:	2a00      	cmp	r2, #0
 800deca:	d10d      	bne.n	800dee8 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800decc:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ded4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ded6:	3301      	adds	r3, #1
 800ded8:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800deda:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dedc:	6860      	ldr	r0, [r4, #4]
 800dede:	f001 f8c7 	bl	800f070 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dee2:	2300      	movs	r3, #0
 800dee4:	6063      	str	r3, [r4, #4]
 800dee6:	e7f5      	b.n	800ded4 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800dee8:	2d00      	cmp	r5, #0
 800deea:	d10e      	bne.n	800df0a <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800deec:	6880      	ldr	r0, [r0, #8]
 800deee:	f005 fd77 	bl	80139e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800def6:	4694      	mov	ip, r2
 800def8:	4463      	add	r3, ip
 800defa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800defc:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800defe:	6862      	ldr	r2, [r4, #4]
 800df00:	4293      	cmp	r3, r2
 800df02:	d3e7      	bcc.n	800ded4 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	60a3      	str	r3, [r4, #8]
 800df08:	e7e4      	b.n	800ded4 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0a:	68c0      	ldr	r0, [r0, #12]
 800df0c:	f005 fd68 	bl	80139e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800df10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df12:	425a      	negs	r2, r3
 800df14:	68e1      	ldr	r1, [r4, #12]
 800df16:	1acb      	subs	r3, r1, r3
 800df18:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df1a:	6821      	ldr	r1, [r4, #0]
 800df1c:	428b      	cmp	r3, r1
 800df1e:	d203      	bcs.n	800df28 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800df20:	6863      	ldr	r3, [r4, #4]
 800df22:	469c      	mov	ip, r3
 800df24:	4462      	add	r2, ip
 800df26:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800df28:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800df2a:	2d02      	cmp	r5, #2
 800df2c:	d1d2      	bne.n	800ded4 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df30:	2b00      	cmp	r3, #0
 800df32:	d0cf      	beq.n	800ded4 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800df34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df36:	3b01      	subs	r3, #1
 800df38:	63a3      	str	r3, [r4, #56]	; 0x38
 800df3a:	e7cb      	b.n	800ded4 <prvCopyDataToQueue+0x14>

0800df3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df3c:	b510      	push	{r4, lr}
 800df3e:	0003      	movs	r3, r0
 800df40:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df44:	2a00      	cmp	r2, #0
 800df46:	d00a      	beq.n	800df5e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800df48:	68d9      	ldr	r1, [r3, #12]
 800df4a:	1889      	adds	r1, r1, r2
 800df4c:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df4e:	685c      	ldr	r4, [r3, #4]
 800df50:	42a1      	cmp	r1, r4
 800df52:	d301      	bcc.n	800df58 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800df54:	6819      	ldr	r1, [r3, #0]
 800df56:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800df58:	68d9      	ldr	r1, [r3, #12]
 800df5a:	f005 fd41 	bl	80139e0 <memcpy>
	}
}
 800df5e:	bd10      	pop	{r4, pc}

0800df60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df60:	b570      	push	{r4, r5, r6, lr}
 800df62:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df64:	f001 fc90 	bl	800f888 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800df68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dd13      	ble.n	800df96 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df6e:	0025      	movs	r5, r4
 800df70:	3524      	adds	r5, #36	; 0x24
 800df72:	e007      	b.n	800df84 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800df74:	f001 f828 	bl	800efc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800df78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df7a:	3b01      	subs	r3, #1
 800df7c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800df7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df80:	2b00      	cmp	r3, #0
 800df82:	dd08      	ble.n	800df96 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df86:	2b00      	cmp	r3, #0
 800df88:	d005      	beq.n	800df96 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df8a:	0028      	movs	r0, r5
 800df8c:	f000 ff9a 	bl	800eec4 <xTaskRemoveFromEventList>
 800df90:	2800      	cmp	r0, #0
 800df92:	d0f1      	beq.n	800df78 <prvUnlockQueue+0x18>
 800df94:	e7ee      	b.n	800df74 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800df96:	2301      	movs	r3, #1
 800df98:	425b      	negs	r3, r3
 800df9a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800df9c:	f001 fc80 	bl	800f8a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfa0:	f001 fc72 	bl	800f888 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dfa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dd13      	ble.n	800dfd2 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfaa:	0025      	movs	r5, r4
 800dfac:	3510      	adds	r5, #16
 800dfae:	e007      	b.n	800dfc0 <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800dfb0:	f001 f80a 	bl	800efc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800dfb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dfba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	dd08      	ble.n	800dfd2 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d005      	beq.n	800dfd2 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfc6:	0028      	movs	r0, r5
 800dfc8:	f000 ff7c 	bl	800eec4 <xTaskRemoveFromEventList>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d0f1      	beq.n	800dfb4 <prvUnlockQueue+0x54>
 800dfd0:	e7ee      	b.n	800dfb0 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	425b      	negs	r3, r3
 800dfd6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfd8:	f001 fc62 	bl	800f8a0 <vPortExitCritical>
}
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}

0800dfde <xQueueGenericReset>:
{
 800dfde:	b570      	push	{r4, r5, r6, lr}
 800dfe0:	0004      	movs	r4, r0
 800dfe2:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d01a      	beq.n	800e01e <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800dfe8:	f001 fc4e 	bl	800f888 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dfec:	6822      	ldr	r2, [r4, #0]
 800dfee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dff2:	434b      	muls	r3, r1
 800dff4:	18d0      	adds	r0, r2, r3
 800dff6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dff8:	2000      	movs	r0, #0
 800dffa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dffc:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dffe:	1a5b      	subs	r3, r3, r1
 800e000:	18d3      	adds	r3, r2, r3
 800e002:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e004:	2301      	movs	r3, #1
 800e006:	425b      	negs	r3, r3
 800e008:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e00a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	d111      	bne.n	800e034 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e010:	6923      	ldr	r3, [r4, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d105      	bne.n	800e022 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800e016:	f001 fc43 	bl	800f8a0 <vPortExitCritical>
}
 800e01a:	2001      	movs	r0, #1
 800e01c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800e01e:	b672      	cpsid	i
 800e020:	e7fe      	b.n	800e020 <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e022:	0020      	movs	r0, r4
 800e024:	3010      	adds	r0, #16
 800e026:	f000 ff4d 	bl	800eec4 <xTaskRemoveFromEventList>
 800e02a:	2801      	cmp	r0, #1
 800e02c:	d1f3      	bne.n	800e016 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e02e:	f001 fc1f 	bl	800f870 <vPortYield>
 800e032:	e7f0      	b.n	800e016 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e034:	0020      	movs	r0, r4
 800e036:	3010      	adds	r0, #16
 800e038:	f7ff ff00 	bl	800de3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e03c:	0020      	movs	r0, r4
 800e03e:	3024      	adds	r0, #36	; 0x24
 800e040:	f7ff fefc 	bl	800de3c <vListInitialise>
 800e044:	e7e7      	b.n	800e016 <xQueueGenericReset+0x38>

0800e046 <xQueueGenericCreate>:
{
 800e046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e048:	0005      	movs	r5, r0
 800e04a:	000e      	movs	r6, r1
 800e04c:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e04e:	2800      	cmp	r0, #0
 800e050:	d101      	bne.n	800e056 <xQueueGenericCreate+0x10>
 800e052:	b672      	cpsid	i
 800e054:	e7fe      	b.n	800e054 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e056:	2900      	cmp	r1, #0
 800e058:	d013      	beq.n	800e082 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e05a:	0008      	movs	r0, r1
 800e05c:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e05e:	3055      	adds	r0, #85	; 0x55
 800e060:	f001 fc94 	bl	800f98c <pvPortMalloc>
 800e064:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e066:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800e068:	2c00      	cmp	r4, #0
 800e06a:	d00f      	beq.n	800e08c <xQueueGenericCreate+0x46>
 800e06c:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e06e:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e070:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e072:	2101      	movs	r1, #1
 800e074:	0020      	movs	r0, r4
 800e076:	f7ff ffb2 	bl	800dfde <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e07a:	2350      	movs	r3, #80	; 0x50
 800e07c:	54e7      	strb	r7, [r4, r3]
}
 800e07e:	0020      	movs	r0, r4
 800e080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e082:	2054      	movs	r0, #84	; 0x54
 800e084:	f001 fc82 	bl	800f98c <pvPortMalloc>
 800e088:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e08a:	d1ef      	bne.n	800e06c <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800e08c:	b672      	cpsid	i
 800e08e:	e7fe      	b.n	800e08e <xQueueGenericCreate+0x48>

0800e090 <xQueueCreateCountingSemaphore>:
	{
 800e090:	b510      	push	{r4, lr}
 800e092:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e094:	2800      	cmp	r0, #0
 800e096:	d101      	bne.n	800e09c <xQueueCreateCountingSemaphore+0xc>
 800e098:	b672      	cpsid	i
 800e09a:	e7fe      	b.n	800e09a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e09c:	4288      	cmp	r0, r1
 800e09e:	d201      	bcs.n	800e0a4 <xQueueCreateCountingSemaphore+0x14>
 800e0a0:	b672      	cpsid	i
 800e0a2:	e7fe      	b.n	800e0a2 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	f7ff ffcd 	bl	800e046 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d001      	beq.n	800e0b4 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e0b0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e0b2:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e0b4:	b672      	cpsid	i
 800e0b6:	e7fe      	b.n	800e0b6 <xQueueCreateCountingSemaphore+0x26>

0800e0b8 <xQueueGenericSend>:
{
 800e0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ba:	46ce      	mov	lr, r9
 800e0bc:	4647      	mov	r7, r8
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b085      	sub	sp, #20
 800e0c2:	0004      	movs	r4, r0
 800e0c4:	000e      	movs	r6, r1
 800e0c6:	9201      	str	r2, [sp, #4]
 800e0c8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d008      	beq.n	800e0e0 <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	d008      	beq.n	800e0e4 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0d2:	2d02      	cmp	r5, #2
 800e0d4:	d10b      	bne.n	800e0ee <xQueueGenericSend+0x36>
 800e0d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d008      	beq.n	800e0ee <xQueueGenericSend+0x36>
 800e0dc:	b672      	cpsid	i
 800e0de:	e7fe      	b.n	800e0de <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800e0e0:	b672      	cpsid	i
 800e0e2:	e7fe      	b.n	800e0e2 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0f3      	beq.n	800e0d2 <xQueueGenericSend+0x1a>
 800e0ea:	b672      	cpsid	i
 800e0ec:	e7fe      	b.n	800e0ec <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0ee:	f000 ff71 	bl	800efd4 <xTaskGetSchedulerState>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d104      	bne.n	800e100 <xQueueGenericSend+0x48>
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d005      	beq.n	800e108 <xQueueGenericSend+0x50>
 800e0fc:	b672      	cpsid	i
 800e0fe:	e7fe      	b.n	800e0fe <xQueueGenericSend+0x46>
 800e100:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800e102:	2300      	movs	r3, #0
 800e104:	4698      	mov	r8, r3
 800e106:	e033      	b.n	800e170 <xQueueGenericSend+0xb8>
 800e108:	2700      	movs	r7, #0
 800e10a:	e7fa      	b.n	800e102 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e10c:	002a      	movs	r2, r5
 800e10e:	0031      	movs	r1, r6
 800e110:	0020      	movs	r0, r4
 800e112:	f7ff fed5 	bl	800dec0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d109      	bne.n	800e130 <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d110      	bne.n	800e142 <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800e120:	f001 fbbe 	bl	800f8a0 <vPortExitCritical>
				return pdPASS;
 800e124:	2001      	movs	r0, #1
}
 800e126:	b005      	add	sp, #20
 800e128:	bcc0      	pop	{r6, r7}
 800e12a:	46b9      	mov	r9, r7
 800e12c:	46b0      	mov	r8, r6
 800e12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e130:	0020      	movs	r0, r4
 800e132:	3024      	adds	r0, #36	; 0x24
 800e134:	f000 fec6 	bl	800eec4 <xTaskRemoveFromEventList>
 800e138:	2801      	cmp	r0, #1
 800e13a:	d1f1      	bne.n	800e120 <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800e13c:	f001 fb98 	bl	800f870 <vPortYield>
 800e140:	e7ee      	b.n	800e120 <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800e142:	f001 fb95 	bl	800f870 <vPortYield>
 800e146:	e7eb      	b.n	800e120 <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800e148:	f001 fbaa 	bl	800f8a0 <vPortExitCritical>
					return errQUEUE_FULL;
 800e14c:	2000      	movs	r0, #0
 800e14e:	e7ea      	b.n	800e126 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800e150:	a802      	add	r0, sp, #8
 800e152:	f000 fef7 	bl	800ef44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e156:	e018      	b.n	800e18a <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800e158:	4643      	mov	r3, r8
 800e15a:	6463      	str	r3, [r4, #68]	; 0x44
 800e15c:	e01e      	b.n	800e19c <xQueueGenericSend+0xe4>
 800e15e:	4643      	mov	r3, r8
 800e160:	64a3      	str	r3, [r4, #72]	; 0x48
 800e162:	e01e      	b.n	800e1a2 <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800e164:	0020      	movs	r0, r4
 800e166:	f7ff fefb 	bl	800df60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e16a:	f000 fccb 	bl	800eb04 <xTaskResumeAll>
 800e16e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800e170:	f001 fb8a 	bl	800f888 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e176:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e178:	4293      	cmp	r3, r2
 800e17a:	d3c7      	bcc.n	800e10c <xQueueGenericSend+0x54>
 800e17c:	2d02      	cmp	r5, #2
 800e17e:	d0c5      	beq.n	800e10c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0e0      	beq.n	800e148 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800e186:	2f00      	cmp	r7, #0
 800e188:	d0e2      	beq.n	800e150 <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800e18a:	f001 fb89 	bl	800f8a0 <vPortExitCritical>
		vTaskSuspendAll();
 800e18e:	f000 fc11 	bl	800e9b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e192:	f001 fb79 	bl	800f888 <vPortEnterCritical>
 800e196:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e198:	3301      	adds	r3, #1
 800e19a:	d0dd      	beq.n	800e158 <xQueueGenericSend+0xa0>
 800e19c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e19e:	3301      	adds	r3, #1
 800e1a0:	d0dd      	beq.n	800e15e <xQueueGenericSend+0xa6>
 800e1a2:	f001 fb7d 	bl	800f8a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1a6:	a901      	add	r1, sp, #4
 800e1a8:	a802      	add	r0, sp, #8
 800e1aa:	f000 fedb 	bl	800ef64 <xTaskCheckForTimeOut>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d117      	bne.n	800e1e2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1b2:	f001 fb69 	bl	800f888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1b8:	4699      	mov	r9, r3
 800e1ba:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e1bc:	f001 fb70 	bl	800f8a0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1c0:	45b9      	cmp	r9, r7
 800e1c2:	d1cf      	bne.n	800e164 <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1c4:	0020      	movs	r0, r4
 800e1c6:	3010      	adds	r0, #16
 800e1c8:	9901      	ldr	r1, [sp, #4]
 800e1ca:	f000 fe3d 	bl	800ee48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1ce:	0020      	movs	r0, r4
 800e1d0:	f7ff fec6 	bl	800df60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1d4:	f000 fc96 	bl	800eb04 <xTaskResumeAll>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d1c8      	bne.n	800e16e <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800e1dc:	f001 fb48 	bl	800f870 <vPortYield>
 800e1e0:	e7c5      	b.n	800e16e <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800e1e2:	0020      	movs	r0, r4
 800e1e4:	f7ff febc 	bl	800df60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1e8:	f000 fc8c 	bl	800eb04 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	e79a      	b.n	800e126 <xQueueGenericSend+0x6e>

0800e1f0 <xQueueGenericSendFromISR>:
{
 800e1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	0004      	movs	r4, r0
 800e1f6:	000d      	movs	r5, r1
 800e1f8:	0017      	movs	r7, r2
 800e1fa:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d008      	beq.n	800e212 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e200:	2900      	cmp	r1, #0
 800e202:	d008      	beq.n	800e216 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e204:	2e02      	cmp	r6, #2
 800e206:	d12d      	bne.n	800e264 <xQueueGenericSendFromISR+0x74>
 800e208:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d019      	beq.n	800e242 <xQueueGenericSendFromISR+0x52>
 800e20e:	b672      	cpsid	i
 800e210:	e7fe      	b.n	800e210 <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800e212:	b672      	cpsid	i
 800e214:	e7fe      	b.n	800e214 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e216:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d0f3      	beq.n	800e204 <xQueueGenericSendFromISR+0x14>
 800e21c:	b672      	cpsid	i
 800e21e:	e7fe      	b.n	800e21e <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800e220:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e224:	2b00      	cmp	r3, #0
 800e226:	d025      	beq.n	800e274 <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e228:	0020      	movs	r0, r4
 800e22a:	3024      	adds	r0, #36	; 0x24
 800e22c:	f000 fe4a 	bl	800eec4 <xTaskRemoveFromEventList>
 800e230:	2800      	cmp	r0, #0
 800e232:	d01f      	beq.n	800e274 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800e234:	2f00      	cmp	r7, #0
 800e236:	d002      	beq.n	800e23e <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e238:	2301      	movs	r3, #1
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	e01a      	b.n	800e274 <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800e23e:	2501      	movs	r5, #1
 800e240:	e018      	b.n	800e274 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e242:	f001 fb3d 	bl	800f8c0 <ulSetInterruptMaskFromISR>
 800e246:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e24a:	0032      	movs	r2, r6
 800e24c:	0029      	movs	r1, r5
 800e24e:	0020      	movs	r0, r4
 800e250:	f7ff fe36 	bl	800dec0 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e254:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e256:	3301      	adds	r3, #1
 800e258:	d0e2      	beq.n	800e220 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800e25a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e25c:	3301      	adds	r3, #1
 800e25e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e260:	2501      	movs	r5, #1
 800e262:	e007      	b.n	800e274 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e264:	f001 fb2c 	bl	800f8c0 <ulSetInterruptMaskFromISR>
 800e268:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e26a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e26c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e26e:	4293      	cmp	r3, r2
 800e270:	d3eb      	bcc.n	800e24a <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800e272:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e274:	9801      	ldr	r0, [sp, #4]
 800e276:	f001 fb28 	bl	800f8ca <vClearInterruptMaskFromISR>
}
 800e27a:	0028      	movs	r0, r5
 800e27c:	b003      	add	sp, #12
 800e27e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e280 <xQueueGiveFromISR>:
{
 800e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e282:	0004      	movs	r4, r0
 800e284:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800e286:	2800      	cmp	r0, #0
 800e288:	d004      	beq.n	800e294 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e28a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d003      	beq.n	800e298 <xQueueGiveFromISR+0x18>
 800e290:	b672      	cpsid	i
 800e292:	e7fe      	b.n	800e292 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800e294:	b672      	cpsid	i
 800e296:	e7fe      	b.n	800e296 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e298:	6803      	ldr	r3, [r0, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d016      	beq.n	800e2cc <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e29e:	f001 fb0f 	bl	800f8c0 <ulSetInterruptMaskFromISR>
 800e2a2:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e2a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800e2a6:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e2a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d209      	bcs.n	800e2c2 <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800e2ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e2b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	d00d      	beq.n	800e2d6 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800e2ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e2bc:	3301      	adds	r3, #1
 800e2be:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e2c0:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e2c2:	0038      	movs	r0, r7
 800e2c4:	f001 fb01 	bl	800f8ca <vClearInterruptMaskFromISR>
}
 800e2c8:	0028      	movs	r0, r5
 800e2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e2cc:	6843      	ldr	r3, [r0, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d0e5      	beq.n	800e29e <xQueueGiveFromISR+0x1e>
 800e2d2:	b672      	cpsid	i
 800e2d4:	e7fe      	b.n	800e2d4 <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800e2d6:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d0f1      	beq.n	800e2c2 <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2de:	0020      	movs	r0, r4
 800e2e0:	3024      	adds	r0, #36	; 0x24
 800e2e2:	f000 fdef 	bl	800eec4 <xTaskRemoveFromEventList>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d0eb      	beq.n	800e2c2 <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800e2ea:	2e00      	cmp	r6, #0
 800e2ec:	d002      	beq.n	800e2f4 <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	6033      	str	r3, [r6, #0]
 800e2f2:	e7e6      	b.n	800e2c2 <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800e2f4:	2501      	movs	r5, #1
 800e2f6:	e7e4      	b.n	800e2c2 <xQueueGiveFromISR+0x42>

0800e2f8 <xQueueGenericReceive>:
{
 800e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2fa:	46c6      	mov	lr, r8
 800e2fc:	b500      	push	{lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	0004      	movs	r4, r0
 800e302:	000d      	movs	r5, r1
 800e304:	9201      	str	r2, [sp, #4]
 800e306:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800e308:	2800      	cmp	r0, #0
 800e30a:	d00a      	beq.n	800e322 <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e30c:	2900      	cmp	r1, #0
 800e30e:	d00a      	beq.n	800e326 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e310:	f000 fe60 	bl	800efd4 <xTaskGetSchedulerState>
 800e314:	2800      	cmp	r0, #0
 800e316:	d10b      	bne.n	800e330 <xQueueGenericReceive+0x38>
 800e318:	9b01      	ldr	r3, [sp, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <xQueueGenericReceive+0x3e>
 800e31e:	b672      	cpsid	i
 800e320:	e7fe      	b.n	800e320 <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800e322:	b672      	cpsid	i
 800e324:	e7fe      	b.n	800e324 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e326:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0f1      	beq.n	800e310 <xQueueGenericReceive+0x18>
 800e32c:	b672      	cpsid	i
 800e32e:	e7fe      	b.n	800e32e <xQueueGenericReceive+0x36>
 800e330:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800e332:	2600      	movs	r6, #0
 800e334:	e04d      	b.n	800e3d2 <xQueueGenericReceive+0xda>
 800e336:	2700      	movs	r7, #0
 800e338:	e7fb      	b.n	800e332 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e33a:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e33c:	0029      	movs	r1, r5
 800e33e:	0020      	movs	r0, r4
 800e340:	f7ff fdfc 	bl	800df3c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e344:	4643      	mov	r3, r8
 800e346:	2b00      	cmp	r3, #0
 800e348:	d11c      	bne.n	800e384 <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800e34a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e34c:	3b01      	subs	r3, #1
 800e34e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d009      	beq.n	800e36a <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e356:	6923      	ldr	r3, [r4, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10a      	bne.n	800e372 <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800e35c:	f001 faa0 	bl	800f8a0 <vPortExitCritical>
				return pdPASS;
 800e360:	2001      	movs	r0, #1
}
 800e362:	b004      	add	sp, #16
 800e364:	bc80      	pop	{r7}
 800e366:	46b8      	mov	r8, r7
 800e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e36a:	f000 ff8b 	bl	800f284 <pvTaskIncrementMutexHeldCount>
 800e36e:	6060      	str	r0, [r4, #4]
 800e370:	e7f1      	b.n	800e356 <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e372:	0020      	movs	r0, r4
 800e374:	3010      	adds	r0, #16
 800e376:	f000 fda5 	bl	800eec4 <xTaskRemoveFromEventList>
 800e37a:	2801      	cmp	r0, #1
 800e37c:	d1ee      	bne.n	800e35c <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800e37e:	f001 fa77 	bl	800f870 <vPortYield>
 800e382:	e7eb      	b.n	800e35c <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e384:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0e7      	beq.n	800e35c <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e38c:	0020      	movs	r0, r4
 800e38e:	3024      	adds	r0, #36	; 0x24
 800e390:	f000 fd98 	bl	800eec4 <xTaskRemoveFromEventList>
 800e394:	2800      	cmp	r0, #0
 800e396:	d0e1      	beq.n	800e35c <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800e398:	f001 fa6a 	bl	800f870 <vPortYield>
 800e39c:	e7de      	b.n	800e35c <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800e39e:	f001 fa7f 	bl	800f8a0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e7dd      	b.n	800e362 <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800e3a6:	a802      	add	r0, sp, #8
 800e3a8:	f000 fdcc 	bl	800ef44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ac:	e01b      	b.n	800e3e6 <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800e3ae:	6466      	str	r6, [r4, #68]	; 0x44
 800e3b0:	e022      	b.n	800e3f8 <xQueueGenericReceive+0x100>
 800e3b2:	64a6      	str	r6, [r4, #72]	; 0x48
 800e3b4:	e023      	b.n	800e3fe <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800e3b6:	f001 fa67 	bl	800f888 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e3ba:	6860      	ldr	r0, [r4, #4]
 800e3bc:	f000 fe1a 	bl	800eff4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e3c0:	f001 fa6e 	bl	800f8a0 <vPortExitCritical>
 800e3c4:	e02d      	b.n	800e422 <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800e3c6:	0020      	movs	r0, r4
 800e3c8:	f7ff fdca 	bl	800df60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3cc:	f000 fb9a 	bl	800eb04 <xTaskResumeAll>
 800e3d0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800e3d2:	f001 fa59 	bl	800f888 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1ae      	bne.n	800e33a <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3dc:	9b01      	ldr	r3, [sp, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0dd      	beq.n	800e39e <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800e3e2:	2f00      	cmp	r7, #0
 800e3e4:	d0df      	beq.n	800e3a6 <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800e3e6:	f001 fa5b 	bl	800f8a0 <vPortExitCritical>
		vTaskSuspendAll();
 800e3ea:	f000 fae3 	bl	800e9b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3ee:	f001 fa4b 	bl	800f888 <vPortEnterCritical>
 800e3f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	d0da      	beq.n	800e3ae <xQueueGenericReceive+0xb6>
 800e3f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	d0d9      	beq.n	800e3b2 <xQueueGenericReceive+0xba>
 800e3fe:	f001 fa4f 	bl	800f8a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e402:	a901      	add	r1, sp, #4
 800e404:	a802      	add	r0, sp, #8
 800e406:	f000 fdad 	bl	800ef64 <xTaskCheckForTimeOut>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d118      	bne.n	800e440 <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800e40e:	f001 fa3b 	bl	800f888 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e412:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800e414:	f001 fa44 	bl	800f8a0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e418:	2f00      	cmp	r7, #0
 800e41a:	d1d4      	bne.n	800e3c6 <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0c9      	beq.n	800e3b6 <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e422:	0020      	movs	r0, r4
 800e424:	3024      	adds	r0, #36	; 0x24
 800e426:	9901      	ldr	r1, [sp, #4]
 800e428:	f000 fd0e 	bl	800ee48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e42c:	0020      	movs	r0, r4
 800e42e:	f7ff fd97 	bl	800df60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e432:	f000 fb67 	bl	800eb04 <xTaskResumeAll>
 800e436:	2800      	cmp	r0, #0
 800e438:	d1ca      	bne.n	800e3d0 <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800e43a:	f001 fa19 	bl	800f870 <vPortYield>
 800e43e:	e7c7      	b.n	800e3d0 <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800e440:	0020      	movs	r0, r4
 800e442:	f7ff fd8d 	bl	800df60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e446:	f000 fb5d 	bl	800eb04 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e44a:	2000      	movs	r0, #0
 800e44c:	e789      	b.n	800e362 <xQueueGenericReceive+0x6a>

0800e44e <xQueueReceiveFromISR>:
{
 800e44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e450:	46c6      	mov	lr, r8
 800e452:	b500      	push	{lr}
 800e454:	0004      	movs	r4, r0
 800e456:	000f      	movs	r7, r1
 800e458:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d00f      	beq.n	800e47e <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e45e:	2900      	cmp	r1, #0
 800e460:	d00f      	beq.n	800e482 <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e462:	f001 fa2d 	bl	800f8c0 <ulSetInterruptMaskFromISR>
 800e466:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e46a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10d      	bne.n	800e48c <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e470:	4640      	mov	r0, r8
 800e472:	f001 fa2a 	bl	800f8ca <vClearInterruptMaskFromISR>
}
 800e476:	0028      	movs	r0, r5
 800e478:	bc80      	pop	{r7}
 800e47a:	46b8      	mov	r8, r7
 800e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e47e:	b672      	cpsid	i
 800e480:	e7fe      	b.n	800e480 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e482:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0ec      	beq.n	800e462 <xQueueReceiveFromISR+0x14>
 800e488:	b672      	cpsid	i
 800e48a:	e7fe      	b.n	800e48a <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e48c:	0039      	movs	r1, r7
 800e48e:	0020      	movs	r0, r4
 800e490:	f7ff fd54 	bl	800df3c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e496:	3b01      	subs	r3, #1
 800e498:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e49a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e49c:	3301      	adds	r3, #1
 800e49e:	d004      	beq.n	800e4aa <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800e4a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e4a6:	2501      	movs	r5, #1
 800e4a8:	e7e2      	b.n	800e470 <xQueueReceiveFromISR+0x22>
 800e4aa:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0de      	beq.n	800e470 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4b2:	0020      	movs	r0, r4
 800e4b4:	3010      	adds	r0, #16
 800e4b6:	f000 fd05 	bl	800eec4 <xTaskRemoveFromEventList>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d0d8      	beq.n	800e470 <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800e4be:	2e00      	cmp	r6, #0
 800e4c0:	d002      	beq.n	800e4c8 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	6033      	str	r3, [r6, #0]
 800e4c6:	e7d3      	b.n	800e470 <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800e4c8:	2501      	movs	r5, #1
 800e4ca:	e7d1      	b.n	800e470 <xQueueReceiveFromISR+0x22>

0800e4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e4cc:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4ce:	4a08      	ldr	r2, [pc, #32]	; (800e4f0 <vQueueAddToRegistry+0x24>)
 800e4d0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e4d2:	6814      	ldr	r4, [r2, #0]
 800e4d4:	2c00      	cmp	r4, #0
 800e4d6:	d004      	beq.n	800e4e2 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4d8:	3301      	adds	r3, #1
 800e4da:	3208      	adds	r2, #8
 800e4dc:	2b08      	cmp	r3, #8
 800e4de:	d1f8      	bne.n	800e4d2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e4e0:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e4e2:	4a03      	ldr	r2, [pc, #12]	; (800e4f0 <vQueueAddToRegistry+0x24>)
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e4e8:	18d3      	adds	r3, r2, r3
 800e4ea:	6058      	str	r0, [r3, #4]
				break;
 800e4ec:	e7f8      	b.n	800e4e0 <vQueueAddToRegistry+0x14>
 800e4ee:	46c0      	nop			; (mov r8, r8)
 800e4f0:	20006d60 	.word	0x20006d60

0800e4f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	0004      	movs	r4, r0
 800e4f8:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e4fa:	f001 f9c5 	bl	800f888 <vPortEnterCritical>
 800e4fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e500:	3301      	adds	r3, #1
 800e502:	d00b      	beq.n	800e51c <vQueueWaitForMessageRestricted+0x28>
 800e504:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e506:	3301      	adds	r3, #1
 800e508:	d00b      	beq.n	800e522 <vQueueWaitForMessageRestricted+0x2e>
 800e50a:	f001 f9c9 	bl	800f8a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e50e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e510:	2b00      	cmp	r3, #0
 800e512:	d009      	beq.n	800e528 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e514:	0020      	movs	r0, r4
 800e516:	f7ff fd23 	bl	800df60 <prvUnlockQueue>
	}
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e51c:	2300      	movs	r3, #0
 800e51e:	6463      	str	r3, [r4, #68]	; 0x44
 800e520:	e7f0      	b.n	800e504 <vQueueWaitForMessageRestricted+0x10>
 800e522:	2300      	movs	r3, #0
 800e524:	64a3      	str	r3, [r4, #72]	; 0x48
 800e526:	e7f0      	b.n	800e50a <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e528:	0020      	movs	r0, r4
 800e52a:	3024      	adds	r0, #36	; 0x24
 800e52c:	0029      	movs	r1, r5
 800e52e:	f000 fcaf 	bl	800ee90 <vTaskPlaceOnEventListRestricted>
 800e532:	e7ef      	b.n	800e514 <vQueueWaitForMessageRestricted+0x20>

0800e534 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e536:	46de      	mov	lr, fp
 800e538:	4657      	mov	r7, sl
 800e53a:	464e      	mov	r6, r9
 800e53c:	4645      	mov	r5, r8
 800e53e:	b5e0      	push	{r5, r6, r7, lr}
 800e540:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e542:	680b      	ldr	r3, [r1, #0]
 800e544:	469b      	mov	fp, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d045      	beq.n	800e5d6 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e54a:	684b      	ldr	r3, [r1, #4]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	604b      	str	r3, [r1, #4]
 800e550:	2008      	movs	r0, #8
 800e552:	4684      	mov	ip, r0
 800e554:	448c      	add	ip, r1
 800e556:	4563      	cmp	r3, ip
 800e558:	d007      	beq.n	800e56a <prvListTaskWithinSingleList+0x36>
 800e55a:	684b      	ldr	r3, [r1, #4]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e564:	3302      	adds	r3, #2
 800e566:	4699      	mov	r9, r3
 800e568:	e01c      	b.n	800e5a4 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e56a:	68cb      	ldr	r3, [r1, #12]
 800e56c:	604b      	str	r3, [r1, #4]
 800e56e:	e7f4      	b.n	800e55a <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	604b      	str	r3, [r1, #4]
 800e574:	e01b      	b.n	800e5ae <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e576:	4648      	mov	r0, r9
 800e578:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e57a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800e57c:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e57e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800e580:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e582:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e584:	783d      	ldrb	r5, [r7, #0]
 800e586:	2da5      	cmp	r5, #165	; 0xa5
 800e588:	d123      	bne.n	800e5d2 <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800e58a:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e58c:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e58e:	5d78      	ldrb	r0, [r7, r5]
 800e590:	28a5      	cmp	r0, #165	; 0xa5
 800e592:	d0fb      	beq.n	800e58c <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e594:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800e596:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800e598:	2001      	movs	r0, #1
 800e59a:	4682      	mov	sl, r0
 800e59c:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800e59e:	3420      	adds	r4, #32
 800e5a0:	4598      	cmp	r8, r3
 800e5a2:	d018      	beq.n	800e5d6 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e5a4:	684b      	ldr	r3, [r1, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	604b      	str	r3, [r1, #4]
 800e5aa:	459c      	cmp	ip, r3
 800e5ac:	d0e0      	beq.n	800e570 <prvListTaskWithinSingleList+0x3c>
 800e5ae:	684b      	ldr	r3, [r1, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e5b2:	0026      	movs	r6, r4
 800e5b4:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e5b6:	001d      	movs	r5, r3
 800e5b8:	3534      	adds	r5, #52	; 0x34
 800e5ba:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e5bc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800e5be:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e5c0:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e5c2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800e5c4:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800e5c6:	2a03      	cmp	r2, #3
 800e5c8:	d1d7      	bne.n	800e57a <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e5ca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e5cc:	2d00      	cmp	r5, #0
 800e5ce:	d1d2      	bne.n	800e576 <prvListTaskWithinSingleList+0x42>
 800e5d0:	e7d3      	b.n	800e57a <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800e5d2:	2500      	movs	r5, #0
 800e5d4:	e7de      	b.n	800e594 <prvListTaskWithinSingleList+0x60>
	}
 800e5d6:	4658      	mov	r0, fp
 800e5d8:	bcf0      	pop	{r4, r5, r6, r7}
 800e5da:	46bb      	mov	fp, r7
 800e5dc:	46b2      	mov	sl, r6
 800e5de:	46a9      	mov	r9, r5
 800e5e0:	46a0      	mov	r8, r4
 800e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e4:	4b08      	ldr	r3, [pc, #32]	; (800e608 <prvResetNextTaskUnblockTime+0x24>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d104      	bne.n	800e5f8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5ee:	4b07      	ldr	r3, [pc, #28]	; (800e60c <prvResetNextTaskUnblockTime+0x28>)
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	4252      	negs	r2, r2
 800e5f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800e5f6:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e5f8:	4b03      	ldr	r3, [pc, #12]	; (800e608 <prvResetNextTaskUnblockTime+0x24>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	685a      	ldr	r2, [r3, #4]
 800e602:	4b02      	ldr	r3, [pc, #8]	; (800e60c <prvResetNextTaskUnblockTime+0x28>)
 800e604:	601a      	str	r2, [r3, #0]
}
 800e606:	e7f6      	b.n	800e5f6 <prvResetNextTaskUnblockTime+0x12>
 800e608:	20001c6c 	.word	0x20001c6c
 800e60c:	200000a4 	.word	0x200000a4

0800e610 <prvAddCurrentTaskToDelayedList>:
{
 800e610:	b510      	push	{r4, lr}
 800e612:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e614:	4b0e      	ldr	r3, [pc, #56]	; (800e650 <prvAddCurrentTaskToDelayedList+0x40>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e61a:	4b0e      	ldr	r3, [pc, #56]	; (800e654 <prvAddCurrentTaskToDelayedList+0x44>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4283      	cmp	r3, r0
 800e620:	d907      	bls.n	800e632 <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e622:	4b0d      	ldr	r3, [pc, #52]	; (800e658 <prvAddCurrentTaskToDelayedList+0x48>)
 800e624:	6818      	ldr	r0, [r3, #0]
 800e626:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <prvAddCurrentTaskToDelayedList+0x40>)
 800e628:	6819      	ldr	r1, [r3, #0]
 800e62a:	3104      	adds	r1, #4
 800e62c:	f7ff fc1f 	bl	800de6e <vListInsert>
}
 800e630:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e632:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <prvAddCurrentTaskToDelayedList+0x4c>)
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	4b06      	ldr	r3, [pc, #24]	; (800e650 <prvAddCurrentTaskToDelayedList+0x40>)
 800e638:	6819      	ldr	r1, [r3, #0]
 800e63a:	3104      	adds	r1, #4
 800e63c:	f7ff fc17 	bl	800de6e <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <prvAddCurrentTaskToDelayedList+0x50>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	42a3      	cmp	r3, r4
 800e646:	d9f3      	bls.n	800e630 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800e648:	4b05      	ldr	r3, [pc, #20]	; (800e660 <prvAddCurrentTaskToDelayedList+0x50>)
 800e64a:	601c      	str	r4, [r3, #0]
}
 800e64c:	e7f0      	b.n	800e630 <prvAddCurrentTaskToDelayedList+0x20>
 800e64e:	46c0      	nop			; (mov r8, r8)
 800e650:	20001c68 	.word	0x20001c68
 800e654:	20001d88 	.word	0x20001d88
 800e658:	20001c70 	.word	0x20001c70
 800e65c:	20001c6c 	.word	0x20001c6c
 800e660:	200000a4 	.word	0x200000a4

0800e664 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e664:	b510      	push	{r4, lr}
 800e666:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e668:	f005 fbf3 	bl	8013e52 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e66c:	0020      	movs	r0, r4
 800e66e:	f7f1 fd53 	bl	8000118 <strlen>
 800e672:	280b      	cmp	r0, #11
 800e674:	dc08      	bgt.n	800e688 <prvWriteNameToBuffer+0x24>
 800e676:	1823      	adds	r3, r4, r0
 800e678:	0021      	movs	r1, r4
 800e67a:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800e67c:	2220      	movs	r2, #32
 800e67e:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e680:	3301      	adds	r3, #1
 800e682:	428b      	cmp	r3, r1
 800e684:	d1fb      	bne.n	800e67e <prvWriteNameToBuffer+0x1a>
 800e686:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e688:	1820      	adds	r0, r4, r0
 800e68a:	2300      	movs	r3, #0
 800e68c:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e68e:	bd10      	pop	{r4, pc}

0800e690 <xTaskGenericCreate>:
{
 800e690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e692:	46de      	mov	lr, fp
 800e694:	4657      	mov	r7, sl
 800e696:	464e      	mov	r6, r9
 800e698:	4645      	mov	r5, r8
 800e69a:	b5e0      	push	{r5, r6, r7, lr}
 800e69c:	b083      	sub	sp, #12
 800e69e:	9001      	str	r0, [sp, #4]
 800e6a0:	4688      	mov	r8, r1
 800e6a2:	0017      	movs	r7, r2
 800e6a4:	469a      	mov	sl, r3
 800e6a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e6a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	d003      	beq.n	800e6b6 <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e6ae:	2e06      	cmp	r6, #6
 800e6b0:	d903      	bls.n	800e6ba <xTaskGenericCreate+0x2a>
 800e6b2:	b672      	cpsid	i
 800e6b4:	e7fe      	b.n	800e6b4 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800e6b6:	b672      	cpsid	i
 800e6b8:	e7fe      	b.n	800e6b8 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ba:	2d00      	cmp	r5, #0
 800e6bc:	d05b      	beq.n	800e776 <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e6be:	2060      	movs	r0, #96	; 0x60
 800e6c0:	f001 f964 	bl	800f98c <pvPortMalloc>
 800e6c4:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e6c6:	d064      	beq.n	800e792 <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800e6c8:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e6ca:	00ba      	lsls	r2, r7, #2
 800e6cc:	21a5      	movs	r1, #165	; 0xa5
 800e6ce:	0028      	movs	r0, r5
 800e6d0:	f005 f98f 	bl	80139f2 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e6d4:	4b5e      	ldr	r3, [pc, #376]	; (800e850 <xTaskGenericCreate+0x1c0>)
 800e6d6:	18fd      	adds	r5, r7, r3
 800e6d8:	00ad      	lsls	r5, r5, #2
 800e6da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e6dc:	469c      	mov	ip, r3
 800e6de:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e6e0:	2307      	movs	r3, #7
 800e6e2:	439d      	bics	r5, r3
 800e6e4:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6e6:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e6e8:	0021      	movs	r1, r4
 800e6ea:	3134      	adds	r1, #52	; 0x34
 800e6ec:	4642      	mov	r2, r8
 800e6ee:	5cd2      	ldrb	r2, [r2, r3]
 800e6f0:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800e6f2:	2a00      	cmp	r2, #0
 800e6f4:	d002      	beq.n	800e6fc <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	2b0d      	cmp	r3, #13
 800e6fa:	d1f7      	bne.n	800e6ec <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e6fc:	2340      	movs	r3, #64	; 0x40
 800e6fe:	2200      	movs	r2, #0
 800e700:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e702:	0035      	movs	r5, r6
 800e704:	2e06      	cmp	r6, #6
 800e706:	d900      	bls.n	800e70a <xTaskGenericCreate+0x7a>
 800e708:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800e70a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e70c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e70e:	2700      	movs	r7, #0
 800e710:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e712:	1d23      	adds	r3, r4, #4
 800e714:	469b      	mov	fp, r3
 800e716:	0018      	movs	r0, r3
 800e718:	f7ff fb9b 	bl	800de52 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e71c:	0020      	movs	r0, r4
 800e71e:	3018      	adds	r0, #24
 800e720:	f7ff fb97 	bl	800de52 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e724:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e726:	2307      	movs	r3, #7
 800e728:	1b5b      	subs	r3, r3, r5
 800e72a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e72c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e72e:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e730:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e732:	235c      	movs	r3, #92	; 0x5c
 800e734:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e736:	4652      	mov	r2, sl
 800e738:	9901      	ldr	r1, [sp, #4]
 800e73a:	4648      	mov	r0, r9
 800e73c:	f001 f85c 	bl	800f7f8 <pxPortInitialiseStack>
 800e740:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	d000      	beq.n	800e74a <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e748:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e74a:	f001 f89d 	bl	800f888 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e74e:	4a41      	ldr	r2, [pc, #260]	; (800e854 <xTaskGenericCreate+0x1c4>)
 800e750:	6813      	ldr	r3, [r2, #0]
 800e752:	3301      	adds	r3, #1
 800e754:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e756:	4b40      	ldr	r3, [pc, #256]	; (800e858 <xTaskGenericCreate+0x1c8>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d01d      	beq.n	800e79a <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800e75e:	4b3f      	ldr	r3, [pc, #252]	; (800e85c <xTaskGenericCreate+0x1cc>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d11e      	bne.n	800e7a4 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e766:	4b3c      	ldr	r3, [pc, #240]	; (800e858 <xTaskGenericCreate+0x1c8>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76c:	42b3      	cmp	r3, r6
 800e76e:	d819      	bhi.n	800e7a4 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800e770:	4b39      	ldr	r3, [pc, #228]	; (800e858 <xTaskGenericCreate+0x1c8>)
 800e772:	601c      	str	r4, [r3, #0]
 800e774:	e016      	b.n	800e7a4 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e776:	0090      	lsls	r0, r2, #2
 800e778:	f001 f908 	bl	800f98c <pvPortMalloc>
 800e77c:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800e77e:	d19e      	bne.n	800e6be <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e780:	2001      	movs	r0, #1
 800e782:	4240      	negs	r0, r0
}
 800e784:	b003      	add	sp, #12
 800e786:	bcf0      	pop	{r4, r5, r6, r7}
 800e788:	46bb      	mov	fp, r7
 800e78a:	46b2      	mov	sl, r6
 800e78c:	46a9      	mov	r9, r5
 800e78e:	46a0      	mov	r8, r4
 800e790:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800e792:	0028      	movs	r0, r5
 800e794:	f001 f98c 	bl	800fab0 <vPortFree>
	if( pxNewTCB != NULL )
 800e798:	e7f2      	b.n	800e780 <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800e79a:	4b2f      	ldr	r3, [pc, #188]	; (800e858 <xTaskGenericCreate+0x1c8>)
 800e79c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e79e:	6813      	ldr	r3, [r2, #0]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d023      	beq.n	800e7ec <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800e7a4:	4a2e      	ldr	r2, [pc, #184]	; (800e860 <xTaskGenericCreate+0x1d0>)
 800e7a6:	6813      	ldr	r3, [r2, #0]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e7ac:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e7ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e7b0:	4a2c      	ldr	r2, [pc, #176]	; (800e864 <xTaskGenericCreate+0x1d4>)
 800e7b2:	6812      	ldr	r2, [r2, #0]
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d901      	bls.n	800e7bc <xTaskGenericCreate+0x12c>
 800e7b8:	4a2a      	ldr	r2, [pc, #168]	; (800e864 <xTaskGenericCreate+0x1d4>)
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	0098      	lsls	r0, r3, #2
 800e7be:	18c0      	adds	r0, r0, r3
 800e7c0:	0080      	lsls	r0, r0, #2
 800e7c2:	4b29      	ldr	r3, [pc, #164]	; (800e868 <xTaskGenericCreate+0x1d8>)
 800e7c4:	18c0      	adds	r0, r0, r3
 800e7c6:	4659      	mov	r1, fp
 800e7c8:	f7ff fb46 	bl	800de58 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e7cc:	f001 f868 	bl	800f8a0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e7d0:	4b22      	ldr	r3, [pc, #136]	; (800e85c <xTaskGenericCreate+0x1cc>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e7d4:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d0d4      	beq.n	800e784 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e7da:	4b1f      	ldr	r3, [pc, #124]	; (800e858 <xTaskGenericCreate+0x1c8>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	42b3      	cmp	r3, r6
 800e7e2:	d2cf      	bcs.n	800e784 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800e7e4:	f001 f844 	bl	800f870 <vPortYield>
			xReturn = pdPASS;
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	e7cb      	b.n	800e784 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e7ec:	4d1e      	ldr	r5, [pc, #120]	; (800e868 <xTaskGenericCreate+0x1d8>)
 800e7ee:	0028      	movs	r0, r5
 800e7f0:	f7ff fb24 	bl	800de3c <vListInitialise>
 800e7f4:	0028      	movs	r0, r5
 800e7f6:	3014      	adds	r0, #20
 800e7f8:	f7ff fb20 	bl	800de3c <vListInitialise>
 800e7fc:	0028      	movs	r0, r5
 800e7fe:	3028      	adds	r0, #40	; 0x28
 800e800:	f7ff fb1c 	bl	800de3c <vListInitialise>
 800e804:	0028      	movs	r0, r5
 800e806:	303c      	adds	r0, #60	; 0x3c
 800e808:	f7ff fb18 	bl	800de3c <vListInitialise>
 800e80c:	0028      	movs	r0, r5
 800e80e:	3050      	adds	r0, #80	; 0x50
 800e810:	f7ff fb14 	bl	800de3c <vListInitialise>
 800e814:	0028      	movs	r0, r5
 800e816:	3064      	adds	r0, #100	; 0x64
 800e818:	f7ff fb10 	bl	800de3c <vListInitialise>
 800e81c:	0028      	movs	r0, r5
 800e81e:	3078      	adds	r0, #120	; 0x78
 800e820:	f7ff fb0c 	bl	800de3c <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800e824:	4f11      	ldr	r7, [pc, #68]	; (800e86c <xTaskGenericCreate+0x1dc>)
 800e826:	0038      	movs	r0, r7
 800e828:	f7ff fb08 	bl	800de3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e82c:	4d10      	ldr	r5, [pc, #64]	; (800e870 <xTaskGenericCreate+0x1e0>)
 800e82e:	0028      	movs	r0, r5
 800e830:	f7ff fb04 	bl	800de3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e834:	480f      	ldr	r0, [pc, #60]	; (800e874 <xTaskGenericCreate+0x1e4>)
 800e836:	f7ff fb01 	bl	800de3c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e83a:	480f      	ldr	r0, [pc, #60]	; (800e878 <xTaskGenericCreate+0x1e8>)
 800e83c:	f7ff fafe 	bl	800de3c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e840:	480e      	ldr	r0, [pc, #56]	; (800e87c <xTaskGenericCreate+0x1ec>)
 800e842:	f7ff fafb 	bl	800de3c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e846:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <xTaskGenericCreate+0x1f0>)
 800e848:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e84a:	4b0e      	ldr	r3, [pc, #56]	; (800e884 <xTaskGenericCreate+0x1f4>)
 800e84c:	601d      	str	r5, [r3, #0]
}
 800e84e:	e7a9      	b.n	800e7a4 <xTaskGenericCreate+0x114>
 800e850:	3fffffff 	.word	0x3fffffff
 800e854:	20001d04 	.word	0x20001d04
 800e858:	20001c68 	.word	0x20001c68
 800e85c:	20001d5c 	.word	0x20001d5c
 800e860:	20001d10 	.word	0x20001d10
 800e864:	20001d18 	.word	0x20001d18
 800e868:	20001c74 	.word	0x20001c74
 800e86c:	20001d1c 	.word	0x20001d1c
 800e870:	20001d30 	.word	0x20001d30
 800e874:	20001d48 	.word	0x20001d48
 800e878:	20001d74 	.word	0x20001d74
 800e87c:	20001d60 	.word	0x20001d60
 800e880:	20001c6c 	.word	0x20001c6c
 800e884:	20001c70 	.word	0x20001c70

0800e888 <uxTaskPriorityGet>:
	{
 800e888:	b510      	push	{r4, lr}
 800e88a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e88c:	f000 fffc 	bl	800f888 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e890:	2c00      	cmp	r4, #0
 800e892:	d004      	beq.n	800e89e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e894:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e896:	f001 f803 	bl	800f8a0 <vPortExitCritical>
	}
 800e89a:	0020      	movs	r0, r4
 800e89c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e89e:	4b01      	ldr	r3, [pc, #4]	; (800e8a4 <uxTaskPriorityGet+0x1c>)
 800e8a0:	681c      	ldr	r4, [r3, #0]
 800e8a2:	e7f7      	b.n	800e894 <uxTaskPriorityGet+0xc>
 800e8a4:	20001c68 	.word	0x20001c68

0800e8a8 <vTaskPrioritySet>:
	{
 800e8a8:	b570      	push	{r4, r5, r6, lr}
 800e8aa:	0004      	movs	r4, r0
 800e8ac:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e8ae:	2906      	cmp	r1, #6
 800e8b0:	d901      	bls.n	800e8b6 <vTaskPrioritySet+0xe>
 800e8b2:	b672      	cpsid	i
 800e8b4:	e7fe      	b.n	800e8b4 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e8b6:	f000 ffe7 	bl	800f888 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e8ba:	2c00      	cmp	r4, #0
 800e8bc:	d00e      	beq.n	800e8dc <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e8be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e8c0:	428d      	cmp	r5, r1
 800e8c2:	d027      	beq.n	800e914 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800e8c4:	d90d      	bls.n	800e8e2 <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800e8c6:	4b22      	ldr	r3, [pc, #136]	; (800e950 <vTaskPrioritySet+0xa8>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	42a3      	cmp	r3, r4
 800e8cc:	d025      	beq.n	800e91a <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e8ce:	4b20      	ldr	r3, [pc, #128]	; (800e950 <vTaskPrioritySet+0xa8>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d4:	2600      	movs	r6, #0
 800e8d6:	429d      	cmp	r5, r3
 800e8d8:	4176      	adcs	r6, r6
 800e8da:	e007      	b.n	800e8ec <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e8dc:	4b1c      	ldr	r3, [pc, #112]	; (800e950 <vTaskPrioritySet+0xa8>)
 800e8de:	681c      	ldr	r4, [r3, #0]
 800e8e0:	e7ed      	b.n	800e8be <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800e8e2:	4b1b      	ldr	r3, [pc, #108]	; (800e950 <vTaskPrioritySet+0xa8>)
 800e8e4:	681e      	ldr	r6, [r3, #0]
 800e8e6:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e8e8:	4273      	negs	r3, r6
 800e8ea:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e8ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e8ee:	4291      	cmp	r1, r2
 800e8f0:	d015      	beq.n	800e91e <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800e8f2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8f4:	69a3      	ldr	r3, [r4, #24]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	db02      	blt.n	800e900 <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fa:	2307      	movs	r3, #7
 800e8fc:	1b5d      	subs	r5, r3, r5
 800e8fe:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e900:	0093      	lsls	r3, r2, #2
 800e902:	189b      	adds	r3, r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4a13      	ldr	r2, [pc, #76]	; (800e954 <vTaskPrioritySet+0xac>)
 800e908:	189b      	adds	r3, r3, r2
 800e90a:	6962      	ldr	r2, [r4, #20]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d008      	beq.n	800e922 <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800e910:	2e01      	cmp	r6, #1
 800e912:	d01a      	beq.n	800e94a <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800e914:	f000 ffc4 	bl	800f8a0 <vPortExitCritical>
	}
 800e918:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800e91a:	2600      	movs	r6, #0
 800e91c:	e7e6      	b.n	800e8ec <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800e91e:	62e5      	str	r5, [r4, #44]	; 0x2c
 800e920:	e7e7      	b.n	800e8f2 <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e922:	1d25      	adds	r5, r4, #4
 800e924:	0028      	movs	r0, r5
 800e926:	f7ff fab9 	bl	800de9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e92a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e92c:	4a0a      	ldr	r2, [pc, #40]	; (800e958 <vTaskPrioritySet+0xb0>)
 800e92e:	6812      	ldr	r2, [r2, #0]
 800e930:	4293      	cmp	r3, r2
 800e932:	d901      	bls.n	800e938 <vTaskPrioritySet+0x90>
 800e934:	4a08      	ldr	r2, [pc, #32]	; (800e958 <vTaskPrioritySet+0xb0>)
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	0098      	lsls	r0, r3, #2
 800e93a:	18c0      	adds	r0, r0, r3
 800e93c:	0080      	lsls	r0, r0, #2
 800e93e:	4b05      	ldr	r3, [pc, #20]	; (800e954 <vTaskPrioritySet+0xac>)
 800e940:	18c0      	adds	r0, r0, r3
 800e942:	0029      	movs	r1, r5
 800e944:	f7ff fa88 	bl	800de58 <vListInsertEnd>
 800e948:	e7e2      	b.n	800e910 <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800e94a:	f000 ff91 	bl	800f870 <vPortYield>
 800e94e:	e7e1      	b.n	800e914 <vTaskPrioritySet+0x6c>
 800e950:	20001c68 	.word	0x20001c68
 800e954:	20001c74 	.word	0x20001c74
 800e958:	20001d18 	.word	0x20001d18

0800e95c <vTaskStartScheduler>:
{
 800e95c:	b500      	push	{lr}
 800e95e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e960:	2300      	movs	r3, #0
 800e962:	9303      	str	r3, [sp, #12]
 800e964:	9302      	str	r3, [sp, #8]
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	22a0      	movs	r2, #160	; 0xa0
 800e96c:	490d      	ldr	r1, [pc, #52]	; (800e9a4 <vTaskStartScheduler+0x48>)
 800e96e:	480e      	ldr	r0, [pc, #56]	; (800e9a8 <vTaskStartScheduler+0x4c>)
 800e970:	f7ff fe8e 	bl	800e690 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e974:	2801      	cmp	r0, #1
 800e976:	d003      	beq.n	800e980 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e978:	2800      	cmp	r0, #0
 800e97a:	d110      	bne.n	800e99e <vTaskStartScheduler+0x42>
 800e97c:	b672      	cpsid	i
 800e97e:	e7fe      	b.n	800e97e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e980:	f000 fd8c 	bl	800f49c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e984:	2801      	cmp	r0, #1
 800e986:	d1f7      	bne.n	800e978 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e988:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e98a:	4b08      	ldr	r3, [pc, #32]	; (800e9ac <vTaskStartScheduler+0x50>)
 800e98c:	2201      	movs	r2, #1
 800e98e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e990:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <vTaskStartScheduler+0x54>)
 800e992:	2200      	movs	r2, #0
 800e994:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e996:	f7f9 fc87 	bl	80082a8 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e99a:	f000 ff3f 	bl	800f81c <xPortStartScheduler>
}
 800e99e:	b005      	add	sp, #20
 800e9a0:	bd00      	pop	{pc}
 800e9a2:	46c0      	nop			; (mov r8, r8)
 800e9a4:	0801caa8 	.word	0x0801caa8
 800e9a8:	0800ec35 	.word	0x0800ec35
 800e9ac:	20001d5c 	.word	0x20001d5c
 800e9b0:	20001d88 	.word	0x20001d88

0800e9b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e9b4:	4a02      	ldr	r2, [pc, #8]	; (800e9c0 <vTaskSuspendAll+0xc>)
 800e9b6:	6813      	ldr	r3, [r2, #0]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	6013      	str	r3, [r2, #0]
}
 800e9bc:	4770      	bx	lr
 800e9be:	46c0      	nop			; (mov r8, r8)
 800e9c0:	20001d0c 	.word	0x20001d0c

0800e9c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e9c4:	4b01      	ldr	r3, [pc, #4]	; (800e9cc <xTaskGetTickCount+0x8>)
 800e9c6:	6818      	ldr	r0, [r3, #0]
}
 800e9c8:	4770      	bx	lr
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	20001d88 	.word	0x20001d88

0800e9d0 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e9d0:	4b01      	ldr	r3, [pc, #4]	; (800e9d8 <xTaskGetTickCountFromISR+0x8>)
 800e9d2:	6818      	ldr	r0, [r3, #0]
}
 800e9d4:	4770      	bx	lr
 800e9d6:	46c0      	nop			; (mov r8, r8)
 800e9d8:	20001d88 	.word	0x20001d88

0800e9dc <xTaskIncrementTick>:
{
 800e9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9de:	46ce      	mov	lr, r9
 800e9e0:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e2:	4b3d      	ldr	r3, [pc, #244]	; (800ead8 <xTaskIncrementTick+0xfc>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d167      	bne.n	800eaba <xTaskIncrementTick+0xde>
		++xTickCount;
 800e9ea:	4b3c      	ldr	r3, [pc, #240]	; (800eadc <xTaskIncrementTick+0x100>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	3201      	adds	r2, #1
 800e9f0:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e9f2:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	d112      	bne.n	800ea1e <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800e9f8:	4b39      	ldr	r3, [pc, #228]	; (800eae0 <xTaskIncrementTick+0x104>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <xTaskIncrementTick+0x2a>
 800ea02:	b672      	cpsid	i
 800ea04:	e7fe      	b.n	800ea04 <xTaskIncrementTick+0x28>
 800ea06:	4a36      	ldr	r2, [pc, #216]	; (800eae0 <xTaskIncrementTick+0x104>)
 800ea08:	6811      	ldr	r1, [r2, #0]
 800ea0a:	4b36      	ldr	r3, [pc, #216]	; (800eae4 <xTaskIncrementTick+0x108>)
 800ea0c:	6818      	ldr	r0, [r3, #0]
 800ea0e:	6010      	str	r0, [r2, #0]
 800ea10:	6019      	str	r1, [r3, #0]
 800ea12:	4a35      	ldr	r2, [pc, #212]	; (800eae8 <xTaskIncrementTick+0x10c>)
 800ea14:	6813      	ldr	r3, [r2, #0]
 800ea16:	3301      	adds	r3, #1
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	f7ff fde3 	bl	800e5e4 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ea1e:	4b33      	ldr	r3, [pc, #204]	; (800eaec <xTaskIncrementTick+0x110>)
 800ea20:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ea22:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ea24:	42b3      	cmp	r3, r6
 800ea26:	d80b      	bhi.n	800ea40 <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea28:	4b2d      	ldr	r3, [pc, #180]	; (800eae0 <xTaskIncrementTick+0x104>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea32:	4d2b      	ldr	r5, [pc, #172]	; (800eae0 <xTaskIncrementTick+0x104>)
 800ea34:	e027      	b.n	800ea86 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800ea36:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800ea38:	4b2c      	ldr	r3, [pc, #176]	; (800eaec <xTaskIncrementTick+0x110>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	4252      	negs	r2, r2
 800ea3e:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea40:	4b2b      	ldr	r3, [pc, #172]	; (800eaf0 <xTaskIncrementTick+0x114>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea46:	0093      	lsls	r3, r2, #2
 800ea48:	189b      	adds	r3, r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4a29      	ldr	r2, [pc, #164]	; (800eaf4 <xTaskIncrementTick+0x118>)
 800ea4e:	589b      	ldr	r3, [r3, r2]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d937      	bls.n	800eac4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800ea54:	2401      	movs	r4, #1
 800ea56:	e035      	b.n	800eac4 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800ea58:	4a24      	ldr	r2, [pc, #144]	; (800eaec <xTaskIncrementTick+0x110>)
 800ea5a:	6013      	str	r3, [r2, #0]
							break;
 800ea5c:	e7f0      	b.n	800ea40 <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800ea5e:	0098      	lsls	r0, r3, #2
 800ea60:	18c0      	adds	r0, r0, r3
 800ea62:	0080      	lsls	r0, r0, #2
 800ea64:	4b23      	ldr	r3, [pc, #140]	; (800eaf4 <xTaskIncrementTick+0x118>)
 800ea66:	18c0      	adds	r0, r0, r3
 800ea68:	4649      	mov	r1, r9
 800ea6a:	f7ff f9f5 	bl	800de58 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea6e:	4b20      	ldr	r3, [pc, #128]	; (800eaf0 <xTaskIncrementTick+0x114>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d300      	bcc.n	800ea7c <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800ea7a:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea7c:	4b18      	ldr	r3, [pc, #96]	; (800eae0 <xTaskIncrementTick+0x104>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0d8      	beq.n	800ea38 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea86:	682b      	ldr	r3, [r5, #0]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800ea8c:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800ea8e:	429e      	cmp	r6, r3
 800ea90:	d3e2      	bcc.n	800ea58 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ea92:	1d3b      	adds	r3, r7, #4
 800ea94:	4699      	mov	r9, r3
 800ea96:	0018      	movs	r0, r3
 800ea98:	f7ff fa00 	bl	800de9c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eaa2:	0038      	movs	r0, r7
 800eaa4:	3018      	adds	r0, #24
 800eaa6:	f7ff f9f9 	bl	800de9c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800eaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaac:	4a12      	ldr	r2, [pc, #72]	; (800eaf8 <xTaskIncrementTick+0x11c>)
 800eaae:	6812      	ldr	r2, [r2, #0]
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d9d4      	bls.n	800ea5e <xTaskIncrementTick+0x82>
 800eab4:	4a10      	ldr	r2, [pc, #64]	; (800eaf8 <xTaskIncrementTick+0x11c>)
 800eab6:	6013      	str	r3, [r2, #0]
 800eab8:	e7d1      	b.n	800ea5e <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <xTaskIncrementTick+0x120>)
 800eabc:	6813      	ldr	r3, [r2, #0]
 800eabe:	3301      	adds	r3, #1
 800eac0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800eac2:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800eac4:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <xTaskIncrementTick+0x124>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d000      	beq.n	800eace <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800eacc:	2401      	movs	r4, #1
}
 800eace:	0020      	movs	r0, r4
 800ead0:	bc80      	pop	{r7}
 800ead2:	46b9      	mov	r9, r7
 800ead4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead6:	46c0      	nop			; (mov r8, r8)
 800ead8:	20001d0c 	.word	0x20001d0c
 800eadc:	20001d88 	.word	0x20001d88
 800eae0:	20001c6c 	.word	0x20001c6c
 800eae4:	20001c70 	.word	0x20001c70
 800eae8:	20001d44 	.word	0x20001d44
 800eaec:	200000a4 	.word	0x200000a4
 800eaf0:	20001c68 	.word	0x20001c68
 800eaf4:	20001c74 	.word	0x20001c74
 800eaf8:	20001d18 	.word	0x20001d18
 800eafc:	20001d08 	.word	0x20001d08
 800eb00:	20001d8c 	.word	0x20001d8c

0800eb04 <xTaskResumeAll>:
{
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800eb06:	4b31      	ldr	r3, [pc, #196]	; (800ebcc <xTaskResumeAll+0xc8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <xTaskResumeAll+0xe>
 800eb0e:	b672      	cpsid	i
 800eb10:	e7fe      	b.n	800eb10 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800eb12:	f000 feb9 	bl	800f888 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <xTaskResumeAll+0xc8>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	3a01      	subs	r2, #1
 800eb1c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb1e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800eb20:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d14b      	bne.n	800ebbe <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb26:	4b2a      	ldr	r3, [pc, #168]	; (800ebd0 <xTaskResumeAll+0xcc>)
 800eb28:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800eb2a:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d046      	beq.n	800ebbe <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb30:	4d28      	ldr	r5, [pc, #160]	; (800ebd4 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800eb32:	002c      	movs	r4, r5
 800eb34:	e00d      	b.n	800eb52 <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800eb36:	0098      	lsls	r0, r3, #2
 800eb38:	18c0      	adds	r0, r0, r3
 800eb3a:	0080      	lsls	r0, r0, #2
 800eb3c:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <xTaskResumeAll+0xd4>)
 800eb3e:	18c0      	adds	r0, r0, r3
 800eb40:	0039      	movs	r1, r7
 800eb42:	f7ff f989 	bl	800de58 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb46:	4b25      	ldr	r3, [pc, #148]	; (800ebdc <xTaskResumeAll+0xd8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800eb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d214      	bcs.n	800eb7c <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb52:	682b      	ldr	r3, [r5, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d015      	beq.n	800eb84 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800eb58:	68e3      	ldr	r3, [r4, #12]
 800eb5a:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb5c:	0030      	movs	r0, r6
 800eb5e:	3018      	adds	r0, #24
 800eb60:	f7ff f99c 	bl	800de9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eb64:	1d37      	adds	r7, r6, #4
 800eb66:	0038      	movs	r0, r7
 800eb68:	f7ff f998 	bl	800de9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb6c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eb6e:	4a1c      	ldr	r2, [pc, #112]	; (800ebe0 <xTaskResumeAll+0xdc>)
 800eb70:	6812      	ldr	r2, [r2, #0]
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d9df      	bls.n	800eb36 <xTaskResumeAll+0x32>
 800eb76:	4a1a      	ldr	r2, [pc, #104]	; (800ebe0 <xTaskResumeAll+0xdc>)
 800eb78:	6013      	str	r3, [r2, #0]
 800eb7a:	e7dc      	b.n	800eb36 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800eb7c:	4b19      	ldr	r3, [pc, #100]	; (800ebe4 <xTaskResumeAll+0xe0>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	e7e6      	b.n	800eb52 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800eb84:	4b18      	ldr	r3, [pc, #96]	; (800ebe8 <xTaskResumeAll+0xe4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d013      	beq.n	800ebb4 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <xTaskResumeAll+0xe4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00f      	beq.n	800ebb4 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800eb94:	4d13      	ldr	r5, [pc, #76]	; (800ebe4 <xTaskResumeAll+0xe0>)
 800eb96:	2601      	movs	r6, #1
						--uxPendedTicks;
 800eb98:	4c13      	ldr	r4, [pc, #76]	; (800ebe8 <xTaskResumeAll+0xe4>)
 800eb9a:	e005      	b.n	800eba8 <xTaskResumeAll+0xa4>
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d005      	beq.n	800ebb4 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800eba8:	f7ff ff18 	bl	800e9dc <xTaskIncrementTick>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d0f5      	beq.n	800eb9c <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800ebb0:	602e      	str	r6, [r5, #0]
 800ebb2:	e7f3      	b.n	800eb9c <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800ebb4:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <xTaskResumeAll+0xe0>)
 800ebb6:	681c      	ldr	r4, [r3, #0]
 800ebb8:	2c01      	cmp	r4, #1
 800ebba:	d004      	beq.n	800ebc6 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800ebbc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ebbe:	f000 fe6f 	bl	800f8a0 <vPortExitCritical>
}
 800ebc2:	0020      	movs	r0, r4
 800ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800ebc6:	f000 fe53 	bl	800f870 <vPortYield>
 800ebca:	e7f8      	b.n	800ebbe <xTaskResumeAll+0xba>
 800ebcc:	20001d0c 	.word	0x20001d0c
 800ebd0:	20001d04 	.word	0x20001d04
 800ebd4:	20001d48 	.word	0x20001d48
 800ebd8:	20001c74 	.word	0x20001c74
 800ebdc:	20001c68 	.word	0x20001c68
 800ebe0:	20001d18 	.word	0x20001d18
 800ebe4:	20001d8c 	.word	0x20001d8c
 800ebe8:	20001d08 	.word	0x20001d08

0800ebec <vTaskDelay>:
	{
 800ebec:	b510      	push	{r4, lr}
 800ebee:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ebf0:	d016      	beq.n	800ec20 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	; (800ec28 <vTaskDelay+0x3c>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <vTaskDelay+0x12>
 800ebfa:	b672      	cpsid	i
 800ebfc:	e7fe      	b.n	800ebfc <vTaskDelay+0x10>
			vTaskSuspendAll();
 800ebfe:	f7ff fed9 	bl	800e9b4 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800ec02:	4b0a      	ldr	r3, [pc, #40]	; (800ec2c <vTaskDelay+0x40>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ec08:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <vTaskDelay+0x44>)
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	3004      	adds	r0, #4
 800ec0e:	f7ff f945 	bl	800de9c <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ec12:	0020      	movs	r0, r4
 800ec14:	f7ff fcfc 	bl	800e610 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ec18:	f7ff ff74 	bl	800eb04 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d101      	bne.n	800ec24 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800ec20:	f000 fe26 	bl	800f870 <vPortYield>
	}
 800ec24:	bd10      	pop	{r4, pc}
 800ec26:	46c0      	nop			; (mov r8, r8)
 800ec28:	20001d0c 	.word	0x20001d0c
 800ec2c:	20001d88 	.word	0x20001d88
 800ec30:	20001c68 	.word	0x20001c68

0800ec34 <prvIdleTask>:
{
 800ec34:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800ec36:	4e16      	ldr	r6, [pc, #88]	; (800ec90 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ec38:	4d16      	ldr	r5, [pc, #88]	; (800ec94 <prvIdleTask+0x60>)
 800ec3a:	e003      	b.n	800ec44 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec3c:	4b16      	ldr	r3, [pc, #88]	; (800ec98 <prvIdleTask+0x64>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d822      	bhi.n	800ec8a <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800ec44:	6833      	ldr	r3, [r6, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0f8      	beq.n	800ec3c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800ec4a:	f7ff feb3 	bl	800e9b4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ec4e:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800ec50:	f7ff ff58 	bl	800eb04 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800ec54:	2c00      	cmp	r4, #0
 800ec56:	d0f5      	beq.n	800ec44 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800ec58:	f000 fe16 	bl	800f888 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ec5c:	4b0d      	ldr	r3, [pc, #52]	; (800ec94 <prvIdleTask+0x60>)
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ec62:	1d20      	adds	r0, r4, #4
 800ec64:	f7ff f91a 	bl	800de9c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800ec68:	4a0c      	ldr	r2, [pc, #48]	; (800ec9c <prvIdleTask+0x68>)
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800ec70:	4a07      	ldr	r2, [pc, #28]	; (800ec90 <prvIdleTask+0x5c>)
 800ec72:	6813      	ldr	r3, [r2, #0]
 800ec74:	3b01      	subs	r3, #1
 800ec76:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800ec78:	f000 fe12 	bl	800f8a0 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800ec7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ec7e:	f000 ff17 	bl	800fab0 <vPortFree>
		vPortFree( pxTCB );
 800ec82:	0020      	movs	r0, r4
 800ec84:	f000 ff14 	bl	800fab0 <vPortFree>
	}
 800ec88:	e7dc      	b.n	800ec44 <prvIdleTask+0x10>
				taskYIELD();
 800ec8a:	f000 fdf1 	bl	800f870 <vPortYield>
 800ec8e:	e7d9      	b.n	800ec44 <prvIdleTask+0x10>
 800ec90:	20001d14 	.word	0x20001d14
 800ec94:	20001d74 	.word	0x20001d74
 800ec98:	20001c74 	.word	0x20001c74
 800ec9c:	20001d04 	.word	0x20001d04

0800eca0 <uxTaskGetSystemState>:
	{
 800eca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca2:	46c6      	mov	lr, r8
 800eca4:	b500      	push	{lr}
 800eca6:	0006      	movs	r6, r0
 800eca8:	000d      	movs	r5, r1
 800ecaa:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800ecac:	f7ff fe82 	bl	800e9b4 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ecb0:	4b1e      	ldr	r3, [pc, #120]	; (800ed2c <uxTaskGetSystemState+0x8c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ecb4:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ecb6:	42ab      	cmp	r3, r5
 800ecb8:	d832      	bhi.n	800ed20 <uxTaskGetSystemState+0x80>
 800ecba:	4d1d      	ldr	r5, [pc, #116]	; (800ed30 <uxTaskGetSystemState+0x90>)
 800ecbc:	002f      	movs	r7, r5
 800ecbe:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ecc0:	0160      	lsls	r0, r4, #5
 800ecc2:	1830      	adds	r0, r6, r0
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	0029      	movs	r1, r5
 800ecc8:	f7ff fc34 	bl	800e534 <prvListTaskWithinSingleList>
 800eccc:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecce:	002b      	movs	r3, r5
 800ecd0:	3d14      	subs	r5, #20
 800ecd2:	42bb      	cmp	r3, r7
 800ecd4:	d1f4      	bne.n	800ecc0 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ecd6:	4b17      	ldr	r3, [pc, #92]	; (800ed34 <uxTaskGetSystemState+0x94>)
 800ecd8:	6819      	ldr	r1, [r3, #0]
 800ecda:	0160      	lsls	r0, r4, #5
 800ecdc:	1830      	adds	r0, r6, r0
 800ecde:	2202      	movs	r2, #2
 800ece0:	f7ff fc28 	bl	800e534 <prvListTaskWithinSingleList>
 800ece4:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ece6:	4b14      	ldr	r3, [pc, #80]	; (800ed38 <uxTaskGetSystemState+0x98>)
 800ece8:	6819      	ldr	r1, [r3, #0]
 800ecea:	0160      	lsls	r0, r4, #5
 800ecec:	1830      	adds	r0, r6, r0
 800ecee:	2202      	movs	r2, #2
 800ecf0:	f7ff fc20 	bl	800e534 <prvListTaskWithinSingleList>
 800ecf4:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ecf6:	0160      	lsls	r0, r4, #5
 800ecf8:	1830      	adds	r0, r6, r0
 800ecfa:	2204      	movs	r2, #4
 800ecfc:	490f      	ldr	r1, [pc, #60]	; (800ed3c <uxTaskGetSystemState+0x9c>)
 800ecfe:	f7ff fc19 	bl	800e534 <prvListTaskWithinSingleList>
 800ed02:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ed04:	0160      	lsls	r0, r4, #5
 800ed06:	1830      	adds	r0, r6, r0
 800ed08:	2203      	movs	r2, #3
 800ed0a:	490d      	ldr	r1, [pc, #52]	; (800ed40 <uxTaskGetSystemState+0xa0>)
 800ed0c:	f7ff fc12 	bl	800e534 <prvListTaskWithinSingleList>
 800ed10:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800ed12:	4643      	mov	r3, r8
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ed18:	f7f9 fad6 	bl	80082c8 <ulMainGetRunTimeCounterValue>
 800ed1c:	4643      	mov	r3, r8
 800ed1e:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800ed20:	f7ff fef0 	bl	800eb04 <xTaskResumeAll>
	}
 800ed24:	0020      	movs	r0, r4
 800ed26:	bc80      	pop	{r7}
 800ed28:	46b8      	mov	r8, r7
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2c:	20001d04 	.word	0x20001d04
 800ed30:	20001cec 	.word	0x20001cec
 800ed34:	20001c6c 	.word	0x20001c6c
 800ed38:	20001c70 	.word	0x20001c70
 800ed3c:	20001d74 	.word	0x20001d74
 800ed40:	20001d60 	.word	0x20001d60

0800ed44 <vTaskSwitchContext>:
{
 800ed44:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed46:	4b39      	ldr	r3, [pc, #228]	; (800ee2c <vTaskSwitchContext+0xe8>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ed4e:	4b38      	ldr	r3, [pc, #224]	; (800ee30 <vTaskSwitchContext+0xec>)
 800ed50:	2201      	movs	r2, #1
 800ed52:	601a      	str	r2, [r3, #0]
}
 800ed54:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800ed56:	4b36      	ldr	r3, [pc, #216]	; (800ee30 <vTaskSwitchContext+0xec>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ed5c:	f7f9 fab4 	bl	80082c8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ed60:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <vTaskSwitchContext+0xf0>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4298      	cmp	r0, r3
 800ed66:	d905      	bls.n	800ed74 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ed68:	4a33      	ldr	r2, [pc, #204]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800ed6a:	6812      	ldr	r2, [r2, #0]
 800ed6c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ed6e:	1acb      	subs	r3, r1, r3
 800ed70:	181b      	adds	r3, r3, r0
 800ed72:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800ed74:	4b2f      	ldr	r3, [pc, #188]	; (800ee34 <vTaskSwitchContext+0xf0>)
 800ed76:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ed78:	4b2f      	ldr	r3, [pc, #188]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6812      	ldr	r2, [r2, #0]
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d93b      	bls.n	800edfe <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ed86:	4b2c      	ldr	r3, [pc, #176]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed8c:	2214      	movs	r2, #20
 800ed8e:	492b      	ldr	r1, [pc, #172]	; (800ee3c <vTaskSwitchContext+0xf8>)
 800ed90:	f004 fe18 	bl	80139c4 <memcmp>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d139      	bne.n	800ee0c <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ed98:	4b29      	ldr	r3, [pc, #164]	; (800ee40 <vTaskSwitchContext+0xfc>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	0093      	lsls	r3, r2, #2
 800ed9e:	189b      	adds	r3, r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4a28      	ldr	r2, [pc, #160]	; (800ee44 <vTaskSwitchContext+0x100>)
 800eda4:	589b      	ldr	r3, [r3, r2]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10f      	bne.n	800edca <vTaskSwitchContext+0x86>
 800edaa:	4825      	ldr	r0, [pc, #148]	; (800ee40 <vTaskSwitchContext+0xfc>)
 800edac:	0002      	movs	r2, r0
 800edae:	6803      	ldr	r3, [r0, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d032      	beq.n	800ee1a <vTaskSwitchContext+0xd6>
 800edb4:	6813      	ldr	r3, [r2, #0]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	6013      	str	r3, [r2, #0]
 800edba:	6811      	ldr	r1, [r2, #0]
 800edbc:	008b      	lsls	r3, r1, #2
 800edbe:	185b      	adds	r3, r3, r1
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4920      	ldr	r1, [pc, #128]	; (800ee44 <vTaskSwitchContext+0x100>)
 800edc4:	585b      	ldr	r3, [r3, r1]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0f1      	beq.n	800edae <vTaskSwitchContext+0x6a>
 800edca:	4b1d      	ldr	r3, [pc, #116]	; (800ee40 <vTaskSwitchContext+0xfc>)
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	4c1d      	ldr	r4, [pc, #116]	; (800ee44 <vTaskSwitchContext+0x100>)
 800edd0:	0093      	lsls	r3, r2, #2
 800edd2:	1899      	adds	r1, r3, r2
 800edd4:	0089      	lsls	r1, r1, #2
 800edd6:	1861      	adds	r1, r4, r1
 800edd8:	6848      	ldr	r0, [r1, #4]
 800edda:	6840      	ldr	r0, [r0, #4]
 800eddc:	6048      	str	r0, [r1, #4]
 800edde:	189b      	adds	r3, r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	3308      	adds	r3, #8
 800ede4:	191b      	adds	r3, r3, r4
 800ede6:	4298      	cmp	r0, r3
 800ede8:	d019      	beq.n	800ee1e <vTaskSwitchContext+0xda>
 800edea:	0093      	lsls	r3, r2, #2
 800edec:	189a      	adds	r2, r3, r2
 800edee:	0092      	lsls	r2, r2, #2
 800edf0:	4b14      	ldr	r3, [pc, #80]	; (800ee44 <vTaskSwitchContext+0x100>)
 800edf2:	189a      	adds	r2, r3, r2
 800edf4:	6853      	ldr	r3, [r2, #4]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800edfa:	601a      	str	r2, [r3, #0]
}
 800edfc:	e7aa      	b.n	800ed54 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800edfe:	4b0e      	ldr	r3, [pc, #56]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	6819      	ldr	r1, [r3, #0]
 800ee04:	3134      	adds	r1, #52	; 0x34
 800ee06:	f7fe f979 	bl	800d0fc <vApplicationStackOverflowHook>
 800ee0a:	e7bc      	b.n	800ed86 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ee0c:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <vTaskSwitchContext+0xf4>)
 800ee0e:	6818      	ldr	r0, [r3, #0]
 800ee10:	6819      	ldr	r1, [r3, #0]
 800ee12:	3134      	adds	r1, #52	; 0x34
 800ee14:	f7fe f972 	bl	800d0fc <vApplicationStackOverflowHook>
 800ee18:	e7be      	b.n	800ed98 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ee1a:	b672      	cpsid	i
 800ee1c:	e7fe      	b.n	800ee1c <vTaskSwitchContext+0xd8>
 800ee1e:	6840      	ldr	r0, [r0, #4]
 800ee20:	0093      	lsls	r3, r2, #2
 800ee22:	189b      	adds	r3, r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	18e3      	adds	r3, r4, r3
 800ee28:	6058      	str	r0, [r3, #4]
 800ee2a:	e7de      	b.n	800edea <vTaskSwitchContext+0xa6>
 800ee2c:	20001d0c 	.word	0x20001d0c
 800ee30:	20001d8c 	.word	0x20001d8c
 800ee34:	20001d00 	.word	0x20001d00
 800ee38:	20001c68 	.word	0x20001c68
 800ee3c:	0801cad8 	.word	0x0801cad8
 800ee40:	20001d18 	.word	0x20001d18
 800ee44:	20001c74 	.word	0x20001c74

0800ee48 <vTaskPlaceOnEventList>:
{
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d010      	beq.n	800ee72 <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee50:	4d0c      	ldr	r5, [pc, #48]	; (800ee84 <vTaskPlaceOnEventList+0x3c>)
 800ee52:	6829      	ldr	r1, [r5, #0]
 800ee54:	3118      	adds	r1, #24
 800ee56:	f7ff f80a 	bl	800de6e <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee5a:	6828      	ldr	r0, [r5, #0]
 800ee5c:	3004      	adds	r0, #4
 800ee5e:	f7ff f81d 	bl	800de9c <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800ee62:	1c63      	adds	r3, r4, #1
 800ee64:	d007      	beq.n	800ee76 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800ee66:	4b08      	ldr	r3, [pc, #32]	; (800ee88 <vTaskPlaceOnEventList+0x40>)
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ee6c:	f7ff fbd0 	bl	800e610 <prvAddCurrentTaskToDelayedList>
}
 800ee70:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800ee72:	b672      	cpsid	i
 800ee74:	e7fe      	b.n	800ee74 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee76:	4b03      	ldr	r3, [pc, #12]	; (800ee84 <vTaskPlaceOnEventList+0x3c>)
 800ee78:	6819      	ldr	r1, [r3, #0]
 800ee7a:	3104      	adds	r1, #4
 800ee7c:	4803      	ldr	r0, [pc, #12]	; (800ee8c <vTaskPlaceOnEventList+0x44>)
 800ee7e:	f7fe ffeb 	bl	800de58 <vListInsertEnd>
 800ee82:	e7f5      	b.n	800ee70 <vTaskPlaceOnEventList+0x28>
 800ee84:	20001c68 	.word	0x20001c68
 800ee88:	20001d88 	.word	0x20001d88
 800ee8c:	20001d60 	.word	0x20001d60

0800ee90 <vTaskPlaceOnEventListRestricted>:
	{
 800ee90:	b570      	push	{r4, r5, r6, lr}
 800ee92:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d00e      	beq.n	800eeb6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee98:	4d08      	ldr	r5, [pc, #32]	; (800eebc <vTaskPlaceOnEventListRestricted+0x2c>)
 800ee9a:	6829      	ldr	r1, [r5, #0]
 800ee9c:	3118      	adds	r1, #24
 800ee9e:	f7fe ffdb 	bl	800de58 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eea2:	6828      	ldr	r0, [r5, #0]
 800eea4:	3004      	adds	r0, #4
 800eea6:	f7fe fff9 	bl	800de9c <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800eeaa:	4b05      	ldr	r3, [pc, #20]	; (800eec0 <vTaskPlaceOnEventListRestricted+0x30>)
 800eeac:	6818      	ldr	r0, [r3, #0]
 800eeae:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800eeb0:	f7ff fbae 	bl	800e610 <prvAddCurrentTaskToDelayedList>
	}
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800eeb6:	b672      	cpsid	i
 800eeb8:	e7fe      	b.n	800eeb8 <vTaskPlaceOnEventListRestricted+0x28>
 800eeba:	46c0      	nop			; (mov r8, r8)
 800eebc:	20001c68 	.word	0x20001c68
 800eec0:	20001d88 	.word	0x20001d88

0800eec4 <xTaskRemoveFromEventList>:
{
 800eec4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800eec6:	68c3      	ldr	r3, [r0, #12]
 800eec8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800eeca:	2c00      	cmp	r4, #0
 800eecc:	d027      	beq.n	800ef1e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eece:	0025      	movs	r5, r4
 800eed0:	3518      	adds	r5, #24
 800eed2:	0028      	movs	r0, r5
 800eed4:	f7fe ffe2 	bl	800de9c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eed8:	4b14      	ldr	r3, [pc, #80]	; (800ef2c <xTaskRemoveFromEventList+0x68>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d120      	bne.n	800ef22 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800eee0:	1d25      	adds	r5, r4, #4
 800eee2:	0028      	movs	r0, r5
 800eee4:	f7fe ffda 	bl	800de9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eeea:	4a11      	ldr	r2, [pc, #68]	; (800ef30 <xTaskRemoveFromEventList+0x6c>)
 800eeec:	6812      	ldr	r2, [r2, #0]
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d901      	bls.n	800eef6 <xTaskRemoveFromEventList+0x32>
 800eef2:	4a0f      	ldr	r2, [pc, #60]	; (800ef30 <xTaskRemoveFromEventList+0x6c>)
 800eef4:	6013      	str	r3, [r2, #0]
 800eef6:	0098      	lsls	r0, r3, #2
 800eef8:	18c0      	adds	r0, r0, r3
 800eefa:	0080      	lsls	r0, r0, #2
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <xTaskRemoveFromEventList+0x70>)
 800eefe:	18c0      	adds	r0, r0, r3
 800ef00:	0029      	movs	r1, r5
 800ef02:	f7fe ffa9 	bl	800de58 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <xTaskRemoveFromEventList+0x74>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ef0e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d903      	bls.n	800ef1c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800ef14:	4b09      	ldr	r3, [pc, #36]	; (800ef3c <xTaskRemoveFromEventList+0x78>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ef1a:	3001      	adds	r0, #1
}
 800ef1c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800ef1e:	b672      	cpsid	i
 800ef20:	e7fe      	b.n	800ef20 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef22:	0029      	movs	r1, r5
 800ef24:	4806      	ldr	r0, [pc, #24]	; (800ef40 <xTaskRemoveFromEventList+0x7c>)
 800ef26:	f7fe ff97 	bl	800de58 <vListInsertEnd>
 800ef2a:	e7ec      	b.n	800ef06 <xTaskRemoveFromEventList+0x42>
 800ef2c:	20001d0c 	.word	0x20001d0c
 800ef30:	20001d18 	.word	0x20001d18
 800ef34:	20001c74 	.word	0x20001c74
 800ef38:	20001c68 	.word	0x20001c68
 800ef3c:	20001d8c 	.word	0x20001d8c
 800ef40:	20001d48 	.word	0x20001d48

0800ef44 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d006      	beq.n	800ef56 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <vTaskSetTimeOutState+0x18>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef4e:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <vTaskSetTimeOutState+0x1c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	6043      	str	r3, [r0, #4]
}
 800ef54:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ef56:	b672      	cpsid	i
 800ef58:	e7fe      	b.n	800ef58 <vTaskSetTimeOutState+0x14>
 800ef5a:	46c0      	nop			; (mov r8, r8)
 800ef5c:	20001d44 	.word	0x20001d44
 800ef60:	20001d88 	.word	0x20001d88

0800ef64 <xTaskCheckForTimeOut>:
{
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	0004      	movs	r4, r0
 800ef68:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d01e      	beq.n	800efac <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	d01e      	beq.n	800efb0 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800ef72:	f000 fc89 	bl	800f888 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ef76:	4b12      	ldr	r3, [pc, #72]	; (800efc0 <xTaskCheckForTimeOut+0x5c>)
 800ef78:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ef7a:	682b      	ldr	r3, [r5, #0]
 800ef7c:	1c59      	adds	r1, r3, #1
 800ef7e:	d019      	beq.n	800efb4 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef80:	4910      	ldr	r1, [pc, #64]	; (800efc4 <xTaskCheckForTimeOut+0x60>)
 800ef82:	6809      	ldr	r1, [r1, #0]
 800ef84:	6820      	ldr	r0, [r4, #0]
 800ef86:	4288      	cmp	r0, r1
 800ef88:	d003      	beq.n	800ef92 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800ef8a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef8c:	6861      	ldr	r1, [r4, #4]
 800ef8e:	4291      	cmp	r1, r2
 800ef90:	d911      	bls.n	800efb6 <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ef92:	6861      	ldr	r1, [r4, #4]
 800ef94:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ef96:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ef98:	4283      	cmp	r3, r0
 800ef9a:	d90c      	bls.n	800efb6 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ef9c:	1a9b      	subs	r3, r3, r2
 800ef9e:	185b      	adds	r3, r3, r1
 800efa0:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800efa2:	0020      	movs	r0, r4
 800efa4:	f7ff ffce 	bl	800ef44 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800efa8:	2600      	movs	r6, #0
 800efaa:	e004      	b.n	800efb6 <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800efac:	b672      	cpsid	i
 800efae:	e7fe      	b.n	800efae <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 800efb0:	b672      	cpsid	i
 800efb2:	e7fe      	b.n	800efb2 <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 800efb4:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800efb6:	f000 fc73 	bl	800f8a0 <vPortExitCritical>
}
 800efba:	0030      	movs	r0, r6
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
 800efbe:	46c0      	nop			; (mov r8, r8)
 800efc0:	20001d88 	.word	0x20001d88
 800efc4:	20001d44 	.word	0x20001d44

0800efc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800efc8:	4b01      	ldr	r3, [pc, #4]	; (800efd0 <vTaskMissedYield+0x8>)
 800efca:	2201      	movs	r2, #1
 800efcc:	601a      	str	r2, [r3, #0]
}
 800efce:	4770      	bx	lr
 800efd0:	20001d8c 	.word	0x20001d8c

0800efd4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800efd4:	4b05      	ldr	r3, [pc, #20]	; (800efec <xTaskGetSchedulerState+0x18>)
 800efd6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800efd8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d004      	beq.n	800efe8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efde:	4b04      	ldr	r3, [pc, #16]	; (800eff0 <xTaskGetSchedulerState+0x1c>)
 800efe0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800efe2:	4243      	negs	r3, r0
 800efe4:	4158      	adcs	r0, r3
 800efe6:	0040      	lsls	r0, r0, #1
	}
 800efe8:	4770      	bx	lr
 800efea:	46c0      	nop			; (mov r8, r8)
 800efec:	20001d5c 	.word	0x20001d5c
 800eff0:	20001d0c 	.word	0x20001d0c

0800eff4 <vTaskPriorityInherit>:
	{
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eff8:	d01a      	beq.n	800f030 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800effa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800effc:	4b19      	ldr	r3, [pc, #100]	; (800f064 <vTaskPriorityInherit+0x70>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f002:	429a      	cmp	r2, r3
 800f004:	d214      	bcs.n	800f030 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f006:	6983      	ldr	r3, [r0, #24]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db05      	blt.n	800f018 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f00c:	4b15      	ldr	r3, [pc, #84]	; (800f064 <vTaskPriorityInherit+0x70>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f012:	2307      	movs	r3, #7
 800f014:	1a5b      	subs	r3, r3, r1
 800f016:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f018:	0093      	lsls	r3, r2, #2
 800f01a:	189b      	adds	r3, r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4a12      	ldr	r2, [pc, #72]	; (800f068 <vTaskPriorityInherit+0x74>)
 800f020:	189b      	adds	r3, r3, r2
 800f022:	6962      	ldr	r2, [r4, #20]
 800f024:	429a      	cmp	r2, r3
 800f026:	d004      	beq.n	800f032 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f028:	4b0e      	ldr	r3, [pc, #56]	; (800f064 <vTaskPriorityInherit+0x70>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f030:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f032:	1d25      	adds	r5, r4, #4
 800f034:	0028      	movs	r0, r5
 800f036:	f7fe ff31 	bl	800de9c <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f03a:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <vTaskPriorityInherit+0x70>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f040:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f042:	4a0a      	ldr	r2, [pc, #40]	; (800f06c <vTaskPriorityInherit+0x78>)
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	4293      	cmp	r3, r2
 800f048:	d808      	bhi.n	800f05c <vTaskPriorityInherit+0x68>
 800f04a:	0098      	lsls	r0, r3, #2
 800f04c:	18c0      	adds	r0, r0, r3
 800f04e:	0080      	lsls	r0, r0, #2
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <vTaskPriorityInherit+0x74>)
 800f052:	18c0      	adds	r0, r0, r3
 800f054:	0029      	movs	r1, r5
 800f056:	f7fe feff 	bl	800de58 <vListInsertEnd>
	}
 800f05a:	e7e9      	b.n	800f030 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f05c:	4a03      	ldr	r2, [pc, #12]	; (800f06c <vTaskPriorityInherit+0x78>)
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	e7f3      	b.n	800f04a <vTaskPriorityInherit+0x56>
 800f062:	46c0      	nop			; (mov r8, r8)
 800f064:	20001c68 	.word	0x20001c68
 800f068:	20001c74 	.word	0x20001c74
 800f06c:	20001d18 	.word	0x20001d18

0800f070 <xTaskPriorityDisinherit>:
	{
 800f070:	b570      	push	{r4, r5, r6, lr}
 800f072:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f074:	d02c      	beq.n	800f0d0 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800f076:	4b18      	ldr	r3, [pc, #96]	; (800f0d8 <xTaskPriorityDisinherit+0x68>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4283      	cmp	r3, r0
 800f07c:	d001      	beq.n	800f082 <xTaskPriorityDisinherit+0x12>
 800f07e:	b672      	cpsid	i
 800f080:	e7fe      	b.n	800f080 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f082:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f084:	2b00      	cmp	r3, #0
 800f086:	d101      	bne.n	800f08c <xTaskPriorityDisinherit+0x1c>
 800f088:	b672      	cpsid	i
 800f08a:	e7fe      	b.n	800f08a <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f08c:	3b01      	subs	r3, #1
 800f08e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f090:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f092:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f094:	428a      	cmp	r2, r1
 800f096:	d01d      	beq.n	800f0d4 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800f098:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d119      	bne.n	800f0d2 <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f09e:	1d25      	adds	r5, r4, #4
 800f0a0:	0028      	movs	r0, r5
 800f0a2:	f7fe fefb 	bl	800de9c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f0a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f0a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0aa:	2207      	movs	r2, #7
 800f0ac:	1ad2      	subs	r2, r2, r3
 800f0ae:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f0b0:	4a0a      	ldr	r2, [pc, #40]	; (800f0dc <xTaskPriorityDisinherit+0x6c>)
 800f0b2:	6812      	ldr	r2, [r2, #0]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d901      	bls.n	800f0bc <xTaskPriorityDisinherit+0x4c>
 800f0b8:	4a08      	ldr	r2, [pc, #32]	; (800f0dc <xTaskPriorityDisinherit+0x6c>)
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	0098      	lsls	r0, r3, #2
 800f0be:	18c0      	adds	r0, r0, r3
 800f0c0:	0080      	lsls	r0, r0, #2
 800f0c2:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <xTaskPriorityDisinherit+0x70>)
 800f0c4:	18c0      	adds	r0, r0, r3
 800f0c6:	0029      	movs	r1, r5
 800f0c8:	f7fe fec6 	bl	800de58 <vListInsertEnd>
					xReturn = pdTRUE;
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e000      	b.n	800f0d2 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800f0d0:	2000      	movs	r0, #0
	}
 800f0d2:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	e7fc      	b.n	800f0d2 <xTaskPriorityDisinherit+0x62>
 800f0d8:	20001c68 	.word	0x20001c68
 800f0dc:	20001d18 	.word	0x20001d18
 800f0e0:	20001c74 	.word	0x20001c74

0800f0e4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0e6:	46ce      	mov	lr, r9
 800f0e8:	4647      	mov	r7, r8
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b085      	sub	sp, #20
 800f0ee:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f0f4:	4b30      	ldr	r3, [pc, #192]	; (800f1b8 <vTaskList+0xd4>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	0140      	lsls	r0, r0, #5
 800f0fe:	f000 fc45 	bl	800f98c <pvPortMalloc>
 800f102:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f104:	d053      	beq.n	800f1ae <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f106:	9903      	ldr	r1, [sp, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	f7ff fdc9 	bl	800eca0 <uxTaskGetSystemState>
 800f10e:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f110:	2300      	movs	r3, #0
 800f112:	9302      	str	r3, [sp, #8]
 800f114:	9a02      	ldr	r2, [sp, #8]
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d245      	bcs.n	800f1a8 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f11c:	2343      	movs	r3, #67	; 0x43
 800f11e:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f120:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f122:	4b26      	ldr	r3, [pc, #152]	; (800f1bc <vTaskList+0xd8>)
 800f124:	4699      	mov	r9, r3
 800f126:	e02a      	b.n	800f17e <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f128:	3a02      	subs	r2, #2
 800f12a:	1e53      	subs	r3, r2, #1
 800f12c:	419a      	sbcs	r2, r3
 800f12e:	4256      	negs	r6, r2
 800f130:	43be      	bics	r6, r7
 800f132:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f134:	9b02      	ldr	r3, [sp, #8]
 800f136:	015b      	lsls	r3, r3, #5
 800f138:	18eb      	adds	r3, r5, r3
 800f13a:	6859      	ldr	r1, [r3, #4]
 800f13c:	0020      	movs	r0, r4
 800f13e:	f7ff fa91 	bl	800e664 <prvWriteNameToBuffer>
 800f142:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f144:	9b02      	ldr	r3, [sp, #8]
 800f146:	9a02      	ldr	r2, [sp, #8]
 800f148:	9902      	ldr	r1, [sp, #8]
 800f14a:	015b      	lsls	r3, r3, #5
 800f14c:	18eb      	adds	r3, r5, r3
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	0149      	lsls	r1, r1, #5
 800f152:	1869      	adds	r1, r5, r1
 800f154:	6889      	ldr	r1, [r1, #8]
 800f156:	9101      	str	r1, [sp, #4]
 800f158:	0152      	lsls	r2, r2, #5
 800f15a:	18aa      	adds	r2, r5, r2
 800f15c:	8b92      	ldrh	r2, [r2, #28]
 800f15e:	9200      	str	r2, [sp, #0]
 800f160:	0032      	movs	r2, r6
 800f162:	4649      	mov	r1, r9
 800f164:	f004 fe3a 	bl	8013ddc <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f168:	0020      	movs	r0, r4
 800f16a:	f7f0 ffd5 	bl	8000118 <strlen>
 800f16e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f170:	9b02      	ldr	r3, [sp, #8]
 800f172:	3301      	adds	r3, #1
 800f174:	9302      	str	r3, [sp, #8]
 800f176:	9a02      	ldr	r2, [sp, #8]
 800f178:	9b03      	ldr	r3, [sp, #12]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d214      	bcs.n	800f1a8 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f17e:	9b02      	ldr	r3, [sp, #8]
 800f180:	015b      	lsls	r3, r3, #5
 800f182:	18eb      	adds	r3, r5, r3
 800f184:	7b1a      	ldrb	r2, [r3, #12]
 800f186:	2a03      	cmp	r2, #3
 800f188:	d00c      	beq.n	800f1a4 <vTaskList+0xc0>
 800f18a:	d803      	bhi.n	800f194 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800f18c:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f18e:	2a01      	cmp	r2, #1
 800f190:	d1ca      	bne.n	800f128 <vTaskList+0x44>
 800f192:	e7cf      	b.n	800f134 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f194:	3a04      	subs	r2, #4
 800f196:	1e53      	subs	r3, r2, #1
 800f198:	419a      	sbcs	r2, r3
 800f19a:	4256      	negs	r6, r2
 800f19c:	4643      	mov	r3, r8
 800f19e:	439e      	bics	r6, r3
 800f1a0:	3644      	adds	r6, #68	; 0x44
 800f1a2:	e7c7      	b.n	800f134 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f1a4:	2653      	movs	r6, #83	; 0x53
 800f1a6:	e7c5      	b.n	800f134 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f1a8:	0028      	movs	r0, r5
 800f1aa:	f000 fc81 	bl	800fab0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1ae:	b005      	add	sp, #20
 800f1b0:	bcc0      	pop	{r6, r7}
 800f1b2:	46b9      	mov	r9, r7
 800f1b4:	46b0      	mov	r8, r6
 800f1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b8:	20001d04 	.word	0x20001d04
 800f1bc:	0801cab0 	.word	0x0801cab0

0800f1c0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c2:	46c6      	mov	lr, r8
 800f1c4:	b500      	push	{lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f1ce:	4b2a      	ldr	r3, [pc, #168]	; (800f278 <vTaskGetRunTimeStats+0xb8>)
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f1d4:	6818      	ldr	r0, [r3, #0]
 800f1d6:	0140      	lsls	r0, r0, #5
 800f1d8:	f000 fbd8 	bl	800f98c <pvPortMalloc>
 800f1dc:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f1de:	d015      	beq.n	800f20c <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f1e0:	9903      	ldr	r1, [sp, #12]
 800f1e2:	aa01      	add	r2, sp, #4
 800f1e4:	f7ff fd5c 	bl	800eca0 <uxTaskGetSystemState>
 800f1e8:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f1ea:	9d01      	ldr	r5, [sp, #4]
 800f1ec:	2164      	movs	r1, #100	; 0x64
 800f1ee:	0028      	movs	r0, r5
 800f1f0:	f7f0 ffae 	bl	8000150 <__udivsi3>
 800f1f4:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f1f6:	2d63      	cmp	r5, #99	; 0x63
 800f1f8:	d905      	bls.n	800f206 <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	9302      	str	r3, [sp, #8]
 800f1fe:	9a02      	ldr	r2, [sp, #8]
 800f200:	9b03      	ldr	r3, [sp, #12]
 800f202:	429a      	cmp	r2, r3
 800f204:	d318      	bcc.n	800f238 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f206:	0038      	movs	r0, r7
 800f208:	f000 fc52 	bl	800fab0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f20c:	b004      	add	sp, #16
 800f20e:	bc80      	pop	{r7}
 800f210:	46b8      	mov	r8, r7
 800f212:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f214:	9b02      	ldr	r3, [sp, #8]
 800f216:	015b      	lsls	r3, r3, #5
 800f218:	18fb      	adds	r3, r7, r3
 800f21a:	699a      	ldr	r2, [r3, #24]
 800f21c:	4917      	ldr	r1, [pc, #92]	; (800f27c <vTaskGetRunTimeStats+0xbc>)
 800f21e:	f004 fddd 	bl	8013ddc <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f222:	0020      	movs	r0, r4
 800f224:	f7f0 ff78 	bl	8000118 <strlen>
 800f228:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f22a:	9b02      	ldr	r3, [sp, #8]
 800f22c:	3301      	adds	r3, #1
 800f22e:	9302      	str	r3, [sp, #8]
 800f230:	9a02      	ldr	r2, [sp, #8]
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	429a      	cmp	r2, r3
 800f236:	d2e6      	bcs.n	800f206 <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f238:	9b02      	ldr	r3, [sp, #8]
 800f23a:	015b      	lsls	r3, r3, #5
 800f23c:	18fb      	adds	r3, r7, r3
 800f23e:	699e      	ldr	r6, [r3, #24]
 800f240:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f242:	9b02      	ldr	r3, [sp, #8]
 800f244:	015b      	lsls	r3, r3, #5
 800f246:	18fb      	adds	r3, r7, r3
 800f248:	6859      	ldr	r1, [r3, #4]
 800f24a:	0020      	movs	r0, r4
 800f24c:	f7ff fa0a 	bl	800e664 <prvWriteNameToBuffer>
 800f250:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f252:	42ae      	cmp	r6, r5
 800f254:	d3de      	bcc.n	800f214 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f256:	9b02      	ldr	r3, [sp, #8]
 800f258:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f25a:	0029      	movs	r1, r5
 800f25c:	0030      	movs	r0, r6
 800f25e:	f7f0 ff77 	bl	8000150 <__udivsi3>
 800f262:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f264:	4642      	mov	r2, r8
 800f266:	0152      	lsls	r2, r2, #5
 800f268:	18ba      	adds	r2, r7, r2
 800f26a:	6992      	ldr	r2, [r2, #24]
 800f26c:	4904      	ldr	r1, [pc, #16]	; (800f280 <vTaskGetRunTimeStats+0xc0>)
 800f26e:	0020      	movs	r0, r4
 800f270:	f004 fdb4 	bl	8013ddc <sprintf>
 800f274:	e7d5      	b.n	800f222 <vTaskGetRunTimeStats+0x62>
 800f276:	46c0      	nop			; (mov r8, r8)
 800f278:	20001d04 	.word	0x20001d04
 800f27c:	0801cacc 	.word	0x0801cacc
 800f280:	0801cac0 	.word	0x0801cac0

0800f284 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f284:	4b05      	ldr	r3, [pc, #20]	; (800f29c <pvTaskIncrementMutexHeldCount+0x18>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <pvTaskIncrementMutexHeldCount+0x18>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f292:	3301      	adds	r3, #1
 800f294:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f296:	4b01      	ldr	r3, [pc, #4]	; (800f29c <pvTaskIncrementMutexHeldCount+0x18>)
 800f298:	6818      	ldr	r0, [r3, #0]
	}
 800f29a:	4770      	bx	lr
 800f29c:	20001c68 	.word	0x20001c68

0800f2a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	0004      	movs	r4, r0
 800f2a4:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f2a6:	f000 faef 	bl	800f888 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f2aa:	4b20      	ldr	r3, [pc, #128]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f2b4:	4b1d      	ldr	r3, [pc, #116]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	235c      	movs	r3, #92	; 0x5c
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	d117      	bne.n	800f2f2 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2c2:	f000 faed 	bl	800f8a0 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f2c6:	f000 fadf 	bl	800f888 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f2ca:	4b18      	ldr	r3, [pc, #96]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f2d0:	2d00      	cmp	r5, #0
 800f2d2:	d005      	beq.n	800f2e0 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800f2d4:	2c00      	cmp	r4, #0
 800f2d6:	d022      	beq.n	800f31e <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f2d8:	4b14      	ldr	r3, [pc, #80]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f2e0:	4b12      	ldr	r3, [pc, #72]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	235c      	movs	r3, #92	; 0x5c
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f2ea:	f000 fad9 	bl	800f8a0 <vPortExitCritical>

		return ulReturn;
	}
 800f2ee:	0028      	movs	r0, r5
 800f2f0:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f2f2:	4b0e      	ldr	r3, [pc, #56]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	3004      	adds	r0, #4
 800f2f8:	f7fe fdd0 	bl	800de9c <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f2fc:	1c6b      	adds	r3, r5, #1
 800f2fe:	d007      	beq.n	800f310 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800f300:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <ulTaskNotifyTake+0x90>)
 800f302:	6818      	ldr	r0, [r3, #0]
 800f304:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f306:	f7ff f983 	bl	800e610 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f30a:	f000 fab1 	bl	800f870 <vPortYield>
 800f30e:	e7d8      	b.n	800f2c2 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f310:	4b06      	ldr	r3, [pc, #24]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f312:	6819      	ldr	r1, [r3, #0]
 800f314:	3104      	adds	r1, #4
 800f316:	4807      	ldr	r0, [pc, #28]	; (800f334 <ulTaskNotifyTake+0x94>)
 800f318:	f7fe fd9e 	bl	800de58 <vListInsertEnd>
 800f31c:	e7f5      	b.n	800f30a <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800f31e:	4b03      	ldr	r3, [pc, #12]	; (800f32c <ulTaskNotifyTake+0x8c>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f324:	3b01      	subs	r3, #1
 800f326:	6593      	str	r3, [r2, #88]	; 0x58
 800f328:	e7da      	b.n	800f2e0 <ulTaskNotifyTake+0x40>
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	20001c68 	.word	0x20001c68
 800f330:	20001d88 	.word	0x20001d88
 800f334:	20001d60 	.word	0x20001d60

0800f338 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	0004      	movs	r4, r0
 800f33c:	000e      	movs	r6, r1
 800f33e:	0015      	movs	r5, r2
 800f340:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800f342:	2800      	cmp	r0, #0
 800f344:	d015      	beq.n	800f372 <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f346:	f000 fa9f 	bl	800f888 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f34a:	2f00      	cmp	r7, #0
 800f34c:	d001      	beq.n	800f352 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f34e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f350:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f352:	225c      	movs	r2, #92	; 0x5c
 800f354:	5ca3      	ldrb	r3, [r4, r2]
 800f356:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f358:	2102      	movs	r1, #2
 800f35a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f35c:	2d03      	cmp	r5, #3
 800f35e:	d01a      	beq.n	800f396 <xTaskGenericNotify+0x5e>
 800f360:	d809      	bhi.n	800f376 <xTaskGenericNotify+0x3e>
 800f362:	2d01      	cmp	r5, #1
 800f364:	d00d      	beq.n	800f382 <xTaskGenericNotify+0x4a>
 800f366:	2d02      	cmp	r5, #2
 800f368:	d10e      	bne.n	800f388 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f36a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f36c:	3201      	adds	r2, #1
 800f36e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f370:	e00a      	b.n	800f388 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 800f372:	b672      	cpsid	i
 800f374:	e7fe      	b.n	800f374 <xTaskGenericNotify+0x3c>
			switch( eAction )
 800f376:	2d04      	cmp	r5, #4
 800f378:	d106      	bne.n	800f388 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d02f      	beq.n	800f3de <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f37e:	65a6      	str	r6, [r4, #88]	; 0x58
 800f380:	e002      	b.n	800f388 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 800f382:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f384:	4316      	orrs	r6, r2
 800f386:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f388:	2501      	movs	r5, #1
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d005      	beq.n	800f39a <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f38e:	f000 fa87 	bl	800f8a0 <vPortExitCritical>

		return xReturn;
	}
 800f392:	0028      	movs	r0, r5
 800f394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 800f396:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f398:	e7f6      	b.n	800f388 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f39a:	1d25      	adds	r5, r4, #4
 800f39c:	0028      	movs	r0, r5
 800f39e:	f7fe fd7d 	bl	800de9c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f3a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3a4:	4a0f      	ldr	r2, [pc, #60]	; (800f3e4 <xTaskGenericNotify+0xac>)
 800f3a6:	6812      	ldr	r2, [r2, #0]
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d901      	bls.n	800f3b0 <xTaskGenericNotify+0x78>
 800f3ac:	4a0d      	ldr	r2, [pc, #52]	; (800f3e4 <xTaskGenericNotify+0xac>)
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	0098      	lsls	r0, r3, #2
 800f3b2:	18c0      	adds	r0, r0, r3
 800f3b4:	0080      	lsls	r0, r0, #2
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <xTaskGenericNotify+0xb0>)
 800f3b8:	18c0      	adds	r0, r0, r3
 800f3ba:	0029      	movs	r1, r5
 800f3bc:	f7fe fd4c 	bl	800de58 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f3c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <xTaskGenericNotify+0x92>
 800f3c6:	b672      	cpsid	i
 800f3c8:	e7fe      	b.n	800f3c8 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3ca:	4b08      	ldr	r3, [pc, #32]	; (800f3ec <xTaskGenericNotify+0xb4>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d2:	2501      	movs	r5, #1
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d9da      	bls.n	800f38e <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 800f3d8:	f000 fa4a 	bl	800f870 <vPortYield>
 800f3dc:	e7d7      	b.n	800f38e <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 800f3de:	2500      	movs	r5, #0
 800f3e0:	e7d5      	b.n	800f38e <xTaskGenericNotify+0x56>
 800f3e2:	46c0      	nop			; (mov r8, r8)
 800f3e4:	20001d18 	.word	0x20001d18
 800f3e8:	20001c74 	.word	0x20001c74
 800f3ec:	20001c68 	.word	0x20001c68

0800f3f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3f4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3f6:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3f8:	4291      	cmp	r1, r2
 800f3fa:	d80c      	bhi.n	800f416 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f3fc:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3fe:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f400:	69a3      	ldr	r3, [r4, #24]
 800f402:	429a      	cmp	r2, r3
 800f404:	d300      	bcc.n	800f408 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f406:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f408:	1d21      	adds	r1, r4, #4
 800f40a:	4b09      	ldr	r3, [pc, #36]	; (800f430 <prvInsertTimerInActiveList+0x40>)
 800f40c:	6818      	ldr	r0, [r3, #0]
 800f40e:	f7fe fd2e 	bl	800de6e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f412:	2000      	movs	r0, #0
 800f414:	e7f7      	b.n	800f406 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f416:	429a      	cmp	r2, r3
 800f418:	d202      	bcs.n	800f420 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800f41a:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f41c:	4299      	cmp	r1, r3
 800f41e:	d2f2      	bcs.n	800f406 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f420:	1d21      	adds	r1, r4, #4
 800f422:	4b04      	ldr	r3, [pc, #16]	; (800f434 <prvInsertTimerInActiveList+0x44>)
 800f424:	6818      	ldr	r0, [r3, #0]
 800f426:	f7fe fd22 	bl	800de6e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f42a:	2000      	movs	r0, #0
 800f42c:	e7eb      	b.n	800f406 <prvInsertTimerInActiveList+0x16>
 800f42e:	46c0      	nop			; (mov r8, r8)
 800f430:	20001d94 	.word	0x20001d94
 800f434:	20001d90 	.word	0x20001d90

0800f438 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f438:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f43a:	f000 fa25 	bl	800f888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f43e:	4b11      	ldr	r3, [pc, #68]	; (800f484 <prvCheckForValidListAndQueue+0x4c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f446:	f000 fa2b 	bl	800f8a0 <vPortExitCritical>
}
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f44c:	4d0e      	ldr	r5, [pc, #56]	; (800f488 <prvCheckForValidListAndQueue+0x50>)
 800f44e:	0028      	movs	r0, r5
 800f450:	f7fe fcf4 	bl	800de3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f454:	4c0d      	ldr	r4, [pc, #52]	; (800f48c <prvCheckForValidListAndQueue+0x54>)
 800f456:	0020      	movs	r0, r4
 800f458:	f7fe fcf0 	bl	800de3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f45c:	4b0c      	ldr	r3, [pc, #48]	; (800f490 <prvCheckForValidListAndQueue+0x58>)
 800f45e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f460:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <prvCheckForValidListAndQueue+0x5c>)
 800f462:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f464:	2200      	movs	r2, #0
 800f466:	2110      	movs	r1, #16
 800f468:	2004      	movs	r0, #4
 800f46a:	f7fe fdec 	bl	800e046 <xQueueGenericCreate>
 800f46e:	4b05      	ldr	r3, [pc, #20]	; (800f484 <prvCheckForValidListAndQueue+0x4c>)
 800f470:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800f472:	2800      	cmp	r0, #0
 800f474:	d003      	beq.n	800f47e <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f476:	4908      	ldr	r1, [pc, #32]	; (800f498 <prvCheckForValidListAndQueue+0x60>)
 800f478:	f7ff f828 	bl	800e4cc <vQueueAddToRegistry>
 800f47c:	e7e3      	b.n	800f446 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800f47e:	b672      	cpsid	i
 800f480:	e7fe      	b.n	800f480 <prvCheckForValidListAndQueue+0x48>
 800f482:	46c0      	nop			; (mov r8, r8)
 800f484:	20001dc4 	.word	0x20001dc4
 800f488:	20001d98 	.word	0x20001d98
 800f48c:	20001dac 	.word	0x20001dac
 800f490:	20001d90 	.word	0x20001d90
 800f494:	20001d94 	.word	0x20001d94
 800f498:	0801caec 	.word	0x0801caec

0800f49c <xTimerCreateTimerTask>:
{
 800f49c:	b500      	push	{lr}
 800f49e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f4a0:	f7ff ffca 	bl	800f438 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f4a4:	4b0a      	ldr	r3, [pc, #40]	; (800f4d0 <xTimerCreateTimerTask+0x34>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00d      	beq.n	800f4c8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	9303      	str	r3, [sp, #12]
 800f4b0:	9302      	str	r3, [sp, #8]
 800f4b2:	9301      	str	r3, [sp, #4]
 800f4b4:	3303      	adds	r3, #3
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	22a0      	movs	r2, #160	; 0xa0
 800f4bc:	4905      	ldr	r1, [pc, #20]	; (800f4d4 <xTimerCreateTimerTask+0x38>)
 800f4be:	4806      	ldr	r0, [pc, #24]	; (800f4d8 <xTimerCreateTimerTask+0x3c>)
 800f4c0:	f7ff f8e6 	bl	800e690 <xTaskGenericCreate>
	configASSERT( xReturn );
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d101      	bne.n	800f4cc <xTimerCreateTimerTask+0x30>
 800f4c8:	b672      	cpsid	i
 800f4ca:	e7fe      	b.n	800f4ca <xTimerCreateTimerTask+0x2e>
}
 800f4cc:	b005      	add	sp, #20
 800f4ce:	bd00      	pop	{pc}
 800f4d0:	20001dc4 	.word	0x20001dc4
 800f4d4:	0801caf4 	.word	0x0801caf4
 800f4d8:	0800f625 	.word	0x0800f625

0800f4dc <xTimerCreate>:
{
 800f4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4de:	46c6      	mov	lr, r8
 800f4e0:	b500      	push	{lr}
 800f4e2:	4680      	mov	r8, r0
 800f4e4:	000d      	movs	r5, r1
 800f4e6:	0017      	movs	r7, r2
 800f4e8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f4ea:	2900      	cmp	r1, #0
 800f4ec:	d014      	beq.n	800f518 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f4ee:	202c      	movs	r0, #44	; 0x2c
 800f4f0:	f000 fa4c 	bl	800f98c <pvPortMalloc>
 800f4f4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f4f6:	d00b      	beq.n	800f510 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f4f8:	f7ff ff9e 	bl	800f438 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f4fc:	4643      	mov	r3, r8
 800f4fe:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f500:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f502:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f504:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f506:	9b06      	ldr	r3, [sp, #24]
 800f508:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f50a:	1d20      	adds	r0, r4, #4
 800f50c:	f7fe fca1 	bl	800de52 <vListInitialiseItem>
}
 800f510:	0020      	movs	r0, r4
 800f512:	bc80      	pop	{r7}
 800f514:	46b8      	mov	r8, r7
 800f516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f518:	b672      	cpsid	i
 800f51a:	e7fe      	b.n	800f51a <xTimerCreate+0x3e>

0800f51c <xTimerGenericCommand>:
{
 800f51c:	b530      	push	{r4, r5, lr}
 800f51e:	b085      	sub	sp, #20
 800f520:	0004      	movs	r4, r0
 800f522:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f524:	4b12      	ldr	r3, [pc, #72]	; (800f570 <xTimerGenericCommand+0x54>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	2800      	cmp	r0, #0
 800f52a:	d01f      	beq.n	800f56c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f52c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f52e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f530:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f532:	2905      	cmp	r1, #5
 800f534:	dc13      	bgt.n	800f55e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f536:	f7ff fd4d 	bl	800efd4 <xTaskGetSchedulerState>
 800f53a:	2802      	cmp	r0, #2
 800f53c:	d007      	beq.n	800f54e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f53e:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <xTimerGenericCommand+0x54>)
 800f540:	6818      	ldr	r0, [r3, #0]
 800f542:	2300      	movs	r3, #0
 800f544:	2200      	movs	r2, #0
 800f546:	4669      	mov	r1, sp
 800f548:	f7fe fdb6 	bl	800e0b8 <xQueueGenericSend>
 800f54c:	e00c      	b.n	800f568 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f54e:	4b08      	ldr	r3, [pc, #32]	; (800f570 <xTimerGenericCommand+0x54>)
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	2300      	movs	r3, #0
 800f554:	9a08      	ldr	r2, [sp, #32]
 800f556:	4669      	mov	r1, sp
 800f558:	f7fe fdae 	bl	800e0b8 <xQueueGenericSend>
 800f55c:	e004      	b.n	800f568 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f55e:	2300      	movs	r3, #0
 800f560:	002a      	movs	r2, r5
 800f562:	4669      	mov	r1, sp
 800f564:	f7fe fe44 	bl	800e1f0 <xQueueGenericSendFromISR>
}
 800f568:	b005      	add	sp, #20
 800f56a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f56c:	2000      	movs	r0, #0
	return xReturn;
 800f56e:	e7fb      	b.n	800f568 <xTimerGenericCommand+0x4c>
 800f570:	20001dc4 	.word	0x20001dc4

0800f574 <prvSampleTimeNow>:
{
 800f574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f576:	46d6      	mov	lr, sl
 800f578:	464f      	mov	r7, r9
 800f57a:	4646      	mov	r6, r8
 800f57c:	b5c0      	push	{r6, r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f582:	f7ff fa1f 	bl	800e9c4 <xTaskGetTickCount>
 800f586:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f588:	4b23      	ldr	r3, [pc, #140]	; (800f618 <prvSampleTimeNow+0xa4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4283      	cmp	r3, r0
 800f58e:	d80a      	bhi.n	800f5a6 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 800f590:	2300      	movs	r3, #0
 800f592:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f594:	4b20      	ldr	r3, [pc, #128]	; (800f618 <prvSampleTimeNow+0xa4>)
 800f596:	601c      	str	r4, [r3, #0]
}
 800f598:	0020      	movs	r0, r4
 800f59a:	b004      	add	sp, #16
 800f59c:	bce0      	pop	{r5, r6, r7}
 800f59e:	46ba      	mov	sl, r7
 800f5a0:	46b1      	mov	r9, r6
 800f5a2:	46a8      	mov	r8, r5
 800f5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5a6:	4b1d      	ldr	r3, [pc, #116]	; (800f61c <prvSampleTimeNow+0xa8>)
 800f5a8:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5ae:	4643      	mov	r3, r8
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	2a00      	cmp	r2, #0
 800f5b6:	d026      	beq.n	800f606 <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5be:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5c0:	1d2f      	adds	r7, r5, #4
 800f5c2:	0038      	movs	r0, r7
 800f5c4:	f7fe fc6a 	bl	800de9c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5c8:	0028      	movs	r0, r5
 800f5ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5cc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f5ce:	69eb      	ldr	r3, [r5, #28]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d1ec      	bne.n	800f5ae <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5d4:	69ab      	ldr	r3, [r5, #24]
 800f5d6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f5d8:	459a      	cmp	sl, r3
 800f5da:	d209      	bcs.n	800f5f0 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5dc:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5de:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5e0:	4b0e      	ldr	r3, [pc, #56]	; (800f61c <prvSampleTimeNow+0xa8>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	0039      	movs	r1, r7
 800f5e8:	0018      	movs	r0, r3
 800f5ea:	f7fe fc40 	bl	800de6e <vListInsert>
 800f5ee:	e7de      	b.n	800f5ae <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	4649      	mov	r1, r9
 800f5f8:	0028      	movs	r0, r5
 800f5fa:	f7ff ff8f 	bl	800f51c <xTimerGenericCommand>
				configASSERT( xResult );
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d1d5      	bne.n	800f5ae <prvSampleTimeNow+0x3a>
 800f602:	b672      	cpsid	i
 800f604:	e7fe      	b.n	800f604 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 800f606:	4a06      	ldr	r2, [pc, #24]	; (800f620 <prvSampleTimeNow+0xac>)
 800f608:	4904      	ldr	r1, [pc, #16]	; (800f61c <prvSampleTimeNow+0xa8>)
 800f60a:	6810      	ldr	r0, [r2, #0]
 800f60c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f60e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f610:	2301      	movs	r3, #1
 800f612:	6033      	str	r3, [r6, #0]
 800f614:	e7be      	b.n	800f594 <prvSampleTimeNow+0x20>
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	20001dc0 	.word	0x20001dc0
 800f61c:	20001d90 	.word	0x20001d90
 800f620:	20001d94 	.word	0x20001d94

0800f624 <prvTimerTask>:
{
 800f624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f626:	b08d      	sub	sp, #52	; 0x34
 800f628:	4d57      	ldr	r5, [pc, #348]	; (800f788 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f62a:	4b58      	ldr	r3, [pc, #352]	; (800f78c <prvTimerTask+0x168>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f630:	2e00      	cmp	r6, #0
 800f632:	d100      	bne.n	800f636 <prvTimerTask+0x12>
 800f634:	e09b      	b.n	800f76e <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800f63a:	f7ff f9bb 	bl	800e9b4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f63e:	a808      	add	r0, sp, #32
 800f640:	f7ff ff98 	bl	800f574 <prvSampleTimeNow>
 800f644:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f646:	9b08      	ldr	r3, [sp, #32]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d000      	beq.n	800f64e <prvTimerTask+0x2a>
 800f64c:	e099      	b.n	800f782 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f64e:	4286      	cmp	r6, r0
 800f650:	d90a      	bls.n	800f668 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f652:	1b31      	subs	r1, r6, r4
 800f654:	4b4e      	ldr	r3, [pc, #312]	; (800f790 <prvTimerTask+0x16c>)
 800f656:	6818      	ldr	r0, [r3, #0]
 800f658:	f7fe ff4c 	bl	800e4f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f65c:	f7ff fa52 	bl	800eb04 <xTaskResumeAll>
 800f660:	2800      	cmp	r0, #0
 800f662:	d025      	beq.n	800f6b0 <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f664:	4c4a      	ldr	r4, [pc, #296]	; (800f790 <prvTimerTask+0x16c>)
}
 800f666:	e033      	b.n	800f6d0 <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 800f668:	f7ff fa4c 	bl	800eb04 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f66c:	4b47      	ldr	r3, [pc, #284]	; (800f78c <prvTimerTask+0x168>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f674:	1d38      	adds	r0, r7, #4
 800f676:	f7fe fc11 	bl	800de9c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d003      	beq.n	800f688 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	0038      	movs	r0, r7
 800f684:	4798      	blx	r3
}
 800f686:	e7ed      	b.n	800f664 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	18f1      	adds	r1, r6, r3
 800f68c:	0033      	movs	r3, r6
 800f68e:	0022      	movs	r2, r4
 800f690:	0038      	movs	r0, r7
 800f692:	f7ff fead 	bl	800f3f0 <prvInsertTimerInActiveList>
 800f696:	2801      	cmp	r0, #1
 800f698:	d1f2      	bne.n	800f680 <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f69a:	2100      	movs	r1, #0
 800f69c:	9100      	str	r1, [sp, #0]
 800f69e:	000b      	movs	r3, r1
 800f6a0:	0032      	movs	r2, r6
 800f6a2:	0038      	movs	r0, r7
 800f6a4:	f7ff ff3a 	bl	800f51c <xTimerGenericCommand>
			configASSERT( xResult );
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d1e9      	bne.n	800f680 <prvTimerTask+0x5c>
 800f6ac:	b672      	cpsid	i
 800f6ae:	e7fe      	b.n	800f6ae <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 800f6b0:	f000 f8de 	bl	800f870 <vPortYield>
 800f6b4:	e7d6      	b.n	800f664 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6b8:	9303      	str	r3, [sp, #12]
 800f6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6bc:	9304      	str	r3, [sp, #16]
 800f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c0:	9305      	str	r3, [sp, #20]
 800f6c2:	9903      	ldr	r1, [sp, #12]
 800f6c4:	9804      	ldr	r0, [sp, #16]
 800f6c6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f6c8:	9b08      	ldr	r3, [sp, #32]
 800f6ca:	9303      	str	r3, [sp, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	da0b      	bge.n	800f6e8 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	a908      	add	r1, sp, #32
 800f6d6:	6820      	ldr	r0, [r4, #0]
 800f6d8:	f7fe fe0e 	bl	800e2f8 <xQueueGenericReceive>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d0a4      	beq.n	800f62a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f6e0:	9b08      	ldr	r3, [sp, #32]
 800f6e2:	9303      	str	r3, [sp, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dbe6      	blt.n	800f6b6 <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f6ea:	6973      	ldr	r3, [r6, #20]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d002      	beq.n	800f6f6 <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6f0:	1d30      	adds	r0, r6, #4
 800f6f2:	f7fe fbd3 	bl	800de9c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6f6:	a807      	add	r0, sp, #28
 800f6f8:	f7ff ff3c 	bl	800f574 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	9303      	str	r3, [sp, #12]
 800f700:	2b09      	cmp	r3, #9
 800f702:	d8e5      	bhi.n	800f6d0 <prvTimerTask+0xac>
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	58eb      	ldr	r3, [r5, r3]
 800f708:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70c:	69b2      	ldr	r2, [r6, #24]
 800f70e:	4694      	mov	ip, r2
 800f710:	4463      	add	r3, ip
 800f712:	0019      	movs	r1, r3
 800f714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f716:	0002      	movs	r2, r0
 800f718:	0030      	movs	r0, r6
 800f71a:	f7ff fe69 	bl	800f3f0 <prvInsertTimerInActiveList>
 800f71e:	2801      	cmp	r0, #1
 800f720:	d1d6      	bne.n	800f6d0 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f722:	0030      	movs	r0, r6
 800f724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f726:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f728:	69f3      	ldr	r3, [r6, #28]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d1d0      	bne.n	800f6d0 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f730:	69b1      	ldr	r1, [r6, #24]
 800f732:	468c      	mov	ip, r1
 800f734:	4463      	add	r3, ip
 800f736:	001a      	movs	r2, r3
 800f738:	2300      	movs	r3, #0
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	2100      	movs	r1, #0
 800f73e:	0030      	movs	r0, r6
 800f740:	f7ff feec 	bl	800f51c <xTimerGenericCommand>
							configASSERT( xResult );
 800f744:	2800      	cmp	r0, #0
 800f746:	d1c3      	bne.n	800f6d0 <prvTimerTask+0xac>
 800f748:	b672      	cpsid	i
 800f74a:	e7fe      	b.n	800f74a <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f74e:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f750:	2900      	cmp	r1, #0
 800f752:	d006      	beq.n	800f762 <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f754:	1841      	adds	r1, r0, r1
 800f756:	0003      	movs	r3, r0
 800f758:	0002      	movs	r2, r0
 800f75a:	0030      	movs	r0, r6
 800f75c:	f7ff fe48 	bl	800f3f0 <prvInsertTimerInActiveList>
					break;
 800f760:	e7b6      	b.n	800f6d0 <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f762:	b672      	cpsid	i
 800f764:	e7fe      	b.n	800f764 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 800f766:	0030      	movs	r0, r6
 800f768:	f000 f9a2 	bl	800fab0 <vPortFree>
					break;
 800f76c:	e7b0      	b.n	800f6d0 <prvTimerTask+0xac>
	vTaskSuspendAll();
 800f76e:	f7ff f921 	bl	800e9b4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f772:	a808      	add	r0, sp, #32
 800f774:	f7ff fefe 	bl	800f574 <prvSampleTimeNow>
 800f778:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f77a:	9b08      	ldr	r3, [sp, #32]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d100      	bne.n	800f782 <prvTimerTask+0x15e>
 800f780:	e767      	b.n	800f652 <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 800f782:	f7ff f9bf 	bl	800eb04 <xTaskResumeAll>
 800f786:	e76d      	b.n	800f664 <prvTimerTask+0x40>
 800f788:	0801cafc 	.word	0x0801cafc
 800f78c:	20001d90 	.word	0x20001d90
 800f790:	20001dc4 	.word	0x20001dc4

0800f794 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f794:	b510      	push	{r4, lr}
 800f796:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f798:	f000 f876 	bl	800f888 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f79c:	6964      	ldr	r4, [r4, #20]
 800f79e:	1e63      	subs	r3, r4, #1
 800f7a0:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f7a2:	f000 f87d 	bl	800f8a0 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f7a6:	0020      	movs	r0, r4
 800f7a8:	bd10      	pop	{r4, pc}

0800f7aa <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f7aa:	b510      	push	{r4, lr}
 800f7ac:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f7ae:	d006      	beq.n	800f7be <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800f7b0:	f000 f86a 	bl	800f888 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f7b4:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f7b6:	f000 f873 	bl	800f8a0 <vPortExitCritical>

	return pvReturn;
}
 800f7ba:	0020      	movs	r0, r4
 800f7bc:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 800f7be:	b672      	cpsid	i
 800f7c0:	e7fe      	b.n	800f7c0 <pvTimerGetTimerID+0x16>
	...

0800f7c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7c4:	4b03      	ldr	r3, [pc, #12]	; (800f7d4 <prvTaskExitError+0x10>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	d001      	beq.n	800f7d0 <prvTaskExitError+0xc>
 800f7cc:	b672      	cpsid	i
 800f7ce:	e7fe      	b.n	800f7ce <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f7d0:	b672      	cpsid	i
	for( ;; );
 800f7d2:	e7fe      	b.n	800f7d2 <prvTaskExitError+0xe>
 800f7d4:	200000a8 	.word	0x200000a8

0800f7d8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f7d8:	4a06      	ldr	r2, [pc, #24]	; (800f7f4 <pxCurrentTCBConst2>)
 800f7da:	6813      	ldr	r3, [r2, #0]
 800f7dc:	6818      	ldr	r0, [r3, #0]
 800f7de:	3020      	adds	r0, #32
 800f7e0:	f380 8809 	msr	PSP, r0
 800f7e4:	2002      	movs	r0, #2
 800f7e6:	f380 8814 	msr	CONTROL, r0
 800f7ea:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f7ec:	46ae      	mov	lr, r5
 800f7ee:	b662      	cpsie	i
 800f7f0:	bd00      	pop	{pc}
 800f7f2:	46c0      	nop			; (mov r8, r8)

0800f7f4 <pxCurrentTCBConst2>:
 800f7f4:	20001c68 	.word	0x20001c68

0800f7f8 <pxPortInitialiseStack>:
{
 800f7f8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7fa:	1f03      	subs	r3, r0, #4
 800f7fc:	2480      	movs	r4, #128	; 0x80
 800f7fe:	0464      	lsls	r4, r4, #17
 800f800:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f802:	3b04      	subs	r3, #4
 800f804:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f806:	3b04      	subs	r3, #4
 800f808:	4902      	ldr	r1, [pc, #8]	; (800f814 <pxPortInitialiseStack+0x1c>)
 800f80a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f80c:	3b14      	subs	r3, #20
 800f80e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f810:	3840      	subs	r0, #64	; 0x40
}
 800f812:	bd10      	pop	{r4, pc}
 800f814:	0800f7c5 	.word	0x0800f7c5

0800f818 <SVC_Handler>:
}
 800f818:	4770      	bx	lr
	...

0800f81c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f81c:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f81e:	4b0f      	ldr	r3, [pc, #60]	; (800f85c <xPortStartScheduler+0x40>)
 800f820:	6819      	ldr	r1, [r3, #0]
 800f822:	22ff      	movs	r2, #255	; 0xff
 800f824:	0412      	lsls	r2, r2, #16
 800f826:	430a      	orrs	r2, r1
 800f828:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f82a:	6819      	ldr	r1, [r3, #0]
 800f82c:	22ff      	movs	r2, #255	; 0xff
 800f82e:	0612      	lsls	r2, r2, #24
 800f830:	430a      	orrs	r2, r1
 800f832:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f834:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <xPortStartScheduler+0x44>)
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	21fa      	movs	r1, #250	; 0xfa
 800f83a:	0089      	lsls	r1, r1, #2
 800f83c:	f7f0 fc88 	bl	8000150 <__udivsi3>
 800f840:	3801      	subs	r0, #1
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <xPortStartScheduler+0x48>)
 800f844:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f846:	4b08      	ldr	r3, [pc, #32]	; (800f868 <xPortStartScheduler+0x4c>)
 800f848:	2207      	movs	r2, #7
 800f84a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f84c:	4b07      	ldr	r3, [pc, #28]	; (800f86c <xPortStartScheduler+0x50>)
 800f84e:	2200      	movs	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f852:	f7ff ffc1 	bl	800f7d8 <vPortStartFirstTask>
	prvTaskExitError();
 800f856:	f7ff ffb5 	bl	800f7c4 <prvTaskExitError>
 800f85a:	46c0      	nop			; (mov r8, r8)
 800f85c:	e000ed20 	.word	0xe000ed20
 800f860:	20000094 	.word	0x20000094
 800f864:	e000e014 	.word	0xe000e014
 800f868:	e000e010 	.word	0xe000e010
 800f86c:	200000a8 	.word	0x200000a8

0800f870 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f870:	4b04      	ldr	r3, [pc, #16]	; (800f884 <vPortYield+0x14>)
 800f872:	2280      	movs	r2, #128	; 0x80
 800f874:	0552      	lsls	r2, r2, #21
 800f876:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f878:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f87c:	f3bf 8f6f 	isb	sy
}
 800f880:	4770      	bx	lr
 800f882:	46c0      	nop			; (mov r8, r8)
 800f884:	e000ed04 	.word	0xe000ed04

0800f888 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f888:	b672      	cpsid	i
    uxCriticalNesting++;
 800f88a:	4a04      	ldr	r2, [pc, #16]	; (800f89c <vPortEnterCritical+0x14>)
 800f88c:	6813      	ldr	r3, [r2, #0]
 800f88e:	3301      	adds	r3, #1
 800f890:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f892:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f896:	f3bf 8f6f 	isb	sy
}
 800f89a:	4770      	bx	lr
 800f89c:	200000a8 	.word	0x200000a8

0800f8a0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f8a0:	4b06      	ldr	r3, [pc, #24]	; (800f8bc <vPortExitCritical+0x1c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <vPortExitCritical+0xc>
 800f8a8:	b672      	cpsid	i
 800f8aa:	e7fe      	b.n	800f8aa <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	4a03      	ldr	r2, [pc, #12]	; (800f8bc <vPortExitCritical+0x1c>)
 800f8b0:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d100      	bne.n	800f8b8 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f8b6:	b662      	cpsie	i
}
 800f8b8:	4770      	bx	lr
 800f8ba:	46c0      	nop			; (mov r8, r8)
 800f8bc:	200000a8 	.word	0x200000a8

0800f8c0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f8c0:	f3ef 8010 	mrs	r0, PRIMASK
 800f8c4:	b672      	cpsid	i
 800f8c6:	4770      	bx	lr
}
 800f8c8:	2000      	movs	r0, #0

0800f8ca <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f8ca:	f380 8810 	msr	PRIMASK, r0
 800f8ce:	4770      	bx	lr

0800f8d0 <PendSV_Handler>:
	__asm volatile
 800f8d0:	f3ef 8009 	mrs	r0, PSP
 800f8d4:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <pxCurrentTCBConst>)
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	3820      	subs	r0, #32
 800f8da:	6010      	str	r0, [r2, #0]
 800f8dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f8de:	4644      	mov	r4, r8
 800f8e0:	464d      	mov	r5, r9
 800f8e2:	4656      	mov	r6, sl
 800f8e4:	465f      	mov	r7, fp
 800f8e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f8e8:	b508      	push	{r3, lr}
 800f8ea:	b672      	cpsid	i
 800f8ec:	f7ff fa2a 	bl	800ed44 <vTaskSwitchContext>
 800f8f0:	b662      	cpsie	i
 800f8f2:	bc0c      	pop	{r2, r3}
 800f8f4:	6811      	ldr	r1, [r2, #0]
 800f8f6:	6808      	ldr	r0, [r1, #0]
 800f8f8:	3010      	adds	r0, #16
 800f8fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f8fc:	46a0      	mov	r8, r4
 800f8fe:	46a9      	mov	r9, r5
 800f900:	46b2      	mov	sl, r6
 800f902:	46bb      	mov	fp, r7
 800f904:	f380 8809 	msr	PSP, r0
 800f908:	3820      	subs	r0, #32
 800f90a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f90c:	4718      	bx	r3
 800f90e:	46c0      	nop			; (mov r8, r8)

0800f910 <pxCurrentTCBConst>:
 800f910:	20001c68 	.word	0x20001c68

0800f914 <xPortSysTickHandler>:
{
 800f914:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f916:	f7ff ffd3 	bl	800f8c0 <ulSetInterruptMaskFromISR>
 800f91a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f91c:	f7ff f85e 	bl	800e9dc <xTaskIncrementTick>
 800f920:	2800      	cmp	r0, #0
 800f922:	d003      	beq.n	800f92c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f924:	4b03      	ldr	r3, [pc, #12]	; (800f934 <xPortSysTickHandler+0x20>)
 800f926:	2280      	movs	r2, #128	; 0x80
 800f928:	0552      	lsls	r2, r2, #21
 800f92a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f92c:	0020      	movs	r0, r4
 800f92e:	f7ff ffcc 	bl	800f8ca <vClearInterruptMaskFromISR>
}
 800f932:	bd10      	pop	{r4, pc}
 800f934:	e000ed04 	.word	0xe000ed04

0800f938 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f938:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f93a:	4b12      	ldr	r3, [pc, #72]	; (800f984 <prvInsertBlockIntoFreeList+0x4c>)
 800f93c:	001a      	movs	r2, r3
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4283      	cmp	r3, r0
 800f942:	d3fb      	bcc.n	800f93c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f944:	6851      	ldr	r1, [r2, #4]
 800f946:	1854      	adds	r4, r2, r1
 800f948:	42a0      	cmp	r0, r4
 800f94a:	d008      	beq.n	800f95e <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f94c:	6841      	ldr	r1, [r0, #4]
 800f94e:	1844      	adds	r4, r0, r1
 800f950:	42a3      	cmp	r3, r4
 800f952:	d009      	beq.n	800f968 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f954:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f956:	4290      	cmp	r0, r2
 800f958:	d000      	beq.n	800f95c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f95a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f95c:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f95e:	6840      	ldr	r0, [r0, #4]
 800f960:	1841      	adds	r1, r0, r1
 800f962:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f964:	0010      	movs	r0, r2
 800f966:	e7f1      	b.n	800f94c <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f968:	4c07      	ldr	r4, [pc, #28]	; (800f988 <prvInsertBlockIntoFreeList+0x50>)
 800f96a:	6824      	ldr	r4, [r4, #0]
 800f96c:	42a3      	cmp	r3, r4
 800f96e:	d006      	beq.n	800f97e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	1859      	adds	r1, r3, r1
 800f974:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f976:	6813      	ldr	r3, [r2, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	6003      	str	r3, [r0, #0]
 800f97c:	e7eb      	b.n	800f956 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f97e:	6004      	str	r4, [r0, #0]
 800f980:	e7e9      	b.n	800f956 <prvInsertBlockIntoFreeList+0x1e>
 800f982:	46c0      	nop			; (mov r8, r8)
 800f984:	20006810 	.word	0x20006810
 800f988:	20001dc8 	.word	0x20001dc8

0800f98c <pvPortMalloc>:
{
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f990:	f7ff f810 	bl	800e9b4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f994:	4b3f      	ldr	r3, [pc, #252]	; (800fa94 <pvPortMalloc+0x108>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d015      	beq.n	800f9c8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f99c:	4b3e      	ldr	r3, [pc, #248]	; (800fa98 <pvPortMalloc+0x10c>)
 800f99e:	681e      	ldr	r6, [r3, #0]
 800f9a0:	4234      	tst	r4, r6
 800f9a2:	d135      	bne.n	800fa10 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 800f9a4:	2c00      	cmp	r4, #0
 800f9a6:	d03a      	beq.n	800fa1e <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 800f9a8:	0023      	movs	r3, r4
 800f9aa:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9ac:	0762      	lsls	r2, r4, #29
 800f9ae:	d002      	beq.n	800f9b6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9b0:	2207      	movs	r2, #7
 800f9b2:	4393      	bics	r3, r2
 800f9b4:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d031      	beq.n	800fa1e <pvPortMalloc+0x92>
 800f9ba:	4a38      	ldr	r2, [pc, #224]	; (800fa9c <pvPortMalloc+0x110>)
 800f9bc:	6815      	ldr	r5, [r2, #0]
 800f9be:	429d      	cmp	r5, r3
 800f9c0:	d330      	bcc.n	800fa24 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f9c2:	4a37      	ldr	r2, [pc, #220]	; (800faa0 <pvPortMalloc+0x114>)
 800f9c4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9c6:	e032      	b.n	800fa2e <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 800f9c8:	4a36      	ldr	r2, [pc, #216]	; (800faa4 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f9ca:	0753      	lsls	r3, r2, #29
 800f9cc:	d01e      	beq.n	800fa0c <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f9ce:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f9d0:	2307      	movs	r3, #7
 800f9d2:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f9d4:	4b34      	ldr	r3, [pc, #208]	; (800faa8 <pvPortMalloc+0x11c>)
 800f9d6:	18d3      	adds	r3, r2, r3
 800f9d8:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f9da:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f9dc:	4830      	ldr	r0, [pc, #192]	; (800faa0 <pvPortMalloc+0x114>)
 800f9de:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f9e4:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f9e6:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f9e8:	2007      	movs	r0, #7
 800f9ea:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f9ec:	4829      	ldr	r0, [pc, #164]	; (800fa94 <pvPortMalloc+0x108>)
 800f9ee:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f9f0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f9f2:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f9f4:	1a99      	subs	r1, r3, r2
 800f9f6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9f8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9fa:	4b2c      	ldr	r3, [pc, #176]	; (800faac <pvPortMalloc+0x120>)
 800f9fc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9fe:	4b27      	ldr	r3, [pc, #156]	; (800fa9c <pvPortMalloc+0x110>)
 800fa00:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa02:	4b25      	ldr	r3, [pc, #148]	; (800fa98 <pvPortMalloc+0x10c>)
 800fa04:	2280      	movs	r2, #128	; 0x80
 800fa06:	0612      	lsls	r2, r2, #24
 800fa08:	601a      	str	r2, [r3, #0]
}
 800fa0a:	e7c7      	b.n	800f99c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa0c:	4b26      	ldr	r3, [pc, #152]	; (800faa8 <pvPortMalloc+0x11c>)
 800fa0e:	e7e5      	b.n	800f9dc <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 800fa10:	f7ff f878 	bl	800eb04 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800fa14:	f7fd fb74 	bl	800d100 <vApplicationMallocFailedHook>
 800fa18:	2700      	movs	r7, #0
}
 800fa1a:	0038      	movs	r0, r7
 800fa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 800fa1e:	f7ff f871 	bl	800eb04 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fa22:	e7f7      	b.n	800fa14 <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 800fa24:	f7ff f86e 	bl	800eb04 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fa28:	e7f4      	b.n	800fa14 <pvPortMalloc+0x88>
 800fa2a:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa2c:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa2e:	6861      	ldr	r1, [r4, #4]
 800fa30:	4299      	cmp	r1, r3
 800fa32:	d202      	bcs.n	800fa3a <pvPortMalloc+0xae>
 800fa34:	6821      	ldr	r1, [r4, #0]
 800fa36:	2900      	cmp	r1, #0
 800fa38:	d1f7      	bne.n	800fa2a <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800fa3a:	4916      	ldr	r1, [pc, #88]	; (800fa94 <pvPortMalloc+0x108>)
 800fa3c:	6809      	ldr	r1, [r1, #0]
 800fa3e:	42a1      	cmp	r1, r4
 800fa40:	d00c      	beq.n	800fa5c <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa42:	6817      	ldr	r7, [r2, #0]
 800fa44:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa46:	6821      	ldr	r1, [r4, #0]
 800fa48:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa4a:	6862      	ldr	r2, [r4, #4]
 800fa4c:	1ad2      	subs	r2, r2, r3
 800fa4e:	2a10      	cmp	r2, #16
 800fa50:	d90b      	bls.n	800fa6a <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa52:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa54:	0741      	lsls	r1, r0, #29
 800fa56:	d004      	beq.n	800fa62 <pvPortMalloc+0xd6>
 800fa58:	b672      	cpsid	i
 800fa5a:	e7fe      	b.n	800fa5a <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 800fa5c:	f7ff f852 	bl	800eb04 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fa60:	e7d8      	b.n	800fa14 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa62:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa64:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fa66:	f7ff ff67 	bl	800f938 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa6a:	6862      	ldr	r2, [r4, #4]
 800fa6c:	1aad      	subs	r5, r5, r2
 800fa6e:	490b      	ldr	r1, [pc, #44]	; (800fa9c <pvPortMalloc+0x110>)
 800fa70:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa72:	490e      	ldr	r1, [pc, #56]	; (800faac <pvPortMalloc+0x120>)
 800fa74:	6809      	ldr	r1, [r1, #0]
 800fa76:	428d      	cmp	r5, r1
 800fa78:	d201      	bcs.n	800fa7e <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa7a:	490c      	ldr	r1, [pc, #48]	; (800faac <pvPortMalloc+0x120>)
 800fa7c:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa7e:	4316      	orrs	r6, r2
 800fa80:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fa86:	f7ff f83d 	bl	800eb04 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa8a:	077b      	lsls	r3, r7, #29
 800fa8c:	d0c5      	beq.n	800fa1a <pvPortMalloc+0x8e>
 800fa8e:	b672      	cpsid	i
 800fa90:	e7fe      	b.n	800fa90 <pvPortMalloc+0x104>
 800fa92:	46c0      	nop			; (mov r8, r8)
 800fa94:	20001dc8 	.word	0x20001dc8
 800fa98:	20006804 	.word	0x20006804
 800fa9c:	20006808 	.word	0x20006808
 800faa0:	20006810 	.word	0x20006810
 800faa4:	20001dcc 	.word	0x20001dcc
 800faa8:	00004a38 	.word	0x00004a38
 800faac:	2000680c 	.word	0x2000680c

0800fab0 <vPortFree>:
{
 800fab0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d020      	beq.n	800faf8 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fab6:	0003      	movs	r3, r0
 800fab8:	3b08      	subs	r3, #8
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	4a0f      	ldr	r2, [pc, #60]	; (800fafc <vPortFree+0x4c>)
 800fabe:	6812      	ldr	r2, [r2, #0]
 800fac0:	421a      	tst	r2, r3
 800fac2:	d101      	bne.n	800fac8 <vPortFree+0x18>
 800fac4:	b672      	cpsid	i
 800fac6:	e7fe      	b.n	800fac6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fac8:	0001      	movs	r1, r0
 800faca:	3908      	subs	r1, #8
 800facc:	6809      	ldr	r1, [r1, #0]
 800face:	2900      	cmp	r1, #0
 800fad0:	d001      	beq.n	800fad6 <vPortFree+0x26>
 800fad2:	b672      	cpsid	i
 800fad4:	e7fe      	b.n	800fad4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fad6:	3808      	subs	r0, #8
 800fad8:	0004      	movs	r4, r0
 800fada:	4393      	bics	r3, r2
 800fadc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800fade:	f7fe ff69 	bl	800e9b4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fae2:	4a07      	ldr	r2, [pc, #28]	; (800fb00 <vPortFree+0x50>)
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	6811      	ldr	r1, [r2, #0]
 800fae8:	468c      	mov	ip, r1
 800faea:	4463      	add	r3, ip
 800faec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800faee:	0020      	movs	r0, r4
 800faf0:	f7ff ff22 	bl	800f938 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800faf4:	f7ff f806 	bl	800eb04 <xTaskResumeAll>
}
 800faf8:	bd10      	pop	{r4, pc}
 800fafa:	46c0      	nop			; (mov r8, r8)
 800fafc:	20006804 	.word	0x20006804
 800fb00:	20006808 	.word	0x20006808

0800fb04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fb04:	b510      	push	{r4, lr}
 800fb06:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fb08:	f002 f8aa 	bl	8011c60 <HAL_RCC_GetHCLKFreq>
 800fb0c:	21fa      	movs	r1, #250	; 0xfa
 800fb0e:	0089      	lsls	r1, r1, #2
 800fb10:	f7f0 fb1e 	bl	8000150 <__udivsi3>
 800fb14:	f000 fbbe 	bl	8010294 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fb18:	2001      	movs	r0, #1
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	0021      	movs	r1, r4
 800fb1e:	4240      	negs	r0, r0
 800fb20:	f000 fb72 	bl	8010208 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fb24:	2000      	movs	r0, #0
 800fb26:	bd10      	pop	{r4, pc}

0800fb28 <HAL_Init>:
{
 800fb28:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fb2a:	4a06      	ldr	r2, [pc, #24]	; (800fb44 <HAL_Init+0x1c>)
 800fb2c:	6813      	ldr	r3, [r2, #0]
 800fb2e:	2110      	movs	r1, #16
 800fb30:	430b      	orrs	r3, r1
 800fb32:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fb34:	2000      	movs	r0, #0
 800fb36:	f7ff ffe5 	bl	800fb04 <HAL_InitTick>
  HAL_MspInit();
 800fb3a:	f001 fc35 	bl	80113a8 <HAL_MspInit>
}
 800fb3e:	2000      	movs	r0, #0
 800fb40:	bd10      	pop	{r4, pc}
 800fb42:	46c0      	nop			; (mov r8, r8)
 800fb44:	40022000 	.word	0x40022000

0800fb48 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fb48:	4a02      	ldr	r2, [pc, #8]	; (800fb54 <HAL_IncTick+0xc>)
 800fb4a:	6813      	ldr	r3, [r2, #0]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	6013      	str	r3, [r2, #0]
}
 800fb50:	4770      	bx	lr
 800fb52:	46c0      	nop			; (mov r8, r8)
 800fb54:	20006818 	.word	0x20006818

0800fb58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800fb58:	4b01      	ldr	r3, [pc, #4]	; (800fb60 <HAL_GetTick+0x8>)
 800fb5a:	6818      	ldr	r0, [r3, #0]
}
 800fb5c:	4770      	bx	lr
 800fb5e:	46c0      	nop			; (mov r8, r8)
 800fb60:	20006818 	.word	0x20006818

0800fb64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800fb64:	b510      	push	{r4, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fb6a:	f7ff fff5 	bl	800fb58 <HAL_GetTick>
 800fb6e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fb70:	f7ff fff2 	bl	800fb58 <HAL_GetTick>
 800fb74:	9b01      	ldr	r3, [sp, #4]
 800fb76:	1b00      	subs	r0, r0, r4
 800fb78:	4298      	cmp	r0, r3
 800fb7a:	d3f9      	bcc.n	800fb70 <HAL_Delay+0xc>
  {
  }
}
 800fb7c:	b002      	add	sp, #8
 800fb7e:	bd10      	pop	{r4, pc}

0800fb80 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800fb80:	4b01      	ldr	r3, [pc, #4]	; (800fb88 <HAL_GetREVID+0x8>)
 800fb82:	6818      	ldr	r0, [r3, #0]
 800fb84:	0c00      	lsrs	r0, r0, #16
}
 800fb86:	4770      	bx	lr
 800fb88:	40015800 	.word	0x40015800

0800fb8c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <HAL_GetDEVID+0xc>)
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	0500      	lsls	r0, r0, #20
 800fb92:	0d00      	lsrs	r0, r0, #20
}
 800fb94:	4770      	bx	lr
 800fb96:	46c0      	nop			; (mov r8, r8)
 800fb98:	40015800 	.word	0x40015800

0800fb9c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800fb9c:	b570      	push	{r4, r5, r6, lr}
 800fb9e:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fba0:	6803      	ldr	r3, [r0, #0]
 800fba2:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800fba4:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fba6:	0752      	lsls	r2, r2, #29
 800fba8:	d521      	bpl.n	800fbee <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fbaa:	689a      	ldr	r2, [r3, #8]
 800fbac:	0752      	lsls	r2, r2, #29
 800fbae:	d506      	bpl.n	800fbbe <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800fbb0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800fbb2:	0792      	lsls	r2, r2, #30
 800fbb4:	d403      	bmi.n	800fbbe <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800fbb6:	689a      	ldr	r2, [r3, #8]
 800fbb8:	2110      	movs	r1, #16
 800fbba:	430a      	orrs	r2, r1
 800fbbc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800fbbe:	f7ff ffcb 	bl	800fb58 <HAL_GetTick>
 800fbc2:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800fbc4:	2604      	movs	r6, #4
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	421e      	tst	r6, r3
 800fbcc:	d00e      	beq.n	800fbec <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800fbce:	f7ff ffc3 	bl	800fb58 <HAL_GetTick>
 800fbd2:	1b40      	subs	r0, r0, r5
 800fbd4:	2802      	cmp	r0, #2
 800fbd6:	d9f6      	bls.n	800fbc6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fbd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fbda:	2210      	movs	r2, #16
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fbe0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fbe2:	3a0f      	subs	r2, #15
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fbe8:	2001      	movs	r0, #1
 800fbea:	e000      	b.n	800fbee <ADC_ConversionStop+0x52>
  return HAL_OK;
 800fbec:	2000      	movs	r0, #0
}
 800fbee:	bd70      	pop	{r4, r5, r6, pc}

0800fbf0 <ADC_Disable>:
{
 800fbf0:	b570      	push	{r4, r5, r6, lr}
 800fbf2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fbf4:	6802      	ldr	r2, [r0, #0]
 800fbf6:	6891      	ldr	r1, [r2, #8]
 800fbf8:	2303      	movs	r3, #3
 800fbfa:	400b      	ands	r3, r1
  return HAL_OK;
 800fbfc:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d000      	beq.n	800fc04 <ADC_Disable+0x14>
}
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800fc04:	6813      	ldr	r3, [r2, #0]
 800fc06:	07db      	lsls	r3, r3, #31
 800fc08:	d402      	bmi.n	800fc10 <ADC_Disable+0x20>
 800fc0a:	68d3      	ldr	r3, [r2, #12]
 800fc0c:	041b      	lsls	r3, r3, #16
 800fc0e:	d5f8      	bpl.n	800fc02 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800fc10:	6891      	ldr	r1, [r2, #8]
 800fc12:	2305      	movs	r3, #5
 800fc14:	400b      	ands	r3, r1
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d009      	beq.n	800fc2e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc1c:	2210      	movs	r2, #16
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc24:	3a0f      	subs	r2, #15
 800fc26:	4313      	orrs	r3, r2
 800fc28:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fc2a:	2001      	movs	r0, #1
 800fc2c:	e7e9      	b.n	800fc02 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800fc2e:	6893      	ldr	r3, [r2, #8]
 800fc30:	2102      	movs	r1, #2
 800fc32:	430b      	orrs	r3, r1
 800fc34:	6093      	str	r3, [r2, #8]
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	2203      	movs	r2, #3
 800fc3a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800fc3c:	f7ff ff8c 	bl	800fb58 <HAL_GetTick>
 800fc40:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800fc42:	2601      	movs	r6, #1
 800fc44:	6823      	ldr	r3, [r4, #0]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	421e      	tst	r6, r3
 800fc4a:	d00e      	beq.n	800fc6a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fc4c:	f7ff ff84 	bl	800fb58 <HAL_GetTick>
 800fc50:	1b40      	subs	r0, r0, r5
 800fc52:	2802      	cmp	r0, #2
 800fc54:	d9f6      	bls.n	800fc44 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc58:	2210      	movs	r2, #16
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc60:	3a0f      	subs	r2, #15
 800fc62:	4313      	orrs	r3, r2
 800fc64:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fc66:	2001      	movs	r0, #1
 800fc68:	e7cb      	b.n	800fc02 <ADC_Disable+0x12>
  return HAL_OK;
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	e7c9      	b.n	800fc02 <ADC_Disable+0x12>
	...

0800fc70 <ADC_Enable>:
{
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fc76:	2300      	movs	r3, #0
 800fc78:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc7a:	6803      	ldr	r3, [r0, #0]
 800fc7c:	6899      	ldr	r1, [r3, #8]
 800fc7e:	2203      	movs	r2, #3
 800fc80:	400a      	ands	r2, r1
 800fc82:	2a01      	cmp	r2, #1
 800fc84:	d02d      	beq.n	800fce2 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800fc86:	6899      	ldr	r1, [r3, #8]
 800fc88:	4a20      	ldr	r2, [pc, #128]	; (800fd0c <ADC_Enable+0x9c>)
 800fc8a:	4211      	tst	r1, r2
 800fc8c:	d131      	bne.n	800fcf2 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800fc8e:	689a      	ldr	r2, [r3, #8]
 800fc90:	2101      	movs	r1, #1
 800fc92:	430a      	orrs	r2, r1
 800fc94:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800fc96:	4b1e      	ldr	r3, [pc, #120]	; (800fd10 <ADC_Enable+0xa0>)
 800fc98:	6818      	ldr	r0, [r3, #0]
 800fc9a:	491e      	ldr	r1, [pc, #120]	; (800fd14 <ADC_Enable+0xa4>)
 800fc9c:	f7f0 fa58 	bl	8000150 <__udivsi3>
 800fca0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fca2:	9b01      	ldr	r3, [sp, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d005      	beq.n	800fcb4 <ADC_Enable+0x44>
      wait_loop_index--;
 800fca8:	9b01      	ldr	r3, [sp, #4]
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1f9      	bne.n	800fca8 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800fcb4:	f7ff ff50 	bl	800fb58 <HAL_GetTick>
 800fcb8:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fcba:	2601      	movs	r6, #1
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	421e      	tst	r6, r3
 800fcc2:	d121      	bne.n	800fd08 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fcc4:	f7ff ff48 	bl	800fb58 <HAL_GetTick>
 800fcc8:	1b40      	subs	r0, r0, r5
 800fcca:	2802      	cmp	r0, #2
 800fccc:	d9f6      	bls.n	800fcbc <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcd0:	2210      	movs	r2, #16
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcd8:	3a0f      	subs	r2, #15
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fcde:	2001      	movs	r0, #1
 800fce0:	e010      	b.n	800fd04 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fce2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800fce4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fce6:	07d2      	lsls	r2, r2, #31
 800fce8:	d40c      	bmi.n	800fd04 <ADC_Enable+0x94>
 800fcea:	68da      	ldr	r2, [r3, #12]
 800fcec:	0412      	lsls	r2, r2, #16
 800fcee:	d409      	bmi.n	800fd04 <ADC_Enable+0x94>
 800fcf0:	e7c9      	b.n	800fc86 <ADC_Enable+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcf4:	2210      	movs	r2, #16
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcfc:	3a0f      	subs	r2, #15
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800fd02:	2001      	movs	r0, #1
}
 800fd04:	b002      	add	sp, #8
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800fd08:	2000      	movs	r0, #0
 800fd0a:	e7fb      	b.n	800fd04 <ADC_Enable+0x94>
 800fd0c:	80000017 	.word	0x80000017
 800fd10:	20000094 	.word	0x20000094
 800fd14:	000f4240 	.word	0x000f4240

0800fd18 <HAL_ADC_Init>:
{
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800fd1c:	d100      	bne.n	800fd20 <HAL_ADC_Init+0x8>
 800fd1e:	e09e      	b.n	800fe5e <HAL_ADC_Init+0x146>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fd20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d074      	beq.n	800fe10 <HAL_ADC_Init+0xf8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800fd26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd28:	06db      	lsls	r3, r3, #27
 800fd2a:	d500      	bpl.n	800fd2e <HAL_ADC_Init+0x16>
 800fd2c:	e091      	b.n	800fe52 <HAL_ADC_Init+0x13a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800fd2e:	6822      	ldr	r2, [r4, #0]
 800fd30:	6891      	ldr	r1, [r2, #8]
 800fd32:	2004      	movs	r0, #4
 800fd34:	0005      	movs	r5, r0
 800fd36:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 800fd38:	4208      	tst	r0, r1
 800fd3a:	d000      	beq.n	800fd3e <HAL_ADC_Init+0x26>
 800fd3c:	e089      	b.n	800fe52 <HAL_ADC_Init+0x13a>
    ADC_STATE_CLR_SET(hadc->State,
 800fd3e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fd40:	4b48      	ldr	r3, [pc, #288]	; (800fe64 <HAL_ADC_Init+0x14c>)
 800fd42:	4019      	ands	r1, r3
 800fd44:	3306      	adds	r3, #6
 800fd46:	33ff      	adds	r3, #255	; 0xff
 800fd48:	4319      	orrs	r1, r3
 800fd4a:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fd4c:	6891      	ldr	r1, [r2, #8]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	400b      	ands	r3, r1
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d062      	beq.n	800fe1c <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR1,
 800fd56:	68d3      	ldr	r3, [r2, #12]
 800fd58:	2118      	movs	r1, #24
 800fd5a:	438b      	bics	r3, r1
 800fd5c:	68a1      	ldr	r1, [r4, #8]
 800fd5e:	430b      	orrs	r3, r1
 800fd60:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800fd62:	6822      	ldr	r2, [r4, #0]
 800fd64:	6913      	ldr	r3, [r2, #16]
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	089b      	lsrs	r3, r3, #2
 800fd6a:	6861      	ldr	r1, [r4, #4]
 800fd6c:	430b      	orrs	r3, r1
 800fd6e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800fd70:	6822      	ldr	r2, [r4, #0]
 800fd72:	68d3      	ldr	r3, [r2, #12]
 800fd74:	493c      	ldr	r1, [pc, #240]	; (800fe68 <HAL_ADC_Init+0x150>)
 800fd76:	400b      	ands	r3, r1
 800fd78:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fd7a:	69a3      	ldr	r3, [r4, #24]
 800fd7c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800fd7e:	69e3      	ldr	r3, [r4, #28]
 800fd80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800fd82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800fd84:	6a21      	ldr	r1, [r4, #32]
 800fd86:	034b      	lsls	r3, r1, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fd88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800fd8a:	2801      	cmp	r0, #1
 800fd8c:	d04d      	beq.n	800fe2a <HAL_ADC_Init+0x112>
 800fd8e:	2080      	movs	r0, #128	; 0x80
 800fd90:	0140      	lsls	r0, r0, #5
 800fd92:	68e6      	ldr	r6, [r4, #12]
 800fd94:	4332      	orrs	r2, r6
 800fd96:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fd98:	6923      	ldr	r3, [r4, #16]
 800fd9a:	2b02      	cmp	r3, #2
 800fd9c:	d047      	beq.n	800fe2e <HAL_ADC_Init+0x116>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800fd9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fda0:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fda2:	4313      	orrs	r3, r2
 800fda4:	4303      	orrs	r3, r0
 800fda6:	432b      	orrs	r3, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fda8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fdaa:	2a01      	cmp	r2, #1
 800fdac:	d041      	beq.n	800fe32 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fdae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fdb0:	21c2      	movs	r1, #194	; 0xc2
 800fdb2:	31ff      	adds	r1, #255	; 0xff
 800fdb4:	428a      	cmp	r2, r1
 800fdb6:	d002      	beq.n	800fdbe <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fdb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fdba:	430a      	orrs	r2, r1
 800fdbc:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fdbe:	6821      	ldr	r1, [r4, #0]
 800fdc0:	68ca      	ldr	r2, [r1, #12]
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fdc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fdc8:	2180      	movs	r1, #128	; 0x80
 800fdca:	0549      	lsls	r1, r1, #21
 800fdcc:	428a      	cmp	r2, r1
 800fdce:	d002      	beq.n	800fdd6 <HAL_ADC_Init+0xbe>
 800fdd0:	3a01      	subs	r2, #1
 800fdd2:	2a06      	cmp	r2, #6
 800fdd4:	d80a      	bhi.n	800fdec <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fdd6:	6820      	ldr	r0, [r4, #0]
 800fdd8:	6941      	ldr	r1, [r0, #20]
 800fdda:	2207      	movs	r2, #7
 800fddc:	4391      	bics	r1, r2
 800fdde:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fde0:	6821      	ldr	r1, [r4, #0]
 800fde2:	6948      	ldr	r0, [r1, #20]
 800fde4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fde6:	402a      	ands	r2, r5
 800fde8:	4302      	orrs	r2, r0
 800fdea:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fdec:	6822      	ldr	r2, [r4, #0]
 800fdee:	68d2      	ldr	r2, [r2, #12]
 800fdf0:	491e      	ldr	r1, [pc, #120]	; (800fe6c <HAL_ADC_Init+0x154>)
 800fdf2:	400a      	ands	r2, r1
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d022      	beq.n	800fe3e <HAL_ADC_Init+0x126>
      ADC_STATE_CLR_SET(hadc->State,
 800fdf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fdfa:	2212      	movs	r2, #18
 800fdfc:	4393      	bics	r3, r2
 800fdfe:	3a02      	subs	r2, #2
 800fe00:	4313      	orrs	r3, r2
 800fe02:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fe06:	3a0f      	subs	r2, #15
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800fe0c:	2001      	movs	r0, #1
 800fe0e:	e025      	b.n	800fe5c <HAL_ADC_Init+0x144>
    ADC_CLEAR_ERRORCODE(hadc);
 800fe10:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fe12:	2240      	movs	r2, #64	; 0x40
 800fe14:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fe16:	f7fb fe97 	bl	800bb48 <HAL_ADC_MspInit>
 800fe1a:	e784      	b.n	800fd26 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fe1c:	6813      	ldr	r3, [r2, #0]
 800fe1e:	07db      	lsls	r3, r3, #31
 800fe20:	d4a6      	bmi.n	800fd70 <HAL_ADC_Init+0x58>
 800fe22:	68d3      	ldr	r3, [r2, #12]
 800fe24:	041b      	lsls	r3, r3, #16
 800fe26:	d4a3      	bmi.n	800fd70 <HAL_ADC_Init+0x58>
 800fe28:	e795      	b.n	800fd56 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fe2a:	0028      	movs	r0, r5
 800fe2c:	e7b1      	b.n	800fd92 <HAL_ADC_Init+0x7a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fe2e:	2504      	movs	r5, #4
 800fe30:	e7b5      	b.n	800fd9e <HAL_ADC_Init+0x86>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fe32:	2900      	cmp	r1, #0
 800fe34:	d1bb      	bne.n	800fdae <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800fe36:	2280      	movs	r2, #128	; 0x80
 800fe38:	0252      	lsls	r2, r2, #9
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	e7b7      	b.n	800fdae <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 800fe3e:	2300      	movs	r3, #0
 800fe40:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fe42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe44:	2203      	movs	r2, #3
 800fe46:	4393      	bics	r3, r2
 800fe48:	3a02      	subs	r2, #2
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fe4e:	2000      	movs	r0, #0
 800fe50:	e004      	b.n	800fe5c <HAL_ADC_Init+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe54:	2210      	movs	r2, #16
 800fe56:	4313      	orrs	r3, r2
 800fe58:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fe5a:	2001      	movs	r0, #1
}
 800fe5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800fe5e:	2001      	movs	r0, #1
 800fe60:	e7fc      	b.n	800fe5c <HAL_ADC_Init+0x144>
 800fe62:	46c0      	nop			; (mov r8, r8)
 800fe64:	fffffefd 	.word	0xfffffefd
 800fe68:	fffe0219 	.word	0xfffe0219
 800fe6c:	833fffe7 	.word	0x833fffe7

0800fe70 <HAL_ADC_Start>:
{
 800fe70:	b510      	push	{r4, lr}
 800fe72:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fe74:	6803      	ldr	r3, [r0, #0]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	075b      	lsls	r3, r3, #29
 800fe7a:	d423      	bmi.n	800fec4 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800fe7c:	2340      	movs	r3, #64	; 0x40
 800fe7e:	5cc3      	ldrb	r3, [r0, r3]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d021      	beq.n	800fec8 <HAL_ADC_Start+0x58>
 800fe84:	2340      	movs	r3, #64	; 0x40
 800fe86:	2201      	movs	r2, #1
 800fe88:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fe8a:	69c3      	ldr	r3, [r0, #28]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d114      	bne.n	800feba <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 800fe90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fe92:	4a0e      	ldr	r2, [pc, #56]	; (800fecc <HAL_ADC_Start+0x5c>)
 800fe94:	401a      	ands	r2, r3
 800fe96:	2380      	movs	r3, #128	; 0x80
 800fe98:	005b      	lsls	r3, r3, #1
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800fe9e:	2300      	movs	r3, #0
 800fea0:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fea2:	2240      	movs	r2, #64	; 0x40
 800fea4:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	3a24      	subs	r2, #36	; 0x24
 800feaa:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800feac:	6822      	ldr	r2, [r4, #0]
 800feae:	6893      	ldr	r3, [r2, #8]
 800feb0:	2104      	movs	r1, #4
 800feb2:	430b      	orrs	r3, r1
 800feb4:	6093      	str	r3, [r2, #8]
 800feb6:	2000      	movs	r0, #0
}
 800feb8:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800feba:	f7ff fed9 	bl	800fc70 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800febe:	2800      	cmp	r0, #0
 800fec0:	d1fa      	bne.n	800feb8 <HAL_ADC_Start+0x48>
 800fec2:	e7e5      	b.n	800fe90 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 800fec4:	2002      	movs	r0, #2
 800fec6:	e7f7      	b.n	800feb8 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800fec8:	2002      	movs	r0, #2
 800feca:	e7f5      	b.n	800feb8 <HAL_ADC_Start+0x48>
 800fecc:	fffff0fe 	.word	0xfffff0fe

0800fed0 <HAL_ADC_Stop>:
{ 
 800fed0:	b510      	push	{r4, lr}
 800fed2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fed4:	2340      	movs	r3, #64	; 0x40
 800fed6:	5cc3      	ldrb	r3, [r0, r3]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d017      	beq.n	800ff0c <HAL_ADC_Stop+0x3c>
 800fedc:	2340      	movs	r3, #64	; 0x40
 800fede:	2201      	movs	r2, #1
 800fee0:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fee2:	f7ff fe5b 	bl	800fb9c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d003      	beq.n	800fef2 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800feea:	2340      	movs	r3, #64	; 0x40
 800feec:	2200      	movs	r2, #0
 800feee:	54e2      	strb	r2, [r4, r3]
}
 800fef0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fef2:	0020      	movs	r0, r4
 800fef4:	f7ff fe7c 	bl	800fbf0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d1f6      	bne.n	800feea <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fefc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fefe:	4a04      	ldr	r2, [pc, #16]	; (800ff10 <HAL_ADC_Stop+0x40>)
 800ff00:	4013      	ands	r3, r2
 800ff02:	3204      	adds	r2, #4
 800ff04:	32ff      	adds	r2, #255	; 0xff
 800ff06:	4313      	orrs	r3, r2
 800ff08:	6463      	str	r3, [r4, #68]	; 0x44
 800ff0a:	e7ee      	b.n	800feea <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800ff0c:	2002      	movs	r0, #2
 800ff0e:	e7ef      	b.n	800fef0 <HAL_ADC_Stop+0x20>
 800ff10:	fffffefe 	.word	0xfffffefe

0800ff14 <HAL_ADC_PollForConversion>:
{
 800ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff16:	0006      	movs	r6, r0
 800ff18:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800ff1a:	6945      	ldr	r5, [r0, #20]
 800ff1c:	2d08      	cmp	r5, #8
 800ff1e:	d004      	beq.n	800ff2a <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800ff20:	6803      	ldr	r3, [r0, #0]
 800ff22:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800ff24:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800ff26:	07db      	lsls	r3, r3, #31
 800ff28:	d418      	bmi.n	800ff5c <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800ff2a:	f7ff fe15 	bl	800fb58 <HAL_GetTick>
 800ff2e:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800ff30:	6832      	ldr	r2, [r6, #0]
 800ff32:	6813      	ldr	r3, [r2, #0]
 800ff34:	421d      	tst	r5, r3
 800ff36:	d11a      	bne.n	800ff6e <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 800ff38:	1c63      	adds	r3, r4, #1
 800ff3a:	d0fa      	beq.n	800ff32 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ff3c:	2c00      	cmp	r4, #0
 800ff3e:	d004      	beq.n	800ff4a <HAL_ADC_PollForConversion+0x36>
 800ff40:	f7ff fe0a 	bl	800fb58 <HAL_GetTick>
 800ff44:	1bc0      	subs	r0, r0, r7
 800ff46:	42a0      	cmp	r0, r4
 800ff48:	d9f2      	bls.n	800ff30 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ff4a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ff4c:	2204      	movs	r2, #4
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800ff52:	2340      	movs	r3, #64	; 0x40
 800ff54:	2200      	movs	r2, #0
 800ff56:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800ff58:	2003      	movs	r0, #3
 800ff5a:	e02d      	b.n	800ffb8 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ff5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ff5e:	2220      	movs	r2, #32
 800ff60:	4313      	orrs	r3, r2
 800ff62:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800ff64:	2340      	movs	r3, #64	; 0x40
 800ff66:	2200      	movs	r2, #0
 800ff68:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800ff6a:	2001      	movs	r0, #1
 800ff6c:	e024      	b.n	800ffb8 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ff6e:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800ff70:	2380      	movs	r3, #128	; 0x80
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	430b      	orrs	r3, r1
 800ff76:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ff78:	68d1      	ldr	r1, [r2, #12]
 800ff7a:	23c0      	movs	r3, #192	; 0xc0
 800ff7c:	011b      	lsls	r3, r3, #4
 800ff7e:	4219      	tst	r1, r3
 800ff80:	d113      	bne.n	800ffaa <HAL_ADC_PollForConversion+0x96>
 800ff82:	6a33      	ldr	r3, [r6, #32]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d110      	bne.n	800ffaa <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800ff88:	6813      	ldr	r3, [r2, #0]
 800ff8a:	071b      	lsls	r3, r3, #28
 800ff8c:	d50d      	bpl.n	800ffaa <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ff8e:	6893      	ldr	r3, [r2, #8]
 800ff90:	075b      	lsls	r3, r3, #29
 800ff92:	d412      	bmi.n	800ffba <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800ff94:	6853      	ldr	r3, [r2, #4]
 800ff96:	210c      	movs	r1, #12
 800ff98:	438b      	bics	r3, r1
 800ff9a:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800ff9c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ff9e:	4a0b      	ldr	r2, [pc, #44]	; (800ffcc <HAL_ADC_PollForConversion+0xb8>)
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	3204      	adds	r2, #4
 800ffa4:	32ff      	adds	r2, #255	; 0xff
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 800ffaa:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800ffac:	69b3      	ldr	r3, [r6, #24]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d102      	bne.n	800ffb8 <HAL_ADC_PollForConversion+0xa4>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ffb2:	6833      	ldr	r3, [r6, #0]
 800ffb4:	220c      	movs	r2, #12
 800ffb6:	601a      	str	r2, [r3, #0]
}
 800ffb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ffba:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ffbc:	2220      	movs	r2, #32
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ffc2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800ffc4:	3a1f      	subs	r2, #31
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	64b3      	str	r3, [r6, #72]	; 0x48
 800ffca:	e7ee      	b.n	800ffaa <HAL_ADC_PollForConversion+0x96>
 800ffcc:	fffffefe 	.word	0xfffffefe

0800ffd0 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800ffd0:	6803      	ldr	r3, [r0, #0]
 800ffd2:	2208      	movs	r2, #8
 800ffd4:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800ffd6:	6803      	ldr	r3, [r0, #0]
 800ffd8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800ffda:	4770      	bx	lr

0800ffdc <HAL_ADC_ConvCpltCallback>:
}
 800ffdc:	4770      	bx	lr

0800ffde <HAL_ADC_LevelOutOfWindowCallback>:
}
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_ADC_ErrorCallback>:
}
 800ffe0:	4770      	bx	lr
	...

0800ffe4 <HAL_ADC_IRQHandler>:
{
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800ffe8:	6803      	ldr	r3, [r0, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	0752      	lsls	r2, r2, #29
 800ffee:	d502      	bpl.n	800fff6 <HAL_ADC_IRQHandler+0x12>
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	0752      	lsls	r2, r2, #29
 800fff4:	d405      	bmi.n	8010002 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fff6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fff8:	0712      	lsls	r2, r2, #28
 800fffa:	d529      	bpl.n	8010050 <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fffc:	685a      	ldr	r2, [r3, #4]
 800fffe:	0712      	lsls	r2, r2, #28
 8010000:	d526      	bpl.n	8010050 <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010002:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010004:	06d2      	lsls	r2, r2, #27
 8010006:	d404      	bmi.n	8010012 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010008:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801000a:	2280      	movs	r2, #128	; 0x80
 801000c:	0092      	lsls	r2, r2, #2
 801000e:	430a      	orrs	r2, r1
 8010010:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010012:	68d9      	ldr	r1, [r3, #12]
 8010014:	22c0      	movs	r2, #192	; 0xc0
 8010016:	0112      	lsls	r2, r2, #4
 8010018:	4211      	tst	r1, r2
 801001a:	d113      	bne.n	8010044 <HAL_ADC_IRQHandler+0x60>
 801001c:	6a22      	ldr	r2, [r4, #32]
 801001e:	2a00      	cmp	r2, #0
 8010020:	d110      	bne.n	8010044 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	0712      	lsls	r2, r2, #28
 8010026:	d50d      	bpl.n	8010044 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010028:	689a      	ldr	r2, [r3, #8]
 801002a:	0752      	lsls	r2, r2, #29
 801002c:	d431      	bmi.n	8010092 <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	210c      	movs	r1, #12
 8010032:	438a      	bics	r2, r1
 8010034:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8010036:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010038:	4a20      	ldr	r2, [pc, #128]	; (80100bc <HAL_ADC_IRQHandler+0xd8>)
 801003a:	4013      	ands	r3, r2
 801003c:	3204      	adds	r2, #4
 801003e:	32ff      	adds	r2, #255	; 0xff
 8010040:	4313      	orrs	r3, r2
 8010042:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8010044:	0020      	movs	r0, r4
 8010046:	f7ff ffc9 	bl	800ffdc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 801004a:	6823      	ldr	r3, [r4, #0]
 801004c:	220c      	movs	r2, #12
 801004e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010050:	6823      	ldr	r3, [r4, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	0612      	lsls	r2, r2, #24
 8010056:	d502      	bpl.n	801005e <HAL_ADC_IRQHandler+0x7a>
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	061b      	lsls	r3, r3, #24
 801005c:	d422      	bmi.n	80100a4 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	06d2      	lsls	r2, r2, #27
 8010064:	d514      	bpl.n	8010090 <HAL_ADC_IRQHandler+0xac>
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	06d2      	lsls	r2, r2, #27
 801006a:	d511      	bpl.n	8010090 <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 801006c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801006e:	2a01      	cmp	r2, #1
 8010070:	d002      	beq.n	8010078 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8010072:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010074:	07d2      	lsls	r2, r2, #31
 8010076:	d508      	bpl.n	801008a <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010078:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801007a:	2102      	movs	r1, #2
 801007c:	430a      	orrs	r2, r1
 801007e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010080:	2210      	movs	r2, #16
 8010082:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010084:	0020      	movs	r0, r4
 8010086:	f7ff ffab 	bl	800ffe0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801008a:	6823      	ldr	r3, [r4, #0]
 801008c:	2210      	movs	r2, #16
 801008e:	601a      	str	r2, [r3, #0]
}
 8010090:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010094:	2220      	movs	r2, #32
 8010096:	4313      	orrs	r3, r2
 8010098:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801009a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801009c:	3a1f      	subs	r2, #31
 801009e:	4313      	orrs	r3, r2
 80100a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80100a2:	e7cf      	b.n	8010044 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80100a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80100a6:	2380      	movs	r3, #128	; 0x80
 80100a8:	025b      	lsls	r3, r3, #9
 80100aa:	4313      	orrs	r3, r2
 80100ac:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80100ae:	0020      	movs	r0, r4
 80100b0:	f7ff ff95 	bl	800ffde <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	2280      	movs	r2, #128	; 0x80
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	e7d0      	b.n	801005e <HAL_ADC_IRQHandler+0x7a>
 80100bc:	fffffefe 	.word	0xfffffefe

080100c0 <HAL_ADC_ConfigChannel>:
{
 80100c0:	b530      	push	{r4, r5, lr}
 80100c2:	b083      	sub	sp, #12
 80100c4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80100ca:	3340      	adds	r3, #64	; 0x40
 80100cc:	5cc3      	ldrb	r3, [r0, r3]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d100      	bne.n	80100d4 <HAL_ADC_ConfigChannel+0x14>
 80100d2:	e088      	b.n	80101e6 <HAL_ADC_ConfigChannel+0x126>
 80100d4:	2340      	movs	r3, #64	; 0x40
 80100d6:	2201      	movs	r2, #1
 80100d8:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80100da:	6803      	ldr	r3, [r0, #0]
 80100dc:	689a      	ldr	r2, [r3, #8]
 80100de:	0752      	lsls	r2, r2, #29
 80100e0:	d475      	bmi.n	80101ce <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80100e2:	4a42      	ldr	r2, [pc, #264]	; (80101ec <HAL_ADC_ConfigChannel+0x12c>)
 80100e4:	6848      	ldr	r0, [r1, #4]
 80100e6:	4290      	cmp	r0, r2
 80100e8:	d050      	beq.n	801018c <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80100ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80100ec:	2201      	movs	r2, #1
 80100ee:	680d      	ldr	r5, [r1, #0]
 80100f0:	40aa      	lsls	r2, r5
 80100f2:	4302      	orrs	r2, r0
 80100f4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80100f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80100f8:	2280      	movs	r2, #128	; 0x80
 80100fa:	0552      	lsls	r2, r2, #21
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d013      	beq.n	8010128 <HAL_ADC_ConfigChannel+0x68>
 8010100:	3b01      	subs	r3, #1
 8010102:	2b06      	cmp	r3, #6
 8010104:	d910      	bls.n	8010128 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010106:	6822      	ldr	r2, [r4, #0]
 8010108:	6950      	ldr	r0, [r2, #20]
 801010a:	2307      	movs	r3, #7
 801010c:	4003      	ands	r3, r0
 801010e:	6888      	ldr	r0, [r1, #8]
 8010110:	4298      	cmp	r0, r3
 8010112:	d009      	beq.n	8010128 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010114:	6950      	ldr	r0, [r2, #20]
 8010116:	2307      	movs	r3, #7
 8010118:	4398      	bics	r0, r3
 801011a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801011c:	6822      	ldr	r2, [r4, #0]
 801011e:	6950      	ldr	r0, [r2, #20]
 8010120:	688d      	ldr	r5, [r1, #8]
 8010122:	402b      	ands	r3, r5
 8010124:	4303      	orrs	r3, r0
 8010126:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010128:	680b      	ldr	r3, [r1, #0]
 801012a:	001a      	movs	r2, r3
 801012c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801012e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010130:	2a02      	cmp	r2, #2
 8010132:	d851      	bhi.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010134:	4a2e      	ldr	r2, [pc, #184]	; (80101f0 <HAL_ADC_ConfigChannel+0x130>)
 8010136:	6810      	ldr	r0, [r2, #0]
 8010138:	2b10      	cmp	r3, #16
 801013a:	d024      	beq.n	8010186 <HAL_ADC_ConfigChannel+0xc6>
 801013c:	3b11      	subs	r3, #17
 801013e:	425a      	negs	r2, r3
 8010140:	415a      	adcs	r2, r3
 8010142:	4253      	negs	r3, r2
 8010144:	4a2b      	ldr	r2, [pc, #172]	; (80101f4 <HAL_ADC_ConfigChannel+0x134>)
 8010146:	4013      	ands	r3, r2
 8010148:	2280      	movs	r2, #128	; 0x80
 801014a:	0452      	lsls	r2, r2, #17
 801014c:	4694      	mov	ip, r2
 801014e:	4463      	add	r3, ip
 8010150:	4303      	orrs	r3, r0
 8010152:	4a27      	ldr	r2, [pc, #156]	; (80101f0 <HAL_ADC_ConfigChannel+0x130>)
 8010154:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010156:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010158:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801015a:	2b10      	cmp	r3, #16
 801015c:	d13c      	bne.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801015e:	4b26      	ldr	r3, [pc, #152]	; (80101f8 <HAL_ADC_ConfigChannel+0x138>)
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	4926      	ldr	r1, [pc, #152]	; (80101fc <HAL_ADC_ConfigChannel+0x13c>)
 8010164:	f7ef fff4 	bl	8000150 <__udivsi3>
 8010168:	0083      	lsls	r3, r0, #2
 801016a:	181b      	adds	r3, r3, r0
 801016c:	005b      	lsls	r3, r3, #1
 801016e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010170:	9b01      	ldr	r3, [sp, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d035      	beq.n	80101e2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	3b01      	subs	r3, #1
 801017a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801017c:	9b01      	ldr	r3, [sp, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1f9      	bne.n	8010176 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010182:	2000      	movs	r0, #0
 8010184:	e028      	b.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010186:	2380      	movs	r3, #128	; 0x80
 8010188:	041b      	lsls	r3, r3, #16
 801018a:	e7e1      	b.n	8010150 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 801018c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801018e:	2001      	movs	r0, #1
 8010190:	680d      	ldr	r5, [r1, #0]
 8010192:	40a8      	lsls	r0, r5
 8010194:	4382      	bics	r2, r0
 8010196:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010198:	680b      	ldr	r3, [r1, #0]
 801019a:	001a      	movs	r2, r3
 801019c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801019e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80101a0:	2a02      	cmp	r2, #2
 80101a2:	d819      	bhi.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101a4:	4a12      	ldr	r2, [pc, #72]	; (80101f0 <HAL_ADC_ConfigChannel+0x130>)
 80101a6:	6811      	ldr	r1, [r2, #0]
 80101a8:	2b10      	cmp	r3, #16
 80101aa:	d00e      	beq.n	80101ca <HAL_ADC_ConfigChannel+0x10a>
 80101ac:	3b11      	subs	r3, #17
 80101ae:	425a      	negs	r2, r3
 80101b0:	415a      	adcs	r2, r3
 80101b2:	4252      	negs	r2, r2
 80101b4:	23c0      	movs	r3, #192	; 0xc0
 80101b6:	041b      	lsls	r3, r3, #16
 80101b8:	4013      	ands	r3, r2
 80101ba:	4a11      	ldr	r2, [pc, #68]	; (8010200 <HAL_ADC_ConfigChannel+0x140>)
 80101bc:	4694      	mov	ip, r2
 80101be:	4463      	add	r3, ip
 80101c0:	400b      	ands	r3, r1
 80101c2:	4a0b      	ldr	r2, [pc, #44]	; (80101f0 <HAL_ADC_ConfigChannel+0x130>)
 80101c4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101c6:	2000      	movs	r0, #0
 80101c8:	e006      	b.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80101ca:	4b0e      	ldr	r3, [pc, #56]	; (8010204 <HAL_ADC_ConfigChannel+0x144>)
 80101cc:	e7f8      	b.n	80101c0 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80101ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80101d0:	2220      	movs	r2, #32
 80101d2:	4313      	orrs	r3, r2
 80101d4:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80101d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80101d8:	2340      	movs	r3, #64	; 0x40
 80101da:	2200      	movs	r2, #0
 80101dc:	54e2      	strb	r2, [r4, r3]
}
 80101de:	b003      	add	sp, #12
 80101e0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101e2:	2000      	movs	r0, #0
 80101e4:	e7f8      	b.n	80101d8 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80101e6:	2002      	movs	r0, #2
 80101e8:	e7f9      	b.n	80101de <HAL_ADC_ConfigChannel+0x11e>
 80101ea:	46c0      	nop			; (mov r8, r8)
 80101ec:	00001001 	.word	0x00001001
 80101f0:	40012708 	.word	0x40012708
 80101f4:	ff400000 	.word	0xff400000
 80101f8:	20000094 	.word	0x20000094
 80101fc:	000f4240 	.word	0x000f4240
 8010200:	feffffff 	.word	0xfeffffff
 8010204:	ff7fffff 	.word	0xff7fffff

08010208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010208:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 801020a:	2800      	cmp	r0, #0
 801020c:	db14      	blt.n	8010238 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801020e:	0884      	lsrs	r4, r0, #2
 8010210:	00a4      	lsls	r4, r4, #2
 8010212:	4b14      	ldr	r3, [pc, #80]	; (8010264 <HAL_NVIC_SetPriority+0x5c>)
 8010214:	469c      	mov	ip, r3
 8010216:	4464      	add	r4, ip
 8010218:	26c0      	movs	r6, #192	; 0xc0
 801021a:	00b6      	lsls	r6, r6, #2
 801021c:	59a5      	ldr	r5, [r4, r6]
 801021e:	2203      	movs	r2, #3
 8010220:	4010      	ands	r0, r2
 8010222:	00c0      	lsls	r0, r0, #3
 8010224:	23ff      	movs	r3, #255	; 0xff
 8010226:	001a      	movs	r2, r3
 8010228:	4082      	lsls	r2, r0
 801022a:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801022c:	0189      	lsls	r1, r1, #6
 801022e:	400b      	ands	r3, r1
 8010230:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010232:	432b      	orrs	r3, r5
 8010234:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010236:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010238:	230f      	movs	r3, #15
 801023a:	4003      	ands	r3, r0
 801023c:	3b08      	subs	r3, #8
 801023e:	089b      	lsrs	r3, r3, #2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4a09      	ldr	r2, [pc, #36]	; (8010268 <HAL_NVIC_SetPriority+0x60>)
 8010244:	4694      	mov	ip, r2
 8010246:	4463      	add	r3, ip
 8010248:	69dd      	ldr	r5, [r3, #28]
 801024a:	2403      	movs	r4, #3
 801024c:	4020      	ands	r0, r4
 801024e:	00c0      	lsls	r0, r0, #3
 8010250:	22ff      	movs	r2, #255	; 0xff
 8010252:	0014      	movs	r4, r2
 8010254:	4084      	lsls	r4, r0
 8010256:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010258:	0189      	lsls	r1, r1, #6
 801025a:	400a      	ands	r2, r1
 801025c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801025e:	432a      	orrs	r2, r5
 8010260:	61da      	str	r2, [r3, #28]
 8010262:	e7e8      	b.n	8010236 <HAL_NVIC_SetPriority+0x2e>
 8010264:	e000e100 	.word	0xe000e100
 8010268:	e000ed00 	.word	0xe000ed00

0801026c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801026c:	231f      	movs	r3, #31
 801026e:	4018      	ands	r0, r3
 8010270:	3b1e      	subs	r3, #30
 8010272:	4083      	lsls	r3, r0
 8010274:	4a01      	ldr	r2, [pc, #4]	; (801027c <HAL_NVIC_EnableIRQ+0x10>)
 8010276:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010278:	4770      	bx	lr
 801027a:	46c0      	nop			; (mov r8, r8)
 801027c:	e000e100 	.word	0xe000e100

08010280 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010280:	231f      	movs	r3, #31
 8010282:	4018      	ands	r0, r3
 8010284:	3b1e      	subs	r3, #30
 8010286:	4083      	lsls	r3, r0
 8010288:	4901      	ldr	r1, [pc, #4]	; (8010290 <HAL_NVIC_DisableIRQ+0x10>)
 801028a:	2280      	movs	r2, #128	; 0x80
 801028c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801028e:	4770      	bx	lr
 8010290:	e000e100 	.word	0xe000e100

08010294 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010294:	3801      	subs	r0, #1
 8010296:	2380      	movs	r3, #128	; 0x80
 8010298:	045b      	lsls	r3, r3, #17
 801029a:	4298      	cmp	r0, r3
 801029c:	d20f      	bcs.n	80102be <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801029e:	4a09      	ldr	r2, [pc, #36]	; (80102c4 <HAL_SYSTICK_Config+0x30>)
 80102a0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80102a2:	4809      	ldr	r0, [pc, #36]	; (80102c8 <HAL_SYSTICK_Config+0x34>)
 80102a4:	6a03      	ldr	r3, [r0, #32]
 80102a6:	021b      	lsls	r3, r3, #8
 80102a8:	0a1b      	lsrs	r3, r3, #8
 80102aa:	21c0      	movs	r1, #192	; 0xc0
 80102ac:	0609      	lsls	r1, r1, #24
 80102ae:	430b      	orrs	r3, r1
 80102b0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80102b2:	2300      	movs	r3, #0
 80102b4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80102b6:	3307      	adds	r3, #7
 80102b8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80102ba:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80102bc:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80102be:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80102c0:	e7fc      	b.n	80102bc <HAL_SYSTICK_Config+0x28>
 80102c2:	46c0      	nop			; (mov r8, r8)
 80102c4:	e000e010 	.word	0xe000e010
 80102c8:	e000ed00 	.word	0xe000ed00

080102cc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80102cc:	2804      	cmp	r0, #4
 80102ce:	d005      	beq.n	80102dc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80102d0:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80102d2:	6813      	ldr	r3, [r2, #0]
 80102d4:	2104      	movs	r1, #4
 80102d6:	438b      	bics	r3, r1
 80102d8:	6013      	str	r3, [r2, #0]
  }
}
 80102da:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80102dc:	4a02      	ldr	r2, [pc, #8]	; (80102e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80102de:	6813      	ldr	r3, [r2, #0]
 80102e0:	2104      	movs	r1, #4
 80102e2:	430b      	orrs	r3, r1
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	e7f8      	b.n	80102da <HAL_SYSTICK_CLKSourceConfig+0xe>
 80102e8:	e000e010 	.word	0xe000e010

080102ec <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80102ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ee:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80102f0:	0892      	lsrs	r2, r2, #2
 80102f2:	2d03      	cmp	r5, #3
 80102f4:	d927      	bls.n	8010346 <CRC_Handle_8+0x5a>
 80102f6:	000c      	movs	r4, r1
 80102f8:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80102fa:	7823      	ldrb	r3, [r4, #0]
 80102fc:	061b      	lsls	r3, r3, #24
 80102fe:	7866      	ldrb	r6, [r4, #1]
 8010300:	0436      	lsls	r6, r6, #16
 8010302:	4333      	orrs	r3, r6
 8010304:	78e6      	ldrb	r6, [r4, #3]
 8010306:	4333      	orrs	r3, r6
 8010308:	78a6      	ldrb	r6, [r4, #2]
 801030a:	0236      	lsls	r6, r6, #8
 801030c:	4333      	orrs	r3, r6
 801030e:	6806      	ldr	r6, [r0, #0]
 8010310:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010312:	3701      	adds	r7, #1
 8010314:	3404      	adds	r4, #4
 8010316:	4297      	cmp	r7, r2
 8010318:	d3ef      	bcc.n	80102fa <CRC_Handle_8+0xe>
 801031a:	2301      	movs	r3, #1
 801031c:	2d03      	cmp	r5, #3
 801031e:	d900      	bls.n	8010322 <CRC_Handle_8+0x36>
 8010320:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010322:	2203      	movs	r2, #3
 8010324:	0014      	movs	r4, r2
 8010326:	402c      	ands	r4, r5
 8010328:	422a      	tst	r2, r5
 801032a:	d012      	beq.n	8010352 <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 801032c:	2c01      	cmp	r4, #1
 801032e:	d00c      	beq.n	801034a <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010330:	2c02      	cmp	r4, #2
 8010332:	d111      	bne.n	8010358 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	5cca      	ldrb	r2, [r1, r3]
 8010338:	0212      	lsls	r2, r2, #8
 801033a:	18cb      	adds	r3, r1, r3
 801033c:	785b      	ldrb	r3, [r3, #1]
 801033e:	4313      	orrs	r3, r2
 8010340:	6802      	ldr	r2, [r0, #0]
 8010342:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 8010344:	e005      	b.n	8010352 <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 8010346:	2300      	movs	r3, #0
 8010348:	e7eb      	b.n	8010322 <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	5c5b      	ldrb	r3, [r3, r1]
 801034e:	6802      	ldr	r2, [r0, #0]
 8010350:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010352:	6803      	ldr	r3, [r0, #0]
 8010354:	6818      	ldr	r0, [r3, #0]
}
 8010356:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 8010358:	2c03      	cmp	r4, #3
 801035a:	d1fa      	bne.n	8010352 <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	5ccc      	ldrb	r4, [r1, r3]
 8010360:	0224      	lsls	r4, r4, #8
 8010362:	18cb      	adds	r3, r1, r3
 8010364:	785a      	ldrb	r2, [r3, #1]
 8010366:	4322      	orrs	r2, r4
 8010368:	6801      	ldr	r1, [r0, #0]
 801036a:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801036c:	789b      	ldrb	r3, [r3, #2]
 801036e:	6802      	ldr	r2, [r0, #0]
 8010370:	7013      	strb	r3, [r2, #0]
 8010372:	e7ee      	b.n	8010352 <CRC_Handle_8+0x66>

08010374 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010376:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010378:	0852      	lsrs	r2, r2, #1
 801037a:	2e01      	cmp	r6, #1
 801037c:	d918      	bls.n	80103b0 <CRC_Handle_16+0x3c>
 801037e:	000c      	movs	r4, r1
 8010380:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010382:	8823      	ldrh	r3, [r4, #0]
 8010384:	041b      	lsls	r3, r3, #16
 8010386:	8867      	ldrh	r7, [r4, #2]
 8010388:	433b      	orrs	r3, r7
 801038a:	6807      	ldr	r7, [r0, #0]
 801038c:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 801038e:	3501      	adds	r5, #1
 8010390:	3404      	adds	r4, #4
 8010392:	4295      	cmp	r5, r2
 8010394:	d3f5      	bcc.n	8010382 <CRC_Handle_16+0xe>
 8010396:	2301      	movs	r3, #1
 8010398:	2e01      	cmp	r6, #1
 801039a:	d900      	bls.n	801039e <CRC_Handle_16+0x2a>
 801039c:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 801039e:	07f2      	lsls	r2, r6, #31
 80103a0:	d503      	bpl.n	80103aa <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	5a5b      	ldrh	r3, [r3, r1]
 80103a6:	6802      	ldr	r2, [r0, #0]
 80103a8:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80103aa:	6803      	ldr	r3, [r0, #0]
 80103ac:	6818      	ldr	r0, [r3, #0]
}
 80103ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 80103b0:	2300      	movs	r3, #0
 80103b2:	e7f4      	b.n	801039e <CRC_Handle_16+0x2a>

080103b4 <HAL_CRC_Init>:
{
 80103b4:	b510      	push	{r4, lr}
 80103b6:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80103b8:	d029      	beq.n	801040e <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80103ba:	7f43      	ldrb	r3, [r0, #29]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d01e      	beq.n	80103fe <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80103c0:	2302      	movs	r3, #2
 80103c2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80103c4:	0020      	movs	r0, r4
 80103c6:	f000 f8ab 	bl	8010520 <HAL_CRCEx_Init>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d121      	bne.n	8010412 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80103ce:	7963      	ldrb	r3, [r4, #5]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d118      	bne.n	8010406 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	2201      	movs	r2, #1
 80103d8:	4252      	negs	r2, r2
 80103da:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80103dc:	6822      	ldr	r2, [r4, #0]
 80103de:	6893      	ldr	r3, [r2, #8]
 80103e0:	2160      	movs	r1, #96	; 0x60
 80103e2:	438b      	bics	r3, r1
 80103e4:	6961      	ldr	r1, [r4, #20]
 80103e6:	430b      	orrs	r3, r1
 80103e8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	6893      	ldr	r3, [r2, #8]
 80103ee:	2180      	movs	r1, #128	; 0x80
 80103f0:	438b      	bics	r3, r1
 80103f2:	69a1      	ldr	r1, [r4, #24]
 80103f4:	430b      	orrs	r3, r1
 80103f6:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80103f8:	2301      	movs	r3, #1
 80103fa:	7763      	strb	r3, [r4, #29]
}
 80103fc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80103fe:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010400:	f7fc fc28 	bl	800cc54 <HAL_CRC_MspInit>
 8010404:	e7dc      	b.n	80103c0 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	6922      	ldr	r2, [r4, #16]
 801040a:	611a      	str	r2, [r3, #16]
 801040c:	e7e6      	b.n	80103dc <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801040e:	2001      	movs	r0, #1
 8010410:	e7f4      	b.n	80103fc <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010412:	2001      	movs	r0, #1
 8010414:	e7f2      	b.n	80103fc <HAL_CRC_Init+0x48>

08010416 <HAL_CRC_Accumulate>:
{
 8010416:	b510      	push	{r4, lr}
 8010418:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801041a:	7f03      	ldrb	r3, [r0, #28]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d023      	beq.n	8010468 <HAL_CRC_Accumulate+0x52>
 8010420:	2301      	movs	r3, #1
 8010422:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010424:	3301      	adds	r3, #1
 8010426:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010428:	6a03      	ldr	r3, [r0, #32]
 801042a:	2b02      	cmp	r3, #2
 801042c:	d019      	beq.n	8010462 <HAL_CRC_Accumulate+0x4c>
 801042e:	2b03      	cmp	r3, #3
 8010430:	d007      	beq.n	8010442 <HAL_CRC_Accumulate+0x2c>
 8010432:	2b01      	cmp	r3, #1
 8010434:	d012      	beq.n	801045c <HAL_CRC_Accumulate+0x46>
 8010436:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010438:	2301      	movs	r3, #1
 801043a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801043c:	2300      	movs	r3, #0
 801043e:	7723      	strb	r3, [r4, #28]
}
 8010440:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010442:	2a00      	cmp	r2, #0
 8010444:	d007      	beq.n	8010456 <HAL_CRC_Accumulate+0x40>
 8010446:	000b      	movs	r3, r1
 8010448:	0092      	lsls	r2, r2, #2
 801044a:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	cb01      	ldmia	r3!, {r0}
 8010450:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010452:	428b      	cmp	r3, r1
 8010454:	d1fa      	bne.n	801044c <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	6818      	ldr	r0, [r3, #0]
      break;
 801045a:	e7ed      	b.n	8010438 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801045c:	f7ff ff46 	bl	80102ec <CRC_Handle_8>
      break;
 8010460:	e7ea      	b.n	8010438 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010462:	f7ff ff87 	bl	8010374 <CRC_Handle_16>
      break;
 8010466:	e7e7      	b.n	8010438 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010468:	2002      	movs	r0, #2
 801046a:	e7e9      	b.n	8010440 <HAL_CRC_Accumulate+0x2a>

0801046c <HAL_CRC_Calculate>:
{
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010470:	7f03      	ldrb	r3, [r0, #28]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d029      	beq.n	80104ca <HAL_CRC_Calculate+0x5e>
 8010476:	2501      	movs	r5, #1
 8010478:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801047a:	2302      	movs	r3, #2
 801047c:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 801047e:	6800      	ldr	r0, [r0, #0]
 8010480:	6883      	ldr	r3, [r0, #8]
 8010482:	432b      	orrs	r3, r5
 8010484:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010486:	6a23      	ldr	r3, [r4, #32]
 8010488:	2b02      	cmp	r3, #2
 801048a:	d01a      	beq.n	80104c2 <HAL_CRC_Calculate+0x56>
 801048c:	2b03      	cmp	r3, #3
 801048e:	d007      	beq.n	80104a0 <HAL_CRC_Calculate+0x34>
 8010490:	2b01      	cmp	r3, #1
 8010492:	d012      	beq.n	80104ba <HAL_CRC_Calculate+0x4e>
 8010494:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010496:	2301      	movs	r3, #1
 8010498:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801049a:	2300      	movs	r3, #0
 801049c:	7723      	strb	r3, [r4, #28]
}
 801049e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80104a0:	2a00      	cmp	r2, #0
 80104a2:	d007      	beq.n	80104b4 <HAL_CRC_Calculate+0x48>
 80104a4:	000b      	movs	r3, r1
 80104a6:	0092      	lsls	r2, r2, #2
 80104a8:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80104aa:	6822      	ldr	r2, [r4, #0]
 80104ac:	cb01      	ldmia	r3!, {r0}
 80104ae:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80104b0:	428b      	cmp	r3, r1
 80104b2:	d1fa      	bne.n	80104aa <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	6818      	ldr	r0, [r3, #0]
      break;
 80104b8:	e7ed      	b.n	8010496 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80104ba:	0020      	movs	r0, r4
 80104bc:	f7ff ff16 	bl	80102ec <CRC_Handle_8>
      break;
 80104c0:	e7e9      	b.n	8010496 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80104c2:	0020      	movs	r0, r4
 80104c4:	f7ff ff56 	bl	8010374 <CRC_Handle_16>
      break;
 80104c8:	e7e5      	b.n	8010496 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80104ca:	2002      	movs	r0, #2
 80104cc:	e7e7      	b.n	801049e <HAL_CRC_Calculate+0x32>

080104ce <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80104ce:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80104d0:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80104d2:	2501      	movs	r5, #1
 80104d4:	002c      	movs	r4, r5
 80104d6:	409c      	lsls	r4, r3
 80104d8:	4221      	tst	r1, r4
 80104da:	d105      	bne.n	80104e8 <HAL_CRCEx_Polynomial_Set+0x1a>
 80104dc:	3b01      	subs	r3, #1
 80104de:	d2f9      	bcs.n	80104d4 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 80104e0:	2a10      	cmp	r2, #16
 80104e2:	d103      	bne.n	80104ec <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 80104e4:	2001      	movs	r0, #1
 80104e6:	e00e      	b.n	8010506 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80104e8:	2a10      	cmp	r2, #16
 80104ea:	d011      	beq.n	8010510 <HAL_CRCEx_Polynomial_Set+0x42>
 80104ec:	2a18      	cmp	r2, #24
 80104ee:	d00b      	beq.n	8010508 <HAL_CRCEx_Polynomial_Set+0x3a>
 80104f0:	2a08      	cmp	r2, #8
 80104f2:	d011      	beq.n	8010518 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80104f4:	6803      	ldr	r3, [r0, #0]
 80104f6:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80104f8:	6801      	ldr	r1, [r0, #0]
 80104fa:	688b      	ldr	r3, [r1, #8]
 80104fc:	2018      	movs	r0, #24
 80104fe:	4383      	bics	r3, r0
 8010500:	431a      	orrs	r2, r3
 8010502:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010504:	2000      	movs	r0, #0
}
 8010506:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010508:	2b06      	cmp	r3, #6
 801050a:	d9f3      	bls.n	80104f4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801050c:	2001      	movs	r0, #1
 801050e:	e7fa      	b.n	8010506 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010510:	2b07      	cmp	r3, #7
 8010512:	d9ef      	bls.n	80104f4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010514:	2001      	movs	r0, #1
 8010516:	e7f6      	b.n	8010506 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010518:	2b0f      	cmp	r3, #15
 801051a:	d9eb      	bls.n	80104f4 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801051c:	2001      	movs	r0, #1
 801051e:	e7f2      	b.n	8010506 <HAL_CRCEx_Polynomial_Set+0x38>

08010520 <HAL_CRCEx_Init>:
{
 8010520:	b510      	push	{r4, lr}
 8010522:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010524:	7900      	ldrb	r0, [r0, #4]
 8010526:	2800      	cmp	r0, #0
 8010528:	d108      	bne.n	801053c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	4908      	ldr	r1, [pc, #32]	; (8010550 <HAL_CRCEx_Init+0x30>)
 801052e:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	6893      	ldr	r3, [r2, #8]
 8010534:	2118      	movs	r1, #24
 8010536:	438b      	bics	r3, r1
 8010538:	6093      	str	r3, [r2, #8]
}
 801053a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801053c:	68da      	ldr	r2, [r3, #12]
 801053e:	6899      	ldr	r1, [r3, #8]
 8010540:	0018      	movs	r0, r3
 8010542:	f7ff ffc4 	bl	80104ce <HAL_CRCEx_Polynomial_Set>
 8010546:	1e43      	subs	r3, r0, #1
 8010548:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 801054a:	b2c0      	uxtb	r0, r0
 801054c:	e7f5      	b.n	801053a <HAL_CRCEx_Init+0x1a>
 801054e:	46c0      	nop			; (mov r8, r8)
 8010550:	04c11db7 	.word	0x04c11db7

08010554 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010554:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010556:	2800      	cmp	r0, #0
 8010558:	d022      	beq.n	80105a0 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801055a:	2321      	movs	r3, #33	; 0x21
 801055c:	5cc3      	ldrb	r3, [r0, r3]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d102      	bne.n	8010568 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010562:	3320      	adds	r3, #32
 8010564:	2200      	movs	r2, #0
 8010566:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010568:	2121      	movs	r1, #33	; 0x21
 801056a:	2302      	movs	r3, #2
 801056c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801056e:	6804      	ldr	r4, [r0, #0]
 8010570:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010572:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <HAL_DMA_Init+0x50>)
 8010574:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010576:	6843      	ldr	r3, [r0, #4]
 8010578:	6885      	ldr	r5, [r0, #8]
 801057a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801057c:	68c5      	ldr	r5, [r0, #12]
 801057e:	432b      	orrs	r3, r5
 8010580:	6905      	ldr	r5, [r0, #16]
 8010582:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010584:	6945      	ldr	r5, [r0, #20]
 8010586:	432b      	orrs	r3, r5
 8010588:	6985      	ldr	r5, [r0, #24]
 801058a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801058c:	69c5      	ldr	r5, [r0, #28]
 801058e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010590:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010592:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010594:	2300      	movs	r3, #0
 8010596:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010598:	3301      	adds	r3, #1
 801059a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 801059c:	2000      	movs	r0, #0
}  
 801059e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80105a0:	2001      	movs	r0, #1
 80105a2:	e7fc      	b.n	801059e <HAL_DMA_Init+0x4a>
 80105a4:	ffffc00f 	.word	0xffffc00f

080105a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80105a8:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80105aa:	2420      	movs	r4, #32
 80105ac:	5d04      	ldrb	r4, [r0, r4]
 80105ae:	2c01      	cmp	r4, #1
 80105b0:	d02d      	beq.n	801060e <HAL_DMA_Start_IT+0x66>
 80105b2:	2601      	movs	r6, #1
 80105b4:	2420      	movs	r4, #32
 80105b6:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80105b8:	3401      	adds	r4, #1
 80105ba:	2502      	movs	r5, #2
 80105bc:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80105be:	6805      	ldr	r5, [r0, #0]
 80105c0:	682c      	ldr	r4, [r5, #0]
 80105c2:	43b4      	bics	r4, r6
 80105c4:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80105c6:	6804      	ldr	r4, [r0, #0]
 80105c8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80105ca:	6843      	ldr	r3, [r0, #4]
 80105cc:	2b10      	cmp	r3, #16
 80105ce:	d019      	beq.n	8010604 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80105d0:	6803      	ldr	r3, [r0, #0]
 80105d2:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80105d4:	6803      	ldr	r3, [r0, #0]
 80105d6:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80105d8:	6802      	ldr	r2, [r0, #0]
 80105da:	6813      	ldr	r3, [r2, #0]
 80105dc:	2102      	movs	r1, #2
 80105de:	430b      	orrs	r3, r1
 80105e0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80105e2:	6802      	ldr	r2, [r0, #0]
 80105e4:	6813      	ldr	r3, [r2, #0]
 80105e6:	3102      	adds	r1, #2
 80105e8:	430b      	orrs	r3, r1
 80105ea:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80105ec:	6802      	ldr	r2, [r0, #0]
 80105ee:	6813      	ldr	r3, [r2, #0]
 80105f0:	3104      	adds	r1, #4
 80105f2:	430b      	orrs	r3, r1
 80105f4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80105f6:	6802      	ldr	r2, [r0, #0]
 80105f8:	6813      	ldr	r3, [r2, #0]
 80105fa:	3907      	subs	r1, #7
 80105fc:	430b      	orrs	r3, r1
 80105fe:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010600:	2000      	movs	r0, #0
} 
 8010602:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010604:	6803      	ldr	r3, [r0, #0]
 8010606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010608:	6803      	ldr	r3, [r0, #0]
 801060a:	60d9      	str	r1, [r3, #12]
 801060c:	e7e4      	b.n	80105d8 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 801060e:	2002      	movs	r0, #2
 8010610:	e7f7      	b.n	8010602 <HAL_DMA_Start_IT+0x5a>

08010612 <HAL_DMA_Abort>:
{
 8010612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010614:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010616:	6802      	ldr	r2, [r0, #0]
 8010618:	6813      	ldr	r3, [r2, #0]
 801061a:	2101      	movs	r1, #1
 801061c:	438b      	bics	r3, r1
 801061e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010620:	f7ff fa9a 	bl	800fb58 <HAL_GetTick>
 8010624:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010626:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010628:	27fa      	movs	r7, #250	; 0xfa
 801062a:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	421e      	tst	r6, r3
 8010632:	d00f      	beq.n	8010654 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010634:	f7ff fa90 	bl	800fb58 <HAL_GetTick>
 8010638:	1b40      	subs	r0, r0, r5
 801063a:	42b8      	cmp	r0, r7
 801063c:	d9f6      	bls.n	801062c <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801063e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010640:	2220      	movs	r2, #32
 8010642:	4313      	orrs	r3, r2
 8010644:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010646:	2321      	movs	r3, #33	; 0x21
 8010648:	2103      	movs	r1, #3
 801064a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801064c:	2300      	movs	r3, #0
 801064e:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010650:	2003      	movs	r0, #3
 8010652:	e006      	b.n	8010662 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010654:	2321      	movs	r3, #33	; 0x21
 8010656:	2201      	movs	r2, #1
 8010658:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801065a:	3b01      	subs	r3, #1
 801065c:	2200      	movs	r2, #0
 801065e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010660:	2000      	movs	r0, #0
}
 8010662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010664 <HAL_DMA_IRQHandler>:
{        
 8010664:	b510      	push	{r4, lr}
 8010666:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010668:	6803      	ldr	r3, [r0, #0]
 801066a:	4ab1      	ldr	r2, [pc, #708]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d97e      	bls.n	801076e <HAL_DMA_IRQHandler+0x10a>
 8010670:	4ab0      	ldr	r2, [pc, #704]	; (8010934 <HAL_DMA_IRQHandler+0x2d0>)
 8010672:	6811      	ldr	r1, [r2, #0]
 8010674:	4ab0      	ldr	r2, [pc, #704]	; (8010938 <HAL_DMA_IRQHandler+0x2d4>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d026      	beq.n	80106c8 <HAL_DMA_IRQHandler+0x64>
 801067a:	4ab0      	ldr	r2, [pc, #704]	; (801093c <HAL_DMA_IRQHandler+0x2d8>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d05e      	beq.n	801073e <HAL_DMA_IRQHandler+0xda>
 8010680:	4aaf      	ldr	r2, [pc, #700]	; (8010940 <HAL_DMA_IRQHandler+0x2dc>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d05d      	beq.n	8010742 <HAL_DMA_IRQHandler+0xde>
 8010686:	4aaf      	ldr	r2, [pc, #700]	; (8010944 <HAL_DMA_IRQHandler+0x2e0>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d05d      	beq.n	8010748 <HAL_DMA_IRQHandler+0xe4>
 801068c:	4aae      	ldr	r2, [pc, #696]	; (8010948 <HAL_DMA_IRQHandler+0x2e4>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d05d      	beq.n	801074e <HAL_DMA_IRQHandler+0xea>
 8010692:	4aae      	ldr	r2, [pc, #696]	; (801094c <HAL_DMA_IRQHandler+0x2e8>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d05d      	beq.n	8010754 <HAL_DMA_IRQHandler+0xf0>
 8010698:	4aa5      	ldr	r2, [pc, #660]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d05d      	beq.n	801075a <HAL_DMA_IRQHandler+0xf6>
 801069e:	4aac      	ldr	r2, [pc, #688]	; (8010950 <HAL_DMA_IRQHandler+0x2ec>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d05d      	beq.n	8010760 <HAL_DMA_IRQHandler+0xfc>
 80106a4:	4aab      	ldr	r2, [pc, #684]	; (8010954 <HAL_DMA_IRQHandler+0x2f0>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d05c      	beq.n	8010764 <HAL_DMA_IRQHandler+0x100>
 80106aa:	4aab      	ldr	r2, [pc, #684]	; (8010958 <HAL_DMA_IRQHandler+0x2f4>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d05b      	beq.n	8010768 <HAL_DMA_IRQHandler+0x104>
 80106b0:	4aaa      	ldr	r2, [pc, #680]	; (801095c <HAL_DMA_IRQHandler+0x2f8>)
 80106b2:	189a      	adds	r2, r3, r2
 80106b4:	4250      	negs	r0, r2
 80106b6:	4142      	adcs	r2, r0
 80106b8:	4252      	negs	r2, r2
 80106ba:	48a9      	ldr	r0, [pc, #676]	; (8010960 <HAL_DMA_IRQHandler+0x2fc>)
 80106bc:	4002      	ands	r2, r0
 80106be:	2080      	movs	r0, #128	; 0x80
 80106c0:	0300      	lsls	r0, r0, #12
 80106c2:	4684      	mov	ip, r0
 80106c4:	4462      	add	r2, ip
 80106c6:	e000      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 80106c8:	2208      	movs	r2, #8
 80106ca:	420a      	tst	r2, r1
 80106cc:	d001      	beq.n	80106d2 <HAL_DMA_IRQHandler+0x6e>
 80106ce:	f000 fbfb 	bl	8010ec8 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106d2:	4a98      	ldr	r2, [pc, #608]	; (8010934 <HAL_DMA_IRQHandler+0x2d0>)
 80106d4:	6811      	ldr	r1, [r2, #0]
 80106d6:	4a98      	ldr	r2, [pc, #608]	; (8010938 <HAL_DMA_IRQHandler+0x2d4>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d100      	bne.n	80106de <HAL_DMA_IRQHandler+0x7a>
 80106dc:	e18d      	b.n	80109fa <HAL_DMA_IRQHandler+0x396>
 80106de:	4a97      	ldr	r2, [pc, #604]	; (801093c <HAL_DMA_IRQHandler+0x2d8>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d100      	bne.n	80106e6 <HAL_DMA_IRQHandler+0x82>
 80106e4:	e18e      	b.n	8010a04 <HAL_DMA_IRQHandler+0x3a0>
 80106e6:	4a96      	ldr	r2, [pc, #600]	; (8010940 <HAL_DMA_IRQHandler+0x2dc>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d100      	bne.n	80106ee <HAL_DMA_IRQHandler+0x8a>
 80106ec:	e18c      	b.n	8010a08 <HAL_DMA_IRQHandler+0x3a4>
 80106ee:	4a95      	ldr	r2, [pc, #596]	; (8010944 <HAL_DMA_IRQHandler+0x2e0>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d100      	bne.n	80106f6 <HAL_DMA_IRQHandler+0x92>
 80106f4:	e18b      	b.n	8010a0e <HAL_DMA_IRQHandler+0x3aa>
 80106f6:	4a94      	ldr	r2, [pc, #592]	; (8010948 <HAL_DMA_IRQHandler+0x2e4>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d100      	bne.n	80106fe <HAL_DMA_IRQHandler+0x9a>
 80106fc:	e18a      	b.n	8010a14 <HAL_DMA_IRQHandler+0x3b0>
 80106fe:	4a93      	ldr	r2, [pc, #588]	; (801094c <HAL_DMA_IRQHandler+0x2e8>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d100      	bne.n	8010706 <HAL_DMA_IRQHandler+0xa2>
 8010704:	e189      	b.n	8010a1a <HAL_DMA_IRQHandler+0x3b6>
 8010706:	4a8a      	ldr	r2, [pc, #552]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d100      	bne.n	801070e <HAL_DMA_IRQHandler+0xaa>
 801070c:	e188      	b.n	8010a20 <HAL_DMA_IRQHandler+0x3bc>
 801070e:	4a90      	ldr	r2, [pc, #576]	; (8010950 <HAL_DMA_IRQHandler+0x2ec>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d100      	bne.n	8010716 <HAL_DMA_IRQHandler+0xb2>
 8010714:	e187      	b.n	8010a26 <HAL_DMA_IRQHandler+0x3c2>
 8010716:	4a8f      	ldr	r2, [pc, #572]	; (8010954 <HAL_DMA_IRQHandler+0x2f0>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d100      	bne.n	801071e <HAL_DMA_IRQHandler+0xba>
 801071c:	e185      	b.n	8010a2a <HAL_DMA_IRQHandler+0x3c6>
 801071e:	4a8e      	ldr	r2, [pc, #568]	; (8010958 <HAL_DMA_IRQHandler+0x2f4>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d100      	bne.n	8010726 <HAL_DMA_IRQHandler+0xc2>
 8010724:	e183      	b.n	8010a2e <HAL_DMA_IRQHandler+0x3ca>
 8010726:	4a8d      	ldr	r2, [pc, #564]	; (801095c <HAL_DMA_IRQHandler+0x2f8>)
 8010728:	189a      	adds	r2, r3, r2
 801072a:	4250      	negs	r0, r2
 801072c:	4142      	adcs	r2, r0
 801072e:	4252      	negs	r2, r2
 8010730:	488c      	ldr	r0, [pc, #560]	; (8010964 <HAL_DMA_IRQHandler+0x300>)
 8010732:	4002      	ands	r2, r0
 8010734:	2080      	movs	r0, #128	; 0x80
 8010736:	02c0      	lsls	r0, r0, #11
 8010738:	4684      	mov	ip, r0
 801073a:	4462      	add	r2, ip
 801073c:	e15e      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801073e:	2280      	movs	r2, #128	; 0x80
 8010740:	e7c3      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010742:	2280      	movs	r2, #128	; 0x80
 8010744:	0112      	lsls	r2, r2, #4
 8010746:	e7c0      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010748:	2280      	movs	r2, #128	; 0x80
 801074a:	0212      	lsls	r2, r2, #8
 801074c:	e7bd      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 801074e:	2280      	movs	r2, #128	; 0x80
 8010750:	0312      	lsls	r2, r2, #12
 8010752:	e7ba      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010754:	2280      	movs	r2, #128	; 0x80
 8010756:	0412      	lsls	r2, r2, #16
 8010758:	e7b7      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 801075a:	2280      	movs	r2, #128	; 0x80
 801075c:	0512      	lsls	r2, r2, #20
 801075e:	e7b4      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010760:	2208      	movs	r2, #8
 8010762:	e7b2      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010764:	2280      	movs	r2, #128	; 0x80
 8010766:	e7b0      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 8010768:	2280      	movs	r2, #128	; 0x80
 801076a:	0112      	lsls	r2, r2, #4
 801076c:	e7ad      	b.n	80106ca <HAL_DMA_IRQHandler+0x66>
 801076e:	4a7e      	ldr	r2, [pc, #504]	; (8010968 <HAL_DMA_IRQHandler+0x304>)
 8010770:	6811      	ldr	r1, [r2, #0]
 8010772:	4a71      	ldr	r2, [pc, #452]	; (8010938 <HAL_DMA_IRQHandler+0x2d4>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d026      	beq.n	80107c6 <HAL_DMA_IRQHandler+0x162>
 8010778:	4a70      	ldr	r2, [pc, #448]	; (801093c <HAL_DMA_IRQHandler+0x2d8>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d05d      	beq.n	801083a <HAL_DMA_IRQHandler+0x1d6>
 801077e:	4a70      	ldr	r2, [pc, #448]	; (8010940 <HAL_DMA_IRQHandler+0x2dc>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d05c      	beq.n	801083e <HAL_DMA_IRQHandler+0x1da>
 8010784:	4a6f      	ldr	r2, [pc, #444]	; (8010944 <HAL_DMA_IRQHandler+0x2e0>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d05c      	beq.n	8010844 <HAL_DMA_IRQHandler+0x1e0>
 801078a:	4a6f      	ldr	r2, [pc, #444]	; (8010948 <HAL_DMA_IRQHandler+0x2e4>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d05c      	beq.n	801084a <HAL_DMA_IRQHandler+0x1e6>
 8010790:	4a6e      	ldr	r2, [pc, #440]	; (801094c <HAL_DMA_IRQHandler+0x2e8>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d05c      	beq.n	8010850 <HAL_DMA_IRQHandler+0x1ec>
 8010796:	4a66      	ldr	r2, [pc, #408]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d05c      	beq.n	8010856 <HAL_DMA_IRQHandler+0x1f2>
 801079c:	4a6c      	ldr	r2, [pc, #432]	; (8010950 <HAL_DMA_IRQHandler+0x2ec>)
 801079e:	4293      	cmp	r3, r2
 80107a0:	d05c      	beq.n	801085c <HAL_DMA_IRQHandler+0x1f8>
 80107a2:	4a6c      	ldr	r2, [pc, #432]	; (8010954 <HAL_DMA_IRQHandler+0x2f0>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d05b      	beq.n	8010860 <HAL_DMA_IRQHandler+0x1fc>
 80107a8:	4a6b      	ldr	r2, [pc, #428]	; (8010958 <HAL_DMA_IRQHandler+0x2f4>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d05a      	beq.n	8010864 <HAL_DMA_IRQHandler+0x200>
 80107ae:	4a6b      	ldr	r2, [pc, #428]	; (801095c <HAL_DMA_IRQHandler+0x2f8>)
 80107b0:	189a      	adds	r2, r3, r2
 80107b2:	4250      	negs	r0, r2
 80107b4:	4142      	adcs	r2, r0
 80107b6:	4252      	negs	r2, r2
 80107b8:	4869      	ldr	r0, [pc, #420]	; (8010960 <HAL_DMA_IRQHandler+0x2fc>)
 80107ba:	4002      	ands	r2, r0
 80107bc:	2080      	movs	r0, #128	; 0x80
 80107be:	0300      	lsls	r0, r0, #12
 80107c0:	4684      	mov	ip, r0
 80107c2:	4462      	add	r2, ip
 80107c4:	e000      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 80107c6:	2208      	movs	r2, #8
 80107c8:	420a      	tst	r2, r1
 80107ca:	d000      	beq.n	80107ce <HAL_DMA_IRQHandler+0x16a>
 80107cc:	e376      	b.n	8010ebc <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107ce:	4a66      	ldr	r2, [pc, #408]	; (8010968 <HAL_DMA_IRQHandler+0x304>)
 80107d0:	6811      	ldr	r1, [r2, #0]
 80107d2:	4a59      	ldr	r2, [pc, #356]	; (8010938 <HAL_DMA_IRQHandler+0x2d4>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d100      	bne.n	80107da <HAL_DMA_IRQHandler+0x176>
 80107d8:	e12c      	b.n	8010a34 <HAL_DMA_IRQHandler+0x3d0>
 80107da:	4a58      	ldr	r2, [pc, #352]	; (801093c <HAL_DMA_IRQHandler+0x2d8>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d100      	bne.n	80107e2 <HAL_DMA_IRQHandler+0x17e>
 80107e0:	e16e      	b.n	8010ac0 <HAL_DMA_IRQHandler+0x45c>
 80107e2:	4a57      	ldr	r2, [pc, #348]	; (8010940 <HAL_DMA_IRQHandler+0x2dc>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d100      	bne.n	80107ea <HAL_DMA_IRQHandler+0x186>
 80107e8:	e16c      	b.n	8010ac4 <HAL_DMA_IRQHandler+0x460>
 80107ea:	4a56      	ldr	r2, [pc, #344]	; (8010944 <HAL_DMA_IRQHandler+0x2e0>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d100      	bne.n	80107f2 <HAL_DMA_IRQHandler+0x18e>
 80107f0:	e16b      	b.n	8010aca <HAL_DMA_IRQHandler+0x466>
 80107f2:	4a55      	ldr	r2, [pc, #340]	; (8010948 <HAL_DMA_IRQHandler+0x2e4>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d100      	bne.n	80107fa <HAL_DMA_IRQHandler+0x196>
 80107f8:	e16a      	b.n	8010ad0 <HAL_DMA_IRQHandler+0x46c>
 80107fa:	4a54      	ldr	r2, [pc, #336]	; (801094c <HAL_DMA_IRQHandler+0x2e8>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d100      	bne.n	8010802 <HAL_DMA_IRQHandler+0x19e>
 8010800:	e169      	b.n	8010ad6 <HAL_DMA_IRQHandler+0x472>
 8010802:	4a4b      	ldr	r2, [pc, #300]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d100      	bne.n	801080a <HAL_DMA_IRQHandler+0x1a6>
 8010808:	e168      	b.n	8010adc <HAL_DMA_IRQHandler+0x478>
 801080a:	4a51      	ldr	r2, [pc, #324]	; (8010950 <HAL_DMA_IRQHandler+0x2ec>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d100      	bne.n	8010812 <HAL_DMA_IRQHandler+0x1ae>
 8010810:	e167      	b.n	8010ae2 <HAL_DMA_IRQHandler+0x47e>
 8010812:	4a50      	ldr	r2, [pc, #320]	; (8010954 <HAL_DMA_IRQHandler+0x2f0>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d100      	bne.n	801081a <HAL_DMA_IRQHandler+0x1b6>
 8010818:	e165      	b.n	8010ae6 <HAL_DMA_IRQHandler+0x482>
 801081a:	4a4f      	ldr	r2, [pc, #316]	; (8010958 <HAL_DMA_IRQHandler+0x2f4>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d100      	bne.n	8010822 <HAL_DMA_IRQHandler+0x1be>
 8010820:	e163      	b.n	8010aea <HAL_DMA_IRQHandler+0x486>
 8010822:	4a4e      	ldr	r2, [pc, #312]	; (801095c <HAL_DMA_IRQHandler+0x2f8>)
 8010824:	189a      	adds	r2, r3, r2
 8010826:	4250      	negs	r0, r2
 8010828:	4142      	adcs	r2, r0
 801082a:	4252      	negs	r2, r2
 801082c:	484d      	ldr	r0, [pc, #308]	; (8010964 <HAL_DMA_IRQHandler+0x300>)
 801082e:	4002      	ands	r2, r0
 8010830:	2080      	movs	r0, #128	; 0x80
 8010832:	02c0      	lsls	r0, r0, #11
 8010834:	4684      	mov	ip, r0
 8010836:	4462      	add	r2, ip
 8010838:	e0fd      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801083a:	2280      	movs	r2, #128	; 0x80
 801083c:	e7c4      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 801083e:	2280      	movs	r2, #128	; 0x80
 8010840:	0112      	lsls	r2, r2, #4
 8010842:	e7c1      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 8010844:	2280      	movs	r2, #128	; 0x80
 8010846:	0212      	lsls	r2, r2, #8
 8010848:	e7be      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 801084a:	2280      	movs	r2, #128	; 0x80
 801084c:	0312      	lsls	r2, r2, #12
 801084e:	e7bb      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 8010850:	2280      	movs	r2, #128	; 0x80
 8010852:	0412      	lsls	r2, r2, #16
 8010854:	e7b8      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 8010856:	2280      	movs	r2, #128	; 0x80
 8010858:	0512      	lsls	r2, r2, #20
 801085a:	e7b5      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 801085c:	2208      	movs	r2, #8
 801085e:	e7b3      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 8010860:	2280      	movs	r2, #128	; 0x80
 8010862:	e7b1      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
 8010864:	2280      	movs	r2, #128	; 0x80
 8010866:	0112      	lsls	r2, r2, #4
 8010868:	e7ae      	b.n	80107c8 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	2108      	movs	r1, #8
 801086e:	438a      	bics	r2, r1
 8010870:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010872:	6823      	ldr	r3, [r4, #0]
 8010874:	4a2e      	ldr	r2, [pc, #184]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d978      	bls.n	801096c <HAL_DMA_IRQHandler+0x308>
 801087a:	4a2f      	ldr	r2, [pc, #188]	; (8010938 <HAL_DMA_IRQHandler+0x2d4>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d027      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x26c>
 8010880:	4a2e      	ldr	r2, [pc, #184]	; (801093c <HAL_DMA_IRQHandler+0x2d8>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d03c      	beq.n	8010900 <HAL_DMA_IRQHandler+0x29c>
 8010886:	4a2e      	ldr	r2, [pc, #184]	; (8010940 <HAL_DMA_IRQHandler+0x2dc>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d03b      	beq.n	8010904 <HAL_DMA_IRQHandler+0x2a0>
 801088c:	4a2d      	ldr	r2, [pc, #180]	; (8010944 <HAL_DMA_IRQHandler+0x2e0>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d03b      	beq.n	801090a <HAL_DMA_IRQHandler+0x2a6>
 8010892:	4a2d      	ldr	r2, [pc, #180]	; (8010948 <HAL_DMA_IRQHandler+0x2e4>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d03b      	beq.n	8010910 <HAL_DMA_IRQHandler+0x2ac>
 8010898:	4a2c      	ldr	r2, [pc, #176]	; (801094c <HAL_DMA_IRQHandler+0x2e8>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d03b      	beq.n	8010916 <HAL_DMA_IRQHandler+0x2b2>
 801089e:	4a24      	ldr	r2, [pc, #144]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d03b      	beq.n	801091c <HAL_DMA_IRQHandler+0x2b8>
 80108a4:	4a2a      	ldr	r2, [pc, #168]	; (8010950 <HAL_DMA_IRQHandler+0x2ec>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d03b      	beq.n	8010922 <HAL_DMA_IRQHandler+0x2be>
 80108aa:	4a2a      	ldr	r2, [pc, #168]	; (8010954 <HAL_DMA_IRQHandler+0x2f0>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d03a      	beq.n	8010926 <HAL_DMA_IRQHandler+0x2c2>
 80108b0:	4a29      	ldr	r2, [pc, #164]	; (8010958 <HAL_DMA_IRQHandler+0x2f4>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d039      	beq.n	801092a <HAL_DMA_IRQHandler+0x2c6>
 80108b6:	4a29      	ldr	r2, [pc, #164]	; (801095c <HAL_DMA_IRQHandler+0x2f8>)
 80108b8:	4694      	mov	ip, r2
 80108ba:	4463      	add	r3, ip
 80108bc:	425a      	negs	r2, r3
 80108be:	4153      	adcs	r3, r2
 80108c0:	425b      	negs	r3, r3
 80108c2:	4a27      	ldr	r2, [pc, #156]	; (8010960 <HAL_DMA_IRQHandler+0x2fc>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	2280      	movs	r2, #128	; 0x80
 80108c8:	0312      	lsls	r2, r2, #12
 80108ca:	4694      	mov	ip, r2
 80108cc:	4463      	add	r3, ip
 80108ce:	e000      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 80108d0:	2308      	movs	r3, #8
 80108d2:	4a18      	ldr	r2, [pc, #96]	; (8010934 <HAL_DMA_IRQHandler+0x2d0>)
 80108d4:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108d8:	2201      	movs	r2, #1
 80108da:	4313      	orrs	r3, r2
 80108dc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80108de:	2321      	movs	r3, #33	; 0x21
 80108e0:	3203      	adds	r2, #3
 80108e2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80108e4:	3b01      	subs	r3, #1
 80108e6:	2200      	movs	r2, #0
 80108e8:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 80108f0:	0020      	movs	r0, r4
 80108f2:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	4a0e      	ldr	r2, [pc, #56]	; (8010930 <HAL_DMA_IRQHandler+0x2cc>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d800      	bhi.n	80108fe <HAL_DMA_IRQHandler+0x29a>
 80108fc:	e767      	b.n	80107ce <HAL_DMA_IRQHandler+0x16a>
 80108fe:	e6e8      	b.n	80106d2 <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010900:	2380      	movs	r3, #128	; 0x80
 8010902:	e7e6      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010904:	2380      	movs	r3, #128	; 0x80
 8010906:	011b      	lsls	r3, r3, #4
 8010908:	e7e3      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 801090a:	2380      	movs	r3, #128	; 0x80
 801090c:	021b      	lsls	r3, r3, #8
 801090e:	e7e0      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010910:	2380      	movs	r3, #128	; 0x80
 8010912:	031b      	lsls	r3, r3, #12
 8010914:	e7dd      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010916:	2380      	movs	r3, #128	; 0x80
 8010918:	041b      	lsls	r3, r3, #16
 801091a:	e7da      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 801091c:	2380      	movs	r3, #128	; 0x80
 801091e:	051b      	lsls	r3, r3, #20
 8010920:	e7d7      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010922:	2308      	movs	r3, #8
 8010924:	e7d5      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010926:	2380      	movs	r3, #128	; 0x80
 8010928:	e7d3      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 801092a:	2380      	movs	r3, #128	; 0x80
 801092c:	011b      	lsls	r3, r3, #4
 801092e:	e7d0      	b.n	80108d2 <HAL_DMA_IRQHandler+0x26e>
 8010930:	40020080 	.word	0x40020080
 8010934:	40020400 	.word	0x40020400
 8010938:	40020008 	.word	0x40020008
 801093c:	4002001c 	.word	0x4002001c
 8010940:	40020030 	.word	0x40020030
 8010944:	40020044 	.word	0x40020044
 8010948:	40020058 	.word	0x40020058
 801094c:	4002006c 	.word	0x4002006c
 8010950:	40020408 	.word	0x40020408
 8010954:	4002041c 	.word	0x4002041c
 8010958:	40020430 	.word	0x40020430
 801095c:	bffdfbbc 	.word	0xbffdfbbc
 8010960:	fff88000 	.word	0xfff88000
 8010964:	fffc4000 	.word	0xfffc4000
 8010968:	40020000 	.word	0x40020000
 801096c:	4ab3      	ldr	r2, [pc, #716]	; (8010c3c <HAL_DMA_IRQHandler+0x5d8>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d027      	beq.n	80109c2 <HAL_DMA_IRQHandler+0x35e>
 8010972:	4ab3      	ldr	r2, [pc, #716]	; (8010c40 <HAL_DMA_IRQHandler+0x5dc>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d028      	beq.n	80109ca <HAL_DMA_IRQHandler+0x366>
 8010978:	4ab2      	ldr	r2, [pc, #712]	; (8010c44 <HAL_DMA_IRQHandler+0x5e0>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d027      	beq.n	80109ce <HAL_DMA_IRQHandler+0x36a>
 801097e:	4ab2      	ldr	r2, [pc, #712]	; (8010c48 <HAL_DMA_IRQHandler+0x5e4>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d027      	beq.n	80109d4 <HAL_DMA_IRQHandler+0x370>
 8010984:	4ab1      	ldr	r2, [pc, #708]	; (8010c4c <HAL_DMA_IRQHandler+0x5e8>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d027      	beq.n	80109da <HAL_DMA_IRQHandler+0x376>
 801098a:	4ab1      	ldr	r2, [pc, #708]	; (8010c50 <HAL_DMA_IRQHandler+0x5ec>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d027      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x37c>
 8010990:	4ab0      	ldr	r2, [pc, #704]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d027      	beq.n	80109e6 <HAL_DMA_IRQHandler+0x382>
 8010996:	4ab0      	ldr	r2, [pc, #704]	; (8010c58 <HAL_DMA_IRQHandler+0x5f4>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d027      	beq.n	80109ec <HAL_DMA_IRQHandler+0x388>
 801099c:	4aaf      	ldr	r2, [pc, #700]	; (8010c5c <HAL_DMA_IRQHandler+0x5f8>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d026      	beq.n	80109f0 <HAL_DMA_IRQHandler+0x38c>
 80109a2:	4aaf      	ldr	r2, [pc, #700]	; (8010c60 <HAL_DMA_IRQHandler+0x5fc>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d025      	beq.n	80109f4 <HAL_DMA_IRQHandler+0x390>
 80109a8:	4aae      	ldr	r2, [pc, #696]	; (8010c64 <HAL_DMA_IRQHandler+0x600>)
 80109aa:	4694      	mov	ip, r2
 80109ac:	4463      	add	r3, ip
 80109ae:	425a      	negs	r2, r3
 80109b0:	4153      	adcs	r3, r2
 80109b2:	425b      	negs	r3, r3
 80109b4:	4aac      	ldr	r2, [pc, #688]	; (8010c68 <HAL_DMA_IRQHandler+0x604>)
 80109b6:	4013      	ands	r3, r2
 80109b8:	2280      	movs	r2, #128	; 0x80
 80109ba:	0312      	lsls	r2, r2, #12
 80109bc:	4694      	mov	ip, r2
 80109be:	4463      	add	r3, ip
 80109c0:	e000      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109c2:	2308      	movs	r3, #8
 80109c4:	4aa9      	ldr	r2, [pc, #676]	; (8010c6c <HAL_DMA_IRQHandler+0x608>)
 80109c6:	6053      	str	r3, [r2, #4]
 80109c8:	e785      	b.n	80108d6 <HAL_DMA_IRQHandler+0x272>
 80109ca:	2380      	movs	r3, #128	; 0x80
 80109cc:	e7fa      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109ce:	2380      	movs	r3, #128	; 0x80
 80109d0:	011b      	lsls	r3, r3, #4
 80109d2:	e7f7      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109d4:	2380      	movs	r3, #128	; 0x80
 80109d6:	021b      	lsls	r3, r3, #8
 80109d8:	e7f4      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109da:	2380      	movs	r3, #128	; 0x80
 80109dc:	031b      	lsls	r3, r3, #12
 80109de:	e7f1      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109e0:	2380      	movs	r3, #128	; 0x80
 80109e2:	041b      	lsls	r3, r3, #16
 80109e4:	e7ee      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109e6:	2380      	movs	r3, #128	; 0x80
 80109e8:	051b      	lsls	r3, r3, #20
 80109ea:	e7eb      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109ec:	2308      	movs	r3, #8
 80109ee:	e7e9      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109f0:	2380      	movs	r3, #128	; 0x80
 80109f2:	e7e7      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
 80109f4:	2380      	movs	r3, #128	; 0x80
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	e7e4      	b.n	80109c4 <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109fa:	2204      	movs	r2, #4
 80109fc:	420a      	tst	r2, r1
 80109fe:	d11d      	bne.n	8010a3c <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010a00:	6821      	ldr	r1, [r4, #0]
 8010a02:	e085      	b.n	8010b10 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a04:	2240      	movs	r2, #64	; 0x40
 8010a06:	e7f9      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a08:	2280      	movs	r2, #128	; 0x80
 8010a0a:	00d2      	lsls	r2, r2, #3
 8010a0c:	e7f6      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a0e:	2280      	movs	r2, #128	; 0x80
 8010a10:	01d2      	lsls	r2, r2, #7
 8010a12:	e7f3      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a14:	2280      	movs	r2, #128	; 0x80
 8010a16:	02d2      	lsls	r2, r2, #11
 8010a18:	e7f0      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a1a:	2280      	movs	r2, #128	; 0x80
 8010a1c:	03d2      	lsls	r2, r2, #15
 8010a1e:	e7ed      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a20:	2280      	movs	r2, #128	; 0x80
 8010a22:	04d2      	lsls	r2, r2, #19
 8010a24:	e7ea      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a26:	2204      	movs	r2, #4
 8010a28:	e7e8      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a2a:	2240      	movs	r2, #64	; 0x40
 8010a2c:	e7e6      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a2e:	2280      	movs	r2, #128	; 0x80
 8010a30:	00d2      	lsls	r2, r2, #3
 8010a32:	e7e3      	b.n	80109fc <HAL_DMA_IRQHandler+0x398>
 8010a34:	2204      	movs	r2, #4
 8010a36:	420a      	tst	r2, r1
 8010a38:	d100      	bne.n	8010a3c <HAL_DMA_IRQHandler+0x3d8>
 8010a3a:	e208      	b.n	8010e4e <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	0752      	lsls	r2, r2, #29
 8010a40:	d561      	bpl.n	8010b06 <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	0692      	lsls	r2, r2, #26
 8010a46:	d403      	bmi.n	8010a50 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	2104      	movs	r1, #4
 8010a4c:	438a      	bics	r2, r1
 8010a4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	4a80      	ldr	r2, [pc, #512]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d800      	bhi.n	8010a5a <HAL_DMA_IRQHandler+0x3f6>
 8010a58:	e0a8      	b.n	8010bac <HAL_DMA_IRQHandler+0x548>
 8010a5a:	4a78      	ldr	r2, [pc, #480]	; (8010c3c <HAL_DMA_IRQHandler+0x5d8>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d047      	beq.n	8010af0 <HAL_DMA_IRQHandler+0x48c>
 8010a60:	4a77      	ldr	r2, [pc, #476]	; (8010c40 <HAL_DMA_IRQHandler+0x5dc>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d100      	bne.n	8010a68 <HAL_DMA_IRQHandler+0x404>
 8010a66:	e089      	b.n	8010b7c <HAL_DMA_IRQHandler+0x518>
 8010a68:	4a76      	ldr	r2, [pc, #472]	; (8010c44 <HAL_DMA_IRQHandler+0x5e0>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d100      	bne.n	8010a70 <HAL_DMA_IRQHandler+0x40c>
 8010a6e:	e087      	b.n	8010b80 <HAL_DMA_IRQHandler+0x51c>
 8010a70:	4a75      	ldr	r2, [pc, #468]	; (8010c48 <HAL_DMA_IRQHandler+0x5e4>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d100      	bne.n	8010a78 <HAL_DMA_IRQHandler+0x414>
 8010a76:	e086      	b.n	8010b86 <HAL_DMA_IRQHandler+0x522>
 8010a78:	4a74      	ldr	r2, [pc, #464]	; (8010c4c <HAL_DMA_IRQHandler+0x5e8>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d100      	bne.n	8010a80 <HAL_DMA_IRQHandler+0x41c>
 8010a7e:	e085      	b.n	8010b8c <HAL_DMA_IRQHandler+0x528>
 8010a80:	4a73      	ldr	r2, [pc, #460]	; (8010c50 <HAL_DMA_IRQHandler+0x5ec>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d100      	bne.n	8010a88 <HAL_DMA_IRQHandler+0x424>
 8010a86:	e084      	b.n	8010b92 <HAL_DMA_IRQHandler+0x52e>
 8010a88:	4a72      	ldr	r2, [pc, #456]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d100      	bne.n	8010a90 <HAL_DMA_IRQHandler+0x42c>
 8010a8e:	e083      	b.n	8010b98 <HAL_DMA_IRQHandler+0x534>
 8010a90:	4a71      	ldr	r2, [pc, #452]	; (8010c58 <HAL_DMA_IRQHandler+0x5f4>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d100      	bne.n	8010a98 <HAL_DMA_IRQHandler+0x434>
 8010a96:	e082      	b.n	8010b9e <HAL_DMA_IRQHandler+0x53a>
 8010a98:	4a70      	ldr	r2, [pc, #448]	; (8010c5c <HAL_DMA_IRQHandler+0x5f8>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d100      	bne.n	8010aa0 <HAL_DMA_IRQHandler+0x43c>
 8010a9e:	e080      	b.n	8010ba2 <HAL_DMA_IRQHandler+0x53e>
 8010aa0:	4a6f      	ldr	r2, [pc, #444]	; (8010c60 <HAL_DMA_IRQHandler+0x5fc>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d07f      	beq.n	8010ba6 <HAL_DMA_IRQHandler+0x542>
 8010aa6:	4a6f      	ldr	r2, [pc, #444]	; (8010c64 <HAL_DMA_IRQHandler+0x600>)
 8010aa8:	4694      	mov	ip, r2
 8010aaa:	4463      	add	r3, ip
 8010aac:	425a      	negs	r2, r3
 8010aae:	4153      	adcs	r3, r2
 8010ab0:	425b      	negs	r3, r3
 8010ab2:	4a6f      	ldr	r2, [pc, #444]	; (8010c70 <HAL_DMA_IRQHandler+0x60c>)
 8010ab4:	4013      	ands	r3, r2
 8010ab6:	2280      	movs	r2, #128	; 0x80
 8010ab8:	02d2      	lsls	r2, r2, #11
 8010aba:	4694      	mov	ip, r2
 8010abc:	4463      	add	r3, ip
 8010abe:	e018      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ac0:	2240      	movs	r2, #64	; 0x40
 8010ac2:	e7b8      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010ac4:	2280      	movs	r2, #128	; 0x80
 8010ac6:	00d2      	lsls	r2, r2, #3
 8010ac8:	e7b5      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010aca:	2280      	movs	r2, #128	; 0x80
 8010acc:	01d2      	lsls	r2, r2, #7
 8010ace:	e7b2      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010ad0:	2280      	movs	r2, #128	; 0x80
 8010ad2:	02d2      	lsls	r2, r2, #11
 8010ad4:	e7af      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010ad6:	2280      	movs	r2, #128	; 0x80
 8010ad8:	03d2      	lsls	r2, r2, #15
 8010ada:	e7ac      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010adc:	2280      	movs	r2, #128	; 0x80
 8010ade:	04d2      	lsls	r2, r2, #19
 8010ae0:	e7a9      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010ae2:	2204      	movs	r2, #4
 8010ae4:	e7a7      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010ae6:	2240      	movs	r2, #64	; 0x40
 8010ae8:	e7a5      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
 8010aea:	2280      	movs	r2, #128	; 0x80
 8010aec:	00d2      	lsls	r2, r2, #3
 8010aee:	e7a2      	b.n	8010a36 <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010af0:	2304      	movs	r3, #4
 8010af2:	4a60      	ldr	r2, [pc, #384]	; (8010c74 <HAL_DMA_IRQHandler+0x610>)
 8010af4:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010af6:	2321      	movs	r3, #33	; 0x21
 8010af8:	2211      	movs	r2, #17
 8010afa:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 8010b02:	0020      	movs	r0, r4
 8010b04:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b06:	6821      	ldr	r1, [r4, #0]
 8010b08:	4b52      	ldr	r3, [pc, #328]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010b0a:	4299      	cmp	r1, r3
 8010b0c:	d800      	bhi.n	8010b10 <HAL_DMA_IRQHandler+0x4ac>
 8010b0e:	e19f      	b.n	8010e50 <HAL_DMA_IRQHandler+0x7ec>
 8010b10:	4b58      	ldr	r3, [pc, #352]	; (8010c74 <HAL_DMA_IRQHandler+0x610>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	4a49      	ldr	r2, [pc, #292]	; (8010c3c <HAL_DMA_IRQHandler+0x5d8>)
 8010b16:	4291      	cmp	r1, r2
 8010b18:	d100      	bne.n	8010b1c <HAL_DMA_IRQHandler+0x4b8>
 8010b1a:	e0af      	b.n	8010c7c <HAL_DMA_IRQHandler+0x618>
 8010b1c:	4a48      	ldr	r2, [pc, #288]	; (8010c40 <HAL_DMA_IRQHandler+0x5dc>)
 8010b1e:	4291      	cmp	r1, r2
 8010b20:	d100      	bne.n	8010b24 <HAL_DMA_IRQHandler+0x4c0>
 8010b22:	e0ee      	b.n	8010d02 <HAL_DMA_IRQHandler+0x69e>
 8010b24:	4a47      	ldr	r2, [pc, #284]	; (8010c44 <HAL_DMA_IRQHandler+0x5e0>)
 8010b26:	4291      	cmp	r1, r2
 8010b28:	d100      	bne.n	8010b2c <HAL_DMA_IRQHandler+0x4c8>
 8010b2a:	e0ec      	b.n	8010d06 <HAL_DMA_IRQHandler+0x6a2>
 8010b2c:	4a46      	ldr	r2, [pc, #280]	; (8010c48 <HAL_DMA_IRQHandler+0x5e4>)
 8010b2e:	4291      	cmp	r1, r2
 8010b30:	d100      	bne.n	8010b34 <HAL_DMA_IRQHandler+0x4d0>
 8010b32:	e0eb      	b.n	8010d0c <HAL_DMA_IRQHandler+0x6a8>
 8010b34:	4b45      	ldr	r3, [pc, #276]	; (8010c4c <HAL_DMA_IRQHandler+0x5e8>)
 8010b36:	4299      	cmp	r1, r3
 8010b38:	d100      	bne.n	8010b3c <HAL_DMA_IRQHandler+0x4d8>
 8010b3a:	e0ea      	b.n	8010d12 <HAL_DMA_IRQHandler+0x6ae>
 8010b3c:	4b44      	ldr	r3, [pc, #272]	; (8010c50 <HAL_DMA_IRQHandler+0x5ec>)
 8010b3e:	4299      	cmp	r1, r3
 8010b40:	d100      	bne.n	8010b44 <HAL_DMA_IRQHandler+0x4e0>
 8010b42:	e0e9      	b.n	8010d18 <HAL_DMA_IRQHandler+0x6b4>
 8010b44:	4b43      	ldr	r3, [pc, #268]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010b46:	4299      	cmp	r1, r3
 8010b48:	d100      	bne.n	8010b4c <HAL_DMA_IRQHandler+0x4e8>
 8010b4a:	e0e8      	b.n	8010d1e <HAL_DMA_IRQHandler+0x6ba>
 8010b4c:	4b42      	ldr	r3, [pc, #264]	; (8010c58 <HAL_DMA_IRQHandler+0x5f4>)
 8010b4e:	4299      	cmp	r1, r3
 8010b50:	d100      	bne.n	8010b54 <HAL_DMA_IRQHandler+0x4f0>
 8010b52:	e0e7      	b.n	8010d24 <HAL_DMA_IRQHandler+0x6c0>
 8010b54:	4b41      	ldr	r3, [pc, #260]	; (8010c5c <HAL_DMA_IRQHandler+0x5f8>)
 8010b56:	4299      	cmp	r1, r3
 8010b58:	d100      	bne.n	8010b5c <HAL_DMA_IRQHandler+0x4f8>
 8010b5a:	e0e5      	b.n	8010d28 <HAL_DMA_IRQHandler+0x6c4>
 8010b5c:	4b40      	ldr	r3, [pc, #256]	; (8010c60 <HAL_DMA_IRQHandler+0x5fc>)
 8010b5e:	4299      	cmp	r1, r3
 8010b60:	d100      	bne.n	8010b64 <HAL_DMA_IRQHandler+0x500>
 8010b62:	e0e3      	b.n	8010d2c <HAL_DMA_IRQHandler+0x6c8>
 8010b64:	4b3f      	ldr	r3, [pc, #252]	; (8010c64 <HAL_DMA_IRQHandler+0x600>)
 8010b66:	18ca      	adds	r2, r1, r3
 8010b68:	4253      	negs	r3, r2
 8010b6a:	415a      	adcs	r2, r3
 8010b6c:	4252      	negs	r2, r2
 8010b6e:	4b42      	ldr	r3, [pc, #264]	; (8010c78 <HAL_DMA_IRQHandler+0x614>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	2280      	movs	r2, #128	; 0x80
 8010b74:	0292      	lsls	r2, r2, #10
 8010b76:	4694      	mov	ip, r2
 8010b78:	4463      	add	r3, ip
 8010b7a:	e080      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b7c:	2340      	movs	r3, #64	; 0x40
 8010b7e:	e7b8      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b80:	2380      	movs	r3, #128	; 0x80
 8010b82:	00db      	lsls	r3, r3, #3
 8010b84:	e7b5      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b86:	2380      	movs	r3, #128	; 0x80
 8010b88:	01db      	lsls	r3, r3, #7
 8010b8a:	e7b2      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b8c:	2380      	movs	r3, #128	; 0x80
 8010b8e:	02db      	lsls	r3, r3, #11
 8010b90:	e7af      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b92:	2380      	movs	r3, #128	; 0x80
 8010b94:	03db      	lsls	r3, r3, #15
 8010b96:	e7ac      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b98:	2380      	movs	r3, #128	; 0x80
 8010b9a:	04db      	lsls	r3, r3, #19
 8010b9c:	e7a9      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010b9e:	2304      	movs	r3, #4
 8010ba0:	e7a7      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010ba2:	2340      	movs	r3, #64	; 0x40
 8010ba4:	e7a5      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010ba6:	2380      	movs	r3, #128	; 0x80
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	e7a2      	b.n	8010af2 <HAL_DMA_IRQHandler+0x48e>
 8010bac:	4a23      	ldr	r2, [pc, #140]	; (8010c3c <HAL_DMA_IRQHandler+0x5d8>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d027      	beq.n	8010c02 <HAL_DMA_IRQHandler+0x59e>
 8010bb2:	4a23      	ldr	r2, [pc, #140]	; (8010c40 <HAL_DMA_IRQHandler+0x5dc>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d028      	beq.n	8010c0a <HAL_DMA_IRQHandler+0x5a6>
 8010bb8:	4a22      	ldr	r2, [pc, #136]	; (8010c44 <HAL_DMA_IRQHandler+0x5e0>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d027      	beq.n	8010c0e <HAL_DMA_IRQHandler+0x5aa>
 8010bbe:	4a22      	ldr	r2, [pc, #136]	; (8010c48 <HAL_DMA_IRQHandler+0x5e4>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d027      	beq.n	8010c14 <HAL_DMA_IRQHandler+0x5b0>
 8010bc4:	4a21      	ldr	r2, [pc, #132]	; (8010c4c <HAL_DMA_IRQHandler+0x5e8>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d027      	beq.n	8010c1a <HAL_DMA_IRQHandler+0x5b6>
 8010bca:	4a21      	ldr	r2, [pc, #132]	; (8010c50 <HAL_DMA_IRQHandler+0x5ec>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d027      	beq.n	8010c20 <HAL_DMA_IRQHandler+0x5bc>
 8010bd0:	4a20      	ldr	r2, [pc, #128]	; (8010c54 <HAL_DMA_IRQHandler+0x5f0>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d027      	beq.n	8010c26 <HAL_DMA_IRQHandler+0x5c2>
 8010bd6:	4a20      	ldr	r2, [pc, #128]	; (8010c58 <HAL_DMA_IRQHandler+0x5f4>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d027      	beq.n	8010c2c <HAL_DMA_IRQHandler+0x5c8>
 8010bdc:	4a1f      	ldr	r2, [pc, #124]	; (8010c5c <HAL_DMA_IRQHandler+0x5f8>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d026      	beq.n	8010c30 <HAL_DMA_IRQHandler+0x5cc>
 8010be2:	4a1f      	ldr	r2, [pc, #124]	; (8010c60 <HAL_DMA_IRQHandler+0x5fc>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d025      	beq.n	8010c34 <HAL_DMA_IRQHandler+0x5d0>
 8010be8:	4a1e      	ldr	r2, [pc, #120]	; (8010c64 <HAL_DMA_IRQHandler+0x600>)
 8010bea:	4694      	mov	ip, r2
 8010bec:	4463      	add	r3, ip
 8010bee:	425a      	negs	r2, r3
 8010bf0:	4153      	adcs	r3, r2
 8010bf2:	425b      	negs	r3, r3
 8010bf4:	4a1e      	ldr	r2, [pc, #120]	; (8010c70 <HAL_DMA_IRQHandler+0x60c>)
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	2280      	movs	r2, #128	; 0x80
 8010bfa:	02d2      	lsls	r2, r2, #11
 8010bfc:	4694      	mov	ip, r2
 8010bfe:	4463      	add	r3, ip
 8010c00:	e000      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c02:	2304      	movs	r3, #4
 8010c04:	4a19      	ldr	r2, [pc, #100]	; (8010c6c <HAL_DMA_IRQHandler+0x608>)
 8010c06:	6053      	str	r3, [r2, #4]
 8010c08:	e775      	b.n	8010af6 <HAL_DMA_IRQHandler+0x492>
 8010c0a:	2340      	movs	r3, #64	; 0x40
 8010c0c:	e7fa      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c0e:	2380      	movs	r3, #128	; 0x80
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	e7f7      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c14:	2380      	movs	r3, #128	; 0x80
 8010c16:	01db      	lsls	r3, r3, #7
 8010c18:	e7f4      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c1a:	2380      	movs	r3, #128	; 0x80
 8010c1c:	02db      	lsls	r3, r3, #11
 8010c1e:	e7f1      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c20:	2380      	movs	r3, #128	; 0x80
 8010c22:	03db      	lsls	r3, r3, #15
 8010c24:	e7ee      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c26:	2380      	movs	r3, #128	; 0x80
 8010c28:	04db      	lsls	r3, r3, #19
 8010c2a:	e7eb      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c2c:	2304      	movs	r3, #4
 8010c2e:	e7e9      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c30:	2340      	movs	r3, #64	; 0x40
 8010c32:	e7e7      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c34:	2380      	movs	r3, #128	; 0x80
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	e7e4      	b.n	8010c04 <HAL_DMA_IRQHandler+0x5a0>
 8010c3a:	46c0      	nop			; (mov r8, r8)
 8010c3c:	40020008 	.word	0x40020008
 8010c40:	4002001c 	.word	0x4002001c
 8010c44:	40020030 	.word	0x40020030
 8010c48:	40020044 	.word	0x40020044
 8010c4c:	40020058 	.word	0x40020058
 8010c50:	4002006c 	.word	0x4002006c
 8010c54:	40020080 	.word	0x40020080
 8010c58:	40020408 	.word	0x40020408
 8010c5c:	4002041c 	.word	0x4002041c
 8010c60:	40020430 	.word	0x40020430
 8010c64:	bffdfbbc 	.word	0xbffdfbbc
 8010c68:	fff88000 	.word	0xfff88000
 8010c6c:	40020000 	.word	0x40020000
 8010c70:	fffc4000 	.word	0xfffc4000
 8010c74:	40020400 	.word	0x40020400
 8010c78:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	4003      	ands	r3, r0
 8010c80:	1e5a      	subs	r2, r3, #1
 8010c82:	4193      	sbcs	r3, r2
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d100      	bne.n	8010c8c <HAL_DMA_IRQHandler+0x628>
 8010c8a:	e080      	b.n	8010d8e <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010c8c:	680b      	ldr	r3, [r1, #0]
 8010c8e:	079b      	lsls	r3, r3, #30
 8010c90:	d57d      	bpl.n	8010d8e <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010c92:	680b      	ldr	r3, [r1, #0]
 8010c94:	069b      	lsls	r3, r3, #26
 8010c96:	d403      	bmi.n	8010ca0 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010c98:	680b      	ldr	r3, [r1, #0]
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	4393      	bics	r3, r2
 8010c9e:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010ca0:	6823      	ldr	r3, [r4, #0]
 8010ca2:	4a8d      	ldr	r2, [pc, #564]	; (8010ed8 <HAL_DMA_IRQHandler+0x874>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d800      	bhi.n	8010caa <HAL_DMA_IRQHandler+0x646>
 8010ca8:	e08a      	b.n	8010dc0 <HAL_DMA_IRQHandler+0x75c>
 8010caa:	4a8c      	ldr	r2, [pc, #560]	; (8010edc <HAL_DMA_IRQHandler+0x878>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d05e      	beq.n	8010d6e <HAL_DMA_IRQHandler+0x70a>
 8010cb0:	4a8b      	ldr	r2, [pc, #556]	; (8010ee0 <HAL_DMA_IRQHandler+0x87c>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d100      	bne.n	8010cb8 <HAL_DMA_IRQHandler+0x654>
 8010cb6:	e06b      	b.n	8010d90 <HAL_DMA_IRQHandler+0x72c>
 8010cb8:	4a8a      	ldr	r2, [pc, #552]	; (8010ee4 <HAL_DMA_IRQHandler+0x880>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d06a      	beq.n	8010d94 <HAL_DMA_IRQHandler+0x730>
 8010cbe:	4a8a      	ldr	r2, [pc, #552]	; (8010ee8 <HAL_DMA_IRQHandler+0x884>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d06a      	beq.n	8010d9a <HAL_DMA_IRQHandler+0x736>
 8010cc4:	4a89      	ldr	r2, [pc, #548]	; (8010eec <HAL_DMA_IRQHandler+0x888>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d06a      	beq.n	8010da0 <HAL_DMA_IRQHandler+0x73c>
 8010cca:	4a89      	ldr	r2, [pc, #548]	; (8010ef0 <HAL_DMA_IRQHandler+0x88c>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d06a      	beq.n	8010da6 <HAL_DMA_IRQHandler+0x742>
 8010cd0:	4a81      	ldr	r2, [pc, #516]	; (8010ed8 <HAL_DMA_IRQHandler+0x874>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d06a      	beq.n	8010dac <HAL_DMA_IRQHandler+0x748>
 8010cd6:	4a87      	ldr	r2, [pc, #540]	; (8010ef4 <HAL_DMA_IRQHandler+0x890>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d06a      	beq.n	8010db2 <HAL_DMA_IRQHandler+0x74e>
 8010cdc:	4a86      	ldr	r2, [pc, #536]	; (8010ef8 <HAL_DMA_IRQHandler+0x894>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d069      	beq.n	8010db6 <HAL_DMA_IRQHandler+0x752>
 8010ce2:	4a86      	ldr	r2, [pc, #536]	; (8010efc <HAL_DMA_IRQHandler+0x898>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d068      	beq.n	8010dba <HAL_DMA_IRQHandler+0x756>
 8010ce8:	4a85      	ldr	r2, [pc, #532]	; (8010f00 <HAL_DMA_IRQHandler+0x89c>)
 8010cea:	4694      	mov	ip, r2
 8010cec:	4463      	add	r3, ip
 8010cee:	425a      	negs	r2, r3
 8010cf0:	4153      	adcs	r3, r2
 8010cf2:	425b      	negs	r3, r3
 8010cf4:	4a83      	ldr	r2, [pc, #524]	; (8010f04 <HAL_DMA_IRQHandler+0x8a0>)
 8010cf6:	4013      	ands	r3, r2
 8010cf8:	2280      	movs	r2, #128	; 0x80
 8010cfa:	0292      	lsls	r2, r2, #10
 8010cfc:	4694      	mov	ip, r2
 8010cfe:	4463      	add	r3, ip
 8010d00:	e036      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010d02:	2320      	movs	r3, #32
 8010d04:	e7bb      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d06:	2380      	movs	r3, #128	; 0x80
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	e7b8      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d0c:	2380      	movs	r3, #128	; 0x80
 8010d0e:	019b      	lsls	r3, r3, #6
 8010d10:	e7b5      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d12:	2380      	movs	r3, #128	; 0x80
 8010d14:	029b      	lsls	r3, r3, #10
 8010d16:	e7b2      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d18:	2380      	movs	r3, #128	; 0x80
 8010d1a:	039b      	lsls	r3, r3, #14
 8010d1c:	e7af      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d1e:	2380      	movs	r3, #128	; 0x80
 8010d20:	049b      	lsls	r3, r3, #18
 8010d22:	e7ac      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d24:	2302      	movs	r3, #2
 8010d26:	e7aa      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d28:	2320      	movs	r3, #32
 8010d2a:	e7a8      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d2c:	2380      	movs	r3, #128	; 0x80
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	e7a5      	b.n	8010c7e <HAL_DMA_IRQHandler+0x61a>
 8010d32:	2302      	movs	r3, #2
 8010d34:	4003      	ands	r3, r0
 8010d36:	1e5a      	subs	r2, r3, #1
 8010d38:	4193      	sbcs	r3, r2
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	e7a3      	b.n	8010c86 <HAL_DMA_IRQHandler+0x622>
 8010d3e:	2320      	movs	r3, #32
 8010d40:	e7f8      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d42:	2380      	movs	r3, #128	; 0x80
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	e7f5      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d48:	2380      	movs	r3, #128	; 0x80
 8010d4a:	019b      	lsls	r3, r3, #6
 8010d4c:	e7f2      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d4e:	2380      	movs	r3, #128	; 0x80
 8010d50:	029b      	lsls	r3, r3, #10
 8010d52:	e7ef      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d54:	2380      	movs	r3, #128	; 0x80
 8010d56:	039b      	lsls	r3, r3, #14
 8010d58:	e7ec      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d5a:	2380      	movs	r3, #128	; 0x80
 8010d5c:	049b      	lsls	r3, r3, #18
 8010d5e:	e7e9      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d60:	2302      	movs	r3, #2
 8010d62:	e7e7      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d64:	2320      	movs	r3, #32
 8010d66:	e7e5      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
 8010d68:	2380      	movs	r3, #128	; 0x80
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	e7e2      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010d6e:	2302      	movs	r3, #2
 8010d70:	4a65      	ldr	r2, [pc, #404]	; (8010f08 <HAL_DMA_IRQHandler+0x8a4>)
 8010d72:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d76:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010d78:	2321      	movs	r3, #33	; 0x21
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010d7e:	3b01      	subs	r3, #1
 8010d80:	2200      	movs	r2, #0
 8010d82:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 8010d8a:	0020      	movs	r0, r4
 8010d8c:	4798      	blx	r3
}  
 8010d8e:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010d90:	2320      	movs	r3, #32
 8010d92:	e7ed      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010d94:	2380      	movs	r3, #128	; 0x80
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	e7ea      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010d9a:	2380      	movs	r3, #128	; 0x80
 8010d9c:	019b      	lsls	r3, r3, #6
 8010d9e:	e7e7      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010da0:	2380      	movs	r3, #128	; 0x80
 8010da2:	029b      	lsls	r3, r3, #10
 8010da4:	e7e4      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010da6:	2380      	movs	r3, #128	; 0x80
 8010da8:	039b      	lsls	r3, r3, #14
 8010daa:	e7e1      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010dac:	2380      	movs	r3, #128	; 0x80
 8010dae:	049b      	lsls	r3, r3, #18
 8010db0:	e7de      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010db2:	2302      	movs	r3, #2
 8010db4:	e7dc      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010db6:	2320      	movs	r3, #32
 8010db8:	e7da      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010dba:	2380      	movs	r3, #128	; 0x80
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	e7d7      	b.n	8010d70 <HAL_DMA_IRQHandler+0x70c>
 8010dc0:	4a46      	ldr	r2, [pc, #280]	; (8010edc <HAL_DMA_IRQHandler+0x878>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d027      	beq.n	8010e16 <HAL_DMA_IRQHandler+0x7b2>
 8010dc6:	4a46      	ldr	r2, [pc, #280]	; (8010ee0 <HAL_DMA_IRQHandler+0x87c>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d028      	beq.n	8010e1e <HAL_DMA_IRQHandler+0x7ba>
 8010dcc:	4a45      	ldr	r2, [pc, #276]	; (8010ee4 <HAL_DMA_IRQHandler+0x880>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d027      	beq.n	8010e22 <HAL_DMA_IRQHandler+0x7be>
 8010dd2:	4a45      	ldr	r2, [pc, #276]	; (8010ee8 <HAL_DMA_IRQHandler+0x884>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d027      	beq.n	8010e28 <HAL_DMA_IRQHandler+0x7c4>
 8010dd8:	4a44      	ldr	r2, [pc, #272]	; (8010eec <HAL_DMA_IRQHandler+0x888>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d027      	beq.n	8010e2e <HAL_DMA_IRQHandler+0x7ca>
 8010dde:	4a44      	ldr	r2, [pc, #272]	; (8010ef0 <HAL_DMA_IRQHandler+0x88c>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d027      	beq.n	8010e34 <HAL_DMA_IRQHandler+0x7d0>
 8010de4:	4a3c      	ldr	r2, [pc, #240]	; (8010ed8 <HAL_DMA_IRQHandler+0x874>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d027      	beq.n	8010e3a <HAL_DMA_IRQHandler+0x7d6>
 8010dea:	4a42      	ldr	r2, [pc, #264]	; (8010ef4 <HAL_DMA_IRQHandler+0x890>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d027      	beq.n	8010e40 <HAL_DMA_IRQHandler+0x7dc>
 8010df0:	4a41      	ldr	r2, [pc, #260]	; (8010ef8 <HAL_DMA_IRQHandler+0x894>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d026      	beq.n	8010e44 <HAL_DMA_IRQHandler+0x7e0>
 8010df6:	4a41      	ldr	r2, [pc, #260]	; (8010efc <HAL_DMA_IRQHandler+0x898>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d025      	beq.n	8010e48 <HAL_DMA_IRQHandler+0x7e4>
 8010dfc:	4a40      	ldr	r2, [pc, #256]	; (8010f00 <HAL_DMA_IRQHandler+0x89c>)
 8010dfe:	4694      	mov	ip, r2
 8010e00:	4463      	add	r3, ip
 8010e02:	425a      	negs	r2, r3
 8010e04:	4153      	adcs	r3, r2
 8010e06:	425b      	negs	r3, r3
 8010e08:	4a3e      	ldr	r2, [pc, #248]	; (8010f04 <HAL_DMA_IRQHandler+0x8a0>)
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	2280      	movs	r2, #128	; 0x80
 8010e0e:	0292      	lsls	r2, r2, #10
 8010e10:	4694      	mov	ip, r2
 8010e12:	4463      	add	r3, ip
 8010e14:	e000      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e16:	2302      	movs	r3, #2
 8010e18:	4a3c      	ldr	r2, [pc, #240]	; (8010f0c <HAL_DMA_IRQHandler+0x8a8>)
 8010e1a:	6053      	str	r3, [r2, #4]
 8010e1c:	e7aa      	b.n	8010d74 <HAL_DMA_IRQHandler+0x710>
 8010e1e:	2320      	movs	r3, #32
 8010e20:	e7fa      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e22:	2380      	movs	r3, #128	; 0x80
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	e7f7      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e28:	2380      	movs	r3, #128	; 0x80
 8010e2a:	019b      	lsls	r3, r3, #6
 8010e2c:	e7f4      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e2e:	2380      	movs	r3, #128	; 0x80
 8010e30:	029b      	lsls	r3, r3, #10
 8010e32:	e7f1      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e34:	2380      	movs	r3, #128	; 0x80
 8010e36:	039b      	lsls	r3, r3, #14
 8010e38:	e7ee      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e3a:	2380      	movs	r3, #128	; 0x80
 8010e3c:	049b      	lsls	r3, r3, #18
 8010e3e:	e7eb      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e40:	2302      	movs	r3, #2
 8010e42:	e7e9      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e44:	2320      	movs	r3, #32
 8010e46:	e7e7      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
 8010e48:	2380      	movs	r3, #128	; 0x80
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	e7e4      	b.n	8010e18 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e4e:	6821      	ldr	r1, [r4, #0]
 8010e50:	4b2e      	ldr	r3, [pc, #184]	; (8010f0c <HAL_DMA_IRQHandler+0x8a8>)
 8010e52:	6818      	ldr	r0, [r3, #0]
 8010e54:	4a21      	ldr	r2, [pc, #132]	; (8010edc <HAL_DMA_IRQHandler+0x878>)
 8010e56:	4291      	cmp	r1, r2
 8010e58:	d100      	bne.n	8010e5c <HAL_DMA_IRQHandler+0x7f8>
 8010e5a:	e76a      	b.n	8010d32 <HAL_DMA_IRQHandler+0x6ce>
 8010e5c:	4a20      	ldr	r2, [pc, #128]	; (8010ee0 <HAL_DMA_IRQHandler+0x87c>)
 8010e5e:	4291      	cmp	r1, r2
 8010e60:	d100      	bne.n	8010e64 <HAL_DMA_IRQHandler+0x800>
 8010e62:	e76c      	b.n	8010d3e <HAL_DMA_IRQHandler+0x6da>
 8010e64:	4a1f      	ldr	r2, [pc, #124]	; (8010ee4 <HAL_DMA_IRQHandler+0x880>)
 8010e66:	4291      	cmp	r1, r2
 8010e68:	d100      	bne.n	8010e6c <HAL_DMA_IRQHandler+0x808>
 8010e6a:	e76a      	b.n	8010d42 <HAL_DMA_IRQHandler+0x6de>
 8010e6c:	4a1e      	ldr	r2, [pc, #120]	; (8010ee8 <HAL_DMA_IRQHandler+0x884>)
 8010e6e:	4291      	cmp	r1, r2
 8010e70:	d100      	bne.n	8010e74 <HAL_DMA_IRQHandler+0x810>
 8010e72:	e769      	b.n	8010d48 <HAL_DMA_IRQHandler+0x6e4>
 8010e74:	4b1d      	ldr	r3, [pc, #116]	; (8010eec <HAL_DMA_IRQHandler+0x888>)
 8010e76:	4299      	cmp	r1, r3
 8010e78:	d100      	bne.n	8010e7c <HAL_DMA_IRQHandler+0x818>
 8010e7a:	e768      	b.n	8010d4e <HAL_DMA_IRQHandler+0x6ea>
 8010e7c:	4b1c      	ldr	r3, [pc, #112]	; (8010ef0 <HAL_DMA_IRQHandler+0x88c>)
 8010e7e:	4299      	cmp	r1, r3
 8010e80:	d100      	bne.n	8010e84 <HAL_DMA_IRQHandler+0x820>
 8010e82:	e767      	b.n	8010d54 <HAL_DMA_IRQHandler+0x6f0>
 8010e84:	4b14      	ldr	r3, [pc, #80]	; (8010ed8 <HAL_DMA_IRQHandler+0x874>)
 8010e86:	4299      	cmp	r1, r3
 8010e88:	d100      	bne.n	8010e8c <HAL_DMA_IRQHandler+0x828>
 8010e8a:	e766      	b.n	8010d5a <HAL_DMA_IRQHandler+0x6f6>
 8010e8c:	4b19      	ldr	r3, [pc, #100]	; (8010ef4 <HAL_DMA_IRQHandler+0x890>)
 8010e8e:	4299      	cmp	r1, r3
 8010e90:	d100      	bne.n	8010e94 <HAL_DMA_IRQHandler+0x830>
 8010e92:	e765      	b.n	8010d60 <HAL_DMA_IRQHandler+0x6fc>
 8010e94:	4b18      	ldr	r3, [pc, #96]	; (8010ef8 <HAL_DMA_IRQHandler+0x894>)
 8010e96:	4299      	cmp	r1, r3
 8010e98:	d100      	bne.n	8010e9c <HAL_DMA_IRQHandler+0x838>
 8010e9a:	e763      	b.n	8010d64 <HAL_DMA_IRQHandler+0x700>
 8010e9c:	4b17      	ldr	r3, [pc, #92]	; (8010efc <HAL_DMA_IRQHandler+0x898>)
 8010e9e:	4299      	cmp	r1, r3
 8010ea0:	d100      	bne.n	8010ea4 <HAL_DMA_IRQHandler+0x840>
 8010ea2:	e761      	b.n	8010d68 <HAL_DMA_IRQHandler+0x704>
 8010ea4:	4b16      	ldr	r3, [pc, #88]	; (8010f00 <HAL_DMA_IRQHandler+0x89c>)
 8010ea6:	18ca      	adds	r2, r1, r3
 8010ea8:	4253      	negs	r3, r2
 8010eaa:	415a      	adcs	r2, r3
 8010eac:	4252      	negs	r2, r2
 8010eae:	4b15      	ldr	r3, [pc, #84]	; (8010f04 <HAL_DMA_IRQHandler+0x8a0>)
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	2280      	movs	r2, #128	; 0x80
 8010eb4:	0292      	lsls	r2, r2, #10
 8010eb6:	4694      	mov	ip, r2
 8010eb8:	4463      	add	r3, ip
 8010eba:	e73b      	b.n	8010d34 <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	0712      	lsls	r2, r2, #28
 8010ec0:	d500      	bpl.n	8010ec4 <HAL_DMA_IRQHandler+0x860>
 8010ec2:	e4d2      	b.n	801086a <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ec4:	6823      	ldr	r3, [r4, #0]
 8010ec6:	e482      	b.n	80107ce <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	0712      	lsls	r2, r2, #28
 8010ecc:	d500      	bpl.n	8010ed0 <HAL_DMA_IRQHandler+0x86c>
 8010ece:	e4cc      	b.n	801086a <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	f7ff fbfe 	bl	80106d2 <HAL_DMA_IRQHandler+0x6e>
 8010ed6:	46c0      	nop			; (mov r8, r8)
 8010ed8:	40020080 	.word	0x40020080
 8010edc:	40020008 	.word	0x40020008
 8010ee0:	4002001c 	.word	0x4002001c
 8010ee4:	40020030 	.word	0x40020030
 8010ee8:	40020044 	.word	0x40020044
 8010eec:	40020058 	.word	0x40020058
 8010ef0:	4002006c 	.word	0x4002006c
 8010ef4:	40020408 	.word	0x40020408
 8010ef8:	4002041c 	.word	0x4002041c
 8010efc:	40020430 	.word	0x40020430
 8010f00:	bffdfbbc 	.word	0xbffdfbbc
 8010f04:	fffe2000 	.word	0xfffe2000
 8010f08:	40020400 	.word	0x40020400
 8010f0c:	40020000 	.word	0x40020000

08010f10 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010f10:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <FLASH_SetErrorCode+0x2c>)
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	06db      	lsls	r3, r3, #27
 8010f16:	d504      	bpl.n	8010f22 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010f18:	4a09      	ldr	r2, [pc, #36]	; (8010f40 <FLASH_SetErrorCode+0x30>)
 8010f1a:	69d3      	ldr	r3, [r2, #28]
 8010f1c:	2102      	movs	r1, #2
 8010f1e:	430b      	orrs	r3, r1
 8010f20:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010f22:	4b06      	ldr	r3, [pc, #24]	; (8010f3c <FLASH_SetErrorCode+0x2c>)
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	075b      	lsls	r3, r3, #29
 8010f28:	d504      	bpl.n	8010f34 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010f2a:	4a05      	ldr	r2, [pc, #20]	; (8010f40 <FLASH_SetErrorCode+0x30>)
 8010f2c:	69d3      	ldr	r3, [r2, #28]
 8010f2e:	2101      	movs	r1, #1
 8010f30:	430b      	orrs	r3, r1
 8010f32:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010f34:	4b01      	ldr	r3, [pc, #4]	; (8010f3c <FLASH_SetErrorCode+0x2c>)
 8010f36:	2214      	movs	r2, #20
 8010f38:	60da      	str	r2, [r3, #12]
}  
 8010f3a:	4770      	bx	lr
 8010f3c:	40022000 	.word	0x40022000
 8010f40:	20006da0 	.word	0x20006da0

08010f44 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010f44:	4b06      	ldr	r3, [pc, #24]	; (8010f60 <HAL_FLASH_Unlock+0x1c>)
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	061b      	lsls	r3, r3, #24
 8010f4a:	d506      	bpl.n	8010f5a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010f4c:	4b04      	ldr	r3, [pc, #16]	; (8010f60 <HAL_FLASH_Unlock+0x1c>)
 8010f4e:	4a05      	ldr	r2, [pc, #20]	; (8010f64 <HAL_FLASH_Unlock+0x20>)
 8010f50:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010f52:	4a05      	ldr	r2, [pc, #20]	; (8010f68 <HAL_FLASH_Unlock+0x24>)
 8010f54:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010f56:	2000      	movs	r0, #0
}
 8010f58:	4770      	bx	lr
    return HAL_ERROR;
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	e7fc      	b.n	8010f58 <HAL_FLASH_Unlock+0x14>
 8010f5e:	46c0      	nop			; (mov r8, r8)
 8010f60:	40022000 	.word	0x40022000
 8010f64:	45670123 	.word	0x45670123
 8010f68:	cdef89ab 	.word	0xcdef89ab

08010f6c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010f6c:	4a03      	ldr	r2, [pc, #12]	; (8010f7c <HAL_FLASH_Lock+0x10>)
 8010f6e:	6913      	ldr	r3, [r2, #16]
 8010f70:	2180      	movs	r1, #128	; 0x80
 8010f72:	430b      	orrs	r3, r1
 8010f74:	6113      	str	r3, [r2, #16]
}
 8010f76:	2000      	movs	r0, #0
 8010f78:	4770      	bx	lr
 8010f7a:	46c0      	nop			; (mov r8, r8)
 8010f7c:	40022000 	.word	0x40022000

08010f80 <FLASH_WaitForLastOperation>:
{
 8010f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f82:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010f84:	f7fe fde8 	bl	800fb58 <HAL_GetTick>
 8010f88:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010f8a:	4e13      	ldr	r6, [pc, #76]	; (8010fd8 <FLASH_WaitForLastOperation+0x58>)
 8010f8c:	2501      	movs	r5, #1
 8010f8e:	68f3      	ldr	r3, [r6, #12]
 8010f90:	421d      	tst	r5, r3
 8010f92:	d00a      	beq.n	8010faa <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010f94:	1c63      	adds	r3, r4, #1
 8010f96:	d0fa      	beq.n	8010f8e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010f98:	2c00      	cmp	r4, #0
 8010f9a:	d01b      	beq.n	8010fd4 <FLASH_WaitForLastOperation+0x54>
 8010f9c:	f7fe fddc 	bl	800fb58 <HAL_GetTick>
 8010fa0:	1bc0      	subs	r0, r0, r7
 8010fa2:	42a0      	cmp	r0, r4
 8010fa4:	d9f3      	bls.n	8010f8e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010fa6:	2003      	movs	r0, #3
 8010fa8:	e00f      	b.n	8010fca <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010faa:	4b0b      	ldr	r3, [pc, #44]	; (8010fd8 <FLASH_WaitForLastOperation+0x58>)
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	069b      	lsls	r3, r3, #26
 8010fb0:	d502      	bpl.n	8010fb8 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010fb2:	4b09      	ldr	r3, [pc, #36]	; (8010fd8 <FLASH_WaitForLastOperation+0x58>)
 8010fb4:	2220      	movs	r2, #32
 8010fb6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010fb8:	4b07      	ldr	r3, [pc, #28]	; (8010fd8 <FLASH_WaitForLastOperation+0x58>)
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	06db      	lsls	r3, r3, #27
 8010fbe:	d405      	bmi.n	8010fcc <FLASH_WaitForLastOperation+0x4c>
 8010fc0:	4b05      	ldr	r3, [pc, #20]	; (8010fd8 <FLASH_WaitForLastOperation+0x58>)
 8010fc2:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010fc4:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010fc6:	075b      	lsls	r3, r3, #29
 8010fc8:	d400      	bmi.n	8010fcc <FLASH_WaitForLastOperation+0x4c>
}
 8010fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 8010fcc:	f7ff ffa0 	bl	8010f10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	e7fa      	b.n	8010fca <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 8010fd4:	2003      	movs	r0, #3
 8010fd6:	e7f8      	b.n	8010fca <FLASH_WaitForLastOperation+0x4a>
 8010fd8:	40022000 	.word	0x40022000

08010fdc <HAL_FLASH_Program>:
{
 8010fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fde:	46de      	mov	lr, fp
 8010fe0:	4657      	mov	r7, sl
 8010fe2:	464e      	mov	r6, r9
 8010fe4:	4645      	mov	r5, r8
 8010fe6:	b5e0      	push	{r5, r6, r7, lr}
 8010fe8:	b083      	sub	sp, #12
 8010fea:	0004      	movs	r4, r0
 8010fec:	000e      	movs	r6, r1
 8010fee:	9201      	str	r2, [sp, #4]
 8010ff0:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010ff2:	4b2a      	ldr	r3, [pc, #168]	; (801109c <HAL_FLASH_Program+0xc0>)
 8010ff4:	7e1b      	ldrb	r3, [r3, #24]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d04e      	beq.n	8011098 <HAL_FLASH_Program+0xbc>
 8010ffa:	4b28      	ldr	r3, [pc, #160]	; (801109c <HAL_FLASH_Program+0xc0>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011000:	4827      	ldr	r0, [pc, #156]	; (80110a0 <HAL_FLASH_Program+0xc4>)
 8011002:	f7ff ffbd 	bl	8010f80 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011006:	2800      	cmp	r0, #0
 8011008:	d13c      	bne.n	8011084 <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801100a:	2c01      	cmp	r4, #1
 801100c:	d010      	beq.n	8011030 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 801100e:	3c02      	subs	r4, #2
 8011010:	4260      	negs	r0, r4
 8011012:	4144      	adcs	r4, r0
 8011014:	4264      	negs	r4, r4
 8011016:	2301      	movs	r3, #1
 8011018:	439c      	bics	r4, r3
 801101a:	46a0      	mov	r8, r4
 801101c:	3303      	adds	r3, #3
 801101e:	469c      	mov	ip, r3
 8011020:	44e0      	add	r8, ip
 8011022:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011024:	4b1d      	ldr	r3, [pc, #116]	; (801109c <HAL_FLASH_Program+0xc0>)
 8011026:	469b      	mov	fp, r3
 8011028:	2300      	movs	r3, #0
 801102a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801102c:	4c1d      	ldr	r4, [pc, #116]	; (80110a4 <HAL_FLASH_Program+0xc8>)
 801102e:	e021      	b.n	8011074 <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8011030:	2301      	movs	r3, #1
 8011032:	4698      	mov	r8, r3
 8011034:	e7f5      	b.n	8011022 <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011036:	2220      	movs	r2, #32
 8011038:	1ad2      	subs	r2, r2, r3
 801103a:	4649      	mov	r1, r9
 801103c:	4091      	lsls	r1, r2
 801103e:	000a      	movs	r2, r1
 8011040:	9901      	ldr	r1, [sp, #4]
 8011042:	40d9      	lsrs	r1, r3
 8011044:	000b      	movs	r3, r1
 8011046:	4313      	orrs	r3, r2
 8011048:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801104a:	465a      	mov	r2, fp
 801104c:	4651      	mov	r1, sl
 801104e:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011050:	6922      	ldr	r2, [r4, #16]
 8011052:	2701      	movs	r7, #1
 8011054:	433a      	orrs	r2, r7
 8011056:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011058:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801105a:	4811      	ldr	r0, [pc, #68]	; (80110a0 <HAL_FLASH_Program+0xc4>)
 801105c:	f7ff ff90 	bl	8010f80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011060:	6923      	ldr	r3, [r4, #16]
 8011062:	43bb      	bics	r3, r7
 8011064:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011066:	2800      	cmp	r0, #0
 8011068:	d10c      	bne.n	8011084 <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 801106a:	3501      	adds	r5, #1
 801106c:	3602      	adds	r6, #2
 801106e:	b2eb      	uxtb	r3, r5
 8011070:	4598      	cmp	r8, r3
 8011072:	d907      	bls.n	8011084 <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011074:	012b      	lsls	r3, r5, #4
 8011076:	2220      	movs	r2, #32
 8011078:	4252      	negs	r2, r2
 801107a:	189a      	adds	r2, r3, r2
 801107c:	d4db      	bmi.n	8011036 <HAL_FLASH_Program+0x5a>
 801107e:	464b      	mov	r3, r9
 8011080:	40d3      	lsrs	r3, r2
 8011082:	e7e1      	b.n	8011048 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 8011084:	4b05      	ldr	r3, [pc, #20]	; (801109c <HAL_FLASH_Program+0xc0>)
 8011086:	2200      	movs	r2, #0
 8011088:	761a      	strb	r2, [r3, #24]
}
 801108a:	b003      	add	sp, #12
 801108c:	bcf0      	pop	{r4, r5, r6, r7}
 801108e:	46bb      	mov	fp, r7
 8011090:	46b2      	mov	sl, r6
 8011092:	46a9      	mov	r9, r5
 8011094:	46a0      	mov	r8, r4
 8011096:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011098:	2002      	movs	r0, #2
 801109a:	e7f6      	b.n	801108a <HAL_FLASH_Program+0xae>
 801109c:	20006da0 	.word	0x20006da0
 80110a0:	0000c350 	.word	0x0000c350
 80110a4:	40022000 	.word	0x40022000

080110a8 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80110a8:	4b06      	ldr	r3, [pc, #24]	; (80110c4 <FLASH_MassErase+0x1c>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80110ae:	4b06      	ldr	r3, [pc, #24]	; (80110c8 <FLASH_MassErase+0x20>)
 80110b0:	691a      	ldr	r2, [r3, #16]
 80110b2:	2104      	movs	r1, #4
 80110b4:	430a      	orrs	r2, r1
 80110b6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80110b8:	691a      	ldr	r2, [r3, #16]
 80110ba:	313c      	adds	r1, #60	; 0x3c
 80110bc:	430a      	orrs	r2, r1
 80110be:	611a      	str	r2, [r3, #16]
}
 80110c0:	4770      	bx	lr
 80110c2:	46c0      	nop			; (mov r8, r8)
 80110c4:	20006da0 	.word	0x20006da0
 80110c8:	40022000 	.word	0x40022000

080110cc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80110cc:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <FLASH_PageErase+0x1c>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80110d2:	4b06      	ldr	r3, [pc, #24]	; (80110ec <FLASH_PageErase+0x20>)
 80110d4:	691a      	ldr	r2, [r3, #16]
 80110d6:	2102      	movs	r1, #2
 80110d8:	430a      	orrs	r2, r1
 80110da:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80110dc:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80110de:	691a      	ldr	r2, [r3, #16]
 80110e0:	313e      	adds	r1, #62	; 0x3e
 80110e2:	430a      	orrs	r2, r1
 80110e4:	611a      	str	r2, [r3, #16]
}
 80110e6:	4770      	bx	lr
 80110e8:	20006da0 	.word	0x20006da0
 80110ec:	40022000 	.word	0x40022000

080110f0 <HAL_FLASHEx_Erase>:
{
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	46ce      	mov	lr, r9
 80110f4:	4647      	mov	r7, r8
 80110f6:	b580      	push	{r7, lr}
 80110f8:	0005      	movs	r5, r0
 80110fa:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80110fc:	4b2a      	ldr	r3, [pc, #168]	; (80111a8 <HAL_FLASHEx_Erase+0xb8>)
 80110fe:	7e1b      	ldrb	r3, [r3, #24]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d04e      	beq.n	80111a2 <HAL_FLASHEx_Erase+0xb2>
 8011104:	4b28      	ldr	r3, [pc, #160]	; (80111a8 <HAL_FLASHEx_Erase+0xb8>)
 8011106:	2201      	movs	r2, #1
 8011108:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801110a:	6803      	ldr	r3, [r0, #0]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d02a      	beq.n	8011166 <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011110:	4826      	ldr	r0, [pc, #152]	; (80111ac <HAL_FLASHEx_Erase+0xbc>)
 8011112:	f7ff ff35 	bl	8010f80 <FLASH_WaitForLastOperation>
 8011116:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011118:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801111a:	2b00      	cmp	r3, #0
 801111c:	d12a      	bne.n	8011174 <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 801111e:	3b01      	subs	r3, #1
 8011120:	4642      	mov	r2, r8
 8011122:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011124:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011126:	68ab      	ldr	r3, [r5, #8]
 8011128:	02db      	lsls	r3, r3, #11
 801112a:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801112c:	429c      	cmp	r4, r3
 801112e:	d236      	bcs.n	801119e <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011130:	4b1e      	ldr	r3, [pc, #120]	; (80111ac <HAL_FLASHEx_Erase+0xbc>)
 8011132:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011134:	4e1e      	ldr	r6, [pc, #120]	; (80111b0 <HAL_FLASHEx_Erase+0xc0>)
 8011136:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 8011138:	0020      	movs	r0, r4
 801113a:	f7ff ffc7 	bl	80110cc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801113e:	4648      	mov	r0, r9
 8011140:	f7ff ff1e 	bl	8010f80 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011144:	6933      	ldr	r3, [r6, #16]
 8011146:	43bb      	bics	r3, r7
 8011148:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 801114a:	2800      	cmp	r0, #0
 801114c:	d124      	bne.n	8011198 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 801114e:	2380      	movs	r3, #128	; 0x80
 8011150:	011b      	lsls	r3, r3, #4
 8011152:	469c      	mov	ip, r3
 8011154:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011156:	68ab      	ldr	r3, [r5, #8]
 8011158:	02db      	lsls	r3, r3, #11
 801115a:	686a      	ldr	r2, [r5, #4]
 801115c:	4694      	mov	ip, r2
 801115e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011160:	42a3      	cmp	r3, r4
 8011162:	d8e9      	bhi.n	8011138 <HAL_FLASHEx_Erase+0x48>
 8011164:	e006      	b.n	8011174 <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011166:	4811      	ldr	r0, [pc, #68]	; (80111ac <HAL_FLASHEx_Erase+0xbc>)
 8011168:	f7ff ff0a 	bl	8010f80 <FLASH_WaitForLastOperation>
 801116c:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 801116e:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011170:	2b00      	cmp	r3, #0
 8011172:	d006      	beq.n	8011182 <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 8011174:	4b0c      	ldr	r3, [pc, #48]	; (80111a8 <HAL_FLASHEx_Erase+0xb8>)
 8011176:	2200      	movs	r2, #0
 8011178:	761a      	strb	r2, [r3, #24]
}
 801117a:	bcc0      	pop	{r6, r7}
 801117c:	46b9      	mov	r9, r7
 801117e:	46b0      	mov	r8, r6
 8011180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011182:	f7ff ff91 	bl	80110a8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011186:	4809      	ldr	r0, [pc, #36]	; (80111ac <HAL_FLASHEx_Erase+0xbc>)
 8011188:	f7ff fefa 	bl	8010f80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801118c:	4a08      	ldr	r2, [pc, #32]	; (80111b0 <HAL_FLASHEx_Erase+0xc0>)
 801118e:	6913      	ldr	r3, [r2, #16]
 8011190:	2104      	movs	r1, #4
 8011192:	438b      	bics	r3, r1
 8011194:	6113      	str	r3, [r2, #16]
 8011196:	e7ed      	b.n	8011174 <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8011198:	4643      	mov	r3, r8
 801119a:	601c      	str	r4, [r3, #0]
            break;
 801119c:	e7ea      	b.n	8011174 <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 801119e:	2001      	movs	r0, #1
 80111a0:	e7e8      	b.n	8011174 <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 80111a2:	2002      	movs	r0, #2
 80111a4:	e7e9      	b.n	801117a <HAL_FLASHEx_Erase+0x8a>
 80111a6:	46c0      	nop			; (mov r8, r8)
 80111a8:	20006da0 	.word	0x20006da0
 80111ac:	0000c350 	.word	0x0000c350
 80111b0:	40022000 	.word	0x40022000

080111b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80111b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111b6:	46de      	mov	lr, fp
 80111b8:	4657      	mov	r7, sl
 80111ba:	464e      	mov	r6, r9
 80111bc:	4645      	mov	r5, r8
 80111be:	b5e0      	push	{r5, r6, r7, lr}
 80111c0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80111c2:	680a      	ldr	r2, [r1, #0]
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	d100      	bne.n	80111ca <HAL_GPIO_Init+0x16>
 80111c8:	e0c9      	b.n	801135e <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 80111ca:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80111cc:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80111ce:	2510      	movs	r5, #16
 80111d0:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80111d2:	2580      	movs	r5, #128	; 0x80
 80111d4:	056d      	lsls	r5, r5, #21
 80111d6:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80111d8:	4d64      	ldr	r5, [pc, #400]	; (801136c <HAL_GPIO_Init+0x1b8>)
 80111da:	1945      	adds	r5, r0, r5
 80111dc:	1e6e      	subs	r6, r5, #1
 80111de:	41b5      	sbcs	r5, r6
 80111e0:	3504      	adds	r5, #4
 80111e2:	46a9      	mov	r9, r5
 80111e4:	e044      	b.n	8011270 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80111e6:	08da      	lsrs	r2, r3, #3
 80111e8:	0092      	lsls	r2, r2, #2
 80111ea:	1882      	adds	r2, r0, r2
 80111ec:	9201      	str	r2, [sp, #4]
 80111ee:	6a15      	ldr	r5, [r2, #32]
 80111f0:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80111f2:	2507      	movs	r5, #7
 80111f4:	401d      	ands	r5, r3
 80111f6:	00ad      	lsls	r5, r5, #2
 80111f8:	270f      	movs	r7, #15
 80111fa:	40af      	lsls	r7, r5
 80111fc:	46bb      	mov	fp, r7
 80111fe:	4657      	mov	r7, sl
 8011200:	465a      	mov	r2, fp
 8011202:	4397      	bics	r7, r2
 8011204:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011206:	690f      	ldr	r7, [r1, #16]
 8011208:	40af      	lsls	r7, r5
 801120a:	003d      	movs	r5, r7
 801120c:	4652      	mov	r2, sl
 801120e:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 8011210:	9a01      	ldr	r2, [sp, #4]
 8011212:	6215      	str	r5, [r2, #32]
 8011214:	e037      	b.n	8011286 <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011216:	2500      	movs	r5, #0
 8011218:	465f      	mov	r7, fp
 801121a:	40bd      	lsls	r5, r7
 801121c:	4657      	mov	r7, sl
 801121e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011220:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011222:	4a53      	ldr	r2, [pc, #332]	; (8011370 <HAL_GPIO_Init+0x1bc>)
 8011224:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011226:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011228:	684f      	ldr	r7, [r1, #4]
 801122a:	03ff      	lsls	r7, r7, #15
 801122c:	d500      	bpl.n	8011230 <HAL_GPIO_Init+0x7c>
 801122e:	e08e      	b.n	801134e <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011230:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011232:	4f4f      	ldr	r7, [pc, #316]	; (8011370 <HAL_GPIO_Init+0x1bc>)
 8011234:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 8011236:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011238:	684f      	ldr	r7, [r1, #4]
 801123a:	03bf      	lsls	r7, r7, #14
 801123c:	d500      	bpl.n	8011240 <HAL_GPIO_Init+0x8c>
 801123e:	e088      	b.n	8011352 <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011240:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011242:	4f4b      	ldr	r7, [pc, #300]	; (8011370 <HAL_GPIO_Init+0x1bc>)
 8011244:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011246:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011248:	684f      	ldr	r7, [r1, #4]
 801124a:	02ff      	lsls	r7, r7, #11
 801124c:	d500      	bpl.n	8011250 <HAL_GPIO_Init+0x9c>
 801124e:	e082      	b.n	8011356 <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011250:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011252:	4f47      	ldr	r7, [pc, #284]	; (8011370 <HAL_GPIO_Init+0x1bc>)
 8011254:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8011256:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011258:	684f      	ldr	r7, [r1, #4]
 801125a:	02bf      	lsls	r7, r7, #10
 801125c:	d47d      	bmi.n	801135a <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801125e:	402a      	ands	r2, r5
 8011260:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011262:	4a43      	ldr	r2, [pc, #268]	; (8011370 <HAL_GPIO_Init+0x1bc>)
 8011264:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 8011266:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011268:	680a      	ldr	r2, [r1, #0]
 801126a:	0015      	movs	r5, r2
 801126c:	40dd      	lsrs	r5, r3
 801126e:	d076      	beq.n	801135e <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011270:	0025      	movs	r5, r4
 8011272:	409d      	lsls	r5, r3
 8011274:	0016      	movs	r6, r2
 8011276:	402e      	ands	r6, r5
    if(iocurrent)
 8011278:	422a      	tst	r2, r5
 801127a:	d0f4      	beq.n	8011266 <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801127c:	684a      	ldr	r2, [r1, #4]
 801127e:	4665      	mov	r5, ip
 8011280:	43aa      	bics	r2, r5
 8011282:	2a02      	cmp	r2, #2
 8011284:	d0af      	beq.n	80111e6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8011286:	6802      	ldr	r2, [r0, #0]
 8011288:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801128a:	005d      	lsls	r5, r3, #1
 801128c:	2203      	movs	r2, #3
 801128e:	40aa      	lsls	r2, r5
 8011290:	43d7      	mvns	r7, r2
 8011292:	46ba      	mov	sl, r7
 8011294:	465f      	mov	r7, fp
 8011296:	4397      	bics	r7, r2
 8011298:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801129a:	684a      	ldr	r2, [r1, #4]
 801129c:	2703      	movs	r7, #3
 801129e:	403a      	ands	r2, r7
 80112a0:	40aa      	lsls	r2, r5
 80112a2:	465f      	mov	r7, fp
 80112a4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80112a6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80112a8:	684a      	ldr	r2, [r1, #4]
 80112aa:	4667      	mov	r7, ip
 80112ac:	43ba      	bics	r2, r7
 80112ae:	3a01      	subs	r2, #1
 80112b0:	2a01      	cmp	r2, #1
 80112b2:	d812      	bhi.n	80112da <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 80112b4:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80112b6:	4657      	mov	r7, sl
 80112b8:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80112ba:	68ca      	ldr	r2, [r1, #12]
 80112bc:	40aa      	lsls	r2, r5
 80112be:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 80112c0:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80112c2:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80112c4:	0027      	movs	r7, r4
 80112c6:	409f      	lsls	r7, r3
 80112c8:	43ba      	bics	r2, r7
 80112ca:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80112cc:	684a      	ldr	r2, [r1, #4]
 80112ce:	0912      	lsrs	r2, r2, #4
 80112d0:	4022      	ands	r2, r4
 80112d2:	409a      	lsls	r2, r3
 80112d4:	465f      	mov	r7, fp
 80112d6:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 80112d8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80112da:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80112dc:	4657      	mov	r7, sl
 80112de:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80112e0:	688a      	ldr	r2, [r1, #8]
 80112e2:	40aa      	lsls	r2, r5
 80112e4:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 80112e6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80112e8:	684a      	ldr	r2, [r1, #4]
 80112ea:	4645      	mov	r5, r8
 80112ec:	422a      	tst	r2, r5
 80112ee:	d0ba      	beq.n	8011266 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112f0:	4a20      	ldr	r2, [pc, #128]	; (8011374 <HAL_GPIO_Init+0x1c0>)
 80112f2:	6995      	ldr	r5, [r2, #24]
 80112f4:	4325      	orrs	r5, r4
 80112f6:	6195      	str	r5, [r2, #24]
 80112f8:	6992      	ldr	r2, [r2, #24]
 80112fa:	4022      	ands	r2, r4
 80112fc:	9203      	str	r2, [sp, #12]
 80112fe:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011300:	089a      	lsrs	r2, r3, #2
 8011302:	0092      	lsls	r2, r2, #2
 8011304:	4d1c      	ldr	r5, [pc, #112]	; (8011378 <HAL_GPIO_Init+0x1c4>)
 8011306:	46aa      	mov	sl, r5
 8011308:	4452      	add	r2, sl
 801130a:	6895      	ldr	r5, [r2, #8]
 801130c:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801130e:	2503      	movs	r5, #3
 8011310:	401d      	ands	r5, r3
 8011312:	00ad      	lsls	r5, r5, #2
 8011314:	46ab      	mov	fp, r5
 8011316:	250f      	movs	r5, #15
 8011318:	465f      	mov	r7, fp
 801131a:	40bd      	lsls	r5, r7
 801131c:	4657      	mov	r7, sl
 801131e:	43af      	bics	r7, r5
 8011320:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011322:	2590      	movs	r5, #144	; 0x90
 8011324:	05ed      	lsls	r5, r5, #23
 8011326:	42a8      	cmp	r0, r5
 8011328:	d100      	bne.n	801132c <HAL_GPIO_Init+0x178>
 801132a:	e774      	b.n	8011216 <HAL_GPIO_Init+0x62>
 801132c:	4d13      	ldr	r5, [pc, #76]	; (801137c <HAL_GPIO_Init+0x1c8>)
 801132e:	42a8      	cmp	r0, r5
 8011330:	d007      	beq.n	8011342 <HAL_GPIO_Init+0x18e>
 8011332:	4d13      	ldr	r5, [pc, #76]	; (8011380 <HAL_GPIO_Init+0x1cc>)
 8011334:	42a8      	cmp	r0, r5
 8011336:	d006      	beq.n	8011346 <HAL_GPIO_Init+0x192>
 8011338:	4d12      	ldr	r5, [pc, #72]	; (8011384 <HAL_GPIO_Init+0x1d0>)
 801133a:	42a8      	cmp	r0, r5
 801133c:	d005      	beq.n	801134a <HAL_GPIO_Init+0x196>
 801133e:	464d      	mov	r5, r9
 8011340:	e76a      	b.n	8011218 <HAL_GPIO_Init+0x64>
 8011342:	0025      	movs	r5, r4
 8011344:	e768      	b.n	8011218 <HAL_GPIO_Init+0x64>
 8011346:	2502      	movs	r5, #2
 8011348:	e766      	b.n	8011218 <HAL_GPIO_Init+0x64>
 801134a:	2503      	movs	r5, #3
 801134c:	e764      	b.n	8011218 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 801134e:	4332      	orrs	r2, r6
 8011350:	e76f      	b.n	8011232 <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 8011352:	4332      	orrs	r2, r6
 8011354:	e775      	b.n	8011242 <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 8011356:	4332      	orrs	r2, r6
 8011358:	e77b      	b.n	8011252 <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 801135a:	4316      	orrs	r6, r2
 801135c:	e781      	b.n	8011262 <HAL_GPIO_Init+0xae>
  } 
}
 801135e:	b005      	add	sp, #20
 8011360:	bcf0      	pop	{r4, r5, r6, r7}
 8011362:	46bb      	mov	fp, r7
 8011364:	46b2      	mov	sl, r6
 8011366:	46a9      	mov	r9, r5
 8011368:	46a0      	mov	r8, r4
 801136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136c:	b7fff000 	.word	0xb7fff000
 8011370:	40010400 	.word	0x40010400
 8011374:	40021000 	.word	0x40021000
 8011378:	40010000 	.word	0x40010000
 801137c:	48000400 	.word	0x48000400
 8011380:	48000800 	.word	0x48000800
 8011384:	48000c00 	.word	0x48000c00

08011388 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011388:	6900      	ldr	r0, [r0, #16]
 801138a:	4008      	ands	r0, r1
 801138c:	1e41      	subs	r1, r0, #1
 801138e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011390:	b2c0      	uxtb	r0, r0
  }
 8011392:	4770      	bx	lr

08011394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011394:	2a00      	cmp	r2, #0
 8011396:	d001      	beq.n	801139c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011398:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801139a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801139c:	6281      	str	r1, [r0, #40]	; 0x28
}
 801139e:	e7fc      	b.n	801139a <HAL_GPIO_WritePin+0x6>

080113a0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80113a0:	6943      	ldr	r3, [r0, #20]
 80113a2:	4059      	eors	r1, r3
 80113a4:	6141      	str	r1, [r0, #20]
}
 80113a6:	4770      	bx	lr

080113a8 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80113a8:	4770      	bx	lr
	...

080113ac <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80113ac:	4a03      	ldr	r2, [pc, #12]	; (80113bc <HAL_PWR_EnableBkUpAccess+0x10>)
 80113ae:	6811      	ldr	r1, [r2, #0]
 80113b0:	2380      	movs	r3, #128	; 0x80
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	430b      	orrs	r3, r1
 80113b6:	6013      	str	r3, [r2, #0]
}
 80113b8:	4770      	bx	lr
 80113ba:	46c0      	nop			; (mov r8, r8)
 80113bc:	40007000 	.word	0x40007000

080113c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80113c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113c2:	46c6      	mov	lr, r8
 80113c4:	b500      	push	{lr}
 80113c6:	b082      	sub	sp, #8
 80113c8:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80113ca:	6803      	ldr	r3, [r0, #0]
 80113cc:	07db      	lsls	r3, r3, #31
 80113ce:	d538      	bpl.n	8011442 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80113d0:	4bbd      	ldr	r3, [pc, #756]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	230c      	movs	r3, #12
 80113d6:	4013      	ands	r3, r2
 80113d8:	2b04      	cmp	r3, #4
 80113da:	d02a      	beq.n	8011432 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80113dc:	4bba      	ldr	r3, [pc, #744]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	230c      	movs	r3, #12
 80113e2:	4013      	ands	r3, r2
 80113e4:	2b08      	cmp	r3, #8
 80113e6:	d108      	bne.n	80113fa <HAL_RCC_OscConfig+0x3a>
 80113e8:	4bb7      	ldr	r3, [pc, #732]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	22c0      	movs	r2, #192	; 0xc0
 80113ee:	0252      	lsls	r2, r2, #9
 80113f0:	4013      	ands	r3, r2
 80113f2:	2280      	movs	r2, #128	; 0x80
 80113f4:	0252      	lsls	r2, r2, #9
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d01b      	beq.n	8011432 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80113fa:	4bb3      	ldr	r3, [pc, #716]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	49b3      	ldr	r1, [pc, #716]	; (80116cc <HAL_RCC_OscConfig+0x30c>)
 8011400:	400a      	ands	r2, r1
 8011402:	601a      	str	r2, [r3, #0]
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	49b2      	ldr	r1, [pc, #712]	; (80116d0 <HAL_RCC_OscConfig+0x310>)
 8011408:	400a      	ands	r2, r1
 801140a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801140c:	f7fe fba4 	bl	800fb58 <HAL_GetTick>
 8011410:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011412:	4fad      	ldr	r7, [pc, #692]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011414:	2680      	movs	r6, #128	; 0x80
 8011416:	02b6      	lsls	r6, r6, #10
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	4233      	tst	r3, r6
 801141c:	d039      	beq.n	8011492 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801141e:	f7fe fb9b 	bl	800fb58 <HAL_GetTick>
 8011422:	1b40      	subs	r0, r0, r5
 8011424:	2864      	cmp	r0, #100	; 0x64
 8011426:	d9f7      	bls.n	8011418 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011428:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801142a:	b002      	add	sp, #8
 801142c:	bc80      	pop	{r7}
 801142e:	46b8      	mov	r8, r7
 8011430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011432:	4ba5      	ldr	r3, [pc, #660]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	039b      	lsls	r3, r3, #14
 8011438:	d503      	bpl.n	8011442 <HAL_RCC_OscConfig+0x82>
 801143a:	6863      	ldr	r3, [r4, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d100      	bne.n	8011442 <HAL_RCC_OscConfig+0x82>
 8011440:	e274      	b.n	801192c <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011442:	6823      	ldr	r3, [r4, #0]
 8011444:	079b      	lsls	r3, r3, #30
 8011446:	d400      	bmi.n	801144a <HAL_RCC_OscConfig+0x8a>
 8011448:	e08d      	b.n	8011566 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801144a:	4b9f      	ldr	r3, [pc, #636]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	220c      	movs	r2, #12
 8011450:	421a      	tst	r2, r3
 8011452:	d077      	beq.n	8011544 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011454:	4b9c      	ldr	r3, [pc, #624]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	230c      	movs	r3, #12
 801145a:	4013      	ands	r3, r2
 801145c:	2b08      	cmp	r3, #8
 801145e:	d068      	beq.n	8011532 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011460:	68e3      	ldr	r3, [r4, #12]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d100      	bne.n	8011468 <HAL_RCC_OscConfig+0xa8>
 8011466:	e0a1      	b.n	80115ac <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011468:	4a97      	ldr	r2, [pc, #604]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801146a:	6813      	ldr	r3, [r2, #0]
 801146c:	2101      	movs	r1, #1
 801146e:	430b      	orrs	r3, r1
 8011470:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011472:	f7fe fb71 	bl	800fb58 <HAL_GetTick>
 8011476:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011478:	4f93      	ldr	r7, [pc, #588]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801147a:	2602      	movs	r6, #2
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	421e      	tst	r6, r3
 8011480:	d000      	beq.n	8011484 <HAL_RCC_OscConfig+0xc4>
 8011482:	e08a      	b.n	801159a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011484:	f7fe fb68 	bl	800fb58 <HAL_GetTick>
 8011488:	1b40      	subs	r0, r0, r5
 801148a:	2864      	cmp	r0, #100	; 0x64
 801148c:	d9f6      	bls.n	801147c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801148e:	2003      	movs	r0, #3
 8011490:	e7cb      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011492:	6863      	ldr	r3, [r4, #4]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d00b      	beq.n	80114b0 <HAL_RCC_OscConfig+0xf0>
 8011498:	2b00      	cmp	r3, #0
 801149a:	d122      	bne.n	80114e2 <HAL_RCC_OscConfig+0x122>
 801149c:	4b8a      	ldr	r3, [pc, #552]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	498a      	ldr	r1, [pc, #552]	; (80116cc <HAL_RCC_OscConfig+0x30c>)
 80114a2:	400a      	ands	r2, r1
 80114a4:	601a      	str	r2, [r3, #0]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	4989      	ldr	r1, [pc, #548]	; (80116d0 <HAL_RCC_OscConfig+0x310>)
 80114aa:	400a      	ands	r2, r1
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	e005      	b.n	80114bc <HAL_RCC_OscConfig+0xfc>
 80114b0:	4a85      	ldr	r2, [pc, #532]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80114b2:	6811      	ldr	r1, [r2, #0]
 80114b4:	2380      	movs	r3, #128	; 0x80
 80114b6:	025b      	lsls	r3, r3, #9
 80114b8:	430b      	orrs	r3, r1
 80114ba:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d027      	beq.n	8011512 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80114c2:	f7fe fb49 	bl	800fb58 <HAL_GetTick>
 80114c6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114c8:	4f7f      	ldr	r7, [pc, #508]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80114ca:	2680      	movs	r6, #128	; 0x80
 80114cc:	02b6      	lsls	r6, r6, #10
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	4233      	tst	r3, r6
 80114d2:	d1b6      	bne.n	8011442 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80114d4:	f7fe fb40 	bl	800fb58 <HAL_GetTick>
 80114d8:	1b40      	subs	r0, r0, r5
 80114da:	2864      	cmp	r0, #100	; 0x64
 80114dc:	d9f7      	bls.n	80114ce <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80114de:	2003      	movs	r0, #3
 80114e0:	e7a3      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	d009      	beq.n	80114fa <HAL_RCC_OscConfig+0x13a>
 80114e6:	4b78      	ldr	r3, [pc, #480]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	4978      	ldr	r1, [pc, #480]	; (80116cc <HAL_RCC_OscConfig+0x30c>)
 80114ec:	400a      	ands	r2, r1
 80114ee:	601a      	str	r2, [r3, #0]
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	4977      	ldr	r1, [pc, #476]	; (80116d0 <HAL_RCC_OscConfig+0x310>)
 80114f4:	400a      	ands	r2, r1
 80114f6:	601a      	str	r2, [r3, #0]
 80114f8:	e7e0      	b.n	80114bc <HAL_RCC_OscConfig+0xfc>
 80114fa:	4b73      	ldr	r3, [pc, #460]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80114fc:	6819      	ldr	r1, [r3, #0]
 80114fe:	2280      	movs	r2, #128	; 0x80
 8011500:	02d2      	lsls	r2, r2, #11
 8011502:	430a      	orrs	r2, r1
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	6819      	ldr	r1, [r3, #0]
 8011508:	2280      	movs	r2, #128	; 0x80
 801150a:	0252      	lsls	r2, r2, #9
 801150c:	430a      	orrs	r2, r1
 801150e:	601a      	str	r2, [r3, #0]
 8011510:	e7d4      	b.n	80114bc <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011512:	f7fe fb21 	bl	800fb58 <HAL_GetTick>
 8011516:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011518:	4f6b      	ldr	r7, [pc, #428]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801151a:	2680      	movs	r6, #128	; 0x80
 801151c:	02b6      	lsls	r6, r6, #10
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	4233      	tst	r3, r6
 8011522:	d08e      	beq.n	8011442 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011524:	f7fe fb18 	bl	800fb58 <HAL_GetTick>
 8011528:	1b40      	subs	r0, r0, r5
 801152a:	2864      	cmp	r0, #100	; 0x64
 801152c:	d9f7      	bls.n	801151e <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 801152e:	2003      	movs	r0, #3
 8011530:	e77b      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011532:	4b65      	ldr	r3, [pc, #404]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	22c0      	movs	r2, #192	; 0xc0
 8011538:	0252      	lsls	r2, r2, #9
 801153a:	4013      	ands	r3, r2
 801153c:	2280      	movs	r2, #128	; 0x80
 801153e:	0212      	lsls	r2, r2, #8
 8011540:	4293      	cmp	r3, r2
 8011542:	d18d      	bne.n	8011460 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011544:	4b60      	ldr	r3, [pc, #384]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	079b      	lsls	r3, r3, #30
 801154a:	d504      	bpl.n	8011556 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 801154c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801154e:	68e3      	ldr	r3, [r4, #12]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d000      	beq.n	8011556 <HAL_RCC_OscConfig+0x196>
 8011554:	e769      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011556:	495c      	ldr	r1, [pc, #368]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011558:	680a      	ldr	r2, [r1, #0]
 801155a:	6923      	ldr	r3, [r4, #16]
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	20f8      	movs	r0, #248	; 0xf8
 8011560:	4382      	bics	r2, r0
 8011562:	4313      	orrs	r3, r2
 8011564:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	071b      	lsls	r3, r3, #28
 801156a:	d547      	bpl.n	80115fc <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801156c:	6a23      	ldr	r3, [r4, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d030      	beq.n	80115d4 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011572:	4a55      	ldr	r2, [pc, #340]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011574:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011576:	2101      	movs	r1, #1
 8011578:	430b      	orrs	r3, r1
 801157a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801157c:	f7fe faec 	bl	800fb58 <HAL_GetTick>
 8011580:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011582:	4f51      	ldr	r7, [pc, #324]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011584:	2602      	movs	r6, #2
 8011586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011588:	421e      	tst	r6, r3
 801158a:	d137      	bne.n	80115fc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801158c:	f7fe fae4 	bl	800fb58 <HAL_GetTick>
 8011590:	1b40      	subs	r0, r0, r5
 8011592:	2864      	cmp	r0, #100	; 0x64
 8011594:	d9f7      	bls.n	8011586 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011596:	2003      	movs	r0, #3
 8011598:	e747      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801159a:	494b      	ldr	r1, [pc, #300]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801159c:	680a      	ldr	r2, [r1, #0]
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	00db      	lsls	r3, r3, #3
 80115a2:	20f8      	movs	r0, #248	; 0xf8
 80115a4:	4382      	bics	r2, r0
 80115a6:	4313      	orrs	r3, r2
 80115a8:	600b      	str	r3, [r1, #0]
 80115aa:	e7dc      	b.n	8011566 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 80115ac:	4a46      	ldr	r2, [pc, #280]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80115ae:	6813      	ldr	r3, [r2, #0]
 80115b0:	2101      	movs	r1, #1
 80115b2:	438b      	bics	r3, r1
 80115b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80115b6:	f7fe facf 	bl	800fb58 <HAL_GetTick>
 80115ba:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80115bc:	4f42      	ldr	r7, [pc, #264]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80115be:	2602      	movs	r6, #2
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	421e      	tst	r6, r3
 80115c4:	d0cf      	beq.n	8011566 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80115c6:	f7fe fac7 	bl	800fb58 <HAL_GetTick>
 80115ca:	1b40      	subs	r0, r0, r5
 80115cc:	2864      	cmp	r0, #100	; 0x64
 80115ce:	d9f7      	bls.n	80115c0 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80115d0:	2003      	movs	r0, #3
 80115d2:	e72a      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80115d4:	4a3c      	ldr	r2, [pc, #240]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80115d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80115d8:	2101      	movs	r1, #1
 80115da:	438b      	bics	r3, r1
 80115dc:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80115de:	f7fe fabb 	bl	800fb58 <HAL_GetTick>
 80115e2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80115e4:	4f38      	ldr	r7, [pc, #224]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 80115e6:	2602      	movs	r6, #2
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	421e      	tst	r6, r3
 80115ec:	d006      	beq.n	80115fc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80115ee:	f7fe fab3 	bl	800fb58 <HAL_GetTick>
 80115f2:	1b40      	subs	r0, r0, r5
 80115f4:	2864      	cmp	r0, #100	; 0x64
 80115f6:	d9f7      	bls.n	80115e8 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80115f8:	2003      	movs	r0, #3
 80115fa:	e716      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80115fc:	6823      	ldr	r3, [r4, #0]
 80115fe:	075b      	lsls	r3, r3, #29
 8011600:	d442      	bmi.n	8011688 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011602:	6823      	ldr	r3, [r4, #0]
 8011604:	06db      	lsls	r3, r3, #27
 8011606:	d512      	bpl.n	801162e <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011608:	6963      	ldr	r3, [r4, #20]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d100      	bne.n	8011610 <HAL_RCC_OscConfig+0x250>
 801160e:	e0ce      	b.n	80117ae <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011610:	3305      	adds	r3, #5
 8011612:	d000      	beq.n	8011616 <HAL_RCC_OscConfig+0x256>
 8011614:	e0ec      	b.n	80117f0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011616:	4a2c      	ldr	r2, [pc, #176]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011618:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801161a:	2104      	movs	r1, #4
 801161c:	438b      	bics	r3, r1
 801161e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011620:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011622:	69a3      	ldr	r3, [r4, #24]
 8011624:	00db      	lsls	r3, r3, #3
 8011626:	20f8      	movs	r0, #248	; 0xf8
 8011628:	4381      	bics	r1, r0
 801162a:	430b      	orrs	r3, r1
 801162c:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801162e:	6823      	ldr	r3, [r4, #0]
 8011630:	069b      	lsls	r3, r3, #26
 8011632:	d400      	bmi.n	8011636 <HAL_RCC_OscConfig+0x276>
 8011634:	e106      	b.n	8011844 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011636:	4b24      	ldr	r3, [pc, #144]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	230c      	movs	r3, #12
 801163c:	4013      	ands	r3, r2
 801163e:	2b0c      	cmp	r3, #12
 8011640:	d100      	bne.n	8011644 <HAL_RCC_OscConfig+0x284>
 8011642:	e0f6      	b.n	8011832 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011644:	4b20      	ldr	r3, [pc, #128]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 8011646:	685a      	ldr	r2, [r3, #4]
 8011648:	230c      	movs	r3, #12
 801164a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801164c:	2b08      	cmp	r3, #8
 801164e:	d100      	bne.n	8011652 <HAL_RCC_OscConfig+0x292>
 8011650:	e0e7      	b.n	8011822 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011652:	69e3      	ldr	r3, [r4, #28]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d100      	bne.n	801165a <HAL_RCC_OscConfig+0x29a>
 8011658:	e116      	b.n	8011888 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801165a:	4a1b      	ldr	r2, [pc, #108]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801165c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801165e:	2380      	movs	r3, #128	; 0x80
 8011660:	025b      	lsls	r3, r3, #9
 8011662:	430b      	orrs	r3, r1
 8011664:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011666:	f7fe fa77 	bl	800fb58 <HAL_GetTick>
 801166a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801166c:	4f16      	ldr	r7, [pc, #88]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801166e:	2680      	movs	r6, #128	; 0x80
 8011670:	0276      	lsls	r6, r6, #9
 8011672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011674:	4233      	tst	r3, r6
 8011676:	d000      	beq.n	801167a <HAL_RCC_OscConfig+0x2ba>
 8011678:	e0e4      	b.n	8011844 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801167a:	f7fe fa6d 	bl	800fb58 <HAL_GetTick>
 801167e:	1b40      	subs	r0, r0, r5
 8011680:	2864      	cmp	r0, #100	; 0x64
 8011682:	d9f6      	bls.n	8011672 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011684:	2003      	movs	r0, #3
 8011686:	e6d0      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011688:	4a0f      	ldr	r2, [pc, #60]	; (80116c8 <HAL_RCC_OscConfig+0x308>)
 801168a:	69d1      	ldr	r1, [r2, #28]
 801168c:	2080      	movs	r0, #128	; 0x80
 801168e:	0540      	lsls	r0, r0, #21
 8011690:	4301      	orrs	r1, r0
 8011692:	61d1      	str	r1, [r2, #28]
 8011694:	69d3      	ldr	r3, [r2, #28]
 8011696:	4003      	ands	r3, r0
 8011698:	9301      	str	r3, [sp, #4]
 801169a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801169c:	4a0d      	ldr	r2, [pc, #52]	; (80116d4 <HAL_RCC_OscConfig+0x314>)
 801169e:	6811      	ldr	r1, [r2, #0]
 80116a0:	2380      	movs	r3, #128	; 0x80
 80116a2:	005b      	lsls	r3, r3, #1
 80116a4:	430b      	orrs	r3, r1
 80116a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80116a8:	f7fe fa56 	bl	800fb58 <HAL_GetTick>
 80116ac:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80116ae:	4f09      	ldr	r7, [pc, #36]	; (80116d4 <HAL_RCC_OscConfig+0x314>)
 80116b0:	2680      	movs	r6, #128	; 0x80
 80116b2:	0076      	lsls	r6, r6, #1
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	4233      	tst	r3, r6
 80116b8:	d10e      	bne.n	80116d8 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80116ba:	f7fe fa4d 	bl	800fb58 <HAL_GetTick>
 80116be:	1b40      	subs	r0, r0, r5
 80116c0:	2864      	cmp	r0, #100	; 0x64
 80116c2:	d9f7      	bls.n	80116b4 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80116c4:	2003      	movs	r0, #3
 80116c6:	e6b0      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
 80116c8:	40021000 	.word	0x40021000
 80116cc:	fffeffff 	.word	0xfffeffff
 80116d0:	fffbffff 	.word	0xfffbffff
 80116d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80116d8:	4b96      	ldr	r3, [pc, #600]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80116da:	6a1a      	ldr	r2, [r3, #32]
 80116dc:	2101      	movs	r1, #1
 80116de:	438a      	bics	r2, r1
 80116e0:	621a      	str	r2, [r3, #32]
 80116e2:	6a1a      	ldr	r2, [r3, #32]
 80116e4:	3103      	adds	r1, #3
 80116e6:	438a      	bics	r2, r1
 80116e8:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80116ea:	f7fe fa35 	bl	800fb58 <HAL_GetTick>
 80116ee:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80116f0:	4f90      	ldr	r7, [pc, #576]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80116f2:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80116f4:	4b90      	ldr	r3, [pc, #576]	; (8011938 <HAL_RCC_OscConfig+0x578>)
 80116f6:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80116f8:	6a3b      	ldr	r3, [r7, #32]
 80116fa:	421e      	tst	r6, r3
 80116fc:	d006      	beq.n	801170c <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80116fe:	f7fe fa2b 	bl	800fb58 <HAL_GetTick>
 8011702:	1b40      	subs	r0, r0, r5
 8011704:	4540      	cmp	r0, r8
 8011706:	d9f7      	bls.n	80116f8 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 8011708:	2003      	movs	r0, #3
 801170a:	e68e      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801170c:	68a3      	ldr	r3, [r4, #8]
 801170e:	2b01      	cmp	r3, #1
 8011710:	d00b      	beq.n	801172a <HAL_RCC_OscConfig+0x36a>
 8011712:	2b00      	cmp	r3, #0
 8011714:	d123      	bne.n	801175e <HAL_RCC_OscConfig+0x39e>
 8011716:	4b87      	ldr	r3, [pc, #540]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011718:	6a1a      	ldr	r2, [r3, #32]
 801171a:	2101      	movs	r1, #1
 801171c:	438a      	bics	r2, r1
 801171e:	621a      	str	r2, [r3, #32]
 8011720:	6a1a      	ldr	r2, [r3, #32]
 8011722:	3103      	adds	r1, #3
 8011724:	438a      	bics	r2, r1
 8011726:	621a      	str	r2, [r3, #32]
 8011728:	e004      	b.n	8011734 <HAL_RCC_OscConfig+0x374>
 801172a:	4a82      	ldr	r2, [pc, #520]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 801172c:	6a13      	ldr	r3, [r2, #32]
 801172e:	2101      	movs	r1, #1
 8011730:	430b      	orrs	r3, r1
 8011732:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011734:	68a3      	ldr	r3, [r4, #8]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d027      	beq.n	801178a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801173a:	f7fe fa0d 	bl	800fb58 <HAL_GetTick>
 801173e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011740:	4f7c      	ldr	r7, [pc, #496]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011742:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011744:	4b7c      	ldr	r3, [pc, #496]	; (8011938 <HAL_RCC_OscConfig+0x578>)
 8011746:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011748:	6a3b      	ldr	r3, [r7, #32]
 801174a:	421e      	tst	r6, r3
 801174c:	d000      	beq.n	8011750 <HAL_RCC_OscConfig+0x390>
 801174e:	e758      	b.n	8011602 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011750:	f7fe fa02 	bl	800fb58 <HAL_GetTick>
 8011754:	1b40      	subs	r0, r0, r5
 8011756:	4540      	cmp	r0, r8
 8011758:	d9f6      	bls.n	8011748 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 801175a:	2003      	movs	r0, #3
 801175c:	e665      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801175e:	2b05      	cmp	r3, #5
 8011760:	d009      	beq.n	8011776 <HAL_RCC_OscConfig+0x3b6>
 8011762:	4b74      	ldr	r3, [pc, #464]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011764:	6a1a      	ldr	r2, [r3, #32]
 8011766:	2101      	movs	r1, #1
 8011768:	438a      	bics	r2, r1
 801176a:	621a      	str	r2, [r3, #32]
 801176c:	6a1a      	ldr	r2, [r3, #32]
 801176e:	3103      	adds	r1, #3
 8011770:	438a      	bics	r2, r1
 8011772:	621a      	str	r2, [r3, #32]
 8011774:	e7de      	b.n	8011734 <HAL_RCC_OscConfig+0x374>
 8011776:	4b6f      	ldr	r3, [pc, #444]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011778:	6a1a      	ldr	r2, [r3, #32]
 801177a:	2104      	movs	r1, #4
 801177c:	430a      	orrs	r2, r1
 801177e:	621a      	str	r2, [r3, #32]
 8011780:	6a1a      	ldr	r2, [r3, #32]
 8011782:	3903      	subs	r1, #3
 8011784:	430a      	orrs	r2, r1
 8011786:	621a      	str	r2, [r3, #32]
 8011788:	e7d4      	b.n	8011734 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801178a:	f7fe f9e5 	bl	800fb58 <HAL_GetTick>
 801178e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011790:	4f68      	ldr	r7, [pc, #416]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011792:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011794:	4b68      	ldr	r3, [pc, #416]	; (8011938 <HAL_RCC_OscConfig+0x578>)
 8011796:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	421e      	tst	r6, r3
 801179c:	d100      	bne.n	80117a0 <HAL_RCC_OscConfig+0x3e0>
 801179e:	e730      	b.n	8011602 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117a0:	f7fe f9da 	bl	800fb58 <HAL_GetTick>
 80117a4:	1b40      	subs	r0, r0, r5
 80117a6:	4540      	cmp	r0, r8
 80117a8:	d9f6      	bls.n	8011798 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 80117aa:	2003      	movs	r0, #3
 80117ac:	e63d      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80117ae:	4b61      	ldr	r3, [pc, #388]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80117b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117b2:	2104      	movs	r1, #4
 80117b4:	430a      	orrs	r2, r1
 80117b6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80117b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117ba:	3903      	subs	r1, #3
 80117bc:	430a      	orrs	r2, r1
 80117be:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80117c0:	f7fe f9ca 	bl	800fb58 <HAL_GetTick>
 80117c4:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80117c6:	4f5b      	ldr	r7, [pc, #364]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80117c8:	2602      	movs	r6, #2
 80117ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117cc:	421e      	tst	r6, r3
 80117ce:	d106      	bne.n	80117de <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80117d0:	f7fe f9c2 	bl	800fb58 <HAL_GetTick>
 80117d4:	1b40      	subs	r0, r0, r5
 80117d6:	2864      	cmp	r0, #100	; 0x64
 80117d8:	d9f7      	bls.n	80117ca <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80117da:	2003      	movs	r0, #3
 80117dc:	e625      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80117de:	4955      	ldr	r1, [pc, #340]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80117e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80117e2:	69a3      	ldr	r3, [r4, #24]
 80117e4:	00db      	lsls	r3, r3, #3
 80117e6:	20f8      	movs	r0, #248	; 0xf8
 80117e8:	4382      	bics	r2, r0
 80117ea:	4313      	orrs	r3, r2
 80117ec:	634b      	str	r3, [r1, #52]	; 0x34
 80117ee:	e71e      	b.n	801162e <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80117f0:	4b50      	ldr	r3, [pc, #320]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80117f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117f4:	2104      	movs	r1, #4
 80117f6:	430a      	orrs	r2, r1
 80117f8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80117fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117fc:	3903      	subs	r1, #3
 80117fe:	438a      	bics	r2, r1
 8011800:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011802:	f7fe f9a9 	bl	800fb58 <HAL_GetTick>
 8011806:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011808:	4f4a      	ldr	r7, [pc, #296]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 801180a:	2602      	movs	r6, #2
 801180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801180e:	421e      	tst	r6, r3
 8011810:	d100      	bne.n	8011814 <HAL_RCC_OscConfig+0x454>
 8011812:	e70c      	b.n	801162e <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011814:	f7fe f9a0 	bl	800fb58 <HAL_GetTick>
 8011818:	1b40      	subs	r0, r0, r5
 801181a:	2864      	cmp	r0, #100	; 0x64
 801181c:	d9f6      	bls.n	801180c <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 801181e:	2003      	movs	r0, #3
 8011820:	e603      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011822:	4b44      	ldr	r3, [pc, #272]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	22c0      	movs	r2, #192	; 0xc0
 8011828:	0252      	lsls	r2, r2, #9
 801182a:	4013      	ands	r3, r2
 801182c:	4293      	cmp	r3, r2
 801182e:	d000      	beq.n	8011832 <HAL_RCC_OscConfig+0x472>
 8011830:	e70f      	b.n	8011652 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011832:	4b40      	ldr	r3, [pc, #256]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011836:	03db      	lsls	r3, r3, #15
 8011838:	d504      	bpl.n	8011844 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801183a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801183c:	69e3      	ldr	r3, [r4, #28]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d000      	beq.n	8011844 <HAL_RCC_OscConfig+0x484>
 8011842:	e5f2      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011844:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8011846:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011848:	2b00      	cmp	r3, #0
 801184a:	d100      	bne.n	801184e <HAL_RCC_OscConfig+0x48e>
 801184c:	e5ed      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801184e:	4a39      	ldr	r2, [pc, #228]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011850:	6851      	ldr	r1, [r2, #4]
 8011852:	220c      	movs	r2, #12
 8011854:	400a      	ands	r2, r1
 8011856:	2a08      	cmp	r2, #8
 8011858:	d06a      	beq.n	8011930 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801185a:	2b02      	cmp	r3, #2
 801185c:	d029      	beq.n	80118b2 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801185e:	4a35      	ldr	r2, [pc, #212]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011860:	6813      	ldr	r3, [r2, #0]
 8011862:	4936      	ldr	r1, [pc, #216]	; (801193c <HAL_RCC_OscConfig+0x57c>)
 8011864:	400b      	ands	r3, r1
 8011866:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011868:	f7fe f976 	bl	800fb58 <HAL_GetTick>
 801186c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801186e:	4e31      	ldr	r6, [pc, #196]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 8011870:	2580      	movs	r5, #128	; 0x80
 8011872:	04ad      	lsls	r5, r5, #18
 8011874:	6833      	ldr	r3, [r6, #0]
 8011876:	422b      	tst	r3, r5
 8011878:	d056      	beq.n	8011928 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801187a:	f7fe f96d 	bl	800fb58 <HAL_GetTick>
 801187e:	1b00      	subs	r0, r0, r4
 8011880:	2864      	cmp	r0, #100	; 0x64
 8011882:	d9f7      	bls.n	8011874 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8011884:	2003      	movs	r0, #3
 8011886:	e5d0      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8011888:	4a2a      	ldr	r2, [pc, #168]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 801188a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801188c:	492c      	ldr	r1, [pc, #176]	; (8011940 <HAL_RCC_OscConfig+0x580>)
 801188e:	400b      	ands	r3, r1
 8011890:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011892:	f7fe f961 	bl	800fb58 <HAL_GetTick>
 8011896:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011898:	4f26      	ldr	r7, [pc, #152]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 801189a:	2680      	movs	r6, #128	; 0x80
 801189c:	0276      	lsls	r6, r6, #9
 801189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a0:	4233      	tst	r3, r6
 80118a2:	d0cf      	beq.n	8011844 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80118a4:	f7fe f958 	bl	800fb58 <HAL_GetTick>
 80118a8:	1b40      	subs	r0, r0, r5
 80118aa:	2864      	cmp	r0, #100	; 0x64
 80118ac:	d9f7      	bls.n	801189e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 80118ae:	2003      	movs	r0, #3
 80118b0:	e5bb      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 80118b2:	4a20      	ldr	r2, [pc, #128]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80118b4:	6813      	ldr	r3, [r2, #0]
 80118b6:	4921      	ldr	r1, [pc, #132]	; (801193c <HAL_RCC_OscConfig+0x57c>)
 80118b8:	400b      	ands	r3, r1
 80118ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80118bc:	f7fe f94c 	bl	800fb58 <HAL_GetTick>
 80118c0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80118c2:	4f1c      	ldr	r7, [pc, #112]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80118c4:	2680      	movs	r6, #128	; 0x80
 80118c6:	04b6      	lsls	r6, r6, #18
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	4233      	tst	r3, r6
 80118cc:	d006      	beq.n	80118dc <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118ce:	f7fe f943 	bl	800fb58 <HAL_GetTick>
 80118d2:	1b40      	subs	r0, r0, r5
 80118d4:	2864      	cmp	r0, #100	; 0x64
 80118d6:	d9f7      	bls.n	80118c8 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80118d8:	2003      	movs	r0, #3
 80118da:	e5a6      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80118dc:	4b15      	ldr	r3, [pc, #84]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 80118de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e0:	210f      	movs	r1, #15
 80118e2:	438a      	bics	r2, r1
 80118e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80118e6:	430a      	orrs	r2, r1
 80118e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80118ea:	6859      	ldr	r1, [r3, #4]
 80118ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80118ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80118f0:	4302      	orrs	r2, r0
 80118f2:	4814      	ldr	r0, [pc, #80]	; (8011944 <HAL_RCC_OscConfig+0x584>)
 80118f4:	4001      	ands	r1, r0
 80118f6:	430a      	orrs	r2, r1
 80118f8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80118fa:	6819      	ldr	r1, [r3, #0]
 80118fc:	2280      	movs	r2, #128	; 0x80
 80118fe:	0452      	lsls	r2, r2, #17
 8011900:	430a      	orrs	r2, r1
 8011902:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011904:	f7fe f928 	bl	800fb58 <HAL_GetTick>
 8011908:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801190a:	4e0a      	ldr	r6, [pc, #40]	; (8011934 <HAL_RCC_OscConfig+0x574>)
 801190c:	2580      	movs	r5, #128	; 0x80
 801190e:	04ad      	lsls	r5, r5, #18
 8011910:	6833      	ldr	r3, [r6, #0]
 8011912:	422b      	tst	r3, r5
 8011914:	d106      	bne.n	8011924 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011916:	f7fe f91f 	bl	800fb58 <HAL_GetTick>
 801191a:	1b00      	subs	r0, r0, r4
 801191c:	2864      	cmp	r0, #100	; 0x64
 801191e:	d9f7      	bls.n	8011910 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8011920:	2003      	movs	r0, #3
 8011922:	e582      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8011924:	2000      	movs	r0, #0
 8011926:	e580      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
 8011928:	2000      	movs	r0, #0
 801192a:	e57e      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 801192c:	2001      	movs	r0, #1
 801192e:	e57c      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8011930:	2001      	movs	r0, #1
 8011932:	e57a      	b.n	801142a <HAL_RCC_OscConfig+0x6a>
 8011934:	40021000 	.word	0x40021000
 8011938:	00001388 	.word	0x00001388
 801193c:	feffffff 	.word	0xfeffffff
 8011940:	fffeffff 	.word	0xfffeffff
 8011944:	ffc27fff 	.word	0xffc27fff

08011948 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801194a:	46ce      	mov	lr, r9
 801194c:	4647      	mov	r7, r8
 801194e:	b580      	push	{r7, lr}
 8011950:	0004      	movs	r4, r0
 8011952:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011954:	4b96      	ldr	r3, [pc, #600]	; (8011bb0 <HAL_RCC_ClockConfig+0x268>)
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	2301      	movs	r3, #1
 801195a:	4013      	ands	r3, r2
 801195c:	428b      	cmp	r3, r1
 801195e:	d300      	bcc.n	8011962 <HAL_RCC_ClockConfig+0x1a>
 8011960:	e086      	b.n	8011a70 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011962:	4993      	ldr	r1, [pc, #588]	; (8011bb0 <HAL_RCC_ClockConfig+0x268>)
 8011964:	680b      	ldr	r3, [r1, #0]
 8011966:	2201      	movs	r2, #1
 8011968:	4393      	bics	r3, r2
 801196a:	432b      	orrs	r3, r5
 801196c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801196e:	680b      	ldr	r3, [r1, #0]
 8011970:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8011972:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011974:	42aa      	cmp	r2, r5
 8011976:	d000      	beq.n	801197a <HAL_RCC_ClockConfig+0x32>
 8011978:	e111      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	079b      	lsls	r3, r3, #30
 801197e:	d506      	bpl.n	801198e <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011980:	4a8c      	ldr	r2, [pc, #560]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011982:	6853      	ldr	r3, [r2, #4]
 8011984:	21f0      	movs	r1, #240	; 0xf0
 8011986:	438b      	bics	r3, r1
 8011988:	68a1      	ldr	r1, [r4, #8]
 801198a:	430b      	orrs	r3, r1
 801198c:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	07db      	lsls	r3, r3, #31
 8011992:	d400      	bmi.n	8011996 <HAL_RCC_ClockConfig+0x4e>
 8011994:	e0f5      	b.n	8011b82 <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011996:	6862      	ldr	r2, [r4, #4]
 8011998:	2a01      	cmp	r2, #1
 801199a:	d009      	beq.n	80119b0 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801199c:	2a02      	cmp	r2, #2
 801199e:	d02b      	beq.n	80119f8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80119a0:	2a03      	cmp	r2, #3
 80119a2:	d02f      	beq.n	8011a04 <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80119a4:	4b83      	ldr	r3, [pc, #524]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	079b      	lsls	r3, r3, #30
 80119aa:	d406      	bmi.n	80119ba <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 80119ac:	2001      	movs	r0, #1
 80119ae:	e0f6      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119b0:	4b80      	ldr	r3, [pc, #512]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	039b      	lsls	r3, r3, #14
 80119b6:	d400      	bmi.n	80119ba <HAL_RCC_ClockConfig+0x72>
 80119b8:	e0f5      	b.n	8011ba6 <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80119ba:	497e      	ldr	r1, [pc, #504]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 80119bc:	684b      	ldr	r3, [r1, #4]
 80119be:	2003      	movs	r0, #3
 80119c0:	4383      	bics	r3, r0
 80119c2:	4313      	orrs	r3, r2
 80119c4:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119c6:	f7fe f8c7 	bl	800fb58 <HAL_GetTick>
 80119ca:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80119cc:	6863      	ldr	r3, [r4, #4]
 80119ce:	2b01      	cmp	r3, #1
 80119d0:	d01e      	beq.n	8011a10 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d02c      	beq.n	8011a30 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80119d6:	2b03      	cmp	r3, #3
 80119d8:	d03a      	beq.n	8011a50 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80119da:	4f76      	ldr	r7, [pc, #472]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 80119dc:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119de:	4b76      	ldr	r3, [pc, #472]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 80119e0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	421e      	tst	r6, r3
 80119e6:	d100      	bne.n	80119ea <HAL_RCC_ClockConfig+0xa2>
 80119e8:	e0cb      	b.n	8011b82 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119ea:	f7fe f8b5 	bl	800fb58 <HAL_GetTick>
 80119ee:	1b40      	subs	r0, r0, r5
 80119f0:	4540      	cmp	r0, r8
 80119f2:	d9f6      	bls.n	80119e2 <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80119f4:	2003      	movs	r0, #3
 80119f6:	e0d2      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80119f8:	4b6e      	ldr	r3, [pc, #440]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	019b      	lsls	r3, r3, #6
 80119fe:	d4dc      	bmi.n	80119ba <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8011a00:	2001      	movs	r0, #1
 8011a02:	e0cc      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011a04:	4b6b      	ldr	r3, [pc, #428]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a08:	03db      	lsls	r3, r3, #15
 8011a0a:	d4d6      	bmi.n	80119ba <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8011a0c:	2001      	movs	r0, #1
 8011a0e:	e0c6      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011a10:	4f68      	ldr	r7, [pc, #416]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a12:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a14:	4b68      	ldr	r3, [pc, #416]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011a16:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4033      	ands	r3, r6
 8011a1c:	2b04      	cmp	r3, #4
 8011a1e:	d100      	bne.n	8011a22 <HAL_RCC_ClockConfig+0xda>
 8011a20:	e0af      	b.n	8011b82 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a22:	f7fe f899 	bl	800fb58 <HAL_GetTick>
 8011a26:	1b40      	subs	r0, r0, r5
 8011a28:	4540      	cmp	r0, r8
 8011a2a:	d9f5      	bls.n	8011a18 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 8011a2c:	2003      	movs	r0, #3
 8011a2e:	e0b6      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011a30:	4f60      	ldr	r7, [pc, #384]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a32:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a34:	4b60      	ldr	r3, [pc, #384]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011a36:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4033      	ands	r3, r6
 8011a3c:	2b08      	cmp	r3, #8
 8011a3e:	d100      	bne.n	8011a42 <HAL_RCC_ClockConfig+0xfa>
 8011a40:	e09f      	b.n	8011b82 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a42:	f7fe f889 	bl	800fb58 <HAL_GetTick>
 8011a46:	1b40      	subs	r0, r0, r5
 8011a48:	4540      	cmp	r0, r8
 8011a4a:	d9f5      	bls.n	8011a38 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 8011a4c:	2003      	movs	r0, #3
 8011a4e:	e0a6      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011a50:	4f58      	ldr	r7, [pc, #352]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a52:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a54:	4b58      	ldr	r3, [pc, #352]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011a56:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4033      	ands	r3, r6
 8011a5c:	2b0c      	cmp	r3, #12
 8011a5e:	d100      	bne.n	8011a62 <HAL_RCC_ClockConfig+0x11a>
 8011a60:	e08f      	b.n	8011b82 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a62:	f7fe f879 	bl	800fb58 <HAL_GetTick>
 8011a66:	1b40      	subs	r0, r0, r5
 8011a68:	4540      	cmp	r0, r8
 8011a6a:	d9f5      	bls.n	8011a58 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 8011a6c:	2003      	movs	r0, #3
 8011a6e:	e096      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011a70:	6803      	ldr	r3, [r0, #0]
 8011a72:	079b      	lsls	r3, r3, #30
 8011a74:	d506      	bpl.n	8011a84 <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a76:	4a4f      	ldr	r2, [pc, #316]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a78:	6853      	ldr	r3, [r2, #4]
 8011a7a:	21f0      	movs	r1, #240	; 0xf0
 8011a7c:	438b      	bics	r3, r1
 8011a7e:	6881      	ldr	r1, [r0, #8]
 8011a80:	430b      	orrs	r3, r1
 8011a82:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	07db      	lsls	r3, r3, #31
 8011a88:	d570      	bpl.n	8011b6c <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a8a:	6862      	ldr	r2, [r4, #4]
 8011a8c:	2a01      	cmp	r2, #1
 8011a8e:	d009      	beq.n	8011aa4 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011a90:	2a02      	cmp	r2, #2
 8011a92:	d02c      	beq.n	8011aee <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011a94:	2a03      	cmp	r2, #3
 8011a96:	d030      	beq.n	8011afa <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a98:	4b46      	ldr	r3, [pc, #280]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	079b      	lsls	r3, r3, #30
 8011a9e:	d406      	bmi.n	8011aae <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	e07c      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011aa4:	4b43      	ldr	r3, [pc, #268]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	039b      	lsls	r3, r3, #14
 8011aaa:	d400      	bmi.n	8011aae <HAL_RCC_ClockConfig+0x166>
 8011aac:	e07d      	b.n	8011baa <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011aae:	4941      	ldr	r1, [pc, #260]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011ab0:	684b      	ldr	r3, [r1, #4]
 8011ab2:	2003      	movs	r0, #3
 8011ab4:	4383      	bics	r3, r0
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011aba:	f7fe f84d 	bl	800fb58 <HAL_GetTick>
 8011abe:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ac0:	6863      	ldr	r3, [r4, #4]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d01f      	beq.n	8011b06 <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	d02e      	beq.n	8011b28 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011aca:	2b03      	cmp	r3, #3
 8011acc:	d03d      	beq.n	8011b4a <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011ace:	4b39      	ldr	r3, [pc, #228]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011ad0:	4698      	mov	r8, r3
 8011ad2:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ad4:	4b38      	ldr	r3, [pc, #224]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011ad6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011ad8:	4643      	mov	r3, r8
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	421f      	tst	r7, r3
 8011ade:	d045      	beq.n	8011b6c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ae0:	f7fe f83a 	bl	800fb58 <HAL_GetTick>
 8011ae4:	1b80      	subs	r0, r0, r6
 8011ae6:	4548      	cmp	r0, r9
 8011ae8:	d9f6      	bls.n	8011ad8 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011aea:	2003      	movs	r0, #3
 8011aec:	e057      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011aee:	4b31      	ldr	r3, [pc, #196]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	019b      	lsls	r3, r3, #6
 8011af4:	d4db      	bmi.n	8011aae <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8011af6:	2001      	movs	r0, #1
 8011af8:	e051      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011afa:	4b2e      	ldr	r3, [pc, #184]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011afe:	03db      	lsls	r3, r3, #15
 8011b00:	d4d5      	bmi.n	8011aae <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8011b02:	2001      	movs	r0, #1
 8011b04:	e04b      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011b06:	4b2b      	ldr	r3, [pc, #172]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011b08:	4698      	mov	r8, r3
 8011b0a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b0c:	4b2a      	ldr	r3, [pc, #168]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011b0e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011b10:	4643      	mov	r3, r8
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	403b      	ands	r3, r7
 8011b16:	2b04      	cmp	r3, #4
 8011b18:	d028      	beq.n	8011b6c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b1a:	f7fe f81d 	bl	800fb58 <HAL_GetTick>
 8011b1e:	1b80      	subs	r0, r0, r6
 8011b20:	4548      	cmp	r0, r9
 8011b22:	d9f5      	bls.n	8011b10 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 8011b24:	2003      	movs	r0, #3
 8011b26:	e03a      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011b28:	4b22      	ldr	r3, [pc, #136]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011b2a:	4698      	mov	r8, r3
 8011b2c:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b2e:	4b22      	ldr	r3, [pc, #136]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011b30:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011b32:	4643      	mov	r3, r8
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	403b      	ands	r3, r7
 8011b38:	2b08      	cmp	r3, #8
 8011b3a:	d017      	beq.n	8011b6c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b3c:	f7fe f80c 	bl	800fb58 <HAL_GetTick>
 8011b40:	1b80      	subs	r0, r0, r6
 8011b42:	4548      	cmp	r0, r9
 8011b44:	d9f5      	bls.n	8011b32 <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 8011b46:	2003      	movs	r0, #3
 8011b48:	e029      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011b4a:	4b1a      	ldr	r3, [pc, #104]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011b4c:	4698      	mov	r8, r3
 8011b4e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b50:	4b19      	ldr	r3, [pc, #100]	; (8011bb8 <HAL_RCC_ClockConfig+0x270>)
 8011b52:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011b54:	4643      	mov	r3, r8
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	403b      	ands	r3, r7
 8011b5a:	2b0c      	cmp	r3, #12
 8011b5c:	d006      	beq.n	8011b6c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b5e:	f7fd fffb 	bl	800fb58 <HAL_GetTick>
 8011b62:	1b80      	subs	r0, r0, r6
 8011b64:	4548      	cmp	r0, r9
 8011b66:	d9f5      	bls.n	8011b54 <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8011b68:	2003      	movs	r0, #3
 8011b6a:	e018      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b6c:	4910      	ldr	r1, [pc, #64]	; (8011bb0 <HAL_RCC_ClockConfig+0x268>)
 8011b6e:	680b      	ldr	r3, [r1, #0]
 8011b70:	2201      	movs	r2, #1
 8011b72:	4393      	bics	r3, r2
 8011b74:	432b      	orrs	r3, r5
 8011b76:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011b78:	680b      	ldr	r3, [r1, #0]
 8011b7a:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8011b7c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011b7e:	42aa      	cmp	r2, r5
 8011b80:	d10d      	bne.n	8011b9e <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	075b      	lsls	r3, r3, #29
 8011b86:	d506      	bpl.n	8011b96 <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011b88:	4a0a      	ldr	r2, [pc, #40]	; (8011bb4 <HAL_RCC_ClockConfig+0x26c>)
 8011b8a:	6853      	ldr	r3, [r2, #4]
 8011b8c:	490b      	ldr	r1, [pc, #44]	; (8011bbc <HAL_RCC_ClockConfig+0x274>)
 8011b8e:	400b      	ands	r3, r1
 8011b90:	68e1      	ldr	r1, [r4, #12]
 8011b92:	430b      	orrs	r3, r1
 8011b94:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8011b96:	2000      	movs	r0, #0
 8011b98:	f7fd ffb4 	bl	800fb04 <HAL_InitTick>
  
  return HAL_OK;
 8011b9c:	2000      	movs	r0, #0
}
 8011b9e:	bcc0      	pop	{r6, r7}
 8011ba0:	46b9      	mov	r9, r7
 8011ba2:	46b0      	mov	r8, r6
 8011ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8011ba6:	2001      	movs	r0, #1
 8011ba8:	e7f9      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 8011baa:	2001      	movs	r0, #1
 8011bac:	e7f7      	b.n	8011b9e <HAL_RCC_ClockConfig+0x256>
 8011bae:	46c0      	nop			; (mov r8, r8)
 8011bb0:	40022000 	.word	0x40022000
 8011bb4:	40021000 	.word	0x40021000
 8011bb8:	00001388 	.word	0x00001388
 8011bbc:	fffff8ff 	.word	0xfffff8ff

08011bc0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011bc4:	aa04      	add	r2, sp, #16
 8011bc6:	4b20      	ldr	r3, [pc, #128]	; (8011c48 <HAL_RCC_GetSysClockFreq+0x88>)
 8011bc8:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011bca:	c213      	stmia	r2!, {r0, r1, r4}
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011bd0:	466a      	mov	r2, sp
 8011bd2:	4b1e      	ldr	r3, [pc, #120]	; (8011c4c <HAL_RCC_GetSysClockFreq+0x8c>)
 8011bd4:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011bd6:	c213      	stmia	r2!, {r0, r1, r4}
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011bdc:	4b1c      	ldr	r3, [pc, #112]	; (8011c50 <HAL_RCC_GetSysClockFreq+0x90>)
 8011bde:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011be0:	200c      	movs	r0, #12
 8011be2:	4018      	ands	r0, r3
 8011be4:	2808      	cmp	r0, #8
 8011be6:	d00a      	beq.n	8011bfe <HAL_RCC_GetSysClockFreq+0x3e>
 8011be8:	380c      	subs	r0, #12
 8011bea:	1e43      	subs	r3, r0, #1
 8011bec:	4198      	sbcs	r0, r3
 8011bee:	4240      	negs	r0, r0
 8011bf0:	4b18      	ldr	r3, [pc, #96]	; (8011c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8011bf2:	4018      	ands	r0, r3
 8011bf4:	4b18      	ldr	r3, [pc, #96]	; (8011c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8011bf6:	469c      	mov	ip, r3
 8011bf8:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011bfa:	b008      	add	sp, #32
 8011bfc:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011bfe:	0c99      	lsrs	r1, r3, #18
 8011c00:	220f      	movs	r2, #15
 8011c02:	4011      	ands	r1, r2
 8011c04:	a804      	add	r0, sp, #16
 8011c06:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011c08:	4911      	ldr	r1, [pc, #68]	; (8011c50 <HAL_RCC_GetSysClockFreq+0x90>)
 8011c0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011c0c:	400a      	ands	r2, r1
 8011c0e:	4669      	mov	r1, sp
 8011c10:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011c12:	22c0      	movs	r2, #192	; 0xc0
 8011c14:	0252      	lsls	r2, r2, #9
 8011c16:	4013      	ands	r3, r2
 8011c18:	2280      	movs	r2, #128	; 0x80
 8011c1a:	0252      	lsls	r2, r2, #9
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d008      	beq.n	8011c32 <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011c20:	22c0      	movs	r2, #192	; 0xc0
 8011c22:	0252      	lsls	r2, r2, #9
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d009      	beq.n	8011c3c <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011c28:	480c      	ldr	r0, [pc, #48]	; (8011c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8011c2a:	f7ee fa91 	bl	8000150 <__udivsi3>
 8011c2e:	4360      	muls	r0, r4
 8011c30:	e7e3      	b.n	8011bfa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011c32:	480a      	ldr	r0, [pc, #40]	; (8011c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8011c34:	f7ee fa8c 	bl	8000150 <__udivsi3>
 8011c38:	4360      	muls	r0, r4
 8011c3a:	e7de      	b.n	8011bfa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011c3c:	4806      	ldr	r0, [pc, #24]	; (8011c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c3e:	f7ee fa87 	bl	8000150 <__udivsi3>
 8011c42:	4360      	muls	r0, r4
 8011c44:	e7d9      	b.n	8011bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8011c46:	46c0      	nop			; (mov r8, r8)
 8011c48:	0801cb24 	.word	0x0801cb24
 8011c4c:	0801cb38 	.word	0x0801cb38
 8011c50:	40021000 	.word	0x40021000
 8011c54:	fd9da600 	.word	0xfd9da600
 8011c58:	02dc6c00 	.word	0x02dc6c00
 8011c5c:	007a1200 	.word	0x007a1200

08011c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011c60:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011c62:	f7ff ffad 	bl	8011bc0 <HAL_RCC_GetSysClockFreq>
 8011c66:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	061b      	lsls	r3, r3, #24
 8011c6c:	0f1b      	lsrs	r3, r3, #28
 8011c6e:	4a04      	ldr	r2, [pc, #16]	; (8011c80 <HAL_RCC_GetHCLKFreq+0x20>)
 8011c70:	5cd3      	ldrb	r3, [r2, r3]
 8011c72:	40d8      	lsrs	r0, r3
 8011c74:	4b03      	ldr	r3, [pc, #12]	; (8011c84 <HAL_RCC_GetHCLKFreq+0x24>)
 8011c76:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011c78:	bd10      	pop	{r4, pc}
 8011c7a:	46c0      	nop			; (mov r8, r8)
 8011c7c:	40021000 	.word	0x40021000
 8011c80:	0801cb4c 	.word	0x0801cb4c
 8011c84:	20000094 	.word	0x20000094

08011c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011c88:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011c8a:	f7ff ffe9 	bl	8011c60 <HAL_RCC_GetHCLKFreq>
 8011c8e:	4b04      	ldr	r3, [pc, #16]	; (8011ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	055b      	lsls	r3, r3, #21
 8011c94:	0f5b      	lsrs	r3, r3, #29
 8011c96:	4a03      	ldr	r2, [pc, #12]	; (8011ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011c98:	5cd3      	ldrb	r3, [r2, r3]
 8011c9a:	40d8      	lsrs	r0, r3
}    
 8011c9c:	bd10      	pop	{r4, pc}
 8011c9e:	46c0      	nop			; (mov r8, r8)
 8011ca0:	40021000 	.word	0x40021000
 8011ca4:	0801cb4c 	.word	0x0801cb4c

08011ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011caa:	46c6      	mov	lr, r8
 8011cac:	b500      	push	{lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011cb2:	6803      	ldr	r3, [r0, #0]
 8011cb4:	03db      	lsls	r3, r3, #15
 8011cb6:	d507      	bpl.n	8011cc8 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011cb8:	4b43      	ldr	r3, [pc, #268]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011cba:	6a1b      	ldr	r3, [r3, #32]
 8011cbc:	6842      	ldr	r2, [r0, #4]
 8011cbe:	4053      	eors	r3, r2
 8011cc0:	22c0      	movs	r2, #192	; 0xc0
 8011cc2:	0092      	lsls	r2, r2, #2
 8011cc4:	4213      	tst	r3, r2
 8011cc6:	d136      	bne.n	8011d36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	07db      	lsls	r3, r3, #31
 8011ccc:	d506      	bpl.n	8011cdc <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011cce:	4a3e      	ldr	r2, [pc, #248]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011cd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011cd2:	2103      	movs	r1, #3
 8011cd4:	438b      	bics	r3, r1
 8011cd6:	68a1      	ldr	r1, [r4, #8]
 8011cd8:	430b      	orrs	r3, r1
 8011cda:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	079b      	lsls	r3, r3, #30
 8011ce0:	d506      	bpl.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011ce2:	4a39      	ldr	r2, [pc, #228]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011ce4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011ce6:	4939      	ldr	r1, [pc, #228]	; (8011dcc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011ce8:	400b      	ands	r3, r1
 8011cea:	68e1      	ldr	r1, [r4, #12]
 8011cec:	430b      	orrs	r3, r1
 8011cee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011cf0:	6823      	ldr	r3, [r4, #0]
 8011cf2:	035b      	lsls	r3, r3, #13
 8011cf4:	d506      	bpl.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011cf6:	4a34      	ldr	r2, [pc, #208]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011cf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011cfa:	4935      	ldr	r1, [pc, #212]	; (8011dd0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011cfc:	400b      	ands	r3, r1
 8011cfe:	6921      	ldr	r1, [r4, #16]
 8011d00:	430b      	orrs	r3, r1
 8011d02:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	069b      	lsls	r3, r3, #26
 8011d08:	d506      	bpl.n	8011d18 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011d0a:	4a2f      	ldr	r2, [pc, #188]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011d0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011d0e:	2110      	movs	r1, #16
 8011d10:	438b      	bics	r3, r1
 8011d12:	6961      	ldr	r1, [r4, #20]
 8011d14:	430b      	orrs	r3, r1
 8011d16:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011d18:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	055b      	lsls	r3, r3, #21
 8011d1e:	d506      	bpl.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011d20:	4a29      	ldr	r2, [pc, #164]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011d22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011d24:	2140      	movs	r1, #64	; 0x40
 8011d26:	438b      	bics	r3, r1
 8011d28:	69a1      	ldr	r1, [r4, #24]
 8011d2a:	430b      	orrs	r3, r1
 8011d2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011d2e:	b002      	add	sp, #8
 8011d30:	bc80      	pop	{r7}
 8011d32:	46b8      	mov	r8, r7
 8011d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011d36:	4a24      	ldr	r2, [pc, #144]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011d38:	69d1      	ldr	r1, [r2, #28]
 8011d3a:	2080      	movs	r0, #128	; 0x80
 8011d3c:	0540      	lsls	r0, r0, #21
 8011d3e:	4301      	orrs	r1, r0
 8011d40:	61d1      	str	r1, [r2, #28]
 8011d42:	69d3      	ldr	r3, [r2, #28]
 8011d44:	4003      	ands	r3, r0
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011d4a:	4a22      	ldr	r2, [pc, #136]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011d4c:	6811      	ldr	r1, [r2, #0]
 8011d4e:	2380      	movs	r3, #128	; 0x80
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	430b      	orrs	r3, r1
 8011d54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011d56:	f7fd feff 	bl	800fb58 <HAL_GetTick>
 8011d5a:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011d5c:	4f1d      	ldr	r7, [pc, #116]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011d5e:	2680      	movs	r6, #128	; 0x80
 8011d60:	0076      	lsls	r6, r6, #1
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	4233      	tst	r3, r6
 8011d66:	d106      	bne.n	8011d76 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011d68:	f7fd fef6 	bl	800fb58 <HAL_GetTick>
 8011d6c:	1b40      	subs	r0, r0, r5
 8011d6e:	2864      	cmp	r0, #100	; 0x64
 8011d70:	d9f7      	bls.n	8011d62 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011d72:	2003      	movs	r0, #3
 8011d74:	e7db      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011d76:	4b14      	ldr	r3, [pc, #80]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011d78:	6a18      	ldr	r0, [r3, #32]
 8011d7a:	4a17      	ldr	r2, [pc, #92]	; (8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011d7c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011d7e:	6a1d      	ldr	r5, [r3, #32]
 8011d80:	2180      	movs	r1, #128	; 0x80
 8011d82:	0249      	lsls	r1, r1, #9
 8011d84:	4329      	orrs	r1, r5
 8011d86:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011d88:	6a19      	ldr	r1, [r3, #32]
 8011d8a:	4d14      	ldr	r5, [pc, #80]	; (8011ddc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011d8c:	4029      	ands	r1, r5
 8011d8e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011d90:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011d92:	0783      	lsls	r3, r0, #30
 8011d94:	d407      	bmi.n	8011da6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011d96:	4a0c      	ldr	r2, [pc, #48]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011d98:	6a13      	ldr	r3, [r2, #32]
 8011d9a:	490f      	ldr	r1, [pc, #60]	; (8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011d9c:	400b      	ands	r3, r1
 8011d9e:	6861      	ldr	r1, [r4, #4]
 8011da0:	430b      	orrs	r3, r1
 8011da2:	6213      	str	r3, [r2, #32]
 8011da4:	e790      	b.n	8011cc8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011da6:	f7fd fed7 	bl	800fb58 <HAL_GetTick>
 8011daa:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011dac:	4f06      	ldr	r7, [pc, #24]	; (8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011dae:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011db0:	4b0b      	ldr	r3, [pc, #44]	; (8011de0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8011db2:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	421e      	tst	r6, r3
 8011db8:	d1ed      	bne.n	8011d96 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011dba:	f7fd fecd 	bl	800fb58 <HAL_GetTick>
 8011dbe:	1b40      	subs	r0, r0, r5
 8011dc0:	4540      	cmp	r0, r8
 8011dc2:	d9f7      	bls.n	8011db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8011dc4:	2003      	movs	r0, #3
 8011dc6:	e7b2      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011dc8:	40021000 	.word	0x40021000
 8011dcc:	fffcffff 	.word	0xfffcffff
 8011dd0:	fff3ffff 	.word	0xfff3ffff
 8011dd4:	40007000 	.word	0x40007000
 8011dd8:	fffffcff 	.word	0xfffffcff
 8011ddc:	fffeffff 	.word	0xfffeffff
 8011de0:	00001388 	.word	0x00001388

08011de4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011de4:	4770      	bx	lr

08011de6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011dea:	6802      	ldr	r2, [r0, #0]
 8011dec:	68d3      	ldr	r3, [r2, #12]
 8011dee:	21a0      	movs	r1, #160	; 0xa0
 8011df0:	438b      	bics	r3, r1
 8011df2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011df4:	f7fd feb0 	bl	800fb58 <HAL_GetTick>
 8011df8:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011dfa:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011dfc:	27fa      	movs	r7, #250	; 0xfa
 8011dfe:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011e00:	6823      	ldr	r3, [r4, #0]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	421e      	tst	r6, r3
 8011e06:	d106      	bne.n	8011e16 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e08:	f7fd fea6 	bl	800fb58 <HAL_GetTick>
 8011e0c:	1b40      	subs	r0, r0, r5
 8011e0e:	42b8      	cmp	r0, r7
 8011e10:	d9f6      	bls.n	8011e00 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8011e12:	2003      	movs	r0, #3
 8011e14:	e000      	b.n	8011e18 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8011e16:	2000      	movs	r0, #0
}
 8011e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e1a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8011e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e1c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e1e:	6803      	ldr	r3, [r0, #0]
 8011e20:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8011e22:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e24:	0652      	lsls	r2, r2, #25
 8011e26:	d500      	bpl.n	8011e2a <RTC_EnterInitMode+0x10>
}
 8011e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	4252      	negs	r2, r2
 8011e2e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011e30:	f7fd fe92 	bl	800fb58 <HAL_GetTick>
 8011e34:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e36:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e38:	27fa      	movs	r7, #250	; 0xfa
 8011e3a:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e3c:	6823      	ldr	r3, [r4, #0]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	421e      	tst	r6, r3
 8011e42:	d106      	bne.n	8011e52 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e44:	f7fd fe88 	bl	800fb58 <HAL_GetTick>
 8011e48:	1b40      	subs	r0, r0, r5
 8011e4a:	42b8      	cmp	r0, r7
 8011e4c:	d9f6      	bls.n	8011e3c <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011e4e:	2003      	movs	r0, #3
 8011e50:	e7ea      	b.n	8011e28 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011e52:	2000      	movs	r0, #0
 8011e54:	e7e8      	b.n	8011e28 <RTC_EnterInitMode+0xe>
	...

08011e58 <HAL_RTC_Init>:
{
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011e5c:	d046      	beq.n	8011eec <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011e5e:	7f43      	ldrb	r3, [r0, #29]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d013      	beq.n	8011e8c <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011e64:	2302      	movs	r3, #2
 8011e66:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	22ca      	movs	r2, #202	; 0xca
 8011e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	3a77      	subs	r2, #119	; 0x77
 8011e72:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011e74:	0020      	movs	r0, r4
 8011e76:	f7ff ffd0 	bl	8011e1a <RTC_EnterInitMode>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d00a      	beq.n	8011e94 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	22ff      	movs	r2, #255	; 0xff
 8011e82:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011e84:	2304      	movs	r3, #4
 8011e86:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011e88:	2001      	movs	r0, #1
}
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011e8c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011e8e:	f7ff ffa9 	bl	8011de4 <HAL_RTC_MspInit>
 8011e92:	e7e7      	b.n	8011e64 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011e94:	6822      	ldr	r2, [r4, #0]
 8011e96:	6893      	ldr	r3, [r2, #8]
 8011e98:	4915      	ldr	r1, [pc, #84]	; (8011ef0 <HAL_RTC_Init+0x98>)
 8011e9a:	400b      	ands	r3, r1
 8011e9c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011e9e:	6822      	ldr	r2, [r4, #0]
 8011ea0:	6891      	ldr	r1, [r2, #8]
 8011ea2:	6863      	ldr	r3, [r4, #4]
 8011ea4:	6925      	ldr	r5, [r4, #16]
 8011ea6:	432b      	orrs	r3, r5
 8011ea8:	6965      	ldr	r5, [r4, #20]
 8011eaa:	432b      	orrs	r3, r5
 8011eac:	430b      	orrs	r3, r1
 8011eae:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011eb0:	6823      	ldr	r3, [r4, #0]
 8011eb2:	68e2      	ldr	r2, [r4, #12]
 8011eb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011eb6:	6822      	ldr	r2, [r4, #0]
 8011eb8:	6911      	ldr	r1, [r2, #16]
 8011eba:	68a3      	ldr	r3, [r4, #8]
 8011ebc:	041b      	lsls	r3, r3, #16
 8011ebe:	430b      	orrs	r3, r1
 8011ec0:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011ec2:	6822      	ldr	r2, [r4, #0]
 8011ec4:	68d3      	ldr	r3, [r2, #12]
 8011ec6:	2180      	movs	r1, #128	; 0x80
 8011ec8:	438b      	bics	r3, r1
 8011eca:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011ecc:	6822      	ldr	r2, [r4, #0]
 8011ece:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011ed0:	4908      	ldr	r1, [pc, #32]	; (8011ef4 <HAL_RTC_Init+0x9c>)
 8011ed2:	400b      	ands	r3, r1
 8011ed4:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011ed6:	6822      	ldr	r2, [r4, #0]
 8011ed8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011eda:	69a1      	ldr	r1, [r4, #24]
 8011edc:	430b      	orrs	r3, r1
 8011ede:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ee0:	6823      	ldr	r3, [r4, #0]
 8011ee2:	22ff      	movs	r2, #255	; 0xff
 8011ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8011eea:	e7ce      	b.n	8011e8a <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8011eec:	2001      	movs	r0, #1
 8011eee:	e7cc      	b.n	8011e8a <HAL_RTC_Init+0x32>
 8011ef0:	ff8fffbf 	.word	0xff8fffbf
 8011ef4:	fffbffff 	.word	0xfffbffff

08011ef8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011ef8:	2809      	cmp	r0, #9
 8011efa:	d909      	bls.n	8011f10 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8011efc:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8011efe:	3301      	adds	r3, #1
    Value -= 10;
 8011f00:	380a      	subs	r0, #10
 8011f02:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8011f04:	2809      	cmp	r0, #9
 8011f06:	d8fa      	bhi.n	8011efe <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011f08:	011b      	lsls	r3, r3, #4
 8011f0a:	4318      	orrs	r0, r3
 8011f0c:	b2c0      	uxtb	r0, r0
}
 8011f0e:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8011f10:	2300      	movs	r3, #0
 8011f12:	e7f9      	b.n	8011f08 <RTC_ByteToBcd2+0x10>

08011f14 <HAL_RTC_SetTime>:
{
 8011f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f16:	0004      	movs	r4, r0
 8011f18:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011f1a:	7f03      	ldrb	r3, [r0, #28]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d100      	bne.n	8011f22 <HAL_RTC_SetTime+0xe>
 8011f20:	e072      	b.n	8012008 <HAL_RTC_SetTime+0xf4>
 8011f22:	2301      	movs	r3, #1
 8011f24:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f26:	3301      	adds	r3, #1
 8011f28:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011f2a:	2a00      	cmp	r2, #0
 8011f2c:	d144      	bne.n	8011fb8 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011f2e:	6803      	ldr	r3, [r0, #0]
 8011f30:	689b      	ldr	r3, [r3, #8]
 8011f32:	065b      	lsls	r3, r3, #25
 8011f34:	d401      	bmi.n	8011f3a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8011f36:	2300      	movs	r3, #0
 8011f38:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011f3a:	7830      	ldrb	r0, [r6, #0]
 8011f3c:	f7ff ffdc 	bl	8011ef8 <RTC_ByteToBcd2>
 8011f40:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011f42:	7870      	ldrb	r0, [r6, #1]
 8011f44:	f7ff ffd8 	bl	8011ef8 <RTC_ByteToBcd2>
 8011f48:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011f4a:	78b0      	ldrb	r0, [r6, #2]
 8011f4c:	f7ff ffd4 	bl	8011ef8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011f50:	7a33      	ldrb	r3, [r6, #8]
 8011f52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011f54:	4303      	orrs	r3, r0
 8011f56:	042d      	lsls	r5, r5, #16
 8011f58:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011f5a:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011f5c:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	22ca      	movs	r2, #202	; 0xca
 8011f62:	625a      	str	r2, [r3, #36]	; 0x24
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	3a77      	subs	r2, #119	; 0x77
 8011f68:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011f6a:	0020      	movs	r0, r4
 8011f6c:	f7ff ff55 	bl	8011e1a <RTC_EnterInitMode>
 8011f70:	1e07      	subs	r7, r0, #0
 8011f72:	d132      	bne.n	8011fda <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	4825      	ldr	r0, [pc, #148]	; (801200c <HAL_RTC_SetTime+0xf8>)
 8011f78:	4005      	ands	r5, r0
 8011f7a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011f7c:	6822      	ldr	r2, [r4, #0]
 8011f7e:	6893      	ldr	r3, [r2, #8]
 8011f80:	4923      	ldr	r1, [pc, #140]	; (8012010 <HAL_RTC_SetTime+0xfc>)
 8011f82:	400b      	ands	r3, r1
 8011f84:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011f86:	6822      	ldr	r2, [r4, #0]
 8011f88:	6891      	ldr	r1, [r2, #8]
 8011f8a:	68f3      	ldr	r3, [r6, #12]
 8011f8c:	6930      	ldr	r0, [r6, #16]
 8011f8e:	4303      	orrs	r3, r0
 8011f90:	430b      	orrs	r3, r1
 8011f92:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011f94:	6822      	ldr	r2, [r4, #0]
 8011f96:	68d3      	ldr	r3, [r2, #12]
 8011f98:	2180      	movs	r1, #128	; 0x80
 8011f9a:	438b      	bics	r3, r1
 8011f9c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	689b      	ldr	r3, [r3, #8]
 8011fa2:	069b      	lsls	r3, r3, #26
 8011fa4:	d522      	bpl.n	8011fec <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	22ff      	movs	r2, #255	; 0xff
 8011faa:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011fac:	2301      	movs	r3, #1
 8011fae:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	7723      	strb	r3, [r4, #28]
}
 8011fb4:	0038      	movs	r0, r7
 8011fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011fb8:	6803      	ldr	r3, [r0, #0]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	065b      	lsls	r3, r3, #25
 8011fbe:	d401      	bmi.n	8011fc4 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011fc4:	7835      	ldrb	r5, [r6, #0]
 8011fc6:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011fc8:	7870      	ldrb	r0, [r6, #1]
 8011fca:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011fcc:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011fce:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011fd0:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011fd2:	7a30      	ldrb	r0, [r6, #8]
 8011fd4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011fd6:	4305      	orrs	r5, r0
 8011fd8:	e7c1      	b.n	8011f5e <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011fda:	6823      	ldr	r3, [r4, #0]
 8011fdc:	22ff      	movs	r2, #255	; 0xff
 8011fde:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011fe0:	2304      	movs	r3, #4
 8011fe2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011fe8:	2701      	movs	r7, #1
 8011fea:	e7e3      	b.n	8011fb4 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fec:	0020      	movs	r0, r4
 8011fee:	f7ff fefa 	bl	8011de6 <HAL_RTC_WaitForSynchro>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d0d7      	beq.n	8011fa6 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	22ff      	movs	r2, #255	; 0xff
 8011ffa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011ffc:	2304      	movs	r3, #4
 8011ffe:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012000:	2300      	movs	r3, #0
 8012002:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012004:	2701      	movs	r7, #1
 8012006:	e7d5      	b.n	8011fb4 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8012008:	2702      	movs	r7, #2
 801200a:	e7d3      	b.n	8011fb4 <HAL_RTC_SetTime+0xa0>
 801200c:	007f7f7f 	.word	0x007f7f7f
 8012010:	fffbffff 	.word	0xfffbffff

08012014 <HAL_RTC_SetDate>:
{
 8012014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012016:	46c6      	mov	lr, r8
 8012018:	b500      	push	{lr}
 801201a:	0004      	movs	r4, r0
 801201c:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801201e:	7f03      	ldrb	r3, [r0, #28]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d037      	beq.n	8012094 <HAL_RTC_SetDate+0x80>
 8012024:	2301      	movs	r3, #1
 8012026:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012028:	3301      	adds	r3, #1
 801202a:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 801202c:	2a00      	cmp	r2, #0
 801202e:	d133      	bne.n	8012098 <HAL_RTC_SetDate+0x84>
 8012030:	784b      	ldrb	r3, [r1, #1]
 8012032:	06da      	lsls	r2, r3, #27
 8012034:	d503      	bpl.n	801203e <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012036:	2210      	movs	r2, #16
 8012038:	4393      	bics	r3, r2
 801203a:	330a      	adds	r3, #10
 801203c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801203e:	78f0      	ldrb	r0, [r6, #3]
 8012040:	f7ff ff5a 	bl	8011ef8 <RTC_ByteToBcd2>
 8012044:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012046:	7870      	ldrb	r0, [r6, #1]
 8012048:	f7ff ff56 	bl	8011ef8 <RTC_ByteToBcd2>
 801204c:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801204e:	78b0      	ldrb	r0, [r6, #2]
 8012050:	f7ff ff52 	bl	8011ef8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012054:	7833      	ldrb	r3, [r6, #0]
 8012056:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012058:	4303      	orrs	r3, r0
 801205a:	042d      	lsls	r5, r5, #16
 801205c:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801205e:	4643      	mov	r3, r8
 8012060:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012062:	4305      	orrs	r5, r0
 8012064:	e022      	b.n	80120ac <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012066:	6823      	ldr	r3, [r4, #0]
 8012068:	22ff      	movs	r2, #255	; 0xff
 801206a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801206c:	2304      	movs	r3, #4
 801206e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012070:	2300      	movs	r3, #0
 8012072:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012074:	2601      	movs	r6, #1
 8012076:	e038      	b.n	80120ea <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012078:	0020      	movs	r0, r4
 801207a:	f7ff feb4 	bl	8011de6 <HAL_RTC_WaitForSynchro>
 801207e:	2800      	cmp	r0, #0
 8012080:	d02c      	beq.n	80120dc <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	22ff      	movs	r2, #255	; 0xff
 8012086:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012088:	2304      	movs	r3, #4
 801208a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801208c:	2300      	movs	r3, #0
 801208e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012090:	2601      	movs	r6, #1
 8012092:	e02a      	b.n	80120ea <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8012094:	2602      	movs	r6, #2
 8012096:	e028      	b.n	80120ea <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012098:	78cd      	ldrb	r5, [r1, #3]
 801209a:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801209c:	7848      	ldrb	r0, [r1, #1]
 801209e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80120a0:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 80120a2:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80120a4:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 80120a6:	7808      	ldrb	r0, [r1, #0]
 80120a8:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80120aa:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80120ac:	6823      	ldr	r3, [r4, #0]
 80120ae:	22ca      	movs	r2, #202	; 0xca
 80120b0:	625a      	str	r2, [r3, #36]	; 0x24
 80120b2:	6823      	ldr	r3, [r4, #0]
 80120b4:	3a77      	subs	r2, #119	; 0x77
 80120b6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80120b8:	0020      	movs	r0, r4
 80120ba:	f7ff feae 	bl	8011e1a <RTC_EnterInitMode>
 80120be:	1e06      	subs	r6, r0, #0
 80120c0:	d1d1      	bne.n	8012066 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80120c2:	6823      	ldr	r3, [r4, #0]
 80120c4:	480b      	ldr	r0, [pc, #44]	; (80120f4 <HAL_RTC_SetDate+0xe0>)
 80120c6:	4005      	ands	r5, r0
 80120c8:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80120ca:	6822      	ldr	r2, [r4, #0]
 80120cc:	68d3      	ldr	r3, [r2, #12]
 80120ce:	2180      	movs	r1, #128	; 0x80
 80120d0:	438b      	bics	r3, r1
 80120d2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	069b      	lsls	r3, r3, #26
 80120da:	d5cd      	bpl.n	8012078 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	22ff      	movs	r2, #255	; 0xff
 80120e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80120e2:	2301      	movs	r3, #1
 80120e4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80120e6:	2300      	movs	r3, #0
 80120e8:	7723      	strb	r3, [r4, #28]
}
 80120ea:	0030      	movs	r0, r6
 80120ec:	bc80      	pop	{r7}
 80120ee:	46b8      	mov	r8, r7
 80120f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f2:	46c0      	nop			; (mov r8, r8)
 80120f4:	00ffff3f 	.word	0x00ffff3f

080120f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80120f8:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80120fa:	0902      	lsrs	r2, r0, #4
 80120fc:	0090      	lsls	r0, r2, #2
 80120fe:	1880      	adds	r0, r0, r2
 8012100:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012102:	220f      	movs	r2, #15
 8012104:	4013      	ands	r3, r2
 8012106:	18c0      	adds	r0, r0, r3
 8012108:	b2c0      	uxtb	r0, r0
}
 801210a:	4770      	bx	lr

0801210c <HAL_RTC_GetTime>:
{
 801210c:	b570      	push	{r4, r5, r6, lr}
 801210e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012110:	6803      	ldr	r3, [r0, #0]
 8012112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012114:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012116:	6803      	ldr	r3, [r0, #0]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	490e      	ldr	r1, [pc, #56]	; (8012154 <HAL_RTC_GetTime+0x48>)
 801211c:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801211e:	0c19      	lsrs	r1, r3, #16
 8012120:	203f      	movs	r0, #63	; 0x3f
 8012122:	4008      	ands	r0, r1
 8012124:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012126:	0a1e      	lsrs	r6, r3, #8
 8012128:	b2f6      	uxtb	r6, r6
 801212a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801212c:	b2dd      	uxtb	r5, r3
 801212e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012130:	2340      	movs	r3, #64	; 0x40
 8012132:	400b      	ands	r3, r1
 8012134:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012136:	2a00      	cmp	r2, #0
 8012138:	d10a      	bne.n	8012150 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801213a:	f7ff ffdd 	bl	80120f8 <RTC_Bcd2ToByte>
 801213e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012140:	0030      	movs	r0, r6
 8012142:	f7ff ffd9 	bl	80120f8 <RTC_Bcd2ToByte>
 8012146:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012148:	0028      	movs	r0, r5
 801214a:	f7ff ffd5 	bl	80120f8 <RTC_Bcd2ToByte>
 801214e:	70a0      	strb	r0, [r4, #2]
}
 8012150:	2000      	movs	r0, #0
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	007f7f7f 	.word	0x007f7f7f

08012158 <HAL_RTC_GetDate>:
{
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 801215c:	6803      	ldr	r3, [r0, #0]
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	490d      	ldr	r1, [pc, #52]	; (8012198 <HAL_RTC_GetDate+0x40>)
 8012162:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012164:	0c18      	lsrs	r0, r3, #16
 8012166:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012168:	04dd      	lsls	r5, r3, #19
 801216a:	0eed      	lsrs	r5, r5, #27
 801216c:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801216e:	b2de      	uxtb	r6, r3
 8012170:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012172:	041b      	lsls	r3, r3, #16
 8012174:	0f5b      	lsrs	r3, r3, #29
 8012176:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012178:	2a00      	cmp	r2, #0
 801217a:	d10a      	bne.n	8012192 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801217c:	f7ff ffbc 	bl	80120f8 <RTC_Bcd2ToByte>
 8012180:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012182:	0028      	movs	r0, r5
 8012184:	f7ff ffb8 	bl	80120f8 <RTC_Bcd2ToByte>
 8012188:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801218a:	0030      	movs	r0, r6
 801218c:	f7ff ffb4 	bl	80120f8 <RTC_Bcd2ToByte>
 8012190:	70a0      	strb	r0, [r4, #2]
}
 8012192:	2000      	movs	r0, #0
 8012194:	bd70      	pop	{r4, r5, r6, pc}
 8012196:	46c0      	nop			; (mov r8, r8)
 8012198:	00ffff3f 	.word	0x00ffff3f

0801219c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801219c:	6803      	ldr	r3, [r0, #0]
 801219e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80121a0:	0089      	lsls	r1, r1, #2
 80121a2:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80121a4:	600a      	str	r2, [r1, #0]
}
 80121a6:	4770      	bx	lr

080121a8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80121a8:	6803      	ldr	r3, [r0, #0]
 80121aa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80121ac:	0089      	lsls	r1, r1, #2
 80121ae:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80121b0:	6808      	ldr	r0, [r1, #0]
}
 80121b2:	4770      	bx	lr

080121b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80121b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80121b6:	6a03      	ldr	r3, [r0, #32]
 80121b8:	2201      	movs	r2, #1
 80121ba:	4393      	bics	r3, r2
 80121bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80121be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80121c0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80121c2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80121c4:	2573      	movs	r5, #115	; 0x73
 80121c6:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80121c8:	680d      	ldr	r5, [r1, #0]
 80121ca:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80121cc:	2502      	movs	r5, #2
 80121ce:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80121d0:	688d      	ldr	r5, [r1, #8]
 80121d2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80121d4:	4d19      	ldr	r5, [pc, #100]	; (801223c <TIM_OC1_SetConfig+0x88>)
 80121d6:	42a8      	cmp	r0, r5
 80121d8:	d016      	beq.n	8012208 <TIM_OC1_SetConfig+0x54>
 80121da:	4d19      	ldr	r5, [pc, #100]	; (8012240 <TIM_OC1_SetConfig+0x8c>)
 80121dc:	42a8      	cmp	r0, r5
 80121de:	d025      	beq.n	801222c <TIM_OC1_SetConfig+0x78>
 80121e0:	4d18      	ldr	r5, [pc, #96]	; (8012244 <TIM_OC1_SetConfig+0x90>)
 80121e2:	42a8      	cmp	r0, r5
 80121e4:	d009      	beq.n	80121fa <TIM_OC1_SetConfig+0x46>
 80121e6:	4d18      	ldr	r5, [pc, #96]	; (8012248 <TIM_OC1_SetConfig+0x94>)
 80121e8:	42a8      	cmp	r0, r5
 80121ea:	d119      	bne.n	8012220 <TIM_OC1_SetConfig+0x6c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80121ec:	2508      	movs	r5, #8
 80121ee:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80121f0:	68cd      	ldr	r5, [r1, #12]
 80121f2:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80121f4:	2504      	movs	r5, #4
 80121f6:	43ab      	bics	r3, r5
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80121f8:	e00c      	b.n	8012214 <TIM_OC1_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC1NP;
 80121fa:	2508      	movs	r5, #8
 80121fc:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80121fe:	68cd      	ldr	r5, [r1, #12]
 8012200:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8012202:	2504      	movs	r5, #4
 8012204:	43ab      	bics	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012206:	e005      	b.n	8012214 <TIM_OC1_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC1NP;
 8012208:	2508      	movs	r5, #8
 801220a:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 801220c:	68cd      	ldr	r5, [r1, #12]
 801220e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8012210:	2504      	movs	r5, #4
 8012212:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012214:	4d0d      	ldr	r5, [pc, #52]	; (801224c <TIM_OC1_SetConfig+0x98>)
 8012216:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012218:	694d      	ldr	r5, [r1, #20]
 801221a:	698e      	ldr	r6, [r1, #24]
 801221c:	4335      	orrs	r5, r6
 801221e:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012220:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012222:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012224:	684a      	ldr	r2, [r1, #4]
 8012226:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012228:	6203      	str	r3, [r0, #32]
}
 801222a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 801222c:	2508      	movs	r5, #8
 801222e:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8012230:	68cd      	ldr	r5, [r1, #12]
 8012232:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8012234:	2504      	movs	r5, #4
 8012236:	43ab      	bics	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012238:	e7ec      	b.n	8012214 <TIM_OC1_SetConfig+0x60>
 801223a:	46c0      	nop			; (mov r8, r8)
 801223c:	40012c00 	.word	0x40012c00
 8012240:	40014000 	.word	0x40014000
 8012244:	40014400 	.word	0x40014400
 8012248:	40014800 	.word	0x40014800
 801224c:	fffffcff 	.word	0xfffffcff

08012250 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012250:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012252:	6a03      	ldr	r3, [r0, #32]
 8012254:	4a17      	ldr	r2, [pc, #92]	; (80122b4 <TIM_OC3_SetConfig+0x64>)
 8012256:	4013      	ands	r3, r2
 8012258:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801225a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801225c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801225e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012260:	2473      	movs	r4, #115	; 0x73
 8012262:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012264:	680c      	ldr	r4, [r1, #0]
 8012266:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012268:	4c13      	ldr	r4, [pc, #76]	; (80122b8 <TIM_OC3_SetConfig+0x68>)
 801226a:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 801226c:	688c      	ldr	r4, [r1, #8]
 801226e:	0224      	lsls	r4, r4, #8
 8012270:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012272:	4c12      	ldr	r4, [pc, #72]	; (80122bc <TIM_OC3_SetConfig+0x6c>)
 8012274:	42a0      	cmp	r0, r4
 8012276:	d009      	beq.n	801228c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8012278:	4c11      	ldr	r4, [pc, #68]	; (80122c0 <TIM_OC3_SetConfig+0x70>)
 801227a:	42a0      	cmp	r0, r4
 801227c:	d00d      	beq.n	801229a <TIM_OC3_SetConfig+0x4a>
 801227e:	4c11      	ldr	r4, [pc, #68]	; (80122c4 <TIM_OC3_SetConfig+0x74>)
 8012280:	42a0      	cmp	r0, r4
 8012282:	d00a      	beq.n	801229a <TIM_OC3_SetConfig+0x4a>
 8012284:	4c10      	ldr	r4, [pc, #64]	; (80122c8 <TIM_OC3_SetConfig+0x78>)
 8012286:	42a0      	cmp	r0, r4
 8012288:	d10e      	bne.n	80122a8 <TIM_OC3_SetConfig+0x58>
 801228a:	e006      	b.n	801229a <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 801228c:	4c0f      	ldr	r4, [pc, #60]	; (80122cc <TIM_OC3_SetConfig+0x7c>)
 801228e:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8012290:	68cb      	ldr	r3, [r1, #12]
 8012292:	021b      	lsls	r3, r3, #8
 8012294:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8012296:	4c0e      	ldr	r4, [pc, #56]	; (80122d0 <TIM_OC3_SetConfig+0x80>)
 8012298:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801229a:	4c0e      	ldr	r4, [pc, #56]	; (80122d4 <TIM_OC3_SetConfig+0x84>)
 801229c:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 801229e:	698a      	ldr	r2, [r1, #24]
 80122a0:	694e      	ldr	r6, [r1, #20]
 80122a2:	4332      	orrs	r2, r6
 80122a4:	0112      	lsls	r2, r2, #4
 80122a6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80122a8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80122aa:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80122ac:	684a      	ldr	r2, [r1, #4]
 80122ae:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80122b0:	6203      	str	r3, [r0, #32]
}
 80122b2:	bd70      	pop	{r4, r5, r6, pc}
 80122b4:	fffffeff 	.word	0xfffffeff
 80122b8:	fffffdff 	.word	0xfffffdff
 80122bc:	40012c00 	.word	0x40012c00
 80122c0:	40014000 	.word	0x40014000
 80122c4:	40014400 	.word	0x40014400
 80122c8:	40014800 	.word	0x40014800
 80122cc:	fffff7ff 	.word	0xfffff7ff
 80122d0:	fffffbff 	.word	0xfffffbff
 80122d4:	ffffcfff 	.word	0xffffcfff

080122d8 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80122d8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80122da:	6a03      	ldr	r3, [r0, #32]
 80122dc:	4a13      	ldr	r2, [pc, #76]	; (801232c <TIM_OC4_SetConfig+0x54>)
 80122de:	4013      	ands	r3, r2
 80122e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80122e2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80122e4:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80122e6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80122e8:	4d11      	ldr	r5, [pc, #68]	; (8012330 <TIM_OC4_SetConfig+0x58>)
 80122ea:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80122ec:	680d      	ldr	r5, [r1, #0]
 80122ee:	022d      	lsls	r5, r5, #8
 80122f0:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80122f2:	4d10      	ldr	r5, [pc, #64]	; (8012334 <TIM_OC4_SetConfig+0x5c>)
 80122f4:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80122f6:	688a      	ldr	r2, [r1, #8]
 80122f8:	0312      	lsls	r2, r2, #12
 80122fa:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80122fc:	4d0e      	ldr	r5, [pc, #56]	; (8012338 <TIM_OC4_SetConfig+0x60>)
 80122fe:	42a8      	cmp	r0, r5
 8012300:	d008      	beq.n	8012314 <TIM_OC4_SetConfig+0x3c>
 8012302:	4d0e      	ldr	r5, [pc, #56]	; (801233c <TIM_OC4_SetConfig+0x64>)
 8012304:	42a8      	cmp	r0, r5
 8012306:	d005      	beq.n	8012314 <TIM_OC4_SetConfig+0x3c>
 8012308:	4d0d      	ldr	r5, [pc, #52]	; (8012340 <TIM_OC4_SetConfig+0x68>)
 801230a:	42a8      	cmp	r0, r5
 801230c:	d002      	beq.n	8012314 <TIM_OC4_SetConfig+0x3c>
 801230e:	4d0d      	ldr	r5, [pc, #52]	; (8012344 <TIM_OC4_SetConfig+0x6c>)
 8012310:	42a8      	cmp	r0, r5
 8012312:	d104      	bne.n	801231e <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012314:	4d0c      	ldr	r5, [pc, #48]	; (8012348 <TIM_OC4_SetConfig+0x70>)
 8012316:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8012318:	694d      	ldr	r5, [r1, #20]
 801231a:	01ad      	lsls	r5, r5, #6
 801231c:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801231e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012320:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012322:	684b      	ldr	r3, [r1, #4]
 8012324:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012326:	6202      	str	r2, [r0, #32]
}
 8012328:	bd30      	pop	{r4, r5, pc}
 801232a:	46c0      	nop			; (mov r8, r8)
 801232c:	ffffefff 	.word	0xffffefff
 8012330:	ffff8cff 	.word	0xffff8cff
 8012334:	ffffdfff 	.word	0xffffdfff
 8012338:	40012c00 	.word	0x40012c00
 801233c:	40014000 	.word	0x40014000
 8012340:	40014400 	.word	0x40014400
 8012344:	40014800 	.word	0x40014800
 8012348:	ffffbfff 	.word	0xffffbfff

0801234c <HAL_TIM_Base_MspInit>:
}
 801234c:	4770      	bx	lr

0801234e <HAL_TIM_Base_MspDeInit>:
}
 801234e:	4770      	bx	lr

08012350 <HAL_TIM_Base_DeInit>:
{
 8012350:	b510      	push	{r4, lr}
 8012352:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8012354:	2339      	movs	r3, #57	; 0x39
 8012356:	2202      	movs	r2, #2
 8012358:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 801235a:	6803      	ldr	r3, [r0, #0]
 801235c:	6a19      	ldr	r1, [r3, #32]
 801235e:	4a0a      	ldr	r2, [pc, #40]	; (8012388 <HAL_TIM_Base_DeInit+0x38>)
 8012360:	4211      	tst	r1, r2
 8012362:	d107      	bne.n	8012374 <HAL_TIM_Base_DeInit+0x24>
 8012364:	6a19      	ldr	r1, [r3, #32]
 8012366:	4a09      	ldr	r2, [pc, #36]	; (801238c <HAL_TIM_Base_DeInit+0x3c>)
 8012368:	4211      	tst	r1, r2
 801236a:	d103      	bne.n	8012374 <HAL_TIM_Base_DeInit+0x24>
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	2101      	movs	r1, #1
 8012370:	438a      	bics	r2, r1
 8012372:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8012374:	0020      	movs	r0, r4
 8012376:	f7ff ffea 	bl	801234e <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 801237a:	2300      	movs	r3, #0
 801237c:	2239      	movs	r2, #57	; 0x39
 801237e:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8012380:	3a01      	subs	r2, #1
 8012382:	54a3      	strb	r3, [r4, r2]
}
 8012384:	2000      	movs	r0, #0
 8012386:	bd10      	pop	{r4, pc}
 8012388:	00001111 	.word	0x00001111
 801238c:	00000444 	.word	0x00000444

08012390 <HAL_TIM_Base_Start>:
{
 8012390:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 8012392:	2239      	movs	r2, #57	; 0x39
 8012394:	2302      	movs	r3, #2
 8012396:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8012398:	6804      	ldr	r4, [r0, #0]
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	2101      	movs	r1, #1
 801239e:	430b      	orrs	r3, r1
 80123a0:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 80123a2:	5481      	strb	r1, [r0, r2]
}
 80123a4:	2000      	movs	r0, #0
 80123a6:	bd10      	pop	{r4, pc}

080123a8 <HAL_TIM_PWM_MspInit>:
}
 80123a8:	4770      	bx	lr

080123aa <HAL_TIM_PWM_MspDeInit>:
}
 80123aa:	4770      	bx	lr

080123ac <HAL_TIM_PWM_DeInit>:
{
 80123ac:	b510      	push	{r4, lr}
 80123ae:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80123b0:	2339      	movs	r3, #57	; 0x39
 80123b2:	2202      	movs	r2, #2
 80123b4:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80123b6:	6803      	ldr	r3, [r0, #0]
 80123b8:	6a19      	ldr	r1, [r3, #32]
 80123ba:	4a0a      	ldr	r2, [pc, #40]	; (80123e4 <HAL_TIM_PWM_DeInit+0x38>)
 80123bc:	4211      	tst	r1, r2
 80123be:	d107      	bne.n	80123d0 <HAL_TIM_PWM_DeInit+0x24>
 80123c0:	6a19      	ldr	r1, [r3, #32]
 80123c2:	4a09      	ldr	r2, [pc, #36]	; (80123e8 <HAL_TIM_PWM_DeInit+0x3c>)
 80123c4:	4211      	tst	r1, r2
 80123c6:	d103      	bne.n	80123d0 <HAL_TIM_PWM_DeInit+0x24>
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	2101      	movs	r1, #1
 80123cc:	438a      	bics	r2, r1
 80123ce:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80123d0:	0020      	movs	r0, r4
 80123d2:	f7ff ffea 	bl	80123aa <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80123d6:	2300      	movs	r3, #0
 80123d8:	2239      	movs	r2, #57	; 0x39
 80123da:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 80123dc:	3a01      	subs	r2, #1
 80123de:	54a3      	strb	r3, [r4, r2]
}
 80123e0:	2000      	movs	r0, #0
 80123e2:	bd10      	pop	{r4, pc}
 80123e4:	00001111 	.word	0x00001111
 80123e8:	00000444 	.word	0x00000444

080123ec <HAL_TIM_ConfigClockSource>:
{
 80123ec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80123ee:	2338      	movs	r3, #56	; 0x38
 80123f0:	5cc3      	ldrb	r3, [r0, r3]
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d100      	bne.n	80123f8 <HAL_TIM_ConfigClockSource+0xc>
 80123f6:	e0cb      	b.n	8012590 <HAL_TIM_ConfigClockSource+0x1a4>
 80123f8:	2338      	movs	r3, #56	; 0x38
 80123fa:	2201      	movs	r2, #1
 80123fc:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80123fe:	3301      	adds	r3, #1
 8012400:	3201      	adds	r2, #1
 8012402:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8012404:	6802      	ldr	r2, [r0, #0]
 8012406:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012408:	4c62      	ldr	r4, [pc, #392]	; (8012594 <HAL_TIM_ConfigClockSource+0x1a8>)
 801240a:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 801240c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 801240e:	680b      	ldr	r3, [r1, #0]
 8012410:	2b50      	cmp	r3, #80	; 0x50
 8012412:	d100      	bne.n	8012416 <HAL_TIM_ConfigClockSource+0x2a>
 8012414:	e06f      	b.n	80124f6 <HAL_TIM_ConfigClockSource+0x10a>
 8012416:	d82f      	bhi.n	8012478 <HAL_TIM_ConfigClockSource+0x8c>
 8012418:	2b20      	cmp	r3, #32
 801241a:	d100      	bne.n	801241e <HAL_TIM_ConfigClockSource+0x32>
 801241c:	e0a8      	b.n	8012570 <HAL_TIM_ConfigClockSource+0x184>
 801241e:	d91e      	bls.n	801245e <HAL_TIM_ConfigClockSource+0x72>
 8012420:	2b30      	cmp	r3, #48	; 0x30
 8012422:	d100      	bne.n	8012426 <HAL_TIM_ConfigClockSource+0x3a>
 8012424:	e0ac      	b.n	8012580 <HAL_TIM_ConfigClockSource+0x194>
 8012426:	2b40      	cmp	r3, #64	; 0x40
 8012428:	d15d      	bne.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801242a:	6803      	ldr	r3, [r0, #0]
 801242c:	684c      	ldr	r4, [r1, #4]
 801242e:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012430:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012432:	6a1d      	ldr	r5, [r3, #32]
 8012434:	2601      	movs	r6, #1
 8012436:	43b5      	bics	r5, r6
 8012438:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801243a:	699d      	ldr	r5, [r3, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801243c:	36ef      	adds	r6, #239	; 0xef
 801243e:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 8012440:	0112      	lsls	r2, r2, #4
 8012442:	432a      	orrs	r2, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012444:	250a      	movs	r5, #10
 8012446:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8012448:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801244a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801244c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801244e:	6802      	ldr	r2, [r0, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8012450:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8012452:	2170      	movs	r1, #112	; 0x70
 8012454:	438b      	bics	r3, r1
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012456:	3929      	subs	r1, #41	; 0x29
 8012458:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 801245a:	6093      	str	r3, [r2, #8]
}
 801245c:	e043      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 801245e:	2b00      	cmp	r3, #0
 8012460:	d100      	bne.n	8012464 <HAL_TIM_ConfigClockSource+0x78>
 8012462:	e07d      	b.n	8012560 <HAL_TIM_ConfigClockSource+0x174>
 8012464:	2b10      	cmp	r3, #16
 8012466:	d13e      	bne.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8012468:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801246a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801246c:	2170      	movs	r1, #112	; 0x70
 801246e:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012470:	3959      	subs	r1, #89	; 0x59
 8012472:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8012474:	6093      	str	r3, [r2, #8]
}
 8012476:	e036      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 8012478:	2280      	movs	r2, #128	; 0x80
 801247a:	0152      	lsls	r2, r2, #5
 801247c:	4293      	cmp	r3, r2
 801247e:	d02d      	beq.n	80124dc <HAL_TIM_ConfigClockSource+0xf0>
 8012480:	d916      	bls.n	80124b0 <HAL_TIM_ConfigClockSource+0xc4>
 8012482:	2280      	movs	r2, #128	; 0x80
 8012484:	0192      	lsls	r2, r2, #6
 8012486:	4293      	cmp	r3, r2
 8012488:	d12d      	bne.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ETR_SetConfig(htim->Instance,
 801248a:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 801248c:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801248e:	4a42      	ldr	r2, [pc, #264]	; (8012598 <HAL_TIM_ConfigClockSource+0x1ac>)
 8012490:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8012492:	688b      	ldr	r3, [r1, #8]
 8012494:	684d      	ldr	r5, [r1, #4]
 8012496:	432b      	orrs	r3, r5
 8012498:	68c9      	ldr	r1, [r1, #12]
 801249a:	0209      	lsls	r1, r1, #8
 801249c:	430b      	orrs	r3, r1
 801249e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80124a0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80124a2:	6802      	ldr	r2, [r0, #0]
 80124a4:	6891      	ldr	r1, [r2, #8]
 80124a6:	2380      	movs	r3, #128	; 0x80
 80124a8:	01db      	lsls	r3, r3, #7
 80124aa:	430b      	orrs	r3, r1
 80124ac:	6093      	str	r3, [r2, #8]
    break;
 80124ae:	e01a      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
  switch (sClockSourceConfig->ClockSource)
 80124b0:	2b60      	cmp	r3, #96	; 0x60
 80124b2:	d03a      	beq.n	801252a <HAL_TIM_ConfigClockSource+0x13e>
 80124b4:	2b70      	cmp	r3, #112	; 0x70
 80124b6:	d116      	bne.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ETR_SetConfig(htim->Instance,
 80124b8:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 80124ba:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80124bc:	4a36      	ldr	r2, [pc, #216]	; (8012598 <HAL_TIM_ConfigClockSource+0x1ac>)
 80124be:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80124c0:	688b      	ldr	r3, [r1, #8]
 80124c2:	684d      	ldr	r5, [r1, #4]
 80124c4:	432b      	orrs	r3, r5
 80124c6:	68c9      	ldr	r1, [r1, #12]
 80124c8:	0209      	lsls	r1, r1, #8
 80124ca:	430b      	orrs	r3, r1
 80124cc:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80124ce:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80124d0:	6802      	ldr	r2, [r0, #0]
 80124d2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80124d4:	2177      	movs	r1, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80124d6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80124d8:	6093      	str	r3, [r2, #8]
    break;
 80124da:	e004      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80124dc:	6802      	ldr	r2, [r0, #0]
 80124de:	6893      	ldr	r3, [r2, #8]
 80124e0:	2107      	movs	r1, #7
 80124e2:	438b      	bics	r3, r1
 80124e4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80124e6:	2339      	movs	r3, #57	; 0x39
 80124e8:	2201      	movs	r2, #1
 80124ea:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80124ec:	3b01      	subs	r3, #1
 80124ee:	2200      	movs	r2, #0
 80124f0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80124f2:	2000      	movs	r0, #0
}
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80124f6:	6803      	ldr	r3, [r0, #0]
 80124f8:	684c      	ldr	r4, [r1, #4]
 80124fa:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80124fc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80124fe:	6a1d      	ldr	r5, [r3, #32]
 8012500:	2601      	movs	r6, #1
 8012502:	43b5      	bics	r5, r6
 8012504:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012506:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012508:	36ef      	adds	r6, #239	; 0xef
 801250a:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801250c:	0112      	lsls	r2, r2, #4
 801250e:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012510:	250a      	movs	r5, #10
 8012512:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8012514:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8012516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012518:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801251a:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801251c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801251e:	2170      	movs	r1, #112	; 0x70
 8012520:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012522:	3919      	subs	r1, #25
 8012524:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8012526:	6093      	str	r3, [r2, #8]
}
 8012528:	e7dd      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801252a:	6803      	ldr	r3, [r0, #0]
 801252c:	684a      	ldr	r2, [r1, #4]
 801252e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012530:	6a1c      	ldr	r4, [r3, #32]
 8012532:	2510      	movs	r5, #16
 8012534:	43ac      	bics	r4, r5
 8012536:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012538:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 801253a:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801253c:	4e17      	ldr	r6, [pc, #92]	; (801259c <HAL_TIM_ConfigClockSource+0x1b0>)
 801253e:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 8012540:	0309      	lsls	r1, r1, #12
 8012542:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012544:	25a0      	movs	r5, #160	; 0xa0
 8012546:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8012548:	0112      	lsls	r2, r2, #4
 801254a:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1 ;
 801254c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 801254e:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012550:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8012552:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012554:	2170      	movs	r1, #112	; 0x70
 8012556:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012558:	3909      	subs	r1, #9
 801255a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801255c:	6093      	str	r3, [r2, #8]
}
 801255e:	e7c2      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8012560:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8012562:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012564:	2170      	movs	r1, #112	; 0x70
 8012566:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012568:	3969      	subs	r1, #105	; 0x69
 801256a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801256c:	6093      	str	r3, [r2, #8]
}
 801256e:	e7ba      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8012570:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8012572:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012574:	2170      	movs	r1, #112	; 0x70
 8012576:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012578:	3949      	subs	r1, #73	; 0x49
 801257a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801257c:	6093      	str	r3, [r2, #8]
}
 801257e:	e7b2      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8012580:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8012582:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8012584:	2170      	movs	r1, #112	; 0x70
 8012586:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8012588:	3939      	subs	r1, #57	; 0x39
 801258a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801258c:	6093      	str	r3, [r2, #8]
}
 801258e:	e7aa      	b.n	80124e6 <HAL_TIM_ConfigClockSource+0xfa>
  __HAL_LOCK(htim);
 8012590:	2002      	movs	r0, #2
 8012592:	e7af      	b.n	80124f4 <HAL_TIM_ConfigClockSource+0x108>
 8012594:	ffff0088 	.word	0xffff0088
 8012598:	ffff00ff 	.word	0xffff00ff
 801259c:	ffff0fff 	.word	0xffff0fff

080125a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80125a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80125a2:	4a2f      	ldr	r2, [pc, #188]	; (8012660 <TIM_Base_SetConfig+0xc0>)
 80125a4:	4290      	cmp	r0, r2
 80125a6:	d044      	beq.n	8012632 <TIM_Base_SetConfig+0x92>
 80125a8:	2280      	movs	r2, #128	; 0x80
 80125aa:	05d2      	lsls	r2, r2, #23
 80125ac:	4290      	cmp	r0, r2
 80125ae:	d032      	beq.n	8012616 <TIM_Base_SetConfig+0x76>
 80125b0:	4a2c      	ldr	r2, [pc, #176]	; (8012664 <TIM_Base_SetConfig+0xc4>)
 80125b2:	4290      	cmp	r0, r2
 80125b4:	d04f      	beq.n	8012656 <TIM_Base_SetConfig+0xb6>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80125b6:	4a2c      	ldr	r2, [pc, #176]	; (8012668 <TIM_Base_SetConfig+0xc8>)
 80125b8:	4290      	cmp	r0, r2
 80125ba:	d030      	beq.n	801261e <TIM_Base_SetConfig+0x7e>
 80125bc:	4a2b      	ldr	r2, [pc, #172]	; (801266c <TIM_Base_SetConfig+0xcc>)
 80125be:	4290      	cmp	r0, r2
 80125c0:	d01f      	beq.n	8012602 <TIM_Base_SetConfig+0x62>
 80125c2:	4a2b      	ldr	r2, [pc, #172]	; (8012670 <TIM_Base_SetConfig+0xd0>)
 80125c4:	4290      	cmp	r0, r2
 80125c6:	d012      	beq.n	80125ee <TIM_Base_SetConfig+0x4e>
 80125c8:	4a2a      	ldr	r2, [pc, #168]	; (8012674 <TIM_Base_SetConfig+0xd4>)
 80125ca:	4290      	cmp	r0, r2
 80125cc:	d005      	beq.n	80125da <TIM_Base_SetConfig+0x3a>
  TIMx->CR1 = tmpcr1;
 80125ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125d0:	688b      	ldr	r3, [r1, #8]
 80125d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80125d4:	680b      	ldr	r3, [r1, #0]
 80125d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125d8:	e03a      	b.n	8012650 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80125da:	4a27      	ldr	r2, [pc, #156]	; (8012678 <TIM_Base_SetConfig+0xd8>)
 80125dc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125de:	68ca      	ldr	r2, [r1, #12]
 80125e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80125e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125e4:	688b      	ldr	r3, [r1, #8]
 80125e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80125e8:	680b      	ldr	r3, [r1, #0]
 80125ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125ec:	e02e      	b.n	801264c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80125ee:	4a22      	ldr	r2, [pc, #136]	; (8012678 <TIM_Base_SetConfig+0xd8>)
 80125f0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125f2:	68ca      	ldr	r2, [r1, #12]
 80125f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80125f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125f8:	688b      	ldr	r3, [r1, #8]
 80125fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80125fc:	680b      	ldr	r3, [r1, #0]
 80125fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012600:	e024      	b.n	801264c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012602:	4a1d      	ldr	r2, [pc, #116]	; (8012678 <TIM_Base_SetConfig+0xd8>)
 8012604:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012606:	68ca      	ldr	r2, [r1, #12]
 8012608:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801260a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801260c:	688b      	ldr	r3, [r1, #8]
 801260e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012610:	680b      	ldr	r3, [r1, #0]
 8012612:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012614:	e01a      	b.n	801264c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012616:	2270      	movs	r2, #112	; 0x70
 8012618:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801261a:	684a      	ldr	r2, [r1, #4]
 801261c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801261e:	4a16      	ldr	r2, [pc, #88]	; (8012678 <TIM_Base_SetConfig+0xd8>)
 8012620:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012622:	68ca      	ldr	r2, [r1, #12]
 8012624:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012626:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012628:	688b      	ldr	r3, [r1, #8]
 801262a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801262c:	680b      	ldr	r3, [r1, #0]
 801262e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012630:	e00e      	b.n	8012650 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012632:	2270      	movs	r2, #112	; 0x70
 8012634:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012636:	684a      	ldr	r2, [r1, #4]
 8012638:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801263a:	4a0f      	ldr	r2, [pc, #60]	; (8012678 <TIM_Base_SetConfig+0xd8>)
 801263c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801263e:	68ca      	ldr	r2, [r1, #12]
 8012640:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012642:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012644:	688b      	ldr	r3, [r1, #8]
 8012646:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012648:	680b      	ldr	r3, [r1, #0]
 801264a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 801264c:	690b      	ldr	r3, [r1, #16]
 801264e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8012650:	2301      	movs	r3, #1
 8012652:	6143      	str	r3, [r0, #20]
}
 8012654:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012656:	2270      	movs	r2, #112	; 0x70
 8012658:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801265a:	684a      	ldr	r2, [r1, #4]
 801265c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801265e:	e7de      	b.n	801261e <TIM_Base_SetConfig+0x7e>
 8012660:	40012c00 	.word	0x40012c00
 8012664:	40000400 	.word	0x40000400
 8012668:	40002000 	.word	0x40002000
 801266c:	40014000 	.word	0x40014000
 8012670:	40014400 	.word	0x40014400
 8012674:	40014800 	.word	0x40014800
 8012678:	fffffcff 	.word	0xfffffcff

0801267c <HAL_TIM_Base_Init>:
{
 801267c:	b570      	push	{r4, r5, r6, lr}
 801267e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012680:	d014      	beq.n	80126ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012682:	2339      	movs	r3, #57	; 0x39
 8012684:	5cc3      	ldrb	r3, [r0, r3]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00a      	beq.n	80126a0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801268a:	2539      	movs	r5, #57	; 0x39
 801268c:	2302      	movs	r3, #2
 801268e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012690:	0021      	movs	r1, r4
 8012692:	c901      	ldmia	r1!, {r0}
 8012694:	f7ff ff84 	bl	80125a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012698:	2301      	movs	r3, #1
 801269a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 801269c:	2000      	movs	r0, #0
}
 801269e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80126a0:	3338      	adds	r3, #56	; 0x38
 80126a2:	2200      	movs	r2, #0
 80126a4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80126a6:	f7ff fe51 	bl	801234c <HAL_TIM_Base_MspInit>
 80126aa:	e7ee      	b.n	801268a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80126ac:	2001      	movs	r0, #1
 80126ae:	e7f6      	b.n	801269e <HAL_TIM_Base_Init+0x22>

080126b0 <HAL_TIM_PWM_Init>:
{
 80126b0:	b570      	push	{r4, r5, r6, lr}
 80126b2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80126b4:	d014      	beq.n	80126e0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80126b6:	2339      	movs	r3, #57	; 0x39
 80126b8:	5cc3      	ldrb	r3, [r0, r3]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00a      	beq.n	80126d4 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80126be:	2539      	movs	r5, #57	; 0x39
 80126c0:	2302      	movs	r3, #2
 80126c2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126c4:	0021      	movs	r1, r4
 80126c6:	c901      	ldmia	r1!, {r0}
 80126c8:	f7ff ff6a 	bl	80125a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80126cc:	2301      	movs	r3, #1
 80126ce:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80126d0:	2000      	movs	r0, #0
}
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80126d4:	3338      	adds	r3, #56	; 0x38
 80126d6:	2200      	movs	r2, #0
 80126d8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80126da:	f7ff fe65 	bl	80123a8 <HAL_TIM_PWM_MspInit>
 80126de:	e7ee      	b.n	80126be <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80126e0:	2001      	movs	r0, #1
 80126e2:	e7f6      	b.n	80126d2 <HAL_TIM_PWM_Init+0x22>

080126e4 <TIM_OC2_SetConfig>:
{
 80126e4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80126e6:	6a03      	ldr	r3, [r0, #32]
 80126e8:	2210      	movs	r2, #16
 80126ea:	4393      	bics	r3, r2
 80126ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80126ee:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80126f0:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80126f2:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80126f4:	4c15      	ldr	r4, [pc, #84]	; (801274c <TIM_OC2_SetConfig+0x68>)
 80126f6:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 80126f8:	680c      	ldr	r4, [r1, #0]
 80126fa:	0224      	lsls	r4, r4, #8
 80126fc:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80126fe:	2420      	movs	r4, #32
 8012700:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8012702:	688c      	ldr	r4, [r1, #8]
 8012704:	0124      	lsls	r4, r4, #4
 8012706:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012708:	4c11      	ldr	r4, [pc, #68]	; (8012750 <TIM_OC2_SetConfig+0x6c>)
 801270a:	42a0      	cmp	r0, r4
 801270c:	d009      	beq.n	8012722 <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 801270e:	4c11      	ldr	r4, [pc, #68]	; (8012754 <TIM_OC2_SetConfig+0x70>)
 8012710:	42a0      	cmp	r0, r4
 8012712:	d00e      	beq.n	8012732 <TIM_OC2_SetConfig+0x4e>
 8012714:	4c10      	ldr	r4, [pc, #64]	; (8012758 <TIM_OC2_SetConfig+0x74>)
 8012716:	42a0      	cmp	r0, r4
 8012718:	d00b      	beq.n	8012732 <TIM_OC2_SetConfig+0x4e>
 801271a:	4c10      	ldr	r4, [pc, #64]	; (801275c <TIM_OC2_SetConfig+0x78>)
 801271c:	42a0      	cmp	r0, r4
 801271e:	d10f      	bne.n	8012740 <TIM_OC2_SetConfig+0x5c>
 8012720:	e007      	b.n	8012732 <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8012722:	2480      	movs	r4, #128	; 0x80
 8012724:	43a2      	bics	r2, r4
 8012726:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8012728:	68ca      	ldr	r2, [r1, #12]
 801272a:	0112      	lsls	r2, r2, #4
 801272c:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 801272e:	2440      	movs	r4, #64	; 0x40
 8012730:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012732:	4c0b      	ldr	r4, [pc, #44]	; (8012760 <TIM_OC2_SetConfig+0x7c>)
 8012734:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8012736:	698b      	ldr	r3, [r1, #24]
 8012738:	694e      	ldr	r6, [r1, #20]
 801273a:	4333      	orrs	r3, r6
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8012740:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012742:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8012744:	684b      	ldr	r3, [r1, #4]
 8012746:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8012748:	6202      	str	r2, [r0, #32]
}
 801274a:	bd70      	pop	{r4, r5, r6, pc}
 801274c:	ffff8cff 	.word	0xffff8cff
 8012750:	40012c00 	.word	0x40012c00
 8012754:	40014000 	.word	0x40014000
 8012758:	40014400 	.word	0x40014400
 801275c:	40014800 	.word	0x40014800
 8012760:	fffff3ff 	.word	0xfffff3ff

08012764 <HAL_TIM_PWM_ConfigChannel>:
{
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	0004      	movs	r4, r0
 8012768:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 801276a:	2338      	movs	r3, #56	; 0x38
 801276c:	5cc3      	ldrb	r3, [r0, r3]
 801276e:	2b01      	cmp	r3, #1
 8012770:	d069      	beq.n	8012846 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8012772:	2338      	movs	r3, #56	; 0x38
 8012774:	2101      	movs	r1, #1
 8012776:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8012778:	3301      	adds	r3, #1
 801277a:	3101      	adds	r1, #1
 801277c:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 801277e:	2a08      	cmp	r2, #8
 8012780:	d04d      	beq.n	801281e <HAL_TIM_PWM_ConfigChannel+0xba>
 8012782:	d819      	bhi.n	80127b8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8012784:	2a00      	cmp	r2, #0
 8012786:	d02f      	beq.n	80127e8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8012788:	2a04      	cmp	r2, #4
 801278a:	d140      	bne.n	801280e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801278c:	0029      	movs	r1, r5
 801278e:	6800      	ldr	r0, [r0, #0]
 8012790:	f7ff ffa8 	bl	80126e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012794:	6822      	ldr	r2, [r4, #0]
 8012796:	6991      	ldr	r1, [r2, #24]
 8012798:	2380      	movs	r3, #128	; 0x80
 801279a:	011b      	lsls	r3, r3, #4
 801279c:	430b      	orrs	r3, r1
 801279e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80127a0:	6822      	ldr	r2, [r4, #0]
 80127a2:	6993      	ldr	r3, [r2, #24]
 80127a4:	4929      	ldr	r1, [pc, #164]	; (801284c <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80127a6:	400b      	ands	r3, r1
 80127a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80127aa:	6822      	ldr	r2, [r4, #0]
 80127ac:	6991      	ldr	r1, [r2, #24]
 80127ae:	692b      	ldr	r3, [r5, #16]
 80127b0:	021b      	lsls	r3, r3, #8
 80127b2:	430b      	orrs	r3, r1
 80127b4:	6193      	str	r3, [r2, #24]
    break;
 80127b6:	e02a      	b.n	801280e <HAL_TIM_PWM_ConfigChannel+0xaa>
  switch (Channel)
 80127b8:	2a0c      	cmp	r2, #12
 80127ba:	d128      	bne.n	801280e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80127bc:	0029      	movs	r1, r5
 80127be:	6800      	ldr	r0, [r0, #0]
 80127c0:	f7ff fd8a 	bl	80122d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80127c4:	6822      	ldr	r2, [r4, #0]
 80127c6:	69d1      	ldr	r1, [r2, #28]
 80127c8:	2380      	movs	r3, #128	; 0x80
 80127ca:	011b      	lsls	r3, r3, #4
 80127cc:	430b      	orrs	r3, r1
 80127ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80127d0:	6822      	ldr	r2, [r4, #0]
 80127d2:	69d3      	ldr	r3, [r2, #28]
 80127d4:	491d      	ldr	r1, [pc, #116]	; (801284c <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80127d6:	400b      	ands	r3, r1
 80127d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80127da:	6822      	ldr	r2, [r4, #0]
 80127dc:	69d1      	ldr	r1, [r2, #28]
 80127de:	692b      	ldr	r3, [r5, #16]
 80127e0:	021b      	lsls	r3, r3, #8
 80127e2:	430b      	orrs	r3, r1
 80127e4:	61d3      	str	r3, [r2, #28]
    break;
 80127e6:	e012      	b.n	801280e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80127e8:	0029      	movs	r1, r5
 80127ea:	6800      	ldr	r0, [r0, #0]
 80127ec:	f7ff fce2 	bl	80121b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80127f0:	6822      	ldr	r2, [r4, #0]
 80127f2:	6993      	ldr	r3, [r2, #24]
 80127f4:	2108      	movs	r1, #8
 80127f6:	430b      	orrs	r3, r1
 80127f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80127fa:	6822      	ldr	r2, [r4, #0]
 80127fc:	6993      	ldr	r3, [r2, #24]
 80127fe:	3904      	subs	r1, #4
 8012800:	438b      	bics	r3, r1
 8012802:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012804:	6822      	ldr	r2, [r4, #0]
 8012806:	6993      	ldr	r3, [r2, #24]
 8012808:	6929      	ldr	r1, [r5, #16]
 801280a:	430b      	orrs	r3, r1
 801280c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 801280e:	2339      	movs	r3, #57	; 0x39
 8012810:	2201      	movs	r2, #1
 8012812:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8012814:	3b01      	subs	r3, #1
 8012816:	2200      	movs	r2, #0
 8012818:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801281a:	2000      	movs	r0, #0
}
 801281c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801281e:	0029      	movs	r1, r5
 8012820:	6800      	ldr	r0, [r0, #0]
 8012822:	f7ff fd15 	bl	8012250 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012826:	6822      	ldr	r2, [r4, #0]
 8012828:	69d3      	ldr	r3, [r2, #28]
 801282a:	2108      	movs	r1, #8
 801282c:	430b      	orrs	r3, r1
 801282e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012830:	6822      	ldr	r2, [r4, #0]
 8012832:	69d3      	ldr	r3, [r2, #28]
 8012834:	3904      	subs	r1, #4
 8012836:	438b      	bics	r3, r1
 8012838:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801283a:	6822      	ldr	r2, [r4, #0]
 801283c:	69d3      	ldr	r3, [r2, #28]
 801283e:	6929      	ldr	r1, [r5, #16]
 8012840:	430b      	orrs	r3, r1
 8012842:	61d3      	str	r3, [r2, #28]
    break;
 8012844:	e7e3      	b.n	801280e <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8012846:	2002      	movs	r0, #2
 8012848:	e7e8      	b.n	801281c <HAL_TIM_PWM_ConfigChannel+0xb8>
 801284a:	46c0      	nop			; (mov r8, r8)
 801284c:	fffffbff 	.word	0xfffffbff

08012850 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012850:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012852:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8012854:	2401      	movs	r4, #1
 8012856:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8012858:	43a3      	bics	r3, r4
 801285a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 801285c:	6a03      	ldr	r3, [r0, #32]
 801285e:	408a      	lsls	r2, r1
 8012860:	431a      	orrs	r2, r3
 8012862:	6202      	str	r2, [r0, #32]
}
 8012864:	bd10      	pop	{r4, pc}
	...

08012868 <HAL_TIM_PWM_Start>:
{
 8012868:	b510      	push	{r4, lr}
 801286a:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801286c:	2201      	movs	r2, #1
 801286e:	6800      	ldr	r0, [r0, #0]
 8012870:	f7ff ffee 	bl	8012850 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012874:	6823      	ldr	r3, [r4, #0]
 8012876:	4a0c      	ldr	r2, [pc, #48]	; (80128a8 <HAL_TIM_PWM_Start+0x40>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d008      	beq.n	801288e <HAL_TIM_PWM_Start+0x26>
 801287c:	4a0b      	ldr	r2, [pc, #44]	; (80128ac <HAL_TIM_PWM_Start+0x44>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d005      	beq.n	801288e <HAL_TIM_PWM_Start+0x26>
 8012882:	4a0b      	ldr	r2, [pc, #44]	; (80128b0 <HAL_TIM_PWM_Start+0x48>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d002      	beq.n	801288e <HAL_TIM_PWM_Start+0x26>
 8012888:	4a0a      	ldr	r2, [pc, #40]	; (80128b4 <HAL_TIM_PWM_Start+0x4c>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d104      	bne.n	8012898 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 801288e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8012890:	2280      	movs	r2, #128	; 0x80
 8012892:	0212      	lsls	r2, r2, #8
 8012894:	430a      	orrs	r2, r1
 8012896:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8012898:	6822      	ldr	r2, [r4, #0]
 801289a:	6813      	ldr	r3, [r2, #0]
 801289c:	2101      	movs	r1, #1
 801289e:	430b      	orrs	r3, r1
 80128a0:	6013      	str	r3, [r2, #0]
}
 80128a2:	2000      	movs	r0, #0
 80128a4:	bd10      	pop	{r4, pc}
 80128a6:	46c0      	nop			; (mov r8, r8)
 80128a8:	40012c00 	.word	0x40012c00
 80128ac:	40014000 	.word	0x40014000
 80128b0:	40014400 	.word	0x40014400
 80128b4:	40014800 	.word	0x40014800

080128b8 <HAL_TIM_PWM_Stop>:
{
 80128b8:	b510      	push	{r4, lr}
 80128ba:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80128bc:	2200      	movs	r2, #0
 80128be:	6800      	ldr	r0, [r0, #0]
 80128c0:	f7ff ffc6 	bl	8012850 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	4a15      	ldr	r2, [pc, #84]	; (801291c <HAL_TIM_PWM_Stop+0x64>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d01a      	beq.n	8012902 <HAL_TIM_PWM_Stop+0x4a>
 80128cc:	4a14      	ldr	r2, [pc, #80]	; (8012920 <HAL_TIM_PWM_Stop+0x68>)
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d017      	beq.n	8012902 <HAL_TIM_PWM_Stop+0x4a>
 80128d2:	4a14      	ldr	r2, [pc, #80]	; (8012924 <HAL_TIM_PWM_Stop+0x6c>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d014      	beq.n	8012902 <HAL_TIM_PWM_Stop+0x4a>
 80128d8:	4a13      	ldr	r2, [pc, #76]	; (8012928 <HAL_TIM_PWM_Stop+0x70>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d011      	beq.n	8012902 <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	6a19      	ldr	r1, [r3, #32]
 80128e2:	4a12      	ldr	r2, [pc, #72]	; (801292c <HAL_TIM_PWM_Stop+0x74>)
 80128e4:	4211      	tst	r1, r2
 80128e6:	d107      	bne.n	80128f8 <HAL_TIM_PWM_Stop+0x40>
 80128e8:	6a19      	ldr	r1, [r3, #32]
 80128ea:	4a11      	ldr	r2, [pc, #68]	; (8012930 <HAL_TIM_PWM_Stop+0x78>)
 80128ec:	4211      	tst	r1, r2
 80128ee:	d103      	bne.n	80128f8 <HAL_TIM_PWM_Stop+0x40>
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	2101      	movs	r1, #1
 80128f4:	438a      	bics	r2, r1
 80128f6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80128f8:	2339      	movs	r3, #57	; 0x39
 80128fa:	2201      	movs	r2, #1
 80128fc:	54e2      	strb	r2, [r4, r3]
}
 80128fe:	2000      	movs	r0, #0
 8012900:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8012902:	6a19      	ldr	r1, [r3, #32]
 8012904:	4a09      	ldr	r2, [pc, #36]	; (801292c <HAL_TIM_PWM_Stop+0x74>)
 8012906:	4211      	tst	r1, r2
 8012908:	d1e9      	bne.n	80128de <HAL_TIM_PWM_Stop+0x26>
 801290a:	6a19      	ldr	r1, [r3, #32]
 801290c:	4a08      	ldr	r2, [pc, #32]	; (8012930 <HAL_TIM_PWM_Stop+0x78>)
 801290e:	4211      	tst	r1, r2
 8012910:	d1e5      	bne.n	80128de <HAL_TIM_PWM_Stop+0x26>
 8012912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012914:	4907      	ldr	r1, [pc, #28]	; (8012934 <HAL_TIM_PWM_Stop+0x7c>)
 8012916:	400a      	ands	r2, r1
 8012918:	645a      	str	r2, [r3, #68]	; 0x44
 801291a:	e7e0      	b.n	80128de <HAL_TIM_PWM_Stop+0x26>
 801291c:	40012c00 	.word	0x40012c00
 8012920:	40014000 	.word	0x40014000
 8012924:	40014400 	.word	0x40014400
 8012928:	40014800 	.word	0x40014800
 801292c:	00001111 	.word	0x00001111
 8012930:	00000444 	.word	0x00000444
 8012934:	ffff7fff 	.word	0xffff7fff

08012938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012938:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801293a:	2338      	movs	r3, #56	; 0x38
 801293c:	5cc3      	ldrb	r3, [r0, r3]
 801293e:	2b01      	cmp	r3, #1
 8012940:	d01e      	beq.n	8012980 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012942:	2238      	movs	r2, #56	; 0x38
 8012944:	2501      	movs	r5, #1
 8012946:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012948:	2439      	movs	r4, #57	; 0x39
 801294a:	2302      	movs	r3, #2
 801294c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801294e:	6806      	ldr	r6, [r0, #0]
 8012950:	6873      	ldr	r3, [r6, #4]
 8012952:	2770      	movs	r7, #112	; 0x70
 8012954:	43bb      	bics	r3, r7
 8012956:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012958:	6806      	ldr	r6, [r0, #0]
 801295a:	6873      	ldr	r3, [r6, #4]
 801295c:	680f      	ldr	r7, [r1, #0]
 801295e:	433b      	orrs	r3, r7
 8012960:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012962:	6806      	ldr	r6, [r0, #0]
 8012964:	68b3      	ldr	r3, [r6, #8]
 8012966:	2780      	movs	r7, #128	; 0x80
 8012968:	43bb      	bics	r3, r7
 801296a:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801296c:	6806      	ldr	r6, [r0, #0]
 801296e:	68b3      	ldr	r3, [r6, #8]
 8012970:	6849      	ldr	r1, [r1, #4]
 8012972:	430b      	orrs	r3, r1
 8012974:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012976:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012978:	2300      	movs	r3, #0
 801297a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 801297c:	2000      	movs	r0, #0
}
 801297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012980:	2002      	movs	r0, #2
 8012982:	e7fc      	b.n	801297e <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012984 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012984:	4770      	bx	lr

08012986 <HAL_UART_DeInit>:
{
 8012986:	b570      	push	{r4, r5, r6, lr}
 8012988:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801298a:	d016      	beq.n	80129ba <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 801298c:	2669      	movs	r6, #105	; 0x69
 801298e:	2302      	movs	r3, #2
 8012990:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012992:	6802      	ldr	r2, [r0, #0]
 8012994:	6813      	ldr	r3, [r2, #0]
 8012996:	2101      	movs	r1, #1
 8012998:	438b      	bics	r3, r1
 801299a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 801299c:	6803      	ldr	r3, [r0, #0]
 801299e:	2500      	movs	r5, #0
 80129a0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80129a2:	6803      	ldr	r3, [r0, #0]
 80129a4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80129aa:	f7ff ffeb 	bl	8012984 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129ae:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80129b0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80129b2:	2368      	movs	r3, #104	; 0x68
 80129b4:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80129b6:	2000      	movs	r0, #0
}
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80129ba:	2001      	movs	r0, #1
 80129bc:	e7fc      	b.n	80129b8 <HAL_UART_DeInit+0x32>

080129be <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80129be:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80129c0:	2369      	movs	r3, #105	; 0x69
 80129c2:	5cc3      	ldrb	r3, [r0, r3]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d003      	beq.n	80129d0 <HAL_UART_Transmit_IT+0x12>
 80129c8:	2369      	movs	r3, #105	; 0x69
 80129ca:	5cc3      	ldrb	r3, [r0, r3]
 80129cc:	2b22      	cmp	r3, #34	; 0x22
 80129ce:	d12b      	bne.n	8012a28 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 80129d0:	2900      	cmp	r1, #0
 80129d2:	d02b      	beq.n	8012a2c <HAL_UART_Transmit_IT+0x6e>
 80129d4:	2a00      	cmp	r2, #0
 80129d6:	d02b      	beq.n	8012a30 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80129d8:	2368      	movs	r3, #104	; 0x68
 80129da:	5cc3      	ldrb	r3, [r0, r3]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d029      	beq.n	8012a34 <HAL_UART_Transmit_IT+0x76>
 80129e0:	2368      	movs	r3, #104	; 0x68
 80129e2:	2401      	movs	r4, #1
 80129e4:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 80129e6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80129e8:	3b18      	subs	r3, #24
 80129ea:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80129ec:	3302      	adds	r3, #2
 80129ee:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129f0:	2300      	movs	r3, #0
 80129f2:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80129f4:	3369      	adds	r3, #105	; 0x69
 80129f6:	5cc3      	ldrb	r3, [r0, r3]
 80129f8:	2b22      	cmp	r3, #34	; 0x22
 80129fa:	d011      	beq.n	8012a20 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80129fc:	2369      	movs	r3, #105	; 0x69
 80129fe:	2212      	movs	r2, #18
 8012a00:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012a02:	6802      	ldr	r2, [r0, #0]
 8012a04:	6893      	ldr	r3, [r2, #8]
 8012a06:	2101      	movs	r1, #1
 8012a08:	430b      	orrs	r3, r1
 8012a0a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012a0c:	2368      	movs	r3, #104	; 0x68
 8012a0e:	2200      	movs	r2, #0
 8012a10:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012a12:	6802      	ldr	r2, [r0, #0]
 8012a14:	6813      	ldr	r3, [r2, #0]
 8012a16:	317f      	adds	r1, #127	; 0x7f
 8012a18:	430b      	orrs	r3, r1
 8012a1a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012a1c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012a1e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012a20:	3347      	adds	r3, #71	; 0x47
 8012a22:	2232      	movs	r2, #50	; 0x32
 8012a24:	54c2      	strb	r2, [r0, r3]
 8012a26:	e7ec      	b.n	8012a02 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8012a28:	2002      	movs	r0, #2
 8012a2a:	e7f8      	b.n	8012a1e <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	e7f6      	b.n	8012a1e <HAL_UART_Transmit_IT+0x60>
 8012a30:	2001      	movs	r0, #1
 8012a32:	e7f4      	b.n	8012a1e <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8012a34:	2002      	movs	r0, #2
 8012a36:	e7f2      	b.n	8012a1e <HAL_UART_Transmit_IT+0x60>

08012a38 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012a38:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012a3a:	2369      	movs	r3, #105	; 0x69
 8012a3c:	5cc3      	ldrb	r3, [r0, r3]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d003      	beq.n	8012a4a <HAL_UART_Receive_IT+0x12>
 8012a42:	2369      	movs	r3, #105	; 0x69
 8012a44:	5cc3      	ldrb	r3, [r0, r3]
 8012a46:	2b12      	cmp	r3, #18
 8012a48:	d15d      	bne.n	8012b06 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012a4a:	2900      	cmp	r1, #0
 8012a4c:	d05d      	beq.n	8012b0a <HAL_UART_Receive_IT+0xd2>
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	d05d      	beq.n	8012b0e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012a52:	2368      	movs	r3, #104	; 0x68
 8012a54:	5cc3      	ldrb	r3, [r0, r3]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d05b      	beq.n	8012b12 <HAL_UART_Receive_IT+0xda>
 8012a5a:	2368      	movs	r3, #104	; 0x68
 8012a5c:	2401      	movs	r4, #1
 8012a5e:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8012a60:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012a62:	3b10      	subs	r3, #16
 8012a64:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012a66:	3302      	adds	r3, #2
 8012a68:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012a6a:	6883      	ldr	r3, [r0, #8]
 8012a6c:	2280      	movs	r2, #128	; 0x80
 8012a6e:	0152      	lsls	r2, r2, #5
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d008      	beq.n	8012a86 <HAL_UART_Receive_IT+0x4e>
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d115      	bne.n	8012aa4 <HAL_UART_Receive_IT+0x6c>
 8012a78:	6903      	ldr	r3, [r0, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10e      	bne.n	8012a9c <HAL_UART_Receive_IT+0x64>
 8012a7e:	335c      	adds	r3, #92	; 0x5c
 8012a80:	22ff      	movs	r2, #255	; 0xff
 8012a82:	52c2      	strh	r2, [r0, r3]
 8012a84:	e012      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
 8012a86:	6903      	ldr	r3, [r0, #16]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d103      	bne.n	8012a94 <HAL_UART_Receive_IT+0x5c>
 8012a8c:	335c      	adds	r3, #92	; 0x5c
 8012a8e:	4a22      	ldr	r2, [pc, #136]	; (8012b18 <HAL_UART_Receive_IT+0xe0>)
 8012a90:	52c2      	strh	r2, [r0, r3]
 8012a92:	e00b      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
 8012a94:	235c      	movs	r3, #92	; 0x5c
 8012a96:	22ff      	movs	r2, #255	; 0xff
 8012a98:	52c2      	strh	r2, [r0, r3]
 8012a9a:	e007      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
 8012a9c:	235c      	movs	r3, #92	; 0x5c
 8012a9e:	227f      	movs	r2, #127	; 0x7f
 8012aa0:	52c2      	strh	r2, [r0, r3]
 8012aa2:	e003      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
 8012aa4:	2280      	movs	r2, #128	; 0x80
 8012aa6:	0552      	lsls	r2, r2, #21
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d01d      	beq.n	8012ae8 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aac:	2300      	movs	r3, #0
 8012aae:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012ab0:	3369      	adds	r3, #105	; 0x69
 8012ab2:	5cc3      	ldrb	r3, [r0, r3]
 8012ab4:	2b12      	cmp	r3, #18
 8012ab6:	d022      	beq.n	8012afe <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012ab8:	2369      	movs	r3, #105	; 0x69
 8012aba:	2222      	movs	r2, #34	; 0x22
 8012abc:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012abe:	6802      	ldr	r2, [r0, #0]
 8012ac0:	6811      	ldr	r1, [r2, #0]
 8012ac2:	2380      	movs	r3, #128	; 0x80
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	430b      	orrs	r3, r1
 8012ac8:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012aca:	6802      	ldr	r2, [r0, #0]
 8012acc:	6893      	ldr	r3, [r2, #8]
 8012ace:	2101      	movs	r1, #1
 8012ad0:	430b      	orrs	r3, r1
 8012ad2:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012ad4:	2368      	movs	r3, #104	; 0x68
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012ada:	6802      	ldr	r2, [r0, #0]
 8012adc:	6813      	ldr	r3, [r2, #0]
 8012ade:	311f      	adds	r1, #31
 8012ae0:	430b      	orrs	r3, r1
 8012ae2:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012ae4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012ae6:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012ae8:	6903      	ldr	r3, [r0, #16]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d103      	bne.n	8012af6 <HAL_UART_Receive_IT+0xbe>
 8012aee:	335c      	adds	r3, #92	; 0x5c
 8012af0:	227f      	movs	r2, #127	; 0x7f
 8012af2:	52c2      	strh	r2, [r0, r3]
 8012af4:	e7da      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
 8012af6:	235c      	movs	r3, #92	; 0x5c
 8012af8:	223f      	movs	r2, #63	; 0x3f
 8012afa:	52c2      	strh	r2, [r0, r3]
 8012afc:	e7d6      	b.n	8012aac <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012afe:	3357      	adds	r3, #87	; 0x57
 8012b00:	2232      	movs	r2, #50	; 0x32
 8012b02:	54c2      	strb	r2, [r0, r3]
 8012b04:	e7db      	b.n	8012abe <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8012b06:	2002      	movs	r0, #2
 8012b08:	e7ed      	b.n	8012ae6 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8012b0a:	2001      	movs	r0, #1
 8012b0c:	e7eb      	b.n	8012ae6 <HAL_UART_Receive_IT+0xae>
 8012b0e:	2001      	movs	r0, #1
 8012b10:	e7e9      	b.n	8012ae6 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8012b12:	2002      	movs	r0, #2
 8012b14:	e7e7      	b.n	8012ae6 <HAL_UART_Receive_IT+0xae>
 8012b16:	46c0      	nop			; (mov r8, r8)
 8012b18:	000001ff 	.word	0x000001ff

08012b1c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	0004      	movs	r4, r0
 8012b20:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012b22:	2269      	movs	r2, #105	; 0x69
 8012b24:	5c82      	ldrb	r2, [r0, r2]
 8012b26:	2a01      	cmp	r2, #1
 8012b28:	d003      	beq.n	8012b32 <HAL_UART_Transmit_DMA+0x16>
 8012b2a:	2269      	movs	r2, #105	; 0x69
 8012b2c:	5c82      	ldrb	r2, [r0, r2]
 8012b2e:	2a22      	cmp	r2, #34	; 0x22
 8012b30:	d137      	bne.n	8012ba2 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8012b32:	2900      	cmp	r1, #0
 8012b34:	d037      	beq.n	8012ba6 <HAL_UART_Transmit_DMA+0x8a>
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d037      	beq.n	8012baa <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012b3a:	2268      	movs	r2, #104	; 0x68
 8012b3c:	5ca2      	ldrb	r2, [r4, r2]
 8012b3e:	2a01      	cmp	r2, #1
 8012b40:	d035      	beq.n	8012bae <HAL_UART_Transmit_DMA+0x92>
 8012b42:	2268      	movs	r2, #104	; 0x68
 8012b44:	2001      	movs	r0, #1
 8012b46:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8012b48:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012b4a:	3a18      	subs	r2, #24
 8012b4c:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8012b4e:	3202      	adds	r2, #2
 8012b50:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b52:	2200      	movs	r2, #0
 8012b54:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012b56:	3269      	adds	r2, #105	; 0x69
 8012b58:	5ca2      	ldrb	r2, [r4, r2]
 8012b5a:	2a22      	cmp	r2, #34	; 0x22
 8012b5c:	d01d      	beq.n	8012b9a <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012b5e:	2269      	movs	r2, #105	; 0x69
 8012b60:	2012      	movs	r0, #18
 8012b62:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012b64:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012b66:	4813      	ldr	r0, [pc, #76]	; (8012bb4 <HAL_UART_Transmit_DMA+0x98>)
 8012b68:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012b6a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012b6c:	4812      	ldr	r0, [pc, #72]	; (8012bb8 <HAL_UART_Transmit_DMA+0x9c>)
 8012b6e:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012b70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012b72:	4812      	ldr	r0, [pc, #72]	; (8012bbc <HAL_UART_Transmit_DMA+0xa0>)
 8012b74:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012b76:	6822      	ldr	r2, [r4, #0]
 8012b78:	3228      	adds	r2, #40	; 0x28
 8012b7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012b7c:	f7fd fd14 	bl	80105a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012b80:	6823      	ldr	r3, [r4, #0]
 8012b82:	2240      	movs	r2, #64	; 0x40
 8012b84:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012b86:	6822      	ldr	r2, [r4, #0]
 8012b88:	6893      	ldr	r3, [r2, #8]
 8012b8a:	2180      	movs	r1, #128	; 0x80
 8012b8c:	430b      	orrs	r3, r1
 8012b8e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012b90:	2368      	movs	r3, #104	; 0x68
 8012b92:	2200      	movs	r2, #0
 8012b94:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012b96:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012b98:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012b9a:	3247      	adds	r2, #71	; 0x47
 8012b9c:	3031      	adds	r0, #49	; 0x31
 8012b9e:	54a0      	strb	r0, [r4, r2]
 8012ba0:	e7e0      	b.n	8012b64 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8012ba2:	2002      	movs	r0, #2
 8012ba4:	e7f8      	b.n	8012b98 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8012ba6:	2001      	movs	r0, #1
 8012ba8:	e7f6      	b.n	8012b98 <HAL_UART_Transmit_DMA+0x7c>
 8012baa:	2001      	movs	r0, #1
 8012bac:	e7f4      	b.n	8012b98 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012bae:	2002      	movs	r0, #2
 8012bb0:	e7f2      	b.n	8012b98 <HAL_UART_Transmit_DMA+0x7c>
 8012bb2:	46c0      	nop			; (mov r8, r8)
 8012bb4:	08012c5d 	.word	0x08012c5d
 8012bb8:	08012c8f 	.word	0x08012c8f
 8012bbc:	08012cdf 	.word	0x08012cdf

08012bc0 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012bc0:	b510      	push	{r4, lr}
 8012bc2:	0004      	movs	r4, r0
 8012bc4:	0008      	movs	r0, r1
 8012bc6:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012bc8:	2269      	movs	r2, #105	; 0x69
 8012bca:	5ca2      	ldrb	r2, [r4, r2]
 8012bcc:	2a01      	cmp	r2, #1
 8012bce:	d003      	beq.n	8012bd8 <HAL_UART_Receive_DMA+0x18>
 8012bd0:	2269      	movs	r2, #105	; 0x69
 8012bd2:	5ca2      	ldrb	r2, [r4, r2]
 8012bd4:	2a12      	cmp	r2, #18
 8012bd6:	d133      	bne.n	8012c40 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d033      	beq.n	8012c44 <HAL_UART_Receive_DMA+0x84>
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d033      	beq.n	8012c48 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012be0:	2268      	movs	r2, #104	; 0x68
 8012be2:	5ca2      	ldrb	r2, [r4, r2]
 8012be4:	2a01      	cmp	r2, #1
 8012be6:	d031      	beq.n	8012c4c <HAL_UART_Receive_DMA+0x8c>
 8012be8:	2268      	movs	r2, #104	; 0x68
 8012bea:	2101      	movs	r1, #1
 8012bec:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8012bee:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012bf0:	3a10      	subs	r2, #16
 8012bf2:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012bf8:	3269      	adds	r2, #105	; 0x69
 8012bfa:	5ca2      	ldrb	r2, [r4, r2]
 8012bfc:	2a12      	cmp	r2, #18
 8012bfe:	d01b      	beq.n	8012c38 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012c00:	2269      	movs	r2, #105	; 0x69
 8012c02:	2122      	movs	r1, #34	; 0x22
 8012c04:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c08:	4911      	ldr	r1, [pc, #68]	; (8012c50 <HAL_UART_Receive_DMA+0x90>)
 8012c0a:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012c0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c0e:	4911      	ldr	r1, [pc, #68]	; (8012c54 <HAL_UART_Receive_DMA+0x94>)
 8012c10:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c14:	4910      	ldr	r1, [pc, #64]	; (8012c58 <HAL_UART_Receive_DMA+0x98>)
 8012c16:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012c18:	6821      	ldr	r1, [r4, #0]
 8012c1a:	3124      	adds	r1, #36	; 0x24
 8012c1c:	0002      	movs	r2, r0
 8012c1e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012c20:	f7fd fcc2 	bl	80105a8 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012c24:	6822      	ldr	r2, [r4, #0]
 8012c26:	6893      	ldr	r3, [r2, #8]
 8012c28:	2140      	movs	r1, #64	; 0x40
 8012c2a:	430b      	orrs	r3, r1
 8012c2c:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8012c2e:	2368      	movs	r3, #104	; 0x68
 8012c30:	2200      	movs	r2, #0
 8012c32:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012c34:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012c36:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012c38:	3257      	adds	r2, #87	; 0x57
 8012c3a:	3131      	adds	r1, #49	; 0x31
 8012c3c:	54a1      	strb	r1, [r4, r2]
 8012c3e:	e7e2      	b.n	8012c06 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8012c40:	2002      	movs	r0, #2
 8012c42:	e7f8      	b.n	8012c36 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8012c44:	2001      	movs	r0, #1
 8012c46:	e7f6      	b.n	8012c36 <HAL_UART_Receive_DMA+0x76>
 8012c48:	2001      	movs	r0, #1
 8012c4a:	e7f4      	b.n	8012c36 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 8012c4c:	2002      	movs	r0, #2
 8012c4e:	e7f2      	b.n	8012c36 <HAL_UART_Receive_DMA+0x76>
 8012c50:	08012c99 	.word	0x08012c99
 8012c54:	08012cd5 	.word	0x08012cd5
 8012c58:	08012cdf 	.word	0x08012cdf

08012c5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012c60:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	069b      	lsls	r3, r3, #26
 8012c68:	d40d      	bmi.n	8012c86 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 8012c6a:	2352      	movs	r3, #82	; 0x52
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012c70:	6802      	ldr	r2, [r0, #0]
 8012c72:	6893      	ldr	r3, [r2, #8]
 8012c74:	2180      	movs	r1, #128	; 0x80
 8012c76:	438b      	bics	r3, r1
 8012c78:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012c7a:	6802      	ldr	r2, [r0, #0]
 8012c7c:	6813      	ldr	r3, [r2, #0]
 8012c7e:	3940      	subs	r1, #64	; 0x40
 8012c80:	430b      	orrs	r3, r1
 8012c82:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012c84:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012c86:	f7fa f9c7 	bl	800d018 <HAL_UART_TxCpltCallback>
}
 8012c8a:	e7fb      	b.n	8012c84 <UART_DMATransmitCplt+0x28>

08012c8c <HAL_UART_TxHalfCpltCallback>:
}
 8012c8c:	4770      	bx	lr

08012c8e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012c8e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012c90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012c92:	f7ff fffb 	bl	8012c8c <HAL_UART_TxHalfCpltCallback>
}
 8012c96:	bd10      	pop	{r4, pc}

08012c98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012c98:	b510      	push	{r4, lr}
 8012c9a:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012c9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	069b      	lsls	r3, r3, #26
 8012ca4:	d40e      	bmi.n	8012cc4 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 8012ca6:	235a      	movs	r3, #90	; 0x5a
 8012ca8:	2200      	movs	r2, #0
 8012caa:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012cac:	6802      	ldr	r2, [r0, #0]
 8012cae:	6893      	ldr	r3, [r2, #8]
 8012cb0:	2140      	movs	r1, #64	; 0x40
 8012cb2:	438b      	bics	r3, r1
 8012cb4:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012cb6:	2369      	movs	r3, #105	; 0x69
 8012cb8:	5cc3      	ldrb	r3, [r0, r3]
 8012cba:	2b32      	cmp	r3, #50	; 0x32
 8012cbc:	d005      	beq.n	8012cca <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012cbe:	2369      	movs	r3, #105	; 0x69
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012cc4:	f7fa f9e6 	bl	800d094 <HAL_UART_RxCpltCallback>
}
 8012cc8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012cca:	3337      	adds	r3, #55	; 0x37
 8012ccc:	2212      	movs	r2, #18
 8012cce:	54c2      	strb	r2, [r0, r3]
 8012cd0:	e7f8      	b.n	8012cc4 <UART_DMAReceiveCplt+0x2c>

08012cd2 <HAL_UART_RxHalfCpltCallback>:
}
 8012cd2:	4770      	bx	lr

08012cd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012cd4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012cd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012cd8:	f7ff fffb 	bl	8012cd2 <HAL_UART_RxHalfCpltCallback>
}
 8012cdc:	bd10      	pop	{r4, pc}

08012cde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012cde:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012ce0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	225a      	movs	r2, #90	; 0x5a
 8012ce6:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012ce8:	3a08      	subs	r2, #8
 8012cea:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012cec:	3369      	adds	r3, #105	; 0x69
 8012cee:	3a51      	subs	r2, #81	; 0x51
 8012cf0:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012cf2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012cf4:	320f      	adds	r2, #15
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012cfa:	f7fa f9a5 	bl	800d048 <HAL_UART_ErrorCallback>
}
 8012cfe:	bd10      	pop	{r4, pc}

08012d00 <UART_SetConfig>:
{
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012d04:	6801      	ldr	r1, [r0, #0]
 8012d06:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d08:	6883      	ldr	r3, [r0, #8]
 8012d0a:	6900      	ldr	r0, [r0, #16]
 8012d0c:	4303      	orrs	r3, r0
 8012d0e:	6960      	ldr	r0, [r4, #20]
 8012d10:	4303      	orrs	r3, r0
 8012d12:	69e0      	ldr	r0, [r4, #28]
 8012d14:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012d16:	487a      	ldr	r0, [pc, #488]	; (8012f00 <UART_SetConfig+0x200>)
 8012d18:	4002      	ands	r2, r0
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d1e:	6822      	ldr	r2, [r4, #0]
 8012d20:	6853      	ldr	r3, [r2, #4]
 8012d22:	4978      	ldr	r1, [pc, #480]	; (8012f04 <UART_SetConfig+0x204>)
 8012d24:	400b      	ands	r3, r1
 8012d26:	68e1      	ldr	r1, [r4, #12]
 8012d28:	430b      	orrs	r3, r1
 8012d2a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012d2c:	6821      	ldr	r1, [r4, #0]
 8012d2e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012d30:	69a3      	ldr	r3, [r4, #24]
 8012d32:	6a20      	ldr	r0, [r4, #32]
 8012d34:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012d36:	4874      	ldr	r0, [pc, #464]	; (8012f08 <UART_SetConfig+0x208>)
 8012d38:	4002      	ands	r2, r0
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d3e:	6825      	ldr	r5, [r4, #0]
 8012d40:	4b72      	ldr	r3, [pc, #456]	; (8012f0c <UART_SetConfig+0x20c>)
 8012d42:	429d      	cmp	r5, r3
 8012d44:	d021      	beq.n	8012d8a <UART_SetConfig+0x8a>
 8012d46:	4b72      	ldr	r3, [pc, #456]	; (8012f10 <UART_SetConfig+0x210>)
 8012d48:	429d      	cmp	r5, r3
 8012d4a:	d03a      	beq.n	8012dc2 <UART_SetConfig+0xc2>
 8012d4c:	4b71      	ldr	r3, [pc, #452]	; (8012f14 <UART_SetConfig+0x214>)
 8012d4e:	429d      	cmp	r5, r3
 8012d50:	d061      	beq.n	8012e16 <UART_SetConfig+0x116>
 8012d52:	4b71      	ldr	r3, [pc, #452]	; (8012f18 <UART_SetConfig+0x218>)
 8012d54:	429d      	cmp	r5, r3
 8012d56:	d100      	bne.n	8012d5a <UART_SetConfig+0x5a>
 8012d58:	e0a8      	b.n	8012eac <UART_SetConfig+0x1ac>
 8012d5a:	4b70      	ldr	r3, [pc, #448]	; (8012f1c <UART_SetConfig+0x21c>)
 8012d5c:	429d      	cmp	r5, r3
 8012d5e:	d100      	bne.n	8012d62 <UART_SetConfig+0x62>
 8012d60:	e0a4      	b.n	8012eac <UART_SetConfig+0x1ac>
 8012d62:	4b6f      	ldr	r3, [pc, #444]	; (8012f20 <UART_SetConfig+0x220>)
 8012d64:	429d      	cmp	r5, r3
 8012d66:	d100      	bne.n	8012d6a <UART_SetConfig+0x6a>
 8012d68:	e0a0      	b.n	8012eac <UART_SetConfig+0x1ac>
 8012d6a:	4b6e      	ldr	r3, [pc, #440]	; (8012f24 <UART_SetConfig+0x224>)
 8012d6c:	429d      	cmp	r5, r3
 8012d6e:	d100      	bne.n	8012d72 <UART_SetConfig+0x72>
 8012d70:	e09c      	b.n	8012eac <UART_SetConfig+0x1ac>
 8012d72:	4b6d      	ldr	r3, [pc, #436]	; (8012f28 <UART_SetConfig+0x228>)
 8012d74:	429d      	cmp	r5, r3
 8012d76:	d100      	bne.n	8012d7a <UART_SetConfig+0x7a>
 8012d78:	e098      	b.n	8012eac <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d7a:	2380      	movs	r3, #128	; 0x80
 8012d7c:	021b      	lsls	r3, r3, #8
 8012d7e:	69e2      	ldr	r2, [r4, #28]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d100      	bne.n	8012d86 <UART_SetConfig+0x86>
 8012d84:	e08c      	b.n	8012ea0 <UART_SetConfig+0x1a0>
 8012d86:	2001      	movs	r0, #1
 8012d88:	e089      	b.n	8012e9e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d8a:	4b68      	ldr	r3, [pc, #416]	; (8012f2c <UART_SetConfig+0x22c>)
 8012d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d8e:	2303      	movs	r3, #3
 8012d90:	4013      	ands	r3, r2
 8012d92:	2b02      	cmp	r3, #2
 8012d94:	d100      	bne.n	8012d98 <UART_SetConfig+0x98>
 8012d96:	e0a6      	b.n	8012ee6 <UART_SetConfig+0x1e6>
 8012d98:	d82f      	bhi.n	8012dfa <UART_SetConfig+0xfa>
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d069      	beq.n	8012e72 <UART_SetConfig+0x172>
 8012d9e:	2b01      	cmp	r3, #1
 8012da0:	d120      	bne.n	8012de4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012da2:	2380      	movs	r3, #128	; 0x80
 8012da4:	021b      	lsls	r3, r3, #8
 8012da6:	69e2      	ldr	r2, [r4, #28]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d049      	beq.n	8012e40 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012dac:	f7fe ff08 	bl	8011bc0 <HAL_RCC_GetSysClockFreq>
 8012db0:	6825      	ldr	r5, [r4, #0]
 8012db2:	6861      	ldr	r1, [r4, #4]
 8012db4:	f7ed f9cc 	bl	8000150 <__udivsi3>
 8012db8:	0400      	lsls	r0, r0, #16
 8012dba:	0c00      	lsrs	r0, r0, #16
 8012dbc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012dbe:	2000      	movs	r0, #0
        break;
 8012dc0:	e06d      	b.n	8012e9e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012dc2:	4b5a      	ldr	r3, [pc, #360]	; (8012f2c <UART_SetConfig+0x22c>)
 8012dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc6:	22c0      	movs	r2, #192	; 0xc0
 8012dc8:	0292      	lsls	r2, r2, #10
 8012dca:	4013      	ands	r3, r2
 8012dcc:	2280      	movs	r2, #128	; 0x80
 8012dce:	0292      	lsls	r2, r2, #10
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d100      	bne.n	8012dd6 <UART_SetConfig+0xd6>
 8012dd4:	e087      	b.n	8012ee6 <UART_SetConfig+0x1e6>
 8012dd6:	d80c      	bhi.n	8012df2 <UART_SetConfig+0xf2>
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d04a      	beq.n	8012e72 <UART_SetConfig+0x172>
 8012ddc:	2280      	movs	r2, #128	; 0x80
 8012dde:	0252      	lsls	r2, r2, #9
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d0de      	beq.n	8012da2 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012de4:	2380      	movs	r3, #128	; 0x80
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	69e2      	ldr	r2, [r4, #28]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d05b      	beq.n	8012ea6 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 8012dee:	2001      	movs	r0, #1
 8012df0:	e055      	b.n	8012e9e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012df2:	22c0      	movs	r2, #192	; 0xc0
 8012df4:	0292      	lsls	r2, r2, #10
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d1f4      	bne.n	8012de4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012dfa:	2380      	movs	r3, #128	; 0x80
 8012dfc:	021b      	lsls	r3, r3, #8
 8012dfe:	69e2      	ldr	r2, [r4, #28]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d02f      	beq.n	8012e64 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012e04:	6861      	ldr	r1, [r4, #4]
 8012e06:	484a      	ldr	r0, [pc, #296]	; (8012f30 <UART_SetConfig+0x230>)
 8012e08:	f7ed f9a2 	bl	8000150 <__udivsi3>
 8012e0c:	0400      	lsls	r0, r0, #16
 8012e0e:	0c00      	lsrs	r0, r0, #16
 8012e10:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e12:	2000      	movs	r0, #0
        break;
 8012e14:	e043      	b.n	8012e9e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e16:	4b45      	ldr	r3, [pc, #276]	; (8012f2c <UART_SetConfig+0x22c>)
 8012e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e1a:	22c0      	movs	r2, #192	; 0xc0
 8012e1c:	0312      	lsls	r2, r2, #12
 8012e1e:	4013      	ands	r3, r2
 8012e20:	2280      	movs	r2, #128	; 0x80
 8012e22:	0312      	lsls	r2, r2, #12
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d051      	beq.n	8012ecc <UART_SetConfig+0x1cc>
 8012e28:	d813      	bhi.n	8012e52 <UART_SetConfig+0x152>
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d021      	beq.n	8012e72 <UART_SetConfig+0x172>
 8012e2e:	2280      	movs	r2, #128	; 0x80
 8012e30:	02d2      	lsls	r2, r2, #11
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d1d6      	bne.n	8012de4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e36:	2380      	movs	r3, #128	; 0x80
 8012e38:	021b      	lsls	r3, r3, #8
 8012e3a:	69e2      	ldr	r2, [r4, #28]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d1b5      	bne.n	8012dac <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012e40:	f7fe febe 	bl	8011bc0 <HAL_RCC_GetSysClockFreq>
 8012e44:	0040      	lsls	r0, r0, #1
 8012e46:	6861      	ldr	r1, [r4, #4]
 8012e48:	f7ed f982 	bl	8000150 <__udivsi3>
 8012e4c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e4e:	2000      	movs	r0, #0
        break;
 8012e50:	e01c      	b.n	8012e8c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e52:	22c0      	movs	r2, #192	; 0xc0
 8012e54:	0312      	lsls	r2, r2, #12
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d1c4      	bne.n	8012de4 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e5a:	2380      	movs	r3, #128	; 0x80
 8012e5c:	021b      	lsls	r3, r3, #8
 8012e5e:	69e2      	ldr	r2, [r4, #28]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d1cf      	bne.n	8012e04 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012e64:	6861      	ldr	r1, [r4, #4]
 8012e66:	4833      	ldr	r0, [pc, #204]	; (8012f34 <UART_SetConfig+0x234>)
 8012e68:	f7ed f972 	bl	8000150 <__udivsi3>
 8012e6c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e6e:	2000      	movs	r0, #0
        break;
 8012e70:	e00c      	b.n	8012e8c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e72:	2380      	movs	r3, #128	; 0x80
 8012e74:	021b      	lsls	r3, r3, #8
 8012e76:	69e2      	ldr	r2, [r4, #28]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d11c      	bne.n	8012eb6 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012e7c:	f7fe ff04 	bl	8011c88 <HAL_RCC_GetPCLK1Freq>
 8012e80:	0040      	lsls	r0, r0, #1
 8012e82:	6861      	ldr	r1, [r4, #4]
 8012e84:	f7ed f964 	bl	8000150 <__udivsi3>
 8012e88:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e8a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012e8c:	220f      	movs	r2, #15
 8012e8e:	0019      	movs	r1, r3
 8012e90:	4391      	bics	r1, r2
 8012e92:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8012e94:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012e96:	071b      	lsls	r3, r3, #28
 8012e98:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8012e9a:	4313      	orrs	r3, r2
 8012e9c:	60cb      	str	r3, [r1, #12]
}
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8012ea0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	e7f2      	b.n	8012e8c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ea6:	2001      	movs	r0, #1
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	e7ef      	b.n	8012e8c <UART_SetConfig+0x18c>
 8012eac:	2380      	movs	r3, #128	; 0x80
 8012eae:	021b      	lsls	r3, r3, #8
 8012eb0:	69e2      	ldr	r2, [r4, #28]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d0e2      	beq.n	8012e7c <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012eb6:	f7fe fee7 	bl	8011c88 <HAL_RCC_GetPCLK1Freq>
 8012eba:	6825      	ldr	r5, [r4, #0]
 8012ebc:	6861      	ldr	r1, [r4, #4]
 8012ebe:	f7ed f947 	bl	8000150 <__udivsi3>
 8012ec2:	0400      	lsls	r0, r0, #16
 8012ec4:	0c00      	lsrs	r0, r0, #16
 8012ec6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ec8:	2000      	movs	r0, #0
  return ret;
 8012eca:	e7e8      	b.n	8012e9e <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ecc:	2380      	movs	r3, #128	; 0x80
 8012ece:	021b      	lsls	r3, r3, #8
 8012ed0:	69e2      	ldr	r2, [r4, #28]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d10c      	bne.n	8012ef0 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012ed6:	6861      	ldr	r1, [r4, #4]
 8012ed8:	2080      	movs	r0, #128	; 0x80
 8012eda:	0240      	lsls	r0, r0, #9
 8012edc:	f7ed f938 	bl	8000150 <__udivsi3>
 8012ee0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ee2:	2000      	movs	r0, #0
        break;
 8012ee4:	e7d2      	b.n	8012e8c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012ee6:	2380      	movs	r3, #128	; 0x80
 8012ee8:	021b      	lsls	r3, r3, #8
 8012eea:	69e2      	ldr	r2, [r4, #28]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d0f2      	beq.n	8012ed6 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012ef0:	6861      	ldr	r1, [r4, #4]
 8012ef2:	2080      	movs	r0, #128	; 0x80
 8012ef4:	0200      	lsls	r0, r0, #8
 8012ef6:	f7ed f92b 	bl	8000150 <__udivsi3>
 8012efa:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012efc:	2000      	movs	r0, #0
        break;
 8012efe:	e7ce      	b.n	8012e9e <UART_SetConfig+0x19e>
 8012f00:	efff69f3 	.word	0xefff69f3
 8012f04:	ffffcfff 	.word	0xffffcfff
 8012f08:	fffff4ff 	.word	0xfffff4ff
 8012f0c:	40013800 	.word	0x40013800
 8012f10:	40004400 	.word	0x40004400
 8012f14:	40004800 	.word	0x40004800
 8012f18:	40004c00 	.word	0x40004c00
 8012f1c:	40005000 	.word	0x40005000
 8012f20:	40011400 	.word	0x40011400
 8012f24:	40011800 	.word	0x40011800
 8012f28:	40011c00 	.word	0x40011c00
 8012f2c:	40021000 	.word	0x40021000
 8012f30:	007a1200 	.word	0x007a1200
 8012f34:	00f42400 	.word	0x00f42400

08012f38 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012f38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f3a:	07db      	lsls	r3, r3, #31
 8012f3c:	d506      	bpl.n	8012f4c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012f3e:	6802      	ldr	r2, [r0, #0]
 8012f40:	6853      	ldr	r3, [r2, #4]
 8012f42:	492c      	ldr	r1, [pc, #176]	; (8012ff4 <UART_AdvFeatureConfig+0xbc>)
 8012f44:	400b      	ands	r3, r1
 8012f46:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012f48:	430b      	orrs	r3, r1
 8012f4a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f4e:	079b      	lsls	r3, r3, #30
 8012f50:	d506      	bpl.n	8012f60 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012f52:	6802      	ldr	r2, [r0, #0]
 8012f54:	6853      	ldr	r3, [r2, #4]
 8012f56:	4928      	ldr	r1, [pc, #160]	; (8012ff8 <UART_AdvFeatureConfig+0xc0>)
 8012f58:	400b      	ands	r3, r1
 8012f5a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012f5c:	430b      	orrs	r3, r1
 8012f5e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012f60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f62:	075b      	lsls	r3, r3, #29
 8012f64:	d506      	bpl.n	8012f74 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012f66:	6802      	ldr	r2, [r0, #0]
 8012f68:	6853      	ldr	r3, [r2, #4]
 8012f6a:	4924      	ldr	r1, [pc, #144]	; (8012ffc <UART_AdvFeatureConfig+0xc4>)
 8012f6c:	400b      	ands	r3, r1
 8012f6e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012f70:	430b      	orrs	r3, r1
 8012f72:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f76:	071b      	lsls	r3, r3, #28
 8012f78:	d506      	bpl.n	8012f88 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012f7a:	6802      	ldr	r2, [r0, #0]
 8012f7c:	6853      	ldr	r3, [r2, #4]
 8012f7e:	4920      	ldr	r1, [pc, #128]	; (8013000 <UART_AdvFeatureConfig+0xc8>)
 8012f80:	400b      	ands	r3, r1
 8012f82:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012f84:	430b      	orrs	r3, r1
 8012f86:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012f88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f8a:	06db      	lsls	r3, r3, #27
 8012f8c:	d506      	bpl.n	8012f9c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012f8e:	6802      	ldr	r2, [r0, #0]
 8012f90:	6893      	ldr	r3, [r2, #8]
 8012f92:	491c      	ldr	r1, [pc, #112]	; (8013004 <UART_AdvFeatureConfig+0xcc>)
 8012f94:	400b      	ands	r3, r1
 8012f96:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012f98:	430b      	orrs	r3, r1
 8012f9a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f9e:	069b      	lsls	r3, r3, #26
 8012fa0:	d506      	bpl.n	8012fb0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012fa2:	6802      	ldr	r2, [r0, #0]
 8012fa4:	6893      	ldr	r3, [r2, #8]
 8012fa6:	4918      	ldr	r1, [pc, #96]	; (8013008 <UART_AdvFeatureConfig+0xd0>)
 8012fa8:	400b      	ands	r3, r1
 8012faa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012fac:	430b      	orrs	r3, r1
 8012fae:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012fb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012fb2:	065b      	lsls	r3, r3, #25
 8012fb4:	d50b      	bpl.n	8012fce <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012fb6:	6802      	ldr	r2, [r0, #0]
 8012fb8:	6853      	ldr	r3, [r2, #4]
 8012fba:	4914      	ldr	r1, [pc, #80]	; (801300c <UART_AdvFeatureConfig+0xd4>)
 8012fbc:	400b      	ands	r3, r1
 8012fbe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012fc0:	430b      	orrs	r3, r1
 8012fc2:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012fc4:	2380      	movs	r3, #128	; 0x80
 8012fc6:	035b      	lsls	r3, r3, #13
 8012fc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d00a      	beq.n	8012fe4 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012fce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012fd0:	061b      	lsls	r3, r3, #24
 8012fd2:	d506      	bpl.n	8012fe2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012fd4:	6802      	ldr	r2, [r0, #0]
 8012fd6:	6853      	ldr	r3, [r2, #4]
 8012fd8:	490d      	ldr	r1, [pc, #52]	; (8013010 <UART_AdvFeatureConfig+0xd8>)
 8012fda:	400b      	ands	r3, r1
 8012fdc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012fde:	430b      	orrs	r3, r1
 8012fe0:	6053      	str	r3, [r2, #4]
}
 8012fe2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012fe4:	6802      	ldr	r2, [r0, #0]
 8012fe6:	6853      	ldr	r3, [r2, #4]
 8012fe8:	490a      	ldr	r1, [pc, #40]	; (8013014 <UART_AdvFeatureConfig+0xdc>)
 8012fea:	400b      	ands	r3, r1
 8012fec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012fee:	430b      	orrs	r3, r1
 8012ff0:	6053      	str	r3, [r2, #4]
 8012ff2:	e7ec      	b.n	8012fce <UART_AdvFeatureConfig+0x96>
 8012ff4:	fffdffff 	.word	0xfffdffff
 8012ff8:	fffeffff 	.word	0xfffeffff
 8012ffc:	fffbffff 	.word	0xfffbffff
 8013000:	ffff7fff 	.word	0xffff7fff
 8013004:	ffffefff 	.word	0xffffefff
 8013008:	ffffdfff 	.word	0xffffdfff
 801300c:	ffefffff 	.word	0xffefffff
 8013010:	fff7ffff 	.word	0xfff7ffff
 8013014:	ff9fffff 	.word	0xff9fffff

08013018 <UART_WaitOnFlagUntilTimeout>:
{
 8013018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801301a:	46c6      	mov	lr, r8
 801301c:	b500      	push	{lr}
 801301e:	0007      	movs	r7, r0
 8013020:	000c      	movs	r4, r1
 8013022:	0016      	movs	r6, r2
 8013024:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013026:	f7fc fd97 	bl	800fb58 <HAL_GetTick>
 801302a:	4680      	mov	r8, r0
  if(Status == RESET)
 801302c:	2e00      	cmp	r6, #0
 801302e:	d029      	beq.n	8013084 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	69da      	ldr	r2, [r3, #28]
 8013034:	4022      	ands	r2, r4
 8013036:	42a2      	cmp	r2, r4
 8013038:	d152      	bne.n	80130e0 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 801303a:	1c6a      	adds	r2, r5, #1
 801303c:	d0f9      	beq.n	8013032 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801303e:	2d00      	cmp	r5, #0
 8013040:	d005      	beq.n	801304e <UART_WaitOnFlagUntilTimeout+0x36>
 8013042:	f7fc fd89 	bl	800fb58 <HAL_GetTick>
 8013046:	4643      	mov	r3, r8
 8013048:	1ac0      	subs	r0, r0, r3
 801304a:	42a8      	cmp	r0, r5
 801304c:	d9f0      	bls.n	8013030 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801304e:	683a      	ldr	r2, [r7, #0]
 8013050:	6813      	ldr	r3, [r2, #0]
 8013052:	2180      	movs	r1, #128	; 0x80
 8013054:	438b      	bics	r3, r1
 8013056:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013058:	683a      	ldr	r2, [r7, #0]
 801305a:	6813      	ldr	r3, [r2, #0]
 801305c:	3960      	subs	r1, #96	; 0x60
 801305e:	438b      	bics	r3, r1
 8013060:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013062:	683a      	ldr	r2, [r7, #0]
 8013064:	6813      	ldr	r3, [r2, #0]
 8013066:	491f      	ldr	r1, [pc, #124]	; (80130e4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013068:	400b      	ands	r3, r1
 801306a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801306c:	6839      	ldr	r1, [r7, #0]
 801306e:	688b      	ldr	r3, [r1, #8]
 8013070:	2201      	movs	r2, #1
 8013072:	4393      	bics	r3, r2
 8013074:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013076:	2369      	movs	r3, #105	; 0x69
 8013078:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801307a:	3b01      	subs	r3, #1
 801307c:	2200      	movs	r2, #0
 801307e:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013080:	2003      	movs	r0, #3
 8013082:	e02a      	b.n	80130da <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	69d9      	ldr	r1, [r3, #28]
 8013088:	4021      	ands	r1, r4
 801308a:	42a1      	cmp	r1, r4
 801308c:	d024      	beq.n	80130d8 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801308e:	1c6a      	adds	r2, r5, #1
 8013090:	d0f9      	beq.n	8013086 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013092:	2d00      	cmp	r5, #0
 8013094:	d005      	beq.n	80130a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8013096:	f7fc fd5f 	bl	800fb58 <HAL_GetTick>
 801309a:	4643      	mov	r3, r8
 801309c:	1ac0      	subs	r0, r0, r3
 801309e:	42a8      	cmp	r0, r5
 80130a0:	d9f0      	bls.n	8013084 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	6813      	ldr	r3, [r2, #0]
 80130a6:	2180      	movs	r1, #128	; 0x80
 80130a8:	438b      	bics	r3, r1
 80130aa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	6813      	ldr	r3, [r2, #0]
 80130b0:	3960      	subs	r1, #96	; 0x60
 80130b2:	438b      	bics	r3, r1
 80130b4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	6813      	ldr	r3, [r2, #0]
 80130ba:	490a      	ldr	r1, [pc, #40]	; (80130e4 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80130bc:	400b      	ands	r3, r1
 80130be:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80130c0:	6839      	ldr	r1, [r7, #0]
 80130c2:	688b      	ldr	r3, [r1, #8]
 80130c4:	2201      	movs	r2, #1
 80130c6:	4393      	bics	r3, r2
 80130c8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80130ca:	2369      	movs	r3, #105	; 0x69
 80130cc:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80130ce:	3b01      	subs	r3, #1
 80130d0:	2200      	movs	r2, #0
 80130d2:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80130d4:	2003      	movs	r0, #3
 80130d6:	e000      	b.n	80130da <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80130d8:	0030      	movs	r0, r6
}
 80130da:	bc80      	pop	{r7}
 80130dc:	46b8      	mov	r8, r7
 80130de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80130e0:	2000      	movs	r0, #0
 80130e2:	e7fa      	b.n	80130da <UART_WaitOnFlagUntilTimeout+0xc2>
 80130e4:	fffffeff 	.word	0xfffffeff

080130e8 <HAL_UART_Transmit>:
{
 80130e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ea:	46c6      	mov	lr, r8
 80130ec:	b500      	push	{lr}
 80130ee:	0004      	movs	r4, r0
 80130f0:	000d      	movs	r5, r1
 80130f2:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80130f4:	2369      	movs	r3, #105	; 0x69
 80130f6:	5cc3      	ldrb	r3, [r0, r3]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d003      	beq.n	8013104 <HAL_UART_Transmit+0x1c>
 80130fc:	2369      	movs	r3, #105	; 0x69
 80130fe:	5cc3      	ldrb	r3, [r0, r3]
 8013100:	2b22      	cmp	r3, #34	; 0x22
 8013102:	d152      	bne.n	80131aa <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8013104:	2d00      	cmp	r5, #0
 8013106:	d054      	beq.n	80131b2 <HAL_UART_Transmit+0xca>
 8013108:	2a00      	cmp	r2, #0
 801310a:	d054      	beq.n	80131b6 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 801310c:	2368      	movs	r3, #104	; 0x68
 801310e:	5ce3      	ldrb	r3, [r4, r3]
 8013110:	2b01      	cmp	r3, #1
 8013112:	d052      	beq.n	80131ba <HAL_UART_Transmit+0xd2>
 8013114:	2368      	movs	r3, #104	; 0x68
 8013116:	2101      	movs	r1, #1
 8013118:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801311a:	2300      	movs	r3, #0
 801311c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801311e:	3369      	adds	r3, #105	; 0x69
 8013120:	5ce3      	ldrb	r3, [r4, r3]
 8013122:	2b22      	cmp	r3, #34	; 0x22
 8013124:	d009      	beq.n	801313a <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013126:	2369      	movs	r3, #105	; 0x69
 8013128:	2112      	movs	r1, #18
 801312a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801312c:	2350      	movs	r3, #80	; 0x50
 801312e:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013130:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013132:	2380      	movs	r3, #128	; 0x80
 8013134:	015b      	lsls	r3, r3, #5
 8013136:	4698      	mov	r8, r3
 8013138:	e00a      	b.n	8013150 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801313a:	3347      	adds	r3, #71	; 0x47
 801313c:	3131      	adds	r1, #49	; 0x31
 801313e:	54e1      	strb	r1, [r4, r3]
 8013140:	e7f4      	b.n	801312c <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013142:	782b      	ldrb	r3, [r5, #0]
 8013144:	6822      	ldr	r2, [r4, #0]
 8013146:	8513      	strh	r3, [r2, #40]	; 0x28
 8013148:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 801314a:	5ba2      	ldrh	r2, [r4, r6]
 801314c:	2a00      	cmp	r2, #0
 801314e:	d016      	beq.n	801317e <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013150:	3a01      	subs	r2, #1
 8013152:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013154:	003b      	movs	r3, r7
 8013156:	2200      	movs	r2, #0
 8013158:	2180      	movs	r1, #128	; 0x80
 801315a:	0020      	movs	r0, r4
 801315c:	f7ff ff5c 	bl	8013018 <UART_WaitOnFlagUntilTimeout>
 8013160:	2800      	cmp	r0, #0
 8013162:	d12c      	bne.n	80131be <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013164:	68a3      	ldr	r3, [r4, #8]
 8013166:	4543      	cmp	r3, r8
 8013168:	d1eb      	bne.n	8013142 <HAL_UART_Transmit+0x5a>
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d1e8      	bne.n	8013142 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013170:	882b      	ldrh	r3, [r5, #0]
 8013172:	05db      	lsls	r3, r3, #23
 8013174:	0ddb      	lsrs	r3, r3, #23
 8013176:	6822      	ldr	r2, [r4, #0]
 8013178:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801317a:	3502      	adds	r5, #2
 801317c:	e7e5      	b.n	801314a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801317e:	003b      	movs	r3, r7
 8013180:	2140      	movs	r1, #64	; 0x40
 8013182:	0020      	movs	r0, r4
 8013184:	f7ff ff48 	bl	8013018 <UART_WaitOnFlagUntilTimeout>
 8013188:	2800      	cmp	r0, #0
 801318a:	d11a      	bne.n	80131c2 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801318c:	2369      	movs	r3, #105	; 0x69
 801318e:	5ce3      	ldrb	r3, [r4, r3]
 8013190:	2b32      	cmp	r3, #50	; 0x32
 8013192:	d006      	beq.n	80131a2 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013194:	2369      	movs	r3, #105	; 0x69
 8013196:	2201      	movs	r2, #1
 8013198:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801319a:	2368      	movs	r3, #104	; 0x68
 801319c:	2200      	movs	r2, #0
 801319e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80131a0:	e004      	b.n	80131ac <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80131a2:	3337      	adds	r3, #55	; 0x37
 80131a4:	2222      	movs	r2, #34	; 0x22
 80131a6:	54e2      	strb	r2, [r4, r3]
 80131a8:	e7f7      	b.n	801319a <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 80131aa:	2002      	movs	r0, #2
}
 80131ac:	bc80      	pop	{r7}
 80131ae:	46b8      	mov	r8, r7
 80131b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80131b2:	2001      	movs	r0, #1
 80131b4:	e7fa      	b.n	80131ac <HAL_UART_Transmit+0xc4>
 80131b6:	2001      	movs	r0, #1
 80131b8:	e7f8      	b.n	80131ac <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80131ba:	2002      	movs	r0, #2
 80131bc:	e7f6      	b.n	80131ac <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80131be:	2003      	movs	r0, #3
 80131c0:	e7f4      	b.n	80131ac <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80131c2:	2003      	movs	r0, #3
 80131c4:	e7f2      	b.n	80131ac <HAL_UART_Transmit+0xc4>
	...

080131c8 <UART_CheckIdleState>:
{
 80131c8:	b510      	push	{r4, lr}
 80131ca:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80131d0:	6803      	ldr	r3, [r0, #0]
 80131d2:	4a18      	ldr	r2, [pc, #96]	; (8013234 <UART_CheckIdleState+0x6c>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d005      	beq.n	80131e4 <UART_CheckIdleState+0x1c>
 80131d8:	4a17      	ldr	r2, [pc, #92]	; (8013238 <UART_CheckIdleState+0x70>)
 80131da:	4293      	cmp	r3, r2
 80131dc:	d002      	beq.n	80131e4 <UART_CheckIdleState+0x1c>
 80131de:	4a17      	ldr	r2, [pc, #92]	; (801323c <UART_CheckIdleState+0x74>)
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d106      	bne.n	80131f2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	071b      	lsls	r3, r3, #28
 80131e8:	d40b      	bmi.n	8013202 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	075b      	lsls	r3, r3, #29
 80131f0:	d413      	bmi.n	801321a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80131f2:	2369      	movs	r3, #105	; 0x69
 80131f4:	2201      	movs	r2, #1
 80131f6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80131f8:	3b01      	subs	r3, #1
 80131fa:	2200      	movs	r2, #0
 80131fc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80131fe:	2000      	movs	r0, #0
}
 8013200:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013202:	23fa      	movs	r3, #250	; 0xfa
 8013204:	2180      	movs	r1, #128	; 0x80
 8013206:	009b      	lsls	r3, r3, #2
 8013208:	2200      	movs	r2, #0
 801320a:	0389      	lsls	r1, r1, #14
 801320c:	0020      	movs	r0, r4
 801320e:	f7ff ff03 	bl	8013018 <UART_WaitOnFlagUntilTimeout>
 8013212:	2800      	cmp	r0, #0
 8013214:	d0e9      	beq.n	80131ea <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013216:	2003      	movs	r0, #3
 8013218:	e7f2      	b.n	8013200 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801321a:	23fa      	movs	r3, #250	; 0xfa
 801321c:	2180      	movs	r1, #128	; 0x80
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	2200      	movs	r2, #0
 8013222:	03c9      	lsls	r1, r1, #15
 8013224:	0020      	movs	r0, r4
 8013226:	f7ff fef7 	bl	8013018 <UART_WaitOnFlagUntilTimeout>
 801322a:	2800      	cmp	r0, #0
 801322c:	d0e1      	beq.n	80131f2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 801322e:	2003      	movs	r0, #3
 8013230:	e7e6      	b.n	8013200 <UART_CheckIdleState+0x38>
 8013232:	46c0      	nop			; (mov r8, r8)
 8013234:	40013800 	.word	0x40013800
 8013238:	40004400 	.word	0x40004400
 801323c:	40004800 	.word	0x40004800

08013240 <HAL_UART_Init>:
{
 8013240:	b510      	push	{r4, lr}
 8013242:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013244:	d030      	beq.n	80132a8 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013246:	2369      	movs	r3, #105	; 0x69
 8013248:	5cc3      	ldrb	r3, [r0, r3]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d022      	beq.n	8013294 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801324e:	2369      	movs	r3, #105	; 0x69
 8013250:	2202      	movs	r2, #2
 8013252:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013254:	6822      	ldr	r2, [r4, #0]
 8013256:	6813      	ldr	r3, [r2, #0]
 8013258:	2101      	movs	r1, #1
 801325a:	438b      	bics	r3, r1
 801325c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801325e:	0020      	movs	r0, r4
 8013260:	f7ff fd4e 	bl	8012d00 <UART_SetConfig>
 8013264:	2801      	cmp	r0, #1
 8013266:	d014      	beq.n	8013292 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801326a:	2b00      	cmp	r3, #0
 801326c:	d118      	bne.n	80132a0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801326e:	6822      	ldr	r2, [r4, #0]
 8013270:	6853      	ldr	r3, [r2, #4]
 8013272:	490e      	ldr	r1, [pc, #56]	; (80132ac <HAL_UART_Init+0x6c>)
 8013274:	400b      	ands	r3, r1
 8013276:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013278:	6822      	ldr	r2, [r4, #0]
 801327a:	6893      	ldr	r3, [r2, #8]
 801327c:	212a      	movs	r1, #42	; 0x2a
 801327e:	438b      	bics	r3, r1
 8013280:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013282:	6822      	ldr	r2, [r4, #0]
 8013284:	6813      	ldr	r3, [r2, #0]
 8013286:	3929      	subs	r1, #41	; 0x29
 8013288:	430b      	orrs	r3, r1
 801328a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801328c:	0020      	movs	r0, r4
 801328e:	f7ff ff9b 	bl	80131c8 <UART_CheckIdleState>
}
 8013292:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013294:	3368      	adds	r3, #104	; 0x68
 8013296:	2200      	movs	r2, #0
 8013298:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801329a:	f7fa f981 	bl	800d5a0 <HAL_UART_MspInit>
 801329e:	e7d6      	b.n	801324e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80132a0:	0020      	movs	r0, r4
 80132a2:	f7ff fe49 	bl	8012f38 <UART_AdvFeatureConfig>
 80132a6:	e7e2      	b.n	801326e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80132a8:	2001      	movs	r0, #1
 80132aa:	e7f2      	b.n	8013292 <HAL_UART_Init+0x52>
 80132ac:	ffffb7ff 	.word	0xffffb7ff

080132b0 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80132b0:	2369      	movs	r3, #105	; 0x69
 80132b2:	5cc3      	ldrb	r3, [r0, r3]
 80132b4:	2b12      	cmp	r3, #18
 80132b6:	d003      	beq.n	80132c0 <UART_Transmit_IT+0x10>
 80132b8:	2369      	movs	r3, #105	; 0x69
 80132ba:	5cc3      	ldrb	r3, [r0, r3]
 80132bc:	2b32      	cmp	r3, #50	; 0x32
 80132be:	d12d      	bne.n	801331c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 80132c0:	2352      	movs	r3, #82	; 0x52
 80132c2:	5ac3      	ldrh	r3, [r0, r3]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d10b      	bne.n	80132e0 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80132c8:	6802      	ldr	r2, [r0, #0]
 80132ca:	6813      	ldr	r3, [r2, #0]
 80132cc:	2180      	movs	r1, #128	; 0x80
 80132ce:	438b      	bics	r3, r1
 80132d0:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80132d2:	6802      	ldr	r2, [r0, #0]
 80132d4:	6813      	ldr	r3, [r2, #0]
 80132d6:	3940      	subs	r1, #64	; 0x40
 80132d8:	430b      	orrs	r3, r1
 80132da:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 80132dc:	2000      	movs	r0, #0
 80132de:	e00f      	b.n	8013300 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80132e0:	2380      	movs	r3, #128	; 0x80
 80132e2:	015b      	lsls	r3, r3, #5
 80132e4:	6882      	ldr	r2, [r0, #8]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d00b      	beq.n	8013302 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80132ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80132ec:	1c5a      	adds	r2, r3, #1
 80132ee:	64c2      	str	r2, [r0, #76]	; 0x4c
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	6802      	ldr	r2, [r0, #0]
 80132f4:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 80132f6:	2252      	movs	r2, #82	; 0x52
 80132f8:	5a83      	ldrh	r3, [r0, r2]
 80132fa:	3b01      	subs	r3, #1
 80132fc:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80132fe:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013300:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013302:	6903      	ldr	r3, [r0, #16]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1f0      	bne.n	80132ea <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013308:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	05db      	lsls	r3, r3, #23
 801330e:	0ddb      	lsrs	r3, r3, #23
 8013310:	6802      	ldr	r2, [r0, #0]
 8013312:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013314:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013316:	3302      	adds	r3, #2
 8013318:	64c3      	str	r3, [r0, #76]	; 0x4c
 801331a:	e7ec      	b.n	80132f6 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 801331c:	2002      	movs	r0, #2
 801331e:	e7ef      	b.n	8013300 <UART_Transmit_IT+0x50>

08013320 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013320:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013322:	6802      	ldr	r2, [r0, #0]
 8013324:	6813      	ldr	r3, [r2, #0]
 8013326:	2140      	movs	r1, #64	; 0x40
 8013328:	438b      	bics	r3, r1
 801332a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801332c:	2369      	movs	r3, #105	; 0x69
 801332e:	5cc3      	ldrb	r3, [r0, r3]
 8013330:	2b32      	cmp	r3, #50	; 0x32
 8013332:	d00a      	beq.n	801334a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013334:	6801      	ldr	r1, [r0, #0]
 8013336:	688b      	ldr	r3, [r1, #8]
 8013338:	2201      	movs	r2, #1
 801333a:	4393      	bics	r3, r2
 801333c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 801333e:	2369      	movs	r3, #105	; 0x69
 8013340:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013342:	f7f9 fe69 	bl	800d018 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013346:	2000      	movs	r0, #0
 8013348:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801334a:	3337      	adds	r3, #55	; 0x37
 801334c:	2222      	movs	r2, #34	; 0x22
 801334e:	54c2      	strb	r2, [r0, r3]
 8013350:	e7f7      	b.n	8013342 <UART_EndTransmit_IT+0x22>
	...

08013354 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013354:	b510      	push	{r4, lr}
 8013356:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013358:	2269      	movs	r2, #105	; 0x69
 801335a:	5c82      	ldrb	r2, [r0, r2]
 801335c:	2a22      	cmp	r2, #34	; 0x22
 801335e:	d003      	beq.n	8013368 <UART_Receive_IT+0x14>
 8013360:	2269      	movs	r2, #105	; 0x69
 8013362:	5c82      	ldrb	r2, [r0, r2]
 8013364:	2a32      	cmp	r2, #50	; 0x32
 8013366:	d13f      	bne.n	80133e8 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 8013368:	225c      	movs	r2, #92	; 0x5c
 801336a:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801336c:	2180      	movs	r1, #128	; 0x80
 801336e:	0149      	lsls	r1, r1, #5
 8013370:	689a      	ldr	r2, [r3, #8]
 8013372:	428a      	cmp	r2, r1
 8013374:	d028      	beq.n	80133c8 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 801337a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801337c:	1c4c      	adds	r4, r1, #1
 801337e:	655c      	str	r4, [r3, #84]	; 0x54
 8013380:	4002      	ands	r2, r0
 8013382:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013384:	215a      	movs	r1, #90	; 0x5a
 8013386:	5a5a      	ldrh	r2, [r3, r1]
 8013388:	3a01      	subs	r2, #1
 801338a:	b292      	uxth	r2, r2
 801338c:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 801338e:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8013390:	2a00      	cmp	r2, #0
 8013392:	d118      	bne.n	80133c6 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013394:	6819      	ldr	r1, [r3, #0]
 8013396:	680a      	ldr	r2, [r1, #0]
 8013398:	3020      	adds	r0, #32
 801339a:	4382      	bics	r2, r0
 801339c:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801339e:	2269      	movs	r2, #105	; 0x69
 80133a0:	5c9a      	ldrb	r2, [r3, r2]
 80133a2:	2a32      	cmp	r2, #50	; 0x32
 80133a4:	d01c      	beq.n	80133e0 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80133a6:	6819      	ldr	r1, [r3, #0]
 80133a8:	680a      	ldr	r2, [r1, #0]
 80133aa:	4810      	ldr	r0, [pc, #64]	; (80133ec <UART_Receive_IT+0x98>)
 80133ac:	4002      	ands	r2, r0
 80133ae:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80133b0:	6818      	ldr	r0, [r3, #0]
 80133b2:	6882      	ldr	r2, [r0, #8]
 80133b4:	2101      	movs	r1, #1
 80133b6:	438a      	bics	r2, r1
 80133b8:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 80133ba:	2269      	movs	r2, #105	; 0x69
 80133bc:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 80133be:	0018      	movs	r0, r3
 80133c0:	f7f9 fe68 	bl	800d094 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80133c4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80133c6:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133c8:	691a      	ldr	r2, [r3, #16]
 80133ca:	2a00      	cmp	r2, #0
 80133cc:	d1d3      	bne.n	8013376 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80133d2:	4002      	ands	r2, r0
 80133d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80133d6:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 80133d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133da:	3202      	adds	r2, #2
 80133dc:	655a      	str	r2, [r3, #84]	; 0x54
 80133de:	e7d1      	b.n	8013384 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80133e0:	3237      	adds	r2, #55	; 0x37
 80133e2:	2112      	movs	r1, #18
 80133e4:	5499      	strb	r1, [r3, r2]
 80133e6:	e7ea      	b.n	80133be <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 80133e8:	2002      	movs	r0, #2
 80133ea:	e7ec      	b.n	80133c6 <UART_Receive_IT+0x72>
 80133ec:	fffffeff 	.word	0xfffffeff

080133f0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80133f0:	4770      	bx	lr

080133f2 <HAL_UART_IRQHandler>:
{
 80133f2:	b510      	push	{r4, lr}
 80133f4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80133f6:	6803      	ldr	r3, [r0, #0]
 80133f8:	69da      	ldr	r2, [r3, #28]
 80133fa:	07d2      	lsls	r2, r2, #31
 80133fc:	d509      	bpl.n	8013412 <HAL_UART_IRQHandler+0x20>
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	05d2      	lsls	r2, r2, #23
 8013402:	d506      	bpl.n	8013412 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013404:	2201      	movs	r2, #1
 8013406:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013408:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801340a:	4313      	orrs	r3, r2
 801340c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801340e:	2369      	movs	r3, #105	; 0x69
 8013410:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	69da      	ldr	r2, [r3, #28]
 8013416:	0792      	lsls	r2, r2, #30
 8013418:	d50b      	bpl.n	8013432 <HAL_UART_IRQHandler+0x40>
 801341a:	689a      	ldr	r2, [r3, #8]
 801341c:	07d2      	lsls	r2, r2, #31
 801341e:	d508      	bpl.n	8013432 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013420:	2202      	movs	r2, #2
 8013422:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013424:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013426:	3202      	adds	r2, #2
 8013428:	4313      	orrs	r3, r2
 801342a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801342c:	2369      	movs	r3, #105	; 0x69
 801342e:	3a03      	subs	r2, #3
 8013430:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	69da      	ldr	r2, [r3, #28]
 8013436:	0752      	lsls	r2, r2, #29
 8013438:	d50b      	bpl.n	8013452 <HAL_UART_IRQHandler+0x60>
 801343a:	689a      	ldr	r2, [r3, #8]
 801343c:	07d2      	lsls	r2, r2, #31
 801343e:	d508      	bpl.n	8013452 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013440:	2204      	movs	r2, #4
 8013442:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013444:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013446:	3a02      	subs	r2, #2
 8013448:	4313      	orrs	r3, r2
 801344a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801344c:	2369      	movs	r3, #105	; 0x69
 801344e:	3a01      	subs	r2, #1
 8013450:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	69da      	ldr	r2, [r3, #28]
 8013456:	0712      	lsls	r2, r2, #28
 8013458:	d50a      	bpl.n	8013470 <HAL_UART_IRQHandler+0x7e>
 801345a:	689a      	ldr	r2, [r3, #8]
 801345c:	07d2      	lsls	r2, r2, #31
 801345e:	d507      	bpl.n	8013470 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013460:	2208      	movs	r2, #8
 8013462:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013464:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013466:	4313      	orrs	r3, r2
 8013468:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801346a:	2369      	movs	r3, #105	; 0x69
 801346c:	3a07      	subs	r2, #7
 801346e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013470:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013472:	2b00      	cmp	r3, #0
 8013474:	d11c      	bne.n	80134b0 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	69da      	ldr	r2, [r3, #28]
 801347a:	02d2      	lsls	r2, r2, #11
 801347c:	d502      	bpl.n	8013484 <HAL_UART_IRQHandler+0x92>
 801347e:	689a      	ldr	r2, [r3, #8]
 8013480:	0252      	lsls	r2, r2, #9
 8013482:	d419      	bmi.n	80134b8 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013484:	6823      	ldr	r3, [r4, #0]
 8013486:	69da      	ldr	r2, [r3, #28]
 8013488:	0692      	lsls	r2, r2, #26
 801348a:	d502      	bpl.n	8013492 <HAL_UART_IRQHandler+0xa0>
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	069b      	lsls	r3, r3, #26
 8013490:	d41c      	bmi.n	80134cc <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013492:	6823      	ldr	r3, [r4, #0]
 8013494:	69da      	ldr	r2, [r3, #28]
 8013496:	0612      	lsls	r2, r2, #24
 8013498:	d502      	bpl.n	80134a0 <HAL_UART_IRQHandler+0xae>
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	061b      	lsls	r3, r3, #24
 801349e:	d41e      	bmi.n	80134de <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	69da      	ldr	r2, [r3, #28]
 80134a4:	0652      	lsls	r2, r2, #25
 80134a6:	d502      	bpl.n	80134ae <HAL_UART_IRQHandler+0xbc>
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	065b      	lsls	r3, r3, #25
 80134ac:	d41b      	bmi.n	80134e6 <HAL_UART_IRQHandler+0xf4>
}
 80134ae:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80134b0:	0020      	movs	r0, r4
 80134b2:	f7f9 fdc9 	bl	800d048 <HAL_UART_ErrorCallback>
 80134b6:	e7de      	b.n	8013476 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80134b8:	2280      	movs	r2, #128	; 0x80
 80134ba:	0352      	lsls	r2, r2, #13
 80134bc:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80134be:	2369      	movs	r3, #105	; 0x69
 80134c0:	2201      	movs	r2, #1
 80134c2:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80134c4:	0020      	movs	r0, r4
 80134c6:	f7ff ff93 	bl	80133f0 <HAL_UARTEx_WakeupCallback>
 80134ca:	e7db      	b.n	8013484 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80134cc:	0020      	movs	r0, r4
 80134ce:	f7ff ff41 	bl	8013354 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80134d2:	6822      	ldr	r2, [r4, #0]
 80134d4:	6993      	ldr	r3, [r2, #24]
 80134d6:	2108      	movs	r1, #8
 80134d8:	430b      	orrs	r3, r1
 80134da:	6193      	str	r3, [r2, #24]
 80134dc:	e7d9      	b.n	8013492 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80134de:	0020      	movs	r0, r4
 80134e0:	f7ff fee6 	bl	80132b0 <UART_Transmit_IT>
 80134e4:	e7dc      	b.n	80134a0 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80134e6:	0020      	movs	r0, r4
 80134e8:	f7ff ff1a 	bl	8013320 <UART_EndTransmit_IT>
}
 80134ec:	e7df      	b.n	80134ae <HAL_UART_IRQHandler+0xbc>

080134ee <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 80134ee:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80134f0:	f7fc fb1a 	bl	800fb28 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80134f4:	f7f7 fe1c 	bl	800b130 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
  BOS_Init();
 80134f8:	f7f1 f9f2 	bl	80048e0 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80134fc:	f7f4 fdf4 	bl	80080e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013500:	f7fa faac 	bl	800da5c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  while (1)
 8013504:	e7fe      	b.n	8013504 <main+0x16>

08013506 <UserTask>:
void UserTask(void *argument)
{


  /* Infinite loop */
  for(;;)
 8013506:	e7fe      	b.n	8013506 <UserTask>

08013508 <atof>:
 8013508:	b510      	push	{r4, lr}
 801350a:	2100      	movs	r1, #0
 801350c:	f001 fb0a 	bl	8014b24 <strtod>
 8013510:	bd10      	pop	{r4, pc}

08013512 <atoi>:
 8013512:	b510      	push	{r4, lr}
 8013514:	220a      	movs	r2, #10
 8013516:	2100      	movs	r1, #0
 8013518:	f001 fbda 	bl	8014cd0 <strtol>
 801351c:	bd10      	pop	{r4, pc}

0801351e <atol>:
 801351e:	b510      	push	{r4, lr}
 8013520:	220a      	movs	r2, #10
 8013522:	2100      	movs	r1, #0
 8013524:	f001 fbd4 	bl	8014cd0 <strtol>
 8013528:	bd10      	pop	{r4, pc}
	...

0801352c <__libc_init_array>:
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	2600      	movs	r6, #0
 8013530:	4d0c      	ldr	r5, [pc, #48]	; (8013564 <__libc_init_array+0x38>)
 8013532:	4c0d      	ldr	r4, [pc, #52]	; (8013568 <__libc_init_array+0x3c>)
 8013534:	1b64      	subs	r4, r4, r5
 8013536:	10a4      	asrs	r4, r4, #2
 8013538:	42a6      	cmp	r6, r4
 801353a:	d109      	bne.n	8013550 <__libc_init_array+0x24>
 801353c:	2600      	movs	r6, #0
 801353e:	f006 fb3b 	bl	8019bb8 <_init>
 8013542:	4d0a      	ldr	r5, [pc, #40]	; (801356c <__libc_init_array+0x40>)
 8013544:	4c0a      	ldr	r4, [pc, #40]	; (8013570 <__libc_init_array+0x44>)
 8013546:	1b64      	subs	r4, r4, r5
 8013548:	10a4      	asrs	r4, r4, #2
 801354a:	42a6      	cmp	r6, r4
 801354c:	d105      	bne.n	801355a <__libc_init_array+0x2e>
 801354e:	bd70      	pop	{r4, r5, r6, pc}
 8013550:	00b3      	lsls	r3, r6, #2
 8013552:	58eb      	ldr	r3, [r5, r3]
 8013554:	4798      	blx	r3
 8013556:	3601      	adds	r6, #1
 8013558:	e7ee      	b.n	8013538 <__libc_init_array+0xc>
 801355a:	00b3      	lsls	r3, r6, #2
 801355c:	58eb      	ldr	r3, [r5, r3]
 801355e:	4798      	blx	r3
 8013560:	3601      	adds	r6, #1
 8013562:	e7f2      	b.n	801354a <__libc_init_array+0x1e>
 8013564:	0801cfc8 	.word	0x0801cfc8
 8013568:	0801cfc8 	.word	0x0801cfc8
 801356c:	0801cfc8 	.word	0x0801cfc8
 8013570:	0801cfd0 	.word	0x0801cfd0

08013574 <malloc>:
 8013574:	b510      	push	{r4, lr}
 8013576:	4b03      	ldr	r3, [pc, #12]	; (8013584 <malloc+0x10>)
 8013578:	0001      	movs	r1, r0
 801357a:	6818      	ldr	r0, [r3, #0]
 801357c:	f000 f80e 	bl	801359c <_malloc_r>
 8013580:	bd10      	pop	{r4, pc}
 8013582:	46c0      	nop			; (mov r8, r8)
 8013584:	200000ac 	.word	0x200000ac

08013588 <free>:
 8013588:	b510      	push	{r4, lr}
 801358a:	4b03      	ldr	r3, [pc, #12]	; (8013598 <free+0x10>)
 801358c:	0001      	movs	r1, r0
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	f003 fd2e 	bl	8016ff0 <_free_r>
 8013594:	bd10      	pop	{r4, pc}
 8013596:	46c0      	nop			; (mov r8, r8)
 8013598:	200000ac 	.word	0x200000ac

0801359c <_malloc_r>:
 801359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801359e:	000d      	movs	r5, r1
 80135a0:	b087      	sub	sp, #28
 80135a2:	350b      	adds	r5, #11
 80135a4:	9001      	str	r0, [sp, #4]
 80135a6:	2d16      	cmp	r5, #22
 80135a8:	d908      	bls.n	80135bc <_malloc_r+0x20>
 80135aa:	2207      	movs	r2, #7
 80135ac:	4395      	bics	r5, r2
 80135ae:	d506      	bpl.n	80135be <_malloc_r+0x22>
 80135b0:	230c      	movs	r3, #12
 80135b2:	9a01      	ldr	r2, [sp, #4]
 80135b4:	6013      	str	r3, [r2, #0]
 80135b6:	2000      	movs	r0, #0
 80135b8:	b007      	add	sp, #28
 80135ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135bc:	2510      	movs	r5, #16
 80135be:	42a9      	cmp	r1, r5
 80135c0:	d8f6      	bhi.n	80135b0 <_malloc_r+0x14>
 80135c2:	9801      	ldr	r0, [sp, #4]
 80135c4:	f000 fa1e 	bl	8013a04 <__malloc_lock>
 80135c8:	23fc      	movs	r3, #252	; 0xfc
 80135ca:	48bd      	ldr	r0, [pc, #756]	; (80138c0 <_malloc_r+0x324>)
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	429d      	cmp	r5, r3
 80135d0:	d21a      	bcs.n	8013608 <_malloc_r+0x6c>
 80135d2:	002a      	movs	r2, r5
 80135d4:	3208      	adds	r2, #8
 80135d6:	1882      	adds	r2, r0, r2
 80135d8:	0011      	movs	r1, r2
 80135da:	6854      	ldr	r4, [r2, #4]
 80135dc:	3908      	subs	r1, #8
 80135de:	08eb      	lsrs	r3, r5, #3
 80135e0:	428c      	cmp	r4, r1
 80135e2:	d103      	bne.n	80135ec <_malloc_r+0x50>
 80135e4:	68d4      	ldr	r4, [r2, #12]
 80135e6:	3302      	adds	r3, #2
 80135e8:	42a2      	cmp	r2, r4
 80135ea:	d023      	beq.n	8013634 <_malloc_r+0x98>
 80135ec:	2303      	movs	r3, #3
 80135ee:	6862      	ldr	r2, [r4, #4]
 80135f0:	68a1      	ldr	r1, [r4, #8]
 80135f2:	439a      	bics	r2, r3
 80135f4:	0013      	movs	r3, r2
 80135f6:	68e2      	ldr	r2, [r4, #12]
 80135f8:	18e3      	adds	r3, r4, r3
 80135fa:	60ca      	str	r2, [r1, #12]
 80135fc:	6091      	str	r1, [r2, #8]
 80135fe:	2201      	movs	r2, #1
 8013600:	6859      	ldr	r1, [r3, #4]
 8013602:	430a      	orrs	r2, r1
 8013604:	605a      	str	r2, [r3, #4]
 8013606:	e02b      	b.n	8013660 <_malloc_r+0xc4>
 8013608:	233f      	movs	r3, #63	; 0x3f
 801360a:	0a6a      	lsrs	r2, r5, #9
 801360c:	d003      	beq.n	8013616 <_malloc_r+0x7a>
 801360e:	2a04      	cmp	r2, #4
 8013610:	d82c      	bhi.n	801366c <_malloc_r+0xd0>
 8013612:	09ab      	lsrs	r3, r5, #6
 8013614:	3338      	adds	r3, #56	; 0x38
 8013616:	2203      	movs	r2, #3
 8013618:	4694      	mov	ip, r2
 801361a:	00d9      	lsls	r1, r3, #3
 801361c:	1809      	adds	r1, r1, r0
 801361e:	68cc      	ldr	r4, [r1, #12]
 8013620:	428c      	cmp	r4, r1
 8013622:	d006      	beq.n	8013632 <_malloc_r+0x96>
 8013624:	4666      	mov	r6, ip
 8013626:	6862      	ldr	r2, [r4, #4]
 8013628:	43b2      	bics	r2, r6
 801362a:	1b57      	subs	r7, r2, r5
 801362c:	2f0f      	cmp	r7, #15
 801362e:	dd35      	ble.n	801369c <_malloc_r+0x100>
 8013630:	3b01      	subs	r3, #1
 8013632:	3301      	adds	r3, #1
 8013634:	6904      	ldr	r4, [r0, #16]
 8013636:	49a3      	ldr	r1, [pc, #652]	; (80138c4 <_malloc_r+0x328>)
 8013638:	428c      	cmp	r4, r1
 801363a:	d056      	beq.n	80136ea <_malloc_r+0x14e>
 801363c:	2203      	movs	r2, #3
 801363e:	6866      	ldr	r6, [r4, #4]
 8013640:	4396      	bics	r6, r2
 8013642:	0032      	movs	r2, r6
 8013644:	1b76      	subs	r6, r6, r5
 8013646:	2e0f      	cmp	r6, #15
 8013648:	dd36      	ble.n	80136b8 <_malloc_r+0x11c>
 801364a:	2701      	movs	r7, #1
 801364c:	1963      	adds	r3, r4, r5
 801364e:	433d      	orrs	r5, r7
 8013650:	4337      	orrs	r7, r6
 8013652:	6065      	str	r5, [r4, #4]
 8013654:	6143      	str	r3, [r0, #20]
 8013656:	6103      	str	r3, [r0, #16]
 8013658:	60d9      	str	r1, [r3, #12]
 801365a:	6099      	str	r1, [r3, #8]
 801365c:	605f      	str	r7, [r3, #4]
 801365e:	50a6      	str	r6, [r4, r2]
 8013660:	9801      	ldr	r0, [sp, #4]
 8013662:	f000 f9d7 	bl	8013a14 <__malloc_unlock>
 8013666:	0020      	movs	r0, r4
 8013668:	3008      	adds	r0, #8
 801366a:	e7a5      	b.n	80135b8 <_malloc_r+0x1c>
 801366c:	2a14      	cmp	r2, #20
 801366e:	d802      	bhi.n	8013676 <_malloc_r+0xda>
 8013670:	0013      	movs	r3, r2
 8013672:	335b      	adds	r3, #91	; 0x5b
 8013674:	e7cf      	b.n	8013616 <_malloc_r+0x7a>
 8013676:	2a54      	cmp	r2, #84	; 0x54
 8013678:	d802      	bhi.n	8013680 <_malloc_r+0xe4>
 801367a:	0b2b      	lsrs	r3, r5, #12
 801367c:	336e      	adds	r3, #110	; 0x6e
 801367e:	e7ca      	b.n	8013616 <_malloc_r+0x7a>
 8013680:	23aa      	movs	r3, #170	; 0xaa
 8013682:	005b      	lsls	r3, r3, #1
 8013684:	429a      	cmp	r2, r3
 8013686:	d802      	bhi.n	801368e <_malloc_r+0xf2>
 8013688:	0beb      	lsrs	r3, r5, #15
 801368a:	3377      	adds	r3, #119	; 0x77
 801368c:	e7c3      	b.n	8013616 <_malloc_r+0x7a>
 801368e:	498e      	ldr	r1, [pc, #568]	; (80138c8 <_malloc_r+0x32c>)
 8013690:	237e      	movs	r3, #126	; 0x7e
 8013692:	428a      	cmp	r2, r1
 8013694:	d8bf      	bhi.n	8013616 <_malloc_r+0x7a>
 8013696:	0cab      	lsrs	r3, r5, #18
 8013698:	337c      	adds	r3, #124	; 0x7c
 801369a:	e7bc      	b.n	8013616 <_malloc_r+0x7a>
 801369c:	68e6      	ldr	r6, [r4, #12]
 801369e:	2f00      	cmp	r7, #0
 80136a0:	db08      	blt.n	80136b4 <_malloc_r+0x118>
 80136a2:	68a3      	ldr	r3, [r4, #8]
 80136a4:	60de      	str	r6, [r3, #12]
 80136a6:	60b3      	str	r3, [r6, #8]
 80136a8:	2301      	movs	r3, #1
 80136aa:	18a2      	adds	r2, r4, r2
 80136ac:	6851      	ldr	r1, [r2, #4]
 80136ae:	430b      	orrs	r3, r1
 80136b0:	6053      	str	r3, [r2, #4]
 80136b2:	e7d5      	b.n	8013660 <_malloc_r+0xc4>
 80136b4:	0034      	movs	r4, r6
 80136b6:	e7b3      	b.n	8013620 <_malloc_r+0x84>
 80136b8:	6141      	str	r1, [r0, #20]
 80136ba:	6101      	str	r1, [r0, #16]
 80136bc:	2e00      	cmp	r6, #0
 80136be:	daf3      	bge.n	80136a8 <_malloc_r+0x10c>
 80136c0:	6841      	ldr	r1, [r0, #4]
 80136c2:	468c      	mov	ip, r1
 80136c4:	2180      	movs	r1, #128	; 0x80
 80136c6:	0089      	lsls	r1, r1, #2
 80136c8:	428a      	cmp	r2, r1
 80136ca:	d300      	bcc.n	80136ce <_malloc_r+0x132>
 80136cc:	e089      	b.n	80137e2 <_malloc_r+0x246>
 80136ce:	0956      	lsrs	r6, r2, #5
 80136d0:	08d1      	lsrs	r1, r2, #3
 80136d2:	2201      	movs	r2, #1
 80136d4:	40b2      	lsls	r2, r6
 80136d6:	4666      	mov	r6, ip
 80136d8:	00c9      	lsls	r1, r1, #3
 80136da:	4332      	orrs	r2, r6
 80136dc:	6042      	str	r2, [r0, #4]
 80136de:	1808      	adds	r0, r1, r0
 80136e0:	6882      	ldr	r2, [r0, #8]
 80136e2:	60e0      	str	r0, [r4, #12]
 80136e4:	60a2      	str	r2, [r4, #8]
 80136e6:	6084      	str	r4, [r0, #8]
 80136e8:	60d4      	str	r4, [r2, #12]
 80136ea:	2201      	movs	r2, #1
 80136ec:	4874      	ldr	r0, [pc, #464]	; (80138c0 <_malloc_r+0x324>)
 80136ee:	1099      	asrs	r1, r3, #2
 80136f0:	408a      	lsls	r2, r1
 80136f2:	6841      	ldr	r1, [r0, #4]
 80136f4:	4291      	cmp	r1, r2
 80136f6:	d325      	bcc.n	8013744 <_malloc_r+0x1a8>
 80136f8:	420a      	tst	r2, r1
 80136fa:	d105      	bne.n	8013708 <_malloc_r+0x16c>
 80136fc:	2403      	movs	r4, #3
 80136fe:	43a3      	bics	r3, r4
 8013700:	0052      	lsls	r2, r2, #1
 8013702:	3304      	adds	r3, #4
 8013704:	420a      	tst	r2, r1
 8013706:	d0fb      	beq.n	8013700 <_malloc_r+0x164>
 8013708:	00d9      	lsls	r1, r3, #3
 801370a:	1841      	adds	r1, r0, r1
 801370c:	468c      	mov	ip, r1
 801370e:	9302      	str	r3, [sp, #8]
 8013710:	68cc      	ldr	r4, [r1, #12]
 8013712:	428c      	cmp	r4, r1
 8013714:	d000      	beq.n	8013718 <_malloc_r+0x17c>
 8013716:	e09b      	b.n	8013850 <_malloc_r+0x2b4>
 8013718:	2603      	movs	r6, #3
 801371a:	9c02      	ldr	r4, [sp, #8]
 801371c:	3108      	adds	r1, #8
 801371e:	3401      	adds	r4, #1
 8013720:	9402      	str	r4, [sp, #8]
 8013722:	4234      	tst	r4, r6
 8013724:	d1f4      	bne.n	8013710 <_malloc_r+0x174>
 8013726:	2103      	movs	r1, #3
 8013728:	420b      	tst	r3, r1
 801372a:	d000      	beq.n	801372e <_malloc_r+0x192>
 801372c:	e0b7      	b.n	801389e <_malloc_r+0x302>
 801372e:	6843      	ldr	r3, [r0, #4]
 8013730:	4393      	bics	r3, r2
 8013732:	6043      	str	r3, [r0, #4]
 8013734:	4b62      	ldr	r3, [pc, #392]	; (80138c0 <_malloc_r+0x324>)
 8013736:	0052      	lsls	r2, r2, #1
 8013738:	6859      	ldr	r1, [r3, #4]
 801373a:	4291      	cmp	r1, r2
 801373c:	d302      	bcc.n	8013744 <_malloc_r+0x1a8>
 801373e:	2a00      	cmp	r2, #0
 8013740:	d000      	beq.n	8013744 <_malloc_r+0x1a8>
 8013742:	e0bb      	b.n	80138bc <_malloc_r+0x320>
 8013744:	2303      	movs	r3, #3
 8013746:	6886      	ldr	r6, [r0, #8]
 8013748:	6872      	ldr	r2, [r6, #4]
 801374a:	439a      	bics	r2, r3
 801374c:	9202      	str	r2, [sp, #8]
 801374e:	42aa      	cmp	r2, r5
 8013750:	d303      	bcc.n	801375a <_malloc_r+0x1be>
 8013752:	1b51      	subs	r1, r2, r5
 8013754:	290f      	cmp	r1, #15
 8013756:	dd00      	ble.n	801375a <_malloc_r+0x1be>
 8013758:	e125      	b.n	80139a6 <_malloc_r+0x40a>
 801375a:	9b02      	ldr	r3, [sp, #8]
 801375c:	2008      	movs	r0, #8
 801375e:	18f3      	adds	r3, r6, r3
 8013760:	9303      	str	r3, [sp, #12]
 8013762:	4b5a      	ldr	r3, [pc, #360]	; (80138cc <_malloc_r+0x330>)
 8013764:	681f      	ldr	r7, [r3, #0]
 8013766:	f002 fd43 	bl	80161f0 <sysconf>
 801376a:	4b59      	ldr	r3, [pc, #356]	; (80138d0 <_malloc_r+0x334>)
 801376c:	3710      	adds	r7, #16
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	197f      	adds	r7, r7, r5
 8013772:	9004      	str	r0, [sp, #16]
 8013774:	3301      	adds	r3, #1
 8013776:	d003      	beq.n	8013780 <_malloc_r+0x1e4>
 8013778:	3f01      	subs	r7, #1
 801377a:	183f      	adds	r7, r7, r0
 801377c:	4243      	negs	r3, r0
 801377e:	401f      	ands	r7, r3
 8013780:	0039      	movs	r1, r7
 8013782:	9801      	ldr	r0, [sp, #4]
 8013784:	f000 fb18 	bl	8013db8 <_sbrk_r>
 8013788:	0004      	movs	r4, r0
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	d100      	bne.n	8013790 <_malloc_r+0x1f4>
 801378e:	e0de      	b.n	801394e <_malloc_r+0x3b2>
 8013790:	9b03      	ldr	r3, [sp, #12]
 8013792:	4283      	cmp	r3, r0
 8013794:	d903      	bls.n	801379e <_malloc_r+0x202>
 8013796:	4b4a      	ldr	r3, [pc, #296]	; (80138c0 <_malloc_r+0x324>)
 8013798:	429e      	cmp	r6, r3
 801379a:	d000      	beq.n	801379e <_malloc_r+0x202>
 801379c:	e0d7      	b.n	801394e <_malloc_r+0x3b2>
 801379e:	4b4d      	ldr	r3, [pc, #308]	; (80138d4 <_malloc_r+0x338>)
 80137a0:	9903      	ldr	r1, [sp, #12]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	18ba      	adds	r2, r7, r2
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	9b04      	ldr	r3, [sp, #16]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	42a1      	cmp	r1, r4
 80137ae:	d000      	beq.n	80137b2 <_malloc_r+0x216>
 80137b0:	e096      	b.n	80138e0 <_malloc_r+0x344>
 80137b2:	4219      	tst	r1, r3
 80137b4:	d000      	beq.n	80137b8 <_malloc_r+0x21c>
 80137b6:	e093      	b.n	80138e0 <_malloc_r+0x344>
 80137b8:	2601      	movs	r6, #1
 80137ba:	4b41      	ldr	r3, [pc, #260]	; (80138c0 <_malloc_r+0x324>)
 80137bc:	9a02      	ldr	r2, [sp, #8]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	19d7      	adds	r7, r2, r7
 80137c2:	433e      	orrs	r6, r7
 80137c4:	605e      	str	r6, [r3, #4]
 80137c6:	4b43      	ldr	r3, [pc, #268]	; (80138d4 <_malloc_r+0x338>)
 80137c8:	4a43      	ldr	r2, [pc, #268]	; (80138d8 <_malloc_r+0x33c>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	6811      	ldr	r1, [r2, #0]
 80137ce:	428b      	cmp	r3, r1
 80137d0:	d900      	bls.n	80137d4 <_malloc_r+0x238>
 80137d2:	6013      	str	r3, [r2, #0]
 80137d4:	4a41      	ldr	r2, [pc, #260]	; (80138dc <_malloc_r+0x340>)
 80137d6:	6811      	ldr	r1, [r2, #0]
 80137d8:	428b      	cmp	r3, r1
 80137da:	d800      	bhi.n	80137de <_malloc_r+0x242>
 80137dc:	e0b7      	b.n	801394e <_malloc_r+0x3b2>
 80137de:	6013      	str	r3, [r2, #0]
 80137e0:	e0b5      	b.n	801394e <_malloc_r+0x3b2>
 80137e2:	0a56      	lsrs	r6, r2, #9
 80137e4:	2e04      	cmp	r6, #4
 80137e6:	d811      	bhi.n	801380c <_malloc_r+0x270>
 80137e8:	0991      	lsrs	r1, r2, #6
 80137ea:	3138      	adds	r1, #56	; 0x38
 80137ec:	00cf      	lsls	r7, r1, #3
 80137ee:	183f      	adds	r7, r7, r0
 80137f0:	68be      	ldr	r6, [r7, #8]
 80137f2:	42b7      	cmp	r7, r6
 80137f4:	d125      	bne.n	8013842 <_malloc_r+0x2a6>
 80137f6:	2201      	movs	r2, #1
 80137f8:	1089      	asrs	r1, r1, #2
 80137fa:	408a      	lsls	r2, r1
 80137fc:	4661      	mov	r1, ip
 80137fe:	430a      	orrs	r2, r1
 8013800:	6042      	str	r2, [r0, #4]
 8013802:	60e7      	str	r7, [r4, #12]
 8013804:	60a6      	str	r6, [r4, #8]
 8013806:	60bc      	str	r4, [r7, #8]
 8013808:	60f4      	str	r4, [r6, #12]
 801380a:	e76e      	b.n	80136ea <_malloc_r+0x14e>
 801380c:	2e14      	cmp	r6, #20
 801380e:	d802      	bhi.n	8013816 <_malloc_r+0x27a>
 8013810:	0031      	movs	r1, r6
 8013812:	315b      	adds	r1, #91	; 0x5b
 8013814:	e7ea      	b.n	80137ec <_malloc_r+0x250>
 8013816:	2e54      	cmp	r6, #84	; 0x54
 8013818:	d802      	bhi.n	8013820 <_malloc_r+0x284>
 801381a:	0b11      	lsrs	r1, r2, #12
 801381c:	316e      	adds	r1, #110	; 0x6e
 801381e:	e7e5      	b.n	80137ec <_malloc_r+0x250>
 8013820:	21aa      	movs	r1, #170	; 0xaa
 8013822:	0049      	lsls	r1, r1, #1
 8013824:	428e      	cmp	r6, r1
 8013826:	d802      	bhi.n	801382e <_malloc_r+0x292>
 8013828:	0bd1      	lsrs	r1, r2, #15
 801382a:	3177      	adds	r1, #119	; 0x77
 801382c:	e7de      	b.n	80137ec <_malloc_r+0x250>
 801382e:	4f26      	ldr	r7, [pc, #152]	; (80138c8 <_malloc_r+0x32c>)
 8013830:	217e      	movs	r1, #126	; 0x7e
 8013832:	42be      	cmp	r6, r7
 8013834:	d8da      	bhi.n	80137ec <_malloc_r+0x250>
 8013836:	0c91      	lsrs	r1, r2, #18
 8013838:	317c      	adds	r1, #124	; 0x7c
 801383a:	e7d7      	b.n	80137ec <_malloc_r+0x250>
 801383c:	68b6      	ldr	r6, [r6, #8]
 801383e:	42b7      	cmp	r7, r6
 8013840:	d004      	beq.n	801384c <_malloc_r+0x2b0>
 8013842:	2003      	movs	r0, #3
 8013844:	6871      	ldr	r1, [r6, #4]
 8013846:	4381      	bics	r1, r0
 8013848:	4291      	cmp	r1, r2
 801384a:	d8f7      	bhi.n	801383c <_malloc_r+0x2a0>
 801384c:	68f7      	ldr	r7, [r6, #12]
 801384e:	e7d8      	b.n	8013802 <_malloc_r+0x266>
 8013850:	2703      	movs	r7, #3
 8013852:	6866      	ldr	r6, [r4, #4]
 8013854:	43be      	bics	r6, r7
 8013856:	9603      	str	r6, [sp, #12]
 8013858:	1b77      	subs	r7, r6, r5
 801385a:	68e6      	ldr	r6, [r4, #12]
 801385c:	2f0f      	cmp	r7, #15
 801385e:	dd10      	ble.n	8013882 <_malloc_r+0x2e6>
 8013860:	2201      	movs	r2, #1
 8013862:	68a1      	ldr	r1, [r4, #8]
 8013864:	1963      	adds	r3, r4, r5
 8013866:	4315      	orrs	r5, r2
 8013868:	6065      	str	r5, [r4, #4]
 801386a:	60ce      	str	r6, [r1, #12]
 801386c:	60b1      	str	r1, [r6, #8]
 801386e:	6143      	str	r3, [r0, #20]
 8013870:	6103      	str	r3, [r0, #16]
 8013872:	4814      	ldr	r0, [pc, #80]	; (80138c4 <_malloc_r+0x328>)
 8013874:	433a      	orrs	r2, r7
 8013876:	60d8      	str	r0, [r3, #12]
 8013878:	6098      	str	r0, [r3, #8]
 801387a:	605a      	str	r2, [r3, #4]
 801387c:	9b03      	ldr	r3, [sp, #12]
 801387e:	50e7      	str	r7, [r4, r3]
 8013880:	e6ee      	b.n	8013660 <_malloc_r+0xc4>
 8013882:	2f00      	cmp	r7, #0
 8013884:	db09      	blt.n	801389a <_malloc_r+0x2fe>
 8013886:	9b03      	ldr	r3, [sp, #12]
 8013888:	18e1      	adds	r1, r4, r3
 801388a:	2301      	movs	r3, #1
 801388c:	684a      	ldr	r2, [r1, #4]
 801388e:	4313      	orrs	r3, r2
 8013890:	604b      	str	r3, [r1, #4]
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	60de      	str	r6, [r3, #12]
 8013896:	60b3      	str	r3, [r6, #8]
 8013898:	e6e2      	b.n	8013660 <_malloc_r+0xc4>
 801389a:	0034      	movs	r4, r6
 801389c:	e739      	b.n	8013712 <_malloc_r+0x176>
 801389e:	2108      	movs	r1, #8
 80138a0:	4249      	negs	r1, r1
 80138a2:	448c      	add	ip, r1
 80138a4:	4661      	mov	r1, ip
 80138a6:	6889      	ldr	r1, [r1, #8]
 80138a8:	3b01      	subs	r3, #1
 80138aa:	4561      	cmp	r1, ip
 80138ac:	d100      	bne.n	80138b0 <_malloc_r+0x314>
 80138ae:	e73a      	b.n	8013726 <_malloc_r+0x18a>
 80138b0:	e740      	b.n	8013734 <_malloc_r+0x198>
 80138b2:	3304      	adds	r3, #4
 80138b4:	0052      	lsls	r2, r2, #1
 80138b6:	420a      	tst	r2, r1
 80138b8:	d0fb      	beq.n	80138b2 <_malloc_r+0x316>
 80138ba:	e725      	b.n	8013708 <_malloc_r+0x16c>
 80138bc:	9b02      	ldr	r3, [sp, #8]
 80138be:	e7fa      	b.n	80138b6 <_malloc_r+0x31a>
 80138c0:	200004d8 	.word	0x200004d8
 80138c4:	200004e0 	.word	0x200004e0
 80138c8:	00000554 	.word	0x00000554
 80138cc:	2000684c 	.word	0x2000684c
 80138d0:	200008e0 	.word	0x200008e0
 80138d4:	2000681c 	.word	0x2000681c
 80138d8:	20006844 	.word	0x20006844
 80138dc:	20006848 	.word	0x20006848
 80138e0:	4935      	ldr	r1, [pc, #212]	; (80139b8 <_malloc_r+0x41c>)
 80138e2:	6808      	ldr	r0, [r1, #0]
 80138e4:	3001      	adds	r0, #1
 80138e6:	d140      	bne.n	801396a <_malloc_r+0x3ce>
 80138e8:	600c      	str	r4, [r1, #0]
 80138ea:	2207      	movs	r2, #7
 80138ec:	0021      	movs	r1, r4
 80138ee:	4011      	ands	r1, r2
 80138f0:	2000      	movs	r0, #0
 80138f2:	9103      	str	r1, [sp, #12]
 80138f4:	4214      	tst	r4, r2
 80138f6:	d002      	beq.n	80138fe <_malloc_r+0x362>
 80138f8:	3008      	adds	r0, #8
 80138fa:	1a40      	subs	r0, r0, r1
 80138fc:	1824      	adds	r4, r4, r0
 80138fe:	19e2      	adds	r2, r4, r7
 8013900:	9205      	str	r2, [sp, #20]
 8013902:	9f05      	ldr	r7, [sp, #20]
 8013904:	9a04      	ldr	r2, [sp, #16]
 8013906:	401f      	ands	r7, r3
 8013908:	1810      	adds	r0, r2, r0
 801390a:	1bc7      	subs	r7, r0, r7
 801390c:	401f      	ands	r7, r3
 801390e:	0039      	movs	r1, r7
 8013910:	9801      	ldr	r0, [sp, #4]
 8013912:	f000 fa51 	bl	8013db8 <_sbrk_r>
 8013916:	1c43      	adds	r3, r0, #1
 8013918:	d107      	bne.n	801392a <_malloc_r+0x38e>
 801391a:	9b03      	ldr	r3, [sp, #12]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d02a      	beq.n	8013976 <_malloc_r+0x3da>
 8013920:	0018      	movs	r0, r3
 8013922:	2700      	movs	r7, #0
 8013924:	9b05      	ldr	r3, [sp, #20]
 8013926:	3808      	subs	r0, #8
 8013928:	1818      	adds	r0, r3, r0
 801392a:	4a24      	ldr	r2, [pc, #144]	; (80139bc <_malloc_r+0x420>)
 801392c:	1b00      	subs	r0, r0, r4
 801392e:	6813      	ldr	r3, [r2, #0]
 8013930:	19db      	adds	r3, r3, r7
 8013932:	6013      	str	r3, [r2, #0]
 8013934:	2201      	movs	r2, #1
 8013936:	4b22      	ldr	r3, [pc, #136]	; (80139c0 <_malloc_r+0x424>)
 8013938:	19c7      	adds	r7, r0, r7
 801393a:	4317      	orrs	r7, r2
 801393c:	609c      	str	r4, [r3, #8]
 801393e:	6067      	str	r7, [r4, #4]
 8013940:	429e      	cmp	r6, r3
 8013942:	d100      	bne.n	8013946 <_malloc_r+0x3aa>
 8013944:	e73f      	b.n	80137c6 <_malloc_r+0x22a>
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	2b0f      	cmp	r3, #15
 801394a:	d817      	bhi.n	801397c <_malloc_r+0x3e0>
 801394c:	6062      	str	r2, [r4, #4]
 801394e:	2203      	movs	r2, #3
 8013950:	4b1b      	ldr	r3, [pc, #108]	; (80139c0 <_malloc_r+0x424>)
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	4393      	bics	r3, r2
 8013958:	1b59      	subs	r1, r3, r5
 801395a:	42ab      	cmp	r3, r5
 801395c:	d301      	bcc.n	8013962 <_malloc_r+0x3c6>
 801395e:	290f      	cmp	r1, #15
 8013960:	dc21      	bgt.n	80139a6 <_malloc_r+0x40a>
 8013962:	9801      	ldr	r0, [sp, #4]
 8013964:	f000 f856 	bl	8013a14 <__malloc_unlock>
 8013968:	e625      	b.n	80135b6 <_malloc_r+0x1a>
 801396a:	9903      	ldr	r1, [sp, #12]
 801396c:	1a61      	subs	r1, r4, r1
 801396e:	1889      	adds	r1, r1, r2
 8013970:	4a12      	ldr	r2, [pc, #72]	; (80139bc <_malloc_r+0x420>)
 8013972:	6011      	str	r1, [r2, #0]
 8013974:	e7b9      	b.n	80138ea <_malloc_r+0x34e>
 8013976:	9805      	ldr	r0, [sp, #20]
 8013978:	9f03      	ldr	r7, [sp, #12]
 801397a:	e7d6      	b.n	801392a <_malloc_r+0x38e>
 801397c:	2307      	movs	r3, #7
 801397e:	9f02      	ldr	r7, [sp, #8]
 8013980:	3f0c      	subs	r7, #12
 8013982:	439f      	bics	r7, r3
 8013984:	6873      	ldr	r3, [r6, #4]
 8013986:	401a      	ands	r2, r3
 8013988:	433a      	orrs	r2, r7
 801398a:	6072      	str	r2, [r6, #4]
 801398c:	2205      	movs	r2, #5
 801398e:	19f3      	adds	r3, r6, r7
 8013990:	605a      	str	r2, [r3, #4]
 8013992:	609a      	str	r2, [r3, #8]
 8013994:	2f0f      	cmp	r7, #15
 8013996:	d800      	bhi.n	801399a <_malloc_r+0x3fe>
 8013998:	e715      	b.n	80137c6 <_malloc_r+0x22a>
 801399a:	0031      	movs	r1, r6
 801399c:	9801      	ldr	r0, [sp, #4]
 801399e:	3108      	adds	r1, #8
 80139a0:	f003 fb26 	bl	8016ff0 <_free_r>
 80139a4:	e70f      	b.n	80137c6 <_malloc_r+0x22a>
 80139a6:	2201      	movs	r2, #1
 80139a8:	0013      	movs	r3, r2
 80139aa:	4805      	ldr	r0, [pc, #20]	; (80139c0 <_malloc_r+0x424>)
 80139ac:	432b      	orrs	r3, r5
 80139ae:	6884      	ldr	r4, [r0, #8]
 80139b0:	6063      	str	r3, [r4, #4]
 80139b2:	1963      	adds	r3, r4, r5
 80139b4:	6083      	str	r3, [r0, #8]
 80139b6:	e624      	b.n	8013602 <_malloc_r+0x66>
 80139b8:	200008e0 	.word	0x200008e0
 80139bc:	2000681c 	.word	0x2000681c
 80139c0:	200004d8 	.word	0x200004d8

080139c4 <memcmp>:
 80139c4:	b530      	push	{r4, r5, lr}
 80139c6:	2400      	movs	r4, #0
 80139c8:	3901      	subs	r1, #1
 80139ca:	42a2      	cmp	r2, r4
 80139cc:	d101      	bne.n	80139d2 <memcmp+0xe>
 80139ce:	2000      	movs	r0, #0
 80139d0:	e005      	b.n	80139de <memcmp+0x1a>
 80139d2:	5d03      	ldrb	r3, [r0, r4]
 80139d4:	3401      	adds	r4, #1
 80139d6:	5d0d      	ldrb	r5, [r1, r4]
 80139d8:	42ab      	cmp	r3, r5
 80139da:	d0f6      	beq.n	80139ca <memcmp+0x6>
 80139dc:	1b58      	subs	r0, r3, r5
 80139de:	bd30      	pop	{r4, r5, pc}

080139e0 <memcpy>:
 80139e0:	2300      	movs	r3, #0
 80139e2:	b510      	push	{r4, lr}
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d100      	bne.n	80139ea <memcpy+0xa>
 80139e8:	bd10      	pop	{r4, pc}
 80139ea:	5ccc      	ldrb	r4, [r1, r3]
 80139ec:	54c4      	strb	r4, [r0, r3]
 80139ee:	3301      	adds	r3, #1
 80139f0:	e7f8      	b.n	80139e4 <memcpy+0x4>

080139f2 <memset>:
 80139f2:	0003      	movs	r3, r0
 80139f4:	1882      	adds	r2, r0, r2
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d100      	bne.n	80139fc <memset+0xa>
 80139fa:	4770      	bx	lr
 80139fc:	7019      	strb	r1, [r3, #0]
 80139fe:	3301      	adds	r3, #1
 8013a00:	e7f9      	b.n	80139f6 <memset+0x4>
	...

08013a04 <__malloc_lock>:
 8013a04:	b510      	push	{r4, lr}
 8013a06:	4802      	ldr	r0, [pc, #8]	; (8013a10 <__malloc_lock+0xc>)
 8013a08:	f003 ff24 	bl	8017854 <__retarget_lock_acquire_recursive>
 8013a0c:	bd10      	pop	{r4, pc}
 8013a0e:	46c0      	nop			; (mov r8, r8)
 8013a10:	20006dc4 	.word	0x20006dc4

08013a14 <__malloc_unlock>:
 8013a14:	b510      	push	{r4, lr}
 8013a16:	4802      	ldr	r0, [pc, #8]	; (8013a20 <__malloc_unlock+0xc>)
 8013a18:	f003 ff1d 	bl	8017856 <__retarget_lock_release_recursive>
 8013a1c:	bd10      	pop	{r4, pc}
 8013a1e:	46c0      	nop			; (mov r8, r8)
 8013a20:	20006dc4 	.word	0x20006dc4

08013a24 <rand>:
 8013a24:	4b09      	ldr	r3, [pc, #36]	; (8013a4c <rand+0x28>)
 8013a26:	b510      	push	{r4, lr}
 8013a28:	681c      	ldr	r4, [r3, #0]
 8013a2a:	4a09      	ldr	r2, [pc, #36]	; (8013a50 <rand+0x2c>)
 8013a2c:	34a8      	adds	r4, #168	; 0xa8
 8013a2e:	6820      	ldr	r0, [r4, #0]
 8013a30:	6861      	ldr	r1, [r4, #4]
 8013a32:	4b08      	ldr	r3, [pc, #32]	; (8013a54 <rand+0x30>)
 8013a34:	f7ec fd9a 	bl	800056c <__aeabi_lmul>
 8013a38:	2201      	movs	r2, #1
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	1880      	adds	r0, r0, r2
 8013a3e:	4159      	adcs	r1, r3
 8013a40:	6020      	str	r0, [r4, #0]
 8013a42:	6061      	str	r1, [r4, #4]
 8013a44:	0048      	lsls	r0, r1, #1
 8013a46:	0840      	lsrs	r0, r0, #1
 8013a48:	bd10      	pop	{r4, pc}
 8013a4a:	46c0      	nop			; (mov r8, r8)
 8013a4c:	200000ac 	.word	0x200000ac
 8013a50:	4c957f2d 	.word	0x4c957f2d
 8013a54:	5851f42d 	.word	0x5851f42d

08013a58 <realloc>:
 8013a58:	b510      	push	{r4, lr}
 8013a5a:	4b03      	ldr	r3, [pc, #12]	; (8013a68 <realloc+0x10>)
 8013a5c:	000a      	movs	r2, r1
 8013a5e:	0001      	movs	r1, r0
 8013a60:	6818      	ldr	r0, [r3, #0]
 8013a62:	f000 f803 	bl	8013a6c <_realloc_r>
 8013a66:	bd10      	pop	{r4, pc}
 8013a68:	200000ac 	.word	0x200000ac

08013a6c <_realloc_r>:
 8013a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a6e:	b087      	sub	sp, #28
 8013a70:	1e0c      	subs	r4, r1, #0
 8013a72:	9002      	str	r0, [sp, #8]
 8013a74:	9205      	str	r2, [sp, #20]
 8013a76:	d106      	bne.n	8013a86 <_realloc_r+0x1a>
 8013a78:	0011      	movs	r1, r2
 8013a7a:	f7ff fd8f 	bl	801359c <_malloc_r>
 8013a7e:	0007      	movs	r7, r0
 8013a80:	0038      	movs	r0, r7
 8013a82:	b007      	add	sp, #28
 8013a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a86:	9802      	ldr	r0, [sp, #8]
 8013a88:	f7ff ffbc 	bl	8013a04 <__malloc_lock>
 8013a8c:	9e05      	ldr	r6, [sp, #20]
 8013a8e:	360b      	adds	r6, #11
 8013a90:	2e16      	cmp	r6, #22
 8013a92:	d908      	bls.n	8013aa6 <_realloc_r+0x3a>
 8013a94:	2307      	movs	r3, #7
 8013a96:	439e      	bics	r6, r3
 8013a98:	9601      	str	r6, [sp, #4]
 8013a9a:	d506      	bpl.n	8013aaa <_realloc_r+0x3e>
 8013a9c:	230c      	movs	r3, #12
 8013a9e:	9a02      	ldr	r2, [sp, #8]
 8013aa0:	2700      	movs	r7, #0
 8013aa2:	6013      	str	r3, [r2, #0]
 8013aa4:	e7ec      	b.n	8013a80 <_realloc_r+0x14>
 8013aa6:	2310      	movs	r3, #16
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	9b01      	ldr	r3, [sp, #4]
 8013aac:	9a05      	ldr	r2, [sp, #20]
 8013aae:	4293      	cmp	r3, r2
 8013ab0:	d3f4      	bcc.n	8013a9c <_realloc_r+0x30>
 8013ab2:	0023      	movs	r3, r4
 8013ab4:	3b08      	subs	r3, #8
 8013ab6:	685f      	ldr	r7, [r3, #4]
 8013ab8:	9304      	str	r3, [sp, #16]
 8013aba:	003a      	movs	r2, r7
 8013abc:	2303      	movs	r3, #3
 8013abe:	439a      	bics	r2, r3
 8013ac0:	9b01      	ldr	r3, [sp, #4]
 8013ac2:	9203      	str	r2, [sp, #12]
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	dc00      	bgt.n	8013aca <_realloc_r+0x5e>
 8013ac8:	e16b      	b.n	8013da2 <_realloc_r+0x336>
 8013aca:	9b04      	ldr	r3, [sp, #16]
 8013acc:	48b9      	ldr	r0, [pc, #740]	; (8013db4 <_realloc_r+0x348>)
 8013ace:	189b      	adds	r3, r3, r2
 8013ad0:	6882      	ldr	r2, [r0, #8]
 8013ad2:	4694      	mov	ip, r2
 8013ad4:	685a      	ldr	r2, [r3, #4]
 8013ad6:	459c      	cmp	ip, r3
 8013ad8:	d006      	beq.n	8013ae8 <_realloc_r+0x7c>
 8013ada:	2501      	movs	r5, #1
 8013adc:	0011      	movs	r1, r2
 8013ade:	43a9      	bics	r1, r5
 8013ae0:	1859      	adds	r1, r3, r1
 8013ae2:	6849      	ldr	r1, [r1, #4]
 8013ae4:	4229      	tst	r1, r5
 8013ae6:	d126      	bne.n	8013b36 <_realloc_r+0xca>
 8013ae8:	2103      	movs	r1, #3
 8013aea:	438a      	bics	r2, r1
 8013aec:	9903      	ldr	r1, [sp, #12]
 8013aee:	188e      	adds	r6, r1, r2
 8013af0:	9901      	ldr	r1, [sp, #4]
 8013af2:	459c      	cmp	ip, r3
 8013af4:	d117      	bne.n	8013b26 <_realloc_r+0xba>
 8013af6:	3110      	adds	r1, #16
 8013af8:	42b1      	cmp	r1, r6
 8013afa:	dc1e      	bgt.n	8013b3a <_realloc_r+0xce>
 8013afc:	9901      	ldr	r1, [sp, #4]
 8013afe:	9b04      	ldr	r3, [sp, #16]
 8013b00:	468c      	mov	ip, r1
 8013b02:	4463      	add	r3, ip
 8013b04:	6083      	str	r3, [r0, #8]
 8013b06:	001a      	movs	r2, r3
 8013b08:	1a73      	subs	r3, r6, r1
 8013b0a:	2601      	movs	r6, #1
 8013b0c:	4333      	orrs	r3, r6
 8013b0e:	6053      	str	r3, [r2, #4]
 8013b10:	0023      	movs	r3, r4
 8013b12:	3b08      	subs	r3, #8
 8013b14:	685a      	ldr	r2, [r3, #4]
 8013b16:	9802      	ldr	r0, [sp, #8]
 8013b18:	4016      	ands	r6, r2
 8013b1a:	430e      	orrs	r6, r1
 8013b1c:	605e      	str	r6, [r3, #4]
 8013b1e:	f7ff ff79 	bl	8013a14 <__malloc_unlock>
 8013b22:	0027      	movs	r7, r4
 8013b24:	e7ac      	b.n	8013a80 <_realloc_r+0x14>
 8013b26:	42b1      	cmp	r1, r6
 8013b28:	dc07      	bgt.n	8013b3a <_realloc_r+0xce>
 8013b2a:	68da      	ldr	r2, [r3, #12]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	60da      	str	r2, [r3, #12]
 8013b30:	6093      	str	r3, [r2, #8]
 8013b32:	9d04      	ldr	r5, [sp, #16]
 8013b34:	e07f      	b.n	8013c36 <_realloc_r+0x1ca>
 8013b36:	2200      	movs	r2, #0
 8013b38:	0013      	movs	r3, r2
 8013b3a:	07f9      	lsls	r1, r7, #31
 8013b3c:	d500      	bpl.n	8013b40 <_realloc_r+0xd4>
 8013b3e:	e0e2      	b.n	8013d06 <_realloc_r+0x29a>
 8013b40:	0021      	movs	r1, r4
 8013b42:	3908      	subs	r1, #8
 8013b44:	680d      	ldr	r5, [r1, #0]
 8013b46:	9904      	ldr	r1, [sp, #16]
 8013b48:	1b4d      	subs	r5, r1, r5
 8013b4a:	2103      	movs	r1, #3
 8013b4c:	686f      	ldr	r7, [r5, #4]
 8013b4e:	438f      	bics	r7, r1
 8013b50:	9903      	ldr	r1, [sp, #12]
 8013b52:	187f      	adds	r7, r7, r1
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d100      	bne.n	8013b5a <_realloc_r+0xee>
 8013b58:	e0a0      	b.n	8013c9c <_realloc_r+0x230>
 8013b5a:	19d6      	adds	r6, r2, r7
 8013b5c:	459c      	cmp	ip, r3
 8013b5e:	d149      	bne.n	8013bf4 <_realloc_r+0x188>
 8013b60:	9b01      	ldr	r3, [sp, #4]
 8013b62:	3310      	adds	r3, #16
 8013b64:	42b3      	cmp	r3, r6
 8013b66:	dd00      	ble.n	8013b6a <_realloc_r+0xfe>
 8013b68:	e098      	b.n	8013c9c <_realloc_r+0x230>
 8013b6a:	68aa      	ldr	r2, [r5, #8]
 8013b6c:	68eb      	ldr	r3, [r5, #12]
 8013b6e:	002f      	movs	r7, r5
 8013b70:	60d3      	str	r3, [r2, #12]
 8013b72:	609a      	str	r2, [r3, #8]
 8013b74:	000a      	movs	r2, r1
 8013b76:	3a04      	subs	r2, #4
 8013b78:	3708      	adds	r7, #8
 8013b7a:	2a24      	cmp	r2, #36	; 0x24
 8013b7c:	d835      	bhi.n	8013bea <_realloc_r+0x17e>
 8013b7e:	003b      	movs	r3, r7
 8013b80:	2a13      	cmp	r2, #19
 8013b82:	d908      	bls.n	8013b96 <_realloc_r+0x12a>
 8013b84:	6823      	ldr	r3, [r4, #0]
 8013b86:	60ab      	str	r3, [r5, #8]
 8013b88:	6863      	ldr	r3, [r4, #4]
 8013b8a:	60eb      	str	r3, [r5, #12]
 8013b8c:	2a1b      	cmp	r2, #27
 8013b8e:	d81a      	bhi.n	8013bc6 <_realloc_r+0x15a>
 8013b90:	002b      	movs	r3, r5
 8013b92:	3408      	adds	r4, #8
 8013b94:	3310      	adds	r3, #16
 8013b96:	6822      	ldr	r2, [r4, #0]
 8013b98:	601a      	str	r2, [r3, #0]
 8013b9a:	6862      	ldr	r2, [r4, #4]
 8013b9c:	605a      	str	r2, [r3, #4]
 8013b9e:	68a2      	ldr	r2, [r4, #8]
 8013ba0:	609a      	str	r2, [r3, #8]
 8013ba2:	9b01      	ldr	r3, [sp, #4]
 8013ba4:	18ea      	adds	r2, r5, r3
 8013ba6:	4b83      	ldr	r3, [pc, #524]	; (8013db4 <_realloc_r+0x348>)
 8013ba8:	609a      	str	r2, [r3, #8]
 8013baa:	9b01      	ldr	r3, [sp, #4]
 8013bac:	1af3      	subs	r3, r6, r3
 8013bae:	2601      	movs	r6, #1
 8013bb0:	4333      	orrs	r3, r6
 8013bb2:	6053      	str	r3, [r2, #4]
 8013bb4:	686b      	ldr	r3, [r5, #4]
 8013bb6:	401e      	ands	r6, r3
 8013bb8:	9b01      	ldr	r3, [sp, #4]
 8013bba:	431e      	orrs	r6, r3
 8013bbc:	606e      	str	r6, [r5, #4]
 8013bbe:	9802      	ldr	r0, [sp, #8]
 8013bc0:	f7ff ff28 	bl	8013a14 <__malloc_unlock>
 8013bc4:	e75c      	b.n	8013a80 <_realloc_r+0x14>
 8013bc6:	68a3      	ldr	r3, [r4, #8]
 8013bc8:	612b      	str	r3, [r5, #16]
 8013bca:	68e3      	ldr	r3, [r4, #12]
 8013bcc:	616b      	str	r3, [r5, #20]
 8013bce:	2a24      	cmp	r2, #36	; 0x24
 8013bd0:	d003      	beq.n	8013bda <_realloc_r+0x16e>
 8013bd2:	002b      	movs	r3, r5
 8013bd4:	3410      	adds	r4, #16
 8013bd6:	3318      	adds	r3, #24
 8013bd8:	e7dd      	b.n	8013b96 <_realloc_r+0x12a>
 8013bda:	6923      	ldr	r3, [r4, #16]
 8013bdc:	61ab      	str	r3, [r5, #24]
 8013bde:	002b      	movs	r3, r5
 8013be0:	6962      	ldr	r2, [r4, #20]
 8013be2:	3320      	adds	r3, #32
 8013be4:	61ea      	str	r2, [r5, #28]
 8013be6:	3418      	adds	r4, #24
 8013be8:	e7d5      	b.n	8013b96 <_realloc_r+0x12a>
 8013bea:	0021      	movs	r1, r4
 8013bec:	0038      	movs	r0, r7
 8013bee:	f003 fe50 	bl	8017892 <memmove>
 8013bf2:	e7d6      	b.n	8013ba2 <_realloc_r+0x136>
 8013bf4:	9a01      	ldr	r2, [sp, #4]
 8013bf6:	42b2      	cmp	r2, r6
 8013bf8:	dc50      	bgt.n	8013c9c <_realloc_r+0x230>
 8013bfa:	0028      	movs	r0, r5
 8013bfc:	68da      	ldr	r2, [r3, #12]
 8013bfe:	689b      	ldr	r3, [r3, #8]
 8013c00:	3008      	adds	r0, #8
 8013c02:	60da      	str	r2, [r3, #12]
 8013c04:	6093      	str	r3, [r2, #8]
 8013c06:	68aa      	ldr	r2, [r5, #8]
 8013c08:	68eb      	ldr	r3, [r5, #12]
 8013c0a:	60d3      	str	r3, [r2, #12]
 8013c0c:	609a      	str	r2, [r3, #8]
 8013c0e:	9a03      	ldr	r2, [sp, #12]
 8013c10:	3a04      	subs	r2, #4
 8013c12:	2a24      	cmp	r2, #36	; 0x24
 8013c14:	d83e      	bhi.n	8013c94 <_realloc_r+0x228>
 8013c16:	2a13      	cmp	r2, #19
 8013c18:	d907      	bls.n	8013c2a <_realloc_r+0x1be>
 8013c1a:	6823      	ldr	r3, [r4, #0]
 8013c1c:	60ab      	str	r3, [r5, #8]
 8013c1e:	6863      	ldr	r3, [r4, #4]
 8013c20:	60eb      	str	r3, [r5, #12]
 8013c22:	2a1b      	cmp	r2, #27
 8013c24:	d824      	bhi.n	8013c70 <_realloc_r+0x204>
 8013c26:	3408      	adds	r4, #8
 8013c28:	3008      	adds	r0, #8
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	6003      	str	r3, [r0, #0]
 8013c2e:	6863      	ldr	r3, [r4, #4]
 8013c30:	6043      	str	r3, [r0, #4]
 8013c32:	68a3      	ldr	r3, [r4, #8]
 8013c34:	6083      	str	r3, [r0, #8]
 8013c36:	9b01      	ldr	r3, [sp, #4]
 8013c38:	6868      	ldr	r0, [r5, #4]
 8013c3a:	1af4      	subs	r4, r6, r3
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	19aa      	adds	r2, r5, r6
 8013c40:	4018      	ands	r0, r3
 8013c42:	2c0f      	cmp	r4, #15
 8013c44:	d800      	bhi.n	8013c48 <_realloc_r+0x1dc>
 8013c46:	e0ae      	b.n	8013da6 <_realloc_r+0x33a>
 8013c48:	9901      	ldr	r1, [sp, #4]
 8013c4a:	9e01      	ldr	r6, [sp, #4]
 8013c4c:	1869      	adds	r1, r5, r1
 8013c4e:	4330      	orrs	r0, r6
 8013c50:	431c      	orrs	r4, r3
 8013c52:	6068      	str	r0, [r5, #4]
 8013c54:	604c      	str	r4, [r1, #4]
 8013c56:	6850      	ldr	r0, [r2, #4]
 8013c58:	3108      	adds	r1, #8
 8013c5a:	4303      	orrs	r3, r0
 8013c5c:	6053      	str	r3, [r2, #4]
 8013c5e:	9802      	ldr	r0, [sp, #8]
 8013c60:	f003 f9c6 	bl	8016ff0 <_free_r>
 8013c64:	9802      	ldr	r0, [sp, #8]
 8013c66:	3508      	adds	r5, #8
 8013c68:	f7ff fed4 	bl	8013a14 <__malloc_unlock>
 8013c6c:	002f      	movs	r7, r5
 8013c6e:	e707      	b.n	8013a80 <_realloc_r+0x14>
 8013c70:	68a3      	ldr	r3, [r4, #8]
 8013c72:	612b      	str	r3, [r5, #16]
 8013c74:	68e3      	ldr	r3, [r4, #12]
 8013c76:	616b      	str	r3, [r5, #20]
 8013c78:	2a24      	cmp	r2, #36	; 0x24
 8013c7a:	d003      	beq.n	8013c84 <_realloc_r+0x218>
 8013c7c:	0028      	movs	r0, r5
 8013c7e:	3410      	adds	r4, #16
 8013c80:	3018      	adds	r0, #24
 8013c82:	e7d2      	b.n	8013c2a <_realloc_r+0x1be>
 8013c84:	0028      	movs	r0, r5
 8013c86:	6923      	ldr	r3, [r4, #16]
 8013c88:	3020      	adds	r0, #32
 8013c8a:	61ab      	str	r3, [r5, #24]
 8013c8c:	6963      	ldr	r3, [r4, #20]
 8013c8e:	3418      	adds	r4, #24
 8013c90:	61eb      	str	r3, [r5, #28]
 8013c92:	e7ca      	b.n	8013c2a <_realloc_r+0x1be>
 8013c94:	0021      	movs	r1, r4
 8013c96:	f003 fdfc 	bl	8017892 <memmove>
 8013c9a:	e7cc      	b.n	8013c36 <_realloc_r+0x1ca>
 8013c9c:	9b01      	ldr	r3, [sp, #4]
 8013c9e:	42bb      	cmp	r3, r7
 8013ca0:	dc31      	bgt.n	8013d06 <_realloc_r+0x29a>
 8013ca2:	0028      	movs	r0, r5
 8013ca4:	68aa      	ldr	r2, [r5, #8]
 8013ca6:	68eb      	ldr	r3, [r5, #12]
 8013ca8:	3008      	adds	r0, #8
 8013caa:	60d3      	str	r3, [r2, #12]
 8013cac:	609a      	str	r2, [r3, #8]
 8013cae:	9a03      	ldr	r2, [sp, #12]
 8013cb0:	3a04      	subs	r2, #4
 8013cb2:	2a24      	cmp	r2, #36	; 0x24
 8013cb4:	d823      	bhi.n	8013cfe <_realloc_r+0x292>
 8013cb6:	2a13      	cmp	r2, #19
 8013cb8:	d907      	bls.n	8013cca <_realloc_r+0x25e>
 8013cba:	6823      	ldr	r3, [r4, #0]
 8013cbc:	60ab      	str	r3, [r5, #8]
 8013cbe:	6863      	ldr	r3, [r4, #4]
 8013cc0:	60eb      	str	r3, [r5, #12]
 8013cc2:	2a1b      	cmp	r2, #27
 8013cc4:	d809      	bhi.n	8013cda <_realloc_r+0x26e>
 8013cc6:	3408      	adds	r4, #8
 8013cc8:	3008      	adds	r0, #8
 8013cca:	6823      	ldr	r3, [r4, #0]
 8013ccc:	6003      	str	r3, [r0, #0]
 8013cce:	6863      	ldr	r3, [r4, #4]
 8013cd0:	6043      	str	r3, [r0, #4]
 8013cd2:	68a3      	ldr	r3, [r4, #8]
 8013cd4:	6083      	str	r3, [r0, #8]
 8013cd6:	003e      	movs	r6, r7
 8013cd8:	e7ad      	b.n	8013c36 <_realloc_r+0x1ca>
 8013cda:	68a3      	ldr	r3, [r4, #8]
 8013cdc:	612b      	str	r3, [r5, #16]
 8013cde:	68e3      	ldr	r3, [r4, #12]
 8013ce0:	616b      	str	r3, [r5, #20]
 8013ce2:	2a24      	cmp	r2, #36	; 0x24
 8013ce4:	d003      	beq.n	8013cee <_realloc_r+0x282>
 8013ce6:	0028      	movs	r0, r5
 8013ce8:	3410      	adds	r4, #16
 8013cea:	3018      	adds	r0, #24
 8013cec:	e7ed      	b.n	8013cca <_realloc_r+0x25e>
 8013cee:	0028      	movs	r0, r5
 8013cf0:	6923      	ldr	r3, [r4, #16]
 8013cf2:	3020      	adds	r0, #32
 8013cf4:	61ab      	str	r3, [r5, #24]
 8013cf6:	6963      	ldr	r3, [r4, #20]
 8013cf8:	3418      	adds	r4, #24
 8013cfa:	61eb      	str	r3, [r5, #28]
 8013cfc:	e7e5      	b.n	8013cca <_realloc_r+0x25e>
 8013cfe:	0021      	movs	r1, r4
 8013d00:	f003 fdc7 	bl	8017892 <memmove>
 8013d04:	e7e7      	b.n	8013cd6 <_realloc_r+0x26a>
 8013d06:	9905      	ldr	r1, [sp, #20]
 8013d08:	9802      	ldr	r0, [sp, #8]
 8013d0a:	f7ff fc47 	bl	801359c <_malloc_r>
 8013d0e:	1e07      	subs	r7, r0, #0
 8013d10:	d100      	bne.n	8013d14 <_realloc_r+0x2a8>
 8013d12:	e754      	b.n	8013bbe <_realloc_r+0x152>
 8013d14:	0023      	movs	r3, r4
 8013d16:	2201      	movs	r2, #1
 8013d18:	3b08      	subs	r3, #8
 8013d1a:	685b      	ldr	r3, [r3, #4]
 8013d1c:	4393      	bics	r3, r2
 8013d1e:	9a04      	ldr	r2, [sp, #16]
 8013d20:	18d3      	adds	r3, r2, r3
 8013d22:	0002      	movs	r2, r0
 8013d24:	3a08      	subs	r2, #8
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d105      	bne.n	8013d36 <_realloc_r+0x2ca>
 8013d2a:	685e      	ldr	r6, [r3, #4]
 8013d2c:	2303      	movs	r3, #3
 8013d2e:	439e      	bics	r6, r3
 8013d30:	9b03      	ldr	r3, [sp, #12]
 8013d32:	18f6      	adds	r6, r6, r3
 8013d34:	e6fd      	b.n	8013b32 <_realloc_r+0xc6>
 8013d36:	9a03      	ldr	r2, [sp, #12]
 8013d38:	3a04      	subs	r2, #4
 8013d3a:	2a24      	cmp	r2, #36	; 0x24
 8013d3c:	d82d      	bhi.n	8013d9a <_realloc_r+0x32e>
 8013d3e:	2a13      	cmp	r2, #19
 8013d40:	d928      	bls.n	8013d94 <_realloc_r+0x328>
 8013d42:	6823      	ldr	r3, [r4, #0]
 8013d44:	6003      	str	r3, [r0, #0]
 8013d46:	6863      	ldr	r3, [r4, #4]
 8013d48:	6043      	str	r3, [r0, #4]
 8013d4a:	2a1b      	cmp	r2, #27
 8013d4c:	d80e      	bhi.n	8013d6c <_realloc_r+0x300>
 8013d4e:	0022      	movs	r2, r4
 8013d50:	0003      	movs	r3, r0
 8013d52:	3208      	adds	r2, #8
 8013d54:	3308      	adds	r3, #8
 8013d56:	6811      	ldr	r1, [r2, #0]
 8013d58:	6019      	str	r1, [r3, #0]
 8013d5a:	6851      	ldr	r1, [r2, #4]
 8013d5c:	6059      	str	r1, [r3, #4]
 8013d5e:	6892      	ldr	r2, [r2, #8]
 8013d60:	609a      	str	r2, [r3, #8]
 8013d62:	0021      	movs	r1, r4
 8013d64:	9802      	ldr	r0, [sp, #8]
 8013d66:	f003 f943 	bl	8016ff0 <_free_r>
 8013d6a:	e728      	b.n	8013bbe <_realloc_r+0x152>
 8013d6c:	68a3      	ldr	r3, [r4, #8]
 8013d6e:	6083      	str	r3, [r0, #8]
 8013d70:	68e3      	ldr	r3, [r4, #12]
 8013d72:	60c3      	str	r3, [r0, #12]
 8013d74:	2a24      	cmp	r2, #36	; 0x24
 8013d76:	d004      	beq.n	8013d82 <_realloc_r+0x316>
 8013d78:	0022      	movs	r2, r4
 8013d7a:	0003      	movs	r3, r0
 8013d7c:	3210      	adds	r2, #16
 8013d7e:	3310      	adds	r3, #16
 8013d80:	e7e9      	b.n	8013d56 <_realloc_r+0x2ea>
 8013d82:	6923      	ldr	r3, [r4, #16]
 8013d84:	0022      	movs	r2, r4
 8013d86:	6103      	str	r3, [r0, #16]
 8013d88:	0003      	movs	r3, r0
 8013d8a:	6961      	ldr	r1, [r4, #20]
 8013d8c:	3218      	adds	r2, #24
 8013d8e:	3318      	adds	r3, #24
 8013d90:	6141      	str	r1, [r0, #20]
 8013d92:	e7e0      	b.n	8013d56 <_realloc_r+0x2ea>
 8013d94:	0003      	movs	r3, r0
 8013d96:	0022      	movs	r2, r4
 8013d98:	e7dd      	b.n	8013d56 <_realloc_r+0x2ea>
 8013d9a:	0021      	movs	r1, r4
 8013d9c:	f003 fd79 	bl	8017892 <memmove>
 8013da0:	e7df      	b.n	8013d62 <_realloc_r+0x2f6>
 8013da2:	9e03      	ldr	r6, [sp, #12]
 8013da4:	e6c5      	b.n	8013b32 <_realloc_r+0xc6>
 8013da6:	4306      	orrs	r6, r0
 8013da8:	606e      	str	r6, [r5, #4]
 8013daa:	6851      	ldr	r1, [r2, #4]
 8013dac:	430b      	orrs	r3, r1
 8013dae:	6053      	str	r3, [r2, #4]
 8013db0:	e758      	b.n	8013c64 <_realloc_r+0x1f8>
 8013db2:	46c0      	nop			; (mov r8, r8)
 8013db4:	200004d8 	.word	0x200004d8

08013db8 <_sbrk_r>:
 8013db8:	2300      	movs	r3, #0
 8013dba:	b570      	push	{r4, r5, r6, lr}
 8013dbc:	4d06      	ldr	r5, [pc, #24]	; (8013dd8 <_sbrk_r+0x20>)
 8013dbe:	0004      	movs	r4, r0
 8013dc0:	0008      	movs	r0, r1
 8013dc2:	602b      	str	r3, [r5, #0]
 8013dc4:	f005 fede 	bl	8019b84 <_sbrk>
 8013dc8:	1c43      	adds	r3, r0, #1
 8013dca:	d103      	bne.n	8013dd4 <_sbrk_r+0x1c>
 8013dcc:	682b      	ldr	r3, [r5, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d000      	beq.n	8013dd4 <_sbrk_r+0x1c>
 8013dd2:	6023      	str	r3, [r4, #0]
 8013dd4:	bd70      	pop	{r4, r5, r6, pc}
 8013dd6:	46c0      	nop			; (mov r8, r8)
 8013dd8:	20006dcc 	.word	0x20006dcc

08013ddc <sprintf>:
 8013ddc:	b40e      	push	{r1, r2, r3}
 8013dde:	b500      	push	{lr}
 8013de0:	490b      	ldr	r1, [pc, #44]	; (8013e10 <sprintf+0x34>)
 8013de2:	b09c      	sub	sp, #112	; 0x70
 8013de4:	ab1d      	add	r3, sp, #116	; 0x74
 8013de6:	9002      	str	r0, [sp, #8]
 8013de8:	9006      	str	r0, [sp, #24]
 8013dea:	9107      	str	r1, [sp, #28]
 8013dec:	9104      	str	r1, [sp, #16]
 8013dee:	4809      	ldr	r0, [pc, #36]	; (8013e14 <sprintf+0x38>)
 8013df0:	4909      	ldr	r1, [pc, #36]	; (8013e18 <sprintf+0x3c>)
 8013df2:	cb04      	ldmia	r3!, {r2}
 8013df4:	9105      	str	r1, [sp, #20]
 8013df6:	6800      	ldr	r0, [r0, #0]
 8013df8:	a902      	add	r1, sp, #8
 8013dfa:	9301      	str	r3, [sp, #4]
 8013dfc:	f000 ff74 	bl	8014ce8 <_svfprintf_r>
 8013e00:	2300      	movs	r3, #0
 8013e02:	9a02      	ldr	r2, [sp, #8]
 8013e04:	7013      	strb	r3, [r2, #0]
 8013e06:	b01c      	add	sp, #112	; 0x70
 8013e08:	bc08      	pop	{r3}
 8013e0a:	b003      	add	sp, #12
 8013e0c:	4718      	bx	r3
 8013e0e:	46c0      	nop			; (mov r8, r8)
 8013e10:	7fffffff 	.word	0x7fffffff
 8013e14:	200000ac 	.word	0x200000ac
 8013e18:	ffff0208 	.word	0xffff0208

08013e1c <strcat>:
 8013e1c:	0002      	movs	r2, r0
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	7813      	ldrb	r3, [r2, #0]
 8013e22:	0014      	movs	r4, r2
 8013e24:	3201      	adds	r2, #1
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d1fa      	bne.n	8013e20 <strcat+0x4>
 8013e2a:	5cca      	ldrb	r2, [r1, r3]
 8013e2c:	54e2      	strb	r2, [r4, r3]
 8013e2e:	3301      	adds	r3, #1
 8013e30:	2a00      	cmp	r2, #0
 8013e32:	d1fa      	bne.n	8013e2a <strcat+0xe>
 8013e34:	bd10      	pop	{r4, pc}

08013e36 <strchr>:
 8013e36:	b2c9      	uxtb	r1, r1
 8013e38:	7803      	ldrb	r3, [r0, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d004      	beq.n	8013e48 <strchr+0x12>
 8013e3e:	428b      	cmp	r3, r1
 8013e40:	d100      	bne.n	8013e44 <strchr+0xe>
 8013e42:	4770      	bx	lr
 8013e44:	3001      	adds	r0, #1
 8013e46:	e7f7      	b.n	8013e38 <strchr+0x2>
 8013e48:	424b      	negs	r3, r1
 8013e4a:	4159      	adcs	r1, r3
 8013e4c:	4249      	negs	r1, r1
 8013e4e:	4008      	ands	r0, r1
 8013e50:	e7f7      	b.n	8013e42 <strchr+0xc>

08013e52 <strcpy>:
 8013e52:	0003      	movs	r3, r0
 8013e54:	780a      	ldrb	r2, [r1, #0]
 8013e56:	3101      	adds	r1, #1
 8013e58:	701a      	strb	r2, [r3, #0]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	2a00      	cmp	r2, #0
 8013e5e:	d1f9      	bne.n	8013e54 <strcpy+0x2>
 8013e60:	4770      	bx	lr

08013e62 <strncmp>:
 8013e62:	b530      	push	{r4, r5, lr}
 8013e64:	0005      	movs	r5, r0
 8013e66:	1e10      	subs	r0, r2, #0
 8013e68:	d00b      	beq.n	8013e82 <strncmp+0x20>
 8013e6a:	2400      	movs	r4, #0
 8013e6c:	3a01      	subs	r2, #1
 8013e6e:	5d2b      	ldrb	r3, [r5, r4]
 8013e70:	5d08      	ldrb	r0, [r1, r4]
 8013e72:	4283      	cmp	r3, r0
 8013e74:	d104      	bne.n	8013e80 <strncmp+0x1e>
 8013e76:	4294      	cmp	r4, r2
 8013e78:	d002      	beq.n	8013e80 <strncmp+0x1e>
 8013e7a:	3401      	adds	r4, #1
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1f6      	bne.n	8013e6e <strncmp+0xc>
 8013e80:	1a18      	subs	r0, r3, r0
 8013e82:	bd30      	pop	{r4, r5, pc}

08013e84 <strncpy>:
 8013e84:	0003      	movs	r3, r0
 8013e86:	b530      	push	{r4, r5, lr}
 8013e88:	001d      	movs	r5, r3
 8013e8a:	2a00      	cmp	r2, #0
 8013e8c:	d006      	beq.n	8013e9c <strncpy+0x18>
 8013e8e:	780c      	ldrb	r4, [r1, #0]
 8013e90:	3a01      	subs	r2, #1
 8013e92:	3301      	adds	r3, #1
 8013e94:	702c      	strb	r4, [r5, #0]
 8013e96:	3101      	adds	r1, #1
 8013e98:	2c00      	cmp	r4, #0
 8013e9a:	d1f5      	bne.n	8013e88 <strncpy+0x4>
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	189a      	adds	r2, r3, r2
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d100      	bne.n	8013ea6 <strncpy+0x22>
 8013ea4:	bd30      	pop	{r4, r5, pc}
 8013ea6:	7019      	strb	r1, [r3, #0]
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	e7f9      	b.n	8013ea0 <strncpy+0x1c>

08013eac <sulp>:
 8013eac:	b570      	push	{r4, r5, r6, lr}
 8013eae:	0016      	movs	r6, r2
 8013eb0:	000d      	movs	r5, r1
 8013eb2:	f004 f837 	bl	8017f24 <__ulp>
 8013eb6:	2e00      	cmp	r6, #0
 8013eb8:	d00d      	beq.n	8013ed6 <sulp+0x2a>
 8013eba:	236b      	movs	r3, #107	; 0x6b
 8013ebc:	006a      	lsls	r2, r5, #1
 8013ebe:	0d52      	lsrs	r2, r2, #21
 8013ec0:	1a9b      	subs	r3, r3, r2
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	dd07      	ble.n	8013ed6 <sulp+0x2a>
 8013ec6:	2400      	movs	r4, #0
 8013ec8:	4a03      	ldr	r2, [pc, #12]	; (8013ed8 <sulp+0x2c>)
 8013eca:	051b      	lsls	r3, r3, #20
 8013ecc:	189d      	adds	r5, r3, r2
 8013ece:	002b      	movs	r3, r5
 8013ed0:	0022      	movs	r2, r4
 8013ed2:	f7ee f963 	bl	800219c <__aeabi_dmul>
 8013ed6:	bd70      	pop	{r4, r5, r6, pc}
 8013ed8:	3ff00000 	.word	0x3ff00000

08013edc <_strtod_l>:
 8013edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ede:	001d      	movs	r5, r3
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	b0a7      	sub	sp, #156	; 0x9c
 8013ee4:	9322      	str	r3, [sp, #136]	; 0x88
 8013ee6:	4bae      	ldr	r3, [pc, #696]	; (80141a0 <_strtod_l+0x2c4>)
 8013ee8:	9005      	str	r0, [sp, #20]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	9108      	str	r1, [sp, #32]
 8013eee:	0018      	movs	r0, r3
 8013ef0:	9307      	str	r3, [sp, #28]
 8013ef2:	921d      	str	r2, [sp, #116]	; 0x74
 8013ef4:	f7ec f910 	bl	8000118 <strlen>
 8013ef8:	2600      	movs	r6, #0
 8013efa:	0004      	movs	r4, r0
 8013efc:	2700      	movs	r7, #0
 8013efe:	9b08      	ldr	r3, [sp, #32]
 8013f00:	9321      	str	r3, [sp, #132]	; 0x84
 8013f02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f04:	7813      	ldrb	r3, [r2, #0]
 8013f06:	2b2b      	cmp	r3, #43	; 0x2b
 8013f08:	d058      	beq.n	8013fbc <_strtod_l+0xe0>
 8013f0a:	d844      	bhi.n	8013f96 <_strtod_l+0xba>
 8013f0c:	2b0d      	cmp	r3, #13
 8013f0e:	d83d      	bhi.n	8013f8c <_strtod_l+0xb0>
 8013f10:	2b08      	cmp	r3, #8
 8013f12:	d83d      	bhi.n	8013f90 <_strtod_l+0xb4>
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d047      	beq.n	8013fa8 <_strtod_l+0xcc>
 8013f18:	2300      	movs	r3, #0
 8013f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f20:	920a      	str	r2, [sp, #40]	; 0x28
 8013f22:	9306      	str	r3, [sp, #24]
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	2b30      	cmp	r3, #48	; 0x30
 8013f28:	d000      	beq.n	8013f2c <_strtod_l+0x50>
 8013f2a:	e083      	b.n	8014034 <_strtod_l+0x158>
 8013f2c:	9b06      	ldr	r3, [sp, #24]
 8013f2e:	3220      	adds	r2, #32
 8013f30:	785b      	ldrb	r3, [r3, #1]
 8013f32:	4393      	bics	r3, r2
 8013f34:	2b58      	cmp	r3, #88	; 0x58
 8013f36:	d000      	beq.n	8013f3a <_strtod_l+0x5e>
 8013f38:	e072      	b.n	8014020 <_strtod_l+0x144>
 8013f3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f3c:	9502      	str	r5, [sp, #8]
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	ab22      	add	r3, sp, #136	; 0x88
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	4a97      	ldr	r2, [pc, #604]	; (80141a4 <_strtod_l+0x2c8>)
 8013f46:	ab23      	add	r3, sp, #140	; 0x8c
 8013f48:	9805      	ldr	r0, [sp, #20]
 8013f4a:	a921      	add	r1, sp, #132	; 0x84
 8013f4c:	f003 f96c 	bl	8017228 <__gethex>
 8013f50:	2307      	movs	r3, #7
 8013f52:	0005      	movs	r5, r0
 8013f54:	0004      	movs	r4, r0
 8013f56:	401d      	ands	r5, r3
 8013f58:	4218      	tst	r0, r3
 8013f5a:	d006      	beq.n	8013f6a <_strtod_l+0x8e>
 8013f5c:	2d06      	cmp	r5, #6
 8013f5e:	d12f      	bne.n	8013fc0 <_strtod_l+0xe4>
 8013f60:	9b06      	ldr	r3, [sp, #24]
 8013f62:	3301      	adds	r3, #1
 8013f64:	9321      	str	r3, [sp, #132]	; 0x84
 8013f66:	2300      	movs	r3, #0
 8013f68:	9310      	str	r3, [sp, #64]	; 0x40
 8013f6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d002      	beq.n	8013f76 <_strtod_l+0x9a>
 8013f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f72:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d01c      	beq.n	8013fb6 <_strtod_l+0xda>
 8013f7c:	2380      	movs	r3, #128	; 0x80
 8013f7e:	0032      	movs	r2, r6
 8013f80:	061b      	lsls	r3, r3, #24
 8013f82:	18fb      	adds	r3, r7, r3
 8013f84:	0010      	movs	r0, r2
 8013f86:	0019      	movs	r1, r3
 8013f88:	b027      	add	sp, #156	; 0x9c
 8013f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8c:	2b20      	cmp	r3, #32
 8013f8e:	d1c3      	bne.n	8013f18 <_strtod_l+0x3c>
 8013f90:	3201      	adds	r2, #1
 8013f92:	9221      	str	r2, [sp, #132]	; 0x84
 8013f94:	e7b5      	b.n	8013f02 <_strtod_l+0x26>
 8013f96:	2b2d      	cmp	r3, #45	; 0x2d
 8013f98:	d1be      	bne.n	8013f18 <_strtod_l+0x3c>
 8013f9a:	3b2c      	subs	r3, #44	; 0x2c
 8013f9c:	9310      	str	r3, [sp, #64]	; 0x40
 8013f9e:	1c53      	adds	r3, r2, #1
 8013fa0:	9321      	str	r3, [sp, #132]	; 0x84
 8013fa2:	7853      	ldrb	r3, [r2, #1]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d1b9      	bne.n	8013f1c <_strtod_l+0x40>
 8013fa8:	9b08      	ldr	r3, [sp, #32]
 8013faa:	9321      	str	r3, [sp, #132]	; 0x84
 8013fac:	2300      	movs	r3, #0
 8013fae:	9310      	str	r3, [sp, #64]	; 0x40
 8013fb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d1dc      	bne.n	8013f70 <_strtod_l+0x94>
 8013fb6:	0032      	movs	r2, r6
 8013fb8:	003b      	movs	r3, r7
 8013fba:	e7e3      	b.n	8013f84 <_strtod_l+0xa8>
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	e7ed      	b.n	8013f9c <_strtod_l+0xc0>
 8013fc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013fc2:	2a00      	cmp	r2, #0
 8013fc4:	d007      	beq.n	8013fd6 <_strtod_l+0xfa>
 8013fc6:	2135      	movs	r1, #53	; 0x35
 8013fc8:	a824      	add	r0, sp, #144	; 0x90
 8013fca:	f004 f8aa 	bl	8018122 <__copybits>
 8013fce:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013fd0:	9805      	ldr	r0, [sp, #20]
 8013fd2:	f003 fc99 	bl	8017908 <_Bfree>
 8013fd6:	1e68      	subs	r0, r5, #1
 8013fd8:	2805      	cmp	r0, #5
 8013fda:	d806      	bhi.n	8013fea <_strtod_l+0x10e>
 8013fdc:	f7ec f8a4 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013fe0:	1c190b0e 	.word	0x1c190b0e
 8013fe4:	030e      	.short	0x030e
 8013fe6:	2700      	movs	r7, #0
 8013fe8:	003e      	movs	r6, r7
 8013fea:	0723      	lsls	r3, r4, #28
 8013fec:	d5bd      	bpl.n	8013f6a <_strtod_l+0x8e>
 8013fee:	2380      	movs	r3, #128	; 0x80
 8013ff0:	061b      	lsls	r3, r3, #24
 8013ff2:	431f      	orrs	r7, r3
 8013ff4:	e7b9      	b.n	8013f6a <_strtod_l+0x8e>
 8013ff6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013ff8:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013ffa:	e7f6      	b.n	8013fea <_strtod_l+0x10e>
 8013ffc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013ffe:	4a6a      	ldr	r2, [pc, #424]	; (80141a8 <_strtod_l+0x2cc>)
 8014000:	496a      	ldr	r1, [pc, #424]	; (80141ac <_strtod_l+0x2d0>)
 8014002:	401a      	ands	r2, r3
 8014004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014006:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014008:	185b      	adds	r3, r3, r1
 801400a:	051b      	lsls	r3, r3, #20
 801400c:	431a      	orrs	r2, r3
 801400e:	0017      	movs	r7, r2
 8014010:	e7eb      	b.n	8013fea <_strtod_l+0x10e>
 8014012:	2600      	movs	r6, #0
 8014014:	4f66      	ldr	r7, [pc, #408]	; (80141b0 <_strtod_l+0x2d4>)
 8014016:	e7e8      	b.n	8013fea <_strtod_l+0x10e>
 8014018:	2601      	movs	r6, #1
 801401a:	4f66      	ldr	r7, [pc, #408]	; (80141b4 <_strtod_l+0x2d8>)
 801401c:	4276      	negs	r6, r6
 801401e:	e7e4      	b.n	8013fea <_strtod_l+0x10e>
 8014020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014022:	1c5a      	adds	r2, r3, #1
 8014024:	9221      	str	r2, [sp, #132]	; 0x84
 8014026:	785b      	ldrb	r3, [r3, #1]
 8014028:	2b30      	cmp	r3, #48	; 0x30
 801402a:	d0f9      	beq.n	8014020 <_strtod_l+0x144>
 801402c:	2b00      	cmp	r3, #0
 801402e:	d09c      	beq.n	8013f6a <_strtod_l+0x8e>
 8014030:	2301      	movs	r3, #1
 8014032:	930a      	str	r3, [sp, #40]	; 0x28
 8014034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014036:	220a      	movs	r2, #10
 8014038:	9311      	str	r3, [sp, #68]	; 0x44
 801403a:	2300      	movs	r3, #0
 801403c:	930e      	str	r3, [sp, #56]	; 0x38
 801403e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014040:	9309      	str	r3, [sp, #36]	; 0x24
 8014042:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014044:	7805      	ldrb	r5, [r0, #0]
 8014046:	002b      	movs	r3, r5
 8014048:	3b30      	subs	r3, #48	; 0x30
 801404a:	b2d9      	uxtb	r1, r3
 801404c:	2909      	cmp	r1, #9
 801404e:	d927      	bls.n	80140a0 <_strtod_l+0x1c4>
 8014050:	0022      	movs	r2, r4
 8014052:	9907      	ldr	r1, [sp, #28]
 8014054:	f7ff ff05 	bl	8013e62 <strncmp>
 8014058:	2800      	cmp	r0, #0
 801405a:	d033      	beq.n	80140c4 <_strtod_l+0x1e8>
 801405c:	2000      	movs	r0, #0
 801405e:	002b      	movs	r3, r5
 8014060:	4684      	mov	ip, r0
 8014062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014064:	900c      	str	r0, [sp, #48]	; 0x30
 8014066:	9206      	str	r2, [sp, #24]
 8014068:	2220      	movs	r2, #32
 801406a:	0019      	movs	r1, r3
 801406c:	4391      	bics	r1, r2
 801406e:	000a      	movs	r2, r1
 8014070:	2100      	movs	r1, #0
 8014072:	9107      	str	r1, [sp, #28]
 8014074:	2a45      	cmp	r2, #69	; 0x45
 8014076:	d000      	beq.n	801407a <_strtod_l+0x19e>
 8014078:	e0c5      	b.n	8014206 <_strtod_l+0x32a>
 801407a:	9b06      	ldr	r3, [sp, #24]
 801407c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801407e:	4303      	orrs	r3, r0
 8014080:	4313      	orrs	r3, r2
 8014082:	428b      	cmp	r3, r1
 8014084:	d090      	beq.n	8013fa8 <_strtod_l+0xcc>
 8014086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014088:	9308      	str	r3, [sp, #32]
 801408a:	3301      	adds	r3, #1
 801408c:	9321      	str	r3, [sp, #132]	; 0x84
 801408e:	9b08      	ldr	r3, [sp, #32]
 8014090:	785b      	ldrb	r3, [r3, #1]
 8014092:	2b2b      	cmp	r3, #43	; 0x2b
 8014094:	d075      	beq.n	8014182 <_strtod_l+0x2a6>
 8014096:	000c      	movs	r4, r1
 8014098:	2b2d      	cmp	r3, #45	; 0x2d
 801409a:	d178      	bne.n	801418e <_strtod_l+0x2b2>
 801409c:	2401      	movs	r4, #1
 801409e:	e071      	b.n	8014184 <_strtod_l+0x2a8>
 80140a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140a2:	2908      	cmp	r1, #8
 80140a4:	dc09      	bgt.n	80140ba <_strtod_l+0x1de>
 80140a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140a8:	4351      	muls	r1, r2
 80140aa:	185b      	adds	r3, r3, r1
 80140ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80140ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b0:	3001      	adds	r0, #1
 80140b2:	3301      	adds	r3, #1
 80140b4:	9309      	str	r3, [sp, #36]	; 0x24
 80140b6:	9021      	str	r0, [sp, #132]	; 0x84
 80140b8:	e7c3      	b.n	8014042 <_strtod_l+0x166>
 80140ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80140bc:	4351      	muls	r1, r2
 80140be:	185b      	adds	r3, r3, r1
 80140c0:	930e      	str	r3, [sp, #56]	; 0x38
 80140c2:	e7f4      	b.n	80140ae <_strtod_l+0x1d2>
 80140c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140c8:	191c      	adds	r4, r3, r4
 80140ca:	9421      	str	r4, [sp, #132]	; 0x84
 80140cc:	7823      	ldrb	r3, [r4, #0]
 80140ce:	2a00      	cmp	r2, #0
 80140d0:	d039      	beq.n	8014146 <_strtod_l+0x26a>
 80140d2:	900c      	str	r0, [sp, #48]	; 0x30
 80140d4:	9206      	str	r2, [sp, #24]
 80140d6:	001a      	movs	r2, r3
 80140d8:	3a30      	subs	r2, #48	; 0x30
 80140da:	2a09      	cmp	r2, #9
 80140dc:	d912      	bls.n	8014104 <_strtod_l+0x228>
 80140de:	2201      	movs	r2, #1
 80140e0:	4694      	mov	ip, r2
 80140e2:	e7c1      	b.n	8014068 <_strtod_l+0x18c>
 80140e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140e6:	3001      	adds	r0, #1
 80140e8:	1c5a      	adds	r2, r3, #1
 80140ea:	9221      	str	r2, [sp, #132]	; 0x84
 80140ec:	785b      	ldrb	r3, [r3, #1]
 80140ee:	2b30      	cmp	r3, #48	; 0x30
 80140f0:	d0f8      	beq.n	80140e4 <_strtod_l+0x208>
 80140f2:	001a      	movs	r2, r3
 80140f4:	3a31      	subs	r2, #49	; 0x31
 80140f6:	2a08      	cmp	r2, #8
 80140f8:	d83e      	bhi.n	8014178 <_strtod_l+0x29c>
 80140fa:	900c      	str	r0, [sp, #48]	; 0x30
 80140fc:	2000      	movs	r0, #0
 80140fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014100:	9006      	str	r0, [sp, #24]
 8014102:	9211      	str	r2, [sp, #68]	; 0x44
 8014104:	001a      	movs	r2, r3
 8014106:	9906      	ldr	r1, [sp, #24]
 8014108:	1c44      	adds	r4, r0, #1
 801410a:	3a30      	subs	r2, #48	; 0x30
 801410c:	2b30      	cmp	r3, #48	; 0x30
 801410e:	d013      	beq.n	8014138 <_strtod_l+0x25c>
 8014110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014112:	191b      	adds	r3, r3, r4
 8014114:	930c      	str	r3, [sp, #48]	; 0x30
 8014116:	1844      	adds	r4, r0, r1
 8014118:	000b      	movs	r3, r1
 801411a:	210a      	movs	r1, #10
 801411c:	429c      	cmp	r4, r3
 801411e:	d114      	bne.n	801414a <_strtod_l+0x26e>
 8014120:	9b06      	ldr	r3, [sp, #24]
 8014122:	1c59      	adds	r1, r3, #1
 8014124:	1809      	adds	r1, r1, r0
 8014126:	1818      	adds	r0, r3, r0
 8014128:	2808      	cmp	r0, #8
 801412a:	dc1c      	bgt.n	8014166 <_strtod_l+0x28a>
 801412c:	230a      	movs	r3, #10
 801412e:	2400      	movs	r4, #0
 8014130:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014132:	4343      	muls	r3, r0
 8014134:	18d3      	adds	r3, r2, r3
 8014136:	930b      	str	r3, [sp, #44]	; 0x2c
 8014138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801413a:	0020      	movs	r0, r4
 801413c:	1c5a      	adds	r2, r3, #1
 801413e:	9221      	str	r2, [sp, #132]	; 0x84
 8014140:	785b      	ldrb	r3, [r3, #1]
 8014142:	9106      	str	r1, [sp, #24]
 8014144:	e7c7      	b.n	80140d6 <_strtod_l+0x1fa>
 8014146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014148:	e7d1      	b.n	80140ee <_strtod_l+0x212>
 801414a:	2b08      	cmp	r3, #8
 801414c:	dc04      	bgt.n	8014158 <_strtod_l+0x27c>
 801414e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014150:	434d      	muls	r5, r1
 8014152:	950b      	str	r5, [sp, #44]	; 0x2c
 8014154:	3301      	adds	r3, #1
 8014156:	e7e1      	b.n	801411c <_strtod_l+0x240>
 8014158:	1c5d      	adds	r5, r3, #1
 801415a:	2d10      	cmp	r5, #16
 801415c:	dcfa      	bgt.n	8014154 <_strtod_l+0x278>
 801415e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014160:	434d      	muls	r5, r1
 8014162:	950e      	str	r5, [sp, #56]	; 0x38
 8014164:	e7f6      	b.n	8014154 <_strtod_l+0x278>
 8014166:	2400      	movs	r4, #0
 8014168:	2910      	cmp	r1, #16
 801416a:	dce5      	bgt.n	8014138 <_strtod_l+0x25c>
 801416c:	230a      	movs	r3, #10
 801416e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014170:	4343      	muls	r3, r0
 8014172:	18d3      	adds	r3, r2, r3
 8014174:	930e      	str	r3, [sp, #56]	; 0x38
 8014176:	e7df      	b.n	8014138 <_strtod_l+0x25c>
 8014178:	2200      	movs	r2, #0
 801417a:	920c      	str	r2, [sp, #48]	; 0x30
 801417c:	9206      	str	r2, [sp, #24]
 801417e:	3201      	adds	r2, #1
 8014180:	e7ae      	b.n	80140e0 <_strtod_l+0x204>
 8014182:	2400      	movs	r4, #0
 8014184:	9b08      	ldr	r3, [sp, #32]
 8014186:	3302      	adds	r3, #2
 8014188:	9321      	str	r3, [sp, #132]	; 0x84
 801418a:	9b08      	ldr	r3, [sp, #32]
 801418c:	789b      	ldrb	r3, [r3, #2]
 801418e:	001a      	movs	r2, r3
 8014190:	3a30      	subs	r2, #48	; 0x30
 8014192:	2a09      	cmp	r2, #9
 8014194:	d914      	bls.n	80141c0 <_strtod_l+0x2e4>
 8014196:	9a08      	ldr	r2, [sp, #32]
 8014198:	9221      	str	r2, [sp, #132]	; 0x84
 801419a:	2200      	movs	r2, #0
 801419c:	e032      	b.n	8014204 <_strtod_l+0x328>
 801419e:	46c0      	nop			; (mov r8, r8)
 80141a0:	0801cdf4 	.word	0x0801cdf4
 80141a4:	0801cc64 	.word	0x0801cc64
 80141a8:	ffefffff 	.word	0xffefffff
 80141ac:	00000433 	.word	0x00000433
 80141b0:	7ff00000 	.word	0x7ff00000
 80141b4:	7fffffff 	.word	0x7fffffff
 80141b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141ba:	1c5a      	adds	r2, r3, #1
 80141bc:	9221      	str	r2, [sp, #132]	; 0x84
 80141be:	785b      	ldrb	r3, [r3, #1]
 80141c0:	2b30      	cmp	r3, #48	; 0x30
 80141c2:	d0f9      	beq.n	80141b8 <_strtod_l+0x2dc>
 80141c4:	2200      	movs	r2, #0
 80141c6:	9207      	str	r2, [sp, #28]
 80141c8:	001a      	movs	r2, r3
 80141ca:	3a31      	subs	r2, #49	; 0x31
 80141cc:	2a08      	cmp	r2, #8
 80141ce:	d81a      	bhi.n	8014206 <_strtod_l+0x32a>
 80141d0:	3b30      	subs	r3, #48	; 0x30
 80141d2:	001a      	movs	r2, r3
 80141d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141d6:	9307      	str	r3, [sp, #28]
 80141d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141da:	1c59      	adds	r1, r3, #1
 80141dc:	9121      	str	r1, [sp, #132]	; 0x84
 80141de:	785b      	ldrb	r3, [r3, #1]
 80141e0:	001d      	movs	r5, r3
 80141e2:	3d30      	subs	r5, #48	; 0x30
 80141e4:	2d09      	cmp	r5, #9
 80141e6:	d939      	bls.n	801425c <_strtod_l+0x380>
 80141e8:	9d07      	ldr	r5, [sp, #28]
 80141ea:	1b49      	subs	r1, r1, r5
 80141ec:	4daf      	ldr	r5, [pc, #700]	; (80144ac <_strtod_l+0x5d0>)
 80141ee:	9507      	str	r5, [sp, #28]
 80141f0:	2908      	cmp	r1, #8
 80141f2:	dc03      	bgt.n	80141fc <_strtod_l+0x320>
 80141f4:	9207      	str	r2, [sp, #28]
 80141f6:	42aa      	cmp	r2, r5
 80141f8:	dd00      	ble.n	80141fc <_strtod_l+0x320>
 80141fa:	9507      	str	r5, [sp, #28]
 80141fc:	2c00      	cmp	r4, #0
 80141fe:	d002      	beq.n	8014206 <_strtod_l+0x32a>
 8014200:	9a07      	ldr	r2, [sp, #28]
 8014202:	4252      	negs	r2, r2
 8014204:	9207      	str	r2, [sp, #28]
 8014206:	9a06      	ldr	r2, [sp, #24]
 8014208:	2a00      	cmp	r2, #0
 801420a:	d14b      	bne.n	80142a4 <_strtod_l+0x3c8>
 801420c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801420e:	4310      	orrs	r0, r2
 8014210:	d000      	beq.n	8014214 <_strtod_l+0x338>
 8014212:	e6aa      	b.n	8013f6a <_strtod_l+0x8e>
 8014214:	4662      	mov	r2, ip
 8014216:	2a00      	cmp	r2, #0
 8014218:	d000      	beq.n	801421c <_strtod_l+0x340>
 801421a:	e6c5      	b.n	8013fa8 <_strtod_l+0xcc>
 801421c:	2b69      	cmp	r3, #105	; 0x69
 801421e:	d025      	beq.n	801426c <_strtod_l+0x390>
 8014220:	dc21      	bgt.n	8014266 <_strtod_l+0x38a>
 8014222:	2b49      	cmp	r3, #73	; 0x49
 8014224:	d022      	beq.n	801426c <_strtod_l+0x390>
 8014226:	2b4e      	cmp	r3, #78	; 0x4e
 8014228:	d000      	beq.n	801422c <_strtod_l+0x350>
 801422a:	e6bd      	b.n	8013fa8 <_strtod_l+0xcc>
 801422c:	49a0      	ldr	r1, [pc, #640]	; (80144b0 <_strtod_l+0x5d4>)
 801422e:	a821      	add	r0, sp, #132	; 0x84
 8014230:	f003 fa48 	bl	80176c4 <__match>
 8014234:	2800      	cmp	r0, #0
 8014236:	d100      	bne.n	801423a <_strtod_l+0x35e>
 8014238:	e6b6      	b.n	8013fa8 <_strtod_l+0xcc>
 801423a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b28      	cmp	r3, #40	; 0x28
 8014240:	d12a      	bne.n	8014298 <_strtod_l+0x3bc>
 8014242:	499c      	ldr	r1, [pc, #624]	; (80144b4 <_strtod_l+0x5d8>)
 8014244:	aa24      	add	r2, sp, #144	; 0x90
 8014246:	a821      	add	r0, sp, #132	; 0x84
 8014248:	f003 fa50 	bl	80176ec <__hexnan>
 801424c:	2805      	cmp	r0, #5
 801424e:	d123      	bne.n	8014298 <_strtod_l+0x3bc>
 8014250:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014252:	4a99      	ldr	r2, [pc, #612]	; (80144b8 <_strtod_l+0x5dc>)
 8014254:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014256:	431a      	orrs	r2, r3
 8014258:	0017      	movs	r7, r2
 801425a:	e686      	b.n	8013f6a <_strtod_l+0x8e>
 801425c:	210a      	movs	r1, #10
 801425e:	434a      	muls	r2, r1
 8014260:	18d2      	adds	r2, r2, r3
 8014262:	3a30      	subs	r2, #48	; 0x30
 8014264:	e7b8      	b.n	80141d8 <_strtod_l+0x2fc>
 8014266:	2b6e      	cmp	r3, #110	; 0x6e
 8014268:	d0e0      	beq.n	801422c <_strtod_l+0x350>
 801426a:	e69d      	b.n	8013fa8 <_strtod_l+0xcc>
 801426c:	4993      	ldr	r1, [pc, #588]	; (80144bc <_strtod_l+0x5e0>)
 801426e:	a821      	add	r0, sp, #132	; 0x84
 8014270:	f003 fa28 	bl	80176c4 <__match>
 8014274:	2800      	cmp	r0, #0
 8014276:	d100      	bne.n	801427a <_strtod_l+0x39e>
 8014278:	e696      	b.n	8013fa8 <_strtod_l+0xcc>
 801427a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801427c:	4990      	ldr	r1, [pc, #576]	; (80144c0 <_strtod_l+0x5e4>)
 801427e:	3b01      	subs	r3, #1
 8014280:	a821      	add	r0, sp, #132	; 0x84
 8014282:	9321      	str	r3, [sp, #132]	; 0x84
 8014284:	f003 fa1e 	bl	80176c4 <__match>
 8014288:	2800      	cmp	r0, #0
 801428a:	d102      	bne.n	8014292 <_strtod_l+0x3b6>
 801428c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801428e:	3301      	adds	r3, #1
 8014290:	9321      	str	r3, [sp, #132]	; 0x84
 8014292:	2600      	movs	r6, #0
 8014294:	4f88      	ldr	r7, [pc, #544]	; (80144b8 <_strtod_l+0x5dc>)
 8014296:	e668      	b.n	8013f6a <_strtod_l+0x8e>
 8014298:	488a      	ldr	r0, [pc, #552]	; (80144c4 <_strtod_l+0x5e8>)
 801429a:	f003 ffb9 	bl	8018210 <nan>
 801429e:	0006      	movs	r6, r0
 80142a0:	000f      	movs	r7, r1
 80142a2:	e662      	b.n	8013f6a <_strtod_l+0x8e>
 80142a4:	9b07      	ldr	r3, [sp, #28]
 80142a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142a8:	1a9b      	subs	r3, r3, r2
 80142aa:	930a      	str	r3, [sp, #40]	; 0x28
 80142ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <_strtod_l+0x3da>
 80142b2:	9b06      	ldr	r3, [sp, #24]
 80142b4:	9309      	str	r3, [sp, #36]	; 0x24
 80142b6:	9c06      	ldr	r4, [sp, #24]
 80142b8:	2c10      	cmp	r4, #16
 80142ba:	dd00      	ble.n	80142be <_strtod_l+0x3e2>
 80142bc:	2410      	movs	r4, #16
 80142be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80142c0:	f7ee fdee 	bl	8002ea0 <__aeabi_ui2d>
 80142c4:	9b06      	ldr	r3, [sp, #24]
 80142c6:	0006      	movs	r6, r0
 80142c8:	000f      	movs	r7, r1
 80142ca:	2b09      	cmp	r3, #9
 80142cc:	dd15      	ble.n	80142fa <_strtod_l+0x41e>
 80142ce:	0022      	movs	r2, r4
 80142d0:	4b7d      	ldr	r3, [pc, #500]	; (80144c8 <_strtod_l+0x5ec>)
 80142d2:	3a09      	subs	r2, #9
 80142d4:	00d2      	lsls	r2, r2, #3
 80142d6:	189b      	adds	r3, r3, r2
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	f7ed ff5e 	bl	800219c <__aeabi_dmul>
 80142e0:	0006      	movs	r6, r0
 80142e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80142e4:	000f      	movs	r7, r1
 80142e6:	f7ee fddb 	bl	8002ea0 <__aeabi_ui2d>
 80142ea:	0002      	movs	r2, r0
 80142ec:	000b      	movs	r3, r1
 80142ee:	0030      	movs	r0, r6
 80142f0:	0039      	movs	r1, r7
 80142f2:	f7ec ffe3 	bl	80012bc <__aeabi_dadd>
 80142f6:	0006      	movs	r6, r0
 80142f8:	000f      	movs	r7, r1
 80142fa:	9b06      	ldr	r3, [sp, #24]
 80142fc:	2b0f      	cmp	r3, #15
 80142fe:	dc39      	bgt.n	8014374 <_strtod_l+0x498>
 8014300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014302:	2b00      	cmp	r3, #0
 8014304:	d100      	bne.n	8014308 <_strtod_l+0x42c>
 8014306:	e630      	b.n	8013f6a <_strtod_l+0x8e>
 8014308:	dd24      	ble.n	8014354 <_strtod_l+0x478>
 801430a:	2b16      	cmp	r3, #22
 801430c:	dc09      	bgt.n	8014322 <_strtod_l+0x446>
 801430e:	00dd      	lsls	r5, r3, #3
 8014310:	0032      	movs	r2, r6
 8014312:	003b      	movs	r3, r7
 8014314:	4c6c      	ldr	r4, [pc, #432]	; (80144c8 <_strtod_l+0x5ec>)
 8014316:	1964      	adds	r4, r4, r5
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	6861      	ldr	r1, [r4, #4]
 801431c:	f7ed ff3e 	bl	800219c <__aeabi_dmul>
 8014320:	e7bd      	b.n	801429e <_strtod_l+0x3c2>
 8014322:	2325      	movs	r3, #37	; 0x25
 8014324:	9a06      	ldr	r2, [sp, #24]
 8014326:	1a9b      	subs	r3, r3, r2
 8014328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801432a:	4293      	cmp	r3, r2
 801432c:	db22      	blt.n	8014374 <_strtod_l+0x498>
 801432e:	240f      	movs	r4, #15
 8014330:	9b06      	ldr	r3, [sp, #24]
 8014332:	4d65      	ldr	r5, [pc, #404]	; (80144c8 <_strtod_l+0x5ec>)
 8014334:	1ae4      	subs	r4, r4, r3
 8014336:	00e1      	lsls	r1, r4, #3
 8014338:	1869      	adds	r1, r5, r1
 801433a:	0032      	movs	r2, r6
 801433c:	6808      	ldr	r0, [r1, #0]
 801433e:	6849      	ldr	r1, [r1, #4]
 8014340:	003b      	movs	r3, r7
 8014342:	f7ed ff2b 	bl	800219c <__aeabi_dmul>
 8014346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014348:	1b1c      	subs	r4, r3, r4
 801434a:	00e4      	lsls	r4, r4, #3
 801434c:	192c      	adds	r4, r5, r4
 801434e:	6822      	ldr	r2, [r4, #0]
 8014350:	6863      	ldr	r3, [r4, #4]
 8014352:	e7e3      	b.n	801431c <_strtod_l+0x440>
 8014354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014356:	3316      	adds	r3, #22
 8014358:	db0c      	blt.n	8014374 <_strtod_l+0x498>
 801435a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801435c:	9a07      	ldr	r2, [sp, #28]
 801435e:	0030      	movs	r0, r6
 8014360:	1a9a      	subs	r2, r3, r2
 8014362:	4b59      	ldr	r3, [pc, #356]	; (80144c8 <_strtod_l+0x5ec>)
 8014364:	00d2      	lsls	r2, r2, #3
 8014366:	189b      	adds	r3, r3, r2
 8014368:	0039      	movs	r1, r7
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	f7ed fb0f 	bl	8001990 <__aeabi_ddiv>
 8014372:	e794      	b.n	801429e <_strtod_l+0x3c2>
 8014374:	9b06      	ldr	r3, [sp, #24]
 8014376:	1b1c      	subs	r4, r3, r4
 8014378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801437a:	18e4      	adds	r4, r4, r3
 801437c:	2c00      	cmp	r4, #0
 801437e:	dd70      	ble.n	8014462 <_strtod_l+0x586>
 8014380:	230f      	movs	r3, #15
 8014382:	0021      	movs	r1, r4
 8014384:	4019      	ands	r1, r3
 8014386:	421c      	tst	r4, r3
 8014388:	d00a      	beq.n	80143a0 <_strtod_l+0x4c4>
 801438a:	00cb      	lsls	r3, r1, #3
 801438c:	494e      	ldr	r1, [pc, #312]	; (80144c8 <_strtod_l+0x5ec>)
 801438e:	0032      	movs	r2, r6
 8014390:	18c9      	adds	r1, r1, r3
 8014392:	6808      	ldr	r0, [r1, #0]
 8014394:	6849      	ldr	r1, [r1, #4]
 8014396:	003b      	movs	r3, r7
 8014398:	f7ed ff00 	bl	800219c <__aeabi_dmul>
 801439c:	0006      	movs	r6, r0
 801439e:	000f      	movs	r7, r1
 80143a0:	230f      	movs	r3, #15
 80143a2:	439c      	bics	r4, r3
 80143a4:	d048      	beq.n	8014438 <_strtod_l+0x55c>
 80143a6:	3326      	adds	r3, #38	; 0x26
 80143a8:	33ff      	adds	r3, #255	; 0xff
 80143aa:	429c      	cmp	r4, r3
 80143ac:	dd22      	ble.n	80143f4 <_strtod_l+0x518>
 80143ae:	2300      	movs	r3, #0
 80143b0:	9306      	str	r3, [sp, #24]
 80143b2:	9307      	str	r3, [sp, #28]
 80143b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80143b6:	9309      	str	r3, [sp, #36]	; 0x24
 80143b8:	2322      	movs	r3, #34	; 0x22
 80143ba:	2600      	movs	r6, #0
 80143bc:	9a05      	ldr	r2, [sp, #20]
 80143be:	4f3e      	ldr	r7, [pc, #248]	; (80144b8 <_strtod_l+0x5dc>)
 80143c0:	6013      	str	r3, [r2, #0]
 80143c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143c4:	42b3      	cmp	r3, r6
 80143c6:	d100      	bne.n	80143ca <_strtod_l+0x4ee>
 80143c8:	e5cf      	b.n	8013f6a <_strtod_l+0x8e>
 80143ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80143cc:	9805      	ldr	r0, [sp, #20]
 80143ce:	f003 fa9b 	bl	8017908 <_Bfree>
 80143d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80143d4:	9805      	ldr	r0, [sp, #20]
 80143d6:	f003 fa97 	bl	8017908 <_Bfree>
 80143da:	9907      	ldr	r1, [sp, #28]
 80143dc:	9805      	ldr	r0, [sp, #20]
 80143de:	f003 fa93 	bl	8017908 <_Bfree>
 80143e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143e4:	9805      	ldr	r0, [sp, #20]
 80143e6:	f003 fa8f 	bl	8017908 <_Bfree>
 80143ea:	9906      	ldr	r1, [sp, #24]
 80143ec:	9805      	ldr	r0, [sp, #20]
 80143ee:	f003 fa8b 	bl	8017908 <_Bfree>
 80143f2:	e5ba      	b.n	8013f6a <_strtod_l+0x8e>
 80143f4:	2300      	movs	r3, #0
 80143f6:	0030      	movs	r0, r6
 80143f8:	0039      	movs	r1, r7
 80143fa:	001d      	movs	r5, r3
 80143fc:	1124      	asrs	r4, r4, #4
 80143fe:	2c01      	cmp	r4, #1
 8014400:	dc1d      	bgt.n	801443e <_strtod_l+0x562>
 8014402:	2b00      	cmp	r3, #0
 8014404:	d001      	beq.n	801440a <_strtod_l+0x52e>
 8014406:	0006      	movs	r6, r0
 8014408:	000f      	movs	r7, r1
 801440a:	4b30      	ldr	r3, [pc, #192]	; (80144cc <_strtod_l+0x5f0>)
 801440c:	00ed      	lsls	r5, r5, #3
 801440e:	18ff      	adds	r7, r7, r3
 8014410:	4b2f      	ldr	r3, [pc, #188]	; (80144d0 <_strtod_l+0x5f4>)
 8014412:	0032      	movs	r2, r6
 8014414:	195d      	adds	r5, r3, r5
 8014416:	6828      	ldr	r0, [r5, #0]
 8014418:	6869      	ldr	r1, [r5, #4]
 801441a:	003b      	movs	r3, r7
 801441c:	f7ed febe 	bl	800219c <__aeabi_dmul>
 8014420:	4b25      	ldr	r3, [pc, #148]	; (80144b8 <_strtod_l+0x5dc>)
 8014422:	4a2c      	ldr	r2, [pc, #176]	; (80144d4 <_strtod_l+0x5f8>)
 8014424:	0006      	movs	r6, r0
 8014426:	400b      	ands	r3, r1
 8014428:	4293      	cmp	r3, r2
 801442a:	d8c0      	bhi.n	80143ae <_strtod_l+0x4d2>
 801442c:	4a2a      	ldr	r2, [pc, #168]	; (80144d8 <_strtod_l+0x5fc>)
 801442e:	4293      	cmp	r3, r2
 8014430:	d913      	bls.n	801445a <_strtod_l+0x57e>
 8014432:	2601      	movs	r6, #1
 8014434:	4f29      	ldr	r7, [pc, #164]	; (80144dc <_strtod_l+0x600>)
 8014436:	4276      	negs	r6, r6
 8014438:	2300      	movs	r3, #0
 801443a:	9308      	str	r3, [sp, #32]
 801443c:	e087      	b.n	801454e <_strtod_l+0x672>
 801443e:	2201      	movs	r2, #1
 8014440:	4214      	tst	r4, r2
 8014442:	d007      	beq.n	8014454 <_strtod_l+0x578>
 8014444:	4a22      	ldr	r2, [pc, #136]	; (80144d0 <_strtod_l+0x5f4>)
 8014446:	00eb      	lsls	r3, r5, #3
 8014448:	189b      	adds	r3, r3, r2
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	f7ed fea5 	bl	800219c <__aeabi_dmul>
 8014452:	2301      	movs	r3, #1
 8014454:	3501      	adds	r5, #1
 8014456:	1064      	asrs	r4, r4, #1
 8014458:	e7d1      	b.n	80143fe <_strtod_l+0x522>
 801445a:	23d4      	movs	r3, #212	; 0xd4
 801445c:	049b      	lsls	r3, r3, #18
 801445e:	18cf      	adds	r7, r1, r3
 8014460:	e7ea      	b.n	8014438 <_strtod_l+0x55c>
 8014462:	2c00      	cmp	r4, #0
 8014464:	d0e8      	beq.n	8014438 <_strtod_l+0x55c>
 8014466:	4264      	negs	r4, r4
 8014468:	220f      	movs	r2, #15
 801446a:	0023      	movs	r3, r4
 801446c:	4013      	ands	r3, r2
 801446e:	4214      	tst	r4, r2
 8014470:	d00a      	beq.n	8014488 <_strtod_l+0x5ac>
 8014472:	00da      	lsls	r2, r3, #3
 8014474:	4b14      	ldr	r3, [pc, #80]	; (80144c8 <_strtod_l+0x5ec>)
 8014476:	0030      	movs	r0, r6
 8014478:	189b      	adds	r3, r3, r2
 801447a:	0039      	movs	r1, r7
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	f7ed fa86 	bl	8001990 <__aeabi_ddiv>
 8014484:	0006      	movs	r6, r0
 8014486:	000f      	movs	r7, r1
 8014488:	1124      	asrs	r4, r4, #4
 801448a:	d0d5      	beq.n	8014438 <_strtod_l+0x55c>
 801448c:	2c1f      	cmp	r4, #31
 801448e:	dd27      	ble.n	80144e0 <_strtod_l+0x604>
 8014490:	2300      	movs	r3, #0
 8014492:	9306      	str	r3, [sp, #24]
 8014494:	9307      	str	r3, [sp, #28]
 8014496:	930b      	str	r3, [sp, #44]	; 0x2c
 8014498:	9309      	str	r3, [sp, #36]	; 0x24
 801449a:	2322      	movs	r3, #34	; 0x22
 801449c:	9a05      	ldr	r2, [sp, #20]
 801449e:	2600      	movs	r6, #0
 80144a0:	6013      	str	r3, [r2, #0]
 80144a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144a4:	2700      	movs	r7, #0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d18f      	bne.n	80143ca <_strtod_l+0x4ee>
 80144aa:	e55e      	b.n	8013f6a <_strtod_l+0x8e>
 80144ac:	00004e1f 	.word	0x00004e1f
 80144b0:	0801ccc5 	.word	0x0801ccc5
 80144b4:	0801cc78 	.word	0x0801cc78
 80144b8:	7ff00000 	.word	0x7ff00000
 80144bc:	0801ccbd 	.word	0x0801ccbd
 80144c0:	0801cd13 	.word	0x0801cd13
 80144c4:	0801cf9f 	.word	0x0801cf9f
 80144c8:	0801ce90 	.word	0x0801ce90
 80144cc:	fcb00000 	.word	0xfcb00000
 80144d0:	0801ce68 	.word	0x0801ce68
 80144d4:	7ca00000 	.word	0x7ca00000
 80144d8:	7c900000 	.word	0x7c900000
 80144dc:	7fefffff 	.word	0x7fefffff
 80144e0:	2310      	movs	r3, #16
 80144e2:	0022      	movs	r2, r4
 80144e4:	401a      	ands	r2, r3
 80144e6:	9208      	str	r2, [sp, #32]
 80144e8:	421c      	tst	r4, r3
 80144ea:	d001      	beq.n	80144f0 <_strtod_l+0x614>
 80144ec:	335a      	adds	r3, #90	; 0x5a
 80144ee:	9308      	str	r3, [sp, #32]
 80144f0:	0030      	movs	r0, r6
 80144f2:	0039      	movs	r1, r7
 80144f4:	2300      	movs	r3, #0
 80144f6:	4dca      	ldr	r5, [pc, #808]	; (8014820 <_strtod_l+0x944>)
 80144f8:	2201      	movs	r2, #1
 80144fa:	4214      	tst	r4, r2
 80144fc:	d004      	beq.n	8014508 <_strtod_l+0x62c>
 80144fe:	682a      	ldr	r2, [r5, #0]
 8014500:	686b      	ldr	r3, [r5, #4]
 8014502:	f7ed fe4b 	bl	800219c <__aeabi_dmul>
 8014506:	2301      	movs	r3, #1
 8014508:	1064      	asrs	r4, r4, #1
 801450a:	3508      	adds	r5, #8
 801450c:	2c00      	cmp	r4, #0
 801450e:	d1f3      	bne.n	80144f8 <_strtod_l+0x61c>
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <_strtod_l+0x63c>
 8014514:	0006      	movs	r6, r0
 8014516:	000f      	movs	r7, r1
 8014518:	9b08      	ldr	r3, [sp, #32]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00f      	beq.n	801453e <_strtod_l+0x662>
 801451e:	236b      	movs	r3, #107	; 0x6b
 8014520:	0079      	lsls	r1, r7, #1
 8014522:	0d49      	lsrs	r1, r1, #21
 8014524:	003a      	movs	r2, r7
 8014526:	1a5b      	subs	r3, r3, r1
 8014528:	2b00      	cmp	r3, #0
 801452a:	dd08      	ble.n	801453e <_strtod_l+0x662>
 801452c:	2b1f      	cmp	r3, #31
 801452e:	dc00      	bgt.n	8014532 <_strtod_l+0x656>
 8014530:	e126      	b.n	8014780 <_strtod_l+0x8a4>
 8014532:	2600      	movs	r6, #0
 8014534:	2b34      	cmp	r3, #52	; 0x34
 8014536:	dc00      	bgt.n	801453a <_strtod_l+0x65e>
 8014538:	e11b      	b.n	8014772 <_strtod_l+0x896>
 801453a:	27dc      	movs	r7, #220	; 0xdc
 801453c:	04bf      	lsls	r7, r7, #18
 801453e:	2200      	movs	r2, #0
 8014540:	2300      	movs	r3, #0
 8014542:	0030      	movs	r0, r6
 8014544:	0039      	movs	r1, r7
 8014546:	f7eb ff89 	bl	800045c <__aeabi_dcmpeq>
 801454a:	2800      	cmp	r0, #0
 801454c:	d1a0      	bne.n	8014490 <_strtod_l+0x5b4>
 801454e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014556:	9b06      	ldr	r3, [sp, #24]
 8014558:	9805      	ldr	r0, [sp, #20]
 801455a:	f003 fa23 	bl	80179a4 <__s2b>
 801455e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014560:	2800      	cmp	r0, #0
 8014562:	d100      	bne.n	8014566 <_strtod_l+0x68a>
 8014564:	e723      	b.n	80143ae <_strtod_l+0x4d2>
 8014566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014568:	9907      	ldr	r1, [sp, #28]
 801456a:	17da      	asrs	r2, r3, #31
 801456c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801456e:	1a5b      	subs	r3, r3, r1
 8014570:	401a      	ands	r2, r3
 8014572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014574:	9215      	str	r2, [sp, #84]	; 0x54
 8014576:	43db      	mvns	r3, r3
 8014578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801457a:	17db      	asrs	r3, r3, #31
 801457c:	401a      	ands	r2, r3
 801457e:	2300      	movs	r3, #0
 8014580:	921c      	str	r2, [sp, #112]	; 0x70
 8014582:	9306      	str	r3, [sp, #24]
 8014584:	9307      	str	r3, [sp, #28]
 8014586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014588:	9805      	ldr	r0, [sp, #20]
 801458a:	6859      	ldr	r1, [r3, #4]
 801458c:	f003 f994 	bl	80178b8 <_Balloc>
 8014590:	9009      	str	r0, [sp, #36]	; 0x24
 8014592:	2800      	cmp	r0, #0
 8014594:	d100      	bne.n	8014598 <_strtod_l+0x6bc>
 8014596:	e70f      	b.n	80143b8 <_strtod_l+0x4dc>
 8014598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801459a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801459c:	691b      	ldr	r3, [r3, #16]
 801459e:	310c      	adds	r1, #12
 80145a0:	1c9a      	adds	r2, r3, #2
 80145a2:	0092      	lsls	r2, r2, #2
 80145a4:	300c      	adds	r0, #12
 80145a6:	930c      	str	r3, [sp, #48]	; 0x30
 80145a8:	f7ff fa1a 	bl	80139e0 <memcpy>
 80145ac:	ab24      	add	r3, sp, #144	; 0x90
 80145ae:	9301      	str	r3, [sp, #4]
 80145b0:	ab23      	add	r3, sp, #140	; 0x8c
 80145b2:	9300      	str	r3, [sp, #0]
 80145b4:	0032      	movs	r2, r6
 80145b6:	003b      	movs	r3, r7
 80145b8:	9805      	ldr	r0, [sp, #20]
 80145ba:	960e      	str	r6, [sp, #56]	; 0x38
 80145bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80145be:	f003 fd25 	bl	801800c <__d2b>
 80145c2:	9022      	str	r0, [sp, #136]	; 0x88
 80145c4:	2800      	cmp	r0, #0
 80145c6:	d100      	bne.n	80145ca <_strtod_l+0x6ee>
 80145c8:	e6f6      	b.n	80143b8 <_strtod_l+0x4dc>
 80145ca:	2101      	movs	r1, #1
 80145cc:	9805      	ldr	r0, [sp, #20]
 80145ce:	f003 fa7d 	bl	8017acc <__i2b>
 80145d2:	9007      	str	r0, [sp, #28]
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d100      	bne.n	80145da <_strtod_l+0x6fe>
 80145d8:	e6ee      	b.n	80143b8 <_strtod_l+0x4dc>
 80145da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80145dc:	2b00      	cmp	r3, #0
 80145de:	da00      	bge.n	80145e2 <_strtod_l+0x706>
 80145e0:	e0d3      	b.n	801478a <_strtod_l+0x8ae>
 80145e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80145e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80145e6:	189d      	adds	r5, r3, r2
 80145e8:	9908      	ldr	r1, [sp, #32]
 80145ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80145ec:	1a5b      	subs	r3, r3, r1
 80145ee:	2136      	movs	r1, #54	; 0x36
 80145f0:	189b      	adds	r3, r3, r2
 80145f2:	1a8a      	subs	r2, r1, r2
 80145f4:	498b      	ldr	r1, [pc, #556]	; (8014824 <_strtod_l+0x948>)
 80145f6:	3b01      	subs	r3, #1
 80145f8:	2001      	movs	r0, #1
 80145fa:	428b      	cmp	r3, r1
 80145fc:	db00      	blt.n	8014600 <_strtod_l+0x724>
 80145fe:	e0cf      	b.n	80147a0 <_strtod_l+0x8c4>
 8014600:	1ac9      	subs	r1, r1, r3
 8014602:	1a52      	subs	r2, r2, r1
 8014604:	291f      	cmp	r1, #31
 8014606:	dd00      	ble.n	801460a <_strtod_l+0x72e>
 8014608:	e0c3      	b.n	8014792 <_strtod_l+0x8b6>
 801460a:	4088      	lsls	r0, r1
 801460c:	2300      	movs	r3, #0
 801460e:	9014      	str	r0, [sp, #80]	; 0x50
 8014610:	9312      	str	r3, [sp, #72]	; 0x48
 8014612:	18ab      	adds	r3, r5, r2
 8014614:	930c      	str	r3, [sp, #48]	; 0x30
 8014616:	18a4      	adds	r4, r4, r2
 8014618:	9b08      	ldr	r3, [sp, #32]
 801461a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801461c:	191c      	adds	r4, r3, r4
 801461e:	002b      	movs	r3, r5
 8014620:	4295      	cmp	r5, r2
 8014622:	dd00      	ble.n	8014626 <_strtod_l+0x74a>
 8014624:	0013      	movs	r3, r2
 8014626:	42a3      	cmp	r3, r4
 8014628:	dd00      	ble.n	801462c <_strtod_l+0x750>
 801462a:	0023      	movs	r3, r4
 801462c:	2b00      	cmp	r3, #0
 801462e:	dd04      	ble.n	801463a <_strtod_l+0x75e>
 8014630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014632:	1ae4      	subs	r4, r4, r3
 8014634:	1ad2      	subs	r2, r2, r3
 8014636:	920c      	str	r2, [sp, #48]	; 0x30
 8014638:	1aed      	subs	r5, r5, r3
 801463a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801463c:	2b00      	cmp	r3, #0
 801463e:	dd17      	ble.n	8014670 <_strtod_l+0x794>
 8014640:	001a      	movs	r2, r3
 8014642:	9907      	ldr	r1, [sp, #28]
 8014644:	9805      	ldr	r0, [sp, #20]
 8014646:	f003 fb07 	bl	8017c58 <__pow5mult>
 801464a:	9007      	str	r0, [sp, #28]
 801464c:	2800      	cmp	r0, #0
 801464e:	d100      	bne.n	8014652 <_strtod_l+0x776>
 8014650:	e6b2      	b.n	80143b8 <_strtod_l+0x4dc>
 8014652:	0001      	movs	r1, r0
 8014654:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014656:	9805      	ldr	r0, [sp, #20]
 8014658:	f003 fa4e 	bl	8017af8 <__multiply>
 801465c:	9011      	str	r0, [sp, #68]	; 0x44
 801465e:	2800      	cmp	r0, #0
 8014660:	d100      	bne.n	8014664 <_strtod_l+0x788>
 8014662:	e6a9      	b.n	80143b8 <_strtod_l+0x4dc>
 8014664:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014666:	9805      	ldr	r0, [sp, #20]
 8014668:	f003 f94e 	bl	8017908 <_Bfree>
 801466c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801466e:	9322      	str	r3, [sp, #136]	; 0x88
 8014670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014672:	2b00      	cmp	r3, #0
 8014674:	dd00      	ble.n	8014678 <_strtod_l+0x79c>
 8014676:	e096      	b.n	80147a6 <_strtod_l+0x8ca>
 8014678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801467a:	2b00      	cmp	r3, #0
 801467c:	dd08      	ble.n	8014690 <_strtod_l+0x7b4>
 801467e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014682:	9805      	ldr	r0, [sp, #20]
 8014684:	f003 fae8 	bl	8017c58 <__pow5mult>
 8014688:	9009      	str	r0, [sp, #36]	; 0x24
 801468a:	2800      	cmp	r0, #0
 801468c:	d100      	bne.n	8014690 <_strtod_l+0x7b4>
 801468e:	e693      	b.n	80143b8 <_strtod_l+0x4dc>
 8014690:	2c00      	cmp	r4, #0
 8014692:	dd08      	ble.n	80146a6 <_strtod_l+0x7ca>
 8014694:	0022      	movs	r2, r4
 8014696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014698:	9805      	ldr	r0, [sp, #20]
 801469a:	f003 fb1f 	bl	8017cdc <__lshift>
 801469e:	9009      	str	r0, [sp, #36]	; 0x24
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d100      	bne.n	80146a6 <_strtod_l+0x7ca>
 80146a4:	e688      	b.n	80143b8 <_strtod_l+0x4dc>
 80146a6:	2d00      	cmp	r5, #0
 80146a8:	dd08      	ble.n	80146bc <_strtod_l+0x7e0>
 80146aa:	002a      	movs	r2, r5
 80146ac:	9907      	ldr	r1, [sp, #28]
 80146ae:	9805      	ldr	r0, [sp, #20]
 80146b0:	f003 fb14 	bl	8017cdc <__lshift>
 80146b4:	9007      	str	r0, [sp, #28]
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d100      	bne.n	80146bc <_strtod_l+0x7e0>
 80146ba:	e67d      	b.n	80143b8 <_strtod_l+0x4dc>
 80146bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80146c0:	9805      	ldr	r0, [sp, #20]
 80146c2:	f003 fb97 	bl	8017df4 <__mdiff>
 80146c6:	9006      	str	r0, [sp, #24]
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d100      	bne.n	80146ce <_strtod_l+0x7f2>
 80146cc:	e674      	b.n	80143b8 <_strtod_l+0x4dc>
 80146ce:	2200      	movs	r2, #0
 80146d0:	68c3      	ldr	r3, [r0, #12]
 80146d2:	9907      	ldr	r1, [sp, #28]
 80146d4:	60c2      	str	r2, [r0, #12]
 80146d6:	9311      	str	r3, [sp, #68]	; 0x44
 80146d8:	f003 fb70 	bl	8017dbc <__mcmp>
 80146dc:	2800      	cmp	r0, #0
 80146de:	da6c      	bge.n	80147ba <_strtod_l+0x8de>
 80146e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146e2:	4333      	orrs	r3, r6
 80146e4:	d000      	beq.n	80146e8 <_strtod_l+0x80c>
 80146e6:	e097      	b.n	8014818 <_strtod_l+0x93c>
 80146e8:	033b      	lsls	r3, r7, #12
 80146ea:	d000      	beq.n	80146ee <_strtod_l+0x812>
 80146ec:	e094      	b.n	8014818 <_strtod_l+0x93c>
 80146ee:	22d6      	movs	r2, #214	; 0xd6
 80146f0:	4b4d      	ldr	r3, [pc, #308]	; (8014828 <_strtod_l+0x94c>)
 80146f2:	04d2      	lsls	r2, r2, #19
 80146f4:	403b      	ands	r3, r7
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d800      	bhi.n	80146fc <_strtod_l+0x820>
 80146fa:	e08d      	b.n	8014818 <_strtod_l+0x93c>
 80146fc:	9b06      	ldr	r3, [sp, #24]
 80146fe:	695b      	ldr	r3, [r3, #20]
 8014700:	930a      	str	r3, [sp, #40]	; 0x28
 8014702:	2b00      	cmp	r3, #0
 8014704:	d105      	bne.n	8014712 <_strtod_l+0x836>
 8014706:	9b06      	ldr	r3, [sp, #24]
 8014708:	691b      	ldr	r3, [r3, #16]
 801470a:	930a      	str	r3, [sp, #40]	; 0x28
 801470c:	2b01      	cmp	r3, #1
 801470e:	dc00      	bgt.n	8014712 <_strtod_l+0x836>
 8014710:	e082      	b.n	8014818 <_strtod_l+0x93c>
 8014712:	9906      	ldr	r1, [sp, #24]
 8014714:	2201      	movs	r2, #1
 8014716:	9805      	ldr	r0, [sp, #20]
 8014718:	f003 fae0 	bl	8017cdc <__lshift>
 801471c:	9907      	ldr	r1, [sp, #28]
 801471e:	9006      	str	r0, [sp, #24]
 8014720:	f003 fb4c 	bl	8017dbc <__mcmp>
 8014724:	2800      	cmp	r0, #0
 8014726:	dd77      	ble.n	8014818 <_strtod_l+0x93c>
 8014728:	9908      	ldr	r1, [sp, #32]
 801472a:	003b      	movs	r3, r7
 801472c:	4a3e      	ldr	r2, [pc, #248]	; (8014828 <_strtod_l+0x94c>)
 801472e:	2900      	cmp	r1, #0
 8014730:	d100      	bne.n	8014734 <_strtod_l+0x858>
 8014732:	e09e      	b.n	8014872 <_strtod_l+0x996>
 8014734:	0011      	movs	r1, r2
 8014736:	20d6      	movs	r0, #214	; 0xd6
 8014738:	4039      	ands	r1, r7
 801473a:	04c0      	lsls	r0, r0, #19
 801473c:	4281      	cmp	r1, r0
 801473e:	dd00      	ble.n	8014742 <_strtod_l+0x866>
 8014740:	e097      	b.n	8014872 <_strtod_l+0x996>
 8014742:	23dc      	movs	r3, #220	; 0xdc
 8014744:	049b      	lsls	r3, r3, #18
 8014746:	4299      	cmp	r1, r3
 8014748:	dc00      	bgt.n	801474c <_strtod_l+0x870>
 801474a:	e6a6      	b.n	801449a <_strtod_l+0x5be>
 801474c:	4b37      	ldr	r3, [pc, #220]	; (801482c <_strtod_l+0x950>)
 801474e:	0030      	movs	r0, r6
 8014750:	931b      	str	r3, [sp, #108]	; 0x6c
 8014752:	2300      	movs	r3, #0
 8014754:	931a      	str	r3, [sp, #104]	; 0x68
 8014756:	0039      	movs	r1, r7
 8014758:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801475a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801475c:	f7ed fd1e 	bl	800219c <__aeabi_dmul>
 8014760:	0006      	movs	r6, r0
 8014762:	000f      	movs	r7, r1
 8014764:	4308      	orrs	r0, r1
 8014766:	d000      	beq.n	801476a <_strtod_l+0x88e>
 8014768:	e62f      	b.n	80143ca <_strtod_l+0x4ee>
 801476a:	2322      	movs	r3, #34	; 0x22
 801476c:	9a05      	ldr	r2, [sp, #20]
 801476e:	6013      	str	r3, [r2, #0]
 8014770:	e62b      	b.n	80143ca <_strtod_l+0x4ee>
 8014772:	2101      	movs	r1, #1
 8014774:	3b20      	subs	r3, #32
 8014776:	4249      	negs	r1, r1
 8014778:	4099      	lsls	r1, r3
 801477a:	400a      	ands	r2, r1
 801477c:	0017      	movs	r7, r2
 801477e:	e6de      	b.n	801453e <_strtod_l+0x662>
 8014780:	2201      	movs	r2, #1
 8014782:	4252      	negs	r2, r2
 8014784:	409a      	lsls	r2, r3
 8014786:	4016      	ands	r6, r2
 8014788:	e6d9      	b.n	801453e <_strtod_l+0x662>
 801478a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801478c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801478e:	1ad4      	subs	r4, r2, r3
 8014790:	e72a      	b.n	80145e8 <_strtod_l+0x70c>
 8014792:	4927      	ldr	r1, [pc, #156]	; (8014830 <_strtod_l+0x954>)
 8014794:	1acb      	subs	r3, r1, r3
 8014796:	0001      	movs	r1, r0
 8014798:	4099      	lsls	r1, r3
 801479a:	9112      	str	r1, [sp, #72]	; 0x48
 801479c:	9014      	str	r0, [sp, #80]	; 0x50
 801479e:	e738      	b.n	8014612 <_strtod_l+0x736>
 80147a0:	2300      	movs	r3, #0
 80147a2:	9312      	str	r3, [sp, #72]	; 0x48
 80147a4:	e7fa      	b.n	801479c <_strtod_l+0x8c0>
 80147a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80147aa:	9805      	ldr	r0, [sp, #20]
 80147ac:	f003 fa96 	bl	8017cdc <__lshift>
 80147b0:	9022      	str	r0, [sp, #136]	; 0x88
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d000      	beq.n	80147b8 <_strtod_l+0x8dc>
 80147b6:	e75f      	b.n	8014678 <_strtod_l+0x79c>
 80147b8:	e5fe      	b.n	80143b8 <_strtod_l+0x4dc>
 80147ba:	970c      	str	r7, [sp, #48]	; 0x30
 80147bc:	2800      	cmp	r0, #0
 80147be:	d176      	bne.n	80148ae <_strtod_l+0x9d2>
 80147c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80147c2:	033b      	lsls	r3, r7, #12
 80147c4:	0b1b      	lsrs	r3, r3, #12
 80147c6:	2a00      	cmp	r2, #0
 80147c8:	d038      	beq.n	801483c <_strtod_l+0x960>
 80147ca:	4a1a      	ldr	r2, [pc, #104]	; (8014834 <_strtod_l+0x958>)
 80147cc:	4293      	cmp	r3, r2
 80147ce:	d138      	bne.n	8014842 <_strtod_l+0x966>
 80147d0:	2201      	movs	r2, #1
 80147d2:	9b08      	ldr	r3, [sp, #32]
 80147d4:	4252      	negs	r2, r2
 80147d6:	0031      	movs	r1, r6
 80147d8:	0010      	movs	r0, r2
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d00b      	beq.n	80147f6 <_strtod_l+0x91a>
 80147de:	24d4      	movs	r4, #212	; 0xd4
 80147e0:	4b11      	ldr	r3, [pc, #68]	; (8014828 <_strtod_l+0x94c>)
 80147e2:	0010      	movs	r0, r2
 80147e4:	403b      	ands	r3, r7
 80147e6:	04e4      	lsls	r4, r4, #19
 80147e8:	42a3      	cmp	r3, r4
 80147ea:	d804      	bhi.n	80147f6 <_strtod_l+0x91a>
 80147ec:	306c      	adds	r0, #108	; 0x6c
 80147ee:	0d1b      	lsrs	r3, r3, #20
 80147f0:	1ac3      	subs	r3, r0, r3
 80147f2:	409a      	lsls	r2, r3
 80147f4:	0010      	movs	r0, r2
 80147f6:	4281      	cmp	r1, r0
 80147f8:	d123      	bne.n	8014842 <_strtod_l+0x966>
 80147fa:	4b0f      	ldr	r3, [pc, #60]	; (8014838 <_strtod_l+0x95c>)
 80147fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147fe:	429a      	cmp	r2, r3
 8014800:	d102      	bne.n	8014808 <_strtod_l+0x92c>
 8014802:	1c4b      	adds	r3, r1, #1
 8014804:	d100      	bne.n	8014808 <_strtod_l+0x92c>
 8014806:	e5d7      	b.n	80143b8 <_strtod_l+0x4dc>
 8014808:	4b07      	ldr	r3, [pc, #28]	; (8014828 <_strtod_l+0x94c>)
 801480a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801480c:	2600      	movs	r6, #0
 801480e:	401a      	ands	r2, r3
 8014810:	0013      	movs	r3, r2
 8014812:	2280      	movs	r2, #128	; 0x80
 8014814:	0352      	lsls	r2, r2, #13
 8014816:	189f      	adds	r7, r3, r2
 8014818:	9b08      	ldr	r3, [sp, #32]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d196      	bne.n	801474c <_strtod_l+0x870>
 801481e:	e5d4      	b.n	80143ca <_strtod_l+0x4ee>
 8014820:	0801cc90 	.word	0x0801cc90
 8014824:	fffffc02 	.word	0xfffffc02
 8014828:	7ff00000 	.word	0x7ff00000
 801482c:	39500000 	.word	0x39500000
 8014830:	fffffbe2 	.word	0xfffffbe2
 8014834:	000fffff 	.word	0x000fffff
 8014838:	7fefffff 	.word	0x7fefffff
 801483c:	4333      	orrs	r3, r6
 801483e:	d100      	bne.n	8014842 <_strtod_l+0x966>
 8014840:	e772      	b.n	8014728 <_strtod_l+0x84c>
 8014842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014844:	2b00      	cmp	r3, #0
 8014846:	d01d      	beq.n	8014884 <_strtod_l+0x9a8>
 8014848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801484a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801484c:	4213      	tst	r3, r2
 801484e:	d0e3      	beq.n	8014818 <_strtod_l+0x93c>
 8014850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014852:	0030      	movs	r0, r6
 8014854:	0039      	movs	r1, r7
 8014856:	9a08      	ldr	r2, [sp, #32]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d017      	beq.n	801488c <_strtod_l+0x9b0>
 801485c:	f7ff fb26 	bl	8013eac <sulp>
 8014860:	0002      	movs	r2, r0
 8014862:	000b      	movs	r3, r1
 8014864:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014866:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014868:	f7ec fd28 	bl	80012bc <__aeabi_dadd>
 801486c:	0006      	movs	r6, r0
 801486e:	000f      	movs	r7, r1
 8014870:	e7d2      	b.n	8014818 <_strtod_l+0x93c>
 8014872:	2601      	movs	r6, #1
 8014874:	4013      	ands	r3, r2
 8014876:	4a9b      	ldr	r2, [pc, #620]	; (8014ae4 <_strtod_l+0xc08>)
 8014878:	4276      	negs	r6, r6
 801487a:	189b      	adds	r3, r3, r2
 801487c:	4a9a      	ldr	r2, [pc, #616]	; (8014ae8 <_strtod_l+0xc0c>)
 801487e:	431a      	orrs	r2, r3
 8014880:	0017      	movs	r7, r2
 8014882:	e7c9      	b.n	8014818 <_strtod_l+0x93c>
 8014884:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014886:	4233      	tst	r3, r6
 8014888:	d0c6      	beq.n	8014818 <_strtod_l+0x93c>
 801488a:	e7e1      	b.n	8014850 <_strtod_l+0x974>
 801488c:	f7ff fb0e 	bl	8013eac <sulp>
 8014890:	0002      	movs	r2, r0
 8014892:	000b      	movs	r3, r1
 8014894:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014896:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014898:	f7ed feec 	bl	8002674 <__aeabi_dsub>
 801489c:	2200      	movs	r2, #0
 801489e:	2300      	movs	r3, #0
 80148a0:	0006      	movs	r6, r0
 80148a2:	000f      	movs	r7, r1
 80148a4:	f7eb fdda 	bl	800045c <__aeabi_dcmpeq>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d0b5      	beq.n	8014818 <_strtod_l+0x93c>
 80148ac:	e5f5      	b.n	801449a <_strtod_l+0x5be>
 80148ae:	9907      	ldr	r1, [sp, #28]
 80148b0:	9806      	ldr	r0, [sp, #24]
 80148b2:	f003 fc0f 	bl	80180d4 <__ratio>
 80148b6:	2380      	movs	r3, #128	; 0x80
 80148b8:	2200      	movs	r2, #0
 80148ba:	05db      	lsls	r3, r3, #23
 80148bc:	0004      	movs	r4, r0
 80148be:	000d      	movs	r5, r1
 80148c0:	f7eb fddc 	bl	800047c <__aeabi_dcmple>
 80148c4:	2800      	cmp	r0, #0
 80148c6:	d079      	beq.n	80149bc <_strtod_l+0xae0>
 80148c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d04b      	beq.n	8014966 <_strtod_l+0xa8a>
 80148ce:	2300      	movs	r3, #0
 80148d0:	4c86      	ldr	r4, [pc, #536]	; (8014aec <_strtod_l+0xc10>)
 80148d2:	2500      	movs	r5, #0
 80148d4:	9312      	str	r3, [sp, #72]	; 0x48
 80148d6:	9413      	str	r4, [sp, #76]	; 0x4c
 80148d8:	4c84      	ldr	r4, [pc, #528]	; (8014aec <_strtod_l+0xc10>)
 80148da:	4a85      	ldr	r2, [pc, #532]	; (8014af0 <_strtod_l+0xc14>)
 80148dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148de:	4013      	ands	r3, r2
 80148e0:	9314      	str	r3, [sp, #80]	; 0x50
 80148e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148e4:	4b83      	ldr	r3, [pc, #524]	; (8014af4 <_strtod_l+0xc18>)
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d000      	beq.n	80148ec <_strtod_l+0xa10>
 80148ea:	e0b0      	b.n	8014a4e <_strtod_l+0xb72>
 80148ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148f0:	921a      	str	r2, [sp, #104]	; 0x68
 80148f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80148f4:	4a80      	ldr	r2, [pc, #512]	; (8014af8 <_strtod_l+0xc1c>)
 80148f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148f8:	4694      	mov	ip, r2
 80148fa:	4463      	add	r3, ip
 80148fc:	001f      	movs	r7, r3
 80148fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014902:	0030      	movs	r0, r6
 8014904:	0039      	movs	r1, r7
 8014906:	920c      	str	r2, [sp, #48]	; 0x30
 8014908:	930d      	str	r3, [sp, #52]	; 0x34
 801490a:	f003 fb0b 	bl	8017f24 <__ulp>
 801490e:	0002      	movs	r2, r0
 8014910:	000b      	movs	r3, r1
 8014912:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014914:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014916:	f7ed fc41 	bl	800219c <__aeabi_dmul>
 801491a:	0032      	movs	r2, r6
 801491c:	003b      	movs	r3, r7
 801491e:	f7ec fccd 	bl	80012bc <__aeabi_dadd>
 8014922:	4a73      	ldr	r2, [pc, #460]	; (8014af0 <_strtod_l+0xc14>)
 8014924:	4b75      	ldr	r3, [pc, #468]	; (8014afc <_strtod_l+0xc20>)
 8014926:	0006      	movs	r6, r0
 8014928:	400a      	ands	r2, r1
 801492a:	429a      	cmp	r2, r3
 801492c:	d95e      	bls.n	80149ec <_strtod_l+0xb10>
 801492e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014930:	4a73      	ldr	r2, [pc, #460]	; (8014b00 <_strtod_l+0xc24>)
 8014932:	4293      	cmp	r3, r2
 8014934:	d103      	bne.n	801493e <_strtod_l+0xa62>
 8014936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014938:	3301      	adds	r3, #1
 801493a:	d100      	bne.n	801493e <_strtod_l+0xa62>
 801493c:	e53c      	b.n	80143b8 <_strtod_l+0x4dc>
 801493e:	2601      	movs	r6, #1
 8014940:	4f6f      	ldr	r7, [pc, #444]	; (8014b00 <_strtod_l+0xc24>)
 8014942:	4276      	negs	r6, r6
 8014944:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014946:	9805      	ldr	r0, [sp, #20]
 8014948:	f002 ffde 	bl	8017908 <_Bfree>
 801494c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801494e:	9805      	ldr	r0, [sp, #20]
 8014950:	f002 ffda 	bl	8017908 <_Bfree>
 8014954:	9907      	ldr	r1, [sp, #28]
 8014956:	9805      	ldr	r0, [sp, #20]
 8014958:	f002 ffd6 	bl	8017908 <_Bfree>
 801495c:	9906      	ldr	r1, [sp, #24]
 801495e:	9805      	ldr	r0, [sp, #20]
 8014960:	f002 ffd2 	bl	8017908 <_Bfree>
 8014964:	e60f      	b.n	8014586 <_strtod_l+0x6aa>
 8014966:	2e00      	cmp	r6, #0
 8014968:	d11c      	bne.n	80149a4 <_strtod_l+0xac8>
 801496a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801496c:	031b      	lsls	r3, r3, #12
 801496e:	d11f      	bne.n	80149b0 <_strtod_l+0xad4>
 8014970:	2200      	movs	r2, #0
 8014972:	0020      	movs	r0, r4
 8014974:	0029      	movs	r1, r5
 8014976:	4b5d      	ldr	r3, [pc, #372]	; (8014aec <_strtod_l+0xc10>)
 8014978:	f7eb fd76 	bl	8000468 <__aeabi_dcmplt>
 801497c:	2800      	cmp	r0, #0
 801497e:	d11a      	bne.n	80149b6 <_strtod_l+0xada>
 8014980:	0020      	movs	r0, r4
 8014982:	0029      	movs	r1, r5
 8014984:	2200      	movs	r2, #0
 8014986:	4b5f      	ldr	r3, [pc, #380]	; (8014b04 <_strtod_l+0xc28>)
 8014988:	f7ed fc08 	bl	800219c <__aeabi_dmul>
 801498c:	0005      	movs	r5, r0
 801498e:	000c      	movs	r4, r1
 8014990:	2380      	movs	r3, #128	; 0x80
 8014992:	061b      	lsls	r3, r3, #24
 8014994:	18e3      	adds	r3, r4, r3
 8014996:	951e      	str	r5, [sp, #120]	; 0x78
 8014998:	931f      	str	r3, [sp, #124]	; 0x7c
 801499a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801499c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801499e:	9212      	str	r2, [sp, #72]	; 0x48
 80149a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80149a2:	e79a      	b.n	80148da <_strtod_l+0x9fe>
 80149a4:	2e01      	cmp	r6, #1
 80149a6:	d103      	bne.n	80149b0 <_strtod_l+0xad4>
 80149a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d100      	bne.n	80149b0 <_strtod_l+0xad4>
 80149ae:	e574      	b.n	801449a <_strtod_l+0x5be>
 80149b0:	2300      	movs	r3, #0
 80149b2:	4c55      	ldr	r4, [pc, #340]	; (8014b08 <_strtod_l+0xc2c>)
 80149b4:	e78d      	b.n	80148d2 <_strtod_l+0x9f6>
 80149b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80149b8:	4c52      	ldr	r4, [pc, #328]	; (8014b04 <_strtod_l+0xc28>)
 80149ba:	e7e9      	b.n	8014990 <_strtod_l+0xab4>
 80149bc:	2200      	movs	r2, #0
 80149be:	0020      	movs	r0, r4
 80149c0:	0029      	movs	r1, r5
 80149c2:	4b50      	ldr	r3, [pc, #320]	; (8014b04 <_strtod_l+0xc28>)
 80149c4:	f7ed fbea 	bl	800219c <__aeabi_dmul>
 80149c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149ca:	0005      	movs	r5, r0
 80149cc:	000b      	movs	r3, r1
 80149ce:	000c      	movs	r4, r1
 80149d0:	2a00      	cmp	r2, #0
 80149d2:	d107      	bne.n	80149e4 <_strtod_l+0xb08>
 80149d4:	2280      	movs	r2, #128	; 0x80
 80149d6:	0612      	lsls	r2, r2, #24
 80149d8:	188b      	adds	r3, r1, r2
 80149da:	9016      	str	r0, [sp, #88]	; 0x58
 80149dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80149de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80149e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149e2:	e7dc      	b.n	801499e <_strtod_l+0xac2>
 80149e4:	0002      	movs	r2, r0
 80149e6:	9216      	str	r2, [sp, #88]	; 0x58
 80149e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80149ea:	e7f8      	b.n	80149de <_strtod_l+0xb02>
 80149ec:	23d4      	movs	r3, #212	; 0xd4
 80149ee:	049b      	lsls	r3, r3, #18
 80149f0:	18cf      	adds	r7, r1, r3
 80149f2:	9b08      	ldr	r3, [sp, #32]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d1a5      	bne.n	8014944 <_strtod_l+0xa68>
 80149f8:	4b3d      	ldr	r3, [pc, #244]	; (8014af0 <_strtod_l+0xc14>)
 80149fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149fc:	403b      	ands	r3, r7
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d1a0      	bne.n	8014944 <_strtod_l+0xa68>
 8014a02:	0028      	movs	r0, r5
 8014a04:	0021      	movs	r1, r4
 8014a06:	f7eb fe0f 	bl	8000628 <__aeabi_d2lz>
 8014a0a:	f7eb fe49 	bl	80006a0 <__aeabi_l2d>
 8014a0e:	0002      	movs	r2, r0
 8014a10:	000b      	movs	r3, r1
 8014a12:	0028      	movs	r0, r5
 8014a14:	0021      	movs	r1, r4
 8014a16:	f7ed fe2d 	bl	8002674 <__aeabi_dsub>
 8014a1a:	033b      	lsls	r3, r7, #12
 8014a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a1e:	0b1b      	lsrs	r3, r3, #12
 8014a20:	4333      	orrs	r3, r6
 8014a22:	4313      	orrs	r3, r2
 8014a24:	0004      	movs	r4, r0
 8014a26:	000d      	movs	r5, r1
 8014a28:	4a38      	ldr	r2, [pc, #224]	; (8014b0c <_strtod_l+0xc30>)
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d055      	beq.n	8014ada <_strtod_l+0xbfe>
 8014a2e:	4b38      	ldr	r3, [pc, #224]	; (8014b10 <_strtod_l+0xc34>)
 8014a30:	f7eb fd1a 	bl	8000468 <__aeabi_dcmplt>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d000      	beq.n	8014a3a <_strtod_l+0xb5e>
 8014a38:	e4c7      	b.n	80143ca <_strtod_l+0x4ee>
 8014a3a:	0020      	movs	r0, r4
 8014a3c:	0029      	movs	r1, r5
 8014a3e:	4a35      	ldr	r2, [pc, #212]	; (8014b14 <_strtod_l+0xc38>)
 8014a40:	4b30      	ldr	r3, [pc, #192]	; (8014b04 <_strtod_l+0xc28>)
 8014a42:	f7eb fd25 	bl	8000490 <__aeabi_dcmpgt>
 8014a46:	2800      	cmp	r0, #0
 8014a48:	d100      	bne.n	8014a4c <_strtod_l+0xb70>
 8014a4a:	e77b      	b.n	8014944 <_strtod_l+0xa68>
 8014a4c:	e4bd      	b.n	80143ca <_strtod_l+0x4ee>
 8014a4e:	9b08      	ldr	r3, [sp, #32]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d02b      	beq.n	8014aac <_strtod_l+0xbd0>
 8014a54:	23d4      	movs	r3, #212	; 0xd4
 8014a56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a58:	04db      	lsls	r3, r3, #19
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d826      	bhi.n	8014aac <_strtod_l+0xbd0>
 8014a5e:	0028      	movs	r0, r5
 8014a60:	0021      	movs	r1, r4
 8014a62:	4a2d      	ldr	r2, [pc, #180]	; (8014b18 <_strtod_l+0xc3c>)
 8014a64:	4b2d      	ldr	r3, [pc, #180]	; (8014b1c <_strtod_l+0xc40>)
 8014a66:	f7eb fd09 	bl	800047c <__aeabi_dcmple>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d017      	beq.n	8014a9e <_strtod_l+0xbc2>
 8014a6e:	0028      	movs	r0, r5
 8014a70:	0021      	movs	r1, r4
 8014a72:	f7eb fdbb 	bl	80005ec <__aeabi_d2uiz>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d100      	bne.n	8014a7c <_strtod_l+0xba0>
 8014a7a:	3001      	adds	r0, #1
 8014a7c:	f7ee fa10 	bl	8002ea0 <__aeabi_ui2d>
 8014a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a82:	0005      	movs	r5, r0
 8014a84:	000b      	movs	r3, r1
 8014a86:	000c      	movs	r4, r1
 8014a88:	2a00      	cmp	r2, #0
 8014a8a:	d122      	bne.n	8014ad2 <_strtod_l+0xbf6>
 8014a8c:	2280      	movs	r2, #128	; 0x80
 8014a8e:	0612      	lsls	r2, r2, #24
 8014a90:	188b      	adds	r3, r1, r2
 8014a92:	9018      	str	r0, [sp, #96]	; 0x60
 8014a94:	9319      	str	r3, [sp, #100]	; 0x64
 8014a96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a9a:	9212      	str	r2, [sp, #72]	; 0x48
 8014a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a9e:	22d6      	movs	r2, #214	; 0xd6
 8014aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa2:	04d2      	lsls	r2, r2, #19
 8014aa4:	189b      	adds	r3, r3, r2
 8014aa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014aa8:	1a9b      	subs	r3, r3, r2
 8014aaa:	9313      	str	r3, [sp, #76]	; 0x4c
 8014aac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014ab0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014ab2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8014ab4:	f003 fa36 	bl	8017f24 <__ulp>
 8014ab8:	0002      	movs	r2, r0
 8014aba:	000b      	movs	r3, r1
 8014abc:	0030      	movs	r0, r6
 8014abe:	0039      	movs	r1, r7
 8014ac0:	f7ed fb6c 	bl	800219c <__aeabi_dmul>
 8014ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ac8:	f7ec fbf8 	bl	80012bc <__aeabi_dadd>
 8014acc:	0006      	movs	r6, r0
 8014ace:	000f      	movs	r7, r1
 8014ad0:	e78f      	b.n	80149f2 <_strtod_l+0xb16>
 8014ad2:	0002      	movs	r2, r0
 8014ad4:	9218      	str	r2, [sp, #96]	; 0x60
 8014ad6:	9319      	str	r3, [sp, #100]	; 0x64
 8014ad8:	e7dd      	b.n	8014a96 <_strtod_l+0xbba>
 8014ada:	4b11      	ldr	r3, [pc, #68]	; (8014b20 <_strtod_l+0xc44>)
 8014adc:	f7eb fcc4 	bl	8000468 <__aeabi_dcmplt>
 8014ae0:	e7b1      	b.n	8014a46 <_strtod_l+0xb6a>
 8014ae2:	46c0      	nop			; (mov r8, r8)
 8014ae4:	fff00000 	.word	0xfff00000
 8014ae8:	000fffff 	.word	0x000fffff
 8014aec:	3ff00000 	.word	0x3ff00000
 8014af0:	7ff00000 	.word	0x7ff00000
 8014af4:	7fe00000 	.word	0x7fe00000
 8014af8:	fcb00000 	.word	0xfcb00000
 8014afc:	7c9fffff 	.word	0x7c9fffff
 8014b00:	7fefffff 	.word	0x7fefffff
 8014b04:	3fe00000 	.word	0x3fe00000
 8014b08:	bff00000 	.word	0xbff00000
 8014b0c:	94a03595 	.word	0x94a03595
 8014b10:	3fdfffff 	.word	0x3fdfffff
 8014b14:	35afe535 	.word	0x35afe535
 8014b18:	ffc00000 	.word	0xffc00000
 8014b1c:	41dfffff 	.word	0x41dfffff
 8014b20:	3fcfffff 	.word	0x3fcfffff

08014b24 <strtod>:
 8014b24:	b510      	push	{r4, lr}
 8014b26:	000a      	movs	r2, r1
 8014b28:	0001      	movs	r1, r0
 8014b2a:	4803      	ldr	r0, [pc, #12]	; (8014b38 <strtod+0x14>)
 8014b2c:	4b03      	ldr	r3, [pc, #12]	; (8014b3c <strtod+0x18>)
 8014b2e:	6800      	ldr	r0, [r0, #0]
 8014b30:	f7ff f9d4 	bl	8013edc <_strtod_l>
 8014b34:	bd10      	pop	{r4, pc}
 8014b36:	46c0      	nop			; (mov r8, r8)
 8014b38:	200000ac 	.word	0x200000ac
 8014b3c:	200008f0 	.word	0x200008f0

08014b40 <strtok>:
 8014b40:	4b03      	ldr	r3, [pc, #12]	; (8014b50 <strtok+0x10>)
 8014b42:	b510      	push	{r4, lr}
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	2301      	movs	r3, #1
 8014b48:	325c      	adds	r2, #92	; 0x5c
 8014b4a:	f000 f803 	bl	8014b54 <__strtok_r>
 8014b4e:	bd10      	pop	{r4, pc}
 8014b50:	200000ac 	.word	0x200000ac

08014b54 <__strtok_r>:
 8014b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b56:	2800      	cmp	r0, #0
 8014b58:	d102      	bne.n	8014b60 <__strtok_r+0xc>
 8014b5a:	6810      	ldr	r0, [r2, #0]
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d013      	beq.n	8014b88 <__strtok_r+0x34>
 8014b60:	0004      	movs	r4, r0
 8014b62:	0020      	movs	r0, r4
 8014b64:	000e      	movs	r6, r1
 8014b66:	7805      	ldrb	r5, [r0, #0]
 8014b68:	3401      	adds	r4, #1
 8014b6a:	7837      	ldrb	r7, [r6, #0]
 8014b6c:	2f00      	cmp	r7, #0
 8014b6e:	d104      	bne.n	8014b7a <__strtok_r+0x26>
 8014b70:	2d00      	cmp	r5, #0
 8014b72:	d10f      	bne.n	8014b94 <__strtok_r+0x40>
 8014b74:	0028      	movs	r0, r5
 8014b76:	6015      	str	r5, [r2, #0]
 8014b78:	e006      	b.n	8014b88 <__strtok_r+0x34>
 8014b7a:	3601      	adds	r6, #1
 8014b7c:	42bd      	cmp	r5, r7
 8014b7e:	d1f4      	bne.n	8014b6a <__strtok_r+0x16>
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d1ee      	bne.n	8014b62 <__strtok_r+0xe>
 8014b84:	6014      	str	r4, [r2, #0]
 8014b86:	7003      	strb	r3, [r0, #0]
 8014b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b8a:	002f      	movs	r7, r5
 8014b8c:	e00f      	b.n	8014bae <__strtok_r+0x5a>
 8014b8e:	3301      	adds	r3, #1
 8014b90:	2e00      	cmp	r6, #0
 8014b92:	d104      	bne.n	8014b9e <__strtok_r+0x4a>
 8014b94:	0023      	movs	r3, r4
 8014b96:	3401      	adds	r4, #1
 8014b98:	781d      	ldrb	r5, [r3, #0]
 8014b9a:	0027      	movs	r7, r4
 8014b9c:	000b      	movs	r3, r1
 8014b9e:	781e      	ldrb	r6, [r3, #0]
 8014ba0:	42b5      	cmp	r5, r6
 8014ba2:	d1f4      	bne.n	8014b8e <__strtok_r+0x3a>
 8014ba4:	2d00      	cmp	r5, #0
 8014ba6:	d0f0      	beq.n	8014b8a <__strtok_r+0x36>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	3c01      	subs	r4, #1
 8014bac:	7023      	strb	r3, [r4, #0]
 8014bae:	6017      	str	r7, [r2, #0]
 8014bb0:	e7ea      	b.n	8014b88 <__strtok_r+0x34>
	...

08014bb4 <_strtol_l.isra.0>:
 8014bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bb6:	b087      	sub	sp, #28
 8014bb8:	001e      	movs	r6, r3
 8014bba:	9005      	str	r0, [sp, #20]
 8014bbc:	9101      	str	r1, [sp, #4]
 8014bbe:	9202      	str	r2, [sp, #8]
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d045      	beq.n	8014c50 <_strtol_l.isra.0+0x9c>
 8014bc4:	0008      	movs	r0, r1
 8014bc6:	2b24      	cmp	r3, #36	; 0x24
 8014bc8:	d842      	bhi.n	8014c50 <_strtol_l.isra.0+0x9c>
 8014bca:	4b3f      	ldr	r3, [pc, #252]	; (8014cc8 <_strtol_l.isra.0+0x114>)
 8014bcc:	2208      	movs	r2, #8
 8014bce:	469c      	mov	ip, r3
 8014bd0:	0003      	movs	r3, r0
 8014bd2:	4661      	mov	r1, ip
 8014bd4:	781c      	ldrb	r4, [r3, #0]
 8014bd6:	1c45      	adds	r5, r0, #1
 8014bd8:	5d09      	ldrb	r1, [r1, r4]
 8014bda:	0028      	movs	r0, r5
 8014bdc:	000f      	movs	r7, r1
 8014bde:	4017      	ands	r7, r2
 8014be0:	4211      	tst	r1, r2
 8014be2:	d1f5      	bne.n	8014bd0 <_strtol_l.isra.0+0x1c>
 8014be4:	2c2d      	cmp	r4, #45	; 0x2d
 8014be6:	d13a      	bne.n	8014c5e <_strtol_l.isra.0+0xaa>
 8014be8:	2701      	movs	r7, #1
 8014bea:	782c      	ldrb	r4, [r5, #0]
 8014bec:	1c9d      	adds	r5, r3, #2
 8014bee:	2e00      	cmp	r6, #0
 8014bf0:	d065      	beq.n	8014cbe <_strtol_l.isra.0+0x10a>
 8014bf2:	2e10      	cmp	r6, #16
 8014bf4:	d109      	bne.n	8014c0a <_strtol_l.isra.0+0x56>
 8014bf6:	2c30      	cmp	r4, #48	; 0x30
 8014bf8:	d107      	bne.n	8014c0a <_strtol_l.isra.0+0x56>
 8014bfa:	2220      	movs	r2, #32
 8014bfc:	782b      	ldrb	r3, [r5, #0]
 8014bfe:	4393      	bics	r3, r2
 8014c00:	2b58      	cmp	r3, #88	; 0x58
 8014c02:	d157      	bne.n	8014cb4 <_strtol_l.isra.0+0x100>
 8014c04:	2610      	movs	r6, #16
 8014c06:	786c      	ldrb	r4, [r5, #1]
 8014c08:	3502      	adds	r5, #2
 8014c0a:	4b30      	ldr	r3, [pc, #192]	; (8014ccc <_strtol_l.isra.0+0x118>)
 8014c0c:	0031      	movs	r1, r6
 8014c0e:	18fb      	adds	r3, r7, r3
 8014c10:	0018      	movs	r0, r3
 8014c12:	9303      	str	r3, [sp, #12]
 8014c14:	f7eb fb22 	bl	800025c <__aeabi_uidivmod>
 8014c18:	2300      	movs	r3, #0
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	4684      	mov	ip, r0
 8014c1e:	0018      	movs	r0, r3
 8014c20:	9104      	str	r1, [sp, #16]
 8014c22:	4252      	negs	r2, r2
 8014c24:	0021      	movs	r1, r4
 8014c26:	3930      	subs	r1, #48	; 0x30
 8014c28:	2909      	cmp	r1, #9
 8014c2a:	d81d      	bhi.n	8014c68 <_strtol_l.isra.0+0xb4>
 8014c2c:	000c      	movs	r4, r1
 8014c2e:	42a6      	cmp	r6, r4
 8014c30:	dd28      	ble.n	8014c84 <_strtol_l.isra.0+0xd0>
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	db24      	blt.n	8014c80 <_strtol_l.isra.0+0xcc>
 8014c36:	0013      	movs	r3, r2
 8014c38:	4584      	cmp	ip, r0
 8014c3a:	d306      	bcc.n	8014c4a <_strtol_l.isra.0+0x96>
 8014c3c:	d102      	bne.n	8014c44 <_strtol_l.isra.0+0x90>
 8014c3e:	9904      	ldr	r1, [sp, #16]
 8014c40:	42a1      	cmp	r1, r4
 8014c42:	db02      	blt.n	8014c4a <_strtol_l.isra.0+0x96>
 8014c44:	2301      	movs	r3, #1
 8014c46:	4370      	muls	r0, r6
 8014c48:	1820      	adds	r0, r4, r0
 8014c4a:	782c      	ldrb	r4, [r5, #0]
 8014c4c:	3501      	adds	r5, #1
 8014c4e:	e7e9      	b.n	8014c24 <_strtol_l.isra.0+0x70>
 8014c50:	f002 f960 	bl	8016f14 <__errno>
 8014c54:	2316      	movs	r3, #22
 8014c56:	6003      	str	r3, [r0, #0]
 8014c58:	2000      	movs	r0, #0
 8014c5a:	b007      	add	sp, #28
 8014c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5e:	2c2b      	cmp	r4, #43	; 0x2b
 8014c60:	d1c5      	bne.n	8014bee <_strtol_l.isra.0+0x3a>
 8014c62:	782c      	ldrb	r4, [r5, #0]
 8014c64:	1c9d      	adds	r5, r3, #2
 8014c66:	e7c2      	b.n	8014bee <_strtol_l.isra.0+0x3a>
 8014c68:	0021      	movs	r1, r4
 8014c6a:	3941      	subs	r1, #65	; 0x41
 8014c6c:	2919      	cmp	r1, #25
 8014c6e:	d801      	bhi.n	8014c74 <_strtol_l.isra.0+0xc0>
 8014c70:	3c37      	subs	r4, #55	; 0x37
 8014c72:	e7dc      	b.n	8014c2e <_strtol_l.isra.0+0x7a>
 8014c74:	0021      	movs	r1, r4
 8014c76:	3961      	subs	r1, #97	; 0x61
 8014c78:	2919      	cmp	r1, #25
 8014c7a:	d803      	bhi.n	8014c84 <_strtol_l.isra.0+0xd0>
 8014c7c:	3c57      	subs	r4, #87	; 0x57
 8014c7e:	e7d6      	b.n	8014c2e <_strtol_l.isra.0+0x7a>
 8014c80:	0013      	movs	r3, r2
 8014c82:	e7e2      	b.n	8014c4a <_strtol_l.isra.0+0x96>
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	da09      	bge.n	8014c9c <_strtol_l.isra.0+0xe8>
 8014c88:	2322      	movs	r3, #34	; 0x22
 8014c8a:	9a05      	ldr	r2, [sp, #20]
 8014c8c:	9803      	ldr	r0, [sp, #12]
 8014c8e:	6013      	str	r3, [r2, #0]
 8014c90:	9b02      	ldr	r3, [sp, #8]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d0e1      	beq.n	8014c5a <_strtol_l.isra.0+0xa6>
 8014c96:	1e6b      	subs	r3, r5, #1
 8014c98:	9301      	str	r3, [sp, #4]
 8014c9a:	e007      	b.n	8014cac <_strtol_l.isra.0+0xf8>
 8014c9c:	2f00      	cmp	r7, #0
 8014c9e:	d000      	beq.n	8014ca2 <_strtol_l.isra.0+0xee>
 8014ca0:	4240      	negs	r0, r0
 8014ca2:	9a02      	ldr	r2, [sp, #8]
 8014ca4:	2a00      	cmp	r2, #0
 8014ca6:	d0d8      	beq.n	8014c5a <_strtol_l.isra.0+0xa6>
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d1f4      	bne.n	8014c96 <_strtol_l.isra.0+0xe2>
 8014cac:	9b02      	ldr	r3, [sp, #8]
 8014cae:	9a01      	ldr	r2, [sp, #4]
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	e7d2      	b.n	8014c5a <_strtol_l.isra.0+0xa6>
 8014cb4:	2430      	movs	r4, #48	; 0x30
 8014cb6:	2e00      	cmp	r6, #0
 8014cb8:	d1a7      	bne.n	8014c0a <_strtol_l.isra.0+0x56>
 8014cba:	3608      	adds	r6, #8
 8014cbc:	e7a5      	b.n	8014c0a <_strtol_l.isra.0+0x56>
 8014cbe:	2c30      	cmp	r4, #48	; 0x30
 8014cc0:	d09b      	beq.n	8014bfa <_strtol_l.isra.0+0x46>
 8014cc2:	260a      	movs	r6, #10
 8014cc4:	e7a1      	b.n	8014c0a <_strtol_l.isra.0+0x56>
 8014cc6:	46c0      	nop			; (mov r8, r8)
 8014cc8:	0801cb5d 	.word	0x0801cb5d
 8014ccc:	7fffffff 	.word	0x7fffffff

08014cd0 <strtol>:
 8014cd0:	b510      	push	{r4, lr}
 8014cd2:	0013      	movs	r3, r2
 8014cd4:	000a      	movs	r2, r1
 8014cd6:	0001      	movs	r1, r0
 8014cd8:	4802      	ldr	r0, [pc, #8]	; (8014ce4 <strtol+0x14>)
 8014cda:	6800      	ldr	r0, [r0, #0]
 8014cdc:	f7ff ff6a 	bl	8014bb4 <_strtol_l.isra.0>
 8014ce0:	bd10      	pop	{r4, pc}
 8014ce2:	46c0      	nop			; (mov r8, r8)
 8014ce4:	200000ac 	.word	0x200000ac

08014ce8 <_svfprintf_r>:
 8014ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cea:	b0d9      	sub	sp, #356	; 0x164
 8014cec:	001c      	movs	r4, r3
 8014cee:	910b      	str	r1, [sp, #44]	; 0x2c
 8014cf0:	9208      	str	r2, [sp, #32]
 8014cf2:	900a      	str	r0, [sp, #40]	; 0x28
 8014cf4:	f002 fda8 	bl	8017848 <_localeconv_r>
 8014cf8:	6803      	ldr	r3, [r0, #0]
 8014cfa:	0018      	movs	r0, r3
 8014cfc:	931c      	str	r3, [sp, #112]	; 0x70
 8014cfe:	f7eb fa0b 	bl	8000118 <strlen>
 8014d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d04:	9016      	str	r0, [sp, #88]	; 0x58
 8014d06:	899b      	ldrh	r3, [r3, #12]
 8014d08:	061b      	lsls	r3, r3, #24
 8014d0a:	d518      	bpl.n	8014d3e <_svfprintf_r+0x56>
 8014d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d0e:	691b      	ldr	r3, [r3, #16]
 8014d10:	9309      	str	r3, [sp, #36]	; 0x24
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d113      	bne.n	8014d3e <_svfprintf_r+0x56>
 8014d16:	2140      	movs	r1, #64	; 0x40
 8014d18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d1a:	f7fe fc3f 	bl	801359c <_malloc_r>
 8014d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d20:	6018      	str	r0, [r3, #0]
 8014d22:	6118      	str	r0, [r3, #16]
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d107      	bne.n	8014d38 <_svfprintf_r+0x50>
 8014d28:	230c      	movs	r3, #12
 8014d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d2c:	6013      	str	r3, [r2, #0]
 8014d2e:	3b0d      	subs	r3, #13
 8014d30:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014d34:	b059      	add	sp, #356	; 0x164
 8014d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d38:	2340      	movs	r3, #64	; 0x40
 8014d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d3c:	6153      	str	r3, [r2, #20]
 8014d3e:	2300      	movs	r3, #0
 8014d40:	2200      	movs	r2, #0
 8014d42:	932e      	str	r3, [sp, #184]	; 0xb8
 8014d44:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d46:	930d      	str	r3, [sp, #52]	; 0x34
 8014d48:	2300      	movs	r3, #0
 8014d4a:	9214      	str	r2, [sp, #80]	; 0x50
 8014d4c:	9315      	str	r3, [sp, #84]	; 0x54
 8014d4e:	2300      	movs	r3, #0
 8014d50:	af2f      	add	r7, sp, #188	; 0xbc
 8014d52:	972c      	str	r7, [sp, #176]	; 0xb0
 8014d54:	931f      	str	r3, [sp, #124]	; 0x7c
 8014d56:	931e      	str	r3, [sp, #120]	; 0x78
 8014d58:	9312      	str	r3, [sp, #72]	; 0x48
 8014d5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8014d5c:	931d      	str	r3, [sp, #116]	; 0x74
 8014d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d60:	9d08      	ldr	r5, [sp, #32]
 8014d62:	782b      	ldrb	r3, [r5, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <_svfprintf_r+0x86>
 8014d68:	2b25      	cmp	r3, #37	; 0x25
 8014d6a:	d000      	beq.n	8014d6e <_svfprintf_r+0x86>
 8014d6c:	e092      	b.n	8014e94 <_svfprintf_r+0x1ac>
 8014d6e:	9b08      	ldr	r3, [sp, #32]
 8014d70:	1aee      	subs	r6, r5, r3
 8014d72:	429d      	cmp	r5, r3
 8014d74:	d017      	beq.n	8014da6 <_svfprintf_r+0xbe>
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014d7a:	607e      	str	r6, [r7, #4]
 8014d7c:	199b      	adds	r3, r3, r6
 8014d7e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014d80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014d82:	3708      	adds	r7, #8
 8014d84:	9309      	str	r3, [sp, #36]	; 0x24
 8014d86:	3301      	adds	r3, #1
 8014d88:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d8a:	2b07      	cmp	r3, #7
 8014d8c:	dd08      	ble.n	8014da0 <_svfprintf_r+0xb8>
 8014d8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d92:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d94:	f003 fa42 	bl	801821c <__ssprint_r>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d000      	beq.n	8014d9e <_svfprintf_r+0xb6>
 8014d9c:	e2aa      	b.n	80152f4 <_svfprintf_r+0x60c>
 8014d9e:	af2f      	add	r7, sp, #188	; 0xbc
 8014da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014da2:	199b      	adds	r3, r3, r6
 8014da4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014da6:	782b      	ldrb	r3, [r5, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d101      	bne.n	8014db0 <_svfprintf_r+0xc8>
 8014dac:	f001 f9d2 	bl	8016154 <_svfprintf_r+0x146c>
 8014db0:	221b      	movs	r2, #27
 8014db2:	2300      	movs	r3, #0
 8014db4:	a91e      	add	r1, sp, #120	; 0x78
 8014db6:	1852      	adds	r2, r2, r1
 8014db8:	7013      	strb	r3, [r2, #0]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	001e      	movs	r6, r3
 8014dbe:	4252      	negs	r2, r2
 8014dc0:	3501      	adds	r5, #1
 8014dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8014dc4:	9318      	str	r3, [sp, #96]	; 0x60
 8014dc6:	1c6b      	adds	r3, r5, #1
 8014dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8014dca:	782b      	ldrb	r3, [r5, #0]
 8014dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014dd0:	3820      	subs	r0, #32
 8014dd2:	285a      	cmp	r0, #90	; 0x5a
 8014dd4:	d901      	bls.n	8014dda <_svfprintf_r+0xf2>
 8014dd6:	f000 fe2e 	bl	8015a36 <_svfprintf_r+0xd4e>
 8014dda:	f7eb f9af 	bl	800013c <__gnu_thumb1_case_uhi>
 8014dde:	0078      	.short	0x0078
 8014de0:	062c062c 	.word	0x062c062c
 8014de4:	062c0082 	.word	0x062c0082
 8014de8:	062c062c 	.word	0x062c062c
 8014dec:	062c005d 	.word	0x062c005d
 8014df0:	0084062c 	.word	0x0084062c
 8014df4:	062c008c 	.word	0x062c008c
 8014df8:	0091008a 	.word	0x0091008a
 8014dfc:	00b2062c 	.word	0x00b2062c
 8014e00:	00b400b4 	.word	0x00b400b4
 8014e04:	00b400b4 	.word	0x00b400b4
 8014e08:	00b400b4 	.word	0x00b400b4
 8014e0c:	00b400b4 	.word	0x00b400b4
 8014e10:	062c00b4 	.word	0x062c00b4
 8014e14:	062c062c 	.word	0x062c062c
 8014e18:	062c062c 	.word	0x062c062c
 8014e1c:	062c062c 	.word	0x062c062c
 8014e20:	062c0216 	.word	0x062c0216
 8014e24:	01cf00e0 	.word	0x01cf00e0
 8014e28:	02160216 	.word	0x02160216
 8014e2c:	062c0216 	.word	0x062c0216
 8014e30:	062c062c 	.word	0x062c062c
 8014e34:	00c7062c 	.word	0x00c7062c
 8014e38:	062c062c 	.word	0x062c062c
 8014e3c:	062c04d6 	.word	0x062c04d6
 8014e40:	062c062c 	.word	0x062c062c
 8014e44:	062c051d 	.word	0x062c051d
 8014e48:	062c053d 	.word	0x062c053d
 8014e4c:	056e062c 	.word	0x056e062c
 8014e50:	062c062c 	.word	0x062c062c
 8014e54:	062c062c 	.word	0x062c062c
 8014e58:	062c062c 	.word	0x062c062c
 8014e5c:	062c062c 	.word	0x062c062c
 8014e60:	062c0216 	.word	0x062c0216
 8014e64:	01d100e0 	.word	0x01d100e0
 8014e68:	02160216 	.word	0x02160216
 8014e6c:	00c90216 	.word	0x00c90216
 8014e70:	00dc01d1 	.word	0x00dc01d1
 8014e74:	00d5062c 	.word	0x00d5062c
 8014e78:	04b9062c 	.word	0x04b9062c
 8014e7c:	050d04d8 	.word	0x050d04d8
 8014e80:	062c00dc 	.word	0x062c00dc
 8014e84:	0080051d 	.word	0x0080051d
 8014e88:	062c053f 	.word	0x062c053f
 8014e8c:	058e062c 	.word	0x058e062c
 8014e90:	0080062c 	.word	0x0080062c
 8014e94:	3501      	adds	r5, #1
 8014e96:	e764      	b.n	8014d62 <_svfprintf_r+0x7a>
 8014e98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e9a:	f002 fcd5 	bl	8017848 <_localeconv_r>
 8014e9e:	6843      	ldr	r3, [r0, #4]
 8014ea0:	0018      	movs	r0, r3
 8014ea2:	931d      	str	r3, [sp, #116]	; 0x74
 8014ea4:	f7eb f938 	bl	8000118 <strlen>
 8014ea8:	901b      	str	r0, [sp, #108]	; 0x6c
 8014eaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eac:	f002 fccc 	bl	8017848 <_localeconv_r>
 8014eb0:	6883      	ldr	r3, [r0, #8]
 8014eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8014eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d011      	beq.n	8014ede <_svfprintf_r+0x1f6>
 8014eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00e      	beq.n	8014ede <_svfprintf_r+0x1f6>
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d00b      	beq.n	8014ede <_svfprintf_r+0x1f6>
 8014ec6:	2380      	movs	r3, #128	; 0x80
 8014ec8:	00db      	lsls	r3, r3, #3
 8014eca:	431e      	orrs	r6, r3
 8014ecc:	e007      	b.n	8014ede <_svfprintf_r+0x1f6>
 8014ece:	231b      	movs	r3, #27
 8014ed0:	aa1e      	add	r2, sp, #120	; 0x78
 8014ed2:	189b      	adds	r3, r3, r2
 8014ed4:	781a      	ldrb	r2, [r3, #0]
 8014ed6:	2a00      	cmp	r2, #0
 8014ed8:	d101      	bne.n	8014ede <_svfprintf_r+0x1f6>
 8014eda:	3220      	adds	r2, #32
 8014edc:	701a      	strb	r2, [r3, #0]
 8014ede:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014ee0:	e771      	b.n	8014dc6 <_svfprintf_r+0xde>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e7f1      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014ee6:	cc08      	ldmia	r4!, {r3}
 8014ee8:	9318      	str	r3, [sp, #96]	; 0x60
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	daf7      	bge.n	8014ede <_svfprintf_r+0x1f6>
 8014eee:	425b      	negs	r3, r3
 8014ef0:	9318      	str	r3, [sp, #96]	; 0x60
 8014ef2:	2304      	movs	r3, #4
 8014ef4:	e7e9      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014ef6:	231b      	movs	r3, #27
 8014ef8:	aa1e      	add	r2, sp, #120	; 0x78
 8014efa:	189b      	adds	r3, r3, r2
 8014efc:	222b      	movs	r2, #43	; 0x2b
 8014efe:	e7ed      	b.n	8014edc <_svfprintf_r+0x1f4>
 8014f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f04:	7812      	ldrb	r2, [r2, #0]
 8014f06:	3301      	adds	r3, #1
 8014f08:	920f      	str	r2, [sp, #60]	; 0x3c
 8014f0a:	2a2a      	cmp	r2, #42	; 0x2a
 8014f0c:	d010      	beq.n	8014f30 <_svfprintf_r+0x248>
 8014f0e:	2200      	movs	r2, #0
 8014f10:	9209      	str	r2, [sp, #36]	; 0x24
 8014f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f14:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f16:	3a30      	subs	r2, #48	; 0x30
 8014f18:	2a09      	cmp	r2, #9
 8014f1a:	d900      	bls.n	8014f1e <_svfprintf_r+0x236>
 8014f1c:	e757      	b.n	8014dce <_svfprintf_r+0xe6>
 8014f1e:	210a      	movs	r1, #10
 8014f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f22:	4348      	muls	r0, r1
 8014f24:	1882      	adds	r2, r0, r2
 8014f26:	9209      	str	r2, [sp, #36]	; 0x24
 8014f28:	781a      	ldrb	r2, [r3, #0]
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	920f      	str	r2, [sp, #60]	; 0x3c
 8014f2e:	e7f0      	b.n	8014f12 <_svfprintf_r+0x22a>
 8014f30:	cc04      	ldmia	r4!, {r2}
 8014f32:	9209      	str	r2, [sp, #36]	; 0x24
 8014f34:	2a00      	cmp	r2, #0
 8014f36:	da02      	bge.n	8014f3e <_svfprintf_r+0x256>
 8014f38:	2201      	movs	r2, #1
 8014f3a:	4252      	negs	r2, r2
 8014f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8014f3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f40:	e7cd      	b.n	8014ede <_svfprintf_r+0x1f6>
 8014f42:	2380      	movs	r3, #128	; 0x80
 8014f44:	e7c1      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f46:	2200      	movs	r2, #0
 8014f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f4a:	9218      	str	r2, [sp, #96]	; 0x60
 8014f4c:	210a      	movs	r1, #10
 8014f4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f50:	434a      	muls	r2, r1
 8014f52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f54:	3930      	subs	r1, #48	; 0x30
 8014f56:	188a      	adds	r2, r1, r2
 8014f58:	9218      	str	r2, [sp, #96]	; 0x60
 8014f5a:	001a      	movs	r2, r3
 8014f5c:	7812      	ldrb	r2, [r2, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	920f      	str	r2, [sp, #60]	; 0x3c
 8014f62:	3a30      	subs	r2, #48	; 0x30
 8014f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f66:	2a09      	cmp	r2, #9
 8014f68:	d9f0      	bls.n	8014f4c <_svfprintf_r+0x264>
 8014f6a:	e730      	b.n	8014dce <_svfprintf_r+0xe6>
 8014f6c:	2308      	movs	r3, #8
 8014f6e:	e7ac      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	2b68      	cmp	r3, #104	; 0x68
 8014f76:	d105      	bne.n	8014f84 <_svfprintf_r+0x29c>
 8014f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f7e:	2380      	movs	r3, #128	; 0x80
 8014f80:	009b      	lsls	r3, r3, #2
 8014f82:	e7a2      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f84:	2340      	movs	r3, #64	; 0x40
 8014f86:	e7a0      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	2b6c      	cmp	r3, #108	; 0x6c
 8014f8e:	d104      	bne.n	8014f9a <_svfprintf_r+0x2b2>
 8014f90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f92:	3301      	adds	r3, #1
 8014f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f96:	2320      	movs	r3, #32
 8014f98:	e797      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f9a:	2310      	movs	r3, #16
 8014f9c:	e795      	b.n	8014eca <_svfprintf_r+0x1e2>
 8014f9e:	0022      	movs	r2, r4
 8014fa0:	ca08      	ldmia	r2!, {r3}
 8014fa2:	a83f      	add	r0, sp, #252	; 0xfc
 8014fa4:	920e      	str	r2, [sp, #56]	; 0x38
 8014fa6:	221b      	movs	r2, #27
 8014fa8:	7003      	strb	r3, [r0, #0]
 8014faa:	2300      	movs	r3, #0
 8014fac:	a91e      	add	r1, sp, #120	; 0x78
 8014fae:	1852      	adds	r2, r2, r1
 8014fb0:	7013      	strb	r3, [r2, #0]
 8014fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8014fb8:	2300      	movs	r3, #0
 8014fba:	001d      	movs	r5, r3
 8014fbc:	9319      	str	r3, [sp, #100]	; 0x64
 8014fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8014fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8014fc2:	9008      	str	r0, [sp, #32]
 8014fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	da00      	bge.n	8014fd0 <_svfprintf_r+0x2e8>
 8014fce:	921a      	str	r2, [sp, #104]	; 0x68
 8014fd0:	231b      	movs	r3, #27
 8014fd2:	aa1e      	add	r2, sp, #120	; 0x78
 8014fd4:	189b      	adds	r3, r3, r2
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	1e5a      	subs	r2, r3, #1
 8014fda:	4193      	sbcs	r3, r2
 8014fdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014fde:	18d3      	adds	r3, r2, r3
 8014fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8014fe2:	0032      	movs	r2, r6
 8014fe4:	2302      	movs	r3, #2
 8014fe6:	401a      	ands	r2, r3
 8014fe8:	9220      	str	r2, [sp, #128]	; 0x80
 8014fea:	421e      	tst	r6, r3
 8014fec:	d002      	beq.n	8014ff4 <_svfprintf_r+0x30c>
 8014fee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014ff0:	3302      	adds	r3, #2
 8014ff2:	931a      	str	r3, [sp, #104]	; 0x68
 8014ff4:	2384      	movs	r3, #132	; 0x84
 8014ff6:	0032      	movs	r2, r6
 8014ff8:	401a      	ands	r2, r3
 8014ffa:	9221      	str	r2, [sp, #132]	; 0x84
 8014ffc:	421e      	tst	r6, r3
 8014ffe:	d121      	bne.n	8015044 <_svfprintf_r+0x35c>
 8015000:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015002:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015004:	1a9c      	subs	r4, r3, r2
 8015006:	2c00      	cmp	r4, #0
 8015008:	dd1c      	ble.n	8015044 <_svfprintf_r+0x35c>
 801500a:	0039      	movs	r1, r7
 801500c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801500e:	48c5      	ldr	r0, [pc, #788]	; (8015324 <_svfprintf_r+0x63c>)
 8015010:	9322      	str	r3, [sp, #136]	; 0x88
 8015012:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015014:	3301      	adds	r3, #1
 8015016:	3108      	adds	r1, #8
 8015018:	6038      	str	r0, [r7, #0]
 801501a:	2c10      	cmp	r4, #16
 801501c:	dd01      	ble.n	8015022 <_svfprintf_r+0x33a>
 801501e:	f000 fd1d 	bl	8015a5c <_svfprintf_r+0xd74>
 8015022:	607c      	str	r4, [r7, #4]
 8015024:	18a4      	adds	r4, r4, r2
 8015026:	000f      	movs	r7, r1
 8015028:	942e      	str	r4, [sp, #184]	; 0xb8
 801502a:	932d      	str	r3, [sp, #180]	; 0xb4
 801502c:	2b07      	cmp	r3, #7
 801502e:	dd09      	ble.n	8015044 <_svfprintf_r+0x35c>
 8015030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015032:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015034:	aa2c      	add	r2, sp, #176	; 0xb0
 8015036:	f003 f8f1 	bl	801821c <__ssprint_r>
 801503a:	2800      	cmp	r0, #0
 801503c:	d001      	beq.n	8015042 <_svfprintf_r+0x35a>
 801503e:	f001 f868 	bl	8016112 <_svfprintf_r+0x142a>
 8015042:	af2f      	add	r7, sp, #188	; 0xbc
 8015044:	231b      	movs	r3, #27
 8015046:	aa1e      	add	r2, sp, #120	; 0x78
 8015048:	189b      	adds	r3, r3, r2
 801504a:	781a      	ldrb	r2, [r3, #0]
 801504c:	2a00      	cmp	r2, #0
 801504e:	d017      	beq.n	8015080 <_svfprintf_r+0x398>
 8015050:	603b      	str	r3, [r7, #0]
 8015052:	2301      	movs	r3, #1
 8015054:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015056:	607b      	str	r3, [r7, #4]
 8015058:	0013      	movs	r3, r2
 801505a:	3301      	adds	r3, #1
 801505c:	932e      	str	r3, [sp, #184]	; 0xb8
 801505e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015060:	3708      	adds	r7, #8
 8015062:	9322      	str	r3, [sp, #136]	; 0x88
 8015064:	3301      	adds	r3, #1
 8015066:	932d      	str	r3, [sp, #180]	; 0xb4
 8015068:	2b07      	cmp	r3, #7
 801506a:	dd09      	ble.n	8015080 <_svfprintf_r+0x398>
 801506c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015070:	aa2c      	add	r2, sp, #176	; 0xb0
 8015072:	f003 f8d3 	bl	801821c <__ssprint_r>
 8015076:	2800      	cmp	r0, #0
 8015078:	d001      	beq.n	801507e <_svfprintf_r+0x396>
 801507a:	f001 f84a 	bl	8016112 <_svfprintf_r+0x142a>
 801507e:	af2f      	add	r7, sp, #188	; 0xbc
 8015080:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015082:	2b00      	cmp	r3, #0
 8015084:	d019      	beq.n	80150ba <_svfprintf_r+0x3d2>
 8015086:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015088:	9320      	str	r3, [sp, #128]	; 0x80
 801508a:	ab25      	add	r3, sp, #148	; 0x94
 801508c:	603b      	str	r3, [r7, #0]
 801508e:	2302      	movs	r3, #2
 8015090:	607b      	str	r3, [r7, #4]
 8015092:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015094:	3708      	adds	r7, #8
 8015096:	3302      	adds	r3, #2
 8015098:	932e      	str	r3, [sp, #184]	; 0xb8
 801509a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801509c:	9320      	str	r3, [sp, #128]	; 0x80
 801509e:	3301      	adds	r3, #1
 80150a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80150a2:	2b07      	cmp	r3, #7
 80150a4:	dd09      	ble.n	80150ba <_svfprintf_r+0x3d2>
 80150a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80150ac:	f003 f8b6 	bl	801821c <__ssprint_r>
 80150b0:	2800      	cmp	r0, #0
 80150b2:	d001      	beq.n	80150b8 <_svfprintf_r+0x3d0>
 80150b4:	f001 f82d 	bl	8016112 <_svfprintf_r+0x142a>
 80150b8:	af2f      	add	r7, sp, #188	; 0xbc
 80150ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150bc:	2b80      	cmp	r3, #128	; 0x80
 80150be:	d121      	bne.n	8015104 <_svfprintf_r+0x41c>
 80150c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80150c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80150c4:	1a9c      	subs	r4, r3, r2
 80150c6:	2c00      	cmp	r4, #0
 80150c8:	dd1c      	ble.n	8015104 <_svfprintf_r+0x41c>
 80150ca:	0039      	movs	r1, r7
 80150cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150ce:	4896      	ldr	r0, [pc, #600]	; (8015328 <_svfprintf_r+0x640>)
 80150d0:	9320      	str	r3, [sp, #128]	; 0x80
 80150d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80150d4:	3301      	adds	r3, #1
 80150d6:	3108      	adds	r1, #8
 80150d8:	6038      	str	r0, [r7, #0]
 80150da:	2c10      	cmp	r4, #16
 80150dc:	dd01      	ble.n	80150e2 <_svfprintf_r+0x3fa>
 80150de:	f000 fcd1 	bl	8015a84 <_svfprintf_r+0xd9c>
 80150e2:	607c      	str	r4, [r7, #4]
 80150e4:	18a4      	adds	r4, r4, r2
 80150e6:	000f      	movs	r7, r1
 80150e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80150ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80150ec:	2b07      	cmp	r3, #7
 80150ee:	dd09      	ble.n	8015104 <_svfprintf_r+0x41c>
 80150f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80150f6:	f003 f891 	bl	801821c <__ssprint_r>
 80150fa:	2800      	cmp	r0, #0
 80150fc:	d001      	beq.n	8015102 <_svfprintf_r+0x41a>
 80150fe:	f001 f808 	bl	8016112 <_svfprintf_r+0x142a>
 8015102:	af2f      	add	r7, sp, #188	; 0xbc
 8015104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015108:	1a9c      	subs	r4, r3, r2
 801510a:	2c00      	cmp	r4, #0
 801510c:	dd1c      	ble.n	8015148 <_svfprintf_r+0x460>
 801510e:	0039      	movs	r1, r7
 8015110:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015112:	4885      	ldr	r0, [pc, #532]	; (8015328 <_svfprintf_r+0x640>)
 8015114:	9319      	str	r3, [sp, #100]	; 0x64
 8015116:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015118:	3301      	adds	r3, #1
 801511a:	3108      	adds	r1, #8
 801511c:	6038      	str	r0, [r7, #0]
 801511e:	2c10      	cmp	r4, #16
 8015120:	dd01      	ble.n	8015126 <_svfprintf_r+0x43e>
 8015122:	f000 fcc3 	bl	8015aac <_svfprintf_r+0xdc4>
 8015126:	1912      	adds	r2, r2, r4
 8015128:	607c      	str	r4, [r7, #4]
 801512a:	922e      	str	r2, [sp, #184]	; 0xb8
 801512c:	000f      	movs	r7, r1
 801512e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015130:	2b07      	cmp	r3, #7
 8015132:	dd09      	ble.n	8015148 <_svfprintf_r+0x460>
 8015134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015136:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015138:	aa2c      	add	r2, sp, #176	; 0xb0
 801513a:	f003 f86f 	bl	801821c <__ssprint_r>
 801513e:	2800      	cmp	r0, #0
 8015140:	d001      	beq.n	8015146 <_svfprintf_r+0x45e>
 8015142:	f000 ffe6 	bl	8016112 <_svfprintf_r+0x142a>
 8015146:	af2f      	add	r7, sp, #188	; 0xbc
 8015148:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801514a:	9319      	str	r3, [sp, #100]	; 0x64
 801514c:	05f3      	lsls	r3, r6, #23
 801514e:	d501      	bpl.n	8015154 <_svfprintf_r+0x46c>
 8015150:	f000 fcc8 	bl	8015ae4 <_svfprintf_r+0xdfc>
 8015154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015156:	9b08      	ldr	r3, [sp, #32]
 8015158:	4694      	mov	ip, r2
 801515a:	603b      	str	r3, [r7, #0]
 801515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801515e:	607b      	str	r3, [r7, #4]
 8015160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015162:	4463      	add	r3, ip
 8015164:	932e      	str	r3, [sp, #184]	; 0xb8
 8015166:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015168:	9308      	str	r3, [sp, #32]
 801516a:	3301      	adds	r3, #1
 801516c:	932d      	str	r3, [sp, #180]	; 0xb4
 801516e:	2b07      	cmp	r3, #7
 8015170:	dd01      	ble.n	8015176 <_svfprintf_r+0x48e>
 8015172:	f000 fda8 	bl	8015cc6 <_svfprintf_r+0xfde>
 8015176:	3708      	adds	r7, #8
 8015178:	f000 fcfb 	bl	8015b72 <_svfprintf_r+0xe8a>
 801517c:	2310      	movs	r3, #16
 801517e:	431e      	orrs	r6, r3
 8015180:	06b3      	lsls	r3, r6, #26
 8015182:	d530      	bpl.n	80151e6 <_svfprintf_r+0x4fe>
 8015184:	2307      	movs	r3, #7
 8015186:	3407      	adds	r4, #7
 8015188:	439c      	bics	r4, r3
 801518a:	0022      	movs	r2, r4
 801518c:	ca18      	ldmia	r2!, {r3, r4}
 801518e:	9306      	str	r3, [sp, #24]
 8015190:	9407      	str	r4, [sp, #28]
 8015192:	920e      	str	r2, [sp, #56]	; 0x38
 8015194:	9a07      	ldr	r2, [sp, #28]
 8015196:	2301      	movs	r3, #1
 8015198:	2a00      	cmp	r2, #0
 801519a:	da0b      	bge.n	80151b4 <_svfprintf_r+0x4cc>
 801519c:	9c06      	ldr	r4, [sp, #24]
 801519e:	9d07      	ldr	r5, [sp, #28]
 80151a0:	2200      	movs	r2, #0
 80151a2:	4261      	negs	r1, r4
 80151a4:	41aa      	sbcs	r2, r5
 80151a6:	9106      	str	r1, [sp, #24]
 80151a8:	9207      	str	r2, [sp, #28]
 80151aa:	221b      	movs	r2, #27
 80151ac:	a91e      	add	r1, sp, #120	; 0x78
 80151ae:	1852      	adds	r2, r2, r1
 80151b0:	212d      	movs	r1, #45	; 0x2d
 80151b2:	7011      	strb	r1, [r2, #0]
 80151b4:	9907      	ldr	r1, [sp, #28]
 80151b6:	9a06      	ldr	r2, [sp, #24]
 80151b8:	430a      	orrs	r2, r1
 80151ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151bc:	3101      	adds	r1, #1
 80151be:	d101      	bne.n	80151c4 <_svfprintf_r+0x4dc>
 80151c0:	f000 ffd5 	bl	801616e <_svfprintf_r+0x1486>
 80151c4:	2180      	movs	r1, #128	; 0x80
 80151c6:	0035      	movs	r5, r6
 80151c8:	438d      	bics	r5, r1
 80151ca:	2a00      	cmp	r2, #0
 80151cc:	d001      	beq.n	80151d2 <_svfprintf_r+0x4ea>
 80151ce:	f000 ffd3 	bl	8016178 <_svfprintf_r+0x1490>
 80151d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	d101      	bne.n	80151dc <_svfprintf_r+0x4f4>
 80151d8:	f000 fc20 	bl	8015a1c <_svfprintf_r+0xd34>
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d001      	beq.n	80151e4 <_svfprintf_r+0x4fc>
 80151e0:	f000 ffce 	bl	8016180 <_svfprintf_r+0x1498>
 80151e4:	e3b1      	b.n	801594a <_svfprintf_r+0xc62>
 80151e6:	1d23      	adds	r3, r4, #4
 80151e8:	930e      	str	r3, [sp, #56]	; 0x38
 80151ea:	06f3      	lsls	r3, r6, #27
 80151ec:	d504      	bpl.n	80151f8 <_svfprintf_r+0x510>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	9306      	str	r3, [sp, #24]
 80151f2:	17db      	asrs	r3, r3, #31
 80151f4:	9307      	str	r3, [sp, #28]
 80151f6:	e7cd      	b.n	8015194 <_svfprintf_r+0x4ac>
 80151f8:	6823      	ldr	r3, [r4, #0]
 80151fa:	0672      	lsls	r2, r6, #25
 80151fc:	d501      	bpl.n	8015202 <_svfprintf_r+0x51a>
 80151fe:	b21b      	sxth	r3, r3
 8015200:	e7f6      	b.n	80151f0 <_svfprintf_r+0x508>
 8015202:	05b2      	lsls	r2, r6, #22
 8015204:	d5f4      	bpl.n	80151f0 <_svfprintf_r+0x508>
 8015206:	b25b      	sxtb	r3, r3
 8015208:	e7f2      	b.n	80151f0 <_svfprintf_r+0x508>
 801520a:	2307      	movs	r3, #7
 801520c:	3407      	adds	r4, #7
 801520e:	439c      	bics	r4, r3
 8015210:	0022      	movs	r2, r4
 8015212:	ca18      	ldmia	r2!, {r3, r4}
 8015214:	920e      	str	r2, [sp, #56]	; 0x38
 8015216:	2201      	movs	r2, #1
 8015218:	9314      	str	r3, [sp, #80]	; 0x50
 801521a:	9415      	str	r4, [sp, #84]	; 0x54
 801521c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801521e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015220:	005c      	lsls	r4, r3, #1
 8015222:	0864      	lsrs	r4, r4, #1
 8015224:	0028      	movs	r0, r5
 8015226:	0021      	movs	r1, r4
 8015228:	4b40      	ldr	r3, [pc, #256]	; (801532c <_svfprintf_r+0x644>)
 801522a:	4252      	negs	r2, r2
 801522c:	f7ed fdb4 	bl	8002d98 <__aeabi_dcmpun>
 8015230:	2800      	cmp	r0, #0
 8015232:	d126      	bne.n	8015282 <_svfprintf_r+0x59a>
 8015234:	2201      	movs	r2, #1
 8015236:	0028      	movs	r0, r5
 8015238:	0021      	movs	r1, r4
 801523a:	4b3c      	ldr	r3, [pc, #240]	; (801532c <_svfprintf_r+0x644>)
 801523c:	4252      	negs	r2, r2
 801523e:	f7eb f91d 	bl	800047c <__aeabi_dcmple>
 8015242:	2800      	cmp	r0, #0
 8015244:	d11d      	bne.n	8015282 <_svfprintf_r+0x59a>
 8015246:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015248:	9915      	ldr	r1, [sp, #84]	; 0x54
 801524a:	2200      	movs	r2, #0
 801524c:	2300      	movs	r3, #0
 801524e:	f7eb f90b 	bl	8000468 <__aeabi_dcmplt>
 8015252:	2800      	cmp	r0, #0
 8015254:	d004      	beq.n	8015260 <_svfprintf_r+0x578>
 8015256:	231b      	movs	r3, #27
 8015258:	aa1e      	add	r2, sp, #120	; 0x78
 801525a:	189b      	adds	r3, r3, r2
 801525c:	222d      	movs	r2, #45	; 0x2d
 801525e:	701a      	strb	r2, [r3, #0]
 8015260:	4b33      	ldr	r3, [pc, #204]	; (8015330 <_svfprintf_r+0x648>)
 8015262:	9308      	str	r3, [sp, #32]
 8015264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015266:	2b47      	cmp	r3, #71	; 0x47
 8015268:	dd01      	ble.n	801526e <_svfprintf_r+0x586>
 801526a:	4b32      	ldr	r3, [pc, #200]	; (8015334 <_svfprintf_r+0x64c>)
 801526c:	9308      	str	r3, [sp, #32]
 801526e:	2380      	movs	r3, #128	; 0x80
 8015270:	439e      	bics	r6, r3
 8015272:	2300      	movs	r3, #0
 8015274:	930c      	str	r3, [sp, #48]	; 0x30
 8015276:	3303      	adds	r3, #3
 8015278:	9309      	str	r3, [sp, #36]	; 0x24
 801527a:	2300      	movs	r3, #0
 801527c:	9319      	str	r3, [sp, #100]	; 0x64
 801527e:	f000 ffae 	bl	80161de <_svfprintf_r+0x14f6>
 8015282:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015286:	0010      	movs	r0, r2
 8015288:	0019      	movs	r1, r3
 801528a:	f7ed fd85 	bl	8002d98 <__aeabi_dcmpun>
 801528e:	2800      	cmp	r0, #0
 8015290:	d00e      	beq.n	80152b0 <_svfprintf_r+0x5c8>
 8015292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015294:	2b00      	cmp	r3, #0
 8015296:	da04      	bge.n	80152a2 <_svfprintf_r+0x5ba>
 8015298:	231b      	movs	r3, #27
 801529a:	aa1e      	add	r2, sp, #120	; 0x78
 801529c:	189b      	adds	r3, r3, r2
 801529e:	222d      	movs	r2, #45	; 0x2d
 80152a0:	701a      	strb	r2, [r3, #0]
 80152a2:	4b25      	ldr	r3, [pc, #148]	; (8015338 <_svfprintf_r+0x650>)
 80152a4:	9308      	str	r3, [sp, #32]
 80152a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152a8:	2b47      	cmp	r3, #71	; 0x47
 80152aa:	dde0      	ble.n	801526e <_svfprintf_r+0x586>
 80152ac:	4b23      	ldr	r3, [pc, #140]	; (801533c <_svfprintf_r+0x654>)
 80152ae:	e7dd      	b.n	801526c <_svfprintf_r+0x584>
 80152b0:	2320      	movs	r3, #32
 80152b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152b4:	439a      	bics	r2, r3
 80152b6:	9210      	str	r2, [sp, #64]	; 0x40
 80152b8:	2a41      	cmp	r2, #65	; 0x41
 80152ba:	d123      	bne.n	8015304 <_svfprintf_r+0x61c>
 80152bc:	2230      	movs	r2, #48	; 0x30
 80152be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152c0:	ab25      	add	r3, sp, #148	; 0x94
 80152c2:	701a      	strb	r2, [r3, #0]
 80152c4:	3248      	adds	r2, #72	; 0x48
 80152c6:	2961      	cmp	r1, #97	; 0x61
 80152c8:	d000      	beq.n	80152cc <_svfprintf_r+0x5e4>
 80152ca:	3a20      	subs	r2, #32
 80152cc:	705a      	strb	r2, [r3, #1]
 80152ce:	2302      	movs	r3, #2
 80152d0:	431e      	orrs	r6, r3
 80152d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d4:	2b63      	cmp	r3, #99	; 0x63
 80152d6:	dd33      	ble.n	8015340 <_svfprintf_r+0x658>
 80152d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152da:	1c59      	adds	r1, r3, #1
 80152dc:	f7fe f95e 	bl	801359c <_malloc_r>
 80152e0:	9008      	str	r0, [sp, #32]
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d000      	beq.n	80152e8 <_svfprintf_r+0x600>
 80152e6:	e141      	b.n	801556c <_svfprintf_r+0x884>
 80152e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152ea:	899a      	ldrh	r2, [r3, #12]
 80152ec:	2340      	movs	r3, #64	; 0x40
 80152ee:	4313      	orrs	r3, r2
 80152f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152f2:	8193      	strh	r3, [r2, #12]
 80152f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152f6:	899b      	ldrh	r3, [r3, #12]
 80152f8:	065b      	lsls	r3, r3, #25
 80152fa:	d400      	bmi.n	80152fe <_svfprintf_r+0x616>
 80152fc:	e519      	b.n	8014d32 <_svfprintf_r+0x4a>
 80152fe:	2301      	movs	r3, #1
 8015300:	425b      	negs	r3, r3
 8015302:	e515      	b.n	8014d30 <_svfprintf_r+0x48>
 8015304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015306:	900c      	str	r0, [sp, #48]	; 0x30
 8015308:	3301      	adds	r3, #1
 801530a:	d100      	bne.n	801530e <_svfprintf_r+0x626>
 801530c:	e131      	b.n	8015572 <_svfprintf_r+0x88a>
 801530e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015310:	2b47      	cmp	r3, #71	; 0x47
 8015312:	d119      	bne.n	8015348 <_svfprintf_r+0x660>
 8015314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015316:	2b00      	cmp	r3, #0
 8015318:	d116      	bne.n	8015348 <_svfprintf_r+0x660>
 801531a:	930c      	str	r3, [sp, #48]	; 0x30
 801531c:	3301      	adds	r3, #1
 801531e:	9309      	str	r3, [sp, #36]	; 0x24
 8015320:	e012      	b.n	8015348 <_svfprintf_r+0x660>
 8015322:	46c0      	nop			; (mov r8, r8)
 8015324:	0801ccec 	.word	0x0801ccec
 8015328:	0801ccfc 	.word	0x0801ccfc
 801532c:	7fefffff 	.word	0x7fefffff
 8015330:	0801ccb8 	.word	0x0801ccb8
 8015334:	0801ccbc 	.word	0x0801ccbc
 8015338:	0801ccc0 	.word	0x0801ccc0
 801533c:	0801ccc4 	.word	0x0801ccc4
 8015340:	2300      	movs	r3, #0
 8015342:	930c      	str	r3, [sp, #48]	; 0x30
 8015344:	ab3f      	add	r3, sp, #252	; 0xfc
 8015346:	9308      	str	r3, [sp, #32]
 8015348:	2380      	movs	r3, #128	; 0x80
 801534a:	005b      	lsls	r3, r3, #1
 801534c:	4333      	orrs	r3, r6
 801534e:	9320      	str	r3, [sp, #128]	; 0x80
 8015350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015352:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015354:	2b00      	cmp	r3, #0
 8015356:	db00      	blt.n	801535a <_svfprintf_r+0x672>
 8015358:	e10d      	b.n	8015576 <_svfprintf_r+0x88e>
 801535a:	2280      	movs	r2, #128	; 0x80
 801535c:	0612      	lsls	r2, r2, #24
 801535e:	4694      	mov	ip, r2
 8015360:	4463      	add	r3, ip
 8015362:	930d      	str	r3, [sp, #52]	; 0x34
 8015364:	232d      	movs	r3, #45	; 0x2d
 8015366:	9322      	str	r3, [sp, #136]	; 0x88
 8015368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801536a:	2b41      	cmp	r3, #65	; 0x41
 801536c:	d000      	beq.n	8015370 <_svfprintf_r+0x688>
 801536e:	e11b      	b.n	80155a8 <_svfprintf_r+0x8c0>
 8015370:	0020      	movs	r0, r4
 8015372:	aa26      	add	r2, sp, #152	; 0x98
 8015374:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015376:	f002 ff19 	bl	80181ac <frexp>
 801537a:	23ff      	movs	r3, #255	; 0xff
 801537c:	2200      	movs	r2, #0
 801537e:	059b      	lsls	r3, r3, #22
 8015380:	f7ec ff0c 	bl	800219c <__aeabi_dmul>
 8015384:	2200      	movs	r2, #0
 8015386:	2300      	movs	r3, #0
 8015388:	0004      	movs	r4, r0
 801538a:	000d      	movs	r5, r1
 801538c:	f7eb f866 	bl	800045c <__aeabi_dcmpeq>
 8015390:	2800      	cmp	r0, #0
 8015392:	d001      	beq.n	8015398 <_svfprintf_r+0x6b0>
 8015394:	2301      	movs	r3, #1
 8015396:	9326      	str	r3, [sp, #152]	; 0x98
 8015398:	4bc6      	ldr	r3, [pc, #792]	; (80156b4 <_svfprintf_r+0x9cc>)
 801539a:	9319      	str	r3, [sp, #100]	; 0x64
 801539c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801539e:	2b61      	cmp	r3, #97	; 0x61
 80153a0:	d001      	beq.n	80153a6 <_svfprintf_r+0x6be>
 80153a2:	4bc5      	ldr	r3, [pc, #788]	; (80156b8 <_svfprintf_r+0x9d0>)
 80153a4:	9319      	str	r3, [sp, #100]	; 0x64
 80153a6:	9b08      	ldr	r3, [sp, #32]
 80153a8:	930d      	str	r3, [sp, #52]	; 0x34
 80153aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ac:	3b01      	subs	r3, #1
 80153ae:	9311      	str	r3, [sp, #68]	; 0x44
 80153b0:	2200      	movs	r2, #0
 80153b2:	4bc2      	ldr	r3, [pc, #776]	; (80156bc <_svfprintf_r+0x9d4>)
 80153b4:	0020      	movs	r0, r4
 80153b6:	0029      	movs	r1, r5
 80153b8:	f7ec fef0 	bl	800219c <__aeabi_dmul>
 80153bc:	000d      	movs	r5, r1
 80153be:	0004      	movs	r4, r0
 80153c0:	f7ed fd08 	bl	8002dd4 <__aeabi_d2iz>
 80153c4:	9021      	str	r0, [sp, #132]	; 0x84
 80153c6:	f7ed fd3b 	bl	8002e40 <__aeabi_i2d>
 80153ca:	0002      	movs	r2, r0
 80153cc:	000b      	movs	r3, r1
 80153ce:	0020      	movs	r0, r4
 80153d0:	0029      	movs	r1, r5
 80153d2:	f7ed f94f 	bl	8002674 <__aeabi_dsub>
 80153d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153d8:	000d      	movs	r5, r1
 80153da:	001a      	movs	r2, r3
 80153dc:	3201      	adds	r2, #1
 80153de:	9921      	ldr	r1, [sp, #132]	; 0x84
 80153e0:	920d      	str	r2, [sp, #52]	; 0x34
 80153e2:	9223      	str	r2, [sp, #140]	; 0x8c
 80153e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80153e6:	0004      	movs	r4, r0
 80153e8:	5c52      	ldrb	r2, [r2, r1]
 80153ea:	701a      	strb	r2, [r3, #0]
 80153ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153ee:	931a      	str	r3, [sp, #104]	; 0x68
 80153f0:	3301      	adds	r3, #1
 80153f2:	d00a      	beq.n	801540a <_svfprintf_r+0x722>
 80153f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153f6:	2200      	movs	r2, #0
 80153f8:	3b01      	subs	r3, #1
 80153fa:	9311      	str	r3, [sp, #68]	; 0x44
 80153fc:	0020      	movs	r0, r4
 80153fe:	2300      	movs	r3, #0
 8015400:	0029      	movs	r1, r5
 8015402:	f7eb f82b 	bl	800045c <__aeabi_dcmpeq>
 8015406:	2800      	cmp	r0, #0
 8015408:	d0d2      	beq.n	80153b0 <_svfprintf_r+0x6c8>
 801540a:	2200      	movs	r2, #0
 801540c:	0020      	movs	r0, r4
 801540e:	0029      	movs	r1, r5
 8015410:	4bab      	ldr	r3, [pc, #684]	; (80156c0 <_svfprintf_r+0x9d8>)
 8015412:	f7eb f83d 	bl	8000490 <__aeabi_dcmpgt>
 8015416:	2800      	cmp	r0, #0
 8015418:	d10c      	bne.n	8015434 <_svfprintf_r+0x74c>
 801541a:	2200      	movs	r2, #0
 801541c:	0020      	movs	r0, r4
 801541e:	0029      	movs	r1, r5
 8015420:	4ba7      	ldr	r3, [pc, #668]	; (80156c0 <_svfprintf_r+0x9d8>)
 8015422:	f7eb f81b 	bl	800045c <__aeabi_dcmpeq>
 8015426:	2800      	cmp	r0, #0
 8015428:	d100      	bne.n	801542c <_svfprintf_r+0x744>
 801542a:	e0b7      	b.n	801559c <_svfprintf_r+0x8b4>
 801542c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801542e:	07db      	lsls	r3, r3, #31
 8015430:	d400      	bmi.n	8015434 <_svfprintf_r+0x74c>
 8015432:	e0b3      	b.n	801559c <_svfprintf_r+0x8b4>
 8015434:	2030      	movs	r0, #48	; 0x30
 8015436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015438:	932a      	str	r3, [sp, #168]	; 0xa8
 801543a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801543c:	7bdb      	ldrb	r3, [r3, #15]
 801543e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015440:	3a01      	subs	r2, #1
 8015442:	922a      	str	r2, [sp, #168]	; 0xa8
 8015444:	7811      	ldrb	r1, [r2, #0]
 8015446:	4299      	cmp	r1, r3
 8015448:	d100      	bne.n	801544c <_svfprintf_r+0x764>
 801544a:	e097      	b.n	801557c <_svfprintf_r+0x894>
 801544c:	1c4b      	adds	r3, r1, #1
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2939      	cmp	r1, #57	; 0x39
 8015452:	d101      	bne.n	8015458 <_svfprintf_r+0x770>
 8015454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015456:	7a9b      	ldrb	r3, [r3, #10]
 8015458:	7013      	strb	r3, [r2, #0]
 801545a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801545c:	9a08      	ldr	r2, [sp, #32]
 801545e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015460:	1a9b      	subs	r3, r3, r2
 8015462:	930d      	str	r3, [sp, #52]	; 0x34
 8015464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015466:	2b47      	cmp	r3, #71	; 0x47
 8015468:	d000      	beq.n	801546c <_svfprintf_r+0x784>
 801546a:	e0eb      	b.n	8015644 <_svfprintf_r+0x95c>
 801546c:	1ceb      	adds	r3, r5, #3
 801546e:	db03      	blt.n	8015478 <_svfprintf_r+0x790>
 8015470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015472:	42ab      	cmp	r3, r5
 8015474:	db00      	blt.n	8015478 <_svfprintf_r+0x790>
 8015476:	e113      	b.n	80156a0 <_svfprintf_r+0x9b8>
 8015478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801547a:	3b02      	subs	r3, #2
 801547c:	930f      	str	r3, [sp, #60]	; 0x3c
 801547e:	223c      	movs	r2, #60	; 0x3c
 8015480:	466b      	mov	r3, sp
 8015482:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015484:	189b      	adds	r3, r3, r2
 8015486:	1e6c      	subs	r4, r5, #1
 8015488:	3a1c      	subs	r2, #28
 801548a:	2000      	movs	r0, #0
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	9426      	str	r4, [sp, #152]	; 0x98
 8015490:	4391      	bics	r1, r2
 8015492:	2941      	cmp	r1, #65	; 0x41
 8015494:	d102      	bne.n	801549c <_svfprintf_r+0x7b4>
 8015496:	330f      	adds	r3, #15
 8015498:	b2db      	uxtb	r3, r3
 801549a:	3001      	adds	r0, #1
 801549c:	a928      	add	r1, sp, #160	; 0xa0
 801549e:	700b      	strb	r3, [r1, #0]
 80154a0:	232b      	movs	r3, #43	; 0x2b
 80154a2:	2c00      	cmp	r4, #0
 80154a4:	da02      	bge.n	80154ac <_svfprintf_r+0x7c4>
 80154a6:	2401      	movs	r4, #1
 80154a8:	3302      	adds	r3, #2
 80154aa:	1b64      	subs	r4, r4, r5
 80154ac:	704b      	strb	r3, [r1, #1]
 80154ae:	2c09      	cmp	r4, #9
 80154b0:	dc00      	bgt.n	80154b4 <_svfprintf_r+0x7cc>
 80154b2:	e0e1      	b.n	8015678 <_svfprintf_r+0x990>
 80154b4:	2337      	movs	r3, #55	; 0x37
 80154b6:	250a      	movs	r5, #10
 80154b8:	aa1e      	add	r2, sp, #120	; 0x78
 80154ba:	189b      	adds	r3, r3, r2
 80154bc:	9310      	str	r3, [sp, #64]	; 0x40
 80154be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154c0:	0020      	movs	r0, r4
 80154c2:	9309      	str	r3, [sp, #36]	; 0x24
 80154c4:	0029      	movs	r1, r5
 80154c6:	3b01      	subs	r3, #1
 80154c8:	9310      	str	r3, [sp, #64]	; 0x40
 80154ca:	f7ea ffb1 	bl	8000430 <__aeabi_idivmod>
 80154ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154d0:	3130      	adds	r1, #48	; 0x30
 80154d2:	7019      	strb	r1, [r3, #0]
 80154d4:	0020      	movs	r0, r4
 80154d6:	0029      	movs	r1, r5
 80154d8:	9411      	str	r4, [sp, #68]	; 0x44
 80154da:	f7ea fec3 	bl	8000264 <__divsi3>
 80154de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154e0:	0004      	movs	r4, r0
 80154e2:	2b63      	cmp	r3, #99	; 0x63
 80154e4:	dceb      	bgt.n	80154be <_svfprintf_r+0x7d6>
 80154e6:	222a      	movs	r2, #42	; 0x2a
 80154e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ea:	a81e      	add	r0, sp, #120	; 0x78
 80154ec:	1e99      	subs	r1, r3, #2
 80154ee:	1812      	adds	r2, r2, r0
 80154f0:	2037      	movs	r0, #55	; 0x37
 80154f2:	000b      	movs	r3, r1
 80154f4:	3430      	adds	r4, #48	; 0x30
 80154f6:	700c      	strb	r4, [r1, #0]
 80154f8:	ac1e      	add	r4, sp, #120	; 0x78
 80154fa:	1900      	adds	r0, r0, r4
 80154fc:	4283      	cmp	r3, r0
 80154fe:	d200      	bcs.n	8015502 <_svfprintf_r+0x81a>
 8015500:	e0b5      	b.n	801566e <_svfprintf_r+0x986>
 8015502:	2300      	movs	r3, #0
 8015504:	4281      	cmp	r1, r0
 8015506:	d804      	bhi.n	8015512 <_svfprintf_r+0x82a>
 8015508:	aa1e      	add	r2, sp, #120	; 0x78
 801550a:	3339      	adds	r3, #57	; 0x39
 801550c:	189b      	adds	r3, r3, r2
 801550e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015510:	1a9b      	subs	r3, r3, r2
 8015512:	222a      	movs	r2, #42	; 0x2a
 8015514:	a91e      	add	r1, sp, #120	; 0x78
 8015516:	1852      	adds	r2, r2, r1
 8015518:	18d3      	adds	r3, r2, r3
 801551a:	aa28      	add	r2, sp, #160	; 0xa0
 801551c:	1a9b      	subs	r3, r3, r2
 801551e:	931e      	str	r3, [sp, #120]	; 0x78
 8015520:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015524:	4694      	mov	ip, r2
 8015526:	4463      	add	r3, ip
 8015528:	9309      	str	r3, [sp, #36]	; 0x24
 801552a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801552c:	2b01      	cmp	r3, #1
 801552e:	dc01      	bgt.n	8015534 <_svfprintf_r+0x84c>
 8015530:	07f3      	lsls	r3, r6, #31
 8015532:	d504      	bpl.n	801553e <_svfprintf_r+0x856>
 8015534:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015538:	4694      	mov	ip, r2
 801553a:	4463      	add	r3, ip
 801553c:	9309      	str	r3, [sp, #36]	; 0x24
 801553e:	2280      	movs	r2, #128	; 0x80
 8015540:	4b60      	ldr	r3, [pc, #384]	; (80156c4 <_svfprintf_r+0x9dc>)
 8015542:	0052      	lsls	r2, r2, #1
 8015544:	4033      	ands	r3, r6
 8015546:	431a      	orrs	r2, r3
 8015548:	2300      	movs	r3, #0
 801554a:	001d      	movs	r5, r3
 801554c:	9220      	str	r2, [sp, #128]	; 0x80
 801554e:	9310      	str	r3, [sp, #64]	; 0x40
 8015550:	9311      	str	r3, [sp, #68]	; 0x44
 8015552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015554:	2b00      	cmp	r3, #0
 8015556:	d100      	bne.n	801555a <_svfprintf_r+0x872>
 8015558:	e27b      	b.n	8015a52 <_svfprintf_r+0xd6a>
 801555a:	231b      	movs	r3, #27
 801555c:	aa1e      	add	r2, sp, #120	; 0x78
 801555e:	189b      	adds	r3, r3, r2
 8015560:	222d      	movs	r2, #45	; 0x2d
 8015562:	701a      	strb	r2, [r3, #0]
 8015564:	2300      	movs	r3, #0
 8015566:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015568:	9319      	str	r3, [sp, #100]	; 0x64
 801556a:	e52b      	b.n	8014fc4 <_svfprintf_r+0x2dc>
 801556c:	9b08      	ldr	r3, [sp, #32]
 801556e:	930c      	str	r3, [sp, #48]	; 0x30
 8015570:	e6ea      	b.n	8015348 <_svfprintf_r+0x660>
 8015572:	2306      	movs	r3, #6
 8015574:	e6d3      	b.n	801531e <_svfprintf_r+0x636>
 8015576:	930d      	str	r3, [sp, #52]	; 0x34
 8015578:	2300      	movs	r3, #0
 801557a:	e6f4      	b.n	8015366 <_svfprintf_r+0x67e>
 801557c:	7010      	strb	r0, [r2, #0]
 801557e:	e75e      	b.n	801543e <_svfprintf_r+0x756>
 8015580:	7018      	strb	r0, [r3, #0]
 8015582:	3301      	adds	r3, #1
 8015584:	1aca      	subs	r2, r1, r3
 8015586:	d5fb      	bpl.n	8015580 <_svfprintf_r+0x898>
 8015588:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801558a:	2300      	movs	r3, #0
 801558c:	3201      	adds	r2, #1
 801558e:	db01      	blt.n	8015594 <_svfprintf_r+0x8ac>
 8015590:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015592:	3301      	adds	r3, #1
 8015594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015596:	18d3      	adds	r3, r2, r3
 8015598:	9323      	str	r3, [sp, #140]	; 0x8c
 801559a:	e75e      	b.n	801545a <_svfprintf_r+0x772>
 801559c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801559e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80155a0:	2030      	movs	r0, #48	; 0x30
 80155a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155a4:	1851      	adds	r1, r2, r1
 80155a6:	e7ed      	b.n	8015584 <_svfprintf_r+0x89c>
 80155a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155aa:	2b46      	cmp	r3, #70	; 0x46
 80155ac:	d006      	beq.n	80155bc <_svfprintf_r+0x8d4>
 80155ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80155b0:	2b45      	cmp	r3, #69	; 0x45
 80155b2:	d101      	bne.n	80155b8 <_svfprintf_r+0x8d0>
 80155b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b6:	1c5d      	adds	r5, r3, #1
 80155b8:	2302      	movs	r3, #2
 80155ba:	e001      	b.n	80155c0 <_svfprintf_r+0x8d8>
 80155bc:	2303      	movs	r3, #3
 80155be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80155c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80155c2:	9204      	str	r2, [sp, #16]
 80155c4:	aa27      	add	r2, sp, #156	; 0x9c
 80155c6:	9203      	str	r2, [sp, #12]
 80155c8:	aa26      	add	r2, sp, #152	; 0x98
 80155ca:	9202      	str	r2, [sp, #8]
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	0022      	movs	r2, r4
 80155d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155d4:	9501      	str	r5, [sp, #4]
 80155d6:	f000 feb7 	bl	8016348 <_dtoa_r>
 80155da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155dc:	9008      	str	r0, [sp, #32]
 80155de:	2b47      	cmp	r3, #71	; 0x47
 80155e0:	d103      	bne.n	80155ea <_svfprintf_r+0x902>
 80155e2:	07f3      	lsls	r3, r6, #31
 80155e4:	d401      	bmi.n	80155ea <_svfprintf_r+0x902>
 80155e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80155e8:	e738      	b.n	801545c <_svfprintf_r+0x774>
 80155ea:	9b08      	ldr	r3, [sp, #32]
 80155ec:	195b      	adds	r3, r3, r5
 80155ee:	9311      	str	r3, [sp, #68]	; 0x44
 80155f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155f2:	2b46      	cmp	r3, #70	; 0x46
 80155f4:	d113      	bne.n	801561e <_svfprintf_r+0x936>
 80155f6:	9b08      	ldr	r3, [sp, #32]
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b30      	cmp	r3, #48	; 0x30
 80155fc:	d10a      	bne.n	8015614 <_svfprintf_r+0x92c>
 80155fe:	2200      	movs	r2, #0
 8015600:	2300      	movs	r3, #0
 8015602:	0020      	movs	r0, r4
 8015604:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015606:	f7ea ff29 	bl	800045c <__aeabi_dcmpeq>
 801560a:	2800      	cmp	r0, #0
 801560c:	d102      	bne.n	8015614 <_svfprintf_r+0x92c>
 801560e:	2301      	movs	r3, #1
 8015610:	1b5d      	subs	r5, r3, r5
 8015612:	9526      	str	r5, [sp, #152]	; 0x98
 8015614:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015618:	4694      	mov	ip, r2
 801561a:	4463      	add	r3, ip
 801561c:	9311      	str	r3, [sp, #68]	; 0x44
 801561e:	2200      	movs	r2, #0
 8015620:	2300      	movs	r3, #0
 8015622:	0020      	movs	r0, r4
 8015624:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015626:	f7ea ff19 	bl	800045c <__aeabi_dcmpeq>
 801562a:	2800      	cmp	r0, #0
 801562c:	d001      	beq.n	8015632 <_svfprintf_r+0x94a>
 801562e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015630:	932a      	str	r3, [sp, #168]	; 0xa8
 8015632:	2230      	movs	r2, #48	; 0x30
 8015634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015636:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015638:	4299      	cmp	r1, r3
 801563a:	d9d4      	bls.n	80155e6 <_svfprintf_r+0x8fe>
 801563c:	1c59      	adds	r1, r3, #1
 801563e:	912a      	str	r1, [sp, #168]	; 0xa8
 8015640:	701a      	strb	r2, [r3, #0]
 8015642:	e7f7      	b.n	8015634 <_svfprintf_r+0x94c>
 8015644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015646:	2b46      	cmp	r3, #70	; 0x46
 8015648:	d000      	beq.n	801564c <_svfprintf_r+0x964>
 801564a:	e718      	b.n	801547e <_svfprintf_r+0x796>
 801564c:	2201      	movs	r2, #1
 801564e:	0033      	movs	r3, r6
 8015650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015652:	4013      	ands	r3, r2
 8015654:	430b      	orrs	r3, r1
 8015656:	2d00      	cmp	r5, #0
 8015658:	dd1c      	ble.n	8015694 <_svfprintf_r+0x9ac>
 801565a:	2b00      	cmp	r3, #0
 801565c:	d04f      	beq.n	80156fe <_svfprintf_r+0xa16>
 801565e:	000a      	movs	r2, r1
 8015660:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015662:	18eb      	adds	r3, r5, r3
 8015664:	18d3      	adds	r3, r2, r3
 8015666:	9309      	str	r3, [sp, #36]	; 0x24
 8015668:	2366      	movs	r3, #102	; 0x66
 801566a:	930f      	str	r3, [sp, #60]	; 0x3c
 801566c:	e039      	b.n	80156e2 <_svfprintf_r+0x9fa>
 801566e:	781c      	ldrb	r4, [r3, #0]
 8015670:	3301      	adds	r3, #1
 8015672:	7014      	strb	r4, [r2, #0]
 8015674:	3201      	adds	r2, #1
 8015676:	e741      	b.n	80154fc <_svfprintf_r+0x814>
 8015678:	222a      	movs	r2, #42	; 0x2a
 801567a:	ab1e      	add	r3, sp, #120	; 0x78
 801567c:	18d2      	adds	r2, r2, r3
 801567e:	2800      	cmp	r0, #0
 8015680:	d104      	bne.n	801568c <_svfprintf_r+0x9a4>
 8015682:	2330      	movs	r3, #48	; 0x30
 8015684:	222b      	movs	r2, #43	; 0x2b
 8015686:	708b      	strb	r3, [r1, #2]
 8015688:	ab1e      	add	r3, sp, #120	; 0x78
 801568a:	18d2      	adds	r2, r2, r3
 801568c:	3430      	adds	r4, #48	; 0x30
 801568e:	1c53      	adds	r3, r2, #1
 8015690:	7014      	strb	r4, [r2, #0]
 8015692:	e742      	b.n	801551a <_svfprintf_r+0x832>
 8015694:	2b00      	cmp	r3, #0
 8015696:	d034      	beq.n	8015702 <_svfprintf_r+0xa1a>
 8015698:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801569a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801569c:	3301      	adds	r3, #1
 801569e:	e7e1      	b.n	8015664 <_svfprintf_r+0x97c>
 80156a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156a2:	429d      	cmp	r5, r3
 80156a4:	db10      	blt.n	80156c8 <_svfprintf_r+0x9e0>
 80156a6:	07f3      	lsls	r3, r6, #31
 80156a8:	d52f      	bpl.n	801570a <_svfprintf_r+0xa22>
 80156aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156ac:	18eb      	adds	r3, r5, r3
 80156ae:	9309      	str	r3, [sp, #36]	; 0x24
 80156b0:	2367      	movs	r3, #103	; 0x67
 80156b2:	e7da      	b.n	801566a <_svfprintf_r+0x982>
 80156b4:	0801ccc8 	.word	0x0801ccc8
 80156b8:	0801ccd9 	.word	0x0801ccd9
 80156bc:	40300000 	.word	0x40300000
 80156c0:	3fe00000 	.word	0x3fe00000
 80156c4:	fffffbff 	.word	0xfffffbff
 80156c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80156ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156cc:	4694      	mov	ip, r2
 80156ce:	4463      	add	r3, ip
 80156d0:	9309      	str	r3, [sp, #36]	; 0x24
 80156d2:	2367      	movs	r3, #103	; 0x67
 80156d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80156d6:	2d00      	cmp	r5, #0
 80156d8:	dc03      	bgt.n	80156e2 <_svfprintf_r+0x9fa>
 80156da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156dc:	1b58      	subs	r0, r3, r5
 80156de:	1c43      	adds	r3, r0, #1
 80156e0:	9309      	str	r3, [sp, #36]	; 0x24
 80156e2:	2380      	movs	r3, #128	; 0x80
 80156e4:	0032      	movs	r2, r6
 80156e6:	00db      	lsls	r3, r3, #3
 80156e8:	401a      	ands	r2, r3
 80156ea:	9211      	str	r2, [sp, #68]	; 0x44
 80156ec:	2200      	movs	r2, #0
 80156ee:	9210      	str	r2, [sp, #64]	; 0x40
 80156f0:	421e      	tst	r6, r3
 80156f2:	d100      	bne.n	80156f6 <_svfprintf_r+0xa0e>
 80156f4:	e72d      	b.n	8015552 <_svfprintf_r+0x86a>
 80156f6:	4295      	cmp	r5, r2
 80156f8:	dc27      	bgt.n	801574a <_svfprintf_r+0xa62>
 80156fa:	9211      	str	r2, [sp, #68]	; 0x44
 80156fc:	e729      	b.n	8015552 <_svfprintf_r+0x86a>
 80156fe:	9509      	str	r5, [sp, #36]	; 0x24
 8015700:	e7b2      	b.n	8015668 <_svfprintf_r+0x980>
 8015702:	2366      	movs	r3, #102	; 0x66
 8015704:	9209      	str	r2, [sp, #36]	; 0x24
 8015706:	930f      	str	r3, [sp, #60]	; 0x3c
 8015708:	e7eb      	b.n	80156e2 <_svfprintf_r+0x9fa>
 801570a:	9509      	str	r5, [sp, #36]	; 0x24
 801570c:	e7d0      	b.n	80156b0 <_svfprintf_r+0x9c8>
 801570e:	42ab      	cmp	r3, r5
 8015710:	da0e      	bge.n	8015730 <_svfprintf_r+0xa48>
 8015712:	1aed      	subs	r5, r5, r3
 8015714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015716:	785b      	ldrb	r3, [r3, #1]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d012      	beq.n	8015742 <_svfprintf_r+0xa5a>
 801571c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801571e:	3301      	adds	r3, #1
 8015720:	9311      	str	r3, [sp, #68]	; 0x44
 8015722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015724:	3301      	adds	r3, #1
 8015726:	9312      	str	r3, [sp, #72]	; 0x48
 8015728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2bff      	cmp	r3, #255	; 0xff
 801572e:	d1ee      	bne.n	801570e <_svfprintf_r+0xa26>
 8015730:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015734:	189b      	adds	r3, r3, r2
 8015736:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015738:	4353      	muls	r3, r2
 801573a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801573c:	189b      	adds	r3, r3, r2
 801573e:	9309      	str	r3, [sp, #36]	; 0x24
 8015740:	e707      	b.n	8015552 <_svfprintf_r+0x86a>
 8015742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015744:	3301      	adds	r3, #1
 8015746:	9310      	str	r3, [sp, #64]	; 0x40
 8015748:	e7ee      	b.n	8015728 <_svfprintf_r+0xa40>
 801574a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801574c:	9311      	str	r3, [sp, #68]	; 0x44
 801574e:	e7eb      	b.n	8015728 <_svfprintf_r+0xa40>
 8015750:	0022      	movs	r2, r4
 8015752:	ca08      	ldmia	r2!, {r3}
 8015754:	920e      	str	r2, [sp, #56]	; 0x38
 8015756:	06b2      	lsls	r2, r6, #26
 8015758:	d508      	bpl.n	801576c <_svfprintf_r+0xa84>
 801575a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801575c:	601a      	str	r2, [r3, #0]
 801575e:	17d2      	asrs	r2, r2, #31
 8015760:	605a      	str	r2, [r3, #4]
 8015762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015764:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015766:	9308      	str	r3, [sp, #32]
 8015768:	f7ff fafa 	bl	8014d60 <_svfprintf_r+0x78>
 801576c:	06f2      	lsls	r2, r6, #27
 801576e:	d502      	bpl.n	8015776 <_svfprintf_r+0xa8e>
 8015770:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015772:	601a      	str	r2, [r3, #0]
 8015774:	e7f5      	b.n	8015762 <_svfprintf_r+0xa7a>
 8015776:	0672      	lsls	r2, r6, #25
 8015778:	d502      	bpl.n	8015780 <_svfprintf_r+0xa98>
 801577a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801577c:	801a      	strh	r2, [r3, #0]
 801577e:	e7f0      	b.n	8015762 <_svfprintf_r+0xa7a>
 8015780:	05b2      	lsls	r2, r6, #22
 8015782:	d5f5      	bpl.n	8015770 <_svfprintf_r+0xa88>
 8015784:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015786:	701a      	strb	r2, [r3, #0]
 8015788:	e7eb      	b.n	8015762 <_svfprintf_r+0xa7a>
 801578a:	2310      	movs	r3, #16
 801578c:	431e      	orrs	r6, r3
 801578e:	2320      	movs	r3, #32
 8015790:	0031      	movs	r1, r6
 8015792:	4019      	ands	r1, r3
 8015794:	421e      	tst	r6, r3
 8015796:	d00f      	beq.n	80157b8 <_svfprintf_r+0xad0>
 8015798:	3b19      	subs	r3, #25
 801579a:	3407      	adds	r4, #7
 801579c:	439c      	bics	r4, r3
 801579e:	0022      	movs	r2, r4
 80157a0:	ca18      	ldmia	r2!, {r3, r4}
 80157a2:	9306      	str	r3, [sp, #24]
 80157a4:	9407      	str	r4, [sp, #28]
 80157a6:	920e      	str	r2, [sp, #56]	; 0x38
 80157a8:	4bca      	ldr	r3, [pc, #808]	; (8015ad4 <_svfprintf_r+0xdec>)
 80157aa:	401e      	ands	r6, r3
 80157ac:	2300      	movs	r3, #0
 80157ae:	221b      	movs	r2, #27
 80157b0:	a91e      	add	r1, sp, #120	; 0x78
 80157b2:	1852      	adds	r2, r2, r1
 80157b4:	2100      	movs	r1, #0
 80157b6:	e4fc      	b.n	80151b2 <_svfprintf_r+0x4ca>
 80157b8:	1d23      	adds	r3, r4, #4
 80157ba:	0032      	movs	r2, r6
 80157bc:	930e      	str	r3, [sp, #56]	; 0x38
 80157be:	2310      	movs	r3, #16
 80157c0:	401a      	ands	r2, r3
 80157c2:	421e      	tst	r6, r3
 80157c4:	d003      	beq.n	80157ce <_svfprintf_r+0xae6>
 80157c6:	6823      	ldr	r3, [r4, #0]
 80157c8:	9306      	str	r3, [sp, #24]
 80157ca:	9107      	str	r1, [sp, #28]
 80157cc:	e7ec      	b.n	80157a8 <_svfprintf_r+0xac0>
 80157ce:	2340      	movs	r3, #64	; 0x40
 80157d0:	0031      	movs	r1, r6
 80157d2:	4019      	ands	r1, r3
 80157d4:	421e      	tst	r6, r3
 80157d6:	d004      	beq.n	80157e2 <_svfprintf_r+0xafa>
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	9306      	str	r3, [sp, #24]
 80157de:	9207      	str	r2, [sp, #28]
 80157e0:	e7e2      	b.n	80157a8 <_svfprintf_r+0xac0>
 80157e2:	2380      	movs	r3, #128	; 0x80
 80157e4:	0032      	movs	r2, r6
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	401a      	ands	r2, r3
 80157ea:	421e      	tst	r6, r3
 80157ec:	d002      	beq.n	80157f4 <_svfprintf_r+0xb0c>
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	e7e9      	b.n	80157c8 <_svfprintf_r+0xae0>
 80157f4:	6823      	ldr	r3, [r4, #0]
 80157f6:	e7f1      	b.n	80157dc <_svfprintf_r+0xaf4>
 80157f8:	0023      	movs	r3, r4
 80157fa:	cb04      	ldmia	r3!, {r2}
 80157fc:	49b6      	ldr	r1, [pc, #728]	; (8015ad8 <_svfprintf_r+0xdf0>)
 80157fe:	9206      	str	r2, [sp, #24]
 8015800:	aa25      	add	r2, sp, #148	; 0x94
 8015802:	8011      	strh	r1, [r2, #0]
 8015804:	4ab5      	ldr	r2, [pc, #724]	; (8015adc <_svfprintf_r+0xdf4>)
 8015806:	930e      	str	r3, [sp, #56]	; 0x38
 8015808:	2300      	movs	r3, #0
 801580a:	921f      	str	r2, [sp, #124]	; 0x7c
 801580c:	2278      	movs	r2, #120	; 0x78
 801580e:	9307      	str	r3, [sp, #28]
 8015810:	3302      	adds	r3, #2
 8015812:	431e      	orrs	r6, r3
 8015814:	920f      	str	r2, [sp, #60]	; 0x3c
 8015816:	e7ca      	b.n	80157ae <_svfprintf_r+0xac6>
 8015818:	0023      	movs	r3, r4
 801581a:	cb04      	ldmia	r3!, {r2}
 801581c:	2400      	movs	r4, #0
 801581e:	930e      	str	r3, [sp, #56]	; 0x38
 8015820:	231b      	movs	r3, #27
 8015822:	9208      	str	r2, [sp, #32]
 8015824:	aa1e      	add	r2, sp, #120	; 0x78
 8015826:	189b      	adds	r3, r3, r2
 8015828:	701c      	strb	r4, [r3, #0]
 801582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801582c:	3301      	adds	r3, #1
 801582e:	d00e      	beq.n	801584e <_svfprintf_r+0xb66>
 8015830:	0021      	movs	r1, r4
 8015832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015834:	9808      	ldr	r0, [sp, #32]
 8015836:	f002 f821 	bl	801787c <memchr>
 801583a:	900c      	str	r0, [sp, #48]	; 0x30
 801583c:	42a0      	cmp	r0, r4
 801583e:	d100      	bne.n	8015842 <_svfprintf_r+0xb5a>
 8015840:	e10a      	b.n	8015a58 <_svfprintf_r+0xd70>
 8015842:	9a08      	ldr	r2, [sp, #32]
 8015844:	1a83      	subs	r3, r0, r2
 8015846:	9309      	str	r3, [sp, #36]	; 0x24
 8015848:	0023      	movs	r3, r4
 801584a:	940c      	str	r4, [sp, #48]	; 0x30
 801584c:	e516      	b.n	801527c <_svfprintf_r+0x594>
 801584e:	9808      	ldr	r0, [sp, #32]
 8015850:	f7ea fc62 	bl	8000118 <strlen>
 8015854:	9009      	str	r0, [sp, #36]	; 0x24
 8015856:	e7f7      	b.n	8015848 <_svfprintf_r+0xb60>
 8015858:	2310      	movs	r3, #16
 801585a:	431e      	orrs	r6, r3
 801585c:	2320      	movs	r3, #32
 801585e:	0031      	movs	r1, r6
 8015860:	4019      	ands	r1, r3
 8015862:	421e      	tst	r6, r3
 8015864:	d009      	beq.n	801587a <_svfprintf_r+0xb92>
 8015866:	3b19      	subs	r3, #25
 8015868:	3407      	adds	r4, #7
 801586a:	439c      	bics	r4, r3
 801586c:	0022      	movs	r2, r4
 801586e:	ca18      	ldmia	r2!, {r3, r4}
 8015870:	9306      	str	r3, [sp, #24]
 8015872:	9407      	str	r4, [sp, #28]
 8015874:	920e      	str	r2, [sp, #56]	; 0x38
 8015876:	2301      	movs	r3, #1
 8015878:	e799      	b.n	80157ae <_svfprintf_r+0xac6>
 801587a:	1d23      	adds	r3, r4, #4
 801587c:	0032      	movs	r2, r6
 801587e:	930e      	str	r3, [sp, #56]	; 0x38
 8015880:	2310      	movs	r3, #16
 8015882:	401a      	ands	r2, r3
 8015884:	421e      	tst	r6, r3
 8015886:	d003      	beq.n	8015890 <_svfprintf_r+0xba8>
 8015888:	6823      	ldr	r3, [r4, #0]
 801588a:	9306      	str	r3, [sp, #24]
 801588c:	9107      	str	r1, [sp, #28]
 801588e:	e7f2      	b.n	8015876 <_svfprintf_r+0xb8e>
 8015890:	2340      	movs	r3, #64	; 0x40
 8015892:	0031      	movs	r1, r6
 8015894:	4019      	ands	r1, r3
 8015896:	421e      	tst	r6, r3
 8015898:	d004      	beq.n	80158a4 <_svfprintf_r+0xbbc>
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	b29b      	uxth	r3, r3
 801589e:	9306      	str	r3, [sp, #24]
 80158a0:	9207      	str	r2, [sp, #28]
 80158a2:	e7e8      	b.n	8015876 <_svfprintf_r+0xb8e>
 80158a4:	2380      	movs	r3, #128	; 0x80
 80158a6:	0032      	movs	r2, r6
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	401a      	ands	r2, r3
 80158ac:	421e      	tst	r6, r3
 80158ae:	d002      	beq.n	80158b6 <_svfprintf_r+0xbce>
 80158b0:	6823      	ldr	r3, [r4, #0]
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	e7e9      	b.n	801588a <_svfprintf_r+0xba2>
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	e7f1      	b.n	801589e <_svfprintf_r+0xbb6>
 80158ba:	4b89      	ldr	r3, [pc, #548]	; (8015ae0 <_svfprintf_r+0xdf8>)
 80158bc:	0031      	movs	r1, r6
 80158be:	931f      	str	r3, [sp, #124]	; 0x7c
 80158c0:	2320      	movs	r3, #32
 80158c2:	4019      	ands	r1, r3
 80158c4:	421e      	tst	r6, r3
 80158c6:	d01a      	beq.n	80158fe <_svfprintf_r+0xc16>
 80158c8:	3b19      	subs	r3, #25
 80158ca:	3407      	adds	r4, #7
 80158cc:	439c      	bics	r4, r3
 80158ce:	0022      	movs	r2, r4
 80158d0:	ca18      	ldmia	r2!, {r3, r4}
 80158d2:	9306      	str	r3, [sp, #24]
 80158d4:	9407      	str	r4, [sp, #28]
 80158d6:	920e      	str	r2, [sp, #56]	; 0x38
 80158d8:	07f3      	lsls	r3, r6, #31
 80158da:	d50a      	bpl.n	80158f2 <_svfprintf_r+0xc0a>
 80158dc:	9b06      	ldr	r3, [sp, #24]
 80158de:	9a07      	ldr	r2, [sp, #28]
 80158e0:	4313      	orrs	r3, r2
 80158e2:	d006      	beq.n	80158f2 <_svfprintf_r+0xc0a>
 80158e4:	2230      	movs	r2, #48	; 0x30
 80158e6:	ab25      	add	r3, sp, #148	; 0x94
 80158e8:	701a      	strb	r2, [r3, #0]
 80158ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80158ec:	705a      	strb	r2, [r3, #1]
 80158ee:	2302      	movs	r3, #2
 80158f0:	431e      	orrs	r6, r3
 80158f2:	4b78      	ldr	r3, [pc, #480]	; (8015ad4 <_svfprintf_r+0xdec>)
 80158f4:	401e      	ands	r6, r3
 80158f6:	2302      	movs	r3, #2
 80158f8:	e759      	b.n	80157ae <_svfprintf_r+0xac6>
 80158fa:	4b78      	ldr	r3, [pc, #480]	; (8015adc <_svfprintf_r+0xdf4>)
 80158fc:	e7de      	b.n	80158bc <_svfprintf_r+0xbd4>
 80158fe:	1d23      	adds	r3, r4, #4
 8015900:	0032      	movs	r2, r6
 8015902:	930e      	str	r3, [sp, #56]	; 0x38
 8015904:	2310      	movs	r3, #16
 8015906:	401a      	ands	r2, r3
 8015908:	421e      	tst	r6, r3
 801590a:	d003      	beq.n	8015914 <_svfprintf_r+0xc2c>
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	9306      	str	r3, [sp, #24]
 8015910:	9107      	str	r1, [sp, #28]
 8015912:	e7e1      	b.n	80158d8 <_svfprintf_r+0xbf0>
 8015914:	2340      	movs	r3, #64	; 0x40
 8015916:	0031      	movs	r1, r6
 8015918:	4019      	ands	r1, r3
 801591a:	421e      	tst	r6, r3
 801591c:	d004      	beq.n	8015928 <_svfprintf_r+0xc40>
 801591e:	6823      	ldr	r3, [r4, #0]
 8015920:	b29b      	uxth	r3, r3
 8015922:	9306      	str	r3, [sp, #24]
 8015924:	9207      	str	r2, [sp, #28]
 8015926:	e7d7      	b.n	80158d8 <_svfprintf_r+0xbf0>
 8015928:	2380      	movs	r3, #128	; 0x80
 801592a:	0032      	movs	r2, r6
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	401a      	ands	r2, r3
 8015930:	421e      	tst	r6, r3
 8015932:	d002      	beq.n	801593a <_svfprintf_r+0xc52>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	b2db      	uxtb	r3, r3
 8015938:	e7e9      	b.n	801590e <_svfprintf_r+0xc26>
 801593a:	6823      	ldr	r3, [r4, #0]
 801593c:	e7f1      	b.n	8015922 <_svfprintf_r+0xc3a>
 801593e:	9b07      	ldr	r3, [sp, #28]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d10b      	bne.n	801595c <_svfprintf_r+0xc74>
 8015944:	9b06      	ldr	r3, [sp, #24]
 8015946:	2b09      	cmp	r3, #9
 8015948:	d808      	bhi.n	801595c <_svfprintf_r+0xc74>
 801594a:	20e7      	movs	r0, #231	; 0xe7
 801594c:	ab1e      	add	r3, sp, #120	; 0x78
 801594e:	18c0      	adds	r0, r0, r3
 8015950:	9b06      	ldr	r3, [sp, #24]
 8015952:	3330      	adds	r3, #48	; 0x30
 8015954:	7003      	strb	r3, [r0, #0]
 8015956:	9008      	str	r0, [sp, #32]
 8015958:	f000 fc38 	bl	80161cc <_svfprintf_r+0x14e4>
 801595c:	2480      	movs	r4, #128	; 0x80
 801595e:	2300      	movs	r3, #0
 8015960:	00e4      	lsls	r4, r4, #3
 8015962:	930d      	str	r3, [sp, #52]	; 0x34
 8015964:	a858      	add	r0, sp, #352	; 0x160
 8015966:	402c      	ands	r4, r5
 8015968:	1e43      	subs	r3, r0, #1
 801596a:	9308      	str	r3, [sp, #32]
 801596c:	220a      	movs	r2, #10
 801596e:	9806      	ldr	r0, [sp, #24]
 8015970:	9907      	ldr	r1, [sp, #28]
 8015972:	2300      	movs	r3, #0
 8015974:	f7ea fdda 	bl	800052c <__aeabi_uldivmod>
 8015978:	9b08      	ldr	r3, [sp, #32]
 801597a:	3230      	adds	r2, #48	; 0x30
 801597c:	701a      	strb	r2, [r3, #0]
 801597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015980:	3301      	adds	r3, #1
 8015982:	930d      	str	r3, [sp, #52]	; 0x34
 8015984:	2c00      	cmp	r4, #0
 8015986:	d01d      	beq.n	80159c4 <_svfprintf_r+0xcdc>
 8015988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801598a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	429a      	cmp	r2, r3
 8015990:	d118      	bne.n	80159c4 <_svfprintf_r+0xcdc>
 8015992:	2aff      	cmp	r2, #255	; 0xff
 8015994:	d016      	beq.n	80159c4 <_svfprintf_r+0xcdc>
 8015996:	9b07      	ldr	r3, [sp, #28]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d102      	bne.n	80159a2 <_svfprintf_r+0xcba>
 801599c:	9b06      	ldr	r3, [sp, #24]
 801599e:	2b09      	cmp	r3, #9
 80159a0:	d910      	bls.n	80159c4 <_svfprintf_r+0xcdc>
 80159a2:	9b08      	ldr	r3, [sp, #32]
 80159a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80159a6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80159a8:	1a9b      	subs	r3, r3, r2
 80159aa:	0018      	movs	r0, r3
 80159ac:	9308      	str	r3, [sp, #32]
 80159ae:	f7fe fa69 	bl	8013e84 <strncpy>
 80159b2:	2200      	movs	r2, #0
 80159b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159b6:	920d      	str	r2, [sp, #52]	; 0x34
 80159b8:	785b      	ldrb	r3, [r3, #1]
 80159ba:	1e5a      	subs	r2, r3, #1
 80159bc:	4193      	sbcs	r3, r2
 80159be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80159c0:	18d3      	adds	r3, r2, r3
 80159c2:	9312      	str	r3, [sp, #72]	; 0x48
 80159c4:	2300      	movs	r3, #0
 80159c6:	9806      	ldr	r0, [sp, #24]
 80159c8:	9907      	ldr	r1, [sp, #28]
 80159ca:	220a      	movs	r2, #10
 80159cc:	f7ea fdae 	bl	800052c <__aeabi_uldivmod>
 80159d0:	9b07      	ldr	r3, [sp, #28]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d104      	bne.n	80159e0 <_svfprintf_r+0xcf8>
 80159d6:	9b06      	ldr	r3, [sp, #24]
 80159d8:	2b09      	cmp	r3, #9
 80159da:	d801      	bhi.n	80159e0 <_svfprintf_r+0xcf8>
 80159dc:	f000 fbf6 	bl	80161cc <_svfprintf_r+0x14e4>
 80159e0:	9006      	str	r0, [sp, #24]
 80159e2:	9107      	str	r1, [sp, #28]
 80159e4:	9808      	ldr	r0, [sp, #32]
 80159e6:	e7bf      	b.n	8015968 <_svfprintf_r+0xc80>
 80159e8:	200f      	movs	r0, #15
 80159ea:	ab58      	add	r3, sp, #352	; 0x160
 80159ec:	9308      	str	r3, [sp, #32]
 80159ee:	9b08      	ldr	r3, [sp, #32]
 80159f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80159f2:	3b01      	subs	r3, #1
 80159f4:	9308      	str	r3, [sp, #32]
 80159f6:	9b06      	ldr	r3, [sp, #24]
 80159f8:	4003      	ands	r3, r0
 80159fa:	5cd3      	ldrb	r3, [r2, r3]
 80159fc:	9a08      	ldr	r2, [sp, #32]
 80159fe:	7013      	strb	r3, [r2, #0]
 8015a00:	9b07      	ldr	r3, [sp, #28]
 8015a02:	0719      	lsls	r1, r3, #28
 8015a04:	9b06      	ldr	r3, [sp, #24]
 8015a06:	091a      	lsrs	r2, r3, #4
 8015a08:	9b07      	ldr	r3, [sp, #28]
 8015a0a:	4311      	orrs	r1, r2
 8015a0c:	091b      	lsrs	r3, r3, #4
 8015a0e:	9307      	str	r3, [sp, #28]
 8015a10:	000b      	movs	r3, r1
 8015a12:	9a07      	ldr	r2, [sp, #28]
 8015a14:	9106      	str	r1, [sp, #24]
 8015a16:	4313      	orrs	r3, r2
 8015a18:	d1e9      	bne.n	80159ee <_svfprintf_r+0xd06>
 8015a1a:	e3d7      	b.n	80161cc <_svfprintf_r+0x14e4>
 8015a1c:	aa58      	add	r2, sp, #352	; 0x160
 8015a1e:	9208      	str	r2, [sp, #32]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d000      	beq.n	8015a26 <_svfprintf_r+0xd3e>
 8015a24:	e3d2      	b.n	80161cc <_svfprintf_r+0x14e4>
 8015a26:	07f3      	lsls	r3, r6, #31
 8015a28:	d400      	bmi.n	8015a2c <_svfprintf_r+0xd44>
 8015a2a:	e3cf      	b.n	80161cc <_svfprintf_r+0x14e4>
 8015a2c:	20e7      	movs	r0, #231	; 0xe7
 8015a2e:	ab1e      	add	r3, sp, #120	; 0x78
 8015a30:	18c0      	adds	r0, r0, r3
 8015a32:	2330      	movs	r3, #48	; 0x30
 8015a34:	e78e      	b.n	8015954 <_svfprintf_r+0xc6c>
 8015a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d100      	bne.n	8015a3e <_svfprintf_r+0xd56>
 8015a3c:	e38a      	b.n	8016154 <_svfprintf_r+0x146c>
 8015a3e:	221b      	movs	r2, #27
 8015a40:	a83f      	add	r0, sp, #252	; 0xfc
 8015a42:	7003      	strb	r3, [r0, #0]
 8015a44:	2300      	movs	r3, #0
 8015a46:	a91e      	add	r1, sp, #120	; 0x78
 8015a48:	1852      	adds	r2, r2, r1
 8015a4a:	7013      	strb	r3, [r2, #0]
 8015a4c:	940e      	str	r4, [sp, #56]	; 0x38
 8015a4e:	f7ff fab0 	bl	8014fb2 <_svfprintf_r+0x2ca>
 8015a52:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a56:	e587      	b.n	8015568 <_svfprintf_r+0x880>
 8015a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a5a:	e40f      	b.n	801527c <_svfprintf_r+0x594>
 8015a5c:	2010      	movs	r0, #16
 8015a5e:	1812      	adds	r2, r2, r0
 8015a60:	6078      	str	r0, [r7, #4]
 8015a62:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a64:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a66:	2b07      	cmp	r3, #7
 8015a68:	dd08      	ble.n	8015a7c <_svfprintf_r+0xd94>
 8015a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a6e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a70:	f002 fbd4 	bl	801821c <__ssprint_r>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d000      	beq.n	8015a7a <_svfprintf_r+0xd92>
 8015a78:	e34b      	b.n	8016112 <_svfprintf_r+0x142a>
 8015a7a:	a92f      	add	r1, sp, #188	; 0xbc
 8015a7c:	000f      	movs	r7, r1
 8015a7e:	3c10      	subs	r4, #16
 8015a80:	f7ff fac3 	bl	801500a <_svfprintf_r+0x322>
 8015a84:	2010      	movs	r0, #16
 8015a86:	1812      	adds	r2, r2, r0
 8015a88:	6078      	str	r0, [r7, #4]
 8015a8a:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a8c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a8e:	2b07      	cmp	r3, #7
 8015a90:	dd08      	ble.n	8015aa4 <_svfprintf_r+0xdbc>
 8015a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a96:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a98:	f002 fbc0 	bl	801821c <__ssprint_r>
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	d000      	beq.n	8015aa2 <_svfprintf_r+0xdba>
 8015aa0:	e337      	b.n	8016112 <_svfprintf_r+0x142a>
 8015aa2:	a92f      	add	r1, sp, #188	; 0xbc
 8015aa4:	000f      	movs	r7, r1
 8015aa6:	3c10      	subs	r4, #16
 8015aa8:	f7ff fb0f 	bl	80150ca <_svfprintf_r+0x3e2>
 8015aac:	2010      	movs	r0, #16
 8015aae:	1812      	adds	r2, r2, r0
 8015ab0:	6078      	str	r0, [r7, #4]
 8015ab2:	922e      	str	r2, [sp, #184]	; 0xb8
 8015ab4:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ab6:	2b07      	cmp	r3, #7
 8015ab8:	dd08      	ble.n	8015acc <_svfprintf_r+0xde4>
 8015aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015abc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015abe:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ac0:	f002 fbac 	bl	801821c <__ssprint_r>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d000      	beq.n	8015aca <_svfprintf_r+0xde2>
 8015ac8:	e323      	b.n	8016112 <_svfprintf_r+0x142a>
 8015aca:	a92f      	add	r1, sp, #188	; 0xbc
 8015acc:	000f      	movs	r7, r1
 8015ace:	3c10      	subs	r4, #16
 8015ad0:	f7ff fb1d 	bl	801510e <_svfprintf_r+0x426>
 8015ad4:	fffffbff 	.word	0xfffffbff
 8015ad8:	00007830 	.word	0x00007830
 8015adc:	0801ccc8 	.word	0x0801ccc8
 8015ae0:	0801ccd9 	.word	0x0801ccd9
 8015ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ae6:	2b65      	cmp	r3, #101	; 0x65
 8015ae8:	dc00      	bgt.n	8015aec <_svfprintf_r+0xe04>
 8015aea:	e258      	b.n	8015f9e <_svfprintf_r+0x12b6>
 8015aec:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015aee:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015af0:	2200      	movs	r2, #0
 8015af2:	2300      	movs	r3, #0
 8015af4:	f7ea fcb2 	bl	800045c <__aeabi_dcmpeq>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d07c      	beq.n	8015bf6 <_svfprintf_r+0xf0e>
 8015afc:	4b80      	ldr	r3, [pc, #512]	; (8015d00 <_svfprintf_r+0x1018>)
 8015afe:	603b      	str	r3, [r7, #0]
 8015b00:	2301      	movs	r3, #1
 8015b02:	607b      	str	r3, [r7, #4]
 8015b04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b06:	3708      	adds	r7, #8
 8015b08:	3301      	adds	r3, #1
 8015b0a:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b0e:	9308      	str	r3, [sp, #32]
 8015b10:	3301      	adds	r3, #1
 8015b12:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b14:	2b07      	cmp	r3, #7
 8015b16:	dd08      	ble.n	8015b2a <_svfprintf_r+0xe42>
 8015b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b1e:	f002 fb7d 	bl	801821c <__ssprint_r>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d000      	beq.n	8015b28 <_svfprintf_r+0xe40>
 8015b26:	e2f4      	b.n	8016112 <_svfprintf_r+0x142a>
 8015b28:	af2f      	add	r7, sp, #188	; 0xbc
 8015b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	db01      	blt.n	8015b36 <_svfprintf_r+0xe4e>
 8015b32:	07f3      	lsls	r3, r6, #31
 8015b34:	d51d      	bpl.n	8015b72 <_svfprintf_r+0xe8a>
 8015b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b3a:	4694      	mov	ip, r2
 8015b3c:	603b      	str	r3, [r7, #0]
 8015b3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015b40:	607b      	str	r3, [r7, #4]
 8015b42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b44:	3708      	adds	r7, #8
 8015b46:	4463      	add	r3, ip
 8015b48:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b4c:	9308      	str	r3, [sp, #32]
 8015b4e:	3301      	adds	r3, #1
 8015b50:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b52:	2b07      	cmp	r3, #7
 8015b54:	dd08      	ble.n	8015b68 <_svfprintf_r+0xe80>
 8015b56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b5c:	f002 fb5e 	bl	801821c <__ssprint_r>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d000      	beq.n	8015b66 <_svfprintf_r+0xe7e>
 8015b64:	e2d5      	b.n	8016112 <_svfprintf_r+0x142a>
 8015b66:	af2f      	add	r7, sp, #188	; 0xbc
 8015b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b6a:	2510      	movs	r5, #16
 8015b6c:	1e5c      	subs	r4, r3, #1
 8015b6e:	2c00      	cmp	r4, #0
 8015b70:	dc2f      	bgt.n	8015bd2 <_svfprintf_r+0xeea>
 8015b72:	0773      	lsls	r3, r6, #29
 8015b74:	d500      	bpl.n	8015b78 <_svfprintf_r+0xe90>
 8015b76:	e2ae      	b.n	80160d6 <_svfprintf_r+0x13ee>
 8015b78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	da00      	bge.n	8015b82 <_svfprintf_r+0xe9a>
 8015b80:	0013      	movs	r3, r2
 8015b82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015b84:	18d3      	adds	r3, r2, r3
 8015b86:	9317      	str	r3, [sp, #92]	; 0x5c
 8015b88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b8a:	9308      	str	r3, [sp, #32]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d007      	beq.n	8015ba0 <_svfprintf_r+0xeb8>
 8015b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b94:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b96:	f002 fb41 	bl	801821c <__ssprint_r>
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d000      	beq.n	8015ba0 <_svfprintf_r+0xeb8>
 8015b9e:	e2b8      	b.n	8016112 <_svfprintf_r+0x142a>
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d000      	beq.n	8015bac <_svfprintf_r+0xec4>
 8015baa:	e2ce      	b.n	801614a <_svfprintf_r+0x1462>
 8015bac:	af2f      	add	r7, sp, #188	; 0xbc
 8015bae:	e5d8      	b.n	8015762 <_svfprintf_r+0xa7a>
 8015bb0:	3210      	adds	r2, #16
 8015bb2:	607d      	str	r5, [r7, #4]
 8015bb4:	922e      	str	r2, [sp, #184]	; 0xb8
 8015bb6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bb8:	2b07      	cmp	r3, #7
 8015bba:	dd08      	ble.n	8015bce <_svfprintf_r+0xee6>
 8015bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015bc2:	f002 fb2b 	bl	801821c <__ssprint_r>
 8015bc6:	2800      	cmp	r0, #0
 8015bc8:	d000      	beq.n	8015bcc <_svfprintf_r+0xee4>
 8015bca:	e2a2      	b.n	8016112 <_svfprintf_r+0x142a>
 8015bcc:	a92f      	add	r1, sp, #188	; 0xbc
 8015bce:	000f      	movs	r7, r1
 8015bd0:	3c10      	subs	r4, #16
 8015bd2:	0039      	movs	r1, r7
 8015bd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015bd6:	484b      	ldr	r0, [pc, #300]	; (8015d04 <_svfprintf_r+0x101c>)
 8015bd8:	9308      	str	r3, [sp, #32]
 8015bda:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015bdc:	3301      	adds	r3, #1
 8015bde:	3108      	adds	r1, #8
 8015be0:	6038      	str	r0, [r7, #0]
 8015be2:	2c10      	cmp	r4, #16
 8015be4:	dce4      	bgt.n	8015bb0 <_svfprintf_r+0xec8>
 8015be6:	607c      	str	r4, [r7, #4]
 8015be8:	18a4      	adds	r4, r4, r2
 8015bea:	000f      	movs	r7, r1
 8015bec:	942e      	str	r4, [sp, #184]	; 0xb8
 8015bee:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bf0:	2b07      	cmp	r3, #7
 8015bf2:	ddbe      	ble.n	8015b72 <_svfprintf_r+0xe8a>
 8015bf4:	e067      	b.n	8015cc6 <_svfprintf_r+0xfde>
 8015bf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	dd00      	ble.n	8015bfe <_svfprintf_r+0xf16>
 8015bfc:	e084      	b.n	8015d08 <_svfprintf_r+0x1020>
 8015bfe:	4b40      	ldr	r3, [pc, #256]	; (8015d00 <_svfprintf_r+0x1018>)
 8015c00:	603b      	str	r3, [r7, #0]
 8015c02:	2301      	movs	r3, #1
 8015c04:	607b      	str	r3, [r7, #4]
 8015c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c08:	3708      	adds	r7, #8
 8015c0a:	3301      	adds	r3, #1
 8015c0c:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c10:	9309      	str	r3, [sp, #36]	; 0x24
 8015c12:	3301      	adds	r3, #1
 8015c14:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c16:	2b07      	cmp	r3, #7
 8015c18:	dd08      	ble.n	8015c2c <_svfprintf_r+0xf44>
 8015c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c1e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c20:	f002 fafc 	bl	801821c <__ssprint_r>
 8015c24:	2800      	cmp	r0, #0
 8015c26:	d000      	beq.n	8015c2a <_svfprintf_r+0xf42>
 8015c28:	e273      	b.n	8016112 <_svfprintf_r+0x142a>
 8015c2a:	af2f      	add	r7, sp, #188	; 0xbc
 8015c2c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015c32:	430b      	orrs	r3, r1
 8015c34:	2101      	movs	r1, #1
 8015c36:	4031      	ands	r1, r6
 8015c38:	430b      	orrs	r3, r1
 8015c3a:	d09a      	beq.n	8015b72 <_svfprintf_r+0xe8a>
 8015c3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c3e:	603b      	str	r3, [r7, #0]
 8015c40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015c42:	607b      	str	r3, [r7, #4]
 8015c44:	189a      	adds	r2, r3, r2
 8015c46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c48:	922e      	str	r2, [sp, #184]	; 0xb8
 8015c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c50:	3708      	adds	r7, #8
 8015c52:	2b07      	cmp	r3, #7
 8015c54:	dd08      	ble.n	8015c68 <_svfprintf_r+0xf80>
 8015c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c5c:	f002 fade 	bl	801821c <__ssprint_r>
 8015c60:	2800      	cmp	r0, #0
 8015c62:	d000      	beq.n	8015c66 <_svfprintf_r+0xf7e>
 8015c64:	e255      	b.n	8016112 <_svfprintf_r+0x142a>
 8015c66:	af2f      	add	r7, sp, #188	; 0xbc
 8015c68:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015c6a:	2c00      	cmp	r4, #0
 8015c6c:	da1a      	bge.n	8015ca4 <_svfprintf_r+0xfbc>
 8015c6e:	0039      	movs	r1, r7
 8015c70:	2510      	movs	r5, #16
 8015c72:	4264      	negs	r4, r4
 8015c74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c76:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015c78:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7a:	1c5a      	adds	r2, r3, #1
 8015c7c:	4b21      	ldr	r3, [pc, #132]	; (8015d04 <_svfprintf_r+0x101c>)
 8015c7e:	3708      	adds	r7, #8
 8015c80:	600b      	str	r3, [r1, #0]
 8015c82:	2c10      	cmp	r4, #16
 8015c84:	dc29      	bgt.n	8015cda <_svfprintf_r+0xff2>
 8015c86:	604c      	str	r4, [r1, #4]
 8015c88:	1824      	adds	r4, r4, r0
 8015c8a:	942e      	str	r4, [sp, #184]	; 0xb8
 8015c8c:	922d      	str	r2, [sp, #180]	; 0xb4
 8015c8e:	2a07      	cmp	r2, #7
 8015c90:	dd08      	ble.n	8015ca4 <_svfprintf_r+0xfbc>
 8015c92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c96:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c98:	f002 fac0 	bl	801821c <__ssprint_r>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d000      	beq.n	8015ca2 <_svfprintf_r+0xfba>
 8015ca0:	e237      	b.n	8016112 <_svfprintf_r+0x142a>
 8015ca2:	af2f      	add	r7, sp, #188	; 0xbc
 8015ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ca6:	9b08      	ldr	r3, [sp, #32]
 8015ca8:	468c      	mov	ip, r1
 8015caa:	603b      	str	r3, [r7, #0]
 8015cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cae:	607b      	str	r3, [r7, #4]
 8015cb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015cb2:	4463      	add	r3, ip
 8015cb4:	932e      	str	r3, [sp, #184]	; 0xb8
 8015cb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015cb8:	1c5a      	adds	r2, r3, #1
 8015cba:	9308      	str	r3, [sp, #32]
 8015cbc:	922d      	str	r2, [sp, #180]	; 0xb4
 8015cbe:	2a07      	cmp	r2, #7
 8015cc0:	dc01      	bgt.n	8015cc6 <_svfprintf_r+0xfde>
 8015cc2:	f7ff fa58 	bl	8015176 <_svfprintf_r+0x48e>
 8015cc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cca:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ccc:	f002 faa6 	bl	801821c <__ssprint_r>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d000      	beq.n	8015cd6 <_svfprintf_r+0xfee>
 8015cd4:	e21d      	b.n	8016112 <_svfprintf_r+0x142a>
 8015cd6:	af2f      	add	r7, sp, #188	; 0xbc
 8015cd8:	e74b      	b.n	8015b72 <_svfprintf_r+0xe8a>
 8015cda:	3010      	adds	r0, #16
 8015cdc:	604d      	str	r5, [r1, #4]
 8015cde:	902e      	str	r0, [sp, #184]	; 0xb8
 8015ce0:	922d      	str	r2, [sp, #180]	; 0xb4
 8015ce2:	2a07      	cmp	r2, #7
 8015ce4:	dd08      	ble.n	8015cf8 <_svfprintf_r+0x1010>
 8015ce6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cea:	aa2c      	add	r2, sp, #176	; 0xb0
 8015cec:	f002 fa96 	bl	801821c <__ssprint_r>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	d000      	beq.n	8015cf6 <_svfprintf_r+0x100e>
 8015cf4:	e20d      	b.n	8016112 <_svfprintf_r+0x142a>
 8015cf6:	af2f      	add	r7, sp, #188	; 0xbc
 8015cf8:	0039      	movs	r1, r7
 8015cfa:	3c10      	subs	r4, #16
 8015cfc:	e7ba      	b.n	8015c74 <_svfprintf_r+0xf8c>
 8015cfe:	46c0      	nop			; (mov r8, r8)
 8015d00:	0801ccea 	.word	0x0801ccea
 8015d04:	0801ccfc 	.word	0x0801ccfc
 8015d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d0a:	002c      	movs	r4, r5
 8015d0c:	429d      	cmp	r5, r3
 8015d0e:	dd00      	ble.n	8015d12 <_svfprintf_r+0x102a>
 8015d10:	001c      	movs	r4, r3
 8015d12:	2c00      	cmp	r4, #0
 8015d14:	dd15      	ble.n	8015d42 <_svfprintf_r+0x105a>
 8015d16:	9b08      	ldr	r3, [sp, #32]
 8015d18:	607c      	str	r4, [r7, #4]
 8015d1a:	603b      	str	r3, [r7, #0]
 8015d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d1e:	3708      	adds	r7, #8
 8015d20:	18e3      	adds	r3, r4, r3
 8015d22:	932e      	str	r3, [sp, #184]	; 0xb8
 8015d24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d26:	9309      	str	r3, [sp, #36]	; 0x24
 8015d28:	3301      	adds	r3, #1
 8015d2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d2c:	2b07      	cmp	r3, #7
 8015d2e:	dd08      	ble.n	8015d42 <_svfprintf_r+0x105a>
 8015d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d34:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d36:	f002 fa71 	bl	801821c <__ssprint_r>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d000      	beq.n	8015d40 <_svfprintf_r+0x1058>
 8015d3e:	e1e8      	b.n	8016112 <_svfprintf_r+0x142a>
 8015d40:	af2f      	add	r7, sp, #188	; 0xbc
 8015d42:	43e3      	mvns	r3, r4
 8015d44:	17db      	asrs	r3, r3, #31
 8015d46:	401c      	ands	r4, r3
 8015d48:	1b2c      	subs	r4, r5, r4
 8015d4a:	2c00      	cmp	r4, #0
 8015d4c:	dd1a      	ble.n	8015d84 <_svfprintf_r+0x109c>
 8015d4e:	0039      	movs	r1, r7
 8015d50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d52:	48ca      	ldr	r0, [pc, #808]	; (801607c <_svfprintf_r+0x1394>)
 8015d54:	9309      	str	r3, [sp, #36]	; 0x24
 8015d56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d58:	3301      	adds	r3, #1
 8015d5a:	3108      	adds	r1, #8
 8015d5c:	6038      	str	r0, [r7, #0]
 8015d5e:	2c10      	cmp	r4, #16
 8015d60:	dd00      	ble.n	8015d64 <_svfprintf_r+0x107c>
 8015d62:	e08a      	b.n	8015e7a <_svfprintf_r+0x1192>
 8015d64:	607c      	str	r4, [r7, #4]
 8015d66:	18a4      	adds	r4, r4, r2
 8015d68:	000f      	movs	r7, r1
 8015d6a:	942e      	str	r4, [sp, #184]	; 0xb8
 8015d6c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d6e:	2b07      	cmp	r3, #7
 8015d70:	dd08      	ble.n	8015d84 <_svfprintf_r+0x109c>
 8015d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d76:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d78:	f002 fa50 	bl	801821c <__ssprint_r>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d000      	beq.n	8015d82 <_svfprintf_r+0x109a>
 8015d80:	e1c7      	b.n	8016112 <_svfprintf_r+0x142a>
 8015d82:	af2f      	add	r7, sp, #188	; 0xbc
 8015d84:	9b08      	ldr	r3, [sp, #32]
 8015d86:	195d      	adds	r5, r3, r5
 8015d88:	0573      	lsls	r3, r6, #21
 8015d8a:	d50d      	bpl.n	8015da8 <_svfprintf_r+0x10c0>
 8015d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d000      	beq.n	8015d94 <_svfprintf_r+0x10ac>
 8015d92:	e085      	b.n	8015ea0 <_svfprintf_r+0x11b8>
 8015d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d000      	beq.n	8015d9c <_svfprintf_r+0x10b4>
 8015d9a:	e084      	b.n	8015ea6 <_svfprintf_r+0x11be>
 8015d9c:	9b08      	ldr	r3, [sp, #32]
 8015d9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015da0:	189b      	adds	r3, r3, r2
 8015da2:	429d      	cmp	r5, r3
 8015da4:	d900      	bls.n	8015da8 <_svfprintf_r+0x10c0>
 8015da6:	001d      	movs	r5, r3
 8015da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015dac:	4293      	cmp	r3, r2
 8015dae:	db01      	blt.n	8015db4 <_svfprintf_r+0x10cc>
 8015db0:	07f3      	lsls	r3, r6, #31
 8015db2:	d518      	bpl.n	8015de6 <_svfprintf_r+0x10fe>
 8015db4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015db6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015db8:	4694      	mov	ip, r2
 8015dba:	603b      	str	r3, [r7, #0]
 8015dbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015dbe:	607b      	str	r3, [r7, #4]
 8015dc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	4463      	add	r3, ip
 8015dc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8015dc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015dca:	9309      	str	r3, [sp, #36]	; 0x24
 8015dcc:	3301      	adds	r3, #1
 8015dce:	932d      	str	r3, [sp, #180]	; 0xb4
 8015dd0:	2b07      	cmp	r3, #7
 8015dd2:	dd08      	ble.n	8015de6 <_svfprintf_r+0x10fe>
 8015dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8015dda:	f002 fa1f 	bl	801821c <__ssprint_r>
 8015dde:	2800      	cmp	r0, #0
 8015de0:	d000      	beq.n	8015de4 <_svfprintf_r+0x10fc>
 8015de2:	e196      	b.n	8016112 <_svfprintf_r+0x142a>
 8015de4:	af2f      	add	r7, sp, #188	; 0xbc
 8015de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015de8:	9b08      	ldr	r3, [sp, #32]
 8015dea:	4694      	mov	ip, r2
 8015dec:	4463      	add	r3, ip
 8015dee:	1b58      	subs	r0, r3, r5
 8015df0:	0013      	movs	r3, r2
 8015df2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015df4:	1a9c      	subs	r4, r3, r2
 8015df6:	4284      	cmp	r4, r0
 8015df8:	dd00      	ble.n	8015dfc <_svfprintf_r+0x1114>
 8015dfa:	0004      	movs	r4, r0
 8015dfc:	2c00      	cmp	r4, #0
 8015dfe:	dd14      	ble.n	8015e2a <_svfprintf_r+0x1142>
 8015e00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015e02:	603d      	str	r5, [r7, #0]
 8015e04:	18e3      	adds	r3, r4, r3
 8015e06:	932e      	str	r3, [sp, #184]	; 0xb8
 8015e08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e0a:	607c      	str	r4, [r7, #4]
 8015e0c:	9308      	str	r3, [sp, #32]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e12:	3708      	adds	r7, #8
 8015e14:	2b07      	cmp	r3, #7
 8015e16:	dd08      	ble.n	8015e2a <_svfprintf_r+0x1142>
 8015e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e1e:	f002 f9fd 	bl	801821c <__ssprint_r>
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d000      	beq.n	8015e28 <_svfprintf_r+0x1140>
 8015e26:	e174      	b.n	8016112 <_svfprintf_r+0x142a>
 8015e28:	af2f      	add	r7, sp, #188	; 0xbc
 8015e2a:	43e3      	mvns	r3, r4
 8015e2c:	17db      	asrs	r3, r3, #31
 8015e2e:	401c      	ands	r4, r3
 8015e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e34:	2510      	movs	r5, #16
 8015e36:	1a9b      	subs	r3, r3, r2
 8015e38:	1b1c      	subs	r4, r3, r4
 8015e3a:	2c00      	cmp	r4, #0
 8015e3c:	dc00      	bgt.n	8015e40 <_svfprintf_r+0x1158>
 8015e3e:	e698      	b.n	8015b72 <_svfprintf_r+0xe8a>
 8015e40:	0039      	movs	r1, r7
 8015e42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e44:	488d      	ldr	r0, [pc, #564]	; (801607c <_svfprintf_r+0x1394>)
 8015e46:	9308      	str	r3, [sp, #32]
 8015e48:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	3108      	adds	r1, #8
 8015e4e:	6038      	str	r0, [r7, #0]
 8015e50:	2c10      	cmp	r4, #16
 8015e52:	dc00      	bgt.n	8015e56 <_svfprintf_r+0x116e>
 8015e54:	e6c7      	b.n	8015be6 <_svfprintf_r+0xefe>
 8015e56:	3210      	adds	r2, #16
 8015e58:	607d      	str	r5, [r7, #4]
 8015e5a:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e5c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e5e:	2b07      	cmp	r3, #7
 8015e60:	dd08      	ble.n	8015e74 <_svfprintf_r+0x118c>
 8015e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e66:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e68:	f002 f9d8 	bl	801821c <__ssprint_r>
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	d000      	beq.n	8015e72 <_svfprintf_r+0x118a>
 8015e70:	e14f      	b.n	8016112 <_svfprintf_r+0x142a>
 8015e72:	a92f      	add	r1, sp, #188	; 0xbc
 8015e74:	000f      	movs	r7, r1
 8015e76:	3c10      	subs	r4, #16
 8015e78:	e7e2      	b.n	8015e40 <_svfprintf_r+0x1158>
 8015e7a:	2010      	movs	r0, #16
 8015e7c:	1812      	adds	r2, r2, r0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e82:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e84:	2b07      	cmp	r3, #7
 8015e86:	dd08      	ble.n	8015e9a <_svfprintf_r+0x11b2>
 8015e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e8e:	f002 f9c5 	bl	801821c <__ssprint_r>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d000      	beq.n	8015e98 <_svfprintf_r+0x11b0>
 8015e96:	e13c      	b.n	8016112 <_svfprintf_r+0x142a>
 8015e98:	a92f      	add	r1, sp, #188	; 0xbc
 8015e9a:	000f      	movs	r7, r1
 8015e9c:	3c10      	subs	r4, #16
 8015e9e:	e756      	b.n	8015d4e <_svfprintf_r+0x1066>
 8015ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d061      	beq.n	8015f6a <_svfprintf_r+0x1282>
 8015ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ea8:	3b01      	subs	r3, #1
 8015eaa:	9310      	str	r3, [sp, #64]	; 0x40
 8015eac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015eae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015eb0:	4694      	mov	ip, r2
 8015eb2:	603b      	str	r3, [r7, #0]
 8015eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015eb6:	607b      	str	r3, [r7, #4]
 8015eb8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015eba:	3708      	adds	r7, #8
 8015ebc:	4463      	add	r3, ip
 8015ebe:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ec0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ec8:	2b07      	cmp	r3, #7
 8015eca:	dd08      	ble.n	8015ede <_svfprintf_r+0x11f6>
 8015ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ece:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ed0:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ed2:	f002 f9a3 	bl	801821c <__ssprint_r>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d000      	beq.n	8015edc <_svfprintf_r+0x11f4>
 8015eda:	e11a      	b.n	8016112 <_svfprintf_r+0x142a>
 8015edc:	af2f      	add	r7, sp, #188	; 0xbc
 8015ede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ee0:	9b08      	ldr	r3, [sp, #32]
 8015ee2:	189b      	adds	r3, r3, r2
 8015ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ee6:	1b5b      	subs	r3, r3, r5
 8015ee8:	7814      	ldrb	r4, [r2, #0]
 8015eea:	429c      	cmp	r4, r3
 8015eec:	dd00      	ble.n	8015ef0 <_svfprintf_r+0x1208>
 8015eee:	001c      	movs	r4, r3
 8015ef0:	2c00      	cmp	r4, #0
 8015ef2:	dd14      	ble.n	8015f1e <_svfprintf_r+0x1236>
 8015ef4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ef6:	603d      	str	r5, [r7, #0]
 8015ef8:	18e3      	adds	r3, r4, r3
 8015efa:	932e      	str	r3, [sp, #184]	; 0xb8
 8015efc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015efe:	607c      	str	r4, [r7, #4]
 8015f00:	9309      	str	r3, [sp, #36]	; 0x24
 8015f02:	3301      	adds	r3, #1
 8015f04:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f06:	3708      	adds	r7, #8
 8015f08:	2b07      	cmp	r3, #7
 8015f0a:	dd08      	ble.n	8015f1e <_svfprintf_r+0x1236>
 8015f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f10:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f12:	f002 f983 	bl	801821c <__ssprint_r>
 8015f16:	2800      	cmp	r0, #0
 8015f18:	d000      	beq.n	8015f1c <_svfprintf_r+0x1234>
 8015f1a:	e0fa      	b.n	8016112 <_svfprintf_r+0x142a>
 8015f1c:	af2f      	add	r7, sp, #188	; 0xbc
 8015f1e:	43e3      	mvns	r3, r4
 8015f20:	17db      	asrs	r3, r3, #31
 8015f22:	401c      	ands	r4, r3
 8015f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	1b1c      	subs	r4, r3, r4
 8015f2a:	2c00      	cmp	r4, #0
 8015f2c:	dd19      	ble.n	8015f62 <_svfprintf_r+0x127a>
 8015f2e:	0039      	movs	r1, r7
 8015f30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f32:	4852      	ldr	r0, [pc, #328]	; (801607c <_svfprintf_r+0x1394>)
 8015f34:	9309      	str	r3, [sp, #36]	; 0x24
 8015f36:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015f38:	3301      	adds	r3, #1
 8015f3a:	3108      	adds	r1, #8
 8015f3c:	6038      	str	r0, [r7, #0]
 8015f3e:	2c10      	cmp	r4, #16
 8015f40:	dc1a      	bgt.n	8015f78 <_svfprintf_r+0x1290>
 8015f42:	607c      	str	r4, [r7, #4]
 8015f44:	18a4      	adds	r4, r4, r2
 8015f46:	000f      	movs	r7, r1
 8015f48:	942e      	str	r4, [sp, #184]	; 0xb8
 8015f4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f4c:	2b07      	cmp	r3, #7
 8015f4e:	dd08      	ble.n	8015f62 <_svfprintf_r+0x127a>
 8015f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f54:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f56:	f002 f961 	bl	801821c <__ssprint_r>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d000      	beq.n	8015f60 <_svfprintf_r+0x1278>
 8015f5e:	e0d8      	b.n	8016112 <_svfprintf_r+0x142a>
 8015f60:	af2f      	add	r7, sp, #188	; 0xbc
 8015f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	18ed      	adds	r5, r5, r3
 8015f68:	e710      	b.n	8015d8c <_svfprintf_r+0x10a4>
 8015f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f6c:	3b01      	subs	r3, #1
 8015f6e:	9312      	str	r3, [sp, #72]	; 0x48
 8015f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f72:	3b01      	subs	r3, #1
 8015f74:	9311      	str	r3, [sp, #68]	; 0x44
 8015f76:	e799      	b.n	8015eac <_svfprintf_r+0x11c4>
 8015f78:	2010      	movs	r0, #16
 8015f7a:	1812      	adds	r2, r2, r0
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015f80:	932d      	str	r3, [sp, #180]	; 0xb4
 8015f82:	2b07      	cmp	r3, #7
 8015f84:	dd08      	ble.n	8015f98 <_svfprintf_r+0x12b0>
 8015f86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f8a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015f8c:	f002 f946 	bl	801821c <__ssprint_r>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d000      	beq.n	8015f96 <_svfprintf_r+0x12ae>
 8015f94:	e0bd      	b.n	8016112 <_svfprintf_r+0x142a>
 8015f96:	a92f      	add	r1, sp, #188	; 0xbc
 8015f98:	000f      	movs	r7, r1
 8015f9a:	3c10      	subs	r4, #16
 8015f9c:	e7c7      	b.n	8015f2e <_svfprintf_r+0x1246>
 8015f9e:	003c      	movs	r4, r7
 8015fa0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015fa2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8015fa8:	3101      	adds	r1, #1
 8015faa:	3301      	adds	r3, #1
 8015fac:	3408      	adds	r4, #8
 8015fae:	2a01      	cmp	r2, #1
 8015fb0:	dc03      	bgt.n	8015fba <_svfprintf_r+0x12d2>
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	4216      	tst	r6, r2
 8015fb6:	d100      	bne.n	8015fba <_svfprintf_r+0x12d2>
 8015fb8:	e088      	b.n	80160cc <_svfprintf_r+0x13e4>
 8015fba:	9a08      	ldr	r2, [sp, #32]
 8015fbc:	912e      	str	r1, [sp, #184]	; 0xb8
 8015fbe:	603a      	str	r2, [r7, #0]
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015fc4:	607a      	str	r2, [r7, #4]
 8015fc6:	2b07      	cmp	r3, #7
 8015fc8:	dd08      	ble.n	8015fdc <_svfprintf_r+0x12f4>
 8015fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fce:	aa2c      	add	r2, sp, #176	; 0xb0
 8015fd0:	f002 f924 	bl	801821c <__ssprint_r>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d000      	beq.n	8015fda <_svfprintf_r+0x12f2>
 8015fd8:	e09b      	b.n	8016112 <_svfprintf_r+0x142a>
 8015fda:	ac2f      	add	r4, sp, #188	; 0xbc
 8015fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015fe0:	4694      	mov	ip, r2
 8015fe2:	6023      	str	r3, [r4, #0]
 8015fe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fe6:	6063      	str	r3, [r4, #4]
 8015fe8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015fea:	3408      	adds	r4, #8
 8015fec:	4463      	add	r3, ip
 8015fee:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ff0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ff8:	2b07      	cmp	r3, #7
 8015ffa:	dd08      	ble.n	801600e <_svfprintf_r+0x1326>
 8015ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ffe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016000:	aa2c      	add	r2, sp, #176	; 0xb0
 8016002:	f002 f90b 	bl	801821c <__ssprint_r>
 8016006:	2800      	cmp	r0, #0
 8016008:	d000      	beq.n	801600c <_svfprintf_r+0x1324>
 801600a:	e082      	b.n	8016112 <_svfprintf_r+0x142a>
 801600c:	ac2f      	add	r4, sp, #188	; 0xbc
 801600e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016010:	2200      	movs	r2, #0
 8016012:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016014:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016016:	1e5d      	subs	r5, r3, #1
 8016018:	2300      	movs	r3, #0
 801601a:	f7ea fa1f 	bl	800045c <__aeabi_dcmpeq>
 801601e:	2800      	cmp	r0, #0
 8016020:	d12e      	bne.n	8016080 <_svfprintf_r+0x1398>
 8016022:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016024:	9808      	ldr	r0, [sp, #32]
 8016026:	9309      	str	r3, [sp, #36]	; 0x24
 8016028:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801602a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801602c:	1c59      	adds	r1, r3, #1
 801602e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016032:	3001      	adds	r0, #1
 8016034:	3b01      	subs	r3, #1
 8016036:	189b      	adds	r3, r3, r2
 8016038:	6020      	str	r0, [r4, #0]
 801603a:	6065      	str	r5, [r4, #4]
 801603c:	932e      	str	r3, [sp, #184]	; 0xb8
 801603e:	912d      	str	r1, [sp, #180]	; 0xb4
 8016040:	3408      	adds	r4, #8
 8016042:	2907      	cmp	r1, #7
 8016044:	dd07      	ble.n	8016056 <_svfprintf_r+0x136e>
 8016046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016048:	980a      	ldr	r0, [sp, #40]	; 0x28
 801604a:	aa2c      	add	r2, sp, #176	; 0xb0
 801604c:	f002 f8e6 	bl	801821c <__ssprint_r>
 8016050:	2800      	cmp	r0, #0
 8016052:	d15e      	bne.n	8016112 <_svfprintf_r+0x142a>
 8016054:	ac2f      	add	r4, sp, #188	; 0xbc
 8016056:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016058:	ab28      	add	r3, sp, #160	; 0xa0
 801605a:	4694      	mov	ip, r2
 801605c:	6023      	str	r3, [r4, #0]
 801605e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016060:	6063      	str	r3, [r4, #4]
 8016062:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016064:	4463      	add	r3, ip
 8016066:	932e      	str	r3, [sp, #184]	; 0xb8
 8016068:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801606a:	9308      	str	r3, [sp, #32]
 801606c:	3301      	adds	r3, #1
 801606e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016070:	2b07      	cmp	r3, #7
 8016072:	dd00      	ble.n	8016076 <_svfprintf_r+0x138e>
 8016074:	e627      	b.n	8015cc6 <_svfprintf_r+0xfde>
 8016076:	3408      	adds	r4, #8
 8016078:	0027      	movs	r7, r4
 801607a:	e57a      	b.n	8015b72 <_svfprintf_r+0xe8a>
 801607c:	0801ccfc 	.word	0x0801ccfc
 8016080:	2710      	movs	r7, #16
 8016082:	2d00      	cmp	r5, #0
 8016084:	dde7      	ble.n	8016056 <_svfprintf_r+0x136e>
 8016086:	0021      	movs	r1, r4
 8016088:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801608a:	4857      	ldr	r0, [pc, #348]	; (80161e8 <_svfprintf_r+0x1500>)
 801608c:	9308      	str	r3, [sp, #32]
 801608e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016090:	3301      	adds	r3, #1
 8016092:	3108      	adds	r1, #8
 8016094:	6020      	str	r0, [r4, #0]
 8016096:	2d10      	cmp	r5, #16
 8016098:	dc07      	bgt.n	80160aa <_svfprintf_r+0x13c2>
 801609a:	6065      	str	r5, [r4, #4]
 801609c:	000c      	movs	r4, r1
 801609e:	18ad      	adds	r5, r5, r2
 80160a0:	952e      	str	r5, [sp, #184]	; 0xb8
 80160a2:	932d      	str	r3, [sp, #180]	; 0xb4
 80160a4:	2b07      	cmp	r3, #7
 80160a6:	ddd6      	ble.n	8016056 <_svfprintf_r+0x136e>
 80160a8:	e7cd      	b.n	8016046 <_svfprintf_r+0x135e>
 80160aa:	3210      	adds	r2, #16
 80160ac:	6067      	str	r7, [r4, #4]
 80160ae:	922e      	str	r2, [sp, #184]	; 0xb8
 80160b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80160b2:	2b07      	cmp	r3, #7
 80160b4:	dd07      	ble.n	80160c6 <_svfprintf_r+0x13de>
 80160b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80160bc:	f002 f8ae 	bl	801821c <__ssprint_r>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d126      	bne.n	8016112 <_svfprintf_r+0x142a>
 80160c4:	a92f      	add	r1, sp, #188	; 0xbc
 80160c6:	000c      	movs	r4, r1
 80160c8:	3d10      	subs	r5, #16
 80160ca:	e7dc      	b.n	8016086 <_svfprintf_r+0x139e>
 80160cc:	9808      	ldr	r0, [sp, #32]
 80160ce:	912e      	str	r1, [sp, #184]	; 0xb8
 80160d0:	c705      	stmia	r7!, {r0, r2}
 80160d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80160d4:	e7e6      	b.n	80160a4 <_svfprintf_r+0x13bc>
 80160d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80160d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80160da:	2510      	movs	r5, #16
 80160dc:	1a9c      	subs	r4, r3, r2
 80160de:	2c00      	cmp	r4, #0
 80160e0:	dc00      	bgt.n	80160e4 <_svfprintf_r+0x13fc>
 80160e2:	e549      	b.n	8015b78 <_svfprintf_r+0xe90>
 80160e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160e6:	4941      	ldr	r1, [pc, #260]	; (80161ec <_svfprintf_r+0x1504>)
 80160e8:	9308      	str	r3, [sp, #32]
 80160ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80160ec:	3301      	adds	r3, #1
 80160ee:	6039      	str	r1, [r7, #0]
 80160f0:	2c10      	cmp	r4, #16
 80160f2:	dc19      	bgt.n	8016128 <_svfprintf_r+0x1440>
 80160f4:	607c      	str	r4, [r7, #4]
 80160f6:	1914      	adds	r4, r2, r4
 80160f8:	942e      	str	r4, [sp, #184]	; 0xb8
 80160fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80160fc:	2b07      	cmp	r3, #7
 80160fe:	dc00      	bgt.n	8016102 <_svfprintf_r+0x141a>
 8016100:	e53a      	b.n	8015b78 <_svfprintf_r+0xe90>
 8016102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016106:	aa2c      	add	r2, sp, #176	; 0xb0
 8016108:	f002 f888 	bl	801821c <__ssprint_r>
 801610c:	2800      	cmp	r0, #0
 801610e:	d100      	bne.n	8016112 <_svfprintf_r+0x142a>
 8016110:	e532      	b.n	8015b78 <_svfprintf_r+0xe90>
 8016112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016114:	2b00      	cmp	r3, #0
 8016116:	d101      	bne.n	801611c <_svfprintf_r+0x1434>
 8016118:	f7ff f8ec 	bl	80152f4 <_svfprintf_r+0x60c>
 801611c:	0019      	movs	r1, r3
 801611e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016120:	f000 ff66 	bl	8016ff0 <_free_r>
 8016124:	f7ff f8e6 	bl	80152f4 <_svfprintf_r+0x60c>
 8016128:	3210      	adds	r2, #16
 801612a:	607d      	str	r5, [r7, #4]
 801612c:	922e      	str	r2, [sp, #184]	; 0xb8
 801612e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016130:	3708      	adds	r7, #8
 8016132:	2b07      	cmp	r3, #7
 8016134:	dd07      	ble.n	8016146 <_svfprintf_r+0x145e>
 8016136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016138:	980a      	ldr	r0, [sp, #40]	; 0x28
 801613a:	aa2c      	add	r2, sp, #176	; 0xb0
 801613c:	f002 f86e 	bl	801821c <__ssprint_r>
 8016140:	2800      	cmp	r0, #0
 8016142:	d1e6      	bne.n	8016112 <_svfprintf_r+0x142a>
 8016144:	af2f      	add	r7, sp, #188	; 0xbc
 8016146:	3c10      	subs	r4, #16
 8016148:	e7cc      	b.n	80160e4 <_svfprintf_r+0x13fc>
 801614a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801614c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801614e:	f000 ff4f 	bl	8016ff0 <_free_r>
 8016152:	e52b      	b.n	8015bac <_svfprintf_r+0xec4>
 8016154:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016156:	9306      	str	r3, [sp, #24]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d101      	bne.n	8016160 <_svfprintf_r+0x1478>
 801615c:	f7ff f8ca 	bl	80152f4 <_svfprintf_r+0x60c>
 8016160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016162:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016164:	aa2c      	add	r2, sp, #176	; 0xb0
 8016166:	f002 f859 	bl	801821c <__ssprint_r>
 801616a:	f7ff f8c3 	bl	80152f4 <_svfprintf_r+0x60c>
 801616e:	0035      	movs	r5, r6
 8016170:	2a00      	cmp	r2, #0
 8016172:	d101      	bne.n	8016178 <_svfprintf_r+0x1490>
 8016174:	f7ff f832 	bl	80151dc <_svfprintf_r+0x4f4>
 8016178:	2b01      	cmp	r3, #1
 801617a:	d101      	bne.n	8016180 <_svfprintf_r+0x1498>
 801617c:	f7ff fbdf 	bl	801593e <_svfprintf_r+0xc56>
 8016180:	2b02      	cmp	r3, #2
 8016182:	d100      	bne.n	8016186 <_svfprintf_r+0x149e>
 8016184:	e430      	b.n	80159e8 <_svfprintf_r+0xd00>
 8016186:	2607      	movs	r6, #7
 8016188:	ab58      	add	r3, sp, #352	; 0x160
 801618a:	9308      	str	r3, [sp, #32]
 801618c:	9908      	ldr	r1, [sp, #32]
 801618e:	000b      	movs	r3, r1
 8016190:	3b01      	subs	r3, #1
 8016192:	9308      	str	r3, [sp, #32]
 8016194:	9b06      	ldr	r3, [sp, #24]
 8016196:	9a08      	ldr	r2, [sp, #32]
 8016198:	4033      	ands	r3, r6
 801619a:	3330      	adds	r3, #48	; 0x30
 801619c:	7013      	strb	r3, [r2, #0]
 801619e:	9a07      	ldr	r2, [sp, #28]
 80161a0:	0754      	lsls	r4, r2, #29
 80161a2:	9a06      	ldr	r2, [sp, #24]
 80161a4:	08d0      	lsrs	r0, r2, #3
 80161a6:	9a07      	ldr	r2, [sp, #28]
 80161a8:	4304      	orrs	r4, r0
 80161aa:	08d2      	lsrs	r2, r2, #3
 80161ac:	9207      	str	r2, [sp, #28]
 80161ae:	0022      	movs	r2, r4
 80161b0:	9807      	ldr	r0, [sp, #28]
 80161b2:	9406      	str	r4, [sp, #24]
 80161b4:	4302      	orrs	r2, r0
 80161b6:	d1e9      	bne.n	801618c <_svfprintf_r+0x14a4>
 80161b8:	07ea      	lsls	r2, r5, #31
 80161ba:	d507      	bpl.n	80161cc <_svfprintf_r+0x14e4>
 80161bc:	2b30      	cmp	r3, #48	; 0x30
 80161be:	d005      	beq.n	80161cc <_svfprintf_r+0x14e4>
 80161c0:	2330      	movs	r3, #48	; 0x30
 80161c2:	9808      	ldr	r0, [sp, #32]
 80161c4:	3801      	subs	r0, #1
 80161c6:	7003      	strb	r3, [r0, #0]
 80161c8:	1e8b      	subs	r3, r1, #2
 80161ca:	9308      	str	r3, [sp, #32]
 80161cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ce:	9a08      	ldr	r2, [sp, #32]
 80161d0:	9319      	str	r3, [sp, #100]	; 0x64
 80161d2:	ab58      	add	r3, sp, #352	; 0x160
 80161d4:	1a9b      	subs	r3, r3, r2
 80161d6:	9309      	str	r3, [sp, #36]	; 0x24
 80161d8:	2300      	movs	r3, #0
 80161da:	002e      	movs	r6, r5
 80161dc:	930c      	str	r3, [sp, #48]	; 0x30
 80161de:	001d      	movs	r5, r3
 80161e0:	9310      	str	r3, [sp, #64]	; 0x40
 80161e2:	9311      	str	r3, [sp, #68]	; 0x44
 80161e4:	f7fe feee 	bl	8014fc4 <_svfprintf_r+0x2dc>
 80161e8:	0801ccfc 	.word	0x0801ccfc
 80161ec:	0801ccec 	.word	0x0801ccec

080161f0 <sysconf>:
 80161f0:	2380      	movs	r3, #128	; 0x80
 80161f2:	b510      	push	{r4, lr}
 80161f4:	015b      	lsls	r3, r3, #5
 80161f6:	2808      	cmp	r0, #8
 80161f8:	d004      	beq.n	8016204 <sysconf+0x14>
 80161fa:	f000 fe8b 	bl	8016f14 <__errno>
 80161fe:	2316      	movs	r3, #22
 8016200:	6003      	str	r3, [r0, #0]
 8016202:	3b17      	subs	r3, #23
 8016204:	0018      	movs	r0, r3
 8016206:	bd10      	pop	{r4, pc}

08016208 <register_fini>:
 8016208:	4b03      	ldr	r3, [pc, #12]	; (8016218 <register_fini+0x10>)
 801620a:	b510      	push	{r4, lr}
 801620c:	2b00      	cmp	r3, #0
 801620e:	d002      	beq.n	8016216 <register_fini+0xe>
 8016210:	4802      	ldr	r0, [pc, #8]	; (801621c <register_fini+0x14>)
 8016212:	f000 f805 	bl	8016220 <atexit>
 8016216:	bd10      	pop	{r4, pc}
 8016218:	00000000 	.word	0x00000000
 801621c:	08016f21 	.word	0x08016f21

08016220 <atexit>:
 8016220:	2300      	movs	r3, #0
 8016222:	b510      	push	{r4, lr}
 8016224:	0001      	movs	r1, r0
 8016226:	001a      	movs	r2, r3
 8016228:	0018      	movs	r0, r3
 801622a:	f002 f885 	bl	8018338 <__register_exitproc>
 801622e:	bd10      	pop	{r4, pc}

08016230 <quorem>:
 8016230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016232:	0006      	movs	r6, r0
 8016234:	690d      	ldr	r5, [r1, #16]
 8016236:	6933      	ldr	r3, [r6, #16]
 8016238:	b087      	sub	sp, #28
 801623a:	2000      	movs	r0, #0
 801623c:	9102      	str	r1, [sp, #8]
 801623e:	42ab      	cmp	r3, r5
 8016240:	db6b      	blt.n	801631a <quorem+0xea>
 8016242:	000b      	movs	r3, r1
 8016244:	3d01      	subs	r5, #1
 8016246:	00ac      	lsls	r4, r5, #2
 8016248:	3314      	adds	r3, #20
 801624a:	9305      	str	r3, [sp, #20]
 801624c:	191b      	adds	r3, r3, r4
 801624e:	9303      	str	r3, [sp, #12]
 8016250:	0033      	movs	r3, r6
 8016252:	3314      	adds	r3, #20
 8016254:	9301      	str	r3, [sp, #4]
 8016256:	191c      	adds	r4, r3, r4
 8016258:	9b03      	ldr	r3, [sp, #12]
 801625a:	6827      	ldr	r7, [r4, #0]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	0038      	movs	r0, r7
 8016260:	9300      	str	r3, [sp, #0]
 8016262:	3301      	adds	r3, #1
 8016264:	0019      	movs	r1, r3
 8016266:	9304      	str	r3, [sp, #16]
 8016268:	f7e9 ff72 	bl	8000150 <__udivsi3>
 801626c:	9b04      	ldr	r3, [sp, #16]
 801626e:	9000      	str	r0, [sp, #0]
 8016270:	429f      	cmp	r7, r3
 8016272:	d329      	bcc.n	80162c8 <quorem+0x98>
 8016274:	2300      	movs	r3, #0
 8016276:	469c      	mov	ip, r3
 8016278:	9801      	ldr	r0, [sp, #4]
 801627a:	9f05      	ldr	r7, [sp, #20]
 801627c:	9304      	str	r3, [sp, #16]
 801627e:	cf08      	ldmia	r7!, {r3}
 8016280:	9a00      	ldr	r2, [sp, #0]
 8016282:	b299      	uxth	r1, r3
 8016284:	4351      	muls	r1, r2
 8016286:	0c1b      	lsrs	r3, r3, #16
 8016288:	4353      	muls	r3, r2
 801628a:	4461      	add	r1, ip
 801628c:	0c0a      	lsrs	r2, r1, #16
 801628e:	189b      	adds	r3, r3, r2
 8016290:	0c1a      	lsrs	r2, r3, #16
 8016292:	9305      	str	r3, [sp, #20]
 8016294:	6803      	ldr	r3, [r0, #0]
 8016296:	4694      	mov	ip, r2
 8016298:	b29a      	uxth	r2, r3
 801629a:	9b04      	ldr	r3, [sp, #16]
 801629c:	b289      	uxth	r1, r1
 801629e:	18d2      	adds	r2, r2, r3
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	1a52      	subs	r2, r2, r1
 80162a4:	0c19      	lsrs	r1, r3, #16
 80162a6:	466b      	mov	r3, sp
 80162a8:	8a9b      	ldrh	r3, [r3, #20]
 80162aa:	1acb      	subs	r3, r1, r3
 80162ac:	1411      	asrs	r1, r2, #16
 80162ae:	185b      	adds	r3, r3, r1
 80162b0:	1419      	asrs	r1, r3, #16
 80162b2:	b292      	uxth	r2, r2
 80162b4:	041b      	lsls	r3, r3, #16
 80162b6:	431a      	orrs	r2, r3
 80162b8:	9b03      	ldr	r3, [sp, #12]
 80162ba:	9104      	str	r1, [sp, #16]
 80162bc:	c004      	stmia	r0!, {r2}
 80162be:	42bb      	cmp	r3, r7
 80162c0:	d2dd      	bcs.n	801627e <quorem+0x4e>
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d02e      	beq.n	8016326 <quorem+0xf6>
 80162c8:	0030      	movs	r0, r6
 80162ca:	9902      	ldr	r1, [sp, #8]
 80162cc:	f001 fd76 	bl	8017dbc <__mcmp>
 80162d0:	2800      	cmp	r0, #0
 80162d2:	db21      	blt.n	8016318 <quorem+0xe8>
 80162d4:	0030      	movs	r0, r6
 80162d6:	2400      	movs	r4, #0
 80162d8:	9b00      	ldr	r3, [sp, #0]
 80162da:	9902      	ldr	r1, [sp, #8]
 80162dc:	3301      	adds	r3, #1
 80162de:	9300      	str	r3, [sp, #0]
 80162e0:	3014      	adds	r0, #20
 80162e2:	3114      	adds	r1, #20
 80162e4:	6802      	ldr	r2, [r0, #0]
 80162e6:	c908      	ldmia	r1!, {r3}
 80162e8:	b292      	uxth	r2, r2
 80162ea:	1914      	adds	r4, r2, r4
 80162ec:	b29a      	uxth	r2, r3
 80162ee:	1aa2      	subs	r2, r4, r2
 80162f0:	6804      	ldr	r4, [r0, #0]
 80162f2:	0c1b      	lsrs	r3, r3, #16
 80162f4:	0c24      	lsrs	r4, r4, #16
 80162f6:	1ae3      	subs	r3, r4, r3
 80162f8:	1414      	asrs	r4, r2, #16
 80162fa:	191b      	adds	r3, r3, r4
 80162fc:	141c      	asrs	r4, r3, #16
 80162fe:	b292      	uxth	r2, r2
 8016300:	041b      	lsls	r3, r3, #16
 8016302:	4313      	orrs	r3, r2
 8016304:	c008      	stmia	r0!, {r3}
 8016306:	9b03      	ldr	r3, [sp, #12]
 8016308:	428b      	cmp	r3, r1
 801630a:	d2eb      	bcs.n	80162e4 <quorem+0xb4>
 801630c:	9a01      	ldr	r2, [sp, #4]
 801630e:	00ab      	lsls	r3, r5, #2
 8016310:	18d3      	adds	r3, r2, r3
 8016312:	681a      	ldr	r2, [r3, #0]
 8016314:	2a00      	cmp	r2, #0
 8016316:	d010      	beq.n	801633a <quorem+0x10a>
 8016318:	9800      	ldr	r0, [sp, #0]
 801631a:	b007      	add	sp, #28
 801631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d104      	bne.n	801632e <quorem+0xfe>
 8016324:	3d01      	subs	r5, #1
 8016326:	9b01      	ldr	r3, [sp, #4]
 8016328:	3c04      	subs	r4, #4
 801632a:	42a3      	cmp	r3, r4
 801632c:	d3f7      	bcc.n	801631e <quorem+0xee>
 801632e:	6135      	str	r5, [r6, #16]
 8016330:	e7ca      	b.n	80162c8 <quorem+0x98>
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	2a00      	cmp	r2, #0
 8016336:	d104      	bne.n	8016342 <quorem+0x112>
 8016338:	3d01      	subs	r5, #1
 801633a:	9a01      	ldr	r2, [sp, #4]
 801633c:	3b04      	subs	r3, #4
 801633e:	429a      	cmp	r2, r3
 8016340:	d3f7      	bcc.n	8016332 <quorem+0x102>
 8016342:	6135      	str	r5, [r6, #16]
 8016344:	e7e8      	b.n	8016318 <quorem+0xe8>
	...

08016348 <_dtoa_r>:
 8016348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801634a:	0014      	movs	r4, r2
 801634c:	001d      	movs	r5, r3
 801634e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016350:	b09d      	sub	sp, #116	; 0x74
 8016352:	940a      	str	r4, [sp, #40]	; 0x28
 8016354:	950b      	str	r5, [sp, #44]	; 0x2c
 8016356:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016358:	9003      	str	r0, [sp, #12]
 801635a:	2900      	cmp	r1, #0
 801635c:	d009      	beq.n	8016372 <_dtoa_r+0x2a>
 801635e:	2301      	movs	r3, #1
 8016360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016362:	4093      	lsls	r3, r2
 8016364:	604a      	str	r2, [r1, #4]
 8016366:	608b      	str	r3, [r1, #8]
 8016368:	f001 face 	bl	8017908 <_Bfree>
 801636c:	2300      	movs	r3, #0
 801636e:	9a03      	ldr	r2, [sp, #12]
 8016370:	6413      	str	r3, [r2, #64]	; 0x40
 8016372:	2d00      	cmp	r5, #0
 8016374:	da1f      	bge.n	80163b6 <_dtoa_r+0x6e>
 8016376:	2301      	movs	r3, #1
 8016378:	6033      	str	r3, [r6, #0]
 801637a:	006b      	lsls	r3, r5, #1
 801637c:	085b      	lsrs	r3, r3, #1
 801637e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016380:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016382:	4bb9      	ldr	r3, [pc, #740]	; (8016668 <_dtoa_r+0x320>)
 8016384:	003a      	movs	r2, r7
 8016386:	9318      	str	r3, [sp, #96]	; 0x60
 8016388:	401a      	ands	r2, r3
 801638a:	429a      	cmp	r2, r3
 801638c:	d116      	bne.n	80163bc <_dtoa_r+0x74>
 801638e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016390:	4bb6      	ldr	r3, [pc, #728]	; (801666c <_dtoa_r+0x324>)
 8016392:	6013      	str	r3, [r2, #0]
 8016394:	033a      	lsls	r2, r7, #12
 8016396:	0b12      	lsrs	r2, r2, #12
 8016398:	4314      	orrs	r4, r2
 801639a:	d101      	bne.n	80163a0 <_dtoa_r+0x58>
 801639c:	f000 fda4 	bl	8016ee8 <_dtoa_r+0xba0>
 80163a0:	48b3      	ldr	r0, [pc, #716]	; (8016670 <_dtoa_r+0x328>)
 80163a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80163a4:	9005      	str	r0, [sp, #20]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d002      	beq.n	80163b0 <_dtoa_r+0x68>
 80163aa:	4bb2      	ldr	r3, [pc, #712]	; (8016674 <_dtoa_r+0x32c>)
 80163ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80163ae:	6013      	str	r3, [r2, #0]
 80163b0:	9805      	ldr	r0, [sp, #20]
 80163b2:	b01d      	add	sp, #116	; 0x74
 80163b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163b6:	2300      	movs	r3, #0
 80163b8:	6033      	str	r3, [r6, #0]
 80163ba:	e7e1      	b.n	8016380 <_dtoa_r+0x38>
 80163bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163c0:	9210      	str	r2, [sp, #64]	; 0x40
 80163c2:	9311      	str	r3, [sp, #68]	; 0x44
 80163c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80163c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80163c8:	2200      	movs	r2, #0
 80163ca:	2300      	movs	r3, #0
 80163cc:	f7ea f846 	bl	800045c <__aeabi_dcmpeq>
 80163d0:	1e06      	subs	r6, r0, #0
 80163d2:	d00b      	beq.n	80163ec <_dtoa_r+0xa4>
 80163d4:	2301      	movs	r3, #1
 80163d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80163d8:	6013      	str	r3, [r2, #0]
 80163da:	4ba7      	ldr	r3, [pc, #668]	; (8016678 <_dtoa_r+0x330>)
 80163dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80163de:	9305      	str	r3, [sp, #20]
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	d0e5      	beq.n	80163b0 <_dtoa_r+0x68>
 80163e4:	4aa5      	ldr	r2, [pc, #660]	; (801667c <_dtoa_r+0x334>)
 80163e6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80163e8:	600a      	str	r2, [r1, #0]
 80163ea:	e7e1      	b.n	80163b0 <_dtoa_r+0x68>
 80163ec:	ab1a      	add	r3, sp, #104	; 0x68
 80163ee:	9301      	str	r3, [sp, #4]
 80163f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80163f2:	9300      	str	r3, [sp, #0]
 80163f4:	9803      	ldr	r0, [sp, #12]
 80163f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163fa:	f001 fe07 	bl	801800c <__d2b>
 80163fe:	007b      	lsls	r3, r7, #1
 8016400:	9004      	str	r0, [sp, #16]
 8016402:	0d5b      	lsrs	r3, r3, #21
 8016404:	d100      	bne.n	8016408 <_dtoa_r+0xc0>
 8016406:	e07c      	b.n	8016502 <_dtoa_r+0x1ba>
 8016408:	9810      	ldr	r0, [sp, #64]	; 0x40
 801640a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801640c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801640e:	4c9c      	ldr	r4, [pc, #624]	; (8016680 <_dtoa_r+0x338>)
 8016410:	0312      	lsls	r2, r2, #12
 8016412:	0b12      	lsrs	r2, r2, #12
 8016414:	4314      	orrs	r4, r2
 8016416:	0021      	movs	r1, r4
 8016418:	4a9a      	ldr	r2, [pc, #616]	; (8016684 <_dtoa_r+0x33c>)
 801641a:	9616      	str	r6, [sp, #88]	; 0x58
 801641c:	189f      	adds	r7, r3, r2
 801641e:	2200      	movs	r2, #0
 8016420:	4b99      	ldr	r3, [pc, #612]	; (8016688 <_dtoa_r+0x340>)
 8016422:	f7ec f927 	bl	8002674 <__aeabi_dsub>
 8016426:	4a99      	ldr	r2, [pc, #612]	; (801668c <_dtoa_r+0x344>)
 8016428:	4b99      	ldr	r3, [pc, #612]	; (8016690 <_dtoa_r+0x348>)
 801642a:	f7eb feb7 	bl	800219c <__aeabi_dmul>
 801642e:	4a99      	ldr	r2, [pc, #612]	; (8016694 <_dtoa_r+0x34c>)
 8016430:	4b99      	ldr	r3, [pc, #612]	; (8016698 <_dtoa_r+0x350>)
 8016432:	f7ea ff43 	bl	80012bc <__aeabi_dadd>
 8016436:	0004      	movs	r4, r0
 8016438:	0038      	movs	r0, r7
 801643a:	000d      	movs	r5, r1
 801643c:	f7ec fd00 	bl	8002e40 <__aeabi_i2d>
 8016440:	4a96      	ldr	r2, [pc, #600]	; (801669c <_dtoa_r+0x354>)
 8016442:	4b97      	ldr	r3, [pc, #604]	; (80166a0 <_dtoa_r+0x358>)
 8016444:	f7eb feaa 	bl	800219c <__aeabi_dmul>
 8016448:	0002      	movs	r2, r0
 801644a:	000b      	movs	r3, r1
 801644c:	0020      	movs	r0, r4
 801644e:	0029      	movs	r1, r5
 8016450:	f7ea ff34 	bl	80012bc <__aeabi_dadd>
 8016454:	0004      	movs	r4, r0
 8016456:	000d      	movs	r5, r1
 8016458:	f7ec fcbc 	bl	8002dd4 <__aeabi_d2iz>
 801645c:	2200      	movs	r2, #0
 801645e:	9002      	str	r0, [sp, #8]
 8016460:	2300      	movs	r3, #0
 8016462:	0020      	movs	r0, r4
 8016464:	0029      	movs	r1, r5
 8016466:	f7e9 ffff 	bl	8000468 <__aeabi_dcmplt>
 801646a:	2800      	cmp	r0, #0
 801646c:	d00b      	beq.n	8016486 <_dtoa_r+0x13e>
 801646e:	9802      	ldr	r0, [sp, #8]
 8016470:	f7ec fce6 	bl	8002e40 <__aeabi_i2d>
 8016474:	002b      	movs	r3, r5
 8016476:	0022      	movs	r2, r4
 8016478:	f7e9 fff0 	bl	800045c <__aeabi_dcmpeq>
 801647c:	4243      	negs	r3, r0
 801647e:	4158      	adcs	r0, r3
 8016480:	9b02      	ldr	r3, [sp, #8]
 8016482:	1a1b      	subs	r3, r3, r0
 8016484:	9302      	str	r3, [sp, #8]
 8016486:	2301      	movs	r3, #1
 8016488:	9314      	str	r3, [sp, #80]	; 0x50
 801648a:	9b02      	ldr	r3, [sp, #8]
 801648c:	2b16      	cmp	r3, #22
 801648e:	d80f      	bhi.n	80164b0 <_dtoa_r+0x168>
 8016490:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016492:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016494:	00da      	lsls	r2, r3, #3
 8016496:	4b83      	ldr	r3, [pc, #524]	; (80166a4 <_dtoa_r+0x35c>)
 8016498:	189b      	adds	r3, r3, r2
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	f7e9 ffe3 	bl	8000468 <__aeabi_dcmplt>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d049      	beq.n	801653a <_dtoa_r+0x1f2>
 80164a6:	9b02      	ldr	r3, [sp, #8]
 80164a8:	3b01      	subs	r3, #1
 80164aa:	9302      	str	r3, [sp, #8]
 80164ac:	2300      	movs	r3, #0
 80164ae:	9314      	str	r3, [sp, #80]	; 0x50
 80164b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164b2:	1bdf      	subs	r7, r3, r7
 80164b4:	2300      	movs	r3, #0
 80164b6:	9309      	str	r3, [sp, #36]	; 0x24
 80164b8:	003b      	movs	r3, r7
 80164ba:	3b01      	subs	r3, #1
 80164bc:	930d      	str	r3, [sp, #52]	; 0x34
 80164be:	d504      	bpl.n	80164ca <_dtoa_r+0x182>
 80164c0:	2301      	movs	r3, #1
 80164c2:	1bdb      	subs	r3, r3, r7
 80164c4:	9309      	str	r3, [sp, #36]	; 0x24
 80164c6:	2300      	movs	r3, #0
 80164c8:	930d      	str	r3, [sp, #52]	; 0x34
 80164ca:	9b02      	ldr	r3, [sp, #8]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	db36      	blt.n	801653e <_dtoa_r+0x1f6>
 80164d0:	9a02      	ldr	r2, [sp, #8]
 80164d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164d4:	4694      	mov	ip, r2
 80164d6:	4463      	add	r3, ip
 80164d8:	930d      	str	r3, [sp, #52]	; 0x34
 80164da:	2300      	movs	r3, #0
 80164dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80164de:	930e      	str	r3, [sp, #56]	; 0x38
 80164e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80164e2:	2401      	movs	r4, #1
 80164e4:	2b09      	cmp	r3, #9
 80164e6:	d865      	bhi.n	80165b4 <_dtoa_r+0x26c>
 80164e8:	2b05      	cmp	r3, #5
 80164ea:	dd02      	ble.n	80164f2 <_dtoa_r+0x1aa>
 80164ec:	2400      	movs	r4, #0
 80164ee:	3b04      	subs	r3, #4
 80164f0:	9322      	str	r3, [sp, #136]	; 0x88
 80164f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80164f4:	1e98      	subs	r0, r3, #2
 80164f6:	2803      	cmp	r0, #3
 80164f8:	d865      	bhi.n	80165c6 <_dtoa_r+0x27e>
 80164fa:	f7e9 fe15 	bl	8000128 <__gnu_thumb1_case_uqi>
 80164fe:	3629      	.short	0x3629
 8016500:	5934      	.short	0x5934
 8016502:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016504:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016506:	189e      	adds	r6, r3, r2
 8016508:	4b67      	ldr	r3, [pc, #412]	; (80166a8 <_dtoa_r+0x360>)
 801650a:	18f2      	adds	r2, r6, r3
 801650c:	2a20      	cmp	r2, #32
 801650e:	dd0f      	ble.n	8016530 <_dtoa_r+0x1e8>
 8016510:	2340      	movs	r3, #64	; 0x40
 8016512:	0038      	movs	r0, r7
 8016514:	1a9b      	subs	r3, r3, r2
 8016516:	4098      	lsls	r0, r3
 8016518:	4b64      	ldr	r3, [pc, #400]	; (80166ac <_dtoa_r+0x364>)
 801651a:	18f3      	adds	r3, r6, r3
 801651c:	40dc      	lsrs	r4, r3
 801651e:	4320      	orrs	r0, r4
 8016520:	f7ec fcbe 	bl	8002ea0 <__aeabi_ui2d>
 8016524:	2301      	movs	r3, #1
 8016526:	4c62      	ldr	r4, [pc, #392]	; (80166b0 <_dtoa_r+0x368>)
 8016528:	1e77      	subs	r7, r6, #1
 801652a:	1909      	adds	r1, r1, r4
 801652c:	9316      	str	r3, [sp, #88]	; 0x58
 801652e:	e776      	b.n	801641e <_dtoa_r+0xd6>
 8016530:	2320      	movs	r3, #32
 8016532:	0020      	movs	r0, r4
 8016534:	1a9b      	subs	r3, r3, r2
 8016536:	4098      	lsls	r0, r3
 8016538:	e7f2      	b.n	8016520 <_dtoa_r+0x1d8>
 801653a:	9014      	str	r0, [sp, #80]	; 0x50
 801653c:	e7b8      	b.n	80164b0 <_dtoa_r+0x168>
 801653e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016540:	9a02      	ldr	r2, [sp, #8]
 8016542:	1a9b      	subs	r3, r3, r2
 8016544:	9309      	str	r3, [sp, #36]	; 0x24
 8016546:	4253      	negs	r3, r2
 8016548:	930e      	str	r3, [sp, #56]	; 0x38
 801654a:	2300      	movs	r3, #0
 801654c:	9313      	str	r3, [sp, #76]	; 0x4c
 801654e:	e7c7      	b.n	80164e0 <_dtoa_r+0x198>
 8016550:	2300      	movs	r3, #0
 8016552:	9312      	str	r3, [sp, #72]	; 0x48
 8016554:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016556:	2b00      	cmp	r3, #0
 8016558:	dc39      	bgt.n	80165ce <_dtoa_r+0x286>
 801655a:	2301      	movs	r3, #1
 801655c:	001a      	movs	r2, r3
 801655e:	930c      	str	r3, [sp, #48]	; 0x30
 8016560:	9308      	str	r3, [sp, #32]
 8016562:	9223      	str	r2, [sp, #140]	; 0x8c
 8016564:	e00d      	b.n	8016582 <_dtoa_r+0x23a>
 8016566:	2301      	movs	r3, #1
 8016568:	e7f3      	b.n	8016552 <_dtoa_r+0x20a>
 801656a:	2300      	movs	r3, #0
 801656c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801656e:	9312      	str	r3, [sp, #72]	; 0x48
 8016570:	4694      	mov	ip, r2
 8016572:	9b02      	ldr	r3, [sp, #8]
 8016574:	4463      	add	r3, ip
 8016576:	930c      	str	r3, [sp, #48]	; 0x30
 8016578:	3301      	adds	r3, #1
 801657a:	9308      	str	r3, [sp, #32]
 801657c:	2b00      	cmp	r3, #0
 801657e:	dc00      	bgt.n	8016582 <_dtoa_r+0x23a>
 8016580:	2301      	movs	r3, #1
 8016582:	2200      	movs	r2, #0
 8016584:	9903      	ldr	r1, [sp, #12]
 8016586:	644a      	str	r2, [r1, #68]	; 0x44
 8016588:	3204      	adds	r2, #4
 801658a:	0010      	movs	r0, r2
 801658c:	9903      	ldr	r1, [sp, #12]
 801658e:	3014      	adds	r0, #20
 8016590:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016592:	4298      	cmp	r0, r3
 8016594:	d91f      	bls.n	80165d6 <_dtoa_r+0x28e>
 8016596:	9803      	ldr	r0, [sp, #12]
 8016598:	f001 f98e 	bl	80178b8 <_Balloc>
 801659c:	9005      	str	r0, [sp, #20]
 801659e:	2800      	cmp	r0, #0
 80165a0:	d11e      	bne.n	80165e0 <_dtoa_r+0x298>
 80165a2:	21d5      	movs	r1, #213	; 0xd5
 80165a4:	0002      	movs	r2, r0
 80165a6:	4b43      	ldr	r3, [pc, #268]	; (80166b4 <_dtoa_r+0x36c>)
 80165a8:	0049      	lsls	r1, r1, #1
 80165aa:	4843      	ldr	r0, [pc, #268]	; (80166b8 <_dtoa_r+0x370>)
 80165ac:	f001 ff06 	bl	80183bc <__assert_func>
 80165b0:	2301      	movs	r3, #1
 80165b2:	e7db      	b.n	801656c <_dtoa_r+0x224>
 80165b4:	2300      	movs	r3, #0
 80165b6:	9412      	str	r4, [sp, #72]	; 0x48
 80165b8:	9322      	str	r3, [sp, #136]	; 0x88
 80165ba:	3b01      	subs	r3, #1
 80165bc:	930c      	str	r3, [sp, #48]	; 0x30
 80165be:	9308      	str	r3, [sp, #32]
 80165c0:	2200      	movs	r2, #0
 80165c2:	3313      	adds	r3, #19
 80165c4:	e7cd      	b.n	8016562 <_dtoa_r+0x21a>
 80165c6:	2301      	movs	r3, #1
 80165c8:	9312      	str	r3, [sp, #72]	; 0x48
 80165ca:	3b02      	subs	r3, #2
 80165cc:	e7f6      	b.n	80165bc <_dtoa_r+0x274>
 80165ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80165d0:	930c      	str	r3, [sp, #48]	; 0x30
 80165d2:	9308      	str	r3, [sp, #32]
 80165d4:	e7d5      	b.n	8016582 <_dtoa_r+0x23a>
 80165d6:	9803      	ldr	r0, [sp, #12]
 80165d8:	3101      	adds	r1, #1
 80165da:	6441      	str	r1, [r0, #68]	; 0x44
 80165dc:	0052      	lsls	r2, r2, #1
 80165de:	e7d4      	b.n	801658a <_dtoa_r+0x242>
 80165e0:	9b03      	ldr	r3, [sp, #12]
 80165e2:	9a05      	ldr	r2, [sp, #20]
 80165e4:	641a      	str	r2, [r3, #64]	; 0x40
 80165e6:	9b08      	ldr	r3, [sp, #32]
 80165e8:	2b0e      	cmp	r3, #14
 80165ea:	d900      	bls.n	80165ee <_dtoa_r+0x2a6>
 80165ec:	e0df      	b.n	80167ae <_dtoa_r+0x466>
 80165ee:	2c00      	cmp	r4, #0
 80165f0:	d100      	bne.n	80165f4 <_dtoa_r+0x2ac>
 80165f2:	e0dc      	b.n	80167ae <_dtoa_r+0x466>
 80165f4:	9b02      	ldr	r3, [sp, #8]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	dd62      	ble.n	80166c0 <_dtoa_r+0x378>
 80165fa:	001a      	movs	r2, r3
 80165fc:	210f      	movs	r1, #15
 80165fe:	4b29      	ldr	r3, [pc, #164]	; (80166a4 <_dtoa_r+0x35c>)
 8016600:	400a      	ands	r2, r1
 8016602:	00d2      	lsls	r2, r2, #3
 8016604:	189b      	adds	r3, r3, r2
 8016606:	681d      	ldr	r5, [r3, #0]
 8016608:	685e      	ldr	r6, [r3, #4]
 801660a:	9b02      	ldr	r3, [sp, #8]
 801660c:	2702      	movs	r7, #2
 801660e:	111c      	asrs	r4, r3, #4
 8016610:	05db      	lsls	r3, r3, #23
 8016612:	d50a      	bpl.n	801662a <_dtoa_r+0x2e2>
 8016614:	4b29      	ldr	r3, [pc, #164]	; (80166bc <_dtoa_r+0x374>)
 8016616:	400c      	ands	r4, r1
 8016618:	6a1a      	ldr	r2, [r3, #32]
 801661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801661e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016620:	f7eb f9b6 	bl	8001990 <__aeabi_ddiv>
 8016624:	900a      	str	r0, [sp, #40]	; 0x28
 8016626:	910b      	str	r1, [sp, #44]	; 0x2c
 8016628:	3701      	adds	r7, #1
 801662a:	4b24      	ldr	r3, [pc, #144]	; (80166bc <_dtoa_r+0x374>)
 801662c:	9306      	str	r3, [sp, #24]
 801662e:	2c00      	cmp	r4, #0
 8016630:	d108      	bne.n	8016644 <_dtoa_r+0x2fc>
 8016632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016636:	002a      	movs	r2, r5
 8016638:	0033      	movs	r3, r6
 801663a:	f7eb f9a9 	bl	8001990 <__aeabi_ddiv>
 801663e:	900a      	str	r0, [sp, #40]	; 0x28
 8016640:	910b      	str	r1, [sp, #44]	; 0x2c
 8016642:	e058      	b.n	80166f6 <_dtoa_r+0x3ae>
 8016644:	2301      	movs	r3, #1
 8016646:	421c      	tst	r4, r3
 8016648:	d009      	beq.n	801665e <_dtoa_r+0x316>
 801664a:	18ff      	adds	r7, r7, r3
 801664c:	9b06      	ldr	r3, [sp, #24]
 801664e:	0028      	movs	r0, r5
 8016650:	681a      	ldr	r2, [r3, #0]
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	0031      	movs	r1, r6
 8016656:	f7eb fda1 	bl	800219c <__aeabi_dmul>
 801665a:	0005      	movs	r5, r0
 801665c:	000e      	movs	r6, r1
 801665e:	9b06      	ldr	r3, [sp, #24]
 8016660:	1064      	asrs	r4, r4, #1
 8016662:	3308      	adds	r3, #8
 8016664:	e7e2      	b.n	801662c <_dtoa_r+0x2e4>
 8016666:	46c0      	nop			; (mov r8, r8)
 8016668:	7ff00000 	.word	0x7ff00000
 801666c:	0000270f 	.word	0x0000270f
 8016670:	0801cd0c 	.word	0x0801cd0c
 8016674:	0801cd0f 	.word	0x0801cd0f
 8016678:	0801ccea 	.word	0x0801ccea
 801667c:	0801cceb 	.word	0x0801cceb
 8016680:	3ff00000 	.word	0x3ff00000
 8016684:	fffffc01 	.word	0xfffffc01
 8016688:	3ff80000 	.word	0x3ff80000
 801668c:	636f4361 	.word	0x636f4361
 8016690:	3fd287a7 	.word	0x3fd287a7
 8016694:	8b60c8b3 	.word	0x8b60c8b3
 8016698:	3fc68a28 	.word	0x3fc68a28
 801669c:	509f79fb 	.word	0x509f79fb
 80166a0:	3fd34413 	.word	0x3fd34413
 80166a4:	0801ce90 	.word	0x0801ce90
 80166a8:	00000432 	.word	0x00000432
 80166ac:	00000412 	.word	0x00000412
 80166b0:	fe100000 	.word	0xfe100000
 80166b4:	0801cd19 	.word	0x0801cd19
 80166b8:	0801cd2a 	.word	0x0801cd2a
 80166bc:	0801ce68 	.word	0x0801ce68
 80166c0:	9b02      	ldr	r3, [sp, #8]
 80166c2:	2702      	movs	r7, #2
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d016      	beq.n	80166f6 <_dtoa_r+0x3ae>
 80166c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80166ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80166cc:	425c      	negs	r4, r3
 80166ce:	230f      	movs	r3, #15
 80166d0:	4ad4      	ldr	r2, [pc, #848]	; (8016a24 <_dtoa_r+0x6dc>)
 80166d2:	4023      	ands	r3, r4
 80166d4:	00db      	lsls	r3, r3, #3
 80166d6:	18d3      	adds	r3, r2, r3
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	f7eb fd5e 	bl	800219c <__aeabi_dmul>
 80166e0:	2601      	movs	r6, #1
 80166e2:	2300      	movs	r3, #0
 80166e4:	900a      	str	r0, [sp, #40]	; 0x28
 80166e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80166e8:	4dcf      	ldr	r5, [pc, #828]	; (8016a28 <_dtoa_r+0x6e0>)
 80166ea:	1124      	asrs	r4, r4, #4
 80166ec:	2c00      	cmp	r4, #0
 80166ee:	d000      	beq.n	80166f2 <_dtoa_r+0x3aa>
 80166f0:	e08d      	b.n	801680e <_dtoa_r+0x4c6>
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d1a3      	bne.n	801663e <_dtoa_r+0x2f6>
 80166f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d100      	bne.n	80166fe <_dtoa_r+0x3b6>
 80166fc:	e092      	b.n	8016824 <_dtoa_r+0x4dc>
 80166fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016700:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016702:	2200      	movs	r2, #0
 8016704:	0020      	movs	r0, r4
 8016706:	0029      	movs	r1, r5
 8016708:	4bc8      	ldr	r3, [pc, #800]	; (8016a2c <_dtoa_r+0x6e4>)
 801670a:	f7e9 fead 	bl	8000468 <__aeabi_dcmplt>
 801670e:	2800      	cmp	r0, #0
 8016710:	d100      	bne.n	8016714 <_dtoa_r+0x3cc>
 8016712:	e087      	b.n	8016824 <_dtoa_r+0x4dc>
 8016714:	9b08      	ldr	r3, [sp, #32]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d100      	bne.n	801671c <_dtoa_r+0x3d4>
 801671a:	e083      	b.n	8016824 <_dtoa_r+0x4dc>
 801671c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801671e:	2b00      	cmp	r3, #0
 8016720:	dd41      	ble.n	80167a6 <_dtoa_r+0x45e>
 8016722:	9b02      	ldr	r3, [sp, #8]
 8016724:	2200      	movs	r2, #0
 8016726:	3b01      	subs	r3, #1
 8016728:	930f      	str	r3, [sp, #60]	; 0x3c
 801672a:	0020      	movs	r0, r4
 801672c:	0029      	movs	r1, r5
 801672e:	4bc0      	ldr	r3, [pc, #768]	; (8016a30 <_dtoa_r+0x6e8>)
 8016730:	f7eb fd34 	bl	800219c <__aeabi_dmul>
 8016734:	900a      	str	r0, [sp, #40]	; 0x28
 8016736:	910b      	str	r1, [sp, #44]	; 0x2c
 8016738:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801673a:	3701      	adds	r7, #1
 801673c:	0038      	movs	r0, r7
 801673e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016740:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016742:	f7ec fb7d 	bl	8002e40 <__aeabi_i2d>
 8016746:	0022      	movs	r2, r4
 8016748:	002b      	movs	r3, r5
 801674a:	f7eb fd27 	bl	800219c <__aeabi_dmul>
 801674e:	2200      	movs	r2, #0
 8016750:	4bb8      	ldr	r3, [pc, #736]	; (8016a34 <_dtoa_r+0x6ec>)
 8016752:	f7ea fdb3 	bl	80012bc <__aeabi_dadd>
 8016756:	900a      	str	r0, [sp, #40]	; 0x28
 8016758:	910b      	str	r1, [sp, #44]	; 0x2c
 801675a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801675c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801675e:	9206      	str	r2, [sp, #24]
 8016760:	9307      	str	r3, [sp, #28]
 8016762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016764:	4ab4      	ldr	r2, [pc, #720]	; (8016a38 <_dtoa_r+0x6f0>)
 8016766:	189f      	adds	r7, r3, r2
 8016768:	9707      	str	r7, [sp, #28]
 801676a:	2e00      	cmp	r6, #0
 801676c:	d15e      	bne.n	801682c <_dtoa_r+0x4e4>
 801676e:	2200      	movs	r2, #0
 8016770:	0020      	movs	r0, r4
 8016772:	0029      	movs	r1, r5
 8016774:	4bb1      	ldr	r3, [pc, #708]	; (8016a3c <_dtoa_r+0x6f4>)
 8016776:	f7eb ff7d 	bl	8002674 <__aeabi_dsub>
 801677a:	003b      	movs	r3, r7
 801677c:	9a06      	ldr	r2, [sp, #24]
 801677e:	0004      	movs	r4, r0
 8016780:	000d      	movs	r5, r1
 8016782:	f7e9 fe85 	bl	8000490 <__aeabi_dcmpgt>
 8016786:	2800      	cmp	r0, #0
 8016788:	d000      	beq.n	801678c <_dtoa_r+0x444>
 801678a:	e2aa      	b.n	8016ce2 <_dtoa_r+0x99a>
 801678c:	48ac      	ldr	r0, [pc, #688]	; (8016a40 <_dtoa_r+0x6f8>)
 801678e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016790:	4684      	mov	ip, r0
 8016792:	4461      	add	r1, ip
 8016794:	000b      	movs	r3, r1
 8016796:	0020      	movs	r0, r4
 8016798:	0029      	movs	r1, r5
 801679a:	9a06      	ldr	r2, [sp, #24]
 801679c:	f7e9 fe64 	bl	8000468 <__aeabi_dcmplt>
 80167a0:	2800      	cmp	r0, #0
 80167a2:	d000      	beq.n	80167a6 <_dtoa_r+0x45e>
 80167a4:	e29b      	b.n	8016cde <_dtoa_r+0x996>
 80167a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80167aa:	930a      	str	r3, [sp, #40]	; 0x28
 80167ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80167ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	da00      	bge.n	80167b6 <_dtoa_r+0x46e>
 80167b4:	e16a      	b.n	8016a8c <_dtoa_r+0x744>
 80167b6:	9a02      	ldr	r2, [sp, #8]
 80167b8:	2a0e      	cmp	r2, #14
 80167ba:	dd00      	ble.n	80167be <_dtoa_r+0x476>
 80167bc:	e166      	b.n	8016a8c <_dtoa_r+0x744>
 80167be:	4b99      	ldr	r3, [pc, #612]	; (8016a24 <_dtoa_r+0x6dc>)
 80167c0:	00d2      	lsls	r2, r2, #3
 80167c2:	189b      	adds	r3, r3, r2
 80167c4:	681e      	ldr	r6, [r3, #0]
 80167c6:	685f      	ldr	r7, [r3, #4]
 80167c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	db00      	blt.n	80167d0 <_dtoa_r+0x488>
 80167ce:	e0d7      	b.n	8016980 <_dtoa_r+0x638>
 80167d0:	9b08      	ldr	r3, [sp, #32]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	dd00      	ble.n	80167d8 <_dtoa_r+0x490>
 80167d6:	e0d3      	b.n	8016980 <_dtoa_r+0x638>
 80167d8:	d000      	beq.n	80167dc <_dtoa_r+0x494>
 80167da:	e27f      	b.n	8016cdc <_dtoa_r+0x994>
 80167dc:	2200      	movs	r2, #0
 80167de:	0030      	movs	r0, r6
 80167e0:	0039      	movs	r1, r7
 80167e2:	4b96      	ldr	r3, [pc, #600]	; (8016a3c <_dtoa_r+0x6f4>)
 80167e4:	f7eb fcda 	bl	800219c <__aeabi_dmul>
 80167e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80167ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167ec:	f7e9 fe5a 	bl	80004a4 <__aeabi_dcmpge>
 80167f0:	9e08      	ldr	r6, [sp, #32]
 80167f2:	0037      	movs	r7, r6
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d000      	beq.n	80167fa <_dtoa_r+0x4b2>
 80167f8:	e256      	b.n	8016ca8 <_dtoa_r+0x960>
 80167fa:	9b05      	ldr	r3, [sp, #20]
 80167fc:	9a05      	ldr	r2, [sp, #20]
 80167fe:	3301      	adds	r3, #1
 8016800:	9306      	str	r3, [sp, #24]
 8016802:	2331      	movs	r3, #49	; 0x31
 8016804:	7013      	strb	r3, [r2, #0]
 8016806:	9b02      	ldr	r3, [sp, #8]
 8016808:	3301      	adds	r3, #1
 801680a:	9302      	str	r3, [sp, #8]
 801680c:	e251      	b.n	8016cb2 <_dtoa_r+0x96a>
 801680e:	4234      	tst	r4, r6
 8016810:	d005      	beq.n	801681e <_dtoa_r+0x4d6>
 8016812:	682a      	ldr	r2, [r5, #0]
 8016814:	686b      	ldr	r3, [r5, #4]
 8016816:	f7eb fcc1 	bl	800219c <__aeabi_dmul>
 801681a:	0033      	movs	r3, r6
 801681c:	3701      	adds	r7, #1
 801681e:	1064      	asrs	r4, r4, #1
 8016820:	3508      	adds	r5, #8
 8016822:	e763      	b.n	80166ec <_dtoa_r+0x3a4>
 8016824:	9b02      	ldr	r3, [sp, #8]
 8016826:	9e08      	ldr	r6, [sp, #32]
 8016828:	930f      	str	r3, [sp, #60]	; 0x3c
 801682a:	e787      	b.n	801673c <_dtoa_r+0x3f4>
 801682c:	4b7d      	ldr	r3, [pc, #500]	; (8016a24 <_dtoa_r+0x6dc>)
 801682e:	1e72      	subs	r2, r6, #1
 8016830:	00d2      	lsls	r2, r2, #3
 8016832:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016834:	189b      	adds	r3, r3, r2
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	2900      	cmp	r1, #0
 801683c:	d04e      	beq.n	80168dc <_dtoa_r+0x594>
 801683e:	2000      	movs	r0, #0
 8016840:	4980      	ldr	r1, [pc, #512]	; (8016a44 <_dtoa_r+0x6fc>)
 8016842:	f7eb f8a5 	bl	8001990 <__aeabi_ddiv>
 8016846:	9a06      	ldr	r2, [sp, #24]
 8016848:	9b07      	ldr	r3, [sp, #28]
 801684a:	f7eb ff13 	bl	8002674 <__aeabi_dsub>
 801684e:	9b05      	ldr	r3, [sp, #20]
 8016850:	900a      	str	r0, [sp, #40]	; 0x28
 8016852:	910b      	str	r1, [sp, #44]	; 0x2c
 8016854:	9315      	str	r3, [sp, #84]	; 0x54
 8016856:	18f3      	adds	r3, r6, r3
 8016858:	9319      	str	r3, [sp, #100]	; 0x64
 801685a:	0020      	movs	r0, r4
 801685c:	0029      	movs	r1, r5
 801685e:	f7ec fab9 	bl	8002dd4 <__aeabi_d2iz>
 8016862:	9017      	str	r0, [sp, #92]	; 0x5c
 8016864:	f7ec faec 	bl	8002e40 <__aeabi_i2d>
 8016868:	0002      	movs	r2, r0
 801686a:	000b      	movs	r3, r1
 801686c:	0020      	movs	r0, r4
 801686e:	0029      	movs	r1, r5
 8016870:	f7eb ff00 	bl	8002674 <__aeabi_dsub>
 8016874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016876:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8016878:	3301      	adds	r3, #1
 801687a:	9306      	str	r3, [sp, #24]
 801687c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801687e:	3430      	adds	r4, #48	; 0x30
 8016880:	701c      	strb	r4, [r3, #0]
 8016882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016886:	0006      	movs	r6, r0
 8016888:	000f      	movs	r7, r1
 801688a:	f7e9 fded 	bl	8000468 <__aeabi_dcmplt>
 801688e:	2800      	cmp	r0, #0
 8016890:	d16c      	bne.n	801696c <_dtoa_r+0x624>
 8016892:	0032      	movs	r2, r6
 8016894:	003b      	movs	r3, r7
 8016896:	2000      	movs	r0, #0
 8016898:	4964      	ldr	r1, [pc, #400]	; (8016a2c <_dtoa_r+0x6e4>)
 801689a:	f7eb feeb 	bl	8002674 <__aeabi_dsub>
 801689e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168a2:	f7e9 fde1 	bl	8000468 <__aeabi_dcmplt>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d000      	beq.n	80168ac <_dtoa_r+0x564>
 80168aa:	e0cf      	b.n	8016a4c <_dtoa_r+0x704>
 80168ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80168ae:	9a06      	ldr	r2, [sp, #24]
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d100      	bne.n	80168b6 <_dtoa_r+0x56e>
 80168b4:	e777      	b.n	80167a6 <_dtoa_r+0x45e>
 80168b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168ba:	2200      	movs	r2, #0
 80168bc:	4b5c      	ldr	r3, [pc, #368]	; (8016a30 <_dtoa_r+0x6e8>)
 80168be:	f7eb fc6d 	bl	800219c <__aeabi_dmul>
 80168c2:	4b5b      	ldr	r3, [pc, #364]	; (8016a30 <_dtoa_r+0x6e8>)
 80168c4:	900a      	str	r0, [sp, #40]	; 0x28
 80168c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80168c8:	2200      	movs	r2, #0
 80168ca:	0030      	movs	r0, r6
 80168cc:	0039      	movs	r1, r7
 80168ce:	f7eb fc65 	bl	800219c <__aeabi_dmul>
 80168d2:	9b06      	ldr	r3, [sp, #24]
 80168d4:	0004      	movs	r4, r0
 80168d6:	000d      	movs	r5, r1
 80168d8:	9315      	str	r3, [sp, #84]	; 0x54
 80168da:	e7be      	b.n	801685a <_dtoa_r+0x512>
 80168dc:	9806      	ldr	r0, [sp, #24]
 80168de:	9907      	ldr	r1, [sp, #28]
 80168e0:	f7eb fc5c 	bl	800219c <__aeabi_dmul>
 80168e4:	9f05      	ldr	r7, [sp, #20]
 80168e6:	900a      	str	r0, [sp, #40]	; 0x28
 80168e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80168ea:	19bb      	adds	r3, r7, r6
 80168ec:	9315      	str	r3, [sp, #84]	; 0x54
 80168ee:	0029      	movs	r1, r5
 80168f0:	0020      	movs	r0, r4
 80168f2:	f7ec fa6f 	bl	8002dd4 <__aeabi_d2iz>
 80168f6:	9006      	str	r0, [sp, #24]
 80168f8:	f7ec faa2 	bl	8002e40 <__aeabi_i2d>
 80168fc:	000b      	movs	r3, r1
 80168fe:	0002      	movs	r2, r0
 8016900:	0029      	movs	r1, r5
 8016902:	0020      	movs	r0, r4
 8016904:	f7eb feb6 	bl	8002674 <__aeabi_dsub>
 8016908:	9b06      	ldr	r3, [sp, #24]
 801690a:	0004      	movs	r4, r0
 801690c:	3330      	adds	r3, #48	; 0x30
 801690e:	703b      	strb	r3, [r7, #0]
 8016910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016912:	3701      	adds	r7, #1
 8016914:	000d      	movs	r5, r1
 8016916:	429f      	cmp	r7, r3
 8016918:	d12b      	bne.n	8016972 <_dtoa_r+0x62a>
 801691a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801691c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801691e:	9b05      	ldr	r3, [sp, #20]
 8016920:	2200      	movs	r2, #0
 8016922:	199b      	adds	r3, r3, r6
 8016924:	9306      	str	r3, [sp, #24]
 8016926:	4b47      	ldr	r3, [pc, #284]	; (8016a44 <_dtoa_r+0x6fc>)
 8016928:	f7ea fcc8 	bl	80012bc <__aeabi_dadd>
 801692c:	0002      	movs	r2, r0
 801692e:	000b      	movs	r3, r1
 8016930:	0020      	movs	r0, r4
 8016932:	0029      	movs	r1, r5
 8016934:	f7e9 fdac 	bl	8000490 <__aeabi_dcmpgt>
 8016938:	2800      	cmp	r0, #0
 801693a:	d000      	beq.n	801693e <_dtoa_r+0x5f6>
 801693c:	e086      	b.n	8016a4c <_dtoa_r+0x704>
 801693e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016942:	2000      	movs	r0, #0
 8016944:	493f      	ldr	r1, [pc, #252]	; (8016a44 <_dtoa_r+0x6fc>)
 8016946:	f7eb fe95 	bl	8002674 <__aeabi_dsub>
 801694a:	0002      	movs	r2, r0
 801694c:	000b      	movs	r3, r1
 801694e:	0020      	movs	r0, r4
 8016950:	0029      	movs	r1, r5
 8016952:	f7e9 fd89 	bl	8000468 <__aeabi_dcmplt>
 8016956:	2800      	cmp	r0, #0
 8016958:	d100      	bne.n	801695c <_dtoa_r+0x614>
 801695a:	e724      	b.n	80167a6 <_dtoa_r+0x45e>
 801695c:	9b06      	ldr	r3, [sp, #24]
 801695e:	001a      	movs	r2, r3
 8016960:	3a01      	subs	r2, #1
 8016962:	9206      	str	r2, [sp, #24]
 8016964:	7812      	ldrb	r2, [r2, #0]
 8016966:	2a30      	cmp	r2, #48	; 0x30
 8016968:	d0f8      	beq.n	801695c <_dtoa_r+0x614>
 801696a:	9306      	str	r3, [sp, #24]
 801696c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801696e:	9302      	str	r3, [sp, #8]
 8016970:	e046      	b.n	8016a00 <_dtoa_r+0x6b8>
 8016972:	2200      	movs	r2, #0
 8016974:	4b2e      	ldr	r3, [pc, #184]	; (8016a30 <_dtoa_r+0x6e8>)
 8016976:	f7eb fc11 	bl	800219c <__aeabi_dmul>
 801697a:	0004      	movs	r4, r0
 801697c:	000d      	movs	r5, r1
 801697e:	e7b6      	b.n	80168ee <_dtoa_r+0x5a6>
 8016980:	9b05      	ldr	r3, [sp, #20]
 8016982:	9a05      	ldr	r2, [sp, #20]
 8016984:	9309      	str	r3, [sp, #36]	; 0x24
 8016986:	9b08      	ldr	r3, [sp, #32]
 8016988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801698a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801698c:	3b01      	subs	r3, #1
 801698e:	189b      	adds	r3, r3, r2
 8016990:	930a      	str	r3, [sp, #40]	; 0x28
 8016992:	0032      	movs	r2, r6
 8016994:	003b      	movs	r3, r7
 8016996:	0020      	movs	r0, r4
 8016998:	0029      	movs	r1, r5
 801699a:	f7ea fff9 	bl	8001990 <__aeabi_ddiv>
 801699e:	f7ec fa19 	bl	8002dd4 <__aeabi_d2iz>
 80169a2:	9008      	str	r0, [sp, #32]
 80169a4:	f7ec fa4c 	bl	8002e40 <__aeabi_i2d>
 80169a8:	0032      	movs	r2, r6
 80169aa:	003b      	movs	r3, r7
 80169ac:	f7eb fbf6 	bl	800219c <__aeabi_dmul>
 80169b0:	0002      	movs	r2, r0
 80169b2:	000b      	movs	r3, r1
 80169b4:	0020      	movs	r0, r4
 80169b6:	0029      	movs	r1, r5
 80169b8:	f7eb fe5c 	bl	8002674 <__aeabi_dsub>
 80169bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169be:	001a      	movs	r2, r3
 80169c0:	3201      	adds	r2, #1
 80169c2:	9209      	str	r2, [sp, #36]	; 0x24
 80169c4:	9206      	str	r2, [sp, #24]
 80169c6:	9a08      	ldr	r2, [sp, #32]
 80169c8:	3230      	adds	r2, #48	; 0x30
 80169ca:	701a      	strb	r2, [r3, #0]
 80169cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d14f      	bne.n	8016a72 <_dtoa_r+0x72a>
 80169d2:	0002      	movs	r2, r0
 80169d4:	000b      	movs	r3, r1
 80169d6:	f7ea fc71 	bl	80012bc <__aeabi_dadd>
 80169da:	0032      	movs	r2, r6
 80169dc:	003b      	movs	r3, r7
 80169de:	0004      	movs	r4, r0
 80169e0:	000d      	movs	r5, r1
 80169e2:	f7e9 fd55 	bl	8000490 <__aeabi_dcmpgt>
 80169e6:	2800      	cmp	r0, #0
 80169e8:	d12e      	bne.n	8016a48 <_dtoa_r+0x700>
 80169ea:	0032      	movs	r2, r6
 80169ec:	003b      	movs	r3, r7
 80169ee:	0020      	movs	r0, r4
 80169f0:	0029      	movs	r1, r5
 80169f2:	f7e9 fd33 	bl	800045c <__aeabi_dcmpeq>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	d002      	beq.n	8016a00 <_dtoa_r+0x6b8>
 80169fa:	9b08      	ldr	r3, [sp, #32]
 80169fc:	07db      	lsls	r3, r3, #31
 80169fe:	d423      	bmi.n	8016a48 <_dtoa_r+0x700>
 8016a00:	9803      	ldr	r0, [sp, #12]
 8016a02:	9904      	ldr	r1, [sp, #16]
 8016a04:	f000 ff80 	bl	8017908 <_Bfree>
 8016a08:	2300      	movs	r3, #0
 8016a0a:	9a06      	ldr	r2, [sp, #24]
 8016a0c:	9802      	ldr	r0, [sp, #8]
 8016a0e:	7013      	strb	r3, [r2, #0]
 8016a10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016a12:	3001      	adds	r0, #1
 8016a14:	6018      	str	r0, [r3, #0]
 8016a16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d100      	bne.n	8016a1e <_dtoa_r+0x6d6>
 8016a1c:	e4c8      	b.n	80163b0 <_dtoa_r+0x68>
 8016a1e:	601a      	str	r2, [r3, #0]
 8016a20:	e4c6      	b.n	80163b0 <_dtoa_r+0x68>
 8016a22:	46c0      	nop			; (mov r8, r8)
 8016a24:	0801ce90 	.word	0x0801ce90
 8016a28:	0801ce68 	.word	0x0801ce68
 8016a2c:	3ff00000 	.word	0x3ff00000
 8016a30:	40240000 	.word	0x40240000
 8016a34:	401c0000 	.word	0x401c0000
 8016a38:	fcc00000 	.word	0xfcc00000
 8016a3c:	40140000 	.word	0x40140000
 8016a40:	7cc00000 	.word	0x7cc00000
 8016a44:	3fe00000 	.word	0x3fe00000
 8016a48:	9b02      	ldr	r3, [sp, #8]
 8016a4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a4c:	9b06      	ldr	r3, [sp, #24]
 8016a4e:	9306      	str	r3, [sp, #24]
 8016a50:	3b01      	subs	r3, #1
 8016a52:	781a      	ldrb	r2, [r3, #0]
 8016a54:	2a39      	cmp	r2, #57	; 0x39
 8016a56:	d108      	bne.n	8016a6a <_dtoa_r+0x722>
 8016a58:	9a05      	ldr	r2, [sp, #20]
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d1f7      	bne.n	8016a4e <_dtoa_r+0x706>
 8016a5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a60:	9905      	ldr	r1, [sp, #20]
 8016a62:	3201      	adds	r2, #1
 8016a64:	920f      	str	r2, [sp, #60]	; 0x3c
 8016a66:	2230      	movs	r2, #48	; 0x30
 8016a68:	700a      	strb	r2, [r1, #0]
 8016a6a:	781a      	ldrb	r2, [r3, #0]
 8016a6c:	3201      	adds	r2, #1
 8016a6e:	701a      	strb	r2, [r3, #0]
 8016a70:	e77c      	b.n	801696c <_dtoa_r+0x624>
 8016a72:	2200      	movs	r2, #0
 8016a74:	4baa      	ldr	r3, [pc, #680]	; (8016d20 <_dtoa_r+0x9d8>)
 8016a76:	f7eb fb91 	bl	800219c <__aeabi_dmul>
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	0004      	movs	r4, r0
 8016a80:	000d      	movs	r5, r1
 8016a82:	f7e9 fceb 	bl	800045c <__aeabi_dcmpeq>
 8016a86:	2800      	cmp	r0, #0
 8016a88:	d083      	beq.n	8016992 <_dtoa_r+0x64a>
 8016a8a:	e7b9      	b.n	8016a00 <_dtoa_r+0x6b8>
 8016a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a8e:	2a00      	cmp	r2, #0
 8016a90:	d100      	bne.n	8016a94 <_dtoa_r+0x74c>
 8016a92:	e08a      	b.n	8016baa <_dtoa_r+0x862>
 8016a94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016a96:	2a01      	cmp	r2, #1
 8016a98:	dc6e      	bgt.n	8016b78 <_dtoa_r+0x830>
 8016a9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016a9c:	2a00      	cmp	r2, #0
 8016a9e:	d067      	beq.n	8016b70 <_dtoa_r+0x828>
 8016aa0:	4aa0      	ldr	r2, [pc, #640]	; (8016d24 <_dtoa_r+0x9dc>)
 8016aa2:	189b      	adds	r3, r3, r2
 8016aa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016aa6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016aaa:	2101      	movs	r1, #1
 8016aac:	18d2      	adds	r2, r2, r3
 8016aae:	9209      	str	r2, [sp, #36]	; 0x24
 8016ab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ab2:	9803      	ldr	r0, [sp, #12]
 8016ab4:	18d3      	adds	r3, r2, r3
 8016ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8016ab8:	f001 f808 	bl	8017acc <__i2b>
 8016abc:	0007      	movs	r7, r0
 8016abe:	2c00      	cmp	r4, #0
 8016ac0:	dd0e      	ble.n	8016ae0 <_dtoa_r+0x798>
 8016ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	dd0b      	ble.n	8016ae0 <_dtoa_r+0x798>
 8016ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016aca:	0023      	movs	r3, r4
 8016acc:	4294      	cmp	r4, r2
 8016ace:	dd00      	ble.n	8016ad2 <_dtoa_r+0x78a>
 8016ad0:	0013      	movs	r3, r2
 8016ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ad4:	1ae4      	subs	r4, r4, r3
 8016ad6:	1ad2      	subs	r2, r2, r3
 8016ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8016ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016adc:	1ad3      	subs	r3, r2, r3
 8016ade:	930d      	str	r3, [sp, #52]	; 0x34
 8016ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d01e      	beq.n	8016b24 <_dtoa_r+0x7dc>
 8016ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d062      	beq.n	8016bb2 <_dtoa_r+0x86a>
 8016aec:	2d00      	cmp	r5, #0
 8016aee:	dd10      	ble.n	8016b12 <_dtoa_r+0x7ca>
 8016af0:	0039      	movs	r1, r7
 8016af2:	002a      	movs	r2, r5
 8016af4:	9803      	ldr	r0, [sp, #12]
 8016af6:	f001 f8af 	bl	8017c58 <__pow5mult>
 8016afa:	9a04      	ldr	r2, [sp, #16]
 8016afc:	0001      	movs	r1, r0
 8016afe:	0007      	movs	r7, r0
 8016b00:	9803      	ldr	r0, [sp, #12]
 8016b02:	f000 fff9 	bl	8017af8 <__multiply>
 8016b06:	0006      	movs	r6, r0
 8016b08:	9904      	ldr	r1, [sp, #16]
 8016b0a:	9803      	ldr	r0, [sp, #12]
 8016b0c:	f000 fefc 	bl	8017908 <_Bfree>
 8016b10:	9604      	str	r6, [sp, #16]
 8016b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b14:	1b5a      	subs	r2, r3, r5
 8016b16:	42ab      	cmp	r3, r5
 8016b18:	d004      	beq.n	8016b24 <_dtoa_r+0x7dc>
 8016b1a:	9904      	ldr	r1, [sp, #16]
 8016b1c:	9803      	ldr	r0, [sp, #12]
 8016b1e:	f001 f89b 	bl	8017c58 <__pow5mult>
 8016b22:	9004      	str	r0, [sp, #16]
 8016b24:	2101      	movs	r1, #1
 8016b26:	9803      	ldr	r0, [sp, #12]
 8016b28:	f000 ffd0 	bl	8017acc <__i2b>
 8016b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b2e:	0006      	movs	r6, r0
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	dd40      	ble.n	8016bb6 <_dtoa_r+0x86e>
 8016b34:	001a      	movs	r2, r3
 8016b36:	0001      	movs	r1, r0
 8016b38:	9803      	ldr	r0, [sp, #12]
 8016b3a:	f001 f88d 	bl	8017c58 <__pow5mult>
 8016b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016b40:	0006      	movs	r6, r0
 8016b42:	2500      	movs	r5, #0
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	dc3e      	bgt.n	8016bc6 <_dtoa_r+0x87e>
 8016b48:	2500      	movs	r5, #0
 8016b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b4c:	42ab      	cmp	r3, r5
 8016b4e:	d136      	bne.n	8016bbe <_dtoa_r+0x876>
 8016b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b52:	031b      	lsls	r3, r3, #12
 8016b54:	42ab      	cmp	r3, r5
 8016b56:	d132      	bne.n	8016bbe <_dtoa_r+0x876>
 8016b58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b5c:	4213      	tst	r3, r2
 8016b5e:	d02e      	beq.n	8016bbe <_dtoa_r+0x876>
 8016b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b62:	3501      	adds	r5, #1
 8016b64:	3301      	adds	r3, #1
 8016b66:	9309      	str	r3, [sp, #36]	; 0x24
 8016b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8016b6e:	e026      	b.n	8016bbe <_dtoa_r+0x876>
 8016b70:	2336      	movs	r3, #54	; 0x36
 8016b72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016b74:	1a9b      	subs	r3, r3, r2
 8016b76:	e795      	b.n	8016aa4 <_dtoa_r+0x75c>
 8016b78:	9b08      	ldr	r3, [sp, #32]
 8016b7a:	1e5d      	subs	r5, r3, #1
 8016b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b7e:	42ab      	cmp	r3, r5
 8016b80:	db08      	blt.n	8016b94 <_dtoa_r+0x84c>
 8016b82:	1b5d      	subs	r5, r3, r5
 8016b84:	9b08      	ldr	r3, [sp, #32]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	da0c      	bge.n	8016ba4 <_dtoa_r+0x85c>
 8016b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b8c:	9a08      	ldr	r2, [sp, #32]
 8016b8e:	1a9c      	subs	r4, r3, r2
 8016b90:	2300      	movs	r3, #0
 8016b92:	e789      	b.n	8016aa8 <_dtoa_r+0x760>
 8016b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b98:	1aeb      	subs	r3, r5, r3
 8016b9a:	18d3      	adds	r3, r2, r3
 8016b9c:	950e      	str	r5, [sp, #56]	; 0x38
 8016b9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ba0:	2500      	movs	r5, #0
 8016ba2:	e7ef      	b.n	8016b84 <_dtoa_r+0x83c>
 8016ba4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016ba6:	9b08      	ldr	r3, [sp, #32]
 8016ba8:	e77e      	b.n	8016aa8 <_dtoa_r+0x760>
 8016baa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016bac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016bae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8016bb0:	e785      	b.n	8016abe <_dtoa_r+0x776>
 8016bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bb4:	e7b1      	b.n	8016b1a <_dtoa_r+0x7d2>
 8016bb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016bb8:	2500      	movs	r5, #0
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	ddc4      	ble.n	8016b48 <_dtoa_r+0x800>
 8016bbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016bc0:	2001      	movs	r0, #1
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d008      	beq.n	8016bd8 <_dtoa_r+0x890>
 8016bc6:	6933      	ldr	r3, [r6, #16]
 8016bc8:	3303      	adds	r3, #3
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	18f3      	adds	r3, r6, r3
 8016bce:	6858      	ldr	r0, [r3, #4]
 8016bd0:	f000 ff34 	bl	8017a3c <__hi0bits>
 8016bd4:	2320      	movs	r3, #32
 8016bd6:	1a18      	subs	r0, r3, r0
 8016bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bda:	221f      	movs	r2, #31
 8016bdc:	1818      	adds	r0, r3, r0
 8016bde:	0003      	movs	r3, r0
 8016be0:	4013      	ands	r3, r2
 8016be2:	4210      	tst	r0, r2
 8016be4:	d046      	beq.n	8016c74 <_dtoa_r+0x92c>
 8016be6:	3201      	adds	r2, #1
 8016be8:	1ad2      	subs	r2, r2, r3
 8016bea:	2a04      	cmp	r2, #4
 8016bec:	dd3f      	ble.n	8016c6e <_dtoa_r+0x926>
 8016bee:	221c      	movs	r2, #28
 8016bf0:	1ad3      	subs	r3, r2, r3
 8016bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bf4:	18e4      	adds	r4, r4, r3
 8016bf6:	18d2      	adds	r2, r2, r3
 8016bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8016bfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016bfc:	18d3      	adds	r3, r2, r3
 8016bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8016c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	dd05      	ble.n	8016c12 <_dtoa_r+0x8ca>
 8016c06:	001a      	movs	r2, r3
 8016c08:	9904      	ldr	r1, [sp, #16]
 8016c0a:	9803      	ldr	r0, [sp, #12]
 8016c0c:	f001 f866 	bl	8017cdc <__lshift>
 8016c10:	9004      	str	r0, [sp, #16]
 8016c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	dd05      	ble.n	8016c24 <_dtoa_r+0x8dc>
 8016c18:	0031      	movs	r1, r6
 8016c1a:	001a      	movs	r2, r3
 8016c1c:	9803      	ldr	r0, [sp, #12]
 8016c1e:	f001 f85d 	bl	8017cdc <__lshift>
 8016c22:	0006      	movs	r6, r0
 8016c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d026      	beq.n	8016c78 <_dtoa_r+0x930>
 8016c2a:	0031      	movs	r1, r6
 8016c2c:	9804      	ldr	r0, [sp, #16]
 8016c2e:	f001 f8c5 	bl	8017dbc <__mcmp>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	da20      	bge.n	8016c78 <_dtoa_r+0x930>
 8016c36:	9b02      	ldr	r3, [sp, #8]
 8016c38:	220a      	movs	r2, #10
 8016c3a:	3b01      	subs	r3, #1
 8016c3c:	9302      	str	r3, [sp, #8]
 8016c3e:	9904      	ldr	r1, [sp, #16]
 8016c40:	2300      	movs	r3, #0
 8016c42:	9803      	ldr	r0, [sp, #12]
 8016c44:	f000 fe6a 	bl	801791c <__multadd>
 8016c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c4a:	9004      	str	r0, [sp, #16]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d100      	bne.n	8016c52 <_dtoa_r+0x90a>
 8016c50:	e154      	b.n	8016efc <_dtoa_r+0xbb4>
 8016c52:	2300      	movs	r3, #0
 8016c54:	0039      	movs	r1, r7
 8016c56:	220a      	movs	r2, #10
 8016c58:	9803      	ldr	r0, [sp, #12]
 8016c5a:	f000 fe5f 	bl	801791c <__multadd>
 8016c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c60:	0007      	movs	r7, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	dc47      	bgt.n	8016cf6 <_dtoa_r+0x9ae>
 8016c66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016c68:	2b02      	cmp	r3, #2
 8016c6a:	dc0d      	bgt.n	8016c88 <_dtoa_r+0x940>
 8016c6c:	e043      	b.n	8016cf6 <_dtoa_r+0x9ae>
 8016c6e:	2a04      	cmp	r2, #4
 8016c70:	d0c6      	beq.n	8016c00 <_dtoa_r+0x8b8>
 8016c72:	0013      	movs	r3, r2
 8016c74:	331c      	adds	r3, #28
 8016c76:	e7bc      	b.n	8016bf2 <_dtoa_r+0x8aa>
 8016c78:	9b08      	ldr	r3, [sp, #32]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	dc35      	bgt.n	8016cea <_dtoa_r+0x9a2>
 8016c7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016c80:	2b02      	cmp	r3, #2
 8016c82:	dd32      	ble.n	8016cea <_dtoa_r+0x9a2>
 8016c84:	9b08      	ldr	r3, [sp, #32]
 8016c86:	930c      	str	r3, [sp, #48]	; 0x30
 8016c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d10c      	bne.n	8016ca8 <_dtoa_r+0x960>
 8016c8e:	0031      	movs	r1, r6
 8016c90:	2205      	movs	r2, #5
 8016c92:	9803      	ldr	r0, [sp, #12]
 8016c94:	f000 fe42 	bl	801791c <__multadd>
 8016c98:	0006      	movs	r6, r0
 8016c9a:	0001      	movs	r1, r0
 8016c9c:	9804      	ldr	r0, [sp, #16]
 8016c9e:	f001 f88d 	bl	8017dbc <__mcmp>
 8016ca2:	2800      	cmp	r0, #0
 8016ca4:	dd00      	ble.n	8016ca8 <_dtoa_r+0x960>
 8016ca6:	e5a8      	b.n	80167fa <_dtoa_r+0x4b2>
 8016ca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016caa:	43db      	mvns	r3, r3
 8016cac:	9302      	str	r3, [sp, #8]
 8016cae:	9b05      	ldr	r3, [sp, #20]
 8016cb0:	9306      	str	r3, [sp, #24]
 8016cb2:	2500      	movs	r5, #0
 8016cb4:	0031      	movs	r1, r6
 8016cb6:	9803      	ldr	r0, [sp, #12]
 8016cb8:	f000 fe26 	bl	8017908 <_Bfree>
 8016cbc:	2f00      	cmp	r7, #0
 8016cbe:	d100      	bne.n	8016cc2 <_dtoa_r+0x97a>
 8016cc0:	e69e      	b.n	8016a00 <_dtoa_r+0x6b8>
 8016cc2:	2d00      	cmp	r5, #0
 8016cc4:	d005      	beq.n	8016cd2 <_dtoa_r+0x98a>
 8016cc6:	42bd      	cmp	r5, r7
 8016cc8:	d003      	beq.n	8016cd2 <_dtoa_r+0x98a>
 8016cca:	0029      	movs	r1, r5
 8016ccc:	9803      	ldr	r0, [sp, #12]
 8016cce:	f000 fe1b 	bl	8017908 <_Bfree>
 8016cd2:	0039      	movs	r1, r7
 8016cd4:	9803      	ldr	r0, [sp, #12]
 8016cd6:	f000 fe17 	bl	8017908 <_Bfree>
 8016cda:	e691      	b.n	8016a00 <_dtoa_r+0x6b8>
 8016cdc:	2600      	movs	r6, #0
 8016cde:	0037      	movs	r7, r6
 8016ce0:	e7e2      	b.n	8016ca8 <_dtoa_r+0x960>
 8016ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ce4:	0037      	movs	r7, r6
 8016ce6:	9302      	str	r3, [sp, #8]
 8016ce8:	e587      	b.n	80167fa <_dtoa_r+0x4b2>
 8016cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d100      	bne.n	8016cf2 <_dtoa_r+0x9aa>
 8016cf0:	e0bc      	b.n	8016e6c <_dtoa_r+0xb24>
 8016cf2:	9b08      	ldr	r3, [sp, #32]
 8016cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8016cf6:	2c00      	cmp	r4, #0
 8016cf8:	dd05      	ble.n	8016d06 <_dtoa_r+0x9be>
 8016cfa:	0039      	movs	r1, r7
 8016cfc:	0022      	movs	r2, r4
 8016cfe:	9803      	ldr	r0, [sp, #12]
 8016d00:	f000 ffec 	bl	8017cdc <__lshift>
 8016d04:	0007      	movs	r7, r0
 8016d06:	0038      	movs	r0, r7
 8016d08:	2d00      	cmp	r5, #0
 8016d0a:	d01e      	beq.n	8016d4a <_dtoa_r+0xa02>
 8016d0c:	6879      	ldr	r1, [r7, #4]
 8016d0e:	9803      	ldr	r0, [sp, #12]
 8016d10:	f000 fdd2 	bl	80178b8 <_Balloc>
 8016d14:	1e04      	subs	r4, r0, #0
 8016d16:	d10b      	bne.n	8016d30 <_dtoa_r+0x9e8>
 8016d18:	0002      	movs	r2, r0
 8016d1a:	4b03      	ldr	r3, [pc, #12]	; (8016d28 <_dtoa_r+0x9e0>)
 8016d1c:	4903      	ldr	r1, [pc, #12]	; (8016d2c <_dtoa_r+0x9e4>)
 8016d1e:	e444      	b.n	80165aa <_dtoa_r+0x262>
 8016d20:	40240000 	.word	0x40240000
 8016d24:	00000433 	.word	0x00000433
 8016d28:	0801cd19 	.word	0x0801cd19
 8016d2c:	000002ea 	.word	0x000002ea
 8016d30:	0039      	movs	r1, r7
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	310c      	adds	r1, #12
 8016d36:	1c9a      	adds	r2, r3, #2
 8016d38:	0092      	lsls	r2, r2, #2
 8016d3a:	300c      	adds	r0, #12
 8016d3c:	f7fc fe50 	bl	80139e0 <memcpy>
 8016d40:	2201      	movs	r2, #1
 8016d42:	0021      	movs	r1, r4
 8016d44:	9803      	ldr	r0, [sp, #12]
 8016d46:	f000 ffc9 	bl	8017cdc <__lshift>
 8016d4a:	003d      	movs	r5, r7
 8016d4c:	0007      	movs	r7, r0
 8016d4e:	9b05      	ldr	r3, [sp, #20]
 8016d50:	9308      	str	r3, [sp, #32]
 8016d52:	0031      	movs	r1, r6
 8016d54:	9804      	ldr	r0, [sp, #16]
 8016d56:	f7ff fa6b 	bl	8016230 <quorem>
 8016d5a:	0029      	movs	r1, r5
 8016d5c:	0004      	movs	r4, r0
 8016d5e:	900d      	str	r0, [sp, #52]	; 0x34
 8016d60:	9804      	ldr	r0, [sp, #16]
 8016d62:	f001 f82b 	bl	8017dbc <__mcmp>
 8016d66:	003a      	movs	r2, r7
 8016d68:	900e      	str	r0, [sp, #56]	; 0x38
 8016d6a:	0031      	movs	r1, r6
 8016d6c:	9803      	ldr	r0, [sp, #12]
 8016d6e:	f001 f841 	bl	8017df4 <__mdiff>
 8016d72:	68c3      	ldr	r3, [r0, #12]
 8016d74:	3430      	adds	r4, #48	; 0x30
 8016d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d78:	2301      	movs	r3, #1
 8016d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d7e:	9006      	str	r0, [sp, #24]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d104      	bne.n	8016d8e <_dtoa_r+0xa46>
 8016d84:	0001      	movs	r1, r0
 8016d86:	9804      	ldr	r0, [sp, #16]
 8016d88:	f001 f818 	bl	8017dbc <__mcmp>
 8016d8c:	9009      	str	r0, [sp, #36]	; 0x24
 8016d8e:	9803      	ldr	r0, [sp, #12]
 8016d90:	9906      	ldr	r1, [sp, #24]
 8016d92:	f000 fdb9 	bl	8017908 <_Bfree>
 8016d96:	2301      	movs	r3, #1
 8016d98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d9c:	4018      	ands	r0, r3
 8016d9e:	9b08      	ldr	r3, [sp, #32]
 8016da0:	3301      	adds	r3, #1
 8016da2:	9306      	str	r3, [sp, #24]
 8016da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016da6:	4313      	orrs	r3, r2
 8016da8:	4303      	orrs	r3, r0
 8016daa:	d109      	bne.n	8016dc0 <_dtoa_r+0xa78>
 8016dac:	2c39      	cmp	r4, #57	; 0x39
 8016dae:	d021      	beq.n	8016df4 <_dtoa_r+0xaac>
 8016db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	dd01      	ble.n	8016dba <_dtoa_r+0xa72>
 8016db6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016db8:	3431      	adds	r4, #49	; 0x31
 8016dba:	9b08      	ldr	r3, [sp, #32]
 8016dbc:	701c      	strb	r4, [r3, #0]
 8016dbe:	e779      	b.n	8016cb4 <_dtoa_r+0x96c>
 8016dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	db03      	blt.n	8016dce <_dtoa_r+0xa86>
 8016dc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	4303      	orrs	r3, r0
 8016dcc:	d11e      	bne.n	8016e0c <_dtoa_r+0xac4>
 8016dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	ddf2      	ble.n	8016dba <_dtoa_r+0xa72>
 8016dd4:	9904      	ldr	r1, [sp, #16]
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	9803      	ldr	r0, [sp, #12]
 8016dda:	f000 ff7f 	bl	8017cdc <__lshift>
 8016dde:	0031      	movs	r1, r6
 8016de0:	9004      	str	r0, [sp, #16]
 8016de2:	f000 ffeb 	bl	8017dbc <__mcmp>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	dc02      	bgt.n	8016df0 <_dtoa_r+0xaa8>
 8016dea:	d1e6      	bne.n	8016dba <_dtoa_r+0xa72>
 8016dec:	07e3      	lsls	r3, r4, #31
 8016dee:	d5e4      	bpl.n	8016dba <_dtoa_r+0xa72>
 8016df0:	2c39      	cmp	r4, #57	; 0x39
 8016df2:	d1e0      	bne.n	8016db6 <_dtoa_r+0xa6e>
 8016df4:	2339      	movs	r3, #57	; 0x39
 8016df6:	9a08      	ldr	r2, [sp, #32]
 8016df8:	7013      	strb	r3, [r2, #0]
 8016dfa:	9b06      	ldr	r3, [sp, #24]
 8016dfc:	9306      	str	r3, [sp, #24]
 8016dfe:	3b01      	subs	r3, #1
 8016e00:	781a      	ldrb	r2, [r3, #0]
 8016e02:	2a39      	cmp	r2, #57	; 0x39
 8016e04:	d067      	beq.n	8016ed6 <_dtoa_r+0xb8e>
 8016e06:	3201      	adds	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
 8016e0a:	e753      	b.n	8016cb4 <_dtoa_r+0x96c>
 8016e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	dd03      	ble.n	8016e1a <_dtoa_r+0xad2>
 8016e12:	2c39      	cmp	r4, #57	; 0x39
 8016e14:	d0ee      	beq.n	8016df4 <_dtoa_r+0xaac>
 8016e16:	3401      	adds	r4, #1
 8016e18:	e7cf      	b.n	8016dba <_dtoa_r+0xa72>
 8016e1a:	9b08      	ldr	r3, [sp, #32]
 8016e1c:	9a05      	ldr	r2, [sp, #20]
 8016e1e:	701c      	strb	r4, [r3, #0]
 8016e20:	2301      	movs	r3, #1
 8016e22:	1a9b      	subs	r3, r3, r2
 8016e24:	9a08      	ldr	r2, [sp, #32]
 8016e26:	189b      	adds	r3, r3, r2
 8016e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d03e      	beq.n	8016eac <_dtoa_r+0xb64>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	220a      	movs	r2, #10
 8016e32:	9904      	ldr	r1, [sp, #16]
 8016e34:	9803      	ldr	r0, [sp, #12]
 8016e36:	f000 fd71 	bl	801791c <__multadd>
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	9004      	str	r0, [sp, #16]
 8016e3e:	220a      	movs	r2, #10
 8016e40:	0029      	movs	r1, r5
 8016e42:	9803      	ldr	r0, [sp, #12]
 8016e44:	42bd      	cmp	r5, r7
 8016e46:	d106      	bne.n	8016e56 <_dtoa_r+0xb0e>
 8016e48:	f000 fd68 	bl	801791c <__multadd>
 8016e4c:	0005      	movs	r5, r0
 8016e4e:	0007      	movs	r7, r0
 8016e50:	9b06      	ldr	r3, [sp, #24]
 8016e52:	9308      	str	r3, [sp, #32]
 8016e54:	e77d      	b.n	8016d52 <_dtoa_r+0xa0a>
 8016e56:	f000 fd61 	bl	801791c <__multadd>
 8016e5a:	0039      	movs	r1, r7
 8016e5c:	0005      	movs	r5, r0
 8016e5e:	2300      	movs	r3, #0
 8016e60:	220a      	movs	r2, #10
 8016e62:	9803      	ldr	r0, [sp, #12]
 8016e64:	f000 fd5a 	bl	801791c <__multadd>
 8016e68:	0007      	movs	r7, r0
 8016e6a:	e7f1      	b.n	8016e50 <_dtoa_r+0xb08>
 8016e6c:	9b08      	ldr	r3, [sp, #32]
 8016e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8016e70:	2500      	movs	r5, #0
 8016e72:	0031      	movs	r1, r6
 8016e74:	9804      	ldr	r0, [sp, #16]
 8016e76:	f7ff f9db 	bl	8016230 <quorem>
 8016e7a:	9b05      	ldr	r3, [sp, #20]
 8016e7c:	3030      	adds	r0, #48	; 0x30
 8016e7e:	5558      	strb	r0, [r3, r5]
 8016e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e82:	3501      	adds	r5, #1
 8016e84:	0004      	movs	r4, r0
 8016e86:	42ab      	cmp	r3, r5
 8016e88:	dd07      	ble.n	8016e9a <_dtoa_r+0xb52>
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	220a      	movs	r2, #10
 8016e8e:	9904      	ldr	r1, [sp, #16]
 8016e90:	9803      	ldr	r0, [sp, #12]
 8016e92:	f000 fd43 	bl	801791c <__multadd>
 8016e96:	9004      	str	r0, [sp, #16]
 8016e98:	e7eb      	b.n	8016e72 <_dtoa_r+0xb2a>
 8016e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e9c:	2001      	movs	r0, #1
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	dd00      	ble.n	8016ea4 <_dtoa_r+0xb5c>
 8016ea2:	0018      	movs	r0, r3
 8016ea4:	2500      	movs	r5, #0
 8016ea6:	9b05      	ldr	r3, [sp, #20]
 8016ea8:	181b      	adds	r3, r3, r0
 8016eaa:	9306      	str	r3, [sp, #24]
 8016eac:	9904      	ldr	r1, [sp, #16]
 8016eae:	2201      	movs	r2, #1
 8016eb0:	9803      	ldr	r0, [sp, #12]
 8016eb2:	f000 ff13 	bl	8017cdc <__lshift>
 8016eb6:	0031      	movs	r1, r6
 8016eb8:	9004      	str	r0, [sp, #16]
 8016eba:	f000 ff7f 	bl	8017dbc <__mcmp>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	dc9b      	bgt.n	8016dfa <_dtoa_r+0xab2>
 8016ec2:	d101      	bne.n	8016ec8 <_dtoa_r+0xb80>
 8016ec4:	07e3      	lsls	r3, r4, #31
 8016ec6:	d498      	bmi.n	8016dfa <_dtoa_r+0xab2>
 8016ec8:	9b06      	ldr	r3, [sp, #24]
 8016eca:	9306      	str	r3, [sp, #24]
 8016ecc:	3b01      	subs	r3, #1
 8016ece:	781a      	ldrb	r2, [r3, #0]
 8016ed0:	2a30      	cmp	r2, #48	; 0x30
 8016ed2:	d0fa      	beq.n	8016eca <_dtoa_r+0xb82>
 8016ed4:	e6ee      	b.n	8016cb4 <_dtoa_r+0x96c>
 8016ed6:	9a05      	ldr	r2, [sp, #20]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d18f      	bne.n	8016dfc <_dtoa_r+0xab4>
 8016edc:	9b02      	ldr	r3, [sp, #8]
 8016ede:	3301      	adds	r3, #1
 8016ee0:	9302      	str	r3, [sp, #8]
 8016ee2:	2331      	movs	r3, #49	; 0x31
 8016ee4:	7013      	strb	r3, [r2, #0]
 8016ee6:	e6e5      	b.n	8016cb4 <_dtoa_r+0x96c>
 8016ee8:	4b08      	ldr	r3, [pc, #32]	; (8016f0c <_dtoa_r+0xbc4>)
 8016eea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016eec:	9305      	str	r3, [sp, #20]
 8016eee:	4b08      	ldr	r3, [pc, #32]	; (8016f10 <_dtoa_r+0xbc8>)
 8016ef0:	2a00      	cmp	r2, #0
 8016ef2:	d001      	beq.n	8016ef8 <_dtoa_r+0xbb0>
 8016ef4:	f7ff fa5a 	bl	80163ac <_dtoa_r+0x64>
 8016ef8:	f7ff fa5a 	bl	80163b0 <_dtoa_r+0x68>
 8016efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	dcb6      	bgt.n	8016e70 <_dtoa_r+0xb28>
 8016f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016f04:	2b02      	cmp	r3, #2
 8016f06:	dd00      	ble.n	8016f0a <_dtoa_r+0xbc2>
 8016f08:	e6be      	b.n	8016c88 <_dtoa_r+0x940>
 8016f0a:	e7b1      	b.n	8016e70 <_dtoa_r+0xb28>
 8016f0c:	0801cd10 	.word	0x0801cd10
 8016f10:	0801cd18 	.word	0x0801cd18

08016f14 <__errno>:
 8016f14:	4b01      	ldr	r3, [pc, #4]	; (8016f1c <__errno+0x8>)
 8016f16:	6818      	ldr	r0, [r3, #0]
 8016f18:	4770      	bx	lr
 8016f1a:	46c0      	nop			; (mov r8, r8)
 8016f1c:	200000ac 	.word	0x200000ac

08016f20 <__libc_fini_array>:
 8016f20:	b570      	push	{r4, r5, r6, lr}
 8016f22:	4d07      	ldr	r5, [pc, #28]	; (8016f40 <__libc_fini_array+0x20>)
 8016f24:	4c07      	ldr	r4, [pc, #28]	; (8016f44 <__libc_fini_array+0x24>)
 8016f26:	1b64      	subs	r4, r4, r5
 8016f28:	10a4      	asrs	r4, r4, #2
 8016f2a:	2c00      	cmp	r4, #0
 8016f2c:	d102      	bne.n	8016f34 <__libc_fini_array+0x14>
 8016f2e:	f002 fe49 	bl	8019bc4 <_fini>
 8016f32:	bd70      	pop	{r4, r5, r6, pc}
 8016f34:	3c01      	subs	r4, #1
 8016f36:	00a3      	lsls	r3, r4, #2
 8016f38:	58eb      	ldr	r3, [r5, r3]
 8016f3a:	4798      	blx	r3
 8016f3c:	e7f5      	b.n	8016f2a <__libc_fini_array+0xa>
 8016f3e:	46c0      	nop			; (mov r8, r8)
 8016f40:	0801cfd0 	.word	0x0801cfd0
 8016f44:	0801cfd4 	.word	0x0801cfd4

08016f48 <_malloc_trim_r>:
 8016f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f4a:	0004      	movs	r4, r0
 8016f4c:	2008      	movs	r0, #8
 8016f4e:	000d      	movs	r5, r1
 8016f50:	f7ff f94e 	bl	80161f0 <sysconf>
 8016f54:	0006      	movs	r6, r0
 8016f56:	0020      	movs	r0, r4
 8016f58:	f7fc fd54 	bl	8013a04 <__malloc_lock>
 8016f5c:	2203      	movs	r2, #3
 8016f5e:	4f21      	ldr	r7, [pc, #132]	; (8016fe4 <_malloc_trim_r+0x9c>)
 8016f60:	0031      	movs	r1, r6
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	4393      	bics	r3, r2
 8016f68:	1b58      	subs	r0, r3, r5
 8016f6a:	3811      	subs	r0, #17
 8016f6c:	1980      	adds	r0, r0, r6
 8016f6e:	9301      	str	r3, [sp, #4]
 8016f70:	f7e9 f8ee 	bl	8000150 <__udivsi3>
 8016f74:	1e45      	subs	r5, r0, #1
 8016f76:	4375      	muls	r5, r6
 8016f78:	42ae      	cmp	r6, r5
 8016f7a:	dd04      	ble.n	8016f86 <_malloc_trim_r+0x3e>
 8016f7c:	0020      	movs	r0, r4
 8016f7e:	f7fc fd49 	bl	8013a14 <__malloc_unlock>
 8016f82:	2000      	movs	r0, #0
 8016f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f86:	2100      	movs	r1, #0
 8016f88:	0020      	movs	r0, r4
 8016f8a:	f7fc ff15 	bl	8013db8 <_sbrk_r>
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	9a01      	ldr	r2, [sp, #4]
 8016f92:	189b      	adds	r3, r3, r2
 8016f94:	4298      	cmp	r0, r3
 8016f96:	d1f1      	bne.n	8016f7c <_malloc_trim_r+0x34>
 8016f98:	0020      	movs	r0, r4
 8016f9a:	4269      	negs	r1, r5
 8016f9c:	f7fc ff0c 	bl	8013db8 <_sbrk_r>
 8016fa0:	1c43      	adds	r3, r0, #1
 8016fa2:	d110      	bne.n	8016fc6 <_malloc_trim_r+0x7e>
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	0020      	movs	r0, r4
 8016fa8:	f7fc ff06 	bl	8013db8 <_sbrk_r>
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	1a81      	subs	r1, r0, r2
 8016fb0:	290f      	cmp	r1, #15
 8016fb2:	dde3      	ble.n	8016f7c <_malloc_trim_r+0x34>
 8016fb4:	4b0c      	ldr	r3, [pc, #48]	; (8016fe8 <_malloc_trim_r+0xa0>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	1ac0      	subs	r0, r0, r3
 8016fba:	4b0c      	ldr	r3, [pc, #48]	; (8016fec <_malloc_trim_r+0xa4>)
 8016fbc:	6018      	str	r0, [r3, #0]
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	430b      	orrs	r3, r1
 8016fc2:	6053      	str	r3, [r2, #4]
 8016fc4:	e7da      	b.n	8016f7c <_malloc_trim_r+0x34>
 8016fc6:	2601      	movs	r6, #1
 8016fc8:	9b01      	ldr	r3, [sp, #4]
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	1b5b      	subs	r3, r3, r5
 8016fce:	4333      	orrs	r3, r6
 8016fd0:	6053      	str	r3, [r2, #4]
 8016fd2:	4b06      	ldr	r3, [pc, #24]	; (8016fec <_malloc_trim_r+0xa4>)
 8016fd4:	0020      	movs	r0, r4
 8016fd6:	681a      	ldr	r2, [r3, #0]
 8016fd8:	1b55      	subs	r5, r2, r5
 8016fda:	601d      	str	r5, [r3, #0]
 8016fdc:	f7fc fd1a 	bl	8013a14 <__malloc_unlock>
 8016fe0:	0030      	movs	r0, r6
 8016fe2:	e7cf      	b.n	8016f84 <_malloc_trim_r+0x3c>
 8016fe4:	200004d8 	.word	0x200004d8
 8016fe8:	200008e0 	.word	0x200008e0
 8016fec:	2000681c 	.word	0x2000681c

08016ff0 <_free_r>:
 8016ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ff2:	1e0d      	subs	r5, r1, #0
 8016ff4:	9001      	str	r0, [sp, #4]
 8016ff6:	d02d      	beq.n	8017054 <_free_r+0x64>
 8016ff8:	f7fc fd04 	bl	8013a04 <__malloc_lock>
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	0029      	movs	r1, r5
 8017000:	469c      	mov	ip, r3
 8017002:	3908      	subs	r1, #8
 8017004:	684f      	ldr	r7, [r1, #4]
 8017006:	4662      	mov	r2, ip
 8017008:	003b      	movs	r3, r7
 801700a:	4666      	mov	r6, ip
 801700c:	4393      	bics	r3, r2
 801700e:	18c8      	adds	r0, r1, r3
 8017010:	6845      	ldr	r5, [r0, #4]
 8017012:	3202      	adds	r2, #2
 8017014:	4395      	bics	r5, r2
 8017016:	4a4a      	ldr	r2, [pc, #296]	; (8017140 <_free_r+0x150>)
 8017018:	4037      	ands	r7, r6
 801701a:	6896      	ldr	r6, [r2, #8]
 801701c:	4286      	cmp	r6, r0
 801701e:	d11a      	bne.n	8017056 <_free_r+0x66>
 8017020:	195b      	adds	r3, r3, r5
 8017022:	2f00      	cmp	r7, #0
 8017024:	d106      	bne.n	8017034 <_free_r+0x44>
 8017026:	6808      	ldr	r0, [r1, #0]
 8017028:	1a09      	subs	r1, r1, r0
 801702a:	688d      	ldr	r5, [r1, #8]
 801702c:	181b      	adds	r3, r3, r0
 801702e:	68c8      	ldr	r0, [r1, #12]
 8017030:	60e8      	str	r0, [r5, #12]
 8017032:	6085      	str	r5, [r0, #8]
 8017034:	2001      	movs	r0, #1
 8017036:	4318      	orrs	r0, r3
 8017038:	6048      	str	r0, [r1, #4]
 801703a:	6091      	str	r1, [r2, #8]
 801703c:	4a41      	ldr	r2, [pc, #260]	; (8017144 <_free_r+0x154>)
 801703e:	6812      	ldr	r2, [r2, #0]
 8017040:	429a      	cmp	r2, r3
 8017042:	d804      	bhi.n	801704e <_free_r+0x5e>
 8017044:	4b40      	ldr	r3, [pc, #256]	; (8017148 <_free_r+0x158>)
 8017046:	9801      	ldr	r0, [sp, #4]
 8017048:	6819      	ldr	r1, [r3, #0]
 801704a:	f7ff ff7d 	bl	8016f48 <_malloc_trim_r>
 801704e:	9801      	ldr	r0, [sp, #4]
 8017050:	f7fc fce0 	bl	8013a14 <__malloc_unlock>
 8017054:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017056:	2600      	movs	r6, #0
 8017058:	6045      	str	r5, [r0, #4]
 801705a:	42b7      	cmp	r7, r6
 801705c:	d109      	bne.n	8017072 <_free_r+0x82>
 801705e:	680f      	ldr	r7, [r1, #0]
 8017060:	4c3a      	ldr	r4, [pc, #232]	; (801714c <_free_r+0x15c>)
 8017062:	1bc9      	subs	r1, r1, r7
 8017064:	19db      	adds	r3, r3, r7
 8017066:	688f      	ldr	r7, [r1, #8]
 8017068:	42a7      	cmp	r7, r4
 801706a:	d02c      	beq.n	80170c6 <_free_r+0xd6>
 801706c:	68cc      	ldr	r4, [r1, #12]
 801706e:	60fc      	str	r4, [r7, #12]
 8017070:	60a7      	str	r7, [r4, #8]
 8017072:	1947      	adds	r7, r0, r5
 8017074:	687c      	ldr	r4, [r7, #4]
 8017076:	2701      	movs	r7, #1
 8017078:	423c      	tst	r4, r7
 801707a:	d10b      	bne.n	8017094 <_free_r+0xa4>
 801707c:	195b      	adds	r3, r3, r5
 801707e:	6885      	ldr	r5, [r0, #8]
 8017080:	2e00      	cmp	r6, #0
 8017082:	d122      	bne.n	80170ca <_free_r+0xda>
 8017084:	4c31      	ldr	r4, [pc, #196]	; (801714c <_free_r+0x15c>)
 8017086:	42a5      	cmp	r5, r4
 8017088:	d11f      	bne.n	80170ca <_free_r+0xda>
 801708a:	003e      	movs	r6, r7
 801708c:	6151      	str	r1, [r2, #20]
 801708e:	6111      	str	r1, [r2, #16]
 8017090:	60cd      	str	r5, [r1, #12]
 8017092:	608d      	str	r5, [r1, #8]
 8017094:	2501      	movs	r5, #1
 8017096:	0028      	movs	r0, r5
 8017098:	4318      	orrs	r0, r3
 801709a:	6048      	str	r0, [r1, #4]
 801709c:	50cb      	str	r3, [r1, r3]
 801709e:	2e00      	cmp	r6, #0
 80170a0:	d1d5      	bne.n	801704e <_free_r+0x5e>
 80170a2:	2080      	movs	r0, #128	; 0x80
 80170a4:	0080      	lsls	r0, r0, #2
 80170a6:	4283      	cmp	r3, r0
 80170a8:	d213      	bcs.n	80170d2 <_free_r+0xe2>
 80170aa:	08d8      	lsrs	r0, r3, #3
 80170ac:	095b      	lsrs	r3, r3, #5
 80170ae:	409d      	lsls	r5, r3
 80170b0:	6853      	ldr	r3, [r2, #4]
 80170b2:	00c0      	lsls	r0, r0, #3
 80170b4:	431d      	orrs	r5, r3
 80170b6:	6055      	str	r5, [r2, #4]
 80170b8:	1882      	adds	r2, r0, r2
 80170ba:	6893      	ldr	r3, [r2, #8]
 80170bc:	60ca      	str	r2, [r1, #12]
 80170be:	608b      	str	r3, [r1, #8]
 80170c0:	6091      	str	r1, [r2, #8]
 80170c2:	60d9      	str	r1, [r3, #12]
 80170c4:	e7c3      	b.n	801704e <_free_r+0x5e>
 80170c6:	4666      	mov	r6, ip
 80170c8:	e7d3      	b.n	8017072 <_free_r+0x82>
 80170ca:	68c0      	ldr	r0, [r0, #12]
 80170cc:	60e8      	str	r0, [r5, #12]
 80170ce:	6085      	str	r5, [r0, #8]
 80170d0:	e7e0      	b.n	8017094 <_free_r+0xa4>
 80170d2:	0a5d      	lsrs	r5, r3, #9
 80170d4:	2d04      	cmp	r5, #4
 80170d6:	d812      	bhi.n	80170fe <_free_r+0x10e>
 80170d8:	0998      	lsrs	r0, r3, #6
 80170da:	3038      	adds	r0, #56	; 0x38
 80170dc:	00c6      	lsls	r6, r0, #3
 80170de:	18b6      	adds	r6, r6, r2
 80170e0:	68b5      	ldr	r5, [r6, #8]
 80170e2:	2703      	movs	r7, #3
 80170e4:	42ae      	cmp	r6, r5
 80170e6:	d125      	bne.n	8017134 <_free_r+0x144>
 80170e8:	2301      	movs	r3, #1
 80170ea:	1080      	asrs	r0, r0, #2
 80170ec:	4083      	lsls	r3, r0
 80170ee:	6850      	ldr	r0, [r2, #4]
 80170f0:	4303      	orrs	r3, r0
 80170f2:	6053      	str	r3, [r2, #4]
 80170f4:	60ce      	str	r6, [r1, #12]
 80170f6:	608d      	str	r5, [r1, #8]
 80170f8:	60b1      	str	r1, [r6, #8]
 80170fa:	60e9      	str	r1, [r5, #12]
 80170fc:	e7a7      	b.n	801704e <_free_r+0x5e>
 80170fe:	2d14      	cmp	r5, #20
 8017100:	d802      	bhi.n	8017108 <_free_r+0x118>
 8017102:	0028      	movs	r0, r5
 8017104:	305b      	adds	r0, #91	; 0x5b
 8017106:	e7e9      	b.n	80170dc <_free_r+0xec>
 8017108:	2d54      	cmp	r5, #84	; 0x54
 801710a:	d802      	bhi.n	8017112 <_free_r+0x122>
 801710c:	0b18      	lsrs	r0, r3, #12
 801710e:	306e      	adds	r0, #110	; 0x6e
 8017110:	e7e4      	b.n	80170dc <_free_r+0xec>
 8017112:	20aa      	movs	r0, #170	; 0xaa
 8017114:	0040      	lsls	r0, r0, #1
 8017116:	4285      	cmp	r5, r0
 8017118:	d802      	bhi.n	8017120 <_free_r+0x130>
 801711a:	0bd8      	lsrs	r0, r3, #15
 801711c:	3077      	adds	r0, #119	; 0x77
 801711e:	e7dd      	b.n	80170dc <_free_r+0xec>
 8017120:	4e0b      	ldr	r6, [pc, #44]	; (8017150 <_free_r+0x160>)
 8017122:	207e      	movs	r0, #126	; 0x7e
 8017124:	42b5      	cmp	r5, r6
 8017126:	d8d9      	bhi.n	80170dc <_free_r+0xec>
 8017128:	0c98      	lsrs	r0, r3, #18
 801712a:	307c      	adds	r0, #124	; 0x7c
 801712c:	e7d6      	b.n	80170dc <_free_r+0xec>
 801712e:	68ad      	ldr	r5, [r5, #8]
 8017130:	42ae      	cmp	r6, r5
 8017132:	d003      	beq.n	801713c <_free_r+0x14c>
 8017134:	686a      	ldr	r2, [r5, #4]
 8017136:	43ba      	bics	r2, r7
 8017138:	429a      	cmp	r2, r3
 801713a:	d8f8      	bhi.n	801712e <_free_r+0x13e>
 801713c:	68ee      	ldr	r6, [r5, #12]
 801713e:	e7d9      	b.n	80170f4 <_free_r+0x104>
 8017140:	200004d8 	.word	0x200004d8
 8017144:	200008e4 	.word	0x200008e4
 8017148:	2000684c 	.word	0x2000684c
 801714c:	200004e0 	.word	0x200004e0
 8017150:	00000554 	.word	0x00000554

08017154 <rshift>:
 8017154:	0002      	movs	r2, r0
 8017156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017158:	6907      	ldr	r7, [r0, #16]
 801715a:	3214      	adds	r2, #20
 801715c:	0013      	movs	r3, r2
 801715e:	b085      	sub	sp, #20
 8017160:	114e      	asrs	r6, r1, #5
 8017162:	42b7      	cmp	r7, r6
 8017164:	dd31      	ble.n	80171ca <rshift+0x76>
 8017166:	00b3      	lsls	r3, r6, #2
 8017168:	18d3      	adds	r3, r2, r3
 801716a:	251f      	movs	r5, #31
 801716c:	9301      	str	r3, [sp, #4]
 801716e:	000b      	movs	r3, r1
 8017170:	00bc      	lsls	r4, r7, #2
 8017172:	402b      	ands	r3, r5
 8017174:	1914      	adds	r4, r2, r4
 8017176:	9302      	str	r3, [sp, #8]
 8017178:	4229      	tst	r1, r5
 801717a:	d10c      	bne.n	8017196 <rshift+0x42>
 801717c:	0015      	movs	r5, r2
 801717e:	9901      	ldr	r1, [sp, #4]
 8017180:	428c      	cmp	r4, r1
 8017182:	d838      	bhi.n	80171f6 <rshift+0xa2>
 8017184:	9901      	ldr	r1, [sp, #4]
 8017186:	2300      	movs	r3, #0
 8017188:	3903      	subs	r1, #3
 801718a:	428c      	cmp	r4, r1
 801718c:	d301      	bcc.n	8017192 <rshift+0x3e>
 801718e:	1bbb      	subs	r3, r7, r6
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	18d3      	adds	r3, r2, r3
 8017194:	e019      	b.n	80171ca <rshift+0x76>
 8017196:	2120      	movs	r1, #32
 8017198:	9b02      	ldr	r3, [sp, #8]
 801719a:	9d01      	ldr	r5, [sp, #4]
 801719c:	1acb      	subs	r3, r1, r3
 801719e:	9303      	str	r3, [sp, #12]
 80171a0:	cd02      	ldmia	r5!, {r1}
 80171a2:	9b02      	ldr	r3, [sp, #8]
 80171a4:	4694      	mov	ip, r2
 80171a6:	40d9      	lsrs	r1, r3
 80171a8:	9100      	str	r1, [sp, #0]
 80171aa:	42ac      	cmp	r4, r5
 80171ac:	d816      	bhi.n	80171dc <rshift+0x88>
 80171ae:	9d01      	ldr	r5, [sp, #4]
 80171b0:	2300      	movs	r3, #0
 80171b2:	3501      	adds	r5, #1
 80171b4:	42ac      	cmp	r4, r5
 80171b6:	d302      	bcc.n	80171be <rshift+0x6a>
 80171b8:	1bbb      	subs	r3, r7, r6
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	3b04      	subs	r3, #4
 80171be:	9900      	ldr	r1, [sp, #0]
 80171c0:	18d3      	adds	r3, r2, r3
 80171c2:	6019      	str	r1, [r3, #0]
 80171c4:	2900      	cmp	r1, #0
 80171c6:	d000      	beq.n	80171ca <rshift+0x76>
 80171c8:	3304      	adds	r3, #4
 80171ca:	1a99      	subs	r1, r3, r2
 80171cc:	1089      	asrs	r1, r1, #2
 80171ce:	6101      	str	r1, [r0, #16]
 80171d0:	4293      	cmp	r3, r2
 80171d2:	d101      	bne.n	80171d8 <rshift+0x84>
 80171d4:	2300      	movs	r3, #0
 80171d6:	6143      	str	r3, [r0, #20]
 80171d8:	b005      	add	sp, #20
 80171da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171dc:	682b      	ldr	r3, [r5, #0]
 80171de:	9903      	ldr	r1, [sp, #12]
 80171e0:	408b      	lsls	r3, r1
 80171e2:	9900      	ldr	r1, [sp, #0]
 80171e4:	4319      	orrs	r1, r3
 80171e6:	4663      	mov	r3, ip
 80171e8:	c302      	stmia	r3!, {r1}
 80171ea:	469c      	mov	ip, r3
 80171ec:	cd02      	ldmia	r5!, {r1}
 80171ee:	9b02      	ldr	r3, [sp, #8]
 80171f0:	40d9      	lsrs	r1, r3
 80171f2:	9100      	str	r1, [sp, #0]
 80171f4:	e7d9      	b.n	80171aa <rshift+0x56>
 80171f6:	c908      	ldmia	r1!, {r3}
 80171f8:	c508      	stmia	r5!, {r3}
 80171fa:	e7c1      	b.n	8017180 <rshift+0x2c>

080171fc <__hexdig_fun>:
 80171fc:	0002      	movs	r2, r0
 80171fe:	3a30      	subs	r2, #48	; 0x30
 8017200:	0003      	movs	r3, r0
 8017202:	2a09      	cmp	r2, #9
 8017204:	d802      	bhi.n	801720c <__hexdig_fun+0x10>
 8017206:	3b20      	subs	r3, #32
 8017208:	b2d8      	uxtb	r0, r3
 801720a:	4770      	bx	lr
 801720c:	0002      	movs	r2, r0
 801720e:	3a61      	subs	r2, #97	; 0x61
 8017210:	2a05      	cmp	r2, #5
 8017212:	d801      	bhi.n	8017218 <__hexdig_fun+0x1c>
 8017214:	3b47      	subs	r3, #71	; 0x47
 8017216:	e7f7      	b.n	8017208 <__hexdig_fun+0xc>
 8017218:	001a      	movs	r2, r3
 801721a:	3a41      	subs	r2, #65	; 0x41
 801721c:	2000      	movs	r0, #0
 801721e:	2a05      	cmp	r2, #5
 8017220:	d8f3      	bhi.n	801720a <__hexdig_fun+0xe>
 8017222:	3b27      	subs	r3, #39	; 0x27
 8017224:	e7f0      	b.n	8017208 <__hexdig_fun+0xc>
	...

08017228 <__gethex>:
 8017228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801722a:	b08d      	sub	sp, #52	; 0x34
 801722c:	930a      	str	r3, [sp, #40]	; 0x28
 801722e:	4bbd      	ldr	r3, [pc, #756]	; (8017524 <__gethex+0x2fc>)
 8017230:	9005      	str	r0, [sp, #20]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	9109      	str	r1, [sp, #36]	; 0x24
 8017236:	0018      	movs	r0, r3
 8017238:	9202      	str	r2, [sp, #8]
 801723a:	9307      	str	r3, [sp, #28]
 801723c:	f7e8 ff6c 	bl	8000118 <strlen>
 8017240:	2202      	movs	r2, #2
 8017242:	9b07      	ldr	r3, [sp, #28]
 8017244:	4252      	negs	r2, r2
 8017246:	181b      	adds	r3, r3, r0
 8017248:	3b01      	subs	r3, #1
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	9003      	str	r0, [sp, #12]
 801724e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017252:	6819      	ldr	r1, [r3, #0]
 8017254:	1c8b      	adds	r3, r1, #2
 8017256:	1a52      	subs	r2, r2, r1
 8017258:	18d1      	adds	r1, r2, r3
 801725a:	9301      	str	r3, [sp, #4]
 801725c:	9108      	str	r1, [sp, #32]
 801725e:	9901      	ldr	r1, [sp, #4]
 8017260:	3301      	adds	r3, #1
 8017262:	7808      	ldrb	r0, [r1, #0]
 8017264:	2830      	cmp	r0, #48	; 0x30
 8017266:	d0f7      	beq.n	8017258 <__gethex+0x30>
 8017268:	f7ff ffc8 	bl	80171fc <__hexdig_fun>
 801726c:	1e04      	subs	r4, r0, #0
 801726e:	d13e      	bne.n	80172ee <__gethex+0xc6>
 8017270:	9a03      	ldr	r2, [sp, #12]
 8017272:	9907      	ldr	r1, [sp, #28]
 8017274:	9801      	ldr	r0, [sp, #4]
 8017276:	f7fc fdf4 	bl	8013e62 <strncmp>
 801727a:	1e07      	subs	r7, r0, #0
 801727c:	d000      	beq.n	8017280 <__gethex+0x58>
 801727e:	e06f      	b.n	8017360 <__gethex+0x138>
 8017280:	9b01      	ldr	r3, [sp, #4]
 8017282:	9a03      	ldr	r2, [sp, #12]
 8017284:	5c98      	ldrb	r0, [r3, r2]
 8017286:	189d      	adds	r5, r3, r2
 8017288:	f7ff ffb8 	bl	80171fc <__hexdig_fun>
 801728c:	2301      	movs	r3, #1
 801728e:	9304      	str	r3, [sp, #16]
 8017290:	2800      	cmp	r0, #0
 8017292:	d034      	beq.n	80172fe <__gethex+0xd6>
 8017294:	9501      	str	r5, [sp, #4]
 8017296:	9b01      	ldr	r3, [sp, #4]
 8017298:	7818      	ldrb	r0, [r3, #0]
 801729a:	2830      	cmp	r0, #48	; 0x30
 801729c:	d009      	beq.n	80172b2 <__gethex+0x8a>
 801729e:	f7ff ffad 	bl	80171fc <__hexdig_fun>
 80172a2:	4243      	negs	r3, r0
 80172a4:	4143      	adcs	r3, r0
 80172a6:	9304      	str	r3, [sp, #16]
 80172a8:	2301      	movs	r3, #1
 80172aa:	002c      	movs	r4, r5
 80172ac:	9308      	str	r3, [sp, #32]
 80172ae:	9d01      	ldr	r5, [sp, #4]
 80172b0:	e004      	b.n	80172bc <__gethex+0x94>
 80172b2:	9b01      	ldr	r3, [sp, #4]
 80172b4:	3301      	adds	r3, #1
 80172b6:	9301      	str	r3, [sp, #4]
 80172b8:	e7ed      	b.n	8017296 <__gethex+0x6e>
 80172ba:	3501      	adds	r5, #1
 80172bc:	7828      	ldrb	r0, [r5, #0]
 80172be:	f7ff ff9d 	bl	80171fc <__hexdig_fun>
 80172c2:	1e07      	subs	r7, r0, #0
 80172c4:	d1f9      	bne.n	80172ba <__gethex+0x92>
 80172c6:	0028      	movs	r0, r5
 80172c8:	9a03      	ldr	r2, [sp, #12]
 80172ca:	9907      	ldr	r1, [sp, #28]
 80172cc:	f7fc fdc9 	bl	8013e62 <strncmp>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d112      	bne.n	80172fa <__gethex+0xd2>
 80172d4:	2c00      	cmp	r4, #0
 80172d6:	d107      	bne.n	80172e8 <__gethex+0xc0>
 80172d8:	9b03      	ldr	r3, [sp, #12]
 80172da:	18ed      	adds	r5, r5, r3
 80172dc:	002c      	movs	r4, r5
 80172de:	7828      	ldrb	r0, [r5, #0]
 80172e0:	f7ff ff8c 	bl	80171fc <__hexdig_fun>
 80172e4:	2800      	cmp	r0, #0
 80172e6:	d106      	bne.n	80172f6 <__gethex+0xce>
 80172e8:	1b67      	subs	r7, r4, r5
 80172ea:	00bf      	lsls	r7, r7, #2
 80172ec:	e007      	b.n	80172fe <__gethex+0xd6>
 80172ee:	2300      	movs	r3, #0
 80172f0:	001c      	movs	r4, r3
 80172f2:	9304      	str	r3, [sp, #16]
 80172f4:	e7db      	b.n	80172ae <__gethex+0x86>
 80172f6:	3501      	adds	r5, #1
 80172f8:	e7f1      	b.n	80172de <__gethex+0xb6>
 80172fa:	2c00      	cmp	r4, #0
 80172fc:	d1f4      	bne.n	80172e8 <__gethex+0xc0>
 80172fe:	2220      	movs	r2, #32
 8017300:	782b      	ldrb	r3, [r5, #0]
 8017302:	002e      	movs	r6, r5
 8017304:	4393      	bics	r3, r2
 8017306:	2b50      	cmp	r3, #80	; 0x50
 8017308:	d11d      	bne.n	8017346 <__gethex+0x11e>
 801730a:	786b      	ldrb	r3, [r5, #1]
 801730c:	2b2b      	cmp	r3, #43	; 0x2b
 801730e:	d02c      	beq.n	801736a <__gethex+0x142>
 8017310:	2b2d      	cmp	r3, #45	; 0x2d
 8017312:	d02e      	beq.n	8017372 <__gethex+0x14a>
 8017314:	2300      	movs	r3, #0
 8017316:	1c6e      	adds	r6, r5, #1
 8017318:	9306      	str	r3, [sp, #24]
 801731a:	7830      	ldrb	r0, [r6, #0]
 801731c:	f7ff ff6e 	bl	80171fc <__hexdig_fun>
 8017320:	1e43      	subs	r3, r0, #1
 8017322:	b2db      	uxtb	r3, r3
 8017324:	2b18      	cmp	r3, #24
 8017326:	d82b      	bhi.n	8017380 <__gethex+0x158>
 8017328:	3810      	subs	r0, #16
 801732a:	0004      	movs	r4, r0
 801732c:	7870      	ldrb	r0, [r6, #1]
 801732e:	f7ff ff65 	bl	80171fc <__hexdig_fun>
 8017332:	1e43      	subs	r3, r0, #1
 8017334:	b2db      	uxtb	r3, r3
 8017336:	3601      	adds	r6, #1
 8017338:	2b18      	cmp	r3, #24
 801733a:	d91c      	bls.n	8017376 <__gethex+0x14e>
 801733c:	9b06      	ldr	r3, [sp, #24]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d000      	beq.n	8017344 <__gethex+0x11c>
 8017342:	4264      	negs	r4, r4
 8017344:	193f      	adds	r7, r7, r4
 8017346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017348:	601e      	str	r6, [r3, #0]
 801734a:	9b04      	ldr	r3, [sp, #16]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d019      	beq.n	8017384 <__gethex+0x15c>
 8017350:	2600      	movs	r6, #0
 8017352:	9b08      	ldr	r3, [sp, #32]
 8017354:	42b3      	cmp	r3, r6
 8017356:	d100      	bne.n	801735a <__gethex+0x132>
 8017358:	3606      	adds	r6, #6
 801735a:	0030      	movs	r0, r6
 801735c:	b00d      	add	sp, #52	; 0x34
 801735e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017360:	2301      	movs	r3, #1
 8017362:	0027      	movs	r7, r4
 8017364:	9d01      	ldr	r5, [sp, #4]
 8017366:	9304      	str	r3, [sp, #16]
 8017368:	e7c9      	b.n	80172fe <__gethex+0xd6>
 801736a:	2300      	movs	r3, #0
 801736c:	9306      	str	r3, [sp, #24]
 801736e:	1cae      	adds	r6, r5, #2
 8017370:	e7d3      	b.n	801731a <__gethex+0xf2>
 8017372:	2301      	movs	r3, #1
 8017374:	e7fa      	b.n	801736c <__gethex+0x144>
 8017376:	230a      	movs	r3, #10
 8017378:	435c      	muls	r4, r3
 801737a:	1824      	adds	r4, r4, r0
 801737c:	3c10      	subs	r4, #16
 801737e:	e7d5      	b.n	801732c <__gethex+0x104>
 8017380:	002e      	movs	r6, r5
 8017382:	e7e0      	b.n	8017346 <__gethex+0x11e>
 8017384:	9b01      	ldr	r3, [sp, #4]
 8017386:	9904      	ldr	r1, [sp, #16]
 8017388:	1aeb      	subs	r3, r5, r3
 801738a:	3b01      	subs	r3, #1
 801738c:	2b07      	cmp	r3, #7
 801738e:	dc0a      	bgt.n	80173a6 <__gethex+0x17e>
 8017390:	9805      	ldr	r0, [sp, #20]
 8017392:	f000 fa91 	bl	80178b8 <_Balloc>
 8017396:	1e04      	subs	r4, r0, #0
 8017398:	d108      	bne.n	80173ac <__gethex+0x184>
 801739a:	0002      	movs	r2, r0
 801739c:	21de      	movs	r1, #222	; 0xde
 801739e:	4b62      	ldr	r3, [pc, #392]	; (8017528 <__gethex+0x300>)
 80173a0:	4862      	ldr	r0, [pc, #392]	; (801752c <__gethex+0x304>)
 80173a2:	f001 f80b 	bl	80183bc <__assert_func>
 80173a6:	3101      	adds	r1, #1
 80173a8:	105b      	asrs	r3, r3, #1
 80173aa:	e7ef      	b.n	801738c <__gethex+0x164>
 80173ac:	0003      	movs	r3, r0
 80173ae:	3314      	adds	r3, #20
 80173b0:	9304      	str	r3, [sp, #16]
 80173b2:	9309      	str	r3, [sp, #36]	; 0x24
 80173b4:	2300      	movs	r3, #0
 80173b6:	001e      	movs	r6, r3
 80173b8:	9306      	str	r3, [sp, #24]
 80173ba:	9b01      	ldr	r3, [sp, #4]
 80173bc:	42ab      	cmp	r3, r5
 80173be:	d340      	bcc.n	8017442 <__gethex+0x21a>
 80173c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80173c2:	9b04      	ldr	r3, [sp, #16]
 80173c4:	c540      	stmia	r5!, {r6}
 80173c6:	1aed      	subs	r5, r5, r3
 80173c8:	10ad      	asrs	r5, r5, #2
 80173ca:	0030      	movs	r0, r6
 80173cc:	6125      	str	r5, [r4, #16]
 80173ce:	f000 fb35 	bl	8017a3c <__hi0bits>
 80173d2:	9b02      	ldr	r3, [sp, #8]
 80173d4:	016d      	lsls	r5, r5, #5
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	1a2e      	subs	r6, r5, r0
 80173da:	9301      	str	r3, [sp, #4]
 80173dc:	429e      	cmp	r6, r3
 80173de:	dd5a      	ble.n	8017496 <__gethex+0x26e>
 80173e0:	1af6      	subs	r6, r6, r3
 80173e2:	0031      	movs	r1, r6
 80173e4:	0020      	movs	r0, r4
 80173e6:	f000 febe 	bl	8018166 <__any_on>
 80173ea:	1e05      	subs	r5, r0, #0
 80173ec:	d016      	beq.n	801741c <__gethex+0x1f4>
 80173ee:	2501      	movs	r5, #1
 80173f0:	211f      	movs	r1, #31
 80173f2:	0028      	movs	r0, r5
 80173f4:	1e73      	subs	r3, r6, #1
 80173f6:	4019      	ands	r1, r3
 80173f8:	4088      	lsls	r0, r1
 80173fa:	0001      	movs	r1, r0
 80173fc:	115a      	asrs	r2, r3, #5
 80173fe:	9804      	ldr	r0, [sp, #16]
 8017400:	0092      	lsls	r2, r2, #2
 8017402:	5812      	ldr	r2, [r2, r0]
 8017404:	420a      	tst	r2, r1
 8017406:	d009      	beq.n	801741c <__gethex+0x1f4>
 8017408:	42ab      	cmp	r3, r5
 801740a:	dd06      	ble.n	801741a <__gethex+0x1f2>
 801740c:	0020      	movs	r0, r4
 801740e:	1eb1      	subs	r1, r6, #2
 8017410:	f000 fea9 	bl	8018166 <__any_on>
 8017414:	3502      	adds	r5, #2
 8017416:	2800      	cmp	r0, #0
 8017418:	d100      	bne.n	801741c <__gethex+0x1f4>
 801741a:	2502      	movs	r5, #2
 801741c:	0031      	movs	r1, r6
 801741e:	0020      	movs	r0, r4
 8017420:	f7ff fe98 	bl	8017154 <rshift>
 8017424:	19bf      	adds	r7, r7, r6
 8017426:	9b02      	ldr	r3, [sp, #8]
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	9303      	str	r3, [sp, #12]
 801742c:	42bb      	cmp	r3, r7
 801742e:	da42      	bge.n	80174b6 <__gethex+0x28e>
 8017430:	0021      	movs	r1, r4
 8017432:	9805      	ldr	r0, [sp, #20]
 8017434:	f000 fa68 	bl	8017908 <_Bfree>
 8017438:	2300      	movs	r3, #0
 801743a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801743c:	26a3      	movs	r6, #163	; 0xa3
 801743e:	6013      	str	r3, [r2, #0]
 8017440:	e78b      	b.n	801735a <__gethex+0x132>
 8017442:	1e6b      	subs	r3, r5, #1
 8017444:	9308      	str	r3, [sp, #32]
 8017446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	4293      	cmp	r3, r2
 801744c:	d014      	beq.n	8017478 <__gethex+0x250>
 801744e:	9b06      	ldr	r3, [sp, #24]
 8017450:	2b20      	cmp	r3, #32
 8017452:	d104      	bne.n	801745e <__gethex+0x236>
 8017454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017456:	c340      	stmia	r3!, {r6}
 8017458:	2600      	movs	r6, #0
 801745a:	9309      	str	r3, [sp, #36]	; 0x24
 801745c:	9606      	str	r6, [sp, #24]
 801745e:	9b08      	ldr	r3, [sp, #32]
 8017460:	7818      	ldrb	r0, [r3, #0]
 8017462:	f7ff fecb 	bl	80171fc <__hexdig_fun>
 8017466:	230f      	movs	r3, #15
 8017468:	4018      	ands	r0, r3
 801746a:	9b06      	ldr	r3, [sp, #24]
 801746c:	9d08      	ldr	r5, [sp, #32]
 801746e:	4098      	lsls	r0, r3
 8017470:	3304      	adds	r3, #4
 8017472:	4306      	orrs	r6, r0
 8017474:	9306      	str	r3, [sp, #24]
 8017476:	e7a0      	b.n	80173ba <__gethex+0x192>
 8017478:	2301      	movs	r3, #1
 801747a:	9a03      	ldr	r2, [sp, #12]
 801747c:	1a9d      	subs	r5, r3, r2
 801747e:	9b08      	ldr	r3, [sp, #32]
 8017480:	195d      	adds	r5, r3, r5
 8017482:	9b01      	ldr	r3, [sp, #4]
 8017484:	429d      	cmp	r5, r3
 8017486:	d3e2      	bcc.n	801744e <__gethex+0x226>
 8017488:	0028      	movs	r0, r5
 801748a:	9907      	ldr	r1, [sp, #28]
 801748c:	f7fc fce9 	bl	8013e62 <strncmp>
 8017490:	2800      	cmp	r0, #0
 8017492:	d1dc      	bne.n	801744e <__gethex+0x226>
 8017494:	e791      	b.n	80173ba <__gethex+0x192>
 8017496:	9b01      	ldr	r3, [sp, #4]
 8017498:	2500      	movs	r5, #0
 801749a:	429e      	cmp	r6, r3
 801749c:	dac3      	bge.n	8017426 <__gethex+0x1fe>
 801749e:	1b9e      	subs	r6, r3, r6
 80174a0:	0021      	movs	r1, r4
 80174a2:	0032      	movs	r2, r6
 80174a4:	9805      	ldr	r0, [sp, #20]
 80174a6:	f000 fc19 	bl	8017cdc <__lshift>
 80174aa:	0003      	movs	r3, r0
 80174ac:	3314      	adds	r3, #20
 80174ae:	0004      	movs	r4, r0
 80174b0:	1bbf      	subs	r7, r7, r6
 80174b2:	9304      	str	r3, [sp, #16]
 80174b4:	e7b7      	b.n	8017426 <__gethex+0x1fe>
 80174b6:	9b02      	ldr	r3, [sp, #8]
 80174b8:	685e      	ldr	r6, [r3, #4]
 80174ba:	42be      	cmp	r6, r7
 80174bc:	dd71      	ble.n	80175a2 <__gethex+0x37a>
 80174be:	9b01      	ldr	r3, [sp, #4]
 80174c0:	1bf6      	subs	r6, r6, r7
 80174c2:	42b3      	cmp	r3, r6
 80174c4:	dc38      	bgt.n	8017538 <__gethex+0x310>
 80174c6:	9b02      	ldr	r3, [sp, #8]
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	2b02      	cmp	r3, #2
 80174cc:	d026      	beq.n	801751c <__gethex+0x2f4>
 80174ce:	2b03      	cmp	r3, #3
 80174d0:	d02e      	beq.n	8017530 <__gethex+0x308>
 80174d2:	2b01      	cmp	r3, #1
 80174d4:	d119      	bne.n	801750a <__gethex+0x2e2>
 80174d6:	9b01      	ldr	r3, [sp, #4]
 80174d8:	42b3      	cmp	r3, r6
 80174da:	d116      	bne.n	801750a <__gethex+0x2e2>
 80174dc:	2b01      	cmp	r3, #1
 80174de:	d10d      	bne.n	80174fc <__gethex+0x2d4>
 80174e0:	9b02      	ldr	r3, [sp, #8]
 80174e2:	2662      	movs	r6, #98	; 0x62
 80174e4:	685b      	ldr	r3, [r3, #4]
 80174e6:	9301      	str	r3, [sp, #4]
 80174e8:	9a01      	ldr	r2, [sp, #4]
 80174ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174ec:	601a      	str	r2, [r3, #0]
 80174ee:	2301      	movs	r3, #1
 80174f0:	9a04      	ldr	r2, [sp, #16]
 80174f2:	6123      	str	r3, [r4, #16]
 80174f4:	6013      	str	r3, [r2, #0]
 80174f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80174f8:	601c      	str	r4, [r3, #0]
 80174fa:	e72e      	b.n	801735a <__gethex+0x132>
 80174fc:	9901      	ldr	r1, [sp, #4]
 80174fe:	0020      	movs	r0, r4
 8017500:	3901      	subs	r1, #1
 8017502:	f000 fe30 	bl	8018166 <__any_on>
 8017506:	2800      	cmp	r0, #0
 8017508:	d1ea      	bne.n	80174e0 <__gethex+0x2b8>
 801750a:	0021      	movs	r1, r4
 801750c:	9805      	ldr	r0, [sp, #20]
 801750e:	f000 f9fb 	bl	8017908 <_Bfree>
 8017512:	2300      	movs	r3, #0
 8017514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017516:	2650      	movs	r6, #80	; 0x50
 8017518:	6013      	str	r3, [r2, #0]
 801751a:	e71e      	b.n	801735a <__gethex+0x132>
 801751c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801751e:	2b00      	cmp	r3, #0
 8017520:	d1f3      	bne.n	801750a <__gethex+0x2e2>
 8017522:	e7dd      	b.n	80174e0 <__gethex+0x2b8>
 8017524:	0801cdf4 	.word	0x0801cdf4
 8017528:	0801cd19 	.word	0x0801cd19
 801752c:	0801cd89 	.word	0x0801cd89
 8017530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017532:	2b00      	cmp	r3, #0
 8017534:	d1d4      	bne.n	80174e0 <__gethex+0x2b8>
 8017536:	e7e8      	b.n	801750a <__gethex+0x2e2>
 8017538:	1e77      	subs	r7, r6, #1
 801753a:	2d00      	cmp	r5, #0
 801753c:	d12f      	bne.n	801759e <__gethex+0x376>
 801753e:	2f00      	cmp	r7, #0
 8017540:	d004      	beq.n	801754c <__gethex+0x324>
 8017542:	0039      	movs	r1, r7
 8017544:	0020      	movs	r0, r4
 8017546:	f000 fe0e 	bl	8018166 <__any_on>
 801754a:	0005      	movs	r5, r0
 801754c:	231f      	movs	r3, #31
 801754e:	117a      	asrs	r2, r7, #5
 8017550:	401f      	ands	r7, r3
 8017552:	3b1e      	subs	r3, #30
 8017554:	40bb      	lsls	r3, r7
 8017556:	9904      	ldr	r1, [sp, #16]
 8017558:	0092      	lsls	r2, r2, #2
 801755a:	5852      	ldr	r2, [r2, r1]
 801755c:	421a      	tst	r2, r3
 801755e:	d001      	beq.n	8017564 <__gethex+0x33c>
 8017560:	2302      	movs	r3, #2
 8017562:	431d      	orrs	r5, r3
 8017564:	9b01      	ldr	r3, [sp, #4]
 8017566:	0031      	movs	r1, r6
 8017568:	1b9b      	subs	r3, r3, r6
 801756a:	2602      	movs	r6, #2
 801756c:	0020      	movs	r0, r4
 801756e:	9301      	str	r3, [sp, #4]
 8017570:	f7ff fdf0 	bl	8017154 <rshift>
 8017574:	9b02      	ldr	r3, [sp, #8]
 8017576:	685f      	ldr	r7, [r3, #4]
 8017578:	2d00      	cmp	r5, #0
 801757a:	d041      	beq.n	8017600 <__gethex+0x3d8>
 801757c:	9b02      	ldr	r3, [sp, #8]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	2b02      	cmp	r3, #2
 8017582:	d010      	beq.n	80175a6 <__gethex+0x37e>
 8017584:	2b03      	cmp	r3, #3
 8017586:	d012      	beq.n	80175ae <__gethex+0x386>
 8017588:	2b01      	cmp	r3, #1
 801758a:	d106      	bne.n	801759a <__gethex+0x372>
 801758c:	07aa      	lsls	r2, r5, #30
 801758e:	d504      	bpl.n	801759a <__gethex+0x372>
 8017590:	9a04      	ldr	r2, [sp, #16]
 8017592:	6810      	ldr	r0, [r2, #0]
 8017594:	4305      	orrs	r5, r0
 8017596:	421d      	tst	r5, r3
 8017598:	d10c      	bne.n	80175b4 <__gethex+0x38c>
 801759a:	2310      	movs	r3, #16
 801759c:	e02f      	b.n	80175fe <__gethex+0x3d6>
 801759e:	2501      	movs	r5, #1
 80175a0:	e7d4      	b.n	801754c <__gethex+0x324>
 80175a2:	2601      	movs	r6, #1
 80175a4:	e7e8      	b.n	8017578 <__gethex+0x350>
 80175a6:	2301      	movs	r3, #1
 80175a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80175aa:	1a9b      	subs	r3, r3, r2
 80175ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80175ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d0f2      	beq.n	801759a <__gethex+0x372>
 80175b4:	6923      	ldr	r3, [r4, #16]
 80175b6:	2000      	movs	r0, #0
 80175b8:	9303      	str	r3, [sp, #12]
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	9304      	str	r3, [sp, #16]
 80175be:	0023      	movs	r3, r4
 80175c0:	9a04      	ldr	r2, [sp, #16]
 80175c2:	3314      	adds	r3, #20
 80175c4:	1899      	adds	r1, r3, r2
 80175c6:	681a      	ldr	r2, [r3, #0]
 80175c8:	1c55      	adds	r5, r2, #1
 80175ca:	d01e      	beq.n	801760a <__gethex+0x3e2>
 80175cc:	3201      	adds	r2, #1
 80175ce:	601a      	str	r2, [r3, #0]
 80175d0:	0023      	movs	r3, r4
 80175d2:	3314      	adds	r3, #20
 80175d4:	2e02      	cmp	r6, #2
 80175d6:	d140      	bne.n	801765a <__gethex+0x432>
 80175d8:	9a02      	ldr	r2, [sp, #8]
 80175da:	9901      	ldr	r1, [sp, #4]
 80175dc:	6812      	ldr	r2, [r2, #0]
 80175de:	3a01      	subs	r2, #1
 80175e0:	428a      	cmp	r2, r1
 80175e2:	d10b      	bne.n	80175fc <__gethex+0x3d4>
 80175e4:	114a      	asrs	r2, r1, #5
 80175e6:	211f      	movs	r1, #31
 80175e8:	9801      	ldr	r0, [sp, #4]
 80175ea:	0092      	lsls	r2, r2, #2
 80175ec:	4001      	ands	r1, r0
 80175ee:	2001      	movs	r0, #1
 80175f0:	0005      	movs	r5, r0
 80175f2:	408d      	lsls	r5, r1
 80175f4:	58d3      	ldr	r3, [r2, r3]
 80175f6:	422b      	tst	r3, r5
 80175f8:	d000      	beq.n	80175fc <__gethex+0x3d4>
 80175fa:	2601      	movs	r6, #1
 80175fc:	2320      	movs	r3, #32
 80175fe:	431e      	orrs	r6, r3
 8017600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017602:	601c      	str	r4, [r3, #0]
 8017604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017606:	601f      	str	r7, [r3, #0]
 8017608:	e6a7      	b.n	801735a <__gethex+0x132>
 801760a:	c301      	stmia	r3!, {r0}
 801760c:	4299      	cmp	r1, r3
 801760e:	d8da      	bhi.n	80175c6 <__gethex+0x39e>
 8017610:	9b03      	ldr	r3, [sp, #12]
 8017612:	68a2      	ldr	r2, [r4, #8]
 8017614:	4293      	cmp	r3, r2
 8017616:	db17      	blt.n	8017648 <__gethex+0x420>
 8017618:	6863      	ldr	r3, [r4, #4]
 801761a:	9805      	ldr	r0, [sp, #20]
 801761c:	1c59      	adds	r1, r3, #1
 801761e:	f000 f94b 	bl	80178b8 <_Balloc>
 8017622:	1e05      	subs	r5, r0, #0
 8017624:	d103      	bne.n	801762e <__gethex+0x406>
 8017626:	0002      	movs	r2, r0
 8017628:	2184      	movs	r1, #132	; 0x84
 801762a:	4b1c      	ldr	r3, [pc, #112]	; (801769c <__gethex+0x474>)
 801762c:	e6b8      	b.n	80173a0 <__gethex+0x178>
 801762e:	0021      	movs	r1, r4
 8017630:	6923      	ldr	r3, [r4, #16]
 8017632:	310c      	adds	r1, #12
 8017634:	1c9a      	adds	r2, r3, #2
 8017636:	0092      	lsls	r2, r2, #2
 8017638:	300c      	adds	r0, #12
 801763a:	f7fc f9d1 	bl	80139e0 <memcpy>
 801763e:	0021      	movs	r1, r4
 8017640:	9805      	ldr	r0, [sp, #20]
 8017642:	f000 f961 	bl	8017908 <_Bfree>
 8017646:	002c      	movs	r4, r5
 8017648:	6923      	ldr	r3, [r4, #16]
 801764a:	1c5a      	adds	r2, r3, #1
 801764c:	6122      	str	r2, [r4, #16]
 801764e:	2201      	movs	r2, #1
 8017650:	3304      	adds	r3, #4
 8017652:	009b      	lsls	r3, r3, #2
 8017654:	18e3      	adds	r3, r4, r3
 8017656:	605a      	str	r2, [r3, #4]
 8017658:	e7ba      	b.n	80175d0 <__gethex+0x3a8>
 801765a:	6922      	ldr	r2, [r4, #16]
 801765c:	9903      	ldr	r1, [sp, #12]
 801765e:	428a      	cmp	r2, r1
 8017660:	dd09      	ble.n	8017676 <__gethex+0x44e>
 8017662:	2101      	movs	r1, #1
 8017664:	0020      	movs	r0, r4
 8017666:	f7ff fd75 	bl	8017154 <rshift>
 801766a:	9b02      	ldr	r3, [sp, #8]
 801766c:	3701      	adds	r7, #1
 801766e:	689b      	ldr	r3, [r3, #8]
 8017670:	42bb      	cmp	r3, r7
 8017672:	dac2      	bge.n	80175fa <__gethex+0x3d2>
 8017674:	e6dc      	b.n	8017430 <__gethex+0x208>
 8017676:	221f      	movs	r2, #31
 8017678:	9d01      	ldr	r5, [sp, #4]
 801767a:	9901      	ldr	r1, [sp, #4]
 801767c:	2601      	movs	r6, #1
 801767e:	4015      	ands	r5, r2
 8017680:	4211      	tst	r1, r2
 8017682:	d0bb      	beq.n	80175fc <__gethex+0x3d4>
 8017684:	9a04      	ldr	r2, [sp, #16]
 8017686:	189b      	adds	r3, r3, r2
 8017688:	3b04      	subs	r3, #4
 801768a:	6818      	ldr	r0, [r3, #0]
 801768c:	f000 f9d6 	bl	8017a3c <__hi0bits>
 8017690:	2320      	movs	r3, #32
 8017692:	1b5d      	subs	r5, r3, r5
 8017694:	42a8      	cmp	r0, r5
 8017696:	dbe4      	blt.n	8017662 <__gethex+0x43a>
 8017698:	e7b0      	b.n	80175fc <__gethex+0x3d4>
 801769a:	46c0      	nop			; (mov r8, r8)
 801769c:	0801cd19 	.word	0x0801cd19

080176a0 <L_shift>:
 80176a0:	2308      	movs	r3, #8
 80176a2:	b570      	push	{r4, r5, r6, lr}
 80176a4:	2520      	movs	r5, #32
 80176a6:	1a9a      	subs	r2, r3, r2
 80176a8:	0092      	lsls	r2, r2, #2
 80176aa:	1aad      	subs	r5, r5, r2
 80176ac:	6843      	ldr	r3, [r0, #4]
 80176ae:	6806      	ldr	r6, [r0, #0]
 80176b0:	001c      	movs	r4, r3
 80176b2:	40ac      	lsls	r4, r5
 80176b4:	40d3      	lsrs	r3, r2
 80176b6:	4334      	orrs	r4, r6
 80176b8:	6004      	str	r4, [r0, #0]
 80176ba:	6043      	str	r3, [r0, #4]
 80176bc:	3004      	adds	r0, #4
 80176be:	4288      	cmp	r0, r1
 80176c0:	d3f4      	bcc.n	80176ac <L_shift+0xc>
 80176c2:	bd70      	pop	{r4, r5, r6, pc}

080176c4 <__match>:
 80176c4:	b530      	push	{r4, r5, lr}
 80176c6:	6803      	ldr	r3, [r0, #0]
 80176c8:	780c      	ldrb	r4, [r1, #0]
 80176ca:	3301      	adds	r3, #1
 80176cc:	2c00      	cmp	r4, #0
 80176ce:	d102      	bne.n	80176d6 <__match+0x12>
 80176d0:	6003      	str	r3, [r0, #0]
 80176d2:	2001      	movs	r0, #1
 80176d4:	bd30      	pop	{r4, r5, pc}
 80176d6:	781a      	ldrb	r2, [r3, #0]
 80176d8:	0015      	movs	r5, r2
 80176da:	3d41      	subs	r5, #65	; 0x41
 80176dc:	2d19      	cmp	r5, #25
 80176de:	d800      	bhi.n	80176e2 <__match+0x1e>
 80176e0:	3220      	adds	r2, #32
 80176e2:	3101      	adds	r1, #1
 80176e4:	42a2      	cmp	r2, r4
 80176e6:	d0ef      	beq.n	80176c8 <__match+0x4>
 80176e8:	2000      	movs	r0, #0
 80176ea:	e7f3      	b.n	80176d4 <__match+0x10>

080176ec <__hexnan>:
 80176ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ee:	680b      	ldr	r3, [r1, #0]
 80176f0:	b08b      	sub	sp, #44	; 0x2c
 80176f2:	115c      	asrs	r4, r3, #5
 80176f4:	00a4      	lsls	r4, r4, #2
 80176f6:	9201      	str	r2, [sp, #4]
 80176f8:	1912      	adds	r2, r2, r4
 80176fa:	0019      	movs	r1, r3
 80176fc:	9202      	str	r2, [sp, #8]
 80176fe:	221f      	movs	r2, #31
 8017700:	4011      	ands	r1, r2
 8017702:	9008      	str	r0, [sp, #32]
 8017704:	9106      	str	r1, [sp, #24]
 8017706:	4213      	tst	r3, r2
 8017708:	d002      	beq.n	8017710 <__hexnan+0x24>
 801770a:	9b02      	ldr	r3, [sp, #8]
 801770c:	3304      	adds	r3, #4
 801770e:	9302      	str	r3, [sp, #8]
 8017710:	9b02      	ldr	r3, [sp, #8]
 8017712:	2500      	movs	r5, #0
 8017714:	1f1e      	subs	r6, r3, #4
 8017716:	0037      	movs	r7, r6
 8017718:	0034      	movs	r4, r6
 801771a:	9b08      	ldr	r3, [sp, #32]
 801771c:	6035      	str	r5, [r6, #0]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	9507      	str	r5, [sp, #28]
 8017722:	9305      	str	r3, [sp, #20]
 8017724:	9503      	str	r5, [sp, #12]
 8017726:	9b05      	ldr	r3, [sp, #20]
 8017728:	3301      	adds	r3, #1
 801772a:	9309      	str	r3, [sp, #36]	; 0x24
 801772c:	9b05      	ldr	r3, [sp, #20]
 801772e:	785b      	ldrb	r3, [r3, #1]
 8017730:	9304      	str	r3, [sp, #16]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d028      	beq.n	8017788 <__hexnan+0x9c>
 8017736:	9804      	ldr	r0, [sp, #16]
 8017738:	f7ff fd60 	bl	80171fc <__hexdig_fun>
 801773c:	2800      	cmp	r0, #0
 801773e:	d154      	bne.n	80177ea <__hexnan+0xfe>
 8017740:	9b04      	ldr	r3, [sp, #16]
 8017742:	2b20      	cmp	r3, #32
 8017744:	d819      	bhi.n	801777a <__hexnan+0x8e>
 8017746:	9b03      	ldr	r3, [sp, #12]
 8017748:	9a07      	ldr	r2, [sp, #28]
 801774a:	4293      	cmp	r3, r2
 801774c:	dd12      	ble.n	8017774 <__hexnan+0x88>
 801774e:	42bc      	cmp	r4, r7
 8017750:	d206      	bcs.n	8017760 <__hexnan+0x74>
 8017752:	2d07      	cmp	r5, #7
 8017754:	dc04      	bgt.n	8017760 <__hexnan+0x74>
 8017756:	002a      	movs	r2, r5
 8017758:	0039      	movs	r1, r7
 801775a:	0020      	movs	r0, r4
 801775c:	f7ff ffa0 	bl	80176a0 <L_shift>
 8017760:	9b01      	ldr	r3, [sp, #4]
 8017762:	2508      	movs	r5, #8
 8017764:	429c      	cmp	r4, r3
 8017766:	d905      	bls.n	8017774 <__hexnan+0x88>
 8017768:	1f27      	subs	r7, r4, #4
 801776a:	2500      	movs	r5, #0
 801776c:	003c      	movs	r4, r7
 801776e:	9b03      	ldr	r3, [sp, #12]
 8017770:	603d      	str	r5, [r7, #0]
 8017772:	9307      	str	r3, [sp, #28]
 8017774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017776:	9305      	str	r3, [sp, #20]
 8017778:	e7d5      	b.n	8017726 <__hexnan+0x3a>
 801777a:	9b04      	ldr	r3, [sp, #16]
 801777c:	2b29      	cmp	r3, #41	; 0x29
 801777e:	d158      	bne.n	8017832 <__hexnan+0x146>
 8017780:	9b05      	ldr	r3, [sp, #20]
 8017782:	9a08      	ldr	r2, [sp, #32]
 8017784:	3302      	adds	r3, #2
 8017786:	6013      	str	r3, [r2, #0]
 8017788:	9b03      	ldr	r3, [sp, #12]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d051      	beq.n	8017832 <__hexnan+0x146>
 801778e:	42bc      	cmp	r4, r7
 8017790:	d206      	bcs.n	80177a0 <__hexnan+0xb4>
 8017792:	2d07      	cmp	r5, #7
 8017794:	dc04      	bgt.n	80177a0 <__hexnan+0xb4>
 8017796:	002a      	movs	r2, r5
 8017798:	0039      	movs	r1, r7
 801779a:	0020      	movs	r0, r4
 801779c:	f7ff ff80 	bl	80176a0 <L_shift>
 80177a0:	9b01      	ldr	r3, [sp, #4]
 80177a2:	429c      	cmp	r4, r3
 80177a4:	d935      	bls.n	8017812 <__hexnan+0x126>
 80177a6:	001a      	movs	r2, r3
 80177a8:	0023      	movs	r3, r4
 80177aa:	cb02      	ldmia	r3!, {r1}
 80177ac:	c202      	stmia	r2!, {r1}
 80177ae:	429e      	cmp	r6, r3
 80177b0:	d2fb      	bcs.n	80177aa <__hexnan+0xbe>
 80177b2:	9b02      	ldr	r3, [sp, #8]
 80177b4:	1c61      	adds	r1, r4, #1
 80177b6:	1eda      	subs	r2, r3, #3
 80177b8:	2304      	movs	r3, #4
 80177ba:	4291      	cmp	r1, r2
 80177bc:	d805      	bhi.n	80177ca <__hexnan+0xde>
 80177be:	9b02      	ldr	r3, [sp, #8]
 80177c0:	3b04      	subs	r3, #4
 80177c2:	1b1c      	subs	r4, r3, r4
 80177c4:	08a4      	lsrs	r4, r4, #2
 80177c6:	3401      	adds	r4, #1
 80177c8:	00a3      	lsls	r3, r4, #2
 80177ca:	9a01      	ldr	r2, [sp, #4]
 80177cc:	18d4      	adds	r4, r2, r3
 80177ce:	2300      	movs	r3, #0
 80177d0:	c408      	stmia	r4!, {r3}
 80177d2:	42a6      	cmp	r6, r4
 80177d4:	d2fc      	bcs.n	80177d0 <__hexnan+0xe4>
 80177d6:	6833      	ldr	r3, [r6, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d104      	bne.n	80177e6 <__hexnan+0xfa>
 80177dc:	9b01      	ldr	r3, [sp, #4]
 80177de:	429e      	cmp	r6, r3
 80177e0:	d125      	bne.n	801782e <__hexnan+0x142>
 80177e2:	2301      	movs	r3, #1
 80177e4:	6033      	str	r3, [r6, #0]
 80177e6:	2005      	movs	r0, #5
 80177e8:	e024      	b.n	8017834 <__hexnan+0x148>
 80177ea:	9b03      	ldr	r3, [sp, #12]
 80177ec:	3501      	adds	r5, #1
 80177ee:	3301      	adds	r3, #1
 80177f0:	9303      	str	r3, [sp, #12]
 80177f2:	2d08      	cmp	r5, #8
 80177f4:	dd06      	ble.n	8017804 <__hexnan+0x118>
 80177f6:	9b01      	ldr	r3, [sp, #4]
 80177f8:	429c      	cmp	r4, r3
 80177fa:	d9bb      	bls.n	8017774 <__hexnan+0x88>
 80177fc:	2300      	movs	r3, #0
 80177fe:	2501      	movs	r5, #1
 8017800:	3c04      	subs	r4, #4
 8017802:	6023      	str	r3, [r4, #0]
 8017804:	220f      	movs	r2, #15
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	4010      	ands	r0, r2
 801780a:	011b      	lsls	r3, r3, #4
 801780c:	4318      	orrs	r0, r3
 801780e:	6020      	str	r0, [r4, #0]
 8017810:	e7b0      	b.n	8017774 <__hexnan+0x88>
 8017812:	9b06      	ldr	r3, [sp, #24]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d0de      	beq.n	80177d6 <__hexnan+0xea>
 8017818:	2220      	movs	r2, #32
 801781a:	1ad2      	subs	r2, r2, r3
 801781c:	2301      	movs	r3, #1
 801781e:	425b      	negs	r3, r3
 8017820:	40d3      	lsrs	r3, r2
 8017822:	9c02      	ldr	r4, [sp, #8]
 8017824:	3c04      	subs	r4, #4
 8017826:	6822      	ldr	r2, [r4, #0]
 8017828:	4013      	ands	r3, r2
 801782a:	6023      	str	r3, [r4, #0]
 801782c:	e7d3      	b.n	80177d6 <__hexnan+0xea>
 801782e:	3e04      	subs	r6, #4
 8017830:	e7d1      	b.n	80177d6 <__hexnan+0xea>
 8017832:	2004      	movs	r0, #4
 8017834:	b00b      	add	sp, #44	; 0x2c
 8017836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017838 <__locale_mb_cur_max>:
 8017838:	2394      	movs	r3, #148	; 0x94
 801783a:	4a02      	ldr	r2, [pc, #8]	; (8017844 <__locale_mb_cur_max+0xc>)
 801783c:	005b      	lsls	r3, r3, #1
 801783e:	5cd0      	ldrb	r0, [r2, r3]
 8017840:	4770      	bx	lr
 8017842:	46c0      	nop			; (mov r8, r8)
 8017844:	200008f0 	.word	0x200008f0

08017848 <_localeconv_r>:
 8017848:	4800      	ldr	r0, [pc, #0]	; (801784c <_localeconv_r+0x4>)
 801784a:	4770      	bx	lr
 801784c:	200009e0 	.word	0x200009e0

08017850 <__retarget_lock_init_recursive>:
 8017850:	4770      	bx	lr

08017852 <__retarget_lock_close_recursive>:
 8017852:	4770      	bx	lr

08017854 <__retarget_lock_acquire_recursive>:
 8017854:	4770      	bx	lr

08017856 <__retarget_lock_release_recursive>:
 8017856:	4770      	bx	lr

08017858 <__ascii_mbtowc>:
 8017858:	b082      	sub	sp, #8
 801785a:	2900      	cmp	r1, #0
 801785c:	d100      	bne.n	8017860 <__ascii_mbtowc+0x8>
 801785e:	a901      	add	r1, sp, #4
 8017860:	1e10      	subs	r0, r2, #0
 8017862:	d006      	beq.n	8017872 <__ascii_mbtowc+0x1a>
 8017864:	2b00      	cmp	r3, #0
 8017866:	d006      	beq.n	8017876 <__ascii_mbtowc+0x1e>
 8017868:	7813      	ldrb	r3, [r2, #0]
 801786a:	600b      	str	r3, [r1, #0]
 801786c:	7810      	ldrb	r0, [r2, #0]
 801786e:	1e43      	subs	r3, r0, #1
 8017870:	4198      	sbcs	r0, r3
 8017872:	b002      	add	sp, #8
 8017874:	4770      	bx	lr
 8017876:	2002      	movs	r0, #2
 8017878:	4240      	negs	r0, r0
 801787a:	e7fa      	b.n	8017872 <__ascii_mbtowc+0x1a>

0801787c <memchr>:
 801787c:	b2c9      	uxtb	r1, r1
 801787e:	1882      	adds	r2, r0, r2
 8017880:	4290      	cmp	r0, r2
 8017882:	d101      	bne.n	8017888 <memchr+0xc>
 8017884:	2000      	movs	r0, #0
 8017886:	4770      	bx	lr
 8017888:	7803      	ldrb	r3, [r0, #0]
 801788a:	428b      	cmp	r3, r1
 801788c:	d0fb      	beq.n	8017886 <memchr+0xa>
 801788e:	3001      	adds	r0, #1
 8017890:	e7f6      	b.n	8017880 <memchr+0x4>

08017892 <memmove>:
 8017892:	b510      	push	{r4, lr}
 8017894:	4288      	cmp	r0, r1
 8017896:	d902      	bls.n	801789e <memmove+0xc>
 8017898:	188b      	adds	r3, r1, r2
 801789a:	4298      	cmp	r0, r3
 801789c:	d303      	bcc.n	80178a6 <memmove+0x14>
 801789e:	2300      	movs	r3, #0
 80178a0:	e007      	b.n	80178b2 <memmove+0x20>
 80178a2:	5c8b      	ldrb	r3, [r1, r2]
 80178a4:	5483      	strb	r3, [r0, r2]
 80178a6:	3a01      	subs	r2, #1
 80178a8:	d2fb      	bcs.n	80178a2 <memmove+0x10>
 80178aa:	bd10      	pop	{r4, pc}
 80178ac:	5ccc      	ldrb	r4, [r1, r3]
 80178ae:	54c4      	strb	r4, [r0, r3]
 80178b0:	3301      	adds	r3, #1
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d1fa      	bne.n	80178ac <memmove+0x1a>
 80178b6:	e7f8      	b.n	80178aa <memmove+0x18>

080178b8 <_Balloc>:
 80178b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80178ba:	b570      	push	{r4, r5, r6, lr}
 80178bc:	0006      	movs	r6, r0
 80178be:	000c      	movs	r4, r1
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d012      	beq.n	80178ea <_Balloc+0x32>
 80178c4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80178c6:	00a3      	lsls	r3, r4, #2
 80178c8:	18d3      	adds	r3, r2, r3
 80178ca:	6818      	ldr	r0, [r3, #0]
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d115      	bne.n	80178fc <_Balloc+0x44>
 80178d0:	2101      	movs	r1, #1
 80178d2:	000d      	movs	r5, r1
 80178d4:	40a5      	lsls	r5, r4
 80178d6:	1d6a      	adds	r2, r5, #5
 80178d8:	0030      	movs	r0, r6
 80178da:	0092      	lsls	r2, r2, #2
 80178dc:	f000 fd8c 	bl	80183f8 <_calloc_r>
 80178e0:	2800      	cmp	r0, #0
 80178e2:	d009      	beq.n	80178f8 <_Balloc+0x40>
 80178e4:	6044      	str	r4, [r0, #4]
 80178e6:	6085      	str	r5, [r0, #8]
 80178e8:	e00a      	b.n	8017900 <_Balloc+0x48>
 80178ea:	2221      	movs	r2, #33	; 0x21
 80178ec:	2104      	movs	r1, #4
 80178ee:	f000 fd83 	bl	80183f8 <_calloc_r>
 80178f2:	64f0      	str	r0, [r6, #76]	; 0x4c
 80178f4:	2800      	cmp	r0, #0
 80178f6:	d1e5      	bne.n	80178c4 <_Balloc+0xc>
 80178f8:	2000      	movs	r0, #0
 80178fa:	bd70      	pop	{r4, r5, r6, pc}
 80178fc:	6802      	ldr	r2, [r0, #0]
 80178fe:	601a      	str	r2, [r3, #0]
 8017900:	2300      	movs	r3, #0
 8017902:	6103      	str	r3, [r0, #16]
 8017904:	60c3      	str	r3, [r0, #12]
 8017906:	e7f8      	b.n	80178fa <_Balloc+0x42>

08017908 <_Bfree>:
 8017908:	2900      	cmp	r1, #0
 801790a:	d006      	beq.n	801791a <_Bfree+0x12>
 801790c:	684b      	ldr	r3, [r1, #4]
 801790e:	009a      	lsls	r2, r3, #2
 8017910:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017912:	189b      	adds	r3, r3, r2
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	600a      	str	r2, [r1, #0]
 8017918:	6019      	str	r1, [r3, #0]
 801791a:	4770      	bx	lr

0801791c <__multadd>:
 801791c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801791e:	000e      	movs	r6, r1
 8017920:	9001      	str	r0, [sp, #4]
 8017922:	000c      	movs	r4, r1
 8017924:	001d      	movs	r5, r3
 8017926:	2000      	movs	r0, #0
 8017928:	690f      	ldr	r7, [r1, #16]
 801792a:	3614      	adds	r6, #20
 801792c:	6833      	ldr	r3, [r6, #0]
 801792e:	3001      	adds	r0, #1
 8017930:	b299      	uxth	r1, r3
 8017932:	4351      	muls	r1, r2
 8017934:	0c1b      	lsrs	r3, r3, #16
 8017936:	4353      	muls	r3, r2
 8017938:	1949      	adds	r1, r1, r5
 801793a:	0c0d      	lsrs	r5, r1, #16
 801793c:	195b      	adds	r3, r3, r5
 801793e:	0c1d      	lsrs	r5, r3, #16
 8017940:	b289      	uxth	r1, r1
 8017942:	041b      	lsls	r3, r3, #16
 8017944:	185b      	adds	r3, r3, r1
 8017946:	c608      	stmia	r6!, {r3}
 8017948:	4287      	cmp	r7, r0
 801794a:	dcef      	bgt.n	801792c <__multadd+0x10>
 801794c:	2d00      	cmp	r5, #0
 801794e:	d022      	beq.n	8017996 <__multadd+0x7a>
 8017950:	68a3      	ldr	r3, [r4, #8]
 8017952:	42bb      	cmp	r3, r7
 8017954:	dc19      	bgt.n	801798a <__multadd+0x6e>
 8017956:	6863      	ldr	r3, [r4, #4]
 8017958:	9801      	ldr	r0, [sp, #4]
 801795a:	1c59      	adds	r1, r3, #1
 801795c:	f7ff ffac 	bl	80178b8 <_Balloc>
 8017960:	1e06      	subs	r6, r0, #0
 8017962:	d105      	bne.n	8017970 <__multadd+0x54>
 8017964:	0002      	movs	r2, r0
 8017966:	21b5      	movs	r1, #181	; 0xb5
 8017968:	4b0c      	ldr	r3, [pc, #48]	; (801799c <__multadd+0x80>)
 801796a:	480d      	ldr	r0, [pc, #52]	; (80179a0 <__multadd+0x84>)
 801796c:	f000 fd26 	bl	80183bc <__assert_func>
 8017970:	0021      	movs	r1, r4
 8017972:	6923      	ldr	r3, [r4, #16]
 8017974:	310c      	adds	r1, #12
 8017976:	1c9a      	adds	r2, r3, #2
 8017978:	0092      	lsls	r2, r2, #2
 801797a:	300c      	adds	r0, #12
 801797c:	f7fc f830 	bl	80139e0 <memcpy>
 8017980:	0021      	movs	r1, r4
 8017982:	9801      	ldr	r0, [sp, #4]
 8017984:	f7ff ffc0 	bl	8017908 <_Bfree>
 8017988:	0034      	movs	r4, r6
 801798a:	1d3b      	adds	r3, r7, #4
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	18e3      	adds	r3, r4, r3
 8017990:	605d      	str	r5, [r3, #4]
 8017992:	1c7b      	adds	r3, r7, #1
 8017994:	6123      	str	r3, [r4, #16]
 8017996:	0020      	movs	r0, r4
 8017998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801799a:	46c0      	nop			; (mov r8, r8)
 801799c:	0801cd19 	.word	0x0801cd19
 80179a0:	0801ce08 	.word	0x0801ce08

080179a4 <__s2b>:
 80179a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179a6:	0006      	movs	r6, r0
 80179a8:	0018      	movs	r0, r3
 80179aa:	000c      	movs	r4, r1
 80179ac:	3008      	adds	r0, #8
 80179ae:	2109      	movs	r1, #9
 80179b0:	9301      	str	r3, [sp, #4]
 80179b2:	0015      	movs	r5, r2
 80179b4:	f7e8 fc56 	bl	8000264 <__divsi3>
 80179b8:	2301      	movs	r3, #1
 80179ba:	2100      	movs	r1, #0
 80179bc:	4283      	cmp	r3, r0
 80179be:	db0a      	blt.n	80179d6 <__s2b+0x32>
 80179c0:	0030      	movs	r0, r6
 80179c2:	f7ff ff79 	bl	80178b8 <_Balloc>
 80179c6:	1e01      	subs	r1, r0, #0
 80179c8:	d108      	bne.n	80179dc <__s2b+0x38>
 80179ca:	0002      	movs	r2, r0
 80179cc:	4b19      	ldr	r3, [pc, #100]	; (8017a34 <__s2b+0x90>)
 80179ce:	481a      	ldr	r0, [pc, #104]	; (8017a38 <__s2b+0x94>)
 80179d0:	31ce      	adds	r1, #206	; 0xce
 80179d2:	f000 fcf3 	bl	80183bc <__assert_func>
 80179d6:	005b      	lsls	r3, r3, #1
 80179d8:	3101      	adds	r1, #1
 80179da:	e7ef      	b.n	80179bc <__s2b+0x18>
 80179dc:	9b08      	ldr	r3, [sp, #32]
 80179de:	6143      	str	r3, [r0, #20]
 80179e0:	2301      	movs	r3, #1
 80179e2:	6103      	str	r3, [r0, #16]
 80179e4:	2d09      	cmp	r5, #9
 80179e6:	dd18      	ble.n	8017a1a <__s2b+0x76>
 80179e8:	0023      	movs	r3, r4
 80179ea:	3309      	adds	r3, #9
 80179ec:	001f      	movs	r7, r3
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	1964      	adds	r4, r4, r5
 80179f2:	783b      	ldrb	r3, [r7, #0]
 80179f4:	220a      	movs	r2, #10
 80179f6:	0030      	movs	r0, r6
 80179f8:	3b30      	subs	r3, #48	; 0x30
 80179fa:	f7ff ff8f 	bl	801791c <__multadd>
 80179fe:	3701      	adds	r7, #1
 8017a00:	0001      	movs	r1, r0
 8017a02:	42a7      	cmp	r7, r4
 8017a04:	d1f5      	bne.n	80179f2 <__s2b+0x4e>
 8017a06:	002c      	movs	r4, r5
 8017a08:	9b00      	ldr	r3, [sp, #0]
 8017a0a:	3c08      	subs	r4, #8
 8017a0c:	191c      	adds	r4, r3, r4
 8017a0e:	002f      	movs	r7, r5
 8017a10:	9b01      	ldr	r3, [sp, #4]
 8017a12:	429f      	cmp	r7, r3
 8017a14:	db04      	blt.n	8017a20 <__s2b+0x7c>
 8017a16:	0008      	movs	r0, r1
 8017a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a1a:	2509      	movs	r5, #9
 8017a1c:	340a      	adds	r4, #10
 8017a1e:	e7f6      	b.n	8017a0e <__s2b+0x6a>
 8017a20:	1b63      	subs	r3, r4, r5
 8017a22:	5ddb      	ldrb	r3, [r3, r7]
 8017a24:	220a      	movs	r2, #10
 8017a26:	0030      	movs	r0, r6
 8017a28:	3b30      	subs	r3, #48	; 0x30
 8017a2a:	f7ff ff77 	bl	801791c <__multadd>
 8017a2e:	3701      	adds	r7, #1
 8017a30:	0001      	movs	r1, r0
 8017a32:	e7ed      	b.n	8017a10 <__s2b+0x6c>
 8017a34:	0801cd19 	.word	0x0801cd19
 8017a38:	0801ce08 	.word	0x0801ce08

08017a3c <__hi0bits>:
 8017a3c:	0003      	movs	r3, r0
 8017a3e:	0c02      	lsrs	r2, r0, #16
 8017a40:	2000      	movs	r0, #0
 8017a42:	4282      	cmp	r2, r0
 8017a44:	d101      	bne.n	8017a4a <__hi0bits+0xe>
 8017a46:	041b      	lsls	r3, r3, #16
 8017a48:	3010      	adds	r0, #16
 8017a4a:	0e1a      	lsrs	r2, r3, #24
 8017a4c:	d101      	bne.n	8017a52 <__hi0bits+0x16>
 8017a4e:	3008      	adds	r0, #8
 8017a50:	021b      	lsls	r3, r3, #8
 8017a52:	0f1a      	lsrs	r2, r3, #28
 8017a54:	d101      	bne.n	8017a5a <__hi0bits+0x1e>
 8017a56:	3004      	adds	r0, #4
 8017a58:	011b      	lsls	r3, r3, #4
 8017a5a:	0f9a      	lsrs	r2, r3, #30
 8017a5c:	d101      	bne.n	8017a62 <__hi0bits+0x26>
 8017a5e:	3002      	adds	r0, #2
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	db03      	blt.n	8017a6e <__hi0bits+0x32>
 8017a66:	3001      	adds	r0, #1
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	d400      	bmi.n	8017a6e <__hi0bits+0x32>
 8017a6c:	2020      	movs	r0, #32
 8017a6e:	4770      	bx	lr

08017a70 <__lo0bits>:
 8017a70:	6803      	ldr	r3, [r0, #0]
 8017a72:	0002      	movs	r2, r0
 8017a74:	2107      	movs	r1, #7
 8017a76:	0018      	movs	r0, r3
 8017a78:	4008      	ands	r0, r1
 8017a7a:	420b      	tst	r3, r1
 8017a7c:	d00d      	beq.n	8017a9a <__lo0bits+0x2a>
 8017a7e:	3906      	subs	r1, #6
 8017a80:	2000      	movs	r0, #0
 8017a82:	420b      	tst	r3, r1
 8017a84:	d105      	bne.n	8017a92 <__lo0bits+0x22>
 8017a86:	3002      	adds	r0, #2
 8017a88:	4203      	tst	r3, r0
 8017a8a:	d003      	beq.n	8017a94 <__lo0bits+0x24>
 8017a8c:	40cb      	lsrs	r3, r1
 8017a8e:	0008      	movs	r0, r1
 8017a90:	6013      	str	r3, [r2, #0]
 8017a92:	4770      	bx	lr
 8017a94:	089b      	lsrs	r3, r3, #2
 8017a96:	6013      	str	r3, [r2, #0]
 8017a98:	e7fb      	b.n	8017a92 <__lo0bits+0x22>
 8017a9a:	b299      	uxth	r1, r3
 8017a9c:	2900      	cmp	r1, #0
 8017a9e:	d101      	bne.n	8017aa4 <__lo0bits+0x34>
 8017aa0:	2010      	movs	r0, #16
 8017aa2:	0c1b      	lsrs	r3, r3, #16
 8017aa4:	b2d9      	uxtb	r1, r3
 8017aa6:	2900      	cmp	r1, #0
 8017aa8:	d101      	bne.n	8017aae <__lo0bits+0x3e>
 8017aaa:	3008      	adds	r0, #8
 8017aac:	0a1b      	lsrs	r3, r3, #8
 8017aae:	0719      	lsls	r1, r3, #28
 8017ab0:	d101      	bne.n	8017ab6 <__lo0bits+0x46>
 8017ab2:	3004      	adds	r0, #4
 8017ab4:	091b      	lsrs	r3, r3, #4
 8017ab6:	0799      	lsls	r1, r3, #30
 8017ab8:	d101      	bne.n	8017abe <__lo0bits+0x4e>
 8017aba:	3002      	adds	r0, #2
 8017abc:	089b      	lsrs	r3, r3, #2
 8017abe:	07d9      	lsls	r1, r3, #31
 8017ac0:	d4e9      	bmi.n	8017a96 <__lo0bits+0x26>
 8017ac2:	3001      	adds	r0, #1
 8017ac4:	085b      	lsrs	r3, r3, #1
 8017ac6:	d1e6      	bne.n	8017a96 <__lo0bits+0x26>
 8017ac8:	2020      	movs	r0, #32
 8017aca:	e7e2      	b.n	8017a92 <__lo0bits+0x22>

08017acc <__i2b>:
 8017acc:	b510      	push	{r4, lr}
 8017ace:	000c      	movs	r4, r1
 8017ad0:	2101      	movs	r1, #1
 8017ad2:	f7ff fef1 	bl	80178b8 <_Balloc>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d106      	bne.n	8017ae8 <__i2b+0x1c>
 8017ada:	21a0      	movs	r1, #160	; 0xa0
 8017adc:	0002      	movs	r2, r0
 8017ade:	4b04      	ldr	r3, [pc, #16]	; (8017af0 <__i2b+0x24>)
 8017ae0:	4804      	ldr	r0, [pc, #16]	; (8017af4 <__i2b+0x28>)
 8017ae2:	0049      	lsls	r1, r1, #1
 8017ae4:	f000 fc6a 	bl	80183bc <__assert_func>
 8017ae8:	2301      	movs	r3, #1
 8017aea:	6144      	str	r4, [r0, #20]
 8017aec:	6103      	str	r3, [r0, #16]
 8017aee:	bd10      	pop	{r4, pc}
 8017af0:	0801cd19 	.word	0x0801cd19
 8017af4:	0801ce08 	.word	0x0801ce08

08017af8 <__multiply>:
 8017af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017afa:	690b      	ldr	r3, [r1, #16]
 8017afc:	0014      	movs	r4, r2
 8017afe:	6912      	ldr	r2, [r2, #16]
 8017b00:	000d      	movs	r5, r1
 8017b02:	b089      	sub	sp, #36	; 0x24
 8017b04:	4293      	cmp	r3, r2
 8017b06:	da01      	bge.n	8017b0c <__multiply+0x14>
 8017b08:	0025      	movs	r5, r4
 8017b0a:	000c      	movs	r4, r1
 8017b0c:	692f      	ldr	r7, [r5, #16]
 8017b0e:	6926      	ldr	r6, [r4, #16]
 8017b10:	6869      	ldr	r1, [r5, #4]
 8017b12:	19bb      	adds	r3, r7, r6
 8017b14:	9302      	str	r3, [sp, #8]
 8017b16:	68ab      	ldr	r3, [r5, #8]
 8017b18:	19ba      	adds	r2, r7, r6
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	da00      	bge.n	8017b20 <__multiply+0x28>
 8017b1e:	3101      	adds	r1, #1
 8017b20:	f7ff feca 	bl	80178b8 <_Balloc>
 8017b24:	9001      	str	r0, [sp, #4]
 8017b26:	2800      	cmp	r0, #0
 8017b28:	d106      	bne.n	8017b38 <__multiply+0x40>
 8017b2a:	215e      	movs	r1, #94	; 0x5e
 8017b2c:	0002      	movs	r2, r0
 8017b2e:	4b48      	ldr	r3, [pc, #288]	; (8017c50 <__multiply+0x158>)
 8017b30:	4848      	ldr	r0, [pc, #288]	; (8017c54 <__multiply+0x15c>)
 8017b32:	31ff      	adds	r1, #255	; 0xff
 8017b34:	f000 fc42 	bl	80183bc <__assert_func>
 8017b38:	9b01      	ldr	r3, [sp, #4]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	3314      	adds	r3, #20
 8017b3e:	469c      	mov	ip, r3
 8017b40:	19bb      	adds	r3, r7, r6
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	4463      	add	r3, ip
 8017b46:	9303      	str	r3, [sp, #12]
 8017b48:	4663      	mov	r3, ip
 8017b4a:	9903      	ldr	r1, [sp, #12]
 8017b4c:	428b      	cmp	r3, r1
 8017b4e:	d32c      	bcc.n	8017baa <__multiply+0xb2>
 8017b50:	002b      	movs	r3, r5
 8017b52:	0022      	movs	r2, r4
 8017b54:	3314      	adds	r3, #20
 8017b56:	00bf      	lsls	r7, r7, #2
 8017b58:	3214      	adds	r2, #20
 8017b5a:	9306      	str	r3, [sp, #24]
 8017b5c:	00b6      	lsls	r6, r6, #2
 8017b5e:	19db      	adds	r3, r3, r7
 8017b60:	9304      	str	r3, [sp, #16]
 8017b62:	1993      	adds	r3, r2, r6
 8017b64:	9307      	str	r3, [sp, #28]
 8017b66:	2304      	movs	r3, #4
 8017b68:	9305      	str	r3, [sp, #20]
 8017b6a:	002b      	movs	r3, r5
 8017b6c:	9904      	ldr	r1, [sp, #16]
 8017b6e:	3315      	adds	r3, #21
 8017b70:	9200      	str	r2, [sp, #0]
 8017b72:	4299      	cmp	r1, r3
 8017b74:	d305      	bcc.n	8017b82 <__multiply+0x8a>
 8017b76:	1b4b      	subs	r3, r1, r5
 8017b78:	3b15      	subs	r3, #21
 8017b7a:	089b      	lsrs	r3, r3, #2
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	9305      	str	r3, [sp, #20]
 8017b82:	9b07      	ldr	r3, [sp, #28]
 8017b84:	9a00      	ldr	r2, [sp, #0]
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d311      	bcc.n	8017bae <__multiply+0xb6>
 8017b8a:	9b02      	ldr	r3, [sp, #8]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	dd06      	ble.n	8017b9e <__multiply+0xa6>
 8017b90:	9b03      	ldr	r3, [sp, #12]
 8017b92:	3b04      	subs	r3, #4
 8017b94:	9303      	str	r3, [sp, #12]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	9300      	str	r3, [sp, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d054      	beq.n	8017c48 <__multiply+0x150>
 8017b9e:	9b01      	ldr	r3, [sp, #4]
 8017ba0:	9a02      	ldr	r2, [sp, #8]
 8017ba2:	0018      	movs	r0, r3
 8017ba4:	611a      	str	r2, [r3, #16]
 8017ba6:	b009      	add	sp, #36	; 0x24
 8017ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017baa:	c304      	stmia	r3!, {r2}
 8017bac:	e7cd      	b.n	8017b4a <__multiply+0x52>
 8017bae:	9b00      	ldr	r3, [sp, #0]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	b298      	uxth	r0, r3
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	d01c      	beq.n	8017bf2 <__multiply+0xfa>
 8017bb8:	4667      	mov	r7, ip
 8017bba:	2400      	movs	r4, #0
 8017bbc:	9e06      	ldr	r6, [sp, #24]
 8017bbe:	ce02      	ldmia	r6!, {r1}
 8017bc0:	683a      	ldr	r2, [r7, #0]
 8017bc2:	b28b      	uxth	r3, r1
 8017bc4:	4343      	muls	r3, r0
 8017bc6:	0c09      	lsrs	r1, r1, #16
 8017bc8:	4341      	muls	r1, r0
 8017bca:	b292      	uxth	r2, r2
 8017bcc:	189b      	adds	r3, r3, r2
 8017bce:	191b      	adds	r3, r3, r4
 8017bd0:	000c      	movs	r4, r1
 8017bd2:	683a      	ldr	r2, [r7, #0]
 8017bd4:	0c11      	lsrs	r1, r2, #16
 8017bd6:	1861      	adds	r1, r4, r1
 8017bd8:	0c1c      	lsrs	r4, r3, #16
 8017bda:	1909      	adds	r1, r1, r4
 8017bdc:	0c0c      	lsrs	r4, r1, #16
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	0409      	lsls	r1, r1, #16
 8017be2:	430b      	orrs	r3, r1
 8017be4:	c708      	stmia	r7!, {r3}
 8017be6:	9b04      	ldr	r3, [sp, #16]
 8017be8:	42b3      	cmp	r3, r6
 8017bea:	d8e8      	bhi.n	8017bbe <__multiply+0xc6>
 8017bec:	4663      	mov	r3, ip
 8017bee:	9a05      	ldr	r2, [sp, #20]
 8017bf0:	509c      	str	r4, [r3, r2]
 8017bf2:	9b00      	ldr	r3, [sp, #0]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	0c1e      	lsrs	r6, r3, #16
 8017bf8:	d020      	beq.n	8017c3c <__multiply+0x144>
 8017bfa:	4663      	mov	r3, ip
 8017bfc:	002c      	movs	r4, r5
 8017bfe:	4660      	mov	r0, ip
 8017c00:	2700      	movs	r7, #0
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	3414      	adds	r4, #20
 8017c06:	6822      	ldr	r2, [r4, #0]
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	b291      	uxth	r1, r2
 8017c0c:	4371      	muls	r1, r6
 8017c0e:	6802      	ldr	r2, [r0, #0]
 8017c10:	0c12      	lsrs	r2, r2, #16
 8017c12:	1889      	adds	r1, r1, r2
 8017c14:	19cf      	adds	r7, r1, r7
 8017c16:	0439      	lsls	r1, r7, #16
 8017c18:	430b      	orrs	r3, r1
 8017c1a:	6003      	str	r3, [r0, #0]
 8017c1c:	cc02      	ldmia	r4!, {r1}
 8017c1e:	6843      	ldr	r3, [r0, #4]
 8017c20:	0c09      	lsrs	r1, r1, #16
 8017c22:	4371      	muls	r1, r6
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	0c3f      	lsrs	r7, r7, #16
 8017c28:	18cb      	adds	r3, r1, r3
 8017c2a:	9a04      	ldr	r2, [sp, #16]
 8017c2c:	19db      	adds	r3, r3, r7
 8017c2e:	0c1f      	lsrs	r7, r3, #16
 8017c30:	3004      	adds	r0, #4
 8017c32:	42a2      	cmp	r2, r4
 8017c34:	d8e7      	bhi.n	8017c06 <__multiply+0x10e>
 8017c36:	4662      	mov	r2, ip
 8017c38:	9905      	ldr	r1, [sp, #20]
 8017c3a:	5053      	str	r3, [r2, r1]
 8017c3c:	9b00      	ldr	r3, [sp, #0]
 8017c3e:	3304      	adds	r3, #4
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	2304      	movs	r3, #4
 8017c44:	449c      	add	ip, r3
 8017c46:	e79c      	b.n	8017b82 <__multiply+0x8a>
 8017c48:	9b02      	ldr	r3, [sp, #8]
 8017c4a:	3b01      	subs	r3, #1
 8017c4c:	9302      	str	r3, [sp, #8]
 8017c4e:	e79c      	b.n	8017b8a <__multiply+0x92>
 8017c50:	0801cd19 	.word	0x0801cd19
 8017c54:	0801ce08 	.word	0x0801ce08

08017c58 <__pow5mult>:
 8017c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c5a:	2303      	movs	r3, #3
 8017c5c:	0015      	movs	r5, r2
 8017c5e:	0007      	movs	r7, r0
 8017c60:	000e      	movs	r6, r1
 8017c62:	401a      	ands	r2, r3
 8017c64:	421d      	tst	r5, r3
 8017c66:	d008      	beq.n	8017c7a <__pow5mult+0x22>
 8017c68:	491a      	ldr	r1, [pc, #104]	; (8017cd4 <__pow5mult+0x7c>)
 8017c6a:	3a01      	subs	r2, #1
 8017c6c:	0092      	lsls	r2, r2, #2
 8017c6e:	5852      	ldr	r2, [r2, r1]
 8017c70:	2300      	movs	r3, #0
 8017c72:	0031      	movs	r1, r6
 8017c74:	f7ff fe52 	bl	801791c <__multadd>
 8017c78:	0006      	movs	r6, r0
 8017c7a:	10ad      	asrs	r5, r5, #2
 8017c7c:	d027      	beq.n	8017cce <__pow5mult+0x76>
 8017c7e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8017c80:	2c00      	cmp	r4, #0
 8017c82:	d107      	bne.n	8017c94 <__pow5mult+0x3c>
 8017c84:	0038      	movs	r0, r7
 8017c86:	4914      	ldr	r1, [pc, #80]	; (8017cd8 <__pow5mult+0x80>)
 8017c88:	f7ff ff20 	bl	8017acc <__i2b>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	0004      	movs	r4, r0
 8017c90:	64b8      	str	r0, [r7, #72]	; 0x48
 8017c92:	6003      	str	r3, [r0, #0]
 8017c94:	2301      	movs	r3, #1
 8017c96:	421d      	tst	r5, r3
 8017c98:	d00a      	beq.n	8017cb0 <__pow5mult+0x58>
 8017c9a:	0031      	movs	r1, r6
 8017c9c:	0022      	movs	r2, r4
 8017c9e:	0038      	movs	r0, r7
 8017ca0:	f7ff ff2a 	bl	8017af8 <__multiply>
 8017ca4:	0031      	movs	r1, r6
 8017ca6:	9001      	str	r0, [sp, #4]
 8017ca8:	0038      	movs	r0, r7
 8017caa:	f7ff fe2d 	bl	8017908 <_Bfree>
 8017cae:	9e01      	ldr	r6, [sp, #4]
 8017cb0:	106d      	asrs	r5, r5, #1
 8017cb2:	d00c      	beq.n	8017cce <__pow5mult+0x76>
 8017cb4:	6820      	ldr	r0, [r4, #0]
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d107      	bne.n	8017cca <__pow5mult+0x72>
 8017cba:	0022      	movs	r2, r4
 8017cbc:	0021      	movs	r1, r4
 8017cbe:	0038      	movs	r0, r7
 8017cc0:	f7ff ff1a 	bl	8017af8 <__multiply>
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	6020      	str	r0, [r4, #0]
 8017cc8:	6003      	str	r3, [r0, #0]
 8017cca:	0004      	movs	r4, r0
 8017ccc:	e7e2      	b.n	8017c94 <__pow5mult+0x3c>
 8017cce:	0030      	movs	r0, r6
 8017cd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017cd2:	46c0      	nop			; (mov r8, r8)
 8017cd4:	0801cf58 	.word	0x0801cf58
 8017cd8:	00000271 	.word	0x00000271

08017cdc <__lshift>:
 8017cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cde:	000c      	movs	r4, r1
 8017ce0:	0017      	movs	r7, r2
 8017ce2:	6923      	ldr	r3, [r4, #16]
 8017ce4:	1155      	asrs	r5, r2, #5
 8017ce6:	b087      	sub	sp, #28
 8017ce8:	18eb      	adds	r3, r5, r3
 8017cea:	9302      	str	r3, [sp, #8]
 8017cec:	3301      	adds	r3, #1
 8017cee:	9301      	str	r3, [sp, #4]
 8017cf0:	6849      	ldr	r1, [r1, #4]
 8017cf2:	68a3      	ldr	r3, [r4, #8]
 8017cf4:	9004      	str	r0, [sp, #16]
 8017cf6:	9a01      	ldr	r2, [sp, #4]
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	db11      	blt.n	8017d20 <__lshift+0x44>
 8017cfc:	9804      	ldr	r0, [sp, #16]
 8017cfe:	f7ff fddb 	bl	80178b8 <_Balloc>
 8017d02:	0002      	movs	r2, r0
 8017d04:	2300      	movs	r3, #0
 8017d06:	3214      	adds	r2, #20
 8017d08:	0006      	movs	r6, r0
 8017d0a:	0011      	movs	r1, r2
 8017d0c:	9203      	str	r2, [sp, #12]
 8017d0e:	4298      	cmp	r0, r3
 8017d10:	d10d      	bne.n	8017d2e <__lshift+0x52>
 8017d12:	21da      	movs	r1, #218	; 0xda
 8017d14:	0002      	movs	r2, r0
 8017d16:	4b27      	ldr	r3, [pc, #156]	; (8017db4 <__lshift+0xd8>)
 8017d18:	4827      	ldr	r0, [pc, #156]	; (8017db8 <__lshift+0xdc>)
 8017d1a:	31ff      	adds	r1, #255	; 0xff
 8017d1c:	f000 fb4e 	bl	80183bc <__assert_func>
 8017d20:	3101      	adds	r1, #1
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	e7e7      	b.n	8017cf6 <__lshift+0x1a>
 8017d26:	2200      	movs	r2, #0
 8017d28:	0098      	lsls	r0, r3, #2
 8017d2a:	500a      	str	r2, [r1, r0]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	42ab      	cmp	r3, r5
 8017d30:	dbf9      	blt.n	8017d26 <__lshift+0x4a>
 8017d32:	43eb      	mvns	r3, r5
 8017d34:	17db      	asrs	r3, r3, #31
 8017d36:	401d      	ands	r5, r3
 8017d38:	9b03      	ldr	r3, [sp, #12]
 8017d3a:	00ad      	lsls	r5, r5, #2
 8017d3c:	211f      	movs	r1, #31
 8017d3e:	0038      	movs	r0, r7
 8017d40:	195d      	adds	r5, r3, r5
 8017d42:	0023      	movs	r3, r4
 8017d44:	6922      	ldr	r2, [r4, #16]
 8017d46:	3314      	adds	r3, #20
 8017d48:	0092      	lsls	r2, r2, #2
 8017d4a:	4008      	ands	r0, r1
 8017d4c:	4684      	mov	ip, r0
 8017d4e:	189a      	adds	r2, r3, r2
 8017d50:	420f      	tst	r7, r1
 8017d52:	d02a      	beq.n	8017daa <__lshift+0xce>
 8017d54:	3101      	adds	r1, #1
 8017d56:	1a09      	subs	r1, r1, r0
 8017d58:	9105      	str	r1, [sp, #20]
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	9503      	str	r5, [sp, #12]
 8017d5e:	4667      	mov	r7, ip
 8017d60:	6818      	ldr	r0, [r3, #0]
 8017d62:	40b8      	lsls	r0, r7
 8017d64:	4301      	orrs	r1, r0
 8017d66:	9803      	ldr	r0, [sp, #12]
 8017d68:	c002      	stmia	r0!, {r1}
 8017d6a:	cb02      	ldmia	r3!, {r1}
 8017d6c:	9003      	str	r0, [sp, #12]
 8017d6e:	9805      	ldr	r0, [sp, #20]
 8017d70:	40c1      	lsrs	r1, r0
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d8f3      	bhi.n	8017d5e <__lshift+0x82>
 8017d76:	0020      	movs	r0, r4
 8017d78:	3015      	adds	r0, #21
 8017d7a:	2304      	movs	r3, #4
 8017d7c:	4282      	cmp	r2, r0
 8017d7e:	d304      	bcc.n	8017d8a <__lshift+0xae>
 8017d80:	1b13      	subs	r3, r2, r4
 8017d82:	3b15      	subs	r3, #21
 8017d84:	089b      	lsrs	r3, r3, #2
 8017d86:	3301      	adds	r3, #1
 8017d88:	009b      	lsls	r3, r3, #2
 8017d8a:	50e9      	str	r1, [r5, r3]
 8017d8c:	2900      	cmp	r1, #0
 8017d8e:	d002      	beq.n	8017d96 <__lshift+0xba>
 8017d90:	9b02      	ldr	r3, [sp, #8]
 8017d92:	3302      	adds	r3, #2
 8017d94:	9301      	str	r3, [sp, #4]
 8017d96:	9b01      	ldr	r3, [sp, #4]
 8017d98:	9804      	ldr	r0, [sp, #16]
 8017d9a:	3b01      	subs	r3, #1
 8017d9c:	0021      	movs	r1, r4
 8017d9e:	6133      	str	r3, [r6, #16]
 8017da0:	f7ff fdb2 	bl	8017908 <_Bfree>
 8017da4:	0030      	movs	r0, r6
 8017da6:	b007      	add	sp, #28
 8017da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017daa:	cb02      	ldmia	r3!, {r1}
 8017dac:	c502      	stmia	r5!, {r1}
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d8fb      	bhi.n	8017daa <__lshift+0xce>
 8017db2:	e7f0      	b.n	8017d96 <__lshift+0xba>
 8017db4:	0801cd19 	.word	0x0801cd19
 8017db8:	0801ce08 	.word	0x0801ce08

08017dbc <__mcmp>:
 8017dbc:	6902      	ldr	r2, [r0, #16]
 8017dbe:	690b      	ldr	r3, [r1, #16]
 8017dc0:	b530      	push	{r4, r5, lr}
 8017dc2:	0004      	movs	r4, r0
 8017dc4:	1ad0      	subs	r0, r2, r3
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d10d      	bne.n	8017de6 <__mcmp+0x2a>
 8017dca:	009b      	lsls	r3, r3, #2
 8017dcc:	3414      	adds	r4, #20
 8017dce:	3114      	adds	r1, #20
 8017dd0:	18e2      	adds	r2, r4, r3
 8017dd2:	18c9      	adds	r1, r1, r3
 8017dd4:	3a04      	subs	r2, #4
 8017dd6:	3904      	subs	r1, #4
 8017dd8:	6815      	ldr	r5, [r2, #0]
 8017dda:	680b      	ldr	r3, [r1, #0]
 8017ddc:	429d      	cmp	r5, r3
 8017dde:	d003      	beq.n	8017de8 <__mcmp+0x2c>
 8017de0:	2001      	movs	r0, #1
 8017de2:	429d      	cmp	r5, r3
 8017de4:	d303      	bcc.n	8017dee <__mcmp+0x32>
 8017de6:	bd30      	pop	{r4, r5, pc}
 8017de8:	4294      	cmp	r4, r2
 8017dea:	d3f3      	bcc.n	8017dd4 <__mcmp+0x18>
 8017dec:	e7fb      	b.n	8017de6 <__mcmp+0x2a>
 8017dee:	4240      	negs	r0, r0
 8017df0:	e7f9      	b.n	8017de6 <__mcmp+0x2a>
	...

08017df4 <__mdiff>:
 8017df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017df6:	000e      	movs	r6, r1
 8017df8:	0007      	movs	r7, r0
 8017dfa:	0011      	movs	r1, r2
 8017dfc:	0030      	movs	r0, r6
 8017dfe:	b087      	sub	sp, #28
 8017e00:	0014      	movs	r4, r2
 8017e02:	f7ff ffdb 	bl	8017dbc <__mcmp>
 8017e06:	1e05      	subs	r5, r0, #0
 8017e08:	d110      	bne.n	8017e2c <__mdiff+0x38>
 8017e0a:	0001      	movs	r1, r0
 8017e0c:	0038      	movs	r0, r7
 8017e0e:	f7ff fd53 	bl	80178b8 <_Balloc>
 8017e12:	1e02      	subs	r2, r0, #0
 8017e14:	d104      	bne.n	8017e20 <__mdiff+0x2c>
 8017e16:	4b40      	ldr	r3, [pc, #256]	; (8017f18 <__mdiff+0x124>)
 8017e18:	4940      	ldr	r1, [pc, #256]	; (8017f1c <__mdiff+0x128>)
 8017e1a:	4841      	ldr	r0, [pc, #260]	; (8017f20 <__mdiff+0x12c>)
 8017e1c:	f000 face 	bl	80183bc <__assert_func>
 8017e20:	2301      	movs	r3, #1
 8017e22:	6145      	str	r5, [r0, #20]
 8017e24:	6103      	str	r3, [r0, #16]
 8017e26:	0010      	movs	r0, r2
 8017e28:	b007      	add	sp, #28
 8017e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	9301      	str	r3, [sp, #4]
 8017e30:	2800      	cmp	r0, #0
 8017e32:	db04      	blt.n	8017e3e <__mdiff+0x4a>
 8017e34:	0023      	movs	r3, r4
 8017e36:	0034      	movs	r4, r6
 8017e38:	001e      	movs	r6, r3
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	9301      	str	r3, [sp, #4]
 8017e3e:	0038      	movs	r0, r7
 8017e40:	6861      	ldr	r1, [r4, #4]
 8017e42:	f7ff fd39 	bl	80178b8 <_Balloc>
 8017e46:	1e02      	subs	r2, r0, #0
 8017e48:	d103      	bne.n	8017e52 <__mdiff+0x5e>
 8017e4a:	2190      	movs	r1, #144	; 0x90
 8017e4c:	4b32      	ldr	r3, [pc, #200]	; (8017f18 <__mdiff+0x124>)
 8017e4e:	0089      	lsls	r1, r1, #2
 8017e50:	e7e3      	b.n	8017e1a <__mdiff+0x26>
 8017e52:	9b01      	ldr	r3, [sp, #4]
 8017e54:	2700      	movs	r7, #0
 8017e56:	60c3      	str	r3, [r0, #12]
 8017e58:	6920      	ldr	r0, [r4, #16]
 8017e5a:	3414      	adds	r4, #20
 8017e5c:	9401      	str	r4, [sp, #4]
 8017e5e:	9b01      	ldr	r3, [sp, #4]
 8017e60:	0084      	lsls	r4, r0, #2
 8017e62:	191b      	adds	r3, r3, r4
 8017e64:	0034      	movs	r4, r6
 8017e66:	9302      	str	r3, [sp, #8]
 8017e68:	6933      	ldr	r3, [r6, #16]
 8017e6a:	3414      	adds	r4, #20
 8017e6c:	0099      	lsls	r1, r3, #2
 8017e6e:	1863      	adds	r3, r4, r1
 8017e70:	9303      	str	r3, [sp, #12]
 8017e72:	0013      	movs	r3, r2
 8017e74:	3314      	adds	r3, #20
 8017e76:	469c      	mov	ip, r3
 8017e78:	9305      	str	r3, [sp, #20]
 8017e7a:	9b01      	ldr	r3, [sp, #4]
 8017e7c:	9304      	str	r3, [sp, #16]
 8017e7e:	9b04      	ldr	r3, [sp, #16]
 8017e80:	cc02      	ldmia	r4!, {r1}
 8017e82:	cb20      	ldmia	r3!, {r5}
 8017e84:	9304      	str	r3, [sp, #16]
 8017e86:	b2ab      	uxth	r3, r5
 8017e88:	19df      	adds	r7, r3, r7
 8017e8a:	b28b      	uxth	r3, r1
 8017e8c:	1afb      	subs	r3, r7, r3
 8017e8e:	0c2d      	lsrs	r5, r5, #16
 8017e90:	0c09      	lsrs	r1, r1, #16
 8017e92:	1a69      	subs	r1, r5, r1
 8017e94:	141d      	asrs	r5, r3, #16
 8017e96:	1949      	adds	r1, r1, r5
 8017e98:	140f      	asrs	r7, r1, #16
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	0409      	lsls	r1, r1, #16
 8017e9e:	430b      	orrs	r3, r1
 8017ea0:	4661      	mov	r1, ip
 8017ea2:	c108      	stmia	r1!, {r3}
 8017ea4:	9b03      	ldr	r3, [sp, #12]
 8017ea6:	468c      	mov	ip, r1
 8017ea8:	42a3      	cmp	r3, r4
 8017eaa:	d8e8      	bhi.n	8017e7e <__mdiff+0x8a>
 8017eac:	0031      	movs	r1, r6
 8017eae:	9c03      	ldr	r4, [sp, #12]
 8017eb0:	3115      	adds	r1, #21
 8017eb2:	2304      	movs	r3, #4
 8017eb4:	428c      	cmp	r4, r1
 8017eb6:	d304      	bcc.n	8017ec2 <__mdiff+0xce>
 8017eb8:	1ba3      	subs	r3, r4, r6
 8017eba:	3b15      	subs	r3, #21
 8017ebc:	089b      	lsrs	r3, r3, #2
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	9901      	ldr	r1, [sp, #4]
 8017ec4:	18cc      	adds	r4, r1, r3
 8017ec6:	9905      	ldr	r1, [sp, #20]
 8017ec8:	0026      	movs	r6, r4
 8017eca:	18cb      	adds	r3, r1, r3
 8017ecc:	469c      	mov	ip, r3
 8017ece:	9902      	ldr	r1, [sp, #8]
 8017ed0:	428e      	cmp	r6, r1
 8017ed2:	d310      	bcc.n	8017ef6 <__mdiff+0x102>
 8017ed4:	9e02      	ldr	r6, [sp, #8]
 8017ed6:	1ee5      	subs	r5, r4, #3
 8017ed8:	2100      	movs	r1, #0
 8017eda:	42ae      	cmp	r6, r5
 8017edc:	d304      	bcc.n	8017ee8 <__mdiff+0xf4>
 8017ede:	0031      	movs	r1, r6
 8017ee0:	3103      	adds	r1, #3
 8017ee2:	1b09      	subs	r1, r1, r4
 8017ee4:	0889      	lsrs	r1, r1, #2
 8017ee6:	0089      	lsls	r1, r1, #2
 8017ee8:	185b      	adds	r3, r3, r1
 8017eea:	3b04      	subs	r3, #4
 8017eec:	6819      	ldr	r1, [r3, #0]
 8017eee:	2900      	cmp	r1, #0
 8017ef0:	d00f      	beq.n	8017f12 <__mdiff+0x11e>
 8017ef2:	6110      	str	r0, [r2, #16]
 8017ef4:	e797      	b.n	8017e26 <__mdiff+0x32>
 8017ef6:	ce02      	ldmia	r6!, {r1}
 8017ef8:	b28d      	uxth	r5, r1
 8017efa:	19ed      	adds	r5, r5, r7
 8017efc:	0c0f      	lsrs	r7, r1, #16
 8017efe:	1429      	asrs	r1, r5, #16
 8017f00:	1879      	adds	r1, r7, r1
 8017f02:	140f      	asrs	r7, r1, #16
 8017f04:	b2ad      	uxth	r5, r5
 8017f06:	0409      	lsls	r1, r1, #16
 8017f08:	430d      	orrs	r5, r1
 8017f0a:	4661      	mov	r1, ip
 8017f0c:	c120      	stmia	r1!, {r5}
 8017f0e:	468c      	mov	ip, r1
 8017f10:	e7dd      	b.n	8017ece <__mdiff+0xda>
 8017f12:	3801      	subs	r0, #1
 8017f14:	e7e9      	b.n	8017eea <__mdiff+0xf6>
 8017f16:	46c0      	nop			; (mov r8, r8)
 8017f18:	0801cd19 	.word	0x0801cd19
 8017f1c:	00000232 	.word	0x00000232
 8017f20:	0801ce08 	.word	0x0801ce08

08017f24 <__ulp>:
 8017f24:	4b0f      	ldr	r3, [pc, #60]	; (8017f64 <__ulp+0x40>)
 8017f26:	4019      	ands	r1, r3
 8017f28:	4b0f      	ldr	r3, [pc, #60]	; (8017f68 <__ulp+0x44>)
 8017f2a:	18c9      	adds	r1, r1, r3
 8017f2c:	2900      	cmp	r1, #0
 8017f2e:	dd04      	ble.n	8017f3a <__ulp+0x16>
 8017f30:	2200      	movs	r2, #0
 8017f32:	000b      	movs	r3, r1
 8017f34:	0010      	movs	r0, r2
 8017f36:	0019      	movs	r1, r3
 8017f38:	4770      	bx	lr
 8017f3a:	4249      	negs	r1, r1
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	2300      	movs	r3, #0
 8017f40:	1509      	asrs	r1, r1, #20
 8017f42:	2913      	cmp	r1, #19
 8017f44:	dc04      	bgt.n	8017f50 <__ulp+0x2c>
 8017f46:	2080      	movs	r0, #128	; 0x80
 8017f48:	0300      	lsls	r0, r0, #12
 8017f4a:	4108      	asrs	r0, r1
 8017f4c:	0003      	movs	r3, r0
 8017f4e:	e7f1      	b.n	8017f34 <__ulp+0x10>
 8017f50:	3914      	subs	r1, #20
 8017f52:	2001      	movs	r0, #1
 8017f54:	291e      	cmp	r1, #30
 8017f56:	dc02      	bgt.n	8017f5e <__ulp+0x3a>
 8017f58:	2080      	movs	r0, #128	; 0x80
 8017f5a:	0600      	lsls	r0, r0, #24
 8017f5c:	40c8      	lsrs	r0, r1
 8017f5e:	0002      	movs	r2, r0
 8017f60:	e7e8      	b.n	8017f34 <__ulp+0x10>
 8017f62:	46c0      	nop			; (mov r8, r8)
 8017f64:	7ff00000 	.word	0x7ff00000
 8017f68:	fcc00000 	.word	0xfcc00000

08017f6c <__b2d>:
 8017f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f6e:	0006      	movs	r6, r0
 8017f70:	6903      	ldr	r3, [r0, #16]
 8017f72:	3614      	adds	r6, #20
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	18f3      	adds	r3, r6, r3
 8017f78:	1f1d      	subs	r5, r3, #4
 8017f7a:	682c      	ldr	r4, [r5, #0]
 8017f7c:	000f      	movs	r7, r1
 8017f7e:	0020      	movs	r0, r4
 8017f80:	9301      	str	r3, [sp, #4]
 8017f82:	f7ff fd5b 	bl	8017a3c <__hi0bits>
 8017f86:	2320      	movs	r3, #32
 8017f88:	1a1b      	subs	r3, r3, r0
 8017f8a:	491f      	ldr	r1, [pc, #124]	; (8018008 <__b2d+0x9c>)
 8017f8c:	603b      	str	r3, [r7, #0]
 8017f8e:	280a      	cmp	r0, #10
 8017f90:	dc16      	bgt.n	8017fc0 <__b2d+0x54>
 8017f92:	230b      	movs	r3, #11
 8017f94:	0027      	movs	r7, r4
 8017f96:	1a1b      	subs	r3, r3, r0
 8017f98:	40df      	lsrs	r7, r3
 8017f9a:	4339      	orrs	r1, r7
 8017f9c:	469c      	mov	ip, r3
 8017f9e:	000b      	movs	r3, r1
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	42ae      	cmp	r6, r5
 8017fa4:	d202      	bcs.n	8017fac <__b2d+0x40>
 8017fa6:	9901      	ldr	r1, [sp, #4]
 8017fa8:	3908      	subs	r1, #8
 8017faa:	6809      	ldr	r1, [r1, #0]
 8017fac:	3015      	adds	r0, #21
 8017fae:	4084      	lsls	r4, r0
 8017fb0:	4660      	mov	r0, ip
 8017fb2:	40c1      	lsrs	r1, r0
 8017fb4:	430c      	orrs	r4, r1
 8017fb6:	0022      	movs	r2, r4
 8017fb8:	0010      	movs	r0, r2
 8017fba:	0019      	movs	r1, r3
 8017fbc:	b003      	add	sp, #12
 8017fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fc0:	2700      	movs	r7, #0
 8017fc2:	42ae      	cmp	r6, r5
 8017fc4:	d202      	bcs.n	8017fcc <__b2d+0x60>
 8017fc6:	9d01      	ldr	r5, [sp, #4]
 8017fc8:	3d08      	subs	r5, #8
 8017fca:	682f      	ldr	r7, [r5, #0]
 8017fcc:	230b      	movs	r3, #11
 8017fce:	425b      	negs	r3, r3
 8017fd0:	469c      	mov	ip, r3
 8017fd2:	4484      	add	ip, r0
 8017fd4:	280b      	cmp	r0, #11
 8017fd6:	d013      	beq.n	8018000 <__b2d+0x94>
 8017fd8:	4663      	mov	r3, ip
 8017fda:	2020      	movs	r0, #32
 8017fdc:	409c      	lsls	r4, r3
 8017fde:	1ac0      	subs	r0, r0, r3
 8017fe0:	003b      	movs	r3, r7
 8017fe2:	40c3      	lsrs	r3, r0
 8017fe4:	431c      	orrs	r4, r3
 8017fe6:	4321      	orrs	r1, r4
 8017fe8:	000b      	movs	r3, r1
 8017fea:	2100      	movs	r1, #0
 8017fec:	42b5      	cmp	r5, r6
 8017fee:	d901      	bls.n	8017ff4 <__b2d+0x88>
 8017ff0:	3d04      	subs	r5, #4
 8017ff2:	6829      	ldr	r1, [r5, #0]
 8017ff4:	4664      	mov	r4, ip
 8017ff6:	40c1      	lsrs	r1, r0
 8017ff8:	40a7      	lsls	r7, r4
 8017ffa:	430f      	orrs	r7, r1
 8017ffc:	003a      	movs	r2, r7
 8017ffe:	e7db      	b.n	8017fb8 <__b2d+0x4c>
 8018000:	4321      	orrs	r1, r4
 8018002:	000b      	movs	r3, r1
 8018004:	e7fa      	b.n	8017ffc <__b2d+0x90>
 8018006:	46c0      	nop			; (mov r8, r8)
 8018008:	3ff00000 	.word	0x3ff00000

0801800c <__d2b>:
 801800c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801800e:	2101      	movs	r1, #1
 8018010:	0014      	movs	r4, r2
 8018012:	001e      	movs	r6, r3
 8018014:	9f08      	ldr	r7, [sp, #32]
 8018016:	f7ff fc4f 	bl	80178b8 <_Balloc>
 801801a:	1e05      	subs	r5, r0, #0
 801801c:	d105      	bne.n	801802a <__d2b+0x1e>
 801801e:	0002      	movs	r2, r0
 8018020:	4b26      	ldr	r3, [pc, #152]	; (80180bc <__d2b+0xb0>)
 8018022:	4927      	ldr	r1, [pc, #156]	; (80180c0 <__d2b+0xb4>)
 8018024:	4827      	ldr	r0, [pc, #156]	; (80180c4 <__d2b+0xb8>)
 8018026:	f000 f9c9 	bl	80183bc <__assert_func>
 801802a:	0333      	lsls	r3, r6, #12
 801802c:	0076      	lsls	r6, r6, #1
 801802e:	0b1b      	lsrs	r3, r3, #12
 8018030:	0d76      	lsrs	r6, r6, #21
 8018032:	d124      	bne.n	801807e <__d2b+0x72>
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	2c00      	cmp	r4, #0
 8018038:	d027      	beq.n	801808a <__d2b+0x7e>
 801803a:	4668      	mov	r0, sp
 801803c:	9400      	str	r4, [sp, #0]
 801803e:	f7ff fd17 	bl	8017a70 <__lo0bits>
 8018042:	9c00      	ldr	r4, [sp, #0]
 8018044:	2800      	cmp	r0, #0
 8018046:	d01e      	beq.n	8018086 <__d2b+0x7a>
 8018048:	9b01      	ldr	r3, [sp, #4]
 801804a:	2120      	movs	r1, #32
 801804c:	001a      	movs	r2, r3
 801804e:	1a09      	subs	r1, r1, r0
 8018050:	408a      	lsls	r2, r1
 8018052:	40c3      	lsrs	r3, r0
 8018054:	4322      	orrs	r2, r4
 8018056:	616a      	str	r2, [r5, #20]
 8018058:	9301      	str	r3, [sp, #4]
 801805a:	9c01      	ldr	r4, [sp, #4]
 801805c:	61ac      	str	r4, [r5, #24]
 801805e:	1e63      	subs	r3, r4, #1
 8018060:	419c      	sbcs	r4, r3
 8018062:	3401      	adds	r4, #1
 8018064:	612c      	str	r4, [r5, #16]
 8018066:	2e00      	cmp	r6, #0
 8018068:	d018      	beq.n	801809c <__d2b+0x90>
 801806a:	4b17      	ldr	r3, [pc, #92]	; (80180c8 <__d2b+0xbc>)
 801806c:	18f6      	adds	r6, r6, r3
 801806e:	2335      	movs	r3, #53	; 0x35
 8018070:	1836      	adds	r6, r6, r0
 8018072:	1a18      	subs	r0, r3, r0
 8018074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018076:	603e      	str	r6, [r7, #0]
 8018078:	6018      	str	r0, [r3, #0]
 801807a:	0028      	movs	r0, r5
 801807c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801807e:	2280      	movs	r2, #128	; 0x80
 8018080:	0352      	lsls	r2, r2, #13
 8018082:	4313      	orrs	r3, r2
 8018084:	e7d6      	b.n	8018034 <__d2b+0x28>
 8018086:	616c      	str	r4, [r5, #20]
 8018088:	e7e7      	b.n	801805a <__d2b+0x4e>
 801808a:	a801      	add	r0, sp, #4
 801808c:	f7ff fcf0 	bl	8017a70 <__lo0bits>
 8018090:	2401      	movs	r4, #1
 8018092:	9b01      	ldr	r3, [sp, #4]
 8018094:	612c      	str	r4, [r5, #16]
 8018096:	616b      	str	r3, [r5, #20]
 8018098:	3020      	adds	r0, #32
 801809a:	e7e4      	b.n	8018066 <__d2b+0x5a>
 801809c:	4b0b      	ldr	r3, [pc, #44]	; (80180cc <__d2b+0xc0>)
 801809e:	18c0      	adds	r0, r0, r3
 80180a0:	4b0b      	ldr	r3, [pc, #44]	; (80180d0 <__d2b+0xc4>)
 80180a2:	6038      	str	r0, [r7, #0]
 80180a4:	18e3      	adds	r3, r4, r3
 80180a6:	009b      	lsls	r3, r3, #2
 80180a8:	18eb      	adds	r3, r5, r3
 80180aa:	6958      	ldr	r0, [r3, #20]
 80180ac:	f7ff fcc6 	bl	8017a3c <__hi0bits>
 80180b0:	0164      	lsls	r4, r4, #5
 80180b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180b4:	1a24      	subs	r4, r4, r0
 80180b6:	601c      	str	r4, [r3, #0]
 80180b8:	e7df      	b.n	801807a <__d2b+0x6e>
 80180ba:	46c0      	nop			; (mov r8, r8)
 80180bc:	0801cd19 	.word	0x0801cd19
 80180c0:	0000030a 	.word	0x0000030a
 80180c4:	0801ce08 	.word	0x0801ce08
 80180c8:	fffffbcd 	.word	0xfffffbcd
 80180cc:	fffffbce 	.word	0xfffffbce
 80180d0:	3fffffff 	.word	0x3fffffff

080180d4 <__ratio>:
 80180d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180d6:	b085      	sub	sp, #20
 80180d8:	000d      	movs	r5, r1
 80180da:	a902      	add	r1, sp, #8
 80180dc:	0004      	movs	r4, r0
 80180de:	f7ff ff45 	bl	8017f6c <__b2d>
 80180e2:	9000      	str	r0, [sp, #0]
 80180e4:	9101      	str	r1, [sp, #4]
 80180e6:	9e00      	ldr	r6, [sp, #0]
 80180e8:	9f01      	ldr	r7, [sp, #4]
 80180ea:	0028      	movs	r0, r5
 80180ec:	a903      	add	r1, sp, #12
 80180ee:	f7ff ff3d 	bl	8017f6c <__b2d>
 80180f2:	6924      	ldr	r4, [r4, #16]
 80180f4:	692d      	ldr	r5, [r5, #16]
 80180f6:	0002      	movs	r2, r0
 80180f8:	1b65      	subs	r5, r4, r5
 80180fa:	016c      	lsls	r4, r5, #5
 80180fc:	46a4      	mov	ip, r4
 80180fe:	9d03      	ldr	r5, [sp, #12]
 8018100:	9c02      	ldr	r4, [sp, #8]
 8018102:	000b      	movs	r3, r1
 8018104:	1b64      	subs	r4, r4, r5
 8018106:	4464      	add	r4, ip
 8018108:	0525      	lsls	r5, r4, #20
 801810a:	2c00      	cmp	r4, #0
 801810c:	dd07      	ble.n	801811e <__ratio+0x4a>
 801810e:	9901      	ldr	r1, [sp, #4]
 8018110:	186f      	adds	r7, r5, r1
 8018112:	0030      	movs	r0, r6
 8018114:	0039      	movs	r1, r7
 8018116:	f7e9 fc3b 	bl	8001990 <__aeabi_ddiv>
 801811a:	b005      	add	sp, #20
 801811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801811e:	1b4b      	subs	r3, r1, r5
 8018120:	e7f7      	b.n	8018112 <__ratio+0x3e>

08018122 <__copybits>:
 8018122:	b570      	push	{r4, r5, r6, lr}
 8018124:	0015      	movs	r5, r2
 8018126:	6913      	ldr	r3, [r2, #16]
 8018128:	3514      	adds	r5, #20
 801812a:	009c      	lsls	r4, r3, #2
 801812c:	0006      	movs	r6, r0
 801812e:	002b      	movs	r3, r5
 8018130:	3901      	subs	r1, #1
 8018132:	1149      	asrs	r1, r1, #5
 8018134:	3101      	adds	r1, #1
 8018136:	0089      	lsls	r1, r1, #2
 8018138:	1841      	adds	r1, r0, r1
 801813a:	192c      	adds	r4, r5, r4
 801813c:	429c      	cmp	r4, r3
 801813e:	d80d      	bhi.n	801815c <__copybits+0x3a>
 8018140:	0015      	movs	r5, r2
 8018142:	3511      	adds	r5, #17
 8018144:	2300      	movs	r3, #0
 8018146:	42a5      	cmp	r5, r4
 8018148:	d803      	bhi.n	8018152 <__copybits+0x30>
 801814a:	1aa3      	subs	r3, r4, r2
 801814c:	3b11      	subs	r3, #17
 801814e:	089b      	lsrs	r3, r3, #2
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	18c0      	adds	r0, r0, r3
 8018154:	2300      	movs	r3, #0
 8018156:	4281      	cmp	r1, r0
 8018158:	d803      	bhi.n	8018162 <__copybits+0x40>
 801815a:	bd70      	pop	{r4, r5, r6, pc}
 801815c:	cb20      	ldmia	r3!, {r5}
 801815e:	c620      	stmia	r6!, {r5}
 8018160:	e7ec      	b.n	801813c <__copybits+0x1a>
 8018162:	c008      	stmia	r0!, {r3}
 8018164:	e7f7      	b.n	8018156 <__copybits+0x34>

08018166 <__any_on>:
 8018166:	0002      	movs	r2, r0
 8018168:	6900      	ldr	r0, [r0, #16]
 801816a:	b510      	push	{r4, lr}
 801816c:	3214      	adds	r2, #20
 801816e:	114b      	asrs	r3, r1, #5
 8018170:	4298      	cmp	r0, r3
 8018172:	db13      	blt.n	801819c <__any_on+0x36>
 8018174:	dd0c      	ble.n	8018190 <__any_on+0x2a>
 8018176:	241f      	movs	r4, #31
 8018178:	0008      	movs	r0, r1
 801817a:	4020      	ands	r0, r4
 801817c:	4221      	tst	r1, r4
 801817e:	d007      	beq.n	8018190 <__any_on+0x2a>
 8018180:	0099      	lsls	r1, r3, #2
 8018182:	588c      	ldr	r4, [r1, r2]
 8018184:	0021      	movs	r1, r4
 8018186:	40c1      	lsrs	r1, r0
 8018188:	4081      	lsls	r1, r0
 801818a:	2001      	movs	r0, #1
 801818c:	428c      	cmp	r4, r1
 801818e:	d104      	bne.n	801819a <__any_on+0x34>
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	18d3      	adds	r3, r2, r3
 8018194:	4293      	cmp	r3, r2
 8018196:	d803      	bhi.n	80181a0 <__any_on+0x3a>
 8018198:	2000      	movs	r0, #0
 801819a:	bd10      	pop	{r4, pc}
 801819c:	0003      	movs	r3, r0
 801819e:	e7f7      	b.n	8018190 <__any_on+0x2a>
 80181a0:	3b04      	subs	r3, #4
 80181a2:	6819      	ldr	r1, [r3, #0]
 80181a4:	2900      	cmp	r1, #0
 80181a6:	d0f5      	beq.n	8018194 <__any_on+0x2e>
 80181a8:	2001      	movs	r0, #1
 80181aa:	e7f6      	b.n	801819a <__any_on+0x34>

080181ac <frexp>:
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	0014      	movs	r4, r2
 80181b0:	2500      	movs	r5, #0
 80181b2:	6025      	str	r5, [r4, #0]
 80181b4:	4d10      	ldr	r5, [pc, #64]	; (80181f8 <frexp+0x4c>)
 80181b6:	004b      	lsls	r3, r1, #1
 80181b8:	000a      	movs	r2, r1
 80181ba:	085b      	lsrs	r3, r3, #1
 80181bc:	42ab      	cmp	r3, r5
 80181be:	dc1a      	bgt.n	80181f6 <frexp+0x4a>
 80181c0:	001d      	movs	r5, r3
 80181c2:	4305      	orrs	r5, r0
 80181c4:	d017      	beq.n	80181f6 <frexp+0x4a>
 80181c6:	4d0d      	ldr	r5, [pc, #52]	; (80181fc <frexp+0x50>)
 80181c8:	4229      	tst	r1, r5
 80181ca:	d109      	bne.n	80181e0 <frexp+0x34>
 80181cc:	2200      	movs	r2, #0
 80181ce:	4b0c      	ldr	r3, [pc, #48]	; (8018200 <frexp+0x54>)
 80181d0:	f7e9 ffe4 	bl	800219c <__aeabi_dmul>
 80181d4:	2536      	movs	r5, #54	; 0x36
 80181d6:	000a      	movs	r2, r1
 80181d8:	004b      	lsls	r3, r1, #1
 80181da:	426d      	negs	r5, r5
 80181dc:	085b      	lsrs	r3, r3, #1
 80181de:	6025      	str	r5, [r4, #0]
 80181e0:	4d08      	ldr	r5, [pc, #32]	; (8018204 <frexp+0x58>)
 80181e2:	151b      	asrs	r3, r3, #20
 80181e4:	195b      	adds	r3, r3, r5
 80181e6:	6825      	ldr	r5, [r4, #0]
 80181e8:	18eb      	adds	r3, r5, r3
 80181ea:	6023      	str	r3, [r4, #0]
 80181ec:	4b06      	ldr	r3, [pc, #24]	; (8018208 <frexp+0x5c>)
 80181ee:	401a      	ands	r2, r3
 80181f0:	4b06      	ldr	r3, [pc, #24]	; (801820c <frexp+0x60>)
 80181f2:	4313      	orrs	r3, r2
 80181f4:	0019      	movs	r1, r3
 80181f6:	bd70      	pop	{r4, r5, r6, pc}
 80181f8:	7fefffff 	.word	0x7fefffff
 80181fc:	7ff00000 	.word	0x7ff00000
 8018200:	43500000 	.word	0x43500000
 8018204:	fffffc02 	.word	0xfffffc02
 8018208:	800fffff 	.word	0x800fffff
 801820c:	3fe00000 	.word	0x3fe00000

08018210 <nan>:
 8018210:	2000      	movs	r0, #0
 8018212:	4901      	ldr	r1, [pc, #4]	; (8018218 <nan+0x8>)
 8018214:	4770      	bx	lr
 8018216:	46c0      	nop			; (mov r8, r8)
 8018218:	7ff80000 	.word	0x7ff80000

0801821c <__ssprint_r>:
 801821c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801821e:	6893      	ldr	r3, [r2, #8]
 8018220:	b087      	sub	sp, #28
 8018222:	000c      	movs	r4, r1
 8018224:	0017      	movs	r7, r2
 8018226:	9002      	str	r0, [sp, #8]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d065      	beq.n	80182f8 <__ssprint_r+0xdc>
 801822c:	6813      	ldr	r3, [r2, #0]
 801822e:	9303      	str	r3, [sp, #12]
 8018230:	2300      	movs	r3, #0
 8018232:	9305      	str	r3, [sp, #20]
 8018234:	9301      	str	r3, [sp, #4]
 8018236:	9b01      	ldr	r3, [sp, #4]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d02d      	beq.n	8018298 <__ssprint_r+0x7c>
 801823c:	68a6      	ldr	r6, [r4, #8]
 801823e:	42b3      	cmp	r3, r6
 8018240:	d346      	bcc.n	80182d0 <__ssprint_r+0xb4>
 8018242:	2390      	movs	r3, #144	; 0x90
 8018244:	89a2      	ldrh	r2, [r4, #12]
 8018246:	00db      	lsls	r3, r3, #3
 8018248:	421a      	tst	r2, r3
 801824a:	d041      	beq.n	80182d0 <__ssprint_r+0xb4>
 801824c:	6921      	ldr	r1, [r4, #16]
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	6965      	ldr	r5, [r4, #20]
 8018252:	1a5b      	subs	r3, r3, r1
 8018254:	9304      	str	r3, [sp, #16]
 8018256:	2303      	movs	r3, #3
 8018258:	435d      	muls	r5, r3
 801825a:	0feb      	lsrs	r3, r5, #31
 801825c:	195d      	adds	r5, r3, r5
 801825e:	9b04      	ldr	r3, [sp, #16]
 8018260:	9801      	ldr	r0, [sp, #4]
 8018262:	3301      	adds	r3, #1
 8018264:	181b      	adds	r3, r3, r0
 8018266:	106d      	asrs	r5, r5, #1
 8018268:	42ab      	cmp	r3, r5
 801826a:	d900      	bls.n	801826e <__ssprint_r+0x52>
 801826c:	001d      	movs	r5, r3
 801826e:	0553      	lsls	r3, r2, #21
 8018270:	d546      	bpl.n	8018300 <__ssprint_r+0xe4>
 8018272:	0029      	movs	r1, r5
 8018274:	9802      	ldr	r0, [sp, #8]
 8018276:	f7fb f991 	bl	801359c <_malloc_r>
 801827a:	1e06      	subs	r6, r0, #0
 801827c:	d116      	bne.n	80182ac <__ssprint_r+0x90>
 801827e:	230c      	movs	r3, #12
 8018280:	9a02      	ldr	r2, [sp, #8]
 8018282:	2001      	movs	r0, #1
 8018284:	6013      	str	r3, [r2, #0]
 8018286:	2340      	movs	r3, #64	; 0x40
 8018288:	89a2      	ldrh	r2, [r4, #12]
 801828a:	4240      	negs	r0, r0
 801828c:	4313      	orrs	r3, r2
 801828e:	81a3      	strh	r3, [r4, #12]
 8018290:	2300      	movs	r3, #0
 8018292:	60bb      	str	r3, [r7, #8]
 8018294:	607b      	str	r3, [r7, #4]
 8018296:	e031      	b.n	80182fc <__ssprint_r+0xe0>
 8018298:	9b03      	ldr	r3, [sp, #12]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	9305      	str	r3, [sp, #20]
 801829e:	9b03      	ldr	r3, [sp, #12]
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	9301      	str	r3, [sp, #4]
 80182a4:	9b03      	ldr	r3, [sp, #12]
 80182a6:	3308      	adds	r3, #8
 80182a8:	9303      	str	r3, [sp, #12]
 80182aa:	e7c4      	b.n	8018236 <__ssprint_r+0x1a>
 80182ac:	9a04      	ldr	r2, [sp, #16]
 80182ae:	6921      	ldr	r1, [r4, #16]
 80182b0:	f7fb fb96 	bl	80139e0 <memcpy>
 80182b4:	89a3      	ldrh	r3, [r4, #12]
 80182b6:	4a18      	ldr	r2, [pc, #96]	; (8018318 <__ssprint_r+0xfc>)
 80182b8:	401a      	ands	r2, r3
 80182ba:	2380      	movs	r3, #128	; 0x80
 80182bc:	4313      	orrs	r3, r2
 80182be:	81a3      	strh	r3, [r4, #12]
 80182c0:	9b04      	ldr	r3, [sp, #16]
 80182c2:	6126      	str	r6, [r4, #16]
 80182c4:	18f6      	adds	r6, r6, r3
 80182c6:	6026      	str	r6, [r4, #0]
 80182c8:	6165      	str	r5, [r4, #20]
 80182ca:	9e01      	ldr	r6, [sp, #4]
 80182cc:	1aed      	subs	r5, r5, r3
 80182ce:	60a5      	str	r5, [r4, #8]
 80182d0:	9b01      	ldr	r3, [sp, #4]
 80182d2:	429e      	cmp	r6, r3
 80182d4:	d900      	bls.n	80182d8 <__ssprint_r+0xbc>
 80182d6:	001e      	movs	r6, r3
 80182d8:	0032      	movs	r2, r6
 80182da:	9905      	ldr	r1, [sp, #20]
 80182dc:	6820      	ldr	r0, [r4, #0]
 80182de:	f7ff fad8 	bl	8017892 <memmove>
 80182e2:	68a3      	ldr	r3, [r4, #8]
 80182e4:	9a01      	ldr	r2, [sp, #4]
 80182e6:	1b9b      	subs	r3, r3, r6
 80182e8:	60a3      	str	r3, [r4, #8]
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	199e      	adds	r6, r3, r6
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	6026      	str	r6, [r4, #0]
 80182f2:	1a9b      	subs	r3, r3, r2
 80182f4:	60bb      	str	r3, [r7, #8]
 80182f6:	d1cf      	bne.n	8018298 <__ssprint_r+0x7c>
 80182f8:	2000      	movs	r0, #0
 80182fa:	6078      	str	r0, [r7, #4]
 80182fc:	b007      	add	sp, #28
 80182fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018300:	002a      	movs	r2, r5
 8018302:	9802      	ldr	r0, [sp, #8]
 8018304:	f7fb fbb2 	bl	8013a6c <_realloc_r>
 8018308:	1e06      	subs	r6, r0, #0
 801830a:	d1d9      	bne.n	80182c0 <__ssprint_r+0xa4>
 801830c:	6921      	ldr	r1, [r4, #16]
 801830e:	9802      	ldr	r0, [sp, #8]
 8018310:	f7fe fe6e 	bl	8016ff0 <_free_r>
 8018314:	e7b3      	b.n	801827e <__ssprint_r+0x62>
 8018316:	46c0      	nop			; (mov r8, r8)
 8018318:	fffffb7f 	.word	0xfffffb7f

0801831c <__ascii_wctomb>:
 801831c:	0003      	movs	r3, r0
 801831e:	1e08      	subs	r0, r1, #0
 8018320:	d005      	beq.n	801832e <__ascii_wctomb+0x12>
 8018322:	2aff      	cmp	r2, #255	; 0xff
 8018324:	d904      	bls.n	8018330 <__ascii_wctomb+0x14>
 8018326:	228a      	movs	r2, #138	; 0x8a
 8018328:	2001      	movs	r0, #1
 801832a:	601a      	str	r2, [r3, #0]
 801832c:	4240      	negs	r0, r0
 801832e:	4770      	bx	lr
 8018330:	2001      	movs	r0, #1
 8018332:	700a      	strb	r2, [r1, #0]
 8018334:	e7fb      	b.n	801832e <__ascii_wctomb+0x12>
	...

08018338 <__register_exitproc>:
 8018338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801833a:	4f1e      	ldr	r7, [pc, #120]	; (80183b4 <__register_exitproc+0x7c>)
 801833c:	0004      	movs	r4, r0
 801833e:	6838      	ldr	r0, [r7, #0]
 8018340:	0016      	movs	r6, r2
 8018342:	9100      	str	r1, [sp, #0]
 8018344:	9301      	str	r3, [sp, #4]
 8018346:	f7ff fa85 	bl	8017854 <__retarget_lock_acquire_recursive>
 801834a:	4b1b      	ldr	r3, [pc, #108]	; (80183b8 <__register_exitproc+0x80>)
 801834c:	6819      	ldr	r1, [r3, #0]
 801834e:	000b      	movs	r3, r1
 8018350:	33fc      	adds	r3, #252	; 0xfc
 8018352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018354:	2a00      	cmp	r2, #0
 8018356:	d103      	bne.n	8018360 <__register_exitproc+0x28>
 8018358:	000a      	movs	r2, r1
 801835a:	324d      	adds	r2, #77	; 0x4d
 801835c:	32ff      	adds	r2, #255	; 0xff
 801835e:	64da      	str	r2, [r3, #76]	; 0x4c
 8018360:	6853      	ldr	r3, [r2, #4]
 8018362:	6838      	ldr	r0, [r7, #0]
 8018364:	2b1f      	cmp	r3, #31
 8018366:	dd04      	ble.n	8018372 <__register_exitproc+0x3a>
 8018368:	f7ff fa75 	bl	8017856 <__retarget_lock_release_recursive>
 801836c:	2001      	movs	r0, #1
 801836e:	4240      	negs	r0, r0
 8018370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018372:	2c00      	cmp	r4, #0
 8018374:	d014      	beq.n	80183a0 <__register_exitproc+0x68>
 8018376:	0099      	lsls	r1, r3, #2
 8018378:	1851      	adds	r1, r2, r1
 801837a:	000f      	movs	r7, r1
 801837c:	3788      	adds	r7, #136	; 0x88
 801837e:	603e      	str	r6, [r7, #0]
 8018380:	2701      	movs	r7, #1
 8018382:	0016      	movs	r6, r2
 8018384:	409f      	lsls	r7, r3
 8018386:	3685      	adds	r6, #133	; 0x85
 8018388:	36ff      	adds	r6, #255	; 0xff
 801838a:	6875      	ldr	r5, [r6, #4]
 801838c:	31fc      	adds	r1, #252	; 0xfc
 801838e:	433d      	orrs	r5, r7
 8018390:	6075      	str	r5, [r6, #4]
 8018392:	9d01      	ldr	r5, [sp, #4]
 8018394:	60cd      	str	r5, [r1, #12]
 8018396:	2c02      	cmp	r4, #2
 8018398:	d102      	bne.n	80183a0 <__register_exitproc+0x68>
 801839a:	68b1      	ldr	r1, [r6, #8]
 801839c:	430f      	orrs	r7, r1
 801839e:	60b7      	str	r7, [r6, #8]
 80183a0:	1c59      	adds	r1, r3, #1
 80183a2:	6051      	str	r1, [r2, #4]
 80183a4:	3302      	adds	r3, #2
 80183a6:	9900      	ldr	r1, [sp, #0]
 80183a8:	009b      	lsls	r3, r3, #2
 80183aa:	5099      	str	r1, [r3, r2]
 80183ac:	f7ff fa53 	bl	8017856 <__retarget_lock_release_recursive>
 80183b0:	2000      	movs	r0, #0
 80183b2:	e7dd      	b.n	8018370 <__register_exitproc+0x38>
 80183b4:	200008e8 	.word	0x200008e8
 80183b8:	0801cc60 	.word	0x0801cc60

080183bc <__assert_func>:
 80183bc:	b530      	push	{r4, r5, lr}
 80183be:	0014      	movs	r4, r2
 80183c0:	001a      	movs	r2, r3
 80183c2:	4b09      	ldr	r3, [pc, #36]	; (80183e8 <__assert_func+0x2c>)
 80183c4:	0005      	movs	r5, r0
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	b085      	sub	sp, #20
 80183ca:	68d8      	ldr	r0, [r3, #12]
 80183cc:	4b07      	ldr	r3, [pc, #28]	; (80183ec <__assert_func+0x30>)
 80183ce:	2c00      	cmp	r4, #0
 80183d0:	d101      	bne.n	80183d6 <__assert_func+0x1a>
 80183d2:	4b07      	ldr	r3, [pc, #28]	; (80183f0 <__assert_func+0x34>)
 80183d4:	001c      	movs	r4, r3
 80183d6:	9301      	str	r3, [sp, #4]
 80183d8:	9100      	str	r1, [sp, #0]
 80183da:	002b      	movs	r3, r5
 80183dc:	4905      	ldr	r1, [pc, #20]	; (80183f4 <__assert_func+0x38>)
 80183de:	9402      	str	r4, [sp, #8]
 80183e0:	f000 f836 	bl	8018450 <fiprintf>
 80183e4:	f000 fe1e 	bl	8019024 <abort>
 80183e8:	200000ac 	.word	0x200000ac
 80183ec:	0801cf64 	.word	0x0801cf64
 80183f0:	0801cf9f 	.word	0x0801cf9f
 80183f4:	0801cf71 	.word	0x0801cf71

080183f8 <_calloc_r>:
 80183f8:	b510      	push	{r4, lr}
 80183fa:	4351      	muls	r1, r2
 80183fc:	f7fb f8ce 	bl	801359c <_malloc_r>
 8018400:	1e04      	subs	r4, r0, #0
 8018402:	d01a      	beq.n	801843a <_calloc_r+0x42>
 8018404:	0003      	movs	r3, r0
 8018406:	3b08      	subs	r3, #8
 8018408:	685a      	ldr	r2, [r3, #4]
 801840a:	2303      	movs	r3, #3
 801840c:	439a      	bics	r2, r3
 801840e:	3a04      	subs	r2, #4
 8018410:	2a24      	cmp	r2, #36	; 0x24
 8018412:	d819      	bhi.n	8018448 <_calloc_r+0x50>
 8018414:	0003      	movs	r3, r0
 8018416:	2a13      	cmp	r2, #19
 8018418:	d90b      	bls.n	8018432 <_calloc_r+0x3a>
 801841a:	2100      	movs	r1, #0
 801841c:	3308      	adds	r3, #8
 801841e:	6001      	str	r1, [r0, #0]
 8018420:	6041      	str	r1, [r0, #4]
 8018422:	2a1b      	cmp	r2, #27
 8018424:	d905      	bls.n	8018432 <_calloc_r+0x3a>
 8018426:	6081      	str	r1, [r0, #8]
 8018428:	60c1      	str	r1, [r0, #12]
 801842a:	2a24      	cmp	r2, #36	; 0x24
 801842c:	d007      	beq.n	801843e <_calloc_r+0x46>
 801842e:	0003      	movs	r3, r0
 8018430:	3310      	adds	r3, #16
 8018432:	2200      	movs	r2, #0
 8018434:	601a      	str	r2, [r3, #0]
 8018436:	605a      	str	r2, [r3, #4]
 8018438:	609a      	str	r2, [r3, #8]
 801843a:	0020      	movs	r0, r4
 801843c:	bd10      	pop	{r4, pc}
 801843e:	0003      	movs	r3, r0
 8018440:	6101      	str	r1, [r0, #16]
 8018442:	3318      	adds	r3, #24
 8018444:	6141      	str	r1, [r0, #20]
 8018446:	e7f4      	b.n	8018432 <_calloc_r+0x3a>
 8018448:	2100      	movs	r1, #0
 801844a:	f7fb fad2 	bl	80139f2 <memset>
 801844e:	e7f4      	b.n	801843a <_calloc_r+0x42>

08018450 <fiprintf>:
 8018450:	b40e      	push	{r1, r2, r3}
 8018452:	b503      	push	{r0, r1, lr}
 8018454:	0001      	movs	r1, r0
 8018456:	ab03      	add	r3, sp, #12
 8018458:	4804      	ldr	r0, [pc, #16]	; (801846c <fiprintf+0x1c>)
 801845a:	cb04      	ldmia	r3!, {r2}
 801845c:	6800      	ldr	r0, [r0, #0]
 801845e:	9301      	str	r3, [sp, #4]
 8018460:	f000 f83a 	bl	80184d8 <_vfiprintf_r>
 8018464:	b002      	add	sp, #8
 8018466:	bc08      	pop	{r3}
 8018468:	b003      	add	sp, #12
 801846a:	4718      	bx	r3
 801846c:	200000ac 	.word	0x200000ac

08018470 <__sprint_r>:
 8018470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018472:	b085      	sub	sp, #20
 8018474:	9001      	str	r0, [sp, #4]
 8018476:	6890      	ldr	r0, [r2, #8]
 8018478:	000d      	movs	r5, r1
 801847a:	0014      	movs	r4, r2
 801847c:	2800      	cmp	r0, #0
 801847e:	d102      	bne.n	8018486 <__sprint_r+0x16>
 8018480:	6050      	str	r0, [r2, #4]
 8018482:	b005      	add	sp, #20
 8018484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018486:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018488:	049b      	lsls	r3, r3, #18
 801848a:	d521      	bpl.n	80184d0 <__sprint_r+0x60>
 801848c:	6817      	ldr	r7, [r2, #0]
 801848e:	2600      	movs	r6, #0
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	9302      	str	r3, [sp, #8]
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	9300      	str	r3, [sp, #0]
 8018498:	089b      	lsrs	r3, r3, #2
 801849a:	9303      	str	r3, [sp, #12]
 801849c:	9b03      	ldr	r3, [sp, #12]
 801849e:	42b3      	cmp	r3, r6
 80184a0:	dc0b      	bgt.n	80184ba <__sprint_r+0x4a>
 80184a2:	2303      	movs	r3, #3
 80184a4:	9800      	ldr	r0, [sp, #0]
 80184a6:	3708      	adds	r7, #8
 80184a8:	4398      	bics	r0, r3
 80184aa:	68a3      	ldr	r3, [r4, #8]
 80184ac:	1a18      	subs	r0, r3, r0
 80184ae:	60a0      	str	r0, [r4, #8]
 80184b0:	d1ed      	bne.n	801848e <__sprint_r+0x1e>
 80184b2:	2300      	movs	r3, #0
 80184b4:	60a3      	str	r3, [r4, #8]
 80184b6:	6063      	str	r3, [r4, #4]
 80184b8:	e7e3      	b.n	8018482 <__sprint_r+0x12>
 80184ba:	9902      	ldr	r1, [sp, #8]
 80184bc:	00b3      	lsls	r3, r6, #2
 80184be:	58c9      	ldr	r1, [r1, r3]
 80184c0:	002a      	movs	r2, r5
 80184c2:	9801      	ldr	r0, [sp, #4]
 80184c4:	f000 ff2c 	bl	8019320 <_fputwc_r>
 80184c8:	1c43      	adds	r3, r0, #1
 80184ca:	d0f2      	beq.n	80184b2 <__sprint_r+0x42>
 80184cc:	3601      	adds	r6, #1
 80184ce:	e7e5      	b.n	801849c <__sprint_r+0x2c>
 80184d0:	9801      	ldr	r0, [sp, #4]
 80184d2:	f000 ff4f 	bl	8019374 <__sfvwrite_r>
 80184d6:	e7ec      	b.n	80184b2 <__sprint_r+0x42>

080184d8 <_vfiprintf_r>:
 80184d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184da:	b0c3      	sub	sp, #268	; 0x10c
 80184dc:	001c      	movs	r4, r3
 80184de:	001d      	movs	r5, r3
 80184e0:	9006      	str	r0, [sp, #24]
 80184e2:	9103      	str	r1, [sp, #12]
 80184e4:	9207      	str	r2, [sp, #28]
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d005      	beq.n	80184f6 <_vfiprintf_r+0x1e>
 80184ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80184ec:	9304      	str	r3, [sp, #16]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d101      	bne.n	80184f6 <_vfiprintf_r+0x1e>
 80184f2:	f000 fead 	bl	8019250 <__sinit>
 80184f6:	9b03      	ldr	r3, [sp, #12]
 80184f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80184fa:	07db      	lsls	r3, r3, #31
 80184fc:	d407      	bmi.n	801850e <_vfiprintf_r+0x36>
 80184fe:	9b03      	ldr	r3, [sp, #12]
 8018500:	899b      	ldrh	r3, [r3, #12]
 8018502:	059b      	lsls	r3, r3, #22
 8018504:	d403      	bmi.n	801850e <_vfiprintf_r+0x36>
 8018506:	9b03      	ldr	r3, [sp, #12]
 8018508:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801850a:	f7ff f9a3 	bl	8017854 <__retarget_lock_acquire_recursive>
 801850e:	9b03      	ldr	r3, [sp, #12]
 8018510:	220c      	movs	r2, #12
 8018512:	5e9a      	ldrsh	r2, [r3, r2]
 8018514:	2380      	movs	r3, #128	; 0x80
 8018516:	019b      	lsls	r3, r3, #6
 8018518:	421a      	tst	r2, r3
 801851a:	d107      	bne.n	801852c <_vfiprintf_r+0x54>
 801851c:	4313      	orrs	r3, r2
 801851e:	9a03      	ldr	r2, [sp, #12]
 8018520:	8193      	strh	r3, [r2, #12]
 8018522:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8018524:	4ba7      	ldr	r3, [pc, #668]	; (80187c4 <_vfiprintf_r+0x2ec>)
 8018526:	4013      	ands	r3, r2
 8018528:	9a03      	ldr	r2, [sp, #12]
 801852a:	6653      	str	r3, [r2, #100]	; 0x64
 801852c:	9b03      	ldr	r3, [sp, #12]
 801852e:	899b      	ldrh	r3, [r3, #12]
 8018530:	071b      	lsls	r3, r3, #28
 8018532:	d503      	bpl.n	801853c <_vfiprintf_r+0x64>
 8018534:	9b03      	ldr	r3, [sp, #12]
 8018536:	691b      	ldr	r3, [r3, #16]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d118      	bne.n	801856e <_vfiprintf_r+0x96>
 801853c:	9903      	ldr	r1, [sp, #12]
 801853e:	9806      	ldr	r0, [sp, #24]
 8018540:	f000 fd0c 	bl	8018f5c <__swsetup_r>
 8018544:	2800      	cmp	r0, #0
 8018546:	d012      	beq.n	801856e <_vfiprintf_r+0x96>
 8018548:	9b03      	ldr	r3, [sp, #12]
 801854a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801854c:	07db      	lsls	r3, r3, #31
 801854e:	d505      	bpl.n	801855c <_vfiprintf_r+0x84>
 8018550:	2301      	movs	r3, #1
 8018552:	425b      	negs	r3, r3
 8018554:	9308      	str	r3, [sp, #32]
 8018556:	9808      	ldr	r0, [sp, #32]
 8018558:	b043      	add	sp, #268	; 0x10c
 801855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801855c:	9b03      	ldr	r3, [sp, #12]
 801855e:	899b      	ldrh	r3, [r3, #12]
 8018560:	059b      	lsls	r3, r3, #22
 8018562:	d4f5      	bmi.n	8018550 <_vfiprintf_r+0x78>
 8018564:	9b03      	ldr	r3, [sp, #12]
 8018566:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018568:	f7ff f975 	bl	8017856 <__retarget_lock_release_recursive>
 801856c:	e7f0      	b.n	8018550 <_vfiprintf_r+0x78>
 801856e:	9b03      	ldr	r3, [sp, #12]
 8018570:	899a      	ldrh	r2, [r3, #12]
 8018572:	231a      	movs	r3, #26
 8018574:	4013      	ands	r3, r2
 8018576:	2b0a      	cmp	r3, #10
 8018578:	d116      	bne.n	80185a8 <_vfiprintf_r+0xd0>
 801857a:	9b03      	ldr	r3, [sp, #12]
 801857c:	210e      	movs	r1, #14
 801857e:	5e5b      	ldrsh	r3, [r3, r1]
 8018580:	2b00      	cmp	r3, #0
 8018582:	db11      	blt.n	80185a8 <_vfiprintf_r+0xd0>
 8018584:	9b03      	ldr	r3, [sp, #12]
 8018586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018588:	07db      	lsls	r3, r3, #31
 801858a:	d405      	bmi.n	8018598 <_vfiprintf_r+0xc0>
 801858c:	0593      	lsls	r3, r2, #22
 801858e:	d403      	bmi.n	8018598 <_vfiprintf_r+0xc0>
 8018590:	9b03      	ldr	r3, [sp, #12]
 8018592:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018594:	f7ff f95f 	bl	8017856 <__retarget_lock_release_recursive>
 8018598:	0023      	movs	r3, r4
 801859a:	9a07      	ldr	r2, [sp, #28]
 801859c:	9903      	ldr	r1, [sp, #12]
 801859e:	9806      	ldr	r0, [sp, #24]
 80185a0:	f000 fc98 	bl	8018ed4 <__sbprintf>
 80185a4:	9008      	str	r0, [sp, #32]
 80185a6:	e7d6      	b.n	8018556 <_vfiprintf_r+0x7e>
 80185a8:	2300      	movs	r3, #0
 80185aa:	af19      	add	r7, sp, #100	; 0x64
 80185ac:	9716      	str	r7, [sp, #88]	; 0x58
 80185ae:	9318      	str	r3, [sp, #96]	; 0x60
 80185b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80185b2:	930c      	str	r3, [sp, #48]	; 0x30
 80185b4:	930d      	str	r3, [sp, #52]	; 0x34
 80185b6:	930e      	str	r3, [sp, #56]	; 0x38
 80185b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80185ba:	9308      	str	r3, [sp, #32]
 80185bc:	9c07      	ldr	r4, [sp, #28]
 80185be:	7823      	ldrb	r3, [r4, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d002      	beq.n	80185ca <_vfiprintf_r+0xf2>
 80185c4:	2b25      	cmp	r3, #37	; 0x25
 80185c6:	d000      	beq.n	80185ca <_vfiprintf_r+0xf2>
 80185c8:	e093      	b.n	80186f2 <_vfiprintf_r+0x21a>
 80185ca:	9b07      	ldr	r3, [sp, #28]
 80185cc:	1ae3      	subs	r3, r4, r3
 80185ce:	001e      	movs	r6, r3
 80185d0:	9b07      	ldr	r3, [sp, #28]
 80185d2:	429c      	cmp	r4, r3
 80185d4:	d01a      	beq.n	801860c <_vfiprintf_r+0x134>
 80185d6:	46b4      	mov	ip, r6
 80185d8:	603b      	str	r3, [r7, #0]
 80185da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80185dc:	607e      	str	r6, [r7, #4]
 80185de:	4463      	add	r3, ip
 80185e0:	9318      	str	r3, [sp, #96]	; 0x60
 80185e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80185e4:	3708      	adds	r7, #8
 80185e6:	9304      	str	r3, [sp, #16]
 80185e8:	3301      	adds	r3, #1
 80185ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80185ec:	2b07      	cmp	r3, #7
 80185ee:	dd09      	ble.n	8018604 <_vfiprintf_r+0x12c>
 80185f0:	9903      	ldr	r1, [sp, #12]
 80185f2:	9806      	ldr	r0, [sp, #24]
 80185f4:	aa16      	add	r2, sp, #88	; 0x58
 80185f6:	f7ff ff3b 	bl	8018470 <__sprint_r>
 80185fa:	2800      	cmp	r0, #0
 80185fc:	d001      	beq.n	8018602 <_vfiprintf_r+0x12a>
 80185fe:	f000 fc00 	bl	8018e02 <_vfiprintf_r+0x92a>
 8018602:	af19      	add	r7, sp, #100	; 0x64
 8018604:	46b4      	mov	ip, r6
 8018606:	9b08      	ldr	r3, [sp, #32]
 8018608:	4463      	add	r3, ip
 801860a:	9308      	str	r3, [sp, #32]
 801860c:	7823      	ldrb	r3, [r4, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d101      	bne.n	8018616 <_vfiprintf_r+0x13e>
 8018612:	f000 fc1b 	bl	8018e4c <_vfiprintf_r+0x974>
 8018616:	2200      	movs	r2, #0
 8018618:	a914      	add	r1, sp, #80	; 0x50
 801861a:	70ca      	strb	r2, [r1, #3]
 801861c:	2101      	movs	r1, #1
 801861e:	1c63      	adds	r3, r4, #1
 8018620:	0014      	movs	r4, r2
 8018622:	4249      	negs	r1, r1
 8018624:	9105      	str	r1, [sp, #20]
 8018626:	9209      	str	r2, [sp, #36]	; 0x24
 8018628:	1c5a      	adds	r2, r3, #1
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	9207      	str	r2, [sp, #28]
 801862e:	0018      	movs	r0, r3
 8018630:	3820      	subs	r0, #32
 8018632:	285a      	cmp	r0, #90	; 0x5a
 8018634:	d900      	bls.n	8018638 <_vfiprintf_r+0x160>
 8018636:	e37c      	b.n	8018d32 <_vfiprintf_r+0x85a>
 8018638:	f7e7 fd80 	bl	800013c <__gnu_thumb1_case_uhi>
 801863c:	037b0098 	.word	0x037b0098
 8018640:	00a1037b 	.word	0x00a1037b
 8018644:	037b037b 	.word	0x037b037b
 8018648:	007d037b 	.word	0x007d037b
 801864c:	037b037b 	.word	0x037b037b
 8018650:	00ab00a3 	.word	0x00ab00a3
 8018654:	00a9037b 	.word	0x00a9037b
 8018658:	037b00af 	.word	0x037b00af
 801865c:	00d500d3 	.word	0x00d500d3
 8018660:	00d500d5 	.word	0x00d500d5
 8018664:	00d500d5 	.word	0x00d500d5
 8018668:	00d500d5 	.word	0x00d500d5
 801866c:	00d500d5 	.word	0x00d500d5
 8018670:	037b037b 	.word	0x037b037b
 8018674:	037b037b 	.word	0x037b037b
 8018678:	037b037b 	.word	0x037b037b
 801867c:	037b037b 	.word	0x037b037b
 8018680:	00fe037b 	.word	0x00fe037b
 8018684:	037b01f9 	.word	0x037b01f9
 8018688:	037b037b 	.word	0x037b037b
 801868c:	037b037b 	.word	0x037b037b
 8018690:	037b037b 	.word	0x037b037b
 8018694:	037b037b 	.word	0x037b037b
 8018698:	0252037b 	.word	0x0252037b
 801869c:	037b037b 	.word	0x037b037b
 80186a0:	0295037b 	.word	0x0295037b
 80186a4:	02b1037b 	.word	0x02b1037b
 80186a8:	037b037b 	.word	0x037b037b
 80186ac:	037b02ec 	.word	0x037b02ec
 80186b0:	037b037b 	.word	0x037b037b
 80186b4:	037b037b 	.word	0x037b037b
 80186b8:	037b037b 	.word	0x037b037b
 80186bc:	037b037b 	.word	0x037b037b
 80186c0:	00fe037b 	.word	0x00fe037b
 80186c4:	037b01fb 	.word	0x037b01fb
 80186c8:	037b037b 	.word	0x037b037b
 80186cc:	01fb00e7 	.word	0x01fb00e7
 80186d0:	037b00fa 	.word	0x037b00fa
 80186d4:	037b00f3 	.word	0x037b00f3
 80186d8:	0254023b 	.word	0x0254023b
 80186dc:	00fa0287 	.word	0x00fa0287
 80186e0:	0295037b 	.word	0x0295037b
 80186e4:	02b3009f 	.word	0x02b3009f
 80186e8:	037b037b 	.word	0x037b037b
 80186ec:	037b005d 	.word	0x037b005d
 80186f0:	009f      	.short	0x009f
 80186f2:	3401      	adds	r4, #1
 80186f4:	e763      	b.n	80185be <_vfiprintf_r+0xe6>
 80186f6:	4a34      	ldr	r2, [pc, #208]	; (80187c8 <_vfiprintf_r+0x2f0>)
 80186f8:	0020      	movs	r0, r4
 80186fa:	920c      	str	r2, [sp, #48]	; 0x30
 80186fc:	2220      	movs	r2, #32
 80186fe:	4010      	ands	r0, r2
 8018700:	4214      	tst	r4, r2
 8018702:	d100      	bne.n	8018706 <_vfiprintf_r+0x22e>
 8018704:	e288      	b.n	8018c18 <_vfiprintf_r+0x740>
 8018706:	3a19      	subs	r2, #25
 8018708:	3507      	adds	r5, #7
 801870a:	4395      	bics	r5, r2
 801870c:	0028      	movs	r0, r5
 801870e:	c806      	ldmia	r0!, {r1, r2}
 8018710:	9100      	str	r1, [sp, #0]
 8018712:	9201      	str	r2, [sp, #4]
 8018714:	9004      	str	r0, [sp, #16]
 8018716:	07e2      	lsls	r2, r4, #31
 8018718:	d509      	bpl.n	801872e <_vfiprintf_r+0x256>
 801871a:	9a00      	ldr	r2, [sp, #0]
 801871c:	9901      	ldr	r1, [sp, #4]
 801871e:	430a      	orrs	r2, r1
 8018720:	d005      	beq.n	801872e <_vfiprintf_r+0x256>
 8018722:	aa15      	add	r2, sp, #84	; 0x54
 8018724:	2130      	movs	r1, #48	; 0x30
 8018726:	7053      	strb	r3, [r2, #1]
 8018728:	2302      	movs	r3, #2
 801872a:	7011      	strb	r1, [r2, #0]
 801872c:	431c      	orrs	r4, r3
 801872e:	4b27      	ldr	r3, [pc, #156]	; (80187cc <_vfiprintf_r+0x2f4>)
 8018730:	401c      	ands	r4, r3
 8018732:	2302      	movs	r3, #2
 8018734:	e1e6      	b.n	8018b04 <_vfiprintf_r+0x62c>
 8018736:	9806      	ldr	r0, [sp, #24]
 8018738:	f7ff f886 	bl	8017848 <_localeconv_r>
 801873c:	6843      	ldr	r3, [r0, #4]
 801873e:	0018      	movs	r0, r3
 8018740:	930f      	str	r3, [sp, #60]	; 0x3c
 8018742:	f7e7 fce9 	bl	8000118 <strlen>
 8018746:	900e      	str	r0, [sp, #56]	; 0x38
 8018748:	9806      	ldr	r0, [sp, #24]
 801874a:	f7ff f87d 	bl	8017848 <_localeconv_r>
 801874e:	6883      	ldr	r3, [r0, #8]
 8018750:	930d      	str	r3, [sp, #52]	; 0x34
 8018752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018754:	2b00      	cmp	r3, #0
 8018756:	d010      	beq.n	801877a <_vfiprintf_r+0x2a2>
 8018758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801875a:	2b00      	cmp	r3, #0
 801875c:	d00d      	beq.n	801877a <_vfiprintf_r+0x2a2>
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d00a      	beq.n	801877a <_vfiprintf_r+0x2a2>
 8018764:	2380      	movs	r3, #128	; 0x80
 8018766:	00db      	lsls	r3, r3, #3
 8018768:	431c      	orrs	r4, r3
 801876a:	e006      	b.n	801877a <_vfiprintf_r+0x2a2>
 801876c:	ab14      	add	r3, sp, #80	; 0x50
 801876e:	78da      	ldrb	r2, [r3, #3]
 8018770:	3303      	adds	r3, #3
 8018772:	2a00      	cmp	r2, #0
 8018774:	d101      	bne.n	801877a <_vfiprintf_r+0x2a2>
 8018776:	3220      	adds	r2, #32
 8018778:	701a      	strb	r2, [r3, #0]
 801877a:	9b07      	ldr	r3, [sp, #28]
 801877c:	e754      	b.n	8018628 <_vfiprintf_r+0x150>
 801877e:	2301      	movs	r3, #1
 8018780:	e7f2      	b.n	8018768 <_vfiprintf_r+0x290>
 8018782:	cd08      	ldmia	r5!, {r3}
 8018784:	9309      	str	r3, [sp, #36]	; 0x24
 8018786:	2b00      	cmp	r3, #0
 8018788:	daf7      	bge.n	801877a <_vfiprintf_r+0x2a2>
 801878a:	425b      	negs	r3, r3
 801878c:	9309      	str	r3, [sp, #36]	; 0x24
 801878e:	2304      	movs	r3, #4
 8018790:	e7ea      	b.n	8018768 <_vfiprintf_r+0x290>
 8018792:	222b      	movs	r2, #43	; 0x2b
 8018794:	ab14      	add	r3, sp, #80	; 0x50
 8018796:	70da      	strb	r2, [r3, #3]
 8018798:	e7ef      	b.n	801877a <_vfiprintf_r+0x2a2>
 801879a:	9b07      	ldr	r3, [sp, #28]
 801879c:	1c5a      	adds	r2, r3, #1
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	2b2a      	cmp	r3, #42	; 0x2a
 80187a2:	d015      	beq.n	80187d0 <_vfiprintf_r+0x2f8>
 80187a4:	2100      	movs	r1, #0
 80187a6:	9105      	str	r1, [sp, #20]
 80187a8:	0019      	movs	r1, r3
 80187aa:	3930      	subs	r1, #48	; 0x30
 80187ac:	9207      	str	r2, [sp, #28]
 80187ae:	2909      	cmp	r1, #9
 80187b0:	d900      	bls.n	80187b4 <_vfiprintf_r+0x2dc>
 80187b2:	e73c      	b.n	801862e <_vfiprintf_r+0x156>
 80187b4:	230a      	movs	r3, #10
 80187b6:	9805      	ldr	r0, [sp, #20]
 80187b8:	4358      	muls	r0, r3
 80187ba:	1843      	adds	r3, r0, r1
 80187bc:	9305      	str	r3, [sp, #20]
 80187be:	7813      	ldrb	r3, [r2, #0]
 80187c0:	3201      	adds	r2, #1
 80187c2:	e7f1      	b.n	80187a8 <_vfiprintf_r+0x2d0>
 80187c4:	ffffdfff 	.word	0xffffdfff
 80187c8:	0801ccc8 	.word	0x0801ccc8
 80187cc:	fffffbff 	.word	0xfffffbff
 80187d0:	cd08      	ldmia	r5!, {r3}
 80187d2:	9305      	str	r3, [sp, #20]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	da02      	bge.n	80187de <_vfiprintf_r+0x306>
 80187d8:	2301      	movs	r3, #1
 80187da:	425b      	negs	r3, r3
 80187dc:	9305      	str	r3, [sp, #20]
 80187de:	9207      	str	r2, [sp, #28]
 80187e0:	e7cb      	b.n	801877a <_vfiprintf_r+0x2a2>
 80187e2:	2380      	movs	r3, #128	; 0x80
 80187e4:	e7c0      	b.n	8018768 <_vfiprintf_r+0x290>
 80187e6:	2100      	movs	r1, #0
 80187e8:	9a07      	ldr	r2, [sp, #28]
 80187ea:	9109      	str	r1, [sp, #36]	; 0x24
 80187ec:	200a      	movs	r0, #10
 80187ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80187f0:	3b30      	subs	r3, #48	; 0x30
 80187f2:	4341      	muls	r1, r0
 80187f4:	185b      	adds	r3, r3, r1
 80187f6:	9309      	str	r3, [sp, #36]	; 0x24
 80187f8:	0013      	movs	r3, r2
 80187fa:	781b      	ldrb	r3, [r3, #0]
 80187fc:	3201      	adds	r2, #1
 80187fe:	0019      	movs	r1, r3
 8018800:	3930      	subs	r1, #48	; 0x30
 8018802:	9207      	str	r2, [sp, #28]
 8018804:	2909      	cmp	r1, #9
 8018806:	d9f1      	bls.n	80187ec <_vfiprintf_r+0x314>
 8018808:	e711      	b.n	801862e <_vfiprintf_r+0x156>
 801880a:	9b07      	ldr	r3, [sp, #28]
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	2b68      	cmp	r3, #104	; 0x68
 8018810:	d105      	bne.n	801881e <_vfiprintf_r+0x346>
 8018812:	9b07      	ldr	r3, [sp, #28]
 8018814:	3301      	adds	r3, #1
 8018816:	9307      	str	r3, [sp, #28]
 8018818:	2380      	movs	r3, #128	; 0x80
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	e7a4      	b.n	8018768 <_vfiprintf_r+0x290>
 801881e:	2340      	movs	r3, #64	; 0x40
 8018820:	e7a2      	b.n	8018768 <_vfiprintf_r+0x290>
 8018822:	9b07      	ldr	r3, [sp, #28]
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	2b6c      	cmp	r3, #108	; 0x6c
 8018828:	d104      	bne.n	8018834 <_vfiprintf_r+0x35c>
 801882a:	9b07      	ldr	r3, [sp, #28]
 801882c:	3301      	adds	r3, #1
 801882e:	9307      	str	r3, [sp, #28]
 8018830:	2320      	movs	r3, #32
 8018832:	e799      	b.n	8018768 <_vfiprintf_r+0x290>
 8018834:	2310      	movs	r3, #16
 8018836:	e797      	b.n	8018768 <_vfiprintf_r+0x290>
 8018838:	9504      	str	r5, [sp, #16]
 801883a:	9a04      	ldr	r2, [sp, #16]
 801883c:	ad29      	add	r5, sp, #164	; 0xa4
 801883e:	ca08      	ldmia	r2!, {r3}
 8018840:	9204      	str	r2, [sp, #16]
 8018842:	2200      	movs	r2, #0
 8018844:	702b      	strb	r3, [r5, #0]
 8018846:	ab14      	add	r3, sp, #80	; 0x50
 8018848:	70da      	strb	r2, [r3, #3]
 801884a:	2301      	movs	r3, #1
 801884c:	920b      	str	r2, [sp, #44]	; 0x2c
 801884e:	9305      	str	r3, [sp, #20]
 8018850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018852:	9a05      	ldr	r2, [sp, #20]
 8018854:	930a      	str	r3, [sp, #40]	; 0x28
 8018856:	4293      	cmp	r3, r2
 8018858:	da00      	bge.n	801885c <_vfiprintf_r+0x384>
 801885a:	920a      	str	r2, [sp, #40]	; 0x28
 801885c:	ab14      	add	r3, sp, #80	; 0x50
 801885e:	3303      	adds	r3, #3
 8018860:	781b      	ldrb	r3, [r3, #0]
 8018862:	1e5a      	subs	r2, r3, #1
 8018864:	4193      	sbcs	r3, r2
 8018866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018868:	18d3      	adds	r3, r2, r3
 801886a:	930a      	str	r3, [sp, #40]	; 0x28
 801886c:	0022      	movs	r2, r4
 801886e:	2302      	movs	r3, #2
 8018870:	401a      	ands	r2, r3
 8018872:	9210      	str	r2, [sp, #64]	; 0x40
 8018874:	421c      	tst	r4, r3
 8018876:	d002      	beq.n	801887e <_vfiprintf_r+0x3a6>
 8018878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801887a:	3302      	adds	r3, #2
 801887c:	930a      	str	r3, [sp, #40]	; 0x28
 801887e:	2384      	movs	r3, #132	; 0x84
 8018880:	0022      	movs	r2, r4
 8018882:	401a      	ands	r2, r3
 8018884:	9211      	str	r2, [sp, #68]	; 0x44
 8018886:	421c      	tst	r4, r3
 8018888:	d11f      	bne.n	80188ca <_vfiprintf_r+0x3f2>
 801888a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801888c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801888e:	1a9b      	subs	r3, r3, r2
 8018890:	1e1e      	subs	r6, r3, #0
 8018892:	dd1a      	ble.n	80188ca <_vfiprintf_r+0x3f2>
 8018894:	0039      	movs	r1, r7
 8018896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018898:	48c9      	ldr	r0, [pc, #804]	; (8018bc0 <_vfiprintf_r+0x6e8>)
 801889a:	9312      	str	r3, [sp, #72]	; 0x48
 801889c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801889e:	3301      	adds	r3, #1
 80188a0:	3108      	adds	r1, #8
 80188a2:	6038      	str	r0, [r7, #0]
 80188a4:	2e10      	cmp	r6, #16
 80188a6:	dd00      	ble.n	80188aa <_vfiprintf_r+0x3d2>
 80188a8:	e251      	b.n	8018d4e <_vfiprintf_r+0x876>
 80188aa:	18b2      	adds	r2, r6, r2
 80188ac:	607e      	str	r6, [r7, #4]
 80188ae:	9218      	str	r2, [sp, #96]	; 0x60
 80188b0:	000f      	movs	r7, r1
 80188b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80188b4:	2b07      	cmp	r3, #7
 80188b6:	dd08      	ble.n	80188ca <_vfiprintf_r+0x3f2>
 80188b8:	9903      	ldr	r1, [sp, #12]
 80188ba:	9806      	ldr	r0, [sp, #24]
 80188bc:	aa16      	add	r2, sp, #88	; 0x58
 80188be:	f7ff fdd7 	bl	8018470 <__sprint_r>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	d000      	beq.n	80188c8 <_vfiprintf_r+0x3f0>
 80188c6:	e29c      	b.n	8018e02 <_vfiprintf_r+0x92a>
 80188c8:	af19      	add	r7, sp, #100	; 0x64
 80188ca:	ab14      	add	r3, sp, #80	; 0x50
 80188cc:	1cda      	adds	r2, r3, #3
 80188ce:	78db      	ldrb	r3, [r3, #3]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d017      	beq.n	8018904 <_vfiprintf_r+0x42c>
 80188d4:	603a      	str	r2, [r7, #0]
 80188d6:	2201      	movs	r2, #1
 80188d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80188da:	607a      	str	r2, [r7, #4]
 80188dc:	9312      	str	r3, [sp, #72]	; 0x48
 80188de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80188e2:	3201      	adds	r2, #1
 80188e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80188e6:	3301      	adds	r3, #1
 80188e8:	9218      	str	r2, [sp, #96]	; 0x60
 80188ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80188ec:	3708      	adds	r7, #8
 80188ee:	2b07      	cmp	r3, #7
 80188f0:	dd08      	ble.n	8018904 <_vfiprintf_r+0x42c>
 80188f2:	9903      	ldr	r1, [sp, #12]
 80188f4:	9806      	ldr	r0, [sp, #24]
 80188f6:	aa16      	add	r2, sp, #88	; 0x58
 80188f8:	f7ff fdba 	bl	8018470 <__sprint_r>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d000      	beq.n	8018902 <_vfiprintf_r+0x42a>
 8018900:	e27f      	b.n	8018e02 <_vfiprintf_r+0x92a>
 8018902:	af19      	add	r7, sp, #100	; 0x64
 8018904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018906:	2b00      	cmp	r3, #0
 8018908:	d018      	beq.n	801893c <_vfiprintf_r+0x464>
 801890a:	aa15      	add	r2, sp, #84	; 0x54
 801890c:	603a      	str	r2, [r7, #0]
 801890e:	2202      	movs	r2, #2
 8018910:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018912:	607a      	str	r2, [r7, #4]
 8018914:	9310      	str	r3, [sp, #64]	; 0x40
 8018916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801891a:	3202      	adds	r2, #2
 801891c:	9312      	str	r3, [sp, #72]	; 0x48
 801891e:	3301      	adds	r3, #1
 8018920:	9218      	str	r2, [sp, #96]	; 0x60
 8018922:	9317      	str	r3, [sp, #92]	; 0x5c
 8018924:	3708      	adds	r7, #8
 8018926:	2b07      	cmp	r3, #7
 8018928:	dd08      	ble.n	801893c <_vfiprintf_r+0x464>
 801892a:	9903      	ldr	r1, [sp, #12]
 801892c:	9806      	ldr	r0, [sp, #24]
 801892e:	aa16      	add	r2, sp, #88	; 0x58
 8018930:	f7ff fd9e 	bl	8018470 <__sprint_r>
 8018934:	2800      	cmp	r0, #0
 8018936:	d000      	beq.n	801893a <_vfiprintf_r+0x462>
 8018938:	e263      	b.n	8018e02 <_vfiprintf_r+0x92a>
 801893a:	af19      	add	r7, sp, #100	; 0x64
 801893c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801893e:	2b80      	cmp	r3, #128	; 0x80
 8018940:	d11f      	bne.n	8018982 <_vfiprintf_r+0x4aa>
 8018942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018946:	1a9b      	subs	r3, r3, r2
 8018948:	1e1e      	subs	r6, r3, #0
 801894a:	dd1a      	ble.n	8018982 <_vfiprintf_r+0x4aa>
 801894c:	0039      	movs	r1, r7
 801894e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018950:	489c      	ldr	r0, [pc, #624]	; (8018bc4 <_vfiprintf_r+0x6ec>)
 8018952:	9310      	str	r3, [sp, #64]	; 0x40
 8018954:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018956:	3301      	adds	r3, #1
 8018958:	3108      	adds	r1, #8
 801895a:	6038      	str	r0, [r7, #0]
 801895c:	2e10      	cmp	r6, #16
 801895e:	dd00      	ble.n	8018962 <_vfiprintf_r+0x48a>
 8018960:	e209      	b.n	8018d76 <_vfiprintf_r+0x89e>
 8018962:	18b2      	adds	r2, r6, r2
 8018964:	607e      	str	r6, [r7, #4]
 8018966:	9218      	str	r2, [sp, #96]	; 0x60
 8018968:	000f      	movs	r7, r1
 801896a:	9317      	str	r3, [sp, #92]	; 0x5c
 801896c:	2b07      	cmp	r3, #7
 801896e:	dd08      	ble.n	8018982 <_vfiprintf_r+0x4aa>
 8018970:	9903      	ldr	r1, [sp, #12]
 8018972:	9806      	ldr	r0, [sp, #24]
 8018974:	aa16      	add	r2, sp, #88	; 0x58
 8018976:	f7ff fd7b 	bl	8018470 <__sprint_r>
 801897a:	2800      	cmp	r0, #0
 801897c:	d000      	beq.n	8018980 <_vfiprintf_r+0x4a8>
 801897e:	e240      	b.n	8018e02 <_vfiprintf_r+0x92a>
 8018980:	af19      	add	r7, sp, #100	; 0x64
 8018982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018984:	9a05      	ldr	r2, [sp, #20]
 8018986:	1a9b      	subs	r3, r3, r2
 8018988:	1e1e      	subs	r6, r3, #0
 801898a:	dd1a      	ble.n	80189c2 <_vfiprintf_r+0x4ea>
 801898c:	0039      	movs	r1, r7
 801898e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018990:	488c      	ldr	r0, [pc, #560]	; (8018bc4 <_vfiprintf_r+0x6ec>)
 8018992:	930b      	str	r3, [sp, #44]	; 0x2c
 8018994:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018996:	3301      	adds	r3, #1
 8018998:	3108      	adds	r1, #8
 801899a:	6038      	str	r0, [r7, #0]
 801899c:	2e10      	cmp	r6, #16
 801899e:	dd00      	ble.n	80189a2 <_vfiprintf_r+0x4ca>
 80189a0:	e1fd      	b.n	8018d9e <_vfiprintf_r+0x8c6>
 80189a2:	18b2      	adds	r2, r6, r2
 80189a4:	607e      	str	r6, [r7, #4]
 80189a6:	9218      	str	r2, [sp, #96]	; 0x60
 80189a8:	000f      	movs	r7, r1
 80189aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80189ac:	2b07      	cmp	r3, #7
 80189ae:	dd08      	ble.n	80189c2 <_vfiprintf_r+0x4ea>
 80189b0:	9903      	ldr	r1, [sp, #12]
 80189b2:	9806      	ldr	r0, [sp, #24]
 80189b4:	aa16      	add	r2, sp, #88	; 0x58
 80189b6:	f7ff fd5b 	bl	8018470 <__sprint_r>
 80189ba:	2800      	cmp	r0, #0
 80189bc:	d000      	beq.n	80189c0 <_vfiprintf_r+0x4e8>
 80189be:	e220      	b.n	8018e02 <_vfiprintf_r+0x92a>
 80189c0:	af19      	add	r7, sp, #100	; 0x64
 80189c2:	9b05      	ldr	r3, [sp, #20]
 80189c4:	603d      	str	r5, [r7, #0]
 80189c6:	607b      	str	r3, [r7, #4]
 80189c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80189ca:	3708      	adds	r7, #8
 80189cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80189ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189d0:	9b05      	ldr	r3, [sp, #20]
 80189d2:	4694      	mov	ip, r2
 80189d4:	4463      	add	r3, ip
 80189d6:	9318      	str	r3, [sp, #96]	; 0x60
 80189d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189da:	9305      	str	r3, [sp, #20]
 80189dc:	3301      	adds	r3, #1
 80189de:	9317      	str	r3, [sp, #92]	; 0x5c
 80189e0:	2b07      	cmp	r3, #7
 80189e2:	dd08      	ble.n	80189f6 <_vfiprintf_r+0x51e>
 80189e4:	9903      	ldr	r1, [sp, #12]
 80189e6:	9806      	ldr	r0, [sp, #24]
 80189e8:	aa16      	add	r2, sp, #88	; 0x58
 80189ea:	f7ff fd41 	bl	8018470 <__sprint_r>
 80189ee:	2800      	cmp	r0, #0
 80189f0:	d000      	beq.n	80189f4 <_vfiprintf_r+0x51c>
 80189f2:	e206      	b.n	8018e02 <_vfiprintf_r+0x92a>
 80189f4:	af19      	add	r7, sp, #100	; 0x64
 80189f6:	0763      	lsls	r3, r4, #29
 80189f8:	d500      	bpl.n	80189fc <_vfiprintf_r+0x524>
 80189fa:	e1e4      	b.n	8018dc6 <_vfiprintf_r+0x8ee>
 80189fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a00:	4293      	cmp	r3, r2
 8018a02:	da00      	bge.n	8018a06 <_vfiprintf_r+0x52e>
 8018a04:	0013      	movs	r3, r2
 8018a06:	9a08      	ldr	r2, [sp, #32]
 8018a08:	18d3      	adds	r3, r2, r3
 8018a0a:	9308      	str	r3, [sp, #32]
 8018a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018a0e:	9305      	str	r3, [sp, #20]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d007      	beq.n	8018a24 <_vfiprintf_r+0x54c>
 8018a14:	9903      	ldr	r1, [sp, #12]
 8018a16:	9806      	ldr	r0, [sp, #24]
 8018a18:	aa16      	add	r2, sp, #88	; 0x58
 8018a1a:	f7ff fd29 	bl	8018470 <__sprint_r>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	d000      	beq.n	8018a24 <_vfiprintf_r+0x54c>
 8018a22:	e1ee      	b.n	8018e02 <_vfiprintf_r+0x92a>
 8018a24:	2300      	movs	r3, #0
 8018a26:	9d04      	ldr	r5, [sp, #16]
 8018a28:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a2a:	af19      	add	r7, sp, #100	; 0x64
 8018a2c:	e5c6      	b.n	80185bc <_vfiprintf_r+0xe4>
 8018a2e:	2310      	movs	r3, #16
 8018a30:	431c      	orrs	r4, r3
 8018a32:	06a3      	lsls	r3, r4, #26
 8018a34:	d52b      	bpl.n	8018a8e <_vfiprintf_r+0x5b6>
 8018a36:	2307      	movs	r3, #7
 8018a38:	3507      	adds	r5, #7
 8018a3a:	439d      	bics	r5, r3
 8018a3c:	0029      	movs	r1, r5
 8018a3e:	c90c      	ldmia	r1!, {r2, r3}
 8018a40:	9200      	str	r2, [sp, #0]
 8018a42:	9301      	str	r3, [sp, #4]
 8018a44:	9104      	str	r1, [sp, #16]
 8018a46:	9a01      	ldr	r2, [sp, #4]
 8018a48:	2301      	movs	r3, #1
 8018a4a:	2a00      	cmp	r2, #0
 8018a4c:	da09      	bge.n	8018a62 <_vfiprintf_r+0x58a>
 8018a4e:	9d00      	ldr	r5, [sp, #0]
 8018a50:	9e01      	ldr	r6, [sp, #4]
 8018a52:	2200      	movs	r2, #0
 8018a54:	4269      	negs	r1, r5
 8018a56:	41b2      	sbcs	r2, r6
 8018a58:	9100      	str	r1, [sp, #0]
 8018a5a:	9201      	str	r2, [sp, #4]
 8018a5c:	212d      	movs	r1, #45	; 0x2d
 8018a5e:	aa14      	add	r2, sp, #80	; 0x50
 8018a60:	70d1      	strb	r1, [r2, #3]
 8018a62:	9901      	ldr	r1, [sp, #4]
 8018a64:	9a00      	ldr	r2, [sp, #0]
 8018a66:	430a      	orrs	r2, r1
 8018a68:	9905      	ldr	r1, [sp, #20]
 8018a6a:	3101      	adds	r1, #1
 8018a6c:	d100      	bne.n	8018a70 <_vfiprintf_r+0x598>
 8018a6e:	e1fc      	b.n	8018e6a <_vfiprintf_r+0x992>
 8018a70:	2180      	movs	r1, #128	; 0x80
 8018a72:	0020      	movs	r0, r4
 8018a74:	4388      	bics	r0, r1
 8018a76:	0006      	movs	r6, r0
 8018a78:	2a00      	cmp	r2, #0
 8018a7a:	d000      	beq.n	8018a7e <_vfiprintf_r+0x5a6>
 8018a7c:	e1f9      	b.n	8018e72 <_vfiprintf_r+0x99a>
 8018a7e:	9a05      	ldr	r2, [sp, #20]
 8018a80:	2a00      	cmp	r2, #0
 8018a82:	d100      	bne.n	8018a86 <_vfiprintf_r+0x5ae>
 8018a84:	e149      	b.n	8018d1a <_vfiprintf_r+0x842>
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	d000      	beq.n	8018a8c <_vfiprintf_r+0x5b4>
 8018a8a:	e1f5      	b.n	8018e78 <_vfiprintf_r+0x9a0>
 8018a8c:	e0ea      	b.n	8018c64 <_vfiprintf_r+0x78c>
 8018a8e:	1d2b      	adds	r3, r5, #4
 8018a90:	9304      	str	r3, [sp, #16]
 8018a92:	06e3      	lsls	r3, r4, #27
 8018a94:	d504      	bpl.n	8018aa0 <_vfiprintf_r+0x5c8>
 8018a96:	682b      	ldr	r3, [r5, #0]
 8018a98:	9300      	str	r3, [sp, #0]
 8018a9a:	17db      	asrs	r3, r3, #31
 8018a9c:	9301      	str	r3, [sp, #4]
 8018a9e:	e7d2      	b.n	8018a46 <_vfiprintf_r+0x56e>
 8018aa0:	682b      	ldr	r3, [r5, #0]
 8018aa2:	0662      	lsls	r2, r4, #25
 8018aa4:	d501      	bpl.n	8018aaa <_vfiprintf_r+0x5d2>
 8018aa6:	b21b      	sxth	r3, r3
 8018aa8:	e7f6      	b.n	8018a98 <_vfiprintf_r+0x5c0>
 8018aaa:	05a2      	lsls	r2, r4, #22
 8018aac:	d5f4      	bpl.n	8018a98 <_vfiprintf_r+0x5c0>
 8018aae:	b25b      	sxtb	r3, r3
 8018ab0:	e7f2      	b.n	8018a98 <_vfiprintf_r+0x5c0>
 8018ab2:	cd08      	ldmia	r5!, {r3}
 8018ab4:	06a2      	lsls	r2, r4, #26
 8018ab6:	d504      	bpl.n	8018ac2 <_vfiprintf_r+0x5ea>
 8018ab8:	9a08      	ldr	r2, [sp, #32]
 8018aba:	601a      	str	r2, [r3, #0]
 8018abc:	17d2      	asrs	r2, r2, #31
 8018abe:	605a      	str	r2, [r3, #4]
 8018ac0:	e57c      	b.n	80185bc <_vfiprintf_r+0xe4>
 8018ac2:	06e2      	lsls	r2, r4, #27
 8018ac4:	d502      	bpl.n	8018acc <_vfiprintf_r+0x5f4>
 8018ac6:	9a08      	ldr	r2, [sp, #32]
 8018ac8:	601a      	str	r2, [r3, #0]
 8018aca:	e577      	b.n	80185bc <_vfiprintf_r+0xe4>
 8018acc:	0662      	lsls	r2, r4, #25
 8018ace:	d502      	bpl.n	8018ad6 <_vfiprintf_r+0x5fe>
 8018ad0:	9a08      	ldr	r2, [sp, #32]
 8018ad2:	801a      	strh	r2, [r3, #0]
 8018ad4:	e572      	b.n	80185bc <_vfiprintf_r+0xe4>
 8018ad6:	05a2      	lsls	r2, r4, #22
 8018ad8:	d5f5      	bpl.n	8018ac6 <_vfiprintf_r+0x5ee>
 8018ada:	9a08      	ldr	r2, [sp, #32]
 8018adc:	701a      	strb	r2, [r3, #0]
 8018ade:	e56d      	b.n	80185bc <_vfiprintf_r+0xe4>
 8018ae0:	2310      	movs	r3, #16
 8018ae2:	431c      	orrs	r4, r3
 8018ae4:	2320      	movs	r3, #32
 8018ae6:	0021      	movs	r1, r4
 8018ae8:	4019      	ands	r1, r3
 8018aea:	421c      	tst	r4, r3
 8018aec:	d00d      	beq.n	8018b0a <_vfiprintf_r+0x632>
 8018aee:	3b19      	subs	r3, #25
 8018af0:	3507      	adds	r5, #7
 8018af2:	439d      	bics	r5, r3
 8018af4:	0029      	movs	r1, r5
 8018af6:	c90c      	ldmia	r1!, {r2, r3}
 8018af8:	9200      	str	r2, [sp, #0]
 8018afa:	9301      	str	r3, [sp, #4]
 8018afc:	9104      	str	r1, [sp, #16]
 8018afe:	4b32      	ldr	r3, [pc, #200]	; (8018bc8 <_vfiprintf_r+0x6f0>)
 8018b00:	401c      	ands	r4, r3
 8018b02:	2300      	movs	r3, #0
 8018b04:	2100      	movs	r1, #0
 8018b06:	aa14      	add	r2, sp, #80	; 0x50
 8018b08:	e7aa      	b.n	8018a60 <_vfiprintf_r+0x588>
 8018b0a:	1d2b      	adds	r3, r5, #4
 8018b0c:	0022      	movs	r2, r4
 8018b0e:	9304      	str	r3, [sp, #16]
 8018b10:	2310      	movs	r3, #16
 8018b12:	401a      	ands	r2, r3
 8018b14:	421c      	tst	r4, r3
 8018b16:	d003      	beq.n	8018b20 <_vfiprintf_r+0x648>
 8018b18:	682b      	ldr	r3, [r5, #0]
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	9101      	str	r1, [sp, #4]
 8018b1e:	e7ee      	b.n	8018afe <_vfiprintf_r+0x626>
 8018b20:	2340      	movs	r3, #64	; 0x40
 8018b22:	0021      	movs	r1, r4
 8018b24:	4019      	ands	r1, r3
 8018b26:	421c      	tst	r4, r3
 8018b28:	d004      	beq.n	8018b34 <_vfiprintf_r+0x65c>
 8018b2a:	682b      	ldr	r3, [r5, #0]
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	9201      	str	r2, [sp, #4]
 8018b32:	e7e4      	b.n	8018afe <_vfiprintf_r+0x626>
 8018b34:	2380      	movs	r3, #128	; 0x80
 8018b36:	0022      	movs	r2, r4
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	401a      	ands	r2, r3
 8018b3c:	421c      	tst	r4, r3
 8018b3e:	d002      	beq.n	8018b46 <_vfiprintf_r+0x66e>
 8018b40:	682b      	ldr	r3, [r5, #0]
 8018b42:	b2db      	uxtb	r3, r3
 8018b44:	e7e9      	b.n	8018b1a <_vfiprintf_r+0x642>
 8018b46:	682b      	ldr	r3, [r5, #0]
 8018b48:	e7f1      	b.n	8018b2e <_vfiprintf_r+0x656>
 8018b4a:	002b      	movs	r3, r5
 8018b4c:	cb04      	ldmia	r3!, {r2}
 8018b4e:	491f      	ldr	r1, [pc, #124]	; (8018bcc <_vfiprintf_r+0x6f4>)
 8018b50:	9304      	str	r3, [sp, #16]
 8018b52:	2300      	movs	r3, #0
 8018b54:	9200      	str	r2, [sp, #0]
 8018b56:	aa15      	add	r2, sp, #84	; 0x54
 8018b58:	8011      	strh	r1, [r2, #0]
 8018b5a:	4a1d      	ldr	r2, [pc, #116]	; (8018bd0 <_vfiprintf_r+0x6f8>)
 8018b5c:	9301      	str	r3, [sp, #4]
 8018b5e:	3302      	adds	r3, #2
 8018b60:	431c      	orrs	r4, r3
 8018b62:	920c      	str	r2, [sp, #48]	; 0x30
 8018b64:	e7ce      	b.n	8018b04 <_vfiprintf_r+0x62c>
 8018b66:	002b      	movs	r3, r5
 8018b68:	2200      	movs	r2, #0
 8018b6a:	cb20      	ldmia	r3!, {r5}
 8018b6c:	9304      	str	r3, [sp, #16]
 8018b6e:	ab14      	add	r3, sp, #80	; 0x50
 8018b70:	70da      	strb	r2, [r3, #3]
 8018b72:	9b05      	ldr	r3, [sp, #20]
 8018b74:	3301      	adds	r3, #1
 8018b76:	d00d      	beq.n	8018b94 <_vfiprintf_r+0x6bc>
 8018b78:	2100      	movs	r1, #0
 8018b7a:	0028      	movs	r0, r5
 8018b7c:	9a05      	ldr	r2, [sp, #20]
 8018b7e:	f7fe fe7d 	bl	801787c <memchr>
 8018b82:	900b      	str	r0, [sp, #44]	; 0x2c
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d100      	bne.n	8018b8a <_vfiprintf_r+0x6b2>
 8018b88:	e662      	b.n	8018850 <_vfiprintf_r+0x378>
 8018b8a:	1b43      	subs	r3, r0, r5
 8018b8c:	9305      	str	r3, [sp, #20]
 8018b8e:	2300      	movs	r3, #0
 8018b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b92:	e65d      	b.n	8018850 <_vfiprintf_r+0x378>
 8018b94:	0028      	movs	r0, r5
 8018b96:	f7e7 fabf 	bl	8000118 <strlen>
 8018b9a:	9005      	str	r0, [sp, #20]
 8018b9c:	e7f7      	b.n	8018b8e <_vfiprintf_r+0x6b6>
 8018b9e:	2310      	movs	r3, #16
 8018ba0:	431c      	orrs	r4, r3
 8018ba2:	2320      	movs	r3, #32
 8018ba4:	0021      	movs	r1, r4
 8018ba6:	4019      	ands	r1, r3
 8018ba8:	421c      	tst	r4, r3
 8018baa:	d013      	beq.n	8018bd4 <_vfiprintf_r+0x6fc>
 8018bac:	3b19      	subs	r3, #25
 8018bae:	3507      	adds	r5, #7
 8018bb0:	439d      	bics	r5, r3
 8018bb2:	0029      	movs	r1, r5
 8018bb4:	c90c      	ldmia	r1!, {r2, r3}
 8018bb6:	9200      	str	r2, [sp, #0]
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	9104      	str	r1, [sp, #16]
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	e7a1      	b.n	8018b04 <_vfiprintf_r+0x62c>
 8018bc0:	0801cfa0 	.word	0x0801cfa0
 8018bc4:	0801cfb0 	.word	0x0801cfb0
 8018bc8:	fffffbff 	.word	0xfffffbff
 8018bcc:	00007830 	.word	0x00007830
 8018bd0:	0801ccc8 	.word	0x0801ccc8
 8018bd4:	1d2b      	adds	r3, r5, #4
 8018bd6:	0022      	movs	r2, r4
 8018bd8:	9304      	str	r3, [sp, #16]
 8018bda:	2310      	movs	r3, #16
 8018bdc:	401a      	ands	r2, r3
 8018bde:	421c      	tst	r4, r3
 8018be0:	d003      	beq.n	8018bea <_vfiprintf_r+0x712>
 8018be2:	682b      	ldr	r3, [r5, #0]
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	9101      	str	r1, [sp, #4]
 8018be8:	e7e8      	b.n	8018bbc <_vfiprintf_r+0x6e4>
 8018bea:	2340      	movs	r3, #64	; 0x40
 8018bec:	0021      	movs	r1, r4
 8018bee:	4019      	ands	r1, r3
 8018bf0:	421c      	tst	r4, r3
 8018bf2:	d004      	beq.n	8018bfe <_vfiprintf_r+0x726>
 8018bf4:	682b      	ldr	r3, [r5, #0]
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	9300      	str	r3, [sp, #0]
 8018bfa:	9201      	str	r2, [sp, #4]
 8018bfc:	e7de      	b.n	8018bbc <_vfiprintf_r+0x6e4>
 8018bfe:	2380      	movs	r3, #128	; 0x80
 8018c00:	0022      	movs	r2, r4
 8018c02:	009b      	lsls	r3, r3, #2
 8018c04:	401a      	ands	r2, r3
 8018c06:	421c      	tst	r4, r3
 8018c08:	d002      	beq.n	8018c10 <_vfiprintf_r+0x738>
 8018c0a:	682b      	ldr	r3, [r5, #0]
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	e7e9      	b.n	8018be4 <_vfiprintf_r+0x70c>
 8018c10:	682b      	ldr	r3, [r5, #0]
 8018c12:	e7f1      	b.n	8018bf8 <_vfiprintf_r+0x720>
 8018c14:	4aad      	ldr	r2, [pc, #692]	; (8018ecc <_vfiprintf_r+0x9f4>)
 8018c16:	e56f      	b.n	80186f8 <_vfiprintf_r+0x220>
 8018c18:	1d2a      	adds	r2, r5, #4
 8018c1a:	0021      	movs	r1, r4
 8018c1c:	9204      	str	r2, [sp, #16]
 8018c1e:	2210      	movs	r2, #16
 8018c20:	4011      	ands	r1, r2
 8018c22:	4214      	tst	r4, r2
 8018c24:	d003      	beq.n	8018c2e <_vfiprintf_r+0x756>
 8018c26:	682a      	ldr	r2, [r5, #0]
 8018c28:	9200      	str	r2, [sp, #0]
 8018c2a:	9001      	str	r0, [sp, #4]
 8018c2c:	e573      	b.n	8018716 <_vfiprintf_r+0x23e>
 8018c2e:	2240      	movs	r2, #64	; 0x40
 8018c30:	0020      	movs	r0, r4
 8018c32:	4010      	ands	r0, r2
 8018c34:	4214      	tst	r4, r2
 8018c36:	d004      	beq.n	8018c42 <_vfiprintf_r+0x76a>
 8018c38:	682a      	ldr	r2, [r5, #0]
 8018c3a:	b292      	uxth	r2, r2
 8018c3c:	9200      	str	r2, [sp, #0]
 8018c3e:	9101      	str	r1, [sp, #4]
 8018c40:	e569      	b.n	8018716 <_vfiprintf_r+0x23e>
 8018c42:	2280      	movs	r2, #128	; 0x80
 8018c44:	0021      	movs	r1, r4
 8018c46:	0092      	lsls	r2, r2, #2
 8018c48:	4011      	ands	r1, r2
 8018c4a:	4214      	tst	r4, r2
 8018c4c:	d002      	beq.n	8018c54 <_vfiprintf_r+0x77c>
 8018c4e:	682a      	ldr	r2, [r5, #0]
 8018c50:	b2d2      	uxtb	r2, r2
 8018c52:	e7e9      	b.n	8018c28 <_vfiprintf_r+0x750>
 8018c54:	682a      	ldr	r2, [r5, #0]
 8018c56:	e7f1      	b.n	8018c3c <_vfiprintf_r+0x764>
 8018c58:	9b01      	ldr	r3, [sp, #4]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d109      	bne.n	8018c72 <_vfiprintf_r+0x79a>
 8018c5e:	9b00      	ldr	r3, [sp, #0]
 8018c60:	2b09      	cmp	r3, #9
 8018c62:	d806      	bhi.n	8018c72 <_vfiprintf_r+0x79a>
 8018c64:	25b7      	movs	r5, #183	; 0xb7
 8018c66:	ab14      	add	r3, sp, #80	; 0x50
 8018c68:	18ed      	adds	r5, r5, r3
 8018c6a:	9b00      	ldr	r3, [sp, #0]
 8018c6c:	3330      	adds	r3, #48	; 0x30
 8018c6e:	702b      	strb	r3, [r5, #0]
 8018c70:	e125      	b.n	8018ebe <_vfiprintf_r+0x9e6>
 8018c72:	2380      	movs	r3, #128	; 0x80
 8018c74:	0032      	movs	r2, r6
 8018c76:	2400      	movs	r4, #0
 8018c78:	00db      	lsls	r3, r3, #3
 8018c7a:	401a      	ands	r2, r3
 8018c7c:	ad42      	add	r5, sp, #264	; 0x108
 8018c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8018c80:	220a      	movs	r2, #10
 8018c82:	9800      	ldr	r0, [sp, #0]
 8018c84:	9901      	ldr	r1, [sp, #4]
 8018c86:	2300      	movs	r3, #0
 8018c88:	f7e7 fc50 	bl	800052c <__aeabi_uldivmod>
 8018c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c8e:	3d01      	subs	r5, #1
 8018c90:	3230      	adds	r2, #48	; 0x30
 8018c92:	702a      	strb	r2, [r5, #0]
 8018c94:	3401      	adds	r4, #1
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d01a      	beq.n	8018cd0 <_vfiprintf_r+0x7f8>
 8018c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	42a3      	cmp	r3, r4
 8018ca0:	d116      	bne.n	8018cd0 <_vfiprintf_r+0x7f8>
 8018ca2:	2cff      	cmp	r4, #255	; 0xff
 8018ca4:	d014      	beq.n	8018cd0 <_vfiprintf_r+0x7f8>
 8018ca6:	9b01      	ldr	r3, [sp, #4]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d102      	bne.n	8018cb2 <_vfiprintf_r+0x7da>
 8018cac:	9b00      	ldr	r3, [sp, #0]
 8018cae:	2b09      	cmp	r3, #9
 8018cb0:	d90e      	bls.n	8018cd0 <_vfiprintf_r+0x7f8>
 8018cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018cb6:	1aed      	subs	r5, r5, r3
 8018cb8:	001a      	movs	r2, r3
 8018cba:	0028      	movs	r0, r5
 8018cbc:	f7fb f8e2 	bl	8013e84 <strncpy>
 8018cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018cc2:	2400      	movs	r4, #0
 8018cc4:	785b      	ldrb	r3, [r3, #1]
 8018cc6:	1e5a      	subs	r2, r3, #1
 8018cc8:	4193      	sbcs	r3, r2
 8018cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ccc:	18d3      	adds	r3, r2, r3
 8018cce:	930d      	str	r3, [sp, #52]	; 0x34
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	9800      	ldr	r0, [sp, #0]
 8018cd4:	9901      	ldr	r1, [sp, #4]
 8018cd6:	220a      	movs	r2, #10
 8018cd8:	f7e7 fc28 	bl	800052c <__aeabi_uldivmod>
 8018cdc:	9b01      	ldr	r3, [sp, #4]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d103      	bne.n	8018cea <_vfiprintf_r+0x812>
 8018ce2:	9b00      	ldr	r3, [sp, #0]
 8018ce4:	2b09      	cmp	r3, #9
 8018ce6:	d800      	bhi.n	8018cea <_vfiprintf_r+0x812>
 8018ce8:	e0e9      	b.n	8018ebe <_vfiprintf_r+0x9e6>
 8018cea:	9000      	str	r0, [sp, #0]
 8018cec:	9101      	str	r1, [sp, #4]
 8018cee:	e7c7      	b.n	8018c80 <_vfiprintf_r+0x7a8>
 8018cf0:	200f      	movs	r0, #15
 8018cf2:	9b00      	ldr	r3, [sp, #0]
 8018cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018cf6:	4003      	ands	r3, r0
 8018cf8:	5cd3      	ldrb	r3, [r2, r3]
 8018cfa:	3d01      	subs	r5, #1
 8018cfc:	702b      	strb	r3, [r5, #0]
 8018cfe:	9b01      	ldr	r3, [sp, #4]
 8018d00:	0719      	lsls	r1, r3, #28
 8018d02:	9b00      	ldr	r3, [sp, #0]
 8018d04:	091a      	lsrs	r2, r3, #4
 8018d06:	9b01      	ldr	r3, [sp, #4]
 8018d08:	4311      	orrs	r1, r2
 8018d0a:	091b      	lsrs	r3, r3, #4
 8018d0c:	9301      	str	r3, [sp, #4]
 8018d0e:	000b      	movs	r3, r1
 8018d10:	9a01      	ldr	r2, [sp, #4]
 8018d12:	9100      	str	r1, [sp, #0]
 8018d14:	4313      	orrs	r3, r2
 8018d16:	d1ec      	bne.n	8018cf2 <_vfiprintf_r+0x81a>
 8018d18:	e0d1      	b.n	8018ebe <_vfiprintf_r+0x9e6>
 8018d1a:	ad42      	add	r5, sp, #264	; 0x108
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d000      	beq.n	8018d22 <_vfiprintf_r+0x84a>
 8018d20:	e0cd      	b.n	8018ebe <_vfiprintf_r+0x9e6>
 8018d22:	07e3      	lsls	r3, r4, #31
 8018d24:	d400      	bmi.n	8018d28 <_vfiprintf_r+0x850>
 8018d26:	e0ca      	b.n	8018ebe <_vfiprintf_r+0x9e6>
 8018d28:	25b7      	movs	r5, #183	; 0xb7
 8018d2a:	ab14      	add	r3, sp, #80	; 0x50
 8018d2c:	18ed      	adds	r5, r5, r3
 8018d2e:	2330      	movs	r3, #48	; 0x30
 8018d30:	e79d      	b.n	8018c6e <_vfiprintf_r+0x796>
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d100      	bne.n	8018d38 <_vfiprintf_r+0x860>
 8018d36:	e089      	b.n	8018e4c <_vfiprintf_r+0x974>
 8018d38:	2100      	movs	r1, #0
 8018d3a:	aa29      	add	r2, sp, #164	; 0xa4
 8018d3c:	7013      	strb	r3, [r2, #0]
 8018d3e:	ab14      	add	r3, sp, #80	; 0x50
 8018d40:	70d9      	strb	r1, [r3, #3]
 8018d42:	2301      	movs	r3, #1
 8018d44:	9504      	str	r5, [sp, #16]
 8018d46:	9305      	str	r3, [sp, #20]
 8018d48:	0015      	movs	r5, r2
 8018d4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8018d4c:	e580      	b.n	8018850 <_vfiprintf_r+0x378>
 8018d4e:	2010      	movs	r0, #16
 8018d50:	1812      	adds	r2, r2, r0
 8018d52:	6078      	str	r0, [r7, #4]
 8018d54:	9218      	str	r2, [sp, #96]	; 0x60
 8018d56:	9317      	str	r3, [sp, #92]	; 0x5c
 8018d58:	2b07      	cmp	r3, #7
 8018d5a:	dd07      	ble.n	8018d6c <_vfiprintf_r+0x894>
 8018d5c:	9903      	ldr	r1, [sp, #12]
 8018d5e:	9806      	ldr	r0, [sp, #24]
 8018d60:	aa16      	add	r2, sp, #88	; 0x58
 8018d62:	f7ff fb85 	bl	8018470 <__sprint_r>
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d14b      	bne.n	8018e02 <_vfiprintf_r+0x92a>
 8018d6a:	a919      	add	r1, sp, #100	; 0x64
 8018d6c:	0033      	movs	r3, r6
 8018d6e:	3b10      	subs	r3, #16
 8018d70:	001e      	movs	r6, r3
 8018d72:	000f      	movs	r7, r1
 8018d74:	e58e      	b.n	8018894 <_vfiprintf_r+0x3bc>
 8018d76:	2010      	movs	r0, #16
 8018d78:	1812      	adds	r2, r2, r0
 8018d7a:	6078      	str	r0, [r7, #4]
 8018d7c:	9218      	str	r2, [sp, #96]	; 0x60
 8018d7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018d80:	2b07      	cmp	r3, #7
 8018d82:	dd07      	ble.n	8018d94 <_vfiprintf_r+0x8bc>
 8018d84:	9903      	ldr	r1, [sp, #12]
 8018d86:	9806      	ldr	r0, [sp, #24]
 8018d88:	aa16      	add	r2, sp, #88	; 0x58
 8018d8a:	f7ff fb71 	bl	8018470 <__sprint_r>
 8018d8e:	2800      	cmp	r0, #0
 8018d90:	d137      	bne.n	8018e02 <_vfiprintf_r+0x92a>
 8018d92:	a919      	add	r1, sp, #100	; 0x64
 8018d94:	0033      	movs	r3, r6
 8018d96:	3b10      	subs	r3, #16
 8018d98:	001e      	movs	r6, r3
 8018d9a:	000f      	movs	r7, r1
 8018d9c:	e5d6      	b.n	801894c <_vfiprintf_r+0x474>
 8018d9e:	2010      	movs	r0, #16
 8018da0:	1812      	adds	r2, r2, r0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	9218      	str	r2, [sp, #96]	; 0x60
 8018da6:	9317      	str	r3, [sp, #92]	; 0x5c
 8018da8:	2b07      	cmp	r3, #7
 8018daa:	dd07      	ble.n	8018dbc <_vfiprintf_r+0x8e4>
 8018dac:	9903      	ldr	r1, [sp, #12]
 8018dae:	9806      	ldr	r0, [sp, #24]
 8018db0:	aa16      	add	r2, sp, #88	; 0x58
 8018db2:	f7ff fb5d 	bl	8018470 <__sprint_r>
 8018db6:	2800      	cmp	r0, #0
 8018db8:	d123      	bne.n	8018e02 <_vfiprintf_r+0x92a>
 8018dba:	a919      	add	r1, sp, #100	; 0x64
 8018dbc:	0033      	movs	r3, r6
 8018dbe:	3b10      	subs	r3, #16
 8018dc0:	001e      	movs	r6, r3
 8018dc2:	000f      	movs	r7, r1
 8018dc4:	e5e2      	b.n	801898c <_vfiprintf_r+0x4b4>
 8018dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018dca:	2510      	movs	r5, #16
 8018dcc:	1a9c      	subs	r4, r3, r2
 8018dce:	2c00      	cmp	r4, #0
 8018dd0:	dc00      	bgt.n	8018dd4 <_vfiprintf_r+0x8fc>
 8018dd2:	e613      	b.n	80189fc <_vfiprintf_r+0x524>
 8018dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018dd6:	483e      	ldr	r0, [pc, #248]	; (8018ed0 <_vfiprintf_r+0x9f8>)
 8018dd8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018dda:	9305      	str	r3, [sp, #20]
 8018ddc:	1c5a      	adds	r2, r3, #1
 8018dde:	6038      	str	r0, [r7, #0]
 8018de0:	2c10      	cmp	r4, #16
 8018de2:	dc22      	bgt.n	8018e2a <_vfiprintf_r+0x952>
 8018de4:	607c      	str	r4, [r7, #4]
 8018de6:	190c      	adds	r4, r1, r4
 8018de8:	9418      	str	r4, [sp, #96]	; 0x60
 8018dea:	9217      	str	r2, [sp, #92]	; 0x5c
 8018dec:	2a07      	cmp	r2, #7
 8018dee:	dc00      	bgt.n	8018df2 <_vfiprintf_r+0x91a>
 8018df0:	e604      	b.n	80189fc <_vfiprintf_r+0x524>
 8018df2:	9903      	ldr	r1, [sp, #12]
 8018df4:	9806      	ldr	r0, [sp, #24]
 8018df6:	aa16      	add	r2, sp, #88	; 0x58
 8018df8:	f7ff fb3a 	bl	8018470 <__sprint_r>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	d100      	bne.n	8018e02 <_vfiprintf_r+0x92a>
 8018e00:	e5fc      	b.n	80189fc <_vfiprintf_r+0x524>
 8018e02:	9b03      	ldr	r3, [sp, #12]
 8018e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018e06:	07db      	lsls	r3, r3, #31
 8018e08:	d407      	bmi.n	8018e1a <_vfiprintf_r+0x942>
 8018e0a:	9b03      	ldr	r3, [sp, #12]
 8018e0c:	899b      	ldrh	r3, [r3, #12]
 8018e0e:	059b      	lsls	r3, r3, #22
 8018e10:	d403      	bmi.n	8018e1a <_vfiprintf_r+0x942>
 8018e12:	9b03      	ldr	r3, [sp, #12]
 8018e14:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018e16:	f7fe fd1e 	bl	8017856 <__retarget_lock_release_recursive>
 8018e1a:	9b03      	ldr	r3, [sp, #12]
 8018e1c:	899b      	ldrh	r3, [r3, #12]
 8018e1e:	065b      	lsls	r3, r3, #25
 8018e20:	d401      	bmi.n	8018e26 <_vfiprintf_r+0x94e>
 8018e22:	f7ff fb98 	bl	8018556 <_vfiprintf_r+0x7e>
 8018e26:	f7ff fb93 	bl	8018550 <_vfiprintf_r+0x78>
 8018e2a:	3110      	adds	r1, #16
 8018e2c:	607d      	str	r5, [r7, #4]
 8018e2e:	9118      	str	r1, [sp, #96]	; 0x60
 8018e30:	9217      	str	r2, [sp, #92]	; 0x5c
 8018e32:	3708      	adds	r7, #8
 8018e34:	2a07      	cmp	r2, #7
 8018e36:	dd07      	ble.n	8018e48 <_vfiprintf_r+0x970>
 8018e38:	9903      	ldr	r1, [sp, #12]
 8018e3a:	9806      	ldr	r0, [sp, #24]
 8018e3c:	aa16      	add	r2, sp, #88	; 0x58
 8018e3e:	f7ff fb17 	bl	8018470 <__sprint_r>
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d1dd      	bne.n	8018e02 <_vfiprintf_r+0x92a>
 8018e46:	af19      	add	r7, sp, #100	; 0x64
 8018e48:	3c10      	subs	r4, #16
 8018e4a:	e7c3      	b.n	8018dd4 <_vfiprintf_r+0x8fc>
 8018e4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e4e:	9300      	str	r3, [sp, #0]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d102      	bne.n	8018e5a <_vfiprintf_r+0x982>
 8018e54:	2300      	movs	r3, #0
 8018e56:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e58:	e7d3      	b.n	8018e02 <_vfiprintf_r+0x92a>
 8018e5a:	9903      	ldr	r1, [sp, #12]
 8018e5c:	9806      	ldr	r0, [sp, #24]
 8018e5e:	aa16      	add	r2, sp, #88	; 0x58
 8018e60:	f7ff fb06 	bl	8018470 <__sprint_r>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d0f5      	beq.n	8018e54 <_vfiprintf_r+0x97c>
 8018e68:	e7cb      	b.n	8018e02 <_vfiprintf_r+0x92a>
 8018e6a:	0026      	movs	r6, r4
 8018e6c:	2a00      	cmp	r2, #0
 8018e6e:	d100      	bne.n	8018e72 <_vfiprintf_r+0x99a>
 8018e70:	e609      	b.n	8018a86 <_vfiprintf_r+0x5ae>
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d100      	bne.n	8018e78 <_vfiprintf_r+0x9a0>
 8018e76:	e6ef      	b.n	8018c58 <_vfiprintf_r+0x780>
 8018e78:	ad42      	add	r5, sp, #264	; 0x108
 8018e7a:	2b02      	cmp	r3, #2
 8018e7c:	d100      	bne.n	8018e80 <_vfiprintf_r+0x9a8>
 8018e7e:	e737      	b.n	8018cf0 <_vfiprintf_r+0x818>
 8018e80:	2307      	movs	r3, #7
 8018e82:	469c      	mov	ip, r3
 8018e84:	4663      	mov	r3, ip
 8018e86:	9900      	ldr	r1, [sp, #0]
 8018e88:	002a      	movs	r2, r5
 8018e8a:	400b      	ands	r3, r1
 8018e8c:	9901      	ldr	r1, [sp, #4]
 8018e8e:	3d01      	subs	r5, #1
 8018e90:	074c      	lsls	r4, r1, #29
 8018e92:	9900      	ldr	r1, [sp, #0]
 8018e94:	3330      	adds	r3, #48	; 0x30
 8018e96:	08c8      	lsrs	r0, r1, #3
 8018e98:	9901      	ldr	r1, [sp, #4]
 8018e9a:	4304      	orrs	r4, r0
 8018e9c:	08c9      	lsrs	r1, r1, #3
 8018e9e:	9101      	str	r1, [sp, #4]
 8018ea0:	0021      	movs	r1, r4
 8018ea2:	9801      	ldr	r0, [sp, #4]
 8018ea4:	702b      	strb	r3, [r5, #0]
 8018ea6:	9400      	str	r4, [sp, #0]
 8018ea8:	4301      	orrs	r1, r0
 8018eaa:	d1eb      	bne.n	8018e84 <_vfiprintf_r+0x9ac>
 8018eac:	0031      	movs	r1, r6
 8018eae:	07c9      	lsls	r1, r1, #31
 8018eb0:	d505      	bpl.n	8018ebe <_vfiprintf_r+0x9e6>
 8018eb2:	2b30      	cmp	r3, #48	; 0x30
 8018eb4:	d003      	beq.n	8018ebe <_vfiprintf_r+0x9e6>
 8018eb6:	2330      	movs	r3, #48	; 0x30
 8018eb8:	3d01      	subs	r5, #1
 8018eba:	702b      	strb	r3, [r5, #0]
 8018ebc:	1e95      	subs	r5, r2, #2
 8018ebe:	9b05      	ldr	r3, [sp, #20]
 8018ec0:	0034      	movs	r4, r6
 8018ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ec4:	ab42      	add	r3, sp, #264	; 0x108
 8018ec6:	1b5b      	subs	r3, r3, r5
 8018ec8:	9305      	str	r3, [sp, #20]
 8018eca:	e4c1      	b.n	8018850 <_vfiprintf_r+0x378>
 8018ecc:	0801ccd9 	.word	0x0801ccd9
 8018ed0:	0801cfa0 	.word	0x0801cfa0

08018ed4 <__sbprintf>:
 8018ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ed6:	0015      	movs	r5, r2
 8018ed8:	2202      	movs	r2, #2
 8018eda:	4c1e      	ldr	r4, [pc, #120]	; (8018f54 <__sbprintf+0x80>)
 8018edc:	001f      	movs	r7, r3
 8018ede:	898b      	ldrh	r3, [r1, #12]
 8018ee0:	44a5      	add	sp, r4
 8018ee2:	4393      	bics	r3, r2
 8018ee4:	466a      	mov	r2, sp
 8018ee6:	8193      	strh	r3, [r2, #12]
 8018ee8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018eea:	0006      	movs	r6, r0
 8018eec:	9319      	str	r3, [sp, #100]	; 0x64
 8018eee:	89cb      	ldrh	r3, [r1, #14]
 8018ef0:	a816      	add	r0, sp, #88	; 0x58
 8018ef2:	81d3      	strh	r3, [r2, #14]
 8018ef4:	69cb      	ldr	r3, [r1, #28]
 8018ef6:	000c      	movs	r4, r1
 8018ef8:	9307      	str	r3, [sp, #28]
 8018efa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8018efc:	9309      	str	r3, [sp, #36]	; 0x24
 8018efe:	ab1a      	add	r3, sp, #104	; 0x68
 8018f00:	9300      	str	r3, [sp, #0]
 8018f02:	9304      	str	r3, [sp, #16]
 8018f04:	2380      	movs	r3, #128	; 0x80
 8018f06:	00db      	lsls	r3, r3, #3
 8018f08:	9302      	str	r3, [sp, #8]
 8018f0a:	9305      	str	r3, [sp, #20]
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9306      	str	r3, [sp, #24]
 8018f10:	f7fe fc9e 	bl	8017850 <__retarget_lock_init_recursive>
 8018f14:	002a      	movs	r2, r5
 8018f16:	003b      	movs	r3, r7
 8018f18:	4669      	mov	r1, sp
 8018f1a:	0030      	movs	r0, r6
 8018f1c:	f7ff fadc 	bl	80184d8 <_vfiprintf_r>
 8018f20:	1e05      	subs	r5, r0, #0
 8018f22:	db07      	blt.n	8018f34 <__sbprintf+0x60>
 8018f24:	4669      	mov	r1, sp
 8018f26:	0030      	movs	r0, r6
 8018f28:	f000 f91c 	bl	8019164 <_fflush_r>
 8018f2c:	2800      	cmp	r0, #0
 8018f2e:	d001      	beq.n	8018f34 <__sbprintf+0x60>
 8018f30:	2501      	movs	r5, #1
 8018f32:	426d      	negs	r5, r5
 8018f34:	466b      	mov	r3, sp
 8018f36:	899a      	ldrh	r2, [r3, #12]
 8018f38:	2340      	movs	r3, #64	; 0x40
 8018f3a:	421a      	tst	r2, r3
 8018f3c:	d002      	beq.n	8018f44 <__sbprintf+0x70>
 8018f3e:	89a2      	ldrh	r2, [r4, #12]
 8018f40:	4313      	orrs	r3, r2
 8018f42:	81a3      	strh	r3, [r4, #12]
 8018f44:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018f46:	f7fe fc84 	bl	8017852 <__retarget_lock_close_recursive>
 8018f4a:	0028      	movs	r0, r5
 8018f4c:	4b02      	ldr	r3, [pc, #8]	; (8018f58 <__sbprintf+0x84>)
 8018f4e:	449d      	add	sp, r3
 8018f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f52:	46c0      	nop			; (mov r8, r8)
 8018f54:	fffffb94 	.word	0xfffffb94
 8018f58:	0000046c 	.word	0x0000046c

08018f5c <__swsetup_r>:
 8018f5c:	4b30      	ldr	r3, [pc, #192]	; (8019020 <__swsetup_r+0xc4>)
 8018f5e:	b570      	push	{r4, r5, r6, lr}
 8018f60:	0005      	movs	r5, r0
 8018f62:	6818      	ldr	r0, [r3, #0]
 8018f64:	000c      	movs	r4, r1
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d004      	beq.n	8018f74 <__swsetup_r+0x18>
 8018f6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d101      	bne.n	8018f74 <__swsetup_r+0x18>
 8018f70:	f000 f96e 	bl	8019250 <__sinit>
 8018f74:	230c      	movs	r3, #12
 8018f76:	5ee2      	ldrsh	r2, [r4, r3]
 8018f78:	b293      	uxth	r3, r2
 8018f7a:	0711      	lsls	r1, r2, #28
 8018f7c:	d423      	bmi.n	8018fc6 <__swsetup_r+0x6a>
 8018f7e:	06d9      	lsls	r1, r3, #27
 8018f80:	d407      	bmi.n	8018f92 <__swsetup_r+0x36>
 8018f82:	2309      	movs	r3, #9
 8018f84:	2001      	movs	r0, #1
 8018f86:	602b      	str	r3, [r5, #0]
 8018f88:	3337      	adds	r3, #55	; 0x37
 8018f8a:	4313      	orrs	r3, r2
 8018f8c:	81a3      	strh	r3, [r4, #12]
 8018f8e:	4240      	negs	r0, r0
 8018f90:	bd70      	pop	{r4, r5, r6, pc}
 8018f92:	075b      	lsls	r3, r3, #29
 8018f94:	d513      	bpl.n	8018fbe <__swsetup_r+0x62>
 8018f96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018f98:	2900      	cmp	r1, #0
 8018f9a:	d008      	beq.n	8018fae <__swsetup_r+0x52>
 8018f9c:	0023      	movs	r3, r4
 8018f9e:	3340      	adds	r3, #64	; 0x40
 8018fa0:	4299      	cmp	r1, r3
 8018fa2:	d002      	beq.n	8018faa <__swsetup_r+0x4e>
 8018fa4:	0028      	movs	r0, r5
 8018fa6:	f7fe f823 	bl	8016ff0 <_free_r>
 8018faa:	2300      	movs	r3, #0
 8018fac:	6323      	str	r3, [r4, #48]	; 0x30
 8018fae:	2224      	movs	r2, #36	; 0x24
 8018fb0:	89a3      	ldrh	r3, [r4, #12]
 8018fb2:	4393      	bics	r3, r2
 8018fb4:	81a3      	strh	r3, [r4, #12]
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	6063      	str	r3, [r4, #4]
 8018fba:	6923      	ldr	r3, [r4, #16]
 8018fbc:	6023      	str	r3, [r4, #0]
 8018fbe:	2308      	movs	r3, #8
 8018fc0:	89a2      	ldrh	r2, [r4, #12]
 8018fc2:	4313      	orrs	r3, r2
 8018fc4:	81a3      	strh	r3, [r4, #12]
 8018fc6:	6923      	ldr	r3, [r4, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d10b      	bne.n	8018fe4 <__swsetup_r+0x88>
 8018fcc:	21a0      	movs	r1, #160	; 0xa0
 8018fce:	2280      	movs	r2, #128	; 0x80
 8018fd0:	89a3      	ldrh	r3, [r4, #12]
 8018fd2:	0089      	lsls	r1, r1, #2
 8018fd4:	0092      	lsls	r2, r2, #2
 8018fd6:	400b      	ands	r3, r1
 8018fd8:	4293      	cmp	r3, r2
 8018fda:	d003      	beq.n	8018fe4 <__swsetup_r+0x88>
 8018fdc:	0021      	movs	r1, r4
 8018fde:	0028      	movs	r0, r5
 8018fe0:	f000 fb80 	bl	80196e4 <__smakebuf_r>
 8018fe4:	220c      	movs	r2, #12
 8018fe6:	5ea3      	ldrsh	r3, [r4, r2]
 8018fe8:	2001      	movs	r0, #1
 8018fea:	001a      	movs	r2, r3
 8018fec:	b299      	uxth	r1, r3
 8018fee:	4002      	ands	r2, r0
 8018ff0:	4203      	tst	r3, r0
 8018ff2:	d00f      	beq.n	8019014 <__swsetup_r+0xb8>
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	60a2      	str	r2, [r4, #8]
 8018ff8:	6962      	ldr	r2, [r4, #20]
 8018ffa:	4252      	negs	r2, r2
 8018ffc:	61a2      	str	r2, [r4, #24]
 8018ffe:	2000      	movs	r0, #0
 8019000:	6922      	ldr	r2, [r4, #16]
 8019002:	4282      	cmp	r2, r0
 8019004:	d1c4      	bne.n	8018f90 <__swsetup_r+0x34>
 8019006:	060a      	lsls	r2, r1, #24
 8019008:	d5c2      	bpl.n	8018f90 <__swsetup_r+0x34>
 801900a:	2240      	movs	r2, #64	; 0x40
 801900c:	4313      	orrs	r3, r2
 801900e:	81a3      	strh	r3, [r4, #12]
 8019010:	3801      	subs	r0, #1
 8019012:	e7bd      	b.n	8018f90 <__swsetup_r+0x34>
 8019014:	0788      	lsls	r0, r1, #30
 8019016:	d400      	bmi.n	801901a <__swsetup_r+0xbe>
 8019018:	6962      	ldr	r2, [r4, #20]
 801901a:	60a2      	str	r2, [r4, #8]
 801901c:	e7ef      	b.n	8018ffe <__swsetup_r+0xa2>
 801901e:	46c0      	nop			; (mov r8, r8)
 8019020:	200000ac 	.word	0x200000ac

08019024 <abort>:
 8019024:	2006      	movs	r0, #6
 8019026:	b510      	push	{r4, lr}
 8019028:	f000 fbcc 	bl	80197c4 <raise>
 801902c:	2001      	movs	r0, #1
 801902e:	f000 fdc1 	bl	8019bb4 <_exit>
	...

08019034 <__sflush_r>:
 8019034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019036:	230c      	movs	r3, #12
 8019038:	5eca      	ldrsh	r2, [r1, r3]
 801903a:	000c      	movs	r4, r1
 801903c:	0005      	movs	r5, r0
 801903e:	b291      	uxth	r1, r2
 8019040:	0713      	lsls	r3, r2, #28
 8019042:	d467      	bmi.n	8019114 <__sflush_r+0xe0>
 8019044:	2380      	movs	r3, #128	; 0x80
 8019046:	011b      	lsls	r3, r3, #4
 8019048:	4313      	orrs	r3, r2
 801904a:	6862      	ldr	r2, [r4, #4]
 801904c:	81a3      	strh	r3, [r4, #12]
 801904e:	2a00      	cmp	r2, #0
 8019050:	dc04      	bgt.n	801905c <__sflush_r+0x28>
 8019052:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019054:	2a00      	cmp	r2, #0
 8019056:	dc01      	bgt.n	801905c <__sflush_r+0x28>
 8019058:	2000      	movs	r0, #0
 801905a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801905c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801905e:	2f00      	cmp	r7, #0
 8019060:	d0fa      	beq.n	8019058 <__sflush_r+0x24>
 8019062:	2200      	movs	r2, #0
 8019064:	2180      	movs	r1, #128	; 0x80
 8019066:	682e      	ldr	r6, [r5, #0]
 8019068:	602a      	str	r2, [r5, #0]
 801906a:	001a      	movs	r2, r3
 801906c:	0149      	lsls	r1, r1, #5
 801906e:	400a      	ands	r2, r1
 8019070:	420b      	tst	r3, r1
 8019072:	d038      	beq.n	80190e6 <__sflush_r+0xb2>
 8019074:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019076:	89a3      	ldrh	r3, [r4, #12]
 8019078:	075b      	lsls	r3, r3, #29
 801907a:	d506      	bpl.n	801908a <__sflush_r+0x56>
 801907c:	6863      	ldr	r3, [r4, #4]
 801907e:	1ac0      	subs	r0, r0, r3
 8019080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019082:	2b00      	cmp	r3, #0
 8019084:	d001      	beq.n	801908a <__sflush_r+0x56>
 8019086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019088:	1ac0      	subs	r0, r0, r3
 801908a:	0002      	movs	r2, r0
 801908c:	69e1      	ldr	r1, [r4, #28]
 801908e:	2300      	movs	r3, #0
 8019090:	0028      	movs	r0, r5
 8019092:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8019094:	47b8      	blx	r7
 8019096:	89a1      	ldrh	r1, [r4, #12]
 8019098:	1c43      	adds	r3, r0, #1
 801909a:	d106      	bne.n	80190aa <__sflush_r+0x76>
 801909c:	682b      	ldr	r3, [r5, #0]
 801909e:	2b1d      	cmp	r3, #29
 80190a0:	d835      	bhi.n	801910e <__sflush_r+0xda>
 80190a2:	4a2e      	ldr	r2, [pc, #184]	; (801915c <__sflush_r+0x128>)
 80190a4:	40da      	lsrs	r2, r3
 80190a6:	07d3      	lsls	r3, r2, #31
 80190a8:	d531      	bpl.n	801910e <__sflush_r+0xda>
 80190aa:	2200      	movs	r2, #0
 80190ac:	4b2c      	ldr	r3, [pc, #176]	; (8019160 <__sflush_r+0x12c>)
 80190ae:	6062      	str	r2, [r4, #4]
 80190b0:	400b      	ands	r3, r1
 80190b2:	6922      	ldr	r2, [r4, #16]
 80190b4:	b21b      	sxth	r3, r3
 80190b6:	81a3      	strh	r3, [r4, #12]
 80190b8:	6022      	str	r2, [r4, #0]
 80190ba:	04db      	lsls	r3, r3, #19
 80190bc:	d505      	bpl.n	80190ca <__sflush_r+0x96>
 80190be:	1c43      	adds	r3, r0, #1
 80190c0:	d102      	bne.n	80190c8 <__sflush_r+0x94>
 80190c2:	682b      	ldr	r3, [r5, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d100      	bne.n	80190ca <__sflush_r+0x96>
 80190c8:	6520      	str	r0, [r4, #80]	; 0x50
 80190ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190cc:	602e      	str	r6, [r5, #0]
 80190ce:	2900      	cmp	r1, #0
 80190d0:	d0c2      	beq.n	8019058 <__sflush_r+0x24>
 80190d2:	0023      	movs	r3, r4
 80190d4:	3340      	adds	r3, #64	; 0x40
 80190d6:	4299      	cmp	r1, r3
 80190d8:	d002      	beq.n	80190e0 <__sflush_r+0xac>
 80190da:	0028      	movs	r0, r5
 80190dc:	f7fd ff88 	bl	8016ff0 <_free_r>
 80190e0:	2000      	movs	r0, #0
 80190e2:	6320      	str	r0, [r4, #48]	; 0x30
 80190e4:	e7b9      	b.n	801905a <__sflush_r+0x26>
 80190e6:	2301      	movs	r3, #1
 80190e8:	0028      	movs	r0, r5
 80190ea:	69e1      	ldr	r1, [r4, #28]
 80190ec:	47b8      	blx	r7
 80190ee:	1c43      	adds	r3, r0, #1
 80190f0:	d1c1      	bne.n	8019076 <__sflush_r+0x42>
 80190f2:	682b      	ldr	r3, [r5, #0]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d0be      	beq.n	8019076 <__sflush_r+0x42>
 80190f8:	2b1d      	cmp	r3, #29
 80190fa:	d001      	beq.n	8019100 <__sflush_r+0xcc>
 80190fc:	2b16      	cmp	r3, #22
 80190fe:	d101      	bne.n	8019104 <__sflush_r+0xd0>
 8019100:	602e      	str	r6, [r5, #0]
 8019102:	e7a9      	b.n	8019058 <__sflush_r+0x24>
 8019104:	2340      	movs	r3, #64	; 0x40
 8019106:	89a2      	ldrh	r2, [r4, #12]
 8019108:	4313      	orrs	r3, r2
 801910a:	81a3      	strh	r3, [r4, #12]
 801910c:	e7a5      	b.n	801905a <__sflush_r+0x26>
 801910e:	2340      	movs	r3, #64	; 0x40
 8019110:	430b      	orrs	r3, r1
 8019112:	e7fa      	b.n	801910a <__sflush_r+0xd6>
 8019114:	6927      	ldr	r7, [r4, #16]
 8019116:	2f00      	cmp	r7, #0
 8019118:	d09e      	beq.n	8019058 <__sflush_r+0x24>
 801911a:	6823      	ldr	r3, [r4, #0]
 801911c:	6027      	str	r7, [r4, #0]
 801911e:	1bdb      	subs	r3, r3, r7
 8019120:	9301      	str	r3, [sp, #4]
 8019122:	2300      	movs	r3, #0
 8019124:	078a      	lsls	r2, r1, #30
 8019126:	d100      	bne.n	801912a <__sflush_r+0xf6>
 8019128:	6963      	ldr	r3, [r4, #20]
 801912a:	60a3      	str	r3, [r4, #8]
 801912c:	9b01      	ldr	r3, [sp, #4]
 801912e:	2b00      	cmp	r3, #0
 8019130:	dc00      	bgt.n	8019134 <__sflush_r+0x100>
 8019132:	e791      	b.n	8019058 <__sflush_r+0x24>
 8019134:	003a      	movs	r2, r7
 8019136:	0028      	movs	r0, r5
 8019138:	9b01      	ldr	r3, [sp, #4]
 801913a:	69e1      	ldr	r1, [r4, #28]
 801913c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801913e:	47b0      	blx	r6
 8019140:	2800      	cmp	r0, #0
 8019142:	dc06      	bgt.n	8019152 <__sflush_r+0x11e>
 8019144:	2340      	movs	r3, #64	; 0x40
 8019146:	2001      	movs	r0, #1
 8019148:	89a2      	ldrh	r2, [r4, #12]
 801914a:	4240      	negs	r0, r0
 801914c:	4313      	orrs	r3, r2
 801914e:	81a3      	strh	r3, [r4, #12]
 8019150:	e783      	b.n	801905a <__sflush_r+0x26>
 8019152:	9b01      	ldr	r3, [sp, #4]
 8019154:	183f      	adds	r7, r7, r0
 8019156:	1a1b      	subs	r3, r3, r0
 8019158:	9301      	str	r3, [sp, #4]
 801915a:	e7e7      	b.n	801912c <__sflush_r+0xf8>
 801915c:	20400001 	.word	0x20400001
 8019160:	fffff7ff 	.word	0xfffff7ff

08019164 <_fflush_r>:
 8019164:	b570      	push	{r4, r5, r6, lr}
 8019166:	0005      	movs	r5, r0
 8019168:	000c      	movs	r4, r1
 801916a:	2800      	cmp	r0, #0
 801916c:	d004      	beq.n	8019178 <_fflush_r+0x14>
 801916e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019170:	2b00      	cmp	r3, #0
 8019172:	d101      	bne.n	8019178 <_fflush_r+0x14>
 8019174:	f000 f86c 	bl	8019250 <__sinit>
 8019178:	220c      	movs	r2, #12
 801917a:	5ea3      	ldrsh	r3, [r4, r2]
 801917c:	1e1e      	subs	r6, r3, #0
 801917e:	d015      	beq.n	80191ac <_fflush_r+0x48>
 8019180:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019182:	07d2      	lsls	r2, r2, #31
 8019184:	d404      	bmi.n	8019190 <_fflush_r+0x2c>
 8019186:	059b      	lsls	r3, r3, #22
 8019188:	d402      	bmi.n	8019190 <_fflush_r+0x2c>
 801918a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801918c:	f7fe fb62 	bl	8017854 <__retarget_lock_acquire_recursive>
 8019190:	0021      	movs	r1, r4
 8019192:	0028      	movs	r0, r5
 8019194:	f7ff ff4e 	bl	8019034 <__sflush_r>
 8019198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801919a:	0006      	movs	r6, r0
 801919c:	07db      	lsls	r3, r3, #31
 801919e:	d405      	bmi.n	80191ac <_fflush_r+0x48>
 80191a0:	89a3      	ldrh	r3, [r4, #12]
 80191a2:	059b      	lsls	r3, r3, #22
 80191a4:	d402      	bmi.n	80191ac <_fflush_r+0x48>
 80191a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80191a8:	f7fe fb55 	bl	8017856 <__retarget_lock_release_recursive>
 80191ac:	0030      	movs	r0, r6
 80191ae:	bd70      	pop	{r4, r5, r6, pc}

080191b0 <std>:
 80191b0:	2300      	movs	r3, #0
 80191b2:	b510      	push	{r4, lr}
 80191b4:	0004      	movs	r4, r0
 80191b6:	6003      	str	r3, [r0, #0]
 80191b8:	6043      	str	r3, [r0, #4]
 80191ba:	6083      	str	r3, [r0, #8]
 80191bc:	8181      	strh	r1, [r0, #12]
 80191be:	6643      	str	r3, [r0, #100]	; 0x64
 80191c0:	0019      	movs	r1, r3
 80191c2:	81c2      	strh	r2, [r0, #14]
 80191c4:	6103      	str	r3, [r0, #16]
 80191c6:	2208      	movs	r2, #8
 80191c8:	6143      	str	r3, [r0, #20]
 80191ca:	6183      	str	r3, [r0, #24]
 80191cc:	305c      	adds	r0, #92	; 0x5c
 80191ce:	f7fa fc10 	bl	80139f2 <memset>
 80191d2:	0020      	movs	r0, r4
 80191d4:	4b06      	ldr	r3, [pc, #24]	; (80191f0 <std+0x40>)
 80191d6:	61e4      	str	r4, [r4, #28]
 80191d8:	6223      	str	r3, [r4, #32]
 80191da:	4b06      	ldr	r3, [pc, #24]	; (80191f4 <std+0x44>)
 80191dc:	3058      	adds	r0, #88	; 0x58
 80191de:	6263      	str	r3, [r4, #36]	; 0x24
 80191e0:	4b05      	ldr	r3, [pc, #20]	; (80191f8 <std+0x48>)
 80191e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80191e4:	4b05      	ldr	r3, [pc, #20]	; (80191fc <std+0x4c>)
 80191e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191e8:	f7fe fb32 	bl	8017850 <__retarget_lock_init_recursive>
 80191ec:	bd10      	pop	{r4, pc}
 80191ee:	46c0      	nop			; (mov r8, r8)
 80191f0:	08019805 	.word	0x08019805
 80191f4:	0801982d 	.word	0x0801982d
 80191f8:	08019865 	.word	0x08019865
 80191fc:	08019891 	.word	0x08019891

08019200 <_cleanup_r>:
 8019200:	b510      	push	{r4, lr}
 8019202:	4902      	ldr	r1, [pc, #8]	; (801920c <_cleanup_r+0xc>)
 8019204:	f000 fa1c 	bl	8019640 <_fwalk_reent>
 8019208:	bd10      	pop	{r4, pc}
 801920a:	46c0      	nop			; (mov r8, r8)
 801920c:	080199bd 	.word	0x080199bd

08019210 <__sfp_lock_acquire>:
 8019210:	b510      	push	{r4, lr}
 8019212:	4802      	ldr	r0, [pc, #8]	; (801921c <__sfp_lock_acquire+0xc>)
 8019214:	f7fe fb1e 	bl	8017854 <__retarget_lock_acquire_recursive>
 8019218:	bd10      	pop	{r4, pc}
 801921a:	46c0      	nop			; (mov r8, r8)
 801921c:	20006dc8 	.word	0x20006dc8

08019220 <__sfp_lock_release>:
 8019220:	b510      	push	{r4, lr}
 8019222:	4802      	ldr	r0, [pc, #8]	; (801922c <__sfp_lock_release+0xc>)
 8019224:	f7fe fb17 	bl	8017856 <__retarget_lock_release_recursive>
 8019228:	bd10      	pop	{r4, pc}
 801922a:	46c0      	nop			; (mov r8, r8)
 801922c:	20006dc8 	.word	0x20006dc8

08019230 <__sinit_lock_acquire>:
 8019230:	b510      	push	{r4, lr}
 8019232:	4802      	ldr	r0, [pc, #8]	; (801923c <__sinit_lock_acquire+0xc>)
 8019234:	f7fe fb0e 	bl	8017854 <__retarget_lock_acquire_recursive>
 8019238:	bd10      	pop	{r4, pc}
 801923a:	46c0      	nop			; (mov r8, r8)
 801923c:	20006dc3 	.word	0x20006dc3

08019240 <__sinit_lock_release>:
 8019240:	b510      	push	{r4, lr}
 8019242:	4802      	ldr	r0, [pc, #8]	; (801924c <__sinit_lock_release+0xc>)
 8019244:	f7fe fb07 	bl	8017856 <__retarget_lock_release_recursive>
 8019248:	bd10      	pop	{r4, pc}
 801924a:	46c0      	nop			; (mov r8, r8)
 801924c:	20006dc3 	.word	0x20006dc3

08019250 <__sinit>:
 8019250:	b510      	push	{r4, lr}
 8019252:	0004      	movs	r4, r0
 8019254:	f7ff ffec 	bl	8019230 <__sinit_lock_acquire>
 8019258:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801925a:	2a00      	cmp	r2, #0
 801925c:	d002      	beq.n	8019264 <__sinit+0x14>
 801925e:	f7ff ffef 	bl	8019240 <__sinit_lock_release>
 8019262:	bd10      	pop	{r4, pc}
 8019264:	4b0e      	ldr	r3, [pc, #56]	; (80192a0 <__sinit+0x50>)
 8019266:	2103      	movs	r1, #3
 8019268:	63e3      	str	r3, [r4, #60]	; 0x3c
 801926a:	23b8      	movs	r3, #184	; 0xb8
 801926c:	009b      	lsls	r3, r3, #2
 801926e:	50e2      	str	r2, [r4, r3]
 8019270:	3304      	adds	r3, #4
 8019272:	50e1      	str	r1, [r4, r3]
 8019274:	3308      	adds	r3, #8
 8019276:	18e1      	adds	r1, r4, r3
 8019278:	3b04      	subs	r3, #4
 801927a:	50e1      	str	r1, [r4, r3]
 801927c:	6860      	ldr	r0, [r4, #4]
 801927e:	2104      	movs	r1, #4
 8019280:	f7ff ff96 	bl	80191b0 <std>
 8019284:	2201      	movs	r2, #1
 8019286:	2109      	movs	r1, #9
 8019288:	68a0      	ldr	r0, [r4, #8]
 801928a:	f7ff ff91 	bl	80191b0 <std>
 801928e:	2202      	movs	r2, #2
 8019290:	2112      	movs	r1, #18
 8019292:	68e0      	ldr	r0, [r4, #12]
 8019294:	f7ff ff8c 	bl	80191b0 <std>
 8019298:	2301      	movs	r3, #1
 801929a:	63a3      	str	r3, [r4, #56]	; 0x38
 801929c:	e7df      	b.n	801925e <__sinit+0xe>
 801929e:	46c0      	nop			; (mov r8, r8)
 80192a0:	08019201 	.word	0x08019201

080192a4 <__fputwc>:
 80192a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192a6:	b085      	sub	sp, #20
 80192a8:	000e      	movs	r6, r1
 80192aa:	0015      	movs	r5, r2
 80192ac:	9001      	str	r0, [sp, #4]
 80192ae:	f7fe fac3 	bl	8017838 <__locale_mb_cur_max>
 80192b2:	0004      	movs	r4, r0
 80192b4:	2801      	cmp	r0, #1
 80192b6:	d119      	bne.n	80192ec <__fputwc+0x48>
 80192b8:	1e73      	subs	r3, r6, #1
 80192ba:	2bfe      	cmp	r3, #254	; 0xfe
 80192bc:	d816      	bhi.n	80192ec <__fputwc+0x48>
 80192be:	ab02      	add	r3, sp, #8
 80192c0:	711e      	strb	r6, [r3, #4]
 80192c2:	2700      	movs	r7, #0
 80192c4:	42a7      	cmp	r7, r4
 80192c6:	d020      	beq.n	801930a <__fputwc+0x66>
 80192c8:	ab03      	add	r3, sp, #12
 80192ca:	5dd9      	ldrb	r1, [r3, r7]
 80192cc:	68ab      	ldr	r3, [r5, #8]
 80192ce:	3b01      	subs	r3, #1
 80192d0:	60ab      	str	r3, [r5, #8]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	da04      	bge.n	80192e0 <__fputwc+0x3c>
 80192d6:	69aa      	ldr	r2, [r5, #24]
 80192d8:	4293      	cmp	r3, r2
 80192da:	db19      	blt.n	8019310 <__fputwc+0x6c>
 80192dc:	290a      	cmp	r1, #10
 80192de:	d017      	beq.n	8019310 <__fputwc+0x6c>
 80192e0:	682b      	ldr	r3, [r5, #0]
 80192e2:	1c5a      	adds	r2, r3, #1
 80192e4:	602a      	str	r2, [r5, #0]
 80192e6:	7019      	strb	r1, [r3, #0]
 80192e8:	3701      	adds	r7, #1
 80192ea:	e7eb      	b.n	80192c4 <__fputwc+0x20>
 80192ec:	002b      	movs	r3, r5
 80192ee:	0032      	movs	r2, r6
 80192f0:	9801      	ldr	r0, [sp, #4]
 80192f2:	335c      	adds	r3, #92	; 0x5c
 80192f4:	a903      	add	r1, sp, #12
 80192f6:	f000 fb23 	bl	8019940 <_wcrtomb_r>
 80192fa:	0004      	movs	r4, r0
 80192fc:	1c43      	adds	r3, r0, #1
 80192fe:	d1e0      	bne.n	80192c2 <__fputwc+0x1e>
 8019300:	2340      	movs	r3, #64	; 0x40
 8019302:	0006      	movs	r6, r0
 8019304:	89aa      	ldrh	r2, [r5, #12]
 8019306:	4313      	orrs	r3, r2
 8019308:	81ab      	strh	r3, [r5, #12]
 801930a:	0030      	movs	r0, r6
 801930c:	b005      	add	sp, #20
 801930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019310:	002a      	movs	r2, r5
 8019312:	9801      	ldr	r0, [sp, #4]
 8019314:	f000 fac2 	bl	801989c <__swbuf_r>
 8019318:	1c43      	adds	r3, r0, #1
 801931a:	d1e5      	bne.n	80192e8 <__fputwc+0x44>
 801931c:	0006      	movs	r6, r0
 801931e:	e7f4      	b.n	801930a <__fputwc+0x66>

08019320 <_fputwc_r>:
 8019320:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8019322:	b570      	push	{r4, r5, r6, lr}
 8019324:	0005      	movs	r5, r0
 8019326:	000e      	movs	r6, r1
 8019328:	0014      	movs	r4, r2
 801932a:	07db      	lsls	r3, r3, #31
 801932c:	d405      	bmi.n	801933a <_fputwc_r+0x1a>
 801932e:	8993      	ldrh	r3, [r2, #12]
 8019330:	059b      	lsls	r3, r3, #22
 8019332:	d402      	bmi.n	801933a <_fputwc_r+0x1a>
 8019334:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8019336:	f7fe fa8d 	bl	8017854 <__retarget_lock_acquire_recursive>
 801933a:	230c      	movs	r3, #12
 801933c:	5ee2      	ldrsh	r2, [r4, r3]
 801933e:	2380      	movs	r3, #128	; 0x80
 8019340:	019b      	lsls	r3, r3, #6
 8019342:	421a      	tst	r2, r3
 8019344:	d104      	bne.n	8019350 <_fputwc_r+0x30>
 8019346:	431a      	orrs	r2, r3
 8019348:	81a2      	strh	r2, [r4, #12]
 801934a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801934c:	4313      	orrs	r3, r2
 801934e:	6663      	str	r3, [r4, #100]	; 0x64
 8019350:	0028      	movs	r0, r5
 8019352:	0022      	movs	r2, r4
 8019354:	0031      	movs	r1, r6
 8019356:	f7ff ffa5 	bl	80192a4 <__fputwc>
 801935a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801935c:	0005      	movs	r5, r0
 801935e:	07db      	lsls	r3, r3, #31
 8019360:	d405      	bmi.n	801936e <_fputwc_r+0x4e>
 8019362:	89a3      	ldrh	r3, [r4, #12]
 8019364:	059b      	lsls	r3, r3, #22
 8019366:	d402      	bmi.n	801936e <_fputwc_r+0x4e>
 8019368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801936a:	f7fe fa74 	bl	8017856 <__retarget_lock_release_recursive>
 801936e:	0028      	movs	r0, r5
 8019370:	bd70      	pop	{r4, r5, r6, pc}
	...

08019374 <__sfvwrite_r>:
 8019374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019376:	6893      	ldr	r3, [r2, #8]
 8019378:	b087      	sub	sp, #28
 801937a:	000c      	movs	r4, r1
 801937c:	9002      	str	r0, [sp, #8]
 801937e:	9203      	str	r2, [sp, #12]
 8019380:	9300      	str	r3, [sp, #0]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d102      	bne.n	801938c <__sfvwrite_r+0x18>
 8019386:	2000      	movs	r0, #0
 8019388:	b007      	add	sp, #28
 801938a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801938c:	898b      	ldrh	r3, [r1, #12]
 801938e:	071b      	lsls	r3, r3, #28
 8019390:	d559      	bpl.n	8019446 <__sfvwrite_r+0xd2>
 8019392:	690b      	ldr	r3, [r1, #16]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d056      	beq.n	8019446 <__sfvwrite_r+0xd2>
 8019398:	9b03      	ldr	r3, [sp, #12]
 801939a:	2202      	movs	r2, #2
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	9301      	str	r3, [sp, #4]
 80193a0:	89a3      	ldrh	r3, [r4, #12]
 80193a2:	001f      	movs	r7, r3
 80193a4:	4017      	ands	r7, r2
 80193a6:	4213      	tst	r3, r2
 80193a8:	d173      	bne.n	8019492 <__sfvwrite_r+0x11e>
 80193aa:	2201      	movs	r2, #1
 80193ac:	0019      	movs	r1, r3
 80193ae:	4011      	ands	r1, r2
 80193b0:	4213      	tst	r3, r2
 80193b2:	d100      	bne.n	80193b6 <__sfvwrite_r+0x42>
 80193b4:	e0a8      	b.n	8019508 <__sfvwrite_r+0x194>
 80193b6:	0038      	movs	r0, r7
 80193b8:	003e      	movs	r6, r7
 80193ba:	9700      	str	r7, [sp, #0]
 80193bc:	9205      	str	r2, [sp, #20]
 80193be:	9b00      	ldr	r3, [sp, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d100      	bne.n	80193c6 <__sfvwrite_r+0x52>
 80193c4:	e112      	b.n	80195ec <__sfvwrite_r+0x278>
 80193c6:	2800      	cmp	r0, #0
 80193c8:	d10a      	bne.n	80193e0 <__sfvwrite_r+0x6c>
 80193ca:	001a      	movs	r2, r3
 80193cc:	210a      	movs	r1, #10
 80193ce:	0030      	movs	r0, r6
 80193d0:	f7fe fa54 	bl	801787c <memchr>
 80193d4:	9b00      	ldr	r3, [sp, #0]
 80193d6:	1c5f      	adds	r7, r3, #1
 80193d8:	2800      	cmp	r0, #0
 80193da:	d001      	beq.n	80193e0 <__sfvwrite_r+0x6c>
 80193dc:	3001      	adds	r0, #1
 80193de:	1b87      	subs	r7, r0, r6
 80193e0:	9b00      	ldr	r3, [sp, #0]
 80193e2:	9704      	str	r7, [sp, #16]
 80193e4:	429f      	cmp	r7, r3
 80193e6:	d900      	bls.n	80193ea <__sfvwrite_r+0x76>
 80193e8:	9304      	str	r3, [sp, #16]
 80193ea:	6820      	ldr	r0, [r4, #0]
 80193ec:	6922      	ldr	r2, [r4, #16]
 80193ee:	6963      	ldr	r3, [r4, #20]
 80193f0:	4290      	cmp	r0, r2
 80193f2:	d800      	bhi.n	80193f6 <__sfvwrite_r+0x82>
 80193f4:	e103      	b.n	80195fe <__sfvwrite_r+0x28a>
 80193f6:	68a2      	ldr	r2, [r4, #8]
 80193f8:	189d      	adds	r5, r3, r2
 80193fa:	9a04      	ldr	r2, [sp, #16]
 80193fc:	42aa      	cmp	r2, r5
 80193fe:	dc00      	bgt.n	8019402 <__sfvwrite_r+0x8e>
 8019400:	e0fd      	b.n	80195fe <__sfvwrite_r+0x28a>
 8019402:	0031      	movs	r1, r6
 8019404:	002a      	movs	r2, r5
 8019406:	f7fe fa44 	bl	8017892 <memmove>
 801940a:	6823      	ldr	r3, [r4, #0]
 801940c:	0021      	movs	r1, r4
 801940e:	195b      	adds	r3, r3, r5
 8019410:	9802      	ldr	r0, [sp, #8]
 8019412:	6023      	str	r3, [r4, #0]
 8019414:	f7ff fea6 	bl	8019164 <_fflush_r>
 8019418:	2800      	cmp	r0, #0
 801941a:	d170      	bne.n	80194fe <__sfvwrite_r+0x18a>
 801941c:	9805      	ldr	r0, [sp, #20]
 801941e:	1b7f      	subs	r7, r7, r5
 8019420:	d105      	bne.n	801942e <__sfvwrite_r+0xba>
 8019422:	0021      	movs	r1, r4
 8019424:	9802      	ldr	r0, [sp, #8]
 8019426:	f7ff fe9d 	bl	8019164 <_fflush_r>
 801942a:	2800      	cmp	r0, #0
 801942c:	d167      	bne.n	80194fe <__sfvwrite_r+0x18a>
 801942e:	9b00      	ldr	r3, [sp, #0]
 8019430:	1976      	adds	r6, r6, r5
 8019432:	1b5b      	subs	r3, r3, r5
 8019434:	9300      	str	r3, [sp, #0]
 8019436:	9b03      	ldr	r3, [sp, #12]
 8019438:	689b      	ldr	r3, [r3, #8]
 801943a:	1b5d      	subs	r5, r3, r5
 801943c:	9304      	str	r3, [sp, #16]
 801943e:	9b03      	ldr	r3, [sp, #12]
 8019440:	609d      	str	r5, [r3, #8]
 8019442:	d1bc      	bne.n	80193be <__sfvwrite_r+0x4a>
 8019444:	e79f      	b.n	8019386 <__sfvwrite_r+0x12>
 8019446:	0021      	movs	r1, r4
 8019448:	9802      	ldr	r0, [sp, #8]
 801944a:	f7ff fd87 	bl	8018f5c <__swsetup_r>
 801944e:	2800      	cmp	r0, #0
 8019450:	d0a2      	beq.n	8019398 <__sfvwrite_r+0x24>
 8019452:	2001      	movs	r0, #1
 8019454:	4240      	negs	r0, r0
 8019456:	e797      	b.n	8019388 <__sfvwrite_r+0x14>
 8019458:	9b01      	ldr	r3, [sp, #4]
 801945a:	681e      	ldr	r6, [r3, #0]
 801945c:	685d      	ldr	r5, [r3, #4]
 801945e:	3308      	adds	r3, #8
 8019460:	9301      	str	r3, [sp, #4]
 8019462:	2d00      	cmp	r5, #0
 8019464:	d0f8      	beq.n	8019458 <__sfvwrite_r+0xe4>
 8019466:	4a72      	ldr	r2, [pc, #456]	; (8019630 <__sfvwrite_r+0x2bc>)
 8019468:	002b      	movs	r3, r5
 801946a:	4295      	cmp	r5, r2
 801946c:	d900      	bls.n	8019470 <__sfvwrite_r+0xfc>
 801946e:	0013      	movs	r3, r2
 8019470:	0032      	movs	r2, r6
 8019472:	69e1      	ldr	r1, [r4, #28]
 8019474:	9802      	ldr	r0, [sp, #8]
 8019476:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019478:	47b8      	blx	r7
 801947a:	2800      	cmp	r0, #0
 801947c:	dd3f      	ble.n	80194fe <__sfvwrite_r+0x18a>
 801947e:	9b03      	ldr	r3, [sp, #12]
 8019480:	1836      	adds	r6, r6, r0
 8019482:	689b      	ldr	r3, [r3, #8]
 8019484:	1a2d      	subs	r5, r5, r0
 8019486:	9300      	str	r3, [sp, #0]
 8019488:	1a18      	subs	r0, r3, r0
 801948a:	9b03      	ldr	r3, [sp, #12]
 801948c:	6098      	str	r0, [r3, #8]
 801948e:	d1e8      	bne.n	8019462 <__sfvwrite_r+0xee>
 8019490:	e779      	b.n	8019386 <__sfvwrite_r+0x12>
 8019492:	2600      	movs	r6, #0
 8019494:	0035      	movs	r5, r6
 8019496:	e7e4      	b.n	8019462 <__sfvwrite_r+0xee>
 8019498:	9b01      	ldr	r3, [sp, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	9304      	str	r3, [sp, #16]
 801949e:	9b01      	ldr	r3, [sp, #4]
 80194a0:	685b      	ldr	r3, [r3, #4]
 80194a2:	9300      	str	r3, [sp, #0]
 80194a4:	9b01      	ldr	r3, [sp, #4]
 80194a6:	3308      	adds	r3, #8
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	9b00      	ldr	r3, [sp, #0]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d0f3      	beq.n	8019498 <__sfvwrite_r+0x124>
 80194b0:	2380      	movs	r3, #128	; 0x80
 80194b2:	89a2      	ldrh	r2, [r4, #12]
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	68a5      	ldr	r5, [r4, #8]
 80194b8:	6820      	ldr	r0, [r4, #0]
 80194ba:	421a      	tst	r2, r3
 80194bc:	d064      	beq.n	8019588 <__sfvwrite_r+0x214>
 80194be:	9b00      	ldr	r3, [sp, #0]
 80194c0:	429d      	cmp	r5, r3
 80194c2:	d835      	bhi.n	8019530 <__sfvwrite_r+0x1bc>
 80194c4:	2390      	movs	r3, #144	; 0x90
 80194c6:	00db      	lsls	r3, r3, #3
 80194c8:	421a      	tst	r2, r3
 80194ca:	d031      	beq.n	8019530 <__sfvwrite_r+0x1bc>
 80194cc:	2603      	movs	r6, #3
 80194ce:	6963      	ldr	r3, [r4, #20]
 80194d0:	6921      	ldr	r1, [r4, #16]
 80194d2:	435e      	muls	r6, r3
 80194d4:	1a47      	subs	r7, r0, r1
 80194d6:	0ff0      	lsrs	r0, r6, #31
 80194d8:	1986      	adds	r6, r0, r6
 80194da:	9800      	ldr	r0, [sp, #0]
 80194dc:	1c7b      	adds	r3, r7, #1
 80194de:	181b      	adds	r3, r3, r0
 80194e0:	1076      	asrs	r6, r6, #1
 80194e2:	42b3      	cmp	r3, r6
 80194e4:	d900      	bls.n	80194e8 <__sfvwrite_r+0x174>
 80194e6:	001e      	movs	r6, r3
 80194e8:	0553      	lsls	r3, r2, #21
 80194ea:	d53e      	bpl.n	801956a <__sfvwrite_r+0x1f6>
 80194ec:	0031      	movs	r1, r6
 80194ee:	9802      	ldr	r0, [sp, #8]
 80194f0:	f7fa f854 	bl	801359c <_malloc_r>
 80194f4:	1e05      	subs	r5, r0, #0
 80194f6:	d10a      	bne.n	801950e <__sfvwrite_r+0x19a>
 80194f8:	230c      	movs	r3, #12
 80194fa:	9a02      	ldr	r2, [sp, #8]
 80194fc:	6013      	str	r3, [r2, #0]
 80194fe:	2340      	movs	r3, #64	; 0x40
 8019500:	89a2      	ldrh	r2, [r4, #12]
 8019502:	4313      	orrs	r3, r2
 8019504:	81a3      	strh	r3, [r4, #12]
 8019506:	e7a4      	b.n	8019452 <__sfvwrite_r+0xde>
 8019508:	9104      	str	r1, [sp, #16]
 801950a:	9100      	str	r1, [sp, #0]
 801950c:	e7cd      	b.n	80194aa <__sfvwrite_r+0x136>
 801950e:	003a      	movs	r2, r7
 8019510:	6921      	ldr	r1, [r4, #16]
 8019512:	f7fa fa65 	bl	80139e0 <memcpy>
 8019516:	89a3      	ldrh	r3, [r4, #12]
 8019518:	4a46      	ldr	r2, [pc, #280]	; (8019634 <__sfvwrite_r+0x2c0>)
 801951a:	401a      	ands	r2, r3
 801951c:	2380      	movs	r3, #128	; 0x80
 801951e:	4313      	orrs	r3, r2
 8019520:	81a3      	strh	r3, [r4, #12]
 8019522:	6125      	str	r5, [r4, #16]
 8019524:	19ed      	adds	r5, r5, r7
 8019526:	6025      	str	r5, [r4, #0]
 8019528:	6166      	str	r6, [r4, #20]
 801952a:	9d00      	ldr	r5, [sp, #0]
 801952c:	1bf6      	subs	r6, r6, r7
 801952e:	60a6      	str	r6, [r4, #8]
 8019530:	9f00      	ldr	r7, [sp, #0]
 8019532:	42bd      	cmp	r5, r7
 8019534:	d900      	bls.n	8019538 <__sfvwrite_r+0x1c4>
 8019536:	003d      	movs	r5, r7
 8019538:	002a      	movs	r2, r5
 801953a:	9904      	ldr	r1, [sp, #16]
 801953c:	6820      	ldr	r0, [r4, #0]
 801953e:	f7fe f9a8 	bl	8017892 <memmove>
 8019542:	68a3      	ldr	r3, [r4, #8]
 8019544:	1b5b      	subs	r3, r3, r5
 8019546:	60a3      	str	r3, [r4, #8]
 8019548:	6823      	ldr	r3, [r4, #0]
 801954a:	195d      	adds	r5, r3, r5
 801954c:	6025      	str	r5, [r4, #0]
 801954e:	9b04      	ldr	r3, [sp, #16]
 8019550:	19db      	adds	r3, r3, r7
 8019552:	9304      	str	r3, [sp, #16]
 8019554:	9b00      	ldr	r3, [sp, #0]
 8019556:	1bdb      	subs	r3, r3, r7
 8019558:	9300      	str	r3, [sp, #0]
 801955a:	9b03      	ldr	r3, [sp, #12]
 801955c:	689b      	ldr	r3, [r3, #8]
 801955e:	1bdf      	subs	r7, r3, r7
 8019560:	9305      	str	r3, [sp, #20]
 8019562:	9b03      	ldr	r3, [sp, #12]
 8019564:	609f      	str	r7, [r3, #8]
 8019566:	d1a0      	bne.n	80194aa <__sfvwrite_r+0x136>
 8019568:	e70d      	b.n	8019386 <__sfvwrite_r+0x12>
 801956a:	0032      	movs	r2, r6
 801956c:	9802      	ldr	r0, [sp, #8]
 801956e:	f7fa fa7d 	bl	8013a6c <_realloc_r>
 8019572:	1e05      	subs	r5, r0, #0
 8019574:	d1d5      	bne.n	8019522 <__sfvwrite_r+0x1ae>
 8019576:	6921      	ldr	r1, [r4, #16]
 8019578:	9802      	ldr	r0, [sp, #8]
 801957a:	f7fd fd39 	bl	8016ff0 <_free_r>
 801957e:	2280      	movs	r2, #128	; 0x80
 8019580:	89a3      	ldrh	r3, [r4, #12]
 8019582:	4393      	bics	r3, r2
 8019584:	81a3      	strh	r3, [r4, #12]
 8019586:	e7b7      	b.n	80194f8 <__sfvwrite_r+0x184>
 8019588:	6923      	ldr	r3, [r4, #16]
 801958a:	4283      	cmp	r3, r0
 801958c:	d303      	bcc.n	8019596 <__sfvwrite_r+0x222>
 801958e:	6967      	ldr	r7, [r4, #20]
 8019590:	9b00      	ldr	r3, [sp, #0]
 8019592:	429f      	cmp	r7, r3
 8019594:	d917      	bls.n	80195c6 <__sfvwrite_r+0x252>
 8019596:	9b00      	ldr	r3, [sp, #0]
 8019598:	429d      	cmp	r5, r3
 801959a:	d900      	bls.n	801959e <__sfvwrite_r+0x22a>
 801959c:	001d      	movs	r5, r3
 801959e:	002a      	movs	r2, r5
 80195a0:	9904      	ldr	r1, [sp, #16]
 80195a2:	f7fe f976 	bl	8017892 <memmove>
 80195a6:	68a3      	ldr	r3, [r4, #8]
 80195a8:	6822      	ldr	r2, [r4, #0]
 80195aa:	1b5b      	subs	r3, r3, r5
 80195ac:	1952      	adds	r2, r2, r5
 80195ae:	002f      	movs	r7, r5
 80195b0:	60a3      	str	r3, [r4, #8]
 80195b2:	6022      	str	r2, [r4, #0]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d1ca      	bne.n	801954e <__sfvwrite_r+0x1da>
 80195b8:	0021      	movs	r1, r4
 80195ba:	9802      	ldr	r0, [sp, #8]
 80195bc:	f7ff fdd2 	bl	8019164 <_fflush_r>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	d0c4      	beq.n	801954e <__sfvwrite_r+0x1da>
 80195c4:	e79b      	b.n	80194fe <__sfvwrite_r+0x18a>
 80195c6:	9a00      	ldr	r2, [sp, #0]
 80195c8:	4b1b      	ldr	r3, [pc, #108]	; (8019638 <__sfvwrite_r+0x2c4>)
 80195ca:	0010      	movs	r0, r2
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d900      	bls.n	80195d2 <__sfvwrite_r+0x25e>
 80195d0:	481a      	ldr	r0, [pc, #104]	; (801963c <__sfvwrite_r+0x2c8>)
 80195d2:	0039      	movs	r1, r7
 80195d4:	f7e6 fe46 	bl	8000264 <__divsi3>
 80195d8:	003b      	movs	r3, r7
 80195da:	9a04      	ldr	r2, [sp, #16]
 80195dc:	4343      	muls	r3, r0
 80195de:	69e1      	ldr	r1, [r4, #28]
 80195e0:	9802      	ldr	r0, [sp, #8]
 80195e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80195e4:	47a8      	blx	r5
 80195e6:	1e07      	subs	r7, r0, #0
 80195e8:	dcb1      	bgt.n	801954e <__sfvwrite_r+0x1da>
 80195ea:	e788      	b.n	80194fe <__sfvwrite_r+0x18a>
 80195ec:	9b01      	ldr	r3, [sp, #4]
 80195ee:	2000      	movs	r0, #0
 80195f0:	681e      	ldr	r6, [r3, #0]
 80195f2:	685b      	ldr	r3, [r3, #4]
 80195f4:	9300      	str	r3, [sp, #0]
 80195f6:	9b01      	ldr	r3, [sp, #4]
 80195f8:	3308      	adds	r3, #8
 80195fa:	9301      	str	r3, [sp, #4]
 80195fc:	e6df      	b.n	80193be <__sfvwrite_r+0x4a>
 80195fe:	9a04      	ldr	r2, [sp, #16]
 8019600:	4293      	cmp	r3, r2
 8019602:	dc08      	bgt.n	8019616 <__sfvwrite_r+0x2a2>
 8019604:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019606:	0032      	movs	r2, r6
 8019608:	69e1      	ldr	r1, [r4, #28]
 801960a:	9802      	ldr	r0, [sp, #8]
 801960c:	47a8      	blx	r5
 801960e:	1e05      	subs	r5, r0, #0
 8019610:	dd00      	ble.n	8019614 <__sfvwrite_r+0x2a0>
 8019612:	e703      	b.n	801941c <__sfvwrite_r+0xa8>
 8019614:	e773      	b.n	80194fe <__sfvwrite_r+0x18a>
 8019616:	9a04      	ldr	r2, [sp, #16]
 8019618:	0031      	movs	r1, r6
 801961a:	f7fe f93a 	bl	8017892 <memmove>
 801961e:	9a04      	ldr	r2, [sp, #16]
 8019620:	68a3      	ldr	r3, [r4, #8]
 8019622:	0015      	movs	r5, r2
 8019624:	1a9b      	subs	r3, r3, r2
 8019626:	60a3      	str	r3, [r4, #8]
 8019628:	6823      	ldr	r3, [r4, #0]
 801962a:	189b      	adds	r3, r3, r2
 801962c:	6023      	str	r3, [r4, #0]
 801962e:	e6f5      	b.n	801941c <__sfvwrite_r+0xa8>
 8019630:	7ffffc00 	.word	0x7ffffc00
 8019634:	fffffb7f 	.word	0xfffffb7f
 8019638:	7ffffffe 	.word	0x7ffffffe
 801963c:	7fffffff 	.word	0x7fffffff

08019640 <_fwalk_reent>:
 8019640:	23b8      	movs	r3, #184	; 0xb8
 8019642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019644:	0006      	movs	r6, r0
 8019646:	2700      	movs	r7, #0
 8019648:	009b      	lsls	r3, r3, #2
 801964a:	9101      	str	r1, [sp, #4]
 801964c:	18c4      	adds	r4, r0, r3
 801964e:	6863      	ldr	r3, [r4, #4]
 8019650:	68a5      	ldr	r5, [r4, #8]
 8019652:	9300      	str	r3, [sp, #0]
 8019654:	9b00      	ldr	r3, [sp, #0]
 8019656:	3b01      	subs	r3, #1
 8019658:	9300      	str	r3, [sp, #0]
 801965a:	d504      	bpl.n	8019666 <_fwalk_reent+0x26>
 801965c:	6824      	ldr	r4, [r4, #0]
 801965e:	2c00      	cmp	r4, #0
 8019660:	d1f5      	bne.n	801964e <_fwalk_reent+0xe>
 8019662:	0038      	movs	r0, r7
 8019664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019666:	89ab      	ldrh	r3, [r5, #12]
 8019668:	2b01      	cmp	r3, #1
 801966a:	d908      	bls.n	801967e <_fwalk_reent+0x3e>
 801966c:	220e      	movs	r2, #14
 801966e:	5eab      	ldrsh	r3, [r5, r2]
 8019670:	3301      	adds	r3, #1
 8019672:	d004      	beq.n	801967e <_fwalk_reent+0x3e>
 8019674:	0029      	movs	r1, r5
 8019676:	0030      	movs	r0, r6
 8019678:	9b01      	ldr	r3, [sp, #4]
 801967a:	4798      	blx	r3
 801967c:	4307      	orrs	r7, r0
 801967e:	3568      	adds	r5, #104	; 0x68
 8019680:	e7e8      	b.n	8019654 <_fwalk_reent+0x14>
	...

08019684 <__swhatbuf_r>:
 8019684:	b570      	push	{r4, r5, r6, lr}
 8019686:	000e      	movs	r6, r1
 8019688:	001d      	movs	r5, r3
 801968a:	230e      	movs	r3, #14
 801968c:	5ec9      	ldrsh	r1, [r1, r3]
 801968e:	0014      	movs	r4, r2
 8019690:	b096      	sub	sp, #88	; 0x58
 8019692:	2900      	cmp	r1, #0
 8019694:	da0b      	bge.n	80196ae <__swhatbuf_r+0x2a>
 8019696:	2300      	movs	r3, #0
 8019698:	602b      	str	r3, [r5, #0]
 801969a:	89b1      	ldrh	r1, [r6, #12]
 801969c:	2280      	movs	r2, #128	; 0x80
 801969e:	0008      	movs	r0, r1
 80196a0:	4010      	ands	r0, r2
 80196a2:	4211      	tst	r1, r2
 80196a4:	d117      	bne.n	80196d6 <__swhatbuf_r+0x52>
 80196a6:	2380      	movs	r3, #128	; 0x80
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	6023      	str	r3, [r4, #0]
 80196ac:	e016      	b.n	80196dc <__swhatbuf_r+0x58>
 80196ae:	466a      	mov	r2, sp
 80196b0:	f000 f9e4 	bl	8019a7c <_fstat_r>
 80196b4:	2800      	cmp	r0, #0
 80196b6:	dbee      	blt.n	8019696 <__swhatbuf_r+0x12>
 80196b8:	23f0      	movs	r3, #240	; 0xf0
 80196ba:	9901      	ldr	r1, [sp, #4]
 80196bc:	021b      	lsls	r3, r3, #8
 80196be:	4019      	ands	r1, r3
 80196c0:	4b07      	ldr	r3, [pc, #28]	; (80196e0 <__swhatbuf_r+0x5c>)
 80196c2:	2080      	movs	r0, #128	; 0x80
 80196c4:	18c9      	adds	r1, r1, r3
 80196c6:	424b      	negs	r3, r1
 80196c8:	4159      	adcs	r1, r3
 80196ca:	2380      	movs	r3, #128	; 0x80
 80196cc:	00db      	lsls	r3, r3, #3
 80196ce:	6029      	str	r1, [r5, #0]
 80196d0:	0100      	lsls	r0, r0, #4
 80196d2:	6023      	str	r3, [r4, #0]
 80196d4:	e002      	b.n	80196dc <__swhatbuf_r+0x58>
 80196d6:	2240      	movs	r2, #64	; 0x40
 80196d8:	0018      	movs	r0, r3
 80196da:	6022      	str	r2, [r4, #0]
 80196dc:	b016      	add	sp, #88	; 0x58
 80196de:	bd70      	pop	{r4, r5, r6, pc}
 80196e0:	ffffe000 	.word	0xffffe000

080196e4 <__smakebuf_r>:
 80196e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196e6:	2602      	movs	r6, #2
 80196e8:	898b      	ldrh	r3, [r1, #12]
 80196ea:	0005      	movs	r5, r0
 80196ec:	000c      	movs	r4, r1
 80196ee:	4233      	tst	r3, r6
 80196f0:	d006      	beq.n	8019700 <__smakebuf_r+0x1c>
 80196f2:	0023      	movs	r3, r4
 80196f4:	3343      	adds	r3, #67	; 0x43
 80196f6:	6023      	str	r3, [r4, #0]
 80196f8:	6123      	str	r3, [r4, #16]
 80196fa:	2301      	movs	r3, #1
 80196fc:	6163      	str	r3, [r4, #20]
 80196fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8019700:	466a      	mov	r2, sp
 8019702:	ab01      	add	r3, sp, #4
 8019704:	f7ff ffbe 	bl	8019684 <__swhatbuf_r>
 8019708:	9900      	ldr	r1, [sp, #0]
 801970a:	0007      	movs	r7, r0
 801970c:	0028      	movs	r0, r5
 801970e:	f7f9 ff45 	bl	801359c <_malloc_r>
 8019712:	2800      	cmp	r0, #0
 8019714:	d108      	bne.n	8019728 <__smakebuf_r+0x44>
 8019716:	220c      	movs	r2, #12
 8019718:	5ea3      	ldrsh	r3, [r4, r2]
 801971a:	059a      	lsls	r2, r3, #22
 801971c:	d4ef      	bmi.n	80196fe <__smakebuf_r+0x1a>
 801971e:	2203      	movs	r2, #3
 8019720:	4393      	bics	r3, r2
 8019722:	431e      	orrs	r6, r3
 8019724:	81a6      	strh	r6, [r4, #12]
 8019726:	e7e4      	b.n	80196f2 <__smakebuf_r+0xe>
 8019728:	4b0f      	ldr	r3, [pc, #60]	; (8019768 <__smakebuf_r+0x84>)
 801972a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801972c:	2380      	movs	r3, #128	; 0x80
 801972e:	89a2      	ldrh	r2, [r4, #12]
 8019730:	6020      	str	r0, [r4, #0]
 8019732:	4313      	orrs	r3, r2
 8019734:	81a3      	strh	r3, [r4, #12]
 8019736:	9b00      	ldr	r3, [sp, #0]
 8019738:	6120      	str	r0, [r4, #16]
 801973a:	6163      	str	r3, [r4, #20]
 801973c:	9b01      	ldr	r3, [sp, #4]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d00d      	beq.n	801975e <__smakebuf_r+0x7a>
 8019742:	0028      	movs	r0, r5
 8019744:	230e      	movs	r3, #14
 8019746:	5ee1      	ldrsh	r1, [r4, r3]
 8019748:	f000 f9aa 	bl	8019aa0 <_isatty_r>
 801974c:	2800      	cmp	r0, #0
 801974e:	d006      	beq.n	801975e <__smakebuf_r+0x7a>
 8019750:	2203      	movs	r2, #3
 8019752:	89a3      	ldrh	r3, [r4, #12]
 8019754:	4393      	bics	r3, r2
 8019756:	001a      	movs	r2, r3
 8019758:	2301      	movs	r3, #1
 801975a:	4313      	orrs	r3, r2
 801975c:	81a3      	strh	r3, [r4, #12]
 801975e:	89a0      	ldrh	r0, [r4, #12]
 8019760:	4307      	orrs	r7, r0
 8019762:	81a7      	strh	r7, [r4, #12]
 8019764:	e7cb      	b.n	80196fe <__smakebuf_r+0x1a>
 8019766:	46c0      	nop			; (mov r8, r8)
 8019768:	08019201 	.word	0x08019201

0801976c <_raise_r>:
 801976c:	b570      	push	{r4, r5, r6, lr}
 801976e:	0004      	movs	r4, r0
 8019770:	000d      	movs	r5, r1
 8019772:	291f      	cmp	r1, #31
 8019774:	d904      	bls.n	8019780 <_raise_r+0x14>
 8019776:	2316      	movs	r3, #22
 8019778:	6003      	str	r3, [r0, #0]
 801977a:	2001      	movs	r0, #1
 801977c:	4240      	negs	r0, r0
 801977e:	bd70      	pop	{r4, r5, r6, pc}
 8019780:	23b7      	movs	r3, #183	; 0xb7
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	58c3      	ldr	r3, [r0, r3]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d004      	beq.n	8019794 <_raise_r+0x28>
 801978a:	008a      	lsls	r2, r1, #2
 801978c:	189b      	adds	r3, r3, r2
 801978e:	681a      	ldr	r2, [r3, #0]
 8019790:	2a00      	cmp	r2, #0
 8019792:	d108      	bne.n	80197a6 <_raise_r+0x3a>
 8019794:	0020      	movs	r0, r4
 8019796:	f000 f831 	bl	80197fc <_getpid_r>
 801979a:	002a      	movs	r2, r5
 801979c:	0001      	movs	r1, r0
 801979e:	0020      	movs	r0, r4
 80197a0:	f000 f81a 	bl	80197d8 <_kill_r>
 80197a4:	e7eb      	b.n	801977e <_raise_r+0x12>
 80197a6:	2000      	movs	r0, #0
 80197a8:	2a01      	cmp	r2, #1
 80197aa:	d0e8      	beq.n	801977e <_raise_r+0x12>
 80197ac:	1c51      	adds	r1, r2, #1
 80197ae:	d103      	bne.n	80197b8 <_raise_r+0x4c>
 80197b0:	2316      	movs	r3, #22
 80197b2:	3001      	adds	r0, #1
 80197b4:	6023      	str	r3, [r4, #0]
 80197b6:	e7e2      	b.n	801977e <_raise_r+0x12>
 80197b8:	2400      	movs	r4, #0
 80197ba:	0028      	movs	r0, r5
 80197bc:	601c      	str	r4, [r3, #0]
 80197be:	4790      	blx	r2
 80197c0:	0020      	movs	r0, r4
 80197c2:	e7dc      	b.n	801977e <_raise_r+0x12>

080197c4 <raise>:
 80197c4:	b510      	push	{r4, lr}
 80197c6:	4b03      	ldr	r3, [pc, #12]	; (80197d4 <raise+0x10>)
 80197c8:	0001      	movs	r1, r0
 80197ca:	6818      	ldr	r0, [r3, #0]
 80197cc:	f7ff ffce 	bl	801976c <_raise_r>
 80197d0:	bd10      	pop	{r4, pc}
 80197d2:	46c0      	nop			; (mov r8, r8)
 80197d4:	200000ac 	.word	0x200000ac

080197d8 <_kill_r>:
 80197d8:	2300      	movs	r3, #0
 80197da:	b570      	push	{r4, r5, r6, lr}
 80197dc:	4d06      	ldr	r5, [pc, #24]	; (80197f8 <_kill_r+0x20>)
 80197de:	0004      	movs	r4, r0
 80197e0:	0008      	movs	r0, r1
 80197e2:	0011      	movs	r1, r2
 80197e4:	602b      	str	r3, [r5, #0]
 80197e6:	f000 f9b5 	bl	8019b54 <_kill>
 80197ea:	1c43      	adds	r3, r0, #1
 80197ec:	d103      	bne.n	80197f6 <_kill_r+0x1e>
 80197ee:	682b      	ldr	r3, [r5, #0]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d000      	beq.n	80197f6 <_kill_r+0x1e>
 80197f4:	6023      	str	r3, [r4, #0]
 80197f6:	bd70      	pop	{r4, r5, r6, pc}
 80197f8:	20006dcc 	.word	0x20006dcc

080197fc <_getpid_r>:
 80197fc:	b510      	push	{r4, lr}
 80197fe:	f000 f999 	bl	8019b34 <_getpid>
 8019802:	bd10      	pop	{r4, pc}

08019804 <__sread>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	000c      	movs	r4, r1
 8019808:	250e      	movs	r5, #14
 801980a:	5f49      	ldrsh	r1, [r1, r5]
 801980c:	f000 f96e 	bl	8019aec <_read_r>
 8019810:	2800      	cmp	r0, #0
 8019812:	db03      	blt.n	801981c <__sread+0x18>
 8019814:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019816:	181b      	adds	r3, r3, r0
 8019818:	6523      	str	r3, [r4, #80]	; 0x50
 801981a:	bd70      	pop	{r4, r5, r6, pc}
 801981c:	89a3      	ldrh	r3, [r4, #12]
 801981e:	4a02      	ldr	r2, [pc, #8]	; (8019828 <__sread+0x24>)
 8019820:	4013      	ands	r3, r2
 8019822:	81a3      	strh	r3, [r4, #12]
 8019824:	e7f9      	b.n	801981a <__sread+0x16>
 8019826:	46c0      	nop			; (mov r8, r8)
 8019828:	ffffefff 	.word	0xffffefff

0801982c <__swrite>:
 801982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801982e:	001f      	movs	r7, r3
 8019830:	898b      	ldrh	r3, [r1, #12]
 8019832:	0005      	movs	r5, r0
 8019834:	000c      	movs	r4, r1
 8019836:	0016      	movs	r6, r2
 8019838:	05db      	lsls	r3, r3, #23
 801983a:	d505      	bpl.n	8019848 <__swrite+0x1c>
 801983c:	230e      	movs	r3, #14
 801983e:	5ec9      	ldrsh	r1, [r1, r3]
 8019840:	2200      	movs	r2, #0
 8019842:	2302      	movs	r3, #2
 8019844:	f000 f93e 	bl	8019ac4 <_lseek_r>
 8019848:	89a3      	ldrh	r3, [r4, #12]
 801984a:	4a05      	ldr	r2, [pc, #20]	; (8019860 <__swrite+0x34>)
 801984c:	0028      	movs	r0, r5
 801984e:	4013      	ands	r3, r2
 8019850:	81a3      	strh	r3, [r4, #12]
 8019852:	0032      	movs	r2, r6
 8019854:	230e      	movs	r3, #14
 8019856:	5ee1      	ldrsh	r1, [r4, r3]
 8019858:	003b      	movs	r3, r7
 801985a:	f000 f889 	bl	8019970 <_write_r>
 801985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019860:	ffffefff 	.word	0xffffefff

08019864 <__sseek>:
 8019864:	b570      	push	{r4, r5, r6, lr}
 8019866:	000c      	movs	r4, r1
 8019868:	250e      	movs	r5, #14
 801986a:	5f49      	ldrsh	r1, [r1, r5]
 801986c:	f000 f92a 	bl	8019ac4 <_lseek_r>
 8019870:	89a3      	ldrh	r3, [r4, #12]
 8019872:	1c42      	adds	r2, r0, #1
 8019874:	d103      	bne.n	801987e <__sseek+0x1a>
 8019876:	4a05      	ldr	r2, [pc, #20]	; (801988c <__sseek+0x28>)
 8019878:	4013      	ands	r3, r2
 801987a:	81a3      	strh	r3, [r4, #12]
 801987c:	bd70      	pop	{r4, r5, r6, pc}
 801987e:	2280      	movs	r2, #128	; 0x80
 8019880:	0152      	lsls	r2, r2, #5
 8019882:	4313      	orrs	r3, r2
 8019884:	81a3      	strh	r3, [r4, #12]
 8019886:	6520      	str	r0, [r4, #80]	; 0x50
 8019888:	e7f8      	b.n	801987c <__sseek+0x18>
 801988a:	46c0      	nop			; (mov r8, r8)
 801988c:	ffffefff 	.word	0xffffefff

08019890 <__sclose>:
 8019890:	b510      	push	{r4, lr}
 8019892:	230e      	movs	r3, #14
 8019894:	5ec9      	ldrsh	r1, [r1, r3]
 8019896:	f000 f87f 	bl	8019998 <_close_r>
 801989a:	bd10      	pop	{r4, pc}

0801989c <__swbuf_r>:
 801989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801989e:	0006      	movs	r6, r0
 80198a0:	000d      	movs	r5, r1
 80198a2:	0014      	movs	r4, r2
 80198a4:	2800      	cmp	r0, #0
 80198a6:	d004      	beq.n	80198b2 <__swbuf_r+0x16>
 80198a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d101      	bne.n	80198b2 <__swbuf_r+0x16>
 80198ae:	f7ff fccf 	bl	8019250 <__sinit>
 80198b2:	69a3      	ldr	r3, [r4, #24]
 80198b4:	60a3      	str	r3, [r4, #8]
 80198b6:	89a3      	ldrh	r3, [r4, #12]
 80198b8:	071b      	lsls	r3, r3, #28
 80198ba:	d52e      	bpl.n	801991a <__swbuf_r+0x7e>
 80198bc:	6923      	ldr	r3, [r4, #16]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d02b      	beq.n	801991a <__swbuf_r+0x7e>
 80198c2:	230c      	movs	r3, #12
 80198c4:	5ee2      	ldrsh	r2, [r4, r3]
 80198c6:	2380      	movs	r3, #128	; 0x80
 80198c8:	019b      	lsls	r3, r3, #6
 80198ca:	b2ef      	uxtb	r7, r5
 80198cc:	b2ed      	uxtb	r5, r5
 80198ce:	421a      	tst	r2, r3
 80198d0:	d02c      	beq.n	801992c <__swbuf_r+0x90>
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	6922      	ldr	r2, [r4, #16]
 80198d6:	1a98      	subs	r0, r3, r2
 80198d8:	6963      	ldr	r3, [r4, #20]
 80198da:	4283      	cmp	r3, r0
 80198dc:	dc05      	bgt.n	80198ea <__swbuf_r+0x4e>
 80198de:	0021      	movs	r1, r4
 80198e0:	0030      	movs	r0, r6
 80198e2:	f7ff fc3f 	bl	8019164 <_fflush_r>
 80198e6:	2800      	cmp	r0, #0
 80198e8:	d11d      	bne.n	8019926 <__swbuf_r+0x8a>
 80198ea:	68a3      	ldr	r3, [r4, #8]
 80198ec:	3001      	adds	r0, #1
 80198ee:	3b01      	subs	r3, #1
 80198f0:	60a3      	str	r3, [r4, #8]
 80198f2:	6823      	ldr	r3, [r4, #0]
 80198f4:	1c5a      	adds	r2, r3, #1
 80198f6:	6022      	str	r2, [r4, #0]
 80198f8:	701f      	strb	r7, [r3, #0]
 80198fa:	6963      	ldr	r3, [r4, #20]
 80198fc:	4283      	cmp	r3, r0
 80198fe:	d004      	beq.n	801990a <__swbuf_r+0x6e>
 8019900:	89a3      	ldrh	r3, [r4, #12]
 8019902:	07db      	lsls	r3, r3, #31
 8019904:	d507      	bpl.n	8019916 <__swbuf_r+0x7a>
 8019906:	2d0a      	cmp	r5, #10
 8019908:	d105      	bne.n	8019916 <__swbuf_r+0x7a>
 801990a:	0021      	movs	r1, r4
 801990c:	0030      	movs	r0, r6
 801990e:	f7ff fc29 	bl	8019164 <_fflush_r>
 8019912:	2800      	cmp	r0, #0
 8019914:	d107      	bne.n	8019926 <__swbuf_r+0x8a>
 8019916:	0028      	movs	r0, r5
 8019918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801991a:	0021      	movs	r1, r4
 801991c:	0030      	movs	r0, r6
 801991e:	f7ff fb1d 	bl	8018f5c <__swsetup_r>
 8019922:	2800      	cmp	r0, #0
 8019924:	d0cd      	beq.n	80198c2 <__swbuf_r+0x26>
 8019926:	2501      	movs	r5, #1
 8019928:	426d      	negs	r5, r5
 801992a:	e7f4      	b.n	8019916 <__swbuf_r+0x7a>
 801992c:	4313      	orrs	r3, r2
 801992e:	81a3      	strh	r3, [r4, #12]
 8019930:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019932:	4b02      	ldr	r3, [pc, #8]	; (801993c <__swbuf_r+0xa0>)
 8019934:	4013      	ands	r3, r2
 8019936:	6663      	str	r3, [r4, #100]	; 0x64
 8019938:	e7cb      	b.n	80198d2 <__swbuf_r+0x36>
 801993a:	46c0      	nop			; (mov r8, r8)
 801993c:	ffffdfff 	.word	0xffffdfff

08019940 <_wcrtomb_r>:
 8019940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019942:	001d      	movs	r5, r3
 8019944:	4b09      	ldr	r3, [pc, #36]	; (801996c <_wcrtomb_r+0x2c>)
 8019946:	0004      	movs	r4, r0
 8019948:	33e0      	adds	r3, #224	; 0xe0
 801994a:	681e      	ldr	r6, [r3, #0]
 801994c:	002b      	movs	r3, r5
 801994e:	2900      	cmp	r1, #0
 8019950:	d101      	bne.n	8019956 <_wcrtomb_r+0x16>
 8019952:	000a      	movs	r2, r1
 8019954:	a901      	add	r1, sp, #4
 8019956:	0020      	movs	r0, r4
 8019958:	47b0      	blx	r6
 801995a:	1c43      	adds	r3, r0, #1
 801995c:	d103      	bne.n	8019966 <_wcrtomb_r+0x26>
 801995e:	2300      	movs	r3, #0
 8019960:	602b      	str	r3, [r5, #0]
 8019962:	338a      	adds	r3, #138	; 0x8a
 8019964:	6023      	str	r3, [r4, #0]
 8019966:	b004      	add	sp, #16
 8019968:	bd70      	pop	{r4, r5, r6, pc}
 801996a:	46c0      	nop			; (mov r8, r8)
 801996c:	200008f0 	.word	0x200008f0

08019970 <_write_r>:
 8019970:	b570      	push	{r4, r5, r6, lr}
 8019972:	0004      	movs	r4, r0
 8019974:	0008      	movs	r0, r1
 8019976:	0011      	movs	r1, r2
 8019978:	001a      	movs	r2, r3
 801997a:	2300      	movs	r3, #0
 801997c:	4d05      	ldr	r5, [pc, #20]	; (8019994 <_write_r+0x24>)
 801997e:	602b      	str	r3, [r5, #0]
 8019980:	f000 f910 	bl	8019ba4 <_write>
 8019984:	1c43      	adds	r3, r0, #1
 8019986:	d103      	bne.n	8019990 <_write_r+0x20>
 8019988:	682b      	ldr	r3, [r5, #0]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d000      	beq.n	8019990 <_write_r+0x20>
 801998e:	6023      	str	r3, [r4, #0]
 8019990:	bd70      	pop	{r4, r5, r6, pc}
 8019992:	46c0      	nop			; (mov r8, r8)
 8019994:	20006dcc 	.word	0x20006dcc

08019998 <_close_r>:
 8019998:	2300      	movs	r3, #0
 801999a:	b570      	push	{r4, r5, r6, lr}
 801999c:	4d06      	ldr	r5, [pc, #24]	; (80199b8 <_close_r+0x20>)
 801999e:	0004      	movs	r4, r0
 80199a0:	0008      	movs	r0, r1
 80199a2:	602b      	str	r3, [r5, #0]
 80199a4:	f000 f8b6 	bl	8019b14 <_close>
 80199a8:	1c43      	adds	r3, r0, #1
 80199aa:	d103      	bne.n	80199b4 <_close_r+0x1c>
 80199ac:	682b      	ldr	r3, [r5, #0]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d000      	beq.n	80199b4 <_close_r+0x1c>
 80199b2:	6023      	str	r3, [r4, #0]
 80199b4:	bd70      	pop	{r4, r5, r6, pc}
 80199b6:	46c0      	nop			; (mov r8, r8)
 80199b8:	20006dcc 	.word	0x20006dcc

080199bc <_fclose_r>:
 80199bc:	b570      	push	{r4, r5, r6, lr}
 80199be:	0005      	movs	r5, r0
 80199c0:	1e0c      	subs	r4, r1, #0
 80199c2:	d102      	bne.n	80199ca <_fclose_r+0xe>
 80199c4:	2600      	movs	r6, #0
 80199c6:	0030      	movs	r0, r6
 80199c8:	bd70      	pop	{r4, r5, r6, pc}
 80199ca:	2800      	cmp	r0, #0
 80199cc:	d004      	beq.n	80199d8 <_fclose_r+0x1c>
 80199ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d101      	bne.n	80199d8 <_fclose_r+0x1c>
 80199d4:	f7ff fc3c 	bl	8019250 <__sinit>
 80199d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199da:	07db      	lsls	r3, r3, #31
 80199dc:	d405      	bmi.n	80199ea <_fclose_r+0x2e>
 80199de:	89a3      	ldrh	r3, [r4, #12]
 80199e0:	059b      	lsls	r3, r3, #22
 80199e2:	d402      	bmi.n	80199ea <_fclose_r+0x2e>
 80199e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199e6:	f7fd ff35 	bl	8017854 <__retarget_lock_acquire_recursive>
 80199ea:	220c      	movs	r2, #12
 80199ec:	5ea3      	ldrsh	r3, [r4, r2]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d109      	bne.n	8019a06 <_fclose_r+0x4a>
 80199f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199f4:	3301      	adds	r3, #1
 80199f6:	0016      	movs	r6, r2
 80199f8:	401e      	ands	r6, r3
 80199fa:	421a      	tst	r2, r3
 80199fc:	d1e2      	bne.n	80199c4 <_fclose_r+0x8>
 80199fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a00:	f7fd ff29 	bl	8017856 <__retarget_lock_release_recursive>
 8019a04:	e7df      	b.n	80199c6 <_fclose_r+0xa>
 8019a06:	0021      	movs	r1, r4
 8019a08:	0028      	movs	r0, r5
 8019a0a:	f7ff fb13 	bl	8019034 <__sflush_r>
 8019a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019a10:	0006      	movs	r6, r0
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d006      	beq.n	8019a24 <_fclose_r+0x68>
 8019a16:	0028      	movs	r0, r5
 8019a18:	69e1      	ldr	r1, [r4, #28]
 8019a1a:	4798      	blx	r3
 8019a1c:	2800      	cmp	r0, #0
 8019a1e:	da01      	bge.n	8019a24 <_fclose_r+0x68>
 8019a20:	2601      	movs	r6, #1
 8019a22:	4276      	negs	r6, r6
 8019a24:	89a3      	ldrh	r3, [r4, #12]
 8019a26:	061b      	lsls	r3, r3, #24
 8019a28:	d503      	bpl.n	8019a32 <_fclose_r+0x76>
 8019a2a:	0028      	movs	r0, r5
 8019a2c:	6921      	ldr	r1, [r4, #16]
 8019a2e:	f7fd fadf 	bl	8016ff0 <_free_r>
 8019a32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019a34:	2900      	cmp	r1, #0
 8019a36:	d008      	beq.n	8019a4a <_fclose_r+0x8e>
 8019a38:	0023      	movs	r3, r4
 8019a3a:	3340      	adds	r3, #64	; 0x40
 8019a3c:	4299      	cmp	r1, r3
 8019a3e:	d002      	beq.n	8019a46 <_fclose_r+0x8a>
 8019a40:	0028      	movs	r0, r5
 8019a42:	f7fd fad5 	bl	8016ff0 <_free_r>
 8019a46:	2300      	movs	r3, #0
 8019a48:	6323      	str	r3, [r4, #48]	; 0x30
 8019a4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019a4c:	2900      	cmp	r1, #0
 8019a4e:	d004      	beq.n	8019a5a <_fclose_r+0x9e>
 8019a50:	0028      	movs	r0, r5
 8019a52:	f7fd facd 	bl	8016ff0 <_free_r>
 8019a56:	2300      	movs	r3, #0
 8019a58:	6463      	str	r3, [r4, #68]	; 0x44
 8019a5a:	f7ff fbd9 	bl	8019210 <__sfp_lock_acquire>
 8019a5e:	2300      	movs	r3, #0
 8019a60:	81a3      	strh	r3, [r4, #12]
 8019a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a64:	07db      	lsls	r3, r3, #31
 8019a66:	d402      	bmi.n	8019a6e <_fclose_r+0xb2>
 8019a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a6a:	f7fd fef4 	bl	8017856 <__retarget_lock_release_recursive>
 8019a6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a70:	f7fd feef 	bl	8017852 <__retarget_lock_close_recursive>
 8019a74:	f7ff fbd4 	bl	8019220 <__sfp_lock_release>
 8019a78:	e7a5      	b.n	80199c6 <_fclose_r+0xa>
	...

08019a7c <_fstat_r>:
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	b570      	push	{r4, r5, r6, lr}
 8019a80:	4d06      	ldr	r5, [pc, #24]	; (8019a9c <_fstat_r+0x20>)
 8019a82:	0004      	movs	r4, r0
 8019a84:	0008      	movs	r0, r1
 8019a86:	0011      	movs	r1, r2
 8019a88:	602b      	str	r3, [r5, #0]
 8019a8a:	f000 f84b 	bl	8019b24 <_fstat>
 8019a8e:	1c43      	adds	r3, r0, #1
 8019a90:	d103      	bne.n	8019a9a <_fstat_r+0x1e>
 8019a92:	682b      	ldr	r3, [r5, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d000      	beq.n	8019a9a <_fstat_r+0x1e>
 8019a98:	6023      	str	r3, [r4, #0]
 8019a9a:	bd70      	pop	{r4, r5, r6, pc}
 8019a9c:	20006dcc 	.word	0x20006dcc

08019aa0 <_isatty_r>:
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	b570      	push	{r4, r5, r6, lr}
 8019aa4:	4d06      	ldr	r5, [pc, #24]	; (8019ac0 <_isatty_r+0x20>)
 8019aa6:	0004      	movs	r4, r0
 8019aa8:	0008      	movs	r0, r1
 8019aaa:	602b      	str	r3, [r5, #0]
 8019aac:	f000 f84a 	bl	8019b44 <_isatty>
 8019ab0:	1c43      	adds	r3, r0, #1
 8019ab2:	d103      	bne.n	8019abc <_isatty_r+0x1c>
 8019ab4:	682b      	ldr	r3, [r5, #0]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d000      	beq.n	8019abc <_isatty_r+0x1c>
 8019aba:	6023      	str	r3, [r4, #0]
 8019abc:	bd70      	pop	{r4, r5, r6, pc}
 8019abe:	46c0      	nop			; (mov r8, r8)
 8019ac0:	20006dcc 	.word	0x20006dcc

08019ac4 <_lseek_r>:
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	0004      	movs	r4, r0
 8019ac8:	0008      	movs	r0, r1
 8019aca:	0011      	movs	r1, r2
 8019acc:	001a      	movs	r2, r3
 8019ace:	2300      	movs	r3, #0
 8019ad0:	4d05      	ldr	r5, [pc, #20]	; (8019ae8 <_lseek_r+0x24>)
 8019ad2:	602b      	str	r3, [r5, #0]
 8019ad4:	f000 f846 	bl	8019b64 <_lseek>
 8019ad8:	1c43      	adds	r3, r0, #1
 8019ada:	d103      	bne.n	8019ae4 <_lseek_r+0x20>
 8019adc:	682b      	ldr	r3, [r5, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d000      	beq.n	8019ae4 <_lseek_r+0x20>
 8019ae2:	6023      	str	r3, [r4, #0]
 8019ae4:	bd70      	pop	{r4, r5, r6, pc}
 8019ae6:	46c0      	nop			; (mov r8, r8)
 8019ae8:	20006dcc 	.word	0x20006dcc

08019aec <_read_r>:
 8019aec:	b570      	push	{r4, r5, r6, lr}
 8019aee:	0004      	movs	r4, r0
 8019af0:	0008      	movs	r0, r1
 8019af2:	0011      	movs	r1, r2
 8019af4:	001a      	movs	r2, r3
 8019af6:	2300      	movs	r3, #0
 8019af8:	4d05      	ldr	r5, [pc, #20]	; (8019b10 <_read_r+0x24>)
 8019afa:	602b      	str	r3, [r5, #0]
 8019afc:	f000 f83a 	bl	8019b74 <_read>
 8019b00:	1c43      	adds	r3, r0, #1
 8019b02:	d103      	bne.n	8019b0c <_read_r+0x20>
 8019b04:	682b      	ldr	r3, [r5, #0]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d000      	beq.n	8019b0c <_read_r+0x20>
 8019b0a:	6023      	str	r3, [r4, #0]
 8019b0c:	bd70      	pop	{r4, r5, r6, pc}
 8019b0e:	46c0      	nop			; (mov r8, r8)
 8019b10:	20006dcc 	.word	0x20006dcc

08019b14 <_close>:
 8019b14:	2258      	movs	r2, #88	; 0x58
 8019b16:	2001      	movs	r0, #1
 8019b18:	4b01      	ldr	r3, [pc, #4]	; (8019b20 <_close+0xc>)
 8019b1a:	4240      	negs	r0, r0
 8019b1c:	601a      	str	r2, [r3, #0]
 8019b1e:	4770      	bx	lr
 8019b20:	20006dcc 	.word	0x20006dcc

08019b24 <_fstat>:
 8019b24:	2258      	movs	r2, #88	; 0x58
 8019b26:	2001      	movs	r0, #1
 8019b28:	4b01      	ldr	r3, [pc, #4]	; (8019b30 <_fstat+0xc>)
 8019b2a:	4240      	negs	r0, r0
 8019b2c:	601a      	str	r2, [r3, #0]
 8019b2e:	4770      	bx	lr
 8019b30:	20006dcc 	.word	0x20006dcc

08019b34 <_getpid>:
 8019b34:	2258      	movs	r2, #88	; 0x58
 8019b36:	2001      	movs	r0, #1
 8019b38:	4b01      	ldr	r3, [pc, #4]	; (8019b40 <_getpid+0xc>)
 8019b3a:	4240      	negs	r0, r0
 8019b3c:	601a      	str	r2, [r3, #0]
 8019b3e:	4770      	bx	lr
 8019b40:	20006dcc 	.word	0x20006dcc

08019b44 <_isatty>:
 8019b44:	2258      	movs	r2, #88	; 0x58
 8019b46:	4b02      	ldr	r3, [pc, #8]	; (8019b50 <_isatty+0xc>)
 8019b48:	2000      	movs	r0, #0
 8019b4a:	601a      	str	r2, [r3, #0]
 8019b4c:	4770      	bx	lr
 8019b4e:	46c0      	nop			; (mov r8, r8)
 8019b50:	20006dcc 	.word	0x20006dcc

08019b54 <_kill>:
 8019b54:	2258      	movs	r2, #88	; 0x58
 8019b56:	2001      	movs	r0, #1
 8019b58:	4b01      	ldr	r3, [pc, #4]	; (8019b60 <_kill+0xc>)
 8019b5a:	4240      	negs	r0, r0
 8019b5c:	601a      	str	r2, [r3, #0]
 8019b5e:	4770      	bx	lr
 8019b60:	20006dcc 	.word	0x20006dcc

08019b64 <_lseek>:
 8019b64:	2258      	movs	r2, #88	; 0x58
 8019b66:	2001      	movs	r0, #1
 8019b68:	4b01      	ldr	r3, [pc, #4]	; (8019b70 <_lseek+0xc>)
 8019b6a:	4240      	negs	r0, r0
 8019b6c:	601a      	str	r2, [r3, #0]
 8019b6e:	4770      	bx	lr
 8019b70:	20006dcc 	.word	0x20006dcc

08019b74 <_read>:
 8019b74:	2258      	movs	r2, #88	; 0x58
 8019b76:	2001      	movs	r0, #1
 8019b78:	4b01      	ldr	r3, [pc, #4]	; (8019b80 <_read+0xc>)
 8019b7a:	4240      	negs	r0, r0
 8019b7c:	601a      	str	r2, [r3, #0]
 8019b7e:	4770      	bx	lr
 8019b80:	20006dcc 	.word	0x20006dcc

08019b84 <_sbrk>:
 8019b84:	4a05      	ldr	r2, [pc, #20]	; (8019b9c <_sbrk+0x18>)
 8019b86:	0003      	movs	r3, r0
 8019b88:	6811      	ldr	r1, [r2, #0]
 8019b8a:	2900      	cmp	r1, #0
 8019b8c:	d101      	bne.n	8019b92 <_sbrk+0xe>
 8019b8e:	4904      	ldr	r1, [pc, #16]	; (8019ba0 <_sbrk+0x1c>)
 8019b90:	6011      	str	r1, [r2, #0]
 8019b92:	6810      	ldr	r0, [r2, #0]
 8019b94:	18c3      	adds	r3, r0, r3
 8019b96:	6013      	str	r3, [r2, #0]
 8019b98:	4770      	bx	lr
 8019b9a:	46c0      	nop			; (mov r8, r8)
 8019b9c:	20006850 	.word	0x20006850
 8019ba0:	20006dd0 	.word	0x20006dd0

08019ba4 <_write>:
 8019ba4:	2258      	movs	r2, #88	; 0x58
 8019ba6:	2001      	movs	r0, #1
 8019ba8:	4b01      	ldr	r3, [pc, #4]	; (8019bb0 <_write+0xc>)
 8019baa:	4240      	negs	r0, r0
 8019bac:	601a      	str	r2, [r3, #0]
 8019bae:	4770      	bx	lr
 8019bb0:	20006dcc 	.word	0x20006dcc

08019bb4 <_exit>:
 8019bb4:	e7fe      	b.n	8019bb4 <_exit>
	...

08019bb8 <_init>:
 8019bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bba:	46c0      	nop			; (mov r8, r8)
 8019bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bbe:	bc08      	pop	{r3}
 8019bc0:	469e      	mov	lr, r3
 8019bc2:	4770      	bx	lr

08019bc4 <_fini>:
 8019bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bc6:	46c0      	nop			; (mov r8, r8)
 8019bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bca:	bc08      	pop	{r3}
 8019bcc:	469e      	mov	lr, r3
 8019bce:	4770      	bx	lr
