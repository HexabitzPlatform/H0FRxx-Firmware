
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017574  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031ec  08017630  08017630  00027630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a81c  0801a81c  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  0801a81c  0801a81c  0002a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a824  0801a824  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a824  0801a824  0002a824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a82c  0801a82c  0002a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  0801a830  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062f0  20000a58  0801b288  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006d48  0801b288  00036d48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ecc1  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000085a7  00000000  00000000  0007f741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018d8d  00000000  00000000  00087ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b18  00000000  00000000  000a0a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ea0  00000000  00000000  000a2590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000157cf  00000000  00000000  000a4430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009f10  00000000  00000000  000b9bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  000c3b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017618 	.word	0x08017618

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	08017618 	.word	0x08017618

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdbf 	bl	8001fd0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd17 	bl	8001e90 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdb1 	bl	8001fd0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fda7 	bl	8001fd0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd39 	bl	8001f08 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd2f 	bl	8001f08 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb21 	bl	8000b08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faa3 	bl	8000a1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb13 	bl	8000b08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb09 	bl	8000b08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fab1 	bl	8000a6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 faa7 	bl	8000a6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88a 	bl	8000674 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fddf 	bl	8001194 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc15 	bl	8000e0c <__aeabi_fsub>
 80005e2:	f000 fdd7 	bl	8001194 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb21 	bl	8002c4c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ffb6 	bl	8002584 <__aeabi_dsub>
 8000618:	f002 fb18 	bl	8002c4c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__aeabi_ul2f>:
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <__aeabi_ul2f+0x40>)
 800062e:	b5d0      	push	{r4, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	4299      	cmp	r1, r3
 8000634:	d906      	bls.n	8000644 <__aeabi_ul2f+0x18>
 8000636:	0543      	lsls	r3, r0, #21
 8000638:	d004      	beq.n	8000644 <__aeabi_ul2f+0x18>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0ac4      	lsrs	r4, r0, #11
 800063e:	02e4      	lsls	r4, r4, #11
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	431c      	orrs	r4, r3
 8000644:	0008      	movs	r0, r1
 8000646:	f002 fb71 	bl	8002d2c <__aeabi_ui2d>
 800064a:	2200      	movs	r2, #0
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <__aeabi_ul2f+0x44>)
 800064e:	f001 fd27 	bl	80020a0 <__aeabi_dmul>
 8000652:	0006      	movs	r6, r0
 8000654:	000f      	movs	r7, r1
 8000656:	0020      	movs	r0, r4
 8000658:	f002 fb68 	bl	8002d2c <__aeabi_ui2d>
 800065c:	0032      	movs	r2, r6
 800065e:	003b      	movs	r3, r7
 8000660:	f000 fdf8 	bl	8001254 <__aeabi_dadd>
 8000664:	f002 fbe6 	bl	8002e34 <__aeabi_d2f>
 8000668:	bdd0      	pop	{r4, r6, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	001fffff 	.word	0x001fffff
 8000670:	41f00000 	.word	0x41f00000

08000674 <__udivmoddi4>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	464f      	mov	r7, r9
 8000678:	4646      	mov	r6, r8
 800067a:	46d6      	mov	lr, sl
 800067c:	b5c0      	push	{r6, r7, lr}
 800067e:	0004      	movs	r4, r0
 8000680:	b082      	sub	sp, #8
 8000682:	000d      	movs	r5, r1
 8000684:	4691      	mov	r9, r2
 8000686:	4698      	mov	r8, r3
 8000688:	428b      	cmp	r3, r1
 800068a:	d82f      	bhi.n	80006ec <__udivmoddi4+0x78>
 800068c:	d02c      	beq.n	80006e8 <__udivmoddi4+0x74>
 800068e:	4641      	mov	r1, r8
 8000690:	4648      	mov	r0, r9
 8000692:	f002 fc71 	bl	8002f78 <__clzdi2>
 8000696:	0029      	movs	r1, r5
 8000698:	0006      	movs	r6, r0
 800069a:	0020      	movs	r0, r4
 800069c:	f002 fc6c 	bl	8002f78 <__clzdi2>
 80006a0:	1a33      	subs	r3, r6, r0
 80006a2:	469c      	mov	ip, r3
 80006a4:	3b20      	subs	r3, #32
 80006a6:	469a      	mov	sl, r3
 80006a8:	d500      	bpl.n	80006ac <__udivmoddi4+0x38>
 80006aa:	e076      	b.n	800079a <__udivmoddi4+0x126>
 80006ac:	464b      	mov	r3, r9
 80006ae:	4652      	mov	r2, sl
 80006b0:	4093      	lsls	r3, r2
 80006b2:	001f      	movs	r7, r3
 80006b4:	464b      	mov	r3, r9
 80006b6:	4662      	mov	r2, ip
 80006b8:	4093      	lsls	r3, r2
 80006ba:	001e      	movs	r6, r3
 80006bc:	42af      	cmp	r7, r5
 80006be:	d828      	bhi.n	8000712 <__udivmoddi4+0x9e>
 80006c0:	d025      	beq.n	800070e <__udivmoddi4+0x9a>
 80006c2:	4653      	mov	r3, sl
 80006c4:	1ba4      	subs	r4, r4, r6
 80006c6:	41bd      	sbcs	r5, r7
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da00      	bge.n	80006ce <__udivmoddi4+0x5a>
 80006cc:	e07b      	b.n	80007c6 <__udivmoddi4+0x152>
 80006ce:	2200      	movs	r2, #0
 80006d0:	2300      	movs	r3, #0
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4652      	mov	r2, sl
 80006da:	4093      	lsls	r3, r2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	4662      	mov	r2, ip
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	e018      	b.n	800071a <__udivmoddi4+0xa6>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	d9d0      	bls.n	800068e <__udivmoddi4+0x1a>
 80006ec:	2200      	movs	r2, #0
 80006ee:	2300      	movs	r3, #0
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <__udivmoddi4+0x8a>
 80006fa:	601c      	str	r4, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	9800      	ldr	r0, [sp, #0]
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	b002      	add	sp, #8
 8000704:	bc1c      	pop	{r2, r3, r4}
 8000706:	4690      	mov	r8, r2
 8000708:	4699      	mov	r9, r3
 800070a:	46a2      	mov	sl, r4
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	42a3      	cmp	r3, r4
 8000710:	d9d7      	bls.n	80006c2 <__udivmoddi4+0x4e>
 8000712:	2200      	movs	r2, #0
 8000714:	2300      	movs	r3, #0
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4663      	mov	r3, ip
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e9      	beq.n	80006f4 <__udivmoddi4+0x80>
 8000720:	07fb      	lsls	r3, r7, #31
 8000722:	4698      	mov	r8, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0872      	lsrs	r2, r6, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	4666      	mov	r6, ip
 800072e:	e00e      	b.n	800074e <__udivmoddi4+0xda>
 8000730:	42ab      	cmp	r3, r5
 8000732:	d101      	bne.n	8000738 <__udivmoddi4+0xc4>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d80c      	bhi.n	8000752 <__udivmoddi4+0xde>
 8000738:	1aa4      	subs	r4, r4, r2
 800073a:	419d      	sbcs	r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	1924      	adds	r4, r4, r4
 8000740:	416d      	adcs	r5, r5
 8000742:	2100      	movs	r1, #0
 8000744:	3e01      	subs	r6, #1
 8000746:	1824      	adds	r4, r4, r0
 8000748:	414d      	adcs	r5, r1
 800074a:	2e00      	cmp	r6, #0
 800074c:	d006      	beq.n	800075c <__udivmoddi4+0xe8>
 800074e:	42ab      	cmp	r3, r5
 8000750:	d9ee      	bls.n	8000730 <__udivmoddi4+0xbc>
 8000752:	3e01      	subs	r6, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2e00      	cmp	r6, #0
 800075a:	d1f8      	bne.n	800074e <__udivmoddi4+0xda>
 800075c:	9800      	ldr	r0, [sp, #0]
 800075e:	9901      	ldr	r1, [sp, #4]
 8000760:	4653      	mov	r3, sl
 8000762:	1900      	adds	r0, r0, r4
 8000764:	4169      	adcs	r1, r5
 8000766:	2b00      	cmp	r3, #0
 8000768:	db23      	blt.n	80007b2 <__udivmoddi4+0x13e>
 800076a:	002b      	movs	r3, r5
 800076c:	4652      	mov	r2, sl
 800076e:	40d3      	lsrs	r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4664      	mov	r4, ip
 8000774:	40e2      	lsrs	r2, r4
 8000776:	001c      	movs	r4, r3
 8000778:	4653      	mov	r3, sl
 800077a:	0015      	movs	r5, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	db2d      	blt.n	80007dc <__udivmoddi4+0x168>
 8000780:	0026      	movs	r6, r4
 8000782:	4657      	mov	r7, sl
 8000784:	40be      	lsls	r6, r7
 8000786:	0033      	movs	r3, r6
 8000788:	0026      	movs	r6, r4
 800078a:	4667      	mov	r7, ip
 800078c:	40be      	lsls	r6, r7
 800078e:	0032      	movs	r2, r6
 8000790:	1a80      	subs	r0, r0, r2
 8000792:	4199      	sbcs	r1, r3
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	e7ac      	b.n	80006f4 <__udivmoddi4+0x80>
 800079a:	4662      	mov	r2, ip
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	464a      	mov	r2, r9
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	4661      	mov	r1, ip
 80007a6:	0013      	movs	r3, r2
 80007a8:	4642      	mov	r2, r8
 80007aa:	408a      	lsls	r2, r1
 80007ac:	0017      	movs	r7, r2
 80007ae:	431f      	orrs	r7, r3
 80007b0:	e780      	b.n	80006b4 <__udivmoddi4+0x40>
 80007b2:	4662      	mov	r2, ip
 80007b4:	2320      	movs	r3, #32
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	4666      	mov	r6, ip
 80007bc:	409a      	lsls	r2, r3
 80007be:	0023      	movs	r3, r4
 80007c0:	40f3      	lsrs	r3, r6
 80007c2:	4313      	orrs	r3, r2
 80007c4:	e7d4      	b.n	8000770 <__udivmoddi4+0xfc>
 80007c6:	4662      	mov	r2, ip
 80007c8:	2320      	movs	r3, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	9100      	str	r1, [sp, #0]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	e780      	b.n	80006de <__udivmoddi4+0x6a>
 80007dc:	2320      	movs	r3, #32
 80007de:	4662      	mov	r2, ip
 80007e0:	0026      	movs	r6, r4
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	40de      	lsrs	r6, r3
 80007e6:	002f      	movs	r7, r5
 80007e8:	46b0      	mov	r8, r6
 80007ea:	4666      	mov	r6, ip
 80007ec:	40b7      	lsls	r7, r6
 80007ee:	4646      	mov	r6, r8
 80007f0:	003b      	movs	r3, r7
 80007f2:	4333      	orrs	r3, r6
 80007f4:	e7c8      	b.n	8000788 <__udivmoddi4+0x114>
 80007f6:	46c0      	nop			; (mov r8, r8)

080007f8 <__aeabi_fdiv>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	4657      	mov	r7, sl
 80007fc:	464e      	mov	r6, r9
 80007fe:	4645      	mov	r5, r8
 8000800:	46de      	mov	lr, fp
 8000802:	0244      	lsls	r4, r0, #9
 8000804:	b5e0      	push	{r5, r6, r7, lr}
 8000806:	0046      	lsls	r6, r0, #1
 8000808:	4688      	mov	r8, r1
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	0e36      	lsrs	r6, r6, #24
 800080e:	0fc7      	lsrs	r7, r0, #31
 8000810:	2e00      	cmp	r6, #0
 8000812:	d063      	beq.n	80008dc <__aeabi_fdiv+0xe4>
 8000814:	2eff      	cmp	r6, #255	; 0xff
 8000816:	d024      	beq.n	8000862 <__aeabi_fdiv+0x6a>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	00e4      	lsls	r4, r4, #3
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431c      	orrs	r4, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4699      	mov	r9, r3
 8000824:	469b      	mov	fp, r3
 8000826:	3e7f      	subs	r6, #127	; 0x7f
 8000828:	4643      	mov	r3, r8
 800082a:	4642      	mov	r2, r8
 800082c:	025d      	lsls	r5, r3, #9
 800082e:	0fd2      	lsrs	r2, r2, #31
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e1b      	lsrs	r3, r3, #24
 8000836:	4690      	mov	r8, r2
 8000838:	4692      	mov	sl, r2
 800083a:	d065      	beq.n	8000908 <__aeabi_fdiv+0x110>
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d055      	beq.n	80008ec <__aeabi_fdiv+0xf4>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	2100      	movs	r1, #0
 8000844:	00ed      	lsls	r5, r5, #3
 8000846:	04d2      	lsls	r2, r2, #19
 8000848:	3b7f      	subs	r3, #127	; 0x7f
 800084a:	4315      	orrs	r5, r2
 800084c:	1af6      	subs	r6, r6, r3
 800084e:	4643      	mov	r3, r8
 8000850:	464a      	mov	r2, r9
 8000852:	407b      	eors	r3, r7
 8000854:	2a0f      	cmp	r2, #15
 8000856:	d900      	bls.n	800085a <__aeabi_fdiv+0x62>
 8000858:	e08d      	b.n	8000976 <__aeabi_fdiv+0x17e>
 800085a:	486d      	ldr	r0, [pc, #436]	; (8000a10 <__aeabi_fdiv+0x218>)
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	5882      	ldr	r2, [r0, r2]
 8000860:	4697      	mov	pc, r2
 8000862:	2c00      	cmp	r4, #0
 8000864:	d154      	bne.n	8000910 <__aeabi_fdiv+0x118>
 8000866:	2308      	movs	r3, #8
 8000868:	4699      	mov	r9, r3
 800086a:	3b06      	subs	r3, #6
 800086c:	26ff      	movs	r6, #255	; 0xff
 800086e:	469b      	mov	fp, r3
 8000870:	e7da      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000872:	2500      	movs	r5, #0
 8000874:	4653      	mov	r3, sl
 8000876:	2902      	cmp	r1, #2
 8000878:	d01b      	beq.n	80008b2 <__aeabi_fdiv+0xba>
 800087a:	2903      	cmp	r1, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fdiv+0x88>
 800087e:	e0bf      	b.n	8000a00 <__aeabi_fdiv+0x208>
 8000880:	2901      	cmp	r1, #1
 8000882:	d028      	beq.n	80008d6 <__aeabi_fdiv+0xde>
 8000884:	0030      	movs	r0, r6
 8000886:	307f      	adds	r0, #127	; 0x7f
 8000888:	2800      	cmp	r0, #0
 800088a:	dd20      	ble.n	80008ce <__aeabi_fdiv+0xd6>
 800088c:	076a      	lsls	r2, r5, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000890:	220f      	movs	r2, #15
 8000892:	402a      	ands	r2, r5
 8000894:	2a04      	cmp	r2, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000898:	3504      	adds	r5, #4
 800089a:	012a      	lsls	r2, r5, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fdiv+0xae>
 800089e:	0030      	movs	r0, r6
 80008a0:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <__aeabi_fdiv+0x21c>)
 80008a2:	3080      	adds	r0, #128	; 0x80
 80008a4:	4015      	ands	r5, r2
 80008a6:	28fe      	cmp	r0, #254	; 0xfe
 80008a8:	dc03      	bgt.n	80008b2 <__aeabi_fdiv+0xba>
 80008aa:	01ac      	lsls	r4, r5, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2c2      	uxtb	r2, r0
 80008b0:	e001      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2400      	movs	r4, #0
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	05d2      	lsls	r2, r2, #23
 80008ba:	0a60      	lsrs	r0, r4, #9
 80008bc:	07db      	lsls	r3, r3, #31
 80008be:	4310      	orrs	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	bc3c      	pop	{r2, r3, r4, r5}
 80008c4:	4690      	mov	r8, r2
 80008c6:	4699      	mov	r9, r3
 80008c8:	46a2      	mov	sl, r4
 80008ca:	46ab      	mov	fp, r5
 80008cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ce:	2201      	movs	r2, #1
 80008d0:	1a10      	subs	r0, r2, r0
 80008d2:	281b      	cmp	r0, #27
 80008d4:	dd7c      	ble.n	80009d0 <__aeabi_fdiv+0x1d8>
 80008d6:	2200      	movs	r2, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	e7ec      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d11d      	bne.n	800091c <__aeabi_fdiv+0x124>
 80008e0:	2304      	movs	r3, #4
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b03      	subs	r3, #3
 80008e6:	2600      	movs	r6, #0
 80008e8:	469b      	mov	fp, r3
 80008ea:	e79d      	b.n	8000828 <__aeabi_fdiv+0x30>
 80008ec:	3eff      	subs	r6, #255	; 0xff
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d120      	bne.n	8000934 <__aeabi_fdiv+0x13c>
 80008f2:	2102      	movs	r1, #2
 80008f4:	4643      	mov	r3, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	407b      	eors	r3, r7
 80008fa:	430a      	orrs	r2, r1
 80008fc:	2a0f      	cmp	r2, #15
 80008fe:	d8d8      	bhi.n	80008b2 <__aeabi_fdiv+0xba>
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <__aeabi_fdiv+0x220>)
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	5882      	ldr	r2, [r0, r2]
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d119      	bne.n	8000940 <__aeabi_fdiv+0x148>
 800090c:	2101      	movs	r1, #1
 800090e:	e7f1      	b.n	80008f4 <__aeabi_fdiv+0xfc>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	26ff      	movs	r6, #255	; 0xff
 8000918:	469b      	mov	fp, r3
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x30>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 fb0d 	bl	8002f3c <__clzsi2>
 8000922:	2676      	movs	r6, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	4276      	negs	r6, r6
 800092c:	1a36      	subs	r6, r6, r0
 800092e:	4699      	mov	r9, r3
 8000930:	469b      	mov	fp, r3
 8000932:	e779      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000934:	464a      	mov	r2, r9
 8000936:	2303      	movs	r3, #3
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2103      	movs	r1, #3
 800093e:	e786      	b.n	800084e <__aeabi_fdiv+0x56>
 8000940:	0028      	movs	r0, r5
 8000942:	f002 fafb 	bl	8002f3c <__clzsi2>
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	1836      	adds	r6, r6, r0
 800094a:	409d      	lsls	r5, r3
 800094c:	3676      	adds	r6, #118	; 0x76
 800094e:	2100      	movs	r1, #0
 8000950:	e77d      	b.n	800084e <__aeabi_fdiv+0x56>
 8000952:	2480      	movs	r4, #128	; 0x80
 8000954:	2300      	movs	r3, #0
 8000956:	03e4      	lsls	r4, r4, #15
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	e7ac      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 800095c:	2500      	movs	r5, #0
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	03db      	lsls	r3, r3, #15
 8000962:	421c      	tst	r4, r3
 8000964:	d028      	beq.n	80009b8 <__aeabi_fdiv+0x1c0>
 8000966:	421d      	tst	r5, r3
 8000968:	d126      	bne.n	80009b8 <__aeabi_fdiv+0x1c0>
 800096a:	432b      	orrs	r3, r5
 800096c:	025c      	lsls	r4, r3, #9
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	4643      	mov	r3, r8
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e79f      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000976:	0162      	lsls	r2, r4, #5
 8000978:	016c      	lsls	r4, r5, #5
 800097a:	42a2      	cmp	r2, r4
 800097c:	d224      	bcs.n	80009c8 <__aeabi_fdiv+0x1d0>
 800097e:	211b      	movs	r1, #27
 8000980:	2500      	movs	r5, #0
 8000982:	3e01      	subs	r6, #1
 8000984:	2701      	movs	r7, #1
 8000986:	0010      	movs	r0, r2
 8000988:	006d      	lsls	r5, r5, #1
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	2800      	cmp	r0, #0
 800098e:	db01      	blt.n	8000994 <__aeabi_fdiv+0x19c>
 8000990:	4294      	cmp	r4, r2
 8000992:	d801      	bhi.n	8000998 <__aeabi_fdiv+0x1a0>
 8000994:	1b12      	subs	r2, r2, r4
 8000996:	433d      	orrs	r5, r7
 8000998:	3901      	subs	r1, #1
 800099a:	2900      	cmp	r1, #0
 800099c:	d1f3      	bne.n	8000986 <__aeabi_fdiv+0x18e>
 800099e:	0014      	movs	r4, r2
 80009a0:	1e62      	subs	r2, r4, #1
 80009a2:	4194      	sbcs	r4, r2
 80009a4:	4325      	orrs	r5, r4
 80009a6:	e76d      	b.n	8000884 <__aeabi_fdiv+0x8c>
 80009a8:	46ba      	mov	sl, r7
 80009aa:	4659      	mov	r1, fp
 80009ac:	0025      	movs	r5, r4
 80009ae:	4653      	mov	r3, sl
 80009b0:	2902      	cmp	r1, #2
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x1be>
 80009b4:	e761      	b.n	800087a <__aeabi_fdiv+0x82>
 80009b6:	e77c      	b.n	80008b2 <__aeabi_fdiv+0xba>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	431c      	orrs	r4, r3
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	003b      	movs	r3, r7
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	e776      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009c8:	1b12      	subs	r2, r2, r4
 80009ca:	211a      	movs	r1, #26
 80009cc:	2501      	movs	r5, #1
 80009ce:	e7d9      	b.n	8000984 <__aeabi_fdiv+0x18c>
 80009d0:	369e      	adds	r6, #158	; 0x9e
 80009d2:	002a      	movs	r2, r5
 80009d4:	40b5      	lsls	r5, r6
 80009d6:	002c      	movs	r4, r5
 80009d8:	40c2      	lsrs	r2, r0
 80009da:	1e65      	subs	r5, r4, #1
 80009dc:	41ac      	sbcs	r4, r5
 80009de:	4314      	orrs	r4, r2
 80009e0:	0762      	lsls	r2, r4, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009e4:	220f      	movs	r2, #15
 80009e6:	4022      	ands	r2, r4
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009ec:	3404      	adds	r4, #4
 80009ee:	0162      	lsls	r2, r4, #5
 80009f0:	d403      	bmi.n	80009fa <__aeabi_fdiv+0x202>
 80009f2:	01a4      	lsls	r4, r4, #6
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	2200      	movs	r2, #0
 80009f8:	e75d      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009fa:	2201      	movs	r2, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	e75a      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	03e4      	lsls	r4, r4, #15
 8000a04:	432c      	orrs	r4, r5
 8000a06:	0264      	lsls	r4, r4, #9
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	e753      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	08017664 	.word	0x08017664
 8000a14:	f7ffffff 	.word	0xf7ffffff
 8000a18:	080176a4 	.word	0x080176a4

08000a1c <__eqsf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	024e      	lsls	r6, r1, #9
 8000a22:	004c      	lsls	r4, r1, #1
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc9      	lsrs	r1, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00f      	beq.n	8000a56 <__eqsf2+0x3a>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d011      	beq.n	8000a5e <__eqsf2+0x42>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	d000      	beq.n	8000a42 <__eqsf2+0x26>
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d1fc      	bne.n	8000a40 <__eqsf2+0x24>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d00d      	beq.n	8000a66 <__eqsf2+0x4a>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f8      	bne.n	8000a40 <__eqsf2+0x24>
 8000a4e:	0028      	movs	r0, r5
 8000a50:	1e45      	subs	r5, r0, #1
 8000a52:	41a8      	sbcs	r0, r5
 8000a54:	e7f4      	b.n	8000a40 <__eqsf2+0x24>
 8000a56:	2001      	movs	r0, #1
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d1f1      	bne.n	8000a40 <__eqsf2+0x24>
 8000a5c:	e7eb      	b.n	8000a36 <__eqsf2+0x1a>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d1ed      	bne.n	8000a40 <__eqsf2+0x24>
 8000a64:	e7e9      	b.n	8000a3a <__eqsf2+0x1e>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7ea      	b.n	8000a40 <__eqsf2+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)

08000a6c <__gesf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	004a      	lsls	r2, r1, #1
 8000a70:	024e      	lsls	r6, r1, #9
 8000a72:	0245      	lsls	r5, r0, #9
 8000a74:	0044      	lsls	r4, r0, #1
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc3      	lsrs	r3, r0, #31
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2cff      	cmp	r4, #255	; 0xff
 8000a84:	d015      	beq.n	8000ab2 <__gesf2+0x46>
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__gesf2+0x3c>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d115      	bne.n	8000aba <__gesf2+0x4e>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d101      	bne.n	8000a96 <__gesf2+0x2a>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d01c      	beq.n	8000ad0 <__gesf2+0x64>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d014      	beq.n	8000ac4 <__gesf2+0x58>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d027      	beq.n	8000aee <__gesf2+0x82>
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0ee      	beq.n	8000a8a <__gesf2+0x1e>
 8000aac:	2002      	movs	r0, #2
 8000aae:	4240      	negs	r0, r0
 8000ab0:	e7f9      	b.n	8000aa6 <__gesf2+0x3a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fa      	bne.n	8000aac <__gesf2+0x40>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00e      	beq.n	8000ad8 <__gesf2+0x6c>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d10e      	bne.n	8000adc <__gesf2+0x70>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0ed      	beq.n	8000a9e <__gesf2+0x32>
 8000ac2:	e00b      	b.n	8000adc <__gesf2+0x70>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	3901      	subs	r1, #1
 8000ac8:	4399      	bics	r1, r3
 8000aca:	0008      	movs	r0, r1
 8000acc:	3001      	adds	r0, #1
 8000ace:	e7ea      	b.n	8000aa6 <__gesf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e7      	beq.n	8000aa6 <__gesf2+0x3a>
 8000ad6:	e7e2      	b.n	8000a9e <__gesf2+0x32>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1e7      	bne.n	8000aac <__gesf2+0x40>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1de      	bne.n	8000a9e <__gesf2+0x32>
 8000ae0:	4294      	cmp	r4, r2
 8000ae2:	dd05      	ble.n	8000af0 <__gesf2+0x84>
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4008      	ands	r0, r1
 8000aea:	3801      	subs	r0, #1
 8000aec:	e7db      	b.n	8000aa6 <__gesf2+0x3a>
 8000aee:	2400      	movs	r4, #0
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	dc04      	bgt.n	8000afe <__gesf2+0x92>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d8d2      	bhi.n	8000a9e <__gesf2+0x32>
 8000af8:	2000      	movs	r0, #0
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d2d3      	bcs.n	8000aa6 <__gesf2+0x3a>
 8000afe:	1e58      	subs	r0, r3, #1
 8000b00:	2301      	movs	r3, #1
 8000b02:	4398      	bics	r0, r3
 8000b04:	3001      	adds	r0, #1
 8000b06:	e7ce      	b.n	8000aa6 <__gesf2+0x3a>

08000b08 <__lesf2>:
 8000b08:	b530      	push	{r4, r5, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0244      	lsls	r4, r0, #9
 8000b0e:	024d      	lsls	r5, r1, #9
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e00      	lsrs	r0, r0, #24
 8000b1c:	0fc9      	lsrs	r1, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x40>
 8000b22:	28ff      	cmp	r0, #255	; 0xff
 8000b24:	d00c      	beq.n	8000b40 <__lesf2+0x38>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d112      	bne.n	8000b50 <__lesf2+0x48>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d119      	bne.n	8000b62 <__lesf2+0x5a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__lesf2+0x5a>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d02b      	beq.n	8000b8e <__lesf2+0x86>
 8000b36:	2002      	movs	r0, #2
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4018      	ands	r0, r3
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	e026      	b.n	8000b8e <__lesf2+0x86>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d0f0      	beq.n	8000b26 <__lesf2+0x1e>
 8000b44:	2002      	movs	r0, #2
 8000b46:	e022      	b.n	8000b8e <__lesf2+0x86>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d1fb      	bne.n	8000b44 <__lesf2+0x3c>
 8000b4c:	28ff      	cmp	r0, #255	; 0xff
 8000b4e:	d01f      	beq.n	8000b90 <__lesf2+0x88>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d11f      	bne.n	8000b94 <__lesf2+0x8c>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d11d      	bne.n	8000b94 <__lesf2+0x8c>
 8000b58:	2002      	movs	r0, #2
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4018      	ands	r0, r3
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e015      	b.n	8000b8e <__lesf2+0x86>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d00e      	beq.n	8000b84 <__lesf2+0x7c>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d1e5      	bne.n	8000b36 <__lesf2+0x2e>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	dc04      	bgt.n	8000b7a <__lesf2+0x72>
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d8e0      	bhi.n	8000b36 <__lesf2+0x2e>
 8000b74:	2000      	movs	r0, #0
 8000b76:	42ac      	cmp	r4, r5
 8000b78:	d209      	bcs.n	8000b8e <__lesf2+0x86>
 8000b7a:	1e58      	subs	r0, r3, #1
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4398      	bics	r0, r3
 8000b80:	3001      	adds	r0, #1
 8000b82:	e004      	b.n	8000b8e <__lesf2+0x86>
 8000b84:	2301      	movs	r3, #1
 8000b86:	3901      	subs	r1, #1
 8000b88:	4399      	bics	r1, r3
 8000b8a:	0008      	movs	r0, r1
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	bd30      	pop	{r4, r5, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1d7      	bne.n	8000b44 <__lesf2+0x3c>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d1ce      	bne.n	8000b36 <__lesf2+0x2e>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	dde7      	ble.n	8000b6c <__lesf2+0x64>
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	1e58      	subs	r0, r3, #1
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7f3      	b.n	8000b8e <__lesf2+0x86>
 8000ba6:	46c0      	nop			; (mov r8, r8)

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	464e      	mov	r6, r9
 8000bac:	4657      	mov	r7, sl
 8000bae:	4645      	mov	r5, r8
 8000bb0:	46de      	mov	lr, fp
 8000bb2:	b5e0      	push	{r5, r6, r7, lr}
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0045      	lsls	r5, r0, #1
 8000bba:	b083      	sub	sp, #12
 8000bbc:	1c0f      	adds	r7, r1, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	0e2d      	lsrs	r5, r5, #24
 8000bc2:	0fc6      	lsrs	r6, r0, #31
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d057      	beq.n	8000c78 <__aeabi_fmul+0xd0>
 8000bc8:	2dff      	cmp	r5, #255	; 0xff
 8000bca:	d024      	beq.n	8000c16 <__aeabi_fmul+0x6e>
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	04c0      	lsls	r0, r0, #19
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4681      	mov	r9, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	469b      	mov	fp, r3
 8000bdc:	3d7f      	subs	r5, #127	; 0x7f
 8000bde:	027c      	lsls	r4, r7, #9
 8000be0:	007a      	lsls	r2, r7, #1
 8000be2:	0ffb      	lsrs	r3, r7, #31
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d023      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000bec:	2aff      	cmp	r2, #255	; 0xff
 8000bee:	d04b      	beq.n	8000c88 <__aeabi_fmul+0xe0>
 8000bf0:	00e3      	lsls	r3, r4, #3
 8000bf2:	2480      	movs	r4, #128	; 0x80
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	04e4      	lsls	r4, r4, #19
 8000bf8:	3a7f      	subs	r2, #127	; 0x7f
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	18ad      	adds	r5, r5, r2
 8000bfe:	1c6b      	adds	r3, r5, #1
 8000c00:	4647      	mov	r7, r8
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4653      	mov	r3, sl
 8000c06:	4077      	eors	r7, r6
 8000c08:	003a      	movs	r2, r7
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d848      	bhi.n	8000ca0 <__aeabi_fmul+0xf8>
 8000c0e:	497d      	ldr	r1, [pc, #500]	; (8000e04 <__aeabi_fmul+0x25c>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	58cb      	ldr	r3, [r1, r3]
 8000c14:	469f      	mov	pc, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fmul+0x74>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fmul+0x180>
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b06      	subs	r3, #6
 8000c22:	469b      	mov	fp, r3
 8000c24:	027c      	lsls	r4, r7, #9
 8000c26:	007a      	lsls	r2, r7, #1
 8000c28:	0ffb      	lsrs	r3, r7, #31
 8000c2a:	25ff      	movs	r5, #255	; 0xff
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	4698      	mov	r8, r3
 8000c32:	d1db      	bne.n	8000bec <__aeabi_fmul+0x44>
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fmul+0x92>
 8000c38:	e090      	b.n	8000d5c <__aeabi_fmul+0x1b4>
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4692      	mov	sl, r2
 8000c42:	2001      	movs	r0, #1
 8000c44:	e7db      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c46:	464c      	mov	r4, r9
 8000c48:	4658      	mov	r0, fp
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d024      	beq.n	8000c9a <__aeabi_fmul+0xf2>
 8000c50:	2803      	cmp	r0, #3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0xae>
 8000c54:	e0cf      	b.n	8000df6 <__aeabi_fmul+0x24e>
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2801      	cmp	r0, #1
 8000c5c:	d14d      	bne.n	8000cfa <__aeabi_fmul+0x152>
 8000c5e:	0258      	lsls	r0, r3, #9
 8000c60:	05d2      	lsls	r2, r2, #23
 8000c62:	0a40      	lsrs	r0, r0, #9
 8000c64:	07ff      	lsls	r7, r7, #31
 8000c66:	4310      	orrs	r0, r2
 8000c68:	4338      	orrs	r0, r7
 8000c6a:	b003      	add	sp, #12
 8000c6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4699      	mov	r9, r3
 8000c72:	46a2      	mov	sl, r4
 8000c74:	46ab      	mov	fp, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d15b      	bne.n	8000d34 <__aeabi_fmul+0x18c>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7aa      	b.n	8000bde <__aeabi_fmul+0x36>
 8000c88:	35ff      	adds	r5, #255	; 0xff
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d160      	bne.n	8000d50 <__aeabi_fmul+0x1a8>
 8000c8e:	4652      	mov	r2, sl
 8000c90:	2302      	movs	r3, #2
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4692      	mov	sl, r2
 8000c96:	2002      	movs	r0, #2
 8000c98:	e7b1      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7de      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	0426      	lsls	r6, r4, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0418      	lsls	r0, r3, #16
 8000cae:	4661      	mov	r1, ip
 8000cb0:	0033      	movs	r3, r6
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	4343      	muls	r3, r0
 8000cba:	434e      	muls	r6, r1
 8000cbc:	4350      	muls	r0, r2
 8000cbe:	4354      	muls	r4, r2
 8000cc0:	1980      	adds	r0, r0, r6
 8000cc2:	0c1a      	lsrs	r2, r3, #16
 8000cc4:	1812      	adds	r2, r2, r0
 8000cc6:	4296      	cmp	r6, r2
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0x12a>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	0410      	lsls	r0, r2, #16
 8000cd8:	18c0      	adds	r0, r0, r3
 8000cda:	0183      	lsls	r3, r0, #6
 8000cdc:	1e5e      	subs	r6, r3, #1
 8000cde:	41b3      	sbcs	r3, r6
 8000ce0:	0e80      	lsrs	r0, r0, #26
 8000ce2:	4318      	orrs	r0, r3
 8000ce4:	0c13      	lsrs	r3, r2, #16
 8000ce6:	191b      	adds	r3, r3, r4
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	4303      	orrs	r3, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d579      	bpl.n	8000de6 <__aeabi_fmul+0x23e>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	0862      	lsrs	r2, r4, #1
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	327f      	adds	r2, #127	; 0x7f
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	dd4d      	ble.n	8000d9e <__aeabi_fmul+0x1f6>
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0123      	lsls	r3, r4, #4
 8000d12:	d503      	bpl.n	8000d1c <__aeabi_fmul+0x174>
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <__aeabi_fmul+0x260>)
 8000d16:	9a01      	ldr	r2, [sp, #4]
 8000d18:	401c      	ands	r4, r3
 8000d1a:	3280      	adds	r2, #128	; 0x80
 8000d1c:	2afe      	cmp	r2, #254	; 0xfe
 8000d1e:	dcbc      	bgt.n	8000c9a <__aeabi_fmul+0xf2>
 8000d20:	01a3      	lsls	r3, r4, #6
 8000d22:	0a5b      	lsrs	r3, r3, #9
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	e79a      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	469b      	mov	fp, r3
 8000d32:	e754      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 f901 	bl	8002f3c <__clzsi2>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	2576      	movs	r5, #118	; 0x76
 8000d40:	409a      	lsls	r2, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	426d      	negs	r5, r5
 8000d46:	4691      	mov	r9, r2
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	e746      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d50:	4652      	mov	r2, sl
 8000d52:	2303      	movs	r3, #3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4692      	mov	sl, r2
 8000d58:	2003      	movs	r0, #3
 8000d5a:	e750      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f8ed 	bl	8002f3c <__clzsi2>
 8000d62:	1f43      	subs	r3, r0, #5
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	409c      	lsls	r4, r3
 8000d68:	3d76      	subs	r5, #118	; 0x76
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e747      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	2700      	movs	r7, #0
 8000d72:	03db      	lsls	r3, r3, #15
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	e772      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	e766      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	0032      	movs	r2, r6
 8000d80:	4658      	mov	r0, fp
 8000d82:	e762      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	464a      	mov	r2, r9
 8000d88:	03db      	lsls	r3, r3, #15
 8000d8a:	421a      	tst	r2, r3
 8000d8c:	d022      	beq.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d8e:	421c      	tst	r4, r3
 8000d90:	d120      	bne.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d92:	4323      	orrs	r3, r4
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	4647      	mov	r7, r8
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e75f      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	1a9a      	subs	r2, r3, r2
 8000da2:	2a1b      	cmp	r2, #27
 8000da4:	dc21      	bgt.n	8000dea <__aeabi_fmul+0x242>
 8000da6:	0023      	movs	r3, r4
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	319e      	adds	r1, #158	; 0x9e
 8000dae:	408c      	lsls	r4, r1
 8000db0:	001a      	movs	r2, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	1e5c      	subs	r4, r3, #1
 8000db6:	41a3      	sbcs	r3, r4
 8000db8:	4313      	orrs	r3, r2
 8000dba:	075a      	lsls	r2, r3, #29
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	015a      	lsls	r2, r3, #5
 8000dca:	d411      	bmi.n	8000df0 <__aeabi_fmul+0x248>
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e744      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0037      	movs	r7, r6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	e73b      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000de6:	9501      	str	r5, [sp, #4]
 8000de8:	e787      	b.n	8000cfa <__aeabi_fmul+0x152>
 8000dea:	2200      	movs	r2, #0
 8000dec:	2300      	movs	r3, #0
 8000dee:	e736      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2300      	movs	r3, #0
 8000df4:	e733      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	03db      	lsls	r3, r3, #15
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	0a5b      	lsrs	r3, r3, #9
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e72c      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000e04:	080176e4 	.word	0x080176e4
 8000e08:	f7ffffff 	.word	0xf7ffffff

08000e0c <__aeabi_fsub>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	4647      	mov	r7, r8
 8000e10:	46ce      	mov	lr, r9
 8000e12:	0044      	lsls	r4, r0, #1
 8000e14:	0fc2      	lsrs	r2, r0, #31
 8000e16:	b580      	push	{r7, lr}
 8000e18:	0247      	lsls	r7, r0, #9
 8000e1a:	0248      	lsls	r0, r1, #9
 8000e1c:	0a40      	lsrs	r0, r0, #9
 8000e1e:	4684      	mov	ip, r0
 8000e20:	4666      	mov	r6, ip
 8000e22:	0048      	lsls	r0, r1, #1
 8000e24:	0a7f      	lsrs	r7, r7, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	00f6      	lsls	r6, r6, #3
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	00fb      	lsls	r3, r7, #3
 8000e30:	0e00      	lsrs	r0, r0, #24
 8000e32:	0fc9      	lsrs	r1, r1, #31
 8000e34:	46b1      	mov	r9, r6
 8000e36:	28ff      	cmp	r0, #255	; 0xff
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x30>
 8000e3a:	e085      	b.n	8000f48 <__aeabi_fsub+0x13c>
 8000e3c:	2601      	movs	r6, #1
 8000e3e:	4071      	eors	r1, r6
 8000e40:	1a26      	subs	r6, r4, r0
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d057      	beq.n	8000ef6 <__aeabi_fsub+0xea>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	dd43      	ble.n	8000ed2 <__aeabi_fsub+0xc6>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x44>
 8000e4e:	e07f      	b.n	8000f50 <__aeabi_fsub+0x144>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x4c>
 8000e56:	e0aa      	b.n	8000fae <__aeabi_fsub+0x1a2>
 8000e58:	3e01      	subs	r6, #1
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x54>
 8000e5e:	e0f7      	b.n	8001050 <__aeabi_fsub+0x244>
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x5c>
 8000e66:	e08b      	b.n	8000f80 <__aeabi_fsub+0x174>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	099c      	lsrs	r4, r3, #6
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	f002 f865 	bl	8002f3c <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4084      	lsls	r4, r0
 8000e76:	4285      	cmp	r5, r0
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fsub+0x70>
 8000e7a:	e0d3      	b.n	8001024 <__aeabi_fsub+0x218>
 8000e7c:	1b45      	subs	r5, r0, r5
 8000e7e:	0023      	movs	r3, r4
 8000e80:	2020      	movs	r0, #32
 8000e82:	3501      	adds	r5, #1
 8000e84:	40eb      	lsrs	r3, r5
 8000e86:	1b45      	subs	r5, r0, r5
 8000e88:	40ac      	lsls	r4, r5
 8000e8a:	1e62      	subs	r2, r4, #1
 8000e8c:	4194      	sbcs	r4, r2
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2407      	movs	r4, #7
 8000e92:	2500      	movs	r5, #0
 8000e94:	401c      	ands	r4, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	4641      	mov	r1, r8
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	0159      	lsls	r1, r3, #5
 8000eac:	d400      	bmi.n	8000eb0 <__aeabi_fsub+0xa4>
 8000eae:	e080      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	b2ec      	uxtb	r4, r5
 8000eb4:	2dff      	cmp	r5, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xae>
 8000eb8:	e0a3      	b.n	8001002 <__aeabi_fsub+0x1f6>
 8000eba:	24ff      	movs	r4, #255	; 0xff
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	05e4      	lsls	r4, r4, #23
 8000ec2:	0a58      	lsrs	r0, r3, #9
 8000ec4:	07d2      	lsls	r2, r2, #31
 8000ec6:	4320      	orrs	r0, r4
 8000ec8:	4310      	orrs	r0, r2
 8000eca:	bc0c      	pop	{r2, r3}
 8000ecc:	4690      	mov	r8, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d174      	bne.n	8000fc0 <__aeabi_fsub+0x1b4>
 8000ed6:	1c60      	adds	r0, r4, #1
 8000ed8:	b2c0      	uxtb	r0, r0
 8000eda:	2801      	cmp	r0, #1
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_fsub+0xd4>
 8000ede:	e0a7      	b.n	8001030 <__aeabi_fsub+0x224>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	1a9c      	subs	r4, r3, r2
 8000ee4:	0162      	lsls	r2, r4, #5
 8000ee6:	d500      	bpl.n	8000eea <__aeabi_fsub+0xde>
 8000ee8:	e0b6      	b.n	8001058 <__aeabi_fsub+0x24c>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d1be      	bne.n	8000e6c <__aeabi_fsub+0x60>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e7e3      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_fsub+0xf0>
 8000efa:	e085      	b.n	8001008 <__aeabi_fsub+0x1fc>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d046      	beq.n	8000f8e <__aeabi_fsub+0x182>
 8000f00:	2cff      	cmp	r4, #255	; 0xff
 8000f02:	d049      	beq.n	8000f98 <__aeabi_fsub+0x18c>
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	4648      	mov	r0, r9
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2e1b      	cmp	r6, #27
 8000f12:	dc09      	bgt.n	8000f28 <__aeabi_fsub+0x11c>
 8000f14:	2020      	movs	r0, #32
 8000f16:	464c      	mov	r4, r9
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	4084      	lsls	r4, r0
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	0020      	movs	r0, r4
 8000f20:	40f2      	lsrs	r2, r6
 8000f22:	1e44      	subs	r4, r0, #1
 8000f24:	41a0      	sbcs	r0, r4
 8000f26:	4302      	orrs	r2, r0
 8000f28:	189b      	adds	r3, r3, r2
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	d528      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f2e:	3501      	adds	r5, #1
 8000f30:	2dff      	cmp	r5, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x12a>
 8000f34:	e0a8      	b.n	8001088 <__aeabi_fsub+0x27c>
 8000f36:	2201      	movs	r2, #1
 8000f38:	2407      	movs	r4, #7
 8000f3a:	4994      	ldr	r1, [pc, #592]	; (800118c <__aeabi_fsub+0x380>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	400b      	ands	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	401c      	ands	r4, r3
 8000f46:	e7a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x142>
 8000f4c:	e778      	b.n	8000e40 <__aeabi_fsub+0x34>
 8000f4e:	e775      	b.n	8000e3c <__aeabi_fsub+0x30>
 8000f50:	2cff      	cmp	r4, #255	; 0xff
 8000f52:	d054      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	4649      	mov	r1, r9
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2e1b      	cmp	r6, #27
 8000f62:	dc09      	bgt.n	8000f78 <__aeabi_fsub+0x16c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	4648      	mov	r0, r9
 8000f68:	1b89      	subs	r1, r1, r6
 8000f6a:	4088      	lsls	r0, r1
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	0001      	movs	r1, r0
 8000f70:	40f2      	lsrs	r2, r6
 8000f72:	1e48      	subs	r0, r1, #1
 8000f74:	4181      	sbcs	r1, r0
 8000f76:	430a      	orrs	r2, r1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d500      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f7e:	e773      	b.n	8000e68 <__aeabi_fsub+0x5c>
 8000f80:	2201      	movs	r2, #1
 8000f82:	4641      	mov	r1, r8
 8000f84:	400a      	ands	r2, r1
 8000f86:	0759      	lsls	r1, r3, #29
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x180>
 8000f8a:	e789      	b.n	8000ea0 <__aeabi_fsub+0x94>
 8000f8c:	e011      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f8e:	4648      	mov	r0, r9
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d158      	bne.n	8001046 <__aeabi_fsub+0x23a>
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d10c      	bne.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x194>
 8000f9e:	e78c      	b.n	8000eba <__aeabi_fsub+0xae>
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	03c0      	lsls	r0, r0, #15
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	0a5b      	lsrs	r3, r3, #9
 8000faa:	24ff      	movs	r4, #255	; 0xff
 8000fac:	e787      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fae:	2cff      	cmp	r4, #255	; 0xff
 8000fb0:	d025      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d0f0      	beq.n	8000f9a <__aeabi_fsub+0x18e>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	b2ec      	uxtb	r4, r5
 8000fbe:	e77e      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d04d      	beq.n	8001060 <__aeabi_fsub+0x254>
 8000fc4:	28ff      	cmp	r0, #255	; 0xff
 8000fc6:	d018      	beq.n	8000ffa <__aeabi_fsub+0x1ee>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	04e4      	lsls	r4, r4, #19
 8000fcc:	4272      	negs	r2, r6
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	2a1b      	cmp	r2, #27
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_fsub+0x1ca>
 8000fd4:	e0c4      	b.n	8001160 <__aeabi_fsub+0x354>
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	2520      	movs	r5, #32
 8000fda:	40d4      	lsrs	r4, r2
 8000fdc:	1aaa      	subs	r2, r5, r2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	0005      	movs	r5, r0
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4688      	mov	r8, r1
 8000fee:	e738      	b.n	8000e62 <__aeabi_fsub+0x56>
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	d0f8      	beq.n	8000fe6 <__aeabi_fsub+0x1da>
 8000ff4:	43f2      	mvns	r2, r6
 8000ff6:	28ff      	cmp	r0, #255	; 0xff
 8000ff8:	d1ea      	bne.n	8000fd0 <__aeabi_fsub+0x1c4>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	25ff      	movs	r5, #255	; 0xff
 8001000:	e7d7      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	0a5b      	lsrs	r3, r3, #9
 8001006:	e75a      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001008:	2e00      	cmp	r6, #0
 800100a:	d141      	bne.n	8001090 <__aeabi_fsub+0x284>
 800100c:	1c65      	adds	r5, r4, #1
 800100e:	b2e9      	uxtb	r1, r5
 8001010:	2901      	cmp	r1, #1
 8001012:	dd45      	ble.n	80010a0 <__aeabi_fsub+0x294>
 8001014:	2dff      	cmp	r5, #255	; 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x20e>
 8001018:	e74f      	b.n	8000eba <__aeabi_fsub+0xae>
 800101a:	2407      	movs	r4, #7
 800101c:	444b      	add	r3, r9
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	401c      	ands	r4, r3
 8001022:	e738      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001024:	2207      	movs	r2, #7
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <__aeabi_fsub+0x384>)
 8001028:	1a2d      	subs	r5, r5, r0
 800102a:	4023      	ands	r3, r4
 800102c:	4014      	ands	r4, r2
 800102e:	e732      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d11d      	bne.n	8001070 <__aeabi_fsub+0x264>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d17a      	bne.n	800112e <__aeabi_fsub+0x322>
 8001038:	464b      	mov	r3, r9
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x234>
 800103e:	e091      	b.n	8001164 <__aeabi_fsub+0x358>
 8001040:	000a      	movs	r2, r1
 8001042:	2500      	movs	r5, #0
 8001044:	e7b5      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001046:	3e01      	subs	r6, #1
 8001048:	2e00      	cmp	r6, #0
 800104a:	d119      	bne.n	8001080 <__aeabi_fsub+0x274>
 800104c:	444b      	add	r3, r9
 800104e:	e76c      	b.n	8000f2a <__aeabi_fsub+0x11e>
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d184      	bne.n	8000f5e <__aeabi_fsub+0x152>
 8001054:	25ff      	movs	r5, #255	; 0xff
 8001056:	e7ac      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001058:	464a      	mov	r2, r9
 800105a:	4688      	mov	r8, r1
 800105c:	1ad4      	subs	r4, r2, r3
 800105e:	e705      	b.n	8000e6c <__aeabi_fsub+0x60>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <__aeabi_fsub+0x1e4>
 8001064:	000a      	movs	r2, r1
 8001066:	28ff      	cmp	r0, #255	; 0xff
 8001068:	d0c8      	beq.n	8000ffc <__aeabi_fsub+0x1f0>
 800106a:	0005      	movs	r5, r0
 800106c:	464b      	mov	r3, r9
 800106e:	e7a0      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d149      	bne.n	8001108 <__aeabi_fsub+0x2fc>
 8001074:	464b      	mov	r3, r9
 8001076:	2b00      	cmp	r3, #0
 8001078:	d077      	beq.n	800116a <__aeabi_fsub+0x35e>
 800107a:	000a      	movs	r2, r1
 800107c:	25ff      	movs	r5, #255	; 0xff
 800107e:	e798      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001080:	2cff      	cmp	r4, #255	; 0xff
 8001082:	d000      	beq.n	8001086 <__aeabi_fsub+0x27a>
 8001084:	e743      	b.n	8000f0e <__aeabi_fsub+0x102>
 8001086:	e787      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001088:	000a      	movs	r2, r1
 800108a:	24ff      	movs	r4, #255	; 0xff
 800108c:	2300      	movs	r3, #0
 800108e:	e716      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d115      	bne.n	80010c0 <__aeabi_fsub+0x2b4>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d157      	bne.n	8001148 <__aeabi_fsub+0x33c>
 8001098:	28ff      	cmp	r0, #255	; 0xff
 800109a:	d1e6      	bne.n	800106a <__aeabi_fsub+0x25e>
 800109c:	464b      	mov	r3, r9
 800109e:	e77b      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d120      	bne.n	80010e6 <__aeabi_fsub+0x2da>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d057      	beq.n	8001158 <__aeabi_fsub+0x34c>
 80010a8:	4649      	mov	r1, r9
 80010aa:	2900      	cmp	r1, #0
 80010ac:	d053      	beq.n	8001156 <__aeabi_fsub+0x34a>
 80010ae:	444b      	add	r3, r9
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	d568      	bpl.n	8001186 <__aeabi_fsub+0x37a>
 80010b4:	2407      	movs	r4, #7
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <__aeabi_fsub+0x384>)
 80010b8:	401c      	ands	r4, r3
 80010ba:	2501      	movs	r5, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	e6ea      	b.n	8000e96 <__aeabi_fsub+0x8a>
 80010c0:	28ff      	cmp	r0, #255	; 0xff
 80010c2:	d0eb      	beq.n	800109c <__aeabi_fsub+0x290>
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	04d2      	lsls	r2, r2, #19
 80010c8:	4276      	negs	r6, r6
 80010ca:	4313      	orrs	r3, r2
 80010cc:	2e1b      	cmp	r6, #27
 80010ce:	dc53      	bgt.n	8001178 <__aeabi_fsub+0x36c>
 80010d0:	2520      	movs	r5, #32
 80010d2:	1bad      	subs	r5, r5, r6
 80010d4:	001a      	movs	r2, r3
 80010d6:	40ab      	lsls	r3, r5
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	1e5c      	subs	r4, r3, #1
 80010dc:	41a3      	sbcs	r3, r4
 80010de:	4313      	orrs	r3, r2
 80010e0:	444b      	add	r3, r9
 80010e2:	0005      	movs	r5, r0
 80010e4:	e721      	b.n	8000f2a <__aeabi_fsub+0x11e>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0d8      	beq.n	800109c <__aeabi_fsub+0x290>
 80010ea:	4649      	mov	r1, r9
 80010ec:	2900      	cmp	r1, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x2e6>
 80010f0:	e752      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	03c9      	lsls	r1, r1, #15
 80010f6:	420f      	tst	r7, r1
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x2f0>
 80010fa:	e74d      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010fc:	4660      	mov	r0, ip
 80010fe:	4208      	tst	r0, r1
 8001100:	d000      	beq.n	8001104 <__aeabi_fsub+0x2f8>
 8001102:	e749      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001104:	464b      	mov	r3, r9
 8001106:	e747      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001108:	4648      	mov	r0, r9
 800110a:	25ff      	movs	r5, #255	; 0xff
 800110c:	2800      	cmp	r0, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x306>
 8001110:	e74f      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	03d2      	lsls	r2, r2, #15
 8001116:	4217      	tst	r7, r2
 8001118:	d004      	beq.n	8001124 <__aeabi_fsub+0x318>
 800111a:	4660      	mov	r0, ip
 800111c:	4210      	tst	r0, r2
 800111e:	d101      	bne.n	8001124 <__aeabi_fsub+0x318>
 8001120:	464b      	mov	r3, r9
 8001122:	4688      	mov	r8, r1
 8001124:	2201      	movs	r2, #1
 8001126:	4641      	mov	r1, r8
 8001128:	25ff      	movs	r5, #255	; 0xff
 800112a:	400a      	ands	r2, r1
 800112c:	e741      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 800112e:	4648      	mov	r0, r9
 8001130:	2800      	cmp	r0, #0
 8001132:	d01f      	beq.n	8001174 <__aeabi_fsub+0x368>
 8001134:	1a1a      	subs	r2, r3, r0
 8001136:	0150      	lsls	r0, r2, #5
 8001138:	d520      	bpl.n	800117c <__aeabi_fsub+0x370>
 800113a:	464a      	mov	r2, r9
 800113c:	2407      	movs	r4, #7
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	401c      	ands	r4, r3
 8001142:	4688      	mov	r8, r1
 8001144:	2500      	movs	r5, #0
 8001146:	e6a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001148:	1c74      	adds	r4, r6, #1
 800114a:	d0c9      	beq.n	80010e0 <__aeabi_fsub+0x2d4>
 800114c:	43f6      	mvns	r6, r6
 800114e:	28ff      	cmp	r0, #255	; 0xff
 8001150:	d1bc      	bne.n	80010cc <__aeabi_fsub+0x2c0>
 8001152:	464b      	mov	r3, r9
 8001154:	e720      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001156:	4699      	mov	r9, r3
 8001158:	464b      	mov	r3, r9
 800115a:	2500      	movs	r5, #0
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	e72b      	b.n	8000fb8 <__aeabi_fsub+0x1ac>
 8001160:	2301      	movs	r3, #1
 8001162:	e740      	b.n	8000fe6 <__aeabi_fsub+0x1da>
 8001164:	2200      	movs	r2, #0
 8001166:	2300      	movs	r3, #0
 8001168:	e6a9      	b.n	8000ebe <__aeabi_fsub+0xb2>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	2200      	movs	r2, #0
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	24ff      	movs	r4, #255	; 0xff
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001174:	2500      	movs	r5, #0
 8001176:	e71c      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001178:	2301      	movs	r3, #1
 800117a:	e7b1      	b.n	80010e0 <__aeabi_fsub+0x2d4>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d0f1      	beq.n	8001164 <__aeabi_fsub+0x358>
 8001180:	0013      	movs	r3, r2
 8001182:	2500      	movs	r5, #0
 8001184:	e6fc      	b.n	8000f80 <__aeabi_fsub+0x174>
 8001186:	2500      	movs	r5, #0
 8001188:	e6fa      	b.n	8000f80 <__aeabi_fsub+0x174>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	7dffffff 	.word	0x7dffffff
 8001190:	fbffffff 	.word	0xfbffffff

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	0e12      	lsrs	r2, r2, #24
 800119e:	2000      	movs	r0, #0
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x2c>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	d80c      	bhi.n	80011c2 <__aeabi_f2iz+0x2e>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a95      	cmp	r2, #149	; 0x95
 80011b0:	dc0a      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b2:	2096      	movs	r0, #150	; 0x96
 80011b4:	1a82      	subs	r2, r0, r2
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	4248      	negs	r0, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_f2iz+0x2c>
 80011be:	0008      	movs	r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011c4:	1898      	adds	r0, r3, r2
 80011c6:	e7fb      	b.n	80011c0 <__aeabi_f2iz+0x2c>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f4      	b.n	80011b8 <__aeabi_f2iz+0x24>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_ui2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	1e04      	subs	r4, r0, #0
 80011d8:	d034      	beq.n	8001244 <__aeabi_ui2f+0x70>
 80011da:	f001 feaf 	bl	8002f3c <__clzsi2>
 80011de:	229e      	movs	r2, #158	; 0x9e
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	2a96      	cmp	r2, #150	; 0x96
 80011e4:	dc07      	bgt.n	80011f6 <__aeabi_ui2f+0x22>
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	2808      	cmp	r0, #8
 80011ea:	dd2e      	ble.n	800124a <__aeabi_ui2f+0x76>
 80011ec:	3808      	subs	r0, #8
 80011ee:	4084      	lsls	r4, r0
 80011f0:	0260      	lsls	r0, r4, #9
 80011f2:	0a40      	lsrs	r0, r0, #9
 80011f4:	e021      	b.n	800123a <__aeabi_ui2f+0x66>
 80011f6:	2a99      	cmp	r2, #153	; 0x99
 80011f8:	dd09      	ble.n	800120e <__aeabi_ui2f+0x3a>
 80011fa:	0003      	movs	r3, r0
 80011fc:	0021      	movs	r1, r4
 80011fe:	331b      	adds	r3, #27
 8001200:	4099      	lsls	r1, r3
 8001202:	1e4b      	subs	r3, r1, #1
 8001204:	4199      	sbcs	r1, r3
 8001206:	2305      	movs	r3, #5
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	40dc      	lsrs	r4, r3
 800120c:	430c      	orrs	r4, r1
 800120e:	2805      	cmp	r0, #5
 8001210:	dd01      	ble.n	8001216 <__aeabi_ui2f+0x42>
 8001212:	1f43      	subs	r3, r0, #5
 8001214:	409c      	lsls	r4, r3
 8001216:	0023      	movs	r3, r4
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <__aeabi_ui2f+0x7c>)
 800121a:	400b      	ands	r3, r1
 800121c:	0765      	lsls	r5, r4, #29
 800121e:	d009      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001220:	250f      	movs	r5, #15
 8001222:	402c      	ands	r4, r5
 8001224:	2c04      	cmp	r4, #4
 8001226:	d005      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001228:	3304      	adds	r3, #4
 800122a:	015c      	lsls	r4, r3, #5
 800122c:	d502      	bpl.n	8001234 <__aeabi_ui2f+0x60>
 800122e:	229f      	movs	r2, #159	; 0x9f
 8001230:	400b      	ands	r3, r1
 8001232:	1a12      	subs	r2, r2, r0
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	0a58      	lsrs	r0, r3, #9
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0240      	lsls	r0, r0, #9
 800123c:	05d2      	lsls	r2, r2, #23
 800123e:	0a40      	lsrs	r0, r0, #9
 8001240:	4310      	orrs	r0, r2
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	2200      	movs	r2, #0
 8001246:	2000      	movs	r0, #0
 8001248:	e7f7      	b.n	800123a <__aeabi_ui2f+0x66>
 800124a:	0260      	lsls	r0, r4, #9
 800124c:	0a40      	lsrs	r0, r0, #9
 800124e:	e7f4      	b.n	800123a <__aeabi_ui2f+0x66>
 8001250:	fbffffff 	.word	0xfbffffff

08001254 <__aeabi_dadd>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	464f      	mov	r7, r9
 8001258:	4646      	mov	r6, r8
 800125a:	46d6      	mov	lr, sl
 800125c:	000c      	movs	r4, r1
 800125e:	0309      	lsls	r1, r1, #12
 8001260:	b5c0      	push	{r6, r7, lr}
 8001262:	0a49      	lsrs	r1, r1, #9
 8001264:	0f47      	lsrs	r7, r0, #29
 8001266:	005e      	lsls	r6, r3, #1
 8001268:	4339      	orrs	r1, r7
 800126a:	031f      	lsls	r7, r3, #12
 800126c:	0fdb      	lsrs	r3, r3, #31
 800126e:	469c      	mov	ip, r3
 8001270:	0065      	lsls	r5, r4, #1
 8001272:	0a7b      	lsrs	r3, r7, #9
 8001274:	0f57      	lsrs	r7, r2, #29
 8001276:	431f      	orrs	r7, r3
 8001278:	0d6d      	lsrs	r5, r5, #21
 800127a:	0fe4      	lsrs	r4, r4, #31
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	46a1      	mov	r9, r4
 8001280:	00c0      	lsls	r0, r0, #3
 8001282:	46b8      	mov	r8, r7
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	1bab      	subs	r3, r5, r6
 8001288:	4564      	cmp	r4, ip
 800128a:	d07b      	beq.n	8001384 <__aeabi_dadd+0x130>
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd5f      	ble.n	8001350 <__aeabi_dadd+0xfc>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x42>
 8001294:	e0a4      	b.n	80013e0 <__aeabi_dadd+0x18c>
 8001296:	003e      	movs	r6, r7
 8001298:	4316      	orrs	r6, r2
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x4a>
 800129c:	e112      	b.n	80014c4 <__aeabi_dadd+0x270>
 800129e:	1e5e      	subs	r6, r3, #1
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dadd+0x52>
 80012a4:	e19e      	b.n	80015e4 <__aeabi_dadd+0x390>
 80012a6:	1a87      	subs	r7, r0, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	2501      	movs	r5, #1
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	4240      	negs	r0, r0
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	020b      	lsls	r3, r1, #8
 80012b8:	d400      	bmi.n	80012bc <__aeabi_dadd+0x68>
 80012ba:	e131      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	0a4e      	lsrs	r6, r1, #9
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x72>
 80012c4:	e16e      	b.n	80015a4 <__aeabi_dadd+0x350>
 80012c6:	0030      	movs	r0, r6
 80012c8:	f001 fe38 	bl	8002f3c <__clzsi2>
 80012cc:	0003      	movs	r3, r0
 80012ce:	3b08      	subs	r3, #8
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x82>
 80012d4:	e161      	b.n	800159a <__aeabi_dadd+0x346>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0039      	movs	r1, r7
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	409e      	lsls	r6, r3
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	409f      	lsls	r7, r3
 80012e2:	430e      	orrs	r6, r1
 80012e4:	429d      	cmp	r5, r3
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dadd+0x96>
 80012e8:	e151      	b.n	800158e <__aeabi_dadd+0x33a>
 80012ea:	1b5d      	subs	r5, r3, r5
 80012ec:	1c6b      	adds	r3, r5, #1
 80012ee:	2b1f      	cmp	r3, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0xa0>
 80012f2:	e17c      	b.n	80015ee <__aeabi_dadd+0x39a>
 80012f4:	2120      	movs	r1, #32
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	003d      	movs	r5, r7
 80012fa:	0030      	movs	r0, r6
 80012fc:	408f      	lsls	r7, r1
 80012fe:	4088      	lsls	r0, r1
 8001300:	40dd      	lsrs	r5, r3
 8001302:	1e79      	subs	r1, r7, #1
 8001304:	418f      	sbcs	r7, r1
 8001306:	0031      	movs	r1, r6
 8001308:	2207      	movs	r2, #7
 800130a:	4328      	orrs	r0, r5
 800130c:	40d9      	lsrs	r1, r3
 800130e:	2500      	movs	r5, #0
 8001310:	4307      	orrs	r7, r0
 8001312:	403a      	ands	r2, r7
 8001314:	2a00      	cmp	r2, #0
 8001316:	d009      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001318:	230f      	movs	r3, #15
 800131a:	403b      	ands	r3, r7
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	42bb      	cmp	r3, r7
 8001324:	41bf      	sbcs	r7, r7
 8001326:	427f      	negs	r7, r7
 8001328:	19c9      	adds	r1, r1, r7
 800132a:	001f      	movs	r7, r3
 800132c:	020b      	lsls	r3, r1, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0xde>
 8001330:	e226      	b.n	8001780 <__aeabi_dadd+0x52c>
 8001332:	1c6a      	adds	r2, r5, #1
 8001334:	4bc6      	ldr	r3, [pc, #792]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001336:	0555      	lsls	r5, r2, #21
 8001338:	0d6d      	lsrs	r5, r5, #21
 800133a:	429a      	cmp	r2, r3
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0xec>
 800133e:	e106      	b.n	800154e <__aeabi_dadd+0x2fa>
 8001340:	4ac4      	ldr	r2, [pc, #784]	; (8001654 <__aeabi_dadd+0x400>)
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	0252      	lsls	r2, r2, #9
 800134a:	433b      	orrs	r3, r7
 800134c:	0b12      	lsrs	r2, r2, #12
 800134e:	e08e      	b.n	800146e <__aeabi_dadd+0x21a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x102>
 8001354:	e0b8      	b.n	80014c8 <__aeabi_dadd+0x274>
 8001356:	1c6b      	adds	r3, r5, #1
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	2b01      	cmp	r3, #1
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dadd+0x10e>
 8001360:	e130      	b.n	80015c4 <__aeabi_dadd+0x370>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d500      	bpl.n	8001376 <__aeabi_dadd+0x122>
 8001374:	e14c      	b.n	8001610 <__aeabi_dadd+0x3bc>
 8001376:	003b      	movs	r3, r7
 8001378:	4333      	orrs	r3, r6
 800137a:	d1a1      	bne.n	80012c0 <__aeabi_dadd+0x6c>
 800137c:	2200      	movs	r2, #0
 800137e:	2400      	movs	r4, #0
 8001380:	2500      	movs	r5, #0
 8001382:	e070      	b.n	8001466 <__aeabi_dadd+0x212>
 8001384:	2b00      	cmp	r3, #0
 8001386:	dc00      	bgt.n	800138a <__aeabi_dadd+0x136>
 8001388:	e0e5      	b.n	8001556 <__aeabi_dadd+0x302>
 800138a:	2e00      	cmp	r6, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x13c>
 800138e:	e083      	b.n	8001498 <__aeabi_dadd+0x244>
 8001390:	4eaf      	ldr	r6, [pc, #700]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001392:	42b5      	cmp	r5, r6
 8001394:	d060      	beq.n	8001458 <__aeabi_dadd+0x204>
 8001396:	2680      	movs	r6, #128	; 0x80
 8001398:	0436      	lsls	r6, r6, #16
 800139a:	4337      	orrs	r7, r6
 800139c:	46b8      	mov	r8, r7
 800139e:	2b38      	cmp	r3, #56	; 0x38
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_dadd+0x150>
 80013a2:	e13e      	b.n	8001622 <__aeabi_dadd+0x3ce>
 80013a4:	4643      	mov	r3, r8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	001f      	movs	r7, r3
 80013aa:	1e7a      	subs	r2, r7, #1
 80013ac:	4197      	sbcs	r7, r2
 80013ae:	183f      	adds	r7, r7, r0
 80013b0:	4287      	cmp	r7, r0
 80013b2:	4180      	sbcs	r0, r0
 80013b4:	4240      	negs	r0, r0
 80013b6:	1809      	adds	r1, r1, r0
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	d400      	bmi.n	80013be <__aeabi_dadd+0x16a>
 80013bc:	e0b0      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80013be:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013c0:	3501      	adds	r5, #1
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x174>
 80013c6:	e0c3      	b.n	8001550 <__aeabi_dadd+0x2fc>
 80013c8:	4aa2      	ldr	r2, [pc, #648]	; (8001654 <__aeabi_dadd+0x400>)
 80013ca:	087b      	lsrs	r3, r7, #1
 80013cc:	400a      	ands	r2, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	400f      	ands	r7, r1
 80013d2:	431f      	orrs	r7, r3
 80013d4:	0851      	lsrs	r1, r2, #1
 80013d6:	07d3      	lsls	r3, r2, #31
 80013d8:	2207      	movs	r2, #7
 80013da:	431f      	orrs	r7, r3
 80013dc:	403a      	ands	r2, r7
 80013de:	e799      	b.n	8001314 <__aeabi_dadd+0xc0>
 80013e0:	4e9b      	ldr	r6, [pc, #620]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013e2:	42b5      	cmp	r5, r6
 80013e4:	d038      	beq.n	8001458 <__aeabi_dadd+0x204>
 80013e6:	2680      	movs	r6, #128	; 0x80
 80013e8:	0436      	lsls	r6, r6, #16
 80013ea:	4337      	orrs	r7, r6
 80013ec:	46b8      	mov	r8, r7
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x1a0>
 80013f2:	e0dc      	b.n	80015ae <__aeabi_dadd+0x35a>
 80013f4:	2b1f      	cmp	r3, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x1a6>
 80013f8:	e130      	b.n	800165c <__aeabi_dadd+0x408>
 80013fa:	001e      	movs	r6, r3
 80013fc:	4647      	mov	r7, r8
 80013fe:	3e20      	subs	r6, #32
 8001400:	40f7      	lsrs	r7, r6
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d004      	beq.n	8001412 <__aeabi_dadd+0x1be>
 8001408:	2640      	movs	r6, #64	; 0x40
 800140a:	1af3      	subs	r3, r6, r3
 800140c:	4646      	mov	r6, r8
 800140e:	409e      	lsls	r6, r3
 8001410:	4332      	orrs	r2, r6
 8001412:	0017      	movs	r7, r2
 8001414:	4663      	mov	r3, ip
 8001416:	1e7a      	subs	r2, r7, #1
 8001418:	4197      	sbcs	r7, r2
 800141a:	431f      	orrs	r7, r3
 800141c:	e0cc      	b.n	80015b8 <__aeabi_dadd+0x364>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x1d0>
 8001422:	e204      	b.n	800182e <__aeabi_dadd+0x5da>
 8001424:	4643      	mov	r3, r8
 8001426:	4313      	orrs	r3, r2
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1d8>
 800142a:	e159      	b.n	80016e0 <__aeabi_dadd+0x48c>
 800142c:	074b      	lsls	r3, r1, #29
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	4318      	orrs	r0, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4219      	tst	r1, r3
 800143a:	d008      	beq.n	800144e <__aeabi_dadd+0x1fa>
 800143c:	4645      	mov	r5, r8
 800143e:	08ed      	lsrs	r5, r5, #3
 8001440:	421d      	tst	r5, r3
 8001442:	d104      	bne.n	800144e <__aeabi_dadd+0x1fa>
 8001444:	4643      	mov	r3, r8
 8001446:	08d0      	lsrs	r0, r2, #3
 8001448:	0759      	lsls	r1, r3, #29
 800144a:	4308      	orrs	r0, r1
 800144c:	0029      	movs	r1, r5
 800144e:	0f42      	lsrs	r2, r0, #29
 8001450:	00c9      	lsls	r1, r1, #3
 8001452:	4d7f      	ldr	r5, [pc, #508]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001454:	4311      	orrs	r1, r2
 8001456:	00c0      	lsls	r0, r0, #3
 8001458:	074b      	lsls	r3, r1, #29
 800145a:	08ca      	lsrs	r2, r1, #3
 800145c:	497c      	ldr	r1, [pc, #496]	; (8001650 <__aeabi_dadd+0x3fc>)
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	4303      	orrs	r3, r0
 8001462:	428d      	cmp	r5, r1
 8001464:	d068      	beq.n	8001538 <__aeabi_dadd+0x2e4>
 8001466:	0312      	lsls	r2, r2, #12
 8001468:	056d      	lsls	r5, r5, #21
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0d6d      	lsrs	r5, r5, #21
 800146e:	2100      	movs	r1, #0
 8001470:	0312      	lsls	r2, r2, #12
 8001472:	0018      	movs	r0, r3
 8001474:	0b13      	lsrs	r3, r2, #12
 8001476:	0d0a      	lsrs	r2, r1, #20
 8001478:	0512      	lsls	r2, r2, #20
 800147a:	431a      	orrs	r2, r3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <__aeabi_dadd+0x404>)
 800147e:	052d      	lsls	r5, r5, #20
 8001480:	4013      	ands	r3, r2
 8001482:	432b      	orrs	r3, r5
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	07e4      	lsls	r4, r4, #31
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	4323      	orrs	r3, r4
 800148c:	0019      	movs	r1, r3
 800148e:	bc1c      	pop	{r2, r3, r4}
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	46a2      	mov	sl, r4
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	003e      	movs	r6, r7
 800149a:	4316      	orrs	r6, r2
 800149c:	d012      	beq.n	80014c4 <__aeabi_dadd+0x270>
 800149e:	1e5e      	subs	r6, r3, #1
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x252>
 80014a4:	e100      	b.n	80016a8 <__aeabi_dadd+0x454>
 80014a6:	1887      	adds	r7, r0, r2
 80014a8:	4287      	cmp	r7, r0
 80014aa:	4180      	sbcs	r0, r0
 80014ac:	4441      	add	r1, r8
 80014ae:	4240      	negs	r0, r0
 80014b0:	1809      	adds	r1, r1, r0
 80014b2:	2501      	movs	r5, #1
 80014b4:	020b      	lsls	r3, r1, #8
 80014b6:	d533      	bpl.n	8001520 <__aeabi_dadd+0x2cc>
 80014b8:	2502      	movs	r5, #2
 80014ba:	e785      	b.n	80013c8 <__aeabi_dadd+0x174>
 80014bc:	4664      	mov	r4, ip
 80014be:	0033      	movs	r3, r6
 80014c0:	4641      	mov	r1, r8
 80014c2:	0010      	movs	r0, r2
 80014c4:	001d      	movs	r5, r3
 80014c6:	e7c7      	b.n	8001458 <__aeabi_dadd+0x204>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x27a>
 80014cc:	e0da      	b.n	8001684 <__aeabi_dadd+0x430>
 80014ce:	000c      	movs	r4, r1
 80014d0:	4304      	orrs	r4, r0
 80014d2:	d0f3      	beq.n	80014bc <__aeabi_dadd+0x268>
 80014d4:	1c5c      	adds	r4, r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x286>
 80014d8:	e19f      	b.n	800181a <__aeabi_dadd+0x5c6>
 80014da:	4c5d      	ldr	r4, [pc, #372]	; (8001650 <__aeabi_dadd+0x3fc>)
 80014dc:	42a6      	cmp	r6, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x28e>
 80014e0:	e12f      	b.n	8001742 <__aeabi_dadd+0x4ee>
 80014e2:	43db      	mvns	r3, r3
 80014e4:	2b38      	cmp	r3, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dadd+0x296>
 80014e8:	e166      	b.n	80017b8 <__aeabi_dadd+0x564>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x29c>
 80014ee:	e183      	b.n	80017f8 <__aeabi_dadd+0x5a4>
 80014f0:	2420      	movs	r4, #32
 80014f2:	0005      	movs	r5, r0
 80014f4:	1ae4      	subs	r4, r4, r3
 80014f6:	000f      	movs	r7, r1
 80014f8:	40dd      	lsrs	r5, r3
 80014fa:	40d9      	lsrs	r1, r3
 80014fc:	40a0      	lsls	r0, r4
 80014fe:	4643      	mov	r3, r8
 8001500:	40a7      	lsls	r7, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	1e44      	subs	r4, r0, #1
 8001506:	41a0      	sbcs	r0, r4
 8001508:	4698      	mov	r8, r3
 800150a:	432f      	orrs	r7, r5
 800150c:	4338      	orrs	r0, r7
 800150e:	1a17      	subs	r7, r2, r0
 8001510:	42ba      	cmp	r2, r7
 8001512:	4192      	sbcs	r2, r2
 8001514:	4643      	mov	r3, r8
 8001516:	4252      	negs	r2, r2
 8001518:	1a99      	subs	r1, r3, r2
 800151a:	4664      	mov	r4, ip
 800151c:	0035      	movs	r5, r6
 800151e:	e6ca      	b.n	80012b6 <__aeabi_dadd+0x62>
 8001520:	2207      	movs	r2, #7
 8001522:	403a      	ands	r2, r7
 8001524:	2a00      	cmp	r2, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x2d6>
 8001528:	e6f6      	b.n	8001318 <__aeabi_dadd+0xc4>
 800152a:	074b      	lsls	r3, r1, #29
 800152c:	08ca      	lsrs	r2, r1, #3
 800152e:	4948      	ldr	r1, [pc, #288]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001530:	08ff      	lsrs	r7, r7, #3
 8001532:	433b      	orrs	r3, r7
 8001534:	428d      	cmp	r5, r1
 8001536:	d196      	bne.n	8001466 <__aeabi_dadd+0x212>
 8001538:	0019      	movs	r1, r3
 800153a:	4311      	orrs	r1, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x2ec>
 800153e:	e19e      	b.n	800187e <__aeabi_dadd+0x62a>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0309      	lsls	r1, r1, #12
 8001544:	430a      	orrs	r2, r1
 8001546:	0312      	lsls	r2, r2, #12
 8001548:	0b12      	lsrs	r2, r2, #12
 800154a:	4d41      	ldr	r5, [pc, #260]	; (8001650 <__aeabi_dadd+0x3fc>)
 800154c:	e78f      	b.n	800146e <__aeabi_dadd+0x21a>
 800154e:	0015      	movs	r5, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2300      	movs	r3, #0
 8001554:	e78b      	b.n	800146e <__aeabi_dadd+0x21a>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x308>
 800155a:	e0c7      	b.n	80016ec <__aeabi_dadd+0x498>
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	055f      	lsls	r7, r3, #21
 8001560:	0d7f      	lsrs	r7, r7, #21
 8001562:	2f01      	cmp	r7, #1
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x314>
 8001566:	e0f1      	b.n	800174c <__aeabi_dadd+0x4f8>
 8001568:	4d39      	ldr	r5, [pc, #228]	; (8001650 <__aeabi_dadd+0x3fc>)
 800156a:	42ab      	cmp	r3, r5
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x31c>
 800156e:	e0b9      	b.n	80016e4 <__aeabi_dadd+0x490>
 8001570:	1885      	adds	r5, r0, r2
 8001572:	000a      	movs	r2, r1
 8001574:	4285      	cmp	r5, r0
 8001576:	4189      	sbcs	r1, r1
 8001578:	4442      	add	r2, r8
 800157a:	4249      	negs	r1, r1
 800157c:	1851      	adds	r1, r2, r1
 800157e:	2207      	movs	r2, #7
 8001580:	07cf      	lsls	r7, r1, #31
 8001582:	086d      	lsrs	r5, r5, #1
 8001584:	432f      	orrs	r7, r5
 8001586:	0849      	lsrs	r1, r1, #1
 8001588:	403a      	ands	r2, r7
 800158a:	001d      	movs	r5, r3
 800158c:	e6c2      	b.n	8001314 <__aeabi_dadd+0xc0>
 800158e:	2207      	movs	r2, #7
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <__aeabi_dadd+0x400>)
 8001592:	1aed      	subs	r5, r5, r3
 8001594:	4031      	ands	r1, r6
 8001596:	403a      	ands	r2, r7
 8001598:	e6bc      	b.n	8001314 <__aeabi_dadd+0xc0>
 800159a:	003e      	movs	r6, r7
 800159c:	3828      	subs	r0, #40	; 0x28
 800159e:	4086      	lsls	r6, r0
 80015a0:	2700      	movs	r7, #0
 80015a2:	e69f      	b.n	80012e4 <__aeabi_dadd+0x90>
 80015a4:	0038      	movs	r0, r7
 80015a6:	f001 fcc9 	bl	8002f3c <__clzsi2>
 80015aa:	3020      	adds	r0, #32
 80015ac:	e68e      	b.n	80012cc <__aeabi_dadd+0x78>
 80015ae:	4643      	mov	r3, r8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	001f      	movs	r7, r3
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	1bc7      	subs	r7, r0, r7
 80015ba:	42b8      	cmp	r0, r7
 80015bc:	4180      	sbcs	r0, r0
 80015be:	4240      	negs	r0, r0
 80015c0:	1a09      	subs	r1, r1, r0
 80015c2:	e678      	b.n	80012b6 <__aeabi_dadd+0x62>
 80015c4:	000e      	movs	r6, r1
 80015c6:	003b      	movs	r3, r7
 80015c8:	4306      	orrs	r6, r0
 80015ca:	4313      	orrs	r3, r2
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d161      	bne.n	8001694 <__aeabi_dadd+0x440>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x382>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dadd+0x56c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x388>
 80015da:	e11b      	b.n	8001814 <__aeabi_dadd+0x5c0>
 80015dc:	4664      	mov	r4, ip
 80015de:	0039      	movs	r1, r7
 80015e0:	0010      	movs	r0, r2
 80015e2:	e739      	b.n	8001458 <__aeabi_dadd+0x204>
 80015e4:	4f1a      	ldr	r7, [pc, #104]	; (8001650 <__aeabi_dadd+0x3fc>)
 80015e6:	42bb      	cmp	r3, r7
 80015e8:	d07a      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80015ea:	0033      	movs	r3, r6
 80015ec:	e6ff      	b.n	80013ee <__aeabi_dadd+0x19a>
 80015ee:	0030      	movs	r0, r6
 80015f0:	3d1f      	subs	r5, #31
 80015f2:	40e8      	lsrs	r0, r5
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d003      	beq.n	8001600 <__aeabi_dadd+0x3ac>
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	409e      	lsls	r6, r3
 80015fe:	4337      	orrs	r7, r6
 8001600:	1e7b      	subs	r3, r7, #1
 8001602:	419f      	sbcs	r7, r3
 8001604:	2207      	movs	r2, #7
 8001606:	4307      	orrs	r7, r0
 8001608:	403a      	ands	r2, r7
 800160a:	2100      	movs	r1, #0
 800160c:	2500      	movs	r5, #0
 800160e:	e789      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001610:	1a17      	subs	r7, r2, r0
 8001612:	4643      	mov	r3, r8
 8001614:	42ba      	cmp	r2, r7
 8001616:	41b6      	sbcs	r6, r6
 8001618:	1a59      	subs	r1, r3, r1
 800161a:	4276      	negs	r6, r6
 800161c:	1b8e      	subs	r6, r1, r6
 800161e:	4664      	mov	r4, ip
 8001620:	e64e      	b.n	80012c0 <__aeabi_dadd+0x6c>
 8001622:	2b1f      	cmp	r3, #31
 8001624:	dd00      	ble.n	8001628 <__aeabi_dadd+0x3d4>
 8001626:	e0ad      	b.n	8001784 <__aeabi_dadd+0x530>
 8001628:	2620      	movs	r6, #32
 800162a:	4647      	mov	r7, r8
 800162c:	1af6      	subs	r6, r6, r3
 800162e:	40b7      	lsls	r7, r6
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	46b2      	mov	sl, r6
 8001636:	40df      	lsrs	r7, r3
 8001638:	464e      	mov	r6, r9
 800163a:	433e      	orrs	r6, r7
 800163c:	0037      	movs	r7, r6
 800163e:	4656      	mov	r6, sl
 8001640:	40b2      	lsls	r2, r6
 8001642:	1e56      	subs	r6, r2, #1
 8001644:	41b2      	sbcs	r2, r6
 8001646:	4317      	orrs	r7, r2
 8001648:	4642      	mov	r2, r8
 800164a:	40da      	lsrs	r2, r3
 800164c:	1889      	adds	r1, r1, r2
 800164e:	e6ae      	b.n	80013ae <__aeabi_dadd+0x15a>
 8001650:	000007ff 	.word	0x000007ff
 8001654:	ff7fffff 	.word	0xff7fffff
 8001658:	800fffff 	.word	0x800fffff
 800165c:	2620      	movs	r6, #32
 800165e:	4647      	mov	r7, r8
 8001660:	1af6      	subs	r6, r6, r3
 8001662:	40b7      	lsls	r7, r6
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	46b2      	mov	sl, r6
 800166a:	40df      	lsrs	r7, r3
 800166c:	464e      	mov	r6, r9
 800166e:	433e      	orrs	r6, r7
 8001670:	0037      	movs	r7, r6
 8001672:	4656      	mov	r6, sl
 8001674:	40b2      	lsls	r2, r6
 8001676:	1e56      	subs	r6, r2, #1
 8001678:	41b2      	sbcs	r2, r6
 800167a:	4317      	orrs	r7, r2
 800167c:	4642      	mov	r2, r8
 800167e:	40da      	lsrs	r2, r3
 8001680:	1a89      	subs	r1, r1, r2
 8001682:	e799      	b.n	80015b8 <__aeabi_dadd+0x364>
 8001684:	4c7f      	ldr	r4, [pc, #508]	; (8001884 <__aeabi_dadd+0x630>)
 8001686:	42a6      	cmp	r6, r4
 8001688:	d05b      	beq.n	8001742 <__aeabi_dadd+0x4ee>
 800168a:	2480      	movs	r4, #128	; 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	425b      	negs	r3, r3
 8001690:	4321      	orrs	r1, r4
 8001692:	e727      	b.n	80014e4 <__aeabi_dadd+0x290>
 8001694:	2e00      	cmp	r6, #0
 8001696:	d10c      	bne.n	80016b2 <__aeabi_dadd+0x45e>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x44a>
 800169c:	e0cb      	b.n	8001836 <__aeabi_dadd+0x5e2>
 800169e:	4664      	mov	r4, ip
 80016a0:	0039      	movs	r1, r7
 80016a2:	0010      	movs	r0, r2
 80016a4:	4d77      	ldr	r5, [pc, #476]	; (8001884 <__aeabi_dadd+0x630>)
 80016a6:	e6d7      	b.n	8001458 <__aeabi_dadd+0x204>
 80016a8:	4f76      	ldr	r7, [pc, #472]	; (8001884 <__aeabi_dadd+0x630>)
 80016aa:	42bb      	cmp	r3, r7
 80016ac:	d018      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016ae:	0033      	movs	r3, r6
 80016b0:	e675      	b.n	800139e <__aeabi_dadd+0x14a>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016b6:	074b      	lsls	r3, r1, #29
 80016b8:	08c0      	lsrs	r0, r0, #3
 80016ba:	4318      	orrs	r0, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	4219      	tst	r1, r3
 80016c4:	d007      	beq.n	80016d6 <__aeabi_dadd+0x482>
 80016c6:	08fc      	lsrs	r4, r7, #3
 80016c8:	421c      	tst	r4, r3
 80016ca:	d104      	bne.n	80016d6 <__aeabi_dadd+0x482>
 80016cc:	0779      	lsls	r1, r7, #29
 80016ce:	08d0      	lsrs	r0, r2, #3
 80016d0:	4308      	orrs	r0, r1
 80016d2:	46e1      	mov	r9, ip
 80016d4:	0021      	movs	r1, r4
 80016d6:	464c      	mov	r4, r9
 80016d8:	0f42      	lsrs	r2, r0, #29
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	4311      	orrs	r1, r2
 80016de:	00c0      	lsls	r0, r0, #3
 80016e0:	4d68      	ldr	r5, [pc, #416]	; (8001884 <__aeabi_dadd+0x630>)
 80016e2:	e6b9      	b.n	8001458 <__aeabi_dadd+0x204>
 80016e4:	001d      	movs	r5, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	2300      	movs	r3, #0
 80016ea:	e6c0      	b.n	800146e <__aeabi_dadd+0x21a>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d15b      	bne.n	80017a8 <__aeabi_dadd+0x554>
 80016f0:	000d      	movs	r5, r1
 80016f2:	4305      	orrs	r5, r0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x4a4>
 80016f6:	e6e2      	b.n	80014be <__aeabi_dadd+0x26a>
 80016f8:	1c5d      	adds	r5, r3, #1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4aa>
 80016fc:	e0b0      	b.n	8001860 <__aeabi_dadd+0x60c>
 80016fe:	4d61      	ldr	r5, [pc, #388]	; (8001884 <__aeabi_dadd+0x630>)
 8001700:	42ae      	cmp	r6, r5
 8001702:	d01f      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 8001704:	43db      	mvns	r3, r3
 8001706:	2b38      	cmp	r3, #56	; 0x38
 8001708:	dc71      	bgt.n	80017ee <__aeabi_dadd+0x59a>
 800170a:	2b1f      	cmp	r3, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dadd+0x4bc>
 800170e:	e096      	b.n	800183e <__aeabi_dadd+0x5ea>
 8001710:	2520      	movs	r5, #32
 8001712:	000f      	movs	r7, r1
 8001714:	1aed      	subs	r5, r5, r3
 8001716:	40af      	lsls	r7, r5
 8001718:	46b9      	mov	r9, r7
 800171a:	0007      	movs	r7, r0
 800171c:	46aa      	mov	sl, r5
 800171e:	40df      	lsrs	r7, r3
 8001720:	464d      	mov	r5, r9
 8001722:	433d      	orrs	r5, r7
 8001724:	002f      	movs	r7, r5
 8001726:	4655      	mov	r5, sl
 8001728:	40a8      	lsls	r0, r5
 800172a:	40d9      	lsrs	r1, r3
 800172c:	1e45      	subs	r5, r0, #1
 800172e:	41a8      	sbcs	r0, r5
 8001730:	4488      	add	r8, r1
 8001732:	4307      	orrs	r7, r0
 8001734:	18bf      	adds	r7, r7, r2
 8001736:	4297      	cmp	r7, r2
 8001738:	4192      	sbcs	r2, r2
 800173a:	4251      	negs	r1, r2
 800173c:	4441      	add	r1, r8
 800173e:	0035      	movs	r5, r6
 8001740:	e63a      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001742:	4664      	mov	r4, ip
 8001744:	0035      	movs	r5, r6
 8001746:	4641      	mov	r1, r8
 8001748:	0010      	movs	r0, r2
 800174a:	e685      	b.n	8001458 <__aeabi_dadd+0x204>
 800174c:	000b      	movs	r3, r1
 800174e:	4303      	orrs	r3, r0
 8001750:	2d00      	cmp	r5, #0
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x502>
 8001754:	e663      	b.n	800141e <__aeabi_dadd+0x1ca>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f5      	beq.n	8001746 <__aeabi_dadd+0x4f2>
 800175a:	4643      	mov	r3, r8
 800175c:	4313      	orrs	r3, r2
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x50e>
 8001760:	e67a      	b.n	8001458 <__aeabi_dadd+0x204>
 8001762:	1887      	adds	r7, r0, r2
 8001764:	4287      	cmp	r7, r0
 8001766:	4180      	sbcs	r0, r0
 8001768:	2207      	movs	r2, #7
 800176a:	4441      	add	r1, r8
 800176c:	4240      	negs	r0, r0
 800176e:	1809      	adds	r1, r1, r0
 8001770:	403a      	ands	r2, r7
 8001772:	020b      	lsls	r3, r1, #8
 8001774:	d400      	bmi.n	8001778 <__aeabi_dadd+0x524>
 8001776:	e6d5      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <__aeabi_dadd+0x634>)
 800177a:	3501      	adds	r5, #1
 800177c:	4019      	ands	r1, r3
 800177e:	e5c9      	b.n	8001314 <__aeabi_dadd+0xc0>
 8001780:	0038      	movs	r0, r7
 8001782:	e669      	b.n	8001458 <__aeabi_dadd+0x204>
 8001784:	001e      	movs	r6, r3
 8001786:	4647      	mov	r7, r8
 8001788:	3e20      	subs	r6, #32
 800178a:	40f7      	lsrs	r7, r6
 800178c:	46bc      	mov	ip, r7
 800178e:	2b20      	cmp	r3, #32
 8001790:	d004      	beq.n	800179c <__aeabi_dadd+0x548>
 8001792:	2640      	movs	r6, #64	; 0x40
 8001794:	1af3      	subs	r3, r6, r3
 8001796:	4646      	mov	r6, r8
 8001798:	409e      	lsls	r6, r3
 800179a:	4332      	orrs	r2, r6
 800179c:	0017      	movs	r7, r2
 800179e:	4663      	mov	r3, ip
 80017a0:	1e7a      	subs	r2, r7, #1
 80017a2:	4197      	sbcs	r7, r2
 80017a4:	431f      	orrs	r7, r3
 80017a6:	e602      	b.n	80013ae <__aeabi_dadd+0x15a>
 80017a8:	4d36      	ldr	r5, [pc, #216]	; (8001884 <__aeabi_dadd+0x630>)
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	d0ca      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 80017ae:	2580      	movs	r5, #128	; 0x80
 80017b0:	042d      	lsls	r5, r5, #16
 80017b2:	425b      	negs	r3, r3
 80017b4:	4329      	orrs	r1, r5
 80017b6:	e7a6      	b.n	8001706 <__aeabi_dadd+0x4b2>
 80017b8:	4308      	orrs	r0, r1
 80017ba:	1e41      	subs	r1, r0, #1
 80017bc:	4188      	sbcs	r0, r1
 80017be:	e6a6      	b.n	800150e <__aeabi_dadd+0x2ba>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x572>
 80017c4:	e648      	b.n	8001458 <__aeabi_dadd+0x204>
 80017c6:	1a87      	subs	r7, r0, r2
 80017c8:	4643      	mov	r3, r8
 80017ca:	42b8      	cmp	r0, r7
 80017cc:	41b6      	sbcs	r6, r6
 80017ce:	1acb      	subs	r3, r1, r3
 80017d0:	4276      	negs	r6, r6
 80017d2:	1b9e      	subs	r6, r3, r6
 80017d4:	0233      	lsls	r3, r6, #8
 80017d6:	d54b      	bpl.n	8001870 <__aeabi_dadd+0x61c>
 80017d8:	1a17      	subs	r7, r2, r0
 80017da:	4643      	mov	r3, r8
 80017dc:	42ba      	cmp	r2, r7
 80017de:	4192      	sbcs	r2, r2
 80017e0:	1a59      	subs	r1, r3, r1
 80017e2:	4252      	negs	r2, r2
 80017e4:	1a89      	subs	r1, r1, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	4664      	mov	r4, ip
 80017ea:	403a      	ands	r2, r7
 80017ec:	e592      	b.n	8001314 <__aeabi_dadd+0xc0>
 80017ee:	4301      	orrs	r1, r0
 80017f0:	000f      	movs	r7, r1
 80017f2:	1e79      	subs	r1, r7, #1
 80017f4:	418f      	sbcs	r7, r1
 80017f6:	e79d      	b.n	8001734 <__aeabi_dadd+0x4e0>
 80017f8:	001c      	movs	r4, r3
 80017fa:	000f      	movs	r7, r1
 80017fc:	3c20      	subs	r4, #32
 80017fe:	40e7      	lsrs	r7, r4
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x5b8>
 8001804:	2440      	movs	r4, #64	; 0x40
 8001806:	1ae3      	subs	r3, r4, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	1e41      	subs	r1, r0, #1
 800180e:	4188      	sbcs	r0, r1
 8001810:	4338      	orrs	r0, r7
 8001812:	e67c      	b.n	800150e <__aeabi_dadd+0x2ba>
 8001814:	2200      	movs	r2, #0
 8001816:	2400      	movs	r4, #0
 8001818:	e625      	b.n	8001466 <__aeabi_dadd+0x212>
 800181a:	1a17      	subs	r7, r2, r0
 800181c:	4643      	mov	r3, r8
 800181e:	42ba      	cmp	r2, r7
 8001820:	4192      	sbcs	r2, r2
 8001822:	1a59      	subs	r1, r3, r1
 8001824:	4252      	negs	r2, r2
 8001826:	1a89      	subs	r1, r1, r2
 8001828:	4664      	mov	r4, ip
 800182a:	0035      	movs	r5, r6
 800182c:	e543      	b.n	80012b6 <__aeabi_dadd+0x62>
 800182e:	4641      	mov	r1, r8
 8001830:	0010      	movs	r0, r2
 8001832:	4d14      	ldr	r5, [pc, #80]	; (8001884 <__aeabi_dadd+0x630>)
 8001834:	e610      	b.n	8001458 <__aeabi_dadd+0x204>
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	2400      	movs	r4, #0
 800183a:	0312      	lsls	r2, r2, #12
 800183c:	e680      	b.n	8001540 <__aeabi_dadd+0x2ec>
 800183e:	001d      	movs	r5, r3
 8001840:	000f      	movs	r7, r1
 8001842:	3d20      	subs	r5, #32
 8001844:	40ef      	lsrs	r7, r5
 8001846:	46bc      	mov	ip, r7
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <__aeabi_dadd+0x600>
 800184c:	2540      	movs	r5, #64	; 0x40
 800184e:	1aeb      	subs	r3, r5, r3
 8001850:	4099      	lsls	r1, r3
 8001852:	4308      	orrs	r0, r1
 8001854:	0007      	movs	r7, r0
 8001856:	4663      	mov	r3, ip
 8001858:	1e78      	subs	r0, r7, #1
 800185a:	4187      	sbcs	r7, r0
 800185c:	431f      	orrs	r7, r3
 800185e:	e769      	b.n	8001734 <__aeabi_dadd+0x4e0>
 8001860:	1887      	adds	r7, r0, r2
 8001862:	4297      	cmp	r7, r2
 8001864:	419b      	sbcs	r3, r3
 8001866:	4441      	add	r1, r8
 8001868:	425b      	negs	r3, r3
 800186a:	18c9      	adds	r1, r1, r3
 800186c:	0035      	movs	r5, r6
 800186e:	e5a3      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001870:	003b      	movs	r3, r7
 8001872:	4333      	orrs	r3, r6
 8001874:	d0ce      	beq.n	8001814 <__aeabi_dadd+0x5c0>
 8001876:	2207      	movs	r2, #7
 8001878:	0031      	movs	r1, r6
 800187a:	403a      	ands	r2, r7
 800187c:	e652      	b.n	8001524 <__aeabi_dadd+0x2d0>
 800187e:	2300      	movs	r3, #0
 8001880:	001a      	movs	r2, r3
 8001882:	e5f4      	b.n	800146e <__aeabi_dadd+0x21a>
 8001884:	000007ff 	.word	0x000007ff
 8001888:	ff7fffff 	.word	0xff7fffff

0800188c <__aeabi_ddiv>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	464e      	mov	r6, r9
 8001894:	4645      	mov	r5, r8
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	4683      	mov	fp, r0
 800189a:	0007      	movs	r7, r0
 800189c:	030e      	lsls	r6, r1, #12
 800189e:	0048      	lsls	r0, r1, #1
 80018a0:	b085      	sub	sp, #20
 80018a2:	4692      	mov	sl, r2
 80018a4:	001c      	movs	r4, r3
 80018a6:	0b36      	lsrs	r6, r6, #12
 80018a8:	0d40      	lsrs	r0, r0, #21
 80018aa:	0fcd      	lsrs	r5, r1, #31
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x26>
 80018b0:	e09d      	b.n	80019ee <__aeabi_ddiv+0x162>
 80018b2:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d039      	beq.n	800192c <__aeabi_ddiv+0xa0>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00f6      	lsls	r6, r6, #3
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431e      	orrs	r6, r3
 80018c0:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <__aeabi_ddiv+0x280>)
 80018c2:	0f7b      	lsrs	r3, r7, #29
 80018c4:	4333      	orrs	r3, r6
 80018c6:	4699      	mov	r9, r3
 80018c8:	4694      	mov	ip, r2
 80018ca:	0003      	movs	r3, r0
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2600      	movs	r6, #0
 80018d4:	00ff      	lsls	r7, r7, #3
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	0323      	lsls	r3, r4, #12
 80018da:	0b1b      	lsrs	r3, r3, #12
 80018dc:	4698      	mov	r8, r3
 80018de:	0063      	lsls	r3, r4, #1
 80018e0:	0fe4      	lsrs	r4, r4, #31
 80018e2:	4652      	mov	r2, sl
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	9401      	str	r4, [sp, #4]
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x60>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_ddiv+0x1c8>
 80018ec:	4986      	ldr	r1, [pc, #536]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018ee:	428b      	cmp	r3, r1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x68>
 80018f2:	e09e      	b.n	8001a32 <__aeabi_ddiv+0x1a6>
 80018f4:	4642      	mov	r2, r8
 80018f6:	00d1      	lsls	r1, r2, #3
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0412      	lsls	r2, r2, #16
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4651      	mov	r1, sl
 8001900:	0f49      	lsrs	r1, r1, #29
 8001902:	4311      	orrs	r1, r2
 8001904:	468b      	mov	fp, r1
 8001906:	4981      	ldr	r1, [pc, #516]	; (8001b0c <__aeabi_ddiv+0x280>)
 8001908:	4652      	mov	r2, sl
 800190a:	468c      	mov	ip, r1
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4463      	add	r3, ip
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	2100      	movs	r1, #0
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	002b      	movs	r3, r5
 800191a:	4063      	eors	r3, r4
 800191c:	469a      	mov	sl, r3
 800191e:	2e0f      	cmp	r6, #15
 8001920:	d900      	bls.n	8001924 <__aeabi_ddiv+0x98>
 8001922:	e105      	b.n	8001b30 <__aeabi_ddiv+0x2a4>
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <__aeabi_ddiv+0x284>)
 8001926:	00b6      	lsls	r6, r6, #2
 8001928:	599b      	ldr	r3, [r3, r6]
 800192a:	469f      	mov	pc, r3
 800192c:	465b      	mov	r3, fp
 800192e:	4333      	orrs	r3, r6
 8001930:	4699      	mov	r9, r3
 8001932:	d000      	beq.n	8001936 <__aeabi_ddiv+0xaa>
 8001934:	e0b8      	b.n	8001aa8 <__aeabi_ddiv+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	2608      	movs	r6, #8
 800193a:	2700      	movs	r7, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	e7ca      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001942:	46cb      	mov	fp, r9
 8001944:	003a      	movs	r2, r7
 8001946:	9902      	ldr	r1, [sp, #8]
 8001948:	9501      	str	r5, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	469a      	mov	sl, r3
 800194e:	2902      	cmp	r1, #2
 8001950:	d027      	beq.n	80019a2 <__aeabi_ddiv+0x116>
 8001952:	2903      	cmp	r1, #3
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0xcc>
 8001956:	e280      	b.n	8001e5a <__aeabi_ddiv+0x5ce>
 8001958:	2901      	cmp	r1, #1
 800195a:	d044      	beq.n	80019e6 <__aeabi_ddiv+0x15a>
 800195c:	496d      	ldr	r1, [pc, #436]	; (8001b14 <__aeabi_ddiv+0x288>)
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	468c      	mov	ip, r1
 8001962:	4463      	add	r3, ip
 8001964:	001c      	movs	r4, r3
 8001966:	2c00      	cmp	r4, #0
 8001968:	dd38      	ble.n	80019dc <__aeabi_ddiv+0x150>
 800196a:	0753      	lsls	r3, r2, #29
 800196c:	d000      	beq.n	8001970 <__aeabi_ddiv+0xe4>
 800196e:	e213      	b.n	8001d98 <__aeabi_ddiv+0x50c>
 8001970:	08d2      	lsrs	r2, r2, #3
 8001972:	465b      	mov	r3, fp
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	d509      	bpl.n	800198c <__aeabi_ddiv+0x100>
 8001978:	4659      	mov	r1, fp
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <__aeabi_ddiv+0x28c>)
 800197c:	4019      	ands	r1, r3
 800197e:	468b      	mov	fp, r1
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	00c9      	lsls	r1, r1, #3
 8001984:	468c      	mov	ip, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4463      	add	r3, ip
 800198a:	001c      	movs	r4, r3
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <__aeabi_ddiv+0x290>)
 800198e:	429c      	cmp	r4, r3
 8001990:	dc07      	bgt.n	80019a2 <__aeabi_ddiv+0x116>
 8001992:	465b      	mov	r3, fp
 8001994:	0564      	lsls	r4, r4, #21
 8001996:	075f      	lsls	r7, r3, #29
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4317      	orrs	r7, r2
 800199c:	0b1b      	lsrs	r3, r3, #12
 800199e:	0d62      	lsrs	r2, r4, #21
 80019a0:	e002      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2700      	movs	r7, #0
 80019a6:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	0b1c      	lsrs	r4, r3, #12
 80019ae:	0d0b      	lsrs	r3, r1, #20
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	4323      	orrs	r3, r4
 80019b4:	0514      	lsls	r4, r2, #20
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <__aeabi_ddiv+0x294>)
 80019b8:	0038      	movs	r0, r7
 80019ba:	4013      	ands	r3, r2
 80019bc:	431c      	orrs	r4, r3
 80019be:	4653      	mov	r3, sl
 80019c0:	0064      	lsls	r4, r4, #1
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	0864      	lsrs	r4, r4, #1
 80019c6:	431c      	orrs	r4, r3
 80019c8:	0021      	movs	r1, r4
 80019ca:	b005      	add	sp, #20
 80019cc:	bc3c      	pop	{r2, r3, r4, r5}
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	46a2      	mov	sl, r4
 80019d4:	46ab      	mov	fp, r5
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d8:	2201      	movs	r2, #1
 80019da:	4252      	negs	r2, r2
 80019dc:	2301      	movs	r3, #1
 80019de:	1b1b      	subs	r3, r3, r4
 80019e0:	2b38      	cmp	r3, #56	; 0x38
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_ddiv+0x15a>
 80019e4:	e1ad      	b.n	8001d42 <__aeabi_ddiv+0x4b6>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2300      	movs	r3, #0
 80019ea:	2700      	movs	r7, #0
 80019ec:	e7dc      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4333      	orrs	r3, r6
 80019f2:	4699      	mov	r9, r3
 80019f4:	d05e      	beq.n	8001ab4 <__aeabi_ddiv+0x228>
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x170>
 80019fa:	e18a      	b.n	8001d12 <__aeabi_ddiv+0x486>
 80019fc:	0030      	movs	r0, r6
 80019fe:	f001 fa9d 	bl	8002f3c <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	3b0b      	subs	r3, #11
 8001a06:	2b1c      	cmp	r3, #28
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_ddiv+0x180>
 8001a0a:	e17b      	b.n	8001d04 <__aeabi_ddiv+0x478>
 8001a0c:	221d      	movs	r2, #29
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	465a      	mov	r2, fp
 8001a12:	0001      	movs	r1, r0
 8001a14:	40da      	lsrs	r2, r3
 8001a16:	3908      	subs	r1, #8
 8001a18:	408e      	lsls	r6, r1
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	465f      	mov	r7, fp
 8001a1e:	4333      	orrs	r3, r6
 8001a20:	4699      	mov	r9, r3
 8001a22:	408f      	lsls	r7, r1
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <__aeabi_ddiv+0x298>)
 8001a26:	2600      	movs	r6, #0
 8001a28:	1a1b      	subs	r3, r3, r0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	e752      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001a32:	4641      	mov	r1, r8
 8001a34:	4653      	mov	r3, sl
 8001a36:	430b      	orrs	r3, r1
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <__aeabi_ddiv+0x29c>)
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	468c      	mov	ip, r1
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	4463      	add	r3, ip
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	465b      	mov	r3, fp
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d13b      	bne.n	8001ac2 <__aeabi_ddiv+0x236>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	431e      	orrs	r6, r3
 8001a50:	2102      	movs	r1, #2
 8001a52:	e761      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001a54:	4643      	mov	r3, r8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	469b      	mov	fp, r3
 8001a5a:	d037      	beq.n	8001acc <__aeabi_ddiv+0x240>
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x1d8>
 8001a62:	e162      	b.n	8001d2a <__aeabi_ddiv+0x49e>
 8001a64:	4640      	mov	r0, r8
 8001a66:	f001 fa69 	bl	8002f3c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3b0b      	subs	r3, #11
 8001a6e:	2b1c      	cmp	r3, #28
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_ddiv+0x1e8>
 8001a72:	e153      	b.n	8001d1c <__aeabi_ddiv+0x490>
 8001a74:	0002      	movs	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	3a08      	subs	r2, #8
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	4688      	mov	r8, r1
 8001a7e:	211d      	movs	r1, #29
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	4651      	mov	r1, sl
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	000b      	movs	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4653      	mov	r3, sl
 8001a90:	4093      	lsls	r3, r2
 8001a92:	001a      	movs	r2, r3
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <__aeabi_ddiv+0x2a0>)
 8001a98:	469c      	mov	ip, r3
 8001a9a:	4460      	add	r0, ip
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	468c      	mov	ip, r1
 8001aa0:	4463      	add	r3, ip
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	e737      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	46b1      	mov	r9, r6
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	260c      	movs	r6, #12
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	e711      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	2604      	movs	r6, #4
 8001abc:	2700      	movs	r7, #0
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e70a      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	46c3      	mov	fp, r8
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	e725      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001acc:	3301      	adds	r3, #1
 8001ace:	431e      	orrs	r6, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	e720      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	469a      	mov	sl, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	2700      	movs	r7, #0
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001ae2:	e761      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	031b      	lsls	r3, r3, #12
 8001aea:	4219      	tst	r1, r3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_ddiv+0x264>
 8001aee:	e0e2      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af0:	4659      	mov	r1, fp
 8001af2:	4219      	tst	r1, r3
 8001af4:	d000      	beq.n	8001af8 <__aeabi_ddiv+0x26c>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af8:	430b      	orrs	r3, r1
 8001afa:	031b      	lsls	r3, r3, #12
 8001afc:	0017      	movs	r7, r2
 8001afe:	0b1b      	lsrs	r3, r3, #12
 8001b00:	46a2      	mov	sl, r4
 8001b02:	4a01      	ldr	r2, [pc, #4]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001b04:	e750      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	000007ff 	.word	0x000007ff
 8001b0c:	fffffc01 	.word	0xfffffc01
 8001b10:	08017724 	.word	0x08017724
 8001b14:	000003ff 	.word	0x000003ff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	800fffff 	.word	0x800fffff
 8001b24:	fffffc0d 	.word	0xfffffc0d
 8001b28:	fffff801 	.word	0xfffff801
 8001b2c:	000003f3 	.word	0x000003f3
 8001b30:	45d9      	cmp	r9, fp
 8001b32:	d900      	bls.n	8001b36 <__aeabi_ddiv+0x2aa>
 8001b34:	e0cb      	b.n	8001cce <__aeabi_ddiv+0x442>
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001b38:	e0c6      	b.n	8001cc8 <__aeabi_ddiv+0x43c>
 8001b3a:	003c      	movs	r4, r7
 8001b3c:	4648      	mov	r0, r9
 8001b3e:	2700      	movs	r7, #0
 8001b40:	9b00      	ldr	r3, [sp, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	465b      	mov	r3, fp
 8001b48:	0e16      	lsrs	r6, r2, #24
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	0213      	lsls	r3, r2, #8
 8001b50:	4698      	mov	r8, r3
 8001b52:	0433      	lsls	r3, r6, #16
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	4699      	mov	r9, r3
 8001b58:	0c31      	lsrs	r1, r6, #16
 8001b5a:	9101      	str	r1, [sp, #4]
 8001b5c:	f7fe fb7e 	bl	800025c <__aeabi_uidivmod>
 8001b60:	464a      	mov	r2, r9
 8001b62:	4342      	muls	r2, r0
 8001b64:	040b      	lsls	r3, r1, #16
 8001b66:	0c21      	lsrs	r1, r4, #16
 8001b68:	0005      	movs	r5, r0
 8001b6a:	4319      	orrs	r1, r3
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d907      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b70:	1989      	adds	r1, r1, r6
 8001b72:	3d01      	subs	r5, #1
 8001b74:	428e      	cmp	r6, r1
 8001b76:	d803      	bhi.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d901      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b7c:	1e85      	subs	r5, r0, #2
 8001b7e:	1989      	adds	r1, r1, r6
 8001b80:	1a88      	subs	r0, r1, r2
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	f7fe fb6a 	bl	800025c <__aeabi_uidivmod>
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	468c      	mov	ip, r1
 8001b8c:	464a      	mov	r2, r9
 8001b8e:	0421      	lsls	r1, r4, #16
 8001b90:	4664      	mov	r4, ip
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c09      	lsrs	r1, r1, #16
 8001b96:	0003      	movs	r3, r0
 8001b98:	4321      	orrs	r1, r4
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d904      	bls.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001b9e:	1989      	adds	r1, r1, r6
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	428e      	cmp	r6, r1
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001ba6:	e0f1      	b.n	8001d8c <__aeabi_ddiv+0x500>
 8001ba8:	042d      	lsls	r5, r5, #16
 8001baa:	431d      	orrs	r5, r3
 8001bac:	46ab      	mov	fp, r5
 8001bae:	4643      	mov	r3, r8
 8001bb0:	1a89      	subs	r1, r1, r2
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	0c28      	lsrs	r0, r5, #16
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	0c1d      	lsrs	r5, r3, #16
 8001bba:	465b      	mov	r3, fp
 8001bbc:	0c14      	lsrs	r4, r2, #16
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	435a      	muls	r2, r3
 8001bc6:	9403      	str	r4, [sp, #12]
 8001bc8:	436b      	muls	r3, r5
 8001bca:	4344      	muls	r4, r0
 8001bcc:	9502      	str	r5, [sp, #8]
 8001bce:	4368      	muls	r0, r5
 8001bd0:	191b      	adds	r3, r3, r4
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	18eb      	adds	r3, r5, r3
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x356>
 8001bda:	2480      	movs	r4, #128	; 0x80
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	46a4      	mov	ip, r4
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1c      	lsrs	r4, r3, #16
 8001be4:	0415      	lsls	r5, r2, #16
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	1820      	adds	r0, r4, r0
 8001bec:	195d      	adds	r5, r3, r5
 8001bee:	4281      	cmp	r1, r0
 8001bf0:	d377      	bcc.n	8001ce2 <__aeabi_ddiv+0x456>
 8001bf2:	d073      	beq.n	8001cdc <__aeabi_ddiv+0x450>
 8001bf4:	1a0c      	subs	r4, r1, r0
 8001bf6:	4aa2      	ldr	r2, [pc, #648]	; (8001e80 <__aeabi_ddiv+0x5f4>)
 8001bf8:	1b7d      	subs	r5, r7, r5
 8001bfa:	42af      	cmp	r7, r5
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	4694      	mov	ip, r2
 8001c00:	9b00      	ldr	r3, [sp, #0]
 8001c02:	427f      	negs	r7, r7
 8001c04:	4463      	add	r3, ip
 8001c06:	1be0      	subs	r0, r4, r7
 8001c08:	001c      	movs	r4, r3
 8001c0a:	4286      	cmp	r6, r0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x384>
 8001c0e:	e0db      	b.n	8001dc8 <__aeabi_ddiv+0x53c>
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	f7fe fb23 	bl	800025c <__aeabi_uidivmod>
 8001c16:	464a      	mov	r2, r9
 8001c18:	4342      	muls	r2, r0
 8001c1a:	040b      	lsls	r3, r1, #16
 8001c1c:	0c29      	lsrs	r1, r5, #16
 8001c1e:	0007      	movs	r7, r0
 8001c20:	4319      	orrs	r1, r3
 8001c22:	428a      	cmp	r2, r1
 8001c24:	d907      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c26:	1989      	adds	r1, r1, r6
 8001c28:	3f01      	subs	r7, #1
 8001c2a:	428e      	cmp	r6, r1
 8001c2c:	d803      	bhi.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c2e:	428a      	cmp	r2, r1
 8001c30:	d901      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c32:	1e87      	subs	r7, r0, #2
 8001c34:	1989      	adds	r1, r1, r6
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	9901      	ldr	r1, [sp, #4]
 8001c3a:	f7fe fb0f 	bl	800025c <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	464a      	mov	r2, r9
 8001c42:	4689      	mov	r9, r1
 8001c44:	0429      	lsls	r1, r5, #16
 8001c46:	464d      	mov	r5, r9
 8001c48:	4342      	muls	r2, r0
 8001c4a:	0c09      	lsrs	r1, r1, #16
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4329      	orrs	r1, r5
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d907      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c54:	1989      	adds	r1, r1, r6
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428e      	cmp	r6, r1
 8001c5a:	d803      	bhi.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d901      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c60:	1e83      	subs	r3, r0, #2
 8001c62:	1989      	adds	r1, r1, r6
 8001c64:	043f      	lsls	r7, r7, #16
 8001c66:	1a89      	subs	r1, r1, r2
 8001c68:	003a      	movs	r2, r7
 8001c6a:	9f03      	ldr	r7, [sp, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	0038      	movs	r0, r7
 8001c70:	0413      	lsls	r3, r2, #16
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	4358      	muls	r0, r3
 8001c76:	4681      	mov	r9, r0
 8001c78:	9802      	ldr	r0, [sp, #8]
 8001c7a:	0c15      	lsrs	r5, r2, #16
 8001c7c:	436f      	muls	r7, r5
 8001c7e:	4343      	muls	r3, r0
 8001c80:	4345      	muls	r5, r0
 8001c82:	4648      	mov	r0, r9
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4684      	mov	ip, r0
 8001c88:	19db      	adds	r3, r3, r7
 8001c8a:	4463      	add	r3, ip
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_ddiv+0x40c>
 8001c90:	2080      	movs	r0, #128	; 0x80
 8001c92:	0240      	lsls	r0, r0, #9
 8001c94:	4684      	mov	ip, r0
 8001c96:	4465      	add	r5, ip
 8001c98:	4648      	mov	r0, r9
 8001c9a:	0c1f      	lsrs	r7, r3, #16
 8001c9c:	0400      	lsls	r0, r0, #16
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	197d      	adds	r5, r7, r5
 8001ca4:	1818      	adds	r0, r3, r0
 8001ca6:	42a9      	cmp	r1, r5
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x420>
 8001caa:	e084      	b.n	8001db6 <__aeabi_ddiv+0x52a>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x424>
 8001cae:	e07f      	b.n	8001db0 <__aeabi_ddiv+0x524>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	e657      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	464a      	mov	r2, r9
 8001cba:	031b      	lsls	r3, r3, #12
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	46aa      	mov	sl, r5
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001cc6:	e66f      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001cc8:	42ba      	cmp	r2, r7
 8001cca:	d900      	bls.n	8001cce <__aeabi_ddiv+0x442>
 8001ccc:	e735      	b.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	07dc      	lsls	r4, r3, #31
 8001cd2:	0858      	lsrs	r0, r3, #1
 8001cd4:	087b      	lsrs	r3, r7, #1
 8001cd6:	431c      	orrs	r4, r3
 8001cd8:	07ff      	lsls	r7, r7, #31
 8001cda:	e734      	b.n	8001b46 <__aeabi_ddiv+0x2ba>
 8001cdc:	2400      	movs	r4, #0
 8001cde:	42af      	cmp	r7, r5
 8001ce0:	d289      	bcs.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001ce2:	4447      	add	r7, r8
 8001ce4:	4547      	cmp	r7, r8
 8001ce6:	41a4      	sbcs	r4, r4
 8001ce8:	465b      	mov	r3, fp
 8001cea:	4264      	negs	r4, r4
 8001cec:	19a4      	adds	r4, r4, r6
 8001cee:	1864      	adds	r4, r4, r1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d21e      	bcs.n	8001d34 <__aeabi_ddiv+0x4a8>
 8001cf6:	42a0      	cmp	r0, r4
 8001cf8:	d86d      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001cfc:	e0b6      	b.n	8001e6c <__aeabi_ddiv+0x5e0>
 8001cfe:	1a24      	subs	r4, r4, r0
 8001d00:	469b      	mov	fp, r3
 8001d02:	e778      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d04:	0003      	movs	r3, r0
 8001d06:	465a      	mov	r2, fp
 8001d08:	3b28      	subs	r3, #40	; 0x28
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	4691      	mov	r9, r2
 8001d10:	e688      	b.n	8001a24 <__aeabi_ddiv+0x198>
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 f912 	bl	8002f3c <__clzsi2>
 8001d18:	3020      	adds	r0, #32
 8001d1a:	e672      	b.n	8001a02 <__aeabi_ddiv+0x176>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	4652      	mov	r2, sl
 8001d20:	3b28      	subs	r3, #40	; 0x28
 8001d22:	409a      	lsls	r2, r3
 8001d24:	4693      	mov	fp, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	e6b4      	b.n	8001a94 <__aeabi_ddiv+0x208>
 8001d2a:	4650      	mov	r0, sl
 8001d2c:	f001 f906 	bl	8002f3c <__clzsi2>
 8001d30:	3020      	adds	r0, #32
 8001d32:	e69a      	b.n	8001a6a <__aeabi_ddiv+0x1de>
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d1e2      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001d38:	45b8      	cmp	r8, r7
 8001d3a:	d9dc      	bls.n	8001cf6 <__aeabi_ddiv+0x46a>
 8001d3c:	1a34      	subs	r4, r6, r0
 8001d3e:	469b      	mov	fp, r3
 8001d40:	e759      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d42:	2b1f      	cmp	r3, #31
 8001d44:	dc65      	bgt.n	8001e12 <__aeabi_ddiv+0x586>
 8001d46:	4c50      	ldr	r4, [pc, #320]	; (8001e88 <__aeabi_ddiv+0x5fc>)
 8001d48:	9900      	ldr	r1, [sp, #0]
 8001d4a:	46a4      	mov	ip, r4
 8001d4c:	465c      	mov	r4, fp
 8001d4e:	4461      	add	r1, ip
 8001d50:	0008      	movs	r0, r1
 8001d52:	408c      	lsls	r4, r1
 8001d54:	0011      	movs	r1, r2
 8001d56:	4082      	lsls	r2, r0
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	1e50      	subs	r0, r2, #1
 8001d5c:	4182      	sbcs	r2, r0
 8001d5e:	430c      	orrs	r4, r1
 8001d60:	4314      	orrs	r4, r2
 8001d62:	465a      	mov	r2, fp
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	0762      	lsls	r2, r4, #29
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4022      	ands	r2, r4
 8001d70:	2a04      	cmp	r2, #4
 8001d72:	d005      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d74:	0022      	movs	r2, r4
 8001d76:	1d14      	adds	r4, r2, #4
 8001d78:	4294      	cmp	r4, r2
 8001d7a:	4189      	sbcs	r1, r1
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	185b      	adds	r3, r3, r1
 8001d80:	021a      	lsls	r2, r3, #8
 8001d82:	d562      	bpl.n	8001e4a <__aeabi_ddiv+0x5be>
 8001d84:	2201      	movs	r2, #1
 8001d86:	2300      	movs	r3, #0
 8001d88:	2700      	movs	r7, #0
 8001d8a:	e60d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001d8c:	428a      	cmp	r2, r1
 8001d8e:	d800      	bhi.n	8001d92 <__aeabi_ddiv+0x506>
 8001d90:	e70a      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d92:	1e83      	subs	r3, r0, #2
 8001d94:	1989      	adds	r1, r1, r6
 8001d96:	e707      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0x516>
 8001da0:	e5e6      	b.n	8001970 <__aeabi_ddiv+0xe4>
 8001da2:	1d17      	adds	r7, r2, #4
 8001da4:	4297      	cmp	r7, r2
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	4253      	negs	r3, r2
 8001daa:	449b      	add	fp, r3
 8001dac:	08fa      	lsrs	r2, r7, #3
 8001dae:	e5e0      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x52a>
 8001db4:	e5d7      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001db6:	1871      	adds	r1, r6, r1
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	42b1      	cmp	r1, r6
 8001dbc:	d327      	bcc.n	8001e0e <__aeabi_ddiv+0x582>
 8001dbe:	42a9      	cmp	r1, r5
 8001dc0:	d315      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001dc2:	d058      	beq.n	8001e76 <__aeabi_ddiv+0x5ea>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	e773      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc00      	bgt.n	8001dce <__aeabi_ddiv+0x542>
 8001dcc:	e604      	b.n	80019d8 <__aeabi_ddiv+0x14c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	449b      	add	fp, r3
 8001dd4:	e5cd      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4447      	add	r7, r8
 8001dda:	4547      	cmp	r7, r8
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	425b      	negs	r3, r3
 8001de0:	469c      	mov	ip, r3
 8001de2:	4249      	negs	r1, r1
 8001de4:	1989      	adds	r1, r1, r6
 8001de6:	190c      	adds	r4, r1, r4
 8001de8:	44e3      	add	fp, ip
 8001dea:	1a24      	subs	r4, r4, r0
 8001dec:	e703      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001dee:	4643      	mov	r3, r8
 8001df0:	005f      	lsls	r7, r3, #1
 8001df2:	4547      	cmp	r7, r8
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	46b8      	mov	r8, r7
 8001df8:	425b      	negs	r3, r3
 8001dfa:	199e      	adds	r6, r3, r6
 8001dfc:	3a02      	subs	r2, #2
 8001dfe:	1989      	adds	r1, r1, r6
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e04:	e754      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e06:	4540      	cmp	r0, r8
 8001e08:	d000      	beq.n	8001e0c <__aeabi_ddiv+0x580>
 8001e0a:	e751      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e0c:	e5ab      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001e0e:	001a      	movs	r2, r3
 8001e10:	e7f6      	b.n	8001e00 <__aeabi_ddiv+0x574>
 8001e12:	211f      	movs	r1, #31
 8001e14:	465f      	mov	r7, fp
 8001e16:	4249      	negs	r1, r1
 8001e18:	1b0c      	subs	r4, r1, r4
 8001e1a:	40e7      	lsrs	r7, r4
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d007      	beq.n	8001e30 <__aeabi_ddiv+0x5a4>
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <__aeabi_ddiv+0x600>)
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	0018      	movs	r0, r3
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4083      	lsls	r3, r0
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	1e50      	subs	r0, r2, #1
 8001e32:	4182      	sbcs	r2, r0
 8001e34:	433a      	orrs	r2, r7
 8001e36:	2707      	movs	r7, #7
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4017      	ands	r7, r2
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_ddiv+0x5c6>
 8001e3e:	210f      	movs	r1, #15
 8001e40:	2300      	movs	r3, #0
 8001e42:	4011      	ands	r1, r2
 8001e44:	0014      	movs	r4, r2
 8001e46:	2904      	cmp	r1, #4
 8001e48:	d195      	bne.n	8001d76 <__aeabi_ddiv+0x4ea>
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	075f      	lsls	r7, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1b      	lsrs	r3, r3, #12
 8001e52:	08d2      	lsrs	r2, r2, #3
 8001e54:	4317      	orrs	r7, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	e5a6      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	4659      	mov	r1, fp
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	430b      	orrs	r3, r1
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	0017      	movs	r7, r2
 8001e66:	0b1b      	lsrs	r3, r3, #12
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001e6a:	e59d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e6c:	42bd      	cmp	r5, r7
 8001e6e:	d8b2      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001e70:	469b      	mov	fp, r3
 8001e72:	2400      	movs	r4, #0
 8001e74:	e6bf      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001e76:	4580      	cmp	r8, r0
 8001e78:	d3b9      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	e7c3      	b.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000003ff 	.word	0x000003ff
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	0000041e 	.word	0x0000041e
 8001e8c:	0000043e 	.word	0x0000043e

08001e90 <__eqdf2>:
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	464f      	mov	r7, r9
 8001e94:	4646      	mov	r6, r8
 8001e96:	46d6      	mov	lr, sl
 8001e98:	4684      	mov	ip, r0
 8001e9a:	b5c0      	push	{r6, r7, lr}
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4e19      	ldr	r6, [pc, #100]	; (8001f04 <__eqdf2+0x74>)
 8001ea0:	0318      	lsls	r0, r3, #12
 8001ea2:	030f      	lsls	r7, r1, #12
 8001ea4:	004d      	lsls	r5, r1, #1
 8001ea6:	0b00      	lsrs	r0, r0, #12
 8001ea8:	005c      	lsls	r4, r3, #1
 8001eaa:	4682      	mov	sl, r0
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d6d      	lsrs	r5, r5, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d64      	lsrs	r4, r4, #21
 8001eb6:	0fdb      	lsrs	r3, r3, #31
 8001eb8:	2001      	movs	r0, #1
 8001eba:	42b5      	cmp	r5, r6
 8001ebc:	d00a      	beq.n	8001ed4 <__eqdf2+0x44>
 8001ebe:	42b4      	cmp	r4, r6
 8001ec0:	d003      	beq.n	8001eca <__eqdf2+0x3a>
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d101      	bne.n	8001eca <__eqdf2+0x3a>
 8001ec6:	4557      	cmp	r7, sl
 8001ec8:	d00c      	beq.n	8001ee4 <__eqdf2+0x54>
 8001eca:	bc1c      	pop	{r2, r3, r4}
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	4666      	mov	r6, ip
 8001ed6:	433e      	orrs	r6, r7
 8001ed8:	d1f7      	bne.n	8001eca <__eqdf2+0x3a>
 8001eda:	42ac      	cmp	r4, r5
 8001edc:	d1f5      	bne.n	8001eca <__eqdf2+0x3a>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	4314      	orrs	r4, r2
 8001ee2:	d1f2      	bne.n	8001eca <__eqdf2+0x3a>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	45c8      	cmp	r8, r9
 8001ee8:	d1ef      	bne.n	8001eca <__eqdf2+0x3a>
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d007      	beq.n	8001efe <__eqdf2+0x6e>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d1eb      	bne.n	8001eca <__eqdf2+0x3a>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	431f      	orrs	r7, r3
 8001ef6:	0038      	movs	r0, r7
 8001ef8:	1e47      	subs	r7, r0, #1
 8001efa:	41b8      	sbcs	r0, r7
 8001efc:	e7e5      	b.n	8001eca <__eqdf2+0x3a>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e7e3      	b.n	8001eca <__eqdf2+0x3a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff

08001f08 <__gedf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	464f      	mov	r7, r9
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	46d6      	mov	lr, sl
 8001f10:	004d      	lsls	r5, r1, #1
 8001f12:	b5c0      	push	{r6, r7, lr}
 8001f14:	030e      	lsls	r6, r1, #12
 8001f16:	0fc9      	lsrs	r1, r1, #31
 8001f18:	468a      	mov	sl, r1
 8001f1a:	492c      	ldr	r1, [pc, #176]	; (8001fcc <__gedf2+0xc4>)
 8001f1c:	031f      	lsls	r7, r3, #12
 8001f1e:	005c      	lsls	r4, r3, #1
 8001f20:	4680      	mov	r8, r0
 8001f22:	0b36      	lsrs	r6, r6, #12
 8001f24:	0d6d      	lsrs	r5, r5, #21
 8001f26:	4691      	mov	r9, r2
 8001f28:	0b3f      	lsrs	r7, r7, #12
 8001f2a:	0d64      	lsrs	r4, r4, #21
 8001f2c:	0fdb      	lsrs	r3, r3, #31
 8001f2e:	428d      	cmp	r5, r1
 8001f30:	d01e      	beq.n	8001f70 <__gedf2+0x68>
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d016      	beq.n	8001f64 <__gedf2+0x5c>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d11e      	bne.n	8001f78 <__gedf2+0x70>
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	4684      	mov	ip, r0
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d101      	bne.n	8001f46 <__gedf2+0x3e>
 8001f42:	433a      	orrs	r2, r7
 8001f44:	d023      	beq.n	8001f8e <__gedf2+0x86>
 8001f46:	4662      	mov	r2, ip
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d01a      	beq.n	8001f82 <__gedf2+0x7a>
 8001f4c:	459a      	cmp	sl, r3
 8001f4e:	d029      	beq.n	8001fa4 <__gedf2+0x9c>
 8001f50:	4651      	mov	r1, sl
 8001f52:	2002      	movs	r0, #2
 8001f54:	3901      	subs	r1, #1
 8001f56:	4008      	ands	r0, r1
 8001f58:	3801      	subs	r0, #1
 8001f5a:	bc1c      	pop	{r2, r3, r4}
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f64:	0039      	movs	r1, r7
 8001f66:	4311      	orrs	r1, r2
 8001f68:	d0e5      	beq.n	8001f36 <__gedf2+0x2e>
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	4240      	negs	r0, r0
 8001f6e:	e7f4      	b.n	8001f5a <__gedf2+0x52>
 8001f70:	4330      	orrs	r0, r6
 8001f72:	d1fa      	bne.n	8001f6a <__gedf2+0x62>
 8001f74:	42ac      	cmp	r4, r5
 8001f76:	d00f      	beq.n	8001f98 <__gedf2+0x90>
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d10f      	bne.n	8001f9c <__gedf2+0x94>
 8001f7c:	433a      	orrs	r2, r7
 8001f7e:	d0e7      	beq.n	8001f50 <__gedf2+0x48>
 8001f80:	e00c      	b.n	8001f9c <__gedf2+0x94>
 8001f82:	2201      	movs	r2, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4393      	bics	r3, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	e7e5      	b.n	8001f5a <__gedf2+0x52>
 8001f8e:	4663      	mov	r3, ip
 8001f90:	2000      	movs	r0, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0e1      	beq.n	8001f5a <__gedf2+0x52>
 8001f96:	e7db      	b.n	8001f50 <__gedf2+0x48>
 8001f98:	433a      	orrs	r2, r7
 8001f9a:	d1e6      	bne.n	8001f6a <__gedf2+0x62>
 8001f9c:	459a      	cmp	sl, r3
 8001f9e:	d1d7      	bne.n	8001f50 <__gedf2+0x48>
 8001fa0:	42a5      	cmp	r5, r4
 8001fa2:	dcd5      	bgt.n	8001f50 <__gedf2+0x48>
 8001fa4:	42a5      	cmp	r5, r4
 8001fa6:	db05      	blt.n	8001fb4 <__gedf2+0xac>
 8001fa8:	42be      	cmp	r6, r7
 8001faa:	d8d1      	bhi.n	8001f50 <__gedf2+0x48>
 8001fac:	d008      	beq.n	8001fc0 <__gedf2+0xb8>
 8001fae:	2000      	movs	r0, #0
 8001fb0:	42be      	cmp	r6, r7
 8001fb2:	d2d2      	bcs.n	8001f5a <__gedf2+0x52>
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	3801      	subs	r0, #1
 8001fba:	4398      	bics	r0, r3
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	e7cc      	b.n	8001f5a <__gedf2+0x52>
 8001fc0:	45c8      	cmp	r8, r9
 8001fc2:	d8c5      	bhi.n	8001f50 <__gedf2+0x48>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	45c8      	cmp	r8, r9
 8001fc8:	d3f4      	bcc.n	8001fb4 <__gedf2+0xac>
 8001fca:	e7c6      	b.n	8001f5a <__gedf2+0x52>
 8001fcc:	000007ff 	.word	0x000007ff

08001fd0 <__ledf2>:
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	464f      	mov	r7, r9
 8001fd4:	4646      	mov	r6, r8
 8001fd6:	46d6      	mov	lr, sl
 8001fd8:	004d      	lsls	r5, r1, #1
 8001fda:	b5c0      	push	{r6, r7, lr}
 8001fdc:	030e      	lsls	r6, r1, #12
 8001fde:	0fc9      	lsrs	r1, r1, #31
 8001fe0:	468a      	mov	sl, r1
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <__ledf2+0xcc>)
 8001fe4:	031f      	lsls	r7, r3, #12
 8001fe6:	005c      	lsls	r4, r3, #1
 8001fe8:	4680      	mov	r8, r0
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	0d6d      	lsrs	r5, r5, #21
 8001fee:	4691      	mov	r9, r2
 8001ff0:	0b3f      	lsrs	r7, r7, #12
 8001ff2:	0d64      	lsrs	r4, r4, #21
 8001ff4:	0fdb      	lsrs	r3, r3, #31
 8001ff6:	428d      	cmp	r5, r1
 8001ff8:	d018      	beq.n	800202c <__ledf2+0x5c>
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d011      	beq.n	8002022 <__ledf2+0x52>
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d118      	bne.n	8002034 <__ledf2+0x64>
 8002002:	4330      	orrs	r0, r6
 8002004:	4684      	mov	ip, r0
 8002006:	2c00      	cmp	r4, #0
 8002008:	d11e      	bne.n	8002048 <__ledf2+0x78>
 800200a:	433a      	orrs	r2, r7
 800200c:	d11c      	bne.n	8002048 <__ledf2+0x78>
 800200e:	4663      	mov	r3, ip
 8002010:	2000      	movs	r0, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <__ledf2+0xa8>
 8002016:	4651      	mov	r1, sl
 8002018:	2002      	movs	r0, #2
 800201a:	3901      	subs	r1, #1
 800201c:	4008      	ands	r0, r1
 800201e:	3801      	subs	r0, #1
 8002020:	e02a      	b.n	8002078 <__ledf2+0xa8>
 8002022:	0039      	movs	r1, r7
 8002024:	4311      	orrs	r1, r2
 8002026:	d0ea      	beq.n	8001ffe <__ledf2+0x2e>
 8002028:	2002      	movs	r0, #2
 800202a:	e025      	b.n	8002078 <__ledf2+0xa8>
 800202c:	4330      	orrs	r0, r6
 800202e:	d1fb      	bne.n	8002028 <__ledf2+0x58>
 8002030:	42ac      	cmp	r4, r5
 8002032:	d026      	beq.n	8002082 <__ledf2+0xb2>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d126      	bne.n	8002086 <__ledf2+0xb6>
 8002038:	433a      	orrs	r2, r7
 800203a:	d124      	bne.n	8002086 <__ledf2+0xb6>
 800203c:	4651      	mov	r1, sl
 800203e:	2002      	movs	r0, #2
 8002040:	3901      	subs	r1, #1
 8002042:	4008      	ands	r0, r1
 8002044:	3801      	subs	r0, #1
 8002046:	e017      	b.n	8002078 <__ledf2+0xa8>
 8002048:	4662      	mov	r2, ip
 800204a:	2a00      	cmp	r2, #0
 800204c:	d00f      	beq.n	800206e <__ledf2+0x9e>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1e1      	bne.n	8002016 <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	db05      	blt.n	8002062 <__ledf2+0x92>
 8002056:	42be      	cmp	r6, r7
 8002058:	d8dd      	bhi.n	8002016 <__ledf2+0x46>
 800205a:	d019      	beq.n	8002090 <__ledf2+0xc0>
 800205c:	2000      	movs	r0, #0
 800205e:	42be      	cmp	r6, r7
 8002060:	d20a      	bcs.n	8002078 <__ledf2+0xa8>
 8002062:	4650      	mov	r0, sl
 8002064:	2301      	movs	r3, #1
 8002066:	3801      	subs	r0, #1
 8002068:	4398      	bics	r0, r3
 800206a:	3001      	adds	r0, #1
 800206c:	e004      	b.n	8002078 <__ledf2+0xa8>
 800206e:	2201      	movs	r2, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	4393      	bics	r3, r2
 8002074:	0018      	movs	r0, r3
 8002076:	3001      	adds	r0, #1
 8002078:	bc1c      	pop	{r2, r3, r4}
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	46a2      	mov	sl, r4
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	433a      	orrs	r2, r7
 8002084:	d1d0      	bne.n	8002028 <__ledf2+0x58>
 8002086:	459a      	cmp	sl, r3
 8002088:	d1c5      	bne.n	8002016 <__ledf2+0x46>
 800208a:	42a5      	cmp	r5, r4
 800208c:	dcc3      	bgt.n	8002016 <__ledf2+0x46>
 800208e:	e7e0      	b.n	8002052 <__ledf2+0x82>
 8002090:	45c8      	cmp	r8, r9
 8002092:	d8c0      	bhi.n	8002016 <__ledf2+0x46>
 8002094:	2000      	movs	r0, #0
 8002096:	45c8      	cmp	r8, r9
 8002098:	d3e3      	bcc.n	8002062 <__ledf2+0x92>
 800209a:	e7ed      	b.n	8002078 <__ledf2+0xa8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_dmul>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	4657      	mov	r7, sl
 80020a4:	46de      	mov	lr, fp
 80020a6:	464e      	mov	r6, r9
 80020a8:	4645      	mov	r5, r8
 80020aa:	b5e0      	push	{r5, r6, r7, lr}
 80020ac:	4683      	mov	fp, r0
 80020ae:	0006      	movs	r6, r0
 80020b0:	030f      	lsls	r7, r1, #12
 80020b2:	0048      	lsls	r0, r1, #1
 80020b4:	b087      	sub	sp, #28
 80020b6:	4692      	mov	sl, r2
 80020b8:	001d      	movs	r5, r3
 80020ba:	0b3f      	lsrs	r7, r7, #12
 80020bc:	0d40      	lsrs	r0, r0, #21
 80020be:	0fcc      	lsrs	r4, r1, #31
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x26>
 80020c4:	e06f      	b.n	80021a6 <__aeabi_dmul+0x106>
 80020c6:	4bde      	ldr	r3, [pc, #888]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d038      	beq.n	800213e <__aeabi_dmul+0x9e>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	00ff      	lsls	r7, r7, #3
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431f      	orrs	r7, r3
 80020d4:	0f73      	lsrs	r3, r6, #29
 80020d6:	433b      	orrs	r3, r7
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	4bda      	ldr	r3, [pc, #872]	; (8002444 <__aeabi_dmul+0x3a4>)
 80020dc:	2700      	movs	r7, #0
 80020de:	4699      	mov	r9, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	469b      	mov	fp, r3
 80020e4:	00f6      	lsls	r6, r6, #3
 80020e6:	4481      	add	r9, r0
 80020e8:	032b      	lsls	r3, r5, #12
 80020ea:	0069      	lsls	r1, r5, #1
 80020ec:	0b1b      	lsrs	r3, r3, #12
 80020ee:	4652      	mov	r2, sl
 80020f0:	4698      	mov	r8, r3
 80020f2:	0d49      	lsrs	r1, r1, #21
 80020f4:	0fed      	lsrs	r5, r5, #31
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x5c>
 80020fa:	e085      	b.n	8002208 <__aeabi_dmul+0x168>
 80020fc:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d100      	bne.n	8002104 <__aeabi_dmul+0x64>
 8002102:	e073      	b.n	80021ec <__aeabi_dmul+0x14c>
 8002104:	4643      	mov	r3, r8
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	48cc      	ldr	r0, [pc, #816]	; (8002444 <__aeabi_dmul+0x3a4>)
 8002112:	0f52      	lsrs	r2, r2, #29
 8002114:	4684      	mov	ip, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	4652      	mov	r2, sl
 800211a:	2000      	movs	r0, #0
 800211c:	4461      	add	r1, ip
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	4489      	add	r9, r1
 8002122:	0021      	movs	r1, r4
 8002124:	4069      	eors	r1, r5
 8002126:	9100      	str	r1, [sp, #0]
 8002128:	468c      	mov	ip, r1
 800212a:	2101      	movs	r1, #1
 800212c:	4449      	add	r1, r9
 800212e:	468a      	mov	sl, r1
 8002130:	2f0f      	cmp	r7, #15
 8002132:	d900      	bls.n	8002136 <__aeabi_dmul+0x96>
 8002134:	e090      	b.n	8002258 <__aeabi_dmul+0x1b8>
 8002136:	49c4      	ldr	r1, [pc, #784]	; (8002448 <__aeabi_dmul+0x3a8>)
 8002138:	00bf      	lsls	r7, r7, #2
 800213a:	59cf      	ldr	r7, [r1, r7]
 800213c:	46bf      	mov	pc, r7
 800213e:	465b      	mov	r3, fp
 8002140:	433b      	orrs	r3, r7
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	d000      	beq.n	8002148 <__aeabi_dmul+0xa8>
 8002146:	e16a      	b.n	800241e <__aeabi_dmul+0x37e>
 8002148:	2302      	movs	r3, #2
 800214a:	2708      	movs	r7, #8
 800214c:	2600      	movs	r6, #0
 800214e:	4681      	mov	r9, r0
 8002150:	469b      	mov	fp, r3
 8002152:	e7c9      	b.n	80020e8 <__aeabi_dmul+0x48>
 8002154:	0032      	movs	r2, r6
 8002156:	4658      	mov	r0, fp
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	4661      	mov	r1, ip
 800215c:	9100      	str	r1, [sp, #0]
 800215e:	2802      	cmp	r0, #2
 8002160:	d100      	bne.n	8002164 <__aeabi_dmul+0xc4>
 8002162:	e075      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002164:	2803      	cmp	r0, #3
 8002166:	d100      	bne.n	800216a <__aeabi_dmul+0xca>
 8002168:	e1fe      	b.n	8002568 <__aeabi_dmul+0x4c8>
 800216a:	2801      	cmp	r0, #1
 800216c:	d000      	beq.n	8002170 <__aeabi_dmul+0xd0>
 800216e:	e12c      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002170:	2300      	movs	r3, #0
 8002172:	2700      	movs	r7, #0
 8002174:	2600      	movs	r6, #0
 8002176:	2500      	movs	r5, #0
 8002178:	033f      	lsls	r7, r7, #12
 800217a:	0d2a      	lsrs	r2, r5, #20
 800217c:	0b3f      	lsrs	r7, r7, #12
 800217e:	48b3      	ldr	r0, [pc, #716]	; (800244c <__aeabi_dmul+0x3ac>)
 8002180:	0512      	lsls	r2, r2, #20
 8002182:	433a      	orrs	r2, r7
 8002184:	4002      	ands	r2, r0
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	4313      	orrs	r3, r2
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	07d1      	lsls	r1, r2, #31
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	430b      	orrs	r3, r1
 8002194:	0030      	movs	r0, r6
 8002196:	0019      	movs	r1, r3
 8002198:	b007      	add	sp, #28
 800219a:	bc3c      	pop	{r2, r3, r4, r5}
 800219c:	4690      	mov	r8, r2
 800219e:	4699      	mov	r9, r3
 80021a0:	46a2      	mov	sl, r4
 80021a2:	46ab      	mov	fp, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	465b      	mov	r3, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x110>
 80021ae:	e12f      	b.n	8002410 <__aeabi_dmul+0x370>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x116>
 80021b4:	e1a5      	b.n	8002502 <__aeabi_dmul+0x462>
 80021b6:	0038      	movs	r0, r7
 80021b8:	f000 fec0 	bl	8002f3c <__clzsi2>
 80021bc:	0003      	movs	r3, r0
 80021be:	3b0b      	subs	r3, #11
 80021c0:	2b1c      	cmp	r3, #28
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dmul+0x126>
 80021c4:	e196      	b.n	80024f4 <__aeabi_dmul+0x454>
 80021c6:	221d      	movs	r2, #29
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	465a      	mov	r2, fp
 80021cc:	0001      	movs	r1, r0
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	465e      	mov	r6, fp
 80021d2:	3908      	subs	r1, #8
 80021d4:	408f      	lsls	r7, r1
 80021d6:	0013      	movs	r3, r2
 80021d8:	408e      	lsls	r6, r1
 80021da:	433b      	orrs	r3, r7
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <__aeabi_dmul+0x3b0>)
 80021e0:	2700      	movs	r7, #0
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	4699      	mov	r9, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	469b      	mov	fp, r3
 80021ea:	e77d      	b.n	80020e8 <__aeabi_dmul+0x48>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4653      	mov	r3, sl
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4993      	ldr	r1, [pc, #588]	; (8002440 <__aeabi_dmul+0x3a0>)
 80021f4:	468c      	mov	ip, r1
 80021f6:	44e1      	add	r9, ip
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d000      	beq.n	80021fe <__aeabi_dmul+0x15e>
 80021fc:	e11a      	b.n	8002434 <__aeabi_dmul+0x394>
 80021fe:	2202      	movs	r2, #2
 8002200:	2002      	movs	r0, #2
 8002202:	4317      	orrs	r7, r2
 8002204:	2200      	movs	r2, #0
 8002206:	e78c      	b.n	8002122 <__aeabi_dmul+0x82>
 8002208:	4313      	orrs	r3, r2
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x16e>
 800220c:	e10d      	b.n	800242a <__aeabi_dmul+0x38a>
 800220e:	4643      	mov	r3, r8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0x176>
 8002214:	e181      	b.n	800251a <__aeabi_dmul+0x47a>
 8002216:	4640      	mov	r0, r8
 8002218:	f000 fe90 	bl	8002f3c <__clzsi2>
 800221c:	0002      	movs	r2, r0
 800221e:	3a0b      	subs	r2, #11
 8002220:	2a1c      	cmp	r2, #28
 8002222:	dd00      	ble.n	8002226 <__aeabi_dmul+0x186>
 8002224:	e172      	b.n	800250c <__aeabi_dmul+0x46c>
 8002226:	0001      	movs	r1, r0
 8002228:	4643      	mov	r3, r8
 800222a:	3908      	subs	r1, #8
 800222c:	408b      	lsls	r3, r1
 800222e:	4698      	mov	r8, r3
 8002230:	231d      	movs	r3, #29
 8002232:	1a9a      	subs	r2, r3, r2
 8002234:	4653      	mov	r3, sl
 8002236:	40d3      	lsrs	r3, r2
 8002238:	001a      	movs	r2, r3
 800223a:	4643      	mov	r3, r8
 800223c:	4313      	orrs	r3, r2
 800223e:	4652      	mov	r2, sl
 8002240:	408a      	lsls	r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	1a08      	subs	r0, r1, r0
 8002246:	4982      	ldr	r1, [pc, #520]	; (8002450 <__aeabi_dmul+0x3b0>)
 8002248:	4689      	mov	r9, r1
 800224a:	4481      	add	r9, r0
 800224c:	2000      	movs	r0, #0
 800224e:	e768      	b.n	8002122 <__aeabi_dmul+0x82>
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <__aeabi_dmul+0x3a0>)
 8002252:	2700      	movs	r7, #0
 8002254:	2600      	movs	r6, #0
 8002256:	e78e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002258:	0c14      	lsrs	r4, r2, #16
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	0c12      	lsrs	r2, r2, #16
 800225e:	0011      	movs	r1, r2
 8002260:	0c37      	lsrs	r7, r6, #16
 8002262:	0436      	lsls	r6, r6, #16
 8002264:	0c35      	lsrs	r5, r6, #16
 8002266:	4379      	muls	r1, r7
 8002268:	0028      	movs	r0, r5
 800226a:	468c      	mov	ip, r1
 800226c:	002e      	movs	r6, r5
 800226e:	4360      	muls	r0, r4
 8002270:	4460      	add	r0, ip
 8002272:	4683      	mov	fp, r0
 8002274:	4356      	muls	r6, r2
 8002276:	0021      	movs	r1, r4
 8002278:	0c30      	lsrs	r0, r6, #16
 800227a:	4680      	mov	r8, r0
 800227c:	4658      	mov	r0, fp
 800227e:	4379      	muls	r1, r7
 8002280:	4440      	add	r0, r8
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	4584      	cmp	ip, r0
 8002286:	d906      	bls.n	8002296 <__aeabi_dmul+0x1f6>
 8002288:	4688      	mov	r8, r1
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0249      	lsls	r1, r1, #9
 800228e:	468c      	mov	ip, r1
 8002290:	44e0      	add	r8, ip
 8002292:	4641      	mov	r1, r8
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	0436      	lsls	r6, r6, #16
 8002298:	0c01      	lsrs	r1, r0, #16
 800229a:	0c36      	lsrs	r6, r6, #16
 800229c:	0400      	lsls	r0, r0, #16
 800229e:	468b      	mov	fp, r1
 80022a0:	1981      	adds	r1, r0, r6
 80022a2:	0c1e      	lsrs	r6, r3, #16
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	0019      	movs	r1, r3
 80022ac:	4379      	muls	r1, r7
 80022ae:	468c      	mov	ip, r1
 80022b0:	0028      	movs	r0, r5
 80022b2:	4375      	muls	r5, r6
 80022b4:	4465      	add	r5, ip
 80022b6:	46a8      	mov	r8, r5
 80022b8:	4358      	muls	r0, r3
 80022ba:	0c05      	lsrs	r5, r0, #16
 80022bc:	4445      	add	r5, r8
 80022be:	4377      	muls	r7, r6
 80022c0:	42a9      	cmp	r1, r5
 80022c2:	d903      	bls.n	80022cc <__aeabi_dmul+0x22c>
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	468c      	mov	ip, r1
 80022ca:	4467      	add	r7, ip
 80022cc:	0c29      	lsrs	r1, r5, #16
 80022ce:	468c      	mov	ip, r1
 80022d0:	0039      	movs	r1, r7
 80022d2:	0400      	lsls	r0, r0, #16
 80022d4:	0c00      	lsrs	r0, r0, #16
 80022d6:	042d      	lsls	r5, r5, #16
 80022d8:	182d      	adds	r5, r5, r0
 80022da:	4461      	add	r1, ip
 80022dc:	44ab      	add	fp, r5
 80022de:	9105      	str	r1, [sp, #20]
 80022e0:	4659      	mov	r1, fp
 80022e2:	9104      	str	r1, [sp, #16]
 80022e4:	9901      	ldr	r1, [sp, #4]
 80022e6:	040f      	lsls	r7, r1, #16
 80022e8:	0c3f      	lsrs	r7, r7, #16
 80022ea:	0c08      	lsrs	r0, r1, #16
 80022ec:	0039      	movs	r1, r7
 80022ee:	4351      	muls	r1, r2
 80022f0:	4342      	muls	r2, r0
 80022f2:	4690      	mov	r8, r2
 80022f4:	0002      	movs	r2, r0
 80022f6:	468c      	mov	ip, r1
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468b      	mov	fp, r1
 80022fc:	4362      	muls	r2, r4
 80022fe:	437c      	muls	r4, r7
 8002300:	4444      	add	r4, r8
 8002302:	445c      	add	r4, fp
 8002304:	45a0      	cmp	r8, r4
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x270>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	4688      	mov	r8, r1
 800230e:	4442      	add	r2, r8
 8002310:	0c21      	lsrs	r1, r4, #16
 8002312:	4688      	mov	r8, r1
 8002314:	4661      	mov	r1, ip
 8002316:	0409      	lsls	r1, r1, #16
 8002318:	0c09      	lsrs	r1, r1, #16
 800231a:	468c      	mov	ip, r1
 800231c:	0039      	movs	r1, r7
 800231e:	4359      	muls	r1, r3
 8002320:	4343      	muls	r3, r0
 8002322:	4370      	muls	r0, r6
 8002324:	437e      	muls	r6, r7
 8002326:	0c0f      	lsrs	r7, r1, #16
 8002328:	18f6      	adds	r6, r6, r3
 800232a:	0424      	lsls	r4, r4, #16
 800232c:	19be      	adds	r6, r7, r6
 800232e:	4464      	add	r4, ip
 8002330:	4442      	add	r2, r8
 8002332:	468c      	mov	ip, r1
 8002334:	42b3      	cmp	r3, r6
 8002336:	d903      	bls.n	8002340 <__aeabi_dmul+0x2a0>
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	4698      	mov	r8, r3
 800233e:	4440      	add	r0, r8
 8002340:	9b02      	ldr	r3, [sp, #8]
 8002342:	4661      	mov	r1, ip
 8002344:	4698      	mov	r8, r3
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	0437      	lsls	r7, r6, #16
 800234a:	4443      	add	r3, r8
 800234c:	469b      	mov	fp, r3
 800234e:	45ab      	cmp	fp, r5
 8002350:	41ad      	sbcs	r5, r5
 8002352:	426b      	negs	r3, r5
 8002354:	040d      	lsls	r5, r1, #16
 8002356:	9905      	ldr	r1, [sp, #20]
 8002358:	0c2d      	lsrs	r5, r5, #16
 800235a:	468c      	mov	ip, r1
 800235c:	197f      	adds	r7, r7, r5
 800235e:	4467      	add	r7, ip
 8002360:	18fd      	adds	r5, r7, r3
 8002362:	46a8      	mov	r8, r5
 8002364:	465d      	mov	r5, fp
 8002366:	192d      	adds	r5, r5, r4
 8002368:	42a5      	cmp	r5, r4
 800236a:	41a4      	sbcs	r4, r4
 800236c:	4693      	mov	fp, r2
 800236e:	4264      	negs	r4, r4
 8002370:	46a4      	mov	ip, r4
 8002372:	44c3      	add	fp, r8
 8002374:	44dc      	add	ip, fp
 8002376:	428f      	cmp	r7, r1
 8002378:	41bf      	sbcs	r7, r7
 800237a:	4598      	cmp	r8, r3
 800237c:	419b      	sbcs	r3, r3
 800237e:	4593      	cmp	fp, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	45a4      	cmp	ip, r4
 8002384:	41a4      	sbcs	r4, r4
 8002386:	425b      	negs	r3, r3
 8002388:	427f      	negs	r7, r7
 800238a:	431f      	orrs	r7, r3
 800238c:	0c36      	lsrs	r6, r6, #16
 800238e:	4252      	negs	r2, r2
 8002390:	4264      	negs	r4, r4
 8002392:	19bf      	adds	r7, r7, r6
 8002394:	4322      	orrs	r2, r4
 8002396:	18bf      	adds	r7, r7, r2
 8002398:	4662      	mov	r2, ip
 800239a:	1838      	adds	r0, r7, r0
 800239c:	0243      	lsls	r3, r0, #9
 800239e:	0dd2      	lsrs	r2, r2, #23
 80023a0:	9903      	ldr	r1, [sp, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	026a      	lsls	r2, r5, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	1e50      	subs	r0, r2, #1
 80023aa:	4182      	sbcs	r2, r0
 80023ac:	4661      	mov	r1, ip
 80023ae:	0ded      	lsrs	r5, r5, #23
 80023b0:	432a      	orrs	r2, r5
 80023b2:	024e      	lsls	r6, r1, #9
 80023b4:	4332      	orrs	r2, r6
 80023b6:	01d9      	lsls	r1, r3, #7
 80023b8:	d400      	bmi.n	80023bc <__aeabi_dmul+0x31c>
 80023ba:	e0b3      	b.n	8002524 <__aeabi_dmul+0x484>
 80023bc:	2601      	movs	r6, #1
 80023be:	0850      	lsrs	r0, r2, #1
 80023c0:	4032      	ands	r2, r6
 80023c2:	4302      	orrs	r2, r0
 80023c4:	07de      	lsls	r6, r3, #31
 80023c6:	4332      	orrs	r2, r6
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	4c22      	ldr	r4, [pc, #136]	; (8002454 <__aeabi_dmul+0x3b4>)
 80023cc:	4454      	add	r4, sl
 80023ce:	2c00      	cmp	r4, #0
 80023d0:	dd62      	ble.n	8002498 <__aeabi_dmul+0x3f8>
 80023d2:	0751      	lsls	r1, r2, #29
 80023d4:	d009      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023d6:	200f      	movs	r0, #15
 80023d8:	4010      	ands	r0, r2
 80023da:	2804      	cmp	r0, #4
 80023dc:	d005      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023de:	1d10      	adds	r0, r2, #4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	4252      	negs	r2, r2
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	0002      	movs	r2, r0
 80023ea:	01d9      	lsls	r1, r3, #7
 80023ec:	d504      	bpl.n	80023f8 <__aeabi_dmul+0x358>
 80023ee:	2480      	movs	r4, #128	; 0x80
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <__aeabi_dmul+0x3b8>)
 80023f2:	00e4      	lsls	r4, r4, #3
 80023f4:	4003      	ands	r3, r0
 80023f6:	4454      	add	r4, sl
 80023f8:	4818      	ldr	r0, [pc, #96]	; (800245c <__aeabi_dmul+0x3bc>)
 80023fa:	4284      	cmp	r4, r0
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x360>
 80023fe:	e727      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002400:	075e      	lsls	r6, r3, #29
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	0b1f      	lsrs	r7, r3, #12
 8002408:	0563      	lsls	r3, r4, #21
 800240a:	4316      	orrs	r6, r2
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	e6b2      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002410:	2300      	movs	r3, #0
 8002412:	4699      	mov	r9, r3
 8002414:	3301      	adds	r3, #1
 8002416:	2704      	movs	r7, #4
 8002418:	2600      	movs	r6, #0
 800241a:	469b      	mov	fp, r3
 800241c:	e664      	b.n	80020e8 <__aeabi_dmul+0x48>
 800241e:	2303      	movs	r3, #3
 8002420:	9701      	str	r7, [sp, #4]
 8002422:	4681      	mov	r9, r0
 8002424:	270c      	movs	r7, #12
 8002426:	469b      	mov	fp, r3
 8002428:	e65e      	b.n	80020e8 <__aeabi_dmul+0x48>
 800242a:	2201      	movs	r2, #1
 800242c:	2001      	movs	r0, #1
 800242e:	4317      	orrs	r7, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e676      	b.n	8002122 <__aeabi_dmul+0x82>
 8002434:	2303      	movs	r3, #3
 8002436:	2003      	movs	r0, #3
 8002438:	431f      	orrs	r7, r3
 800243a:	4643      	mov	r3, r8
 800243c:	e671      	b.n	8002122 <__aeabi_dmul+0x82>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	000007ff 	.word	0x000007ff
 8002444:	fffffc01 	.word	0xfffffc01
 8002448:	08017764 	.word	0x08017764
 800244c:	800fffff 	.word	0x800fffff
 8002450:	fffffc0d 	.word	0xfffffc0d
 8002454:	000003ff 	.word	0x000003ff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	000007fe 	.word	0x000007fe
 8002460:	2300      	movs	r3, #0
 8002462:	2780      	movs	r7, #128	; 0x80
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	033f      	lsls	r7, r7, #12
 8002468:	2600      	movs	r6, #0
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <__aeabi_dmul+0x4d8>)
 800246c:	e683      	b.n	8002176 <__aeabi_dmul+0xd6>
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	0032      	movs	r2, r6
 8002472:	46a4      	mov	ip, r4
 8002474:	4658      	mov	r0, fp
 8002476:	e670      	b.n	800215a <__aeabi_dmul+0xba>
 8002478:	46ac      	mov	ip, r5
 800247a:	e66e      	b.n	800215a <__aeabi_dmul+0xba>
 800247c:	2780      	movs	r7, #128	; 0x80
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	033f      	lsls	r7, r7, #12
 8002482:	4239      	tst	r1, r7
 8002484:	d02d      	beq.n	80024e2 <__aeabi_dmul+0x442>
 8002486:	423b      	tst	r3, r7
 8002488:	d12b      	bne.n	80024e2 <__aeabi_dmul+0x442>
 800248a:	431f      	orrs	r7, r3
 800248c:	033f      	lsls	r7, r7, #12
 800248e:	0b3f      	lsrs	r7, r7, #12
 8002490:	9500      	str	r5, [sp, #0]
 8002492:	0016      	movs	r6, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002496:	e66e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002498:	2501      	movs	r5, #1
 800249a:	1b2d      	subs	r5, r5, r4
 800249c:	2d38      	cmp	r5, #56	; 0x38
 800249e:	dd00      	ble.n	80024a2 <__aeabi_dmul+0x402>
 80024a0:	e666      	b.n	8002170 <__aeabi_dmul+0xd0>
 80024a2:	2d1f      	cmp	r5, #31
 80024a4:	dc40      	bgt.n	8002528 <__aeabi_dmul+0x488>
 80024a6:	4835      	ldr	r0, [pc, #212]	; (800257c <__aeabi_dmul+0x4dc>)
 80024a8:	001c      	movs	r4, r3
 80024aa:	4450      	add	r0, sl
 80024ac:	0016      	movs	r6, r2
 80024ae:	4082      	lsls	r2, r0
 80024b0:	4084      	lsls	r4, r0
 80024b2:	40ee      	lsrs	r6, r5
 80024b4:	1e50      	subs	r0, r2, #1
 80024b6:	4182      	sbcs	r2, r0
 80024b8:	4334      	orrs	r4, r6
 80024ba:	4314      	orrs	r4, r2
 80024bc:	40eb      	lsrs	r3, r5
 80024be:	0762      	lsls	r2, r4, #29
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024c2:	220f      	movs	r2, #15
 80024c4:	4022      	ands	r2, r4
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024ca:	0022      	movs	r2, r4
 80024cc:	1d14      	adds	r4, r2, #4
 80024ce:	4294      	cmp	r4, r2
 80024d0:	4180      	sbcs	r0, r0
 80024d2:	4240      	negs	r0, r0
 80024d4:	181b      	adds	r3, r3, r0
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	d53e      	bpl.n	8002558 <__aeabi_dmul+0x4b8>
 80024da:	2301      	movs	r3, #1
 80024dc:	2700      	movs	r7, #0
 80024de:	2600      	movs	r6, #0
 80024e0:	e649      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024e2:	2780      	movs	r7, #128	; 0x80
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	033f      	lsls	r7, r7, #12
 80024e8:	431f      	orrs	r7, r3
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	0b3f      	lsrs	r7, r7, #12
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <__aeabi_dmul+0x4d8>)
 80024f2:	e640      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024f4:	0003      	movs	r3, r0
 80024f6:	465a      	mov	r2, fp
 80024f8:	3b28      	subs	r3, #40	; 0x28
 80024fa:	409a      	lsls	r2, r3
 80024fc:	2600      	movs	r6, #0
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	e66d      	b.n	80021de <__aeabi_dmul+0x13e>
 8002502:	4658      	mov	r0, fp
 8002504:	f000 fd1a 	bl	8002f3c <__clzsi2>
 8002508:	3020      	adds	r0, #32
 800250a:	e657      	b.n	80021bc <__aeabi_dmul+0x11c>
 800250c:	0003      	movs	r3, r0
 800250e:	4652      	mov	r2, sl
 8002510:	3b28      	subs	r3, #40	; 0x28
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	e693      	b.n	8002242 <__aeabi_dmul+0x1a2>
 800251a:	4650      	mov	r0, sl
 800251c:	f000 fd0e 	bl	8002f3c <__clzsi2>
 8002520:	3020      	adds	r0, #32
 8002522:	e67b      	b.n	800221c <__aeabi_dmul+0x17c>
 8002524:	46ca      	mov	sl, r9
 8002526:	e750      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002528:	201f      	movs	r0, #31
 800252a:	001e      	movs	r6, r3
 800252c:	4240      	negs	r0, r0
 800252e:	1b04      	subs	r4, r0, r4
 8002530:	40e6      	lsrs	r6, r4
 8002532:	2d20      	cmp	r5, #32
 8002534:	d003      	beq.n	800253e <__aeabi_dmul+0x49e>
 8002536:	4c12      	ldr	r4, [pc, #72]	; (8002580 <__aeabi_dmul+0x4e0>)
 8002538:	4454      	add	r4, sl
 800253a:	40a3      	lsls	r3, r4
 800253c:	431a      	orrs	r2, r3
 800253e:	1e50      	subs	r0, r2, #1
 8002540:	4182      	sbcs	r2, r0
 8002542:	4332      	orrs	r2, r6
 8002544:	2607      	movs	r6, #7
 8002546:	2700      	movs	r7, #0
 8002548:	4016      	ands	r6, r2
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x4c0>
 800254c:	200f      	movs	r0, #15
 800254e:	2300      	movs	r3, #0
 8002550:	4010      	ands	r0, r2
 8002552:	0014      	movs	r4, r2
 8002554:	2804      	cmp	r0, #4
 8002556:	d1b9      	bne.n	80024cc <__aeabi_dmul+0x42c>
 8002558:	0022      	movs	r2, r4
 800255a:	075e      	lsls	r6, r3, #29
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	0b1f      	lsrs	r7, r3, #12
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	4316      	orrs	r6, r2
 8002564:	2300      	movs	r3, #0
 8002566:	e606      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002568:	2780      	movs	r7, #128	; 0x80
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	0016      	movs	r6, r2
 8002574:	4b00      	ldr	r3, [pc, #0]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002576:	e5fe      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002578:	000007ff 	.word	0x000007ff
 800257c:	0000041e 	.word	0x0000041e
 8002580:	0000043e 	.word	0x0000043e

08002584 <__aeabi_dsub>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	4657      	mov	r7, sl
 8002588:	464e      	mov	r6, r9
 800258a:	4645      	mov	r5, r8
 800258c:	46de      	mov	lr, fp
 800258e:	000c      	movs	r4, r1
 8002590:	0309      	lsls	r1, r1, #12
 8002592:	b5e0      	push	{r5, r6, r7, lr}
 8002594:	0a49      	lsrs	r1, r1, #9
 8002596:	0f46      	lsrs	r6, r0, #29
 8002598:	005f      	lsls	r7, r3, #1
 800259a:	4331      	orrs	r1, r6
 800259c:	031e      	lsls	r6, r3, #12
 800259e:	0fdb      	lsrs	r3, r3, #31
 80025a0:	0a76      	lsrs	r6, r6, #9
 80025a2:	469b      	mov	fp, r3
 80025a4:	0f53      	lsrs	r3, r2, #29
 80025a6:	4333      	orrs	r3, r6
 80025a8:	4ec8      	ldr	r6, [pc, #800]	; (80028cc <__aeabi_dsub+0x348>)
 80025aa:	0065      	lsls	r5, r4, #1
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	0fe4      	lsrs	r4, r4, #31
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	0d6d      	lsrs	r5, r5, #21
 80025b4:	46a2      	mov	sl, r4
 80025b6:	4681      	mov	r9, r0
 80025b8:	0d7f      	lsrs	r7, r7, #21
 80025ba:	469c      	mov	ip, r3
 80025bc:	4690      	mov	r8, r2
 80025be:	42b7      	cmp	r7, r6
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x40>
 80025c2:	e0b9      	b.n	8002738 <__aeabi_dsub+0x1b4>
 80025c4:	465b      	mov	r3, fp
 80025c6:	2601      	movs	r6, #1
 80025c8:	4073      	eors	r3, r6
 80025ca:	469b      	mov	fp, r3
 80025cc:	1bee      	subs	r6, r5, r7
 80025ce:	45a3      	cmp	fp, r4
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x50>
 80025d2:	e083      	b.n	80026dc <__aeabi_dsub+0x158>
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	dd63      	ble.n	80026a0 <__aeabi_dsub+0x11c>
 80025d8:	2f00      	cmp	r7, #0
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x5a>
 80025dc:	e0b1      	b.n	8002742 <__aeabi_dsub+0x1be>
 80025de:	4663      	mov	r3, ip
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x62>
 80025e4:	e123      	b.n	800282e <__aeabi_dsub+0x2aa>
 80025e6:	1e73      	subs	r3, r6, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x6a>
 80025ec:	e1ba      	b.n	8002964 <__aeabi_dsub+0x3e0>
 80025ee:	1a86      	subs	r6, r0, r2
 80025f0:	4663      	mov	r3, ip
 80025f2:	42b0      	cmp	r0, r6
 80025f4:	4180      	sbcs	r0, r0
 80025f6:	2501      	movs	r5, #1
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	4240      	negs	r0, r0
 80025fc:	1a09      	subs	r1, r1, r0
 80025fe:	020b      	lsls	r3, r1, #8
 8002600:	d400      	bmi.n	8002604 <__aeabi_dsub+0x80>
 8002602:	e147      	b.n	8002894 <__aeabi_dsub+0x310>
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	0a4b      	lsrs	r3, r1, #9
 8002608:	4698      	mov	r8, r3
 800260a:	4643      	mov	r3, r8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x8e>
 8002610:	e189      	b.n	8002926 <__aeabi_dsub+0x3a2>
 8002612:	4640      	mov	r0, r8
 8002614:	f000 fc92 	bl	8002f3c <__clzsi2>
 8002618:	0003      	movs	r3, r0
 800261a:	3b08      	subs	r3, #8
 800261c:	2b1f      	cmp	r3, #31
 800261e:	dd00      	ble.n	8002622 <__aeabi_dsub+0x9e>
 8002620:	e17c      	b.n	800291c <__aeabi_dsub+0x398>
 8002622:	2220      	movs	r2, #32
 8002624:	0030      	movs	r0, r6
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	4641      	mov	r1, r8
 800262a:	40d0      	lsrs	r0, r2
 800262c:	4099      	lsls	r1, r3
 800262e:	0002      	movs	r2, r0
 8002630:	409e      	lsls	r6, r3
 8002632:	430a      	orrs	r2, r1
 8002634:	429d      	cmp	r5, r3
 8002636:	dd00      	ble.n	800263a <__aeabi_dsub+0xb6>
 8002638:	e16a      	b.n	8002910 <__aeabi_dsub+0x38c>
 800263a:	1b5d      	subs	r5, r3, r5
 800263c:	1c6b      	adds	r3, r5, #1
 800263e:	2b1f      	cmp	r3, #31
 8002640:	dd00      	ble.n	8002644 <__aeabi_dsub+0xc0>
 8002642:	e194      	b.n	800296e <__aeabi_dsub+0x3ea>
 8002644:	2120      	movs	r1, #32
 8002646:	0010      	movs	r0, r2
 8002648:	0035      	movs	r5, r6
 800264a:	1ac9      	subs	r1, r1, r3
 800264c:	408e      	lsls	r6, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4088      	lsls	r0, r1
 8002652:	40dd      	lsrs	r5, r3
 8002654:	1e71      	subs	r1, r6, #1
 8002656:	418e      	sbcs	r6, r1
 8002658:	0011      	movs	r1, r2
 800265a:	2207      	movs	r2, #7
 800265c:	4328      	orrs	r0, r5
 800265e:	2500      	movs	r5, #0
 8002660:	4306      	orrs	r6, r0
 8002662:	4032      	ands	r2, r6
 8002664:	2a00      	cmp	r2, #0
 8002666:	d009      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002668:	230f      	movs	r3, #15
 800266a:	4033      	ands	r3, r6
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	42b3      	cmp	r3, r6
 8002674:	41b6      	sbcs	r6, r6
 8002676:	4276      	negs	r6, r6
 8002678:	1989      	adds	r1, r1, r6
 800267a:	001e      	movs	r6, r3
 800267c:	020b      	lsls	r3, r1, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xfe>
 8002680:	e23d      	b.n	8002afe <__aeabi_dsub+0x57a>
 8002682:	1c6a      	adds	r2, r5, #1
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <__aeabi_dsub+0x348>)
 8002686:	0555      	lsls	r5, r2, #21
 8002688:	0d6d      	lsrs	r5, r5, #21
 800268a:	429a      	cmp	r2, r3
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x10c>
 800268e:	e119      	b.n	80028c4 <__aeabi_dsub+0x340>
 8002690:	4a8f      	ldr	r2, [pc, #572]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002692:	08f6      	lsrs	r6, r6, #3
 8002694:	400a      	ands	r2, r1
 8002696:	0757      	lsls	r7, r2, #29
 8002698:	0252      	lsls	r2, r2, #9
 800269a:	4337      	orrs	r7, r6
 800269c:	0b12      	lsrs	r2, r2, #12
 800269e:	e09b      	b.n	80027d8 <__aeabi_dsub+0x254>
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x122>
 80026a4:	e0c5      	b.n	8002832 <__aeabi_dsub+0x2ae>
 80026a6:	1c6e      	adds	r6, r5, #1
 80026a8:	0576      	lsls	r6, r6, #21
 80026aa:	0d76      	lsrs	r6, r6, #21
 80026ac:	2e01      	cmp	r6, #1
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_dsub+0x12e>
 80026b0:	e148      	b.n	8002944 <__aeabi_dsub+0x3c0>
 80026b2:	4667      	mov	r7, ip
 80026b4:	1a86      	subs	r6, r0, r2
 80026b6:	1bcb      	subs	r3, r1, r7
 80026b8:	42b0      	cmp	r0, r6
 80026ba:	41bf      	sbcs	r7, r7
 80026bc:	427f      	negs	r7, r7
 80026be:	46b8      	mov	r8, r7
 80026c0:	001f      	movs	r7, r3
 80026c2:	4643      	mov	r3, r8
 80026c4:	1aff      	subs	r7, r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	46b8      	mov	r8, r7
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	d500      	bpl.n	80026d0 <__aeabi_dsub+0x14c>
 80026ce:	e15f      	b.n	8002990 <__aeabi_dsub+0x40c>
 80026d0:	4337      	orrs	r7, r6
 80026d2:	d19a      	bne.n	800260a <__aeabi_dsub+0x86>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2500      	movs	r5, #0
 80026da:	e079      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	dc00      	bgt.n	80026e2 <__aeabi_dsub+0x15e>
 80026e0:	e0fa      	b.n	80028d8 <__aeabi_dsub+0x354>
 80026e2:	2f00      	cmp	r7, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x164>
 80026e6:	e08d      	b.n	8002804 <__aeabi_dsub+0x280>
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <__aeabi_dsub+0x348>)
 80026ea:	429d      	cmp	r5, r3
 80026ec:	d067      	beq.n	80027be <__aeabi_dsub+0x23a>
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	4667      	mov	r7, ip
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431f      	orrs	r7, r3
 80026f6:	46bc      	mov	ip, r7
 80026f8:	2e38      	cmp	r6, #56	; 0x38
 80026fa:	dc00      	bgt.n	80026fe <__aeabi_dsub+0x17a>
 80026fc:	e152      	b.n	80029a4 <__aeabi_dsub+0x420>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	4193      	sbcs	r3, r2
 8002706:	181e      	adds	r6, r3, r0
 8002708:	4286      	cmp	r6, r0
 800270a:	4180      	sbcs	r0, r0
 800270c:	4240      	negs	r0, r0
 800270e:	1809      	adds	r1, r1, r0
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x192>
 8002714:	e0be      	b.n	8002894 <__aeabi_dsub+0x310>
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <__aeabi_dsub+0x348>)
 8002718:	3501      	adds	r5, #1
 800271a:	429d      	cmp	r5, r3
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x19c>
 800271e:	e0d2      	b.n	80028c6 <__aeabi_dsub+0x342>
 8002720:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002722:	0873      	lsrs	r3, r6, #1
 8002724:	400a      	ands	r2, r1
 8002726:	2101      	movs	r1, #1
 8002728:	400e      	ands	r6, r1
 800272a:	431e      	orrs	r6, r3
 800272c:	0851      	lsrs	r1, r2, #1
 800272e:	07d3      	lsls	r3, r2, #31
 8002730:	2207      	movs	r2, #7
 8002732:	431e      	orrs	r6, r3
 8002734:	4032      	ands	r2, r6
 8002736:	e795      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002738:	001e      	movs	r6, r3
 800273a:	4316      	orrs	r6, r2
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1bc>
 800273e:	e745      	b.n	80025cc <__aeabi_dsub+0x48>
 8002740:	e740      	b.n	80025c4 <__aeabi_dsub+0x40>
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <__aeabi_dsub+0x348>)
 8002744:	429d      	cmp	r5, r3
 8002746:	d03a      	beq.n	80027be <__aeabi_dsub+0x23a>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	4667      	mov	r7, ip
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431f      	orrs	r7, r3
 8002750:	46bc      	mov	ip, r7
 8002752:	2e38      	cmp	r6, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x1d4>
 8002756:	e0eb      	b.n	8002930 <__aeabi_dsub+0x3ac>
 8002758:	2e1f      	cmp	r6, #31
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x1da>
 800275c:	e13a      	b.n	80029d4 <__aeabi_dsub+0x450>
 800275e:	0033      	movs	r3, r6
 8002760:	4667      	mov	r7, ip
 8002762:	3b20      	subs	r3, #32
 8002764:	40df      	lsrs	r7, r3
 8002766:	003b      	movs	r3, r7
 8002768:	2e20      	cmp	r6, #32
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x1f4>
 800276c:	2740      	movs	r7, #64	; 0x40
 800276e:	1bbf      	subs	r7, r7, r6
 8002770:	4666      	mov	r6, ip
 8002772:	40be      	lsls	r6, r7
 8002774:	4332      	orrs	r2, r6
 8002776:	4690      	mov	r8, r2
 8002778:	4646      	mov	r6, r8
 800277a:	1e72      	subs	r2, r6, #1
 800277c:	4196      	sbcs	r6, r2
 800277e:	4333      	orrs	r3, r6
 8002780:	e0da      	b.n	8002938 <__aeabi_dsub+0x3b4>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x204>
 8002786:	e214      	b.n	8002bb2 <__aeabi_dsub+0x62e>
 8002788:	4663      	mov	r3, ip
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x20c>
 800278e:	e168      	b.n	8002a62 <__aeabi_dsub+0x4de>
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	074e      	lsls	r6, r1, #29
 8002794:	08c0      	lsrs	r0, r0, #3
 8002796:	08c9      	lsrs	r1, r1, #3
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	4306      	orrs	r6, r0
 800279c:	4219      	tst	r1, r3
 800279e:	d008      	beq.n	80027b2 <__aeabi_dsub+0x22e>
 80027a0:	4660      	mov	r0, ip
 80027a2:	08c0      	lsrs	r0, r0, #3
 80027a4:	4218      	tst	r0, r3
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x22e>
 80027a8:	4663      	mov	r3, ip
 80027aa:	0001      	movs	r1, r0
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	075e      	lsls	r6, r3, #29
 80027b0:	4316      	orrs	r6, r2
 80027b2:	00f3      	lsls	r3, r6, #3
 80027b4:	4699      	mov	r9, r3
 80027b6:	00c9      	lsls	r1, r1, #3
 80027b8:	0f72      	lsrs	r2, r6, #29
 80027ba:	4d44      	ldr	r5, [pc, #272]	; (80028cc <__aeabi_dsub+0x348>)
 80027bc:	4311      	orrs	r1, r2
 80027be:	464b      	mov	r3, r9
 80027c0:	08de      	lsrs	r6, r3, #3
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <__aeabi_dsub+0x348>)
 80027c4:	074f      	lsls	r7, r1, #29
 80027c6:	4337      	orrs	r7, r6
 80027c8:	08ca      	lsrs	r2, r1, #3
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x24c>
 80027ce:	e06e      	b.n	80028ae <__aeabi_dsub+0x32a>
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	056d      	lsls	r5, r5, #21
 80027d4:	0b12      	lsrs	r2, r2, #12
 80027d6:	0d6d      	lsrs	r5, r5, #21
 80027d8:	2100      	movs	r1, #0
 80027da:	0312      	lsls	r2, r2, #12
 80027dc:	0b13      	lsrs	r3, r2, #12
 80027de:	0d0a      	lsrs	r2, r1, #20
 80027e0:	0512      	lsls	r2, r2, #20
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <__aeabi_dsub+0x350>)
 80027e6:	052d      	lsls	r5, r5, #20
 80027e8:	4013      	ands	r3, r2
 80027ea:	432b      	orrs	r3, r5
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	07e4      	lsls	r4, r4, #31
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	4323      	orrs	r3, r4
 80027f4:	0038      	movs	r0, r7
 80027f6:	0019      	movs	r1, r3
 80027f8:	bc3c      	pop	{r2, r3, r4, r5}
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	46ab      	mov	fp, r5
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002804:	4663      	mov	r3, ip
 8002806:	4313      	orrs	r3, r2
 8002808:	d011      	beq.n	800282e <__aeabi_dsub+0x2aa>
 800280a:	1e73      	subs	r3, r6, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x28e>
 8002810:	e107      	b.n	8002a22 <__aeabi_dsub+0x49e>
 8002812:	1886      	adds	r6, r0, r2
 8002814:	4286      	cmp	r6, r0
 8002816:	4180      	sbcs	r0, r0
 8002818:	4461      	add	r1, ip
 800281a:	4240      	negs	r0, r0
 800281c:	1809      	adds	r1, r1, r0
 800281e:	2501      	movs	r5, #1
 8002820:	020b      	lsls	r3, r1, #8
 8002822:	d537      	bpl.n	8002894 <__aeabi_dsub+0x310>
 8002824:	2502      	movs	r5, #2
 8002826:	e77b      	b.n	8002720 <__aeabi_dsub+0x19c>
 8002828:	003e      	movs	r6, r7
 800282a:	4661      	mov	r1, ip
 800282c:	4691      	mov	r9, r2
 800282e:	0035      	movs	r5, r6
 8002830:	e7c5      	b.n	80027be <__aeabi_dsub+0x23a>
 8002832:	465c      	mov	r4, fp
 8002834:	2d00      	cmp	r5, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x2b6>
 8002838:	e0e1      	b.n	80029fe <__aeabi_dsub+0x47a>
 800283a:	000b      	movs	r3, r1
 800283c:	4303      	orrs	r3, r0
 800283e:	d0f3      	beq.n	8002828 <__aeabi_dsub+0x2a4>
 8002840:	1c73      	adds	r3, r6, #1
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x2c2>
 8002844:	e1ac      	b.n	8002ba0 <__aeabi_dsub+0x61c>
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <__aeabi_dsub+0x348>)
 8002848:	429f      	cmp	r7, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x2ca>
 800284c:	e13a      	b.n	8002ac4 <__aeabi_dsub+0x540>
 800284e:	43f3      	mvns	r3, r6
 8002850:	2b38      	cmp	r3, #56	; 0x38
 8002852:	dd00      	ble.n	8002856 <__aeabi_dsub+0x2d2>
 8002854:	e16f      	b.n	8002b36 <__aeabi_dsub+0x5b2>
 8002856:	2b1f      	cmp	r3, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x2d8>
 800285a:	e18c      	b.n	8002b76 <__aeabi_dsub+0x5f2>
 800285c:	2520      	movs	r5, #32
 800285e:	000e      	movs	r6, r1
 8002860:	1aed      	subs	r5, r5, r3
 8002862:	40ae      	lsls	r6, r5
 8002864:	46b0      	mov	r8, r6
 8002866:	0006      	movs	r6, r0
 8002868:	46aa      	mov	sl, r5
 800286a:	40de      	lsrs	r6, r3
 800286c:	4645      	mov	r5, r8
 800286e:	4335      	orrs	r5, r6
 8002870:	002e      	movs	r6, r5
 8002872:	4655      	mov	r5, sl
 8002874:	40d9      	lsrs	r1, r3
 8002876:	40a8      	lsls	r0, r5
 8002878:	4663      	mov	r3, ip
 800287a:	1e45      	subs	r5, r0, #1
 800287c:	41a8      	sbcs	r0, r5
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	469c      	mov	ip, r3
 8002882:	4330      	orrs	r0, r6
 8002884:	1a16      	subs	r6, r2, r0
 8002886:	42b2      	cmp	r2, r6
 8002888:	4192      	sbcs	r2, r2
 800288a:	4663      	mov	r3, ip
 800288c:	4252      	negs	r2, r2
 800288e:	1a99      	subs	r1, r3, r2
 8002890:	003d      	movs	r5, r7
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002894:	2207      	movs	r2, #7
 8002896:	4032      	ands	r2, r6
 8002898:	2a00      	cmp	r2, #0
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x31a>
 800289c:	e6e4      	b.n	8002668 <__aeabi_dsub+0xe4>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__aeabi_dsub+0x348>)
 80028a0:	08f6      	lsrs	r6, r6, #3
 80028a2:	074f      	lsls	r7, r1, #29
 80028a4:	4337      	orrs	r7, r6
 80028a6:	08ca      	lsrs	r2, r1, #3
 80028a8:	429d      	cmp	r5, r3
 80028aa:	d000      	beq.n	80028ae <__aeabi_dsub+0x32a>
 80028ac:	e790      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80028ae:	003b      	movs	r3, r7
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x332>
 80028b4:	e1a6      	b.n	8002c04 <__aeabi_dsub+0x680>
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	431a      	orrs	r2, r3
 80028bc:	0312      	lsls	r2, r2, #12
 80028be:	0b12      	lsrs	r2, r2, #12
 80028c0:	4d02      	ldr	r5, [pc, #8]	; (80028cc <__aeabi_dsub+0x348>)
 80028c2:	e789      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028c4:	0015      	movs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2700      	movs	r7, #0
 80028ca:	e785      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	800fffff 	.word	0x800fffff
 80028d8:	2e00      	cmp	r6, #0
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x35a>
 80028dc:	e0c7      	b.n	8002a6e <__aeabi_dsub+0x4ea>
 80028de:	1c6b      	adds	r3, r5, #1
 80028e0:	055e      	lsls	r6, r3, #21
 80028e2:	0d76      	lsrs	r6, r6, #21
 80028e4:	2e01      	cmp	r6, #1
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dsub+0x366>
 80028e8:	e0f0      	b.n	8002acc <__aeabi_dsub+0x548>
 80028ea:	4dc8      	ldr	r5, [pc, #800]	; (8002c0c <__aeabi_dsub+0x688>)
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x36e>
 80028f0:	e0b9      	b.n	8002a66 <__aeabi_dsub+0x4e2>
 80028f2:	1885      	adds	r5, r0, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	4285      	cmp	r5, r0
 80028f8:	4189      	sbcs	r1, r1
 80028fa:	4462      	add	r2, ip
 80028fc:	4249      	negs	r1, r1
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	2207      	movs	r2, #7
 8002902:	07ce      	lsls	r6, r1, #31
 8002904:	086d      	lsrs	r5, r5, #1
 8002906:	432e      	orrs	r6, r5
 8002908:	0849      	lsrs	r1, r1, #1
 800290a:	4032      	ands	r2, r6
 800290c:	001d      	movs	r5, r3
 800290e:	e6a9      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002910:	49bf      	ldr	r1, [pc, #764]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002912:	1aed      	subs	r5, r5, r3
 8002914:	4011      	ands	r1, r2
 8002916:	2207      	movs	r2, #7
 8002918:	4032      	ands	r2, r6
 800291a:	e6a3      	b.n	8002664 <__aeabi_dsub+0xe0>
 800291c:	0032      	movs	r2, r6
 800291e:	3828      	subs	r0, #40	; 0x28
 8002920:	4082      	lsls	r2, r0
 8002922:	2600      	movs	r6, #0
 8002924:	e686      	b.n	8002634 <__aeabi_dsub+0xb0>
 8002926:	0030      	movs	r0, r6
 8002928:	f000 fb08 	bl	8002f3c <__clzsi2>
 800292c:	3020      	adds	r0, #32
 800292e:	e673      	b.n	8002618 <__aeabi_dsub+0x94>
 8002930:	4663      	mov	r3, ip
 8002932:	4313      	orrs	r3, r2
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	4193      	sbcs	r3, r2
 8002938:	1ac6      	subs	r6, r0, r3
 800293a:	42b0      	cmp	r0, r6
 800293c:	4180      	sbcs	r0, r0
 800293e:	4240      	negs	r0, r0
 8002940:	1a09      	subs	r1, r1, r0
 8002942:	e65c      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002944:	000e      	movs	r6, r1
 8002946:	4667      	mov	r7, ip
 8002948:	4306      	orrs	r6, r0
 800294a:	4317      	orrs	r7, r2
 800294c:	2d00      	cmp	r5, #0
 800294e:	d15e      	bne.n	8002a0e <__aeabi_dsub+0x48a>
 8002950:	2e00      	cmp	r6, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x3d2>
 8002954:	e0f3      	b.n	8002b3e <__aeabi_dsub+0x5ba>
 8002956:	2f00      	cmp	r7, #0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x3d8>
 800295a:	e11e      	b.n	8002b9a <__aeabi_dsub+0x616>
 800295c:	465c      	mov	r4, fp
 800295e:	4661      	mov	r1, ip
 8002960:	4691      	mov	r9, r2
 8002962:	e72c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002964:	4fa9      	ldr	r7, [pc, #676]	; (8002c0c <__aeabi_dsub+0x688>)
 8002966:	42be      	cmp	r6, r7
 8002968:	d07b      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 800296a:	001e      	movs	r6, r3
 800296c:	e6f1      	b.n	8002752 <__aeabi_dsub+0x1ce>
 800296e:	0010      	movs	r0, r2
 8002970:	3d1f      	subs	r5, #31
 8002972:	40e8      	lsrs	r0, r5
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <__aeabi_dsub+0x3fc>
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	409a      	lsls	r2, r3
 800297e:	4316      	orrs	r6, r2
 8002980:	1e73      	subs	r3, r6, #1
 8002982:	419e      	sbcs	r6, r3
 8002984:	2207      	movs	r2, #7
 8002986:	4306      	orrs	r6, r0
 8002988:	4032      	ands	r2, r6
 800298a:	2100      	movs	r1, #0
 800298c:	2500      	movs	r5, #0
 800298e:	e783      	b.n	8002898 <__aeabi_dsub+0x314>
 8002990:	1a16      	subs	r6, r2, r0
 8002992:	4663      	mov	r3, ip
 8002994:	42b2      	cmp	r2, r6
 8002996:	4180      	sbcs	r0, r0
 8002998:	1a59      	subs	r1, r3, r1
 800299a:	4240      	negs	r0, r0
 800299c:	1a0b      	subs	r3, r1, r0
 800299e:	4698      	mov	r8, r3
 80029a0:	465c      	mov	r4, fp
 80029a2:	e632      	b.n	800260a <__aeabi_dsub+0x86>
 80029a4:	2e1f      	cmp	r6, #31
 80029a6:	dd00      	ble.n	80029aa <__aeabi_dsub+0x426>
 80029a8:	e0ab      	b.n	8002b02 <__aeabi_dsub+0x57e>
 80029aa:	2720      	movs	r7, #32
 80029ac:	1bbb      	subs	r3, r7, r6
 80029ae:	469a      	mov	sl, r3
 80029b0:	4663      	mov	r3, ip
 80029b2:	4657      	mov	r7, sl
 80029b4:	40bb      	lsls	r3, r7
 80029b6:	4699      	mov	r9, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	464f      	mov	r7, r9
 80029bc:	40f3      	lsrs	r3, r6
 80029be:	431f      	orrs	r7, r3
 80029c0:	003b      	movs	r3, r7
 80029c2:	4657      	mov	r7, sl
 80029c4:	40ba      	lsls	r2, r7
 80029c6:	1e57      	subs	r7, r2, #1
 80029c8:	41ba      	sbcs	r2, r7
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4662      	mov	r2, ip
 80029ce:	40f2      	lsrs	r2, r6
 80029d0:	1889      	adds	r1, r1, r2
 80029d2:	e698      	b.n	8002706 <__aeabi_dsub+0x182>
 80029d4:	2720      	movs	r7, #32
 80029d6:	1bbb      	subs	r3, r7, r6
 80029d8:	469a      	mov	sl, r3
 80029da:	4663      	mov	r3, ip
 80029dc:	4657      	mov	r7, sl
 80029de:	40bb      	lsls	r3, r7
 80029e0:	4699      	mov	r9, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	464f      	mov	r7, r9
 80029e6:	40f3      	lsrs	r3, r6
 80029e8:	431f      	orrs	r7, r3
 80029ea:	003b      	movs	r3, r7
 80029ec:	4657      	mov	r7, sl
 80029ee:	40ba      	lsls	r2, r7
 80029f0:	1e57      	subs	r7, r2, #1
 80029f2:	41ba      	sbcs	r2, r7
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4662      	mov	r2, ip
 80029f8:	40f2      	lsrs	r2, r6
 80029fa:	1a89      	subs	r1, r1, r2
 80029fc:	e79c      	b.n	8002938 <__aeabi_dsub+0x3b4>
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a00:	429f      	cmp	r7, r3
 8002a02:	d05f      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a04:	2580      	movs	r5, #128	; 0x80
 8002a06:	042d      	lsls	r5, r5, #16
 8002a08:	4273      	negs	r3, r6
 8002a0a:	4329      	orrs	r1, r5
 8002a0c:	e720      	b.n	8002850 <__aeabi_dsub+0x2cc>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d10c      	bne.n	8002a2c <__aeabi_dsub+0x4a8>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x494>
 8002a16:	e0d0      	b.n	8002bba <__aeabi_dsub+0x636>
 8002a18:	465c      	mov	r4, fp
 8002a1a:	4661      	mov	r1, ip
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	4d7b      	ldr	r5, [pc, #492]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a20:	e6cd      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a22:	4f7a      	ldr	r7, [pc, #488]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a24:	42be      	cmp	r6, r7
 8002a26:	d01c      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a28:	001e      	movs	r6, r3
 8002a2a:	e665      	b.n	80026f8 <__aeabi_dsub+0x174>
 8002a2c:	2f00      	cmp	r7, #0
 8002a2e:	d018      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a30:	08c0      	lsrs	r0, r0, #3
 8002a32:	074e      	lsls	r6, r1, #29
 8002a34:	4306      	orrs	r6, r0
 8002a36:	2080      	movs	r0, #128	; 0x80
 8002a38:	08c9      	lsrs	r1, r1, #3
 8002a3a:	0300      	lsls	r0, r0, #12
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d008      	beq.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a40:	4663      	mov	r3, ip
 8002a42:	08dc      	lsrs	r4, r3, #3
 8002a44:	4204      	tst	r4, r0
 8002a46:	d104      	bne.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a48:	0021      	movs	r1, r4
 8002a4a:	46da      	mov	sl, fp
 8002a4c:	08d2      	lsrs	r2, r2, #3
 8002a4e:	075e      	lsls	r6, r3, #29
 8002a50:	4316      	orrs	r6, r2
 8002a52:	00f3      	lsls	r3, r6, #3
 8002a54:	4699      	mov	r9, r3
 8002a56:	2401      	movs	r4, #1
 8002a58:	4653      	mov	r3, sl
 8002a5a:	00c9      	lsls	r1, r1, #3
 8002a5c:	0f72      	lsrs	r2, r6, #29
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	401c      	ands	r4, r3
 8002a62:	4d6a      	ldr	r5, [pc, #424]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a64:	e6ab      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a66:	001d      	movs	r5, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2700      	movs	r7, #0
 8002a6c:	e6b4      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d159      	bne.n	8002b26 <__aeabi_dsub+0x5a2>
 8002a72:	000b      	movs	r3, r1
 8002a74:	4303      	orrs	r3, r0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x4f6>
 8002a78:	e6d6      	b.n	8002828 <__aeabi_dsub+0x2a4>
 8002a7a:	1c73      	adds	r3, r6, #1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x4fc>
 8002a7e:	e0b2      	b.n	8002be6 <__aeabi_dsub+0x662>
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a82:	429f      	cmp	r7, r3
 8002a84:	d01e      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a86:	43f3      	mvns	r3, r6
 8002a88:	2b38      	cmp	r3, #56	; 0x38
 8002a8a:	dc6f      	bgt.n	8002b6c <__aeabi_dsub+0x5e8>
 8002a8c:	2b1f      	cmp	r3, #31
 8002a8e:	dd00      	ble.n	8002a92 <__aeabi_dsub+0x50e>
 8002a90:	e097      	b.n	8002bc2 <__aeabi_dsub+0x63e>
 8002a92:	2520      	movs	r5, #32
 8002a94:	000e      	movs	r6, r1
 8002a96:	1aed      	subs	r5, r5, r3
 8002a98:	40ae      	lsls	r6, r5
 8002a9a:	46b0      	mov	r8, r6
 8002a9c:	0006      	movs	r6, r0
 8002a9e:	46aa      	mov	sl, r5
 8002aa0:	40de      	lsrs	r6, r3
 8002aa2:	4645      	mov	r5, r8
 8002aa4:	4335      	orrs	r5, r6
 8002aa6:	002e      	movs	r6, r5
 8002aa8:	4655      	mov	r5, sl
 8002aaa:	40a8      	lsls	r0, r5
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	1e45      	subs	r5, r0, #1
 8002ab0:	41a8      	sbcs	r0, r5
 8002ab2:	448c      	add	ip, r1
 8002ab4:	4306      	orrs	r6, r0
 8002ab6:	18b6      	adds	r6, r6, r2
 8002ab8:	4296      	cmp	r6, r2
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4251      	negs	r1, r2
 8002abe:	4461      	add	r1, ip
 8002ac0:	003d      	movs	r5, r7
 8002ac2:	e625      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002ac4:	003d      	movs	r5, r7
 8002ac6:	4661      	mov	r1, ip
 8002ac8:	4691      	mov	r9, r2
 8002aca:	e678      	b.n	80027be <__aeabi_dsub+0x23a>
 8002acc:	000b      	movs	r3, r1
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x552>
 8002ad4:	e655      	b.n	8002782 <__aeabi_dsub+0x1fe>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f5      	beq.n	8002ac6 <__aeabi_dsub+0x542>
 8002ada:	4663      	mov	r3, ip
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x55e>
 8002ae0:	e66d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002ae2:	1886      	adds	r6, r0, r2
 8002ae4:	4286      	cmp	r6, r0
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4461      	add	r1, ip
 8002aea:	4240      	negs	r0, r0
 8002aec:	1809      	adds	r1, r1, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	020b      	lsls	r3, r1, #8
 8002af2:	d400      	bmi.n	8002af6 <__aeabi_dsub+0x572>
 8002af4:	e6d0      	b.n	8002898 <__aeabi_dsub+0x314>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002af8:	3501      	adds	r5, #1
 8002afa:	4019      	ands	r1, r3
 8002afc:	e5b2      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002afe:	46b1      	mov	r9, r6
 8002b00:	e65d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b02:	0033      	movs	r3, r6
 8002b04:	4667      	mov	r7, ip
 8002b06:	3b20      	subs	r3, #32
 8002b08:	40df      	lsrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	2e20      	cmp	r6, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x598>
 8002b10:	2740      	movs	r7, #64	; 0x40
 8002b12:	1bbf      	subs	r7, r7, r6
 8002b14:	4666      	mov	r6, ip
 8002b16:	40be      	lsls	r6, r7
 8002b18:	4332      	orrs	r2, r6
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4646      	mov	r6, r8
 8002b1e:	1e72      	subs	r2, r6, #1
 8002b20:	4196      	sbcs	r6, r2
 8002b22:	4333      	orrs	r3, r6
 8002b24:	e5ef      	b.n	8002706 <__aeabi_dsub+0x182>
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <__aeabi_dsub+0x688>)
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d0cb      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002b2c:	2580      	movs	r5, #128	; 0x80
 8002b2e:	042d      	lsls	r5, r5, #16
 8002b30:	4273      	negs	r3, r6
 8002b32:	4329      	orrs	r1, r5
 8002b34:	e7a8      	b.n	8002a88 <__aeabi_dsub+0x504>
 8002b36:	4308      	orrs	r0, r1
 8002b38:	1e41      	subs	r1, r0, #1
 8002b3a:	4188      	sbcs	r0, r1
 8002b3c:	e6a2      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x5c0>
 8002b42:	e63c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b44:	4663      	mov	r3, ip
 8002b46:	1a86      	subs	r6, r0, r2
 8002b48:	1acf      	subs	r7, r1, r3
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	425b      	negs	r3, r3
 8002b50:	1afb      	subs	r3, r7, r3
 8002b52:	4698      	mov	r8, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	d54e      	bpl.n	8002bf6 <__aeabi_dsub+0x672>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	465c      	mov	r4, fp
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e57b      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	000e      	movs	r6, r1
 8002b70:	1e71      	subs	r1, r6, #1
 8002b72:	418e      	sbcs	r6, r1
 8002b74:	e79f      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002b76:	001d      	movs	r5, r3
 8002b78:	000e      	movs	r6, r1
 8002b7a:	3d20      	subs	r5, #32
 8002b7c:	40ee      	lsrs	r6, r5
 8002b7e:	46b0      	mov	r8, r6
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d004      	beq.n	8002b8e <__aeabi_dsub+0x60a>
 8002b84:	2540      	movs	r5, #64	; 0x40
 8002b86:	1aeb      	subs	r3, r5, r3
 8002b88:	4099      	lsls	r1, r3
 8002b8a:	4308      	orrs	r0, r1
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	4648      	mov	r0, r9
 8002b90:	4643      	mov	r3, r8
 8002b92:	1e41      	subs	r1, r0, #1
 8002b94:	4188      	sbcs	r0, r1
 8002b96:	4318      	orrs	r0, r3
 8002b98:	e674      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	e617      	b.n	80027d0 <__aeabi_dsub+0x24c>
 8002ba0:	1a16      	subs	r6, r2, r0
 8002ba2:	4663      	mov	r3, ip
 8002ba4:	42b2      	cmp	r2, r6
 8002ba6:	4192      	sbcs	r2, r2
 8002ba8:	1a59      	subs	r1, r3, r1
 8002baa:	4252      	negs	r2, r2
 8002bac:	1a89      	subs	r1, r1, r2
 8002bae:	003d      	movs	r5, r7
 8002bb0:	e525      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002bb2:	4661      	mov	r1, ip
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	4d15      	ldr	r5, [pc, #84]	; (8002c0c <__aeabi_dsub+0x688>)
 8002bb8:	e601      	b.n	80027be <__aeabi_dsub+0x23a>
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	0312      	lsls	r2, r2, #12
 8002bc0:	e679      	b.n	80028b6 <__aeabi_dsub+0x332>
 8002bc2:	001d      	movs	r5, r3
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	3d20      	subs	r5, #32
 8002bc8:	40ee      	lsrs	r6, r5
 8002bca:	46b0      	mov	r8, r6
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d004      	beq.n	8002bda <__aeabi_dsub+0x656>
 8002bd0:	2540      	movs	r5, #64	; 0x40
 8002bd2:	1aeb      	subs	r3, r5, r3
 8002bd4:	4099      	lsls	r1, r3
 8002bd6:	4308      	orrs	r0, r1
 8002bd8:	4681      	mov	r9, r0
 8002bda:	464e      	mov	r6, r9
 8002bdc:	4643      	mov	r3, r8
 8002bde:	1e71      	subs	r1, r6, #1
 8002be0:	418e      	sbcs	r6, r1
 8002be2:	431e      	orrs	r6, r3
 8002be4:	e767      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002be6:	1886      	adds	r6, r0, r2
 8002be8:	4296      	cmp	r6, r2
 8002bea:	419b      	sbcs	r3, r3
 8002bec:	4461      	add	r1, ip
 8002bee:	425b      	negs	r3, r3
 8002bf0:	18c9      	adds	r1, r1, r3
 8002bf2:	003d      	movs	r5, r7
 8002bf4:	e58c      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	4337      	orrs	r7, r6
 8002bfa:	d0ce      	beq.n	8002b9a <__aeabi_dsub+0x616>
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4641      	mov	r1, r8
 8002c00:	4032      	ands	r2, r6
 8002c02:	e649      	b.n	8002898 <__aeabi_dsub+0x314>
 8002c04:	2700      	movs	r7, #0
 8002c06:	003a      	movs	r2, r7
 8002c08:	e5e6      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff

08002c14 <__aeabi_dcmpun>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4e0c      	ldr	r6, [pc, #48]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c18:	030d      	lsls	r5, r1, #12
 8002c1a:	031c      	lsls	r4, r3, #12
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	0b2d      	lsrs	r5, r5, #12
 8002c22:	0d49      	lsrs	r1, r1, #21
 8002c24:	0b24      	lsrs	r4, r4, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	42b1      	cmp	r1, r6
 8002c2a:	d008      	beq.n	8002c3e <__aeabi_dcmpun+0x2a>
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d103      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c34:	4314      	orrs	r4, r2
 8002c36:	0020      	movs	r0, r4
 8002c38:	1e44      	subs	r4, r0, #1
 8002c3a:	41a0      	sbcs	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	4305      	orrs	r5, r0
 8002c40:	2001      	movs	r0, #1
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d1fa      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c46:	e7f1      	b.n	8002c2c <__aeabi_dcmpun+0x18>
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2iz>:
 8002c4c:	b530      	push	{r4, r5, lr}
 8002c4e:	4d14      	ldr	r5, [pc, #80]	; (8002ca0 <__aeabi_d2iz+0x54>)
 8002c50:	030a      	lsls	r2, r1, #12
 8002c52:	004b      	lsls	r3, r1, #1
 8002c54:	0b12      	lsrs	r2, r2, #12
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	0fc9      	lsrs	r1, r1, #31
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	42ab      	cmp	r3, r5
 8002c5e:	dd11      	ble.n	8002c84 <__aeabi_d2iz+0x38>
 8002c60:	4c10      	ldr	r4, [pc, #64]	; (8002ca4 <__aeabi_d2iz+0x58>)
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	dc10      	bgt.n	8002c88 <__aeabi_d2iz+0x3c>
 8002c66:	2480      	movs	r4, #128	; 0x80
 8002c68:	0364      	lsls	r4, r4, #13
 8002c6a:	4322      	orrs	r2, r4
 8002c6c:	4c0e      	ldr	r4, [pc, #56]	; (8002ca8 <__aeabi_d2iz+0x5c>)
 8002c6e:	1ae4      	subs	r4, r4, r3
 8002c70:	2c1f      	cmp	r4, #31
 8002c72:	dd0c      	ble.n	8002c8e <__aeabi_d2iz+0x42>
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <__aeabi_d2iz+0x60>)
 8002c76:	1ac3      	subs	r3, r0, r3
 8002c78:	40da      	lsrs	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	425c      	negs	r4, r3
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d100      	bne.n	8002c84 <__aeabi_d2iz+0x38>
 8002c82:	001c      	movs	r4, r3
 8002c84:	0020      	movs	r0, r4
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <__aeabi_d2iz+0x64>)
 8002c8a:	18cc      	adds	r4, r1, r3
 8002c8c:	e7fa      	b.n	8002c84 <__aeabi_d2iz+0x38>
 8002c8e:	4d09      	ldr	r5, [pc, #36]	; (8002cb4 <__aeabi_d2iz+0x68>)
 8002c90:	40e0      	lsrs	r0, r4
 8002c92:	46ac      	mov	ip, r5
 8002c94:	4463      	add	r3, ip
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	e7ee      	b.n	8002c7c <__aeabi_d2iz+0x30>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	000003fe 	.word	0x000003fe
 8002ca4:	0000041d 	.word	0x0000041d
 8002ca8:	00000433 	.word	0x00000433
 8002cac:	00000413 	.word	0x00000413
 8002cb0:	7fffffff 	.word	0x7fffffff
 8002cb4:	fffffbed 	.word	0xfffffbed

08002cb8 <__aeabi_i2d>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d02d      	beq.n	8002d1a <__aeabi_i2d+0x62>
 8002cbe:	17c3      	asrs	r3, r0, #31
 8002cc0:	18c5      	adds	r5, r0, r3
 8002cc2:	405d      	eors	r5, r3
 8002cc4:	0fc4      	lsrs	r4, r0, #31
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f938 	bl	8002f3c <__clzsi2>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <__aeabi_i2d+0x6c>)
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	280a      	cmp	r0, #10
 8002cd6:	dd15      	ble.n	8002d04 <__aeabi_i2d+0x4c>
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4085      	lsls	r5, r0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	032d      	lsls	r5, r5, #12
 8002ce0:	0b2d      	lsrs	r5, r5, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	032d      	lsls	r5, r5, #12
 8002ce8:	0d0a      	lsrs	r2, r1, #20
 8002cea:	0b2d      	lsrs	r5, r5, #12
 8002cec:	0512      	lsls	r2, r2, #20
 8002cee:	432a      	orrs	r2, r5
 8002cf0:	4d0d      	ldr	r5, [pc, #52]	; (8002d28 <__aeabi_i2d+0x70>)
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	402a      	ands	r2, r5
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	07e4      	lsls	r4, r4, #31
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0019      	movs	r1, r3
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	0002      	movs	r2, r0
 8002d06:	0029      	movs	r1, r5
 8002d08:	3215      	adds	r2, #21
 8002d0a:	4091      	lsls	r1, r2
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	210b      	movs	r1, #11
 8002d10:	1a08      	subs	r0, r1, r0
 8002d12:	40c5      	lsrs	r5, r0
 8002d14:	032d      	lsls	r5, r5, #12
 8002d16:	0b2d      	lsrs	r5, r5, #12
 8002d18:	e7e3      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2500      	movs	r5, #0
 8002d20:	2200      	movs	r2, #0
 8002d22:	e7de      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d24:	0000041e 	.word	0x0000041e
 8002d28:	800fffff 	.word	0x800fffff

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d025      	beq.n	8002d7e <__aeabi_ui2d+0x52>
 8002d32:	f000 f903 	bl	8002f3c <__clzsi2>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <__aeabi_ui2d+0x5c>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dd12      	ble.n	8002d68 <__aeabi_ui2d+0x3c>
 8002d42:	380b      	subs	r0, #11
 8002d44:	4084      	lsls	r4, r0
 8002d46:	2200      	movs	r2, #0
 8002d48:	0324      	lsls	r4, r4, #12
 8002d4a:	0b24      	lsrs	r4, r4, #12
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0324      	lsls	r4, r4, #12
 8002d52:	0d0a      	lsrs	r2, r1, #20
 8002d54:	0b24      	lsrs	r4, r4, #12
 8002d56:	0512      	lsls	r2, r2, #20
 8002d58:	4322      	orrs	r2, r4
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__aeabi_ui2d+0x60>)
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	4022      	ands	r2, r4
 8002d60:	4313      	orrs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	0859      	lsrs	r1, r3, #1
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	0002      	movs	r2, r0
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	3215      	adds	r2, #21
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	000a      	movs	r2, r1
 8002d72:	210b      	movs	r1, #11
 8002d74:	1a08      	subs	r0, r1, r0
 8002d76:	40c4      	lsrs	r4, r0
 8002d78:	0324      	lsls	r4, r4, #12
 8002d7a:	0b24      	lsrs	r4, r4, #12
 8002d7c:	e7e6      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2400      	movs	r4, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	e7e2      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	0000041e 	.word	0x0000041e
 8002d8c:	800fffff 	.word	0x800fffff

08002d90 <__aeabi_f2d>:
 8002d90:	0041      	lsls	r1, r0, #1
 8002d92:	0e09      	lsrs	r1, r1, #24
 8002d94:	1c4b      	adds	r3, r1, #1
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	0246      	lsls	r6, r0, #9
 8002d9c:	0a75      	lsrs	r5, r6, #9
 8002d9e:	0fc4      	lsrs	r4, r0, #31
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	dd14      	ble.n	8002dce <__aeabi_f2d+0x3e>
 8002da4:	23e0      	movs	r3, #224	; 0xe0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	076d      	lsls	r5, r5, #29
 8002daa:	0b36      	lsrs	r6, r6, #12
 8002dac:	18cb      	adds	r3, r1, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	0d0a      	lsrs	r2, r1, #20
 8002db2:	0028      	movs	r0, r5
 8002db4:	0512      	lsls	r2, r2, #20
 8002db6:	4d1c      	ldr	r5, [pc, #112]	; (8002e28 <__aeabi_f2d+0x98>)
 8002db8:	4332      	orrs	r2, r6
 8002dba:	055b      	lsls	r3, r3, #21
 8002dbc:	402a      	ands	r2, r5
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	07e4      	lsls	r4, r4, #31
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	0019      	movs	r1, r3
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d114      	bne.n	8002dfc <__aeabi_f2d+0x6c>
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d01e      	beq.n	8002e14 <__aeabi_f2d+0x84>
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f8b0 	bl	8002f3c <__clzsi2>
 8002ddc:	280a      	cmp	r0, #10
 8002dde:	dc1c      	bgt.n	8002e1a <__aeabi_f2d+0x8a>
 8002de0:	230b      	movs	r3, #11
 8002de2:	002a      	movs	r2, r5
 8002de4:	1a1b      	subs	r3, r3, r0
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	3315      	adds	r3, #21
 8002dec:	409d      	lsls	r5, r3
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <__aeabi_f2d+0x9c>)
 8002df0:	0312      	lsls	r2, r2, #12
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	0b16      	lsrs	r6, r2, #12
 8002df8:	0d5b      	lsrs	r3, r3, #21
 8002dfa:	e7d8      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002dfc:	2d00      	cmp	r5, #0
 8002dfe:	d006      	beq.n	8002e0e <__aeabi_f2d+0x7e>
 8002e00:	0b32      	lsrs	r2, r6, #12
 8002e02:	2680      	movs	r6, #128	; 0x80
 8002e04:	0336      	lsls	r6, r6, #12
 8002e06:	076d      	lsls	r5, r5, #29
 8002e08:	4316      	orrs	r6, r2
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e0c:	e7cf      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e10:	2600      	movs	r6, #0
 8002e12:	e7cc      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2600      	movs	r6, #0
 8002e18:	e7c9      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	002a      	movs	r2, r5
 8002e1e:	3b0b      	subs	r3, #11
 8002e20:	409a      	lsls	r2, r3
 8002e22:	2500      	movs	r5, #0
 8002e24:	e7e3      	b.n	8002dee <__aeabi_f2d+0x5e>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	800fffff 	.word	0x800fffff
 8002e2c:	00000389 	.word	0x00000389
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_d2f>:
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	004c      	lsls	r4, r1, #1
 8002e38:	0d64      	lsrs	r4, r4, #21
 8002e3a:	030b      	lsls	r3, r1, #12
 8002e3c:	1c62      	adds	r2, r4, #1
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	0f46      	lsrs	r6, r0, #29
 8002e42:	0552      	lsls	r2, r2, #21
 8002e44:	0fc9      	lsrs	r1, r1, #31
 8002e46:	431e      	orrs	r6, r3
 8002e48:	00c5      	lsls	r5, r0, #3
 8002e4a:	0d52      	lsrs	r2, r2, #21
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	dd29      	ble.n	8002ea4 <__aeabi_d2f+0x70>
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <__aeabi_d2f+0xfc>)
 8002e52:	18e7      	adds	r7, r4, r3
 8002e54:	2ffe      	cmp	r7, #254	; 0xfe
 8002e56:	dc1c      	bgt.n	8002e92 <__aeabi_d2f+0x5e>
 8002e58:	2f00      	cmp	r7, #0
 8002e5a:	dd3b      	ble.n	8002ed4 <__aeabi_d2f+0xa0>
 8002e5c:	0180      	lsls	r0, r0, #6
 8002e5e:	1e43      	subs	r3, r0, #1
 8002e60:	4198      	sbcs	r0, r3
 8002e62:	2207      	movs	r2, #7
 8002e64:	00f3      	lsls	r3, r6, #3
 8002e66:	0f6d      	lsrs	r5, r5, #29
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	432b      	orrs	r3, r5
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d004      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e72:	220f      	movs	r2, #15
 8002e74:	401a      	ands	r2, r3
 8002e76:	2a04      	cmp	r2, #4
 8002e78:	d000      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	04d2      	lsls	r2, r2, #19
 8002e80:	401a      	ands	r2, r3
 8002e82:	d024      	beq.n	8002ece <__aeabi_d2f+0x9a>
 8002e84:	3701      	adds	r7, #1
 8002e86:	b2fa      	uxtb	r2, r7
 8002e88:	2fff      	cmp	r7, #255	; 0xff
 8002e8a:	d002      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	0a58      	lsrs	r0, r3, #9
 8002e90:	e001      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	2000      	movs	r0, #0
 8002e96:	0240      	lsls	r0, r0, #9
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	0a40      	lsrs	r0, r0, #9
 8002e9c:	07c9      	lsls	r1, r1, #31
 8002e9e:	4310      	orrs	r0, r2
 8002ea0:	4308      	orrs	r0, r1
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	4335      	orrs	r5, r6
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d104      	bne.n	8002eb4 <__aeabi_d2f+0x80>
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d10a      	bne.n	8002ec4 <__aeabi_d2f+0x90>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f0      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	d0ec      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	03c0      	lsls	r0, r0, #15
 8002ebc:	4330      	orrs	r0, r6
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	e7e9      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ec2:	2400      	movs	r4, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	0a58      	lsrs	r0, r3, #9
 8002eca:	b2e2      	uxtb	r2, r4
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	003c      	movs	r4, r7
 8002ed2:	e7f8      	b.n	8002ec6 <__aeabi_d2f+0x92>
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	3317      	adds	r3, #23
 8002ed8:	dbf3      	blt.n	8002ec2 <__aeabi_d2f+0x8e>
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	261e      	movs	r6, #30
 8002ee2:	1bf6      	subs	r6, r6, r7
 8002ee4:	2e1f      	cmp	r6, #31
 8002ee6:	dd14      	ble.n	8002f12 <__aeabi_d2f+0xde>
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4252      	negs	r2, r2
 8002eec:	1bd7      	subs	r7, r2, r7
 8002eee:	001a      	movs	r2, r3
 8002ef0:	40fa      	lsrs	r2, r7
 8002ef2:	0017      	movs	r7, r2
 8002ef4:	2e20      	cmp	r6, #32
 8002ef6:	d004      	beq.n	8002f02 <__aeabi_d2f+0xce>
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <__aeabi_d2f+0x100>)
 8002efa:	4694      	mov	ip, r2
 8002efc:	4464      	add	r4, ip
 8002efe:	40a3      	lsls	r3, r4
 8002f00:	431d      	orrs	r5, r3
 8002f02:	002b      	movs	r3, r5
 8002f04:	1e5d      	subs	r5, r3, #1
 8002f06:	41ab      	sbcs	r3, r5
 8002f08:	2207      	movs	r2, #7
 8002f0a:	433b      	orrs	r3, r7
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	2700      	movs	r7, #0
 8002f10:	e7ad      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <__aeabi_d2f+0x104>)
 8002f14:	0028      	movs	r0, r5
 8002f16:	18a2      	adds	r2, r4, r2
 8002f18:	4095      	lsls	r5, r2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	1e6c      	subs	r4, r5, #1
 8002f1e:	41a5      	sbcs	r5, r4
 8002f20:	40f0      	lsrs	r0, r6
 8002f22:	2207      	movs	r2, #7
 8002f24:	432b      	orrs	r3, r5
 8002f26:	4303      	orrs	r3, r0
 8002f28:	401a      	ands	r2, r3
 8002f2a:	2700      	movs	r7, #0
 8002f2c:	e79f      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	fffffc80 	.word	0xfffffc80
 8002f34:	fffffca2 	.word	0xfffffca2
 8002f38:	fffffc82 	.word	0xfffffc82

08002f3c <__clzsi2>:
 8002f3c:	211c      	movs	r1, #28
 8002f3e:	2301      	movs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d301      	bcc.n	8002f4a <__clzsi2+0xe>
 8002f46:	0c00      	lsrs	r0, r0, #16
 8002f48:	3910      	subs	r1, #16
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	d301      	bcc.n	8002f54 <__clzsi2+0x18>
 8002f50:	0a00      	lsrs	r0, r0, #8
 8002f52:	3908      	subs	r1, #8
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0x22>
 8002f5a:	0900      	lsrs	r0, r0, #4
 8002f5c:	3904      	subs	r1, #4
 8002f5e:	a202      	add	r2, pc, #8	; (adr r2, 8002f68 <__clzsi2+0x2c>)
 8002f60:	5c10      	ldrb	r0, [r2, r0]
 8002f62:	1840      	adds	r0, r0, r1
 8002f64:	4770      	bx	lr
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	02020304 	.word	0x02020304
 8002f6c:	01010101 	.word	0x01010101
	...

08002f78 <__clzdi2>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d103      	bne.n	8002f86 <__clzdi2+0xe>
 8002f7e:	f7ff ffdd 	bl	8002f3c <__clzsi2>
 8002f82:	3020      	adds	r0, #32
 8002f84:	e002      	b.n	8002f8c <__clzdi2+0x14>
 8002f86:	1c08      	adds	r0, r1, #0
 8002f88:	f7ff ffd8 	bl	8002f3c <__clzsi2>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8002f92:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8002f94:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d100      	bne.n	8002f9c <minArr+0xc>
		smallest = arr[0];
 8002f9a:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <minArr+0x38>)
 8002f9e:	781d      	ldrb	r5, [r3, #0]
 8002fa0:	2d00      	cmp	r5, #0
 8002fa2:	dd0e      	ble.n	8002fc2 <minArr+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2700      	movs	r7, #0
 8002fa8:	e002      	b.n	8002fb0 <minArr+0x20>
 8002faa:	3301      	adds	r3, #1
 8002fac:	42ab      	cmp	r3, r5
 8002fae:	da09      	bge.n	8002fc4 <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8002fb0:	5cc2      	ldrb	r2, [r0, r3]
 8002fb2:	42a2      	cmp	r2, r4
 8002fb4:	d2f9      	bcs.n	8002faa <minArr+0x1a>
 8002fb6:	5cce      	ldrb	r6, [r1, r3]
 8002fb8:	2e00      	cmp	r6, #0
 8002fba:	d1f6      	bne.n	8002faa <minArr+0x1a>
			smallest = arr[i];
			index = i;
 8002fbc:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 8002fbe:	0014      	movs	r4, r2
 8002fc0:	e7f3      	b.n	8002faa <minArr+0x1a>
	for (int i=0 ; i<N ; i++) {
 8002fc2:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8002fc4:	0038      	movs	r0, r7
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc8:	2000001c 	.word	0x2000001c

08002fcc <QnotEmpty>:
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <QnotEmpty+0x20>)
 8002fce:	7819      	ldrb	r1, [r3, #0]
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d008      	beq.n	8002fe6 <QnotEmpty+0x1a>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	1841      	adds	r1, r0, r1
	char temp = 1;
 8002fd8:	2001      	movs	r0, #1
		temp &= Q[i];
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	4010      	ands	r0, r2
 8002fde:	3301      	adds	r3, #1
	for (int i=0 ; i<N ; i++) {
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d1fa      	bne.n	8002fda <QnotEmpty+0xe>
	}	
	
	return temp;
}
 8002fe4:	4770      	bx	lr
	char temp = 1;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e7fc      	b.n	8002fe4 <QnotEmpty+0x18>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	2000001c 	.word	0x2000001c

08002ff0 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	46de      	mov	lr, fp
 8002ff4:	4657      	mov	r7, sl
 8002ff6:	464e      	mov	r6, r9
 8002ff8:	b5c0      	push	{r6, r7, lr}
 8002ffa:	b082      	sub	sp, #8
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8002ffc:	2032      	movs	r0, #50	; 0x32
 8002ffe:	f00f fcc9 	bl	8012994 <malloc>
 8003002:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003004:	d100      	bne.n	8003008 <LoadROsnippets+0x18>
 8003006:	e071      	b.n	80030ec <LoadROsnippets+0xfc>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <LoadROsnippets+0x100>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	20ff      	movs	r0, #255	; 0xff
 800300e:	2bfe      	cmp	r3, #254	; 0xfe
 8003010:	d166      	bne.n	80030e0 <LoadROsnippets+0xf0>
 8003012:	4e38      	ldr	r6, [pc, #224]	; (80030f4 <LoadROsnippets+0x104>)
 8003014:	3b9a      	subs	r3, #154	; 0x9a
 8003016:	469b      	mov	fp, r3
 8003018:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800301a:	4d35      	ldr	r5, [pc, #212]	; (80030f0 <LoadROsnippets+0x100>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 800301c:	1c7b      	adds	r3, r7, #1
 800301e:	9301      	str	r3, [sp, #4]
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003020:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <LoadROsnippets+0x108>)
 8003022:	4699      	mov	r9, r3
 8003024:	e023      	b.n	800306e <LoadROsnippets+0x7e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003026:	2400      	movs	r4, #0
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003028:	193b      	adds	r3, r7, r4
 800302a:	3b01      	subs	r3, #1
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <LoadROsnippets+0x46>
 8003032:	3401      	adds	r4, #1
 8003034:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char *) malloc(i);
 8003036:	0020      	movs	r0, r4
 8003038:	f00f fcac 	bl	8012994 <malloc>
 800303c:	4653      	mov	r3, sl
 800303e:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003040:	2800      	cmp	r0, #0
 8003042:	d03f      	beq.n	80030c4 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8003044:	0022      	movs	r2, r4
 8003046:	0039      	movs	r1, r7
 8003048:	f00f fef1 	bl	8012e2e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800304c:	464b      	mov	r3, r9
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	464a      	mov	r2, r9
 8003054:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8003056:	0022      	movs	r2, r4
 8003058:	2100      	movs	r1, #0
 800305a:	0038      	movs	r0, r7
 800305c:	f00f fef0 	bl	8012e40 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003060:	9b00      	ldr	r3, [sp, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2bfe      	cmp	r3, #254	; 0xfe
 8003066:	d137      	bne.n	80030d8 <LoadROsnippets+0xe8>
 8003068:	3614      	adds	r6, #20
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 800306a:	455e      	cmp	r6, fp
 800306c:	d034      	beq.n	80030d8 <LoadROsnippets+0xe8>
 800306e:	0028      	movs	r0, r5
 8003070:	3014      	adds	r0, #20
{
 8003072:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8003074:	1b79      	subs	r1, r7, r5
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	54ca      	strb	r2, [r1, r3]
 800307a:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 800307c:	4283      	cmp	r3, r0
 800307e:	d1fa      	bne.n	8003076 <LoadROsnippets+0x86>
 8003080:	3514      	adds	r5, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003082:	46b2      	mov	sl, r6
 8003084:	2214      	movs	r2, #20
 8003086:	9901      	ldr	r1, [sp, #4]
 8003088:	0030      	movs	r0, r6
 800308a:	f00f fed0 	bl	8012e2e <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800308e:	2214      	movs	r2, #20
 8003090:	2100      	movs	r1, #0
 8003092:	0038      	movs	r0, r7
 8003094:	f00f fed4 	bl	8012e40 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003098:	9500      	str	r5, [sp, #0]
 800309a:	782a      	ldrb	r2, [r5, #0]
 800309c:	1c93      	adds	r3, r2, #2
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d9c0      	bls.n	8003026 <LoadROsnippets+0x36>
 80030a4:	0039      	movs	r1, r7
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80030a6:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 80030a8:	700a      	strb	r2, [r1, #0]
			++currentAdd; ++i;
 80030aa:	3501      	adds	r5, #1
 80030ac:	3401      	adds	r4, #1
 80030ae:	b2e4      	uxtb	r4, r4
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80030b0:	9500      	str	r5, [sp, #0]
 80030b2:	782a      	ldrb	r2, [r5, #0]
 80030b4:	1c93      	adds	r3, r2, #2
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d9b5      	bls.n	8003028 <LoadROsnippets+0x38>
 80030bc:	3101      	adds	r1, #1
 80030be:	2c32      	cmp	r4, #50	; 0x32
 80030c0:	d1f2      	bne.n	80030a8 <LoadROsnippets+0xb8>
 80030c2:	e7b1      	b.n	8003028 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 80030c4:	2214      	movs	r2, #20
 80030c6:	2100      	movs	r1, #0
 80030c8:	4650      	mov	r0, sl
 80030ca:	f00f feb9 	bl	8012e40 <memset>
			free(snipBuffer);			
 80030ce:	0038      	movs	r0, r7
 80030d0:	f00f fc6a 	bl	80129a8 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80030d4:	200e      	movs	r0, #14
 80030d6:	e003      	b.n	80030e0 <LoadROsnippets+0xf0>
	}	
	
	free(snipBuffer);
 80030d8:	0038      	movs	r0, r7
 80030da:	f00f fc65 	bl	80129a8 <free>
	return BOS_OK;
 80030de:	2000      	movs	r0, #0
}
 80030e0:	b002      	add	sp, #8
 80030e2:	bc1c      	pop	{r2, r3, r4}
 80030e4:	4691      	mov	r9, r2
 80030e6:	469a      	mov	sl, r3
 80030e8:	46a3      	mov	fp, r4
 80030ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80030ec:	20fb      	movs	r0, #251	; 0xfb
 80030ee:	e7f7      	b.n	80030e0 <LoadROsnippets+0xf0>
 80030f0:	0801dc00 	.word	0x0801dc00
 80030f4:	200068b4 	.word	0x200068b4
 80030f8:	200011bb 	.word	0x200011bb

080030fc <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <LoadROtopology+0x74>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <LoadROtopology+0x78>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <LoadROtopology+0x5a>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 800310a:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 800310c:	d02b      	beq.n	8003166 <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 800310e:	491a      	ldr	r1, [pc, #104]	; (8003178 <LoadROtopology+0x7c>)
 8003110:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8003112:	4a1a      	ldr	r2, [pc, #104]	; (800317c <LoadROtopology+0x80>)
 8003114:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <LoadROtopology+0x7c>)
 8003118:	781d      	ldrb	r5, [r3, #0]
				add += 2;			
			}
		}	
	}
	
	return result;
 800311a:	2000      	movs	r0, #0
		for(uint8_t i=1 ; i<=N ; i++)
 800311c:	2d00      	cmp	r5, #0
 800311e:	d019      	beq.n	8003154 <LoadROtopology+0x58>
 8003120:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8003122:	2302      	movs	r3, #2
 8003124:	2716      	movs	r7, #22
 8003126:	4e16      	ldr	r6, [pc, #88]	; (8003180 <LoadROtopology+0x84>)
 8003128:	003a      	movs	r2, r7
 800312a:	4362      	muls	r2, r4
 800312c:	3a16      	subs	r2, #22
 800312e:	1992      	adds	r2, r2, r6
 8003130:	0018      	movs	r0, r3
 8003132:	3016      	adds	r0, #22
 8003134:	b280      	uxth	r0, r0
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8003136:	490e      	ldr	r1, [pc, #56]	; (8003170 <LoadROtopology+0x74>)
 8003138:	1859      	adds	r1, r3, r1
 800313a:	8809      	ldrh	r1, [r1, #0]
 800313c:	8011      	strh	r1, [r2, #0]
				add += 2;			
 800313e:	3302      	adds	r3, #2
 8003140:	b29b      	uxth	r3, r3
 8003142:	3202      	adds	r2, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003144:	4283      	cmp	r3, r0
 8003146:	d1f6      	bne.n	8003136 <LoadROtopology+0x3a>
		for(uint8_t i=1 ; i<=N ; i++)
 8003148:	3401      	adds	r4, #1
 800314a:	b2e4      	uxtb	r4, r4
				add += 2;			
 800314c:	0003      	movs	r3, r0
		for(uint8_t i=1 ; i<=N ; i++)
 800314e:	42ac      	cmp	r4, r5
 8003150:	d9ea      	bls.n	8003128 <LoadROtopology+0x2c>
	return result;
 8003152:	2000      	movs	r0, #0
}
 8003154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <LoadROtopology+0x7c>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
		myID = 0;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <LoadROtopology+0x80>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003162:	20fa      	movs	r0, #250	; 0xfa
 8003164:	e7f6      	b.n	8003154 <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <LoadROtopology+0x7c>)
 8003168:	2101      	movs	r1, #1
 800316a:	7011      	strb	r1, [r2, #0]
 800316c:	e7d1      	b.n	8003112 <LoadROtopology+0x16>
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	0801d800 	.word	0x0801d800
 8003174:	0000ffff 	.word	0x0000ffff
 8003178:	2000001c 	.word	0x2000001c
 800317c:	2000101c 	.word	0x2000101c
 8003180:	20000a78 	.word	0x20000a78

08003184 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8003184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003186:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <SaveEEportsDir+0x4c>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <SaveEEportsDir+0x42>
 8003190:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003192:	2300      	movs	r3, #0
 8003194:	9301      	str	r3, [sp, #4]
	{
		if (arrayPortsDir[i-1])
 8003196:	4e0f      	ldr	r6, [pc, #60]	; (80031d4 <SaveEEportsDir+0x50>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003198:	4f0d      	ldr	r7, [pc, #52]	; (80031d0 <SaveEEportsDir+0x4c>)
 800319a:	e008      	b.n	80031ae <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 800319c:	1c60      	adds	r0, r4, #1
 800319e:	f004 fb69 	bl	8007874 <EE_WriteVariable>
 80031a2:	e00a      	b.n	80031ba <SaveEEportsDir+0x36>
	for(uint8_t i=1 ; i<=N ; i++)
 80031a4:	3401      	adds	r4, #1
 80031a6:	b2e4      	uxtb	r4, r4
 80031a8:	783b      	ldrb	r3, [r7, #0]
 80031aa:	42a3      	cmp	r3, r4
 80031ac:	d30d      	bcc.n	80031ca <SaveEEportsDir+0x46>
		if (arrayPortsDir[i-1])
 80031ae:	0025      	movs	r5, r4
 80031b0:	1e63      	subs	r3, r4, #1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	5b99      	ldrh	r1, [r3, r6]
 80031b6:	2900      	cmp	r1, #0
 80031b8:	d1f0      	bne.n	800319c <SaveEEportsDir+0x18>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80031ba:	3502      	adds	r5, #2
 80031bc:	2d1b      	cmp	r5, #27
 80031be:	ddf1      	ble.n	80031a4 <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 80031c0:	230a      	movs	r3, #10
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	e7ee      	b.n	80031a4 <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK; 
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80031ca:	9801      	ldr	r0, [sp, #4]
 80031cc:	b003      	add	sp, #12
 80031ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d0:	2000001c 	.word	0x2000001c
 80031d4:	20006ca0 	.word	0x20006ca0

080031d8 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 80031d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031da:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 80031dc:	2232      	movs	r2, #50	; 0x32
 80031de:	2100      	movs	r1, #0
 80031e0:	4813      	ldr	r0, [pc, #76]	; (8003230 <ClearEEportsDir+0x58>)
 80031e2:	f00f fe2d 	bl	8012e40 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <ClearEEportsDir+0x5c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01a      	beq.n	8003224 <ClearEEportsDir+0x4c>
 80031ee:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80031f0:	2300      	movs	r3, #0
 80031f2:	9301      	str	r3, [sp, #4]
	{
		if (arrayPortsDir[i-1])
 80031f4:	4e0e      	ldr	r6, [pc, #56]	; (8003230 <ClearEEportsDir+0x58>)
	for(uint8_t i=1 ; i<=N ; i++)
 80031f6:	4f0f      	ldr	r7, [pc, #60]	; (8003234 <ClearEEportsDir+0x5c>)
 80031f8:	e008      	b.n	800320c <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80031fa:	1c60      	adds	r0, r4, #1
 80031fc:	f004 fb3a 	bl	8007874 <EE_WriteVariable>
 8003200:	e00a      	b.n	8003218 <ClearEEportsDir+0x40>
	for(uint8_t i=1 ; i<=N ; i++)
 8003202:	3401      	adds	r4, #1
 8003204:	b2e4      	uxtb	r4, r4
 8003206:	783b      	ldrb	r3, [r7, #0]
 8003208:	42a3      	cmp	r3, r4
 800320a:	d30d      	bcc.n	8003228 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i-1])
 800320c:	0025      	movs	r5, r4
 800320e:	1e63      	subs	r3, r4, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	5b99      	ldrh	r1, [r3, r6]
 8003214:	2900      	cmp	r1, #0
 8003216:	d1f0      	bne.n	80031fa <ClearEEportsDir+0x22>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003218:	3502      	adds	r5, #2
 800321a:	2d1b      	cmp	r5, #27
 800321c:	ddf1      	ble.n	8003202 <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 800321e:	230a      	movs	r3, #10
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	e7ee      	b.n	8003202 <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK; 
 8003224:	2300      	movs	r3, #0
 8003226:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8003228:	9801      	ldr	r0, [sp, #4]
 800322a:	b003      	add	sp, #12
 800322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20006ca0 	.word	0x20006ca0
 8003234:	2000001c 	.word	0x2000001c

08003238 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <LoadEEportsDir+0x40>)
 800323c:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 800323e:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003240:	2b00      	cmp	r3, #0
 8003242:	d017      	beq.n	8003274 <LoadEEportsDir+0x3c>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003244:	490d      	ldr	r1, [pc, #52]	; (800327c <LoadEEportsDir+0x44>)
 8003246:	2002      	movs	r0, #2
 8003248:	f004 fae4 	bl	8007814 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 800324c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800324e:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003250:	4f09      	ldr	r7, [pc, #36]	; (8003278 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003252:	4e0a      	ldr	r6, [pc, #40]	; (800327c <LoadEEportsDir+0x44>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003254:	3401      	adds	r4, #1
 8003256:	b2e4      	uxtb	r4, r4
 8003258:	783b      	ldrb	r3, [r7, #0]
 800325a:	42a3      	cmp	r3, r4
 800325c:	d30a      	bcc.n	8003274 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800325e:	1e61      	subs	r1, r4, #1
 8003260:	0049      	lsls	r1, r1, #1
 8003262:	1989      	adds	r1, r1, r6
 8003264:	1c60      	adds	r0, r4, #1
 8003266:	f004 fad5 	bl	8007814 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800326a:	1ca3      	adds	r3, r4, #2
 800326c:	2b1b      	cmp	r3, #27
 800326e:	ddf1      	ble.n	8003254 <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003270:	250a      	movs	r5, #10
 8003272:	e7ef      	b.n	8003254 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8003274:	0028      	movs	r0, r5
 8003276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003278:	2000001c 	.word	0x2000001c
 800327c:	20006ca0 	.word	0x20006ca0

08003280 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	46d6      	mov	lr, sl
 8003284:	464f      	mov	r7, r9
 8003286:	4646      	mov	r6, r8
 8003288:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800328a:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	4698      	mov	r8, r3
	{
		if (moduleAlias[i][0]) 				
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <SaveEEalias+0x7c>)
 8003292:	469a      	mov	sl, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <SaveEEalias+0x80>)
 8003296:	4699      	mov	r9, r3
 8003298:	e005      	b.n	80032a6 <SaveEEalias+0x26>
 800329a:	3601      	adds	r6, #1
 800329c:	b2f6      	uxtb	r6, r6
 800329e:	464b      	mov	r3, r9
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	42b3      	cmp	r3, r6
 80032a4:	d324      	bcc.n	80032f0 <SaveEEalias+0x70>
		if (moduleAlias[i][0]) 				
 80032a6:	00b3      	lsls	r3, r6, #2
 80032a8:	199b      	adds	r3, r3, r6
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4652      	mov	r2, sl
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f2      	beq.n	800329a <SaveEEalias+0x1a>
 80032b4:	00b5      	lsls	r5, r6, #2
 80032b6:	19ad      	adds	r5, r5, r6
 80032b8:	006d      	lsls	r5, r5, #1
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <SaveEEalias+0x7c>)
 80032bc:	469c      	mov	ip, r3
 80032be:	4465      	add	r5, ip
 80032c0:	4644      	mov	r4, r8
 80032c2:	341c      	adds	r4, #28
 80032c4:	b2a4      	uxth	r4, r4
 80032c6:	4647      	mov	r7, r8
 80032c8:	3721      	adds	r7, #33	; 0x21
 80032ca:	b2bf      	uxth	r7, r7
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 80032cc:	782b      	ldrb	r3, [r5, #0]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	7869      	ldrb	r1, [r5, #1]
 80032d2:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 80032d4:	b289      	uxth	r1, r1
 80032d6:	0020      	movs	r0, r4
 80032d8:	f004 facc 	bl	8007874 <EE_WriteVariable>
 80032dc:	3502      	adds	r5, #2
 80032de:	3401      	adds	r4, #1
 80032e0:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80032e2:	42bc      	cmp	r4, r7
 80032e4:	d1f2      	bne.n	80032cc <SaveEEalias+0x4c>
 80032e6:	4643      	mov	r3, r8
 80032e8:	3305      	adds	r3, #5
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4698      	mov	r8, r3
 80032ee:	e7d4      	b.n	800329a <SaveEEalias+0x1a>
			}
		}			
	}
	
	return result;
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	bc1c      	pop	{r2, r3, r4}
 80032f4:	4690      	mov	r8, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	46a2      	mov	sl, r4
 80032fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fc:	20000f18 	.word	0x20000f18
 8003300:	2000001c 	.word	0x2000001c

08003304 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46de      	mov	lr, fp
 8003308:	4657      	mov	r7, sl
 800330a:	464e      	mov	r6, r9
 800330c:	4645      	mov	r5, r8
 800330e:	b5e0      	push	{r5, r6, r7, lr}
 8003310:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 8003312:	466b      	mov	r3, sp
 8003314:	2200      	movs	r2, #0
 8003316:	80da      	strh	r2, [r3, #6]
 8003318:	241c      	movs	r4, #28
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800331a:	2700      	movs	r7, #0
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <LoadEEalias+0x7c>)
 800331e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8003320:	469b      	mov	fp, r3
 8003322:	e00c      	b.n	800333e <LoadEEalias+0x3a>
 8003324:	464b      	mov	r3, r9
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	444b      	add	r3, r9
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	445b      	add	r3, fp
 800332e:	2200      	movs	r2, #0
 8003330:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003332:	3701      	adds	r7, #1
 8003334:	b2ff      	uxtb	r7, r7
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <LoadEEalias+0x80>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	42bb      	cmp	r3, r7
 800333c:	d317      	bcc.n	800336e <LoadEEalias+0x6a>
 800333e:	00bd      	lsls	r5, r7, #2
 8003340:	19ed      	adds	r5, r5, r7
 8003342:	006d      	lsls	r5, r5, #1
 8003344:	4455      	add	r5, sl
 8003346:	1d63      	adds	r3, r4, #5
 8003348:	b29b      	uxth	r3, r3
 800334a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 800334c:	466b      	mov	r3, sp
 800334e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003350:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003352:	0031      	movs	r1, r6
 8003354:	0020      	movs	r0, r4
 8003356:	f004 fa5d 	bl	8007814 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 800335a:	8833      	ldrh	r3, [r6, #0]
 800335c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	702b      	strb	r3, [r5, #0]
 8003362:	3401      	adds	r4, #1
 8003364:	b2a4      	uxth	r4, r4
 8003366:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003368:	45a0      	cmp	r8, r4
 800336a:	d1f2      	bne.n	8003352 <LoadEEalias+0x4e>
 800336c:	e7da      	b.n	8003324 <LoadEEalias+0x20>
	}
	
	return result;
}
 800336e:	2000      	movs	r0, #0
 8003370:	b003      	add	sp, #12
 8003372:	bc3c      	pop	{r2, r3, r4, r5}
 8003374:	4690      	mov	r8, r2
 8003376:	4699      	mov	r9, r3
 8003378:	46a2      	mov	sl, r4
 800337a:	46ab      	mov	fp, r5
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000f18 	.word	0x20000f18
 8003384:	2000001c 	.word	0x2000001c

08003388 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	46d6      	mov	lr, sl
 800338c:	464f      	mov	r7, r9
 800338e:	4646      	mov	r6, r8
 8003390:	b5c0      	push	{r6, r7, lr}
 8003392:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003394:	466b      	mov	r3, sp
 8003396:	2200      	movs	r2, #0
 8003398:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <LoadEEgroup+0x9c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01d      	beq.n	80033de <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80033a2:	2500      	movs	r5, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80033a4:	4e20      	ldr	r6, [pc, #128]	; (8003428 <LoadEEgroup+0xa0>)
	for(i=0 ; i<N ; i++)			// N modules
 80033a6:	4c1f      	ldr	r4, [pc, #124]	; (8003424 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80033a8:	b2e9      	uxtb	r1, r5
 80033aa:	0049      	lsls	r1, r1, #1
 80033ac:	1871      	adds	r1, r6, r1
 80033ae:	0028      	movs	r0, r5
 80033b0:	30cb      	adds	r0, #203	; 0xcb
 80033b2:	b280      	uxth	r0, r0
 80033b4:	f004 fa2e 	bl	8007814 <EE_ReadVariable>
		add++;
 80033b8:	3501      	adds	r5, #1
 80033ba:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 80033bc:	7822      	ldrb	r2, [r4, #0]
 80033be:	b2eb      	uxtb	r3, r5
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d8f1      	bhi.n	80033a8 <LoadEEgroup+0x20>
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <LoadEEgroup+0xa4>)
 80033c6:	4699      	mov	r9, r3
 80033c8:	002c      	movs	r4, r5
 80033ca:	3499      	adds	r4, #153	; 0x99
 80033cc:	b2a4      	uxth	r4, r4
 80033ce:	35cb      	adds	r5, #203	; 0xcb
 80033d0:	b2ab      	uxth	r3, r5
 80033d2:	4698      	mov	r8, r3
	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 80033d4:	466b      	mov	r3, sp
 80033d6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80033d8:	2300      	movs	r3, #0
 80033da:	469a      	mov	sl, r3
 80033dc:	e009      	b.n	80033f2 <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80033de:	2500      	movs	r5, #0
 80033e0:	e7f0      	b.n	80033c4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80033e2:	464b      	mov	r3, r9
 80033e4:	4652      	mov	r2, sl
 80033e6:	725a      	strb	r2, [r3, #9]
 80033e8:	230a      	movs	r3, #10
 80033ea:	469c      	mov	ip, r3
 80033ec:	44e1      	add	r9, ip
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 80033ee:	4544      	cmp	r4, r8
 80033f0:	d010      	beq.n	8003414 <LoadEEgroup+0x8c>
 80033f2:	1d67      	adds	r7, r4, #5
 80033f4:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80033f6:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 80033f8:	0031      	movs	r1, r6
 80033fa:	0020      	movs	r0, r4
 80033fc:	f004 fa0a 	bl	8007814 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003400:	8833      	ldrh	r3, [r6, #0]
 8003402:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	702b      	strb	r3, [r5, #0]
 8003408:	3401      	adds	r4, #1
 800340a:	b2a4      	uxth	r4, r4
 800340c:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800340e:	42bc      	cmp	r4, r7
 8003410:	d1f2      	bne.n	80033f8 <LoadEEgroup+0x70>
 8003412:	e7e6      	b.n	80033e2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003414:	2000      	movs	r0, #0
 8003416:	b002      	add	sp, #8
 8003418:	bc1c      	pop	{r2, r3, r4}
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	46a2      	mov	sl, r4
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	2000001c 	.word	0x2000001c
 8003428:	20000e70 	.word	0x20000e70
 800342c:	20000e0c 	.word	0x20000e0c

08003430 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8003434:	210e      	movs	r1, #14
 8003436:	4469      	add	r1, sp
 8003438:	2300      	movs	r3, #0
 800343a:	800b      	strh	r3, [r1, #0]
 800343c:	aa03      	add	r2, sp, #12
 800343e:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003440:	20e4      	movs	r0, #228	; 0xe4
 8003442:	f004 f9e7 	bl	8007814 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8003446:	2600      	movs	r6, #0
	if (!status1) {
 8003448:	2800      	cmp	r0, #0
 800344a:	d102      	bne.n	8003452 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 800344c:	230e      	movs	r3, #14
 800344e:	446b      	add	r3, sp
 8003450:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8003452:	210e      	movs	r1, #14
 8003454:	4469      	add	r1, sp
 8003456:	20e5      	movs	r0, #229	; 0xe5
 8003458:	f004 f9dc 	bl	8007814 <EE_ReadVariable>
 800345c:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 800345e:	a903      	add	r1, sp, #12
 8003460:	20e6      	movs	r0, #230	; 0xe6
 8003462:	f004 f9d7 	bl	8007814 <EE_ReadVariable>
	if (!status1 && !status2) {
 8003466:	4304      	orrs	r4, r0
 8003468:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800346a:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 800346c:	2c00      	cmp	r4, #0
 800346e:	d106      	bne.n	800347e <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8003470:	230e      	movs	r3, #14
 8003472:	446b      	add	r3, sp
 8003474:	881d      	ldrh	r5, [r3, #0]
 8003476:	042d      	lsls	r5, r5, #16
 8003478:	ab03      	add	r3, sp, #12
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 800347e:	210e      	movs	r1, #14
 8003480:	4469      	add	r1, sp
 8003482:	20e7      	movs	r0, #231	; 0xe7
 8003484:	f004 f9c6 	bl	8007814 <EE_ReadVariable>
 8003488:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 800348a:	a903      	add	r1, sp, #12
 800348c:	20e8      	movs	r0, #232	; 0xe8
 800348e:	f004 f9c1 	bl	8007814 <EE_ReadVariable>
	if (!status1 && !status2) {
 8003492:	4320      	orrs	r0, r4
 8003494:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8003496:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8003498:	2800      	cmp	r0, #0
 800349a:	d106      	bne.n	80034aa <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 800349c:	230e      	movs	r3, #14
 800349e:	446b      	add	r3, sp
 80034a0:	881c      	ldrh	r4, [r3, #0]
 80034a2:	0424      	lsls	r4, r4, #16
 80034a4:	ab03      	add	r3, sp, #12
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 80034aa:	210e      	movs	r1, #14
 80034ac:	4469      	add	r1, sp
 80034ae:	20e9      	movs	r0, #233	; 0xe9
 80034b0:	f004 f9b0 	bl	8007814 <EE_ReadVariable>
	if (!status1) {
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d107      	bne.n	80034c8 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 80034b8:	230e      	movs	r3, #14
 80034ba:	446b      	add	r3, sp
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	0a19      	lsrs	r1, r3, #8
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <LoadEEstreams+0x134>)
 80034c2:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 80034c4:	4a28      	ldr	r2, [pc, #160]	; (8003568 <LoadEEstreams+0x138>)
 80034c6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 80034c8:	210e      	movs	r1, #14
 80034ca:	4469      	add	r1, sp
 80034cc:	20ea      	movs	r0, #234	; 0xea
 80034ce:	f004 f9a1 	bl	8007814 <EE_ReadVariable>
	if (!status1) {
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d107      	bne.n	80034e6 <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 80034d6:	230e      	movs	r3, #14
 80034d8:	446b      	add	r3, sp
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	0a19      	lsrs	r1, r3, #8
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <LoadEEstreams+0x13c>)
 80034e0:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <LoadEEstreams+0x140>)
 80034e4:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 80034e6:	210e      	movs	r1, #14
 80034e8:	4469      	add	r1, sp
 80034ea:	20eb      	movs	r0, #235	; 0xeb
 80034ec:	f004 f992 	bl	8007814 <EE_ReadVariable>
	if (!status1) {
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d107      	bne.n	8003504 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 80034f4:	230e      	movs	r3, #14
 80034f6:	446b      	add	r3, sp
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	0a19      	lsrs	r1, r3, #8
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <LoadEEstreams+0x144>)
 80034fe:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <LoadEEstreams+0x148>)
 8003502:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <LoadEEstreams+0x134>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <LoadEEstreams+0xe4>
 800350c:	4a16      	ldr	r2, [pc, #88]	; (8003568 <LoadEEstreams+0x138>)
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	2a00      	cmp	r2, #0
 8003512:	d112      	bne.n	800353a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <LoadEEstreams+0x13c>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <LoadEEstreams+0xf4>
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <LoadEEstreams+0x140>)
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	2a00      	cmp	r2, #0
 8003522:	d111      	bne.n	8003548 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <LoadEEstreams+0x144>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <LoadEEstreams+0x104>
 800352c:	4a12      	ldr	r2, [pc, #72]	; (8003578 <LoadEEstreams+0x148>)
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	2a00      	cmp	r2, #0
 8003532:	d110      	bne.n	8003556 <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8003534:	2000      	movs	r0, #0
 8003536:	b004      	add	sp, #16
 8003538:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	0022      	movs	r2, r4
 800353e:	0029      	movs	r1, r5
 8003540:	0030      	movs	r0, r6
 8003542:	f005 fb05 	bl	8008b50 <SetupDMAStreams>
 8003546:	e7e5      	b.n	8003514 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8003548:	9200      	str	r2, [sp, #0]
 800354a:	0022      	movs	r2, r4
 800354c:	0029      	movs	r1, r5
 800354e:	0030      	movs	r0, r6
 8003550:	f005 fafe 	bl	8008b50 <SetupDMAStreams>
 8003554:	e7e6      	b.n	8003524 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	0022      	movs	r2, r4
 800355a:	0029      	movs	r1, r5
 800355c:	0030      	movs	r0, r6
 800355e:	f005 faf7 	bl	8008b50 <SetupDMAStreams>
 8003562:	e7e7      	b.n	8003534 <LoadEEstreams+0x104>
 8003564:	200010e9 	.word	0x200010e9
 8003568:	20000e09 	.word	0x20000e09
 800356c:	200010ea 	.word	0x200010ea
 8003570:	20000e0a 	.word	0x20000e0a
 8003574:	200010eb 	.word	0x200010eb
 8003578:	20000e0b 	.word	0x20000e0b

0800357c <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	46de      	mov	lr, fp
 8003580:	4657      	mov	r7, sl
 8003582:	464e      	mov	r6, r9
 8003584:	4645      	mov	r5, r8
 8003586:	b5e0      	push	{r5, r6, r7, lr}
 8003588:	000f      	movs	r7, r1
 800358a:	0016      	movs	r6, r2
 800358c:	4699      	mov	r9, r3
 800358e:	ab0a      	add	r3, sp, #40	; 0x28
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	469b      	mov	fp, r3
 8003594:	ab0b      	add	r3, sp, #44	; 0x2c
 8003596:	781d      	ldrb	r5, [r3, #0]
 8003598:	ab0c      	add	r3, sp, #48	; 0x30
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	469a      	mov	sl, r3
 800359e:	ab0d      	add	r3, sp, #52	; 0x34
 80035a0:	781c      	ldrb	r4, [r3, #0]
 80035a2:	ab0e      	add	r3, sp, #56	; 0x38
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 80035a8:	b281      	uxth	r1, r0
 80035aa:	20e4      	movs	r0, #228	; 0xe4
 80035ac:	f004 f962 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 80035b0:	0a39      	lsrs	r1, r7, #8
 80035b2:	b289      	uxth	r1, r1
 80035b4:	20e5      	movs	r0, #229	; 0xe5
 80035b6:	f004 f95d 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 80035ba:	b2b9      	uxth	r1, r7
 80035bc:	20e6      	movs	r0, #230	; 0xe6
 80035be:	f004 f959 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 80035c2:	0a31      	lsrs	r1, r6, #8
 80035c4:	b289      	uxth	r1, r1
 80035c6:	20e7      	movs	r0, #231	; 0xe7
 80035c8:	f004 f954 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 80035cc:	b2b1      	uxth	r1, r6
 80035ce:	20e8      	movs	r0, #232	; 0xe8
 80035d0:	f004 f950 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 80035d4:	464b      	mov	r3, r9
 80035d6:	0219      	lsls	r1, r3, #8
 80035d8:	4459      	add	r1, fp
 80035da:	b289      	uxth	r1, r1
 80035dc:	20e9      	movs	r0, #233	; 0xe9
 80035de:	f004 f949 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 80035e2:	022d      	lsls	r5, r5, #8
 80035e4:	4455      	add	r5, sl
 80035e6:	b2a9      	uxth	r1, r5
 80035e8:	20ea      	movs	r0, #234	; 0xea
 80035ea:	f004 f943 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 80035ee:	0224      	lsls	r4, r4, #8
 80035f0:	4444      	add	r4, r8
 80035f2:	b2a1      	uxth	r1, r4
 80035f4:	20eb      	movs	r0, #235	; 0xeb
 80035f6:	f004 f93d 	bl	8007874 <EE_WriteVariable>
	
	return result;
}
 80035fa:	2000      	movs	r0, #0
 80035fc:	bc3c      	pop	{r2, r3, r4, r5}
 80035fe:	4690      	mov	r8, r2
 8003600:	4699      	mov	r9, r3
 8003602:	46a2      	mov	sl, r4
 8003604:	46ab      	mov	fp, r5
 8003606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003608 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003608:	b510      	push	{r4, lr}
 800360a:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 800360c:	208a      	movs	r0, #138	; 0x8a
 800360e:	466b      	mov	r3, sp
 8003610:	1d99      	adds	r1, r3, #6
 8003612:	0040      	lsls	r0, r0, #1
 8003614:	f004 f8fe 	bl	8007814 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003618:	2800      	cmp	r0, #0
 800361a:	d000      	beq.n	800361e <LoadEEparams+0x16>
 800361c:	e064      	b.n	80036e8 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 800361e:	466b      	mov	r3, sp
 8003620:	3306      	adds	r3, #6
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <LoadEEparams+0x144>)
 8003626:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 800362c:	2016      	movs	r0, #22
 800362e:	466b      	mov	r3, sp
 8003630:	1d99      	adds	r1, r3, #6
 8003632:	30ff      	adds	r0, #255	; 0xff
 8003634:	f004 f8ee 	bl	8007814 <EE_ReadVariable>
	if (!status1) 
 8003638:	2800      	cmp	r0, #0
 800363a:	d15c      	bne.n	80036f6 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 800363c:	466b      	mov	r3, sp
 800363e:	88da      	ldrh	r2, [r3, #6]
 8003640:	4b42      	ldr	r3, [pc, #264]	; (800374c <LoadEEparams+0x144>)
 8003642:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8003644:	208b      	movs	r0, #139	; 0x8b
 8003646:	466b      	mov	r3, sp
 8003648:	1d99      	adds	r1, r3, #6
 800364a:	0040      	lsls	r0, r0, #1
 800364c:	f004 f8e2 	bl	8007814 <EE_ReadVariable>
	if (!status1) 
 8003650:	2800      	cmp	r0, #0
 8003652:	d155      	bne.n	8003700 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 8003654:	466b      	mov	r3, sp
 8003656:	88da      	ldrh	r2, [r3, #6]
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <LoadEEparams+0x144>)
 800365a:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 800365c:	2018      	movs	r0, #24
 800365e:	466b      	mov	r3, sp
 8003660:	1d99      	adds	r1, r3, #6
 8003662:	30ff      	adds	r0, #255	; 0xff
 8003664:	f004 f8d6 	bl	8007814 <EE_ReadVariable>
	if (!status1) {
 8003668:	2800      	cmp	r0, #0
 800366a:	d14e      	bne.n	800370a <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 800366c:	466b      	mov	r3, sp
 800366e:	3306      	adds	r3, #6
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	4a36      	ldr	r2, [pc, #216]	; (800374c <LoadEEparams+0x144>)
 8003674:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 800367a:	208c      	movs	r0, #140	; 0x8c
 800367c:	466b      	mov	r3, sp
 800367e:	1d99      	adds	r1, r3, #6
 8003680:	0040      	lsls	r0, r0, #1
 8003682:	f004 f8c7 	bl	8007814 <EE_ReadVariable>
 8003686:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003688:	201a      	movs	r0, #26
 800368a:	a901      	add	r1, sp, #4
 800368c:	30ff      	adds	r0, #255	; 0xff
 800368e:	f004 f8c1 	bl	8007814 <EE_ReadVariable>
	if (!status1 && !status2) 
 8003692:	4304      	orrs	r4, r0
 8003694:	b2a4      	uxth	r4, r4
 8003696:	2c00      	cmp	r4, #0
 8003698:	d13e      	bne.n	8003718 <LoadEEparams+0x110>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 800369a:	ab01      	add	r3, sp, #4
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	466a      	mov	r2, sp
 80036a2:	3206      	adds	r2, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	4a28      	ldr	r2, [pc, #160]	; (800374c <LoadEEparams+0x144>)
 80036aa:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 80036ac:	208d      	movs	r0, #141	; 0x8d
 80036ae:	466b      	mov	r3, sp
 80036b0:	1d99      	adds	r1, r3, #6
 80036b2:	0040      	lsls	r0, r0, #1
 80036b4:	f004 f8ae 	bl	8007814 <EE_ReadVariable>
	if (!status1) {
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d13b      	bne.n	8003734 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 80036bc:	466b      	mov	r3, sp
 80036be:	3306      	adds	r3, #6
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	4a22      	ldr	r2, [pc, #136]	; (800374c <LoadEEparams+0x144>)
 80036c4:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 80036ca:	201c      	movs	r0, #28
 80036cc:	466b      	mov	r3, sp
 80036ce:	1d99      	adds	r1, r3, #6
 80036d0:	30ff      	adds	r0, #255	; 0xff
 80036d2:	f004 f89f 	bl	8007814 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d032      	beq.n	8003740 <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t)temp1;
	/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <LoadEEparams+0x148>)
 80036dc:	7eda      	ldrb	r2, [r3, #27]
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <LoadEEparams+0x144>)
 80036e0:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 80036e2:	2000      	movs	r0, #0
 80036e4:	b002      	add	sp, #8
 80036e6:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <LoadEEparams+0x144>)
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <LoadEEparams+0x148>)
 80036ec:	7991      	ldrb	r1, [r2, #6]
 80036ee:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 80036f0:	79d2      	ldrb	r2, [r2, #7]
 80036f2:	71da      	strb	r2, [r3, #7]
 80036f4:	e79a      	b.n	800362c <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <LoadEEparams+0x148>)
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <LoadEEparams+0x144>)
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e7a1      	b.n	8003644 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <LoadEEparams+0x148>)
 8003702:	885a      	ldrh	r2, [r3, #2]
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <LoadEEparams+0x144>)
 8003706:	805a      	strh	r2, [r3, #2]
 8003708:	e7a8      	b.n	800365c <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <LoadEEparams+0x144>)
 800370c:	4a10      	ldr	r2, [pc, #64]	; (8003750 <LoadEEparams+0x148>)
 800370e:	7911      	ldrb	r1, [r2, #4]
 8003710:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003712:	7952      	ldrb	r2, [r2, #5]
 8003714:	715a      	strb	r2, [r3, #5]
 8003716:	e7b0      	b.n	800367a <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <LoadEEparams+0x14c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <LoadEEparams+0x144>)
 8003722:	22e1      	movs	r2, #225	; 0xe1
 8003724:	0252      	lsls	r2, r2, #9
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	e7c0      	b.n	80036ac <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <LoadEEparams+0x148>)
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <LoadEEparams+0x144>)
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	e7bb      	b.n	80036ac <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <LoadEEparams+0x144>)
 8003736:	2218      	movs	r2, #24
 8003738:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 800373a:	2200      	movs	r2, #0
 800373c:	731a      	strb	r2, [r3, #12]
 800373e:	e7c4      	b.n	80036ca <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 8003740:	466b      	mov	r3, sp
 8003742:	88da      	ldrh	r2, [r3, #6]
 8003744:	4b01      	ldr	r3, [pc, #4]	; (800374c <LoadEEparams+0x144>)
 8003746:	76da      	strb	r2, [r3, #27]
 8003748:	e7cb      	b.n	80036e2 <LoadEEparams+0xda>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	20006898 	.word	0x20006898
 8003750:	20000000 	.word	0x20000000
 8003754:	20000a76 	.word	0x20000a76

08003758 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8003758:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 800375a:	4c1a      	ldr	r4, [pc, #104]	; (80037c4 <SaveEEparams+0x6c>)
 800375c:	79e3      	ldrb	r3, [r4, #7]
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	79a1      	ldrb	r1, [r4, #6]
 8003762:	4319      	orrs	r1, r3
 8003764:	208a      	movs	r0, #138	; 0x8a
 8003766:	0040      	lsls	r0, r0, #1
 8003768:	f004 f884 	bl	8007874 <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 800376c:	8821      	ldrh	r1, [r4, #0]
 800376e:	2016      	movs	r0, #22
 8003770:	30ff      	adds	r0, #255	; 0xff
 8003772:	f004 f87f 	bl	8007874 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8003776:	8861      	ldrh	r1, [r4, #2]
 8003778:	208b      	movs	r0, #139	; 0x8b
 800377a:	0040      	lsls	r0, r0, #1
 800377c:	f004 f87a 	bl	8007874 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8003780:	7963      	ldrb	r3, [r4, #5]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	7b21      	ldrb	r1, [r4, #12]
 8003786:	4319      	orrs	r1, r3
 8003788:	2018      	movs	r0, #24
 800378a:	30ff      	adds	r0, #255	; 0xff
 800378c:	f004 f872 	bl	8007874 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8003790:	8921      	ldrh	r1, [r4, #8]
 8003792:	208c      	movs	r0, #140	; 0x8c
 8003794:	0040      	lsls	r0, r0, #1
 8003796:	f004 f86d 	bl	8007874 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 800379a:	8961      	ldrh	r1, [r4, #10]
 800379c:	201a      	movs	r0, #26
 800379e:	30ff      	adds	r0, #255	; 0xff
 80037a0:	f004 f868 	bl	8007874 <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80037a4:	7b63      	ldrb	r3, [r4, #13]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	7921      	ldrb	r1, [r4, #4]
 80037aa:	4319      	orrs	r1, r3
 80037ac:	208d      	movs	r0, #141	; 0x8d
 80037ae:	0040      	lsls	r0, r0, #1
 80037b0:	f004 f860 	bl	8007874 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 80037b4:	7ee1      	ldrb	r1, [r4, #27]
 80037b6:	201c      	movs	r0, #28
 80037b8:	30ff      	adds	r0, #255	; 0xff
 80037ba:	f004 f85b 	bl	8007874 <EE_WriteVariable>
	
	return result;
}
 80037be:	2000      	movs	r0, #0
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20006898 	.word	0x20006898

080037c8 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 80037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ca:	46ce      	mov	lr, r9
 80037cc:	4647      	mov	r7, r8
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 80037d2:	231e      	movs	r3, #30
 80037d4:	446b      	add	r3, sp
 80037d6:	2200      	movs	r2, #0
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	2501      	movs	r5, #1
 80037dc:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
	{
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80037de:	001e      	movs	r6, r3
 80037e0:	230f      	movs	r3, #15
 80037e2:	4698      	mov	r8, r3
 80037e4:	e004      	b.n	80037f0 <LoadEEbuttons+0x28>
 80037e6:	3404      	adds	r4, #4
 80037e8:	b2a4      	uxth	r4, r4
 80037ea:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 80037ec:	2d07      	cmp	r5, #7
 80037ee:	d058      	beq.n	80038a2 <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80037f0:	0031      	movs	r1, r6
 80037f2:	0020      	movs	r0, r4
 80037f4:	f004 f80e 	bl	8007814 <EE_ReadVariable>
		
		if(!status1)																												// This variable exists
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d1f4      	bne.n	80037e6 <LoadEEbuttons+0x1e>
		{
			temp8 = (uint8_t)(temp16 >> 8);
 80037fc:	8831      	ldrh	r1, [r6, #0]
 80037fe:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003800:	091a      	lsrs	r2, r3, #4
 8003802:	42aa      	cmp	r2, r5
 8003804:	d1ef      	bne.n	80037e6 <LoadEEbuttons+0x1e>
 8003806:	4640      	mov	r0, r8
 8003808:	4003      	ands	r3, r0
 800380a:	d0ec      	beq.n	80037e6 <LoadEEbuttons+0x1e>
			{
				button[i+1].type = temp8 & 0x0F;
 800380c:	00d0      	lsls	r0, r2, #3
 800380e:	1882      	adds	r2, r0, r2
 8003810:	4827      	ldr	r0, [pc, #156]	; (80038b0 <LoadEEbuttons+0xe8>)
 8003812:	4681      	mov	r9, r0
 8003814:	4491      	add	r9, r2
 8003816:	464a      	mov	r2, r9
 8003818:	7053      	strb	r3, [r2, #1]
				button[i+1].events = (uint8_t)temp16;
 800381a:	7211      	strb	r1, [r2, #8]
 800381c:	00af      	lsls	r7, r5, #2
 800381e:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003820:	0038      	movs	r0, r7
 8003822:	30e9      	adds	r0, #233	; 0xe9
 8003824:	b280      	uxth	r0, r0
 8003826:	0031      	movs	r1, r6
 8003828:	f003 fff4 	bl	8007814 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 800382c:	8833      	ldrh	r3, [r6, #0]
 800382e:	0a1a      	lsrs	r2, r3, #8
 8003830:	4649      	mov	r1, r9
 8003832:	708a      	strb	r2, [r1, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8003834:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8003836:	0038      	movs	r0, r7
 8003838:	30ea      	adds	r0, #234	; 0xea
 800383a:	b280      	uxth	r0, r0
 800383c:	0031      	movs	r1, r6
 800383e:	f003 ffe9 	bl	8007814 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8003842:	8833      	ldrh	r3, [r6, #0]
 8003844:	0a1a      	lsrs	r2, r3, #8
 8003846:	4649      	mov	r1, r9
 8003848:	70ca      	strb	r2, [r1, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 800384a:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 800384c:	37eb      	adds	r7, #235	; 0xeb
 800384e:	b2b8      	uxth	r0, r7
 8003850:	0031      	movs	r1, r6
 8003852:	f003 ffdf 	bl	8007814 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8003856:	8833      	ldrh	r3, [r6, #0]
 8003858:	0a1a      	lsrs	r2, r3, #8
 800385a:	4649      	mov	r1, r9
 800385c:	710a      	strb	r2, [r1, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 800385e:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
 8003860:	b2ef      	uxtb	r7, r5
 8003862:	7848      	ldrb	r0, [r1, #1]
 8003864:	0039      	movs	r1, r7
 8003866:	f004 fef5 	bl	8008654 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 800386a:	464b      	mov	r3, r9
 800386c:	7a19      	ldrb	r1, [r3, #8]
 800386e:	789b      	ldrb	r3, [r3, #2]
 8003870:	104a      	asrs	r2, r1, #1
 8003872:	2001      	movs	r0, #1
 8003874:	4002      	ands	r2, r0
 8003876:	4001      	ands	r1, r0
 8003878:	2000      	movs	r0, #0
 800387a:	9005      	str	r0, [sp, #20]
 800387c:	4648      	mov	r0, r9
 800387e:	79c0      	ldrb	r0, [r0, #7]
 8003880:	9004      	str	r0, [sp, #16]
 8003882:	4648      	mov	r0, r9
 8003884:	7980      	ldrb	r0, [r0, #6]
 8003886:	9003      	str	r0, [sp, #12]
 8003888:	4648      	mov	r0, r9
 800388a:	7940      	ldrb	r0, [r0, #5]
 800388c:	9002      	str	r0, [sp, #8]
 800388e:	4648      	mov	r0, r9
 8003890:	7900      	ldrb	r0, [r0, #4]
 8003892:	9001      	str	r0, [sp, #4]
 8003894:	4648      	mov	r0, r9
 8003896:	78c0      	ldrb	r0, [r0, #3]
 8003898:	9000      	str	r0, [sp, #0]
 800389a:	0038      	movs	r0, r7
 800389c:	f004 fff2 	bl	8008884 <SetButtonEvents>
 80038a0:	e7a1      	b.n	80037e6 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80038a2:	2000      	movs	r0, #0
 80038a4:	b009      	add	sp, #36	; 0x24
 80038a6:	bc0c      	pop	{r2, r3}
 80038a8:	4690      	mov	r8, r2
 80038aa:	4699      	mov	r9, r3
 80038ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	20001454 	.word	0x20001454

080038b4 <LoadEEvars>:
{
 80038b4:	b510      	push	{r4, lr}
	LoadROtopology();
 80038b6:	f7ff fc21 	bl	80030fc <LoadROtopology>
	LoadEEportsDir();
 80038ba:	f7ff fcbd 	bl	8003238 <LoadEEportsDir>
	LoadEEalias();
 80038be:	f7ff fd21 	bl	8003304 <LoadEEalias>
	LoadEEgroup();
 80038c2:	f7ff fd61 	bl	8003388 <LoadEEgroup>
	LoadEEstreams();
 80038c6:	f7ff fdb3 	bl	8003430 <LoadEEstreams>
	LoadEEparams();	
 80038ca:	f7ff fe9d 	bl	8003608 <LoadEEparams>
	LoadEEbuttons();	
 80038ce:	f7ff ff7b 	bl	80037c8 <LoadEEbuttons>
	LoadROsnippets();
 80038d2:	f7ff fb8d 	bl	8002ff0 <LoadROsnippets>
}
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 80038dc:	2512      	movs	r5, #18
 80038de:	446d      	add	r5, sp
 80038e0:	ab04      	add	r3, sp, #16
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	ab07      	add	r3, sp, #28
 80038e6:	002a      	movs	r2, r5
 80038e8:	a908      	add	r1, sp, #32
 80038ea:	2001      	movs	r0, #1
 80038ec:	f008 ffd2 	bl	800c894 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 80038f0:	ac03      	add	r4, sp, #12
 80038f2:	9400      	str	r4, [sp, #0]
 80038f4:	ab05      	add	r3, sp, #20
 80038f6:	220e      	movs	r2, #14
 80038f8:	446a      	add	r2, sp
 80038fa:	a906      	add	r1, sp, #24
 80038fc:	2002      	movs	r0, #2
 80038fe:	f008 ffc9 	bl	800c894 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003902:	2301      	movs	r3, #1
 8003904:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2600      	movs	r6, #0
 8003908:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800390a:	882b      	ldrh	r3, [r5, #0]
 800390c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800390e:	a909      	add	r1, sp, #36	; 0x24
 8003910:	9808      	ldr	r0, [sp, #32]
 8003912:	f00c fe4d 	bl	80105b0 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003916:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003918:	2302      	movs	r3, #2
 800391a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 800391c:	8823      	ldrh	r3, [r4, #0]
 800391e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003920:	a909      	add	r1, sp, #36	; 0x24
 8003922:	9805      	ldr	r0, [sp, #20]
 8003924:	f00c fe44 	bl	80105b0 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003928:	8829      	ldrh	r1, [r5, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	9808      	ldr	r0, [sp, #32]
 800392e:	f00c ff25 	bl	801077c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003932:	2005      	movs	r0, #5
 8003934:	f009 fb3e 	bl	800cfb4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003938:	8821      	ldrh	r1, [r4, #0]
 800393a:	9805      	ldr	r0, [sp, #20]
 800393c:	f00c ff18 	bl	8010770 <HAL_GPIO_ReadPin>
		{
			return 1;
		}
	}

	return 0;
 8003940:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003942:	2800      	cmp	r0, #0
 8003944:	d002      	beq.n	800394c <IsLowerCLIbaud+0x74>
}
 8003946:	0018      	movs	r0, r3
 8003948:	b00e      	add	sp, #56	; 0x38
 800394a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800394c:	3312      	adds	r3, #18
 800394e:	446b      	add	r3, sp
 8003950:	8819      	ldrh	r1, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	9808      	ldr	r0, [sp, #32]
 8003956:	f00c ff11 	bl	801077c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 800395a:	2005      	movs	r0, #5
 800395c:	f009 fb2a 	bl	800cfb4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003960:	ab03      	add	r3, sp, #12
 8003962:	8819      	ldrh	r1, [r3, #0]
 8003964:	9805      	ldr	r0, [sp, #20]
 8003966:	f00c ff03 	bl	8010770 <HAL_GPIO_ReadPin>
 800396a:	3801      	subs	r0, #1
 800396c:	4243      	negs	r3, r0
 800396e:	4143      	adcs	r3, r0
			return 1;
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e7e8      	b.n	8003946 <IsLowerCLIbaud+0x6e>

08003974 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003974:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <EE_FormatForFactoryReset+0x1c>)
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <EE_FormatForFactoryReset+0x20>)
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d006      	beq.n	800398e <EE_FormatForFactoryReset+0x1a>
	{
		// Do nothing
	}
	else
	{
		if (EE_Format() == HAL_OK) 
 8003980:	f004 f820 	bl	80079c4 <EE_Format>
 8003984:	2800      	cmp	r0, #0
 8003986:	d102      	bne.n	800398e <EE_FormatForFactoryReset+0x1a>
		{
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <EE_FormatForFactoryReset+0x20>)
 800398a:	4a01      	ldr	r2, [pc, #4]	; (8003990 <EE_FormatForFactoryReset+0x1c>)
 800398c:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 800398e:	bd10      	pop	{r4, pc}
 8003990:	beefdead 	.word	0xbeefdead
 8003994:	20007ff0 	.word	0x20007ff0

08003998 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003998:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 800399a:	f009 fca1 	bl	800d2e0 <GetUart>
 800399e:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 80039a0:	23e1      	movs	r3, #225	; 0xe1
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 80039b2:	f00e fe45 	bl	8012640 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	2120      	movs	r1, #32
 80039bc:	430b      	orrs	r3, r1
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bd10      	pop	{r4, pc}
	...

080039c4 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 80039c4:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <IsModuleParameter+0x14>)
 80039c8:	6899      	ldr	r1, [r3, #8]
 80039ca:	f7fc fb9b 	bl	8000104 <strcmp>
 80039ce:	4243      	negs	r3, r0
 80039d0:	4158      	adcs	r0, r3
 80039d2:	b2c0      	uxtb	r0, r0
			return i+1;
  }
	return 0;
}
 80039d4:	bd10      	pop	{r4, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	20000088 	.word	0x20000088

080039dc <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	0004      	movs	r4, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 80039e0:	491b      	ldr	r1, [pc, #108]	; (8003a50 <IsMathOperator+0x74>)
 80039e2:	f7fc fb8f 	bl	8000104 <strcmp>
 80039e6:	0006      	movs	r6, r0
 80039e8:	2506      	movs	r5, #6
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d023      	beq.n	8003a36 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 80039ee:	4919      	ldr	r1, [pc, #100]	; (8003a54 <IsMathOperator+0x78>)
 80039f0:	0020      	movs	r0, r4
 80039f2:	f7fc fb87 	bl	8000104 <strcmp>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d01f      	beq.n	8003a3a <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 80039fa:	4917      	ldr	r1, [pc, #92]	; (8003a58 <IsMathOperator+0x7c>)
 80039fc:	0020      	movs	r0, r4
 80039fe:	f7fc fb81 	bl	8000104 <strcmp>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d01b      	beq.n	8003a3e <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003a06:	4915      	ldr	r1, [pc, #84]	; (8003a5c <IsMathOperator+0x80>)
 8003a08:	0020      	movs	r0, r4
 8003a0a:	f7fc fb7b 	bl	8000104 <strcmp>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d017      	beq.n	8003a42 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003a12:	4913      	ldr	r1, [pc, #76]	; (8003a60 <IsMathOperator+0x84>)
 8003a14:	0020      	movs	r0, r4
 8003a16:	f7fc fb75 	bl	8000104 <strcmp>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d013      	beq.n	8003a46 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003a1e:	4911      	ldr	r1, [pc, #68]	; (8003a64 <IsMathOperator+0x88>)
 8003a20:	0020      	movs	r0, r4
 8003a22:	f7fc fb6f 	bl	8000104 <strcmp>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d00f      	beq.n	8003a4a <IsMathOperator+0x6e>
 8003a2a:	3d01      	subs	r5, #1
 8003a2c:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003a2e:	2d00      	cmp	r5, #0
 8003a30:	d1db      	bne.n	80039ea <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
  }
	return 0;
 8003a32:	2000      	movs	r0, #0
}
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003a36:	2001      	movs	r0, #1
 8003a38:	e7fc      	b.n	8003a34 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	e7fa      	b.n	8003a34 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003a3e:	2003      	movs	r0, #3
 8003a40:	e7f8      	b.n	8003a34 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003a42:	2004      	movs	r0, #4
 8003a44:	e7f6      	b.n	8003a34 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003a46:	2005      	movs	r0, #5
 8003a48:	e7f4      	b.n	8003a34 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003a4a:	2006      	movs	r0, #6
 8003a4c:	e7f2      	b.n	8003a34 <IsMathOperator+0x58>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	08017a10 	.word	0x08017a10
 8003a54:	08017a14 	.word	0x08017a14
 8003a58:	08017a18 	.word	0x08017a18
 8003a5c:	08017a1c 	.word	0x08017a1c
 8003a60:	08017a20 	.word	0x08017a20
 8003a64:	08017a24 	.word	0x08017a24

08003a68 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003a6e:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003a70:	4d0d      	ldr	r5, [pc, #52]	; (8003aa8 <ExploreNeighbors+0x40>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003a72:	2603      	movs	r6, #3
		if (port != ignore) 
 8003a74:	42a7      	cmp	r7, r4
 8003a76:	d00f      	beq.n	8003a98 <ExploreNeighbors+0x30>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <ExploreNeighbors+0x44>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	0a1a      	lsrs	r2, r3, #8
 8003a7e:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003a80:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003a82:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003a84:	9600      	str	r6, [sp, #0]
 8003a86:	230a      	movs	r3, #10
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	0020      	movs	r0, r4
 8003a8e:	f005 f977 	bl	8008d80 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003a92:	200a      	movs	r0, #10
 8003a94:	f009 fd6f 	bl	800d576 <osDelay>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003a98:	3401      	adds	r4, #1
 8003a9a:	b2e4      	uxtb	r4, r4
 8003a9c:	2c06      	cmp	r4, #6
 8003a9e:	d1e9      	bne.n	8003a74 <ExploreNeighbors+0xc>
		}
	}
	
	return result;
}
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	b003      	add	sp, #12
 8003aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	20000ee8 	.word	0x20000ee8
 8003aac:	20000050 	.word	0x20000050

08003ab0 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab2:	46de      	mov	lr, fp
 8003ab4:	4657      	mov	r7, sl
 8003ab6:	464e      	mov	r6, r9
 8003ab8:	4645      	mov	r5, r8
 8003aba:	b5e0      	push	{r5, r6, r7, lr}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <FindBroadcastRoutes+0x138>)
 8003ac2:	781d      	ldrb	r5, [r3, #0]
 8003ac4:	1deb      	adds	r3, r5, #7
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	466a      	mov	r2, sp
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	469d      	mov	sp, r3
 8003ad0:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	d00b      	beq.n	8003aee <FindBroadcastRoutes+0x3e>
 8003ad6:	4a45      	ldr	r2, [pc, #276]	; (8003bec <FindBroadcastRoutes+0x13c>)
 8003ad8:	1e6e      	subs	r6, r5, #1
 8003ada:	b2f6      	uxtb	r6, r6
 8003adc:	3601      	adds	r6, #1
 8003ade:	1936      	adds	r6, r6, r4
	{	
		modules[m] = 0;
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 8003ae4:	8011      	strh	r1, [r2, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8003aea:	42b3      	cmp	r3, r6
 8003aec:	d1f9      	bne.n	8003ae2 <FindBroadcastRoutes+0x32>
	}
	modules[src-1] = ++level;					// Tag the source
 8003aee:	3801      	subs	r0, #1
 8003af0:	2301      	movs	r3, #1
 8003af2:	5423      	strb	r3, [r4, r0]
 8003af4:	2216      	movs	r2, #22
 8003af6:	4342      	muls	r2, r0
 8003af8:	3202      	adds	r2, #2
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <FindBroadcastRoutes+0x140>)
 8003afc:	18d2      	adds	r2, r2, r3
 8003afe:	2100      	movs	r1, #0
	
	for(p=1 ; p<=NumOfPorts ; p++)
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003b00:	4e3a      	ldr	r6, [pc, #232]	; (8003bec <FindBroadcastRoutes+0x13c>)
 8003b02:	0040      	lsls	r0, r0, #1
 8003b04:	2301      	movs	r3, #1
 8003b06:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003b08:	3301      	adds	r3, #1
 8003b0a:	469c      	mov	ip, r3
 8003b0c:	60fd      	str	r5, [r7, #12]
 8003b0e:	46a3      	mov	fp, r4
 8003b10:	e003      	b.n	8003b1a <FindBroadcastRoutes+0x6a>
 8003b12:	3101      	adds	r1, #1
 8003b14:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8003b16:	2905      	cmp	r1, #5
 8003b18:	d011      	beq.n	8003b3e <FindBroadcastRoutes+0x8e>
		if (array[src-1][p]) 
 8003b1a:	8813      	ldrh	r3, [r2, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f8      	beq.n	8003b12 <FindBroadcastRoutes+0x62>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003b20:	5b85      	ldrh	r5, [r0, r6]
 8003b22:	46a9      	mov	r9, r5
 8003b24:	4645      	mov	r5, r8
 8003b26:	408d      	lsls	r5, r1
 8003b28:	46aa      	mov	sl, r5
 8003b2a:	464d      	mov	r5, r9
 8003b2c:	4654      	mov	r4, sl
 8003b2e:	4325      	orrs	r5, r4
 8003b30:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	445b      	add	r3, fp
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4664      	mov	r4, ip
 8003b3a:	701c      	strb	r4, [r3, #0]
 8003b3c:	e7e9      	b.n	8003b12 <FindBroadcastRoutes+0x62>
 8003b3e:	68fd      	ldr	r5, [r7, #12]
 8003b40:	465c      	mov	r4, fp
	++level;													// Move one level
 8003b42:	2302      	movs	r3, #2
 8003b44:	4699      	mov	r9, r3
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */
	
	do
	{	
		untaged = 0;																			// Reset the untaged counter
		++level;																					// Move one level
 8003b46:	464b      	mov	r3, r9
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4699      	mov	r9, r3
		
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	d040      	beq.n	8003bd4 <FindBroadcastRoutes+0x124>
 8003b52:	4827      	ldr	r0, [pc, #156]	; (8003bf0 <FindBroadcastRoutes+0x140>)
 8003b54:	2100      	movs	r1, #0
		untaged = 0;																			// Reset the untaged counter
 8003b56:	2600      	movs	r6, #0
		{
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003b58:	2301      	movs	r3, #1
 8003b5a:	425b      	negs	r3, r3
 8003b5c:	444b      	add	r3, r9
 8003b5e:	469c      	mov	ip, r3
 8003b60:	e02c      	b.n	8003bbc <FindBroadcastRoutes+0x10c>
 8003b62:	3201      	adds	r2, #1
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003b64:	2a06      	cmp	r2, #6
 8003b66:	d021      	beq.n	8003bac <FindBroadcastRoutes+0xfc>
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003b68:	0053      	lsls	r3, r2, #1
 8003b6a:	5ac3      	ldrh	r3, [r0, r3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f8      	beq.n	8003b62 <FindBroadcastRoutes+0xb2>
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	5ce1      	ldrb	r1, [r4, r3]
 8003b76:	2900      	cmp	r1, #0
 8003b78:	d1f3      	bne.n	8003b62 <FindBroadcastRoutes+0xb2>
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003b7a:	1e51      	subs	r1, r2, #1
 8003b7c:	468a      	mov	sl, r1
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4655      	mov	r5, sl
 8003b82:	40a9      	lsls	r1, r5
 8003b84:	468a      	mov	sl, r1
 8003b86:	4919      	ldr	r1, [pc, #100]	; (8003bec <FindBroadcastRoutes+0x13c>)
 8003b88:	4645      	mov	r5, r8
 8003b8a:	5a69      	ldrh	r1, [r5, r1]
 8003b8c:	468b      	mov	fp, r1
 8003b8e:	4651      	mov	r1, sl
 8003b90:	465d      	mov	r5, fp
 8003b92:	4329      	orrs	r1, r5
 8003b94:	468a      	mov	sl, r1
 8003b96:	4915      	ldr	r1, [pc, #84]	; (8003bec <FindBroadcastRoutes+0x13c>)
 8003b98:	4645      	mov	r5, r8
 8003b9a:	4656      	mov	r6, sl
 8003b9c:	526e      	strh	r6, [r5, r1]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	54e1      	strb	r1, [r4, r3]
						++untaged;
 8003ba2:	68fe      	ldr	r6, [r7, #12]
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	b2f3      	uxtb	r3, r6
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e7da      	b.n	8003b62 <FindBroadcastRoutes+0xb2>
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68fe      	ldr	r6, [r7, #12]
 8003bb0:	687d      	ldr	r5, [r7, #4]
 8003bb2:	3101      	adds	r1, #1
 8003bb4:	3016      	adds	r0, #22
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003bb6:	b2cb      	uxtb	r3, r1
 8003bb8:	42ab      	cmp	r3, r5
 8003bba:	d209      	bcs.n	8003bd0 <FindBroadcastRoutes+0x120>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003bbc:	5c63      	ldrb	r3, [r4, r1]
 8003bbe:	4563      	cmp	r3, ip
 8003bc0:	d1f7      	bne.n	8003bb2 <FindBroadcastRoutes+0x102>
 8003bc2:	004b      	lsls	r3, r1, #1
 8003bc4:	4698      	mov	r8, r3
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	60fe      	str	r6, [r7, #12]
 8003bcc:	607d      	str	r5, [r7, #4]
 8003bce:	e7cb      	b.n	8003b68 <FindBroadcastRoutes+0xb8>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	d1b8      	bne.n	8003b46 <FindBroadcastRoutes+0x96>

	
	return result;
}
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b005      	add	sp, #20
 8003bda:	bc3c      	pop	{r2, r3, r4, r5}
 8003bdc:	4690      	mov	r8, r2
 8003bde:	4699      	mov	r9, r3
 8003be0:	46a2      	mov	sl, r4
 8003be2:	46ab      	mov	fp, r5
 8003be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	2000001c 	.word	0x2000001c
 8003bec:	20000ca0 	.word	0x20000ca0
 8003bf0:	20000a78 	.word	0x20000a78

08003bf4 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	46de      	mov	lr, fp
 8003bf8:	4657      	mov	r7, sl
 8003bfa:	464e      	mov	r6, r9
 8003bfc:	4645      	mov	r5, r8
 8003bfe:	b5e0      	push	{r5, r6, r7, lr}
 8003c00:	b08f      	sub	sp, #60	; 0x3c
 8003c02:	0005      	movs	r5, r0
 8003c04:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003c06:	2232      	movs	r2, #50	; 0x32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	a801      	add	r0, sp, #4
 8003c0c:	f00f f918 	bl	8012e40 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003c10:	2219      	movs	r2, #25
 8003c12:	2100      	movs	r1, #0
 8003c14:	485a      	ldr	r0, [pc, #360]	; (8003d80 <FindRoute+0x18c>)
 8003c16:	f00f f913 	bl	8012e40 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003c1a:	0029      	movs	r1, r5
 8003c1c:	1e68      	subs	r0, r5, #1
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <FindRoute+0x190>)
 8003c22:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003c24:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <FindRoute+0x194>)
 8003c26:	5413      	strb	r3, [r2, r0]
 8003c28:	2516      	movs	r5, #22
 8003c2a:	4345      	muls	r5, r0
 8003c2c:	3502      	adds	r5, #2
 8003c2e:	4b57      	ldr	r3, [pc, #348]	; (8003d8c <FindRoute+0x198>)
 8003c30:	18ed      	adds	r5, r5, r3
 8003c32:	002a      	movs	r2, r5
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003c34:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003c36:	4653      	mov	r3, sl
 8003c38:	b29c      	uxth	r4, r3
 8003c3a:	e003      	b.n	8003c44 <FindRoute+0x50>
	for(int col=1 ; col<=6 ; col++)
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	3202      	adds	r2, #2
 8003c40:	2807      	cmp	r0, #7
 8003c42:	d00f      	beq.n	8003c64 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003c44:	8813      	ldrh	r3, [r2, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f8      	beq.n	8003c3c <FindRoute+0x48>
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d1f5      	bne.n	8003c3c <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8003c50:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <FindRoute+0x190>)
 8003c52:	4453      	add	r3, sl
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8003c5a:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <FindRoute+0x18c>)
 8003c5c:	4652      	mov	r2, sl
 8003c5e:	701a      	strb	r2, [r3, #0]
			return col;	
 8003c60:	b2c0      	uxtb	r0, r0
 8003c62:	e085      	b.n	8003d70 <FindRoute+0x17c>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8003c64:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <FindRoute+0x19c>)
 8003c66:	781e      	ldrb	r6, [r3, #0]
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	dd11      	ble.n	8003c90 <FindRoute+0x9c>
 8003c6c:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003c6e:	24ff      	movs	r4, #255	; 0xff
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003c70:	4f45      	ldr	r7, [pc, #276]	; (8003d88 <FindRoute+0x194>)
 8003c72:	2000      	movs	r0, #0
 8003c74:	46ac      	mov	ip, r5
 8003c76:	e002      	b.n	8003c7e <FindRoute+0x8a>
	for (int i=1 ; i<=N ; i++)   					
 8003c78:	3301      	adds	r3, #1
 8003c7a:	42b3      	cmp	r3, r6
 8003c7c:	dc07      	bgt.n	8003c8e <FindRoute+0x9a>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	d0fa      	beq.n	8003c78 <FindRoute+0x84>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	4d3f      	ldr	r5, [pc, #252]	; (8003d84 <FindRoute+0x190>)
 8003c86:	54ac      	strb	r4, [r5, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003c88:	18ba      	adds	r2, r7, r2
 8003c8a:	7010      	strb	r0, [r2, #0]
 8003c8c:	e7f4      	b.n	8003c78 <FindRoute+0x84>
 8003c8e:	4665      	mov	r5, ip
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003c90:	2400      	movs	r4, #0
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <FindRoute+0x198>)
 8003c94:	4698      	mov	r8, r3
 8003c96:	230e      	movs	r3, #14
 8003c98:	4443      	add	r3, r8
 8003c9a:	4656      	mov	r6, sl
 8003c9c:	469b      	mov	fp, r3
 8003c9e:	46a9      	mov	r9, r5
 8003ca0:	e01d      	b.n	8003cde <FindRoute+0xea>
 8003ca2:	464d      	mov	r5, r9
 8003ca4:	46b2      	mov	sl, r6
	}
	
	/* Algorithm */
	while (!QnotEmpty(Q))
	{				
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003ca6:	0034      	movs	r4, r6
 8003ca8:	e034      	b.n	8003d14 <FindRoute+0x120>
 8003caa:	3102      	adds	r1, #2
		}
		else
			Q[u-1] = 1;													// Remove u from Q 
																								
		/* For each neighbor v where v is still in Q. */
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003cac:	4281      	cmp	r1, r0
 8003cae:	d015      	beq.n	8003cdc <FindRoute+0xe8>
		{
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003cb0:	880b      	ldrh	r3, [r1, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f9      	beq.n	8003caa <FindRoute+0xb6>
			{	
				v = (array[u-1][n]>>3);
 8003cb6:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	5cd7      	ldrb	r7, [r2, r3]
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	d1f3      	bne.n	8003caa <FindRoute+0xb6>
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003cc2:	4f30      	ldr	r7, [pc, #192]	; (8003d84 <FindRoute+0x190>)
 8003cc4:	5d7f      	ldrb	r7, [r7, r5]
 8003cc6:	3701      	adds	r7, #1
 8003cc8:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8003cca:	4e2e      	ldr	r6, [pc, #184]	; (8003d84 <FindRoute+0x190>)
 8003ccc:	5cf6      	ldrb	r6, [r6, r3]
 8003cce:	42be      	cmp	r6, r7
 8003cd0:	d9eb      	bls.n	8003caa <FindRoute+0xb6>
					{
						routeDist[v-1] = alt; 
 8003cd2:	4e2c      	ldr	r6, [pc, #176]	; (8003d84 <FindRoute+0x190>)
 8003cd4:	54f7      	strb	r7, [r6, r3]
						routePrev[v-1] = u; 
 8003cd6:	4e2c      	ldr	r6, [pc, #176]	; (8003d88 <FindRoute+0x194>)
 8003cd8:	54f4      	strb	r4, [r6, r3]
 8003cda:	e7e6      	b.n	8003caa <FindRoute+0xb6>
 8003cdc:	4656      	mov	r6, sl
	while (!QnotEmpty(Q))
 8003cde:	a801      	add	r0, sp, #4
 8003ce0:	f7ff f974 	bl	8002fcc <QnotEmpty>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d113      	bne.n	8003d10 <FindRoute+0x11c>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003ce8:	a901      	add	r1, sp, #4
 8003cea:	4826      	ldr	r0, [pc, #152]	; (8003d84 <FindRoute+0x190>)
 8003cec:	f7ff f950 	bl	8002f90 <minArr>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003cf4:	42b4      	cmp	r4, r6
 8003cf6:	d0d4      	beq.n	8003ca2 <FindRoute+0xae>
			Q[u-1] = 1;													// Remove u from Q 
 8003cf8:	1e65      	subs	r5, r4, #1
 8003cfa:	ab01      	add	r3, sp, #4
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	555a      	strb	r2, [r3, r5]
 8003d00:	2016      	movs	r0, #22
 8003d02:	4368      	muls	r0, r5
 8003d04:	1c81      	adds	r1, r0, #2
 8003d06:	4441      	add	r1, r8
 8003d08:	4458      	add	r0, fp
				if (!Q[v-1])												// v is still in Q
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	46b2      	mov	sl, r6
 8003d0e:	e7cf      	b.n	8003cb0 <FindRoute+0xbc>
 8003d10:	464d      	mov	r5, r9
 8003d12:	46b2      	mov	sl, r6
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <FindRoute+0x194>)
 8003d16:	191b      	adds	r3, r3, r4
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d00e      	beq.n	8003d40 <FindRoute+0x14c>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 8003d22:	4917      	ldr	r1, [pc, #92]	; (8003d80 <FindRoute+0x18c>)
 8003d24:	468c      	mov	ip, r1
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003d26:	4e18      	ldr	r6, [pc, #96]	; (8003d88 <FindRoute+0x194>)
 8003d28:	e000      	b.n	8003d2c <FindRoute+0x138>
 8003d2a:	000a      	movs	r2, r1
		route[j++] = u;          				// Push the vertex onto the stack
 8003d2c:	1c58      	adds	r0, r3, #1
 8003d2e:	4661      	mov	r1, ip
 8003d30:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003d32:	18b3      	adds	r3, r6, r2
 8003d34:	3b01      	subs	r3, #1
 8003d36:	7819      	ldrb	r1, [r3, #0]
 8003d38:	0014      	movs	r4, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8003d3a:	b2c3      	uxtb	r3, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d1f4      	bne.n	8003d2a <FindRoute+0x136>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 8003d40:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003d42:	490f      	ldr	r1, [pc, #60]	; (8003d80 <FindRoute+0x18c>)
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <FindRoute+0x190>)
 8003d46:	4453      	add	r3, sl
 8003d48:	001f      	movs	r7, r3
 8003d4a:	3f01      	subs	r7, #1
 8003d4c:	e003      	b.n	8003d56 <FindRoute+0x162>
	for(int col=1 ; col<=6 ; col++)	
 8003d4e:	3001      	adds	r0, #1
 8003d50:	3502      	adds	r5, #2
 8003d52:	2807      	cmp	r0, #7
 8003d54:	d00b      	beq.n	8003d6e <FindRoute+0x17a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003d56:	882b      	ldrh	r3, [r5, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f8      	beq.n	8003d4e <FindRoute+0x15a>
 8003d5c:	783a      	ldrb	r2, [r7, #0]
 8003d5e:	188a      	adds	r2, r1, r2
 8003d60:	3a01      	subs	r2, #1
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	08db      	lsrs	r3, r3, #3
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d1f1      	bne.n	8003d4e <FindRoute+0x15a>
			return col;	
 8003d6a:	b2c0      	uxtb	r0, r0
 8003d6c:	e000      	b.n	8003d70 <FindRoute+0x17c>
		}
	}	

	return 0;			
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	b00f      	add	sp, #60	; 0x3c
 8003d72:	bc3c      	pop	{r2, r3, r4, r5}
 8003d74:	4690      	mov	r8, r2
 8003d76:	4699      	mov	r9, r3
 8003d78:	46a2      	mov	sl, r4
 8003d7a:	46ab      	mov	fp, r5
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20006950 	.word	0x20006950
 8003d84:	200010b4 	.word	0x200010b4
 8003d88:	200010d0 	.word	0x200010d0
 8003d8c:	20000a78 	.word	0x20000a78
 8003d90:	2000001c 	.word	0x2000001c

08003d94 <remoteBootloaderUpdate>:
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	0007      	movs	r7, r0
 8003d9a:	000e      	movs	r6, r1
 8003d9c:	9205      	str	r2, [sp, #20]
 8003d9e:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 8003da0:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003da2:	7818      	ldrb	r0, [r3, #0]
 8003da4:	f7ff ff26 	bl	8003bf4 <FindRoute>
 8003da8:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 8003daa:	2d00      	cmp	r5, #0
 8003dac:	d020      	beq.n	8003df0 <remoteBootloaderUpdate+0x5c>
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003db0:	781c      	ldrb	r4, [r3, #0]
 8003db2:	42b4      	cmp	r4, r6
 8003db4:	d05f      	beq.n	8003e76 <remoteBootloaderUpdate+0xe2>
	if (src == myID)
 8003db6:	42bc      	cmp	r4, r7
 8003db8:	d034      	beq.n	8003e24 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003dba:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003dbc:	9805      	ldr	r0, [sp, #20]
 8003dbe:	f7ff fdeb 	bl	8003998 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003dc2:	9804      	ldr	r0, [sp, #16]
 8003dc4:	f7ff fde8 	bl	8003998 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d046      	beq.n	8003e5e <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003dd2:	7819      	ldrb	r1, [r3, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	3303      	adds	r3, #3
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	000b      	movs	r3, r1
 8003de4:	9a04      	ldr	r2, [sp, #16]
 8003de6:	9805      	ldr	r0, [sp, #20]
 8003de8:	f005 fa18 	bl	800921c <StartScastDMAStream>
}
 8003dec:	b007      	add	sp, #28
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <remoteBootloaderUpdate+0xf0>)
 8003df2:	199b      	adds	r3, r3, r6
 8003df4:	3b01      	subs	r3, #1
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	2a01      	cmp	r2, #1
 8003dfa:	d010      	beq.n	8003e1e <remoteBootloaderUpdate+0x8a>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <remoteBootloaderUpdate+0xf4>)
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	3b01      	subs	r3, #1
 8003e02:	781c      	ldrb	r4, [r3, #0]
	if (src == myID)
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	42bb      	cmp	r3, r7
 8003e0a:	d1d7      	bne.n	8003dbc <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003e0c:	f009 fcc8 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8003e10:	0007      	movs	r7, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <remoteBootloaderUpdate+0xf8>)
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	0032      	movs	r2, r6
 8003e18:	f00f fa0c 	bl	8013234 <sprintf>
 8003e1c:	e00d      	b.n	8003e3a <remoteBootloaderUpdate+0xa6>
			lastModule = myID;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <remoteBootloaderUpdate+0xec>)
 8003e20:	781c      	ldrb	r4, [r3, #0]
 8003e22:	e7ef      	b.n	8003e04 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003e24:	f009 fcbc 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8003e28:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003e2a:	2400      	movs	r4, #0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <remoteBootloaderUpdate+0xfc>)
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	002b      	movs	r3, r5
 8003e32:	0032      	movs	r2, r6
 8003e34:	0038      	movs	r0, r7
 8003e36:	f00f f9fd 	bl	8013234 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <remoteBootloaderUpdate+0x100>)
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	0038      	movs	r0, r7
 8003e40:	f00f fa18 	bl	8013274 <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8003e44:	0038      	movs	r0, r7
 8003e46:	f7fc f967 	bl	8000118 <strlen>
 8003e4a:	b282      	uxth	r2, r0
 8003e4c:	2332      	movs	r3, #50	; 0x32
 8003e4e:	0039      	movs	r1, r7
 8003e50:	9805      	ldr	r0, [sp, #20]
 8003e52:	f009 fa8b 	bl	800d36c <writePxITMutex>
		Delay_ms(100);
 8003e56:	2064      	movs	r0, #100	; 0x64
 8003e58:	f00b fbc4 	bl	800f5e4 <HAL_Delay>
 8003e5c:	e7ae      	b.n	8003dbc <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8003e5e:	9804      	ldr	r0, [sp, #16]
 8003e60:	f009 fa3e 	bl	800d2e0 <GetUart>
 8003e64:	2101      	movs	r1, #1
 8003e66:	f009 fad1 	bl	800d40c <SwapUartPins>
 8003e6a:	e7b1      	b.n	8003dd0 <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003e6c:	f009 fc98 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8003e70:	0007      	movs	r7, r0
		myOutport = outport;
 8003e72:	9504      	str	r5, [sp, #16]
 8003e74:	e7da      	b.n	8003e2c <remoteBootloaderUpdate+0x98>
	if (src == myID)
 8003e76:	42bc      	cmp	r4, r7
 8003e78:	d0f8      	beq.n	8003e6c <remoteBootloaderUpdate+0xd8>
		myOutport = outport;
 8003e7a:	9504      	str	r5, [sp, #16]
 8003e7c:	e79e      	b.n	8003dbc <remoteBootloaderUpdate+0x28>
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	2000101c 	.word	0x2000101c
 8003e84:	200010b4 	.word	0x200010b4
 8003e88:	20006950 	.word	0x20006950
 8003e8c:	20000078 	.word	0x20000078
 8003e90:	2000007c 	.word	0x2000007c
 8003e94:	20000080 	.word	0x20000080

08003e98 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	46d6      	mov	lr, sl
 8003e9c:	464f      	mov	r7, r9
 8003e9e:	4646      	mov	r6, r8
 8003ea0:	b5c0      	push	{r6, r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	0005      	movs	r5, r0
 8003ea6:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003ea8:	4c56      	ldr	r4, [pc, #344]	; (8004004 <DisplayTopology+0x16c>)
 8003eaa:	4b57      	ldr	r3, [pc, #348]	; (8004008 <DisplayTopology+0x170>)
 8003eac:	0022      	movs	r2, r4
 8003eae:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003eb0:	c243      	stmia	r2!, {r0, r1, r6}
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	889b      	ldrh	r3, [r3, #4]
 8003eb8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003eba:	0020      	movs	r0, r4
 8003ebc:	f7fc f92c 	bl	8000118 <strlen>
 8003ec0:	b282      	uxth	r2, r0
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	425b      	negs	r3, r3
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	3333      	adds	r3, #51	; 0x33
 8003eca:	0021      	movs	r1, r4
 8003ecc:	0028      	movs	r0, r5
 8003ece:	f009 fa25 	bl	800d31c <writePxMutex>
 8003ed2:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8003ed4:	4f4d      	ldr	r7, [pc, #308]	; (800400c <DisplayTopology+0x174>)
 8003ed6:	4d4b      	ldr	r5, [pc, #300]	; (8004004 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003ed8:	2601      	movs	r6, #1
 8003eda:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8003edc:	0022      	movs	r2, r4
 8003ede:	0039      	movs	r1, r7
 8003ee0:	0028      	movs	r0, r5
 8003ee2:	f00f f9a7 	bl	8013234 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003ee6:	0028      	movs	r0, r5
 8003ee8:	f7fc f916 	bl	8000118 <strlen>
 8003eec:	b282      	uxth	r2, r0
 8003eee:	9600      	str	r6, [sp, #0]
 8003ef0:	2332      	movs	r3, #50	; 0x32
 8003ef2:	0029      	movs	r1, r5
 8003ef4:	9803      	ldr	r0, [sp, #12]
 8003ef6:	f009 fa11 	bl	800d31c <writePxMutex>
 8003efa:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8003efc:	2c06      	cmp	r4, #6
 8003efe:	d1ed      	bne.n	8003edc <DisplayTopology+0x44>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8003f00:	2301      	movs	r3, #1
 8003f02:	425b      	negs	r3, r3
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	3333      	adds	r3, #51	; 0x33
 8003f08:	2203      	movs	r2, #3
 8003f0a:	4941      	ldr	r1, [pc, #260]	; (8004010 <DisplayTopology+0x178>)
 8003f0c:	9803      	ldr	r0, [sp, #12]
 8003f0e:	f009 fa05 	bl	800d31c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 8003f12:	4b40      	ldr	r3, [pc, #256]	; (8004014 <DisplayTopology+0x17c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d065      	beq.n	8003fe6 <DisplayTopology+0x14e>
 8003f1a:	2600      	movs	r6, #0
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003f1c:	2701      	movs	r7, #1
 8003f1e:	427f      	negs	r7, r7
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003f20:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <DisplayTopology+0x180>)
 8003f22:	4699      	mov	r9, r3
 8003f24:	230c      	movs	r3, #12
 8003f26:	444b      	add	r3, r9
 8003f28:	469a      	mov	sl, r3
 8003f2a:	e02a      	b.n	8003f82 <DisplayTopology+0xea>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8003f2c:	2307      	movs	r3, #7
 8003f2e:	4013      	ands	r3, r2
 8003f30:	08d2      	lsrs	r2, r2, #3
 8003f32:	493a      	ldr	r1, [pc, #232]	; (800401c <DisplayTopology+0x184>)
 8003f34:	4833      	ldr	r0, [pc, #204]	; (8004004 <DisplayTopology+0x16c>)
 8003f36:	f00f f97d 	bl	8013234 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8003f3a:	4d32      	ldr	r5, [pc, #200]	; (8004004 <DisplayTopology+0x16c>)
 8003f3c:	0028      	movs	r0, r5
 8003f3e:	f7fc f8eb 	bl	8000118 <strlen>
 8003f42:	b282      	uxth	r2, r0
 8003f44:	9700      	str	r7, [sp, #0]
 8003f46:	2332      	movs	r3, #50	; 0x32
 8003f48:	0029      	movs	r1, r5
 8003f4a:	9803      	ldr	r0, [sp, #12]
 8003f4c:	f009 f9e6 	bl	800d31c <writePxMutex>
 8003f50:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8003f52:	42b4      	cmp	r4, r6
 8003f54:	d007      	beq.n	8003f66 <DisplayTopology+0xce>
			if (!array[row][col])
 8003f56:	8822      	ldrh	r2, [r4, #0]
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d1e7      	bne.n	8003f2c <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t",0);
 8003f5c:	4930      	ldr	r1, [pc, #192]	; (8004020 <DisplayTopology+0x188>)
 8003f5e:	4829      	ldr	r0, [pc, #164]	; (8004004 <DisplayTopology+0x16c>)
 8003f60:	f00f f968 	bl	8013234 <sprintf>
 8003f64:	e7e9      	b.n	8003f3a <DisplayTopology+0xa2>
 8003f66:	4646      	mov	r6, r8
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8003f68:	9700      	str	r7, [sp, #0]
 8003f6a:	2332      	movs	r3, #50	; 0x32
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	492d      	ldr	r1, [pc, #180]	; (8004024 <DisplayTopology+0x18c>)
 8003f70:	9803      	ldr	r0, [sp, #12]
 8003f72:	f009 f9d3 	bl	800d31c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8003f76:	3601      	adds	r6, #1
 8003f78:	b2f6      	uxtb	r6, r6
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <DisplayTopology+0x17c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	42b3      	cmp	r3, r6
 8003f80:	d931      	bls.n	8003fe6 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8003f82:	1c72      	adds	r2, r6, #1
 8003f84:	4c1f      	ldr	r4, [pc, #124]	; (8004004 <DisplayTopology+0x16c>)
 8003f86:	4928      	ldr	r1, [pc, #160]	; (8004028 <DisplayTopology+0x190>)
 8003f88:	0020      	movs	r0, r4
 8003f8a:	f00f f953 	bl	8013234 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003f8e:	0020      	movs	r0, r4
 8003f90:	f7fc f8c2 	bl	8000118 <strlen>
 8003f94:	b282      	uxth	r2, r0
 8003f96:	9700      	str	r7, [sp, #0]
 8003f98:	2332      	movs	r3, #50	; 0x32
 8003f9a:	0021      	movs	r1, r4
 8003f9c:	9803      	ldr	r0, [sp, #12]
 8003f9e:	f009 f9bd 	bl	800d31c <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003fa2:	2516      	movs	r5, #22
 8003fa4:	4375      	muls	r5, r6
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	5aeb      	ldrh	r3, [r5, r3]
 8003faa:	0059      	lsls	r1, r3, #1
 8003fac:	18c9      	adds	r1, r1, r3
 8003fae:	0049      	lsls	r1, r1, #1
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <DisplayTopology+0x194>)
 8003fb2:	1859      	adds	r1, r3, r1
 8003fb4:	2205      	movs	r2, #5
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	f00f f991 	bl	80132de <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8003fbc:	9700      	str	r7, [sp, #0]
 8003fbe:	2332      	movs	r3, #50	; 0x32
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	0021      	movs	r1, r4
 8003fc4:	9c03      	ldr	r4, [sp, #12]
 8003fc6:	0020      	movs	r0, r4
 8003fc8:	f009 f9a8 	bl	800d31c <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8003fcc:	9700      	str	r7, [sp, #0]
 8003fce:	2332      	movs	r3, #50	; 0x32
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4917      	ldr	r1, [pc, #92]	; (8004030 <DisplayTopology+0x198>)
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f009 f9a1 	bl	800d31c <writePxMutex>
 8003fda:	1cac      	adds	r4, r5, #2
 8003fdc:	444c      	add	r4, r9
 8003fde:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t",0);
 8003fe0:	46b0      	mov	r8, r6
 8003fe2:	002e      	movs	r6, r5
 8003fe4:	e7b7      	b.n	8003f56 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	425b      	negs	r3, r3
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	3333      	adds	r3, #51	; 0x33
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4910      	ldr	r1, [pc, #64]	; (8004034 <DisplayTopology+0x19c>)
 8003ff2:	9803      	ldr	r0, [sp, #12]
 8003ff4:	f009 f992 	bl	800d31c <writePxMutex>
}
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bc1c      	pop	{r2, r3, r4}
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	4699      	mov	r9, r3
 8004000:	46a2      	mov	sl, r4
 8004002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004004:	20001048 	.word	0x20001048
 8004008:	080179d4 	.word	0x080179d4
 800400c:	080179e8 	.word	0x080179e8
 8004010:	080181dc 	.word	0x080181dc
 8004014:	2000001c 	.word	0x2000001c
 8004018:	20000a78 	.word	0x20000a78
 800401c:	08017a00 	.word	0x08017a00
 8004020:	080179fc 	.word	0x080179fc
 8004024:	0801787c 	.word	0x0801787c
 8004028:	080179f0 	.word	0x080179f0
 800402c:	08017a3c 	.word	0x08017a3c
 8004030:	080179e4 	.word	0x080179e4
 8004034:	080195bc 	.word	0x080195bc

08004038 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	46c6      	mov	lr, r8
 800403c:	b500      	push	{lr}
 800403e:	b084      	sub	sp, #16
 8004040:	0005      	movs	r5, r0
 8004042:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8004044:	4c30      	ldr	r4, [pc, #192]	; (8004108 <DisplayPortsDir+0xd0>)
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <DisplayPortsDir+0xd4>)
 8004048:	0022      	movs	r2, r4
 800404a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404c:	c243      	stmia	r2!, {r0, r1, r6}
 800404e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004050:	c243      	stmia	r2!, {r0, r1, r6}
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004056:	0020      	movs	r0, r4
 8004058:	f7fc f85e 	bl	8000118 <strlen>
 800405c:	b282      	uxth	r2, r0
 800405e:	2301      	movs	r3, #1
 8004060:	425b      	negs	r3, r3
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	3333      	adds	r3, #51	; 0x33
 8004066:	0021      	movs	r1, r4
 8004068:	0028      	movs	r0, r5
 800406a:	f009 f957 	bl	800d31c <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 800406e:	4b28      	ldr	r3, [pc, #160]	; (8004110 <DisplayPortsDir+0xd8>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	4690      	mov	r8, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02c      	beq.n	80040d4 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800407a:	4e26      	ldr	r6, [pc, #152]	; (8004114 <DisplayPortsDir+0xdc>)
 800407c:	e025      	b.n	80040ca <DisplayPortsDir+0x92>
 800407e:	0023      	movs	r3, r4
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8004080:	2c0a      	cmp	r4, #10
 8004082:	d01a      	beq.n	80040ba <DisplayPortsDir+0x82>
 8004084:	1c5c      	adds	r4, r3, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004086:	5ba9      	ldrh	r1, [r5, r6]
 8004088:	2280      	movs	r2, #128	; 0x80
 800408a:	0212      	lsls	r2, r2, #8
 800408c:	411a      	asrs	r2, r3
 800408e:	420a      	tst	r2, r1
 8004090:	d0f5      	beq.n	800407e <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8004092:	4f1d      	ldr	r7, [pc, #116]	; (8004108 <DisplayPortsDir+0xd0>)
 8004094:	0023      	movs	r3, r4
 8004096:	4642      	mov	r2, r8
 8004098:	491f      	ldr	r1, [pc, #124]	; (8004118 <DisplayPortsDir+0xe0>)
 800409a:	0038      	movs	r0, r7
 800409c:	f00f f8ca 	bl	8013234 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80040a0:	0038      	movs	r0, r7
 80040a2:	f7fc f839 	bl	8000118 <strlen>
 80040a6:	b282      	uxth	r2, r0
 80040a8:	2301      	movs	r3, #1
 80040aa:	425b      	negs	r3, r3
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	3333      	adds	r3, #51	; 0x33
 80040b0:	0039      	movs	r1, r7
 80040b2:	9803      	ldr	r0, [sp, #12]
 80040b4:	f009 f932 	bl	800d31c <writePxMutex>
 80040b8:	e7e1      	b.n	800407e <DisplayPortsDir+0x46>
	for (uint8_t i=1 ; i<=N ; i++) 
 80040ba:	4643      	mov	r3, r8
 80040bc:	3301      	adds	r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4698      	mov	r8, r3
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <DisplayPortsDir+0xd8>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4543      	cmp	r3, r8
 80040c8:	d304      	bcc.n	80040d4 <DisplayPortsDir+0x9c>
{
 80040ca:	2300      	movs	r3, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80040cc:	4642      	mov	r2, r8
 80040ce:	1e55      	subs	r5, r2, #1
 80040d0:	006d      	lsls	r5, r5, #1
 80040d2:	e7d7      	b.n	8004084 <DisplayPortsDir+0x4c>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 80040d4:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <DisplayPortsDir+0xd0>)
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <DisplayPortsDir+0xe4>)
 80040d8:	0022      	movs	r2, r4
 80040da:	cb23      	ldmia	r3!, {r0, r1, r5}
 80040dc:	c223      	stmia	r2!, {r0, r1, r5}
 80040de:	cb23      	ldmia	r3!, {r0, r1, r5}
 80040e0:	c223      	stmia	r2!, {r0, r1, r5}
 80040e2:	cb03      	ldmia	r3!, {r0, r1}
 80040e4:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80040e6:	0020      	movs	r0, r4
 80040e8:	f7fc f816 	bl	8000118 <strlen>
 80040ec:	b282      	uxth	r2, r0
 80040ee:	2301      	movs	r3, #1
 80040f0:	425b      	negs	r3, r3
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	3333      	adds	r3, #51	; 0x33
 80040f6:	0021      	movs	r1, r4
 80040f8:	9803      	ldr	r0, [sp, #12]
 80040fa:	f009 f90f 	bl	800d31c <writePxMutex>
}
 80040fe:	b004      	add	sp, #16
 8004100:	bc04      	pop	{r2}
 8004102:	4690      	mov	r8, r2
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	20001048 	.word	0x20001048
 800410c:	08017984 	.word	0x08017984
 8004110:	2000001c 	.word	0x2000001c
 8004114:	20006ca0 	.word	0x20006ca0
 8004118:	080179a0 	.word	0x080179a0
 800411c:	080179b4 	.word	0x080179b4

08004120 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004122:	46d6      	mov	lr, sl
 8004124:	b500      	push	{lr}
 8004126:	b084      	sub	sp, #16
 8004128:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800412a:	f009 fb39 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 800412e:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 8004130:	2300      	movs	r3, #0
 8004132:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8004134:	4b8d      	ldr	r3, [pc, #564]	; (800436c <DisplayModuleStatus+0x24c>)
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	4d8d      	ldr	r5, [pc, #564]	; (8004370 <DisplayModuleStatus+0x250>)
 800413a:	498e      	ldr	r1, [pc, #568]	; (8004374 <DisplayModuleStatus+0x254>)
 800413c:	0028      	movs	r0, r5
 800413e:	f00f f879 	bl	8013234 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004142:	0029      	movs	r1, r5
 8004144:	0020      	movs	r0, r4
 8004146:	f00f f895 	bl	8013274 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <DisplayModuleStatus+0x258>)
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	498b      	ldr	r1, [pc, #556]	; (800437c <DisplayModuleStatus+0x25c>)
 8004150:	0028      	movs	r0, r5
 8004152:	f00f f86f 	bl	8013234 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004156:	0029      	movs	r1, r5
 8004158:	0020      	movs	r0, r4
 800415a:	f00f f88b 	bl	8013274 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 800415e:	2304      	movs	r3, #4
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	3b02      	subs	r3, #2
 8004164:	2200      	movs	r2, #0
 8004166:	4986      	ldr	r1, [pc, #536]	; (8004380 <DisplayModuleStatus+0x260>)
 8004168:	0028      	movs	r0, r5
 800416a:	f00f f863 	bl	8013234 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800416e:	0029      	movs	r1, r5
 8004170:	0020      	movs	r0, r4
 8004172:	f00f f87f 	bl	8013274 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8004176:	4a83      	ldr	r2, [pc, #524]	; (8004384 <DisplayModuleStatus+0x264>)
 8004178:	4983      	ldr	r1, [pc, #524]	; (8004388 <DisplayModuleStatus+0x268>)
 800417a:	0028      	movs	r0, r5
 800417c:	f00f f85a 	bl	8013234 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004180:	0029      	movs	r1, r5
 8004182:	0020      	movs	r0, r4
 8004184:	f00f f876 	bl	8013274 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8004188:	4a80      	ldr	r2, [pc, #512]	; (800438c <DisplayModuleStatus+0x26c>)
 800418a:	4981      	ldr	r1, [pc, #516]	; (8004390 <DisplayModuleStatus+0x270>)
 800418c:	0028      	movs	r0, r5
 800418e:	f00f f851 	bl	8013234 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004192:	0029      	movs	r1, r5
 8004194:	0020      	movs	r0, r4
 8004196:	f00f f86d 	bl	8013274 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 800419a:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <DisplayModuleStatus+0x274>)
 800419c:	002a      	movs	r2, r5
 800419e:	cb43      	ldmia	r3!, {r0, r1, r6}
 80041a0:	c243      	stmia	r2!, {r0, r1, r6}
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	8899      	ldrh	r1, [r3, #4]
 80041a8:	8091      	strh	r1, [r2, #4]
 80041aa:	799b      	ldrb	r3, [r3, #6]
 80041ac:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 80041ae:	0029      	movs	r1, r5
 80041b0:	0020      	movs	r0, r4
 80041b2:	f00f f85f 	bl	8013274 <strcat>
 80041b6:	2601      	movs	r6, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 80041b8:	4d6d      	ldr	r5, [pc, #436]	; (8004370 <DisplayModuleStatus+0x250>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 80041ba:	4b77      	ldr	r3, [pc, #476]	; (8004398 <DisplayModuleStatus+0x278>)
 80041bc:	469a      	mov	sl, r3
 80041be:	e00e      	b.n	80041de <DisplayModuleStatus+0xbe>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 80041c0:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <DisplayModuleStatus+0x250>)
 80041c2:	4a76      	ldr	r2, [pc, #472]	; (800439c <DisplayModuleStatus+0x27c>)
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	6019      	str	r1, [r3, #0]
 80041c8:	8891      	ldrh	r1, [r2, #4]
 80041ca:	8099      	strh	r1, [r3, #4]
 80041cc:	7992      	ldrb	r2, [r2, #6]
 80041ce:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 80041d0:	4967      	ldr	r1, [pc, #412]	; (8004370 <DisplayModuleStatus+0x250>)
 80041d2:	0020      	movs	r0, r4
 80041d4:	f00f f84e 	bl	8013274 <strcat>
 80041d8:	3601      	adds	r6, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80041da:	2e06      	cmp	r6, #6
 80041dc:	d039      	beq.n	8004252 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 80041de:	0032      	movs	r2, r6
 80041e0:	496f      	ldr	r1, [pc, #444]	; (80043a0 <DisplayModuleStatus+0x280>)
 80041e2:	0028      	movs	r0, r5
 80041e4:	f00f f826 	bl	8013234 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 80041e8:	0029      	movs	r1, r5
 80041ea:	0020      	movs	r0, r4
 80041ec:	f00f f842 	bl	8013274 <strcat>
		switch (portStatus[i])
 80041f0:	4653      	mov	r3, sl
 80041f2:	5cf3      	ldrb	r3, [r6, r3]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d8eb      	bhi.n	80041d0 <DisplayModuleStatus+0xb0>
 80041f8:	4653      	mov	r3, sl
 80041fa:	5cf3      	ldrb	r3, [r6, r3]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a69      	ldr	r2, [pc, #420]	; (80043a4 <DisplayModuleStatus+0x284>)
 8004200:	58d3      	ldr	r3, [r2, r3]
 8004202:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8004204:	495a      	ldr	r1, [pc, #360]	; (8004370 <DisplayModuleStatus+0x250>)
 8004206:	4b68      	ldr	r3, [pc, #416]	; (80043a8 <DisplayModuleStatus+0x288>)
 8004208:	000a      	movs	r2, r1
 800420a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800420c:	c283      	stmia	r2!, {r0, r1, r7}
 800420e:	cb03      	ldmia	r3!, {r0, r1}
 8004210:	c203      	stmia	r2!, {r0, r1}
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	7013      	strb	r3, [r2, #0]
 8004216:	e7db      	b.n	80041d0 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8004218:	4a55      	ldr	r2, [pc, #340]	; (8004370 <DisplayModuleStatus+0x250>)
 800421a:	4b64      	ldr	r3, [pc, #400]	; (80043ac <DisplayModuleStatus+0x28c>)
 800421c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800421e:	c283      	stmia	r2!, {r0, r1, r7}
 8004220:	e7d6      	b.n	80041d0 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8004222:	4953      	ldr	r1, [pc, #332]	; (8004370 <DisplayModuleStatus+0x250>)
 8004224:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <DisplayModuleStatus+0x290>)
 8004226:	000a      	movs	r2, r1
 8004228:	cb83      	ldmia	r3!, {r0, r1, r7}
 800422a:	c283      	stmia	r2!, {r0, r1, r7}
 800422c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800422e:	c283      	stmia	r2!, {r0, r1, r7}
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	8013      	strh	r3, [r2, #0]
 8004234:	e7cc      	b.n	80041d0 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8004236:	494e      	ldr	r1, [pc, #312]	; (8004370 <DisplayModuleStatus+0x250>)
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <DisplayModuleStatus+0x294>)
 800423a:	000a      	movs	r2, r1
 800423c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800423e:	c283      	stmia	r2!, {r0, r1, r7}
 8004240:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004242:	c283      	stmia	r2!, {r0, r1, r7}
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	6011      	str	r1, [r2, #0]
 8004248:	8899      	ldrh	r1, [r3, #4]
 800424a:	8091      	strh	r1, [r2, #4]
 800424c:	799b      	ldrb	r3, [r3, #6]
 800424e:	7193      	strb	r3, [r2, #6]
 8004250:	e7be      	b.n	80041d0 <DisplayModuleStatus+0xb0>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8004252:	4947      	ldr	r1, [pc, #284]	; (8004370 <DisplayModuleStatus+0x250>)
 8004254:	4b58      	ldr	r3, [pc, #352]	; (80043b8 <DisplayModuleStatus+0x298>)
 8004256:	000a      	movs	r2, r1
 8004258:	cb61      	ldmia	r3!, {r0, r5, r6}
 800425a:	c261      	stmia	r2!, {r0, r5, r6}
 800425c:	cb61      	ldmia	r3!, {r0, r5, r6}
 800425e:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004260:	0020      	movs	r0, r4
 8004262:	f00f f807 	bl	8013274 <strcat>
 8004266:	4e55      	ldr	r6, [pc, #340]	; (80043bc <DisplayModuleStatus+0x29c>)
 8004268:	2701      	movs	r7, #1
 800426a:	e00d      	b.n	8004288 <DisplayModuleStatus+0x168>
	for (char i=1 ; i<=6 ; i++) {
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 800426c:	4d40      	ldr	r5, [pc, #256]	; (8004370 <DisplayModuleStatus+0x250>)
 800426e:	003a      	movs	r2, r7
 8004270:	4953      	ldr	r1, [pc, #332]	; (80043c0 <DisplayModuleStatus+0x2a0>)
 8004272:	0028      	movs	r0, r5
 8004274:	f00e ffde 	bl	8013234 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8004278:	0029      	movs	r1, r5
 800427a:	0020      	movs	r0, r4
 800427c:	f00e fffa 	bl	8013274 <strcat>
 8004280:	3701      	adds	r7, #1
 8004282:	3638      	adds	r6, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 8004284:	2f07      	cmp	r7, #7
 8004286:	d018      	beq.n	80042ba <DisplayModuleStatus+0x19a>
		if (streamDMA[i-1].Instance == 0) {
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ee      	beq.n	800426c <DisplayModuleStatus+0x14c>
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 800428e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004290:	f006 ff60 	bl	800b154 <GetPort>
 8004294:	0005      	movs	r5, r0
 8004296:	00bb      	lsls	r3, r7, #2
 8004298:	3b04      	subs	r3, #4
 800429a:	4a4a      	ldr	r2, [pc, #296]	; (80043c4 <DisplayModuleStatus+0x2a4>)
 800429c:	58d0      	ldr	r0, [r2, r3]
 800429e:	f006 ff59 	bl	800b154 <GetPort>
 80042a2:	9000      	str	r0, [sp, #0]
 80042a4:	002b      	movs	r3, r5
 80042a6:	003a      	movs	r2, r7
 80042a8:	4947      	ldr	r1, [pc, #284]	; (80043c8 <DisplayModuleStatus+0x2a8>)
 80042aa:	4831      	ldr	r0, [pc, #196]	; (8004370 <DisplayModuleStatus+0x250>)
 80042ac:	f00e ffc2 	bl	8013234 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80042b0:	492f      	ldr	r1, [pc, #188]	; (8004370 <DisplayModuleStatus+0x250>)
 80042b2:	0020      	movs	r0, r4
 80042b4:	f00e ffde 	bl	8013274 <strcat>
 80042b8:	e7e2      	b.n	8004280 <DisplayModuleStatus+0x160>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 80042ba:	0020      	movs	r0, r4
 80042bc:	f7fb ff2c 	bl	8000118 <strlen>
 80042c0:	1820      	adds	r0, r4, r0
 80042c2:	2203      	movs	r2, #3
 80042c4:	4941      	ldr	r1, [pc, #260]	; (80043cc <DisplayModuleStatus+0x2ac>)
 80042c6:	f00e fdb2 	bl	8012e2e <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 80042ca:	0020      	movs	r0, r4
 80042cc:	f7fb ff24 	bl	8000118 <strlen>
 80042d0:	1820      	adds	r0, r4, r0
 80042d2:	221d      	movs	r2, #29
 80042d4:	493e      	ldr	r1, [pc, #248]	; (80043d0 <DisplayModuleStatus+0x2b0>)
 80042d6:	f00e fdaa 	bl	8012e2e <memcpy>
	temp = strlen( (char *) pcOutputString);
 80042da:	0020      	movs	r0, r4
 80042dc:	f7fb ff1c 	bl	8000118 <strlen>
 80042e0:	4682      	mov	sl, r0
 80042e2:	2200      	movs	r2, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80042e4:	4e3b      	ldr	r6, [pc, #236]	; (80043d4 <DisplayModuleStatus+0x2b4>)
 80042e6:	4f21      	ldr	r7, [pc, #132]	; (800436c <DisplayModuleStatus+0x24c>)
 80042e8:	e002      	b.n	80042f0 <DisplayModuleStatus+0x1d0>
 80042ea:	002a      	movs	r2, r5
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80042ec:	2d05      	cmp	r5, #5
 80042ee:	d013      	beq.n	8004318 <DisplayModuleStatus+0x1f8>
 80042f0:	1c55      	adds	r5, r2, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80042f2:	783b      	ldrb	r3, [r7, #0]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	5b99      	ldrh	r1, [r3, r6]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	4113      	asrs	r3, r2
 8004300:	420b      	tst	r3, r1
 8004302:	d0f2      	beq.n	80042ea <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8004304:	002a      	movs	r2, r5
 8004306:	4934      	ldr	r1, [pc, #208]	; (80043d8 <DisplayModuleStatus+0x2b8>)
 8004308:	4819      	ldr	r0, [pc, #100]	; (8004370 <DisplayModuleStatus+0x250>)
 800430a:	f00e ff93 	bl	8013234 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 800430e:	4918      	ldr	r1, [pc, #96]	; (8004370 <DisplayModuleStatus+0x250>)
 8004310:	0020      	movs	r0, r4
 8004312:	f00e ffaf 	bl	8013274 <strcat>
 8004316:	e7e8      	b.n	80042ea <DisplayModuleStatus+0x1ca>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8004318:	0020      	movs	r0, r4
 800431a:	f7fb fefd 	bl	8000118 <strlen>
 800431e:	4653      	mov	r3, sl
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	4298      	cmp	r0, r3
 8004326:	d00e      	beq.n	8004346 <DisplayModuleStatus+0x226>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8004328:	0020      	movs	r0, r4
 800432a:	f7fb fef5 	bl	8000118 <strlen>
 800432e:	1820      	adds	r0, r4, r0
 8004330:	2203      	movs	r2, #3
 8004332:	4926      	ldr	r1, [pc, #152]	; (80043cc <DisplayModuleStatus+0x2ac>)
 8004334:	f00e fd7b 	bl	8012e2e <memcpy>
	
	/* Display output */
	if (port)
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <DisplayModuleStatus+0x232>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 800433e:	b004      	add	sp, #16
 8004340:	bc04      	pop	{r2}
 8004342:	4692      	mov	sl, r2
 8004344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8004346:	1820      	adds	r0, r4, r0
 8004348:	2205      	movs	r2, #5
 800434a:	4924      	ldr	r1, [pc, #144]	; (80043dc <DisplayModuleStatus+0x2bc>)
 800434c:	f00e fd6f 	bl	8012e2e <memcpy>
 8004350:	e7ea      	b.n	8004328 <DisplayModuleStatus+0x208>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8004352:	0020      	movs	r0, r4
 8004354:	f7fb fee0 	bl	8000118 <strlen>
 8004358:	b282      	uxth	r2, r0
 800435a:	2301      	movs	r3, #1
 800435c:	425b      	negs	r3, r3
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	3333      	adds	r3, #51	; 0x33
 8004362:	0021      	movs	r1, r4
 8004364:	9803      	ldr	r0, [sp, #12]
 8004366:	f008 ffd9 	bl	800d31c <writePxMutex>
}
 800436a:	e7e8      	b.n	800433e <DisplayModuleStatus+0x21e>
 800436c:	2000101c 	.word	0x2000101c
 8004370:	20001048 	.word	0x20001048
 8004374:	080177c8 	.word	0x080177c8
 8004378:	20000a77 	.word	0x20000a77
 800437c:	080177e4 	.word	0x080177e4
 8004380:	08017800 	.word	0x08017800
 8004384:	08017820 	.word	0x08017820
 8004388:	0801782c 	.word	0x0801782c
 800438c:	08017844 	.word	0x08017844
 8004390:	08017850 	.word	0x08017850
 8004394:	0801786c 	.word	0x0801786c
 8004398:	20001098 	.word	0x20001098
 800439c:	08017888 	.word	0x08017888
 80043a0:	08017880 	.word	0x08017880
 80043a4:	080177a4 	.word	0x080177a4
 80043a8:	08017890 	.word	0x08017890
 80043ac:	080178a8 	.word	0x080178a8
 80043b0:	080178b4 	.word	0x080178b4
 80043b4:	080178d0 	.word	0x080178d0
 80043b8:	080178f0 	.word	0x080178f0
 80043bc:	20001868 	.word	0x20001868
 80043c0:	08017908 	.word	0x08017908
 80043c4:	20001400 	.word	0x20001400
 80043c8:	08017924 	.word	0x08017924
 80043cc:	0801787c 	.word	0x0801787c
 80043d0:	08017954 	.word	0x08017954
 80043d4:	20006ca0 	.word	0x20006ca0
 80043d8:	08017974 	.word	0x08017974
 80043dc:	0801797c 	.word	0x0801797c

080043e0 <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	46c6      	mov	lr, r8
 80043e4:	b500      	push	{lr}
 80043e6:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 80043e8:	4929      	ldr	r1, [pc, #164]	; (8004490 <GetID+0xb0>)
 80043ea:	f7fb fe8b 	bl	8000104 <strcmp>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d010      	beq.n	8004414 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 80043f2:	4928      	ldr	r1, [pc, #160]	; (8004494 <GetID+0xb4>)
 80043f4:	0028      	movs	r0, r5
 80043f6:	f7fb fe85 	bl	8000104 <strcmp>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d045      	beq.n	800448a <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 80043fe:	782b      	ldrb	r3, [r5, #0]
 8004400:	4698      	mov	r8, r3
 8004402:	2b23      	cmp	r3, #35	; 0x23
 8004404:	d00b      	beq.n	800441e <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <GetID+0xb8>)
 8004408:	781f      	ldrb	r7, [r3, #0]
 800440a:	2f00      	cmp	r7, #0
 800440c:	d02a      	beq.n	8004464 <GetID+0x84>
 800440e:	4e23      	ldr	r6, [pc, #140]	; (800449c <GetID+0xbc>)
 8004410:	2400      	movs	r4, #0
 8004412:	e01c      	b.n	800444e <GetID+0x6e>
		return myID;
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <GetID+0xc0>)
 8004416:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8004418:	bc04      	pop	{r2}
 800441a:	4690      	mov	r8, r2
 800441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800441e:	1c68      	adds	r0, r5, #1
 8004420:	f00e fa7b 	bl	801291a <atol>
 8004424:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <GetID+0x52>
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <GetID+0xb8>)
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d206      	bcs.n	8004440 <GetID+0x60>
		else if (id == myID)
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <GetID+0xc0>)
 8004434:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8004436:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8004438:	429a      	cmp	r2, r3
 800443a:	d1ed      	bne.n	8004418 <GetID+0x38>
			return myID;
 800443c:	b210      	sxth	r0, r2
 800443e:	e7eb      	b.n	8004418 <GetID+0x38>
			return id;
 8004440:	b218      	sxth	r0, r3
 8004442:	e7e9      	b.n	8004418 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 8004444:	3401      	adds	r4, #1
 8004446:	b2e4      	uxtb	r4, r4
 8004448:	360a      	adds	r6, #10
 800444a:	42bc      	cmp	r4, r7
 800444c:	d00a      	beq.n	8004464 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 800444e:	0031      	movs	r1, r6
 8004450:	0028      	movs	r0, r5
 8004452:	f7fb fe57 	bl	8000104 <strcmp>
 8004456:	2800      	cmp	r0, #0
 8004458:	d1f4      	bne.n	8004444 <GetID+0x64>
 800445a:	4643      	mov	r3, r8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f1      	beq.n	8004444 <GetID+0x64>
 8004460:	b220      	sxth	r0, r4
 8004462:	e7d9      	b.n	8004418 <GetID+0x38>
 8004464:	4f0f      	ldr	r7, [pc, #60]	; (80044a4 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 8004466:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004468:	0039      	movs	r1, r7
 800446a:	0028      	movs	r0, r5
 800446c:	f7fb fe4a 	bl	8000104 <strcmp>
 8004470:	2800      	cmp	r0, #0
 8004472:	d005      	beq.n	8004480 <GetID+0xa0>
 8004474:	3601      	adds	r6, #1
 8004476:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8004478:	2e0a      	cmp	r6, #10
 800447a:	d1f5      	bne.n	8004468 <GetID+0x88>
		return BOS_ERR_WrongName;			
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	e7cb      	b.n	8004418 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004480:	0234      	lsls	r4, r6, #8
 8004482:	20fe      	movs	r0, #254	; 0xfe
 8004484:	4320      	orrs	r0, r4
 8004486:	b200      	sxth	r0, r0
 8004488:	e7c6      	b.n	8004418 <GetID+0x38>
		return BOS_BROADCAST;				
 800448a:	20ff      	movs	r0, #255	; 0xff
 800448c:	e7c4      	b.n	8004418 <GetID+0x38>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	08017a08 	.word	0x08017a08
 8004494:	08017a0c 	.word	0x08017a0c
 8004498:	2000001c 	.word	0x2000001c
 800449c:	20000f18 	.word	0x20000f18
 80044a0:	2000101c 	.word	0x2000101c
 80044a4:	20000e0c 	.word	0x20000e0c

080044a8 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 80044a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044aa:	b083      	sub	sp, #12
 80044ac:	9001      	str	r0, [sp, #4]
 80044ae:	000d      	movs	r5, r1
 80044b0:	4c2a      	ldr	r4, [pc, #168]	; (800455c <NameModule+0xb4>)
 80044b2:	0027      	movs	r7, r4
 80044b4:	3710      	adds	r7, #16
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 80044b6:	0021      	movs	r1, r4
 80044b8:	0028      	movs	r0, r5
 80044ba:	f7fb fe23 	bl	8000104 <strcmp>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d043      	beq.n	800454a <NameModule+0xa2>
 80044c2:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 80044c4:	42bc      	cmp	r4, r7
 80044c6:	d1f6      	bne.n	80044b6 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <NameModule+0xb8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d90f      	bls.n	80044f0 <NameModule+0x48>
 80044d0:	4c24      	ldr	r4, [pc, #144]	; (8004564 <NameModule+0xbc>)
 80044d2:	009f      	lsls	r7, r3, #2
 80044d4:	18ff      	adds	r7, r7, r3
 80044d6:	007f      	lsls	r7, r7, #1
 80044d8:	0023      	movs	r3, r4
 80044da:	3b0a      	subs	r3, #10
 80044dc:	18ff      	adds	r7, r7, r3
	{
		if (!strcmp(alias, moduleAlias[i]))	
 80044de:	0021      	movs	r1, r4
 80044e0:	0028      	movs	r0, r5
 80044e2:	f7fb fe0f 	bl	8000104 <strcmp>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d031      	beq.n	800454e <NameModule+0xa6>
 80044ea:	340a      	adds	r4, #10
	for(i=1 ; i<N ; i++)
 80044ec:	42bc      	cmp	r4, r7
 80044ee:	d1f6      	bne.n	80044de <NameModule+0x36>
 80044f0:	4c1d      	ldr	r4, [pc, #116]	; (8004568 <NameModule+0xc0>)
 80044f2:	0027      	movs	r7, r4
 80044f4:	3764      	adds	r7, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 80044f6:	0021      	movs	r1, r4
 80044f8:	0028      	movs	r0, r5
 80044fa:	f7fb fe03 	bl	8000104 <strcmp>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d028      	beq.n	8004554 <NameModule+0xac>
 8004502:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004504:	42bc      	cmp	r4, r7
 8004506:	d1f6      	bne.n	80044f6 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004508:	4c18      	ldr	r4, [pc, #96]	; (800456c <NameModule+0xc4>)
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <NameModule+0xc8>)
 800450c:	601c      	str	r4, [r3, #0]
 800450e:	001e      	movs	r6, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004514:	0038      	movs	r0, r7
 8004516:	f7fb fdff 	bl	8000118 <strlen>
 800451a:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 800451c:	0039      	movs	r1, r7
 800451e:	0028      	movs	r0, r5
 8004520:	f00e fecc 	bl	80132bc <strncmp>
 8004524:	2800      	cmp	r0, #0
 8004526:	d017      	beq.n	8004558 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004528:	6864      	ldr	r4, [r4, #4]
 800452a:	6034      	str	r4, [r6, #0]
 800452c:	2c00      	cmp	r4, #0
 800452e:	d1ef      	bne.n	8004510 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	0098      	lsls	r0, r3, #2
 8004534:	469c      	mov	ip, r3
 8004536:	4460      	add	r0, ip
 8004538:	0040      	lsls	r0, r0, #1
 800453a:	4e0e      	ldr	r6, [pc, #56]	; (8004574 <NameModule+0xcc>)
 800453c:	1980      	adds	r0, r0, r6
 800453e:	0029      	movs	r1, r5
 8004540:	f00e feb4 	bl	80132ac <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8004544:	f7fe fe9c 	bl	8003280 <SaveEEalias>
	
	return result;
 8004548:	e002      	b.n	8004550 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 800454a:	2006      	movs	r0, #6
 800454c:	e000      	b.n	8004550 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 800454e:	2007      	movs	r0, #7
}
 8004550:	b003      	add	sp, #12
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004554:	2007      	movs	r0, #7
 8004556:	e7fb      	b.n	8004550 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004558:	2008      	movs	r0, #8
 800455a:	e7f9      	b.n	8004550 <NameModule+0xa8>
 800455c:	080177b8 	.word	0x080177b8
 8004560:	2000001c 	.word	0x2000001c
 8004564:	20000f22 	.word	0x20000f22
 8004568:	20000e0c 	.word	0x20000e0c
 800456c:	2000009c 	.word	0x2000009c
 8004570:	200010a0 	.word	0x200010a0
 8004574:	20000f18 	.word	0x20000f18

08004578 <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	46c6      	mov	lr, r8
 800457c:	b500      	push	{lr}
 800457e:	0007      	movs	r7, r0
 8004580:	000e      	movs	r6, r1
 8004582:	4d3a      	ldr	r5, [pc, #232]	; (800466c <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004584:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8004586:	0029      	movs	r1, r5
 8004588:	0030      	movs	r0, r6
 800458a:	f7fb fdbb 	bl	8000104 <strcmp>
 800458e:	2800      	cmp	r0, #0
 8004590:	d050      	beq.n	8004634 <AddModuleToGroup+0xbc>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004592:	3401      	adds	r4, #1
 8004594:	350a      	adds	r5, #10
 8004596:	2c0a      	cmp	r4, #10
 8004598:	d1f5      	bne.n	8004586 <AddModuleToGroup+0xe>
 800459a:	4c35      	ldr	r4, [pc, #212]	; (8004670 <AddModuleToGroup+0xf8>)
 800459c:	0025      	movs	r5, r4
 800459e:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 80045a0:	0021      	movs	r1, r4
 80045a2:	0030      	movs	r0, r6
 80045a4:	f7fb fdae 	bl	8000104 <strcmp>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d058      	beq.n	800465e <AddModuleToGroup+0xe6>
 80045ac:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 80045ae:	42ac      	cmp	r4, r5
 80045b0:	d1f6      	bne.n	80045a0 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <AddModuleToGroup+0xfc>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d90f      	bls.n	80045da <AddModuleToGroup+0x62>
 80045ba:	4c2f      	ldr	r4, [pc, #188]	; (8004678 <AddModuleToGroup+0x100>)
 80045bc:	009d      	lsls	r5, r3, #2
 80045be:	18ed      	adds	r5, r5, r3
 80045c0:	006d      	lsls	r5, r5, #1
 80045c2:	0023      	movs	r3, r4
 80045c4:	3b0a      	subs	r3, #10
 80045c6:	18ed      	adds	r5, r5, r3
	{
		if (!strcmp(group, moduleAlias[j]))	
 80045c8:	0021      	movs	r1, r4
 80045ca:	0030      	movs	r0, r6
 80045cc:	f7fb fd9a 	bl	8000104 <strcmp>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d046      	beq.n	8004662 <AddModuleToGroup+0xea>
 80045d4:	340a      	adds	r4, #10
	for(j=1 ; j<N ; j++)
 80045d6:	42ac      	cmp	r4, r5
 80045d8:	d1f6      	bne.n	80045c8 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80045da:	4c28      	ldr	r4, [pc, #160]	; (800467c <AddModuleToGroup+0x104>)
 80045dc:	4b28      	ldr	r3, [pc, #160]	; (8004680 <AddModuleToGroup+0x108>)
 80045de:	601c      	str	r4, [r3, #0]
 80045e0:	4698      	mov	r8, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80045e6:	0028      	movs	r0, r5
 80045e8:	f7fb fd96 	bl	8000118 <strlen>
 80045ec:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80045ee:	0029      	movs	r1, r5
 80045f0:	0030      	movs	r0, r6
 80045f2:	f00e fe63 	bl	80132bc <strncmp>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d035      	beq.n	8004666 <AddModuleToGroup+0xee>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80045fa:	6864      	ldr	r4, [r4, #4]
 80045fc:	4643      	mov	r3, r8
 80045fe:	601c      	str	r4, [r3, #0]
 8004600:	2c00      	cmp	r4, #0
 8004602:	d1ee      	bne.n	80045e2 <AddModuleToGroup+0x6a>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <AddModuleToGroup+0xf4>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01e      	beq.n	800464a <AddModuleToGroup+0xd2>
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <AddModuleToGroup+0xf4>)
 800460e:	330a      	adds	r3, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004610:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {	
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	2a00      	cmp	r2, #0
 8004616:	d019      	beq.n	800464c <AddModuleToGroup+0xd4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004618:	3401      	adds	r4, #1
 800461a:	330a      	adds	r3, #10
 800461c:	2c0a      	cmp	r4, #10
 800461e:	d1f8      	bne.n	8004612 <AddModuleToGroup+0x9a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 8004620:	3f01      	subs	r7, #1
 8004622:	4918      	ldr	r1, [pc, #96]	; (8004684 <AddModuleToGroup+0x10c>)
 8004624:	007f      	lsls	r7, r7, #1
 8004626:	2201      	movs	r2, #1
 8004628:	40a2      	lsls	r2, r4
 800462a:	5a7b      	ldrh	r3, [r7, r1]
 800462c:	4313      	orrs	r3, r2
 800462e:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8004630:	2000      	movs	r0, #0
 8004632:	e007      	b.n	8004644 <AddModuleToGroup+0xcc>
			groupModules[module-1] |= (0x0001<<i);	
 8004634:	3f01      	subs	r7, #1
 8004636:	4913      	ldr	r1, [pc, #76]	; (8004684 <AddModuleToGroup+0x10c>)
 8004638:	007f      	lsls	r7, r7, #1
 800463a:	2201      	movs	r2, #1
 800463c:	40a2      	lsls	r2, r4
 800463e:	5a7b      	ldrh	r3, [r7, r1]
 8004640:	4313      	orrs	r3, r2
 8004642:	527b      	strh	r3, [r7, r1]
}
 8004644:	bc04      	pop	{r2}
 8004646:	4690      	mov	r8, r2
 8004648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800464a:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);	
 800464c:	00a0      	lsls	r0, r4, #2
 800464e:	1900      	adds	r0, r0, r4
 8004650:	0040      	lsls	r0, r0, #1
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <AddModuleToGroup+0xf4>)
 8004654:	1818      	adds	r0, r3, r0
 8004656:	0031      	movs	r1, r6
 8004658:	f00e fe28 	bl	80132ac <strcpy>
			break;
 800465c:	e7e0      	b.n	8004620 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800465e:	2006      	movs	r0, #6
 8004660:	e7f0      	b.n	8004644 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 8004662:	2007      	movs	r0, #7
 8004664:	e7ee      	b.n	8004644 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8004666:	2008      	movs	r0, #8
 8004668:	e7ec      	b.n	8004644 <AddModuleToGroup+0xcc>
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	20000e0c 	.word	0x20000e0c
 8004670:	080177b8 	.word	0x080177b8
 8004674:	2000001c 	.word	0x2000001c
 8004678:	20000f22 	.word	0x20000f22
 800467c:	2000009c 	.word	0x2000009c
 8004680:	200010a4 	.word	0x200010a4
 8004684:	20000e70 	.word	0x20000e70

08004688 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468a:	46ce      	mov	lr, r9
 800468c:	4647      	mov	r7, r8
 800468e:	b580      	push	{r7, lr}
 8004690:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <ReadPortsDir+0x9c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03c      	beq.n	8004714 <ReadPortsDir+0x8c>
 800469a:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 800469c:	2300      	movs	r3, #0
 800469e:	9301      	str	r3, [sp, #4]
	{
		if (i != myID) {
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <ReadPortsDir+0xa0>)
 80046a2:	4699      	mov	r9, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <ReadPortsDir+0xa4>)
 80046a6:	4698      	mov	r8, r3
 80046a8:	e021      	b.n	80046ee <ReadPortsDir+0x66>
 80046aa:	2600      	movs	r6, #0
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 80046ac:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80046ae:	2780      	movs	r7, #128	; 0x80
 80046b0:	023f      	lsls	r7, r7, #8
 80046b2:	e004      	b.n	80046be <ReadPortsDir+0x36>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 80046b4:	3401      	adds	r4, #1
 80046b6:	b2e4      	uxtb	r4, r4
 80046b8:	3601      	adds	r6, #1
 80046ba:	2c06      	cmp	r4, #6
 80046bc:	d011      	beq.n	80046e2 <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80046be:	0020      	movs	r0, r4
 80046c0:	f008 fe0e 	bl	800d2e0 <GetUart>
 80046c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046c6:	42bb      	cmp	r3, r7
 80046c8:	d1f4      	bne.n	80046b4 <ReadPortsDir+0x2c>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <ReadPortsDir+0xa0>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4642      	mov	r2, r8
 80046d4:	5a9a      	ldrh	r2, [r3, r2]
 80046d6:	0039      	movs	r1, r7
 80046d8:	4131      	asrs	r1, r6
 80046da:	430a      	orrs	r2, r1
 80046dc:	4641      	mov	r1, r8
 80046de:	525a      	strh	r2, [r3, r1]
 80046e0:	e7e8      	b.n	80046b4 <ReadPortsDir+0x2c>
	for (uint8_t i=1 ; i<=N ; i++) 
 80046e2:	3501      	adds	r5, #1
 80046e4:	b2ed      	uxtb	r5, r5
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <ReadPortsDir+0x9c>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	42ab      	cmp	r3, r5
 80046ec:	d314      	bcc.n	8004718 <ReadPortsDir+0x90>
		if (i != myID) {
 80046ee:	464b      	mov	r3, r9
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	d0d9      	beq.n	80046aa <ReadPortsDir+0x22>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2113      	movs	r1, #19
 80046fa:	0028      	movs	r0, r5
 80046fc:	f004 fd68 	bl	80091d0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004700:	2032      	movs	r0, #50	; 0x32
 8004702:	f008 fc57 	bl	800cfb4 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <ReadPortsDir+0xa8>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0e9      	beq.n	80046e2 <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 800470e:	2302      	movs	r3, #2
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	e7e6      	b.n	80046e2 <ReadPortsDir+0x5a>
	BOS_Status result = BOS_OK; 
 8004714:	2300      	movs	r3, #0
 8004716:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 8004718:	9801      	ldr	r0, [sp, #4]
 800471a:	b003      	add	sp, #12
 800471c:	bc0c      	pop	{r2, r3}
 800471e:	4690      	mov	r8, r2
 8004720:	4699      	mov	r9, r3
 8004722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004724:	2000001c 	.word	0x2000001c
 8004728:	2000101c 	.word	0x2000101c
 800472c:	20006ca0 	.word	0x20006ca0
 8004730:	200010b0 	.word	0x200010b0

08004734 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	46c6      	mov	lr, r8
 8004738:	b500      	push	{lr}
 800473a:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800473c:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <UpdateMyPortsDir+0x54>)
 8004740:	4698      	mov	r8, r3
 8004742:	4f12      	ldr	r7, [pc, #72]	; (800478c <UpdateMyPortsDir+0x58>)
 8004744:	2680      	movs	r6, #128	; 0x80
 8004746:	0236      	lsls	r6, r6, #8
 8004748:	e00a      	b.n	8004760 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 800474a:	0020      	movs	r0, r4
 800474c:	f008 fdc8 	bl	800d2e0 <GetUart>
 8004750:	2101      	movs	r1, #1
 8004752:	f008 fe5b 	bl	800d40c <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004756:	3401      	adds	r4, #1
 8004758:	b2e4      	uxtb	r4, r4
 800475a:	3501      	adds	r5, #1
 800475c:	2c06      	cmp	r4, #6
 800475e:	d00f      	beq.n	8004780 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004760:	783b      	ldrb	r3, [r7, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4642      	mov	r2, r8
 8004768:	5a9b      	ldrh	r3, [r3, r2]
 800476a:	0032      	movs	r2, r6
 800476c:	412a      	asrs	r2, r5
 800476e:	421a      	tst	r2, r3
 8004770:	d1eb      	bne.n	800474a <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 8004772:	0020      	movs	r0, r4
 8004774:	f008 fdb4 	bl	800d2e0 <GetUart>
 8004778:	2100      	movs	r1, #0
 800477a:	f008 fe47 	bl	800d40c <SwapUartPins>
 800477e:	e7ea      	b.n	8004756 <UpdateMyPortsDir+0x22>
		}	
	}		
	
	return result;
}
 8004780:	2000      	movs	r0, #0
 8004782:	bc04      	pop	{r2}
 8004784:	4690      	mov	r8, r2
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004788:	20006ca0 	.word	0x20006ca0
 800478c:	2000101c 	.word	0x2000101c

08004790 <BOS_Init>:
{
 8004790:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004792:	f008 fac7 	bl	800cd24 <RTC_Init>
	GetTimeDate();
 8004796:	f008 fb65 	bl	800ce64 <GetTimeDate>
	EE_Init();
 800479a:	f003 f977 	bl	8007a8c <EE_Init>
  GPIO_Init();
 800479e:	f008 f831 	bl	800c804 <GPIO_Init>
	DMA_Init();
 80047a2:	f006 ffc3 	bl	800b72c <DMA_Init>
	TIM_USEC_Init();
 80047a6:	f008 fb91 	bl	800cecc <TIM_USEC_Init>
	CRC_Init();
 80047aa:	f007 ffd5 	bl	800c758 <CRC_Init>
	TIM_MSEC_Init();
 80047ae:	f008 fbbf 	bl	800cf30 <TIM_MSEC_Init>
	if (IsFactoryReset())
 80047b2:	f008 f8cb 	bl	800c94c <IsFactoryReset>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d11a      	bne.n	80047f0 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 80047ba:	f7ff f88d 	bl	80038d8 <IsLowerCLIbaud>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d021      	beq.n	8004806 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 80047c2:	4b3d      	ldr	r3, [pc, #244]	; (80048b8 <BOS_Init+0x128>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 80047c8:	2032      	movs	r0, #50	; 0x32
 80047ca:	f008 fbf3 	bl	800cfb4 <StartMilliDelay>
		Module_Init();	
 80047ce:	f006 fc83 	bl	800b0d8 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <BOS_Init+0x12c>)
 80047d4:	22e1      	movs	r2, #225	; 0xe1
 80047d6:	0252      	lsls	r2, r2, #9
 80047d8:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80047da:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 80047dc:	001d      	movs	r5, r3
 80047de:	68a9      	ldr	r1, [r5, #8]
 80047e0:	0020      	movs	r0, r4
 80047e2:	f008 fe09 	bl	800d3f8 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80047e6:	3401      	adds	r4, #1
 80047e8:	b2e4      	uxtb	r4, r4
 80047ea:	2c06      	cmp	r4, #6
 80047ec:	d1f7      	bne.n	80047de <BOS_Init+0x4e>
 80047ee:	e00f      	b.n	8004810 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80047f0:	f7ff f8c0 	bl	8003974 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80047f4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <BOS_Init+0x130>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <BOS_Init+0x134>)
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	e7fd      	b.n	8004802 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004806:	2032      	movs	r0, #50	; 0x32
 8004808:	f008 fbd4 	bl	800cfb4 <StartMilliDelay>
		Module_Init();				
 800480c:	f006 fc64 	bl	800b0d8 <Module_Init>
	LoadEEvars();
 8004810:	f7ff f850 	bl	80038b4 <LoadEEvars>
	UpdateMyPortsDir();
 8004814:	f7ff ff8e 	bl	8004734 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004818:	f007 fbe8 	bl	800bfec <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <BOS_Init+0x138>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d036      	beq.n	8004892 <BOS_Init+0x102>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004824:	2580      	movs	r5, #128	; 0x80
 8004826:	01ed      	lsls	r5, r5, #7
 8004828:	4c28      	ldr	r4, [pc, #160]	; (80048cc <BOS_Init+0x13c>)
 800482a:	2201      	movs	r2, #1
 800482c:	0029      	movs	r1, r5
 800482e:	0020      	movs	r0, r4
 8004830:	f00b ffa4 	bl	801077c <HAL_GPIO_WritePin>
 8004834:	20fa      	movs	r0, #250	; 0xfa
 8004836:	0040      	lsls	r0, r0, #1
 8004838:	f008 fbbc 	bl	800cfb4 <StartMilliDelay>
 800483c:	2200      	movs	r2, #0
 800483e:	0029      	movs	r1, r5
 8004840:	0020      	movs	r0, r4
 8004842:	f00b ff9b 	bl	801077c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004846:	2064      	movs	r0, #100	; 0x64
 8004848:	f008 fbb4 	bl	800cfb4 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 800484c:	2201      	movs	r2, #1
 800484e:	0029      	movs	r1, r5
 8004850:	0020      	movs	r0, r4
 8004852:	f00b ff93 	bl	801077c <HAL_GPIO_WritePin>
 8004856:	2064      	movs	r0, #100	; 0x64
 8004858:	f008 fbac 	bl	800cfb4 <StartMilliDelay>
 800485c:	2200      	movs	r2, #0
 800485e:	0029      	movs	r1, r5
 8004860:	0020      	movs	r0, r4
 8004862:	f00b ff8b 	bl	801077c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004866:	2064      	movs	r0, #100	; 0x64
 8004868:	f008 fba4 	bl	800cfb4 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 800486c:	2201      	movs	r2, #1
 800486e:	0029      	movs	r1, r5
 8004870:	0020      	movs	r0, r4
 8004872:	f00b ff83 	bl	801077c <HAL_GPIO_WritePin>
 8004876:	2064      	movs	r0, #100	; 0x64
 8004878:	f008 fb9c 	bl	800cfb4 <StartMilliDelay>
 800487c:	2200      	movs	r2, #0
 800487e:	0029      	movs	r1, r5
 8004880:	0020      	movs	r0, r4
 8004882:	f00b ff7b 	bl	801077c <HAL_GPIO_WritePin>
	ResetUartORE();
 8004886:	f002 ff3d 	bl	8007704 <ResetUartORE>
	BOS_initialized = 1;
 800488a:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <BOS_Init+0x140>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
}
 8004890:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004892:	2580      	movs	r5, #128	; 0x80
 8004894:	01ed      	lsls	r5, r5, #7
 8004896:	4c0d      	ldr	r4, [pc, #52]	; (80048cc <BOS_Init+0x13c>)
 8004898:	2201      	movs	r2, #1
 800489a:	0029      	movs	r1, r5
 800489c:	0020      	movs	r0, r4
 800489e:	f00b ff6d 	bl	801077c <HAL_GPIO_WritePin>
 80048a2:	20fa      	movs	r0, #250	; 0xfa
 80048a4:	0040      	lsls	r0, r0, #1
 80048a6:	f008 fb85 	bl	800cfb4 <StartMilliDelay>
 80048aa:	2200      	movs	r2, #0
 80048ac:	0029      	movs	r1, r5
 80048ae:	0020      	movs	r0, r4
 80048b0:	f00b ff64 	bl	801077c <HAL_GPIO_WritePin>
 80048b4:	e7e7      	b.n	8004886 <BOS_Init+0xf6>
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	20000a76 	.word	0x20000a76
 80048bc:	20006898 	.word	0x20006898
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	05fa0004 	.word	0x05fa0004
 80048c8:	2000101c 	.word	0x2000101c
 80048cc:	48000800 	.word	0x48000800
 80048d0:	20000a75 	.word	0x20000a75

080048d4 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 80048d8:	201e      	movs	r0, #30
 80048da:	f00e f85b 	bl	8012994 <malloc>
 80048de:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 80048e0:	221e      	movs	r2, #30
 80048e2:	2100      	movs	r1, #0
 80048e4:	f00e faac 	bl	8012e40 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 80048e8:	4908      	ldr	r1, [pc, #32]	; (800490c <GetDateString+0x38>)
 80048ea:	7d8b      	ldrb	r3, [r1, #22]
 80048ec:	7d0a      	ldrb	r2, [r1, #20]
 80048ee:	3a01      	subs	r2, #1
 80048f0:	0092      	lsls	r2, r2, #2
 80048f2:	4807      	ldr	r0, [pc, #28]	; (8004910 <GetDateString+0x3c>)
 80048f4:	5812      	ldr	r2, [r2, r0]
 80048f6:	8b08      	ldrh	r0, [r1, #24]
 80048f8:	9001      	str	r0, [sp, #4]
 80048fa:	7d49      	ldrb	r1, [r1, #21]
 80048fc:	9100      	str	r1, [sp, #0]
 80048fe:	4905      	ldr	r1, [pc, #20]	; (8004914 <GetDateString+0x40>)
 8004900:	0020      	movs	r0, r4
 8004902:	f00e fc97 	bl	8013234 <sprintf>
  return buffer;
}
 8004906:	0020      	movs	r0, r4
 8004908:	b002      	add	sp, #8
 800490a:	bd10      	pop	{r4, pc}
 800490c:	20006898 	.word	0x20006898
 8004910:	08017cec 	.word	0x08017cec
 8004914:	08017a28 	.word	0x08017a28

08004918 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004918:	b500      	push	{lr}
 800491a:	b085      	sub	sp, #20
 800491c:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <Bridge+0x24>)
 8004920:	7819      	ldrb	r1, [r3, #0]
 8004922:	2301      	movs	r3, #1
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	3b02      	subs	r3, #2
 8004928:	9302      	str	r3, [sp, #8]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	3303      	adds	r3, #3
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	000b      	movs	r3, r1
 8004932:	f004 fc73 	bl	800921c <StartScastDMAStream>
}
 8004936:	b005      	add	sp, #20
 8004938:	bd00      	pop	{pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	2000101c 	.word	0x2000101c

08004940 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004940:	b530      	push	{r4, r5, lr}
 8004942:	b087      	sub	sp, #28
 8004944:	0004      	movs	r4, r0
 8004946:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004948:	2300      	movs	r3, #0
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	9302      	str	r3, [sp, #8]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	2000      	movs	r0, #0
 800495a:	f7fe fe0f 	bl	800357c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 800495e:	1e62      	subs	r2, r4, #1
 8004960:	00d3      	lsls	r3, r2, #3
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <Unbridge+0x78>)
 8004968:	589b      	ldr	r3, [r3, r2]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <Unbridge+0x5a>
 800496e:	1e6a      	subs	r2, r5, #1
 8004970:	00d3      	lsls	r3, r2, #3
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <Unbridge+0x78>)
 8004978:	589b      	ldr	r3, [r3, r2]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 800497e:	0020      	movs	r0, r4
 8004980:	f002 fe34 	bl	80075ec <SwitchStreamDMAToMsg>
 8004984:	2000      	movs	r0, #0
 8004986:	e006      	b.n	8004996 <Unbridge+0x56>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004988:	0020      	movs	r0, r4
 800498a:	f002 fe2f 	bl	80075ec <SwitchStreamDMAToMsg>
 800498e:	0028      	movs	r0, r5
 8004990:	f002 fe2c 	bl	80075ec <SwitchStreamDMAToMsg>
 8004994:	2000      	movs	r0, #0
	else if (streamDMA[port2-1].Instance != 0)
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
	else {return BOS_ERR_WrongValue;}
}
 8004996:	b007      	add	sp, #28
 8004998:	bd30      	pop	{r4, r5, pc}
	else if (streamDMA[port2-1].Instance != 0)
 800499a:	1e6a      	subs	r2, r5, #1
 800499c:	00d3      	lsls	r3, r2, #3
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <Unbridge+0x78>)
 80049a4:	589b      	ldr	r3, [r3, r2]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 80049aa:	0028      	movs	r0, r5
 80049ac:	f002 fe1e 	bl	80075ec <SwitchStreamDMAToMsg>
 80049b0:	2000      	movs	r0, #0
 80049b2:	e7f0      	b.n	8004996 <Unbridge+0x56>
	else {return BOS_ERR_WrongValue;}
 80049b4:	2068      	movs	r0, #104	; 0x68
 80049b6:	e7ee      	b.n	8004996 <Unbridge+0x56>
 80049b8:	20001868 	.word	0x20001868

080049bc <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 80049c0:	7804      	ldrb	r4, [r0, #0]
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d010      	beq.n	80049e8 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 80049c6:	2603      	movs	r6, #3
 80049c8:	e004      	b.n	80049d4 <StringToLowerCase+0x18>
 80049ca:	702a      	strb	r2, [r5, #0]
 80049cc:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 80049ce:	782c      	ldrb	r4, [r5, #0]
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d009      	beq.n	80049e8 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 80049d4:	f00d ffd0 	bl	8012978 <__locale_ctype_ptr>
 80049d8:	1900      	adds	r0, r0, r4
 80049da:	7843      	ldrb	r3, [r0, #1]
 80049dc:	4033      	ands	r3, r6
 80049de:	0022      	movs	r2, r4
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d1f2      	bne.n	80049ca <StringToLowerCase+0xe>
 80049e4:	3220      	adds	r2, #32
 80049e6:	e7f0      	b.n	80049ca <StringToLowerCase+0xe>
	}
}
 80049e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080049ec <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	46c6      	mov	lr, r8
 80049f0:	b500      	push	{lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 80049f6:	4bdc      	ldr	r3, [pc, #880]	; (8004d68 <ParseSnippetCondition+0x37c>)
 80049f8:	781c      	ldrb	r4, [r3, #0]
 80049fa:	2c05      	cmp	r4, #5
 80049fc:	d100      	bne.n	8004a00 <ParseSnippetCondition+0x14>
 80049fe:	e210      	b.n	8004e22 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004a00:	49da      	ldr	r1, [pc, #872]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004a02:	00a3      	lsls	r3, r4, #2
 8004a04:	191a      	adds	r2, r3, r4
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	2000      	movs	r0, #0
 8004a0a:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004a0c:	191a      	adds	r2, r3, r4
 8004a0e:	0092      	lsls	r2, r2, #2
 8004a10:	188a      	adds	r2, r1, r2
 8004a12:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004a14:	1918      	adds	r0, r3, r4
 8004a16:	0080      	lsls	r0, r0, #2
 8004a18:	3002      	adds	r0, #2
 8004a1a:	1840      	adds	r0, r0, r1
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f00e fa0e 	bl	8012e40 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004a24:	782b      	ldrb	r3, [r5, #0]
 8004a26:	2b62      	cmp	r3, #98	; 0x62
 8004a28:	d102      	bne.n	8004a30 <ParseSnippetCondition+0x44>
 8004a2a:	78ab      	ldrb	r3, [r5, #2]
 8004a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2e:	d032      	beq.n	8004a96 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004a30:	4ecf      	ldr	r6, [pc, #828]	; (8004d70 <ParseSnippetCondition+0x384>)
 8004a32:	0029      	movs	r1, r5
 8004a34:	0030      	movs	r0, r6
 8004a36:	f00e fc39 	bl	80132ac <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004a3a:	4cce      	ldr	r4, [pc, #824]	; (8004d74 <ParseSnippetCondition+0x388>)
 8004a3c:	0021      	movs	r1, r4
 8004a3e:	0030      	movs	r0, r6
 8004a40:	f00f fab4 	bl	8013fac <strtok>
 8004a44:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8004a46:	0021      	movs	r1, r4
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f00f faaf 	bl	8013fac <strtok>
 8004a4e:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004a50:	0021      	movs	r1, r4
 8004a52:	2000      	movs	r0, #0
 8004a54:	f00f faaa 	bl	8013fac <strtok>
 8004a58:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	d100      	bne.n	8004a60 <ParseSnippetCondition+0x74>
 8004a5e:	e1e5      	b.n	8004e2c <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004a60:	0028      	movs	r0, r5
 8004a62:	f7fe ffaf 	bl	80039c4 <IsModuleParameter>
 8004a66:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004a68:	d100      	bne.n	8004a6c <ParseSnippetCondition+0x80>
 8004a6a:	e18f      	b.n	8004d8c <ParseSnippetCondition+0x3a0>
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	d000      	beq.n	8004a72 <ParseSnippetCondition+0x86>
 8004a70:	e18e      	b.n	8004d90 <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004a72:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	d000      	beq.n	8004a7a <ParseSnippetCondition+0x8e>
 8004a78:	e1d4      	b.n	8004e24 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004a7a:	4cbb      	ldr	r4, [pc, #748]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004a7c:	7823      	ldrb	r3, [r4, #0]
 8004a7e:	49bb      	ldr	r1, [pc, #748]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004a80:	009a      	lsls	r2, r3, #2
 8004a82:	18d0      	adds	r0, r2, r3
 8004a84:	0080      	lsls	r0, r0, #2
 8004a86:	3602      	adds	r6, #2
 8004a88:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004a8a:	180a      	adds	r2, r1, r0
 8004a8c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004a8e:	3301      	adds	r3, #1
 8004a90:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004a92:	2000      	movs	r0, #0
 8004a94:	e1c6      	b.n	8004e24 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004a96:	786e      	ldrb	r6, [r5, #1]
 8004a98:	3e30      	subs	r6, #48	; 0x30
 8004a9a:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 8004a9c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004a9e:	2e05      	cmp	r6, #5
 8004aa0:	d900      	bls.n	8004aa4 <ParseSnippetCondition+0xb8>
 8004aa2:	e1bf      	b.n	8004e24 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004aa4:	4ab1      	ldr	r2, [pc, #708]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004aa6:	00a3      	lsls	r3, r4, #2
 8004aa8:	1919      	adds	r1, r3, r4
 8004aaa:	0089      	lsls	r1, r1, #2
 8004aac:	3001      	adds	r0, #1
 8004aae:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004ab0:	1853      	adds	r3, r2, r1
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004ab6:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004ab8:	1cef      	adds	r7, r5, #3
 8004aba:	3207      	adds	r2, #7
 8004abc:	49ae      	ldr	r1, [pc, #696]	; (8004d78 <ParseSnippetCondition+0x38c>)
 8004abe:	0038      	movs	r0, r7
 8004ac0:	f00e fbfc 	bl	80132bc <strncmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d121      	bne.n	8004b0c <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004ac8:	00a3      	lsls	r3, r4, #2
 8004aca:	191c      	adds	r4, r3, r4
 8004acc:	00a4      	lsls	r4, r4, #2
 8004ace:	4ba7      	ldr	r3, [pc, #668]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004ad0:	191c      	adds	r4, r3, r4
 8004ad2:	2305      	movs	r3, #5
 8004ad4:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004ad6:	00f2      	lsls	r2, r6, #3
 8004ad8:	1992      	adds	r2, r2, r6
 8004ada:	4ba8      	ldr	r3, [pc, #672]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004adc:	189b      	adds	r3, r3, r2
 8004ade:	7a1b      	ldrb	r3, [r3, #8]
 8004ae0:	07db      	lsls	r3, r3, #31
 8004ae2:	d504      	bpl.n	8004aee <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004ae4:	4aa0      	ldr	r2, [pc, #640]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004ae6:	7813      	ldrb	r3, [r2, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	7013      	strb	r3, [r2, #0]
 8004aec:	e19a      	b.n	8004e24 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004aee:	2301      	movs	r3, #1
 8004af0:	9305      	str	r3, [sp, #20]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	9303      	str	r3, [sp, #12]
 8004af8:	9302      	str	r3, [sp, #8]
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2101      	movs	r1, #1
 8004b02:	0030      	movs	r0, r6
 8004b04:	f003 febe 	bl	8008884 <SetButtonEvents>
				status = BOS_OK;
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7eb      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004b0c:	220e      	movs	r2, #14
 8004b0e:	499c      	ldr	r1, [pc, #624]	; (8004d80 <ParseSnippetCondition+0x394>)
 8004b10:	0038      	movs	r0, r7
 8004b12:	f00e fbd3 	bl	80132bc <strncmp>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d11c      	bne.n	8004b54 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004b1a:	00a3      	lsls	r3, r4, #2
 8004b1c:	191c      	adds	r4, r3, r4
 8004b1e:	00a4      	lsls	r4, r4, #2
 8004b20:	4b92      	ldr	r3, [pc, #584]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004b22:	191c      	adds	r4, r3, r4
 8004b24:	2306      	movs	r3, #6
 8004b26:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004b28:	00f2      	lsls	r2, r6, #3
 8004b2a:	1992      	adds	r2, r2, r6
 8004b2c:	4b93      	ldr	r3, [pc, #588]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	7a1b      	ldrb	r3, [r3, #8]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d4d6      	bmi.n	8004ae4 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004b36:	2301      	movs	r3, #1
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9304      	str	r3, [sp, #16]
 8004b3e:	9303      	str	r3, [sp, #12]
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	2100      	movs	r1, #0
 8004b4a:	0030      	movs	r0, r6
 8004b4c:	f003 fe9a 	bl	8008884 <SetButtonEvents>
				status = BOS_OK;					
 8004b50:	2000      	movs	r0, #0
 8004b52:	e7c7      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004b54:	220c      	movs	r2, #12
 8004b56:	498b      	ldr	r1, [pc, #556]	; (8004d84 <ParseSnippetCondition+0x398>)
 8004b58:	0038      	movs	r0, r7
 8004b5a:	f00e fbaf 	bl	80132bc <strncmp>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d17a      	bne.n	8004c58 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 8004b62:	00f2      	lsls	r2, r6, #3
 8004b64:	1992      	adds	r2, r2, r6
 8004b66:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	789b      	ldrb	r3, [r3, #2]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d030      	beq.n	8004bd2 <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 8004b70:	00f2      	lsls	r2, r6, #3
 8004b72:	1992      	adds	r2, r2, r6
 8004b74:	4b81      	ldr	r3, [pc, #516]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d04a      	beq.n	8004c14 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 8004b7e:	00f2      	lsls	r2, r6, #3
 8004b80:	1992      	adds	r2, r2, r6
 8004b82:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004b88:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1aa      	bne.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004b8e:	4f77      	ldr	r7, [pc, #476]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004b90:	00a3      	lsls	r3, r4, #2
 8004b92:	191b      	adds	r3, r3, r4
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	220b      	movs	r2, #11
 8004b9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004b9c:	0028      	movs	r0, r5
 8004b9e:	300f      	adds	r0, #15
 8004ba0:	f00d feb5 	bl	801290e <atoi>
 8004ba4:	b2c0      	uxtb	r0, r0
 8004ba6:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	0093      	lsls	r3, r2, #2
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	18ff      	adds	r7, r7, r3
 8004bb2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	9305      	str	r3, [sp, #20]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	9001      	str	r0, [sp, #4]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	0030      	movs	r0, r6
 8004bca:	f003 fe5b 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;	
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e788      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004bd2:	4f66      	ldr	r7, [pc, #408]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004bd4:	00a3      	lsls	r3, r4, #2
 8004bd6:	191b      	adds	r3, r3, r4
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	2209      	movs	r2, #9
 8004bde:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004be0:	0028      	movs	r0, r5
 8004be2:	300f      	adds	r0, #15
 8004be4:	f00d fe93 	bl	801290e <atoi>
 8004be8:	b2c3      	uxtb	r3, r0
 8004bea:	4a5f      	ldr	r2, [pc, #380]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004bec:	7811      	ldrb	r1, [r2, #0]
 8004bee:	008a      	lsls	r2, r1, #2
 8004bf0:	1852      	adds	r2, r2, r1
 8004bf2:	0092      	lsls	r2, r2, #2
 8004bf4:	18bf      	adds	r7, r7, r2
 8004bf6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	9205      	str	r2, [sp, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9204      	str	r2, [sp, #16]
 8004c00:	9203      	str	r2, [sp, #12]
 8004c02:	9202      	str	r2, [sp, #8]
 8004c04:	9201      	str	r2, [sp, #4]
 8004c06:	9200      	str	r2, [sp, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	0030      	movs	r0, r6
 8004c0c:	f003 fe3a 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;
 8004c10:	2000      	movs	r0, #0
 8004c12:	e767      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004c14:	4f55      	ldr	r7, [pc, #340]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004c16:	00a3      	lsls	r3, r4, #2
 8004c18:	191b      	adds	r3, r3, r4
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	220a      	movs	r2, #10
 8004c20:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004c22:	0028      	movs	r0, r5
 8004c24:	300f      	adds	r0, #15
 8004c26:	f00d fe72 	bl	801290e <atoi>
 8004c2a:	b2c0      	uxtb	r0, r0
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	0093      	lsls	r3, r2, #2
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	18ff      	adds	r7, r7, r3
 8004c38:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9305      	str	r3, [sp, #20]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9303      	str	r3, [sp, #12]
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	9000      	str	r0, [sp, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	0030      	movs	r0, r6
 8004c50:	f003 fe18 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;		
 8004c54:	2000      	movs	r0, #0
 8004c56:	e745      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004c58:	220d      	movs	r2, #13
 8004c5a:	494b      	ldr	r1, [pc, #300]	; (8004d88 <ParseSnippetCondition+0x39c>)
 8004c5c:	0038      	movs	r0, r7
 8004c5e:	f00e fb2d 	bl	80132bc <strncmp>
 8004c62:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 8004c64:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d000      	beq.n	8004c6c <ParseSnippetCondition+0x280>
 8004c6a:	e73b      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 8004c6c:	00f2      	lsls	r2, r6, #3
 8004c6e:	1992      	adds	r2, r2, r6
 8004c70:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	795b      	ldrb	r3, [r3, #5]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d031      	beq.n	8004cde <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8004c7a:	00f2      	lsls	r2, r6, #3
 8004c7c:	1992      	adds	r2, r2, r6
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004c80:	189b      	adds	r3, r3, r2
 8004c82:	799b      	ldrb	r3, [r3, #6]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d04c      	beq.n	8004d22 <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8004c88:	00f2      	lsls	r2, r6, #3
 8004c8a:	1992      	adds	r2, r2, r6
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <ParseSnippetCondition+0x390>)
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004c92:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d000      	beq.n	8004c9a <ParseSnippetCondition+0x2ae>
 8004c98:	e724      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004c9a:	4f34      	ldr	r7, [pc, #208]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	4698      	mov	r8, r3
 8004ca0:	435c      	muls	r4, r3
 8004ca2:	193c      	adds	r4, r7, r4
 8004ca4:	3b06      	subs	r3, #6
 8004ca6:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004ca8:	0028      	movs	r0, r5
 8004caa:	3010      	adds	r0, #16
 8004cac:	f00d fe2f 	bl	801290e <atoi>
 8004cb0:	b2c0      	uxtb	r0, r0
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	4353      	muls	r3, r2
 8004cba:	18ff      	adds	r7, r7, r3
 8004cbc:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9305      	str	r3, [sp, #20]
 8004cc2:	9004      	str	r0, [sp, #16]
 8004cc4:	2400      	movs	r4, #0
 8004cc6:	9403      	str	r4, [sp, #12]
 8004cc8:	9402      	str	r4, [sp, #8]
 8004cca:	9401      	str	r4, [sp, #4]
 8004ccc:	9400      	str	r4, [sp, #0]
 8004cce:	0023      	movs	r3, r4
 8004cd0:	0022      	movs	r2, r4
 8004cd2:	0021      	movs	r1, r4
 8004cd4:	0030      	movs	r0, r6
 8004cd6:	f003 fdd5 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;	
 8004cda:	0020      	movs	r0, r4
 8004cdc:	e702      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004cde:	4f23      	ldr	r7, [pc, #140]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004ce0:	00a3      	lsls	r3, r4, #2
 8004ce2:	191b      	adds	r3, r3, r4
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	220c      	movs	r2, #12
 8004cea:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004cec:	0028      	movs	r0, r5
 8004cee:	3010      	adds	r0, #16
 8004cf0:	f00d fe0d 	bl	801290e <atoi>
 8004cf4:	b2c0      	uxtb	r0, r0
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	0093      	lsls	r3, r2, #2
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	18ff      	adds	r7, r7, r3
 8004d02:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004d04:	2301      	movs	r3, #1
 8004d06:	9305      	str	r3, [sp, #20]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2100      	movs	r1, #0
 8004d18:	0030      	movs	r0, r6
 8004d1a:	f003 fdb3 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e6e0      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004d22:	4f12      	ldr	r7, [pc, #72]	; (8004d6c <ParseSnippetCondition+0x380>)
 8004d24:	00a3      	lsls	r3, r4, #2
 8004d26:	191b      	adds	r3, r3, r4
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	220d      	movs	r2, #13
 8004d2e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004d30:	0028      	movs	r0, r5
 8004d32:	3010      	adds	r0, #16
 8004d34:	f00d fdeb 	bl	801290e <atoi>
 8004d38:	b2c0      	uxtb	r0, r0
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <ParseSnippetCondition+0x37c>)
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	0093      	lsls	r3, r2, #2
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	18ff      	adds	r7, r7, r3
 8004d46:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9305      	str	r3, [sp, #20]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	9003      	str	r0, [sp, #12]
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	0030      	movs	r0, r6
 8004d5e:	f003 fd91 	bl	8008884 <SetButtonEvents>
					status = BOS_OK;		
 8004d62:	2000      	movs	r0, #0
 8004d64:	e6be      	b.n	8004ae4 <ParseSnippetCondition+0xf8>
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	200011bb 	.word	0x200011bb
 8004d6c:	200068b4 	.word	0x200068b4
 8004d70:	20001120 	.word	0x20001120
 8004d74:	08017884 	.word	0x08017884
 8004d78:	08018d84 	.word	0x08018d84
 8004d7c:	20001454 	.word	0x20001454
 8004d80:	08017ef0 	.word	0x08017ef0
 8004d84:	08017f00 	.word	0x08017f00
 8004d88:	08017f10 	.word	0x08017f10
			else if (secondPart != NULL && thirdPart != NULL) 
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	d04f      	beq.n	8004e30 <ParseSnippetCondition+0x444>
 8004d90:	2c00      	cmp	r4, #0
 8004d92:	d04f      	beq.n	8004e34 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8004d94:	0020      	movs	r0, r4
 8004d96:	f7fe fe15 	bl	80039c4 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d024      	beq.n	8004de8 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <ParseSnippetCondition+0x450>)
 8004da0:	781c      	ldrb	r4, [r3, #0]
 8004da2:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <ParseSnippetCondition+0x454>)
 8004da4:	00a3      	lsls	r3, r4, #2
 8004da6:	1919      	adds	r1, r3, r4
 8004da8:	0089      	lsls	r1, r1, #2
 8004daa:	2704      	movs	r7, #4
 8004dac:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004dae:	1919      	adds	r1, r3, r4
 8004db0:	0089      	lsls	r1, r1, #2
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004db6:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004db8:	4d20      	ldr	r5, [pc, #128]	; (8004e3c <ParseSnippetCondition+0x450>)
 8004dba:	782c      	ldrb	r4, [r5, #0]
 8004dbc:	0030      	movs	r0, r6
 8004dbe:	f7fe fe0d 	bl	80039dc <IsMathOperator>
 8004dc2:	491f      	ldr	r1, [pc, #124]	; (8004e40 <ParseSnippetCondition+0x454>)
 8004dc4:	00a3      	lsls	r3, r4, #2
 8004dc6:	191b      	adds	r3, r3, r4
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	18cb      	adds	r3, r1, r3
 8004dcc:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004dce:	782a      	ldrb	r2, [r5, #0]
 8004dd0:	0093      	lsls	r3, r2, #2
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	18cb      	adds	r3, r1, r3
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d02c      	beq.n	8004e38 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004dde:	3201      	adds	r2, #1
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <ParseSnippetCondition+0x450>)
 8004de2:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8004de4:	2000      	movs	r0, #0
 8004de6:	e01d      	b.n	8004e24 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <ParseSnippetCondition+0x450>)
 8004dea:	4698      	mov	r8, r3
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	4f14      	ldr	r7, [pc, #80]	; (8004e40 <ParseSnippetCondition+0x454>)
 8004df0:	0093      	lsls	r3, r2, #2
 8004df2:	1899      	adds	r1, r3, r2
 8004df4:	0089      	lsls	r1, r1, #2
 8004df6:	2003      	movs	r0, #3
 8004df8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8004dfe:	0020      	movs	r0, r4
 8004e00:	f00d fd80 	bl	8012904 <atof>
 8004e04:	f7fe f816 	bl	8002e34 <__aeabi_d2f>
 8004e08:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004e0a:	4643      	mov	r3, r8
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	0098      	lsls	r0, r3, #2
 8004e10:	18c0      	adds	r0, r0, r3
 8004e12:	0080      	lsls	r0, r0, #2
 8004e14:	3006      	adds	r0, #6
 8004e16:	19c0      	adds	r0, r0, r7
 8004e18:	2204      	movs	r2, #4
 8004e1a:	a907      	add	r1, sp, #28
 8004e1c:	f00e f807 	bl	8012e2e <memcpy>
 8004e20:	e7ca      	b.n	8004db8 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004e22:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004e24:	b008      	add	sp, #32
 8004e26:	bc04      	pop	{r2}
 8004e28:	4690      	mov	r8, r2
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004e2c:	2067      	movs	r0, #103	; 0x67
 8004e2e:	e7f9      	b.n	8004e24 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004e30:	2067      	movs	r0, #103	; 0x67
 8004e32:	e7f7      	b.n	8004e24 <ParseSnippetCondition+0x438>
 8004e34:	2067      	movs	r0, #103	; 0x67
 8004e36:	e7f5      	b.n	8004e24 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004e38:	2067      	movs	r0, #103	; 0x67
 8004e3a:	e7f3      	b.n	8004e24 <ParseSnippetCondition+0x438>
 8004e3c:	200011bb 	.word	0x200011bb
 8004e40:	200068b4 	.word	0x200068b4

08004e44 <AddSnippet>:
{
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	000c      	movs	r4, r1
	switch (code)
 8004e48:	2802      	cmp	r0, #2
 8004e4a:	d017      	beq.n	8004e7c <AddSnippet+0x38>
 8004e4c:	2803      	cmp	r0, #3
 8004e4e:	d003      	beq.n	8004e58 <AddSnippet+0x14>
 8004e50:	2801      	cmp	r0, #1
 8004e52:	d00f      	beq.n	8004e74 <AddSnippet+0x30>
	return BOS_OK;
 8004e54:	2000      	movs	r0, #0
 8004e56:	e00c      	b.n	8004e72 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <AddSnippet+0xec>)
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0093      	lsls	r3, r2, #2
 8004e60:	189b      	adds	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <AddSnippet+0xf0>)
 8004e66:	18d3      	adds	r3, r2, r3
 8004e68:	2201      	movs	r2, #1
 8004e6a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004e6c:	f006 f814 	bl	800ae98 <SaveToRO>
	return BOS_OK;
 8004e70:	2000      	movs	r0, #0
}
 8004e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004e74:	0008      	movs	r0, r1
 8004e76:	f7ff fdb9 	bl	80049ec <ParseSnippetCondition>
 8004e7a:	e7fa      	b.n	8004e72 <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <AddSnippet+0xec>)
 8004e7e:	781d      	ldrb	r5, [r3, #0]
 8004e80:	3d01      	subs	r5, #1
 8004e82:	00ab      	lsls	r3, r5, #2
 8004e84:	195b      	adds	r3, r3, r5
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <AddSnippet+0xf0>)
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	68de      	ldr	r6, [r3, #12]
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d03d      	beq.n	8004f0e <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004e92:	0030      	movs	r0, r6
 8004e94:	f7fb f940 	bl	8000118 <strlen>
 8004e98:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	f7fb f93c 	bl	8000118 <strlen>
 8004ea0:	1839      	adds	r1, r7, r0
 8004ea2:	3102      	adds	r1, #2
 8004ea4:	0030      	movs	r0, r6
 8004ea6:	f00d fffd 	bl	8012ea4 <realloc>
 8004eaa:	4e22      	ldr	r6, [pc, #136]	; (8004f34 <AddSnippet+0xf0>)
 8004eac:	00ab      	lsls	r3, r5, #2
 8004eae:	195d      	adds	r5, r3, r5
 8004eb0:	00ad      	lsls	r5, r5, #2
 8004eb2:	1975      	adds	r5, r6, r5
 8004eb4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004eb6:	4d1e      	ldr	r5, [pc, #120]	; (8004f30 <AddSnippet+0xec>)
 8004eb8:	782a      	ldrb	r2, [r5, #0]
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	0093      	lsls	r3, r2, #2
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	18f3      	adds	r3, r6, r3
 8004ec4:	1c7a      	adds	r2, r7, #1
 8004ec6:	68d8      	ldr	r0, [r3, #12]
 8004ec8:	1880      	adds	r0, r0, r2
 8004eca:	0021      	movs	r1, r4
 8004ecc:	f00e f9ee 	bl	80132ac <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004ed0:	782a      	ldrb	r2, [r5, #0]
 8004ed2:	3a01      	subs	r2, #1
 8004ed4:	0093      	lsls	r3, r2, #2
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	18f6      	adds	r6, r6, r3
 8004edc:	68f3      	ldr	r3, [r6, #12]
 8004ede:	2213      	movs	r2, #19
 8004ee0:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <AddSnippet+0xec>)
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	0093      	lsls	r3, r2, #2
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4911      	ldr	r1, [pc, #68]	; (8004f34 <AddSnippet+0xf0>)
 8004ef0:	18cb      	adds	r3, r1, r3
 8004ef2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ef4:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1bb      	bne.n	8004e72 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004efa:	0090      	lsls	r0, r2, #2
 8004efc:	1880      	adds	r0, r0, r2
 8004efe:	0080      	lsls	r0, r0, #2
 8004f00:	1840      	adds	r0, r0, r1
 8004f02:	2214      	movs	r2, #20
 8004f04:	2100      	movs	r1, #0
 8004f06:	f00d ff9b 	bl	8012e40 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004f0a:	200e      	movs	r0, #14
 8004f0c:	e7b1      	b.n	8004e72 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004f0e:	0008      	movs	r0, r1
 8004f10:	f7fb f902 	bl	8000118 <strlen>
 8004f14:	3001      	adds	r0, #1
 8004f16:	f00d fd3d 	bl	8012994 <malloc>
 8004f1a:	00ab      	lsls	r3, r5, #2
 8004f1c:	195d      	adds	r5, r3, r5
 8004f1e:	00ad      	lsls	r5, r5, #2
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <AddSnippet+0xf0>)
 8004f22:	195d      	adds	r5, r3, r5
 8004f24:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004f26:	0021      	movs	r1, r4
 8004f28:	f00e f9c0 	bl	80132ac <strcpy>
 8004f2c:	e7d9      	b.n	8004ee2 <AddSnippet+0x9e>
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	200011bb 	.word	0x200011bb
 8004f34:	200068b4 	.word	0x200068b4

08004f38 <CLI_CommandParser>:
{
 8004f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3a:	46de      	mov	lr, fp
 8004f3c:	4657      	mov	r7, sl
 8004f3e:	464e      	mov	r6, r9
 8004f40:	4645      	mov	r5, r8
 8004f42:	b5e0      	push	{r5, r6, r7, lr}
 8004f44:	b08b      	sub	sp, #44	; 0x2c
 8004f46:	9004      	str	r0, [sp, #16]
 8004f48:	4688      	mov	r8, r1
 8004f4a:	9203      	str	r2, [sp, #12]
 8004f4c:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004f4e:	2209      	movs	r2, #9
 8004f50:	2100      	movs	r1, #0
 8004f52:	a807      	add	r0, sp, #28
 8004f54:	f00d ff74 	bl	8012e40 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004f58:	4fd5      	ldr	r7, [pc, #852]	; (80052b0 <CLI_CommandParser+0x378>)
				if (id == myID) {
 8004f5a:	002e      	movs	r6, r5
 8004f5c:	e034      	b.n	8004fc8 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004f5e:	2252      	movs	r2, #82	; 0x52
 8004f60:	49d4      	ldr	r1, [pc, #848]	; (80052b4 <CLI_CommandParser+0x37c>)
 8004f62:	0020      	movs	r0, r4
 8004f64:	f00d ff63 	bl	8012e2e <memcpy>
				recordSnippet = 0;
 8004f68:	4bd1      	ldr	r3, [pc, #836]	; (80052b0 <CLI_CommandParser+0x378>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e044      	b.n	8004ffa <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8004f70:	2206      	movs	r2, #6
 8004f72:	49d1      	ldr	r1, [pc, #836]	; (80052b8 <CLI_CommandParser+0x380>)
 8004f74:	9803      	ldr	r0, [sp, #12]
 8004f76:	f00e f9a1 	bl	80132bc <strncmp>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d053      	beq.n	8005026 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8004f7e:	2d02      	cmp	r5, #2
 8004f80:	d05e      	beq.n	8005040 <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8004f82:	212e      	movs	r1, #46	; 0x2e
 8004f84:	9803      	ldr	r0, [sp, #12]
 8004f86:	f00e f983 	bl	8013290 <strchr>
 8004f8a:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004f8c:	d006      	beq.n	8004f9c <CLI_CommandParser+0x64>
 8004f8e:	3803      	subs	r0, #3
 8004f90:	2203      	movs	r2, #3
 8004f92:	49ca      	ldr	r1, [pc, #808]	; (80052bc <CLI_CommandParser+0x384>)
 8004f94:	f00e f992 	bl	80132bc <strncmp>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d160      	bne.n	800505e <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004f9c:	2299      	movs	r2, #153	; 0x99
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	0021      	movs	r1, r4
 8004fa2:	9803      	ldr	r0, [sp, #12]
 8004fa4:	f008 fb7e 	bl	800d6a4 <FreeRTOS_CLIProcessCommand>
 8004fa8:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004faa:	7823      	ldrb	r3, [r4, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d000      	beq.n	8004fb2 <CLI_CommandParser+0x7a>
 8004fb0:	e16f      	b.n	8005292 <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f7fb f8b0 	bl	8000118 <strlen>
 8004fb8:	0002      	movs	r2, r0
 8004fba:	2100      	movs	r1, #0
 8004fbc:	0020      	movs	r0, r4
 8004fbe:	f00d ff3f 	bl	8012e40 <memset>
	} while( xReturned != pdFALSE );
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	d100      	bne.n	8004fc8 <CLI_CommandParser+0x90>
 8004fc6:	e1ab      	b.n	8005320 <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8004fc8:	9803      	ldr	r0, [sp, #12]
 8004fca:	f7ff fcf7 	bl	80049bc <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004fce:	783d      	ldrb	r5, [r7, #0]
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d1cd      	bne.n	8004f70 <CLI_CommandParser+0x38>
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	49ba      	ldr	r1, [pc, #744]	; (80052c0 <CLI_CommandParser+0x388>)
 8004fd8:	9803      	ldr	r0, [sp, #12]
 8004fda:	f00e f96f 	bl	80132bc <strncmp>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d1cf      	bne.n	8004f82 <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	1cd9      	adds	r1, r3, #3
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f7ff ff2c 	bl	8004e44 <AddSnippet>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d1b6      	bne.n	8004f5e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004ff0:	4baf      	ldr	r3, [pc, #700]	; (80052b0 <CLI_CommandParser+0x378>)
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8004ff6:	230d      	movs	r3, #13
 8004ff8:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004ffa:	7823      	ldrb	r3, [r4, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d100      	bne.n	8005002 <CLI_CommandParser+0xca>
 8005000:	e186      	b.n	8005310 <CLI_CommandParser+0x3d8>
 8005002:	4643      	mov	r3, r8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d100      	bne.n	800500a <CLI_CommandParser+0xd2>
 8005008:	e19d      	b.n	8005346 <CLI_CommandParser+0x40e>
 800500a:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800500c:	0020      	movs	r0, r4
 800500e:	f7fb f883 	bl	8000118 <strlen>
 8005012:	b282      	uxth	r2, r0
 8005014:	2301      	movs	r3, #1
 8005016:	425b      	negs	r3, r3
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	3333      	adds	r3, #51	; 0x33
 800501c:	0021      	movs	r1, r4
 800501e:	9804      	ldr	r0, [sp, #16]
 8005020:	f008 f97c 	bl	800d31c <writePxMutex>
 8005024:	e7c5      	b.n	8004fb2 <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 8005026:	4ba2      	ldr	r3, [pc, #648]	; (80052b0 <CLI_CommandParser+0x378>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 800502c:	49a5      	ldr	r1, [pc, #660]	; (80052c4 <CLI_CommandParser+0x38c>)
 800502e:	3003      	adds	r0, #3
 8005030:	f7ff ff08 	bl	8004e44 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8005034:	2241      	movs	r2, #65	; 0x41
 8005036:	49a4      	ldr	r1, [pc, #656]	; (80052c8 <CLI_CommandParser+0x390>)
 8005038:	0020      	movs	r0, r4
 800503a:	f00d fef8 	bl	8012e2e <memcpy>
			xReturned = pdFALSE;
 800503e:	e7dc      	b.n	8004ffa <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	2002      	movs	r0, #2
 8005044:	f7ff fefe 	bl	8004e44 <AddSnippet>
 8005048:	2800      	cmp	r0, #0
 800504a:	d102      	bne.n	8005052 <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 800504c:	230d      	movs	r3, #13
 800504e:	7023      	strb	r3, [r4, #0]
 8005050:	e7d3      	b.n	8004ffa <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005052:	2252      	movs	r2, #82	; 0x52
 8005054:	4997      	ldr	r1, [pc, #604]	; (80052b4 <CLI_CommandParser+0x37c>)
 8005056:	0020      	movs	r0, r4
 8005058:	f00d fee9 	bl	8012e2e <memcpy>
 800505c:	e7cd      	b.n	8004ffa <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 800505e:	f00d fc8b 	bl	8012978 <__locale_ctype_ptr>
 8005062:	786b      	ldrb	r3, [r5, #1]
 8005064:	18c0      	adds	r0, r0, r3
 8005066:	7843      	ldrb	r3, [r0, #1]
 8005068:	075b      	lsls	r3, r3, #29
 800506a:	d497      	bmi.n	8004f9c <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 800506c:	9903      	ldr	r1, [sp, #12]
 800506e:	1a6a      	subs	r2, r5, r1
 8005070:	a807      	add	r0, sp, #28
 8005072:	f00e f934 	bl	80132de <strncpy>
				id = GetID(idString);
 8005076:	a807      	add	r0, sp, #28
 8005078:	f7ff f9b2 	bl	80043e0 <GetID>
 800507c:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 800507e:	4a93      	ldr	r2, [pc, #588]	; (80052cc <CLI_CommandParser+0x394>)
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	4693      	mov	fp, r2
 8005084:	4290      	cmp	r0, r2
 8005086:	d03d      	beq.n	8005104 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8005088:	2864      	cmp	r0, #100	; 0x64
 800508a:	d043      	beq.n	8005114 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 800508c:	2866      	cmp	r0, #102	; 0x66
 800508e:	d047      	beq.n	8005120 <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8005090:	28ff      	cmp	r0, #255	; 0xff
 8005092:	d04b      	beq.n	800512c <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8005094:	466b      	mov	r3, sp
 8005096:	7d1b      	ldrb	r3, [r3, #20]
 8005098:	469a      	mov	sl, r3
 800509a:	2bfe      	cmp	r3, #254	; 0xfe
 800509c:	d078      	beq.n	8005190 <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800509e:	3501      	adds	r5, #1
 80050a0:	2206      	movs	r2, #6
 80050a2:	498b      	ldr	r1, [pc, #556]	; (80052d0 <CLI_CommandParser+0x398>)
 80050a4:	0028      	movs	r0, r5
 80050a6:	f00e f909 	bl	80132bc <strncmp>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d000      	beq.n	80050b0 <CLI_CommandParser+0x178>
 80050ae:	e0b4      	b.n	800521a <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 80050b0:	4b88      	ldr	r3, [pc, #544]	; (80052d4 <CLI_CommandParser+0x39c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 80050b6:	2119      	movs	r1, #25
 80050b8:	4650      	mov	r0, sl
 80050ba:	f004 f889 	bl	80091d0 <SendMessageToModule>
						osDelay(100);
 80050be:	2064      	movs	r0, #100	; 0x64
 80050c0:	f008 fa59 	bl	800d576 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 80050c4:	4b84      	ldr	r3, [pc, #528]	; (80052d8 <CLI_CommandParser+0x3a0>)
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	4b80      	ldr	r3, [pc, #512]	; (80052cc <CLI_CommandParser+0x394>)
 80050ca:	7818      	ldrb	r0, [r3, #0]
 80050cc:	2300      	movs	r3, #0
 80050ce:	4651      	mov	r1, sl
 80050d0:	f7fe fe60 	bl	8003d94 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 80050d4:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <CLI_CommandParser+0x39c>)
 80050d6:	799b      	ldrb	r3, [r3, #6]
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d18e      	bne.n	8004ffa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 80050dc:	21fa      	movs	r1, #250	; 0xfa
 80050de:	0089      	lsls	r1, r1, #2
 80050e0:	2001      	movs	r0, #1
 80050e2:	f009 fe1b 	bl	800ed1c <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 80050e6:	4b7d      	ldr	r3, [pc, #500]	; (80052dc <CLI_CommandParser+0x3a4>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d085      	beq.n	8004ffa <CLI_CommandParser+0xc2>
									++timedoutMsg;
 80050ee:	4a7c      	ldr	r2, [pc, #496]	; (80052e0 <CLI_CommandParser+0x3a8>)
 80050f0:	8813      	ldrh	r3, [r2, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 80050f6:	9b05      	ldr	r3, [sp, #20]
 80050f8:	0022      	movs	r2, r4
 80050fa:	497a      	ldr	r1, [pc, #488]	; (80052e4 <CLI_CommandParser+0x3ac>)
 80050fc:	0020      	movs	r0, r4
 80050fe:	f00e f899 	bl	8013234 <sprintf>
 8005102:	e77a      	b.n	8004ffa <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005104:	2299      	movs	r2, #153	; 0x99
 8005106:	1c68      	adds	r0, r5, #1
 8005108:	0092      	lsls	r2, r2, #2
 800510a:	0021      	movs	r1, r4
 800510c:	f008 faca 	bl	800d6a4 <FreeRTOS_CLIProcessCommand>
 8005110:	0006      	movs	r6, r0
 8005112:	e74a      	b.n	8004faa <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8005114:	2227      	movs	r2, #39	; 0x27
 8005116:	4974      	ldr	r1, [pc, #464]	; (80052e8 <CLI_CommandParser+0x3b0>)
 8005118:	0020      	movs	r0, r4
 800511a:	f00d fe88 	bl	8012e2e <memcpy>
 800511e:	e76c      	b.n	8004ffa <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8005120:	2225      	movs	r2, #37	; 0x25
 8005122:	4972      	ldr	r1, [pc, #456]	; (80052ec <CLI_CommandParser+0x3b4>)
 8005124:	0020      	movs	r0, r4
 8005126:	f00d fe82 	bl	8012e2e <memcpy>
 800512a:	e766      	b.n	8004ffa <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800512c:	2219      	movs	r2, #25
 800512e:	2100      	movs	r1, #0
 8005130:	486f      	ldr	r0, [pc, #444]	; (80052f0 <CLI_CommandParser+0x3b8>)
 8005132:	f00d fe85 	bl	8012e40 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005136:	3501      	adds	r5, #1
 8005138:	9803      	ldr	r0, [sp, #12]
 800513a:	f7fa ffed 	bl	8000118 <strlen>
 800513e:	0006      	movs	r6, r0
 8005140:	ab07      	add	r3, sp, #28
 8005142:	0018      	movs	r0, r3
 8005144:	f7fa ffe8 	bl	8000118 <strlen>
 8005148:	1e72      	subs	r2, r6, #1
 800514a:	1a12      	subs	r2, r2, r0
 800514c:	0029      	movs	r1, r5
 800514e:	4869      	ldr	r0, [pc, #420]	; (80052f4 <CLI_CommandParser+0x3bc>)
 8005150:	f00e f8c5 	bl	80132de <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8005154:	9803      	ldr	r0, [sp, #12]
 8005156:	f7fa ffdf 	bl	8000118 <strlen>
 800515a:	0006      	movs	r6, r0
 800515c:	a807      	add	r0, sp, #28
 800515e:	f7fa ffdb 	bl	8000118 <strlen>
 8005162:	1a33      	subs	r3, r6, r0
 8005164:	b29b      	uxth	r3, r3
 8005166:	2217      	movs	r2, #23
 8005168:	21ff      	movs	r1, #255	; 0xff
 800516a:	4658      	mov	r0, fp
 800516c:	f004 f808 	bl	8009180 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8005170:	2299      	movs	r2, #153	; 0x99
 8005172:	0092      	lsls	r2, r2, #2
 8005174:	0021      	movs	r1, r4
 8005176:	0028      	movs	r0, r5
 8005178:	f008 fa94 	bl	800d6a4 <FreeRTOS_CLIProcessCommand>
 800517c:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 800517e:	0020      	movs	r0, r4
 8005180:	f7fa ffca 	bl	8000118 <strlen>
 8005184:	1820      	adds	r0, r4, r0
 8005186:	221d      	movs	r2, #29
 8005188:	495b      	ldr	r1, [pc, #364]	; (80052f8 <CLI_CommandParser+0x3c0>)
 800518a:	f00d fe50 	bl	8012e2e <memcpy>
 800518e:	e70c      	b.n	8004faa <CLI_CommandParser+0x72>
					group = id >> 8;
 8005190:	9b05      	ldr	r3, [sp, #20]
 8005192:	121b      	asrs	r3, r3, #8
 8005194:	b2db      	uxtb	r3, r3
 8005196:	469a      	mov	sl, r3
 8005198:	4b58      	ldr	r3, [pc, #352]	; (80052fc <CLI_CommandParser+0x3c4>)
 800519a:	4699      	mov	r9, r3
 800519c:	4652      	mov	r2, sl
 800519e:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80051a0:	2219      	movs	r2, #25
 80051a2:	2100      	movs	r1, #0
 80051a4:	4852      	ldr	r0, [pc, #328]	; (80052f0 <CLI_CommandParser+0x3b8>)
 80051a6:	f00d fe4b 	bl	8012e40 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80051aa:	1c6b      	adds	r3, r5, #1
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	9803      	ldr	r0, [sp, #12]
 80051b0:	f7fa ffb2 	bl	8000118 <strlen>
 80051b4:	0005      	movs	r5, r0
 80051b6:	aa07      	add	r2, sp, #28
 80051b8:	0010      	movs	r0, r2
 80051ba:	f7fa ffad 	bl	8000118 <strlen>
 80051be:	3d01      	subs	r5, #1
 80051c0:	1a2a      	subs	r2, r5, r0
 80051c2:	9905      	ldr	r1, [sp, #20]
 80051c4:	484b      	ldr	r0, [pc, #300]	; (80052f4 <CLI_CommandParser+0x3bc>)
 80051c6:	f00e f88a 	bl	80132de <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80051ca:	9803      	ldr	r0, [sp, #12]
 80051cc:	f7fa ffa4 	bl	8000118 <strlen>
 80051d0:	0005      	movs	r5, r0
 80051d2:	a807      	add	r0, sp, #28
 80051d4:	f7fa ffa0 	bl	8000118 <strlen>
 80051d8:	1a2b      	subs	r3, r5, r0
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2217      	movs	r2, #23
 80051de:	4651      	mov	r1, sl
 80051e0:	4658      	mov	r0, fp
 80051e2:	f003 ffcd 	bl	8009180 <BroadcastMessage>
					if (InGroup(myID, group))
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <CLI_CommandParser+0x394>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4a44      	ldr	r2, [pc, #272]	; (8005300 <CLI_CommandParser+0x3c8>)
 80051f0:	5a9b      	ldrh	r3, [r3, r2]
 80051f2:	464a      	mov	r2, r9
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	4113      	asrs	r3, r2
 80051f8:	07db      	lsls	r3, r3, #31
 80051fa:	d406      	bmi.n	800520a <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 80051fc:	ab07      	add	r3, sp, #28
 80051fe:	0022      	movs	r2, r4
 8005200:	4940      	ldr	r1, [pc, #256]	; (8005304 <CLI_CommandParser+0x3cc>)
 8005202:	0020      	movs	r0, r4
 8005204:	f00e f816 	bl	8013234 <sprintf>
 8005208:	e6cf      	b.n	8004faa <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800520a:	2299      	movs	r2, #153	; 0x99
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	0021      	movs	r1, r4
 8005210:	9805      	ldr	r0, [sp, #20]
 8005212:	f008 fa47 	bl	800d6a4 <FreeRTOS_CLIProcessCommand>
 8005216:	0006      	movs	r6, r0
 8005218:	e7f0      	b.n	80051fc <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 800521a:	9803      	ldr	r0, [sp, #12]
 800521c:	f7fa ff7c 	bl	8000118 <strlen>
 8005220:	0006      	movs	r6, r0
 8005222:	ab07      	add	r3, sp, #28
 8005224:	0018      	movs	r0, r3
 8005226:	f7fa ff77 	bl	8000118 <strlen>
 800522a:	1e72      	subs	r2, r6, #1
 800522c:	1a12      	subs	r2, r2, r0
 800522e:	0029      	movs	r1, r5
 8005230:	4830      	ldr	r0, [pc, #192]	; (80052f4 <CLI_CommandParser+0x3bc>)
 8005232:	f00e f854 	bl	80132de <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8005236:	9803      	ldr	r0, [sp, #12]
 8005238:	f7fa ff6e 	bl	8000118 <strlen>
 800523c:	0005      	movs	r5, r0
 800523e:	a807      	add	r0, sp, #28
 8005240:	f7fa ff6a 	bl	8000118 <strlen>
 8005244:	3d01      	subs	r5, #1
 8005246:	1a2a      	subs	r2, r5, r0
 8005248:	b292      	uxth	r2, r2
 800524a:	2117      	movs	r1, #23
 800524c:	4650      	mov	r0, sl
 800524e:	f003 ffbf 	bl	80091d0 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8005252:	9a05      	ldr	r2, [sp, #20]
 8005254:	492c      	ldr	r1, [pc, #176]	; (8005308 <CLI_CommandParser+0x3d0>)
 8005256:	0020      	movs	r0, r4
 8005258:	f00d ffec 	bl	8013234 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 800525c:	7823      	ldrb	r3, [r4, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <CLI_CommandParser+0x330>
 8005262:	4643      	mov	r3, r8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005268:	0020      	movs	r0, r4
 800526a:	f7fa ff55 	bl	8000118 <strlen>
 800526e:	0002      	movs	r2, r0
 8005270:	2100      	movs	r1, #0
 8005272:	0020      	movs	r0, r4
 8005274:	f00d fde4 	bl	8012e40 <memset>
 8005278:	e72c      	b.n	80050d4 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800527a:	0020      	movs	r0, r4
 800527c:	f7fa ff4c 	bl	8000118 <strlen>
 8005280:	b282      	uxth	r2, r0
 8005282:	2301      	movs	r3, #1
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	3331      	adds	r3, #49	; 0x31
 8005288:	0021      	movs	r1, r4
 800528a:	9804      	ldr	r0, [sp, #16]
 800528c:	f008 f846 	bl	800d31c <writePxMutex>
 8005290:	e7ea      	b.n	8005268 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005292:	4643      	mov	r3, r8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d100      	bne.n	800529a <CLI_CommandParser+0x362>
 8005298:	e68b      	b.n	8004fb2 <CLI_CommandParser+0x7a>
 800529a:	e6b7      	b.n	800500c <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800529c:	2301      	movs	r3, #1
 800529e:	425b      	negs	r3, r3
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	3333      	adds	r3, #51	; 0x33
 80052a4:	2238      	movs	r2, #56	; 0x38
 80052a6:	4919      	ldr	r1, [pc, #100]	; (800530c <CLI_CommandParser+0x3d4>)
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	f008 f837 	bl	800d31c <writePxMutex>
}
 80052ae:	e043      	b.n	8005338 <CLI_CommandParser+0x400>
 80052b0:	200011e8 	.word	0x200011e8
 80052b4:	08017d28 	.word	0x08017d28
 80052b8:	08017d7c 	.word	0x08017d7c
 80052bc:	08017dc8 	.word	0x08017dc8
 80052c0:	08017d24 	.word	0x08017d24
 80052c4:	080179ec 	.word	0x080179ec
 80052c8:	08017d84 	.word	0x08017d84
 80052cc:	2000101c 	.word	0x2000101c
 80052d0:	08017e68 	.word	0x08017e68
 80052d4:	20006898 	.word	0x20006898
 80052d8:	20000a77 	.word	0x20000a77
 80052dc:	200010b0 	.word	0x200010b0
 80052e0:	20001666 	.word	0x20001666
 80052e4:	08017e94 	.word	0x08017e94
 80052e8:	08017dcc 	.word	0x08017dcc
 80052ec:	08017df4 	.word	0x08017df4
 80052f0:	20000cd4 	.word	0x20000cd4
 80052f4:	20000ee8 	.word	0x20000ee8
 80052f8:	08017e1c 	.word	0x08017e1c
 80052fc:	200011ba 	.word	0x200011ba
 8005300:	20000e70 	.word	0x20000e70
 8005304:	08017e3c 	.word	0x08017e3c
 8005308:	08017e70 	.word	0x08017e70
 800530c:	08017eb4 	.word	0x08017eb4
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005310:	0020      	movs	r0, r4
 8005312:	f7fa ff01 	bl	8000118 <strlen>
 8005316:	0002      	movs	r2, r0
 8005318:	2100      	movs	r1, #0
 800531a:	0020      	movs	r0, r4
 800531c:	f00d fd90 	bl	8012e40 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8005320:	2209      	movs	r2, #9
 8005322:	2100      	movs	r1, #0
 8005324:	a807      	add	r0, sp, #28
 8005326:	f00d fd8b 	bl	8012e40 <memset>
	if(!recordSnippet && enableOutput)
 800532a:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <CLI_CommandParser+0x420>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <CLI_CommandParser+0x400>
 8005332:	4643      	mov	r3, r8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1b1      	bne.n	800529c <CLI_CommandParser+0x364>
}
 8005338:	b00b      	add	sp, #44	; 0x2c
 800533a:	bc3c      	pop	{r2, r3, r4, r5}
 800533c:	4690      	mov	r8, r2
 800533e:	4699      	mov	r9, r3
 8005340:	46a2      	mov	sl, r4
 8005342:	46ab      	mov	fp, r5
 8005344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005346:	0020      	movs	r0, r4
 8005348:	f7fa fee6 	bl	8000118 <strlen>
 800534c:	0002      	movs	r2, r0
 800534e:	2100      	movs	r1, #0
 8005350:	0020      	movs	r0, r4
 8005352:	f00d fd75 	bl	8012e40 <memset>
 8005356:	e7e3      	b.n	8005320 <CLI_CommandParser+0x3e8>
 8005358:	200011e8 	.word	0x200011e8

0800535c <prvCLITask>:
{
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	46de      	mov	lr, fp
 8005360:	4657      	mov	r7, sl
 8005362:	464e      	mov	r6, r9
 8005364:	b5c0      	push	{r6, r7, lr}
 8005366:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8005368:	2101      	movs	r1, #1
 800536a:	4249      	negs	r1, r1
 800536c:	2001      	movs	r0, #1
 800536e:	f009 fcd5 	bl	800ed1c <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005372:	230f      	movs	r3, #15
 8005374:	aa02      	add	r2, sp, #8
 8005376:	4694      	mov	ip, r2
 8005378:	4463      	add	r3, ip
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800537e:	f008 fa0f 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8005382:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005384:	23e1      	movs	r3, #225	; 0xe1
 8005386:	031b      	lsls	r3, r3, #12
 8005388:	4a5f      	ldr	r2, [pc, #380]	; (8005508 <prvCLITask+0x1ac>)
 800538a:	6892      	ldr	r2, [r2, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d00f      	beq.n	80053b0 <prvCLITask+0x54>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005390:	2401      	movs	r4, #1
			if (port != PcPort)
 8005392:	4e5e      	ldr	r6, [pc, #376]	; (800550c <prvCLITask+0x1b0>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005394:	001d      	movs	r5, r3
 8005396:	e003      	b.n	80053a0 <prvCLITask+0x44>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005398:	3401      	adds	r4, #1
 800539a:	b2e4      	uxtb	r4, r4
 800539c:	2c06      	cmp	r4, #6
 800539e:	d007      	beq.n	80053b0 <prvCLITask+0x54>
			if (port != PcPort)
 80053a0:	7833      	ldrb	r3, [r6, #0]
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	d0f8      	beq.n	8005398 <prvCLITask+0x3c>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 80053a6:	0029      	movs	r1, r5
 80053a8:	0020      	movs	r0, r4
 80053aa:	f008 f825 	bl	800d3f8 <UpdateBaudrate>
 80053ae:	e7f3      	b.n	8005398 <prvCLITask+0x3c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 80053b0:	4b57      	ldr	r3, [pc, #348]	; (8005510 <prvCLITask+0x1b4>)
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	0053      	lsls	r3, r2, #1
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4a56      	ldr	r2, [pc, #344]	; (8005514 <prvCLITask+0x1b8>)
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	4a56      	ldr	r2, [pc, #344]	; (8005518 <prvCLITask+0x1bc>)
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	4c56      	ldr	r4, [pc, #344]	; (800551c <prvCLITask+0x1c0>)
 80053c4:	4d51      	ldr	r5, [pc, #324]	; (800550c <prvCLITask+0x1b0>)
 80053c6:	7829      	ldrb	r1, [r5, #0]
 80053c8:	9100      	str	r1, [sp, #0]
 80053ca:	4955      	ldr	r1, [pc, #340]	; (8005520 <prvCLITask+0x1c4>)
 80053cc:	0020      	movs	r0, r4
 80053ce:	f00d ff31 	bl	8013234 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 80053d2:	7828      	ldrb	r0, [r5, #0]
 80053d4:	230a      	movs	r3, #10
 80053d6:	4a53      	ldr	r2, [pc, #332]	; (8005524 <prvCLITask+0x1c8>)
 80053d8:	4953      	ldr	r1, [pc, #332]	; (8005528 <prvCLITask+0x1cc>)
 80053da:	f007 ffc7 	bl	800d36c <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 80053de:	0020      	movs	r0, r4
 80053e0:	f7fa fe9a 	bl	8000118 <strlen>
 80053e4:	b282      	uxth	r2, r0
 80053e6:	7828      	ldrb	r0, [r5, #0]
 80053e8:	230a      	movs	r3, #10
 80053ea:	0021      	movs	r1, r4
 80053ec:	f007 ffbe 	bl	800d36c <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80053f0:	2300      	movs	r3, #0
 80053f2:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80053f4:	4b45      	ldr	r3, [pc, #276]	; (800550c <prvCLITask+0x1b0>)
 80053f6:	469a      	mov	sl, r3
 80053f8:	4b4c      	ldr	r3, [pc, #304]	; (800552c <prvCLITask+0x1d0>)
 80053fa:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80053fc:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 80053fe:	4656      	mov	r6, sl
 8005400:	e061      	b.n	80054c6 <prvCLITask+0x16a>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8005402:	200f      	movs	r0, #15
 8005404:	ad02      	add	r5, sp, #8
 8005406:	46ac      	mov	ip, r5
 8005408:	4460      	add	r0, ip
 800540a:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800540c:	0198      	lsls	r0, r3, #6
 800540e:	4a48      	ldr	r2, [pc, #288]	; (8005530 <prvCLITask+0x1d4>)
 8005410:	1812      	adds	r2, r2, r0
 8005412:	2000      	movs	r0, #0
 8005414:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 8005416:	4a45      	ldr	r2, [pc, #276]	; (800552c <prvCLITask+0x1d0>)
 8005418:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 800541a:	240f      	movs	r4, #15
 800541c:	ab02      	add	r3, sp, #8
 800541e:	469c      	mov	ip, r3
 8005420:	4464      	add	r4, ip
 8005422:	4b3a      	ldr	r3, [pc, #232]	; (800550c <prvCLITask+0x1b0>)
 8005424:	7818      	ldrb	r0, [r3, #0]
 8005426:	230a      	movs	r3, #10
 8005428:	2201      	movs	r2, #1
 800542a:	0021      	movs	r1, r4
 800542c:	f007 ff9e 	bl	800d36c <writePxITMutex>
		if( cRxedChar == '\r' )
 8005430:	7823      	ldrb	r3, [r4, #0]
 8005432:	2b0d      	cmp	r3, #13
 8005434:	d028      	beq.n	8005488 <prvCLITask+0x12c>
			if( cRxedChar == '\n' )
 8005436:	2b0a      	cmp	r3, #10
 8005438:	d043      	beq.n	80054c2 <prvCLITask+0x166>
			else if( cRxedChar == '\b' )
 800543a:	2b08      	cmp	r3, #8
 800543c:	d059      	beq.n	80054f2 <prvCLITask+0x196>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800543e:	001a      	movs	r2, r3
 8005440:	3a20      	subs	r2, #32
 8005442:	2a5e      	cmp	r2, #94	; 0x5e
 8005444:	d83d      	bhi.n	80054c2 <prvCLITask+0x166>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8005446:	465a      	mov	r2, fp
 8005448:	2a31      	cmp	r2, #49	; 0x31
 800544a:	dc3a      	bgt.n	80054c2 <prvCLITask+0x166>
						cInputString[ cInputIndex ] = cRxedChar;
 800544c:	4a39      	ldr	r2, [pc, #228]	; (8005534 <prvCLITask+0x1d8>)
 800544e:	4659      	mov	r1, fp
 8005450:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005452:	465b      	mov	r3, fp
 8005454:	3301      	adds	r3, #1
 8005456:	b25b      	sxtb	r3, r3
 8005458:	469b      	mov	fp, r3
 800545a:	e032      	b.n	80054c2 <prvCLITask+0x166>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800545c:	2200      	movs	r2, #0
 800545e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005460:	f009 ff42 	bl	800f2e8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005464:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8005466:	7833      	ldrb	r3, [r6, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	0021      	movs	r1, r4
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	18aa      	adds	r2, r5, r2
 8005470:	5d12      	ldrb	r2, [r2, r4]
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1c5      	bne.n	8005402 <prvCLITask+0xa6>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005476:	2c3f      	cmp	r4, #63	; 0x3f
 8005478:	d0f0      	beq.n	800545c <prvCLITask+0x100>
			taskYIELD();
 800547a:	f009 ff35 	bl	800f2e8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800547e:	3401      	adds	r4, #1
 8005480:	b2a4      	uxth	r4, r4
 8005482:	2c3f      	cmp	r4, #63	; 0x3f
 8005484:	d9ef      	bls.n	8005466 <prvCLITask+0x10a>
 8005486:	e7c8      	b.n	800541a <prvCLITask+0xbe>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <prvCLITask+0x1b0>)
 800548a:	7818      	ldrb	r0, [r3, #0]
 800548c:	230a      	movs	r3, #10
 800548e:	2202      	movs	r2, #2
 8005490:	4929      	ldr	r1, [pc, #164]	; (8005538 <prvCLITask+0x1dc>)
 8005492:	f007 ff6b 	bl	800d36c <writePxITMutex>
			if( cInputIndex == 0 )
 8005496:	465b      	mov	r3, fp
 8005498:	2b00      	cmp	r3, #0
 800549a:	d025      	beq.n	80054e8 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800549c:	4c25      	ldr	r4, [pc, #148]	; (8005534 <prvCLITask+0x1d8>)
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <prvCLITask+0x1b0>)
 80054a0:	7818      	ldrb	r0, [r3, #0]
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	0022      	movs	r2, r4
 80054a6:	2101      	movs	r1, #1
 80054a8:	f7ff fd46 	bl	8004f38 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 80054ac:	0021      	movs	r1, r4
 80054ae:	4823      	ldr	r0, [pc, #140]	; (800553c <prvCLITask+0x1e0>)
 80054b0:	f00d fefc 	bl	80132ac <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 80054b4:	2232      	movs	r2, #50	; 0x32
 80054b6:	2100      	movs	r1, #0
 80054b8:	0020      	movs	r0, r4
 80054ba:	f00d fcc1 	bl	8012e40 <memset>
			cInputIndex = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	469b      	mov	fp, r3
		taskYIELD();
 80054c2:	f009 ff11 	bl	800f2e8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80054c6:	4653      	mov	r3, sl
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	464a      	mov	r2, r9
 80054ce:	5cd2      	ldrb	r2, [r2, r3]
 80054d0:	b294      	uxth	r4, r2
 80054d2:	2c3f      	cmp	r4, #63	; 0x3f
 80054d4:	d8a1      	bhi.n	800541a <prvCLITask+0xbe>
			if (UARTRxBuf[PcPort-1][chr]) {
 80054d6:	0011      	movs	r1, r2
 80054d8:	019d      	lsls	r5, r3, #6
 80054da:	4815      	ldr	r0, [pc, #84]	; (8005530 <prvCLITask+0x1d4>)
 80054dc:	1940      	adds	r0, r0, r5
 80054de:	5c82      	ldrb	r2, [r0, r2]
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	d18e      	bne.n	8005402 <prvCLITask+0xa6>
 80054e4:	4d12      	ldr	r5, [pc, #72]	; (8005530 <prvCLITask+0x1d4>)
 80054e6:	e7c6      	b.n	8005476 <prvCLITask+0x11a>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 80054e8:	4914      	ldr	r1, [pc, #80]	; (800553c <prvCLITask+0x1e0>)
 80054ea:	4812      	ldr	r0, [pc, #72]	; (8005534 <prvCLITask+0x1d8>)
 80054ec:	f00d fede 	bl	80132ac <strcpy>
 80054f0:	e7d4      	b.n	800549c <prvCLITask+0x140>
				if( cInputIndex > 0 )
 80054f2:	465b      	mov	r3, fp
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dde4      	ble.n	80054c2 <prvCLITask+0x166>
					cInputIndex--;
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <prvCLITask+0x1d8>)
 8005500:	2200      	movs	r2, #0
 8005502:	4659      	mov	r1, fp
 8005504:	545a      	strb	r2, [r3, r1]
 8005506:	e7dc      	b.n	80054c2 <prvCLITask+0x166>
 8005508:	20006898 	.word	0x20006898
 800550c:	20000a77 	.word	0x20000a77
 8005510:	20000050 	.word	0x20000050
 8005514:	08017a3c 	.word	0x08017a3c
 8005518:	2000101c 	.word	0x2000101c
 800551c:	200011bc 	.word	0x200011bc
 8005520:	08017f20 	.word	0x08017f20
 8005524:	00000293 	.word	0x00000293
 8005528:	08017f4c 	.word	0x08017f4c
 800552c:	200013ac 	.word	0x200013ac
 8005530:	2000126c 	.word	0x2000126c
 8005534:	200010ec 	.word	0x200010ec
 8005538:	0801a280 	.word	0x0801a280
 800553c:	20001188 	.word	0x20001188

08005540 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <ParseSnippetCommand+0x78>)
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	3a01      	subs	r2, #1
 800554a:	0093      	lsls	r3, r2, #2
 800554c:	189b      	adds	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <ParseSnippetCommand+0x7c>)
 8005552:	18d3      	adds	r3, r2, r3
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02c      	beq.n	80055b4 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800555a:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <ParseSnippetCommand+0x80>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d014      	beq.n	800558c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <ParseSnippetCommand+0x80>)
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	782b      	ldrb	r3, [r5, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800556c:	2113      	movs	r1, #19
 800556e:	0028      	movs	r0, r5
 8005570:	f00d fe8e 	bl	8013290 <strchr>
 8005574:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 8005576:	d011      	beq.n	800559c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005578:	1b42      	subs	r2, r0, r5
 800557a:	0029      	movs	r1, r5
 800557c:	0020      	movs	r0, r4
 800557e:	f00d feae 	bl	80132de <strncpy>
		ptrStart = ptrEnd+1;
 8005582:	3601      	adds	r6, #1
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <ParseSnippetCommand+0x80>)
 8005586:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005588:	2001      	movs	r0, #1
 800558a:	e006      	b.n	800559a <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <ParseSnippetCommand+0x80>)
 800558e:	6018      	str	r0, [r3, #0]
 8005590:	e7e7      	b.n	8005562 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <ParseSnippetCommand+0x80>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
		return false;
 8005598:	2000      	movs	r0, #0
}
 800559a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800559c:	0029      	movs	r1, r5
 800559e:	0020      	movs	r0, r4
 80055a0:	f00d fe84 	bl	80132ac <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 80055a4:	0020      	movs	r0, r4
 80055a6:	f7fa fdb7 	bl	8000118 <strlen>
 80055aa:	182d      	adds	r5, r5, r0
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <ParseSnippetCommand+0x80>)
 80055ae:	601d      	str	r5, [r3, #0]
	return true;
 80055b0:	2001      	movs	r0, #1
 80055b2:	e7f2      	b.n	800559a <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80055b4:	2000      	movs	r0, #0
 80055b6:	e7f0      	b.n	800559a <ParseSnippetCommand+0x5a>
 80055b8:	200011bb 	.word	0x200011bb
 80055bc:	200068b4 	.word	0x200068b4
 80055c0:	200011e4 	.word	0x200011e4

080055c4 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b083      	sub	sp, #12
 80055c8:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 80055ca:	0083      	lsls	r3, r0, #2
 80055cc:	181b      	adds	r3, r3, r0
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4a3f      	ldr	r2, [pc, #252]	; (80056d0 <CheckSnippetCondition+0x10c>)
 80055d2:	5c9b      	ldrb	r3, [r3, r2]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d003      	beq.n	80055e0 <CheckSnippetCondition+0x1c>
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d015      	beq.n	8005608 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 80055dc:	2000      	movs	r0, #0
 80055de:	e011      	b.n	8005604 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 80055e0:	493b      	ldr	r1, [pc, #236]	; (80056d0 <CheckSnippetCondition+0x10c>)
 80055e2:	0083      	lsls	r3, r0, #2
 80055e4:	181a      	adds	r2, r3, r0
 80055e6:	0092      	lsls	r2, r2, #2
 80055e8:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 80055ea:	7890      	ldrb	r0, [r2, #2]
 80055ec:	00c2      	lsls	r2, r0, #3
 80055ee:	1812      	adds	r2, r2, r0
 80055f0:	191b      	adds	r3, r3, r4
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	18cb      	adds	r3, r1, r3
 80055f6:	4937      	ldr	r1, [pc, #220]	; (80056d4 <CheckSnippetCondition+0x110>)
 80055f8:	5c50      	ldrb	r0, [r2, r1]
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	1ac0      	subs	r0, r0, r3
 80055fe:	4243      	negs	r3, r0
 8005600:	4158      	adcs	r0, r3
 8005602:	b2c0      	uxtb	r0, r0
}
 8005604:	b003      	add	sp, #12
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005608:	4e31      	ldr	r6, [pc, #196]	; (80056d0 <CheckSnippetCondition+0x10c>)
 800560a:	0085      	lsls	r5, r0, #2
 800560c:	182b      	adds	r3, r5, r0
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	18f3      	adds	r3, r6, r3
 8005612:	78da      	ldrb	r2, [r3, #3]
 8005614:	3a01      	subs	r2, #1
 8005616:	0053      	lsls	r3, r2, #1
 8005618:	189b      	adds	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <CheckSnippetCondition+0x114>)
 800561e:	589b      	ldr	r3, [r3, r2]
 8005620:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005622:	1829      	adds	r1, r5, r0
 8005624:	0089      	lsls	r1, r1, #2
 8005626:	3106      	adds	r1, #6
 8005628:	1989      	adds	r1, r1, r6
 800562a:	2204      	movs	r2, #4
 800562c:	a801      	add	r0, sp, #4
 800562e:	f00d fbfe 	bl	8012e2e <memcpy>
			switch (snippets[index].cond.mathOperator)
 8005632:	192d      	adds	r5, r5, r4
 8005634:	00ad      	lsls	r5, r5, #2
 8005636:	1975      	adds	r5, r6, r5
 8005638:	786b      	ldrb	r3, [r5, #1]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d83f      	bhi.n	80056be <CheckSnippetCondition+0xfa>
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <CheckSnippetCondition+0x118>)
 8005642:	58d3      	ldr	r3, [r2, r3]
 8005644:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8005646:	1c39      	adds	r1, r7, #0
 8005648:	9801      	ldr	r0, [sp, #4]
 800564a:	f7fa ff41 	bl	80004d0 <__aeabi_fcmpeq>
 800564e:	1e43      	subs	r3, r0, #1
 8005650:	4198      	sbcs	r0, r3
 8005652:	e7d7      	b.n	8005604 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8005654:	1c39      	adds	r1, r7, #0
 8005656:	9801      	ldr	r0, [sp, #4]
 8005658:	f7fa ff40 	bl	80004dc <__aeabi_fcmplt>
 800565c:	1e43      	subs	r3, r0, #1
 800565e:	4198      	sbcs	r0, r3
 8005660:	e7d0      	b.n	8005604 <CheckSnippetCondition+0x40>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8005662:	1c39      	adds	r1, r7, #0
 8005664:	9801      	ldr	r0, [sp, #4]
 8005666:	f7fa ff4d 	bl	8000504 <__aeabi_fcmpgt>
 800566a:	2800      	cmp	r0, #0
 800566c:	d029      	beq.n	80056c2 <CheckSnippetCondition+0xfe>
 800566e:	2100      	movs	r1, #0
 8005670:	1c38      	adds	r0, r7, #0
 8005672:	f7fa ff2d 	bl	80004d0 <__aeabi_fcmpeq>
 8005676:	4243      	negs	r3, r0
 8005678:	4158      	adcs	r0, r3
 800567a:	e7c3      	b.n	8005604 <CheckSnippetCondition+0x40>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800567c:	1c39      	adds	r1, r7, #0
 800567e:	9801      	ldr	r0, [sp, #4]
 8005680:	f7fa ff36 	bl	80004f0 <__aeabi_fcmple>
 8005684:	1e43      	subs	r3, r0, #1
 8005686:	4198      	sbcs	r0, r3
 8005688:	e7bc      	b.n	8005604 <CheckSnippetCondition+0x40>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800568a:	1c39      	adds	r1, r7, #0
 800568c:	9801      	ldr	r0, [sp, #4]
 800568e:	f7fa ff43 	bl	8000518 <__aeabi_fcmpge>
 8005692:	2800      	cmp	r0, #0
 8005694:	d017      	beq.n	80056c6 <CheckSnippetCondition+0x102>
 8005696:	2100      	movs	r1, #0
 8005698:	1c38      	adds	r0, r7, #0
 800569a:	f7fa ff19 	bl	80004d0 <__aeabi_fcmpeq>
 800569e:	4243      	negs	r3, r0
 80056a0:	4158      	adcs	r0, r3
 80056a2:	e7af      	b.n	8005604 <CheckSnippetCondition+0x40>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 80056a4:	1c39      	adds	r1, r7, #0
 80056a6:	9801      	ldr	r0, [sp, #4]
 80056a8:	f7fa ff12 	bl	80004d0 <__aeabi_fcmpeq>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d10c      	bne.n	80056ca <CheckSnippetCondition+0x106>
 80056b0:	2100      	movs	r1, #0
 80056b2:	1c38      	adds	r0, r7, #0
 80056b4:	f7fa ff0c 	bl	80004d0 <__aeabi_fcmpeq>
 80056b8:	4243      	negs	r3, r0
 80056ba:	4158      	adcs	r0, r3
 80056bc:	e7a2      	b.n	8005604 <CheckSnippetCondition+0x40>
	return false;
 80056be:	2000      	movs	r0, #0
 80056c0:	e7a0      	b.n	8005604 <CheckSnippetCondition+0x40>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e79e      	b.n	8005604 <CheckSnippetCondition+0x40>
 80056c6:	2000      	movs	r0, #0
 80056c8:	e79c      	b.n	8005604 <CheckSnippetCondition+0x40>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e79a      	b.n	8005604 <CheckSnippetCondition+0x40>
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	200068b4 	.word	0x200068b4
 80056d4:	20001454 	.word	0x20001454
 80056d8:	20000088 	.word	0x20000088
 80056dc:	08017d08 	.word	0x08017d08

080056e0 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 80056e2:	f008 f85d 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 80056e6:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <ExecuteSnippet+0x7c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d032      	beq.n	8005756 <ExecuteSnippet+0x76>
 80056f0:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 80056f2:	4f1b      	ldr	r7, [pc, #108]	; (8005760 <ExecuteSnippet+0x80>)
 80056f4:	e01a      	b.n	800572c <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <ExecuteSnippet+0x84>)
 80056f8:	7818      	ldrb	r0, [r3, #0]
 80056fa:	002b      	movs	r3, r5
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <ExecuteSnippet+0x88>)
 80056fe:	2100      	movs	r1, #0
 8005700:	f7ff fc1a 	bl	8004f38 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8005704:	0028      	movs	r0, r5
 8005706:	f7fa fd07 	bl	8000118 <strlen>
 800570a:	0002      	movs	r2, r0
 800570c:	2100      	movs	r1, #0
 800570e:	0028      	movs	r0, r5
 8005710:	f00d fb96 	bl	8012e40 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005714:	4914      	ldr	r1, [pc, #80]	; (8005768 <ExecuteSnippet+0x88>)
 8005716:	68f0      	ldr	r0, [r6, #12]
 8005718:	f7ff ff12 	bl	8005540 <ParseSnippetCommand>
 800571c:	2800      	cmp	r0, #0
 800571e:	d1ea      	bne.n	80056f6 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005720:	3401      	adds	r4, #1
 8005722:	b2a4      	uxth	r4, r4
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <ExecuteSnippet+0x7c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	42a3      	cmp	r3, r4
 800572a:	d914      	bls.n	8005756 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 800572c:	00a3      	lsls	r3, r4, #2
 800572e:	191b      	adds	r3, r3, r4
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	7c1b      	ldrb	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f2      	beq.n	8005720 <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 800573a:	b2e0      	uxtb	r0, r4
 800573c:	f7ff ff42 	bl	80055c4 <CheckSnippetCondition>
 8005740:	2800      	cmp	r0, #0
 8005742:	d0ed      	beq.n	8005720 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <ExecuteSnippet+0x8c>)
 8005746:	2220      	movs	r2, #32
 8005748:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800574a:	00a3      	lsls	r3, r4, #2
 800574c:	191e      	adds	r6, r3, r4
 800574e:	00b6      	lsls	r6, r6, #2
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <ExecuteSnippet+0x80>)
 8005752:	199e      	adds	r6, r3, r6
 8005754:	e7de      	b.n	8005714 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 8005756:	2000      	movs	r0, #0
 8005758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	200011bb 	.word	0x200011bb
 8005760:	200068b4 	.word	0x200068b4
 8005764:	20000a77 	.word	0x20000a77
 8005768:	20001154 	.word	0x20001154
 800576c:	20006898 	.word	0x20006898

08005770 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8005770:	2000      	movs	r0, #0
 8005772:	4770      	bx	lr

08005774 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	0004      	movs	r4, r0
 800577a:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005780:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005782:	2800      	cmp	r0, #0
 8005784:	d101      	bne.n	800578a <setBaudrateCommand+0x16>
 8005786:	b672      	cpsid	i
 8005788:	e7fe      	b.n	8005788 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800578a:	aa01      	add	r2, sp, #4
 800578c:	2101      	movs	r1, #1
 800578e:	0028      	movs	r0, r5
 8005790:	f008 f80a 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005794:	2300      	movs	r3, #0
 8005796:	56c3      	ldrsb	r3, [r0, r3]
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d00c      	beq.n	80057b6 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800579c:	466a      	mov	r2, sp
 800579e:	2102      	movs	r1, #2
 80057a0:	0028      	movs	r0, r5
 80057a2:	f008 f801 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 80057a6:	f00d f8b8 	bl	801291a <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80057aa:	2213      	movs	r2, #19
 80057ac:	490f      	ldr	r1, [pc, #60]	; (80057ec <setBaudrateCommand+0x78>)
 80057ae:	0020      	movs	r0, r4
 80057b0:	f00d fb3d 	bl	8012e2e <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80057b4:	e016      	b.n	80057e4 <setBaudrateCommand+0x70>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80057b6:	3001      	adds	r0, #1
 80057b8:	f00d f8af 	bl	801291a <atol>
 80057bc:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80057be:	466a      	mov	r2, sp
 80057c0:	2102      	movs	r1, #2
 80057c2:	0028      	movs	r0, r5
 80057c4:	f007 fff0 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 80057c8:	f00d f8a7 	bl	801291a <atol>
 80057cc:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 80057ce:	b2f0      	uxtb	r0, r6
 80057d0:	0029      	movs	r1, r5
 80057d2:	f007 fe11 	bl	800d3f8 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 80057d6:	23ff      	movs	r3, #255	; 0xff
 80057d8:	4033      	ands	r3, r6
 80057da:	002a      	movs	r2, r5
 80057dc:	4904      	ldr	r1, [pc, #16]	; (80057f0 <setBaudrateCommand+0x7c>)
 80057de:	0020      	movs	r0, r4
 80057e0:	f00d fd28 	bl	8013234 <sprintf>
}
 80057e4:	2000      	movs	r0, #0
 80057e6:	b002      	add	sp, #8
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08018afc 	.word	0x08018afc
 80057f0:	08018ad4 	.word	0x08018ad4

080057f4 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80057f4:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d101      	bne.n	80057fe <flashsizeCommand+0xa>
 80057fa:	b672      	cpsid	i
 80057fc:	e7fe      	b.n	80057fc <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <flashsizeCommand+0x18>)
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	4903      	ldr	r1, [pc, #12]	; (8005810 <flashsizeCommand+0x1c>)
 8005804:	f00d fd16 	bl	8013234 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005808:	2000      	movs	r0, #0
 800580a:	bd10      	pop	{r4, pc}
 800580c:	1ffff7cc 	.word	0x1ffff7cc
 8005810:	080184ac 	.word	0x080184ac

08005814 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005816:	46d6      	mov	lr, sl
 8005818:	4647      	mov	r7, r8
 800581a:	b580      	push	{r7, lr}
 800581c:	b085      	sub	sp, #20
 800581e:	0004      	movs	r4, r0
 8005820:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8005826:	4b62      	ldr	r3, [pc, #392]	; (80059b0 <testportCommand+0x19c>)
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	ab02      	add	r3, sp, #8
 800582c:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800582e:	2c00      	cmp	r4, #0
 8005830:	d101      	bne.n	8005836 <testportCommand+0x22>
 8005832:	b672      	cpsid	i
 8005834:	e7fe      	b.n	8005834 <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005836:	aa03      	add	r2, sp, #12
 8005838:	2101      	movs	r1, #1
 800583a:	f007 ffb5 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800583e:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8005840:	495c      	ldr	r1, [pc, #368]	; (80059b4 <testportCommand+0x1a0>)
 8005842:	f7fa fc5f 	bl	8000104 <strcmp>
 8005846:	2800      	cmp	r0, #0
 8005848:	d000      	beq.n	800584c <testportCommand+0x38>
 800584a:	e077      	b.n	800593c <testportCommand+0x128>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 800584c:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <testportCommand+0x1a4>)
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <testportCommand+0x1a8>)
 8005852:	189b      	adds	r3, r3, r2
 8005854:	3b01      	subs	r3, #1
 8005856:	781e      	ldrb	r6, [r3, #0]
 8005858:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 800585a:	4b57      	ldr	r3, [pc, #348]	; (80059b8 <testportCommand+0x1a4>)
 800585c:	4698      	mov	r8, r3
 800585e:	b2eb      	uxtb	r3, r5
 8005860:	469a      	mov	sl, r3
 8005862:	4643      	mov	r3, r8
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4553      	cmp	r3, sl
 8005868:	d108      	bne.n	800587c <testportCommand+0x68>
 800586a:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 800586c:	2d06      	cmp	r5, #6
 800586e:	d1f6      	bne.n	800585e <testportCommand+0x4a>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005870:	2000      	movs	r0, #0
 8005872:	b005      	add	sp, #20
 8005874:	bc0c      	pop	{r2, r3}
 8005876:	4690      	mov	r8, r2
 8005878:	469a      	mov	sl, r3
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WriteVaule[0]=rand();
 800587c:	f00d faf8 	bl	8012e70 <rand>
 8005880:	af02      	add	r7, sp, #8
 8005882:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005884:	2364      	movs	r3, #100	; 0x64
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	3b5a      	subs	r3, #90	; 0x5a
 800588a:	2201      	movs	r2, #1
 800588c:	0039      	movs	r1, r7
 800588e:	4650      	mov	r0, sl
 8005890:	f007 fd44 	bl	800d31c <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005894:	4650      	mov	r0, sl
 8005896:	f007 fd23 	bl	800d2e0 <GetUart>
 800589a:	6803      	ldr	r3, [r0, #0]
 800589c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 800589e:	783a      	ldrb	r2, [r7, #0]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d038      	beq.n	8005918 <testportCommand+0x104>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 80058a6:	002a      	movs	r2, r5
 80058a8:	4945      	ldr	r1, [pc, #276]	; (80059c0 <testportCommand+0x1ac>)
 80058aa:	0020      	movs	r0, r4
 80058ac:	f00d fcc2 	bl	8013234 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 80058b0:	0020      	movs	r0, r4
 80058b2:	f7fa fc31 	bl	8000118 <strlen>
 80058b6:	b282      	uxth	r2, r0
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <testportCommand+0x1a4>)
 80058ba:	7818      	ldrb	r0, [r3, #0]
 80058bc:	2364      	movs	r3, #100	; 0x64
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	3b5a      	subs	r3, #90	; 0x5a
 80058c2:	0021      	movs	r1, r4
 80058c4:	f007 fd2a 	bl	800d31c <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 80058c8:	2254      	movs	r2, #84	; 0x54
 80058ca:	493e      	ldr	r1, [pc, #248]	; (80059c4 <testportCommand+0x1b0>)
 80058cc:	0020      	movs	r0, r4
 80058ce:	f00d faae 	bl	8012e2e <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 80058d2:	0020      	movs	r0, r4
 80058d4:	f7fa fc20 	bl	8000118 <strlen>
 80058d8:	b282      	uxth	r2, r0
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <testportCommand+0x1a4>)
 80058dc:	7818      	ldrb	r0, [r3, #0]
 80058de:	2364      	movs	r3, #100	; 0x64
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	3b5a      	subs	r3, #90	; 0x5a
 80058e4:	0021      	movs	r1, r4
 80058e6:	f007 fd19 	bl	800d31c <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 80058ea:	3601      	adds	r6, #1
 80058ec:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <testportCommand+0x1a4>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	4a34      	ldr	r2, [pc, #208]	; (80059c8 <testportCommand+0x1b4>)
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	5d9b      	ldrb	r3, [r3, r6]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1b5      	bne.n	800586a <testportCommand+0x56>
 80058fe:	4692      	mov	sl, r2
 8005900:	4f2d      	ldr	r7, [pc, #180]	; (80059b8 <testportCommand+0x1a4>)
 8005902:	2001      	movs	r0, #1
 8005904:	f009 fe6e 	bl	800f5e4 <HAL_Delay>
 8005908:	783b      	ldrb	r3, [r7, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	4453      	add	r3, sl
 8005910:	5d9b      	ldrb	r3, [r3, r6]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f5      	beq.n	8005902 <testportCommand+0xee>
 8005916:	e7a8      	b.n	800586a <testportCommand+0x56>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8005918:	002a      	movs	r2, r5
 800591a:	492c      	ldr	r1, [pc, #176]	; (80059cc <testportCommand+0x1b8>)
 800591c:	0020      	movs	r0, r4
 800591e:	f00d fc89 	bl	8013234 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005922:	0020      	movs	r0, r4
 8005924:	f7fa fbf8 	bl	8000118 <strlen>
 8005928:	b282      	uxth	r2, r0
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <testportCommand+0x1a4>)
 800592c:	7818      	ldrb	r0, [r3, #0]
 800592e:	2364      	movs	r3, #100	; 0x64
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	3b5a      	subs	r3, #90	; 0x5a
 8005934:	0021      	movs	r1, r4
 8005936:	f007 fcf1 	bl	800d31c <writePxMutex>
 800593a:	e7c5      	b.n	80058c8 <testportCommand+0xb4>
	else if (pcParameterString1[0] == 'p') {
 800593c:	2300      	movs	r3, #0
 800593e:	56eb      	ldrsb	r3, [r5, r3]
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d005      	beq.n	8005950 <testportCommand+0x13c>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005944:	220f      	movs	r2, #15
 8005946:	4922      	ldr	r1, [pc, #136]	; (80059d0 <testportCommand+0x1bc>)
 8005948:	0020      	movs	r0, r4
 800594a:	f00d fa70 	bl	8012e2e <memcpy>
 800594e:	e78f      	b.n	8005870 <testportCommand+0x5c>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005950:	1c68      	adds	r0, r5, #1
 8005952:	f00c ffe2 	bl	801291a <atol>
 8005956:	0005      	movs	r5, r0
 8005958:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 800595a:	1e7b      	subs	r3, r7, #1
 800595c:	2b04      	cmp	r3, #4
 800595e:	d820      	bhi.n	80059a2 <testportCommand+0x18e>
        WriteVaule[0]=rand();
 8005960:	f00d fa86 	bl	8012e70 <rand>
 8005964:	ae02      	add	r6, sp, #8
 8005966:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005968:	2364      	movs	r3, #100	; 0x64
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	3b32      	subs	r3, #50	; 0x32
 800596e:	2201      	movs	r2, #1
 8005970:	0031      	movs	r1, r6
 8005972:	0038      	movs	r0, r7
 8005974:	f007 fcd2 	bl	800d31c <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005978:	0038      	movs	r0, r7
 800597a:	f007 fcb1 	bl	800d2e0 <GetUart>
 800597e:	6803      	ldr	r3, [r0, #0]
 8005980:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005982:	7832      	ldrb	r2, [r6, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	429a      	cmp	r2, r3
 8005988:	d105      	bne.n	8005996 <testportCommand+0x182>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 800598a:	b2ea      	uxtb	r2, r5
 800598c:	490f      	ldr	r1, [pc, #60]	; (80059cc <testportCommand+0x1b8>)
 800598e:	0020      	movs	r0, r4
 8005990:	f00d fc50 	bl	8013234 <sprintf>
 8005994:	e76c      	b.n	8005870 <testportCommand+0x5c>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005996:	b2ea      	uxtb	r2, r5
 8005998:	4909      	ldr	r1, [pc, #36]	; (80059c0 <testportCommand+0x1ac>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00d fc4a 	bl	8013234 <sprintf>
 80059a0:	e766      	b.n	8005870 <testportCommand+0x5c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 80059a2:	221b      	movs	r2, #27
 80059a4:	490b      	ldr	r1, [pc, #44]	; (80059d4 <testportCommand+0x1c0>)
 80059a6:	0020      	movs	r0, r4
 80059a8:	f00d fa41 	bl	8012e2e <memcpy>
	return pdFALSE;
 80059ac:	e760      	b.n	8005870 <testportCommand+0x5c>
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	08017630 	.word	0x08017630
 80059b4:	08017a0c 	.word	0x08017a0c
 80059b8:	20000a77 	.word	0x20000a77
 80059bc:	200013ac 	.word	0x200013ac
 80059c0:	08019c2c 	.word	0x08019c2c
 80059c4:	08019c40 	.word	0x08019c40
 80059c8:	2000126c 	.word	0x2000126c
 80059cc:	08019c10 	.word	0x08019c10
 80059d0:	08019c94 	.word	0x08019c94
 80059d4:	08019ca4 	.word	0x08019ca4

080059d8 <unbridgeCommand>:
{	
 80059d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059da:	b083      	sub	sp, #12
 80059dc:	0004      	movs	r4, r0
 80059de:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d101      	bne.n	80059ee <unbridgeCommand+0x16>
 80059ea:	b672      	cpsid	i
 80059ec:	e7fe      	b.n	80059ec <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80059ee:	aa01      	add	r2, sp, #4
 80059f0:	2101      	movs	r1, #1
 80059f2:	0028      	movs	r0, r5
 80059f4:	f007 fed8 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80059f8:	2300      	movs	r3, #0
 80059fa:	56c3      	ldrsb	r3, [r0, r3]
 80059fc:	2b70      	cmp	r3, #112	; 0x70
 80059fe:	d00e      	beq.n	8005a1e <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005a00:	466a      	mov	r2, sp
 8005a02:	2102      	movs	r1, #2
 8005a04:	0028      	movs	r0, r5
 8005a06:	f007 fecf 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	56c3      	ldrsb	r3, [r0, r3]
 8005a0e:	2b70      	cmp	r3, #112	; 0x70
 8005a10:	d01e      	beq.n	8005a50 <unbridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005a12:	220f      	movs	r2, #15
 8005a14:	491a      	ldr	r1, [pc, #104]	; (8005a80 <unbridgeCommand+0xa8>)
 8005a16:	0020      	movs	r0, r4
 8005a18:	f00d fa09 	bl	8012e2e <memcpy>
 8005a1c:	e015      	b.n	8005a4a <unbridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f00c ff7b 	bl	801291a <atol>
 8005a24:	0006      	movs	r6, r0
 8005a26:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005a28:	466a      	mov	r2, sp
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	0028      	movs	r0, r5
 8005a2e:	f007 febb 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005a32:	2300      	movs	r3, #0
 8005a34:	56c3      	ldrsb	r3, [r0, r3]
 8005a36:	2b70      	cmp	r3, #112	; 0x70
 8005a38:	d00e      	beq.n	8005a58 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005a3a:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8005a3c:	2867      	cmp	r0, #103	; 0x67
 8005a3e:	d0e8      	beq.n	8005a12 <unbridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005a40:	2219      	movs	r2, #25
 8005a42:	4910      	ldr	r1, [pc, #64]	; (8005a84 <unbridgeCommand+0xac>)
 8005a44:	0020      	movs	r0, r4
 8005a46:	f00d f9f2 	bl	8012e2e <memcpy>
}
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	b003      	add	sp, #12
 8005a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005a50:	3001      	adds	r0, #1
 8005a52:	f00c ff62 	bl	801291a <atol>
 8005a56:	e7dc      	b.n	8005a12 <unbridgeCommand+0x3a>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f00c ff5e 	bl	801291a <atol>
 8005a5e:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005a60:	b2c1      	uxtb	r1, r0
 8005a62:	0038      	movs	r0, r7
 8005a64:	f7fe ff6c 	bl	8004940 <Unbridge>
	if (result == BOS_OK) 
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d1e7      	bne.n	8005a3c <unbridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005a6c:	22ff      	movs	r2, #255	; 0xff
 8005a6e:	002b      	movs	r3, r5
 8005a70:	4013      	ands	r3, r2
 8005a72:	4032      	ands	r2, r6
 8005a74:	4904      	ldr	r1, [pc, #16]	; (8005a88 <unbridgeCommand+0xb0>)
 8005a76:	0020      	movs	r0, r4
 8005a78:	f00d fbdc 	bl	8013234 <sprintf>
 8005a7c:	e7e5      	b.n	8005a4a <unbridgeCommand+0x72>
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	08019c94 	.word	0x08019c94
 8005a84:	08019d5c 	.word	0x08019d5c
 8005a88:	08019d3c 	.word	0x08019d3c

08005a8c <bridgeCommand>:
{	
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	0004      	movs	r4, r0
 8005a92:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d101      	bne.n	8005aa2 <bridgeCommand+0x16>
 8005a9e:	b672      	cpsid	i
 8005aa0:	e7fe      	b.n	8005aa0 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005aa2:	aa01      	add	r2, sp, #4
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	0028      	movs	r0, r5
 8005aa8:	f007 fe7e 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005aac:	2300      	movs	r3, #0
 8005aae:	56c3      	ldrsb	r3, [r0, r3]
 8005ab0:	2b70      	cmp	r3, #112	; 0x70
 8005ab2:	d00e      	beq.n	8005ad2 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005ab4:	466a      	mov	r2, sp
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f007 fe75 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005abe:	2300      	movs	r3, #0
 8005ac0:	56c3      	ldrsb	r3, [r0, r3]
 8005ac2:	2b70      	cmp	r3, #112	; 0x70
 8005ac4:	d01e      	beq.n	8005b04 <bridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	491a      	ldr	r1, [pc, #104]	; (8005b34 <bridgeCommand+0xa8>)
 8005aca:	0020      	movs	r0, r4
 8005acc:	f00d f9af 	bl	8012e2e <memcpy>
 8005ad0:	e015      	b.n	8005afe <bridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f00c ff21 	bl	801291a <atol>
 8005ad8:	0006      	movs	r6, r0
 8005ada:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005adc:	466a      	mov	r2, sp
 8005ade:	2102      	movs	r1, #2
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	f007 fe61 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	56c3      	ldrsb	r3, [r0, r3]
 8005aea:	2b70      	cmp	r3, #112	; 0x70
 8005aec:	d00e      	beq.n	8005b0c <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005aee:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8005af0:	2867      	cmp	r0, #103	; 0x67
 8005af2:	d0e8      	beq.n	8005ac6 <bridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005af4:	2217      	movs	r2, #23
 8005af6:	4910      	ldr	r1, [pc, #64]	; (8005b38 <bridgeCommand+0xac>)
 8005af8:	0020      	movs	r0, r4
 8005afa:	f00d f998 	bl	8012e2e <memcpy>
}
 8005afe:	2000      	movs	r0, #0
 8005b00:	b003      	add	sp, #12
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005b04:	3001      	adds	r0, #1
 8005b06:	f00c ff08 	bl	801291a <atol>
 8005b0a:	e7dc      	b.n	8005ac6 <bridgeCommand+0x3a>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f00c ff04 	bl	801291a <atol>
 8005b12:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005b14:	b2c1      	uxtb	r1, r0
 8005b16:	0038      	movs	r0, r7
 8005b18:	f7fe fefe 	bl	8004918 <Bridge>
	if (result == BOS_OK) 
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1e7      	bne.n	8005af0 <bridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	002b      	movs	r3, r5
 8005b24:	4013      	ands	r3, r2
 8005b26:	4032      	ands	r2, r6
 8005b28:	4904      	ldr	r1, [pc, #16]	; (8005b3c <bridgeCommand+0xb0>)
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	f00d fb82 	bl	8013234 <sprintf>
 8005b30:	e7e5      	b.n	8005afe <bridgeCommand+0x72>
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	08019c94 	.word	0x08019c94
 8005b38:	08018348 	.word	0x08018348
 8005b3c:	08018324 	.word	0x08018324

08005b40 <delSnipCommand>:
{	
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b085      	sub	sp, #20
 8005b44:	0005      	movs	r5, r0
 8005b46:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d101      	bne.n	8005b54 <delSnipCommand+0x14>
 8005b50:	b672      	cpsid	i
 8005b52:	e7fe      	b.n	8005b52 <delSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005b54:	aa03      	add	r2, sp, #12
 8005b56:	2101      	movs	r1, #1
 8005b58:	f007 fe26 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005b5c:	f00c fed7 	bl	801290e <atoi>
 8005b60:	9001      	str	r0, [sp, #4]
 8005b62:	b2c6      	uxtb	r6, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	d003      	beq.n	8005b70 <delSnipCommand+0x30>
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <delSnipCommand+0xc8>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	42b3      	cmp	r3, r6
 8005b6e:	d207      	bcs.n	8005b80 <delSnipCommand+0x40>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005b70:	2223      	movs	r2, #35	; 0x23
 8005b72:	4926      	ldr	r1, [pc, #152]	; (8005c0c <delSnipCommand+0xcc>)
 8005b74:	0028      	movs	r0, r5
 8005b76:	f00d f95a 	bl	8012e2e <memcpy>
}
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	b005      	add	sp, #20
 8005b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index-1].cond.conditionType = 0;
 8005b80:	466b      	mov	r3, sp
 8005b82:	791a      	ldrb	r2, [r3, #4]
 8005b84:	3a01      	subs	r2, #1
 8005b86:	4822      	ldr	r0, [pc, #136]	; (8005c10 <delSnipCommand+0xd0>)
 8005b88:	2314      	movs	r3, #20
 8005b8a:	4353      	muls	r3, r2
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	541f      	strb	r7, [r3, r0]
		snippets[index-1].cond.mathOperator = 0;
 8005b90:	18c4      	adds	r4, r0, r3
 8005b92:	7067      	strb	r7, [r4, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005b94:	3302      	adds	r3, #2
 8005b96:	1818      	adds	r0, r3, r0
 8005b98:	2204      	movs	r2, #4
 8005b9a:	0039      	movs	r1, r7
 8005b9c:	f00d f950 	bl	8012e40 <memset>
		snippets[index-1].state = false;
 8005ba0:	7427      	strb	r7, [r4, #16]
		free(snippets[index-1].cmd);
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	f00c ff00 	bl	80129a8 <free>
		snippets[index-1].cmd = NULL;
 8005ba8:	60e7      	str	r7, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <delSnipCommand+0xc8>)
 8005bac:	781f      	ldrb	r7, [r3, #0]
 8005bae:	42be      	cmp	r6, r7
 8005bb0:	d213      	bcs.n	8005bda <delSnipCommand+0x9a>
 8005bb2:	466b      	mov	r3, sp
 8005bb4:	7919      	ldrb	r1, [r3, #4]
 8005bb6:	2214      	movs	r2, #20
 8005bb8:	0014      	movs	r4, r2
 8005bba:	434c      	muls	r4, r1
 8005bbc:	4814      	ldr	r0, [pc, #80]	; (8005c10 <delSnipCommand+0xd0>)
 8005bbe:	1824      	adds	r4, r4, r0
 8005bc0:	1e7b      	subs	r3, r7, #1
 8005bc2:	1b9b      	subs	r3, r3, r6
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	185b      	adds	r3, r3, r1
 8005bc8:	4353      	muls	r3, r2
 8005bca:	1880      	adds	r0, r0, r2
 8005bcc:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 8005bce:	7823      	ldrb	r3, [r4, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <delSnipCommand+0xb0>
 8005bd4:	3414      	adds	r4, #20
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005bd6:	42b4      	cmp	r4, r6
 8005bd8:	d1f9      	bne.n	8005bce <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005bda:	1e7b      	subs	r3, r7, #1
 8005bdc:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <delSnipCommand+0xc8>)
 8005bde:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005be0:	f005 f95a 	bl	800ae98 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005be4:	2236      	movs	r2, #54	; 0x36
 8005be6:	490b      	ldr	r1, [pc, #44]	; (8005c14 <delSnipCommand+0xd4>)
 8005be8:	0028      	movs	r0, r5
 8005bea:	f00d f920 	bl	8012e2e <memcpy>
 8005bee:	e7c4      	b.n	8005b7a <delSnipCommand+0x3a>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005bf0:	2214      	movs	r2, #20
 8005bf2:	0021      	movs	r1, r4
 8005bf4:	0020      	movs	r0, r4
 8005bf6:	3814      	subs	r0, #20
 8005bf8:	f00d f919 	bl	8012e2e <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005bfc:	2214      	movs	r2, #20
 8005bfe:	2100      	movs	r1, #0
 8005c00:	0020      	movs	r0, r4
 8005c02:	f00d f91d 	bl	8012e40 <memset>
 8005c06:	e7e5      	b.n	8005bd4 <delSnipCommand+0x94>
 8005c08:	200011bb 	.word	0x200011bb
 8005c0c:	08018468 	.word	0x08018468
 8005c10:	200068b4 	.word	0x200068b4
 8005c14:	08018430 	.word	0x08018430

08005c18 <pauseSnipCommand>:
{	
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	0004      	movs	r4, r0
 8005c1e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005c24:	2c00      	cmp	r4, #0
 8005c26:	d101      	bne.n	8005c2c <pauseSnipCommand+0x14>
 8005c28:	b672      	cpsid	i
 8005c2a:	e7fe      	b.n	8005c2a <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c2c:	aa01      	add	r2, sp, #4
 8005c2e:	2101      	movs	r1, #1
 8005c30:	f007 fdba 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005c34:	f00c fe6b 	bl	801290e <atoi>
 8005c38:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <pauseSnipCommand+0x2e>
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <pauseSnipCommand+0x60>)
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d207      	bcs.n	8005c56 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005c46:	2223      	movs	r2, #35	; 0x23
 8005c48:	490c      	ldr	r1, [pc, #48]	; (8005c7c <pauseSnipCommand+0x64>)
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	f00d f8ef 	bl	8012e2e <memcpy>
}
 8005c50:	2000      	movs	r0, #0
 8005c52:	b002      	add	sp, #8
 8005c54:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8005c56:	b2c0      	uxtb	r0, r0
 8005c58:	3801      	subs	r0, #1
 8005c5a:	2314      	movs	r3, #20
 8005c5c:	4343      	muls	r3, r0
 8005c5e:	4808      	ldr	r0, [pc, #32]	; (8005c80 <pauseSnipCommand+0x68>)
 8005c60:	18c0      	adds	r0, r0, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c66:	f005 f917 	bl	800ae98 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005c6a:	2235      	movs	r2, #53	; 0x35
 8005c6c:	4905      	ldr	r1, [pc, #20]	; (8005c84 <pauseSnipCommand+0x6c>)
 8005c6e:	0020      	movs	r0, r4
 8005c70:	f00d f8dd 	bl	8012e2e <memcpy>
 8005c74:	e7ec      	b.n	8005c50 <pauseSnipCommand+0x38>
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	200011bb 	.word	0x200011bb
 8005c7c:	08018468 	.word	0x08018468
 8005c80:	200068b4 	.word	0x200068b4
 8005c84:	08018878 	.word	0x08018878

08005c88 <actSnipCommand>:
{	
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	0004      	movs	r4, r0
 8005c8e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d101      	bne.n	8005c9c <actSnipCommand+0x14>
 8005c98:	b672      	cpsid	i
 8005c9a:	e7fe      	b.n	8005c9a <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c9c:	aa01      	add	r2, sp, #4
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	f007 fd82 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005ca4:	f00c fe33 	bl	801290e <atoi>
 8005ca8:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <actSnipCommand+0x2e>
 8005cae:	4a0e      	ldr	r2, [pc, #56]	; (8005ce8 <actSnipCommand+0x60>)
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d207      	bcs.n	8005cc6 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005cb6:	2223      	movs	r2, #35	; 0x23
 8005cb8:	490c      	ldr	r1, [pc, #48]	; (8005cec <actSnipCommand+0x64>)
 8005cba:	0020      	movs	r0, r4
 8005cbc:	f00d f8b7 	bl	8012e2e <memcpy>
}
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	b002      	add	sp, #8
 8005cc4:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8005cc6:	b2c0      	uxtb	r0, r0
 8005cc8:	3801      	subs	r0, #1
 8005cca:	2314      	movs	r3, #20
 8005ccc:	4343      	muls	r3, r0
 8005cce:	4808      	ldr	r0, [pc, #32]	; (8005cf0 <actSnipCommand+0x68>)
 8005cd0:	18c0      	adds	r0, r0, r3
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005cd6:	f005 f8df 	bl	800ae98 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005cda:	2238      	movs	r2, #56	; 0x38
 8005cdc:	4905      	ldr	r1, [pc, #20]	; (8005cf4 <actSnipCommand+0x6c>)
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f00d f8a5 	bl	8012e2e <memcpy>
 8005ce4:	e7ec      	b.n	8005cc0 <actSnipCommand+0x38>
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	200011bb 	.word	0x200011bb
 8005cec:	08018468 	.word	0x08018468
 8005cf0:	200068b4 	.word	0x200068b4
 8005cf4:	0801822c 	.word	0x0801822c

08005cf8 <snipCommand>:
{	
 8005cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfa:	46d6      	mov	lr, sl
 8005cfc:	464f      	mov	r7, r9
 8005cfe:	4646      	mov	r6, r8
 8005d00:	b5c0      	push	{r6, r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005d06:	aa06      	add	r2, sp, #24
 8005d08:	4b7a      	ldr	r3, [pc, #488]	; (8005ef4 <snipCommand+0x1fc>)
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005d0e:	c223      	stmia	r2!, {r0, r1, r5}
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005d14:	2c00      	cmp	r4, #0
 8005d16:	d101      	bne.n	8005d1c <snipCommand+0x24>
 8005d18:	b672      	cpsid	i
 8005d1a:	e7fe      	b.n	8005d1a <snipCommand+0x22>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005d1c:	4b76      	ldr	r3, [pc, #472]	; (8005ef8 <snipCommand+0x200>)
 8005d1e:	7818      	ldrb	r0, [r3, #0]
 8005d20:	2301      	movs	r3, #1
 8005d22:	425b      	negs	r3, r3
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	3333      	adds	r3, #51	; 0x33
 8005d28:	2237      	movs	r2, #55	; 0x37
 8005d2a:	4974      	ldr	r1, [pc, #464]	; (8005efc <snipCommand+0x204>)
 8005d2c:	f007 faf6 	bl	800d31c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <snipCommand+0x208>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d100      	bne.n	8005d3a <snipCommand+0x42>
 8005d38:	e0d0      	b.n	8005edc <snipCommand+0x1e4>
 8005d3a:	2500      	movs	r5, #0
		if (snippets[s].cond.conditionType)
 8005d3c:	4b71      	ldr	r3, [pc, #452]	; (8005f04 <snipCommand+0x20c>)
 8005d3e:	4698      	mov	r8, r3
 8005d40:	e0ba      	b.n	8005eb8 <snipCommand+0x1c0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005d42:	4b70      	ldr	r3, [pc, #448]	; (8005f04 <snipCommand+0x20c>)
 8005d44:	4699      	mov	r9, r3
 8005d46:	00ab      	lsls	r3, r5, #2
 8005d48:	469a      	mov	sl, r3
 8005d4a:	195b      	adds	r3, r3, r5
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	444b      	add	r3, r9
 8005d50:	7c1a      	ldrb	r2, [r3, #16]
 8005d52:	00d3      	lsls	r3, r2, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	aa06      	add	r2, sp, #24
 8005d58:	4694      	mov	ip, r2
 8005d5a:	4463      	add	r3, ip
 8005d5c:	003a      	movs	r2, r7
 8005d5e:	496a      	ldr	r1, [pc, #424]	; (8005f08 <snipCommand+0x210>)
 8005d60:	0020      	movs	r0, r4
 8005d62:	f00d fa67 	bl	8013234 <sprintf>
		switch (snippets[s].cond.conditionType)
 8005d66:	4653      	mov	r3, sl
 8005d68:	195b      	adds	r3, r3, r5
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	5c9b      	ldrb	r3, [r3, r2]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d02d      	beq.n	8005dd0 <snipCommand+0xd8>
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d000      	beq.n	8005d7a <snipCommand+0x82>
 8005d78:	e0a9      	b.n	8005ece <snipCommand+0x1d6>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d7a:	00a9      	lsls	r1, r5, #2
 8005d7c:	1949      	adds	r1, r1, r5
 8005d7e:	0089      	lsls	r1, r1, #2
 8005d80:	3106      	adds	r1, #6
 8005d82:	4b60      	ldr	r3, [pc, #384]	; (8005f04 <snipCommand+0x20c>)
 8005d84:	4699      	mov	r9, r3
 8005d86:	4449      	add	r1, r9
 8005d88:	2204      	movs	r2, #4
 8005d8a:	a805      	add	r0, sp, #20
 8005d8c:	f00d f84f 	bl	8012e2e <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005d90:	00ad      	lsls	r5, r5, #2
 8005d92:	19ad      	adds	r5, r5, r6
 8005d94:	00ad      	lsls	r5, r5, #2
 8005d96:	444d      	add	r5, r9
 8005d98:	78ea      	ldrb	r2, [r5, #3]
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	0053      	lsls	r3, r2, #1
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a5a      	ldr	r2, [pc, #360]	; (8005f0c <snipCommand+0x214>)
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4699      	mov	r9, r3
 8005daa:	9805      	ldr	r0, [sp, #20]
 8005dac:	f7fc fff0 	bl	8002d90 <__aeabi_f2d>
 8005db0:	9002      	str	r0, [sp, #8]
 8005db2:	9103      	str	r1, [sp, #12]
 8005db4:	786b      	ldrb	r3, [r5, #1]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	18d2      	adds	r2, r2, r3
 8005dbc:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <snipCommand+0x218>)
 8005dbe:	189b      	adds	r3, r3, r2
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	0022      	movs	r2, r4
 8005dc6:	4953      	ldr	r1, [pc, #332]	; (8005f14 <snipCommand+0x21c>)
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f00d fa33 	bl	8013234 <sprintf>
				break;
 8005dce:	e07e      	b.n	8005ece <snipCommand+0x1d6>
				switch (snippets[s].cond.buffer1[1])
 8005dd0:	00ab      	lsls	r3, r5, #2
 8005dd2:	195b      	adds	r3, r3, r5
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <snipCommand+0x20c>)
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	3b05      	subs	r3, #5
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	2a09      	cmp	r2, #9
 8005de2:	d874      	bhi.n	8005ece <snipCommand+0x1d6>
 8005de4:	0093      	lsls	r3, r2, #2
 8005de6:	4a4c      	ldr	r2, [pc, #304]	; (8005f18 <snipCommand+0x220>)
 8005de8:	58d3      	ldr	r3, [r2, r3]
 8005dea:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005dec:	2314      	movs	r3, #20
 8005dee:	436b      	muls	r3, r5
 8005df0:	4a44      	ldr	r2, [pc, #272]	; (8005f04 <snipCommand+0x20c>)
 8005df2:	18d2      	adds	r2, r2, r3
 8005df4:	7893      	ldrb	r3, [r2, #2]
 8005df6:	68d2      	ldr	r2, [r2, #12]
 8005df8:	9200      	str	r2, [sp, #0]
 8005dfa:	0022      	movs	r2, r4
 8005dfc:	4947      	ldr	r1, [pc, #284]	; (8005f1c <snipCommand+0x224>)
 8005dfe:	0020      	movs	r0, r4
 8005e00:	f00d fa18 	bl	8013234 <sprintf>
        		break;
 8005e04:	e063      	b.n	8005ece <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005e06:	2314      	movs	r3, #20
 8005e08:	436b      	muls	r3, r5
 8005e0a:	4a3e      	ldr	r2, [pc, #248]	; (8005f04 <snipCommand+0x20c>)
 8005e0c:	18d2      	adds	r2, r2, r3
 8005e0e:	7893      	ldrb	r3, [r2, #2]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	9200      	str	r2, [sp, #0]
 8005e14:	0022      	movs	r2, r4
 8005e16:	4942      	ldr	r1, [pc, #264]	; (8005f20 <snipCommand+0x228>)
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f00d fa0b 	bl	8013234 <sprintf>
        		break;
 8005e1e:	e056      	b.n	8005ece <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005e20:	2314      	movs	r3, #20
 8005e22:	436b      	muls	r3, r5
 8005e24:	4a37      	ldr	r2, [pc, #220]	; (8005f04 <snipCommand+0x20c>)
 8005e26:	18d2      	adds	r2, r2, r3
 8005e28:	7893      	ldrb	r3, [r2, #2]
 8005e2a:	68d1      	ldr	r1, [r2, #12]
 8005e2c:	9101      	str	r1, [sp, #4]
 8005e2e:	7912      	ldrb	r2, [r2, #4]
 8005e30:	9200      	str	r2, [sp, #0]
 8005e32:	0022      	movs	r2, r4
 8005e34:	493b      	ldr	r1, [pc, #236]	; (8005f24 <snipCommand+0x22c>)
 8005e36:	0020      	movs	r0, r4
 8005e38:	f00d f9fc 	bl	8013234 <sprintf>
        		break;
 8005e3c:	e047      	b.n	8005ece <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005e3e:	2314      	movs	r3, #20
 8005e40:	436b      	muls	r3, r5
 8005e42:	4a30      	ldr	r2, [pc, #192]	; (8005f04 <snipCommand+0x20c>)
 8005e44:	18d2      	adds	r2, r2, r3
 8005e46:	7893      	ldrb	r3, [r2, #2]
 8005e48:	68d1      	ldr	r1, [r2, #12]
 8005e4a:	9101      	str	r1, [sp, #4]
 8005e4c:	7912      	ldrb	r2, [r2, #4]
 8005e4e:	9200      	str	r2, [sp, #0]
 8005e50:	0022      	movs	r2, r4
 8005e52:	4935      	ldr	r1, [pc, #212]	; (8005f28 <snipCommand+0x230>)
 8005e54:	0020      	movs	r0, r4
 8005e56:	f00d f9ed 	bl	8013234 <sprintf>
        		break;						
 8005e5a:	e038      	b.n	8005ece <snipCommand+0x1d6>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005e5c:	4b33      	ldr	r3, [pc, #204]	; (8005f2c <snipCommand+0x234>)
 8005e5e:	0022      	movs	r2, r4
 8005e60:	4933      	ldr	r1, [pc, #204]	; (8005f30 <snipCommand+0x238>)
 8005e62:	0020      	movs	r0, r4
 8005e64:	f00d f9e6 	bl	8013234 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8005e68:	4830      	ldr	r0, [pc, #192]	; (8005f2c <snipCommand+0x234>)
 8005e6a:	f7fa f955 	bl	8000118 <strlen>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	2100      	movs	r1, #0
 8005e72:	482e      	ldr	r0, [pc, #184]	; (8005f2c <snipCommand+0x234>)
 8005e74:	f00c ffe4 	bl	8012e40 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005e78:	0029      	movs	r1, r5
 8005e7a:	68f0      	ldr	r0, [r6, #12]
 8005e7c:	f7ff fb60 	bl	8005540 <ParseSnippetCommand>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1eb      	bne.n	8005e5c <snipCommand+0x164>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8005e84:	0020      	movs	r0, r4
 8005e86:	f7fa f947 	bl	8000118 <strlen>
 8005e8a:	1820      	adds	r0, r4, r0
 8005e8c:	220c      	movs	r2, #12
 8005e8e:	4929      	ldr	r1, [pc, #164]	; (8005f34 <snipCommand+0x23c>)
 8005e90:	f00c ffcd 	bl	8012e2e <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005e94:	0020      	movs	r0, r4
 8005e96:	f7fa f93f 	bl	8000118 <strlen>
 8005e9a:	b282      	uxth	r2, r0
 8005e9c:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <snipCommand+0x200>)
 8005e9e:	7818      	ldrb	r0, [r3, #0]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	3333      	adds	r3, #51	; 0x33
 8005ea8:	0021      	movs	r1, r4
 8005eaa:	f007 fa37 	bl	800d31c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005eae:	003d      	movs	r5, r7
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <snipCommand+0x208>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	42bb      	cmp	r3, r7
 8005eb6:	d911      	bls.n	8005edc <snipCommand+0x1e4>
 8005eb8:	1c6f      	adds	r7, r5, #1
 8005eba:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8005ebc:	002e      	movs	r6, r5
 8005ebe:	00ab      	lsls	r3, r5, #2
 8005ec0:	195b      	adds	r3, r3, r5
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	5c9b      	ldrb	r3, [r3, r2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d000      	beq.n	8005ece <snipCommand+0x1d6>
 8005ecc:	e739      	b.n	8005d42 <snipCommand+0x4a>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005ece:	4d17      	ldr	r5, [pc, #92]	; (8005f2c <snipCommand+0x234>)
 8005ed0:	00b3      	lsls	r3, r6, #2
 8005ed2:	199b      	adds	r3, r3, r6
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4e0b      	ldr	r6, [pc, #44]	; (8005f04 <snipCommand+0x20c>)
 8005ed8:	18f6      	adds	r6, r6, r3
 8005eda:	e7cd      	b.n	8005e78 <snipCommand+0x180>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8005edc:	22a7      	movs	r2, #167	; 0xa7
 8005ede:	4916      	ldr	r1, [pc, #88]	; (8005f38 <snipCommand+0x240>)
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	f00c ffa4 	bl	8012e2e <memcpy>
}
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	b00a      	add	sp, #40	; 0x28
 8005eea:	bc1c      	pop	{r2, r3, r4}
 8005eec:	4690      	mov	r8, r2
 8005eee:	4699      	mov	r9, r3
 8005ef0:	46a2      	mov	sl, r4
 8005ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef4:	08017630 	.word	0x08017630
 8005ef8:	20000a77 	.word	0x20000a77
 8005efc:	08018d1c 	.word	0x08018d1c
 8005f00:	200011bb 	.word	0x200011bb
 8005f04:	200068b4 	.word	0x200068b4
 8005f08:	08018d54 	.word	0x08018d54
 8005f0c:	20000088 	.word	0x20000088
 8005f10:	0801883c 	.word	0x0801883c
 8005f14:	08018dc0 	.word	0x08018dc0
 8005f18:	080181e0 	.word	0x080181e0
 8005f1c:	08018d60 	.word	0x08018d60
 8005f20:	08018d74 	.word	0x08018d74
 8005f24:	08018d8c 	.word	0x08018d8c
 8005f28:	08018da4 	.word	0x08018da4
 8005f2c:	200011ec 	.word	0x200011ec
 8005f30:	08018dd0 	.word	0x08018dd0
 8005f34:	08018dd8 	.word	0x08018dd8
 8005f38:	08018de4 	.word	0x08018de4

08005f3c <idcodeCommand>:
{	
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005f40:	d101      	bne.n	8005f46 <idcodeCommand+0xa>
 8005f42:	b672      	cpsid	i
 8005f44:	e7fe      	b.n	8005f44 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 8005f46:	f009 fb61 	bl	800f60c <HAL_GetDEVID>
	switch (dev)
 8005f4a:	0403      	lsls	r3, r0, #16
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	4a1b      	ldr	r2, [pc, #108]	; (8005fbc <idcodeCommand+0x80>)
 8005f50:	4694      	mov	ip, r2
 8005f52:	4463      	add	r3, ip
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d82a      	bhi.n	8005fae <idcodeCommand+0x72>
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <idcodeCommand+0x84>)
 8005f5c:	58d3      	ldr	r3, [r2, r3]
 8005f5e:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <idcodeCommand+0x88>)
 8005f62:	4919      	ldr	r1, [pc, #100]	; (8005fc8 <idcodeCommand+0x8c>)
 8005f64:	0020      	movs	r0, r4
 8005f66:	f00d f965 	bl	8013234 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8005f6a:	f009 fb49 	bl	800f600 <HAL_GetREVID>
 8005f6e:	0b03      	lsrs	r3, r0, #12
 8005f70:	0022      	movs	r2, r4
 8005f72:	4916      	ldr	r1, [pc, #88]	; (8005fcc <idcodeCommand+0x90>)
 8005f74:	0020      	movs	r0, r4
 8005f76:	f00d f95d 	bl	8013234 <sprintf>
}
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 8005f7e:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <idcodeCommand+0x94>)
 8005f80:	4911      	ldr	r1, [pc, #68]	; (8005fc8 <idcodeCommand+0x8c>)
 8005f82:	0020      	movs	r0, r4
 8005f84:	f00d f956 	bl	8013234 <sprintf>
  		break;
 8005f88:	e7ef      	b.n	8005f6a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8005f8a:	4a12      	ldr	r2, [pc, #72]	; (8005fd4 <idcodeCommand+0x98>)
 8005f8c:	490e      	ldr	r1, [pc, #56]	; (8005fc8 <idcodeCommand+0x8c>)
 8005f8e:	0020      	movs	r0, r4
 8005f90:	f00d f950 	bl	8013234 <sprintf>
  		break;
 8005f94:	e7e9      	b.n	8005f6a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8005f96:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <idcodeCommand+0x9c>)
 8005f98:	490b      	ldr	r1, [pc, #44]	; (8005fc8 <idcodeCommand+0x8c>)
 8005f9a:	0020      	movs	r0, r4
 8005f9c:	f00d f94a 	bl	8013234 <sprintf>
  		break;
 8005fa0:	e7e3      	b.n	8005f6a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <idcodeCommand+0xa0>)
 8005fa4:	4908      	ldr	r1, [pc, #32]	; (8005fc8 <idcodeCommand+0x8c>)
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f00d f944 	bl	8013234 <sprintf>
  		break;
 8005fac:	e7dd      	b.n	8005f6a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8005fae:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <idcodeCommand+0xa4>)
 8005fb0:	4905      	ldr	r1, [pc, #20]	; (8005fc8 <idcodeCommand+0x8c>)
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	f00d f93e 	bl	8013234 <sprintf>
  		break;
 8005fb8:	e7d7      	b.n	8005f6a <idcodeCommand+0x2e>
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	fffffbc0 	.word	0xfffffbc0
 8005fc0:	08018208 	.word	0x08018208
 8005fc4:	08018738 	.word	0x08018738
 8005fc8:	08018744 	.word	0x08018744
 8005fcc:	08018790 	.word	0x08018790
 8005fd0:	08018758 	.word	0x08018758
 8005fd4:	08018764 	.word	0x08018764
 8005fd8:	08018770 	.word	0x08018770
 8005fdc:	0801877c 	.word	0x0801877c
 8005fe0:	08018788 	.word	0x08018788

08005fe4 <uuidCommand>:
{
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005fe8:	d101      	bne.n	8005fee <uuidCommand+0xa>
 8005fea:	b672      	cpsid	i
 8005fec:	e7fe      	b.n	8005fec <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8005fee:	220e      	movs	r2, #14
 8005ff0:	4911      	ldr	r1, [pc, #68]	; (8006038 <uuidCommand+0x54>)
 8005ff2:	f00c ff1c 	bl	8012e2e <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <uuidCommand+0x58>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4d11      	ldr	r5, [pc, #68]	; (8006040 <uuidCommand+0x5c>)
 8005ffc:	0022      	movs	r2, r4
 8005ffe:	0029      	movs	r1, r5
 8006000:	0020      	movs	r0, r4
 8006002:	f00d f917 	bl	8013234 <sprintf>
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <uuidCommand+0x60>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	0022      	movs	r2, r4
 800600c:	0029      	movs	r1, r5
 800600e:	0020      	movs	r0, r4
 8006010:	f00d f910 	bl	8013234 <sprintf>
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <uuidCommand+0x64>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	0022      	movs	r2, r4
 800601a:	0029      	movs	r1, r5
 800601c:	0020      	movs	r0, r4
 800601e:	f00d f909 	bl	8013234 <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8006022:	0020      	movs	r0, r4
 8006024:	f7fa f878 	bl	8000118 <strlen>
 8006028:	1820      	adds	r0, r4, r0
 800602a:	2203      	movs	r2, #3
 800602c:	4907      	ldr	r1, [pc, #28]	; (800604c <uuidCommand+0x68>)
 800602e:	f00c fefe 	bl	8012e2e <memcpy>
}
 8006032:	2000      	movs	r0, #0
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	08019d88 	.word	0x08019d88
 800603c:	1ffff7ac 	.word	0x1ffff7ac
 8006040:	08019d98 	.word	0x08019d98
 8006044:	1ffff7b0 	.word	0x1ffff7b0
 8006048:	1ffff7b4 	.word	0x1ffff7b4
 800604c:	0801a280 	.word	0x0801a280

08006050 <timeCommand>:
{
 8006050:	b510      	push	{r4, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006056:	d101      	bne.n	800605c <timeCommand+0xc>
 8006058:	b672      	cpsid	i
 800605a:	e7fe      	b.n	800605a <timeCommand+0xa>
	GetTimeDate();
 800605c:	f006 ff02 	bl	800ce64 <GetTimeDate>
	if (BOS.hourformat == 24)
 8006060:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <timeCommand+0x80>)
 8006062:	7b5b      	ldrb	r3, [r3, #13]
 8006064:	2b18      	cmp	r3, #24
 8006066:	d004      	beq.n	8006072 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d00e      	beq.n	800608a <timeCommand+0x3a>
}
 800606c:	2000      	movs	r0, #0
 800606e:	b004      	add	sp, #16
 8006070:	bd10      	pop	{r4, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8006072:	4917      	ldr	r1, [pc, #92]	; (80060d0 <timeCommand+0x80>)
 8006074:	7c4b      	ldrb	r3, [r1, #17]
 8006076:	7c8a      	ldrb	r2, [r1, #18]
 8006078:	89c8      	ldrh	r0, [r1, #14]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	7c09      	ldrb	r1, [r1, #16]
 800607e:	9100      	str	r1, [sp, #0]
 8006080:	4914      	ldr	r1, [pc, #80]	; (80060d4 <timeCommand+0x84>)
 8006082:	0020      	movs	r0, r4
 8006084:	f00d f8d6 	bl	8013234 <sprintf>
 8006088:	e7f0      	b.n	800606c <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <timeCommand+0x80>)
 800608c:	7cdb      	ldrb	r3, [r3, #19]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10d      	bne.n	80060ae <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8006092:	490f      	ldr	r1, [pc, #60]	; (80060d0 <timeCommand+0x80>)
 8006094:	7c4b      	ldrb	r3, [r1, #17]
 8006096:	7c8a      	ldrb	r2, [r1, #18]
 8006098:	480f      	ldr	r0, [pc, #60]	; (80060d8 <timeCommand+0x88>)
 800609a:	9002      	str	r0, [sp, #8]
 800609c:	89c8      	ldrh	r0, [r1, #14]
 800609e:	9001      	str	r0, [sp, #4]
 80060a0:	7c09      	ldrb	r1, [r1, #16]
 80060a2:	9100      	str	r1, [sp, #0]
 80060a4:	490d      	ldr	r1, [pc, #52]	; (80060dc <timeCommand+0x8c>)
 80060a6:	0020      	movs	r0, r4
 80060a8:	f00d f8c4 	bl	8013234 <sprintf>
 80060ac:	e7de      	b.n	800606c <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d1dc      	bne.n	800606c <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80060b2:	4907      	ldr	r1, [pc, #28]	; (80060d0 <timeCommand+0x80>)
 80060b4:	7c4b      	ldrb	r3, [r1, #17]
 80060b6:	7c8a      	ldrb	r2, [r1, #18]
 80060b8:	4809      	ldr	r0, [pc, #36]	; (80060e0 <timeCommand+0x90>)
 80060ba:	9002      	str	r0, [sp, #8]
 80060bc:	89c8      	ldrh	r0, [r1, #14]
 80060be:	9001      	str	r0, [sp, #4]
 80060c0:	7c09      	ldrb	r1, [r1, #16]
 80060c2:	9100      	str	r1, [sp, #0]
 80060c4:	4905      	ldr	r1, [pc, #20]	; (80060dc <timeCommand+0x8c>)
 80060c6:	0020      	movs	r0, r4
 80060c8:	f00d f8b4 	bl	8013234 <sprintf>
 80060cc:	e7ce      	b.n	800606c <timeCommand+0x1c>
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	20006898 	.word	0x20006898
 80060d4:	08019cd0 	.word	0x08019cd0
 80060d8:	08019d24 	.word	0x08019d24
 80060dc:	08019cf8 	.word	0x08019cf8
 80060e0:	08019d28 	.word	0x08019d28

080060e4 <dateCommand>:
{
 80060e4:	b510      	push	{r4, lr}
 80060e6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80060e8:	d101      	bne.n	80060ee <dateCommand+0xa>
 80060ea:	b672      	cpsid	i
 80060ec:	e7fe      	b.n	80060ec <dateCommand+0x8>
	GetTimeDate();
 80060ee:	f006 feb9 	bl	800ce64 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 80060f2:	f7fe fbef 	bl	80048d4 <GetDateString>
 80060f6:	0002      	movs	r2, r0
 80060f8:	4902      	ldr	r1, [pc, #8]	; (8006104 <dateCommand+0x20>)
 80060fa:	0020      	movs	r0, r4
 80060fc:	f00d f89a 	bl	8013234 <sprintf>
}
 8006100:	2000      	movs	r0, #0
 8006102:	bd10      	pop	{r4, pc}
 8006104:	08018370 	.word	0x08018370

08006108 <getCommand>:
{
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	46c6      	mov	lr, r8
 800610c:	b500      	push	{lr}
 800610e:	b082      	sub	sp, #8
 8006110:	0004      	movs	r4, r0
 8006112:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800611a:	2800      	cmp	r0, #0
 800611c:	d101      	bne.n	8006122 <getCommand+0x1a>
 800611e:	b672      	cpsid	i
 8006120:	e7fe      	b.n	8006120 <getCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006122:	aa01      	add	r2, sp, #4
 8006124:	2101      	movs	r1, #1
 8006126:	0030      	movs	r0, r6
 8006128:	f007 fb3e 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800612c:	0005      	movs	r5, r0
 800612e:	4b74      	ldr	r3, [pc, #464]	; (8006300 <getCommand+0x1f8>)
 8006130:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8006132:	2204      	movs	r2, #4
 8006134:	4973      	ldr	r1, [pc, #460]	; (8006304 <getCommand+0x1fc>)
 8006136:	f00d f8c1 	bl	80132bc <strncmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	d000      	beq.n	8006140 <getCommand+0x38>
 800613e:	e090      	b.n	8006262 <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8006140:	1d2f      	adds	r7, r5, #4
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	1f1e      	subs	r6, r3, #4
 8006146:	0032      	movs	r2, r6
 8006148:	496f      	ldr	r1, [pc, #444]	; (8006308 <getCommand+0x200>)
 800614a:	0038      	movs	r0, r7
 800614c:	f00d f8b6 	bl	80132bc <strncmp>
 8006150:	2800      	cmp	r0, #0
 8006152:	d11e      	bne.n	8006192 <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 8006154:	4b6d      	ldr	r3, [pc, #436]	; (800630c <getCommand+0x204>)
 8006156:	799b      	ldrb	r3, [r3, #6]
 8006158:	2b60      	cmp	r3, #96	; 0x60
 800615a:	d109      	bne.n	8006170 <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 800615c:	4a6c      	ldr	r2, [pc, #432]	; (8006310 <getCommand+0x208>)
 800615e:	496d      	ldr	r1, [pc, #436]	; (8006314 <getCommand+0x20c>)
 8006160:	0020      	movs	r0, r4
 8006162:	f00d f867 	bl	8013234 <sprintf>
}
 8006166:	2000      	movs	r0, #0
 8006168:	b002      	add	sp, #8
 800616a:	bc04      	pop	{r2}
 800616c:	4690      	mov	r8, r2
 800616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006170:	2b20      	cmp	r3, #32
 8006172:	d105      	bne.n	8006180 <getCommand+0x78>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006174:	4a68      	ldr	r2, [pc, #416]	; (8006318 <getCommand+0x210>)
 8006176:	4967      	ldr	r1, [pc, #412]	; (8006314 <getCommand+0x20c>)
 8006178:	0020      	movs	r0, r4
 800617a:	f00d f85b 	bl	8013234 <sprintf>
 800617e:	e7f2      	b.n	8006166 <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8006180:	2b00      	cmp	r3, #0
 8006182:	d000      	beq.n	8006186 <getCommand+0x7e>
 8006184:	e0b6      	b.n	80062f4 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <getCommand+0x214>)
 8006188:	4962      	ldr	r1, [pc, #392]	; (8006314 <getCommand+0x20c>)
 800618a:	0020      	movs	r0, r4
 800618c:	f00d f852 	bl	8013234 <sprintf>
 8006190:	e7e9      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8006192:	0032      	movs	r2, r6
 8006194:	4962      	ldr	r1, [pc, #392]	; (8006320 <getCommand+0x218>)
 8006196:	0038      	movs	r0, r7
 8006198:	f00d f890 	bl	80132bc <strncmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	d11a      	bne.n	80061d6 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80061a0:	4b5a      	ldr	r3, [pc, #360]	; (800630c <getCommand+0x204>)
 80061a2:	79db      	ldrb	r3, [r3, #7]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d105      	bne.n	80061b4 <getCommand+0xac>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80061a8:	4a59      	ldr	r2, [pc, #356]	; (8006310 <getCommand+0x208>)
 80061aa:	495a      	ldr	r1, [pc, #360]	; (8006314 <getCommand+0x20c>)
 80061ac:	0020      	movs	r0, r4
 80061ae:	f00d f841 	bl	8013234 <sprintf>
 80061b2:	e7d8      	b.n	8006166 <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <getCommand+0xbc>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80061b8:	4a57      	ldr	r2, [pc, #348]	; (8006318 <getCommand+0x210>)
 80061ba:	4956      	ldr	r1, [pc, #344]	; (8006314 <getCommand+0x20c>)
 80061bc:	0020      	movs	r0, r4
 80061be:	f00d f839 	bl	8013234 <sprintf>
 80061c2:	e7d0      	b.n	8006166 <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d000      	beq.n	80061ca <getCommand+0xc2>
 80061c8:	e094      	b.n	80062f4 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80061ca:	4a54      	ldr	r2, [pc, #336]	; (800631c <getCommand+0x214>)
 80061cc:	4951      	ldr	r1, [pc, #324]	; (8006314 <getCommand+0x20c>)
 80061ce:	0020      	movs	r0, r4
 80061d0:	f00d f830 	bl	8013234 <sprintf>
 80061d4:	e7c7      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 80061d6:	0032      	movs	r2, r6
 80061d8:	4952      	ldr	r1, [pc, #328]	; (8006324 <getCommand+0x21c>)
 80061da:	0038      	movs	r0, r7
 80061dc:	f00d f86e 	bl	80132bc <strncmp>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d106      	bne.n	80061f2 <getCommand+0xea>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 80061e4:	4b49      	ldr	r3, [pc, #292]	; (800630c <getCommand+0x204>)
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	494f      	ldr	r1, [pc, #316]	; (8006328 <getCommand+0x220>)
 80061ea:	0020      	movs	r0, r4
 80061ec:	f00d f822 	bl	8013234 <sprintf>
 80061f0:	e7b9      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80061f2:	0032      	movs	r2, r6
 80061f4:	494d      	ldr	r1, [pc, #308]	; (800632c <getCommand+0x224>)
 80061f6:	0038      	movs	r0, r7
 80061f8:	f00d f860 	bl	80132bc <strncmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d106      	bne.n	800620e <getCommand+0x106>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006200:	4b42      	ldr	r3, [pc, #264]	; (800630c <getCommand+0x204>)
 8006202:	881a      	ldrh	r2, [r3, #0]
 8006204:	4948      	ldr	r1, [pc, #288]	; (8006328 <getCommand+0x220>)
 8006206:	0020      	movs	r0, r4
 8006208:	f00d f814 	bl	8013234 <sprintf>
 800620c:	e7ab      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800620e:	0032      	movs	r2, r6
 8006210:	4947      	ldr	r1, [pc, #284]	; (8006330 <getCommand+0x228>)
 8006212:	0038      	movs	r0, r7
 8006214:	f00d f852 	bl	80132bc <strncmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	d106      	bne.n	800622a <getCommand+0x122>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 800621c:	4b3b      	ldr	r3, [pc, #236]	; (800630c <getCommand+0x204>)
 800621e:	885a      	ldrh	r2, [r3, #2]
 8006220:	4941      	ldr	r1, [pc, #260]	; (8006328 <getCommand+0x220>)
 8006222:	0020      	movs	r0, r4
 8006224:	f00d f806 	bl	8013234 <sprintf>
 8006228:	e79d      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 800622a:	0032      	movs	r2, r6
 800622c:	4941      	ldr	r1, [pc, #260]	; (8006334 <getCommand+0x22c>)
 800622e:	0038      	movs	r0, r7
 8006230:	f00d f844 	bl	80132bc <strncmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	d106      	bne.n	8006246 <getCommand+0x13e>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8006238:	4b34      	ldr	r3, [pc, #208]	; (800630c <getCommand+0x204>)
 800623a:	791a      	ldrb	r2, [r3, #4]
 800623c:	493a      	ldr	r1, [pc, #232]	; (8006328 <getCommand+0x220>)
 800623e:	0020      	movs	r0, r4
 8006240:	f00c fff8 	bl	8013234 <sprintf>
 8006244:	e78f      	b.n	8006166 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006246:	0032      	movs	r2, r6
 8006248:	493b      	ldr	r1, [pc, #236]	; (8006338 <getCommand+0x230>)
 800624a:	0038      	movs	r0, r7
 800624c:	f00d f836 	bl	80132bc <strncmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	d10d      	bne.n	8006270 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8006254:	4b2d      	ldr	r3, [pc, #180]	; (800630c <getCommand+0x204>)
 8006256:	795a      	ldrb	r2, [r3, #5]
 8006258:	4933      	ldr	r1, [pc, #204]	; (8006328 <getCommand+0x220>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00c ffea 	bl	8013234 <sprintf>
 8006260:	e781      	b.n	8006166 <getCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 8006262:	2205      	movs	r2, #5
 8006264:	4935      	ldr	r1, [pc, #212]	; (800633c <getCommand+0x234>)
 8006266:	0028      	movs	r0, r5
 8006268:	f00d f828 	bl	80132bc <strncmp>
 800626c:	2800      	cmp	r0, #0
 800626e:	d005      	beq.n	800627c <getCommand+0x174>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006270:	2213      	movs	r2, #19
 8006272:	4933      	ldr	r1, [pc, #204]	; (8006340 <getCommand+0x238>)
 8006274:	0020      	movs	r0, r4
 8006276:	f00c fdda 	bl	8012e2e <memcpy>
 800627a:	e774      	b.n	8006166 <getCommand+0x5e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800627c:	466a      	mov	r2, sp
 800627e:	2102      	movs	r1, #2
 8006280:	0030      	movs	r0, r6
 8006282:	f007 fa91 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006286:	0005      	movs	r5, r0
 8006288:	4f2e      	ldr	r7, [pc, #184]	; (8006344 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 800628a:	2600      	movs	r6, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 800628c:	0039      	movs	r1, r7
 800628e:	0028      	movs	r0, r5
 8006290:	f7f9 ff38 	bl	8000104 <strcmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	d011      	beq.n	80062bc <getCommand+0x1b4>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8006298:	3601      	adds	r6, #1
 800629a:	b2f6      	uxtb	r6, r6
 800629c:	370a      	adds	r7, #10
 800629e:	2e0a      	cmp	r6, #10
 80062a0:	d1f4      	bne.n	800628c <getCommand+0x184>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80062a2:	002a      	movs	r2, r5
 80062a4:	4928      	ldr	r1, [pc, #160]	; (8006348 <getCommand+0x240>)
 80062a6:	0020      	movs	r0, r4
 80062a8:	f00c ffc4 	bl	8013234 <sprintf>
			return pdFALSE;
 80062ac:	e75b      	b.n	8006166 <getCommand+0x5e>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 80062ae:	002b      	movs	r3, r5
 80062b0:	0022      	movs	r2, r4
 80062b2:	4926      	ldr	r1, [pc, #152]	; (800634c <getCommand+0x244>)
 80062b4:	0020      	movs	r0, r4
 80062b6:	f00c ffbd 	bl	8013234 <sprintf>
 80062ba:	e015      	b.n	80062e8 <getCommand+0x1e0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 80062bc:	002a      	movs	r2, r5
 80062be:	4924      	ldr	r1, [pc, #144]	; (8006350 <getCommand+0x248>)
 80062c0:	0020      	movs	r0, r4
 80062c2:	f00c ffb7 	bl	8013234 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <getCommand+0x24c>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d100      	bne.n	80062d0 <getCommand+0x1c8>
 80062ce:	e74a      	b.n	8006166 <getCommand+0x5e>
 80062d0:	2501      	movs	r5, #1
 80062d2:	002b      	movs	r3, r5
 80062d4:	40b3      	lsls	r3, r6
 80062d6:	4698      	mov	r8, r3
				if (InGroup(j, i))
 80062d8:	4f1f      	ldr	r7, [pc, #124]	; (8006358 <getCommand+0x250>)
			for(j=1 ; j<=N ; j++)						// N modules
 80062da:	4e1e      	ldr	r6, [pc, #120]	; (8006354 <getCommand+0x24c>)
				if (InGroup(j, i))
 80062dc:	1e6b      	subs	r3, r5, #1
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	5bdb      	ldrh	r3, [r3, r7]
 80062e2:	4642      	mov	r2, r8
 80062e4:	421a      	tst	r2, r3
 80062e6:	d1e2      	bne.n	80062ae <getCommand+0x1a6>
			for(j=1 ; j<=N ; j++)						// N modules
 80062e8:	3501      	adds	r5, #1
 80062ea:	b2ed      	uxtb	r5, r5
 80062ec:	7833      	ldrb	r3, [r6, #0]
 80062ee:	42ab      	cmp	r3, r5
 80062f0:	d2f4      	bcs.n	80062dc <getCommand+0x1d4>
 80062f2:	e738      	b.n	8006166 <getCommand+0x5e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 80062f4:	002a      	movs	r2, r5
 80062f6:	4919      	ldr	r1, [pc, #100]	; (800635c <getCommand+0x254>)
 80062f8:	0020      	movs	r0, r4
 80062fa:	f00c ff9b 	bl	8013234 <sprintf>
 80062fe:	e732      	b.n	8006166 <getCommand+0x5e>
 8006300:	20001230 	.word	0x20001230
 8006304:	080184dc 	.word	0x080184dc
 8006308:	080184e4 	.word	0x080184e4
 800630c:	20006898 	.word	0x20006898
 8006310:	08017a0c 	.word	0x08017a0c
 8006314:	08017864 	.word	0x08017864
 8006318:	080184f0 	.word	0x080184f0
 800631c:	080184f4 	.word	0x080184f4
 8006320:	080184fc 	.word	0x080184fc
 8006324:	08018504 	.word	0x08018504
 8006328:	08017e8c 	.word	0x08017e8c
 800632c:	08018510 	.word	0x08018510
 8006330:	0801851c 	.word	0x0801851c
 8006334:	0801852c 	.word	0x0801852c
 8006338:	08018540 	.word	0x08018540
 800633c:	08018554 	.word	0x08018554
 8006340:	08018564 	.word	0x08018564
 8006344:	20000e0c 	.word	0x20000e0c
 8006348:	08018578 	.word	0x08018578
 800634c:	0801855c 	.word	0x0801855c
 8006350:	08018594 	.word	0x08018594
 8006354:	2000001c 	.word	0x2000001c
 8006358:	20000e70 	.word	0x20000e70
 800635c:	080185a8 	.word	0x080185a8

08006360 <defaultCommand>:
{
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	0004      	movs	r4, r0
 8006366:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800636c:	2c00      	cmp	r4, #0
 800636e:	d101      	bne.n	8006374 <defaultCommand+0x14>
 8006370:	b672      	cpsid	i
 8006372:	e7fe      	b.n	8006372 <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006374:	aa01      	add	r2, sp, #4
 8006376:	2101      	movs	r1, #1
 8006378:	f007 fa16 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800637c:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 800637e:	9e01      	ldr	r6, [sp, #4]
 8006380:	0032      	movs	r2, r6
 8006382:	491e      	ldr	r1, [pc, #120]	; (80063fc <defaultCommand+0x9c>)
 8006384:	f00c ff9a 	bl	80132bc <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d01e      	beq.n	80063ca <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 800638c:	0032      	movs	r2, r6
 800638e:	491c      	ldr	r1, [pc, #112]	; (8006400 <defaultCommand+0xa0>)
 8006390:	0028      	movs	r0, r5
 8006392:	f00c ff93 	bl	80132bc <strncmp>
 8006396:	2800      	cmp	r0, #0
 8006398:	d12a      	bne.n	80063f0 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2116      	movs	r1, #22
 800639e:	20ff      	movs	r0, #255	; 0xff
 80063a0:	f002 ff16 	bl	80091d0 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 80063a4:	4b17      	ldr	r3, [pc, #92]	; (8006404 <defaultCommand+0xa4>)
 80063a6:	2202      	movs	r2, #2
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	2064      	movs	r0, #100	; 0x64
 80063ac:	f007 f8e3 	bl	800d576 <osDelay>
		ClearEEportsDir();
 80063b0:	f7fc ff12 	bl	80031d8 <ClearEEportsDir>
		ClearROtopology();
 80063b4:	f004 fe78 	bl	800b0a8 <ClearROtopology>
		osDelay(100);
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	f007 f8dc 	bl	800d576 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	4911      	ldr	r1, [pc, #68]	; (8006408 <defaultCommand+0xa8>)
 80063c2:	0020      	movs	r0, r4
 80063c4:	f00c fd33 	bl	8012e2e <memcpy>
 80063c8:	e00f      	b.n	80063ea <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 80063ca:	4910      	ldr	r1, [pc, #64]	; (800640c <defaultCommand+0xac>)
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <defaultCommand+0xb0>)
 80063ce:	000a      	movs	r2, r1
 80063d0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80063d2:	c223      	stmia	r2!, {r0, r1, r5}
 80063d4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80063d6:	c223      	stmia	r2!, {r0, r1, r5}
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80063dc:	f7fd f9bc 	bl	8003758 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 80063e0:	2227      	movs	r2, #39	; 0x27
 80063e2:	490c      	ldr	r1, [pc, #48]	; (8006414 <defaultCommand+0xb4>)
 80063e4:	0020      	movs	r0, r4
 80063e6:	f00c fd22 	bl	8012e2e <memcpy>
}
 80063ea:	2000      	movs	r0, #0
 80063ec:	b002      	add	sp, #8
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80063f0:	220f      	movs	r2, #15
 80063f2:	4909      	ldr	r1, [pc, #36]	; (8006418 <defaultCommand+0xb8>)
 80063f4:	0020      	movs	r0, r4
 80063f6:	f00c fd1a 	bl	8012e2e <memcpy>
 80063fa:	e7f6      	b.n	80063ea <defaultCommand+0x8a>
 80063fc:	08018398 	.word	0x08018398
 8006400:	080183c8 	.word	0x080183c8
 8006404:	20000ea2 	.word	0x20000ea2
 8006408:	080183e0 	.word	0x080183e0
 800640c:	20006898 	.word	0x20006898
 8006410:	20000000 	.word	0x20000000
 8006414:	080183a0 	.word	0x080183a0
 8006418:	080183d0 	.word	0x080183d0

0800641c <setCommand>:
{
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641e:	46ce      	mov	lr, r9
 8006420:	4647      	mov	r7, r8
 8006422:	b580      	push	{r7, lr}
 8006424:	b08d      	sub	sp, #52	; 0x34
 8006426:	0005      	movs	r5, r0
 8006428:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	930b      	str	r3, [sp, #44]	; 0x2c
 800642e:	930a      	str	r3, [sp, #40]	; 0x28
 8006430:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8006432:	9308      	str	r3, [sp, #32]
 8006434:	9307      	str	r3, [sp, #28]
	configASSERT( pcWriteBuffer );
 8006436:	2800      	cmp	r0, #0
 8006438:	d101      	bne.n	800643e <setCommand+0x22>
 800643a:	b672      	cpsid	i
 800643c:	e7fe      	b.n	800643c <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800643e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006440:	2101      	movs	r1, #1
 8006442:	0020      	movs	r0, r4
 8006444:	f007 f9b0 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006448:	0006      	movs	r6, r0
 800644a:	4bb3      	ldr	r3, [pc, #716]	; (8006718 <setCommand+0x2fc>)
 800644c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800644e:	2204      	movs	r2, #4
 8006450:	49b2      	ldr	r1, [pc, #712]	; (800671c <setCommand+0x300>)
 8006452:	f00c ff33 	bl	80132bc <strncmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	d015      	beq.n	8006486 <setCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 800645a:	2204      	movs	r2, #4
 800645c:	49b0      	ldr	r1, [pc, #704]	; (8006720 <setCommand+0x304>)
 800645e:	0030      	movs	r0, r6
 8006460:	f00c ff2c 	bl	80132bc <strncmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	d100      	bne.n	800646a <setCommand+0x4e>
 8006468:	e180      	b.n	800676c <setCommand+0x350>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 800646a:	2204      	movs	r2, #4
 800646c:	49ad      	ldr	r1, [pc, #692]	; (8006724 <setCommand+0x308>)
 800646e:	0030      	movs	r0, r6
 8006470:	f00c ff24 	bl	80132bc <strncmp>
 8006474:	2800      	cmp	r0, #0
 8006476:	d100      	bne.n	800647a <setCommand+0x5e>
 8006478:	e1e6      	b.n	8006848 <setCommand+0x42c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800647a:	2213      	movs	r2, #19
 800647c:	49aa      	ldr	r1, [pc, #680]	; (8006728 <setCommand+0x30c>)
 800647e:	0028      	movs	r0, r5
 8006480:	f00c fcd5 	bl	8012e2e <memcpy>
 8006484:	e1d7      	b.n	8006836 <setCommand+0x41a>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006486:	aa0a      	add	r2, sp, #40	; 0x28
 8006488:	2102      	movs	r1, #2
 800648a:	0020      	movs	r0, r4
 800648c:	f007 f98c 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006490:	0004      	movs	r4, r0
 8006492:	4ba6      	ldr	r3, [pc, #664]	; (800672c <setCommand+0x310>)
 8006494:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8006496:	4ba0      	ldr	r3, [pc, #640]	; (8006718 <setCommand+0x2fc>)
 8006498:	681e      	ldr	r6, [r3, #0]
 800649a:	3604      	adds	r6, #4
 800649c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649e:	1f1f      	subs	r7, r3, #4
 80064a0:	003a      	movs	r2, r7
 80064a2:	49a3      	ldr	r1, [pc, #652]	; (8006730 <setCommand+0x314>)
 80064a4:	0030      	movs	r0, r6
 80064a6:	f00c ff09 	bl	80132bc <strncmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d153      	bne.n	8006556 <setCommand+0x13a>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80064ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064b0:	0032      	movs	r2, r6
 80064b2:	49a0      	ldr	r1, [pc, #640]	; (8006734 <setCommand+0x318>)
 80064b4:	0020      	movs	r0, r4
 80064b6:	f00c ff01 	bl	80132bc <strncmp>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d115      	bne.n	80064ea <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 80064be:	4b9e      	ldr	r3, [pc, #632]	; (8006738 <setCommand+0x31c>)
 80064c0:	2160      	movs	r1, #96	; 0x60
 80064c2:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80064c4:	79db      	ldrb	r3, [r3, #7]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	4319      	orrs	r1, r3
 80064ca:	308a      	adds	r0, #138	; 0x8a
 80064cc:	0040      	lsls	r0, r0, #1
 80064ce:	f001 f9d1 	bl	8007874 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80064d2:	4b91      	ldr	r3, [pc, #580]	; (8006718 <setCommand+0x2fc>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	2300      	movs	r3, #0
 80064d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064da:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80064dc:	4b93      	ldr	r3, [pc, #588]	; (800672c <setCommand+0x310>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4996      	ldr	r1, [pc, #600]	; (800673c <setCommand+0x320>)
 80064e2:	0028      	movs	r0, r5
 80064e4:	f00c fea6 	bl	8013234 <sprintf>
	return pdFALSE;
 80064e8:	e1a5      	b.n	8006836 <setCommand+0x41a>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 80064ea:	0032      	movs	r2, r6
 80064ec:	4994      	ldr	r1, [pc, #592]	; (8006740 <setCommand+0x324>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	f00c fee4 	bl	80132bc <strncmp>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d10a      	bne.n	800650e <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 80064f8:	4b8f      	ldr	r3, [pc, #572]	; (8006738 <setCommand+0x31c>)
 80064fa:	2120      	movs	r1, #32
 80064fc:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80064fe:	79db      	ldrb	r3, [r3, #7]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	4319      	orrs	r1, r3
 8006504:	308a      	adds	r0, #138	; 0x8a
 8006506:	0040      	lsls	r0, r0, #1
 8006508:	f001 f9b4 	bl	8007874 <EE_WriteVariable>
 800650c:	e7e1      	b.n	80064d2 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 800650e:	0032      	movs	r2, r6
 8006510:	498c      	ldr	r1, [pc, #560]	; (8006744 <setCommand+0x328>)
 8006512:	0020      	movs	r0, r4
 8006514:	f00c fed2 	bl	80132bc <strncmp>
 8006518:	2800      	cmp	r0, #0
 800651a:	d10a      	bne.n	8006532 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 800651c:	4b86      	ldr	r3, [pc, #536]	; (8006738 <setCommand+0x31c>)
 800651e:	2140      	movs	r1, #64	; 0x40
 8006520:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006522:	79db      	ldrb	r3, [r3, #7]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	4319      	orrs	r1, r3
 8006528:	308a      	adds	r0, #138	; 0x8a
 800652a:	0040      	lsls	r0, r0, #1
 800652c:	f001 f9a2 	bl	8007874 <EE_WriteVariable>
 8006530:	e7cf      	b.n	80064d2 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006532:	0032      	movs	r2, r6
 8006534:	4984      	ldr	r1, [pc, #528]	; (8006748 <setCommand+0x32c>)
 8006536:	0020      	movs	r0, r4
 8006538:	f00c fec0 	bl	80132bc <strncmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	d000      	beq.n	8006542 <setCommand+0x126>
 8006540:	e2a7      	b.n	8006a92 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006542:	4b7d      	ldr	r3, [pc, #500]	; (8006738 <setCommand+0x31c>)
 8006544:	2200      	movs	r2, #0
 8006546:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006548:	79d9      	ldrb	r1, [r3, #7]
 800654a:	0209      	lsls	r1, r1, #8
 800654c:	308a      	adds	r0, #138	; 0x8a
 800654e:	0040      	lsls	r0, r0, #1
 8006550:	f001 f990 	bl	8007874 <EE_WriteVariable>
 8006554:	e7bd      	b.n	80064d2 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8006556:	003a      	movs	r2, r7
 8006558:	497c      	ldr	r1, [pc, #496]	; (800674c <setCommand+0x330>)
 800655a:	0030      	movs	r0, r6
 800655c:	f00c feae 	bl	80132bc <strncmp>
 8006560:	2800      	cmp	r0, #0
 8006562:	d14a      	bne.n	80065fa <setCommand+0x1de>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006564:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006566:	0032      	movs	r2, r6
 8006568:	4972      	ldr	r1, [pc, #456]	; (8006734 <setCommand+0x318>)
 800656a:	0020      	movs	r0, r4
 800656c:	f00c fea6 	bl	80132bc <strncmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	d10b      	bne.n	800658c <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 8006574:	4b70      	ldr	r3, [pc, #448]	; (8006738 <setCommand+0x31c>)
 8006576:	2203      	movs	r2, #3
 8006578:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800657a:	799b      	ldrb	r3, [r3, #6]
 800657c:	21c0      	movs	r1, #192	; 0xc0
 800657e:	0089      	lsls	r1, r1, #2
 8006580:	4319      	orrs	r1, r3
 8006582:	308a      	adds	r0, #138	; 0x8a
 8006584:	0040      	lsls	r0, r0, #1
 8006586:	f001 f975 	bl	8007874 <EE_WriteVariable>
 800658a:	e7a2      	b.n	80064d2 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800658c:	0032      	movs	r2, r6
 800658e:	496c      	ldr	r1, [pc, #432]	; (8006740 <setCommand+0x324>)
 8006590:	0020      	movs	r0, r4
 8006592:	f00c fe93 	bl	80132bc <strncmp>
 8006596:	2800      	cmp	r0, #0
 8006598:	d10b      	bne.n	80065b2 <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 800659a:	4b67      	ldr	r3, [pc, #412]	; (8006738 <setCommand+0x31c>)
 800659c:	2201      	movs	r2, #1
 800659e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80065a0:	799b      	ldrb	r3, [r3, #6]
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	0049      	lsls	r1, r1, #1
 80065a6:	4319      	orrs	r1, r3
 80065a8:	308a      	adds	r0, #138	; 0x8a
 80065aa:	4090      	lsls	r0, r2
 80065ac:	f001 f962 	bl	8007874 <EE_WriteVariable>
 80065b0:	e78f      	b.n	80064d2 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 80065b2:	0032      	movs	r2, r6
 80065b4:	495e      	ldr	r1, [pc, #376]	; (8006730 <setCommand+0x314>)
 80065b6:	0020      	movs	r0, r4
 80065b8:	f00c fe80 	bl	80132bc <strncmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d10b      	bne.n	80065d8 <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 80065c0:	4b5d      	ldr	r3, [pc, #372]	; (8006738 <setCommand+0x31c>)
 80065c2:	2202      	movs	r2, #2
 80065c4:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80065c6:	799b      	ldrb	r3, [r3, #6]
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	0089      	lsls	r1, r1, #2
 80065cc:	4319      	orrs	r1, r3
 80065ce:	308a      	adds	r0, #138	; 0x8a
 80065d0:	0040      	lsls	r0, r0, #1
 80065d2:	f001 f94f 	bl	8007874 <EE_WriteVariable>
 80065d6:	e77c      	b.n	80064d2 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80065d8:	0032      	movs	r2, r6
 80065da:	495b      	ldr	r1, [pc, #364]	; (8006748 <setCommand+0x32c>)
 80065dc:	0020      	movs	r0, r4
 80065de:	f00c fe6d 	bl	80132bc <strncmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d000      	beq.n	80065e8 <setCommand+0x1cc>
 80065e6:	e254      	b.n	8006a92 <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 80065e8:	4b53      	ldr	r3, [pc, #332]	; (8006738 <setCommand+0x31c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80065ee:	7999      	ldrb	r1, [r3, #6]
 80065f0:	308a      	adds	r0, #138	; 0x8a
 80065f2:	0040      	lsls	r0, r0, #1
 80065f4:	f001 f93e 	bl	8007874 <EE_WriteVariable>
 80065f8:	e76b      	b.n	80064d2 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 80065fa:	003a      	movs	r2, r7
 80065fc:	4954      	ldr	r1, [pc, #336]	; (8006750 <setCommand+0x334>)
 80065fe:	0030      	movs	r0, r6
 8006600:	f00c fe5c 	bl	80132bc <strncmp>
 8006604:	2800      	cmp	r0, #0
 8006606:	d128      	bne.n	800665a <setCommand+0x23e>
			temp2 = atoi((const char *)pcParameterString2);
 8006608:	0020      	movs	r0, r4
 800660a:	f00c f980 	bl	801290e <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 800660e:	23e1      	movs	r3, #225	; 0xe1
 8006610:	031b      	lsls	r3, r3, #12
 8006612:	4298      	cmp	r0, r3
 8006614:	d900      	bls.n	8006618 <setCommand+0x1fc>
 8006616:	e23c      	b.n	8006a92 <setCommand+0x676>
				BOS.clibaudrate = temp2;
 8006618:	4c47      	ldr	r4, [pc, #284]	; (8006738 <setCommand+0x31c>)
 800661a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 800661c:	b281      	uxth	r1, r0
 800661e:	208c      	movs	r0, #140	; 0x8c
 8006620:	0040      	lsls	r0, r0, #1
 8006622:	f001 f927 	bl	8007874 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8006626:	68a1      	ldr	r1, [r4, #8]
 8006628:	0c09      	lsrs	r1, r1, #16
 800662a:	201a      	movs	r0, #26
 800662c:	30ff      	adds	r0, #255	; 0xff
 800662e:	f001 f921 	bl	8007874 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006632:	4b39      	ldr	r3, [pc, #228]	; (8006718 <setCommand+0x2fc>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800663a:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <setCommand+0x310>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	493e      	ldr	r1, [pc, #248]	; (800673c <setCommand+0x320>)
 8006642:	0028      	movs	r0, r5
 8006644:	f00c fdf6 	bl	8013234 <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8006648:	4942      	ldr	r1, [pc, #264]	; (8006754 <setCommand+0x338>)
 800664a:	0028      	movs	r0, r5
 800664c:	f00c fe12 	bl	8013274 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8006650:	4941      	ldr	r1, [pc, #260]	; (8006758 <setCommand+0x33c>)
 8006652:	0028      	movs	r0, r5
 8006654:	f00c fe0e 	bl	8013274 <strcat>
 8006658:	e0ed      	b.n	8006836 <setCommand+0x41a>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800665a:	003a      	movs	r2, r7
 800665c:	493f      	ldr	r1, [pc, #252]	; (800675c <setCommand+0x340>)
 800665e:	0030      	movs	r0, r6
 8006660:	f00c fe2c 	bl	80132bc <strncmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	d10d      	bne.n	8006684 <setCommand+0x268>
			temp16 = atoi((const char *)pcParameterString2);
 8006668:	0020      	movs	r0, r4
 800666a:	f00c f950 	bl	801290e <atoi>
 800666e:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006670:	2900      	cmp	r1, #0
 8006672:	d100      	bne.n	8006676 <setCommand+0x25a>
 8006674:	e20d      	b.n	8006a92 <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 8006676:	4b30      	ldr	r3, [pc, #192]	; (8006738 <setCommand+0x31c>)
 8006678:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 800667a:	2016      	movs	r0, #22
 800667c:	30ff      	adds	r0, #255	; 0xff
 800667e:	f001 f8f9 	bl	8007874 <EE_WriteVariable>
 8006682:	e726      	b.n	80064d2 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006684:	003a      	movs	r2, r7
 8006686:	4936      	ldr	r1, [pc, #216]	; (8006760 <setCommand+0x344>)
 8006688:	0030      	movs	r0, r6
 800668a:	f00c fe17 	bl	80132bc <strncmp>
 800668e:	2800      	cmp	r0, #0
 8006690:	d10d      	bne.n	80066ae <setCommand+0x292>
			temp16 = atoi((const char *)pcParameterString2);
 8006692:	0020      	movs	r0, r4
 8006694:	f00c f93b 	bl	801290e <atoi>
 8006698:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 800669a:	2900      	cmp	r1, #0
 800669c:	d100      	bne.n	80066a0 <setCommand+0x284>
 800669e:	e1f8      	b.n	8006a92 <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <setCommand+0x31c>)
 80066a2:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 80066a4:	208b      	movs	r0, #139	; 0x8b
 80066a6:	0040      	lsls	r0, r0, #1
 80066a8:	f001 f8e4 	bl	8007874 <EE_WriteVariable>
 80066ac:	e711      	b.n	80064d2 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 80066ae:	003a      	movs	r2, r7
 80066b0:	492c      	ldr	r1, [pc, #176]	; (8006764 <setCommand+0x348>)
 80066b2:	0030      	movs	r0, r6
 80066b4:	f00c fe02 	bl	80132bc <strncmp>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d112      	bne.n	80066e2 <setCommand+0x2c6>
			temp16 = atoi((const char *)pcParameterString2);
 80066bc:	0020      	movs	r0, r4
 80066be:	f00c f926 	bl	801290e <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 80066c2:	1e43      	subs	r3, r0, #1
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2bfe      	cmp	r3, #254	; 0xfe
 80066c8:	d900      	bls.n	80066cc <setCommand+0x2b0>
 80066ca:	e1e2      	b.n	8006a92 <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 80066cc:	b2c0      	uxtb	r0, r0
 80066ce:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <setCommand+0x31c>)
 80066d0:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80066d2:	7959      	ldrb	r1, [r3, #5]
 80066d4:	0209      	lsls	r1, r1, #8
 80066d6:	4301      	orrs	r1, r0
 80066d8:	2018      	movs	r0, #24
 80066da:	30ff      	adds	r0, #255	; 0xff
 80066dc:	f001 f8ca 	bl	8007874 <EE_WriteVariable>
 80066e0:	e6f7      	b.n	80064d2 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80066e2:	003a      	movs	r2, r7
 80066e4:	4920      	ldr	r1, [pc, #128]	; (8006768 <setCommand+0x34c>)
 80066e6:	0030      	movs	r0, r6
 80066e8:	f00c fde8 	bl	80132bc <strncmp>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d000      	beq.n	80066f2 <setCommand+0x2d6>
 80066f0:	e6c3      	b.n	800647a <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 80066f2:	0020      	movs	r0, r4
 80066f4:	f00c f90b 	bl	801290e <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 80066f8:	1e43      	subs	r3, r0, #1
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2bfe      	cmp	r3, #254	; 0xfe
 80066fe:	d900      	bls.n	8006702 <setCommand+0x2e6>
 8006700:	e1c7      	b.n	8006a92 <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <setCommand+0x31c>)
 8006704:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006706:	0200      	lsls	r0, r0, #8
 8006708:	7919      	ldrb	r1, [r3, #4]
 800670a:	4301      	orrs	r1, r0
 800670c:	b289      	uxth	r1, r1
 800670e:	2018      	movs	r0, #24
 8006710:	30ff      	adds	r0, #255	; 0xff
 8006712:	f001 f8af 	bl	8007874 <EE_WriteVariable>
 8006716:	e6dc      	b.n	80064d2 <setCommand+0xb6>
 8006718:	2000122c 	.word	0x2000122c
 800671c:	080184dc 	.word	0x080184dc
 8006720:	08018c14 	.word	0x08018c14
 8006724:	08018c24 	.word	0x08018c24
 8006728:	08018564 	.word	0x08018564
 800672c:	20001238 	.word	0x20001238
 8006730:	080184e4 	.word	0x080184e4
 8006734:	08017a0c 	.word	0x08017a0c
 8006738:	20006898 	.word	0x20006898
 800673c:	08018b2c 	.word	0x08018b2c
 8006740:	08018b20 	.word	0x08018b20
 8006744:	08018b28 	.word	0x08018b28
 8006748:	080184f4 	.word	0x080184f4
 800674c:	080184fc 	.word	0x080184fc
 8006750:	08018504 	.word	0x08018504
 8006754:	08018b40 	.word	0x08018b40
 8006758:	08018b70 	.word	0x08018b70
 800675c:	08018510 	.word	0x08018510
 8006760:	0801851c 	.word	0x0801851c
 8006764:	0801852c 	.word	0x0801852c
 8006768:	08018540 	.word	0x08018540
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800676c:	aa0a      	add	r2, sp, #40	; 0x28
 800676e:	2102      	movs	r1, #2
 8006770:	0020      	movs	r0, r4
 8006772:	f007 f819 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006776:	4bca      	ldr	r3, [pc, #808]	; (8006aa0 <setCommand+0x684>)
 8006778:	4699      	mov	r9, r3
 800677a:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800677c:	aa09      	add	r2, sp, #36	; 0x24
 800677e:	2103      	movs	r1, #3
 8006780:	0020      	movs	r0, r4
 8006782:	f007 f811 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006786:	4fc7      	ldr	r7, [pc, #796]	; (8006aa4 <setCommand+0x688>)
 8006788:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800678a:	aa08      	add	r2, sp, #32
 800678c:	2104      	movs	r1, #4
 800678e:	0020      	movs	r0, r4
 8006790:	f007 f80a 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006794:	4ec4      	ldr	r6, [pc, #784]	; (8006aa8 <setCommand+0x68c>)
 8006796:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006798:	aa07      	add	r2, sp, #28
 800679a:	2105      	movs	r1, #5
 800679c:	0020      	movs	r0, r4
 800679e:	f007 f803 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 80067a2:	4cc2      	ldr	r4, [pc, #776]	; (8006aac <setCommand+0x690>)
 80067a4:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 80067a6:	464b      	mov	r3, r9
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f00c f8b0 	bl	801290e <atoi>
 80067ae:	b2c3      	uxtb	r3, r0
 80067b0:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 80067b2:	6838      	ldr	r0, [r7, #0]
 80067b4:	f00c f8ab 	bl	801290e <atoi>
 80067b8:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 80067ba:	6830      	ldr	r0, [r6, #0]
 80067bc:	f00c f8a7 	bl	801290e <atoi>
 80067c0:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 80067c2:	6824      	ldr	r4, [r4, #0]
 80067c4:	2c00      	cmp	r4, #0
 80067c6:	d010      	beq.n	80067ea <setCommand+0x3ce>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 80067c8:	2202      	movs	r2, #2
 80067ca:	49b9      	ldr	r1, [pc, #740]	; (8006ab0 <setCommand+0x694>)
 80067cc:	0020      	movs	r0, r4
 80067ce:	f00c fd75 	bl	80132bc <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d035      	beq.n	8006842 <setCommand+0x426>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 80067d6:	2202      	movs	r2, #2
 80067d8:	49b6      	ldr	r1, [pc, #728]	; (8006ab4 <setCommand+0x698>)
 80067da:	0020      	movs	r0, r4
 80067dc:	f00c fd6e 	bl	80132bc <strncmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d000      	beq.n	80067e6 <setCommand+0x3ca>
 80067e4:	e155      	b.n	8006a92 <setCommand+0x676>
				temp84 = RTC_PM;
 80067e6:	2302      	movs	r3, #2
 80067e8:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 80067ea:	464b      	mov	r3, r9
 80067ec:	2b17      	cmp	r3, #23
 80067ee:	d900      	bls.n	80067f2 <setCommand+0x3d6>
 80067f0:	e14f      	b.n	8006a92 <setCommand+0x676>
 80067f2:	2f3b      	cmp	r7, #59	; 0x3b
 80067f4:	d900      	bls.n	80067f8 <setCommand+0x3dc>
 80067f6:	e14c      	b.n	8006a92 <setCommand+0x676>
 80067f8:	2e3b      	cmp	r6, #59	; 0x3b
 80067fa:	d900      	bls.n	80067fe <setCommand+0x3e2>
 80067fc:	e149      	b.n	8006a92 <setCommand+0x676>
				GetTimeDate();				
 80067fe:	f006 fb31 	bl	800ce64 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8006802:	4cad      	ldr	r4, [pc, #692]	; (8006ab8 <setCommand+0x69c>)
 8006804:	7d23      	ldrb	r3, [r4, #20]
 8006806:	8b22      	ldrh	r2, [r4, #24]
 8006808:	7d61      	ldrb	r1, [r4, #21]
 800680a:	7da0      	ldrb	r0, [r4, #22]
 800680c:	7b24      	ldrb	r4, [r4, #12]
 800680e:	b264      	sxtb	r4, r4
 8006810:	9404      	str	r4, [sp, #16]
 8006812:	4644      	mov	r4, r8
 8006814:	9403      	str	r4, [sp, #12]
 8006816:	464c      	mov	r4, r9
 8006818:	9402      	str	r4, [sp, #8]
 800681a:	9701      	str	r7, [sp, #4]
 800681c:	9600      	str	r6, [sp, #0]
 800681e:	f006 fac7 	bl	800cdb0 <BOS_CalendarConfig>
 8006822:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8006824:	2e00      	cmp	r6, #0
 8006826:	d100      	bne.n	800682a <setCommand+0x40e>
 8006828:	e653      	b.n	80064d2 <setCommand+0xb6>
	else if (result == BOS_ERR_WrongParam)
 800682a:	2e67      	cmp	r6, #103	; 0x67
 800682c:	d100      	bne.n	8006830 <setCommand+0x414>
 800682e:	e624      	b.n	800647a <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8006830:	2e68      	cmp	r6, #104	; 0x68
 8006832:	d100      	bne.n	8006836 <setCommand+0x41a>
 8006834:	e12d      	b.n	8006a92 <setCommand+0x676>
}
 8006836:	2000      	movs	r0, #0
 8006838:	b00d      	add	sp, #52	; 0x34
 800683a:	bc0c      	pop	{r2, r3}
 800683c:	4690      	mov	r8, r2
 800683e:	4699      	mov	r9, r3
 8006840:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 8006842:	2301      	movs	r3, #1
 8006844:	4698      	mov	r8, r3
 8006846:	e7d0      	b.n	80067ea <setCommand+0x3ce>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006848:	aa0a      	add	r2, sp, #40	; 0x28
 800684a:	2102      	movs	r1, #2
 800684c:	0020      	movs	r0, r4
 800684e:	f006 ffab 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006852:	4e93      	ldr	r6, [pc, #588]	; (8006aa0 <setCommand+0x684>)
 8006854:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006856:	aa09      	add	r2, sp, #36	; 0x24
 8006858:	2103      	movs	r1, #3
 800685a:	0020      	movs	r0, r4
 800685c:	f006 ffa4 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006860:	4b90      	ldr	r3, [pc, #576]	; (8006aa4 <setCommand+0x688>)
 8006862:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006864:	aa08      	add	r2, sp, #32
 8006866:	2104      	movs	r1, #4
 8006868:	0020      	movs	r0, r4
 800686a:	f006 ff9d 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800686e:	4b8e      	ldr	r3, [pc, #568]	; (8006aa8 <setCommand+0x68c>)
 8006870:	4698      	mov	r8, r3
 8006872:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006874:	aa07      	add	r2, sp, #28
 8006876:	2105      	movs	r1, #5
 8006878:	0020      	movs	r0, r4
 800687a:	f006 ff95 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800687e:	4c8b      	ldr	r4, [pc, #556]	; (8006aac <setCommand+0x690>)
 8006880:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006882:	4643      	mov	r3, r8
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f00c f842 	bl	801290e <atoi>
 800688a:	b2c3      	uxtb	r3, r0
 800688c:	4698      	mov	r8, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	f00c f83d 	bl	801290e <atoi>
 8006894:	b283      	uxth	r3, r0
 8006896:	4699      	mov	r9, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006898:	6834      	ldr	r4, [r6, #0]
 800689a:	2206      	movs	r2, #6
 800689c:	4987      	ldr	r1, [pc, #540]	; (8006abc <setCommand+0x6a0>)
 800689e:	0020      	movs	r0, r4
 80068a0:	f00c fd0c 	bl	80132bc <strncmp>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d100      	bne.n	80068aa <setCommand+0x48e>
 80068a8:	e195      	b.n	8006bd6 <setCommand+0x7ba>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 80068aa:	2207      	movs	r2, #7
 80068ac:	4984      	ldr	r1, [pc, #528]	; (8006ac0 <setCommand+0x6a4>)
 80068ae:	0020      	movs	r0, r4
 80068b0:	f00c fd04 	bl	80132bc <strncmp>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d100      	bne.n	80068ba <setCommand+0x49e>
 80068b8:	e19b      	b.n	8006bf2 <setCommand+0x7d6>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 80068ba:	2209      	movs	r2, #9
 80068bc:	4981      	ldr	r1, [pc, #516]	; (8006ac4 <setCommand+0x6a8>)
 80068be:	0020      	movs	r0, r4
 80068c0:	f00c fcfc 	bl	80132bc <strncmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d100      	bne.n	80068ca <setCommand+0x4ae>
 80068c8:	e195      	b.n	8006bf6 <setCommand+0x7da>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 80068ca:	2208      	movs	r2, #8
 80068cc:	497e      	ldr	r1, [pc, #504]	; (8006ac8 <setCommand+0x6ac>)
 80068ce:	0020      	movs	r0, r4
 80068d0:	f00c fcf4 	bl	80132bc <strncmp>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d100      	bne.n	80068da <setCommand+0x4be>
 80068d8:	e18f      	b.n	8006bfa <setCommand+0x7de>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 80068da:	2206      	movs	r2, #6
 80068dc:	497b      	ldr	r1, [pc, #492]	; (8006acc <setCommand+0x6b0>)
 80068de:	0020      	movs	r0, r4
 80068e0:	f00c fcec 	bl	80132bc <strncmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d100      	bne.n	80068ea <setCommand+0x4ce>
 80068e8:	e189      	b.n	8006bfe <setCommand+0x7e2>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 80068ea:	2208      	movs	r2, #8
 80068ec:	4978      	ldr	r1, [pc, #480]	; (8006ad0 <setCommand+0x6b4>)
 80068ee:	0020      	movs	r0, r4
 80068f0:	f00c fce4 	bl	80132bc <strncmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d100      	bne.n	80068fa <setCommand+0x4de>
 80068f8:	e183      	b.n	8006c02 <setCommand+0x7e6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 80068fa:	2206      	movs	r2, #6
 80068fc:	4975      	ldr	r1, [pc, #468]	; (8006ad4 <setCommand+0x6b8>)
 80068fe:	0020      	movs	r0, r4
 8006900:	f00c fcdc 	bl	80132bc <strncmp>
 8006904:	2800      	cmp	r0, #0
 8006906:	d100      	bne.n	800690a <setCommand+0x4ee>
 8006908:	e17d      	b.n	8006c06 <setCommand+0x7ea>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800690a:	4b66      	ldr	r3, [pc, #408]	; (8006aa4 <setCommand+0x688>)
 800690c:	681c      	ldr	r4, [r3, #0]
 800690e:	2207      	movs	r2, #7
 8006910:	4971      	ldr	r1, [pc, #452]	; (8006ad8 <setCommand+0x6bc>)
 8006912:	0020      	movs	r0, r4
 8006914:	f00c fcd2 	bl	80132bc <strncmp>
			result = BOS_ERR_WrongValue;		
 8006918:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800691a:	2800      	cmp	r0, #0
 800691c:	d101      	bne.n	8006922 <setCommand+0x506>
			result = BOS_ERR_WrongValue;		
 800691e:	2668      	movs	r6, #104	; 0x68
 8006920:	e783      	b.n	800682a <setCommand+0x40e>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006922:	2202      	movs	r2, #2
 8006924:	496d      	ldr	r1, [pc, #436]	; (8006adc <setCommand+0x6c0>)
 8006926:	0020      	movs	r0, r4
 8006928:	f00c fcc8 	bl	80132bc <strncmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	d100      	bne.n	8006932 <setCommand+0x516>
 8006930:	e104      	b.n	8006b3c <setCommand+0x720>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006932:	2208      	movs	r2, #8
 8006934:	496a      	ldr	r1, [pc, #424]	; (8006ae0 <setCommand+0x6c4>)
 8006936:	0020      	movs	r0, r4
 8006938:	f00c fcc0 	bl	80132bc <strncmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	d100      	bne.n	8006942 <setCommand+0x526>
 8006940:	e11f      	b.n	8006b82 <setCommand+0x766>
 8006942:	2202      	movs	r2, #2
 8006944:	4967      	ldr	r1, [pc, #412]	; (8006ae4 <setCommand+0x6c8>)
 8006946:	0020      	movs	r0, r4
 8006948:	f00c fcb8 	bl	80132bc <strncmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	d100      	bne.n	8006952 <setCommand+0x536>
 8006950:	e119      	b.n	8006b86 <setCommand+0x76a>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006952:	2205      	movs	r2, #5
 8006954:	4964      	ldr	r1, [pc, #400]	; (8006ae8 <setCommand+0x6cc>)
 8006956:	0020      	movs	r0, r4
 8006958:	f00c fcb0 	bl	80132bc <strncmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	d100      	bne.n	8006962 <setCommand+0x546>
 8006960:	e113      	b.n	8006b8a <setCommand+0x76e>
 8006962:	2202      	movs	r2, #2
 8006964:	4961      	ldr	r1, [pc, #388]	; (8006aec <setCommand+0x6d0>)
 8006966:	0020      	movs	r0, r4
 8006968:	f00c fca8 	bl	80132bc <strncmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	d100      	bne.n	8006972 <setCommand+0x556>
 8006970:	e10d      	b.n	8006b8e <setCommand+0x772>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8006972:	2205      	movs	r2, #5
 8006974:	495e      	ldr	r1, [pc, #376]	; (8006af0 <setCommand+0x6d4>)
 8006976:	0020      	movs	r0, r4
 8006978:	f00c fca0 	bl	80132bc <strncmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	d100      	bne.n	8006982 <setCommand+0x566>
 8006980:	e107      	b.n	8006b92 <setCommand+0x776>
 8006982:	2202      	movs	r2, #2
 8006984:	495b      	ldr	r1, [pc, #364]	; (8006af4 <setCommand+0x6d8>)
 8006986:	0020      	movs	r0, r4
 8006988:	f00c fc98 	bl	80132bc <strncmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	d100      	bne.n	8006992 <setCommand+0x576>
 8006990:	e101      	b.n	8006b96 <setCommand+0x77a>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006992:	2203      	movs	r2, #3
 8006994:	4958      	ldr	r1, [pc, #352]	; (8006af8 <setCommand+0x6dc>)
 8006996:	0020      	movs	r0, r4
 8006998:	f00c fc90 	bl	80132bc <strncmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	d100      	bne.n	80069a2 <setCommand+0x586>
 80069a0:	e0fb      	b.n	8006b9a <setCommand+0x77e>
 80069a2:	2202      	movs	r2, #2
 80069a4:	4955      	ldr	r1, [pc, #340]	; (8006afc <setCommand+0x6e0>)
 80069a6:	0020      	movs	r0, r4
 80069a8:	f00c fc88 	bl	80132bc <strncmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d100      	bne.n	80069b2 <setCommand+0x596>
 80069b0:	e0f5      	b.n	8006b9e <setCommand+0x782>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 80069b2:	2204      	movs	r2, #4
 80069b4:	4952      	ldr	r1, [pc, #328]	; (8006b00 <setCommand+0x6e4>)
 80069b6:	0020      	movs	r0, r4
 80069b8:	f00c fc80 	bl	80132bc <strncmp>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d100      	bne.n	80069c2 <setCommand+0x5a6>
 80069c0:	e0ef      	b.n	8006ba2 <setCommand+0x786>
 80069c2:	2202      	movs	r2, #2
 80069c4:	494f      	ldr	r1, [pc, #316]	; (8006b04 <setCommand+0x6e8>)
 80069c6:	0020      	movs	r0, r4
 80069c8:	f00c fc78 	bl	80132bc <strncmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d100      	bne.n	80069d2 <setCommand+0x5b6>
 80069d0:	e0e9      	b.n	8006ba6 <setCommand+0x78a>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 80069d2:	2204      	movs	r2, #4
 80069d4:	494c      	ldr	r1, [pc, #304]	; (8006b08 <setCommand+0x6ec>)
 80069d6:	0020      	movs	r0, r4
 80069d8:	f00c fc70 	bl	80132bc <strncmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d100      	bne.n	80069e2 <setCommand+0x5c6>
 80069e0:	e0e3      	b.n	8006baa <setCommand+0x78e>
 80069e2:	2202      	movs	r2, #2
 80069e4:	4949      	ldr	r1, [pc, #292]	; (8006b0c <setCommand+0x6f0>)
 80069e6:	0020      	movs	r0, r4
 80069e8:	f00c fc68 	bl	80132bc <strncmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d100      	bne.n	80069f2 <setCommand+0x5d6>
 80069f0:	e0dd      	b.n	8006bae <setCommand+0x792>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 80069f2:	2205      	movs	r2, #5
 80069f4:	4946      	ldr	r1, [pc, #280]	; (8006b10 <setCommand+0x6f4>)
 80069f6:	0020      	movs	r0, r4
 80069f8:	f00c fc60 	bl	80132bc <strncmp>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d100      	bne.n	8006a02 <setCommand+0x5e6>
 8006a00:	e0d7      	b.n	8006bb2 <setCommand+0x796>
 8006a02:	2202      	movs	r2, #2
 8006a04:	4943      	ldr	r1, [pc, #268]	; (8006b14 <setCommand+0x6f8>)
 8006a06:	0020      	movs	r0, r4
 8006a08:	f00c fc58 	bl	80132bc <strncmp>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d100      	bne.n	8006a12 <setCommand+0x5f6>
 8006a10:	e0d1      	b.n	8006bb6 <setCommand+0x79a>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006a12:	2209      	movs	r2, #9
 8006a14:	4940      	ldr	r1, [pc, #256]	; (8006b18 <setCommand+0x6fc>)
 8006a16:	0020      	movs	r0, r4
 8006a18:	f00c fc50 	bl	80132bc <strncmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d100      	bne.n	8006a22 <setCommand+0x606>
 8006a20:	e0cb      	b.n	8006bba <setCommand+0x79e>
 8006a22:	2202      	movs	r2, #2
 8006a24:	493d      	ldr	r1, [pc, #244]	; (8006b1c <setCommand+0x700>)
 8006a26:	0020      	movs	r0, r4
 8006a28:	f00c fc48 	bl	80132bc <strncmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d100      	bne.n	8006a32 <setCommand+0x616>
 8006a30:	e0c5      	b.n	8006bbe <setCommand+0x7a2>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006a32:	2207      	movs	r2, #7
 8006a34:	493a      	ldr	r1, [pc, #232]	; (8006b20 <setCommand+0x704>)
 8006a36:	0020      	movs	r0, r4
 8006a38:	f00c fc40 	bl	80132bc <strncmp>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d100      	bne.n	8006a42 <setCommand+0x626>
 8006a40:	e0bf      	b.n	8006bc2 <setCommand+0x7a6>
 8006a42:	2202      	movs	r2, #2
 8006a44:	4937      	ldr	r1, [pc, #220]	; (8006b24 <setCommand+0x708>)
 8006a46:	0020      	movs	r0, r4
 8006a48:	f00c fc38 	bl	80132bc <strncmp>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d100      	bne.n	8006a52 <setCommand+0x636>
 8006a50:	e0b9      	b.n	8006bc6 <setCommand+0x7aa>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006a52:	2208      	movs	r2, #8
 8006a54:	4934      	ldr	r1, [pc, #208]	; (8006b28 <setCommand+0x70c>)
 8006a56:	0020      	movs	r0, r4
 8006a58:	f00c fc30 	bl	80132bc <strncmp>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d100      	bne.n	8006a62 <setCommand+0x646>
 8006a60:	e0b3      	b.n	8006bca <setCommand+0x7ae>
 8006a62:	2202      	movs	r2, #2
 8006a64:	4931      	ldr	r1, [pc, #196]	; (8006b2c <setCommand+0x710>)
 8006a66:	0020      	movs	r0, r4
 8006a68:	f00c fc28 	bl	80132bc <strncmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d100      	bne.n	8006a72 <setCommand+0x656>
 8006a70:	e0ad      	b.n	8006bce <setCommand+0x7b2>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006a72:	2208      	movs	r2, #8
 8006a74:	492e      	ldr	r1, [pc, #184]	; (8006b30 <setCommand+0x714>)
 8006a76:	0020      	movs	r0, r4
 8006a78:	f00c fc20 	bl	80132bc <strncmp>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d100      	bne.n	8006a82 <setCommand+0x666>
 8006a80:	e0a7      	b.n	8006bd2 <setCommand+0x7b6>
 8006a82:	2202      	movs	r2, #2
 8006a84:	492b      	ldr	r1, [pc, #172]	; (8006b34 <setCommand+0x718>)
 8006a86:	0020      	movs	r0, r4
 8006a88:	f00c fc18 	bl	80132bc <strncmp>
			temp82 = DECEMBER;
 8006a8c:	240c      	movs	r4, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d055      	beq.n	8006b3e <setCommand+0x722>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006a92:	220f      	movs	r2, #15
 8006a94:	4928      	ldr	r1, [pc, #160]	; (8006b38 <setCommand+0x71c>)
 8006a96:	0028      	movs	r0, r5
 8006a98:	f00c f9c9 	bl	8012e2e <memcpy>
 8006a9c:	e6cb      	b.n	8006836 <setCommand+0x41a>
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	20001238 	.word	0x20001238
 8006aa4:	20001240 	.word	0x20001240
 8006aa8:	20001244 	.word	0x20001244
 8006aac:	20001248 	.word	0x20001248
 8006ab0:	08018c1c 	.word	0x08018c1c
 8006ab4:	08018c20 	.word	0x08018c20
 8006ab8:	20006898 	.word	0x20006898
 8006abc:	08018c2c 	.word	0x08018c2c
 8006ac0:	08018c34 	.word	0x08018c34
 8006ac4:	08018c3c 	.word	0x08018c3c
 8006ac8:	08018c48 	.word	0x08018c48
 8006acc:	08018c54 	.word	0x08018c54
 8006ad0:	08018c5c 	.word	0x08018c5c
 8006ad4:	08018c68 	.word	0x08018c68
 8006ad8:	08018d04 	.word	0x08018d04
 8006adc:	08018c70 	.word	0x08018c70
 8006ae0:	08018c74 	.word	0x08018c74
 8006ae4:	08018c80 	.word	0x08018c80
 8006ae8:	08018c84 	.word	0x08018c84
 8006aec:	08018c8c 	.word	0x08018c8c
 8006af0:	08018c90 	.word	0x08018c90
 8006af4:	08018c98 	.word	0x08018c98
 8006af8:	08018c9c 	.word	0x08018c9c
 8006afc:	08018ca0 	.word	0x08018ca0
 8006b00:	08018ca4 	.word	0x08018ca4
 8006b04:	08018cac 	.word	0x08018cac
 8006b08:	08018cb0 	.word	0x08018cb0
 8006b0c:	08018cb8 	.word	0x08018cb8
 8006b10:	08018cbc 	.word	0x08018cbc
 8006b14:	08018cc4 	.word	0x08018cc4
 8006b18:	08018cc8 	.word	0x08018cc8
 8006b1c:	08018cd4 	.word	0x08018cd4
 8006b20:	08018cd8 	.word	0x08018cd8
 8006b24:	08018ce0 	.word	0x08018ce0
 8006b28:	08018ce4 	.word	0x08018ce4
 8006b2c:	08018cf0 	.word	0x08018cf0
 8006b30:	08018cf4 	.word	0x08018cf4
 8006b34:	08018d00 	.word	0x08018d00
 8006b38:	080183d0 	.word	0x080183d0
			temp82 = JANUARY;
 8006b3c:	2401      	movs	r4, #1
		if (result == BOS_OK) 
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d000      	beq.n	8006b44 <setCommand+0x728>
 8006b42:	e672      	b.n	800682a <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006b44:	4643      	mov	r3, r8
 8006b46:	3b01      	subs	r3, #1
 8006b48:	2b1e      	cmp	r3, #30
 8006b4a:	d8a2      	bhi.n	8006a92 <setCommand+0x676>
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <setCommand+0x7f0>)
 8006b4e:	444b      	add	r3, r9
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b64      	cmp	r3, #100	; 0x64
 8006b54:	d89d      	bhi.n	8006a92 <setCommand+0x676>
				GetTimeDate();
 8006b56:	f006 f985 	bl	800ce64 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006b5a:	4b2d      	ldr	r3, [pc, #180]	; (8006c10 <setCommand+0x7f4>)
 8006b5c:	220c      	movs	r2, #12
 8006b5e:	569a      	ldrsb	r2, [r3, r2]
 8006b60:	9204      	str	r2, [sp, #16]
 8006b62:	7cda      	ldrb	r2, [r3, #19]
 8006b64:	9203      	str	r2, [sp, #12]
 8006b66:	7c9a      	ldrb	r2, [r3, #18]
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	7c5a      	ldrb	r2, [r3, #17]
 8006b6c:	9201      	str	r2, [sp, #4]
 8006b6e:	7c1b      	ldrb	r3, [r3, #16]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	003b      	movs	r3, r7
 8006b74:	464a      	mov	r2, r9
 8006b76:	4641      	mov	r1, r8
 8006b78:	0020      	movs	r0, r4
 8006b7a:	f006 f919 	bl	800cdb0 <BOS_CalendarConfig>
 8006b7e:	0006      	movs	r6, r0
 8006b80:	e650      	b.n	8006824 <setCommand+0x408>
			temp82 = FEBRUARY;
 8006b82:	2402      	movs	r4, #2
 8006b84:	e7db      	b.n	8006b3e <setCommand+0x722>
 8006b86:	2402      	movs	r4, #2
 8006b88:	e7d9      	b.n	8006b3e <setCommand+0x722>
			temp82 = MARCH;
 8006b8a:	2403      	movs	r4, #3
 8006b8c:	e7d7      	b.n	8006b3e <setCommand+0x722>
 8006b8e:	2403      	movs	r4, #3
 8006b90:	e7d5      	b.n	8006b3e <setCommand+0x722>
			temp82 = APRIL;
 8006b92:	2404      	movs	r4, #4
 8006b94:	e7d3      	b.n	8006b3e <setCommand+0x722>
 8006b96:	2404      	movs	r4, #4
 8006b98:	e7d1      	b.n	8006b3e <setCommand+0x722>
			temp82 = MAY;
 8006b9a:	2405      	movs	r4, #5
 8006b9c:	e7cf      	b.n	8006b3e <setCommand+0x722>
 8006b9e:	2405      	movs	r4, #5
 8006ba0:	e7cd      	b.n	8006b3e <setCommand+0x722>
			temp82 = JUNE;
 8006ba2:	2406      	movs	r4, #6
 8006ba4:	e7cb      	b.n	8006b3e <setCommand+0x722>
 8006ba6:	2406      	movs	r4, #6
 8006ba8:	e7c9      	b.n	8006b3e <setCommand+0x722>
			temp82 = JULY;
 8006baa:	2407      	movs	r4, #7
 8006bac:	e7c7      	b.n	8006b3e <setCommand+0x722>
 8006bae:	2407      	movs	r4, #7
 8006bb0:	e7c5      	b.n	8006b3e <setCommand+0x722>
			temp82 = AUGUST;
 8006bb2:	2408      	movs	r4, #8
 8006bb4:	e7c3      	b.n	8006b3e <setCommand+0x722>
 8006bb6:	2408      	movs	r4, #8
 8006bb8:	e7c1      	b.n	8006b3e <setCommand+0x722>
			temp82 = SEPTEMBER;
 8006bba:	2409      	movs	r4, #9
 8006bbc:	e7bf      	b.n	8006b3e <setCommand+0x722>
 8006bbe:	2409      	movs	r4, #9
 8006bc0:	e7bd      	b.n	8006b3e <setCommand+0x722>
			temp82 = OCTOBER;
 8006bc2:	240a      	movs	r4, #10
 8006bc4:	e7bb      	b.n	8006b3e <setCommand+0x722>
 8006bc6:	240a      	movs	r4, #10
 8006bc8:	e7b9      	b.n	8006b3e <setCommand+0x722>
			temp82 = NOVEMBER;
 8006bca:	240b      	movs	r4, #11
 8006bcc:	e7b7      	b.n	8006b3e <setCommand+0x722>
 8006bce:	240b      	movs	r4, #11
 8006bd0:	e7b5      	b.n	8006b3e <setCommand+0x722>
			temp82 = DECEMBER;
 8006bd2:	240c      	movs	r4, #12
 8006bd4:	e7b3      	b.n	8006b3e <setCommand+0x722>
			temp81 = MONDAY;
 8006bd6:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <setCommand+0x7f8>)
 8006bda:	681c      	ldr	r4, [r3, #0]
 8006bdc:	2207      	movs	r2, #7
 8006bde:	490e      	ldr	r1, [pc, #56]	; (8006c18 <setCommand+0x7fc>)
 8006be0:	0020      	movs	r0, r4
 8006be2:	f00c fb6b 	bl	80132bc <strncmp>
 8006be6:	2600      	movs	r6, #0
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d000      	beq.n	8006bee <setCommand+0x7d2>
 8006bec:	e699      	b.n	8006922 <setCommand+0x506>
			temp82 = JANUARY;
 8006bee:	2401      	movs	r4, #1
 8006bf0:	e7a8      	b.n	8006b44 <setCommand+0x728>
			temp81 = TUESDAY;
 8006bf2:	2702      	movs	r7, #2
 8006bf4:	e7f0      	b.n	8006bd8 <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 8006bf6:	2703      	movs	r7, #3
 8006bf8:	e7ee      	b.n	8006bd8 <setCommand+0x7bc>
			temp81 = THURSDAY;
 8006bfa:	2704      	movs	r7, #4
 8006bfc:	e7ec      	b.n	8006bd8 <setCommand+0x7bc>
			temp81 = FRIDAY;
 8006bfe:	2705      	movs	r7, #5
 8006c00:	e7ea      	b.n	8006bd8 <setCommand+0x7bc>
			temp81 = SATURDAY;
 8006c02:	2706      	movs	r7, #6
 8006c04:	e7e8      	b.n	8006bd8 <setCommand+0x7bc>
			temp81 = SUNDAY;
 8006c06:	2707      	movs	r7, #7
 8006c08:	e7e6      	b.n	8006bd8 <setCommand+0x7bc>
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	fffff830 	.word	0xfffff830
 8006c10:	20006898 	.word	0x20006898
 8006c14:	20001240 	.word	0x20001240
 8006c18:	08018d04 	.word	0x08018d04

08006c1c <removebuttonCommand>:
{
 8006c1c:	b530      	push	{r4, r5, lr}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	0005      	movs	r5, r0
 8006c22:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006c24:	2300      	movs	r3, #0
 8006c26:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	d101      	bne.n	8006c30 <removebuttonCommand+0x14>
 8006c2c:	b672      	cpsid	i
 8006c2e:	e7fe      	b.n	8006c2e <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006c30:	aa01      	add	r2, sp, #4
 8006c32:	2101      	movs	r1, #1
 8006c34:	f006 fdb8 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006c38:	2300      	movs	r3, #0
 8006c3a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006c3c:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006c3e:	2b70      	cmp	r3, #112	; 0x70
 8006c40:	d007      	beq.n	8006c52 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006c42:	0020      	movs	r0, r4
 8006c44:	f001 fd98 	bl	8008778 <RemovePortButton>
	if (result == BOS_OK) 
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d007      	beq.n	8006c5c <removebuttonCommand+0x40>
}
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	b003      	add	sp, #12
 8006c50:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006c52:	3001      	adds	r0, #1
 8006c54:	f00b fe61 	bl	801291a <atol>
 8006c58:	b2c4      	uxtb	r4, r0
 8006c5a:	e7f2      	b.n	8006c42 <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006c5c:	0023      	movs	r3, r4
 8006c5e:	0022      	movs	r2, r4
 8006c60:	4902      	ldr	r1, [pc, #8]	; (8006c6c <removebuttonCommand+0x50>)
 8006c62:	0028      	movs	r0, r5
 8006c64:	f00c fae6 	bl	8013234 <sprintf>
 8006c68:	e7f0      	b.n	8006c4c <removebuttonCommand+0x30>
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	080189d0 	.word	0x080189d0

08006c70 <addbuttonCommand>:
{
 8006c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c72:	b087      	sub	sp, #28
 8006c74:	0006      	movs	r6, r0
 8006c76:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d101      	bne.n	8006c86 <addbuttonCommand+0x16>
 8006c82:	b672      	cpsid	i
 8006c84:	e7fe      	b.n	8006c84 <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006c86:	aa05      	add	r2, sp, #20
 8006c88:	2101      	movs	r1, #1
 8006c8a:	9803      	ldr	r0, [sp, #12]
 8006c8c:	f006 fd8c 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006c90:	0004      	movs	r4, r0
 8006c92:	4b23      	ldr	r3, [pc, #140]	; (8006d20 <addbuttonCommand+0xb0>)
 8006c94:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006c96:	9d05      	ldr	r5, [sp, #20]
 8006c98:	002a      	movs	r2, r5
 8006c9a:	4922      	ldr	r1, [pc, #136]	; (8006d24 <addbuttonCommand+0xb4>)
 8006c9c:	f00c fb0e 	bl	80132bc <strncmp>
		type = MOMENTARY_NO;
 8006ca0:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d017      	beq.n	8006cd6 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006ca6:	002a      	movs	r2, r5
 8006ca8:	491f      	ldr	r1, [pc, #124]	; (8006d28 <addbuttonCommand+0xb8>)
 8006caa:	0020      	movs	r0, r4
 8006cac:	f00c fb06 	bl	80132bc <strncmp>
		type = MOMENTARY_NC;
 8006cb0:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d00f      	beq.n	8006cd6 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006cb6:	002a      	movs	r2, r5
 8006cb8:	491c      	ldr	r1, [pc, #112]	; (8006d2c <addbuttonCommand+0xbc>)
 8006cba:	0020      	movs	r0, r4
 8006cbc:	f00c fafe 	bl	80132bc <strncmp>
		type = ONOFF_NO;
 8006cc0:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d007      	beq.n	8006cd6 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006cc6:	002a      	movs	r2, r5
 8006cc8:	4919      	ldr	r1, [pc, #100]	; (8006d30 <addbuttonCommand+0xc0>)
 8006cca:	0020      	movs	r0, r4
 8006ccc:	f00c faf6 	bl	80132bc <strncmp>
		type = ONOFF_NC;
 8006cd0:	4243      	negs	r3, r0
 8006cd2:	4158      	adcs	r0, r3
 8006cd4:	0087      	lsls	r7, r0, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006cd6:	aa04      	add	r2, sp, #16
 8006cd8:	2102      	movs	r1, #2
 8006cda:	9803      	ldr	r0, [sp, #12]
 8006cdc:	f006 fd64 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006ce4:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 8006ce6:	2b70      	cmp	r3, #112	; 0x70
 8006ce8:	d008      	beq.n	8006cfc <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8006cea:	0021      	movs	r1, r4
 8006cec:	0038      	movs	r0, r7
 8006cee:	f001 fcb1 	bl	8008654 <AddPortButton>
	if (result == BOS_OK) 
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d007      	beq.n	8006d06 <addbuttonCommand+0x96>
}
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	b007      	add	sp, #28
 8006cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f00b fe0c 	bl	801291a <atol>
 8006d02:	b2c4      	uxtb	r4, r0
 8006d04:	e7f1      	b.n	8006cea <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <addbuttonCommand+0xb0>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	9905      	ldr	r1, [sp, #20]
 8006d0e:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006d10:	9400      	str	r4, [sp, #0]
 8006d12:	0023      	movs	r3, r4
 8006d14:	4907      	ldr	r1, [pc, #28]	; (8006d34 <addbuttonCommand+0xc4>)
 8006d16:	0030      	movs	r0, r6
 8006d18:	f00c fa8c 	bl	8013234 <sprintf>
 8006d1c:	e7eb      	b.n	8006cf6 <addbuttonCommand+0x86>
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	20001228 	.word	0x20001228
 8006d24:	08018274 	.word	0x08018274
 8006d28:	08018284 	.word	0x08018284
 8006d2c:	08018294 	.word	0x08018294
 8006d30:	080182a0 	.word	0x080182a0
 8006d34:	080182ac 	.word	0x080182ac

08006d38 <scastCommand>:
{
 8006d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3a:	46de      	mov	lr, fp
 8006d3c:	4657      	mov	r7, sl
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b09b      	sub	sp, #108	; 0x6c
 8006d42:	0005      	movs	r5, r0
 8006d44:	9009      	str	r0, [sp, #36]	; 0x24
 8006d46:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9319      	str	r3, [sp, #100]	; 0x64
 8006d4c:	9318      	str	r3, [sp, #96]	; 0x60
 8006d4e:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006d50:	9316      	str	r3, [sp, #88]	; 0x58
 8006d52:	9315      	str	r3, [sp, #84]	; 0x54
 8006d54:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8006d56:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006d58:	220a      	movs	r2, #10
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	a810      	add	r0, sp, #64	; 0x40
 8006d5e:	f00c f86f 	bl	8012e40 <memset>
 8006d62:	220a      	movs	r2, #10
 8006d64:	2100      	movs	r1, #0
 8006d66:	a80d      	add	r0, sp, #52	; 0x34
 8006d68:	f00c f86a 	bl	8012e40 <memset>
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	2100      	movs	r1, #0
 8006d70:	a80a      	add	r0, sp, #40	; 0x28
 8006d72:	f00c f865 	bl	8012e40 <memset>
	configASSERT( pcWriteBuffer );
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	d101      	bne.n	8006d7e <scastCommand+0x46>
 8006d7a:	b672      	cpsid	i
 8006d7c:	e7fe      	b.n	8006d7c <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006d7e:	aa19      	add	r2, sp, #100	; 0x64
 8006d80:	2101      	movs	r1, #1
 8006d82:	0020      	movs	r0, r4
 8006d84:	f006 fd10 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006d88:	2300      	movs	r3, #0
 8006d8a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d100      	bne.n	8006d96 <scastCommand+0x5e>
 8006d94:	e06d      	b.n	8006e72 <scastCommand+0x13a>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006d96:	aa18      	add	r2, sp, #96	; 0x60
 8006d98:	2102      	movs	r1, #2
 8006d9a:	0020      	movs	r0, r4
 8006d9c:	f006 fd04 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006da0:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006da2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006da4:	a810      	add	r0, sp, #64	; 0x40
 8006da6:	f00c fa9a 	bl	80132de <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006daa:	a810      	add	r0, sp, #64	; 0x40
 8006dac:	f7fd fb18 	bl	80043e0 <GetID>
 8006db0:	b2c3      	uxtb	r3, r0
 8006db2:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006db4:	aa17      	add	r2, sp, #92	; 0x5c
 8006db6:	2103      	movs	r1, #3
 8006db8:	0020      	movs	r0, r4
 8006dba:	f006 fcf5 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006dc2:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d05a      	beq.n	8006e7e <scastCommand+0x146>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006dc8:	aa16      	add	r2, sp, #88	; 0x58
 8006dca:	2104      	movs	r1, #4
 8006dcc:	0020      	movs	r0, r4
 8006dce:	f006 fceb 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006dd2:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006dd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006dd6:	a80d      	add	r0, sp, #52	; 0x34
 8006dd8:	f00c fa81 	bl	80132de <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006ddc:	a80d      	add	r0, sp, #52	; 0x34
 8006dde:	f7fd faff 	bl	80043e0 <GetID>
 8006de2:	b2c3      	uxtb	r3, r0
 8006de4:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006de6:	aa15      	add	r2, sp, #84	; 0x54
 8006de8:	2105      	movs	r1, #5
 8006dea:	0020      	movs	r0, r4
 8006dec:	f006 fcdc 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006df0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006df2:	0032      	movs	r2, r6
 8006df4:	492b      	ldr	r1, [pc, #172]	; (8006ea4 <scastCommand+0x16c>)
 8006df6:	9007      	str	r0, [sp, #28]
 8006df8:	f00c fa60 	bl	80132bc <strncmp>
		direction = FORWARD;
 8006dfc:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d00f      	beq.n	8006e22 <scastCommand+0xea>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006e02:	0032      	movs	r2, r6
 8006e04:	4928      	ldr	r1, [pc, #160]	; (8006ea8 <scastCommand+0x170>)
 8006e06:	9807      	ldr	r0, [sp, #28]
 8006e08:	f00c fa58 	bl	80132bc <strncmp>
		direction = BACKWARD;
 8006e0c:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d007      	beq.n	8006e22 <scastCommand+0xea>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006e12:	0032      	movs	r2, r6
 8006e14:	4925      	ldr	r1, [pc, #148]	; (8006eac <scastCommand+0x174>)
 8006e16:	9807      	ldr	r0, [sp, #28]
 8006e18:	f00c fa50 	bl	80132bc <strncmp>
		direction = BIDIRECTIONAL;
 8006e1c:	4243      	negs	r3, r0
 8006e1e:	4158      	adcs	r0, r3
 8006e20:	0045      	lsls	r5, r0, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006e22:	0032      	movs	r2, r6
 8006e24:	9907      	ldr	r1, [sp, #28]
 8006e26:	a80a      	add	r0, sp, #40	; 0x28
 8006e28:	f00c fa59 	bl	80132de <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8006e2c:	aa14      	add	r2, sp, #80	; 0x50
 8006e2e:	2106      	movs	r1, #6
 8006e30:	0020      	movs	r0, r4
 8006e32:	f006 fcb9 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006e36:	f00b fd70 	bl	801291a <atol>
 8006e3a:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8006e3c:	aa13      	add	r2, sp, #76	; 0x4c
 8006e3e:	2107      	movs	r1, #7
 8006e40:	0020      	movs	r0, r4
 8006e42:	f006 fcb1 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006e46:	f00b fd68 	bl	801291a <atol>
 8006e4a:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	9002      	str	r0, [sp, #8]
 8006e52:	9601      	str	r6, [sp, #4]
 8006e54:	9500      	str	r5, [sp, #0]
 8006e56:	465b      	mov	r3, fp
 8006e58:	003a      	movs	r2, r7
 8006e5a:	4651      	mov	r1, sl
 8006e5c:	9808      	ldr	r0, [sp, #32]
 8006e5e:	f002 f9dd 	bl	800921c <StartScastDMAStream>
	if (result == BOS_OK) 
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d010      	beq.n	8006e88 <scastCommand+0x150>
}
 8006e66:	2000      	movs	r0, #0
 8006e68:	b01b      	add	sp, #108	; 0x6c
 8006e6a:	bc0c      	pop	{r2, r3}
 8006e6c:	4692      	mov	sl, r2
 8006e6e:	469b      	mov	fp, r3
 8006e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006e72:	3001      	adds	r0, #1
 8006e74:	f00b fd51 	bl	801291a <atol>
 8006e78:	b2c3      	uxtb	r3, r0
 8006e7a:	9308      	str	r3, [sp, #32]
 8006e7c:	e78b      	b.n	8006d96 <scastCommand+0x5e>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f00b fd4b 	bl	801291a <atol>
 8006e84:	b2c7      	uxtb	r7, r0
 8006e86:	e79f      	b.n	8006dc8 <scastCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8006e88:	9404      	str	r4, [sp, #16]
 8006e8a:	9603      	str	r6, [sp, #12]
 8006e8c:	ab0d      	add	r3, sp, #52	; 0x34
 8006e8e:	9302      	str	r3, [sp, #8]
 8006e90:	9701      	str	r7, [sp, #4]
 8006e92:	ab10      	add	r3, sp, #64	; 0x40
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	9b08      	ldr	r3, [sp, #32]
 8006e98:	aa0a      	add	r2, sp, #40	; 0x28
 8006e9a:	4905      	ldr	r1, [pc, #20]	; (8006eb0 <scastCommand+0x178>)
 8006e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e9e:	f00c f9c9 	bl	8013234 <sprintf>
 8006ea2:	e7e0      	b.n	8006e66 <scastCommand+0x12e>
 8006ea4:	08018a18 	.word	0x08018a18
 8006ea8:	08018a20 	.word	0x08018a20
 8006eac:	08018a2c 	.word	0x08018a2c
 8006eb0:	08018a3c 	.word	0x08018a3c

08006eb4 <infoCommand>:
{
 8006eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006eba:	d039      	beq.n	8006f30 <infoCommand+0x7c>
	if (N > 1)
 8006ebc:	4b26      	ldr	r3, [pc, #152]	; (8006f58 <infoCommand+0xa4>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8006ec0:	2500      	movs	r5, #0
	if (N > 1)
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d902      	bls.n	8006ecc <infoCommand+0x18>
		result = ReadPortsDir();
 8006ec6:	f7fd fbdf 	bl	8004688 <ReadPortsDir>
 8006eca:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006ecc:	4b22      	ldr	r3, [pc, #136]	; (8006f58 <infoCommand+0xa4>)
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	4922      	ldr	r1, [pc, #136]	; (8006f5c <infoCommand+0xa8>)
 8006ed2:	0020      	movs	r0, r4
 8006ed4:	f00c f9ae 	bl	8013234 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006ed8:	0020      	movs	r0, r4
 8006eda:	f7f9 f91d 	bl	8000118 <strlen>
 8006ede:	b282      	uxth	r2, r0
 8006ee0:	4e1f      	ldr	r6, [pc, #124]	; (8006f60 <infoCommand+0xac>)
 8006ee2:	7830      	ldrb	r0, [r6, #0]
 8006ee4:	2701      	movs	r7, #1
 8006ee6:	427f      	negs	r7, r7
 8006ee8:	9700      	str	r7, [sp, #0]
 8006eea:	2332      	movs	r3, #50	; 0x32
 8006eec:	0021      	movs	r1, r4
 8006eee:	f006 fa15 	bl	800d31c <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006ef2:	2213      	movs	r2, #19
 8006ef4:	491b      	ldr	r1, [pc, #108]	; (8006f64 <infoCommand+0xb0>)
 8006ef6:	0020      	movs	r0, r4
 8006ef8:	f00b ff99 	bl	8012e2e <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006efc:	0020      	movs	r0, r4
 8006efe:	f7f9 f90b 	bl	8000118 <strlen>
 8006f02:	b282      	uxth	r2, r0
 8006f04:	7830      	ldrb	r0, [r6, #0]
 8006f06:	9700      	str	r7, [sp, #0]
 8006f08:	2332      	movs	r3, #50	; 0x32
 8006f0a:	0021      	movs	r1, r4
 8006f0c:	f006 fa06 	bl	800d31c <writePxMutex>
	DisplayTopology(PcPort);
 8006f10:	7830      	ldrb	r0, [r6, #0]
 8006f12:	f7fc ffc1 	bl	8003e98 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006f16:	7830      	ldrb	r0, [r6, #0]
 8006f18:	f7fd f88e 	bl	8004038 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006f1c:	2d02      	cmp	r5, #2
 8006f1e:	d009      	beq.n	8006f34 <infoCommand+0x80>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006f20:	2202      	movs	r2, #2
 8006f22:	4911      	ldr	r1, [pc, #68]	; (8006f68 <infoCommand+0xb4>)
 8006f24:	0020      	movs	r0, r4
 8006f26:	f00b ff82 	bl	8012e2e <memcpy>
}
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006f30:	b672      	cpsid	i
 8006f32:	e7fe      	b.n	8006f32 <infoCommand+0x7e>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006f34:	2244      	movs	r2, #68	; 0x44
 8006f36:	490d      	ldr	r1, [pc, #52]	; (8006f6c <infoCommand+0xb8>)
 8006f38:	0020      	movs	r0, r4
 8006f3a:	f00b ff78 	bl	8012e2e <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006f3e:	0020      	movs	r0, r4
 8006f40:	f7f9 f8ea 	bl	8000118 <strlen>
 8006f44:	b282      	uxth	r2, r0
 8006f46:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <infoCommand+0xac>)
 8006f48:	7818      	ldrb	r0, [r3, #0]
 8006f4a:	003b      	movs	r3, r7
 8006f4c:	9700      	str	r7, [sp, #0]
 8006f4e:	3333      	adds	r3, #51	; 0x33
 8006f50:	0021      	movs	r1, r4
 8006f52:	f006 f9e3 	bl	800d31c <writePxMutex>
 8006f56:	e7e3      	b.n	8006f20 <infoCommand+0x6c>
 8006f58:	2000001c 	.word	0x2000001c
 8006f5c:	080187b8 	.word	0x080187b8
 8006f60:	20000a77 	.word	0x20000a77
 8006f64:	080187d4 	.word	0x080187d4
 8006f68:	08017884 	.word	0x08017884
 8006f6c:	080187e8 	.word	0x080187e8

08006f70 <statusCommand>:
{
 8006f70:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d101      	bne.n	8006f7a <statusCommand+0xa>
 8006f76:	b672      	cpsid	i
 8006f78:	e7fe      	b.n	8006f78 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f7fd f8d0 	bl	8004120 <DisplayModuleStatus>
}
 8006f80:	2000      	movs	r0, #0
 8006f82:	bd10      	pop	{r4, pc}

08006f84 <groupCommand>:
{
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f86:	46ce      	mov	lr, r9
 8006f88:	b500      	push	{lr}
 8006f8a:	b090      	sub	sp, #64	; 0x40
 8006f8c:	0004      	movs	r4, r0
 8006f8e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8006f90:	2227      	movs	r2, #39	; 0x27
 8006f92:	2100      	movs	r1, #0
 8006f94:	a806      	add	r0, sp, #24
 8006f96:	f00b ff53 	bl	8012e40 <memset>
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	a803      	add	r0, sp, #12
 8006fa0:	f00b ff4e 	bl	8012e40 <memset>
	configASSERT( pcWriteBuffer );
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	d101      	bne.n	8006fac <groupCommand+0x28>
 8006fa8:	b672      	cpsid	i
 8006faa:	e7fe      	b.n	8006faa <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006fac:	4d54      	ldr	r5, [pc, #336]	; (8007100 <groupCommand+0x17c>)
 8006fae:	002a      	movs	r2, r5
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	9801      	ldr	r0, [sp, #4]
 8006fb4:	f006 fbf8 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006fb8:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 8006fba:	682a      	ldr	r2, [r5, #0]
 8006fbc:	a803      	add	r0, sp, #12
 8006fbe:	f00c f98e 	bl	80132de <strncpy>
 8006fc2:	4d50      	ldr	r5, [pc, #320]	; (8007104 <groupCommand+0x180>)
 8006fc4:	002f      	movs	r7, r5
 8006fc6:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8006fc8:	0029      	movs	r1, r5
 8006fca:	a803      	add	r0, sp, #12
 8006fcc:	f7f9 f89a 	bl	8000104 <strcmp>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d016      	beq.n	8007002 <groupCommand+0x7e>
 8006fd4:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006fd6:	42bd      	cmp	r5, r7
 8006fd8:	d1f6      	bne.n	8006fc8 <groupCommand+0x44>
	type = 1;
 8006fda:	2701      	movs	r7, #1
	count = 2;
 8006fdc:	4b4a      	ldr	r3, [pc, #296]	; (8007108 <groupCommand+0x184>)
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8006fe2:	3208      	adds	r2, #8
 8006fe4:	4949      	ldr	r1, [pc, #292]	; (800710c <groupCommand+0x188>)
 8006fe6:	0020      	movs	r0, r4
 8006fe8:	f00b ff21 	bl	8012e2e <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 8006fec:	4a48      	ldr	r2, [pc, #288]	; (8007110 <groupCommand+0x18c>)
 8006fee:	2102      	movs	r1, #2
 8006ff0:	9801      	ldr	r0, [sp, #4]
 8006ff2:	f006 fbd9 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8006ff6:	4b47      	ldr	r3, [pc, #284]	; (8007114 <groupCommand+0x190>)
 8006ff8:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d061      	beq.n	80070c2 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006ffe:	4e44      	ldr	r6, [pc, #272]	; (8007110 <groupCommand+0x18c>)
 8007000:	e011      	b.n	8007026 <groupCommand+0xa2>
			type = 0; break;
 8007002:	2700      	movs	r7, #0
 8007004:	e7ea      	b.n	8006fdc <groupCommand+0x58>
		strcat( ( char * ) pcWriteBuffer, module);
 8007006:	a906      	add	r1, sp, #24
 8007008:	0020      	movs	r0, r4
 800700a:	f00c f933 	bl	8013274 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 800700e:	1c69      	adds	r1, r5, #1
 8007010:	b249      	sxtb	r1, r1
 8007012:	4b3d      	ldr	r3, [pc, #244]	; (8007108 <groupCommand+0x184>)
 8007014:	7019      	strb	r1, [r3, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <groupCommand+0x18c>)
 8007018:	9801      	ldr	r0, [sp, #4]
 800701a:	f006 fbc5 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800701e:	4b3d      	ldr	r3, [pc, #244]	; (8007114 <groupCommand+0x190>)
 8007020:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8007022:	2800      	cmp	r0, #0
 8007024:	d04d      	beq.n	80070c2 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8007026:	6833      	ldr	r3, [r6, #0]
 8007028:	4699      	mov	r9, r3
 800702a:	ad06      	add	r5, sp, #24
 800702c:	001a      	movs	r2, r3
 800702e:	0001      	movs	r1, r0
 8007030:	0028      	movs	r0, r5
 8007032:	f00c f954 	bl	80132de <strncpy>
 8007036:	2300      	movs	r3, #0
 8007038:	464a      	mov	r2, r9
 800703a:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 800703c:	0028      	movs	r0, r5
 800703e:	f7fd f9cf 	bl	80043e0 <GetID>
		if (modID < 0)	break;
 8007042:	2800      	cmp	r0, #0
 8007044:	db37      	blt.n	80070b6 <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 8007046:	b2c0      	uxtb	r0, r0
 8007048:	a903      	add	r1, sp, #12
 800704a:	f7fd fa95 	bl	8004578 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 800704e:	2800      	cmp	r0, #0
 8007050:	d146      	bne.n	80070e0 <groupCommand+0x15c>
		if (count > 2)
 8007052:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <groupCommand+0x184>)
 8007054:	2500      	movs	r5, #0
 8007056:	575d      	ldrsb	r5, [r3, r5]
 8007058:	2d02      	cmp	r5, #2
 800705a:	ddd4      	ble.n	8007006 <groupCommand+0x82>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 800705c:	0020      	movs	r0, r4
 800705e:	f7f9 f85b 	bl	8000118 <strlen>
 8007062:	1820      	adds	r0, r4, r0
 8007064:	2203      	movs	r2, #3
 8007066:	492c      	ldr	r1, [pc, #176]	; (8007118 <groupCommand+0x194>)
 8007068:	f00b fee1 	bl	8012e2e <memcpy>
 800706c:	e7cb      	b.n	8007006 <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 800706e:	2f00      	cmp	r7, #0
 8007070:	d009      	beq.n	8007086 <groupCommand+0x102>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8007072:	aa03      	add	r2, sp, #12
 8007074:	4929      	ldr	r1, [pc, #164]	; (800711c <groupCommand+0x198>)
 8007076:	a806      	add	r0, sp, #24
 8007078:	f00c f8dc 	bl	8013234 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800707c:	a906      	add	r1, sp, #24
 800707e:	0020      	movs	r0, r4
 8007080:	f00c f8f8 	bl	8013274 <strcat>
 8007084:	e027      	b.n	80070d6 <groupCommand+0x152>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8007086:	aa03      	add	r2, sp, #12
 8007088:	4925      	ldr	r1, [pc, #148]	; (8007120 <groupCommand+0x19c>)
 800708a:	a806      	add	r0, sp, #24
 800708c:	f00c f8d2 	bl	8013234 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8007090:	a906      	add	r1, sp, #24
 8007092:	0020      	movs	r0, r4
 8007094:	f00c f8ee 	bl	8013274 <strcat>
 8007098:	e01d      	b.n	80070d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 800709a:	aa03      	add	r2, sp, #12
 800709c:	4921      	ldr	r1, [pc, #132]	; (8007124 <groupCommand+0x1a0>)
 800709e:	0020      	movs	r0, r4
 80070a0:	f00c f8c8 	bl	8013234 <sprintf>
 80070a4:	e017      	b.n	80070d6 <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 80070a6:	2808      	cmp	r0, #8
 80070a8:	d115      	bne.n	80070d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80070aa:	aa03      	add	r2, sp, #12
 80070ac:	491e      	ldr	r1, [pc, #120]	; (8007128 <groupCommand+0x1a4>)
 80070ae:	0020      	movs	r0, r4
 80070b0:	f00c f8c0 	bl	8013234 <sprintf>
 80070b4:	e00f      	b.n	80070d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80070b6:	aa06      	add	r2, sp, #24
 80070b8:	491c      	ldr	r1, [pc, #112]	; (800712c <groupCommand+0x1a8>)
 80070ba:	0020      	movs	r0, r4
 80070bc:	f00c f8ba 	bl	8013234 <sprintf>
	return pdFALSE;
 80070c0:	e009      	b.n	80070d6 <groupCommand+0x152>
	else if (count == 2)
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <groupCommand+0x184>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d1d0      	bne.n	800706e <groupCommand+0xea>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 80070cc:	aa03      	add	r2, sp, #12
 80070ce:	4918      	ldr	r1, [pc, #96]	; (8007130 <groupCommand+0x1ac>)
 80070d0:	0020      	movs	r0, r4
 80070d2:	f00c f8af 	bl	8013234 <sprintf>
}
 80070d6:	2000      	movs	r0, #0
 80070d8:	b010      	add	sp, #64	; 0x40
 80070da:	bc04      	pop	{r2}
 80070dc:	4691      	mov	r9, r2
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <groupCommand+0x184>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d0f0      	beq.n	80070cc <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 80070ea:	2806      	cmp	r0, #6
 80070ec:	d0d5      	beq.n	800709a <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 80070ee:	2807      	cmp	r0, #7
 80070f0:	d1d9      	bne.n	80070a6 <groupCommand+0x122>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80070f2:	aa03      	add	r2, sp, #12
 80070f4:	490f      	ldr	r1, [pc, #60]	; (8007134 <groupCommand+0x1b0>)
 80070f6:	0020      	movs	r0, r4
 80070f8:	f00c f89c 	bl	8013234 <sprintf>
 80070fc:	e7eb      	b.n	80070d6 <groupCommand+0x152>
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	20001258 	.word	0x20001258
 8007104:	20000e0c 	.word	0x20000e0c
 8007108:	2000121e 	.word	0x2000121e
 800710c:	080185d8 	.word	0x080185d8
 8007110:	2000124c 	.word	0x2000124c
 8007114:	20001220 	.word	0x20001220
 8007118:	080185e4 	.word	0x080185e4
 800711c:	08018614 	.word	0x08018614
 8007120:	08018630 	.word	0x08018630
 8007124:	08018650 	.word	0x08018650
 8007128:	080186c4 	.word	0x080186c4
 800712c:	08018704 	.word	0x08018704
 8007130:	080185e8 	.word	0x080185e8
 8007134:	08018690 	.word	0x08018690

08007138 <nameCommand>:
{
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	0004      	movs	r4, r0
 800713c:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 800713e:	2c00      	cmp	r4, #0
 8007140:	d101      	bne.n	8007146 <nameCommand+0xe>
 8007142:	b672      	cpsid	i
 8007144:	e7fe      	b.n	8007144 <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007146:	4d1c      	ldr	r5, [pc, #112]	; (80071b8 <nameCommand+0x80>)
 8007148:	002a      	movs	r2, r5
 800714a:	2101      	movs	r1, #1
 800714c:	f006 fb2c 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8007150:	0001      	movs	r1, r0
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <nameCommand+0x84>)
 8007154:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	2b09      	cmp	r3, #9
 800715a:	dd01      	ble.n	8007160 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 800715c:	2300      	movs	r3, #0
 800715e:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8007160:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <nameCommand+0x88>)
 8007162:	7818      	ldrb	r0, [r3, #0]
 8007164:	f7fd f9a0 	bl	80044a8 <NameModule>
	if (result == BOS_OK)
 8007168:	2800      	cmp	r0, #0
 800716a:	d007      	beq.n	800717c <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 800716c:	2806      	cmp	r0, #6
 800716e:	d00e      	beq.n	800718e <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8007170:	2807      	cmp	r0, #7
 8007172:	d013      	beq.n	800719c <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8007174:	2808      	cmp	r0, #8
 8007176:	d018      	beq.n	80071aa <nameCommand+0x72>
}
 8007178:	2000      	movs	r0, #0
 800717a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <nameCommand+0x88>)
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <nameCommand+0x84>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	490f      	ldr	r1, [pc, #60]	; (80071c4 <nameCommand+0x8c>)
 8007186:	0020      	movs	r0, r4
 8007188:	f00c f854 	bl	8013234 <sprintf>
 800718c:	e7f4      	b.n	8007178 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <nameCommand+0x84>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	490d      	ldr	r1, [pc, #52]	; (80071c8 <nameCommand+0x90>)
 8007194:	0020      	movs	r0, r4
 8007196:	f00c f84d 	bl	8013234 <sprintf>
 800719a:	e7ed      	b.n	8007178 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <nameCommand+0x84>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	490a      	ldr	r1, [pc, #40]	; (80071cc <nameCommand+0x94>)
 80071a2:	0020      	movs	r0, r4
 80071a4:	f00c f846 	bl	8013234 <sprintf>
 80071a8:	e7e6      	b.n	8007178 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <nameCommand+0x84>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4908      	ldr	r1, [pc, #32]	; (80071d0 <nameCommand+0x98>)
 80071b0:	0020      	movs	r0, r4
 80071b2:	f00c f83f 	bl	8013234 <sprintf>
 80071b6:	e7df      	b.n	8007178 <nameCommand+0x40>
 80071b8:	20001254 	.word	0x20001254
 80071bc:	20001224 	.word	0x20001224
 80071c0:	2000101c 	.word	0x2000101c
 80071c4:	08018850 	.word	0x08018850
 80071c8:	08018650 	.word	0x08018650
 80071cc:	08018690 	.word	0x08018690
 80071d0:	080186c4 	.word	0x080186c4

080071d4 <bootloaderUpdateCommand>:
{
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	b085      	sub	sp, #20
 80071d8:	1e04      	subs	r4, r0, #0
 80071da:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 80071dc:	d101      	bne.n	80071e2 <bootloaderUpdateCommand+0xe>
 80071de:	b672      	cpsid	i
 80071e0:	e7fe      	b.n	80071e0 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80071e2:	4a4b      	ldr	r2, [pc, #300]	; (8007310 <bootloaderUpdateCommand+0x13c>)
 80071e4:	2101      	movs	r1, #1
 80071e6:	9803      	ldr	r0, [sp, #12]
 80071e8:	f006 fade 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d040      	beq.n	8007272 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 80071f0:	4b47      	ldr	r3, [pc, #284]	; (8007310 <bootloaderUpdateCommand+0x13c>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	4947      	ldr	r1, [pc, #284]	; (8007314 <bootloaderUpdateCommand+0x140>)
 80071f6:	f00c f861 	bl	80132bc <strncmp>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d000      	beq.n	8007200 <bootloaderUpdateCommand+0x2c>
 80071fe:	e080      	b.n	8007302 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8007200:	4a45      	ldr	r2, [pc, #276]	; (8007318 <bootloaderUpdateCommand+0x144>)
 8007202:	2102      	movs	r1, #2
 8007204:	9803      	ldr	r0, [sp, #12]
 8007206:	f006 facf 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800720a:	4f44      	ldr	r7, [pc, #272]	; (800731c <bootloaderUpdateCommand+0x148>)
 800720c:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800720e:	4a44      	ldr	r2, [pc, #272]	; (8007320 <bootloaderUpdateCommand+0x14c>)
 8007210:	2103      	movs	r1, #3
 8007212:	9803      	ldr	r0, [sp, #12]
 8007214:	f006 fac8 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 8007218:	4b42      	ldr	r3, [pc, #264]	; (8007324 <bootloaderUpdateCommand+0x150>)
 800721a:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 800721c:	6838      	ldr	r0, [r7, #0]
 800721e:	2300      	movs	r3, #0
 8007220:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8007222:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8007224:	2b23      	cmp	r3, #35	; 0x23
 8007226:	d04e      	beq.n	80072c6 <bootloaderUpdateCommand+0xf2>
			if (pcParameterString3[0] == 'p') {
 8007228:	4b3e      	ldr	r3, [pc, #248]	; (8007324 <bootloaderUpdateCommand+0x150>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	2300      	movs	r3, #0
 800722e:	56c3      	ldrsb	r3, [r0, r3]
 8007230:	2b70      	cmp	r3, #112	; 0x70
 8007232:	d04e      	beq.n	80072d2 <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;		
 8007234:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8007236:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <bootloaderUpdateCommand+0x154>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	42b3      	cmp	r3, r6
 800723c:	d04e      	beq.n	80072dc <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;							
 800723e:	4b3b      	ldr	r3, [pc, #236]	; (800732c <bootloaderUpdateCommand+0x158>)
 8007240:	2200      	movs	r2, #0
 8007242:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8007244:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <bootloaderUpdateCommand+0x15c>)
 8007246:	701d      	strb	r5, [r3, #0]
 8007248:	3201      	adds	r2, #1
 800724a:	211a      	movs	r1, #26
 800724c:	0030      	movs	r0, r6
 800724e:	f001 ffbf 	bl	80091d0 <SendMessageToModule>
				osDelay(100);			
 8007252:	2064      	movs	r0, #100	; 0x64
 8007254:	f006 f98f 	bl	800d576 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <bootloaderUpdateCommand+0x160>)
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	4b32      	ldr	r3, [pc, #200]	; (8007328 <bootloaderUpdateCommand+0x154>)
 800725e:	7818      	ldrb	r0, [r3, #0]
 8007260:	002b      	movs	r3, r5
 8007262:	0031      	movs	r1, r6
 8007264:	f7fc fd96 	bl	8003d94 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8007268:	2f68      	cmp	r7, #104	; 0x68
 800726a:	d04a      	beq.n	8007302 <bootloaderUpdateCommand+0x12e>
}
 800726c:	2000      	movs	r0, #0
 800726e:	b005      	add	sp, #20
 8007270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8007272:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <bootloaderUpdateCommand+0x154>)
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	4930      	ldr	r1, [pc, #192]	; (8007338 <bootloaderUpdateCommand+0x164>)
 8007278:	0020      	movs	r0, r4
 800727a:	f00b ffdb 	bl	8013234 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 800727e:	4b2f      	ldr	r3, [pc, #188]	; (800733c <bootloaderUpdateCommand+0x168>)
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	0020      	movs	r0, r4
 8007284:	f00b fff6 	bl	8013274 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8007288:	0020      	movs	r0, r4
 800728a:	f7f8 ff45 	bl	8000118 <strlen>
 800728e:	b282      	uxth	r2, r0
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <bootloaderUpdateCommand+0x160>)
 8007292:	7818      	ldrb	r0, [r3, #0]
 8007294:	2301      	movs	r3, #1
 8007296:	425b      	negs	r3, r3
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	3333      	adds	r3, #51	; 0x33
 800729c:	0021      	movs	r1, r4
 800729e:	f006 f83d 	bl	800d31c <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80072a2:	4b27      	ldr	r3, [pc, #156]	; (8007340 <bootloaderUpdateCommand+0x16c>)
 80072a4:	4a27      	ldr	r2, [pc, #156]	; (8007344 <bootloaderUpdateCommand+0x170>)
 80072a6:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 80072a8:	4b27      	ldr	r3, [pc, #156]	; (8007348 <bootloaderUpdateCommand+0x174>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80072ae:	200a      	movs	r0, #10
 80072b0:	f006 f961 	bl	800d576 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	4b24      	ldr	r3, [pc, #144]	; (800734c <bootloaderUpdateCommand+0x178>)
 80072ba:	4a25      	ldr	r2, [pc, #148]	; (8007350 <bootloaderUpdateCommand+0x17c>)
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	e7fd      	b.n	80072c2 <bootloaderUpdateCommand+0xee>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80072c6:	3001      	adds	r0, #1
 80072c8:	f00b fb27 	bl	801291a <atol>
 80072cc:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 80072ce:	2700      	movs	r7, #0
 80072d0:	e7aa      	b.n	8007228 <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80072d2:	3001      	adds	r0, #1
 80072d4:	f00b fb21 	bl	801291a <atol>
 80072d8:	b2c5      	uxtb	r5, r0
 80072da:	e7ac      	b.n	8007236 <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 80072dc:	2100      	movs	r1, #0
 80072de:	9100      	str	r1, [sp, #0]
 80072e0:	2319      	movs	r3, #25
 80072e2:	000a      	movs	r2, r1
 80072e4:	0028      	movs	r0, r5
 80072e6:	f001 fd4b 	bl	8008d80 <SendMessageFromPort>
				osDelay(100);
 80072ea:	2064      	movs	r0, #100	; 0x64
 80072ec:	f006 f943 	bl	800d576 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <bootloaderUpdateCommand+0x154>)
 80072f2:	7818      	ldrb	r0, [r3, #0]
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <bootloaderUpdateCommand+0x160>)
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	002b      	movs	r3, r5
 80072fa:	0001      	movs	r1, r0
 80072fc:	f7fc fd4a 	bl	8003d94 <remoteBootloaderUpdate>
 8007300:	e7b2      	b.n	8007268 <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8007302:	220f      	movs	r2, #15
 8007304:	4913      	ldr	r1, [pc, #76]	; (8007354 <bootloaderUpdateCommand+0x180>)
 8007306:	0020      	movs	r0, r4
 8007308:	f00b fd91 	bl	8012e2e <memcpy>
 800730c:	e7ae      	b.n	800726c <bootloaderUpdateCommand+0x98>
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	20001250 	.word	0x20001250
 8007314:	08018310 	.word	0x08018310
 8007318:	2000125c 	.word	0x2000125c
 800731c:	20001234 	.word	0x20001234
 8007320:	20001260 	.word	0x20001260
 8007324:	2000123c 	.word	0x2000123c
 8007328:	2000101c 	.word	0x2000101c
 800732c:	20006898 	.word	0x20006898
 8007330:	20000ee8 	.word	0x20000ee8
 8007334:	20000a77 	.word	0x20000a77
 8007338:	080182f0 	.word	0x080182f0
 800733c:	20000074 	.word	0x20000074
 8007340:	20007ff0 	.word	0x20007ff0
 8007344:	deadbeef 	.word	0xdeadbeef
 8007348:	20000ea2 	.word	0x20000ea2
 800734c:	e000ed00 	.word	0xe000ed00
 8007350:	05fa0004 	.word	0x05fa0004
 8007354:	080183d0 	.word	0x080183d0

08007358 <pingCommand>:
{
 8007358:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 800735a:	2800      	cmp	r0, #0
 800735c:	d01d      	beq.n	800739a <pingCommand+0x42>
	if (!moduleAlias[myID][0])
 800735e:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <pingCommand+0x58>)
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	0093      	lsls	r3, r2, #2
 8007364:	189b      	adds	r3, r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4912      	ldr	r1, [pc, #72]	; (80073b4 <pingCommand+0x5c>)
 800736a:	5c5b      	ldrb	r3, [r3, r1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8007370:	4911      	ldr	r1, [pc, #68]	; (80073b8 <pingCommand+0x60>)
 8007372:	f00b ff5f 	bl	8013234 <sprintf>
	RTOS_IND_blink(200);	
 8007376:	2580      	movs	r5, #128	; 0x80
 8007378:	01ed      	lsls	r5, r5, #7
 800737a:	4c10      	ldr	r4, [pc, #64]	; (80073bc <pingCommand+0x64>)
 800737c:	2201      	movs	r2, #1
 800737e:	0029      	movs	r1, r5
 8007380:	0020      	movs	r0, r4
 8007382:	f009 f9fb 	bl	801077c <HAL_GPIO_WritePin>
 8007386:	20c8      	movs	r0, #200	; 0xc8
 8007388:	f006 f8f5 	bl	800d576 <osDelay>
 800738c:	2200      	movs	r2, #0
 800738e:	0029      	movs	r1, r5
 8007390:	0020      	movs	r0, r4
 8007392:	f009 f9f3 	bl	801077c <HAL_GPIO_WritePin>
}
 8007396:	2000      	movs	r0, #0
 8007398:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800739a:	b672      	cpsid	i
 800739c:	e7fe      	b.n	800739c <pingCommand+0x44>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 800739e:	0093      	lsls	r3, r2, #2
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4903      	ldr	r1, [pc, #12]	; (80073b4 <pingCommand+0x5c>)
 80073a6:	185b      	adds	r3, r3, r1
 80073a8:	4905      	ldr	r1, [pc, #20]	; (80073c0 <pingCommand+0x68>)
 80073aa:	f00b ff43 	bl	8013234 <sprintf>
 80073ae:	e7e2      	b.n	8007376 <pingCommand+0x1e>
 80073b0:	2000101c 	.word	0x2000101c
 80073b4:	20000f18 	.word	0x20000f18
 80073b8:	080188c0 	.word	0x080188c0
 80073bc:	48000800 	.word	0x48000800
 80073c0:	080188d4 	.word	0x080188d4

080073c4 <prvRunTimeStatsCommand>:
{
 80073c4:	b510      	push	{r4, lr}
 80073c6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80073c8:	d101      	bne.n	80073ce <prvRunTimeStatsCommand+0xa>
 80073ca:	b672      	cpsid	i
 80073cc:	e7fe      	b.n	80073cc <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 80073ce:	2251      	movs	r2, #81	; 0x51
 80073d0:	4904      	ldr	r1, [pc, #16]	; (80073e4 <prvRunTimeStatsCommand+0x20>)
 80073d2:	f00b fd2c 	bl	8012e2e <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 80073d6:	0020      	movs	r0, r4
 80073d8:	3050      	adds	r0, #80	; 0x50
 80073da:	f007 fc39 	bl	800ec50 <vTaskGetRunTimeStats>
}
 80073de:	2000      	movs	r0, #0
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	08018900 	.word	0x08018900

080073e8 <prvTaskStatsCommand>:
{
 80073e8:	b510      	push	{r4, lr}
 80073ea:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80073ec:	d101      	bne.n	80073f2 <prvTaskStatsCommand+0xa>
 80073ee:	b672      	cpsid	i
 80073f0:	e7fe      	b.n	80073f0 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80073f2:	225b      	movs	r2, #91	; 0x5b
 80073f4:	4904      	ldr	r1, [pc, #16]	; (8007408 <prvTaskStatsCommand+0x20>)
 80073f6:	f00b fd1a 	bl	8012e2e <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 80073fa:	0020      	movs	r0, r4
 80073fc:	305a      	adds	r0, #90	; 0x5a
 80073fe:	f007 fbc7 	bl	800eb90 <vTaskList>
}
 8007402:	2000      	movs	r0, #0
 8007404:	bd10      	pop	{r4, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	08018964 	.word	0x08018964

0800740c <resetCommand>:
	configASSERT( pcWriteBuffer );
 800740c:	2800      	cmp	r0, #0
 800740e:	d101      	bne.n	8007414 <resetCommand+0x8>
 8007410:	b672      	cpsid	i
 8007412:	e7fe      	b.n	8007412 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <resetCommand+0x1c>)
 800741a:	4a04      	ldr	r2, [pc, #16]	; (800742c <resetCommand+0x20>)
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	e7fd      	b.n	8007422 <resetCommand+0x16>
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	e000ed00 	.word	0xe000ed00
 800742c:	05fa0004 	.word	0x05fa0004

08007430 <RegisterUserCLICommands>:
}
 8007430:	4770      	bx	lr
	...

08007434 <vRegisterCLICommands>:
{
 8007434:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8007436:	482f      	ldr	r0, [pc, #188]	; (80074f4 <vRegisterCLICommands+0xc0>)
 8007438:	f006 f918 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 800743c:	482e      	ldr	r0, [pc, #184]	; (80074f8 <vRegisterCLICommands+0xc4>)
 800743e:	f006 f915 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 8007442:	482e      	ldr	r0, [pc, #184]	; (80074fc <vRegisterCLICommands+0xc8>)
 8007444:	f006 f912 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8007448:	482d      	ldr	r0, [pc, #180]	; (8007500 <vRegisterCLICommands+0xcc>)
 800744a:	f006 f90f 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 800744e:	482d      	ldr	r0, [pc, #180]	; (8007504 <vRegisterCLICommands+0xd0>)
 8007450:	f006 f90c 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8007454:	482c      	ldr	r0, [pc, #176]	; (8007508 <vRegisterCLICommands+0xd4>)
 8007456:	f006 f909 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 800745a:	482c      	ldr	r0, [pc, #176]	; (800750c <vRegisterCLICommands+0xd8>)
 800745c:	f006 f906 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8007460:	482b      	ldr	r0, [pc, #172]	; (8007510 <vRegisterCLICommands+0xdc>)
 8007462:	f006 f903 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8007466:	482b      	ldr	r0, [pc, #172]	; (8007514 <vRegisterCLICommands+0xe0>)
 8007468:	f006 f900 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 800746c:	482a      	ldr	r0, [pc, #168]	; (8007518 <vRegisterCLICommands+0xe4>)
 800746e:	f006 f8fd 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8007472:	482a      	ldr	r0, [pc, #168]	; (800751c <vRegisterCLICommands+0xe8>)
 8007474:	f006 f8fa 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8007478:	4829      	ldr	r0, [pc, #164]	; (8007520 <vRegisterCLICommands+0xec>)
 800747a:	f006 f8f7 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 800747e:	4829      	ldr	r0, [pc, #164]	; (8007524 <vRegisterCLICommands+0xf0>)
 8007480:	f006 f8f4 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8007484:	4828      	ldr	r0, [pc, #160]	; (8007528 <vRegisterCLICommands+0xf4>)
 8007486:	f006 f8f1 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 800748a:	4828      	ldr	r0, [pc, #160]	; (800752c <vRegisterCLICommands+0xf8>)
 800748c:	f006 f8ee 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8007490:	4827      	ldr	r0, [pc, #156]	; (8007530 <vRegisterCLICommands+0xfc>)
 8007492:	f006 f8eb 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8007496:	4827      	ldr	r0, [pc, #156]	; (8007534 <vRegisterCLICommands+0x100>)
 8007498:	f006 f8e8 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 800749c:	4826      	ldr	r0, [pc, #152]	; (8007538 <vRegisterCLICommands+0x104>)
 800749e:	f006 f8e5 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 80074a2:	4826      	ldr	r0, [pc, #152]	; (800753c <vRegisterCLICommands+0x108>)
 80074a4:	f006 f8e2 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 80074a8:	4825      	ldr	r0, [pc, #148]	; (8007540 <vRegisterCLICommands+0x10c>)
 80074aa:	f006 f8df 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 80074ae:	4825      	ldr	r0, [pc, #148]	; (8007544 <vRegisterCLICommands+0x110>)
 80074b0:	f006 f8dc 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 80074b4:	4824      	ldr	r0, [pc, #144]	; (8007548 <vRegisterCLICommands+0x114>)
 80074b6:	f006 f8d9 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 80074ba:	4824      	ldr	r0, [pc, #144]	; (800754c <vRegisterCLICommands+0x118>)
 80074bc:	f006 f8d6 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 80074c0:	4823      	ldr	r0, [pc, #140]	; (8007550 <vRegisterCLICommands+0x11c>)
 80074c2:	f006 f8d3 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 80074c6:	4823      	ldr	r0, [pc, #140]	; (8007554 <vRegisterCLICommands+0x120>)
 80074c8:	f006 f8d0 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 80074cc:	4822      	ldr	r0, [pc, #136]	; (8007558 <vRegisterCLICommands+0x124>)
 80074ce:	f006 f8cd 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 80074d2:	4822      	ldr	r0, [pc, #136]	; (800755c <vRegisterCLICommands+0x128>)
 80074d4:	f006 f8ca 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 80074d8:	4821      	ldr	r0, [pc, #132]	; (8007560 <vRegisterCLICommands+0x12c>)
 80074da:	f006 f8c7 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 80074de:	4821      	ldr	r0, [pc, #132]	; (8007564 <vRegisterCLICommands+0x130>)
 80074e0:	f006 f8c4 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 80074e4:	4b20      	ldr	r3, [pc, #128]	; (8007568 <vRegisterCLICommands+0x134>)
 80074e6:	221d      	movs	r2, #29
 80074e8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80074ea:	f003 fe17 	bl	800b11c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80074ee:	f7ff ff9f 	bl	8007430 <RegisterUserCLICommands>
}
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	080189c0 	.word	0x080189c0
 80074f8:	08018954 	.word	0x08018954
 80074fc:	080188f0 	.word	0x080188f0
 8007500:	08018314 	.word	0x08018314
 8007504:	0801849c 	.word	0x0801849c
 8007508:	08018a08 	.word	0x08018a08
 800750c:	08018868 	.word	0x08018868
 8007510:	08018728 	.word	0x08018728
 8007514:	08018e9c 	.word	0x08018e9c
 8007518:	0801882c 	.word	0x0801882c
 800751c:	08018ac4 	.word	0x08018ac4
 8007520:	080182e0 	.word	0x080182e0
 8007524:	080189f8 	.word	0x080189f8
 8007528:	08018d0c 	.word	0x08018d0c
 800752c:	080185c8 	.word	0x080185c8
 8007530:	08018420 	.word	0x08018420
 8007534:	08019d2c 	.word	0x08019d2c
 8007538:	08018388 	.word	0x08018388
 800753c:	08018b10 	.word	0x08018b10
 8007540:	08019da0 	.word	0x08019da0
 8007544:	080187a8 	.word	0x080187a8
 8007548:	080184cc 	.word	0x080184cc
 800754c:	08018e8c 	.word	0x08018e8c
 8007550:	08018264 	.word	0x08018264
 8007554:	080188b0 	.word	0x080188b0
 8007558:	0801848c 	.word	0x0801848c
 800755c:	08018360 	.word	0x08018360
 8007560:	08019d78 	.word	0x08019d78
 8007564:	08019cc0 	.word	0x08019cc0
 8007568:	2000681c 	.word	0x2000681c

0800756c <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 800756c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800756e:	1e45      	subs	r5, r0, #1
 8007570:	00ec      	lsls	r4, r5, #3
 8007572:	1b60      	subs	r0, r4, r5
 8007574:	00c0      	lsls	r0, r0, #3
 8007576:	4e05      	ldr	r6, [pc, #20]	; (800758c <StopMsgDMA+0x20>)
 8007578:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800757a:	f008 fa4c 	bl	800fa16 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	00e4      	lsls	r4, r4, #3
 8007582:	59a3      	ldr	r3, [r4, r6]
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]
}
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	20001670 	.word	0x20001670

08007590 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8007590:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8007592:	1e44      	subs	r4, r0, #1
 8007594:	00e5      	lsls	r5, r4, #3
 8007596:	1b28      	subs	r0, r5, r4
 8007598:	00c0      	lsls	r0, r0, #3
 800759a:	4e07      	ldr	r6, [pc, #28]	; (80075b8 <StopStreamDMA+0x28>)
 800759c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800759e:	f008 fa3a 	bl	800fa16 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80075a2:	1b2d      	subs	r5, r5, r4
 80075a4:	00ed      	lsls	r5, r5, #3
 80075a6:	59aa      	ldr	r2, [r5, r6]
 80075a8:	2300      	movs	r3, #0
 80075aa:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 80075ac:	00a4      	lsls	r4, r4, #2
 80075ae:	4a03      	ldr	r2, [pc, #12]	; (80075bc <StopStreamDMA+0x2c>)
 80075b0:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 80075b2:	4a03      	ldr	r2, [pc, #12]	; (80075c0 <StopStreamDMA+0x30>)
 80075b4:	50a3      	str	r3, [r4, r2]

}
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	20001868 	.word	0x20001868
 80075bc:	200013ec 	.word	0x200013ec
 80075c0:	20001414 	.word	0x20001414

080075c4 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 80075c4:	b510      	push	{r4, lr}
 80075c6:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80075c8:	f7ff ffd0 	bl	800756c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 80075cc:	3c01      	subs	r4, #1
 80075ce:	00e0      	lsls	r0, r4, #3
 80075d0:	1b02      	subs	r2, r0, r4
 80075d2:	00d2      	lsls	r2, r2, #3
 80075d4:	4903      	ldr	r1, [pc, #12]	; (80075e4 <SwitchMsgDMAToStream+0x20>)
 80075d6:	5851      	ldr	r1, [r2, r1]
 80075d8:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <SwitchMsgDMAToStream+0x24>)
 80075da:	18d0      	adds	r0, r2, r3
 80075dc:	f004 f8fa 	bl	800b7d4 <DMA_STREAM_CH_Init>
}
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	20001670 	.word	0x20001670
 80075e8:	20001868 	.word	0x20001868

080075ec <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	b083      	sub	sp, #12
 80075f0:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80075f2:	f7ff ffcd 	bl	8007590 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 80075f6:	9401      	str	r4, [sp, #4]
 80075f8:	3c01      	subs	r4, #1
 80075fa:	00e7      	lsls	r7, r4, #3
 80075fc:	1b3d      	subs	r5, r7, r4
 80075fe:	00ed      	lsls	r5, r5, #3
 8007600:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <SwitchStreamDMAToMsg+0x54>)
 8007602:	18ed      	adds	r5, r5, r3
 8007604:	4e0f      	ldr	r6, [pc, #60]	; (8007644 <SwitchStreamDMAToMsg+0x58>)
 8007606:	1b3b      	subs	r3, r7, r4
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	5999      	ldr	r1, [r3, r6]
 800760c:	0028      	movs	r0, r5
 800760e:	f004 f86b 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 8007612:	1b3b      	subs	r3, r7, r4
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	18f3      	adds	r3, r6, r3
 8007618:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800761a:	f003 fd9b 	bl	800b154 <GetPort>
 800761e:	2300      	movs	r3, #0
 8007620:	4a09      	ldr	r2, [pc, #36]	; (8007648 <SwitchStreamDMAToMsg+0x5c>)
 8007622:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8007624:	1b3f      	subs	r7, r7, r4
 8007626:	00ff      	lsls	r7, r7, #3
 8007628:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 800762a:	00a4      	lsls	r4, r4, #2
 800762c:	4a07      	ldr	r2, [pc, #28]	; (800764c <SwitchStreamDMAToMsg+0x60>)
 800762e:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8007630:	9801      	ldr	r0, [sp, #4]
 8007632:	f005 fe55 	bl	800d2e0 <GetUart>
 8007636:	0029      	movs	r1, r5
 8007638:	f004 fcc0 	bl	800bfbc <DMA_MSG_RX_Setup>
		
}
 800763c:	b003      	add	sp, #12
 800763e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007640:	20001670 	.word	0x20001670
 8007644:	20001868 	.word	0x20001868
 8007648:	20001098 	.word	0x20001098
 800764c:	20001400 	.word	0x20001400

08007650 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	0005      	movs	r5, r0
 8007654:	000e      	movs	r6, r1
 8007656:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8007658:	f003 fd7c 	bl	800b154 <GetPort>
 800765c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <StartDMAstream+0x44>)
 8007660:	5c1b      	ldrb	r3, [r3, r0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d902      	bls.n	800766c <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007666:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007668:	2b03      	cmp	r3, #3
 800766a:	d112      	bne.n	8007692 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800766c:	0020      	movs	r0, r4
 800766e:	f7ff ffa9 	bl	80075c4 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8007672:	1e63      	subs	r3, r4, #1
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4a08      	ldr	r2, [pc, #32]	; (8007698 <StartDMAstream+0x48>)
 8007678:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800767a:	4a06      	ldr	r2, [pc, #24]	; (8007694 <StartDMAstream+0x44>)
 800767c:	2102      	movs	r1, #2
 800767e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8007680:	4a06      	ldr	r2, [pc, #24]	; (800769c <StartDMAstream+0x4c>)
 8007682:	2100      	movs	r1, #0
 8007684:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007686:	003a      	movs	r2, r7
 8007688:	0031      	movs	r1, r6
 800768a:	0028      	movs	r0, r5
 800768c:	f004 fcf4 	bl	800c078 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007690:	2000      	movs	r0, #0
}
 8007692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007694:	20001098 	.word	0x20001098
 8007698:	20001400 	.word	0x20001400
 800769c:	200013ec 	.word	0x200013ec

080076a0 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 80076a4:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <DMA_IRQHandler+0x50>)
 80076a6:	5c1b      	ldrb	r3, [r3, r0]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d008      	beq.n	80076be <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 80076ac:	3c01      	subs	r4, #1
 80076ae:	00e0      	lsls	r0, r4, #3
 80076b0:	1b00      	subs	r0, r0, r4
 80076b2:	00c0      	lsls	r0, r0, #3
 80076b4:	4c0f      	ldr	r4, [pc, #60]	; (80076f4 <DMA_IRQHandler+0x54>)
 80076b6:	1900      	adds	r0, r0, r4
 80076b8:	f008 f9d6 	bl	800fa68 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 80076be:	1e45      	subs	r5, r0, #1
 80076c0:	00e8      	lsls	r0, r5, #3
 80076c2:	1b40      	subs	r0, r0, r5
 80076c4:	00c0      	lsls	r0, r0, #3
 80076c6:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <DMA_IRQHandler+0x58>)
 80076c8:	18c0      	adds	r0, r0, r3
 80076ca:	f008 f9cd 	bl	800fa68 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 80076ce:	00aa      	lsls	r2, r5, #2
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <DMA_IRQHandler+0x5c>)
 80076d2:	58d2      	ldr	r2, [r2, r3]
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	d006      	beq.n	80076e6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 80076d8:	4909      	ldr	r1, [pc, #36]	; (8007700 <DMA_IRQHandler+0x60>)
 80076da:	00ad      	lsls	r5, r5, #2
 80076dc:	586b      	ldr	r3, [r5, r1]
 80076de:	3301      	adds	r3, #1
 80076e0:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d8ea      	bhi.n	80076bc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80076e6:	0020      	movs	r0, r4
 80076e8:	f7ff ff52 	bl	8007590 <StopStreamDMA>
}
 80076ec:	e7e6      	b.n	80076bc <DMA_IRQHandler+0x1c>
 80076ee:	46c0      	nop			; (mov r8, r8)
 80076f0:	20001098 	.word	0x20001098
 80076f4:	20001670 	.word	0x20001670
 80076f8:	20001868 	.word	0x20001868
 80076fc:	20001414 	.word	0x20001414
 8007700:	200013ec 	.word	0x200013ec

08007704 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007704:	4b08      	ldr	r3, [pc, #32]	; (8007728 <ResetUartORE+0x24>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	2308      	movs	r3, #8
 800770a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800770c:	4a07      	ldr	r2, [pc, #28]	; (800772c <ResetUartORE+0x28>)
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007712:	4a07      	ldr	r2, [pc, #28]	; (8007730 <ResetUartORE+0x2c>)
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007718:	4a06      	ldr	r2, [pc, #24]	; (8007734 <ResetUartORE+0x30>)
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800771e:	4a06      	ldr	r2, [pc, #24]	; (8007738 <ResetUartORE+0x34>)
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	6213      	str	r3, [r2, #32]
#endif
}
 8007724:	4770      	bx	lr
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	20006a8c 	.word	0x20006a8c
 800772c:	20006b74 	.word	0x20006b74
 8007730:	2000696c 	.word	0x2000696c
 8007734:	20006a1c 	.word	0x20006a1c
 8007738:	20006b04 	.word	0x20006b04

0800773c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	0006      	movs	r6, r0
 8007740:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007742:	f008 fe01 	bl	8010348 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007746:	4b2b      	ldr	r3, [pc, #172]	; (80077f4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800774c:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 8007756:	4929      	ldr	r1, [pc, #164]	; (80077fc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007758:	428a      	cmp	r2, r1
 800775a:	d007      	beq.n	800776c <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800775c:	3302      	adds	r3, #2
 800775e:	e005      	b.n	800776c <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8007760:	2a00      	cmp	r2, #0
 8007762:	d143      	bne.n	80077ec <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 8007764:	4925      	ldr	r1, [pc, #148]	; (80077fc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007766:	428b      	cmp	r3, r1
 8007768:	d042      	beq.n	80077f0 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 800776a:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800776c:	4a24      	ldr	r2, [pc, #144]	; (8007800 <EE_VerifyPageFullWriteVariable+0xc4>)
 800776e:	189c      	adds	r4, r3, r2
 8007770:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007772:	02db      	lsls	r3, r3, #11
 8007774:	4a23      	ldr	r2, [pc, #140]	; (8007804 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007776:	4694      	mov	ip, r2
 8007778:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	3201      	adds	r2, #1
 800777e:	d005      	beq.n	800778c <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007780:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8007782:	429c      	cmp	r4, r3
 8007784:	d22e      	bcs.n	80077e4 <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	3201      	adds	r2, #1
 800778a:	d1f9      	bne.n	8007780 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 800778c:	002a      	movs	r2, r5
 800778e:	2300      	movs	r3, #0
 8007790:	0021      	movs	r1, r4
 8007792:	2001      	movs	r0, #1
 8007794:	f008 fe22 	bl	80103dc <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007798:	481b      	ldr	r0, [pc, #108]	; (8007808 <EE_VerifyPageFullWriteVariable+0xcc>)
 800779a:	f008 fdf1 	bl	8010380 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800779e:	2800      	cmp	r0, #0
 80077a0:	d003      	beq.n	80077aa <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 80077a2:	4b1a      	ldr	r3, [pc, #104]	; (800780c <EE_VerifyPageFullWriteVariable+0xd0>)
 80077a4:	69d8      	ldr	r0, [r3, #28]
 80077a6:	b280      	uxth	r0, r0
 80077a8:	e01f      	b.n	80077ea <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <EE_VerifyPageFullWriteVariable+0xd4>)
 80077ac:	6913      	ldr	r3, [r2, #16]
 80077ae:	2101      	movs	r1, #1
 80077b0:	438b      	bics	r3, r1
 80077b2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80077b4:	1ca1      	adds	r1, r4, #2
 80077b6:	0032      	movs	r2, r6
 80077b8:	2300      	movs	r3, #0
 80077ba:	2001      	movs	r0, #1
 80077bc:	f008 fe0e 	bl	80103dc <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80077c0:	4811      	ldr	r0, [pc, #68]	; (8007808 <EE_VerifyPageFullWriteVariable+0xcc>)
 80077c2:	f008 fddd 	bl	8010380 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d003      	beq.n	80077d2 <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <EE_VerifyPageFullWriteVariable+0xd0>)
 80077cc:	69d8      	ldr	r0, [r3, #28]
 80077ce:	b280      	uxth	r0, r0
 80077d0:	e00b      	b.n	80077ea <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80077d2:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <EE_VerifyPageFullWriteVariable+0xd4>)
 80077d4:	6913      	ldr	r3, [r2, #16]
 80077d6:	2101      	movs	r1, #1
 80077d8:	438b      	bics	r3, r1
 80077da:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <EE_VerifyPageFullWriteVariable+0xd0>)
 80077de:	69d8      	ldr	r0, [r3, #28]
 80077e0:	b280      	uxth	r0, r0
 80077e2:	e002      	b.n	80077ea <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 80077e4:	f008 fdc2 	bl	801036c <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80077e8:	2080      	movs	r0, #128	; 0x80
}
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 80077ec:	20ab      	movs	r0, #171	; 0xab
 80077ee:	e7fc      	b.n	80077ea <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 80077f0:	2302      	movs	r3, #2
 80077f2:	e7bb      	b.n	800776c <EE_VerifyPageFullWriteVariable+0x30>
 80077f4:	0801e000 	.word	0x0801e000
 80077f8:	0801f000 	.word	0x0801f000
 80077fc:	0000eeee 	.word	0x0000eeee
 8007800:	0001003c 	.word	0x0001003c
 8007804:	0801effe 	.word	0x0801effe
 8007808:	0000c350 	.word	0x0000c350
 800780c:	20006d18 	.word	0x20006d18
 8007810:	40022000 	.word	0x40022000

08007814 <EE_ReadVariable>:
{
 8007814:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <EE_ReadVariable+0x50>)
 8007818:	881c      	ldrh	r4, [r3, #0]
 800781a:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800781c:	4b12      	ldr	r3, [pc, #72]	; (8007868 <EE_ReadVariable+0x54>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007822:	2c00      	cmp	r4, #0
 8007824:	d006      	beq.n	8007834 <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800782a:	20ab      	movs	r0, #171	; 0xab
 800782c:	e019      	b.n	8007862 <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800782e:	2001      	movs	r0, #1
 8007830:	e017      	b.n	8007862 <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 8007832:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007834:	02e3      	lsls	r3, r4, #11
 8007836:	4a0d      	ldr	r2, [pc, #52]	; (800786c <EE_ReadVariable+0x58>)
 8007838:	4694      	mov	ip, r2
 800783a:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800783c:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <EE_ReadVariable+0x5c>)
 8007840:	4694      	mov	ip, r2
 8007842:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8007844:	881a      	ldrh	r2, [r3, #0]
 8007846:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007848:	4290      	cmp	r0, r2
 800784a:	d006      	beq.n	800785a <EE_ReadVariable+0x46>
      Address = Address - 4;
 800784c:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 800784e:	42a3      	cmp	r3, r4
 8007850:	d9ed      	bls.n	800782e <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 8007852:	881a      	ldrh	r2, [r3, #0]
 8007854:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007856:	4282      	cmp	r2, r0
 8007858:	d1f8      	bne.n	800784c <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800785a:	3b02      	subs	r3, #2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007860:	2000      	movs	r0, #0
}
 8007862:	bd10      	pop	{r4, pc}
 8007864:	0801e000 	.word	0x0801e000
 8007868:	0801f000 	.word	0x0801f000
 800786c:	0801effe 	.word	0x0801effe
 8007870:	0801e002 	.word	0x0801e002

08007874 <EE_WriteVariable>:
{
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	46de      	mov	lr, fp
 8007878:	4647      	mov	r7, r8
 800787a:	b580      	push	{r7, lr}
 800787c:	b083      	sub	sp, #12
 800787e:	0005      	movs	r5, r0
 8007880:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007882:	f008 fd61 	bl	8010348 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007886:	0031      	movs	r1, r6
 8007888:	0028      	movs	r0, r5
 800788a:	f7ff ff57 	bl	800773c <EE_VerifyPageFullWriteVariable>
 800788e:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007890:	2880      	cmp	r0, #128	; 0x80
 8007892:	d007      	beq.n	80078a4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007894:	f008 fd6a 	bl	801036c <HAL_FLASH_Lock>
}
 8007898:	0020      	movs	r0, r4
 800789a:	b003      	add	sp, #12
 800789c:	bc0c      	pop	{r2, r3}
 800789e:	4690      	mov	r8, r2
 80078a0:	469b      	mov	fp, r3
 80078a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 80078a4:	f008 fd50 	bl	8010348 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80078a8:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <EE_WriteVariable+0x130>)
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80078ae:	4a3e      	ldr	r2, [pc, #248]	; (80079a8 <EE_WriteVariable+0x134>)
 80078b0:	8812      	ldrh	r2, [r2, #0]
 80078b2:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80078b8:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	d1ea      	bne.n	8007894 <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 80078be:	4b3a      	ldr	r3, [pc, #232]	; (80079a8 <EE_WriteVariable+0x134>)
 80078c0:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 80078c2:	4b38      	ldr	r3, [pc, #224]	; (80079a4 <EE_WriteVariable+0x130>)
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	e003      	b.n	80078d0 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 80078c8:	4b36      	ldr	r3, [pc, #216]	; (80079a4 <EE_WriteVariable+0x130>)
 80078ca:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 80078cc:	4b36      	ldr	r3, [pc, #216]	; (80079a8 <EE_WriteVariable+0x134>)
 80078ce:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 80078d0:	4a36      	ldr	r2, [pc, #216]	; (80079ac <EE_WriteVariable+0x138>)
 80078d2:	2300      	movs	r3, #0
 80078d4:	9901      	ldr	r1, [sp, #4]
 80078d6:	2001      	movs	r0, #1
 80078d8:	f008 fd80 	bl	80103dc <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078dc:	4834      	ldr	r0, [pc, #208]	; (80079b0 <EE_WriteVariable+0x13c>)
 80078de:	f008 fd4f 	bl	8010380 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d003      	beq.n	80078ee <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 80078e6:	4b33      	ldr	r3, [pc, #204]	; (80079b4 <EE_WriteVariable+0x140>)
 80078e8:	69dc      	ldr	r4, [r3, #28]
 80078ea:	b2a4      	uxth	r4, r4
 80078ec:	e7d2      	b.n	8007894 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80078ee:	4a32      	ldr	r2, [pc, #200]	; (80079b8 <EE_WriteVariable+0x144>)
 80078f0:	6913      	ldr	r3, [r2, #16]
 80078f2:	2101      	movs	r1, #1
 80078f4:	438b      	bics	r3, r1
 80078f6:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80078f8:	0031      	movs	r1, r6
 80078fa:	0028      	movs	r0, r5
 80078fc:	f7ff ff1e 	bl	800773c <EE_VerifyPageFullWriteVariable>
 8007900:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007902:	d1c7      	bne.n	8007894 <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007904:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007906:	4b2d      	ldr	r3, [pc, #180]	; (80079bc <EE_WriteVariable+0x148>)
 8007908:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800790a:	4e2d      	ldr	r6, [pc, #180]	; (80079c0 <EE_WriteVariable+0x14c>)
 800790c:	e003      	b.n	8007916 <EE_WriteVariable+0xa2>
 800790e:	3701      	adds	r7, #1
 8007910:	b2bf      	uxth	r7, r7
 8007912:	42b7      	cmp	r7, r6
 8007914:	d00f      	beq.n	8007936 <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007916:	42bd      	cmp	r5, r7
 8007918:	d0f9      	beq.n	800790e <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800791a:	4928      	ldr	r1, [pc, #160]	; (80079bc <EE_WriteVariable+0x148>)
 800791c:	0038      	movs	r0, r7
 800791e:	f7ff ff79 	bl	8007814 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007922:	2801      	cmp	r0, #1
 8007924:	d0f3      	beq.n	800790e <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007926:	4643      	mov	r3, r8
 8007928:	8819      	ldrh	r1, [r3, #0]
 800792a:	0038      	movs	r0, r7
 800792c:	f7ff ff06 	bl	800773c <EE_VerifyPageFullWriteVariable>
 8007930:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007932:	d0ec      	beq.n	800790e <EE_WriteVariable+0x9a>
 8007934:	e7ae      	b.n	8007894 <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007936:	4658      	mov	r0, fp
 8007938:	f008 fdc8 	bl	80104cc <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800793c:	481c      	ldr	r0, [pc, #112]	; (80079b0 <EE_WriteVariable+0x13c>)
 800793e:	f008 fd1f 	bl	8010380 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007942:	2800      	cmp	r0, #0
 8007944:	d003      	beq.n	800794e <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 8007946:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <EE_WriteVariable+0x140>)
 8007948:	69dc      	ldr	r4, [r3, #28]
 800794a:	b2a4      	uxth	r4, r4
 800794c:	e7a2      	b.n	8007894 <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800794e:	2080      	movs	r0, #128	; 0x80
 8007950:	0100      	lsls	r0, r0, #4
 8007952:	4458      	add	r0, fp
 8007954:	f008 fdba 	bl	80104cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007958:	4815      	ldr	r0, [pc, #84]	; (80079b0 <EE_WriteVariable+0x13c>)
 800795a:	f008 fd11 	bl	8010380 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800795e:	2800      	cmp	r0, #0
 8007960:	d003      	beq.n	800796a <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <EE_WriteVariable+0x140>)
 8007964:	69dc      	ldr	r4, [r3, #28]
 8007966:	b2a4      	uxth	r4, r4
 8007968:	e794      	b.n	8007894 <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800796a:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <EE_WriteVariable+0x144>)
 800796c:	6913      	ldr	r3, [r2, #16]
 800796e:	2102      	movs	r1, #2
 8007970:	438b      	bics	r3, r1
 8007972:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	9901      	ldr	r1, [sp, #4]
 800797a:	2001      	movs	r0, #1
 800797c:	f008 fd2e 	bl	80103dc <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007980:	480b      	ldr	r0, [pc, #44]	; (80079b0 <EE_WriteVariable+0x13c>)
 8007982:	f008 fcfd 	bl	8010380 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007986:	2800      	cmp	r0, #0
 8007988:	d003      	beq.n	8007992 <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <EE_WriteVariable+0x140>)
 800798c:	69dc      	ldr	r4, [r3, #28]
 800798e:	b2a4      	uxth	r4, r4
 8007990:	e780      	b.n	8007894 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007992:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <EE_WriteVariable+0x144>)
 8007994:	6913      	ldr	r3, [r2, #16]
 8007996:	2101      	movs	r1, #1
 8007998:	438b      	bics	r3, r1
 800799a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800799c:	f008 fce6 	bl	801036c <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 80079a0:	2400      	movs	r4, #0
 80079a2:	e777      	b.n	8007894 <EE_WriteVariable+0x20>
 80079a4:	0801e000 	.word	0x0801e000
 80079a8:	0801f000 	.word	0x0801f000
 80079ac:	0000eeee 	.word	0x0000eeee
 80079b0:	0000c350 	.word	0x0000c350
 80079b4:	20006d18 	.word	0x20006d18
 80079b8:	40022000 	.word	0x40022000
 80079bc:	20001428 	.word	0x20001428
 80079c0:	00000401 	.word	0x00000401

080079c4 <EE_Format>:
{
 80079c4:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 80079c6:	f008 fcbf 	bl	8010348 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 80079ca:	4829      	ldr	r0, [pc, #164]	; (8007a70 <EE_Format+0xac>)
 80079cc:	f008 fd7e 	bl	80104cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079d0:	4828      	ldr	r0, [pc, #160]	; (8007a74 <EE_Format+0xb0>)
 80079d2:	f008 fcd5 	bl	8010380 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d003      	beq.n	80079e2 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 80079da:	4b27      	ldr	r3, [pc, #156]	; (8007a78 <EE_Format+0xb4>)
 80079dc:	69d8      	ldr	r0, [r3, #28]
 80079de:	b280      	uxth	r0, r0
}
 80079e0:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079e2:	4826      	ldr	r0, [pc, #152]	; (8007a7c <EE_Format+0xb8>)
 80079e4:	f008 fd72 	bl	80104cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079e8:	4822      	ldr	r0, [pc, #136]	; (8007a74 <EE_Format+0xb0>)
 80079ea:	f008 fcc9 	bl	8010380 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d003      	beq.n	80079fa <EE_Format+0x36>
			return pFlash.ErrorCode;
 80079f2:	4b21      	ldr	r3, [pc, #132]	; (8007a78 <EE_Format+0xb4>)
 80079f4:	69d8      	ldr	r0, [r3, #28]
 80079f6:	b280      	uxth	r0, r0
 80079f8:	e7f2      	b.n	80079e0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80079fa:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <EE_Format+0xbc>)
 80079fc:	6913      	ldr	r3, [r2, #16]
 80079fe:	2102      	movs	r1, #2
 8007a00:	438b      	bics	r3, r1
 8007a02:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007a04:	2200      	movs	r2, #0
 8007a06:	2300      	movs	r3, #0
 8007a08:	4919      	ldr	r1, [pc, #100]	; (8007a70 <EE_Format+0xac>)
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	f008 fce6 	bl	80103dc <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a10:	4818      	ldr	r0, [pc, #96]	; (8007a74 <EE_Format+0xb0>)
 8007a12:	f008 fcb5 	bl	8010380 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d003      	beq.n	8007a22 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007a1a:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <EE_Format+0xb4>)
 8007a1c:	69d8      	ldr	r0, [r3, #28]
 8007a1e:	b280      	uxth	r0, r0
 8007a20:	e7de      	b.n	80079e0 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a22:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <EE_Format+0xbc>)
 8007a24:	6913      	ldr	r3, [r2, #16]
 8007a26:	2101      	movs	r1, #1
 8007a28:	438b      	bics	r3, r1
 8007a2a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a2c:	4815      	ldr	r0, [pc, #84]	; (8007a84 <EE_Format+0xc0>)
 8007a2e:	f008 fd4d 	bl	80104cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a32:	4810      	ldr	r0, [pc, #64]	; (8007a74 <EE_Format+0xb0>)
 8007a34:	f008 fca4 	bl	8010380 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d003      	beq.n	8007a44 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <EE_Format+0xb4>)
 8007a3e:	69d8      	ldr	r0, [r3, #28]
 8007a40:	b280      	uxth	r0, r0
 8007a42:	e7cd      	b.n	80079e0 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a44:	4810      	ldr	r0, [pc, #64]	; (8007a88 <EE_Format+0xc4>)
 8007a46:	f008 fd41 	bl	80104cc <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a4a:	480a      	ldr	r0, [pc, #40]	; (8007a74 <EE_Format+0xb0>)
 8007a4c:	f008 fc98 	bl	8010380 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d003      	beq.n	8007a5c <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <EE_Format+0xb4>)
 8007a56:	69d8      	ldr	r0, [r3, #28]
 8007a58:	b280      	uxth	r0, r0
 8007a5a:	e7c1      	b.n	80079e0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a5c:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <EE_Format+0xbc>)
 8007a5e:	6913      	ldr	r3, [r2, #16]
 8007a60:	2101      	movs	r1, #1
 8007a62:	438b      	bics	r3, r1
 8007a64:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007a66:	f008 fc81 	bl	801036c <HAL_FLASH_Lock>
  return FlashStatus;
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e7b8      	b.n	80079e0 <EE_Format+0x1c>
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	0801e000 	.word	0x0801e000
 8007a74:	0000c350 	.word	0x0000c350
 8007a78:	20006d18 	.word	0x20006d18
 8007a7c:	0801e800 	.word	0x0801e800
 8007a80:	40022000 	.word	0x40022000
 8007a84:	0801f000 	.word	0x0801f000
 8007a88:	0801f800 	.word	0x0801f800

08007a8c <EE_Init>:
{
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	46c6      	mov	lr, r8
 8007a90:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007a92:	f008 fc59 	bl	8010348 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007a96:	4bbe      	ldr	r3, [pc, #760]	; (8007d90 <EE_Init+0x304>)
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007a9c:	4abd      	ldr	r2, [pc, #756]	; (8007d94 <EE_Init+0x308>)
 8007a9e:	8812      	ldrh	r2, [r2, #0]
 8007aa0:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007aa2:	49bd      	ldr	r1, [pc, #756]	; (8007d98 <EE_Init+0x30c>)
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	d100      	bne.n	8007aaa <EE_Init+0x1e>
 8007aa8:	e074      	b.n	8007b94 <EE_Init+0x108>
 8007aaa:	49bc      	ldr	r1, [pc, #752]	; (8007d9c <EE_Init+0x310>)
 8007aac:	428b      	cmp	r3, r1
 8007aae:	d011      	beq.n	8007ad4 <EE_Init+0x48>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d100      	bne.n	8007ab6 <EE_Init+0x2a>
 8007ab4:	e109      	b.n	8007cca <EE_Init+0x23e>
      FlashStatus = EE_Format();
 8007ab6:	f7ff ff85 	bl	80079c4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007aba:	48b9      	ldr	r0, [pc, #740]	; (8007da0 <EE_Init+0x314>)
 8007abc:	f008 fc60 	bl	8010380 <FLASH_WaitForLastOperation>
 8007ac0:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d102      	bne.n	8007acc <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007ac6:	f008 fc51 	bl	801036c <HAL_FLASH_Lock>
  return HAL_OK;
 8007aca:	2600      	movs	r6, #0
}
 8007acc:	0030      	movs	r0, r6
 8007ace:	bc04      	pop	{r2}
 8007ad0:	4690      	mov	r8, r2
 8007ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d00d      	beq.n	8007af4 <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007ad8:	4baf      	ldr	r3, [pc, #700]	; (8007d98 <EE_Init+0x30c>)
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d028      	beq.n	8007b30 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 8007ade:	f7ff ff71 	bl	80079c4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ae2:	48af      	ldr	r0, [pc, #700]	; (8007da0 <EE_Init+0x314>)
 8007ae4:	f008 fc4c 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0ec      	beq.n	8007ac6 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007aec:	4bad      	ldr	r3, [pc, #692]	; (8007da4 <EE_Init+0x318>)
 8007aee:	69de      	ldr	r6, [r3, #28]
 8007af0:	b2b6      	uxth	r6, r6
 8007af2:	e7eb      	b.n	8007acc <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007af4:	48a6      	ldr	r0, [pc, #664]	; (8007d90 <EE_Init+0x304>)
 8007af6:	f008 fce9 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007afa:	48a9      	ldr	r0, [pc, #676]	; (8007da0 <EE_Init+0x314>)
 8007afc:	f008 fc40 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d003      	beq.n	8007b0c <EE_Init+0x80>
          return pFlash.ErrorCode;
 8007b04:	4ba7      	ldr	r3, [pc, #668]	; (8007da4 <EE_Init+0x318>)
 8007b06:	69de      	ldr	r6, [r3, #28]
 8007b08:	b2b6      	uxth	r6, r6
 8007b0a:	e7df      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b0c:	48a6      	ldr	r0, [pc, #664]	; (8007da8 <EE_Init+0x31c>)
 8007b0e:	f008 fcdd 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b12:	48a3      	ldr	r0, [pc, #652]	; (8007da0 <EE_Init+0x314>)
 8007b14:	f008 fc34 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d105      	bne.n	8007b28 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b1c:	4aa3      	ldr	r2, [pc, #652]	; (8007dac <EE_Init+0x320>)
 8007b1e:	6913      	ldr	r3, [r2, #16]
 8007b20:	2102      	movs	r1, #2
 8007b22:	438b      	bics	r3, r1
 8007b24:	6113      	str	r3, [r2, #16]
 8007b26:	e7ce      	b.n	8007ac6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007b28:	4b9e      	ldr	r3, [pc, #632]	; (8007da4 <EE_Init+0x318>)
 8007b2a:	69de      	ldr	r6, [r3, #28]
 8007b2c:	b2b6      	uxth	r6, r6
 8007b2e:	e7cd      	b.n	8007acc <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b30:	4897      	ldr	r0, [pc, #604]	; (8007d90 <EE_Init+0x304>)
 8007b32:	f008 fccb 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b36:	489a      	ldr	r0, [pc, #616]	; (8007da0 <EE_Init+0x314>)
 8007b38:	f008 fc22 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d003      	beq.n	8007b48 <EE_Init+0xbc>
          return pFlash.ErrorCode;
 8007b40:	4b98      	ldr	r3, [pc, #608]	; (8007da4 <EE_Init+0x318>)
 8007b42:	69de      	ldr	r6, [r3, #28]
 8007b44:	b2b6      	uxth	r6, r6
 8007b46:	e7c1      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b48:	4897      	ldr	r0, [pc, #604]	; (8007da8 <EE_Init+0x31c>)
 8007b4a:	f008 fcbf 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b4e:	4894      	ldr	r0, [pc, #592]	; (8007da0 <EE_Init+0x314>)
 8007b50:	f008 fc16 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d003      	beq.n	8007b60 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007b58:	4b92      	ldr	r3, [pc, #584]	; (8007da4 <EE_Init+0x318>)
 8007b5a:	69de      	ldr	r6, [r3, #28]
 8007b5c:	b2b6      	uxth	r6, r6
 8007b5e:	e7b5      	b.n	8007acc <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b60:	4a92      	ldr	r2, [pc, #584]	; (8007dac <EE_Init+0x320>)
 8007b62:	6913      	ldr	r3, [r2, #16]
 8007b64:	2102      	movs	r1, #2
 8007b66:	438b      	bics	r3, r1
 8007b68:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4989      	ldr	r1, [pc, #548]	; (8007d94 <EE_Init+0x308>)
 8007b70:	2001      	movs	r0, #1
 8007b72:	f008 fc33 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b76:	488a      	ldr	r0, [pc, #552]	; (8007da0 <EE_Init+0x314>)
 8007b78:	f008 fc02 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d105      	bne.n	8007b8c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b80:	4a8a      	ldr	r2, [pc, #552]	; (8007dac <EE_Init+0x320>)
 8007b82:	6913      	ldr	r3, [r2, #16]
 8007b84:	2101      	movs	r1, #1
 8007b86:	438b      	bics	r3, r1
 8007b88:	6113      	str	r3, [r2, #16]
 8007b8a:	e79c      	b.n	8007ac6 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007b8c:	4b85      	ldr	r3, [pc, #532]	; (8007da4 <EE_Init+0x318>)
 8007b8e:	69de      	ldr	r6, [r3, #28]
 8007b90:	b2b6      	uxth	r6, r6
 8007b92:	e79b      	b.n	8007acc <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	d157      	bne.n	8007c48 <EE_Init+0x1bc>
 8007b98:	2401      	movs	r4, #1
  int16_t x = -1;
 8007b9a:	2701      	movs	r7, #1
 8007b9c:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007b9e:	4d84      	ldr	r5, [pc, #528]	; (8007db0 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007ba0:	4b84      	ldr	r3, [pc, #528]	; (8007db4 <EE_Init+0x328>)
 8007ba2:	4698      	mov	r8, r3
 8007ba4:	e005      	b.n	8007bb2 <EE_Init+0x126>
            x = VarIdx;
 8007ba6:	b227      	sxth	r7, r4
 8007ba8:	e008      	b.n	8007bbc <EE_Init+0x130>
 8007baa:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007bac:	4b82      	ldr	r3, [pc, #520]	; (8007db8 <EE_Init+0x32c>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d018      	beq.n	8007be4 <EE_Init+0x158>
 8007bb2:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007bb4:	882b      	ldrh	r3, [r5, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	d0f4      	beq.n	8007ba6 <EE_Init+0x11a>
          if (VarIdx != x)
 8007bbc:	42bc      	cmp	r4, r7
 8007bbe:	d0f4      	beq.n	8007baa <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007bc0:	497c      	ldr	r1, [pc, #496]	; (8007db4 <EE_Init+0x328>)
 8007bc2:	0030      	movs	r0, r6
 8007bc4:	f7ff fe26 	bl	8007814 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007bc8:	2801      	cmp	r0, #1
 8007bca:	d0ee      	beq.n	8007baa <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007bcc:	4643      	mov	r3, r8
 8007bce:	8819      	ldrh	r1, [r3, #0]
 8007bd0:	0030      	movs	r0, r6
 8007bd2:	f7ff fdb3 	bl	800773c <EE_VerifyPageFullWriteVariable>
 8007bd6:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bd8:	4871      	ldr	r0, [pc, #452]	; (8007da0 <EE_Init+0x314>)
 8007bda:	f008 fbd1 	bl	8010380 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0e3      	beq.n	8007baa <EE_Init+0x11e>
 8007be2:	e773      	b.n	8007acc <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4969      	ldr	r1, [pc, #420]	; (8007d90 <EE_Init+0x304>)
 8007bea:	2001      	movs	r0, #1
 8007bec:	f008 fbf6 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bf0:	486b      	ldr	r0, [pc, #428]	; (8007da0 <EE_Init+0x314>)
 8007bf2:	f008 fbc5 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d003      	beq.n	8007c02 <EE_Init+0x176>
          return pFlash.ErrorCode;
 8007bfa:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <EE_Init+0x318>)
 8007bfc:	69de      	ldr	r6, [r3, #28]
 8007bfe:	b2b6      	uxth	r6, r6
 8007c00:	e764      	b.n	8007acc <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c02:	4a6a      	ldr	r2, [pc, #424]	; (8007dac <EE_Init+0x320>)
 8007c04:	6913      	ldr	r3, [r2, #16]
 8007c06:	2101      	movs	r1, #1
 8007c08:	438b      	bics	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c0c:	4861      	ldr	r0, [pc, #388]	; (8007d94 <EE_Init+0x308>)
 8007c0e:	f008 fc5d 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c12:	4863      	ldr	r0, [pc, #396]	; (8007da0 <EE_Init+0x314>)
 8007c14:	f008 fbb4 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d003      	beq.n	8007c24 <EE_Init+0x198>
          return pFlash.ErrorCode;
 8007c1c:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <EE_Init+0x318>)
 8007c1e:	69de      	ldr	r6, [r3, #28]
 8007c20:	b2b6      	uxth	r6, r6
 8007c22:	e753      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c24:	4865      	ldr	r0, [pc, #404]	; (8007dbc <EE_Init+0x330>)
 8007c26:	f008 fc51 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c2a:	485d      	ldr	r0, [pc, #372]	; (8007da0 <EE_Init+0x314>)
 8007c2c:	f008 fba8 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d105      	bne.n	8007c40 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c34:	4a5d      	ldr	r2, [pc, #372]	; (8007dac <EE_Init+0x320>)
 8007c36:	6913      	ldr	r3, [r2, #16]
 8007c38:	2102      	movs	r1, #2
 8007c3a:	438b      	bics	r3, r1
 8007c3c:	6113      	str	r3, [r2, #16]
 8007c3e:	e742      	b.n	8007ac6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c40:	4b58      	ldr	r3, [pc, #352]	; (8007da4 <EE_Init+0x318>)
 8007c42:	69de      	ldr	r6, [r3, #28]
 8007c44:	b2b6      	uxth	r6, r6
 8007c46:	e741      	b.n	8007acc <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007c48:	4b54      	ldr	r3, [pc, #336]	; (8007d9c <EE_Init+0x310>)
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d00b      	beq.n	8007c66 <EE_Init+0x1da>
        FlashStatus = EE_Format();
 8007c4e:	f7ff feb9 	bl	80079c4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c52:	4853      	ldr	r0, [pc, #332]	; (8007da0 <EE_Init+0x314>)
 8007c54:	f008 fb94 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d100      	bne.n	8007c5e <EE_Init+0x1d2>
 8007c5c:	e733      	b.n	8007ac6 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007c5e:	4b51      	ldr	r3, [pc, #324]	; (8007da4 <EE_Init+0x318>)
 8007c60:	69de      	ldr	r6, [r3, #28]
 8007c62:	b2b6      	uxth	r6, r6
 8007c64:	e732      	b.n	8007acc <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c66:	484b      	ldr	r0, [pc, #300]	; (8007d94 <EE_Init+0x308>)
 8007c68:	f008 fc30 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c6c:	484c      	ldr	r0, [pc, #304]	; (8007da0 <EE_Init+0x314>)
 8007c6e:	f008 fb87 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d003      	beq.n	8007c7e <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 8007c76:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <EE_Init+0x318>)
 8007c78:	69de      	ldr	r6, [r3, #28]
 8007c7a:	b2b6      	uxth	r6, r6
 8007c7c:	e726      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c7e:	484f      	ldr	r0, [pc, #316]	; (8007dbc <EE_Init+0x330>)
 8007c80:	f008 fc24 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c84:	4846      	ldr	r0, [pc, #280]	; (8007da0 <EE_Init+0x314>)
 8007c86:	f008 fb7b 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d003      	beq.n	8007c96 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007c8e:	4b45      	ldr	r3, [pc, #276]	; (8007da4 <EE_Init+0x318>)
 8007c90:	69de      	ldr	r6, [r3, #28]
 8007c92:	b2b6      	uxth	r6, r6
 8007c94:	e71a      	b.n	8007acc <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c96:	4a45      	ldr	r2, [pc, #276]	; (8007dac <EE_Init+0x320>)
 8007c98:	6913      	ldr	r3, [r2, #16]
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	438b      	bics	r3, r1
 8007c9e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	493a      	ldr	r1, [pc, #232]	; (8007d90 <EE_Init+0x304>)
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	f008 fb98 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cac:	483c      	ldr	r0, [pc, #240]	; (8007da0 <EE_Init+0x314>)
 8007cae:	f008 fb67 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d003      	beq.n	8007cbe <EE_Init+0x232>
          return pFlash.ErrorCode;
 8007cb6:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <EE_Init+0x318>)
 8007cb8:	69de      	ldr	r6, [r3, #28]
 8007cba:	b2b6      	uxth	r6, r6
 8007cbc:	e706      	b.n	8007acc <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007cbe:	4a3b      	ldr	r2, [pc, #236]	; (8007dac <EE_Init+0x320>)
 8007cc0:	6913      	ldr	r3, [r2, #16]
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	438b      	bics	r3, r1
 8007cc6:	6113      	str	r3, [r2, #16]
 8007cc8:	e6fd      	b.n	8007ac6 <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d009      	beq.n	8007ce2 <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007cce:	4b33      	ldr	r3, [pc, #204]	; (8007d9c <EE_Init+0x310>)
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d010      	beq.n	8007cf6 <EE_Init+0x26a>
 8007cd4:	2401      	movs	r4, #1
  int16_t x = -1;
 8007cd6:	2701      	movs	r7, #1
 8007cd8:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007cda:	4d39      	ldr	r5, [pc, #228]	; (8007dc0 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007cdc:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <EE_Init+0x328>)
 8007cde:	4698      	mov	r8, r3
 8007ce0:	e02d      	b.n	8007d3e <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 8007ce2:	f7ff fe6f 	bl	80079c4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ce6:	482e      	ldr	r0, [pc, #184]	; (8007da0 <EE_Init+0x314>)
 8007ce8:	f008 fb4a 	bl	8010380 <FLASH_WaitForLastOperation>
 8007cec:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d100      	bne.n	8007cf4 <EE_Init+0x268>
 8007cf2:	e6e8      	b.n	8007ac6 <EE_Init+0x3a>
 8007cf4:	e6ea      	b.n	8007acc <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cf6:	4827      	ldr	r0, [pc, #156]	; (8007d94 <EE_Init+0x308>)
 8007cf8:	f008 fbe8 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cfc:	4828      	ldr	r0, [pc, #160]	; (8007da0 <EE_Init+0x314>)
 8007cfe:	f008 fb3f 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d003      	beq.n	8007d0e <EE_Init+0x282>
          return pFlash.ErrorCode;
 8007d06:	4b27      	ldr	r3, [pc, #156]	; (8007da4 <EE_Init+0x318>)
 8007d08:	69de      	ldr	r6, [r3, #28]
 8007d0a:	b2b6      	uxth	r6, r6
 8007d0c:	e6de      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007d0e:	482b      	ldr	r0, [pc, #172]	; (8007dbc <EE_Init+0x330>)
 8007d10:	f008 fbdc 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d14:	4822      	ldr	r0, [pc, #136]	; (8007da0 <EE_Init+0x314>)
 8007d16:	f008 fb33 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d105      	bne.n	8007d2a <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d1e:	4a23      	ldr	r2, [pc, #140]	; (8007dac <EE_Init+0x320>)
 8007d20:	6913      	ldr	r3, [r2, #16]
 8007d22:	2102      	movs	r1, #2
 8007d24:	438b      	bics	r3, r1
 8007d26:	6113      	str	r3, [r2, #16]
 8007d28:	e6cd      	b.n	8007ac6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <EE_Init+0x318>)
 8007d2c:	69de      	ldr	r6, [r3, #28]
 8007d2e:	b2b6      	uxth	r6, r6
 8007d30:	e6cc      	b.n	8007acc <EE_Init+0x40>
            x = VarIdx;
 8007d32:	b227      	sxth	r7, r4
 8007d34:	e008      	b.n	8007d48 <EE_Init+0x2bc>
 8007d36:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007d38:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <EE_Init+0x32c>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d018      	beq.n	8007d70 <EE_Init+0x2e4>
 8007d3e:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007d40:	882b      	ldrh	r3, [r5, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	42b3      	cmp	r3, r6
 8007d46:	d0f4      	beq.n	8007d32 <EE_Init+0x2a6>
          if (VarIdx != x)
 8007d48:	42bc      	cmp	r4, r7
 8007d4a:	d0f4      	beq.n	8007d36 <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007d4c:	4919      	ldr	r1, [pc, #100]	; (8007db4 <EE_Init+0x328>)
 8007d4e:	0030      	movs	r0, r6
 8007d50:	f7ff fd60 	bl	8007814 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007d54:	2801      	cmp	r0, #1
 8007d56:	d0ee      	beq.n	8007d36 <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007d58:	4643      	mov	r3, r8
 8007d5a:	8819      	ldrh	r1, [r3, #0]
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	f7ff fced 	bl	800773c <EE_VerifyPageFullWriteVariable>
 8007d62:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d64:	480e      	ldr	r0, [pc, #56]	; (8007da0 <EE_Init+0x314>)
 8007d66:	f008 fb0b 	bl	8010380 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0e3      	beq.n	8007d36 <EE_Init+0x2aa>
 8007d6e:	e6ad      	b.n	8007acc <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007d70:	2200      	movs	r2, #0
 8007d72:	2300      	movs	r3, #0
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <EE_Init+0x308>)
 8007d76:	2001      	movs	r0, #1
 8007d78:	f008 fb30 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d7c:	4808      	ldr	r0, [pc, #32]	; (8007da0 <EE_Init+0x314>)
 8007d7e:	f008 faff 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d01e      	beq.n	8007dc4 <EE_Init+0x338>
          return pFlash.ErrorCode;
 8007d86:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <EE_Init+0x318>)
 8007d88:	69de      	ldr	r6, [r3, #28]
 8007d8a:	b2b6      	uxth	r6, r6
 8007d8c:	e69e      	b.n	8007acc <EE_Init+0x40>
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	0801e000 	.word	0x0801e000
 8007d94:	0801f000 	.word	0x0801f000
 8007d98:	0000eeee 	.word	0x0000eeee
 8007d9c:	0000ffff 	.word	0x0000ffff
 8007da0:	0000c350 	.word	0x0000c350
 8007da4:	20006d18 	.word	0x20006d18
 8007da8:	0801e800 	.word	0x0801e800
 8007dac:	40022000 	.word	0x40022000
 8007db0:	0801e006 	.word	0x0801e006
 8007db4:	20001428 	.word	0x20001428
 8007db8:	00000401 	.word	0x00000401
 8007dbc:	0801f800 	.word	0x0801f800
 8007dc0:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007dc4:	4a11      	ldr	r2, [pc, #68]	; (8007e0c <EE_Init+0x380>)
 8007dc6:	6913      	ldr	r3, [r2, #16]
 8007dc8:	2101      	movs	r1, #1
 8007dca:	438b      	bics	r3, r1
 8007dcc:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007dce:	4810      	ldr	r0, [pc, #64]	; (8007e10 <EE_Init+0x384>)
 8007dd0:	f008 fb7c 	bl	80104cc <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dd4:	480f      	ldr	r0, [pc, #60]	; (8007e14 <EE_Init+0x388>)
 8007dd6:	f008 fad3 	bl	8010380 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d003      	beq.n	8007de6 <EE_Init+0x35a>
          return pFlash.ErrorCode;
 8007dde:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <EE_Init+0x38c>)
 8007de0:	69de      	ldr	r6, [r3, #28]
 8007de2:	b2b6      	uxth	r6, r6
 8007de4:	e672      	b.n	8007acc <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <EE_Init+0x390>)
 8007de8:	f008 fb70 	bl	80104cc <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dec:	4809      	ldr	r0, [pc, #36]	; (8007e14 <EE_Init+0x388>)
 8007dee:	f008 fac7 	bl	8010380 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d105      	bne.n	8007e02 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <EE_Init+0x380>)
 8007df8:	6913      	ldr	r3, [r2, #16]
 8007dfa:	2102      	movs	r1, #2
 8007dfc:	438b      	bics	r3, r1
 8007dfe:	6113      	str	r3, [r2, #16]
 8007e00:	e661      	b.n	8007ac6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <EE_Init+0x38c>)
 8007e04:	69de      	ldr	r6, [r3, #28]
 8007e06:	b2b6      	uxth	r6, r6
 8007e08:	e660      	b.n	8007acc <EE_Init+0x40>
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	40022000 	.word	0x40022000
 8007e10:	0801e000 	.word	0x0801e000
 8007e14:	0000c350 	.word	0x0000c350
 8007e18:	20006d18 	.word	0x20006d18
 8007e1c:	0801e800 	.word	0x0801e800

08007e20 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	46c6      	mov	lr, r8
 8007e24:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007e26:	4c29      	ldr	r4, [pc, #164]	; (8007ecc <StartDefaultTask+0xac>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007e28:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8007e2a:	0027      	movs	r7, r4
 8007e2c:	e01f      	b.n	8007e6e <StartDefaultTask+0x4e>
				RTOS_IND_blink(200);
 8007e2e:	2680      	movs	r6, #128	; 0x80
 8007e30:	01f6      	lsls	r6, r6, #7
 8007e32:	4d27      	ldr	r5, [pc, #156]	; (8007ed0 <StartDefaultTask+0xb0>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	0031      	movs	r1, r6
 8007e38:	0028      	movs	r0, r5
 8007e3a:	f008 fc9f 	bl	801077c <HAL_GPIO_WritePin>
 8007e3e:	20c8      	movs	r0, #200	; 0xc8
 8007e40:	f005 fb99 	bl	800d576 <osDelay>
 8007e44:	2200      	movs	r2, #0
 8007e46:	0031      	movs	r1, r6
 8007e48:	0028      	movs	r0, r5
 8007e4a:	f008 fc97 	bl	801077c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007e4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <StartDefaultTask+0xac>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007e54:	f000 f9dc 	bl	8008210 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007e58:	f7fd fc42 	bl	80056e0 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <StartDefaultTask+0xb4>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <StartDefaultTask+0x4a>
 8007e64:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <StartDefaultTask+0xb8>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007e6a:	f007 fa3d 	bl	800f2e8 <vPortYield>
		switch (indMode)
 8007e6e:	7823      	ldrb	r3, [r4, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d004      	beq.n	8007e7e <StartDefaultTask+0x5e>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d016      	beq.n	8007ea6 <StartDefaultTask+0x86>
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d1eb      	bne.n	8007e54 <StartDefaultTask+0x34>
 8007e7c:	e7d7      	b.n	8007e2e <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007e7e:	2680      	movs	r6, #128	; 0x80
 8007e80:	01f6      	lsls	r6, r6, #7
 8007e82:	4d13      	ldr	r5, [pc, #76]	; (8007ed0 <StartDefaultTask+0xb0>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	0031      	movs	r1, r6
 8007e88:	0028      	movs	r0, r5
 8007e8a:	f008 fc77 	bl	801077c <HAL_GPIO_WritePin>
 8007e8e:	2064      	movs	r0, #100	; 0x64
 8007e90:	f005 fb71 	bl	800d576 <osDelay>
 8007e94:	2200      	movs	r2, #0
 8007e96:	0031      	movs	r1, r6
 8007e98:	0028      	movs	r0, r5
 8007e9a:	f008 fc6f 	bl	801077c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	7013      	strb	r3, [r2, #0]
				break;
 8007ea4:	e7d6      	b.n	8007e54 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8007ea6:	2680      	movs	r6, #128	; 0x80
 8007ea8:	01f6      	lsls	r6, r6, #7
 8007eaa:	4d09      	ldr	r5, [pc, #36]	; (8007ed0 <StartDefaultTask+0xb0>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	0031      	movs	r1, r6
 8007eb0:	0028      	movs	r0, r5
 8007eb2:	f008 fc63 	bl	801077c <HAL_GPIO_WritePin>
 8007eb6:	201e      	movs	r0, #30
 8007eb8:	f005 fb5d 	bl	800d576 <osDelay>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	0031      	movs	r1, r6
 8007ec0:	0028      	movs	r0, r5
 8007ec2:	f008 fc5b 	bl	801077c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	703b      	strb	r3, [r7, #0]
				break;
 8007eca:	e7c3      	b.n	8007e54 <StartDefaultTask+0x34>
 8007ecc:	20000ea2 	.word	0x20000ea2
 8007ed0:	48000800 	.word	0x48000800
 8007ed4:	20001493 	.word	0x20001493
 8007ed8:	20001492 	.word	0x20001492

08007edc <MX_FREERTOS_Init>:
{
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 8007ee0:	25a0      	movs	r5, #160	; 0xa0
 8007ee2:	006d      	lsls	r5, r5, #1
 8007ee4:	2400      	movs	r4, #0
 8007ee6:	9403      	str	r4, [sp, #12]
 8007ee8:	9402      	str	r4, [sp, #8]
 8007eea:	4b53      	ldr	r3, [pc, #332]	; (8008038 <MX_FREERTOS_Init+0x15c>)
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	2603      	movs	r6, #3
 8007ef0:	9600      	str	r6, [sp, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	002a      	movs	r2, r5
 8007ef6:	4951      	ldr	r1, [pc, #324]	; (800803c <MX_FREERTOS_Init+0x160>)
 8007ef8:	4851      	ldr	r0, [pc, #324]	; (8008040 <MX_FREERTOS_Init+0x164>)
 8007efa:	f006 f937 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 8007efe:	9403      	str	r4, [sp, #12]
 8007f00:	9402      	str	r4, [sp, #8]
 8007f02:	4b50      	ldr	r3, [pc, #320]	; (8008044 <MX_FREERTOS_Init+0x168>)
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	9600      	str	r6, [sp, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	002a      	movs	r2, r5
 8007f0c:	494e      	ldr	r1, [pc, #312]	; (8008048 <MX_FREERTOS_Init+0x16c>)
 8007f0e:	484f      	ldr	r0, [pc, #316]	; (800804c <MX_FREERTOS_Init+0x170>)
 8007f10:	f006 f92c 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007f14:	9403      	str	r4, [sp, #12]
 8007f16:	9402      	str	r4, [sp, #8]
 8007f18:	4b4d      	ldr	r3, [pc, #308]	; (8008050 <MX_FREERTOS_Init+0x174>)
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	9600      	str	r6, [sp, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	002a      	movs	r2, r5
 8007f22:	494c      	ldr	r1, [pc, #304]	; (8008054 <MX_FREERTOS_Init+0x178>)
 8007f24:	484c      	ldr	r0, [pc, #304]	; (8008058 <MX_FREERTOS_Init+0x17c>)
 8007f26:	f006 f921 	bl	800e16c <xTaskGenericCreate>
	vRegisterCLICommands();
 8007f2a:	f7ff fa83 	bl	8007434 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 8007f2e:	9403      	str	r4, [sp, #12]
 8007f30:	9402      	str	r4, [sp, #8]
 8007f32:	4b4a      	ldr	r3, [pc, #296]	; (800805c <MX_FREERTOS_Init+0x180>)
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	9600      	str	r6, [sp, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	002a      	movs	r2, r5
 8007f3c:	4948      	ldr	r1, [pc, #288]	; (8008060 <MX_FREERTOS_Init+0x184>)
 8007f3e:	4849      	ldr	r0, [pc, #292]	; (8008064 <MX_FREERTOS_Init+0x188>)
 8007f40:	f006 f914 	bl	800e16c <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007f44:	4d48      	ldr	r5, [pc, #288]	; (8008068 <MX_FREERTOS_Init+0x18c>)
 8007f46:	9403      	str	r4, [sp, #12]
 8007f48:	9402      	str	r4, [sp, #8]
 8007f4a:	4b48      	ldr	r3, [pc, #288]	; (800806c <MX_FREERTOS_Init+0x190>)
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	3601      	adds	r6, #1
 8007f50:	9600      	str	r6, [sp, #0]
 8007f52:	2301      	movs	r3, #1
 8007f54:	22a0      	movs	r2, #160	; 0xa0
 8007f56:	4946      	ldr	r1, [pc, #280]	; (8008070 <MX_FREERTOS_Init+0x194>)
 8007f58:	0028      	movs	r0, r5
 8007f5a:	f006 f907 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 8007f5e:	9403      	str	r4, [sp, #12]
 8007f60:	9402      	str	r4, [sp, #8]
 8007f62:	4b44      	ldr	r3, [pc, #272]	; (8008074 <MX_FREERTOS_Init+0x198>)
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	9600      	str	r6, [sp, #0]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	22a0      	movs	r2, #160	; 0xa0
 8007f6c:	4942      	ldr	r1, [pc, #264]	; (8008078 <MX_FREERTOS_Init+0x19c>)
 8007f6e:	0028      	movs	r0, r5
 8007f70:	f006 f8fc 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007f74:	9403      	str	r4, [sp, #12]
 8007f76:	9402      	str	r4, [sp, #8]
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <MX_FREERTOS_Init+0x1a0>)
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	9600      	str	r6, [sp, #0]
 8007f7e:	2303      	movs	r3, #3
 8007f80:	22a0      	movs	r2, #160	; 0xa0
 8007f82:	493f      	ldr	r1, [pc, #252]	; (8008080 <MX_FREERTOS_Init+0x1a4>)
 8007f84:	0028      	movs	r0, r5
 8007f86:	f006 f8f1 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007f8a:	9403      	str	r4, [sp, #12]
 8007f8c:	9402      	str	r4, [sp, #8]
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <MX_FREERTOS_Init+0x1a8>)
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	9600      	str	r6, [sp, #0]
 8007f94:	2304      	movs	r3, #4
 8007f96:	22a0      	movs	r2, #160	; 0xa0
 8007f98:	493b      	ldr	r1, [pc, #236]	; (8008088 <MX_FREERTOS_Init+0x1ac>)
 8007f9a:	0028      	movs	r0, r5
 8007f9c:	f006 f8e6 	bl	800e16c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8007fa0:	9403      	str	r4, [sp, #12]
 8007fa2:	9402      	str	r4, [sp, #8]
 8007fa4:	4b39      	ldr	r3, [pc, #228]	; (800808c <MX_FREERTOS_Init+0x1b0>)
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	9600      	str	r6, [sp, #0]
 8007faa:	2305      	movs	r3, #5
 8007fac:	22a0      	movs	r2, #160	; 0xa0
 8007fae:	4938      	ldr	r1, [pc, #224]	; (8008090 <MX_FREERTOS_Init+0x1b4>)
 8007fb0:	0028      	movs	r0, r5
 8007fb2:	f006 f8db 	bl	800e16c <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007fb6:	940d      	str	r4, [sp, #52]	; 0x34
 8007fb8:	2101      	movs	r1, #1
 8007fba:	a80d      	add	r0, sp, #52	; 0x34
 8007fbc:	f005 fae3 	bl	800d586 <osSemaphoreCreate>
 8007fc0:	4e34      	ldr	r6, [pc, #208]	; (8008094 <MX_FREERTOS_Init+0x1b8>)
 8007fc2:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007fc4:	940c      	str	r4, [sp, #48]	; 0x30
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	a80c      	add	r0, sp, #48	; 0x30
 8007fca:	f005 fadc 	bl	800d586 <osSemaphoreCreate>
 8007fce:	4d32      	ldr	r5, [pc, #200]	; (8008098 <MX_FREERTOS_Init+0x1bc>)
 8007fd0:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8007fd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	a80b      	add	r0, sp, #44	; 0x2c
 8007fd8:	f005 fad5 	bl	800d586 <osSemaphoreCreate>
 8007fdc:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8007fde:	940a      	str	r4, [sp, #40]	; 0x28
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	a80a      	add	r0, sp, #40	; 0x28
 8007fe4:	f005 facf 	bl	800d586 <osSemaphoreCreate>
 8007fe8:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8007fea:	9409      	str	r4, [sp, #36]	; 0x24
 8007fec:	2101      	movs	r1, #1
 8007fee:	a809      	add	r0, sp, #36	; 0x24
 8007ff0:	f005 fac9 	bl	800d586 <osSemaphoreCreate>
 8007ff4:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8007ff6:	9408      	str	r4, [sp, #32]
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	a808      	add	r0, sp, #32
 8007ffc:	f005 fac3 	bl	800d586 <osSemaphoreCreate>
 8008000:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8008002:	9407      	str	r4, [sp, #28]
 8008004:	2101      	movs	r1, #1
 8008006:	a807      	add	r0, sp, #28
 8008008:	f005 fabd 	bl	800d586 <osSemaphoreCreate>
 800800c:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800800e:	9406      	str	r4, [sp, #24]
 8008010:	2101      	movs	r1, #1
 8008012:	a806      	add	r0, sp, #24
 8008014:	f005 fab7 	bl	800d586 <osSemaphoreCreate>
 8008018:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 800801a:	9405      	str	r4, [sp, #20]
 800801c:	2101      	movs	r1, #1
 800801e:	a805      	add	r0, sp, #20
 8008020:	f005 fab1 	bl	800d586 <osSemaphoreCreate>
 8008024:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8008026:	9404      	str	r4, [sp, #16]
 8008028:	2101      	movs	r1, #1
 800802a:	a804      	add	r0, sp, #16
 800802c:	f005 faab 	bl	800d586 <osSemaphoreCreate>
 8008030:	6168      	str	r0, [r5, #20]
}
 8008032:	b00e      	add	sp, #56	; 0x38
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	20001448 	.word	0x20001448
 800803c:	08019db0 	.word	0x08019db0
 8008040:	08007e21 	.word	0x08007e21
 8008044:	2000142c 	.word	0x2000142c
 8008048:	08019dbc 	.word	0x08019dbc
 800804c:	080093b9 	.word	0x080093b9
 8008050:	20001444 	.word	0x20001444
 8008054:	08019dc8 	.word	0x08019dc8
 8008058:	08012903 	.word	0x08012903
 800805c:	20001450 	.word	0x20001450
 8008060:	08019dd4 	.word	0x08019dd4
 8008064:	0800535d 	.word	0x0800535d
 8008068:	08009759 	.word	0x08009759
 800806c:	20001430 	.word	0x20001430
 8008070:	08019ddc 	.word	0x08019ddc
 8008074:	20001434 	.word	0x20001434
 8008078:	08019de8 	.word	0x08019de8
 800807c:	20001438 	.word	0x20001438
 8008080:	08019df4 	.word	0x08019df4
 8008084:	2000143c 	.word	0x2000143c
 8008088:	08019e00 	.word	0x08019e00
 800808c:	20001440 	.word	0x20001440
 8008090:	08019e0c 	.word	0x08019e0c
 8008094:	20006934 	.word	0x20006934
 8008098:	20006918 	.word	0x20006918

0800809c <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800809c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800809e:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <vMainConfigureTimerForRunTimeStats+0x14>)
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	4904      	ldr	r1, [pc, #16]	; (80080b4 <vMainConfigureTimerForRunTimeStats+0x18>)
 80080a4:	f7f8 f854 	bl	8000150 <__udivsi3>
 80080a8:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80080aa:	6018      	str	r0, [r3, #0]
}
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	20000094 	.word	0x20000094
 80080b4:	00002710 	.word	0x00002710
 80080b8:	2000144c 	.word	0x2000144c

080080bc <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 80080bc:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <ulMainGetRunTimeCounterValue+0x40>)
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	21fa      	movs	r1, #250	; 0xfa
 80080c4:	0089      	lsls	r1, r1, #2
 80080c6:	f7f8 f843 	bl	8000150 <__udivsi3>
 80080ca:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80080cc:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <ulMainGetRunTimeCounterValue+0x44>)
 80080ce:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 80080d0:	f006 f9de 	bl	800e490 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <ulMainGetRunTimeCounterValue+0x48>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	015b      	lsls	r3, r3, #5
 80080da:	d50d      	bpl.n	80080f8 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 80080dc:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <ulMainGetRunTimeCounterValue+0x44>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 80080e4:	0084      	lsls	r4, r0, #2
 80080e6:	1824      	adds	r4, r4, r0
 80080e8:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <ulMainGetRunTimeCounterValue+0x4c>)
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	0028      	movs	r0, r5
 80080f0:	f7f8 f82e 	bl	8000150 <__udivsi3>
 80080f4:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80080f8:	1b2d      	subs	r5, r5, r4
 80080fa:	e7f3      	b.n	80080e4 <ulMainGetRunTimeCounterValue+0x28>
 80080fc:	20000094 	.word	0x20000094
 8008100:	e000e018 	.word	0xe000e018
 8008104:	e000ed04 	.word	0xe000ed04
 8008108:	2000144c 	.word	0x2000144c

0800810c <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 800810c:	4770      	bx	lr

0800810e <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 800810e:	4770      	bx	lr

08008110 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 8008110:	4770      	bx	lr

08008112 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 8008112:	4770      	bx	lr

08008114 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8008114:	4770      	bx	lr

08008116 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8008116:	4770      	bx	lr

08008118 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8008118:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 800811a:	00c2      	lsls	r2, r0, #3
 800811c:	1812      	adds	r2, r2, r0
 800811e:	4b1b      	ldr	r3, [pc, #108]	; (800818c <CheckForTimedButtonPress+0x74>)
 8008120:	189b      	adds	r3, r3, r2
 8008122:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 8008124:	0082      	lsls	r2, r0, #2
 8008126:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <CheckForTimedButtonPress+0x78>)
 8008128:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800812a:	0163      	lsls	r3, r4, #5
 800812c:	1b1b      	subs	r3, r3, r4
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	191b      	adds	r3, r3, r4
 8008132:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8008134:	4299      	cmp	r1, r3
 8008136:	d01c      	beq.n	8008172 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008138:	00c2      	lsls	r2, r0, #3
 800813a:	1812      	adds	r2, r2, r0
 800813c:	4b13      	ldr	r3, [pc, #76]	; (800818c <CheckForTimedButtonPress+0x74>)
 800813e:	189b      	adds	r3, r3, r2
 8008140:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008142:	0163      	lsls	r3, r4, #5
 8008144:	1b1b      	subs	r3, r3, r4
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	191b      	adds	r3, r3, r4
 800814a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 800814c:	4299      	cmp	r1, r3
 800814e:	d017      	beq.n	8008180 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008150:	00c2      	lsls	r2, r0, #3
 8008152:	1812      	adds	r2, r2, r0
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <CheckForTimedButtonPress+0x74>)
 8008156:	189b      	adds	r3, r3, r2
 8008158:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800815a:	0163      	lsls	r3, r4, #5
 800815c:	1b1b      	subs	r3, r3, r4
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	191b      	adds	r3, r3, r4
 8008162:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008164:	4299      	cmp	r1, r3
 8008166:	d109      	bne.n	800817c <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8008168:	0010      	movs	r0, r2
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <CheckForTimedButtonPress+0x74>)
 800816c:	220a      	movs	r2, #10
 800816e:	54c2      	strb	r2, [r0, r3]
 8008170:	e004      	b.n	800817c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8008172:	00c3      	lsls	r3, r0, #3
 8008174:	1818      	adds	r0, r3, r0
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <CheckForTimedButtonPress+0x74>)
 8008178:	2209      	movs	r2, #9
 800817a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800817c:	2000      	movs	r0, #0
 800817e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008180:	0010      	movs	r0, r2
 8008182:	4b02      	ldr	r3, [pc, #8]	; (800818c <CheckForTimedButtonPress+0x74>)
 8008184:	220a      	movs	r2, #10
 8008186:	54c2      	strb	r2, [r0, r3]
 8008188:	e7f8      	b.n	800817c <CheckForTimedButtonPress+0x64>
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	20001454 	.word	0x20001454
 8008190:	20001494 	.word	0x20001494

08008194 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8008194:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008196:	00c2      	lsls	r2, r0, #3
 8008198:	1812      	adds	r2, r2, r0
 800819a:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 800819c:	189b      	adds	r3, r3, r2
 800819e:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 80081a0:	0082      	lsls	r2, r0, #2
 80081a2:	4b1a      	ldr	r3, [pc, #104]	; (800820c <CheckForTimedButtonRelease+0x78>)
 80081a4:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80081a6:	0163      	lsls	r3, r4, #5
 80081a8:	1b1b      	subs	r3, r3, r4
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	191b      	adds	r3, r3, r4
 80081ae:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d01c      	beq.n	80081ee <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80081b4:	00c2      	lsls	r2, r0, #3
 80081b6:	1812      	adds	r2, r2, r0
 80081b8:	4b13      	ldr	r3, [pc, #76]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80081be:	0163      	lsls	r3, r4, #5
 80081c0:	1b1b      	subs	r3, r3, r4
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	191b      	adds	r3, r3, r4
 80081c6:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d017      	beq.n	80081fc <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80081cc:	00c2      	lsls	r2, r0, #3
 80081ce:	1812      	adds	r2, r2, r0
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80081d6:	0163      	lsls	r3, r4, #5
 80081d8:	1b1b      	subs	r3, r3, r4
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	191b      	adds	r3, r3, r4
 80081de:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d109      	bne.n	80081f8 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 80081e4:	0010      	movs	r0, r2
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 80081e8:	220d      	movs	r2, #13
 80081ea:	54c2      	strb	r2, [r0, r3]
 80081ec:	e004      	b.n	80081f8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80081ee:	00c3      	lsls	r3, r0, #3
 80081f0:	1818      	adds	r0, r3, r0
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 80081f4:	220c      	movs	r2, #12
 80081f6:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 80081f8:	2000      	movs	r0, #0
 80081fa:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80081fc:	0010      	movs	r0, r2
 80081fe:	4b02      	ldr	r3, [pc, #8]	; (8008208 <CheckForTimedButtonRelease+0x74>)
 8008200:	220d      	movs	r2, #13
 8008202:	54c2      	strb	r2, [r0, r3]
 8008204:	e7f8      	b.n	80081f8 <CheckForTimedButtonRelease+0x64>
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	20001454 	.word	0x20001454
 800820c:	200014ac 	.word	0x200014ac

08008210 <CheckAttachedButtons>:
{
 8008210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008212:	46de      	mov	lr, fp
 8008214:	4657      	mov	r7, sl
 8008216:	464e      	mov	r6, r9
 8008218:	4645      	mov	r5, r8
 800821a:	b5e0      	push	{r5, r6, r7, lr}
 800821c:	b089      	sub	sp, #36	; 0x24
 800821e:	4dbd      	ldr	r5, [pc, #756]	; (8008514 <CheckAttachedButtons+0x304>)
 8008220:	2404      	movs	r4, #4
 8008222:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	469b      	mov	fp, r3
 8008228:	4699      	mov	r9, r3
 800822a:	e111      	b.n	8008450 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 800822c:	230e      	movs	r3, #14
 800822e:	aa02      	add	r2, sp, #8
 8008230:	4694      	mov	ip, r2
 8008232:	4463      	add	r3, ip
 8008234:	8819      	ldrh	r1, [r3, #0]
 8008236:	2201      	movs	r2, #1
 8008238:	9807      	ldr	r0, [sp, #28]
 800823a:	f008 fa9f 	bl	801077c <HAL_GPIO_WritePin>
 800823e:	200a      	movs	r0, #10
 8008240:	f004 fea6 	bl	800cf90 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8008244:	ab05      	add	r3, sp, #20
 8008246:	8819      	ldrh	r1, [r3, #0]
 8008248:	9806      	ldr	r0, [sp, #24]
 800824a:	f008 fa91 	bl	8010770 <HAL_GPIO_ReadPin>
 800824e:	4681      	mov	r9, r0
 8008250:	e126      	b.n	80084a0 <CheckAttachedButtons+0x290>
			switch (button[i].type)
 8008252:	2b01      	cmp	r3, #1
 8008254:	d105      	bne.n	8008262 <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 8008256:	464b      	mov	r3, r9
 8008258:	2b01      	cmp	r3, #1
 800825a:	d046      	beq.n	80082ea <CheckAttachedButtons+0xda>
					else if (connected == GPIO_PIN_RESET)
 800825c:	2b00      	cmp	r3, #0
 800825e:	d100      	bne.n	8008262 <CheckAttachedButtons+0x52>
 8008260:	e1c6      	b.n	80085f0 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON)												
 8008262:	465b      	mov	r3, fp
 8008264:	2b04      	cmp	r3, #4
 8008266:	d001      	beq.n	800826c <CheckAttachedButtons+0x5c>
 8008268:	2b02      	cmp	r3, #2
 800826a:	d107      	bne.n	800827c <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)	
 800826c:	4baa      	ldr	r3, [pc, #680]	; (8008518 <CheckAttachedButtons+0x308>)
 800826e:	58e3      	ldr	r3, [r4, r3]
 8008270:	4aaa      	ldr	r2, [pc, #680]	; (800851c <CheckAttachedButtons+0x30c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d842      	bhi.n	80082fc <CheckAttachedButtons+0xec>
					++pressCounter[i];																			// Advance the debounce counter
 8008276:	3301      	adds	r3, #1
 8008278:	4aa7      	ldr	r2, [pc, #668]	; (8008518 <CheckAttachedButtons+0x308>)
 800827a:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF)												
 800827c:	23fd      	movs	r3, #253	; 0xfd
 800827e:	465a      	mov	r2, fp
 8008280:	4013      	ands	r3, r2
 8008282:	2b01      	cmp	r3, #1
 8008284:	d100      	bne.n	8008288 <CheckAttachedButtons+0x78>
 8008286:	e1b7      	b.n	80085f8 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8008288:	4ba3      	ldr	r3, [pc, #652]	; (8008518 <CheckAttachedButtons+0x308>)
 800828a:	58e3      	ldr	r3, [r4, r3]
 800828c:	4aa4      	ldr	r2, [pc, #656]	; (8008520 <CheckAttachedButtons+0x310>)
 800828e:	8812      	ldrh	r2, [r2, #0]
 8008290:	4293      	cmp	r3, r2
 8008292:	d36f      	bcc.n	8008374 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce)
 8008294:	d045      	beq.n	8008322 <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008296:	4ba3      	ldr	r3, [pc, #652]	; (8008524 <CheckAttachedButtons+0x314>)
 8008298:	58e3      	ldr	r3, [r4, r3]
 800829a:	429a      	cmp	r2, r3
 800829c:	d202      	bcs.n	80082a4 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;					
 800829e:	4ba1      	ldr	r3, [pc, #644]	; (8008524 <CheckAttachedButtons+0x314>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 80082a4:	4b9c      	ldr	r3, [pc, #624]	; (8008518 <CheckAttachedButtons+0x308>)
 80082a6:	58e3      	ldr	r3, [r4, r3]
 80082a8:	4a9d      	ldr	r2, [pc, #628]	; (8008520 <CheckAttachedButtons+0x310>)
 80082aa:	8852      	ldrh	r2, [r2, #2]
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d952      	bls.n	8008356 <CheckAttachedButtons+0x146>
 80082b0:	22f4      	movs	r2, #244	; 0xf4
 80082b2:	32ff      	adds	r2, #255	; 0xff
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d84e      	bhi.n	8008356 <CheckAttachedButtons+0x146>
					if (clicked == 0)
 80082b8:	4b9b      	ldr	r3, [pc, #620]	; (8008528 <CheckAttachedButtons+0x318>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d137      	bne.n	8008330 <CheckAttachedButtons+0x120>
						clicked = 1;																					// Record a possible single click 
 80082c0:	4b99      	ldr	r3, [pc, #612]	; (8008528 <CheckAttachedButtons+0x318>)
 80082c2:	3af3      	subs	r2, #243	; 0xf3
 80082c4:	3aff      	subs	r2, #255	; 0xff
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e054      	b.n	8008374 <CheckAttachedButtons+0x164>
					if (connected == GPIO_PIN_SET)	
 80082ca:	464b      	mov	r3, r9
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d00f      	beq.n	80082f0 <CheckAttachedButtons+0xe0>
					else if (connected == GPIO_PIN_RESET) 
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1c6      	bne.n	8008262 <CheckAttachedButtons+0x52>
						state = OPEN;	
 80082d4:	2303      	movs	r3, #3
 80082d6:	469b      	mov	fp, r3
 80082d8:	e18e      	b.n	80085f8 <CheckAttachedButtons+0x3e8>
					if (connected == GPIO_PIN_SET)	
 80082da:	464b      	mov	r3, r9
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d00a      	beq.n	80082f6 <CheckAttachedButtons+0xe6>
					else if (connected == GPIO_PIN_RESET) 
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1be      	bne.n	8008262 <CheckAttachedButtons+0x52>
						state = OFF;
 80082e4:	2301      	movs	r3, #1
 80082e6:	469b      	mov	fp, r3
 80082e8:	e186      	b.n	80085f8 <CheckAttachedButtons+0x3e8>
						state = CLOSED;
 80082ea:	2304      	movs	r3, #4
 80082ec:	469b      	mov	fp, r3
 80082ee:	e7bd      	b.n	800826c <CheckAttachedButtons+0x5c>
						state = CLOSED;
 80082f0:	2304      	movs	r3, #4
 80082f2:	469b      	mov	fp, r3
 80082f4:	e7ba      	b.n	800826c <CheckAttachedButtons+0x5c>
 80082f6:	2302      	movs	r3, #2
 80082f8:	469b      	mov	fp, r3
 80082fa:	e7b7      	b.n	800826c <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80082fc:	4b86      	ldr	r3, [pc, #536]	; (8008518 <CheckAttachedButtons+0x308>)
 80082fe:	2200      	movs	r2, #0
 8008300:	50e2      	str	r2, [r4, r3]
 8008302:	e7bb      	b.n	800827c <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8008304:	4b87      	ldr	r3, [pc, #540]	; (8008524 <CheckAttachedButtons+0x314>)
 8008306:	2200      	movs	r2, #0
 8008308:	50e2      	str	r2, [r4, r3]
 800830a:	e17e      	b.n	800860a <CheckAttachedButtons+0x3fa>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800830c:	4b87      	ldr	r3, [pc, #540]	; (800852c <CheckAttachedButtons+0x31c>)
 800830e:	5cf3      	ldrb	r3, [r6, r3]
 8008310:	4a83      	ldr	r2, [pc, #524]	; (8008520 <CheckAttachedButtons+0x310>)
 8008312:	7952      	ldrb	r2, [r2, #5]
 8008314:	429a      	cmp	r2, r3
 8008316:	d200      	bcs.n	800831a <CheckAttachedButtons+0x10a>
 8008318:	e183      	b.n	8008622 <CheckAttachedButtons+0x412>
					++dblCounter[i];			
 800831a:	3301      	adds	r3, #1
 800831c:	4a83      	ldr	r2, [pc, #524]	; (800852c <CheckAttachedButtons+0x31c>)
 800831e:	54b3      	strb	r3, [r6, r2]
 8008320:	e7b2      	b.n	8008288 <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8008322:	2107      	movs	r1, #7
 8008324:	4640      	mov	r0, r8
 8008326:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 8008328:	3301      	adds	r3, #1
 800832a:	497b      	ldr	r1, [pc, #492]	; (8008518 <CheckAttachedButtons+0x308>)
 800832c:	5063      	str	r3, [r4, r1]
 800832e:	e7b2      	b.n	8008296 <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 8008330:	2b02      	cmp	r3, #2
 8008332:	d11f      	bne.n	8008374 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8008334:	4b7d      	ldr	r3, [pc, #500]	; (800852c <CheckAttachedButtons+0x31c>)
 8008336:	5cf3      	ldrb	r3, [r6, r3]
 8008338:	4a79      	ldr	r2, [pc, #484]	; (8008520 <CheckAttachedButtons+0x310>)
 800833a:	7912      	ldrb	r2, [r2, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d219      	bcs.n	8008374 <CheckAttachedButtons+0x164>
 8008340:	4a77      	ldr	r2, [pc, #476]	; (8008520 <CheckAttachedButtons+0x310>)
 8008342:	7952      	ldrb	r2, [r2, #5]
 8008344:	429a      	cmp	r2, r3
 8008346:	d915      	bls.n	8008374 <CheckAttachedButtons+0x164>
							clicked = 3;																				// Record a possible double click 
 8008348:	4b77      	ldr	r3, [pc, #476]	; (8008528 <CheckAttachedButtons+0x318>)
 800834a:	2203      	movs	r2, #3
 800834c:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800834e:	4b77      	ldr	r3, [pc, #476]	; (800852c <CheckAttachedButtons+0x31c>)
 8008350:	2200      	movs	r2, #0
 8008352:	54f2      	strb	r2, [r6, r3]
 8008354:	e00e      	b.n	8008374 <CheckAttachedButtons+0x164>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008356:	3bf5      	subs	r3, #245	; 0xf5
 8008358:	3bff      	subs	r3, #255	; 0xff
 800835a:	4a75      	ldr	r2, [pc, #468]	; (8008530 <CheckAttachedButtons+0x320>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d809      	bhi.n	8008374 <CheckAttachedButtons+0x164>
					if (clicked)	clicked = 0;															// Cannot be a click
 8008360:	4b71      	ldr	r3, [pc, #452]	; (8008528 <CheckAttachedButtons+0x318>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <CheckAttachedButtons+0x15e>
 8008368:	4b6f      	ldr	r3, [pc, #444]	; (8008528 <CheckAttachedButtons+0x318>)
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800836e:	9803      	ldr	r0, [sp, #12]
 8008370:	f7ff fed2 	bl	8008118 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008374:	4b6b      	ldr	r3, [pc, #428]	; (8008524 <CheckAttachedButtons+0x314>)
 8008376:	58e3      	ldr	r3, [r4, r3]
 8008378:	4a69      	ldr	r2, [pc, #420]	; (8008520 <CheckAttachedButtons+0x310>)
 800837a:	8812      	ldrh	r2, [r2, #0]
 800837c:	4293      	cmp	r3, r2
 800837e:	d34d      	bcc.n	800841c <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8008380:	d02b      	beq.n	80083da <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008382:	4b65      	ldr	r3, [pc, #404]	; (8008518 <CheckAttachedButtons+0x308>)
 8008384:	58e3      	ldr	r3, [r4, r3]
 8008386:	429a      	cmp	r2, r3
 8008388:	d202      	bcs.n	8008390 <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;				
 800838a:	4b63      	ldr	r3, [pc, #396]	; (8008518 <CheckAttachedButtons+0x308>)
 800838c:	2200      	movs	r2, #0
 800838e:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8008390:	4b64      	ldr	r3, [pc, #400]	; (8008524 <CheckAttachedButtons+0x314>)
 8008392:	58e3      	ldr	r3, [r4, r3]
 8008394:	4a62      	ldr	r2, [pc, #392]	; (8008520 <CheckAttachedButtons+0x310>)
 8008396:	8852      	ldrh	r2, [r2, #2]
 8008398:	4293      	cmp	r3, r2
 800839a:	d93a      	bls.n	8008412 <CheckAttachedButtons+0x202>
 800839c:	22f4      	movs	r2, #244	; 0xf4
 800839e:	32ff      	adds	r2, #255	; 0xff
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d836      	bhi.n	8008412 <CheckAttachedButtons+0x202>
					if (clicked == 1)
 80083a4:	4b60      	ldr	r3, [pc, #384]	; (8008528 <CheckAttachedButtons+0x318>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d01d      	beq.n	80083e8 <CheckAttachedButtons+0x1d8>
					else if (clicked == 3)
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d135      	bne.n	800841c <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 80083b0:	3303      	adds	r3, #3
 80083b2:	4642      	mov	r2, r8
 80083b4:	7253      	strb	r3, [r2, #9]
						clicked = 0;																					// Prepare for a single click					
 80083b6:	4b5c      	ldr	r3, [pc, #368]	; (8008528 <CheckAttachedButtons+0x318>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 80083bc:	4b5d      	ldr	r3, [pc, #372]	; (8008534 <CheckAttachedButtons+0x324>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d13f      	bne.n	8008444 <CheckAttachedButtons+0x234>
 80083c4:	4643      	mov	r3, r8
 80083c6:	7c5b      	ldrb	r3, [r3, #17]
 80083c8:	079b      	lsls	r3, r3, #30
 80083ca:	d53b      	bpl.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80083cc:	4b59      	ldr	r3, [pc, #356]	; (8008534 <CheckAttachedButtons+0x324>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 80083d2:	9803      	ldr	r0, [sp, #12]
 80083d4:	f7ff fe9d 	bl	8008112 <buttonDblClickedCallback>
 80083d8:	e034      	b.n	8008444 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 80083da:	2108      	movs	r1, #8
 80083dc:	4640      	mov	r0, r8
 80083de:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 80083e0:	3301      	adds	r3, #1
 80083e2:	4950      	ldr	r1, [pc, #320]	; (8008524 <CheckAttachedButtons+0x314>)
 80083e4:	5063      	str	r3, [r4, r1]
 80083e6:	e7cc      	b.n	8008382 <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;														// Record a single button click event
 80083e8:	3304      	adds	r3, #4
 80083ea:	4642      	mov	r2, r8
 80083ec:	7253      	strb	r3, [r2, #9]
						clicked = 2;																					// Prepare for a double click
 80083ee:	4b4e      	ldr	r3, [pc, #312]	; (8008528 <CheckAttachedButtons+0x318>)
 80083f0:	2202      	movs	r2, #2
 80083f2:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80083f4:	4b4f      	ldr	r3, [pc, #316]	; (8008534 <CheckAttachedButtons+0x324>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d123      	bne.n	8008444 <CheckAttachedButtons+0x234>
 80083fc:	4643      	mov	r3, r8
 80083fe:	7c5b      	ldrb	r3, [r3, #17]
 8008400:	07db      	lsls	r3, r3, #31
 8008402:	d51f      	bpl.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8008404:	4b4b      	ldr	r3, [pc, #300]	; (8008534 <CheckAttachedButtons+0x324>)
 8008406:	2201      	movs	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 800840a:	9803      	ldr	r0, [sp, #12]
 800840c:	f7ff fe80 	bl	8008110 <buttonClickedCallback>
 8008410:	e018      	b.n	8008444 <CheckAttachedButtons+0x234>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8008412:	3bf5      	subs	r3, #245	; 0xf5
 8008414:	3bff      	subs	r3, #255	; 0xff
 8008416:	4a46      	ldr	r2, [pc, #280]	; (8008530 <CheckAttachedButtons+0x320>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d909      	bls.n	8008430 <CheckAttachedButtons+0x220>
			switch (button[i].state)
 800841c:	4643      	mov	r3, r8
 800841e:	7a5b      	ldrb	r3, [r3, #9]
 8008420:	3b05      	subs	r3, #5
 8008422:	b2da      	uxtb	r2, r3
 8008424:	2a09      	cmp	r2, #9
 8008426:	d80d      	bhi.n	8008444 <CheckAttachedButtons+0x234>
 8008428:	0093      	lsls	r3, r2, #2
 800842a:	4a43      	ldr	r2, [pc, #268]	; (8008538 <CheckAttachedButtons+0x328>)
 800842c:	58d3      	ldr	r3, [r2, r3]
 800842e:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008430:	9803      	ldr	r0, [sp, #12]
 8008432:	f7ff feaf 	bl	8008194 <CheckForTimedButtonRelease>
 8008436:	e7f1      	b.n	800841c <CheckAttachedButtons+0x20c>
					buttonPressedCallback(i);
 8008438:	9803      	ldr	r0, [sp, #12]
 800843a:	f7ff fe67 	bl	800810c <buttonPressedCallback>
					button[i].state = NONE;
 800843e:	2300      	movs	r3, #0
 8008440:	4642      	mov	r2, r8
 8008442:	7253      	strb	r3, [r2, #9]
 8008444:	3601      	adds	r6, #1
 8008446:	3509      	adds	r5, #9
 8008448:	3404      	adds	r4, #4
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800844a:	2c18      	cmp	r4, #24
 800844c:	d100      	bne.n	8008450 <CheckAttachedButtons+0x240>
 800844e:	e0ee      	b.n	800862e <CheckAttachedButtons+0x41e>
 8008450:	b2f3      	uxtb	r3, r6
 8008452:	9303      	str	r3, [sp, #12]
 8008454:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8008456:	7aab      	ldrb	r3, [r5, #10]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f3      	beq.n	8008444 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 800845c:	4b35      	ldr	r3, [pc, #212]	; (8008534 <CheckAttachedButtons+0x324>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d100      	bne.n	8008466 <CheckAttachedButtons+0x256>
 8008464:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008466:	230e      	movs	r3, #14
 8008468:	aa02      	add	r2, sp, #8
 800846a:	4694      	mov	ip, r2
 800846c:	4463      	add	r3, ip
 800846e:	469a      	mov	sl, r3
 8008470:	af05      	add	r7, sp, #20
 8008472:	9700      	str	r7, [sp, #0]
 8008474:	ab06      	add	r3, sp, #24
 8008476:	4652      	mov	r2, sl
 8008478:	a907      	add	r1, sp, #28
 800847a:	9803      	ldr	r0, [sp, #12]
 800847c:	f004 fa0a 	bl	800c894 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008480:	4653      	mov	r3, sl
 8008482:	8819      	ldrh	r1, [r3, #0]
 8008484:	2200      	movs	r2, #0
 8008486:	9807      	ldr	r0, [sp, #28]
 8008488:	f008 f978 	bl	801077c <HAL_GPIO_WritePin>
 800848c:	200a      	movs	r0, #10
 800848e:	f004 fd7f 	bl	800cf90 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008492:	8839      	ldrh	r1, [r7, #0]
 8008494:	9806      	ldr	r0, [sp, #24]
 8008496:	f008 f96b 	bl	8010770 <HAL_GPIO_ReadPin>
 800849a:	2800      	cmp	r0, #0
 800849c:	d100      	bne.n	80084a0 <CheckAttachedButtons+0x290>
 800849e:	e6c5      	b.n	800822c <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 80084a0:	230e      	movs	r3, #14
 80084a2:	aa02      	add	r2, sp, #8
 80084a4:	4694      	mov	ip, r2
 80084a6:	4463      	add	r3, ip
 80084a8:	8819      	ldrh	r1, [r3, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	9807      	ldr	r0, [sp, #28]
 80084ae:	f008 f965 	bl	801077c <HAL_GPIO_WritePin>
			switch (button[i].type)
 80084b2:	4643      	mov	r3, r8
 80084b4:	7a9b      	ldrb	r3, [r3, #10]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d100      	bne.n	80084bc <CheckAttachedButtons+0x2ac>
 80084ba:	e706      	b.n	80082ca <CheckAttachedButtons+0xba>
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	2a02      	cmp	r2, #2
 80084c0:	d800      	bhi.n	80084c4 <CheckAttachedButtons+0x2b4>
 80084c2:	e6c6      	b.n	8008252 <CheckAttachedButtons+0x42>
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d100      	bne.n	80084ca <CheckAttachedButtons+0x2ba>
 80084c8:	e707      	b.n	80082da <CheckAttachedButtons+0xca>
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d000      	beq.n	80084d0 <CheckAttachedButtons+0x2c0>
 80084ce:	e6c8      	b.n	8008262 <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 80084d0:	464b      	mov	r3, r9
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d100      	bne.n	80084d8 <CheckAttachedButtons+0x2c8>
 80084d6:	e08e      	b.n	80085f6 <CheckAttachedButtons+0x3e6>
					else if (connected == GPIO_PIN_RESET) 
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d000      	beq.n	80084de <CheckAttachedButtons+0x2ce>
 80084dc:	e6c1      	b.n	8008262 <CheckAttachedButtons+0x52>
 80084de:	2302      	movs	r3, #2
 80084e0:	469b      	mov	fp, r3
 80084e2:	e6c3      	b.n	800826c <CheckAttachedButtons+0x5c>
					buttonReleasedCallback(i);
 80084e4:	9803      	ldr	r0, [sp, #12]
 80084e6:	f7ff fe12 	bl	800810e <buttonReleasedCallback>
					button[i].state = NONE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	4642      	mov	r2, r8
 80084ee:	7253      	strb	r3, [r2, #9]
      		break;
 80084f0:	e7a8      	b.n	8008444 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 80084f2:	4b10      	ldr	r3, [pc, #64]	; (8008534 <CheckAttachedButtons+0x324>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1a4      	bne.n	8008444 <CheckAttachedButtons+0x234>
 80084fa:	4643      	mov	r3, r8
 80084fc:	7c5b      	ldrb	r3, [r3, #17]
 80084fe:	075b      	lsls	r3, r3, #29
 8008500:	d5a0      	bpl.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8008502:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <CheckAttachedButtons+0x324>)
 8008504:	2201      	movs	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8008508:	2101      	movs	r1, #1
 800850a:	9803      	ldr	r0, [sp, #12]
 800850c:	f7ff fe02 	bl	8008114 <buttonPressedForXCallback>
 8008510:	e798      	b.n	8008444 <CheckAttachedButtons+0x234>
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	20001454 	.word	0x20001454
 8008518:	20001494 	.word	0x20001494
 800851c:	0000fffe 	.word	0x0000fffe
 8008520:	20006898 	.word	0x20006898
 8008524:	200014ac 	.word	0x200014ac
 8008528:	2000148a 	.word	0x2000148a
 800852c:	2000148c 	.word	0x2000148c
 8008530:	0000fe0a 	.word	0x0000fe0a
 8008534:	20001492 	.word	0x20001492
 8008538:	08019e18 	.word	0x08019e18
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 800853c:	4b3f      	ldr	r3, [pc, #252]	; (800863c <CheckAttachedButtons+0x42c>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d000      	beq.n	8008546 <CheckAttachedButtons+0x336>
 8008544:	e77e      	b.n	8008444 <CheckAttachedButtons+0x234>
 8008546:	4643      	mov	r3, r8
 8008548:	7c5b      	ldrb	r3, [r3, #17]
 800854a:	071b      	lsls	r3, r3, #28
 800854c:	d400      	bmi.n	8008550 <CheckAttachedButtons+0x340>
 800854e:	e779      	b.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8008550:	4b3a      	ldr	r3, [pc, #232]	; (800863c <CheckAttachedButtons+0x42c>)
 8008552:	2201      	movs	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008556:	2102      	movs	r1, #2
 8008558:	9803      	ldr	r0, [sp, #12]
 800855a:	f7ff fddb 	bl	8008114 <buttonPressedForXCallback>
 800855e:	e771      	b.n	8008444 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8008560:	4b36      	ldr	r3, [pc, #216]	; (800863c <CheckAttachedButtons+0x42c>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d000      	beq.n	800856a <CheckAttachedButtons+0x35a>
 8008568:	e76c      	b.n	8008444 <CheckAttachedButtons+0x234>
 800856a:	4643      	mov	r3, r8
 800856c:	7c5b      	ldrb	r3, [r3, #17]
 800856e:	06db      	lsls	r3, r3, #27
 8008570:	d400      	bmi.n	8008574 <CheckAttachedButtons+0x364>
 8008572:	e767      	b.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8008574:	4b31      	ldr	r3, [pc, #196]	; (800863c <CheckAttachedButtons+0x42c>)
 8008576:	2201      	movs	r2, #1
 8008578:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 800857a:	2103      	movs	r1, #3
 800857c:	9803      	ldr	r0, [sp, #12]
 800857e:	f7ff fdc9 	bl	8008114 <buttonPressedForXCallback>
 8008582:	e75f      	b.n	8008444 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008584:	4b2d      	ldr	r3, [pc, #180]	; (800863c <CheckAttachedButtons+0x42c>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d000      	beq.n	800858e <CheckAttachedButtons+0x37e>
 800858c:	e75a      	b.n	8008444 <CheckAttachedButtons+0x234>
 800858e:	4643      	mov	r3, r8
 8008590:	7c5b      	ldrb	r3, [r3, #17]
 8008592:	069b      	lsls	r3, r3, #26
 8008594:	d400      	bmi.n	8008598 <CheckAttachedButtons+0x388>
 8008596:	e755      	b.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8008598:	4b28      	ldr	r3, [pc, #160]	; (800863c <CheckAttachedButtons+0x42c>)
 800859a:	2201      	movs	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 800859e:	2101      	movs	r1, #1
 80085a0:	9803      	ldr	r0, [sp, #12]
 80085a2:	f7ff fdb8 	bl	8008116 <buttonReleasedForYCallback>
 80085a6:	e74d      	b.n	8008444 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 80085a8:	4b24      	ldr	r3, [pc, #144]	; (800863c <CheckAttachedButtons+0x42c>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d000      	beq.n	80085b2 <CheckAttachedButtons+0x3a2>
 80085b0:	e748      	b.n	8008444 <CheckAttachedButtons+0x234>
 80085b2:	4643      	mov	r3, r8
 80085b4:	7c5b      	ldrb	r3, [r3, #17]
 80085b6:	065b      	lsls	r3, r3, #25
 80085b8:	d400      	bmi.n	80085bc <CheckAttachedButtons+0x3ac>
 80085ba:	e743      	b.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80085bc:	4b1f      	ldr	r3, [pc, #124]	; (800863c <CheckAttachedButtons+0x42c>)
 80085be:	2201      	movs	r2, #1
 80085c0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 80085c2:	2102      	movs	r1, #2
 80085c4:	9803      	ldr	r0, [sp, #12]
 80085c6:	f7ff fda6 	bl	8008116 <buttonReleasedForYCallback>
 80085ca:	e73b      	b.n	8008444 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 80085cc:	4b1b      	ldr	r3, [pc, #108]	; (800863c <CheckAttachedButtons+0x42c>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d000      	beq.n	80085d6 <CheckAttachedButtons+0x3c6>
 80085d4:	e736      	b.n	8008444 <CheckAttachedButtons+0x234>
 80085d6:	4643      	mov	r3, r8
 80085d8:	7c5b      	ldrb	r3, [r3, #17]
 80085da:	2b7f      	cmp	r3, #127	; 0x7f
 80085dc:	d800      	bhi.n	80085e0 <CheckAttachedButtons+0x3d0>
 80085de:	e731      	b.n	8008444 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80085e0:	4b16      	ldr	r3, [pc, #88]	; (800863c <CheckAttachedButtons+0x42c>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 80085e6:	2103      	movs	r1, #3
 80085e8:	9803      	ldr	r0, [sp, #12]
 80085ea:	f7ff fd94 	bl	8008116 <buttonReleasedForYCallback>
 80085ee:	e729      	b.n	8008444 <CheckAttachedButtons+0x234>
						state = OPEN;			
 80085f0:	2303      	movs	r3, #3
 80085f2:	469b      	mov	fp, r3
 80085f4:	e000      	b.n	80085f8 <CheckAttachedButtons+0x3e8>
						state = OFF;
 80085f6:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <CheckAttachedButtons+0x430>)
 80085fa:	58e3      	ldr	r3, [r4, r3]
 80085fc:	4a11      	ldr	r2, [pc, #68]	; (8008644 <CheckAttachedButtons+0x434>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d900      	bls.n	8008604 <CheckAttachedButtons+0x3f4>
 8008602:	e67f      	b.n	8008304 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];																		// Advance the debounce counter
 8008604:	3301      	adds	r3, #1
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <CheckAttachedButtons+0x430>)
 8008608:	50a3      	str	r3, [r4, r2]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <CheckAttachedButtons+0x438>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d100      	bne.n	8008614 <CheckAttachedButtons+0x404>
 8008612:	e67b      	b.n	800830c <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <CheckAttachedButtons+0x43c>)
 8008616:	5cf2      	ldrb	r2, [r6, r3]
 8008618:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <CheckAttachedButtons+0x440>)
 800861a:	795b      	ldrb	r3, [r3, #5]
 800861c:	429a      	cmp	r2, r3
 800861e:	d800      	bhi.n	8008622 <CheckAttachedButtons+0x412>
 8008620:	e632      	b.n	8008288 <CheckAttachedButtons+0x78>
					clicked = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	4a08      	ldr	r2, [pc, #32]	; (8008648 <CheckAttachedButtons+0x438>)
 8008626:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8008628:	4a08      	ldr	r2, [pc, #32]	; (800864c <CheckAttachedButtons+0x43c>)
 800862a:	54b3      	strb	r3, [r6, r2]
 800862c:	e62c      	b.n	8008288 <CheckAttachedButtons+0x78>
}
 800862e:	b009      	add	sp, #36	; 0x24
 8008630:	bc3c      	pop	{r2, r3, r4, r5}
 8008632:	4690      	mov	r8, r2
 8008634:	4699      	mov	r9, r3
 8008636:	46a2      	mov	sl, r4
 8008638:	46ab      	mov	fp, r5
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	20001492 	.word	0x20001492
 8008640:	200014ac 	.word	0x200014ac
 8008644:	0000fffe 	.word	0x0000fffe
 8008648:	2000148a 	.word	0x2000148a
 800864c:	2000148c 	.word	0x2000148c
 8008650:	20006898 	.word	0x20006898

08008654 <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8008654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008656:	b08d      	sub	sp, #52	; 0x34
 8008658:	0006      	movs	r6, r0
 800865a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800865c:	4b41      	ldr	r3, [pc, #260]	; (8008764 <AddPortButton+0x110>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d157      	bne.n	8008714 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8008664:	4b40      	ldr	r3, [pc, #256]	; (8008768 <AddPortButton+0x114>)
 8008666:	2204      	movs	r2, #4
 8008668:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800866a:	4b3e      	ldr	r3, [pc, #248]	; (8008764 <AddPortButton+0x110>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d15a      	bne.n	8008728 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8008672:	2512      	movs	r5, #18
 8008674:	446d      	add	r5, sp
 8008676:	af04      	add	r7, sp, #16
 8008678:	9700      	str	r7, [sp, #0]
 800867a:	ab05      	add	r3, sp, #20
 800867c:	002a      	movs	r2, r5
 800867e:	a906      	add	r1, sp, #24
 8008680:	0020      	movs	r0, r4
 8008682:	f004 f907 	bl	800c894 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8008686:	882b      	ldrh	r3, [r5, #0]
 8008688:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800868a:	2301      	movs	r3, #1
 800868c:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868e:	2500      	movs	r5, #0
 8008690:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008692:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8008694:	a907      	add	r1, sp, #28
 8008696:	9806      	ldr	r0, [sp, #24]
 8008698:	f007 ff8a 	bl	80105b0 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800869c:	883b      	ldrh	r3, [r7, #0]
 800869e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086a0:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80086a2:	2302      	movs	r3, #2
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 80086a6:	a907      	add	r1, sp, #28
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	f007 ff81 	bl	80105b0 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 80086ae:	00e2      	lsls	r2, r4, #3
 80086b0:	1912      	adds	r2, r2, r4
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <AddPortButton+0x118>)
 80086b4:	189b      	adds	r3, r3, r2
 80086b6:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80086b8:	0025      	movs	r5, r4
 80086ba:	353a      	adds	r5, #58	; 0x3a
 80086bc:	00ad      	lsls	r5, r5, #2
 80086be:	210e      	movs	r1, #14
 80086c0:	4469      	add	r1, sp
 80086c2:	0028      	movs	r0, r5
 80086c4:	f7ff f8a6 	bl	8007814 <EE_ReadVariable>
	if(!res)																														// This variable exists
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d133      	bne.n	8008734 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 80086cc:	230e      	movs	r3, #14
 80086ce:	446b      	add	r3, sp
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 80086d4:	091a      	lsrs	r2, r3, #4
 80086d6:	42a2      	cmp	r2, r4
 80086d8:	d103      	bne.n	80086e2 <AddPortButton+0x8e>
 80086da:	220f      	movs	r2, #15
 80086dc:	4013      	ands	r3, r2
 80086de:	42b3      	cmp	r3, r6
 80086e0:	d015      	beq.n	800870e <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80086e2:	0324      	lsls	r4, r4, #12
 80086e4:	0231      	lsls	r1, r6, #8
 80086e6:	4321      	orrs	r1, r4
 80086e8:	b289      	uxth	r1, r1
 80086ea:	230e      	movs	r3, #14
 80086ec:	446b      	add	r3, sp
 80086ee:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80086f0:	0028      	movs	r0, r5
 80086f2:	f7ff f8bf 	bl	8007874 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80086f6:	1c68      	adds	r0, r5, #1
 80086f8:	2100      	movs	r1, #0
 80086fa:	f7ff f8bb 	bl	8007874 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80086fe:	1ca8      	adds	r0, r5, #2
 8008700:	2100      	movs	r1, #0
 8008702:	f7ff f8b7 	bl	8007874 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008706:	1ce8      	adds	r0, r5, #3
 8008708:	2100      	movs	r1, #0
 800870a:	f7ff f8b3 	bl	8007874 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 800870e:	2000      	movs	r0, #0
 8008710:	b00d      	add	sp, #52	; 0x34
 8008712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8008714:	008d      	lsls	r5, r1, #2
 8008716:	4b16      	ldr	r3, [pc, #88]	; (8008770 <AddPortButton+0x11c>)
 8008718:	58e8      	ldr	r0, [r5, r3]
 800871a:	f004 ff77 	bl	800d60c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <AddPortButton+0x120>)
 8008720:	58e8      	ldr	r0, [r5, r3]
 8008722:	f004 ff73 	bl	800d60c <osSemaphoreRelease>
 8008726:	e79d      	b.n	8008664 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008728:	0020      	movs	r0, r4
 800872a:	f004 fdd9 	bl	800d2e0 <GetUart>
 800872e:	f009 fb2e 	bl	8011d8e <HAL_UART_DeInit>
 8008732:	e79e      	b.n	8008672 <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008734:	0324      	lsls	r4, r4, #12
 8008736:	0231      	lsls	r1, r6, #8
 8008738:	4321      	orrs	r1, r4
 800873a:	b289      	uxth	r1, r1
 800873c:	230e      	movs	r3, #14
 800873e:	446b      	add	r3, sp
 8008740:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8008742:	0028      	movs	r0, r5
 8008744:	f7ff f896 	bl	8007874 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008748:	1c68      	adds	r0, r5, #1
 800874a:	2100      	movs	r1, #0
 800874c:	f7ff f892 	bl	8007874 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008750:	1ca8      	adds	r0, r5, #2
 8008752:	2100      	movs	r1, #0
 8008754:	f7ff f88e 	bl	8007874 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008758:	1ce8      	adds	r0, r5, #3
 800875a:	2100      	movs	r1, #0
 800875c:	f7ff f88a 	bl	8007874 <EE_WriteVariable>
 8008760:	e7d5      	b.n	800870e <AddPortButton+0xba>
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	20000a75 	.word	0x20000a75
 8008768:	20001098 	.word	0x20001098
 800876c:	20001454 	.word	0x20001454
 8008770:	20006934 	.word	0x20006934
 8008774:	20006918 	.word	0x20006918

08008778 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 800877e:	4836      	ldr	r0, [pc, #216]	; (8008858 <RemovePortButton+0xe0>)
 8008780:	00e9      	lsls	r1, r5, #3
 8008782:	1949      	adds	r1, r1, r5
 8008784:	1842      	adds	r2, r0, r1
 8008786:	2300      	movs	r3, #0
 8008788:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800878a:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800878c:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 800878e:	7093      	strb	r3, [r2, #2]
 8008790:	70d3      	strb	r3, [r2, #3]
 8008792:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008794:	7153      	strb	r3, [r2, #5]
 8008796:	7193      	strb	r3, [r2, #6]
 8008798:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800879a:	002c      	movs	r4, r5
 800879c:	343a      	adds	r4, #58	; 0x3a
 800879e:	00a4      	lsls	r4, r4, #2
 80087a0:	466b      	mov	r3, sp
 80087a2:	1d99      	adds	r1, r3, #6
 80087a4:	0020      	movs	r0, r4
 80087a6:	f7ff f835 	bl	8007814 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d02b      	beq.n	8008806 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 80087ae:	0028      	movs	r0, r5
 80087b0:	f004 fd96 	bl	800d2e0 <GetUart>
 80087b4:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 80087b6:	6803      	ldr	r3, [r0, #0]
 80087b8:	4a28      	ldr	r2, [pc, #160]	; (800885c <RemovePortButton+0xe4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d034      	beq.n	8008828 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 80087be:	4a28      	ldr	r2, [pc, #160]	; (8008860 <RemovePortButton+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d035      	beq.n	8008830 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 80087c4:	4a27      	ldr	r2, [pc, #156]	; (8008864 <RemovePortButton+0xec>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d036      	beq.n	8008838 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 80087ca:	4a27      	ldr	r2, [pc, #156]	; (8008868 <RemovePortButton+0xf0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d03f      	beq.n	8008850 <RemovePortButton+0xd8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 80087d0:	4a26      	ldr	r2, [pc, #152]	; (800886c <RemovePortButton+0xf4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d034      	beq.n	8008840 <RemovePortButton+0xc8>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 80087d6:	4a26      	ldr	r2, [pc, #152]	; (8008870 <RemovePortButton+0xf8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d035      	beq.n	8008848 <RemovePortButton+0xd0>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 80087dc:	4a25      	ldr	r2, [pc, #148]	; (8008874 <RemovePortButton+0xfc>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d038      	beq.n	8008854 <RemovePortButton+0xdc>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 80087e2:	4a25      	ldr	r2, [pc, #148]	; (8008878 <RemovePortButton+0x100>)
 80087e4:	4694      	mov	ip, r2
 80087e6:	4463      	add	r3, ip
 80087e8:	1e5c      	subs	r4, r3, #1
 80087ea:	41a3      	sbcs	r3, r4
 80087ec:	425c      	negs	r4, r3
 80087ee:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 80087f0:	4b22      	ldr	r3, [pc, #136]	; (800887c <RemovePortButton+0x104>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 80087f6:	3201      	adds	r2, #1
 80087f8:	4921      	ldr	r1, [pc, #132]	; (8008880 <RemovePortButton+0x108>)
 80087fa:	0030      	movs	r0, r6
 80087fc:	f009 fb20 	bl	8011e40 <HAL_UART_Receive_IT>
	
	return result;
}
 8008800:	0020      	movs	r0, r4
 8008802:	b002      	add	sp, #8
 8008804:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8008806:	2100      	movs	r1, #0
 8008808:	0020      	movs	r0, r4
 800880a:	f7ff f833 	bl	8007874 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800880e:	1c60      	adds	r0, r4, #1
 8008810:	2100      	movs	r1, #0
 8008812:	f7ff f82f 	bl	8007874 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008816:	1ca0      	adds	r0, r4, #2
 8008818:	2100      	movs	r1, #0
 800881a:	f7ff f82b 	bl	8007874 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 800881e:	1ce0      	adds	r0, r4, #3
 8008820:	2100      	movs	r1, #0
 8008822:	f7ff f827 	bl	8007874 <EE_WriteVariable>
 8008826:	e7c2      	b.n	80087ae <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008828:	f004 fbd6 	bl	800cfd8 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800882c:	2400      	movs	r4, #0
 800882e:	e7df      	b.n	80087f0 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008830:	f004 fbea 	bl	800d008 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008834:	2400      	movs	r4, #0
 8008836:	e7db      	b.n	80087f0 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008838:	f004 fbfe 	bl	800d038 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800883c:	2400      	movs	r4, #0
 800883e:	e7d7      	b.n	80087f0 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008840:	f004 fc12 	bl	800d068 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008844:	2400      	movs	r4, #0
 8008846:	e7d3      	b.n	80087f0 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008848:	f004 fc26 	bl	800d098 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800884c:	2400      	movs	r4, #0
 800884e:	e7cf      	b.n	80087f0 <RemovePortButton+0x78>
 8008850:	2400      	movs	r4, #0
 8008852:	e7cd      	b.n	80087f0 <RemovePortButton+0x78>
 8008854:	2400      	movs	r4, #0
 8008856:	e7cb      	b.n	80087f0 <RemovePortButton+0x78>
 8008858:	20001454 	.word	0x20001454
 800885c:	40013800 	.word	0x40013800
 8008860:	40004400 	.word	0x40004400
 8008864:	40004800 	.word	0x40004800
 8008868:	40004c00 	.word	0x40004c00
 800886c:	40005000 	.word	0x40005000
 8008870:	40011400 	.word	0x40011400
 8008874:	40011800 	.word	0x40011800
 8008878:	bffee400 	.word	0xbffee400
 800887c:	20001098 	.word	0x20001098
 8008880:	20000e08 	.word	0x20000e08

08008884 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008886:	46de      	mov	lr, fp
 8008888:	4657      	mov	r7, sl
 800888a:	464e      	mov	r6, r9
 800888c:	4645      	mov	r5, r8
 800888e:	b5e0      	push	{r5, r6, r7, lr}
 8008890:	b085      	sub	sp, #20
 8008892:	0007      	movs	r7, r0
 8008894:	001e      	movs	r6, r3
 8008896:	ab0e      	add	r3, sp, #56	; 0x38
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4698      	mov	r8, r3
 800889c:	ab0f      	add	r3, sp, #60	; 0x3c
 800889e:	781d      	ldrb	r5, [r3, #0]
 80088a0:	ab10      	add	r3, sp, #64	; 0x40
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	469b      	mov	fp, r3
 80088a6:	ab11      	add	r3, sp, #68	; 0x44
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	469a      	mov	sl, r3
 80088ac:	ab12      	add	r3, sp, #72	; 0x48
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4699      	mov	r9, r3
 80088b2:	ab13      	add	r3, sp, #76	; 0x4c
 80088b4:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 80088b6:	00fc      	lsls	r4, r7, #3
 80088b8:	19e4      	adds	r4, r4, r7
 80088ba:	4b9e      	ldr	r3, [pc, #632]	; (8008b34 <SetButtonEvents+0x2b0>)
 80088bc:	191b      	adds	r3, r3, r4
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d04c      	beq.n	800895e <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 80088c4:	00fc      	lsls	r4, r7, #3
 80088c6:	19e4      	adds	r4, r4, r7
 80088c8:	4b9a      	ldr	r3, [pc, #616]	; (8008b34 <SetButtonEvents+0x2b0>)
 80088ca:	191b      	adds	r3, r3, r4
 80088cc:	709e      	strb	r6, [r3, #2]
 80088ce:	4644      	mov	r4, r8
 80088d0:	70dc      	strb	r4, [r3, #3]
 80088d2:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 80088d4:	465c      	mov	r4, fp
 80088d6:	715c      	strb	r4, [r3, #5]
 80088d8:	4654      	mov	r4, sl
 80088da:	719c      	strb	r4, [r3, #6]
 80088dc:	464c      	mov	r4, r9
 80088de:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 80088e0:	2801      	cmp	r0, #1
 80088e2:	d003      	beq.n	80088ec <SetButtonEvents+0x68>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d113      	bne.n	8008910 <SetButtonEvents+0x8c>
 80088e8:	2900      	cmp	r1, #0
 80088ea:	d042      	beq.n	8008972 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80088ec:	00f9      	lsls	r1, r7, #3
 80088ee:	19c9      	adds	r1, r1, r7
 80088f0:	4b90      	ldr	r3, [pc, #576]	; (8008b34 <SetButtonEvents+0x2b0>)
 80088f2:	185b      	adds	r3, r3, r1
 80088f4:	7a19      	ldrb	r1, [r3, #8]
 80088f6:	2401      	movs	r4, #1
 80088f8:	4321      	orrs	r1, r4
 80088fa:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80088fc:	2801      	cmp	r0, #1
 80088fe:	d10c      	bne.n	800891a <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008900:	00fa      	lsls	r2, r7, #3
 8008902:	19d2      	adds	r2, r2, r7
 8008904:	4b8b      	ldr	r3, [pc, #556]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008906:	189b      	adds	r3, r3, r2
 8008908:	7a1a      	ldrb	r2, [r3, #8]
 800890a:	2102      	movs	r1, #2
 800890c:	430a      	orrs	r2, r1
 800890e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008910:	2801      	cmp	r0, #1
 8008912:	d042      	beq.n	800899a <SetButtonEvents+0x116>
 8008914:	2800      	cmp	r0, #0
 8008916:	d152      	bne.n	80089be <SetButtonEvents+0x13a>
 8008918:	e03d      	b.n	8008996 <SetButtonEvents+0x112>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800891a:	2800      	cmp	r0, #0
 800891c:	d031      	beq.n	8008982 <SetButtonEvents+0xfe>
 800891e:	e044      	b.n	80089aa <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008920:	2800      	cmp	r0, #0
 8008922:	d059      	beq.n	80089d8 <SetButtonEvents+0x154>
 8008924:	e06d      	b.n	8008a02 <SetButtonEvents+0x17e>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008926:	2800      	cmp	r0, #0
 8008928:	d100      	bne.n	800892c <SetButtonEvents+0xa8>
 800892a:	e082      	b.n	8008a32 <SetButtonEvents+0x1ae>
 800892c:	e097      	b.n	8008a5e <SetButtonEvents+0x1da>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 800892e:	2800      	cmp	r0, #0
 8008930:	d100      	bne.n	8008934 <SetButtonEvents+0xb0>
 8008932:	e0f2      	b.n	8008b1a <SetButtonEvents+0x296>
 8008934:	e09f      	b.n	8008a76 <SetButtonEvents+0x1f2>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008936:	0a19      	lsrs	r1, r3, #8
 8008938:	0209      	lsls	r1, r1, #8
 800893a:	4311      	orrs	r1, r2
 800893c:	ab02      	add	r3, sp, #8
 800893e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008940:	0020      	movs	r0, r4
 8008942:	f7fe ff97 	bl	8007874 <EE_WriteVariable>
 8008946:	e0ad      	b.n	8008aa4 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008948:	0019      	movs	r1, r3
 800894a:	9801      	ldr	r0, [sp, #4]
 800894c:	f7fe ff92 	bl	8007874 <EE_WriteVariable>
 8008950:	e0b7      	b.n	8008ac2 <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008952:	4653      	mov	r3, sl
 8008954:	4319      	orrs	r1, r3
 8008956:	0030      	movs	r0, r6
 8008958:	f7fe ff8c 	bl	8007874 <EE_WriteVariable>
 800895c:	e0c0      	b.n	8008ae0 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800895e:	200b      	movs	r0, #11
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
}
 8008960:	b005      	add	sp, #20
 8008962:	bc3c      	pop	{r2, r3, r4, r5}
 8008964:	4690      	mov	r8, r2
 8008966:	4699      	mov	r9, r3
 8008968:	46a2      	mov	sl, r4
 800896a:	46ab      	mov	fp, r5
 800896c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 800896e:	200b      	movs	r0, #11
 8008970:	e7f6      	b.n	8008960 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008972:	00f9      	lsls	r1, r7, #3
 8008974:	19c9      	adds	r1, r1, r7
 8008976:	4b6f      	ldr	r3, [pc, #444]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008978:	185b      	adds	r3, r3, r1
 800897a:	7a19      	ldrb	r1, [r3, #8]
 800897c:	2401      	movs	r4, #1
 800897e:	43a1      	bics	r1, r4
 8008980:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008982:	2a00      	cmp	r2, #0
 8008984:	d1bc      	bne.n	8008900 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008986:	00fa      	lsls	r2, r7, #3
 8008988:	19d2      	adds	r2, r2, r7
 800898a:	4b6a      	ldr	r3, [pc, #424]	; (8008b34 <SetButtonEvents+0x2b0>)
 800898c:	189b      	adds	r3, r3, r2
 800898e:	7a1a      	ldrb	r2, [r3, #8]
 8008990:	2102      	movs	r1, #2
 8008992:	438a      	bics	r2, r1
 8008994:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008996:	2e00      	cmp	r6, #0
 8008998:	d016      	beq.n	80089c8 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800899a:	00fa      	lsls	r2, r7, #3
 800899c:	19d2      	adds	r2, r2, r7
 800899e:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <SetButtonEvents+0x2b0>)
 80089a0:	189b      	adds	r3, r3, r2
 80089a2:	7a1a      	ldrb	r2, [r3, #8]
 80089a4:	2104      	movs	r1, #4
 80089a6:	430a      	orrs	r2, r1
 80089a8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 80089aa:	2801      	cmp	r0, #1
 80089ac:	d1b8      	bne.n	8008920 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80089ae:	00fa      	lsls	r2, r7, #3
 80089b0:	19d2      	adds	r2, r2, r7
 80089b2:	4b60      	ldr	r3, [pc, #384]	; (8008b34 <SetButtonEvents+0x2b0>)
 80089b4:	189b      	adds	r3, r3, r2
 80089b6:	7a1a      	ldrb	r2, [r3, #8]
 80089b8:	2108      	movs	r1, #8
 80089ba:	430a      	orrs	r2, r1
 80089bc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 80089be:	2801      	cmp	r0, #1
 80089c0:	d017      	beq.n	80089f2 <SetButtonEvents+0x16e>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d128      	bne.n	8008a18 <SetButtonEvents+0x194>
 80089c6:	e012      	b.n	80089ee <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 80089c8:	00fa      	lsls	r2, r7, #3
 80089ca:	19d2      	adds	r2, r2, r7
 80089cc:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <SetButtonEvents+0x2b0>)
 80089ce:	189b      	adds	r3, r3, r2
 80089d0:	7a1a      	ldrb	r2, [r3, #8]
 80089d2:	2104      	movs	r1, #4
 80089d4:	438a      	bics	r2, r1
 80089d6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 80089d8:	4643      	mov	r3, r8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e7      	bne.n	80089ae <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 80089de:	00fa      	lsls	r2, r7, #3
 80089e0:	19d2      	adds	r2, r2, r7
 80089e2:	4b54      	ldr	r3, [pc, #336]	; (8008b34 <SetButtonEvents+0x2b0>)
 80089e4:	189b      	adds	r3, r3, r2
 80089e6:	7a1a      	ldrb	r2, [r3, #8]
 80089e8:	2108      	movs	r1, #8
 80089ea:	438a      	bics	r2, r1
 80089ec:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	d017      	beq.n	8008a22 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80089f2:	00fa      	lsls	r2, r7, #3
 80089f4:	19d2      	adds	r2, r2, r7
 80089f6:	4b4f      	ldr	r3, [pc, #316]	; (8008b34 <SetButtonEvents+0x2b0>)
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	7a1a      	ldrb	r2, [r3, #8]
 80089fc:	2110      	movs	r1, #16
 80089fe:	430a      	orrs	r2, r1
 8008a00:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008a02:	2801      	cmp	r0, #1
 8008a04:	d000      	beq.n	8008a08 <SetButtonEvents+0x184>
 8008a06:	e78e      	b.n	8008926 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008a08:	00fa      	lsls	r2, r7, #3
 8008a0a:	19d2      	adds	r2, r2, r7
 8008a0c:	4b49      	ldr	r3, [pc, #292]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a0e:	189b      	adds	r3, r3, r2
 8008a10:	7a1a      	ldrb	r2, [r3, #8]
 8008a12:	2120      	movs	r1, #32
 8008a14:	430a      	orrs	r2, r1
 8008a16:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008a18:	2801      	cmp	r0, #1
 8008a1a:	d018      	beq.n	8008a4e <SetButtonEvents+0x1ca>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d12a      	bne.n	8008a76 <SetButtonEvents+0x1f2>
 8008a20:	e012      	b.n	8008a48 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008a22:	00fa      	lsls	r2, r7, #3
 8008a24:	19d2      	adds	r2, r2, r7
 8008a26:	4b43      	ldr	r3, [pc, #268]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a28:	189b      	adds	r3, r3, r2
 8008a2a:	7a1a      	ldrb	r2, [r3, #8]
 8008a2c:	2110      	movs	r1, #16
 8008a2e:	438a      	bics	r2, r1
 8008a30:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008a32:	465b      	mov	r3, fp
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e7      	bne.n	8008a08 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008a38:	00fa      	lsls	r2, r7, #3
 8008a3a:	19d2      	adds	r2, r2, r7
 8008a3c:	4b3d      	ldr	r3, [pc, #244]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a3e:	189b      	adds	r3, r3, r2
 8008a40:	7a1a      	ldrb	r2, [r3, #8]
 8008a42:	2120      	movs	r1, #32
 8008a44:	438a      	bics	r2, r1
 8008a46:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008a48:	4653      	mov	r3, sl
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d05d      	beq.n	8008b0a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a4e:	00fa      	lsls	r2, r7, #3
 8008a50:	19d2      	adds	r2, r2, r7
 8008a52:	4b38      	ldr	r3, [pc, #224]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a54:	189b      	adds	r3, r3, r2
 8008a56:	7a1a      	ldrb	r2, [r3, #8]
 8008a58:	2140      	movs	r1, #64	; 0x40
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008a5e:	2801      	cmp	r0, #1
 8008a60:	d000      	beq.n	8008a64 <SetButtonEvents+0x1e0>
 8008a62:	e764      	b.n	800892e <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008a64:	00fa      	lsls	r2, r7, #3
 8008a66:	19d2      	adds	r2, r2, r7
 8008a68:	4b32      	ldr	r3, [pc, #200]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a6a:	189b      	adds	r3, r3, r2
 8008a6c:	7a19      	ldrb	r1, [r3, #8]
 8008a6e:	2280      	movs	r2, #128	; 0x80
 8008a70:	4252      	negs	r2, r2
 8008a72:	430a      	orrs	r2, r1
 8008a74:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008a76:	003c      	movs	r4, r7
 8008a78:	343a      	adds	r4, #58	; 0x3a
 8008a7a:	00a4      	lsls	r4, r4, #2
 8008a7c:	ab02      	add	r3, sp, #8
 8008a7e:	1d99      	adds	r1, r3, #6
 8008a80:	0020      	movs	r0, r4
 8008a82:	f7fe fec7 	bl	8007814 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d000      	beq.n	8008a8c <SetButtonEvents+0x208>
 8008a8a:	e770      	b.n	800896e <SetButtonEvents+0xea>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008a8c:	ab02      	add	r3, sp, #8
 8008a8e:	3306      	adds	r3, #6
 8008a90:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008a92:	00fa      	lsls	r2, r7, #3
 8008a94:	19d2      	adds	r2, r2, r7
 8008a96:	4f27      	ldr	r7, [pc, #156]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008a98:	18bf      	adds	r7, r7, r2
 8008a9a:	7a3a      	ldrb	r2, [r7, #8]
 8008a9c:	b2d9      	uxtb	r1, r3
 8008a9e:	4291      	cmp	r1, r2
 8008aa0:	d000      	beq.n	8008aa4 <SetButtonEvents+0x220>
 8008aa2:	e748      	b.n	8008936 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008aa4:	1c63      	adds	r3, r4, #1
 8008aa6:	aa02      	add	r2, sp, #8
 8008aa8:	1d97      	adds	r7, r2, #6
 8008aaa:	0039      	movs	r1, r7
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7fe feb0 	bl	8007814 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008ab4:	0236      	lsls	r6, r6, #8
 8008ab6:	883a      	ldrh	r2, [r7, #0]
 8008ab8:	465b      	mov	r3, fp
 8008aba:	4333      	orrs	r3, r6
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d000      	beq.n	8008ac2 <SetButtonEvents+0x23e>
 8008ac0:	e742      	b.n	8008948 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008ac2:	1ca6      	adds	r6, r4, #2
 8008ac4:	ab02      	add	r3, sp, #8
 8008ac6:	1d9f      	adds	r7, r3, #6
 8008ac8:	0039      	movs	r1, r7
 8008aca:	0030      	movs	r0, r6
 8008acc:	f7fe fea2 	bl	8007814 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008ad0:	4643      	mov	r3, r8
 8008ad2:	0219      	lsls	r1, r3, #8
 8008ad4:	883a      	ldrh	r2, [r7, #0]
 8008ad6:	4653      	mov	r3, sl
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d000      	beq.n	8008ae0 <SetButtonEvents+0x25c>
 8008ade:	e738      	b.n	8008952 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008ae0:	3403      	adds	r4, #3
 8008ae2:	ab02      	add	r3, sp, #8
 8008ae4:	1d9e      	adds	r6, r3, #6
 8008ae6:	0031      	movs	r1, r6
 8008ae8:	0020      	movs	r0, r4
 8008aea:	f7fe fe93 	bl	8007814 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008aee:	022d      	lsls	r5, r5, #8
 8008af0:	8832      	ldrh	r2, [r6, #0]
 8008af2:	464b      	mov	r3, r9
 8008af4:	432b      	orrs	r3, r5
	return result;
 8008af6:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d100      	bne.n	8008afe <SetButtonEvents+0x27a>
 8008afc:	e730      	b.n	8008960 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008afe:	0019      	movs	r1, r3
 8008b00:	0020      	movs	r0, r4
 8008b02:	f7fe feb7 	bl	8007874 <EE_WriteVariable>
	return result;
 8008b06:	2000      	movs	r0, #0
 8008b08:	e72a      	b.n	8008960 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008b0a:	00fa      	lsls	r2, r7, #3
 8008b0c:	19d2      	adds	r2, r2, r7
 8008b0e:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	7a1a      	ldrb	r2, [r3, #8]
 8008b14:	2140      	movs	r1, #64	; 0x40
 8008b16:	438a      	bics	r2, r1
 8008b18:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1a1      	bne.n	8008a64 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008b20:	00fa      	lsls	r2, r7, #3
 8008b22:	19d2      	adds	r2, r2, r7
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <SetButtonEvents+0x2b0>)
 8008b26:	189b      	adds	r3, r3, r2
 8008b28:	7a19      	ldrb	r1, [r3, #8]
 8008b2a:	227f      	movs	r2, #127	; 0x7f
 8008b2c:	400a      	ands	r2, r1
 8008b2e:	721a      	strb	r2, [r3, #8]
 8008b30:	e7a1      	b.n	8008a76 <SetButtonEvents+0x1f2>
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	20001454 	.word	0x20001454

08008b38 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008b38:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008b3a:	f006 fb72 	bl	800f222 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008b3e:	b2c4      	uxtb	r4, r0
 8008b40:	0020      	movs	r0, r4
 8008b42:	f7fe fd25 	bl	8007590 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008b46:	0020      	movs	r0, r4
 8008b48:	f7fe fd50 	bl	80075ec <SwitchStreamDMAToMsg>
}
 8008b4c:	bd10      	pop	{r4, pc}
	...

08008b50 <SetupDMAStreams>:
{
 8008b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b52:	b085      	sub	sp, #20
 8008b54:	000d      	movs	r5, r1
 8008b56:	0014      	movs	r4, r2
 8008b58:	220f      	movs	r2, #15
 8008b5a:	446a      	add	r2, sp
 8008b5c:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008b5e:	aa0a      	add	r2, sp, #40	; 0x28
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d058      	beq.n	8008c18 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d100      	bne.n	8008b6c <SetupDMAStreams+0x1c>
 8008b6a:	e0be      	b.n	8008cea <SetupDMAStreams+0x19a>
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	d100      	bne.n	8008b72 <SetupDMAStreams+0x22>
 8008b70:	e0bf      	b.n	8008cf2 <SetupDMAStreams+0x1a2>
	if (direction == FORWARD) 
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d055      	beq.n	8008c22 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008b76:	2801      	cmp	r0, #1
 8008b78:	d100      	bne.n	8008b7c <SetupDMAStreams+0x2c>
 8008b7a:	e08b      	b.n	8008c94 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8008b7c:	2267      	movs	r2, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008b7e:	2802      	cmp	r0, #2
 8008b80:	d000      	beq.n	8008b84 <SetupDMAStreams+0x34>
 8008b82:	e0b3      	b.n	8008cec <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008b84:	0018      	movs	r0, r3
 8008b86:	f004 fbab 	bl	800d2e0 <GetUart>
 8008b8a:	0006      	movs	r6, r0
 8008b8c:	ab0a      	add	r3, sp, #40	; 0x28
 8008b8e:	7818      	ldrb	r0, [r3, #0]
 8008b90:	f004 fba6 	bl	800d2e0 <GetUart>
 8008b94:	0001      	movs	r1, r0
 8008b96:	2201      	movs	r2, #1
 8008b98:	0030      	movs	r0, r6
 8008b9a:	f7fe fd59 	bl	8007650 <StartDMAstream>
 8008b9e:	0002      	movs	r2, r0
 8008ba0:	2817      	cmp	r0, #23
 8008ba2:	d100      	bne.n	8008ba6 <SetupDMAStreams+0x56>
 8008ba4:	e0a2      	b.n	8008cec <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008ba6:	0160      	lsls	r0, r4, #5
 8008ba8:	1b00      	subs	r0, r0, r4
 8008baa:	0080      	lsls	r0, r0, #2
 8008bac:	1900      	adds	r0, r0, r4
 8008bae:	00c0      	lsls	r0, r0, #3
 8008bb0:	21fa      	movs	r1, #250	; 0xfa
 8008bb2:	0089      	lsls	r1, r1, #2
 8008bb4:	f7f7 facc 	bl	8000150 <__udivsi3>
 8008bb8:	0004      	movs	r4, r0
 8008bba:	260f      	movs	r6, #15
 8008bbc:	446e      	add	r6, sp
 8008bbe:	4b4e      	ldr	r3, [pc, #312]	; (8008cf8 <SetupDMAStreams+0x1a8>)
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	0033      	movs	r3, r6
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	0001      	movs	r1, r0
 8008bc8:	484c      	ldr	r0, [pc, #304]	; (8008cfc <SetupDMAStreams+0x1ac>)
 8008bca:	f006 f9c3 	bl	800ef54 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008bce:	7833      	ldrb	r3, [r6, #0]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a4a      	ldr	r2, [pc, #296]	; (8008d00 <SetupDMAStreams+0x1b0>)
 8008bd6:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008bd8:	ab0a      	add	r3, sp, #40	; 0x28
 8008bda:	7818      	ldrb	r0, [r3, #0]
 8008bdc:	f004 fb80 	bl	800d2e0 <GetUart>
 8008be0:	0007      	movs	r7, r0
 8008be2:	7830      	ldrb	r0, [r6, #0]
 8008be4:	f004 fb7c 	bl	800d2e0 <GetUart>
 8008be8:	0001      	movs	r1, r0
 8008bea:	2201      	movs	r2, #1
 8008bec:	0038      	movs	r0, r7
 8008bee:	f7fe fd2f 	bl	8007650 <StartDMAstream>
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	2817      	cmp	r0, #23
 8008bf6:	d079      	beq.n	8008cec <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008bf8:	4b3f      	ldr	r3, [pc, #252]	; (8008cf8 <SetupDMAStreams+0x1a8>)
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8008bfe:	2200      	movs	r2, #0
 8008c00:	0021      	movs	r1, r4
 8008c02:	483e      	ldr	r0, [pc, #248]	; (8008cfc <SetupDMAStreams+0x1ac>)
 8008c04:	f006 f9a6 	bl	800ef54 <xTimerCreate>
 8008c08:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 8008c0a:	ab0a      	add	r3, sp, #40	; 0x28
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4a3b      	ldr	r2, [pc, #236]	; (8008d00 <SetupDMAStreams+0x1b0>)
 8008c14:	509d      	str	r5, [r3, r2]
 8008c16:	e02d      	b.n	8008c74 <SetupDMAStreams+0x124>
		portStatus[src] = STREAM;
 8008c18:	4a3a      	ldr	r2, [pc, #232]	; (8008d04 <SetupDMAStreams+0x1b4>)
 8008c1a:	2102      	movs	r1, #2
 8008c1c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008c1e:	2267      	movs	r2, #103	; 0x67
 8008c20:	e064      	b.n	8008cec <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008c22:	0018      	movs	r0, r3
 8008c24:	f004 fb5c 	bl	800d2e0 <GetUart>
 8008c28:	0006      	movs	r6, r0
 8008c2a:	ab0a      	add	r3, sp, #40	; 0x28
 8008c2c:	7818      	ldrb	r0, [r3, #0]
 8008c2e:	f004 fb57 	bl	800d2e0 <GetUart>
 8008c32:	0001      	movs	r1, r0
 8008c34:	2201      	movs	r2, #1
 8008c36:	0030      	movs	r0, r6
 8008c38:	f7fe fd0a 	bl	8007650 <StartDMAstream>
 8008c3c:	0002      	movs	r2, r0
 8008c3e:	2817      	cmp	r0, #23
 8008c40:	d054      	beq.n	8008cec <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008c42:	260f      	movs	r6, #15
 8008c44:	446e      	add	r6, sp
 8008c46:	0160      	lsls	r0, r4, #5
 8008c48:	1b00      	subs	r0, r0, r4
 8008c4a:	0080      	lsls	r0, r0, #2
 8008c4c:	1900      	adds	r0, r0, r4
 8008c4e:	00c0      	lsls	r0, r0, #3
 8008c50:	21fa      	movs	r1, #250	; 0xfa
 8008c52:	0089      	lsls	r1, r1, #2
 8008c54:	f7f7 fa7c 	bl	8000150 <__udivsi3>
 8008c58:	0001      	movs	r1, r0
 8008c5a:	4b27      	ldr	r3, [pc, #156]	; (8008cf8 <SetupDMAStreams+0x1a8>)
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	0033      	movs	r3, r6
 8008c60:	2200      	movs	r2, #0
 8008c62:	4826      	ldr	r0, [pc, #152]	; (8008cfc <SetupDMAStreams+0x1ac>)
 8008c64:	f006 f976 	bl	800ef54 <xTimerCreate>
 8008c68:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008c6a:	7833      	ldrb	r3, [r6, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4a23      	ldr	r2, [pc, #140]	; (8008d00 <SetupDMAStreams+0x1b0>)
 8008c72:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8008c74:	2200      	movs	r2, #0
	if (xTimerStream != NULL)
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	d038      	beq.n	8008cec <SetupDMAStreams+0x19c>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008c7a:	f005 fc03 	bl	800e484 <xTaskGetTickCount>
 8008c7e:	0002      	movs	r2, r0
 8008c80:	2301      	movs	r3, #1
 8008c82:	425b      	negs	r3, r3
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	2101      	movs	r1, #1
 8008c8a:	0020      	movs	r0, r4
 8008c8c:	f006 f982 	bl	800ef94 <xTimerGenericCommand>
	return BOS_OK;
 8008c90:	2200      	movs	r2, #0
 8008c92:	e02b      	b.n	8008cec <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008c94:	0010      	movs	r0, r2
 8008c96:	f004 fb23 	bl	800d2e0 <GetUart>
 8008c9a:	0006      	movs	r6, r0
 8008c9c:	230f      	movs	r3, #15
 8008c9e:	446b      	add	r3, sp
 8008ca0:	7818      	ldrb	r0, [r3, #0]
 8008ca2:	f004 fb1d 	bl	800d2e0 <GetUart>
 8008ca6:	0001      	movs	r1, r0
 8008ca8:	2201      	movs	r2, #1
 8008caa:	0030      	movs	r0, r6
 8008cac:	f7fe fcd0 	bl	8007650 <StartDMAstream>
 8008cb0:	0002      	movs	r2, r0
 8008cb2:	2817      	cmp	r0, #23
 8008cb4:	d01a      	beq.n	8008cec <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008cb6:	0160      	lsls	r0, r4, #5
 8008cb8:	1b00      	subs	r0, r0, r4
 8008cba:	0080      	lsls	r0, r0, #2
 8008cbc:	1900      	adds	r0, r0, r4
 8008cbe:	00c0      	lsls	r0, r0, #3
 8008cc0:	21fa      	movs	r1, #250	; 0xfa
 8008cc2:	0089      	lsls	r1, r1, #2
 8008cc4:	f7f7 fa44 	bl	8000150 <__udivsi3>
 8008cc8:	0001      	movs	r1, r0
 8008cca:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <SetupDMAStreams+0x1a8>)
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	ab0a      	add	r3, sp, #40	; 0x28
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	480a      	ldr	r0, [pc, #40]	; (8008cfc <SetupDMAStreams+0x1ac>)
 8008cd4:	f006 f93e 	bl	800ef54 <xTimerCreate>
 8008cd8:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008cda:	230f      	movs	r3, #15
 8008cdc:	446b      	add	r3, sp
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4a06      	ldr	r2, [pc, #24]	; (8008d00 <SetupDMAStreams+0x1b0>)
 8008ce6:	509d      	str	r5, [r3, r2]
 8008ce8:	e7c4      	b.n	8008c74 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8008cea:	2267      	movs	r2, #103	; 0x67
}
 8008cec:	0010      	movs	r0, r2
 8008cee:	b005      	add	sp, #20
 8008cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8008cf2:	2267      	movs	r2, #103	; 0x67
 8008cf4:	e7fa      	b.n	8008cec <SetupDMAStreams+0x19c>
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	08008b39 	.word	0x08008b39
 8008cfc:	08019e58 	.word	0x08019e58
 8008d00:	20001414 	.word	0x20001414
 8008d04:	20001098 	.word	0x20001098

08008d08 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008d08:	b510      	push	{r4, lr}
	switch (port)
 8008d0a:	2805      	cmp	r0, #5
 8008d0c:	d80a      	bhi.n	8008d24 <NotifyMessagingTask+0x1c>
 8008d0e:	0080      	lsls	r0, r0, #2
 8008d10:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <NotifyMessagingTask+0x60>)
 8008d12:	581b      	ldr	r3, [r3, r0]
 8008d14:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008d16:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <NotifyMessagingTask+0x64>)
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f006 f848 	bl	800edb4 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008d24:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008d26:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <NotifyMessagingTask+0x68>)
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	2100      	movs	r1, #0
 8008d30:	f006 f840 	bl	800edb4 <xTaskGenericNotify>
 8008d34:	e7f6      	b.n	8008d24 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <NotifyMessagingTask+0x6c>)
 8008d38:	6818      	ldr	r0, [r3, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	2100      	movs	r1, #0
 8008d40:	f006 f838 	bl	800edb4 <xTaskGenericNotify>
 8008d44:	e7ee      	b.n	8008d24 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <NotifyMessagingTask+0x70>)
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	2100      	movs	r1, #0
 8008d50:	f006 f830 	bl	800edb4 <xTaskGenericNotify>
 8008d54:	e7e6      	b.n	8008d24 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <NotifyMessagingTask+0x74>)
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	2100      	movs	r1, #0
 8008d60:	f006 f828 	bl	800edb4 <xTaskGenericNotify>
}
 8008d64:	e7de      	b.n	8008d24 <NotifyMessagingTask+0x1c>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	08019e40 	.word	0x08019e40
 8008d6c:	20001430 	.word	0x20001430
 8008d70:	20001434 	.word	0x20001434
 8008d74:	20001438 	.word	0x20001438
 8008d78:	2000143c 	.word	0x2000143c
 8008d7c:	20001440 	.word	0x20001440

08008d80 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d82:	46de      	mov	lr, fp
 8008d84:	4657      	mov	r7, sl
 8008d86:	464e      	mov	r6, r9
 8008d88:	4645      	mov	r5, r8
 8008d8a:	b5e0      	push	{r5, r6, r7, lr}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	4680      	mov	r8, r0
 8008d90:	468b      	mov	fp, r1
 8008d92:	0014      	movs	r4, r2
 8008d94:	469a      	mov	sl, r3
 8008d96:	ab0e      	add	r3, sp, #56	; 0x38
 8008d98:	881d      	ldrh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	d100      	bne.n	8008da2 <SendMessageFromPort+0x22>
 8008da0:	e171      	b.n	8009086 <SendMessageFromPort+0x306>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d147      	bne.n	8008e36 <SendMessageFromPort+0xb6>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008da6:	1c93      	adds	r3, r2, #2
 8008da8:	b2db      	uxtb	r3, r3
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
 8008daa:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d900      	bls.n	8008db2 <SendMessageFromPort+0x32>
 8008db0:	e14a      	b.n	8009048 <SendMessageFromPort+0x2c8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8008db2:	2000      	movs	r0, #0
 8008db4:	f005 face 	bl	800e354 <uxTaskPriorityGet>
 8008db8:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008dba:	2105      	movs	r1, #5
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f005 fad9 	bl	800e374 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8008dc2:	4bbe      	ldr	r3, [pc, #760]	; (80090bc <SendMessageFromPort+0x33c>)
 8008dc4:	2248      	movs	r2, #72	; 0x48
 8008dc6:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008dc8:	3212      	adds	r2, #18
 8008dca:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008dcc:	465b      	mov	r3, fp
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d000      	beq.n	8008dd4 <SendMessageFromPort+0x54>
 8008dd2:	e16e      	b.n	80090b2 <SendMessageFromPort+0x332>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8008dd4:	3d01      	subs	r5, #1
 8008dd6:	4bba      	ldr	r3, [pc, #744]	; (80090c0 <SendMessageFromPort+0x340>)
 8008dd8:	5d5f      	ldrb	r7, [r3, r5]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008dda:	4eba      	ldr	r6, [pc, #744]	; (80090c4 <SendMessageFromPort+0x344>)
 8008ddc:	00e9      	lsls	r1, r5, #3
 8008dde:	1b49      	subs	r1, r1, r5
 8008de0:	00c9      	lsls	r1, r1, #3
 8008de2:	4db9      	ldr	r5, [pc, #740]	; (80090c8 <SendMessageFromPort+0x348>)
 8008de4:	1949      	adds	r1, r1, r5
 8008de6:	003a      	movs	r2, r7
 8008de8:	0030      	movs	r0, r6
 8008dea:	f00a f820 	bl	8012e2e <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008dee:	3e03      	subs	r6, #3
 8008df0:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008df2:	1cfd      	adds	r5, r7, #3
 8008df4:	002a      	movs	r2, r5
 8008df6:	0031      	movs	r1, r6
 8008df8:	48b4      	ldr	r0, [pc, #720]	; (80090cc <SendMessageFromPort+0x34c>)
 8008dfa:	f00a f818 	bl	8012e2e <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008dfe:	b2bf      	uxth	r7, r7
 8008e00:	1cf9      	adds	r1, r7, #3
 8008e02:	48b2      	ldr	r0, [pc, #712]	; (80090cc <SendMessageFromPort+0x34c>)
 8008e04:	f003 fcca 	bl	800c79c <CalculateCRC8>
 8008e08:	5570      	strb	r0, [r6, r5]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008e0a:	2238      	movs	r2, #56	; 0x38
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	48af      	ldr	r0, [pc, #700]	; (80090cc <SendMessageFromPort+0x34c>)
 8008e10:	f00a f816 	bl	8012e40 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008e14:	3402      	adds	r4, #2
 8008e16:	b2e4      	uxtb	r4, r4
 8008e18:	2c01      	cmp	r4, #1
 8008e1a:	d900      	bls.n	8008e1e <SendMessageFromPort+0x9e>
 8008e1c:	e105      	b.n	800902a <SendMessageFromPort+0x2aa>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8008e1e:	4653      	mov	r3, sl
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d000      	beq.n	8008e26 <SendMessageFromPort+0xa6>
 8008e24:	e0f6      	b.n	8009014 <SendMessageFromPort+0x294>
 8008e26:	465b      	mov	r3, fp
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d000      	beq.n	8008e2e <SendMessageFromPort+0xae>
 8008e2c:	e0f2      	b.n	8009014 <SendMessageFromPort+0x294>
			src = message[4];
 8008e2e:	4ba3      	ldr	r3, [pc, #652]	; (80090bc <SendMessageFromPort+0x33c>)
 8008e30:	791b      	ldrb	r3, [r3, #4]
 8008e32:	469b      	mov	fp, r3
 8008e34:	e0ee      	b.n	8009014 <SendMessageFromPort+0x294>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d002      	beq.n	8008e40 <SendMessageFromPort+0xc0>
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	d100      	bne.n	8008e40 <SendMessageFromPort+0xc0>
 8008e3e:	e124      	b.n	800908a <SendMessageFromPort+0x30a>
	TaskPriority = uxTaskPriorityGet( NULL );
 8008e40:	2000      	movs	r0, #0
 8008e42:	f005 fa87 	bl	800e354 <uxTaskPriorityGet>
 8008e46:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008e48:	2105      	movs	r1, #5
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f005 fa92 	bl	800e374 <vTaskPrioritySet>
	message[0] = 'H';						
 8008e50:	4b9a      	ldr	r3, [pc, #616]	; (80090bc <SendMessageFromPort+0x33c>)
 8008e52:	2248      	movs	r2, #72	; 0x48
 8008e54:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008e56:	3212      	adds	r2, #18
 8008e58:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008e5a:	4653      	mov	r3, sl
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0b9      	beq.n	8008dd4 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8008e60:	465b      	mov	r3, fp
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d04f      	beq.n	8008f06 <SendMessageFromPort+0x186>
		message[2] = length;	
 8008e66:	4995      	ldr	r1, [pc, #596]	; (80090bc <SendMessageFromPort+0x33c>)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8008e6c:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8008e6e:	465b      	mov	r3, fp
 8008e70:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008e72:	4a97      	ldr	r2, [pc, #604]	; (80090d0 <SendMessageFromPort+0x350>)
 8008e74:	79d3      	ldrb	r3, [r2, #7]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	7992      	ldrb	r2, [r2, #6]
 8008e7a:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8008e7c:	22ff      	movs	r2, #255	; 0xff
 8008e7e:	4552      	cmp	r2, sl
 8008e80:	4192      	sbcs	r2, r2
 8008e82:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008e84:	0052      	lsls	r2, r2, #1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	718a      	strb	r2, [r1, #6]
 8008e90:	2200      	movs	r2, #0
 8008e92:	4691      	mov	r9, r2
		if (extendCode == true) {
 8008e94:	4652      	mov	r2, sl
 8008e96:	2aff      	cmp	r2, #255	; 0xff
 8008e98:	d903      	bls.n	8008ea2 <SendMessageFromPort+0x122>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008e9a:	0a12      	lsrs	r2, r2, #8
 8008e9c:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4691      	mov	r9, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8008ea2:	2d2e      	cmp	r5, #46	; 0x2e
 8008ea4:	d933      	bls.n	8008f0e <SendMessageFromPort+0x18e>
			message[5] |= 0x80;		
 8008ea6:	2280      	movs	r2, #128	; 0x80
 8008ea8:	4252      	negs	r2, r2
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	4a83      	ldr	r2, [pc, #524]	; (80090bc <SendMessageFromPort+0x33c>)
 8008eae:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8008eb0:	4b88      	ldr	r3, [pc, #544]	; (80090d4 <SendMessageFromPort+0x354>)
 8008eb2:	801d      	strh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 8008eb4:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8008eb6:	252e      	movs	r5, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008eb8:	464b      	mov	r3, r9
 8008eba:	3307      	adds	r3, #7
 8008ebc:	4694      	mov	ip, r2
 8008ebe:	4463      	add	r3, ip
 8008ec0:	9303      	str	r3, [sp, #12]
			while (totalNumberOfParams != 0)
 8008ec2:	4b84      	ldr	r3, [pc, #528]	; (80090d4 <SendMessageFromPort+0x354>)
 8008ec4:	881f      	ldrh	r7, [r3, #0]
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d02f      	beq.n	8008f2a <SendMessageFromPort+0x1aa>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8008eca:	0029      	movs	r1, r5
 8008ecc:	0038      	movs	r0, r7
 8008ece:	f7f7 f93f 	bl	8000150 <__udivsi3>
 8008ed2:	b280      	uxth	r0, r0
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d144      	bne.n	8008f62 <SendMessageFromPort+0x1e2>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8008ed8:	4b78      	ldr	r3, [pc, #480]	; (80090bc <SendMessageFromPort+0x33c>)
 8008eda:	795a      	ldrb	r2, [r3, #5]
 8008edc:	237f      	movs	r3, #127	; 0x7f
 8008ede:	4013      	ands	r3, r2
 8008ee0:	4a76      	ldr	r2, [pc, #472]	; (80090bc <SendMessageFromPort+0x33c>)
 8008ee2:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008ee4:	4d7c      	ldr	r5, [pc, #496]	; (80090d8 <SendMessageFromPort+0x358>)
 8008ee6:	8829      	ldrh	r1, [r5, #0]
 8008ee8:	4b7c      	ldr	r3, [pc, #496]	; (80090dc <SendMessageFromPort+0x35c>)
 8008eea:	18c9      	adds	r1, r1, r3
 8008eec:	003a      	movs	r2, r7
 8008eee:	9803      	ldr	r0, [sp, #12]
 8008ef0:	f009 ff9d 	bl	8012e2e <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	802b      	strh	r3, [r5, #0]
 8008ef8:	4a76      	ldr	r2, [pc, #472]	; (80090d4 <SendMessageFromPort+0x354>)
 8008efa:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8008efc:	1d3e      	adds	r6, r7, #4
 8008efe:	444e      	add	r6, r9
 8008f00:	b2f6      	uxtb	r6, r6
					numberOfParams = totalNumberOfParams;
 8008f02:	003d      	movs	r5, r7
 8008f04:	e7dd      	b.n	8008ec2 <SendMessageFromPort+0x142>
		if (src == 0)		src = myID;
 8008f06:	4b76      	ldr	r3, [pc, #472]	; (80090e0 <SendMessageFromPort+0x360>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	469b      	mov	fp, r3
 8008f0c:	e7ab      	b.n	8008e66 <SendMessageFromPort+0xe6>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008f0e:	464b      	mov	r3, r9
 8008f10:	3307      	adds	r3, #7
 8008f12:	486a      	ldr	r0, [pc, #424]	; (80090bc <SendMessageFromPort+0x33c>)
 8008f14:	1818      	adds	r0, r3, r0
 8008f16:	4b70      	ldr	r3, [pc, #448]	; (80090d8 <SendMessageFromPort+0x358>)
 8008f18:	8819      	ldrh	r1, [r3, #0]
 8008f1a:	4b70      	ldr	r3, [pc, #448]	; (80090dc <SendMessageFromPort+0x35c>)
 8008f1c:	18c9      	adds	r1, r1, r3
 8008f1e:	002a      	movs	r2, r5
 8008f20:	f009 ff85 	bl	8012e2e <memcpy>
			length = numberOfParams + shift + 4;
 8008f24:	1d2e      	adds	r6, r5, #4
 8008f26:	444e      	add	r6, r9
 8008f28:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8008f2a:	4b6e      	ldr	r3, [pc, #440]	; (80090e4 <SendMessageFromPort+0x364>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d057      	beq.n	8008fe2 <SendMessageFromPort+0x262>
			if (dstGroupID < BOS_BROADCAST)
 8008f32:	4b6d      	ldr	r3, [pc, #436]	; (80090e8 <SendMessageFromPort+0x368>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2bff      	cmp	r3, #255	; 0xff
 8008f38:	d100      	bne.n	8008f3c <SendMessageFromPort+0x1bc>
 8008f3a:	e0aa      	b.n	8009092 <SendMessageFromPort+0x312>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008f3c:	4a6b      	ldr	r2, [pc, #428]	; (80090ec <SendMessageFromPort+0x36c>)
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	4694      	mov	ip, r2
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	d06f      	beq.n	8009026 <SendMessageFromPort+0x2a6>
 8008f46:	2701      	movs	r7, #1
 8008f48:	409f      	lsls	r7, r3
 8008f4a:	4869      	ldr	r0, [pc, #420]	; (80090f0 <SendMessageFromPort+0x370>)
 8008f4c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8008f4e:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008f50:	495a      	ldr	r1, [pc, #360]	; (80090bc <SendMessageFromPort+0x33c>)
 8008f52:	468a      	mov	sl, r1
 8008f54:	44aa      	add	sl, r5
 8008f56:	0021      	movs	r1, r4
 8008f58:	4664      	mov	r4, ip
 8008f5a:	46b4      	mov	ip, r6
 8008f5c:	464e      	mov	r6, r9
 8008f5e:	4689      	mov	r9, r1
 8008f60:	e017      	b.n	8008f92 <SendMessageFromPort+0x212>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8008f62:	9500      	str	r5, [sp, #0]
 8008f64:	4653      	mov	r3, sl
 8008f66:	0022      	movs	r2, r4
 8008f68:	4659      	mov	r1, fp
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff ff08 	bl	8008d80 <SendMessageFromPort>
					osDelay(10);
 8008f70:	200a      	movs	r0, #10
 8008f72:	f004 fb00 	bl	800d576 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8008f76:	4a57      	ldr	r2, [pc, #348]	; (80090d4 <SendMessageFromPort+0x354>)
 8008f78:	8813      	ldrh	r3, [r2, #0]
 8008f7a:	1b5b      	subs	r3, r3, r5
 8008f7c:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 8008f7e:	4a56      	ldr	r2, [pc, #344]	; (80090d8 <SendMessageFromPort+0x358>)
 8008f80:	8813      	ldrh	r3, [r2, #0]
 8008f82:	18eb      	adds	r3, r5, r3
 8008f84:	8013      	strh	r3, [r2, #0]
 8008f86:	e79c      	b.n	8008ec2 <SendMessageFromPort+0x142>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008f88:	3301      	adds	r3, #1
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3002      	adds	r0, #2
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	d80e      	bhi.n	8008fb0 <SendMessageFromPort+0x230>
					if (InGroup(i, dstGroupID))
 8008f92:	8801      	ldrh	r1, [r0, #0]
 8008f94:	420f      	tst	r7, r1
 8008f96:	d0f7      	beq.n	8008f88 <SendMessageFromPort+0x208>
						++groupMembers;							// Add this member
 8008f98:	3201      	adds	r2, #1
 8008f9a:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 8008f9c:	18a9      	adds	r1, r5, r2
 8008f9e:	3101      	adds	r1, #1
 8008fa0:	292d      	cmp	r1, #45	; 0x2d
 8008fa2:	dd00      	ble.n	8008fa6 <SendMessageFromPort+0x226>
 8008fa4:	e073      	b.n	800908e <SendMessageFromPort+0x30e>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008fa6:	4651      	mov	r1, sl
 8008fa8:	1889      	adds	r1, r1, r2
 8008faa:	1989      	adds	r1, r1, r6
 8008fac:	718b      	strb	r3, [r1, #6]
 8008fae:	e7eb      	b.n	8008f88 <SendMessageFromPort+0x208>
 8008fb0:	464c      	mov	r4, r9
 8008fb2:	46b1      	mov	r9, r6
 8008fb4:	4666      	mov	r6, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	3307      	adds	r3, #7
 8008fba:	195b      	adds	r3, r3, r5
 8008fbc:	189b      	adds	r3, r3, r2
 8008fbe:	493f      	ldr	r1, [pc, #252]	; (80090bc <SendMessageFromPort+0x33c>)
 8008fc0:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8008fc2:	18ad      	adds	r5, r5, r2
 8008fc4:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008fc6:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8008fc8:	2d2d      	cmp	r5, #45	; 0x2d
 8008fca:	dc3d      	bgt.n	8009048 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8008fcc:	4849      	ldr	r0, [pc, #292]	; (80090f4 <SendMessageFromPort+0x374>)
 8008fce:	7801      	ldrb	r1, [r0, #0]
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	b2c9      	uxtb	r1, r1
 8008fd4:	7001      	strb	r1, [r0, #0]
 8008fd6:	4839      	ldr	r0, [pc, #228]	; (80090bc <SendMessageFromPort+0x33c>)
 8008fd8:	18c3      	adds	r3, r0, r3
 8008fda:	7059      	strb	r1, [r3, #1]
 8008fdc:	3602      	adds	r6, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008fde:	18b6      	adds	r6, r6, r2
 8008fe0:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8008fe2:	4b36      	ldr	r3, [pc, #216]	; (80090bc <SendMessageFromPort+0x33c>)
 8008fe4:	469a      	mov	sl, r3
 8008fe6:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8008fe8:	1cf5      	adds	r5, r6, #3
 8008fea:	002a      	movs	r2, r5
 8008fec:	0019      	movs	r1, r3
 8008fee:	4837      	ldr	r0, [pc, #220]	; (80090cc <SendMessageFromPort+0x34c>)
 8008ff0:	f009 ff1d 	bl	8012e2e <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008ff4:	b2b7      	uxth	r7, r6
 8008ff6:	0029      	movs	r1, r5
 8008ff8:	4834      	ldr	r0, [pc, #208]	; (80090cc <SendMessageFromPort+0x34c>)
 8008ffa:	f003 fbcf 	bl	800c79c <CalculateCRC8>
 8008ffe:	4653      	mov	r3, sl
 8009000:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8009002:	2238      	movs	r2, #56	; 0x38
 8009004:	2100      	movs	r1, #0
 8009006:	4831      	ldr	r0, [pc, #196]	; (80090cc <SendMessageFromPort+0x34c>)
 8009008:	f009 ff1a 	bl	8012e40 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 800900c:	3402      	adds	r4, #2
 800900e:	b2e4      	uxtb	r4, r4
 8009010:	2c01      	cmp	r4, #1
 8009012:	d80a      	bhi.n	800902a <SendMessageFromPort+0x2aa>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009014:	4658      	mov	r0, fp
 8009016:	f7fa fd4b 	bl	8003ab0 <FindBroadcastRoutes>
 800901a:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800901c:	2401      	movs	r4, #1
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 800901e:	4b36      	ldr	r3, [pc, #216]	; (80090f8 <SendMessageFromPort+0x378>)
 8009020:	4698      	mov	r8, r3
 8009022:	4e2f      	ldr	r6, [pc, #188]	; (80090e0 <SendMessageFromPort+0x360>)
 8009024:	e01c      	b.n	8009060 <SendMessageFromPort+0x2e0>
			uint8_t groupMembers = 0;
 8009026:	2200      	movs	r2, #0
 8009028:	e7c5      	b.n	8008fb6 <SendMessageFromPort+0x236>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 800902a:	1d3a      	adds	r2, r7, #4
 800902c:	b292      	uxth	r2, r2
 800902e:	2332      	movs	r3, #50	; 0x32
 8009030:	4922      	ldr	r1, [pc, #136]	; (80090bc <SendMessageFromPort+0x33c>)
 8009032:	4640      	mov	r0, r8
 8009034:	f004 f9bc 	bl	800d3b0 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8009038:	9902      	ldr	r1, [sp, #8]
 800903a:	2000      	movs	r0, #0
 800903c:	f005 f99a 	bl	800e374 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8009040:	4b2e      	ldr	r3, [pc, #184]	; (80090fc <SendMessageFromPort+0x37c>)
 8009042:	2202      	movs	r2, #2
 8009044:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009046:	2000      	movs	r0, #0
}
 8009048:	b005      	add	sp, #20
 800904a:	bc3c      	pop	{r2, r3, r4, r5}
 800904c:	4690      	mov	r8, r2
 800904e:	4699      	mov	r9, r3
 8009050:	46a2      	mov	sl, r4
 8009052:	46ab      	mov	fp, r5
 8009054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8009056:	3401      	adds	r4, #1
 8009058:	b2e4      	uxtb	r4, r4
 800905a:	3501      	adds	r5, #1
 800905c:	2c06      	cmp	r4, #6
 800905e:	d0eb      	beq.n	8009038 <SendMessageFromPort+0x2b8>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009060:	7833      	ldrb	r3, [r6, #0]
 8009062:	3b01      	subs	r3, #1
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4642      	mov	r2, r8
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	412b      	asrs	r3, r5
 800906c:	07db      	lsls	r3, r3, #31
 800906e:	d5f2      	bpl.n	8009056 <SendMessageFromPort+0x2d6>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8009070:	1d3a      	adds	r2, r7, #4
 8009072:	b292      	uxth	r2, r2
 8009074:	2332      	movs	r3, #50	; 0x32
 8009076:	4911      	ldr	r1, [pc, #68]	; (80090bc <SendMessageFromPort+0x33c>)
 8009078:	0020      	movs	r0, r4
 800907a:	f004 f999 	bl	800d3b0 <writePxDMAMutex>
				Delay_ms(1);
 800907e:	2001      	movs	r0, #1
 8009080:	f006 fab0 	bl	800f5e4 <HAL_Delay>
 8009084:	e7e7      	b.n	8009056 <SendMessageFromPort+0x2d6>
		return BOS_ERR_WrongParam; 
 8009086:	2067      	movs	r0, #103	; 0x67
 8009088:	e7de      	b.n	8009048 <SendMessageFromPort+0x2c8>
 800908a:	2067      	movs	r0, #103	; 0x67
 800908c:	e7dc      	b.n	8009048 <SendMessageFromPort+0x2c8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800908e:	2069      	movs	r0, #105	; 0x69
 8009090:	e7da      	b.n	8009048 <SendMessageFromPort+0x2c8>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009092:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009094:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009096:	2b2d      	cmp	r3, #45	; 0x2d
 8009098:	dcd6      	bgt.n	8009048 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams] = ++bcastID;
 800909a:	4a16      	ldr	r2, [pc, #88]	; (80090f4 <SendMessageFromPort+0x374>)
 800909c:	7813      	ldrb	r3, [r2, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	7013      	strb	r3, [r2, #0]
 80090a4:	4a05      	ldr	r2, [pc, #20]	; (80090bc <SendMessageFromPort+0x33c>)
 80090a6:	1955      	adds	r5, r2, r5
 80090a8:	444d      	add	r5, r9
 80090aa:	71eb      	strb	r3, [r5, #7]
				length += 1;		// + bcastID
 80090ac:	3601      	adds	r6, #1
 80090ae:	b2f6      	uxtb	r6, r6
 80090b0:	e797      	b.n	8008fe2 <SendMessageFromPort+0x262>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80090b2:	4653      	mov	r3, sl
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d100      	bne.n	80090ba <SendMessageFromPort+0x33a>
 80090b8:	e68c      	b.n	8008dd4 <SendMessageFromPort+0x54>
 80090ba:	e6d4      	b.n	8008e66 <SendMessageFromPort+0xe6>
 80090bc:	20000ea8 	.word	0x20000ea8
 80090c0:	20000ee0 	.word	0x20000ee0
 80090c4:	20000eab 	.word	0x20000eab
 80090c8:	20000cf0 	.word	0x20000cf0
 80090cc:	200013b4 	.word	0x200013b4
 80090d0:	20006898 	.word	0x20006898
 80090d4:	200014c6 	.word	0x200014c6
 80090d8:	200014c4 	.word	0x200014c4
 80090dc:	20000ee8 	.word	0x20000ee8
 80090e0:	2000101c 	.word	0x2000101c
 80090e4:	20000a74 	.word	0x20000a74
 80090e8:	2000001d 	.word	0x2000001d
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	20000e70 	.word	0x20000e70
 80090f4:	20000c9e 	.word	0x20000c9e
 80090f8:	20000ca0 	.word	0x20000ca0
 80090fc:	200010b0 	.word	0x200010b0

08009100 <ForwardReceivedMessage>:
{
 8009100:	b530      	push	{r4, r5, lr}
 8009102:	b083      	sub	sp, #12
 8009104:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <ForwardReceivedMessage+0x34>)
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 800910c:	1e42      	subs	r2, r0, #1
 800910e:	00d3      	lsls	r3, r2, #3
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4a08      	ldr	r2, [pc, #32]	; (8009138 <ForwardReceivedMessage+0x38>)
 8009116:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 8009118:	4b08      	ldr	r3, [pc, #32]	; (800913c <ForwardReceivedMessage+0x3c>)
 800911a:	7818      	ldrb	r0, [r3, #0]
 800911c:	0021      	movs	r1, r4
 800911e:	f7fa fd69 	bl	8003bf4 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009122:	9500      	str	r5, [sp, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	0022      	movs	r2, r4
 8009128:	2100      	movs	r1, #0
 800912a:	f7ff fe29 	bl	8008d80 <SendMessageFromPort>
}
 800912e:	2000      	movs	r0, #0
 8009130:	b003      	add	sp, #12
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	20000a74 	.word	0x20000a74
 8009138:	20000cf0 	.word	0x20000cf0
 800913c:	2000101c 	.word	0x2000101c

08009140 <BroadcastReceivedMessage>:
{
 8009140:	b500      	push	{lr}
 8009142:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <BroadcastReceivedMessage+0x38>)
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <BroadcastReceivedMessage+0x3c>)
 800914c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800914e:	28ff      	cmp	r0, #255	; 0xff
 8009150:	d009      	beq.n	8009166 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8009152:	9100      	str	r1, [sp, #0]
 8009154:	2300      	movs	r3, #0
 8009156:	22fe      	movs	r2, #254	; 0xfe
 8009158:	2100      	movs	r1, #0
 800915a:	2000      	movs	r0, #0
 800915c:	f7ff fe10 	bl	8008d80 <SendMessageFromPort>
}
 8009160:	2000      	movs	r0, #0
 8009162:	b003      	add	sp, #12
 8009164:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8009166:	9100      	str	r1, [sp, #0]
 8009168:	2300      	movs	r3, #0
 800916a:	32ff      	adds	r2, #255	; 0xff
 800916c:	2100      	movs	r1, #0
 800916e:	2000      	movs	r0, #0
 8009170:	f7ff fe06 	bl	8008d80 <SendMessageFromPort>
 8009174:	e7f4      	b.n	8009160 <BroadcastReceivedMessage+0x20>
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	20000a74 	.word	0x20000a74
 800917c:	2000001d 	.word	0x2000001d

08009180 <BroadcastMessage>:
{
 8009180:	b530      	push	{r4, r5, lr}
 8009182:	b083      	sub	sp, #12
 8009184:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <BroadcastMessage+0x44>)
 8009188:	2501      	movs	r5, #1
 800918a:	701d      	strb	r5, [r3, #0]
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <BroadcastMessage+0x48>)
 800918e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009190:	29ff      	cmp	r1, #255	; 0xff
 8009192:	d00e      	beq.n	80091b2 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8009194:	9400      	str	r4, [sp, #0]
 8009196:	0013      	movs	r3, r2
 8009198:	22fe      	movs	r2, #254	; 0xfe
 800919a:	0001      	movs	r1, r0
 800919c:	2000      	movs	r0, #0
 800919e:	f7ff fdef 	bl	8008d80 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80091a2:	0022      	movs	r2, r4
 80091a4:	2100      	movs	r1, #0
 80091a6:	4809      	ldr	r0, [pc, #36]	; (80091cc <BroadcastMessage+0x4c>)
 80091a8:	f009 fe4a 	bl	8012e40 <memset>
}
 80091ac:	2000      	movs	r0, #0
 80091ae:	b003      	add	sp, #12
 80091b0:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 80091b2:	9400      	str	r4, [sp, #0]
 80091b4:	0013      	movs	r3, r2
 80091b6:	22ff      	movs	r2, #255	; 0xff
 80091b8:	0001      	movs	r1, r0
 80091ba:	2000      	movs	r0, #0
 80091bc:	f7ff fde0 	bl	8008d80 <SendMessageFromPort>
 80091c0:	e7ef      	b.n	80091a2 <BroadcastMessage+0x22>
 80091c2:	46c0      	nop			; (mov r8, r8)
 80091c4:	20000a74 	.word	0x20000a74
 80091c8:	2000001d 	.word	0x2000001d
 80091cc:	20000ee8 	.word	0x20000ee8

080091d0 <SendMessageToModule>:
{
 80091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d2:	b083      	sub	sp, #12
 80091d4:	0004      	movs	r4, r0
 80091d6:	000e      	movs	r6, r1
 80091d8:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80091da:	28ff      	cmp	r0, #255	; 0xff
 80091dc:	d012      	beq.n	8009204 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80091de:	4f0d      	ldr	r7, [pc, #52]	; (8009214 <SendMessageToModule+0x44>)
 80091e0:	7838      	ldrb	r0, [r7, #0]
 80091e2:	0021      	movs	r1, r4
 80091e4:	f7fa fd06 	bl	8003bf4 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80091e8:	7839      	ldrb	r1, [r7, #0]
 80091ea:	9500      	str	r5, [sp, #0]
 80091ec:	0033      	movs	r3, r6
 80091ee:	0022      	movs	r2, r4
 80091f0:	f7ff fdc6 	bl	8008d80 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 80091f4:	002a      	movs	r2, r5
 80091f6:	2100      	movs	r1, #0
 80091f8:	4807      	ldr	r0, [pc, #28]	; (8009218 <SendMessageToModule+0x48>)
 80091fa:	f009 fe21 	bl	8012e40 <memset>
}
 80091fe:	2000      	movs	r0, #0
 8009200:	b003      	add	sp, #12
 8009202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8009204:	4b03      	ldr	r3, [pc, #12]	; (8009214 <SendMessageToModule+0x44>)
 8009206:	7818      	ldrb	r0, [r3, #0]
 8009208:	0013      	movs	r3, r2
 800920a:	000a      	movs	r2, r1
 800920c:	21ff      	movs	r1, #255	; 0xff
 800920e:	f7ff ffb7 	bl	8009180 <BroadcastMessage>
 8009212:	e7f4      	b.n	80091fe <SendMessageToModule+0x2e>
 8009214:	2000101c 	.word	0x2000101c
 8009218:	20000ee8 	.word	0x20000ee8

0800921c <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 800921c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921e:	46de      	mov	lr, fp
 8009220:	4657      	mov	r7, sl
 8009222:	464e      	mov	r6, r9
 8009224:	4645      	mov	r5, r8
 8009226:	b5e0      	push	{r5, r6, r7, lr}
 8009228:	b091      	sub	sp, #68	; 0x44
 800922a:	900f      	str	r0, [sp, #60]	; 0x3c
 800922c:	000c      	movs	r4, r1
 800922e:	9106      	str	r1, [sp, #24]
 8009230:	0015      	movs	r5, r2
 8009232:	920e      	str	r2, [sp, #56]	; 0x38
 8009234:	001e      	movs	r6, r3
 8009236:	ab1a      	add	r3, sp, #104	; 0x68
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	4698      	mov	r8, r3
 800923c:	ab1d      	add	r3, sp, #116	; 0x74
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	469a      	mov	sl, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8009242:	4b5a      	ldr	r3, [pc, #360]	; (80093ac <StartScastDMAStream+0x190>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	428b      	cmp	r3, r1
 8009248:	d11d      	bne.n	8009286 <StartScastDMAStream+0x6a>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800924a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800924c:	0e1b      	lsrs	r3, r3, #24
 800924e:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8009250:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	b2db      	uxtb	r3, r3
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8009258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	b2db      	uxtb	r3, r3
 800925e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009260:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009262:	0e1b      	lsrs	r3, r3, #24
 8009264:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009266:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	b2db      	uxtb	r3, r3
 800926c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800926e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	b2db      	uxtb	r3, r3
 8009274:	469b      	mov	fp, r3
 8009276:	4d4e      	ldr	r5, [pc, #312]	; (80093b0 <StartScastDMAStream+0x194>)
 8009278:	2319      	movs	r3, #25
 800927a:	4699      	mov	r9, r3
 800927c:	44a9      	add	r9, r5
				temp2 = dstP;
 800927e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009280:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009282:	4c4c      	ldr	r4, [pc, #304]	; (80093b4 <StartScastDMAStream+0x198>)
 8009284:	e05c      	b.n	8009340 <StartScastDMAStream+0x124>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009286:	4b4b      	ldr	r3, [pc, #300]	; (80093b4 <StartScastDMAStream+0x198>)
 8009288:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800928a:	0e12      	lsrs	r2, r2, #24
 800928c:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 800928e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009290:	0c12      	lsrs	r2, r2, #16
 8009292:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8009294:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009296:	0a12      	lsrs	r2, r2, #8
 8009298:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 800929a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800929c:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800929e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092a0:	0e12      	lsrs	r2, r2, #24
 80092a2:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 80092a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092a6:	0c12      	lsrs	r2, r2, #16
 80092a8:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 80092aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092ac:	0a12      	lsrs	r2, r2, #8
 80092ae:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 80092b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092b2:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 80092b4:	4642      	mov	r2, r8
 80092b6:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 80092b8:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 80092ba:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 80092bc:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 80092be:	4652      	mov	r2, sl
 80092c0:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80092c2:	220d      	movs	r2, #13
 80092c4:	211c      	movs	r1, #28
 80092c6:	0020      	movs	r0, r4
 80092c8:	f7ff ff82 	bl	80091d0 <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80092cc:	2000      	movs	r0, #0
 80092ce:	b011      	add	sp, #68	; 0x44
 80092d0:	bc3c      	pop	{r2, r3, r4, r5}
 80092d2:	4690      	mov	r8, r2
 80092d4:	4699      	mov	r9, r3
 80092d6:	46a2      	mov	sl, r4
 80092d8:	46ab      	mov	fp, r5
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80092dc:	9906      	ldr	r1, [sp, #24]
 80092de:	f7fa fc89 	bl	8003bf4 <FindRoute>
 80092e2:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 80092e4:	0031      	movs	r1, r6
 80092e6:	9806      	ldr	r0, [sp, #24]
 80092e8:	f7fa fc84 	bl	8003bf4 <FindRoute>
			if (route[i] == dstM) {
 80092ec:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 80092ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 80092f0:	42b0      	cmp	r0, r6
 80092f2:	d134      	bne.n	800935e <StartScastDMAStream+0x142>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80092f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092fa:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80092fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fe:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8009300:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009302:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009306:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800930a:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 800930c:	465a      	mov	r2, fp
 800930e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8009310:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009312:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8009314:	4642      	mov	r2, r8
 8009316:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009318:	9a07      	ldr	r2, [sp, #28]
 800931a:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 800931c:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 800931e:	4653      	mov	r3, sl
 8009320:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8009322:	0031      	movs	r1, r6
 8009324:	9806      	ldr	r0, [sp, #24]
 8009326:	f7fa fc65 	bl	8003bf4 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 800932a:	7878      	ldrb	r0, [r7, #1]
 800932c:	220c      	movs	r2, #12
 800932e:	211b      	movs	r1, #27
 8009330:	f7ff ff4e 	bl	80091d0 <SendMessageToModule>
			osDelay(10);
 8009334:	200a      	movs	r0, #10
 8009336:	f004 f91e 	bl	800d576 <osDelay>
 800933a:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 800933c:	454d      	cmp	r5, r9
 800933e:	d013      	beq.n	8009368 <StartScastDMAStream+0x14c>
		FindRoute(srcM, dstM);
 8009340:	0031      	movs	r1, r6
 8009342:	9806      	ldr	r0, [sp, #24]
 8009344:	f7fa fc56 	bl	8003bf4 <FindRoute>
 8009348:	002f      	movs	r7, r5
		if (route[i]) 
 800934a:	7868      	ldrb	r0, [r5, #1]
 800934c:	2800      	cmp	r0, #0
 800934e:	d0f4      	beq.n	800933a <StartScastDMAStream+0x11e>
			if (route[i+1]) {
 8009350:	78a9      	ldrb	r1, [r5, #2]
 8009352:	2900      	cmp	r1, #0
 8009354:	d0c2      	beq.n	80092dc <StartScastDMAStream+0xc0>
				temp1 = FindRoute(route[i], route[i+1]);
 8009356:	f7fa fc4d 	bl	8003bf4 <FindRoute>
 800935a:	9007      	str	r0, [sp, #28]
 800935c:	e7c2      	b.n	80092e4 <StartScastDMAStream+0xc8>
				temp2 = FindRoute(route[i], route[i-1]);
 800935e:	7839      	ldrb	r1, [r7, #0]
 8009360:	f7fa fc48 	bl	8003bf4 <FindRoute>
 8009364:	0003      	movs	r3, r0
 8009366:	e7c5      	b.n	80092f4 <StartScastDMAStream+0xd8>
	if (srcM == dstM)
 8009368:	9806      	ldr	r0, [sp, #24]
 800936a:	42b0      	cmp	r0, r6
 800936c:	d118      	bne.n	80093a0 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 800936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009374:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009376:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009378:	4640      	mov	r0, r8
 800937a:	f7ff fbe9 	bl	8008b50 <SetupDMAStreams>
	if (stored) {		
 800937e:	4653      	mov	r3, sl
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0a3      	beq.n	80092cc <StartScastDMAStream+0xb0>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8009384:	2300      	movs	r3, #0
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009394:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009396:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009398:	4640      	mov	r0, r8
 800939a:	f7fa f8ef 	bl	800357c <SaveEEstreams>
 800939e:	e795      	b.n	80092cc <StartScastDMAStream+0xb0>
		port = FindRoute(srcM, dstM);
 80093a0:	0031      	movs	r1, r6
 80093a2:	f7fa fc27 	bl	8003bf4 <FindRoute>
 80093a6:	900e      	str	r0, [sp, #56]	; 0x38
 80093a8:	e7e1      	b.n	800936e <StartScastDMAStream+0x152>
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	2000101c 	.word	0x2000101c
 80093b0:	2000694f 	.word	0x2000694f
 80093b4:	20000ee8 	.word	0x20000ee8

080093b8 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 80093b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ba:	46de      	mov	lr, fp
 80093bc:	4657      	mov	r7, sl
 80093be:	464e      	mov	r6, r9
 80093c0:	4645      	mov	r5, r8
 80093c2:	b5e0      	push	{r5, r6, r7, lr}
 80093c4:	b087      	sub	sp, #28
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	469b      	mov	fp, r3

						/* A.5.1. Copy the packet to message buffer */	
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
						} else {				// Message wraps around
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 80093ca:	4bd5      	ldr	r3, [pc, #852]	; (8009720 <BackEndTask+0x368>)
 80093cc:	3b70      	subs	r3, #112	; 0x70
 80093ce:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 80093d0:	4bd3      	ldr	r3, [pc, #844]	; (8009720 <BackEndTask+0x368>)
 80093d2:	3b70      	subs	r3, #112	; 0x70
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	e19e      	b.n	8009716 <BackEndTask+0x35e>
 80093d8:	1ebb      	subs	r3, r7, #2
 80093da:	4698      	mov	r8, r3
 80093dc:	4bd1      	ldr	r3, [pc, #836]	; (8009724 <BackEndTask+0x36c>)
 80093de:	4443      	add	r3, r8
 80093e0:	4699      	mov	r9, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80093e2:	7819      	ldrb	r1, [r3, #0]
 80093e4:	293f      	cmp	r1, #63	; 0x3f
 80093e6:	dc17      	bgt.n	8009418 <BackEndTask+0x60>
							if (BOS.disableCLI == false)
 80093e8:	4bcf      	ldr	r3, [pc, #828]	; (8009728 <BackEndTask+0x370>)
 80093ea:	7edb      	ldrb	r3, [r3, #27]
 80093ec:	469c      	mov	ip, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80093ee:	000b      	movs	r3, r1
							if (BOS.disableCLI == false)
 80093f0:	2000      	movs	r0, #0
 80093f2:	e004      	b.n	80093fe <BackEndTask+0x46>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80093f4:	2b3f      	cmp	r3, #63	; 0x3f
 80093f6:	d023      	beq.n	8009440 <BackEndTask+0x88>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80093f8:	3301      	adds	r3, #1
 80093fa:	2b40      	cmp	r3, #64	; 0x40
 80093fc:	d009      	beq.n	8009412 <BackEndTask+0x5a>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80093fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009400:	dcf8      	bgt.n	80093f4 <BackEndTask+0x3c>
 8009402:	5cf2      	ldrb	r2, [r6, r3]
 8009404:	2a48      	cmp	r2, #72	; 0x48
 8009406:	d1f5      	bne.n	80093f4 <BackEndTask+0x3c>
 8009408:	18f2      	adds	r2, r6, r3
 800940a:	7852      	ldrb	r2, [r2, #1]
 800940c:	2a5a      	cmp	r2, #90	; 0x5a
 800940e:	d1f1      	bne.n	80093f4 <BackEndTask+0x3c>
 8009410:	469b      	mov	fp, r3
				if (emptyBuffer) {	
 8009412:	2800      	cmp	r0, #0
 8009414:	d000      	beq.n	8009418 <BackEndTask+0x60>
 8009416:	e15f      	b.n	80096d8 <BackEndTask+0x320>
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8009418:	465b      	mov	r3, fp
 800941a:	2b3d      	cmp	r3, #61	; 0x3d
 800941c:	d051      	beq.n	80094c2 <BackEndTask+0x10a>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 800941e:	2b3e      	cmp	r3, #62	; 0x3e
 8009420:	d100      	bne.n	8009424 <BackEndTask+0x6c>
 8009422:	e090      	b.n	8009546 <BackEndTask+0x18e>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8009424:	2b3f      	cmp	r3, #63	; 0x3f
 8009426:	d100      	bne.n	800942a <BackEndTask+0x72>
 8009428:	e092      	b.n	8009550 <BackEndTask+0x198>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800942a:	4643      	mov	r3, r8
 800942c:	019a      	lsls	r2, r3, #6
 800942e:	4bbf      	ldr	r3, [pc, #764]	; (800972c <BackEndTask+0x374>)
 8009430:	189b      	adds	r3, r3, r2
 8009432:	445b      	add	r3, fp
 8009434:	789b      	ldrb	r3, [r3, #2]
 8009436:	9300      	str	r3, [sp, #0]
					parseStart = packetStart+3;
 8009438:	465b      	mov	r3, fp
 800943a:	3303      	adds	r3, #3
 800943c:	9302      	str	r3, [sp, #8]
 800943e:	e046      	b.n	80094ce <BackEndTask+0x116>
 8009440:	9600      	str	r6, [sp, #0]
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009442:	223f      	movs	r2, #63	; 0x3f
 8009444:	4692      	mov	sl, r2
 8009446:	44b2      	add	sl, r6
 8009448:	4652      	mov	r2, sl
 800944a:	7812      	ldrb	r2, [r2, #0]
 800944c:	2a48      	cmp	r2, #72	; 0x48
 800944e:	d005      	beq.n	800945c <BackEndTask+0xa4>
							if (BOS.disableCLI == false)
 8009450:	4663      	mov	r3, ip
 8009452:	2b00      	cmp	r3, #0
 8009454:	d000      	beq.n	8009458 <BackEndTask+0xa0>
 8009456:	e13f      	b.n	80096d8 <BackEndTask+0x320>
 8009458:	9a00      	ldr	r2, [sp, #0]
 800945a:	e00c      	b.n	8009476 <BackEndTask+0xbe>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800945c:	7832      	ldrb	r2, [r6, #0]
 800945e:	2a5a      	cmp	r2, #90	; 0x5a
 8009460:	d1f6      	bne.n	8009450 <BackEndTask+0x98>
				if (emptyBuffer) {	
 8009462:	2800      	cmp	r0, #0
 8009464:	d074      	beq.n	8009550 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE-1;	
 8009466:	469b      	mov	fp, r3
 8009468:	e136      	b.n	80096d8 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800946a:	293f      	cmp	r1, #63	; 0x3f
 800946c:	d024      	beq.n	80094b8 <BackEndTask+0x100>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800946e:	3101      	adds	r1, #1
 8009470:	2940      	cmp	r1, #64	; 0x40
 8009472:	d100      	bne.n	8009476 <BackEndTask+0xbe>
 8009474:	e130      	b.n	80096d8 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009476:	5c53      	ldrb	r3, [r2, r1]
 8009478:	2b0d      	cmp	r3, #13
 800947a:	d1f8      	bne.n	800946e <BackEndTask+0xb6>
 800947c:	293e      	cmp	r1, #62	; 0x3e
 800947e:	dcf4      	bgt.n	800946a <BackEndTask+0xb2>
 8009480:	1850      	adds	r0, r2, r1
 8009482:	7843      	ldrb	r3, [r0, #1]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1f0      	bne.n	800946a <BackEndTask+0xb2>
										UARTRxBuf[port-1][j] = 0;
 8009488:	4643      	mov	r3, r8
 800948a:	019a      	lsls	r2, r3, #6
 800948c:	4ba7      	ldr	r3, [pc, #668]	; (800972c <BackEndTask+0x374>)
 800948e:	189b      	adds	r3, r3, r2
 8009490:	2200      	movs	r2, #0
 8009492:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8009494:	3101      	adds	r1, #1
 8009496:	464b      	mov	r3, r9
 8009498:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 800949a:	4ba5      	ldr	r3, [pc, #660]	; (8009730 <BackEndTask+0x378>)
 800949c:	7819      	ldrb	r1, [r3, #0]
 800949e:	48a5      	ldr	r0, [pc, #660]	; (8009734 <BackEndTask+0x37c>)
 80094a0:	5442      	strb	r2, [r0, r1]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 80094a2:	3203      	adds	r2, #3
 80094a4:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 80094a6:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 80094a8:	4ba3      	ldr	r3, [pc, #652]	; (8009738 <BackEndTask+0x380>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	3a01      	subs	r2, #1
 80094b0:	2100      	movs	r1, #0
 80094b2:	f005 fc7f 	bl	800edb4 <xTaskGenericNotify>
										break;
 80094b6:	e10f      	b.n	80096d8 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80094b8:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80094ba:	2001      	movs	r0, #1
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1a8      	bne.n	8009412 <BackEndTask+0x5a>
 80094c0:	e7e2      	b.n	8009488 <BackEndTask+0xd0>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 80094c2:	0033      	movs	r3, r6
 80094c4:	333f      	adds	r3, #63	; 0x3f
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	9300      	str	r3, [sp, #0]
					parseStart = 0;				
 80094ca:	2300      	movs	r3, #0
 80094cc:	9302      	str	r3, [sp, #8]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 80094ce:	9b00      	ldr	r3, [sp, #0]
 80094d0:	3303      	adds	r3, #3
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	445b      	add	r3, fp
 80094d6:	469a      	mov	sl, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 80094d8:	2b3f      	cmp	r3, #63	; 0x3f
 80094da:	dd03      	ble.n	80094e4 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	425b      	negs	r3, r3
 80094e0:	469c      	mov	ip, r3
 80094e2:	44e2      	add	sl, ip
				if (packetStart != packetEnd)										// Non-empty packet
 80094e4:	45da      	cmp	sl, fp
 80094e6:	d100      	bne.n	80094ea <BackEndTask+0x132>
 80094e8:	e0d0      	b.n	800968c <BackEndTask+0x2d4>
					Delay_ms(1);
 80094ea:	2001      	movs	r0, #1
 80094ec:	f006 f87a 	bl	800f5e4 <HAL_Delay>
					if (packetStart < packetEnd) {
 80094f0:	45da      	cmp	sl, fp
 80094f2:	dd34      	ble.n	800955e <BackEndTask+0x1a6>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 80094f4:	4b91      	ldr	r3, [pc, #580]	; (800973c <BackEndTask+0x384>)
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	019b      	lsls	r3, r3, #6
 80094fa:	445b      	add	r3, fp
 80094fc:	4a8b      	ldr	r2, [pc, #556]	; (800972c <BackEndTask+0x374>)
 80094fe:	4694      	mov	ip, r2
 8009500:	4463      	add	r3, ip
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	9a01      	ldr	r2, [sp, #4]
 8009506:	0019      	movs	r1, r3
 8009508:	488d      	ldr	r0, [pc, #564]	; (8009740 <BackEndTask+0x388>)
 800950a:	f009 fc90 	bl	8012e2e <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	1cd9      	adds	r1, r3, #3
 8009512:	488b      	ldr	r0, [pc, #556]	; (8009740 <BackEndTask+0x388>)
 8009514:	f003 f942 	bl	800c79c <CalculateCRC8>
 8009518:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800951a:	2238      	movs	r2, #56	; 0x38
 800951c:	2100      	movs	r1, #0
 800951e:	4888      	ldr	r0, [pc, #544]	; (8009740 <BackEndTask+0x388>)
 8009520:	f009 fc8e 	bl	8012e40 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009524:	4643      	mov	r3, r8
 8009526:	019b      	lsls	r3, r3, #6
 8009528:	4a80      	ldr	r2, [pc, #512]	; (800972c <BackEndTask+0x374>)
 800952a:	4694      	mov	ip, r2
 800952c:	4463      	add	r3, ip
 800952e:	4652      	mov	r2, sl
 8009530:	5c9b      	ldrb	r3, [r3, r2]
 8009532:	9a01      	ldr	r2, [sp, #4]
 8009534:	4293      	cmp	r3, r2
 8009536:	d040      	beq.n	80095ba <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009538:	9a00      	ldr	r2, [sp, #0]
 800953a:	3204      	adds	r2, #4
 800953c:	2100      	movs	r1, #0
 800953e:	9803      	ldr	r0, [sp, #12]
 8009540:	f009 fc7e 	bl	8012e40 <memset>
 8009544:	e0b8      	b.n	80096b8 <BackEndTask+0x300>
					packetLength = UARTRxBuf[port-1][0];
 8009546:	7833      	ldrb	r3, [r6, #0]
 8009548:	9300      	str	r3, [sp, #0]
					parseStart = 1;
 800954a:	2301      	movs	r3, #1
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	e7be      	b.n	80094ce <BackEndTask+0x116>
					packetLength = UARTRxBuf[port-1][1];
 8009550:	7873      	ldrb	r3, [r6, #1]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	233f      	movs	r3, #63	; 0x3f
 8009556:	469b      	mov	fp, r3
					parseStart = 2;
 8009558:	3b3d      	subs	r3, #61	; 0x3d
 800955a:	9302      	str	r3, [sp, #8]
 800955c:	e7b7      	b.n	80094ce <BackEndTask+0x116>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800955e:	2240      	movs	r2, #64	; 0x40
 8009560:	465b      	mov	r3, fp
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	4a75      	ldr	r2, [pc, #468]	; (800973c <BackEndTask+0x384>)
 8009566:	18b9      	adds	r1, r7, r2
 8009568:	0189      	lsls	r1, r1, #6
 800956a:	4459      	add	r1, fp
 800956c:	4a6f      	ldr	r2, [pc, #444]	; (800972c <BackEndTask+0x374>)
 800956e:	4694      	mov	ip, r2
 8009570:	4461      	add	r1, ip
 8009572:	9303      	str	r3, [sp, #12]
 8009574:	001a      	movs	r2, r3
 8009576:	4872      	ldr	r0, [pc, #456]	; (8009740 <BackEndTask+0x388>)
 8009578:	f009 fc59 	bl	8012e2e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 800957c:	4a70      	ldr	r2, [pc, #448]	; (8009740 <BackEndTask+0x388>)
 800957e:	0010      	movs	r0, r2
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	469c      	mov	ip, r3
 8009584:	4460      	add	r0, ip
 8009586:	9a01      	ldr	r2, [sp, #4]
 8009588:	1ad2      	subs	r2, r2, r3
 800958a:	0031      	movs	r1, r6
 800958c:	f009 fc4f 	bl	8012e2e <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009590:	9b00      	ldr	r3, [sp, #0]
 8009592:	1cd9      	adds	r1, r3, #3
 8009594:	486a      	ldr	r0, [pc, #424]	; (8009740 <BackEndTask+0x388>)
 8009596:	f003 f901 	bl	800c79c <CalculateCRC8>
 800959a:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800959c:	2238      	movs	r2, #56	; 0x38
 800959e:	2100      	movs	r1, #0
 80095a0:	4867      	ldr	r0, [pc, #412]	; (8009740 <BackEndTask+0x388>)
 80095a2:	f009 fc4d 	bl	8012e40 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 80095a6:	4643      	mov	r3, r8
 80095a8:	019b      	lsls	r3, r3, #6
 80095aa:	4a60      	ldr	r2, [pc, #384]	; (800972c <BackEndTask+0x374>)
 80095ac:	4694      	mov	ip, r2
 80095ae:	4463      	add	r3, ip
 80095b0:	4652      	mov	r2, sl
 80095b2:	5c9b      	ldrb	r3, [r3, r2]
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d168      	bne.n	800968c <BackEndTask+0x2d4>
						portStatus[port] = MSG;
 80095ba:	2301      	movs	r3, #1
 80095bc:	7023      	strb	r3, [r4, #0]
						messageLength[port-1] = packetLength;	
 80095be:	1ebb      	subs	r3, r7, #2
 80095c0:	4a60      	ldr	r2, [pc, #384]	; (8009744 <BackEndTask+0x38c>)
 80095c2:	9900      	ldr	r1, [sp, #0]
 80095c4:	54d1      	strb	r1, [r2, r3]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 80095c6:	233f      	movs	r3, #63	; 0x3f
 80095c8:	9c02      	ldr	r4, [sp, #8]
 80095ca:	1b1b      	subs	r3, r3, r4
 80095cc:	000a      	movs	r2, r1
 80095ce:	428b      	cmp	r3, r1
 80095d0:	db27      	blt.n	8009622 <BackEndTask+0x26a>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 80095d2:	00f8      	lsls	r0, r7, #3
 80095d4:	1bc0      	subs	r0, r0, r7
 80095d6:	00c0      	lsls	r0, r0, #3
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	469c      	mov	ip, r3
 80095dc:	4460      	add	r0, ip
 80095de:	4b57      	ldr	r3, [pc, #348]	; (800973c <BackEndTask+0x384>)
 80095e0:	18f9      	adds	r1, r7, r3
 80095e2:	0189      	lsls	r1, r1, #6
 80095e4:	46a4      	mov	ip, r4
 80095e6:	4461      	add	r1, ip
 80095e8:	4b50      	ldr	r3, [pc, #320]	; (800972c <BackEndTask+0x374>)
 80095ea:	18c9      	adds	r1, r1, r3
 80095ec:	f009 fc1f 	bl	8012e2e <memcpy>
						if (packetStart < packetEnd) {
 80095f0:	45da      	cmp	sl, fp
 80095f2:	dd36      	ble.n	8009662 <BackEndTask+0x2aa>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80095f4:	9a00      	ldr	r2, [sp, #0]
 80095f6:	3204      	adds	r2, #4
 80095f8:	4b50      	ldr	r3, [pc, #320]	; (800973c <BackEndTask+0x384>)
 80095fa:	18f8      	adds	r0, r7, r3
 80095fc:	0180      	lsls	r0, r0, #6
 80095fe:	4458      	add	r0, fp
 8009600:	4b4a      	ldr	r3, [pc, #296]	; (800972c <BackEndTask+0x374>)
 8009602:	18c0      	adds	r0, r0, r3
 8009604:	2100      	movs	r1, #0
 8009606:	f009 fc1b 	bl	8012e40 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800960a:	4653      	mov	r3, sl
 800960c:	3301      	adds	r3, #1
 800960e:	464a      	mov	r2, r9
 8009610:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009612:	4a4d      	ldr	r2, [pc, #308]	; (8009748 <BackEndTask+0x390>)
 8009614:	8813      	ldrh	r3, [r2, #0]
 8009616:	3301      	adds	r3, #1
 8009618:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 800961a:	0028      	movs	r0, r5
 800961c:	f7ff fb74 	bl	8008d08 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8009620:	e05a      	b.n	80096d8 <BackEndTask+0x320>
 8009622:	00fb      	lsls	r3, r7, #3
 8009624:	1bdb      	subs	r3, r3, r7
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4698      	mov	r8, r3
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800962a:	2440      	movs	r4, #64	; 0x40
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	1ae4      	subs	r4, r4, r3
 8009630:	9a04      	ldr	r2, [sp, #16]
 8009632:	4442      	add	r2, r8
 8009634:	0010      	movs	r0, r2
 8009636:	4a41      	ldr	r2, [pc, #260]	; (800973c <BackEndTask+0x384>)
 8009638:	18b9      	adds	r1, r7, r2
 800963a:	0189      	lsls	r1, r1, #6
 800963c:	469c      	mov	ip, r3
 800963e:	4461      	add	r1, ip
 8009640:	4b3a      	ldr	r3, [pc, #232]	; (800972c <BackEndTask+0x374>)
 8009642:	18c9      	adds	r1, r1, r3
 8009644:	0022      	movs	r2, r4
 8009646:	f009 fbf2 	bl	8012e2e <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 800964a:	4640      	mov	r0, r8
 800964c:	3870      	subs	r0, #112	; 0x70
 800964e:	1900      	adds	r0, r0, r4
 8009650:	4b33      	ldr	r3, [pc, #204]	; (8009720 <BackEndTask+0x368>)
 8009652:	469c      	mov	ip, r3
 8009654:	4460      	add	r0, ip
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	1b1a      	subs	r2, r3, r4
 800965a:	0031      	movs	r1, r6
 800965c:	f009 fbe7 	bl	8012e2e <memcpy>
 8009660:	e7c6      	b.n	80095f0 <BackEndTask+0x238>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009662:	2440      	movs	r4, #64	; 0x40
 8009664:	465b      	mov	r3, fp
 8009666:	1ae4      	subs	r4, r4, r3
 8009668:	4b34      	ldr	r3, [pc, #208]	; (800973c <BackEndTask+0x384>)
 800966a:	18f8      	adds	r0, r7, r3
 800966c:	0180      	lsls	r0, r0, #6
 800966e:	4458      	add	r0, fp
 8009670:	4b2e      	ldr	r3, [pc, #184]	; (800972c <BackEndTask+0x374>)
 8009672:	18c0      	adds	r0, r0, r3
 8009674:	0022      	movs	r2, r4
 8009676:	2100      	movs	r1, #0
 8009678:	f009 fbe2 	bl	8012e40 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800967c:	9a00      	ldr	r2, [sp, #0]
 800967e:	3204      	adds	r2, #4
 8009680:	1b12      	subs	r2, r2, r4
 8009682:	2100      	movs	r1, #0
 8009684:	0030      	movs	r0, r6
 8009686:	f009 fbdb 	bl	8012e40 <memset>
 800968a:	e7be      	b.n	800960a <BackEndTask+0x252>
				} else {                // wrap around
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800968c:	2240      	movs	r2, #64	; 0x40
 800968e:	465b      	mov	r3, fp
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	4698      	mov	r8, r3
 8009694:	4b29      	ldr	r3, [pc, #164]	; (800973c <BackEndTask+0x384>)
 8009696:	18f8      	adds	r0, r7, r3
 8009698:	0180      	lsls	r0, r0, #6
 800969a:	4458      	add	r0, fp
 800969c:	4b23      	ldr	r3, [pc, #140]	; (800972c <BackEndTask+0x374>)
 800969e:	18c0      	adds	r0, r0, r3
 80096a0:	4642      	mov	r2, r8
 80096a2:	2100      	movs	r1, #0
 80096a4:	f009 fbcc 	bl	8012e40 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 80096a8:	9a00      	ldr	r2, [sp, #0]
 80096aa:	3204      	adds	r2, #4
 80096ac:	4643      	mov	r3, r8
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	2100      	movs	r1, #0
 80096b2:	0030      	movs	r0, r6
 80096b4:	f009 fbc4 	bl	8012e40 <memset>
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80096b8:	4653      	mov	r3, sl
 80096ba:	3301      	adds	r3, #1
 80096bc:	464a      	mov	r2, r9
 80096be:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 80096c0:	4a22      	ldr	r2, [pc, #136]	; (800974c <BackEndTask+0x394>)
 80096c2:	8813      	ldrh	r3, [r2, #0]
 80096c4:	3301      	adds	r3, #1
 80096c6:	8013      	strh	r3, [r2, #0]
 80096c8:	e014      	b.n	80096f4 <BackEndTask+0x33c>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 80096ca:	0028      	movs	r0, r5
 80096cc:	f003 fe08 	bl	800d2e0 <GetUart>
 80096d0:	2240      	movs	r2, #64	; 0x40
 80096d2:	0031      	movs	r1, r6
 80096d4:	f008 fc74 	bl	8011fc0 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 80096d8:	3501      	adds	r5, #1
 80096da:	b2ed      	uxtb	r5, r5
 80096dc:	3701      	adds	r7, #1
 80096de:	3640      	adds	r6, #64	; 0x40
 80096e0:	2d06      	cmp	r5, #6
 80096e2:	d016      	beq.n	8009712 <BackEndTask+0x35a>
 80096e4:	1e7c      	subs	r4, r7, #1
 80096e6:	4b13      	ldr	r3, [pc, #76]	; (8009734 <BackEndTask+0x37c>)
 80096e8:	469c      	mov	ip, r3
 80096ea:	4464      	add	r4, ip
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 80096ec:	7823      	ldrb	r3, [r4, #0]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d800      	bhi.n	80096f4 <BackEndTask+0x33c>
 80096f2:	e671      	b.n	80093d8 <BackEndTask+0x20>
 80096f4:	1ebb      	subs	r3, r7, #2
 80096f6:	4a16      	ldr	r2, [pc, #88]	; (8009750 <BackEndTask+0x398>)
 80096f8:	4694      	mov	ip, r2
 80096fa:	4463      	add	r3, ip
			if (MsgDMAStopped[port-1] == true) {
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	2a00      	cmp	r2, #0
 8009700:	d0ea      	beq.n	80096d8 <BackEndTask+0x320>
				MsgDMAStopped[port-1] = false;
 8009702:	2200      	movs	r2, #0
 8009704:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8009706:	7823      	ldrb	r3, [r4, #0]
 8009708:	2b05      	cmp	r3, #5
 800970a:	d1de      	bne.n	80096ca <BackEndTask+0x312>
 800970c:	2300      	movs	r3, #0
 800970e:	7023      	strb	r3, [r4, #0]
 8009710:	e7db      	b.n	80096ca <BackEndTask+0x312>
			}				
		}
		
		taskYIELD();
 8009712:	f005 fde9 	bl	800f2e8 <vPortYield>
 8009716:	4e05      	ldr	r6, [pc, #20]	; (800972c <BackEndTask+0x374>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009718:	2702      	movs	r7, #2
		for (port=1 ; port <= NumOfPorts; port++)
 800971a:	2501      	movs	r5, #1
 800971c:	e7e2      	b.n	80096e4 <BackEndTask+0x32c>
 800971e:	46c0      	nop			; (mov r8, r8)
 8009720:	20000cf0 	.word	0x20000cf0
 8009724:	200013ac 	.word	0x200013ac
 8009728:	20006898 	.word	0x20006898
 800972c:	2000126c 	.word	0x2000126c
 8009730:	20000a77 	.word	0x20000a77
 8009734:	20001098 	.word	0x20001098
 8009738:	20001450 	.word	0x20001450
 800973c:	03fffffe 	.word	0x03fffffe
 8009740:	200013b4 	.word	0x200013b4
 8009744:	20000ee0 	.word	0x20000ee0
 8009748:	200014c8 	.word	0x200014c8
 800974c:	20001664 	.word	0x20001664
 8009750:	20001264 	.word	0x20001264

08009754 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009754:	2001      	movs	r0, #1
 8009756:	4770      	bx	lr

08009758 <PxMessagingTask>:
{
 8009758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975a:	46de      	mov	lr, fp
 800975c:	4657      	mov	r7, sl
 800975e:	464e      	mov	r6, r9
 8009760:	4645      	mov	r5, r8
 8009762:	b5e0      	push	{r5, r6, r7, lr}
 8009764:	b097      	sub	sp, #92	; 0x5c
	port = (int8_t)(unsigned) argument;
 8009766:	b2c3      	uxtb	r3, r0
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	23ff      	movs	r3, #255	; 0xff
 800976c:	4003      	ands	r3, r0
 800976e:	4698      	mov	r8, r3
		if (messageLength[port-1])
 8009770:	1e5d      	subs	r5, r3, #1
 8009772:	00eb      	lsls	r3, r5, #3
 8009774:	1b5b      	subs	r3, r3, r5
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	0019      	movs	r1, r3
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 800977a:	4ad6      	ldr	r2, [pc, #856]	; (8009ad4 <PxMessagingTask+0x37c>)
 800977c:	18d3      	adds	r3, r2, r3
 800977e:	9307      	str	r3, [sp, #28]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	930a      	str	r3, [sp, #40]	; 0x28
 8009784:	4699      	mov	r9, r3
			if (cMessage[port-1][2]>>7) {
 8009786:	000e      	movs	r6, r1
 8009788:	1853      	adds	r3, r2, r1
 800978a:	3302      	adds	r3, #2
 800978c:	9309      	str	r3, [sp, #36]	; 0x24
 800978e:	468a      	mov	sl, r1
 8009790:	e025      	b.n	80097de <PxMessagingTask+0x86>
				longMessage = 1;
 8009792:	4ad1      	ldr	r2, [pc, #836]	; (8009ad8 <PxMessagingTask+0x380>)
 8009794:	2001      	movs	r0, #1
 8009796:	7010      	strb	r0, [r2, #0]
 8009798:	e032      	b.n	8009800 <PxMessagingTask+0xa8>
				code = cMessage[port-1][3+shift];
 800979a:	4bce      	ldr	r3, [pc, #824]	; (8009ad4 <PxMessagingTask+0x37c>)
 800979c:	199b      	adds	r3, r3, r6
 800979e:	189a      	adds	r2, r3, r2
 80097a0:	78d7      	ldrb	r7, [r2, #3]
 80097a2:	e048      	b.n	8009836 <PxMessagingTask+0xde>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 80097a4:	2f19      	cmp	r7, #25
 80097a6:	d062      	beq.n	800986e <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 80097a8:	2f1a      	cmp	r7, #26
 80097aa:	d06a      	beq.n	8009882 <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 80097ac:	464b      	mov	r3, r9
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d101      	bne.n	80097b6 <PxMessagingTask+0x5e>
 80097b2:	f001 fa31 	bl	800ac18 <PxMessagingTask+0x14c0>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 80097b6:	4cc9      	ldr	r4, [pc, #804]	; (8009adc <PxMessagingTask+0x384>)
 80097b8:	5d62      	ldrb	r2, [r4, r5]
 80097ba:	2100      	movs	r1, #0
 80097bc:	9807      	ldr	r0, [sp, #28]
 80097be:	f009 fb3f 	bl	8012e40 <memset>
		messageLength[port-1] = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 80097c6:	4bc6      	ldr	r3, [pc, #792]	; (8009ae0 <PxMessagingTask+0x388>)
 80097c8:	4642      	mov	r2, r8
 80097ca:	5c9b      	ldrb	r3, [r3, r2]
 80097cc:	3b02      	subs	r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d903      	bls.n	80097da <PxMessagingTask+0x82>
			portStatus[port] = FREE;
 80097d2:	4bc3      	ldr	r3, [pc, #780]	; (8009ae0 <PxMessagingTask+0x388>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4641      	mov	r1, r8
 80097d8:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80097da:	f005 fd85 	bl	800f2e8 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80097de:	2101      	movs	r1, #1
 80097e0:	4249      	negs	r1, r1
 80097e2:	2001      	movs	r0, #1
 80097e4:	f005 fa9a 	bl	800ed1c <ulTaskNotifyTake>
		if (messageLength[port-1])
 80097e8:	4bbc      	ldr	r3, [pc, #752]	; (8009adc <PxMessagingTask+0x384>)
 80097ea:	5d59      	ldrb	r1, [r3, r5]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d0dd      	beq.n	80097ac <PxMessagingTask+0x54>
			if (cMessage[port-1][2]>>7) {
 80097f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	b25a      	sxtb	r2, r3
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	dbcb      	blt.n	8009792 <PxMessagingTask+0x3a>
				longMessage = 0;
 80097fa:	4ab7      	ldr	r2, [pc, #732]	; (8009ad8 <PxMessagingTask+0x380>)
 80097fc:	2000      	movs	r0, #0
 80097fe:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port-1][0]; 
 8009800:	4ab4      	ldr	r2, [pc, #720]	; (8009ad4 <PxMessagingTask+0x37c>)
 8009802:	5cb0      	ldrb	r0, [r6, r2]
 8009804:	4683      	mov	fp, r0
			src = cMessage[port-1][1];	
 8009806:	1992      	adds	r2, r2, r6
 8009808:	7852      	ldrb	r2, [r2, #1]
 800980a:	9204      	str	r2, [sp, #16]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 800980c:	2201      	movs	r2, #1
 800980e:	401a      	ands	r2, r3
			shift = 0;
 8009810:	0014      	movs	r4, r2
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009812:	4fb4      	ldr	r7, [pc, #720]	; (8009ae4 <PxMessagingTask+0x38c>)
 8009814:	0718      	lsls	r0, r3, #28
 8009816:	0f80      	lsrs	r0, r0, #30
 8009818:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 800981a:	2060      	movs	r0, #96	; 0x60
 800981c:	4018      	ands	r0, r3
 800981e:	71b8      	strb	r0, [r7, #6]
			if (extendCode == true) {		
 8009820:	079b      	lsls	r3, r3, #30
 8009822:	d5ba      	bpl.n	800979a <PxMessagingTask+0x42>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009824:	4bab      	ldr	r3, [pc, #684]	; (8009ad4 <PxMessagingTask+0x37c>)
 8009826:	199b      	adds	r3, r3, r6
 8009828:	189b      	adds	r3, r3, r2
 800982a:	7918      	ldrb	r0, [r3, #4]
 800982c:	0200      	lsls	r0, r0, #8
 800982e:	78df      	ldrb	r7, [r3, #3]
 8009830:	183f      	adds	r7, r7, r0
 8009832:	b2bf      	uxth	r7, r7
				++shift;
 8009834:	1c54      	adds	r4, r2, #1
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009836:	465b      	mov	r3, fp
 8009838:	3b01      	subs	r3, #1
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2bfc      	cmp	r3, #252	; 0xfc
 800983e:	d901      	bls.n	8009844 <PxMessagingTask+0xec>
 8009840:	f001 fa0a 	bl	800ac58 <PxMessagingTask+0x1500>
 8009844:	4ba8      	ldr	r3, [pc, #672]	; (8009ae8 <PxMessagingTask+0x390>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	455b      	cmp	r3, fp
 800984a:	d101      	bne.n	8009850 <PxMessagingTask+0xf8>
 800984c:	f001 fa04 	bl	800ac58 <PxMessagingTask+0x1500>
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <PxMessagingTask+0x100>
 8009854:	f001 f9fa 	bl	800ac4c <PxMessagingTask+0x14f4>
				ForwardReceivedMessage(port);
 8009858:	9808      	ldr	r0, [sp, #32]
 800985a:	f7ff fc51 	bl	8009100 <ForwardReceivedMessage>
				if (BOS.trace)
 800985e:	4ba1      	ldr	r3, [pc, #644]	; (8009ae4 <PxMessagingTask+0x38c>)
 8009860:	79db      	ldrb	r3, [r3, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d09e      	beq.n	80097a4 <PxMessagingTask+0x4c>
					indMode = IND_SHORT_BLINK;
 8009866:	4ba1      	ldr	r3, [pc, #644]	; (8009aec <PxMessagingTask+0x394>)
 8009868:	2203      	movs	r2, #3
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e79a      	b.n	80097a4 <PxMessagingTask+0x4c>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 800986e:	2064      	movs	r0, #100	; 0x64
 8009870:	f005 feb8 	bl	800f5e4 <HAL_Delay>
 8009874:	2300      	movs	r3, #0
 8009876:	9a08      	ldr	r2, [sp, #32]
 8009878:	4659      	mov	r1, fp
 800987a:	9804      	ldr	r0, [sp, #16]
 800987c:	f7fa fa8a 	bl	8003d94 <remoteBootloaderUpdate>
 8009880:	e794      	b.n	80097ac <PxMessagingTask+0x54>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009882:	2064      	movs	r0, #100	; 0x64
 8009884:	f005 feae 	bl	800f5e4 <HAL_Delay>
 8009888:	4b92      	ldr	r3, [pc, #584]	; (8009ad4 <PxMessagingTask+0x37c>)
 800988a:	199b      	adds	r3, r3, r6
 800988c:	5d1b      	ldrb	r3, [r3, r4]
 800988e:	9a08      	ldr	r2, [sp, #32]
 8009890:	4659      	mov	r1, fp
 8009892:	9804      	ldr	r0, [sp, #16]
 8009894:	f7fa fa7e 	bl	8003d94 <remoteBootloaderUpdate>
 8009898:	e788      	b.n	80097ac <PxMessagingTask+0x54>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800989a:	4b8e      	ldr	r3, [pc, #568]	; (8009ad4 <PxMessagingTask+0x37c>)
 800989c:	199b      	adds	r3, r3, r6
 800989e:	1859      	adds	r1, r3, r1
 80098a0:	3901      	subs	r1, #1
 80098a2:	780b      	ldrb	r3, [r1, #0]
 80098a4:	4a92      	ldr	r2, [pc, #584]	; (8009af0 <PxMessagingTask+0x398>)
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d101      	bne.n	80098b0 <PxMessagingTask+0x158>
 80098ac:	f001 f9c1 	bl	800ac32 <PxMessagingTask+0x14da>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 80098b0:	4a8f      	ldr	r2, [pc, #572]	; (8009af0 <PxMessagingTask+0x398>)
 80098b2:	7013      	strb	r3, [r2, #0]
 80098b4:	4a8f      	ldr	r2, [pc, #572]	; (8009af4 <PxMessagingTask+0x39c>)
 80098b6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 80098b8:	9908      	ldr	r1, [sp, #32]
 80098ba:	20ff      	movs	r0, #255	; 0xff
 80098bc:	f7ff fc40 	bl	8009140 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 80098c0:	4b86      	ldr	r3, [pc, #536]	; (8009adc <PxMessagingTask+0x384>)
 80098c2:	5d5a      	ldrb	r2, [r3, r5]
 80098c4:	4b83      	ldr	r3, [pc, #524]	; (8009ad4 <PxMessagingTask+0x37c>)
 80098c6:	199b      	adds	r3, r3, r6
 80098c8:	189b      	adds	r3, r3, r2
 80098ca:	3b01      	subs	r3, #1
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
				if (result == BOS_OK)
 80098d0:	464b      	mov	r3, r9
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d000      	beq.n	80098d8 <PxMessagingTask+0x180>
 80098d6:	e769      	b.n	80097ac <PxMessagingTask+0x54>
				shift += 4;
 80098d8:	3404      	adds	r4, #4
				numOfParams = messageLength[port-1] - shift;
 80098da:	4b80      	ldr	r3, [pc, #512]	; (8009adc <PxMessagingTask+0x384>)
 80098dc:	5d59      	ldrb	r1, [r3, r5]
 80098de:	1b0a      	subs	r2, r1, r4
 80098e0:	b2d3      	uxtb	r3, r2
 80098e2:	9306      	str	r3, [sp, #24]
					switch (code)
 80098e4:	2f23      	cmp	r7, #35	; 0x23
 80098e6:	d901      	bls.n	80098ec <PxMessagingTask+0x194>
 80098e8:	f001 f974 	bl	800abd4 <PxMessagingTask+0x147c>
 80098ec:	00bb      	lsls	r3, r7, #2
 80098ee:	4a82      	ldr	r2, [pc, #520]	; (8009af8 <PxMessagingTask+0x3a0>)
 80098f0:	58d3      	ldr	r3, [r2, r3]
 80098f2:	469f      	mov	pc, r3
							for (p=0 ; p<numOfParams ; p++) 
 80098f4:	9b06      	ldr	r3, [sp, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01f      	beq.n	800993a <PxMessagingTask+0x1e2>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	1e58      	subs	r0, r3, #1
 80098fe:	0042      	lsls	r2, r0, #1
 8009900:	4b7e      	ldr	r3, [pc, #504]	; (8009afc <PxMessagingTask+0x3a4>)
 8009902:	5ad3      	ldrh	r3, [r2, r3]
 8009904:	4652      	mov	r2, sl
 8009906:	1911      	adds	r1, r2, r4
 8009908:	4a72      	ldr	r2, [pc, #456]	; (8009ad4 <PxMessagingTask+0x37c>)
 800990a:	1889      	adds	r1, r1, r2
 800990c:	3201      	adds	r2, #1
 800990e:	4452      	add	r2, sl
 8009910:	1914      	adds	r4, r2, r4
 8009912:	9a06      	ldr	r2, [sp, #24]
 8009914:	3a01      	subs	r2, #1
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	18a4      	adds	r4, r4, r2
 800991a:	2780      	movs	r7, #128	; 0x80
 800991c:	023f      	lsls	r7, r7, #8
 800991e:	4684      	mov	ip, r0
 8009920:	780a      	ldrb	r2, [r1, #0]
 8009922:	3a01      	subs	r2, #1
 8009924:	0038      	movs	r0, r7
 8009926:	4110      	asrs	r0, r2
 8009928:	4303      	orrs	r3, r0
 800992a:	b29b      	uxth	r3, r3
 800992c:	3101      	adds	r1, #1
							for (p=0 ; p<numOfParams ; p++) 
 800992e:	42a1      	cmp	r1, r4
 8009930:	d1f6      	bne.n	8009920 <PxMessagingTask+0x1c8>
 8009932:	4660      	mov	r0, ip
 8009934:	0040      	lsls	r0, r0, #1
 8009936:	4a71      	ldr	r2, [pc, #452]	; (8009afc <PxMessagingTask+0x3a4>)
 8009938:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 800993a:	4b71      	ldr	r3, [pc, #452]	; (8009b00 <PxMessagingTask+0x3a8>)
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
							break;		
 8009940:	2300      	movs	r3, #0
 8009942:	4699      	mov	r9, r3
 8009944:	e737      	b.n	80097b6 <PxMessagingTask+0x5e>
							indMode = IND_PING;	osDelay(10);
 8009946:	4b69      	ldr	r3, [pc, #420]	; (8009aec <PxMessagingTask+0x394>)
 8009948:	2201      	movs	r2, #1
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	200a      	movs	r0, #10
 800994e:	f003 fe12 	bl	800d576 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009952:	4b64      	ldr	r3, [pc, #400]	; (8009ae4 <PxMessagingTask+0x38c>)
 8009954:	799b      	ldrb	r3, [r3, #6]
 8009956:	2240      	movs	r2, #64	; 0x40
 8009958:	4393      	bics	r3, r2
 800995a:	2200      	movs	r2, #0
 800995c:	4691      	mov	r9, r2
 800995e:	2b20      	cmp	r3, #32
 8009960:	d000      	beq.n	8009964 <PxMessagingTask+0x20c>
 8009962:	e728      	b.n	80097b6 <PxMessagingTask+0x5e>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009964:	2102      	movs	r1, #2
 8009966:	9804      	ldr	r0, [sp, #16]
 8009968:	f7ff fc32 	bl	80091d0 <SendMessageToModule>
 800996c:	e723      	b.n	80097b6 <PxMessagingTask+0x5e>
							if (!moduleAlias[myID][0])
 800996e:	4b5e      	ldr	r3, [pc, #376]	; (8009ae8 <PxMessagingTask+0x390>)
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	0093      	lsls	r3, r2, #2
 8009974:	189b      	adds	r3, r3, r2
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	4a62      	ldr	r2, [pc, #392]	; (8009b04 <PxMessagingTask+0x3ac>)
 800997a:	5c9b      	ldrb	r3, [r3, r2]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d118      	bne.n	80099b2 <PxMessagingTask+0x25a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009980:	9a04      	ldr	r2, [sp, #16]
 8009982:	4961      	ldr	r1, [pc, #388]	; (8009b08 <PxMessagingTask+0x3b0>)
 8009984:	4861      	ldr	r0, [pc, #388]	; (8009b0c <PxMessagingTask+0x3b4>)
 8009986:	f009 fc55 	bl	8013234 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800998a:	4c60      	ldr	r4, [pc, #384]	; (8009b0c <PxMessagingTask+0x3b4>)
 800998c:	0020      	movs	r0, r4
 800998e:	f7f6 fbc3 	bl	8000118 <strlen>
 8009992:	b282      	uxth	r2, r0
 8009994:	4b5e      	ldr	r3, [pc, #376]	; (8009b10 <PxMessagingTask+0x3b8>)
 8009996:	7818      	ldrb	r0, [r3, #0]
 8009998:	2301      	movs	r3, #1
 800999a:	425b      	negs	r3, r3
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	3333      	adds	r3, #51	; 0x33
 80099a0:	0021      	movs	r1, r4
 80099a2:	f003 fcbb 	bl	800d31c <writePxMutex>
							responseStatus = BOS_OK;								
 80099a6:	4b56      	ldr	r3, [pc, #344]	; (8009b00 <PxMessagingTask+0x3a8>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
							break;
 80099ac:	2300      	movs	r3, #0
 80099ae:	4699      	mov	r9, r3
 80099b0:	e701      	b.n	80097b6 <PxMessagingTask+0x5e>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 80099b2:	230a      	movs	r3, #10
 80099b4:	9904      	ldr	r1, [sp, #16]
 80099b6:	434b      	muls	r3, r1
 80099b8:	4a52      	ldr	r2, [pc, #328]	; (8009b04 <PxMessagingTask+0x3ac>)
 80099ba:	189b      	adds	r3, r3, r2
 80099bc:	000a      	movs	r2, r1
 80099be:	4955      	ldr	r1, [pc, #340]	; (8009b14 <PxMessagingTask+0x3bc>)
 80099c0:	4852      	ldr	r0, [pc, #328]	; (8009b0c <PxMessagingTask+0x3b4>)
 80099c2:	f009 fc37 	bl	8013234 <sprintf>
 80099c6:	e7e0      	b.n	800998a <PxMessagingTask+0x232>
							IND_ON();
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	2201      	movs	r2, #1
 80099cc:	01c9      	lsls	r1, r1, #7
 80099ce:	4852      	ldr	r0, [pc, #328]	; (8009b18 <PxMessagingTask+0x3c0>)
 80099d0:	f006 fed4 	bl	801077c <HAL_GPIO_WritePin>
							break;
 80099d4:	2300      	movs	r3, #0
 80099d6:	4699      	mov	r9, r3
 80099d8:	e6ed      	b.n	80097b6 <PxMessagingTask+0x5e>
							IND_OFF();
 80099da:	2180      	movs	r1, #128	; 0x80
 80099dc:	2200      	movs	r2, #0
 80099de:	01c9      	lsls	r1, r1, #7
 80099e0:	484d      	ldr	r0, [pc, #308]	; (8009b18 <PxMessagingTask+0x3c0>)
 80099e2:	f006 fecb 	bl	801077c <HAL_GPIO_WritePin>
							break;
 80099e6:	2300      	movs	r3, #0
 80099e8:	4699      	mov	r9, r3
 80099ea:	e6e4      	b.n	80097b6 <PxMessagingTask+0x5e>
							IND_toggle();
 80099ec:	2180      	movs	r1, #128	; 0x80
 80099ee:	01c9      	lsls	r1, r1, #7
 80099f0:	4849      	ldr	r0, [pc, #292]	; (8009b18 <PxMessagingTask+0x3c0>)
 80099f2:	f006 fec9 	bl	8010788 <HAL_GPIO_TogglePin>
							break;
 80099f6:	2300      	movs	r3, #0
 80099f8:	4699      	mov	r9, r3
 80099fa:	e6dc      	b.n	80097b6 <PxMessagingTask+0x5e>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 80099fc:	4f47      	ldr	r7, [pc, #284]	; (8009b1c <PxMessagingTask+0x3c4>)
 80099fe:	00ab      	lsls	r3, r5, #2
 8009a00:	4a34      	ldr	r2, [pc, #208]	; (8009ad4 <PxMessagingTask+0x37c>)
 8009a02:	1992      	adds	r2, r2, r6
 8009a04:	1910      	adds	r0, r2, r4
 8009a06:	7881      	ldrb	r1, [r0, #2]
 8009a08:	468c      	mov	ip, r1
 8009a0a:	9904      	ldr	r1, [sp, #16]
 8009a0c:	0209      	lsls	r1, r1, #8
 8009a0e:	4461      	add	r1, ip
 8009a10:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8009a12:	18fb      	adds	r3, r7, r3
 8009a14:	5d11      	ldrb	r1, [r2, r4]
 8009a16:	0209      	lsls	r1, r1, #8
 8009a18:	7842      	ldrb	r2, [r0, #1]
 8009a1a:	1852      	adds	r2, r2, r1
 8009a1c:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009a1e:	4b40      	ldr	r3, [pc, #256]	; (8009b20 <PxMessagingTask+0x3c8>)
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	4a40      	ldr	r2, [pc, #256]	; (8009b24 <PxMessagingTask+0x3cc>)
 8009a24:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009a2a:	9c08      	ldr	r4, [sp, #32]
 8009a2c:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009a2e:	2002      	movs	r0, #2
 8009a30:	f003 fda1 	bl	800d576 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009a34:	2303      	movs	r3, #3
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	0020      	movs	r0, r4
 8009a40:	f7ff f99e 	bl	8008d80 <SendMessageFromPort>
							break;
 8009a44:	2300      	movs	r3, #0
 8009a46:	4699      	mov	r9, r3
 8009a48:	e6b5      	b.n	80097b6 <PxMessagingTask+0x5e>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009a4a:	4f34      	ldr	r7, [pc, #208]	; (8009b1c <PxMessagingTask+0x3c4>)
 8009a4c:	00ab      	lsls	r3, r5, #2
 8009a4e:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <PxMessagingTask+0x37c>)
 8009a50:	1992      	adds	r2, r2, r6
 8009a52:	1910      	adds	r0, r2, r4
 8009a54:	7881      	ldrb	r1, [r0, #2]
 8009a56:	468c      	mov	ip, r1
 8009a58:	9904      	ldr	r1, [sp, #16]
 8009a5a:	0209      	lsls	r1, r1, #8
 8009a5c:	4461      	add	r1, ip
 8009a5e:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	5d11      	ldrb	r1, [r2, r4]
 8009a64:	0209      	lsls	r1, r1, #8
 8009a66:	7842      	ldrb	r2, [r0, #1]
 8009a68:	1852      	adds	r2, r2, r1
 8009a6a:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009a6c:	4b24      	ldr	r3, [pc, #144]	; (8009b00 <PxMessagingTask+0x3a8>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	701a      	strb	r2, [r3, #0]
							break;
 8009a72:	2300      	movs	r3, #0
 8009a74:	4699      	mov	r9, r3
 8009a76:	e69e      	b.n	80097b6 <PxMessagingTask+0x5e>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8009a78:	9808      	ldr	r0, [sp, #32]
 8009a7a:	f7f9 fff5 	bl	8003a68 <ExploreNeighbors>
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <PxMessagingTask+0x394>)
 8009a80:	2202      	movs	r2, #2
 8009a82:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8009a84:	200a      	movs	r0, #10
 8009a86:	f003 fd76 	bl	800d576 <osDelay>
 8009a8a:	4f24      	ldr	r7, [pc, #144]	; (8009b1c <PxMessagingTask+0x3c4>)
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009a8c:	2401      	movs	r4, #1
							osDelay(10); temp = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9305      	str	r3, [sp, #20]
 8009a92:	e004      	b.n	8009a9e <PxMessagingTask+0x346>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009a94:	3401      	adds	r4, #1
 8009a96:	b2e4      	uxtb	r4, r4
 8009a98:	3704      	adds	r7, #4
 8009a9a:	2c06      	cmp	r4, #6
 8009a9c:	d011      	beq.n	8009ac2 <PxMessagingTask+0x36a>
								if (neighbors[p-1][0])
 8009a9e:	883b      	ldrh	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f7      	beq.n	8009a94 <PxMessagingTask+0x33c>
									messageParams[temp] = p;
 8009aa4:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <PxMessagingTask+0x3cc>)
 8009aa6:	9b05      	ldr	r3, [sp, #20]
 8009aa8:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8009aaa:	1c58      	adds	r0, r3, #1
 8009aac:	4694      	mov	ip, r2
 8009aae:	4460      	add	r0, ip
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	0039      	movs	r1, r7
 8009ab4:	f009 f9bb 	bl	8012e2e <memcpy>
									temp += 5;		
 8009ab8:	9b05      	ldr	r3, [sp, #20]
 8009aba:	3305      	adds	r3, #5
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	e7e8      	b.n	8009a94 <PxMessagingTask+0x33c>
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8009ac2:	466b      	mov	r3, sp
 8009ac4:	8a9a      	ldrh	r2, [r3, #20]
 8009ac6:	210d      	movs	r1, #13
 8009ac8:	9804      	ldr	r0, [sp, #16]
 8009aca:	f7ff fb81 	bl	80091d0 <SendMessageToModule>
							break;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4699      	mov	r9, r3
 8009ad2:	e670      	b.n	80097b6 <PxMessagingTask+0x5e>
 8009ad4:	20000cf0 	.word	0x20000cf0
 8009ad8:	20000ea3 	.word	0x20000ea3
 8009adc:	20000ee0 	.word	0x20000ee0
 8009ae0:	20001098 	.word	0x20001098
 8009ae4:	20006898 	.word	0x20006898
 8009ae8:	2000101c 	.word	0x2000101c
 8009aec:	20000ea2 	.word	0x20000ea2
 8009af0:	200014ca 	.word	0x200014ca
 8009af4:	20000c9e 	.word	0x20000c9e
 8009af8:	08019e64 	.word	0x08019e64
 8009afc:	20006ca0 	.word	0x20006ca0
 8009b00:	200010b0 	.word	0x200010b0
 8009b04:	20000f18 	.word	0x20000f18
 8009b08:	080188c0 	.word	0x080188c0
 8009b0c:	20001614 	.word	0x20001614
 8009b10:	20000a77 	.word	0x20000a77
 8009b14:	080188d4 	.word	0x080188d4
 8009b18:	48000800 	.word	0x48000800
 8009b1c:	20001020 	.word	0x20001020
 8009b20:	20000050 	.word	0x20000050
 8009b24:	20000ee8 	.word	0x20000ee8
							temp = numOfParams/5;
 8009b28:	2105      	movs	r1, #5
 8009b2a:	9806      	ldr	r0, [sp, #24]
 8009b2c:	f7f6 fb10 	bl	8000150 <__udivsi3>
 8009b30:	b2c2      	uxtb	r2, r0
 8009b32:	9205      	str	r2, [sp, #20]
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d018      	beq.n	8009b6a <PxMessagingTask+0x412>
 8009b38:	4653      	mov	r3, sl
 8009b3a:	191f      	adds	r7, r3, r4
 8009b3c:	4bdb      	ldr	r3, [pc, #876]	; (8009eac <PxMessagingTask+0x754>)
 8009b3e:	18ff      	adds	r7, r7, r3
 8009b40:	3305      	adds	r3, #5
 8009b42:	4453      	add	r3, sl
 8009b44:	191c      	adds	r4, r3, r4
 8009b46:	1e53      	subs	r3, r2, #1
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	009a      	lsls	r2, r3, #2
 8009b4c:	18d3      	adds	r3, r2, r3
 8009b4e:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8009b50:	4bd7      	ldr	r3, [pc, #860]	; (8009eb0 <PxMessagingTask+0x758>)
 8009b52:	4699      	mov	r9, r3
 8009b54:	7838      	ldrb	r0, [r7, #0]
 8009b56:	3801      	subs	r0, #1
 8009b58:	0080      	lsls	r0, r0, #2
 8009b5a:	4448      	add	r0, r9
 8009b5c:	1c79      	adds	r1, r7, #1
 8009b5e:	2204      	movs	r2, #4
 8009b60:	f009 f965 	bl	8012e2e <memcpy>
 8009b64:	3705      	adds	r7, #5
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009b66:	42bc      	cmp	r4, r7
 8009b68:	d1f4      	bne.n	8009b54 <PxMessagingTask+0x3fc>
							responseStatus = BOS_OK;
 8009b6a:	4bd2      	ldr	r3, [pc, #840]	; (8009eb4 <PxMessagingTask+0x75c>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	701a      	strb	r2, [r3, #0]
							break;
 8009b70:	2300      	movs	r3, #0
 8009b72:	4699      	mov	r9, r3
 8009b74:	e61f      	b.n	80097b6 <PxMessagingTask+0x5e>
 8009b76:	4653      	mov	r3, sl
 8009b78:	18e3      	adds	r3, r4, r3
 8009b7a:	4acc      	ldr	r2, [pc, #816]	; (8009eac <PxMessagingTask+0x754>)
 8009b7c:	4699      	mov	r9, r3
 8009b7e:	4491      	add	r9, r2
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009b80:	2701      	movs	r7, #1
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	42bb      	cmp	r3, r7
 8009b86:	d006      	beq.n	8009b96 <PxMessagingTask+0x43e>
 8009b88:	0038      	movs	r0, r7
 8009b8a:	f003 fba9 	bl	800d2e0 <GetUart>
 8009b8e:	464b      	mov	r3, r9
 8009b90:	7819      	ldrb	r1, [r3, #0]
 8009b92:	f003 fc3b 	bl	800d40c <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009b96:	3701      	adds	r7, #1
 8009b98:	b2ff      	uxtb	r7, r7
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	469c      	mov	ip, r3
 8009b9e:	44e1      	add	r9, ip
 8009ba0:	2f06      	cmp	r7, #6
 8009ba2:	d1ee      	bne.n	8009b82 <PxMessagingTask+0x42a>
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009ba4:	9808      	ldr	r0, [sp, #32]
 8009ba6:	f003 fb9b 	bl	800d2e0 <GetUart>
 8009baa:	4bc0      	ldr	r3, [pc, #768]	; (8009eac <PxMessagingTask+0x754>)
 8009bac:	199b      	adds	r3, r3, r6
 8009bae:	191c      	adds	r4, r3, r4
 8009bb0:	7aa1      	ldrb	r1, [r4, #10]
 8009bb2:	f003 fc2b 	bl	800d40c <SwapUartPins>
							break;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4699      	mov	r9, r3
 8009bba:	e5fc      	b.n	80097b6 <PxMessagingTask+0x5e>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009bbc:	0020      	movs	r0, r4
 8009bbe:	4bbb      	ldr	r3, [pc, #748]	; (8009eac <PxMessagingTask+0x754>)
 8009bc0:	199b      	adds	r3, r3, r6
 8009bc2:	5d1b      	ldrb	r3, [r3, r4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <PxMessagingTask+0x486>
								myID = cMessage[port-1][1+shift];
 8009bc8:	2238      	movs	r2, #56	; 0x38
 8009bca:	436a      	muls	r2, r5
 8009bcc:	4bb7      	ldr	r3, [pc, #732]	; (8009eac <PxMessagingTask+0x754>)
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	191c      	adds	r4, r3, r4
 8009bd2:	7862      	ldrb	r2, [r4, #1]
 8009bd4:	4bb8      	ldr	r3, [pc, #736]	; (8009eb8 <PxMessagingTask+0x760>)
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4699      	mov	r9, r3
 8009bdc:	e5eb      	b.n	80097b6 <PxMessagingTask+0x5e>
 8009bde:	2200      	movs	r2, #0
 8009be0:	4691      	mov	r9, r2
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d000      	beq.n	8009be8 <PxMessagingTask+0x490>
 8009be6:	e5e6      	b.n	80097b6 <PxMessagingTask+0x5e>
								messageParams[0] = 0;											/* change own ID */
 8009be8:	49b4      	ldr	r1, [pc, #720]	; (8009ebc <PxMessagingTask+0x764>)
 8009bea:	700a      	strb	r2, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009bec:	3238      	adds	r2, #56	; 0x38
 8009bee:	436a      	muls	r2, r5
 8009bf0:	4bae      	ldr	r3, [pc, #696]	; (8009eac <PxMessagingTask+0x754>)
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	181b      	adds	r3, r3, r0
 8009bf6:	785a      	ldrb	r2, [r3, #1]
 8009bf8:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009bfa:	7898      	ldrb	r0, [r3, #2]
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	330d      	adds	r3, #13
 8009c02:	464a      	mov	r2, r9
 8009c04:	4649      	mov	r1, r9
 8009c06:	f7ff f8bb 	bl	8008d80 <SendMessageFromPort>
 8009c0a:	e5d4      	b.n	80097b6 <PxMessagingTask+0x5e>
							if (longMessage) {
 8009c0c:	4bac      	ldr	r3, [pc, #688]	; (8009ec0 <PxMessagingTask+0x768>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d012      	beq.n	8009c3a <PxMessagingTask+0x4e2>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009c14:	4bab      	ldr	r3, [pc, #684]	; (8009ec4 <PxMessagingTask+0x76c>)
 8009c16:	4699      	mov	r9, r3
 8009c18:	881f      	ldrh	r7, [r3, #0]
 8009c1a:	48ab      	ldr	r0, [pc, #684]	; (8009ec8 <PxMessagingTask+0x770>)
 8009c1c:	1838      	adds	r0, r7, r0
 8009c1e:	4454      	add	r4, sl
 8009c20:	49a2      	ldr	r1, [pc, #648]	; (8009eac <PxMessagingTask+0x754>)
 8009c22:	1861      	adds	r1, r4, r1
 8009c24:	9c06      	ldr	r4, [sp, #24]
 8009c26:	0022      	movs	r2, r4
 8009c28:	f009 f901 	bl	8012e2e <memcpy>
								longMessageLastPtr += numOfParams;
 8009c2c:	46a4      	mov	ip, r4
 8009c2e:	4467      	add	r7, ip
 8009c30:	464b      	mov	r3, r9
 8009c32:	801f      	strh	r7, [r3, #0]
 8009c34:	2300      	movs	r3, #0
 8009c36:	4699      	mov	r9, r3
 8009c38:	e5bd      	b.n	80097b6 <PxMessagingTask+0x5e>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009c3a:	4ba2      	ldr	r3, [pc, #648]	; (8009ec4 <PxMessagingTask+0x76c>)
 8009c3c:	469b      	mov	fp, r3
 8009c3e:	881f      	ldrh	r7, [r3, #0]
 8009c40:	4ba1      	ldr	r3, [pc, #644]	; (8009ec8 <PxMessagingTask+0x770>)
 8009c42:	4699      	mov	r9, r3
 8009c44:	18f8      	adds	r0, r7, r3
 8009c46:	4454      	add	r4, sl
 8009c48:	4998      	ldr	r1, [pc, #608]	; (8009eac <PxMessagingTask+0x754>)
 8009c4a:	1861      	adds	r1, r4, r1
 8009c4c:	9c06      	ldr	r4, [sp, #24]
 8009c4e:	0022      	movs	r2, r4
 8009c50:	f009 f8ed 	bl	8012e2e <memcpy>
								longMessageLastPtr += numOfParams;
 8009c54:	193c      	adds	r4, r7, r4
 8009c56:	b2a4      	uxth	r4, r4
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009c58:	2116      	movs	r1, #22
 8009c5a:	0020      	movs	r0, r4
 8009c5c:	f7f6 fa78 	bl	8000150 <__udivsi3>
 8009c60:	4b9a      	ldr	r3, [pc, #616]	; (8009ecc <PxMessagingTask+0x774>)
 8009c62:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009c64:	0022      	movs	r2, r4
 8009c66:	4649      	mov	r1, r9
 8009c68:	4899      	ldr	r0, [pc, #612]	; (8009ed0 <PxMessagingTask+0x778>)
 8009c6a:	f009 f8e0 	bl	8012e2e <memcpy>
								longMessageLastPtr = 0;
 8009c6e:	2400      	movs	r4, #0
 8009c70:	465b      	mov	r3, fp
 8009c72:	801c      	strh	r4, [r3, #0]
 8009c74:	46a1      	mov	r9, r4
 8009c76:	e59e      	b.n	80097b6 <PxMessagingTask+0x5e>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009c78:	2401      	movs	r4, #1
							temp = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9305      	str	r3, [sp, #20]
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009c7e:	2780      	movs	r7, #128	; 0x80
 8009c80:	023f      	lsls	r7, r7, #8
 8009c82:	e003      	b.n	8009c8c <PxMessagingTask+0x534>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009c84:	3401      	adds	r4, #1
 8009c86:	b2e4      	uxtb	r4, r4
 8009c88:	2c06      	cmp	r4, #6
 8009c8a:	d00c      	beq.n	8009ca6 <PxMessagingTask+0x54e>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009c8c:	0020      	movs	r0, r4
 8009c8e:	f003 fb27 	bl	800d2e0 <GetUart>
 8009c92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c94:	42bb      	cmp	r3, r7
 8009c96:	d1f5      	bne.n	8009c84 <PxMessagingTask+0x52c>
									messageParams[temp++] = p;
 8009c98:	9a05      	ldr	r2, [sp, #20]
 8009c9a:	1c53      	adds	r3, r2, #1
 8009c9c:	4987      	ldr	r1, [pc, #540]	; (8009ebc <PxMessagingTask+0x764>)
 8009c9e:	548c      	strb	r4, [r1, r2]
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	9305      	str	r3, [sp, #20]
 8009ca4:	e7ee      	b.n	8009c84 <PxMessagingTask+0x52c>
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009ca6:	466b      	mov	r3, sp
 8009ca8:	8a9a      	ldrh	r2, [r3, #20]
 8009caa:	2114      	movs	r1, #20
 8009cac:	9804      	ldr	r0, [sp, #16]
 8009cae:	f7ff fa8f 	bl	80091d0 <SendMessageToModule>
							break;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4699      	mov	r9, r3
 8009cb6:	e57e      	b.n	80097b6 <PxMessagingTask+0x5e>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8009cb8:	4b7c      	ldr	r3, [pc, #496]	; (8009eac <PxMessagingTask+0x754>)
 8009cba:	199b      	adds	r3, r3, r6
 8009cbc:	5d1a      	ldrb	r2, [r3, r4]
 8009cbe:	0612      	lsls	r2, r2, #24
 8009cc0:	191b      	adds	r3, r3, r4
 8009cc2:	78d9      	ldrb	r1, [r3, #3]
 8009cc4:	1852      	adds	r2, r2, r1
 8009cc6:	7859      	ldrb	r1, [r3, #1]
 8009cc8:	0409      	lsls	r1, r1, #16
 8009cca:	1852      	adds	r2, r2, r1
 8009ccc:	7899      	ldrb	r1, [r3, #2]
 8009cce:	0209      	lsls	r1, r1, #8
 8009cd0:	1852      	adds	r2, r2, r1
 8009cd2:	920b      	str	r2, [sp, #44]	; 0x2c
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 8009cd4:	791b      	ldrb	r3, [r3, #4]
 8009cd6:	2bff      	cmp	r3, #255	; 0xff
 8009cd8:	d01c      	beq.n	8009d14 <PxMessagingTask+0x5bc>
									for (p=0 ; p<numOfParams ; p++) 
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d016      	beq.n	8009d0e <PxMessagingTask+0x5b6>
 8009ce0:	4653      	mov	r3, sl
 8009ce2:	1d1f      	adds	r7, r3, #4
 8009ce4:	193f      	adds	r7, r7, r4
 8009ce6:	4b71      	ldr	r3, [pc, #452]	; (8009eac <PxMessagingTask+0x754>)
 8009ce8:	18ff      	adds	r7, r7, r3
 8009cea:	3305      	adds	r3, #5
 8009cec:	4453      	add	r3, sl
 8009cee:	191c      	adds	r4, r3, r4
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	18e4      	adds	r4, r4, r3
										temp = cMessage[port-1][4+shift+p];
 8009cf8:	783b      	ldrb	r3, [r7, #0]
 8009cfa:	9305      	str	r3, [sp, #20]
										if (temp>0 && temp<=NumOfPorts)	{
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d915      	bls.n	8009d2e <PxMessagingTask+0x5d6>
 8009d02:	3701      	adds	r7, #1
									for (p=0 ; p<numOfParams ; p++) 
 8009d04:	42a7      	cmp	r7, r4
 8009d06:	d1f7      	bne.n	8009cf8 <PxMessagingTask+0x5a0>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4699      	mov	r9, r3
 8009d0c:	e553      	b.n	80097b6 <PxMessagingTask+0x5e>
								temp = temp32 = 0;
 8009d0e:	9305      	str	r3, [sp, #20]
									for (p=0 ; p<numOfParams ; p++) 
 8009d10:	4699      	mov	r9, r3
 8009d12:	e550      	b.n	80097b6 <PxMessagingTask+0x5e>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009d14:	2401      	movs	r4, #1
										UpdateBaudrate(p, temp32); 
 8009d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d18:	0020      	movs	r0, r4
 8009d1a:	f003 fb6d 	bl	800d3f8 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009d1e:	3401      	adds	r4, #1
 8009d20:	b2e4      	uxtb	r4, r4
 8009d22:	2c06      	cmp	r4, #6
 8009d24:	d1f7      	bne.n	8009d16 <PxMessagingTask+0x5be>
								temp = temp32 = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	e543      	b.n	80097b6 <PxMessagingTask+0x5e>
											UpdateBaudrate(temp, temp32); 
 8009d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d30:	9805      	ldr	r0, [sp, #20]
 8009d32:	f003 fb61 	bl	800d3f8 <UpdateBaudrate>
 8009d36:	e7e4      	b.n	8009d02 <PxMessagingTask+0x5aa>
								SaveToRO();
 8009d38:	f001 f8ae 	bl	800ae98 <SaveToRO>
							SaveEEportsDir();
 8009d3c:	f7f9 fa22 	bl	8003184 <SaveEEportsDir>
							indMode = IND_PING;
 8009d40:	4b64      	ldr	r3, [pc, #400]	; (8009ed4 <PxMessagingTask+0x77c>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
							break;
 8009d46:	2300      	movs	r3, #0
 8009d48:	4699      	mov	r9, r3
 8009d4a:	e534      	b.n	80097b6 <PxMessagingTask+0x5e>
							ClearEEportsDir();
 8009d4c:	f7f9 fa44 	bl	80031d8 <ClearEEportsDir>
							ClearROtopology();
 8009d50:	f001 f9aa 	bl	800b0a8 <ClearROtopology>
							osDelay(100);
 8009d54:	2064      	movs	r0, #100	; 0x64
 8009d56:	f003 fc0e 	bl	800d576 <osDelay>
							indMode = IND_TOPOLOGY;
 8009d5a:	4b5e      	ldr	r3, [pc, #376]	; (8009ed4 <PxMessagingTask+0x77c>)
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	701a      	strb	r2, [r3, #0]
							break;
 8009d60:	2300      	movs	r3, #0
 8009d62:	4699      	mov	r9, r3
 8009d64:	e527      	b.n	80097b6 <PxMessagingTask+0x5e>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009d66:	f003 fd1b 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8009d6a:	900b      	str	r0, [sp, #44]	; 0x2c
							if (dst == BOS_BROADCAST)
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d028      	beq.n	8009dc4 <PxMessagingTask+0x66c>
							else if (dst == BOS_MULTICAST)
 8009d72:	2bfe      	cmp	r3, #254	; 0xfe
 8009d74:	d02f      	beq.n	8009dd6 <PxMessagingTask+0x67e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009d76:	4454      	add	r4, sl
 8009d78:	494c      	ldr	r1, [pc, #304]	; (8009eac <PxMessagingTask+0x754>)
 8009d7a:	1861      	adds	r1, r4, r1
 8009d7c:	9a06      	ldr	r2, [sp, #24]
 8009d7e:	4856      	ldr	r0, [pc, #344]	; (8009ed8 <PxMessagingTask+0x780>)
 8009d80:	f009 f855 	bl	8012e2e <memcpy>
								temp = PcPort; PcPort = port;
 8009d84:	4c55      	ldr	r4, [pc, #340]	; (8009edc <PxMessagingTask+0x784>)
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009d86:	4b54      	ldr	r3, [pc, #336]	; (8009ed8 <PxMessagingTask+0x780>)
 8009d88:	469b      	mov	fp, r3
								if (BOS.response == BOS_RESPONSE_ALL)
 8009d8a:	4b55      	ldr	r3, [pc, #340]	; (8009ee0 <PxMessagingTask+0x788>)
 8009d8c:	4699      	mov	r9, r3
								temp = PcPort; PcPort = port;
 8009d8e:	7823      	ldrb	r3, [r4, #0]
 8009d90:	9305      	str	r3, [sp, #20]
 8009d92:	9a08      	ldr	r2, [sp, #32]
 8009d94:	7022      	strb	r2, [r4, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009d96:	2299      	movs	r2, #153	; 0x99
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	f003 fc81 	bl	800d6a4 <FreeRTOS_CLIProcessCommand>
 8009da2:	0007      	movs	r7, r0
								PcPort = temp;
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	7023      	strb	r3, [r4, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 8009da8:	464b      	mov	r3, r9
 8009daa:	799b      	ldrb	r3, [r3, #6]
 8009dac:	2b60      	cmp	r3, #96	; 0x60
 8009dae:	d01d      	beq.n	8009dec <PxMessagingTask+0x694>
							while( xReturned != pdFALSE );								
 8009db0:	2f00      	cmp	r7, #0
 8009db2:	d1ec      	bne.n	8009d8e <PxMessagingTask+0x636>
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009db4:	2232      	movs	r2, #50	; 0x32
 8009db6:	2100      	movs	r1, #0
 8009db8:	4847      	ldr	r0, [pc, #284]	; (8009ed8 <PxMessagingTask+0x780>)
 8009dba:	f009 f841 	bl	8012e40 <memset>
							break;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4699      	mov	r9, r3
 8009dc2:	e4f8      	b.n	80097b6 <PxMessagingTask+0x5e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	4454      	add	r4, sl
 8009dca:	4938      	ldr	r1, [pc, #224]	; (8009eac <PxMessagingTask+0x754>)
 8009dcc:	1861      	adds	r1, r4, r1
 8009dce:	4842      	ldr	r0, [pc, #264]	; (8009ed8 <PxMessagingTask+0x780>)
 8009dd0:	f009 f82d 	bl	8012e2e <memcpy>
 8009dd4:	e7d6      	b.n	8009d84 <PxMessagingTask+0x62c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	9a05      	ldr	r2, [sp, #20]
 8009dda:	1a9a      	subs	r2, r3, r2
 8009ddc:	3a02      	subs	r2, #2
 8009dde:	4454      	add	r4, sl
 8009de0:	4932      	ldr	r1, [pc, #200]	; (8009eac <PxMessagingTask+0x754>)
 8009de2:	1861      	adds	r1, r4, r1
 8009de4:	483c      	ldr	r0, [pc, #240]	; (8009ed8 <PxMessagingTask+0x780>)
 8009de6:	f009 f822 	bl	8012e2e <memcpy>
 8009dea:	e7cb      	b.n	8009d84 <PxMessagingTask+0x62c>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 8009dec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009dee:	f7f6 f993 	bl	8000118 <strlen>
 8009df2:	0002      	movs	r2, r0
 8009df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009df6:	4831      	ldr	r0, [pc, #196]	; (8009ebc <PxMessagingTask+0x764>)
 8009df8:	f009 f819 	bl	8012e2e <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8009dfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009dfe:	f7f6 f98b 	bl	8000118 <strlen>
 8009e02:	b282      	uxth	r2, r0
 8009e04:	2118      	movs	r1, #24
 8009e06:	9804      	ldr	r0, [sp, #16]
 8009e08:	f7ff f9e2 	bl	80091d0 <SendMessageToModule>
									osDelay(10); 
 8009e0c:	200a      	movs	r0, #10
 8009e0e:	f003 fbb2 	bl	800d576 <osDelay>
 8009e12:	e7cd      	b.n	8009db0 <PxMessagingTask+0x658>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009e14:	f003 fcc4 	bl	800d7a0 <FreeRTOS_CLIGetOutputBuffer>
 8009e18:	0007      	movs	r7, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009e1a:	f7f6 f97d 	bl	8000118 <strlen>
 8009e1e:	0002      	movs	r2, r0
 8009e20:	2100      	movs	r1, #0
 8009e22:	0038      	movs	r0, r7
 8009e24:	f009 f80c 	bl	8012e40 <memset>
							if (longMessage) {
 8009e28:	4b25      	ldr	r3, [pc, #148]	; (8009ec0 <PxMessagingTask+0x768>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d013      	beq.n	8009e58 <PxMessagingTask+0x700>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009e30:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <PxMessagingTask+0x76c>)
 8009e32:	4699      	mov	r9, r3
 8009e34:	8818      	ldrh	r0, [r3, #0]
 8009e36:	1838      	adds	r0, r7, r0
 8009e38:	4454      	add	r4, sl
 8009e3a:	491c      	ldr	r1, [pc, #112]	; (8009eac <PxMessagingTask+0x754>)
 8009e3c:	1861      	adds	r1, r4, r1
 8009e3e:	9c06      	ldr	r4, [sp, #24]
 8009e40:	0022      	movs	r2, r4
 8009e42:	f008 fff4 	bl	8012e2e <memcpy>
								longMessageLastPtr += numOfParams;
 8009e46:	464b      	mov	r3, r9
 8009e48:	881a      	ldrh	r2, [r3, #0]
 8009e4a:	46a4      	mov	ip, r4
 8009e4c:	4462      	add	r2, ip
 8009e4e:	464b      	mov	r3, r9
 8009e50:	801a      	strh	r2, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	4699      	mov	r9, r3
 8009e56:	e4ae      	b.n	80097b6 <PxMessagingTask+0x5e>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009e58:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <PxMessagingTask+0x76c>)
 8009e5a:	4699      	mov	r9, r3
 8009e5c:	8818      	ldrh	r0, [r3, #0]
 8009e5e:	1838      	adds	r0, r7, r0
 8009e60:	4454      	add	r4, sl
 8009e62:	4912      	ldr	r1, [pc, #72]	; (8009eac <PxMessagingTask+0x754>)
 8009e64:	1861      	adds	r1, r4, r1
 8009e66:	9a06      	ldr	r2, [sp, #24]
 8009e68:	f008 ffe1 	bl	8012e2e <memcpy>
								longMessageLastPtr = 0;
 8009e6c:	2400      	movs	r4, #0
 8009e6e:	464b      	mov	r3, r9
 8009e70:	801c      	strh	r4, [r3, #0]
								responseStatus = BOS_OK;
 8009e72:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <PxMessagingTask+0x75c>)
 8009e74:	701c      	strb	r4, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8009e76:	0023      	movs	r3, r4
 8009e78:	0022      	movs	r2, r4
 8009e7a:	0021      	movs	r1, r4
 8009e7c:	4819      	ldr	r0, [pc, #100]	; (8009ee4 <PxMessagingTask+0x78c>)
 8009e7e:	6800      	ldr	r0, [r0, #0]
 8009e80:	f004 ff98 	bl	800edb4 <xTaskGenericNotify>
 8009e84:	46a1      	mov	r9, r4
 8009e86:	e496      	b.n	80097b6 <PxMessagingTask+0x5e>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8009e88:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <PxMessagingTask+0x790>)
 8009e8a:	4a18      	ldr	r2, [pc, #96]	; (8009eec <PxMessagingTask+0x794>)
 8009e8c:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 8009e8e:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <PxMessagingTask+0x77c>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009e94:	200a      	movs	r0, #10
 8009e96:	f003 fb6e 	bl	800d576 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <PxMessagingTask+0x798>)
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <PxMessagingTask+0x79c>)
 8009ea2:	60da      	str	r2, [r3, #12]
 8009ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009ea8:	46c0      	nop			; (mov r8, r8)
 8009eaa:	e7fd      	b.n	8009ea8 <PxMessagingTask+0x750>
 8009eac:	20000cf0 	.word	0x20000cf0
 8009eb0:	20001034 	.word	0x20001034
 8009eb4:	200010b0 	.word	0x200010b0
 8009eb8:	2000101c 	.word	0x2000101c
 8009ebc:	20000ee8 	.word	0x20000ee8
 8009ec0:	20000ea3 	.word	0x20000ea3
 8009ec4:	20000ea4 	.word	0x20000ea4
 8009ec8:	20001500 	.word	0x20001500
 8009ecc:	2000001c 	.word	0x2000001c
 8009ed0:	20000a78 	.word	0x20000a78
 8009ed4:	20000ea2 	.word	0x20000ea2
 8009ed8:	200014cc 	.word	0x200014cc
 8009edc:	20000a77 	.word	0x20000a77
 8009ee0:	20006898 	.word	0x20006898
 8009ee4:	20001450 	.word	0x20001450
 8009ee8:	20007ff0 	.word	0x20007ff0
 8009eec:	deadbeef 	.word	0xdeadbeef
 8009ef0:	e000ed00 	.word	0xe000ed00
 8009ef4:	05fa0004 	.word	0x05fa0004
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009ef8:	4fec      	ldr	r7, [pc, #944]	; (800a2ac <PxMessagingTask+0xb54>)
 8009efa:	19bf      	adds	r7, r7, r6
 8009efc:	5d38      	ldrb	r0, [r7, r4]
 8009efe:	2300      	movs	r3, #0
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	3319      	adds	r3, #25
 8009f04:	2200      	movs	r2, #0
 8009f06:	2100      	movs	r1, #0
 8009f08:	f7fe ff3a 	bl	8008d80 <SendMessageFromPort>
								osDelay(100);
 8009f0c:	2064      	movs	r0, #100	; 0x64
 8009f0e:	f003 fb32 	bl	800d576 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8009f12:	5d3b      	ldrb	r3, [r7, r4]
 8009f14:	4ae6      	ldr	r2, [pc, #920]	; (800a2b0 <PxMessagingTask+0xb58>)
 8009f16:	7811      	ldrb	r1, [r2, #0]
 8009f18:	9a08      	ldr	r2, [sp, #32]
 8009f1a:	9804      	ldr	r0, [sp, #16]
 8009f1c:	f7f9 ff3a 	bl	8003d94 <remoteBootloaderUpdate>
								break;
 8009f20:	2300      	movs	r3, #0
 8009f22:	4699      	mov	r9, r3
 8009f24:	e447      	b.n	80097b6 <PxMessagingTask+0x5e>
							temp = cMessage[port-1][11+shift];
 8009f26:	46a3      	mov	fp, r4
 8009f28:	230b      	movs	r3, #11
 8009f2a:	4699      	mov	r9, r3
 8009f2c:	44a1      	add	r9, r4
 8009f2e:	4bdf      	ldr	r3, [pc, #892]	; (800a2ac <PxMessagingTask+0xb54>)
 8009f30:	199b      	adds	r3, r3, r6
 8009f32:	464a      	mov	r2, r9
 8009f34:	5c9b      	ldrb	r3, [r3, r2]
 8009f36:	930b      	str	r3, [sp, #44]	; 0x2c
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009f38:	9b06      	ldr	r3, [sp, #24]
 8009f3a:	2b0f      	cmp	r3, #15
 8009f3c:	d100      	bne.n	8009f40 <PxMessagingTask+0x7e8>
 8009f3e:	e088      	b.n	800a052 <PxMessagingTask+0x8fa>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8009f40:	9b06      	ldr	r3, [sp, #24]
 8009f42:	2b11      	cmp	r3, #17
 8009f44:	d100      	bne.n	8009f48 <PxMessagingTask+0x7f0>
 8009f46:	e08c      	b.n	800a062 <PxMessagingTask+0x90a>
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009f48:	465b      	mov	r3, fp
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	910c      	str	r1, [sp, #48]	; 0x30
 8009f4e:	1c98      	adds	r0, r3, #2
 8009f50:	900d      	str	r0, [sp, #52]	; 0x34
 8009f52:	1cda      	adds	r2, r3, #3
 8009f54:	920e      	str	r2, [sp, #56]	; 0x38
 8009f56:	4bd5      	ldr	r3, [pc, #852]	; (800a2ac <PxMessagingTask+0xb54>)
 8009f58:	199b      	adds	r3, r3, r6
 8009f5a:	465c      	mov	r4, fp
 8009f5c:	5d1c      	ldrb	r4, [r3, r4]
 8009f5e:	0624      	lsls	r4, r4, #24
 8009f60:	5c9a      	ldrb	r2, [r3, r2]
 8009f62:	18a4      	adds	r4, r4, r2
 8009f64:	5c5a      	ldrb	r2, [r3, r1]
 8009f66:	0412      	lsls	r2, r2, #16
 8009f68:	18a4      	adds	r4, r4, r2
 8009f6a:	5c1a      	ldrb	r2, [r3, r0]
 8009f6c:	0212      	lsls	r2, r2, #8
 8009f6e:	18a4      	adds	r4, r4, r2
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 8009f70:	465a      	mov	r2, fp
 8009f72:	3204      	adds	r2, #4
 8009f74:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f76:	4659      	mov	r1, fp
 8009f78:	3105      	adds	r1, #5
 8009f7a:	9110      	str	r1, [sp, #64]	; 0x40
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	3006      	adds	r0, #6
 8009f80:	9011      	str	r0, [sp, #68]	; 0x44
 8009f82:	465f      	mov	r7, fp
 8009f84:	3707      	adds	r7, #7
 8009f86:	9705      	str	r7, [sp, #20]
 8009f88:	5c9f      	ldrb	r7, [r3, r2]
 8009f8a:	063f      	lsls	r7, r7, #24
 8009f8c:	5c5a      	ldrb	r2, [r3, r1]
 8009f8e:	0412      	lsls	r2, r2, #16
 8009f90:	18bf      	adds	r7, r7, r2
 8009f92:	9a05      	ldr	r2, [sp, #20]
 8009f94:	5c9a      	ldrb	r2, [r3, r2]
 8009f96:	18bf      	adds	r7, r7, r2
 8009f98:	5c1b      	ldrb	r3, [r3, r0]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	18ff      	adds	r7, r7, r3
							if (temp == false)
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d166      	bne.n	800a072 <PxMessagingTask+0x91a>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 8009fa4:	4bc1      	ldr	r3, [pc, #772]	; (800a2ac <PxMessagingTask+0xb54>)
 8009fa6:	199b      	adds	r3, r3, r6
 8009fa8:	445b      	add	r3, fp
 8009faa:	7a5b      	ldrb	r3, [r3, #9]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d012      	beq.n	8009fd6 <PxMessagingTask+0x87e>
 8009fb0:	2138      	movs	r1, #56	; 0x38
 8009fb2:	4369      	muls	r1, r5
 8009fb4:	4abd      	ldr	r2, [pc, #756]	; (800a2ac <PxMessagingTask+0xb54>)
 8009fb6:	1852      	adds	r2, r2, r1
 8009fb8:	445a      	add	r2, fp
 8009fba:	7a91      	ldrb	r1, [r2, #10]
 8009fbc:	2900      	cmp	r1, #0
 8009fbe:	d00a      	beq.n	8009fd6 <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 8009fc0:	2038      	movs	r0, #56	; 0x38
 8009fc2:	4368      	muls	r0, r5
 8009fc4:	4ab9      	ldr	r2, [pc, #740]	; (800a2ac <PxMessagingTask+0xb54>)
 8009fc6:	1812      	adds	r2, r2, r0
 8009fc8:	445a      	add	r2, fp
 8009fca:	7a10      	ldrb	r0, [r2, #8]
 8009fcc:	9100      	str	r1, [sp, #0]
 8009fce:	003a      	movs	r2, r7
 8009fd0:	0021      	movs	r1, r4
 8009fd2:	f7fe fdbd 	bl	8008b50 <SetupDMAStreams>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 8009fd6:	4bb5      	ldr	r3, [pc, #724]	; (800a2ac <PxMessagingTask+0xb54>)
 8009fd8:	199b      	adds	r3, r3, r6
 8009fda:	464a      	mov	r2, r9
 8009fdc:	5c9b      	ldrb	r3, [r3, r2]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d012      	beq.n	800a008 <PxMessagingTask+0x8b0>
 8009fe2:	2138      	movs	r1, #56	; 0x38
 8009fe4:	4369      	muls	r1, r5
 8009fe6:	4ab1      	ldr	r2, [pc, #708]	; (800a2ac <PxMessagingTask+0xb54>)
 8009fe8:	1852      	adds	r2, r2, r1
 8009fea:	445a      	add	r2, fp
 8009fec:	7b11      	ldrb	r1, [r2, #12]
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	d00a      	beq.n	800a008 <PxMessagingTask+0x8b0>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009ff2:	2038      	movs	r0, #56	; 0x38
 8009ff4:	4368      	muls	r0, r5
 8009ff6:	4aad      	ldr	r2, [pc, #692]	; (800a2ac <PxMessagingTask+0xb54>)
 8009ff8:	1812      	adds	r2, r2, r0
 8009ffa:	445a      	add	r2, fp
 8009ffc:	7a10      	ldrb	r0, [r2, #8]
 8009ffe:	9100      	str	r1, [sp, #0]
 800a000:	003a      	movs	r2, r7
 800a002:	0021      	movs	r1, r4
 800a004:	f7fe fda4 	bl	8008b50 <SetupDMAStreams>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a008:	4ba8      	ldr	r3, [pc, #672]	; (800a2ac <PxMessagingTask+0xb54>)
 800a00a:	199b      	adds	r3, r3, r6
 800a00c:	445b      	add	r3, fp
 800a00e:	7b5b      	ldrb	r3, [r3, #13]
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	2200      	movs	r2, #0
 800a014:	4691      	mov	r9, r2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <PxMessagingTask+0x8c6>
 800a01a:	f7ff fbcc 	bl	80097b6 <PxMessagingTask+0x5e>
 800a01e:	3238      	adds	r2, #56	; 0x38
 800a020:	436a      	muls	r2, r5
 800a022:	4ba2      	ldr	r3, [pc, #648]	; (800a2ac <PxMessagingTask+0xb54>)
 800a024:	189b      	adds	r3, r3, r2
 800a026:	445b      	add	r3, fp
 800a028:	7b9a      	ldrb	r2, [r3, #14]
 800a02a:	454a      	cmp	r2, r9
 800a02c:	d101      	bne.n	800a032 <PxMessagingTask+0x8da>
 800a02e:	f000 fe04 	bl	800ac3a <PxMessagingTask+0x14e2>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a032:	2138      	movs	r1, #56	; 0x38
 800a034:	4369      	muls	r1, r5
 800a036:	4b9d      	ldr	r3, [pc, #628]	; (800a2ac <PxMessagingTask+0xb54>)
 800a038:	185b      	adds	r3, r3, r1
 800a03a:	445b      	add	r3, fp
 800a03c:	7a18      	ldrb	r0, [r3, #8]
 800a03e:	9200      	str	r2, [sp, #0]
 800a040:	9b05      	ldr	r3, [sp, #20]
 800a042:	003a      	movs	r2, r7
 800a044:	0021      	movs	r1, r4
 800a046:	f7fe fd83 	bl	8008b50 <SetupDMAStreams>
 800a04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f7ff fbb2 	bl	80097b6 <PxMessagingTask+0x5e>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a052:	2238      	movs	r2, #56	; 0x38
 800a054:	436a      	muls	r2, r5
 800a056:	4b95      	ldr	r3, [pc, #596]	; (800a2ac <PxMessagingTask+0xb54>)
 800a058:	189b      	adds	r3, r3, r2
 800a05a:	191c      	adds	r4, r3, r4
 800a05c:	7b63      	ldrb	r3, [r4, #13]
 800a05e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a060:	e772      	b.n	8009f48 <PxMessagingTask+0x7f0>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a062:	2238      	movs	r2, #56	; 0x38
 800a064:	436a      	muls	r2, r5
 800a066:	4b91      	ldr	r3, [pc, #580]	; (800a2ac <PxMessagingTask+0xb54>)
 800a068:	189b      	adds	r3, r3, r2
 800a06a:	445b      	add	r3, fp
 800a06c:	7bdb      	ldrb	r3, [r3, #15]
 800a06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a070:	e76a      	b.n	8009f48 <PxMessagingTask+0x7f0>
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a072:	2338      	movs	r3, #56	; 0x38
 800a074:	436b      	muls	r3, r5
 800a076:	4c8d      	ldr	r4, [pc, #564]	; (800a2ac <PxMessagingTask+0xb54>)
 800a078:	18e4      	adds	r4, r4, r3
 800a07a:	465b      	mov	r3, fp
 800a07c:	18e6      	adds	r6, r4, r3
 800a07e:	7a31      	ldrb	r1, [r6, #8]
 800a080:	20e4      	movs	r0, #228	; 0xe4
 800a082:	f7fd fbf7 	bl	8007874 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a086:	465b      	mov	r3, fp
 800a088:	5ce3      	ldrb	r3, [r4, r3]
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a08e:	5ca1      	ldrb	r1, [r4, r2]
 800a090:	18c9      	adds	r1, r1, r3
 800a092:	b289      	uxth	r1, r1
 800a094:	20e5      	movs	r0, #229	; 0xe5
 800a096:	f7fd fbed 	bl	8007874 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09c:	5ce3      	ldrb	r3, [r4, r3]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a2:	5ca1      	ldrb	r1, [r4, r2]
 800a0a4:	18c9      	adds	r1, r1, r3
 800a0a6:	b289      	uxth	r1, r1
 800a0a8:	20e6      	movs	r0, #230	; 0xe6
 800a0aa:	f7fd fbe3 	bl	8007874 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a0ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b0:	5ce3      	ldrb	r3, [r4, r3]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0b6:	5ca1      	ldrb	r1, [r4, r2]
 800a0b8:	18c9      	adds	r1, r1, r3
 800a0ba:	b289      	uxth	r1, r1
 800a0bc:	20e7      	movs	r0, #231	; 0xe7
 800a0be:	f7fd fbd9 	bl	8007874 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c4:	5ce3      	ldrb	r3, [r4, r3]
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	9a05      	ldr	r2, [sp, #20]
 800a0ca:	5ca1      	ldrb	r1, [r4, r2]
 800a0cc:	18c9      	adds	r1, r1, r3
 800a0ce:	b289      	uxth	r1, r1
 800a0d0:	20e8      	movs	r0, #232	; 0xe8
 800a0d2:	f7fd fbcf 	bl	8007874 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a0d6:	7a73      	ldrb	r3, [r6, #9]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	7ab1      	ldrb	r1, [r6, #10]
 800a0dc:	18c9      	adds	r1, r1, r3
 800a0de:	b289      	uxth	r1, r1
 800a0e0:	20e9      	movs	r0, #233	; 0xe9
 800a0e2:	f7fd fbc7 	bl	8007874 <EE_WriteVariable>
								if (numOfParams == 19)
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	2b13      	cmp	r3, #19
 800a0ea:	d116      	bne.n	800a11a <PxMessagingTask+0x9c2>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a0ec:	3325      	adds	r3, #37	; 0x25
 800a0ee:	436b      	muls	r3, r5
 800a0f0:	4d6e      	ldr	r5, [pc, #440]	; (800a2ac <PxMessagingTask+0xb54>)
 800a0f2:	18ed      	adds	r5, r5, r3
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	5ceb      	ldrb	r3, [r5, r3]
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	445d      	add	r5, fp
 800a0fc:	7b29      	ldrb	r1, [r5, #12]
 800a0fe:	18c9      	adds	r1, r1, r3
 800a100:	b289      	uxth	r1, r1
 800a102:	20ea      	movs	r0, #234	; 0xea
 800a104:	f7fd fbb6 	bl	8007874 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	4b69      	ldr	r3, [pc, #420]	; (800a2b4 <PxMessagingTask+0xb5c>)
 800a10e:	4a6a      	ldr	r2, [pc, #424]	; (800a2b8 <PxMessagingTask+0xb60>)
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	e7fd      	b.n	800a116 <PxMessagingTask+0x9be>
								if (numOfParams == 21)
 800a11a:	9b06      	ldr	r3, [sp, #24]
 800a11c:	2b15      	cmp	r3, #21
 800a11e:	d1f3      	bne.n	800a108 <PxMessagingTask+0x9b0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a120:	3323      	adds	r3, #35	; 0x23
 800a122:	435d      	muls	r5, r3
 800a124:	4b61      	ldr	r3, [pc, #388]	; (800a2ac <PxMessagingTask+0xb54>)
 800a126:	195b      	adds	r3, r3, r5
 800a128:	445b      	add	r3, fp
 800a12a:	7b5a      	ldrb	r2, [r3, #13]
 800a12c:	0212      	lsls	r2, r2, #8
 800a12e:	7b99      	ldrb	r1, [r3, #14]
 800a130:	1889      	adds	r1, r1, r2
 800a132:	b289      	uxth	r1, r1
 800a134:	20eb      	movs	r0, #235	; 0xeb
 800a136:	f7fd fb9d 	bl	8007874 <EE_WriteVariable>
 800a13a:	e7e5      	b.n	800a108 <PxMessagingTask+0x9b0>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a13c:	4f5b      	ldr	r7, [pc, #364]	; (800a2ac <PxMessagingTask+0xb54>)
 800a13e:	19bf      	adds	r7, r7, r6
 800a140:	1939      	adds	r1, r7, r4
 800a142:	7a8b      	ldrb	r3, [r1, #10]
 800a144:	9306      	str	r3, [sp, #24]
 800a146:	7aca      	ldrb	r2, [r1, #11]
 800a148:	4859      	ldr	r0, [pc, #356]	; (800a2b0 <PxMessagingTask+0xb58>)
 800a14a:	7803      	ldrb	r3, [r0, #0]
 800a14c:	4699      	mov	r9, r3
 800a14e:	7a4b      	ldrb	r3, [r1, #9]
 800a150:	469b      	mov	fp, r3
 800a152:	7b08      	ldrb	r0, [r1, #12]
 800a154:	0003      	movs	r3, r0
 800a156:	1e58      	subs	r0, r3, #1
 800a158:	4183      	sbcs	r3, r0
 800a15a:	9303      	str	r3, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a15c:	7908      	ldrb	r0, [r1, #4]
 800a15e:	0603      	lsls	r3, r0, #24
 800a160:	469c      	mov	ip, r3
 800a162:	7948      	ldrb	r0, [r1, #5]
 800a164:	0400      	lsls	r0, r0, #16
 800a166:	4460      	add	r0, ip
 800a168:	79cb      	ldrb	r3, [r1, #7]
 800a16a:	469c      	mov	ip, r3
 800a16c:	4460      	add	r0, ip
 800a16e:	798b      	ldrb	r3, [r1, #6]
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	469c      	mov	ip, r3
 800a174:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a176:	9002      	str	r0, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a178:	5d38      	ldrb	r0, [r7, r4]
 800a17a:	0600      	lsls	r0, r0, #24
 800a17c:	78cc      	ldrb	r4, [r1, #3]
 800a17e:	1900      	adds	r0, r0, r4
 800a180:	784c      	ldrb	r4, [r1, #1]
 800a182:	0424      	lsls	r4, r4, #16
 800a184:	1900      	adds	r0, r0, r4
 800a186:	788c      	ldrb	r4, [r1, #2]
 800a188:	0224      	lsls	r4, r4, #8
 800a18a:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a18c:	9001      	str	r0, [sp, #4]
 800a18e:	7a09      	ldrb	r1, [r1, #8]
 800a190:	9100      	str	r1, [sp, #0]
 800a192:	9b06      	ldr	r3, [sp, #24]
 800a194:	4649      	mov	r1, r9
 800a196:	4658      	mov	r0, fp
 800a198:	f7ff f840 	bl	800921c <StartScastDMAStream>
							break;								
 800a19c:	2300      	movs	r3, #0
 800a19e:	4699      	mov	r9, r3
 800a1a0:	f7ff fb09 	bl	80097b6 <PxMessagingTask+0x5e>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a1a4:	0023      	movs	r3, r4
 800a1a6:	4a41      	ldr	r2, [pc, #260]	; (800a2ac <PxMessagingTask+0xb54>)
 800a1a8:	1992      	adds	r2, r2, r6
 800a1aa:	5d12      	ldrb	r2, [r2, r4]
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d000      	beq.n	800a1b2 <PxMessagingTask+0xa5a>
 800a1b0:	e09a      	b.n	800a2e8 <PxMessagingTask+0xb90>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a1b2:	3238      	adds	r2, #56	; 0x38
 800a1b4:	436a      	muls	r2, r5
 800a1b6:	4b3d      	ldr	r3, [pc, #244]	; (800a2ac <PxMessagingTask+0xb54>)
 800a1b8:	189b      	adds	r3, r3, r2
 800a1ba:	191c      	adds	r4, r3, r4
 800a1bc:	78a3      	ldrb	r3, [r4, #2]
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	78e2      	ldrb	r2, [r4, #3]
 800a1c2:	0412      	lsls	r2, r2, #16
 800a1c4:	189b      	adds	r3, r3, r2
 800a1c6:	7962      	ldrb	r2, [r4, #5]
 800a1c8:	189b      	adds	r3, r3, r2
 800a1ca:	7922      	ldrb	r2, [r4, #4]
 800a1cc:	0212      	lsls	r2, r2, #8
 800a1ce:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a1d0:	7862      	ldrb	r2, [r4, #1]
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	b2d1      	uxtb	r1, r2
 800a1d6:	2907      	cmp	r1, #7
 800a1d8:	d901      	bls.n	800a1de <PxMessagingTask+0xa86>
 800a1da:	f000 fd11 	bl	800ac00 <PxMessagingTask+0x14a8>
 800a1de:	b2d2      	uxtb	r2, r2
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	4936      	ldr	r1, [pc, #216]	; (800a2bc <PxMessagingTask+0xb64>)
 800a1e4:	588a      	ldr	r2, [r1, r2]
 800a1e6:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	4b35      	ldr	r3, [pc, #212]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a1ec:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	211f      	movs	r1, #31
 800a1f2:	9804      	ldr	r0, [sp, #16]
 800a1f4:	f7fe ffec 	bl	80091d0 <SendMessageToModule>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4699      	mov	r9, r3
 800a1fc:	f7ff fadb 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	4b2f      	ldr	r3, [pc, #188]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a204:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a206:	2201      	movs	r2, #1
 800a208:	211f      	movs	r1, #31
 800a20a:	9804      	ldr	r0, [sp, #16]
 800a20c:	f7fe ffe0 	bl	80091d0 <SendMessageToModule>
 800a210:	2300      	movs	r3, #0
 800a212:	4699      	mov	r9, r3
 800a214:	f7ff facf 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a218:	8819      	ldrh	r1, [r3, #0]
 800a21a:	4a29      	ldr	r2, [pc, #164]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a21c:	7011      	strb	r1, [r2, #0]
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a224:	2202      	movs	r2, #2
 800a226:	211f      	movs	r1, #31
 800a228:	9804      	ldr	r0, [sp, #16]
 800a22a:	f7fe ffd1 	bl	80091d0 <SendMessageToModule>
 800a22e:	2300      	movs	r3, #0
 800a230:	4699      	mov	r9, r3
 800a232:	f7ff fac0 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a236:	8819      	ldrh	r1, [r3, #0]
 800a238:	4a21      	ldr	r2, [pc, #132]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a23a:	7011      	strb	r1, [r2, #0]
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b21b      	sxth	r3, r3
 800a240:	121b      	asrs	r3, r3, #8
 800a242:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a244:	2202      	movs	r2, #2
 800a246:	211f      	movs	r1, #31
 800a248:	9804      	ldr	r0, [sp, #16]
 800a24a:	f7fe ffc1 	bl	80091d0 <SendMessageToModule>
 800a24e:	2300      	movs	r3, #0
 800a250:	4699      	mov	r9, r3
 800a252:	f7ff fab0 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a256:	6819      	ldr	r1, [r3, #0]
 800a258:	4a19      	ldr	r2, [pc, #100]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a25a:	7011      	strb	r1, [r2, #0]
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	0a09      	lsrs	r1, r1, #8
 800a260:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a262:	6819      	ldr	r1, [r3, #0]
 800a264:	0c09      	lsrs	r1, r1, #16
 800a266:	7091      	strb	r1, [r2, #2]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	0e1b      	lsrs	r3, r3, #24
 800a26c:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a26e:	2204      	movs	r2, #4
 800a270:	211f      	movs	r1, #31
 800a272:	9804      	ldr	r0, [sp, #16]
 800a274:	f7fe ffac 	bl	80091d0 <SendMessageToModule>
 800a278:	2300      	movs	r3, #0
 800a27a:	4699      	mov	r9, r3
 800a27c:	f7ff fa9b 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a280:	6819      	ldr	r1, [r3, #0]
 800a282:	4a0f      	ldr	r2, [pc, #60]	; (800a2c0 <PxMessagingTask+0xb68>)
 800a284:	7011      	strb	r1, [r2, #0]
 800a286:	6819      	ldr	r1, [r3, #0]
 800a288:	1209      	asrs	r1, r1, #8
 800a28a:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a28c:	6819      	ldr	r1, [r3, #0]
 800a28e:	1409      	asrs	r1, r1, #16
 800a290:	7091      	strb	r1, [r2, #2]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	161b      	asrs	r3, r3, #24
 800a296:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a298:	2204      	movs	r2, #4
 800a29a:	211f      	movs	r1, #31
 800a29c:	9804      	ldr	r0, [sp, #16]
 800a29e:	f7fe ff97 	bl	80091d0 <SendMessageToModule>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4699      	mov	r9, r3
 800a2a6:	f7ff fa86 	bl	80097b6 <PxMessagingTask+0x5e>
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	20000cf0 	.word	0x20000cf0
 800a2b0:	2000101c 	.word	0x2000101c
 800a2b4:	e000ed00 	.word	0xe000ed00
 800a2b8:	05fa0004 	.word	0x05fa0004
 800a2bc:	08019ef4 	.word	0x08019ef4
 800a2c0:	20000ee8 	.word	0x20000ee8
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a2c4:	7819      	ldrb	r1, [r3, #0]
 800a2c6:	4aee      	ldr	r2, [pc, #952]	; (800a680 <PxMessagingTask+0xf28>)
 800a2c8:	7011      	strb	r1, [r2, #0]
 800a2ca:	7859      	ldrb	r1, [r3, #1]
 800a2cc:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a2ce:	7899      	ldrb	r1, [r3, #2]
 800a2d0:	7091      	strb	r1, [r2, #2]
 800a2d2:	78db      	ldrb	r3, [r3, #3]
 800a2d4:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a2d6:	2208      	movs	r2, #8
 800a2d8:	211f      	movs	r1, #31
 800a2da:	9804      	ldr	r0, [sp, #16]
 800a2dc:	f7fe ff78 	bl	80091d0 <SendMessageToModule>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4699      	mov	r9, r3
 800a2e4:	f7ff fa67 	bl	80097b6 <PxMessagingTask+0x5e>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a2e8:	2a02      	cmp	r2, #2
 800a2ea:	d000      	beq.n	800a2ee <PxMessagingTask+0xb96>
 800a2ec:	e09f      	b.n	800a42e <PxMessagingTask+0xcd6>
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a2ee:	48e5      	ldr	r0, [pc, #916]	; (800a684 <PxMessagingTask+0xf2c>)
 800a2f0:	3236      	adds	r2, #54	; 0x36
 800a2f2:	436a      	muls	r2, r5
 800a2f4:	1882      	adds	r2, r0, r2
 800a2f6:	1851      	adds	r1, r2, r1
 800a2f8:	3901      	subs	r1, #1
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	700a      	strb	r2, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a2fe:	3301      	adds	r3, #1
 800a300:	4453      	add	r3, sl
 800a302:	1818      	adds	r0, r3, r0
 800a304:	f7f9 fb5e 	bl	80039c4 <IsModuleParameter>
 800a308:	9005      	str	r0, [sp, #20]
									if (temp == 0) {																					// Parameter does not exist
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d108      	bne.n	800a320 <PxMessagingTask+0xbc8>
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a30e:	2201      	movs	r2, #1
 800a310:	211f      	movs	r1, #31
 800a312:	9804      	ldr	r0, [sp, #16]
 800a314:	f7fe ff5c 	bl	80091d0 <SendMessageToModule>
 800a318:	2300      	movs	r3, #0
 800a31a:	4699      	mov	r9, r3
 800a31c:	f7ff fa4b 	bl	80097b6 <PxMessagingTask+0x5e>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a320:	3801      	subs	r0, #1
 800a322:	4ad9      	ldr	r2, [pc, #868]	; (800a688 <PxMessagingTask+0xf30>)
 800a324:	210c      	movs	r1, #12
 800a326:	4341      	muls	r1, r0
 800a328:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a32a:	1852      	adds	r2, r2, r1
 800a32c:	7912      	ldrb	r2, [r2, #4]
 800a32e:	49d4      	ldr	r1, [pc, #848]	; (800a680 <PxMessagingTask+0xf28>)
 800a330:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a332:	3a01      	subs	r2, #1
 800a334:	b2d1      	uxtb	r1, r2
 800a336:	2907      	cmp	r1, #7
 800a338:	d901      	bls.n	800a33e <PxMessagingTask+0xbe6>
 800a33a:	f000 fc65 	bl	800ac08 <PxMessagingTask+0x14b0>
 800a33e:	b2d2      	uxtb	r2, r2
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	49d2      	ldr	r1, [pc, #840]	; (800a68c <PxMessagingTask+0xf34>)
 800a344:	588a      	ldr	r2, [r1, r2]
 800a346:	4697      	mov	pc, r2
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	4bcd      	ldr	r3, [pc, #820]	; (800a680 <PxMessagingTask+0xf28>)
 800a34c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a34e:	2202      	movs	r2, #2
 800a350:	211f      	movs	r1, #31
 800a352:	9804      	ldr	r0, [sp, #16]
 800a354:	f7fe ff3c 	bl	80091d0 <SendMessageToModule>
 800a358:	2300      	movs	r3, #0
 800a35a:	4699      	mov	r9, r3
 800a35c:	f7ff fa2b 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	4bc7      	ldr	r3, [pc, #796]	; (800a680 <PxMessagingTask+0xf28>)
 800a364:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a366:	2202      	movs	r2, #2
 800a368:	211f      	movs	r1, #31
 800a36a:	9804      	ldr	r0, [sp, #16]
 800a36c:	f7fe ff30 	bl	80091d0 <SendMessageToModule>
 800a370:	2300      	movs	r3, #0
 800a372:	4699      	mov	r9, r3
 800a374:	f7ff fa1f 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a378:	8819      	ldrh	r1, [r3, #0]
 800a37a:	4ac1      	ldr	r2, [pc, #772]	; (800a680 <PxMessagingTask+0xf28>)
 800a37c:	7051      	strb	r1, [r2, #1]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a384:	2203      	movs	r2, #3
 800a386:	211f      	movs	r1, #31
 800a388:	9804      	ldr	r0, [sp, #16]
 800a38a:	f7fe ff21 	bl	80091d0 <SendMessageToModule>
 800a38e:	2300      	movs	r3, #0
 800a390:	4699      	mov	r9, r3
 800a392:	f7ff fa10 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a396:	8819      	ldrh	r1, [r3, #0]
 800a398:	4ab9      	ldr	r2, [pc, #740]	; (800a680 <PxMessagingTask+0xf28>)
 800a39a:	7051      	strb	r1, [r2, #1]
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	b21b      	sxth	r3, r3
 800a3a0:	121b      	asrs	r3, r3, #8
 800a3a2:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	211f      	movs	r1, #31
 800a3a8:	9804      	ldr	r0, [sp, #16]
 800a3aa:	f7fe ff11 	bl	80091d0 <SendMessageToModule>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4699      	mov	r9, r3
 800a3b2:	f7ff fa00 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a3b6:	6819      	ldr	r1, [r3, #0]
 800a3b8:	4ab1      	ldr	r2, [pc, #708]	; (800a680 <PxMessagingTask+0xf28>)
 800a3ba:	7051      	strb	r1, [r2, #1]
 800a3bc:	6819      	ldr	r1, [r3, #0]
 800a3be:	0a09      	lsrs	r1, r1, #8
 800a3c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a3c2:	6819      	ldr	r1, [r3, #0]
 800a3c4:	0c09      	lsrs	r1, r1, #16
 800a3c6:	70d1      	strb	r1, [r2, #3]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	0e1b      	lsrs	r3, r3, #24
 800a3cc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a3ce:	2205      	movs	r2, #5
 800a3d0:	211f      	movs	r1, #31
 800a3d2:	9804      	ldr	r0, [sp, #16]
 800a3d4:	f7fe fefc 	bl	80091d0 <SendMessageToModule>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4699      	mov	r9, r3
 800a3dc:	f7ff f9eb 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a3e0:	6819      	ldr	r1, [r3, #0]
 800a3e2:	4aa7      	ldr	r2, [pc, #668]	; (800a680 <PxMessagingTask+0xf28>)
 800a3e4:	7051      	strb	r1, [r2, #1]
 800a3e6:	6819      	ldr	r1, [r3, #0]
 800a3e8:	1209      	asrs	r1, r1, #8
 800a3ea:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a3ec:	6819      	ldr	r1, [r3, #0]
 800a3ee:	1409      	asrs	r1, r1, #16
 800a3f0:	70d1      	strb	r1, [r2, #3]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	161b      	asrs	r3, r3, #24
 800a3f6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a3f8:	2205      	movs	r2, #5
 800a3fa:	211f      	movs	r1, #31
 800a3fc:	9804      	ldr	r0, [sp, #16]
 800a3fe:	f7fe fee7 	bl	80091d0 <SendMessageToModule>
 800a402:	2300      	movs	r3, #0
 800a404:	4699      	mov	r9, r3
 800a406:	f7ff f9d6 	bl	80097b6 <PxMessagingTask+0x5e>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a40a:	7819      	ldrb	r1, [r3, #0]
 800a40c:	4a9c      	ldr	r2, [pc, #624]	; (800a680 <PxMessagingTask+0xf28>)
 800a40e:	7051      	strb	r1, [r2, #1]
 800a410:	7859      	ldrb	r1, [r3, #1]
 800a412:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a414:	7899      	ldrb	r1, [r3, #2]
 800a416:	70d1      	strb	r1, [r2, #3]
 800a418:	78db      	ldrb	r3, [r3, #3]
 800a41a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a41c:	2209      	movs	r2, #9
 800a41e:	211f      	movs	r1, #31
 800a420:	9804      	ldr	r0, [sp, #16]
 800a422:	f7fe fed5 	bl	80091d0 <SendMessageToModule>
 800a426:	2300      	movs	r3, #0
 800a428:	4699      	mov	r9, r3
 800a42a:	f7ff f9c4 	bl	80097b6 <PxMessagingTask+0x5e>
									}
 800a42e:	2300      	movs	r3, #0
 800a430:	4699      	mov	r9, r3
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a432:	2a02      	cmp	r2, #2
 800a434:	d801      	bhi.n	800a43a <PxMessagingTask+0xce2>
 800a436:	f7ff f9be 	bl	80097b6 <PxMessagingTask+0x5e>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a43a:	3a04      	subs	r2, #4
 800a43c:	0092      	lsls	r2, r2, #2
 800a43e:	4b94      	ldr	r3, [pc, #592]	; (800a690 <PxMessagingTask+0xf38>)
 800a440:	58d1      	ldr	r1, [r2, r3]
 800a442:	220f      	movs	r2, #15
 800a444:	400a      	ands	r2, r1
 800a446:	4b8e      	ldr	r3, [pc, #568]	; (800a680 <PxMessagingTask+0xf28>)
 800a448:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a44a:	454a      	cmp	r2, r9
 800a44c:	d106      	bne.n	800a45c <PxMessagingTask+0xd04>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a44e:	2201      	movs	r2, #1
 800a450:	211f      	movs	r1, #31
 800a452:	9804      	ldr	r0, [sp, #16]
 800a454:	f7fe febc 	bl	80091d0 <SendMessageToModule>
 800a458:	f7ff f9ad 	bl	80097b6 <PxMessagingTask+0x5e>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a45c:	0c09      	lsrs	r1, r1, #16
 800a45e:	2380      	movs	r3, #128	; 0x80
 800a460:	059b      	lsls	r3, r3, #22
 800a462:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 800a464:	3a01      	subs	r2, #1
 800a466:	b2d0      	uxtb	r0, r2
 800a468:	2807      	cmp	r0, #7
 800a46a:	d900      	bls.n	800a46e <PxMessagingTask+0xd16>
 800a46c:	e3d0      	b.n	800ac10 <PxMessagingTask+0x14b8>
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	0092      	lsls	r2, r2, #2
 800a472:	4888      	ldr	r0, [pc, #544]	; (800a694 <PxMessagingTask+0xf3c>)
 800a474:	5882      	ldr	r2, [r0, r2]
 800a476:	4697      	mov	pc, r2
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	4b81      	ldr	r3, [pc, #516]	; (800a680 <PxMessagingTask+0xf28>)
 800a47c:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a47e:	2202      	movs	r2, #2
 800a480:	211f      	movs	r1, #31
 800a482:	9804      	ldr	r0, [sp, #16]
 800a484:	f7fe fea4 	bl	80091d0 <SendMessageToModule>
 800a488:	2300      	movs	r3, #0
 800a48a:	4699      	mov	r9, r3
 800a48c:	f7ff f993 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	4b7b      	ldr	r3, [pc, #492]	; (800a680 <PxMessagingTask+0xf28>)
 800a494:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a496:	2202      	movs	r2, #2
 800a498:	211f      	movs	r1, #31
 800a49a:	9804      	ldr	r0, [sp, #16]
 800a49c:	f7fe fe98 	bl	80091d0 <SendMessageToModule>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4699      	mov	r9, r3
 800a4a4:	f7ff f987 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a4a8:	8819      	ldrh	r1, [r3, #0]
 800a4aa:	4a75      	ldr	r2, [pc, #468]	; (800a680 <PxMessagingTask+0xf28>)
 800a4ac:	7051      	strb	r1, [r2, #1]
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	0a1b      	lsrs	r3, r3, #8
 800a4b2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	211f      	movs	r1, #31
 800a4b8:	9804      	ldr	r0, [sp, #16]
 800a4ba:	f7fe fe89 	bl	80091d0 <SendMessageToModule>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4699      	mov	r9, r3
 800a4c2:	f7ff f978 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a4c6:	8819      	ldrh	r1, [r3, #0]
 800a4c8:	4a6d      	ldr	r2, [pc, #436]	; (800a680 <PxMessagingTask+0xf28>)
 800a4ca:	7051      	strb	r1, [r2, #1]
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	121b      	asrs	r3, r3, #8
 800a4d2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a4d4:	2203      	movs	r2, #3
 800a4d6:	211f      	movs	r1, #31
 800a4d8:	9804      	ldr	r0, [sp, #16]
 800a4da:	f7fe fe79 	bl	80091d0 <SendMessageToModule>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	4699      	mov	r9, r3
 800a4e2:	f7ff f968 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a4e6:	6819      	ldr	r1, [r3, #0]
 800a4e8:	4a65      	ldr	r2, [pc, #404]	; (800a680 <PxMessagingTask+0xf28>)
 800a4ea:	7051      	strb	r1, [r2, #1]
 800a4ec:	6819      	ldr	r1, [r3, #0]
 800a4ee:	0a09      	lsrs	r1, r1, #8
 800a4f0:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	0c09      	lsrs	r1, r1, #16
 800a4f6:	70d1      	strb	r1, [r2, #3]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	0e1b      	lsrs	r3, r3, #24
 800a4fc:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a4fe:	2205      	movs	r2, #5
 800a500:	211f      	movs	r1, #31
 800a502:	9804      	ldr	r0, [sp, #16]
 800a504:	f7fe fe64 	bl	80091d0 <SendMessageToModule>
 800a508:	2300      	movs	r3, #0
 800a50a:	4699      	mov	r9, r3
 800a50c:	f7ff f953 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a510:	6819      	ldr	r1, [r3, #0]
 800a512:	4a5b      	ldr	r2, [pc, #364]	; (800a680 <PxMessagingTask+0xf28>)
 800a514:	7051      	strb	r1, [r2, #1]
 800a516:	6819      	ldr	r1, [r3, #0]
 800a518:	1209      	asrs	r1, r1, #8
 800a51a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	1409      	asrs	r1, r1, #16
 800a520:	70d1      	strb	r1, [r2, #3]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	161b      	asrs	r3, r3, #24
 800a526:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a528:	2205      	movs	r2, #5
 800a52a:	211f      	movs	r1, #31
 800a52c:	9804      	ldr	r0, [sp, #16]
 800a52e:	f7fe fe4f 	bl	80091d0 <SendMessageToModule>
 800a532:	2300      	movs	r3, #0
 800a534:	4699      	mov	r9, r3
 800a536:	f7ff f93e 	bl	80097b6 <PxMessagingTask+0x5e>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a53a:	781a      	ldrb	r2, [r3, #0]
 800a53c:	4b50      	ldr	r3, [pc, #320]	; (800a680 <PxMessagingTask+0xf28>)
 800a53e:	705a      	strb	r2, [r3, #1]
 800a540:	4a55      	ldr	r2, [pc, #340]	; (800a698 <PxMessagingTask+0xf40>)
 800a542:	188a      	adds	r2, r1, r2
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a548:	4a54      	ldr	r2, [pc, #336]	; (800a69c <PxMessagingTask+0xf44>)
 800a54a:	188a      	adds	r2, r1, r2
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	70da      	strb	r2, [r3, #3]
 800a550:	4a53      	ldr	r2, [pc, #332]	; (800a6a0 <PxMessagingTask+0xf48>)
 800a552:	4694      	mov	ip, r2
 800a554:	4461      	add	r1, ip
 800a556:	780a      	ldrb	r2, [r1, #0]
 800a558:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a55a:	2209      	movs	r2, #9
 800a55c:	211f      	movs	r1, #31
 800a55e:	9804      	ldr	r0, [sp, #16]
 800a560:	f7fe fe36 	bl	80091d0 <SendMessageToModule>
 800a564:	2300      	movs	r3, #0
 800a566:	4699      	mov	r9, r3
 800a568:	f7ff f925 	bl	80097b6 <PxMessagingTask+0x5e>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a56c:	4b4d      	ldr	r3, [pc, #308]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2002      	movs	r0, #2
 800a574:	4240      	negs	r0, r0
 800a576:	17c1      	asrs	r1, r0, #31
 800a578:	1812      	adds	r2, r2, r0
 800a57a:	414b      	adcs	r3, r1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00b      	beq.n	800a598 <PxMessagingTask+0xe40>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a580:	4b49      	ldr	r3, [pc, #292]	; (800a6a8 <PxMessagingTask+0xf50>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b10      	cmp	r3, #16
 800a586:	d100      	bne.n	800a58a <PxMessagingTask+0xe32>
 800a588:	e35c      	b.n	800ac44 <PxMessagingTask+0x14ec>
 800a58a:	4b47      	ldr	r3, [pc, #284]	; (800a6a8 <PxMessagingTask+0xf50>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	2300      	movs	r3, #0
 800a592:	4699      	mov	r9, r3
 800a594:	f7ff f90f 	bl	80097b6 <PxMessagingTask+0x5e>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <PxMessagingTask+0xe48>
 800a59c:	2a01      	cmp	r2, #1
 800a59e:	d8ef      	bhi.n	800a580 <PxMessagingTask+0xe28>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a5a0:	2138      	movs	r1, #56	; 0x38
 800a5a2:	4369      	muls	r1, r5
 800a5a4:	4a37      	ldr	r2, [pc, #220]	; (800a684 <PxMessagingTask+0xf2c>)
 800a5a6:	1852      	adds	r2, r2, r1
 800a5a8:	5d12      	ldrb	r2, [r2, r4]
 800a5aa:	4940      	ldr	r1, [pc, #256]	; (800a6ac <PxMessagingTask+0xf54>)
 800a5ac:	700a      	strb	r2, [r1, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a5ae:	2a08      	cmp	r2, #8
 800a5b0:	d8e6      	bhi.n	800a580 <PxMessagingTask+0xe28>
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	493e      	ldr	r1, [pc, #248]	; (800a6b0 <PxMessagingTask+0xf58>)
 800a5b6:	588a      	ldr	r2, [r1, r2]
 800a5b8:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a5ba:	4b3b      	ldr	r3, [pc, #236]	; (800a6a8 <PxMessagingTask+0xf50>)
 800a5bc:	2210      	movs	r2, #16
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4699      	mov	r9, r3
 800a5c4:	f7ff f8f7 	bl	80097b6 <PxMessagingTask+0x5e>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a5c8:	4a36      	ldr	r2, [pc, #216]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a5ca:	2038      	movs	r0, #56	; 0x38
 800a5cc:	4368      	muls	r0, r5
 800a5ce:	492d      	ldr	r1, [pc, #180]	; (800a684 <PxMessagingTask+0xf2c>)
 800a5d0:	1809      	adds	r1, r1, r0
 800a5d2:	1909      	adds	r1, r1, r4
 800a5d4:	784b      	ldrb	r3, [r1, #1]
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6053      	str	r3, [r2, #4]
 800a5dc:	e7d0      	b.n	800a580 <PxMessagingTask+0xe28>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a5de:	4a31      	ldr	r2, [pc, #196]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a5e0:	2038      	movs	r0, #56	; 0x38
 800a5e2:	4368      	muls	r0, r5
 800a5e4:	4927      	ldr	r1, [pc, #156]	; (800a684 <PxMessagingTask+0xf2c>)
 800a5e6:	1809      	adds	r1, r1, r0
 800a5e8:	1909      	adds	r1, r1, r4
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	56cb      	ldrsb	r3, [r1, r3]
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	17db      	asrs	r3, r3, #31
 800a5f2:	6053      	str	r3, [r2, #4]
 800a5f4:	e7c4      	b.n	800a580 <PxMessagingTask+0xe28>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a5f6:	4a2b      	ldr	r2, [pc, #172]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a5f8:	2038      	movs	r0, #56	; 0x38
 800a5fa:	4368      	muls	r0, r5
 800a5fc:	4921      	ldr	r1, [pc, #132]	; (800a684 <PxMessagingTask+0xf2c>)
 800a5fe:	1809      	adds	r1, r1, r0
 800a600:	1909      	adds	r1, r1, r4
 800a602:	788b      	ldrb	r3, [r1, #2]
 800a604:	021b      	lsls	r3, r3, #8
 800a606:	7849      	ldrb	r1, [r1, #1]
 800a608:	185b      	adds	r3, r3, r1
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	17db      	asrs	r3, r3, #31
 800a60e:	6053      	str	r3, [r2, #4]
 800a610:	e7b6      	b.n	800a580 <PxMessagingTask+0xe28>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800a612:	4a24      	ldr	r2, [pc, #144]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a614:	2038      	movs	r0, #56	; 0x38
 800a616:	4368      	muls	r0, r5
 800a618:	491a      	ldr	r1, [pc, #104]	; (800a684 <PxMessagingTask+0xf2c>)
 800a61a:	1809      	adds	r1, r1, r0
 800a61c:	1909      	adds	r1, r1, r4
 800a61e:	788b      	ldrb	r3, [r1, #2]
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	7849      	ldrb	r1, [r1, #1]
 800a624:	185b      	adds	r3, r3, r1
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	17db      	asrs	r3, r3, #31
 800a62a:	6053      	str	r3, [r2, #4]
 800a62c:	e7a8      	b.n	800a580 <PxMessagingTask+0xe28>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a62e:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a630:	2038      	movs	r0, #56	; 0x38
 800a632:	4368      	muls	r0, r5
 800a634:	4913      	ldr	r1, [pc, #76]	; (800a684 <PxMessagingTask+0xf2c>)
 800a636:	1809      	adds	r1, r1, r0
 800a638:	1909      	adds	r1, r1, r4
 800a63a:	788b      	ldrb	r3, [r1, #2]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	78c8      	ldrb	r0, [r1, #3]
 800a640:	0400      	lsls	r0, r0, #16
 800a642:	181b      	adds	r3, r3, r0
 800a644:	7848      	ldrb	r0, [r1, #1]
 800a646:	181b      	adds	r3, r3, r0
 800a648:	7909      	ldrb	r1, [r1, #4]
 800a64a:	0609      	lsls	r1, r1, #24
 800a64c:	185b      	adds	r3, r3, r1
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	2300      	movs	r3, #0
 800a652:	6053      	str	r3, [r2, #4]
 800a654:	e794      	b.n	800a580 <PxMessagingTask+0xe28>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800a656:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <PxMessagingTask+0xf4c>)
 800a658:	2038      	movs	r0, #56	; 0x38
 800a65a:	4368      	muls	r0, r5
 800a65c:	4909      	ldr	r1, [pc, #36]	; (800a684 <PxMessagingTask+0xf2c>)
 800a65e:	1809      	adds	r1, r1, r0
 800a660:	1909      	adds	r1, r1, r4
 800a662:	788b      	ldrb	r3, [r1, #2]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	7848      	ldrb	r0, [r1, #1]
 800a668:	181b      	adds	r3, r3, r0
 800a66a:	78c8      	ldrb	r0, [r1, #3]
 800a66c:	0400      	lsls	r0, r0, #16
 800a66e:	181b      	adds	r3, r3, r0
 800a670:	7909      	ldrb	r1, [r1, #4]
 800a672:	0609      	lsls	r1, r1, #24
 800a674:	185b      	adds	r3, r3, r1
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	17db      	asrs	r3, r3, #31
 800a67a:	6053      	str	r3, [r2, #4]
 800a67c:	e780      	b.n	800a580 <PxMessagingTask+0xe28>
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	20000ee8 	.word	0x20000ee8
 800a684:	20000cf0 	.word	0x20000cf0
 800a688:	20000088 	.word	0x20000088
 800a68c:	08019f14 	.word	0x08019f14
 800a690:	20006820 	.word	0x20006820
 800a694:	08019f34 	.word	0x08019f34
 800a698:	20000001 	.word	0x20000001
 800a69c:	20000002 	.word	0x20000002
 800a6a0:	20000003 	.word	0x20000003
 800a6a4:	200010a8 	.word	0x200010a8
 800a6a8:	200010b0 	.word	0x200010b0
 800a6ac:	20000070 	.word	0x20000070
 800a6b0:	08019f54 	.word	0x08019f54
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a6b4:	4ad7      	ldr	r2, [pc, #860]	; (800aa14 <PxMessagingTask+0x12bc>)
 800a6b6:	2038      	movs	r0, #56	; 0x38
 800a6b8:	4368      	muls	r0, r5
 800a6ba:	49d7      	ldr	r1, [pc, #860]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a6bc:	1809      	adds	r1, r1, r0
 800a6be:	1909      	adds	r1, r1, r4
 800a6c0:	788b      	ldrb	r3, [r1, #2]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	78c8      	ldrb	r0, [r1, #3]
 800a6c6:	0400      	lsls	r0, r0, #16
 800a6c8:	181b      	adds	r3, r3, r0
 800a6ca:	7848      	ldrb	r0, [r1, #1]
 800a6cc:	181b      	adds	r3, r3, r0
 800a6ce:	7909      	ldrb	r1, [r1, #4]
 800a6d0:	0609      	lsls	r1, r1, #24
 800a6d2:	185b      	adds	r3, r3, r1
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6053      	str	r3, [r2, #4]
 800a6da:	e751      	b.n	800a580 <PxMessagingTask+0xe28>
							responseStatus = BOS_OK;		// Initialize response
 800a6dc:	4bcf      	ldr	r3, [pc, #828]	; (800aa1c <PxMessagingTask+0x12c4>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a6e2:	46a1      	mov	r9, r4
 800a6e4:	4bcc      	ldr	r3, [pc, #816]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a6e6:	199b      	adds	r3, r3, r6
 800a6e8:	5d1b      	ldrb	r3, [r3, r4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d100      	bne.n	800a6f0 <PxMessagingTask+0xf98>
 800a6ee:	e10b      	b.n	800a908 <PxMessagingTask+0x11b0>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a6f0:	2b1e      	cmp	r3, #30
 800a6f2:	d900      	bls.n	800a6f6 <PxMessagingTask+0xf9e>
 800a6f4:	e104      	b.n	800a900 <PxMessagingTask+0x11a8>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a6f6:	1e5c      	subs	r4, r3, #1
 800a6f8:	00a2      	lsls	r2, r4, #2
 800a6fa:	4bc9      	ldr	r3, [pc, #804]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a6fc:	58d1      	ldr	r1, [r2, r3]
 800a6fe:	0c0b      	lsrs	r3, r1, #16
 800a700:	2280      	movs	r2, #128	; 0x80
 800a702:	0592      	lsls	r2, r2, #22
 800a704:	4694      	mov	ip, r2
 800a706:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a708:	464a      	mov	r2, r9
 800a70a:	1c57      	adds	r7, r2, #1
 800a70c:	2038      	movs	r0, #56	; 0x38
 800a70e:	4368      	muls	r0, r5
 800a710:	4ac1      	ldr	r2, [pc, #772]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a712:	1812      	adds	r2, r2, r0
 800a714:	5dd2      	ldrb	r2, [r2, r7]
 800a716:	4693      	mov	fp, r2
 800a718:	3a01      	subs	r2, #1
 800a71a:	b2d0      	uxtb	r0, r2
 800a71c:	2807      	cmp	r0, #7
 800a71e:	d81b      	bhi.n	800a758 <PxMessagingTask+0x1000>
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	48bf      	ldr	r0, [pc, #764]	; (800aa24 <PxMessagingTask+0x12cc>)
 800a726:	5882      	ldr	r2, [r0, r2]
 800a728:	4697      	mov	pc, r2
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a72a:	070a      	lsls	r2, r1, #28
 800a72c:	d109      	bne.n	800a742 <PxMessagingTask+0xfea>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a72e:	2001      	movs	r0, #1
 800a730:	f008 f930 	bl	8012994 <malloc>
 800a734:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a736:	d00c      	beq.n	800a752 <PxMessagingTask+0xffa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a738:	00a4      	lsls	r4, r4, #2
 800a73a:	0400      	lsls	r0, r0, #16
 800a73c:	4458      	add	r0, fp
 800a73e:	4ab8      	ldr	r2, [pc, #736]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a740:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a742:	2138      	movs	r1, #56	; 0x38
 800a744:	4369      	muls	r1, r5
 800a746:	4ab4      	ldr	r2, [pc, #720]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a748:	1852      	adds	r2, r2, r1
 800a74a:	444a      	add	r2, r9
 800a74c:	7892      	ldrb	r2, [r2, #2]
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e002      	b.n	800a758 <PxMessagingTask+0x1000>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a752:	4bb2      	ldr	r3, [pc, #712]	; (800aa1c <PxMessagingTask+0x12c4>)
 800a754:	2212      	movs	r2, #18
 800a756:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a758:	2338      	movs	r3, #56	; 0x38
 800a75a:	436b      	muls	r3, r5
 800a75c:	4aae      	ldr	r2, [pc, #696]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a75e:	18d2      	adds	r2, r2, r3
 800a760:	464b      	mov	r3, r9
 800a762:	5cd3      	ldrb	r3, [r2, r3]
 800a764:	3b01      	subs	r3, #1
 800a766:	0098      	lsls	r0, r3, #2
 800a768:	49ad      	ldr	r1, [pc, #692]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a76a:	5841      	ldr	r1, [r0, r1]
 800a76c:	5dd2      	ldrb	r2, [r2, r7]
 800a76e:	200f      	movs	r0, #15
 800a770:	4008      	ands	r0, r1
 800a772:	4290      	cmp	r0, r2
 800a774:	d009      	beq.n	800a78a <PxMessagingTask+0x1032>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	48ab      	ldr	r0, [pc, #684]	; (800aa28 <PxMessagingTask+0x12d0>)
 800a77a:	4684      	mov	ip, r0
 800a77c:	4462      	add	r2, ip
 800a77e:	400a      	ands	r2, r1
 800a780:	49a7      	ldr	r1, [pc, #668]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a782:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a784:	4ba5      	ldr	r3, [pc, #660]	; (800aa1c <PxMessagingTask+0x12c4>)
 800a786:	2214      	movs	r2, #20
 800a788:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a78a:	4ba8      	ldr	r3, [pc, #672]	; (800aa2c <PxMessagingTask+0x12d4>)
 800a78c:	799b      	ldrb	r3, [r3, #6]
 800a78e:	2240      	movs	r2, #64	; 0x40
 800a790:	4393      	bics	r3, r2
 800a792:	2200      	movs	r2, #0
 800a794:	4691      	mov	r9, r2
 800a796:	2b20      	cmp	r3, #32
 800a798:	d001      	beq.n	800a79e <PxMessagingTask+0x1046>
 800a79a:	f7ff f80c 	bl	80097b6 <PxMessagingTask+0x5e>
								messageParams[0] = responseStatus;
 800a79e:	4b9f      	ldr	r3, [pc, #636]	; (800aa1c <PxMessagingTask+0x12c4>)
 800a7a0:	781a      	ldrb	r2, [r3, #0]
 800a7a2:	4ba3      	ldr	r3, [pc, #652]	; (800aa30 <PxMessagingTask+0x12d8>)
 800a7a4:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	2121      	movs	r1, #33	; 0x21
 800a7aa:	9804      	ldr	r0, [sp, #16]
 800a7ac:	f7fe fd10 	bl	80091d0 <SendMessageToModule>
 800a7b0:	f7ff f801 	bl	80097b6 <PxMessagingTask+0x5e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a7b4:	070a      	lsls	r2, r1, #28
 800a7b6:	d10a      	bne.n	800a7ce <PxMessagingTask+0x1076>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f008 f8eb 	bl	8012994 <malloc>
 800a7be:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a7c0:	d100      	bne.n	800a7c4 <PxMessagingTask+0x106c>
 800a7c2:	e29c      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a7c4:	00a4      	lsls	r4, r4, #2
 800a7c6:	0400      	lsls	r0, r0, #16
 800a7c8:	3002      	adds	r0, #2
 800a7ca:	4a95      	ldr	r2, [pc, #596]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a7cc:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a7ce:	2138      	movs	r1, #56	; 0x38
 800a7d0:	4369      	muls	r1, r5
 800a7d2:	4a91      	ldr	r2, [pc, #580]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a7d4:	1852      	adds	r2, r2, r1
 800a7d6:	444a      	add	r2, r9
 800a7d8:	7892      	ldrb	r2, [r2, #2]
 800a7da:	b252      	sxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	e7bb      	b.n	800a758 <PxMessagingTask+0x1000>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a7e0:	070a      	lsls	r2, r1, #28
 800a7e2:	d10a      	bne.n	800a7fa <PxMessagingTask+0x10a2>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a7e4:	2002      	movs	r0, #2
 800a7e6:	f008 f8d5 	bl	8012994 <malloc>
 800a7ea:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a7ec:	d100      	bne.n	800a7f0 <PxMessagingTask+0x1098>
 800a7ee:	e286      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a7f0:	00a4      	lsls	r4, r4, #2
 800a7f2:	0400      	lsls	r0, r0, #16
 800a7f4:	3003      	adds	r0, #3
 800a7f6:	4a8a      	ldr	r2, [pc, #552]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a7f8:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a7fa:	2138      	movs	r1, #56	; 0x38
 800a7fc:	4369      	muls	r1, r5
 800a7fe:	4a86      	ldr	r2, [pc, #536]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a800:	1852      	adds	r2, r2, r1
 800a802:	444a      	add	r2, r9
 800a804:	78d1      	ldrb	r1, [r2, #3]
 800a806:	0209      	lsls	r1, r1, #8
 800a808:	7892      	ldrb	r2, [r2, #2]
 800a80a:	1852      	adds	r2, r2, r1
 800a80c:	b292      	uxth	r2, r2
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	e7a2      	b.n	800a758 <PxMessagingTask+0x1000>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a812:	070a      	lsls	r2, r1, #28
 800a814:	d10a      	bne.n	800a82c <PxMessagingTask+0x10d4>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800a816:	2002      	movs	r0, #2
 800a818:	f008 f8bc 	bl	8012994 <malloc>
 800a81c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a81e:	d100      	bne.n	800a822 <PxMessagingTask+0x10ca>
 800a820:	e26d      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a822:	00a4      	lsls	r4, r4, #2
 800a824:	0400      	lsls	r0, r0, #16
 800a826:	3004      	adds	r0, #4
 800a828:	4a7d      	ldr	r2, [pc, #500]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a82a:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800a82c:	2138      	movs	r1, #56	; 0x38
 800a82e:	4369      	muls	r1, r5
 800a830:	4a79      	ldr	r2, [pc, #484]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a832:	1852      	adds	r2, r2, r1
 800a834:	444a      	add	r2, r9
 800a836:	78d1      	ldrb	r1, [r2, #3]
 800a838:	0209      	lsls	r1, r1, #8
 800a83a:	7892      	ldrb	r2, [r2, #2]
 800a83c:	1852      	adds	r2, r2, r1
 800a83e:	b212      	sxth	r2, r2
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	e789      	b.n	800a758 <PxMessagingTask+0x1000>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a844:	070a      	lsls	r2, r1, #28
 800a846:	d10a      	bne.n	800a85e <PxMessagingTask+0x1106>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800a848:	2004      	movs	r0, #4
 800a84a:	f008 f8a3 	bl	8012994 <malloc>
 800a84e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a850:	d100      	bne.n	800a854 <PxMessagingTask+0x10fc>
 800a852:	e254      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a854:	00a4      	lsls	r4, r4, #2
 800a856:	0400      	lsls	r0, r0, #16
 800a858:	3005      	adds	r0, #5
 800a85a:	4a71      	ldr	r2, [pc, #452]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a85c:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800a85e:	2238      	movs	r2, #56	; 0x38
 800a860:	436a      	muls	r2, r5
 800a862:	496d      	ldr	r1, [pc, #436]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a864:	1889      	adds	r1, r1, r2
 800a866:	4449      	add	r1, r9
 800a868:	78ca      	ldrb	r2, [r1, #3]
 800a86a:	0212      	lsls	r2, r2, #8
 800a86c:	7908      	ldrb	r0, [r1, #4]
 800a86e:	0400      	lsls	r0, r0, #16
 800a870:	1812      	adds	r2, r2, r0
 800a872:	7888      	ldrb	r0, [r1, #2]
 800a874:	1812      	adds	r2, r2, r0
 800a876:	7949      	ldrb	r1, [r1, #5]
 800a878:	0609      	lsls	r1, r1, #24
 800a87a:	1852      	adds	r2, r2, r1
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e76b      	b.n	800a758 <PxMessagingTask+0x1000>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a880:	070a      	lsls	r2, r1, #28
 800a882:	d10a      	bne.n	800a89a <PxMessagingTask+0x1142>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800a884:	2004      	movs	r0, #4
 800a886:	f008 f885 	bl	8012994 <malloc>
 800a88a:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a88c:	d100      	bne.n	800a890 <PxMessagingTask+0x1138>
 800a88e:	e236      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a890:	00a4      	lsls	r4, r4, #2
 800a892:	0400      	lsls	r0, r0, #16
 800a894:	3006      	adds	r0, #6
 800a896:	4a62      	ldr	r2, [pc, #392]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a898:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800a89a:	2238      	movs	r2, #56	; 0x38
 800a89c:	436a      	muls	r2, r5
 800a89e:	495e      	ldr	r1, [pc, #376]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a8a0:	1889      	adds	r1, r1, r2
 800a8a2:	4449      	add	r1, r9
 800a8a4:	78ca      	ldrb	r2, [r1, #3]
 800a8a6:	0212      	lsls	r2, r2, #8
 800a8a8:	7888      	ldrb	r0, [r1, #2]
 800a8aa:	1812      	adds	r2, r2, r0
 800a8ac:	7908      	ldrb	r0, [r1, #4]
 800a8ae:	0400      	lsls	r0, r0, #16
 800a8b0:	1812      	adds	r2, r2, r0
 800a8b2:	7949      	ldrb	r1, [r1, #5]
 800a8b4:	0609      	lsls	r1, r1, #24
 800a8b6:	1852      	adds	r2, r2, r1
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e74d      	b.n	800a758 <PxMessagingTask+0x1000>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a8bc:	070a      	lsls	r2, r1, #28
 800a8be:	d10a      	bne.n	800a8d6 <PxMessagingTask+0x117e>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800a8c0:	2004      	movs	r0, #4
 800a8c2:	f008 f867 	bl	8012994 <malloc>
 800a8c6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a8c8:	d100      	bne.n	800a8cc <PxMessagingTask+0x1174>
 800a8ca:	e218      	b.n	800acfe <PxMessagingTask+0x15a6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a8cc:	00a4      	lsls	r4, r4, #2
 800a8ce:	0400      	lsls	r0, r0, #16
 800a8d0:	3007      	adds	r0, #7
 800a8d2:	4a53      	ldr	r2, [pc, #332]	; (800aa20 <PxMessagingTask+0x12c8>)
 800a8d4:	50a0      	str	r0, [r4, r2]
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800a8d6:	2238      	movs	r2, #56	; 0x38
 800a8d8:	436a      	muls	r2, r5
 800a8da:	494f      	ldr	r1, [pc, #316]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a8dc:	1889      	adds	r1, r1, r2
 800a8de:	4449      	add	r1, r9
 800a8e0:	78ca      	ldrb	r2, [r1, #3]
 800a8e2:	0212      	lsls	r2, r2, #8
 800a8e4:	7908      	ldrb	r0, [r1, #4]
 800a8e6:	0400      	lsls	r0, r0, #16
 800a8e8:	1812      	adds	r2, r2, r0
 800a8ea:	7888      	ldrb	r0, [r1, #2]
 800a8ec:	1812      	adds	r2, r2, r0
 800a8ee:	7949      	ldrb	r1, [r1, #5]
 800a8f0:	0609      	lsls	r1, r1, #24
 800a8f2:	1852      	adds	r2, r2, r1
 800a8f4:	4947      	ldr	r1, [pc, #284]	; (800aa14 <PxMessagingTask+0x12bc>)
 800a8f6:	600a      	str	r2, [r1, #0]
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e72b      	b.n	800a758 <PxMessagingTask+0x1000>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800a900:	4b46      	ldr	r3, [pc, #280]	; (800aa1c <PxMessagingTask+0x12c4>)
 800a902:	2213      	movs	r2, #19
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	e740      	b.n	800a78a <PxMessagingTask+0x1032>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a908:	2238      	movs	r2, #56	; 0x38
 800a90a:	436a      	muls	r2, r5
 800a90c:	4b42      	ldr	r3, [pc, #264]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	191b      	adds	r3, r3, r4
 800a912:	789c      	ldrb	r4, [r3, #2]
 800a914:	0624      	lsls	r4, r4, #24
 800a916:	78da      	ldrb	r2, [r3, #3]
 800a918:	0412      	lsls	r2, r2, #16
 800a91a:	18a4      	adds	r4, r4, r2
 800a91c:	795a      	ldrb	r2, [r3, #5]
 800a91e:	18a4      	adds	r4, r4, r2
 800a920:	791b      	ldrb	r3, [r3, #4]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	18e4      	adds	r4, r4, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800a926:	23e0      	movs	r3, #224	; 0xe0
 800a928:	061b      	lsls	r3, r3, #24
 800a92a:	18e2      	adds	r2, r4, r3
 800a92c:	4b41      	ldr	r3, [pc, #260]	; (800aa34 <PxMessagingTask+0x12dc>)
 800a92e:	429a      	cmp	r2, r3
 800a930:	d900      	bls.n	800a934 <PxMessagingTask+0x11dc>
 800a932:	e083      	b.n	800aa3c <PxMessagingTask+0x12e4>
									switch (cMessage[port-1][1+shift])															// Requested format
 800a934:	2238      	movs	r2, #56	; 0x38
 800a936:	436a      	muls	r2, r5
 800a938:	4b37      	ldr	r3, [pc, #220]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	444b      	add	r3, r9
 800a93e:	785b      	ldrb	r3, [r3, #1]
 800a940:	3b01      	subs	r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	2a07      	cmp	r2, #7
 800a946:	d900      	bls.n	800a94a <PxMessagingTask+0x11f2>
 800a948:	e71f      	b.n	800a78a <PxMessagingTask+0x1032>
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4a3a      	ldr	r2, [pc, #232]	; (800aa38 <PxMessagingTask+0x12e0>)
 800a950:	58d3      	ldr	r3, [r2, r3]
 800a952:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800a954:	2238      	movs	r2, #56	; 0x38
 800a956:	436a      	muls	r2, r5
 800a958:	4b2f      	ldr	r3, [pc, #188]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a95a:	189b      	adds	r3, r3, r2
 800a95c:	444b      	add	r3, r9
 800a95e:	799b      	ldrb	r3, [r3, #6]
 800a960:	7023      	strb	r3, [r4, #0]
 800a962:	e712      	b.n	800a78a <PxMessagingTask+0x1032>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800a964:	2238      	movs	r2, #56	; 0x38
 800a966:	436a      	muls	r2, r5
 800a968:	4b2b      	ldr	r3, [pc, #172]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a96a:	189b      	adds	r3, r3, r2
 800a96c:	444b      	add	r3, r9
 800a96e:	799b      	ldrb	r3, [r3, #6]
 800a970:	b25b      	sxtb	r3, r3
 800a972:	7023      	strb	r3, [r4, #0]
 800a974:	e709      	b.n	800a78a <PxMessagingTask+0x1032>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800a976:	2238      	movs	r2, #56	; 0x38
 800a978:	436a      	muls	r2, r5
 800a97a:	4b27      	ldr	r3, [pc, #156]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a97c:	189b      	adds	r3, r3, r2
 800a97e:	444b      	add	r3, r9
 800a980:	79da      	ldrb	r2, [r3, #7]
 800a982:	0212      	lsls	r2, r2, #8
 800a984:	799b      	ldrb	r3, [r3, #6]
 800a986:	189b      	adds	r3, r3, r2
 800a988:	b29b      	uxth	r3, r3
 800a98a:	8023      	strh	r3, [r4, #0]
 800a98c:	e6fd      	b.n	800a78a <PxMessagingTask+0x1032>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800a98e:	2238      	movs	r2, #56	; 0x38
 800a990:	436a      	muls	r2, r5
 800a992:	4b21      	ldr	r3, [pc, #132]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a994:	189b      	adds	r3, r3, r2
 800a996:	444b      	add	r3, r9
 800a998:	79da      	ldrb	r2, [r3, #7]
 800a99a:	0212      	lsls	r2, r2, #8
 800a99c:	799b      	ldrb	r3, [r3, #6]
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	b21b      	sxth	r3, r3
 800a9a2:	8023      	strh	r3, [r4, #0]
 800a9a4:	e6f1      	b.n	800a78a <PxMessagingTask+0x1032>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800a9a6:	2338      	movs	r3, #56	; 0x38
 800a9a8:	436b      	muls	r3, r5
 800a9aa:	4a1b      	ldr	r2, [pc, #108]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a9ac:	18d2      	adds	r2, r2, r3
 800a9ae:	444a      	add	r2, r9
 800a9b0:	79d3      	ldrb	r3, [r2, #7]
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	7a11      	ldrb	r1, [r2, #8]
 800a9b6:	0409      	lsls	r1, r1, #16
 800a9b8:	185b      	adds	r3, r3, r1
 800a9ba:	7991      	ldrb	r1, [r2, #6]
 800a9bc:	185b      	adds	r3, r3, r1
 800a9be:	7a52      	ldrb	r2, [r2, #9]
 800a9c0:	0612      	lsls	r2, r2, #24
 800a9c2:	189b      	adds	r3, r3, r2
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	e6e0      	b.n	800a78a <PxMessagingTask+0x1032>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a9c8:	2338      	movs	r3, #56	; 0x38
 800a9ca:	436b      	muls	r3, r5
 800a9cc:	4a12      	ldr	r2, [pc, #72]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a9ce:	18d2      	adds	r2, r2, r3
 800a9d0:	444a      	add	r2, r9
 800a9d2:	79d3      	ldrb	r3, [r2, #7]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	7991      	ldrb	r1, [r2, #6]
 800a9d8:	185b      	adds	r3, r3, r1
 800a9da:	7a11      	ldrb	r1, [r2, #8]
 800a9dc:	0409      	lsls	r1, r1, #16
 800a9de:	185b      	adds	r3, r3, r1
 800a9e0:	7a52      	ldrb	r2, [r2, #9]
 800a9e2:	0612      	lsls	r2, r2, #24
 800a9e4:	189b      	adds	r3, r3, r2
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	e6cf      	b.n	800a78a <PxMessagingTask+0x1032>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a9ea:	2338      	movs	r3, #56	; 0x38
 800a9ec:	436b      	muls	r3, r5
 800a9ee:	4a0a      	ldr	r2, [pc, #40]	; (800aa18 <PxMessagingTask+0x12c0>)
 800a9f0:	18d2      	adds	r2, r2, r3
 800a9f2:	444a      	add	r2, r9
 800a9f4:	79d3      	ldrb	r3, [r2, #7]
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	7a11      	ldrb	r1, [r2, #8]
 800a9fa:	0409      	lsls	r1, r1, #16
 800a9fc:	185b      	adds	r3, r3, r1
 800a9fe:	7991      	ldrb	r1, [r2, #6]
 800aa00:	185b      	adds	r3, r3, r1
 800aa02:	7a52      	ldrb	r2, [r2, #9]
 800aa04:	0612      	lsls	r2, r2, #24
 800aa06:	189b      	adds	r3, r3, r2
 800aa08:	4a02      	ldr	r2, [pc, #8]	; (800aa14 <PxMessagingTask+0x12bc>)
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	e6ba      	b.n	800a78a <PxMessagingTask+0x1032>
 800aa14:	200010a8 	.word	0x200010a8
 800aa18:	20000cf0 	.word	0x20000cf0
 800aa1c:	200010b0 	.word	0x200010b0
 800aa20:	20006820 	.word	0x20006820
 800aa24:	08019f78 	.word	0x08019f78
 800aa28:	0000fff0 	.word	0x0000fff0
 800aa2c:	20006898 	.word	0x20006898
 800aa30:	20000ee8 	.word	0x20000ee8
 800aa34:	00007fff 	.word	0x00007fff
 800aa38:	08019f98 	.word	0x08019f98
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800aa3c:	4ab8      	ldr	r2, [pc, #736]	; (800ad20 <PxMessagingTask+0x15c8>)
 800aa3e:	23f8      	movs	r3, #248	; 0xf8
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	18e3      	adds	r3, r4, r3
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d900      	bls.n	800aa4a <PxMessagingTask+0x12f2>
 800aa48:	e0a6      	b.n	800ab98 <PxMessagingTask+0x1440>
									HAL_FLASH_Unlock();
 800aa4a:	f005 fc7d 	bl	8010348 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800aa4e:	2f22      	cmp	r7, #34	; 0x22
 800aa50:	d111      	bne.n	800aa76 <PxMessagingTask+0x131e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aa52:	2300      	movs	r3, #0
 800aa54:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800aa56:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800aa58:	3301      	adds	r3, #1
 800aa5a:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800aa5c:	a912      	add	r1, sp, #72	; 0x48
 800aa5e:	a813      	add	r0, sp, #76	; 0x4c
 800aa60:	f005 fd46 	bl	80104f0 <HAL_FLASHEx_Erase>
 800aa64:	900a      	str	r0, [sp, #40]	; 0x28
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d102      	bne.n	800aa70 <PxMessagingTask+0x1318>
 800aa6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	d002      	beq.n	800aa76 <PxMessagingTask+0x131e>
 800aa70:	4bac      	ldr	r3, [pc, #688]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aa72:	2216      	movs	r2, #22
 800aa74:	701a      	strb	r2, [r3, #0]
									if (responseStatus == BOS_OK)
 800aa76:	4bab      	ldr	r3, [pc, #684]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d116      	bne.n	800aaac <PxMessagingTask+0x1354>
										switch (cMessage[port-1][1+shift])															// Requested format
 800aa7e:	2238      	movs	r2, #56	; 0x38
 800aa80:	436a      	muls	r2, r5
 800aa82:	4ba9      	ldr	r3, [pc, #676]	; (800ad28 <PxMessagingTask+0x15d0>)
 800aa84:	189b      	adds	r3, r3, r2
 800aa86:	444b      	add	r3, r9
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	2a07      	cmp	r2, #7
 800aa90:	d80c      	bhi.n	800aaac <PxMessagingTask+0x1354>
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4aa5      	ldr	r2, [pc, #660]	; (800ad2c <PxMessagingTask+0x15d4>)
 800aa98:	58d3      	ldr	r3, [r2, r3]
 800aa9a:	469f      	mov	pc, r3
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800aa9c:	8823      	ldrh	r3, [r4, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4aa3      	ldr	r2, [pc, #652]	; (800ad30 <PxMessagingTask+0x15d8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00c      	beq.n	800aac0 <PxMessagingTask+0x1368>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800aaa6:	4b9f      	ldr	r3, [pc, #636]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aaa8:	2216      	movs	r2, #22
 800aaaa:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800aaac:	f005 fc5e 	bl	801036c <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d100      	bne.n	800aab8 <PxMessagingTask+0x1360>
 800aab6:	e668      	b.n	800a78a <PxMessagingTask+0x1032>
 800aab8:	4b9a      	ldr	r3, [pc, #616]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aaba:	2216      	movs	r2, #22
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	e664      	b.n	800a78a <PxMessagingTask+0x1032>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800aac0:	2238      	movs	r2, #56	; 0x38
 800aac2:	436a      	muls	r2, r5
 800aac4:	4b98      	ldr	r3, [pc, #608]	; (800ad28 <PxMessagingTask+0x15d0>)
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	444b      	add	r3, r9
 800aaca:	799a      	ldrb	r2, [r3, #6]
 800aacc:	2300      	movs	r3, #0
 800aace:	4999      	ldr	r1, [pc, #612]	; (800ad34 <PxMessagingTask+0x15dc>)
 800aad0:	600a      	str	r2, [r1, #0]
 800aad2:	604b      	str	r3, [r1, #4]
 800aad4:	0021      	movs	r1, r4
 800aad6:	2001      	movs	r0, #1
 800aad8:	f005 fc80 	bl	80103dc <HAL_FLASH_Program>
 800aadc:	900a      	str	r0, [sp, #40]	; 0x28
 800aade:	e7e5      	b.n	800aaac <PxMessagingTask+0x1354>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800aae0:	8823      	ldrh	r3, [r4, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	4a92      	ldr	r2, [pc, #584]	; (800ad30 <PxMessagingTask+0x15d8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d003      	beq.n	800aaf2 <PxMessagingTask+0x139a>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800aaea:	4b8e      	ldr	r3, [pc, #568]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aaec:	2216      	movs	r2, #22
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e7dc      	b.n	800aaac <PxMessagingTask+0x1354>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800aaf2:	2238      	movs	r2, #56	; 0x38
 800aaf4:	436a      	muls	r2, r5
 800aaf6:	4b8c      	ldr	r3, [pc, #560]	; (800ad28 <PxMessagingTask+0x15d0>)
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	444b      	add	r3, r9
 800aafc:	79da      	ldrb	r2, [r3, #7]
 800aafe:	0212      	lsls	r2, r2, #8
 800ab00:	799b      	ldrb	r3, [r3, #6]
 800ab02:	18d2      	adds	r2, r2, r3
 800ab04:	17d3      	asrs	r3, r2, #31
 800ab06:	498b      	ldr	r1, [pc, #556]	; (800ad34 <PxMessagingTask+0x15dc>)
 800ab08:	600a      	str	r2, [r1, #0]
 800ab0a:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800ab0c:	0021      	movs	r1, r4
 800ab0e:	2001      	movs	r0, #1
 800ab10:	f005 fc64 	bl	80103dc <HAL_FLASH_Program>
 800ab14:	900a      	str	r0, [sp, #40]	; 0x28
 800ab16:	e7c9      	b.n	800aaac <PxMessagingTask+0x1354>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	d003      	beq.n	800ab26 <PxMessagingTask+0x13ce>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ab1e:	4b81      	ldr	r3, [pc, #516]	; (800ad24 <PxMessagingTask+0x15cc>)
 800ab20:	2216      	movs	r2, #22
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e7c2      	b.n	800aaac <PxMessagingTask+0x1354>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800ab26:	2238      	movs	r2, #56	; 0x38
 800ab28:	436a      	muls	r2, r5
 800ab2a:	4b7f      	ldr	r3, [pc, #508]	; (800ad28 <PxMessagingTask+0x15d0>)
 800ab2c:	189b      	adds	r3, r3, r2
 800ab2e:	444b      	add	r3, r9
 800ab30:	79da      	ldrb	r2, [r3, #7]
 800ab32:	0212      	lsls	r2, r2, #8
 800ab34:	7a19      	ldrb	r1, [r3, #8]
 800ab36:	0409      	lsls	r1, r1, #16
 800ab38:	1852      	adds	r2, r2, r1
 800ab3a:	7999      	ldrb	r1, [r3, #6]
 800ab3c:	1852      	adds	r2, r2, r1
 800ab3e:	7a5b      	ldrb	r3, [r3, #9]
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	18d2      	adds	r2, r2, r3
 800ab44:	2300      	movs	r3, #0
 800ab46:	497b      	ldr	r1, [pc, #492]	; (800ad34 <PxMessagingTask+0x15dc>)
 800ab48:	600a      	str	r2, [r1, #0]
 800ab4a:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800ab4c:	0021      	movs	r1, r4
 800ab4e:	2002      	movs	r0, #2
 800ab50:	f005 fc44 	bl	80103dc <HAL_FLASH_Program>
 800ab54:	900a      	str	r0, [sp, #40]	; 0x28
 800ab56:	e7a9      	b.n	800aaac <PxMessagingTask+0x1354>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	d003      	beq.n	800ab66 <PxMessagingTask+0x140e>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ab5e:	4b71      	ldr	r3, [pc, #452]	; (800ad24 <PxMessagingTask+0x15cc>)
 800ab60:	2216      	movs	r2, #22
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e7a2      	b.n	800aaac <PxMessagingTask+0x1354>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800ab66:	2238      	movs	r2, #56	; 0x38
 800ab68:	436a      	muls	r2, r5
 800ab6a:	4b6f      	ldr	r3, [pc, #444]	; (800ad28 <PxMessagingTask+0x15d0>)
 800ab6c:	189b      	adds	r3, r3, r2
 800ab6e:	444b      	add	r3, r9
 800ab70:	79da      	ldrb	r2, [r3, #7]
 800ab72:	0212      	lsls	r2, r2, #8
 800ab74:	7a19      	ldrb	r1, [r3, #8]
 800ab76:	0409      	lsls	r1, r1, #16
 800ab78:	1852      	adds	r2, r2, r1
 800ab7a:	7999      	ldrb	r1, [r3, #6]
 800ab7c:	1852      	adds	r2, r2, r1
 800ab7e:	7a5b      	ldrb	r3, [r3, #9]
 800ab80:	061b      	lsls	r3, r3, #24
 800ab82:	18d2      	adds	r2, r2, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	496b      	ldr	r1, [pc, #428]	; (800ad34 <PxMessagingTask+0x15dc>)
 800ab88:	600a      	str	r2, [r1, #0]
 800ab8a:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800ab8c:	0021      	movs	r1, r4
 800ab8e:	2003      	movs	r0, #3
 800ab90:	f005 fc24 	bl	80103dc <HAL_FLASH_Program>
 800ab94:	900a      	str	r0, [sp, #40]	; 0x28
 800ab96:	e789      	b.n	800aaac <PxMessagingTask+0x1354>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ab98:	4b62      	ldr	r3, [pc, #392]	; (800ad24 <PxMessagingTask+0x15cc>)
 800ab9a:	2215      	movs	r2, #21
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	e5f4      	b.n	800a78a <PxMessagingTask+0x1032>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800aba0:	4b61      	ldr	r3, [pc, #388]	; (800ad28 <PxMessagingTask+0x15d0>)
 800aba2:	199b      	adds	r3, r3, r6
 800aba4:	5d1a      	ldrb	r2, [r3, r4]
 800aba6:	4b5f      	ldr	r3, [pc, #380]	; (800ad24 <PxMessagingTask+0x15cc>)
 800aba8:	701a      	strb	r2, [r3, #0]
							break;	
 800abaa:	2300      	movs	r3, #0
 800abac:	4699      	mov	r9, r3
 800abae:	f7fe fe02 	bl	80097b6 <PxMessagingTask+0x5e>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800abb2:	9a06      	ldr	r2, [sp, #24]
 800abb4:	3a01      	subs	r2, #1
 800abb6:	b292      	uxth	r2, r2
 800abb8:	1c61      	adds	r1, r4, #1
 800abba:	4451      	add	r1, sl
 800abbc:	4b5a      	ldr	r3, [pc, #360]	; (800ad28 <PxMessagingTask+0x15d0>)
 800abbe:	18c9      	adds	r1, r1, r3
 800abc0:	199b      	adds	r3, r3, r6
 800abc2:	5d18      	ldrb	r0, [r3, r4]
 800abc4:	230a      	movs	r3, #10
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	f002 fba8 	bl	800d31c <writePxMutex>
							break;
 800abcc:	2300      	movs	r3, #0
 800abce:	4699      	mov	r9, r3
 800abd0:	f7fe fdf1 	bl	80097b6 <PxMessagingTask+0x5e>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800abd4:	9400      	str	r4, [sp, #0]
 800abd6:	465b      	mov	r3, fp
 800abd8:	9a04      	ldr	r2, [sp, #16]
 800abda:	9908      	ldr	r1, [sp, #32]
 800abdc:	0038      	movs	r0, r7
 800abde:	f7fe fdb9 	bl	8009754 <User_MessagingParser>
 800abe2:	4681      	mov	r9, r0
							if (result == BOS_ERR_UnknownMessage) {
 800abe4:	2801      	cmp	r0, #1
 800abe6:	d001      	beq.n	800abec <PxMessagingTask+0x1494>
 800abe8:	f7fe fde5 	bl	80097b6 <PxMessagingTask+0x5e>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800abec:	9400      	str	r4, [sp, #0]
 800abee:	465b      	mov	r3, fp
 800abf0:	9a04      	ldr	r2, [sp, #16]
 800abf2:	9908      	ldr	r1, [sp, #32]
 800abf4:	0038      	movs	r0, r7
 800abf6:	f000 fccd 	bl	800b594 <Module_MessagingTask>
 800abfa:	4681      	mov	r9, r0
 800abfc:	f7fe fdd6 	bl	80097ac <PxMessagingTask+0x54>
									switch (cMessage[port-1][1+shift])											// requested format
 800ac00:	2300      	movs	r3, #0
 800ac02:	4699      	mov	r9, r3
 800ac04:	f7fe fdd2 	bl	80097ac <PxMessagingTask+0x54>
									switch (messageParams[0])											// requested format
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	f7fe fdce 	bl	80097ac <PxMessagingTask+0x54>
										switch (messageParams[0])											// requested format
 800ac10:	2300      	movs	r3, #0
 800ac12:	4699      	mov	r9, r3
 800ac14:	f7fe fdca 	bl	80097ac <PxMessagingTask+0x54>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	9804      	ldr	r0, [sp, #16]
 800ac1e:	f7fe fad7 	bl	80091d0 <SendMessageToModule>
			result = BOS_OK;			
 800ac22:	2300      	movs	r3, #0
 800ac24:	4699      	mov	r9, r3
 800ac26:	f7fe fdc6 	bl	80097b6 <PxMessagingTask+0x5e>
					switch (code)
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4699      	mov	r9, r3
 800ac2e:	f7fe fdc2 	bl	80097b6 <PxMessagingTask+0x5e>
					result = BOS_ERR_MSG_Reflection;
 800ac32:	2303      	movs	r3, #3
 800ac34:	4699      	mov	r9, r3
 800ac36:	f7fe fe4b 	bl	80098d0 <PxMessagingTask+0x178>
 800ac3a:	9205      	str	r2, [sp, #20]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4699      	mov	r9, r3
 800ac40:	f7fe fdb9 	bl	80097b6 <PxMessagingTask+0x5e>
 800ac44:	2300      	movs	r3, #0
 800ac46:	4699      	mov	r9, r3
 800ac48:	f7fe fdb5 	bl	80097b6 <PxMessagingTask+0x5e>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800ac4c:	455b      	cmp	r3, fp
 800ac4e:	d003      	beq.n	800ac58 <PxMessagingTask+0x1500>
 800ac50:	2f10      	cmp	r7, #16
 800ac52:	d001      	beq.n	800ac58 <PxMessagingTask+0x1500>
 800ac54:	f7fe fe00 	bl	8009858 <PxMessagingTask+0x100>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ac58:	465b      	mov	r3, fp
 800ac5a:	2bff      	cmp	r3, #255	; 0xff
 800ac5c:	d101      	bne.n	800ac62 <PxMessagingTask+0x150a>
 800ac5e:	f7fe fe1c 	bl	800989a <PxMessagingTask+0x142>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ac62:	2bfe      	cmp	r3, #254	; 0xfe
 800ac64:	d001      	beq.n	800ac6a <PxMessagingTask+0x1512>
 800ac66:	f7fe fe33 	bl	80098d0 <PxMessagingTask+0x178>
 800ac6a:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <PxMessagingTask+0x15d0>)
 800ac6c:	199b      	adds	r3, r3, r6
 800ac6e:	1859      	adds	r1, r3, r1
 800ac70:	3901      	subs	r1, #1
 800ac72:	780b      	ldrb	r3, [r1, #0]
 800ac74:	4a30      	ldr	r2, [pc, #192]	; (800ad38 <PxMessagingTask+0x15e0>)
 800ac76:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 800ac78:	2103      	movs	r1, #3
 800ac7a:	4689      	mov	r9, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d101      	bne.n	800ac84 <PxMessagingTask+0x152c>
 800ac80:	f7fe fd94 	bl	80097ac <PxMessagingTask+0x54>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800ac84:	4a2c      	ldr	r2, [pc, #176]	; (800ad38 <PxMessagingTask+0x15e0>)
 800ac86:	7013      	strb	r3, [r2, #0]
 800ac88:	4a2c      	ldr	r2, [pc, #176]	; (800ad3c <PxMessagingTask+0x15e4>)
 800ac8a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800ac8c:	9908      	ldr	r1, [sp, #32]
 800ac8e:	20fe      	movs	r0, #254	; 0xfe
 800ac90:	f7fe fa56 	bl	8009140 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800ac94:	4b2a      	ldr	r3, [pc, #168]	; (800ad40 <PxMessagingTask+0x15e8>)
 800ac96:	5d59      	ldrb	r1, [r3, r5]
 800ac98:	4b23      	ldr	r3, [pc, #140]	; (800ad28 <PxMessagingTask+0x15d0>)
 800ac9a:	199b      	adds	r3, r3, r6
 800ac9c:	185a      	adds	r2, r3, r1
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	2000      	movs	r0, #0
 800aca2:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800aca4:	1e8a      	subs	r2, r1, #2
 800aca6:	5c9b      	ldrb	r3, [r3, r2]
 800aca8:	9305      	str	r3, [sp, #20]
					for(i=0 ; i<temp ; i++)
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d033      	beq.n	800ad16 <PxMessagingTask+0x15be>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800acae:	1ad2      	subs	r2, r2, r3
 800acb0:	4691      	mov	r9, r2
 800acb2:	4b24      	ldr	r3, [pc, #144]	; (800ad44 <PxMessagingTask+0x15ec>)
 800acb4:	7818      	ldrb	r0, [r3, #0]
 800acb6:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <PxMessagingTask+0x15d0>)
 800acb8:	199b      	adds	r3, r3, r6
 800acba:	5c9b      	ldrb	r3, [r3, r2]
 800acbc:	4283      	cmp	r3, r0
 800acbe:	d018      	beq.n	800acf2 <PxMessagingTask+0x159a>
 800acc0:	4652      	mov	r2, sl
 800acc2:	1c53      	adds	r3, r2, #1
 800acc4:	444b      	add	r3, r9
 800acc6:	4a18      	ldr	r2, [pc, #96]	; (800ad28 <PxMessagingTask+0x15d0>)
 800acc8:	189b      	adds	r3, r3, r2
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	3201      	adds	r2, #1
 800acce:	4452      	add	r2, sl
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	469c      	mov	ip, r3
 800acd8:	4462      	add	r2, ip
 800acda:	444a      	add	r2, r9
 800acdc:	468c      	mov	ip, r1
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	0011      	movs	r1, r2
					for(i=0 ; i<temp ; i++)
 800ace2:	428b      	cmp	r3, r1
 800ace4:	d017      	beq.n	800ad16 <PxMessagingTask+0x15be>
 800ace6:	3301      	adds	r3, #1
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800ace8:	1e5a      	subs	r2, r3, #1
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	4282      	cmp	r2, r0
 800acee:	d1f8      	bne.n	800ace2 <PxMessagingTask+0x158a>
 800acf0:	4661      	mov	r1, ip
				shift += 4;
 800acf2:	3404      	adds	r4, #4
				numOfParams = messageLength[port-1] - shift;
 800acf4:	1b0a      	subs	r2, r1, r4
 800acf6:	b2d3      	uxtb	r3, r2
 800acf8:	9306      	str	r3, [sp, #24]
 800acfa:	f7fe fdf3 	bl	80098e4 <PxMessagingTask+0x18c>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800acfe:	2338      	movs	r3, #56	; 0x38
 800ad00:	436b      	muls	r3, r5
 800ad02:	4a09      	ldr	r2, [pc, #36]	; (800ad28 <PxMessagingTask+0x15d0>)
 800ad04:	18d2      	adds	r2, r2, r3
 800ad06:	464b      	mov	r3, r9
 800ad08:	5cd3      	ldrb	r3, [r2, r3]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	0098      	lsls	r0, r3, #2
 800ad0e:	490e      	ldr	r1, [pc, #56]	; (800ad48 <PxMessagingTask+0x15f0>)
 800ad10:	5841      	ldr	r1, [r0, r1]
 800ad12:	5dd2      	ldrb	r2, [r2, r7]
 800ad14:	e52f      	b.n	800a776 <PxMessagingTask+0x101e>
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800ad16:	2366      	movs	r3, #102	; 0x66
 800ad18:	4699      	mov	r9, r3
 800ad1a:	f7fe fd4c 	bl	80097b6 <PxMessagingTask+0x5e>
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	0001ffff 	.word	0x0001ffff
 800ad24:	200010b0 	.word	0x200010b0
 800ad28:	20000cf0 	.word	0x20000cf0
 800ad2c:	08019fb8 	.word	0x08019fb8
 800ad30:	0000ffff 	.word	0x0000ffff
 800ad34:	200010a8 	.word	0x200010a8
 800ad38:	200014ca 	.word	0x200014ca
 800ad3c:	20000c9e 	.word	0x20000c9e
 800ad40:	20000ee0 	.word	0x20000ee0
 800ad44:	2000101c 	.word	0x2000101c
 800ad48:	20006820 	.word	0x20006820

0800ad4c <ledModeCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800ad4c:	b530      	push	{r4, r5, lr}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	0005      	movs	r5, r0
 800ad52:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800ad54:	2300      	movs	r3, #0
 800ad56:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d101      	bne.n	800ad60 <ledModeCommand+0x14>
 800ad5c:	b672      	cpsid	i
 800ad5e:	e7fe      	b.n	800ad5e <ledModeCommand+0x12>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800ad60:	aa01      	add	r2, sp, #4
 800ad62:	2101      	movs	r1, #1
 800ad64:	f002 fd20 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800ad68:	0004      	movs	r4, r0
								(
									pcCommandString,		/* The command string itself. */
									1,						/* Return the first parameter. */
									&xParameterStringLength1	/* Store the parameter string length. */
								);
	if (!strcmp( ( char * ) pcParameterString1, "on") || !strcmp( ( char * ) pcParameterString1, "ON"))
 800ad6a:	4918      	ldr	r1, [pc, #96]	; (800adcc <ledModeCommand+0x80>)
 800ad6c:	f7f5 f9ca 	bl	8000104 <strcmp>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d005      	beq.n	800ad80 <ledModeCommand+0x34>
 800ad74:	4916      	ldr	r1, [pc, #88]	; (800add0 <ledModeCommand+0x84>)
 800ad76:	0020      	movs	r0, r4
 800ad78:	f7f5 f9c4 	bl	8000104 <strcmp>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d10a      	bne.n	800ad96 <ledModeCommand+0x4a>
		RelayindMode = 1;
 800ad80:	4b14      	ldr	r3, [pc, #80]	; (800add4 <ledModeCommand+0x88>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	701a      	strb	r2, [r3, #0]
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
		RelayindMode = 0;
	
	/* Respond to the command */
	if (RelayindMode) {
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800ad86:	222d      	movs	r2, #45	; 0x2d
 800ad88:	4913      	ldr	r1, [pc, #76]	; (800add8 <ledModeCommand+0x8c>)
 800ad8a:	0028      	movs	r0, r5
 800ad8c:	f008 f84f 	bl	8012e2e <memcpy>

	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800ad90:	2000      	movs	r0, #0
 800ad92:	b003      	add	sp, #12
 800ad94:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
 800ad96:	4911      	ldr	r1, [pc, #68]	; (800addc <ledModeCommand+0x90>)
 800ad98:	0020      	movs	r0, r4
 800ad9a:	f7f5 f9b3 	bl	8000104 <strcmp>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d005      	beq.n	800adae <ledModeCommand+0x62>
 800ada2:	490f      	ldr	r1, [pc, #60]	; (800ade0 <ledModeCommand+0x94>)
 800ada4:	0020      	movs	r0, r4
 800ada6:	f7f5 f9ad 	bl	8000104 <strcmp>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d108      	bne.n	800adc0 <ledModeCommand+0x74>
		RelayindMode = 0;
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <ledModeCommand+0x88>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800adb4:	222e      	movs	r2, #46	; 0x2e
 800adb6:	490b      	ldr	r1, [pc, #44]	; (800ade4 <ledModeCommand+0x98>)
 800adb8:	0028      	movs	r0, r5
 800adba:	f008 f838 	bl	8012e2e <memcpy>
 800adbe:	e7e7      	b.n	800ad90 <ledModeCommand+0x44>
	if (RelayindMode) {
 800adc0:	4b04      	ldr	r3, [pc, #16]	; (800add4 <ledModeCommand+0x88>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0f5      	beq.n	800adb4 <ledModeCommand+0x68>
 800adc8:	e7dd      	b.n	800ad86 <ledModeCommand+0x3a>
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	080193f0 	.word	0x080193f0
 800add0:	08019fe4 	.word	0x08019fe4
 800add4:	20001669 	.word	0x20001669
 800add8:	08019ff0 	.word	0x08019ff0
 800addc:	08019fe8 	.word	0x08019fe8
 800ade0:	08019fec 	.word	0x08019fec
 800ade4:	0801a020 	.word	0x0801a020

0800ade8 <SystemClock_Config>:
{
 800ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adea:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adec:	2401      	movs	r4, #1
 800adee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800adf0:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800adf2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800adf4:	2310      	movs	r3, #16
 800adf6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800adf8:	2702      	movs	r7, #2
 800adfa:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800adfc:	2680      	movs	r6, #128	; 0x80
 800adfe:	0276      	lsls	r6, r6, #9
 800ae00:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800ae02:	2380      	movs	r3, #128	; 0x80
 800ae04:	035b      	lsls	r3, r3, #13
 800ae06:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ae08:	2500      	movs	r5, #0
 800ae0a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ae0c:	a80d      	add	r0, sp, #52	; 0x34
 800ae0e:	f005 fccb 	bl	80107a8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800ae12:	2307      	movs	r3, #7
 800ae14:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae16:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae18:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ae1a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	a809      	add	r0, sp, #36	; 0x24
 800ae20:	f005 ff84 	bl	8010d2c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800ae24:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <SystemClock_Config+0xa8>)
 800ae26:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800ae28:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ae2a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ae2c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ae2e:	a802      	add	r0, sp, #8
 800ae30:	f006 f92a 	bl	8011088 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800ae34:	4d17      	ldr	r5, [pc, #92]	; (800ae94 <SystemClock_Config+0xac>)
 800ae36:	69ea      	ldr	r2, [r5, #28]
 800ae38:	2180      	movs	r1, #128	; 0x80
 800ae3a:	0549      	lsls	r1, r1, #21
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	61ea      	str	r2, [r5, #28]
 800ae40:	69eb      	ldr	r3, [r5, #28]
 800ae42:	400b      	ands	r3, r1
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800ae48:	f005 fca4 	bl	8010794 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ae4c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800ae4e:	23c0      	movs	r3, #192	; 0xc0
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ae54:	a802      	add	r0, sp, #8
 800ae56:	f006 f917 	bl	8011088 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ae5a:	f006 f8f1 	bl	8011040 <HAL_RCC_GetHCLKFreq>
 800ae5e:	21fa      	movs	r1, #250	; 0xfa
 800ae60:	0089      	lsls	r1, r1, #2
 800ae62:	f7f5 f975 	bl	8000150 <__udivsi3>
 800ae66:	f004 fc21 	bl	800f6ac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800ae6a:	2004      	movs	r0, #4
 800ae6c:	f004 fc3a 	bl	800f6e4 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800ae70:	69ab      	ldr	r3, [r5, #24]
 800ae72:	4323      	orrs	r3, r4
 800ae74:	61ab      	str	r3, [r5, #24]
 800ae76:	69ab      	ldr	r3, [r5, #24]
 800ae78:	401c      	ands	r4, r3
 800ae7a:	9401      	str	r4, [sp, #4]
 800ae7c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800ae7e:	2001      	movs	r0, #1
 800ae80:	2200      	movs	r2, #0
 800ae82:	2100      	movs	r1, #0
 800ae84:	4240      	negs	r0, r0
 800ae86:	f004 fbc9 	bl	800f61c <HAL_NVIC_SetPriority>
}
 800ae8a:	b01b      	add	sp, #108	; 0x6c
 800ae8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8e:	46c0      	nop			; (mov r8, r8)
 800ae90:	00040003 	.word	0x00040003
 800ae94:	40021000 	.word	0x40021000

0800ae98 <SaveToRO>:
{
 800ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae9a:	46de      	mov	lr, fp
 800ae9c:	4657      	mov	r7, sl
 800ae9e:	464e      	mov	r6, r9
 800aea0:	4645      	mov	r5, r8
 800aea2:	b5e0      	push	{r5, r6, r7, lr}
 800aea4:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800aea6:	2215      	movs	r2, #21
 800aea8:	2100      	movs	r1, #0
 800aeaa:	a802      	add	r0, sp, #8
 800aeac:	f007 ffc8 	bl	8012e40 <memset>
	HAL_FLASH_Unlock();
 800aeb0:	f005 fa4a 	bl	8010348 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800aeb4:	4872      	ldr	r0, [pc, #456]	; (800b080 <SaveToRO+0x1e8>)
 800aeb6:	f005 fb09 	bl	80104cc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aeba:	4872      	ldr	r0, [pc, #456]	; (800b084 <SaveToRO+0x1ec>)
 800aebc:	f005 fa60 	bl	8010380 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d112      	bne.n	800aeea <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800aec4:	4a70      	ldr	r2, [pc, #448]	; (800b088 <SaveToRO+0x1f0>)
 800aec6:	6913      	ldr	r3, [r2, #16]
 800aec8:	2102      	movs	r1, #2
 800aeca:	438b      	bics	r3, r1
 800aecc:	6113      	str	r3, [r2, #16]
	if (myID)
 800aece:	4b6f      	ldr	r3, [pc, #444]	; (800b08c <SaveToRO+0x1f4>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d113      	bne.n	800aefe <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800aed6:	4b6e      	ldr	r3, [pc, #440]	; (800b090 <SaveToRO+0x1f8>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d100      	bne.n	800aee0 <SaveToRO+0x48>
 800aede:	e0ca      	b.n	800b076 <SaveToRO+0x1de>
 800aee0:	2500      	movs	r5, #0
 800aee2:	4c6c      	ldr	r4, [pc, #432]	; (800b094 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) 
 800aee4:	4b6c      	ldr	r3, [pc, #432]	; (800b098 <SaveToRO+0x200>)
 800aee6:	4698      	mov	r8, r3
 800aee8:	e06e      	b.n	800afc8 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800aeea:	4b6c      	ldr	r3, [pc, #432]	; (800b09c <SaveToRO+0x204>)
 800aeec:	69d8      	ldr	r0, [r3, #28]
 800aeee:	b2c0      	uxtb	r0, r0
}
 800aef0:	b009      	add	sp, #36	; 0x24
 800aef2:	bc3c      	pop	{r2, r3, r4, r5}
 800aef4:	4690      	mov	r8, r2
 800aef6:	4699      	mov	r9, r3
 800aef8:	46a2      	mov	sl, r4
 800aefa:	46ab      	mov	fp, r5
 800aefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800aefe:	4a68      	ldr	r2, [pc, #416]	; (800b0a0 <SaveToRO+0x208>)
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	0212      	lsls	r2, r2, #8
 800af04:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800af06:	b292      	uxth	r2, r2
 800af08:	2300      	movs	r3, #0
 800af0a:	495d      	ldr	r1, [pc, #372]	; (800b080 <SaveToRO+0x1e8>)
 800af0c:	2001      	movs	r0, #1
 800af0e:	f005 fa65 	bl	80103dc <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af12:	485c      	ldr	r0, [pc, #368]	; (800b084 <SaveToRO+0x1ec>)
 800af14:	f005 fa34 	bl	8010380 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800af18:	2800      	cmp	r0, #0
 800af1a:	d111      	bne.n	800af40 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800af1c:	4a5a      	ldr	r2, [pc, #360]	; (800b088 <SaveToRO+0x1f0>)
 800af1e:	6913      	ldr	r3, [r2, #16]
 800af20:	2101      	movs	r1, #1
 800af22:	438b      	bics	r3, r1
 800af24:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800af26:	4b5e      	ldr	r3, [pc, #376]	; (800b0a0 <SaveToRO+0x208>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2201      	movs	r2, #1
 800af2c:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800af2e:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0d0      	beq.n	800aed6 <SaveToRO+0x3e>
 800af34:	2316      	movs	r3, #22
 800af36:	469b      	mov	fp, r3
 800af38:	4b5a      	ldr	r3, [pc, #360]	; (800b0a4 <SaveToRO+0x20c>)
 800af3a:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800af3c:	4698      	mov	r8, r3
 800af3e:	e02a      	b.n	800af96 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800af40:	4b56      	ldr	r3, [pc, #344]	; (800b09c <SaveToRO+0x204>)
 800af42:	69d8      	ldr	r0, [r3, #28]
 800af44:	b2c0      	uxtb	r0, r0
 800af46:	e7d3      	b.n	800aef0 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800af48:	4b54      	ldr	r3, [pc, #336]	; (800b09c <SaveToRO+0x204>)
 800af4a:	69d8      	ldr	r0, [r3, #28]
 800af4c:	b2c0      	uxtb	r0, r0
 800af4e:	e7cf      	b.n	800aef0 <SaveToRO+0x58>
 800af50:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800af52:	42b4      	cmp	r4, r6
 800af54:	d017      	beq.n	800af86 <SaveToRO+0xee>
				if (array[i-1][0]) {
 800af56:	4643      	mov	r3, r8
 800af58:	5afb      	ldrh	r3, [r7, r3]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f8      	beq.n	800af50 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800af5e:	8822      	ldrh	r2, [r4, #0]
 800af60:	4b47      	ldr	r3, [pc, #284]	; (800b080 <SaveToRO+0x1e8>)
 800af62:	18e9      	adds	r1, r5, r3
 800af64:	2300      	movs	r3, #0
 800af66:	2001      	movs	r0, #1
 800af68:	f005 fa38 	bl	80103dc <HAL_FLASH_Program>
					add += 2;
 800af6c:	3502      	adds	r5, #2
 800af6e:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af70:	4844      	ldr	r0, [pc, #272]	; (800b084 <SaveToRO+0x1ec>)
 800af72:	f005 fa05 	bl	8010380 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800af76:	2800      	cmp	r0, #0
 800af78:	d1e6      	bne.n	800af48 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800af7a:	4a43      	ldr	r2, [pc, #268]	; (800b088 <SaveToRO+0x1f0>)
 800af7c:	6913      	ldr	r3, [r2, #16]
 800af7e:	2101      	movs	r1, #1
 800af80:	438b      	bics	r3, r1
 800af82:	6113      	str	r3, [r2, #16]
 800af84:	e7e4      	b.n	800af50 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800af86:	464b      	mov	r3, r9
 800af88:	3301      	adds	r3, #1
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	4699      	mov	r9, r3
 800af8e:	4b44      	ldr	r3, [pc, #272]	; (800b0a0 <SaveToRO+0x208>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	454b      	cmp	r3, r9
 800af94:	d39f      	bcc.n	800aed6 <SaveToRO+0x3e>
 800af96:	465e      	mov	r6, fp
 800af98:	464b      	mov	r3, r9
 800af9a:	435e      	muls	r6, r3
 800af9c:	0034      	movs	r4, r6
 800af9e:	3c16      	subs	r4, #22
 800afa0:	4454      	add	r4, sl
 800afa2:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800afa4:	1e5f      	subs	r7, r3, #1
 800afa6:	465b      	mov	r3, fp
 800afa8:	435f      	muls	r7, r3
 800afaa:	e7d4      	b.n	800af56 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800afac:	4b3b      	ldr	r3, [pc, #236]	; (800b09c <SaveToRO+0x204>)
 800afae:	69d8      	ldr	r0, [r3, #28]
 800afb0:	b2c0      	uxtb	r0, r0
 800afb2:	e79d      	b.n	800aef0 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800afb4:	4b39      	ldr	r3, [pc, #228]	; (800b09c <SaveToRO+0x204>)
 800afb6:	69d8      	ldr	r0, [r3, #28]
 800afb8:	b2c0      	uxtb	r0, r0
 800afba:	e799      	b.n	800aef0 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800afbc:	3501      	adds	r5, #1
 800afbe:	b2ed      	uxtb	r5, r5
 800afc0:	4b33      	ldr	r3, [pc, #204]	; (800b090 <SaveToRO+0x1f8>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	d956      	bls.n	800b076 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800afc8:	9501      	str	r5, [sp, #4]
 800afca:	00ab      	lsls	r3, r5, #2
 800afcc:	195b      	adds	r3, r3, r5
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4642      	mov	r2, r8
 800afd2:	5c9b      	ldrb	r3, [r3, r2]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0f1      	beq.n	800afbc <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800afd8:	23fe      	movs	r3, #254	; 0xfe
 800afda:	aa02      	add	r2, sp, #8
 800afdc:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800afde:	00a9      	lsls	r1, r5, #2
 800afe0:	1949      	adds	r1, r1, r5
 800afe2:	0089      	lsls	r1, r1, #2
 800afe4:	4b2c      	ldr	r3, [pc, #176]	; (800b098 <SaveToRO+0x200>)
 800afe6:	469c      	mov	ip, r3
 800afe8:	4461      	add	r1, ip
 800afea:	2214      	movs	r2, #20
 800afec:	ab02      	add	r3, sp, #8
 800afee:	1c58      	adds	r0, r3, #1
 800aff0:	f007 ff1d 	bl	8012e2e <memcpy>
 800aff4:	2314      	movs	r3, #20
 800aff6:	469b      	mov	fp, r3
 800aff8:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800affa:	ae02      	add	r6, sp, #8
 800affc:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800affe:	4f22      	ldr	r7, [pc, #136]	; (800b088 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b000:	5b32      	ldrh	r2, [r6, r4]
 800b002:	2300      	movs	r3, #0
 800b004:	0021      	movs	r1, r4
 800b006:	2001      	movs	r0, #1
 800b008:	f005 f9e8 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b00c:	481d      	ldr	r0, [pc, #116]	; (800b084 <SaveToRO+0x1ec>)
 800b00e:	f005 f9b7 	bl	8010380 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b012:	2800      	cmp	r0, #0
 800b014:	d1ca      	bne.n	800afac <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2201      	movs	r2, #1
 800b01a:	4393      	bics	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b01e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b020:	455c      	cmp	r4, fp
 800b022:	d1ed      	bne.n	800b000 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b024:	2700      	movs	r7, #0
 800b026:	9a01      	ldr	r2, [sp, #4]
 800b028:	0093      	lsls	r3, r2, #2
 800b02a:	189e      	adds	r6, r3, r2
 800b02c:	00b6      	lsls	r6, r6, #2
 800b02e:	4b1a      	ldr	r3, [pc, #104]	; (800b098 <SaveToRO+0x200>)
 800b030:	469a      	mov	sl, r3
 800b032:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b034:	4b14      	ldr	r3, [pc, #80]	; (800b088 <SaveToRO+0x1f0>)
 800b036:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b038:	4653      	mov	r3, sl
 800b03a:	68de      	ldr	r6, [r3, #12]
 800b03c:	0030      	movs	r0, r6
 800b03e:	f7f5 f86b 	bl	8000118 <strlen>
 800b042:	3001      	adds	r0, #1
 800b044:	0840      	lsrs	r0, r0, #1
 800b046:	4287      	cmp	r7, r0
 800b048:	d2b8      	bcs.n	800afbc <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b04a:	007b      	lsls	r3, r7, #1
 800b04c:	5af2      	ldrh	r2, [r6, r3]
 800b04e:	2300      	movs	r3, #0
 800b050:	0021      	movs	r1, r4
 800b052:	2001      	movs	r0, #1
 800b054:	f005 f9c2 	bl	80103dc <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b058:	480a      	ldr	r0, [pc, #40]	; (800b084 <SaveToRO+0x1ec>)
 800b05a:	f005 f991 	bl	8010380 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b05e:	2800      	cmp	r0, #0
 800b060:	d1a8      	bne.n	800afb4 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b062:	465b      	mov	r3, fp
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2201      	movs	r2, #1
 800b068:	4393      	bics	r3, r2
 800b06a:	465a      	mov	r2, fp
 800b06c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b06e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b070:	3701      	adds	r7, #1
 800b072:	b2ff      	uxtb	r7, r7
 800b074:	e7e0      	b.n	800b038 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b076:	f005 f979 	bl	801036c <HAL_FLASH_Lock>
	return result;
 800b07a:	2000      	movs	r0, #0
 800b07c:	e738      	b.n	800aef0 <SaveToRO+0x58>
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	0801d800 	.word	0x0801d800
 800b084:	0000c350 	.word	0x0000c350
 800b088:	40022000 	.word	0x40022000
 800b08c:	2000101c 	.word	0x2000101c
 800b090:	200011bb 	.word	0x200011bb
 800b094:	0801dc00 	.word	0x0801dc00
 800b098:	200068b4 	.word	0x200068b4
 800b09c:	20006d18 	.word	0x20006d18
 800b0a0:	2000001c 	.word	0x2000001c
 800b0a4:	20000a78 	.word	0x20000a78

0800b0a8 <ClearROtopology>:
{
 800b0a8:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b0aa:	4a07      	ldr	r2, [pc, #28]	; (800b0c8 <ClearROtopology+0x20>)
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4807      	ldr	r0, [pc, #28]	; (800b0cc <ClearROtopology+0x24>)
 800b0b0:	f007 fec6 	bl	8012e40 <memset>
	N = 1; myID = 0;
 800b0b4:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <ClearROtopology+0x28>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <ClearROtopology+0x2c>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b0c0:	f7ff feea 	bl	800ae98 <SaveToRO>
}
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	46c0      	nop			; (mov r8, r8)
 800b0c8:	00000226 	.word	0x00000226
 800b0cc:	20000a78 	.word	0x20000a78
 800b0d0:	2000001c 	.word	0x2000001c
 800b0d4:	2000101c 	.word	0x2000101c

0800b0d8 <Module_Init>:
{	
 800b0d8:	b500      	push	{lr}
 800b0da:	b083      	sub	sp, #12
  MX_USART1_UART_Init();
 800b0dc:	f001 ff7c 	bl	800cfd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b0e0:	f001 ff92 	bl	800d008 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b0e4:	f001 ffa8 	bl	800d038 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b0e8:	f001 ffbe 	bl	800d068 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b0ec:	f001 ffd4 	bl	800d098 <MX_USART6_UART_Init>
	xTimerRelay = xTimerCreate( "RelayTimer", pdMS_TO_TICKS(1000), pdFALSE, ( void * ) 1, RelayTimerCallback );	
 800b0f0:	21fa      	movs	r1, #250	; 0xfa
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <Module_Init+0x38>)
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	0089      	lsls	r1, r1, #2
 800b0fc:	4805      	ldr	r0, [pc, #20]	; (800b114 <Module_Init+0x3c>)
 800b0fe:	f003 ff29 	bl	800ef54 <xTimerCreate>
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <Module_Init+0x40>)
 800b104:	6018      	str	r0, [r3, #0]
	Relay_Init();
 800b106:	f001 fbb3 	bl	800c870 <Relay_Init>
}
 800b10a:	b003      	add	sp, #12
 800b10c:	bd00      	pop	{pc}
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	0800b475 	.word	0x0800b475
 800b114:	08019fd8 	.word	0x08019fd8
 800b118:	2000166c 	.word	0x2000166c

0800b11c <RegisterModuleCLICommands>:
{
 800b11c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &onCommandDefinition );
 800b11e:	4808      	ldr	r0, [pc, #32]	; (800b140 <RegisterModuleCLICommands+0x24>)
 800b120:	f002 faa4 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &offCommandDefinition );
 800b124:	4807      	ldr	r0, [pc, #28]	; (800b144 <RegisterModuleCLICommands+0x28>)
 800b126:	f002 faa1 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &toggleCommandDefinition );
 800b12a:	4807      	ldr	r0, [pc, #28]	; (800b148 <RegisterModuleCLICommands+0x2c>)
 800b12c:	f002 fa9e 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &ledModeCommandDefinition );
 800b130:	4806      	ldr	r0, [pc, #24]	; (800b14c <RegisterModuleCLICommands+0x30>)
 800b132:	f002 fa9b 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pwmCommandDefinition );
 800b136:	4806      	ldr	r0, [pc, #24]	; (800b150 <RegisterModuleCLICommands+0x34>)
 800b138:	f002 fa98 	bl	800d66c <FreeRTOS_CLIRegisterCommand>
}
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	0801a104 	.word	0x0801a104
 800b144:	0801a084 	.word	0x0801a084
 800b148:	0801a364 	.word	0x0801a364
 800b14c:	0801a050 	.word	0x0801a050
 800b150:	0801a190 	.word	0x0801a190

0800b154 <GetPort>:
	if (huart->Instance == USART5)
 800b154:	6800      	ldr	r0, [r0, #0]
 800b156:	4b0e      	ldr	r3, [pc, #56]	; (800b190 <GetPort+0x3c>)
 800b158:	4298      	cmp	r0, r3
 800b15a:	d011      	beq.n	800b180 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b15c:	4b0d      	ldr	r3, [pc, #52]	; (800b194 <GetPort+0x40>)
 800b15e:	4298      	cmp	r0, r3
 800b160:	d010      	beq.n	800b184 <GetPort+0x30>
	else if (huart->Instance == USART6)
 800b162:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <GetPort+0x44>)
 800b164:	4298      	cmp	r0, r3
 800b166:	d00f      	beq.n	800b188 <GetPort+0x34>
	else if (huart->Instance == USART3)
 800b168:	4b0c      	ldr	r3, [pc, #48]	; (800b19c <GetPort+0x48>)
 800b16a:	4298      	cmp	r0, r3
 800b16c:	d00e      	beq.n	800b18c <GetPort+0x38>
	return 0;
 800b16e:	4b0c      	ldr	r3, [pc, #48]	; (800b1a0 <GetPort+0x4c>)
 800b170:	469c      	mov	ip, r3
 800b172:	4460      	add	r0, ip
 800b174:	4243      	negs	r3, r0
 800b176:	4158      	adcs	r0, r3
 800b178:	4240      	negs	r0, r0
 800b17a:	2305      	movs	r3, #5
 800b17c:	4018      	ands	r0, r3
}
 800b17e:	4770      	bx	lr
			return P1;
 800b180:	2001      	movs	r0, #1
 800b182:	e7fc      	b.n	800b17e <GetPort+0x2a>
			return P2;
 800b184:	2002      	movs	r0, #2
 800b186:	e7fa      	b.n	800b17e <GetPort+0x2a>
			return P3;
 800b188:	2003      	movs	r0, #3
 800b18a:	e7f8      	b.n	800b17e <GetPort+0x2a>
			return P4;
 800b18c:	2004      	movs	r0, #4
 800b18e:	e7f6      	b.n	800b17e <GetPort+0x2a>
 800b190:	40005000 	.word	0x40005000
 800b194:	40004400 	.word	0x40004400
 800b198:	40011400 	.word	0x40011400
 800b19c:	40004800 	.word	0x40004800
 800b1a0:	bffec800 	.word	0xbffec800

0800b1a4 <TIM3_Init>:
{
 800b1a4:	b530      	push	{r4, r5, lr}
 800b1a6:	b095      	sub	sp, #84	; 0x54
  __TIM3_CLK_ENABLE();
 800b1a8:	4a24      	ldr	r2, [pc, #144]	; (800b23c <TIM3_Init+0x98>)
 800b1aa:	69d1      	ldr	r1, [r2, #28]
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	4319      	orrs	r1, r3
 800b1b0:	61d1      	str	r1, [r2, #28]
 800b1b2:	69d2      	ldr	r2, [r2, #28]
 800b1b4:	401a      	ands	r2, r3
 800b1b6:	9201      	str	r2, [sp, #4]
 800b1b8:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ba:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1bc:	2500      	movs	r5, #0
 800b1be:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = _Relay_PIN;
 800b1c4:	3b02      	subs	r3, #2
 800b1c6:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b1c8:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800b1ca:	a90f      	add	r1, sp, #60	; 0x3c
 800b1cc:	481c      	ldr	r0, [pc, #112]	; (800b240 <TIM3_Init+0x9c>)
 800b1ce:	f005 f9ef 	bl	80105b0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	2010      	movs	r0, #16
 800b1d8:	f004 fa20 	bl	800f61c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b1dc:	2010      	movs	r0, #16
 800b1de:	f004 fa51 	bl	800f684 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800b1e2:	4c18      	ldr	r4, [pc, #96]	; (800b244 <TIM3_Init+0xa0>)
 800b1e4:	4b18      	ldr	r3, [pc, #96]	; (800b248 <TIM3_Init+0xa4>)
 800b1e6:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (uint32_t)(HAL_RCC_GetSysClockFreq()/PWM_TIMER_CLOCK) - 1;
 800b1e8:	f005 feda 	bl	8010fa0 <HAL_RCC_GetSysClockFreq>
 800b1ec:	4917      	ldr	r1, [pc, #92]	; (800b24c <TIM3_Init+0xa8>)
 800b1ee:	f7f4 ffaf 	bl	8000150 <__udivsi3>
 800b1f2:	3801      	subs	r0, #1
 800b1f4:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1f6:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800b1f8:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1fa:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim3);
 800b1fc:	0020      	movs	r0, r4
 800b1fe:	f006 fc41 	bl	8011a84 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b202:	2380      	movs	r3, #128	; 0x80
 800b204:	015b      	lsls	r3, r3, #5
 800b206:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b208:	a90b      	add	r1, sp, #44	; 0x2c
 800b20a:	0020      	movs	r0, r4
 800b20c:	f006 fae4 	bl	80117d8 <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim3);
 800b210:	0020      	movs	r0, r4
 800b212:	f006 fc51 	bl	8011ab8 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b216:	9509      	str	r5, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b218:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b21a:	a909      	add	r1, sp, #36	; 0x24
 800b21c:	0020      	movs	r0, r4
 800b21e:	f006 fd8f 	bl	8011d40 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b222:	2360      	movs	r3, #96	; 0x60
 800b224:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 800b226:	9503      	str	r5, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b228:	9504      	str	r5, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b22a:	9506      	str	r5, [sp, #24]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Relay_TIM_CH);
 800b22c:	2208      	movs	r2, #8
 800b22e:	a902      	add	r1, sp, #8
 800b230:	0020      	movs	r0, r4
 800b232:	f006 fc9b 	bl	8011b6c <HAL_TIM_PWM_ConfigChannel>
}
 800b236:	b015      	add	sp, #84	; 0x54
 800b238:	bd30      	pop	{r4, r5, pc}
 800b23a:	46c0      	nop			; (mov r8, r8)
 800b23c:	40021000 	.word	0x40021000
 800b240:	48000400 	.word	0x48000400
 800b244:	200069e0 	.word	0x200069e0
 800b248:	40000400 	.word	0x40000400
 800b24c:	00f42400 	.word	0x00f42400

0800b250 <TIM3_DeInit>:
{
 800b250:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800b252:	2010      	movs	r0, #16
 800b254:	f004 fa20 	bl	800f698 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800b258:	4c06      	ldr	r4, [pc, #24]	; (800b274 <TIM3_DeInit+0x24>)
 800b25a:	0020      	movs	r0, r4
 800b25c:	f006 fa6e 	bl	801173c <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800b260:	0020      	movs	r0, r4
 800b262:	f006 fa99 	bl	8011798 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800b266:	4a04      	ldr	r2, [pc, #16]	; (800b278 <TIM3_DeInit+0x28>)
 800b268:	69d3      	ldr	r3, [r2, #28]
 800b26a:	2102      	movs	r1, #2
 800b26c:	438b      	bics	r3, r1
 800b26e:	61d3      	str	r3, [r2, #28]
}
 800b270:	bd10      	pop	{r4, pc}
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	200069e0 	.word	0x200069e0
 800b278:	40021000 	.word	0x40021000

0800b27c <Set_Relay_PWM>:
{	
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800b280:	0001      	movs	r1, r0
 800b282:	4813      	ldr	r0, [pc, #76]	; (800b2d0 <Set_Relay_PWM+0x54>)
 800b284:	f7f4 ff64 	bl	8000150 <__udivsi3>
 800b288:	0006      	movs	r6, r0
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <Set_Relay_PWM+0x58>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d11b      	bne.n	800b2ca <Set_Relay_PWM+0x4e>
	htim3.Instance->ARR = ARR - 1;
 800b292:	4c11      	ldr	r4, [pc, #68]	; (800b2d8 <Set_Relay_PWM+0x5c>)
 800b294:	6825      	ldr	r5, [r4, #0]
 800b296:	1e73      	subs	r3, r6, #1
 800b298:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float)dutycycle/100.0f) * ARR;
 800b29a:	4910      	ldr	r1, [pc, #64]	; (800b2dc <Set_Relay_PWM+0x60>)
 800b29c:	1c38      	adds	r0, r7, #0
 800b29e:	f7f5 faab 	bl	80007f8 <__aeabi_fdiv>
 800b2a2:	1c07      	adds	r7, r0, #0
 800b2a4:	0030      	movs	r0, r6
 800b2a6:	f7f5 ff95 	bl	80011d4 <__aeabi_ui2f>
 800b2aa:	1c01      	adds	r1, r0, #0
 800b2ac:	1c38      	adds	r0, r7, #0
 800b2ae:	f7f5 fc7b 	bl	8000ba8 <__aeabi_fmul>
 800b2b2:	f7f5 f985 	bl	80005c0 <__aeabi_f2uiz>
 800b2b6:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Relay_TIM_CH) != HAL_OK)	
 800b2b8:	2108      	movs	r1, #8
 800b2ba:	0020      	movs	r0, r4
 800b2bc:	f006 fcd8 	bl	8011c70 <HAL_TIM_PWM_Start>
 800b2c0:	1e43      	subs	r3, r0, #1
 800b2c2:	4198      	sbcs	r0, r3
 800b2c4:	4240      	negs	r0, r0
 800b2c6:	b2c0      	uxtb	r0, r0
}
 800b2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b2ca:	f7ff ff6b 	bl	800b1a4 <TIM3_Init>
 800b2ce:	e7e0      	b.n	800b292 <Set_Relay_PWM+0x16>
 800b2d0:	00f42400 	.word	0x00f42400
 800b2d4:	20001668 	.word	0x20001668
 800b2d8:	200069e0 	.word	0x200069e0
 800b2dc:	42c80000 	.word	0x42c80000

0800b2e0 <Relay_on>:
{	
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	0004      	movs	r4, r0
	if (Relay_state == STATE_PWM) 
 800b2e6:	4b24      	ldr	r3, [pc, #144]	; (800b378 <Relay_on+0x98>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d02a      	beq.n	800b344 <Relay_on+0x64>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_SET);
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4822      	ldr	r0, [pc, #136]	; (800b37c <Relay_on+0x9c>)
 800b2f4:	f005 fa42 	bl	801077c <HAL_GPIO_WritePin>
	if (RelayindMode) IND_ON();
 800b2f8:	4b21      	ldr	r3, [pc, #132]	; (800b380 <Relay_on+0xa0>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d12a      	bne.n	800b356 <Relay_on+0x76>
	if (timeout != portMAX_DELAY) 
 800b300:	1c63      	adds	r3, r4, #1
 800b302:	d017      	beq.n	800b334 <Relay_on+0x54>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b304:	4b1f      	ldr	r3, [pc, #124]	; (800b384 <Relay_on+0xa4>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	f003 ff80 	bl	800f20c <xTimerIsTimerActive>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d129      	bne.n	800b364 <Relay_on+0x84>
		xTimerChangePeriod( xTimerRelay, pdMS_TO_TICKS(timeout), 100 );
 800b310:	0160      	lsls	r0, r4, #5
 800b312:	1b00      	subs	r0, r0, r4
 800b314:	0080      	lsls	r0, r0, #2
 800b316:	1900      	adds	r0, r0, r4
 800b318:	00c0      	lsls	r0, r0, #3
 800b31a:	21fa      	movs	r1, #250	; 0xfa
 800b31c:	0089      	lsls	r1, r1, #2
 800b31e:	f7f4 ff17 	bl	8000150 <__udivsi3>
 800b322:	0002      	movs	r2, r0
 800b324:	4b17      	ldr	r3, [pc, #92]	; (800b384 <Relay_on+0xa4>)
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	2364      	movs	r3, #100	; 0x64
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2300      	movs	r3, #0
 800b32e:	2104      	movs	r1, #4
 800b330:	f003 fe30 	bl	800ef94 <xTimerGenericCommand>
	Relay_state = STATE_ON; Relay_Oldstate = Relay_state;	
 800b334:	2301      	movs	r3, #1
 800b336:	4a10      	ldr	r2, [pc, #64]	; (800b378 <Relay_on+0x98>)
 800b338:	7013      	strb	r3, [r2, #0]
 800b33a:	4a13      	ldr	r2, [pc, #76]	; (800b388 <Relay_on+0xa8>)
 800b33c:	7013      	strb	r3, [r2, #0]
}
 800b33e:	2000      	movs	r0, #0
 800b340:	b002      	add	sp, #8
 800b342:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800b344:	2108      	movs	r1, #8
 800b346:	4811      	ldr	r0, [pc, #68]	; (800b38c <Relay_on+0xac>)
 800b348:	f006 fcba 	bl	8011cc0 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800b34c:	f7ff ff80 	bl	800b250 <TIM3_DeInit>
		Relay_Init();
 800b350:	f001 fa8e 	bl	800c870 <Relay_Init>
 800b354:	e7cb      	b.n	800b2ee <Relay_on+0xe>
	if (RelayindMode) IND_ON();
 800b356:	2180      	movs	r1, #128	; 0x80
 800b358:	2201      	movs	r2, #1
 800b35a:	01c9      	lsls	r1, r1, #7
 800b35c:	480c      	ldr	r0, [pc, #48]	; (800b390 <Relay_on+0xb0>)
 800b35e:	f005 fa0d 	bl	801077c <HAL_GPIO_WritePin>
 800b362:	e7cd      	b.n	800b300 <Relay_on+0x20>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b364:	4b07      	ldr	r3, [pc, #28]	; (800b384 <Relay_on+0xa4>)
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	2364      	movs	r3, #100	; 0x64
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	2300      	movs	r3, #0
 800b36e:	2200      	movs	r2, #0
 800b370:	2103      	movs	r1, #3
 800b372:	f003 fe0f 	bl	800ef94 <xTimerGenericCommand>
 800b376:	e7cb      	b.n	800b310 <Relay_on+0x30>
 800b378:	20001668 	.word	0x20001668
 800b37c:	48000400 	.word	0x48000400
 800b380:	20001669 	.word	0x20001669
 800b384:	2000166c 	.word	0x2000166c
 800b388:	20000084 	.word	0x20000084
 800b38c:	200069e0 	.word	0x200069e0
 800b390:	48000800 	.word	0x48000800

0800b394 <onCommand>:
{
 800b394:	b530      	push	{r4, r5, lr}
 800b396:	b083      	sub	sp, #12
 800b398:	0004      	movs	r4, r0
 800b39a:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b39c:	2300      	movs	r3, #0
 800b39e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	d101      	bne.n	800b3a8 <onCommand+0x14>
 800b3a4:	b672      	cpsid	i
 800b3a6:	e7fe      	b.n	800b3a6 <onCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b3a8:	aa01      	add	r2, sp, #4
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	f002 f9fc 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
 800b3b0:	0005      	movs	r5, r0
	if (!strcmp( ( char * ) pcParameterString1, "inf") || !strcmp( ( char * ) pcParameterString1, "INF"))
 800b3b2:	4915      	ldr	r1, [pc, #84]	; (800b408 <onCommand+0x74>)
 800b3b4:	f7f4 fea6 	bl	8000104 <strcmp>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d005      	beq.n	800b3c8 <onCommand+0x34>
 800b3bc:	4913      	ldr	r1, [pc, #76]	; (800b40c <onCommand+0x78>)
 800b3be:	0028      	movs	r0, r5
 800b3c0:	f7f4 fea0 	bl	8000104 <strcmp>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d108      	bne.n	800b3da <onCommand+0x46>
	result = Relay_on(timeout);	
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	4240      	negs	r0, r0
 800b3cc:	f7ff ff88 	bl	800b2e0 <Relay_on>
	if (result == H0FR6_OK) {
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d012      	beq.n	800b3fa <onCommand+0x66>
}
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	b003      	add	sp, #12
 800b3d8:	bd30      	pop	{r4, r5, pc}
		timeout = ( uint32_t ) atol( ( char * ) pcParameterString1 );
 800b3da:	0028      	movs	r0, r5
 800b3dc:	f007 fa9d 	bl	801291a <atol>
 800b3e0:	0005      	movs	r5, r0
	result = Relay_on(timeout);	
 800b3e2:	f7ff ff7d 	bl	800b2e0 <Relay_on>
	if (result == H0FR6_OK) {
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d1f4      	bne.n	800b3d4 <onCommand+0x40>
		if (timeout != portMAX_DELAY) {
 800b3ea:	1c6b      	adds	r3, r5, #1
 800b3ec:	d005      	beq.n	800b3fa <onCommand+0x66>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, timeout);
 800b3ee:	002a      	movs	r2, r5
 800b3f0:	4907      	ldr	r1, [pc, #28]	; (800b410 <onCommand+0x7c>)
 800b3f2:	0020      	movs	r0, r4
 800b3f4:	f007 ff1e 	bl	8013234 <sprintf>
 800b3f8:	e7ec      	b.n	800b3d4 <onCommand+0x40>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOKMessageInf);
 800b3fa:	2231      	movs	r2, #49	; 0x31
 800b3fc:	4905      	ldr	r1, [pc, #20]	; (800b414 <onCommand+0x80>)
 800b3fe:	0020      	movs	r0, r4
 800b400:	f007 fd15 	bl	8012e2e <memcpy>
 800b404:	e7e6      	b.n	800b3d4 <onCommand+0x40>
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	0801a094 	.word	0x0801a094
 800b40c:	0801a098 	.word	0x0801a098
 800b410:	0801a09c 	.word	0x0801a09c
 800b414:	0801a0d0 	.word	0x0801a0d0

0800b418 <Relay_off>:
{	
 800b418:	b510      	push	{r4, lr}
	if (Relay_state == STATE_PWM) 
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <Relay_off+0x48>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d00d      	beq.n	800b43e <Relay_off+0x26>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_RESET);
 800b422:	2200      	movs	r2, #0
 800b424:	2101      	movs	r1, #1
 800b426:	480f      	ldr	r0, [pc, #60]	; (800b464 <Relay_off+0x4c>)
 800b428:	f005 f9a8 	bl	801077c <HAL_GPIO_WritePin>
	if (RelayindMode) IND_OFF();
 800b42c:	4b0e      	ldr	r3, [pc, #56]	; (800b468 <Relay_off+0x50>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10d      	bne.n	800b450 <Relay_off+0x38>
	Relay_state = STATE_OFF;
 800b434:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <Relay_off+0x48>)
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
}
 800b43a:	2000      	movs	r0, #0
 800b43c:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800b43e:	2108      	movs	r1, #8
 800b440:	480a      	ldr	r0, [pc, #40]	; (800b46c <Relay_off+0x54>)
 800b442:	f006 fc3d 	bl	8011cc0 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800b446:	f7ff ff03 	bl	800b250 <TIM3_DeInit>
		Relay_Init();
 800b44a:	f001 fa11 	bl	800c870 <Relay_Init>
 800b44e:	e7e8      	b.n	800b422 <Relay_off+0xa>
	if (RelayindMode) IND_OFF();
 800b450:	2180      	movs	r1, #128	; 0x80
 800b452:	2200      	movs	r2, #0
 800b454:	01c9      	lsls	r1, r1, #7
 800b456:	4806      	ldr	r0, [pc, #24]	; (800b470 <Relay_off+0x58>)
 800b458:	f005 f990 	bl	801077c <HAL_GPIO_WritePin>
 800b45c:	e7ea      	b.n	800b434 <Relay_off+0x1c>
 800b45e:	46c0      	nop			; (mov r8, r8)
 800b460:	20001668 	.word	0x20001668
 800b464:	48000400 	.word	0x48000400
 800b468:	20001669 	.word	0x20001669
 800b46c:	200069e0 	.word	0x200069e0
 800b470:	48000800 	.word	0x48000800

0800b474 <RelayTimerCallback>:
{
 800b474:	b510      	push	{r4, lr}
	Relay_off();
 800b476:	f7ff ffcf 	bl	800b418 <Relay_off>
}
 800b47a:	bd10      	pop	{r4, pc}

0800b47c <offCommand>:
{
 800b47c:	b510      	push	{r4, lr}
 800b47e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800b480:	d101      	bne.n	800b486 <offCommand+0xa>
 800b482:	b672      	cpsid	i
 800b484:	e7fe      	b.n	800b484 <offCommand+0x8>
	result = Relay_off();
 800b486:	f7ff ffc7 	bl	800b418 <Relay_off>
	if (result == H0FR6_OK) {
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d001      	beq.n	800b492 <offCommand+0x16>
}
 800b48e:	2000      	movs	r0, #0
 800b490:	bd10      	pop	{r4, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800b492:	2222      	movs	r2, #34	; 0x22
 800b494:	4902      	ldr	r1, [pc, #8]	; (800b4a0 <offCommand+0x24>)
 800b496:	0020      	movs	r0, r4
 800b498:	f007 fcc9 	bl	8012e2e <memcpy>
 800b49c:	e7f7      	b.n	800b48e <offCommand+0x12>
 800b49e:	46c0      	nop			; (mov r8, r8)
 800b4a0:	0801a060 	.word	0x0801a060

0800b4a4 <Relay_PWM>:
{	
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	1c05      	adds	r5, r0, #0
	if ( dutyCycle < 0 || dutyCycle > 100 )
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f7f5 f817 	bl	80004dc <__aeabi_fcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d11e      	bne.n	800b4f0 <Relay_PWM+0x4c>
 800b4b2:	4911      	ldr	r1, [pc, #68]	; (800b4f8 <Relay_PWM+0x54>)
 800b4b4:	1c28      	adds	r0, r5, #0
 800b4b6:	f7f5 f825 	bl	8000504 <__aeabi_fcmpgt>
		return H0FR6_ERR_Wrong_Value;
 800b4ba:	2402      	movs	r4, #2
	if ( dutyCycle < 0 || dutyCycle > 100 )
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d118      	bne.n	800b4f2 <Relay_PWM+0x4e>
	result = Set_Relay_PWM(Relay_PWM_DEF_FREQ, dutyCycle);
 800b4c0:	1c29      	adds	r1, r5, #0
 800b4c2:	480e      	ldr	r0, [pc, #56]	; (800b4fc <Relay_PWM+0x58>)
 800b4c4:	f7ff feda 	bl	800b27c <Set_Relay_PWM>
 800b4c8:	1e04      	subs	r4, r0, #0
	if (result == H0FR6_OK)
 800b4ca:	d112      	bne.n	800b4f2 <Relay_PWM+0x4e>
		Relay_OldDC = dutyCycle;
 800b4cc:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <Relay_PWM+0x5c>)
 800b4ce:	601d      	str	r5, [r3, #0]
		Relay_state = STATE_PWM; Relay_Oldstate = Relay_state;			
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	4a0c      	ldr	r2, [pc, #48]	; (800b504 <Relay_PWM+0x60>)
 800b4d4:	7013      	strb	r3, [r2, #0]
 800b4d6:	4a0c      	ldr	r2, [pc, #48]	; (800b508 <Relay_PWM+0x64>)
 800b4d8:	7013      	strb	r3, [r2, #0]
		if (RelayindMode) IND_ON();
 800b4da:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <Relay_PWM+0x68>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <Relay_PWM+0x4e>
 800b4e2:	2180      	movs	r1, #128	; 0x80
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	01c9      	lsls	r1, r1, #7
 800b4e8:	4809      	ldr	r0, [pc, #36]	; (800b510 <Relay_PWM+0x6c>)
 800b4ea:	f005 f947 	bl	801077c <HAL_GPIO_WritePin>
 800b4ee:	e000      	b.n	800b4f2 <Relay_PWM+0x4e>
		return H0FR6_ERR_Wrong_Value;
 800b4f0:	2402      	movs	r4, #2
}
 800b4f2:	0020      	movs	r0, r4
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	46c0      	nop			; (mov r8, r8)
 800b4f8:	42c80000 	.word	0x42c80000
 800b4fc:	00005dc0 	.word	0x00005dc0
 800b500:	200069dc 	.word	0x200069dc
 800b504:	20001668 	.word	0x20001668
 800b508:	20000084 	.word	0x20000084
 800b50c:	20001669 	.word	0x20001669
 800b510:	48000800 	.word	0x48000800

0800b514 <Relay_toggle>:
{	
 800b514:	b510      	push	{r4, lr}
	if (Relay_state) 
 800b516:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <Relay_toggle+0x34>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d107      	bne.n	800b52e <Relay_toggle+0x1a>
		if (Relay_Oldstate == STATE_ON)
 800b51e:	4b0b      	ldr	r3, [pc, #44]	; (800b54c <Relay_toggle+0x38>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d006      	beq.n	800b534 <Relay_toggle+0x20>
	Module_Status result = H0FR6_OK;	
 800b526:	2000      	movs	r0, #0
		else if (Relay_Oldstate == STATE_PWM)
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d008      	beq.n	800b53e <Relay_toggle+0x2a>
}
 800b52c:	bd10      	pop	{r4, pc}
		result = Relay_off();
 800b52e:	f7ff ff73 	bl	800b418 <Relay_off>
 800b532:	e7fb      	b.n	800b52c <Relay_toggle+0x18>
			result = Relay_on(portMAX_DELAY);
 800b534:	2001      	movs	r0, #1
 800b536:	4240      	negs	r0, r0
 800b538:	f7ff fed2 	bl	800b2e0 <Relay_on>
 800b53c:	e7f6      	b.n	800b52c <Relay_toggle+0x18>
			result = Relay_PWM(Relay_OldDC);
 800b53e:	4b04      	ldr	r3, [pc, #16]	; (800b550 <Relay_toggle+0x3c>)
 800b540:	6818      	ldr	r0, [r3, #0]
 800b542:	f7ff ffaf 	bl	800b4a4 <Relay_PWM>
 800b546:	e7f1      	b.n	800b52c <Relay_toggle+0x18>
 800b548:	20001668 	.word	0x20001668
 800b54c:	20000084 	.word	0x20000084
 800b550:	200069dc 	.word	0x200069dc

0800b554 <toggleCommand>:
{
 800b554:	b510      	push	{r4, lr}
 800b556:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800b558:	d101      	bne.n	800b55e <toggleCommand+0xa>
 800b55a:	b672      	cpsid	i
 800b55c:	e7fe      	b.n	800b55c <toggleCommand+0x8>
	result = Relay_toggle();	
 800b55e:	f7ff ffd9 	bl	800b514 <Relay_toggle>
	if (result == H0FR6_OK) {
 800b562:	2800      	cmp	r0, #0
 800b564:	d10e      	bne.n	800b584 <toggleCommand+0x30>
		if (Relay_state) {
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <toggleCommand+0x34>)
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d105      	bne.n	800b57a <toggleCommand+0x26>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800b56e:	2222      	movs	r2, #34	; 0x22
 800b570:	4906      	ldr	r1, [pc, #24]	; (800b58c <toggleCommand+0x38>)
 800b572:	0020      	movs	r0, r4
 800b574:	f007 fc5b 	bl	8012e2e <memcpy>
 800b578:	e004      	b.n	800b584 <toggleCommand+0x30>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800b57a:	2221      	movs	r2, #33	; 0x21
 800b57c:	4904      	ldr	r1, [pc, #16]	; (800b590 <toggleCommand+0x3c>)
 800b57e:	0020      	movs	r0, r4
 800b580:	f007 fc55 	bl	8012e2e <memcpy>
}
 800b584:	2000      	movs	r0, #0
 800b586:	bd10      	pop	{r4, pc}
 800b588:	20001668 	.word	0x20001668
 800b58c:	0801a060 	.word	0x0801a060
 800b590:	0801a340 	.word	0x0801a340

0800b594 <Module_MessagingTask>:
{
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	46ce      	mov	lr, r9
 800b598:	4647      	mov	r7, r8
 800b59a:	b580      	push	{r7, lr}
 800b59c:	ab08      	add	r3, sp, #32
 800b59e:	781e      	ldrb	r6, [r3, #0]
	switch (code)
 800b5a0:	4b2c      	ldr	r3, [pc, #176]	; (800b654 <Module_MessagingTask+0xc0>)
 800b5a2:	4298      	cmp	r0, r3
 800b5a4:	d04c      	beq.n	800b640 <Module_MessagingTask+0xac>
 800b5a6:	d92e      	bls.n	800b606 <Module_MessagingTask+0x72>
 800b5a8:	23bc      	movs	r3, #188	; 0xbc
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4298      	cmp	r0, r3
 800b5ae:	d04b      	beq.n	800b648 <Module_MessagingTask+0xb4>
 800b5b0:	4b29      	ldr	r3, [pc, #164]	; (800b658 <Module_MessagingTask+0xc4>)
 800b5b2:	4298      	cmp	r0, r3
 800b5b4:	d14c      	bne.n	800b650 <Module_MessagingTask+0xbc>
			tempFloat = (float)( ((uint64_t)cMessage[port-1][shift]<<24) + ((uint64_t)cMessage[port-1][1+shift]<<16) + ((uint64_t)cMessage[port-1][2+shift]<<8) + ((uint64_t)cMessage[port-1][3+shift]) );
 800b5b6:	3901      	subs	r1, #1
 800b5b8:	4b28      	ldr	r3, [pc, #160]	; (800b65c <Module_MessagingTask+0xc8>)
 800b5ba:	4699      	mov	r9, r3
 800b5bc:	00c8      	lsls	r0, r1, #3
 800b5be:	1a43      	subs	r3, r0, r1
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	444b      	add	r3, r9
 800b5c4:	199a      	adds	r2, r3, r6
 800b5c6:	4694      	mov	ip, r2
 800b5c8:	7852      	ldrb	r2, [r2, #1]
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	0414      	lsls	r4, r2, #16
 800b5ce:	5d9b      	ldrb	r3, [r3, r6]
 800b5d0:	4698      	mov	r8, r3
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4647      	mov	r7, r8
 800b5d6:	063a      	lsls	r2, r7, #24
 800b5d8:	18a4      	adds	r4, r4, r2
 800b5da:	415d      	adcs	r5, r3
 800b5dc:	4667      	mov	r7, ip
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	1912      	adds	r2, r2, r4
 800b5e4:	416b      	adcs	r3, r5
 800b5e6:	4666      	mov	r6, ip
 800b5e8:	78b1      	ldrb	r1, [r6, #2]
 800b5ea:	2500      	movs	r5, #0
 800b5ec:	020c      	lsls	r4, r1, #8
 800b5ee:	1912      	adds	r2, r2, r4
 800b5f0:	416b      	adcs	r3, r5
 800b5f2:	0010      	movs	r0, r2
 800b5f4:	0019      	movs	r1, r3
 800b5f6:	f7f5 f819 	bl	800062c <__aeabi_ul2f>
 800b5fa:	4b19      	ldr	r3, [pc, #100]	; (800b660 <Module_MessagingTask+0xcc>)
 800b5fc:	6018      	str	r0, [r3, #0]
			Relay_PWM(tempFloat);
 800b5fe:	f7ff ff51 	bl	800b4a4 <Relay_PWM>
	Module_Status result = H0FR6_OK; 
 800b602:	2000      	movs	r0, #0
			break;
 800b604:	e018      	b.n	800b638 <Module_MessagingTask+0xa4>
	switch (code)
 800b606:	4b17      	ldr	r3, [pc, #92]	; (800b664 <Module_MessagingTask+0xd0>)
 800b608:	4298      	cmp	r0, r3
 800b60a:	d121      	bne.n	800b650 <Module_MessagingTask+0xbc>
			temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];						
 800b60c:	3901      	subs	r1, #1
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <Module_MessagingTask+0xc8>)
 800b610:	00ca      	lsls	r2, r1, #3
 800b612:	1a54      	subs	r4, r2, r1
 800b614:	00e4      	lsls	r4, r4, #3
 800b616:	191c      	adds	r4, r3, r4
 800b618:	19a5      	adds	r5, r4, r6
 800b61a:	7868      	ldrb	r0, [r5, #1]
 800b61c:	0400      	lsls	r0, r0, #16
 800b61e:	5da4      	ldrb	r4, [r4, r6]
 800b620:	0624      	lsls	r4, r4, #24
 800b622:	1900      	adds	r0, r0, r4
 800b624:	78ec      	ldrb	r4, [r5, #3]
 800b626:	1900      	adds	r0, r0, r4
 800b628:	78ab      	ldrb	r3, [r5, #2]
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	18c0      	adds	r0, r0, r3
 800b62e:	4b0e      	ldr	r3, [pc, #56]	; (800b668 <Module_MessagingTask+0xd4>)
 800b630:	6018      	str	r0, [r3, #0]
			Relay_on(temp32);
 800b632:	f7ff fe55 	bl	800b2e0 <Relay_on>
	Module_Status result = H0FR6_OK; 
 800b636:	2000      	movs	r0, #0
}
 800b638:	bc0c      	pop	{r2, r3}
 800b63a:	4690      	mov	r8, r2
 800b63c:	4699      	mov	r9, r3
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Relay_off();
 800b640:	f7ff feea 	bl	800b418 <Relay_off>
	Module_Status result = H0FR6_OK; 
 800b644:	2000      	movs	r0, #0
			break;
 800b646:	e7f7      	b.n	800b638 <Module_MessagingTask+0xa4>
			Relay_toggle();
 800b648:	f7ff ff64 	bl	800b514 <Relay_toggle>
	Module_Status result = H0FR6_OK; 
 800b64c:	2000      	movs	r0, #0
			break;
 800b64e:	e7f3      	b.n	800b638 <Module_MessagingTask+0xa4>
			result = H0FR6_ERR_UnknownMessage;
 800b650:	2001      	movs	r0, #1
 800b652:	e7f1      	b.n	800b638 <Module_MessagingTask+0xa4>
 800b654:	000002ef 	.word	0x000002ef
 800b658:	000002f1 	.word	0x000002f1
 800b65c:	20000cf0 	.word	0x20000cf0
 800b660:	20006afc 	.word	0x20006afc
 800b664:	000002ee 	.word	0x000002ee
 800b668:	20006b00 	.word	0x20006b00

0800b66c <pwmCommand>:

/*-----------------------------------------------------------*/
#ifdef H0FR6
portBASE_TYPE pwmCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b66c:	b530      	push	{r4, r5, lr}
 800b66e:	b083      	sub	sp, #12
 800b670:	0005      	movs	r5, r0
 800b672:	0010      	movs	r0, r2
	Module_Status result = H0FR6_OK;
	
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b674:	2300      	movs	r3, #0
 800b676:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b678:	2d00      	cmp	r5, #0
 800b67a:	d101      	bne.n	800b680 <pwmCommand+0x14>
 800b67c:	b672      	cpsid	i
 800b67e:	e7fe      	b.n	800b67e <pwmCommand+0x12>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b680:	aa01      	add	r2, sp, #4
 800b682:	2101      	movs	r1, #1
 800b684:	f002 f890 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
									pcCommandString,		/* The command string itself. */
									1,						/* Return the first parameter. */
									&xParameterStringLength1	/* Store the parameter string length. */
								);
	
	dutycycle = ( float ) atof( ( char * ) pcParameterString1 );
 800b688:	f007 f93c 	bl	8012904 <atof>
 800b68c:	f7f7 fbd2 	bl	8002e34 <__aeabi_d2f>
 800b690:	1c04      	adds	r4, r0, #0
	
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800b692:	2100      	movs	r1, #0
 800b694:	f7f4 ff22 	bl	80004dc <__aeabi_fcmplt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d105      	bne.n	800b6a8 <pwmCommand+0x3c>
 800b69c:	490f      	ldr	r1, [pc, #60]	; (800b6dc <pwmCommand+0x70>)
 800b69e:	1c20      	adds	r0, r4, #0
 800b6a0:	f7f4 ff30 	bl	8000504 <__aeabi_fcmpgt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d005      	beq.n	800b6b4 <pwmCommand+0x48>
	
	/* Respond to the command */
	if (result == H0FR6_OK) {
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, dutycycle);
	} else if (result == H0FR6_ERR_Wrong_Value) {
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongValue);
 800b6a8:	2236      	movs	r2, #54	; 0x36
 800b6aa:	490d      	ldr	r1, [pc, #52]	; (800b6e0 <pwmCommand+0x74>)
 800b6ac:	0028      	movs	r0, r5
 800b6ae:	f007 fbbe 	bl	8012e2e <memcpy>
 800b6b2:	e00d      	b.n	800b6d0 <pwmCommand+0x64>
		result = Relay_PWM(dutycycle);	
 800b6b4:	1c20      	adds	r0, r4, #0
 800b6b6:	f7ff fef5 	bl	800b4a4 <Relay_PWM>
	if (result == H0FR6_OK) {
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d10b      	bne.n	800b6d6 <pwmCommand+0x6a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, dutycycle);
 800b6be:	1c20      	adds	r0, r4, #0
 800b6c0:	f7f7 fb66 	bl	8002d90 <__aeabi_f2d>
 800b6c4:	0002      	movs	r2, r0
 800b6c6:	000b      	movs	r3, r1
 800b6c8:	4906      	ldr	r1, [pc, #24]	; (800b6e4 <pwmCommand+0x78>)
 800b6ca:	0028      	movs	r0, r5
 800b6cc:	f007 fdb2 	bl	8013234 <sprintf>
	}
	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	b003      	add	sp, #12
 800b6d4:	bd30      	pop	{r4, r5, pc}
	} else if (result == H0FR6_ERR_Wrong_Value) {
 800b6d6:	2802      	cmp	r0, #2
 800b6d8:	d1fa      	bne.n	800b6d0 <pwmCommand+0x64>
 800b6da:	e7e5      	b.n	800b6a8 <pwmCommand+0x3c>
 800b6dc:	42c80000 	.word	0x42c80000
 800b6e0:	0801a158 	.word	0x0801a158
 800b6e4:	0801a114 	.word	0x0801a114

0800b6e8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b6e8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b6ea:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b6f0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b6f2:	2280      	movs	r2, #128	; 0x80
 800b6f4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6f6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b6f8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b6fa:	3320      	adds	r3, #32
 800b6fc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b6fe:	2380      	movs	r3, #128	; 0x80
 800b700:	019b      	lsls	r3, r3, #6
 800b702:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b704:	f004 f928 	bl	800f958 <HAL_DMA_Init>
}
 800b708:	bd10      	pop	{r4, pc}

0800b70a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b70a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b70c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b70e:	2310      	movs	r3, #16
 800b710:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b712:	2300      	movs	r3, #0
 800b714:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b716:	2280      	movs	r2, #128	; 0x80
 800b718:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b71a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b71c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b71e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b720:	2380      	movs	r3, #128	; 0x80
 800b722:	019b      	lsls	r3, r3, #6
 800b724:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b726:	f004 f917 	bl	800f958 <HAL_DMA_Init>
}
 800b72a:	bd10      	pop	{r4, pc}

0800b72c <DMA_Init>:
{
 800b72c:	b510      	push	{r4, lr}
 800b72e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b730:	4b1d      	ldr	r3, [pc, #116]	; (800b7a8 <DMA_Init+0x7c>)
 800b732:	6959      	ldr	r1, [r3, #20]
 800b734:	2201      	movs	r2, #1
 800b736:	4311      	orrs	r1, r2
 800b738:	6159      	str	r1, [r3, #20]
 800b73a:	6959      	ldr	r1, [r3, #20]
 800b73c:	400a      	ands	r2, r1
 800b73e:	9200      	str	r2, [sp, #0]
 800b740:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b742:	6959      	ldr	r1, [r3, #20]
 800b744:	2202      	movs	r2, #2
 800b746:	4311      	orrs	r1, r2
 800b748:	6159      	str	r1, [r3, #20]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	401a      	ands	r2, r3
 800b74e:	9201      	str	r2, [sp, #4]
 800b750:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b752:	4c16      	ldr	r4, [pc, #88]	; (800b7ac <DMA_Init+0x80>)
 800b754:	4916      	ldr	r1, [pc, #88]	; (800b7b0 <DMA_Init+0x84>)
 800b756:	0020      	movs	r0, r4
 800b758:	f7ff ffc6 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b75c:	0020      	movs	r0, r4
 800b75e:	3038      	adds	r0, #56	; 0x38
 800b760:	4914      	ldr	r1, [pc, #80]	; (800b7b4 <DMA_Init+0x88>)
 800b762:	f7ff ffc1 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b766:	0020      	movs	r0, r4
 800b768:	3070      	adds	r0, #112	; 0x70
 800b76a:	4913      	ldr	r1, [pc, #76]	; (800b7b8 <DMA_Init+0x8c>)
 800b76c:	f7ff ffbc 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800b770:	0020      	movs	r0, r4
 800b772:	30a8      	adds	r0, #168	; 0xa8
 800b774:	4911      	ldr	r1, [pc, #68]	; (800b7bc <DMA_Init+0x90>)
 800b776:	f7ff ffb7 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800b77a:	0020      	movs	r0, r4
 800b77c:	30e0      	adds	r0, #224	; 0xe0
 800b77e:	4910      	ldr	r1, [pc, #64]	; (800b7c0 <DMA_Init+0x94>)
 800b780:	f7ff ffb2 	bl	800b6e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b784:	4c0f      	ldr	r4, [pc, #60]	; (800b7c4 <DMA_Init+0x98>)
 800b786:	4910      	ldr	r1, [pc, #64]	; (800b7c8 <DMA_Init+0x9c>)
 800b788:	0020      	movs	r0, r4
 800b78a:	f7ff ffbe 	bl	800b70a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b78e:	0020      	movs	r0, r4
 800b790:	3038      	adds	r0, #56	; 0x38
 800b792:	490e      	ldr	r1, [pc, #56]	; (800b7cc <DMA_Init+0xa0>)
 800b794:	f7ff ffb9 	bl	800b70a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b798:	0020      	movs	r0, r4
 800b79a:	3070      	adds	r0, #112	; 0x70
 800b79c:	490c      	ldr	r1, [pc, #48]	; (800b7d0 <DMA_Init+0xa4>)
 800b79e:	f7ff ffb4 	bl	800b70a <DMA_MSG_TX_CH_Init>
}
 800b7a2:	b002      	add	sp, #8
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	40021000 	.word	0x40021000
 800b7ac:	20001670 	.word	0x20001670
 800b7b0:	40020008 	.word	0x40020008
 800b7b4:	40020030 	.word	0x40020030
 800b7b8:	40020058 	.word	0x40020058
 800b7bc:	4002006c 	.word	0x4002006c
 800b7c0:	4002041c 	.word	0x4002041c
 800b7c4:	200017c0 	.word	0x200017c0
 800b7c8:	4002001c 	.word	0x4002001c
 800b7cc:	40020044 	.word	0x40020044
 800b7d0:	40020080 	.word	0x40020080

0800b7d4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b7d4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b7d6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7dc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b7de:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7e0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7e2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7e4:	3320      	adds	r3, #32
 800b7e6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	015b      	lsls	r3, r3, #5
 800b7ec:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b7ee:	f004 f8b3 	bl	800f958 <HAL_DMA_Init>
}
 800b7f2:	bd10      	pop	{r4, pc}

0800b7f4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b7f4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b7f6:	6803      	ldr	r3, [r0, #0]
 800b7f8:	4a20      	ldr	r2, [pc, #128]	; (800b87c <SetupDMAInterrupts+0x88>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d020      	beq.n	800b840 <SetupDMAInterrupts+0x4c>
 800b7fe:	d827      	bhi.n	800b850 <SetupDMAInterrupts+0x5c>
 800b800:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <SetupDMAInterrupts+0x8c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00e      	beq.n	800b824 <SetupDMAInterrupts+0x30>
 800b806:	d815      	bhi.n	800b834 <SetupDMAInterrupts+0x40>
 800b808:	4a1e      	ldr	r2, [pc, #120]	; (800b884 <SetupDMAInterrupts+0x90>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d107      	bne.n	800b81e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b80e:	2200      	movs	r2, #0
 800b810:	2009      	movs	r0, #9
 800b812:	f003 ff03 	bl	800f61c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b816:	2009      	movs	r0, #9
 800b818:	f003 ff34 	bl	800f684 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b81c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b81e:	4a1a      	ldr	r2, [pc, #104]	; (800b888 <SetupDMAInterrupts+0x94>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d1fb      	bne.n	800b81c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b824:	2200      	movs	r2, #0
 800b826:	200a      	movs	r0, #10
 800b828:	f003 fef8 	bl	800f61c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b82c:	200a      	movs	r0, #10
 800b82e:	f003 ff29 	bl	800f684 <HAL_NVIC_EnableIRQ>
			break;
 800b832:	e7f3      	b.n	800b81c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b834:	4a15      	ldr	r2, [pc, #84]	; (800b88c <SetupDMAInterrupts+0x98>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d002      	beq.n	800b840 <SetupDMAInterrupts+0x4c>
 800b83a:	4a15      	ldr	r2, [pc, #84]	; (800b890 <SetupDMAInterrupts+0x9c>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d1ed      	bne.n	800b81c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b840:	2200      	movs	r2, #0
 800b842:	200b      	movs	r0, #11
 800b844:	f003 feea 	bl	800f61c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b848:	200b      	movs	r0, #11
 800b84a:	f003 ff1b 	bl	800f684 <HAL_NVIC_EnableIRQ>
}
 800b84e:	e7e5      	b.n	800b81c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b850:	4a10      	ldr	r2, [pc, #64]	; (800b894 <SetupDMAInterrupts+0xa0>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d0e6      	beq.n	800b824 <SetupDMAInterrupts+0x30>
 800b856:	d909      	bls.n	800b86c <SetupDMAInterrupts+0x78>
 800b858:	4a0f      	ldr	r2, [pc, #60]	; (800b898 <SetupDMAInterrupts+0xa4>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d0f0      	beq.n	800b840 <SetupDMAInterrupts+0x4c>
 800b85e:	4a0f      	ldr	r2, [pc, #60]	; (800b89c <SetupDMAInterrupts+0xa8>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d0ed      	beq.n	800b840 <SetupDMAInterrupts+0x4c>
 800b864:	4a0e      	ldr	r2, [pc, #56]	; (800b8a0 <SetupDMAInterrupts+0xac>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d1d8      	bne.n	800b81c <SetupDMAInterrupts+0x28>
 800b86a:	e7e9      	b.n	800b840 <SetupDMAInterrupts+0x4c>
 800b86c:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <SetupDMAInterrupts+0xb0>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d0e6      	beq.n	800b840 <SetupDMAInterrupts+0x4c>
 800b872:	4a0d      	ldr	r2, [pc, #52]	; (800b8a8 <SetupDMAInterrupts+0xb4>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d0d5      	beq.n	800b824 <SetupDMAInterrupts+0x30>
 800b878:	e7d0      	b.n	800b81c <SetupDMAInterrupts+0x28>
 800b87a:	46c0      	nop			; (mov r8, r8)
 800b87c:	4002006c 	.word	0x4002006c
 800b880:	40020030 	.word	0x40020030
 800b884:	40020008 	.word	0x40020008
 800b888:	4002001c 	.word	0x4002001c
 800b88c:	40020044 	.word	0x40020044
 800b890:	40020058 	.word	0x40020058
 800b894:	4002041c 	.word	0x4002041c
 800b898:	40020444 	.word	0x40020444
 800b89c:	40020458 	.word	0x40020458
 800b8a0:	40020430 	.word	0x40020430
 800b8a4:	40020080 	.word	0x40020080
 800b8a8:	40020408 	.word	0x40020408

0800b8ac <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b8ac:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b8ae:	6803      	ldr	r3, [r0, #0]
 800b8b0:	4a1a      	ldr	r2, [pc, #104]	; (800b91c <UnSetupDMAInterrupts+0x70>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d018      	beq.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b8b6:	d81b      	bhi.n	800b8f0 <UnSetupDMAInterrupts+0x44>
 800b8b8:	4a19      	ldr	r2, [pc, #100]	; (800b920 <UnSetupDMAInterrupts+0x74>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00a      	beq.n	800b8d4 <UnSetupDMAInterrupts+0x28>
 800b8be:	d80d      	bhi.n	800b8dc <UnSetupDMAInterrupts+0x30>
 800b8c0:	4a18      	ldr	r2, [pc, #96]	; (800b924 <UnSetupDMAInterrupts+0x78>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d103      	bne.n	800b8ce <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b8c6:	2009      	movs	r0, #9
 800b8c8:	f003 fee6 	bl	800f698 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b8cc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b8ce:	4a16      	ldr	r2, [pc, #88]	; (800b928 <UnSetupDMAInterrupts+0x7c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d1fb      	bne.n	800b8cc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b8d4:	200a      	movs	r0, #10
 800b8d6:	f003 fedf 	bl	800f698 <HAL_NVIC_DisableIRQ>
			break;
 800b8da:	e7f7      	b.n	800b8cc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b8dc:	4a13      	ldr	r2, [pc, #76]	; (800b92c <UnSetupDMAInterrupts+0x80>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d002      	beq.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b8e2:	4a13      	ldr	r2, [pc, #76]	; (800b930 <UnSetupDMAInterrupts+0x84>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d1f1      	bne.n	800b8cc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b8e8:	200b      	movs	r0, #11
 800b8ea:	f003 fed5 	bl	800f698 <HAL_NVIC_DisableIRQ>
}
 800b8ee:	e7ed      	b.n	800b8cc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b8f0:	4a10      	ldr	r2, [pc, #64]	; (800b934 <UnSetupDMAInterrupts+0x88>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d0ee      	beq.n	800b8d4 <UnSetupDMAInterrupts+0x28>
 800b8f6:	d909      	bls.n	800b90c <UnSetupDMAInterrupts+0x60>
 800b8f8:	4a0f      	ldr	r2, [pc, #60]	; (800b938 <UnSetupDMAInterrupts+0x8c>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d0f4      	beq.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b8fe:	4a0f      	ldr	r2, [pc, #60]	; (800b93c <UnSetupDMAInterrupts+0x90>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d0f1      	beq.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b904:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <UnSetupDMAInterrupts+0x94>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d1e0      	bne.n	800b8cc <UnSetupDMAInterrupts+0x20>
 800b90a:	e7ed      	b.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b90c:	4a0d      	ldr	r2, [pc, #52]	; (800b944 <UnSetupDMAInterrupts+0x98>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d0ea      	beq.n	800b8e8 <UnSetupDMAInterrupts+0x3c>
 800b912:	4a0d      	ldr	r2, [pc, #52]	; (800b948 <UnSetupDMAInterrupts+0x9c>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d0dd      	beq.n	800b8d4 <UnSetupDMAInterrupts+0x28>
 800b918:	e7d8      	b.n	800b8cc <UnSetupDMAInterrupts+0x20>
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	4002006c 	.word	0x4002006c
 800b920:	40020030 	.word	0x40020030
 800b924:	40020008 	.word	0x40020008
 800b928:	4002001c 	.word	0x4002001c
 800b92c:	40020044 	.word	0x40020044
 800b930:	40020058 	.word	0x40020058
 800b934:	4002041c 	.word	0x4002041c
 800b938:	40020444 	.word	0x40020444
 800b93c:	40020458 	.word	0x40020458
 800b940:	40020430 	.word	0x40020430
 800b944:	40020080 	.word	0x40020080
 800b948:	40020408 	.word	0x40020408

0800b94c <DMA_MSG_TX_UnSetup>:
{	
 800b94c:	b510      	push	{r4, lr}
 800b94e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b950:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b952:	f7ff ffab 	bl	800b8ac <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b956:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b958:	2300      	movs	r3, #0
 800b95a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b95c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b95e:	bd10      	pop	{r4, pc}

0800b960 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b960:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b962:	6803      	ldr	r3, [r0, #0]
 800b964:	4abd      	ldr	r2, [pc, #756]	; (800bc5c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d02f      	beq.n	800b9ca <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b96a:	4abd      	ldr	r2, [pc, #756]	; (800bc60 <RemapAndLinkDMAtoUARTRx+0x300>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d100      	bne.n	800b972 <RemapAndLinkDMAtoUARTRx+0x12>
 800b970:	e087      	b.n	800ba82 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b972:	4abc      	ldr	r2, [pc, #752]	; (800bc64 <RemapAndLinkDMAtoUARTRx+0x304>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d100      	bne.n	800b97a <RemapAndLinkDMAtoUARTRx+0x1a>
 800b978:	e0dc      	b.n	800bb34 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b97a:	4abb      	ldr	r2, [pc, #748]	; (800bc68 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d000      	beq.n	800b982 <RemapAndLinkDMAtoUARTRx+0x22>
 800b980:	e18a      	b.n	800bc98 <RemapAndLinkDMAtoUARTRx+0x338>
 800b982:	680b      	ldr	r3, [r1, #0]
 800b984:	4ab9      	ldr	r2, [pc, #740]	; (800bc6c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d100      	bne.n	800b98c <RemapAndLinkDMAtoUARTRx+0x2c>
 800b98a:	e12d      	b.n	800bbe8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b98c:	4ab8      	ldr	r2, [pc, #736]	; (800bc70 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d100      	bne.n	800b994 <RemapAndLinkDMAtoUARTRx+0x34>
 800b992:	e134      	b.n	800bbfe <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b994:	4ab7      	ldr	r2, [pc, #732]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d100      	bne.n	800b99c <RemapAndLinkDMAtoUARTRx+0x3c>
 800b99a:	e13c      	b.n	800bc16 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b99c:	4ab6      	ldr	r2, [pc, #728]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d100      	bne.n	800b9a4 <RemapAndLinkDMAtoUARTRx+0x44>
 800b9a2:	e144      	b.n	800bc2e <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b9a4:	4ab5      	ldr	r2, [pc, #724]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d100      	bne.n	800b9ac <RemapAndLinkDMAtoUARTRx+0x4c>
 800b9aa:	e14c      	b.n	800bc46 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b9ac:	4ab4      	ldr	r2, [pc, #720]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d11e      	bne.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b9b2:	4ab4      	ldr	r2, [pc, #720]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b9b4:	23a8      	movs	r3, #168	; 0xa8
 800b9b6:	58d4      	ldr	r4, [r2, r3]
 800b9b8:	4db3      	ldr	r5, [pc, #716]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b9ba:	402c      	ands	r4, r5
 800b9bc:	50d4      	str	r4, [r2, r3]
 800b9be:	58d5      	ldr	r5, [r2, r3]
 800b9c0:	24b0      	movs	r4, #176	; 0xb0
 800b9c2:	0124      	lsls	r4, r4, #4
 800b9c4:	432c      	orrs	r4, r5
 800b9c6:	50d4      	str	r4, [r2, r3]
 800b9c8:	e012      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b9ca:	680b      	ldr	r3, [r1, #0]
 800b9cc:	4aa7      	ldr	r2, [pc, #668]	; (800bc6c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d011      	beq.n	800b9f6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b9d2:	4aa7      	ldr	r2, [pc, #668]	; (800bc70 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d019      	beq.n	800ba0c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b9d8:	4aa6      	ldr	r2, [pc, #664]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d022      	beq.n	800ba24 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b9de:	4aa6      	ldr	r2, [pc, #664]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d02b      	beq.n	800ba3c <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b9e4:	4aa5      	ldr	r2, [pc, #660]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d034      	beq.n	800ba54 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b9ea:	4aa5      	ldr	r2, [pc, #660]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d03c      	beq.n	800ba6a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b9f0:	6641      	str	r1, [r0, #100]	; 0x64
 800b9f2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b9f6:	4aa5      	ldr	r2, [pc, #660]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b9f8:	23a8      	movs	r3, #168	; 0xa8
 800b9fa:	58d4      	ldr	r4, [r2, r3]
 800b9fc:	250f      	movs	r5, #15
 800b9fe:	43ac      	bics	r4, r5
 800ba00:	50d4      	str	r4, [r2, r3]
 800ba02:	58d4      	ldr	r4, [r2, r3]
 800ba04:	3d07      	subs	r5, #7
 800ba06:	432c      	orrs	r4, r5
 800ba08:	50d4      	str	r4, [r2, r3]
 800ba0a:	e7f1      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800ba0c:	4a9f      	ldr	r2, [pc, #636]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba0e:	23a8      	movs	r3, #168	; 0xa8
 800ba10:	58d4      	ldr	r4, [r2, r3]
 800ba12:	4d9d      	ldr	r5, [pc, #628]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba14:	402c      	ands	r4, r5
 800ba16:	50d4      	str	r4, [r2, r3]
 800ba18:	58d5      	ldr	r5, [r2, r3]
 800ba1a:	2480      	movs	r4, #128	; 0x80
 800ba1c:	0124      	lsls	r4, r4, #4
 800ba1e:	432c      	orrs	r4, r5
 800ba20:	50d4      	str	r4, [r2, r3]
 800ba22:	e7e5      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ba24:	4a99      	ldr	r2, [pc, #612]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba26:	23a8      	movs	r3, #168	; 0xa8
 800ba28:	58d4      	ldr	r4, [r2, r3]
 800ba2a:	4d99      	ldr	r5, [pc, #612]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ba2c:	402c      	ands	r4, r5
 800ba2e:	50d4      	str	r4, [r2, r3]
 800ba30:	58d5      	ldr	r5, [r2, r3]
 800ba32:	2480      	movs	r4, #128	; 0x80
 800ba34:	0324      	lsls	r4, r4, #12
 800ba36:	432c      	orrs	r4, r5
 800ba38:	50d4      	str	r4, [r2, r3]
 800ba3a:	e7d9      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ba3c:	4a93      	ldr	r2, [pc, #588]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba3e:	23a8      	movs	r3, #168	; 0xa8
 800ba40:	58d4      	ldr	r4, [r2, r3]
 800ba42:	4d94      	ldr	r5, [pc, #592]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ba44:	402c      	ands	r4, r5
 800ba46:	50d4      	str	r4, [r2, r3]
 800ba48:	58d5      	ldr	r5, [r2, r3]
 800ba4a:	2480      	movs	r4, #128	; 0x80
 800ba4c:	0424      	lsls	r4, r4, #16
 800ba4e:	432c      	orrs	r4, r5
 800ba50:	50d4      	str	r4, [r2, r3]
 800ba52:	e7cd      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ba54:	4a8b      	ldr	r2, [pc, #556]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba56:	23a8      	movs	r3, #168	; 0xa8
 800ba58:	58d4      	ldr	r4, [r2, r3]
 800ba5a:	25f0      	movs	r5, #240	; 0xf0
 800ba5c:	43ac      	bics	r4, r5
 800ba5e:	50d4      	str	r4, [r2, r3]
 800ba60:	58d4      	ldr	r4, [r2, r3]
 800ba62:	3d70      	subs	r5, #112	; 0x70
 800ba64:	432c      	orrs	r4, r5
 800ba66:	50d4      	str	r4, [r2, r3]
 800ba68:	e7c2      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ba6a:	4a86      	ldr	r2, [pc, #536]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba6c:	23a8      	movs	r3, #168	; 0xa8
 800ba6e:	58d4      	ldr	r4, [r2, r3]
 800ba70:	4d85      	ldr	r5, [pc, #532]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba72:	402c      	ands	r4, r5
 800ba74:	50d4      	str	r4, [r2, r3]
 800ba76:	58d5      	ldr	r5, [r2, r3]
 800ba78:	2480      	movs	r4, #128	; 0x80
 800ba7a:	0124      	lsls	r4, r4, #4
 800ba7c:	432c      	orrs	r4, r5
 800ba7e:	50d4      	str	r4, [r2, r3]
 800ba80:	e7b6      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ba82:	680b      	ldr	r3, [r1, #0]
 800ba84:	4a79      	ldr	r2, [pc, #484]	; (800bc6c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d01a      	beq.n	800bac0 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ba8a:	4a79      	ldr	r2, [pc, #484]	; (800bc70 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d022      	beq.n	800bad6 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ba90:	4a78      	ldr	r2, [pc, #480]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d02b      	beq.n	800baee <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ba96:	4a78      	ldr	r2, [pc, #480]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d034      	beq.n	800bb06 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ba9c:	4a77      	ldr	r2, [pc, #476]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d03d      	beq.n	800bb1e <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800baa2:	4a77      	ldr	r2, [pc, #476]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x320>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d1a3      	bne.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800baa8:	4a76      	ldr	r2, [pc, #472]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800baaa:	23a8      	movs	r3, #168	; 0xa8
 800baac:	58d4      	ldr	r4, [r2, r3]
 800baae:	4d76      	ldr	r5, [pc, #472]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bab0:	402c      	ands	r4, r5
 800bab2:	50d4      	str	r4, [r2, r3]
 800bab4:	58d5      	ldr	r5, [r2, r3]
 800bab6:	2490      	movs	r4, #144	; 0x90
 800bab8:	0124      	lsls	r4, r4, #4
 800baba:	432c      	orrs	r4, r5
 800babc:	50d4      	str	r4, [r2, r3]
 800babe:	e797      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bac0:	4a72      	ldr	r2, [pc, #456]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bac2:	23a8      	movs	r3, #168	; 0xa8
 800bac4:	58d4      	ldr	r4, [r2, r3]
 800bac6:	250f      	movs	r5, #15
 800bac8:	43ac      	bics	r4, r5
 800baca:	50d4      	str	r4, [r2, r3]
 800bacc:	58d4      	ldr	r4, [r2, r3]
 800bace:	3d06      	subs	r5, #6
 800bad0:	432c      	orrs	r4, r5
 800bad2:	50d4      	str	r4, [r2, r3]
 800bad4:	e78c      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bad6:	4a6d      	ldr	r2, [pc, #436]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bad8:	23a8      	movs	r3, #168	; 0xa8
 800bada:	58d4      	ldr	r4, [r2, r3]
 800badc:	4d6a      	ldr	r5, [pc, #424]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bade:	402c      	ands	r4, r5
 800bae0:	50d4      	str	r4, [r2, r3]
 800bae2:	58d5      	ldr	r5, [r2, r3]
 800bae4:	2490      	movs	r4, #144	; 0x90
 800bae6:	0124      	lsls	r4, r4, #4
 800bae8:	432c      	orrs	r4, r5
 800baea:	50d4      	str	r4, [r2, r3]
 800baec:	e780      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800baee:	4a67      	ldr	r2, [pc, #412]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800baf0:	23a8      	movs	r3, #168	; 0xa8
 800baf2:	58d4      	ldr	r4, [r2, r3]
 800baf4:	4d66      	ldr	r5, [pc, #408]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x330>)
 800baf6:	402c      	ands	r4, r5
 800baf8:	50d4      	str	r4, [r2, r3]
 800bafa:	58d5      	ldr	r5, [r2, r3]
 800bafc:	2490      	movs	r4, #144	; 0x90
 800bafe:	0324      	lsls	r4, r4, #12
 800bb00:	432c      	orrs	r4, r5
 800bb02:	50d4      	str	r4, [r2, r3]
 800bb04:	e774      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bb06:	4a61      	ldr	r2, [pc, #388]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb08:	23a8      	movs	r3, #168	; 0xa8
 800bb0a:	58d4      	ldr	r4, [r2, r3]
 800bb0c:	4d61      	ldr	r5, [pc, #388]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb0e:	402c      	ands	r4, r5
 800bb10:	50d4      	str	r4, [r2, r3]
 800bb12:	58d5      	ldr	r5, [r2, r3]
 800bb14:	2490      	movs	r4, #144	; 0x90
 800bb16:	0424      	lsls	r4, r4, #16
 800bb18:	432c      	orrs	r4, r5
 800bb1a:	50d4      	str	r4, [r2, r3]
 800bb1c:	e768      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bb1e:	4a59      	ldr	r2, [pc, #356]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb20:	23a8      	movs	r3, #168	; 0xa8
 800bb22:	58d4      	ldr	r4, [r2, r3]
 800bb24:	25f0      	movs	r5, #240	; 0xf0
 800bb26:	43ac      	bics	r4, r5
 800bb28:	50d4      	str	r4, [r2, r3]
 800bb2a:	58d4      	ldr	r4, [r2, r3]
 800bb2c:	3d60      	subs	r5, #96	; 0x60
 800bb2e:	432c      	orrs	r4, r5
 800bb30:	50d4      	str	r4, [r2, r3]
 800bb32:	e75d      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bb34:	680b      	ldr	r3, [r1, #0]
 800bb36:	4a4d      	ldr	r2, [pc, #308]	; (800bc6c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d01b      	beq.n	800bb74 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bb3c:	4a4c      	ldr	r2, [pc, #304]	; (800bc70 <RemapAndLinkDMAtoUARTRx+0x310>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d023      	beq.n	800bb8a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bb42:	4a4c      	ldr	r2, [pc, #304]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d02c      	beq.n	800bba2 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bb48:	4a4b      	ldr	r2, [pc, #300]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d035      	beq.n	800bbba <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bb4e:	4a4b      	ldr	r2, [pc, #300]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d03e      	beq.n	800bbd2 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bb54:	4a4a      	ldr	r2, [pc, #296]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d000      	beq.n	800bb5c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800bb5a:	e749      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bb5c:	4a49      	ldr	r2, [pc, #292]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb5e:	23a8      	movs	r3, #168	; 0xa8
 800bb60:	58d4      	ldr	r4, [r2, r3]
 800bb62:	4d49      	ldr	r5, [pc, #292]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb64:	402c      	ands	r4, r5
 800bb66:	50d4      	str	r4, [r2, r3]
 800bb68:	58d5      	ldr	r5, [r2, r3]
 800bb6a:	24a0      	movs	r4, #160	; 0xa0
 800bb6c:	0124      	lsls	r4, r4, #4
 800bb6e:	432c      	orrs	r4, r5
 800bb70:	50d4      	str	r4, [r2, r3]
 800bb72:	e73d      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bb74:	4a45      	ldr	r2, [pc, #276]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb76:	23a8      	movs	r3, #168	; 0xa8
 800bb78:	58d4      	ldr	r4, [r2, r3]
 800bb7a:	250f      	movs	r5, #15
 800bb7c:	43ac      	bics	r4, r5
 800bb7e:	50d4      	str	r4, [r2, r3]
 800bb80:	58d4      	ldr	r4, [r2, r3]
 800bb82:	3d05      	subs	r5, #5
 800bb84:	432c      	orrs	r4, r5
 800bb86:	50d4      	str	r4, [r2, r3]
 800bb88:	e732      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bb8a:	4a40      	ldr	r2, [pc, #256]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb8c:	23a8      	movs	r3, #168	; 0xa8
 800bb8e:	58d4      	ldr	r4, [r2, r3]
 800bb90:	4d3d      	ldr	r5, [pc, #244]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb92:	402c      	ands	r4, r5
 800bb94:	50d4      	str	r4, [r2, r3]
 800bb96:	58d5      	ldr	r5, [r2, r3]
 800bb98:	24a0      	movs	r4, #160	; 0xa0
 800bb9a:	0124      	lsls	r4, r4, #4
 800bb9c:	432c      	orrs	r4, r5
 800bb9e:	50d4      	str	r4, [r2, r3]
 800bba0:	e726      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bba2:	4a3a      	ldr	r2, [pc, #232]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bba4:	23a8      	movs	r3, #168	; 0xa8
 800bba6:	58d4      	ldr	r4, [r2, r3]
 800bba8:	4d39      	ldr	r5, [pc, #228]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bbaa:	402c      	ands	r4, r5
 800bbac:	50d4      	str	r4, [r2, r3]
 800bbae:	58d5      	ldr	r5, [r2, r3]
 800bbb0:	24a0      	movs	r4, #160	; 0xa0
 800bbb2:	0324      	lsls	r4, r4, #12
 800bbb4:	432c      	orrs	r4, r5
 800bbb6:	50d4      	str	r4, [r2, r3]
 800bbb8:	e71a      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bbba:	4a34      	ldr	r2, [pc, #208]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbbc:	23a8      	movs	r3, #168	; 0xa8
 800bbbe:	58d4      	ldr	r4, [r2, r3]
 800bbc0:	4d34      	ldr	r5, [pc, #208]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bbc2:	402c      	ands	r4, r5
 800bbc4:	50d4      	str	r4, [r2, r3]
 800bbc6:	58d5      	ldr	r5, [r2, r3]
 800bbc8:	24a0      	movs	r4, #160	; 0xa0
 800bbca:	0424      	lsls	r4, r4, #16
 800bbcc:	432c      	orrs	r4, r5
 800bbce:	50d4      	str	r4, [r2, r3]
 800bbd0:	e70e      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800bbd2:	4a2c      	ldr	r2, [pc, #176]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bbd4:	23a8      	movs	r3, #168	; 0xa8
 800bbd6:	58d4      	ldr	r4, [r2, r3]
 800bbd8:	25f0      	movs	r5, #240	; 0xf0
 800bbda:	43ac      	bics	r4, r5
 800bbdc:	50d4      	str	r4, [r2, r3]
 800bbde:	58d4      	ldr	r4, [r2, r3]
 800bbe0:	3d50      	subs	r5, #80	; 0x50
 800bbe2:	432c      	orrs	r4, r5
 800bbe4:	50d4      	str	r4, [r2, r3]
 800bbe6:	e703      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bbe8:	4a28      	ldr	r2, [pc, #160]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbea:	23a8      	movs	r3, #168	; 0xa8
 800bbec:	58d4      	ldr	r4, [r2, r3]
 800bbee:	250f      	movs	r5, #15
 800bbf0:	43ac      	bics	r4, r5
 800bbf2:	50d4      	str	r4, [r2, r3]
 800bbf4:	58d4      	ldr	r4, [r2, r3]
 800bbf6:	3d04      	subs	r5, #4
 800bbf8:	432c      	orrs	r4, r5
 800bbfa:	50d4      	str	r4, [r2, r3]
 800bbfc:	e6f8      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bbfe:	4a23      	ldr	r2, [pc, #140]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc00:	23a8      	movs	r3, #168	; 0xa8
 800bc02:	58d4      	ldr	r4, [r2, r3]
 800bc04:	4d20      	ldr	r5, [pc, #128]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bc06:	402c      	ands	r4, r5
 800bc08:	50d4      	str	r4, [r2, r3]
 800bc0a:	58d5      	ldr	r5, [r2, r3]
 800bc0c:	24b0      	movs	r4, #176	; 0xb0
 800bc0e:	0124      	lsls	r4, r4, #4
 800bc10:	432c      	orrs	r4, r5
 800bc12:	50d4      	str	r4, [r2, r3]
 800bc14:	e6ec      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bc16:	4a1d      	ldr	r2, [pc, #116]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc18:	23a8      	movs	r3, #168	; 0xa8
 800bc1a:	58d4      	ldr	r4, [r2, r3]
 800bc1c:	4d1c      	ldr	r5, [pc, #112]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bc1e:	402c      	ands	r4, r5
 800bc20:	50d4      	str	r4, [r2, r3]
 800bc22:	58d5      	ldr	r5, [r2, r3]
 800bc24:	24b0      	movs	r4, #176	; 0xb0
 800bc26:	0324      	lsls	r4, r4, #12
 800bc28:	432c      	orrs	r4, r5
 800bc2a:	50d4      	str	r4, [r2, r3]
 800bc2c:	e6e0      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bc2e:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc30:	23a8      	movs	r3, #168	; 0xa8
 800bc32:	58d4      	ldr	r4, [r2, r3]
 800bc34:	4d17      	ldr	r5, [pc, #92]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bc36:	402c      	ands	r4, r5
 800bc38:	50d4      	str	r4, [r2, r3]
 800bc3a:	58d5      	ldr	r5, [r2, r3]
 800bc3c:	24b0      	movs	r4, #176	; 0xb0
 800bc3e:	0424      	lsls	r4, r4, #16
 800bc40:	432c      	orrs	r4, r5
 800bc42:	50d4      	str	r4, [r2, r3]
 800bc44:	e6d4      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800bc46:	4a0f      	ldr	r2, [pc, #60]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bc48:	23a8      	movs	r3, #168	; 0xa8
 800bc4a:	58d4      	ldr	r4, [r2, r3]
 800bc4c:	25f0      	movs	r5, #240	; 0xf0
 800bc4e:	43ac      	bics	r4, r5
 800bc50:	50d4      	str	r4, [r2, r3]
 800bc52:	58d4      	ldr	r4, [r2, r3]
 800bc54:	3d40      	subs	r5, #64	; 0x40
 800bc56:	432c      	orrs	r4, r5
 800bc58:	50d4      	str	r4, [r2, r3]
 800bc5a:	e6c9      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800bc5c:	40013800 	.word	0x40013800
 800bc60:	40004400 	.word	0x40004400
 800bc64:	40004800 	.word	0x40004800
 800bc68:	40004c00 	.word	0x40004c00
 800bc6c:	40020008 	.word	0x40020008
 800bc70:	40020030 	.word	0x40020030
 800bc74:	40020058 	.word	0x40020058
 800bc78:	4002006c 	.word	0x4002006c
 800bc7c:	4002041c 	.word	0x4002041c
 800bc80:	40020430 	.word	0x40020430
 800bc84:	40020400 	.word	0x40020400
 800bc88:	fffff0ff 	.word	0xfffff0ff
 800bc8c:	40020000 	.word	0x40020000
 800bc90:	fff0ffff 	.word	0xfff0ffff
 800bc94:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bc98:	4ab9      	ldr	r2, [pc, #740]	; (800bf80 <RemapAndLinkDMAtoUARTRx+0x620>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d159      	bne.n	800bd52 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800bc9e:	680b      	ldr	r3, [r1, #0]
 800bca0:	4ab8      	ldr	r2, [pc, #736]	; (800bf84 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d01b      	beq.n	800bcde <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800bca6:	4ab8      	ldr	r2, [pc, #736]	; (800bf88 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d023      	beq.n	800bcf4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800bcac:	4ab7      	ldr	r2, [pc, #732]	; (800bf8c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d02c      	beq.n	800bd0c <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800bcb2:	4ab7      	ldr	r2, [pc, #732]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x630>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d035      	beq.n	800bd24 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800bcb8:	4ab6      	ldr	r2, [pc, #728]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d03e      	beq.n	800bd3c <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bcbe:	4ab6      	ldr	r2, [pc, #728]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d000      	beq.n	800bcc6 <RemapAndLinkDMAtoUARTRx+0x366>
 800bcc4:	e694      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bcc6:	4ab5      	ldr	r2, [pc, #724]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bcc8:	23a8      	movs	r3, #168	; 0xa8
 800bcca:	58d4      	ldr	r4, [r2, r3]
 800bccc:	4db4      	ldr	r5, [pc, #720]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bcce:	402c      	ands	r4, r5
 800bcd0:	50d4      	str	r4, [r2, r3]
 800bcd2:	58d5      	ldr	r5, [r2, r3]
 800bcd4:	24c0      	movs	r4, #192	; 0xc0
 800bcd6:	0124      	lsls	r4, r4, #4
 800bcd8:	432c      	orrs	r4, r5
 800bcda:	50d4      	str	r4, [r2, r3]
 800bcdc:	e688      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bcde:	4ab1      	ldr	r2, [pc, #708]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bce0:	23a8      	movs	r3, #168	; 0xa8
 800bce2:	58d4      	ldr	r4, [r2, r3]
 800bce4:	250f      	movs	r5, #15
 800bce6:	43ac      	bics	r4, r5
 800bce8:	50d4      	str	r4, [r2, r3]
 800bcea:	58d4      	ldr	r4, [r2, r3]
 800bcec:	3d03      	subs	r5, #3
 800bcee:	432c      	orrs	r4, r5
 800bcf0:	50d4      	str	r4, [r2, r3]
 800bcf2:	e67d      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bcf4:	4aab      	ldr	r2, [pc, #684]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bcf6:	23a8      	movs	r3, #168	; 0xa8
 800bcf8:	58d4      	ldr	r4, [r2, r3]
 800bcfa:	4da9      	ldr	r5, [pc, #676]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bcfc:	402c      	ands	r4, r5
 800bcfe:	50d4      	str	r4, [r2, r3]
 800bd00:	58d5      	ldr	r5, [r2, r3]
 800bd02:	24c0      	movs	r4, #192	; 0xc0
 800bd04:	0124      	lsls	r4, r4, #4
 800bd06:	432c      	orrs	r4, r5
 800bd08:	50d4      	str	r4, [r2, r3]
 800bd0a:	e671      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bd0c:	4aa5      	ldr	r2, [pc, #660]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd0e:	23a8      	movs	r3, #168	; 0xa8
 800bd10:	58d4      	ldr	r4, [r2, r3]
 800bd12:	4da5      	ldr	r5, [pc, #660]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bd14:	402c      	ands	r4, r5
 800bd16:	50d4      	str	r4, [r2, r3]
 800bd18:	58d5      	ldr	r5, [r2, r3]
 800bd1a:	24c0      	movs	r4, #192	; 0xc0
 800bd1c:	0324      	lsls	r4, r4, #12
 800bd1e:	432c      	orrs	r4, r5
 800bd20:	50d4      	str	r4, [r2, r3]
 800bd22:	e665      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bd24:	4a9f      	ldr	r2, [pc, #636]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd26:	23a8      	movs	r3, #168	; 0xa8
 800bd28:	58d4      	ldr	r4, [r2, r3]
 800bd2a:	4da0      	ldr	r5, [pc, #640]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bd2c:	402c      	ands	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	58d5      	ldr	r5, [r2, r3]
 800bd32:	24c0      	movs	r4, #192	; 0xc0
 800bd34:	0424      	lsls	r4, r4, #16
 800bd36:	432c      	orrs	r4, r5
 800bd38:	50d4      	str	r4, [r2, r3]
 800bd3a:	e659      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bd3c:	4a97      	ldr	r2, [pc, #604]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd3e:	23a8      	movs	r3, #168	; 0xa8
 800bd40:	58d4      	ldr	r4, [r2, r3]
 800bd42:	25f0      	movs	r5, #240	; 0xf0
 800bd44:	43ac      	bics	r4, r5
 800bd46:	50d4      	str	r4, [r2, r3]
 800bd48:	58d4      	ldr	r4, [r2, r3]
 800bd4a:	3d30      	subs	r5, #48	; 0x30
 800bd4c:	432c      	orrs	r4, r5
 800bd4e:	50d4      	str	r4, [r2, r3]
 800bd50:	e64e      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bd52:	4a97      	ldr	r2, [pc, #604]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x650>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d159      	bne.n	800be0c <RemapAndLinkDMAtoUARTRx+0x4ac>
 800bd58:	680b      	ldr	r3, [r1, #0]
 800bd5a:	4a8a      	ldr	r2, [pc, #552]	; (800bf84 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d01b      	beq.n	800bd98 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800bd60:	4a89      	ldr	r2, [pc, #548]	; (800bf88 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d023      	beq.n	800bdae <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800bd66:	4a89      	ldr	r2, [pc, #548]	; (800bf8c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d02c      	beq.n	800bdc6 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800bd6c:	4a88      	ldr	r2, [pc, #544]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x630>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d035      	beq.n	800bdde <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800bd72:	4a88      	ldr	r2, [pc, #544]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d03e      	beq.n	800bdf6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bd78:	4a87      	ldr	r2, [pc, #540]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d000      	beq.n	800bd80 <RemapAndLinkDMAtoUARTRx+0x420>
 800bd7e:	e637      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800bd80:	4a86      	ldr	r2, [pc, #536]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd82:	23a8      	movs	r3, #168	; 0xa8
 800bd84:	58d4      	ldr	r4, [r2, r3]
 800bd86:	4d86      	ldr	r5, [pc, #536]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bd88:	402c      	ands	r4, r5
 800bd8a:	50d4      	str	r4, [r2, r3]
 800bd8c:	58d5      	ldr	r5, [r2, r3]
 800bd8e:	24d0      	movs	r4, #208	; 0xd0
 800bd90:	0124      	lsls	r4, r4, #4
 800bd92:	432c      	orrs	r4, r5
 800bd94:	50d4      	str	r4, [r2, r3]
 800bd96:	e62b      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bd98:	4a82      	ldr	r2, [pc, #520]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd9a:	23a8      	movs	r3, #168	; 0xa8
 800bd9c:	58d4      	ldr	r4, [r2, r3]
 800bd9e:	250f      	movs	r5, #15
 800bda0:	43ac      	bics	r4, r5
 800bda2:	50d4      	str	r4, [r2, r3]
 800bda4:	58d4      	ldr	r4, [r2, r3]
 800bda6:	3d02      	subs	r5, #2
 800bda8:	432c      	orrs	r4, r5
 800bdaa:	50d4      	str	r4, [r2, r3]
 800bdac:	e620      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bdae:	4a7d      	ldr	r2, [pc, #500]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdb0:	23a8      	movs	r3, #168	; 0xa8
 800bdb2:	58d4      	ldr	r4, [r2, r3]
 800bdb4:	4d7a      	ldr	r5, [pc, #488]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bdb6:	402c      	ands	r4, r5
 800bdb8:	50d4      	str	r4, [r2, r3]
 800bdba:	58d5      	ldr	r5, [r2, r3]
 800bdbc:	24d0      	movs	r4, #208	; 0xd0
 800bdbe:	0124      	lsls	r4, r4, #4
 800bdc0:	432c      	orrs	r4, r5
 800bdc2:	50d4      	str	r4, [r2, r3]
 800bdc4:	e614      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bdc6:	4a77      	ldr	r2, [pc, #476]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdc8:	23a8      	movs	r3, #168	; 0xa8
 800bdca:	58d4      	ldr	r4, [r2, r3]
 800bdcc:	4d76      	ldr	r5, [pc, #472]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bdce:	402c      	ands	r4, r5
 800bdd0:	50d4      	str	r4, [r2, r3]
 800bdd2:	58d5      	ldr	r5, [r2, r3]
 800bdd4:	24d0      	movs	r4, #208	; 0xd0
 800bdd6:	0324      	lsls	r4, r4, #12
 800bdd8:	432c      	orrs	r4, r5
 800bdda:	50d4      	str	r4, [r2, r3]
 800bddc:	e608      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800bdde:	4a71      	ldr	r2, [pc, #452]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bde0:	23a8      	movs	r3, #168	; 0xa8
 800bde2:	58d4      	ldr	r4, [r2, r3]
 800bde4:	4d71      	ldr	r5, [pc, #452]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bde6:	402c      	ands	r4, r5
 800bde8:	50d4      	str	r4, [r2, r3]
 800bdea:	58d5      	ldr	r5, [r2, r3]
 800bdec:	24d0      	movs	r4, #208	; 0xd0
 800bdee:	0424      	lsls	r4, r4, #16
 800bdf0:	432c      	orrs	r4, r5
 800bdf2:	50d4      	str	r4, [r2, r3]
 800bdf4:	e5fc      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800bdf6:	4a69      	ldr	r2, [pc, #420]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bdf8:	23a8      	movs	r3, #168	; 0xa8
 800bdfa:	58d4      	ldr	r4, [r2, r3]
 800bdfc:	25f0      	movs	r5, #240	; 0xf0
 800bdfe:	43ac      	bics	r4, r5
 800be00:	50d4      	str	r4, [r2, r3]
 800be02:	58d4      	ldr	r4, [r2, r3]
 800be04:	3d20      	subs	r5, #32
 800be06:	432c      	orrs	r4, r5
 800be08:	50d4      	str	r4, [r2, r3]
 800be0a:	e5f1      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800be0c:	4a69      	ldr	r2, [pc, #420]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x654>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d159      	bne.n	800bec6 <RemapAndLinkDMAtoUARTRx+0x566>
 800be12:	680b      	ldr	r3, [r1, #0]
 800be14:	4a5b      	ldr	r2, [pc, #364]	; (800bf84 <RemapAndLinkDMAtoUARTRx+0x624>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d01b      	beq.n	800be52 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800be1a:	4a5b      	ldr	r2, [pc, #364]	; (800bf88 <RemapAndLinkDMAtoUARTRx+0x628>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d023      	beq.n	800be68 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800be20:	4a5a      	ldr	r2, [pc, #360]	; (800bf8c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d02c      	beq.n	800be80 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800be26:	4a5a      	ldr	r2, [pc, #360]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x630>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d035      	beq.n	800be98 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800be2c:	4a59      	ldr	r2, [pc, #356]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x634>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d03e      	beq.n	800beb0 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800be32:	4a59      	ldr	r2, [pc, #356]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x638>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d000      	beq.n	800be3a <RemapAndLinkDMAtoUARTRx+0x4da>
 800be38:	e5da      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800be3a:	4a58      	ldr	r2, [pc, #352]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be3c:	23a8      	movs	r3, #168	; 0xa8
 800be3e:	58d4      	ldr	r4, [r2, r3]
 800be40:	4d57      	ldr	r5, [pc, #348]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800be42:	402c      	ands	r4, r5
 800be44:	50d4      	str	r4, [r2, r3]
 800be46:	58d5      	ldr	r5, [r2, r3]
 800be48:	24e0      	movs	r4, #224	; 0xe0
 800be4a:	0124      	lsls	r4, r4, #4
 800be4c:	432c      	orrs	r4, r5
 800be4e:	50d4      	str	r4, [r2, r3]
 800be50:	e5ce      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800be52:	4a54      	ldr	r2, [pc, #336]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be54:	23a8      	movs	r3, #168	; 0xa8
 800be56:	58d4      	ldr	r4, [r2, r3]
 800be58:	250f      	movs	r5, #15
 800be5a:	43ac      	bics	r4, r5
 800be5c:	50d4      	str	r4, [r2, r3]
 800be5e:	58d4      	ldr	r4, [r2, r3]
 800be60:	3d01      	subs	r5, #1
 800be62:	432c      	orrs	r4, r5
 800be64:	50d4      	str	r4, [r2, r3]
 800be66:	e5c3      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800be68:	4a4e      	ldr	r2, [pc, #312]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be6a:	23a8      	movs	r3, #168	; 0xa8
 800be6c:	58d4      	ldr	r4, [r2, r3]
 800be6e:	4d4c      	ldr	r5, [pc, #304]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800be70:	402c      	ands	r4, r5
 800be72:	50d4      	str	r4, [r2, r3]
 800be74:	58d5      	ldr	r5, [r2, r3]
 800be76:	24e0      	movs	r4, #224	; 0xe0
 800be78:	0124      	lsls	r4, r4, #4
 800be7a:	432c      	orrs	r4, r5
 800be7c:	50d4      	str	r4, [r2, r3]
 800be7e:	e5b7      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800be80:	4a48      	ldr	r2, [pc, #288]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be82:	23a8      	movs	r3, #168	; 0xa8
 800be84:	58d4      	ldr	r4, [r2, r3]
 800be86:	4d48      	ldr	r5, [pc, #288]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800be88:	402c      	ands	r4, r5
 800be8a:	50d4      	str	r4, [r2, r3]
 800be8c:	58d5      	ldr	r5, [r2, r3]
 800be8e:	24e0      	movs	r4, #224	; 0xe0
 800be90:	0324      	lsls	r4, r4, #12
 800be92:	432c      	orrs	r4, r5
 800be94:	50d4      	str	r4, [r2, r3]
 800be96:	e5ab      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800be98:	4a42      	ldr	r2, [pc, #264]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be9a:	23a8      	movs	r3, #168	; 0xa8
 800be9c:	58d4      	ldr	r4, [r2, r3]
 800be9e:	4d43      	ldr	r5, [pc, #268]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bea0:	402c      	ands	r4, r5
 800bea2:	50d4      	str	r4, [r2, r3]
 800bea4:	58d5      	ldr	r5, [r2, r3]
 800bea6:	24e0      	movs	r4, #224	; 0xe0
 800bea8:	0424      	lsls	r4, r4, #16
 800beaa:	432c      	orrs	r4, r5
 800beac:	50d4      	str	r4, [r2, r3]
 800beae:	e59f      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800beb0:	4a3a      	ldr	r2, [pc, #232]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800beb2:	23a8      	movs	r3, #168	; 0xa8
 800beb4:	58d4      	ldr	r4, [r2, r3]
 800beb6:	25f0      	movs	r5, #240	; 0xf0
 800beb8:	43ac      	bics	r4, r5
 800beba:	50d4      	str	r4, [r2, r3]
 800bebc:	58d4      	ldr	r4, [r2, r3]
 800bebe:	3d10      	subs	r5, #16
 800bec0:	432c      	orrs	r4, r5
 800bec2:	50d4      	str	r4, [r2, r3]
 800bec4:	e594      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bec6:	4a3c      	ldr	r2, [pc, #240]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x658>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d000      	beq.n	800bece <RemapAndLinkDMAtoUARTRx+0x56e>
 800becc:	e590      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800bece:	680b      	ldr	r3, [r1, #0]
 800bed0:	4a2c      	ldr	r2, [pc, #176]	; (800bf84 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d01b      	beq.n	800bf0e <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800bed6:	4a2c      	ldr	r2, [pc, #176]	; (800bf88 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d022      	beq.n	800bf22 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bedc:	4a2b      	ldr	r2, [pc, #172]	; (800bf8c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d02b      	beq.n	800bf3a <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800bee2:	4a2b      	ldr	r2, [pc, #172]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x630>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d034      	beq.n	800bf52 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800bee8:	4a2a      	ldr	r2, [pc, #168]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x634>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d03d      	beq.n	800bf6a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800beee:	4a2a      	ldr	r2, [pc, #168]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d000      	beq.n	800bef6 <RemapAndLinkDMAtoUARTRx+0x596>
 800bef4:	e57c      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800bef6:	4a29      	ldr	r2, [pc, #164]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bef8:	23a8      	movs	r3, #168	; 0xa8
 800befa:	58d4      	ldr	r4, [r2, r3]
 800befc:	4d28      	ldr	r5, [pc, #160]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800befe:	402c      	ands	r4, r5
 800bf00:	50d4      	str	r4, [r2, r3]
 800bf02:	58d5      	ldr	r5, [r2, r3]
 800bf04:	24f0      	movs	r4, #240	; 0xf0
 800bf06:	0124      	lsls	r4, r4, #4
 800bf08:	432c      	orrs	r4, r5
 800bf0a:	50d4      	str	r4, [r2, r3]
 800bf0c:	e570      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800bf0e:	4a25      	ldr	r2, [pc, #148]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf10:	23a8      	movs	r3, #168	; 0xa8
 800bf12:	58d5      	ldr	r5, [r2, r3]
 800bf14:	260f      	movs	r6, #15
 800bf16:	43b5      	bics	r5, r6
 800bf18:	50d5      	str	r5, [r2, r3]
 800bf1a:	58d4      	ldr	r4, [r2, r3]
 800bf1c:	4334      	orrs	r4, r6
 800bf1e:	50d4      	str	r4, [r2, r3]
 800bf20:	e566      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800bf22:	4a20      	ldr	r2, [pc, #128]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf24:	23a8      	movs	r3, #168	; 0xa8
 800bf26:	58d4      	ldr	r4, [r2, r3]
 800bf28:	4d1d      	ldr	r5, [pc, #116]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf2a:	402c      	ands	r4, r5
 800bf2c:	50d4      	str	r4, [r2, r3]
 800bf2e:	58d5      	ldr	r5, [r2, r3]
 800bf30:	24f0      	movs	r4, #240	; 0xf0
 800bf32:	0124      	lsls	r4, r4, #4
 800bf34:	432c      	orrs	r4, r5
 800bf36:	50d4      	str	r4, [r2, r3]
 800bf38:	e55a      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800bf3a:	4a1a      	ldr	r2, [pc, #104]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf3c:	23a8      	movs	r3, #168	; 0xa8
 800bf3e:	58d4      	ldr	r4, [r2, r3]
 800bf40:	4d19      	ldr	r5, [pc, #100]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bf42:	402c      	ands	r4, r5
 800bf44:	50d4      	str	r4, [r2, r3]
 800bf46:	58d5      	ldr	r5, [r2, r3]
 800bf48:	24f0      	movs	r4, #240	; 0xf0
 800bf4a:	0324      	lsls	r4, r4, #12
 800bf4c:	432c      	orrs	r4, r5
 800bf4e:	50d4      	str	r4, [r2, r3]
 800bf50:	e54e      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800bf52:	4a14      	ldr	r2, [pc, #80]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf54:	23a8      	movs	r3, #168	; 0xa8
 800bf56:	58d4      	ldr	r4, [r2, r3]
 800bf58:	4d14      	ldr	r5, [pc, #80]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bf5a:	402c      	ands	r4, r5
 800bf5c:	50d4      	str	r4, [r2, r3]
 800bf5e:	58d5      	ldr	r5, [r2, r3]
 800bf60:	24f0      	movs	r4, #240	; 0xf0
 800bf62:	0424      	lsls	r4, r4, #16
 800bf64:	432c      	orrs	r4, r5
 800bf66:	50d4      	str	r4, [r2, r3]
 800bf68:	e542      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800bf6a:	4a0c      	ldr	r2, [pc, #48]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf6c:	23a8      	movs	r3, #168	; 0xa8
 800bf6e:	58d5      	ldr	r5, [r2, r3]
 800bf70:	26f0      	movs	r6, #240	; 0xf0
 800bf72:	43b5      	bics	r5, r6
 800bf74:	50d5      	str	r5, [r2, r3]
 800bf76:	58d4      	ldr	r4, [r2, r3]
 800bf78:	4334      	orrs	r4, r6
 800bf7a:	50d4      	str	r4, [r2, r3]
 800bf7c:	e538      	b.n	800b9f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	40005000 	.word	0x40005000
 800bf84:	40020008 	.word	0x40020008
 800bf88:	40020030 	.word	0x40020030
 800bf8c:	40020058 	.word	0x40020058
 800bf90:	4002006c 	.word	0x4002006c
 800bf94:	4002041c 	.word	0x4002041c
 800bf98:	40020430 	.word	0x40020430
 800bf9c:	40020400 	.word	0x40020400
 800bfa0:	fffff0ff 	.word	0xfffff0ff
 800bfa4:	40020000 	.word	0x40020000
 800bfa8:	fff0ffff 	.word	0xfff0ffff
 800bfac:	ff0fffff 	.word	0xff0fffff
 800bfb0:	40011400 	.word	0x40011400
 800bfb4:	40011800 	.word	0x40011800
 800bfb8:	40011c00 	.word	0x40011c00

0800bfbc <DMA_MSG_RX_Setup>:
{	
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	0004      	movs	r4, r0
 800bfc0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800bfc2:	f7ff fccd 	bl	800b960 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	0028      	movs	r0, r5
 800bfca:	f7ff fc13 	bl	800b7f4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800bfce:	0020      	movs	r0, r4
 800bfd0:	f7ff f8c0 	bl	800b154 <GetPort>
 800bfd4:	1e41      	subs	r1, r0, #1
 800bfd6:	0189      	lsls	r1, r1, #6
 800bfd8:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <DMA_MSG_RX_Setup+0x2c>)
 800bfda:	1809      	adds	r1, r1, r0
 800bfdc:	2240      	movs	r2, #64	; 0x40
 800bfde:	0020      	movs	r0, r4
 800bfe0:	f005 ffee 	bl	8011fc0 <HAL_UART_Receive_DMA>
}
 800bfe4:	bd70      	pop	{r4, r5, r6, pc}
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	2000126c 	.word	0x2000126c

0800bfec <SetupMessagingRxDMAs>:
{	
 800bfec:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800bfee:	4b17      	ldr	r3, [pc, #92]	; (800c04c <SetupMessagingRxDMAs+0x60>)
 800bff0:	785b      	ldrb	r3, [r3, #1]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d010      	beq.n	800c018 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800bff6:	4b15      	ldr	r3, [pc, #84]	; (800c04c <SetupMessagingRxDMAs+0x60>)
 800bff8:	789b      	ldrb	r3, [r3, #2]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d011      	beq.n	800c022 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <SetupMessagingRxDMAs+0x60>)
 800c000:	78db      	ldrb	r3, [r3, #3]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d012      	beq.n	800c02c <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <SetupMessagingRxDMAs+0x60>)
 800c008:	791b      	ldrb	r3, [r3, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d013      	beq.n	800c036 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c00e:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <SetupMessagingRxDMAs+0x60>)
 800c010:	795b      	ldrb	r3, [r3, #5]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d014      	beq.n	800c040 <SetupMessagingRxDMAs+0x54>
}
 800c016:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c018:	490d      	ldr	r1, [pc, #52]	; (800c050 <SetupMessagingRxDMAs+0x64>)
 800c01a:	480e      	ldr	r0, [pc, #56]	; (800c054 <SetupMessagingRxDMAs+0x68>)
 800c01c:	f7ff ffce 	bl	800bfbc <DMA_MSG_RX_Setup>
 800c020:	e7e9      	b.n	800bff6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c022:	490d      	ldr	r1, [pc, #52]	; (800c058 <SetupMessagingRxDMAs+0x6c>)
 800c024:	480d      	ldr	r0, [pc, #52]	; (800c05c <SetupMessagingRxDMAs+0x70>)
 800c026:	f7ff ffc9 	bl	800bfbc <DMA_MSG_RX_Setup>
 800c02a:	e7e8      	b.n	800bffe <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c02c:	490c      	ldr	r1, [pc, #48]	; (800c060 <SetupMessagingRxDMAs+0x74>)
 800c02e:	480d      	ldr	r0, [pc, #52]	; (800c064 <SetupMessagingRxDMAs+0x78>)
 800c030:	f7ff ffc4 	bl	800bfbc <DMA_MSG_RX_Setup>
 800c034:	e7e7      	b.n	800c006 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c036:	490c      	ldr	r1, [pc, #48]	; (800c068 <SetupMessagingRxDMAs+0x7c>)
 800c038:	480c      	ldr	r0, [pc, #48]	; (800c06c <SetupMessagingRxDMAs+0x80>)
 800c03a:	f7ff ffbf 	bl	800bfbc <DMA_MSG_RX_Setup>
 800c03e:	e7e6      	b.n	800c00e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c040:	490b      	ldr	r1, [pc, #44]	; (800c070 <SetupMessagingRxDMAs+0x84>)
 800c042:	480c      	ldr	r0, [pc, #48]	; (800c074 <SetupMessagingRxDMAs+0x88>)
 800c044:	f7ff ffba 	bl	800bfbc <DMA_MSG_RX_Setup>
}
 800c048:	e7e5      	b.n	800c016 <SetupMessagingRxDMAs+0x2a>
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	20001098 	.word	0x20001098
 800c050:	20001670 	.word	0x20001670
 800c054:	20006a1c 	.word	0x20006a1c
 800c058:	200016a8 	.word	0x200016a8
 800c05c:	20006b74 	.word	0x20006b74
 800c060:	200016e0 	.word	0x200016e0
 800c064:	20006b04 	.word	0x20006b04
 800c068:	20001718 	.word	0x20001718
 800c06c:	2000696c 	.word	0x2000696c
 800c070:	20001750 	.word	0x20001750
 800c074:	20006a8c 	.word	0x20006a8c

0800c078 <DMA_STREAM_Setup>:
{	
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	0005      	movs	r5, r0
 800c07c:	000f      	movs	r7, r1
 800c07e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c080:	f7ff f868 	bl	800b154 <GetPort>
	hDMA = &streamDMA[port-1];
 800c084:	3801      	subs	r0, #1
 800c086:	00c4      	lsls	r4, r0, #3
 800c088:	1a24      	subs	r4, r4, r0
 800c08a:	00e4      	lsls	r4, r4, #3
 800c08c:	4809      	ldr	r0, [pc, #36]	; (800c0b4 <DMA_STREAM_Setup+0x3c>)
 800c08e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c090:	0021      	movs	r1, r4
 800c092:	0028      	movs	r0, r5
 800c094:	f7ff fc64 	bl	800b960 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c098:	2101      	movs	r1, #1
 800c09a:	0020      	movs	r0, r4
 800c09c:	f7ff fbaa 	bl	800b7f4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c0a0:	2369      	movs	r3, #105	; 0x69
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	3128      	adds	r1, #40	; 0x28
 800c0aa:	0032      	movs	r2, r6
 800c0ac:	0028      	movs	r0, r5
 800c0ae:	f005 ff87 	bl	8011fc0 <HAL_UART_Receive_DMA>
}
 800c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b4:	20001868 	.word	0x20001868

0800c0b8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c0b8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c0ba:	6803      	ldr	r3, [r0, #0]
 800c0bc:	4abd      	ldr	r2, [pc, #756]	; (800c3b4 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d02f      	beq.n	800c122 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c0c2:	4abd      	ldr	r2, [pc, #756]	; (800c3b8 <RemapAndLinkDMAtoUARTTx+0x300>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d100      	bne.n	800c0ca <RemapAndLinkDMAtoUARTTx+0x12>
 800c0c8:	e087      	b.n	800c1da <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c0ca:	4abc      	ldr	r2, [pc, #752]	; (800c3bc <RemapAndLinkDMAtoUARTTx+0x304>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d100      	bne.n	800c0d2 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c0d0:	e0dc      	b.n	800c28c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c0d2:	4abb      	ldr	r2, [pc, #748]	; (800c3c0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d000      	beq.n	800c0da <RemapAndLinkDMAtoUARTTx+0x22>
 800c0d8:	e18a      	b.n	800c3f0 <RemapAndLinkDMAtoUARTTx+0x338>
 800c0da:	680b      	ldr	r3, [r1, #0]
 800c0dc:	4ab9      	ldr	r2, [pc, #740]	; (800c3c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d100      	bne.n	800c0e4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c0e2:	e12d      	b.n	800c340 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c0e4:	4ab8      	ldr	r2, [pc, #736]	; (800c3c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d100      	bne.n	800c0ec <RemapAndLinkDMAtoUARTTx+0x34>
 800c0ea:	e134      	b.n	800c356 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c0ec:	4ab7      	ldr	r2, [pc, #732]	; (800c3cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d100      	bne.n	800c0f4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c0f2:	e13c      	b.n	800c36e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c0f4:	4ab6      	ldr	r2, [pc, #728]	; (800c3d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d100      	bne.n	800c0fc <RemapAndLinkDMAtoUARTTx+0x44>
 800c0fa:	e144      	b.n	800c386 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c0fc:	4ab5      	ldr	r2, [pc, #724]	; (800c3d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d100      	bne.n	800c104 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c102:	e14b      	b.n	800c39c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c104:	4ab4      	ldr	r2, [pc, #720]	; (800c3d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d11e      	bne.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c10a:	4ab4      	ldr	r2, [pc, #720]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c10c:	23a8      	movs	r3, #168	; 0xa8
 800c10e:	58d4      	ldr	r4, [r2, r3]
 800c110:	4db3      	ldr	r5, [pc, #716]	; (800c3e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c112:	402c      	ands	r4, r5
 800c114:	50d4      	str	r4, [r2, r3]
 800c116:	58d5      	ldr	r5, [r2, r3]
 800c118:	24b0      	movs	r4, #176	; 0xb0
 800c11a:	0324      	lsls	r4, r4, #12
 800c11c:	432c      	orrs	r4, r5
 800c11e:	50d4      	str	r4, [r2, r3]
 800c120:	e012      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c122:	680b      	ldr	r3, [r1, #0]
 800c124:	4aa7      	ldr	r2, [pc, #668]	; (800c3c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d011      	beq.n	800c14e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c12a:	4aa7      	ldr	r2, [pc, #668]	; (800c3c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d019      	beq.n	800c164 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c130:	4aa6      	ldr	r2, [pc, #664]	; (800c3cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d022      	beq.n	800c17c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c136:	4aa6      	ldr	r2, [pc, #664]	; (800c3d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d02b      	beq.n	800c194 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c13c:	4aa5      	ldr	r2, [pc, #660]	; (800c3d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d033      	beq.n	800c1aa <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c142:	4aa5      	ldr	r2, [pc, #660]	; (800c3d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d03c      	beq.n	800c1c2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c148:	6601      	str	r1, [r0, #96]	; 0x60
 800c14a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c14e:	4aa5      	ldr	r2, [pc, #660]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c150:	23a8      	movs	r3, #168	; 0xa8
 800c152:	58d4      	ldr	r4, [r2, r3]
 800c154:	25f0      	movs	r5, #240	; 0xf0
 800c156:	43ac      	bics	r4, r5
 800c158:	50d4      	str	r4, [r2, r3]
 800c15a:	58d4      	ldr	r4, [r2, r3]
 800c15c:	3d70      	subs	r5, #112	; 0x70
 800c15e:	432c      	orrs	r4, r5
 800c160:	50d4      	str	r4, [r2, r3]
 800c162:	e7f1      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c164:	4a9f      	ldr	r2, [pc, #636]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c166:	23a8      	movs	r3, #168	; 0xa8
 800c168:	58d4      	ldr	r4, [r2, r3]
 800c16a:	4d9f      	ldr	r5, [pc, #636]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c16c:	402c      	ands	r4, r5
 800c16e:	50d4      	str	r4, [r2, r3]
 800c170:	58d5      	ldr	r5, [r2, r3]
 800c172:	2480      	movs	r4, #128	; 0x80
 800c174:	0224      	lsls	r4, r4, #8
 800c176:	432c      	orrs	r4, r5
 800c178:	50d4      	str	r4, [r2, r3]
 800c17a:	e7e5      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c17c:	4a99      	ldr	r2, [pc, #612]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c17e:	23a8      	movs	r3, #168	; 0xa8
 800c180:	58d4      	ldr	r4, [r2, r3]
 800c182:	4d9a      	ldr	r5, [pc, #616]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c184:	402c      	ands	r4, r5
 800c186:	50d4      	str	r4, [r2, r3]
 800c188:	58d5      	ldr	r5, [r2, r3]
 800c18a:	2480      	movs	r4, #128	; 0x80
 800c18c:	0524      	lsls	r4, r4, #20
 800c18e:	432c      	orrs	r4, r5
 800c190:	50d4      	str	r4, [r2, r3]
 800c192:	e7d9      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c194:	4a91      	ldr	r2, [pc, #580]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c196:	23a8      	movs	r3, #168	; 0xa8
 800c198:	58d4      	ldr	r4, [r2, r3]
 800c19a:	250f      	movs	r5, #15
 800c19c:	43ac      	bics	r4, r5
 800c19e:	50d4      	str	r4, [r2, r3]
 800c1a0:	58d4      	ldr	r4, [r2, r3]
 800c1a2:	3d07      	subs	r5, #7
 800c1a4:	432c      	orrs	r4, r5
 800c1a6:	50d4      	str	r4, [r2, r3]
 800c1a8:	e7ce      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c1aa:	4a8c      	ldr	r2, [pc, #560]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1ac:	23a8      	movs	r3, #168	; 0xa8
 800c1ae:	58d4      	ldr	r4, [r2, r3]
 800c1b0:	4d8d      	ldr	r5, [pc, #564]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c1b2:	402c      	ands	r4, r5
 800c1b4:	50d4      	str	r4, [r2, r3]
 800c1b6:	58d5      	ldr	r5, [r2, r3]
 800c1b8:	2480      	movs	r4, #128	; 0x80
 800c1ba:	0224      	lsls	r4, r4, #8
 800c1bc:	432c      	orrs	r4, r5
 800c1be:	50d4      	str	r4, [r2, r3]
 800c1c0:	e7c2      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c1c2:	4a86      	ldr	r2, [pc, #536]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1c4:	23a8      	movs	r3, #168	; 0xa8
 800c1c6:	58d4      	ldr	r4, [r2, r3]
 800c1c8:	4d85      	ldr	r5, [pc, #532]	; (800c3e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c1ca:	402c      	ands	r4, r5
 800c1cc:	50d4      	str	r4, [r2, r3]
 800c1ce:	58d5      	ldr	r5, [r2, r3]
 800c1d0:	2480      	movs	r4, #128	; 0x80
 800c1d2:	0324      	lsls	r4, r4, #12
 800c1d4:	432c      	orrs	r4, r5
 800c1d6:	50d4      	str	r4, [r2, r3]
 800c1d8:	e7b6      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c1da:	680b      	ldr	r3, [r1, #0]
 800c1dc:	4a79      	ldr	r2, [pc, #484]	; (800c3c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d01a      	beq.n	800c218 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c1e2:	4a79      	ldr	r2, [pc, #484]	; (800c3c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d022      	beq.n	800c22e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c1e8:	4a78      	ldr	r2, [pc, #480]	; (800c3cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d02b      	beq.n	800c246 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c1ee:	4a78      	ldr	r2, [pc, #480]	; (800c3d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d034      	beq.n	800c25e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c1f4:	4a77      	ldr	r2, [pc, #476]	; (800c3d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d03c      	beq.n	800c274 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c1fa:	4a77      	ldr	r2, [pc, #476]	; (800c3d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d1a3      	bne.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c200:	4a76      	ldr	r2, [pc, #472]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c202:	23a8      	movs	r3, #168	; 0xa8
 800c204:	58d4      	ldr	r4, [r2, r3]
 800c206:	4d76      	ldr	r5, [pc, #472]	; (800c3e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c208:	402c      	ands	r4, r5
 800c20a:	50d4      	str	r4, [r2, r3]
 800c20c:	58d5      	ldr	r5, [r2, r3]
 800c20e:	2490      	movs	r4, #144	; 0x90
 800c210:	0324      	lsls	r4, r4, #12
 800c212:	432c      	orrs	r4, r5
 800c214:	50d4      	str	r4, [r2, r3]
 800c216:	e797      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c218:	4a72      	ldr	r2, [pc, #456]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c21a:	23a8      	movs	r3, #168	; 0xa8
 800c21c:	58d4      	ldr	r4, [r2, r3]
 800c21e:	25f0      	movs	r5, #240	; 0xf0
 800c220:	43ac      	bics	r4, r5
 800c222:	50d4      	str	r4, [r2, r3]
 800c224:	58d4      	ldr	r4, [r2, r3]
 800c226:	3d60      	subs	r5, #96	; 0x60
 800c228:	432c      	orrs	r4, r5
 800c22a:	50d4      	str	r4, [r2, r3]
 800c22c:	e78c      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c22e:	4a6d      	ldr	r2, [pc, #436]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c230:	23a8      	movs	r3, #168	; 0xa8
 800c232:	58d4      	ldr	r4, [r2, r3]
 800c234:	4d6c      	ldr	r5, [pc, #432]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c236:	402c      	ands	r4, r5
 800c238:	50d4      	str	r4, [r2, r3]
 800c23a:	58d5      	ldr	r5, [r2, r3]
 800c23c:	2490      	movs	r4, #144	; 0x90
 800c23e:	0224      	lsls	r4, r4, #8
 800c240:	432c      	orrs	r4, r5
 800c242:	50d4      	str	r4, [r2, r3]
 800c244:	e780      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c246:	4a67      	ldr	r2, [pc, #412]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c248:	23a8      	movs	r3, #168	; 0xa8
 800c24a:	58d4      	ldr	r4, [r2, r3]
 800c24c:	4d67      	ldr	r5, [pc, #412]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c24e:	402c      	ands	r4, r5
 800c250:	50d4      	str	r4, [r2, r3]
 800c252:	58d5      	ldr	r5, [r2, r3]
 800c254:	2490      	movs	r4, #144	; 0x90
 800c256:	0524      	lsls	r4, r4, #20
 800c258:	432c      	orrs	r4, r5
 800c25a:	50d4      	str	r4, [r2, r3]
 800c25c:	e774      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c25e:	4a5f      	ldr	r2, [pc, #380]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c260:	23a8      	movs	r3, #168	; 0xa8
 800c262:	58d4      	ldr	r4, [r2, r3]
 800c264:	250f      	movs	r5, #15
 800c266:	43ac      	bics	r4, r5
 800c268:	50d4      	str	r4, [r2, r3]
 800c26a:	58d4      	ldr	r4, [r2, r3]
 800c26c:	3d06      	subs	r5, #6
 800c26e:	432c      	orrs	r4, r5
 800c270:	50d4      	str	r4, [r2, r3]
 800c272:	e769      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c274:	4a59      	ldr	r2, [pc, #356]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c276:	23a8      	movs	r3, #168	; 0xa8
 800c278:	58d4      	ldr	r4, [r2, r3]
 800c27a:	4d5b      	ldr	r5, [pc, #364]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c27c:	402c      	ands	r4, r5
 800c27e:	50d4      	str	r4, [r2, r3]
 800c280:	58d5      	ldr	r5, [r2, r3]
 800c282:	2490      	movs	r4, #144	; 0x90
 800c284:	0224      	lsls	r4, r4, #8
 800c286:	432c      	orrs	r4, r5
 800c288:	50d4      	str	r4, [r2, r3]
 800c28a:	e75d      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c28c:	680b      	ldr	r3, [r1, #0]
 800c28e:	4a4d      	ldr	r2, [pc, #308]	; (800c3c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d01b      	beq.n	800c2cc <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c294:	4a4c      	ldr	r2, [pc, #304]	; (800c3c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d023      	beq.n	800c2e2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c29a:	4a4c      	ldr	r2, [pc, #304]	; (800c3cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d02c      	beq.n	800c2fa <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c2a0:	4a4b      	ldr	r2, [pc, #300]	; (800c3d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d035      	beq.n	800c312 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c2a6:	4a4b      	ldr	r2, [pc, #300]	; (800c3d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d03d      	beq.n	800c328 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c2ac:	4a4a      	ldr	r2, [pc, #296]	; (800c3d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d000      	beq.n	800c2b4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c2b2:	e749      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c2b4:	4a49      	ldr	r2, [pc, #292]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2b6:	23a8      	movs	r3, #168	; 0xa8
 800c2b8:	58d4      	ldr	r4, [r2, r3]
 800c2ba:	4d49      	ldr	r5, [pc, #292]	; (800c3e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c2bc:	402c      	ands	r4, r5
 800c2be:	50d4      	str	r4, [r2, r3]
 800c2c0:	58d5      	ldr	r5, [r2, r3]
 800c2c2:	24a0      	movs	r4, #160	; 0xa0
 800c2c4:	0324      	lsls	r4, r4, #12
 800c2c6:	432c      	orrs	r4, r5
 800c2c8:	50d4      	str	r4, [r2, r3]
 800c2ca:	e73d      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c2cc:	4a45      	ldr	r2, [pc, #276]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c2ce:	23a8      	movs	r3, #168	; 0xa8
 800c2d0:	58d4      	ldr	r4, [r2, r3]
 800c2d2:	25f0      	movs	r5, #240	; 0xf0
 800c2d4:	43ac      	bics	r4, r5
 800c2d6:	50d4      	str	r4, [r2, r3]
 800c2d8:	58d4      	ldr	r4, [r2, r3]
 800c2da:	3d50      	subs	r5, #80	; 0x50
 800c2dc:	432c      	orrs	r4, r5
 800c2de:	50d4      	str	r4, [r2, r3]
 800c2e0:	e732      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c2e2:	4a40      	ldr	r2, [pc, #256]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c2e4:	23a8      	movs	r3, #168	; 0xa8
 800c2e6:	58d4      	ldr	r4, [r2, r3]
 800c2e8:	4d3f      	ldr	r5, [pc, #252]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c2ea:	402c      	ands	r4, r5
 800c2ec:	50d4      	str	r4, [r2, r3]
 800c2ee:	58d5      	ldr	r5, [r2, r3]
 800c2f0:	24a0      	movs	r4, #160	; 0xa0
 800c2f2:	0224      	lsls	r4, r4, #8
 800c2f4:	432c      	orrs	r4, r5
 800c2f6:	50d4      	str	r4, [r2, r3]
 800c2f8:	e726      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c2fa:	4a3a      	ldr	r2, [pc, #232]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c2fc:	23a8      	movs	r3, #168	; 0xa8
 800c2fe:	58d4      	ldr	r4, [r2, r3]
 800c300:	4d3a      	ldr	r5, [pc, #232]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c302:	402c      	ands	r4, r5
 800c304:	50d4      	str	r4, [r2, r3]
 800c306:	58d5      	ldr	r5, [r2, r3]
 800c308:	24a0      	movs	r4, #160	; 0xa0
 800c30a:	0524      	lsls	r4, r4, #20
 800c30c:	432c      	orrs	r4, r5
 800c30e:	50d4      	str	r4, [r2, r3]
 800c310:	e71a      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c312:	4a32      	ldr	r2, [pc, #200]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c314:	23a8      	movs	r3, #168	; 0xa8
 800c316:	58d4      	ldr	r4, [r2, r3]
 800c318:	250f      	movs	r5, #15
 800c31a:	43ac      	bics	r4, r5
 800c31c:	50d4      	str	r4, [r2, r3]
 800c31e:	58d4      	ldr	r4, [r2, r3]
 800c320:	3d05      	subs	r5, #5
 800c322:	432c      	orrs	r4, r5
 800c324:	50d4      	str	r4, [r2, r3]
 800c326:	e70f      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c328:	4a2c      	ldr	r2, [pc, #176]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c32a:	23a8      	movs	r3, #168	; 0xa8
 800c32c:	58d4      	ldr	r4, [r2, r3]
 800c32e:	4d2e      	ldr	r5, [pc, #184]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c330:	402c      	ands	r4, r5
 800c332:	50d4      	str	r4, [r2, r3]
 800c334:	58d5      	ldr	r5, [r2, r3]
 800c336:	24a0      	movs	r4, #160	; 0xa0
 800c338:	0224      	lsls	r4, r4, #8
 800c33a:	432c      	orrs	r4, r5
 800c33c:	50d4      	str	r4, [r2, r3]
 800c33e:	e703      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c340:	4a28      	ldr	r2, [pc, #160]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c342:	23a8      	movs	r3, #168	; 0xa8
 800c344:	58d4      	ldr	r4, [r2, r3]
 800c346:	25f0      	movs	r5, #240	; 0xf0
 800c348:	43ac      	bics	r4, r5
 800c34a:	50d4      	str	r4, [r2, r3]
 800c34c:	58d4      	ldr	r4, [r2, r3]
 800c34e:	3d40      	subs	r5, #64	; 0x40
 800c350:	432c      	orrs	r4, r5
 800c352:	50d4      	str	r4, [r2, r3]
 800c354:	e6f8      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c356:	4a23      	ldr	r2, [pc, #140]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c358:	23a8      	movs	r3, #168	; 0xa8
 800c35a:	58d4      	ldr	r4, [r2, r3]
 800c35c:	4d22      	ldr	r5, [pc, #136]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c35e:	402c      	ands	r4, r5
 800c360:	50d4      	str	r4, [r2, r3]
 800c362:	58d5      	ldr	r5, [r2, r3]
 800c364:	24b0      	movs	r4, #176	; 0xb0
 800c366:	0224      	lsls	r4, r4, #8
 800c368:	432c      	orrs	r4, r5
 800c36a:	50d4      	str	r4, [r2, r3]
 800c36c:	e6ec      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c36e:	4a1d      	ldr	r2, [pc, #116]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c370:	23a8      	movs	r3, #168	; 0xa8
 800c372:	58d4      	ldr	r4, [r2, r3]
 800c374:	4d1d      	ldr	r5, [pc, #116]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c376:	402c      	ands	r4, r5
 800c378:	50d4      	str	r4, [r2, r3]
 800c37a:	58d5      	ldr	r5, [r2, r3]
 800c37c:	24b0      	movs	r4, #176	; 0xb0
 800c37e:	0524      	lsls	r4, r4, #20
 800c380:	432c      	orrs	r4, r5
 800c382:	50d4      	str	r4, [r2, r3]
 800c384:	e6e0      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c386:	4a15      	ldr	r2, [pc, #84]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c388:	23a8      	movs	r3, #168	; 0xa8
 800c38a:	58d4      	ldr	r4, [r2, r3]
 800c38c:	250f      	movs	r5, #15
 800c38e:	43ac      	bics	r4, r5
 800c390:	50d4      	str	r4, [r2, r3]
 800c392:	58d4      	ldr	r4, [r2, r3]
 800c394:	3d04      	subs	r5, #4
 800c396:	432c      	orrs	r4, r5
 800c398:	50d4      	str	r4, [r2, r3]
 800c39a:	e6d5      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c39c:	4a0f      	ldr	r2, [pc, #60]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c39e:	23a8      	movs	r3, #168	; 0xa8
 800c3a0:	58d4      	ldr	r4, [r2, r3]
 800c3a2:	4d11      	ldr	r5, [pc, #68]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c3a4:	402c      	ands	r4, r5
 800c3a6:	50d4      	str	r4, [r2, r3]
 800c3a8:	58d5      	ldr	r5, [r2, r3]
 800c3aa:	24b0      	movs	r4, #176	; 0xb0
 800c3ac:	0224      	lsls	r4, r4, #8
 800c3ae:	432c      	orrs	r4, r5
 800c3b0:	50d4      	str	r4, [r2, r3]
 800c3b2:	e6c9      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
 800c3b4:	40013800 	.word	0x40013800
 800c3b8:	40004400 	.word	0x40004400
 800c3bc:	40004800 	.word	0x40004800
 800c3c0:	40004c00 	.word	0x40004c00
 800c3c4:	4002001c 	.word	0x4002001c
 800c3c8:	40020044 	.word	0x40020044
 800c3cc:	40020080 	.word	0x40020080
 800c3d0:	40020408 	.word	0x40020408
 800c3d4:	40020444 	.word	0x40020444
 800c3d8:	40020458 	.word	0x40020458
 800c3dc:	40020400 	.word	0x40020400
 800c3e0:	fff0ffff 	.word	0xfff0ffff
 800c3e4:	40020000 	.word	0x40020000
 800c3e8:	ffff0fff 	.word	0xffff0fff
 800c3ec:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c3f0:	4ab9      	ldr	r2, [pc, #740]	; (800c6d8 <RemapAndLinkDMAtoUARTTx+0x620>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d159      	bne.n	800c4aa <RemapAndLinkDMAtoUARTTx+0x3f2>
 800c3f6:	680b      	ldr	r3, [r1, #0]
 800c3f8:	4ab8      	ldr	r2, [pc, #736]	; (800c6dc <RemapAndLinkDMAtoUARTTx+0x624>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d01b      	beq.n	800c436 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c3fe:	4ab8      	ldr	r2, [pc, #736]	; (800c6e0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d023      	beq.n	800c44c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c404:	4ab7      	ldr	r2, [pc, #732]	; (800c6e4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d02c      	beq.n	800c464 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c40a:	4ab7      	ldr	r2, [pc, #732]	; (800c6e8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d035      	beq.n	800c47c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c410:	4ab6      	ldr	r2, [pc, #728]	; (800c6ec <RemapAndLinkDMAtoUARTTx+0x634>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d03d      	beq.n	800c492 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c416:	4ab6      	ldr	r2, [pc, #728]	; (800c6f0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d000      	beq.n	800c41e <RemapAndLinkDMAtoUARTTx+0x366>
 800c41c:	e694      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c41e:	4ab5      	ldr	r2, [pc, #724]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c420:	23a8      	movs	r3, #168	; 0xa8
 800c422:	58d4      	ldr	r4, [r2, r3]
 800c424:	4db4      	ldr	r5, [pc, #720]	; (800c6f8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c426:	402c      	ands	r4, r5
 800c428:	50d4      	str	r4, [r2, r3]
 800c42a:	58d5      	ldr	r5, [r2, r3]
 800c42c:	24c0      	movs	r4, #192	; 0xc0
 800c42e:	0324      	lsls	r4, r4, #12
 800c430:	432c      	orrs	r4, r5
 800c432:	50d4      	str	r4, [r2, r3]
 800c434:	e688      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c436:	4ab1      	ldr	r2, [pc, #708]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c438:	23a8      	movs	r3, #168	; 0xa8
 800c43a:	58d4      	ldr	r4, [r2, r3]
 800c43c:	25f0      	movs	r5, #240	; 0xf0
 800c43e:	43ac      	bics	r4, r5
 800c440:	50d4      	str	r4, [r2, r3]
 800c442:	58d4      	ldr	r4, [r2, r3]
 800c444:	3d30      	subs	r5, #48	; 0x30
 800c446:	432c      	orrs	r4, r5
 800c448:	50d4      	str	r4, [r2, r3]
 800c44a:	e67d      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c44c:	4aab      	ldr	r2, [pc, #684]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c44e:	23a8      	movs	r3, #168	; 0xa8
 800c450:	58d4      	ldr	r4, [r2, r3]
 800c452:	4dab      	ldr	r5, [pc, #684]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c454:	402c      	ands	r4, r5
 800c456:	50d4      	str	r4, [r2, r3]
 800c458:	58d5      	ldr	r5, [r2, r3]
 800c45a:	24c0      	movs	r4, #192	; 0xc0
 800c45c:	0224      	lsls	r4, r4, #8
 800c45e:	432c      	orrs	r4, r5
 800c460:	50d4      	str	r4, [r2, r3]
 800c462:	e671      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c464:	4aa5      	ldr	r2, [pc, #660]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c466:	23a8      	movs	r3, #168	; 0xa8
 800c468:	58d4      	ldr	r4, [r2, r3]
 800c46a:	4da6      	ldr	r5, [pc, #664]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c46c:	402c      	ands	r4, r5
 800c46e:	50d4      	str	r4, [r2, r3]
 800c470:	58d5      	ldr	r5, [r2, r3]
 800c472:	24c0      	movs	r4, #192	; 0xc0
 800c474:	0524      	lsls	r4, r4, #20
 800c476:	432c      	orrs	r4, r5
 800c478:	50d4      	str	r4, [r2, r3]
 800c47a:	e665      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c47c:	4a9d      	ldr	r2, [pc, #628]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c47e:	23a8      	movs	r3, #168	; 0xa8
 800c480:	58d4      	ldr	r4, [r2, r3]
 800c482:	250f      	movs	r5, #15
 800c484:	43ac      	bics	r4, r5
 800c486:	50d4      	str	r4, [r2, r3]
 800c488:	58d4      	ldr	r4, [r2, r3]
 800c48a:	3d03      	subs	r5, #3
 800c48c:	432c      	orrs	r4, r5
 800c48e:	50d4      	str	r4, [r2, r3]
 800c490:	e65a      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c492:	4a98      	ldr	r2, [pc, #608]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c494:	23a8      	movs	r3, #168	; 0xa8
 800c496:	58d4      	ldr	r4, [r2, r3]
 800c498:	4d99      	ldr	r5, [pc, #612]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c49a:	402c      	ands	r4, r5
 800c49c:	50d4      	str	r4, [r2, r3]
 800c49e:	58d5      	ldr	r5, [r2, r3]
 800c4a0:	24c0      	movs	r4, #192	; 0xc0
 800c4a2:	0224      	lsls	r4, r4, #8
 800c4a4:	432c      	orrs	r4, r5
 800c4a6:	50d4      	str	r4, [r2, r3]
 800c4a8:	e64e      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c4aa:	4a97      	ldr	r2, [pc, #604]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d159      	bne.n	800c564 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800c4b0:	680b      	ldr	r3, [r1, #0]
 800c4b2:	4a8a      	ldr	r2, [pc, #552]	; (800c6dc <RemapAndLinkDMAtoUARTTx+0x624>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d01b      	beq.n	800c4f0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c4b8:	4a89      	ldr	r2, [pc, #548]	; (800c6e0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d023      	beq.n	800c506 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c4be:	4a89      	ldr	r2, [pc, #548]	; (800c6e4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d02c      	beq.n	800c51e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c4c4:	4a88      	ldr	r2, [pc, #544]	; (800c6e8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d035      	beq.n	800c536 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c4ca:	4a88      	ldr	r2, [pc, #544]	; (800c6ec <RemapAndLinkDMAtoUARTTx+0x634>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d03d      	beq.n	800c54c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c4d0:	4a87      	ldr	r2, [pc, #540]	; (800c6f0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d000      	beq.n	800c4d8 <RemapAndLinkDMAtoUARTTx+0x420>
 800c4d6:	e637      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c4d8:	4a86      	ldr	r2, [pc, #536]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4da:	23a8      	movs	r3, #168	; 0xa8
 800c4dc:	58d4      	ldr	r4, [r2, r3]
 800c4de:	4d86      	ldr	r5, [pc, #536]	; (800c6f8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c4e0:	402c      	ands	r4, r5
 800c4e2:	50d4      	str	r4, [r2, r3]
 800c4e4:	58d5      	ldr	r5, [r2, r3]
 800c4e6:	24d0      	movs	r4, #208	; 0xd0
 800c4e8:	0324      	lsls	r4, r4, #12
 800c4ea:	432c      	orrs	r4, r5
 800c4ec:	50d4      	str	r4, [r2, r3]
 800c4ee:	e62b      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c4f0:	4a82      	ldr	r2, [pc, #520]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c4f2:	23a8      	movs	r3, #168	; 0xa8
 800c4f4:	58d4      	ldr	r4, [r2, r3]
 800c4f6:	25f0      	movs	r5, #240	; 0xf0
 800c4f8:	43ac      	bics	r4, r5
 800c4fa:	50d4      	str	r4, [r2, r3]
 800c4fc:	58d4      	ldr	r4, [r2, r3]
 800c4fe:	3d20      	subs	r5, #32
 800c500:	432c      	orrs	r4, r5
 800c502:	50d4      	str	r4, [r2, r3]
 800c504:	e620      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c506:	4a7d      	ldr	r2, [pc, #500]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c508:	23a8      	movs	r3, #168	; 0xa8
 800c50a:	58d4      	ldr	r4, [r2, r3]
 800c50c:	4d7c      	ldr	r5, [pc, #496]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c50e:	402c      	ands	r4, r5
 800c510:	50d4      	str	r4, [r2, r3]
 800c512:	58d5      	ldr	r5, [r2, r3]
 800c514:	24d0      	movs	r4, #208	; 0xd0
 800c516:	0224      	lsls	r4, r4, #8
 800c518:	432c      	orrs	r4, r5
 800c51a:	50d4      	str	r4, [r2, r3]
 800c51c:	e614      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c51e:	4a77      	ldr	r2, [pc, #476]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c520:	23a8      	movs	r3, #168	; 0xa8
 800c522:	58d4      	ldr	r4, [r2, r3]
 800c524:	4d77      	ldr	r5, [pc, #476]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c526:	402c      	ands	r4, r5
 800c528:	50d4      	str	r4, [r2, r3]
 800c52a:	58d5      	ldr	r5, [r2, r3]
 800c52c:	24d0      	movs	r4, #208	; 0xd0
 800c52e:	0524      	lsls	r4, r4, #20
 800c530:	432c      	orrs	r4, r5
 800c532:	50d4      	str	r4, [r2, r3]
 800c534:	e608      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c536:	4a6f      	ldr	r2, [pc, #444]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c538:	23a8      	movs	r3, #168	; 0xa8
 800c53a:	58d4      	ldr	r4, [r2, r3]
 800c53c:	250f      	movs	r5, #15
 800c53e:	43ac      	bics	r4, r5
 800c540:	50d4      	str	r4, [r2, r3]
 800c542:	58d4      	ldr	r4, [r2, r3]
 800c544:	3d02      	subs	r5, #2
 800c546:	432c      	orrs	r4, r5
 800c548:	50d4      	str	r4, [r2, r3]
 800c54a:	e5fd      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c54c:	4a69      	ldr	r2, [pc, #420]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c54e:	23a8      	movs	r3, #168	; 0xa8
 800c550:	58d4      	ldr	r4, [r2, r3]
 800c552:	4d6b      	ldr	r5, [pc, #428]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c554:	402c      	ands	r4, r5
 800c556:	50d4      	str	r4, [r2, r3]
 800c558:	58d5      	ldr	r5, [r2, r3]
 800c55a:	24d0      	movs	r4, #208	; 0xd0
 800c55c:	0224      	lsls	r4, r4, #8
 800c55e:	432c      	orrs	r4, r5
 800c560:	50d4      	str	r4, [r2, r3]
 800c562:	e5f1      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c564:	4a69      	ldr	r2, [pc, #420]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x654>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d159      	bne.n	800c61e <RemapAndLinkDMAtoUARTTx+0x566>
 800c56a:	680b      	ldr	r3, [r1, #0]
 800c56c:	4a5b      	ldr	r2, [pc, #364]	; (800c6dc <RemapAndLinkDMAtoUARTTx+0x624>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d01b      	beq.n	800c5aa <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c572:	4a5b      	ldr	r2, [pc, #364]	; (800c6e0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d023      	beq.n	800c5c0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c578:	4a5a      	ldr	r2, [pc, #360]	; (800c6e4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d02c      	beq.n	800c5d8 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c57e:	4a5a      	ldr	r2, [pc, #360]	; (800c6e8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d035      	beq.n	800c5f0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c584:	4a59      	ldr	r2, [pc, #356]	; (800c6ec <RemapAndLinkDMAtoUARTTx+0x634>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d03d      	beq.n	800c606 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c58a:	4a59      	ldr	r2, [pc, #356]	; (800c6f0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d000      	beq.n	800c592 <RemapAndLinkDMAtoUARTTx+0x4da>
 800c590:	e5da      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c592:	4a58      	ldr	r2, [pc, #352]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c594:	23a8      	movs	r3, #168	; 0xa8
 800c596:	58d4      	ldr	r4, [r2, r3]
 800c598:	4d57      	ldr	r5, [pc, #348]	; (800c6f8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c59a:	402c      	ands	r4, r5
 800c59c:	50d4      	str	r4, [r2, r3]
 800c59e:	58d5      	ldr	r5, [r2, r3]
 800c5a0:	24e0      	movs	r4, #224	; 0xe0
 800c5a2:	0324      	lsls	r4, r4, #12
 800c5a4:	432c      	orrs	r4, r5
 800c5a6:	50d4      	str	r4, [r2, r3]
 800c5a8:	e5ce      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c5aa:	4a54      	ldr	r2, [pc, #336]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5ac:	23a8      	movs	r3, #168	; 0xa8
 800c5ae:	58d4      	ldr	r4, [r2, r3]
 800c5b0:	25f0      	movs	r5, #240	; 0xf0
 800c5b2:	43ac      	bics	r4, r5
 800c5b4:	50d4      	str	r4, [r2, r3]
 800c5b6:	58d4      	ldr	r4, [r2, r3]
 800c5b8:	3d10      	subs	r5, #16
 800c5ba:	432c      	orrs	r4, r5
 800c5bc:	50d4      	str	r4, [r2, r3]
 800c5be:	e5c3      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c5c0:	4a4e      	ldr	r2, [pc, #312]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5c2:	23a8      	movs	r3, #168	; 0xa8
 800c5c4:	58d4      	ldr	r4, [r2, r3]
 800c5c6:	4d4e      	ldr	r5, [pc, #312]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c5c8:	402c      	ands	r4, r5
 800c5ca:	50d4      	str	r4, [r2, r3]
 800c5cc:	58d5      	ldr	r5, [r2, r3]
 800c5ce:	24e0      	movs	r4, #224	; 0xe0
 800c5d0:	0224      	lsls	r4, r4, #8
 800c5d2:	432c      	orrs	r4, r5
 800c5d4:	50d4      	str	r4, [r2, r3]
 800c5d6:	e5b7      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c5d8:	4a48      	ldr	r2, [pc, #288]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5da:	23a8      	movs	r3, #168	; 0xa8
 800c5dc:	58d4      	ldr	r4, [r2, r3]
 800c5de:	4d49      	ldr	r5, [pc, #292]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c5e0:	402c      	ands	r4, r5
 800c5e2:	50d4      	str	r4, [r2, r3]
 800c5e4:	58d5      	ldr	r5, [r2, r3]
 800c5e6:	24e0      	movs	r4, #224	; 0xe0
 800c5e8:	0524      	lsls	r4, r4, #20
 800c5ea:	432c      	orrs	r4, r5
 800c5ec:	50d4      	str	r4, [r2, r3]
 800c5ee:	e5ab      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c5f0:	4a40      	ldr	r2, [pc, #256]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c5f2:	23a8      	movs	r3, #168	; 0xa8
 800c5f4:	58d4      	ldr	r4, [r2, r3]
 800c5f6:	250f      	movs	r5, #15
 800c5f8:	43ac      	bics	r4, r5
 800c5fa:	50d4      	str	r4, [r2, r3]
 800c5fc:	58d4      	ldr	r4, [r2, r3]
 800c5fe:	3d01      	subs	r5, #1
 800c600:	432c      	orrs	r4, r5
 800c602:	50d4      	str	r4, [r2, r3]
 800c604:	e5a0      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c606:	4a3b      	ldr	r2, [pc, #236]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c608:	23a8      	movs	r3, #168	; 0xa8
 800c60a:	58d4      	ldr	r4, [r2, r3]
 800c60c:	4d3c      	ldr	r5, [pc, #240]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c60e:	402c      	ands	r4, r5
 800c610:	50d4      	str	r4, [r2, r3]
 800c612:	58d5      	ldr	r5, [r2, r3]
 800c614:	24e0      	movs	r4, #224	; 0xe0
 800c616:	0224      	lsls	r4, r4, #8
 800c618:	432c      	orrs	r4, r5
 800c61a:	50d4      	str	r4, [r2, r3]
 800c61c:	e594      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c61e:	4a3c      	ldr	r2, [pc, #240]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d000      	beq.n	800c626 <RemapAndLinkDMAtoUARTTx+0x56e>
 800c624:	e590      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
 800c626:	680b      	ldr	r3, [r1, #0]
 800c628:	4a2c      	ldr	r2, [pc, #176]	; (800c6dc <RemapAndLinkDMAtoUARTTx+0x624>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d01b      	beq.n	800c666 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c62e:	4a2c      	ldr	r2, [pc, #176]	; (800c6e0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d022      	beq.n	800c67a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c634:	4a2b      	ldr	r2, [pc, #172]	; (800c6e4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d02b      	beq.n	800c692 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c63a:	4a2b      	ldr	r2, [pc, #172]	; (800c6e8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d034      	beq.n	800c6aa <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c640:	4a2a      	ldr	r2, [pc, #168]	; (800c6ec <RemapAndLinkDMAtoUARTTx+0x634>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d03b      	beq.n	800c6be <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c646:	4a2a      	ldr	r2, [pc, #168]	; (800c6f0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d000      	beq.n	800c64e <RemapAndLinkDMAtoUARTTx+0x596>
 800c64c:	e57c      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c64e:	4a29      	ldr	r2, [pc, #164]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c650:	23a8      	movs	r3, #168	; 0xa8
 800c652:	58d4      	ldr	r4, [r2, r3]
 800c654:	4d28      	ldr	r5, [pc, #160]	; (800c6f8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c656:	402c      	ands	r4, r5
 800c658:	50d4      	str	r4, [r2, r3]
 800c65a:	58d5      	ldr	r5, [r2, r3]
 800c65c:	24f0      	movs	r4, #240	; 0xf0
 800c65e:	0324      	lsls	r4, r4, #12
 800c660:	432c      	orrs	r4, r5
 800c662:	50d4      	str	r4, [r2, r3]
 800c664:	e570      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c666:	4a25      	ldr	r2, [pc, #148]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c668:	23a8      	movs	r3, #168	; 0xa8
 800c66a:	58d5      	ldr	r5, [r2, r3]
 800c66c:	26f0      	movs	r6, #240	; 0xf0
 800c66e:	43b5      	bics	r5, r6
 800c670:	50d5      	str	r5, [r2, r3]
 800c672:	58d4      	ldr	r4, [r2, r3]
 800c674:	4334      	orrs	r4, r6
 800c676:	50d4      	str	r4, [r2, r3]
 800c678:	e566      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c67a:	4a20      	ldr	r2, [pc, #128]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c67c:	23a8      	movs	r3, #168	; 0xa8
 800c67e:	58d4      	ldr	r4, [r2, r3]
 800c680:	4d1f      	ldr	r5, [pc, #124]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c682:	402c      	ands	r4, r5
 800c684:	50d4      	str	r4, [r2, r3]
 800c686:	58d5      	ldr	r5, [r2, r3]
 800c688:	24f0      	movs	r4, #240	; 0xf0
 800c68a:	0224      	lsls	r4, r4, #8
 800c68c:	432c      	orrs	r4, r5
 800c68e:	50d4      	str	r4, [r2, r3]
 800c690:	e55a      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c692:	4a1a      	ldr	r2, [pc, #104]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x644>)
 800c694:	23a8      	movs	r3, #168	; 0xa8
 800c696:	58d4      	ldr	r4, [r2, r3]
 800c698:	4d1a      	ldr	r5, [pc, #104]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c69a:	402c      	ands	r4, r5
 800c69c:	50d4      	str	r4, [r2, r3]
 800c69e:	58d5      	ldr	r5, [r2, r3]
 800c6a0:	24f0      	movs	r4, #240	; 0xf0
 800c6a2:	0524      	lsls	r4, r4, #20
 800c6a4:	432c      	orrs	r4, r5
 800c6a6:	50d4      	str	r4, [r2, r3]
 800c6a8:	e54e      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c6aa:	4a12      	ldr	r2, [pc, #72]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6ac:	23a8      	movs	r3, #168	; 0xa8
 800c6ae:	58d5      	ldr	r5, [r2, r3]
 800c6b0:	260f      	movs	r6, #15
 800c6b2:	43b5      	bics	r5, r6
 800c6b4:	50d5      	str	r5, [r2, r3]
 800c6b6:	58d4      	ldr	r4, [r2, r3]
 800c6b8:	4334      	orrs	r4, r6
 800c6ba:	50d4      	str	r4, [r2, r3]
 800c6bc:	e544      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c6be:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6c0:	23a8      	movs	r3, #168	; 0xa8
 800c6c2:	58d4      	ldr	r4, [r2, r3]
 800c6c4:	4d0e      	ldr	r5, [pc, #56]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6c6:	402c      	ands	r4, r5
 800c6c8:	50d4      	str	r4, [r2, r3]
 800c6ca:	58d5      	ldr	r5, [r2, r3]
 800c6cc:	24f0      	movs	r4, #240	; 0xf0
 800c6ce:	0224      	lsls	r4, r4, #8
 800c6d0:	432c      	orrs	r4, r5
 800c6d2:	50d4      	str	r4, [r2, r3]
 800c6d4:	e538      	b.n	800c148 <RemapAndLinkDMAtoUARTTx+0x90>
 800c6d6:	46c0      	nop			; (mov r8, r8)
 800c6d8:	40005000 	.word	0x40005000
 800c6dc:	4002001c 	.word	0x4002001c
 800c6e0:	40020044 	.word	0x40020044
 800c6e4:	40020080 	.word	0x40020080
 800c6e8:	40020408 	.word	0x40020408
 800c6ec:	40020444 	.word	0x40020444
 800c6f0:	40020458 	.word	0x40020458
 800c6f4:	40020400 	.word	0x40020400
 800c6f8:	fff0ffff 	.word	0xfff0ffff
 800c6fc:	40020000 	.word	0x40020000
 800c700:	ffff0fff 	.word	0xffff0fff
 800c704:	f0ffffff 	.word	0xf0ffffff
 800c708:	40011400 	.word	0x40011400
 800c70c:	40011800 	.word	0x40011800
 800c710:	40011c00 	.word	0x40011c00

0800c714 <DMA_MSG_TX_Setup>:
{	
 800c714:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c716:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <DMA_MSG_TX_Setup+0x38>)
 800c718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d012      	beq.n	800c744 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c71e:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <DMA_MSG_TX_Setup+0x38>)
 800c720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c722:	2b00      	cmp	r3, #0
 800c724:	d010      	beq.n	800c748 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c726:	4a09      	ldr	r2, [pc, #36]	; (800c74c <DMA_MSG_TX_Setup+0x38>)
 800c728:	2394      	movs	r3, #148	; 0x94
 800c72a:	58d3      	ldr	r3, [r2, r3]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d007      	beq.n	800c740 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c730:	0021      	movs	r1, r4
 800c732:	f7ff fcc1 	bl	800c0b8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c736:	2100      	movs	r1, #0
 800c738:	0020      	movs	r0, r4
 800c73a:	f7ff f85b 	bl	800b7f4 <SetupDMAInterrupts>
}
 800c73e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c740:	4c03      	ldr	r4, [pc, #12]	; (800c750 <DMA_MSG_TX_Setup+0x3c>)
 800c742:	e7f5      	b.n	800c730 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c744:	4c01      	ldr	r4, [pc, #4]	; (800c74c <DMA_MSG_TX_Setup+0x38>)
 800c746:	e7f3      	b.n	800c730 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c748:	4c02      	ldr	r4, [pc, #8]	; (800c754 <DMA_MSG_TX_Setup+0x40>)
 800c74a:	e7f1      	b.n	800c730 <DMA_MSG_TX_Setup+0x1c>
 800c74c:	200017c0 	.word	0x200017c0
 800c750:	20001830 	.word	0x20001830
 800c754:	200017f8 	.word	0x200017f8

0800c758 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c758:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c75a:	4807      	ldr	r0, [pc, #28]	; (800c778 <CRC_Init+0x20>)
 800c75c:	4b07      	ldr	r3, [pc, #28]	; (800c77c <CRC_Init+0x24>)
 800c75e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c760:	2310      	movs	r3, #16
 800c762:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800c764:	2300      	movs	r3, #0
 800c766:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c768:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c76a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c76c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c76e:	3303      	adds	r3, #3
 800c770:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c772:	f003 f81d 	bl	800f7b0 <HAL_CRC_Init>
}
 800c776:	bd10      	pop	{r4, pc}
 800c778:	20006be4 	.word	0x20006be4
 800c77c:	40023000 	.word	0x40023000

0800c780 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c780:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c782:	4a05      	ldr	r2, [pc, #20]	; (800c798 <HAL_CRC_MspInit+0x18>)
 800c784:	6951      	ldr	r1, [r2, #20]
 800c786:	2340      	movs	r3, #64	; 0x40
 800c788:	4319      	orrs	r1, r3
 800c78a:	6151      	str	r1, [r2, #20]
 800c78c:	6952      	ldr	r2, [r2, #20]
 800c78e:	4013      	ands	r3, r2
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	9b01      	ldr	r3, [sp, #4]
}
 800c794:	b002      	add	sp, #8
 800c796:	4770      	bx	lr
 800c798:	40021000 	.word	0x40021000

0800c79c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	0004      	movs	r4, r0
 800c7a0:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d015      	beq.n	800c7d2 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c7a6:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	d100      	bne.n	800c7ae <CalculateCRC8+0x12>
}
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7ae:	088e      	lsrs	r6, r1, #2
 800c7b0:	0032      	movs	r2, r6
 800c7b2:	0021      	movs	r1, r4
 800c7b4:	4808      	ldr	r0, [pc, #32]	; (800c7d8 <CalculateCRC8+0x3c>)
 800c7b6:	f003 f858 	bl	800f86a <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c7ba:	07ab      	lsls	r3, r5, #30
 800c7bc:	d101      	bne.n	800c7c2 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7be:	b2c0      	uxtb	r0, r0
 800c7c0:	e7f4      	b.n	800c7ac <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c7c2:	0131      	lsls	r1, r6, #4
 800c7c4:	1861      	adds	r1, r4, r1
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4803      	ldr	r0, [pc, #12]	; (800c7d8 <CalculateCRC8+0x3c>)
 800c7ca:	f003 f822 	bl	800f812 <HAL_CRC_Accumulate>
 800c7ce:	b2c0      	uxtb	r0, r0
 800c7d0:	e7ec      	b.n	800c7ac <CalculateCRC8+0x10>
	return 0;
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e7ea      	b.n	800c7ac <CalculateCRC8+0x10>
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	20006be4 	.word	0x20006be4

0800c7dc <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800c7dc:	b500      	push	{lr}
 800c7de:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c7e0:	2380      	movs	r3, #128	; 0x80
 800c7e2:	01db      	lsls	r3, r3, #7
 800c7e4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c7ee:	3303      	adds	r3, #3
 800c7f0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c7f2:	a901      	add	r1, sp, #4
 800c7f4:	4802      	ldr	r0, [pc, #8]	; (800c800 <IND_LED_Init+0x24>)
 800c7f6:	f003 fedb 	bl	80105b0 <HAL_GPIO_Init>
}
 800c7fa:	b007      	add	sp, #28
 800c7fc:	bd00      	pop	{pc}
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	48000800 	.word	0x48000800

0800c804 <GPIO_Init>:
{
 800c804:	b500      	push	{lr}
 800c806:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c808:	4b18      	ldr	r3, [pc, #96]	; (800c86c <GPIO_Init+0x68>)
 800c80a:	6959      	ldr	r1, [r3, #20]
 800c80c:	2080      	movs	r0, #128	; 0x80
 800c80e:	0300      	lsls	r0, r0, #12
 800c810:	4301      	orrs	r1, r0
 800c812:	6159      	str	r1, [r3, #20]
 800c814:	695a      	ldr	r2, [r3, #20]
 800c816:	4002      	ands	r2, r0
 800c818:	9201      	str	r2, [sp, #4]
 800c81a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c81c:	6959      	ldr	r1, [r3, #20]
 800c81e:	2080      	movs	r0, #128	; 0x80
 800c820:	0280      	lsls	r0, r0, #10
 800c822:	4301      	orrs	r1, r0
 800c824:	6159      	str	r1, [r3, #20]
 800c826:	695a      	ldr	r2, [r3, #20]
 800c828:	4002      	ands	r2, r0
 800c82a:	9202      	str	r2, [sp, #8]
 800c82c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c82e:	6959      	ldr	r1, [r3, #20]
 800c830:	2080      	movs	r0, #128	; 0x80
 800c832:	0340      	lsls	r0, r0, #13
 800c834:	4301      	orrs	r1, r0
 800c836:	6159      	str	r1, [r3, #20]
 800c838:	695a      	ldr	r2, [r3, #20]
 800c83a:	4002      	ands	r2, r0
 800c83c:	9203      	str	r2, [sp, #12]
 800c83e:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800c840:	6959      	ldr	r1, [r3, #20]
 800c842:	2080      	movs	r0, #128	; 0x80
 800c844:	02c0      	lsls	r0, r0, #11
 800c846:	4301      	orrs	r1, r0
 800c848:	6159      	str	r1, [r3, #20]
 800c84a:	695a      	ldr	r2, [r3, #20]
 800c84c:	4002      	ands	r2, r0
 800c84e:	9204      	str	r2, [sp, #16]
 800c850:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c852:	695a      	ldr	r2, [r3, #20]
 800c854:	2180      	movs	r1, #128	; 0x80
 800c856:	03c9      	lsls	r1, r1, #15
 800c858:	430a      	orrs	r2, r1
 800c85a:	615a      	str	r2, [r3, #20]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	400b      	ands	r3, r1
 800c860:	9305      	str	r3, [sp, #20]
 800c862:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c864:	f7ff ffba 	bl	800c7dc <IND_LED_Init>
}
 800c868:	b007      	add	sp, #28
 800c86a:	bd00      	pop	{pc}
 800c86c:	40021000 	.word	0x40021000

0800c870 <Relay_Init>:

/* --- Configure Relay GPIO --- 
*/
void Relay_Init(void)
{
 800c870:	b500      	push	{lr}
 800c872:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Relay_PIN;
 800c874:	2301      	movs	r3, #1
 800c876:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c878:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c87e:	3303      	adds	r3, #3
 800c880:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800c882:	a901      	add	r1, sp, #4
 800c884:	4802      	ldr	r0, [pc, #8]	; (800c890 <Relay_Init+0x20>)
 800c886:	f003 fe93 	bl	80105b0 <HAL_GPIO_Init>
}
 800c88a:	b007      	add	sp, #28
 800c88c:	bd00      	pop	{pc}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	48000400 	.word	0x48000400

0800c894 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	000e      	movs	r6, r1
 800c898:	0015      	movs	r5, r2
 800c89a:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c89c:	f000 fd20 	bl	800d2e0 <GetUart>
	
	if (huart == &huart1) 
 800c8a0:	4b24      	ldr	r3, [pc, #144]	; (800c934 <GetPortGPIOs+0xa0>)
 800c8a2:	4298      	cmp	r0, r3
 800c8a4:	d017      	beq.n	800c8d6 <GetPortGPIOs+0x42>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c8a6:	4b24      	ldr	r3, [pc, #144]	; (800c938 <GetPortGPIOs+0xa4>)
 800c8a8:	4298      	cmp	r0, r3
 800c8aa:	d022      	beq.n	800c8f2 <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c8ac:	4b23      	ldr	r3, [pc, #140]	; (800c93c <GetPortGPIOs+0xa8>)
 800c8ae:	4298      	cmp	r0, r3
 800c8b0:	d02a      	beq.n	800c908 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c8b2:	4b23      	ldr	r3, [pc, #140]	; (800c940 <GetPortGPIOs+0xac>)
 800c8b4:	4298      	cmp	r0, r3
 800c8b6:	d033      	beq.n	800c920 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c8b8:	4a22      	ldr	r2, [pc, #136]	; (800c944 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c8ba:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c8bc:	4290      	cmp	r0, r2
 800c8be:	d116      	bne.n	800c8ee <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c8c0:	2390      	movs	r3, #144	; 0x90
 800c8c2:	05db      	lsls	r3, r3, #23
 800c8c4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c8c6:	2210      	movs	r2, #16
 800c8c8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c8ca:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	9a04      	ldr	r2, [sp, #16]
 800c8d0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	e00b      	b.n	800c8ee <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c8d6:	2390      	movs	r3, #144	; 0x90
 800c8d8:	05db      	lsls	r3, r3, #23
 800c8da:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c8dc:	2280      	movs	r2, #128	; 0x80
 800c8de:	0092      	lsls	r2, r2, #2
 800c8e0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c8e2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	9a04      	ldr	r2, [sp, #16]
 800c8ea:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8ec:	2300      	movs	r3, #0
	
	return result;	
}
 800c8ee:	0018      	movs	r0, r3
 800c8f0:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c8f2:	2390      	movs	r3, #144	; 0x90
 800c8f4:	05db      	lsls	r3, r3, #23
 800c8f6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c8f8:	2204      	movs	r2, #4
 800c8fa:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c8fc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c8fe:	2308      	movs	r3, #8
 800c900:	9a04      	ldr	r2, [sp, #16]
 800c902:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	e7f2      	b.n	800c8ee <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c908:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <GetPortGPIOs+0xb4>)
 800c90a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c90c:	2280      	movs	r2, #128	; 0x80
 800c90e:	00d2      	lsls	r2, r2, #3
 800c910:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c912:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c914:	2380      	movs	r3, #128	; 0x80
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	9a04      	ldr	r2, [sp, #16]
 800c91a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e7e6      	b.n	800c8ee <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c920:	4b09      	ldr	r3, [pc, #36]	; (800c948 <GetPortGPIOs+0xb4>)
 800c922:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c924:	2208      	movs	r2, #8
 800c926:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c928:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c92a:	2310      	movs	r3, #16
 800c92c:	9a04      	ldr	r2, [sp, #16]
 800c92e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	e7dc      	b.n	800c8ee <GetPortGPIOs+0x5a>
 800c934:	20006a8c 	.word	0x20006a8c
 800c938:	20006b74 	.word	0x20006b74
 800c93c:	2000696c 	.word	0x2000696c
 800c940:	20006a1c 	.word	0x20006a1c
 800c944:	20006b04 	.word	0x20006b04
 800c948:	48000400 	.word	0x48000400

0800c94c <IsFactoryReset>:
{
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c950:	4b39      	ldr	r3, [pc, #228]	; (800ca38 <IsFactoryReset+0xec>)
 800c952:	6959      	ldr	r1, [r3, #20]
 800c954:	2080      	movs	r0, #128	; 0x80
 800c956:	0280      	lsls	r0, r0, #10
 800c958:	4301      	orrs	r1, r0
 800c95a:	6159      	str	r1, [r3, #20]
 800c95c:	695a      	ldr	r2, [r3, #20]
 800c95e:	4002      	ands	r2, r0
 800c960:	9203      	str	r2, [sp, #12]
 800c962:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c964:	6959      	ldr	r1, [r3, #20]
 800c966:	2080      	movs	r0, #128	; 0x80
 800c968:	02c0      	lsls	r0, r0, #11
 800c96a:	4301      	orrs	r1, r0
 800c96c:	6159      	str	r1, [r3, #20]
 800c96e:	695a      	ldr	r2, [r3, #20]
 800c970:	4002      	ands	r2, r0
 800c972:	9204      	str	r2, [sp, #16]
 800c974:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c976:	6959      	ldr	r1, [r3, #20]
 800c978:	2080      	movs	r0, #128	; 0x80
 800c97a:	0300      	lsls	r0, r0, #12
 800c97c:	4301      	orrs	r1, r0
 800c97e:	6159      	str	r1, [r3, #20]
 800c980:	695a      	ldr	r2, [r3, #20]
 800c982:	4002      	ands	r2, r0
 800c984:	9205      	str	r2, [sp, #20]
 800c986:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800c988:	695a      	ldr	r2, [r3, #20]
 800c98a:	2180      	movs	r1, #128	; 0x80
 800c98c:	0349      	lsls	r1, r1, #13
 800c98e:	430a      	orrs	r2, r1
 800c990:	615a      	str	r2, [r3, #20]
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	400b      	ands	r3, r1
 800c996:	9306      	str	r3, [sp, #24]
 800c998:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c99a:	2522      	movs	r5, #34	; 0x22
 800c99c:	446d      	add	r5, sp
 800c99e:	ab08      	add	r3, sp, #32
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	ab0b      	add	r3, sp, #44	; 0x2c
 800c9a4:	002a      	movs	r2, r5
 800c9a6:	a90c      	add	r1, sp, #48	; 0x30
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	f7ff ff73 	bl	800c894 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c9ae:	ac07      	add	r4, sp, #28
 800c9b0:	9400      	str	r4, [sp, #0]
 800c9b2:	ab09      	add	r3, sp, #36	; 0x24
 800c9b4:	221e      	movs	r2, #30
 800c9b6:	446a      	add	r2, sp
 800c9b8:	a90a      	add	r1, sp, #40	; 0x28
 800c9ba:	2005      	movs	r0, #5
 800c9bc:	f7ff ff6a 	bl	800c894 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c4:	2600      	movs	r6, #0
 800c9c6:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c9c8:	882b      	ldrh	r3, [r5, #0]
 800c9ca:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c9cc:	a90d      	add	r1, sp, #52	; 0x34
 800c9ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9d0:	f003 fdee 	bl	80105b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9d4:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c9da:	8823      	ldrh	r3, [r4, #0]
 800c9dc:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c9de:	a90d      	add	r1, sp, #52	; 0x34
 800c9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e2:	f003 fde5 	bl	80105b0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c9e6:	8829      	ldrh	r1, [r5, #0]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9ec:	f003 fec6 	bl	801077c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c9f0:	2005      	movs	r0, #5
 800c9f2:	f000 fadf 	bl	800cfb4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c9f6:	8821      	ldrh	r1, [r4, #0]
 800c9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9fa:	f003 feb9 	bl	8010770 <HAL_GPIO_ReadPin>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d006      	beq.n	800ca10 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca02:	4b0e      	ldr	r3, [pc, #56]	; (800ca3c <IsFactoryReset+0xf0>)
 800ca04:	2201      	movs	r2, #1
 800ca06:	4252      	negs	r2, r2
 800ca08:	601a      	str	r2, [r3, #0]
	return 0;
 800ca0a:	2000      	movs	r0, #0
}
 800ca0c:	b012      	add	sp, #72	; 0x48
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ca10:	2322      	movs	r3, #34	; 0x22
 800ca12:	446b      	add	r3, sp
 800ca14:	8819      	ldrh	r1, [r3, #0]
 800ca16:	2201      	movs	r2, #1
 800ca18:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca1a:	f003 feaf 	bl	801077c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ca1e:	2005      	movs	r0, #5
 800ca20:	f000 fac8 	bl	800cfb4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ca24:	ab07      	add	r3, sp, #28
 800ca26:	8819      	ldrh	r1, [r3, #0]
 800ca28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca2a:	f003 fea1 	bl	8010770 <HAL_GPIO_ReadPin>
 800ca2e:	2801      	cmp	r0, #1
 800ca30:	d1e7      	bne.n	800ca02 <IsFactoryReset+0xb6>
			return 1;
 800ca32:	2001      	movs	r0, #1
 800ca34:	e7ea      	b.n	800ca0c <IsFactoryReset+0xc0>
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	40021000 	.word	0x40021000
 800ca3c:	20007ff0 	.word	0x20007ff0

0800ca40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ca40:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ca42:	f002 fdc1 	bl	800f5c8 <HAL_IncTick>
  osSystickHandler();  
 800ca46:	f000 fe09 	bl	800d65c <osSystickHandler>

}
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ca4c:	e7fe      	b.n	800ca4c <HardFault_Handler>
	...

0800ca50 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800ca50:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800ca52:	4802      	ldr	r0, [pc, #8]	; (800ca5c <USART1_IRQHandler+0xc>)
 800ca54:	f005 fecb 	bl	80127ee <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca58:	bd10      	pop	{r4, pc}
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	20006a8c 	.word	0x20006a8c

0800ca60 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ca60:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ca62:	4802      	ldr	r0, [pc, #8]	; (800ca6c <USART2_IRQHandler+0xc>)
 800ca64:	f005 fec3 	bl	80127ee <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	46c0      	nop			; (mov r8, r8)
 800ca6c:	20006b74 	.word	0x20006b74

0800ca70 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ca70:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ca72:	4805      	ldr	r0, [pc, #20]	; (800ca88 <USART3_8_IRQHandler+0x18>)
 800ca74:	f005 febb 	bl	80127ee <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800ca78:	4804      	ldr	r0, [pc, #16]	; (800ca8c <USART3_8_IRQHandler+0x1c>)
 800ca7a:	f005 feb8 	bl	80127ee <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800ca7e:	4804      	ldr	r0, [pc, #16]	; (800ca90 <USART3_8_IRQHandler+0x20>)
 800ca80:	f005 feb5 	bl	80127ee <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	2000696c 	.word	0x2000696c
 800ca8c:	20006a1c 	.word	0x20006a1c
 800ca90:	20006b04 	.word	0x20006b04

0800ca94 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800ca94:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ca96:	2001      	movs	r0, #1
 800ca98:	f7fa fe02 	bl	80076a0 <DMA_IRQHandler>
	
}
 800ca9c:	bd10      	pop	{r4, pc}
	...

0800caa0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800caa0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800caa2:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	06db      	lsls	r3, r3, #27
 800caa8:	d408      	bmi.n	800cabc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800caaa:	4b0b      	ldr	r3, [pc, #44]	; (800cad8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	05db      	lsls	r3, r3, #23
 800cab0:	d408      	bmi.n	800cac4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cab2:	4b09      	ldr	r3, [pc, #36]	; (800cad8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	06db      	lsls	r3, r3, #27
 800cab8:	d408      	bmi.n	800cacc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800caba:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800cabc:	2005      	movs	r0, #5
 800cabe:	f7fa fdef 	bl	80076a0 <DMA_IRQHandler>
 800cac2:	e7fa      	b.n	800caba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800cac4:	2002      	movs	r0, #2
 800cac6:	f7fa fdeb 	bl	80076a0 <DMA_IRQHandler>
 800caca:	e7f6      	b.n	800caba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cacc:	4803      	ldr	r0, [pc, #12]	; (800cadc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cace:	f002 ffcb 	bl	800fa68 <HAL_DMA_IRQHandler>
}
 800cad2:	e7f2      	b.n	800caba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cad4:	40020400 	.word	0x40020400
 800cad8:	40020000 	.word	0x40020000
 800cadc:	200017c0 	.word	0x200017c0

0800cae0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cae0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cae2:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	03db      	lsls	r3, r3, #15
 800cae8:	d413      	bmi.n	800cb12 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	02db      	lsls	r3, r3, #11
 800caf0:	d413      	bmi.n	800cb1a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800caf2:	4b11      	ldr	r3, [pc, #68]	; (800cb38 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	05db      	lsls	r3, r3, #23
 800caf8:	d413      	bmi.n	800cb22 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cafa:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	04db      	lsls	r3, r3, #19
 800cb00:	d413      	bmi.n	800cb2a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cb02:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	01db      	lsls	r3, r3, #7
 800cb08:	d506      	bpl.n	800cb18 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cb0a:	480c      	ldr	r0, [pc, #48]	; (800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cb0c:	f002 ffac 	bl	800fa68 <HAL_DMA_IRQHandler>
	}
}
 800cb10:	e002      	b.n	800cb18 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cb12:	2003      	movs	r0, #3
 800cb14:	f7fa fdc4 	bl	80076a0 <DMA_IRQHandler>
}
 800cb18:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cb1a:	2004      	movs	r0, #4
 800cb1c:	f7fa fdc0 	bl	80076a0 <DMA_IRQHandler>
 800cb20:	e7fa      	b.n	800cb18 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cb22:	2006      	movs	r0, #6
 800cb24:	f7fa fdbc 	bl	80076a0 <DMA_IRQHandler>
 800cb28:	e7f6      	b.n	800cb18 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cb2a:	4805      	ldr	r0, [pc, #20]	; (800cb40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cb2c:	f002 ff9c 	bl	800fa68 <HAL_DMA_IRQHandler>
 800cb30:	e7f2      	b.n	800cb18 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	40020000 	.word	0x40020000
 800cb38:	40020400 	.word	0x40020400
 800cb3c:	20001830 	.word	0x20001830
 800cb40:	200017f8 	.word	0x200017f8

0800cb44 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb44:	b510      	push	{r4, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cb4e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cb54:	f7fe fefa 	bl	800b94c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cb58:	0020      	movs	r0, r4
 800cb5a:	f7fe fafb 	bl	800b154 <GetPort>
 800cb5e:	0080      	lsls	r0, r0, #2
 800cb60:	4b03      	ldr	r3, [pc, #12]	; (800cb70 <HAL_UART_TxCpltCallback+0x2c>)
 800cb62:	58c0      	ldr	r0, [r0, r3]
 800cb64:	a901      	add	r1, sp, #4
 800cb66:	f001 f8fd 	bl	800dd64 <xQueueGiveFromISR>
}
 800cb6a:	b002      	add	sp, #8
 800cb6c:	bd10      	pop	{r4, pc}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	20006918 	.word	0x20006918

0800cb74 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb74:	b510      	push	{r4, lr}
 800cb76:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cb78:	2369      	movs	r3, #105	; 0x69
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cb7e:	f7fe fae9 	bl	800b154 <GetPort>
	if (portStatus[port] == STREAM) {
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <HAL_UART_ErrorCallback+0x40>)
 800cb84:	5c1b      	ldrb	r3, [r3, r0]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d005      	beq.n	800cb96 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cb8a:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <HAL_UART_ErrorCallback+0x44>)
 800cb8c:	1818      	adds	r0, r3, r0
 800cb8e:	3801      	subs	r0, #1
 800cb90:	2301      	movs	r3, #1
 800cb92:	7003      	strb	r3, [r0, #0]
	}	
}
 800cb94:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cb96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	b292      	uxth	r2, r2
 800cb9e:	3801      	subs	r0, #1
 800cba0:	0080      	lsls	r0, r0, #2
 800cba2:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <HAL_UART_ErrorCallback+0x48>)
 800cba4:	58c3      	ldr	r3, [r0, r3]
 800cba6:	6819      	ldr	r1, [r3, #0]
 800cba8:	3128      	adds	r1, #40	; 0x28
 800cbaa:	0020      	movs	r0, r4
 800cbac:	f005 fa08 	bl	8011fc0 <HAL_UART_Receive_DMA>
 800cbb0:	e7f0      	b.n	800cb94 <HAL_UART_ErrorCallback+0x20>
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	20001098 	.word	0x20001098
 800cbb8:	20001264 	.word	0x20001264
 800cbbc:	20001400 	.word	0x20001400

0800cbc0 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cbc4:	f7fe fac6 	bl	800b154 <GetPort>
 800cbc8:	4b13      	ldr	r3, [pc, #76]	; (800cc18 <HAL_UART_RxCpltCallback+0x58>)
 800cbca:	5c1b      	ldrb	r3, [r3, r0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d006      	beq.n	800cbde <HAL_UART_RxCpltCallback+0x1e>
 800cbd0:	0020      	movs	r0, r4
 800cbd2:	f7fe fabf 	bl	800b154 <GetPort>
 800cbd6:	4b10      	ldr	r3, [pc, #64]	; (800cc18 <HAL_UART_RxCpltCallback+0x58>)
 800cbd8:	5c1b      	ldrb	r3, [r3, r0]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d11a      	bne.n	800cc14 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800cbde:	0020      	movs	r0, r4
 800cbe0:	f7fe fab8 	bl	800b154 <GetPort>
 800cbe4:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <HAL_UART_RxCpltCallback+0x5c>)
 800cbe6:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800cbe8:	0020      	movs	r0, r4
 800cbea:	f7fe fab3 	bl	800b154 <GetPort>
 800cbee:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <HAL_UART_RxCpltCallback+0x58>)
 800cbf0:	2205      	movs	r2, #5
 800cbf2:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cbf4:	0020      	movs	r0, r4
 800cbf6:	f7fe faad 	bl	800b154 <GetPort>
 800cbfa:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <HAL_UART_RxCpltCallback+0x60>)
 800cbfc:	1818      	adds	r0, r3, r0
 800cbfe:	3801      	subs	r0, #1
 800cc00:	2300      	movs	r3, #0
 800cc02:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cc04:	0020      	movs	r0, r4
 800cc06:	f7fe faa5 	bl	800b154 <GetPort>
 800cc0a:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <HAL_UART_RxCpltCallback+0x64>)
 800cc0c:	1818      	adds	r0, r3, r0
 800cc0e:	3801      	subs	r0, #1
 800cc10:	2301      	movs	r3, #1
 800cc12:	7003      	strb	r3, [r0, #0]
	}
}
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	46c0      	nop			; (mov r8, r8)
 800cc18:	20001098 	.word	0x20001098
 800cc1c:	20006898 	.word	0x20006898
 800cc20:	200013ac 	.word	0x200013ac
 800cc24:	20001264 	.word	0x20001264

0800cc28 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cc28:	b672      	cpsid	i
 800cc2a:	e7fe      	b.n	800cc2a <vApplicationStackOverflowHook+0x2>

0800cc2c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cc2c:	b672      	cpsid	i
 800cc2e:	e7fe      	b.n	800cc2e <vApplicationMallocFailedHook+0x2>

0800cc30 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc32:	46ce      	mov	lr, r9
 800cc34:	b500      	push	{lr}
 800cc36:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc38:	ac05      	add	r4, sp, #20
 800cc3a:	4b34      	ldr	r3, [pc, #208]	; (800cd0c <RTC_CalendarConfig+0xdc>)
 800cc3c:	0022      	movs	r2, r4
 800cc3e:	cb43      	ldmia	r3!, {r0, r1, r6}
 800cc40:	c243      	stmia	r2!, {r0, r1, r6}
 800cc42:	aa02      	add	r2, sp, #8
 800cc44:	4b32      	ldr	r3, [pc, #200]	; (800cd10 <RTC_CalendarConfig+0xe0>)
 800cc46:	cb03      	ldmia	r3!, {r0, r1}
 800cc48:	c203      	stmia	r2!, {r0, r1}
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800cc4e:	2015      	movs	r0, #21
 800cc50:	ab02      	add	r3, sp, #8
 800cc52:	469c      	mov	ip, r3
 800cc54:	4460      	add	r0, ip
 800cc56:	f005 fe5a 	bl	801290e <atoi>
 800cc5a:	b2c3      	uxtb	r3, r0
 800cc5c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800cc5e:	2600      	movs	r6, #0
 800cc60:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800cc62:	a806      	add	r0, sp, #24
 800cc64:	f005 fe53 	bl	801290e <atoi>
 800cc68:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800cc6a:	70e6      	strb	r6, [r4, #3]
 800cc6c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc6e:	4e29      	ldr	r6, [pc, #164]	; (800cd14 <RTC_CalendarConfig+0xe4>)
 800cc70:	e002      	b.n	800cc78 <RTC_CalendarConfig+0x48>
 800cc72:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800cc74:	2c0d      	cmp	r4, #13
 800cc76:	d009      	beq.n	800cc8c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc78:	00a3      	lsls	r3, r4, #2
 800cc7a:	3b04      	subs	r3, #4
 800cc7c:	58f1      	ldr	r1, [r6, r3]
 800cc7e:	a805      	add	r0, sp, #20
 800cc80:	f7f3 fa40 	bl	8000104 <strcmp>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d1f4      	bne.n	800cc72 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800cc88:	b2e5      	uxtb	r5, r4
 800cc8a:	e7f2      	b.n	800cc72 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cc8c:	ab02      	add	r3, sp, #8
 800cc8e:	1d98      	adds	r0, r3, #6
 800cc90:	f005 fe3d 	bl	801290e <atoi>
 800cc94:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800cc96:	ac05      	add	r4, sp, #20
 800cc98:	2600      	movs	r6, #0
 800cc9a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800cc9c:	ab02      	add	r3, sp, #8
 800cc9e:	1cd8      	adds	r0, r3, #3
 800cca0:	f005 fe35 	bl	801290e <atoi>
 800cca4:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800cca6:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800cca8:	a802      	add	r0, sp, #8
 800ccaa:	f005 fe30 	bl	801290e <atoi>
 800ccae:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800ccb0:	a90d      	add	r1, sp, #52	; 0x34
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800ccb6:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800ccb8:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ccba:	2301      	movs	r3, #1
 800ccbc:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	4815      	ldr	r0, [pc, #84]	; (800cd18 <RTC_CalendarConfig+0xe8>)
 800ccc2:	f004 fb9d 	bl	8011400 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800ccc6:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d119      	bne.n	800cd00 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800cccc:	a908      	add	r1, sp, #32
 800ccce:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800ccd4:	9b00      	ldr	r3, [sp, #0]
 800ccd6:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	720b      	strb	r3, [r1, #8]
 800ccdc:	4a0f      	ldr	r2, [pc, #60]	; (800cd1c <RTC_CalendarConfig+0xec>)
 800ccde:	3018      	adds	r0, #24
 800cce0:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cce2:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cce4:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cce6:	2200      	movs	r2, #0
 800cce8:	480b      	ldr	r0, [pc, #44]	; (800cd18 <RTC_CalendarConfig+0xe8>)
 800ccea:	f004 fb03 	bl	80112f4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800ccee:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d105      	bne.n	800cd00 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ccf4:	4a0a      	ldr	r2, [pc, #40]	; (800cd20 <RTC_CalendarConfig+0xf0>)
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4807      	ldr	r0, [pc, #28]	; (800cd18 <RTC_CalendarConfig+0xe8>)
 800ccfa:	f004 fc45 	bl	8011588 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	0018      	movs	r0, r3
 800cd02:	b00e      	add	sp, #56	; 0x38
 800cd04:	bc04      	pop	{r2}
 800cd06:	4691      	mov	r9, r2
 800cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0a:	46c0      	nop			; (mov r8, r8)
 800cd0c:	08017820 	.word	0x08017820
 800cd10:	08017844 	.word	0x08017844
 800cd14:	20000020 	.word	0x20000020
 800cd18:	20006c08 	.word	0x20006c08
 800cd1c:	20006898 	.word	0x20006898
 800cd20:	000032f2 	.word	0x000032f2

0800cd24 <RTC_Init>:
{
 800cd24:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800cd26:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <RTC_Init+0x74>)
 800cd28:	6a11      	ldr	r1, [r2, #32]
 800cd2a:	2380      	movs	r3, #128	; 0x80
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	430b      	orrs	r3, r1
 800cd30:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800cd32:	481a      	ldr	r0, [pc, #104]	; (800cd9c <RTC_Init+0x78>)
 800cd34:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <RTC_Init+0x7c>)
 800cd36:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800cd3c:	227c      	movs	r2, #124	; 0x7c
 800cd3e:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800cd40:	4a18      	ldr	r2, [pc, #96]	; (800cda4 <RTC_Init+0x80>)
 800cd42:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cd44:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cd46:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cd48:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cd4a:	f004 fa75 	bl	8011238 <HAL_RTC_Init>
 800cd4e:	23ff      	movs	r3, #255	; 0xff
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d11e      	bne.n	800cd92 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cd54:	2101      	movs	r1, #1
 800cd56:	4811      	ldr	r0, [pc, #68]	; (800cd9c <RTC_Init+0x78>)
 800cd58:	f004 fc1c 	bl	8011594 <HAL_RTCEx_BKUPRead>
 800cd5c:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <RTC_Init+0x84>)
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	d10e      	bne.n	800cd80 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cd62:	4b0d      	ldr	r3, [pc, #52]	; (800cd98 <RTC_Init+0x74>)
 800cd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd66:	011b      	lsls	r3, r3, #4
 800cd68:	d502      	bpl.n	800cd70 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cd6a:	4b10      	ldr	r3, [pc, #64]	; (800cdac <RTC_Init+0x88>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cd70:	4b09      	ldr	r3, [pc, #36]	; (800cd98 <RTC_Init+0x74>)
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	015b      	lsls	r3, r3, #5
 800cd76:	d505      	bpl.n	800cd84 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800cd78:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <RTC_Init+0x88>)
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e001      	b.n	800cd84 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800cd80:	f7ff ff56 	bl	800cc30 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cd84:	4a04      	ldr	r2, [pc, #16]	; (800cd98 <RTC_Init+0x74>)
 800cd86:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	045b      	lsls	r3, r3, #17
 800cd8c:	430b      	orrs	r3, r1
 800cd8e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	0018      	movs	r0, r3
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	46c0      	nop			; (mov r8, r8)
 800cd98:	40021000 	.word	0x40021000
 800cd9c:	20006c08 	.word	0x20006c08
 800cda0:	40002800 	.word	0x40002800
 800cda4:	000007cf 	.word	0x000007cf
 800cda8:	000032f2 	.word	0x000032f2
 800cdac:	200019b8 	.word	0x200019b8

0800cdb0 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	46c6      	mov	lr, r8
 800cdb4:	b500      	push	{lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	ac0c      	add	r4, sp, #48	; 0x30
 800cdba:	7827      	ldrb	r7, [r4, #0]
 800cdbc:	ac0d      	add	r4, sp, #52	; 0x34
 800cdbe:	7824      	ldrb	r4, [r4, #0]
 800cdc0:	46a0      	mov	r8, r4
 800cdc2:	ac0e      	add	r4, sp, #56	; 0x38
 800cdc4:	7825      	ldrb	r5, [r4, #0]
 800cdc6:	ac0f      	add	r4, sp, #60	; 0x3c
 800cdc8:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cdca:	ac05      	add	r4, sp, #20
 800cdcc:	3230      	adds	r2, #48	; 0x30
 800cdce:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cdd0:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cdd2:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cdd4:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	0021      	movs	r1, r4
 800cdda:	481f      	ldr	r0, [pc, #124]	; (800ce58 <BOS_CalendarConfig+0xa8>)
 800cddc:	f004 fb10 	bl	8011400 <HAL_RTC_SetDate>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d136      	bne.n	800ce52 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800cde4:	466b      	mov	r3, sp
 800cde6:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800cde8:	4642      	mov	r2, r8
 800cdea:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800cdec:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800cdee:	2300      	movs	r3, #0
 800cdf0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800cdf2:	2e01      	cmp	r6, #1
 800cdf4:	d020      	beq.n	800ce38 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800cdf6:	2e02      	cmp	r6, #2
 800cdf8:	d024      	beq.n	800ce44 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800cdfa:	4b18      	ldr	r3, [pc, #96]	; (800ce5c <BOS_CalendarConfig+0xac>)
 800cdfc:	2218      	movs	r2, #24
 800cdfe:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce00:	2200      	movs	r2, #0
 800ce02:	4669      	mov	r1, sp
 800ce04:	4814      	ldr	r0, [pc, #80]	; (800ce58 <BOS_CalendarConfig+0xa8>)
 800ce06:	f004 fa75 	bl	80112f4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800ce0a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d10e      	bne.n	800ce2e <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800ce10:	4a12      	ldr	r2, [pc, #72]	; (800ce5c <BOS_CalendarConfig+0xac>)
 800ce12:	7b53      	ldrb	r3, [r2, #13]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	7911      	ldrb	r1, [r2, #4]
 800ce18:	4319      	orrs	r1, r3
 800ce1a:	308d      	adds	r0, #141	; 0x8d
 800ce1c:	0040      	lsls	r0, r0, #1
 800ce1e:	f7fa fd29 	bl	8007874 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce22:	4a0f      	ldr	r2, [pc, #60]	; (800ce60 <BOS_CalendarConfig+0xb0>)
 800ce24:	2101      	movs	r1, #1
 800ce26:	480c      	ldr	r0, [pc, #48]	; (800ce58 <BOS_CalendarConfig+0xa8>)
 800ce28:	f004 fbae 	bl	8011588 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	0018      	movs	r0, r3
 800ce30:	b006      	add	sp, #24
 800ce32:	bc04      	pop	{r2}
 800ce34:	4690      	mov	r8, r2
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ce38:	466a      	mov	r2, sp
 800ce3a:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <BOS_CalendarConfig+0xac>)
 800ce3e:	220c      	movs	r2, #12
 800ce40:	735a      	strb	r2, [r3, #13]
 800ce42:	e7dd      	b.n	800ce00 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ce44:	2340      	movs	r3, #64	; 0x40
 800ce46:	466a      	mov	r2, sp
 800ce48:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce4a:	4b04      	ldr	r3, [pc, #16]	; (800ce5c <BOS_CalendarConfig+0xac>)
 800ce4c:	220c      	movs	r2, #12
 800ce4e:	735a      	strb	r2, [r3, #13]
 800ce50:	e7d6      	b.n	800ce00 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800ce52:	23ff      	movs	r3, #255	; 0xff
 800ce54:	e7eb      	b.n	800ce2e <BOS_CalendarConfig+0x7e>
 800ce56:	46c0      	nop			; (mov r8, r8)
 800ce58:	20006c08 	.word	0x20006c08
 800ce5c:	20006898 	.word	0x20006898
 800ce60:	000032f2 	.word	0x000032f2

0800ce64 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ce64:	b530      	push	{r4, r5, lr}
 800ce66:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800ce68:	4d16      	ldr	r5, [pc, #88]	; (800cec4 <GetTimeDate+0x60>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	a902      	add	r1, sp, #8
 800ce6e:	0028      	movs	r0, r5
 800ce70:	f004 fb42 	bl	80114f8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800ce74:	ac07      	add	r4, sp, #28
 800ce76:	2200      	movs	r2, #0
 800ce78:	0021      	movs	r1, r4
 800ce7a:	0028      	movs	r0, r5
 800ce7c:	f004 fb62 	bl	8011544 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800ce80:	4b11      	ldr	r3, [pc, #68]	; (800cec8 <GetTimeDate+0x64>)
 800ce82:	aa02      	add	r2, sp, #8
 800ce84:	7a12      	ldrb	r2, [r2, #8]
 800ce86:	09d2      	lsrs	r2, r2, #7
 800ce88:	3201      	adds	r2, #1
 800ce8a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800ce8c:	9a03      	ldr	r2, [sp, #12]
 800ce8e:	9201      	str	r2, [sp, #4]
 800ce90:	0852      	lsrs	r2, r2, #1
 800ce92:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800ce94:	aa02      	add	r2, sp, #8
 800ce96:	7892      	ldrb	r2, [r2, #2]
 800ce98:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800ce9a:	aa02      	add	r2, sp, #8
 800ce9c:	7852      	ldrb	r2, [r2, #1]
 800ce9e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800cea0:	aa02      	add	r2, sp, #8
 800cea2:	7812      	ldrb	r2, [r2, #0]
 800cea4:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800cea6:	78a2      	ldrb	r2, [r4, #2]
 800cea8:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800ceaa:	7862      	ldrb	r2, [r4, #1]
 800ceac:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800ceae:	7822      	ldrb	r2, [r4, #0]
 800ceb0:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800ceb2:	78e2      	ldrb	r2, [r4, #3]
 800ceb4:	21fa      	movs	r1, #250	; 0xfa
 800ceb6:	00c9      	lsls	r1, r1, #3
 800ceb8:	468c      	mov	ip, r1
 800ceba:	4462      	add	r2, ip
 800cebc:	831a      	strh	r2, [r3, #24]
}
 800cebe:	b009      	add	sp, #36	; 0x24
 800cec0:	bd30      	pop	{r4, r5, pc}
 800cec2:	46c0      	nop			; (mov r8, r8)
 800cec4:	20006c08 	.word	0x20006c08
 800cec8:	20006898 	.word	0x20006898

0800cecc <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800cecc:	b530      	push	{r4, r5, lr}
 800cece:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800ced0:	4a12      	ldr	r2, [pc, #72]	; (800cf1c <TIM_USEC_Init+0x50>)
 800ced2:	69d1      	ldr	r1, [r2, #28]
 800ced4:	2080      	movs	r0, #128	; 0x80
 800ced6:	0040      	lsls	r0, r0, #1
 800ced8:	4301      	orrs	r1, r0
 800ceda:	61d1      	str	r1, [r2, #28]
 800cedc:	69d3      	ldr	r3, [r2, #28]
 800cede:	4003      	ands	r3, r0
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800cee4:	4c0e      	ldr	r4, [pc, #56]	; (800cf20 <TIM_USEC_Init+0x54>)
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <TIM_USEC_Init+0x58>)
 800cee8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800ceea:	f004 f8bd 	bl	8011068 <HAL_RCC_GetPCLK1Freq>
 800ceee:	490e      	ldr	r1, [pc, #56]	; (800cf28 <TIM_USEC_Init+0x5c>)
 800cef0:	f7f3 f92e 	bl	8000150 <__udivsi3>
 800cef4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cef6:	2500      	movs	r5, #0
 800cef8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800cefa:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <TIM_USEC_Init+0x60>)
 800cefc:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800cefe:	0020      	movs	r0, r4
 800cf00:	f004 fdc0 	bl	8011a84 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf04:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf06:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf08:	a902      	add	r1, sp, #8
 800cf0a:	0020      	movs	r0, r4
 800cf0c:	f004 ff18 	bl	8011d40 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cf10:	0020      	movs	r0, r4
 800cf12:	f004 fc33 	bl	801177c <HAL_TIM_Base_Start>
}
 800cf16:	b005      	add	sp, #20
 800cf18:	bd30      	pop	{r4, r5, pc}
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	40021000 	.word	0x40021000
 800cf20:	20006c64 	.word	0x20006c64
 800cf24:	40002000 	.word	0x40002000
 800cf28:	000f4240 	.word	0x000f4240
 800cf2c:	0000ffff 	.word	0x0000ffff

0800cf30 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800cf30:	b530      	push	{r4, r5, lr}
 800cf32:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cf34:	4a12      	ldr	r2, [pc, #72]	; (800cf80 <TIM_MSEC_Init+0x50>)
 800cf36:	6991      	ldr	r1, [r2, #24]
 800cf38:	2080      	movs	r0, #128	; 0x80
 800cf3a:	0240      	lsls	r0, r0, #9
 800cf3c:	4301      	orrs	r1, r0
 800cf3e:	6191      	str	r1, [r2, #24]
 800cf40:	6993      	ldr	r3, [r2, #24]
 800cf42:	4003      	ands	r3, r0
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cf48:	4c0e      	ldr	r4, [pc, #56]	; (800cf84 <TIM_MSEC_Init+0x54>)
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <TIM_MSEC_Init+0x58>)
 800cf4c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cf4e:	f004 f88b 	bl	8011068 <HAL_RCC_GetPCLK1Freq>
 800cf52:	21fa      	movs	r1, #250	; 0xfa
 800cf54:	0089      	lsls	r1, r1, #2
 800cf56:	f7f3 f8fb 	bl	8000150 <__udivsi3>
 800cf5a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf5c:	2500      	movs	r5, #0
 800cf5e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <TIM_MSEC_Init+0x5c>)
 800cf62:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800cf64:	0020      	movs	r0, r4
 800cf66:	f004 fd8d 	bl	8011a84 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf6a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf6c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cf6e:	a902      	add	r1, sp, #8
 800cf70:	0020      	movs	r0, r4
 800cf72:	f004 fee5 	bl	8011d40 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800cf76:	0020      	movs	r0, r4
 800cf78:	f004 fc00 	bl	801177c <HAL_TIM_Base_Start>
}
 800cf7c:	b005      	add	sp, #20
 800cf7e:	bd30      	pop	{r4, r5, pc}
 800cf80:	40021000 	.word	0x40021000
 800cf84:	20006c28 	.word	0x20006c28
 800cf88:	40014000 	.word	0x40014000
 800cf8c:	0000ffff 	.word	0x0000ffff

0800cf90 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800cf90:	b510      	push	{r4, lr}
 800cf92:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800cf94:	f002 f9b4 	bl	800f300 <vPortEnterCritical>
	
	if (Delay)
 800cf98:	2c00      	cmp	r4, #0
 800cf9a:	d006      	beq.n	800cfaa <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800cf9c:	4b04      	ldr	r3, [pc, #16]	; (800cfb0 <StartMicroDelay+0x20>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800cfa2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cfa4:	1a5b      	subs	r3, r3, r1
 800cfa6:	42a3      	cmp	r3, r4
 800cfa8:	d9fb      	bls.n	800cfa2 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cfaa:	f002 f9b5 	bl	800f318 <vPortExitCritical>
}
 800cfae:	bd10      	pop	{r4, pc}
 800cfb0:	20006c64 	.word	0x20006c64

0800cfb4 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800cfb4:	b510      	push	{r4, lr}
 800cfb6:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800cfb8:	f002 f9a2 	bl	800f300 <vPortEnterCritical>
	
	if (Delay)
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	d006      	beq.n	800cfce <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800cfc0:	4b04      	ldr	r3, [pc, #16]	; (800cfd4 <StartMilliDelay+0x20>)
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800cfc6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cfc8:	1a5b      	subs	r3, r3, r1
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	d9fb      	bls.n	800cfc6 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cfce:	f002 f9a3 	bl	800f318 <vPortExitCritical>
}
 800cfd2:	bd10      	pop	{r4, pc}
 800cfd4:	20006c28 	.word	0x20006c28

0800cfd8 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800cfd8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800cfda:	4809      	ldr	r0, [pc, #36]	; (800d000 <MX_USART1_UART_Init+0x28>)
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <MX_USART1_UART_Init+0x2c>)
 800cfde:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800cfe0:	23e1      	movs	r3, #225	; 0xe1
 800cfe2:	031b      	lsls	r3, r3, #12
 800cfe4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cfea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cfec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cfee:	220c      	movs	r2, #12
 800cff0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cff2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cff4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800cff6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cff8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800cffa:	f005 fb21 	bl	8012640 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800cffe:	bd10      	pop	{r4, pc}
 800d000:	20006a8c 	.word	0x20006a8c
 800d004:	40013800 	.word	0x40013800

0800d008 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d008:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d00a:	4809      	ldr	r0, [pc, #36]	; (800d030 <MX_USART2_UART_Init+0x28>)
 800d00c:	4b09      	ldr	r3, [pc, #36]	; (800d034 <MX_USART2_UART_Init+0x2c>)
 800d00e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d010:	23e1      	movs	r3, #225	; 0xe1
 800d012:	031b      	lsls	r3, r3, #12
 800d014:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d016:	2300      	movs	r3, #0
 800d018:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d01a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d01c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d01e:	220c      	movs	r2, #12
 800d020:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d022:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d024:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d026:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d028:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d02a:	f005 fb09 	bl	8012640 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d02e:	bd10      	pop	{r4, pc}
 800d030:	20006b74 	.word	0x20006b74
 800d034:	40004400 	.word	0x40004400

0800d038 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d038:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d03a:	4809      	ldr	r0, [pc, #36]	; (800d060 <MX_USART3_UART_Init+0x28>)
 800d03c:	4b09      	ldr	r3, [pc, #36]	; (800d064 <MX_USART3_UART_Init+0x2c>)
 800d03e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d040:	23e1      	movs	r3, #225	; 0xe1
 800d042:	031b      	lsls	r3, r3, #12
 800d044:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d046:	2300      	movs	r3, #0
 800d048:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d04a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d04c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d04e:	220c      	movs	r2, #12
 800d050:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d052:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d054:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d056:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d058:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d05a:	f005 faf1 	bl	8012640 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d05e:	bd10      	pop	{r4, pc}
 800d060:	2000696c 	.word	0x2000696c
 800d064:	40004800 	.word	0x40004800

0800d068 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d068:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d06a:	4809      	ldr	r0, [pc, #36]	; (800d090 <MX_USART5_UART_Init+0x28>)
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <MX_USART5_UART_Init+0x2c>)
 800d06e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d070:	23e1      	movs	r3, #225	; 0xe1
 800d072:	031b      	lsls	r3, r3, #12
 800d074:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d076:	2300      	movs	r3, #0
 800d078:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d07a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d07c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d07e:	220c      	movs	r2, #12
 800d080:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d082:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d084:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d086:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d088:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d08a:	f005 fad9 	bl	8012640 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	20006a1c 	.word	0x20006a1c
 800d094:	40005000 	.word	0x40005000

0800d098 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d098:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d09a:	4809      	ldr	r0, [pc, #36]	; (800d0c0 <MX_USART6_UART_Init+0x28>)
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <MX_USART6_UART_Init+0x2c>)
 800d09e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0a0:	23e1      	movs	r3, #225	; 0xe1
 800d0a2:	031b      	lsls	r3, r3, #12
 800d0a4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d0aa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d0ac:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d0ae:	220c      	movs	r2, #12
 800d0b0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0b2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0b4:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0b6:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0b8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d0ba:	f005 fac1 	bl	8012640 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	20006b04 	.word	0x20006b04
 800d0c4:	40011400 	.word	0x40011400

0800d0c8 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ca:	46ce      	mov	lr, r9
 800d0cc:	b500      	push	{lr}
 800d0ce:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d0d0:	6803      	ldr	r3, [r0, #0]
 800d0d2:	4a7b      	ldr	r2, [pc, #492]	; (800d2c0 <HAL_UART_MspInit+0x1f8>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d014      	beq.n	800d102 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d0d8:	4a7a      	ldr	r2, [pc, #488]	; (800d2c4 <HAL_UART_MspInit+0x1fc>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d03f      	beq.n	800d15e <HAL_UART_MspInit+0x96>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d0de:	4a7a      	ldr	r2, [pc, #488]	; (800d2c8 <HAL_UART_MspInit+0x200>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d068      	beq.n	800d1b6 <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d0e4:	4a79      	ldr	r2, [pc, #484]	; (800d2cc <HAL_UART_MspInit+0x204>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d007      	beq.n	800d0fa <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d0ea:	4a79      	ldr	r2, [pc, #484]	; (800d2d0 <HAL_UART_MspInit+0x208>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d100      	bne.n	800d0f2 <HAL_UART_MspInit+0x2a>
 800d0f0:	e08e      	b.n	800d210 <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d0f2:	4a78      	ldr	r2, [pc, #480]	; (800d2d4 <HAL_UART_MspInit+0x20c>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d100      	bne.n	800d0fa <HAL_UART_MspInit+0x32>
 800d0f8:	e0b5      	b.n	800d266 <HAL_UART_MspInit+0x19e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d0fa:	b00a      	add	sp, #40	; 0x28
 800d0fc:	bc04      	pop	{r2}
 800d0fe:	4691      	mov	r9, r2
 800d100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d102:	4a75      	ldr	r2, [pc, #468]	; (800d2d8 <HAL_UART_MspInit+0x210>)
 800d104:	6991      	ldr	r1, [r2, #24]
 800d106:	2080      	movs	r0, #128	; 0x80
 800d108:	01c0      	lsls	r0, r0, #7
 800d10a:	4301      	orrs	r1, r0
 800d10c:	6191      	str	r1, [r2, #24]
 800d10e:	6993      	ldr	r3, [r2, #24]
 800d110:	4003      	ands	r3, r0
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d116:	2380      	movs	r3, #128	; 0x80
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d11c:	2702      	movs	r7, #2
 800d11e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d120:	2401      	movs	r4, #1
 800d122:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d124:	2603      	movs	r6, #3
 800d126:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d128:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d12a:	2590      	movs	r5, #144	; 0x90
 800d12c:	05ed      	lsls	r5, r5, #23
 800d12e:	a905      	add	r1, sp, #20
 800d130:	0028      	movs	r0, r5
 800d132:	f003 fa3d 	bl	80105b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d136:	2380      	movs	r3, #128	; 0x80
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d13c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d13e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d140:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d142:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d144:	a905      	add	r1, sp, #20
 800d146:	0028      	movs	r0, r5
 800d148:	f003 fa32 	bl	80105b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d14c:	2200      	movs	r2, #0
 800d14e:	2101      	movs	r1, #1
 800d150:	201b      	movs	r0, #27
 800d152:	f002 fa63 	bl	800f61c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d156:	201b      	movs	r0, #27
 800d158:	f002 fa94 	bl	800f684 <HAL_NVIC_EnableIRQ>
 800d15c:	e7cd      	b.n	800d0fa <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d15e:	4a5e      	ldr	r2, [pc, #376]	; (800d2d8 <HAL_UART_MspInit+0x210>)
 800d160:	69d1      	ldr	r1, [r2, #28]
 800d162:	2080      	movs	r0, #128	; 0x80
 800d164:	0280      	lsls	r0, r0, #10
 800d166:	4301      	orrs	r1, r0
 800d168:	61d1      	str	r1, [r2, #28]
 800d16a:	69d3      	ldr	r3, [r2, #28]
 800d16c:	4003      	ands	r3, r0
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d172:	2304      	movs	r3, #4
 800d174:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d176:	2702      	movs	r7, #2
 800d178:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d17a:	2401      	movs	r4, #1
 800d17c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d17e:	2603      	movs	r6, #3
 800d180:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d182:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d184:	2590      	movs	r5, #144	; 0x90
 800d186:	05ed      	lsls	r5, r5, #23
 800d188:	a905      	add	r1, sp, #20
 800d18a:	0028      	movs	r0, r5
 800d18c:	f003 fa10 	bl	80105b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d190:	2308      	movs	r3, #8
 800d192:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d194:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d196:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d198:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d19a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d19c:	a905      	add	r1, sp, #20
 800d19e:	0028      	movs	r0, r5
 800d1a0:	f003 fa06 	bl	80105b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	201c      	movs	r0, #28
 800d1aa:	f002 fa37 	bl	800f61c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d1ae:	201c      	movs	r0, #28
 800d1b0:	f002 fa68 	bl	800f684 <HAL_NVIC_EnableIRQ>
 800d1b4:	e7a1      	b.n	800d0fa <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d1b6:	4a48      	ldr	r2, [pc, #288]	; (800d2d8 <HAL_UART_MspInit+0x210>)
 800d1b8:	69d1      	ldr	r1, [r2, #28]
 800d1ba:	2080      	movs	r0, #128	; 0x80
 800d1bc:	02c0      	lsls	r0, r0, #11
 800d1be:	4301      	orrs	r1, r0
 800d1c0:	61d1      	str	r1, [r2, #28]
 800d1c2:	69d3      	ldr	r3, [r2, #28]
 800d1c4:	4003      	ands	r3, r0
 800d1c6:	9302      	str	r3, [sp, #8]
 800d1c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d1ca:	2380      	movs	r3, #128	; 0x80
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d0:	2402      	movs	r4, #2
 800d1d2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1d4:	2701      	movs	r7, #1
 800d1d6:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1d8:	2603      	movs	r6, #3
 800d1da:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d1dc:	2504      	movs	r5, #4
 800d1de:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d1e0:	a905      	add	r1, sp, #20
 800d1e2:	483e      	ldr	r0, [pc, #248]	; (800d2dc <HAL_UART_MspInit+0x214>)
 800d1e4:	f003 f9e4 	bl	80105b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d1e8:	2380      	movs	r3, #128	; 0x80
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ee:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1f0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1f2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800d1f4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d1f6:	a905      	add	r1, sp, #20
 800d1f8:	4838      	ldr	r0, [pc, #224]	; (800d2dc <HAL_UART_MspInit+0x214>)
 800d1fa:	f003 f9d9 	bl	80105b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d1fe:	2200      	movs	r2, #0
 800d200:	2101      	movs	r1, #1
 800d202:	201d      	movs	r0, #29
 800d204:	f002 fa0a 	bl	800f61c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d208:	201d      	movs	r0, #29
 800d20a:	f002 fa3b 	bl	800f684 <HAL_NVIC_EnableIRQ>
 800d20e:	e774      	b.n	800d0fa <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800d210:	4a31      	ldr	r2, [pc, #196]	; (800d2d8 <HAL_UART_MspInit+0x210>)
 800d212:	69d1      	ldr	r1, [r2, #28]
 800d214:	2080      	movs	r0, #128	; 0x80
 800d216:	0340      	lsls	r0, r0, #13
 800d218:	4301      	orrs	r1, r0
 800d21a:	61d1      	str	r1, [r2, #28]
 800d21c:	69d3      	ldr	r3, [r2, #28]
 800d21e:	4003      	ands	r3, r0
 800d220:	9303      	str	r3, [sp, #12]
 800d222:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d224:	2308      	movs	r3, #8
 800d226:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d228:	2402      	movs	r4, #2
 800d22a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d22c:	2701      	movs	r7, #1
 800d22e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d230:	2603      	movs	r6, #3
 800d232:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d234:	2504      	movs	r5, #4
 800d236:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d238:	a905      	add	r1, sp, #20
 800d23a:	4828      	ldr	r0, [pc, #160]	; (800d2dc <HAL_UART_MspInit+0x214>)
 800d23c:	f003 f9b8 	bl	80105b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d240:	2310      	movs	r3, #16
 800d242:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d244:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d246:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d248:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d24a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d24c:	a905      	add	r1, sp, #20
 800d24e:	4823      	ldr	r0, [pc, #140]	; (800d2dc <HAL_UART_MspInit+0x214>)
 800d250:	f003 f9ae 	bl	80105b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d254:	2200      	movs	r2, #0
 800d256:	2101      	movs	r1, #1
 800d258:	201d      	movs	r0, #29
 800d25a:	f002 f9df 	bl	800f61c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d25e:	201d      	movs	r0, #29
 800d260:	f002 fa10 	bl	800f684 <HAL_NVIC_EnableIRQ>
 800d264:	e749      	b.n	800d0fa <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800d266:	4b1c      	ldr	r3, [pc, #112]	; (800d2d8 <HAL_UART_MspInit+0x210>)
 800d268:	699a      	ldr	r2, [r3, #24]
 800d26a:	2420      	movs	r4, #32
 800d26c:	4322      	orrs	r2, r4
 800d26e:	619a      	str	r2, [r3, #24]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	4023      	ands	r3, r4
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d278:	2310      	movs	r3, #16
 800d27a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d27c:	3b0e      	subs	r3, #14
 800d27e:	4699      	mov	r9, r3
 800d280:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d282:	2501      	movs	r5, #1
 800d284:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d286:	2703      	movs	r7, #3
 800d288:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d28a:	2605      	movs	r6, #5
 800d28c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d28e:	a905      	add	r1, sp, #20
 800d290:	2090      	movs	r0, #144	; 0x90
 800d292:	05c0      	lsls	r0, r0, #23
 800d294:	f003 f98c 	bl	80105b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d298:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d29a:	464b      	mov	r3, r9
 800d29c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d29e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2a0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d2a2:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d2a4:	a905      	add	r1, sp, #20
 800d2a6:	2090      	movs	r0, #144	; 0x90
 800d2a8:	05c0      	lsls	r0, r0, #23
 800d2aa:	f003 f981 	bl	80105b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	201d      	movs	r0, #29
 800d2b4:	f002 f9b2 	bl	800f61c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d2b8:	201d      	movs	r0, #29
 800d2ba:	f002 f9e3 	bl	800f684 <HAL_NVIC_EnableIRQ>
}
 800d2be:	e71c      	b.n	800d0fa <HAL_UART_MspInit+0x32>
 800d2c0:	40013800 	.word	0x40013800
 800d2c4:	40004400 	.word	0x40004400
 800d2c8:	40004800 	.word	0x40004800
 800d2cc:	40004c00 	.word	0x40004c00
 800d2d0:	40005000 	.word	0x40005000
 800d2d4:	40011400 	.word	0x40011400
 800d2d8:	40021000 	.word	0x40021000
 800d2dc:	48000400 	.word	0x48000400

0800d2e0 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d2e0:	2805      	cmp	r0, #5
 800d2e2:	d80b      	bhi.n	800d2fc <GetUart+0x1c>
 800d2e4:	0080      	lsls	r0, r0, #2
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <GetUart+0x24>)
 800d2e8:	581b      	ldr	r3, [r3, r0]
 800d2ea:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800d2ec:	4806      	ldr	r0, [pc, #24]	; (800d308 <GetUart+0x28>)
 800d2ee:	e008      	b.n	800d302 <GetUart+0x22>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d2f0:	4806      	ldr	r0, [pc, #24]	; (800d30c <GetUart+0x2c>)
 800d2f2:	e006      	b.n	800d302 <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d2f4:	4806      	ldr	r0, [pc, #24]	; (800d310 <GetUart+0x30>)
 800d2f6:	e004      	b.n	800d302 <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d2f8:	4806      	ldr	r0, [pc, #24]	; (800d314 <GetUart+0x34>)
 800d2fa:	e002      	b.n	800d302 <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e000      	b.n	800d302 <GetUart+0x22>
			return P1uart;	
 800d300:	4805      	ldr	r0, [pc, #20]	; (800d318 <GetUart+0x38>)
	}		
}
 800d302:	4770      	bx	lr
 800d304:	0801a374 	.word	0x0801a374
 800d308:	20006b74 	.word	0x20006b74
 800d30c:	20006b04 	.word	0x20006b04
 800d310:	2000696c 	.word	0x2000696c
 800d314:	20006a8c 	.word	0x20006a8c
 800d318:	20006a1c 	.word	0x20006a1c

0800d31c <writePxMutex>:
{
 800d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d31e:	b083      	sub	sp, #12
 800d320:	0005      	movs	r5, r0
 800d322:	9100      	str	r1, [sp, #0]
 800d324:	0017      	movs	r7, r2
 800d326:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d328:	f7ff ffda 	bl	800d2e0 <GetUart>
 800d32c:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d32e:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d330:	2800      	cmp	r0, #0
 800d332:	d016      	beq.n	800d362 <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d334:	00ab      	lsls	r3, r5, #2
 800d336:	4a0c      	ldr	r2, [pc, #48]	; (800d368 <writePxMutex+0x4c>)
 800d338:	5898      	ldr	r0, [r3, r2]
 800d33a:	9901      	ldr	r1, [sp, #4]
 800d33c:	f000 f93a 	bl	800d5b4 <osSemaphoreWait>
 800d340:	2800      	cmp	r0, #0
 800d342:	d10e      	bne.n	800d362 <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d344:	9b08      	ldr	r3, [sp, #32]
 800d346:	003a      	movs	r2, r7
 800d348:	9900      	ldr	r1, [sp, #0]
 800d34a:	0020      	movs	r0, r4
 800d34c:	f005 f8d2 	bl	80124f4 <HAL_UART_Transmit>
 800d350:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d352:	d001      	beq.n	800d358 <writePxMutex+0x3c>
 800d354:	2803      	cmp	r0, #3
 800d356:	d1f5      	bne.n	800d344 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d358:	00ad      	lsls	r5, r5, #2
 800d35a:	4b03      	ldr	r3, [pc, #12]	; (800d368 <writePxMutex+0x4c>)
 800d35c:	58e8      	ldr	r0, [r5, r3]
 800d35e:	f000 f955 	bl	800d60c <osSemaphoreRelease>
}
 800d362:	0030      	movs	r0, r6
 800d364:	b003      	add	sp, #12
 800d366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d368:	20006918 	.word	0x20006918

0800d36c <writePxITMutex>:
{
 800d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36e:	b083      	sub	sp, #12
 800d370:	0004      	movs	r4, r0
 800d372:	9101      	str	r1, [sp, #4]
 800d374:	0017      	movs	r7, r2
 800d376:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d378:	f7ff ffb2 	bl	800d2e0 <GetUart>
 800d37c:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d37e:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800d380:	2800      	cmp	r0, #0
 800d382:	d008      	beq.n	800d396 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d384:	00a4      	lsls	r4, r4, #2
 800d386:	4b09      	ldr	r3, [pc, #36]	; (800d3ac <writePxITMutex+0x40>)
 800d388:	58e0      	ldr	r0, [r4, r3]
 800d38a:	0029      	movs	r1, r5
 800d38c:	f000 f912 	bl	800d5b4 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d390:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d392:	2800      	cmp	r0, #0
 800d394:	d002      	beq.n	800d39c <writePxITMutex+0x30>
}
 800d396:	0018      	movs	r0, r3
 800d398:	b003      	add	sp, #12
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d39c:	003a      	movs	r2, r7
 800d39e:	9901      	ldr	r1, [sp, #4]
 800d3a0:	0030      	movs	r0, r6
 800d3a2:	f004 fd11 	bl	8011dc8 <HAL_UART_Transmit_IT>
 800d3a6:	0003      	movs	r3, r0
 800d3a8:	e7f5      	b.n	800d396 <writePxITMutex+0x2a>
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	20006918 	.word	0x20006918

0800d3b0 <writePxDMAMutex>:
{
 800d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	0004      	movs	r4, r0
 800d3b6:	000f      	movs	r7, r1
 800d3b8:	9201      	str	r2, [sp, #4]
 800d3ba:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800d3bc:	f7ff ff90 	bl	800d2e0 <GetUart>
 800d3c0:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3c2:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d008      	beq.n	800d3da <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3c8:	00a4      	lsls	r4, r4, #2
 800d3ca:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <writePxDMAMutex+0x44>)
 800d3cc:	58e0      	ldr	r0, [r4, r3]
 800d3ce:	0031      	movs	r1, r6
 800d3d0:	f000 f8f0 	bl	800d5b4 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3d4:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d002      	beq.n	800d3e0 <writePxDMAMutex+0x30>
}
 800d3da:	0018      	movs	r0, r3
 800d3dc:	b003      	add	sp, #12
 800d3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d3e0:	0028      	movs	r0, r5
 800d3e2:	f7ff f997 	bl	800c714 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d3e6:	9a01      	ldr	r2, [sp, #4]
 800d3e8:	0039      	movs	r1, r7
 800d3ea:	0028      	movs	r0, r5
 800d3ec:	f004 fd98 	bl	8011f20 <HAL_UART_Transmit_DMA>
 800d3f0:	0003      	movs	r3, r0
 800d3f2:	e7f2      	b.n	800d3da <writePxDMAMutex+0x2a>
 800d3f4:	20006918 	.word	0x20006918

0800d3f8 <UpdateBaudrate>:
{
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d3fc:	f7ff ff70 	bl	800d2e0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800d400:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d402:	f005 f91d 	bl	8012640 <HAL_UART_Init>
}
 800d406:	2000      	movs	r0, #0
 800d408:	bd10      	pop	{r4, pc}
	...

0800d40c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d410:	d003      	beq.n	800d41a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d412:	2901      	cmp	r1, #1
 800d414:	d002      	beq.n	800d41c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d416:	2900      	cmp	r1, #0
 800d418:	d016      	beq.n	800d448 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d41c:	f7fd fe9a 	bl	800b154 <GetPort>
 800d420:	4b14      	ldr	r3, [pc, #80]	; (800d474 <SwapUartPins+0x68>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	3b01      	subs	r3, #1
 800d426:	4d14      	ldr	r5, [pc, #80]	; (800d478 <SwapUartPins+0x6c>)
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	3801      	subs	r0, #1
 800d42c:	2180      	movs	r1, #128	; 0x80
 800d42e:	0209      	lsls	r1, r1, #8
 800d430:	000a      	movs	r2, r1
 800d432:	4102      	asrs	r2, r0
 800d434:	5b58      	ldrh	r0, [r3, r5]
 800d436:	4302      	orrs	r2, r0
 800d438:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d43a:	2308      	movs	r3, #8
 800d43c:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d43e:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d440:	0020      	movs	r0, r4
 800d442:	f005 f8fd 	bl	8012640 <HAL_UART_Init>
 800d446:	e7e8      	b.n	800d41a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d448:	f7fd fe84 	bl	800b154 <GetPort>
 800d44c:	4b09      	ldr	r3, [pc, #36]	; (800d474 <SwapUartPins+0x68>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	3b01      	subs	r3, #1
 800d452:	4d09      	ldr	r5, [pc, #36]	; (800d478 <SwapUartPins+0x6c>)
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	3801      	subs	r0, #1
 800d458:	2180      	movs	r1, #128	; 0x80
 800d45a:	0209      	lsls	r1, r1, #8
 800d45c:	4101      	asrs	r1, r0
 800d45e:	5b5a      	ldrh	r2, [r3, r5]
 800d460:	438a      	bics	r2, r1
 800d462:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d464:	2308      	movs	r3, #8
 800d466:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d468:	2300      	movs	r3, #0
 800d46a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d46c:	0020      	movs	r0, r4
 800d46e:	f005 f8e7 	bl	8012640 <HAL_UART_Init>
}
 800d472:	e7d2      	b.n	800d41a <SwapUartPins+0xe>
 800d474:	2000101c 	.word	0x2000101c
 800d478:	20006ca0 	.word	0x20006ca0

0800d47c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d47c:	4816      	ldr	r0, [pc, #88]	; (800d4d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d47e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d480:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d482:	e003      	b.n	800d48c <LoopCopyDataInit>

0800d484 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d484:	4b15      	ldr	r3, [pc, #84]	; (800d4dc <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d486:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d488:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d48a:	3104      	adds	r1, #4

0800d48c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d48c:	4814      	ldr	r0, [pc, #80]	; (800d4e0 <LoopForever+0xc>)
  ldr r3, =_edata
 800d48e:	4b15      	ldr	r3, [pc, #84]	; (800d4e4 <LoopForever+0x10>)
  adds r2, r0, r1
 800d490:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d492:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d494:	d3f6      	bcc.n	800d484 <CopyDataInit>
  ldr r2, =_sbss
 800d496:	4a14      	ldr	r2, [pc, #80]	; (800d4e8 <LoopForever+0x14>)
  b LoopFillZerobss
 800d498:	e002      	b.n	800d4a0 <LoopFillZerobss>

0800d49a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d49a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d49c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d49e:	3204      	adds	r2, #4

0800d4a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d4a0:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <LoopForever+0x18>)
  cmp r2, r3
 800d4a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d4a4:	d3f9      	bcc.n	800d49a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d4a6:	4812      	ldr	r0, [pc, #72]	; (800d4f0 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d4a8:	4912      	ldr	r1, [pc, #72]	; (800d4f4 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d4aa:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d4ac:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d4ae:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d4b0:	d005      	beq.n	800d4be <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d4b2:	f000 f82b 	bl	800d50c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d4b6:	f005 fa37 	bl	8012928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d4ba:	f005 fa16 	bl	80128ea <main>

0800d4be <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d4be:	480e      	ldr	r0, [pc, #56]	; (800d4f8 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d4c0:	490e      	ldr	r1, [pc, #56]	; (800d4fc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d4c2:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d4c4:	480e      	ldr	r0, [pc, #56]	; (800d500 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d4c6:	490d      	ldr	r1, [pc, #52]	; (800d4fc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d4c8:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d4ca:	480e      	ldr	r0, [pc, #56]	; (800d504 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d4cc:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d4ce:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d4d0:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d4d2:	4700      	bx	r0

0800d4d4 <LoopForever>:


LoopForever:
    b LoopForever
 800d4d4:	e7fe      	b.n	800d4d4 <LoopForever>
 800d4d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d4d8:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d4dc:	0801a830 	.word	0x0801a830
  ldr r0, =_sdata
 800d4e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d4e4:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800d4e8:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800d4ec:	20006d48 	.word	0x20006d48
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d4f0:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d4f4:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d4f8:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d4fc:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d500:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d504:	1fffd800 	.word	0x1fffd800

0800d508 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d508:	e7fe      	b.n	800d508 <ADC1_COMP_IRQHandler>
	...

0800d50c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d50c:	4b11      	ldr	r3, [pc, #68]	; (800d554 <SystemInit+0x48>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	2101      	movs	r1, #1
 800d512:	430a      	orrs	r2, r1
 800d514:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	480f      	ldr	r0, [pc, #60]	; (800d558 <SystemInit+0x4c>)
 800d51a:	4002      	ands	r2, r0
 800d51c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	480e      	ldr	r0, [pc, #56]	; (800d55c <SystemInit+0x50>)
 800d522:	4002      	ands	r2, r0
 800d524:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	480d      	ldr	r0, [pc, #52]	; (800d560 <SystemInit+0x54>)
 800d52a:	4002      	ands	r2, r0
 800d52c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	480c      	ldr	r0, [pc, #48]	; (800d564 <SystemInit+0x58>)
 800d532:	4002      	ands	r2, r0
 800d534:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d538:	200f      	movs	r0, #15
 800d53a:	4382      	bics	r2, r0
 800d53c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d540:	4809      	ldr	r0, [pc, #36]	; (800d568 <SystemInit+0x5c>)
 800d542:	4002      	ands	r2, r0
 800d544:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d548:	438a      	bics	r2, r1
 800d54a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d54c:	2200      	movs	r2, #0
 800d54e:	609a      	str	r2, [r3, #8]

}
 800d550:	4770      	bx	lr
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	40021000 	.word	0x40021000
 800d558:	08ffb80c 	.word	0x08ffb80c
 800d55c:	fef6ffff 	.word	0xfef6ffff
 800d560:	fffbffff 	.word	0xfffbffff
 800d564:	ffc0ffff 	.word	0xffc0ffff
 800d568:	fff0feac 	.word	0xfff0feac

0800d56c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d56c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d56e:	f000 ff55 	bl	800e41c <vTaskStartScheduler>
  
  return osOK;
}
 800d572:	2000      	movs	r0, #0
 800d574:	bd10      	pop	{r4, pc}

0800d576 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d576:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d578:	2800      	cmp	r0, #0
 800d57a:	d100      	bne.n	800d57e <osDelay+0x8>
 800d57c:	3001      	adds	r0, #1
 800d57e:	f001 f889 	bl	800e694 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d582:	2000      	movs	r0, #0
 800d584:	bd10      	pop	{r4, pc}

0800d586 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d586:	b510      	push	{r4, lr}
 800d588:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d58a:	2901      	cmp	r1, #1
 800d58c:	d005      	beq.n	800d59a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d58e:	2100      	movs	r1, #0
 800d590:	f000 faf6 	bl	800db80 <xQueueCreateCountingSemaphore>
 800d594:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d596:	0020      	movs	r0, r4
 800d598:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d59a:	2203      	movs	r2, #3
 800d59c:	2100      	movs	r1, #0
 800d59e:	f000 fac8 	bl	800db32 <xQueueGenericCreate>
 800d5a2:	1e04      	subs	r4, r0, #0
 800d5a4:	d0f7      	beq.n	800d596 <osSemaphoreCreate+0x10>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	f000 fafc 	bl	800dba8 <xQueueGenericSend>
 800d5b0:	e7f1      	b.n	800d596 <osSemaphoreCreate+0x10>
	...

0800d5b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d5b4:	b500      	push	{lr}
 800d5b6:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d021      	beq.n	800d604 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5c0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d010      	beq.n	800d5ea <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5c8:	aa01      	add	r2, sp, #4
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	f000 fcae 	bl	800df2c <xQueueReceiveFromISR>
 800d5d0:	0003      	movs	r3, r0
      return osErrorOS;
 800d5d2:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d113      	bne.n	800d600 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d5d8:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00f      	beq.n	800d600 <osSemaphoreWait+0x4c>
 800d5e0:	4b09      	ldr	r3, [pc, #36]	; (800d608 <osSemaphoreWait+0x54>)
 800d5e2:	2280      	movs	r2, #128	; 0x80
 800d5e4:	0552      	lsls	r2, r2, #21
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	e00a      	b.n	800d600 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	000a      	movs	r2, r1
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	f000 fbf3 	bl	800ddda <xQueueGenericReceive>
  return osOK;
 800d5f4:	3801      	subs	r0, #1
 800d5f6:	1e43      	subs	r3, r0, #1
 800d5f8:	4198      	sbcs	r0, r3
 800d5fa:	4240      	negs	r0, r0
 800d5fc:	23ff      	movs	r3, #255	; 0xff
 800d5fe:	4018      	ands	r0, r3
}
 800d600:	b003      	add	sp, #12
 800d602:	bd00      	pop	{pc}
    return osErrorParameter;
 800d604:	2080      	movs	r0, #128	; 0x80
 800d606:	e7fb      	b.n	800d600 <osSemaphoreWait+0x4c>
 800d608:	e000ed04 	.word	0xe000ed04

0800d60c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d60c:	b500      	push	{lr}
 800d60e:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d610:	2300      	movs	r3, #0
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00f      	beq.n	800d63c <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d61c:	a901      	add	r1, sp, #4
 800d61e:	f000 fba1 	bl	800dd64 <xQueueGiveFromISR>
 800d622:	0003      	movs	r3, r0
      return osErrorOS;
 800d624:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d626:	2b01      	cmp	r3, #1
 800d628:	d114      	bne.n	800d654 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800d62a:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d010      	beq.n	800d654 <osSemaphoreRelease+0x48>
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <osSemaphoreRelease+0x4c>)
 800d634:	2280      	movs	r2, #128	; 0x80
 800d636:	0552      	lsls	r2, r2, #21
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	e00b      	b.n	800d654 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d63c:	2300      	movs	r3, #0
 800d63e:	2200      	movs	r2, #0
 800d640:	2100      	movs	r1, #0
 800d642:	f000 fab1 	bl	800dba8 <xQueueGenericSend>
      result = osErrorOS;
 800d646:	3801      	subs	r0, #1
 800d648:	4243      	negs	r3, r0
 800d64a:	4158      	adcs	r0, r3
 800d64c:	4240      	negs	r0, r0
 800d64e:	23fe      	movs	r3, #254	; 0xfe
 800d650:	4398      	bics	r0, r3
 800d652:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800d654:	b003      	add	sp, #12
 800d656:	bd00      	pop	{pc}
 800d658:	e000ed04 	.word	0xe000ed04

0800d65c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d65c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d65e:	f001 fa0f 	bl	800ea80 <xTaskGetSchedulerState>
 800d662:	2801      	cmp	r0, #1
 800d664:	d001      	beq.n	800d66a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d666:	f001 fe91 	bl	800f38c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d66a:	bd10      	pop	{r4, pc}

0800d66c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d670:	d101      	bne.n	800d676 <FreeRTOS_CLIRegisterCommand+0xa>
 800d672:	b672      	cpsid	i
 800d674:	e7fe      	b.n	800d674 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d676:	2008      	movs	r0, #8
 800d678:	f001 fec4 	bl	800f404 <pvPortMalloc>
 800d67c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d67e:	d101      	bne.n	800d684 <FreeRTOS_CLIRegisterCommand+0x18>
 800d680:	b672      	cpsid	i
 800d682:	e7fe      	b.n	800d682 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d684:	f001 fe3c 	bl	800f300 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d688:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d68e:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <FreeRTOS_CLIRegisterCommand+0x34>)
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d694:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d696:	f001 fe3f 	bl	800f318 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d69a:	2001      	movs	r0, #1
 800d69c:	bd70      	pop	{r4, r5, r6, pc}
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	20000098 	.word	0x20000098

0800d6a4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a6:	46d6      	mov	lr, sl
 800d6a8:	b500      	push	{lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	9001      	str	r0, [sp, #4]
 800d6ae:	9102      	str	r1, [sp, #8]
 800d6b0:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d6b2:	4b37      	ldr	r3, [pc, #220]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	9a01      	ldr	r2, [sp, #4]
 800d6c0:	9903      	ldr	r1, [sp, #12]
 800d6c2:	9802      	ldr	r0, [sp, #8]
 800d6c4:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d102      	bne.n	800d6d0 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d6ca:	4b31      	ldr	r3, [pc, #196]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d6d0:	b004      	add	sp, #16
 800d6d2:	bc04      	pop	{r2}
 800d6d4:	4692      	mov	sl, r2
 800d6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d6d8:	4d2e      	ldr	r5, [pc, #184]	; (800d794 <FreeRTOS_CLIProcessCommand+0xf0>)
 800d6da:	4a2d      	ldr	r2, [pc, #180]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d6dc:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d6de:	3320      	adds	r3, #32
 800d6e0:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d6e2:	0017      	movs	r7, r2
 800d6e4:	e00a      	b.n	800d6fc <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d6e6:	0002      	movs	r2, r0
 800d6e8:	0021      	movs	r1, r4
 800d6ea:	9801      	ldr	r0, [sp, #4]
 800d6ec:	f005 fde6 	bl	80132bc <strncmp>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d00e      	beq.n	800d712 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d6f4:	686d      	ldr	r5, [r5, #4]
 800d6f6:	603d      	str	r5, [r7, #0]
 800d6f8:	2d00      	cmp	r5, #0
 800d6fa:	d012      	beq.n	800d722 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d6fc:	682e      	ldr	r6, [r5, #0]
 800d6fe:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d700:	0020      	movs	r0, r4
 800d702:	f7f2 fd09 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d706:	9b01      	ldr	r3, [sp, #4]
 800d708:	5c1b      	ldrb	r3, [r3, r0]
 800d70a:	4652      	mov	r2, sl
 800d70c:	4393      	bics	r3, r2
 800d70e:	d1f1      	bne.n	800d6f4 <FreeRTOS_CLIProcessCommand+0x50>
 800d710:	e7e9      	b.n	800d6e6 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d712:	200c      	movs	r0, #12
 800d714:	5630      	ldrsb	r0, [r6, r0]
 800d716:	2800      	cmp	r0, #0
 800d718:	da0a      	bge.n	800d730 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d71a:	4b1d      	ldr	r3, [pc, #116]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1cb      	bne.n	800d6ba <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d722:	9a03      	ldr	r2, [sp, #12]
 800d724:	491c      	ldr	r1, [pc, #112]	; (800d798 <FreeRTOS_CLIProcessCommand+0xf4>)
 800d726:	9802      	ldr	r0, [sp, #8]
 800d728:	f005 fdd9 	bl	80132de <strncpy>
		xReturn = pdFALSE;
 800d72c:	2000      	movs	r0, #0
	return xReturn;
 800d72e:	e7cf      	b.n	800d6d0 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d730:	9a01      	ldr	r2, [sp, #4]
 800d732:	2300      	movs	r3, #0
 800d734:	56d3      	ldrsb	r3, [r2, r3]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d027      	beq.n	800d78a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800d73a:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800d73c:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d73e:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800d740:	2501      	movs	r5, #1
 800d742:	e009      	b.n	800d758 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800d744:	2901      	cmp	r1, #1
 800d746:	d002      	beq.n	800d74e <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800d748:	3401      	adds	r4, #1
 800d74a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d74c:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800d74e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800d750:	2300      	movs	r3, #0
 800d752:	56d3      	ldrsb	r3, [r2, r3]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800d758:	2b20      	cmp	r3, #32
 800d75a:	d0f3      	beq.n	800d744 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800d75c:	0031      	movs	r1, r6
 800d75e:	e7f6      	b.n	800d74e <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d760:	2901      	cmp	r1, #1
 800d762:	d00f      	beq.n	800d784 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d764:	4b0a      	ldr	r3, [pc, #40]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d0da      	beq.n	800d722 <FreeRTOS_CLIProcessCommand+0x7e>
 800d76c:	42a0      	cmp	r0, r4
 800d76e:	d0a4      	beq.n	800d6ba <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d770:	9a03      	ldr	r2, [sp, #12]
 800d772:	490a      	ldr	r1, [pc, #40]	; (800d79c <FreeRTOS_CLIProcessCommand+0xf8>)
 800d774:	9802      	ldr	r0, [sp, #8]
 800d776:	f005 fdb2 	bl	80132de <strncpy>
		pxCommand = NULL;
 800d77a:	4b05      	ldr	r3, [pc, #20]	; (800d790 <FreeRTOS_CLIProcessCommand+0xec>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	2000      	movs	r0, #0
 800d782:	e7a5      	b.n	800d6d0 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d784:	3c01      	subs	r4, #1
 800d786:	b264      	sxtb	r4, r4
 800d788:	e7ec      	b.n	800d764 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800d78a:	2400      	movs	r4, #0
 800d78c:	e7ea      	b.n	800d764 <FreeRTOS_CLIProcessCommand+0xc0>
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	20001c24 	.word	0x20001c24
 800d794:	2000009c 	.word	0x2000009c
 800d798:	0801a3e4 	.word	0x0801a3e4
 800d79c:	0801a38c 	.word	0x0801a38c

0800d7a0 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d7a0:	4800      	ldr	r0, [pc, #0]	; (800d7a4 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d7a2:	4770      	bx	lr
 800d7a4:	200019bc 	.word	0x200019bc

0800d7a8 <FreeRTOS_CLIGetParameter>:
{
 800d7a8:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d7ae:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d7b0:	2900      	cmp	r1, #0
 800d7b2:	d10b      	bne.n	800d7cc <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e02a      	b.n	800d80e <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800d7b8:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	56c3      	ldrsb	r3, [r0, r3]
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d0fa      	beq.n	800d7b8 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d022      	beq.n	800d80c <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800d7c6:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d7c8:	42a1      	cmp	r1, r4
 800d7ca:	d00d      	beq.n	800d7e8 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	56c3      	ldrsb	r3, [r0, r3]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d01f      	beq.n	800d814 <FreeRTOS_CLIGetParameter+0x6c>
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	d0ef      	beq.n	800d7b8 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800d7d8:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7da:	2300      	movs	r3, #0
 800d7dc:	56c3      	ldrsb	r3, [r0, r3]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d018      	beq.n	800d814 <FreeRTOS_CLIGetParameter+0x6c>
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d1f8      	bne.n	800d7d8 <FreeRTOS_CLIGetParameter+0x30>
 800d7e6:	e7e7      	b.n	800d7b8 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7e8:	7803      	ldrb	r3, [r0, #0]
 800d7ea:	2120      	movs	r1, #32
 800d7ec:	438b      	bics	r3, r1
 800d7ee:	d00f      	beq.n	800d810 <FreeRTOS_CLIGetParameter+0x68>
 800d7f0:	0004      	movs	r4, r0
 800d7f2:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800d7f4:	6813      	ldr	r3, [r2, #0]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800d7fa:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7fc:	7821      	ldrb	r1, [r4, #0]
 800d7fe:	43a9      	bics	r1, r5
 800d800:	d1f8      	bne.n	800d7f4 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800d802:	1e5a      	subs	r2, r3, #1
 800d804:	4193      	sbcs	r3, r2
 800d806:	425b      	negs	r3, r3
 800d808:	4018      	ands	r0, r3
 800d80a:	e000      	b.n	800d80e <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800d80c:	2000      	movs	r0, #0
}
 800d80e:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800d810:	2000      	movs	r0, #0
 800d812:	e7fc      	b.n	800d80e <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d814:	2300      	movs	r3, #0
 800d816:	56c3      	ldrsb	r3, [r0, r3]
 800d818:	e7d3      	b.n	800d7c2 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800d81c <prvHelpCommand>:
{
 800d81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81e:	b083      	sub	sp, #12
 800d820:	0004      	movs	r4, r0
 800d822:	000d      	movs	r5, r1
 800d824:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d82a:	aa01      	add	r2, sp, #4
 800d82c:	2101      	movs	r1, #1
 800d82e:	f7ff ffbb 	bl	800d7a8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d832:	2800      	cmp	r0, #0
 800d834:	d027      	beq.n	800d886 <prvHelpCommand+0x6a>
 800d836:	2206      	movs	r2, #6
 800d838:	4930      	ldr	r1, [pc, #192]	; (800d8fc <prvHelpCommand+0xe0>)
 800d83a:	f005 fd3f 	bl	80132bc <strncmp>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d149      	bne.n	800d8d6 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800d842:	4b2f      	ldr	r3, [pc, #188]	; (800d900 <prvHelpCommand+0xe4>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b07      	cmp	r3, #7
 800d848:	d012      	beq.n	800d870 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d84a:	1c5f      	adds	r7, r3, #1
 800d84c:	b2ff      	uxtb	r7, r7
 800d84e:	4a2c      	ldr	r2, [pc, #176]	; (800d900 <prvHelpCommand+0xe4>)
 800d850:	7017      	strb	r7, [r2, #0]
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4a2b      	ldr	r2, [pc, #172]	; (800d904 <prvHelpCommand+0xe8>)
 800d856:	5899      	ldr	r1, [r3, r2]
 800d858:	002a      	movs	r2, r5
 800d85a:	0020      	movs	r0, r4
 800d85c:	f005 fd3f 	bl	80132de <strncpy>
			xReturn = pdTRUE;
 800d860:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d862:	2f07      	cmp	r7, #7
 800d864:	d137      	bne.n	800d8d6 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800d866:	4b26      	ldr	r3, [pc, #152]	; (800d900 <prvHelpCommand+0xe4>)
 800d868:	2200      	movs	r2, #0
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	2600      	movs	r6, #0
 800d86e:	e032      	b.n	800d8d6 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d870:	4b23      	ldr	r3, [pc, #140]	; (800d900 <prvHelpCommand+0xe4>)
 800d872:	2201      	movs	r2, #1
 800d874:	701a      	strb	r2, [r3, #0]
 800d876:	4b23      	ldr	r3, [pc, #140]	; (800d904 <prvHelpCommand+0xe8>)
 800d878:	6819      	ldr	r1, [r3, #0]
 800d87a:	002a      	movs	r2, r5
 800d87c:	0020      	movs	r0, r4
 800d87e:	f005 fd2e 	bl	80132de <strncpy>
			xReturn = pdTRUE;
 800d882:	2601      	movs	r6, #1
 800d884:	e027      	b.n	800d8d6 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800d886:	4b20      	ldr	r3, [pc, #128]	; (800d908 <prvHelpCommand+0xec>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d026      	beq.n	800d8dc <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800d88e:	4b1f      	ldr	r3, [pc, #124]	; (800d90c <prvHelpCommand+0xf0>)
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	4b1f      	ldr	r3, [pc, #124]	; (800d910 <prvHelpCommand+0xf4>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	429a      	cmp	r2, r3
 800d898:	d927      	bls.n	800d8ea <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d89a:	002a      	movs	r2, r5
 800d89c:	3a08      	subs	r2, #8
 800d89e:	4b1a      	ldr	r3, [pc, #104]	; (800d908 <prvHelpCommand+0xec>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6859      	ldr	r1, [r3, #4]
 800d8a6:	0020      	movs	r0, r4
 800d8a8:	3008      	adds	r0, #8
 800d8aa:	f005 fd18 	bl	80132de <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d8ae:	1c60      	adds	r0, r4, #1
 800d8b0:	4918      	ldr	r1, [pc, #96]	; (800d914 <prvHelpCommand+0xf8>)
 800d8b2:	f005 fcfb 	bl	80132ac <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d8b6:	2328      	movs	r3, #40	; 0x28
 800d8b8:	7023      	strb	r3, [r4, #0]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	71a3      	strb	r3, [r4, #6]
 800d8be:	3b09      	subs	r3, #9
 800d8c0:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800d8c2:	4b11      	ldr	r3, [pc, #68]	; (800d908 <prvHelpCommand+0xec>)
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	6856      	ldr	r6, [r2, #4]
 800d8c8:	601e      	str	r6, [r3, #0]
		counter++;
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <prvHelpCommand+0xf0>)
 800d8cc:	7813      	ldrb	r3, [r2, #0]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800d8d2:	1e73      	subs	r3, r6, #1
 800d8d4:	419e      	sbcs	r6, r3
}
 800d8d6:	0030      	movs	r0, r6
 800d8d8:	b003      	add	sp, #12
 800d8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <prvHelpCommand+0xec>)
 800d8de:	4a0e      	ldr	r2, [pc, #56]	; (800d918 <prvHelpCommand+0xfc>)
 800d8e0:	601a      	str	r2, [r3, #0]
			counter = 1;
 800d8e2:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <prvHelpCommand+0xf0>)
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	701a      	strb	r2, [r3, #0]
 800d8e8:	e7d1      	b.n	800d88e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d8ea:	4b07      	ldr	r3, [pc, #28]	; (800d908 <prvHelpCommand+0xec>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6859      	ldr	r1, [r3, #4]
 800d8f2:	002a      	movs	r2, r5
 800d8f4:	0020      	movs	r0, r4
 800d8f6:	f005 fcf2 	bl	80132de <strncpy>
 800d8fa:	e7e2      	b.n	800d8c2 <prvHelpCommand+0xa6>
 800d8fc:	08018398 	.word	0x08018398
 800d900:	20001c2c 	.word	0x20001c2c
 800d904:	20000054 	.word	0x20000054
 800d908:	20001c28 	.word	0x20001c28
 800d90c:	20001c20 	.word	0x20001c20
 800d910:	2000681c 	.word	0x2000681c
 800d914:	08017a8a 	.word	0x08017a8a
 800d918:	2000009c 	.word	0x2000009c

0800d91c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d91c:	0003      	movs	r3, r0
 800d91e:	3308      	adds	r3, #8
 800d920:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d922:	2201      	movs	r2, #1
 800d924:	4252      	negs	r2, r2
 800d926:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d928:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d92a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d930:	4770      	bx	lr

0800d932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d932:	2300      	movs	r3, #0
 800d934:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d936:	4770      	bx	lr

0800d938 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d938:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d93a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d93c:	689a      	ldr	r2, [r3, #8]
 800d93e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d940:	689a      	ldr	r2, [r3, #8]
 800d942:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d944:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d946:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d948:	6803      	ldr	r3, [r0, #0]
 800d94a:	3301      	adds	r3, #1
 800d94c:	6003      	str	r3, [r0, #0]
}
 800d94e:	4770      	bx	lr

0800d950 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d950:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d952:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d954:	0002      	movs	r2, r0
 800d956:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d958:	1c63      	adds	r3, r4, #1
 800d95a:	d102      	bne.n	800d962 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800d95c:	6902      	ldr	r2, [r0, #16]
 800d95e:	e004      	b.n	800d96a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d960:	001a      	movs	r2, r3
 800d962:	6853      	ldr	r3, [r2, #4]
 800d964:	681d      	ldr	r5, [r3, #0]
 800d966:	42a5      	cmp	r5, r4
 800d968:	d9fa      	bls.n	800d960 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d96a:	6853      	ldr	r3, [r2, #4]
 800d96c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d96e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d970:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d972:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d974:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d976:	6803      	ldr	r3, [r0, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	6003      	str	r3, [r0, #0]
}
 800d97c:	bd30      	pop	{r4, r5, pc}

0800d97e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d97e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d980:	6842      	ldr	r2, [r0, #4]
 800d982:	6881      	ldr	r1, [r0, #8]
 800d984:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d986:	6882      	ldr	r2, [r0, #8]
 800d988:	6841      	ldr	r1, [r0, #4]
 800d98a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	4282      	cmp	r2, r0
 800d990:	d005      	beq.n	800d99e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d992:	2200      	movs	r2, #0
 800d994:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	1e50      	subs	r0, r2, #1
 800d99a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d99c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d99e:	6882      	ldr	r2, [r0, #8]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	e7f6      	b.n	800d992 <uxListRemove+0x14>

0800d9a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	0004      	movs	r4, r0
 800d9a8:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	d10d      	bne.n	800d9cc <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800d9b0:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d9b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d9c0:	6860      	ldr	r0, [r4, #4]
 800d9c2:	f001 f8ab 	bl	800eb1c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	6063      	str	r3, [r4, #4]
 800d9ca:	e7f5      	b.n	800d9b8 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	d10e      	bne.n	800d9ee <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d9d0:	6880      	ldr	r0, [r0, #8]
 800d9d2:	f005 fa2c 	bl	8012e2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d9d6:	68a3      	ldr	r3, [r4, #8]
 800d9d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d9da:	4694      	mov	ip, r2
 800d9dc:	4463      	add	r3, ip
 800d9de:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800d9e0:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9e2:	6862      	ldr	r2, [r4, #4]
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d3e7      	bcc.n	800d9b8 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	60a3      	str	r3, [r4, #8]
 800d9ec:	e7e4      	b.n	800d9b8 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ee:	68c0      	ldr	r0, [r0, #12]
 800d9f0:	f005 fa1d 	bl	8012e2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d9f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9f6:	425a      	negs	r2, r3
 800d9f8:	68e3      	ldr	r3, [r4, #12]
 800d9fa:	189b      	adds	r3, r3, r2
 800d9fc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9fe:	6821      	ldr	r1, [r4, #0]
 800da00:	428b      	cmp	r3, r1
 800da02:	d203      	bcs.n	800da0c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800da04:	6863      	ldr	r3, [r4, #4]
 800da06:	469c      	mov	ip, r3
 800da08:	4462      	add	r2, ip
 800da0a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800da0c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800da0e:	2d02      	cmp	r5, #2
 800da10:	d1d2      	bne.n	800d9b8 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da14:	2b00      	cmp	r3, #0
 800da16:	d0cf      	beq.n	800d9b8 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800da18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da1a:	3b01      	subs	r3, #1
 800da1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800da1e:	e7cb      	b.n	800d9b8 <prvCopyDataToQueue+0x14>

0800da20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da20:	b510      	push	{r4, lr}
 800da22:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800da26:	2a00      	cmp	r2, #0
 800da28:	d00b      	beq.n	800da42 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800da2a:	68c3      	ldr	r3, [r0, #12]
 800da2c:	189b      	adds	r3, r3, r2
 800da2e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da30:	6841      	ldr	r1, [r0, #4]
 800da32:	428b      	cmp	r3, r1
 800da34:	d301      	bcc.n	800da3a <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800da36:	6803      	ldr	r3, [r0, #0]
 800da38:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800da3a:	68c1      	ldr	r1, [r0, #12]
 800da3c:	0020      	movs	r0, r4
 800da3e:	f005 f9f6 	bl	8012e2e <memcpy>
	}
}
 800da42:	bd10      	pop	{r4, pc}

0800da44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da48:	f001 fc5a 	bl	800f300 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da4e:	2b00      	cmp	r3, #0
 800da50:	dd04      	ble.n	800da5c <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da52:	0025      	movs	r5, r4
 800da54:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d11f      	bne.n	800da9c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800da5c:	2301      	movs	r3, #1
 800da5e:	425b      	negs	r3, r3
 800da60:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800da62:	f001 fc59 	bl	800f318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da66:	f001 fc4b 	bl	800f300 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800da6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	dd04      	ble.n	800da7a <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da70:	0025      	movs	r5, r4
 800da72:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da74:	6923      	ldr	r3, [r4, #16]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d121      	bne.n	800dabe <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800da7a:	2301      	movs	r3, #1
 800da7c:	425b      	negs	r3, r3
 800da7e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da80:	f001 fc4a 	bl	800f318 <vPortExitCritical>
}
 800da84:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800da86:	f000 fff5 	bl	800ea74 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800da8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da8c:	3b01      	subs	r3, #1
 800da8e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da92:	2b00      	cmp	r3, #0
 800da94:	dde2      	ble.n	800da5c <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d0df      	beq.n	800da5c <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da9c:	0028      	movs	r0, r5
 800da9e:	f000 ff67 	bl	800e970 <xTaskRemoveFromEventList>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d0f1      	beq.n	800da8a <prvUnlockQueue+0x46>
 800daa6:	e7ee      	b.n	800da86 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800daa8:	f000 ffe4 	bl	800ea74 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800daac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800daae:	3b01      	subs	r3, #1
 800dab0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800dab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dde0      	ble.n	800da7a <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d0dd      	beq.n	800da7a <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dabe:	0028      	movs	r0, r5
 800dac0:	f000 ff56 	bl	800e970 <xTaskRemoveFromEventList>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0f1      	beq.n	800daac <prvUnlockQueue+0x68>
 800dac8:	e7ee      	b.n	800daa8 <prvUnlockQueue+0x64>

0800daca <xQueueGenericReset>:
{
 800daca:	b570      	push	{r4, r5, r6, lr}
 800dacc:	0004      	movs	r4, r0
 800dace:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d101      	bne.n	800dad8 <xQueueGenericReset+0xe>
 800dad4:	b672      	cpsid	i
 800dad6:	e7fe      	b.n	800dad6 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800dad8:	f001 fc12 	bl	800f300 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dadc:	6822      	ldr	r2, [r4, #0]
 800dade:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dae2:	434b      	muls	r3, r1
 800dae4:	18d0      	adds	r0, r2, r3
 800dae6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dae8:	2000      	movs	r0, #0
 800daea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800daec:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800daee:	1a5b      	subs	r3, r3, r1
 800daf0:	18d3      	adds	r3, r2, r3
 800daf2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800daf4:	2301      	movs	r3, #1
 800daf6:	425b      	negs	r3, r3
 800daf8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dafa:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dafc:	2d00      	cmp	r5, #0
 800dafe:	d10f      	bne.n	800db20 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db00:	6923      	ldr	r3, [r4, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d103      	bne.n	800db0e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800db06:	f001 fc07 	bl	800f318 <vPortExitCritical>
}
 800db0a:	2001      	movs	r0, #1
 800db0c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800db0e:	0020      	movs	r0, r4
 800db10:	3010      	adds	r0, #16
 800db12:	f000 ff2d 	bl	800e970 <xTaskRemoveFromEventList>
 800db16:	2801      	cmp	r0, #1
 800db18:	d1f5      	bne.n	800db06 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800db1a:	f001 fbe5 	bl	800f2e8 <vPortYield>
 800db1e:	e7f2      	b.n	800db06 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db20:	0020      	movs	r0, r4
 800db22:	3010      	adds	r0, #16
 800db24:	f7ff fefa 	bl	800d91c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db28:	0020      	movs	r0, r4
 800db2a:	3024      	adds	r0, #36	; 0x24
 800db2c:	f7ff fef6 	bl	800d91c <vListInitialise>
 800db30:	e7e9      	b.n	800db06 <xQueueGenericReset+0x3c>

0800db32 <xQueueGenericCreate>:
{
 800db32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db34:	0005      	movs	r5, r0
 800db36:	000e      	movs	r6, r1
 800db38:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d101      	bne.n	800db42 <xQueueGenericCreate+0x10>
 800db3e:	b672      	cpsid	i
 800db40:	e7fe      	b.n	800db40 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db42:	2900      	cmp	r1, #0
 800db44:	d00c      	beq.n	800db60 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db46:	0008      	movs	r0, r1
 800db48:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db4a:	3055      	adds	r0, #85	; 0x55
 800db4c:	f001 fc5a 	bl	800f404 <pvPortMalloc>
 800db50:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db52:	d101      	bne.n	800db58 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800db54:	b672      	cpsid	i
 800db56:	e7fe      	b.n	800db56 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800db58:	0003      	movs	r3, r0
 800db5a:	3354      	adds	r3, #84	; 0x54
 800db5c:	6003      	str	r3, [r0, #0]
 800db5e:	e005      	b.n	800db6c <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db60:	2054      	movs	r0, #84	; 0x54
 800db62:	f001 fc4f 	bl	800f404 <pvPortMalloc>
 800db66:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db68:	d0f4      	beq.n	800db54 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db6a:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800db6c:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800db6e:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db70:	2101      	movs	r1, #1
 800db72:	0020      	movs	r0, r4
 800db74:	f7ff ffa9 	bl	800daca <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800db78:	2350      	movs	r3, #80	; 0x50
 800db7a:	54e7      	strb	r7, [r4, r3]
}
 800db7c:	0020      	movs	r0, r4
 800db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db80 <xQueueCreateCountingSemaphore>:
	{
 800db80:	b510      	push	{r4, lr}
 800db82:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800db84:	2800      	cmp	r0, #0
 800db86:	d101      	bne.n	800db8c <xQueueCreateCountingSemaphore+0xc>
 800db88:	b672      	cpsid	i
 800db8a:	e7fe      	b.n	800db8a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db8c:	4288      	cmp	r0, r1
 800db8e:	d201      	bcs.n	800db94 <xQueueCreateCountingSemaphore+0x14>
 800db90:	b672      	cpsid	i
 800db92:	e7fe      	b.n	800db92 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db94:	2202      	movs	r2, #2
 800db96:	2100      	movs	r1, #0
 800db98:	f7ff ffcb 	bl	800db32 <xQueueGenericCreate>
		if( xHandle != NULL )
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d001      	beq.n	800dba4 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dba0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dba2:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dba4:	b672      	cpsid	i
 800dba6:	e7fe      	b.n	800dba6 <xQueueCreateCountingSemaphore+0x26>

0800dba8 <xQueueGenericSend>:
{
 800dba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbaa:	46ce      	mov	lr, r9
 800dbac:	b500      	push	{lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	0004      	movs	r4, r0
 800dbb2:	9100      	str	r1, [sp, #0]
 800dbb4:	9201      	str	r2, [sp, #4]
 800dbb6:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d007      	beq.n	800dbcc <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbbc:	9b00      	ldr	r3, [sp, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d106      	bne.n	800dbd0 <xQueueGenericSend+0x28>
 800dbc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <xQueueGenericSend+0x28>
 800dbc8:	b672      	cpsid	i
 800dbca:	e7fe      	b.n	800dbca <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800dbcc:	b672      	cpsid	i
 800dbce:	e7fe      	b.n	800dbce <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbd0:	2d02      	cmp	r5, #2
 800dbd2:	d104      	bne.n	800dbde <xQueueGenericSend+0x36>
 800dbd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d001      	beq.n	800dbde <xQueueGenericSend+0x36>
 800dbda:	b672      	cpsid	i
 800dbdc:	e7fe      	b.n	800dbdc <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbde:	f000 ff4f 	bl	800ea80 <xTaskGetSchedulerState>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d104      	bne.n	800dbf0 <xQueueGenericSend+0x48>
 800dbe6:	9b01      	ldr	r3, [sp, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d004      	beq.n	800dbf6 <xQueueGenericSend+0x4e>
 800dbec:	b672      	cpsid	i
 800dbee:	e7fe      	b.n	800dbee <xQueueGenericSend+0x46>
 800dbf0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dbf2:	2700      	movs	r7, #0
 800dbf4:	e02f      	b.n	800dc56 <xQueueGenericSend+0xae>
 800dbf6:	2600      	movs	r6, #0
 800dbf8:	e7fb      	b.n	800dbf2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbfa:	002a      	movs	r2, r5
 800dbfc:	9900      	ldr	r1, [sp, #0]
 800dbfe:	0020      	movs	r0, r4
 800dc00:	f7ff fed0 	bl	800d9a4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d104      	bne.n	800dc14 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d00a      	beq.n	800dc24 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800dc0e:	f001 fb6b 	bl	800f2e8 <vPortYield>
 800dc12:	e007      	b.n	800dc24 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dc14:	0020      	movs	r0, r4
 800dc16:	3024      	adds	r0, #36	; 0x24
 800dc18:	f000 feaa 	bl	800e970 <xTaskRemoveFromEventList>
 800dc1c:	2801      	cmp	r0, #1
 800dc1e:	d101      	bne.n	800dc24 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800dc20:	f001 fb62 	bl	800f2e8 <vPortYield>
				taskEXIT_CRITICAL();
 800dc24:	f001 fb78 	bl	800f318 <vPortExitCritical>
				return pdPASS;
 800dc28:	2001      	movs	r0, #1
}
 800dc2a:	b004      	add	sp, #16
 800dc2c:	bc04      	pop	{r2}
 800dc2e:	4691      	mov	r9, r2
 800dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800dc32:	f001 fb71 	bl	800f318 <vPortExitCritical>
					return errQUEUE_FULL;
 800dc36:	2000      	movs	r0, #0
 800dc38:	e7f7      	b.n	800dc2a <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800dc3a:	a802      	add	r0, sp, #8
 800dc3c:	f000 fed8 	bl	800e9f0 <vTaskSetTimeOutState>
 800dc40:	e016      	b.n	800dc70 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800dc42:	6467      	str	r7, [r4, #68]	; 0x44
 800dc44:	e01d      	b.n	800dc82 <xQueueGenericSend+0xda>
 800dc46:	64a7      	str	r7, [r4, #72]	; 0x48
 800dc48:	e01e      	b.n	800dc88 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800dc4a:	0020      	movs	r0, r4
 800dc4c:	f7ff fefa 	bl	800da44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc50:	f000 fcb0 	bl	800e5b4 <xTaskResumeAll>
 800dc54:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dc56:	f001 fb53 	bl	800f300 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d3cb      	bcc.n	800dbfa <xQueueGenericSend+0x52>
 800dc62:	2d02      	cmp	r5, #2
 800dc64:	d0c9      	beq.n	800dbfa <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0e2      	beq.n	800dc32 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dc6c:	2e00      	cmp	r6, #0
 800dc6e:	d0e4      	beq.n	800dc3a <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800dc70:	f001 fb52 	bl	800f318 <vPortExitCritical>
		vTaskSuspendAll();
 800dc74:	f000 fbfe 	bl	800e474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc78:	f001 fb42 	bl	800f300 <vPortEnterCritical>
 800dc7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc7e:	3301      	adds	r3, #1
 800dc80:	d0df      	beq.n	800dc42 <xQueueGenericSend+0x9a>
 800dc82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc84:	3301      	adds	r3, #1
 800dc86:	d0de      	beq.n	800dc46 <xQueueGenericSend+0x9e>
 800dc88:	f001 fb46 	bl	800f318 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc8c:	a901      	add	r1, sp, #4
 800dc8e:	a802      	add	r0, sp, #8
 800dc90:	f000 febe 	bl	800ea10 <xTaskCheckForTimeOut>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d117      	bne.n	800dcc8 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc98:	f001 fb32 	bl	800f300 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc9e:	4699      	mov	r9, r3
 800dca0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dca2:	f001 fb39 	bl	800f318 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dca6:	45b1      	cmp	r9, r6
 800dca8:	d1cf      	bne.n	800dc4a <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dcaa:	0020      	movs	r0, r4
 800dcac:	3010      	adds	r0, #16
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	f000 fe20 	bl	800e8f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcb4:	0020      	movs	r0, r4
 800dcb6:	f7ff fec5 	bl	800da44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcba:	f000 fc7b 	bl	800e5b4 <xTaskResumeAll>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d1c8      	bne.n	800dc54 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dcc2:	f001 fb11 	bl	800f2e8 <vPortYield>
 800dcc6:	e7c5      	b.n	800dc54 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800dcc8:	0020      	movs	r0, r4
 800dcca:	f7ff febb 	bl	800da44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcce:	f000 fc71 	bl	800e5b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	e7a9      	b.n	800dc2a <xQueueGenericSend+0x82>

0800dcd6 <xQueueGenericSendFromISR>:
{
 800dcd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	0004      	movs	r4, r0
 800dcdc:	000d      	movs	r5, r1
 800dcde:	0016      	movs	r6, r2
 800dce0:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d006      	beq.n	800dcf4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dce6:	2900      	cmp	r1, #0
 800dce8:	d106      	bne.n	800dcf8 <xQueueGenericSendFromISR+0x22>
 800dcea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <xQueueGenericSendFromISR+0x22>
 800dcf0:	b672      	cpsid	i
 800dcf2:	e7fe      	b.n	800dcf2 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800dcf4:	b672      	cpsid	i
 800dcf6:	e7fe      	b.n	800dcf6 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcf8:	2f02      	cmp	r7, #2
 800dcfa:	d12a      	bne.n	800dd52 <xQueueGenericSendFromISR+0x7c>
 800dcfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d011      	beq.n	800dd26 <xQueueGenericSendFromISR+0x50>
 800dd02:	b672      	cpsid	i
 800dd04:	e7fe      	b.n	800dd04 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800dd06:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d01b      	beq.n	800dd46 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd0e:	0020      	movs	r0, r4
 800dd10:	3024      	adds	r0, #36	; 0x24
 800dd12:	f000 fe2d 	bl	800e970 <xTaskRemoveFromEventList>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d015      	beq.n	800dd46 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd1a:	2e00      	cmp	r6, #0
 800dd1c:	d001      	beq.n	800dd22 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd1e:	6035      	str	r5, [r6, #0]
 800dd20:	e011      	b.n	800dd46 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800dd22:	2501      	movs	r5, #1
 800dd24:	e00f      	b.n	800dd46 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd26:	f001 fb07 	bl	800f338 <ulSetInterruptMaskFromISR>
 800dd2a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd2e:	003a      	movs	r2, r7
 800dd30:	0029      	movs	r1, r5
 800dd32:	0020      	movs	r0, r4
 800dd34:	f7ff fe36 	bl	800d9a4 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dd38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	d0e3      	beq.n	800dd06 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800dd3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd40:	3301      	adds	r3, #1
 800dd42:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dd44:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dd46:	9801      	ldr	r0, [sp, #4]
 800dd48:	f001 fafb 	bl	800f342 <vClearInterruptMaskFromISR>
}
 800dd4c:	0028      	movs	r0, r5
 800dd4e:	b003      	add	sp, #12
 800dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd52:	f001 faf1 	bl	800f338 <ulSetInterruptMaskFromISR>
 800dd56:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d3e6      	bcc.n	800dd2e <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800dd60:	2500      	movs	r5, #0
 800dd62:	e7f0      	b.n	800dd46 <xQueueGenericSendFromISR+0x70>

0800dd64 <xQueueGiveFromISR>:
{
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	0004      	movs	r4, r0
 800dd68:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d004      	beq.n	800dd78 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <xQueueGiveFromISR+0x18>
 800dd74:	b672      	cpsid	i
 800dd76:	e7fe      	b.n	800dd76 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800dd78:	b672      	cpsid	i
 800dd7a:	e7fe      	b.n	800dd7a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dd7c:	6803      	ldr	r3, [r0, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d01f      	beq.n	800ddc2 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd82:	f001 fad9 	bl	800f338 <ulSetInterruptMaskFromISR>
 800dd86:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800dd8a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d212      	bcs.n	800ddb8 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800dd92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd94:	3301      	adds	r3, #1
 800dd96:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dd98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	d116      	bne.n	800ddcc <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800dd9e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d008      	beq.n	800ddb8 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dda6:	0020      	movs	r0, r4
 800dda8:	3024      	adds	r0, #36	; 0x24
 800ddaa:	f000 fde1 	bl	800e970 <xTaskRemoveFromEventList>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d002      	beq.n	800ddb8 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800ddb2:	2f00      	cmp	r7, #0
 800ddb4:	d00f      	beq.n	800ddd6 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddb6:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ddb8:	0030      	movs	r0, r6
 800ddba:	f001 fac2 	bl	800f342 <vClearInterruptMaskFromISR>
}
 800ddbe:	0028      	movs	r0, r5
 800ddc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ddc2:	6843      	ldr	r3, [r0, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d0dc      	beq.n	800dd82 <xQueueGiveFromISR+0x1e>
 800ddc8:	b672      	cpsid	i
 800ddca:	e7fe      	b.n	800ddca <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800ddcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddce:	3301      	adds	r3, #1
 800ddd0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ddd2:	2501      	movs	r5, #1
 800ddd4:	e7f0      	b.n	800ddb8 <xQueueGiveFromISR+0x54>
 800ddd6:	2501      	movs	r5, #1
 800ddd8:	e7ee      	b.n	800ddb8 <xQueueGiveFromISR+0x54>

0800ddda <xQueueGenericReceive>:
{
 800ddda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dddc:	46c6      	mov	lr, r8
 800ddde:	b500      	push	{lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	0004      	movs	r4, r0
 800dde4:	000e      	movs	r6, r1
 800dde6:	9201      	str	r2, [sp, #4]
 800dde8:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d006      	beq.n	800ddfc <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	d106      	bne.n	800de00 <xQueueGenericReceive+0x26>
 800ddf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d003      	beq.n	800de00 <xQueueGenericReceive+0x26>
 800ddf8:	b672      	cpsid	i
 800ddfa:	e7fe      	b.n	800ddfa <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800ddfc:	b672      	cpsid	i
 800ddfe:	e7fe      	b.n	800ddfe <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de00:	f000 fe3e 	bl	800ea80 <xTaskGetSchedulerState>
 800de04:	2800      	cmp	r0, #0
 800de06:	d104      	bne.n	800de12 <xQueueGenericReceive+0x38>
 800de08:	9b01      	ldr	r3, [sp, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d004      	beq.n	800de18 <xQueueGenericReceive+0x3e>
 800de0e:	b672      	cpsid	i
 800de10:	e7fe      	b.n	800de10 <xQueueGenericReceive+0x36>
 800de12:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800de14:	2700      	movs	r7, #0
 800de16:	e04b      	b.n	800deb0 <xQueueGenericReceive+0xd6>
 800de18:	2500      	movs	r5, #0
 800de1a:	e7fb      	b.n	800de14 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800de1c:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de1e:	0031      	movs	r1, r6
 800de20:	0020      	movs	r0, r4
 800de22:	f7ff fdfd 	bl	800da20 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800de26:	4643      	mov	r3, r8
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d11a      	bne.n	800de62 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800de2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de2e:	3b01      	subs	r3, #1
 800de30:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d102      	bne.n	800de3e <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800de38:	f000 ff62 	bl	800ed00 <pvTaskIncrementMutexHeldCount>
 800de3c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800de44:	0020      	movs	r0, r4
 800de46:	3010      	adds	r0, #16
 800de48:	f000 fd92 	bl	800e970 <xTaskRemoveFromEventList>
 800de4c:	2801      	cmp	r0, #1
 800de4e:	d101      	bne.n	800de54 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800de50:	f001 fa4a 	bl	800f2e8 <vPortYield>
				taskEXIT_CRITICAL();
 800de54:	f001 fa60 	bl	800f318 <vPortExitCritical>
				return pdPASS;
 800de58:	2001      	movs	r0, #1
}
 800de5a:	b004      	add	sp, #16
 800de5c:	bc04      	pop	{r2}
 800de5e:	4690      	mov	r8, r2
 800de60:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800de62:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0f4      	beq.n	800de54 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de6a:	0020      	movs	r0, r4
 800de6c:	3024      	adds	r0, #36	; 0x24
 800de6e:	f000 fd7f 	bl	800e970 <xTaskRemoveFromEventList>
 800de72:	2800      	cmp	r0, #0
 800de74:	d0ee      	beq.n	800de54 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800de76:	f001 fa37 	bl	800f2e8 <vPortYield>
 800de7a:	e7eb      	b.n	800de54 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800de7c:	f001 fa4c 	bl	800f318 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800de80:	2000      	movs	r0, #0
 800de82:	e7ea      	b.n	800de5a <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800de84:	a802      	add	r0, sp, #8
 800de86:	f000 fdb3 	bl	800e9f0 <vTaskSetTimeOutState>
 800de8a:	e01b      	b.n	800dec4 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800de8c:	6467      	str	r7, [r4, #68]	; 0x44
 800de8e:	e022      	b.n	800ded6 <xQueueGenericReceive+0xfc>
 800de90:	64a7      	str	r7, [r4, #72]	; 0x48
 800de92:	e023      	b.n	800dedc <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800de94:	f001 fa34 	bl	800f300 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800de98:	6860      	ldr	r0, [r4, #4]
 800de9a:	f000 fe01 	bl	800eaa0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800de9e:	f001 fa3b 	bl	800f318 <vPortExitCritical>
 800dea2:	e02d      	b.n	800df00 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800dea4:	0020      	movs	r0, r4
 800dea6:	f7ff fdcd 	bl	800da44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deaa:	f000 fb83 	bl	800e5b4 <xTaskResumeAll>
 800deae:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800deb0:	f001 fa26 	bl	800f300 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1b0      	bne.n	800de1c <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0dd      	beq.n	800de7c <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800dec0:	2d00      	cmp	r5, #0
 800dec2:	d0df      	beq.n	800de84 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800dec4:	f001 fa28 	bl	800f318 <vPortExitCritical>
		vTaskSuspendAll();
 800dec8:	f000 fad4 	bl	800e474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800decc:	f001 fa18 	bl	800f300 <vPortEnterCritical>
 800ded0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ded2:	3301      	adds	r3, #1
 800ded4:	d0da      	beq.n	800de8c <xQueueGenericReceive+0xb2>
 800ded6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ded8:	3301      	adds	r3, #1
 800deda:	d0d9      	beq.n	800de90 <xQueueGenericReceive+0xb6>
 800dedc:	f001 fa1c 	bl	800f318 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dee0:	a901      	add	r1, sp, #4
 800dee2:	a802      	add	r0, sp, #8
 800dee4:	f000 fd94 	bl	800ea10 <xTaskCheckForTimeOut>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d118      	bne.n	800df1e <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800deec:	f001 fa08 	bl	800f300 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800def0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800def2:	f001 fa11 	bl	800f318 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800def6:	2d00      	cmp	r5, #0
 800def8:	d1d4      	bne.n	800dea4 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d0c9      	beq.n	800de94 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df00:	0020      	movs	r0, r4
 800df02:	3024      	adds	r0, #36	; 0x24
 800df04:	9901      	ldr	r1, [sp, #4]
 800df06:	f000 fcf5 	bl	800e8f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df0a:	0020      	movs	r0, r4
 800df0c:	f7ff fd9a 	bl	800da44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df10:	f000 fb50 	bl	800e5b4 <xTaskResumeAll>
 800df14:	2800      	cmp	r0, #0
 800df16:	d1ca      	bne.n	800deae <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800df18:	f001 f9e6 	bl	800f2e8 <vPortYield>
 800df1c:	e7c7      	b.n	800deae <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800df1e:	0020      	movs	r0, r4
 800df20:	f7ff fd90 	bl	800da44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df24:	f000 fb46 	bl	800e5b4 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800df28:	2000      	movs	r0, #0
 800df2a:	e796      	b.n	800de5a <xQueueGenericReceive+0x80>

0800df2c <xQueueReceiveFromISR>:
{
 800df2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df2e:	b083      	sub	sp, #12
 800df30:	0004      	movs	r4, r0
 800df32:	000f      	movs	r7, r1
 800df34:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800df36:	2800      	cmp	r0, #0
 800df38:	d006      	beq.n	800df48 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df3a:	2900      	cmp	r1, #0
 800df3c:	d106      	bne.n	800df4c <xQueueReceiveFromISR+0x20>
 800df3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df40:	2b00      	cmp	r3, #0
 800df42:	d003      	beq.n	800df4c <xQueueReceiveFromISR+0x20>
 800df44:	b672      	cpsid	i
 800df46:	e7fe      	b.n	800df46 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800df48:	b672      	cpsid	i
 800df4a:	e7fe      	b.n	800df4a <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df4c:	f001 f9f4 	bl	800f338 <ulSetInterruptMaskFromISR>
 800df50:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800df54:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df56:	2b00      	cmp	r3, #0
 800df58:	d01b      	beq.n	800df92 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df5a:	0039      	movs	r1, r7
 800df5c:	0020      	movs	r0, r4
 800df5e:	f7ff fd5f 	bl	800da20 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800df62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df64:	3b01      	subs	r3, #1
 800df66:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800df68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df6a:	3301      	adds	r3, #1
 800df6c:	d004      	beq.n	800df78 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800df6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df70:	3301      	adds	r3, #1
 800df72:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800df74:	2501      	movs	r5, #1
 800df76:	e00c      	b.n	800df92 <xQueueReceiveFromISR+0x66>
 800df78:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d008      	beq.n	800df92 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df80:	0020      	movs	r0, r4
 800df82:	3010      	adds	r0, #16
 800df84:	f000 fcf4 	bl	800e970 <xTaskRemoveFromEventList>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d002      	beq.n	800df92 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800df8c:	2e00      	cmp	r6, #0
 800df8e:	d006      	beq.n	800df9e <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df90:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df92:	9801      	ldr	r0, [sp, #4]
 800df94:	f001 f9d5 	bl	800f342 <vClearInterruptMaskFromISR>
}
 800df98:	0028      	movs	r0, r5
 800df9a:	b003      	add	sp, #12
 800df9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800df9e:	2501      	movs	r5, #1
 800dfa0:	e7f7      	b.n	800df92 <xQueueReceiveFromISR+0x66>
	...

0800dfa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfa4:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfa6:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <vQueueAddToRegistry+0x2c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d009      	beq.n	800dfc2 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfae:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfb0:	4c07      	ldr	r4, [pc, #28]	; (800dfd0 <vQueueAddToRegistry+0x2c>)
 800dfb2:	00da      	lsls	r2, r3, #3
 800dfb4:	58a2      	ldr	r2, [r4, r2]
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	d004      	beq.n	800dfc4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfba:	3301      	adds	r3, #1
 800dfbc:	2b08      	cmp	r3, #8
 800dfbe:	d1f8      	bne.n	800dfb2 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfc0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfc2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfc4:	4a02      	ldr	r2, [pc, #8]	; (800dfd0 <vQueueAddToRegistry+0x2c>)
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfca:	18d3      	adds	r3, r2, r3
 800dfcc:	6058      	str	r0, [r3, #4]
				break;
 800dfce:	e7f7      	b.n	800dfc0 <vQueueAddToRegistry+0x1c>
 800dfd0:	20006cd4 	.word	0x20006cd4

0800dfd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	0004      	movs	r4, r0
 800dfd8:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfda:	f001 f991 	bl	800f300 <vPortEnterCritical>
 800dfde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	d00b      	beq.n	800dffc <vQueueWaitForMessageRestricted+0x28>
 800dfe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	d00b      	beq.n	800e002 <vQueueWaitForMessageRestricted+0x2e>
 800dfea:	f001 f995 	bl	800f318 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dfee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d009      	beq.n	800e008 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dff4:	0020      	movs	r0, r4
 800dff6:	f7ff fd25 	bl	800da44 <prvUnlockQueue>
	}
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800dffc:	2300      	movs	r3, #0
 800dffe:	6463      	str	r3, [r4, #68]	; 0x44
 800e000:	e7f0      	b.n	800dfe4 <vQueueWaitForMessageRestricted+0x10>
 800e002:	2300      	movs	r3, #0
 800e004:	64a3      	str	r3, [r4, #72]	; 0x48
 800e006:	e7f0      	b.n	800dfea <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e008:	0020      	movs	r0, r4
 800e00a:	3024      	adds	r0, #36	; 0x24
 800e00c:	0029      	movs	r1, r5
 800e00e:	f000 fc95 	bl	800e93c <vTaskPlaceOnEventListRestricted>
 800e012:	e7ef      	b.n	800dff4 <vQueueWaitForMessageRestricted+0x20>

0800e014 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e016:	46d6      	mov	lr, sl
 800e018:	464f      	mov	r7, r9
 800e01a:	4646      	mov	r6, r8
 800e01c:	b5c0      	push	{r6, r7, lr}
 800e01e:	0006      	movs	r6, r0
 800e020:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e022:	6808      	ldr	r0, [r1, #0]
 800e024:	2800      	cmp	r0, #0
 800e026:	d044      	beq.n	800e0b2 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e028:	684b      	ldr	r3, [r1, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	604b      	str	r3, [r1, #4]
 800e02e:	2208      	movs	r2, #8
 800e030:	4690      	mov	r8, r2
 800e032:	4488      	add	r8, r1
 800e034:	4543      	cmp	r3, r8
 800e036:	d006      	beq.n	800e046 <prvListTaskWithinSingleList+0x32>
 800e038:	684b      	ldr	r3, [r1, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e03e:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e040:	2302      	movs	r3, #2
 800e042:	469a      	mov	sl, r3
 800e044:	e018      	b.n	800e078 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e046:	68cb      	ldr	r3, [r1, #12]
 800e048:	604b      	str	r3, [r1, #4]
 800e04a:	e7f5      	b.n	800e038 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e04c:	68cb      	ldr	r3, [r1, #12]
 800e04e:	604b      	str	r3, [r1, #4]
 800e050:	e017      	b.n	800e082 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e052:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e054:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e056:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e058:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e05a:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e05c:	783b      	ldrb	r3, [r7, #0]
 800e05e:	2ba5      	cmp	r3, #165	; 0xa5
 800e060:	d125      	bne.n	800e0ae <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e062:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e064:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e066:	5cfc      	ldrb	r4, [r7, r3]
 800e068:	2ca5      	cmp	r4, #165	; 0xa5
 800e06a:	d0fb      	beq.n	800e064 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e06c:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e06e:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e070:	3001      	adds	r0, #1
 800e072:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e074:	45a9      	cmp	r9, r5
 800e076:	d01c      	beq.n	800e0b2 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e078:	684b      	ldr	r3, [r1, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	604b      	str	r3, [r1, #4]
 800e07e:	4598      	cmp	r8, r3
 800e080:	d0e4      	beq.n	800e04c <prvListTaskWithinSingleList+0x38>
 800e082:	684b      	ldr	r3, [r1, #4]
 800e084:	68dd      	ldr	r5, [r3, #12]
 800e086:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e088:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e08a:	002b      	movs	r3, r5
 800e08c:	3334      	adds	r3, #52	; 0x34
 800e08e:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e090:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e092:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e094:	4663      	mov	r3, ip
 800e096:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e098:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e09a:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e09c:	4663      	mov	r3, ip
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d1d7      	bne.n	800e052 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e0a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d0d4      	beq.n	800e052 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e0a8:	4653      	mov	r3, sl
 800e0aa:	7333      	strb	r3, [r6, #12]
 800e0ac:	e7d1      	b.n	800e052 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e7dc      	b.n	800e06c <prvListTaskWithinSingleList+0x58>
	}
 800e0b2:	bc1c      	pop	{r2, r3, r4}
 800e0b4:	4690      	mov	r8, r2
 800e0b6:	4699      	mov	r9, r3
 800e0b8:	46a2      	mov	sl, r4
 800e0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0bc:	4b08      	ldr	r3, [pc, #32]	; (800e0e0 <prvResetNextTaskUnblockTime+0x24>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d007      	beq.n	800e0d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e0c6:	4b06      	ldr	r3, [pc, #24]	; (800e0e0 <prvResetNextTaskUnblockTime+0x24>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <prvResetNextTaskUnblockTime+0x28>)
 800e0d2:	601a      	str	r2, [r3, #0]
	}
}
 800e0d4:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e0d6:	4b03      	ldr	r3, [pc, #12]	; (800e0e4 <prvResetNextTaskUnblockTime+0x28>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	4252      	negs	r2, r2
 800e0dc:	601a      	str	r2, [r3, #0]
 800e0de:	e7f9      	b.n	800e0d4 <prvResetNextTaskUnblockTime+0x18>
 800e0e0:	20001c34 	.word	0x20001c34
 800e0e4:	200000a4 	.word	0x200000a4

0800e0e8 <prvAddCurrentTaskToDelayedList>:
{
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	; (800e128 <prvAddCurrentTaskToDelayedList+0x40>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	; (800e12c <prvAddCurrentTaskToDelayedList+0x44>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4283      	cmp	r3, r0
 800e0f8:	d80d      	bhi.n	800e116 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	; (800e130 <prvAddCurrentTaskToDelayedList+0x48>)
 800e0fc:	6818      	ldr	r0, [r3, #0]
 800e0fe:	4b0a      	ldr	r3, [pc, #40]	; (800e128 <prvAddCurrentTaskToDelayedList+0x40>)
 800e100:	6819      	ldr	r1, [r3, #0]
 800e102:	3104      	adds	r1, #4
 800e104:	f7ff fc24 	bl	800d950 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e108:	4b0a      	ldr	r3, [pc, #40]	; (800e134 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	42a3      	cmp	r3, r4
 800e10e:	d909      	bls.n	800e124 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e110:	4b08      	ldr	r3, [pc, #32]	; (800e134 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e112:	601c      	str	r4, [r3, #0]
}
 800e114:	e006      	b.n	800e124 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e116:	4b08      	ldr	r3, [pc, #32]	; (800e138 <prvAddCurrentTaskToDelayedList+0x50>)
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	4b03      	ldr	r3, [pc, #12]	; (800e128 <prvAddCurrentTaskToDelayedList+0x40>)
 800e11c:	6819      	ldr	r1, [r3, #0]
 800e11e:	3104      	adds	r1, #4
 800e120:	f7ff fc16 	bl	800d950 <vListInsert>
}
 800e124:	bd10      	pop	{r4, pc}
 800e126:	46c0      	nop			; (mov r8, r8)
 800e128:	20001c30 	.word	0x20001c30
 800e12c:	20001d50 	.word	0x20001d50
 800e130:	20001c34 	.word	0x20001c34
 800e134:	200000a4 	.word	0x200000a4
 800e138:	20001c38 	.word	0x20001c38

0800e13c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e13c:	b510      	push	{r4, lr}
 800e13e:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e140:	f005 f8b4 	bl	80132ac <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e144:	0020      	movs	r0, r4
 800e146:	f7f1 ffe7 	bl	8000118 <strlen>
 800e14a:	0003      	movs	r3, r0
 800e14c:	280b      	cmp	r0, #11
 800e14e:	dc08      	bgt.n	800e162 <prvWriteNameToBuffer+0x26>
 800e150:	1820      	adds	r0, r4, r0
 800e152:	0022      	movs	r2, r4
 800e154:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e156:	2320      	movs	r3, #32
 800e158:	7003      	strb	r3, [r0, #0]
 800e15a:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e15c:	4290      	cmp	r0, r2
 800e15e:	d1fb      	bne.n	800e158 <prvWriteNameToBuffer+0x1c>
 800e160:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e162:	18e0      	adds	r0, r4, r3
 800e164:	2300      	movs	r3, #0
 800e166:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e168:	bd10      	pop	{r4, pc}
	...

0800e16c <xTaskGenericCreate>:
{
 800e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16e:	46d6      	mov	lr, sl
 800e170:	4647      	mov	r7, r8
 800e172:	b580      	push	{r7, lr}
 800e174:	b085      	sub	sp, #20
 800e176:	9002      	str	r0, [sp, #8]
 800e178:	000d      	movs	r5, r1
 800e17a:	0016      	movs	r6, r2
 800e17c:	9303      	str	r3, [sp, #12]
 800e17e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e180:	2800      	cmp	r0, #0
 800e182:	d101      	bne.n	800e188 <xTaskGenericCreate+0x1c>
 800e184:	b672      	cpsid	i
 800e186:	e7fe      	b.n	800e186 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e188:	2f06      	cmp	r7, #6
 800e18a:	d901      	bls.n	800e190 <xTaskGenericCreate+0x24>
 800e18c:	b672      	cpsid	i
 800e18e:	e7fe      	b.n	800e18e <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e192:	2b00      	cmp	r3, #0
 800e194:	d106      	bne.n	800e1a4 <xTaskGenericCreate+0x38>
 800e196:	0090      	lsls	r0, r2, #2
 800e198:	f001 f934 	bl	800f404 <pvPortMalloc>
 800e19c:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d100      	bne.n	800e1a4 <xTaskGenericCreate+0x38>
 800e1a2:	e0b7      	b.n	800e314 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e1a4:	2060      	movs	r0, #96	; 0x60
 800e1a6:	f001 f92d 	bl	800f404 <pvPortMalloc>
 800e1aa:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e1ac:	d100      	bne.n	800e1b0 <xTaskGenericCreate+0x44>
 800e1ae:	e08b      	b.n	800e2c8 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1b2:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e1b4:	00b2      	lsls	r2, r6, #2
 800e1b6:	21a5      	movs	r1, #165	; 0xa5
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	f004 fe41 	bl	8012e40 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e1be:	4b57      	ldr	r3, [pc, #348]	; (800e31c <xTaskGenericCreate+0x1b0>)
 800e1c0:	18f3      	adds	r3, r6, r3
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e1c6:	4694      	mov	ip, r2
 800e1c8:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e1ca:	2207      	movs	r2, #7
 800e1cc:	4393      	bics	r3, r2
 800e1ce:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e1d0:	782a      	ldrb	r2, [r5, #0]
 800e1d2:	2334      	movs	r3, #52	; 0x34
 800e1d4:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e1d6:	782b      	ldrb	r3, [r5, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d000      	beq.n	800e1de <xTaskGenericCreate+0x72>
 800e1dc:	e07e      	b.n	800e2dc <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1de:	2500      	movs	r5, #0
 800e1e0:	2340      	movs	r3, #64	; 0x40
 800e1e2:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e1e4:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e1e6:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e1e8:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e1ea:	1d23      	adds	r3, r4, #4
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	f7ff fb9f 	bl	800d932 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e1f4:	0020      	movs	r0, r4
 800e1f6:	3018      	adds	r0, #24
 800e1f8:	f7ff fb9b 	bl	800d932 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e1fc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1fe:	2307      	movs	r3, #7
 800e200:	1bdb      	subs	r3, r3, r7
 800e202:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e204:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e206:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e208:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e20a:	235c      	movs	r3, #92	; 0x5c
 800e20c:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e20e:	9a03      	ldr	r2, [sp, #12]
 800e210:	9902      	ldr	r1, [sp, #8]
 800e212:	4650      	mov	r0, sl
 800e214:	f001 f82c 	bl	800f270 <pxPortInitialiseStack>
 800e218:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e21c:	42ab      	cmp	r3, r5
 800e21e:	d000      	beq.n	800e222 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e220:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e222:	f001 f86d 	bl	800f300 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e226:	4a3e      	ldr	r2, [pc, #248]	; (800e320 <xTaskGenericCreate+0x1b4>)
 800e228:	6813      	ldr	r3, [r2, #0]
 800e22a:	3301      	adds	r3, #1
 800e22c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e22e:	4b3d      	ldr	r3, [pc, #244]	; (800e324 <xTaskGenericCreate+0x1b8>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d162      	bne.n	800e2fc <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e236:	4b3b      	ldr	r3, [pc, #236]	; (800e324 <xTaskGenericCreate+0x1b8>)
 800e238:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e23a:	6813      	ldr	r3, [r2, #0]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d120      	bne.n	800e282 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e240:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e242:	3313      	adds	r3, #19
 800e244:	4698      	mov	r8, r3
 800e246:	4e38      	ldr	r6, [pc, #224]	; (800e328 <xTaskGenericCreate+0x1bc>)
 800e248:	4640      	mov	r0, r8
 800e24a:	4368      	muls	r0, r5
 800e24c:	1980      	adds	r0, r0, r6
 800e24e:	f7ff fb65 	bl	800d91c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e252:	3501      	adds	r5, #1
 800e254:	2d07      	cmp	r5, #7
 800e256:	d1f7      	bne.n	800e248 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e258:	4e34      	ldr	r6, [pc, #208]	; (800e32c <xTaskGenericCreate+0x1c0>)
 800e25a:	0030      	movs	r0, r6
 800e25c:	f7ff fb5e 	bl	800d91c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e260:	4d33      	ldr	r5, [pc, #204]	; (800e330 <xTaskGenericCreate+0x1c4>)
 800e262:	0028      	movs	r0, r5
 800e264:	f7ff fb5a 	bl	800d91c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e268:	4832      	ldr	r0, [pc, #200]	; (800e334 <xTaskGenericCreate+0x1c8>)
 800e26a:	f7ff fb57 	bl	800d91c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e26e:	4832      	ldr	r0, [pc, #200]	; (800e338 <xTaskGenericCreate+0x1cc>)
 800e270:	f7ff fb54 	bl	800d91c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e274:	4831      	ldr	r0, [pc, #196]	; (800e33c <xTaskGenericCreate+0x1d0>)
 800e276:	f7ff fb51 	bl	800d91c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e27a:	4b31      	ldr	r3, [pc, #196]	; (800e340 <xTaskGenericCreate+0x1d4>)
 800e27c:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e27e:	4b31      	ldr	r3, [pc, #196]	; (800e344 <xTaskGenericCreate+0x1d8>)
 800e280:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e282:	4a31      	ldr	r2, [pc, #196]	; (800e348 <xTaskGenericCreate+0x1dc>)
 800e284:	6813      	ldr	r3, [r2, #0]
 800e286:	3301      	adds	r3, #1
 800e288:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e28a:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e28c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e28e:	4a2f      	ldr	r2, [pc, #188]	; (800e34c <xTaskGenericCreate+0x1e0>)
 800e290:	6812      	ldr	r2, [r2, #0]
 800e292:	4293      	cmp	r3, r2
 800e294:	d901      	bls.n	800e29a <xTaskGenericCreate+0x12e>
 800e296:	4a2d      	ldr	r2, [pc, #180]	; (800e34c <xTaskGenericCreate+0x1e0>)
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	2014      	movs	r0, #20
 800e29c:	4358      	muls	r0, r3
 800e29e:	4b22      	ldr	r3, [pc, #136]	; (800e328 <xTaskGenericCreate+0x1bc>)
 800e2a0:	18c0      	adds	r0, r0, r3
 800e2a2:	9901      	ldr	r1, [sp, #4]
 800e2a4:	f7ff fb48 	bl	800d938 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e2a8:	f001 f836 	bl	800f318 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e2ac:	4b28      	ldr	r3, [pc, #160]	; (800e350 <xTaskGenericCreate+0x1e4>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e2b0:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e2b6:	4b1b      	ldr	r3, [pc, #108]	; (800e324 <xTaskGenericCreate+0x1b8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	42bb      	cmp	r3, r7
 800e2be:	d208      	bcs.n	800e2d2 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e2c0:	f001 f812 	bl	800f2e8 <vPortYield>
			xReturn = pdPASS;
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	e004      	b.n	800e2d2 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e2c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e2ca:	f001 f931 	bl	800f530 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	4240      	negs	r0, r0
}
 800e2d2:	b005      	add	sp, #20
 800e2d4:	bc0c      	pop	{r2, r3}
 800e2d6:	4690      	mov	r8, r2
 800e2d8:	469a      	mov	sl, r3
 800e2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2dc:	1c6b      	adds	r3, r5, #1
 800e2de:	0022      	movs	r2, r4
 800e2e0:	3235      	adds	r2, #53	; 0x35
 800e2e2:	0021      	movs	r1, r4
 800e2e4:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e2e6:	7818      	ldrb	r0, [r3, #0]
 800e2e8:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e2ea:	7818      	ldrb	r0, [r3, #0]
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d100      	bne.n	800e2f2 <xTaskGenericCreate+0x186>
 800e2f0:	e775      	b.n	800e1de <xTaskGenericCreate+0x72>
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2f6:	4291      	cmp	r1, r2
 800e2f8:	d1f5      	bne.n	800e2e6 <xTaskGenericCreate+0x17a>
 800e2fa:	e770      	b.n	800e1de <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e2fc:	4b14      	ldr	r3, [pc, #80]	; (800e350 <xTaskGenericCreate+0x1e4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1be      	bne.n	800e282 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e304:	4b07      	ldr	r3, [pc, #28]	; (800e324 <xTaskGenericCreate+0x1b8>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30a:	42bb      	cmp	r3, r7
 800e30c:	d8b9      	bhi.n	800e282 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e30e:	4b05      	ldr	r3, [pc, #20]	; (800e324 <xTaskGenericCreate+0x1b8>)
 800e310:	601c      	str	r4, [r3, #0]
 800e312:	e7b6      	b.n	800e282 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e314:	2001      	movs	r0, #1
 800e316:	4240      	negs	r0, r0
 800e318:	e7db      	b.n	800e2d2 <xTaskGenericCreate+0x166>
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	3fffffff 	.word	0x3fffffff
 800e320:	20001ccc 	.word	0x20001ccc
 800e324:	20001c30 	.word	0x20001c30
 800e328:	20001c3c 	.word	0x20001c3c
 800e32c:	20001ce4 	.word	0x20001ce4
 800e330:	20001cf8 	.word	0x20001cf8
 800e334:	20001d10 	.word	0x20001d10
 800e338:	20001d3c 	.word	0x20001d3c
 800e33c:	20001d28 	.word	0x20001d28
 800e340:	20001c34 	.word	0x20001c34
 800e344:	20001c38 	.word	0x20001c38
 800e348:	20001cd8 	.word	0x20001cd8
 800e34c:	20001ce0 	.word	0x20001ce0
 800e350:	20001d24 	.word	0x20001d24

0800e354 <uxTaskPriorityGet>:
	{
 800e354:	b510      	push	{r4, lr}
 800e356:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e358:	f000 ffd2 	bl	800f300 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e35c:	2c00      	cmp	r4, #0
 800e35e:	d004      	beq.n	800e36a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e360:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e362:	f000 ffd9 	bl	800f318 <vPortExitCritical>
	}
 800e366:	0020      	movs	r0, r4
 800e368:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e36a:	4b01      	ldr	r3, [pc, #4]	; (800e370 <uxTaskPriorityGet+0x1c>)
 800e36c:	681c      	ldr	r4, [r3, #0]
 800e36e:	e7f7      	b.n	800e360 <uxTaskPriorityGet+0xc>
 800e370:	20001c30 	.word	0x20001c30

0800e374 <vTaskPrioritySet>:
	{
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	0004      	movs	r4, r0
 800e378:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e37a:	2906      	cmp	r1, #6
 800e37c:	d901      	bls.n	800e382 <vTaskPrioritySet+0xe>
 800e37e:	b672      	cpsid	i
 800e380:	e7fe      	b.n	800e380 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e382:	f000 ffbd 	bl	800f300 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e386:	2c00      	cmp	r4, #0
 800e388:	d101      	bne.n	800e38e <vTaskPrioritySet+0x1a>
 800e38a:	4b21      	ldr	r3, [pc, #132]	; (800e410 <vTaskPrioritySet+0x9c>)
 800e38c:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e38e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e390:	4295      	cmp	r5, r2
 800e392:	d032      	beq.n	800e3fa <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800e394:	d934      	bls.n	800e400 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800e396:	4b1e      	ldr	r3, [pc, #120]	; (800e410 <vTaskPrioritySet+0x9c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	d036      	beq.n	800e40c <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e39e:	4b1c      	ldr	r3, [pc, #112]	; (800e410 <vTaskPrioritySet+0x9c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a4:	2600      	movs	r6, #0
 800e3a6:	429d      	cmp	r5, r3
 800e3a8:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e3ac:	428a      	cmp	r2, r1
 800e3ae:	d100      	bne.n	800e3b2 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800e3b0:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800e3b2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3b4:	69a3      	ldr	r3, [r4, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	db02      	blt.n	800e3c0 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3ba:	2207      	movs	r2, #7
 800e3bc:	1b55      	subs	r5, r2, r5
 800e3be:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e3c0:	2314      	movs	r3, #20
 800e3c2:	434b      	muls	r3, r1
 800e3c4:	4a13      	ldr	r2, [pc, #76]	; (800e414 <vTaskPrioritySet+0xa0>)
 800e3c6:	189b      	adds	r3, r3, r2
 800e3c8:	6962      	ldr	r2, [r4, #20]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d111      	bne.n	800e3f2 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e3ce:	1d25      	adds	r5, r4, #4
 800e3d0:	0028      	movs	r0, r5
 800e3d2:	f7ff fad4 	bl	800d97e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3d8:	4a0f      	ldr	r2, [pc, #60]	; (800e418 <vTaskPrioritySet+0xa4>)
 800e3da:	6812      	ldr	r2, [r2, #0]
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d901      	bls.n	800e3e4 <vTaskPrioritySet+0x70>
 800e3e0:	4a0d      	ldr	r2, [pc, #52]	; (800e418 <vTaskPrioritySet+0xa4>)
 800e3e2:	6013      	str	r3, [r2, #0]
 800e3e4:	2014      	movs	r0, #20
 800e3e6:	4358      	muls	r0, r3
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <vTaskPrioritySet+0xa0>)
 800e3ea:	18c0      	adds	r0, r0, r3
 800e3ec:	0029      	movs	r1, r5
 800e3ee:	f7ff faa3 	bl	800d938 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800e3f2:	2e01      	cmp	r6, #1
 800e3f4:	d101      	bne.n	800e3fa <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e3f6:	f000 ff77 	bl	800f2e8 <vPortYield>
		taskEXIT_CRITICAL();
 800e3fa:	f000 ff8d 	bl	800f318 <vPortExitCritical>
	}
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800e400:	4b03      	ldr	r3, [pc, #12]	; (800e410 <vTaskPrioritySet+0x9c>)
 800e402:	681e      	ldr	r6, [r3, #0]
 800e404:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e406:	4273      	negs	r3, r6
 800e408:	415e      	adcs	r6, r3
 800e40a:	e7ce      	b.n	800e3aa <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800e40c:	2600      	movs	r6, #0
 800e40e:	e7cc      	b.n	800e3aa <vTaskPrioritySet+0x36>
 800e410:	20001c30 	.word	0x20001c30
 800e414:	20001c3c 	.word	0x20001c3c
 800e418:	20001ce0 	.word	0x20001ce0

0800e41c <vTaskStartScheduler>:
{
 800e41c:	b500      	push	{lr}
 800e41e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e420:	2300      	movs	r3, #0
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	9302      	str	r3, [sp, #8]
 800e426:	9301      	str	r3, [sp, #4]
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	22a0      	movs	r2, #160	; 0xa0
 800e42c:	490d      	ldr	r1, [pc, #52]	; (800e464 <vTaskStartScheduler+0x48>)
 800e42e:	480e      	ldr	r0, [pc, #56]	; (800e468 <vTaskStartScheduler+0x4c>)
 800e430:	f7ff fe9c 	bl	800e16c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e434:	2801      	cmp	r0, #1
 800e436:	d003      	beq.n	800e440 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e438:	2800      	cmp	r0, #0
 800e43a:	d110      	bne.n	800e45e <vTaskStartScheduler+0x42>
 800e43c:	b672      	cpsid	i
 800e43e:	e7fe      	b.n	800e43e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e440:	f000 fd68 	bl	800ef14 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e444:	2801      	cmp	r0, #1
 800e446:	d1f7      	bne.n	800e438 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e448:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e44a:	4b08      	ldr	r3, [pc, #32]	; (800e46c <vTaskStartScheduler+0x50>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e450:	4b07      	ldr	r3, [pc, #28]	; (800e470 <vTaskStartScheduler+0x54>)
 800e452:	2200      	movs	r2, #0
 800e454:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e456:	f7f9 fe21 	bl	800809c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e45a:	f000 ff1b 	bl	800f294 <xPortStartScheduler>
}
 800e45e:	b005      	add	sp, #20
 800e460:	bd00      	pop	{pc}
 800e462:	46c0      	nop			; (mov r8, r8)
 800e464:	0801a504 	.word	0x0801a504
 800e468:	0800e6dd 	.word	0x0800e6dd
 800e46c:	20001d24 	.word	0x20001d24
 800e470:	20001d50 	.word	0x20001d50

0800e474 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e474:	4a02      	ldr	r2, [pc, #8]	; (800e480 <vTaskSuspendAll+0xc>)
 800e476:	6813      	ldr	r3, [r2, #0]
 800e478:	3301      	adds	r3, #1
 800e47a:	6013      	str	r3, [r2, #0]
}
 800e47c:	4770      	bx	lr
 800e47e:	46c0      	nop			; (mov r8, r8)
 800e480:	20001cd4 	.word	0x20001cd4

0800e484 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e484:	4b01      	ldr	r3, [pc, #4]	; (800e48c <xTaskGetTickCount+0x8>)
 800e486:	6818      	ldr	r0, [r3, #0]
}
 800e488:	4770      	bx	lr
 800e48a:	46c0      	nop			; (mov r8, r8)
 800e48c:	20001d50 	.word	0x20001d50

0800e490 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e490:	4b01      	ldr	r3, [pc, #4]	; (800e498 <xTaskGetTickCountFromISR+0x8>)
 800e492:	6818      	ldr	r0, [r3, #0]
}
 800e494:	4770      	bx	lr
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	20001d50 	.word	0x20001d50

0800e49c <xTaskIncrementTick>:
{
 800e49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e49e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4a0:	4b39      	ldr	r3, [pc, #228]	; (800e588 <xTaskIncrementTick+0xec>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d161      	bne.n	800e56c <xTaskIncrementTick+0xd0>
		++xTickCount;
 800e4a8:	4b38      	ldr	r3, [pc, #224]	; (800e58c <xTaskIncrementTick+0xf0>)
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	3201      	adds	r2, #1
 800e4ae:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e4b0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e4b2:	2e00      	cmp	r6, #0
 800e4b4:	d112      	bne.n	800e4dc <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800e4b6:	4b36      	ldr	r3, [pc, #216]	; (800e590 <xTaskIncrementTick+0xf4>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <xTaskIncrementTick+0x28>
 800e4c0:	b672      	cpsid	i
 800e4c2:	e7fe      	b.n	800e4c2 <xTaskIncrementTick+0x26>
 800e4c4:	4a32      	ldr	r2, [pc, #200]	; (800e590 <xTaskIncrementTick+0xf4>)
 800e4c6:	6811      	ldr	r1, [r2, #0]
 800e4c8:	4b32      	ldr	r3, [pc, #200]	; (800e594 <xTaskIncrementTick+0xf8>)
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	6010      	str	r0, [r2, #0]
 800e4ce:	6019      	str	r1, [r3, #0]
 800e4d0:	4a31      	ldr	r2, [pc, #196]	; (800e598 <xTaskIncrementTick+0xfc>)
 800e4d2:	6813      	ldr	r3, [r2, #0]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	f7ff fdf0 	bl	800e0bc <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e4dc:	4b2f      	ldr	r3, [pc, #188]	; (800e59c <xTaskIncrementTick+0x100>)
 800e4de:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e4e0:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e4e2:	42b3      	cmp	r3, r6
 800e4e4:	d833      	bhi.n	800e54e <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800e4e6:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e8:	4d29      	ldr	r5, [pc, #164]	; (800e590 <xTaskIncrementTick+0xf4>)
 800e4ea:	682b      	ldr	r3, [r5, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d029      	beq.n	800e546 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e4f2:	4b27      	ldr	r3, [pc, #156]	; (800e590 <xTaskIncrementTick+0xf4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e4fa:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e4fc:	429e      	cmp	r6, r3
 800e4fe:	d332      	bcc.n	800e566 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e500:	1d23      	adds	r3, r4, #4
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	0018      	movs	r0, r3
 800e506:	f7ff fa3a 	bl	800d97e <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e50a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e510:	0020      	movs	r0, r4
 800e512:	3018      	adds	r0, #24
 800e514:	f7ff fa33 	bl	800d97e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e51a:	4a21      	ldr	r2, [pc, #132]	; (800e5a0 <xTaskIncrementTick+0x104>)
 800e51c:	6812      	ldr	r2, [r2, #0]
 800e51e:	4293      	cmp	r3, r2
 800e520:	d901      	bls.n	800e526 <xTaskIncrementTick+0x8a>
 800e522:	4a1f      	ldr	r2, [pc, #124]	; (800e5a0 <xTaskIncrementTick+0x104>)
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	0098      	lsls	r0, r3, #2
 800e528:	18c0      	adds	r0, r0, r3
 800e52a:	0080      	lsls	r0, r0, #2
 800e52c:	4b1d      	ldr	r3, [pc, #116]	; (800e5a4 <xTaskIncrementTick+0x108>)
 800e52e:	18c0      	adds	r0, r0, r3
 800e530:	9901      	ldr	r1, [sp, #4]
 800e532:	f7ff fa01 	bl	800d938 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e536:	4b1c      	ldr	r3, [pc, #112]	; (800e5a8 <xTaskIncrementTick+0x10c>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	429a      	cmp	r2, r3
 800e540:	d3d3      	bcc.n	800e4ea <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800e542:	2701      	movs	r7, #1
 800e544:	e7d1      	b.n	800e4ea <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e546:	4b15      	ldr	r3, [pc, #84]	; (800e59c <xTaskIncrementTick+0x100>)
 800e548:	2201      	movs	r2, #1
 800e54a:	4252      	negs	r2, r2
 800e54c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e54e:	4b16      	ldr	r3, [pc, #88]	; (800e5a8 <xTaskIncrementTick+0x10c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e554:	0093      	lsls	r3, r2, #2
 800e556:	189b      	adds	r3, r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4a12      	ldr	r2, [pc, #72]	; (800e5a4 <xTaskIncrementTick+0x108>)
 800e55c:	589b      	ldr	r3, [r3, r2]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d909      	bls.n	800e576 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800e562:	2701      	movs	r7, #1
 800e564:	e007      	b.n	800e576 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800e566:	4a0d      	ldr	r2, [pc, #52]	; (800e59c <xTaskIncrementTick+0x100>)
 800e568:	6013      	str	r3, [r2, #0]
							break;
 800e56a:	e7f0      	b.n	800e54e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800e56c:	4a0f      	ldr	r2, [pc, #60]	; (800e5ac <xTaskIncrementTick+0x110>)
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	3301      	adds	r3, #1
 800e572:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e574:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800e576:	4b0e      	ldr	r3, [pc, #56]	; (800e5b0 <xTaskIncrementTick+0x114>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d000      	beq.n	800e580 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800e57e:	2701      	movs	r7, #1
}
 800e580:	0038      	movs	r0, r7
 800e582:	b003      	add	sp, #12
 800e584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e586:	46c0      	nop			; (mov r8, r8)
 800e588:	20001cd4 	.word	0x20001cd4
 800e58c:	20001d50 	.word	0x20001d50
 800e590:	20001c34 	.word	0x20001c34
 800e594:	20001c38 	.word	0x20001c38
 800e598:	20001d0c 	.word	0x20001d0c
 800e59c:	200000a4 	.word	0x200000a4
 800e5a0:	20001ce0 	.word	0x20001ce0
 800e5a4:	20001c3c 	.word	0x20001c3c
 800e5a8:	20001c30 	.word	0x20001c30
 800e5ac:	20001cd0 	.word	0x20001cd0
 800e5b0:	20001d54 	.word	0x20001d54

0800e5b4 <xTaskResumeAll>:
{
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e5b6:	4b2f      	ldr	r3, [pc, #188]	; (800e674 <xTaskResumeAll+0xc0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <xTaskResumeAll+0xe>
 800e5be:	b672      	cpsid	i
 800e5c0:	e7fe      	b.n	800e5c0 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800e5c2:	f000 fe9d 	bl	800f300 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e5c6:	4b2b      	ldr	r3, [pc, #172]	; (800e674 <xTaskResumeAll+0xc0>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	3a01      	subs	r2, #1
 800e5cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5ce:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5d0:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	d105      	bne.n	800e5e2 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5d6:	4b28      	ldr	r3, [pc, #160]	; (800e678 <xTaskResumeAll+0xc4>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e5da:	4d28      	ldr	r5, [pc, #160]	; (800e67c <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5dc:	42a3      	cmp	r3, r4
 800e5de:	d12a      	bne.n	800e636 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800e5e0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e5e2:	f000 fe99 	bl	800f318 <vPortExitCritical>
}
 800e5e6:	0020      	movs	r0, r4
 800e5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800e5ea:	0098      	lsls	r0, r3, #2
 800e5ec:	18c0      	adds	r0, r0, r3
 800e5ee:	0080      	lsls	r0, r0, #2
 800e5f0:	4b23      	ldr	r3, [pc, #140]	; (800e680 <xTaskResumeAll+0xcc>)
 800e5f2:	18c0      	adds	r0, r0, r3
 800e5f4:	0021      	movs	r1, r4
 800e5f6:	f7ff f99f 	bl	800d938 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5fa:	4b22      	ldr	r3, [pc, #136]	; (800e684 <xTaskResumeAll+0xd0>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e602:	429a      	cmp	r2, r3
 800e604:	d214      	bcs.n	800e630 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e606:	6833      	ldr	r3, [r6, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d016      	beq.n	800e63a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e60c:	68eb      	ldr	r3, [r5, #12]
 800e60e:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e610:	0038      	movs	r0, r7
 800e612:	3018      	adds	r0, #24
 800e614:	f7ff f9b3 	bl	800d97e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e618:	1d3c      	adds	r4, r7, #4
 800e61a:	0020      	movs	r0, r4
 800e61c:	f7ff f9af 	bl	800d97e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	4a19      	ldr	r2, [pc, #100]	; (800e688 <xTaskResumeAll+0xd4>)
 800e624:	6812      	ldr	r2, [r2, #0]
 800e626:	4293      	cmp	r3, r2
 800e628:	d9df      	bls.n	800e5ea <xTaskResumeAll+0x36>
 800e62a:	4a17      	ldr	r2, [pc, #92]	; (800e688 <xTaskResumeAll+0xd4>)
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	e7dc      	b.n	800e5ea <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800e630:	4b16      	ldr	r3, [pc, #88]	; (800e68c <xTaskResumeAll+0xd8>)
 800e632:	2201      	movs	r2, #1
 800e634:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e636:	4e11      	ldr	r6, [pc, #68]	; (800e67c <xTaskResumeAll+0xc8>)
 800e638:	e7e5      	b.n	800e606 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e63a:	4b15      	ldr	r3, [pc, #84]	; (800e690 <xTaskResumeAll+0xdc>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d005      	beq.n	800e64e <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e642:	4e13      	ldr	r6, [pc, #76]	; (800e690 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800e644:	4c11      	ldr	r4, [pc, #68]	; (800e68c <xTaskResumeAll+0xd8>)
 800e646:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e648:	6833      	ldr	r3, [r6, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d108      	bne.n	800e660 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800e64e:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <xTaskResumeAll+0xd8>)
 800e650:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e652:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800e654:	2b01      	cmp	r3, #1
 800e656:	d1c4      	bne.n	800e5e2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e658:	f000 fe46 	bl	800f2e8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e65c:	3401      	adds	r4, #1
 800e65e:	e7c0      	b.n	800e5e2 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800e660:	f7ff ff1c 	bl	800e49c <xTaskIncrementTick>
 800e664:	2800      	cmp	r0, #0
 800e666:	d000      	beq.n	800e66a <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800e668:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800e66a:	4a09      	ldr	r2, [pc, #36]	; (800e690 <xTaskResumeAll+0xdc>)
 800e66c:	6813      	ldr	r3, [r2, #0]
 800e66e:	3b01      	subs	r3, #1
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	e7e9      	b.n	800e648 <xTaskResumeAll+0x94>
 800e674:	20001cd4 	.word	0x20001cd4
 800e678:	20001ccc 	.word	0x20001ccc
 800e67c:	20001d10 	.word	0x20001d10
 800e680:	20001c3c 	.word	0x20001c3c
 800e684:	20001c30 	.word	0x20001c30
 800e688:	20001ce0 	.word	0x20001ce0
 800e68c:	20001d54 	.word	0x20001d54
 800e690:	20001cd0 	.word	0x20001cd0

0800e694 <vTaskDelay>:
	{
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e698:	d016      	beq.n	800e6c8 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e69a:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <vTaskDelay+0x3c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <vTaskDelay+0x12>
 800e6a2:	b672      	cpsid	i
 800e6a4:	e7fe      	b.n	800e6a4 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800e6a6:	f7ff fee5 	bl	800e474 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e6aa:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <vTaskDelay+0x40>)
 800e6ac:	681c      	ldr	r4, [r3, #0]
 800e6ae:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e6b0:	4b09      	ldr	r3, [pc, #36]	; (800e6d8 <vTaskDelay+0x44>)
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	3004      	adds	r0, #4
 800e6b6:	f7ff f962 	bl	800d97e <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e6ba:	0020      	movs	r0, r4
 800e6bc:	f7ff fd14 	bl	800e0e8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e6c0:	f7ff ff78 	bl	800e5b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d101      	bne.n	800e6cc <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e6c8:	f000 fe0e 	bl	800f2e8 <vPortYield>
	}
 800e6cc:	bd70      	pop	{r4, r5, r6, pc}
 800e6ce:	46c0      	nop			; (mov r8, r8)
 800e6d0:	20001cd4 	.word	0x20001cd4
 800e6d4:	20001d50 	.word	0x20001d50
 800e6d8:	20001c30 	.word	0x20001c30

0800e6dc <prvIdleTask>:
{
 800e6dc:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e6de:	4d16      	ldr	r5, [pc, #88]	; (800e738 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e6e0:	4e16      	ldr	r6, [pc, #88]	; (800e73c <prvIdleTask+0x60>)
 800e6e2:	e003      	b.n	800e6ec <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6e4:	4b16      	ldr	r3, [pc, #88]	; (800e740 <prvIdleTask+0x64>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d822      	bhi.n	800e732 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d0f8      	beq.n	800e6e4 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e6f2:	f7ff febf 	bl	800e474 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e6f6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800e6f8:	f7ff ff5c 	bl	800e5b4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	d0f5      	beq.n	800e6ec <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e700:	f000 fdfe 	bl	800f300 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e704:	4b0d      	ldr	r3, [pc, #52]	; (800e73c <prvIdleTask+0x60>)
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e70a:	1d20      	adds	r0, r4, #4
 800e70c:	f7ff f937 	bl	800d97e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e710:	4a0c      	ldr	r2, [pc, #48]	; (800e744 <prvIdleTask+0x68>)
 800e712:	6813      	ldr	r3, [r2, #0]
 800e714:	3b01      	subs	r3, #1
 800e716:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800e718:	4a07      	ldr	r2, [pc, #28]	; (800e738 <prvIdleTask+0x5c>)
 800e71a:	6813      	ldr	r3, [r2, #0]
 800e71c:	3b01      	subs	r3, #1
 800e71e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800e720:	f000 fdfa 	bl	800f318 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e724:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e726:	f000 ff03 	bl	800f530 <vPortFree>
		vPortFree( pxTCB );
 800e72a:	0020      	movs	r0, r4
 800e72c:	f000 ff00 	bl	800f530 <vPortFree>
 800e730:	e7dc      	b.n	800e6ec <prvIdleTask+0x10>
				taskYIELD();
 800e732:	f000 fdd9 	bl	800f2e8 <vPortYield>
 800e736:	e7d9      	b.n	800e6ec <prvIdleTask+0x10>
 800e738:	20001cdc 	.word	0x20001cdc
 800e73c:	20001d3c 	.word	0x20001d3c
 800e740:	20001c3c 	.word	0x20001c3c
 800e744:	20001ccc 	.word	0x20001ccc

0800e748 <uxTaskGetSystemState>:
	{
 800e748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74a:	46c6      	mov	lr, r8
 800e74c:	b500      	push	{lr}
 800e74e:	0006      	movs	r6, r0
 800e750:	000d      	movs	r5, r1
 800e752:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e754:	f7ff fe8e 	bl	800e474 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e758:	4b1e      	ldr	r3, [pc, #120]	; (800e7d4 <uxTaskGetSystemState+0x8c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e75c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e75e:	42ab      	cmp	r3, r5
 800e760:	d831      	bhi.n	800e7c6 <uxTaskGetSystemState+0x7e>
 800e762:	4d1d      	ldr	r5, [pc, #116]	; (800e7d8 <uxTaskGetSystemState+0x90>)
 800e764:	002f      	movs	r7, r5
 800e766:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e768:	0160      	lsls	r0, r4, #5
 800e76a:	1830      	adds	r0, r6, r0
 800e76c:	2201      	movs	r2, #1
 800e76e:	0029      	movs	r1, r5
 800e770:	f7ff fc50 	bl	800e014 <prvListTaskWithinSingleList>
 800e774:	1824      	adds	r4, r4, r0
 800e776:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e778:	42bd      	cmp	r5, r7
 800e77a:	d1f5      	bne.n	800e768 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e77c:	4b17      	ldr	r3, [pc, #92]	; (800e7dc <uxTaskGetSystemState+0x94>)
 800e77e:	6819      	ldr	r1, [r3, #0]
 800e780:	0160      	lsls	r0, r4, #5
 800e782:	1830      	adds	r0, r6, r0
 800e784:	2202      	movs	r2, #2
 800e786:	f7ff fc45 	bl	800e014 <prvListTaskWithinSingleList>
 800e78a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e78c:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <uxTaskGetSystemState+0x98>)
 800e78e:	6819      	ldr	r1, [r3, #0]
 800e790:	0160      	lsls	r0, r4, #5
 800e792:	1830      	adds	r0, r6, r0
 800e794:	2202      	movs	r2, #2
 800e796:	f7ff fc3d 	bl	800e014 <prvListTaskWithinSingleList>
 800e79a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e79c:	0160      	lsls	r0, r4, #5
 800e79e:	1830      	adds	r0, r6, r0
 800e7a0:	2204      	movs	r2, #4
 800e7a2:	4910      	ldr	r1, [pc, #64]	; (800e7e4 <uxTaskGetSystemState+0x9c>)
 800e7a4:	f7ff fc36 	bl	800e014 <prvListTaskWithinSingleList>
 800e7a8:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e7aa:	0160      	lsls	r0, r4, #5
 800e7ac:	1830      	adds	r0, r6, r0
 800e7ae:	2203      	movs	r2, #3
 800e7b0:	490d      	ldr	r1, [pc, #52]	; (800e7e8 <uxTaskGetSystemState+0xa0>)
 800e7b2:	f7ff fc2f 	bl	800e014 <prvListTaskWithinSingleList>
 800e7b6:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e7b8:	4643      	mov	r3, r8
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d003      	beq.n	800e7c6 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e7be:	f7f9 fc7d 	bl	80080bc <ulMainGetRunTimeCounterValue>
 800e7c2:	4643      	mov	r3, r8
 800e7c4:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e7c6:	f7ff fef5 	bl	800e5b4 <xTaskResumeAll>
	}
 800e7ca:	0020      	movs	r0, r4
 800e7cc:	bc04      	pop	{r2}
 800e7ce:	4690      	mov	r8, r2
 800e7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	20001ccc 	.word	0x20001ccc
 800e7d8:	20001cb4 	.word	0x20001cb4
 800e7dc:	20001c34 	.word	0x20001c34
 800e7e0:	20001c38 	.word	0x20001c38
 800e7e4:	20001d3c 	.word	0x20001d3c
 800e7e8:	20001d28 	.word	0x20001d28

0800e7ec <vTaskSwitchContext>:
{
 800e7ec:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7ee:	4b3a      	ldr	r3, [pc, #232]	; (800e8d8 <vTaskSwitchContext+0xec>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e7f6:	4b39      	ldr	r3, [pc, #228]	; (800e8dc <vTaskSwitchContext+0xf0>)
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	601a      	str	r2, [r3, #0]
}
 800e7fc:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800e7fe:	4b37      	ldr	r3, [pc, #220]	; (800e8dc <vTaskSwitchContext+0xf0>)
 800e800:	2200      	movs	r2, #0
 800e802:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e804:	f7f9 fc5a 	bl	80080bc <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e808:	4b35      	ldr	r3, [pc, #212]	; (800e8e0 <vTaskSwitchContext+0xf4>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4298      	cmp	r0, r3
 800e80e:	d905      	bls.n	800e81c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e810:	4a34      	ldr	r2, [pc, #208]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e812:	6812      	ldr	r2, [r2, #0]
 800e814:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e816:	1acb      	subs	r3, r1, r3
 800e818:	181b      	adds	r3, r3, r0
 800e81a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e81c:	4b30      	ldr	r3, [pc, #192]	; (800e8e0 <vTaskSwitchContext+0xf4>)
 800e81e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e820:	4b30      	ldr	r3, [pc, #192]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6812      	ldr	r2, [r2, #0]
 800e828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d805      	bhi.n	800e83a <vTaskSwitchContext+0x4e>
 800e82e:	4b2d      	ldr	r3, [pc, #180]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	6819      	ldr	r1, [r3, #0]
 800e834:	3134      	adds	r1, #52	; 0x34
 800e836:	f7fe f9f7 	bl	800cc28 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e83a:	4b2a      	ldr	r3, [pc, #168]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e840:	2214      	movs	r2, #20
 800e842:	4929      	ldr	r1, [pc, #164]	; (800e8e8 <vTaskSwitchContext+0xfc>)
 800e844:	f004 fae4 	bl	8012e10 <memcmp>
 800e848:	2800      	cmp	r0, #0
 800e84a:	d005      	beq.n	800e858 <vTaskSwitchContext+0x6c>
 800e84c:	4b25      	ldr	r3, [pc, #148]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	6819      	ldr	r1, [r3, #0]
 800e852:	3134      	adds	r1, #52	; 0x34
 800e854:	f7fe f9e8 	bl	800cc28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e858:	4b24      	ldr	r3, [pc, #144]	; (800e8ec <vTaskSwitchContext+0x100>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	0093      	lsls	r3, r2, #2
 800e85e:	189b      	adds	r3, r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4a23      	ldr	r2, [pc, #140]	; (800e8f0 <vTaskSwitchContext+0x104>)
 800e864:	589b      	ldr	r3, [r3, r2]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d115      	bne.n	800e896 <vTaskSwitchContext+0xaa>
 800e86a:	4b20      	ldr	r3, [pc, #128]	; (800e8ec <vTaskSwitchContext+0x100>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00f      	beq.n	800e892 <vTaskSwitchContext+0xa6>
 800e872:	4a1e      	ldr	r2, [pc, #120]	; (800e8ec <vTaskSwitchContext+0x100>)
 800e874:	4c1e      	ldr	r4, [pc, #120]	; (800e8f0 <vTaskSwitchContext+0x104>)
 800e876:	0010      	movs	r0, r2
 800e878:	6813      	ldr	r3, [r2, #0]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
 800e87e:	6811      	ldr	r1, [r2, #0]
 800e880:	008b      	lsls	r3, r1, #2
 800e882:	185b      	adds	r3, r3, r1
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	591b      	ldr	r3, [r3, r4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d104      	bne.n	800e896 <vTaskSwitchContext+0xaa>
 800e88c:	6803      	ldr	r3, [r0, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1f2      	bne.n	800e878 <vTaskSwitchContext+0x8c>
 800e892:	b672      	cpsid	i
 800e894:	e7fe      	b.n	800e894 <vTaskSwitchContext+0xa8>
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <vTaskSwitchContext+0x100>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	4c15      	ldr	r4, [pc, #84]	; (800e8f0 <vTaskSwitchContext+0x104>)
 800e89c:	0093      	lsls	r3, r2, #2
 800e89e:	1899      	adds	r1, r3, r2
 800e8a0:	0089      	lsls	r1, r1, #2
 800e8a2:	1861      	adds	r1, r4, r1
 800e8a4:	6848      	ldr	r0, [r1, #4]
 800e8a6:	6840      	ldr	r0, [r0, #4]
 800e8a8:	6048      	str	r0, [r1, #4]
 800e8aa:	189b      	adds	r3, r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	191b      	adds	r3, r3, r4
 800e8b2:	4298      	cmp	r0, r3
 800e8b4:	d009      	beq.n	800e8ca <vTaskSwitchContext+0xde>
 800e8b6:	0093      	lsls	r3, r2, #2
 800e8b8:	189a      	adds	r2, r3, r2
 800e8ba:	0092      	lsls	r2, r2, #2
 800e8bc:	4b0c      	ldr	r3, [pc, #48]	; (800e8f0 <vTaskSwitchContext+0x104>)
 800e8be:	189a      	adds	r2, r3, r2
 800e8c0:	6853      	ldr	r3, [r2, #4]
 800e8c2:	68da      	ldr	r2, [r3, #12]
 800e8c4:	4b07      	ldr	r3, [pc, #28]	; (800e8e4 <vTaskSwitchContext+0xf8>)
 800e8c6:	601a      	str	r2, [r3, #0]
}
 800e8c8:	e798      	b.n	800e7fc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e8ca:	6840      	ldr	r0, [r0, #4]
 800e8cc:	2114      	movs	r1, #20
 800e8ce:	4351      	muls	r1, r2
 800e8d0:	1863      	adds	r3, r4, r1
 800e8d2:	6058      	str	r0, [r3, #4]
 800e8d4:	e7ef      	b.n	800e8b6 <vTaskSwitchContext+0xca>
 800e8d6:	46c0      	nop			; (mov r8, r8)
 800e8d8:	20001cd4 	.word	0x20001cd4
 800e8dc:	20001d54 	.word	0x20001d54
 800e8e0:	20001cc8 	.word	0x20001cc8
 800e8e4:	20001c30 	.word	0x20001c30
 800e8e8:	0801a4c8 	.word	0x0801a4c8
 800e8ec:	20001ce0 	.word	0x20001ce0
 800e8f0:	20001c3c 	.word	0x20001c3c

0800e8f4 <vTaskPlaceOnEventList>:
{
 800e8f4:	b570      	push	{r4, r5, r6, lr}
 800e8f6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d101      	bne.n	800e900 <vTaskPlaceOnEventList+0xc>
 800e8fc:	b672      	cpsid	i
 800e8fe:	e7fe      	b.n	800e8fe <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e900:	4d0b      	ldr	r5, [pc, #44]	; (800e930 <vTaskPlaceOnEventList+0x3c>)
 800e902:	6829      	ldr	r1, [r5, #0]
 800e904:	3118      	adds	r1, #24
 800e906:	f7ff f823 	bl	800d950 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e90a:	6828      	ldr	r0, [r5, #0]
 800e90c:	3004      	adds	r0, #4
 800e90e:	f7ff f836 	bl	800d97e <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e912:	1c63      	adds	r3, r4, #1
 800e914:	d005      	beq.n	800e922 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800e916:	4b07      	ldr	r3, [pc, #28]	; (800e934 <vTaskPlaceOnEventList+0x40>)
 800e918:	6818      	ldr	r0, [r3, #0]
 800e91a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e91c:	f7ff fbe4 	bl	800e0e8 <prvAddCurrentTaskToDelayedList>
}
 800e920:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e922:	4b03      	ldr	r3, [pc, #12]	; (800e930 <vTaskPlaceOnEventList+0x3c>)
 800e924:	6819      	ldr	r1, [r3, #0]
 800e926:	3104      	adds	r1, #4
 800e928:	4803      	ldr	r0, [pc, #12]	; (800e938 <vTaskPlaceOnEventList+0x44>)
 800e92a:	f7ff f805 	bl	800d938 <vListInsertEnd>
 800e92e:	e7f7      	b.n	800e920 <vTaskPlaceOnEventList+0x2c>
 800e930:	20001c30 	.word	0x20001c30
 800e934:	20001d50 	.word	0x20001d50
 800e938:	20001d28 	.word	0x20001d28

0800e93c <vTaskPlaceOnEventListRestricted>:
	{
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800e940:	2800      	cmp	r0, #0
 800e942:	d101      	bne.n	800e948 <vTaskPlaceOnEventListRestricted+0xc>
 800e944:	b672      	cpsid	i
 800e946:	e7fe      	b.n	800e946 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e948:	4c07      	ldr	r4, [pc, #28]	; (800e968 <vTaskPlaceOnEventListRestricted+0x2c>)
 800e94a:	6821      	ldr	r1, [r4, #0]
 800e94c:	3118      	adds	r1, #24
 800e94e:	f7fe fff3 	bl	800d938 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e952:	6820      	ldr	r0, [r4, #0]
 800e954:	3004      	adds	r0, #4
 800e956:	f7ff f812 	bl	800d97e <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <vTaskPlaceOnEventListRestricted+0x30>)
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e960:	f7ff fbc2 	bl	800e0e8 <prvAddCurrentTaskToDelayedList>
	}
 800e964:	bd70      	pop	{r4, r5, r6, pc}
 800e966:	46c0      	nop			; (mov r8, r8)
 800e968:	20001c30 	.word	0x20001c30
 800e96c:	20001d50 	.word	0x20001d50

0800e970 <xTaskRemoveFromEventList>:
{
 800e970:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e972:	68c3      	ldr	r3, [r0, #12]
 800e974:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e976:	2d00      	cmp	r5, #0
 800e978:	d101      	bne.n	800e97e <xTaskRemoveFromEventList+0xe>
 800e97a:	b672      	cpsid	i
 800e97c:	e7fe      	b.n	800e97c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e97e:	002c      	movs	r4, r5
 800e980:	3418      	adds	r4, #24
 800e982:	0020      	movs	r0, r4
 800e984:	f7fe fffb 	bl	800d97e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e988:	4b13      	ldr	r3, [pc, #76]	; (800e9d8 <xTaskRemoveFromEventList+0x68>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d11e      	bne.n	800e9ce <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e990:	1d2c      	adds	r4, r5, #4
 800e992:	0020      	movs	r0, r4
 800e994:	f7fe fff3 	bl	800d97e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e998:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e99a:	4a10      	ldr	r2, [pc, #64]	; (800e9dc <xTaskRemoveFromEventList+0x6c>)
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d901      	bls.n	800e9a6 <xTaskRemoveFromEventList+0x36>
 800e9a2:	4a0e      	ldr	r2, [pc, #56]	; (800e9dc <xTaskRemoveFromEventList+0x6c>)
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	0098      	lsls	r0, r3, #2
 800e9a8:	18c0      	adds	r0, r0, r3
 800e9aa:	0080      	lsls	r0, r0, #2
 800e9ac:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <xTaskRemoveFromEventList+0x70>)
 800e9ae:	18c0      	adds	r0, r0, r3
 800e9b0:	0021      	movs	r1, r4
 800e9b2:	f7fe ffc1 	bl	800d938 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9b6:	4b0b      	ldr	r3, [pc, #44]	; (800e9e4 <xTaskRemoveFromEventList+0x74>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e9be:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d903      	bls.n	800e9cc <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800e9c4:	4b08      	ldr	r3, [pc, #32]	; (800e9e8 <xTaskRemoveFromEventList+0x78>)
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800e9ca:	3001      	adds	r0, #1
}
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9ce:	0021      	movs	r1, r4
 800e9d0:	4806      	ldr	r0, [pc, #24]	; (800e9ec <xTaskRemoveFromEventList+0x7c>)
 800e9d2:	f7fe ffb1 	bl	800d938 <vListInsertEnd>
 800e9d6:	e7ee      	b.n	800e9b6 <xTaskRemoveFromEventList+0x46>
 800e9d8:	20001cd4 	.word	0x20001cd4
 800e9dc:	20001ce0 	.word	0x20001ce0
 800e9e0:	20001c3c 	.word	0x20001c3c
 800e9e4:	20001c30 	.word	0x20001c30
 800e9e8:	20001d54 	.word	0x20001d54
 800e9ec:	20001d10 	.word	0x20001d10

0800e9f0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d006      	beq.n	800ea02 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9f4:	4b04      	ldr	r3, [pc, #16]	; (800ea08 <vTaskSetTimeOutState+0x18>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9fa:	4b04      	ldr	r3, [pc, #16]	; (800ea0c <vTaskSetTimeOutState+0x1c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6043      	str	r3, [r0, #4]
}
 800ea00:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ea02:	b672      	cpsid	i
 800ea04:	e7fe      	b.n	800ea04 <vTaskSetTimeOutState+0x14>
 800ea06:	46c0      	nop			; (mov r8, r8)
 800ea08:	20001d0c 	.word	0x20001d0c
 800ea0c:	20001d50 	.word	0x20001d50

0800ea10 <xTaskCheckForTimeOut>:
{
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	0004      	movs	r4, r0
 800ea14:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d003      	beq.n	800ea22 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	d103      	bne.n	800ea26 <xTaskCheckForTimeOut+0x16>
 800ea1e:	b672      	cpsid	i
 800ea20:	e7fe      	b.n	800ea20 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800ea22:	b672      	cpsid	i
 800ea24:	e7fe      	b.n	800ea24 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800ea26:	f000 fc6b 	bl	800f300 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ea2a:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <xTaskCheckForTimeOut+0x5c>)
 800ea2c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ea2e:	6833      	ldr	r3, [r6, #0]
 800ea30:	1c59      	adds	r1, r3, #1
 800ea32:	d019      	beq.n	800ea68 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea34:	490e      	ldr	r1, [pc, #56]	; (800ea70 <xTaskCheckForTimeOut+0x60>)
 800ea36:	6809      	ldr	r1, [r1, #0]
 800ea38:	6820      	ldr	r0, [r4, #0]
 800ea3a:	4288      	cmp	r0, r1
 800ea3c:	d003      	beq.n	800ea46 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800ea3e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea40:	6861      	ldr	r1, [r4, #4]
 800ea42:	4291      	cmp	r1, r2
 800ea44:	d904      	bls.n	800ea50 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea46:	6861      	ldr	r1, [r4, #4]
 800ea48:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ea4a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea4c:	4283      	cmp	r3, r0
 800ea4e:	d803      	bhi.n	800ea58 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800ea50:	f000 fc62 	bl	800f318 <vPortExitCritical>
}
 800ea54:	0028      	movs	r0, r5
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ea58:	1a9b      	subs	r3, r3, r2
 800ea5a:	185b      	adds	r3, r3, r1
 800ea5c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ea5e:	0020      	movs	r0, r4
 800ea60:	f7ff ffc6 	bl	800e9f0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ea64:	2500      	movs	r5, #0
 800ea66:	e7f3      	b.n	800ea50 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800ea68:	2500      	movs	r5, #0
 800ea6a:	e7f1      	b.n	800ea50 <xTaskCheckForTimeOut+0x40>
 800ea6c:	20001d50 	.word	0x20001d50
 800ea70:	20001d0c 	.word	0x20001d0c

0800ea74 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea74:	4b01      	ldr	r3, [pc, #4]	; (800ea7c <vTaskMissedYield+0x8>)
 800ea76:	2201      	movs	r2, #1
 800ea78:	601a      	str	r2, [r3, #0]
}
 800ea7a:	4770      	bx	lr
 800ea7c:	20001d54 	.word	0x20001d54

0800ea80 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ea80:	4b05      	ldr	r3, [pc, #20]	; (800ea98 <xTaskGetSchedulerState+0x18>)
 800ea82:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea84:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea8a:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <xTaskGetSchedulerState+0x1c>)
 800ea8c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea8e:	4243      	negs	r3, r0
 800ea90:	4158      	adcs	r0, r3
 800ea92:	0040      	lsls	r0, r0, #1
	}
 800ea94:	4770      	bx	lr
 800ea96:	46c0      	nop			; (mov r8, r8)
 800ea98:	20001d24 	.word	0x20001d24
 800ea9c:	20001cd4 	.word	0x20001cd4

0800eaa0 <vTaskPriorityInherit>:
	{
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eaa4:	d01a      	beq.n	800eadc <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eaa6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eaa8:	4b19      	ldr	r3, [pc, #100]	; (800eb10 <vTaskPriorityInherit+0x70>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d214      	bcs.n	800eadc <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eab2:	6983      	ldr	r3, [r0, #24]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	db05      	blt.n	800eac4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab8:	4b15      	ldr	r3, [pc, #84]	; (800eb10 <vTaskPriorityInherit+0x70>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eabe:	2307      	movs	r3, #7
 800eac0:	1a5b      	subs	r3, r3, r1
 800eac2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eac4:	0093      	lsls	r3, r2, #2
 800eac6:	189b      	adds	r3, r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4a12      	ldr	r2, [pc, #72]	; (800eb14 <vTaskPriorityInherit+0x74>)
 800eacc:	189b      	adds	r3, r3, r2
 800eace:	6962      	ldr	r2, [r4, #20]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d004      	beq.n	800eade <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ead4:	4b0e      	ldr	r3, [pc, #56]	; (800eb10 <vTaskPriorityInherit+0x70>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eada:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eadc:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eade:	1d25      	adds	r5, r4, #4
 800eae0:	0028      	movs	r0, r5
 800eae2:	f7fe ff4c 	bl	800d97e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eae6:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <vTaskPriorityInherit+0x70>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaec:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eaee:	4a0a      	ldr	r2, [pc, #40]	; (800eb18 <vTaskPriorityInherit+0x78>)
 800eaf0:	6812      	ldr	r2, [r2, #0]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d808      	bhi.n	800eb08 <vTaskPriorityInherit+0x68>
 800eaf6:	0098      	lsls	r0, r3, #2
 800eaf8:	18c0      	adds	r0, r0, r3
 800eafa:	0080      	lsls	r0, r0, #2
 800eafc:	4b05      	ldr	r3, [pc, #20]	; (800eb14 <vTaskPriorityInherit+0x74>)
 800eafe:	18c0      	adds	r0, r0, r3
 800eb00:	0029      	movs	r1, r5
 800eb02:	f7fe ff19 	bl	800d938 <vListInsertEnd>
	}
 800eb06:	e7e9      	b.n	800eadc <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800eb08:	4a03      	ldr	r2, [pc, #12]	; (800eb18 <vTaskPriorityInherit+0x78>)
 800eb0a:	6013      	str	r3, [r2, #0]
 800eb0c:	e7f3      	b.n	800eaf6 <vTaskPriorityInherit+0x56>
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	20001c30 	.word	0x20001c30
 800eb14:	20001c3c 	.word	0x20001c3c
 800eb18:	20001ce0 	.word	0x20001ce0

0800eb1c <xTaskPriorityDisinherit>:
	{
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eb20:	d02b      	beq.n	800eb7a <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800eb22:	4b18      	ldr	r3, [pc, #96]	; (800eb84 <xTaskPriorityDisinherit+0x68>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4283      	cmp	r3, r0
 800eb28:	d001      	beq.n	800eb2e <xTaskPriorityDisinherit+0x12>
 800eb2a:	b672      	cpsid	i
 800eb2c:	e7fe      	b.n	800eb2c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb2e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d101      	bne.n	800eb38 <xTaskPriorityDisinherit+0x1c>
 800eb34:	b672      	cpsid	i
 800eb36:	e7fe      	b.n	800eb36 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eb3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800eb40:	428a      	cmp	r2, r1
 800eb42:	d01c      	beq.n	800eb7e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800eb44:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb46:	4283      	cmp	r3, r0
 800eb48:	d118      	bne.n	800eb7c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb4a:	1d25      	adds	r5, r4, #4
 800eb4c:	0028      	movs	r0, r5
 800eb4e:	f7fe ff16 	bl	800d97e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb54:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb56:	2207      	movs	r2, #7
 800eb58:	1ad2      	subs	r2, r2, r3
 800eb5a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	; (800eb88 <xTaskPriorityDisinherit+0x6c>)
 800eb5e:	6812      	ldr	r2, [r2, #0]
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d901      	bls.n	800eb68 <xTaskPriorityDisinherit+0x4c>
 800eb64:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <xTaskPriorityDisinherit+0x6c>)
 800eb66:	6013      	str	r3, [r2, #0]
 800eb68:	2014      	movs	r0, #20
 800eb6a:	4358      	muls	r0, r3
 800eb6c:	4b07      	ldr	r3, [pc, #28]	; (800eb8c <xTaskPriorityDisinherit+0x70>)
 800eb6e:	18c0      	adds	r0, r0, r3
 800eb70:	0029      	movs	r1, r5
 800eb72:	f7fe fee1 	bl	800d938 <vListInsertEnd>
					xReturn = pdTRUE;
 800eb76:	2001      	movs	r0, #1
 800eb78:	e000      	b.n	800eb7c <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800eb7a:	2000      	movs	r0, #0
	}
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800eb7e:	2000      	movs	r0, #0
 800eb80:	e7fc      	b.n	800eb7c <xTaskPriorityDisinherit+0x60>
 800eb82:	46c0      	nop			; (mov r8, r8)
 800eb84:	20001c30 	.word	0x20001c30
 800eb88:	20001ce0 	.word	0x20001ce0
 800eb8c:	20001c3c 	.word	0x20001c3c

0800eb90 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb92:	b085      	sub	sp, #20
 800eb94:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eb96:	2300      	movs	r3, #0
 800eb98:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eb9a:	4b2b      	ldr	r3, [pc, #172]	; (800ec48 <vTaskList+0xb8>)
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eba0:	6818      	ldr	r0, [r3, #0]
 800eba2:	0140      	lsls	r0, r0, #5
 800eba4:	f000 fc2e 	bl	800f404 <pvPortMalloc>
 800eba8:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ebaa:	d04a      	beq.n	800ec42 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ebac:	9903      	ldr	r1, [sp, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f7ff fdca 	bl	800e748 <uxTaskGetSystemState>
 800ebb4:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9302      	str	r3, [sp, #8]
 800ebba:	9a02      	ldr	r2, [sp, #8]
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d23c      	bcs.n	800ec3c <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ebc2:	4e22      	ldr	r6, [pc, #136]	; (800ec4c <vTaskList+0xbc>)
 800ebc4:	e027      	b.n	800ec16 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ebc6:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d133      	bne.n	800ec34 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	015b      	lsls	r3, r3, #5
 800ebd0:	18fb      	adds	r3, r7, r3
 800ebd2:	6859      	ldr	r1, [r3, #4]
 800ebd4:	0020      	movs	r0, r4
 800ebd6:	f7ff fab1 	bl	800e13c <prvWriteNameToBuffer>
 800ebda:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ebdc:	9b02      	ldr	r3, [sp, #8]
 800ebde:	9a02      	ldr	r2, [sp, #8]
 800ebe0:	9902      	ldr	r1, [sp, #8]
 800ebe2:	015b      	lsls	r3, r3, #5
 800ebe4:	18fb      	adds	r3, r7, r3
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	0149      	lsls	r1, r1, #5
 800ebea:	1879      	adds	r1, r7, r1
 800ebec:	6889      	ldr	r1, [r1, #8]
 800ebee:	9101      	str	r1, [sp, #4]
 800ebf0:	0152      	lsls	r2, r2, #5
 800ebf2:	18ba      	adds	r2, r7, r2
 800ebf4:	8b92      	ldrh	r2, [r2, #28]
 800ebf6:	9200      	str	r2, [sp, #0]
 800ebf8:	002a      	movs	r2, r5
 800ebfa:	0031      	movs	r1, r6
 800ebfc:	f004 fb1a 	bl	8013234 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ec00:	0020      	movs	r0, r4
 800ec02:	f7f1 fa89 	bl	8000118 <strlen>
 800ec06:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ec08:	9b02      	ldr	r3, [sp, #8]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	9302      	str	r3, [sp, #8]
 800ec0e:	9a02      	ldr	r2, [sp, #8]
 800ec10:	9b03      	ldr	r3, [sp, #12]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d212      	bcs.n	800ec3c <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ec16:	9b02      	ldr	r3, [sp, #8]
 800ec18:	015b      	lsls	r3, r3, #5
 800ec1a:	18fb      	adds	r3, r7, r3
 800ec1c:	7b1b      	ldrb	r3, [r3, #12]
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d00a      	beq.n	800ec38 <vTaskList+0xa8>
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	2a02      	cmp	r2, #2
 800ec26:	d9ce      	bls.n	800ebc6 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ec28:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d0ce      	beq.n	800ebcc <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ec2e:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ec30:	2b04      	cmp	r3, #4
 800ec32:	d0cb      	beq.n	800ebcc <vTaskList+0x3c>
										cStatus = 0x00;
 800ec34:	2500      	movs	r5, #0
										break;
 800ec36:	e7c9      	b.n	800ebcc <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ec38:	2542      	movs	r5, #66	; 0x42
 800ec3a:	e7c7      	b.n	800ebcc <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec3c:	0038      	movs	r0, r7
 800ec3e:	f000 fc77 	bl	800f530 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec42:	b005      	add	sp, #20
 800ec44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec46:	46c0      	nop			; (mov r8, r8)
 800ec48:	20001ccc 	.word	0x20001ccc
 800ec4c:	0801a4f4 	.word	0x0801a4f4

0800ec50 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec56:	2300      	movs	r3, #0
 800ec58:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec5a:	4b26      	ldr	r3, [pc, #152]	; (800ecf4 <vTaskGetRunTimeStats+0xa4>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec60:	6818      	ldr	r0, [r3, #0]
 800ec62:	0140      	lsls	r0, r0, #5
 800ec64:	f000 fbce 	bl	800f404 <pvPortMalloc>
 800ec68:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec6a:	d014      	beq.n	800ec96 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec6c:	9903      	ldr	r1, [sp, #12]
 800ec6e:	aa01      	add	r2, sp, #4
 800ec70:	f7ff fd6a 	bl	800e748 <uxTaskGetSystemState>
 800ec74:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec76:	2164      	movs	r1, #100	; 0x64
 800ec78:	9801      	ldr	r0, [sp, #4]
 800ec7a:	f7f1 fa69 	bl	8000150 <__udivsi3>
 800ec7e:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d005      	beq.n	800ec90 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec84:	2300      	movs	r3, #0
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	9a02      	ldr	r2, [sp, #8]
 800ec8a:	9b03      	ldr	r3, [sp, #12]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d316      	bcc.n	800ecbe <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec90:	0030      	movs	r0, r6
 800ec92:	f000 fc4d 	bl	800f530 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec96:	b004      	add	sp, #16
 800ec98:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ec9a:	9b02      	ldr	r3, [sp, #8]
 800ec9c:	015b      	lsls	r3, r3, #5
 800ec9e:	18f3      	adds	r3, r6, r3
 800eca0:	699a      	ldr	r2, [r3, #24]
 800eca2:	4915      	ldr	r1, [pc, #84]	; (800ecf8 <vTaskGetRunTimeStats+0xa8>)
 800eca4:	f004 fac6 	bl	8013234 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800eca8:	0020      	movs	r0, r4
 800ecaa:	f7f1 fa35 	bl	8000118 <strlen>
 800ecae:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ecb0:	9b02      	ldr	r3, [sp, #8]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	9302      	str	r3, [sp, #8]
 800ecb6:	9a02      	ldr	r2, [sp, #8]
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d2e8      	bcs.n	800ec90 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ecbe:	9b02      	ldr	r3, [sp, #8]
 800ecc0:	015b      	lsls	r3, r3, #5
 800ecc2:	18f3      	adds	r3, r6, r3
 800ecc4:	9901      	ldr	r1, [sp, #4]
 800ecc6:	6998      	ldr	r0, [r3, #24]
 800ecc8:	f7f1 fa42 	bl	8000150 <__udivsi3>
 800eccc:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecce:	9b02      	ldr	r3, [sp, #8]
 800ecd0:	015b      	lsls	r3, r3, #5
 800ecd2:	18f3      	adds	r3, r6, r3
 800ecd4:	6859      	ldr	r1, [r3, #4]
 800ecd6:	0020      	movs	r0, r4
 800ecd8:	f7ff fa30 	bl	800e13c <prvWriteNameToBuffer>
 800ecdc:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ecde:	2d00      	cmp	r5, #0
 800ece0:	d0db      	beq.n	800ec9a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ece2:	9b02      	ldr	r3, [sp, #8]
 800ece4:	015b      	lsls	r3, r3, #5
 800ece6:	18f3      	adds	r3, r6, r3
 800ece8:	699a      	ldr	r2, [r3, #24]
 800ecea:	002b      	movs	r3, r5
 800ecec:	4903      	ldr	r1, [pc, #12]	; (800ecfc <vTaskGetRunTimeStats+0xac>)
 800ecee:	f004 faa1 	bl	8013234 <sprintf>
 800ecf2:	e7d9      	b.n	800eca8 <vTaskGetRunTimeStats+0x58>
 800ecf4:	20001ccc 	.word	0x20001ccc
 800ecf8:	0801a4e8 	.word	0x0801a4e8
 800ecfc:	0801a4dc 	.word	0x0801a4dc

0800ed00 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed00:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <pvTaskIncrementMutexHeldCount+0x18>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d004      	beq.n	800ed12 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed08:	4b03      	ldr	r3, [pc, #12]	; (800ed18 <pvTaskIncrementMutexHeldCount+0x18>)
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ed0e:	3301      	adds	r3, #1
 800ed10:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed12:	4b01      	ldr	r3, [pc, #4]	; (800ed18 <pvTaskIncrementMutexHeldCount+0x18>)
 800ed14:	6818      	ldr	r0, [r3, #0]
	}
 800ed16:	4770      	bx	lr
 800ed18:	20001c30 	.word	0x20001c30

0800ed1c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	0005      	movs	r5, r0
 800ed20:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ed22:	f000 faed 	bl	800f300 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ed26:	4b20      	ldr	r3, [pc, #128]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d106      	bne.n	800ed3e <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ed30:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	235c      	movs	r3, #92	; 0x5c
 800ed36:	2101      	movs	r1, #1
 800ed38:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed3a:	2c00      	cmp	r4, #0
 800ed3c:	d118      	bne.n	800ed70 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed3e:	f000 faeb 	bl	800f318 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed42:	f000 fadd 	bl	800f300 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed46:	4b18      	ldr	r3, [pc, #96]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d006      	beq.n	800ed5e <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed50:	2d00      	cmp	r5, #0
 800ed52:	d123      	bne.n	800ed9c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ed54:	4b14      	ldr	r3, [pc, #80]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ed5e:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	235c      	movs	r3, #92	; 0x5c
 800ed64:	2100      	movs	r1, #0
 800ed66:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ed68:	f000 fad6 	bl	800f318 <vPortExitCritical>

		return ulReturn;
	}
 800ed6c:	0020      	movs	r0, r4
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed70:	4b0d      	ldr	r3, [pc, #52]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed72:	6818      	ldr	r0, [r3, #0]
 800ed74:	3004      	adds	r0, #4
 800ed76:	f7fe fe02 	bl	800d97e <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ed7a:	1c63      	adds	r3, r4, #1
 800ed7c:	d007      	beq.n	800ed8e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	; (800edac <ulTaskNotifyTake+0x90>)
 800ed80:	6818      	ldr	r0, [r3, #0]
 800ed82:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed84:	f7ff f9b0 	bl	800e0e8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ed88:	f000 faae 	bl	800f2e8 <vPortYield>
 800ed8c:	e7d7      	b.n	800ed3e <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed8e:	4b06      	ldr	r3, [pc, #24]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed90:	6819      	ldr	r1, [r3, #0]
 800ed92:	3104      	adds	r1, #4
 800ed94:	4806      	ldr	r0, [pc, #24]	; (800edb0 <ulTaskNotifyTake+0x94>)
 800ed96:	f7fe fdcf 	bl	800d938 <vListInsertEnd>
 800ed9a:	e7f5      	b.n	800ed88 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed9c:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <ulTaskNotifyTake+0x8c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2200      	movs	r2, #0
 800eda2:	659a      	str	r2, [r3, #88]	; 0x58
 800eda4:	e7db      	b.n	800ed5e <ulTaskNotifyTake+0x42>
 800eda6:	46c0      	nop			; (mov r8, r8)
 800eda8:	20001c30 	.word	0x20001c30
 800edac:	20001d50 	.word	0x20001d50
 800edb0:	20001d28 	.word	0x20001d28

0800edb4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800edb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb6:	0004      	movs	r4, r0
 800edb8:	000e      	movs	r6, r1
 800edba:	0015      	movs	r5, r2
 800edbc:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d101      	bne.n	800edc6 <xTaskGenericNotify+0x12>
 800edc2:	b672      	cpsid	i
 800edc4:	e7fe      	b.n	800edc4 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800edc6:	f000 fa9b 	bl	800f300 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800edca:	2f00      	cmp	r7, #0
 800edcc:	d001      	beq.n	800edd2 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800edce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edd0:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800edd2:	225c      	movs	r2, #92	; 0x5c
 800edd4:	5ca3      	ldrb	r3, [r4, r2]
 800edd6:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800edd8:	2102      	movs	r1, #2
 800edda:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800eddc:	2d02      	cmp	r5, #2
 800edde:	d015      	beq.n	800ee0c <xTaskGenericNotify+0x58>
 800ede0:	d907      	bls.n	800edf2 <xTaskGenericNotify+0x3e>
 800ede2:	2d03      	cmp	r5, #3
 800ede4:	d016      	beq.n	800ee14 <xTaskGenericNotify+0x60>
 800ede6:	2d04      	cmp	r5, #4
 800ede8:	d105      	bne.n	800edf6 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800edea:	2b02      	cmp	r3, #2
 800edec:	d035      	beq.n	800ee5a <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800edee:	65a6      	str	r6, [r4, #88]	; 0x58
 800edf0:	e001      	b.n	800edf6 <xTaskGenericNotify+0x42>
			switch( eAction )
 800edf2:	2d01      	cmp	r5, #1
 800edf4:	d006      	beq.n	800ee04 <xTaskGenericNotify+0x50>
 800edf6:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d00d      	beq.n	800ee18 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edfc:	f000 fa8c 	bl	800f318 <vPortExitCritical>

		return xReturn;
	}
 800ee00:	0028      	movs	r0, r5
 800ee02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800ee04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee06:	4316      	orrs	r6, r2
 800ee08:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800ee0a:	e7f4      	b.n	800edf6 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800ee0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee0e:	3201      	adds	r2, #1
 800ee10:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800ee12:	e7f0      	b.n	800edf6 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800ee14:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800ee16:	e7ee      	b.n	800edf6 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ee18:	1d25      	adds	r5, r4, #4
 800ee1a:	0028      	movs	r0, r5
 800ee1c:	f7fe fdaf 	bl	800d97e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ee20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee22:	4a0f      	ldr	r2, [pc, #60]	; (800ee60 <xTaskGenericNotify+0xac>)
 800ee24:	6812      	ldr	r2, [r2, #0]
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d901      	bls.n	800ee2e <xTaskGenericNotify+0x7a>
 800ee2a:	4a0d      	ldr	r2, [pc, #52]	; (800ee60 <xTaskGenericNotify+0xac>)
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	2014      	movs	r0, #20
 800ee30:	4358      	muls	r0, r3
 800ee32:	4b0c      	ldr	r3, [pc, #48]	; (800ee64 <xTaskGenericNotify+0xb0>)
 800ee34:	18c0      	adds	r0, r0, r3
 800ee36:	0029      	movs	r1, r5
 800ee38:	f7fe fd7e 	bl	800d938 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ee3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <xTaskGenericNotify+0x92>
 800ee42:	b672      	cpsid	i
 800ee44:	e7fe      	b.n	800ee44 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee46:	4b08      	ldr	r3, [pc, #32]	; (800ee68 <xTaskGenericNotify+0xb4>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4e:	2501      	movs	r5, #1
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d9d3      	bls.n	800edfc <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800ee54:	f000 fa48 	bl	800f2e8 <vPortYield>
 800ee58:	e7d0      	b.n	800edfc <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800ee5a:	2500      	movs	r5, #0
 800ee5c:	e7ce      	b.n	800edfc <xTaskGenericNotify+0x48>
 800ee5e:	46c0      	nop			; (mov r8, r8)
 800ee60:	20001ce0 	.word	0x20001ce0
 800ee64:	20001c3c 	.word	0x20001c3c
 800ee68:	20001c30 	.word	0x20001c30

0800ee6c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee6c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee6e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee70:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ee72:	4291      	cmp	r1, r2
 800ee74:	d80b      	bhi.n	800ee8e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee76:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee78:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee7a:	6983      	ldr	r3, [r0, #24]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d211      	bcs.n	800eea4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee80:	1d01      	adds	r1, r0, #4
 800ee82:	4b09      	ldr	r3, [pc, #36]	; (800eea8 <prvInsertTimerInActiveList+0x3c>)
 800ee84:	6818      	ldr	r0, [r3, #0]
 800ee86:	f7fe fd63 	bl	800d950 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ee8a:	2400      	movs	r4, #0
 800ee8c:	e00a      	b.n	800eea4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d202      	bcs.n	800ee98 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee92:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee94:	4299      	cmp	r1, r3
 800ee96:	d205      	bcs.n	800eea4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee98:	1d01      	adds	r1, r0, #4
 800ee9a:	4b04      	ldr	r3, [pc, #16]	; (800eeac <prvInsertTimerInActiveList+0x40>)
 800ee9c:	6818      	ldr	r0, [r3, #0]
 800ee9e:	f7fe fd57 	bl	800d950 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800eea2:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800eea4:	0020      	movs	r0, r4
 800eea6:	bd10      	pop	{r4, pc}
 800eea8:	20001d5c 	.word	0x20001d5c
 800eeac:	20001d58 	.word	0x20001d58

0800eeb0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eeb0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eeb2:	f000 fa25 	bl	800f300 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eeb6:	4b11      	ldr	r3, [pc, #68]	; (800eefc <prvCheckForValidListAndQueue+0x4c>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d002      	beq.n	800eec4 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eebe:	f000 fa2b 	bl	800f318 <vPortExitCritical>
}
 800eec2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800eec4:	4d0e      	ldr	r5, [pc, #56]	; (800ef00 <prvCheckForValidListAndQueue+0x50>)
 800eec6:	0028      	movs	r0, r5
 800eec8:	f7fe fd28 	bl	800d91c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eecc:	4c0d      	ldr	r4, [pc, #52]	; (800ef04 <prvCheckForValidListAndQueue+0x54>)
 800eece:	0020      	movs	r0, r4
 800eed0:	f7fe fd24 	bl	800d91c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eed4:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <prvCheckForValidListAndQueue+0x58>)
 800eed6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eed8:	4b0c      	ldr	r3, [pc, #48]	; (800ef0c <prvCheckForValidListAndQueue+0x5c>)
 800eeda:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800eedc:	2200      	movs	r2, #0
 800eede:	2110      	movs	r1, #16
 800eee0:	2004      	movs	r0, #4
 800eee2:	f7fe fe26 	bl	800db32 <xQueueGenericCreate>
 800eee6:	4b05      	ldr	r3, [pc, #20]	; (800eefc <prvCheckForValidListAndQueue+0x4c>)
 800eee8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d101      	bne.n	800eef2 <prvCheckForValidListAndQueue+0x42>
 800eeee:	b672      	cpsid	i
 800eef0:	e7fe      	b.n	800eef0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eef2:	4907      	ldr	r1, [pc, #28]	; (800ef10 <prvCheckForValidListAndQueue+0x60>)
 800eef4:	f7ff f856 	bl	800dfa4 <vQueueAddToRegistry>
 800eef8:	e7e1      	b.n	800eebe <prvCheckForValidListAndQueue+0xe>
 800eefa:	46c0      	nop			; (mov r8, r8)
 800eefc:	20001d8c 	.word	0x20001d8c
 800ef00:	20001d60 	.word	0x20001d60
 800ef04:	20001d74 	.word	0x20001d74
 800ef08:	20001d58 	.word	0x20001d58
 800ef0c:	20001d5c 	.word	0x20001d5c
 800ef10:	0801a534 	.word	0x0801a534

0800ef14 <xTimerCreateTimerTask>:
{
 800ef14:	b500      	push	{lr}
 800ef16:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800ef18:	f7ff ffca 	bl	800eeb0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ef1c:	4b0a      	ldr	r3, [pc, #40]	; (800ef48 <xTimerCreateTimerTask+0x34>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00d      	beq.n	800ef40 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800ef24:	2300      	movs	r3, #0
 800ef26:	9303      	str	r3, [sp, #12]
 800ef28:	9302      	str	r3, [sp, #8]
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	3303      	adds	r3, #3
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	2300      	movs	r3, #0
 800ef32:	22a0      	movs	r2, #160	; 0xa0
 800ef34:	4905      	ldr	r1, [pc, #20]	; (800ef4c <xTimerCreateTimerTask+0x38>)
 800ef36:	4806      	ldr	r0, [pc, #24]	; (800ef50 <xTimerCreateTimerTask+0x3c>)
 800ef38:	f7ff f918 	bl	800e16c <xTaskGenericCreate>
	configASSERT( xReturn );
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d101      	bne.n	800ef44 <xTimerCreateTimerTask+0x30>
 800ef40:	b672      	cpsid	i
 800ef42:	e7fe      	b.n	800ef42 <xTimerCreateTimerTask+0x2e>
}
 800ef44:	b005      	add	sp, #20
 800ef46:	bd00      	pop	{pc}
 800ef48:	20001d8c 	.word	0x20001d8c
 800ef4c:	0801a53c 	.word	0x0801a53c
 800ef50:	0800f09d 	.word	0x0800f09d

0800ef54 <xTimerCreate>:
{
 800ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef56:	46c6      	mov	lr, r8
 800ef58:	b500      	push	{lr}
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	000d      	movs	r5, r1
 800ef5e:	0017      	movs	r7, r2
 800ef60:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800ef62:	2900      	cmp	r1, #0
 800ef64:	d014      	beq.n	800ef90 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ef66:	202c      	movs	r0, #44	; 0x2c
 800ef68:	f000 fa4c 	bl	800f404 <pvPortMalloc>
 800ef6c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ef6e:	d00b      	beq.n	800ef88 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ef70:	f7ff ff9e 	bl	800eeb0 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ef74:	4643      	mov	r3, r8
 800ef76:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef78:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ef7a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ef7c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef7e:	9b06      	ldr	r3, [sp, #24]
 800ef80:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef82:	1d20      	adds	r0, r4, #4
 800ef84:	f7fe fcd5 	bl	800d932 <vListInitialiseItem>
}
 800ef88:	0020      	movs	r0, r4
 800ef8a:	bc04      	pop	{r2}
 800ef8c:	4690      	mov	r8, r2
 800ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef90:	b672      	cpsid	i
 800ef92:	e7fe      	b.n	800ef92 <xTimerCreate+0x3e>

0800ef94 <xTimerGenericCommand>:
{
 800ef94:	b530      	push	{r4, r5, lr}
 800ef96:	b085      	sub	sp, #20
 800ef98:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800ef9a:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <xTimerGenericCommand+0x54>)
 800ef9c:	681c      	ldr	r4, [r3, #0]
 800ef9e:	2c00      	cmp	r4, #0
 800efa0:	d020      	beq.n	800efe4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800efa2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efa4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800efa6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efa8:	2905      	cmp	r1, #5
 800efaa:	dc13      	bgt.n	800efd4 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efac:	f7ff fd68 	bl	800ea80 <xTaskGetSchedulerState>
 800efb0:	2802      	cmp	r0, #2
 800efb2:	d007      	beq.n	800efc4 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efb4:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <xTimerGenericCommand+0x54>)
 800efb6:	6818      	ldr	r0, [r3, #0]
 800efb8:	2300      	movs	r3, #0
 800efba:	2200      	movs	r2, #0
 800efbc:	4669      	mov	r1, sp
 800efbe:	f7fe fdf3 	bl	800dba8 <xQueueGenericSend>
 800efc2:	e00d      	b.n	800efe0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efc4:	4b08      	ldr	r3, [pc, #32]	; (800efe8 <xTimerGenericCommand+0x54>)
 800efc6:	6818      	ldr	r0, [r3, #0]
 800efc8:	2300      	movs	r3, #0
 800efca:	9a08      	ldr	r2, [sp, #32]
 800efcc:	4669      	mov	r1, sp
 800efce:	f7fe fdeb 	bl	800dba8 <xQueueGenericSend>
 800efd2:	e005      	b.n	800efe0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efd4:	2300      	movs	r3, #0
 800efd6:	002a      	movs	r2, r5
 800efd8:	4669      	mov	r1, sp
 800efda:	0020      	movs	r0, r4
 800efdc:	f7fe fe7b 	bl	800dcd6 <xQueueGenericSendFromISR>
}
 800efe0:	b005      	add	sp, #20
 800efe2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800efe4:	2000      	movs	r0, #0
	return xReturn;
 800efe6:	e7fb      	b.n	800efe0 <xTimerGenericCommand+0x4c>
 800efe8:	20001d8c 	.word	0x20001d8c

0800efec <prvSampleTimeNow>:
{
 800efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efee:	46d6      	mov	lr, sl
 800eff0:	464f      	mov	r7, r9
 800eff2:	4646      	mov	r6, r8
 800eff4:	b5c0      	push	{r6, r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800effa:	f7ff fa43 	bl	800e484 <xTaskGetTickCount>
 800effe:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f000:	4b23      	ldr	r3, [pc, #140]	; (800f090 <prvSampleTimeNow+0xa4>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4283      	cmp	r3, r0
 800f006:	d80b      	bhi.n	800f020 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f008:	2300      	movs	r3, #0
 800f00a:	4642      	mov	r2, r8
 800f00c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f00e:	4b20      	ldr	r3, [pc, #128]	; (800f090 <prvSampleTimeNow+0xa4>)
 800f010:	601f      	str	r7, [r3, #0]
}
 800f012:	0038      	movs	r0, r7
 800f014:	b004      	add	sp, #16
 800f016:	bc1c      	pop	{r2, r3, r4}
 800f018:	4690      	mov	r8, r2
 800f01a:	4699      	mov	r9, r3
 800f01c:	46a2      	mov	sl, r4
 800f01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f020:	4e1c      	ldr	r6, [pc, #112]	; (800f094 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f022:	2300      	movs	r3, #0
 800f024:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f026:	6833      	ldr	r3, [r6, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	2a00      	cmp	r2, #0
 800f02c:	d026      	beq.n	800f07c <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f034:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f036:	1d25      	adds	r5, r4, #4
 800f038:	0028      	movs	r0, r5
 800f03a:	f7fe fca0 	bl	800d97e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f03e:	0020      	movs	r0, r4
 800f040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f042:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f044:	69e3      	ldr	r3, [r4, #28]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d1ed      	bne.n	800f026 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f04a:	69a3      	ldr	r3, [r4, #24]
 800f04c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f04e:	459a      	cmp	sl, r3
 800f050:	d209      	bcs.n	800f066 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f052:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f054:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f056:	4b0f      	ldr	r3, [pc, #60]	; (800f094 <prvSampleTimeNow+0xa8>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	9303      	str	r3, [sp, #12]
 800f05c:	0029      	movs	r1, r5
 800f05e:	0018      	movs	r0, r3
 800f060:	f7fe fc76 	bl	800d950 <vListInsert>
 800f064:	e7df      	b.n	800f026 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f066:	464b      	mov	r3, r9
 800f068:	9300      	str	r3, [sp, #0]
 800f06a:	4652      	mov	r2, sl
 800f06c:	4649      	mov	r1, r9
 800f06e:	0020      	movs	r0, r4
 800f070:	f7ff ff90 	bl	800ef94 <xTimerGenericCommand>
				configASSERT( xResult );
 800f074:	2800      	cmp	r0, #0
 800f076:	d1d6      	bne.n	800f026 <prvSampleTimeNow+0x3a>
 800f078:	b672      	cpsid	i
 800f07a:	e7fe      	b.n	800f07a <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f07c:	4a06      	ldr	r2, [pc, #24]	; (800f098 <prvSampleTimeNow+0xac>)
 800f07e:	4905      	ldr	r1, [pc, #20]	; (800f094 <prvSampleTimeNow+0xa8>)
 800f080:	6810      	ldr	r0, [r2, #0]
 800f082:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f084:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f086:	2301      	movs	r3, #1
 800f088:	4642      	mov	r2, r8
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	e7bf      	b.n	800f00e <prvSampleTimeNow+0x22>
 800f08e:	46c0      	nop			; (mov r8, r8)
 800f090:	20001d88 	.word	0x20001d88
 800f094:	20001d58 	.word	0x20001d58
 800f098:	20001d5c 	.word	0x20001d5c

0800f09c <prvTimerTask>:
{
 800f09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f09e:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f0a0:	4e57      	ldr	r6, [pc, #348]	; (800f200 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0a2:	4b58      	ldr	r3, [pc, #352]	; (800f204 <prvTimerTask+0x168>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	2a00      	cmp	r2, #0
 800f0aa:	d100      	bne.n	800f0ae <prvTimerTask+0x12>
 800f0ac:	e09c      	b.n	800f1e8 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f0b2:	f7ff f9df 	bl	800e474 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0b6:	a808      	add	r0, sp, #32
 800f0b8:	f7ff ff98 	bl	800efec <prvSampleTimeNow>
 800f0bc:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f0be:	9b08      	ldr	r3, [sp, #32]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d000      	beq.n	800f0c6 <prvTimerTask+0x2a>
 800f0c4:	e099      	b.n	800f1fa <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0c6:	42a0      	cmp	r0, r4
 800f0c8:	d233      	bcs.n	800f132 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f0ca:	1b61      	subs	r1, r4, r5
 800f0cc:	4b4e      	ldr	r3, [pc, #312]	; (800f208 <prvTimerTask+0x16c>)
 800f0ce:	6818      	ldr	r0, [r3, #0]
 800f0d0:	f7fe ff80 	bl	800dfd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0d4:	f7ff fa6e 	bl	800e5b4 <xTaskResumeAll>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d050      	beq.n	800f17e <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f0dc:	4c4a      	ldr	r4, [pc, #296]	; (800f208 <prvTimerTask+0x16c>)
 800f0de:	2300      	movs	r3, #0
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	a908      	add	r1, sp, #32
 800f0e4:	6820      	ldr	r0, [r4, #0]
 800f0e6:	f7fe fe78 	bl	800ddda <xQueueGenericReceive>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d0d9      	beq.n	800f0a2 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f0ee:	9b08      	ldr	r3, [sp, #32]
 800f0f0:	9303      	str	r3, [sp, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	da0c      	bge.n	800f110 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f8:	9303      	str	r3, [sp, #12]
 800f0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0fc:	9304      	str	r3, [sp, #16]
 800f0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f100:	9305      	str	r3, [sp, #20]
 800f102:	9903      	ldr	r1, [sp, #12]
 800f104:	9804      	ldr	r0, [sp, #16]
 800f106:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f108:	9b08      	ldr	r3, [sp, #32]
 800f10a:	9303      	str	r3, [sp, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dbe6      	blt.n	800f0de <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f110:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f112:	696b      	ldr	r3, [r5, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f118:	1d28      	adds	r0, r5, #4
 800f11a:	f7fe fc30 	bl	800d97e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f11e:	a807      	add	r0, sp, #28
 800f120:	f7ff ff64 	bl	800efec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f124:	9b08      	ldr	r3, [sp, #32]
 800f126:	9303      	str	r3, [sp, #12]
 800f128:	2b09      	cmp	r3, #9
 800f12a:	d8d8      	bhi.n	800f0de <prvTimerTask+0x42>
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	58f3      	ldr	r3, [r6, r3]
 800f130:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f132:	f7ff fa3f 	bl	800e5b4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f136:	4b33      	ldr	r3, [pc, #204]	; (800f204 <prvTimerTask+0x168>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f13e:	1d38      	adds	r0, r7, #4
 800f140:	f7fe fc1d 	bl	800d97e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d003      	beq.n	800f152 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	0038      	movs	r0, r7
 800f14e:	4798      	blx	r3
 800f150:	e7c4      	b.n	800f0dc <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	18e1      	adds	r1, r4, r3
 800f156:	0023      	movs	r3, r4
 800f158:	002a      	movs	r2, r5
 800f15a:	0038      	movs	r0, r7
 800f15c:	f7ff fe86 	bl	800ee6c <prvInsertTimerInActiveList>
 800f160:	2801      	cmp	r0, #1
 800f162:	d1f2      	bne.n	800f14a <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f164:	2100      	movs	r1, #0
 800f166:	9100      	str	r1, [sp, #0]
 800f168:	000b      	movs	r3, r1
 800f16a:	0022      	movs	r2, r4
 800f16c:	0038      	movs	r0, r7
 800f16e:	f7ff ff11 	bl	800ef94 <xTimerGenericCommand>
			configASSERT( xResult );
 800f172:	2800      	cmp	r0, #0
 800f174:	d1e9      	bne.n	800f14a <prvTimerTask+0xae>
 800f176:	b672      	cpsid	i
 800f178:	e7fe      	b.n	800f178 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f17a:	2400      	movs	r4, #0
 800f17c:	e7a5      	b.n	800f0ca <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f17e:	f000 f8b3 	bl	800f2e8 <vPortYield>
 800f182:	e7ab      	b.n	800f0dc <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f186:	69aa      	ldr	r2, [r5, #24]
 800f188:	4694      	mov	ip, r2
 800f18a:	4463      	add	r3, ip
 800f18c:	0019      	movs	r1, r3
 800f18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f190:	0002      	movs	r2, r0
 800f192:	0028      	movs	r0, r5
 800f194:	f7ff fe6a 	bl	800ee6c <prvInsertTimerInActiveList>
 800f198:	2801      	cmp	r0, #1
 800f19a:	d1a0      	bne.n	800f0de <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f19c:	0028      	movs	r0, r5
 800f19e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1a0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f1a2:	69eb      	ldr	r3, [r5, #28]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d19a      	bne.n	800f0de <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1aa:	69a9      	ldr	r1, [r5, #24]
 800f1ac:	468c      	mov	ip, r1
 800f1ae:	4463      	add	r3, ip
 800f1b0:	001a      	movs	r2, r3
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	0028      	movs	r0, r5
 800f1ba:	f7ff feeb 	bl	800ef94 <xTimerGenericCommand>
							configASSERT( xResult );
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d18d      	bne.n	800f0de <prvTimerTask+0x42>
 800f1c2:	b672      	cpsid	i
 800f1c4:	e7fe      	b.n	800f1c4 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1c8:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d006      	beq.n	800f1dc <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1ce:	1841      	adds	r1, r0, r1
 800f1d0:	0003      	movs	r3, r0
 800f1d2:	0002      	movs	r2, r0
 800f1d4:	0028      	movs	r0, r5
 800f1d6:	f7ff fe49 	bl	800ee6c <prvInsertTimerInActiveList>
 800f1da:	e780      	b.n	800f0de <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1dc:	b672      	cpsid	i
 800f1de:	e7fe      	b.n	800f1de <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f1e0:	0028      	movs	r0, r5
 800f1e2:	f000 f9a5 	bl	800f530 <vPortFree>
 800f1e6:	e77a      	b.n	800f0de <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f1e8:	f7ff f944 	bl	800e474 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ec:	a808      	add	r0, sp, #32
 800f1ee:	f7ff fefd 	bl	800efec <prvSampleTimeNow>
 800f1f2:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f1f4:	9b08      	ldr	r3, [sp, #32]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d0bf      	beq.n	800f17a <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f1fa:	f7ff f9db 	bl	800e5b4 <xTaskResumeAll>
 800f1fe:	e76d      	b.n	800f0dc <prvTimerTask+0x40>
 800f200:	0801a50c 	.word	0x0801a50c
 800f204:	20001d58 	.word	0x20001d58
 800f208:	20001d8c 	.word	0x20001d8c

0800f20c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f20c:	b510      	push	{r4, lr}
 800f20e:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f210:	f000 f876 	bl	800f300 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f214:	6964      	ldr	r4, [r4, #20]
 800f216:	1e63      	subs	r3, r4, #1
 800f218:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f21a:	f000 f87d 	bl	800f318 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f21e:	0020      	movs	r0, r4
 800f220:	bd10      	pop	{r4, pc}

0800f222 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f222:	b510      	push	{r4, lr}
 800f224:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f226:	d101      	bne.n	800f22c <pvTimerGetTimerID+0xa>
 800f228:	b672      	cpsid	i
 800f22a:	e7fe      	b.n	800f22a <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f22c:	f000 f868 	bl	800f300 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f230:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f232:	f000 f871 	bl	800f318 <vPortExitCritical>

	return pvReturn;
}
 800f236:	0020      	movs	r0, r4
 800f238:	bd10      	pop	{r4, pc}
	...

0800f23c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f23c:	4b03      	ldr	r3, [pc, #12]	; (800f24c <prvTaskExitError+0x10>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	3301      	adds	r3, #1
 800f242:	d001      	beq.n	800f248 <prvTaskExitError+0xc>
 800f244:	b672      	cpsid	i
 800f246:	e7fe      	b.n	800f246 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f248:	b672      	cpsid	i
 800f24a:	e7fe      	b.n	800f24a <prvTaskExitError+0xe>
 800f24c:	200000a8 	.word	0x200000a8

0800f250 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f250:	4a06      	ldr	r2, [pc, #24]	; (800f26c <pxCurrentTCBConst2>)
 800f252:	6813      	ldr	r3, [r2, #0]
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	3020      	adds	r0, #32
 800f258:	f380 8809 	msr	PSP, r0
 800f25c:	2002      	movs	r0, #2
 800f25e:	f380 8814 	msr	CONTROL, r0
 800f262:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f264:	46ae      	mov	lr, r5
 800f266:	b662      	cpsie	i
 800f268:	bd00      	pop	{pc}
 800f26a:	46c0      	nop			; (mov r8, r8)

0800f26c <pxCurrentTCBConst2>:
 800f26c:	20001c30 	.word	0x20001c30

0800f270 <pxPortInitialiseStack>:
{
 800f270:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f272:	1f03      	subs	r3, r0, #4
 800f274:	2480      	movs	r4, #128	; 0x80
 800f276:	0464      	lsls	r4, r4, #17
 800f278:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f27a:	3b04      	subs	r3, #4
 800f27c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f27e:	3b04      	subs	r3, #4
 800f280:	4902      	ldr	r1, [pc, #8]	; (800f28c <pxPortInitialiseStack+0x1c>)
 800f282:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f284:	3b14      	subs	r3, #20
 800f286:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f288:	3840      	subs	r0, #64	; 0x40
}
 800f28a:	bd10      	pop	{r4, pc}
 800f28c:	0800f23d 	.word	0x0800f23d

0800f290 <SVC_Handler>:
}
 800f290:	4770      	bx	lr
	...

0800f294 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f294:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f296:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <xPortStartScheduler+0x40>)
 800f298:	6819      	ldr	r1, [r3, #0]
 800f29a:	22ff      	movs	r2, #255	; 0xff
 800f29c:	0412      	lsls	r2, r2, #16
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f2a2:	6819      	ldr	r1, [r3, #0]
 800f2a4:	22ff      	movs	r2, #255	; 0xff
 800f2a6:	0612      	lsls	r2, r2, #24
 800f2a8:	430a      	orrs	r2, r1
 800f2aa:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <xPortStartScheduler+0x44>)
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	21fa      	movs	r1, #250	; 0xfa
 800f2b2:	0089      	lsls	r1, r1, #2
 800f2b4:	f7f0 ff4c 	bl	8000150 <__udivsi3>
 800f2b8:	3801      	subs	r0, #1
 800f2ba:	4b08      	ldr	r3, [pc, #32]	; (800f2dc <xPortStartScheduler+0x48>)
 800f2bc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f2be:	4b08      	ldr	r3, [pc, #32]	; (800f2e0 <xPortStartScheduler+0x4c>)
 800f2c0:	2207      	movs	r2, #7
 800f2c2:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f2c4:	4b07      	ldr	r3, [pc, #28]	; (800f2e4 <xPortStartScheduler+0x50>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f2ca:	f7ff ffc1 	bl	800f250 <vPortStartFirstTask>
	prvTaskExitError();
 800f2ce:	f7ff ffb5 	bl	800f23c <prvTaskExitError>
 800f2d2:	46c0      	nop			; (mov r8, r8)
 800f2d4:	e000ed20 	.word	0xe000ed20
 800f2d8:	20000094 	.word	0x20000094
 800f2dc:	e000e014 	.word	0xe000e014
 800f2e0:	e000e010 	.word	0xe000e010
 800f2e4:	200000a8 	.word	0x200000a8

0800f2e8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f2e8:	4b04      	ldr	r3, [pc, #16]	; (800f2fc <vPortYield+0x14>)
 800f2ea:	2280      	movs	r2, #128	; 0x80
 800f2ec:	0552      	lsls	r2, r2, #21
 800f2ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f2f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f2f4:	f3bf 8f6f 	isb	sy
}
 800f2f8:	4770      	bx	lr
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	e000ed04 	.word	0xe000ed04

0800f300 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f300:	b672      	cpsid	i
    uxCriticalNesting++;
 800f302:	4a04      	ldr	r2, [pc, #16]	; (800f314 <vPortEnterCritical+0x14>)
 800f304:	6813      	ldr	r3, [r2, #0]
 800f306:	3301      	adds	r3, #1
 800f308:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f30a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f30e:	f3bf 8f6f 	isb	sy
}
 800f312:	4770      	bx	lr
 800f314:	200000a8 	.word	0x200000a8

0800f318 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f318:	4b06      	ldr	r3, [pc, #24]	; (800f334 <vPortExitCritical+0x1c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d101      	bne.n	800f324 <vPortExitCritical+0xc>
 800f320:	b672      	cpsid	i
 800f322:	e7fe      	b.n	800f322 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f324:	3b01      	subs	r3, #1
 800f326:	4a03      	ldr	r2, [pc, #12]	; (800f334 <vPortExitCritical+0x1c>)
 800f328:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d100      	bne.n	800f330 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f32e:	b662      	cpsie	i
}
 800f330:	4770      	bx	lr
 800f332:	46c0      	nop			; (mov r8, r8)
 800f334:	200000a8 	.word	0x200000a8

0800f338 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f338:	f3ef 8010 	mrs	r0, PRIMASK
 800f33c:	b672      	cpsid	i
 800f33e:	4770      	bx	lr
}
 800f340:	2000      	movs	r0, #0

0800f342 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f342:	f380 8810 	msr	PRIMASK, r0
 800f346:	4770      	bx	lr

0800f348 <PendSV_Handler>:
	__asm volatile
 800f348:	f3ef 8009 	mrs	r0, PSP
 800f34c:	4b0e      	ldr	r3, [pc, #56]	; (800f388 <pxCurrentTCBConst>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	3820      	subs	r0, #32
 800f352:	6010      	str	r0, [r2, #0]
 800f354:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f356:	4644      	mov	r4, r8
 800f358:	464d      	mov	r5, r9
 800f35a:	4656      	mov	r6, sl
 800f35c:	465f      	mov	r7, fp
 800f35e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f360:	b508      	push	{r3, lr}
 800f362:	b672      	cpsid	i
 800f364:	f7ff fa42 	bl	800e7ec <vTaskSwitchContext>
 800f368:	b662      	cpsie	i
 800f36a:	bc0c      	pop	{r2, r3}
 800f36c:	6811      	ldr	r1, [r2, #0]
 800f36e:	6808      	ldr	r0, [r1, #0]
 800f370:	3010      	adds	r0, #16
 800f372:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f374:	46a0      	mov	r8, r4
 800f376:	46a9      	mov	r9, r5
 800f378:	46b2      	mov	sl, r6
 800f37a:	46bb      	mov	fp, r7
 800f37c:	f380 8809 	msr	PSP, r0
 800f380:	3820      	subs	r0, #32
 800f382:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f384:	4718      	bx	r3
 800f386:	46c0      	nop			; (mov r8, r8)

0800f388 <pxCurrentTCBConst>:
 800f388:	20001c30 	.word	0x20001c30

0800f38c <xPortSysTickHandler>:
{
 800f38c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f38e:	f7ff ffd3 	bl	800f338 <ulSetInterruptMaskFromISR>
 800f392:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f394:	f7ff f882 	bl	800e49c <xTaskIncrementTick>
 800f398:	2800      	cmp	r0, #0
 800f39a:	d003      	beq.n	800f3a4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f39c:	4b03      	ldr	r3, [pc, #12]	; (800f3ac <xPortSysTickHandler+0x20>)
 800f39e:	2280      	movs	r2, #128	; 0x80
 800f3a0:	0552      	lsls	r2, r2, #21
 800f3a2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f3a4:	0020      	movs	r0, r4
 800f3a6:	f7ff ffcc 	bl	800f342 <vClearInterruptMaskFromISR>
}
 800f3aa:	bd10      	pop	{r4, pc}
 800f3ac:	e000ed04 	.word	0xe000ed04

0800f3b0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3b0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3b2:	4b12      	ldr	r3, [pc, #72]	; (800f3fc <prvInsertBlockIntoFreeList+0x4c>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	4282      	cmp	r2, r0
 800f3b8:	d319      	bcc.n	800f3ee <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3ba:	685c      	ldr	r4, [r3, #4]
 800f3bc:	1919      	adds	r1, r3, r4
 800f3be:	4288      	cmp	r0, r1
 800f3c0:	d103      	bne.n	800f3ca <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3c2:	6841      	ldr	r1, [r0, #4]
 800f3c4:	1909      	adds	r1, r1, r4
 800f3c6:	6059      	str	r1, [r3, #4]
 800f3c8:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ca:	6841      	ldr	r1, [r0, #4]
 800f3cc:	1844      	adds	r4, r0, r1
 800f3ce:	42a2      	cmp	r2, r4
 800f3d0:	d111      	bne.n	800f3f6 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3d2:	4c0b      	ldr	r4, [pc, #44]	; (800f400 <prvInsertBlockIntoFreeList+0x50>)
 800f3d4:	6824      	ldr	r4, [r4, #0]
 800f3d6:	42a2      	cmp	r2, r4
 800f3d8:	d00b      	beq.n	800f3f2 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3da:	6852      	ldr	r2, [r2, #4]
 800f3dc:	1852      	adds	r2, r2, r1
 800f3de:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	6812      	ldr	r2, [r2, #0]
 800f3e4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3e6:	4298      	cmp	r0, r3
 800f3e8:	d000      	beq.n	800f3ec <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3ea:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3ec:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3ee:	0013      	movs	r3, r2
 800f3f0:	e7e0      	b.n	800f3b4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3f2:	6002      	str	r2, [r0, #0]
 800f3f4:	e7f7      	b.n	800f3e6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3f6:	6002      	str	r2, [r0, #0]
 800f3f8:	e7f5      	b.n	800f3e6 <prvInsertBlockIntoFreeList+0x36>
 800f3fa:	46c0      	nop			; (mov r8, r8)
 800f3fc:	200067d8 	.word	0x200067d8
 800f400:	20001d90 	.word	0x20001d90

0800f404 <pvPortMalloc>:
{
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f408:	f7ff f834 	bl	800e474 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f40c:	4b41      	ldr	r3, [pc, #260]	; (800f514 <pvPortMalloc+0x110>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00a      	beq.n	800f42a <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f414:	4b40      	ldr	r3, [pc, #256]	; (800f518 <pvPortMalloc+0x114>)
 800f416:	681f      	ldr	r7, [r3, #0]
 800f418:	423c      	tst	r4, r7
 800f41a:	d02a      	beq.n	800f472 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800f41c:	f7ff f8ca 	bl	800e5b4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f420:	f7fd fc04 	bl	800cc2c <vApplicationMallocFailedHook>
 800f424:	2500      	movs	r5, #0
}
 800f426:	0028      	movs	r0, r5
 800f428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800f42a:	4a3c      	ldr	r2, [pc, #240]	; (800f51c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f42c:	0753      	lsls	r3, r2, #29
 800f42e:	d01e      	beq.n	800f46e <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f430:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f432:	2307      	movs	r3, #7
 800f434:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f436:	4b3a      	ldr	r3, [pc, #232]	; (800f520 <pvPortMalloc+0x11c>)
 800f438:	18d3      	adds	r3, r2, r3
 800f43a:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f43c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f43e:	4839      	ldr	r0, [pc, #228]	; (800f524 <pvPortMalloc+0x120>)
 800f440:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f442:	2100      	movs	r1, #0
 800f444:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f446:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f448:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f44a:	2007      	movs	r0, #7
 800f44c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f44e:	4831      	ldr	r0, [pc, #196]	; (800f514 <pvPortMalloc+0x110>)
 800f450:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f452:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f454:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f456:	1a99      	subs	r1, r3, r2
 800f458:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f45a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f45c:	4b32      	ldr	r3, [pc, #200]	; (800f528 <pvPortMalloc+0x124>)
 800f45e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f460:	4b32      	ldr	r3, [pc, #200]	; (800f52c <pvPortMalloc+0x128>)
 800f462:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f464:	4b2c      	ldr	r3, [pc, #176]	; (800f518 <pvPortMalloc+0x114>)
 800f466:	2280      	movs	r2, #128	; 0x80
 800f468:	0612      	lsls	r2, r2, #24
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	e7d2      	b.n	800f414 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f46e:	4b2c      	ldr	r3, [pc, #176]	; (800f520 <pvPortMalloc+0x11c>)
 800f470:	e7e5      	b.n	800f43e <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800f472:	2c00      	cmp	r4, #0
 800f474:	d008      	beq.n	800f488 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800f476:	0023      	movs	r3, r4
 800f478:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f47a:	075a      	lsls	r2, r3, #29
 800f47c:	d002      	beq.n	800f484 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f47e:	2207      	movs	r2, #7
 800f480:	4393      	bics	r3, r2
 800f482:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f488:	f7ff f894 	bl	800e5b4 <xTaskResumeAll>
 800f48c:	e7c8      	b.n	800f420 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f48e:	4a27      	ldr	r2, [pc, #156]	; (800f52c <pvPortMalloc+0x128>)
 800f490:	6816      	ldr	r6, [r2, #0]
 800f492:	429e      	cmp	r6, r3
 800f494:	d302      	bcc.n	800f49c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f496:	4a23      	ldr	r2, [pc, #140]	; (800f524 <pvPortMalloc+0x120>)
 800f498:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f49a:	e004      	b.n	800f4a6 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800f49c:	f7ff f88a 	bl	800e5b4 <xTaskResumeAll>
 800f4a0:	e7be      	b.n	800f420 <pvPortMalloc+0x1c>
 800f4a2:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4a4:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4a6:	6861      	ldr	r1, [r4, #4]
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	d202      	bcs.n	800f4b2 <pvPortMalloc+0xae>
 800f4ac:	6821      	ldr	r1, [r4, #0]
 800f4ae:	2900      	cmp	r1, #0
 800f4b0:	d1f7      	bne.n	800f4a2 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800f4b2:	4918      	ldr	r1, [pc, #96]	; (800f514 <pvPortMalloc+0x110>)
 800f4b4:	6809      	ldr	r1, [r1, #0]
 800f4b6:	42a1      	cmp	r1, r4
 800f4b8:	d00b      	beq.n	800f4d2 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4ba:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4bc:	6821      	ldr	r1, [r4, #0]
 800f4be:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4c0:	6862      	ldr	r2, [r4, #4]
 800f4c2:	1ad2      	subs	r2, r2, r3
 800f4c4:	2a10      	cmp	r2, #16
 800f4c6:	d90b      	bls.n	800f4e0 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4c8:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4ca:	0741      	lsls	r1, r0, #29
 800f4cc:	d004      	beq.n	800f4d8 <pvPortMalloc+0xd4>
 800f4ce:	b672      	cpsid	i
 800f4d0:	e7fe      	b.n	800f4d0 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800f4d2:	f7ff f86f 	bl	800e5b4 <xTaskResumeAll>
 800f4d6:	e7a3      	b.n	800f420 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4d8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4da:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f4dc:	f7ff ff68 	bl	800f3b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4e0:	6862      	ldr	r2, [r4, #4]
 800f4e2:	1ab6      	subs	r6, r6, r2
 800f4e4:	4911      	ldr	r1, [pc, #68]	; (800f52c <pvPortMalloc+0x128>)
 800f4e6:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4e8:	490f      	ldr	r1, [pc, #60]	; (800f528 <pvPortMalloc+0x124>)
 800f4ea:	6809      	ldr	r1, [r1, #0]
 800f4ec:	428e      	cmp	r6, r1
 800f4ee:	d201      	bcs.n	800f4f4 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4f0:	490d      	ldr	r1, [pc, #52]	; (800f528 <pvPortMalloc+0x124>)
 800f4f2:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4f4:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4f6:	4317      	orrs	r7, r2
 800f4f8:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f4fe:	f7ff f859 	bl	800e5b4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f502:	2d00      	cmp	r5, #0
 800f504:	d100      	bne.n	800f508 <pvPortMalloc+0x104>
 800f506:	e78b      	b.n	800f420 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f508:	076b      	lsls	r3, r5, #29
 800f50a:	d100      	bne.n	800f50e <pvPortMalloc+0x10a>
 800f50c:	e78b      	b.n	800f426 <pvPortMalloc+0x22>
 800f50e:	b672      	cpsid	i
 800f510:	e7fe      	b.n	800f510 <pvPortMalloc+0x10c>
 800f512:	46c0      	nop			; (mov r8, r8)
 800f514:	20001d90 	.word	0x20001d90
 800f518:	200067cc 	.word	0x200067cc
 800f51c:	20001d94 	.word	0x20001d94
 800f520:	00004a38 	.word	0x00004a38
 800f524:	200067d8 	.word	0x200067d8
 800f528:	200067d4 	.word	0x200067d4
 800f52c:	200067d0 	.word	0x200067d0

0800f530 <vPortFree>:
{
 800f530:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f532:	2800      	cmp	r0, #0
 800f534:	d020      	beq.n	800f578 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f536:	0003      	movs	r3, r0
 800f538:	3b08      	subs	r3, #8
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4a0f      	ldr	r2, [pc, #60]	; (800f57c <vPortFree+0x4c>)
 800f53e:	6812      	ldr	r2, [r2, #0]
 800f540:	421a      	tst	r2, r3
 800f542:	d101      	bne.n	800f548 <vPortFree+0x18>
 800f544:	b672      	cpsid	i
 800f546:	e7fe      	b.n	800f546 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f548:	0001      	movs	r1, r0
 800f54a:	3908      	subs	r1, #8
 800f54c:	6809      	ldr	r1, [r1, #0]
 800f54e:	2900      	cmp	r1, #0
 800f550:	d001      	beq.n	800f556 <vPortFree+0x26>
 800f552:	b672      	cpsid	i
 800f554:	e7fe      	b.n	800f554 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f556:	3808      	subs	r0, #8
 800f558:	0004      	movs	r4, r0
 800f55a:	4393      	bics	r3, r2
 800f55c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f55e:	f7fe ff89 	bl	800e474 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f562:	4a07      	ldr	r2, [pc, #28]	; (800f580 <vPortFree+0x50>)
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	6811      	ldr	r1, [r2, #0]
 800f568:	468c      	mov	ip, r1
 800f56a:	4463      	add	r3, ip
 800f56c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f56e:	0020      	movs	r0, r4
 800f570:	f7ff ff1e 	bl	800f3b0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f574:	f7ff f81e 	bl	800e5b4 <xTaskResumeAll>
}
 800f578:	bd10      	pop	{r4, pc}
 800f57a:	46c0      	nop			; (mov r8, r8)
 800f57c:	200067cc 	.word	0x200067cc
 800f580:	200067d0 	.word	0x200067d0

0800f584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f584:	b510      	push	{r4, lr}
 800f586:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f588:	f001 fd5a 	bl	8011040 <HAL_RCC_GetHCLKFreq>
 800f58c:	21fa      	movs	r1, #250	; 0xfa
 800f58e:	0089      	lsls	r1, r1, #2
 800f590:	f7f0 fdde 	bl	8000150 <__udivsi3>
 800f594:	f000 f88a 	bl	800f6ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f598:	2001      	movs	r0, #1
 800f59a:	2200      	movs	r2, #0
 800f59c:	0021      	movs	r1, r4
 800f59e:	4240      	negs	r0, r0
 800f5a0:	f000 f83c 	bl	800f61c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	bd10      	pop	{r4, pc}

0800f5a8 <HAL_Init>:
{
 800f5a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f5aa:	4a06      	ldr	r2, [pc, #24]	; (800f5c4 <HAL_Init+0x1c>)
 800f5ac:	6813      	ldr	r3, [r2, #0]
 800f5ae:	2110      	movs	r1, #16
 800f5b0:	430b      	orrs	r3, r1
 800f5b2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	f7ff ffe5 	bl	800f584 <HAL_InitTick>
  HAL_MspInit();
 800f5ba:	f001 f8e9 	bl	8010790 <HAL_MspInit>
}
 800f5be:	2000      	movs	r0, #0
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	46c0      	nop			; (mov r8, r8)
 800f5c4:	40022000 	.word	0x40022000

0800f5c8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f5c8:	4a02      	ldr	r2, [pc, #8]	; (800f5d4 <HAL_IncTick+0xc>)
 800f5ca:	6813      	ldr	r3, [r2, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	6013      	str	r3, [r2, #0]
}
 800f5d0:	4770      	bx	lr
 800f5d2:	46c0      	nop			; (mov r8, r8)
 800f5d4:	200067e0 	.word	0x200067e0

0800f5d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f5d8:	4b01      	ldr	r3, [pc, #4]	; (800f5e0 <HAL_GetTick+0x8>)
 800f5da:	6818      	ldr	r0, [r3, #0]
}
 800f5dc:	4770      	bx	lr
 800f5de:	46c0      	nop			; (mov r8, r8)
 800f5e0:	200067e0 	.word	0x200067e0

0800f5e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f5ea:	f7ff fff5 	bl	800f5d8 <HAL_GetTick>
 800f5ee:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f5f0:	f7ff fff2 	bl	800f5d8 <HAL_GetTick>
 800f5f4:	9b01      	ldr	r3, [sp, #4]
 800f5f6:	1b00      	subs	r0, r0, r4
 800f5f8:	4298      	cmp	r0, r3
 800f5fa:	d3f9      	bcc.n	800f5f0 <HAL_Delay+0xc>
  {
  }
}
 800f5fc:	b002      	add	sp, #8
 800f5fe:	bd10      	pop	{r4, pc}

0800f600 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f600:	4b01      	ldr	r3, [pc, #4]	; (800f608 <HAL_GetREVID+0x8>)
 800f602:	6818      	ldr	r0, [r3, #0]
 800f604:	0c00      	lsrs	r0, r0, #16
}
 800f606:	4770      	bx	lr
 800f608:	40015800 	.word	0x40015800

0800f60c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f60c:	4b02      	ldr	r3, [pc, #8]	; (800f618 <HAL_GetDEVID+0xc>)
 800f60e:	6818      	ldr	r0, [r3, #0]
 800f610:	0500      	lsls	r0, r0, #20
 800f612:	0d00      	lsrs	r0, r0, #20
}
 800f614:	4770      	bx	lr
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	40015800 	.word	0x40015800

0800f61c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f61c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800f61e:	2800      	cmp	r0, #0
 800f620:	db14      	blt.n	800f64c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f622:	0883      	lsrs	r3, r0, #2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4a15      	ldr	r2, [pc, #84]	; (800f67c <HAL_NVIC_SetPriority+0x60>)
 800f628:	4694      	mov	ip, r2
 800f62a:	4463      	add	r3, ip
 800f62c:	26c0      	movs	r6, #192	; 0xc0
 800f62e:	00b6      	lsls	r6, r6, #2
 800f630:	599d      	ldr	r5, [r3, r6]
 800f632:	2403      	movs	r4, #3
 800f634:	4020      	ands	r0, r4
 800f636:	00c0      	lsls	r0, r0, #3
 800f638:	22ff      	movs	r2, #255	; 0xff
 800f63a:	0014      	movs	r4, r2
 800f63c:	4084      	lsls	r4, r0
 800f63e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f640:	0189      	lsls	r1, r1, #6
 800f642:	400a      	ands	r2, r1
 800f644:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f646:	432a      	orrs	r2, r5
 800f648:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f64c:	b2c0      	uxtb	r0, r0
 800f64e:	230f      	movs	r3, #15
 800f650:	4003      	ands	r3, r0
 800f652:	3b08      	subs	r3, #8
 800f654:	089b      	lsrs	r3, r3, #2
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4a09      	ldr	r2, [pc, #36]	; (800f680 <HAL_NVIC_SetPriority+0x64>)
 800f65a:	4694      	mov	ip, r2
 800f65c:	4463      	add	r3, ip
 800f65e:	69dd      	ldr	r5, [r3, #28]
 800f660:	2203      	movs	r2, #3
 800f662:	4010      	ands	r0, r2
 800f664:	00c0      	lsls	r0, r0, #3
 800f666:	24ff      	movs	r4, #255	; 0xff
 800f668:	0022      	movs	r2, r4
 800f66a:	4082      	lsls	r2, r0
 800f66c:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f66e:	0189      	lsls	r1, r1, #6
 800f670:	400c      	ands	r4, r1
 800f672:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f674:	432c      	orrs	r4, r5
 800f676:	61dc      	str	r4, [r3, #28]
 800f678:	e7e7      	b.n	800f64a <HAL_NVIC_SetPriority+0x2e>
 800f67a:	46c0      	nop			; (mov r8, r8)
 800f67c:	e000e100 	.word	0xe000e100
 800f680:	e000ed00 	.word	0xe000ed00

0800f684 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f684:	231f      	movs	r3, #31
 800f686:	4018      	ands	r0, r3
 800f688:	3b1e      	subs	r3, #30
 800f68a:	4083      	lsls	r3, r0
 800f68c:	4a01      	ldr	r2, [pc, #4]	; (800f694 <HAL_NVIC_EnableIRQ+0x10>)
 800f68e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f690:	4770      	bx	lr
 800f692:	46c0      	nop			; (mov r8, r8)
 800f694:	e000e100 	.word	0xe000e100

0800f698 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f698:	231f      	movs	r3, #31
 800f69a:	4018      	ands	r0, r3
 800f69c:	3b1e      	subs	r3, #30
 800f69e:	4083      	lsls	r3, r0
 800f6a0:	4901      	ldr	r1, [pc, #4]	; (800f6a8 <HAL_NVIC_DisableIRQ+0x10>)
 800f6a2:	2280      	movs	r2, #128	; 0x80
 800f6a4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f6a6:	4770      	bx	lr
 800f6a8:	e000e100 	.word	0xe000e100

0800f6ac <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f6ac:	1e43      	subs	r3, r0, #1
 800f6ae:	4a0a      	ldr	r2, [pc, #40]	; (800f6d8 <HAL_SYSTICK_Config+0x2c>)
 800f6b0:	2001      	movs	r0, #1
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d80e      	bhi.n	800f6d4 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f6b6:	4a09      	ldr	r2, [pc, #36]	; (800f6dc <HAL_SYSTICK_Config+0x30>)
 800f6b8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6ba:	4809      	ldr	r0, [pc, #36]	; (800f6e0 <HAL_SYSTICK_Config+0x34>)
 800f6bc:	6a03      	ldr	r3, [r0, #32]
 800f6be:	021b      	lsls	r3, r3, #8
 800f6c0:	0a1b      	lsrs	r3, r3, #8
 800f6c2:	21c0      	movs	r1, #192	; 0xc0
 800f6c4:	0609      	lsls	r1, r1, #24
 800f6c6:	430b      	orrs	r3, r1
 800f6c8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f6ce:	3307      	adds	r3, #7
 800f6d0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f6d2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f6d4:	4770      	bx	lr
 800f6d6:	46c0      	nop			; (mov r8, r8)
 800f6d8:	00ffffff 	.word	0x00ffffff
 800f6dc:	e000e010 	.word	0xe000e010
 800f6e0:	e000ed00 	.word	0xe000ed00

0800f6e4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f6e4:	2804      	cmp	r0, #4
 800f6e6:	d005      	beq.n	800f6f4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f6e8:	4a05      	ldr	r2, [pc, #20]	; (800f700 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800f6ea:	6813      	ldr	r3, [r2, #0]
 800f6ec:	2104      	movs	r1, #4
 800f6ee:	438b      	bics	r3, r1
 800f6f0:	6013      	str	r3, [r2, #0]
  }
}
 800f6f2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f6f4:	4a02      	ldr	r2, [pc, #8]	; (800f700 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	2104      	movs	r1, #4
 800f6fa:	430b      	orrs	r3, r1
 800f6fc:	6013      	str	r3, [r2, #0]
 800f6fe:	e7f8      	b.n	800f6f2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f700:	e000e010 	.word	0xe000e010

0800f704 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f706:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f708:	0891      	lsrs	r1, r2, #2
 800f70a:	d013      	beq.n	800f734 <CRC_Handle_8+0x30>
 800f70c:	0034      	movs	r4, r6
 800f70e:	2303      	movs	r3, #3
 800f710:	0017      	movs	r7, r2
 800f712:	439f      	bics	r7, r3
 800f714:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f716:	7823      	ldrb	r3, [r4, #0]
 800f718:	061b      	lsls	r3, r3, #24
 800f71a:	7865      	ldrb	r5, [r4, #1]
 800f71c:	042d      	lsls	r5, r5, #16
 800f71e:	432b      	orrs	r3, r5
 800f720:	78e5      	ldrb	r5, [r4, #3]
 800f722:	432b      	orrs	r3, r5
 800f724:	78a5      	ldrb	r5, [r4, #2]
 800f726:	022d      	lsls	r5, r5, #8
 800f728:	432b      	orrs	r3, r5
 800f72a:	6805      	ldr	r5, [r0, #0]
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800f730:	42bc      	cmp	r4, r7
 800f732:	d1f0      	bne.n	800f716 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f734:	2303      	movs	r3, #3
 800f736:	401a      	ands	r2, r3
 800f738:	d01e      	beq.n	800f778 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800f73a:	2a01      	cmp	r2, #1
 800f73c:	d00a      	beq.n	800f754 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800f73e:	2a02      	cmp	r2, #2
 800f740:	d10d      	bne.n	800f75e <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f742:	0089      	lsls	r1, r1, #2
 800f744:	5c72      	ldrb	r2, [r6, r1]
 800f746:	0212      	lsls	r2, r2, #8
 800f748:	1871      	adds	r1, r6, r1
 800f74a:	784b      	ldrb	r3, [r1, #1]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	6802      	ldr	r2, [r0, #0]
 800f750:	8013      	strh	r3, [r2, #0]
 800f752:	e011      	b.n	800f778 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f754:	0089      	lsls	r1, r1, #2
 800f756:	5d8b      	ldrb	r3, [r1, r6]
 800f758:	6802      	ldr	r2, [r0, #0]
 800f75a:	7013      	strb	r3, [r2, #0]
 800f75c:	e00c      	b.n	800f778 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800f75e:	2a03      	cmp	r2, #3
 800f760:	d10a      	bne.n	800f778 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f762:	0089      	lsls	r1, r1, #2
 800f764:	5c72      	ldrb	r2, [r6, r1]
 800f766:	0212      	lsls	r2, r2, #8
 800f768:	1871      	adds	r1, r6, r1
 800f76a:	784b      	ldrb	r3, [r1, #1]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	6802      	ldr	r2, [r0, #0]
 800f770:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f772:	788b      	ldrb	r3, [r1, #2]
 800f774:	6802      	ldr	r2, [r0, #0]
 800f776:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f778:	6803      	ldr	r3, [r0, #0]
 800f77a:	6818      	ldr	r0, [r3, #0]
}
 800f77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f77e <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f77e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f780:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f782:	0852      	lsrs	r2, r2, #1
 800f784:	d00b      	beq.n	800f79e <CRC_Handle_16+0x20>
 800f786:	000c      	movs	r4, r1
 800f788:	0097      	lsls	r7, r2, #2
 800f78a:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f78c:	8823      	ldrh	r3, [r4, #0]
 800f78e:	041b      	lsls	r3, r3, #16
 800f790:	8866      	ldrh	r6, [r4, #2]
 800f792:	4333      	orrs	r3, r6
 800f794:	6806      	ldr	r6, [r0, #0]
 800f796:	6033      	str	r3, [r6, #0]
 800f798:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800f79a:	42bc      	cmp	r4, r7
 800f79c:	d1f6      	bne.n	800f78c <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f79e:	07eb      	lsls	r3, r5, #31
 800f7a0:	d503      	bpl.n	800f7aa <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f7a2:	0092      	lsls	r2, r2, #2
 800f7a4:	5a53      	ldrh	r3, [r2, r1]
 800f7a6:	6802      	ldr	r2, [r0, #0]
 800f7a8:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f7aa:	6803      	ldr	r3, [r0, #0]
 800f7ac:	6818      	ldr	r0, [r3, #0]
}
 800f7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7b0 <HAL_CRC_Init>:
{
 800f7b0:	b510      	push	{r4, lr}
 800f7b2:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f7b4:	d029      	beq.n	800f80a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f7b6:	7f43      	ldrb	r3, [r0, #29]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01e      	beq.n	800f7fa <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f7bc:	2302      	movs	r3, #2
 800f7be:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f7c0:	0020      	movs	r0, r4
 800f7c2:	f000 f8b1 	bl	800f928 <HAL_CRCEx_Init>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d121      	bne.n	800f80e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f7ca:	7963      	ldrb	r3, [r4, #5]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d118      	bne.n	800f802 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	4252      	negs	r2, r2
 800f7d6:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f7d8:	6822      	ldr	r2, [r4, #0]
 800f7da:	6893      	ldr	r3, [r2, #8]
 800f7dc:	2160      	movs	r1, #96	; 0x60
 800f7de:	438b      	bics	r3, r1
 800f7e0:	6961      	ldr	r1, [r4, #20]
 800f7e2:	430b      	orrs	r3, r1
 800f7e4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f7e6:	6822      	ldr	r2, [r4, #0]
 800f7e8:	6893      	ldr	r3, [r2, #8]
 800f7ea:	2180      	movs	r1, #128	; 0x80
 800f7ec:	438b      	bics	r3, r1
 800f7ee:	69a1      	ldr	r1, [r4, #24]
 800f7f0:	430b      	orrs	r3, r1
 800f7f2:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	7763      	strb	r3, [r4, #29]
}
 800f7f8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f7fa:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f7fc:	f7fc ffc0 	bl	800c780 <HAL_CRC_MspInit>
 800f800:	e7dc      	b.n	800f7bc <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f802:	6823      	ldr	r3, [r4, #0]
 800f804:	6922      	ldr	r2, [r4, #16]
 800f806:	611a      	str	r2, [r3, #16]
 800f808:	e7e6      	b.n	800f7d8 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800f80a:	2001      	movs	r0, #1
 800f80c:	e7f4      	b.n	800f7f8 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f80e:	2001      	movs	r0, #1
 800f810:	e7f2      	b.n	800f7f8 <HAL_CRC_Init+0x48>

0800f812 <HAL_CRC_Accumulate>:
{
 800f812:	b510      	push	{r4, lr}
 800f814:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f816:	7f03      	ldrb	r3, [r0, #28]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d024      	beq.n	800f866 <HAL_CRC_Accumulate+0x54>
 800f81c:	2301      	movs	r3, #1
 800f81e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f820:	3301      	adds	r3, #1
 800f822:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f824:	6a03      	ldr	r3, [r0, #32]
 800f826:	2b02      	cmp	r3, #2
 800f828:	d01a      	beq.n	800f860 <HAL_CRC_Accumulate+0x4e>
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	d007      	beq.n	800f83e <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f82e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f830:	2b01      	cmp	r3, #1
 800f832:	d011      	beq.n	800f858 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f834:	2301      	movs	r3, #1
 800f836:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f838:	2300      	movs	r3, #0
 800f83a:	7723      	strb	r3, [r4, #28]
}
 800f83c:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800f83e:	2a00      	cmp	r2, #0
 800f840:	d007      	beq.n	800f852 <HAL_CRC_Accumulate+0x40>
 800f842:	000b      	movs	r3, r1
 800f844:	0092      	lsls	r2, r2, #2
 800f846:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f848:	6822      	ldr	r2, [r4, #0]
 800f84a:	cb01      	ldmia	r3!, {r0}
 800f84c:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800f84e:	428b      	cmp	r3, r1
 800f850:	d1fa      	bne.n	800f848 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	6818      	ldr	r0, [r3, #0]
      break;
 800f856:	e7ed      	b.n	800f834 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f858:	0020      	movs	r0, r4
 800f85a:	f7ff ff53 	bl	800f704 <CRC_Handle_8>
      break;
 800f85e:	e7e9      	b.n	800f834 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f860:	f7ff ff8d 	bl	800f77e <CRC_Handle_16>
      break;
 800f864:	e7e6      	b.n	800f834 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800f866:	2002      	movs	r0, #2
 800f868:	e7e8      	b.n	800f83c <HAL_CRC_Accumulate+0x2a>

0800f86a <HAL_CRC_Calculate>:
{
 800f86a:	b570      	push	{r4, r5, r6, lr}
 800f86c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f86e:	7f03      	ldrb	r3, [r0, #28]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d029      	beq.n	800f8c8 <HAL_CRC_Calculate+0x5e>
 800f874:	2501      	movs	r5, #1
 800f876:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f878:	2302      	movs	r3, #2
 800f87a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f87c:	6800      	ldr	r0, [r0, #0]
 800f87e:	6883      	ldr	r3, [r0, #8]
 800f880:	432b      	orrs	r3, r5
 800f882:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800f884:	6a23      	ldr	r3, [r4, #32]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d01a      	beq.n	800f8c0 <HAL_CRC_Calculate+0x56>
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d007      	beq.n	800f89e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f88e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f890:	2b01      	cmp	r3, #1
 800f892:	d011      	beq.n	800f8b8 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f894:	2301      	movs	r3, #1
 800f896:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f898:	2300      	movs	r3, #0
 800f89a:	7723      	strb	r3, [r4, #28]
}
 800f89c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f89e:	2a00      	cmp	r2, #0
 800f8a0:	d007      	beq.n	800f8b2 <HAL_CRC_Calculate+0x48>
 800f8a2:	000b      	movs	r3, r1
 800f8a4:	0092      	lsls	r2, r2, #2
 800f8a6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f8a8:	6820      	ldr	r0, [r4, #0]
 800f8aa:	cb20      	ldmia	r3!, {r5}
 800f8ac:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f8ae:	428b      	cmp	r3, r1
 800f8b0:	d1fa      	bne.n	800f8a8 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	6818      	ldr	r0, [r3, #0]
      break;
 800f8b6:	e7ed      	b.n	800f894 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f8b8:	0020      	movs	r0, r4
 800f8ba:	f7ff ff23 	bl	800f704 <CRC_Handle_8>
      break;
 800f8be:	e7e9      	b.n	800f894 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f8c0:	0020      	movs	r0, r4
 800f8c2:	f7ff ff5c 	bl	800f77e <CRC_Handle_16>
      break;
 800f8c6:	e7e5      	b.n	800f894 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f8c8:	2002      	movs	r0, #2
 800f8ca:	e7e7      	b.n	800f89c <HAL_CRC_Calculate+0x32>

0800f8cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f8cc:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f8ce:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f8d0:	2501      	movs	r5, #1
 800f8d2:	002c      	movs	r4, r5
 800f8d4:	409c      	lsls	r4, r3
 800f8d6:	4221      	tst	r1, r4
 800f8d8:	d10b      	bne.n	800f8f2 <HAL_CRCEx_Polynomial_Set+0x26>
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	d2f9      	bcs.n	800f8d2 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800f8de:	2a10      	cmp	r2, #16
 800f8e0:	d01c      	beq.n	800f91c <HAL_CRCEx_Polynomial_Set+0x50>
 800f8e2:	2a18      	cmp	r2, #24
 800f8e4:	d01e      	beq.n	800f924 <HAL_CRCEx_Polynomial_Set+0x58>
 800f8e6:	2a08      	cmp	r2, #8
 800f8e8:	d109      	bne.n	800f8fe <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800f8ea:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800f8ec:	2b0f      	cmp	r3, #15
 800f8ee:	d906      	bls.n	800f8fe <HAL_CRCEx_Polynomial_Set+0x32>
 800f8f0:	e00e      	b.n	800f910 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800f8f2:	2a10      	cmp	r2, #16
 800f8f4:	d012      	beq.n	800f91c <HAL_CRCEx_Polynomial_Set+0x50>
 800f8f6:	2a18      	cmp	r2, #24
 800f8f8:	d00c      	beq.n	800f914 <HAL_CRCEx_Polynomial_Set+0x48>
 800f8fa:	2a08      	cmp	r2, #8
 800f8fc:	d0f5      	beq.n	800f8ea <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f8fe:	6803      	ldr	r3, [r0, #0]
 800f900:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f902:	6801      	ldr	r1, [r0, #0]
 800f904:	688b      	ldr	r3, [r1, #8]
 800f906:	2018      	movs	r0, #24
 800f908:	4383      	bics	r3, r0
 800f90a:	431a      	orrs	r2, r3
 800f90c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800f90e:	2400      	movs	r4, #0
}
 800f910:	0020      	movs	r0, r4
 800f912:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800f914:	2b06      	cmp	r3, #6
 800f916:	d9f2      	bls.n	800f8fe <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800f918:	2401      	movs	r4, #1
 800f91a:	e7f9      	b.n	800f910 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800f91c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800f91e:	2b07      	cmp	r3, #7
 800f920:	d9ed      	bls.n	800f8fe <HAL_CRCEx_Polynomial_Set+0x32>
 800f922:	e7f5      	b.n	800f910 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800f924:	2401      	movs	r4, #1
 800f926:	e7f3      	b.n	800f910 <HAL_CRCEx_Polynomial_Set+0x44>

0800f928 <HAL_CRCEx_Init>:
{
 800f928:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f92a:	7903      	ldrb	r3, [r0, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d109      	bne.n	800f944 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f930:	6803      	ldr	r3, [r0, #0]
 800f932:	4a08      	ldr	r2, [pc, #32]	; (800f954 <HAL_CRCEx_Init+0x2c>)
 800f934:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f936:	6802      	ldr	r2, [r0, #0]
 800f938:	6893      	ldr	r3, [r2, #8]
 800f93a:	2118      	movs	r1, #24
 800f93c:	438b      	bics	r3, r1
 800f93e:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 800f940:	2000      	movs	r0, #0
}
 800f942:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f944:	68c2      	ldr	r2, [r0, #12]
 800f946:	6881      	ldr	r1, [r0, #8]
 800f948:	f7ff ffc0 	bl	800f8cc <HAL_CRCEx_Polynomial_Set>
 800f94c:	1e43      	subs	r3, r0, #1
 800f94e:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f950:	b2c0      	uxtb	r0, r0
 800f952:	e7f6      	b.n	800f942 <HAL_CRCEx_Init+0x1a>
 800f954:	04c11db7 	.word	0x04c11db7

0800f958 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f958:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d022      	beq.n	800f9a4 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f95e:	2321      	movs	r3, #33	; 0x21
 800f960:	5cc3      	ldrb	r3, [r0, r3]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d102      	bne.n	800f96c <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800f966:	3320      	adds	r3, #32
 800f968:	2200      	movs	r2, #0
 800f96a:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f96c:	2121      	movs	r1, #33	; 0x21
 800f96e:	2302      	movs	r3, #2
 800f970:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f972:	6804      	ldr	r4, [r0, #0]
 800f974:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f976:	4a0c      	ldr	r2, [pc, #48]	; (800f9a8 <HAL_DMA_Init+0x50>)
 800f978:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f97a:	6843      	ldr	r3, [r0, #4]
 800f97c:	6885      	ldr	r5, [r0, #8]
 800f97e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f980:	68c5      	ldr	r5, [r0, #12]
 800f982:	432b      	orrs	r3, r5
 800f984:	6905      	ldr	r5, [r0, #16]
 800f986:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f988:	6945      	ldr	r5, [r0, #20]
 800f98a:	432b      	orrs	r3, r5
 800f98c:	6985      	ldr	r5, [r0, #24]
 800f98e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f990:	69c5      	ldr	r5, [r0, #28]
 800f992:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f994:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f996:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f998:	2300      	movs	r3, #0
 800f99a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f99c:	3301      	adds	r3, #1
 800f99e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f9a0:	2000      	movs	r0, #0
}  
 800f9a2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	e7fc      	b.n	800f9a2 <HAL_DMA_Init+0x4a>
 800f9a8:	ffffc00f 	.word	0xffffc00f

0800f9ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f9ac:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f9ae:	2420      	movs	r4, #32
 800f9b0:	5d04      	ldrb	r4, [r0, r4]
 800f9b2:	2c01      	cmp	r4, #1
 800f9b4:	d02d      	beq.n	800fa12 <HAL_DMA_Start_IT+0x66>
 800f9b6:	2601      	movs	r6, #1
 800f9b8:	2420      	movs	r4, #32
 800f9ba:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f9bc:	3401      	adds	r4, #1
 800f9be:	2502      	movs	r5, #2
 800f9c0:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f9c2:	6805      	ldr	r5, [r0, #0]
 800f9c4:	682c      	ldr	r4, [r5, #0]
 800f9c6:	43b4      	bics	r4, r6
 800f9c8:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f9ca:	6804      	ldr	r4, [r0, #0]
 800f9cc:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f9ce:	6843      	ldr	r3, [r0, #4]
 800f9d0:	2b10      	cmp	r3, #16
 800f9d2:	d019      	beq.n	800fa08 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f9d4:	6803      	ldr	r3, [r0, #0]
 800f9d6:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f9d8:	6803      	ldr	r3, [r0, #0]
 800f9da:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f9dc:	6802      	ldr	r2, [r0, #0]
 800f9de:	6813      	ldr	r3, [r2, #0]
 800f9e0:	2102      	movs	r1, #2
 800f9e2:	430b      	orrs	r3, r1
 800f9e4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f9e6:	6802      	ldr	r2, [r0, #0]
 800f9e8:	6813      	ldr	r3, [r2, #0]
 800f9ea:	3102      	adds	r1, #2
 800f9ec:	430b      	orrs	r3, r1
 800f9ee:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f9f0:	6802      	ldr	r2, [r0, #0]
 800f9f2:	6813      	ldr	r3, [r2, #0]
 800f9f4:	3104      	adds	r1, #4
 800f9f6:	430b      	orrs	r3, r1
 800f9f8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f9fa:	6802      	ldr	r2, [r0, #0]
 800f9fc:	6813      	ldr	r3, [r2, #0]
 800f9fe:	3907      	subs	r1, #7
 800fa00:	430b      	orrs	r3, r1
 800fa02:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800fa04:	2000      	movs	r0, #0
} 
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800fa08:	6803      	ldr	r3, [r0, #0]
 800fa0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	60d9      	str	r1, [r3, #12]
 800fa10:	e7e4      	b.n	800f9dc <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800fa12:	2002      	movs	r0, #2
 800fa14:	e7f7      	b.n	800fa06 <HAL_DMA_Start_IT+0x5a>

0800fa16 <HAL_DMA_Abort>:
{
 800fa16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa18:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800fa1a:	6802      	ldr	r2, [r0, #0]
 800fa1c:	6813      	ldr	r3, [r2, #0]
 800fa1e:	2101      	movs	r1, #1
 800fa20:	438b      	bics	r3, r1
 800fa22:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800fa24:	f7ff fdd8 	bl	800f5d8 <HAL_GetTick>
 800fa28:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fa2a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fa2c:	26fa      	movs	r6, #250	; 0xfa
 800fa2e:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	421d      	tst	r5, r3
 800fa36:	d00f      	beq.n	800fa58 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fa38:	f7ff fdce 	bl	800f5d8 <HAL_GetTick>
 800fa3c:	1bc0      	subs	r0, r0, r7
 800fa3e:	42b0      	cmp	r0, r6
 800fa40:	d9f6      	bls.n	800fa30 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800fa42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa44:	2220      	movs	r2, #32
 800fa46:	4313      	orrs	r3, r2
 800fa48:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fa4a:	2321      	movs	r3, #33	; 0x21
 800fa4c:	2103      	movs	r1, #3
 800fa4e:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fa50:	2300      	movs	r3, #0
 800fa52:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800fa54:	2003      	movs	r0, #3
 800fa56:	e006      	b.n	800fa66 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800fa58:	2321      	movs	r3, #33	; 0x21
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	2200      	movs	r2, #0
 800fa62:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800fa64:	2000      	movs	r0, #0
}
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa68 <HAL_DMA_IRQHandler>:
{        
 800fa68:	b510      	push	{r4, lr}
 800fa6a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fa6c:	6803      	ldr	r3, [r0, #0]
 800fa6e:	4ab4      	ldr	r2, [pc, #720]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d94d      	bls.n	800fb10 <HAL_DMA_IRQHandler+0xa8>
 800fa74:	4ab3      	ldr	r2, [pc, #716]	; (800fd44 <HAL_DMA_IRQHandler+0x2dc>)
 800fa76:	6811      	ldr	r1, [r2, #0]
 800fa78:	4ab3      	ldr	r2, [pc, #716]	; (800fd48 <HAL_DMA_IRQHandler+0x2e0>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d026      	beq.n	800facc <HAL_DMA_IRQHandler+0x64>
 800fa7e:	4ab3      	ldr	r2, [pc, #716]	; (800fd4c <HAL_DMA_IRQHandler+0x2e4>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d02d      	beq.n	800fae0 <HAL_DMA_IRQHandler+0x78>
 800fa84:	4ab2      	ldr	r2, [pc, #712]	; (800fd50 <HAL_DMA_IRQHandler+0x2e8>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d02c      	beq.n	800fae4 <HAL_DMA_IRQHandler+0x7c>
 800fa8a:	4ab2      	ldr	r2, [pc, #712]	; (800fd54 <HAL_DMA_IRQHandler+0x2ec>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d02c      	beq.n	800faea <HAL_DMA_IRQHandler+0x82>
 800fa90:	4ab1      	ldr	r2, [pc, #708]	; (800fd58 <HAL_DMA_IRQHandler+0x2f0>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d02c      	beq.n	800faf0 <HAL_DMA_IRQHandler+0x88>
 800fa96:	4ab1      	ldr	r2, [pc, #708]	; (800fd5c <HAL_DMA_IRQHandler+0x2f4>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d02c      	beq.n	800faf6 <HAL_DMA_IRQHandler+0x8e>
 800fa9c:	4aa8      	ldr	r2, [pc, #672]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d02c      	beq.n	800fafc <HAL_DMA_IRQHandler+0x94>
 800faa2:	4aaf      	ldr	r2, [pc, #700]	; (800fd60 <HAL_DMA_IRQHandler+0x2f8>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d02c      	beq.n	800fb02 <HAL_DMA_IRQHandler+0x9a>
 800faa8:	4aae      	ldr	r2, [pc, #696]	; (800fd64 <HAL_DMA_IRQHandler+0x2fc>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d02b      	beq.n	800fb06 <HAL_DMA_IRQHandler+0x9e>
 800faae:	4aae      	ldr	r2, [pc, #696]	; (800fd68 <HAL_DMA_IRQHandler+0x300>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d02a      	beq.n	800fb0a <HAL_DMA_IRQHandler+0xa2>
 800fab4:	4aad      	ldr	r2, [pc, #692]	; (800fd6c <HAL_DMA_IRQHandler+0x304>)
 800fab6:	189a      	adds	r2, r3, r2
 800fab8:	4250      	negs	r0, r2
 800faba:	4142      	adcs	r2, r0
 800fabc:	4252      	negs	r2, r2
 800fabe:	48ac      	ldr	r0, [pc, #688]	; (800fd70 <HAL_DMA_IRQHandler+0x308>)
 800fac0:	4002      	ands	r2, r0
 800fac2:	2080      	movs	r0, #128	; 0x80
 800fac4:	0300      	lsls	r0, r0, #12
 800fac6:	4684      	mov	ip, r0
 800fac8:	4462      	add	r2, ip
 800faca:	e000      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800facc:	2208      	movs	r2, #8
 800face:	420a      	tst	r2, r1
 800fad0:	d100      	bne.n	800fad4 <HAL_DMA_IRQHandler+0x6c>
 800fad2:	e0e6      	b.n	800fca2 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	0712      	lsls	r2, r2, #28
 800fad8:	d500      	bpl.n	800fadc <HAL_DMA_IRQHandler+0x74>
 800fada:	e097      	b.n	800fc0c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	e0e0      	b.n	800fca2 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fae0:	2280      	movs	r2, #128	; 0x80
 800fae2:	e7f4      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fae4:	2280      	movs	r2, #128	; 0x80
 800fae6:	0112      	lsls	r2, r2, #4
 800fae8:	e7f1      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800faea:	2280      	movs	r2, #128	; 0x80
 800faec:	0212      	lsls	r2, r2, #8
 800faee:	e7ee      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800faf0:	2280      	movs	r2, #128	; 0x80
 800faf2:	0312      	lsls	r2, r2, #12
 800faf4:	e7eb      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800faf6:	2280      	movs	r2, #128	; 0x80
 800faf8:	0412      	lsls	r2, r2, #16
 800fafa:	e7e8      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fafc:	2280      	movs	r2, #128	; 0x80
 800fafe:	0512      	lsls	r2, r2, #20
 800fb00:	e7e5      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fb02:	2208      	movs	r2, #8
 800fb04:	e7e3      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fb06:	2280      	movs	r2, #128	; 0x80
 800fb08:	e7e1      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fb0a:	2280      	movs	r2, #128	; 0x80
 800fb0c:	0112      	lsls	r2, r2, #4
 800fb0e:	e7de      	b.n	800face <HAL_DMA_IRQHandler+0x66>
 800fb10:	4a98      	ldr	r2, [pc, #608]	; (800fd74 <HAL_DMA_IRQHandler+0x30c>)
 800fb12:	6811      	ldr	r1, [r2, #0]
 800fb14:	4a8c      	ldr	r2, [pc, #560]	; (800fd48 <HAL_DMA_IRQHandler+0x2e0>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d026      	beq.n	800fb68 <HAL_DMA_IRQHandler+0x100>
 800fb1a:	4a8c      	ldr	r2, [pc, #560]	; (800fd4c <HAL_DMA_IRQHandler+0x2e4>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d05d      	beq.n	800fbdc <HAL_DMA_IRQHandler+0x174>
 800fb20:	4a8b      	ldr	r2, [pc, #556]	; (800fd50 <HAL_DMA_IRQHandler+0x2e8>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d05c      	beq.n	800fbe0 <HAL_DMA_IRQHandler+0x178>
 800fb26:	4a8b      	ldr	r2, [pc, #556]	; (800fd54 <HAL_DMA_IRQHandler+0x2ec>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d05c      	beq.n	800fbe6 <HAL_DMA_IRQHandler+0x17e>
 800fb2c:	4a8a      	ldr	r2, [pc, #552]	; (800fd58 <HAL_DMA_IRQHandler+0x2f0>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d05c      	beq.n	800fbec <HAL_DMA_IRQHandler+0x184>
 800fb32:	4a8a      	ldr	r2, [pc, #552]	; (800fd5c <HAL_DMA_IRQHandler+0x2f4>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d05c      	beq.n	800fbf2 <HAL_DMA_IRQHandler+0x18a>
 800fb38:	4a81      	ldr	r2, [pc, #516]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d05c      	beq.n	800fbf8 <HAL_DMA_IRQHandler+0x190>
 800fb3e:	4a88      	ldr	r2, [pc, #544]	; (800fd60 <HAL_DMA_IRQHandler+0x2f8>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d05c      	beq.n	800fbfe <HAL_DMA_IRQHandler+0x196>
 800fb44:	4a87      	ldr	r2, [pc, #540]	; (800fd64 <HAL_DMA_IRQHandler+0x2fc>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d05b      	beq.n	800fc02 <HAL_DMA_IRQHandler+0x19a>
 800fb4a:	4a87      	ldr	r2, [pc, #540]	; (800fd68 <HAL_DMA_IRQHandler+0x300>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d05a      	beq.n	800fc06 <HAL_DMA_IRQHandler+0x19e>
 800fb50:	4a86      	ldr	r2, [pc, #536]	; (800fd6c <HAL_DMA_IRQHandler+0x304>)
 800fb52:	189a      	adds	r2, r3, r2
 800fb54:	4250      	negs	r0, r2
 800fb56:	4142      	adcs	r2, r0
 800fb58:	4252      	negs	r2, r2
 800fb5a:	4885      	ldr	r0, [pc, #532]	; (800fd70 <HAL_DMA_IRQHandler+0x308>)
 800fb5c:	4002      	ands	r2, r0
 800fb5e:	2080      	movs	r0, #128	; 0x80
 800fb60:	0300      	lsls	r0, r0, #12
 800fb62:	4684      	mov	ip, r0
 800fb64:	4462      	add	r2, ip
 800fb66:	e000      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fb68:	2208      	movs	r2, #8
 800fb6a:	420a      	tst	r2, r1
 800fb6c:	d000      	beq.n	800fb70 <HAL_DMA_IRQHandler+0x108>
 800fb6e:	e3ad      	b.n	80102cc <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fb70:	4a80      	ldr	r2, [pc, #512]	; (800fd74 <HAL_DMA_IRQHandler+0x30c>)
 800fb72:	6811      	ldr	r1, [r2, #0]
 800fb74:	4a74      	ldr	r2, [pc, #464]	; (800fd48 <HAL_DMA_IRQHandler+0x2e0>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d100      	bne.n	800fb7c <HAL_DMA_IRQHandler+0x114>
 800fb7a:	e198      	b.n	800feae <HAL_DMA_IRQHandler+0x446>
 800fb7c:	4a73      	ldr	r2, [pc, #460]	; (800fd4c <HAL_DMA_IRQHandler+0x2e4>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d100      	bne.n	800fb84 <HAL_DMA_IRQHandler+0x11c>
 800fb82:	e1da      	b.n	800ff3a <HAL_DMA_IRQHandler+0x4d2>
 800fb84:	4a72      	ldr	r2, [pc, #456]	; (800fd50 <HAL_DMA_IRQHandler+0x2e8>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d100      	bne.n	800fb8c <HAL_DMA_IRQHandler+0x124>
 800fb8a:	e1d8      	b.n	800ff3e <HAL_DMA_IRQHandler+0x4d6>
 800fb8c:	4a71      	ldr	r2, [pc, #452]	; (800fd54 <HAL_DMA_IRQHandler+0x2ec>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d100      	bne.n	800fb94 <HAL_DMA_IRQHandler+0x12c>
 800fb92:	e1d7      	b.n	800ff44 <HAL_DMA_IRQHandler+0x4dc>
 800fb94:	4a70      	ldr	r2, [pc, #448]	; (800fd58 <HAL_DMA_IRQHandler+0x2f0>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d100      	bne.n	800fb9c <HAL_DMA_IRQHandler+0x134>
 800fb9a:	e1d6      	b.n	800ff4a <HAL_DMA_IRQHandler+0x4e2>
 800fb9c:	4a6f      	ldr	r2, [pc, #444]	; (800fd5c <HAL_DMA_IRQHandler+0x2f4>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d100      	bne.n	800fba4 <HAL_DMA_IRQHandler+0x13c>
 800fba2:	e1d5      	b.n	800ff50 <HAL_DMA_IRQHandler+0x4e8>
 800fba4:	4a66      	ldr	r2, [pc, #408]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d100      	bne.n	800fbac <HAL_DMA_IRQHandler+0x144>
 800fbaa:	e1d4      	b.n	800ff56 <HAL_DMA_IRQHandler+0x4ee>
 800fbac:	4a6c      	ldr	r2, [pc, #432]	; (800fd60 <HAL_DMA_IRQHandler+0x2f8>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d100      	bne.n	800fbb4 <HAL_DMA_IRQHandler+0x14c>
 800fbb2:	e1d3      	b.n	800ff5c <HAL_DMA_IRQHandler+0x4f4>
 800fbb4:	4a6b      	ldr	r2, [pc, #428]	; (800fd64 <HAL_DMA_IRQHandler+0x2fc>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d100      	bne.n	800fbbc <HAL_DMA_IRQHandler+0x154>
 800fbba:	e1d1      	b.n	800ff60 <HAL_DMA_IRQHandler+0x4f8>
 800fbbc:	4a6a      	ldr	r2, [pc, #424]	; (800fd68 <HAL_DMA_IRQHandler+0x300>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d100      	bne.n	800fbc4 <HAL_DMA_IRQHandler+0x15c>
 800fbc2:	e1cf      	b.n	800ff64 <HAL_DMA_IRQHandler+0x4fc>
 800fbc4:	4a69      	ldr	r2, [pc, #420]	; (800fd6c <HAL_DMA_IRQHandler+0x304>)
 800fbc6:	189a      	adds	r2, r3, r2
 800fbc8:	4250      	negs	r0, r2
 800fbca:	4142      	adcs	r2, r0
 800fbcc:	4252      	negs	r2, r2
 800fbce:	486a      	ldr	r0, [pc, #424]	; (800fd78 <HAL_DMA_IRQHandler+0x310>)
 800fbd0:	4002      	ands	r2, r0
 800fbd2:	2080      	movs	r0, #128	; 0x80
 800fbd4:	02c0      	lsls	r0, r0, #11
 800fbd6:	4684      	mov	ip, r0
 800fbd8:	4462      	add	r2, ip
 800fbda:	e169      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fbdc:	2280      	movs	r2, #128	; 0x80
 800fbde:	e7c4      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbe0:	2280      	movs	r2, #128	; 0x80
 800fbe2:	0112      	lsls	r2, r2, #4
 800fbe4:	e7c1      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbe6:	2280      	movs	r2, #128	; 0x80
 800fbe8:	0212      	lsls	r2, r2, #8
 800fbea:	e7be      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbec:	2280      	movs	r2, #128	; 0x80
 800fbee:	0312      	lsls	r2, r2, #12
 800fbf0:	e7bb      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbf2:	2280      	movs	r2, #128	; 0x80
 800fbf4:	0412      	lsls	r2, r2, #16
 800fbf6:	e7b8      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbf8:	2280      	movs	r2, #128	; 0x80
 800fbfa:	0512      	lsls	r2, r2, #20
 800fbfc:	e7b5      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fbfe:	2208      	movs	r2, #8
 800fc00:	e7b3      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fc02:	2280      	movs	r2, #128	; 0x80
 800fc04:	e7b1      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
 800fc06:	2280      	movs	r2, #128	; 0x80
 800fc08:	0112      	lsls	r2, r2, #4
 800fc0a:	e7ae      	b.n	800fb6a <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	2108      	movs	r1, #8
 800fc10:	438a      	bics	r2, r1
 800fc12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	4a4a      	ldr	r2, [pc, #296]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d800      	bhi.n	800fc1e <HAL_DMA_IRQHandler+0x1b6>
 800fc1c:	e0ae      	b.n	800fd7c <HAL_DMA_IRQHandler+0x314>
 800fc1e:	4a4a      	ldr	r2, [pc, #296]	; (800fd48 <HAL_DMA_IRQHandler+0x2e0>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d027      	beq.n	800fc74 <HAL_DMA_IRQHandler+0x20c>
 800fc24:	4a49      	ldr	r2, [pc, #292]	; (800fd4c <HAL_DMA_IRQHandler+0x2e4>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d071      	beq.n	800fd0e <HAL_DMA_IRQHandler+0x2a6>
 800fc2a:	4a49      	ldr	r2, [pc, #292]	; (800fd50 <HAL_DMA_IRQHandler+0x2e8>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d070      	beq.n	800fd12 <HAL_DMA_IRQHandler+0x2aa>
 800fc30:	4a48      	ldr	r2, [pc, #288]	; (800fd54 <HAL_DMA_IRQHandler+0x2ec>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d070      	beq.n	800fd18 <HAL_DMA_IRQHandler+0x2b0>
 800fc36:	4a48      	ldr	r2, [pc, #288]	; (800fd58 <HAL_DMA_IRQHandler+0x2f0>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d070      	beq.n	800fd1e <HAL_DMA_IRQHandler+0x2b6>
 800fc3c:	4a47      	ldr	r2, [pc, #284]	; (800fd5c <HAL_DMA_IRQHandler+0x2f4>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d070      	beq.n	800fd24 <HAL_DMA_IRQHandler+0x2bc>
 800fc42:	4a3f      	ldr	r2, [pc, #252]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d070      	beq.n	800fd2a <HAL_DMA_IRQHandler+0x2c2>
 800fc48:	4a45      	ldr	r2, [pc, #276]	; (800fd60 <HAL_DMA_IRQHandler+0x2f8>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d070      	beq.n	800fd30 <HAL_DMA_IRQHandler+0x2c8>
 800fc4e:	4a45      	ldr	r2, [pc, #276]	; (800fd64 <HAL_DMA_IRQHandler+0x2fc>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d06f      	beq.n	800fd34 <HAL_DMA_IRQHandler+0x2cc>
 800fc54:	4a44      	ldr	r2, [pc, #272]	; (800fd68 <HAL_DMA_IRQHandler+0x300>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d06e      	beq.n	800fd38 <HAL_DMA_IRQHandler+0x2d0>
 800fc5a:	4a44      	ldr	r2, [pc, #272]	; (800fd6c <HAL_DMA_IRQHandler+0x304>)
 800fc5c:	4694      	mov	ip, r2
 800fc5e:	4463      	add	r3, ip
 800fc60:	425a      	negs	r2, r3
 800fc62:	4153      	adcs	r3, r2
 800fc64:	425b      	negs	r3, r3
 800fc66:	4a42      	ldr	r2, [pc, #264]	; (800fd70 <HAL_DMA_IRQHandler+0x308>)
 800fc68:	4013      	ands	r3, r2
 800fc6a:	2280      	movs	r2, #128	; 0x80
 800fc6c:	0312      	lsls	r2, r2, #12
 800fc6e:	4694      	mov	ip, r2
 800fc70:	4463      	add	r3, ip
 800fc72:	e000      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fc74:	2308      	movs	r3, #8
 800fc76:	4a33      	ldr	r2, [pc, #204]	; (800fd44 <HAL_DMA_IRQHandler+0x2dc>)
 800fc78:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fc7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fc82:	2321      	movs	r3, #33	; 0x21
 800fc84:	3203      	adds	r2, #3
 800fc86:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d001      	beq.n	800fc98 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 800fc94:	0020      	movs	r0, r4
 800fc96:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	4a29      	ldr	r2, [pc, #164]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d800      	bhi.n	800fca2 <HAL_DMA_IRQHandler+0x23a>
 800fca0:	e766      	b.n	800fb70 <HAL_DMA_IRQHandler+0x108>
 800fca2:	4a28      	ldr	r2, [pc, #160]	; (800fd44 <HAL_DMA_IRQHandler+0x2dc>)
 800fca4:	6811      	ldr	r1, [r2, #0]
 800fca6:	4a28      	ldr	r2, [pc, #160]	; (800fd48 <HAL_DMA_IRQHandler+0x2e0>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d100      	bne.n	800fcae <HAL_DMA_IRQHandler+0x246>
 800fcac:	e0ad      	b.n	800fe0a <HAL_DMA_IRQHandler+0x3a2>
 800fcae:	4a27      	ldr	r2, [pc, #156]	; (800fd4c <HAL_DMA_IRQHandler+0x2e4>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d100      	bne.n	800fcb6 <HAL_DMA_IRQHandler+0x24e>
 800fcb4:	e0e3      	b.n	800fe7e <HAL_DMA_IRQHandler+0x416>
 800fcb6:	4a26      	ldr	r2, [pc, #152]	; (800fd50 <HAL_DMA_IRQHandler+0x2e8>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d100      	bne.n	800fcbe <HAL_DMA_IRQHandler+0x256>
 800fcbc:	e0e1      	b.n	800fe82 <HAL_DMA_IRQHandler+0x41a>
 800fcbe:	4a25      	ldr	r2, [pc, #148]	; (800fd54 <HAL_DMA_IRQHandler+0x2ec>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d100      	bne.n	800fcc6 <HAL_DMA_IRQHandler+0x25e>
 800fcc4:	e0e0      	b.n	800fe88 <HAL_DMA_IRQHandler+0x420>
 800fcc6:	4a24      	ldr	r2, [pc, #144]	; (800fd58 <HAL_DMA_IRQHandler+0x2f0>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d100      	bne.n	800fcce <HAL_DMA_IRQHandler+0x266>
 800fccc:	e0df      	b.n	800fe8e <HAL_DMA_IRQHandler+0x426>
 800fcce:	4a23      	ldr	r2, [pc, #140]	; (800fd5c <HAL_DMA_IRQHandler+0x2f4>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d100      	bne.n	800fcd6 <HAL_DMA_IRQHandler+0x26e>
 800fcd4:	e0de      	b.n	800fe94 <HAL_DMA_IRQHandler+0x42c>
 800fcd6:	4a1a      	ldr	r2, [pc, #104]	; (800fd40 <HAL_DMA_IRQHandler+0x2d8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d100      	bne.n	800fcde <HAL_DMA_IRQHandler+0x276>
 800fcdc:	e0dd      	b.n	800fe9a <HAL_DMA_IRQHandler+0x432>
 800fcde:	4a20      	ldr	r2, [pc, #128]	; (800fd60 <HAL_DMA_IRQHandler+0x2f8>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d100      	bne.n	800fce6 <HAL_DMA_IRQHandler+0x27e>
 800fce4:	e0dc      	b.n	800fea0 <HAL_DMA_IRQHandler+0x438>
 800fce6:	4a1f      	ldr	r2, [pc, #124]	; (800fd64 <HAL_DMA_IRQHandler+0x2fc>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d100      	bne.n	800fcee <HAL_DMA_IRQHandler+0x286>
 800fcec:	e0da      	b.n	800fea4 <HAL_DMA_IRQHandler+0x43c>
 800fcee:	4a1e      	ldr	r2, [pc, #120]	; (800fd68 <HAL_DMA_IRQHandler+0x300>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d100      	bne.n	800fcf6 <HAL_DMA_IRQHandler+0x28e>
 800fcf4:	e0d8      	b.n	800fea8 <HAL_DMA_IRQHandler+0x440>
 800fcf6:	4a1d      	ldr	r2, [pc, #116]	; (800fd6c <HAL_DMA_IRQHandler+0x304>)
 800fcf8:	189a      	adds	r2, r3, r2
 800fcfa:	4250      	negs	r0, r2
 800fcfc:	4142      	adcs	r2, r0
 800fcfe:	4252      	negs	r2, r2
 800fd00:	481d      	ldr	r0, [pc, #116]	; (800fd78 <HAL_DMA_IRQHandler+0x310>)
 800fd02:	4002      	ands	r2, r0
 800fd04:	2080      	movs	r0, #128	; 0x80
 800fd06:	02c0      	lsls	r0, r0, #11
 800fd08:	4684      	mov	ip, r0
 800fd0a:	4462      	add	r2, ip
 800fd0c:	e07e      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd0e:	2380      	movs	r3, #128	; 0x80
 800fd10:	e7b1      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd12:	2380      	movs	r3, #128	; 0x80
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	e7ae      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd18:	2380      	movs	r3, #128	; 0x80
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	e7ab      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd1e:	2380      	movs	r3, #128	; 0x80
 800fd20:	031b      	lsls	r3, r3, #12
 800fd22:	e7a8      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd24:	2380      	movs	r3, #128	; 0x80
 800fd26:	041b      	lsls	r3, r3, #16
 800fd28:	e7a5      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd2a:	2380      	movs	r3, #128	; 0x80
 800fd2c:	051b      	lsls	r3, r3, #20
 800fd2e:	e7a2      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd30:	2308      	movs	r3, #8
 800fd32:	e7a0      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd34:	2380      	movs	r3, #128	; 0x80
 800fd36:	e79e      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd38:	2380      	movs	r3, #128	; 0x80
 800fd3a:	011b      	lsls	r3, r3, #4
 800fd3c:	e79b      	b.n	800fc76 <HAL_DMA_IRQHandler+0x20e>
 800fd3e:	46c0      	nop			; (mov r8, r8)
 800fd40:	40020080 	.word	0x40020080
 800fd44:	40020400 	.word	0x40020400
 800fd48:	40020008 	.word	0x40020008
 800fd4c:	4002001c 	.word	0x4002001c
 800fd50:	40020030 	.word	0x40020030
 800fd54:	40020044 	.word	0x40020044
 800fd58:	40020058 	.word	0x40020058
 800fd5c:	4002006c 	.word	0x4002006c
 800fd60:	40020408 	.word	0x40020408
 800fd64:	4002041c 	.word	0x4002041c
 800fd68:	40020430 	.word	0x40020430
 800fd6c:	bffdfbbc 	.word	0xbffdfbbc
 800fd70:	fff88000 	.word	0xfff88000
 800fd74:	40020000 	.word	0x40020000
 800fd78:	fffc4000 	.word	0xfffc4000
 800fd7c:	4aaa      	ldr	r2, [pc, #680]	; (8010028 <HAL_DMA_IRQHandler+0x5c0>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d027      	beq.n	800fdd2 <HAL_DMA_IRQHandler+0x36a>
 800fd82:	4aaa      	ldr	r2, [pc, #680]	; (801002c <HAL_DMA_IRQHandler+0x5c4>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d028      	beq.n	800fdda <HAL_DMA_IRQHandler+0x372>
 800fd88:	4aa9      	ldr	r2, [pc, #676]	; (8010030 <HAL_DMA_IRQHandler+0x5c8>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d027      	beq.n	800fdde <HAL_DMA_IRQHandler+0x376>
 800fd8e:	4aa9      	ldr	r2, [pc, #676]	; (8010034 <HAL_DMA_IRQHandler+0x5cc>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d027      	beq.n	800fde4 <HAL_DMA_IRQHandler+0x37c>
 800fd94:	4aa8      	ldr	r2, [pc, #672]	; (8010038 <HAL_DMA_IRQHandler+0x5d0>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d027      	beq.n	800fdea <HAL_DMA_IRQHandler+0x382>
 800fd9a:	4aa8      	ldr	r2, [pc, #672]	; (801003c <HAL_DMA_IRQHandler+0x5d4>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d027      	beq.n	800fdf0 <HAL_DMA_IRQHandler+0x388>
 800fda0:	4aa7      	ldr	r2, [pc, #668]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d027      	beq.n	800fdf6 <HAL_DMA_IRQHandler+0x38e>
 800fda6:	4aa7      	ldr	r2, [pc, #668]	; (8010044 <HAL_DMA_IRQHandler+0x5dc>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d027      	beq.n	800fdfc <HAL_DMA_IRQHandler+0x394>
 800fdac:	4aa6      	ldr	r2, [pc, #664]	; (8010048 <HAL_DMA_IRQHandler+0x5e0>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d026      	beq.n	800fe00 <HAL_DMA_IRQHandler+0x398>
 800fdb2:	4aa6      	ldr	r2, [pc, #664]	; (801004c <HAL_DMA_IRQHandler+0x5e4>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d025      	beq.n	800fe04 <HAL_DMA_IRQHandler+0x39c>
 800fdb8:	4aa5      	ldr	r2, [pc, #660]	; (8010050 <HAL_DMA_IRQHandler+0x5e8>)
 800fdba:	4694      	mov	ip, r2
 800fdbc:	4463      	add	r3, ip
 800fdbe:	425a      	negs	r2, r3
 800fdc0:	4153      	adcs	r3, r2
 800fdc2:	425b      	negs	r3, r3
 800fdc4:	4aa3      	ldr	r2, [pc, #652]	; (8010054 <HAL_DMA_IRQHandler+0x5ec>)
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	2280      	movs	r2, #128	; 0x80
 800fdca:	0312      	lsls	r2, r2, #12
 800fdcc:	4694      	mov	ip, r2
 800fdce:	4463      	add	r3, ip
 800fdd0:	e000      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdd2:	2308      	movs	r3, #8
 800fdd4:	4aa0      	ldr	r2, [pc, #640]	; (8010058 <HAL_DMA_IRQHandler+0x5f0>)
 800fdd6:	6053      	str	r3, [r2, #4]
 800fdd8:	e74f      	b.n	800fc7a <HAL_DMA_IRQHandler+0x212>
 800fdda:	2380      	movs	r3, #128	; 0x80
 800fddc:	e7fa      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdde:	2380      	movs	r3, #128	; 0x80
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	e7f7      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fde4:	2380      	movs	r3, #128	; 0x80
 800fde6:	021b      	lsls	r3, r3, #8
 800fde8:	e7f4      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdea:	2380      	movs	r3, #128	; 0x80
 800fdec:	031b      	lsls	r3, r3, #12
 800fdee:	e7f1      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdf0:	2380      	movs	r3, #128	; 0x80
 800fdf2:	041b      	lsls	r3, r3, #16
 800fdf4:	e7ee      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdf6:	2380      	movs	r3, #128	; 0x80
 800fdf8:	051b      	lsls	r3, r3, #20
 800fdfa:	e7eb      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fdfc:	2308      	movs	r3, #8
 800fdfe:	e7e9      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fe00:	2380      	movs	r3, #128	; 0x80
 800fe02:	e7e7      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
 800fe04:	2380      	movs	r3, #128	; 0x80
 800fe06:	011b      	lsls	r3, r3, #4
 800fe08:	e7e4      	b.n	800fdd4 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe0a:	2204      	movs	r2, #4
 800fe0c:	420a      	tst	r2, r1
 800fe0e:	d152      	bne.n	800feb6 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fe10:	6821      	ldr	r1, [r4, #0]
 800fe12:	4b92      	ldr	r3, [pc, #584]	; (801005c <HAL_DMA_IRQHandler+0x5f4>)
 800fe14:	6818      	ldr	r0, [r3, #0]
 800fe16:	4a84      	ldr	r2, [pc, #528]	; (8010028 <HAL_DMA_IRQHandler+0x5c0>)
 800fe18:	4291      	cmp	r1, r2
 800fe1a:	d100      	bne.n	800fe1e <HAL_DMA_IRQHandler+0x3b6>
 800fe1c:	e16b      	b.n	80100f6 <HAL_DMA_IRQHandler+0x68e>
 800fe1e:	4a83      	ldr	r2, [pc, #524]	; (801002c <HAL_DMA_IRQHandler+0x5c4>)
 800fe20:	4291      	cmp	r1, r2
 800fe22:	d100      	bne.n	800fe26 <HAL_DMA_IRQHandler+0x3be>
 800fe24:	e1aa      	b.n	801017c <HAL_DMA_IRQHandler+0x714>
 800fe26:	4a82      	ldr	r2, [pc, #520]	; (8010030 <HAL_DMA_IRQHandler+0x5c8>)
 800fe28:	4291      	cmp	r1, r2
 800fe2a:	d100      	bne.n	800fe2e <HAL_DMA_IRQHandler+0x3c6>
 800fe2c:	e1a8      	b.n	8010180 <HAL_DMA_IRQHandler+0x718>
 800fe2e:	4a81      	ldr	r2, [pc, #516]	; (8010034 <HAL_DMA_IRQHandler+0x5cc>)
 800fe30:	4291      	cmp	r1, r2
 800fe32:	d100      	bne.n	800fe36 <HAL_DMA_IRQHandler+0x3ce>
 800fe34:	e1a7      	b.n	8010186 <HAL_DMA_IRQHandler+0x71e>
 800fe36:	4b80      	ldr	r3, [pc, #512]	; (8010038 <HAL_DMA_IRQHandler+0x5d0>)
 800fe38:	4299      	cmp	r1, r3
 800fe3a:	d100      	bne.n	800fe3e <HAL_DMA_IRQHandler+0x3d6>
 800fe3c:	e1a6      	b.n	801018c <HAL_DMA_IRQHandler+0x724>
 800fe3e:	4b7f      	ldr	r3, [pc, #508]	; (801003c <HAL_DMA_IRQHandler+0x5d4>)
 800fe40:	4299      	cmp	r1, r3
 800fe42:	d100      	bne.n	800fe46 <HAL_DMA_IRQHandler+0x3de>
 800fe44:	e1a5      	b.n	8010192 <HAL_DMA_IRQHandler+0x72a>
 800fe46:	4b7e      	ldr	r3, [pc, #504]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	d100      	bne.n	800fe4e <HAL_DMA_IRQHandler+0x3e6>
 800fe4c:	e1a4      	b.n	8010198 <HAL_DMA_IRQHandler+0x730>
 800fe4e:	4b7d      	ldr	r3, [pc, #500]	; (8010044 <HAL_DMA_IRQHandler+0x5dc>)
 800fe50:	4299      	cmp	r1, r3
 800fe52:	d100      	bne.n	800fe56 <HAL_DMA_IRQHandler+0x3ee>
 800fe54:	e1a3      	b.n	801019e <HAL_DMA_IRQHandler+0x736>
 800fe56:	4b7c      	ldr	r3, [pc, #496]	; (8010048 <HAL_DMA_IRQHandler+0x5e0>)
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	d100      	bne.n	800fe5e <HAL_DMA_IRQHandler+0x3f6>
 800fe5c:	e1a1      	b.n	80101a2 <HAL_DMA_IRQHandler+0x73a>
 800fe5e:	4b7b      	ldr	r3, [pc, #492]	; (801004c <HAL_DMA_IRQHandler+0x5e4>)
 800fe60:	4299      	cmp	r1, r3
 800fe62:	d100      	bne.n	800fe66 <HAL_DMA_IRQHandler+0x3fe>
 800fe64:	e19f      	b.n	80101a6 <HAL_DMA_IRQHandler+0x73e>
 800fe66:	4b7a      	ldr	r3, [pc, #488]	; (8010050 <HAL_DMA_IRQHandler+0x5e8>)
 800fe68:	18ca      	adds	r2, r1, r3
 800fe6a:	4253      	negs	r3, r2
 800fe6c:	415a      	adcs	r2, r3
 800fe6e:	4252      	negs	r2, r2
 800fe70:	4b7b      	ldr	r3, [pc, #492]	; (8010060 <HAL_DMA_IRQHandler+0x5f8>)
 800fe72:	4013      	ands	r3, r2
 800fe74:	2280      	movs	r2, #128	; 0x80
 800fe76:	0292      	lsls	r2, r2, #10
 800fe78:	4694      	mov	ip, r2
 800fe7a:	4463      	add	r3, ip
 800fe7c:	e13c      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe7e:	2240      	movs	r2, #64	; 0x40
 800fe80:	e7c4      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fe82:	2280      	movs	r2, #128	; 0x80
 800fe84:	00d2      	lsls	r2, r2, #3
 800fe86:	e7c1      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fe88:	2280      	movs	r2, #128	; 0x80
 800fe8a:	01d2      	lsls	r2, r2, #7
 800fe8c:	e7be      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fe8e:	2280      	movs	r2, #128	; 0x80
 800fe90:	02d2      	lsls	r2, r2, #11
 800fe92:	e7bb      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fe94:	2280      	movs	r2, #128	; 0x80
 800fe96:	03d2      	lsls	r2, r2, #15
 800fe98:	e7b8      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fe9a:	2280      	movs	r2, #128	; 0x80
 800fe9c:	04d2      	lsls	r2, r2, #19
 800fe9e:	e7b5      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fea0:	2204      	movs	r2, #4
 800fea2:	e7b3      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fea4:	2240      	movs	r2, #64	; 0x40
 800fea6:	e7b1      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800fea8:	2280      	movs	r2, #128	; 0x80
 800feaa:	00d2      	lsls	r2, r2, #3
 800feac:	e7ae      	b.n	800fe0c <HAL_DMA_IRQHandler+0x3a4>
 800feae:	2204      	movs	r2, #4
 800feb0:	420a      	tst	r2, r1
 800feb2:	d100      	bne.n	800feb6 <HAL_DMA_IRQHandler+0x44e>
 800feb4:	e208      	b.n	80102c8 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	0752      	lsls	r2, r2, #29
 800feba:	d561      	bpl.n	800ff80 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	0692      	lsls	r2, r2, #26
 800fec0:	d403      	bmi.n	800feca <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	2104      	movs	r1, #4
 800fec6:	438a      	bics	r2, r1
 800fec8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	4a5c      	ldr	r2, [pc, #368]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d800      	bhi.n	800fed4 <HAL_DMA_IRQHandler+0x46c>
 800fed2:	e0c9      	b.n	8010068 <HAL_DMA_IRQHandler+0x600>
 800fed4:	4a54      	ldr	r2, [pc, #336]	; (8010028 <HAL_DMA_IRQHandler+0x5c0>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d047      	beq.n	800ff6a <HAL_DMA_IRQHandler+0x502>
 800feda:	4a54      	ldr	r2, [pc, #336]	; (801002c <HAL_DMA_IRQHandler+0x5c4>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d100      	bne.n	800fee2 <HAL_DMA_IRQHandler+0x47a>
 800fee0:	e089      	b.n	800fff6 <HAL_DMA_IRQHandler+0x58e>
 800fee2:	4a53      	ldr	r2, [pc, #332]	; (8010030 <HAL_DMA_IRQHandler+0x5c8>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d100      	bne.n	800feea <HAL_DMA_IRQHandler+0x482>
 800fee8:	e087      	b.n	800fffa <HAL_DMA_IRQHandler+0x592>
 800feea:	4a52      	ldr	r2, [pc, #328]	; (8010034 <HAL_DMA_IRQHandler+0x5cc>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d100      	bne.n	800fef2 <HAL_DMA_IRQHandler+0x48a>
 800fef0:	e086      	b.n	8010000 <HAL_DMA_IRQHandler+0x598>
 800fef2:	4a51      	ldr	r2, [pc, #324]	; (8010038 <HAL_DMA_IRQHandler+0x5d0>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d100      	bne.n	800fefa <HAL_DMA_IRQHandler+0x492>
 800fef8:	e085      	b.n	8010006 <HAL_DMA_IRQHandler+0x59e>
 800fefa:	4a50      	ldr	r2, [pc, #320]	; (801003c <HAL_DMA_IRQHandler+0x5d4>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d100      	bne.n	800ff02 <HAL_DMA_IRQHandler+0x49a>
 800ff00:	e084      	b.n	801000c <HAL_DMA_IRQHandler+0x5a4>
 800ff02:	4a4f      	ldr	r2, [pc, #316]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d100      	bne.n	800ff0a <HAL_DMA_IRQHandler+0x4a2>
 800ff08:	e083      	b.n	8010012 <HAL_DMA_IRQHandler+0x5aa>
 800ff0a:	4a4e      	ldr	r2, [pc, #312]	; (8010044 <HAL_DMA_IRQHandler+0x5dc>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d100      	bne.n	800ff12 <HAL_DMA_IRQHandler+0x4aa>
 800ff10:	e082      	b.n	8010018 <HAL_DMA_IRQHandler+0x5b0>
 800ff12:	4a4d      	ldr	r2, [pc, #308]	; (8010048 <HAL_DMA_IRQHandler+0x5e0>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d100      	bne.n	800ff1a <HAL_DMA_IRQHandler+0x4b2>
 800ff18:	e080      	b.n	801001c <HAL_DMA_IRQHandler+0x5b4>
 800ff1a:	4a4c      	ldr	r2, [pc, #304]	; (801004c <HAL_DMA_IRQHandler+0x5e4>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d07f      	beq.n	8010020 <HAL_DMA_IRQHandler+0x5b8>
 800ff20:	4a4b      	ldr	r2, [pc, #300]	; (8010050 <HAL_DMA_IRQHandler+0x5e8>)
 800ff22:	4694      	mov	ip, r2
 800ff24:	4463      	add	r3, ip
 800ff26:	425a      	negs	r2, r3
 800ff28:	4153      	adcs	r3, r2
 800ff2a:	425b      	negs	r3, r3
 800ff2c:	4a4d      	ldr	r2, [pc, #308]	; (8010064 <HAL_DMA_IRQHandler+0x5fc>)
 800ff2e:	4013      	ands	r3, r2
 800ff30:	2280      	movs	r2, #128	; 0x80
 800ff32:	02d2      	lsls	r2, r2, #11
 800ff34:	4694      	mov	ip, r2
 800ff36:	4463      	add	r3, ip
 800ff38:	e018      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff3a:	2240      	movs	r2, #64	; 0x40
 800ff3c:	e7b8      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff3e:	2280      	movs	r2, #128	; 0x80
 800ff40:	00d2      	lsls	r2, r2, #3
 800ff42:	e7b5      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff44:	2280      	movs	r2, #128	; 0x80
 800ff46:	01d2      	lsls	r2, r2, #7
 800ff48:	e7b2      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff4a:	2280      	movs	r2, #128	; 0x80
 800ff4c:	02d2      	lsls	r2, r2, #11
 800ff4e:	e7af      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff50:	2280      	movs	r2, #128	; 0x80
 800ff52:	03d2      	lsls	r2, r2, #15
 800ff54:	e7ac      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff56:	2280      	movs	r2, #128	; 0x80
 800ff58:	04d2      	lsls	r2, r2, #19
 800ff5a:	e7a9      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff5c:	2204      	movs	r2, #4
 800ff5e:	e7a7      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff60:	2240      	movs	r2, #64	; 0x40
 800ff62:	e7a5      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
 800ff64:	2280      	movs	r2, #128	; 0x80
 800ff66:	00d2      	lsls	r2, r2, #3
 800ff68:	e7a2      	b.n	800feb0 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ff6a:	2304      	movs	r3, #4
 800ff6c:	4a3b      	ldr	r2, [pc, #236]	; (801005c <HAL_DMA_IRQHandler+0x5f4>)
 800ff6e:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800ff70:	2321      	movs	r3, #33	; 0x21
 800ff72:	2211      	movs	r2, #17
 800ff74:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800ff76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 800ff7c:	0020      	movs	r0, r4
 800ff7e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ff80:	6821      	ldr	r1, [r4, #0]
 800ff82:	4b2f      	ldr	r3, [pc, #188]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800ff84:	4299      	cmp	r1, r3
 800ff86:	d900      	bls.n	800ff8a <HAL_DMA_IRQHandler+0x522>
 800ff88:	e743      	b.n	800fe12 <HAL_DMA_IRQHandler+0x3aa>
 800ff8a:	4b33      	ldr	r3, [pc, #204]	; (8010058 <HAL_DMA_IRQHandler+0x5f0>)
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	4a26      	ldr	r2, [pc, #152]	; (8010028 <HAL_DMA_IRQHandler+0x5c0>)
 800ff90:	4291      	cmp	r1, r2
 800ff92:	d100      	bne.n	800ff96 <HAL_DMA_IRQHandler+0x52e>
 800ff94:	e10a      	b.n	80101ac <HAL_DMA_IRQHandler+0x744>
 800ff96:	4a25      	ldr	r2, [pc, #148]	; (801002c <HAL_DMA_IRQHandler+0x5c4>)
 800ff98:	4291      	cmp	r1, r2
 800ff9a:	d100      	bne.n	800ff9e <HAL_DMA_IRQHandler+0x536>
 800ff9c:	e10c      	b.n	80101b8 <HAL_DMA_IRQHandler+0x750>
 800ff9e:	4a24      	ldr	r2, [pc, #144]	; (8010030 <HAL_DMA_IRQHandler+0x5c8>)
 800ffa0:	4291      	cmp	r1, r2
 800ffa2:	d100      	bne.n	800ffa6 <HAL_DMA_IRQHandler+0x53e>
 800ffa4:	e10a      	b.n	80101bc <HAL_DMA_IRQHandler+0x754>
 800ffa6:	4a23      	ldr	r2, [pc, #140]	; (8010034 <HAL_DMA_IRQHandler+0x5cc>)
 800ffa8:	4291      	cmp	r1, r2
 800ffaa:	d100      	bne.n	800ffae <HAL_DMA_IRQHandler+0x546>
 800ffac:	e109      	b.n	80101c2 <HAL_DMA_IRQHandler+0x75a>
 800ffae:	4b22      	ldr	r3, [pc, #136]	; (8010038 <HAL_DMA_IRQHandler+0x5d0>)
 800ffb0:	4299      	cmp	r1, r3
 800ffb2:	d100      	bne.n	800ffb6 <HAL_DMA_IRQHandler+0x54e>
 800ffb4:	e108      	b.n	80101c8 <HAL_DMA_IRQHandler+0x760>
 800ffb6:	4b21      	ldr	r3, [pc, #132]	; (801003c <HAL_DMA_IRQHandler+0x5d4>)
 800ffb8:	4299      	cmp	r1, r3
 800ffba:	d100      	bne.n	800ffbe <HAL_DMA_IRQHandler+0x556>
 800ffbc:	e107      	b.n	80101ce <HAL_DMA_IRQHandler+0x766>
 800ffbe:	4b20      	ldr	r3, [pc, #128]	; (8010040 <HAL_DMA_IRQHandler+0x5d8>)
 800ffc0:	4299      	cmp	r1, r3
 800ffc2:	d100      	bne.n	800ffc6 <HAL_DMA_IRQHandler+0x55e>
 800ffc4:	e106      	b.n	80101d4 <HAL_DMA_IRQHandler+0x76c>
 800ffc6:	4b1f      	ldr	r3, [pc, #124]	; (8010044 <HAL_DMA_IRQHandler+0x5dc>)
 800ffc8:	4299      	cmp	r1, r3
 800ffca:	d100      	bne.n	800ffce <HAL_DMA_IRQHandler+0x566>
 800ffcc:	e105      	b.n	80101da <HAL_DMA_IRQHandler+0x772>
 800ffce:	4b1e      	ldr	r3, [pc, #120]	; (8010048 <HAL_DMA_IRQHandler+0x5e0>)
 800ffd0:	4299      	cmp	r1, r3
 800ffd2:	d100      	bne.n	800ffd6 <HAL_DMA_IRQHandler+0x56e>
 800ffd4:	e103      	b.n	80101de <HAL_DMA_IRQHandler+0x776>
 800ffd6:	4b1d      	ldr	r3, [pc, #116]	; (801004c <HAL_DMA_IRQHandler+0x5e4>)
 800ffd8:	4299      	cmp	r1, r3
 800ffda:	d100      	bne.n	800ffde <HAL_DMA_IRQHandler+0x576>
 800ffdc:	e101      	b.n	80101e2 <HAL_DMA_IRQHandler+0x77a>
 800ffde:	4b1c      	ldr	r3, [pc, #112]	; (8010050 <HAL_DMA_IRQHandler+0x5e8>)
 800ffe0:	18ca      	adds	r2, r1, r3
 800ffe2:	4253      	negs	r3, r2
 800ffe4:	415a      	adcs	r2, r3
 800ffe6:	4252      	negs	r2, r2
 800ffe8:	4b1d      	ldr	r3, [pc, #116]	; (8010060 <HAL_DMA_IRQHandler+0x5f8>)
 800ffea:	4013      	ands	r3, r2
 800ffec:	2280      	movs	r2, #128	; 0x80
 800ffee:	0292      	lsls	r2, r2, #10
 800fff0:	4694      	mov	ip, r2
 800fff2:	4463      	add	r3, ip
 800fff4:	e0db      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fff6:	2340      	movs	r3, #64	; 0x40
 800fff8:	e7b8      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 800fffa:	2380      	movs	r3, #128	; 0x80
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	e7b5      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010000:	2380      	movs	r3, #128	; 0x80
 8010002:	01db      	lsls	r3, r3, #7
 8010004:	e7b2      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010006:	2380      	movs	r3, #128	; 0x80
 8010008:	02db      	lsls	r3, r3, #11
 801000a:	e7af      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 801000c:	2380      	movs	r3, #128	; 0x80
 801000e:	03db      	lsls	r3, r3, #15
 8010010:	e7ac      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010012:	2380      	movs	r3, #128	; 0x80
 8010014:	04db      	lsls	r3, r3, #19
 8010016:	e7a9      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010018:	2304      	movs	r3, #4
 801001a:	e7a7      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 801001c:	2340      	movs	r3, #64	; 0x40
 801001e:	e7a5      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010020:	2380      	movs	r3, #128	; 0x80
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	e7a2      	b.n	800ff6c <HAL_DMA_IRQHandler+0x504>
 8010026:	46c0      	nop			; (mov r8, r8)
 8010028:	40020008 	.word	0x40020008
 801002c:	4002001c 	.word	0x4002001c
 8010030:	40020030 	.word	0x40020030
 8010034:	40020044 	.word	0x40020044
 8010038:	40020058 	.word	0x40020058
 801003c:	4002006c 	.word	0x4002006c
 8010040:	40020080 	.word	0x40020080
 8010044:	40020408 	.word	0x40020408
 8010048:	4002041c 	.word	0x4002041c
 801004c:	40020430 	.word	0x40020430
 8010050:	bffdfbbc 	.word	0xbffdfbbc
 8010054:	fff88000 	.word	0xfff88000
 8010058:	40020000 	.word	0x40020000
 801005c:	40020400 	.word	0x40020400
 8010060:	fffe2000 	.word	0xfffe2000
 8010064:	fffc4000 	.word	0xfffc4000
 8010068:	4a9b      	ldr	r2, [pc, #620]	; (80102d8 <HAL_DMA_IRQHandler+0x870>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d027      	beq.n	80100be <HAL_DMA_IRQHandler+0x656>
 801006e:	4a9b      	ldr	r2, [pc, #620]	; (80102dc <HAL_DMA_IRQHandler+0x874>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d028      	beq.n	80100c6 <HAL_DMA_IRQHandler+0x65e>
 8010074:	4a9a      	ldr	r2, [pc, #616]	; (80102e0 <HAL_DMA_IRQHandler+0x878>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d027      	beq.n	80100ca <HAL_DMA_IRQHandler+0x662>
 801007a:	4a9a      	ldr	r2, [pc, #616]	; (80102e4 <HAL_DMA_IRQHandler+0x87c>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d027      	beq.n	80100d0 <HAL_DMA_IRQHandler+0x668>
 8010080:	4a99      	ldr	r2, [pc, #612]	; (80102e8 <HAL_DMA_IRQHandler+0x880>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d027      	beq.n	80100d6 <HAL_DMA_IRQHandler+0x66e>
 8010086:	4a99      	ldr	r2, [pc, #612]	; (80102ec <HAL_DMA_IRQHandler+0x884>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d027      	beq.n	80100dc <HAL_DMA_IRQHandler+0x674>
 801008c:	4a98      	ldr	r2, [pc, #608]	; (80102f0 <HAL_DMA_IRQHandler+0x888>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d027      	beq.n	80100e2 <HAL_DMA_IRQHandler+0x67a>
 8010092:	4a98      	ldr	r2, [pc, #608]	; (80102f4 <HAL_DMA_IRQHandler+0x88c>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d027      	beq.n	80100e8 <HAL_DMA_IRQHandler+0x680>
 8010098:	4a97      	ldr	r2, [pc, #604]	; (80102f8 <HAL_DMA_IRQHandler+0x890>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d026      	beq.n	80100ec <HAL_DMA_IRQHandler+0x684>
 801009e:	4a97      	ldr	r2, [pc, #604]	; (80102fc <HAL_DMA_IRQHandler+0x894>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d025      	beq.n	80100f0 <HAL_DMA_IRQHandler+0x688>
 80100a4:	4a96      	ldr	r2, [pc, #600]	; (8010300 <HAL_DMA_IRQHandler+0x898>)
 80100a6:	4694      	mov	ip, r2
 80100a8:	4463      	add	r3, ip
 80100aa:	425a      	negs	r2, r3
 80100ac:	4153      	adcs	r3, r2
 80100ae:	425b      	negs	r3, r3
 80100b0:	4a94      	ldr	r2, [pc, #592]	; (8010304 <HAL_DMA_IRQHandler+0x89c>)
 80100b2:	4013      	ands	r3, r2
 80100b4:	2280      	movs	r2, #128	; 0x80
 80100b6:	02d2      	lsls	r2, r2, #11
 80100b8:	4694      	mov	ip, r2
 80100ba:	4463      	add	r3, ip
 80100bc:	e000      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100be:	2304      	movs	r3, #4
 80100c0:	4a91      	ldr	r2, [pc, #580]	; (8010308 <HAL_DMA_IRQHandler+0x8a0>)
 80100c2:	6053      	str	r3, [r2, #4]
 80100c4:	e754      	b.n	800ff70 <HAL_DMA_IRQHandler+0x508>
 80100c6:	2340      	movs	r3, #64	; 0x40
 80100c8:	e7fa      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100ca:	2380      	movs	r3, #128	; 0x80
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	e7f7      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100d0:	2380      	movs	r3, #128	; 0x80
 80100d2:	01db      	lsls	r3, r3, #7
 80100d4:	e7f4      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100d6:	2380      	movs	r3, #128	; 0x80
 80100d8:	02db      	lsls	r3, r3, #11
 80100da:	e7f1      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100dc:	2380      	movs	r3, #128	; 0x80
 80100de:	03db      	lsls	r3, r3, #15
 80100e0:	e7ee      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100e2:	2380      	movs	r3, #128	; 0x80
 80100e4:	04db      	lsls	r3, r3, #19
 80100e6:	e7eb      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100e8:	2304      	movs	r3, #4
 80100ea:	e7e9      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100ec:	2340      	movs	r3, #64	; 0x40
 80100ee:	e7e7      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
 80100f0:	2380      	movs	r3, #128	; 0x80
 80100f2:	00db      	lsls	r3, r3, #3
 80100f4:	e7e4      	b.n	80100c0 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80100f6:	2302      	movs	r3, #2
 80100f8:	4003      	ands	r3, r0
 80100fa:	1e5a      	subs	r2, r3, #1
 80100fc:	4193      	sbcs	r3, r2
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d100      	bne.n	8010106 <HAL_DMA_IRQHandler+0x69e>
 8010104:	e080      	b.n	8010208 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010106:	680b      	ldr	r3, [r1, #0]
 8010108:	079b      	lsls	r3, r3, #30
 801010a:	d57d      	bpl.n	8010208 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801010c:	680b      	ldr	r3, [r1, #0]
 801010e:	069b      	lsls	r3, r3, #26
 8010110:	d403      	bmi.n	801011a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010112:	680b      	ldr	r3, [r1, #0]
 8010114:	2202      	movs	r2, #2
 8010116:	4393      	bics	r3, r2
 8010118:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4a74      	ldr	r2, [pc, #464]	; (80102f0 <HAL_DMA_IRQHandler+0x888>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d800      	bhi.n	8010124 <HAL_DMA_IRQHandler+0x6bc>
 8010122:	e08a      	b.n	801023a <HAL_DMA_IRQHandler+0x7d2>
 8010124:	4a6c      	ldr	r2, [pc, #432]	; (80102d8 <HAL_DMA_IRQHandler+0x870>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d05e      	beq.n	80101e8 <HAL_DMA_IRQHandler+0x780>
 801012a:	4a6c      	ldr	r2, [pc, #432]	; (80102dc <HAL_DMA_IRQHandler+0x874>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d100      	bne.n	8010132 <HAL_DMA_IRQHandler+0x6ca>
 8010130:	e06b      	b.n	801020a <HAL_DMA_IRQHandler+0x7a2>
 8010132:	4a6b      	ldr	r2, [pc, #428]	; (80102e0 <HAL_DMA_IRQHandler+0x878>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d06a      	beq.n	801020e <HAL_DMA_IRQHandler+0x7a6>
 8010138:	4a6a      	ldr	r2, [pc, #424]	; (80102e4 <HAL_DMA_IRQHandler+0x87c>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d06a      	beq.n	8010214 <HAL_DMA_IRQHandler+0x7ac>
 801013e:	4a6a      	ldr	r2, [pc, #424]	; (80102e8 <HAL_DMA_IRQHandler+0x880>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d06a      	beq.n	801021a <HAL_DMA_IRQHandler+0x7b2>
 8010144:	4a69      	ldr	r2, [pc, #420]	; (80102ec <HAL_DMA_IRQHandler+0x884>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d06a      	beq.n	8010220 <HAL_DMA_IRQHandler+0x7b8>
 801014a:	4a69      	ldr	r2, [pc, #420]	; (80102f0 <HAL_DMA_IRQHandler+0x888>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d06a      	beq.n	8010226 <HAL_DMA_IRQHandler+0x7be>
 8010150:	4a68      	ldr	r2, [pc, #416]	; (80102f4 <HAL_DMA_IRQHandler+0x88c>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d06a      	beq.n	801022c <HAL_DMA_IRQHandler+0x7c4>
 8010156:	4a68      	ldr	r2, [pc, #416]	; (80102f8 <HAL_DMA_IRQHandler+0x890>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d069      	beq.n	8010230 <HAL_DMA_IRQHandler+0x7c8>
 801015c:	4a67      	ldr	r2, [pc, #412]	; (80102fc <HAL_DMA_IRQHandler+0x894>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d068      	beq.n	8010234 <HAL_DMA_IRQHandler+0x7cc>
 8010162:	4a67      	ldr	r2, [pc, #412]	; (8010300 <HAL_DMA_IRQHandler+0x898>)
 8010164:	4694      	mov	ip, r2
 8010166:	4463      	add	r3, ip
 8010168:	425a      	negs	r2, r3
 801016a:	4153      	adcs	r3, r2
 801016c:	425b      	negs	r3, r3
 801016e:	4a67      	ldr	r2, [pc, #412]	; (801030c <HAL_DMA_IRQHandler+0x8a4>)
 8010170:	4013      	ands	r3, r2
 8010172:	2280      	movs	r2, #128	; 0x80
 8010174:	0292      	lsls	r2, r2, #10
 8010176:	4694      	mov	ip, r2
 8010178:	4463      	add	r3, ip
 801017a:	e036      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801017c:	2320      	movs	r3, #32
 801017e:	e7bb      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 8010180:	2380      	movs	r3, #128	; 0x80
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	e7b8      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 8010186:	2380      	movs	r3, #128	; 0x80
 8010188:	019b      	lsls	r3, r3, #6
 801018a:	e7b5      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 801018c:	2380      	movs	r3, #128	; 0x80
 801018e:	029b      	lsls	r3, r3, #10
 8010190:	e7b2      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 8010192:	2380      	movs	r3, #128	; 0x80
 8010194:	039b      	lsls	r3, r3, #14
 8010196:	e7af      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 8010198:	2380      	movs	r3, #128	; 0x80
 801019a:	049b      	lsls	r3, r3, #18
 801019c:	e7ac      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 801019e:	2302      	movs	r3, #2
 80101a0:	e7aa      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 80101a2:	2320      	movs	r3, #32
 80101a4:	e7a8      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 80101a6:	2380      	movs	r3, #128	; 0x80
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	e7a5      	b.n	80100f8 <HAL_DMA_IRQHandler+0x690>
 80101ac:	2302      	movs	r3, #2
 80101ae:	4003      	ands	r3, r0
 80101b0:	1e5a      	subs	r2, r3, #1
 80101b2:	4193      	sbcs	r3, r2
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	e7a3      	b.n	8010100 <HAL_DMA_IRQHandler+0x698>
 80101b8:	2320      	movs	r3, #32
 80101ba:	e7f8      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101bc:	2380      	movs	r3, #128	; 0x80
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	e7f5      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101c2:	2380      	movs	r3, #128	; 0x80
 80101c4:	019b      	lsls	r3, r3, #6
 80101c6:	e7f2      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101c8:	2380      	movs	r3, #128	; 0x80
 80101ca:	029b      	lsls	r3, r3, #10
 80101cc:	e7ef      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101ce:	2380      	movs	r3, #128	; 0x80
 80101d0:	039b      	lsls	r3, r3, #14
 80101d2:	e7ec      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101d4:	2380      	movs	r3, #128	; 0x80
 80101d6:	049b      	lsls	r3, r3, #18
 80101d8:	e7e9      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101da:	2302      	movs	r3, #2
 80101dc:	e7e7      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101de:	2320      	movs	r3, #32
 80101e0:	e7e5      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
 80101e2:	2380      	movs	r3, #128	; 0x80
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	e7e2      	b.n	80101ae <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80101e8:	2302      	movs	r3, #2
 80101ea:	4a49      	ldr	r2, [pc, #292]	; (8010310 <HAL_DMA_IRQHandler+0x8a8>)
 80101ec:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80101ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101f0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80101f2:	2321      	movs	r3, #33	; 0x21
 80101f4:	2201      	movs	r2, #1
 80101f6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80101f8:	3b01      	subs	r3, #1
 80101fa:	2200      	movs	r2, #0
 80101fc:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80101fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8010204:	0020      	movs	r0, r4
 8010206:	4798      	blx	r3
}  
 8010208:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801020a:	2320      	movs	r3, #32
 801020c:	e7ed      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 801020e:	2380      	movs	r3, #128	; 0x80
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	e7ea      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 8010214:	2380      	movs	r3, #128	; 0x80
 8010216:	019b      	lsls	r3, r3, #6
 8010218:	e7e7      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 801021a:	2380      	movs	r3, #128	; 0x80
 801021c:	029b      	lsls	r3, r3, #10
 801021e:	e7e4      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 8010220:	2380      	movs	r3, #128	; 0x80
 8010222:	039b      	lsls	r3, r3, #14
 8010224:	e7e1      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 8010226:	2380      	movs	r3, #128	; 0x80
 8010228:	049b      	lsls	r3, r3, #18
 801022a:	e7de      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 801022c:	2302      	movs	r3, #2
 801022e:	e7dc      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 8010230:	2320      	movs	r3, #32
 8010232:	e7da      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 8010234:	2380      	movs	r3, #128	; 0x80
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	e7d7      	b.n	80101ea <HAL_DMA_IRQHandler+0x782>
 801023a:	4a27      	ldr	r2, [pc, #156]	; (80102d8 <HAL_DMA_IRQHandler+0x870>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d027      	beq.n	8010290 <HAL_DMA_IRQHandler+0x828>
 8010240:	4a26      	ldr	r2, [pc, #152]	; (80102dc <HAL_DMA_IRQHandler+0x874>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d028      	beq.n	8010298 <HAL_DMA_IRQHandler+0x830>
 8010246:	4a26      	ldr	r2, [pc, #152]	; (80102e0 <HAL_DMA_IRQHandler+0x878>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d027      	beq.n	801029c <HAL_DMA_IRQHandler+0x834>
 801024c:	4a25      	ldr	r2, [pc, #148]	; (80102e4 <HAL_DMA_IRQHandler+0x87c>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d027      	beq.n	80102a2 <HAL_DMA_IRQHandler+0x83a>
 8010252:	4a25      	ldr	r2, [pc, #148]	; (80102e8 <HAL_DMA_IRQHandler+0x880>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d027      	beq.n	80102a8 <HAL_DMA_IRQHandler+0x840>
 8010258:	4a24      	ldr	r2, [pc, #144]	; (80102ec <HAL_DMA_IRQHandler+0x884>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d027      	beq.n	80102ae <HAL_DMA_IRQHandler+0x846>
 801025e:	4a24      	ldr	r2, [pc, #144]	; (80102f0 <HAL_DMA_IRQHandler+0x888>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d027      	beq.n	80102b4 <HAL_DMA_IRQHandler+0x84c>
 8010264:	4a23      	ldr	r2, [pc, #140]	; (80102f4 <HAL_DMA_IRQHandler+0x88c>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d027      	beq.n	80102ba <HAL_DMA_IRQHandler+0x852>
 801026a:	4a23      	ldr	r2, [pc, #140]	; (80102f8 <HAL_DMA_IRQHandler+0x890>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d026      	beq.n	80102be <HAL_DMA_IRQHandler+0x856>
 8010270:	4a22      	ldr	r2, [pc, #136]	; (80102fc <HAL_DMA_IRQHandler+0x894>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d025      	beq.n	80102c2 <HAL_DMA_IRQHandler+0x85a>
 8010276:	4a22      	ldr	r2, [pc, #136]	; (8010300 <HAL_DMA_IRQHandler+0x898>)
 8010278:	4694      	mov	ip, r2
 801027a:	4463      	add	r3, ip
 801027c:	425a      	negs	r2, r3
 801027e:	4153      	adcs	r3, r2
 8010280:	425b      	negs	r3, r3
 8010282:	4a22      	ldr	r2, [pc, #136]	; (801030c <HAL_DMA_IRQHandler+0x8a4>)
 8010284:	4013      	ands	r3, r2
 8010286:	2280      	movs	r2, #128	; 0x80
 8010288:	0292      	lsls	r2, r2, #10
 801028a:	4694      	mov	ip, r2
 801028c:	4463      	add	r3, ip
 801028e:	e000      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 8010290:	2302      	movs	r3, #2
 8010292:	4a1d      	ldr	r2, [pc, #116]	; (8010308 <HAL_DMA_IRQHandler+0x8a0>)
 8010294:	6053      	str	r3, [r2, #4]
 8010296:	e7aa      	b.n	80101ee <HAL_DMA_IRQHandler+0x786>
 8010298:	2320      	movs	r3, #32
 801029a:	e7fa      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 801029c:	2380      	movs	r3, #128	; 0x80
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	e7f7      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102a2:	2380      	movs	r3, #128	; 0x80
 80102a4:	019b      	lsls	r3, r3, #6
 80102a6:	e7f4      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102a8:	2380      	movs	r3, #128	; 0x80
 80102aa:	029b      	lsls	r3, r3, #10
 80102ac:	e7f1      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102ae:	2380      	movs	r3, #128	; 0x80
 80102b0:	039b      	lsls	r3, r3, #14
 80102b2:	e7ee      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102b4:	2380      	movs	r3, #128	; 0x80
 80102b6:	049b      	lsls	r3, r3, #18
 80102b8:	e7eb      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102ba:	2302      	movs	r3, #2
 80102bc:	e7e9      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102be:	2320      	movs	r3, #32
 80102c0:	e7e7      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
 80102c2:	2380      	movs	r3, #128	; 0x80
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	e7e4      	b.n	8010292 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80102c8:	6821      	ldr	r1, [r4, #0]
 80102ca:	e65e      	b.n	800ff8a <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	0712      	lsls	r2, r2, #28
 80102d0:	d500      	bpl.n	80102d4 <HAL_DMA_IRQHandler+0x86c>
 80102d2:	e49b      	b.n	800fc0c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	e44b      	b.n	800fb70 <HAL_DMA_IRQHandler+0x108>
 80102d8:	40020008 	.word	0x40020008
 80102dc:	4002001c 	.word	0x4002001c
 80102e0:	40020030 	.word	0x40020030
 80102e4:	40020044 	.word	0x40020044
 80102e8:	40020058 	.word	0x40020058
 80102ec:	4002006c 	.word	0x4002006c
 80102f0:	40020080 	.word	0x40020080
 80102f4:	40020408 	.word	0x40020408
 80102f8:	4002041c 	.word	0x4002041c
 80102fc:	40020430 	.word	0x40020430
 8010300:	bffdfbbc 	.word	0xbffdfbbc
 8010304:	fffc4000 	.word	0xfffc4000
 8010308:	40020000 	.word	0x40020000
 801030c:	fffe2000 	.word	0xfffe2000
 8010310:	40020400 	.word	0x40020400

08010314 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010314:	4b0a      	ldr	r3, [pc, #40]	; (8010340 <FLASH_SetErrorCode+0x2c>)
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	06db      	lsls	r3, r3, #27
 801031a:	d504      	bpl.n	8010326 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801031c:	4a09      	ldr	r2, [pc, #36]	; (8010344 <FLASH_SetErrorCode+0x30>)
 801031e:	69d3      	ldr	r3, [r2, #28]
 8010320:	2102      	movs	r1, #2
 8010322:	430b      	orrs	r3, r1
 8010324:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010326:	4b06      	ldr	r3, [pc, #24]	; (8010340 <FLASH_SetErrorCode+0x2c>)
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	075b      	lsls	r3, r3, #29
 801032c:	d504      	bpl.n	8010338 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801032e:	4a05      	ldr	r2, [pc, #20]	; (8010344 <FLASH_SetErrorCode+0x30>)
 8010330:	69d3      	ldr	r3, [r2, #28]
 8010332:	2101      	movs	r1, #1
 8010334:	430b      	orrs	r3, r1
 8010336:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010338:	4b01      	ldr	r3, [pc, #4]	; (8010340 <FLASH_SetErrorCode+0x2c>)
 801033a:	2214      	movs	r2, #20
 801033c:	60da      	str	r2, [r3, #12]
}  
 801033e:	4770      	bx	lr
 8010340:	40022000 	.word	0x40022000
 8010344:	20006d18 	.word	0x20006d18

08010348 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010348:	4b05      	ldr	r3, [pc, #20]	; (8010360 <HAL_FLASH_Unlock+0x18>)
 801034a:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 801034c:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 801034e:	061b      	lsls	r3, r3, #24
 8010350:	d505      	bpl.n	801035e <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010352:	4b03      	ldr	r3, [pc, #12]	; (8010360 <HAL_FLASH_Unlock+0x18>)
 8010354:	4a03      	ldr	r2, [pc, #12]	; (8010364 <HAL_FLASH_Unlock+0x1c>)
 8010356:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010358:	4a03      	ldr	r2, [pc, #12]	; (8010368 <HAL_FLASH_Unlock+0x20>)
 801035a:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 801035c:	2000      	movs	r0, #0
}
 801035e:	4770      	bx	lr
 8010360:	40022000 	.word	0x40022000
 8010364:	45670123 	.word	0x45670123
 8010368:	cdef89ab 	.word	0xcdef89ab

0801036c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801036c:	4a03      	ldr	r2, [pc, #12]	; (801037c <HAL_FLASH_Lock+0x10>)
 801036e:	6913      	ldr	r3, [r2, #16]
 8010370:	2180      	movs	r1, #128	; 0x80
 8010372:	430b      	orrs	r3, r1
 8010374:	6113      	str	r3, [r2, #16]
}
 8010376:	2000      	movs	r0, #0
 8010378:	4770      	bx	lr
 801037a:	46c0      	nop			; (mov r8, r8)
 801037c:	40022000 	.word	0x40022000

08010380 <FLASH_WaitForLastOperation>:
{
 8010380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010382:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010384:	f7ff f928 	bl	800f5d8 <HAL_GetTick>
 8010388:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801038a:	4e13      	ldr	r6, [pc, #76]	; (80103d8 <FLASH_WaitForLastOperation+0x58>)
 801038c:	2501      	movs	r5, #1
 801038e:	68f3      	ldr	r3, [r6, #12]
 8010390:	421d      	tst	r5, r3
 8010392:	d00a      	beq.n	80103aa <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010394:	1c63      	adds	r3, r4, #1
 8010396:	d0fa      	beq.n	801038e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010398:	2c00      	cmp	r4, #0
 801039a:	d01a      	beq.n	80103d2 <FLASH_WaitForLastOperation+0x52>
 801039c:	f7ff f91c 	bl	800f5d8 <HAL_GetTick>
 80103a0:	1bc0      	subs	r0, r0, r7
 80103a2:	42a0      	cmp	r0, r4
 80103a4:	d9f3      	bls.n	801038e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80103a6:	2003      	movs	r0, #3
 80103a8:	e012      	b.n	80103d0 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80103aa:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <FLASH_WaitForLastOperation+0x58>)
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	069b      	lsls	r3, r3, #26
 80103b0:	d502      	bpl.n	80103b8 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <FLASH_WaitForLastOperation+0x58>)
 80103b4:	2220      	movs	r2, #32
 80103b6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80103b8:	4b07      	ldr	r3, [pc, #28]	; (80103d8 <FLASH_WaitForLastOperation+0x58>)
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	06db      	lsls	r3, r3, #27
 80103be:	d404      	bmi.n	80103ca <FLASH_WaitForLastOperation+0x4a>
 80103c0:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <FLASH_WaitForLastOperation+0x58>)
 80103c2:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80103c4:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80103c6:	075b      	lsls	r3, r3, #29
 80103c8:	d502      	bpl.n	80103d0 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 80103ca:	f7ff ffa3 	bl	8010314 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80103ce:	2001      	movs	r0, #1
}
 80103d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80103d2:	2003      	movs	r0, #3
 80103d4:	e7fc      	b.n	80103d0 <FLASH_WaitForLastOperation+0x50>
 80103d6:	46c0      	nop			; (mov r8, r8)
 80103d8:	40022000 	.word	0x40022000

080103dc <HAL_FLASH_Program>:
{
 80103dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103de:	46de      	mov	lr, fp
 80103e0:	4657      	mov	r7, sl
 80103e2:	464e      	mov	r6, r9
 80103e4:	4645      	mov	r5, r8
 80103e6:	b5e0      	push	{r5, r6, r7, lr}
 80103e8:	b083      	sub	sp, #12
 80103ea:	0004      	movs	r4, r0
 80103ec:	000e      	movs	r6, r1
 80103ee:	9201      	str	r2, [sp, #4]
 80103f0:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80103f2:	4b2a      	ldr	r3, [pc, #168]	; (801049c <HAL_FLASH_Program+0xc0>)
 80103f4:	7e1b      	ldrb	r3, [r3, #24]
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d04b      	beq.n	8010492 <HAL_FLASH_Program+0xb6>
 80103fa:	4b28      	ldr	r3, [pc, #160]	; (801049c <HAL_FLASH_Program+0xc0>)
 80103fc:	2201      	movs	r2, #1
 80103fe:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010400:	4827      	ldr	r0, [pc, #156]	; (80104a0 <HAL_FLASH_Program+0xc4>)
 8010402:	f7ff ffbd 	bl	8010380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010406:	2800      	cmp	r0, #0
 8010408:	d139      	bne.n	801047e <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801040a:	2c01      	cmp	r4, #1
 801040c:	d043      	beq.n	8010496 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 801040e:	3c02      	subs	r4, #2
 8010410:	4263      	negs	r3, r4
 8010412:	415c      	adcs	r4, r3
 8010414:	4264      	negs	r4, r4
 8010416:	2301      	movs	r3, #1
 8010418:	439c      	bics	r4, r3
 801041a:	46a0      	mov	r8, r4
 801041c:	3303      	adds	r3, #3
 801041e:	469c      	mov	ip, r3
 8010420:	44e0      	add	r8, ip
{
 8010422:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010424:	4b1d      	ldr	r3, [pc, #116]	; (801049c <HAL_FLASH_Program+0xc0>)
 8010426:	469b      	mov	fp, r3
 8010428:	2300      	movs	r3, #0
 801042a:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801042c:	4c1d      	ldr	r4, [pc, #116]	; (80104a4 <HAL_FLASH_Program+0xc8>)
 801042e:	e01e      	b.n	801046e <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010430:	2220      	movs	r2, #32
 8010432:	1ad2      	subs	r2, r2, r3
 8010434:	4649      	mov	r1, r9
 8010436:	4091      	lsls	r1, r2
 8010438:	000a      	movs	r2, r1
 801043a:	9901      	ldr	r1, [sp, #4]
 801043c:	40d9      	lsrs	r1, r3
 801043e:	000b      	movs	r3, r1
 8010440:	4313      	orrs	r3, r2
 8010442:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010444:	465a      	mov	r2, fp
 8010446:	4651      	mov	r1, sl
 8010448:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801044a:	6922      	ldr	r2, [r4, #16]
 801044c:	2701      	movs	r7, #1
 801044e:	433a      	orrs	r2, r7
 8010450:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010452:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010454:	4812      	ldr	r0, [pc, #72]	; (80104a0 <HAL_FLASH_Program+0xc4>)
 8010456:	f7ff ff93 	bl	8010380 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801045a:	6923      	ldr	r3, [r4, #16]
 801045c:	43bb      	bics	r3, r7
 801045e:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010460:	2800      	cmp	r0, #0
 8010462:	d10c      	bne.n	801047e <HAL_FLASH_Program+0xa2>
 8010464:	3501      	adds	r5, #1
 8010466:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010468:	b2eb      	uxtb	r3, r5
 801046a:	4598      	cmp	r8, r3
 801046c:	d907      	bls.n	801047e <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801046e:	012b      	lsls	r3, r5, #4
 8010470:	2220      	movs	r2, #32
 8010472:	4252      	negs	r2, r2
 8010474:	189a      	adds	r2, r3, r2
 8010476:	d4db      	bmi.n	8010430 <HAL_FLASH_Program+0x54>
 8010478:	464b      	mov	r3, r9
 801047a:	40d3      	lsrs	r3, r2
 801047c:	e7e1      	b.n	8010442 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 801047e:	4b07      	ldr	r3, [pc, #28]	; (801049c <HAL_FLASH_Program+0xc0>)
 8010480:	2200      	movs	r2, #0
 8010482:	761a      	strb	r2, [r3, #24]
}
 8010484:	b003      	add	sp, #12
 8010486:	bc3c      	pop	{r2, r3, r4, r5}
 8010488:	4690      	mov	r8, r2
 801048a:	4699      	mov	r9, r3
 801048c:	46a2      	mov	sl, r4
 801048e:	46ab      	mov	fp, r5
 8010490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010492:	2002      	movs	r0, #2
 8010494:	e7f6      	b.n	8010484 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010496:	2301      	movs	r3, #1
 8010498:	4698      	mov	r8, r3
 801049a:	e7c2      	b.n	8010422 <HAL_FLASH_Program+0x46>
 801049c:	20006d18 	.word	0x20006d18
 80104a0:	0000c350 	.word	0x0000c350
 80104a4:	40022000 	.word	0x40022000

080104a8 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80104a8:	4b06      	ldr	r3, [pc, #24]	; (80104c4 <FLASH_MassErase+0x1c>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80104ae:	4b06      	ldr	r3, [pc, #24]	; (80104c8 <FLASH_MassErase+0x20>)
 80104b0:	691a      	ldr	r2, [r3, #16]
 80104b2:	2104      	movs	r1, #4
 80104b4:	430a      	orrs	r2, r1
 80104b6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80104b8:	691a      	ldr	r2, [r3, #16]
 80104ba:	313c      	adds	r1, #60	; 0x3c
 80104bc:	430a      	orrs	r2, r1
 80104be:	611a      	str	r2, [r3, #16]
}
 80104c0:	4770      	bx	lr
 80104c2:	46c0      	nop			; (mov r8, r8)
 80104c4:	20006d18 	.word	0x20006d18
 80104c8:	40022000 	.word	0x40022000

080104cc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80104cc:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <FLASH_PageErase+0x1c>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80104d2:	4b06      	ldr	r3, [pc, #24]	; (80104ec <FLASH_PageErase+0x20>)
 80104d4:	691a      	ldr	r2, [r3, #16]
 80104d6:	2102      	movs	r1, #2
 80104d8:	430a      	orrs	r2, r1
 80104da:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80104dc:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80104de:	691a      	ldr	r2, [r3, #16]
 80104e0:	313e      	adds	r1, #62	; 0x3e
 80104e2:	430a      	orrs	r2, r1
 80104e4:	611a      	str	r2, [r3, #16]
}
 80104e6:	4770      	bx	lr
 80104e8:	20006d18 	.word	0x20006d18
 80104ec:	40022000 	.word	0x40022000

080104f0 <HAL_FLASHEx_Erase>:
{
 80104f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104f2:	46c6      	mov	lr, r8
 80104f4:	b500      	push	{lr}
 80104f6:	0006      	movs	r6, r0
 80104f8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80104fa:	4b2a      	ldr	r3, [pc, #168]	; (80105a4 <HAL_FLASHEx_Erase+0xb4>)
 80104fc:	7e1b      	ldrb	r3, [r3, #24]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d04d      	beq.n	801059e <HAL_FLASHEx_Erase+0xae>
 8010502:	4b28      	ldr	r3, [pc, #160]	; (80105a4 <HAL_FLASHEx_Erase+0xb4>)
 8010504:	2201      	movs	r2, #1
 8010506:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010508:	6803      	ldr	r3, [r0, #0]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d029      	beq.n	8010562 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801050e:	4826      	ldr	r0, [pc, #152]	; (80105a8 <HAL_FLASHEx_Erase+0xb8>)
 8010510:	f7ff ff36 	bl	8010380 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010514:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010516:	2800      	cmp	r0, #0
 8010518:	d129      	bne.n	801056e <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801051a:	2301      	movs	r3, #1
 801051c:	425b      	negs	r3, r3
 801051e:	4642      	mov	r2, r8
 8010520:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010522:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010524:	68b3      	ldr	r3, [r6, #8]
 8010526:	02db      	lsls	r3, r3, #11
 8010528:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801052a:	429c      	cmp	r4, r3
 801052c:	d235      	bcs.n	801059a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801052e:	4f1f      	ldr	r7, [pc, #124]	; (80105ac <HAL_FLASHEx_Erase+0xbc>)
 8010530:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8010532:	0020      	movs	r0, r4
 8010534:	f7ff ffca 	bl	80104cc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010538:	481b      	ldr	r0, [pc, #108]	; (80105a8 <HAL_FLASHEx_Erase+0xb8>)
 801053a:	f7ff ff21 	bl	8010380 <FLASH_WaitForLastOperation>
 801053e:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	43ab      	bics	r3, r5
 8010544:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010546:	2800      	cmp	r0, #0
 8010548:	d124      	bne.n	8010594 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 801054a:	2380      	movs	r3, #128	; 0x80
 801054c:	011b      	lsls	r3, r3, #4
 801054e:	469c      	mov	ip, r3
 8010550:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010552:	68b3      	ldr	r3, [r6, #8]
 8010554:	02db      	lsls	r3, r3, #11
 8010556:	6871      	ldr	r1, [r6, #4]
 8010558:	468c      	mov	ip, r1
 801055a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 801055c:	42a3      	cmp	r3, r4
 801055e:	d8e8      	bhi.n	8010532 <HAL_FLASHEx_Erase+0x42>
 8010560:	e005      	b.n	801056e <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010562:	4811      	ldr	r0, [pc, #68]	; (80105a8 <HAL_FLASHEx_Erase+0xb8>)
 8010564:	f7ff ff0c 	bl	8010380 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010568:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801056a:	2800      	cmp	r0, #0
 801056c:	d006      	beq.n	801057c <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 801056e:	4b0d      	ldr	r3, [pc, #52]	; (80105a4 <HAL_FLASHEx_Erase+0xb4>)
 8010570:	2100      	movs	r1, #0
 8010572:	7619      	strb	r1, [r3, #24]
}
 8010574:	0010      	movs	r0, r2
 8010576:	bc04      	pop	{r2}
 8010578:	4690      	mov	r8, r2
 801057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 801057c:	f7ff ff94 	bl	80104a8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010580:	4809      	ldr	r0, [pc, #36]	; (80105a8 <HAL_FLASHEx_Erase+0xb8>)
 8010582:	f7ff fefd 	bl	8010380 <FLASH_WaitForLastOperation>
 8010586:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010588:	4908      	ldr	r1, [pc, #32]	; (80105ac <HAL_FLASHEx_Erase+0xbc>)
 801058a:	690b      	ldr	r3, [r1, #16]
 801058c:	2004      	movs	r0, #4
 801058e:	4383      	bics	r3, r0
 8010590:	610b      	str	r3, [r1, #16]
 8010592:	e7ec      	b.n	801056e <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010594:	4643      	mov	r3, r8
 8010596:	601c      	str	r4, [r3, #0]
            break;
 8010598:	e7e9      	b.n	801056e <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801059a:	2201      	movs	r2, #1
 801059c:	e7e7      	b.n	801056e <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 801059e:	2202      	movs	r2, #2
 80105a0:	e7e8      	b.n	8010574 <HAL_FLASHEx_Erase+0x84>
 80105a2:	46c0      	nop			; (mov r8, r8)
 80105a4:	20006d18 	.word	0x20006d18
 80105a8:	0000c350 	.word	0x0000c350
 80105ac:	40022000 	.word	0x40022000

080105b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80105b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b2:	46de      	mov	lr, fp
 80105b4:	4657      	mov	r7, sl
 80105b6:	464e      	mov	r6, r9
 80105b8:	4645      	mov	r5, r8
 80105ba:	b5e0      	push	{r5, r6, r7, lr}
 80105bc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80105be:	680a      	ldr	r2, [r1, #0]
 80105c0:	2a00      	cmp	r2, #0
 80105c2:	d100      	bne.n	80105c6 <HAL_GPIO_Init+0x16>
 80105c4:	e0bf      	b.n	8010746 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 80105c6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80105c8:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80105ca:	2410      	movs	r4, #16
 80105cc:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80105ce:	3c0d      	subs	r4, #13
 80105d0:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80105d2:	2480      	movs	r4, #128	; 0x80
 80105d4:	0564      	lsls	r4, r4, #21
 80105d6:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80105d8:	4c5e      	ldr	r4, [pc, #376]	; (8010754 <HAL_GPIO_Init+0x1a4>)
 80105da:	1904      	adds	r4, r0, r4
 80105dc:	1e65      	subs	r5, r4, #1
 80105de:	41ac      	sbcs	r4, r5
 80105e0:	3404      	adds	r4, #4
 80105e2:	46a1      	mov	r9, r4
 80105e4:	e03b      	b.n	801065e <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 80105e6:	08dc      	lsrs	r4, r3, #3
 80105e8:	00a4      	lsls	r4, r4, #2
 80105ea:	1904      	adds	r4, r0, r4
 80105ec:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80105ee:	2507      	movs	r5, #7
 80105f0:	401d      	ands	r5, r3
 80105f2:	00ad      	lsls	r5, r5, #2
 80105f4:	220f      	movs	r2, #15
 80105f6:	40aa      	lsls	r2, r5
 80105f8:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80105fa:	690a      	ldr	r2, [r1, #16]
 80105fc:	40aa      	lsls	r2, r5
 80105fe:	0015      	movs	r5, r2
 8010600:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010602:	6225      	str	r5, [r4, #32]
 8010604:	e035      	b.n	8010672 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010606:	2500      	movs	r5, #0
 8010608:	465a      	mov	r2, fp
 801060a:	4095      	lsls	r5, r2
 801060c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 801060e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010610:	4c51      	ldr	r4, [pc, #324]	; (8010758 <HAL_GPIO_Init+0x1a8>)
 8010612:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010614:	9a01      	ldr	r2, [sp, #4]
 8010616:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010618:	684a      	ldr	r2, [r1, #4]
 801061a:	03d2      	lsls	r2, r2, #15
 801061c:	d500      	bpl.n	8010620 <HAL_GPIO_Init+0x70>
 801061e:	e086      	b.n	801072e <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010620:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010622:	4f4d      	ldr	r7, [pc, #308]	; (8010758 <HAL_GPIO_Init+0x1a8>)
 8010624:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8010626:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010628:	684a      	ldr	r2, [r1, #4]
 801062a:	0392      	lsls	r2, r2, #14
 801062c:	d500      	bpl.n	8010630 <HAL_GPIO_Init+0x80>
 801062e:	e081      	b.n	8010734 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010630:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010632:	4f49      	ldr	r7, [pc, #292]	; (8010758 <HAL_GPIO_Init+0x1a8>)
 8010634:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010636:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010638:	684a      	ldr	r2, [r1, #4]
 801063a:	02d2      	lsls	r2, r2, #11
 801063c:	d47d      	bmi.n	801073a <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801063e:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010640:	4f45      	ldr	r7, [pc, #276]	; (8010758 <HAL_GPIO_Init+0x1a8>)
 8010642:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010644:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010646:	684a      	ldr	r2, [r1, #4]
 8010648:	0292      	lsls	r2, r2, #10
 801064a:	d479      	bmi.n	8010740 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801064c:	0022      	movs	r2, r4
 801064e:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010650:	4c41      	ldr	r4, [pc, #260]	; (8010758 <HAL_GPIO_Init+0x1a8>)
 8010652:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8010654:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010656:	680a      	ldr	r2, [r1, #0]
 8010658:	0014      	movs	r4, r2
 801065a:	40dc      	lsrs	r4, r3
 801065c:	d073      	beq.n	8010746 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801065e:	0034      	movs	r4, r6
 8010660:	409c      	lsls	r4, r3
 8010662:	4022      	ands	r2, r4
 8010664:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8010666:	d0f5      	beq.n	8010654 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010668:	684c      	ldr	r4, [r1, #4]
 801066a:	4642      	mov	r2, r8
 801066c:	4394      	bics	r4, r2
 801066e:	2c02      	cmp	r4, #2
 8010670:	d0b9      	beq.n	80105e6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8010672:	6804      	ldr	r4, [r0, #0]
 8010674:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010676:	4665      	mov	r5, ip
 8010678:	40bd      	lsls	r5, r7
 801067a:	43ed      	mvns	r5, r5
 801067c:	402c      	ands	r4, r5
 801067e:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010680:	684c      	ldr	r4, [r1, #4]
 8010682:	4662      	mov	r2, ip
 8010684:	4014      	ands	r4, r2
 8010686:	40bc      	lsls	r4, r7
 8010688:	465a      	mov	r2, fp
 801068a:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 801068c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801068e:	684c      	ldr	r4, [r1, #4]
 8010690:	4642      	mov	r2, r8
 8010692:	4394      	bics	r4, r2
 8010694:	3c01      	subs	r4, #1
 8010696:	2c01      	cmp	r4, #1
 8010698:	d813      	bhi.n	80106c2 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 801069a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801069c:	402c      	ands	r4, r5
 801069e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80106a0:	68cc      	ldr	r4, [r1, #12]
 80106a2:	40bc      	lsls	r4, r7
 80106a4:	465a      	mov	r2, fp
 80106a6:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80106a8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80106aa:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80106ac:	0032      	movs	r2, r6
 80106ae:	409a      	lsls	r2, r3
 80106b0:	4394      	bics	r4, r2
 80106b2:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80106b4:	684a      	ldr	r2, [r1, #4]
 80106b6:	0914      	lsrs	r4, r2, #4
 80106b8:	4034      	ands	r4, r6
 80106ba:	409c      	lsls	r4, r3
 80106bc:	465a      	mov	r2, fp
 80106be:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80106c0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80106c2:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80106c4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80106c6:	688d      	ldr	r5, [r1, #8]
 80106c8:	40bd      	lsls	r5, r7
 80106ca:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80106cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80106ce:	684a      	ldr	r2, [r1, #4]
 80106d0:	4654      	mov	r4, sl
 80106d2:	4222      	tst	r2, r4
 80106d4:	d0be      	beq.n	8010654 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80106d6:	4c21      	ldr	r4, [pc, #132]	; (801075c <HAL_GPIO_Init+0x1ac>)
 80106d8:	69a5      	ldr	r5, [r4, #24]
 80106da:	4335      	orrs	r5, r6
 80106dc:	61a5      	str	r5, [r4, #24]
 80106de:	69a4      	ldr	r4, [r4, #24]
 80106e0:	4034      	ands	r4, r6
 80106e2:	9403      	str	r4, [sp, #12]
 80106e4:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80106e6:	089c      	lsrs	r4, r3, #2
 80106e8:	00a4      	lsls	r4, r4, #2
 80106ea:	4a1d      	ldr	r2, [pc, #116]	; (8010760 <HAL_GPIO_Init+0x1b0>)
 80106ec:	4693      	mov	fp, r2
 80106ee:	445c      	add	r4, fp
 80106f0:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80106f2:	4667      	mov	r7, ip
 80106f4:	401f      	ands	r7, r3
 80106f6:	00ba      	lsls	r2, r7, #2
 80106f8:	4693      	mov	fp, r2
 80106fa:	270f      	movs	r7, #15
 80106fc:	4097      	lsls	r7, r2
 80106fe:	43bd      	bics	r5, r7
 8010700:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010702:	2590      	movs	r5, #144	; 0x90
 8010704:	05ed      	lsls	r5, r5, #23
 8010706:	42a8      	cmp	r0, r5
 8010708:	d100      	bne.n	801070c <HAL_GPIO_Init+0x15c>
 801070a:	e77c      	b.n	8010606 <HAL_GPIO_Init+0x56>
 801070c:	4d15      	ldr	r5, [pc, #84]	; (8010764 <HAL_GPIO_Init+0x1b4>)
 801070e:	42a8      	cmp	r0, r5
 8010710:	d007      	beq.n	8010722 <HAL_GPIO_Init+0x172>
 8010712:	4d15      	ldr	r5, [pc, #84]	; (8010768 <HAL_GPIO_Init+0x1b8>)
 8010714:	42a8      	cmp	r0, r5
 8010716:	d006      	beq.n	8010726 <HAL_GPIO_Init+0x176>
 8010718:	4d14      	ldr	r5, [pc, #80]	; (801076c <HAL_GPIO_Init+0x1bc>)
 801071a:	42a8      	cmp	r0, r5
 801071c:	d005      	beq.n	801072a <HAL_GPIO_Init+0x17a>
 801071e:	464d      	mov	r5, r9
 8010720:	e772      	b.n	8010608 <HAL_GPIO_Init+0x58>
 8010722:	0035      	movs	r5, r6
 8010724:	e770      	b.n	8010608 <HAL_GPIO_Init+0x58>
 8010726:	2502      	movs	r5, #2
 8010728:	e76e      	b.n	8010608 <HAL_GPIO_Init+0x58>
 801072a:	4665      	mov	r5, ip
 801072c:	e76c      	b.n	8010608 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 801072e:	9a01      	ldr	r2, [sp, #4]
 8010730:	4314      	orrs	r4, r2
 8010732:	e776      	b.n	8010622 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8010734:	9a01      	ldr	r2, [sp, #4]
 8010736:	4314      	orrs	r4, r2
 8010738:	e77b      	b.n	8010632 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 801073a:	9a01      	ldr	r2, [sp, #4]
 801073c:	4314      	orrs	r4, r2
 801073e:	e77f      	b.n	8010640 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8010740:	9a01      	ldr	r2, [sp, #4]
 8010742:	4322      	orrs	r2, r4
 8010744:	e784      	b.n	8010650 <HAL_GPIO_Init+0xa0>
  } 
}
 8010746:	b005      	add	sp, #20
 8010748:	bc3c      	pop	{r2, r3, r4, r5}
 801074a:	4690      	mov	r8, r2
 801074c:	4699      	mov	r9, r3
 801074e:	46a2      	mov	sl, r4
 8010750:	46ab      	mov	fp, r5
 8010752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010754:	b7fff000 	.word	0xb7fff000
 8010758:	40010400 	.word	0x40010400
 801075c:	40021000 	.word	0x40021000
 8010760:	40010000 	.word	0x40010000
 8010764:	48000400 	.word	0x48000400
 8010768:	48000800 	.word	0x48000800
 801076c:	48000c00 	.word	0x48000c00

08010770 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010770:	6900      	ldr	r0, [r0, #16]
 8010772:	4008      	ands	r0, r1
 8010774:	1e41      	subs	r1, r0, #1
 8010776:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010778:	b2c0      	uxtb	r0, r0
  }
 801077a:	4770      	bx	lr

0801077c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801077c:	2a00      	cmp	r2, #0
 801077e:	d101      	bne.n	8010784 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010780:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010782:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010784:	6181      	str	r1, [r0, #24]
 8010786:	e7fc      	b.n	8010782 <HAL_GPIO_WritePin+0x6>

08010788 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010788:	6943      	ldr	r3, [r0, #20]
 801078a:	4059      	eors	r1, r3
 801078c:	6141      	str	r1, [r0, #20]
}
 801078e:	4770      	bx	lr

08010790 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010790:	4770      	bx	lr
	...

08010794 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010794:	4a03      	ldr	r2, [pc, #12]	; (80107a4 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010796:	6811      	ldr	r1, [r2, #0]
 8010798:	2380      	movs	r3, #128	; 0x80
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	430b      	orrs	r3, r1
 801079e:	6013      	str	r3, [r2, #0]
}
 80107a0:	4770      	bx	lr
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	40007000 	.word	0x40007000

080107a8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80107a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107aa:	46c6      	mov	lr, r8
 80107ac:	b500      	push	{lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107b2:	6803      	ldr	r3, [r0, #0]
 80107b4:	07db      	lsls	r3, r3, #31
 80107b6:	d538      	bpl.n	801082a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80107b8:	4bbd      	ldr	r3, [pc, #756]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	230c      	movs	r3, #12
 80107be:	4013      	ands	r3, r2
 80107c0:	2b04      	cmp	r3, #4
 80107c2:	d02a      	beq.n	801081a <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80107c4:	4bba      	ldr	r3, [pc, #744]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80107c6:	685a      	ldr	r2, [r3, #4]
 80107c8:	230c      	movs	r3, #12
 80107ca:	4013      	ands	r3, r2
 80107cc:	2b08      	cmp	r3, #8
 80107ce:	d108      	bne.n	80107e2 <HAL_RCC_OscConfig+0x3a>
 80107d0:	4bb7      	ldr	r3, [pc, #732]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	22c0      	movs	r2, #192	; 0xc0
 80107d6:	0252      	lsls	r2, r2, #9
 80107d8:	4013      	ands	r3, r2
 80107da:	2280      	movs	r2, #128	; 0x80
 80107dc:	0252      	lsls	r2, r2, #9
 80107de:	4293      	cmp	r3, r2
 80107e0:	d01b      	beq.n	801081a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80107e2:	4bb3      	ldr	r3, [pc, #716]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	49b3      	ldr	r1, [pc, #716]	; (8010ab4 <HAL_RCC_OscConfig+0x30c>)
 80107e8:	400a      	ands	r2, r1
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	49b2      	ldr	r1, [pc, #712]	; (8010ab8 <HAL_RCC_OscConfig+0x310>)
 80107f0:	400a      	ands	r2, r1
 80107f2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107f4:	f7fe fef0 	bl	800f5d8 <HAL_GetTick>
 80107f8:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80107fa:	4ead      	ldr	r6, [pc, #692]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80107fc:	2580      	movs	r5, #128	; 0x80
 80107fe:	02ad      	lsls	r5, r5, #10
 8010800:	6833      	ldr	r3, [r6, #0]
 8010802:	422b      	tst	r3, r5
 8010804:	d039      	beq.n	801087a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010806:	f7fe fee7 	bl	800f5d8 <HAL_GetTick>
 801080a:	1bc0      	subs	r0, r0, r7
 801080c:	2864      	cmp	r0, #100	; 0x64
 801080e:	d9f7      	bls.n	8010800 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8010810:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8010812:	b002      	add	sp, #8
 8010814:	bc04      	pop	{r2}
 8010816:	4690      	mov	r8, r2
 8010818:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801081a:	4ba5      	ldr	r3, [pc, #660]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	039b      	lsls	r3, r3, #14
 8010820:	d503      	bpl.n	801082a <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8010822:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010824:	6863      	ldr	r3, [r4, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d0f3      	beq.n	8010812 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801082a:	6823      	ldr	r3, [r4, #0]
 801082c:	079b      	lsls	r3, r3, #30
 801082e:	d400      	bmi.n	8010832 <HAL_RCC_OscConfig+0x8a>
 8010830:	e08d      	b.n	801094e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010832:	4b9f      	ldr	r3, [pc, #636]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	220c      	movs	r2, #12
 8010838:	421a      	tst	r2, r3
 801083a:	d077      	beq.n	801092c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801083c:	4b9c      	ldr	r3, [pc, #624]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801083e:	685a      	ldr	r2, [r3, #4]
 8010840:	230c      	movs	r3, #12
 8010842:	4013      	ands	r3, r2
 8010844:	2b08      	cmp	r3, #8
 8010846:	d068      	beq.n	801091a <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010848:	68e3      	ldr	r3, [r4, #12]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d100      	bne.n	8010850 <HAL_RCC_OscConfig+0xa8>
 801084e:	e0a1      	b.n	8010994 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8010850:	4a97      	ldr	r2, [pc, #604]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	2101      	movs	r1, #1
 8010856:	430b      	orrs	r3, r1
 8010858:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801085a:	f7fe febd 	bl	800f5d8 <HAL_GetTick>
 801085e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010860:	4e93      	ldr	r6, [pc, #588]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010862:	2502      	movs	r5, #2
 8010864:	6833      	ldr	r3, [r6, #0]
 8010866:	421d      	tst	r5, r3
 8010868:	d000      	beq.n	801086c <HAL_RCC_OscConfig+0xc4>
 801086a:	e08a      	b.n	8010982 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801086c:	f7fe feb4 	bl	800f5d8 <HAL_GetTick>
 8010870:	1bc0      	subs	r0, r0, r7
 8010872:	2864      	cmp	r0, #100	; 0x64
 8010874:	d9f6      	bls.n	8010864 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8010876:	2003      	movs	r0, #3
 8010878:	e7cb      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801087a:	6863      	ldr	r3, [r4, #4]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d00b      	beq.n	8010898 <HAL_RCC_OscConfig+0xf0>
 8010880:	2b00      	cmp	r3, #0
 8010882:	d122      	bne.n	80108ca <HAL_RCC_OscConfig+0x122>
 8010884:	4b8a      	ldr	r3, [pc, #552]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010886:	681a      	ldr	r2, [r3, #0]
 8010888:	498a      	ldr	r1, [pc, #552]	; (8010ab4 <HAL_RCC_OscConfig+0x30c>)
 801088a:	400a      	ands	r2, r1
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	4989      	ldr	r1, [pc, #548]	; (8010ab8 <HAL_RCC_OscConfig+0x310>)
 8010892:	400a      	ands	r2, r1
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	e005      	b.n	80108a4 <HAL_RCC_OscConfig+0xfc>
 8010898:	4a85      	ldr	r2, [pc, #532]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801089a:	6811      	ldr	r1, [r2, #0]
 801089c:	2380      	movs	r3, #128	; 0x80
 801089e:	025b      	lsls	r3, r3, #9
 80108a0:	430b      	orrs	r3, r1
 80108a2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80108a4:	6863      	ldr	r3, [r4, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d027      	beq.n	80108fa <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80108aa:	f7fe fe95 	bl	800f5d8 <HAL_GetTick>
 80108ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108b0:	4e7f      	ldr	r6, [pc, #508]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80108b2:	2580      	movs	r5, #128	; 0x80
 80108b4:	02ad      	lsls	r5, r5, #10
 80108b6:	6833      	ldr	r3, [r6, #0]
 80108b8:	422b      	tst	r3, r5
 80108ba:	d1b6      	bne.n	801082a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108bc:	f7fe fe8c 	bl	800f5d8 <HAL_GetTick>
 80108c0:	1bc0      	subs	r0, r0, r7
 80108c2:	2864      	cmp	r0, #100	; 0x64
 80108c4:	d9f7      	bls.n	80108b6 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80108c6:	2003      	movs	r0, #3
 80108c8:	e7a3      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108ca:	2b05      	cmp	r3, #5
 80108cc:	d009      	beq.n	80108e2 <HAL_RCC_OscConfig+0x13a>
 80108ce:	4b78      	ldr	r3, [pc, #480]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	4978      	ldr	r1, [pc, #480]	; (8010ab4 <HAL_RCC_OscConfig+0x30c>)
 80108d4:	400a      	ands	r2, r1
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	4977      	ldr	r1, [pc, #476]	; (8010ab8 <HAL_RCC_OscConfig+0x310>)
 80108dc:	400a      	ands	r2, r1
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	e7e0      	b.n	80108a4 <HAL_RCC_OscConfig+0xfc>
 80108e2:	4b73      	ldr	r3, [pc, #460]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80108e4:	6819      	ldr	r1, [r3, #0]
 80108e6:	2280      	movs	r2, #128	; 0x80
 80108e8:	02d2      	lsls	r2, r2, #11
 80108ea:	430a      	orrs	r2, r1
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	6819      	ldr	r1, [r3, #0]
 80108f0:	2280      	movs	r2, #128	; 0x80
 80108f2:	0252      	lsls	r2, r2, #9
 80108f4:	430a      	orrs	r2, r1
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	e7d4      	b.n	80108a4 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80108fa:	f7fe fe6d 	bl	800f5d8 <HAL_GetTick>
 80108fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010900:	4e6b      	ldr	r6, [pc, #428]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010902:	2580      	movs	r5, #128	; 0x80
 8010904:	02ad      	lsls	r5, r5, #10
 8010906:	6833      	ldr	r3, [r6, #0]
 8010908:	422b      	tst	r3, r5
 801090a:	d08e      	beq.n	801082a <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801090c:	f7fe fe64 	bl	800f5d8 <HAL_GetTick>
 8010910:	1bc0      	subs	r0, r0, r7
 8010912:	2864      	cmp	r0, #100	; 0x64
 8010914:	d9f7      	bls.n	8010906 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8010916:	2003      	movs	r0, #3
 8010918:	e77b      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801091a:	4b65      	ldr	r3, [pc, #404]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	22c0      	movs	r2, #192	; 0xc0
 8010920:	0252      	lsls	r2, r2, #9
 8010922:	4013      	ands	r3, r2
 8010924:	2280      	movs	r2, #128	; 0x80
 8010926:	0212      	lsls	r2, r2, #8
 8010928:	4293      	cmp	r3, r2
 801092a:	d18d      	bne.n	8010848 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801092c:	4b60      	ldr	r3, [pc, #384]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	079b      	lsls	r3, r3, #30
 8010932:	d504      	bpl.n	801093e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8010934:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d000      	beq.n	801093e <HAL_RCC_OscConfig+0x196>
 801093c:	e769      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801093e:	495c      	ldr	r1, [pc, #368]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010940:	680a      	ldr	r2, [r1, #0]
 8010942:	6923      	ldr	r3, [r4, #16]
 8010944:	00db      	lsls	r3, r3, #3
 8010946:	20f8      	movs	r0, #248	; 0xf8
 8010948:	4382      	bics	r2, r0
 801094a:	4313      	orrs	r3, r2
 801094c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801094e:	6823      	ldr	r3, [r4, #0]
 8010950:	071b      	lsls	r3, r3, #28
 8010952:	d547      	bpl.n	80109e4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010954:	6a23      	ldr	r3, [r4, #32]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d030      	beq.n	80109bc <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801095a:	4a55      	ldr	r2, [pc, #340]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801095c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801095e:	2101      	movs	r1, #1
 8010960:	430b      	orrs	r3, r1
 8010962:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010964:	f7fe fe38 	bl	800f5d8 <HAL_GetTick>
 8010968:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801096a:	4e51      	ldr	r6, [pc, #324]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 801096c:	2502      	movs	r5, #2
 801096e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010970:	421d      	tst	r5, r3
 8010972:	d137      	bne.n	80109e4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010974:	f7fe fe30 	bl	800f5d8 <HAL_GetTick>
 8010978:	1bc0      	subs	r0, r0, r7
 801097a:	2864      	cmp	r0, #100	; 0x64
 801097c:	d9f7      	bls.n	801096e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801097e:	2003      	movs	r0, #3
 8010980:	e747      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010982:	494b      	ldr	r1, [pc, #300]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010984:	680a      	ldr	r2, [r1, #0]
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	20f8      	movs	r0, #248	; 0xf8
 801098c:	4382      	bics	r2, r0
 801098e:	4313      	orrs	r3, r2
 8010990:	600b      	str	r3, [r1, #0]
 8010992:	e7dc      	b.n	801094e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8010994:	4a46      	ldr	r2, [pc, #280]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010996:	6813      	ldr	r3, [r2, #0]
 8010998:	2101      	movs	r1, #1
 801099a:	438b      	bics	r3, r1
 801099c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801099e:	f7fe fe1b 	bl	800f5d8 <HAL_GetTick>
 80109a2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109a4:	4e42      	ldr	r6, [pc, #264]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80109a6:	2502      	movs	r5, #2
 80109a8:	6833      	ldr	r3, [r6, #0]
 80109aa:	421d      	tst	r5, r3
 80109ac:	d0cf      	beq.n	801094e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80109ae:	f7fe fe13 	bl	800f5d8 <HAL_GetTick>
 80109b2:	1bc0      	subs	r0, r0, r7
 80109b4:	2864      	cmp	r0, #100	; 0x64
 80109b6:	d9f7      	bls.n	80109a8 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80109b8:	2003      	movs	r0, #3
 80109ba:	e72a      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80109bc:	4a3c      	ldr	r2, [pc, #240]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80109be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80109c0:	2101      	movs	r1, #1
 80109c2:	438b      	bics	r3, r1
 80109c4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80109c6:	f7fe fe07 	bl	800f5d8 <HAL_GetTick>
 80109ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80109cc:	4e38      	ldr	r6, [pc, #224]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 80109ce:	2502      	movs	r5, #2
 80109d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109d2:	421d      	tst	r5, r3
 80109d4:	d006      	beq.n	80109e4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80109d6:	f7fe fdff 	bl	800f5d8 <HAL_GetTick>
 80109da:	1bc0      	subs	r0, r0, r7
 80109dc:	2864      	cmp	r0, #100	; 0x64
 80109de:	d9f7      	bls.n	80109d0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80109e0:	2003      	movs	r0, #3
 80109e2:	e716      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	075b      	lsls	r3, r3, #29
 80109e8:	d442      	bmi.n	8010a70 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	06db      	lsls	r3, r3, #27
 80109ee:	d512      	bpl.n	8010a16 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80109f0:	6963      	ldr	r3, [r4, #20]
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d100      	bne.n	80109f8 <HAL_RCC_OscConfig+0x250>
 80109f6:	e0ce      	b.n	8010b96 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80109f8:	3305      	adds	r3, #5
 80109fa:	d000      	beq.n	80109fe <HAL_RCC_OscConfig+0x256>
 80109fc:	e0ec      	b.n	8010bd8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80109fe:	4a2c      	ldr	r2, [pc, #176]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a00:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010a02:	2104      	movs	r1, #4
 8010a04:	438b      	bics	r3, r1
 8010a06:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010a08:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010a0a:	69a3      	ldr	r3, [r4, #24]
 8010a0c:	00db      	lsls	r3, r3, #3
 8010a0e:	20f8      	movs	r0, #248	; 0xf8
 8010a10:	4381      	bics	r1, r0
 8010a12:	430b      	orrs	r3, r1
 8010a14:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	069b      	lsls	r3, r3, #26
 8010a1a:	d400      	bmi.n	8010a1e <HAL_RCC_OscConfig+0x276>
 8010a1c:	e106      	b.n	8010c2c <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010a1e:	4b24      	ldr	r3, [pc, #144]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a20:	685a      	ldr	r2, [r3, #4]
 8010a22:	230c      	movs	r3, #12
 8010a24:	4013      	ands	r3, r2
 8010a26:	2b0c      	cmp	r3, #12
 8010a28:	d100      	bne.n	8010a2c <HAL_RCC_OscConfig+0x284>
 8010a2a:	e0f6      	b.n	8010c1a <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010a2c:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	230c      	movs	r3, #12
 8010a32:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010a34:	2b08      	cmp	r3, #8
 8010a36:	d100      	bne.n	8010a3a <HAL_RCC_OscConfig+0x292>
 8010a38:	e0e7      	b.n	8010c0a <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010a3a:	69e3      	ldr	r3, [r4, #28]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d100      	bne.n	8010a42 <HAL_RCC_OscConfig+0x29a>
 8010a40:	e116      	b.n	8010c70 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8010a42:	4a1b      	ldr	r2, [pc, #108]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a44:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010a46:	2380      	movs	r3, #128	; 0x80
 8010a48:	025b      	lsls	r3, r3, #9
 8010a4a:	430b      	orrs	r3, r1
 8010a4c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010a4e:	f7fe fdc3 	bl	800f5d8 <HAL_GetTick>
 8010a52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010a54:	4e16      	ldr	r6, [pc, #88]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a56:	2580      	movs	r5, #128	; 0x80
 8010a58:	026d      	lsls	r5, r5, #9
 8010a5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010a5c:	422b      	tst	r3, r5
 8010a5e:	d000      	beq.n	8010a62 <HAL_RCC_OscConfig+0x2ba>
 8010a60:	e0e4      	b.n	8010c2c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010a62:	f7fe fdb9 	bl	800f5d8 <HAL_GetTick>
 8010a66:	1bc0      	subs	r0, r0, r7
 8010a68:	2864      	cmp	r0, #100	; 0x64
 8010a6a:	d9f6      	bls.n	8010a5a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8010a6c:	2003      	movs	r0, #3
 8010a6e:	e6d0      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010a70:	4a0f      	ldr	r2, [pc, #60]	; (8010ab0 <HAL_RCC_OscConfig+0x308>)
 8010a72:	69d1      	ldr	r1, [r2, #28]
 8010a74:	2080      	movs	r0, #128	; 0x80
 8010a76:	0540      	lsls	r0, r0, #21
 8010a78:	4301      	orrs	r1, r0
 8010a7a:	61d1      	str	r1, [r2, #28]
 8010a7c:	69d3      	ldr	r3, [r2, #28]
 8010a7e:	4003      	ands	r3, r0
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010a84:	4a0d      	ldr	r2, [pc, #52]	; (8010abc <HAL_RCC_OscConfig+0x314>)
 8010a86:	6811      	ldr	r1, [r2, #0]
 8010a88:	2380      	movs	r3, #128	; 0x80
 8010a8a:	005b      	lsls	r3, r3, #1
 8010a8c:	430b      	orrs	r3, r1
 8010a8e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010a90:	f7fe fda2 	bl	800f5d8 <HAL_GetTick>
 8010a94:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010a96:	4e09      	ldr	r6, [pc, #36]	; (8010abc <HAL_RCC_OscConfig+0x314>)
 8010a98:	2580      	movs	r5, #128	; 0x80
 8010a9a:	006d      	lsls	r5, r5, #1
 8010a9c:	6833      	ldr	r3, [r6, #0]
 8010a9e:	422b      	tst	r3, r5
 8010aa0:	d10e      	bne.n	8010ac0 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010aa2:	f7fe fd99 	bl	800f5d8 <HAL_GetTick>
 8010aa6:	1bc0      	subs	r0, r0, r7
 8010aa8:	2864      	cmp	r0, #100	; 0x64
 8010aaa:	d9f7      	bls.n	8010a9c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8010aac:	2003      	movs	r0, #3
 8010aae:	e6b0      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
 8010ab0:	40021000 	.word	0x40021000
 8010ab4:	fffeffff 	.word	0xfffeffff
 8010ab8:	fffbffff 	.word	0xfffbffff
 8010abc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010ac0:	4b95      	ldr	r3, [pc, #596]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010ac2:	6a1a      	ldr	r2, [r3, #32]
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	438a      	bics	r2, r1
 8010ac8:	621a      	str	r2, [r3, #32]
 8010aca:	6a1a      	ldr	r2, [r3, #32]
 8010acc:	3103      	adds	r1, #3
 8010ace:	438a      	bics	r2, r1
 8010ad0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8010ad2:	f7fe fd81 	bl	800f5d8 <HAL_GetTick>
 8010ad6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010ad8:	4e8f      	ldr	r6, [pc, #572]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010ada:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010adc:	4f8f      	ldr	r7, [pc, #572]	; (8010d1c <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010ade:	6a33      	ldr	r3, [r6, #32]
 8010ae0:	421d      	tst	r5, r3
 8010ae2:	d007      	beq.n	8010af4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010ae4:	f7fe fd78 	bl	800f5d8 <HAL_GetTick>
 8010ae8:	4643      	mov	r3, r8
 8010aea:	1ac0      	subs	r0, r0, r3
 8010aec:	42b8      	cmp	r0, r7
 8010aee:	d9f6      	bls.n	8010ade <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8010af0:	2003      	movs	r0, #3
 8010af2:	e68e      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010af4:	68a3      	ldr	r3, [r4, #8]
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d00b      	beq.n	8010b12 <HAL_RCC_OscConfig+0x36a>
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d123      	bne.n	8010b46 <HAL_RCC_OscConfig+0x39e>
 8010afe:	4b86      	ldr	r3, [pc, #536]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b00:	6a1a      	ldr	r2, [r3, #32]
 8010b02:	2101      	movs	r1, #1
 8010b04:	438a      	bics	r2, r1
 8010b06:	621a      	str	r2, [r3, #32]
 8010b08:	6a1a      	ldr	r2, [r3, #32]
 8010b0a:	3103      	adds	r1, #3
 8010b0c:	438a      	bics	r2, r1
 8010b0e:	621a      	str	r2, [r3, #32]
 8010b10:	e004      	b.n	8010b1c <HAL_RCC_OscConfig+0x374>
 8010b12:	4a81      	ldr	r2, [pc, #516]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b14:	6a13      	ldr	r3, [r2, #32]
 8010b16:	2101      	movs	r1, #1
 8010b18:	430b      	orrs	r3, r1
 8010b1a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010b1c:	68a3      	ldr	r3, [r4, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d027      	beq.n	8010b72 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8010b22:	f7fe fd59 	bl	800f5d8 <HAL_GetTick>
 8010b26:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b28:	4e7b      	ldr	r6, [pc, #492]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b2a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b2c:	4f7b      	ldr	r7, [pc, #492]	; (8010d1c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b2e:	6a33      	ldr	r3, [r6, #32]
 8010b30:	421d      	tst	r5, r3
 8010b32:	d000      	beq.n	8010b36 <HAL_RCC_OscConfig+0x38e>
 8010b34:	e759      	b.n	80109ea <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b36:	f7fe fd4f 	bl	800f5d8 <HAL_GetTick>
 8010b3a:	4643      	mov	r3, r8
 8010b3c:	1ac0      	subs	r0, r0, r3
 8010b3e:	42b8      	cmp	r0, r7
 8010b40:	d9f5      	bls.n	8010b2e <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8010b42:	2003      	movs	r0, #3
 8010b44:	e665      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b46:	2b05      	cmp	r3, #5
 8010b48:	d009      	beq.n	8010b5e <HAL_RCC_OscConfig+0x3b6>
 8010b4a:	4b73      	ldr	r3, [pc, #460]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b4c:	6a1a      	ldr	r2, [r3, #32]
 8010b4e:	2101      	movs	r1, #1
 8010b50:	438a      	bics	r2, r1
 8010b52:	621a      	str	r2, [r3, #32]
 8010b54:	6a1a      	ldr	r2, [r3, #32]
 8010b56:	3103      	adds	r1, #3
 8010b58:	438a      	bics	r2, r1
 8010b5a:	621a      	str	r2, [r3, #32]
 8010b5c:	e7de      	b.n	8010b1c <HAL_RCC_OscConfig+0x374>
 8010b5e:	4b6e      	ldr	r3, [pc, #440]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b60:	6a1a      	ldr	r2, [r3, #32]
 8010b62:	2104      	movs	r1, #4
 8010b64:	430a      	orrs	r2, r1
 8010b66:	621a      	str	r2, [r3, #32]
 8010b68:	6a1a      	ldr	r2, [r3, #32]
 8010b6a:	3903      	subs	r1, #3
 8010b6c:	430a      	orrs	r2, r1
 8010b6e:	621a      	str	r2, [r3, #32]
 8010b70:	e7d4      	b.n	8010b1c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8010b72:	f7fe fd31 	bl	800f5d8 <HAL_GetTick>
 8010b76:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b78:	4e67      	ldr	r6, [pc, #412]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b7a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b7c:	4f67      	ldr	r7, [pc, #412]	; (8010d1c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b7e:	6a33      	ldr	r3, [r6, #32]
 8010b80:	421d      	tst	r5, r3
 8010b82:	d100      	bne.n	8010b86 <HAL_RCC_OscConfig+0x3de>
 8010b84:	e731      	b.n	80109ea <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b86:	f7fe fd27 	bl	800f5d8 <HAL_GetTick>
 8010b8a:	4643      	mov	r3, r8
 8010b8c:	1ac0      	subs	r0, r0, r3
 8010b8e:	42b8      	cmp	r0, r7
 8010b90:	d9f5      	bls.n	8010b7e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8010b92:	2003      	movs	r0, #3
 8010b94:	e63d      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010b96:	4b60      	ldr	r3, [pc, #384]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b9a:	2104      	movs	r1, #4
 8010b9c:	430a      	orrs	r2, r1
 8010b9e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8010ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ba2:	3903      	subs	r1, #3
 8010ba4:	430a      	orrs	r2, r1
 8010ba6:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010ba8:	f7fe fd16 	bl	800f5d8 <HAL_GetTick>
 8010bac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010bae:	4e5a      	ldr	r6, [pc, #360]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010bb0:	2502      	movs	r5, #2
 8010bb2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010bb4:	421d      	tst	r5, r3
 8010bb6:	d106      	bne.n	8010bc6 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010bb8:	f7fe fd0e 	bl	800f5d8 <HAL_GetTick>
 8010bbc:	1bc0      	subs	r0, r0, r7
 8010bbe:	2864      	cmp	r0, #100	; 0x64
 8010bc0:	d9f7      	bls.n	8010bb2 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8010bc2:	2003      	movs	r0, #3
 8010bc4:	e625      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010bc6:	4954      	ldr	r1, [pc, #336]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010bc8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010bca:	69a3      	ldr	r3, [r4, #24]
 8010bcc:	00db      	lsls	r3, r3, #3
 8010bce:	20f8      	movs	r0, #248	; 0xf8
 8010bd0:	4382      	bics	r2, r0
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	634b      	str	r3, [r1, #52]	; 0x34
 8010bd6:	e71e      	b.n	8010a16 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010bd8:	4b4f      	ldr	r3, [pc, #316]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bdc:	2104      	movs	r1, #4
 8010bde:	430a      	orrs	r2, r1
 8010be0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8010be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010be4:	3903      	subs	r1, #3
 8010be6:	438a      	bics	r2, r1
 8010be8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010bea:	f7fe fcf5 	bl	800f5d8 <HAL_GetTick>
 8010bee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010bf0:	4e49      	ldr	r6, [pc, #292]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010bf2:	2502      	movs	r5, #2
 8010bf4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010bf6:	421d      	tst	r5, r3
 8010bf8:	d100      	bne.n	8010bfc <HAL_RCC_OscConfig+0x454>
 8010bfa:	e70c      	b.n	8010a16 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010bfc:	f7fe fcec 	bl	800f5d8 <HAL_GetTick>
 8010c00:	1bc0      	subs	r0, r0, r7
 8010c02:	2864      	cmp	r0, #100	; 0x64
 8010c04:	d9f6      	bls.n	8010bf4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8010c06:	2003      	movs	r0, #3
 8010c08:	e603      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010c0a:	4b43      	ldr	r3, [pc, #268]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	22c0      	movs	r2, #192	; 0xc0
 8010c10:	0252      	lsls	r2, r2, #9
 8010c12:	4013      	ands	r3, r2
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d000      	beq.n	8010c1a <HAL_RCC_OscConfig+0x472>
 8010c18:	e70f      	b.n	8010a3a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010c1a:	4b3f      	ldr	r3, [pc, #252]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1e:	03db      	lsls	r3, r3, #15
 8010c20:	d504      	bpl.n	8010c2c <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8010c22:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010c24:	69e3      	ldr	r3, [r4, #28]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d000      	beq.n	8010c2c <HAL_RCC_OscConfig+0x484>
 8010c2a:	e5f2      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8010c2e:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d100      	bne.n	8010c36 <HAL_RCC_OscConfig+0x48e>
 8010c34:	e5ed      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c36:	4a38      	ldr	r2, [pc, #224]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c38:	6851      	ldr	r1, [r2, #4]
 8010c3a:	220c      	movs	r2, #12
 8010c3c:	400a      	ands	r2, r1
 8010c3e:	2a08      	cmp	r2, #8
 8010c40:	d068      	beq.n	8010d14 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	d029      	beq.n	8010c9a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8010c46:	4a34      	ldr	r2, [pc, #208]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c48:	6813      	ldr	r3, [r2, #0]
 8010c4a:	4935      	ldr	r1, [pc, #212]	; (8010d20 <HAL_RCC_OscConfig+0x578>)
 8010c4c:	400b      	ands	r3, r1
 8010c4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010c50:	f7fe fcc2 	bl	800f5d8 <HAL_GetTick>
 8010c54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c56:	4d30      	ldr	r5, [pc, #192]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c58:	2480      	movs	r4, #128	; 0x80
 8010c5a:	04a4      	lsls	r4, r4, #18
 8010c5c:	682b      	ldr	r3, [r5, #0]
 8010c5e:	4223      	tst	r3, r4
 8010c60:	d056      	beq.n	8010d10 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c62:	f7fe fcb9 	bl	800f5d8 <HAL_GetTick>
 8010c66:	1b80      	subs	r0, r0, r6
 8010c68:	2864      	cmp	r0, #100	; 0x64
 8010c6a:	d9f7      	bls.n	8010c5c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8010c6c:	2003      	movs	r0, #3
 8010c6e:	e5d0      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8010c70:	4a29      	ldr	r2, [pc, #164]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c72:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010c74:	492b      	ldr	r1, [pc, #172]	; (8010d24 <HAL_RCC_OscConfig+0x57c>)
 8010c76:	400b      	ands	r3, r1
 8010c78:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010c7a:	f7fe fcad 	bl	800f5d8 <HAL_GetTick>
 8010c7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010c80:	4e25      	ldr	r6, [pc, #148]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c82:	2580      	movs	r5, #128	; 0x80
 8010c84:	026d      	lsls	r5, r5, #9
 8010c86:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010c88:	422b      	tst	r3, r5
 8010c8a:	d0cf      	beq.n	8010c2c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010c8c:	f7fe fca4 	bl	800f5d8 <HAL_GetTick>
 8010c90:	1bc0      	subs	r0, r0, r7
 8010c92:	2864      	cmp	r0, #100	; 0x64
 8010c94:	d9f7      	bls.n	8010c86 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8010c96:	2003      	movs	r0, #3
 8010c98:	e5bb      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8010c9a:	4a1f      	ldr	r2, [pc, #124]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010c9c:	6813      	ldr	r3, [r2, #0]
 8010c9e:	4920      	ldr	r1, [pc, #128]	; (8010d20 <HAL_RCC_OscConfig+0x578>)
 8010ca0:	400b      	ands	r3, r1
 8010ca2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010ca4:	f7fe fc98 	bl	800f5d8 <HAL_GetTick>
 8010ca8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010caa:	4e1b      	ldr	r6, [pc, #108]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010cac:	2580      	movs	r5, #128	; 0x80
 8010cae:	04ad      	lsls	r5, r5, #18
 8010cb0:	6833      	ldr	r3, [r6, #0]
 8010cb2:	422b      	tst	r3, r5
 8010cb4:	d006      	beq.n	8010cc4 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cb6:	f7fe fc8f 	bl	800f5d8 <HAL_GetTick>
 8010cba:	1bc0      	subs	r0, r0, r7
 8010cbc:	2864      	cmp	r0, #100	; 0x64
 8010cbe:	d9f7      	bls.n	8010cb0 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8010cc0:	2003      	movs	r0, #3
 8010cc2:	e5a6      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010cc4:	4b14      	ldr	r3, [pc, #80]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc8:	210f      	movs	r1, #15
 8010cca:	438a      	bics	r2, r1
 8010ccc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010cce:	430a      	orrs	r2, r1
 8010cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8010cd2:	6859      	ldr	r1, [r3, #4]
 8010cd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010cd8:	4302      	orrs	r2, r0
 8010cda:	4813      	ldr	r0, [pc, #76]	; (8010d28 <HAL_RCC_OscConfig+0x580>)
 8010cdc:	4001      	ands	r1, r0
 8010cde:	430a      	orrs	r2, r1
 8010ce0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8010ce2:	6819      	ldr	r1, [r3, #0]
 8010ce4:	2280      	movs	r2, #128	; 0x80
 8010ce6:	0452      	lsls	r2, r2, #17
 8010ce8:	430a      	orrs	r2, r1
 8010cea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8010cec:	f7fe fc74 	bl	800f5d8 <HAL_GetTick>
 8010cf0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010cf2:	4d09      	ldr	r5, [pc, #36]	; (8010d18 <HAL_RCC_OscConfig+0x570>)
 8010cf4:	2480      	movs	r4, #128	; 0x80
 8010cf6:	04a4      	lsls	r4, r4, #18
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	4223      	tst	r3, r4
 8010cfc:	d106      	bne.n	8010d0c <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cfe:	f7fe fc6b 	bl	800f5d8 <HAL_GetTick>
 8010d02:	1b80      	subs	r0, r0, r6
 8010d04:	2864      	cmp	r0, #100	; 0x64
 8010d06:	d9f7      	bls.n	8010cf8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8010d08:	2003      	movs	r0, #3
 8010d0a:	e582      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	e580      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
 8010d10:	2000      	movs	r0, #0
 8010d12:	e57e      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8010d14:	2001      	movs	r0, #1
 8010d16:	e57c      	b.n	8010812 <HAL_RCC_OscConfig+0x6a>
 8010d18:	40021000 	.word	0x40021000
 8010d1c:	00001388 	.word	0x00001388
 8010d20:	feffffff 	.word	0xfeffffff
 8010d24:	fffeffff 	.word	0xfffeffff
 8010d28:	ffc27fff 	.word	0xffc27fff

08010d2c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2e:	46ce      	mov	lr, r9
 8010d30:	4647      	mov	r7, r8
 8010d32:	b580      	push	{r7, lr}
 8010d34:	0005      	movs	r5, r0
 8010d36:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010d38:	4b95      	ldr	r3, [pc, #596]	; (8010f90 <HAL_RCC_ClockConfig+0x264>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	4013      	ands	r3, r2
 8010d40:	428b      	cmp	r3, r1
 8010d42:	d300      	bcc.n	8010d46 <HAL_RCC_ClockConfig+0x1a>
 8010d44:	e089      	b.n	8010e5a <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d46:	4992      	ldr	r1, [pc, #584]	; (8010f90 <HAL_RCC_ClockConfig+0x264>)
 8010d48:	680b      	ldr	r3, [r1, #0]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	4393      	bics	r3, r2
 8010d4e:	4323      	orrs	r3, r4
 8010d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010d52:	680b      	ldr	r3, [r1, #0]
 8010d54:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8010d56:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010d58:	42a2      	cmp	r2, r4
 8010d5a:	d003      	beq.n	8010d64 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010d5c:	bc0c      	pop	{r2, r3}
 8010d5e:	4690      	mov	r8, r2
 8010d60:	4699      	mov	r9, r3
 8010d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d64:	682b      	ldr	r3, [r5, #0]
 8010d66:	079b      	lsls	r3, r3, #30
 8010d68:	d506      	bpl.n	8010d78 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010d6a:	4a8a      	ldr	r2, [pc, #552]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010d6c:	6853      	ldr	r3, [r2, #4]
 8010d6e:	21f0      	movs	r1, #240	; 0xf0
 8010d70:	438b      	bics	r3, r1
 8010d72:	68a9      	ldr	r1, [r5, #8]
 8010d74:	430b      	orrs	r3, r1
 8010d76:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010d78:	682b      	ldr	r3, [r5, #0]
 8010d7a:	07db      	lsls	r3, r3, #31
 8010d7c:	d400      	bmi.n	8010d80 <HAL_RCC_ClockConfig+0x54>
 8010d7e:	e0f7      	b.n	8010f70 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d80:	686b      	ldr	r3, [r5, #4]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d009      	beq.n	8010d9a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d86:	2b02      	cmp	r3, #2
 8010d88:	d02b      	beq.n	8010de2 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010d8a:	2b03      	cmp	r3, #3
 8010d8c:	d02f      	beq.n	8010dee <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d8e:	4a81      	ldr	r2, [pc, #516]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010d90:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010d92:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d94:	0792      	lsls	r2, r2, #30
 8010d96:	d405      	bmi.n	8010da4 <HAL_RCC_ClockConfig+0x78>
 8010d98:	e7e0      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d9a:	4a7e      	ldr	r2, [pc, #504]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010d9c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010d9e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010da0:	0392      	lsls	r2, r2, #14
 8010da2:	d5db      	bpl.n	8010d5c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010da4:	497b      	ldr	r1, [pc, #492]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010da6:	684a      	ldr	r2, [r1, #4]
 8010da8:	2003      	movs	r0, #3
 8010daa:	4382      	bics	r2, r0
 8010dac:	4313      	orrs	r3, r2
 8010dae:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010db0:	f7fe fc12 	bl	800f5d8 <HAL_GetTick>
 8010db4:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010db6:	686b      	ldr	r3, [r5, #4]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d01e      	beq.n	8010dfa <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d02c      	beq.n	8010e1a <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	d03a      	beq.n	8010e3a <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dc4:	4f73      	ldr	r7, [pc, #460]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010dc6:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dc8:	4b73      	ldr	r3, [pc, #460]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010dca:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	421e      	tst	r6, r3
 8010dd0:	d100      	bne.n	8010dd4 <HAL_RCC_ClockConfig+0xa8>
 8010dd2:	e0cd      	b.n	8010f70 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dd4:	f7fe fc00 	bl	800f5d8 <HAL_GetTick>
 8010dd8:	1b00      	subs	r0, r0, r4
 8010dda:	4540      	cmp	r0, r8
 8010ddc:	d9f6      	bls.n	8010dcc <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010dde:	2003      	movs	r0, #3
 8010de0:	e7bc      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010de2:	4a6c      	ldr	r2, [pc, #432]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010de4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010de6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010de8:	0192      	lsls	r2, r2, #6
 8010dea:	d4db      	bmi.n	8010da4 <HAL_RCC_ClockConfig+0x78>
 8010dec:	e7b6      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010dee:	4a69      	ldr	r2, [pc, #420]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8010df2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010df4:	03d2      	lsls	r2, r2, #15
 8010df6:	d4d5      	bmi.n	8010da4 <HAL_RCC_ClockConfig+0x78>
 8010df8:	e7b0      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010dfa:	4f66      	ldr	r7, [pc, #408]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010dfc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dfe:	4b66      	ldr	r3, [pc, #408]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010e00:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4033      	ands	r3, r6
 8010e06:	2b04      	cmp	r3, #4
 8010e08:	d100      	bne.n	8010e0c <HAL_RCC_ClockConfig+0xe0>
 8010e0a:	e0b1      	b.n	8010f70 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e0c:	f7fe fbe4 	bl	800f5d8 <HAL_GetTick>
 8010e10:	1b00      	subs	r0, r0, r4
 8010e12:	4540      	cmp	r0, r8
 8010e14:	d9f5      	bls.n	8010e02 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8010e16:	2003      	movs	r0, #3
 8010e18:	e7a0      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010e1a:	4f5e      	ldr	r7, [pc, #376]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e1c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e1e:	4b5e      	ldr	r3, [pc, #376]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010e20:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4033      	ands	r3, r6
 8010e26:	2b08      	cmp	r3, #8
 8010e28:	d100      	bne.n	8010e2c <HAL_RCC_ClockConfig+0x100>
 8010e2a:	e0a1      	b.n	8010f70 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e2c:	f7fe fbd4 	bl	800f5d8 <HAL_GetTick>
 8010e30:	1b00      	subs	r0, r0, r4
 8010e32:	4540      	cmp	r0, r8
 8010e34:	d9f5      	bls.n	8010e22 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8010e36:	2003      	movs	r0, #3
 8010e38:	e790      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010e3a:	4f56      	ldr	r7, [pc, #344]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e3c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e3e:	4b56      	ldr	r3, [pc, #344]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010e40:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4033      	ands	r3, r6
 8010e46:	2b0c      	cmp	r3, #12
 8010e48:	d100      	bne.n	8010e4c <HAL_RCC_ClockConfig+0x120>
 8010e4a:	e091      	b.n	8010f70 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e4c:	f7fe fbc4 	bl	800f5d8 <HAL_GetTick>
 8010e50:	1b00      	subs	r0, r0, r4
 8010e52:	4540      	cmp	r0, r8
 8010e54:	d9f5      	bls.n	8010e42 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8010e56:	2003      	movs	r0, #3
 8010e58:	e780      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010e5a:	6803      	ldr	r3, [r0, #0]
 8010e5c:	079b      	lsls	r3, r3, #30
 8010e5e:	d506      	bpl.n	8010e6e <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e60:	4a4c      	ldr	r2, [pc, #304]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e62:	6853      	ldr	r3, [r2, #4]
 8010e64:	21f0      	movs	r1, #240	; 0xf0
 8010e66:	438b      	bics	r3, r1
 8010e68:	6881      	ldr	r1, [r0, #8]
 8010e6a:	430b      	orrs	r3, r1
 8010e6c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010e6e:	682b      	ldr	r3, [r5, #0]
 8010e70:	07db      	lsls	r3, r3, #31
 8010e72:	d571      	bpl.n	8010f58 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e74:	686b      	ldr	r3, [r5, #4]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d009      	beq.n	8010e8e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e7a:	2b02      	cmp	r3, #2
 8010e7c:	d02d      	beq.n	8010eda <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010e7e:	2b03      	cmp	r3, #3
 8010e80:	d031      	beq.n	8010ee6 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e82:	4a44      	ldr	r2, [pc, #272]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e84:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010e86:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e88:	0792      	lsls	r2, r2, #30
 8010e8a:	d406      	bmi.n	8010e9a <HAL_RCC_ClockConfig+0x16e>
 8010e8c:	e766      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e8e:	4a41      	ldr	r2, [pc, #260]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e90:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010e92:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e94:	0392      	lsls	r2, r2, #14
 8010e96:	d400      	bmi.n	8010e9a <HAL_RCC_ClockConfig+0x16e>
 8010e98:	e760      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e9a:	493e      	ldr	r1, [pc, #248]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010e9c:	684a      	ldr	r2, [r1, #4]
 8010e9e:	2003      	movs	r0, #3
 8010ea0:	4382      	bics	r2, r0
 8010ea2:	4313      	orrs	r3, r2
 8010ea4:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010ea6:	f7fe fb97 	bl	800f5d8 <HAL_GetTick>
 8010eaa:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010eac:	686b      	ldr	r3, [r5, #4]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d01f      	beq.n	8010ef2 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d02e      	beq.n	8010f14 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	d03d      	beq.n	8010f36 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010eba:	4b36      	ldr	r3, [pc, #216]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010ebc:	4698      	mov	r8, r3
 8010ebe:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ec0:	4b35      	ldr	r3, [pc, #212]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010ec2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010ec4:	4643      	mov	r3, r8
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	421f      	tst	r7, r3
 8010eca:	d045      	beq.n	8010f58 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ecc:	f7fe fb84 	bl	800f5d8 <HAL_GetTick>
 8010ed0:	1b80      	subs	r0, r0, r6
 8010ed2:	4548      	cmp	r0, r9
 8010ed4:	d9f6      	bls.n	8010ec4 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8010ed6:	2003      	movs	r0, #3
 8010ed8:	e740      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010eda:	4a2e      	ldr	r2, [pc, #184]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010edc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010ede:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010ee0:	0192      	lsls	r2, r2, #6
 8010ee2:	d4da      	bmi.n	8010e9a <HAL_RCC_ClockConfig+0x16e>
 8010ee4:	e73a      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010ee6:	4a2b      	ldr	r2, [pc, #172]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8010eea:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010eec:	03d2      	lsls	r2, r2, #15
 8010eee:	d4d4      	bmi.n	8010e9a <HAL_RCC_ClockConfig+0x16e>
 8010ef0:	e734      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010ef2:	4b28      	ldr	r3, [pc, #160]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010ef4:	4698      	mov	r8, r3
 8010ef6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ef8:	4b27      	ldr	r3, [pc, #156]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010efa:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010efc:	4643      	mov	r3, r8
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	403b      	ands	r3, r7
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d028      	beq.n	8010f58 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f06:	f7fe fb67 	bl	800f5d8 <HAL_GetTick>
 8010f0a:	1b80      	subs	r0, r0, r6
 8010f0c:	4548      	cmp	r0, r9
 8010f0e:	d9f5      	bls.n	8010efc <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8010f10:	2003      	movs	r0, #3
 8010f12:	e723      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010f14:	4b1f      	ldr	r3, [pc, #124]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010f16:	4698      	mov	r8, r3
 8010f18:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f1a:	4b1f      	ldr	r3, [pc, #124]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010f1c:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010f1e:	4643      	mov	r3, r8
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	403b      	ands	r3, r7
 8010f24:	2b08      	cmp	r3, #8
 8010f26:	d017      	beq.n	8010f58 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f28:	f7fe fb56 	bl	800f5d8 <HAL_GetTick>
 8010f2c:	1b80      	subs	r0, r0, r6
 8010f2e:	4548      	cmp	r0, r9
 8010f30:	d9f5      	bls.n	8010f1e <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8010f32:	2003      	movs	r0, #3
 8010f34:	e712      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010f36:	4b17      	ldr	r3, [pc, #92]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010f38:	4698      	mov	r8, r3
 8010f3a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f3c:	4b16      	ldr	r3, [pc, #88]	; (8010f98 <HAL_RCC_ClockConfig+0x26c>)
 8010f3e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010f40:	4643      	mov	r3, r8
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	403b      	ands	r3, r7
 8010f46:	2b0c      	cmp	r3, #12
 8010f48:	d006      	beq.n	8010f58 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f4a:	f7fe fb45 	bl	800f5d8 <HAL_GetTick>
 8010f4e:	1b80      	subs	r0, r0, r6
 8010f50:	4548      	cmp	r0, r9
 8010f52:	d9f5      	bls.n	8010f40 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8010f54:	2003      	movs	r0, #3
 8010f56:	e701      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010f58:	490d      	ldr	r1, [pc, #52]	; (8010f90 <HAL_RCC_ClockConfig+0x264>)
 8010f5a:	680b      	ldr	r3, [r1, #0]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	4393      	bics	r3, r2
 8010f60:	4323      	orrs	r3, r4
 8010f62:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010f64:	680b      	ldr	r3, [r1, #0]
 8010f66:	401a      	ands	r2, r3
      return HAL_ERROR;
 8010f68:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010f6a:	42a2      	cmp	r2, r4
 8010f6c:	d000      	beq.n	8010f70 <HAL_RCC_ClockConfig+0x244>
 8010f6e:	e6f5      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010f70:	682b      	ldr	r3, [r5, #0]
 8010f72:	075b      	lsls	r3, r3, #29
 8010f74:	d506      	bpl.n	8010f84 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010f76:	4a07      	ldr	r2, [pc, #28]	; (8010f94 <HAL_RCC_ClockConfig+0x268>)
 8010f78:	6853      	ldr	r3, [r2, #4]
 8010f7a:	4908      	ldr	r1, [pc, #32]	; (8010f9c <HAL_RCC_ClockConfig+0x270>)
 8010f7c:	400b      	ands	r3, r1
 8010f7e:	68e9      	ldr	r1, [r5, #12]
 8010f80:	430b      	orrs	r3, r1
 8010f82:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010f84:	2000      	movs	r0, #0
 8010f86:	f7fe fafd 	bl	800f584 <HAL_InitTick>
  return HAL_OK;
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	e6e6      	b.n	8010d5c <HAL_RCC_ClockConfig+0x30>
 8010f8e:	46c0      	nop			; (mov r8, r8)
 8010f90:	40022000 	.word	0x40022000
 8010f94:	40021000 	.word	0x40021000
 8010f98:	00001388 	.word	0x00001388
 8010f9c:	fffff8ff 	.word	0xfffff8ff

08010fa0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010fa0:	b530      	push	{r4, r5, lr}
 8010fa2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010fa4:	aa04      	add	r2, sp, #16
 8010fa6:	4b21      	ldr	r3, [pc, #132]	; (801102c <HAL_RCC_GetSysClockFreq+0x8c>)
 8010fa8:	0018      	movs	r0, r3
 8010faa:	c832      	ldmia	r0!, {r1, r4, r5}
 8010fac:	c232      	stmia	r2!, {r1, r4, r5}
 8010fae:	0011      	movs	r1, r2
 8010fb0:	6802      	ldr	r2, [r0, #0]
 8010fb2:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010fb4:	466a      	mov	r2, sp
 8010fb6:	3310      	adds	r3, #16
 8010fb8:	cb13      	ldmia	r3!, {r0, r1, r4}
 8010fba:	c213      	stmia	r2!, {r0, r1, r4}
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010fc0:	4b1b      	ldr	r3, [pc, #108]	; (8011030 <HAL_RCC_GetSysClockFreq+0x90>)
 8010fc2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010fc4:	200c      	movs	r0, #12
 8010fc6:	4018      	ands	r0, r3
 8010fc8:	2808      	cmp	r0, #8
 8010fca:	d00a      	beq.n	8010fe2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010fcc:	380c      	subs	r0, #12
 8010fce:	4243      	negs	r3, r0
 8010fd0:	4158      	adcs	r0, r3
 8010fd2:	4240      	negs	r0, r0
 8010fd4:	4b17      	ldr	r3, [pc, #92]	; (8011034 <HAL_RCC_GetSysClockFreq+0x94>)
 8010fd6:	4018      	ands	r0, r3
 8010fd8:	4b17      	ldr	r3, [pc, #92]	; (8011038 <HAL_RCC_GetSysClockFreq+0x98>)
 8010fda:	469c      	mov	ip, r3
 8010fdc:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010fde:	b009      	add	sp, #36	; 0x24
 8010fe0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010fe2:	0c99      	lsrs	r1, r3, #18
 8010fe4:	220f      	movs	r2, #15
 8010fe6:	4011      	ands	r1, r2
 8010fe8:	a804      	add	r0, sp, #16
 8010fea:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010fec:	4910      	ldr	r1, [pc, #64]	; (8011030 <HAL_RCC_GetSysClockFreq+0x90>)
 8010fee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010ff0:	400a      	ands	r2, r1
 8010ff2:	4669      	mov	r1, sp
 8010ff4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010ff6:	22c0      	movs	r2, #192	; 0xc0
 8010ff8:	0252      	lsls	r2, r2, #9
 8010ffa:	4013      	ands	r3, r2
 8010ffc:	2280      	movs	r2, #128	; 0x80
 8010ffe:	0252      	lsls	r2, r2, #9
 8011000:	4293      	cmp	r3, r2
 8011002:	d008      	beq.n	8011016 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011004:	22c0      	movs	r2, #192	; 0xc0
 8011006:	0252      	lsls	r2, r2, #9
 8011008:	4293      	cmp	r3, r2
 801100a:	d009      	beq.n	8011020 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 801100c:	480a      	ldr	r0, [pc, #40]	; (8011038 <HAL_RCC_GetSysClockFreq+0x98>)
 801100e:	f7ef f89f 	bl	8000150 <__udivsi3>
 8011012:	4360      	muls	r0, r4
 8011014:	e7e3      	b.n	8010fde <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011016:	4808      	ldr	r0, [pc, #32]	; (8011038 <HAL_RCC_GetSysClockFreq+0x98>)
 8011018:	f7ef f89a 	bl	8000150 <__udivsi3>
 801101c:	4360      	muls	r0, r4
 801101e:	e7de      	b.n	8010fde <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011020:	4806      	ldr	r0, [pc, #24]	; (801103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8011022:	f7ef f895 	bl	8000150 <__udivsi3>
 8011026:	4360      	muls	r0, r4
 8011028:	e7d9      	b.n	8010fde <HAL_RCC_GetSysClockFreq+0x3e>
 801102a:	46c0      	nop			; (mov r8, r8)
 801102c:	08017644 	.word	0x08017644
 8011030:	40021000 	.word	0x40021000
 8011034:	02625a00 	.word	0x02625a00
 8011038:	007a1200 	.word	0x007a1200
 801103c:	02dc6c00 	.word	0x02dc6c00

08011040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011040:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011042:	f7ff ffad 	bl	8010fa0 <HAL_RCC_GetSysClockFreq>
 8011046:	4b05      	ldr	r3, [pc, #20]	; (801105c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	061b      	lsls	r3, r3, #24
 801104c:	0f1b      	lsrs	r3, r3, #28
 801104e:	4a04      	ldr	r2, [pc, #16]	; (8011060 <HAL_RCC_GetHCLKFreq+0x20>)
 8011050:	5cd3      	ldrb	r3, [r2, r3]
 8011052:	40d8      	lsrs	r0, r3
 8011054:	4b03      	ldr	r3, [pc, #12]	; (8011064 <HAL_RCC_GetHCLKFreq+0x24>)
 8011056:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011058:	bd10      	pop	{r4, pc}
 801105a:	46c0      	nop			; (mov r8, r8)
 801105c:	40021000 	.word	0x40021000
 8011060:	0801a544 	.word	0x0801a544
 8011064:	20000094 	.word	0x20000094

08011068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011068:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801106a:	f7ff ffe9 	bl	8011040 <HAL_RCC_GetHCLKFreq>
 801106e:	4b04      	ldr	r3, [pc, #16]	; (8011080 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	055b      	lsls	r3, r3, #21
 8011074:	0f5b      	lsrs	r3, r3, #29
 8011076:	4a03      	ldr	r2, [pc, #12]	; (8011084 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011078:	5cd3      	ldrb	r3, [r2, r3]
 801107a:	40d8      	lsrs	r0, r3
}    
 801107c:	bd10      	pop	{r4, pc}
 801107e:	46c0      	nop			; (mov r8, r8)
 8011080:	40021000 	.word	0x40021000
 8011084:	0801a544 	.word	0x0801a544

08011088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108a:	46c6      	mov	lr, r8
 801108c:	b500      	push	{lr}
 801108e:	b082      	sub	sp, #8
 8011090:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011092:	6803      	ldr	r3, [r0, #0]
 8011094:	03db      	lsls	r3, r3, #15
 8011096:	d507      	bpl.n	80110a8 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011098:	4b43      	ldr	r3, [pc, #268]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801109a:	6a1b      	ldr	r3, [r3, #32]
 801109c:	6842      	ldr	r2, [r0, #4]
 801109e:	4053      	eors	r3, r2
 80110a0:	22c0      	movs	r2, #192	; 0xc0
 80110a2:	0092      	lsls	r2, r2, #2
 80110a4:	4213      	tst	r3, r2
 80110a6:	d136      	bne.n	8011116 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	07db      	lsls	r3, r3, #31
 80110ac:	d506      	bpl.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80110ae:	4a3e      	ldr	r2, [pc, #248]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110b2:	2103      	movs	r1, #3
 80110b4:	438b      	bics	r3, r1
 80110b6:	68a1      	ldr	r1, [r4, #8]
 80110b8:	430b      	orrs	r3, r1
 80110ba:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80110bc:	6823      	ldr	r3, [r4, #0]
 80110be:	079b      	lsls	r3, r3, #30
 80110c0:	d506      	bpl.n	80110d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80110c2:	4a39      	ldr	r2, [pc, #228]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110c6:	4939      	ldr	r1, [pc, #228]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80110c8:	400b      	ands	r3, r1
 80110ca:	68e1      	ldr	r1, [r4, #12]
 80110cc:	430b      	orrs	r3, r1
 80110ce:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	035b      	lsls	r3, r3, #13
 80110d4:	d506      	bpl.n	80110e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80110d6:	4a34      	ldr	r2, [pc, #208]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110da:	4935      	ldr	r1, [pc, #212]	; (80111b0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80110dc:	400b      	ands	r3, r1
 80110de:	6921      	ldr	r1, [r4, #16]
 80110e0:	430b      	orrs	r3, r1
 80110e2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	069b      	lsls	r3, r3, #26
 80110e8:	d506      	bpl.n	80110f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80110ea:	4a2f      	ldr	r2, [pc, #188]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110ee:	2110      	movs	r1, #16
 80110f0:	438b      	bics	r3, r1
 80110f2:	6961      	ldr	r1, [r4, #20]
 80110f4:	430b      	orrs	r3, r1
 80110f6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80110f8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80110fa:	6823      	ldr	r3, [r4, #0]
 80110fc:	055b      	lsls	r3, r3, #21
 80110fe:	d506      	bpl.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011100:	4a29      	ldr	r2, [pc, #164]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011102:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011104:	2140      	movs	r1, #64	; 0x40
 8011106:	438b      	bics	r3, r1
 8011108:	69a1      	ldr	r1, [r4, #24]
 801110a:	430b      	orrs	r3, r1
 801110c:	6313      	str	r3, [r2, #48]	; 0x30
}
 801110e:	b002      	add	sp, #8
 8011110:	bc04      	pop	{r2}
 8011112:	4690      	mov	r8, r2
 8011114:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011116:	4a24      	ldr	r2, [pc, #144]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011118:	69d1      	ldr	r1, [r2, #28]
 801111a:	2080      	movs	r0, #128	; 0x80
 801111c:	0540      	lsls	r0, r0, #21
 801111e:	4301      	orrs	r1, r0
 8011120:	61d1      	str	r1, [r2, #28]
 8011122:	69d3      	ldr	r3, [r2, #28]
 8011124:	4003      	ands	r3, r0
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801112a:	4a22      	ldr	r2, [pc, #136]	; (80111b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801112c:	6811      	ldr	r1, [r2, #0]
 801112e:	2380      	movs	r3, #128	; 0x80
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	430b      	orrs	r3, r1
 8011134:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011136:	f7fe fa4f 	bl	800f5d8 <HAL_GetTick>
 801113a:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 801113c:	4e1d      	ldr	r6, [pc, #116]	; (80111b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801113e:	2580      	movs	r5, #128	; 0x80
 8011140:	006d      	lsls	r5, r5, #1
 8011142:	6833      	ldr	r3, [r6, #0]
 8011144:	422b      	tst	r3, r5
 8011146:	d106      	bne.n	8011156 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011148:	f7fe fa46 	bl	800f5d8 <HAL_GetTick>
 801114c:	1bc0      	subs	r0, r0, r7
 801114e:	2864      	cmp	r0, #100	; 0x64
 8011150:	d9f7      	bls.n	8011142 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011152:	2003      	movs	r0, #3
 8011154:	e7db      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011156:	4b14      	ldr	r3, [pc, #80]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011158:	6a18      	ldr	r0, [r3, #32]
 801115a:	4a17      	ldr	r2, [pc, #92]	; (80111b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801115c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801115e:	6a1d      	ldr	r5, [r3, #32]
 8011160:	2180      	movs	r1, #128	; 0x80
 8011162:	0249      	lsls	r1, r1, #9
 8011164:	4329      	orrs	r1, r5
 8011166:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011168:	6a19      	ldr	r1, [r3, #32]
 801116a:	4d14      	ldr	r5, [pc, #80]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801116c:	4029      	ands	r1, r5
 801116e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011170:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011172:	0783      	lsls	r3, r0, #30
 8011174:	d407      	bmi.n	8011186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011176:	4a0c      	ldr	r2, [pc, #48]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011178:	6a13      	ldr	r3, [r2, #32]
 801117a:	490f      	ldr	r1, [pc, #60]	; (80111b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801117c:	400b      	ands	r3, r1
 801117e:	6861      	ldr	r1, [r4, #4]
 8011180:	430b      	orrs	r3, r1
 8011182:	6213      	str	r3, [r2, #32]
 8011184:	e790      	b.n	80110a8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011186:	f7fe fa27 	bl	800f5d8 <HAL_GetTick>
 801118a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801118c:	4e06      	ldr	r6, [pc, #24]	; (80111a8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801118e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011190:	4f0b      	ldr	r7, [pc, #44]	; (80111c0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011192:	6a33      	ldr	r3, [r6, #32]
 8011194:	421d      	tst	r5, r3
 8011196:	d1ee      	bne.n	8011176 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011198:	f7fe fa1e 	bl	800f5d8 <HAL_GetTick>
 801119c:	4643      	mov	r3, r8
 801119e:	1ac0      	subs	r0, r0, r3
 80111a0:	42b8      	cmp	r0, r7
 80111a2:	d9f6      	bls.n	8011192 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 80111a4:	2003      	movs	r0, #3
 80111a6:	e7b2      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x86>
 80111a8:	40021000 	.word	0x40021000
 80111ac:	fffcffff 	.word	0xfffcffff
 80111b0:	fff3ffff 	.word	0xfff3ffff
 80111b4:	40007000 	.word	0x40007000
 80111b8:	fffffcff 	.word	0xfffffcff
 80111bc:	fffeffff 	.word	0xfffeffff
 80111c0:	00001388 	.word	0x00001388

080111c4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80111c4:	4770      	bx	lr

080111c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80111c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80111ca:	6802      	ldr	r2, [r0, #0]
 80111cc:	68d3      	ldr	r3, [r2, #12]
 80111ce:	21a0      	movs	r1, #160	; 0xa0
 80111d0:	438b      	bics	r3, r1
 80111d2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80111d4:	f7fe fa00 	bl	800f5d8 <HAL_GetTick>
 80111d8:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80111da:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80111dc:	26fa      	movs	r6, #250	; 0xfa
 80111de:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	421d      	tst	r5, r3
 80111e6:	d106      	bne.n	80111f6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80111e8:	f7fe f9f6 	bl	800f5d8 <HAL_GetTick>
 80111ec:	1bc0      	subs	r0, r0, r7
 80111ee:	42b0      	cmp	r0, r6
 80111f0:	d9f6      	bls.n	80111e0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80111f2:	2003      	movs	r0, #3
 80111f4:	e000      	b.n	80111f8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80111f6:	2000      	movs	r0, #0
}
 80111f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80111fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111fc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111fe:	6803      	ldr	r3, [r0, #0]
 8011200:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8011202:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011204:	0652      	lsls	r2, r2, #25
 8011206:	d500      	bpl.n	801120a <RTC_EnterInitMode+0x10>
}
 8011208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801120a:	2201      	movs	r2, #1
 801120c:	4252      	negs	r2, r2
 801120e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011210:	f7fe f9e2 	bl	800f5d8 <HAL_GetTick>
 8011214:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011216:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011218:	26fa      	movs	r6, #250	; 0xfa
 801121a:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801121c:	6823      	ldr	r3, [r4, #0]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	421d      	tst	r5, r3
 8011222:	d106      	bne.n	8011232 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011224:	f7fe f9d8 	bl	800f5d8 <HAL_GetTick>
 8011228:	1bc0      	subs	r0, r0, r7
 801122a:	42b0      	cmp	r0, r6
 801122c:	d9f6      	bls.n	801121c <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 801122e:	2003      	movs	r0, #3
 8011230:	e7ea      	b.n	8011208 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011232:	2000      	movs	r0, #0
 8011234:	e7e8      	b.n	8011208 <RTC_EnterInitMode+0xe>
	...

08011238 <HAL_RTC_Init>:
{
 8011238:	b570      	push	{r4, r5, r6, lr}
 801123a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801123c:	d046      	beq.n	80112cc <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801123e:	7f43      	ldrb	r3, [r0, #29]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d038      	beq.n	80112b6 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011244:	2302      	movs	r3, #2
 8011246:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011248:	6823      	ldr	r3, [r4, #0]
 801124a:	22ca      	movs	r2, #202	; 0xca
 801124c:	625a      	str	r2, [r3, #36]	; 0x24
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	3a77      	subs	r2, #119	; 0x77
 8011252:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011254:	0020      	movs	r0, r4
 8011256:	f7ff ffd0 	bl	80111fa <RTC_EnterInitMode>
 801125a:	2800      	cmp	r0, #0
 801125c:	d12f      	bne.n	80112be <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801125e:	6822      	ldr	r2, [r4, #0]
 8011260:	6893      	ldr	r3, [r2, #8]
 8011262:	491b      	ldr	r1, [pc, #108]	; (80112d0 <HAL_RTC_Init+0x98>)
 8011264:	400b      	ands	r3, r1
 8011266:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011268:	6822      	ldr	r2, [r4, #0]
 801126a:	6891      	ldr	r1, [r2, #8]
 801126c:	6863      	ldr	r3, [r4, #4]
 801126e:	6925      	ldr	r5, [r4, #16]
 8011270:	432b      	orrs	r3, r5
 8011272:	6965      	ldr	r5, [r4, #20]
 8011274:	432b      	orrs	r3, r5
 8011276:	430b      	orrs	r3, r1
 8011278:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	68e2      	ldr	r2, [r4, #12]
 801127e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011280:	6822      	ldr	r2, [r4, #0]
 8011282:	6911      	ldr	r1, [r2, #16]
 8011284:	68a3      	ldr	r3, [r4, #8]
 8011286:	041b      	lsls	r3, r3, #16
 8011288:	430b      	orrs	r3, r1
 801128a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801128c:	6822      	ldr	r2, [r4, #0]
 801128e:	68d3      	ldr	r3, [r2, #12]
 8011290:	2180      	movs	r1, #128	; 0x80
 8011292:	438b      	bics	r3, r1
 8011294:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011296:	6822      	ldr	r2, [r4, #0]
 8011298:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801129a:	490e      	ldr	r1, [pc, #56]	; (80112d4 <HAL_RTC_Init+0x9c>)
 801129c:	400b      	ands	r3, r1
 801129e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80112a0:	6822      	ldr	r2, [r4, #0]
 80112a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80112a4:	69a1      	ldr	r1, [r4, #24]
 80112a6:	430b      	orrs	r3, r1
 80112a8:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	22ff      	movs	r2, #255	; 0xff
 80112ae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80112b0:	2301      	movs	r3, #1
 80112b2:	7763      	strb	r3, [r4, #29]
}
 80112b4:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80112b6:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80112b8:	f7ff ff84 	bl	80111c4 <HAL_RTC_MspInit>
 80112bc:	e7c2      	b.n	8011244 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	22ff      	movs	r2, #255	; 0xff
 80112c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80112c4:	2304      	movs	r3, #4
 80112c6:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80112c8:	2001      	movs	r0, #1
 80112ca:	e7f3      	b.n	80112b4 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80112cc:	2001      	movs	r0, #1
 80112ce:	e7f1      	b.n	80112b4 <HAL_RTC_Init+0x7c>
 80112d0:	ff8fffbf 	.word	0xff8fffbf
 80112d4:	fffbffff 	.word	0xfffbffff

080112d8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80112d8:	2809      	cmp	r0, #9
 80112da:	d909      	bls.n	80112f0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80112dc:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80112de:	3301      	adds	r3, #1
    Value -= 10;
 80112e0:	380a      	subs	r0, #10
 80112e2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80112e4:	2809      	cmp	r0, #9
 80112e6:	d8fa      	bhi.n	80112de <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80112e8:	011b      	lsls	r3, r3, #4
 80112ea:	4318      	orrs	r0, r3
 80112ec:	b2c0      	uxtb	r0, r0
}
 80112ee:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	e7f9      	b.n	80112e8 <RTC_ByteToBcd2+0x10>

080112f4 <HAL_RTC_SetTime>:
{
 80112f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f6:	46c6      	mov	lr, r8
 80112f8:	b500      	push	{lr}
 80112fa:	0004      	movs	r4, r0
 80112fc:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80112fe:	7f03      	ldrb	r3, [r0, #28]
 8011300:	2b01      	cmp	r3, #1
 8011302:	d100      	bne.n	8011306 <HAL_RTC_SetTime+0x12>
 8011304:	e075      	b.n	80113f2 <HAL_RTC_SetTime+0xfe>
 8011306:	2301      	movs	r3, #1
 8011308:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801130a:	3301      	adds	r3, #1
 801130c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801130e:	2a00      	cmp	r2, #0
 8011310:	d144      	bne.n	801139c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011312:	6803      	ldr	r3, [r0, #0]
 8011314:	689b      	ldr	r3, [r3, #8]
 8011316:	065b      	lsls	r3, r3, #25
 8011318:	d401      	bmi.n	801131e <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 801131a:	2300      	movs	r3, #0
 801131c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801131e:	7830      	ldrb	r0, [r6, #0]
 8011320:	f7ff ffda 	bl	80112d8 <RTC_ByteToBcd2>
 8011324:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011326:	7870      	ldrb	r0, [r6, #1]
 8011328:	f7ff ffd6 	bl	80112d8 <RTC_ByteToBcd2>
 801132c:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801132e:	78b0      	ldrb	r0, [r6, #2]
 8011330:	f7ff ffd2 	bl	80112d8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011334:	7a35      	ldrb	r5, [r6, #8]
 8011336:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011338:	4305      	orrs	r5, r0
 801133a:	4643      	mov	r3, r8
 801133c:	0418      	lsls	r0, r3, #16
 801133e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011340:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011342:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	22ca      	movs	r2, #202	; 0xca
 8011348:	625a      	str	r2, [r3, #36]	; 0x24
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	3a77      	subs	r2, #119	; 0x77
 801134e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011350:	0020      	movs	r0, r4
 8011352:	f7ff ff52 	bl	80111fa <RTC_EnterInitMode>
 8011356:	1e07      	subs	r7, r0, #0
 8011358:	d131      	bne.n	80113be <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	4826      	ldr	r0, [pc, #152]	; (80113f8 <HAL_RTC_SetTime+0x104>)
 801135e:	4005      	ands	r5, r0
 8011360:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011362:	6822      	ldr	r2, [r4, #0]
 8011364:	6893      	ldr	r3, [r2, #8]
 8011366:	4925      	ldr	r1, [pc, #148]	; (80113fc <HAL_RTC_SetTime+0x108>)
 8011368:	400b      	ands	r3, r1
 801136a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801136c:	6822      	ldr	r2, [r4, #0]
 801136e:	6891      	ldr	r1, [r2, #8]
 8011370:	68f3      	ldr	r3, [r6, #12]
 8011372:	6930      	ldr	r0, [r6, #16]
 8011374:	4303      	orrs	r3, r0
 8011376:	430b      	orrs	r3, r1
 8011378:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801137a:	6822      	ldr	r2, [r4, #0]
 801137c:	68d3      	ldr	r3, [r2, #12]
 801137e:	2180      	movs	r1, #128	; 0x80
 8011380:	438b      	bics	r3, r1
 8011382:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	069b      	lsls	r3, r3, #26
 801138a:	d524      	bpl.n	80113d6 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801138c:	6823      	ldr	r3, [r4, #0]
 801138e:	22ff      	movs	r2, #255	; 0xff
 8011390:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011392:	2301      	movs	r3, #1
 8011394:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011396:	2300      	movs	r3, #0
 8011398:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801139a:	e018      	b.n	80113ce <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801139c:	6803      	ldr	r3, [r0, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	065b      	lsls	r3, r3, #25
 80113a2:	d401      	bmi.n	80113a8 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 80113a4:	2300      	movs	r3, #0
 80113a6:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80113a8:	7835      	ldrb	r5, [r6, #0]
 80113aa:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80113ac:	7870      	ldrb	r0, [r6, #1]
 80113ae:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80113b0:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80113b2:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80113b4:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80113b6:	7a30      	ldrb	r0, [r6, #8]
 80113b8:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80113ba:	4305      	orrs	r5, r0
 80113bc:	e7c2      	b.n	8011344 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80113be:	6823      	ldr	r3, [r4, #0]
 80113c0:	22ff      	movs	r2, #255	; 0xff
 80113c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80113c4:	2304      	movs	r3, #4
 80113c6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80113c8:	2300      	movs	r3, #0
 80113ca:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80113cc:	2701      	movs	r7, #1
}
 80113ce:	0038      	movs	r0, r7
 80113d0:	bc04      	pop	{r2}
 80113d2:	4690      	mov	r8, r2
 80113d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113d6:	0020      	movs	r0, r4
 80113d8:	f7ff fef5 	bl	80111c6 <HAL_RTC_WaitForSynchro>
 80113dc:	2800      	cmp	r0, #0
 80113de:	d0d5      	beq.n	801138c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80113e0:	6823      	ldr	r3, [r4, #0]
 80113e2:	22ff      	movs	r2, #255	; 0xff
 80113e4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80113e6:	2304      	movs	r3, #4
 80113e8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80113ea:	2300      	movs	r3, #0
 80113ec:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80113ee:	2701      	movs	r7, #1
 80113f0:	e7ed      	b.n	80113ce <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80113f2:	2702      	movs	r7, #2
 80113f4:	e7eb      	b.n	80113ce <HAL_RTC_SetTime+0xda>
 80113f6:	46c0      	nop			; (mov r8, r8)
 80113f8:	007f7f7f 	.word	0x007f7f7f
 80113fc:	fffbffff 	.word	0xfffbffff

08011400 <HAL_RTC_SetDate>:
{
 8011400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011402:	46c6      	mov	lr, r8
 8011404:	b500      	push	{lr}
 8011406:	0004      	movs	r4, r0
 8011408:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801140a:	7f03      	ldrb	r3, [r0, #28]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d03a      	beq.n	8011486 <HAL_RTC_SetDate+0x86>
 8011410:	2301      	movs	r3, #1
 8011412:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011414:	3301      	adds	r3, #1
 8011416:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011418:	2a00      	cmp	r2, #0
 801141a:	d136      	bne.n	801148a <HAL_RTC_SetDate+0x8a>
 801141c:	784b      	ldrb	r3, [r1, #1]
 801141e:	06da      	lsls	r2, r3, #27
 8011420:	d503      	bpl.n	801142a <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011422:	2210      	movs	r2, #16
 8011424:	4393      	bics	r3, r2
 8011426:	330a      	adds	r3, #10
 8011428:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801142a:	78f0      	ldrb	r0, [r6, #3]
 801142c:	f7ff ff54 	bl	80112d8 <RTC_ByteToBcd2>
 8011430:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011432:	7870      	ldrb	r0, [r6, #1]
 8011434:	f7ff ff50 	bl	80112d8 <RTC_ByteToBcd2>
 8011438:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801143a:	78b0      	ldrb	r0, [r6, #2]
 801143c:	f7ff ff4c 	bl	80112d8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011440:	7835      	ldrb	r5, [r6, #0]
 8011442:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011444:	4305      	orrs	r5, r0
 8011446:	4643      	mov	r3, r8
 8011448:	0418      	lsls	r0, r3, #16
 801144a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801144c:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801144e:	433d      	orrs	r5, r7
 8011450:	e025      	b.n	801149e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	22ff      	movs	r2, #255	; 0xff
 8011456:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011458:	2304      	movs	r3, #4
 801145a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801145c:	2300      	movs	r3, #0
 801145e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011460:	2601      	movs	r6, #1
}
 8011462:	0030      	movs	r0, r6
 8011464:	bc04      	pop	{r2}
 8011466:	4690      	mov	r8, r2
 8011468:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801146a:	0020      	movs	r0, r4
 801146c:	f7ff feab 	bl	80111c6 <HAL_RTC_WaitForSynchro>
 8011470:	2800      	cmp	r0, #0
 8011472:	d02c      	beq.n	80114ce <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	22ff      	movs	r2, #255	; 0xff
 8011478:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801147a:	2304      	movs	r3, #4
 801147c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801147e:	2300      	movs	r3, #0
 8011480:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011482:	2601      	movs	r6, #1
 8011484:	e7ed      	b.n	8011462 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011486:	2602      	movs	r6, #2
 8011488:	e7eb      	b.n	8011462 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801148a:	78cd      	ldrb	r5, [r1, #3]
 801148c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801148e:	7848      	ldrb	r0, [r1, #1]
 8011490:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011492:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011494:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011496:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011498:	7808      	ldrb	r0, [r1, #0]
 801149a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801149c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801149e:	6823      	ldr	r3, [r4, #0]
 80114a0:	22ca      	movs	r2, #202	; 0xca
 80114a2:	625a      	str	r2, [r3, #36]	; 0x24
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	3a77      	subs	r2, #119	; 0x77
 80114a8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80114aa:	0020      	movs	r0, r4
 80114ac:	f7ff fea5 	bl	80111fa <RTC_EnterInitMode>
 80114b0:	1e06      	subs	r6, r0, #0
 80114b2:	d1ce      	bne.n	8011452 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	480a      	ldr	r0, [pc, #40]	; (80114e0 <HAL_RTC_SetDate+0xe0>)
 80114b8:	4005      	ands	r5, r0
 80114ba:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80114bc:	6822      	ldr	r2, [r4, #0]
 80114be:	68d3      	ldr	r3, [r2, #12]
 80114c0:	2180      	movs	r1, #128	; 0x80
 80114c2:	438b      	bics	r3, r1
 80114c4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	069b      	lsls	r3, r3, #26
 80114cc:	d5cd      	bpl.n	801146a <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	22ff      	movs	r2, #255	; 0xff
 80114d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80114d4:	2301      	movs	r3, #1
 80114d6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80114d8:	2300      	movs	r3, #0
 80114da:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80114dc:	e7c1      	b.n	8011462 <HAL_RTC_SetDate+0x62>
 80114de:	46c0      	nop			; (mov r8, r8)
 80114e0:	00ffff3f 	.word	0x00ffff3f

080114e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80114e4:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80114e6:	0900      	lsrs	r0, r0, #4
 80114e8:	0083      	lsls	r3, r0, #2
 80114ea:	181b      	adds	r3, r3, r0
 80114ec:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80114ee:	200f      	movs	r0, #15
 80114f0:	4010      	ands	r0, r2
 80114f2:	1818      	adds	r0, r3, r0
 80114f4:	b2c0      	uxtb	r0, r0
}
 80114f6:	4770      	bx	lr

080114f8 <HAL_RTC_GetTime>:
{
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80114fc:	6803      	ldr	r3, [r0, #0]
 80114fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011500:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011502:	6803      	ldr	r3, [r0, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	490e      	ldr	r1, [pc, #56]	; (8011540 <HAL_RTC_GetTime+0x48>)
 8011508:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801150a:	0c19      	lsrs	r1, r3, #16
 801150c:	203f      	movs	r0, #63	; 0x3f
 801150e:	4008      	ands	r0, r1
 8011510:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011512:	0a1e      	lsrs	r6, r3, #8
 8011514:	b2f6      	uxtb	r6, r6
 8011516:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011518:	b2dc      	uxtb	r4, r3
 801151a:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801151c:	2340      	movs	r3, #64	; 0x40
 801151e:	400b      	ands	r3, r1
 8011520:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8011522:	2a00      	cmp	r2, #0
 8011524:	d10a      	bne.n	801153c <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011526:	f7ff ffdd 	bl	80114e4 <RTC_Bcd2ToByte>
 801152a:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801152c:	0030      	movs	r0, r6
 801152e:	f7ff ffd9 	bl	80114e4 <RTC_Bcd2ToByte>
 8011532:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011534:	0020      	movs	r0, r4
 8011536:	f7ff ffd5 	bl	80114e4 <RTC_Bcd2ToByte>
 801153a:	70a8      	strb	r0, [r5, #2]
}
 801153c:	2000      	movs	r0, #0
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	007f7f7f 	.word	0x007f7f7f

08011544 <HAL_RTC_GetDate>:
{
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011548:	6803      	ldr	r3, [r0, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	490d      	ldr	r1, [pc, #52]	; (8011584 <HAL_RTC_GetDate+0x40>)
 801154e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011550:	0c18      	lsrs	r0, r3, #16
 8011552:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011554:	04dd      	lsls	r5, r3, #19
 8011556:	0eed      	lsrs	r5, r5, #27
 8011558:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801155a:	b2de      	uxtb	r6, r3
 801155c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801155e:	041b      	lsls	r3, r3, #16
 8011560:	0f5b      	lsrs	r3, r3, #29
 8011562:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011564:	2a00      	cmp	r2, #0
 8011566:	d10a      	bne.n	801157e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011568:	f7ff ffbc 	bl	80114e4 <RTC_Bcd2ToByte>
 801156c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801156e:	0028      	movs	r0, r5
 8011570:	f7ff ffb8 	bl	80114e4 <RTC_Bcd2ToByte>
 8011574:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011576:	0030      	movs	r0, r6
 8011578:	f7ff ffb4 	bl	80114e4 <RTC_Bcd2ToByte>
 801157c:	70a0      	strb	r0, [r4, #2]
}
 801157e:	2000      	movs	r0, #0
 8011580:	bd70      	pop	{r4, r5, r6, pc}
 8011582:	46c0      	nop			; (mov r8, r8)
 8011584:	00ffff3f 	.word	0x00ffff3f

08011588 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011588:	6803      	ldr	r3, [r0, #0]
 801158a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801158c:	0089      	lsls	r1, r1, #2
 801158e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011590:	600a      	str	r2, [r1, #0]
}
 8011592:	4770      	bx	lr

08011594 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011594:	6803      	ldr	r3, [r0, #0]
 8011596:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011598:	0089      	lsls	r1, r1, #2
 801159a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801159c:	6808      	ldr	r0, [r1, #0]
}
 801159e:	4770      	bx	lr

080115a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80115a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80115a2:	6a03      	ldr	r3, [r0, #32]
 80115a4:	2201      	movs	r2, #1
 80115a6:	4393      	bics	r3, r2
 80115a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115ae:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80115b0:	2573      	movs	r5, #115	; 0x73
 80115b2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115b4:	680d      	ldr	r5, [r1, #0]
 80115b6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80115b8:	2502      	movs	r5, #2
 80115ba:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80115bc:	688d      	ldr	r5, [r1, #8]
 80115be:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80115c0:	4d19      	ldr	r5, [pc, #100]	; (8011628 <TIM_OC1_SetConfig+0x88>)
 80115c2:	42a8      	cmp	r0, r5
 80115c4:	d00f      	beq.n	80115e6 <TIM_OC1_SetConfig+0x46>
 80115c6:	4d19      	ldr	r5, [pc, #100]	; (801162c <TIM_OC1_SetConfig+0x8c>)
 80115c8:	42a8      	cmp	r0, r5
 80115ca:	d01e      	beq.n	801160a <TIM_OC1_SetConfig+0x6a>
 80115cc:	4d18      	ldr	r5, [pc, #96]	; (8011630 <TIM_OC1_SetConfig+0x90>)
 80115ce:	42a8      	cmp	r0, r5
 80115d0:	d022      	beq.n	8011618 <TIM_OC1_SetConfig+0x78>
 80115d2:	4d18      	ldr	r5, [pc, #96]	; (8011634 <TIM_OC1_SetConfig+0x94>)
 80115d4:	42a8      	cmp	r0, r5
 80115d6:	d112      	bne.n	80115fe <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80115d8:	2508      	movs	r5, #8
 80115da:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80115dc:	68cd      	ldr	r5, [r1, #12]
 80115de:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80115e0:	2504      	movs	r5, #4
 80115e2:	43ab      	bics	r3, r5
 80115e4:	e005      	b.n	80115f2 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 80115e6:	2508      	movs	r5, #8
 80115e8:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80115ea:	68cd      	ldr	r5, [r1, #12]
 80115ec:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80115ee:	2504      	movs	r5, #4
 80115f0:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80115f2:	4d11      	ldr	r5, [pc, #68]	; (8011638 <TIM_OC1_SetConfig+0x98>)
 80115f4:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80115f6:	694d      	ldr	r5, [r1, #20]
 80115f8:	698e      	ldr	r6, [r1, #24]
 80115fa:	4335      	orrs	r5, r6
 80115fc:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115fe:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011600:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011602:	684a      	ldr	r2, [r1, #4]
 8011604:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011606:	6203      	str	r3, [r0, #32]
}
 8011608:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 801160a:	2508      	movs	r5, #8
 801160c:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 801160e:	68cd      	ldr	r5, [r1, #12]
 8011610:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8011612:	2504      	movs	r5, #4
 8011614:	43ab      	bics	r3, r5
 8011616:	e7ec      	b.n	80115f2 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 8011618:	2508      	movs	r5, #8
 801161a:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 801161c:	68cd      	ldr	r5, [r1, #12]
 801161e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8011620:	2504      	movs	r5, #4
 8011622:	43ab      	bics	r3, r5
 8011624:	e7e5      	b.n	80115f2 <TIM_OC1_SetConfig+0x52>
 8011626:	46c0      	nop			; (mov r8, r8)
 8011628:	40012c00 	.word	0x40012c00
 801162c:	40014000 	.word	0x40014000
 8011630:	40014400 	.word	0x40014400
 8011634:	40014800 	.word	0x40014800
 8011638:	fffffcff 	.word	0xfffffcff

0801163c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801163c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801163e:	6a03      	ldr	r3, [r0, #32]
 8011640:	4a17      	ldr	r2, [pc, #92]	; (80116a0 <TIM_OC3_SetConfig+0x64>)
 8011642:	4013      	ands	r3, r2
 8011644:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011646:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011648:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801164a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801164c:	2473      	movs	r4, #115	; 0x73
 801164e:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011650:	680c      	ldr	r4, [r1, #0]
 8011652:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011654:	4c13      	ldr	r4, [pc, #76]	; (80116a4 <TIM_OC3_SetConfig+0x68>)
 8011656:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8011658:	688c      	ldr	r4, [r1, #8]
 801165a:	0224      	lsls	r4, r4, #8
 801165c:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801165e:	4c12      	ldr	r4, [pc, #72]	; (80116a8 <TIM_OC3_SetConfig+0x6c>)
 8011660:	42a0      	cmp	r0, r4
 8011662:	d009      	beq.n	8011678 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011664:	4c11      	ldr	r4, [pc, #68]	; (80116ac <TIM_OC3_SetConfig+0x70>)
 8011666:	42a0      	cmp	r0, r4
 8011668:	d00d      	beq.n	8011686 <TIM_OC3_SetConfig+0x4a>
 801166a:	4c11      	ldr	r4, [pc, #68]	; (80116b0 <TIM_OC3_SetConfig+0x74>)
 801166c:	42a0      	cmp	r0, r4
 801166e:	d00a      	beq.n	8011686 <TIM_OC3_SetConfig+0x4a>
 8011670:	4c10      	ldr	r4, [pc, #64]	; (80116b4 <TIM_OC3_SetConfig+0x78>)
 8011672:	42a0      	cmp	r0, r4
 8011674:	d10e      	bne.n	8011694 <TIM_OC3_SetConfig+0x58>
 8011676:	e006      	b.n	8011686 <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8011678:	4c0f      	ldr	r4, [pc, #60]	; (80116b8 <TIM_OC3_SetConfig+0x7c>)
 801167a:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 801167c:	68cb      	ldr	r3, [r1, #12]
 801167e:	021b      	lsls	r3, r3, #8
 8011680:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8011682:	4c0e      	ldr	r4, [pc, #56]	; (80116bc <TIM_OC3_SetConfig+0x80>)
 8011684:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011686:	4c0e      	ldr	r4, [pc, #56]	; (80116c0 <TIM_OC3_SetConfig+0x84>)
 8011688:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 801168a:	698a      	ldr	r2, [r1, #24]
 801168c:	694e      	ldr	r6, [r1, #20]
 801168e:	4332      	orrs	r2, r6
 8011690:	0112      	lsls	r2, r2, #4
 8011692:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011694:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011696:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011698:	684a      	ldr	r2, [r1, #4]
 801169a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801169c:	6203      	str	r3, [r0, #32]
}
 801169e:	bd70      	pop	{r4, r5, r6, pc}
 80116a0:	fffffeff 	.word	0xfffffeff
 80116a4:	fffffdff 	.word	0xfffffdff
 80116a8:	40012c00 	.word	0x40012c00
 80116ac:	40014000 	.word	0x40014000
 80116b0:	40014400 	.word	0x40014400
 80116b4:	40014800 	.word	0x40014800
 80116b8:	fffff7ff 	.word	0xfffff7ff
 80116bc:	fffffbff 	.word	0xfffffbff
 80116c0:	ffffcfff 	.word	0xffffcfff

080116c4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116c4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80116c6:	6a03      	ldr	r3, [r0, #32]
 80116c8:	4a13      	ldr	r2, [pc, #76]	; (8011718 <TIM_OC4_SetConfig+0x54>)
 80116ca:	4013      	ands	r3, r2
 80116cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116ce:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116d0:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80116d2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80116d4:	4d11      	ldr	r5, [pc, #68]	; (801171c <TIM_OC4_SetConfig+0x58>)
 80116d6:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80116d8:	680d      	ldr	r5, [r1, #0]
 80116da:	022d      	lsls	r5, r5, #8
 80116dc:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80116de:	4d10      	ldr	r5, [pc, #64]	; (8011720 <TIM_OC4_SetConfig+0x5c>)
 80116e0:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80116e2:	688a      	ldr	r2, [r1, #8]
 80116e4:	0312      	lsls	r2, r2, #12
 80116e6:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80116e8:	4d0e      	ldr	r5, [pc, #56]	; (8011724 <TIM_OC4_SetConfig+0x60>)
 80116ea:	42a8      	cmp	r0, r5
 80116ec:	d008      	beq.n	8011700 <TIM_OC4_SetConfig+0x3c>
 80116ee:	4d0e      	ldr	r5, [pc, #56]	; (8011728 <TIM_OC4_SetConfig+0x64>)
 80116f0:	42a8      	cmp	r0, r5
 80116f2:	d005      	beq.n	8011700 <TIM_OC4_SetConfig+0x3c>
 80116f4:	4d0d      	ldr	r5, [pc, #52]	; (801172c <TIM_OC4_SetConfig+0x68>)
 80116f6:	42a8      	cmp	r0, r5
 80116f8:	d002      	beq.n	8011700 <TIM_OC4_SetConfig+0x3c>
 80116fa:	4d0d      	ldr	r5, [pc, #52]	; (8011730 <TIM_OC4_SetConfig+0x6c>)
 80116fc:	42a8      	cmp	r0, r5
 80116fe:	d104      	bne.n	801170a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011700:	4d0c      	ldr	r5, [pc, #48]	; (8011734 <TIM_OC4_SetConfig+0x70>)
 8011702:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8011704:	694d      	ldr	r5, [r1, #20]
 8011706:	01ad      	lsls	r5, r5, #6
 8011708:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801170a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801170c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801170e:	684b      	ldr	r3, [r1, #4]
 8011710:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011712:	6202      	str	r2, [r0, #32]
}
 8011714:	bd30      	pop	{r4, r5, pc}
 8011716:	46c0      	nop			; (mov r8, r8)
 8011718:	ffffefff 	.word	0xffffefff
 801171c:	ffff8cff 	.word	0xffff8cff
 8011720:	ffffdfff 	.word	0xffffdfff
 8011724:	40012c00 	.word	0x40012c00
 8011728:	40014000 	.word	0x40014000
 801172c:	40014400 	.word	0x40014400
 8011730:	40014800 	.word	0x40014800
 8011734:	ffffbfff 	.word	0xffffbfff

08011738 <HAL_TIM_Base_MspInit>:
}
 8011738:	4770      	bx	lr

0801173a <HAL_TIM_Base_MspDeInit>:
}
 801173a:	4770      	bx	lr

0801173c <HAL_TIM_Base_DeInit>:
{
 801173c:	b510      	push	{r4, lr}
 801173e:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8011740:	2339      	movs	r3, #57	; 0x39
 8011742:	2202      	movs	r2, #2
 8011744:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8011746:	6803      	ldr	r3, [r0, #0]
 8011748:	6a19      	ldr	r1, [r3, #32]
 801174a:	4a0a      	ldr	r2, [pc, #40]	; (8011774 <HAL_TIM_Base_DeInit+0x38>)
 801174c:	4211      	tst	r1, r2
 801174e:	d107      	bne.n	8011760 <HAL_TIM_Base_DeInit+0x24>
 8011750:	6a19      	ldr	r1, [r3, #32]
 8011752:	4a09      	ldr	r2, [pc, #36]	; (8011778 <HAL_TIM_Base_DeInit+0x3c>)
 8011754:	4211      	tst	r1, r2
 8011756:	d103      	bne.n	8011760 <HAL_TIM_Base_DeInit+0x24>
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	2101      	movs	r1, #1
 801175c:	438a      	bics	r2, r1
 801175e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8011760:	0020      	movs	r0, r4
 8011762:	f7ff ffea 	bl	801173a <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8011766:	2300      	movs	r3, #0
 8011768:	2239      	movs	r2, #57	; 0x39
 801176a:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 801176c:	3a01      	subs	r2, #1
 801176e:	54a3      	strb	r3, [r4, r2]
}
 8011770:	2000      	movs	r0, #0
 8011772:	bd10      	pop	{r4, pc}
 8011774:	00001111 	.word	0x00001111
 8011778:	00000444 	.word	0x00000444

0801177c <HAL_TIM_Base_Start>:
{
 801177c:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 801177e:	2239      	movs	r2, #57	; 0x39
 8011780:	2302      	movs	r3, #2
 8011782:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011784:	6804      	ldr	r4, [r0, #0]
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	2101      	movs	r1, #1
 801178a:	430b      	orrs	r3, r1
 801178c:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 801178e:	5481      	strb	r1, [r0, r2]
}
 8011790:	2000      	movs	r0, #0
 8011792:	bd10      	pop	{r4, pc}

08011794 <HAL_TIM_PWM_MspInit>:
}
 8011794:	4770      	bx	lr

08011796 <HAL_TIM_PWM_MspDeInit>:
}
 8011796:	4770      	bx	lr

08011798 <HAL_TIM_PWM_DeInit>:
{
 8011798:	b510      	push	{r4, lr}
 801179a:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801179c:	2339      	movs	r3, #57	; 0x39
 801179e:	2202      	movs	r2, #2
 80117a0:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	6a19      	ldr	r1, [r3, #32]
 80117a6:	4a0a      	ldr	r2, [pc, #40]	; (80117d0 <HAL_TIM_PWM_DeInit+0x38>)
 80117a8:	4211      	tst	r1, r2
 80117aa:	d107      	bne.n	80117bc <HAL_TIM_PWM_DeInit+0x24>
 80117ac:	6a19      	ldr	r1, [r3, #32]
 80117ae:	4a09      	ldr	r2, [pc, #36]	; (80117d4 <HAL_TIM_PWM_DeInit+0x3c>)
 80117b0:	4211      	tst	r1, r2
 80117b2:	d103      	bne.n	80117bc <HAL_TIM_PWM_DeInit+0x24>
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	2101      	movs	r1, #1
 80117b8:	438a      	bics	r2, r1
 80117ba:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80117bc:	0020      	movs	r0, r4
 80117be:	f7ff ffea 	bl	8011796 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80117c2:	2300      	movs	r3, #0
 80117c4:	2239      	movs	r2, #57	; 0x39
 80117c6:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 80117c8:	3a01      	subs	r2, #1
 80117ca:	54a3      	strb	r3, [r4, r2]
}
 80117cc:	2000      	movs	r0, #0
 80117ce:	bd10      	pop	{r4, pc}
 80117d0:	00001111 	.word	0x00001111
 80117d4:	00000444 	.word	0x00000444

080117d8 <HAL_TIM_ConfigClockSource>:
{
 80117d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80117da:	2338      	movs	r3, #56	; 0x38
 80117dc:	5cc3      	ldrb	r3, [r0, r3]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d100      	bne.n	80117e4 <HAL_TIM_ConfigClockSource+0xc>
 80117e2:	e0cb      	b.n	801197c <HAL_TIM_ConfigClockSource+0x1a4>
 80117e4:	2338      	movs	r3, #56	; 0x38
 80117e6:	2201      	movs	r2, #1
 80117e8:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80117ea:	3301      	adds	r3, #1
 80117ec:	3201      	adds	r2, #1
 80117ee:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80117f0:	6802      	ldr	r2, [r0, #0]
 80117f2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117f4:	4c62      	ldr	r4, [pc, #392]	; (8011980 <HAL_TIM_ConfigClockSource+0x1a8>)
 80117f6:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80117f8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80117fa:	680b      	ldr	r3, [r1, #0]
 80117fc:	2b40      	cmp	r3, #64	; 0x40
 80117fe:	d100      	bne.n	8011802 <HAL_TIM_ConfigClockSource+0x2a>
 8011800:	e092      	b.n	8011928 <HAL_TIM_ConfigClockSource+0x150>
 8011802:	d922      	bls.n	801184a <HAL_TIM_ConfigClockSource+0x72>
 8011804:	2b70      	cmp	r3, #112	; 0x70
 8011806:	d063      	beq.n	80118d0 <HAL_TIM_ConfigClockSource+0xf8>
 8011808:	d83a      	bhi.n	8011880 <HAL_TIM_ConfigClockSource+0xa8>
 801180a:	2b50      	cmp	r3, #80	; 0x50
 801180c:	d100      	bne.n	8011810 <HAL_TIM_ConfigClockSource+0x38>
 801180e:	e071      	b.n	80118f4 <HAL_TIM_ConfigClockSource+0x11c>
 8011810:	2b60      	cmp	r3, #96	; 0x60
 8011812:	d155      	bne.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011814:	6803      	ldr	r3, [r0, #0]
 8011816:	684a      	ldr	r2, [r1, #4]
 8011818:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801181a:	6a1c      	ldr	r4, [r3, #32]
 801181c:	2510      	movs	r5, #16
 801181e:	43ac      	bics	r4, r5
 8011820:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011822:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8011824:	6a1c      	ldr	r4, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011826:	4e57      	ldr	r6, [pc, #348]	; (8011984 <HAL_TIM_ConfigClockSource+0x1ac>)
 8011828:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 801182a:	0309      	lsls	r1, r1, #12
 801182c:	4329      	orrs	r1, r5

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801182e:	25a0      	movs	r5, #160	; 0xa0
 8011830:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 8011832:	0112      	lsls	r2, r2, #4
 8011834:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011836:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8011838:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801183a:	6802      	ldr	r2, [r0, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 801183c:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 801183e:	2170      	movs	r1, #112	; 0x70
 8011840:	438b      	bics	r3, r1
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011842:	3909      	subs	r1, #9
 8011844:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011846:	6093      	str	r3, [r2, #8]
 8011848:	e03a      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 801184a:	2b10      	cmp	r3, #16
 801184c:	d100      	bne.n	8011850 <HAL_TIM_ConfigClockSource+0x78>
 801184e:	e085      	b.n	801195c <HAL_TIM_ConfigClockSource+0x184>
 8011850:	d90c      	bls.n	801186c <HAL_TIM_ConfigClockSource+0x94>
 8011852:	2b20      	cmp	r3, #32
 8011854:	d100      	bne.n	8011858 <HAL_TIM_ConfigClockSource+0x80>
 8011856:	e089      	b.n	801196c <HAL_TIM_ConfigClockSource+0x194>
 8011858:	2b30      	cmp	r3, #48	; 0x30
 801185a:	d131      	bne.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 801185c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801185e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011860:	2170      	movs	r1, #112	; 0x70
 8011862:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011864:	3939      	subs	r1, #57	; 0x39
 8011866:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011868:	6093      	str	r3, [r2, #8]
 801186a:	e029      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 801186c:	2b00      	cmp	r3, #0
 801186e:	d127      	bne.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011870:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8011872:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011874:	2170      	movs	r1, #112	; 0x70
 8011876:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011878:	3969      	subs	r1, #105	; 0x69
 801187a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801187c:	6093      	str	r3, [r2, #8]
 801187e:	e01f      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8011880:	2280      	movs	r2, #128	; 0x80
 8011882:	0152      	lsls	r2, r2, #5
 8011884:	4293      	cmp	r3, r2
 8011886:	d016      	beq.n	80118b6 <HAL_TIM_ConfigClockSource+0xde>
 8011888:	2280      	movs	r2, #128	; 0x80
 801188a:	0192      	lsls	r2, r2, #6
 801188c:	4293      	cmp	r3, r2
 801188e:	d117      	bne.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ETR_SetConfig(htim->Instance,
 8011890:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8011892:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011894:	4a3c      	ldr	r2, [pc, #240]	; (8011988 <HAL_TIM_ConfigClockSource+0x1b0>)
 8011896:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011898:	688b      	ldr	r3, [r1, #8]
 801189a:	684d      	ldr	r5, [r1, #4]
 801189c:	432b      	orrs	r3, r5
 801189e:	68c9      	ldr	r1, [r1, #12]
 80118a0:	0209      	lsls	r1, r1, #8
 80118a2:	430b      	orrs	r3, r1
 80118a4:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118a6:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80118a8:	6802      	ldr	r2, [r0, #0]
 80118aa:	6891      	ldr	r1, [r2, #8]
 80118ac:	2380      	movs	r3, #128	; 0x80
 80118ae:	01db      	lsls	r3, r3, #7
 80118b0:	430b      	orrs	r3, r1
 80118b2:	6093      	str	r3, [r2, #8]
    break;
 80118b4:	e004      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80118b6:	6802      	ldr	r2, [r0, #0]
 80118b8:	6893      	ldr	r3, [r2, #8]
 80118ba:	2107      	movs	r1, #7
 80118bc:	438b      	bics	r3, r1
 80118be:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80118c0:	2339      	movs	r3, #57	; 0x39
 80118c2:	2201      	movs	r2, #1
 80118c4:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80118c6:	3b01      	subs	r3, #1
 80118c8:	2200      	movs	r2, #0
 80118ca:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80118cc:	2000      	movs	r0, #0
}
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80118d0:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 80118d2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80118d4:	4a2c      	ldr	r2, [pc, #176]	; (8011988 <HAL_TIM_ConfigClockSource+0x1b0>)
 80118d6:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118d8:	688b      	ldr	r3, [r1, #8]
 80118da:	684d      	ldr	r5, [r1, #4]
 80118dc:	432b      	orrs	r3, r5
 80118de:	68c9      	ldr	r1, [r1, #12]
 80118e0:	0209      	lsls	r1, r1, #8
 80118e2:	430b      	orrs	r3, r1
 80118e4:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80118e6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80118e8:	6802      	ldr	r2, [r0, #0]
 80118ea:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80118ec:	2177      	movs	r1, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80118ee:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80118f0:	6093      	str	r3, [r2, #8]
    break;
 80118f2:	e7e5      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80118f4:	6803      	ldr	r3, [r0, #0]
 80118f6:	684c      	ldr	r4, [r1, #4]
 80118f8:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80118fa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118fc:	6a1d      	ldr	r5, [r3, #32]
 80118fe:	2601      	movs	r6, #1
 8011900:	43b5      	bics	r5, r6
 8011902:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011904:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011906:	36ef      	adds	r6, #239	; 0xef
 8011908:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801190a:	0112      	lsls	r2, r2, #4
 801190c:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801190e:	250a      	movs	r5, #10
 8011910:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8011912:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8011914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011916:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011918:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801191a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801191c:	2170      	movs	r1, #112	; 0x70
 801191e:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011920:	3919      	subs	r1, #25
 8011922:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011924:	6093      	str	r3, [r2, #8]
 8011926:	e7cb      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011928:	6803      	ldr	r3, [r0, #0]
 801192a:	684c      	ldr	r4, [r1, #4]
 801192c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 801192e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011930:	6a1d      	ldr	r5, [r3, #32]
 8011932:	2601      	movs	r6, #1
 8011934:	43b5      	bics	r5, r6
 8011936:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011938:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801193a:	36ef      	adds	r6, #239	; 0xef
 801193c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 801193e:	0112      	lsls	r2, r2, #4
 8011940:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011942:	250a      	movs	r5, #10
 8011944:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8011946:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8011948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801194a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801194c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801194e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011950:	2170      	movs	r1, #112	; 0x70
 8011952:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011954:	3929      	subs	r1, #41	; 0x29
 8011956:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011958:	6093      	str	r3, [r2, #8]
 801195a:	e7b1      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 801195c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801195e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011960:	2170      	movs	r1, #112	; 0x70
 8011962:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011964:	3959      	subs	r1, #89	; 0x59
 8011966:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011968:	6093      	str	r3, [r2, #8]
 801196a:	e7a9      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 801196c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801196e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011970:	2170      	movs	r1, #112	; 0x70
 8011972:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011974:	3949      	subs	r1, #73	; 0x49
 8011976:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011978:	6093      	str	r3, [r2, #8]
 801197a:	e7a1      	b.n	80118c0 <HAL_TIM_ConfigClockSource+0xe8>
  __HAL_LOCK(htim);
 801197c:	2002      	movs	r0, #2
 801197e:	e7a6      	b.n	80118ce <HAL_TIM_ConfigClockSource+0xf6>
 8011980:	ffff0088 	.word	0xffff0088
 8011984:	ffff0fff 	.word	0xffff0fff
 8011988:	ffff00ff 	.word	0xffff00ff

0801198c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 801198c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801198e:	4a36      	ldr	r2, [pc, #216]	; (8011a68 <TIM_Base_SetConfig+0xdc>)
 8011990:	4290      	cmp	r0, r2
 8011992:	d022      	beq.n	80119da <TIM_Base_SetConfig+0x4e>
 8011994:	2280      	movs	r2, #128	; 0x80
 8011996:	05d2      	lsls	r2, r2, #23
 8011998:	4290      	cmp	r0, r2
 801199a:	d014      	beq.n	80119c6 <TIM_Base_SetConfig+0x3a>
 801199c:	4a33      	ldr	r2, [pc, #204]	; (8011a6c <TIM_Base_SetConfig+0xe0>)
 801199e:	4290      	cmp	r0, r2
 80119a0:	d016      	beq.n	80119d0 <TIM_Base_SetConfig+0x44>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80119a2:	4a33      	ldr	r2, [pc, #204]	; (8011a70 <TIM_Base_SetConfig+0xe4>)
 80119a4:	4290      	cmp	r0, r2
 80119a6:	d040      	beq.n	8011a2a <TIM_Base_SetConfig+0x9e>
 80119a8:	4a32      	ldr	r2, [pc, #200]	; (8011a74 <TIM_Base_SetConfig+0xe8>)
 80119aa:	4290      	cmp	r0, r2
 80119ac:	d047      	beq.n	8011a3e <TIM_Base_SetConfig+0xb2>
 80119ae:	4a32      	ldr	r2, [pc, #200]	; (8011a78 <TIM_Base_SetConfig+0xec>)
 80119b0:	4290      	cmp	r0, r2
 80119b2:	d04e      	beq.n	8011a52 <TIM_Base_SetConfig+0xc6>
 80119b4:	4a31      	ldr	r2, [pc, #196]	; (8011a7c <TIM_Base_SetConfig+0xf0>)
 80119b6:	4290      	cmp	r0, r2
 80119b8:	d02d      	beq.n	8011a16 <TIM_Base_SetConfig+0x8a>
  TIMx->CR1 = tmpcr1;
 80119ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80119bc:	688b      	ldr	r3, [r1, #8]
 80119be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80119c0:	680b      	ldr	r3, [r1, #0]
 80119c2:	6283      	str	r3, [r0, #40]	; 0x28
 80119c4:	e024      	b.n	8011a10 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80119c6:	2270      	movs	r2, #112	; 0x70
 80119c8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80119ca:	684a      	ldr	r2, [r1, #4]
 80119cc:	4313      	orrs	r3, r2
 80119ce:	e008      	b.n	80119e2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80119d0:	2270      	movs	r2, #112	; 0x70
 80119d2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80119d4:	684a      	ldr	r2, [r1, #4]
 80119d6:	4313      	orrs	r3, r2
 80119d8:	e003      	b.n	80119e2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80119da:	2270      	movs	r2, #112	; 0x70
 80119dc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80119de:	684a      	ldr	r2, [r1, #4]
 80119e0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80119e2:	4a27      	ldr	r2, [pc, #156]	; (8011a80 <TIM_Base_SetConfig+0xf4>)
 80119e4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80119e6:	68ca      	ldr	r2, [r1, #12]
 80119e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80119ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80119ec:	688b      	ldr	r3, [r1, #8]
 80119ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80119f0:	680b      	ldr	r3, [r1, #0]
 80119f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80119f4:	4b1c      	ldr	r3, [pc, #112]	; (8011a68 <TIM_Base_SetConfig+0xdc>)
 80119f6:	4298      	cmp	r0, r3
 80119f8:	d008      	beq.n	8011a0c <TIM_Base_SetConfig+0x80>
 80119fa:	4b1e      	ldr	r3, [pc, #120]	; (8011a74 <TIM_Base_SetConfig+0xe8>)
 80119fc:	4298      	cmp	r0, r3
 80119fe:	d005      	beq.n	8011a0c <TIM_Base_SetConfig+0x80>
 8011a00:	4b1d      	ldr	r3, [pc, #116]	; (8011a78 <TIM_Base_SetConfig+0xec>)
 8011a02:	4298      	cmp	r0, r3
 8011a04:	d002      	beq.n	8011a0c <TIM_Base_SetConfig+0x80>
 8011a06:	4b1d      	ldr	r3, [pc, #116]	; (8011a7c <TIM_Base_SetConfig+0xf0>)
 8011a08:	4298      	cmp	r0, r3
 8011a0a:	d101      	bne.n	8011a10 <TIM_Base_SetConfig+0x84>
    TIMx->RCR = Structure->RepetitionCounter;
 8011a0c:	690b      	ldr	r3, [r1, #16]
 8011a0e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8011a10:	2301      	movs	r3, #1
 8011a12:	6143      	str	r3, [r0, #20]
}
 8011a14:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a16:	4a1a      	ldr	r2, [pc, #104]	; (8011a80 <TIM_Base_SetConfig+0xf4>)
 8011a18:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a1a:	68ca      	ldr	r2, [r1, #12]
 8011a1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a20:	688b      	ldr	r3, [r1, #8]
 8011a22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a24:	680b      	ldr	r3, [r1, #0]
 8011a26:	6283      	str	r3, [r0, #40]	; 0x28
 8011a28:	e7f0      	b.n	8011a0c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a2a:	4a15      	ldr	r2, [pc, #84]	; (8011a80 <TIM_Base_SetConfig+0xf4>)
 8011a2c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a2e:	68ca      	ldr	r2, [r1, #12]
 8011a30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a34:	688b      	ldr	r3, [r1, #8]
 8011a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a38:	680b      	ldr	r3, [r1, #0]
 8011a3a:	6283      	str	r3, [r0, #40]	; 0x28
 8011a3c:	e7e8      	b.n	8011a10 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a3e:	4a10      	ldr	r2, [pc, #64]	; (8011a80 <TIM_Base_SetConfig+0xf4>)
 8011a40:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a42:	68ca      	ldr	r2, [r1, #12]
 8011a44:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a46:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a48:	688b      	ldr	r3, [r1, #8]
 8011a4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a4c:	680b      	ldr	r3, [r1, #0]
 8011a4e:	6283      	str	r3, [r0, #40]	; 0x28
 8011a50:	e7dc      	b.n	8011a0c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a52:	4a0b      	ldr	r2, [pc, #44]	; (8011a80 <TIM_Base_SetConfig+0xf4>)
 8011a54:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a56:	68ca      	ldr	r2, [r1, #12]
 8011a58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a5c:	688b      	ldr	r3, [r1, #8]
 8011a5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a60:	680b      	ldr	r3, [r1, #0]
 8011a62:	6283      	str	r3, [r0, #40]	; 0x28
 8011a64:	e7d2      	b.n	8011a0c <TIM_Base_SetConfig+0x80>
 8011a66:	46c0      	nop			; (mov r8, r8)
 8011a68:	40012c00 	.word	0x40012c00
 8011a6c:	40000400 	.word	0x40000400
 8011a70:	40002000 	.word	0x40002000
 8011a74:	40014000 	.word	0x40014000
 8011a78:	40014400 	.word	0x40014400
 8011a7c:	40014800 	.word	0x40014800
 8011a80:	fffffcff 	.word	0xfffffcff

08011a84 <HAL_TIM_Base_Init>:
{
 8011a84:	b570      	push	{r4, r5, r6, lr}
 8011a86:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011a88:	d014      	beq.n	8011ab4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011a8a:	2339      	movs	r3, #57	; 0x39
 8011a8c:	5cc3      	ldrb	r3, [r0, r3]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00a      	beq.n	8011aa8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011a92:	2539      	movs	r5, #57	; 0x39
 8011a94:	2302      	movs	r3, #2
 8011a96:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a98:	1d21      	adds	r1, r4, #4
 8011a9a:	6820      	ldr	r0, [r4, #0]
 8011a9c:	f7ff ff76 	bl	801198c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011aa4:	2000      	movs	r0, #0
}
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011aa8:	3338      	adds	r3, #56	; 0x38
 8011aaa:	2200      	movs	r2, #0
 8011aac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8011aae:	f7ff fe43 	bl	8011738 <HAL_TIM_Base_MspInit>
 8011ab2:	e7ee      	b.n	8011a92 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	e7f6      	b.n	8011aa6 <HAL_TIM_Base_Init+0x22>

08011ab8 <HAL_TIM_PWM_Init>:
{
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011abc:	d014      	beq.n	8011ae8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011abe:	2339      	movs	r3, #57	; 0x39
 8011ac0:	5cc3      	ldrb	r3, [r0, r3]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00a      	beq.n	8011adc <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011ac6:	2539      	movs	r5, #57	; 0x39
 8011ac8:	2302      	movs	r3, #2
 8011aca:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011acc:	1d21      	adds	r1, r4, #4
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	f7ff ff5c 	bl	801198c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011ad8:	2000      	movs	r0, #0
}
 8011ada:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011adc:	3338      	adds	r3, #56	; 0x38
 8011ade:	2200      	movs	r2, #0
 8011ae0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8011ae2:	f7ff fe57 	bl	8011794 <HAL_TIM_PWM_MspInit>
 8011ae6:	e7ee      	b.n	8011ac6 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8011ae8:	2001      	movs	r0, #1
 8011aea:	e7f6      	b.n	8011ada <HAL_TIM_PWM_Init+0x22>

08011aec <TIM_OC2_SetConfig>:
{
 8011aec:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011aee:	6a03      	ldr	r3, [r0, #32]
 8011af0:	2210      	movs	r2, #16
 8011af2:	4393      	bics	r3, r2
 8011af4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011af6:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8011af8:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8011afa:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011afc:	4c15      	ldr	r4, [pc, #84]	; (8011b54 <TIM_OC2_SetConfig+0x68>)
 8011afe:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011b00:	680c      	ldr	r4, [r1, #0]
 8011b02:	0224      	lsls	r4, r4, #8
 8011b04:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8011b06:	2420      	movs	r4, #32
 8011b08:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8011b0a:	688c      	ldr	r4, [r1, #8]
 8011b0c:	0124      	lsls	r4, r4, #4
 8011b0e:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011b10:	4c11      	ldr	r4, [pc, #68]	; (8011b58 <TIM_OC2_SetConfig+0x6c>)
 8011b12:	42a0      	cmp	r0, r4
 8011b14:	d009      	beq.n	8011b2a <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011b16:	4c11      	ldr	r4, [pc, #68]	; (8011b5c <TIM_OC2_SetConfig+0x70>)
 8011b18:	42a0      	cmp	r0, r4
 8011b1a:	d00e      	beq.n	8011b3a <TIM_OC2_SetConfig+0x4e>
 8011b1c:	4c10      	ldr	r4, [pc, #64]	; (8011b60 <TIM_OC2_SetConfig+0x74>)
 8011b1e:	42a0      	cmp	r0, r4
 8011b20:	d00b      	beq.n	8011b3a <TIM_OC2_SetConfig+0x4e>
 8011b22:	4c10      	ldr	r4, [pc, #64]	; (8011b64 <TIM_OC2_SetConfig+0x78>)
 8011b24:	42a0      	cmp	r0, r4
 8011b26:	d10f      	bne.n	8011b48 <TIM_OC2_SetConfig+0x5c>
 8011b28:	e007      	b.n	8011b3a <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011b2a:	2480      	movs	r4, #128	; 0x80
 8011b2c:	43a2      	bics	r2, r4
 8011b2e:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8011b30:	68ca      	ldr	r2, [r1, #12]
 8011b32:	0112      	lsls	r2, r2, #4
 8011b34:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8011b36:	2440      	movs	r4, #64	; 0x40
 8011b38:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011b3a:	4c0b      	ldr	r4, [pc, #44]	; (8011b68 <TIM_OC2_SetConfig+0x7c>)
 8011b3c:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8011b3e:	698b      	ldr	r3, [r1, #24]
 8011b40:	694e      	ldr	r6, [r1, #20]
 8011b42:	4333      	orrs	r3, r6
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8011b48:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011b4a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011b4c:	684b      	ldr	r3, [r1, #4]
 8011b4e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011b50:	6202      	str	r2, [r0, #32]
}
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	ffff8cff 	.word	0xffff8cff
 8011b58:	40012c00 	.word	0x40012c00
 8011b5c:	40014000 	.word	0x40014000
 8011b60:	40014400 	.word	0x40014400
 8011b64:	40014800 	.word	0x40014800
 8011b68:	fffff3ff 	.word	0xfffff3ff

08011b6c <HAL_TIM_PWM_ConfigChannel>:
{
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	0004      	movs	r4, r0
 8011b70:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8011b72:	2338      	movs	r3, #56	; 0x38
 8011b74:	5cc3      	ldrb	r3, [r0, r3]
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d069      	beq.n	8011c4e <HAL_TIM_PWM_ConfigChannel+0xe2>
 8011b7a:	2338      	movs	r3, #56	; 0x38
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8011b80:	3301      	adds	r3, #1
 8011b82:	3101      	adds	r1, #1
 8011b84:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8011b86:	2a04      	cmp	r2, #4
 8011b88:	d037      	beq.n	8011bfa <HAL_TIM_PWM_ConfigChannel+0x8e>
 8011b8a:	d919      	bls.n	8011bc0 <HAL_TIM_PWM_ConfigChannel+0x54>
 8011b8c:	2a08      	cmp	r2, #8
 8011b8e:	d04a      	beq.n	8011c26 <HAL_TIM_PWM_ConfigChannel+0xba>
 8011b90:	2a0c      	cmp	r2, #12
 8011b92:	d12a      	bne.n	8011bea <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011b94:	0029      	movs	r1, r5
 8011b96:	6800      	ldr	r0, [r0, #0]
 8011b98:	f7ff fd94 	bl	80116c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011b9c:	6822      	ldr	r2, [r4, #0]
 8011b9e:	69d1      	ldr	r1, [r2, #28]
 8011ba0:	2380      	movs	r3, #128	; 0x80
 8011ba2:	011b      	lsls	r3, r3, #4
 8011ba4:	430b      	orrs	r3, r1
 8011ba6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011ba8:	6822      	ldr	r2, [r4, #0]
 8011baa:	69d3      	ldr	r3, [r2, #28]
 8011bac:	4929      	ldr	r1, [pc, #164]	; (8011c54 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8011bae:	400b      	ands	r3, r1
 8011bb0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8011bb2:	6822      	ldr	r2, [r4, #0]
 8011bb4:	69d1      	ldr	r1, [r2, #28]
 8011bb6:	692b      	ldr	r3, [r5, #16]
 8011bb8:	021b      	lsls	r3, r3, #8
 8011bba:	430b      	orrs	r3, r1
 8011bbc:	61d3      	str	r3, [r2, #28]
    break;
 8011bbe:	e014      	b.n	8011bea <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8011bc0:	2a00      	cmp	r2, #0
 8011bc2:	d112      	bne.n	8011bea <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011bc4:	0029      	movs	r1, r5
 8011bc6:	6800      	ldr	r0, [r0, #0]
 8011bc8:	f7ff fcea 	bl	80115a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011bcc:	6822      	ldr	r2, [r4, #0]
 8011bce:	6993      	ldr	r3, [r2, #24]
 8011bd0:	2108      	movs	r1, #8
 8011bd2:	430b      	orrs	r3, r1
 8011bd4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011bd6:	6822      	ldr	r2, [r4, #0]
 8011bd8:	6993      	ldr	r3, [r2, #24]
 8011bda:	3904      	subs	r1, #4
 8011bdc:	438b      	bics	r3, r1
 8011bde:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011be0:	6822      	ldr	r2, [r4, #0]
 8011be2:	6993      	ldr	r3, [r2, #24]
 8011be4:	6929      	ldr	r1, [r5, #16]
 8011be6:	430b      	orrs	r3, r1
 8011be8:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8011bea:	2339      	movs	r3, #57	; 0x39
 8011bec:	2201      	movs	r2, #1
 8011bee:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011bf6:	2000      	movs	r0, #0
}
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011bfa:	0029      	movs	r1, r5
 8011bfc:	6800      	ldr	r0, [r0, #0]
 8011bfe:	f7ff ff75 	bl	8011aec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011c02:	6822      	ldr	r2, [r4, #0]
 8011c04:	6991      	ldr	r1, [r2, #24]
 8011c06:	2380      	movs	r3, #128	; 0x80
 8011c08:	011b      	lsls	r3, r3, #4
 8011c0a:	430b      	orrs	r3, r1
 8011c0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011c0e:	6822      	ldr	r2, [r4, #0]
 8011c10:	6993      	ldr	r3, [r2, #24]
 8011c12:	4910      	ldr	r1, [pc, #64]	; (8011c54 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8011c14:	400b      	ands	r3, r1
 8011c16:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8011c18:	6822      	ldr	r2, [r4, #0]
 8011c1a:	6991      	ldr	r1, [r2, #24]
 8011c1c:	692b      	ldr	r3, [r5, #16]
 8011c1e:	021b      	lsls	r3, r3, #8
 8011c20:	430b      	orrs	r3, r1
 8011c22:	6193      	str	r3, [r2, #24]
    break;
 8011c24:	e7e1      	b.n	8011bea <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011c26:	0029      	movs	r1, r5
 8011c28:	6800      	ldr	r0, [r0, #0]
 8011c2a:	f7ff fd07 	bl	801163c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011c2e:	6822      	ldr	r2, [r4, #0]
 8011c30:	69d3      	ldr	r3, [r2, #28]
 8011c32:	2108      	movs	r1, #8
 8011c34:	430b      	orrs	r3, r1
 8011c36:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011c38:	6822      	ldr	r2, [r4, #0]
 8011c3a:	69d3      	ldr	r3, [r2, #28]
 8011c3c:	3904      	subs	r1, #4
 8011c3e:	438b      	bics	r3, r1
 8011c40:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011c42:	6822      	ldr	r2, [r4, #0]
 8011c44:	69d3      	ldr	r3, [r2, #28]
 8011c46:	6929      	ldr	r1, [r5, #16]
 8011c48:	430b      	orrs	r3, r1
 8011c4a:	61d3      	str	r3, [r2, #28]
    break;
 8011c4c:	e7cd      	b.n	8011bea <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8011c4e:	2002      	movs	r0, #2
 8011c50:	e7d2      	b.n	8011bf8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8011c52:	46c0      	nop			; (mov r8, r8)
 8011c54:	fffffbff 	.word	0xfffffbff

08011c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011c58:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c5a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8011c5c:	2401      	movs	r4, #1
 8011c5e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8011c60:	43a3      	bics	r3, r4
 8011c62:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8011c64:	6a03      	ldr	r3, [r0, #32]
 8011c66:	408a      	lsls	r2, r1
 8011c68:	431a      	orrs	r2, r3
 8011c6a:	6202      	str	r2, [r0, #32]
}
 8011c6c:	bd10      	pop	{r4, pc}
	...

08011c70 <HAL_TIM_PWM_Start>:
{
 8011c70:	b510      	push	{r4, lr}
 8011c72:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011c74:	2201      	movs	r2, #1
 8011c76:	6800      	ldr	r0, [r0, #0]
 8011c78:	f7ff ffee 	bl	8011c58 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	4a0c      	ldr	r2, [pc, #48]	; (8011cb0 <HAL_TIM_PWM_Start+0x40>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d008      	beq.n	8011c96 <HAL_TIM_PWM_Start+0x26>
 8011c84:	4a0b      	ldr	r2, [pc, #44]	; (8011cb4 <HAL_TIM_PWM_Start+0x44>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d005      	beq.n	8011c96 <HAL_TIM_PWM_Start+0x26>
 8011c8a:	4a0b      	ldr	r2, [pc, #44]	; (8011cb8 <HAL_TIM_PWM_Start+0x48>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d002      	beq.n	8011c96 <HAL_TIM_PWM_Start+0x26>
 8011c90:	4a0a      	ldr	r2, [pc, #40]	; (8011cbc <HAL_TIM_PWM_Start+0x4c>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d104      	bne.n	8011ca0 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8011c96:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011c98:	2280      	movs	r2, #128	; 0x80
 8011c9a:	0212      	lsls	r2, r2, #8
 8011c9c:	430a      	orrs	r2, r1
 8011c9e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8011ca0:	6822      	ldr	r2, [r4, #0]
 8011ca2:	6813      	ldr	r3, [r2, #0]
 8011ca4:	2101      	movs	r1, #1
 8011ca6:	430b      	orrs	r3, r1
 8011ca8:	6013      	str	r3, [r2, #0]
}
 8011caa:	2000      	movs	r0, #0
 8011cac:	bd10      	pop	{r4, pc}
 8011cae:	46c0      	nop			; (mov r8, r8)
 8011cb0:	40012c00 	.word	0x40012c00
 8011cb4:	40014000 	.word	0x40014000
 8011cb8:	40014400 	.word	0x40014400
 8011cbc:	40014800 	.word	0x40014800

08011cc0 <HAL_TIM_PWM_Stop>:
{
 8011cc0:	b510      	push	{r4, lr}
 8011cc2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	6800      	ldr	r0, [r0, #0]
 8011cc8:	f7ff ffc6 	bl	8011c58 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	4a15      	ldr	r2, [pc, #84]	; (8011d24 <HAL_TIM_PWM_Stop+0x64>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d01a      	beq.n	8011d0a <HAL_TIM_PWM_Stop+0x4a>
 8011cd4:	4a14      	ldr	r2, [pc, #80]	; (8011d28 <HAL_TIM_PWM_Stop+0x68>)
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d017      	beq.n	8011d0a <HAL_TIM_PWM_Stop+0x4a>
 8011cda:	4a14      	ldr	r2, [pc, #80]	; (8011d2c <HAL_TIM_PWM_Stop+0x6c>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d014      	beq.n	8011d0a <HAL_TIM_PWM_Stop+0x4a>
 8011ce0:	4a13      	ldr	r2, [pc, #76]	; (8011d30 <HAL_TIM_PWM_Stop+0x70>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d011      	beq.n	8011d0a <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	6a19      	ldr	r1, [r3, #32]
 8011cea:	4a12      	ldr	r2, [pc, #72]	; (8011d34 <HAL_TIM_PWM_Stop+0x74>)
 8011cec:	4211      	tst	r1, r2
 8011cee:	d107      	bne.n	8011d00 <HAL_TIM_PWM_Stop+0x40>
 8011cf0:	6a19      	ldr	r1, [r3, #32]
 8011cf2:	4a11      	ldr	r2, [pc, #68]	; (8011d38 <HAL_TIM_PWM_Stop+0x78>)
 8011cf4:	4211      	tst	r1, r2
 8011cf6:	d103      	bne.n	8011d00 <HAL_TIM_PWM_Stop+0x40>
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	2101      	movs	r1, #1
 8011cfc:	438a      	bics	r2, r1
 8011cfe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011d00:	2339      	movs	r3, #57	; 0x39
 8011d02:	2201      	movs	r2, #1
 8011d04:	54e2      	strb	r2, [r4, r3]
}
 8011d06:	2000      	movs	r0, #0
 8011d08:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8011d0a:	6a19      	ldr	r1, [r3, #32]
 8011d0c:	4a09      	ldr	r2, [pc, #36]	; (8011d34 <HAL_TIM_PWM_Stop+0x74>)
 8011d0e:	4211      	tst	r1, r2
 8011d10:	d1e9      	bne.n	8011ce6 <HAL_TIM_PWM_Stop+0x26>
 8011d12:	6a19      	ldr	r1, [r3, #32]
 8011d14:	4a08      	ldr	r2, [pc, #32]	; (8011d38 <HAL_TIM_PWM_Stop+0x78>)
 8011d16:	4211      	tst	r1, r2
 8011d18:	d1e5      	bne.n	8011ce6 <HAL_TIM_PWM_Stop+0x26>
 8011d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d1c:	4907      	ldr	r1, [pc, #28]	; (8011d3c <HAL_TIM_PWM_Stop+0x7c>)
 8011d1e:	400a      	ands	r2, r1
 8011d20:	645a      	str	r2, [r3, #68]	; 0x44
 8011d22:	e7e0      	b.n	8011ce6 <HAL_TIM_PWM_Stop+0x26>
 8011d24:	40012c00 	.word	0x40012c00
 8011d28:	40014000 	.word	0x40014000
 8011d2c:	40014400 	.word	0x40014400
 8011d30:	40014800 	.word	0x40014800
 8011d34:	00001111 	.word	0x00001111
 8011d38:	00000444 	.word	0x00000444
 8011d3c:	ffff7fff 	.word	0xffff7fff

08011d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011d42:	2338      	movs	r3, #56	; 0x38
 8011d44:	5cc3      	ldrb	r3, [r0, r3]
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d01e      	beq.n	8011d88 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8011d4a:	2238      	movs	r2, #56	; 0x38
 8011d4c:	2501      	movs	r5, #1
 8011d4e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011d50:	2439      	movs	r4, #57	; 0x39
 8011d52:	2302      	movs	r3, #2
 8011d54:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011d56:	6806      	ldr	r6, [r0, #0]
 8011d58:	6873      	ldr	r3, [r6, #4]
 8011d5a:	2770      	movs	r7, #112	; 0x70
 8011d5c:	43bb      	bics	r3, r7
 8011d5e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d60:	6806      	ldr	r6, [r0, #0]
 8011d62:	6873      	ldr	r3, [r6, #4]
 8011d64:	680f      	ldr	r7, [r1, #0]
 8011d66:	433b      	orrs	r3, r7
 8011d68:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d6a:	6806      	ldr	r6, [r0, #0]
 8011d6c:	68b3      	ldr	r3, [r6, #8]
 8011d6e:	2780      	movs	r7, #128	; 0x80
 8011d70:	43bb      	bics	r3, r7
 8011d72:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d74:	6806      	ldr	r6, [r0, #0]
 8011d76:	68b3      	ldr	r3, [r6, #8]
 8011d78:	6849      	ldr	r1, [r1, #4]
 8011d7a:	430b      	orrs	r3, r1
 8011d7c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011d7e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011d80:	2300      	movs	r3, #0
 8011d82:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011d84:	2000      	movs	r0, #0
}
 8011d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8011d88:	2002      	movs	r0, #2
 8011d8a:	e7fc      	b.n	8011d86 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011d8c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011d8c:	4770      	bx	lr

08011d8e <HAL_UART_DeInit>:
{
 8011d8e:	b570      	push	{r4, r5, r6, lr}
 8011d90:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011d92:	2001      	movs	r0, #1
  if(huart == NULL)
 8011d94:	2c00      	cmp	r4, #0
 8011d96:	d016      	beq.n	8011dc6 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8011d98:	2669      	movs	r6, #105	; 0x69
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011d9e:	6822      	ldr	r2, [r4, #0]
 8011da0:	6813      	ldr	r3, [r2, #0]
 8011da2:	2101      	movs	r1, #1
 8011da4:	438b      	bics	r3, r1
 8011da6:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011da8:	6823      	ldr	r3, [r4, #0]
 8011daa:	2500      	movs	r5, #0
 8011dac:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011dae:	6823      	ldr	r3, [r4, #0]
 8011db0:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011db2:	6823      	ldr	r3, [r4, #0]
 8011db4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011db6:	0020      	movs	r0, r4
 8011db8:	f7ff ffe8 	bl	8011d8c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dbc:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011dbe:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011dc0:	2368      	movs	r3, #104	; 0x68
 8011dc2:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011dc4:	2000      	movs	r0, #0
}
 8011dc6:	bd70      	pop	{r4, r5, r6, pc}

08011dc8 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011dc8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011dca:	2369      	movs	r3, #105	; 0x69
 8011dcc:	5cc3      	ldrb	r3, [r0, r3]
 8011dce:	2b01      	cmp	r3, #1
 8011dd0:	d004      	beq.n	8011ddc <HAL_UART_Transmit_IT+0x14>
 8011dd2:	2369      	movs	r3, #105	; 0x69
 8011dd4:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011dd6:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011dd8:	2c22      	cmp	r4, #34	; 0x22
 8011dda:	d127      	bne.n	8011e2c <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8011ddc:	2900      	cmp	r1, #0
 8011dde:	d02b      	beq.n	8011e38 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8011de0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	d022      	beq.n	8011e2c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011de6:	3367      	adds	r3, #103	; 0x67
 8011de8:	5cc3      	ldrb	r3, [r0, r3]
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d026      	beq.n	8011e3c <HAL_UART_Transmit_IT+0x74>
 8011dee:	2368      	movs	r3, #104	; 0x68
 8011df0:	2401      	movs	r4, #1
 8011df2:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8011df4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011df6:	3b18      	subs	r3, #24
 8011df8:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011dfa:	3302      	adds	r3, #2
 8011dfc:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011e02:	3369      	adds	r3, #105	; 0x69
 8011e04:	5cc3      	ldrb	r3, [r0, r3]
 8011e06:	2b22      	cmp	r3, #34	; 0x22
 8011e08:	d012      	beq.n	8011e30 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011e0a:	2369      	movs	r3, #105	; 0x69
 8011e0c:	2212      	movs	r2, #18
 8011e0e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e10:	6802      	ldr	r2, [r0, #0]
 8011e12:	6893      	ldr	r3, [r2, #8]
 8011e14:	2101      	movs	r1, #1
 8011e16:	430b      	orrs	r3, r1
 8011e18:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011e1a:	2368      	movs	r3, #104	; 0x68
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011e20:	6802      	ldr	r2, [r0, #0]
 8011e22:	6813      	ldr	r3, [r2, #0]
 8011e24:	317f      	adds	r1, #127	; 0x7f
 8011e26:	430b      	orrs	r3, r1
 8011e28:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011e2a:	2300      	movs	r3, #0
  }
}
 8011e2c:	0018      	movs	r0, r3
 8011e2e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011e30:	3347      	adds	r3, #71	; 0x47
 8011e32:	2232      	movs	r2, #50	; 0x32
 8011e34:	54c2      	strb	r2, [r0, r3]
 8011e36:	e7eb      	b.n	8011e10 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e7f7      	b.n	8011e2c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	e7f5      	b.n	8011e2c <HAL_UART_Transmit_IT+0x64>

08011e40 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e40:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e42:	2369      	movs	r3, #105	; 0x69
 8011e44:	5cc3      	ldrb	r3, [r0, r3]
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d004      	beq.n	8011e54 <HAL_UART_Receive_IT+0x14>
 8011e4a:	2369      	movs	r3, #105	; 0x69
 8011e4c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e4e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e50:	2c12      	cmp	r4, #18
 8011e52:	d14e      	bne.n	8011ef2 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8011e54:	2900      	cmp	r1, #0
 8011e56:	d05d      	beq.n	8011f14 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8011e58:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011e5a:	2a00      	cmp	r2, #0
 8011e5c:	d049      	beq.n	8011ef2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011e5e:	3367      	adds	r3, #103	; 0x67
 8011e60:	5cc3      	ldrb	r3, [r0, r3]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d058      	beq.n	8011f18 <HAL_UART_Receive_IT+0xd8>
 8011e66:	2368      	movs	r3, #104	; 0x68
 8011e68:	2401      	movs	r4, #1
 8011e6a:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8011e6c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011e6e:	3b10      	subs	r3, #16
 8011e70:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011e72:	3302      	adds	r3, #2
 8011e74:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8011e76:	6883      	ldr	r3, [r0, #8]
 8011e78:	2280      	movs	r2, #128	; 0x80
 8011e7a:	0152      	lsls	r2, r2, #5
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d008      	beq.n	8011e92 <HAL_UART_Receive_IT+0x52>
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d115      	bne.n	8011eb0 <HAL_UART_Receive_IT+0x70>
 8011e84:	6903      	ldr	r3, [r0, #16]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d10e      	bne.n	8011ea8 <HAL_UART_Receive_IT+0x68>
 8011e8a:	335c      	adds	r3, #92	; 0x5c
 8011e8c:	22ff      	movs	r2, #255	; 0xff
 8011e8e:	52c2      	strh	r2, [r0, r3]
 8011e90:	e012      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
 8011e92:	6903      	ldr	r3, [r0, #16]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d103      	bne.n	8011ea0 <HAL_UART_Receive_IT+0x60>
 8011e98:	335c      	adds	r3, #92	; 0x5c
 8011e9a:	4a20      	ldr	r2, [pc, #128]	; (8011f1c <HAL_UART_Receive_IT+0xdc>)
 8011e9c:	52c2      	strh	r2, [r0, r3]
 8011e9e:	e00b      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
 8011ea0:	235c      	movs	r3, #92	; 0x5c
 8011ea2:	22ff      	movs	r2, #255	; 0xff
 8011ea4:	52c2      	strh	r2, [r0, r3]
 8011ea6:	e007      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
 8011ea8:	235c      	movs	r3, #92	; 0x5c
 8011eaa:	227f      	movs	r2, #127	; 0x7f
 8011eac:	52c2      	strh	r2, [r0, r3]
 8011eae:	e003      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
 8011eb0:	2280      	movs	r2, #128	; 0x80
 8011eb2:	0552      	lsls	r2, r2, #21
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d01e      	beq.n	8011ef6 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011ebc:	3369      	adds	r3, #105	; 0x69
 8011ebe:	5cc3      	ldrb	r3, [r0, r3]
 8011ec0:	2b12      	cmp	r3, #18
 8011ec2:	d023      	beq.n	8011f0c <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011ec4:	2369      	movs	r3, #105	; 0x69
 8011ec6:	2222      	movs	r2, #34	; 0x22
 8011ec8:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011eca:	6802      	ldr	r2, [r0, #0]
 8011ecc:	6811      	ldr	r1, [r2, #0]
 8011ece:	2380      	movs	r3, #128	; 0x80
 8011ed0:	005b      	lsls	r3, r3, #1
 8011ed2:	430b      	orrs	r3, r1
 8011ed4:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011ed6:	6802      	ldr	r2, [r0, #0]
 8011ed8:	6893      	ldr	r3, [r2, #8]
 8011eda:	2101      	movs	r1, #1
 8011edc:	430b      	orrs	r3, r1
 8011ede:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011ee0:	2368      	movs	r3, #104	; 0x68
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011ee6:	6802      	ldr	r2, [r0, #0]
 8011ee8:	6813      	ldr	r3, [r2, #0]
 8011eea:	311f      	adds	r1, #31
 8011eec:	430b      	orrs	r3, r1
 8011eee:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011ef0:	2300      	movs	r3, #0
  }
}
 8011ef2:	0018      	movs	r0, r3
 8011ef4:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8011ef6:	6903      	ldr	r3, [r0, #16]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d103      	bne.n	8011f04 <HAL_UART_Receive_IT+0xc4>
 8011efc:	335c      	adds	r3, #92	; 0x5c
 8011efe:	227f      	movs	r2, #127	; 0x7f
 8011f00:	52c2      	strh	r2, [r0, r3]
 8011f02:	e7d9      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
 8011f04:	235c      	movs	r3, #92	; 0x5c
 8011f06:	223f      	movs	r2, #63	; 0x3f
 8011f08:	52c2      	strh	r2, [r0, r3]
 8011f0a:	e7d5      	b.n	8011eb8 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f0c:	3357      	adds	r3, #87	; 0x57
 8011f0e:	2232      	movs	r2, #50	; 0x32
 8011f10:	54c2      	strb	r2, [r0, r3]
 8011f12:	e7da      	b.n	8011eca <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8011f14:	2301      	movs	r3, #1
 8011f16:	e7ec      	b.n	8011ef2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011f18:	2302      	movs	r3, #2
 8011f1a:	e7ea      	b.n	8011ef2 <HAL_UART_Receive_IT+0xb2>
 8011f1c:	000001ff 	.word	0x000001ff

08011f20 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f20:	b510      	push	{r4, lr}
 8011f22:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f24:	2369      	movs	r3, #105	; 0x69
 8011f26:	5cc3      	ldrb	r3, [r0, r3]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d004      	beq.n	8011f36 <HAL_UART_Transmit_DMA+0x16>
 8011f2c:	2369      	movs	r3, #105	; 0x69
 8011f2e:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f30:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f32:	2b22      	cmp	r3, #34	; 0x22
 8011f34:	d134      	bne.n	8011fa0 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8011f36:	2900      	cmp	r1, #0
 8011f38:	d037      	beq.n	8011faa <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8011f3a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011f3c:	2a00      	cmp	r2, #0
 8011f3e:	d02f      	beq.n	8011fa0 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8011f40:	2368      	movs	r3, #104	; 0x68
 8011f42:	5ce3      	ldrb	r3, [r4, r3]
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d032      	beq.n	8011fae <HAL_UART_Transmit_DMA+0x8e>
 8011f48:	2368      	movs	r3, #104	; 0x68
 8011f4a:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8011f4c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011f4e:	3b18      	subs	r3, #24
 8011f50:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8011f52:	3302      	adds	r3, #2
 8011f54:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f56:	2300      	movs	r3, #0
 8011f58:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011f5a:	3369      	adds	r3, #105	; 0x69
 8011f5c:	5ce3      	ldrb	r3, [r4, r3]
 8011f5e:	2b22      	cmp	r3, #34	; 0x22
 8011f60:	d01f      	beq.n	8011fa2 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011f62:	2369      	movs	r3, #105	; 0x69
 8011f64:	2012      	movs	r0, #18
 8011f66:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f6a:	4812      	ldr	r0, [pc, #72]	; (8011fb4 <HAL_UART_Transmit_DMA+0x94>)
 8011f6c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f70:	4811      	ldr	r0, [pc, #68]	; (8011fb8 <HAL_UART_Transmit_DMA+0x98>)
 8011f72:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f76:	4811      	ldr	r0, [pc, #68]	; (8011fbc <HAL_UART_Transmit_DMA+0x9c>)
 8011f78:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	3028      	adds	r0, #40	; 0x28
 8011f7e:	0013      	movs	r3, r2
 8011f80:	0002      	movs	r2, r0
 8011f82:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011f84:	f7fd fd12 	bl	800f9ac <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	2240      	movs	r2, #64	; 0x40
 8011f8c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011f8e:	6822      	ldr	r2, [r4, #0]
 8011f90:	6893      	ldr	r3, [r2, #8]
 8011f92:	2180      	movs	r1, #128	; 0x80
 8011f94:	430b      	orrs	r3, r1
 8011f96:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011f98:	2368      	movs	r3, #104	; 0x68
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011f9e:	2000      	movs	r0, #0
  }
}
 8011fa0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011fa2:	3347      	adds	r3, #71	; 0x47
 8011fa4:	3031      	adds	r0, #49	; 0x31
 8011fa6:	54e0      	strb	r0, [r4, r3]
 8011fa8:	e7de      	b.n	8011f68 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8011faa:	2001      	movs	r0, #1
 8011fac:	e7f8      	b.n	8011fa0 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8011fae:	2002      	movs	r0, #2
 8011fb0:	e7f6      	b.n	8011fa0 <HAL_UART_Transmit_DMA+0x80>
 8011fb2:	46c0      	nop			; (mov r8, r8)
 8011fb4:	08012059 	.word	0x08012059
 8011fb8:	0801208b 	.word	0x0801208b
 8011fbc:	080120db 	.word	0x080120db

08011fc0 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fc4:	2069      	movs	r0, #105	; 0x69
 8011fc6:	5c20      	ldrb	r0, [r4, r0]
 8011fc8:	2801      	cmp	r0, #1
 8011fca:	d004      	beq.n	8011fd6 <HAL_UART_Receive_DMA+0x16>
 8011fcc:	2369      	movs	r3, #105	; 0x69
 8011fce:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011fd0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fd2:	2b12      	cmp	r3, #18
 8011fd4:	d130      	bne.n	8012038 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8011fd6:	2900      	cmp	r1, #0
 8011fd8:	d033      	beq.n	8012042 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8011fda:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011fdc:	2a00      	cmp	r2, #0
 8011fde:	d02b      	beq.n	8012038 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8011fe0:	2368      	movs	r3, #104	; 0x68
 8011fe2:	5ce3      	ldrb	r3, [r4, r3]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d02e      	beq.n	8012046 <HAL_UART_Receive_DMA+0x86>
 8011fe8:	2368      	movs	r3, #104	; 0x68
 8011fea:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8011fec:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011fee:	3b10      	subs	r3, #16
 8011ff0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011ff6:	3369      	adds	r3, #105	; 0x69
 8011ff8:	5ce3      	ldrb	r3, [r4, r3]
 8011ffa:	2b12      	cmp	r3, #18
 8011ffc:	d01d      	beq.n	801203a <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011ffe:	2369      	movs	r3, #105	; 0x69
 8012000:	2022      	movs	r0, #34	; 0x22
 8012002:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012006:	4811      	ldr	r0, [pc, #68]	; (801204c <HAL_UART_Receive_DMA+0x8c>)
 8012008:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801200a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801200c:	4810      	ldr	r0, [pc, #64]	; (8012050 <HAL_UART_Receive_DMA+0x90>)
 801200e:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012012:	4810      	ldr	r0, [pc, #64]	; (8012054 <HAL_UART_Receive_DMA+0x94>)
 8012014:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	3024      	adds	r0, #36	; 0x24
 801201a:	0013      	movs	r3, r2
 801201c:	000a      	movs	r2, r1
 801201e:	0001      	movs	r1, r0
 8012020:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012022:	f7fd fcc3 	bl	800f9ac <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012026:	6822      	ldr	r2, [r4, #0]
 8012028:	6893      	ldr	r3, [r2, #8]
 801202a:	2140      	movs	r1, #64	; 0x40
 801202c:	430b      	orrs	r3, r1
 801202e:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012030:	2368      	movs	r3, #104	; 0x68
 8012032:	2200      	movs	r2, #0
 8012034:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012036:	2000      	movs	r0, #0
  }
}
 8012038:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801203a:	3357      	adds	r3, #87	; 0x57
 801203c:	3031      	adds	r0, #49	; 0x31
 801203e:	54e0      	strb	r0, [r4, r3]
 8012040:	e7e0      	b.n	8012004 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8012042:	2001      	movs	r0, #1
 8012044:	e7f8      	b.n	8012038 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012046:	2002      	movs	r0, #2
 8012048:	e7f6      	b.n	8012038 <HAL_UART_Receive_DMA+0x78>
 801204a:	46c0      	nop			; (mov r8, r8)
 801204c:	08012095 	.word	0x08012095
 8012050:	080120d1 	.word	0x080120d1
 8012054:	080120db 	.word	0x080120db

08012058 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012058:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801205a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801205c:	6802      	ldr	r2, [r0, #0]
 801205e:	6812      	ldr	r2, [r2, #0]
 8012060:	0692      	lsls	r2, r2, #26
 8012062:	d40d      	bmi.n	8012080 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8012064:	2252      	movs	r2, #82	; 0x52
 8012066:	2100      	movs	r1, #0
 8012068:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 801206a:	6819      	ldr	r1, [r3, #0]
 801206c:	688a      	ldr	r2, [r1, #8]
 801206e:	2080      	movs	r0, #128	; 0x80
 8012070:	4382      	bics	r2, r0
 8012072:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	6813      	ldr	r3, [r2, #0]
 8012078:	2140      	movs	r1, #64	; 0x40
 801207a:	430b      	orrs	r3, r1
 801207c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 801207e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012080:	0018      	movs	r0, r3
 8012082:	f7fa fd5f 	bl	800cb44 <HAL_UART_TxCpltCallback>
}
 8012086:	e7fa      	b.n	801207e <UART_DMATransmitCplt+0x26>

08012088 <HAL_UART_TxHalfCpltCallback>:
}
 8012088:	4770      	bx	lr

0801208a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801208a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801208c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801208e:	f7ff fffb 	bl	8012088 <HAL_UART_TxHalfCpltCallback>
}
 8012092:	bd10      	pop	{r4, pc}

08012094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012094:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012096:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012098:	6802      	ldr	r2, [r0, #0]
 801209a:	6812      	ldr	r2, [r2, #0]
 801209c:	0692      	lsls	r2, r2, #26
 801209e:	d40e      	bmi.n	80120be <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 80120a0:	225a      	movs	r2, #90	; 0x5a
 80120a2:	2100      	movs	r1, #0
 80120a4:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80120a6:	6819      	ldr	r1, [r3, #0]
 80120a8:	688a      	ldr	r2, [r1, #8]
 80120aa:	2040      	movs	r0, #64	; 0x40
 80120ac:	4382      	bics	r2, r0
 80120ae:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80120b0:	2269      	movs	r2, #105	; 0x69
 80120b2:	5c9a      	ldrb	r2, [r3, r2]
 80120b4:	2a32      	cmp	r2, #50	; 0x32
 80120b6:	d006      	beq.n	80120c6 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80120b8:	2269      	movs	r2, #105	; 0x69
 80120ba:	2101      	movs	r1, #1
 80120bc:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80120be:	0018      	movs	r0, r3
 80120c0:	f7fa fd7e 	bl	800cbc0 <HAL_UART_RxCpltCallback>
}
 80120c4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80120c6:	3237      	adds	r2, #55	; 0x37
 80120c8:	2112      	movs	r1, #18
 80120ca:	5499      	strb	r1, [r3, r2]
 80120cc:	e7f7      	b.n	80120be <UART_DMAReceiveCplt+0x2a>

080120ce <HAL_UART_RxHalfCpltCallback>:
}
 80120ce:	4770      	bx	lr

080120d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120d0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 80120d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80120d4:	f7ff fffb 	bl	80120ce <HAL_UART_RxHalfCpltCallback>
}
 80120d8:	bd10      	pop	{r4, pc}

080120da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80120da:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80120dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	225a      	movs	r2, #90	; 0x5a
 80120e2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80120e4:	3a08      	subs	r2, #8
 80120e6:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80120e8:	3369      	adds	r3, #105	; 0x69
 80120ea:	3a51      	subs	r2, #81	; 0x51
 80120ec:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80120ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80120f0:	320f      	adds	r2, #15
 80120f2:	4313      	orrs	r3, r2
 80120f4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80120f6:	f7fa fd3d 	bl	800cb74 <HAL_UART_ErrorCallback>
}
 80120fa:	bd10      	pop	{r4, pc}

080120fc <UART_SetConfig>:
{
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012100:	6801      	ldr	r1, [r0, #0]
 8012102:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012104:	6883      	ldr	r3, [r0, #8]
 8012106:	6900      	ldr	r0, [r0, #16]
 8012108:	4303      	orrs	r3, r0
 801210a:	6960      	ldr	r0, [r4, #20]
 801210c:	4303      	orrs	r3, r0
 801210e:	69e0      	ldr	r0, [r4, #28]
 8012110:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012112:	487e      	ldr	r0, [pc, #504]	; (801230c <UART_SetConfig+0x210>)
 8012114:	4002      	ands	r2, r0
 8012116:	4313      	orrs	r3, r2
 8012118:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801211a:	6822      	ldr	r2, [r4, #0]
 801211c:	6853      	ldr	r3, [r2, #4]
 801211e:	497c      	ldr	r1, [pc, #496]	; (8012310 <UART_SetConfig+0x214>)
 8012120:	400b      	ands	r3, r1
 8012122:	68e1      	ldr	r1, [r4, #12]
 8012124:	430b      	orrs	r3, r1
 8012126:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012128:	6821      	ldr	r1, [r4, #0]
 801212a:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801212c:	69a3      	ldr	r3, [r4, #24]
 801212e:	6a20      	ldr	r0, [r4, #32]
 8012130:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012132:	4878      	ldr	r0, [pc, #480]	; (8012314 <UART_SetConfig+0x218>)
 8012134:	4002      	ands	r2, r0
 8012136:	4313      	orrs	r3, r2
 8012138:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801213a:	6825      	ldr	r5, [r4, #0]
 801213c:	4b76      	ldr	r3, [pc, #472]	; (8012318 <UART_SetConfig+0x21c>)
 801213e:	429d      	cmp	r5, r3
 8012140:	d022      	beq.n	8012188 <UART_SetConfig+0x8c>
 8012142:	4b76      	ldr	r3, [pc, #472]	; (801231c <UART_SetConfig+0x220>)
 8012144:	429d      	cmp	r5, r3
 8012146:	d034      	beq.n	80121b2 <UART_SetConfig+0xb6>
 8012148:	4b75      	ldr	r3, [pc, #468]	; (8012320 <UART_SetConfig+0x224>)
 801214a:	429d      	cmp	r5, r3
 801214c:	d100      	bne.n	8012150 <UART_SetConfig+0x54>
 801214e:	e06b      	b.n	8012228 <UART_SetConfig+0x12c>
 8012150:	4b74      	ldr	r3, [pc, #464]	; (8012324 <UART_SetConfig+0x228>)
 8012152:	429d      	cmp	r5, r3
 8012154:	d100      	bne.n	8012158 <UART_SetConfig+0x5c>
 8012156:	e08e      	b.n	8012276 <UART_SetConfig+0x17a>
 8012158:	4b73      	ldr	r3, [pc, #460]	; (8012328 <UART_SetConfig+0x22c>)
 801215a:	429d      	cmp	r5, r3
 801215c:	d100      	bne.n	8012160 <UART_SetConfig+0x64>
 801215e:	e08a      	b.n	8012276 <UART_SetConfig+0x17a>
 8012160:	4b72      	ldr	r3, [pc, #456]	; (801232c <UART_SetConfig+0x230>)
 8012162:	429d      	cmp	r5, r3
 8012164:	d100      	bne.n	8012168 <UART_SetConfig+0x6c>
 8012166:	e086      	b.n	8012276 <UART_SetConfig+0x17a>
 8012168:	4b71      	ldr	r3, [pc, #452]	; (8012330 <UART_SetConfig+0x234>)
 801216a:	429d      	cmp	r5, r3
 801216c:	d100      	bne.n	8012170 <UART_SetConfig+0x74>
 801216e:	e082      	b.n	8012276 <UART_SetConfig+0x17a>
 8012170:	4b70      	ldr	r3, [pc, #448]	; (8012334 <UART_SetConfig+0x238>)
 8012172:	429d      	cmp	r5, r3
 8012174:	d100      	bne.n	8012178 <UART_SetConfig+0x7c>
 8012176:	e07e      	b.n	8012276 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012178:	2380      	movs	r3, #128	; 0x80
 801217a:	021b      	lsls	r3, r3, #8
 801217c:	69e2      	ldr	r2, [r4, #28]
 801217e:	429a      	cmp	r2, r3
 8012180:	d100      	bne.n	8012184 <UART_SetConfig+0x88>
 8012182:	e072      	b.n	801226a <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8012184:	2001      	movs	r0, #1
 8012186:	e04e      	b.n	8012226 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012188:	4b6b      	ldr	r3, [pc, #428]	; (8012338 <UART_SetConfig+0x23c>)
 801218a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801218c:	2303      	movs	r3, #3
 801218e:	4013      	ands	r3, r2
 8012190:	2b01      	cmp	r3, #1
 8012192:	d100      	bne.n	8012196 <UART_SetConfig+0x9a>
 8012194:	e09a      	b.n	80122cc <UART_SetConfig+0x1d0>
 8012196:	2b00      	cmp	r3, #0
 8012198:	d02f      	beq.n	80121fa <UART_SetConfig+0xfe>
 801219a:	2b02      	cmp	r3, #2
 801219c:	d100      	bne.n	80121a0 <UART_SetConfig+0xa4>
 801219e:	e0a5      	b.n	80122ec <UART_SetConfig+0x1f0>
 80121a0:	2b03      	cmp	r3, #3
 80121a2:	d01a      	beq.n	80121da <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121a4:	2380      	movs	r3, #128	; 0x80
 80121a6:	021b      	lsls	r3, r3, #8
 80121a8:	69e2      	ldr	r2, [r4, #28]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d060      	beq.n	8012270 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 80121ae:	2001      	movs	r0, #1
 80121b0:	e039      	b.n	8012226 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121b2:	4b61      	ldr	r3, [pc, #388]	; (8012338 <UART_SetConfig+0x23c>)
 80121b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b6:	22c0      	movs	r2, #192	; 0xc0
 80121b8:	0292      	lsls	r2, r2, #10
 80121ba:	4013      	ands	r3, r2
 80121bc:	2280      	movs	r2, #128	; 0x80
 80121be:	0252      	lsls	r2, r2, #9
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d100      	bne.n	80121c6 <UART_SetConfig+0xca>
 80121c4:	e082      	b.n	80122cc <UART_SetConfig+0x1d0>
 80121c6:	d916      	bls.n	80121f6 <UART_SetConfig+0xfa>
 80121c8:	2280      	movs	r2, #128	; 0x80
 80121ca:	0292      	lsls	r2, r2, #10
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d100      	bne.n	80121d2 <UART_SetConfig+0xd6>
 80121d0:	e08c      	b.n	80122ec <UART_SetConfig+0x1f0>
 80121d2:	22c0      	movs	r2, #192	; 0xc0
 80121d4:	0292      	lsls	r2, r2, #10
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d1e4      	bne.n	80121a4 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121da:	2380      	movs	r3, #128	; 0x80
 80121dc:	021b      	lsls	r3, r3, #8
 80121de:	69e2      	ldr	r2, [r4, #28]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d038      	beq.n	8012256 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80121e4:	6861      	ldr	r1, [r4, #4]
 80121e6:	4855      	ldr	r0, [pc, #340]	; (801233c <UART_SetConfig+0x240>)
 80121e8:	f7ed ffb2 	bl	8000150 <__udivsi3>
 80121ec:	0400      	lsls	r0, r0, #16
 80121ee:	0c00      	lsrs	r0, r0, #16
 80121f0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80121f2:	2000      	movs	r0, #0
        break;
 80121f4:	e017      	b.n	8012226 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1d4      	bne.n	80121a4 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121fa:	2380      	movs	r3, #128	; 0x80
 80121fc:	021b      	lsls	r3, r3, #8
 80121fe:	69e2      	ldr	r2, [r4, #28]
 8012200:	429a      	cmp	r2, r3
 8012202:	d13d      	bne.n	8012280 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012204:	f7fe ff30 	bl	8011068 <HAL_RCC_GetPCLK1Freq>
 8012208:	0040      	lsls	r0, r0, #1
 801220a:	6861      	ldr	r1, [r4, #4]
 801220c:	f7ed ffa0 	bl	8000150 <__udivsi3>
 8012210:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012212:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012214:	220f      	movs	r2, #15
 8012216:	0019      	movs	r1, r3
 8012218:	4391      	bics	r1, r2
 801221a:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 801221c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801221e:	071b      	lsls	r3, r3, #28
 8012220:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8012222:	4313      	orrs	r3, r2
 8012224:	60cb      	str	r3, [r1, #12]
}
 8012226:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012228:	4b43      	ldr	r3, [pc, #268]	; (8012338 <UART_SetConfig+0x23c>)
 801222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801222c:	22c0      	movs	r2, #192	; 0xc0
 801222e:	0312      	lsls	r2, r2, #12
 8012230:	4013      	ands	r3, r2
 8012232:	2280      	movs	r2, #128	; 0x80
 8012234:	02d2      	lsls	r2, r2, #11
 8012236:	4293      	cmp	r3, r2
 8012238:	d02d      	beq.n	8012296 <UART_SetConfig+0x19a>
 801223a:	d913      	bls.n	8012264 <UART_SetConfig+0x168>
 801223c:	2280      	movs	r2, #128	; 0x80
 801223e:	0312      	lsls	r2, r2, #12
 8012240:	4293      	cmp	r3, r2
 8012242:	d036      	beq.n	80122b2 <UART_SetConfig+0x1b6>
 8012244:	22c0      	movs	r2, #192	; 0xc0
 8012246:	0312      	lsls	r2, r2, #12
 8012248:	4293      	cmp	r3, r2
 801224a:	d1ab      	bne.n	80121a4 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801224c:	2380      	movs	r3, #128	; 0x80
 801224e:	021b      	lsls	r3, r3, #8
 8012250:	69e2      	ldr	r2, [r4, #28]
 8012252:	429a      	cmp	r2, r3
 8012254:	d1c6      	bne.n	80121e4 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012256:	6861      	ldr	r1, [r4, #4]
 8012258:	4839      	ldr	r0, [pc, #228]	; (8012340 <UART_SetConfig+0x244>)
 801225a:	f7ed ff79 	bl	8000150 <__udivsi3>
 801225e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012260:	2000      	movs	r0, #0
        break;
 8012262:	e7d7      	b.n	8012214 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012264:	2b00      	cmp	r3, #0
 8012266:	d0c8      	beq.n	80121fa <UART_SetConfig+0xfe>
 8012268:	e79c      	b.n	80121a4 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 801226a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801226c:	2300      	movs	r3, #0
 801226e:	e7d1      	b.n	8012214 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8012270:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012272:	2300      	movs	r3, #0
 8012274:	e7ce      	b.n	8012214 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012276:	2380      	movs	r3, #128	; 0x80
 8012278:	021b      	lsls	r3, r3, #8
 801227a:	69e2      	ldr	r2, [r4, #28]
 801227c:	429a      	cmp	r2, r3
 801227e:	d0c1      	beq.n	8012204 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012280:	f7fe fef2 	bl	8011068 <HAL_RCC_GetPCLK1Freq>
 8012284:	6825      	ldr	r5, [r4, #0]
 8012286:	6861      	ldr	r1, [r4, #4]
 8012288:	f7ed ff62 	bl	8000150 <__udivsi3>
 801228c:	0400      	lsls	r0, r0, #16
 801228e:	0c00      	lsrs	r0, r0, #16
 8012290:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012292:	2000      	movs	r0, #0
  return ret;
 8012294:	e7c7      	b.n	8012226 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012296:	2380      	movs	r3, #128	; 0x80
 8012298:	021b      	lsls	r3, r3, #8
 801229a:	69e2      	ldr	r2, [r4, #28]
 801229c:	429a      	cmp	r2, r3
 801229e:	d11a      	bne.n	80122d6 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80122a0:	f7fe fe7e 	bl	8010fa0 <HAL_RCC_GetSysClockFreq>
 80122a4:	0040      	lsls	r0, r0, #1
 80122a6:	6861      	ldr	r1, [r4, #4]
 80122a8:	f7ed ff52 	bl	8000150 <__udivsi3>
 80122ac:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80122ae:	2000      	movs	r0, #0
        break;
 80122b0:	e7b0      	b.n	8012214 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122b2:	2380      	movs	r3, #128	; 0x80
 80122b4:	021b      	lsls	r3, r3, #8
 80122b6:	69e2      	ldr	r2, [r4, #28]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d11c      	bne.n	80122f6 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80122bc:	6861      	ldr	r1, [r4, #4]
 80122be:	2080      	movs	r0, #128	; 0x80
 80122c0:	0240      	lsls	r0, r0, #9
 80122c2:	f7ed ff45 	bl	8000150 <__udivsi3>
 80122c6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80122c8:	2000      	movs	r0, #0
        break;
 80122ca:	e7a3      	b.n	8012214 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122cc:	2380      	movs	r3, #128	; 0x80
 80122ce:	021b      	lsls	r3, r3, #8
 80122d0:	69e2      	ldr	r2, [r4, #28]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d0e4      	beq.n	80122a0 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80122d6:	f7fe fe63 	bl	8010fa0 <HAL_RCC_GetSysClockFreq>
 80122da:	6825      	ldr	r5, [r4, #0]
 80122dc:	6861      	ldr	r1, [r4, #4]
 80122de:	f7ed ff37 	bl	8000150 <__udivsi3>
 80122e2:	0400      	lsls	r0, r0, #16
 80122e4:	0c00      	lsrs	r0, r0, #16
 80122e6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80122e8:	2000      	movs	r0, #0
        break;
 80122ea:	e79c      	b.n	8012226 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122ec:	2380      	movs	r3, #128	; 0x80
 80122ee:	021b      	lsls	r3, r3, #8
 80122f0:	69e2      	ldr	r2, [r4, #28]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d0e2      	beq.n	80122bc <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80122f6:	6861      	ldr	r1, [r4, #4]
 80122f8:	2080      	movs	r0, #128	; 0x80
 80122fa:	0200      	lsls	r0, r0, #8
 80122fc:	f7ed ff28 	bl	8000150 <__udivsi3>
 8012300:	0400      	lsls	r0, r0, #16
 8012302:	0c00      	lsrs	r0, r0, #16
 8012304:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012306:	2000      	movs	r0, #0
        break;
 8012308:	e78d      	b.n	8012226 <UART_SetConfig+0x12a>
 801230a:	46c0      	nop			; (mov r8, r8)
 801230c:	efff69f3 	.word	0xefff69f3
 8012310:	ffffcfff 	.word	0xffffcfff
 8012314:	fffff4ff 	.word	0xfffff4ff
 8012318:	40013800 	.word	0x40013800
 801231c:	40004400 	.word	0x40004400
 8012320:	40004800 	.word	0x40004800
 8012324:	40004c00 	.word	0x40004c00
 8012328:	40005000 	.word	0x40005000
 801232c:	40011400 	.word	0x40011400
 8012330:	40011800 	.word	0x40011800
 8012334:	40011c00 	.word	0x40011c00
 8012338:	40021000 	.word	0x40021000
 801233c:	007a1200 	.word	0x007a1200
 8012340:	00f42400 	.word	0x00f42400

08012344 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012346:	07db      	lsls	r3, r3, #31
 8012348:	d506      	bpl.n	8012358 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801234a:	6802      	ldr	r2, [r0, #0]
 801234c:	6853      	ldr	r3, [r2, #4]
 801234e:	492c      	ldr	r1, [pc, #176]	; (8012400 <UART_AdvFeatureConfig+0xbc>)
 8012350:	400b      	ands	r3, r1
 8012352:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012354:	430b      	orrs	r3, r1
 8012356:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801235a:	079b      	lsls	r3, r3, #30
 801235c:	d506      	bpl.n	801236c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801235e:	6802      	ldr	r2, [r0, #0]
 8012360:	6853      	ldr	r3, [r2, #4]
 8012362:	4928      	ldr	r1, [pc, #160]	; (8012404 <UART_AdvFeatureConfig+0xc0>)
 8012364:	400b      	ands	r3, r1
 8012366:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012368:	430b      	orrs	r3, r1
 801236a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801236c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801236e:	075b      	lsls	r3, r3, #29
 8012370:	d506      	bpl.n	8012380 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012372:	6802      	ldr	r2, [r0, #0]
 8012374:	6853      	ldr	r3, [r2, #4]
 8012376:	4924      	ldr	r1, [pc, #144]	; (8012408 <UART_AdvFeatureConfig+0xc4>)
 8012378:	400b      	ands	r3, r1
 801237a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801237c:	430b      	orrs	r3, r1
 801237e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012382:	071b      	lsls	r3, r3, #28
 8012384:	d506      	bpl.n	8012394 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012386:	6802      	ldr	r2, [r0, #0]
 8012388:	6853      	ldr	r3, [r2, #4]
 801238a:	4920      	ldr	r1, [pc, #128]	; (801240c <UART_AdvFeatureConfig+0xc8>)
 801238c:	400b      	ands	r3, r1
 801238e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012390:	430b      	orrs	r3, r1
 8012392:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012396:	06db      	lsls	r3, r3, #27
 8012398:	d506      	bpl.n	80123a8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801239a:	6802      	ldr	r2, [r0, #0]
 801239c:	6893      	ldr	r3, [r2, #8]
 801239e:	491c      	ldr	r1, [pc, #112]	; (8012410 <UART_AdvFeatureConfig+0xcc>)
 80123a0:	400b      	ands	r3, r1
 80123a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80123a4:	430b      	orrs	r3, r1
 80123a6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123aa:	069b      	lsls	r3, r3, #26
 80123ac:	d506      	bpl.n	80123bc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80123ae:	6802      	ldr	r2, [r0, #0]
 80123b0:	6893      	ldr	r3, [r2, #8]
 80123b2:	4918      	ldr	r1, [pc, #96]	; (8012414 <UART_AdvFeatureConfig+0xd0>)
 80123b4:	400b      	ands	r3, r1
 80123b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80123b8:	430b      	orrs	r3, r1
 80123ba:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80123bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123be:	065b      	lsls	r3, r3, #25
 80123c0:	d50b      	bpl.n	80123da <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80123c2:	6802      	ldr	r2, [r0, #0]
 80123c4:	6853      	ldr	r3, [r2, #4]
 80123c6:	4914      	ldr	r1, [pc, #80]	; (8012418 <UART_AdvFeatureConfig+0xd4>)
 80123c8:	400b      	ands	r3, r1
 80123ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80123cc:	430b      	orrs	r3, r1
 80123ce:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80123d0:	2380      	movs	r3, #128	; 0x80
 80123d2:	035b      	lsls	r3, r3, #13
 80123d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d00a      	beq.n	80123f0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80123da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123dc:	061b      	lsls	r3, r3, #24
 80123de:	d506      	bpl.n	80123ee <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80123e0:	6802      	ldr	r2, [r0, #0]
 80123e2:	6853      	ldr	r3, [r2, #4]
 80123e4:	490d      	ldr	r1, [pc, #52]	; (801241c <UART_AdvFeatureConfig+0xd8>)
 80123e6:	400b      	ands	r3, r1
 80123e8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80123ea:	430b      	orrs	r3, r1
 80123ec:	6053      	str	r3, [r2, #4]
}
 80123ee:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80123f0:	6802      	ldr	r2, [r0, #0]
 80123f2:	6853      	ldr	r3, [r2, #4]
 80123f4:	490a      	ldr	r1, [pc, #40]	; (8012420 <UART_AdvFeatureConfig+0xdc>)
 80123f6:	400b      	ands	r3, r1
 80123f8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80123fa:	430b      	orrs	r3, r1
 80123fc:	6053      	str	r3, [r2, #4]
 80123fe:	e7ec      	b.n	80123da <UART_AdvFeatureConfig+0x96>
 8012400:	fffdffff 	.word	0xfffdffff
 8012404:	fffeffff 	.word	0xfffeffff
 8012408:	fffbffff 	.word	0xfffbffff
 801240c:	ffff7fff 	.word	0xffff7fff
 8012410:	ffffefff 	.word	0xffffefff
 8012414:	ffffdfff 	.word	0xffffdfff
 8012418:	ffefffff 	.word	0xffefffff
 801241c:	fff7ffff 	.word	0xfff7ffff
 8012420:	ff9fffff 	.word	0xff9fffff

08012424 <UART_WaitOnFlagUntilTimeout>:
{
 8012424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012426:	46c6      	mov	lr, r8
 8012428:	b500      	push	{lr}
 801242a:	0006      	movs	r6, r0
 801242c:	000c      	movs	r4, r1
 801242e:	0017      	movs	r7, r2
 8012430:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012432:	f7fd f8d1 	bl	800f5d8 <HAL_GetTick>
 8012436:	4680      	mov	r8, r0
  if(Status == RESET)
 8012438:	2f00      	cmp	r7, #0
 801243a:	d029      	beq.n	8012490 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801243c:	6832      	ldr	r2, [r6, #0]
 801243e:	69d3      	ldr	r3, [r2, #28]
 8012440:	4023      	ands	r3, r4
 8012442:	42a3      	cmp	r3, r4
 8012444:	d152      	bne.n	80124ec <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012446:	1c6b      	adds	r3, r5, #1
 8012448:	d0f9      	beq.n	801243e <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801244a:	2d00      	cmp	r5, #0
 801244c:	d005      	beq.n	801245a <UART_WaitOnFlagUntilTimeout+0x36>
 801244e:	f7fd f8c3 	bl	800f5d8 <HAL_GetTick>
 8012452:	4643      	mov	r3, r8
 8012454:	1ac0      	subs	r0, r0, r3
 8012456:	42a8      	cmp	r0, r5
 8012458:	d9f0      	bls.n	801243c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801245a:	6832      	ldr	r2, [r6, #0]
 801245c:	6813      	ldr	r3, [r2, #0]
 801245e:	2180      	movs	r1, #128	; 0x80
 8012460:	438b      	bics	r3, r1
 8012462:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012464:	6832      	ldr	r2, [r6, #0]
 8012466:	6813      	ldr	r3, [r2, #0]
 8012468:	3960      	subs	r1, #96	; 0x60
 801246a:	438b      	bics	r3, r1
 801246c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801246e:	6832      	ldr	r2, [r6, #0]
 8012470:	6813      	ldr	r3, [r2, #0]
 8012472:	491f      	ldr	r1, [pc, #124]	; (80124f0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012474:	400b      	ands	r3, r1
 8012476:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012478:	6831      	ldr	r1, [r6, #0]
 801247a:	688b      	ldr	r3, [r1, #8]
 801247c:	2201      	movs	r2, #1
 801247e:	4393      	bics	r3, r2
 8012480:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012482:	2369      	movs	r3, #105	; 0x69
 8012484:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012486:	3b01      	subs	r3, #1
 8012488:	2200      	movs	r2, #0
 801248a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801248c:	2003      	movs	r0, #3
 801248e:	e02a      	b.n	80124e6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012490:	6832      	ldr	r2, [r6, #0]
 8012492:	69d3      	ldr	r3, [r2, #28]
 8012494:	4023      	ands	r3, r4
 8012496:	42a3      	cmp	r3, r4
 8012498:	d024      	beq.n	80124e4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801249a:	1c6b      	adds	r3, r5, #1
 801249c:	d0f9      	beq.n	8012492 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801249e:	2d00      	cmp	r5, #0
 80124a0:	d005      	beq.n	80124ae <UART_WaitOnFlagUntilTimeout+0x8a>
 80124a2:	f7fd f899 	bl	800f5d8 <HAL_GetTick>
 80124a6:	4643      	mov	r3, r8
 80124a8:	1ac0      	subs	r0, r0, r3
 80124aa:	42a8      	cmp	r0, r5
 80124ac:	d9f0      	bls.n	8012490 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80124ae:	6832      	ldr	r2, [r6, #0]
 80124b0:	6813      	ldr	r3, [r2, #0]
 80124b2:	2180      	movs	r1, #128	; 0x80
 80124b4:	438b      	bics	r3, r1
 80124b6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80124b8:	6832      	ldr	r2, [r6, #0]
 80124ba:	6813      	ldr	r3, [r2, #0]
 80124bc:	3960      	subs	r1, #96	; 0x60
 80124be:	438b      	bics	r3, r1
 80124c0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80124c2:	6832      	ldr	r2, [r6, #0]
 80124c4:	6813      	ldr	r3, [r2, #0]
 80124c6:	490a      	ldr	r1, [pc, #40]	; (80124f0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80124c8:	400b      	ands	r3, r1
 80124ca:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80124cc:	6831      	ldr	r1, [r6, #0]
 80124ce:	688b      	ldr	r3, [r1, #8]
 80124d0:	2201      	movs	r2, #1
 80124d2:	4393      	bics	r3, r2
 80124d4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80124d6:	2369      	movs	r3, #105	; 0x69
 80124d8:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80124da:	3b01      	subs	r3, #1
 80124dc:	2200      	movs	r2, #0
 80124de:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80124e0:	2003      	movs	r0, #3
 80124e2:	e000      	b.n	80124e6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80124e4:	2000      	movs	r0, #0
}
 80124e6:	bc04      	pop	{r2}
 80124e8:	4690      	mov	r8, r2
 80124ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80124ec:	2000      	movs	r0, #0
 80124ee:	e7fa      	b.n	80124e6 <UART_WaitOnFlagUntilTimeout+0xc2>
 80124f0:	fffffeff 	.word	0xfffffeff

080124f4 <HAL_UART_Transmit>:
{
 80124f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f6:	b083      	sub	sp, #12
 80124f8:	0004      	movs	r4, r0
 80124fa:	000e      	movs	r6, r1
 80124fc:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80124fe:	2369      	movs	r3, #105	; 0x69
 8012500:	5cc3      	ldrb	r3, [r0, r3]
 8012502:	2b01      	cmp	r3, #1
 8012504:	d004      	beq.n	8012510 <HAL_UART_Transmit+0x1c>
 8012506:	2369      	movs	r3, #105	; 0x69
 8012508:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801250a:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801250c:	2b22      	cmp	r3, #34	; 0x22
 801250e:	d153      	bne.n	80125b8 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8012510:	2e00      	cmp	r6, #0
 8012512:	d050      	beq.n	80125b6 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8012514:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012516:	2a00      	cmp	r2, #0
 8012518:	d04e      	beq.n	80125b8 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801251a:	2368      	movs	r3, #104	; 0x68
 801251c:	5ce3      	ldrb	r3, [r4, r3]
 801251e:	2b01      	cmp	r3, #1
 8012520:	d04c      	beq.n	80125bc <HAL_UART_Transmit+0xc8>
 8012522:	2368      	movs	r3, #104	; 0x68
 8012524:	2101      	movs	r1, #1
 8012526:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012528:	2300      	movs	r3, #0
 801252a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801252c:	3369      	adds	r3, #105	; 0x69
 801252e:	5ce3      	ldrb	r3, [r4, r3]
 8012530:	2b22      	cmp	r3, #34	; 0x22
 8012532:	d008      	beq.n	8012546 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012534:	2369      	movs	r3, #105	; 0x69
 8012536:	2112      	movs	r1, #18
 8012538:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801253a:	2350      	movs	r3, #80	; 0x50
 801253c:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 801253e:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012540:	2580      	movs	r5, #128	; 0x80
 8012542:	016d      	lsls	r5, r5, #5
 8012544:	e00a      	b.n	801255c <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012546:	3347      	adds	r3, #71	; 0x47
 8012548:	3131      	adds	r1, #49	; 0x31
 801254a:	54e1      	strb	r1, [r4, r3]
 801254c:	e7f5      	b.n	801253a <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801254e:	7833      	ldrb	r3, [r6, #0]
 8012550:	6822      	ldr	r2, [r4, #0]
 8012552:	8513      	strh	r3, [r2, #40]	; 0x28
 8012554:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8012556:	5be2      	ldrh	r2, [r4, r7]
 8012558:	2a00      	cmp	r2, #0
 801255a:	d016      	beq.n	801258a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 801255c:	3a01      	subs	r2, #1
 801255e:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012560:	9b01      	ldr	r3, [sp, #4]
 8012562:	2200      	movs	r2, #0
 8012564:	2180      	movs	r1, #128	; 0x80
 8012566:	0020      	movs	r0, r4
 8012568:	f7ff ff5c 	bl	8012424 <UART_WaitOnFlagUntilTimeout>
 801256c:	2800      	cmp	r0, #0
 801256e:	d127      	bne.n	80125c0 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012570:	68a3      	ldr	r3, [r4, #8]
 8012572:	42ab      	cmp	r3, r5
 8012574:	d1eb      	bne.n	801254e <HAL_UART_Transmit+0x5a>
 8012576:	6923      	ldr	r3, [r4, #16]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1e8      	bne.n	801254e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801257c:	8833      	ldrh	r3, [r6, #0]
 801257e:	05db      	lsls	r3, r3, #23
 8012580:	0ddb      	lsrs	r3, r3, #23
 8012582:	6822      	ldr	r2, [r4, #0]
 8012584:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012586:	3602      	adds	r6, #2
 8012588:	e7e5      	b.n	8012556 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801258a:	9b01      	ldr	r3, [sp, #4]
 801258c:	2140      	movs	r1, #64	; 0x40
 801258e:	0020      	movs	r0, r4
 8012590:	f7ff ff48 	bl	8012424 <UART_WaitOnFlagUntilTimeout>
 8012594:	2800      	cmp	r0, #0
 8012596:	d115      	bne.n	80125c4 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012598:	2369      	movs	r3, #105	; 0x69
 801259a:	5ce3      	ldrb	r3, [r4, r3]
 801259c:	2b32      	cmp	r3, #50	; 0x32
 801259e:	d006      	beq.n	80125ae <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80125a0:	2369      	movs	r3, #105	; 0x69
 80125a2:	2201      	movs	r2, #1
 80125a4:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80125a6:	2368      	movs	r3, #104	; 0x68
 80125a8:	2200      	movs	r2, #0
 80125aa:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80125ac:	e004      	b.n	80125b8 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80125ae:	3337      	adds	r3, #55	; 0x37
 80125b0:	2222      	movs	r2, #34	; 0x22
 80125b2:	54e2      	strb	r2, [r4, r3]
 80125b4:	e7f7      	b.n	80125a6 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80125b6:	2001      	movs	r0, #1
}
 80125b8:	b003      	add	sp, #12
 80125ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80125bc:	2002      	movs	r0, #2
 80125be:	e7fb      	b.n	80125b8 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80125c0:	2003      	movs	r0, #3
 80125c2:	e7f9      	b.n	80125b8 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80125c4:	2003      	movs	r0, #3
 80125c6:	e7f7      	b.n	80125b8 <HAL_UART_Transmit+0xc4>

080125c8 <UART_CheckIdleState>:
{
 80125c8:	b510      	push	{r4, lr}
 80125ca:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125cc:	2300      	movs	r3, #0
 80125ce:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80125d0:	6803      	ldr	r3, [r0, #0]
 80125d2:	4a18      	ldr	r2, [pc, #96]	; (8012634 <UART_CheckIdleState+0x6c>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d005      	beq.n	80125e4 <UART_CheckIdleState+0x1c>
 80125d8:	4a17      	ldr	r2, [pc, #92]	; (8012638 <UART_CheckIdleState+0x70>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d002      	beq.n	80125e4 <UART_CheckIdleState+0x1c>
 80125de:	4a17      	ldr	r2, [pc, #92]	; (801263c <UART_CheckIdleState+0x74>)
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d106      	bne.n	80125f2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	071b      	lsls	r3, r3, #28
 80125e8:	d40b      	bmi.n	8012602 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	075b      	lsls	r3, r3, #29
 80125f0:	d413      	bmi.n	801261a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80125f2:	2369      	movs	r3, #105	; 0x69
 80125f4:	2201      	movs	r2, #1
 80125f6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80125f8:	3b01      	subs	r3, #1
 80125fa:	2200      	movs	r2, #0
 80125fc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80125fe:	2000      	movs	r0, #0
}
 8012600:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012602:	23fa      	movs	r3, #250	; 0xfa
 8012604:	2180      	movs	r1, #128	; 0x80
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	2200      	movs	r2, #0
 801260a:	0389      	lsls	r1, r1, #14
 801260c:	0020      	movs	r0, r4
 801260e:	f7ff ff09 	bl	8012424 <UART_WaitOnFlagUntilTimeout>
 8012612:	2800      	cmp	r0, #0
 8012614:	d0e9      	beq.n	80125ea <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012616:	2003      	movs	r0, #3
 8012618:	e7f2      	b.n	8012600 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801261a:	23fa      	movs	r3, #250	; 0xfa
 801261c:	2180      	movs	r1, #128	; 0x80
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	2200      	movs	r2, #0
 8012622:	03c9      	lsls	r1, r1, #15
 8012624:	0020      	movs	r0, r4
 8012626:	f7ff fefd 	bl	8012424 <UART_WaitOnFlagUntilTimeout>
 801262a:	2800      	cmp	r0, #0
 801262c:	d0e1      	beq.n	80125f2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 801262e:	2003      	movs	r0, #3
 8012630:	e7e6      	b.n	8012600 <UART_CheckIdleState+0x38>
 8012632:	46c0      	nop			; (mov r8, r8)
 8012634:	40013800 	.word	0x40013800
 8012638:	40004400 	.word	0x40004400
 801263c:	40004800 	.word	0x40004800

08012640 <HAL_UART_Init>:
{
 8012640:	b510      	push	{r4, lr}
 8012642:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012644:	d030      	beq.n	80126a8 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012646:	2369      	movs	r3, #105	; 0x69
 8012648:	5cc3      	ldrb	r3, [r0, r3]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d022      	beq.n	8012694 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801264e:	2369      	movs	r3, #105	; 0x69
 8012650:	2202      	movs	r2, #2
 8012652:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012654:	6822      	ldr	r2, [r4, #0]
 8012656:	6813      	ldr	r3, [r2, #0]
 8012658:	2101      	movs	r1, #1
 801265a:	438b      	bics	r3, r1
 801265c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801265e:	0020      	movs	r0, r4
 8012660:	f7ff fd4c 	bl	80120fc <UART_SetConfig>
 8012664:	2801      	cmp	r0, #1
 8012666:	d014      	beq.n	8012692 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801266a:	2b00      	cmp	r3, #0
 801266c:	d118      	bne.n	80126a0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801266e:	6822      	ldr	r2, [r4, #0]
 8012670:	6853      	ldr	r3, [r2, #4]
 8012672:	490e      	ldr	r1, [pc, #56]	; (80126ac <HAL_UART_Init+0x6c>)
 8012674:	400b      	ands	r3, r1
 8012676:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012678:	6822      	ldr	r2, [r4, #0]
 801267a:	6893      	ldr	r3, [r2, #8]
 801267c:	212a      	movs	r1, #42	; 0x2a
 801267e:	438b      	bics	r3, r1
 8012680:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012682:	6822      	ldr	r2, [r4, #0]
 8012684:	6813      	ldr	r3, [r2, #0]
 8012686:	3929      	subs	r1, #41	; 0x29
 8012688:	430b      	orrs	r3, r1
 801268a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801268c:	0020      	movs	r0, r4
 801268e:	f7ff ff9b 	bl	80125c8 <UART_CheckIdleState>
}
 8012692:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012694:	3368      	adds	r3, #104	; 0x68
 8012696:	2200      	movs	r2, #0
 8012698:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801269a:	f7fa fd15 	bl	800d0c8 <HAL_UART_MspInit>
 801269e:	e7d6      	b.n	801264e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80126a0:	0020      	movs	r0, r4
 80126a2:	f7ff fe4f 	bl	8012344 <UART_AdvFeatureConfig>
 80126a6:	e7e2      	b.n	801266e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80126a8:	2001      	movs	r0, #1
 80126aa:	e7f2      	b.n	8012692 <HAL_UART_Init+0x52>
 80126ac:	ffffb7ff 	.word	0xffffb7ff

080126b0 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80126b0:	2369      	movs	r3, #105	; 0x69
 80126b2:	5cc3      	ldrb	r3, [r0, r3]
 80126b4:	2b12      	cmp	r3, #18
 80126b6:	d004      	beq.n	80126c2 <UART_Transmit_IT+0x12>
 80126b8:	2369      	movs	r3, #105	; 0x69
 80126ba:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80126bc:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80126be:	2a32      	cmp	r2, #50	; 0x32
 80126c0:	d113      	bne.n	80126ea <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80126c2:	2352      	movs	r3, #82	; 0x52
 80126c4:	5ac3      	ldrh	r3, [r0, r3]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d011      	beq.n	80126ee <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126ca:	2380      	movs	r3, #128	; 0x80
 80126cc:	015b      	lsls	r3, r3, #5
 80126ce:	6882      	ldr	r2, [r0, #8]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d018      	beq.n	8012706 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80126d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80126d6:	1c5a      	adds	r2, r3, #1
 80126d8:	64c2      	str	r2, [r0, #76]	; 0x4c
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	6802      	ldr	r2, [r0, #0]
 80126de:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80126e0:	2252      	movs	r2, #82	; 0x52
 80126e2:	5a83      	ldrh	r3, [r0, r2]
 80126e4:	3b01      	subs	r3, #1
 80126e6:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 80126e8:	2300      	movs	r3, #0
  }
}
 80126ea:	0018      	movs	r0, r3
 80126ec:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80126ee:	6802      	ldr	r2, [r0, #0]
 80126f0:	6813      	ldr	r3, [r2, #0]
 80126f2:	2180      	movs	r1, #128	; 0x80
 80126f4:	438b      	bics	r3, r1
 80126f6:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80126f8:	6802      	ldr	r2, [r0, #0]
 80126fa:	6813      	ldr	r3, [r2, #0]
 80126fc:	3940      	subs	r1, #64	; 0x40
 80126fe:	430b      	orrs	r3, r1
 8012700:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8012702:	2300      	movs	r3, #0
 8012704:	e7f1      	b.n	80126ea <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012706:	6903      	ldr	r3, [r0, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1e3      	bne.n	80126d4 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801270c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801270e:	881b      	ldrh	r3, [r3, #0]
 8012710:	05db      	lsls	r3, r3, #23
 8012712:	0ddb      	lsrs	r3, r3, #23
 8012714:	6802      	ldr	r2, [r0, #0]
 8012716:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012718:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801271a:	3302      	adds	r3, #2
 801271c:	64c3      	str	r3, [r0, #76]	; 0x4c
 801271e:	e7df      	b.n	80126e0 <UART_Transmit_IT+0x30>

08012720 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012720:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012722:	6802      	ldr	r2, [r0, #0]
 8012724:	6813      	ldr	r3, [r2, #0]
 8012726:	2140      	movs	r1, #64	; 0x40
 8012728:	438b      	bics	r3, r1
 801272a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801272c:	2369      	movs	r3, #105	; 0x69
 801272e:	5cc3      	ldrb	r3, [r0, r3]
 8012730:	2b32      	cmp	r3, #50	; 0x32
 8012732:	d00a      	beq.n	801274a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012734:	6801      	ldr	r1, [r0, #0]
 8012736:	688b      	ldr	r3, [r1, #8]
 8012738:	2201      	movs	r2, #1
 801273a:	4393      	bics	r3, r2
 801273c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 801273e:	2369      	movs	r3, #105	; 0x69
 8012740:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012742:	f7fa f9ff 	bl	800cb44 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012746:	2000      	movs	r0, #0
 8012748:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801274a:	3337      	adds	r3, #55	; 0x37
 801274c:	2222      	movs	r2, #34	; 0x22
 801274e:	54c2      	strb	r2, [r0, r3]
 8012750:	e7f7      	b.n	8012742 <UART_EndTransmit_IT+0x22>
	...

08012754 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012754:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012756:	2369      	movs	r3, #105	; 0x69
 8012758:	5cc3      	ldrb	r3, [r0, r3]
 801275a:	2b22      	cmp	r3, #34	; 0x22
 801275c:	d004      	beq.n	8012768 <UART_Receive_IT+0x14>
 801275e:	2369      	movs	r3, #105	; 0x69
 8012760:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012762:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012764:	2b32      	cmp	r3, #50	; 0x32
 8012766:	d12d      	bne.n	80127c4 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8012768:	235c      	movs	r3, #92	; 0x5c
 801276a:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801276c:	2280      	movs	r2, #128	; 0x80
 801276e:	0152      	lsls	r2, r2, #5
 8012770:	6883      	ldr	r3, [r0, #8]
 8012772:	4293      	cmp	r3, r2
 8012774:	d028      	beq.n	80127c8 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012776:	6803      	ldr	r3, [r0, #0]
 8012778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801277a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801277c:	1c54      	adds	r4, r2, #1
 801277e:	6544      	str	r4, [r0, #84]	; 0x54
 8012780:	400b      	ands	r3, r1
 8012782:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012784:	225a      	movs	r2, #90	; 0x5a
 8012786:	5a83      	ldrh	r3, [r0, r2]
 8012788:	3b01      	subs	r3, #1
 801278a:	b29b      	uxth	r3, r3
 801278c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801278e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012790:	2b00      	cmp	r3, #0
 8012792:	d117      	bne.n	80127c4 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012794:	6802      	ldr	r2, [r0, #0]
 8012796:	6813      	ldr	r3, [r2, #0]
 8012798:	2120      	movs	r1, #32
 801279a:	438b      	bics	r3, r1
 801279c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801279e:	2369      	movs	r3, #105	; 0x69
 80127a0:	5cc3      	ldrb	r3, [r0, r3]
 80127a2:	2b32      	cmp	r3, #50	; 0x32
 80127a4:	d01c      	beq.n	80127e0 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80127a6:	6802      	ldr	r2, [r0, #0]
 80127a8:	6813      	ldr	r3, [r2, #0]
 80127aa:	490f      	ldr	r1, [pc, #60]	; (80127e8 <UART_Receive_IT+0x94>)
 80127ac:	400b      	ands	r3, r1
 80127ae:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80127b0:	6801      	ldr	r1, [r0, #0]
 80127b2:	688b      	ldr	r3, [r1, #8]
 80127b4:	2201      	movs	r2, #1
 80127b6:	4393      	bics	r3, r2
 80127b8:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 80127ba:	2369      	movs	r3, #105	; 0x69
 80127bc:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 80127be:	f7fa f9ff 	bl	800cbc0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80127c2:	2200      	movs	r2, #0
  }
}
 80127c4:	0010      	movs	r0, r2
 80127c6:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80127c8:	6903      	ldr	r3, [r0, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1d3      	bne.n	8012776 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80127ce:	6803      	ldr	r3, [r0, #0]
 80127d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80127d2:	400b      	ands	r3, r1
 80127d4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80127d6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80127d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80127da:	3302      	adds	r3, #2
 80127dc:	6543      	str	r3, [r0, #84]	; 0x54
 80127de:	e7d1      	b.n	8012784 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80127e0:	3337      	adds	r3, #55	; 0x37
 80127e2:	2212      	movs	r2, #18
 80127e4:	54c2      	strb	r2, [r0, r3]
 80127e6:	e7ea      	b.n	80127be <UART_Receive_IT+0x6a>
 80127e8:	fffffeff 	.word	0xfffffeff

080127ec <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80127ec:	4770      	bx	lr

080127ee <HAL_UART_IRQHandler>:
{
 80127ee:	b510      	push	{r4, lr}
 80127f0:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80127f2:	6803      	ldr	r3, [r0, #0]
 80127f4:	69da      	ldr	r2, [r3, #28]
 80127f6:	07d2      	lsls	r2, r2, #31
 80127f8:	d509      	bpl.n	801280e <HAL_UART_IRQHandler+0x20>
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	05d2      	lsls	r2, r2, #23
 80127fe:	d506      	bpl.n	801280e <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012800:	2201      	movs	r2, #1
 8012802:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012804:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012806:	4313      	orrs	r3, r2
 8012808:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801280a:	2369      	movs	r3, #105	; 0x69
 801280c:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	69da      	ldr	r2, [r3, #28]
 8012812:	0792      	lsls	r2, r2, #30
 8012814:	d50b      	bpl.n	801282e <HAL_UART_IRQHandler+0x40>
 8012816:	689a      	ldr	r2, [r3, #8]
 8012818:	07d2      	lsls	r2, r2, #31
 801281a:	d508      	bpl.n	801282e <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 801281c:	2202      	movs	r2, #2
 801281e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012820:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012822:	3202      	adds	r2, #2
 8012824:	4313      	orrs	r3, r2
 8012826:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012828:	2369      	movs	r3, #105	; 0x69
 801282a:	3a03      	subs	r2, #3
 801282c:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	69da      	ldr	r2, [r3, #28]
 8012832:	0752      	lsls	r2, r2, #29
 8012834:	d50b      	bpl.n	801284e <HAL_UART_IRQHandler+0x60>
 8012836:	689a      	ldr	r2, [r3, #8]
 8012838:	07d2      	lsls	r2, r2, #31
 801283a:	d508      	bpl.n	801284e <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 801283c:	2204      	movs	r2, #4
 801283e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012840:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012842:	3a02      	subs	r2, #2
 8012844:	4313      	orrs	r3, r2
 8012846:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012848:	2369      	movs	r3, #105	; 0x69
 801284a:	3a01      	subs	r2, #1
 801284c:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	69da      	ldr	r2, [r3, #28]
 8012852:	0712      	lsls	r2, r2, #28
 8012854:	d50a      	bpl.n	801286c <HAL_UART_IRQHandler+0x7e>
 8012856:	689a      	ldr	r2, [r3, #8]
 8012858:	07d2      	lsls	r2, r2, #31
 801285a:	d507      	bpl.n	801286c <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 801285c:	2208      	movs	r2, #8
 801285e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012860:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012862:	4313      	orrs	r3, r2
 8012864:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012866:	2369      	movs	r3, #105	; 0x69
 8012868:	3a07      	subs	r2, #7
 801286a:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 801286c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801286e:	2b00      	cmp	r3, #0
 8012870:	d11c      	bne.n	80128ac <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012872:	6823      	ldr	r3, [r4, #0]
 8012874:	69da      	ldr	r2, [r3, #28]
 8012876:	02d2      	lsls	r2, r2, #11
 8012878:	d502      	bpl.n	8012880 <HAL_UART_IRQHandler+0x92>
 801287a:	689a      	ldr	r2, [r3, #8]
 801287c:	0252      	lsls	r2, r2, #9
 801287e:	d419      	bmi.n	80128b4 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012880:	6823      	ldr	r3, [r4, #0]
 8012882:	69da      	ldr	r2, [r3, #28]
 8012884:	0692      	lsls	r2, r2, #26
 8012886:	d502      	bpl.n	801288e <HAL_UART_IRQHandler+0xa0>
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	069b      	lsls	r3, r3, #26
 801288c:	d41c      	bmi.n	80128c8 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	69da      	ldr	r2, [r3, #28]
 8012892:	0612      	lsls	r2, r2, #24
 8012894:	d502      	bpl.n	801289c <HAL_UART_IRQHandler+0xae>
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	061b      	lsls	r3, r3, #24
 801289a:	d41e      	bmi.n	80128da <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	69da      	ldr	r2, [r3, #28]
 80128a0:	0652      	lsls	r2, r2, #25
 80128a2:	d502      	bpl.n	80128aa <HAL_UART_IRQHandler+0xbc>
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	065b      	lsls	r3, r3, #25
 80128a8:	d41b      	bmi.n	80128e2 <HAL_UART_IRQHandler+0xf4>
}
 80128aa:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80128ac:	0020      	movs	r0, r4
 80128ae:	f7fa f961 	bl	800cb74 <HAL_UART_ErrorCallback>
 80128b2:	e7de      	b.n	8012872 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80128b4:	2280      	movs	r2, #128	; 0x80
 80128b6:	0352      	lsls	r2, r2, #13
 80128b8:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80128ba:	2369      	movs	r3, #105	; 0x69
 80128bc:	2201      	movs	r2, #1
 80128be:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80128c0:	0020      	movs	r0, r4
 80128c2:	f7ff ff93 	bl	80127ec <HAL_UARTEx_WakeupCallback>
 80128c6:	e7db      	b.n	8012880 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80128c8:	0020      	movs	r0, r4
 80128ca:	f7ff ff43 	bl	8012754 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128ce:	6822      	ldr	r2, [r4, #0]
 80128d0:	6993      	ldr	r3, [r2, #24]
 80128d2:	2108      	movs	r1, #8
 80128d4:	430b      	orrs	r3, r1
 80128d6:	6193      	str	r3, [r2, #24]
 80128d8:	e7d9      	b.n	801288e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80128da:	0020      	movs	r0, r4
 80128dc:	f7ff fee8 	bl	80126b0 <UART_Transmit_IT>
 80128e0:	e7dc      	b.n	801289c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80128e2:	0020      	movs	r0, r4
 80128e4:	f7ff ff1c 	bl	8012720 <UART_EndTransmit_IT>
}
 80128e8:	e7df      	b.n	80128aa <HAL_UART_IRQHandler+0xbc>

080128ea <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 80128ea:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80128ec:	f7fc fe5c 	bl	800f5a8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80128f0:	f7f8 fa7a 	bl	800ade8 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 80128f4:	f7f1 ff4c 	bl	8004790 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80128f8:	f7f5 faf0 	bl	8007edc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80128fc:	f7fa fe36 	bl	800d56c <osKernelStart>
 8012900:	e7fe      	b.n	8012900 <main+0x16>

08012902 <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 8012902:	e7fe      	b.n	8012902 <UserTask>

08012904 <atof>:
 8012904:	b510      	push	{r4, lr}
 8012906:	2100      	movs	r1, #0
 8012908:	f001 fb3e 	bl	8013f88 <strtod>
 801290c:	bd10      	pop	{r4, pc}

0801290e <atoi>:
 801290e:	b510      	push	{r4, lr}
 8012910:	220a      	movs	r2, #10
 8012912:	2100      	movs	r1, #0
 8012914:	f001 fc04 	bl	8014120 <strtol>
 8012918:	bd10      	pop	{r4, pc}

0801291a <atol>:
 801291a:	b510      	push	{r4, lr}
 801291c:	220a      	movs	r2, #10
 801291e:	2100      	movs	r1, #0
 8012920:	f001 fbfe 	bl	8014120 <strtol>
 8012924:	bd10      	pop	{r4, pc}
	...

08012928 <__libc_init_array>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	2600      	movs	r6, #0
 801292c:	4d0c      	ldr	r5, [pc, #48]	; (8012960 <__libc_init_array+0x38>)
 801292e:	4c0d      	ldr	r4, [pc, #52]	; (8012964 <__libc_init_array+0x3c>)
 8012930:	1b64      	subs	r4, r4, r5
 8012932:	10a4      	asrs	r4, r4, #2
 8012934:	42a6      	cmp	r6, r4
 8012936:	d109      	bne.n	801294c <__libc_init_array+0x24>
 8012938:	2600      	movs	r6, #0
 801293a:	f004 fe6d 	bl	8017618 <_init>
 801293e:	4d0a      	ldr	r5, [pc, #40]	; (8012968 <__libc_init_array+0x40>)
 8012940:	4c0a      	ldr	r4, [pc, #40]	; (801296c <__libc_init_array+0x44>)
 8012942:	1b64      	subs	r4, r4, r5
 8012944:	10a4      	asrs	r4, r4, #2
 8012946:	42a6      	cmp	r6, r4
 8012948:	d105      	bne.n	8012956 <__libc_init_array+0x2e>
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	00b3      	lsls	r3, r6, #2
 801294e:	58eb      	ldr	r3, [r5, r3]
 8012950:	4798      	blx	r3
 8012952:	3601      	adds	r6, #1
 8012954:	e7ee      	b.n	8012934 <__libc_init_array+0xc>
 8012956:	00b3      	lsls	r3, r6, #2
 8012958:	58eb      	ldr	r3, [r5, r3]
 801295a:	4798      	blx	r3
 801295c:	3601      	adds	r6, #1
 801295e:	e7f2      	b.n	8012946 <__libc_init_array+0x1e>
 8012960:	0801a824 	.word	0x0801a824
 8012964:	0801a824 	.word	0x0801a824
 8012968:	0801a824 	.word	0x0801a824
 801296c:	0801a82c 	.word	0x0801a82c

08012970 <__locale_ctype_ptr_l>:
 8012970:	30ec      	adds	r0, #236	; 0xec
 8012972:	6800      	ldr	r0, [r0, #0]
 8012974:	4770      	bx	lr
	...

08012978 <__locale_ctype_ptr>:
 8012978:	4b04      	ldr	r3, [pc, #16]	; (801298c <__locale_ctype_ptr+0x14>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297e:	2b00      	cmp	r3, #0
 8012980:	d100      	bne.n	8012984 <__locale_ctype_ptr+0xc>
 8012982:	4b03      	ldr	r3, [pc, #12]	; (8012990 <__locale_ctype_ptr+0x18>)
 8012984:	33ec      	adds	r3, #236	; 0xec
 8012986:	6818      	ldr	r0, [r3, #0]
 8012988:	4770      	bx	lr
 801298a:	46c0      	nop			; (mov r8, r8)
 801298c:	200000ac 	.word	0x200000ac
 8012990:	200004d8 	.word	0x200004d8

08012994 <malloc>:
 8012994:	b510      	push	{r4, lr}
 8012996:	4b03      	ldr	r3, [pc, #12]	; (80129a4 <malloc+0x10>)
 8012998:	0001      	movs	r1, r0
 801299a:	6818      	ldr	r0, [r3, #0]
 801299c:	f000 f80e 	bl	80129bc <_malloc_r>
 80129a0:	bd10      	pop	{r4, pc}
 80129a2:	46c0      	nop			; (mov r8, r8)
 80129a4:	200000ac 	.word	0x200000ac

080129a8 <free>:
 80129a8:	b510      	push	{r4, lr}
 80129aa:	4b03      	ldr	r3, [pc, #12]	; (80129b8 <free+0x10>)
 80129ac:	0001      	movs	r1, r0
 80129ae:	6818      	ldr	r0, [r3, #0]
 80129b0:	f003 fd10 	bl	80163d4 <_free_r>
 80129b4:	bd10      	pop	{r4, pc}
 80129b6:	46c0      	nop			; (mov r8, r8)
 80129b8:	200000ac 	.word	0x200000ac

080129bc <_malloc_r>:
 80129bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129be:	000d      	movs	r5, r1
 80129c0:	b085      	sub	sp, #20
 80129c2:	350b      	adds	r5, #11
 80129c4:	9001      	str	r0, [sp, #4]
 80129c6:	2d16      	cmp	r5, #22
 80129c8:	d908      	bls.n	80129dc <_malloc_r+0x20>
 80129ca:	2307      	movs	r3, #7
 80129cc:	439d      	bics	r5, r3
 80129ce:	d506      	bpl.n	80129de <_malloc_r+0x22>
 80129d0:	230c      	movs	r3, #12
 80129d2:	9a01      	ldr	r2, [sp, #4]
 80129d4:	6013      	str	r3, [r2, #0]
 80129d6:	2000      	movs	r0, #0
 80129d8:	b005      	add	sp, #20
 80129da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129dc:	2510      	movs	r5, #16
 80129de:	428d      	cmp	r5, r1
 80129e0:	d3f6      	bcc.n	80129d0 <_malloc_r+0x14>
 80129e2:	9801      	ldr	r0, [sp, #4]
 80129e4:	f000 fa34 	bl	8012e50 <__malloc_lock>
 80129e8:	23f8      	movs	r3, #248	; 0xf8
 80129ea:	33ff      	adds	r3, #255	; 0xff
 80129ec:	4ac4      	ldr	r2, [pc, #784]	; (8012d00 <_malloc_r+0x344>)
 80129ee:	429d      	cmp	r5, r3
 80129f0:	d820      	bhi.n	8012a34 <_malloc_r+0x78>
 80129f2:	0029      	movs	r1, r5
 80129f4:	3108      	adds	r1, #8
 80129f6:	1851      	adds	r1, r2, r1
 80129f8:	0008      	movs	r0, r1
 80129fa:	684c      	ldr	r4, [r1, #4]
 80129fc:	3808      	subs	r0, #8
 80129fe:	08eb      	lsrs	r3, r5, #3
 8012a00:	4284      	cmp	r4, r0
 8012a02:	d104      	bne.n	8012a0e <_malloc_r+0x52>
 8012a04:	68cc      	ldr	r4, [r1, #12]
 8012a06:	3302      	adds	r3, #2
 8012a08:	469c      	mov	ip, r3
 8012a0a:	42a1      	cmp	r1, r4
 8012a0c:	d02a      	beq.n	8012a64 <_malloc_r+0xa8>
 8012a0e:	2303      	movs	r3, #3
 8012a10:	6862      	ldr	r2, [r4, #4]
 8012a12:	68a1      	ldr	r1, [r4, #8]
 8012a14:	439a      	bics	r2, r3
 8012a16:	0013      	movs	r3, r2
 8012a18:	68e2      	ldr	r2, [r4, #12]
 8012a1a:	18e3      	adds	r3, r4, r3
 8012a1c:	60ca      	str	r2, [r1, #12]
 8012a1e:	6091      	str	r1, [r2, #8]
 8012a20:	2201      	movs	r2, #1
 8012a22:	6859      	ldr	r1, [r3, #4]
 8012a24:	430a      	orrs	r2, r1
 8012a26:	605a      	str	r2, [r3, #4]
 8012a28:	9801      	ldr	r0, [sp, #4]
 8012a2a:	f000 fa19 	bl	8012e60 <__malloc_unlock>
 8012a2e:	0020      	movs	r0, r4
 8012a30:	3008      	adds	r0, #8
 8012a32:	e7d1      	b.n	80129d8 <_malloc_r+0x1c>
 8012a34:	0a69      	lsrs	r1, r5, #9
 8012a36:	233f      	movs	r3, #63	; 0x3f
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	d003      	beq.n	8012a44 <_malloc_r+0x88>
 8012a3c:	2904      	cmp	r1, #4
 8012a3e:	d828      	bhi.n	8012a92 <_malloc_r+0xd6>
 8012a40:	09ab      	lsrs	r3, r5, #6
 8012a42:	3338      	adds	r3, #56	; 0x38
 8012a44:	2103      	movs	r1, #3
 8012a46:	468c      	mov	ip, r1
 8012a48:	00d8      	lsls	r0, r3, #3
 8012a4a:	1880      	adds	r0, r0, r2
 8012a4c:	68c4      	ldr	r4, [r0, #12]
 8012a4e:	4284      	cmp	r4, r0
 8012a50:	d006      	beq.n	8012a60 <_malloc_r+0xa4>
 8012a52:	4666      	mov	r6, ip
 8012a54:	6861      	ldr	r1, [r4, #4]
 8012a56:	43b1      	bics	r1, r6
 8012a58:	1b4f      	subs	r7, r1, r5
 8012a5a:	2f0f      	cmp	r7, #15
 8012a5c:	dd31      	ble.n	8012ac2 <_malloc_r+0x106>
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	3301      	adds	r3, #1
 8012a62:	469c      	mov	ip, r3
 8012a64:	6914      	ldr	r4, [r2, #16]
 8012a66:	49a7      	ldr	r1, [pc, #668]	; (8012d04 <_malloc_r+0x348>)
 8012a68:	428c      	cmp	r4, r1
 8012a6a:	d055      	beq.n	8012b18 <_malloc_r+0x15c>
 8012a6c:	2303      	movs	r3, #3
 8012a6e:	6860      	ldr	r0, [r4, #4]
 8012a70:	4398      	bics	r0, r3
 8012a72:	0003      	movs	r3, r0
 8012a74:	1b46      	subs	r6, r0, r5
 8012a76:	2e0f      	cmp	r6, #15
 8012a78:	dd31      	ble.n	8012ade <_malloc_r+0x122>
 8012a7a:	2701      	movs	r7, #1
 8012a7c:	1960      	adds	r0, r4, r5
 8012a7e:	433d      	orrs	r5, r7
 8012a80:	4337      	orrs	r7, r6
 8012a82:	6065      	str	r5, [r4, #4]
 8012a84:	6150      	str	r0, [r2, #20]
 8012a86:	6110      	str	r0, [r2, #16]
 8012a88:	60c1      	str	r1, [r0, #12]
 8012a8a:	6081      	str	r1, [r0, #8]
 8012a8c:	6047      	str	r7, [r0, #4]
 8012a8e:	50e6      	str	r6, [r4, r3]
 8012a90:	e7ca      	b.n	8012a28 <_malloc_r+0x6c>
 8012a92:	2914      	cmp	r1, #20
 8012a94:	d802      	bhi.n	8012a9c <_malloc_r+0xe0>
 8012a96:	000b      	movs	r3, r1
 8012a98:	335b      	adds	r3, #91	; 0x5b
 8012a9a:	e7d3      	b.n	8012a44 <_malloc_r+0x88>
 8012a9c:	2954      	cmp	r1, #84	; 0x54
 8012a9e:	d802      	bhi.n	8012aa6 <_malloc_r+0xea>
 8012aa0:	0b2b      	lsrs	r3, r5, #12
 8012aa2:	336e      	adds	r3, #110	; 0x6e
 8012aa4:	e7ce      	b.n	8012a44 <_malloc_r+0x88>
 8012aa6:	23aa      	movs	r3, #170	; 0xaa
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	4299      	cmp	r1, r3
 8012aac:	d802      	bhi.n	8012ab4 <_malloc_r+0xf8>
 8012aae:	0beb      	lsrs	r3, r5, #15
 8012ab0:	3377      	adds	r3, #119	; 0x77
 8012ab2:	e7c7      	b.n	8012a44 <_malloc_r+0x88>
 8012ab4:	4894      	ldr	r0, [pc, #592]	; (8012d08 <_malloc_r+0x34c>)
 8012ab6:	237e      	movs	r3, #126	; 0x7e
 8012ab8:	4281      	cmp	r1, r0
 8012aba:	d8c3      	bhi.n	8012a44 <_malloc_r+0x88>
 8012abc:	0cab      	lsrs	r3, r5, #18
 8012abe:	337c      	adds	r3, #124	; 0x7c
 8012ac0:	e7c0      	b.n	8012a44 <_malloc_r+0x88>
 8012ac2:	68e6      	ldr	r6, [r4, #12]
 8012ac4:	2f00      	cmp	r7, #0
 8012ac6:	db08      	blt.n	8012ada <_malloc_r+0x11e>
 8012ac8:	68a3      	ldr	r3, [r4, #8]
 8012aca:	1861      	adds	r1, r4, r1
 8012acc:	60de      	str	r6, [r3, #12]
 8012ace:	60b3      	str	r3, [r6, #8]
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	684a      	ldr	r2, [r1, #4]
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	604b      	str	r3, [r1, #4]
 8012ad8:	e7a6      	b.n	8012a28 <_malloc_r+0x6c>
 8012ada:	0034      	movs	r4, r6
 8012adc:	e7b7      	b.n	8012a4e <_malloc_r+0x92>
 8012ade:	6151      	str	r1, [r2, #20]
 8012ae0:	6111      	str	r1, [r2, #16]
 8012ae2:	2e00      	cmp	r6, #0
 8012ae4:	db05      	blt.n	8012af2 <_malloc_r+0x136>
 8012ae6:	2101      	movs	r1, #1
 8012ae8:	1823      	adds	r3, r4, r0
 8012aea:	685a      	ldr	r2, [r3, #4]
 8012aec:	4311      	orrs	r1, r2
 8012aee:	6059      	str	r1, [r3, #4]
 8012af0:	e79a      	b.n	8012a28 <_malloc_r+0x6c>
 8012af2:	4986      	ldr	r1, [pc, #536]	; (8012d0c <_malloc_r+0x350>)
 8012af4:	6857      	ldr	r7, [r2, #4]
 8012af6:	4288      	cmp	r0, r1
 8012af8:	d900      	bls.n	8012afc <_malloc_r+0x140>
 8012afa:	e090      	b.n	8012c1e <_malloc_r+0x262>
 8012afc:	08c3      	lsrs	r3, r0, #3
 8012afe:	39ff      	subs	r1, #255	; 0xff
 8012b00:	1098      	asrs	r0, r3, #2
 8012b02:	39ff      	subs	r1, #255	; 0xff
 8012b04:	4081      	lsls	r1, r0
 8012b06:	00db      	lsls	r3, r3, #3
 8012b08:	4339      	orrs	r1, r7
 8012b0a:	6051      	str	r1, [r2, #4]
 8012b0c:	189a      	adds	r2, r3, r2
 8012b0e:	6893      	ldr	r3, [r2, #8]
 8012b10:	60e2      	str	r2, [r4, #12]
 8012b12:	60a3      	str	r3, [r4, #8]
 8012b14:	6094      	str	r4, [r2, #8]
 8012b16:	60dc      	str	r4, [r3, #12]
 8012b18:	4663      	mov	r3, ip
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	4978      	ldr	r1, [pc, #480]	; (8012d00 <_malloc_r+0x344>)
 8012b1e:	109b      	asrs	r3, r3, #2
 8012b20:	6848      	ldr	r0, [r1, #4]
 8012b22:	409a      	lsls	r2, r3
 8012b24:	4290      	cmp	r0, r2
 8012b26:	d32d      	bcc.n	8012b84 <_malloc_r+0x1c8>
 8012b28:	4202      	tst	r2, r0
 8012b2a:	d109      	bne.n	8012b40 <_malloc_r+0x184>
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	4664      	mov	r4, ip
 8012b30:	439c      	bics	r4, r3
 8012b32:	0023      	movs	r3, r4
 8012b34:	3304      	adds	r3, #4
 8012b36:	469c      	mov	ip, r3
 8012b38:	0052      	lsls	r2, r2, #1
 8012b3a:	4202      	tst	r2, r0
 8012b3c:	d100      	bne.n	8012b40 <_malloc_r+0x184>
 8012b3e:	e0a4      	b.n	8012c8a <_malloc_r+0x2ce>
 8012b40:	4663      	mov	r3, ip
 8012b42:	00db      	lsls	r3, r3, #3
 8012b44:	18cb      	adds	r3, r1, r3
 8012b46:	9303      	str	r3, [sp, #12]
 8012b48:	001f      	movs	r7, r3
 8012b4a:	4663      	mov	r3, ip
 8012b4c:	9302      	str	r3, [sp, #8]
 8012b4e:	68fc      	ldr	r4, [r7, #12]
 8012b50:	42bc      	cmp	r4, r7
 8012b52:	d000      	beq.n	8012b56 <_malloc_r+0x19a>
 8012b54:	e09c      	b.n	8012c90 <_malloc_r+0x2d4>
 8012b56:	2003      	movs	r0, #3
 8012b58:	9b02      	ldr	r3, [sp, #8]
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	9302      	str	r3, [sp, #8]
 8012b60:	4203      	tst	r3, r0
 8012b62:	d1f4      	bne.n	8012b4e <_malloc_r+0x192>
 8012b64:	4663      	mov	r3, ip
 8012b66:	2003      	movs	r0, #3
 8012b68:	4203      	tst	r3, r0
 8012b6a:	d000      	beq.n	8012b6e <_malloc_r+0x1b2>
 8012b6c:	e0b3      	b.n	8012cd6 <_malloc_r+0x31a>
 8012b6e:	684b      	ldr	r3, [r1, #4]
 8012b70:	4393      	bics	r3, r2
 8012b72:	604b      	str	r3, [r1, #4]
 8012b74:	4b62      	ldr	r3, [pc, #392]	; (8012d00 <_malloc_r+0x344>)
 8012b76:	0052      	lsls	r2, r2, #1
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d302      	bcc.n	8012b84 <_malloc_r+0x1c8>
 8012b7e:	2a00      	cmp	r2, #0
 8012b80:	d000      	beq.n	8012b84 <_malloc_r+0x1c8>
 8012b82:	e0b9      	b.n	8012cf8 <_malloc_r+0x33c>
 8012b84:	2303      	movs	r3, #3
 8012b86:	688f      	ldr	r7, [r1, #8]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	439a      	bics	r2, r3
 8012b8c:	9202      	str	r2, [sp, #8]
 8012b8e:	42aa      	cmp	r2, r5
 8012b90:	d303      	bcc.n	8012b9a <_malloc_r+0x1de>
 8012b92:	1b52      	subs	r2, r2, r5
 8012b94:	2a0f      	cmp	r2, #15
 8012b96:	dd00      	ble.n	8012b9a <_malloc_r+0x1de>
 8012b98:	e116      	b.n	8012dc8 <_malloc_r+0x40c>
 8012b9a:	4b5d      	ldr	r3, [pc, #372]	; (8012d10 <_malloc_r+0x354>)
 8012b9c:	2008      	movs	r0, #8
 8012b9e:	681e      	ldr	r6, [r3, #0]
 8012ba0:	f002 fd26 	bl	80155f0 <sysconf>
 8012ba4:	4b5b      	ldr	r3, [pc, #364]	; (8012d14 <_malloc_r+0x358>)
 8012ba6:	3610      	adds	r6, #16
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	1976      	adds	r6, r6, r5
 8012bac:	9003      	str	r0, [sp, #12]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	d003      	beq.n	8012bba <_malloc_r+0x1fe>
 8012bb2:	3e01      	subs	r6, #1
 8012bb4:	1836      	adds	r6, r6, r0
 8012bb6:	4243      	negs	r3, r0
 8012bb8:	401e      	ands	r6, r3
 8012bba:	0031      	movs	r1, r6
 8012bbc:	9801      	ldr	r0, [sp, #4]
 8012bbe:	f000 fb27 	bl	8013210 <_sbrk_r>
 8012bc2:	0004      	movs	r4, r0
 8012bc4:	1c43      	adds	r3, r0, #1
 8012bc6:	d100      	bne.n	8012bca <_malloc_r+0x20e>
 8012bc8:	e0d6      	b.n	8012d78 <_malloc_r+0x3bc>
 8012bca:	9b02      	ldr	r3, [sp, #8]
 8012bcc:	18fb      	adds	r3, r7, r3
 8012bce:	4283      	cmp	r3, r0
 8012bd0:	d903      	bls.n	8012bda <_malloc_r+0x21e>
 8012bd2:	4a4b      	ldr	r2, [pc, #300]	; (8012d00 <_malloc_r+0x344>)
 8012bd4:	4297      	cmp	r7, r2
 8012bd6:	d000      	beq.n	8012bda <_malloc_r+0x21e>
 8012bd8:	e0ce      	b.n	8012d78 <_malloc_r+0x3bc>
 8012bda:	494f      	ldr	r1, [pc, #316]	; (8012d18 <_malloc_r+0x35c>)
 8012bdc:	680a      	ldr	r2, [r1, #0]
 8012bde:	18b2      	adds	r2, r6, r2
 8012be0:	600a      	str	r2, [r1, #0]
 8012be2:	9903      	ldr	r1, [sp, #12]
 8012be4:	4694      	mov	ip, r2
 8012be6:	1e48      	subs	r0, r1, #1
 8012be8:	42a3      	cmp	r3, r4
 8012bea:	d000      	beq.n	8012bee <_malloc_r+0x232>
 8012bec:	e09a      	b.n	8012d24 <_malloc_r+0x368>
 8012bee:	4203      	tst	r3, r0
 8012bf0:	d000      	beq.n	8012bf4 <_malloc_r+0x238>
 8012bf2:	e097      	b.n	8012d24 <_malloc_r+0x368>
 8012bf4:	9a02      	ldr	r2, [sp, #8]
 8012bf6:	4b42      	ldr	r3, [pc, #264]	; (8012d00 <_malloc_r+0x344>)
 8012bf8:	1992      	adds	r2, r2, r6
 8012bfa:	2601      	movs	r6, #1
 8012bfc:	689b      	ldr	r3, [r3, #8]
 8012bfe:	4316      	orrs	r6, r2
 8012c00:	605e      	str	r6, [r3, #4]
 8012c02:	4b45      	ldr	r3, [pc, #276]	; (8012d18 <_malloc_r+0x35c>)
 8012c04:	4a45      	ldr	r2, [pc, #276]	; (8012d1c <_malloc_r+0x360>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	6811      	ldr	r1, [r2, #0]
 8012c0a:	428b      	cmp	r3, r1
 8012c0c:	d900      	bls.n	8012c10 <_malloc_r+0x254>
 8012c0e:	6013      	str	r3, [r2, #0]
 8012c10:	4a43      	ldr	r2, [pc, #268]	; (8012d20 <_malloc_r+0x364>)
 8012c12:	6811      	ldr	r1, [r2, #0]
 8012c14:	428b      	cmp	r3, r1
 8012c16:	d800      	bhi.n	8012c1a <_malloc_r+0x25e>
 8012c18:	e0ae      	b.n	8012d78 <_malloc_r+0x3bc>
 8012c1a:	6013      	str	r3, [r2, #0]
 8012c1c:	e0ac      	b.n	8012d78 <_malloc_r+0x3bc>
 8012c1e:	0a40      	lsrs	r0, r0, #9
 8012c20:	2804      	cmp	r0, #4
 8012c22:	d810      	bhi.n	8012c46 <_malloc_r+0x28a>
 8012c24:	0999      	lsrs	r1, r3, #6
 8012c26:	3138      	adds	r1, #56	; 0x38
 8012c28:	00ce      	lsls	r6, r1, #3
 8012c2a:	18b6      	adds	r6, r6, r2
 8012c2c:	68b0      	ldr	r0, [r6, #8]
 8012c2e:	4286      	cmp	r6, r0
 8012c30:	d124      	bne.n	8012c7c <_malloc_r+0x2c0>
 8012c32:	2301      	movs	r3, #1
 8012c34:	1089      	asrs	r1, r1, #2
 8012c36:	408b      	lsls	r3, r1
 8012c38:	433b      	orrs	r3, r7
 8012c3a:	6053      	str	r3, [r2, #4]
 8012c3c:	60e6      	str	r6, [r4, #12]
 8012c3e:	60a0      	str	r0, [r4, #8]
 8012c40:	60b4      	str	r4, [r6, #8]
 8012c42:	60c4      	str	r4, [r0, #12]
 8012c44:	e768      	b.n	8012b18 <_malloc_r+0x15c>
 8012c46:	2814      	cmp	r0, #20
 8012c48:	d802      	bhi.n	8012c50 <_malloc_r+0x294>
 8012c4a:	0001      	movs	r1, r0
 8012c4c:	315b      	adds	r1, #91	; 0x5b
 8012c4e:	e7eb      	b.n	8012c28 <_malloc_r+0x26c>
 8012c50:	2854      	cmp	r0, #84	; 0x54
 8012c52:	d802      	bhi.n	8012c5a <_malloc_r+0x29e>
 8012c54:	0b19      	lsrs	r1, r3, #12
 8012c56:	316e      	adds	r1, #110	; 0x6e
 8012c58:	e7e6      	b.n	8012c28 <_malloc_r+0x26c>
 8012c5a:	21aa      	movs	r1, #170	; 0xaa
 8012c5c:	0049      	lsls	r1, r1, #1
 8012c5e:	4288      	cmp	r0, r1
 8012c60:	d802      	bhi.n	8012c68 <_malloc_r+0x2ac>
 8012c62:	0bd9      	lsrs	r1, r3, #15
 8012c64:	3177      	adds	r1, #119	; 0x77
 8012c66:	e7df      	b.n	8012c28 <_malloc_r+0x26c>
 8012c68:	4e27      	ldr	r6, [pc, #156]	; (8012d08 <_malloc_r+0x34c>)
 8012c6a:	217e      	movs	r1, #126	; 0x7e
 8012c6c:	42b0      	cmp	r0, r6
 8012c6e:	d8db      	bhi.n	8012c28 <_malloc_r+0x26c>
 8012c70:	0c99      	lsrs	r1, r3, #18
 8012c72:	317c      	adds	r1, #124	; 0x7c
 8012c74:	e7d8      	b.n	8012c28 <_malloc_r+0x26c>
 8012c76:	6880      	ldr	r0, [r0, #8]
 8012c78:	4286      	cmp	r6, r0
 8012c7a:	d004      	beq.n	8012c86 <_malloc_r+0x2ca>
 8012c7c:	2103      	movs	r1, #3
 8012c7e:	6842      	ldr	r2, [r0, #4]
 8012c80:	438a      	bics	r2, r1
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d8f7      	bhi.n	8012c76 <_malloc_r+0x2ba>
 8012c86:	68c6      	ldr	r6, [r0, #12]
 8012c88:	e7d8      	b.n	8012c3c <_malloc_r+0x280>
 8012c8a:	2304      	movs	r3, #4
 8012c8c:	449c      	add	ip, r3
 8012c8e:	e753      	b.n	8012b38 <_malloc_r+0x17c>
 8012c90:	2003      	movs	r0, #3
 8012c92:	6863      	ldr	r3, [r4, #4]
 8012c94:	4383      	bics	r3, r0
 8012c96:	1b5e      	subs	r6, r3, r5
 8012c98:	68e0      	ldr	r0, [r4, #12]
 8012c9a:	2e0f      	cmp	r6, #15
 8012c9c:	dd0e      	ble.n	8012cbc <_malloc_r+0x300>
 8012c9e:	2701      	movs	r7, #1
 8012ca0:	1962      	adds	r2, r4, r5
 8012ca2:	433d      	orrs	r5, r7
 8012ca4:	6065      	str	r5, [r4, #4]
 8012ca6:	68a5      	ldr	r5, [r4, #8]
 8012ca8:	4337      	orrs	r7, r6
 8012caa:	60e8      	str	r0, [r5, #12]
 8012cac:	6085      	str	r5, [r0, #8]
 8012cae:	614a      	str	r2, [r1, #20]
 8012cb0:	610a      	str	r2, [r1, #16]
 8012cb2:	4914      	ldr	r1, [pc, #80]	; (8012d04 <_malloc_r+0x348>)
 8012cb4:	6057      	str	r7, [r2, #4]
 8012cb6:	60d1      	str	r1, [r2, #12]
 8012cb8:	6091      	str	r1, [r2, #8]
 8012cba:	e6e8      	b.n	8012a8e <_malloc_r+0xd2>
 8012cbc:	2e00      	cmp	r6, #0
 8012cbe:	db08      	blt.n	8012cd2 <_malloc_r+0x316>
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	18e3      	adds	r3, r4, r3
 8012cc4:	6859      	ldr	r1, [r3, #4]
 8012cc6:	430a      	orrs	r2, r1
 8012cc8:	605a      	str	r2, [r3, #4]
 8012cca:	68a3      	ldr	r3, [r4, #8]
 8012ccc:	60d8      	str	r0, [r3, #12]
 8012cce:	6083      	str	r3, [r0, #8]
 8012cd0:	e6aa      	b.n	8012a28 <_malloc_r+0x6c>
 8012cd2:	0004      	movs	r4, r0
 8012cd4:	e73c      	b.n	8012b50 <_malloc_r+0x194>
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	425b      	negs	r3, r3
 8012cda:	449c      	add	ip, r3
 8012cdc:	9b03      	ldr	r3, [sp, #12]
 8012cde:	6818      	ldr	r0, [r3, #0]
 8012ce0:	3b08      	subs	r3, #8
 8012ce2:	9003      	str	r0, [sp, #12]
 8012ce4:	4298      	cmp	r0, r3
 8012ce6:	d100      	bne.n	8012cea <_malloc_r+0x32e>
 8012ce8:	e73c      	b.n	8012b64 <_malloc_r+0x1a8>
 8012cea:	e743      	b.n	8012b74 <_malloc_r+0x1b8>
 8012cec:	2004      	movs	r0, #4
 8012cee:	0052      	lsls	r2, r2, #1
 8012cf0:	4484      	add	ip, r0
 8012cf2:	421a      	tst	r2, r3
 8012cf4:	d0fa      	beq.n	8012cec <_malloc_r+0x330>
 8012cf6:	e723      	b.n	8012b40 <_malloc_r+0x184>
 8012cf8:	9802      	ldr	r0, [sp, #8]
 8012cfa:	4684      	mov	ip, r0
 8012cfc:	e7f9      	b.n	8012cf2 <_malloc_r+0x336>
 8012cfe:	46c0      	nop			; (mov r8, r8)
 8012d00:	20000644 	.word	0x20000644
 8012d04:	2000064c 	.word	0x2000064c
 8012d08:	00000554 	.word	0x00000554
 8012d0c:	000001ff 	.word	0x000001ff
 8012d10:	20006814 	.word	0x20006814
 8012d14:	20000a4c 	.word	0x20000a4c
 8012d18:	200067e4 	.word	0x200067e4
 8012d1c:	2000680c 	.word	0x2000680c
 8012d20:	20006810 	.word	0x20006810
 8012d24:	492e      	ldr	r1, [pc, #184]	; (8012de0 <_malloc_r+0x424>)
 8012d26:	680a      	ldr	r2, [r1, #0]
 8012d28:	3201      	adds	r2, #1
 8012d2a:	d133      	bne.n	8012d94 <_malloc_r+0x3d8>
 8012d2c:	600c      	str	r4, [r1, #0]
 8012d2e:	2307      	movs	r3, #7
 8012d30:	4023      	ands	r3, r4
 8012d32:	d002      	beq.n	8012d3a <_malloc_r+0x37e>
 8012d34:	2208      	movs	r2, #8
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	18e4      	adds	r4, r4, r3
 8012d3a:	9a03      	ldr	r2, [sp, #12]
 8012d3c:	19a6      	adds	r6, r4, r6
 8012d3e:	18d3      	adds	r3, r2, r3
 8012d40:	4006      	ands	r6, r0
 8012d42:	1b9e      	subs	r6, r3, r6
 8012d44:	0031      	movs	r1, r6
 8012d46:	9801      	ldr	r0, [sp, #4]
 8012d48:	f000 fa62 	bl	8013210 <_sbrk_r>
 8012d4c:	1c43      	adds	r3, r0, #1
 8012d4e:	d101      	bne.n	8012d54 <_malloc_r+0x398>
 8012d50:	0020      	movs	r0, r4
 8012d52:	2600      	movs	r6, #0
 8012d54:	4a23      	ldr	r2, [pc, #140]	; (8012de4 <_malloc_r+0x428>)
 8012d56:	1b00      	subs	r0, r0, r4
 8012d58:	6813      	ldr	r3, [r2, #0]
 8012d5a:	199b      	adds	r3, r3, r6
 8012d5c:	6013      	str	r3, [r2, #0]
 8012d5e:	2301      	movs	r3, #1
 8012d60:	4a21      	ldr	r2, [pc, #132]	; (8012de8 <_malloc_r+0x42c>)
 8012d62:	1986      	adds	r6, r0, r6
 8012d64:	431e      	orrs	r6, r3
 8012d66:	6094      	str	r4, [r2, #8]
 8012d68:	6066      	str	r6, [r4, #4]
 8012d6a:	4297      	cmp	r7, r2
 8012d6c:	d100      	bne.n	8012d70 <_malloc_r+0x3b4>
 8012d6e:	e748      	b.n	8012c02 <_malloc_r+0x246>
 8012d70:	9a02      	ldr	r2, [sp, #8]
 8012d72:	2a0f      	cmp	r2, #15
 8012d74:	d813      	bhi.n	8012d9e <_malloc_r+0x3e2>
 8012d76:	6063      	str	r3, [r4, #4]
 8012d78:	2203      	movs	r2, #3
 8012d7a:	4b1b      	ldr	r3, [pc, #108]	; (8012de8 <_malloc_r+0x42c>)
 8012d7c:	689b      	ldr	r3, [r3, #8]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	4393      	bics	r3, r2
 8012d82:	1b5a      	subs	r2, r3, r5
 8012d84:	42ab      	cmp	r3, r5
 8012d86:	d301      	bcc.n	8012d8c <_malloc_r+0x3d0>
 8012d88:	2a0f      	cmp	r2, #15
 8012d8a:	dc1d      	bgt.n	8012dc8 <_malloc_r+0x40c>
 8012d8c:	9801      	ldr	r0, [sp, #4]
 8012d8e:	f000 f867 	bl	8012e60 <__malloc_unlock>
 8012d92:	e620      	b.n	80129d6 <_malloc_r+0x1a>
 8012d94:	1ae3      	subs	r3, r4, r3
 8012d96:	4a13      	ldr	r2, [pc, #76]	; (8012de4 <_malloc_r+0x428>)
 8012d98:	4463      	add	r3, ip
 8012d9a:	6013      	str	r3, [r2, #0]
 8012d9c:	e7c7      	b.n	8012d2e <_malloc_r+0x372>
 8012d9e:	2207      	movs	r2, #7
 8012da0:	9e02      	ldr	r6, [sp, #8]
 8012da2:	3e0c      	subs	r6, #12
 8012da4:	4396      	bics	r6, r2
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	4013      	ands	r3, r2
 8012daa:	2205      	movs	r2, #5
 8012dac:	4333      	orrs	r3, r6
 8012dae:	607b      	str	r3, [r7, #4]
 8012db0:	19bb      	adds	r3, r7, r6
 8012db2:	605a      	str	r2, [r3, #4]
 8012db4:	609a      	str	r2, [r3, #8]
 8012db6:	2e0f      	cmp	r6, #15
 8012db8:	d800      	bhi.n	8012dbc <_malloc_r+0x400>
 8012dba:	e722      	b.n	8012c02 <_malloc_r+0x246>
 8012dbc:	0039      	movs	r1, r7
 8012dbe:	9801      	ldr	r0, [sp, #4]
 8012dc0:	3108      	adds	r1, #8
 8012dc2:	f003 fb07 	bl	80163d4 <_free_r>
 8012dc6:	e71c      	b.n	8012c02 <_malloc_r+0x246>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	0018      	movs	r0, r3
 8012dcc:	4906      	ldr	r1, [pc, #24]	; (8012de8 <_malloc_r+0x42c>)
 8012dce:	4328      	orrs	r0, r5
 8012dd0:	688c      	ldr	r4, [r1, #8]
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	1965      	adds	r5, r4, r5
 8012dd6:	6060      	str	r0, [r4, #4]
 8012dd8:	608d      	str	r5, [r1, #8]
 8012dda:	606b      	str	r3, [r5, #4]
 8012ddc:	e624      	b.n	8012a28 <_malloc_r+0x6c>
 8012dde:	46c0      	nop			; (mov r8, r8)
 8012de0:	20000a4c 	.word	0x20000a4c
 8012de4:	200067e4 	.word	0x200067e4
 8012de8:	20000644 	.word	0x20000644

08012dec <__ascii_mbtowc>:
 8012dec:	b082      	sub	sp, #8
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d100      	bne.n	8012df4 <__ascii_mbtowc+0x8>
 8012df2:	a901      	add	r1, sp, #4
 8012df4:	1e10      	subs	r0, r2, #0
 8012df6:	d006      	beq.n	8012e06 <__ascii_mbtowc+0x1a>
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d006      	beq.n	8012e0a <__ascii_mbtowc+0x1e>
 8012dfc:	7813      	ldrb	r3, [r2, #0]
 8012dfe:	600b      	str	r3, [r1, #0]
 8012e00:	7810      	ldrb	r0, [r2, #0]
 8012e02:	1e43      	subs	r3, r0, #1
 8012e04:	4198      	sbcs	r0, r3
 8012e06:	b002      	add	sp, #8
 8012e08:	4770      	bx	lr
 8012e0a:	2002      	movs	r0, #2
 8012e0c:	4240      	negs	r0, r0
 8012e0e:	e7fa      	b.n	8012e06 <__ascii_mbtowc+0x1a>

08012e10 <memcmp>:
 8012e10:	b530      	push	{r4, r5, lr}
 8012e12:	2400      	movs	r4, #0
 8012e14:	42a2      	cmp	r2, r4
 8012e16:	d101      	bne.n	8012e1c <memcmp+0xc>
 8012e18:	2000      	movs	r0, #0
 8012e1a:	e005      	b.n	8012e28 <memcmp+0x18>
 8012e1c:	5d03      	ldrb	r3, [r0, r4]
 8012e1e:	1c65      	adds	r5, r4, #1
 8012e20:	5d0c      	ldrb	r4, [r1, r4]
 8012e22:	42a3      	cmp	r3, r4
 8012e24:	d001      	beq.n	8012e2a <memcmp+0x1a>
 8012e26:	1b18      	subs	r0, r3, r4
 8012e28:	bd30      	pop	{r4, r5, pc}
 8012e2a:	002c      	movs	r4, r5
 8012e2c:	e7f2      	b.n	8012e14 <memcmp+0x4>

08012e2e <memcpy>:
 8012e2e:	2300      	movs	r3, #0
 8012e30:	b510      	push	{r4, lr}
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d100      	bne.n	8012e38 <memcpy+0xa>
 8012e36:	bd10      	pop	{r4, pc}
 8012e38:	5ccc      	ldrb	r4, [r1, r3]
 8012e3a:	54c4      	strb	r4, [r0, r3]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	e7f8      	b.n	8012e32 <memcpy+0x4>

08012e40 <memset>:
 8012e40:	0003      	movs	r3, r0
 8012e42:	1812      	adds	r2, r2, r0
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d100      	bne.n	8012e4a <memset+0xa>
 8012e48:	4770      	bx	lr
 8012e4a:	7019      	strb	r1, [r3, #0]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	e7f9      	b.n	8012e44 <memset+0x4>

08012e50 <__malloc_lock>:
 8012e50:	b510      	push	{r4, lr}
 8012e52:	4802      	ldr	r0, [pc, #8]	; (8012e5c <__malloc_lock+0xc>)
 8012e54:	f003 feb2 	bl	8016bbc <__retarget_lock_acquire_recursive>
 8012e58:	bd10      	pop	{r4, pc}
 8012e5a:	46c0      	nop			; (mov r8, r8)
 8012e5c:	20006d3c 	.word	0x20006d3c

08012e60 <__malloc_unlock>:
 8012e60:	b510      	push	{r4, lr}
 8012e62:	4802      	ldr	r0, [pc, #8]	; (8012e6c <__malloc_unlock+0xc>)
 8012e64:	f003 feab 	bl	8016bbe <__retarget_lock_release_recursive>
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	46c0      	nop			; (mov r8, r8)
 8012e6c:	20006d3c 	.word	0x20006d3c

08012e70 <rand>:
 8012e70:	4b09      	ldr	r3, [pc, #36]	; (8012e98 <rand+0x28>)
 8012e72:	b510      	push	{r4, lr}
 8012e74:	681c      	ldr	r4, [r3, #0]
 8012e76:	4a09      	ldr	r2, [pc, #36]	; (8012e9c <rand+0x2c>)
 8012e78:	34a8      	adds	r4, #168	; 0xa8
 8012e7a:	6820      	ldr	r0, [r4, #0]
 8012e7c:	6861      	ldr	r1, [r4, #4]
 8012e7e:	4b08      	ldr	r3, [pc, #32]	; (8012ea0 <rand+0x30>)
 8012e80:	f7ed fb74 	bl	800056c <__aeabi_lmul>
 8012e84:	2201      	movs	r2, #1
 8012e86:	2300      	movs	r3, #0
 8012e88:	1880      	adds	r0, r0, r2
 8012e8a:	4159      	adcs	r1, r3
 8012e8c:	6020      	str	r0, [r4, #0]
 8012e8e:	6061      	str	r1, [r4, #4]
 8012e90:	0048      	lsls	r0, r1, #1
 8012e92:	0840      	lsrs	r0, r0, #1
 8012e94:	bd10      	pop	{r4, pc}
 8012e96:	46c0      	nop			; (mov r8, r8)
 8012e98:	200000ac 	.word	0x200000ac
 8012e9c:	4c957f2d 	.word	0x4c957f2d
 8012ea0:	5851f42d 	.word	0x5851f42d

08012ea4 <realloc>:
 8012ea4:	b510      	push	{r4, lr}
 8012ea6:	4b03      	ldr	r3, [pc, #12]	; (8012eb4 <realloc+0x10>)
 8012ea8:	000a      	movs	r2, r1
 8012eaa:	0001      	movs	r1, r0
 8012eac:	6818      	ldr	r0, [r3, #0]
 8012eae:	f000 f803 	bl	8012eb8 <_realloc_r>
 8012eb2:	bd10      	pop	{r4, pc}
 8012eb4:	200000ac 	.word	0x200000ac

08012eb8 <_realloc_r>:
 8012eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eba:	b087      	sub	sp, #28
 8012ebc:	9003      	str	r0, [sp, #12]
 8012ebe:	1e0c      	subs	r4, r1, #0
 8012ec0:	9205      	str	r2, [sp, #20]
 8012ec2:	d106      	bne.n	8012ed2 <_realloc_r+0x1a>
 8012ec4:	0011      	movs	r1, r2
 8012ec6:	f7ff fd79 	bl	80129bc <_malloc_r>
 8012eca:	0007      	movs	r7, r0
 8012ecc:	0038      	movs	r0, r7
 8012ece:	b007      	add	sp, #28
 8012ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ed2:	9803      	ldr	r0, [sp, #12]
 8012ed4:	f7ff ffbc 	bl	8012e50 <__malloc_lock>
 8012ed8:	0023      	movs	r3, r4
 8012eda:	3b08      	subs	r3, #8
 8012edc:	685f      	ldr	r7, [r3, #4]
 8012ede:	9302      	str	r3, [sp, #8]
 8012ee0:	003a      	movs	r2, r7
 8012ee2:	2303      	movs	r3, #3
 8012ee4:	9e05      	ldr	r6, [sp, #20]
 8012ee6:	439a      	bics	r2, r3
 8012ee8:	360b      	adds	r6, #11
 8012eea:	9204      	str	r2, [sp, #16]
 8012eec:	2e16      	cmp	r6, #22
 8012eee:	d908      	bls.n	8012f02 <_realloc_r+0x4a>
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	439e      	bics	r6, r3
 8012ef4:	9601      	str	r6, [sp, #4]
 8012ef6:	d506      	bpl.n	8012f06 <_realloc_r+0x4e>
 8012ef8:	230c      	movs	r3, #12
 8012efa:	9a03      	ldr	r2, [sp, #12]
 8012efc:	2700      	movs	r7, #0
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	e7e4      	b.n	8012ecc <_realloc_r+0x14>
 8012f02:	2310      	movs	r3, #16
 8012f04:	9301      	str	r3, [sp, #4]
 8012f06:	9b01      	ldr	r3, [sp, #4]
 8012f08:	9a05      	ldr	r2, [sp, #20]
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d3f4      	bcc.n	8012ef8 <_realloc_r+0x40>
 8012f0e:	9b01      	ldr	r3, [sp, #4]
 8012f10:	9a04      	ldr	r2, [sp, #16]
 8012f12:	4293      	cmp	r3, r2
 8012f14:	dc00      	bgt.n	8012f18 <_realloc_r+0x60>
 8012f16:	e16f      	b.n	80131f8 <_realloc_r+0x340>
 8012f18:	9b02      	ldr	r3, [sp, #8]
 8012f1a:	48bc      	ldr	r0, [pc, #752]	; (801320c <_realloc_r+0x354>)
 8012f1c:	189b      	adds	r3, r3, r2
 8012f1e:	6882      	ldr	r2, [r0, #8]
 8012f20:	4694      	mov	ip, r2
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	459c      	cmp	ip, r3
 8012f26:	d006      	beq.n	8012f36 <_realloc_r+0x7e>
 8012f28:	2501      	movs	r5, #1
 8012f2a:	0011      	movs	r1, r2
 8012f2c:	43a9      	bics	r1, r5
 8012f2e:	1859      	adds	r1, r3, r1
 8012f30:	6849      	ldr	r1, [r1, #4]
 8012f32:	4229      	tst	r1, r5
 8012f34:	d146      	bne.n	8012fc4 <_realloc_r+0x10c>
 8012f36:	2103      	movs	r1, #3
 8012f38:	438a      	bics	r2, r1
 8012f3a:	9904      	ldr	r1, [sp, #16]
 8012f3c:	188e      	adds	r6, r1, r2
 8012f3e:	9901      	ldr	r1, [sp, #4]
 8012f40:	459c      	cmp	ip, r3
 8012f42:	d117      	bne.n	8012f74 <_realloc_r+0xbc>
 8012f44:	3110      	adds	r1, #16
 8012f46:	42b1      	cmp	r1, r6
 8012f48:	dc3e      	bgt.n	8012fc8 <_realloc_r+0x110>
 8012f4a:	9901      	ldr	r1, [sp, #4]
 8012f4c:	9b02      	ldr	r3, [sp, #8]
 8012f4e:	468c      	mov	ip, r1
 8012f50:	4463      	add	r3, ip
 8012f52:	6083      	str	r3, [r0, #8]
 8012f54:	001a      	movs	r2, r3
 8012f56:	1a73      	subs	r3, r6, r1
 8012f58:	2601      	movs	r6, #1
 8012f5a:	4333      	orrs	r3, r6
 8012f5c:	6053      	str	r3, [r2, #4]
 8012f5e:	0023      	movs	r3, r4
 8012f60:	3b08      	subs	r3, #8
 8012f62:	685a      	ldr	r2, [r3, #4]
 8012f64:	9803      	ldr	r0, [sp, #12]
 8012f66:	4016      	ands	r6, r2
 8012f68:	430e      	orrs	r6, r1
 8012f6a:	605e      	str	r6, [r3, #4]
 8012f6c:	f7ff ff78 	bl	8012e60 <__malloc_unlock>
 8012f70:	0027      	movs	r7, r4
 8012f72:	e7ab      	b.n	8012ecc <_realloc_r+0x14>
 8012f74:	42b1      	cmp	r1, r6
 8012f76:	dc27      	bgt.n	8012fc8 <_realloc_r+0x110>
 8012f78:	68da      	ldr	r2, [r3, #12]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	60da      	str	r2, [r3, #12]
 8012f7e:	6093      	str	r3, [r2, #8]
 8012f80:	9b01      	ldr	r3, [sp, #4]
 8012f82:	9a02      	ldr	r2, [sp, #8]
 8012f84:	1af4      	subs	r4, r6, r3
 8012f86:	9b02      	ldr	r3, [sp, #8]
 8012f88:	1992      	adds	r2, r2, r6
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	2301      	movs	r3, #1
 8012f90:	9804      	ldr	r0, [sp, #16]
 8012f92:	4018      	ands	r0, r3
 8012f94:	2c0f      	cmp	r4, #15
 8012f96:	d800      	bhi.n	8012f9a <_realloc_r+0xe2>
 8012f98:	e130      	b.n	80131fc <_realloc_r+0x344>
 8012f9a:	9d01      	ldr	r5, [sp, #4]
 8012f9c:	9902      	ldr	r1, [sp, #8]
 8012f9e:	4328      	orrs	r0, r5
 8012fa0:	1949      	adds	r1, r1, r5
 8012fa2:	9d02      	ldr	r5, [sp, #8]
 8012fa4:	431c      	orrs	r4, r3
 8012fa6:	6068      	str	r0, [r5, #4]
 8012fa8:	604c      	str	r4, [r1, #4]
 8012faa:	6850      	ldr	r0, [r2, #4]
 8012fac:	3108      	adds	r1, #8
 8012fae:	4303      	orrs	r3, r0
 8012fb0:	6053      	str	r3, [r2, #4]
 8012fb2:	9803      	ldr	r0, [sp, #12]
 8012fb4:	f003 fa0e 	bl	80163d4 <_free_r>
 8012fb8:	9803      	ldr	r0, [sp, #12]
 8012fba:	f7ff ff51 	bl	8012e60 <__malloc_unlock>
 8012fbe:	9f02      	ldr	r7, [sp, #8]
 8012fc0:	3708      	adds	r7, #8
 8012fc2:	e783      	b.n	8012ecc <_realloc_r+0x14>
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	0013      	movs	r3, r2
 8012fc8:	07f9      	lsls	r1, r7, #31
 8012fca:	d500      	bpl.n	8012fce <_realloc_r+0x116>
 8012fcc:	e0c6      	b.n	801315c <_realloc_r+0x2a4>
 8012fce:	0021      	movs	r1, r4
 8012fd0:	3908      	subs	r1, #8
 8012fd2:	680d      	ldr	r5, [r1, #0]
 8012fd4:	9902      	ldr	r1, [sp, #8]
 8012fd6:	1b4d      	subs	r5, r1, r5
 8012fd8:	2103      	movs	r1, #3
 8012fda:	686f      	ldr	r7, [r5, #4]
 8012fdc:	438f      	bics	r7, r1
 8012fde:	9904      	ldr	r1, [sp, #16]
 8012fe0:	187f      	adds	r7, r7, r1
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d100      	bne.n	8012fe8 <_realloc_r+0x130>
 8012fe6:	e084      	b.n	80130f2 <_realloc_r+0x23a>
 8012fe8:	19d6      	adds	r6, r2, r7
 8012fea:	459c      	cmp	ip, r3
 8012fec:	d148      	bne.n	8013080 <_realloc_r+0x1c8>
 8012fee:	9b01      	ldr	r3, [sp, #4]
 8012ff0:	3310      	adds	r3, #16
 8012ff2:	42b3      	cmp	r3, r6
 8012ff4:	dc7d      	bgt.n	80130f2 <_realloc_r+0x23a>
 8012ff6:	68aa      	ldr	r2, [r5, #8]
 8012ff8:	68eb      	ldr	r3, [r5, #12]
 8012ffa:	002f      	movs	r7, r5
 8012ffc:	60d3      	str	r3, [r2, #12]
 8012ffe:	609a      	str	r2, [r3, #8]
 8013000:	000a      	movs	r2, r1
 8013002:	3a04      	subs	r2, #4
 8013004:	3708      	adds	r7, #8
 8013006:	2a24      	cmp	r2, #36	; 0x24
 8013008:	d835      	bhi.n	8013076 <_realloc_r+0x1be>
 801300a:	003b      	movs	r3, r7
 801300c:	2a13      	cmp	r2, #19
 801300e:	d908      	bls.n	8013022 <_realloc_r+0x16a>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	60ab      	str	r3, [r5, #8]
 8013014:	6863      	ldr	r3, [r4, #4]
 8013016:	60eb      	str	r3, [r5, #12]
 8013018:	2a1b      	cmp	r2, #27
 801301a:	d81a      	bhi.n	8013052 <_realloc_r+0x19a>
 801301c:	002b      	movs	r3, r5
 801301e:	3408      	adds	r4, #8
 8013020:	3310      	adds	r3, #16
 8013022:	6822      	ldr	r2, [r4, #0]
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	6862      	ldr	r2, [r4, #4]
 8013028:	605a      	str	r2, [r3, #4]
 801302a:	68a2      	ldr	r2, [r4, #8]
 801302c:	609a      	str	r2, [r3, #8]
 801302e:	9b01      	ldr	r3, [sp, #4]
 8013030:	18ea      	adds	r2, r5, r3
 8013032:	4b76      	ldr	r3, [pc, #472]	; (801320c <_realloc_r+0x354>)
 8013034:	609a      	str	r2, [r3, #8]
 8013036:	9b01      	ldr	r3, [sp, #4]
 8013038:	1af3      	subs	r3, r6, r3
 801303a:	2601      	movs	r6, #1
 801303c:	4333      	orrs	r3, r6
 801303e:	6053      	str	r3, [r2, #4]
 8013040:	686b      	ldr	r3, [r5, #4]
 8013042:	401e      	ands	r6, r3
 8013044:	9b01      	ldr	r3, [sp, #4]
 8013046:	431e      	orrs	r6, r3
 8013048:	606e      	str	r6, [r5, #4]
 801304a:	9803      	ldr	r0, [sp, #12]
 801304c:	f7ff ff08 	bl	8012e60 <__malloc_unlock>
 8013050:	e73c      	b.n	8012ecc <_realloc_r+0x14>
 8013052:	68a3      	ldr	r3, [r4, #8]
 8013054:	612b      	str	r3, [r5, #16]
 8013056:	68e3      	ldr	r3, [r4, #12]
 8013058:	616b      	str	r3, [r5, #20]
 801305a:	2a24      	cmp	r2, #36	; 0x24
 801305c:	d003      	beq.n	8013066 <_realloc_r+0x1ae>
 801305e:	002b      	movs	r3, r5
 8013060:	3410      	adds	r4, #16
 8013062:	3318      	adds	r3, #24
 8013064:	e7dd      	b.n	8013022 <_realloc_r+0x16a>
 8013066:	6923      	ldr	r3, [r4, #16]
 8013068:	61ab      	str	r3, [r5, #24]
 801306a:	002b      	movs	r3, r5
 801306c:	6962      	ldr	r2, [r4, #20]
 801306e:	3320      	adds	r3, #32
 8013070:	61ea      	str	r2, [r5, #28]
 8013072:	3418      	adds	r4, #24
 8013074:	e7d5      	b.n	8013022 <_realloc_r+0x16a>
 8013076:	0021      	movs	r1, r4
 8013078:	0038      	movs	r0, r7
 801307a:	f003 fdac 	bl	8016bd6 <memmove>
 801307e:	e7d6      	b.n	801302e <_realloc_r+0x176>
 8013080:	9a01      	ldr	r2, [sp, #4]
 8013082:	42b2      	cmp	r2, r6
 8013084:	dc35      	bgt.n	80130f2 <_realloc_r+0x23a>
 8013086:	0028      	movs	r0, r5
 8013088:	68da      	ldr	r2, [r3, #12]
 801308a:	689b      	ldr	r3, [r3, #8]
 801308c:	3008      	adds	r0, #8
 801308e:	60da      	str	r2, [r3, #12]
 8013090:	6093      	str	r3, [r2, #8]
 8013092:	68aa      	ldr	r2, [r5, #8]
 8013094:	68eb      	ldr	r3, [r5, #12]
 8013096:	60d3      	str	r3, [r2, #12]
 8013098:	609a      	str	r2, [r3, #8]
 801309a:	9a04      	ldr	r2, [sp, #16]
 801309c:	3a04      	subs	r2, #4
 801309e:	2a24      	cmp	r2, #36	; 0x24
 80130a0:	d823      	bhi.n	80130ea <_realloc_r+0x232>
 80130a2:	2a13      	cmp	r2, #19
 80130a4:	d907      	bls.n	80130b6 <_realloc_r+0x1fe>
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	60ab      	str	r3, [r5, #8]
 80130aa:	6863      	ldr	r3, [r4, #4]
 80130ac:	60eb      	str	r3, [r5, #12]
 80130ae:	2a1b      	cmp	r2, #27
 80130b0:	d809      	bhi.n	80130c6 <_realloc_r+0x20e>
 80130b2:	3408      	adds	r4, #8
 80130b4:	3008      	adds	r0, #8
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	6003      	str	r3, [r0, #0]
 80130ba:	6863      	ldr	r3, [r4, #4]
 80130bc:	6043      	str	r3, [r0, #4]
 80130be:	68a3      	ldr	r3, [r4, #8]
 80130c0:	6083      	str	r3, [r0, #8]
 80130c2:	9502      	str	r5, [sp, #8]
 80130c4:	e75c      	b.n	8012f80 <_realloc_r+0xc8>
 80130c6:	68a3      	ldr	r3, [r4, #8]
 80130c8:	612b      	str	r3, [r5, #16]
 80130ca:	68e3      	ldr	r3, [r4, #12]
 80130cc:	616b      	str	r3, [r5, #20]
 80130ce:	2a24      	cmp	r2, #36	; 0x24
 80130d0:	d003      	beq.n	80130da <_realloc_r+0x222>
 80130d2:	0028      	movs	r0, r5
 80130d4:	3410      	adds	r4, #16
 80130d6:	3018      	adds	r0, #24
 80130d8:	e7ed      	b.n	80130b6 <_realloc_r+0x1fe>
 80130da:	0028      	movs	r0, r5
 80130dc:	6923      	ldr	r3, [r4, #16]
 80130de:	3020      	adds	r0, #32
 80130e0:	61ab      	str	r3, [r5, #24]
 80130e2:	6963      	ldr	r3, [r4, #20]
 80130e4:	3418      	adds	r4, #24
 80130e6:	61eb      	str	r3, [r5, #28]
 80130e8:	e7e5      	b.n	80130b6 <_realloc_r+0x1fe>
 80130ea:	0021      	movs	r1, r4
 80130ec:	f003 fd73 	bl	8016bd6 <memmove>
 80130f0:	e7e7      	b.n	80130c2 <_realloc_r+0x20a>
 80130f2:	9b01      	ldr	r3, [sp, #4]
 80130f4:	42bb      	cmp	r3, r7
 80130f6:	dc31      	bgt.n	801315c <_realloc_r+0x2a4>
 80130f8:	0028      	movs	r0, r5
 80130fa:	68aa      	ldr	r2, [r5, #8]
 80130fc:	68eb      	ldr	r3, [r5, #12]
 80130fe:	3008      	adds	r0, #8
 8013100:	60d3      	str	r3, [r2, #12]
 8013102:	609a      	str	r2, [r3, #8]
 8013104:	9a04      	ldr	r2, [sp, #16]
 8013106:	3a04      	subs	r2, #4
 8013108:	2a24      	cmp	r2, #36	; 0x24
 801310a:	d823      	bhi.n	8013154 <_realloc_r+0x29c>
 801310c:	2a13      	cmp	r2, #19
 801310e:	d907      	bls.n	8013120 <_realloc_r+0x268>
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	60ab      	str	r3, [r5, #8]
 8013114:	6863      	ldr	r3, [r4, #4]
 8013116:	60eb      	str	r3, [r5, #12]
 8013118:	2a1b      	cmp	r2, #27
 801311a:	d809      	bhi.n	8013130 <_realloc_r+0x278>
 801311c:	3408      	adds	r4, #8
 801311e:	3008      	adds	r0, #8
 8013120:	6823      	ldr	r3, [r4, #0]
 8013122:	6003      	str	r3, [r0, #0]
 8013124:	6863      	ldr	r3, [r4, #4]
 8013126:	6043      	str	r3, [r0, #4]
 8013128:	68a3      	ldr	r3, [r4, #8]
 801312a:	6083      	str	r3, [r0, #8]
 801312c:	003e      	movs	r6, r7
 801312e:	e7c8      	b.n	80130c2 <_realloc_r+0x20a>
 8013130:	68a3      	ldr	r3, [r4, #8]
 8013132:	612b      	str	r3, [r5, #16]
 8013134:	68e3      	ldr	r3, [r4, #12]
 8013136:	616b      	str	r3, [r5, #20]
 8013138:	2a24      	cmp	r2, #36	; 0x24
 801313a:	d003      	beq.n	8013144 <_realloc_r+0x28c>
 801313c:	0028      	movs	r0, r5
 801313e:	3410      	adds	r4, #16
 8013140:	3018      	adds	r0, #24
 8013142:	e7ed      	b.n	8013120 <_realloc_r+0x268>
 8013144:	0028      	movs	r0, r5
 8013146:	6923      	ldr	r3, [r4, #16]
 8013148:	3020      	adds	r0, #32
 801314a:	61ab      	str	r3, [r5, #24]
 801314c:	6963      	ldr	r3, [r4, #20]
 801314e:	3418      	adds	r4, #24
 8013150:	61eb      	str	r3, [r5, #28]
 8013152:	e7e5      	b.n	8013120 <_realloc_r+0x268>
 8013154:	0021      	movs	r1, r4
 8013156:	f003 fd3e 	bl	8016bd6 <memmove>
 801315a:	e7e7      	b.n	801312c <_realloc_r+0x274>
 801315c:	9905      	ldr	r1, [sp, #20]
 801315e:	9803      	ldr	r0, [sp, #12]
 8013160:	f7ff fc2c 	bl	80129bc <_malloc_r>
 8013164:	1e07      	subs	r7, r0, #0
 8013166:	d100      	bne.n	801316a <_realloc_r+0x2b2>
 8013168:	e76f      	b.n	801304a <_realloc_r+0x192>
 801316a:	0023      	movs	r3, r4
 801316c:	2201      	movs	r2, #1
 801316e:	3b08      	subs	r3, #8
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	4393      	bics	r3, r2
 8013174:	9a02      	ldr	r2, [sp, #8]
 8013176:	18d3      	adds	r3, r2, r3
 8013178:	0002      	movs	r2, r0
 801317a:	3a08      	subs	r2, #8
 801317c:	4293      	cmp	r3, r2
 801317e:	d105      	bne.n	801318c <_realloc_r+0x2d4>
 8013180:	685e      	ldr	r6, [r3, #4]
 8013182:	2303      	movs	r3, #3
 8013184:	439e      	bics	r6, r3
 8013186:	9b04      	ldr	r3, [sp, #16]
 8013188:	18f6      	adds	r6, r6, r3
 801318a:	e6f9      	b.n	8012f80 <_realloc_r+0xc8>
 801318c:	9a04      	ldr	r2, [sp, #16]
 801318e:	3a04      	subs	r2, #4
 8013190:	2a24      	cmp	r2, #36	; 0x24
 8013192:	d82d      	bhi.n	80131f0 <_realloc_r+0x338>
 8013194:	2a13      	cmp	r2, #19
 8013196:	d928      	bls.n	80131ea <_realloc_r+0x332>
 8013198:	6823      	ldr	r3, [r4, #0]
 801319a:	6003      	str	r3, [r0, #0]
 801319c:	6863      	ldr	r3, [r4, #4]
 801319e:	6043      	str	r3, [r0, #4]
 80131a0:	2a1b      	cmp	r2, #27
 80131a2:	d80e      	bhi.n	80131c2 <_realloc_r+0x30a>
 80131a4:	0022      	movs	r2, r4
 80131a6:	0003      	movs	r3, r0
 80131a8:	3208      	adds	r2, #8
 80131aa:	3308      	adds	r3, #8
 80131ac:	6811      	ldr	r1, [r2, #0]
 80131ae:	6019      	str	r1, [r3, #0]
 80131b0:	6851      	ldr	r1, [r2, #4]
 80131b2:	6059      	str	r1, [r3, #4]
 80131b4:	6892      	ldr	r2, [r2, #8]
 80131b6:	609a      	str	r2, [r3, #8]
 80131b8:	0021      	movs	r1, r4
 80131ba:	9803      	ldr	r0, [sp, #12]
 80131bc:	f003 f90a 	bl	80163d4 <_free_r>
 80131c0:	e743      	b.n	801304a <_realloc_r+0x192>
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	6083      	str	r3, [r0, #8]
 80131c6:	68e3      	ldr	r3, [r4, #12]
 80131c8:	60c3      	str	r3, [r0, #12]
 80131ca:	2a24      	cmp	r2, #36	; 0x24
 80131cc:	d004      	beq.n	80131d8 <_realloc_r+0x320>
 80131ce:	0022      	movs	r2, r4
 80131d0:	0003      	movs	r3, r0
 80131d2:	3210      	adds	r2, #16
 80131d4:	3310      	adds	r3, #16
 80131d6:	e7e9      	b.n	80131ac <_realloc_r+0x2f4>
 80131d8:	6923      	ldr	r3, [r4, #16]
 80131da:	0022      	movs	r2, r4
 80131dc:	6103      	str	r3, [r0, #16]
 80131de:	0003      	movs	r3, r0
 80131e0:	6961      	ldr	r1, [r4, #20]
 80131e2:	3218      	adds	r2, #24
 80131e4:	3318      	adds	r3, #24
 80131e6:	6141      	str	r1, [r0, #20]
 80131e8:	e7e0      	b.n	80131ac <_realloc_r+0x2f4>
 80131ea:	0003      	movs	r3, r0
 80131ec:	0022      	movs	r2, r4
 80131ee:	e7dd      	b.n	80131ac <_realloc_r+0x2f4>
 80131f0:	0021      	movs	r1, r4
 80131f2:	f003 fcf0 	bl	8016bd6 <memmove>
 80131f6:	e7df      	b.n	80131b8 <_realloc_r+0x300>
 80131f8:	9e04      	ldr	r6, [sp, #16]
 80131fa:	e6c1      	b.n	8012f80 <_realloc_r+0xc8>
 80131fc:	9902      	ldr	r1, [sp, #8]
 80131fe:	4306      	orrs	r6, r0
 8013200:	604e      	str	r6, [r1, #4]
 8013202:	6851      	ldr	r1, [r2, #4]
 8013204:	430b      	orrs	r3, r1
 8013206:	6053      	str	r3, [r2, #4]
 8013208:	e6d6      	b.n	8012fb8 <_realloc_r+0x100>
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	20000644 	.word	0x20000644

08013210 <_sbrk_r>:
 8013210:	2300      	movs	r3, #0
 8013212:	b570      	push	{r4, r5, r6, lr}
 8013214:	4c06      	ldr	r4, [pc, #24]	; (8013230 <_sbrk_r+0x20>)
 8013216:	0005      	movs	r5, r0
 8013218:	0008      	movs	r0, r1
 801321a:	6023      	str	r3, [r4, #0]
 801321c:	f004 f9ec 	bl	80175f8 <_sbrk>
 8013220:	1c43      	adds	r3, r0, #1
 8013222:	d103      	bne.n	801322c <_sbrk_r+0x1c>
 8013224:	6823      	ldr	r3, [r4, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d000      	beq.n	801322c <_sbrk_r+0x1c>
 801322a:	602b      	str	r3, [r5, #0]
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	46c0      	nop			; (mov r8, r8)
 8013230:	20006d44 	.word	0x20006d44

08013234 <sprintf>:
 8013234:	b40e      	push	{r1, r2, r3}
 8013236:	b500      	push	{lr}
 8013238:	490b      	ldr	r1, [pc, #44]	; (8013268 <sprintf+0x34>)
 801323a:	b09c      	sub	sp, #112	; 0x70
 801323c:	ab1d      	add	r3, sp, #116	; 0x74
 801323e:	9002      	str	r0, [sp, #8]
 8013240:	9006      	str	r0, [sp, #24]
 8013242:	9107      	str	r1, [sp, #28]
 8013244:	9104      	str	r1, [sp, #16]
 8013246:	4809      	ldr	r0, [pc, #36]	; (801326c <sprintf+0x38>)
 8013248:	4909      	ldr	r1, [pc, #36]	; (8013270 <sprintf+0x3c>)
 801324a:	cb04      	ldmia	r3!, {r2}
 801324c:	9105      	str	r1, [sp, #20]
 801324e:	6800      	ldr	r0, [r0, #0]
 8013250:	a902      	add	r1, sp, #8
 8013252:	9301      	str	r3, [sp, #4]
 8013254:	f000 ff78 	bl	8014148 <_svfprintf_r>
 8013258:	2300      	movs	r3, #0
 801325a:	9a02      	ldr	r2, [sp, #8]
 801325c:	7013      	strb	r3, [r2, #0]
 801325e:	b01c      	add	sp, #112	; 0x70
 8013260:	bc08      	pop	{r3}
 8013262:	b003      	add	sp, #12
 8013264:	4718      	bx	r3
 8013266:	46c0      	nop			; (mov r8, r8)
 8013268:	7fffffff 	.word	0x7fffffff
 801326c:	200000ac 	.word	0x200000ac
 8013270:	ffff0208 	.word	0xffff0208

08013274 <strcat>:
 8013274:	0002      	movs	r2, r0
 8013276:	b510      	push	{r4, lr}
 8013278:	7813      	ldrb	r3, [r2, #0]
 801327a:	1c54      	adds	r4, r2, #1
 801327c:	2b00      	cmp	r3, #0
 801327e:	d105      	bne.n	801328c <strcat+0x18>
 8013280:	5ccc      	ldrb	r4, [r1, r3]
 8013282:	54d4      	strb	r4, [r2, r3]
 8013284:	3301      	adds	r3, #1
 8013286:	2c00      	cmp	r4, #0
 8013288:	d1fa      	bne.n	8013280 <strcat+0xc>
 801328a:	bd10      	pop	{r4, pc}
 801328c:	0022      	movs	r2, r4
 801328e:	e7f3      	b.n	8013278 <strcat+0x4>

08013290 <strchr>:
 8013290:	b2c9      	uxtb	r1, r1
 8013292:	7803      	ldrb	r3, [r0, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d004      	beq.n	80132a2 <strchr+0x12>
 8013298:	428b      	cmp	r3, r1
 801329a:	d100      	bne.n	801329e <strchr+0xe>
 801329c:	4770      	bx	lr
 801329e:	3001      	adds	r0, #1
 80132a0:	e7f7      	b.n	8013292 <strchr+0x2>
 80132a2:	424b      	negs	r3, r1
 80132a4:	4159      	adcs	r1, r3
 80132a6:	4249      	negs	r1, r1
 80132a8:	4008      	ands	r0, r1
 80132aa:	e7f7      	b.n	801329c <strchr+0xc>

080132ac <strcpy>:
 80132ac:	0003      	movs	r3, r0
 80132ae:	780a      	ldrb	r2, [r1, #0]
 80132b0:	3101      	adds	r1, #1
 80132b2:	701a      	strb	r2, [r3, #0]
 80132b4:	3301      	adds	r3, #1
 80132b6:	2a00      	cmp	r2, #0
 80132b8:	d1f9      	bne.n	80132ae <strcpy+0x2>
 80132ba:	4770      	bx	lr

080132bc <strncmp>:
 80132bc:	2300      	movs	r3, #0
 80132be:	b530      	push	{r4, r5, lr}
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d00a      	beq.n	80132da <strncmp+0x1e>
 80132c4:	3a01      	subs	r2, #1
 80132c6:	5cc4      	ldrb	r4, [r0, r3]
 80132c8:	5ccd      	ldrb	r5, [r1, r3]
 80132ca:	42ac      	cmp	r4, r5
 80132cc:	d104      	bne.n	80132d8 <strncmp+0x1c>
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d002      	beq.n	80132d8 <strncmp+0x1c>
 80132d2:	3301      	adds	r3, #1
 80132d4:	2c00      	cmp	r4, #0
 80132d6:	d1f6      	bne.n	80132c6 <strncmp+0xa>
 80132d8:	1b63      	subs	r3, r4, r5
 80132da:	0018      	movs	r0, r3
 80132dc:	bd30      	pop	{r4, r5, pc}

080132de <strncpy>:
 80132de:	b530      	push	{r4, r5, lr}
 80132e0:	0005      	movs	r5, r0
 80132e2:	2a00      	cmp	r2, #0
 80132e4:	d100      	bne.n	80132e8 <strncpy+0xa>
 80132e6:	bd30      	pop	{r4, r5, pc}
 80132e8:	780c      	ldrb	r4, [r1, #0]
 80132ea:	3a01      	subs	r2, #1
 80132ec:	1c6b      	adds	r3, r5, #1
 80132ee:	702c      	strb	r4, [r5, #0]
 80132f0:	3101      	adds	r1, #1
 80132f2:	2c00      	cmp	r4, #0
 80132f4:	d105      	bne.n	8013302 <strncpy+0x24>
 80132f6:	189a      	adds	r2, r3, r2
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d0f4      	beq.n	80132e6 <strncpy+0x8>
 80132fc:	701c      	strb	r4, [r3, #0]
 80132fe:	3301      	adds	r3, #1
 8013300:	e7fa      	b.n	80132f8 <strncpy+0x1a>
 8013302:	001d      	movs	r5, r3
 8013304:	e7ed      	b.n	80132e2 <strncpy+0x4>
	...

08013308 <sulp>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	0016      	movs	r6, r2
 801330c:	000d      	movs	r5, r1
 801330e:	f003 ff17 	bl	8017140 <__ulp>
 8013312:	2e00      	cmp	r6, #0
 8013314:	d00d      	beq.n	8013332 <sulp+0x2a>
 8013316:	236b      	movs	r3, #107	; 0x6b
 8013318:	006a      	lsls	r2, r5, #1
 801331a:	0d52      	lsrs	r2, r2, #21
 801331c:	1a9b      	subs	r3, r3, r2
 801331e:	2b00      	cmp	r3, #0
 8013320:	dd07      	ble.n	8013332 <sulp+0x2a>
 8013322:	2400      	movs	r4, #0
 8013324:	4a03      	ldr	r2, [pc, #12]	; (8013334 <sulp+0x2c>)
 8013326:	051b      	lsls	r3, r3, #20
 8013328:	189d      	adds	r5, r3, r2
 801332a:	002b      	movs	r3, r5
 801332c:	0022      	movs	r2, r4
 801332e:	f7ee feb7 	bl	80020a0 <__aeabi_dmul>
 8013332:	bd70      	pop	{r4, r5, r6, pc}
 8013334:	3ff00000 	.word	0x3ff00000

08013338 <_strtod_l>:
 8013338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801333a:	b0a7      	sub	sp, #156	; 0x9c
 801333c:	9307      	str	r3, [sp, #28]
 801333e:	2300      	movs	r3, #0
 8013340:	9004      	str	r0, [sp, #16]
 8013342:	9807      	ldr	r0, [sp, #28]
 8013344:	9322      	str	r3, [sp, #136]	; 0x88
 8013346:	9106      	str	r1, [sp, #24]
 8013348:	921d      	str	r2, [sp, #116]	; 0x74
 801334a:	f003 fc28 	bl	8016b9e <__localeconv_l>
 801334e:	0005      	movs	r5, r0
 8013350:	6800      	ldr	r0, [r0, #0]
 8013352:	f7ec fee1 	bl	8000118 <strlen>
 8013356:	2600      	movs	r6, #0
 8013358:	2700      	movs	r7, #0
 801335a:	9b06      	ldr	r3, [sp, #24]
 801335c:	9005      	str	r0, [sp, #20]
 801335e:	9321      	str	r3, [sp, #132]	; 0x84
 8013360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013362:	781a      	ldrb	r2, [r3, #0]
 8013364:	2a0d      	cmp	r2, #13
 8013366:	d839      	bhi.n	80133dc <_strtod_l+0xa4>
 8013368:	2a09      	cmp	r2, #9
 801336a:	d23d      	bcs.n	80133e8 <_strtod_l+0xb0>
 801336c:	2a00      	cmp	r2, #0
 801336e:	d044      	beq.n	80133fa <_strtod_l+0xc2>
 8013370:	2300      	movs	r3, #0
 8013372:	9313      	str	r3, [sp, #76]	; 0x4c
 8013374:	2200      	movs	r2, #0
 8013376:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013378:	920c      	str	r2, [sp, #48]	; 0x30
 801337a:	7823      	ldrb	r3, [r4, #0]
 801337c:	2b30      	cmp	r3, #48	; 0x30
 801337e:	d000      	beq.n	8013382 <_strtod_l+0x4a>
 8013380:	e07e      	b.n	8013480 <_strtod_l+0x148>
 8013382:	7863      	ldrb	r3, [r4, #1]
 8013384:	2b58      	cmp	r3, #88	; 0x58
 8013386:	d002      	beq.n	801338e <_strtod_l+0x56>
 8013388:	2b78      	cmp	r3, #120	; 0x78
 801338a:	d000      	beq.n	801338e <_strtod_l+0x56>
 801338c:	e06e      	b.n	801346c <_strtod_l+0x134>
 801338e:	9b07      	ldr	r3, [sp, #28]
 8013390:	4a96      	ldr	r2, [pc, #600]	; (80135ec <_strtod_l+0x2b4>)
 8013392:	9302      	str	r3, [sp, #8]
 8013394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013396:	a921      	add	r1, sp, #132	; 0x84
 8013398:	9301      	str	r3, [sp, #4]
 801339a:	ab22      	add	r3, sp, #136	; 0x88
 801339c:	9300      	str	r3, [sp, #0]
 801339e:	9804      	ldr	r0, [sp, #16]
 80133a0:	ab23      	add	r3, sp, #140	; 0x8c
 80133a2:	f003 f914 	bl	80165ce <__gethex>
 80133a6:	2507      	movs	r5, #7
 80133a8:	9005      	str	r0, [sp, #20]
 80133aa:	4005      	ands	r5, r0
 80133ac:	d005      	beq.n	80133ba <_strtod_l+0x82>
 80133ae:	2d06      	cmp	r5, #6
 80133b0:	d12f      	bne.n	8013412 <_strtod_l+0xda>
 80133b2:	2300      	movs	r3, #0
 80133b4:	3401      	adds	r4, #1
 80133b6:	9421      	str	r4, [sp, #132]	; 0x84
 80133b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80133ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d002      	beq.n	80133c6 <_strtod_l+0x8e>
 80133c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d01d      	beq.n	8013408 <_strtod_l+0xd0>
 80133cc:	2380      	movs	r3, #128	; 0x80
 80133ce:	0032      	movs	r2, r6
 80133d0:	061b      	lsls	r3, r3, #24
 80133d2:	18fb      	adds	r3, r7, r3
 80133d4:	0010      	movs	r0, r2
 80133d6:	0019      	movs	r1, r3
 80133d8:	b027      	add	sp, #156	; 0x9c
 80133da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133dc:	2a2b      	cmp	r2, #43	; 0x2b
 80133de:	d016      	beq.n	801340e <_strtod_l+0xd6>
 80133e0:	2a2d      	cmp	r2, #45	; 0x2d
 80133e2:	d003      	beq.n	80133ec <_strtod_l+0xb4>
 80133e4:	2a20      	cmp	r2, #32
 80133e6:	d1c3      	bne.n	8013370 <_strtod_l+0x38>
 80133e8:	3301      	adds	r3, #1
 80133ea:	e7b8      	b.n	801335e <_strtod_l+0x26>
 80133ec:	2201      	movs	r2, #1
 80133ee:	9213      	str	r2, [sp, #76]	; 0x4c
 80133f0:	1c5a      	adds	r2, r3, #1
 80133f2:	9221      	str	r2, [sp, #132]	; 0x84
 80133f4:	785b      	ldrb	r3, [r3, #1]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1bc      	bne.n	8013374 <_strtod_l+0x3c>
 80133fa:	9b06      	ldr	r3, [sp, #24]
 80133fc:	9321      	str	r3, [sp, #132]	; 0x84
 80133fe:	2300      	movs	r3, #0
 8013400:	9313      	str	r3, [sp, #76]	; 0x4c
 8013402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1db      	bne.n	80133c0 <_strtod_l+0x88>
 8013408:	0032      	movs	r2, r6
 801340a:	003b      	movs	r3, r7
 801340c:	e7e2      	b.n	80133d4 <_strtod_l+0x9c>
 801340e:	2200      	movs	r2, #0
 8013410:	e7ed      	b.n	80133ee <_strtod_l+0xb6>
 8013412:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013414:	2a00      	cmp	r2, #0
 8013416:	d007      	beq.n	8013428 <_strtod_l+0xf0>
 8013418:	2135      	movs	r1, #53	; 0x35
 801341a:	a824      	add	r0, sp, #144	; 0x90
 801341c:	f003 ff7d 	bl	801731a <__copybits>
 8013420:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013422:	9804      	ldr	r0, [sp, #16]
 8013424:	f003 fc12 	bl	8016c4c <_Bfree>
 8013428:	1e68      	subs	r0, r5, #1
 801342a:	2804      	cmp	r0, #4
 801342c:	d806      	bhi.n	801343c <_strtod_l+0x104>
 801342e:	f7ec fe7b 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013432:	030c      	.short	0x030c
 8013434:	1917      	.short	0x1917
 8013436:	0c          	.byte	0x0c
 8013437:	00          	.byte	0x00
 8013438:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801343a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801343c:	9b05      	ldr	r3, [sp, #20]
 801343e:	071b      	lsls	r3, r3, #28
 8013440:	d5bb      	bpl.n	80133ba <_strtod_l+0x82>
 8013442:	2380      	movs	r3, #128	; 0x80
 8013444:	061b      	lsls	r3, r3, #24
 8013446:	431f      	orrs	r7, r3
 8013448:	e7b7      	b.n	80133ba <_strtod_l+0x82>
 801344a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801344c:	4a68      	ldr	r2, [pc, #416]	; (80135f0 <_strtod_l+0x2b8>)
 801344e:	4969      	ldr	r1, [pc, #420]	; (80135f4 <_strtod_l+0x2bc>)
 8013450:	401a      	ands	r2, r3
 8013452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013454:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013456:	185b      	adds	r3, r3, r1
 8013458:	051b      	lsls	r3, r3, #20
 801345a:	431a      	orrs	r2, r3
 801345c:	0017      	movs	r7, r2
 801345e:	e7ed      	b.n	801343c <_strtod_l+0x104>
 8013460:	4f65      	ldr	r7, [pc, #404]	; (80135f8 <_strtod_l+0x2c0>)
 8013462:	e7eb      	b.n	801343c <_strtod_l+0x104>
 8013464:	2601      	movs	r6, #1
 8013466:	4f65      	ldr	r7, [pc, #404]	; (80135fc <_strtod_l+0x2c4>)
 8013468:	4276      	negs	r6, r6
 801346a:	e7e7      	b.n	801343c <_strtod_l+0x104>
 801346c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	9221      	str	r2, [sp, #132]	; 0x84
 8013472:	785b      	ldrb	r3, [r3, #1]
 8013474:	2b30      	cmp	r3, #48	; 0x30
 8013476:	d0f9      	beq.n	801346c <_strtod_l+0x134>
 8013478:	2b00      	cmp	r3, #0
 801347a:	d09e      	beq.n	80133ba <_strtod_l+0x82>
 801347c:	2301      	movs	r3, #1
 801347e:	930c      	str	r3, [sp, #48]	; 0x30
 8013480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013482:	220a      	movs	r2, #10
 8013484:	9312      	str	r3, [sp, #72]	; 0x48
 8013486:	2300      	movs	r3, #0
 8013488:	930b      	str	r3, [sp, #44]	; 0x2c
 801348a:	9308      	str	r3, [sp, #32]
 801348c:	930a      	str	r3, [sp, #40]	; 0x28
 801348e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013490:	7804      	ldrb	r4, [r0, #0]
 8013492:	0023      	movs	r3, r4
 8013494:	3b30      	subs	r3, #48	; 0x30
 8013496:	b2d9      	uxtb	r1, r3
 8013498:	2909      	cmp	r1, #9
 801349a:	d934      	bls.n	8013506 <_strtod_l+0x1ce>
 801349c:	9a05      	ldr	r2, [sp, #20]
 801349e:	6829      	ldr	r1, [r5, #0]
 80134a0:	f7ff ff0c 	bl	80132bc <strncmp>
 80134a4:	2800      	cmp	r0, #0
 80134a6:	d040      	beq.n	801352a <_strtod_l+0x1f2>
 80134a8:	2000      	movs	r0, #0
 80134aa:	0023      	movs	r3, r4
 80134ac:	4684      	mov	ip, r0
 80134ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134b0:	9007      	str	r0, [sp, #28]
 80134b2:	9205      	str	r2, [sp, #20]
 80134b4:	2220      	movs	r2, #32
 80134b6:	0019      	movs	r1, r3
 80134b8:	4391      	bics	r1, r2
 80134ba:	000a      	movs	r2, r1
 80134bc:	2100      	movs	r1, #0
 80134be:	2a45      	cmp	r2, #69	; 0x45
 80134c0:	d000      	beq.n	80134c4 <_strtod_l+0x18c>
 80134c2:	e0bf      	b.n	8013644 <_strtod_l+0x30c>
 80134c4:	9b05      	ldr	r3, [sp, #20]
 80134c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134c8:	4303      	orrs	r3, r0
 80134ca:	4313      	orrs	r3, r2
 80134cc:	428b      	cmp	r3, r1
 80134ce:	d094      	beq.n	80133fa <_strtod_l+0xc2>
 80134d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134d2:	9306      	str	r3, [sp, #24]
 80134d4:	3301      	adds	r3, #1
 80134d6:	9321      	str	r3, [sp, #132]	; 0x84
 80134d8:	9b06      	ldr	r3, [sp, #24]
 80134da:	785b      	ldrb	r3, [r3, #1]
 80134dc:	2b2b      	cmp	r3, #43	; 0x2b
 80134de:	d100      	bne.n	80134e2 <_strtod_l+0x1aa>
 80134e0:	e082      	b.n	80135e8 <_strtod_l+0x2b0>
 80134e2:	000c      	movs	r4, r1
 80134e4:	2b2d      	cmp	r3, #45	; 0x2d
 80134e6:	d105      	bne.n	80134f4 <_strtod_l+0x1bc>
 80134e8:	2401      	movs	r4, #1
 80134ea:	9b06      	ldr	r3, [sp, #24]
 80134ec:	3302      	adds	r3, #2
 80134ee:	9321      	str	r3, [sp, #132]	; 0x84
 80134f0:	9b06      	ldr	r3, [sp, #24]
 80134f2:	789b      	ldrb	r3, [r3, #2]
 80134f4:	001a      	movs	r2, r3
 80134f6:	3a30      	subs	r2, #48	; 0x30
 80134f8:	2a09      	cmp	r2, #9
 80134fa:	d800      	bhi.n	80134fe <_strtod_l+0x1c6>
 80134fc:	e084      	b.n	8013608 <_strtod_l+0x2d0>
 80134fe:	9a06      	ldr	r2, [sp, #24]
 8013500:	2100      	movs	r1, #0
 8013502:	9221      	str	r2, [sp, #132]	; 0x84
 8013504:	e09e      	b.n	8013644 <_strtod_l+0x30c>
 8013506:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013508:	2908      	cmp	r1, #8
 801350a:	dc09      	bgt.n	8013520 <_strtod_l+0x1e8>
 801350c:	9908      	ldr	r1, [sp, #32]
 801350e:	4351      	muls	r1, r2
 8013510:	18cb      	adds	r3, r1, r3
 8013512:	9308      	str	r3, [sp, #32]
 8013514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013516:	3001      	adds	r0, #1
 8013518:	3301      	adds	r3, #1
 801351a:	930a      	str	r3, [sp, #40]	; 0x28
 801351c:	9021      	str	r0, [sp, #132]	; 0x84
 801351e:	e7b6      	b.n	801348e <_strtod_l+0x156>
 8013520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013522:	4351      	muls	r1, r2
 8013524:	18cb      	adds	r3, r1, r3
 8013526:	930b      	str	r3, [sp, #44]	; 0x2c
 8013528:	e7f4      	b.n	8013514 <_strtod_l+0x1dc>
 801352a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801352c:	9b05      	ldr	r3, [sp, #20]
 801352e:	4694      	mov	ip, r2
 8013530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013532:	4463      	add	r3, ip
 8013534:	9321      	str	r3, [sp, #132]	; 0x84
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	2a00      	cmp	r2, #0
 801353a:	d036      	beq.n	80135aa <_strtod_l+0x272>
 801353c:	4684      	mov	ip, r0
 801353e:	9205      	str	r2, [sp, #20]
 8013540:	001a      	movs	r2, r3
 8013542:	3a30      	subs	r2, #48	; 0x30
 8013544:	2a09      	cmp	r2, #9
 8013546:	d912      	bls.n	801356e <_strtod_l+0x236>
 8013548:	2201      	movs	r2, #1
 801354a:	9207      	str	r2, [sp, #28]
 801354c:	e7b2      	b.n	80134b4 <_strtod_l+0x17c>
 801354e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013550:	3001      	adds	r0, #1
 8013552:	1c5a      	adds	r2, r3, #1
 8013554:	9221      	str	r2, [sp, #132]	; 0x84
 8013556:	785b      	ldrb	r3, [r3, #1]
 8013558:	2b30      	cmp	r3, #48	; 0x30
 801355a:	d0f8      	beq.n	801354e <_strtod_l+0x216>
 801355c:	001a      	movs	r2, r3
 801355e:	3a31      	subs	r2, #49	; 0x31
 8013560:	2a08      	cmp	r2, #8
 8013562:	d83c      	bhi.n	80135de <_strtod_l+0x2a6>
 8013564:	4684      	mov	ip, r0
 8013566:	2000      	movs	r0, #0
 8013568:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801356a:	9005      	str	r0, [sp, #20]
 801356c:	9212      	str	r2, [sp, #72]	; 0x48
 801356e:	3b30      	subs	r3, #48	; 0x30
 8013570:	1c42      	adds	r2, r0, #1
 8013572:	2b00      	cmp	r3, #0
 8013574:	d013      	beq.n	801359e <_strtod_l+0x266>
 8013576:	210a      	movs	r1, #10
 8013578:	4494      	add	ip, r2
 801357a:	9a05      	ldr	r2, [sp, #20]
 801357c:	1885      	adds	r5, r0, r2
 801357e:	42aa      	cmp	r2, r5
 8013580:	d115      	bne.n	80135ae <_strtod_l+0x276>
 8013582:	9905      	ldr	r1, [sp, #20]
 8013584:	9a05      	ldr	r2, [sp, #20]
 8013586:	3101      	adds	r1, #1
 8013588:	1809      	adds	r1, r1, r0
 801358a:	1812      	adds	r2, r2, r0
 801358c:	9105      	str	r1, [sp, #20]
 801358e:	2a08      	cmp	r2, #8
 8013590:	dc1b      	bgt.n	80135ca <_strtod_l+0x292>
 8013592:	220a      	movs	r2, #10
 8013594:	9908      	ldr	r1, [sp, #32]
 8013596:	434a      	muls	r2, r1
 8013598:	189b      	adds	r3, r3, r2
 801359a:	2200      	movs	r2, #0
 801359c:	9308      	str	r3, [sp, #32]
 801359e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135a0:	0010      	movs	r0, r2
 80135a2:	1c59      	adds	r1, r3, #1
 80135a4:	9121      	str	r1, [sp, #132]	; 0x84
 80135a6:	785b      	ldrb	r3, [r3, #1]
 80135a8:	e7ca      	b.n	8013540 <_strtod_l+0x208>
 80135aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80135ac:	e7d4      	b.n	8013558 <_strtod_l+0x220>
 80135ae:	1c54      	adds	r4, r2, #1
 80135b0:	2a08      	cmp	r2, #8
 80135b2:	dc04      	bgt.n	80135be <_strtod_l+0x286>
 80135b4:	9a08      	ldr	r2, [sp, #32]
 80135b6:	434a      	muls	r2, r1
 80135b8:	9208      	str	r2, [sp, #32]
 80135ba:	0022      	movs	r2, r4
 80135bc:	e7df      	b.n	801357e <_strtod_l+0x246>
 80135be:	2c10      	cmp	r4, #16
 80135c0:	dcfb      	bgt.n	80135ba <_strtod_l+0x282>
 80135c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135c4:	434a      	muls	r2, r1
 80135c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80135c8:	e7f7      	b.n	80135ba <_strtod_l+0x282>
 80135ca:	9905      	ldr	r1, [sp, #20]
 80135cc:	2200      	movs	r2, #0
 80135ce:	2910      	cmp	r1, #16
 80135d0:	dce5      	bgt.n	801359e <_strtod_l+0x266>
 80135d2:	210a      	movs	r1, #10
 80135d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80135d6:	4341      	muls	r1, r0
 80135d8:	185b      	adds	r3, r3, r1
 80135da:	930b      	str	r3, [sp, #44]	; 0x2c
 80135dc:	e7df      	b.n	801359e <_strtod_l+0x266>
 80135de:	2200      	movs	r2, #0
 80135e0:	4694      	mov	ip, r2
 80135e2:	9205      	str	r2, [sp, #20]
 80135e4:	3201      	adds	r2, #1
 80135e6:	e7b0      	b.n	801354a <_strtod_l+0x212>
 80135e8:	000c      	movs	r4, r1
 80135ea:	e77e      	b.n	80134ea <_strtod_l+0x1b2>
 80135ec:	0801a564 	.word	0x0801a564
 80135f0:	ffefffff 	.word	0xffefffff
 80135f4:	00000433 	.word	0x00000433
 80135f8:	7ff00000 	.word	0x7ff00000
 80135fc:	7fffffff 	.word	0x7fffffff
 8013600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	9221      	str	r2, [sp, #132]	; 0x84
 8013606:	785b      	ldrb	r3, [r3, #1]
 8013608:	2b30      	cmp	r3, #48	; 0x30
 801360a:	d0f9      	beq.n	8013600 <_strtod_l+0x2c8>
 801360c:	001a      	movs	r2, r3
 801360e:	3a31      	subs	r2, #49	; 0x31
 8013610:	2100      	movs	r1, #0
 8013612:	2a08      	cmp	r2, #8
 8013614:	d816      	bhi.n	8013644 <_strtod_l+0x30c>
 8013616:	3b30      	subs	r3, #48	; 0x30
 8013618:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801361a:	930e      	str	r3, [sp, #56]	; 0x38
 801361c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801361e:	1c59      	adds	r1, r3, #1
 8013620:	9121      	str	r1, [sp, #132]	; 0x84
 8013622:	785b      	ldrb	r3, [r3, #1]
 8013624:	001a      	movs	r2, r3
 8013626:	3a30      	subs	r2, #48	; 0x30
 8013628:	2a09      	cmp	r2, #9
 801362a:	d932      	bls.n	8013692 <_strtod_l+0x35a>
 801362c:	1b4a      	subs	r2, r1, r5
 801362e:	4dad      	ldr	r5, [pc, #692]	; (80138e4 <_strtod_l+0x5ac>)
 8013630:	0029      	movs	r1, r5
 8013632:	2a08      	cmp	r2, #8
 8013634:	dc03      	bgt.n	801363e <_strtod_l+0x306>
 8013636:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013638:	42a9      	cmp	r1, r5
 801363a:	dd00      	ble.n	801363e <_strtod_l+0x306>
 801363c:	0029      	movs	r1, r5
 801363e:	2c00      	cmp	r4, #0
 8013640:	d000      	beq.n	8013644 <_strtod_l+0x30c>
 8013642:	4249      	negs	r1, r1
 8013644:	9a05      	ldr	r2, [sp, #20]
 8013646:	2a00      	cmp	r2, #0
 8013648:	d149      	bne.n	80136de <_strtod_l+0x3a6>
 801364a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801364c:	4310      	orrs	r0, r2
 801364e:	d000      	beq.n	8013652 <_strtod_l+0x31a>
 8013650:	e6b3      	b.n	80133ba <_strtod_l+0x82>
 8013652:	9a07      	ldr	r2, [sp, #28]
 8013654:	2a00      	cmp	r2, #0
 8013656:	d000      	beq.n	801365a <_strtod_l+0x322>
 8013658:	e6cf      	b.n	80133fa <_strtod_l+0xc2>
 801365a:	2b4e      	cmp	r3, #78	; 0x4e
 801365c:	d025      	beq.n	80136aa <_strtod_l+0x372>
 801365e:	dc1f      	bgt.n	80136a0 <_strtod_l+0x368>
 8013660:	2b49      	cmp	r3, #73	; 0x49
 8013662:	d000      	beq.n	8013666 <_strtod_l+0x32e>
 8013664:	e6c9      	b.n	80133fa <_strtod_l+0xc2>
 8013666:	49a0      	ldr	r1, [pc, #640]	; (80138e8 <_strtod_l+0x5b0>)
 8013668:	a821      	add	r0, sp, #132	; 0x84
 801366a:	f003 f9ed 	bl	8016a48 <__match>
 801366e:	2800      	cmp	r0, #0
 8013670:	d100      	bne.n	8013674 <_strtod_l+0x33c>
 8013672:	e6c2      	b.n	80133fa <_strtod_l+0xc2>
 8013674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013676:	499d      	ldr	r1, [pc, #628]	; (80138ec <_strtod_l+0x5b4>)
 8013678:	3b01      	subs	r3, #1
 801367a:	a821      	add	r0, sp, #132	; 0x84
 801367c:	9321      	str	r3, [sp, #132]	; 0x84
 801367e:	f003 f9e3 	bl	8016a48 <__match>
 8013682:	2800      	cmp	r0, #0
 8013684:	d102      	bne.n	801368c <_strtod_l+0x354>
 8013686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013688:	3301      	adds	r3, #1
 801368a:	9321      	str	r3, [sp, #132]	; 0x84
 801368c:	4f98      	ldr	r7, [pc, #608]	; (80138f0 <_strtod_l+0x5b8>)
 801368e:	2600      	movs	r6, #0
 8013690:	e693      	b.n	80133ba <_strtod_l+0x82>
 8013692:	220a      	movs	r2, #10
 8013694:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013696:	434a      	muls	r2, r1
 8013698:	18d2      	adds	r2, r2, r3
 801369a:	3a30      	subs	r2, #48	; 0x30
 801369c:	920e      	str	r2, [sp, #56]	; 0x38
 801369e:	e7bd      	b.n	801361c <_strtod_l+0x2e4>
 80136a0:	2b69      	cmp	r3, #105	; 0x69
 80136a2:	d0e0      	beq.n	8013666 <_strtod_l+0x32e>
 80136a4:	2b6e      	cmp	r3, #110	; 0x6e
 80136a6:	d000      	beq.n	80136aa <_strtod_l+0x372>
 80136a8:	e6a7      	b.n	80133fa <_strtod_l+0xc2>
 80136aa:	4992      	ldr	r1, [pc, #584]	; (80138f4 <_strtod_l+0x5bc>)
 80136ac:	a821      	add	r0, sp, #132	; 0x84
 80136ae:	f003 f9cb 	bl	8016a48 <__match>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d100      	bne.n	80136b8 <_strtod_l+0x380>
 80136b6:	e6a0      	b.n	80133fa <_strtod_l+0xc2>
 80136b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b28      	cmp	r3, #40	; 0x28
 80136be:	d10c      	bne.n	80136da <_strtod_l+0x3a2>
 80136c0:	aa24      	add	r2, sp, #144	; 0x90
 80136c2:	498d      	ldr	r1, [pc, #564]	; (80138f8 <_strtod_l+0x5c0>)
 80136c4:	a821      	add	r0, sp, #132	; 0x84
 80136c6:	f003 f9d3 	bl	8016a70 <__hexnan>
 80136ca:	2805      	cmp	r0, #5
 80136cc:	d105      	bne.n	80136da <_strtod_l+0x3a2>
 80136ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80136d0:	4a87      	ldr	r2, [pc, #540]	; (80138f0 <_strtod_l+0x5b8>)
 80136d2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80136d4:	431a      	orrs	r2, r3
 80136d6:	0017      	movs	r7, r2
 80136d8:	e66f      	b.n	80133ba <_strtod_l+0x82>
 80136da:	4f88      	ldr	r7, [pc, #544]	; (80138fc <_strtod_l+0x5c4>)
 80136dc:	e7d7      	b.n	801368e <_strtod_l+0x356>
 80136de:	4663      	mov	r3, ip
 80136e0:	1acb      	subs	r3, r1, r3
 80136e2:	9307      	str	r3, [sp, #28]
 80136e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d101      	bne.n	80136ee <_strtod_l+0x3b6>
 80136ea:	9b05      	ldr	r3, [sp, #20]
 80136ec:	930a      	str	r3, [sp, #40]	; 0x28
 80136ee:	9c05      	ldr	r4, [sp, #20]
 80136f0:	2c10      	cmp	r4, #16
 80136f2:	dd00      	ble.n	80136f6 <_strtod_l+0x3be>
 80136f4:	2410      	movs	r4, #16
 80136f6:	9808      	ldr	r0, [sp, #32]
 80136f8:	f7ef fb18 	bl	8002d2c <__aeabi_ui2d>
 80136fc:	9b05      	ldr	r3, [sp, #20]
 80136fe:	0006      	movs	r6, r0
 8013700:	000f      	movs	r7, r1
 8013702:	2b09      	cmp	r3, #9
 8013704:	dc15      	bgt.n	8013732 <_strtod_l+0x3fa>
 8013706:	9b07      	ldr	r3, [sp, #28]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d100      	bne.n	801370e <_strtod_l+0x3d6>
 801370c:	e655      	b.n	80133ba <_strtod_l+0x82>
 801370e:	9b07      	ldr	r3, [sp, #28]
 8013710:	2b00      	cmp	r3, #0
 8013712:	dc00      	bgt.n	8013716 <_strtod_l+0x3de>
 8013714:	e07d      	b.n	8013812 <_strtod_l+0x4da>
 8013716:	2b16      	cmp	r3, #22
 8013718:	dc62      	bgt.n	80137e0 <_strtod_l+0x4a8>
 801371a:	00dc      	lsls	r4, r3, #3
 801371c:	4b78      	ldr	r3, [pc, #480]	; (8013900 <_strtod_l+0x5c8>)
 801371e:	0032      	movs	r2, r6
 8013720:	1919      	adds	r1, r3, r4
 8013722:	003b      	movs	r3, r7
 8013724:	6808      	ldr	r0, [r1, #0]
 8013726:	6849      	ldr	r1, [r1, #4]
 8013728:	f7ee fcba 	bl	80020a0 <__aeabi_dmul>
 801372c:	0006      	movs	r6, r0
 801372e:	000f      	movs	r7, r1
 8013730:	e643      	b.n	80133ba <_strtod_l+0x82>
 8013732:	0022      	movs	r2, r4
 8013734:	4b72      	ldr	r3, [pc, #456]	; (8013900 <_strtod_l+0x5c8>)
 8013736:	3a09      	subs	r2, #9
 8013738:	00d2      	lsls	r2, r2, #3
 801373a:	189b      	adds	r3, r3, r2
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	f7ee fcae 	bl	80020a0 <__aeabi_dmul>
 8013744:	0006      	movs	r6, r0
 8013746:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013748:	000f      	movs	r7, r1
 801374a:	f7ef faef 	bl	8002d2c <__aeabi_ui2d>
 801374e:	000b      	movs	r3, r1
 8013750:	0002      	movs	r2, r0
 8013752:	0039      	movs	r1, r7
 8013754:	0030      	movs	r0, r6
 8013756:	f7ed fd7d 	bl	8001254 <__aeabi_dadd>
 801375a:	9b05      	ldr	r3, [sp, #20]
 801375c:	0006      	movs	r6, r0
 801375e:	000f      	movs	r7, r1
 8013760:	2b0f      	cmp	r3, #15
 8013762:	ddd0      	ble.n	8013706 <_strtod_l+0x3ce>
 8013764:	9b05      	ldr	r3, [sp, #20]
 8013766:	1b1c      	subs	r4, r3, r4
 8013768:	9b07      	ldr	r3, [sp, #28]
 801376a:	18e4      	adds	r4, r4, r3
 801376c:	2c00      	cmp	r4, #0
 801376e:	dc00      	bgt.n	8013772 <_strtod_l+0x43a>
 8013770:	e094      	b.n	801389c <_strtod_l+0x564>
 8013772:	230f      	movs	r3, #15
 8013774:	4023      	ands	r3, r4
 8013776:	d00a      	beq.n	801378e <_strtod_l+0x456>
 8013778:	4961      	ldr	r1, [pc, #388]	; (8013900 <_strtod_l+0x5c8>)
 801377a:	00db      	lsls	r3, r3, #3
 801377c:	18c9      	adds	r1, r1, r3
 801377e:	0032      	movs	r2, r6
 8013780:	6808      	ldr	r0, [r1, #0]
 8013782:	6849      	ldr	r1, [r1, #4]
 8013784:	003b      	movs	r3, r7
 8013786:	f7ee fc8b 	bl	80020a0 <__aeabi_dmul>
 801378a:	0006      	movs	r6, r0
 801378c:	000f      	movs	r7, r1
 801378e:	230f      	movs	r3, #15
 8013790:	439c      	bics	r4, r3
 8013792:	d06e      	beq.n	8013872 <_strtod_l+0x53a>
 8013794:	3326      	adds	r3, #38	; 0x26
 8013796:	33ff      	adds	r3, #255	; 0xff
 8013798:	429c      	cmp	r4, r3
 801379a:	dd48      	ble.n	801382e <_strtod_l+0x4f6>
 801379c:	2400      	movs	r4, #0
 801379e:	9405      	str	r4, [sp, #20]
 80137a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80137a2:	940a      	str	r4, [sp, #40]	; 0x28
 80137a4:	2322      	movs	r3, #34	; 0x22
 80137a6:	2600      	movs	r6, #0
 80137a8:	9a04      	ldr	r2, [sp, #16]
 80137aa:	4f51      	ldr	r7, [pc, #324]	; (80138f0 <_strtod_l+0x5b8>)
 80137ac:	6013      	str	r3, [r2, #0]
 80137ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137b0:	42b3      	cmp	r3, r6
 80137b2:	d100      	bne.n	80137b6 <_strtod_l+0x47e>
 80137b4:	e601      	b.n	80133ba <_strtod_l+0x82>
 80137b6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80137b8:	9804      	ldr	r0, [sp, #16]
 80137ba:	f003 fa47 	bl	8016c4c <_Bfree>
 80137be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137c0:	9804      	ldr	r0, [sp, #16]
 80137c2:	f003 fa43 	bl	8016c4c <_Bfree>
 80137c6:	9905      	ldr	r1, [sp, #20]
 80137c8:	9804      	ldr	r0, [sp, #16]
 80137ca:	f003 fa3f 	bl	8016c4c <_Bfree>
 80137ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137d0:	9804      	ldr	r0, [sp, #16]
 80137d2:	f003 fa3b 	bl	8016c4c <_Bfree>
 80137d6:	0021      	movs	r1, r4
 80137d8:	9804      	ldr	r0, [sp, #16]
 80137da:	f003 fa37 	bl	8016c4c <_Bfree>
 80137de:	e5ec      	b.n	80133ba <_strtod_l+0x82>
 80137e0:	2325      	movs	r3, #37	; 0x25
 80137e2:	9a05      	ldr	r2, [sp, #20]
 80137e4:	1a9b      	subs	r3, r3, r2
 80137e6:	9a07      	ldr	r2, [sp, #28]
 80137e8:	4293      	cmp	r3, r2
 80137ea:	dbbb      	blt.n	8013764 <_strtod_l+0x42c>
 80137ec:	230f      	movs	r3, #15
 80137ee:	9a05      	ldr	r2, [sp, #20]
 80137f0:	4c43      	ldr	r4, [pc, #268]	; (8013900 <_strtod_l+0x5c8>)
 80137f2:	1a9d      	subs	r5, r3, r2
 80137f4:	00e9      	lsls	r1, r5, #3
 80137f6:	1861      	adds	r1, r4, r1
 80137f8:	0032      	movs	r2, r6
 80137fa:	6808      	ldr	r0, [r1, #0]
 80137fc:	6849      	ldr	r1, [r1, #4]
 80137fe:	003b      	movs	r3, r7
 8013800:	f7ee fc4e 	bl	80020a0 <__aeabi_dmul>
 8013804:	9b07      	ldr	r3, [sp, #28]
 8013806:	1b5e      	subs	r6, r3, r5
 8013808:	00f6      	lsls	r6, r6, #3
 801380a:	19a6      	adds	r6, r4, r6
 801380c:	6832      	ldr	r2, [r6, #0]
 801380e:	6873      	ldr	r3, [r6, #4]
 8013810:	e78a      	b.n	8013728 <_strtod_l+0x3f0>
 8013812:	9b07      	ldr	r3, [sp, #28]
 8013814:	3316      	adds	r3, #22
 8013816:	dba5      	blt.n	8013764 <_strtod_l+0x42c>
 8013818:	9b07      	ldr	r3, [sp, #28]
 801381a:	0030      	movs	r0, r6
 801381c:	00da      	lsls	r2, r3, #3
 801381e:	4b38      	ldr	r3, [pc, #224]	; (8013900 <_strtod_l+0x5c8>)
 8013820:	0039      	movs	r1, r7
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	f7ee f830 	bl	800188c <__aeabi_ddiv>
 801382c:	e77e      	b.n	801372c <_strtod_l+0x3f4>
 801382e:	2300      	movs	r3, #0
 8013830:	0030      	movs	r0, r6
 8013832:	0039      	movs	r1, r7
 8013834:	001d      	movs	r5, r3
 8013836:	1124      	asrs	r4, r4, #4
 8013838:	2c01      	cmp	r4, #1
 801383a:	dc1d      	bgt.n	8013878 <_strtod_l+0x540>
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <_strtod_l+0x50c>
 8013840:	0006      	movs	r6, r0
 8013842:	000f      	movs	r7, r1
 8013844:	4b2f      	ldr	r3, [pc, #188]	; (8013904 <_strtod_l+0x5cc>)
 8013846:	00ed      	lsls	r5, r5, #3
 8013848:	18ff      	adds	r7, r7, r3
 801384a:	4b2f      	ldr	r3, [pc, #188]	; (8013908 <_strtod_l+0x5d0>)
 801384c:	0032      	movs	r2, r6
 801384e:	195d      	adds	r5, r3, r5
 8013850:	6828      	ldr	r0, [r5, #0]
 8013852:	6869      	ldr	r1, [r5, #4]
 8013854:	003b      	movs	r3, r7
 8013856:	f7ee fc23 	bl	80020a0 <__aeabi_dmul>
 801385a:	4b25      	ldr	r3, [pc, #148]	; (80138f0 <_strtod_l+0x5b8>)
 801385c:	4a2b      	ldr	r2, [pc, #172]	; (801390c <_strtod_l+0x5d4>)
 801385e:	0006      	movs	r6, r0
 8013860:	400b      	ands	r3, r1
 8013862:	4293      	cmp	r3, r2
 8013864:	d89a      	bhi.n	801379c <_strtod_l+0x464>
 8013866:	4a2a      	ldr	r2, [pc, #168]	; (8013910 <_strtod_l+0x5d8>)
 8013868:	4293      	cmp	r3, r2
 801386a:	d913      	bls.n	8013894 <_strtod_l+0x55c>
 801386c:	2601      	movs	r6, #1
 801386e:	4f29      	ldr	r7, [pc, #164]	; (8013914 <_strtod_l+0x5dc>)
 8013870:	4276      	negs	r6, r6
 8013872:	2300      	movs	r3, #0
 8013874:	9306      	str	r3, [sp, #24]
 8013876:	e07b      	b.n	8013970 <_strtod_l+0x638>
 8013878:	2201      	movs	r2, #1
 801387a:	4214      	tst	r4, r2
 801387c:	d007      	beq.n	801388e <_strtod_l+0x556>
 801387e:	4a22      	ldr	r2, [pc, #136]	; (8013908 <_strtod_l+0x5d0>)
 8013880:	00eb      	lsls	r3, r5, #3
 8013882:	189b      	adds	r3, r3, r2
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	f7ee fc0a 	bl	80020a0 <__aeabi_dmul>
 801388c:	2301      	movs	r3, #1
 801388e:	3501      	adds	r5, #1
 8013890:	1064      	asrs	r4, r4, #1
 8013892:	e7d1      	b.n	8013838 <_strtod_l+0x500>
 8013894:	23d4      	movs	r3, #212	; 0xd4
 8013896:	049b      	lsls	r3, r3, #18
 8013898:	18cf      	adds	r7, r1, r3
 801389a:	e7ea      	b.n	8013872 <_strtod_l+0x53a>
 801389c:	2c00      	cmp	r4, #0
 801389e:	d0e8      	beq.n	8013872 <_strtod_l+0x53a>
 80138a0:	230f      	movs	r3, #15
 80138a2:	4264      	negs	r4, r4
 80138a4:	4023      	ands	r3, r4
 80138a6:	d00a      	beq.n	80138be <_strtod_l+0x586>
 80138a8:	4a15      	ldr	r2, [pc, #84]	; (8013900 <_strtod_l+0x5c8>)
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	18d3      	adds	r3, r2, r3
 80138ae:	0030      	movs	r0, r6
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	0039      	movs	r1, r7
 80138b6:	f7ed ffe9 	bl	800188c <__aeabi_ddiv>
 80138ba:	0006      	movs	r6, r0
 80138bc:	000f      	movs	r7, r1
 80138be:	1124      	asrs	r4, r4, #4
 80138c0:	d0d7      	beq.n	8013872 <_strtod_l+0x53a>
 80138c2:	2c1f      	cmp	r4, #31
 80138c4:	dd28      	ble.n	8013918 <_strtod_l+0x5e0>
 80138c6:	2400      	movs	r4, #0
 80138c8:	9405      	str	r4, [sp, #20]
 80138ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80138cc:	940a      	str	r4, [sp, #40]	; 0x28
 80138ce:	2322      	movs	r3, #34	; 0x22
 80138d0:	9a04      	ldr	r2, [sp, #16]
 80138d2:	2600      	movs	r6, #0
 80138d4:	6013      	str	r3, [r2, #0]
 80138d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138d8:	2700      	movs	r7, #0
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d000      	beq.n	80138e0 <_strtod_l+0x5a8>
 80138de:	e76a      	b.n	80137b6 <_strtod_l+0x47e>
 80138e0:	e56b      	b.n	80133ba <_strtod_l+0x82>
 80138e2:	46c0      	nop			; (mov r8, r8)
 80138e4:	00004e1f 	.word	0x00004e1f
 80138e8:	0801a5bd 	.word	0x0801a5bd
 80138ec:	0801a710 	.word	0x0801a710
 80138f0:	7ff00000 	.word	0x7ff00000
 80138f4:	0801a5c5 	.word	0x0801a5c5
 80138f8:	0801a578 	.word	0x0801a578
 80138fc:	fff80000 	.word	0xfff80000
 8013900:	0801a748 	.word	0x0801a748
 8013904:	fcb00000 	.word	0xfcb00000
 8013908:	0801a720 	.word	0x0801a720
 801390c:	7ca00000 	.word	0x7ca00000
 8013910:	7c900000 	.word	0x7c900000
 8013914:	7fefffff 	.word	0x7fefffff
 8013918:	2310      	movs	r3, #16
 801391a:	4023      	ands	r3, r4
 801391c:	9306      	str	r3, [sp, #24]
 801391e:	d001      	beq.n	8013924 <_strtod_l+0x5ec>
 8013920:	236a      	movs	r3, #106	; 0x6a
 8013922:	9306      	str	r3, [sp, #24]
 8013924:	2300      	movs	r3, #0
 8013926:	0030      	movs	r0, r6
 8013928:	0039      	movs	r1, r7
 801392a:	001d      	movs	r5, r3
 801392c:	2c00      	cmp	r4, #0
 801392e:	dd00      	ble.n	8013932 <_strtod_l+0x5fa>
 8013930:	e10e      	b.n	8013b50 <_strtod_l+0x818>
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <_strtod_l+0x602>
 8013936:	0006      	movs	r6, r0
 8013938:	000f      	movs	r7, r1
 801393a:	9b06      	ldr	r3, [sp, #24]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d00f      	beq.n	8013960 <_strtod_l+0x628>
 8013940:	236b      	movs	r3, #107	; 0x6b
 8013942:	0079      	lsls	r1, r7, #1
 8013944:	0d49      	lsrs	r1, r1, #21
 8013946:	003a      	movs	r2, r7
 8013948:	1a5b      	subs	r3, r3, r1
 801394a:	2b00      	cmp	r3, #0
 801394c:	dd08      	ble.n	8013960 <_strtod_l+0x628>
 801394e:	2b1f      	cmp	r3, #31
 8013950:	dc00      	bgt.n	8013954 <_strtod_l+0x61c>
 8013952:	e112      	b.n	8013b7a <_strtod_l+0x842>
 8013954:	2600      	movs	r6, #0
 8013956:	2b34      	cmp	r3, #52	; 0x34
 8013958:	dc00      	bgt.n	801395c <_strtod_l+0x624>
 801395a:	e107      	b.n	8013b6c <_strtod_l+0x834>
 801395c:	27dc      	movs	r7, #220	; 0xdc
 801395e:	04bf      	lsls	r7, r7, #18
 8013960:	2200      	movs	r2, #0
 8013962:	2300      	movs	r3, #0
 8013964:	0030      	movs	r0, r6
 8013966:	0039      	movs	r1, r7
 8013968:	f7ec fd78 	bl	800045c <__aeabi_dcmpeq>
 801396c:	2800      	cmp	r0, #0
 801396e:	d1aa      	bne.n	80138c6 <_strtod_l+0x58e>
 8013970:	9b08      	ldr	r3, [sp, #32]
 8013972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013978:	9b05      	ldr	r3, [sp, #20]
 801397a:	9804      	ldr	r0, [sp, #16]
 801397c:	f003 f9ae 	bl	8016cdc <__s2b>
 8013980:	900b      	str	r0, [sp, #44]	; 0x2c
 8013982:	2800      	cmp	r0, #0
 8013984:	d100      	bne.n	8013988 <_strtod_l+0x650>
 8013986:	e709      	b.n	801379c <_strtod_l+0x464>
 8013988:	9b07      	ldr	r3, [sp, #28]
 801398a:	9a07      	ldr	r2, [sp, #28]
 801398c:	17db      	asrs	r3, r3, #31
 801398e:	4252      	negs	r2, r2
 8013990:	4013      	ands	r3, r2
 8013992:	9315      	str	r3, [sp, #84]	; 0x54
 8013994:	9b07      	ldr	r3, [sp, #28]
 8013996:	2400      	movs	r4, #0
 8013998:	43db      	mvns	r3, r3
 801399a:	9a07      	ldr	r2, [sp, #28]
 801399c:	17db      	asrs	r3, r3, #31
 801399e:	401a      	ands	r2, r3
 80139a0:	921c      	str	r2, [sp, #112]	; 0x70
 80139a2:	9405      	str	r4, [sp, #20]
 80139a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139a6:	9804      	ldr	r0, [sp, #16]
 80139a8:	6859      	ldr	r1, [r3, #4]
 80139aa:	f003 f927 	bl	8016bfc <_Balloc>
 80139ae:	900a      	str	r0, [sp, #40]	; 0x28
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d100      	bne.n	80139b6 <_strtod_l+0x67e>
 80139b4:	e6f6      	b.n	80137a4 <_strtod_l+0x46c>
 80139b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139ba:	691b      	ldr	r3, [r3, #16]
 80139bc:	310c      	adds	r1, #12
 80139be:	1c9a      	adds	r2, r3, #2
 80139c0:	0092      	lsls	r2, r2, #2
 80139c2:	300c      	adds	r0, #12
 80139c4:	9308      	str	r3, [sp, #32]
 80139c6:	f7ff fa32 	bl	8012e2e <memcpy>
 80139ca:	ab24      	add	r3, sp, #144	; 0x90
 80139cc:	9301      	str	r3, [sp, #4]
 80139ce:	ab23      	add	r3, sp, #140	; 0x8c
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	0032      	movs	r2, r6
 80139d4:	003b      	movs	r3, r7
 80139d6:	9804      	ldr	r0, [sp, #16]
 80139d8:	960e      	str	r6, [sp, #56]	; 0x38
 80139da:	970f      	str	r7, [sp, #60]	; 0x3c
 80139dc:	f003 fc22 	bl	8017224 <__d2b>
 80139e0:	9022      	str	r0, [sp, #136]	; 0x88
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d100      	bne.n	80139e8 <_strtod_l+0x6b0>
 80139e6:	e6dd      	b.n	80137a4 <_strtod_l+0x46c>
 80139e8:	2101      	movs	r1, #1
 80139ea:	9804      	ldr	r0, [sp, #16]
 80139ec:	f003 f9fd 	bl	8016dea <__i2b>
 80139f0:	9005      	str	r0, [sp, #20]
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d100      	bne.n	80139f8 <_strtod_l+0x6c0>
 80139f6:	e6d5      	b.n	80137a4 <_strtod_l+0x46c>
 80139f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	da00      	bge.n	8013a00 <_strtod_l+0x6c8>
 80139fe:	e0c1      	b.n	8013b84 <_strtod_l+0x84c>
 8013a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a02:	189d      	adds	r5, r3, r2
 8013a04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a06:	4694      	mov	ip, r2
 8013a08:	9906      	ldr	r1, [sp, #24]
 8013a0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013a0c:	1a5b      	subs	r3, r3, r1
 8013a0e:	2136      	movs	r1, #54	; 0x36
 8013a10:	189b      	adds	r3, r3, r2
 8013a12:	1a8a      	subs	r2, r1, r2
 8013a14:	49b2      	ldr	r1, [pc, #712]	; (8013ce0 <_strtod_l+0x9a8>)
 8013a16:	3b01      	subs	r3, #1
 8013a18:	2001      	movs	r0, #1
 8013a1a:	428b      	cmp	r3, r1
 8013a1c:	db00      	blt.n	8013a20 <_strtod_l+0x6e8>
 8013a1e:	e0bd      	b.n	8013b9c <_strtod_l+0x864>
 8013a20:	1ac9      	subs	r1, r1, r3
 8013a22:	1a52      	subs	r2, r2, r1
 8013a24:	291f      	cmp	r1, #31
 8013a26:	dd00      	ble.n	8013a2a <_strtod_l+0x6f2>
 8013a28:	e0b1      	b.n	8013b8e <_strtod_l+0x856>
 8013a2a:	4088      	lsls	r0, r1
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	9014      	str	r0, [sp, #80]	; 0x50
 8013a30:	9310      	str	r3, [sp, #64]	; 0x40
 8013a32:	18ab      	adds	r3, r5, r2
 8013a34:	9308      	str	r3, [sp, #32]
 8013a36:	0013      	movs	r3, r2
 8013a38:	9a06      	ldr	r2, [sp, #24]
 8013a3a:	4463      	add	r3, ip
 8013a3c:	18d3      	adds	r3, r2, r3
 8013a3e:	9a08      	ldr	r2, [sp, #32]
 8013a40:	930c      	str	r3, [sp, #48]	; 0x30
 8013a42:	002b      	movs	r3, r5
 8013a44:	4295      	cmp	r5, r2
 8013a46:	dd00      	ble.n	8013a4a <_strtod_l+0x712>
 8013a48:	0013      	movs	r3, r2
 8013a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	dd00      	ble.n	8013a52 <_strtod_l+0x71a>
 8013a50:	0013      	movs	r3, r2
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd06      	ble.n	8013a64 <_strtod_l+0x72c>
 8013a56:	9a08      	ldr	r2, [sp, #32]
 8013a58:	1aed      	subs	r5, r5, r3
 8013a5a:	1ad2      	subs	r2, r2, r3
 8013a5c:	9208      	str	r2, [sp, #32]
 8013a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a60:	1ad2      	subs	r2, r2, r3
 8013a62:	920c      	str	r2, [sp, #48]	; 0x30
 8013a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d017      	beq.n	8013a9a <_strtod_l+0x762>
 8013a6a:	001a      	movs	r2, r3
 8013a6c:	9905      	ldr	r1, [sp, #20]
 8013a6e:	9804      	ldr	r0, [sp, #16]
 8013a70:	f003 fa54 	bl	8016f1c <__pow5mult>
 8013a74:	9005      	str	r0, [sp, #20]
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d100      	bne.n	8013a7c <_strtod_l+0x744>
 8013a7a:	e693      	b.n	80137a4 <_strtod_l+0x46c>
 8013a7c:	0001      	movs	r1, r0
 8013a7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013a80:	9804      	ldr	r0, [sp, #16]
 8013a82:	f003 f9bb 	bl	8016dfc <__multiply>
 8013a86:	9012      	str	r0, [sp, #72]	; 0x48
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d100      	bne.n	8013a8e <_strtod_l+0x756>
 8013a8c:	e68a      	b.n	80137a4 <_strtod_l+0x46c>
 8013a8e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a90:	9804      	ldr	r0, [sp, #16]
 8013a92:	f003 f8db 	bl	8016c4c <_Bfree>
 8013a96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a98:	9322      	str	r3, [sp, #136]	; 0x88
 8013a9a:	9b08      	ldr	r3, [sp, #32]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	dd00      	ble.n	8013aa2 <_strtod_l+0x76a>
 8013aa0:	e07f      	b.n	8013ba2 <_strtod_l+0x86a>
 8013aa2:	9b07      	ldr	r3, [sp, #28]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	dd08      	ble.n	8013aba <_strtod_l+0x782>
 8013aa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013aaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013aac:	9804      	ldr	r0, [sp, #16]
 8013aae:	f003 fa35 	bl	8016f1c <__pow5mult>
 8013ab2:	900a      	str	r0, [sp, #40]	; 0x28
 8013ab4:	2800      	cmp	r0, #0
 8013ab6:	d100      	bne.n	8013aba <_strtod_l+0x782>
 8013ab8:	e674      	b.n	80137a4 <_strtod_l+0x46c>
 8013aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	dd08      	ble.n	8013ad2 <_strtod_l+0x79a>
 8013ac0:	001a      	movs	r2, r3
 8013ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ac4:	9804      	ldr	r0, [sp, #16]
 8013ac6:	f003 fa6b 	bl	8016fa0 <__lshift>
 8013aca:	900a      	str	r0, [sp, #40]	; 0x28
 8013acc:	2800      	cmp	r0, #0
 8013ace:	d100      	bne.n	8013ad2 <_strtod_l+0x79a>
 8013ad0:	e668      	b.n	80137a4 <_strtod_l+0x46c>
 8013ad2:	2d00      	cmp	r5, #0
 8013ad4:	dd08      	ble.n	8013ae8 <_strtod_l+0x7b0>
 8013ad6:	002a      	movs	r2, r5
 8013ad8:	9905      	ldr	r1, [sp, #20]
 8013ada:	9804      	ldr	r0, [sp, #16]
 8013adc:	f003 fa60 	bl	8016fa0 <__lshift>
 8013ae0:	9005      	str	r0, [sp, #20]
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d100      	bne.n	8013ae8 <_strtod_l+0x7b0>
 8013ae6:	e65d      	b.n	80137a4 <_strtod_l+0x46c>
 8013ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013aec:	9804      	ldr	r0, [sp, #16]
 8013aee:	f003 fac3 	bl	8017078 <__mdiff>
 8013af2:	1e04      	subs	r4, r0, #0
 8013af4:	d100      	bne.n	8013af8 <_strtod_l+0x7c0>
 8013af6:	e655      	b.n	80137a4 <_strtod_l+0x46c>
 8013af8:	2500      	movs	r5, #0
 8013afa:	68c3      	ldr	r3, [r0, #12]
 8013afc:	9905      	ldr	r1, [sp, #20]
 8013afe:	60c5      	str	r5, [r0, #12]
 8013b00:	9312      	str	r3, [sp, #72]	; 0x48
 8013b02:	f003 fa9f 	bl	8017044 <__mcmp>
 8013b06:	42a8      	cmp	r0, r5
 8013b08:	da55      	bge.n	8013bb6 <_strtod_l+0x87e>
 8013b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b0c:	42ab      	cmp	r3, r5
 8013b0e:	d11b      	bne.n	8013b48 <_strtod_l+0x810>
 8013b10:	42ae      	cmp	r6, r5
 8013b12:	d119      	bne.n	8013b48 <_strtod_l+0x810>
 8013b14:	033b      	lsls	r3, r7, #12
 8013b16:	42ab      	cmp	r3, r5
 8013b18:	d116      	bne.n	8013b48 <_strtod_l+0x810>
 8013b1a:	22d6      	movs	r2, #214	; 0xd6
 8013b1c:	4b71      	ldr	r3, [pc, #452]	; (8013ce4 <_strtod_l+0x9ac>)
 8013b1e:	04d2      	lsls	r2, r2, #19
 8013b20:	403b      	ands	r3, r7
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d910      	bls.n	8013b48 <_strtod_l+0x810>
 8013b26:	6963      	ldr	r3, [r4, #20]
 8013b28:	42ab      	cmp	r3, r5
 8013b2a:	d102      	bne.n	8013b32 <_strtod_l+0x7fa>
 8013b2c:	6923      	ldr	r3, [r4, #16]
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	dd0a      	ble.n	8013b48 <_strtod_l+0x810>
 8013b32:	0021      	movs	r1, r4
 8013b34:	2201      	movs	r2, #1
 8013b36:	9804      	ldr	r0, [sp, #16]
 8013b38:	f003 fa32 	bl	8016fa0 <__lshift>
 8013b3c:	9905      	ldr	r1, [sp, #20]
 8013b3e:	0004      	movs	r4, r0
 8013b40:	f003 fa80 	bl	8017044 <__mcmp>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	dc6b      	bgt.n	8013c20 <_strtod_l+0x8e8>
 8013b48:	9b06      	ldr	r3, [sp, #24]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d178      	bne.n	8013c40 <_strtod_l+0x908>
 8013b4e:	e632      	b.n	80137b6 <_strtod_l+0x47e>
 8013b50:	2201      	movs	r2, #1
 8013b52:	4214      	tst	r4, r2
 8013b54:	d007      	beq.n	8013b66 <_strtod_l+0x82e>
 8013b56:	4a64      	ldr	r2, [pc, #400]	; (8013ce8 <_strtod_l+0x9b0>)
 8013b58:	00eb      	lsls	r3, r5, #3
 8013b5a:	18d3      	adds	r3, r2, r3
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	f7ee fa9e 	bl	80020a0 <__aeabi_dmul>
 8013b64:	2301      	movs	r3, #1
 8013b66:	3501      	adds	r5, #1
 8013b68:	1064      	asrs	r4, r4, #1
 8013b6a:	e6df      	b.n	801392c <_strtod_l+0x5f4>
 8013b6c:	2101      	movs	r1, #1
 8013b6e:	3b20      	subs	r3, #32
 8013b70:	4249      	negs	r1, r1
 8013b72:	4099      	lsls	r1, r3
 8013b74:	400a      	ands	r2, r1
 8013b76:	0017      	movs	r7, r2
 8013b78:	e6f2      	b.n	8013960 <_strtod_l+0x628>
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	4252      	negs	r2, r2
 8013b7e:	409a      	lsls	r2, r3
 8013b80:	4016      	ands	r6, r2
 8013b82:	e6ed      	b.n	8013960 <_strtod_l+0x628>
 8013b84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b86:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013b88:	1ad2      	subs	r2, r2, r3
 8013b8a:	4694      	mov	ip, r2
 8013b8c:	e73c      	b.n	8013a08 <_strtod_l+0x6d0>
 8013b8e:	4957      	ldr	r1, [pc, #348]	; (8013cec <_strtod_l+0x9b4>)
 8013b90:	1acb      	subs	r3, r1, r3
 8013b92:	0001      	movs	r1, r0
 8013b94:	4099      	lsls	r1, r3
 8013b96:	9110      	str	r1, [sp, #64]	; 0x40
 8013b98:	9014      	str	r0, [sp, #80]	; 0x50
 8013b9a:	e74a      	b.n	8013a32 <_strtod_l+0x6fa>
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8013ba0:	e7fa      	b.n	8013b98 <_strtod_l+0x860>
 8013ba2:	9a08      	ldr	r2, [sp, #32]
 8013ba4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013ba6:	9804      	ldr	r0, [sp, #16]
 8013ba8:	f003 f9fa 	bl	8016fa0 <__lshift>
 8013bac:	9022      	str	r0, [sp, #136]	; 0x88
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d000      	beq.n	8013bb4 <_strtod_l+0x87c>
 8013bb2:	e776      	b.n	8013aa2 <_strtod_l+0x76a>
 8013bb4:	e5f6      	b.n	80137a4 <_strtod_l+0x46c>
 8013bb6:	970c      	str	r7, [sp, #48]	; 0x30
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d000      	beq.n	8013bbe <_strtod_l+0x886>
 8013bbc:	e0a0      	b.n	8013d00 <_strtod_l+0x9c8>
 8013bbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bc0:	033b      	lsls	r3, r7, #12
 8013bc2:	0b1b      	lsrs	r3, r3, #12
 8013bc4:	2a00      	cmp	r2, #0
 8013bc6:	d027      	beq.n	8013c18 <_strtod_l+0x8e0>
 8013bc8:	4a49      	ldr	r2, [pc, #292]	; (8013cf0 <_strtod_l+0x9b8>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d157      	bne.n	8013c7e <_strtod_l+0x946>
 8013bce:	2201      	movs	r2, #1
 8013bd0:	9b06      	ldr	r3, [sp, #24]
 8013bd2:	4252      	negs	r2, r2
 8013bd4:	0031      	movs	r1, r6
 8013bd6:	0010      	movs	r0, r2
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d00b      	beq.n	8013bf4 <_strtod_l+0x8bc>
 8013bdc:	25d4      	movs	r5, #212	; 0xd4
 8013bde:	4b41      	ldr	r3, [pc, #260]	; (8013ce4 <_strtod_l+0x9ac>)
 8013be0:	04ed      	lsls	r5, r5, #19
 8013be2:	403b      	ands	r3, r7
 8013be4:	0010      	movs	r0, r2
 8013be6:	42ab      	cmp	r3, r5
 8013be8:	d804      	bhi.n	8013bf4 <_strtod_l+0x8bc>
 8013bea:	306c      	adds	r0, #108	; 0x6c
 8013bec:	0d1b      	lsrs	r3, r3, #20
 8013bee:	1ac3      	subs	r3, r0, r3
 8013bf0:	409a      	lsls	r2, r3
 8013bf2:	0010      	movs	r0, r2
 8013bf4:	4281      	cmp	r1, r0
 8013bf6:	d142      	bne.n	8013c7e <_strtod_l+0x946>
 8013bf8:	4b3e      	ldr	r3, [pc, #248]	; (8013cf4 <_strtod_l+0x9bc>)
 8013bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d102      	bne.n	8013c06 <_strtod_l+0x8ce>
 8013c00:	1c4b      	adds	r3, r1, #1
 8013c02:	d100      	bne.n	8013c06 <_strtod_l+0x8ce>
 8013c04:	e5ce      	b.n	80137a4 <_strtod_l+0x46c>
 8013c06:	4b37      	ldr	r3, [pc, #220]	; (8013ce4 <_strtod_l+0x9ac>)
 8013c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c0a:	2600      	movs	r6, #0
 8013c0c:	401a      	ands	r2, r3
 8013c0e:	0013      	movs	r3, r2
 8013c10:	2280      	movs	r2, #128	; 0x80
 8013c12:	0352      	lsls	r2, r2, #13
 8013c14:	189f      	adds	r7, r3, r2
 8013c16:	e797      	b.n	8013b48 <_strtod_l+0x810>
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d130      	bne.n	8013c7e <_strtod_l+0x946>
 8013c1c:	2e00      	cmp	r6, #0
 8013c1e:	d12e      	bne.n	8013c7e <_strtod_l+0x946>
 8013c20:	9906      	ldr	r1, [sp, #24]
 8013c22:	003b      	movs	r3, r7
 8013c24:	4a2f      	ldr	r2, [pc, #188]	; (8013ce4 <_strtod_l+0x9ac>)
 8013c26:	2900      	cmp	r1, #0
 8013c28:	d020      	beq.n	8013c6c <_strtod_l+0x934>
 8013c2a:	0011      	movs	r1, r2
 8013c2c:	20d6      	movs	r0, #214	; 0xd6
 8013c2e:	4039      	ands	r1, r7
 8013c30:	04c0      	lsls	r0, r0, #19
 8013c32:	4281      	cmp	r1, r0
 8013c34:	dc1a      	bgt.n	8013c6c <_strtod_l+0x934>
 8013c36:	23dc      	movs	r3, #220	; 0xdc
 8013c38:	049b      	lsls	r3, r3, #18
 8013c3a:	4299      	cmp	r1, r3
 8013c3c:	dc00      	bgt.n	8013c40 <_strtod_l+0x908>
 8013c3e:	e646      	b.n	80138ce <_strtod_l+0x596>
 8013c40:	4b2d      	ldr	r3, [pc, #180]	; (8013cf8 <_strtod_l+0x9c0>)
 8013c42:	0030      	movs	r0, r6
 8013c44:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c46:	2300      	movs	r3, #0
 8013c48:	931a      	str	r3, [sp, #104]	; 0x68
 8013c4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c4e:	0039      	movs	r1, r7
 8013c50:	f7ee fa26 	bl	80020a0 <__aeabi_dmul>
 8013c54:	0006      	movs	r6, r0
 8013c56:	000f      	movs	r7, r1
 8013c58:	1e0b      	subs	r3, r1, #0
 8013c5a:	d000      	beq.n	8013c5e <_strtod_l+0x926>
 8013c5c:	e5ab      	b.n	80137b6 <_strtod_l+0x47e>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d000      	beq.n	8013c64 <_strtod_l+0x92c>
 8013c62:	e5a8      	b.n	80137b6 <_strtod_l+0x47e>
 8013c64:	9a04      	ldr	r2, [sp, #16]
 8013c66:	3322      	adds	r3, #34	; 0x22
 8013c68:	6013      	str	r3, [r2, #0]
 8013c6a:	e5a4      	b.n	80137b6 <_strtod_l+0x47e>
 8013c6c:	2601      	movs	r6, #1
 8013c6e:	4013      	ands	r3, r2
 8013c70:	4a22      	ldr	r2, [pc, #136]	; (8013cfc <_strtod_l+0x9c4>)
 8013c72:	4276      	negs	r6, r6
 8013c74:	189b      	adds	r3, r3, r2
 8013c76:	4a1e      	ldr	r2, [pc, #120]	; (8013cf0 <_strtod_l+0x9b8>)
 8013c78:	431a      	orrs	r2, r3
 8013c7a:	0017      	movs	r7, r2
 8013c7c:	e764      	b.n	8013b48 <_strtod_l+0x810>
 8013c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d015      	beq.n	8013cb0 <_strtod_l+0x978>
 8013c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c88:	4213      	tst	r3, r2
 8013c8a:	d100      	bne.n	8013c8e <_strtod_l+0x956>
 8013c8c:	e75c      	b.n	8013b48 <_strtod_l+0x810>
 8013c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c90:	9a06      	ldr	r2, [sp, #24]
 8013c92:	0030      	movs	r0, r6
 8013c94:	0039      	movs	r1, r7
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00f      	beq.n	8013cba <_strtod_l+0x982>
 8013c9a:	f7ff fb35 	bl	8013308 <sulp>
 8013c9e:	0002      	movs	r2, r0
 8013ca0:	000b      	movs	r3, r1
 8013ca2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013ca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ca6:	f7ed fad5 	bl	8001254 <__aeabi_dadd>
 8013caa:	0006      	movs	r6, r0
 8013cac:	000f      	movs	r7, r1
 8013cae:	e74b      	b.n	8013b48 <_strtod_l+0x810>
 8013cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cb2:	4233      	tst	r3, r6
 8013cb4:	d100      	bne.n	8013cb8 <_strtod_l+0x980>
 8013cb6:	e747      	b.n	8013b48 <_strtod_l+0x810>
 8013cb8:	e7e9      	b.n	8013c8e <_strtod_l+0x956>
 8013cba:	f7ff fb25 	bl	8013308 <sulp>
 8013cbe:	0002      	movs	r2, r0
 8013cc0:	000b      	movs	r3, r1
 8013cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013cc6:	f7ee fc5d 	bl	8002584 <__aeabi_dsub>
 8013cca:	2200      	movs	r2, #0
 8013ccc:	2300      	movs	r3, #0
 8013cce:	0006      	movs	r6, r0
 8013cd0:	000f      	movs	r7, r1
 8013cd2:	f7ec fbc3 	bl	800045c <__aeabi_dcmpeq>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d000      	beq.n	8013cdc <_strtod_l+0x9a4>
 8013cda:	e5f8      	b.n	80138ce <_strtod_l+0x596>
 8013cdc:	e734      	b.n	8013b48 <_strtod_l+0x810>
 8013cde:	46c0      	nop			; (mov r8, r8)
 8013ce0:	fffffc02 	.word	0xfffffc02
 8013ce4:	7ff00000 	.word	0x7ff00000
 8013ce8:	0801a590 	.word	0x0801a590
 8013cec:	fffffbe2 	.word	0xfffffbe2
 8013cf0:	000fffff 	.word	0x000fffff
 8013cf4:	7fefffff 	.word	0x7fefffff
 8013cf8:	39500000 	.word	0x39500000
 8013cfc:	fff00000 	.word	0xfff00000
 8013d00:	9905      	ldr	r1, [sp, #20]
 8013d02:	0020      	movs	r0, r4
 8013d04:	f003 fae2 	bl	80172cc <__ratio>
 8013d08:	2380      	movs	r3, #128	; 0x80
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	05db      	lsls	r3, r3, #23
 8013d0e:	9008      	str	r0, [sp, #32]
 8013d10:	9109      	str	r1, [sp, #36]	; 0x24
 8013d12:	f7ec fbb3 	bl	800047c <__aeabi_dcmple>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d100      	bne.n	8013d1c <_strtod_l+0x9e4>
 8013d1a:	e07f      	b.n	8013e1c <_strtod_l+0xae4>
 8013d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d04b      	beq.n	8013dba <_strtod_l+0xa82>
 8013d22:	2200      	movs	r2, #0
 8013d24:	4b8a      	ldr	r3, [pc, #552]	; (8013f50 <_strtod_l+0xc18>)
 8013d26:	9210      	str	r2, [sp, #64]	; 0x40
 8013d28:	9311      	str	r3, [sp, #68]	; 0x44
 8013d2a:	4b89      	ldr	r3, [pc, #548]	; (8013f50 <_strtod_l+0xc18>)
 8013d2c:	9308      	str	r3, [sp, #32]
 8013d2e:	4a89      	ldr	r2, [pc, #548]	; (8013f54 <_strtod_l+0xc1c>)
 8013d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d32:	4013      	ands	r3, r2
 8013d34:	9314      	str	r3, [sp, #80]	; 0x50
 8013d36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d38:	4b87      	ldr	r3, [pc, #540]	; (8013f58 <_strtod_l+0xc20>)
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d000      	beq.n	8013d40 <_strtod_l+0xa08>
 8013d3e:	e0ba      	b.n	8013eb6 <_strtod_l+0xb7e>
 8013d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d44:	921a      	str	r2, [sp, #104]	; 0x68
 8013d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d48:	4a84      	ldr	r2, [pc, #528]	; (8013f5c <_strtod_l+0xc24>)
 8013d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d4c:	4694      	mov	ip, r2
 8013d4e:	4463      	add	r3, ip
 8013d50:	001f      	movs	r7, r3
 8013d52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d56:	0030      	movs	r0, r6
 8013d58:	0039      	movs	r1, r7
 8013d5a:	920c      	str	r2, [sp, #48]	; 0x30
 8013d5c:	930d      	str	r3, [sp, #52]	; 0x34
 8013d5e:	f003 f9ef 	bl	8017140 <__ulp>
 8013d62:	0002      	movs	r2, r0
 8013d64:	000b      	movs	r3, r1
 8013d66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013d68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d6a:	f7ee f999 	bl	80020a0 <__aeabi_dmul>
 8013d6e:	0032      	movs	r2, r6
 8013d70:	003b      	movs	r3, r7
 8013d72:	f7ed fa6f 	bl	8001254 <__aeabi_dadd>
 8013d76:	4a77      	ldr	r2, [pc, #476]	; (8013f54 <_strtod_l+0xc1c>)
 8013d78:	4b79      	ldr	r3, [pc, #484]	; (8013f60 <_strtod_l+0xc28>)
 8013d7a:	0006      	movs	r6, r0
 8013d7c:	400a      	ands	r2, r1
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d964      	bls.n	8013e4c <_strtod_l+0xb14>
 8013d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d84:	4a77      	ldr	r2, [pc, #476]	; (8013f64 <_strtod_l+0xc2c>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d103      	bne.n	8013d92 <_strtod_l+0xa5a>
 8013d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	d100      	bne.n	8013d92 <_strtod_l+0xa5a>
 8013d90:	e508      	b.n	80137a4 <_strtod_l+0x46c>
 8013d92:	2601      	movs	r6, #1
 8013d94:	4f73      	ldr	r7, [pc, #460]	; (8013f64 <_strtod_l+0xc2c>)
 8013d96:	4276      	negs	r6, r6
 8013d98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d9a:	9804      	ldr	r0, [sp, #16]
 8013d9c:	f002 ff56 	bl	8016c4c <_Bfree>
 8013da0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013da2:	9804      	ldr	r0, [sp, #16]
 8013da4:	f002 ff52 	bl	8016c4c <_Bfree>
 8013da8:	9905      	ldr	r1, [sp, #20]
 8013daa:	9804      	ldr	r0, [sp, #16]
 8013dac:	f002 ff4e 	bl	8016c4c <_Bfree>
 8013db0:	0021      	movs	r1, r4
 8013db2:	9804      	ldr	r0, [sp, #16]
 8013db4:	f002 ff4a 	bl	8016c4c <_Bfree>
 8013db8:	e5f4      	b.n	80139a4 <_strtod_l+0x66c>
 8013dba:	2e00      	cmp	r6, #0
 8013dbc:	d11e      	bne.n	8013dfc <_strtod_l+0xac4>
 8013dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dc0:	031b      	lsls	r3, r3, #12
 8013dc2:	d121      	bne.n	8013e08 <_strtod_l+0xad0>
 8013dc4:	9808      	ldr	r0, [sp, #32]
 8013dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4b61      	ldr	r3, [pc, #388]	; (8013f50 <_strtod_l+0xc18>)
 8013dcc:	f7ec fb4c 	bl	8000468 <__aeabi_dcmplt>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d11f      	bne.n	8013e14 <_strtod_l+0xadc>
 8013dd4:	9808      	ldr	r0, [sp, #32]
 8013dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4b63      	ldr	r3, [pc, #396]	; (8013f68 <_strtod_l+0xc30>)
 8013ddc:	f7ee f960 	bl	80020a0 <__aeabi_dmul>
 8013de0:	0005      	movs	r5, r0
 8013de2:	9108      	str	r1, [sp, #32]
 8013de4:	2280      	movs	r2, #128	; 0x80
 8013de6:	0612      	lsls	r2, r2, #24
 8013de8:	4694      	mov	ip, r2
 8013dea:	9b08      	ldr	r3, [sp, #32]
 8013dec:	951e      	str	r5, [sp, #120]	; 0x78
 8013dee:	4463      	add	r3, ip
 8013df0:	931f      	str	r3, [sp, #124]	; 0x7c
 8013df2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013df4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013df6:	9210      	str	r2, [sp, #64]	; 0x40
 8013df8:	9311      	str	r3, [sp, #68]	; 0x44
 8013dfa:	e798      	b.n	8013d2e <_strtod_l+0x9f6>
 8013dfc:	2e01      	cmp	r6, #1
 8013dfe:	d103      	bne.n	8013e08 <_strtod_l+0xad0>
 8013e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d100      	bne.n	8013e08 <_strtod_l+0xad0>
 8013e06:	e562      	b.n	80138ce <_strtod_l+0x596>
 8013e08:	2200      	movs	r2, #0
 8013e0a:	4b58      	ldr	r3, [pc, #352]	; (8013f6c <_strtod_l+0xc34>)
 8013e0c:	2500      	movs	r5, #0
 8013e0e:	9210      	str	r2, [sp, #64]	; 0x40
 8013e10:	9311      	str	r3, [sp, #68]	; 0x44
 8013e12:	e78a      	b.n	8013d2a <_strtod_l+0x9f2>
 8013e14:	4b54      	ldr	r3, [pc, #336]	; (8013f68 <_strtod_l+0xc30>)
 8013e16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013e18:	9308      	str	r3, [sp, #32]
 8013e1a:	e7e3      	b.n	8013de4 <_strtod_l+0xaac>
 8013e1c:	4b52      	ldr	r3, [pc, #328]	; (8013f68 <_strtod_l+0xc30>)
 8013e1e:	9808      	ldr	r0, [sp, #32]
 8013e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e22:	2200      	movs	r2, #0
 8013e24:	f7ee f93c 	bl	80020a0 <__aeabi_dmul>
 8013e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e2a:	0005      	movs	r5, r0
 8013e2c:	9108      	str	r1, [sp, #32]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d107      	bne.n	8013e42 <_strtod_l+0xb0a>
 8013e32:	2380      	movs	r3, #128	; 0x80
 8013e34:	061b      	lsls	r3, r3, #24
 8013e36:	18cb      	adds	r3, r1, r3
 8013e38:	9016      	str	r0, [sp, #88]	; 0x58
 8013e3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8013e3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013e3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e40:	e7d9      	b.n	8013df6 <_strtod_l+0xabe>
 8013e42:	0002      	movs	r2, r0
 8013e44:	9b08      	ldr	r3, [sp, #32]
 8013e46:	9216      	str	r2, [sp, #88]	; 0x58
 8013e48:	9317      	str	r3, [sp, #92]	; 0x5c
 8013e4a:	e7f7      	b.n	8013e3c <_strtod_l+0xb04>
 8013e4c:	23d4      	movs	r3, #212	; 0xd4
 8013e4e:	049b      	lsls	r3, r3, #18
 8013e50:	18cf      	adds	r7, r1, r3
 8013e52:	9b06      	ldr	r3, [sp, #24]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d19f      	bne.n	8013d98 <_strtod_l+0xa60>
 8013e58:	4b3e      	ldr	r3, [pc, #248]	; (8013f54 <_strtod_l+0xc1c>)
 8013e5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e5c:	970c      	str	r7, [sp, #48]	; 0x30
 8013e5e:	403b      	ands	r3, r7
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d199      	bne.n	8013d98 <_strtod_l+0xa60>
 8013e64:	9908      	ldr	r1, [sp, #32]
 8013e66:	0028      	movs	r0, r5
 8013e68:	f7ee fef0 	bl	8002c4c <__aeabi_d2iz>
 8013e6c:	f7ee ff24 	bl	8002cb8 <__aeabi_i2d>
 8013e70:	000b      	movs	r3, r1
 8013e72:	0002      	movs	r2, r0
 8013e74:	9908      	ldr	r1, [sp, #32]
 8013e76:	0028      	movs	r0, r5
 8013e78:	f7ee fb84 	bl	8002584 <__aeabi_dsub>
 8013e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e7e:	9008      	str	r0, [sp, #32]
 8013e80:	9109      	str	r1, [sp, #36]	; 0x24
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d104      	bne.n	8013e90 <_strtod_l+0xb58>
 8013e86:	2e00      	cmp	r6, #0
 8013e88:	d102      	bne.n	8013e90 <_strtod_l+0xb58>
 8013e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e8c:	031b      	lsls	r3, r3, #12
 8013e8e:	d058      	beq.n	8013f42 <_strtod_l+0xc0a>
 8013e90:	9808      	ldr	r0, [sp, #32]
 8013e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e94:	4a36      	ldr	r2, [pc, #216]	; (8013f70 <_strtod_l+0xc38>)
 8013e96:	4b37      	ldr	r3, [pc, #220]	; (8013f74 <_strtod_l+0xc3c>)
 8013e98:	f7ec fae6 	bl	8000468 <__aeabi_dcmplt>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d000      	beq.n	8013ea2 <_strtod_l+0xb6a>
 8013ea0:	e489      	b.n	80137b6 <_strtod_l+0x47e>
 8013ea2:	9808      	ldr	r0, [sp, #32]
 8013ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ea6:	4a34      	ldr	r2, [pc, #208]	; (8013f78 <_strtod_l+0xc40>)
 8013ea8:	4b2f      	ldr	r3, [pc, #188]	; (8013f68 <_strtod_l+0xc30>)
 8013eaa:	f7ec faf1 	bl	8000490 <__aeabi_dcmpgt>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d100      	bne.n	8013eb4 <_strtod_l+0xb7c>
 8013eb2:	e771      	b.n	8013d98 <_strtod_l+0xa60>
 8013eb4:	e47f      	b.n	80137b6 <_strtod_l+0x47e>
 8013eb6:	9b06      	ldr	r3, [sp, #24]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d02a      	beq.n	8013f12 <_strtod_l+0xbda>
 8013ebc:	23d4      	movs	r3, #212	; 0xd4
 8013ebe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ec0:	04db      	lsls	r3, r3, #19
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d825      	bhi.n	8013f12 <_strtod_l+0xbda>
 8013ec6:	4a2d      	ldr	r2, [pc, #180]	; (8013f7c <_strtod_l+0xc44>)
 8013ec8:	4b2d      	ldr	r3, [pc, #180]	; (8013f80 <_strtod_l+0xc48>)
 8013eca:	0028      	movs	r0, r5
 8013ecc:	9908      	ldr	r1, [sp, #32]
 8013ece:	f7ec fad5 	bl	800047c <__aeabi_dcmple>
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	d016      	beq.n	8013f04 <_strtod_l+0xbcc>
 8013ed6:	0028      	movs	r0, r5
 8013ed8:	9908      	ldr	r1, [sp, #32]
 8013eda:	f7ec fb89 	bl	80005f0 <__aeabi_d2uiz>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d100      	bne.n	8013ee4 <_strtod_l+0xbac>
 8013ee2:	3001      	adds	r0, #1
 8013ee4:	f7ee ff22 	bl	8002d2c <__aeabi_ui2d>
 8013ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013eea:	0005      	movs	r5, r0
 8013eec:	9108      	str	r1, [sp, #32]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d122      	bne.n	8013f38 <_strtod_l+0xc00>
 8013ef2:	2380      	movs	r3, #128	; 0x80
 8013ef4:	061b      	lsls	r3, r3, #24
 8013ef6:	18cb      	adds	r3, r1, r3
 8013ef8:	9018      	str	r0, [sp, #96]	; 0x60
 8013efa:	9319      	str	r3, [sp, #100]	; 0x64
 8013efc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013efe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f00:	9210      	str	r2, [sp, #64]	; 0x40
 8013f02:	9311      	str	r3, [sp, #68]	; 0x44
 8013f04:	22d6      	movs	r2, #214	; 0xd6
 8013f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f08:	04d2      	lsls	r2, r2, #19
 8013f0a:	189b      	adds	r3, r3, r2
 8013f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f0e:	1a9b      	subs	r3, r3, r2
 8013f10:	9311      	str	r3, [sp, #68]	; 0x44
 8013f12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013f14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013f16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013f18:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013f1a:	f003 f911 	bl	8017140 <__ulp>
 8013f1e:	0002      	movs	r2, r0
 8013f20:	000b      	movs	r3, r1
 8013f22:	0030      	movs	r0, r6
 8013f24:	0039      	movs	r1, r7
 8013f26:	f7ee f8bb 	bl	80020a0 <__aeabi_dmul>
 8013f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f2e:	f7ed f991 	bl	8001254 <__aeabi_dadd>
 8013f32:	0006      	movs	r6, r0
 8013f34:	000f      	movs	r7, r1
 8013f36:	e78c      	b.n	8013e52 <_strtod_l+0xb1a>
 8013f38:	0002      	movs	r2, r0
 8013f3a:	9b08      	ldr	r3, [sp, #32]
 8013f3c:	9218      	str	r2, [sp, #96]	; 0x60
 8013f3e:	9319      	str	r3, [sp, #100]	; 0x64
 8013f40:	e7dc      	b.n	8013efc <_strtod_l+0xbc4>
 8013f42:	4a0b      	ldr	r2, [pc, #44]	; (8013f70 <_strtod_l+0xc38>)
 8013f44:	4b0f      	ldr	r3, [pc, #60]	; (8013f84 <_strtod_l+0xc4c>)
 8013f46:	9808      	ldr	r0, [sp, #32]
 8013f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f4a:	f7ec fa8d 	bl	8000468 <__aeabi_dcmplt>
 8013f4e:	e7ae      	b.n	8013eae <_strtod_l+0xb76>
 8013f50:	3ff00000 	.word	0x3ff00000
 8013f54:	7ff00000 	.word	0x7ff00000
 8013f58:	7fe00000 	.word	0x7fe00000
 8013f5c:	fcb00000 	.word	0xfcb00000
 8013f60:	7c9fffff 	.word	0x7c9fffff
 8013f64:	7fefffff 	.word	0x7fefffff
 8013f68:	3fe00000 	.word	0x3fe00000
 8013f6c:	bff00000 	.word	0xbff00000
 8013f70:	94a03595 	.word	0x94a03595
 8013f74:	3fdfffff 	.word	0x3fdfffff
 8013f78:	35afe535 	.word	0x35afe535
 8013f7c:	ffc00000 	.word	0xffc00000
 8013f80:	41dfffff 	.word	0x41dfffff
 8013f84:	3fcfffff 	.word	0x3fcfffff

08013f88 <strtod>:
 8013f88:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <strtod+0x1c>)
 8013f8a:	b510      	push	{r4, lr}
 8013f8c:	0004      	movs	r4, r0
 8013f8e:	6818      	ldr	r0, [r3, #0]
 8013f90:	000a      	movs	r2, r1
 8013f92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d100      	bne.n	8013f9a <strtod+0x12>
 8013f98:	4b03      	ldr	r3, [pc, #12]	; (8013fa8 <strtod+0x20>)
 8013f9a:	0021      	movs	r1, r4
 8013f9c:	f7ff f9cc 	bl	8013338 <_strtod_l>
 8013fa0:	bd10      	pop	{r4, pc}
 8013fa2:	46c0      	nop			; (mov r8, r8)
 8013fa4:	200000ac 	.word	0x200000ac
 8013fa8:	200004d8 	.word	0x200004d8

08013fac <strtok>:
 8013fac:	4b03      	ldr	r3, [pc, #12]	; (8013fbc <strtok+0x10>)
 8013fae:	b510      	push	{r4, lr}
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	325c      	adds	r2, #92	; 0x5c
 8013fb6:	f000 f803 	bl	8013fc0 <__strtok_r>
 8013fba:	bd10      	pop	{r4, pc}
 8013fbc:	200000ac 	.word	0x200000ac

08013fc0 <__strtok_r>:
 8013fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fc2:	2800      	cmp	r0, #0
 8013fc4:	d104      	bne.n	8013fd0 <__strtok_r+0x10>
 8013fc6:	6810      	ldr	r0, [r2, #0]
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	d101      	bne.n	8013fd0 <__strtok_r+0x10>
 8013fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fce:	0020      	movs	r0, r4
 8013fd0:	000e      	movs	r6, r1
 8013fd2:	7805      	ldrb	r5, [r0, #0]
 8013fd4:	1c44      	adds	r4, r0, #1
 8013fd6:	7837      	ldrb	r7, [r6, #0]
 8013fd8:	2f00      	cmp	r7, #0
 8013fda:	d104      	bne.n	8013fe6 <__strtok_r+0x26>
 8013fdc:	2d00      	cmp	r5, #0
 8013fde:	d110      	bne.n	8014002 <__strtok_r+0x42>
 8013fe0:	6015      	str	r5, [r2, #0]
 8013fe2:	0028      	movs	r0, r5
 8013fe4:	e7f2      	b.n	8013fcc <__strtok_r+0xc>
 8013fe6:	3601      	adds	r6, #1
 8013fe8:	42bd      	cmp	r5, r7
 8013fea:	d1f4      	bne.n	8013fd6 <__strtok_r+0x16>
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d1ee      	bne.n	8013fce <__strtok_r+0xe>
 8013ff0:	6014      	str	r4, [r2, #0]
 8013ff2:	7003      	strb	r3, [r0, #0]
 8013ff4:	e7ea      	b.n	8013fcc <__strtok_r+0xc>
 8013ff6:	0033      	movs	r3, r6
 8013ff8:	e00d      	b.n	8014016 <__strtok_r+0x56>
 8013ffa:	3501      	adds	r5, #1
 8013ffc:	2f00      	cmp	r7, #0
 8013ffe:	d103      	bne.n	8014008 <__strtok_r+0x48>
 8014000:	001c      	movs	r4, r3
 8014002:	000d      	movs	r5, r1
 8014004:	7826      	ldrb	r6, [r4, #0]
 8014006:	1c63      	adds	r3, r4, #1
 8014008:	782f      	ldrb	r7, [r5, #0]
 801400a:	42be      	cmp	r6, r7
 801400c:	d1f5      	bne.n	8013ffa <__strtok_r+0x3a>
 801400e:	2e00      	cmp	r6, #0
 8014010:	d0f1      	beq.n	8013ff6 <__strtok_r+0x36>
 8014012:	2100      	movs	r1, #0
 8014014:	7021      	strb	r1, [r4, #0]
 8014016:	6013      	str	r3, [r2, #0]
 8014018:	e7d8      	b.n	8013fcc <__strtok_r+0xc>
	...

0801401c <_strtol_l.isra.0>:
 801401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801401e:	001f      	movs	r7, r3
 8014020:	000e      	movs	r6, r1
 8014022:	b087      	sub	sp, #28
 8014024:	9005      	str	r0, [sp, #20]
 8014026:	9101      	str	r1, [sp, #4]
 8014028:	9202      	str	r2, [sp, #8]
 801402a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801402c:	7834      	ldrb	r4, [r6, #0]
 801402e:	f7fe fc9f 	bl	8012970 <__locale_ctype_ptr_l>
 8014032:	2208      	movs	r2, #8
 8014034:	1900      	adds	r0, r0, r4
 8014036:	7843      	ldrb	r3, [r0, #1]
 8014038:	1c75      	adds	r5, r6, #1
 801403a:	4013      	ands	r3, r2
 801403c:	d136      	bne.n	80140ac <_strtol_l.isra.0+0x90>
 801403e:	2c2d      	cmp	r4, #45	; 0x2d
 8014040:	d136      	bne.n	80140b0 <_strtol_l.isra.0+0x94>
 8014042:	1cb5      	adds	r5, r6, #2
 8014044:	7874      	ldrb	r4, [r6, #1]
 8014046:	2601      	movs	r6, #1
 8014048:	2f00      	cmp	r7, #0
 801404a:	d062      	beq.n	8014112 <_strtol_l.isra.0+0xf6>
 801404c:	2f10      	cmp	r7, #16
 801404e:	d109      	bne.n	8014064 <_strtol_l.isra.0+0x48>
 8014050:	2c30      	cmp	r4, #48	; 0x30
 8014052:	d107      	bne.n	8014064 <_strtol_l.isra.0+0x48>
 8014054:	2220      	movs	r2, #32
 8014056:	782b      	ldrb	r3, [r5, #0]
 8014058:	4393      	bics	r3, r2
 801405a:	2b58      	cmp	r3, #88	; 0x58
 801405c:	d154      	bne.n	8014108 <_strtol_l.isra.0+0xec>
 801405e:	2710      	movs	r7, #16
 8014060:	786c      	ldrb	r4, [r5, #1]
 8014062:	3502      	adds	r5, #2
 8014064:	4b2d      	ldr	r3, [pc, #180]	; (801411c <_strtol_l.isra.0+0x100>)
 8014066:	0039      	movs	r1, r7
 8014068:	18f3      	adds	r3, r6, r3
 801406a:	0018      	movs	r0, r3
 801406c:	9303      	str	r3, [sp, #12]
 801406e:	f7ec f8f5 	bl	800025c <__aeabi_uidivmod>
 8014072:	9104      	str	r1, [sp, #16]
 8014074:	2101      	movs	r1, #1
 8014076:	2300      	movs	r3, #0
 8014078:	4249      	negs	r1, r1
 801407a:	0002      	movs	r2, r0
 801407c:	468c      	mov	ip, r1
 801407e:	0018      	movs	r0, r3
 8014080:	0021      	movs	r1, r4
 8014082:	3930      	subs	r1, #48	; 0x30
 8014084:	2909      	cmp	r1, #9
 8014086:	d81a      	bhi.n	80140be <_strtol_l.isra.0+0xa2>
 8014088:	000c      	movs	r4, r1
 801408a:	42a7      	cmp	r7, r4
 801408c:	dd23      	ble.n	80140d6 <_strtol_l.isra.0+0xba>
 801408e:	1c59      	adds	r1, r3, #1
 8014090:	d009      	beq.n	80140a6 <_strtol_l.isra.0+0x8a>
 8014092:	4663      	mov	r3, ip
 8014094:	4282      	cmp	r2, r0
 8014096:	d306      	bcc.n	80140a6 <_strtol_l.isra.0+0x8a>
 8014098:	d102      	bne.n	80140a0 <_strtol_l.isra.0+0x84>
 801409a:	9904      	ldr	r1, [sp, #16]
 801409c:	42a1      	cmp	r1, r4
 801409e:	db02      	blt.n	80140a6 <_strtol_l.isra.0+0x8a>
 80140a0:	2301      	movs	r3, #1
 80140a2:	4378      	muls	r0, r7
 80140a4:	1820      	adds	r0, r4, r0
 80140a6:	782c      	ldrb	r4, [r5, #0]
 80140a8:	3501      	adds	r5, #1
 80140aa:	e7e9      	b.n	8014080 <_strtol_l.isra.0+0x64>
 80140ac:	002e      	movs	r6, r5
 80140ae:	e7bc      	b.n	801402a <_strtol_l.isra.0+0xe>
 80140b0:	2c2b      	cmp	r4, #43	; 0x2b
 80140b2:	d001      	beq.n	80140b8 <_strtol_l.isra.0+0x9c>
 80140b4:	001e      	movs	r6, r3
 80140b6:	e7c7      	b.n	8014048 <_strtol_l.isra.0+0x2c>
 80140b8:	1cb5      	adds	r5, r6, #2
 80140ba:	7874      	ldrb	r4, [r6, #1]
 80140bc:	e7fa      	b.n	80140b4 <_strtol_l.isra.0+0x98>
 80140be:	0021      	movs	r1, r4
 80140c0:	3941      	subs	r1, #65	; 0x41
 80140c2:	2919      	cmp	r1, #25
 80140c4:	d801      	bhi.n	80140ca <_strtol_l.isra.0+0xae>
 80140c6:	3c37      	subs	r4, #55	; 0x37
 80140c8:	e7df      	b.n	801408a <_strtol_l.isra.0+0x6e>
 80140ca:	0021      	movs	r1, r4
 80140cc:	3961      	subs	r1, #97	; 0x61
 80140ce:	2919      	cmp	r1, #25
 80140d0:	d801      	bhi.n	80140d6 <_strtol_l.isra.0+0xba>
 80140d2:	3c57      	subs	r4, #87	; 0x57
 80140d4:	e7d9      	b.n	801408a <_strtol_l.isra.0+0x6e>
 80140d6:	1c5a      	adds	r2, r3, #1
 80140d8:	d108      	bne.n	80140ec <_strtol_l.isra.0+0xd0>
 80140da:	9a05      	ldr	r2, [sp, #20]
 80140dc:	3323      	adds	r3, #35	; 0x23
 80140de:	6013      	str	r3, [r2, #0]
 80140e0:	9b02      	ldr	r3, [sp, #8]
 80140e2:	9803      	ldr	r0, [sp, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d109      	bne.n	80140fc <_strtol_l.isra.0+0xe0>
 80140e8:	b007      	add	sp, #28
 80140ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ec:	2e00      	cmp	r6, #0
 80140ee:	d000      	beq.n	80140f2 <_strtol_l.isra.0+0xd6>
 80140f0:	4240      	negs	r0, r0
 80140f2:	9a02      	ldr	r2, [sp, #8]
 80140f4:	2a00      	cmp	r2, #0
 80140f6:	d0f7      	beq.n	80140e8 <_strtol_l.isra.0+0xcc>
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d001      	beq.n	8014100 <_strtol_l.isra.0+0xe4>
 80140fc:	1e6b      	subs	r3, r5, #1
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	9b02      	ldr	r3, [sp, #8]
 8014102:	9a01      	ldr	r2, [sp, #4]
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	e7ef      	b.n	80140e8 <_strtol_l.isra.0+0xcc>
 8014108:	2430      	movs	r4, #48	; 0x30
 801410a:	2f00      	cmp	r7, #0
 801410c:	d1aa      	bne.n	8014064 <_strtol_l.isra.0+0x48>
 801410e:	2708      	movs	r7, #8
 8014110:	e7a8      	b.n	8014064 <_strtol_l.isra.0+0x48>
 8014112:	2c30      	cmp	r4, #48	; 0x30
 8014114:	d09e      	beq.n	8014054 <_strtol_l.isra.0+0x38>
 8014116:	270a      	movs	r7, #10
 8014118:	e7a4      	b.n	8014064 <_strtol_l.isra.0+0x48>
 801411a:	46c0      	nop			; (mov r8, r8)
 801411c:	7fffffff 	.word	0x7fffffff

08014120 <strtol>:
 8014120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014122:	0013      	movs	r3, r2
 8014124:	4a06      	ldr	r2, [pc, #24]	; (8014140 <strtol+0x20>)
 8014126:	0005      	movs	r5, r0
 8014128:	6810      	ldr	r0, [r2, #0]
 801412a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801412c:	2c00      	cmp	r4, #0
 801412e:	d100      	bne.n	8014132 <strtol+0x12>
 8014130:	4c04      	ldr	r4, [pc, #16]	; (8014144 <strtol+0x24>)
 8014132:	000a      	movs	r2, r1
 8014134:	9400      	str	r4, [sp, #0]
 8014136:	0029      	movs	r1, r5
 8014138:	f7ff ff70 	bl	801401c <_strtol_l.isra.0>
 801413c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801413e:	46c0      	nop			; (mov r8, r8)
 8014140:	200000ac 	.word	0x200000ac
 8014144:	200004d8 	.word	0x200004d8

08014148 <_svfprintf_r>:
 8014148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801414a:	b0d9      	sub	sp, #356	; 0x164
 801414c:	910b      	str	r1, [sp, #44]	; 0x2c
 801414e:	9209      	str	r2, [sp, #36]	; 0x24
 8014150:	001c      	movs	r4, r3
 8014152:	900a      	str	r0, [sp, #40]	; 0x28
 8014154:	f002 fd26 	bl	8016ba4 <_localeconv_r>
 8014158:	6803      	ldr	r3, [r0, #0]
 801415a:	0018      	movs	r0, r3
 801415c:	931c      	str	r3, [sp, #112]	; 0x70
 801415e:	f7eb ffdb 	bl	8000118 <strlen>
 8014162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014164:	9014      	str	r0, [sp, #80]	; 0x50
 8014166:	899b      	ldrh	r3, [r3, #12]
 8014168:	061b      	lsls	r3, r3, #24
 801416a:	d518      	bpl.n	801419e <_svfprintf_r+0x56>
 801416c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801416e:	691b      	ldr	r3, [r3, #16]
 8014170:	9308      	str	r3, [sp, #32]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d113      	bne.n	801419e <_svfprintf_r+0x56>
 8014176:	2140      	movs	r1, #64	; 0x40
 8014178:	980a      	ldr	r0, [sp, #40]	; 0x28
 801417a:	f7fe fc1f 	bl	80129bc <_malloc_r>
 801417e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014180:	6018      	str	r0, [r3, #0]
 8014182:	6118      	str	r0, [r3, #16]
 8014184:	2800      	cmp	r0, #0
 8014186:	d107      	bne.n	8014198 <_svfprintf_r+0x50>
 8014188:	230c      	movs	r3, #12
 801418a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801418c:	6013      	str	r3, [r2, #0]
 801418e:	3b0d      	subs	r3, #13
 8014190:	9315      	str	r3, [sp, #84]	; 0x54
 8014192:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014194:	b059      	add	sp, #356	; 0x164
 8014196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014198:	2340      	movs	r3, #64	; 0x40
 801419a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801419c:	6153      	str	r3, [r2, #20]
 801419e:	2600      	movs	r6, #0
 80141a0:	af2f      	add	r7, sp, #188	; 0xbc
 80141a2:	972c      	str	r7, [sp, #176]	; 0xb0
 80141a4:	962e      	str	r6, [sp, #184]	; 0xb8
 80141a6:	962d      	str	r6, [sp, #180]	; 0xb4
 80141a8:	960d      	str	r6, [sp, #52]	; 0x34
 80141aa:	961a      	str	r6, [sp, #104]	; 0x68
 80141ac:	9619      	str	r6, [sp, #100]	; 0x64
 80141ae:	961e      	str	r6, [sp, #120]	; 0x78
 80141b0:	961d      	str	r6, [sp, #116]	; 0x74
 80141b2:	9613      	str	r6, [sp, #76]	; 0x4c
 80141b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80141b6:	961f      	str	r6, [sp, #124]	; 0x7c
 80141b8:	9615      	str	r6, [sp, #84]	; 0x54
 80141ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80141bc:	782b      	ldrb	r3, [r5, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d002      	beq.n	80141c8 <_svfprintf_r+0x80>
 80141c2:	2b25      	cmp	r3, #37	; 0x25
 80141c4:	d000      	beq.n	80141c8 <_svfprintf_r+0x80>
 80141c6:	e095      	b.n	80142f4 <_svfprintf_r+0x1ac>
 80141c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ca:	1aee      	subs	r6, r5, r3
 80141cc:	d017      	beq.n	80141fe <_svfprintf_r+0xb6>
 80141ce:	603b      	str	r3, [r7, #0]
 80141d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141d2:	607e      	str	r6, [r7, #4]
 80141d4:	199b      	adds	r3, r3, r6
 80141d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80141d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80141da:	3708      	adds	r7, #8
 80141dc:	9308      	str	r3, [sp, #32]
 80141de:	3301      	adds	r3, #1
 80141e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80141e2:	2b07      	cmp	r3, #7
 80141e4:	dd08      	ble.n	80141f8 <_svfprintf_r+0xb0>
 80141e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80141e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141ec:	f003 f900 	bl	80173f0 <__ssprint_r>
 80141f0:	2800      	cmp	r0, #0
 80141f2:	d000      	beq.n	80141f6 <_svfprintf_r+0xae>
 80141f4:	e2d9      	b.n	80147aa <_svfprintf_r+0x662>
 80141f6:	af2f      	add	r7, sp, #188	; 0xbc
 80141f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141fa:	199b      	adds	r3, r3, r6
 80141fc:	9315      	str	r3, [sp, #84]	; 0x54
 80141fe:	782b      	ldrb	r3, [r5, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <_svfprintf_r+0xc0>
 8014204:	f001 f9e5 	bl	80155d2 <_svfprintf_r+0x148a>
 8014208:	1c6b      	adds	r3, r5, #1
 801420a:	221b      	movs	r2, #27
 801420c:	9311      	str	r3, [sp, #68]	; 0x44
 801420e:	2300      	movs	r3, #0
 8014210:	a91e      	add	r1, sp, #120	; 0x78
 8014212:	1852      	adds	r2, r2, r1
 8014214:	7013      	strb	r3, [r2, #0]
 8014216:	2201      	movs	r2, #1
 8014218:	001e      	movs	r6, r3
 801421a:	2520      	movs	r5, #32
 801421c:	4252      	negs	r2, r2
 801421e:	9208      	str	r2, [sp, #32]
 8014220:	9316      	str	r3, [sp, #88]	; 0x58
 8014222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	930e      	str	r3, [sp, #56]	; 0x38
 8014228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801422a:	3301      	adds	r3, #1
 801422c:	9311      	str	r3, [sp, #68]	; 0x44
 801422e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014230:	3820      	subs	r0, #32
 8014232:	285a      	cmp	r0, #90	; 0x5a
 8014234:	d901      	bls.n	801423a <_svfprintf_r+0xf2>
 8014236:	f000 fe3d 	bl	8014eb4 <_svfprintf_r+0xd6c>
 801423a:	f7eb ff7f 	bl	800013c <__gnu_thumb1_case_shi>
 801423e:	009e      	.short	0x009e
 8014240:	063b063b 	.word	0x063b063b
 8014244:	063b00a7 	.word	0x063b00a7
 8014248:	063b063b 	.word	0x063b063b
 801424c:	063b0080 	.word	0x063b0080
 8014250:	00a9063b 	.word	0x00a9063b
 8014254:	063b00b3 	.word	0x063b00b3
 8014258:	00b900b1 	.word	0x00b900b1
 801425c:	00dd063b 	.word	0x00dd063b
 8014260:	00df00df 	.word	0x00df00df
 8014264:	00df00df 	.word	0x00df00df
 8014268:	00df00df 	.word	0x00df00df
 801426c:	00df00df 	.word	0x00df00df
 8014270:	063b00df 	.word	0x063b00df
 8014274:	063b063b 	.word	0x063b063b
 8014278:	063b063b 	.word	0x063b063b
 801427c:	063b063b 	.word	0x063b063b
 8014280:	063b0240 	.word	0x063b0240
 8014284:	01fd010a 	.word	0x01fd010a
 8014288:	02400240 	.word	0x02400240
 801428c:	063b0240 	.word	0x063b0240
 8014290:	063b063b 	.word	0x063b063b
 8014294:	00f1063b 	.word	0x00f1063b
 8014298:	063b063b 	.word	0x063b063b
 801429c:	063b04e2 	.word	0x063b04e2
 80142a0:	063b063b 	.word	0x063b063b
 80142a4:	063b0537 	.word	0x063b0537
 80142a8:	063b0557 	.word	0x063b0557
 80142ac:	005d063b 	.word	0x005d063b
 80142b0:	063b063b 	.word	0x063b063b
 80142b4:	063b063b 	.word	0x063b063b
 80142b8:	063b063b 	.word	0x063b063b
 80142bc:	063b063b 	.word	0x063b063b
 80142c0:	063b0240 	.word	0x063b0240
 80142c4:	01ff010a 	.word	0x01ff010a
 80142c8:	02400240 	.word	0x02400240
 80142cc:	00f30240 	.word	0x00f30240
 80142d0:	010601ff 	.word	0x010601ff
 80142d4:	00ff063b 	.word	0x00ff063b
 80142d8:	04c5063b 	.word	0x04c5063b
 80142dc:	052704e4 	.word	0x052704e4
 80142e0:	063b0106 	.word	0x063b0106
 80142e4:	fff20537 	.word	0xfff20537
 80142e8:	063b0559 	.word	0x063b0559
 80142ec:	0582063b 	.word	0x0582063b
 80142f0:	fff2063b 	.word	0xfff2063b
 80142f4:	3501      	adds	r5, #1
 80142f6:	e761      	b.n	80141bc <_svfprintf_r+0x74>
 80142f8:	4bcb      	ldr	r3, [pc, #812]	; (8014628 <_svfprintf_r+0x4e0>)
 80142fa:	2220      	movs	r2, #32
 80142fc:	931e      	str	r3, [sp, #120]	; 0x78
 80142fe:	4032      	ands	r2, r6
 8014300:	d101      	bne.n	8014306 <_svfprintf_r+0x1be>
 8014302:	f000 fd21 	bl	8014d48 <_svfprintf_r+0xc00>
 8014306:	2307      	movs	r3, #7
 8014308:	3407      	adds	r4, #7
 801430a:	439c      	bics	r4, r3
 801430c:	0023      	movs	r3, r4
 801430e:	3308      	adds	r3, #8
 8014310:	9312      	str	r3, [sp, #72]	; 0x48
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	6864      	ldr	r4, [r4, #4]
 8014316:	9306      	str	r3, [sp, #24]
 8014318:	9407      	str	r4, [sp, #28]
 801431a:	07f3      	lsls	r3, r6, #31
 801431c:	d50a      	bpl.n	8014334 <_svfprintf_r+0x1ec>
 801431e:	9b06      	ldr	r3, [sp, #24]
 8014320:	9a07      	ldr	r2, [sp, #28]
 8014322:	4313      	orrs	r3, r2
 8014324:	d006      	beq.n	8014334 <_svfprintf_r+0x1ec>
 8014326:	2230      	movs	r2, #48	; 0x30
 8014328:	ab25      	add	r3, sp, #148	; 0x94
 801432a:	701a      	strb	r2, [r3, #0]
 801432c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801432e:	705a      	strb	r2, [r3, #1]
 8014330:	2302      	movs	r3, #2
 8014332:	431e      	orrs	r6, r3
 8014334:	4bbd      	ldr	r3, [pc, #756]	; (801462c <_svfprintf_r+0x4e4>)
 8014336:	401e      	ands	r6, r3
 8014338:	2302      	movs	r3, #2
 801433a:	f000 fc74 	bl	8014c26 <_svfprintf_r+0xade>
 801433e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014340:	f002 fc30 	bl	8016ba4 <_localeconv_r>
 8014344:	6843      	ldr	r3, [r0, #4]
 8014346:	0018      	movs	r0, r3
 8014348:	931f      	str	r3, [sp, #124]	; 0x7c
 801434a:	f7eb fee5 	bl	8000118 <strlen>
 801434e:	901b      	str	r0, [sp, #108]	; 0x6c
 8014350:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014352:	f002 fc27 	bl	8016ba4 <_localeconv_r>
 8014356:	6883      	ldr	r3, [r0, #8]
 8014358:	9313      	str	r3, [sp, #76]	; 0x4c
 801435a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801435c:	2b00      	cmp	r3, #0
 801435e:	d100      	bne.n	8014362 <_svfprintf_r+0x21a>
 8014360:	e75f      	b.n	8014222 <_svfprintf_r+0xda>
 8014362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014364:	2b00      	cmp	r3, #0
 8014366:	d100      	bne.n	801436a <_svfprintf_r+0x222>
 8014368:	e75b      	b.n	8014222 <_svfprintf_r+0xda>
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d100      	bne.n	8014372 <_svfprintf_r+0x22a>
 8014370:	e757      	b.n	8014222 <_svfprintf_r+0xda>
 8014372:	2380      	movs	r3, #128	; 0x80
 8014374:	00db      	lsls	r3, r3, #3
 8014376:	431e      	orrs	r6, r3
 8014378:	e753      	b.n	8014222 <_svfprintf_r+0xda>
 801437a:	231b      	movs	r3, #27
 801437c:	aa1e      	add	r2, sp, #120	; 0x78
 801437e:	189b      	adds	r3, r3, r2
 8014380:	781a      	ldrb	r2, [r3, #0]
 8014382:	2a00      	cmp	r2, #0
 8014384:	d000      	beq.n	8014388 <_svfprintf_r+0x240>
 8014386:	e74c      	b.n	8014222 <_svfprintf_r+0xda>
 8014388:	701d      	strb	r5, [r3, #0]
 801438a:	e74a      	b.n	8014222 <_svfprintf_r+0xda>
 801438c:	2301      	movs	r3, #1
 801438e:	e7f2      	b.n	8014376 <_svfprintf_r+0x22e>
 8014390:	6823      	ldr	r3, [r4, #0]
 8014392:	3404      	adds	r4, #4
 8014394:	9316      	str	r3, [sp, #88]	; 0x58
 8014396:	2b00      	cmp	r3, #0
 8014398:	db00      	blt.n	801439c <_svfprintf_r+0x254>
 801439a:	e742      	b.n	8014222 <_svfprintf_r+0xda>
 801439c:	425b      	negs	r3, r3
 801439e:	9316      	str	r3, [sp, #88]	; 0x58
 80143a0:	2304      	movs	r3, #4
 80143a2:	e7e8      	b.n	8014376 <_svfprintf_r+0x22e>
 80143a4:	231b      	movs	r3, #27
 80143a6:	aa1e      	add	r2, sp, #120	; 0x78
 80143a8:	189b      	adds	r3, r3, r2
 80143aa:	222b      	movs	r2, #43	; 0x2b
 80143ac:	701a      	strb	r2, [r3, #0]
 80143ae:	e738      	b.n	8014222 <_svfprintf_r+0xda>
 80143b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143b4:	7812      	ldrb	r2, [r2, #0]
 80143b6:	3301      	adds	r3, #1
 80143b8:	920e      	str	r2, [sp, #56]	; 0x38
 80143ba:	2a2a      	cmp	r2, #42	; 0x2a
 80143bc:	d008      	beq.n	80143d0 <_svfprintf_r+0x288>
 80143be:	2200      	movs	r2, #0
 80143c0:	9208      	str	r2, [sp, #32]
 80143c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80143c4:	001a      	movs	r2, r3
 80143c6:	3930      	subs	r1, #48	; 0x30
 80143c8:	2909      	cmp	r1, #9
 80143ca:	d90c      	bls.n	80143e6 <_svfprintf_r+0x29e>
 80143cc:	9211      	str	r2, [sp, #68]	; 0x44
 80143ce:	e72e      	b.n	801422e <_svfprintf_r+0xe6>
 80143d0:	6821      	ldr	r1, [r4, #0]
 80143d2:	1d22      	adds	r2, r4, #4
 80143d4:	9108      	str	r1, [sp, #32]
 80143d6:	2900      	cmp	r1, #0
 80143d8:	da02      	bge.n	80143e0 <_svfprintf_r+0x298>
 80143da:	2101      	movs	r1, #1
 80143dc:	4249      	negs	r1, r1
 80143de:	9108      	str	r1, [sp, #32]
 80143e0:	0014      	movs	r4, r2
 80143e2:	9311      	str	r3, [sp, #68]	; 0x44
 80143e4:	e71d      	b.n	8014222 <_svfprintf_r+0xda>
 80143e6:	200a      	movs	r0, #10
 80143e8:	9a08      	ldr	r2, [sp, #32]
 80143ea:	4342      	muls	r2, r0
 80143ec:	1852      	adds	r2, r2, r1
 80143ee:	9208      	str	r2, [sp, #32]
 80143f0:	781a      	ldrb	r2, [r3, #0]
 80143f2:	3301      	adds	r3, #1
 80143f4:	920e      	str	r2, [sp, #56]	; 0x38
 80143f6:	e7e4      	b.n	80143c2 <_svfprintf_r+0x27a>
 80143f8:	2380      	movs	r3, #128	; 0x80
 80143fa:	e7bc      	b.n	8014376 <_svfprintf_r+0x22e>
 80143fc:	2300      	movs	r3, #0
 80143fe:	9316      	str	r3, [sp, #88]	; 0x58
 8014400:	220a      	movs	r2, #10
 8014402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014404:	4353      	muls	r3, r2
 8014406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014408:	3a30      	subs	r2, #48	; 0x30
 801440a:	18d3      	adds	r3, r2, r3
 801440c:	9316      	str	r3, [sp, #88]	; 0x58
 801440e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014410:	1c5a      	adds	r2, r3, #1
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	9211      	str	r2, [sp, #68]	; 0x44
 8014416:	930e      	str	r3, [sp, #56]	; 0x38
 8014418:	3b30      	subs	r3, #48	; 0x30
 801441a:	2b09      	cmp	r3, #9
 801441c:	d9f0      	bls.n	8014400 <_svfprintf_r+0x2b8>
 801441e:	e7d5      	b.n	80143cc <_svfprintf_r+0x284>
 8014420:	2308      	movs	r3, #8
 8014422:	e7a8      	b.n	8014376 <_svfprintf_r+0x22e>
 8014424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2b68      	cmp	r3, #104	; 0x68
 801442a:	d105      	bne.n	8014438 <_svfprintf_r+0x2f0>
 801442c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801442e:	3301      	adds	r3, #1
 8014430:	9311      	str	r3, [sp, #68]	; 0x44
 8014432:	2380      	movs	r3, #128	; 0x80
 8014434:	009b      	lsls	r3, r3, #2
 8014436:	e79e      	b.n	8014376 <_svfprintf_r+0x22e>
 8014438:	2340      	movs	r3, #64	; 0x40
 801443a:	e79c      	b.n	8014376 <_svfprintf_r+0x22e>
 801443c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	2b6c      	cmp	r3, #108	; 0x6c
 8014442:	d104      	bne.n	801444e <_svfprintf_r+0x306>
 8014444:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014446:	3301      	adds	r3, #1
 8014448:	9311      	str	r3, [sp, #68]	; 0x44
 801444a:	432e      	orrs	r6, r5
 801444c:	e6e9      	b.n	8014222 <_svfprintf_r+0xda>
 801444e:	2310      	movs	r3, #16
 8014450:	e791      	b.n	8014376 <_svfprintf_r+0x22e>
 8014452:	1d23      	adds	r3, r4, #4
 8014454:	6822      	ldr	r2, [r4, #0]
 8014456:	9312      	str	r3, [sp, #72]	; 0x48
 8014458:	ab3f      	add	r3, sp, #252	; 0xfc
 801445a:	701a      	strb	r2, [r3, #0]
 801445c:	221b      	movs	r2, #27
 801445e:	2000      	movs	r0, #0
 8014460:	a91e      	add	r1, sp, #120	; 0x78
 8014462:	1852      	adds	r2, r2, r1
 8014464:	7010      	strb	r0, [r2, #0]
 8014466:	2201      	movs	r2, #1
 8014468:	0005      	movs	r5, r0
 801446a:	900c      	str	r0, [sp, #48]	; 0x30
 801446c:	9208      	str	r2, [sp, #32]
 801446e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014470:	9010      	str	r0, [sp, #64]	; 0x40
 8014472:	900f      	str	r0, [sp, #60]	; 0x3c
 8014474:	9309      	str	r3, [sp, #36]	; 0x24
 8014476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014478:	9a08      	ldr	r2, [sp, #32]
 801447a:	9318      	str	r3, [sp, #96]	; 0x60
 801447c:	4293      	cmp	r3, r2
 801447e:	da00      	bge.n	8014482 <_svfprintf_r+0x33a>
 8014480:	9218      	str	r2, [sp, #96]	; 0x60
 8014482:	231b      	movs	r3, #27
 8014484:	aa1e      	add	r2, sp, #120	; 0x78
 8014486:	189b      	adds	r3, r3, r2
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	1e5a      	subs	r2, r3, #1
 801448c:	4193      	sbcs	r3, r2
 801448e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014490:	18d3      	adds	r3, r2, r3
 8014492:	9318      	str	r3, [sp, #96]	; 0x60
 8014494:	2302      	movs	r3, #2
 8014496:	4033      	ands	r3, r6
 8014498:	9320      	str	r3, [sp, #128]	; 0x80
 801449a:	d002      	beq.n	80144a2 <_svfprintf_r+0x35a>
 801449c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801449e:	3302      	adds	r3, #2
 80144a0:	9318      	str	r3, [sp, #96]	; 0x60
 80144a2:	2384      	movs	r3, #132	; 0x84
 80144a4:	4033      	ands	r3, r6
 80144a6:	9321      	str	r3, [sp, #132]	; 0x84
 80144a8:	d121      	bne.n	80144ee <_svfprintf_r+0x3a6>
 80144aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144ae:	1a9c      	subs	r4, r3, r2
 80144b0:	2c00      	cmp	r4, #0
 80144b2:	dd1c      	ble.n	80144ee <_svfprintf_r+0x3a6>
 80144b4:	0039      	movs	r1, r7
 80144b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144b8:	485d      	ldr	r0, [pc, #372]	; (8014630 <_svfprintf_r+0x4e8>)
 80144ba:	9322      	str	r3, [sp, #136]	; 0x88
 80144bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80144be:	3301      	adds	r3, #1
 80144c0:	3108      	adds	r1, #8
 80144c2:	6038      	str	r0, [r7, #0]
 80144c4:	2c10      	cmp	r4, #16
 80144c6:	dd01      	ble.n	80144cc <_svfprintf_r+0x384>
 80144c8:	f000 fd08 	bl	8014edc <_svfprintf_r+0xd94>
 80144cc:	607c      	str	r4, [r7, #4]
 80144ce:	18a4      	adds	r4, r4, r2
 80144d0:	942e      	str	r4, [sp, #184]	; 0xb8
 80144d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80144d4:	000f      	movs	r7, r1
 80144d6:	2b07      	cmp	r3, #7
 80144d8:	dd09      	ble.n	80144ee <_svfprintf_r+0x3a6>
 80144da:	aa2c      	add	r2, sp, #176	; 0xb0
 80144dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144e0:	f002 ff86 	bl	80173f0 <__ssprint_r>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d001      	beq.n	80144ec <_svfprintf_r+0x3a4>
 80144e8:	f001 f852 	bl	8015590 <_svfprintf_r+0x1448>
 80144ec:	af2f      	add	r7, sp, #188	; 0xbc
 80144ee:	231b      	movs	r3, #27
 80144f0:	aa1e      	add	r2, sp, #120	; 0x78
 80144f2:	189b      	adds	r3, r3, r2
 80144f4:	781a      	ldrb	r2, [r3, #0]
 80144f6:	2a00      	cmp	r2, #0
 80144f8:	d017      	beq.n	801452a <_svfprintf_r+0x3e2>
 80144fa:	603b      	str	r3, [r7, #0]
 80144fc:	2301      	movs	r3, #1
 80144fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014500:	607b      	str	r3, [r7, #4]
 8014502:	0013      	movs	r3, r2
 8014504:	3301      	adds	r3, #1
 8014506:	932e      	str	r3, [sp, #184]	; 0xb8
 8014508:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801450a:	3708      	adds	r7, #8
 801450c:	9322      	str	r3, [sp, #136]	; 0x88
 801450e:	3301      	adds	r3, #1
 8014510:	932d      	str	r3, [sp, #180]	; 0xb4
 8014512:	2b07      	cmp	r3, #7
 8014514:	dd09      	ble.n	801452a <_svfprintf_r+0x3e2>
 8014516:	aa2c      	add	r2, sp, #176	; 0xb0
 8014518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801451a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801451c:	f002 ff68 	bl	80173f0 <__ssprint_r>
 8014520:	2800      	cmp	r0, #0
 8014522:	d001      	beq.n	8014528 <_svfprintf_r+0x3e0>
 8014524:	f001 f834 	bl	8015590 <_svfprintf_r+0x1448>
 8014528:	af2f      	add	r7, sp, #188	; 0xbc
 801452a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801452c:	2b00      	cmp	r3, #0
 801452e:	d019      	beq.n	8014564 <_svfprintf_r+0x41c>
 8014530:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014532:	9320      	str	r3, [sp, #128]	; 0x80
 8014534:	ab25      	add	r3, sp, #148	; 0x94
 8014536:	603b      	str	r3, [r7, #0]
 8014538:	2302      	movs	r3, #2
 801453a:	607b      	str	r3, [r7, #4]
 801453c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801453e:	3708      	adds	r7, #8
 8014540:	3302      	adds	r3, #2
 8014542:	932e      	str	r3, [sp, #184]	; 0xb8
 8014544:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014546:	9320      	str	r3, [sp, #128]	; 0x80
 8014548:	3301      	adds	r3, #1
 801454a:	932d      	str	r3, [sp, #180]	; 0xb4
 801454c:	2b07      	cmp	r3, #7
 801454e:	dd09      	ble.n	8014564 <_svfprintf_r+0x41c>
 8014550:	aa2c      	add	r2, sp, #176	; 0xb0
 8014552:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014554:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014556:	f002 ff4b 	bl	80173f0 <__ssprint_r>
 801455a:	2800      	cmp	r0, #0
 801455c:	d001      	beq.n	8014562 <_svfprintf_r+0x41a>
 801455e:	f001 f817 	bl	8015590 <_svfprintf_r+0x1448>
 8014562:	af2f      	add	r7, sp, #188	; 0xbc
 8014564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014566:	2b80      	cmp	r3, #128	; 0x80
 8014568:	d121      	bne.n	80145ae <_svfprintf_r+0x466>
 801456a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801456c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801456e:	1a9c      	subs	r4, r3, r2
 8014570:	2c00      	cmp	r4, #0
 8014572:	dd1c      	ble.n	80145ae <_svfprintf_r+0x466>
 8014574:	0039      	movs	r1, r7
 8014576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014578:	482e      	ldr	r0, [pc, #184]	; (8014634 <_svfprintf_r+0x4ec>)
 801457a:	9320      	str	r3, [sp, #128]	; 0x80
 801457c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801457e:	3301      	adds	r3, #1
 8014580:	3108      	adds	r1, #8
 8014582:	6038      	str	r0, [r7, #0]
 8014584:	2c10      	cmp	r4, #16
 8014586:	dd01      	ble.n	801458c <_svfprintf_r+0x444>
 8014588:	f000 fcbc 	bl	8014f04 <_svfprintf_r+0xdbc>
 801458c:	607c      	str	r4, [r7, #4]
 801458e:	18a4      	adds	r4, r4, r2
 8014590:	942e      	str	r4, [sp, #184]	; 0xb8
 8014592:	932d      	str	r3, [sp, #180]	; 0xb4
 8014594:	000f      	movs	r7, r1
 8014596:	2b07      	cmp	r3, #7
 8014598:	dd09      	ble.n	80145ae <_svfprintf_r+0x466>
 801459a:	aa2c      	add	r2, sp, #176	; 0xb0
 801459c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801459e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145a0:	f002 ff26 	bl	80173f0 <__ssprint_r>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d001      	beq.n	80145ac <_svfprintf_r+0x464>
 80145a8:	f000 fff2 	bl	8015590 <_svfprintf_r+0x1448>
 80145ac:	af2f      	add	r7, sp, #188	; 0xbc
 80145ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145b0:	9a08      	ldr	r2, [sp, #32]
 80145b2:	1a9c      	subs	r4, r3, r2
 80145b4:	2c00      	cmp	r4, #0
 80145b6:	dd1c      	ble.n	80145f2 <_svfprintf_r+0x4aa>
 80145b8:	0039      	movs	r1, r7
 80145ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145bc:	481d      	ldr	r0, [pc, #116]	; (8014634 <_svfprintf_r+0x4ec>)
 80145be:	9317      	str	r3, [sp, #92]	; 0x5c
 80145c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80145c2:	3301      	adds	r3, #1
 80145c4:	3108      	adds	r1, #8
 80145c6:	6038      	str	r0, [r7, #0]
 80145c8:	2c10      	cmp	r4, #16
 80145ca:	dd01      	ble.n	80145d0 <_svfprintf_r+0x488>
 80145cc:	f000 fcb4 	bl	8014f38 <_svfprintf_r+0xdf0>
 80145d0:	18a2      	adds	r2, r4, r2
 80145d2:	607c      	str	r4, [r7, #4]
 80145d4:	922e      	str	r2, [sp, #184]	; 0xb8
 80145d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80145d8:	000f      	movs	r7, r1
 80145da:	2b07      	cmp	r3, #7
 80145dc:	dd09      	ble.n	80145f2 <_svfprintf_r+0x4aa>
 80145de:	aa2c      	add	r2, sp, #176	; 0xb0
 80145e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145e4:	f002 ff04 	bl	80173f0 <__ssprint_r>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d001      	beq.n	80145f0 <_svfprintf_r+0x4a8>
 80145ec:	f000 ffd0 	bl	8015590 <_svfprintf_r+0x1448>
 80145f0:	af2f      	add	r7, sp, #188	; 0xbc
 80145f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80145f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80145f6:	05f3      	lsls	r3, r6, #23
 80145f8:	d501      	bpl.n	80145fe <_svfprintf_r+0x4b6>
 80145fa:	f000 fcb1 	bl	8014f60 <_svfprintf_r+0xe18>
 80145fe:	9a08      	ldr	r2, [sp, #32]
 8014600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014602:	4694      	mov	ip, r2
 8014604:	603b      	str	r3, [r7, #0]
 8014606:	9b08      	ldr	r3, [sp, #32]
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801460c:	4463      	add	r3, ip
 801460e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014610:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014612:	9308      	str	r3, [sp, #32]
 8014614:	3301      	adds	r3, #1
 8014616:	932d      	str	r3, [sp, #180]	; 0xb4
 8014618:	2b07      	cmp	r3, #7
 801461a:	dd01      	ble.n	8014620 <_svfprintf_r+0x4d8>
 801461c:	f000 fd94 	bl	8015148 <_svfprintf_r+0x1000>
 8014620:	3708      	adds	r7, #8
 8014622:	f000 fce4 	bl	8014fee <_svfprintf_r+0xea6>
 8014626:	46c0      	nop			; (mov r8, r8)
 8014628:	0801a5d9 	.word	0x0801a5d9
 801462c:	fffffbff 	.word	0xfffffbff
 8014630:	0801a5ec 	.word	0x0801a5ec
 8014634:	0801a5fc 	.word	0x0801a5fc
 8014638:	2310      	movs	r3, #16
 801463a:	431e      	orrs	r6, r3
 801463c:	06b3      	lsls	r3, r6, #26
 801463e:	d52c      	bpl.n	801469a <_svfprintf_r+0x552>
 8014640:	2307      	movs	r3, #7
 8014642:	3407      	adds	r4, #7
 8014644:	439c      	bics	r4, r3
 8014646:	0023      	movs	r3, r4
 8014648:	3308      	adds	r3, #8
 801464a:	9312      	str	r3, [sp, #72]	; 0x48
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	6864      	ldr	r4, [r4, #4]
 8014650:	9306      	str	r3, [sp, #24]
 8014652:	9407      	str	r4, [sp, #28]
 8014654:	9b07      	ldr	r3, [sp, #28]
 8014656:	2b00      	cmp	r3, #0
 8014658:	da0b      	bge.n	8014672 <_svfprintf_r+0x52a>
 801465a:	9906      	ldr	r1, [sp, #24]
 801465c:	9a07      	ldr	r2, [sp, #28]
 801465e:	2400      	movs	r4, #0
 8014660:	424b      	negs	r3, r1
 8014662:	4194      	sbcs	r4, r2
 8014664:	9306      	str	r3, [sp, #24]
 8014666:	9407      	str	r4, [sp, #28]
 8014668:	231b      	movs	r3, #27
 801466a:	aa1e      	add	r2, sp, #120	; 0x78
 801466c:	189b      	adds	r3, r3, r2
 801466e:	222d      	movs	r2, #45	; 0x2d
 8014670:	701a      	strb	r2, [r3, #0]
 8014672:	9b08      	ldr	r3, [sp, #32]
 8014674:	3301      	adds	r3, #1
 8014676:	d000      	beq.n	801467a <_svfprintf_r+0x532>
 8014678:	e382      	b.n	8014d80 <_svfprintf_r+0xc38>
 801467a:	9b07      	ldr	r3, [sp, #28]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d000      	beq.n	8014682 <_svfprintf_r+0x53a>
 8014680:	e3b0      	b.n	8014de4 <_svfprintf_r+0xc9c>
 8014682:	9b06      	ldr	r3, [sp, #24]
 8014684:	2b09      	cmp	r3, #9
 8014686:	d900      	bls.n	801468a <_svfprintf_r+0x542>
 8014688:	e3ac      	b.n	8014de4 <_svfprintf_r+0xc9c>
 801468a:	23e7      	movs	r3, #231	; 0xe7
 801468c:	aa1e      	add	r2, sp, #120	; 0x78
 801468e:	189b      	adds	r3, r3, r2
 8014690:	9a06      	ldr	r2, [sp, #24]
 8014692:	3230      	adds	r2, #48	; 0x30
 8014694:	701a      	strb	r2, [r3, #0]
 8014696:	9309      	str	r3, [sp, #36]	; 0x24
 8014698:	e395      	b.n	8014dc6 <_svfprintf_r+0xc7e>
 801469a:	1d23      	adds	r3, r4, #4
 801469c:	9312      	str	r3, [sp, #72]	; 0x48
 801469e:	06f3      	lsls	r3, r6, #27
 80146a0:	d504      	bpl.n	80146ac <_svfprintf_r+0x564>
 80146a2:	6823      	ldr	r3, [r4, #0]
 80146a4:	9306      	str	r3, [sp, #24]
 80146a6:	17db      	asrs	r3, r3, #31
 80146a8:	9307      	str	r3, [sp, #28]
 80146aa:	e7d3      	b.n	8014654 <_svfprintf_r+0x50c>
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	0672      	lsls	r2, r6, #25
 80146b0:	d501      	bpl.n	80146b6 <_svfprintf_r+0x56e>
 80146b2:	b21b      	sxth	r3, r3
 80146b4:	e7f6      	b.n	80146a4 <_svfprintf_r+0x55c>
 80146b6:	05b2      	lsls	r2, r6, #22
 80146b8:	d5f4      	bpl.n	80146a4 <_svfprintf_r+0x55c>
 80146ba:	b25b      	sxtb	r3, r3
 80146bc:	e7f2      	b.n	80146a4 <_svfprintf_r+0x55c>
 80146be:	2307      	movs	r3, #7
 80146c0:	3407      	adds	r4, #7
 80146c2:	439c      	bics	r4, r3
 80146c4:	0023      	movs	r3, r4
 80146c6:	2201      	movs	r2, #1
 80146c8:	3308      	adds	r3, #8
 80146ca:	9312      	str	r3, [sp, #72]	; 0x48
 80146cc:	6823      	ldr	r3, [r4, #0]
 80146ce:	4252      	negs	r2, r2
 80146d0:	931a      	str	r3, [sp, #104]	; 0x68
 80146d2:	6863      	ldr	r3, [r4, #4]
 80146d4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80146d6:	005c      	lsls	r4, r3, #1
 80146d8:	0864      	lsrs	r4, r4, #1
 80146da:	9319      	str	r3, [sp, #100]	; 0x64
 80146dc:	0028      	movs	r0, r5
 80146de:	4bcf      	ldr	r3, [pc, #828]	; (8014a1c <_svfprintf_r+0x8d4>)
 80146e0:	0021      	movs	r1, r4
 80146e2:	f7ee fa97 	bl	8002c14 <__aeabi_dcmpun>
 80146e6:	2800      	cmp	r0, #0
 80146e8:	d125      	bne.n	8014736 <_svfprintf_r+0x5ee>
 80146ea:	2201      	movs	r2, #1
 80146ec:	4bcb      	ldr	r3, [pc, #812]	; (8014a1c <_svfprintf_r+0x8d4>)
 80146ee:	4252      	negs	r2, r2
 80146f0:	0028      	movs	r0, r5
 80146f2:	0021      	movs	r1, r4
 80146f4:	f7eb fec2 	bl	800047c <__aeabi_dcmple>
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d11c      	bne.n	8014736 <_svfprintf_r+0x5ee>
 80146fc:	2200      	movs	r2, #0
 80146fe:	2300      	movs	r3, #0
 8014700:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014702:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014704:	f7eb feb0 	bl	8000468 <__aeabi_dcmplt>
 8014708:	2800      	cmp	r0, #0
 801470a:	d004      	beq.n	8014716 <_svfprintf_r+0x5ce>
 801470c:	231b      	movs	r3, #27
 801470e:	aa1e      	add	r2, sp, #120	; 0x78
 8014710:	189b      	adds	r3, r3, r2
 8014712:	222d      	movs	r2, #45	; 0x2d
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	4bc2      	ldr	r3, [pc, #776]	; (8014a20 <_svfprintf_r+0x8d8>)
 8014718:	9309      	str	r3, [sp, #36]	; 0x24
 801471a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801471c:	2b47      	cmp	r3, #71	; 0x47
 801471e:	dc01      	bgt.n	8014724 <_svfprintf_r+0x5dc>
 8014720:	4bc0      	ldr	r3, [pc, #768]	; (8014a24 <_svfprintf_r+0x8dc>)
 8014722:	9309      	str	r3, [sp, #36]	; 0x24
 8014724:	2380      	movs	r3, #128	; 0x80
 8014726:	439e      	bics	r6, r3
 8014728:	2300      	movs	r3, #0
 801472a:	930c      	str	r3, [sp, #48]	; 0x30
 801472c:	3303      	adds	r3, #3
 801472e:	9308      	str	r3, [sp, #32]
 8014730:	2300      	movs	r3, #0
 8014732:	9317      	str	r3, [sp, #92]	; 0x5c
 8014734:	e34f      	b.n	8014dd6 <_svfprintf_r+0xc8e>
 8014736:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801473a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801473c:	9919      	ldr	r1, [sp, #100]	; 0x64
 801473e:	f7ee fa69 	bl	8002c14 <__aeabi_dcmpun>
 8014742:	2800      	cmp	r0, #0
 8014744:	d00e      	beq.n	8014764 <_svfprintf_r+0x61c>
 8014746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014748:	2b00      	cmp	r3, #0
 801474a:	da04      	bge.n	8014756 <_svfprintf_r+0x60e>
 801474c:	231b      	movs	r3, #27
 801474e:	aa1e      	add	r2, sp, #120	; 0x78
 8014750:	189b      	adds	r3, r3, r2
 8014752:	222d      	movs	r2, #45	; 0x2d
 8014754:	701a      	strb	r2, [r3, #0]
 8014756:	4bb4      	ldr	r3, [pc, #720]	; (8014a28 <_svfprintf_r+0x8e0>)
 8014758:	9309      	str	r3, [sp, #36]	; 0x24
 801475a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801475c:	2b47      	cmp	r3, #71	; 0x47
 801475e:	dce1      	bgt.n	8014724 <_svfprintf_r+0x5dc>
 8014760:	4bb2      	ldr	r3, [pc, #712]	; (8014a2c <_svfprintf_r+0x8e4>)
 8014762:	e7de      	b.n	8014722 <_svfprintf_r+0x5da>
 8014764:	2320      	movs	r3, #32
 8014766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014768:	439a      	bics	r2, r3
 801476a:	920f      	str	r2, [sp, #60]	; 0x3c
 801476c:	2a41      	cmp	r2, #65	; 0x41
 801476e:	d124      	bne.n	80147ba <_svfprintf_r+0x672>
 8014770:	2230      	movs	r2, #48	; 0x30
 8014772:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014774:	ab25      	add	r3, sp, #148	; 0x94
 8014776:	701a      	strb	r2, [r3, #0]
 8014778:	3228      	adds	r2, #40	; 0x28
 801477a:	2961      	cmp	r1, #97	; 0x61
 801477c:	d100      	bne.n	8014780 <_svfprintf_r+0x638>
 801477e:	3220      	adds	r2, #32
 8014780:	705a      	strb	r2, [r3, #1]
 8014782:	2302      	movs	r3, #2
 8014784:	431e      	orrs	r6, r3
 8014786:	9b08      	ldr	r3, [sp, #32]
 8014788:	2b63      	cmp	r3, #99	; 0x63
 801478a:	dc00      	bgt.n	801478e <_svfprintf_r+0x646>
 801478c:	e09e      	b.n	80148cc <_svfprintf_r+0x784>
 801478e:	1c59      	adds	r1, r3, #1
 8014790:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014792:	f7fe f913 	bl	80129bc <_malloc_r>
 8014796:	9009      	str	r0, [sp, #36]	; 0x24
 8014798:	2800      	cmp	r0, #0
 801479a:	d000      	beq.n	801479e <_svfprintf_r+0x656>
 801479c:	e09b      	b.n	80148d6 <_svfprintf_r+0x78e>
 801479e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147a0:	899a      	ldrh	r2, [r3, #12]
 80147a2:	2340      	movs	r3, #64	; 0x40
 80147a4:	4313      	orrs	r3, r2
 80147a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80147a8:	8193      	strh	r3, [r2, #12]
 80147aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147ac:	899b      	ldrh	r3, [r3, #12]
 80147ae:	065b      	lsls	r3, r3, #25
 80147b0:	d400      	bmi.n	80147b4 <_svfprintf_r+0x66c>
 80147b2:	e4ee      	b.n	8014192 <_svfprintf_r+0x4a>
 80147b4:	2301      	movs	r3, #1
 80147b6:	425b      	negs	r3, r3
 80147b8:	e4ea      	b.n	8014190 <_svfprintf_r+0x48>
 80147ba:	9b08      	ldr	r3, [sp, #32]
 80147bc:	900c      	str	r0, [sp, #48]	; 0x30
 80147be:	3301      	adds	r3, #1
 80147c0:	d100      	bne.n	80147c4 <_svfprintf_r+0x67c>
 80147c2:	e08b      	b.n	80148dc <_svfprintf_r+0x794>
 80147c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147c6:	2b47      	cmp	r3, #71	; 0x47
 80147c8:	d103      	bne.n	80147d2 <_svfprintf_r+0x68a>
 80147ca:	9b08      	ldr	r3, [sp, #32]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d100      	bne.n	80147d2 <_svfprintf_r+0x68a>
 80147d0:	e087      	b.n	80148e2 <_svfprintf_r+0x79a>
 80147d2:	2380      	movs	r3, #128	; 0x80
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4333      	orrs	r3, r6
 80147d8:	9320      	str	r3, [sp, #128]	; 0x80
 80147da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80147dc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80147de:	2b00      	cmp	r3, #0
 80147e0:	db00      	blt.n	80147e4 <_svfprintf_r+0x69c>
 80147e2:	e082      	b.n	80148ea <_svfprintf_r+0x7a2>
 80147e4:	2280      	movs	r2, #128	; 0x80
 80147e6:	0612      	lsls	r2, r2, #24
 80147e8:	4694      	mov	ip, r2
 80147ea:	4463      	add	r3, ip
 80147ec:	930d      	str	r3, [sp, #52]	; 0x34
 80147ee:	232d      	movs	r3, #45	; 0x2d
 80147f0:	9322      	str	r3, [sp, #136]	; 0x88
 80147f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147f4:	2b41      	cmp	r3, #65	; 0x41
 80147f6:	d000      	beq.n	80147fa <_svfprintf_r+0x6b2>
 80147f8:	e105      	b.n	8014a06 <_svfprintf_r+0x8be>
 80147fa:	aa26      	add	r2, sp, #152	; 0x98
 80147fc:	0020      	movs	r0, r4
 80147fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014800:	f002 fdc4 	bl	801738c <frexp>
 8014804:	23ff      	movs	r3, #255	; 0xff
 8014806:	2200      	movs	r2, #0
 8014808:	059b      	lsls	r3, r3, #22
 801480a:	f7ed fc49 	bl	80020a0 <__aeabi_dmul>
 801480e:	2200      	movs	r2, #0
 8014810:	2300      	movs	r3, #0
 8014812:	0004      	movs	r4, r0
 8014814:	000d      	movs	r5, r1
 8014816:	f7eb fe21 	bl	800045c <__aeabi_dcmpeq>
 801481a:	2800      	cmp	r0, #0
 801481c:	d001      	beq.n	8014822 <_svfprintf_r+0x6da>
 801481e:	2301      	movs	r3, #1
 8014820:	9326      	str	r3, [sp, #152]	; 0x98
 8014822:	4b83      	ldr	r3, [pc, #524]	; (8014a30 <_svfprintf_r+0x8e8>)
 8014824:	9317      	str	r3, [sp, #92]	; 0x5c
 8014826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014828:	2b61      	cmp	r3, #97	; 0x61
 801482a:	d101      	bne.n	8014830 <_svfprintf_r+0x6e8>
 801482c:	4b81      	ldr	r3, [pc, #516]	; (8014a34 <_svfprintf_r+0x8ec>)
 801482e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014830:	9b08      	ldr	r3, [sp, #32]
 8014832:	3b01      	subs	r3, #1
 8014834:	9310      	str	r3, [sp, #64]	; 0x40
 8014836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014838:	9318      	str	r3, [sp, #96]	; 0x60
 801483a:	2200      	movs	r2, #0
 801483c:	4b7e      	ldr	r3, [pc, #504]	; (8014a38 <_svfprintf_r+0x8f0>)
 801483e:	0020      	movs	r0, r4
 8014840:	0029      	movs	r1, r5
 8014842:	f7ed fc2d 	bl	80020a0 <__aeabi_dmul>
 8014846:	000d      	movs	r5, r1
 8014848:	0004      	movs	r4, r0
 801484a:	f7ee f9ff 	bl	8002c4c <__aeabi_d2iz>
 801484e:	9021      	str	r0, [sp, #132]	; 0x84
 8014850:	f7ee fa32 	bl	8002cb8 <__aeabi_i2d>
 8014854:	0002      	movs	r2, r0
 8014856:	000b      	movs	r3, r1
 8014858:	0020      	movs	r0, r4
 801485a:	0029      	movs	r1, r5
 801485c:	f7ed fe92 	bl	8002584 <__aeabi_dsub>
 8014860:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014862:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014864:	3301      	adds	r3, #1
 8014866:	930d      	str	r3, [sp, #52]	; 0x34
 8014868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801486a:	0004      	movs	r4, r0
 801486c:	5c9b      	ldrb	r3, [r3, r2]
 801486e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014870:	000d      	movs	r5, r1
 8014872:	7013      	strb	r3, [r2, #0]
 8014874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014876:	9323      	str	r3, [sp, #140]	; 0x8c
 8014878:	3301      	adds	r3, #1
 801487a:	d00a      	beq.n	8014892 <_svfprintf_r+0x74a>
 801487c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801487e:	2200      	movs	r2, #0
 8014880:	3b01      	subs	r3, #1
 8014882:	9310      	str	r3, [sp, #64]	; 0x40
 8014884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014886:	9318      	str	r3, [sp, #96]	; 0x60
 8014888:	2300      	movs	r3, #0
 801488a:	f7eb fde7 	bl	800045c <__aeabi_dcmpeq>
 801488e:	2800      	cmp	r0, #0
 8014890:	d0d3      	beq.n	801483a <_svfprintf_r+0x6f2>
 8014892:	2200      	movs	r2, #0
 8014894:	4b69      	ldr	r3, [pc, #420]	; (8014a3c <_svfprintf_r+0x8f4>)
 8014896:	0020      	movs	r0, r4
 8014898:	0029      	movs	r1, r5
 801489a:	f7eb fdf9 	bl	8000490 <__aeabi_dcmpgt>
 801489e:	2800      	cmp	r0, #0
 80148a0:	d126      	bne.n	80148f0 <_svfprintf_r+0x7a8>
 80148a2:	2200      	movs	r2, #0
 80148a4:	4b65      	ldr	r3, [pc, #404]	; (8014a3c <_svfprintf_r+0x8f4>)
 80148a6:	0020      	movs	r0, r4
 80148a8:	0029      	movs	r1, r5
 80148aa:	f7eb fdd7 	bl	800045c <__aeabi_dcmpeq>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d002      	beq.n	80148b8 <_svfprintf_r+0x770>
 80148b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148b4:	07db      	lsls	r3, r3, #31
 80148b6:	d41b      	bmi.n	80148f0 <_svfprintf_r+0x7a8>
 80148b8:	2130      	movs	r1, #48	; 0x30
 80148ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80148be:	1898      	adds	r0, r3, r2
 80148c0:	930d      	str	r3, [sp, #52]	; 0x34
 80148c2:	1ac2      	subs	r2, r0, r3
 80148c4:	d426      	bmi.n	8014914 <_svfprintf_r+0x7cc>
 80148c6:	7019      	strb	r1, [r3, #0]
 80148c8:	3301      	adds	r3, #1
 80148ca:	e7f9      	b.n	80148c0 <_svfprintf_r+0x778>
 80148cc:	2300      	movs	r3, #0
 80148ce:	930c      	str	r3, [sp, #48]	; 0x30
 80148d0:	ab3f      	add	r3, sp, #252	; 0xfc
 80148d2:	9309      	str	r3, [sp, #36]	; 0x24
 80148d4:	e77d      	b.n	80147d2 <_svfprintf_r+0x68a>
 80148d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d8:	930c      	str	r3, [sp, #48]	; 0x30
 80148da:	e77a      	b.n	80147d2 <_svfprintf_r+0x68a>
 80148dc:	2306      	movs	r3, #6
 80148de:	9308      	str	r3, [sp, #32]
 80148e0:	e777      	b.n	80147d2 <_svfprintf_r+0x68a>
 80148e2:	9b08      	ldr	r3, [sp, #32]
 80148e4:	930c      	str	r3, [sp, #48]	; 0x30
 80148e6:	2301      	movs	r3, #1
 80148e8:	e7f9      	b.n	80148de <_svfprintf_r+0x796>
 80148ea:	930d      	str	r3, [sp, #52]	; 0x34
 80148ec:	2300      	movs	r3, #0
 80148ee:	e77f      	b.n	80147f0 <_svfprintf_r+0x6a8>
 80148f0:	2030      	movs	r0, #48	; 0x30
 80148f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148f4:	932a      	str	r3, [sp, #168]	; 0xa8
 80148f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148f8:	7bda      	ldrb	r2, [r3, #15]
 80148fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80148fc:	3b01      	subs	r3, #1
 80148fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8014900:	7819      	ldrb	r1, [r3, #0]
 8014902:	4291      	cmp	r1, r2
 8014904:	d07d      	beq.n	8014a02 <_svfprintf_r+0x8ba>
 8014906:	1c4a      	adds	r2, r1, #1
 8014908:	b2d2      	uxtb	r2, r2
 801490a:	2939      	cmp	r1, #57	; 0x39
 801490c:	d101      	bne.n	8014912 <_svfprintf_r+0x7ca>
 801490e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014910:	7a92      	ldrb	r2, [r2, #10]
 8014912:	701a      	strb	r2, [r3, #0]
 8014914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014918:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801491a:	1a9b      	subs	r3, r3, r2
 801491c:	930d      	str	r3, [sp, #52]	; 0x34
 801491e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014920:	2b47      	cmp	r3, #71	; 0x47
 8014922:	d000      	beq.n	8014926 <_svfprintf_r+0x7de>
 8014924:	e0d2      	b.n	8014acc <_svfprintf_r+0x984>
 8014926:	1ceb      	adds	r3, r5, #3
 8014928:	db03      	blt.n	8014932 <_svfprintf_r+0x7ea>
 801492a:	9b08      	ldr	r3, [sp, #32]
 801492c:	42ab      	cmp	r3, r5
 801492e:	db00      	blt.n	8014932 <_svfprintf_r+0x7ea>
 8014930:	e0fd      	b.n	8014b2e <_svfprintf_r+0x9e6>
 8014932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014934:	3b02      	subs	r3, #2
 8014936:	930e      	str	r3, [sp, #56]	; 0x38
 8014938:	2238      	movs	r2, #56	; 0x38
 801493a:	466b      	mov	r3, sp
 801493c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801493e:	189b      	adds	r3, r3, r2
 8014940:	3a18      	subs	r2, #24
 8014942:	4391      	bics	r1, r2
 8014944:	1e6c      	subs	r4, r5, #1
 8014946:	000a      	movs	r2, r1
 8014948:	9426      	str	r4, [sp, #152]	; 0x98
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	2100      	movs	r1, #0
 801494e:	2a41      	cmp	r2, #65	; 0x41
 8014950:	d102      	bne.n	8014958 <_svfprintf_r+0x810>
 8014952:	330f      	adds	r3, #15
 8014954:	b2db      	uxtb	r3, r3
 8014956:	3101      	adds	r1, #1
 8014958:	aa28      	add	r2, sp, #160	; 0xa0
 801495a:	7013      	strb	r3, [r2, #0]
 801495c:	232b      	movs	r3, #43	; 0x2b
 801495e:	2c00      	cmp	r4, #0
 8014960:	da02      	bge.n	8014968 <_svfprintf_r+0x820>
 8014962:	2401      	movs	r4, #1
 8014964:	232d      	movs	r3, #45	; 0x2d
 8014966:	1b64      	subs	r4, r4, r5
 8014968:	7053      	strb	r3, [r2, #1]
 801496a:	2c09      	cmp	r4, #9
 801496c:	dc00      	bgt.n	8014970 <_svfprintf_r+0x828>
 801496e:	e0c7      	b.n	8014b00 <_svfprintf_r+0x9b8>
 8014970:	2537      	movs	r5, #55	; 0x37
 8014972:	ab1e      	add	r3, sp, #120	; 0x78
 8014974:	18ed      	adds	r5, r5, r3
 8014976:	1e6b      	subs	r3, r5, #1
 8014978:	0020      	movs	r0, r4
 801497a:	210a      	movs	r1, #10
 801497c:	9308      	str	r3, [sp, #32]
 801497e:	f7eb fd57 	bl	8000430 <__aeabi_idivmod>
 8014982:	1e6b      	subs	r3, r5, #1
 8014984:	3130      	adds	r1, #48	; 0x30
 8014986:	7019      	strb	r1, [r3, #0]
 8014988:	0020      	movs	r0, r4
 801498a:	210a      	movs	r1, #10
 801498c:	f7eb fc6a 	bl	8000264 <__divsi3>
 8014990:	0004      	movs	r4, r0
 8014992:	2809      	cmp	r0, #9
 8014994:	dd00      	ble.n	8014998 <_svfprintf_r+0x850>
 8014996:	e0ac      	b.n	8014af2 <_svfprintf_r+0x9aa>
 8014998:	232a      	movs	r3, #42	; 0x2a
 801499a:	2137      	movs	r1, #55	; 0x37
 801499c:	aa1e      	add	r2, sp, #120	; 0x78
 801499e:	3d02      	subs	r5, #2
 80149a0:	3430      	adds	r4, #48	; 0x30
 80149a2:	702c      	strb	r4, [r5, #0]
 80149a4:	189b      	adds	r3, r3, r2
 80149a6:	1889      	adds	r1, r1, r2
 80149a8:	001a      	movs	r2, r3
 80149aa:	428d      	cmp	r5, r1
 80149ac:	d200      	bcs.n	80149b0 <_svfprintf_r+0x868>
 80149ae:	e0a2      	b.n	8014af6 <_svfprintf_r+0x9ae>
 80149b0:	ab28      	add	r3, sp, #160	; 0xa0
 80149b2:	1ad3      	subs	r3, r2, r3
 80149b4:	931d      	str	r3, [sp, #116]	; 0x74
 80149b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80149b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149ba:	4694      	mov	ip, r2
 80149bc:	4463      	add	r3, ip
 80149be:	9308      	str	r3, [sp, #32]
 80149c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	dc01      	bgt.n	80149ca <_svfprintf_r+0x882>
 80149c6:	07f3      	lsls	r3, r6, #31
 80149c8:	d504      	bpl.n	80149d4 <_svfprintf_r+0x88c>
 80149ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149cc:	9b08      	ldr	r3, [sp, #32]
 80149ce:	4694      	mov	ip, r2
 80149d0:	4463      	add	r3, ip
 80149d2:	9308      	str	r3, [sp, #32]
 80149d4:	2280      	movs	r2, #128	; 0x80
 80149d6:	4b1a      	ldr	r3, [pc, #104]	; (8014a40 <_svfprintf_r+0x8f8>)
 80149d8:	0052      	lsls	r2, r2, #1
 80149da:	4033      	ands	r3, r6
 80149dc:	431a      	orrs	r2, r3
 80149de:	2300      	movs	r3, #0
 80149e0:	001d      	movs	r5, r3
 80149e2:	9220      	str	r2, [sp, #128]	; 0x80
 80149e4:	9310      	str	r3, [sp, #64]	; 0x40
 80149e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d100      	bne.n	80149f0 <_svfprintf_r+0x8a8>
 80149ee:	e270      	b.n	8014ed2 <_svfprintf_r+0xd8a>
 80149f0:	231b      	movs	r3, #27
 80149f2:	aa1e      	add	r2, sp, #120	; 0x78
 80149f4:	189b      	adds	r3, r3, r2
 80149f6:	222d      	movs	r2, #45	; 0x2d
 80149f8:	701a      	strb	r2, [r3, #0]
 80149fa:	2300      	movs	r3, #0
 80149fc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80149fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a00:	e539      	b.n	8014476 <_svfprintf_r+0x32e>
 8014a02:	7018      	strb	r0, [r3, #0]
 8014a04:	e779      	b.n	80148fa <_svfprintf_r+0x7b2>
 8014a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a08:	2b46      	cmp	r3, #70	; 0x46
 8014a0a:	d01b      	beq.n	8014a44 <_svfprintf_r+0x8fc>
 8014a0c:	9d08      	ldr	r5, [sp, #32]
 8014a0e:	2b45      	cmp	r3, #69	; 0x45
 8014a10:	d101      	bne.n	8014a16 <_svfprintf_r+0x8ce>
 8014a12:	9b08      	ldr	r3, [sp, #32]
 8014a14:	1c5d      	adds	r5, r3, #1
 8014a16:	2302      	movs	r3, #2
 8014a18:	e016      	b.n	8014a48 <_svfprintf_r+0x900>
 8014a1a:	46c0      	nop			; (mov r8, r8)
 8014a1c:	7fefffff 	.word	0x7fefffff
 8014a20:	0801a5bc 	.word	0x0801a5bc
 8014a24:	0801a5b8 	.word	0x0801a5b8
 8014a28:	0801a5c4 	.word	0x0801a5c4
 8014a2c:	0801a5c0 	.word	0x0801a5c0
 8014a30:	0801a5d9 	.word	0x0801a5d9
 8014a34:	0801a5c8 	.word	0x0801a5c8
 8014a38:	40300000 	.word	0x40300000
 8014a3c:	3fe00000 	.word	0x3fe00000
 8014a40:	fffffbff 	.word	0xfffffbff
 8014a44:	2303      	movs	r3, #3
 8014a46:	9d08      	ldr	r5, [sp, #32]
 8014a48:	aa2a      	add	r2, sp, #168	; 0xa8
 8014a4a:	9204      	str	r2, [sp, #16]
 8014a4c:	aa27      	add	r2, sp, #156	; 0x9c
 8014a4e:	9203      	str	r2, [sp, #12]
 8014a50:	aa26      	add	r2, sp, #152	; 0x98
 8014a52:	9202      	str	r2, [sp, #8]
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	9501      	str	r5, [sp, #4]
 8014a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a5a:	0022      	movs	r2, r4
 8014a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a5e:	f000 fe79 	bl	8015754 <_dtoa_r>
 8014a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a64:	9009      	str	r0, [sp, #36]	; 0x24
 8014a66:	2b47      	cmp	r3, #71	; 0x47
 8014a68:	d101      	bne.n	8014a6e <_svfprintf_r+0x926>
 8014a6a:	07f3      	lsls	r3, r6, #31
 8014a6c:	d524      	bpl.n	8014ab8 <_svfprintf_r+0x970>
 8014a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a70:	195b      	adds	r3, r3, r5
 8014a72:	9310      	str	r3, [sp, #64]	; 0x40
 8014a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a76:	2b46      	cmp	r3, #70	; 0x46
 8014a78:	d113      	bne.n	8014aa2 <_svfprintf_r+0x95a>
 8014a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	2b30      	cmp	r3, #48	; 0x30
 8014a80:	d10a      	bne.n	8014a98 <_svfprintf_r+0x950>
 8014a82:	2200      	movs	r2, #0
 8014a84:	2300      	movs	r3, #0
 8014a86:	0020      	movs	r0, r4
 8014a88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a8a:	f7eb fce7 	bl	800045c <__aeabi_dcmpeq>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	d102      	bne.n	8014a98 <_svfprintf_r+0x950>
 8014a92:	2301      	movs	r3, #1
 8014a94:	1b5d      	subs	r5, r3, r5
 8014a96:	9526      	str	r5, [sp, #152]	; 0x98
 8014a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a9c:	4694      	mov	ip, r2
 8014a9e:	4463      	add	r3, ip
 8014aa0:	9310      	str	r3, [sp, #64]	; 0x40
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	0020      	movs	r0, r4
 8014aa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014aaa:	f7eb fcd7 	bl	800045c <__aeabi_dcmpeq>
 8014aae:	2230      	movs	r2, #48	; 0x30
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d006      	beq.n	8014ac2 <_svfprintf_r+0x97a>
 8014ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ab6:	932a      	str	r3, [sp, #168]	; 0xa8
 8014ab8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014aba:	e72c      	b.n	8014916 <_svfprintf_r+0x7ce>
 8014abc:	1c59      	adds	r1, r3, #1
 8014abe:	912a      	str	r1, [sp, #168]	; 0xa8
 8014ac0:	701a      	strb	r2, [r3, #0]
 8014ac2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014ac4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014ac6:	4299      	cmp	r1, r3
 8014ac8:	d8f8      	bhi.n	8014abc <_svfprintf_r+0x974>
 8014aca:	e7f5      	b.n	8014ab8 <_svfprintf_r+0x970>
 8014acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ace:	2b46      	cmp	r3, #70	; 0x46
 8014ad0:	d000      	beq.n	8014ad4 <_svfprintf_r+0x98c>
 8014ad2:	e731      	b.n	8014938 <_svfprintf_r+0x7f0>
 8014ad4:	9b08      	ldr	r3, [sp, #32]
 8014ad6:	2d00      	cmp	r5, #0
 8014ad8:	dd21      	ble.n	8014b1e <_svfprintf_r+0x9d6>
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d101      	bne.n	8014ae2 <_svfprintf_r+0x99a>
 8014ade:	07f3      	lsls	r3, r6, #31
 8014ae0:	d54a      	bpl.n	8014b78 <_svfprintf_r+0xa30>
 8014ae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ae4:	18eb      	adds	r3, r5, r3
 8014ae6:	9a08      	ldr	r2, [sp, #32]
 8014ae8:	18d3      	adds	r3, r2, r3
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	2366      	movs	r3, #102	; 0x66
 8014aee:	930e      	str	r3, [sp, #56]	; 0x38
 8014af0:	e034      	b.n	8014b5c <_svfprintf_r+0xa14>
 8014af2:	9d08      	ldr	r5, [sp, #32]
 8014af4:	e73f      	b.n	8014976 <_svfprintf_r+0x82e>
 8014af6:	782a      	ldrb	r2, [r5, #0]
 8014af8:	3501      	adds	r5, #1
 8014afa:	701a      	strb	r2, [r3, #0]
 8014afc:	3301      	adds	r3, #1
 8014afe:	e753      	b.n	80149a8 <_svfprintf_r+0x860>
 8014b00:	232a      	movs	r3, #42	; 0x2a
 8014b02:	aa1e      	add	r2, sp, #120	; 0x78
 8014b04:	189b      	adds	r3, r3, r2
 8014b06:	2900      	cmp	r1, #0
 8014b08:	d105      	bne.n	8014b16 <_svfprintf_r+0x9ce>
 8014b0a:	2230      	movs	r2, #48	; 0x30
 8014b0c:	ab28      	add	r3, sp, #160	; 0xa0
 8014b0e:	709a      	strb	r2, [r3, #2]
 8014b10:	232b      	movs	r3, #43	; 0x2b
 8014b12:	aa1e      	add	r2, sp, #120	; 0x78
 8014b14:	189b      	adds	r3, r3, r2
 8014b16:	3430      	adds	r4, #48	; 0x30
 8014b18:	1c5a      	adds	r2, r3, #1
 8014b1a:	701c      	strb	r4, [r3, #0]
 8014b1c:	e748      	b.n	80149b0 <_svfprintf_r+0x868>
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d102      	bne.n	8014b28 <_svfprintf_r+0x9e0>
 8014b22:	3301      	adds	r3, #1
 8014b24:	421e      	tst	r6, r3
 8014b26:	d029      	beq.n	8014b7c <_svfprintf_r+0xa34>
 8014b28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	e7db      	b.n	8014ae6 <_svfprintf_r+0x99e>
 8014b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b30:	42ab      	cmp	r3, r5
 8014b32:	dc06      	bgt.n	8014b42 <_svfprintf_r+0x9fa>
 8014b34:	07f3      	lsls	r3, r6, #31
 8014b36:	d524      	bpl.n	8014b82 <_svfprintf_r+0xa3a>
 8014b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b3a:	18eb      	adds	r3, r5, r3
 8014b3c:	9308      	str	r3, [sp, #32]
 8014b3e:	2367      	movs	r3, #103	; 0x67
 8014b40:	e7d5      	b.n	8014aee <_svfprintf_r+0x9a6>
 8014b42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b46:	4694      	mov	ip, r2
 8014b48:	4463      	add	r3, ip
 8014b4a:	9308      	str	r3, [sp, #32]
 8014b4c:	2367      	movs	r3, #103	; 0x67
 8014b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	dc03      	bgt.n	8014b5c <_svfprintf_r+0xa14>
 8014b54:	9b08      	ldr	r3, [sp, #32]
 8014b56:	1b5b      	subs	r3, r3, r5
 8014b58:	3301      	adds	r3, #1
 8014b5a:	9308      	str	r3, [sp, #32]
 8014b5c:	2380      	movs	r3, #128	; 0x80
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	401e      	ands	r6, r3
 8014b62:	2300      	movs	r3, #0
 8014b64:	960f      	str	r6, [sp, #60]	; 0x3c
 8014b66:	9310      	str	r3, [sp, #64]	; 0x40
 8014b68:	2e00      	cmp	r6, #0
 8014b6a:	d100      	bne.n	8014b6e <_svfprintf_r+0xa26>
 8014b6c:	e73c      	b.n	80149e8 <_svfprintf_r+0x8a0>
 8014b6e:	2d00      	cmp	r5, #0
 8014b70:	dc27      	bgt.n	8014bc2 <_svfprintf_r+0xa7a>
 8014b72:	2300      	movs	r3, #0
 8014b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b76:	e737      	b.n	80149e8 <_svfprintf_r+0x8a0>
 8014b78:	9508      	str	r5, [sp, #32]
 8014b7a:	e7b7      	b.n	8014aec <_svfprintf_r+0x9a4>
 8014b7c:	2266      	movs	r2, #102	; 0x66
 8014b7e:	920e      	str	r2, [sp, #56]	; 0x38
 8014b80:	e7eb      	b.n	8014b5a <_svfprintf_r+0xa12>
 8014b82:	9508      	str	r5, [sp, #32]
 8014b84:	e7db      	b.n	8014b3e <_svfprintf_r+0x9f6>
 8014b86:	42ab      	cmp	r3, r5
 8014b88:	da0e      	bge.n	8014ba8 <_svfprintf_r+0xa60>
 8014b8a:	1aed      	subs	r5, r5, r3
 8014b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b8e:	785b      	ldrb	r3, [r3, #1]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d012      	beq.n	8014bba <_svfprintf_r+0xa72>
 8014b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b96:	3301      	adds	r3, #1
 8014b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ba0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	2bff      	cmp	r3, #255	; 0xff
 8014ba6:	d1ee      	bne.n	8014b86 <_svfprintf_r+0xa3e>
 8014ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bac:	189b      	adds	r3, r3, r2
 8014bae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014bb0:	4353      	muls	r3, r2
 8014bb2:	9a08      	ldr	r2, [sp, #32]
 8014bb4:	189b      	adds	r3, r3, r2
 8014bb6:	9308      	str	r3, [sp, #32]
 8014bb8:	e716      	b.n	80149e8 <_svfprintf_r+0x8a0>
 8014bba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8014bc0:	e7ee      	b.n	8014ba0 <_svfprintf_r+0xa58>
 8014bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bc6:	e7eb      	b.n	8014ba0 <_svfprintf_r+0xa58>
 8014bc8:	0022      	movs	r2, r4
 8014bca:	ca08      	ldmia	r2!, {r3}
 8014bcc:	9212      	str	r2, [sp, #72]	; 0x48
 8014bce:	06b2      	lsls	r2, r6, #26
 8014bd0:	d508      	bpl.n	8014be4 <_svfprintf_r+0xa9c>
 8014bd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bd4:	601a      	str	r2, [r3, #0]
 8014bd6:	17d2      	asrs	r2, r2, #31
 8014bd8:	605a      	str	r2, [r3, #4]
 8014bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bdc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014bde:	9309      	str	r3, [sp, #36]	; 0x24
 8014be0:	f7ff faeb 	bl	80141ba <_svfprintf_r+0x72>
 8014be4:	06f2      	lsls	r2, r6, #27
 8014be6:	d502      	bpl.n	8014bee <_svfprintf_r+0xaa6>
 8014be8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bea:	601a      	str	r2, [r3, #0]
 8014bec:	e7f5      	b.n	8014bda <_svfprintf_r+0xa92>
 8014bee:	0672      	lsls	r2, r6, #25
 8014bf0:	d502      	bpl.n	8014bf8 <_svfprintf_r+0xab0>
 8014bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bf4:	801a      	strh	r2, [r3, #0]
 8014bf6:	e7f0      	b.n	8014bda <_svfprintf_r+0xa92>
 8014bf8:	05b2      	lsls	r2, r6, #22
 8014bfa:	d5f5      	bpl.n	8014be8 <_svfprintf_r+0xaa0>
 8014bfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bfe:	701a      	strb	r2, [r3, #0]
 8014c00:	e7eb      	b.n	8014bda <_svfprintf_r+0xa92>
 8014c02:	2310      	movs	r3, #16
 8014c04:	431e      	orrs	r6, r3
 8014c06:	2220      	movs	r2, #32
 8014c08:	4032      	ands	r2, r6
 8014c0a:	d025      	beq.n	8014c58 <_svfprintf_r+0xb10>
 8014c0c:	2307      	movs	r3, #7
 8014c0e:	3407      	adds	r4, #7
 8014c10:	439c      	bics	r4, r3
 8014c12:	0023      	movs	r3, r4
 8014c14:	3308      	adds	r3, #8
 8014c16:	9312      	str	r3, [sp, #72]	; 0x48
 8014c18:	6823      	ldr	r3, [r4, #0]
 8014c1a:	6864      	ldr	r4, [r4, #4]
 8014c1c:	9306      	str	r3, [sp, #24]
 8014c1e:	9407      	str	r4, [sp, #28]
 8014c20:	4bc2      	ldr	r3, [pc, #776]	; (8014f2c <_svfprintf_r+0xde4>)
 8014c22:	401e      	ands	r6, r3
 8014c24:	2300      	movs	r3, #0
 8014c26:	221b      	movs	r2, #27
 8014c28:	a91e      	add	r1, sp, #120	; 0x78
 8014c2a:	1852      	adds	r2, r2, r1
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	7011      	strb	r1, [r2, #0]
 8014c30:	9a08      	ldr	r2, [sp, #32]
 8014c32:	3201      	adds	r2, #1
 8014c34:	d100      	bne.n	8014c38 <_svfprintf_r+0xaf0>
 8014c36:	e0a6      	b.n	8014d86 <_svfprintf_r+0xc3e>
 8014c38:	0032      	movs	r2, r6
 8014c3a:	2180      	movs	r1, #128	; 0x80
 8014c3c:	9807      	ldr	r0, [sp, #28]
 8014c3e:	438e      	bics	r6, r1
 8014c40:	9906      	ldr	r1, [sp, #24]
 8014c42:	4301      	orrs	r1, r0
 8014c44:	d000      	beq.n	8014c48 <_svfprintf_r+0xb00>
 8014c46:	e09e      	b.n	8014d86 <_svfprintf_r+0xc3e>
 8014c48:	9908      	ldr	r1, [sp, #32]
 8014c4a:	2900      	cmp	r1, #0
 8014c4c:	d100      	bne.n	8014c50 <_svfprintf_r+0xb08>
 8014c4e:	e125      	b.n	8014e9c <_svfprintf_r+0xd54>
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d000      	beq.n	8014c56 <_svfprintf_r+0xb0e>
 8014c54:	e09a      	b.n	8014d8c <_svfprintf_r+0xc44>
 8014c56:	e518      	b.n	801468a <_svfprintf_r+0x542>
 8014c58:	1d23      	adds	r3, r4, #4
 8014c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c5c:	2310      	movs	r3, #16
 8014c5e:	4033      	ands	r3, r6
 8014c60:	d003      	beq.n	8014c6a <_svfprintf_r+0xb22>
 8014c62:	6823      	ldr	r3, [r4, #0]
 8014c64:	9306      	str	r3, [sp, #24]
 8014c66:	9207      	str	r2, [sp, #28]
 8014c68:	e7da      	b.n	8014c20 <_svfprintf_r+0xad8>
 8014c6a:	2240      	movs	r2, #64	; 0x40
 8014c6c:	4032      	ands	r2, r6
 8014c6e:	d004      	beq.n	8014c7a <_svfprintf_r+0xb32>
 8014c70:	6822      	ldr	r2, [r4, #0]
 8014c72:	b292      	uxth	r2, r2
 8014c74:	9206      	str	r2, [sp, #24]
 8014c76:	9307      	str	r3, [sp, #28]
 8014c78:	e7d2      	b.n	8014c20 <_svfprintf_r+0xad8>
 8014c7a:	2380      	movs	r3, #128	; 0x80
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4033      	ands	r3, r6
 8014c80:	d002      	beq.n	8014c88 <_svfprintf_r+0xb40>
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	e7ed      	b.n	8014c64 <_svfprintf_r+0xb1c>
 8014c88:	6822      	ldr	r2, [r4, #0]
 8014c8a:	e7f3      	b.n	8014c74 <_svfprintf_r+0xb2c>
 8014c8c:	1d23      	adds	r3, r4, #4
 8014c8e:	49a8      	ldr	r1, [pc, #672]	; (8014f30 <_svfprintf_r+0xde8>)
 8014c90:	aa25      	add	r2, sp, #148	; 0x94
 8014c92:	9312      	str	r3, [sp, #72]	; 0x48
 8014c94:	6823      	ldr	r3, [r4, #0]
 8014c96:	8011      	strh	r1, [r2, #0]
 8014c98:	4aa6      	ldr	r2, [pc, #664]	; (8014f34 <_svfprintf_r+0xdec>)
 8014c9a:	9306      	str	r3, [sp, #24]
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	921e      	str	r2, [sp, #120]	; 0x78
 8014ca0:	2278      	movs	r2, #120	; 0x78
 8014ca2:	9307      	str	r3, [sp, #28]
 8014ca4:	3302      	adds	r3, #2
 8014ca6:	431e      	orrs	r6, r3
 8014ca8:	920e      	str	r2, [sp, #56]	; 0x38
 8014caa:	e7bc      	b.n	8014c26 <_svfprintf_r+0xade>
 8014cac:	1d23      	adds	r3, r4, #4
 8014cae:	9312      	str	r3, [sp, #72]	; 0x48
 8014cb0:	6823      	ldr	r3, [r4, #0]
 8014cb2:	2400      	movs	r4, #0
 8014cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014cb6:	231b      	movs	r3, #27
 8014cb8:	aa1e      	add	r2, sp, #120	; 0x78
 8014cba:	189b      	adds	r3, r3, r2
 8014cbc:	701c      	strb	r4, [r3, #0]
 8014cbe:	9b08      	ldr	r3, [sp, #32]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	d00e      	beq.n	8014ce2 <_svfprintf_r+0xb9a>
 8014cc4:	9a08      	ldr	r2, [sp, #32]
 8014cc6:	0021      	movs	r1, r4
 8014cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cca:	f001 ff79 	bl	8016bc0 <memchr>
 8014cce:	900c      	str	r0, [sp, #48]	; 0x30
 8014cd0:	42a0      	cmp	r0, r4
 8014cd2:	d100      	bne.n	8014cd6 <_svfprintf_r+0xb8e>
 8014cd4:	e100      	b.n	8014ed8 <_svfprintf_r+0xd90>
 8014cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cd8:	1a83      	subs	r3, r0, r2
 8014cda:	9308      	str	r3, [sp, #32]
 8014cdc:	940c      	str	r4, [sp, #48]	; 0x30
 8014cde:	0023      	movs	r3, r4
 8014ce0:	e527      	b.n	8014732 <_svfprintf_r+0x5ea>
 8014ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ce4:	f7eb fa18 	bl	8000118 <strlen>
 8014ce8:	9008      	str	r0, [sp, #32]
 8014cea:	e7f7      	b.n	8014cdc <_svfprintf_r+0xb94>
 8014cec:	2310      	movs	r3, #16
 8014cee:	431e      	orrs	r6, r3
 8014cf0:	2220      	movs	r2, #32
 8014cf2:	4032      	ands	r2, r6
 8014cf4:	d00b      	beq.n	8014d0e <_svfprintf_r+0xbc6>
 8014cf6:	2307      	movs	r3, #7
 8014cf8:	3407      	adds	r4, #7
 8014cfa:	439c      	bics	r4, r3
 8014cfc:	0023      	movs	r3, r4
 8014cfe:	3308      	adds	r3, #8
 8014d00:	9312      	str	r3, [sp, #72]	; 0x48
 8014d02:	6823      	ldr	r3, [r4, #0]
 8014d04:	6864      	ldr	r4, [r4, #4]
 8014d06:	9306      	str	r3, [sp, #24]
 8014d08:	9407      	str	r4, [sp, #28]
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	e78b      	b.n	8014c26 <_svfprintf_r+0xade>
 8014d0e:	1d23      	adds	r3, r4, #4
 8014d10:	9312      	str	r3, [sp, #72]	; 0x48
 8014d12:	2310      	movs	r3, #16
 8014d14:	4033      	ands	r3, r6
 8014d16:	d003      	beq.n	8014d20 <_svfprintf_r+0xbd8>
 8014d18:	6823      	ldr	r3, [r4, #0]
 8014d1a:	9306      	str	r3, [sp, #24]
 8014d1c:	9207      	str	r2, [sp, #28]
 8014d1e:	e7f4      	b.n	8014d0a <_svfprintf_r+0xbc2>
 8014d20:	2240      	movs	r2, #64	; 0x40
 8014d22:	4032      	ands	r2, r6
 8014d24:	d004      	beq.n	8014d30 <_svfprintf_r+0xbe8>
 8014d26:	6822      	ldr	r2, [r4, #0]
 8014d28:	b292      	uxth	r2, r2
 8014d2a:	9206      	str	r2, [sp, #24]
 8014d2c:	9307      	str	r3, [sp, #28]
 8014d2e:	e7ec      	b.n	8014d0a <_svfprintf_r+0xbc2>
 8014d30:	2380      	movs	r3, #128	; 0x80
 8014d32:	009b      	lsls	r3, r3, #2
 8014d34:	4033      	ands	r3, r6
 8014d36:	d002      	beq.n	8014d3e <_svfprintf_r+0xbf6>
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	e7ed      	b.n	8014d1a <_svfprintf_r+0xbd2>
 8014d3e:	6822      	ldr	r2, [r4, #0]
 8014d40:	e7f3      	b.n	8014d2a <_svfprintf_r+0xbe2>
 8014d42:	4b7c      	ldr	r3, [pc, #496]	; (8014f34 <_svfprintf_r+0xdec>)
 8014d44:	f7ff fad9 	bl	80142fa <_svfprintf_r+0x1b2>
 8014d48:	1d23      	adds	r3, r4, #4
 8014d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d4c:	2310      	movs	r3, #16
 8014d4e:	4033      	ands	r3, r6
 8014d50:	d004      	beq.n	8014d5c <_svfprintf_r+0xc14>
 8014d52:	6823      	ldr	r3, [r4, #0]
 8014d54:	9306      	str	r3, [sp, #24]
 8014d56:	9207      	str	r2, [sp, #28]
 8014d58:	f7ff fadf 	bl	801431a <_svfprintf_r+0x1d2>
 8014d5c:	2240      	movs	r2, #64	; 0x40
 8014d5e:	4032      	ands	r2, r6
 8014d60:	d005      	beq.n	8014d6e <_svfprintf_r+0xc26>
 8014d62:	6822      	ldr	r2, [r4, #0]
 8014d64:	b292      	uxth	r2, r2
 8014d66:	9206      	str	r2, [sp, #24]
 8014d68:	9307      	str	r3, [sp, #28]
 8014d6a:	f7ff fad6 	bl	801431a <_svfprintf_r+0x1d2>
 8014d6e:	2380      	movs	r3, #128	; 0x80
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	4033      	ands	r3, r6
 8014d74:	d002      	beq.n	8014d7c <_svfprintf_r+0xc34>
 8014d76:	6823      	ldr	r3, [r4, #0]
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	e7eb      	b.n	8014d54 <_svfprintf_r+0xc0c>
 8014d7c:	6822      	ldr	r2, [r4, #0]
 8014d7e:	e7f2      	b.n	8014d66 <_svfprintf_r+0xc1e>
 8014d80:	0032      	movs	r2, r6
 8014d82:	2301      	movs	r3, #1
 8014d84:	e759      	b.n	8014c3a <_svfprintf_r+0xaf2>
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d100      	bne.n	8014d8c <_svfprintf_r+0xc44>
 8014d8a:	e476      	b.n	801467a <_svfprintf_r+0x532>
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	d06b      	beq.n	8014e68 <_svfprintf_r+0xd20>
 8014d90:	2507      	movs	r5, #7
 8014d92:	ab58      	add	r3, sp, #352	; 0x160
 8014d94:	1e5a      	subs	r2, r3, #1
 8014d96:	9209      	str	r2, [sp, #36]	; 0x24
 8014d98:	9a06      	ldr	r2, [sp, #24]
 8014d9a:	1e59      	subs	r1, r3, #1
 8014d9c:	402a      	ands	r2, r5
 8014d9e:	3230      	adds	r2, #48	; 0x30
 8014da0:	700a      	strb	r2, [r1, #0]
 8014da2:	9907      	ldr	r1, [sp, #28]
 8014da4:	074c      	lsls	r4, r1, #29
 8014da6:	9906      	ldr	r1, [sp, #24]
 8014da8:	08c8      	lsrs	r0, r1, #3
 8014daa:	9907      	ldr	r1, [sp, #28]
 8014dac:	4304      	orrs	r4, r0
 8014dae:	08c9      	lsrs	r1, r1, #3
 8014db0:	9107      	str	r1, [sp, #28]
 8014db2:	0021      	movs	r1, r4
 8014db4:	9807      	ldr	r0, [sp, #28]
 8014db6:	9406      	str	r4, [sp, #24]
 8014db8:	4301      	orrs	r1, r0
 8014dba:	d111      	bne.n	8014de0 <_svfprintf_r+0xc98>
 8014dbc:	07f1      	lsls	r1, r6, #31
 8014dbe:	d502      	bpl.n	8014dc6 <_svfprintf_r+0xc7e>
 8014dc0:	3b02      	subs	r3, #2
 8014dc2:	2a30      	cmp	r2, #48	; 0x30
 8014dc4:	d173      	bne.n	8014eae <_svfprintf_r+0xd66>
 8014dc6:	9b08      	ldr	r3, [sp, #32]
 8014dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dca:	9317      	str	r3, [sp, #92]	; 0x5c
 8014dcc:	ab58      	add	r3, sp, #352	; 0x160
 8014dce:	1a9b      	subs	r3, r3, r2
 8014dd0:	9308      	str	r3, [sp, #32]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8014dd6:	9310      	str	r3, [sp, #64]	; 0x40
 8014dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dda:	001d      	movs	r5, r3
 8014ddc:	f7ff fb4b 	bl	8014476 <_svfprintf_r+0x32e>
 8014de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de2:	e7d7      	b.n	8014d94 <_svfprintf_r+0xc4c>
 8014de4:	2480      	movs	r4, #128	; 0x80
 8014de6:	2300      	movs	r3, #0
 8014de8:	00e4      	lsls	r4, r4, #3
 8014dea:	930d      	str	r3, [sp, #52]	; 0x34
 8014dec:	4034      	ands	r4, r6
 8014dee:	ab58      	add	r3, sp, #352	; 0x160
 8014df0:	3b01      	subs	r3, #1
 8014df2:	9309      	str	r3, [sp, #36]	; 0x24
 8014df4:	220a      	movs	r2, #10
 8014df6:	9806      	ldr	r0, [sp, #24]
 8014df8:	9907      	ldr	r1, [sp, #28]
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	f7eb fb96 	bl	800052c <__aeabi_uldivmod>
 8014e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e02:	3230      	adds	r2, #48	; 0x30
 8014e04:	701a      	strb	r2, [r3, #0]
 8014e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e08:	3301      	adds	r3, #1
 8014e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8014e0c:	2c00      	cmp	r4, #0
 8014e0e:	d01d      	beq.n	8014e4c <_svfprintf_r+0xd04>
 8014e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d118      	bne.n	8014e4c <_svfprintf_r+0xd04>
 8014e1a:	2aff      	cmp	r2, #255	; 0xff
 8014e1c:	d016      	beq.n	8014e4c <_svfprintf_r+0xd04>
 8014e1e:	9b07      	ldr	r3, [sp, #28]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d102      	bne.n	8014e2a <_svfprintf_r+0xce2>
 8014e24:	9b06      	ldr	r3, [sp, #24]
 8014e26:	2b09      	cmp	r3, #9
 8014e28:	d910      	bls.n	8014e4c <_svfprintf_r+0xd04>
 8014e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014e2e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	0018      	movs	r0, r3
 8014e34:	9309      	str	r3, [sp, #36]	; 0x24
 8014e36:	f7fe fa52 	bl	80132de <strncpy>
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e3e:	920d      	str	r2, [sp, #52]	; 0x34
 8014e40:	785b      	ldrb	r3, [r3, #1]
 8014e42:	1e5a      	subs	r2, r3, #1
 8014e44:	4193      	sbcs	r3, r2
 8014e46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e48:	18d3      	adds	r3, r2, r3
 8014e4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e4c:	220a      	movs	r2, #10
 8014e4e:	9806      	ldr	r0, [sp, #24]
 8014e50:	9907      	ldr	r1, [sp, #28]
 8014e52:	2300      	movs	r3, #0
 8014e54:	f7eb fb6a 	bl	800052c <__aeabi_uldivmod>
 8014e58:	9006      	str	r0, [sp, #24]
 8014e5a:	9107      	str	r1, [sp, #28]
 8014e5c:	9b06      	ldr	r3, [sp, #24]
 8014e5e:	9a07      	ldr	r2, [sp, #28]
 8014e60:	4313      	orrs	r3, r2
 8014e62:	d0b0      	beq.n	8014dc6 <_svfprintf_r+0xc7e>
 8014e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e66:	e7c3      	b.n	8014df0 <_svfprintf_r+0xca8>
 8014e68:	200f      	movs	r0, #15
 8014e6a:	ab58      	add	r3, sp, #352	; 0x160
 8014e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014e72:	3b01      	subs	r3, #1
 8014e74:	9309      	str	r3, [sp, #36]	; 0x24
 8014e76:	9b06      	ldr	r3, [sp, #24]
 8014e78:	4003      	ands	r3, r0
 8014e7a:	5cd3      	ldrb	r3, [r2, r3]
 8014e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e7e:	7013      	strb	r3, [r2, #0]
 8014e80:	9b07      	ldr	r3, [sp, #28]
 8014e82:	0719      	lsls	r1, r3, #28
 8014e84:	9b06      	ldr	r3, [sp, #24]
 8014e86:	091a      	lsrs	r2, r3, #4
 8014e88:	9b07      	ldr	r3, [sp, #28]
 8014e8a:	4311      	orrs	r1, r2
 8014e8c:	091b      	lsrs	r3, r3, #4
 8014e8e:	9307      	str	r3, [sp, #28]
 8014e90:	000b      	movs	r3, r1
 8014e92:	9a07      	ldr	r2, [sp, #28]
 8014e94:	9106      	str	r1, [sp, #24]
 8014e96:	4313      	orrs	r3, r2
 8014e98:	d1e9      	bne.n	8014e6e <_svfprintf_r+0xd26>
 8014e9a:	e794      	b.n	8014dc6 <_svfprintf_r+0xc7e>
 8014e9c:	a958      	add	r1, sp, #352	; 0x160
 8014e9e:	9109      	str	r1, [sp, #36]	; 0x24
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d190      	bne.n	8014dc6 <_svfprintf_r+0xc7e>
 8014ea4:	07d3      	lsls	r3, r2, #31
 8014ea6:	d58e      	bpl.n	8014dc6 <_svfprintf_r+0xc7e>
 8014ea8:	23e7      	movs	r3, #231	; 0xe7
 8014eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8014eac:	189b      	adds	r3, r3, r2
 8014eae:	2230      	movs	r2, #48	; 0x30
 8014eb0:	f7ff fbf0 	bl	8014694 <_svfprintf_r+0x54c>
 8014eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d100      	bne.n	8014ebc <_svfprintf_r+0xd74>
 8014eba:	e38a      	b.n	80155d2 <_svfprintf_r+0x148a>
 8014ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ebe:	ab3f      	add	r3, sp, #252	; 0xfc
 8014ec0:	701a      	strb	r2, [r3, #0]
 8014ec2:	221b      	movs	r2, #27
 8014ec4:	2000      	movs	r0, #0
 8014ec6:	a91e      	add	r1, sp, #120	; 0x78
 8014ec8:	1852      	adds	r2, r2, r1
 8014eca:	7010      	strb	r0, [r2, #0]
 8014ecc:	9412      	str	r4, [sp, #72]	; 0x48
 8014ece:	f7ff faca 	bl	8014466 <_svfprintf_r+0x31e>
 8014ed2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ed6:	e592      	b.n	80149fe <_svfprintf_r+0x8b6>
 8014ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eda:	e42a      	b.n	8014732 <_svfprintf_r+0x5ea>
 8014edc:	2010      	movs	r0, #16
 8014ede:	1812      	adds	r2, r2, r0
 8014ee0:	6078      	str	r0, [r7, #4]
 8014ee2:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ee4:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ee6:	2b07      	cmp	r3, #7
 8014ee8:	dd08      	ble.n	8014efc <_svfprintf_r+0xdb4>
 8014eea:	aa2c      	add	r2, sp, #176	; 0xb0
 8014eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ef0:	f002 fa7e 	bl	80173f0 <__ssprint_r>
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d000      	beq.n	8014efa <_svfprintf_r+0xdb2>
 8014ef8:	e34a      	b.n	8015590 <_svfprintf_r+0x1448>
 8014efa:	a92f      	add	r1, sp, #188	; 0xbc
 8014efc:	3c10      	subs	r4, #16
 8014efe:	000f      	movs	r7, r1
 8014f00:	f7ff fad8 	bl	80144b4 <_svfprintf_r+0x36c>
 8014f04:	2010      	movs	r0, #16
 8014f06:	1812      	adds	r2, r2, r0
 8014f08:	6078      	str	r0, [r7, #4]
 8014f0a:	922e      	str	r2, [sp, #184]	; 0xb8
 8014f0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f0e:	2b07      	cmp	r3, #7
 8014f10:	dd08      	ble.n	8014f24 <_svfprintf_r+0xddc>
 8014f12:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f18:	f002 fa6a 	bl	80173f0 <__ssprint_r>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d000      	beq.n	8014f22 <_svfprintf_r+0xdda>
 8014f20:	e336      	b.n	8015590 <_svfprintf_r+0x1448>
 8014f22:	a92f      	add	r1, sp, #188	; 0xbc
 8014f24:	3c10      	subs	r4, #16
 8014f26:	000f      	movs	r7, r1
 8014f28:	f7ff fb24 	bl	8014574 <_svfprintf_r+0x42c>
 8014f2c:	fffffbff 	.word	0xfffffbff
 8014f30:	00007830 	.word	0x00007830
 8014f34:	0801a5c8 	.word	0x0801a5c8
 8014f38:	2010      	movs	r0, #16
 8014f3a:	1812      	adds	r2, r2, r0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	922e      	str	r2, [sp, #184]	; 0xb8
 8014f40:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f42:	2b07      	cmp	r3, #7
 8014f44:	dd08      	ble.n	8014f58 <_svfprintf_r+0xe10>
 8014f46:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f4c:	f002 fa50 	bl	80173f0 <__ssprint_r>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d000      	beq.n	8014f56 <_svfprintf_r+0xe0e>
 8014f54:	e31c      	b.n	8015590 <_svfprintf_r+0x1448>
 8014f56:	a92f      	add	r1, sp, #188	; 0xbc
 8014f58:	3c10      	subs	r4, #16
 8014f5a:	000f      	movs	r7, r1
 8014f5c:	f7ff fb2c 	bl	80145b8 <_svfprintf_r+0x470>
 8014f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f62:	2b65      	cmp	r3, #101	; 0x65
 8014f64:	dc00      	bgt.n	8014f68 <_svfprintf_r+0xe20>
 8014f66:	e259      	b.n	801541c <_svfprintf_r+0x12d4>
 8014f68:	2200      	movs	r2, #0
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014f6e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014f70:	f7eb fa74 	bl	800045c <__aeabi_dcmpeq>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d07c      	beq.n	8015072 <_svfprintf_r+0xf2a>
 8014f78:	4b81      	ldr	r3, [pc, #516]	; (8015180 <_svfprintf_r+0x1038>)
 8014f7a:	603b      	str	r3, [r7, #0]
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	607b      	str	r3, [r7, #4]
 8014f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f82:	3708      	adds	r7, #8
 8014f84:	3301      	adds	r3, #1
 8014f86:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f8a:	9308      	str	r3, [sp, #32]
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f90:	2b07      	cmp	r3, #7
 8014f92:	dd08      	ble.n	8014fa6 <_svfprintf_r+0xe5e>
 8014f94:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f9a:	f002 fa29 	bl	80173f0 <__ssprint_r>
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	d000      	beq.n	8014fa4 <_svfprintf_r+0xe5c>
 8014fa2:	e2f5      	b.n	8015590 <_svfprintf_r+0x1448>
 8014fa4:	af2f      	add	r7, sp, #188	; 0xbc
 8014fa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014faa:	4293      	cmp	r3, r2
 8014fac:	db01      	blt.n	8014fb2 <_svfprintf_r+0xe6a>
 8014fae:	07f3      	lsls	r3, r6, #31
 8014fb0:	d51d      	bpl.n	8014fee <_svfprintf_r+0xea6>
 8014fb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014fb6:	4694      	mov	ip, r2
 8014fb8:	603b      	str	r3, [r7, #0]
 8014fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fbc:	607b      	str	r3, [r7, #4]
 8014fbe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	4463      	add	r3, ip
 8014fc4:	932e      	str	r3, [sp, #184]	; 0xb8
 8014fc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fc8:	9308      	str	r3, [sp, #32]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fce:	2b07      	cmp	r3, #7
 8014fd0:	dd08      	ble.n	8014fe4 <_svfprintf_r+0xe9c>
 8014fd2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fd8:	f002 fa0a 	bl	80173f0 <__ssprint_r>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d000      	beq.n	8014fe2 <_svfprintf_r+0xe9a>
 8014fe0:	e2d6      	b.n	8015590 <_svfprintf_r+0x1448>
 8014fe2:	af2f      	add	r7, sp, #188	; 0xbc
 8014fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fe6:	2510      	movs	r5, #16
 8014fe8:	1e5c      	subs	r4, r3, #1
 8014fea:	2c00      	cmp	r4, #0
 8014fec:	dc2f      	bgt.n	801504e <_svfprintf_r+0xf06>
 8014fee:	0773      	lsls	r3, r6, #29
 8014ff0:	d500      	bpl.n	8014ff4 <_svfprintf_r+0xeac>
 8014ff2:	e2af      	b.n	8015554 <_svfprintf_r+0x140c>
 8014ff4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014ff6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	da00      	bge.n	8014ffe <_svfprintf_r+0xeb6>
 8014ffc:	0013      	movs	r3, r2
 8014ffe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015000:	18d3      	adds	r3, r2, r3
 8015002:	9315      	str	r3, [sp, #84]	; 0x54
 8015004:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015006:	9308      	str	r3, [sp, #32]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d007      	beq.n	801501c <_svfprintf_r+0xed4>
 801500c:	aa2c      	add	r2, sp, #176	; 0xb0
 801500e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015010:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015012:	f002 f9ed 	bl	80173f0 <__ssprint_r>
 8015016:	2800      	cmp	r0, #0
 8015018:	d000      	beq.n	801501c <_svfprintf_r+0xed4>
 801501a:	e2b9      	b.n	8015590 <_svfprintf_r+0x1448>
 801501c:	2300      	movs	r3, #0
 801501e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015022:	2b00      	cmp	r3, #0
 8015024:	d000      	beq.n	8015028 <_svfprintf_r+0xee0>
 8015026:	e2cf      	b.n	80155c8 <_svfprintf_r+0x1480>
 8015028:	af2f      	add	r7, sp, #188	; 0xbc
 801502a:	e5d6      	b.n	8014bda <_svfprintf_r+0xa92>
 801502c:	3210      	adds	r2, #16
 801502e:	607d      	str	r5, [r7, #4]
 8015030:	922e      	str	r2, [sp, #184]	; 0xb8
 8015032:	932d      	str	r3, [sp, #180]	; 0xb4
 8015034:	2b07      	cmp	r3, #7
 8015036:	dd08      	ble.n	801504a <_svfprintf_r+0xf02>
 8015038:	aa2c      	add	r2, sp, #176	; 0xb0
 801503a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801503c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801503e:	f002 f9d7 	bl	80173f0 <__ssprint_r>
 8015042:	2800      	cmp	r0, #0
 8015044:	d000      	beq.n	8015048 <_svfprintf_r+0xf00>
 8015046:	e2a3      	b.n	8015590 <_svfprintf_r+0x1448>
 8015048:	a92f      	add	r1, sp, #188	; 0xbc
 801504a:	000f      	movs	r7, r1
 801504c:	3c10      	subs	r4, #16
 801504e:	0039      	movs	r1, r7
 8015050:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015052:	484c      	ldr	r0, [pc, #304]	; (8015184 <_svfprintf_r+0x103c>)
 8015054:	9308      	str	r3, [sp, #32]
 8015056:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015058:	3301      	adds	r3, #1
 801505a:	3108      	adds	r1, #8
 801505c:	6038      	str	r0, [r7, #0]
 801505e:	2c10      	cmp	r4, #16
 8015060:	dce4      	bgt.n	801502c <_svfprintf_r+0xee4>
 8015062:	607c      	str	r4, [r7, #4]
 8015064:	18a4      	adds	r4, r4, r2
 8015066:	942e      	str	r4, [sp, #184]	; 0xb8
 8015068:	932d      	str	r3, [sp, #180]	; 0xb4
 801506a:	000f      	movs	r7, r1
 801506c:	2b07      	cmp	r3, #7
 801506e:	ddbe      	ble.n	8014fee <_svfprintf_r+0xea6>
 8015070:	e06a      	b.n	8015148 <_svfprintf_r+0x1000>
 8015072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015074:	2b00      	cmp	r3, #0
 8015076:	dd00      	ble.n	801507a <_svfprintf_r+0xf32>
 8015078:	e086      	b.n	8015188 <_svfprintf_r+0x1040>
 801507a:	4b41      	ldr	r3, [pc, #260]	; (8015180 <_svfprintf_r+0x1038>)
 801507c:	603b      	str	r3, [r7, #0]
 801507e:	2301      	movs	r3, #1
 8015080:	607b      	str	r3, [r7, #4]
 8015082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015084:	3708      	adds	r7, #8
 8015086:	3301      	adds	r3, #1
 8015088:	932e      	str	r3, [sp, #184]	; 0xb8
 801508a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801508c:	9308      	str	r3, [sp, #32]
 801508e:	3301      	adds	r3, #1
 8015090:	932d      	str	r3, [sp, #180]	; 0xb4
 8015092:	2b07      	cmp	r3, #7
 8015094:	dd08      	ble.n	80150a8 <_svfprintf_r+0xf60>
 8015096:	aa2c      	add	r2, sp, #176	; 0xb0
 8015098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801509a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801509c:	f002 f9a8 	bl	80173f0 <__ssprint_r>
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d000      	beq.n	80150a6 <_svfprintf_r+0xf5e>
 80150a4:	e274      	b.n	8015590 <_svfprintf_r+0x1448>
 80150a6:	af2f      	add	r7, sp, #188	; 0xbc
 80150a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d104      	bne.n	80150b8 <_svfprintf_r+0xf70>
 80150ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d101      	bne.n	80150b8 <_svfprintf_r+0xf70>
 80150b4:	07f3      	lsls	r3, r6, #31
 80150b6:	d59a      	bpl.n	8014fee <_svfprintf_r+0xea6>
 80150b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150bc:	4694      	mov	ip, r2
 80150be:	603b      	str	r3, [r7, #0]
 80150c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150c2:	607b      	str	r3, [r7, #4]
 80150c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150c6:	3708      	adds	r7, #8
 80150c8:	4463      	add	r3, ip
 80150ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80150cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150ce:	9308      	str	r3, [sp, #32]
 80150d0:	3301      	adds	r3, #1
 80150d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80150d4:	2b07      	cmp	r3, #7
 80150d6:	dd08      	ble.n	80150ea <_svfprintf_r+0xfa2>
 80150d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80150da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150de:	f002 f987 	bl	80173f0 <__ssprint_r>
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d000      	beq.n	80150e8 <_svfprintf_r+0xfa0>
 80150e6:	e253      	b.n	8015590 <_svfprintf_r+0x1448>
 80150e8:	af2f      	add	r7, sp, #188	; 0xbc
 80150ea:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80150ec:	2c00      	cmp	r4, #0
 80150ee:	da1a      	bge.n	8015126 <_svfprintf_r+0xfde>
 80150f0:	0039      	movs	r1, r7
 80150f2:	2510      	movs	r5, #16
 80150f4:	4264      	negs	r4, r4
 80150f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150f8:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80150fa:	9308      	str	r3, [sp, #32]
 80150fc:	1c5a      	adds	r2, r3, #1
 80150fe:	4b21      	ldr	r3, [pc, #132]	; (8015184 <_svfprintf_r+0x103c>)
 8015100:	3708      	adds	r7, #8
 8015102:	600b      	str	r3, [r1, #0]
 8015104:	2c10      	cmp	r4, #16
 8015106:	dc29      	bgt.n	801515c <_svfprintf_r+0x1014>
 8015108:	604c      	str	r4, [r1, #4]
 801510a:	1824      	adds	r4, r4, r0
 801510c:	942e      	str	r4, [sp, #184]	; 0xb8
 801510e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015110:	2a07      	cmp	r2, #7
 8015112:	dd08      	ble.n	8015126 <_svfprintf_r+0xfde>
 8015114:	aa2c      	add	r2, sp, #176	; 0xb0
 8015116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015118:	980a      	ldr	r0, [sp, #40]	; 0x28
 801511a:	f002 f969 	bl	80173f0 <__ssprint_r>
 801511e:	2800      	cmp	r0, #0
 8015120:	d000      	beq.n	8015124 <_svfprintf_r+0xfdc>
 8015122:	e235      	b.n	8015590 <_svfprintf_r+0x1448>
 8015124:	af2f      	add	r7, sp, #188	; 0xbc
 8015126:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801512a:	468c      	mov	ip, r1
 801512c:	603b      	str	r3, [r7, #0]
 801512e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015130:	607b      	str	r3, [r7, #4]
 8015132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015134:	4463      	add	r3, ip
 8015136:	932e      	str	r3, [sp, #184]	; 0xb8
 8015138:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801513a:	1c5a      	adds	r2, r3, #1
 801513c:	9308      	str	r3, [sp, #32]
 801513e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015140:	2a07      	cmp	r2, #7
 8015142:	dc01      	bgt.n	8015148 <_svfprintf_r+0x1000>
 8015144:	f7ff fa6c 	bl	8014620 <_svfprintf_r+0x4d8>
 8015148:	aa2c      	add	r2, sp, #176	; 0xb0
 801514a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801514c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801514e:	f002 f94f 	bl	80173f0 <__ssprint_r>
 8015152:	2800      	cmp	r0, #0
 8015154:	d000      	beq.n	8015158 <_svfprintf_r+0x1010>
 8015156:	e21b      	b.n	8015590 <_svfprintf_r+0x1448>
 8015158:	af2f      	add	r7, sp, #188	; 0xbc
 801515a:	e748      	b.n	8014fee <_svfprintf_r+0xea6>
 801515c:	3010      	adds	r0, #16
 801515e:	604d      	str	r5, [r1, #4]
 8015160:	902e      	str	r0, [sp, #184]	; 0xb8
 8015162:	922d      	str	r2, [sp, #180]	; 0xb4
 8015164:	2a07      	cmp	r2, #7
 8015166:	dd08      	ble.n	801517a <_svfprintf_r+0x1032>
 8015168:	aa2c      	add	r2, sp, #176	; 0xb0
 801516a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801516c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801516e:	f002 f93f 	bl	80173f0 <__ssprint_r>
 8015172:	2800      	cmp	r0, #0
 8015174:	d000      	beq.n	8015178 <_svfprintf_r+0x1030>
 8015176:	e20b      	b.n	8015590 <_svfprintf_r+0x1448>
 8015178:	af2f      	add	r7, sp, #188	; 0xbc
 801517a:	3c10      	subs	r4, #16
 801517c:	0039      	movs	r1, r7
 801517e:	e7ba      	b.n	80150f6 <_svfprintf_r+0xfae>
 8015180:	0801a5ea 	.word	0x0801a5ea
 8015184:	0801a5fc 	.word	0x0801a5fc
 8015188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801518a:	002c      	movs	r4, r5
 801518c:	429d      	cmp	r5, r3
 801518e:	dd00      	ble.n	8015192 <_svfprintf_r+0x104a>
 8015190:	001c      	movs	r4, r3
 8015192:	2c00      	cmp	r4, #0
 8015194:	dd15      	ble.n	80151c2 <_svfprintf_r+0x107a>
 8015196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015198:	607c      	str	r4, [r7, #4]
 801519a:	603b      	str	r3, [r7, #0]
 801519c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801519e:	3708      	adds	r7, #8
 80151a0:	18e3      	adds	r3, r4, r3
 80151a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80151a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151a6:	9308      	str	r3, [sp, #32]
 80151a8:	3301      	adds	r3, #1
 80151aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80151ac:	2b07      	cmp	r3, #7
 80151ae:	dd08      	ble.n	80151c2 <_svfprintf_r+0x107a>
 80151b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80151b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151b6:	f002 f91b 	bl	80173f0 <__ssprint_r>
 80151ba:	2800      	cmp	r0, #0
 80151bc:	d000      	beq.n	80151c0 <_svfprintf_r+0x1078>
 80151be:	e1e7      	b.n	8015590 <_svfprintf_r+0x1448>
 80151c0:	af2f      	add	r7, sp, #188	; 0xbc
 80151c2:	43e3      	mvns	r3, r4
 80151c4:	17db      	asrs	r3, r3, #31
 80151c6:	401c      	ands	r4, r3
 80151c8:	1b2c      	subs	r4, r5, r4
 80151ca:	2c00      	cmp	r4, #0
 80151cc:	dd1a      	ble.n	8015204 <_svfprintf_r+0x10bc>
 80151ce:	0039      	movs	r1, r7
 80151d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151d2:	48d4      	ldr	r0, [pc, #848]	; (8015524 <_svfprintf_r+0x13dc>)
 80151d4:	9308      	str	r3, [sp, #32]
 80151d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80151d8:	3301      	adds	r3, #1
 80151da:	3108      	adds	r1, #8
 80151dc:	6038      	str	r0, [r7, #0]
 80151de:	2c10      	cmp	r4, #16
 80151e0:	dd00      	ble.n	80151e4 <_svfprintf_r+0x109c>
 80151e2:	e089      	b.n	80152f8 <_svfprintf_r+0x11b0>
 80151e4:	607c      	str	r4, [r7, #4]
 80151e6:	18a4      	adds	r4, r4, r2
 80151e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80151ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80151ec:	000f      	movs	r7, r1
 80151ee:	2b07      	cmp	r3, #7
 80151f0:	dd08      	ble.n	8015204 <_svfprintf_r+0x10bc>
 80151f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80151f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151f8:	f002 f8fa 	bl	80173f0 <__ssprint_r>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	d000      	beq.n	8015202 <_svfprintf_r+0x10ba>
 8015200:	e1c6      	b.n	8015590 <_svfprintf_r+0x1448>
 8015202:	af2f      	add	r7, sp, #188	; 0xbc
 8015204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015206:	195d      	adds	r5, r3, r5
 8015208:	0573      	lsls	r3, r6, #21
 801520a:	d50d      	bpl.n	8015228 <_svfprintf_r+0x10e0>
 801520c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801520e:	2b00      	cmp	r3, #0
 8015210:	d000      	beq.n	8015214 <_svfprintf_r+0x10cc>
 8015212:	e084      	b.n	801531e <_svfprintf_r+0x11d6>
 8015214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015216:	2b00      	cmp	r3, #0
 8015218:	d000      	beq.n	801521c <_svfprintf_r+0x10d4>
 801521a:	e083      	b.n	8015324 <_svfprintf_r+0x11dc>
 801521c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801521e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015220:	189b      	adds	r3, r3, r2
 8015222:	429d      	cmp	r5, r3
 8015224:	d900      	bls.n	8015228 <_svfprintf_r+0x10e0>
 8015226:	001d      	movs	r5, r3
 8015228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801522a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801522c:	4293      	cmp	r3, r2
 801522e:	db01      	blt.n	8015234 <_svfprintf_r+0x10ec>
 8015230:	07f3      	lsls	r3, r6, #31
 8015232:	d518      	bpl.n	8015266 <_svfprintf_r+0x111e>
 8015234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015236:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015238:	4694      	mov	ip, r2
 801523a:	603b      	str	r3, [r7, #0]
 801523c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801523e:	607b      	str	r3, [r7, #4]
 8015240:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015242:	3708      	adds	r7, #8
 8015244:	4463      	add	r3, ip
 8015246:	932e      	str	r3, [sp, #184]	; 0xb8
 8015248:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	3301      	adds	r3, #1
 801524e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015250:	2b07      	cmp	r3, #7
 8015252:	dd08      	ble.n	8015266 <_svfprintf_r+0x111e>
 8015254:	aa2c      	add	r2, sp, #176	; 0xb0
 8015256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015258:	980a      	ldr	r0, [sp, #40]	; 0x28
 801525a:	f002 f8c9 	bl	80173f0 <__ssprint_r>
 801525e:	2800      	cmp	r0, #0
 8015260:	d000      	beq.n	8015264 <_svfprintf_r+0x111c>
 8015262:	e195      	b.n	8015590 <_svfprintf_r+0x1448>
 8015264:	af2f      	add	r7, sp, #188	; 0xbc
 8015266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801526a:	4694      	mov	ip, r2
 801526c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801526e:	4463      	add	r3, ip
 8015270:	1b5b      	subs	r3, r3, r5
 8015272:	1a54      	subs	r4, r2, r1
 8015274:	429c      	cmp	r4, r3
 8015276:	dd00      	ble.n	801527a <_svfprintf_r+0x1132>
 8015278:	001c      	movs	r4, r3
 801527a:	2c00      	cmp	r4, #0
 801527c:	dd14      	ble.n	80152a8 <_svfprintf_r+0x1160>
 801527e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015280:	603d      	str	r5, [r7, #0]
 8015282:	18e3      	adds	r3, r4, r3
 8015284:	932e      	str	r3, [sp, #184]	; 0xb8
 8015286:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015288:	607c      	str	r4, [r7, #4]
 801528a:	9308      	str	r3, [sp, #32]
 801528c:	3301      	adds	r3, #1
 801528e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015290:	3708      	adds	r7, #8
 8015292:	2b07      	cmp	r3, #7
 8015294:	dd08      	ble.n	80152a8 <_svfprintf_r+0x1160>
 8015296:	aa2c      	add	r2, sp, #176	; 0xb0
 8015298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801529a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801529c:	f002 f8a8 	bl	80173f0 <__ssprint_r>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d000      	beq.n	80152a6 <_svfprintf_r+0x115e>
 80152a4:	e174      	b.n	8015590 <_svfprintf_r+0x1448>
 80152a6:	af2f      	add	r7, sp, #188	; 0xbc
 80152a8:	43e3      	mvns	r3, r4
 80152aa:	17db      	asrs	r3, r3, #31
 80152ac:	401c      	ands	r4, r3
 80152ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80152b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152b2:	2510      	movs	r5, #16
 80152b4:	1a9b      	subs	r3, r3, r2
 80152b6:	1b1c      	subs	r4, r3, r4
 80152b8:	2c00      	cmp	r4, #0
 80152ba:	dc00      	bgt.n	80152be <_svfprintf_r+0x1176>
 80152bc:	e697      	b.n	8014fee <_svfprintf_r+0xea6>
 80152be:	0039      	movs	r1, r7
 80152c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152c2:	4898      	ldr	r0, [pc, #608]	; (8015524 <_svfprintf_r+0x13dc>)
 80152c4:	9308      	str	r3, [sp, #32]
 80152c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80152c8:	3301      	adds	r3, #1
 80152ca:	3108      	adds	r1, #8
 80152cc:	6038      	str	r0, [r7, #0]
 80152ce:	2c10      	cmp	r4, #16
 80152d0:	dc00      	bgt.n	80152d4 <_svfprintf_r+0x118c>
 80152d2:	e6c6      	b.n	8015062 <_svfprintf_r+0xf1a>
 80152d4:	3210      	adds	r2, #16
 80152d6:	607d      	str	r5, [r7, #4]
 80152d8:	922e      	str	r2, [sp, #184]	; 0xb8
 80152da:	932d      	str	r3, [sp, #180]	; 0xb4
 80152dc:	2b07      	cmp	r3, #7
 80152de:	dd08      	ble.n	80152f2 <_svfprintf_r+0x11aa>
 80152e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80152e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152e6:	f002 f883 	bl	80173f0 <__ssprint_r>
 80152ea:	2800      	cmp	r0, #0
 80152ec:	d000      	beq.n	80152f0 <_svfprintf_r+0x11a8>
 80152ee:	e14f      	b.n	8015590 <_svfprintf_r+0x1448>
 80152f0:	a92f      	add	r1, sp, #188	; 0xbc
 80152f2:	3c10      	subs	r4, #16
 80152f4:	000f      	movs	r7, r1
 80152f6:	e7e2      	b.n	80152be <_svfprintf_r+0x1176>
 80152f8:	2010      	movs	r0, #16
 80152fa:	1812      	adds	r2, r2, r0
 80152fc:	6078      	str	r0, [r7, #4]
 80152fe:	922e      	str	r2, [sp, #184]	; 0xb8
 8015300:	932d      	str	r3, [sp, #180]	; 0xb4
 8015302:	2b07      	cmp	r3, #7
 8015304:	dd08      	ble.n	8015318 <_svfprintf_r+0x11d0>
 8015306:	aa2c      	add	r2, sp, #176	; 0xb0
 8015308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801530a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801530c:	f002 f870 	bl	80173f0 <__ssprint_r>
 8015310:	2800      	cmp	r0, #0
 8015312:	d000      	beq.n	8015316 <_svfprintf_r+0x11ce>
 8015314:	e13c      	b.n	8015590 <_svfprintf_r+0x1448>
 8015316:	a92f      	add	r1, sp, #188	; 0xbc
 8015318:	3c10      	subs	r4, #16
 801531a:	000f      	movs	r7, r1
 801531c:	e757      	b.n	80151ce <_svfprintf_r+0x1086>
 801531e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015320:	2b00      	cmp	r3, #0
 8015322:	d061      	beq.n	80153e8 <_svfprintf_r+0x12a0>
 8015324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015326:	3b01      	subs	r3, #1
 8015328:	9310      	str	r3, [sp, #64]	; 0x40
 801532a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801532c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801532e:	4694      	mov	ip, r2
 8015330:	603b      	str	r3, [r7, #0]
 8015332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015334:	607b      	str	r3, [r7, #4]
 8015336:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015338:	3708      	adds	r7, #8
 801533a:	4463      	add	r3, ip
 801533c:	932e      	str	r3, [sp, #184]	; 0xb8
 801533e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015340:	9308      	str	r3, [sp, #32]
 8015342:	3301      	adds	r3, #1
 8015344:	932d      	str	r3, [sp, #180]	; 0xb4
 8015346:	2b07      	cmp	r3, #7
 8015348:	dd08      	ble.n	801535c <_svfprintf_r+0x1214>
 801534a:	aa2c      	add	r2, sp, #176	; 0xb0
 801534c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015350:	f002 f84e 	bl	80173f0 <__ssprint_r>
 8015354:	2800      	cmp	r0, #0
 8015356:	d000      	beq.n	801535a <_svfprintf_r+0x1212>
 8015358:	e11a      	b.n	8015590 <_svfprintf_r+0x1448>
 801535a:	af2f      	add	r7, sp, #188	; 0xbc
 801535c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015360:	189b      	adds	r3, r3, r2
 8015362:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015364:	1b5b      	subs	r3, r3, r5
 8015366:	7814      	ldrb	r4, [r2, #0]
 8015368:	429c      	cmp	r4, r3
 801536a:	dd00      	ble.n	801536e <_svfprintf_r+0x1226>
 801536c:	001c      	movs	r4, r3
 801536e:	2c00      	cmp	r4, #0
 8015370:	dd14      	ble.n	801539c <_svfprintf_r+0x1254>
 8015372:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015374:	603d      	str	r5, [r7, #0]
 8015376:	18e3      	adds	r3, r4, r3
 8015378:	932e      	str	r3, [sp, #184]	; 0xb8
 801537a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801537c:	607c      	str	r4, [r7, #4]
 801537e:	9308      	str	r3, [sp, #32]
 8015380:	3301      	adds	r3, #1
 8015382:	932d      	str	r3, [sp, #180]	; 0xb4
 8015384:	3708      	adds	r7, #8
 8015386:	2b07      	cmp	r3, #7
 8015388:	dd08      	ble.n	801539c <_svfprintf_r+0x1254>
 801538a:	aa2c      	add	r2, sp, #176	; 0xb0
 801538c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801538e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015390:	f002 f82e 	bl	80173f0 <__ssprint_r>
 8015394:	2800      	cmp	r0, #0
 8015396:	d000      	beq.n	801539a <_svfprintf_r+0x1252>
 8015398:	e0fa      	b.n	8015590 <_svfprintf_r+0x1448>
 801539a:	af2f      	add	r7, sp, #188	; 0xbc
 801539c:	43e3      	mvns	r3, r4
 801539e:	17db      	asrs	r3, r3, #31
 80153a0:	401c      	ands	r4, r3
 80153a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	1b1c      	subs	r4, r3, r4
 80153a8:	2c00      	cmp	r4, #0
 80153aa:	dd19      	ble.n	80153e0 <_svfprintf_r+0x1298>
 80153ac:	0039      	movs	r1, r7
 80153ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153b0:	485c      	ldr	r0, [pc, #368]	; (8015524 <_svfprintf_r+0x13dc>)
 80153b2:	9308      	str	r3, [sp, #32]
 80153b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80153b6:	3301      	adds	r3, #1
 80153b8:	3108      	adds	r1, #8
 80153ba:	6038      	str	r0, [r7, #0]
 80153bc:	2c10      	cmp	r4, #16
 80153be:	dc1a      	bgt.n	80153f6 <_svfprintf_r+0x12ae>
 80153c0:	607c      	str	r4, [r7, #4]
 80153c2:	18a4      	adds	r4, r4, r2
 80153c4:	942e      	str	r4, [sp, #184]	; 0xb8
 80153c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80153c8:	000f      	movs	r7, r1
 80153ca:	2b07      	cmp	r3, #7
 80153cc:	dd08      	ble.n	80153e0 <_svfprintf_r+0x1298>
 80153ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80153d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153d4:	f002 f80c 	bl	80173f0 <__ssprint_r>
 80153d8:	2800      	cmp	r0, #0
 80153da:	d000      	beq.n	80153de <_svfprintf_r+0x1296>
 80153dc:	e0d8      	b.n	8015590 <_svfprintf_r+0x1448>
 80153de:	af2f      	add	r7, sp, #188	; 0xbc
 80153e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	18ed      	adds	r5, r5, r3
 80153e6:	e711      	b.n	801520c <_svfprintf_r+0x10c4>
 80153e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153ea:	3b01      	subs	r3, #1
 80153ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80153ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153f0:	3b01      	subs	r3, #1
 80153f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80153f4:	e799      	b.n	801532a <_svfprintf_r+0x11e2>
 80153f6:	2010      	movs	r0, #16
 80153f8:	1812      	adds	r2, r2, r0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80153fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015400:	2b07      	cmp	r3, #7
 8015402:	dd08      	ble.n	8015416 <_svfprintf_r+0x12ce>
 8015404:	aa2c      	add	r2, sp, #176	; 0xb0
 8015406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015408:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540a:	f001 fff1 	bl	80173f0 <__ssprint_r>
 801540e:	2800      	cmp	r0, #0
 8015410:	d000      	beq.n	8015414 <_svfprintf_r+0x12cc>
 8015412:	e0bd      	b.n	8015590 <_svfprintf_r+0x1448>
 8015414:	a92f      	add	r1, sp, #188	; 0xbc
 8015416:	3c10      	subs	r4, #16
 8015418:	000f      	movs	r7, r1
 801541a:	e7c7      	b.n	80153ac <_svfprintf_r+0x1264>
 801541c:	003c      	movs	r4, r7
 801541e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015420:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015424:	9308      	str	r3, [sp, #32]
 8015426:	3101      	adds	r1, #1
 8015428:	3301      	adds	r3, #1
 801542a:	3408      	adds	r4, #8
 801542c:	2a01      	cmp	r2, #1
 801542e:	dc03      	bgt.n	8015438 <_svfprintf_r+0x12f0>
 8015430:	2201      	movs	r2, #1
 8015432:	4216      	tst	r6, r2
 8015434:	d100      	bne.n	8015438 <_svfprintf_r+0x12f0>
 8015436:	e088      	b.n	801554a <_svfprintf_r+0x1402>
 8015438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801543a:	912e      	str	r1, [sp, #184]	; 0xb8
 801543c:	603a      	str	r2, [r7, #0]
 801543e:	2201      	movs	r2, #1
 8015440:	932d      	str	r3, [sp, #180]	; 0xb4
 8015442:	607a      	str	r2, [r7, #4]
 8015444:	2b07      	cmp	r3, #7
 8015446:	dd08      	ble.n	801545a <_svfprintf_r+0x1312>
 8015448:	aa2c      	add	r2, sp, #176	; 0xb0
 801544a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801544c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801544e:	f001 ffcf 	bl	80173f0 <__ssprint_r>
 8015452:	2800      	cmp	r0, #0
 8015454:	d000      	beq.n	8015458 <_svfprintf_r+0x1310>
 8015456:	e09b      	b.n	8015590 <_svfprintf_r+0x1448>
 8015458:	ac2f      	add	r4, sp, #188	; 0xbc
 801545a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801545c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801545e:	4694      	mov	ip, r2
 8015460:	6023      	str	r3, [r4, #0]
 8015462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015464:	6063      	str	r3, [r4, #4]
 8015466:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015468:	3408      	adds	r4, #8
 801546a:	4463      	add	r3, ip
 801546c:	932e      	str	r3, [sp, #184]	; 0xb8
 801546e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015470:	9308      	str	r3, [sp, #32]
 8015472:	3301      	adds	r3, #1
 8015474:	932d      	str	r3, [sp, #180]	; 0xb4
 8015476:	2b07      	cmp	r3, #7
 8015478:	dd08      	ble.n	801548c <_svfprintf_r+0x1344>
 801547a:	aa2c      	add	r2, sp, #176	; 0xb0
 801547c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801547e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015480:	f001 ffb6 	bl	80173f0 <__ssprint_r>
 8015484:	2800      	cmp	r0, #0
 8015486:	d000      	beq.n	801548a <_svfprintf_r+0x1342>
 8015488:	e082      	b.n	8015590 <_svfprintf_r+0x1448>
 801548a:	ac2f      	add	r4, sp, #188	; 0xbc
 801548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801548e:	2200      	movs	r2, #0
 8015490:	1e5d      	subs	r5, r3, #1
 8015492:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015494:	2300      	movs	r3, #0
 8015496:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015498:	f7ea ffe0 	bl	800045c <__aeabi_dcmpeq>
 801549c:	2800      	cmp	r0, #0
 801549e:	d12c      	bne.n	80154fa <_svfprintf_r+0x13b2>
 80154a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80154a4:	9308      	str	r3, [sp, #32]
 80154a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154a8:	6065      	str	r5, [r4, #4]
 80154aa:	1c5a      	adds	r2, r3, #1
 80154ac:	930e      	str	r3, [sp, #56]	; 0x38
 80154ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154b0:	922d      	str	r2, [sp, #180]	; 0xb4
 80154b2:	3301      	adds	r3, #1
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	9b08      	ldr	r3, [sp, #32]
 80154b8:	3408      	adds	r4, #8
 80154ba:	3b01      	subs	r3, #1
 80154bc:	185b      	adds	r3, r3, r1
 80154be:	932e      	str	r3, [sp, #184]	; 0xb8
 80154c0:	2a07      	cmp	r2, #7
 80154c2:	dd07      	ble.n	80154d4 <_svfprintf_r+0x138c>
 80154c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80154c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154ca:	f001 ff91 	bl	80173f0 <__ssprint_r>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	d15e      	bne.n	8015590 <_svfprintf_r+0x1448>
 80154d2:	ac2f      	add	r4, sp, #188	; 0xbc
 80154d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80154d6:	ab28      	add	r3, sp, #160	; 0xa0
 80154d8:	4694      	mov	ip, r2
 80154da:	6023      	str	r3, [r4, #0]
 80154dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80154de:	6063      	str	r3, [r4, #4]
 80154e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154e2:	4463      	add	r3, ip
 80154e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80154e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154e8:	9308      	str	r3, [sp, #32]
 80154ea:	3301      	adds	r3, #1
 80154ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ee:	2b07      	cmp	r3, #7
 80154f0:	dd00      	ble.n	80154f4 <_svfprintf_r+0x13ac>
 80154f2:	e629      	b.n	8015148 <_svfprintf_r+0x1000>
 80154f4:	3408      	adds	r4, #8
 80154f6:	0027      	movs	r7, r4
 80154f8:	e579      	b.n	8014fee <_svfprintf_r+0xea6>
 80154fa:	2710      	movs	r7, #16
 80154fc:	2d00      	cmp	r5, #0
 80154fe:	dde9      	ble.n	80154d4 <_svfprintf_r+0x138c>
 8015500:	0021      	movs	r1, r4
 8015502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015504:	4807      	ldr	r0, [pc, #28]	; (8015524 <_svfprintf_r+0x13dc>)
 8015506:	9308      	str	r3, [sp, #32]
 8015508:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801550a:	3301      	adds	r3, #1
 801550c:	3108      	adds	r1, #8
 801550e:	6020      	str	r0, [r4, #0]
 8015510:	2d10      	cmp	r5, #16
 8015512:	dc09      	bgt.n	8015528 <_svfprintf_r+0x13e0>
 8015514:	6065      	str	r5, [r4, #4]
 8015516:	000c      	movs	r4, r1
 8015518:	18ad      	adds	r5, r5, r2
 801551a:	952e      	str	r5, [sp, #184]	; 0xb8
 801551c:	932d      	str	r3, [sp, #180]	; 0xb4
 801551e:	2b07      	cmp	r3, #7
 8015520:	ddd8      	ble.n	80154d4 <_svfprintf_r+0x138c>
 8015522:	e7cf      	b.n	80154c4 <_svfprintf_r+0x137c>
 8015524:	0801a5fc 	.word	0x0801a5fc
 8015528:	3210      	adds	r2, #16
 801552a:	6067      	str	r7, [r4, #4]
 801552c:	922e      	str	r2, [sp, #184]	; 0xb8
 801552e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015530:	2b07      	cmp	r3, #7
 8015532:	dd07      	ble.n	8015544 <_svfprintf_r+0x13fc>
 8015534:	aa2c      	add	r2, sp, #176	; 0xb0
 8015536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015538:	980a      	ldr	r0, [sp, #40]	; 0x28
 801553a:	f001 ff59 	bl	80173f0 <__ssprint_r>
 801553e:	2800      	cmp	r0, #0
 8015540:	d126      	bne.n	8015590 <_svfprintf_r+0x1448>
 8015542:	a92f      	add	r1, sp, #188	; 0xbc
 8015544:	3d10      	subs	r5, #16
 8015546:	000c      	movs	r4, r1
 8015548:	e7da      	b.n	8015500 <_svfprintf_r+0x13b8>
 801554a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801554c:	912e      	str	r1, [sp, #184]	; 0xb8
 801554e:	c705      	stmia	r7!, {r0, r2}
 8015550:	932d      	str	r3, [sp, #180]	; 0xb4
 8015552:	e7e4      	b.n	801551e <_svfprintf_r+0x13d6>
 8015554:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015556:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015558:	2510      	movs	r5, #16
 801555a:	1a9c      	subs	r4, r3, r2
 801555c:	2c00      	cmp	r4, #0
 801555e:	dc00      	bgt.n	8015562 <_svfprintf_r+0x141a>
 8015560:	e548      	b.n	8014ff4 <_svfprintf_r+0xeac>
 8015562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015564:	4921      	ldr	r1, [pc, #132]	; (80155ec <_svfprintf_r+0x14a4>)
 8015566:	9308      	str	r3, [sp, #32]
 8015568:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801556a:	3301      	adds	r3, #1
 801556c:	6039      	str	r1, [r7, #0]
 801556e:	2c10      	cmp	r4, #16
 8015570:	dc19      	bgt.n	80155a6 <_svfprintf_r+0x145e>
 8015572:	607c      	str	r4, [r7, #4]
 8015574:	18a4      	adds	r4, r4, r2
 8015576:	942e      	str	r4, [sp, #184]	; 0xb8
 8015578:	932d      	str	r3, [sp, #180]	; 0xb4
 801557a:	2b07      	cmp	r3, #7
 801557c:	dc00      	bgt.n	8015580 <_svfprintf_r+0x1438>
 801557e:	e539      	b.n	8014ff4 <_svfprintf_r+0xeac>
 8015580:	aa2c      	add	r2, sp, #176	; 0xb0
 8015582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015584:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015586:	f001 ff33 	bl	80173f0 <__ssprint_r>
 801558a:	2800      	cmp	r0, #0
 801558c:	d100      	bne.n	8015590 <_svfprintf_r+0x1448>
 801558e:	e531      	b.n	8014ff4 <_svfprintf_r+0xeac>
 8015590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015592:	2b00      	cmp	r3, #0
 8015594:	d101      	bne.n	801559a <_svfprintf_r+0x1452>
 8015596:	f7ff f908 	bl	80147aa <_svfprintf_r+0x662>
 801559a:	0019      	movs	r1, r3
 801559c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801559e:	f000 ff19 	bl	80163d4 <_free_r>
 80155a2:	f7ff f902 	bl	80147aa <_svfprintf_r+0x662>
 80155a6:	3210      	adds	r2, #16
 80155a8:	607d      	str	r5, [r7, #4]
 80155aa:	922e      	str	r2, [sp, #184]	; 0xb8
 80155ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80155ae:	3708      	adds	r7, #8
 80155b0:	2b07      	cmp	r3, #7
 80155b2:	dd07      	ble.n	80155c4 <_svfprintf_r+0x147c>
 80155b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80155b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155ba:	f001 ff19 	bl	80173f0 <__ssprint_r>
 80155be:	2800      	cmp	r0, #0
 80155c0:	d1e6      	bne.n	8015590 <_svfprintf_r+0x1448>
 80155c2:	af2f      	add	r7, sp, #188	; 0xbc
 80155c4:	3c10      	subs	r4, #16
 80155c6:	e7cc      	b.n	8015562 <_svfprintf_r+0x141a>
 80155c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80155ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155cc:	f000 ff02 	bl	80163d4 <_free_r>
 80155d0:	e52a      	b.n	8015028 <_svfprintf_r+0xee0>
 80155d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155d4:	9306      	str	r3, [sp, #24]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d101      	bne.n	80155de <_svfprintf_r+0x1496>
 80155da:	f7ff f8e6 	bl	80147aa <_svfprintf_r+0x662>
 80155de:	aa2c      	add	r2, sp, #176	; 0xb0
 80155e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155e4:	f001 ff04 	bl	80173f0 <__ssprint_r>
 80155e8:	f7ff f8df 	bl	80147aa <_svfprintf_r+0x662>
 80155ec:	0801a5ec 	.word	0x0801a5ec

080155f0 <sysconf>:
 80155f0:	2380      	movs	r3, #128	; 0x80
 80155f2:	b510      	push	{r4, lr}
 80155f4:	015b      	lsls	r3, r3, #5
 80155f6:	2808      	cmp	r0, #8
 80155f8:	d004      	beq.n	8015604 <sysconf+0x14>
 80155fa:	f000 fe7d 	bl	80162f8 <__errno>
 80155fe:	2316      	movs	r3, #22
 8015600:	6003      	str	r3, [r0, #0]
 8015602:	3b17      	subs	r3, #23
 8015604:	0018      	movs	r0, r3
 8015606:	bd10      	pop	{r4, pc}

08015608 <__ascii_wctomb>:
 8015608:	1e0b      	subs	r3, r1, #0
 801560a:	d004      	beq.n	8015616 <__ascii_wctomb+0xe>
 801560c:	2aff      	cmp	r2, #255	; 0xff
 801560e:	d904      	bls.n	801561a <__ascii_wctomb+0x12>
 8015610:	238a      	movs	r3, #138	; 0x8a
 8015612:	6003      	str	r3, [r0, #0]
 8015614:	3b8b      	subs	r3, #139	; 0x8b
 8015616:	0018      	movs	r0, r3
 8015618:	4770      	bx	lr
 801561a:	700a      	strb	r2, [r1, #0]
 801561c:	2301      	movs	r3, #1
 801561e:	e7fa      	b.n	8015616 <__ascii_wctomb+0xe>

08015620 <register_fini>:
 8015620:	4b03      	ldr	r3, [pc, #12]	; (8015630 <register_fini+0x10>)
 8015622:	b510      	push	{r4, lr}
 8015624:	2b00      	cmp	r3, #0
 8015626:	d002      	beq.n	801562e <register_fini+0xe>
 8015628:	4802      	ldr	r0, [pc, #8]	; (8015634 <register_fini+0x14>)
 801562a:	f000 f805 	bl	8015638 <atexit>
 801562e:	bd10      	pop	{r4, pc}
 8015630:	00000000 	.word	0x00000000
 8015634:	08016305 	.word	0x08016305

08015638 <atexit>:
 8015638:	2300      	movs	r3, #0
 801563a:	b510      	push	{r4, lr}
 801563c:	0001      	movs	r1, r0
 801563e:	001a      	movs	r2, r3
 8015640:	0018      	movs	r0, r3
 8015642:	f001 ff53 	bl	80174ec <__register_exitproc>
 8015646:	bd10      	pop	{r4, pc}

08015648 <quorem>:
 8015648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801564a:	6903      	ldr	r3, [r0, #16]
 801564c:	690c      	ldr	r4, [r1, #16]
 801564e:	b089      	sub	sp, #36	; 0x24
 8015650:	0007      	movs	r7, r0
 8015652:	9105      	str	r1, [sp, #20]
 8015654:	2600      	movs	r6, #0
 8015656:	42a3      	cmp	r3, r4
 8015658:	db65      	blt.n	8015726 <quorem+0xde>
 801565a:	000b      	movs	r3, r1
 801565c:	3c01      	subs	r4, #1
 801565e:	3314      	adds	r3, #20
 8015660:	00a5      	lsls	r5, r4, #2
 8015662:	9303      	str	r3, [sp, #12]
 8015664:	195b      	adds	r3, r3, r5
 8015666:	9304      	str	r3, [sp, #16]
 8015668:	0003      	movs	r3, r0
 801566a:	3314      	adds	r3, #20
 801566c:	9302      	str	r3, [sp, #8]
 801566e:	195d      	adds	r5, r3, r5
 8015670:	9b04      	ldr	r3, [sp, #16]
 8015672:	6828      	ldr	r0, [r5, #0]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	1c59      	adds	r1, r3, #1
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	f7ea fd69 	bl	8000150 <__udivsi3>
 801567e:	9001      	str	r0, [sp, #4]
 8015680:	42b0      	cmp	r0, r6
 8015682:	d029      	beq.n	80156d8 <quorem+0x90>
 8015684:	9b03      	ldr	r3, [sp, #12]
 8015686:	9802      	ldr	r0, [sp, #8]
 8015688:	469c      	mov	ip, r3
 801568a:	9606      	str	r6, [sp, #24]
 801568c:	4662      	mov	r2, ip
 801568e:	ca08      	ldmia	r2!, {r3}
 8015690:	4694      	mov	ip, r2
 8015692:	9a01      	ldr	r2, [sp, #4]
 8015694:	b299      	uxth	r1, r3
 8015696:	4351      	muls	r1, r2
 8015698:	0c1b      	lsrs	r3, r3, #16
 801569a:	4353      	muls	r3, r2
 801569c:	1989      	adds	r1, r1, r6
 801569e:	0c0a      	lsrs	r2, r1, #16
 80156a0:	189b      	adds	r3, r3, r2
 80156a2:	9307      	str	r3, [sp, #28]
 80156a4:	0c1e      	lsrs	r6, r3, #16
 80156a6:	6803      	ldr	r3, [r0, #0]
 80156a8:	b289      	uxth	r1, r1
 80156aa:	b29a      	uxth	r2, r3
 80156ac:	9b06      	ldr	r3, [sp, #24]
 80156ae:	18d2      	adds	r2, r2, r3
 80156b0:	6803      	ldr	r3, [r0, #0]
 80156b2:	1a52      	subs	r2, r2, r1
 80156b4:	0c19      	lsrs	r1, r3, #16
 80156b6:	466b      	mov	r3, sp
 80156b8:	8b9b      	ldrh	r3, [r3, #28]
 80156ba:	1acb      	subs	r3, r1, r3
 80156bc:	1411      	asrs	r1, r2, #16
 80156be:	185b      	adds	r3, r3, r1
 80156c0:	1419      	asrs	r1, r3, #16
 80156c2:	b292      	uxth	r2, r2
 80156c4:	041b      	lsls	r3, r3, #16
 80156c6:	431a      	orrs	r2, r3
 80156c8:	9b04      	ldr	r3, [sp, #16]
 80156ca:	9106      	str	r1, [sp, #24]
 80156cc:	c004      	stmia	r0!, {r2}
 80156ce:	4563      	cmp	r3, ip
 80156d0:	d2dc      	bcs.n	801568c <quorem+0x44>
 80156d2:	682b      	ldr	r3, [r5, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d02d      	beq.n	8015734 <quorem+0xec>
 80156d8:	9905      	ldr	r1, [sp, #20]
 80156da:	0038      	movs	r0, r7
 80156dc:	f001 fcb2 	bl	8017044 <__mcmp>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	db1f      	blt.n	8015724 <quorem+0xdc>
 80156e4:	2500      	movs	r5, #0
 80156e6:	9b01      	ldr	r3, [sp, #4]
 80156e8:	9802      	ldr	r0, [sp, #8]
 80156ea:	3301      	adds	r3, #1
 80156ec:	9903      	ldr	r1, [sp, #12]
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	6802      	ldr	r2, [r0, #0]
 80156f2:	c908      	ldmia	r1!, {r3}
 80156f4:	b292      	uxth	r2, r2
 80156f6:	1955      	adds	r5, r2, r5
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	1aaa      	subs	r2, r5, r2
 80156fc:	6805      	ldr	r5, [r0, #0]
 80156fe:	0c1b      	lsrs	r3, r3, #16
 8015700:	0c2d      	lsrs	r5, r5, #16
 8015702:	1aeb      	subs	r3, r5, r3
 8015704:	1415      	asrs	r5, r2, #16
 8015706:	195b      	adds	r3, r3, r5
 8015708:	141d      	asrs	r5, r3, #16
 801570a:	b292      	uxth	r2, r2
 801570c:	041b      	lsls	r3, r3, #16
 801570e:	4313      	orrs	r3, r2
 8015710:	c008      	stmia	r0!, {r3}
 8015712:	9b04      	ldr	r3, [sp, #16]
 8015714:	428b      	cmp	r3, r1
 8015716:	d2eb      	bcs.n	80156f0 <quorem+0xa8>
 8015718:	9a02      	ldr	r2, [sp, #8]
 801571a:	00a3      	lsls	r3, r4, #2
 801571c:	18d3      	adds	r3, r2, r3
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	2a00      	cmp	r2, #0
 8015722:	d011      	beq.n	8015748 <quorem+0x100>
 8015724:	9e01      	ldr	r6, [sp, #4]
 8015726:	0030      	movs	r0, r6
 8015728:	b009      	add	sp, #36	; 0x24
 801572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801572c:	682b      	ldr	r3, [r5, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d104      	bne.n	801573c <quorem+0xf4>
 8015732:	3c01      	subs	r4, #1
 8015734:	9b02      	ldr	r3, [sp, #8]
 8015736:	3d04      	subs	r5, #4
 8015738:	42ab      	cmp	r3, r5
 801573a:	d3f7      	bcc.n	801572c <quorem+0xe4>
 801573c:	613c      	str	r4, [r7, #16]
 801573e:	e7cb      	b.n	80156d8 <quorem+0x90>
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	2a00      	cmp	r2, #0
 8015744:	d104      	bne.n	8015750 <quorem+0x108>
 8015746:	3c01      	subs	r4, #1
 8015748:	9a02      	ldr	r2, [sp, #8]
 801574a:	3b04      	subs	r3, #4
 801574c:	429a      	cmp	r2, r3
 801574e:	d3f7      	bcc.n	8015740 <quorem+0xf8>
 8015750:	613c      	str	r4, [r7, #16]
 8015752:	e7e7      	b.n	8015724 <quorem+0xdc>

08015754 <_dtoa_r>:
 8015754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015756:	0014      	movs	r4, r2
 8015758:	001d      	movs	r5, r3
 801575a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801575c:	b09b      	sub	sp, #108	; 0x6c
 801575e:	9002      	str	r0, [sp, #8]
 8015760:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8015762:	9406      	str	r4, [sp, #24]
 8015764:	9507      	str	r5, [sp, #28]
 8015766:	2900      	cmp	r1, #0
 8015768:	d009      	beq.n	801577e <_dtoa_r+0x2a>
 801576a:	2301      	movs	r3, #1
 801576c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801576e:	4093      	lsls	r3, r2
 8015770:	604a      	str	r2, [r1, #4]
 8015772:	608b      	str	r3, [r1, #8]
 8015774:	f001 fa6a 	bl	8016c4c <_Bfree>
 8015778:	2300      	movs	r3, #0
 801577a:	9a02      	ldr	r2, [sp, #8]
 801577c:	6413      	str	r3, [r2, #64]	; 0x40
 801577e:	2d00      	cmp	r5, #0
 8015780:	da20      	bge.n	80157c4 <_dtoa_r+0x70>
 8015782:	2301      	movs	r3, #1
 8015784:	6033      	str	r3, [r6, #0]
 8015786:	006b      	lsls	r3, r5, #1
 8015788:	085b      	lsrs	r3, r3, #1
 801578a:	9307      	str	r3, [sp, #28]
 801578c:	9c07      	ldr	r4, [sp, #28]
 801578e:	4bb2      	ldr	r3, [pc, #712]	; (8015a58 <_dtoa_r+0x304>)
 8015790:	0022      	movs	r2, r4
 8015792:	9317      	str	r3, [sp, #92]	; 0x5c
 8015794:	401a      	ands	r2, r3
 8015796:	429a      	cmp	r2, r3
 8015798:	d117      	bne.n	80157ca <_dtoa_r+0x76>
 801579a:	4bb0      	ldr	r3, [pc, #704]	; (8015a5c <_dtoa_r+0x308>)
 801579c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801579e:	6013      	str	r3, [r2, #0]
 80157a0:	9b06      	ldr	r3, [sp, #24]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d103      	bne.n	80157ae <_dtoa_r+0x5a>
 80157a6:	0324      	lsls	r4, r4, #12
 80157a8:	d101      	bne.n	80157ae <_dtoa_r+0x5a>
 80157aa:	f000 fd89 	bl	80162c0 <_dtoa_r+0xb6c>
 80157ae:	4bac      	ldr	r3, [pc, #688]	; (8015a60 <_dtoa_r+0x30c>)
 80157b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157b2:	9308      	str	r3, [sp, #32]
 80157b4:	2a00      	cmp	r2, #0
 80157b6:	d002      	beq.n	80157be <_dtoa_r+0x6a>
 80157b8:	4baa      	ldr	r3, [pc, #680]	; (8015a64 <_dtoa_r+0x310>)
 80157ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157bc:	6013      	str	r3, [r2, #0]
 80157be:	9808      	ldr	r0, [sp, #32]
 80157c0:	b01b      	add	sp, #108	; 0x6c
 80157c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c4:	2300      	movs	r3, #0
 80157c6:	6033      	str	r3, [r6, #0]
 80157c8:	e7e0      	b.n	801578c <_dtoa_r+0x38>
 80157ca:	9e06      	ldr	r6, [sp, #24]
 80157cc:	9f07      	ldr	r7, [sp, #28]
 80157ce:	2200      	movs	r2, #0
 80157d0:	2300      	movs	r3, #0
 80157d2:	0030      	movs	r0, r6
 80157d4:	0039      	movs	r1, r7
 80157d6:	f7ea fe41 	bl	800045c <__aeabi_dcmpeq>
 80157da:	1e05      	subs	r5, r0, #0
 80157dc:	d00b      	beq.n	80157f6 <_dtoa_r+0xa2>
 80157de:	2301      	movs	r3, #1
 80157e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80157e2:	6013      	str	r3, [r2, #0]
 80157e4:	4ba0      	ldr	r3, [pc, #640]	; (8015a68 <_dtoa_r+0x314>)
 80157e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157e8:	9308      	str	r3, [sp, #32]
 80157ea:	2a00      	cmp	r2, #0
 80157ec:	d0e7      	beq.n	80157be <_dtoa_r+0x6a>
 80157ee:	4a9f      	ldr	r2, [pc, #636]	; (8015a6c <_dtoa_r+0x318>)
 80157f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80157f2:	600a      	str	r2, [r1, #0]
 80157f4:	e7e3      	b.n	80157be <_dtoa_r+0x6a>
 80157f6:	ab18      	add	r3, sp, #96	; 0x60
 80157f8:	9301      	str	r3, [sp, #4]
 80157fa:	ab19      	add	r3, sp, #100	; 0x64
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	0032      	movs	r2, r6
 8015800:	003b      	movs	r3, r7
 8015802:	9802      	ldr	r0, [sp, #8]
 8015804:	f001 fd0e 	bl	8017224 <__d2b>
 8015808:	0063      	lsls	r3, r4, #1
 801580a:	9003      	str	r0, [sp, #12]
 801580c:	0d5b      	lsrs	r3, r3, #21
 801580e:	d074      	beq.n	80158fa <_dtoa_r+0x1a6>
 8015810:	033a      	lsls	r2, r7, #12
 8015812:	4c97      	ldr	r4, [pc, #604]	; (8015a70 <_dtoa_r+0x31c>)
 8015814:	0b12      	lsrs	r2, r2, #12
 8015816:	4314      	orrs	r4, r2
 8015818:	0021      	movs	r1, r4
 801581a:	4a96      	ldr	r2, [pc, #600]	; (8015a74 <_dtoa_r+0x320>)
 801581c:	0030      	movs	r0, r6
 801581e:	9516      	str	r5, [sp, #88]	; 0x58
 8015820:	189e      	adds	r6, r3, r2
 8015822:	2200      	movs	r2, #0
 8015824:	4b94      	ldr	r3, [pc, #592]	; (8015a78 <_dtoa_r+0x324>)
 8015826:	f7ec fead 	bl	8002584 <__aeabi_dsub>
 801582a:	4a94      	ldr	r2, [pc, #592]	; (8015a7c <_dtoa_r+0x328>)
 801582c:	4b94      	ldr	r3, [pc, #592]	; (8015a80 <_dtoa_r+0x32c>)
 801582e:	f7ec fc37 	bl	80020a0 <__aeabi_dmul>
 8015832:	4a94      	ldr	r2, [pc, #592]	; (8015a84 <_dtoa_r+0x330>)
 8015834:	4b94      	ldr	r3, [pc, #592]	; (8015a88 <_dtoa_r+0x334>)
 8015836:	f7eb fd0d 	bl	8001254 <__aeabi_dadd>
 801583a:	0004      	movs	r4, r0
 801583c:	0030      	movs	r0, r6
 801583e:	000d      	movs	r5, r1
 8015840:	f7ed fa3a 	bl	8002cb8 <__aeabi_i2d>
 8015844:	4a91      	ldr	r2, [pc, #580]	; (8015a8c <_dtoa_r+0x338>)
 8015846:	4b92      	ldr	r3, [pc, #584]	; (8015a90 <_dtoa_r+0x33c>)
 8015848:	f7ec fc2a 	bl	80020a0 <__aeabi_dmul>
 801584c:	0002      	movs	r2, r0
 801584e:	000b      	movs	r3, r1
 8015850:	0020      	movs	r0, r4
 8015852:	0029      	movs	r1, r5
 8015854:	f7eb fcfe 	bl	8001254 <__aeabi_dadd>
 8015858:	0004      	movs	r4, r0
 801585a:	000d      	movs	r5, r1
 801585c:	f7ed f9f6 	bl	8002c4c <__aeabi_d2iz>
 8015860:	2200      	movs	r2, #0
 8015862:	0007      	movs	r7, r0
 8015864:	2300      	movs	r3, #0
 8015866:	0020      	movs	r0, r4
 8015868:	0029      	movs	r1, r5
 801586a:	f7ea fdfd 	bl	8000468 <__aeabi_dcmplt>
 801586e:	2800      	cmp	r0, #0
 8015870:	d009      	beq.n	8015886 <_dtoa_r+0x132>
 8015872:	0038      	movs	r0, r7
 8015874:	f7ed fa20 	bl	8002cb8 <__aeabi_i2d>
 8015878:	002b      	movs	r3, r5
 801587a:	0022      	movs	r2, r4
 801587c:	f7ea fdee 	bl	800045c <__aeabi_dcmpeq>
 8015880:	4243      	negs	r3, r0
 8015882:	4158      	adcs	r0, r3
 8015884:	1a3f      	subs	r7, r7, r0
 8015886:	2301      	movs	r3, #1
 8015888:	9314      	str	r3, [sp, #80]	; 0x50
 801588a:	2f16      	cmp	r7, #22
 801588c:	d80d      	bhi.n	80158aa <_dtoa_r+0x156>
 801588e:	4981      	ldr	r1, [pc, #516]	; (8015a94 <_dtoa_r+0x340>)
 8015890:	00fb      	lsls	r3, r7, #3
 8015892:	18c9      	adds	r1, r1, r3
 8015894:	6808      	ldr	r0, [r1, #0]
 8015896:	6849      	ldr	r1, [r1, #4]
 8015898:	9a06      	ldr	r2, [sp, #24]
 801589a:	9b07      	ldr	r3, [sp, #28]
 801589c:	f7ea fdf8 	bl	8000490 <__aeabi_dcmpgt>
 80158a0:	2800      	cmp	r0, #0
 80158a2:	d046      	beq.n	8015932 <_dtoa_r+0x1de>
 80158a4:	2300      	movs	r3, #0
 80158a6:	3f01      	subs	r7, #1
 80158a8:	9314      	str	r3, [sp, #80]	; 0x50
 80158aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80158ac:	1b9e      	subs	r6, r3, r6
 80158ae:	2300      	movs	r3, #0
 80158b0:	930a      	str	r3, [sp, #40]	; 0x28
 80158b2:	0033      	movs	r3, r6
 80158b4:	3b01      	subs	r3, #1
 80158b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80158b8:	d504      	bpl.n	80158c4 <_dtoa_r+0x170>
 80158ba:	2301      	movs	r3, #1
 80158bc:	1b9b      	subs	r3, r3, r6
 80158be:	930a      	str	r3, [sp, #40]	; 0x28
 80158c0:	2300      	movs	r3, #0
 80158c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80158c4:	2f00      	cmp	r7, #0
 80158c6:	db36      	blt.n	8015936 <_dtoa_r+0x1e2>
 80158c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158ca:	9711      	str	r7, [sp, #68]	; 0x44
 80158cc:	19db      	adds	r3, r3, r7
 80158ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80158d0:	2300      	movs	r3, #0
 80158d2:	9304      	str	r3, [sp, #16]
 80158d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158d6:	2401      	movs	r4, #1
 80158d8:	2b09      	cmp	r3, #9
 80158da:	d900      	bls.n	80158de <_dtoa_r+0x18a>
 80158dc:	e082      	b.n	80159e4 <_dtoa_r+0x290>
 80158de:	2b05      	cmp	r3, #5
 80158e0:	dd02      	ble.n	80158e8 <_dtoa_r+0x194>
 80158e2:	2400      	movs	r4, #0
 80158e4:	3b04      	subs	r3, #4
 80158e6:	9320      	str	r3, [sp, #128]	; 0x80
 80158e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158ea:	1e98      	subs	r0, r3, #2
 80158ec:	2803      	cmp	r0, #3
 80158ee:	d900      	bls.n	80158f2 <_dtoa_r+0x19e>
 80158f0:	e082      	b.n	80159f8 <_dtoa_r+0x2a4>
 80158f2:	f7ea fc19 	bl	8000128 <__gnu_thumb1_case_uqi>
 80158f6:	7573      	.short	0x7573
 80158f8:	6828      	.short	0x6828
 80158fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80158fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80158fe:	189e      	adds	r6, r3, r2
 8015900:	4b65      	ldr	r3, [pc, #404]	; (8015a98 <_dtoa_r+0x344>)
 8015902:	18f2      	adds	r2, r6, r3
 8015904:	2a20      	cmp	r2, #32
 8015906:	dd0f      	ble.n	8015928 <_dtoa_r+0x1d4>
 8015908:	2340      	movs	r3, #64	; 0x40
 801590a:	1a9b      	subs	r3, r3, r2
 801590c:	409c      	lsls	r4, r3
 801590e:	4b63      	ldr	r3, [pc, #396]	; (8015a9c <_dtoa_r+0x348>)
 8015910:	9806      	ldr	r0, [sp, #24]
 8015912:	18f3      	adds	r3, r6, r3
 8015914:	40d8      	lsrs	r0, r3
 8015916:	4320      	orrs	r0, r4
 8015918:	f7ed fa08 	bl	8002d2c <__aeabi_ui2d>
 801591c:	2301      	movs	r3, #1
 801591e:	4c60      	ldr	r4, [pc, #384]	; (8015aa0 <_dtoa_r+0x34c>)
 8015920:	3e01      	subs	r6, #1
 8015922:	1909      	adds	r1, r1, r4
 8015924:	9316      	str	r3, [sp, #88]	; 0x58
 8015926:	e77c      	b.n	8015822 <_dtoa_r+0xce>
 8015928:	2320      	movs	r3, #32
 801592a:	9806      	ldr	r0, [sp, #24]
 801592c:	1a9b      	subs	r3, r3, r2
 801592e:	4098      	lsls	r0, r3
 8015930:	e7f2      	b.n	8015918 <_dtoa_r+0x1c4>
 8015932:	9014      	str	r0, [sp, #80]	; 0x50
 8015934:	e7b9      	b.n	80158aa <_dtoa_r+0x156>
 8015936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015938:	1bdb      	subs	r3, r3, r7
 801593a:	930a      	str	r3, [sp, #40]	; 0x28
 801593c:	427b      	negs	r3, r7
 801593e:	9304      	str	r3, [sp, #16]
 8015940:	2300      	movs	r3, #0
 8015942:	9311      	str	r3, [sp, #68]	; 0x44
 8015944:	e7c6      	b.n	80158d4 <_dtoa_r+0x180>
 8015946:	2301      	movs	r3, #1
 8015948:	930d      	str	r3, [sp, #52]	; 0x34
 801594a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801594c:	2b00      	cmp	r3, #0
 801594e:	dd57      	ble.n	8015a00 <_dtoa_r+0x2ac>
 8015950:	930c      	str	r3, [sp, #48]	; 0x30
 8015952:	9309      	str	r3, [sp, #36]	; 0x24
 8015954:	2200      	movs	r2, #0
 8015956:	9902      	ldr	r1, [sp, #8]
 8015958:	644a      	str	r2, [r1, #68]	; 0x44
 801595a:	3204      	adds	r2, #4
 801595c:	0010      	movs	r0, r2
 801595e:	9902      	ldr	r1, [sp, #8]
 8015960:	3014      	adds	r0, #20
 8015962:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015964:	4298      	cmp	r0, r3
 8015966:	d950      	bls.n	8015a0a <_dtoa_r+0x2b6>
 8015968:	9802      	ldr	r0, [sp, #8]
 801596a:	f001 f947 	bl	8016bfc <_Balloc>
 801596e:	9b02      	ldr	r3, [sp, #8]
 8015970:	9008      	str	r0, [sp, #32]
 8015972:	6418      	str	r0, [r3, #64]	; 0x40
 8015974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015976:	2b0e      	cmp	r3, #14
 8015978:	d900      	bls.n	801597c <_dtoa_r+0x228>
 801597a:	e10c      	b.n	8015b96 <_dtoa_r+0x442>
 801597c:	2c00      	cmp	r4, #0
 801597e:	d100      	bne.n	8015982 <_dtoa_r+0x22e>
 8015980:	e109      	b.n	8015b96 <_dtoa_r+0x442>
 8015982:	9b06      	ldr	r3, [sp, #24]
 8015984:	9c07      	ldr	r4, [sp, #28]
 8015986:	9312      	str	r3, [sp, #72]	; 0x48
 8015988:	9413      	str	r4, [sp, #76]	; 0x4c
 801598a:	2f00      	cmp	r7, #0
 801598c:	dc00      	bgt.n	8015990 <_dtoa_r+0x23c>
 801598e:	e08b      	b.n	8015aa8 <_dtoa_r+0x354>
 8015990:	210f      	movs	r1, #15
 8015992:	003a      	movs	r2, r7
 8015994:	4b3f      	ldr	r3, [pc, #252]	; (8015a94 <_dtoa_r+0x340>)
 8015996:	400a      	ands	r2, r1
 8015998:	00d2      	lsls	r2, r2, #3
 801599a:	189b      	adds	r3, r3, r2
 801599c:	681d      	ldr	r5, [r3, #0]
 801599e:	685e      	ldr	r6, [r3, #4]
 80159a0:	2302      	movs	r3, #2
 80159a2:	113c      	asrs	r4, r7, #4
 80159a4:	930e      	str	r3, [sp, #56]	; 0x38
 80159a6:	06e3      	lsls	r3, r4, #27
 80159a8:	d50b      	bpl.n	80159c2 <_dtoa_r+0x26e>
 80159aa:	4b3e      	ldr	r3, [pc, #248]	; (8015aa4 <_dtoa_r+0x350>)
 80159ac:	400c      	ands	r4, r1
 80159ae:	6a1a      	ldr	r2, [r3, #32]
 80159b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80159b6:	f7eb ff69 	bl	800188c <__aeabi_ddiv>
 80159ba:	2303      	movs	r3, #3
 80159bc:	9006      	str	r0, [sp, #24]
 80159be:	9107      	str	r1, [sp, #28]
 80159c0:	930e      	str	r3, [sp, #56]	; 0x38
 80159c2:	2300      	movs	r3, #0
 80159c4:	e03b      	b.n	8015a3e <_dtoa_r+0x2ea>
 80159c6:	2301      	movs	r3, #1
 80159c8:	930d      	str	r3, [sp, #52]	; 0x34
 80159ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159cc:	18fb      	adds	r3, r7, r3
 80159ce:	930c      	str	r3, [sp, #48]	; 0x30
 80159d0:	3301      	adds	r3, #1
 80159d2:	9309      	str	r3, [sp, #36]	; 0x24
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	dcbd      	bgt.n	8015954 <_dtoa_r+0x200>
 80159d8:	2301      	movs	r3, #1
 80159da:	e7bb      	b.n	8015954 <_dtoa_r+0x200>
 80159dc:	2300      	movs	r3, #0
 80159de:	e7b3      	b.n	8015948 <_dtoa_r+0x1f4>
 80159e0:	2300      	movs	r3, #0
 80159e2:	e7f1      	b.n	80159c8 <_dtoa_r+0x274>
 80159e4:	2300      	movs	r3, #0
 80159e6:	940d      	str	r4, [sp, #52]	; 0x34
 80159e8:	9320      	str	r3, [sp, #128]	; 0x80
 80159ea:	3b01      	subs	r3, #1
 80159ec:	2200      	movs	r2, #0
 80159ee:	930c      	str	r3, [sp, #48]	; 0x30
 80159f0:	9309      	str	r3, [sp, #36]	; 0x24
 80159f2:	3313      	adds	r3, #19
 80159f4:	9221      	str	r2, [sp, #132]	; 0x84
 80159f6:	e7ad      	b.n	8015954 <_dtoa_r+0x200>
 80159f8:	2301      	movs	r3, #1
 80159fa:	930d      	str	r3, [sp, #52]	; 0x34
 80159fc:	3b02      	subs	r3, #2
 80159fe:	e7f5      	b.n	80159ec <_dtoa_r+0x298>
 8015a00:	2301      	movs	r3, #1
 8015a02:	930c      	str	r3, [sp, #48]	; 0x30
 8015a04:	9309      	str	r3, [sp, #36]	; 0x24
 8015a06:	001a      	movs	r2, r3
 8015a08:	e7f4      	b.n	80159f4 <_dtoa_r+0x2a0>
 8015a0a:	9802      	ldr	r0, [sp, #8]
 8015a0c:	3101      	adds	r1, #1
 8015a0e:	6441      	str	r1, [r0, #68]	; 0x44
 8015a10:	0052      	lsls	r2, r2, #1
 8015a12:	e7a3      	b.n	801595c <_dtoa_r+0x208>
 8015a14:	2301      	movs	r3, #1
 8015a16:	421c      	tst	r4, r3
 8015a18:	d00e      	beq.n	8015a38 <_dtoa_r+0x2e4>
 8015a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a1c:	4a21      	ldr	r2, [pc, #132]	; (8015aa4 <_dtoa_r+0x350>)
 8015a1e:	3301      	adds	r3, #1
 8015a20:	930e      	str	r3, [sp, #56]	; 0x38
 8015a22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a24:	0028      	movs	r0, r5
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	189b      	adds	r3, r3, r2
 8015a2a:	0031      	movs	r1, r6
 8015a2c:	681a      	ldr	r2, [r3, #0]
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	f7ec fb36 	bl	80020a0 <__aeabi_dmul>
 8015a34:	0005      	movs	r5, r0
 8015a36:	000e      	movs	r6, r1
 8015a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a3a:	1064      	asrs	r4, r4, #1
 8015a3c:	3301      	adds	r3, #1
 8015a3e:	9310      	str	r3, [sp, #64]	; 0x40
 8015a40:	2c00      	cmp	r4, #0
 8015a42:	d1e7      	bne.n	8015a14 <_dtoa_r+0x2c0>
 8015a44:	9806      	ldr	r0, [sp, #24]
 8015a46:	9907      	ldr	r1, [sp, #28]
 8015a48:	002a      	movs	r2, r5
 8015a4a:	0033      	movs	r3, r6
 8015a4c:	f7eb ff1e 	bl	800188c <__aeabi_ddiv>
 8015a50:	9006      	str	r0, [sp, #24]
 8015a52:	9107      	str	r1, [sp, #28]
 8015a54:	e043      	b.n	8015ade <_dtoa_r+0x38a>
 8015a56:	46c0      	nop			; (mov r8, r8)
 8015a58:	7ff00000 	.word	0x7ff00000
 8015a5c:	0000270f 	.word	0x0000270f
 8015a60:	0801a716 	.word	0x0801a716
 8015a64:	0801a719 	.word	0x0801a719
 8015a68:	0801a5ea 	.word	0x0801a5ea
 8015a6c:	0801a5eb 	.word	0x0801a5eb
 8015a70:	3ff00000 	.word	0x3ff00000
 8015a74:	fffffc01 	.word	0xfffffc01
 8015a78:	3ff80000 	.word	0x3ff80000
 8015a7c:	636f4361 	.word	0x636f4361
 8015a80:	3fd287a7 	.word	0x3fd287a7
 8015a84:	8b60c8b3 	.word	0x8b60c8b3
 8015a88:	3fc68a28 	.word	0x3fc68a28
 8015a8c:	509f79fb 	.word	0x509f79fb
 8015a90:	3fd34413 	.word	0x3fd34413
 8015a94:	0801a748 	.word	0x0801a748
 8015a98:	00000432 	.word	0x00000432
 8015a9c:	00000412 	.word	0x00000412
 8015aa0:	fe100000 	.word	0xfe100000
 8015aa4:	0801a720 	.word	0x0801a720
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8015aac:	2f00      	cmp	r7, #0
 8015aae:	d016      	beq.n	8015ade <_dtoa_r+0x38a>
 8015ab0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015ab2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015ab4:	427c      	negs	r4, r7
 8015ab6:	330d      	adds	r3, #13
 8015ab8:	4023      	ands	r3, r4
 8015aba:	4acf      	ldr	r2, [pc, #828]	; (8015df8 <_dtoa_r+0x6a4>)
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	18d3      	adds	r3, r2, r3
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	685b      	ldr	r3, [r3, #4]
 8015ac4:	f7ec faec 	bl	80020a0 <__aeabi_dmul>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	2601      	movs	r6, #1
 8015acc:	001d      	movs	r5, r3
 8015ace:	9006      	str	r0, [sp, #24]
 8015ad0:	9107      	str	r1, [sp, #28]
 8015ad2:	1124      	asrs	r4, r4, #4
 8015ad4:	2c00      	cmp	r4, #0
 8015ad6:	d000      	beq.n	8015ada <_dtoa_r+0x386>
 8015ad8:	e08c      	b.n	8015bf4 <_dtoa_r+0x4a0>
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d1b8      	bne.n	8015a50 <_dtoa_r+0x2fc>
 8015ade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d100      	bne.n	8015ae6 <_dtoa_r+0x392>
 8015ae4:	e096      	b.n	8015c14 <_dtoa_r+0x4c0>
 8015ae6:	9c06      	ldr	r4, [sp, #24]
 8015ae8:	9d07      	ldr	r5, [sp, #28]
 8015aea:	2200      	movs	r2, #0
 8015aec:	4bc3      	ldr	r3, [pc, #780]	; (8015dfc <_dtoa_r+0x6a8>)
 8015aee:	0020      	movs	r0, r4
 8015af0:	0029      	movs	r1, r5
 8015af2:	f7ea fcb9 	bl	8000468 <__aeabi_dcmplt>
 8015af6:	2800      	cmp	r0, #0
 8015af8:	d100      	bne.n	8015afc <_dtoa_r+0x3a8>
 8015afa:	e08b      	b.n	8015c14 <_dtoa_r+0x4c0>
 8015afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d100      	bne.n	8015b04 <_dtoa_r+0x3b0>
 8015b02:	e087      	b.n	8015c14 <_dtoa_r+0x4c0>
 8015b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	dd41      	ble.n	8015b8e <_dtoa_r+0x43a>
 8015b0a:	4bbd      	ldr	r3, [pc, #756]	; (8015e00 <_dtoa_r+0x6ac>)
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	0020      	movs	r0, r4
 8015b10:	0029      	movs	r1, r5
 8015b12:	f7ec fac5 	bl	80020a0 <__aeabi_dmul>
 8015b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b18:	9006      	str	r0, [sp, #24]
 8015b1a:	9107      	str	r1, [sp, #28]
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8015b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b22:	1e7e      	subs	r6, r7, #1
 8015b24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b26:	9310      	str	r3, [sp, #64]	; 0x40
 8015b28:	f7ed f8c6 	bl	8002cb8 <__aeabi_i2d>
 8015b2c:	9a06      	ldr	r2, [sp, #24]
 8015b2e:	9b07      	ldr	r3, [sp, #28]
 8015b30:	f7ec fab6 	bl	80020a0 <__aeabi_dmul>
 8015b34:	2200      	movs	r2, #0
 8015b36:	4bb3      	ldr	r3, [pc, #716]	; (8015e04 <_dtoa_r+0x6b0>)
 8015b38:	f7eb fb8c 	bl	8001254 <__aeabi_dadd>
 8015b3c:	4ab2      	ldr	r2, [pc, #712]	; (8015e08 <_dtoa_r+0x6b4>)
 8015b3e:	900e      	str	r0, [sp, #56]	; 0x38
 8015b40:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015b44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015b46:	4694      	mov	ip, r2
 8015b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b4a:	4463      	add	r3, ip
 8015b4c:	9315      	str	r3, [sp, #84]	; 0x54
 8015b4e:	001d      	movs	r5, r3
 8015b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d161      	bne.n	8015c1a <_dtoa_r+0x4c6>
 8015b56:	9806      	ldr	r0, [sp, #24]
 8015b58:	9907      	ldr	r1, [sp, #28]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	4bab      	ldr	r3, [pc, #684]	; (8015e0c <_dtoa_r+0x6b8>)
 8015b5e:	f7ec fd11 	bl	8002584 <__aeabi_dsub>
 8015b62:	0022      	movs	r2, r4
 8015b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b66:	9006      	str	r0, [sp, #24]
 8015b68:	9107      	str	r1, [sp, #28]
 8015b6a:	f7ea fc91 	bl	8000490 <__aeabi_dcmpgt>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d000      	beq.n	8015b74 <_dtoa_r+0x420>
 8015b72:	e2aa      	b.n	80160ca <_dtoa_r+0x976>
 8015b74:	48a6      	ldr	r0, [pc, #664]	; (8015e10 <_dtoa_r+0x6bc>)
 8015b76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b78:	4684      	mov	ip, r0
 8015b7a:	4461      	add	r1, ip
 8015b7c:	000b      	movs	r3, r1
 8015b7e:	9806      	ldr	r0, [sp, #24]
 8015b80:	9907      	ldr	r1, [sp, #28]
 8015b82:	0022      	movs	r2, r4
 8015b84:	f7ea fc70 	bl	8000468 <__aeabi_dcmplt>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	d000      	beq.n	8015b8e <_dtoa_r+0x43a>
 8015b8c:	e297      	b.n	80160be <_dtoa_r+0x96a>
 8015b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b92:	9306      	str	r3, [sp, #24]
 8015b94:	9407      	str	r4, [sp, #28]
 8015b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	da00      	bge.n	8015b9e <_dtoa_r+0x44a>
 8015b9c:	e15e      	b.n	8015e5c <_dtoa_r+0x708>
 8015b9e:	2f0e      	cmp	r7, #14
 8015ba0:	dd00      	ble.n	8015ba4 <_dtoa_r+0x450>
 8015ba2:	e15b      	b.n	8015e5c <_dtoa_r+0x708>
 8015ba4:	4b94      	ldr	r3, [pc, #592]	; (8015df8 <_dtoa_r+0x6a4>)
 8015ba6:	00fa      	lsls	r2, r7, #3
 8015ba8:	189b      	adds	r3, r3, r2
 8015baa:	685c      	ldr	r4, [r3, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	9304      	str	r3, [sp, #16]
 8015bb0:	9405      	str	r4, [sp, #20]
 8015bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	db00      	blt.n	8015bba <_dtoa_r+0x466>
 8015bb8:	e0da      	b.n	8015d70 <_dtoa_r+0x61c>
 8015bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	dd00      	ble.n	8015bc2 <_dtoa_r+0x46e>
 8015bc0:	e0d6      	b.n	8015d70 <_dtoa_r+0x61c>
 8015bc2:	d000      	beq.n	8015bc6 <_dtoa_r+0x472>
 8015bc4:	e27f      	b.n	80160c6 <_dtoa_r+0x972>
 8015bc6:	9804      	ldr	r0, [sp, #16]
 8015bc8:	9905      	ldr	r1, [sp, #20]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	4b8f      	ldr	r3, [pc, #572]	; (8015e0c <_dtoa_r+0x6b8>)
 8015bce:	f7ec fa67 	bl	80020a0 <__aeabi_dmul>
 8015bd2:	9a06      	ldr	r2, [sp, #24]
 8015bd4:	9b07      	ldr	r3, [sp, #28]
 8015bd6:	f7ea fc65 	bl	80004a4 <__aeabi_dcmpge>
 8015bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bdc:	9304      	str	r3, [sp, #16]
 8015bde:	001e      	movs	r6, r3
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d000      	beq.n	8015be6 <_dtoa_r+0x492>
 8015be4:	e251      	b.n	801608a <_dtoa_r+0x936>
 8015be6:	9b08      	ldr	r3, [sp, #32]
 8015be8:	9a08      	ldr	r2, [sp, #32]
 8015bea:	1c5d      	adds	r5, r3, #1
 8015bec:	2331      	movs	r3, #49	; 0x31
 8015bee:	3701      	adds	r7, #1
 8015bf0:	7013      	strb	r3, [r2, #0]
 8015bf2:	e24d      	b.n	8016090 <_dtoa_r+0x93c>
 8015bf4:	4234      	tst	r4, r6
 8015bf6:	d00a      	beq.n	8015c0e <_dtoa_r+0x4ba>
 8015bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bfa:	4a86      	ldr	r2, [pc, #536]	; (8015e14 <_dtoa_r+0x6c0>)
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	930e      	str	r3, [sp, #56]	; 0x38
 8015c00:	00eb      	lsls	r3, r5, #3
 8015c02:	189b      	adds	r3, r3, r2
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	f7ec fa4a 	bl	80020a0 <__aeabi_dmul>
 8015c0c:	0033      	movs	r3, r6
 8015c0e:	1064      	asrs	r4, r4, #1
 8015c10:	3501      	adds	r5, #1
 8015c12:	e75f      	b.n	8015ad4 <_dtoa_r+0x380>
 8015c14:	003e      	movs	r6, r7
 8015c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c18:	e784      	b.n	8015b24 <_dtoa_r+0x3d0>
 8015c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c1c:	1e5a      	subs	r2, r3, #1
 8015c1e:	4b76      	ldr	r3, [pc, #472]	; (8015df8 <_dtoa_r+0x6a4>)
 8015c20:	00d2      	lsls	r2, r2, #3
 8015c22:	189b      	adds	r3, r3, r2
 8015c24:	6818      	ldr	r0, [r3, #0]
 8015c26:	6859      	ldr	r1, [r3, #4]
 8015c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d04b      	beq.n	8015cc6 <_dtoa_r+0x572>
 8015c2e:	0002      	movs	r2, r0
 8015c30:	000b      	movs	r3, r1
 8015c32:	2000      	movs	r0, #0
 8015c34:	4978      	ldr	r1, [pc, #480]	; (8015e18 <_dtoa_r+0x6c4>)
 8015c36:	f7eb fe29 	bl	800188c <__aeabi_ddiv>
 8015c3a:	002b      	movs	r3, r5
 8015c3c:	0022      	movs	r2, r4
 8015c3e:	f7ec fca1 	bl	8002584 <__aeabi_dsub>
 8015c42:	9b08      	ldr	r3, [sp, #32]
 8015c44:	900e      	str	r0, [sp, #56]	; 0x38
 8015c46:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c48:	9315      	str	r3, [sp, #84]	; 0x54
 8015c4a:	9806      	ldr	r0, [sp, #24]
 8015c4c:	9907      	ldr	r1, [sp, #28]
 8015c4e:	f7ec fffd 	bl	8002c4c <__aeabi_d2iz>
 8015c52:	0004      	movs	r4, r0
 8015c54:	f7ed f830 	bl	8002cb8 <__aeabi_i2d>
 8015c58:	0002      	movs	r2, r0
 8015c5a:	000b      	movs	r3, r1
 8015c5c:	9806      	ldr	r0, [sp, #24]
 8015c5e:	9907      	ldr	r1, [sp, #28]
 8015c60:	f7ec fc90 	bl	8002584 <__aeabi_dsub>
 8015c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c66:	3430      	adds	r4, #48	; 0x30
 8015c68:	1c5d      	adds	r5, r3, #1
 8015c6a:	701c      	strb	r4, [r3, #0]
 8015c6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c70:	9006      	str	r0, [sp, #24]
 8015c72:	9107      	str	r1, [sp, #28]
 8015c74:	f7ea fbf8 	bl	8000468 <__aeabi_dcmplt>
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	d16c      	bne.n	8015d56 <_dtoa_r+0x602>
 8015c7c:	9a06      	ldr	r2, [sp, #24]
 8015c7e:	9b07      	ldr	r3, [sp, #28]
 8015c80:	2000      	movs	r0, #0
 8015c82:	495e      	ldr	r1, [pc, #376]	; (8015dfc <_dtoa_r+0x6a8>)
 8015c84:	f7ec fc7e 	bl	8002584 <__aeabi_dsub>
 8015c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c8c:	f7ea fbec 	bl	8000468 <__aeabi_dcmplt>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d000      	beq.n	8015c96 <_dtoa_r+0x542>
 8015c94:	e0c3      	b.n	8015e1e <_dtoa_r+0x6ca>
 8015c96:	9b08      	ldr	r3, [sp, #32]
 8015c98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c9a:	1aeb      	subs	r3, r5, r3
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	dc00      	bgt.n	8015ca2 <_dtoa_r+0x54e>
 8015ca0:	e775      	b.n	8015b8e <_dtoa_r+0x43a>
 8015ca2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	4b55      	ldr	r3, [pc, #340]	; (8015e00 <_dtoa_r+0x6ac>)
 8015caa:	f7ec f9f9 	bl	80020a0 <__aeabi_dmul>
 8015cae:	2200      	movs	r2, #0
 8015cb0:	900e      	str	r0, [sp, #56]	; 0x38
 8015cb2:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cb4:	9806      	ldr	r0, [sp, #24]
 8015cb6:	9907      	ldr	r1, [sp, #28]
 8015cb8:	4b51      	ldr	r3, [pc, #324]	; (8015e00 <_dtoa_r+0x6ac>)
 8015cba:	f7ec f9f1 	bl	80020a0 <__aeabi_dmul>
 8015cbe:	9515      	str	r5, [sp, #84]	; 0x54
 8015cc0:	9006      	str	r0, [sp, #24]
 8015cc2:	9107      	str	r1, [sp, #28]
 8015cc4:	e7c1      	b.n	8015c4a <_dtoa_r+0x4f6>
 8015cc6:	0022      	movs	r2, r4
 8015cc8:	002b      	movs	r3, r5
 8015cca:	f7ec f9e9 	bl	80020a0 <__aeabi_dmul>
 8015cce:	9c08      	ldr	r4, [sp, #32]
 8015cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015cd2:	0023      	movs	r3, r4
 8015cd4:	4694      	mov	ip, r2
 8015cd6:	900e      	str	r0, [sp, #56]	; 0x38
 8015cd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cda:	4463      	add	r3, ip
 8015cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8015cde:	9806      	ldr	r0, [sp, #24]
 8015ce0:	9907      	ldr	r1, [sp, #28]
 8015ce2:	f7ec ffb3 	bl	8002c4c <__aeabi_d2iz>
 8015ce6:	0005      	movs	r5, r0
 8015ce8:	f7ec ffe6 	bl	8002cb8 <__aeabi_i2d>
 8015cec:	000b      	movs	r3, r1
 8015cee:	0002      	movs	r2, r0
 8015cf0:	9806      	ldr	r0, [sp, #24]
 8015cf2:	9907      	ldr	r1, [sp, #28]
 8015cf4:	f7ec fc46 	bl	8002584 <__aeabi_dsub>
 8015cf8:	3530      	adds	r5, #48	; 0x30
 8015cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cfc:	7025      	strb	r5, [r4, #0]
 8015cfe:	3401      	adds	r4, #1
 8015d00:	9006      	str	r0, [sp, #24]
 8015d02:	9107      	str	r1, [sp, #28]
 8015d04:	42a3      	cmp	r3, r4
 8015d06:	d12a      	bne.n	8015d5e <_dtoa_r+0x60a>
 8015d08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015d0c:	9a08      	ldr	r2, [sp, #32]
 8015d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d10:	4694      	mov	ip, r2
 8015d12:	4463      	add	r3, ip
 8015d14:	2200      	movs	r2, #0
 8015d16:	001d      	movs	r5, r3
 8015d18:	4b3f      	ldr	r3, [pc, #252]	; (8015e18 <_dtoa_r+0x6c4>)
 8015d1a:	f7eb fa9b 	bl	8001254 <__aeabi_dadd>
 8015d1e:	0002      	movs	r2, r0
 8015d20:	000b      	movs	r3, r1
 8015d22:	9806      	ldr	r0, [sp, #24]
 8015d24:	9907      	ldr	r1, [sp, #28]
 8015d26:	f7ea fbb3 	bl	8000490 <__aeabi_dcmpgt>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d000      	beq.n	8015d30 <_dtoa_r+0x5dc>
 8015d2e:	e076      	b.n	8015e1e <_dtoa_r+0x6ca>
 8015d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d34:	2000      	movs	r0, #0
 8015d36:	4938      	ldr	r1, [pc, #224]	; (8015e18 <_dtoa_r+0x6c4>)
 8015d38:	f7ec fc24 	bl	8002584 <__aeabi_dsub>
 8015d3c:	0002      	movs	r2, r0
 8015d3e:	000b      	movs	r3, r1
 8015d40:	9806      	ldr	r0, [sp, #24]
 8015d42:	9907      	ldr	r1, [sp, #28]
 8015d44:	f7ea fb90 	bl	8000468 <__aeabi_dcmplt>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d100      	bne.n	8015d4e <_dtoa_r+0x5fa>
 8015d4c:	e71f      	b.n	8015b8e <_dtoa_r+0x43a>
 8015d4e:	1e6b      	subs	r3, r5, #1
 8015d50:	781a      	ldrb	r2, [r3, #0]
 8015d52:	2a30      	cmp	r2, #48	; 0x30
 8015d54:	d001      	beq.n	8015d5a <_dtoa_r+0x606>
 8015d56:	0037      	movs	r7, r6
 8015d58:	e03f      	b.n	8015dda <_dtoa_r+0x686>
 8015d5a:	001d      	movs	r5, r3
 8015d5c:	e7f7      	b.n	8015d4e <_dtoa_r+0x5fa>
 8015d5e:	9806      	ldr	r0, [sp, #24]
 8015d60:	9907      	ldr	r1, [sp, #28]
 8015d62:	2200      	movs	r2, #0
 8015d64:	4b26      	ldr	r3, [pc, #152]	; (8015e00 <_dtoa_r+0x6ac>)
 8015d66:	f7ec f99b 	bl	80020a0 <__aeabi_dmul>
 8015d6a:	9006      	str	r0, [sp, #24]
 8015d6c:	9107      	str	r1, [sp, #28]
 8015d6e:	e7b6      	b.n	8015cde <_dtoa_r+0x58a>
 8015d70:	9e08      	ldr	r6, [sp, #32]
 8015d72:	9a04      	ldr	r2, [sp, #16]
 8015d74:	9b05      	ldr	r3, [sp, #20]
 8015d76:	9806      	ldr	r0, [sp, #24]
 8015d78:	9907      	ldr	r1, [sp, #28]
 8015d7a:	f7eb fd87 	bl	800188c <__aeabi_ddiv>
 8015d7e:	f7ec ff65 	bl	8002c4c <__aeabi_d2iz>
 8015d82:	0004      	movs	r4, r0
 8015d84:	f7ec ff98 	bl	8002cb8 <__aeabi_i2d>
 8015d88:	9a04      	ldr	r2, [sp, #16]
 8015d8a:	9b05      	ldr	r3, [sp, #20]
 8015d8c:	f7ec f988 	bl	80020a0 <__aeabi_dmul>
 8015d90:	0002      	movs	r2, r0
 8015d92:	000b      	movs	r3, r1
 8015d94:	9806      	ldr	r0, [sp, #24]
 8015d96:	9907      	ldr	r1, [sp, #28]
 8015d98:	f7ec fbf4 	bl	8002584 <__aeabi_dsub>
 8015d9c:	0023      	movs	r3, r4
 8015d9e:	3330      	adds	r3, #48	; 0x30
 8015da0:	7033      	strb	r3, [r6, #0]
 8015da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015da4:	9b08      	ldr	r3, [sp, #32]
 8015da6:	1c75      	adds	r5, r6, #1
 8015da8:	1aeb      	subs	r3, r5, r3
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d148      	bne.n	8015e40 <_dtoa_r+0x6ec>
 8015dae:	0002      	movs	r2, r0
 8015db0:	000b      	movs	r3, r1
 8015db2:	f7eb fa4f 	bl	8001254 <__aeabi_dadd>
 8015db6:	9a04      	ldr	r2, [sp, #16]
 8015db8:	9b05      	ldr	r3, [sp, #20]
 8015dba:	9006      	str	r0, [sp, #24]
 8015dbc:	9107      	str	r1, [sp, #28]
 8015dbe:	f7ea fb67 	bl	8000490 <__aeabi_dcmpgt>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d12a      	bne.n	8015e1c <_dtoa_r+0x6c8>
 8015dc6:	9a04      	ldr	r2, [sp, #16]
 8015dc8:	9b05      	ldr	r3, [sp, #20]
 8015dca:	9806      	ldr	r0, [sp, #24]
 8015dcc:	9907      	ldr	r1, [sp, #28]
 8015dce:	f7ea fb45 	bl	800045c <__aeabi_dcmpeq>
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d001      	beq.n	8015dda <_dtoa_r+0x686>
 8015dd6:	07e3      	lsls	r3, r4, #31
 8015dd8:	d420      	bmi.n	8015e1c <_dtoa_r+0x6c8>
 8015dda:	9903      	ldr	r1, [sp, #12]
 8015ddc:	9802      	ldr	r0, [sp, #8]
 8015dde:	f000 ff35 	bl	8016c4c <_Bfree>
 8015de2:	2300      	movs	r3, #0
 8015de4:	702b      	strb	r3, [r5, #0]
 8015de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015de8:	3701      	adds	r7, #1
 8015dea:	601f      	str	r7, [r3, #0]
 8015dec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d100      	bne.n	8015df4 <_dtoa_r+0x6a0>
 8015df2:	e4e4      	b.n	80157be <_dtoa_r+0x6a>
 8015df4:	601d      	str	r5, [r3, #0]
 8015df6:	e4e2      	b.n	80157be <_dtoa_r+0x6a>
 8015df8:	0801a748 	.word	0x0801a748
 8015dfc:	3ff00000 	.word	0x3ff00000
 8015e00:	40240000 	.word	0x40240000
 8015e04:	401c0000 	.word	0x401c0000
 8015e08:	fcc00000 	.word	0xfcc00000
 8015e0c:	40140000 	.word	0x40140000
 8015e10:	7cc00000 	.word	0x7cc00000
 8015e14:	0801a720 	.word	0x0801a720
 8015e18:	3fe00000 	.word	0x3fe00000
 8015e1c:	003e      	movs	r6, r7
 8015e1e:	1e6b      	subs	r3, r5, #1
 8015e20:	781a      	ldrb	r2, [r3, #0]
 8015e22:	2a39      	cmp	r2, #57	; 0x39
 8015e24:	d106      	bne.n	8015e34 <_dtoa_r+0x6e0>
 8015e26:	9a08      	ldr	r2, [sp, #32]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d107      	bne.n	8015e3c <_dtoa_r+0x6e8>
 8015e2c:	2330      	movs	r3, #48	; 0x30
 8015e2e:	7013      	strb	r3, [r2, #0]
 8015e30:	0013      	movs	r3, r2
 8015e32:	3601      	adds	r6, #1
 8015e34:	781a      	ldrb	r2, [r3, #0]
 8015e36:	3201      	adds	r2, #1
 8015e38:	701a      	strb	r2, [r3, #0]
 8015e3a:	e78c      	b.n	8015d56 <_dtoa_r+0x602>
 8015e3c:	001d      	movs	r5, r3
 8015e3e:	e7ee      	b.n	8015e1e <_dtoa_r+0x6ca>
 8015e40:	2200      	movs	r2, #0
 8015e42:	4ba4      	ldr	r3, [pc, #656]	; (80160d4 <_dtoa_r+0x980>)
 8015e44:	f7ec f92c 	bl	80020a0 <__aeabi_dmul>
 8015e48:	2200      	movs	r2, #0
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	9006      	str	r0, [sp, #24]
 8015e4e:	9107      	str	r1, [sp, #28]
 8015e50:	002e      	movs	r6, r5
 8015e52:	f7ea fb03 	bl	800045c <__aeabi_dcmpeq>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d08b      	beq.n	8015d72 <_dtoa_r+0x61e>
 8015e5a:	e7be      	b.n	8015dda <_dtoa_r+0x686>
 8015e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e5e:	2a00      	cmp	r2, #0
 8015e60:	d100      	bne.n	8015e64 <_dtoa_r+0x710>
 8015e62:	e0da      	b.n	801601a <_dtoa_r+0x8c6>
 8015e64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e66:	2a01      	cmp	r2, #1
 8015e68:	dd00      	ble.n	8015e6c <_dtoa_r+0x718>
 8015e6a:	e0bd      	b.n	8015fe8 <_dtoa_r+0x894>
 8015e6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e6e:	2a00      	cmp	r2, #0
 8015e70:	d100      	bne.n	8015e74 <_dtoa_r+0x720>
 8015e72:	e0b5      	b.n	8015fe0 <_dtoa_r+0x88c>
 8015e74:	4a98      	ldr	r2, [pc, #608]	; (80160d8 <_dtoa_r+0x984>)
 8015e76:	189b      	adds	r3, r3, r2
 8015e78:	9d04      	ldr	r5, [sp, #16]
 8015e7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e7e:	2101      	movs	r1, #1
 8015e80:	18d2      	adds	r2, r2, r3
 8015e82:	920a      	str	r2, [sp, #40]	; 0x28
 8015e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e86:	9802      	ldr	r0, [sp, #8]
 8015e88:	18d3      	adds	r3, r2, r3
 8015e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e8c:	f000 ffad 	bl	8016dea <__i2b>
 8015e90:	0006      	movs	r6, r0
 8015e92:	2c00      	cmp	r4, #0
 8015e94:	dd0e      	ble.n	8015eb4 <_dtoa_r+0x760>
 8015e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	dd0b      	ble.n	8015eb4 <_dtoa_r+0x760>
 8015e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e9e:	0023      	movs	r3, r4
 8015ea0:	4294      	cmp	r4, r2
 8015ea2:	dd00      	ble.n	8015ea6 <_dtoa_r+0x752>
 8015ea4:	0013      	movs	r3, r2
 8015ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ea8:	1ae4      	subs	r4, r4, r3
 8015eaa:	1ad2      	subs	r2, r2, r3
 8015eac:	920a      	str	r2, [sp, #40]	; 0x28
 8015eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015eb4:	9b04      	ldr	r3, [sp, #16]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d01f      	beq.n	8015efa <_dtoa_r+0x7a6>
 8015eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d100      	bne.n	8015ec2 <_dtoa_r+0x76e>
 8015ec0:	e0af      	b.n	8016022 <_dtoa_r+0x8ce>
 8015ec2:	2d00      	cmp	r5, #0
 8015ec4:	d011      	beq.n	8015eea <_dtoa_r+0x796>
 8015ec6:	0031      	movs	r1, r6
 8015ec8:	002a      	movs	r2, r5
 8015eca:	9802      	ldr	r0, [sp, #8]
 8015ecc:	f001 f826 	bl	8016f1c <__pow5mult>
 8015ed0:	9a03      	ldr	r2, [sp, #12]
 8015ed2:	0001      	movs	r1, r0
 8015ed4:	0006      	movs	r6, r0
 8015ed6:	9802      	ldr	r0, [sp, #8]
 8015ed8:	f000 ff90 	bl	8016dfc <__multiply>
 8015edc:	9903      	ldr	r1, [sp, #12]
 8015ede:	9010      	str	r0, [sp, #64]	; 0x40
 8015ee0:	9802      	ldr	r0, [sp, #8]
 8015ee2:	f000 feb3 	bl	8016c4c <_Bfree>
 8015ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ee8:	9303      	str	r3, [sp, #12]
 8015eea:	9b04      	ldr	r3, [sp, #16]
 8015eec:	1b5a      	subs	r2, r3, r5
 8015eee:	d004      	beq.n	8015efa <_dtoa_r+0x7a6>
 8015ef0:	9903      	ldr	r1, [sp, #12]
 8015ef2:	9802      	ldr	r0, [sp, #8]
 8015ef4:	f001 f812 	bl	8016f1c <__pow5mult>
 8015ef8:	9003      	str	r0, [sp, #12]
 8015efa:	2101      	movs	r1, #1
 8015efc:	9802      	ldr	r0, [sp, #8]
 8015efe:	f000 ff74 	bl	8016dea <__i2b>
 8015f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f04:	9004      	str	r0, [sp, #16]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d100      	bne.n	8015f0c <_dtoa_r+0x7b8>
 8015f0a:	e1e3      	b.n	80162d4 <_dtoa_r+0xb80>
 8015f0c:	001a      	movs	r2, r3
 8015f0e:	0001      	movs	r1, r0
 8015f10:	9802      	ldr	r0, [sp, #8]
 8015f12:	f001 f803 	bl	8016f1c <__pow5mult>
 8015f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f18:	9004      	str	r0, [sp, #16]
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	dd00      	ble.n	8015f20 <_dtoa_r+0x7cc>
 8015f1e:	e082      	b.n	8016026 <_dtoa_r+0x8d2>
 8015f20:	2500      	movs	r5, #0
 8015f22:	9b06      	ldr	r3, [sp, #24]
 8015f24:	42ab      	cmp	r3, r5
 8015f26:	d10e      	bne.n	8015f46 <_dtoa_r+0x7f2>
 8015f28:	9b07      	ldr	r3, [sp, #28]
 8015f2a:	031b      	lsls	r3, r3, #12
 8015f2c:	42ab      	cmp	r3, r5
 8015f2e:	d10a      	bne.n	8015f46 <_dtoa_r+0x7f2>
 8015f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f32:	9a07      	ldr	r2, [sp, #28]
 8015f34:	4213      	tst	r3, r2
 8015f36:	d006      	beq.n	8015f46 <_dtoa_r+0x7f2>
 8015f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f3a:	3501      	adds	r5, #1
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f42:	3301      	adds	r3, #1
 8015f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f48:	2001      	movs	r0, #1
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d16c      	bne.n	8016028 <_dtoa_r+0x8d4>
 8015f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f50:	1818      	adds	r0, r3, r0
 8015f52:	231f      	movs	r3, #31
 8015f54:	4018      	ands	r0, r3
 8015f56:	d07e      	beq.n	8016056 <_dtoa_r+0x902>
 8015f58:	3301      	adds	r3, #1
 8015f5a:	1a1b      	subs	r3, r3, r0
 8015f5c:	2b04      	cmp	r3, #4
 8015f5e:	dd70      	ble.n	8016042 <_dtoa_r+0x8ee>
 8015f60:	231c      	movs	r3, #28
 8015f62:	1a18      	subs	r0, r3, r0
 8015f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f66:	1824      	adds	r4, r4, r0
 8015f68:	181b      	adds	r3, r3, r0
 8015f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f6e:	181b      	adds	r3, r3, r0
 8015f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	dd05      	ble.n	8015f84 <_dtoa_r+0x830>
 8015f78:	001a      	movs	r2, r3
 8015f7a:	9903      	ldr	r1, [sp, #12]
 8015f7c:	9802      	ldr	r0, [sp, #8]
 8015f7e:	f001 f80f 	bl	8016fa0 <__lshift>
 8015f82:	9003      	str	r0, [sp, #12]
 8015f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	dd05      	ble.n	8015f96 <_dtoa_r+0x842>
 8015f8a:	001a      	movs	r2, r3
 8015f8c:	9904      	ldr	r1, [sp, #16]
 8015f8e:	9802      	ldr	r0, [sp, #8]
 8015f90:	f001 f806 	bl	8016fa0 <__lshift>
 8015f94:	9004      	str	r0, [sp, #16]
 8015f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d05e      	beq.n	801605a <_dtoa_r+0x906>
 8015f9c:	9904      	ldr	r1, [sp, #16]
 8015f9e:	9803      	ldr	r0, [sp, #12]
 8015fa0:	f001 f850 	bl	8017044 <__mcmp>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	da58      	bge.n	801605a <_dtoa_r+0x906>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	220a      	movs	r2, #10
 8015fac:	9903      	ldr	r1, [sp, #12]
 8015fae:	9802      	ldr	r0, [sp, #8]
 8015fb0:	f000 fe56 	bl	8016c60 <__multadd>
 8015fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fb6:	3f01      	subs	r7, #1
 8015fb8:	9003      	str	r0, [sp, #12]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d100      	bne.n	8015fc0 <_dtoa_r+0x86c>
 8015fbe:	e190      	b.n	80162e2 <_dtoa_r+0xb8e>
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	0031      	movs	r1, r6
 8015fc4:	220a      	movs	r2, #10
 8015fc6:	9802      	ldr	r0, [sp, #8]
 8015fc8:	f000 fe4a 	bl	8016c60 <__multadd>
 8015fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fce:	0006      	movs	r6, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	dd00      	ble.n	8015fd6 <_dtoa_r+0x882>
 8015fd4:	e088      	b.n	80160e8 <_dtoa_r+0x994>
 8015fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015fd8:	2b02      	cmp	r3, #2
 8015fda:	dc00      	bgt.n	8015fde <_dtoa_r+0x88a>
 8015fdc:	e084      	b.n	80160e8 <_dtoa_r+0x994>
 8015fde:	e044      	b.n	801606a <_dtoa_r+0x916>
 8015fe0:	2336      	movs	r3, #54	; 0x36
 8015fe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015fe4:	1a9b      	subs	r3, r3, r2
 8015fe6:	e747      	b.n	8015e78 <_dtoa_r+0x724>
 8015fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fea:	1e5d      	subs	r5, r3, #1
 8015fec:	9b04      	ldr	r3, [sp, #16]
 8015fee:	42ab      	cmp	r3, r5
 8015ff0:	db08      	blt.n	8016004 <_dtoa_r+0x8b0>
 8015ff2:	1b5d      	subs	r5, r3, r5
 8015ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	da0c      	bge.n	8016014 <_dtoa_r+0x8c0>
 8015ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ffe:	1a9c      	subs	r4, r3, r2
 8016000:	2300      	movs	r3, #0
 8016002:	e73b      	b.n	8015e7c <_dtoa_r+0x728>
 8016004:	9b04      	ldr	r3, [sp, #16]
 8016006:	9504      	str	r5, [sp, #16]
 8016008:	1aea      	subs	r2, r5, r3
 801600a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801600c:	2500      	movs	r5, #0
 801600e:	189b      	adds	r3, r3, r2
 8016010:	9311      	str	r3, [sp, #68]	; 0x44
 8016012:	e7ef      	b.n	8015ff4 <_dtoa_r+0x8a0>
 8016014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016018:	e730      	b.n	8015e7c <_dtoa_r+0x728>
 801601a:	9d04      	ldr	r5, [sp, #16]
 801601c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801601e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016020:	e737      	b.n	8015e92 <_dtoa_r+0x73e>
 8016022:	9a04      	ldr	r2, [sp, #16]
 8016024:	e764      	b.n	8015ef0 <_dtoa_r+0x79c>
 8016026:	2500      	movs	r5, #0
 8016028:	9b04      	ldr	r3, [sp, #16]
 801602a:	9a04      	ldr	r2, [sp, #16]
 801602c:	691b      	ldr	r3, [r3, #16]
 801602e:	9310      	str	r3, [sp, #64]	; 0x40
 8016030:	3303      	adds	r3, #3
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	18d3      	adds	r3, r2, r3
 8016036:	6858      	ldr	r0, [r3, #4]
 8016038:	f000 fe8e 	bl	8016d58 <__hi0bits>
 801603c:	2320      	movs	r3, #32
 801603e:	1a18      	subs	r0, r3, r0
 8016040:	e785      	b.n	8015f4e <_dtoa_r+0x7fa>
 8016042:	2b04      	cmp	r3, #4
 8016044:	d095      	beq.n	8015f72 <_dtoa_r+0x81e>
 8016046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016048:	331c      	adds	r3, #28
 801604a:	18d2      	adds	r2, r2, r3
 801604c:	920a      	str	r2, [sp, #40]	; 0x28
 801604e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016050:	18e4      	adds	r4, r4, r3
 8016052:	18d3      	adds	r3, r2, r3
 8016054:	e78c      	b.n	8015f70 <_dtoa_r+0x81c>
 8016056:	0003      	movs	r3, r0
 8016058:	e7f5      	b.n	8016046 <_dtoa_r+0x8f2>
 801605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605c:	2b00      	cmp	r3, #0
 801605e:	dc3d      	bgt.n	80160dc <_dtoa_r+0x988>
 8016060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016062:	2b02      	cmp	r3, #2
 8016064:	dd3a      	ble.n	80160dc <_dtoa_r+0x988>
 8016066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016068:	930c      	str	r3, [sp, #48]	; 0x30
 801606a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801606c:	2b00      	cmp	r3, #0
 801606e:	d10c      	bne.n	801608a <_dtoa_r+0x936>
 8016070:	9904      	ldr	r1, [sp, #16]
 8016072:	2205      	movs	r2, #5
 8016074:	9802      	ldr	r0, [sp, #8]
 8016076:	f000 fdf3 	bl	8016c60 <__multadd>
 801607a:	9004      	str	r0, [sp, #16]
 801607c:	0001      	movs	r1, r0
 801607e:	9803      	ldr	r0, [sp, #12]
 8016080:	f000 ffe0 	bl	8017044 <__mcmp>
 8016084:	2800      	cmp	r0, #0
 8016086:	dd00      	ble.n	801608a <_dtoa_r+0x936>
 8016088:	e5ad      	b.n	8015be6 <_dtoa_r+0x492>
 801608a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801608c:	9d08      	ldr	r5, [sp, #32]
 801608e:	43df      	mvns	r7, r3
 8016090:	2300      	movs	r3, #0
 8016092:	9309      	str	r3, [sp, #36]	; 0x24
 8016094:	9904      	ldr	r1, [sp, #16]
 8016096:	9802      	ldr	r0, [sp, #8]
 8016098:	f000 fdd8 	bl	8016c4c <_Bfree>
 801609c:	2e00      	cmp	r6, #0
 801609e:	d100      	bne.n	80160a2 <_dtoa_r+0x94e>
 80160a0:	e69b      	b.n	8015dda <_dtoa_r+0x686>
 80160a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d005      	beq.n	80160b4 <_dtoa_r+0x960>
 80160a8:	42b3      	cmp	r3, r6
 80160aa:	d003      	beq.n	80160b4 <_dtoa_r+0x960>
 80160ac:	0019      	movs	r1, r3
 80160ae:	9802      	ldr	r0, [sp, #8]
 80160b0:	f000 fdcc 	bl	8016c4c <_Bfree>
 80160b4:	0031      	movs	r1, r6
 80160b6:	9802      	ldr	r0, [sp, #8]
 80160b8:	f000 fdc8 	bl	8016c4c <_Bfree>
 80160bc:	e68d      	b.n	8015dda <_dtoa_r+0x686>
 80160be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160c0:	9304      	str	r3, [sp, #16]
 80160c2:	001e      	movs	r6, r3
 80160c4:	e7e1      	b.n	801608a <_dtoa_r+0x936>
 80160c6:	2300      	movs	r3, #0
 80160c8:	e7fa      	b.n	80160c0 <_dtoa_r+0x96c>
 80160ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160cc:	0037      	movs	r7, r6
 80160ce:	9304      	str	r3, [sp, #16]
 80160d0:	001e      	movs	r6, r3
 80160d2:	e588      	b.n	8015be6 <_dtoa_r+0x492>
 80160d4:	40240000 	.word	0x40240000
 80160d8:	00000433 	.word	0x00000433
 80160dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d100      	bne.n	80160e4 <_dtoa_r+0x990>
 80160e2:	e0b2      	b.n	801624a <_dtoa_r+0xaf6>
 80160e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160e6:	930c      	str	r3, [sp, #48]	; 0x30
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	dd05      	ble.n	80160f8 <_dtoa_r+0x9a4>
 80160ec:	0031      	movs	r1, r6
 80160ee:	0022      	movs	r2, r4
 80160f0:	9802      	ldr	r0, [sp, #8]
 80160f2:	f000 ff55 	bl	8016fa0 <__lshift>
 80160f6:	0006      	movs	r6, r0
 80160f8:	0030      	movs	r0, r6
 80160fa:	2d00      	cmp	r5, #0
 80160fc:	d011      	beq.n	8016122 <_dtoa_r+0x9ce>
 80160fe:	6871      	ldr	r1, [r6, #4]
 8016100:	9802      	ldr	r0, [sp, #8]
 8016102:	f000 fd7b 	bl	8016bfc <_Balloc>
 8016106:	0031      	movs	r1, r6
 8016108:	0004      	movs	r4, r0
 801610a:	6933      	ldr	r3, [r6, #16]
 801610c:	310c      	adds	r1, #12
 801610e:	1c9a      	adds	r2, r3, #2
 8016110:	0092      	lsls	r2, r2, #2
 8016112:	300c      	adds	r0, #12
 8016114:	f7fc fe8b 	bl	8012e2e <memcpy>
 8016118:	2201      	movs	r2, #1
 801611a:	0021      	movs	r1, r4
 801611c:	9802      	ldr	r0, [sp, #8]
 801611e:	f000 ff3f 	bl	8016fa0 <__lshift>
 8016122:	9609      	str	r6, [sp, #36]	; 0x24
 8016124:	0006      	movs	r6, r0
 8016126:	9b08      	ldr	r3, [sp, #32]
 8016128:	930a      	str	r3, [sp, #40]	; 0x28
 801612a:	9904      	ldr	r1, [sp, #16]
 801612c:	9803      	ldr	r0, [sp, #12]
 801612e:	f7ff fa8b 	bl	8015648 <quorem>
 8016132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016134:	900d      	str	r0, [sp, #52]	; 0x34
 8016136:	0004      	movs	r4, r0
 8016138:	9803      	ldr	r0, [sp, #12]
 801613a:	f000 ff83 	bl	8017044 <__mcmp>
 801613e:	0032      	movs	r2, r6
 8016140:	9010      	str	r0, [sp, #64]	; 0x40
 8016142:	9904      	ldr	r1, [sp, #16]
 8016144:	9802      	ldr	r0, [sp, #8]
 8016146:	f000 ff97 	bl	8017078 <__mdiff>
 801614a:	2301      	movs	r3, #1
 801614c:	930b      	str	r3, [sp, #44]	; 0x2c
 801614e:	68c3      	ldr	r3, [r0, #12]
 8016150:	3430      	adds	r4, #48	; 0x30
 8016152:	0005      	movs	r5, r0
 8016154:	2b00      	cmp	r3, #0
 8016156:	d104      	bne.n	8016162 <_dtoa_r+0xa0e>
 8016158:	0001      	movs	r1, r0
 801615a:	9803      	ldr	r0, [sp, #12]
 801615c:	f000 ff72 	bl	8017044 <__mcmp>
 8016160:	900b      	str	r0, [sp, #44]	; 0x2c
 8016162:	0029      	movs	r1, r5
 8016164:	9802      	ldr	r0, [sp, #8]
 8016166:	f000 fd71 	bl	8016c4c <_Bfree>
 801616a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801616c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801616e:	4313      	orrs	r3, r2
 8016170:	d10e      	bne.n	8016190 <_dtoa_r+0xa3c>
 8016172:	9a06      	ldr	r2, [sp, #24]
 8016174:	3301      	adds	r3, #1
 8016176:	4213      	tst	r3, r2
 8016178:	d10a      	bne.n	8016190 <_dtoa_r+0xa3c>
 801617a:	2c39      	cmp	r4, #57	; 0x39
 801617c:	d026      	beq.n	80161cc <_dtoa_r+0xa78>
 801617e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016180:	2b00      	cmp	r3, #0
 8016182:	dd01      	ble.n	8016188 <_dtoa_r+0xa34>
 8016184:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016186:	3431      	adds	r4, #49	; 0x31
 8016188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801618a:	1c5d      	adds	r5, r3, #1
 801618c:	701c      	strb	r4, [r3, #0]
 801618e:	e781      	b.n	8016094 <_dtoa_r+0x940>
 8016190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016192:	2b00      	cmp	r3, #0
 8016194:	db07      	blt.n	80161a6 <_dtoa_r+0xa52>
 8016196:	001d      	movs	r5, r3
 8016198:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801619a:	431d      	orrs	r5, r3
 801619c:	d122      	bne.n	80161e4 <_dtoa_r+0xa90>
 801619e:	2301      	movs	r3, #1
 80161a0:	9a06      	ldr	r2, [sp, #24]
 80161a2:	4213      	tst	r3, r2
 80161a4:	d11e      	bne.n	80161e4 <_dtoa_r+0xa90>
 80161a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dded      	ble.n	8016188 <_dtoa_r+0xa34>
 80161ac:	9903      	ldr	r1, [sp, #12]
 80161ae:	2201      	movs	r2, #1
 80161b0:	9802      	ldr	r0, [sp, #8]
 80161b2:	f000 fef5 	bl	8016fa0 <__lshift>
 80161b6:	9904      	ldr	r1, [sp, #16]
 80161b8:	9003      	str	r0, [sp, #12]
 80161ba:	f000 ff43 	bl	8017044 <__mcmp>
 80161be:	2800      	cmp	r0, #0
 80161c0:	dc02      	bgt.n	80161c8 <_dtoa_r+0xa74>
 80161c2:	d1e1      	bne.n	8016188 <_dtoa_r+0xa34>
 80161c4:	07e3      	lsls	r3, r4, #31
 80161c6:	d5df      	bpl.n	8016188 <_dtoa_r+0xa34>
 80161c8:	2c39      	cmp	r4, #57	; 0x39
 80161ca:	d1db      	bne.n	8016184 <_dtoa_r+0xa30>
 80161cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161d0:	1c5d      	adds	r5, r3, #1
 80161d2:	2339      	movs	r3, #57	; 0x39
 80161d4:	7013      	strb	r3, [r2, #0]
 80161d6:	1e6b      	subs	r3, r5, #1
 80161d8:	781a      	ldrb	r2, [r3, #0]
 80161da:	2a39      	cmp	r2, #57	; 0x39
 80161dc:	d067      	beq.n	80162ae <_dtoa_r+0xb5a>
 80161de:	3201      	adds	r2, #1
 80161e0:	701a      	strb	r2, [r3, #0]
 80161e2:	e757      	b.n	8016094 <_dtoa_r+0x940>
 80161e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161e6:	1c5d      	adds	r5, r3, #1
 80161e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	dd04      	ble.n	80161f8 <_dtoa_r+0xaa4>
 80161ee:	2c39      	cmp	r4, #57	; 0x39
 80161f0:	d0ec      	beq.n	80161cc <_dtoa_r+0xa78>
 80161f2:	3401      	adds	r4, #1
 80161f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161f6:	e7c9      	b.n	801618c <_dtoa_r+0xa38>
 80161f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161fc:	701c      	strb	r4, [r3, #0]
 80161fe:	9b08      	ldr	r3, [sp, #32]
 8016200:	1aeb      	subs	r3, r5, r3
 8016202:	4293      	cmp	r3, r2
 8016204:	d03e      	beq.n	8016284 <_dtoa_r+0xb30>
 8016206:	2300      	movs	r3, #0
 8016208:	220a      	movs	r2, #10
 801620a:	9903      	ldr	r1, [sp, #12]
 801620c:	9802      	ldr	r0, [sp, #8]
 801620e:	f000 fd27 	bl	8016c60 <__multadd>
 8016212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016214:	9003      	str	r0, [sp, #12]
 8016216:	42b3      	cmp	r3, r6
 8016218:	d109      	bne.n	801622e <_dtoa_r+0xada>
 801621a:	2300      	movs	r3, #0
 801621c:	220a      	movs	r2, #10
 801621e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016220:	9802      	ldr	r0, [sp, #8]
 8016222:	f000 fd1d 	bl	8016c60 <__multadd>
 8016226:	9009      	str	r0, [sp, #36]	; 0x24
 8016228:	0006      	movs	r6, r0
 801622a:	950a      	str	r5, [sp, #40]	; 0x28
 801622c:	e77d      	b.n	801612a <_dtoa_r+0x9d6>
 801622e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016230:	2300      	movs	r3, #0
 8016232:	220a      	movs	r2, #10
 8016234:	9802      	ldr	r0, [sp, #8]
 8016236:	f000 fd13 	bl	8016c60 <__multadd>
 801623a:	2300      	movs	r3, #0
 801623c:	9009      	str	r0, [sp, #36]	; 0x24
 801623e:	220a      	movs	r2, #10
 8016240:	0031      	movs	r1, r6
 8016242:	9802      	ldr	r0, [sp, #8]
 8016244:	f000 fd0c 	bl	8016c60 <__multadd>
 8016248:	e7ee      	b.n	8016228 <_dtoa_r+0xad4>
 801624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801624c:	930c      	str	r3, [sp, #48]	; 0x30
 801624e:	9b08      	ldr	r3, [sp, #32]
 8016250:	9306      	str	r3, [sp, #24]
 8016252:	9904      	ldr	r1, [sp, #16]
 8016254:	9803      	ldr	r0, [sp, #12]
 8016256:	f7ff f9f7 	bl	8015648 <quorem>
 801625a:	9b06      	ldr	r3, [sp, #24]
 801625c:	3030      	adds	r0, #48	; 0x30
 801625e:	1c5d      	adds	r5, r3, #1
 8016260:	7018      	strb	r0, [r3, #0]
 8016262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016264:	9b08      	ldr	r3, [sp, #32]
 8016266:	0004      	movs	r4, r0
 8016268:	1aeb      	subs	r3, r5, r3
 801626a:	429a      	cmp	r2, r3
 801626c:	dd08      	ble.n	8016280 <_dtoa_r+0xb2c>
 801626e:	2300      	movs	r3, #0
 8016270:	220a      	movs	r2, #10
 8016272:	9903      	ldr	r1, [sp, #12]
 8016274:	9802      	ldr	r0, [sp, #8]
 8016276:	f000 fcf3 	bl	8016c60 <__multadd>
 801627a:	9506      	str	r5, [sp, #24]
 801627c:	9003      	str	r0, [sp, #12]
 801627e:	e7e8      	b.n	8016252 <_dtoa_r+0xafe>
 8016280:	2300      	movs	r3, #0
 8016282:	9309      	str	r3, [sp, #36]	; 0x24
 8016284:	9903      	ldr	r1, [sp, #12]
 8016286:	2201      	movs	r2, #1
 8016288:	9802      	ldr	r0, [sp, #8]
 801628a:	f000 fe89 	bl	8016fa0 <__lshift>
 801628e:	9904      	ldr	r1, [sp, #16]
 8016290:	9003      	str	r0, [sp, #12]
 8016292:	f000 fed7 	bl	8017044 <__mcmp>
 8016296:	2800      	cmp	r0, #0
 8016298:	dc9d      	bgt.n	80161d6 <_dtoa_r+0xa82>
 801629a:	d101      	bne.n	80162a0 <_dtoa_r+0xb4c>
 801629c:	07e3      	lsls	r3, r4, #31
 801629e:	d49a      	bmi.n	80161d6 <_dtoa_r+0xa82>
 80162a0:	1e6b      	subs	r3, r5, #1
 80162a2:	781a      	ldrb	r2, [r3, #0]
 80162a4:	2a30      	cmp	r2, #48	; 0x30
 80162a6:	d000      	beq.n	80162aa <_dtoa_r+0xb56>
 80162a8:	e6f4      	b.n	8016094 <_dtoa_r+0x940>
 80162aa:	001d      	movs	r5, r3
 80162ac:	e7f8      	b.n	80162a0 <_dtoa_r+0xb4c>
 80162ae:	9a08      	ldr	r2, [sp, #32]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d103      	bne.n	80162bc <_dtoa_r+0xb68>
 80162b4:	2331      	movs	r3, #49	; 0x31
 80162b6:	3701      	adds	r7, #1
 80162b8:	7013      	strb	r3, [r2, #0]
 80162ba:	e6eb      	b.n	8016094 <_dtoa_r+0x940>
 80162bc:	001d      	movs	r5, r3
 80162be:	e78a      	b.n	80161d6 <_dtoa_r+0xa82>
 80162c0:	4b0b      	ldr	r3, [pc, #44]	; (80162f0 <_dtoa_r+0xb9c>)
 80162c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80162c4:	9308      	str	r3, [sp, #32]
 80162c6:	4b0b      	ldr	r3, [pc, #44]	; (80162f4 <_dtoa_r+0xba0>)
 80162c8:	2a00      	cmp	r2, #0
 80162ca:	d001      	beq.n	80162d0 <_dtoa_r+0xb7c>
 80162cc:	f7ff fa75 	bl	80157ba <_dtoa_r+0x66>
 80162d0:	f7ff fa75 	bl	80157be <_dtoa_r+0x6a>
 80162d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162d6:	2b01      	cmp	r3, #1
 80162d8:	dc00      	bgt.n	80162dc <_dtoa_r+0xb88>
 80162da:	e621      	b.n	8015f20 <_dtoa_r+0x7cc>
 80162dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80162de:	2001      	movs	r0, #1
 80162e0:	e635      	b.n	8015f4e <_dtoa_r+0x7fa>
 80162e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	dcb2      	bgt.n	801624e <_dtoa_r+0xafa>
 80162e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162ea:	2b02      	cmp	r3, #2
 80162ec:	ddaf      	ble.n	801624e <_dtoa_r+0xafa>
 80162ee:	e6bc      	b.n	801606a <_dtoa_r+0x916>
 80162f0:	0801a70d 	.word	0x0801a70d
 80162f4:	0801a715 	.word	0x0801a715

080162f8 <__errno>:
 80162f8:	4b01      	ldr	r3, [pc, #4]	; (8016300 <__errno+0x8>)
 80162fa:	6818      	ldr	r0, [r3, #0]
 80162fc:	4770      	bx	lr
 80162fe:	46c0      	nop			; (mov r8, r8)
 8016300:	200000ac 	.word	0x200000ac

08016304 <__libc_fini_array>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	4d07      	ldr	r5, [pc, #28]	; (8016324 <__libc_fini_array+0x20>)
 8016308:	4c07      	ldr	r4, [pc, #28]	; (8016328 <__libc_fini_array+0x24>)
 801630a:	1b64      	subs	r4, r4, r5
 801630c:	10a4      	asrs	r4, r4, #2
 801630e:	2c00      	cmp	r4, #0
 8016310:	d102      	bne.n	8016318 <__libc_fini_array+0x14>
 8016312:	f001 f987 	bl	8017624 <_fini>
 8016316:	bd70      	pop	{r4, r5, r6, pc}
 8016318:	3c01      	subs	r4, #1
 801631a:	00a3      	lsls	r3, r4, #2
 801631c:	58eb      	ldr	r3, [r5, r3]
 801631e:	4798      	blx	r3
 8016320:	e7f5      	b.n	801630e <__libc_fini_array+0xa>
 8016322:	46c0      	nop			; (mov r8, r8)
 8016324:	0801a82c 	.word	0x0801a82c
 8016328:	0801a830 	.word	0x0801a830

0801632c <_malloc_trim_r>:
 801632c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801632e:	0005      	movs	r5, r0
 8016330:	2008      	movs	r0, #8
 8016332:	000c      	movs	r4, r1
 8016334:	f7ff f95c 	bl	80155f0 <sysconf>
 8016338:	0007      	movs	r7, r0
 801633a:	0028      	movs	r0, r5
 801633c:	f7fc fd88 	bl	8012e50 <__malloc_lock>
 8016340:	2203      	movs	r2, #3
 8016342:	4e21      	ldr	r6, [pc, #132]	; (80163c8 <_malloc_trim_r+0x9c>)
 8016344:	0039      	movs	r1, r7
 8016346:	68b3      	ldr	r3, [r6, #8]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	4393      	bics	r3, r2
 801634c:	1b18      	subs	r0, r3, r4
 801634e:	3811      	subs	r0, #17
 8016350:	19c0      	adds	r0, r0, r7
 8016352:	9301      	str	r3, [sp, #4]
 8016354:	f7e9 fefc 	bl	8000150 <__udivsi3>
 8016358:	1e44      	subs	r4, r0, #1
 801635a:	437c      	muls	r4, r7
 801635c:	42a7      	cmp	r7, r4
 801635e:	dd04      	ble.n	801636a <_malloc_trim_r+0x3e>
 8016360:	0028      	movs	r0, r5
 8016362:	f7fc fd7d 	bl	8012e60 <__malloc_unlock>
 8016366:	2000      	movs	r0, #0
 8016368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801636a:	2100      	movs	r1, #0
 801636c:	0028      	movs	r0, r5
 801636e:	f7fc ff4f 	bl	8013210 <_sbrk_r>
 8016372:	68b3      	ldr	r3, [r6, #8]
 8016374:	9a01      	ldr	r2, [sp, #4]
 8016376:	189b      	adds	r3, r3, r2
 8016378:	4298      	cmp	r0, r3
 801637a:	d1f1      	bne.n	8016360 <_malloc_trim_r+0x34>
 801637c:	4261      	negs	r1, r4
 801637e:	0028      	movs	r0, r5
 8016380:	f7fc ff46 	bl	8013210 <_sbrk_r>
 8016384:	1c43      	adds	r3, r0, #1
 8016386:	d110      	bne.n	80163aa <_malloc_trim_r+0x7e>
 8016388:	2100      	movs	r1, #0
 801638a:	0028      	movs	r0, r5
 801638c:	f7fc ff40 	bl	8013210 <_sbrk_r>
 8016390:	68b2      	ldr	r2, [r6, #8]
 8016392:	1a81      	subs	r1, r0, r2
 8016394:	290f      	cmp	r1, #15
 8016396:	dde3      	ble.n	8016360 <_malloc_trim_r+0x34>
 8016398:	4b0c      	ldr	r3, [pc, #48]	; (80163cc <_malloc_trim_r+0xa0>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	1ac0      	subs	r0, r0, r3
 801639e:	4b0c      	ldr	r3, [pc, #48]	; (80163d0 <_malloc_trim_r+0xa4>)
 80163a0:	6018      	str	r0, [r3, #0]
 80163a2:	2301      	movs	r3, #1
 80163a4:	430b      	orrs	r3, r1
 80163a6:	6053      	str	r3, [r2, #4]
 80163a8:	e7da      	b.n	8016360 <_malloc_trim_r+0x34>
 80163aa:	68b2      	ldr	r2, [r6, #8]
 80163ac:	2601      	movs	r6, #1
 80163ae:	9b01      	ldr	r3, [sp, #4]
 80163b0:	0028      	movs	r0, r5
 80163b2:	1b1b      	subs	r3, r3, r4
 80163b4:	4333      	orrs	r3, r6
 80163b6:	6053      	str	r3, [r2, #4]
 80163b8:	4b05      	ldr	r3, [pc, #20]	; (80163d0 <_malloc_trim_r+0xa4>)
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	1b14      	subs	r4, r2, r4
 80163be:	601c      	str	r4, [r3, #0]
 80163c0:	f7fc fd4e 	bl	8012e60 <__malloc_unlock>
 80163c4:	0030      	movs	r0, r6
 80163c6:	e7cf      	b.n	8016368 <_malloc_trim_r+0x3c>
 80163c8:	20000644 	.word	0x20000644
 80163cc:	20000a4c 	.word	0x20000a4c
 80163d0:	200067e4 	.word	0x200067e4

080163d4 <_free_r>:
 80163d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163d6:	1e0d      	subs	r5, r1, #0
 80163d8:	9001      	str	r0, [sp, #4]
 80163da:	d02d      	beq.n	8016438 <_free_r+0x64>
 80163dc:	f7fc fd38 	bl	8012e50 <__malloc_lock>
 80163e0:	2301      	movs	r3, #1
 80163e2:	0029      	movs	r1, r5
 80163e4:	469c      	mov	ip, r3
 80163e6:	3908      	subs	r1, #8
 80163e8:	684f      	ldr	r7, [r1, #4]
 80163ea:	4662      	mov	r2, ip
 80163ec:	003b      	movs	r3, r7
 80163ee:	4666      	mov	r6, ip
 80163f0:	4393      	bics	r3, r2
 80163f2:	18c8      	adds	r0, r1, r3
 80163f4:	6845      	ldr	r5, [r0, #4]
 80163f6:	3202      	adds	r2, #2
 80163f8:	4395      	bics	r5, r2
 80163fa:	4a4a      	ldr	r2, [pc, #296]	; (8016524 <_free_r+0x150>)
 80163fc:	4037      	ands	r7, r6
 80163fe:	6896      	ldr	r6, [r2, #8]
 8016400:	4286      	cmp	r6, r0
 8016402:	d11a      	bne.n	801643a <_free_r+0x66>
 8016404:	195b      	adds	r3, r3, r5
 8016406:	2f00      	cmp	r7, #0
 8016408:	d106      	bne.n	8016418 <_free_r+0x44>
 801640a:	6808      	ldr	r0, [r1, #0]
 801640c:	1a09      	subs	r1, r1, r0
 801640e:	688d      	ldr	r5, [r1, #8]
 8016410:	181b      	adds	r3, r3, r0
 8016412:	68c8      	ldr	r0, [r1, #12]
 8016414:	60e8      	str	r0, [r5, #12]
 8016416:	6085      	str	r5, [r0, #8]
 8016418:	2001      	movs	r0, #1
 801641a:	4318      	orrs	r0, r3
 801641c:	6048      	str	r0, [r1, #4]
 801641e:	6091      	str	r1, [r2, #8]
 8016420:	4a41      	ldr	r2, [pc, #260]	; (8016528 <_free_r+0x154>)
 8016422:	6812      	ldr	r2, [r2, #0]
 8016424:	429a      	cmp	r2, r3
 8016426:	d804      	bhi.n	8016432 <_free_r+0x5e>
 8016428:	4b40      	ldr	r3, [pc, #256]	; (801652c <_free_r+0x158>)
 801642a:	9801      	ldr	r0, [sp, #4]
 801642c:	6819      	ldr	r1, [r3, #0]
 801642e:	f7ff ff7d 	bl	801632c <_malloc_trim_r>
 8016432:	9801      	ldr	r0, [sp, #4]
 8016434:	f7fc fd14 	bl	8012e60 <__malloc_unlock>
 8016438:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801643a:	2600      	movs	r6, #0
 801643c:	6045      	str	r5, [r0, #4]
 801643e:	42b7      	cmp	r7, r6
 8016440:	d109      	bne.n	8016456 <_free_r+0x82>
 8016442:	680f      	ldr	r7, [r1, #0]
 8016444:	4c3a      	ldr	r4, [pc, #232]	; (8016530 <_free_r+0x15c>)
 8016446:	1bc9      	subs	r1, r1, r7
 8016448:	19db      	adds	r3, r3, r7
 801644a:	688f      	ldr	r7, [r1, #8]
 801644c:	42a7      	cmp	r7, r4
 801644e:	d02b      	beq.n	80164a8 <_free_r+0xd4>
 8016450:	68cc      	ldr	r4, [r1, #12]
 8016452:	60fc      	str	r4, [r7, #12]
 8016454:	60a7      	str	r7, [r4, #8]
 8016456:	1947      	adds	r7, r0, r5
 8016458:	687c      	ldr	r4, [r7, #4]
 801645a:	2701      	movs	r7, #1
 801645c:	423c      	tst	r4, r7
 801645e:	d10b      	bne.n	8016478 <_free_r+0xa4>
 8016460:	195b      	adds	r3, r3, r5
 8016462:	6885      	ldr	r5, [r0, #8]
 8016464:	2e00      	cmp	r6, #0
 8016466:	d121      	bne.n	80164ac <_free_r+0xd8>
 8016468:	4c31      	ldr	r4, [pc, #196]	; (8016530 <_free_r+0x15c>)
 801646a:	42a5      	cmp	r5, r4
 801646c:	d11e      	bne.n	80164ac <_free_r+0xd8>
 801646e:	003e      	movs	r6, r7
 8016470:	6151      	str	r1, [r2, #20]
 8016472:	6111      	str	r1, [r2, #16]
 8016474:	60cd      	str	r5, [r1, #12]
 8016476:	608d      	str	r5, [r1, #8]
 8016478:	2001      	movs	r0, #1
 801647a:	0005      	movs	r5, r0
 801647c:	431d      	orrs	r5, r3
 801647e:	604d      	str	r5, [r1, #4]
 8016480:	50cb      	str	r3, [r1, r3]
 8016482:	2e00      	cmp	r6, #0
 8016484:	d1d5      	bne.n	8016432 <_free_r+0x5e>
 8016486:	4d2b      	ldr	r5, [pc, #172]	; (8016534 <_free_r+0x160>)
 8016488:	42ab      	cmp	r3, r5
 801648a:	d813      	bhi.n	80164b4 <_free_r+0xe0>
 801648c:	08db      	lsrs	r3, r3, #3
 801648e:	109d      	asrs	r5, r3, #2
 8016490:	40a8      	lsls	r0, r5
 8016492:	6854      	ldr	r4, [r2, #4]
 8016494:	00db      	lsls	r3, r3, #3
 8016496:	4320      	orrs	r0, r4
 8016498:	6050      	str	r0, [r2, #4]
 801649a:	189a      	adds	r2, r3, r2
 801649c:	6893      	ldr	r3, [r2, #8]
 801649e:	60ca      	str	r2, [r1, #12]
 80164a0:	608b      	str	r3, [r1, #8]
 80164a2:	6091      	str	r1, [r2, #8]
 80164a4:	60d9      	str	r1, [r3, #12]
 80164a6:	e7c4      	b.n	8016432 <_free_r+0x5e>
 80164a8:	4666      	mov	r6, ip
 80164aa:	e7d4      	b.n	8016456 <_free_r+0x82>
 80164ac:	68c0      	ldr	r0, [r0, #12]
 80164ae:	60e8      	str	r0, [r5, #12]
 80164b0:	6085      	str	r5, [r0, #8]
 80164b2:	e7e1      	b.n	8016478 <_free_r+0xa4>
 80164b4:	0a5d      	lsrs	r5, r3, #9
 80164b6:	2d04      	cmp	r5, #4
 80164b8:	d812      	bhi.n	80164e0 <_free_r+0x10c>
 80164ba:	0998      	lsrs	r0, r3, #6
 80164bc:	3038      	adds	r0, #56	; 0x38
 80164be:	00c6      	lsls	r6, r0, #3
 80164c0:	18b6      	adds	r6, r6, r2
 80164c2:	68b5      	ldr	r5, [r6, #8]
 80164c4:	2703      	movs	r7, #3
 80164c6:	42ae      	cmp	r6, r5
 80164c8:	d125      	bne.n	8016516 <_free_r+0x142>
 80164ca:	2301      	movs	r3, #1
 80164cc:	1080      	asrs	r0, r0, #2
 80164ce:	4083      	lsls	r3, r0
 80164d0:	6850      	ldr	r0, [r2, #4]
 80164d2:	4303      	orrs	r3, r0
 80164d4:	6053      	str	r3, [r2, #4]
 80164d6:	60ce      	str	r6, [r1, #12]
 80164d8:	608d      	str	r5, [r1, #8]
 80164da:	60b1      	str	r1, [r6, #8]
 80164dc:	60e9      	str	r1, [r5, #12]
 80164de:	e7a8      	b.n	8016432 <_free_r+0x5e>
 80164e0:	2d14      	cmp	r5, #20
 80164e2:	d802      	bhi.n	80164ea <_free_r+0x116>
 80164e4:	0028      	movs	r0, r5
 80164e6:	305b      	adds	r0, #91	; 0x5b
 80164e8:	e7e9      	b.n	80164be <_free_r+0xea>
 80164ea:	2d54      	cmp	r5, #84	; 0x54
 80164ec:	d802      	bhi.n	80164f4 <_free_r+0x120>
 80164ee:	0b18      	lsrs	r0, r3, #12
 80164f0:	306e      	adds	r0, #110	; 0x6e
 80164f2:	e7e4      	b.n	80164be <_free_r+0xea>
 80164f4:	20aa      	movs	r0, #170	; 0xaa
 80164f6:	0040      	lsls	r0, r0, #1
 80164f8:	4285      	cmp	r5, r0
 80164fa:	d802      	bhi.n	8016502 <_free_r+0x12e>
 80164fc:	0bd8      	lsrs	r0, r3, #15
 80164fe:	3077      	adds	r0, #119	; 0x77
 8016500:	e7dd      	b.n	80164be <_free_r+0xea>
 8016502:	4e0d      	ldr	r6, [pc, #52]	; (8016538 <_free_r+0x164>)
 8016504:	207e      	movs	r0, #126	; 0x7e
 8016506:	42b5      	cmp	r5, r6
 8016508:	d8d9      	bhi.n	80164be <_free_r+0xea>
 801650a:	0c98      	lsrs	r0, r3, #18
 801650c:	307c      	adds	r0, #124	; 0x7c
 801650e:	e7d6      	b.n	80164be <_free_r+0xea>
 8016510:	68ad      	ldr	r5, [r5, #8]
 8016512:	42ae      	cmp	r6, r5
 8016514:	d003      	beq.n	801651e <_free_r+0x14a>
 8016516:	686a      	ldr	r2, [r5, #4]
 8016518:	43ba      	bics	r2, r7
 801651a:	429a      	cmp	r2, r3
 801651c:	d8f8      	bhi.n	8016510 <_free_r+0x13c>
 801651e:	68ee      	ldr	r6, [r5, #12]
 8016520:	e7d9      	b.n	80164d6 <_free_r+0x102>
 8016522:	46c0      	nop			; (mov r8, r8)
 8016524:	20000644 	.word	0x20000644
 8016528:	20000a50 	.word	0x20000a50
 801652c:	20006814 	.word	0x20006814
 8016530:	2000064c 	.word	0x2000064c
 8016534:	000001ff 	.word	0x000001ff
 8016538:	00000554 	.word	0x00000554

0801653c <rshift>:
 801653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801653e:	0004      	movs	r4, r0
 8016540:	6905      	ldr	r5, [r0, #16]
 8016542:	3414      	adds	r4, #20
 8016544:	114b      	asrs	r3, r1, #5
 8016546:	0026      	movs	r6, r4
 8016548:	429d      	cmp	r5, r3
 801654a:	dd14      	ble.n	8016576 <rshift+0x3a>
 801654c:	221f      	movs	r2, #31
 801654e:	00ad      	lsls	r5, r5, #2
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	4011      	ands	r1, r2
 8016554:	1965      	adds	r5, r4, r5
 8016556:	18e3      	adds	r3, r4, r3
 8016558:	0022      	movs	r2, r4
 801655a:	2900      	cmp	r1, #0
 801655c:	d01e      	beq.n	801659c <rshift+0x60>
 801655e:	cb04      	ldmia	r3!, {r2}
 8016560:	2720      	movs	r7, #32
 8016562:	40ca      	lsrs	r2, r1
 8016564:	46a4      	mov	ip, r4
 8016566:	1a7f      	subs	r7, r7, r1
 8016568:	4666      	mov	r6, ip
 801656a:	429d      	cmp	r5, r3
 801656c:	d80b      	bhi.n	8016586 <rshift+0x4a>
 801656e:	6032      	str	r2, [r6, #0]
 8016570:	2a00      	cmp	r2, #0
 8016572:	d000      	beq.n	8016576 <rshift+0x3a>
 8016574:	3604      	adds	r6, #4
 8016576:	1b33      	subs	r3, r6, r4
 8016578:	109b      	asrs	r3, r3, #2
 801657a:	6103      	str	r3, [r0, #16]
 801657c:	42a6      	cmp	r6, r4
 801657e:	d101      	bne.n	8016584 <rshift+0x48>
 8016580:	2300      	movs	r3, #0
 8016582:	6143      	str	r3, [r0, #20]
 8016584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016586:	681e      	ldr	r6, [r3, #0]
 8016588:	40be      	lsls	r6, r7
 801658a:	4332      	orrs	r2, r6
 801658c:	4666      	mov	r6, ip
 801658e:	c604      	stmia	r6!, {r2}
 8016590:	cb04      	ldmia	r3!, {r2}
 8016592:	46b4      	mov	ip, r6
 8016594:	40ca      	lsrs	r2, r1
 8016596:	e7e7      	b.n	8016568 <rshift+0x2c>
 8016598:	cb02      	ldmia	r3!, {r1}
 801659a:	c202      	stmia	r2!, {r1}
 801659c:	0016      	movs	r6, r2
 801659e:	429d      	cmp	r5, r3
 80165a0:	d8fa      	bhi.n	8016598 <rshift+0x5c>
 80165a2:	e7e8      	b.n	8016576 <rshift+0x3a>

080165a4 <__hexdig_fun>:
 80165a4:	0003      	movs	r3, r0
 80165a6:	3b30      	subs	r3, #48	; 0x30
 80165a8:	2b09      	cmp	r3, #9
 80165aa:	d803      	bhi.n	80165b4 <__hexdig_fun+0x10>
 80165ac:	3820      	subs	r0, #32
 80165ae:	b2c3      	uxtb	r3, r0
 80165b0:	0018      	movs	r0, r3
 80165b2:	4770      	bx	lr
 80165b4:	0003      	movs	r3, r0
 80165b6:	3b61      	subs	r3, #97	; 0x61
 80165b8:	2b05      	cmp	r3, #5
 80165ba:	d801      	bhi.n	80165c0 <__hexdig_fun+0x1c>
 80165bc:	3847      	subs	r0, #71	; 0x47
 80165be:	e7f6      	b.n	80165ae <__hexdig_fun+0xa>
 80165c0:	0002      	movs	r2, r0
 80165c2:	3a41      	subs	r2, #65	; 0x41
 80165c4:	2300      	movs	r3, #0
 80165c6:	2a05      	cmp	r2, #5
 80165c8:	d8f2      	bhi.n	80165b0 <__hexdig_fun+0xc>
 80165ca:	3827      	subs	r0, #39	; 0x27
 80165cc:	e7ef      	b.n	80165ae <__hexdig_fun+0xa>

080165ce <__gethex>:
 80165ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165d0:	b08d      	sub	sp, #52	; 0x34
 80165d2:	9005      	str	r0, [sp, #20]
 80165d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80165d6:	9109      	str	r1, [sp, #36]	; 0x24
 80165d8:	9202      	str	r2, [sp, #8]
 80165da:	930a      	str	r3, [sp, #40]	; 0x28
 80165dc:	f000 fadf 	bl	8016b9e <__localeconv_l>
 80165e0:	6803      	ldr	r3, [r0, #0]
 80165e2:	0018      	movs	r0, r3
 80165e4:	9307      	str	r3, [sp, #28]
 80165e6:	f7e9 fd97 	bl	8000118 <strlen>
 80165ea:	2202      	movs	r2, #2
 80165ec:	9b07      	ldr	r3, [sp, #28]
 80165ee:	4252      	negs	r2, r2
 80165f0:	181b      	adds	r3, r3, r0
 80165f2:	3b01      	subs	r3, #1
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	9004      	str	r0, [sp, #16]
 80165f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80165fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165fc:	6819      	ldr	r1, [r3, #0]
 80165fe:	1c8b      	adds	r3, r1, #2
 8016600:	1a52      	subs	r2, r2, r1
 8016602:	18d1      	adds	r1, r2, r3
 8016604:	9301      	str	r3, [sp, #4]
 8016606:	9108      	str	r1, [sp, #32]
 8016608:	9901      	ldr	r1, [sp, #4]
 801660a:	3301      	adds	r3, #1
 801660c:	7808      	ldrb	r0, [r1, #0]
 801660e:	2830      	cmp	r0, #48	; 0x30
 8016610:	d0f7      	beq.n	8016602 <__gethex+0x34>
 8016612:	f7ff ffc7 	bl	80165a4 <__hexdig_fun>
 8016616:	1e07      	subs	r7, r0, #0
 8016618:	d000      	beq.n	801661c <__gethex+0x4e>
 801661a:	e06f      	b.n	80166fc <__gethex+0x12e>
 801661c:	9a04      	ldr	r2, [sp, #16]
 801661e:	9907      	ldr	r1, [sp, #28]
 8016620:	9801      	ldr	r0, [sp, #4]
 8016622:	f7fc fe4b 	bl	80132bc <strncmp>
 8016626:	2800      	cmp	r0, #0
 8016628:	d000      	beq.n	801662c <__gethex+0x5e>
 801662a:	e06d      	b.n	8016708 <__gethex+0x13a>
 801662c:	9b01      	ldr	r3, [sp, #4]
 801662e:	9a04      	ldr	r2, [sp, #16]
 8016630:	189c      	adds	r4, r3, r2
 8016632:	7820      	ldrb	r0, [r4, #0]
 8016634:	f7ff ffb6 	bl	80165a4 <__hexdig_fun>
 8016638:	2800      	cmp	r0, #0
 801663a:	d069      	beq.n	8016710 <__gethex+0x142>
 801663c:	9401      	str	r4, [sp, #4]
 801663e:	9b01      	ldr	r3, [sp, #4]
 8016640:	7818      	ldrb	r0, [r3, #0]
 8016642:	2830      	cmp	r0, #48	; 0x30
 8016644:	d009      	beq.n	801665a <__gethex+0x8c>
 8016646:	f7ff ffad 	bl	80165a4 <__hexdig_fun>
 801664a:	4243      	negs	r3, r0
 801664c:	4143      	adcs	r3, r0
 801664e:	9303      	str	r3, [sp, #12]
 8016650:	2301      	movs	r3, #1
 8016652:	0026      	movs	r6, r4
 8016654:	9308      	str	r3, [sp, #32]
 8016656:	9c01      	ldr	r4, [sp, #4]
 8016658:	e004      	b.n	8016664 <__gethex+0x96>
 801665a:	9b01      	ldr	r3, [sp, #4]
 801665c:	3301      	adds	r3, #1
 801665e:	9301      	str	r3, [sp, #4]
 8016660:	e7ed      	b.n	801663e <__gethex+0x70>
 8016662:	3401      	adds	r4, #1
 8016664:	7820      	ldrb	r0, [r4, #0]
 8016666:	f7ff ff9d 	bl	80165a4 <__hexdig_fun>
 801666a:	2800      	cmp	r0, #0
 801666c:	d1f9      	bne.n	8016662 <__gethex+0x94>
 801666e:	9a04      	ldr	r2, [sp, #16]
 8016670:	9907      	ldr	r1, [sp, #28]
 8016672:	0020      	movs	r0, r4
 8016674:	f7fc fe22 	bl	80132bc <strncmp>
 8016678:	2800      	cmp	r0, #0
 801667a:	d109      	bne.n	8016690 <__gethex+0xc2>
 801667c:	2e00      	cmp	r6, #0
 801667e:	d10a      	bne.n	8016696 <__gethex+0xc8>
 8016680:	9b04      	ldr	r3, [sp, #16]
 8016682:	18e4      	adds	r4, r4, r3
 8016684:	0026      	movs	r6, r4
 8016686:	7820      	ldrb	r0, [r4, #0]
 8016688:	f7ff ff8c 	bl	80165a4 <__hexdig_fun>
 801668c:	2800      	cmp	r0, #0
 801668e:	d139      	bne.n	8016704 <__gethex+0x136>
 8016690:	2700      	movs	r7, #0
 8016692:	42be      	cmp	r6, r7
 8016694:	d001      	beq.n	801669a <__gethex+0xcc>
 8016696:	1b37      	subs	r7, r6, r4
 8016698:	00bf      	lsls	r7, r7, #2
 801669a:	7823      	ldrb	r3, [r4, #0]
 801669c:	2b50      	cmp	r3, #80	; 0x50
 801669e:	d001      	beq.n	80166a4 <__gethex+0xd6>
 80166a0:	2b70      	cmp	r3, #112	; 0x70
 80166a2:	d142      	bne.n	801672a <__gethex+0x15c>
 80166a4:	7863      	ldrb	r3, [r4, #1]
 80166a6:	2b2b      	cmp	r3, #43	; 0x2b
 80166a8:	d034      	beq.n	8016714 <__gethex+0x146>
 80166aa:	2b2d      	cmp	r3, #45	; 0x2d
 80166ac:	d036      	beq.n	801671c <__gethex+0x14e>
 80166ae:	2300      	movs	r3, #0
 80166b0:	1c66      	adds	r6, r4, #1
 80166b2:	9306      	str	r3, [sp, #24]
 80166b4:	7830      	ldrb	r0, [r6, #0]
 80166b6:	f7ff ff75 	bl	80165a4 <__hexdig_fun>
 80166ba:	1e43      	subs	r3, r0, #1
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	2b18      	cmp	r3, #24
 80166c0:	d833      	bhi.n	801672a <__gethex+0x15c>
 80166c2:	3810      	subs	r0, #16
 80166c4:	0005      	movs	r5, r0
 80166c6:	3601      	adds	r6, #1
 80166c8:	7830      	ldrb	r0, [r6, #0]
 80166ca:	f7ff ff6b 	bl	80165a4 <__hexdig_fun>
 80166ce:	1e43      	subs	r3, r0, #1
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	2b18      	cmp	r3, #24
 80166d4:	d924      	bls.n	8016720 <__gethex+0x152>
 80166d6:	9b06      	ldr	r3, [sp, #24]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d000      	beq.n	80166de <__gethex+0x110>
 80166dc:	426d      	negs	r5, r5
 80166de:	197f      	adds	r7, r7, r5
 80166e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e2:	601e      	str	r6, [r3, #0]
 80166e4:	9b03      	ldr	r3, [sp, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d021      	beq.n	801672e <__gethex+0x160>
 80166ea:	9b08      	ldr	r3, [sp, #32]
 80166ec:	2606      	movs	r6, #6
 80166ee:	425a      	negs	r2, r3
 80166f0:	4153      	adcs	r3, r2
 80166f2:	425b      	negs	r3, r3
 80166f4:	401e      	ands	r6, r3
 80166f6:	0030      	movs	r0, r6
 80166f8:	b00d      	add	sp, #52	; 0x34
 80166fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fc:	2300      	movs	r3, #0
 80166fe:	9303      	str	r3, [sp, #12]
 8016700:	001e      	movs	r6, r3
 8016702:	e7a8      	b.n	8016656 <__gethex+0x88>
 8016704:	3401      	adds	r4, #1
 8016706:	e7be      	b.n	8016686 <__gethex+0xb8>
 8016708:	9c01      	ldr	r4, [sp, #4]
 801670a:	2301      	movs	r3, #1
 801670c:	9303      	str	r3, [sp, #12]
 801670e:	e7c4      	b.n	801669a <__gethex+0xcc>
 8016710:	0007      	movs	r7, r0
 8016712:	e7fa      	b.n	801670a <__gethex+0x13c>
 8016714:	2300      	movs	r3, #0
 8016716:	9306      	str	r3, [sp, #24]
 8016718:	1ca6      	adds	r6, r4, #2
 801671a:	e7cb      	b.n	80166b4 <__gethex+0xe6>
 801671c:	2301      	movs	r3, #1
 801671e:	e7fa      	b.n	8016716 <__gethex+0x148>
 8016720:	230a      	movs	r3, #10
 8016722:	435d      	muls	r5, r3
 8016724:	182d      	adds	r5, r5, r0
 8016726:	3d10      	subs	r5, #16
 8016728:	e7cd      	b.n	80166c6 <__gethex+0xf8>
 801672a:	0026      	movs	r6, r4
 801672c:	e7d8      	b.n	80166e0 <__gethex+0x112>
 801672e:	9b01      	ldr	r3, [sp, #4]
 8016730:	9903      	ldr	r1, [sp, #12]
 8016732:	1ae3      	subs	r3, r4, r3
 8016734:	3b01      	subs	r3, #1
 8016736:	2b07      	cmp	r3, #7
 8016738:	dc47      	bgt.n	80167ca <__gethex+0x1fc>
 801673a:	9805      	ldr	r0, [sp, #20]
 801673c:	f000 fa5e 	bl	8016bfc <_Balloc>
 8016740:	0003      	movs	r3, r0
 8016742:	3314      	adds	r3, #20
 8016744:	9303      	str	r3, [sp, #12]
 8016746:	9308      	str	r3, [sp, #32]
 8016748:	2300      	movs	r3, #0
 801674a:	0005      	movs	r5, r0
 801674c:	001e      	movs	r6, r3
 801674e:	9306      	str	r3, [sp, #24]
 8016750:	9b01      	ldr	r3, [sp, #4]
 8016752:	42a3      	cmp	r3, r4
 8016754:	d33c      	bcc.n	80167d0 <__gethex+0x202>
 8016756:	9c08      	ldr	r4, [sp, #32]
 8016758:	9b03      	ldr	r3, [sp, #12]
 801675a:	c440      	stmia	r4!, {r6}
 801675c:	1ae4      	subs	r4, r4, r3
 801675e:	10a4      	asrs	r4, r4, #2
 8016760:	612c      	str	r4, [r5, #16]
 8016762:	0030      	movs	r0, r6
 8016764:	f000 faf8 	bl	8016d58 <__hi0bits>
 8016768:	9b02      	ldr	r3, [sp, #8]
 801676a:	0164      	lsls	r4, r4, #5
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	1a26      	subs	r6, r4, r0
 8016770:	9301      	str	r3, [sp, #4]
 8016772:	429e      	cmp	r6, r3
 8016774:	dd5f      	ble.n	8016836 <__gethex+0x268>
 8016776:	1af6      	subs	r6, r6, r3
 8016778:	0031      	movs	r1, r6
 801677a:	0028      	movs	r0, r5
 801677c:	f000 fde3 	bl	8017346 <__any_on>
 8016780:	1e04      	subs	r4, r0, #0
 8016782:	d00f      	beq.n	80167a4 <__gethex+0x1d6>
 8016784:	2401      	movs	r4, #1
 8016786:	211f      	movs	r1, #31
 8016788:	0020      	movs	r0, r4
 801678a:	1e73      	subs	r3, r6, #1
 801678c:	4019      	ands	r1, r3
 801678e:	4088      	lsls	r0, r1
 8016790:	0001      	movs	r1, r0
 8016792:	115a      	asrs	r2, r3, #5
 8016794:	9803      	ldr	r0, [sp, #12]
 8016796:	0092      	lsls	r2, r2, #2
 8016798:	5812      	ldr	r2, [r2, r0]
 801679a:	420a      	tst	r2, r1
 801679c:	d002      	beq.n	80167a4 <__gethex+0x1d6>
 801679e:	42a3      	cmp	r3, r4
 80167a0:	dc41      	bgt.n	8016826 <__gethex+0x258>
 80167a2:	2402      	movs	r4, #2
 80167a4:	0031      	movs	r1, r6
 80167a6:	0028      	movs	r0, r5
 80167a8:	f7ff fec8 	bl	801653c <rshift>
 80167ac:	19bf      	adds	r7, r7, r6
 80167ae:	9b02      	ldr	r3, [sp, #8]
 80167b0:	689b      	ldr	r3, [r3, #8]
 80167b2:	9304      	str	r3, [sp, #16]
 80167b4:	42bb      	cmp	r3, r7
 80167b6:	da4e      	bge.n	8016856 <__gethex+0x288>
 80167b8:	0029      	movs	r1, r5
 80167ba:	9805      	ldr	r0, [sp, #20]
 80167bc:	f000 fa46 	bl	8016c4c <_Bfree>
 80167c0:	2300      	movs	r3, #0
 80167c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167c4:	26a3      	movs	r6, #163	; 0xa3
 80167c6:	6013      	str	r3, [r2, #0]
 80167c8:	e795      	b.n	80166f6 <__gethex+0x128>
 80167ca:	3101      	adds	r1, #1
 80167cc:	105b      	asrs	r3, r3, #1
 80167ce:	e7b2      	b.n	8016736 <__gethex+0x168>
 80167d0:	1e63      	subs	r3, r4, #1
 80167d2:	9309      	str	r3, [sp, #36]	; 0x24
 80167d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	4293      	cmp	r3, r2
 80167da:	d015      	beq.n	8016808 <__gethex+0x23a>
 80167dc:	9b06      	ldr	r3, [sp, #24]
 80167de:	2b20      	cmp	r3, #32
 80167e0:	d105      	bne.n	80167ee <__gethex+0x220>
 80167e2:	9b08      	ldr	r3, [sp, #32]
 80167e4:	601e      	str	r6, [r3, #0]
 80167e6:	2600      	movs	r6, #0
 80167e8:	3304      	adds	r3, #4
 80167ea:	9308      	str	r3, [sp, #32]
 80167ec:	9606      	str	r6, [sp, #24]
 80167ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f0:	7818      	ldrb	r0, [r3, #0]
 80167f2:	f7ff fed7 	bl	80165a4 <__hexdig_fun>
 80167f6:	230f      	movs	r3, #15
 80167f8:	4018      	ands	r0, r3
 80167fa:	9b06      	ldr	r3, [sp, #24]
 80167fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80167fe:	4098      	lsls	r0, r3
 8016800:	3304      	adds	r3, #4
 8016802:	4306      	orrs	r6, r0
 8016804:	9306      	str	r3, [sp, #24]
 8016806:	e7a3      	b.n	8016750 <__gethex+0x182>
 8016808:	2301      	movs	r3, #1
 801680a:	9a04      	ldr	r2, [sp, #16]
 801680c:	1a9c      	subs	r4, r3, r2
 801680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016810:	191c      	adds	r4, r3, r4
 8016812:	9b01      	ldr	r3, [sp, #4]
 8016814:	429c      	cmp	r4, r3
 8016816:	d3e1      	bcc.n	80167dc <__gethex+0x20e>
 8016818:	9907      	ldr	r1, [sp, #28]
 801681a:	0020      	movs	r0, r4
 801681c:	f7fc fd4e 	bl	80132bc <strncmp>
 8016820:	2800      	cmp	r0, #0
 8016822:	d1db      	bne.n	80167dc <__gethex+0x20e>
 8016824:	e794      	b.n	8016750 <__gethex+0x182>
 8016826:	1eb1      	subs	r1, r6, #2
 8016828:	0028      	movs	r0, r5
 801682a:	f000 fd8c 	bl	8017346 <__any_on>
 801682e:	2800      	cmp	r0, #0
 8016830:	d0b7      	beq.n	80167a2 <__gethex+0x1d4>
 8016832:	2403      	movs	r4, #3
 8016834:	e7b6      	b.n	80167a4 <__gethex+0x1d6>
 8016836:	9b01      	ldr	r3, [sp, #4]
 8016838:	2400      	movs	r4, #0
 801683a:	429e      	cmp	r6, r3
 801683c:	dab7      	bge.n	80167ae <__gethex+0x1e0>
 801683e:	1b9e      	subs	r6, r3, r6
 8016840:	0029      	movs	r1, r5
 8016842:	0032      	movs	r2, r6
 8016844:	9805      	ldr	r0, [sp, #20]
 8016846:	f000 fbab 	bl	8016fa0 <__lshift>
 801684a:	0003      	movs	r3, r0
 801684c:	3314      	adds	r3, #20
 801684e:	0005      	movs	r5, r0
 8016850:	1bbf      	subs	r7, r7, r6
 8016852:	9303      	str	r3, [sp, #12]
 8016854:	e7ab      	b.n	80167ae <__gethex+0x1e0>
 8016856:	9b02      	ldr	r3, [sp, #8]
 8016858:	685e      	ldr	r6, [r3, #4]
 801685a:	42be      	cmp	r6, r7
 801685c:	dd6b      	ble.n	8016936 <__gethex+0x368>
 801685e:	9b01      	ldr	r3, [sp, #4]
 8016860:	1bf6      	subs	r6, r6, r7
 8016862:	42b3      	cmp	r3, r6
 8016864:	dc32      	bgt.n	80168cc <__gethex+0x2fe>
 8016866:	9b02      	ldr	r3, [sp, #8]
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	2b02      	cmp	r3, #2
 801686c:	d026      	beq.n	80168bc <__gethex+0x2ee>
 801686e:	2b03      	cmp	r3, #3
 8016870:	d028      	beq.n	80168c4 <__gethex+0x2f6>
 8016872:	2b01      	cmp	r3, #1
 8016874:	d119      	bne.n	80168aa <__gethex+0x2dc>
 8016876:	9b01      	ldr	r3, [sp, #4]
 8016878:	42b3      	cmp	r3, r6
 801687a:	d116      	bne.n	80168aa <__gethex+0x2dc>
 801687c:	2b01      	cmp	r3, #1
 801687e:	dc0d      	bgt.n	801689c <__gethex+0x2ce>
 8016880:	9b02      	ldr	r3, [sp, #8]
 8016882:	2662      	movs	r6, #98	; 0x62
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	9301      	str	r3, [sp, #4]
 8016888:	9a01      	ldr	r2, [sp, #4]
 801688a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801688c:	601a      	str	r2, [r3, #0]
 801688e:	2301      	movs	r3, #1
 8016890:	9a03      	ldr	r2, [sp, #12]
 8016892:	612b      	str	r3, [r5, #16]
 8016894:	6013      	str	r3, [r2, #0]
 8016896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016898:	601d      	str	r5, [r3, #0]
 801689a:	e72c      	b.n	80166f6 <__gethex+0x128>
 801689c:	9901      	ldr	r1, [sp, #4]
 801689e:	0028      	movs	r0, r5
 80168a0:	3901      	subs	r1, #1
 80168a2:	f000 fd50 	bl	8017346 <__any_on>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d1ea      	bne.n	8016880 <__gethex+0x2b2>
 80168aa:	0029      	movs	r1, r5
 80168ac:	9805      	ldr	r0, [sp, #20]
 80168ae:	f000 f9cd 	bl	8016c4c <_Bfree>
 80168b2:	2300      	movs	r3, #0
 80168b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168b6:	2650      	movs	r6, #80	; 0x50
 80168b8:	6013      	str	r3, [r2, #0]
 80168ba:	e71c      	b.n	80166f6 <__gethex+0x128>
 80168bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d0de      	beq.n	8016880 <__gethex+0x2b2>
 80168c2:	e7f2      	b.n	80168aa <__gethex+0x2dc>
 80168c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d1da      	bne.n	8016880 <__gethex+0x2b2>
 80168ca:	e7ee      	b.n	80168aa <__gethex+0x2dc>
 80168cc:	1e77      	subs	r7, r6, #1
 80168ce:	2c00      	cmp	r4, #0
 80168d0:	d12f      	bne.n	8016932 <__gethex+0x364>
 80168d2:	2f00      	cmp	r7, #0
 80168d4:	d004      	beq.n	80168e0 <__gethex+0x312>
 80168d6:	0039      	movs	r1, r7
 80168d8:	0028      	movs	r0, r5
 80168da:	f000 fd34 	bl	8017346 <__any_on>
 80168de:	0004      	movs	r4, r0
 80168e0:	231f      	movs	r3, #31
 80168e2:	117a      	asrs	r2, r7, #5
 80168e4:	401f      	ands	r7, r3
 80168e6:	3b1e      	subs	r3, #30
 80168e8:	40bb      	lsls	r3, r7
 80168ea:	9903      	ldr	r1, [sp, #12]
 80168ec:	0092      	lsls	r2, r2, #2
 80168ee:	5852      	ldr	r2, [r2, r1]
 80168f0:	421a      	tst	r2, r3
 80168f2:	d001      	beq.n	80168f8 <__gethex+0x32a>
 80168f4:	2302      	movs	r3, #2
 80168f6:	431c      	orrs	r4, r3
 80168f8:	9b01      	ldr	r3, [sp, #4]
 80168fa:	0031      	movs	r1, r6
 80168fc:	1b9b      	subs	r3, r3, r6
 80168fe:	2602      	movs	r6, #2
 8016900:	0028      	movs	r0, r5
 8016902:	9301      	str	r3, [sp, #4]
 8016904:	f7ff fe1a 	bl	801653c <rshift>
 8016908:	9b02      	ldr	r3, [sp, #8]
 801690a:	685f      	ldr	r7, [r3, #4]
 801690c:	2c00      	cmp	r4, #0
 801690e:	d040      	beq.n	8016992 <__gethex+0x3c4>
 8016910:	9b02      	ldr	r3, [sp, #8]
 8016912:	68db      	ldr	r3, [r3, #12]
 8016914:	2b02      	cmp	r3, #2
 8016916:	d010      	beq.n	801693a <__gethex+0x36c>
 8016918:	2b03      	cmp	r3, #3
 801691a:	d012      	beq.n	8016942 <__gethex+0x374>
 801691c:	2b01      	cmp	r3, #1
 801691e:	d106      	bne.n	801692e <__gethex+0x360>
 8016920:	07a2      	lsls	r2, r4, #30
 8016922:	d504      	bpl.n	801692e <__gethex+0x360>
 8016924:	9a03      	ldr	r2, [sp, #12]
 8016926:	6812      	ldr	r2, [r2, #0]
 8016928:	4314      	orrs	r4, r2
 801692a:	421c      	tst	r4, r3
 801692c:	d10c      	bne.n	8016948 <__gethex+0x37a>
 801692e:	2310      	movs	r3, #16
 8016930:	e02e      	b.n	8016990 <__gethex+0x3c2>
 8016932:	2401      	movs	r4, #1
 8016934:	e7d4      	b.n	80168e0 <__gethex+0x312>
 8016936:	2601      	movs	r6, #1
 8016938:	e7e8      	b.n	801690c <__gethex+0x33e>
 801693a:	2301      	movs	r3, #1
 801693c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801693e:	1a9b      	subs	r3, r3, r2
 8016940:	9313      	str	r3, [sp, #76]	; 0x4c
 8016942:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016944:	2b00      	cmp	r3, #0
 8016946:	d0f2      	beq.n	801692e <__gethex+0x360>
 8016948:	692c      	ldr	r4, [r5, #16]
 801694a:	00a3      	lsls	r3, r4, #2
 801694c:	9304      	str	r3, [sp, #16]
 801694e:	002b      	movs	r3, r5
 8016950:	00a2      	lsls	r2, r4, #2
 8016952:	3314      	adds	r3, #20
 8016954:	1899      	adds	r1, r3, r2
 8016956:	2200      	movs	r2, #0
 8016958:	4694      	mov	ip, r2
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	1c50      	adds	r0, r2, #1
 801695e:	d01d      	beq.n	801699c <__gethex+0x3ce>
 8016960:	3201      	adds	r2, #1
 8016962:	601a      	str	r2, [r3, #0]
 8016964:	002b      	movs	r3, r5
 8016966:	3314      	adds	r3, #20
 8016968:	2e02      	cmp	r6, #2
 801696a:	d13a      	bne.n	80169e2 <__gethex+0x414>
 801696c:	9a02      	ldr	r2, [sp, #8]
 801696e:	9901      	ldr	r1, [sp, #4]
 8016970:	6812      	ldr	r2, [r2, #0]
 8016972:	3a01      	subs	r2, #1
 8016974:	428a      	cmp	r2, r1
 8016976:	d10a      	bne.n	801698e <__gethex+0x3c0>
 8016978:	114a      	asrs	r2, r1, #5
 801697a:	211f      	movs	r1, #31
 801697c:	9801      	ldr	r0, [sp, #4]
 801697e:	0092      	lsls	r2, r2, #2
 8016980:	4001      	ands	r1, r0
 8016982:	2001      	movs	r0, #1
 8016984:	0004      	movs	r4, r0
 8016986:	408c      	lsls	r4, r1
 8016988:	58d3      	ldr	r3, [r2, r3]
 801698a:	4223      	tst	r3, r4
 801698c:	d148      	bne.n	8016a20 <__gethex+0x452>
 801698e:	2320      	movs	r3, #32
 8016990:	431e      	orrs	r6, r3
 8016992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016994:	601d      	str	r5, [r3, #0]
 8016996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016998:	601f      	str	r7, [r3, #0]
 801699a:	e6ac      	b.n	80166f6 <__gethex+0x128>
 801699c:	4662      	mov	r2, ip
 801699e:	c304      	stmia	r3!, {r2}
 80169a0:	4299      	cmp	r1, r3
 80169a2:	d8da      	bhi.n	801695a <__gethex+0x38c>
 80169a4:	68ab      	ldr	r3, [r5, #8]
 80169a6:	429c      	cmp	r4, r3
 80169a8:	db12      	blt.n	80169d0 <__gethex+0x402>
 80169aa:	686b      	ldr	r3, [r5, #4]
 80169ac:	9805      	ldr	r0, [sp, #20]
 80169ae:	1c59      	adds	r1, r3, #1
 80169b0:	f000 f924 	bl	8016bfc <_Balloc>
 80169b4:	0029      	movs	r1, r5
 80169b6:	692b      	ldr	r3, [r5, #16]
 80169b8:	9003      	str	r0, [sp, #12]
 80169ba:	1c9a      	adds	r2, r3, #2
 80169bc:	0092      	lsls	r2, r2, #2
 80169be:	310c      	adds	r1, #12
 80169c0:	300c      	adds	r0, #12
 80169c2:	f7fc fa34 	bl	8012e2e <memcpy>
 80169c6:	0029      	movs	r1, r5
 80169c8:	9805      	ldr	r0, [sp, #20]
 80169ca:	f000 f93f 	bl	8016c4c <_Bfree>
 80169ce:	9d03      	ldr	r5, [sp, #12]
 80169d0:	692b      	ldr	r3, [r5, #16]
 80169d2:	1c5a      	adds	r2, r3, #1
 80169d4:	612a      	str	r2, [r5, #16]
 80169d6:	2201      	movs	r2, #1
 80169d8:	3304      	adds	r3, #4
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	18eb      	adds	r3, r5, r3
 80169de:	605a      	str	r2, [r3, #4]
 80169e0:	e7c0      	b.n	8016964 <__gethex+0x396>
 80169e2:	692a      	ldr	r2, [r5, #16]
 80169e4:	42a2      	cmp	r2, r4
 80169e6:	dd0a      	ble.n	80169fe <__gethex+0x430>
 80169e8:	2101      	movs	r1, #1
 80169ea:	0028      	movs	r0, r5
 80169ec:	f7ff fda6 	bl	801653c <rshift>
 80169f0:	9b02      	ldr	r3, [sp, #8]
 80169f2:	3701      	adds	r7, #1
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	2601      	movs	r6, #1
 80169f8:	42bb      	cmp	r3, r7
 80169fa:	dac8      	bge.n	801698e <__gethex+0x3c0>
 80169fc:	e6dc      	b.n	80167b8 <__gethex+0x1ea>
 80169fe:	241f      	movs	r4, #31
 8016a00:	9a01      	ldr	r2, [sp, #4]
 8016a02:	2601      	movs	r6, #1
 8016a04:	4022      	ands	r2, r4
 8016a06:	1e14      	subs	r4, r2, #0
 8016a08:	d0c1      	beq.n	801698e <__gethex+0x3c0>
 8016a0a:	9a04      	ldr	r2, [sp, #16]
 8016a0c:	189b      	adds	r3, r3, r2
 8016a0e:	3b04      	subs	r3, #4
 8016a10:	6818      	ldr	r0, [r3, #0]
 8016a12:	f000 f9a1 	bl	8016d58 <__hi0bits>
 8016a16:	2120      	movs	r1, #32
 8016a18:	1b0c      	subs	r4, r1, r4
 8016a1a:	42a0      	cmp	r0, r4
 8016a1c:	dbe4      	blt.n	80169e8 <__gethex+0x41a>
 8016a1e:	e7b6      	b.n	801698e <__gethex+0x3c0>
 8016a20:	0006      	movs	r6, r0
 8016a22:	e7b4      	b.n	801698e <__gethex+0x3c0>

08016a24 <L_shift>:
 8016a24:	2308      	movs	r3, #8
 8016a26:	b570      	push	{r4, r5, r6, lr}
 8016a28:	2520      	movs	r5, #32
 8016a2a:	1a9a      	subs	r2, r3, r2
 8016a2c:	0092      	lsls	r2, r2, #2
 8016a2e:	1aad      	subs	r5, r5, r2
 8016a30:	6843      	ldr	r3, [r0, #4]
 8016a32:	6806      	ldr	r6, [r0, #0]
 8016a34:	001c      	movs	r4, r3
 8016a36:	40ac      	lsls	r4, r5
 8016a38:	40d3      	lsrs	r3, r2
 8016a3a:	4334      	orrs	r4, r6
 8016a3c:	6004      	str	r4, [r0, #0]
 8016a3e:	6043      	str	r3, [r0, #4]
 8016a40:	3004      	adds	r0, #4
 8016a42:	4288      	cmp	r0, r1
 8016a44:	d3f4      	bcc.n	8016a30 <L_shift+0xc>
 8016a46:	bd70      	pop	{r4, r5, r6, pc}

08016a48 <__match>:
 8016a48:	b530      	push	{r4, r5, lr}
 8016a4a:	6803      	ldr	r3, [r0, #0]
 8016a4c:	780c      	ldrb	r4, [r1, #0]
 8016a4e:	3301      	adds	r3, #1
 8016a50:	2c00      	cmp	r4, #0
 8016a52:	d102      	bne.n	8016a5a <__match+0x12>
 8016a54:	6003      	str	r3, [r0, #0]
 8016a56:	2001      	movs	r0, #1
 8016a58:	bd30      	pop	{r4, r5, pc}
 8016a5a:	781a      	ldrb	r2, [r3, #0]
 8016a5c:	0015      	movs	r5, r2
 8016a5e:	3d41      	subs	r5, #65	; 0x41
 8016a60:	2d19      	cmp	r5, #25
 8016a62:	d800      	bhi.n	8016a66 <__match+0x1e>
 8016a64:	3220      	adds	r2, #32
 8016a66:	3101      	adds	r1, #1
 8016a68:	42a2      	cmp	r2, r4
 8016a6a:	d0ef      	beq.n	8016a4c <__match+0x4>
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	e7f3      	b.n	8016a58 <__match+0x10>

08016a70 <__hexnan>:
 8016a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a72:	b08b      	sub	sp, #44	; 0x2c
 8016a74:	9201      	str	r2, [sp, #4]
 8016a76:	680a      	ldr	r2, [r1, #0]
 8016a78:	9901      	ldr	r1, [sp, #4]
 8016a7a:	1153      	asrs	r3, r2, #5
 8016a7c:	009b      	lsls	r3, r3, #2
 8016a7e:	18cb      	adds	r3, r1, r3
 8016a80:	9304      	str	r3, [sp, #16]
 8016a82:	231f      	movs	r3, #31
 8016a84:	401a      	ands	r2, r3
 8016a86:	9008      	str	r0, [sp, #32]
 8016a88:	9206      	str	r2, [sp, #24]
 8016a8a:	d002      	beq.n	8016a92 <__hexnan+0x22>
 8016a8c:	9b04      	ldr	r3, [sp, #16]
 8016a8e:	3304      	adds	r3, #4
 8016a90:	9304      	str	r3, [sp, #16]
 8016a92:	9b04      	ldr	r3, [sp, #16]
 8016a94:	2500      	movs	r5, #0
 8016a96:	1f1e      	subs	r6, r3, #4
 8016a98:	0037      	movs	r7, r6
 8016a9a:	0034      	movs	r4, r6
 8016a9c:	9b08      	ldr	r3, [sp, #32]
 8016a9e:	6035      	str	r5, [r6, #0]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	9507      	str	r5, [sp, #28]
 8016aa4:	9305      	str	r3, [sp, #20]
 8016aa6:	9502      	str	r5, [sp, #8]
 8016aa8:	9b05      	ldr	r3, [sp, #20]
 8016aaa:	3301      	adds	r3, #1
 8016aac:	9309      	str	r3, [sp, #36]	; 0x24
 8016aae:	9b05      	ldr	r3, [sp, #20]
 8016ab0:	785b      	ldrb	r3, [r3, #1]
 8016ab2:	9303      	str	r3, [sp, #12]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d028      	beq.n	8016b0a <__hexnan+0x9a>
 8016ab8:	9803      	ldr	r0, [sp, #12]
 8016aba:	f7ff fd73 	bl	80165a4 <__hexdig_fun>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d145      	bne.n	8016b4e <__hexnan+0xde>
 8016ac2:	9b03      	ldr	r3, [sp, #12]
 8016ac4:	2b20      	cmp	r3, #32
 8016ac6:	d819      	bhi.n	8016afc <__hexnan+0x8c>
 8016ac8:	9b02      	ldr	r3, [sp, #8]
 8016aca:	9a07      	ldr	r2, [sp, #28]
 8016acc:	4293      	cmp	r3, r2
 8016ace:	dd12      	ble.n	8016af6 <__hexnan+0x86>
 8016ad0:	42bc      	cmp	r4, r7
 8016ad2:	d206      	bcs.n	8016ae2 <__hexnan+0x72>
 8016ad4:	2d07      	cmp	r5, #7
 8016ad6:	dc04      	bgt.n	8016ae2 <__hexnan+0x72>
 8016ad8:	002a      	movs	r2, r5
 8016ada:	0039      	movs	r1, r7
 8016adc:	0020      	movs	r0, r4
 8016ade:	f7ff ffa1 	bl	8016a24 <L_shift>
 8016ae2:	9b01      	ldr	r3, [sp, #4]
 8016ae4:	2508      	movs	r5, #8
 8016ae6:	429c      	cmp	r4, r3
 8016ae8:	d905      	bls.n	8016af6 <__hexnan+0x86>
 8016aea:	1f27      	subs	r7, r4, #4
 8016aec:	2500      	movs	r5, #0
 8016aee:	003c      	movs	r4, r7
 8016af0:	9b02      	ldr	r3, [sp, #8]
 8016af2:	603d      	str	r5, [r7, #0]
 8016af4:	9307      	str	r3, [sp, #28]
 8016af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016af8:	9305      	str	r3, [sp, #20]
 8016afa:	e7d5      	b.n	8016aa8 <__hexnan+0x38>
 8016afc:	9b03      	ldr	r3, [sp, #12]
 8016afe:	2b29      	cmp	r3, #41	; 0x29
 8016b00:	d14a      	bne.n	8016b98 <__hexnan+0x128>
 8016b02:	9b05      	ldr	r3, [sp, #20]
 8016b04:	9a08      	ldr	r2, [sp, #32]
 8016b06:	3302      	adds	r3, #2
 8016b08:	6013      	str	r3, [r2, #0]
 8016b0a:	9b02      	ldr	r3, [sp, #8]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d043      	beq.n	8016b98 <__hexnan+0x128>
 8016b10:	42bc      	cmp	r4, r7
 8016b12:	d206      	bcs.n	8016b22 <__hexnan+0xb2>
 8016b14:	2d07      	cmp	r5, #7
 8016b16:	dc04      	bgt.n	8016b22 <__hexnan+0xb2>
 8016b18:	002a      	movs	r2, r5
 8016b1a:	0039      	movs	r1, r7
 8016b1c:	0020      	movs	r0, r4
 8016b1e:	f7ff ff81 	bl	8016a24 <L_shift>
 8016b22:	9b01      	ldr	r3, [sp, #4]
 8016b24:	429c      	cmp	r4, r3
 8016b26:	d926      	bls.n	8016b76 <__hexnan+0x106>
 8016b28:	cc04      	ldmia	r4!, {r2}
 8016b2a:	601a      	str	r2, [r3, #0]
 8016b2c:	3304      	adds	r3, #4
 8016b2e:	42a6      	cmp	r6, r4
 8016b30:	d2fa      	bcs.n	8016b28 <__hexnan+0xb8>
 8016b32:	2200      	movs	r2, #0
 8016b34:	c304      	stmia	r3!, {r2}
 8016b36:	429e      	cmp	r6, r3
 8016b38:	d2fc      	bcs.n	8016b34 <__hexnan+0xc4>
 8016b3a:	6833      	ldr	r3, [r6, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d104      	bne.n	8016b4a <__hexnan+0xda>
 8016b40:	9b01      	ldr	r3, [sp, #4]
 8016b42:	429e      	cmp	r6, r3
 8016b44:	d126      	bne.n	8016b94 <__hexnan+0x124>
 8016b46:	2301      	movs	r3, #1
 8016b48:	6033      	str	r3, [r6, #0]
 8016b4a:	2005      	movs	r0, #5
 8016b4c:	e025      	b.n	8016b9a <__hexnan+0x12a>
 8016b4e:	9b02      	ldr	r3, [sp, #8]
 8016b50:	3501      	adds	r5, #1
 8016b52:	3301      	adds	r3, #1
 8016b54:	9302      	str	r3, [sp, #8]
 8016b56:	2d08      	cmp	r5, #8
 8016b58:	dd06      	ble.n	8016b68 <__hexnan+0xf8>
 8016b5a:	9b01      	ldr	r3, [sp, #4]
 8016b5c:	429c      	cmp	r4, r3
 8016b5e:	d9ca      	bls.n	8016af6 <__hexnan+0x86>
 8016b60:	2300      	movs	r3, #0
 8016b62:	2501      	movs	r5, #1
 8016b64:	3c04      	subs	r4, #4
 8016b66:	6023      	str	r3, [r4, #0]
 8016b68:	220f      	movs	r2, #15
 8016b6a:	6823      	ldr	r3, [r4, #0]
 8016b6c:	4010      	ands	r0, r2
 8016b6e:	011b      	lsls	r3, r3, #4
 8016b70:	4318      	orrs	r0, r3
 8016b72:	6020      	str	r0, [r4, #0]
 8016b74:	e7bf      	b.n	8016af6 <__hexnan+0x86>
 8016b76:	9b06      	ldr	r3, [sp, #24]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d0de      	beq.n	8016b3a <__hexnan+0xca>
 8016b7c:	2120      	movs	r1, #32
 8016b7e:	9a06      	ldr	r2, [sp, #24]
 8016b80:	9b04      	ldr	r3, [sp, #16]
 8016b82:	1a89      	subs	r1, r1, r2
 8016b84:	2201      	movs	r2, #1
 8016b86:	4252      	negs	r2, r2
 8016b88:	40ca      	lsrs	r2, r1
 8016b8a:	3b04      	subs	r3, #4
 8016b8c:	6819      	ldr	r1, [r3, #0]
 8016b8e:	400a      	ands	r2, r1
 8016b90:	601a      	str	r2, [r3, #0]
 8016b92:	e7d2      	b.n	8016b3a <__hexnan+0xca>
 8016b94:	3e04      	subs	r6, #4
 8016b96:	e7d0      	b.n	8016b3a <__hexnan+0xca>
 8016b98:	2004      	movs	r0, #4
 8016b9a:	b00b      	add	sp, #44	; 0x2c
 8016b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b9e <__localeconv_l>:
 8016b9e:	30f0      	adds	r0, #240	; 0xf0
 8016ba0:	4770      	bx	lr
	...

08016ba4 <_localeconv_r>:
 8016ba4:	4b03      	ldr	r3, [pc, #12]	; (8016bb4 <_localeconv_r+0x10>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016baa:	2800      	cmp	r0, #0
 8016bac:	d100      	bne.n	8016bb0 <_localeconv_r+0xc>
 8016bae:	4802      	ldr	r0, [pc, #8]	; (8016bb8 <_localeconv_r+0x14>)
 8016bb0:	30f0      	adds	r0, #240	; 0xf0
 8016bb2:	4770      	bx	lr
 8016bb4:	200000ac 	.word	0x200000ac
 8016bb8:	200004d8 	.word	0x200004d8

08016bbc <__retarget_lock_acquire_recursive>:
 8016bbc:	4770      	bx	lr

08016bbe <__retarget_lock_release_recursive>:
 8016bbe:	4770      	bx	lr

08016bc0 <memchr>:
 8016bc0:	b2c9      	uxtb	r1, r1
 8016bc2:	1882      	adds	r2, r0, r2
 8016bc4:	4290      	cmp	r0, r2
 8016bc6:	d101      	bne.n	8016bcc <memchr+0xc>
 8016bc8:	2000      	movs	r0, #0
 8016bca:	4770      	bx	lr
 8016bcc:	7803      	ldrb	r3, [r0, #0]
 8016bce:	428b      	cmp	r3, r1
 8016bd0:	d0fb      	beq.n	8016bca <memchr+0xa>
 8016bd2:	3001      	adds	r0, #1
 8016bd4:	e7f6      	b.n	8016bc4 <memchr+0x4>

08016bd6 <memmove>:
 8016bd6:	b510      	push	{r4, lr}
 8016bd8:	4288      	cmp	r0, r1
 8016bda:	d902      	bls.n	8016be2 <memmove+0xc>
 8016bdc:	188b      	adds	r3, r1, r2
 8016bde:	4298      	cmp	r0, r3
 8016be0:	d303      	bcc.n	8016bea <memmove+0x14>
 8016be2:	2300      	movs	r3, #0
 8016be4:	e007      	b.n	8016bf6 <memmove+0x20>
 8016be6:	5c8b      	ldrb	r3, [r1, r2]
 8016be8:	5483      	strb	r3, [r0, r2]
 8016bea:	3a01      	subs	r2, #1
 8016bec:	d2fb      	bcs.n	8016be6 <memmove+0x10>
 8016bee:	bd10      	pop	{r4, pc}
 8016bf0:	5ccc      	ldrb	r4, [r1, r3]
 8016bf2:	54c4      	strb	r4, [r0, r3]
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d1fa      	bne.n	8016bf0 <memmove+0x1a>
 8016bfa:	e7f8      	b.n	8016bee <memmove+0x18>

08016bfc <_Balloc>:
 8016bfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016bfe:	b570      	push	{r4, r5, r6, lr}
 8016c00:	0004      	movs	r4, r0
 8016c02:	000d      	movs	r5, r1
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d012      	beq.n	8016c2e <_Balloc+0x32>
 8016c08:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016c0a:	00ab      	lsls	r3, r5, #2
 8016c0c:	18d3      	adds	r3, r2, r3
 8016c0e:	6818      	ldr	r0, [r3, #0]
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d115      	bne.n	8016c40 <_Balloc+0x44>
 8016c14:	2101      	movs	r1, #1
 8016c16:	000e      	movs	r6, r1
 8016c18:	40ae      	lsls	r6, r5
 8016c1a:	1d72      	adds	r2, r6, #5
 8016c1c:	0092      	lsls	r2, r2, #2
 8016c1e:	0020      	movs	r0, r4
 8016c20:	f000 fcbe 	bl	80175a0 <_calloc_r>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d009      	beq.n	8016c3c <_Balloc+0x40>
 8016c28:	6045      	str	r5, [r0, #4]
 8016c2a:	6086      	str	r6, [r0, #8]
 8016c2c:	e00a      	b.n	8016c44 <_Balloc+0x48>
 8016c2e:	2221      	movs	r2, #33	; 0x21
 8016c30:	2104      	movs	r1, #4
 8016c32:	f000 fcb5 	bl	80175a0 <_calloc_r>
 8016c36:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d1e5      	bne.n	8016c08 <_Balloc+0xc>
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}
 8016c40:	6802      	ldr	r2, [r0, #0]
 8016c42:	601a      	str	r2, [r3, #0]
 8016c44:	2300      	movs	r3, #0
 8016c46:	6103      	str	r3, [r0, #16]
 8016c48:	60c3      	str	r3, [r0, #12]
 8016c4a:	e7f8      	b.n	8016c3e <_Balloc+0x42>

08016c4c <_Bfree>:
 8016c4c:	2900      	cmp	r1, #0
 8016c4e:	d006      	beq.n	8016c5e <_Bfree+0x12>
 8016c50:	684b      	ldr	r3, [r1, #4]
 8016c52:	009a      	lsls	r2, r3, #2
 8016c54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016c56:	189b      	adds	r3, r3, r2
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	600a      	str	r2, [r1, #0]
 8016c5c:	6019      	str	r1, [r3, #0]
 8016c5e:	4770      	bx	lr

08016c60 <__multadd>:
 8016c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c62:	001e      	movs	r6, r3
 8016c64:	2314      	movs	r3, #20
 8016c66:	469c      	mov	ip, r3
 8016c68:	0007      	movs	r7, r0
 8016c6a:	000c      	movs	r4, r1
 8016c6c:	2000      	movs	r0, #0
 8016c6e:	690d      	ldr	r5, [r1, #16]
 8016c70:	448c      	add	ip, r1
 8016c72:	4663      	mov	r3, ip
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	3001      	adds	r0, #1
 8016c78:	b299      	uxth	r1, r3
 8016c7a:	4663      	mov	r3, ip
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	4351      	muls	r1, r2
 8016c80:	0c1b      	lsrs	r3, r3, #16
 8016c82:	4353      	muls	r3, r2
 8016c84:	1989      	adds	r1, r1, r6
 8016c86:	0c0e      	lsrs	r6, r1, #16
 8016c88:	199b      	adds	r3, r3, r6
 8016c8a:	b289      	uxth	r1, r1
 8016c8c:	0c1e      	lsrs	r6, r3, #16
 8016c8e:	041b      	lsls	r3, r3, #16
 8016c90:	185b      	adds	r3, r3, r1
 8016c92:	4661      	mov	r1, ip
 8016c94:	c108      	stmia	r1!, {r3}
 8016c96:	468c      	mov	ip, r1
 8016c98:	4285      	cmp	r5, r0
 8016c9a:	dcea      	bgt.n	8016c72 <__multadd+0x12>
 8016c9c:	2e00      	cmp	r6, #0
 8016c9e:	d01b      	beq.n	8016cd8 <__multadd+0x78>
 8016ca0:	68a3      	ldr	r3, [r4, #8]
 8016ca2:	42ab      	cmp	r3, r5
 8016ca4:	dc12      	bgt.n	8016ccc <__multadd+0x6c>
 8016ca6:	6863      	ldr	r3, [r4, #4]
 8016ca8:	0038      	movs	r0, r7
 8016caa:	1c59      	adds	r1, r3, #1
 8016cac:	f7ff ffa6 	bl	8016bfc <_Balloc>
 8016cb0:	0021      	movs	r1, r4
 8016cb2:	6923      	ldr	r3, [r4, #16]
 8016cb4:	9001      	str	r0, [sp, #4]
 8016cb6:	1c9a      	adds	r2, r3, #2
 8016cb8:	0092      	lsls	r2, r2, #2
 8016cba:	310c      	adds	r1, #12
 8016cbc:	300c      	adds	r0, #12
 8016cbe:	f7fc f8b6 	bl	8012e2e <memcpy>
 8016cc2:	0021      	movs	r1, r4
 8016cc4:	0038      	movs	r0, r7
 8016cc6:	f7ff ffc1 	bl	8016c4c <_Bfree>
 8016cca:	9c01      	ldr	r4, [sp, #4]
 8016ccc:	1d2b      	adds	r3, r5, #4
 8016cce:	009b      	lsls	r3, r3, #2
 8016cd0:	18e3      	adds	r3, r4, r3
 8016cd2:	3501      	adds	r5, #1
 8016cd4:	605e      	str	r6, [r3, #4]
 8016cd6:	6125      	str	r5, [r4, #16]
 8016cd8:	0020      	movs	r0, r4
 8016cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016cdc <__s2b>:
 8016cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cde:	0006      	movs	r6, r0
 8016ce0:	0018      	movs	r0, r3
 8016ce2:	000c      	movs	r4, r1
 8016ce4:	3008      	adds	r0, #8
 8016ce6:	2109      	movs	r1, #9
 8016ce8:	9301      	str	r3, [sp, #4]
 8016cea:	0015      	movs	r5, r2
 8016cec:	f7e9 faba 	bl	8000264 <__divsi3>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	2100      	movs	r1, #0
 8016cf4:	4283      	cmp	r3, r0
 8016cf6:	db1f      	blt.n	8016d38 <__s2b+0x5c>
 8016cf8:	0030      	movs	r0, r6
 8016cfa:	f7ff ff7f 	bl	8016bfc <_Balloc>
 8016cfe:	9b08      	ldr	r3, [sp, #32]
 8016d00:	6143      	str	r3, [r0, #20]
 8016d02:	2301      	movs	r3, #1
 8016d04:	6103      	str	r3, [r0, #16]
 8016d06:	2d09      	cmp	r5, #9
 8016d08:	dd19      	ble.n	8016d3e <__s2b+0x62>
 8016d0a:	0023      	movs	r3, r4
 8016d0c:	3309      	adds	r3, #9
 8016d0e:	001f      	movs	r7, r3
 8016d10:	9300      	str	r3, [sp, #0]
 8016d12:	1964      	adds	r4, r4, r5
 8016d14:	783b      	ldrb	r3, [r7, #0]
 8016d16:	0001      	movs	r1, r0
 8016d18:	3b30      	subs	r3, #48	; 0x30
 8016d1a:	220a      	movs	r2, #10
 8016d1c:	0030      	movs	r0, r6
 8016d1e:	3701      	adds	r7, #1
 8016d20:	f7ff ff9e 	bl	8016c60 <__multadd>
 8016d24:	42a7      	cmp	r7, r4
 8016d26:	d1f5      	bne.n	8016d14 <__s2b+0x38>
 8016d28:	9b00      	ldr	r3, [sp, #0]
 8016d2a:	195c      	adds	r4, r3, r5
 8016d2c:	3c08      	subs	r4, #8
 8016d2e:	002f      	movs	r7, r5
 8016d30:	9b01      	ldr	r3, [sp, #4]
 8016d32:	429f      	cmp	r7, r3
 8016d34:	db06      	blt.n	8016d44 <__s2b+0x68>
 8016d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016d38:	005b      	lsls	r3, r3, #1
 8016d3a:	3101      	adds	r1, #1
 8016d3c:	e7da      	b.n	8016cf4 <__s2b+0x18>
 8016d3e:	340a      	adds	r4, #10
 8016d40:	2509      	movs	r5, #9
 8016d42:	e7f4      	b.n	8016d2e <__s2b+0x52>
 8016d44:	1b63      	subs	r3, r4, r5
 8016d46:	5ddb      	ldrb	r3, [r3, r7]
 8016d48:	0001      	movs	r1, r0
 8016d4a:	3b30      	subs	r3, #48	; 0x30
 8016d4c:	220a      	movs	r2, #10
 8016d4e:	0030      	movs	r0, r6
 8016d50:	f7ff ff86 	bl	8016c60 <__multadd>
 8016d54:	3701      	adds	r7, #1
 8016d56:	e7eb      	b.n	8016d30 <__s2b+0x54>

08016d58 <__hi0bits>:
 8016d58:	0003      	movs	r3, r0
 8016d5a:	0c02      	lsrs	r2, r0, #16
 8016d5c:	2000      	movs	r0, #0
 8016d5e:	4282      	cmp	r2, r0
 8016d60:	d101      	bne.n	8016d66 <__hi0bits+0xe>
 8016d62:	041b      	lsls	r3, r3, #16
 8016d64:	3010      	adds	r0, #16
 8016d66:	0e1a      	lsrs	r2, r3, #24
 8016d68:	d101      	bne.n	8016d6e <__hi0bits+0x16>
 8016d6a:	3008      	adds	r0, #8
 8016d6c:	021b      	lsls	r3, r3, #8
 8016d6e:	0f1a      	lsrs	r2, r3, #28
 8016d70:	d101      	bne.n	8016d76 <__hi0bits+0x1e>
 8016d72:	3004      	adds	r0, #4
 8016d74:	011b      	lsls	r3, r3, #4
 8016d76:	0f9a      	lsrs	r2, r3, #30
 8016d78:	d101      	bne.n	8016d7e <__hi0bits+0x26>
 8016d7a:	3002      	adds	r0, #2
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	db03      	blt.n	8016d8a <__hi0bits+0x32>
 8016d82:	3001      	adds	r0, #1
 8016d84:	005b      	lsls	r3, r3, #1
 8016d86:	d400      	bmi.n	8016d8a <__hi0bits+0x32>
 8016d88:	2020      	movs	r0, #32
 8016d8a:	4770      	bx	lr

08016d8c <__lo0bits>:
 8016d8c:	2207      	movs	r2, #7
 8016d8e:	6803      	ldr	r3, [r0, #0]
 8016d90:	b510      	push	{r4, lr}
 8016d92:	0001      	movs	r1, r0
 8016d94:	401a      	ands	r2, r3
 8016d96:	d00d      	beq.n	8016db4 <__lo0bits+0x28>
 8016d98:	2401      	movs	r4, #1
 8016d9a:	2000      	movs	r0, #0
 8016d9c:	4223      	tst	r3, r4
 8016d9e:	d105      	bne.n	8016dac <__lo0bits+0x20>
 8016da0:	3002      	adds	r0, #2
 8016da2:	4203      	tst	r3, r0
 8016da4:	d003      	beq.n	8016dae <__lo0bits+0x22>
 8016da6:	40e3      	lsrs	r3, r4
 8016da8:	0020      	movs	r0, r4
 8016daa:	600b      	str	r3, [r1, #0]
 8016dac:	bd10      	pop	{r4, pc}
 8016dae:	089b      	lsrs	r3, r3, #2
 8016db0:	600b      	str	r3, [r1, #0]
 8016db2:	e7fb      	b.n	8016dac <__lo0bits+0x20>
 8016db4:	b29c      	uxth	r4, r3
 8016db6:	0010      	movs	r0, r2
 8016db8:	2c00      	cmp	r4, #0
 8016dba:	d101      	bne.n	8016dc0 <__lo0bits+0x34>
 8016dbc:	2010      	movs	r0, #16
 8016dbe:	0c1b      	lsrs	r3, r3, #16
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	2a00      	cmp	r2, #0
 8016dc4:	d101      	bne.n	8016dca <__lo0bits+0x3e>
 8016dc6:	3008      	adds	r0, #8
 8016dc8:	0a1b      	lsrs	r3, r3, #8
 8016dca:	071a      	lsls	r2, r3, #28
 8016dcc:	d101      	bne.n	8016dd2 <__lo0bits+0x46>
 8016dce:	3004      	adds	r0, #4
 8016dd0:	091b      	lsrs	r3, r3, #4
 8016dd2:	079a      	lsls	r2, r3, #30
 8016dd4:	d101      	bne.n	8016dda <__lo0bits+0x4e>
 8016dd6:	3002      	adds	r0, #2
 8016dd8:	089b      	lsrs	r3, r3, #2
 8016dda:	07da      	lsls	r2, r3, #31
 8016ddc:	d4e8      	bmi.n	8016db0 <__lo0bits+0x24>
 8016dde:	085b      	lsrs	r3, r3, #1
 8016de0:	d001      	beq.n	8016de6 <__lo0bits+0x5a>
 8016de2:	3001      	adds	r0, #1
 8016de4:	e7e4      	b.n	8016db0 <__lo0bits+0x24>
 8016de6:	2020      	movs	r0, #32
 8016de8:	e7e0      	b.n	8016dac <__lo0bits+0x20>

08016dea <__i2b>:
 8016dea:	b510      	push	{r4, lr}
 8016dec:	000c      	movs	r4, r1
 8016dee:	2101      	movs	r1, #1
 8016df0:	f7ff ff04 	bl	8016bfc <_Balloc>
 8016df4:	2301      	movs	r3, #1
 8016df6:	6144      	str	r4, [r0, #20]
 8016df8:	6103      	str	r3, [r0, #16]
 8016dfa:	bd10      	pop	{r4, pc}

08016dfc <__multiply>:
 8016dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dfe:	690b      	ldr	r3, [r1, #16]
 8016e00:	0014      	movs	r4, r2
 8016e02:	6912      	ldr	r2, [r2, #16]
 8016e04:	b089      	sub	sp, #36	; 0x24
 8016e06:	000d      	movs	r5, r1
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	da01      	bge.n	8016e10 <__multiply+0x14>
 8016e0c:	0025      	movs	r5, r4
 8016e0e:	000c      	movs	r4, r1
 8016e10:	692f      	ldr	r7, [r5, #16]
 8016e12:	6926      	ldr	r6, [r4, #16]
 8016e14:	6869      	ldr	r1, [r5, #4]
 8016e16:	19bb      	adds	r3, r7, r6
 8016e18:	9302      	str	r3, [sp, #8]
 8016e1a:	68ab      	ldr	r3, [r5, #8]
 8016e1c:	19ba      	adds	r2, r7, r6
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	da00      	bge.n	8016e24 <__multiply+0x28>
 8016e22:	3101      	adds	r1, #1
 8016e24:	f7ff feea 	bl	8016bfc <_Balloc>
 8016e28:	0002      	movs	r2, r0
 8016e2a:	19bb      	adds	r3, r7, r6
 8016e2c:	3214      	adds	r2, #20
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	18d3      	adds	r3, r2, r3
 8016e32:	469c      	mov	ip, r3
 8016e34:	2100      	movs	r1, #0
 8016e36:	0013      	movs	r3, r2
 8016e38:	9004      	str	r0, [sp, #16]
 8016e3a:	4563      	cmp	r3, ip
 8016e3c:	d31d      	bcc.n	8016e7a <__multiply+0x7e>
 8016e3e:	3514      	adds	r5, #20
 8016e40:	00bf      	lsls	r7, r7, #2
 8016e42:	19eb      	adds	r3, r5, r7
 8016e44:	3414      	adds	r4, #20
 8016e46:	00b6      	lsls	r6, r6, #2
 8016e48:	9305      	str	r3, [sp, #20]
 8016e4a:	19a3      	adds	r3, r4, r6
 8016e4c:	9503      	str	r5, [sp, #12]
 8016e4e:	9401      	str	r4, [sp, #4]
 8016e50:	9307      	str	r3, [sp, #28]
 8016e52:	9b07      	ldr	r3, [sp, #28]
 8016e54:	9901      	ldr	r1, [sp, #4]
 8016e56:	4299      	cmp	r1, r3
 8016e58:	d311      	bcc.n	8016e7e <__multiply+0x82>
 8016e5a:	9b02      	ldr	r3, [sp, #8]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dd06      	ble.n	8016e6e <__multiply+0x72>
 8016e60:	2304      	movs	r3, #4
 8016e62:	425b      	negs	r3, r3
 8016e64:	449c      	add	ip, r3
 8016e66:	4663      	mov	r3, ip
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d051      	beq.n	8016f12 <__multiply+0x116>
 8016e6e:	9b04      	ldr	r3, [sp, #16]
 8016e70:	9a02      	ldr	r2, [sp, #8]
 8016e72:	0018      	movs	r0, r3
 8016e74:	611a      	str	r2, [r3, #16]
 8016e76:	b009      	add	sp, #36	; 0x24
 8016e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e7a:	c302      	stmia	r3!, {r1}
 8016e7c:	e7dd      	b.n	8016e3a <__multiply+0x3e>
 8016e7e:	9b01      	ldr	r3, [sp, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	b298      	uxth	r0, r3
 8016e84:	2800      	cmp	r0, #0
 8016e86:	d01c      	beq.n	8016ec2 <__multiply+0xc6>
 8016e88:	0015      	movs	r5, r2
 8016e8a:	2600      	movs	r6, #0
 8016e8c:	9f03      	ldr	r7, [sp, #12]
 8016e8e:	cf02      	ldmia	r7!, {r1}
 8016e90:	682c      	ldr	r4, [r5, #0]
 8016e92:	b28b      	uxth	r3, r1
 8016e94:	4343      	muls	r3, r0
 8016e96:	0c09      	lsrs	r1, r1, #16
 8016e98:	4341      	muls	r1, r0
 8016e9a:	b2a4      	uxth	r4, r4
 8016e9c:	191b      	adds	r3, r3, r4
 8016e9e:	199b      	adds	r3, r3, r6
 8016ea0:	000e      	movs	r6, r1
 8016ea2:	6829      	ldr	r1, [r5, #0]
 8016ea4:	9506      	str	r5, [sp, #24]
 8016ea6:	0c09      	lsrs	r1, r1, #16
 8016ea8:	1871      	adds	r1, r6, r1
 8016eaa:	0c1e      	lsrs	r6, r3, #16
 8016eac:	1989      	adds	r1, r1, r6
 8016eae:	0c0e      	lsrs	r6, r1, #16
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	0409      	lsls	r1, r1, #16
 8016eb4:	430b      	orrs	r3, r1
 8016eb6:	c508      	stmia	r5!, {r3}
 8016eb8:	9b05      	ldr	r3, [sp, #20]
 8016eba:	42bb      	cmp	r3, r7
 8016ebc:	d8e7      	bhi.n	8016e8e <__multiply+0x92>
 8016ebe:	9b06      	ldr	r3, [sp, #24]
 8016ec0:	605e      	str	r6, [r3, #4]
 8016ec2:	9b01      	ldr	r3, [sp, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	0c1d      	lsrs	r5, r3, #16
 8016ec8:	d01e      	beq.n	8016f08 <__multiply+0x10c>
 8016eca:	0010      	movs	r0, r2
 8016ecc:	2700      	movs	r7, #0
 8016ece:	6813      	ldr	r3, [r2, #0]
 8016ed0:	9e03      	ldr	r6, [sp, #12]
 8016ed2:	6831      	ldr	r1, [r6, #0]
 8016ed4:	6804      	ldr	r4, [r0, #0]
 8016ed6:	b289      	uxth	r1, r1
 8016ed8:	4369      	muls	r1, r5
 8016eda:	0c24      	lsrs	r4, r4, #16
 8016edc:	1909      	adds	r1, r1, r4
 8016ede:	19c9      	adds	r1, r1, r7
 8016ee0:	040f      	lsls	r7, r1, #16
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	433b      	orrs	r3, r7
 8016ee6:	6003      	str	r3, [r0, #0]
 8016ee8:	ce80      	ldmia	r6!, {r7}
 8016eea:	6843      	ldr	r3, [r0, #4]
 8016eec:	0c3f      	lsrs	r7, r7, #16
 8016eee:	436f      	muls	r7, r5
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	18fb      	adds	r3, r7, r3
 8016ef4:	0c09      	lsrs	r1, r1, #16
 8016ef6:	185b      	adds	r3, r3, r1
 8016ef8:	9905      	ldr	r1, [sp, #20]
 8016efa:	9006      	str	r0, [sp, #24]
 8016efc:	0c1f      	lsrs	r7, r3, #16
 8016efe:	3004      	adds	r0, #4
 8016f00:	42b1      	cmp	r1, r6
 8016f02:	d8e6      	bhi.n	8016ed2 <__multiply+0xd6>
 8016f04:	9906      	ldr	r1, [sp, #24]
 8016f06:	604b      	str	r3, [r1, #4]
 8016f08:	9b01      	ldr	r3, [sp, #4]
 8016f0a:	3204      	adds	r2, #4
 8016f0c:	3304      	adds	r3, #4
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	e79f      	b.n	8016e52 <__multiply+0x56>
 8016f12:	9b02      	ldr	r3, [sp, #8]
 8016f14:	3b01      	subs	r3, #1
 8016f16:	9302      	str	r3, [sp, #8]
 8016f18:	e79f      	b.n	8016e5a <__multiply+0x5e>
	...

08016f1c <__pow5mult>:
 8016f1c:	2303      	movs	r3, #3
 8016f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f20:	4013      	ands	r3, r2
 8016f22:	0006      	movs	r6, r0
 8016f24:	000f      	movs	r7, r1
 8016f26:	0015      	movs	r5, r2
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d008      	beq.n	8016f3e <__pow5mult+0x22>
 8016f2c:	491a      	ldr	r1, [pc, #104]	; (8016f98 <__pow5mult+0x7c>)
 8016f2e:	3b01      	subs	r3, #1
 8016f30:	009a      	lsls	r2, r3, #2
 8016f32:	5852      	ldr	r2, [r2, r1]
 8016f34:	2300      	movs	r3, #0
 8016f36:	0039      	movs	r1, r7
 8016f38:	f7ff fe92 	bl	8016c60 <__multadd>
 8016f3c:	0007      	movs	r7, r0
 8016f3e:	10ad      	asrs	r5, r5, #2
 8016f40:	d027      	beq.n	8016f92 <__pow5mult+0x76>
 8016f42:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016f44:	2c00      	cmp	r4, #0
 8016f46:	d107      	bne.n	8016f58 <__pow5mult+0x3c>
 8016f48:	4914      	ldr	r1, [pc, #80]	; (8016f9c <__pow5mult+0x80>)
 8016f4a:	0030      	movs	r0, r6
 8016f4c:	f7ff ff4d 	bl	8016dea <__i2b>
 8016f50:	2300      	movs	r3, #0
 8016f52:	0004      	movs	r4, r0
 8016f54:	64b0      	str	r0, [r6, #72]	; 0x48
 8016f56:	6003      	str	r3, [r0, #0]
 8016f58:	2301      	movs	r3, #1
 8016f5a:	421d      	tst	r5, r3
 8016f5c:	d00a      	beq.n	8016f74 <__pow5mult+0x58>
 8016f5e:	0039      	movs	r1, r7
 8016f60:	0022      	movs	r2, r4
 8016f62:	0030      	movs	r0, r6
 8016f64:	f7ff ff4a 	bl	8016dfc <__multiply>
 8016f68:	0039      	movs	r1, r7
 8016f6a:	9001      	str	r0, [sp, #4]
 8016f6c:	0030      	movs	r0, r6
 8016f6e:	f7ff fe6d 	bl	8016c4c <_Bfree>
 8016f72:	9f01      	ldr	r7, [sp, #4]
 8016f74:	106d      	asrs	r5, r5, #1
 8016f76:	d00c      	beq.n	8016f92 <__pow5mult+0x76>
 8016f78:	6820      	ldr	r0, [r4, #0]
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	d107      	bne.n	8016f8e <__pow5mult+0x72>
 8016f7e:	0022      	movs	r2, r4
 8016f80:	0021      	movs	r1, r4
 8016f82:	0030      	movs	r0, r6
 8016f84:	f7ff ff3a 	bl	8016dfc <__multiply>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	6020      	str	r0, [r4, #0]
 8016f8c:	6003      	str	r3, [r0, #0]
 8016f8e:	0004      	movs	r4, r0
 8016f90:	e7e2      	b.n	8016f58 <__pow5mult+0x3c>
 8016f92:	0038      	movs	r0, r7
 8016f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f96:	46c0      	nop			; (mov r8, r8)
 8016f98:	0801a810 	.word	0x0801a810
 8016f9c:	00000271 	.word	0x00000271

08016fa0 <__lshift>:
 8016fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fa2:	000d      	movs	r5, r1
 8016fa4:	0017      	movs	r7, r2
 8016fa6:	692b      	ldr	r3, [r5, #16]
 8016fa8:	1154      	asrs	r4, r2, #5
 8016faa:	b085      	sub	sp, #20
 8016fac:	18e3      	adds	r3, r4, r3
 8016fae:	9301      	str	r3, [sp, #4]
 8016fb0:	3301      	adds	r3, #1
 8016fb2:	9300      	str	r3, [sp, #0]
 8016fb4:	6849      	ldr	r1, [r1, #4]
 8016fb6:	68ab      	ldr	r3, [r5, #8]
 8016fb8:	9002      	str	r0, [sp, #8]
 8016fba:	9a00      	ldr	r2, [sp, #0]
 8016fbc:	4293      	cmp	r3, r2
 8016fbe:	db35      	blt.n	801702c <__lshift+0x8c>
 8016fc0:	9802      	ldr	r0, [sp, #8]
 8016fc2:	f7ff fe1b 	bl	8016bfc <_Balloc>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	0002      	movs	r2, r0
 8016fca:	0006      	movs	r6, r0
 8016fcc:	0019      	movs	r1, r3
 8016fce:	3214      	adds	r2, #20
 8016fd0:	42a3      	cmp	r3, r4
 8016fd2:	db2e      	blt.n	8017032 <__lshift+0x92>
 8016fd4:	43e3      	mvns	r3, r4
 8016fd6:	17db      	asrs	r3, r3, #31
 8016fd8:	401c      	ands	r4, r3
 8016fda:	002b      	movs	r3, r5
 8016fdc:	00a4      	lsls	r4, r4, #2
 8016fde:	1914      	adds	r4, r2, r4
 8016fe0:	692a      	ldr	r2, [r5, #16]
 8016fe2:	3314      	adds	r3, #20
 8016fe4:	0092      	lsls	r2, r2, #2
 8016fe6:	189a      	adds	r2, r3, r2
 8016fe8:	4694      	mov	ip, r2
 8016fea:	221f      	movs	r2, #31
 8016fec:	4017      	ands	r7, r2
 8016fee:	d024      	beq.n	801703a <__lshift+0x9a>
 8016ff0:	3201      	adds	r2, #1
 8016ff2:	1bd2      	subs	r2, r2, r7
 8016ff4:	9203      	str	r2, [sp, #12]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	6819      	ldr	r1, [r3, #0]
 8016ffa:	0020      	movs	r0, r4
 8016ffc:	40b9      	lsls	r1, r7
 8016ffe:	430a      	orrs	r2, r1
 8017000:	c404      	stmia	r4!, {r2}
 8017002:	cb04      	ldmia	r3!, {r2}
 8017004:	9903      	ldr	r1, [sp, #12]
 8017006:	40ca      	lsrs	r2, r1
 8017008:	459c      	cmp	ip, r3
 801700a:	d8f5      	bhi.n	8016ff8 <__lshift+0x58>
 801700c:	6042      	str	r2, [r0, #4]
 801700e:	2a00      	cmp	r2, #0
 8017010:	d002      	beq.n	8017018 <__lshift+0x78>
 8017012:	9b01      	ldr	r3, [sp, #4]
 8017014:	3302      	adds	r3, #2
 8017016:	9300      	str	r3, [sp, #0]
 8017018:	9b00      	ldr	r3, [sp, #0]
 801701a:	9802      	ldr	r0, [sp, #8]
 801701c:	3b01      	subs	r3, #1
 801701e:	6133      	str	r3, [r6, #16]
 8017020:	0029      	movs	r1, r5
 8017022:	f7ff fe13 	bl	8016c4c <_Bfree>
 8017026:	0030      	movs	r0, r6
 8017028:	b005      	add	sp, #20
 801702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801702c:	3101      	adds	r1, #1
 801702e:	005b      	lsls	r3, r3, #1
 8017030:	e7c3      	b.n	8016fba <__lshift+0x1a>
 8017032:	0098      	lsls	r0, r3, #2
 8017034:	5011      	str	r1, [r2, r0]
 8017036:	3301      	adds	r3, #1
 8017038:	e7ca      	b.n	8016fd0 <__lshift+0x30>
 801703a:	cb04      	ldmia	r3!, {r2}
 801703c:	c404      	stmia	r4!, {r2}
 801703e:	459c      	cmp	ip, r3
 8017040:	d8fb      	bhi.n	801703a <__lshift+0x9a>
 8017042:	e7e9      	b.n	8017018 <__lshift+0x78>

08017044 <__mcmp>:
 8017044:	690a      	ldr	r2, [r1, #16]
 8017046:	6903      	ldr	r3, [r0, #16]
 8017048:	b530      	push	{r4, r5, lr}
 801704a:	1a9b      	subs	r3, r3, r2
 801704c:	d10d      	bne.n	801706a <__mcmp+0x26>
 801704e:	0092      	lsls	r2, r2, #2
 8017050:	3014      	adds	r0, #20
 8017052:	3114      	adds	r1, #20
 8017054:	1884      	adds	r4, r0, r2
 8017056:	1889      	adds	r1, r1, r2
 8017058:	3c04      	subs	r4, #4
 801705a:	3904      	subs	r1, #4
 801705c:	6825      	ldr	r5, [r4, #0]
 801705e:	680a      	ldr	r2, [r1, #0]
 8017060:	4295      	cmp	r5, r2
 8017062:	d004      	beq.n	801706e <__mcmp+0x2a>
 8017064:	2301      	movs	r3, #1
 8017066:	4295      	cmp	r5, r2
 8017068:	d304      	bcc.n	8017074 <__mcmp+0x30>
 801706a:	0018      	movs	r0, r3
 801706c:	bd30      	pop	{r4, r5, pc}
 801706e:	42a0      	cmp	r0, r4
 8017070:	d3f2      	bcc.n	8017058 <__mcmp+0x14>
 8017072:	e7fa      	b.n	801706a <__mcmp+0x26>
 8017074:	425b      	negs	r3, r3
 8017076:	e7f8      	b.n	801706a <__mcmp+0x26>

08017078 <__mdiff>:
 8017078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801707a:	000d      	movs	r5, r1
 801707c:	b085      	sub	sp, #20
 801707e:	0007      	movs	r7, r0
 8017080:	0011      	movs	r1, r2
 8017082:	0028      	movs	r0, r5
 8017084:	0014      	movs	r4, r2
 8017086:	f7ff ffdd 	bl	8017044 <__mcmp>
 801708a:	1e06      	subs	r6, r0, #0
 801708c:	d108      	bne.n	80170a0 <__mdiff+0x28>
 801708e:	0001      	movs	r1, r0
 8017090:	0038      	movs	r0, r7
 8017092:	f7ff fdb3 	bl	8016bfc <_Balloc>
 8017096:	2301      	movs	r3, #1
 8017098:	6146      	str	r6, [r0, #20]
 801709a:	6103      	str	r3, [r0, #16]
 801709c:	b005      	add	sp, #20
 801709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a0:	2301      	movs	r3, #1
 80170a2:	9301      	str	r3, [sp, #4]
 80170a4:	2800      	cmp	r0, #0
 80170a6:	db04      	blt.n	80170b2 <__mdiff+0x3a>
 80170a8:	0023      	movs	r3, r4
 80170aa:	002c      	movs	r4, r5
 80170ac:	001d      	movs	r5, r3
 80170ae:	2300      	movs	r3, #0
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	6861      	ldr	r1, [r4, #4]
 80170b4:	0038      	movs	r0, r7
 80170b6:	f7ff fda1 	bl	8016bfc <_Balloc>
 80170ba:	002f      	movs	r7, r5
 80170bc:	2200      	movs	r2, #0
 80170be:	9b01      	ldr	r3, [sp, #4]
 80170c0:	6926      	ldr	r6, [r4, #16]
 80170c2:	60c3      	str	r3, [r0, #12]
 80170c4:	3414      	adds	r4, #20
 80170c6:	00b3      	lsls	r3, r6, #2
 80170c8:	18e3      	adds	r3, r4, r3
 80170ca:	9302      	str	r3, [sp, #8]
 80170cc:	692b      	ldr	r3, [r5, #16]
 80170ce:	3714      	adds	r7, #20
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	18fb      	adds	r3, r7, r3
 80170d4:	9303      	str	r3, [sp, #12]
 80170d6:	0003      	movs	r3, r0
 80170d8:	4694      	mov	ip, r2
 80170da:	3314      	adds	r3, #20
 80170dc:	cc20      	ldmia	r4!, {r5}
 80170de:	cf04      	ldmia	r7!, {r2}
 80170e0:	9201      	str	r2, [sp, #4]
 80170e2:	b2aa      	uxth	r2, r5
 80170e4:	4494      	add	ip, r2
 80170e6:	466a      	mov	r2, sp
 80170e8:	4661      	mov	r1, ip
 80170ea:	8892      	ldrh	r2, [r2, #4]
 80170ec:	0c2d      	lsrs	r5, r5, #16
 80170ee:	1a8a      	subs	r2, r1, r2
 80170f0:	9901      	ldr	r1, [sp, #4]
 80170f2:	0c09      	lsrs	r1, r1, #16
 80170f4:	1a69      	subs	r1, r5, r1
 80170f6:	1415      	asrs	r5, r2, #16
 80170f8:	1949      	adds	r1, r1, r5
 80170fa:	140d      	asrs	r5, r1, #16
 80170fc:	b292      	uxth	r2, r2
 80170fe:	0409      	lsls	r1, r1, #16
 8017100:	430a      	orrs	r2, r1
 8017102:	601a      	str	r2, [r3, #0]
 8017104:	9a03      	ldr	r2, [sp, #12]
 8017106:	46ac      	mov	ip, r5
 8017108:	3304      	adds	r3, #4
 801710a:	42ba      	cmp	r2, r7
 801710c:	d8e6      	bhi.n	80170dc <__mdiff+0x64>
 801710e:	9902      	ldr	r1, [sp, #8]
 8017110:	001a      	movs	r2, r3
 8017112:	428c      	cmp	r4, r1
 8017114:	d305      	bcc.n	8017122 <__mdiff+0xaa>
 8017116:	3a04      	subs	r2, #4
 8017118:	6813      	ldr	r3, [r2, #0]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d00e      	beq.n	801713c <__mdiff+0xc4>
 801711e:	6106      	str	r6, [r0, #16]
 8017120:	e7bc      	b.n	801709c <__mdiff+0x24>
 8017122:	cc04      	ldmia	r4!, {r2}
 8017124:	b291      	uxth	r1, r2
 8017126:	4461      	add	r1, ip
 8017128:	140d      	asrs	r5, r1, #16
 801712a:	0c12      	lsrs	r2, r2, #16
 801712c:	1952      	adds	r2, r2, r5
 801712e:	1415      	asrs	r5, r2, #16
 8017130:	b289      	uxth	r1, r1
 8017132:	0412      	lsls	r2, r2, #16
 8017134:	430a      	orrs	r2, r1
 8017136:	46ac      	mov	ip, r5
 8017138:	c304      	stmia	r3!, {r2}
 801713a:	e7e8      	b.n	801710e <__mdiff+0x96>
 801713c:	3e01      	subs	r6, #1
 801713e:	e7ea      	b.n	8017116 <__mdiff+0x9e>

08017140 <__ulp>:
 8017140:	000b      	movs	r3, r1
 8017142:	4910      	ldr	r1, [pc, #64]	; (8017184 <__ulp+0x44>)
 8017144:	b510      	push	{r4, lr}
 8017146:	4019      	ands	r1, r3
 8017148:	4b0f      	ldr	r3, [pc, #60]	; (8017188 <__ulp+0x48>)
 801714a:	18c9      	adds	r1, r1, r3
 801714c:	2900      	cmp	r1, #0
 801714e:	dd04      	ble.n	801715a <__ulp+0x1a>
 8017150:	2200      	movs	r2, #0
 8017152:	000b      	movs	r3, r1
 8017154:	0010      	movs	r0, r2
 8017156:	0019      	movs	r1, r3
 8017158:	bd10      	pop	{r4, pc}
 801715a:	4249      	negs	r1, r1
 801715c:	1509      	asrs	r1, r1, #20
 801715e:	2200      	movs	r2, #0
 8017160:	2300      	movs	r3, #0
 8017162:	2913      	cmp	r1, #19
 8017164:	dc04      	bgt.n	8017170 <__ulp+0x30>
 8017166:	2080      	movs	r0, #128	; 0x80
 8017168:	0300      	lsls	r0, r0, #12
 801716a:	4108      	asrs	r0, r1
 801716c:	0003      	movs	r3, r0
 801716e:	e7f1      	b.n	8017154 <__ulp+0x14>
 8017170:	3914      	subs	r1, #20
 8017172:	2001      	movs	r0, #1
 8017174:	291e      	cmp	r1, #30
 8017176:	dc02      	bgt.n	801717e <__ulp+0x3e>
 8017178:	241f      	movs	r4, #31
 801717a:	1a61      	subs	r1, r4, r1
 801717c:	4088      	lsls	r0, r1
 801717e:	0002      	movs	r2, r0
 8017180:	e7e8      	b.n	8017154 <__ulp+0x14>
 8017182:	46c0      	nop			; (mov r8, r8)
 8017184:	7ff00000 	.word	0x7ff00000
 8017188:	fcc00000 	.word	0xfcc00000

0801718c <__b2d>:
 801718c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801718e:	0006      	movs	r6, r0
 8017190:	6903      	ldr	r3, [r0, #16]
 8017192:	3614      	adds	r6, #20
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	18f3      	adds	r3, r6, r3
 8017198:	1f1d      	subs	r5, r3, #4
 801719a:	682c      	ldr	r4, [r5, #0]
 801719c:	000f      	movs	r7, r1
 801719e:	0020      	movs	r0, r4
 80171a0:	9301      	str	r3, [sp, #4]
 80171a2:	f7ff fdd9 	bl	8016d58 <__hi0bits>
 80171a6:	2320      	movs	r3, #32
 80171a8:	1a1b      	subs	r3, r3, r0
 80171aa:	603b      	str	r3, [r7, #0]
 80171ac:	491c      	ldr	r1, [pc, #112]	; (8017220 <__b2d+0x94>)
 80171ae:	280a      	cmp	r0, #10
 80171b0:	dc16      	bgt.n	80171e0 <__b2d+0x54>
 80171b2:	230b      	movs	r3, #11
 80171b4:	0027      	movs	r7, r4
 80171b6:	1a1b      	subs	r3, r3, r0
 80171b8:	40df      	lsrs	r7, r3
 80171ba:	4339      	orrs	r1, r7
 80171bc:	469c      	mov	ip, r3
 80171be:	000b      	movs	r3, r1
 80171c0:	2100      	movs	r1, #0
 80171c2:	42ae      	cmp	r6, r5
 80171c4:	d202      	bcs.n	80171cc <__b2d+0x40>
 80171c6:	9901      	ldr	r1, [sp, #4]
 80171c8:	3908      	subs	r1, #8
 80171ca:	6809      	ldr	r1, [r1, #0]
 80171cc:	3015      	adds	r0, #21
 80171ce:	4084      	lsls	r4, r0
 80171d0:	4660      	mov	r0, ip
 80171d2:	40c1      	lsrs	r1, r0
 80171d4:	430c      	orrs	r4, r1
 80171d6:	0022      	movs	r2, r4
 80171d8:	0010      	movs	r0, r2
 80171da:	0019      	movs	r1, r3
 80171dc:	b003      	add	sp, #12
 80171de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171e0:	2700      	movs	r7, #0
 80171e2:	42ae      	cmp	r6, r5
 80171e4:	d202      	bcs.n	80171ec <__b2d+0x60>
 80171e6:	9d01      	ldr	r5, [sp, #4]
 80171e8:	3d08      	subs	r5, #8
 80171ea:	682f      	ldr	r7, [r5, #0]
 80171ec:	380b      	subs	r0, #11
 80171ee:	4684      	mov	ip, r0
 80171f0:	1e03      	subs	r3, r0, #0
 80171f2:	d012      	beq.n	801721a <__b2d+0x8e>
 80171f4:	409c      	lsls	r4, r3
 80171f6:	2020      	movs	r0, #32
 80171f8:	4321      	orrs	r1, r4
 80171fa:	003c      	movs	r4, r7
 80171fc:	1ac0      	subs	r0, r0, r3
 80171fe:	40c4      	lsrs	r4, r0
 8017200:	4321      	orrs	r1, r4
 8017202:	000b      	movs	r3, r1
 8017204:	2100      	movs	r1, #0
 8017206:	42b5      	cmp	r5, r6
 8017208:	d901      	bls.n	801720e <__b2d+0x82>
 801720a:	3d04      	subs	r5, #4
 801720c:	6829      	ldr	r1, [r5, #0]
 801720e:	4664      	mov	r4, ip
 8017210:	40c1      	lsrs	r1, r0
 8017212:	40a7      	lsls	r7, r4
 8017214:	430f      	orrs	r7, r1
 8017216:	003a      	movs	r2, r7
 8017218:	e7de      	b.n	80171d8 <__b2d+0x4c>
 801721a:	4321      	orrs	r1, r4
 801721c:	000b      	movs	r3, r1
 801721e:	e7fa      	b.n	8017216 <__b2d+0x8a>
 8017220:	3ff00000 	.word	0x3ff00000

08017224 <__d2b>:
 8017224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017226:	001d      	movs	r5, r3
 8017228:	2101      	movs	r1, #1
 801722a:	0014      	movs	r4, r2
 801722c:	9f08      	ldr	r7, [sp, #32]
 801722e:	f7ff fce5 	bl	8016bfc <_Balloc>
 8017232:	032b      	lsls	r3, r5, #12
 8017234:	006d      	lsls	r5, r5, #1
 8017236:	0006      	movs	r6, r0
 8017238:	0b1b      	lsrs	r3, r3, #12
 801723a:	0d6d      	lsrs	r5, r5, #21
 801723c:	d124      	bne.n	8017288 <__d2b+0x64>
 801723e:	9301      	str	r3, [sp, #4]
 8017240:	2c00      	cmp	r4, #0
 8017242:	d027      	beq.n	8017294 <__d2b+0x70>
 8017244:	4668      	mov	r0, sp
 8017246:	9400      	str	r4, [sp, #0]
 8017248:	f7ff fda0 	bl	8016d8c <__lo0bits>
 801724c:	9c00      	ldr	r4, [sp, #0]
 801724e:	2800      	cmp	r0, #0
 8017250:	d01e      	beq.n	8017290 <__d2b+0x6c>
 8017252:	9b01      	ldr	r3, [sp, #4]
 8017254:	2120      	movs	r1, #32
 8017256:	001a      	movs	r2, r3
 8017258:	1a09      	subs	r1, r1, r0
 801725a:	408a      	lsls	r2, r1
 801725c:	40c3      	lsrs	r3, r0
 801725e:	4322      	orrs	r2, r4
 8017260:	6172      	str	r2, [r6, #20]
 8017262:	9301      	str	r3, [sp, #4]
 8017264:	9c01      	ldr	r4, [sp, #4]
 8017266:	61b4      	str	r4, [r6, #24]
 8017268:	1e63      	subs	r3, r4, #1
 801726a:	419c      	sbcs	r4, r3
 801726c:	3401      	adds	r4, #1
 801726e:	6134      	str	r4, [r6, #16]
 8017270:	2d00      	cmp	r5, #0
 8017272:	d018      	beq.n	80172a6 <__d2b+0x82>
 8017274:	4b12      	ldr	r3, [pc, #72]	; (80172c0 <__d2b+0x9c>)
 8017276:	18ed      	adds	r5, r5, r3
 8017278:	2335      	movs	r3, #53	; 0x35
 801727a:	182d      	adds	r5, r5, r0
 801727c:	603d      	str	r5, [r7, #0]
 801727e:	1a18      	subs	r0, r3, r0
 8017280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017282:	6018      	str	r0, [r3, #0]
 8017284:	0030      	movs	r0, r6
 8017286:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017288:	2280      	movs	r2, #128	; 0x80
 801728a:	0352      	lsls	r2, r2, #13
 801728c:	4313      	orrs	r3, r2
 801728e:	e7d6      	b.n	801723e <__d2b+0x1a>
 8017290:	6174      	str	r4, [r6, #20]
 8017292:	e7e7      	b.n	8017264 <__d2b+0x40>
 8017294:	a801      	add	r0, sp, #4
 8017296:	f7ff fd79 	bl	8016d8c <__lo0bits>
 801729a:	2401      	movs	r4, #1
 801729c:	9b01      	ldr	r3, [sp, #4]
 801729e:	6134      	str	r4, [r6, #16]
 80172a0:	6173      	str	r3, [r6, #20]
 80172a2:	3020      	adds	r0, #32
 80172a4:	e7e4      	b.n	8017270 <__d2b+0x4c>
 80172a6:	4b07      	ldr	r3, [pc, #28]	; (80172c4 <__d2b+0xa0>)
 80172a8:	18c0      	adds	r0, r0, r3
 80172aa:	4b07      	ldr	r3, [pc, #28]	; (80172c8 <__d2b+0xa4>)
 80172ac:	6038      	str	r0, [r7, #0]
 80172ae:	18e3      	adds	r3, r4, r3
 80172b0:	009b      	lsls	r3, r3, #2
 80172b2:	18f3      	adds	r3, r6, r3
 80172b4:	6958      	ldr	r0, [r3, #20]
 80172b6:	f7ff fd4f 	bl	8016d58 <__hi0bits>
 80172ba:	0164      	lsls	r4, r4, #5
 80172bc:	1a20      	subs	r0, r4, r0
 80172be:	e7df      	b.n	8017280 <__d2b+0x5c>
 80172c0:	fffffbcd 	.word	0xfffffbcd
 80172c4:	fffffbce 	.word	0xfffffbce
 80172c8:	3fffffff 	.word	0x3fffffff

080172cc <__ratio>:
 80172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ce:	b085      	sub	sp, #20
 80172d0:	000f      	movs	r7, r1
 80172d2:	a902      	add	r1, sp, #8
 80172d4:	0006      	movs	r6, r0
 80172d6:	f7ff ff59 	bl	801718c <__b2d>
 80172da:	0004      	movs	r4, r0
 80172dc:	000d      	movs	r5, r1
 80172de:	0038      	movs	r0, r7
 80172e0:	a903      	add	r1, sp, #12
 80172e2:	9400      	str	r4, [sp, #0]
 80172e4:	9501      	str	r5, [sp, #4]
 80172e6:	f7ff ff51 	bl	801718c <__b2d>
 80172ea:	6936      	ldr	r6, [r6, #16]
 80172ec:	693f      	ldr	r7, [r7, #16]
 80172ee:	0002      	movs	r2, r0
 80172f0:	1bf7      	subs	r7, r6, r7
 80172f2:	017e      	lsls	r6, r7, #5
 80172f4:	46b4      	mov	ip, r6
 80172f6:	9f03      	ldr	r7, [sp, #12]
 80172f8:	9e02      	ldr	r6, [sp, #8]
 80172fa:	000b      	movs	r3, r1
 80172fc:	1bf6      	subs	r6, r6, r7
 80172fe:	4466      	add	r6, ip
 8017300:	0537      	lsls	r7, r6, #20
 8017302:	2e00      	cmp	r6, #0
 8017304:	dd07      	ble.n	8017316 <__ratio+0x4a>
 8017306:	1979      	adds	r1, r7, r5
 8017308:	9101      	str	r1, [sp, #4]
 801730a:	9800      	ldr	r0, [sp, #0]
 801730c:	9901      	ldr	r1, [sp, #4]
 801730e:	f7ea fabd 	bl	800188c <__aeabi_ddiv>
 8017312:	b005      	add	sp, #20
 8017314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017316:	1bcb      	subs	r3, r1, r7
 8017318:	e7f7      	b.n	801730a <__ratio+0x3e>

0801731a <__copybits>:
 801731a:	0013      	movs	r3, r2
 801731c:	3901      	subs	r1, #1
 801731e:	b510      	push	{r4, lr}
 8017320:	1149      	asrs	r1, r1, #5
 8017322:	6912      	ldr	r2, [r2, #16]
 8017324:	3101      	adds	r1, #1
 8017326:	0089      	lsls	r1, r1, #2
 8017328:	3314      	adds	r3, #20
 801732a:	0092      	lsls	r2, r2, #2
 801732c:	1841      	adds	r1, r0, r1
 801732e:	189a      	adds	r2, r3, r2
 8017330:	429a      	cmp	r2, r3
 8017332:	d803      	bhi.n	801733c <__copybits+0x22>
 8017334:	2300      	movs	r3, #0
 8017336:	4281      	cmp	r1, r0
 8017338:	d803      	bhi.n	8017342 <__copybits+0x28>
 801733a:	bd10      	pop	{r4, pc}
 801733c:	cb10      	ldmia	r3!, {r4}
 801733e:	c010      	stmia	r0!, {r4}
 8017340:	e7f6      	b.n	8017330 <__copybits+0x16>
 8017342:	c008      	stmia	r0!, {r3}
 8017344:	e7f7      	b.n	8017336 <__copybits+0x1c>

08017346 <__any_on>:
 8017346:	0002      	movs	r2, r0
 8017348:	6900      	ldr	r0, [r0, #16]
 801734a:	b510      	push	{r4, lr}
 801734c:	3214      	adds	r2, #20
 801734e:	114b      	asrs	r3, r1, #5
 8017350:	4298      	cmp	r0, r3
 8017352:	db12      	blt.n	801737a <__any_on+0x34>
 8017354:	dd0b      	ble.n	801736e <__any_on+0x28>
 8017356:	201f      	movs	r0, #31
 8017358:	4001      	ands	r1, r0
 801735a:	d008      	beq.n	801736e <__any_on+0x28>
 801735c:	0098      	lsls	r0, r3, #2
 801735e:	5884      	ldr	r4, [r0, r2]
 8017360:	0020      	movs	r0, r4
 8017362:	40c8      	lsrs	r0, r1
 8017364:	4088      	lsls	r0, r1
 8017366:	0001      	movs	r1, r0
 8017368:	2001      	movs	r0, #1
 801736a:	428c      	cmp	r4, r1
 801736c:	d104      	bne.n	8017378 <__any_on+0x32>
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	18d3      	adds	r3, r2, r3
 8017372:	4293      	cmp	r3, r2
 8017374:	d803      	bhi.n	801737e <__any_on+0x38>
 8017376:	2000      	movs	r0, #0
 8017378:	bd10      	pop	{r4, pc}
 801737a:	0003      	movs	r3, r0
 801737c:	e7f7      	b.n	801736e <__any_on+0x28>
 801737e:	3b04      	subs	r3, #4
 8017380:	6819      	ldr	r1, [r3, #0]
 8017382:	2900      	cmp	r1, #0
 8017384:	d0f5      	beq.n	8017372 <__any_on+0x2c>
 8017386:	2001      	movs	r0, #1
 8017388:	e7f6      	b.n	8017378 <__any_on+0x32>
	...

0801738c <frexp>:
 801738c:	b570      	push	{r4, r5, r6, lr}
 801738e:	0014      	movs	r4, r2
 8017390:	2500      	movs	r5, #0
 8017392:	6025      	str	r5, [r4, #0]
 8017394:	4d10      	ldr	r5, [pc, #64]	; (80173d8 <frexp+0x4c>)
 8017396:	004b      	lsls	r3, r1, #1
 8017398:	000a      	movs	r2, r1
 801739a:	085b      	lsrs	r3, r3, #1
 801739c:	42ab      	cmp	r3, r5
 801739e:	dc1a      	bgt.n	80173d6 <frexp+0x4a>
 80173a0:	001d      	movs	r5, r3
 80173a2:	4305      	orrs	r5, r0
 80173a4:	d017      	beq.n	80173d6 <frexp+0x4a>
 80173a6:	4d0d      	ldr	r5, [pc, #52]	; (80173dc <frexp+0x50>)
 80173a8:	42ab      	cmp	r3, r5
 80173aa:	dc09      	bgt.n	80173c0 <frexp+0x34>
 80173ac:	2200      	movs	r2, #0
 80173ae:	4b0c      	ldr	r3, [pc, #48]	; (80173e0 <frexp+0x54>)
 80173b0:	f7ea fe76 	bl	80020a0 <__aeabi_dmul>
 80173b4:	2536      	movs	r5, #54	; 0x36
 80173b6:	000a      	movs	r2, r1
 80173b8:	004b      	lsls	r3, r1, #1
 80173ba:	426d      	negs	r5, r5
 80173bc:	085b      	lsrs	r3, r3, #1
 80173be:	6025      	str	r5, [r4, #0]
 80173c0:	4d08      	ldr	r5, [pc, #32]	; (80173e4 <frexp+0x58>)
 80173c2:	151b      	asrs	r3, r3, #20
 80173c4:	195b      	adds	r3, r3, r5
 80173c6:	6825      	ldr	r5, [r4, #0]
 80173c8:	18eb      	adds	r3, r5, r3
 80173ca:	6023      	str	r3, [r4, #0]
 80173cc:	4b06      	ldr	r3, [pc, #24]	; (80173e8 <frexp+0x5c>)
 80173ce:	401a      	ands	r2, r3
 80173d0:	4b06      	ldr	r3, [pc, #24]	; (80173ec <frexp+0x60>)
 80173d2:	4313      	orrs	r3, r2
 80173d4:	0019      	movs	r1, r3
 80173d6:	bd70      	pop	{r4, r5, r6, pc}
 80173d8:	7fefffff 	.word	0x7fefffff
 80173dc:	000fffff 	.word	0x000fffff
 80173e0:	43500000 	.word	0x43500000
 80173e4:	fffffc02 	.word	0xfffffc02
 80173e8:	800fffff 	.word	0x800fffff
 80173ec:	3fe00000 	.word	0x3fe00000

080173f0 <__ssprint_r>:
 80173f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173f2:	6893      	ldr	r3, [r2, #8]
 80173f4:	b087      	sub	sp, #28
 80173f6:	9002      	str	r0, [sp, #8]
 80173f8:	000c      	movs	r4, r1
 80173fa:	0016      	movs	r6, r2
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d063      	beq.n	80174c8 <__ssprint_r+0xd8>
 8017400:	6813      	ldr	r3, [r2, #0]
 8017402:	9303      	str	r3, [sp, #12]
 8017404:	2300      	movs	r3, #0
 8017406:	001f      	movs	r7, r3
 8017408:	9305      	str	r3, [sp, #20]
 801740a:	2f00      	cmp	r7, #0
 801740c:	d02e      	beq.n	801746c <__ssprint_r+0x7c>
 801740e:	68a5      	ldr	r5, [r4, #8]
 8017410:	42af      	cmp	r7, r5
 8017412:	d347      	bcc.n	80174a4 <__ssprint_r+0xb4>
 8017414:	2390      	movs	r3, #144	; 0x90
 8017416:	89a2      	ldrh	r2, [r4, #12]
 8017418:	00db      	lsls	r3, r3, #3
 801741a:	421a      	tst	r2, r3
 801741c:	d042      	beq.n	80174a4 <__ssprint_r+0xb4>
 801741e:	2003      	movs	r0, #3
 8017420:	6921      	ldr	r1, [r4, #16]
 8017422:	6823      	ldr	r3, [r4, #0]
 8017424:	1a5b      	subs	r3, r3, r1
 8017426:	9304      	str	r3, [sp, #16]
 8017428:	6963      	ldr	r3, [r4, #20]
 801742a:	4343      	muls	r3, r0
 801742c:	0fd8      	lsrs	r0, r3, #31
 801742e:	18c3      	adds	r3, r0, r3
 8017430:	105b      	asrs	r3, r3, #1
 8017432:	9301      	str	r3, [sp, #4]
 8017434:	9b04      	ldr	r3, [sp, #16]
 8017436:	9801      	ldr	r0, [sp, #4]
 8017438:	3301      	adds	r3, #1
 801743a:	19db      	adds	r3, r3, r7
 801743c:	4283      	cmp	r3, r0
 801743e:	d900      	bls.n	8017442 <__ssprint_r+0x52>
 8017440:	9301      	str	r3, [sp, #4]
 8017442:	0553      	lsls	r3, r2, #21
 8017444:	d544      	bpl.n	80174d0 <__ssprint_r+0xe0>
 8017446:	9901      	ldr	r1, [sp, #4]
 8017448:	9802      	ldr	r0, [sp, #8]
 801744a:	f7fb fab7 	bl	80129bc <_malloc_r>
 801744e:	1e05      	subs	r5, r0, #0
 8017450:	d114      	bne.n	801747c <__ssprint_r+0x8c>
 8017452:	230c      	movs	r3, #12
 8017454:	9a02      	ldr	r2, [sp, #8]
 8017456:	2001      	movs	r0, #1
 8017458:	6013      	str	r3, [r2, #0]
 801745a:	2340      	movs	r3, #64	; 0x40
 801745c:	89a2      	ldrh	r2, [r4, #12]
 801745e:	4240      	negs	r0, r0
 8017460:	4313      	orrs	r3, r2
 8017462:	81a3      	strh	r3, [r4, #12]
 8017464:	2300      	movs	r3, #0
 8017466:	60b3      	str	r3, [r6, #8]
 8017468:	6073      	str	r3, [r6, #4]
 801746a:	e02f      	b.n	80174cc <__ssprint_r+0xdc>
 801746c:	9b03      	ldr	r3, [sp, #12]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	9305      	str	r3, [sp, #20]
 8017472:	9b03      	ldr	r3, [sp, #12]
 8017474:	685f      	ldr	r7, [r3, #4]
 8017476:	3308      	adds	r3, #8
 8017478:	9303      	str	r3, [sp, #12]
 801747a:	e7c6      	b.n	801740a <__ssprint_r+0x1a>
 801747c:	9a04      	ldr	r2, [sp, #16]
 801747e:	6921      	ldr	r1, [r4, #16]
 8017480:	f7fb fcd5 	bl	8012e2e <memcpy>
 8017484:	89a3      	ldrh	r3, [r4, #12]
 8017486:	4a18      	ldr	r2, [pc, #96]	; (80174e8 <__ssprint_r+0xf8>)
 8017488:	401a      	ands	r2, r3
 801748a:	2380      	movs	r3, #128	; 0x80
 801748c:	4313      	orrs	r3, r2
 801748e:	81a3      	strh	r3, [r4, #12]
 8017490:	9b04      	ldr	r3, [sp, #16]
 8017492:	6125      	str	r5, [r4, #16]
 8017494:	18ed      	adds	r5, r5, r3
 8017496:	6025      	str	r5, [r4, #0]
 8017498:	003d      	movs	r5, r7
 801749a:	9b01      	ldr	r3, [sp, #4]
 801749c:	9a04      	ldr	r2, [sp, #16]
 801749e:	6163      	str	r3, [r4, #20]
 80174a0:	1a9b      	subs	r3, r3, r2
 80174a2:	60a3      	str	r3, [r4, #8]
 80174a4:	42bd      	cmp	r5, r7
 80174a6:	d900      	bls.n	80174aa <__ssprint_r+0xba>
 80174a8:	003d      	movs	r5, r7
 80174aa:	002a      	movs	r2, r5
 80174ac:	9905      	ldr	r1, [sp, #20]
 80174ae:	6820      	ldr	r0, [r4, #0]
 80174b0:	f7ff fb91 	bl	8016bd6 <memmove>
 80174b4:	68a3      	ldr	r3, [r4, #8]
 80174b6:	1b5b      	subs	r3, r3, r5
 80174b8:	60a3      	str	r3, [r4, #8]
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	195d      	adds	r5, r3, r5
 80174be:	68b3      	ldr	r3, [r6, #8]
 80174c0:	6025      	str	r5, [r4, #0]
 80174c2:	1bdb      	subs	r3, r3, r7
 80174c4:	60b3      	str	r3, [r6, #8]
 80174c6:	d1d1      	bne.n	801746c <__ssprint_r+0x7c>
 80174c8:	2000      	movs	r0, #0
 80174ca:	6070      	str	r0, [r6, #4]
 80174cc:	b007      	add	sp, #28
 80174ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174d0:	9a01      	ldr	r2, [sp, #4]
 80174d2:	9802      	ldr	r0, [sp, #8]
 80174d4:	f7fb fcf0 	bl	8012eb8 <_realloc_r>
 80174d8:	1e05      	subs	r5, r0, #0
 80174da:	d1d9      	bne.n	8017490 <__ssprint_r+0xa0>
 80174dc:	6921      	ldr	r1, [r4, #16]
 80174de:	9802      	ldr	r0, [sp, #8]
 80174e0:	f7fe ff78 	bl	80163d4 <_free_r>
 80174e4:	e7b5      	b.n	8017452 <__ssprint_r+0x62>
 80174e6:	46c0      	nop			; (mov r8, r8)
 80174e8:	fffffb7f 	.word	0xfffffb7f

080174ec <__register_exitproc>:
 80174ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174ee:	4d29      	ldr	r5, [pc, #164]	; (8017594 <__register_exitproc+0xa8>)
 80174f0:	0006      	movs	r6, r0
 80174f2:	6828      	ldr	r0, [r5, #0]
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	9100      	str	r1, [sp, #0]
 80174f8:	0017      	movs	r7, r2
 80174fa:	f7ff fb5f 	bl	8016bbc <__retarget_lock_acquire_recursive>
 80174fe:	4b26      	ldr	r3, [pc, #152]	; (8017598 <__register_exitproc+0xac>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	001c      	movs	r4, r3
 8017504:	34fc      	adds	r4, #252	; 0xfc
 8017506:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017508:	2800      	cmp	r0, #0
 801750a:	d103      	bne.n	8017514 <__register_exitproc+0x28>
 801750c:	334d      	adds	r3, #77	; 0x4d
 801750e:	33ff      	adds	r3, #255	; 0xff
 8017510:	0018      	movs	r0, r3
 8017512:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017514:	6843      	ldr	r3, [r0, #4]
 8017516:	2b1f      	cmp	r3, #31
 8017518:	dd18      	ble.n	801754c <__register_exitproc+0x60>
 801751a:	4b20      	ldr	r3, [pc, #128]	; (801759c <__register_exitproc+0xb0>)
 801751c:	2b00      	cmp	r3, #0
 801751e:	d105      	bne.n	801752c <__register_exitproc+0x40>
 8017520:	6828      	ldr	r0, [r5, #0]
 8017522:	f7ff fb4c 	bl	8016bbe <__retarget_lock_release_recursive>
 8017526:	2001      	movs	r0, #1
 8017528:	4240      	negs	r0, r0
 801752a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801752c:	20c8      	movs	r0, #200	; 0xc8
 801752e:	0040      	lsls	r0, r0, #1
 8017530:	f7fb fa30 	bl	8012994 <malloc>
 8017534:	2800      	cmp	r0, #0
 8017536:	d0f3      	beq.n	8017520 <__register_exitproc+0x34>
 8017538:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801753a:	2300      	movs	r3, #0
 801753c:	6002      	str	r2, [r0, #0]
 801753e:	22c4      	movs	r2, #196	; 0xc4
 8017540:	0052      	lsls	r2, r2, #1
 8017542:	6043      	str	r3, [r0, #4]
 8017544:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017546:	5083      	str	r3, [r0, r2]
 8017548:	3204      	adds	r2, #4
 801754a:	5083      	str	r3, [r0, r2]
 801754c:	6843      	ldr	r3, [r0, #4]
 801754e:	2e00      	cmp	r6, #0
 8017550:	d014      	beq.n	801757c <__register_exitproc+0x90>
 8017552:	009a      	lsls	r2, r3, #2
 8017554:	1882      	adds	r2, r0, r2
 8017556:	0011      	movs	r1, r2
 8017558:	3188      	adds	r1, #136	; 0x88
 801755a:	600f      	str	r7, [r1, #0]
 801755c:	2101      	movs	r1, #1
 801755e:	0004      	movs	r4, r0
 8017560:	4099      	lsls	r1, r3
 8017562:	3485      	adds	r4, #133	; 0x85
 8017564:	34ff      	adds	r4, #255	; 0xff
 8017566:	6865      	ldr	r5, [r4, #4]
 8017568:	32fc      	adds	r2, #252	; 0xfc
 801756a:	430d      	orrs	r5, r1
 801756c:	6065      	str	r5, [r4, #4]
 801756e:	9d01      	ldr	r5, [sp, #4]
 8017570:	60d5      	str	r5, [r2, #12]
 8017572:	2e02      	cmp	r6, #2
 8017574:	d102      	bne.n	801757c <__register_exitproc+0x90>
 8017576:	68a2      	ldr	r2, [r4, #8]
 8017578:	4311      	orrs	r1, r2
 801757a:	60a1      	str	r1, [r4, #8]
 801757c:	1c5a      	adds	r2, r3, #1
 801757e:	6042      	str	r2, [r0, #4]
 8017580:	3302      	adds	r3, #2
 8017582:	9a00      	ldr	r2, [sp, #0]
 8017584:	009b      	lsls	r3, r3, #2
 8017586:	501a      	str	r2, [r3, r0]
 8017588:	4b02      	ldr	r3, [pc, #8]	; (8017594 <__register_exitproc+0xa8>)
 801758a:	6818      	ldr	r0, [r3, #0]
 801758c:	f7ff fb17 	bl	8016bbe <__retarget_lock_release_recursive>
 8017590:	2000      	movs	r0, #0
 8017592:	e7ca      	b.n	801752a <__register_exitproc+0x3e>
 8017594:	20000a54 	.word	0x20000a54
 8017598:	0801a554 	.word	0x0801a554
 801759c:	08012995 	.word	0x08012995

080175a0 <_calloc_r>:
 80175a0:	b510      	push	{r4, lr}
 80175a2:	4351      	muls	r1, r2
 80175a4:	f7fb fa0a 	bl	80129bc <_malloc_r>
 80175a8:	1e04      	subs	r4, r0, #0
 80175aa:	d01a      	beq.n	80175e2 <_calloc_r+0x42>
 80175ac:	0003      	movs	r3, r0
 80175ae:	3b08      	subs	r3, #8
 80175b0:	685a      	ldr	r2, [r3, #4]
 80175b2:	2303      	movs	r3, #3
 80175b4:	439a      	bics	r2, r3
 80175b6:	3a04      	subs	r2, #4
 80175b8:	2a24      	cmp	r2, #36	; 0x24
 80175ba:	d819      	bhi.n	80175f0 <_calloc_r+0x50>
 80175bc:	0003      	movs	r3, r0
 80175be:	2a13      	cmp	r2, #19
 80175c0:	d90b      	bls.n	80175da <_calloc_r+0x3a>
 80175c2:	2100      	movs	r1, #0
 80175c4:	3308      	adds	r3, #8
 80175c6:	6001      	str	r1, [r0, #0]
 80175c8:	6041      	str	r1, [r0, #4]
 80175ca:	2a1b      	cmp	r2, #27
 80175cc:	d905      	bls.n	80175da <_calloc_r+0x3a>
 80175ce:	6081      	str	r1, [r0, #8]
 80175d0:	60c1      	str	r1, [r0, #12]
 80175d2:	2a24      	cmp	r2, #36	; 0x24
 80175d4:	d007      	beq.n	80175e6 <_calloc_r+0x46>
 80175d6:	0003      	movs	r3, r0
 80175d8:	3310      	adds	r3, #16
 80175da:	2200      	movs	r2, #0
 80175dc:	601a      	str	r2, [r3, #0]
 80175de:	605a      	str	r2, [r3, #4]
 80175e0:	609a      	str	r2, [r3, #8]
 80175e2:	0020      	movs	r0, r4
 80175e4:	bd10      	pop	{r4, pc}
 80175e6:	0003      	movs	r3, r0
 80175e8:	6101      	str	r1, [r0, #16]
 80175ea:	3318      	adds	r3, #24
 80175ec:	6141      	str	r1, [r0, #20]
 80175ee:	e7f4      	b.n	80175da <_calloc_r+0x3a>
 80175f0:	2100      	movs	r1, #0
 80175f2:	f7fb fc25 	bl	8012e40 <memset>
 80175f6:	e7f4      	b.n	80175e2 <_calloc_r+0x42>

080175f8 <_sbrk>:
 80175f8:	4b05      	ldr	r3, [pc, #20]	; (8017610 <_sbrk+0x18>)
 80175fa:	0002      	movs	r2, r0
 80175fc:	6819      	ldr	r1, [r3, #0]
 80175fe:	2900      	cmp	r1, #0
 8017600:	d101      	bne.n	8017606 <_sbrk+0xe>
 8017602:	4904      	ldr	r1, [pc, #16]	; (8017614 <_sbrk+0x1c>)
 8017604:	6019      	str	r1, [r3, #0]
 8017606:	6818      	ldr	r0, [r3, #0]
 8017608:	1882      	adds	r2, r0, r2
 801760a:	601a      	str	r2, [r3, #0]
 801760c:	4770      	bx	lr
 801760e:	46c0      	nop			; (mov r8, r8)
 8017610:	20006818 	.word	0x20006818
 8017614:	20006d48 	.word	0x20006d48

08017618 <_init>:
 8017618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801761a:	46c0      	nop			; (mov r8, r8)
 801761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801761e:	bc08      	pop	{r3}
 8017620:	469e      	mov	lr, r3
 8017622:	4770      	bx	lr

08017624 <_fini>:
 8017624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017626:	46c0      	nop			; (mov r8, r8)
 8017628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801762a:	bc08      	pop	{r3}
 801762c:	469e      	mov	lr, r3
 801762e:	4770      	bx	lr
