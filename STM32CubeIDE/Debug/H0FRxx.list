
H0FRxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017534  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000321c  080175f0  080175f0  000275f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a80c  0801a80c  00030a10  2**0
                  CONTENTS
  4 .ARM          00000008  0801a80c  0801a80c  0002a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a814  0801a814  00030a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a814  0801a814  0002a814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a81c  0801a81c  0002a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0801a820  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062a8  20000a10  0801b230  00030a10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006cb8  0801b230  00036cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004490a  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007152  00000000  00000000  00075342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001924e  00000000  00000000  0007c494  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a88  00000000  00000000  000956e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e68  00000000  00000000  00097170  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000133d2  00000000  00000000  00098fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009d4f  00000000  00000000  000ac3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b60f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  000b6174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a10 	.word	0x20000a10
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080175d8 	.word	0x080175d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a14 	.word	0x20000a14
 8000100:	080175d8 	.word	0x080175d8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdbf 	bl	8001fd0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd17 	bl	8001e90 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdb1 	bl	8001fd0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fda7 	bl	8001fd0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd39 	bl	8001f08 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd2f 	bl	8001f08 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb21 	bl	8000b08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faa3 	bl	8000a1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb13 	bl	8000b08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb09 	bl	8000b08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fab1 	bl	8000a6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 faa7 	bl	8000a6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88a 	bl	8000674 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fddf 	bl	8001194 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc15 	bl	8000e0c <__aeabi_fsub>
 80005e2:	f000 fdd7 	bl	8001194 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb21 	bl	8002c4c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 ffb6 	bl	8002584 <__aeabi_dsub>
 8000618:	f002 fb18 	bl	8002c4c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__aeabi_ul2f>:
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <__aeabi_ul2f+0x40>)
 800062e:	b5d0      	push	{r4, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	4299      	cmp	r1, r3
 8000634:	d906      	bls.n	8000644 <__aeabi_ul2f+0x18>
 8000636:	0543      	lsls	r3, r0, #21
 8000638:	d004      	beq.n	8000644 <__aeabi_ul2f+0x18>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0ac4      	lsrs	r4, r0, #11
 800063e:	02e4      	lsls	r4, r4, #11
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	431c      	orrs	r4, r3
 8000644:	0008      	movs	r0, r1
 8000646:	f002 fb71 	bl	8002d2c <__aeabi_ui2d>
 800064a:	2200      	movs	r2, #0
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <__aeabi_ul2f+0x44>)
 800064e:	f001 fd27 	bl	80020a0 <__aeabi_dmul>
 8000652:	0006      	movs	r6, r0
 8000654:	000f      	movs	r7, r1
 8000656:	0020      	movs	r0, r4
 8000658:	f002 fb68 	bl	8002d2c <__aeabi_ui2d>
 800065c:	0032      	movs	r2, r6
 800065e:	003b      	movs	r3, r7
 8000660:	f000 fdf8 	bl	8001254 <__aeabi_dadd>
 8000664:	f002 fbe6 	bl	8002e34 <__aeabi_d2f>
 8000668:	bdd0      	pop	{r4, r6, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	001fffff 	.word	0x001fffff
 8000670:	41f00000 	.word	0x41f00000

08000674 <__udivmoddi4>:
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	464f      	mov	r7, r9
 8000678:	4646      	mov	r6, r8
 800067a:	46d6      	mov	lr, sl
 800067c:	b5c0      	push	{r6, r7, lr}
 800067e:	0004      	movs	r4, r0
 8000680:	b082      	sub	sp, #8
 8000682:	000d      	movs	r5, r1
 8000684:	4691      	mov	r9, r2
 8000686:	4698      	mov	r8, r3
 8000688:	428b      	cmp	r3, r1
 800068a:	d82f      	bhi.n	80006ec <__udivmoddi4+0x78>
 800068c:	d02c      	beq.n	80006e8 <__udivmoddi4+0x74>
 800068e:	4641      	mov	r1, r8
 8000690:	4648      	mov	r0, r9
 8000692:	f002 fc71 	bl	8002f78 <__clzdi2>
 8000696:	0029      	movs	r1, r5
 8000698:	0006      	movs	r6, r0
 800069a:	0020      	movs	r0, r4
 800069c:	f002 fc6c 	bl	8002f78 <__clzdi2>
 80006a0:	1a33      	subs	r3, r6, r0
 80006a2:	469c      	mov	ip, r3
 80006a4:	3b20      	subs	r3, #32
 80006a6:	469a      	mov	sl, r3
 80006a8:	d500      	bpl.n	80006ac <__udivmoddi4+0x38>
 80006aa:	e076      	b.n	800079a <__udivmoddi4+0x126>
 80006ac:	464b      	mov	r3, r9
 80006ae:	4652      	mov	r2, sl
 80006b0:	4093      	lsls	r3, r2
 80006b2:	001f      	movs	r7, r3
 80006b4:	464b      	mov	r3, r9
 80006b6:	4662      	mov	r2, ip
 80006b8:	4093      	lsls	r3, r2
 80006ba:	001e      	movs	r6, r3
 80006bc:	42af      	cmp	r7, r5
 80006be:	d828      	bhi.n	8000712 <__udivmoddi4+0x9e>
 80006c0:	d025      	beq.n	800070e <__udivmoddi4+0x9a>
 80006c2:	4653      	mov	r3, sl
 80006c4:	1ba4      	subs	r4, r4, r6
 80006c6:	41bd      	sbcs	r5, r7
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da00      	bge.n	80006ce <__udivmoddi4+0x5a>
 80006cc:	e07b      	b.n	80007c6 <__udivmoddi4+0x152>
 80006ce:	2200      	movs	r2, #0
 80006d0:	2300      	movs	r3, #0
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4652      	mov	r2, sl
 80006da:	4093      	lsls	r3, r2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	4662      	mov	r2, ip
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	e018      	b.n	800071a <__udivmoddi4+0xa6>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	d9d0      	bls.n	800068e <__udivmoddi4+0x1a>
 80006ec:	2200      	movs	r2, #0
 80006ee:	2300      	movs	r3, #0
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <__udivmoddi4+0x8a>
 80006fa:	601c      	str	r4, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	9800      	ldr	r0, [sp, #0]
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	b002      	add	sp, #8
 8000704:	bc1c      	pop	{r2, r3, r4}
 8000706:	4690      	mov	r8, r2
 8000708:	4699      	mov	r9, r3
 800070a:	46a2      	mov	sl, r4
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	42a3      	cmp	r3, r4
 8000710:	d9d7      	bls.n	80006c2 <__udivmoddi4+0x4e>
 8000712:	2200      	movs	r2, #0
 8000714:	2300      	movs	r3, #0
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4663      	mov	r3, ip
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e9      	beq.n	80006f4 <__udivmoddi4+0x80>
 8000720:	07fb      	lsls	r3, r7, #31
 8000722:	4698      	mov	r8, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0872      	lsrs	r2, r6, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	4666      	mov	r6, ip
 800072e:	e00e      	b.n	800074e <__udivmoddi4+0xda>
 8000730:	42ab      	cmp	r3, r5
 8000732:	d101      	bne.n	8000738 <__udivmoddi4+0xc4>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d80c      	bhi.n	8000752 <__udivmoddi4+0xde>
 8000738:	1aa4      	subs	r4, r4, r2
 800073a:	419d      	sbcs	r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	1924      	adds	r4, r4, r4
 8000740:	416d      	adcs	r5, r5
 8000742:	2100      	movs	r1, #0
 8000744:	3e01      	subs	r6, #1
 8000746:	1824      	adds	r4, r4, r0
 8000748:	414d      	adcs	r5, r1
 800074a:	2e00      	cmp	r6, #0
 800074c:	d006      	beq.n	800075c <__udivmoddi4+0xe8>
 800074e:	42ab      	cmp	r3, r5
 8000750:	d9ee      	bls.n	8000730 <__udivmoddi4+0xbc>
 8000752:	3e01      	subs	r6, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2e00      	cmp	r6, #0
 800075a:	d1f8      	bne.n	800074e <__udivmoddi4+0xda>
 800075c:	9800      	ldr	r0, [sp, #0]
 800075e:	9901      	ldr	r1, [sp, #4]
 8000760:	4653      	mov	r3, sl
 8000762:	1900      	adds	r0, r0, r4
 8000764:	4169      	adcs	r1, r5
 8000766:	2b00      	cmp	r3, #0
 8000768:	db23      	blt.n	80007b2 <__udivmoddi4+0x13e>
 800076a:	002b      	movs	r3, r5
 800076c:	4652      	mov	r2, sl
 800076e:	40d3      	lsrs	r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4664      	mov	r4, ip
 8000774:	40e2      	lsrs	r2, r4
 8000776:	001c      	movs	r4, r3
 8000778:	4653      	mov	r3, sl
 800077a:	0015      	movs	r5, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	db2d      	blt.n	80007dc <__udivmoddi4+0x168>
 8000780:	0026      	movs	r6, r4
 8000782:	4657      	mov	r7, sl
 8000784:	40be      	lsls	r6, r7
 8000786:	0033      	movs	r3, r6
 8000788:	0026      	movs	r6, r4
 800078a:	4667      	mov	r7, ip
 800078c:	40be      	lsls	r6, r7
 800078e:	0032      	movs	r2, r6
 8000790:	1a80      	subs	r0, r0, r2
 8000792:	4199      	sbcs	r1, r3
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	e7ac      	b.n	80006f4 <__udivmoddi4+0x80>
 800079a:	4662      	mov	r2, ip
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	464a      	mov	r2, r9
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	4661      	mov	r1, ip
 80007a6:	0013      	movs	r3, r2
 80007a8:	4642      	mov	r2, r8
 80007aa:	408a      	lsls	r2, r1
 80007ac:	0017      	movs	r7, r2
 80007ae:	431f      	orrs	r7, r3
 80007b0:	e780      	b.n	80006b4 <__udivmoddi4+0x40>
 80007b2:	4662      	mov	r2, ip
 80007b4:	2320      	movs	r3, #32
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	4666      	mov	r6, ip
 80007bc:	409a      	lsls	r2, r3
 80007be:	0023      	movs	r3, r4
 80007c0:	40f3      	lsrs	r3, r6
 80007c2:	4313      	orrs	r3, r2
 80007c4:	e7d4      	b.n	8000770 <__udivmoddi4+0xfc>
 80007c6:	4662      	mov	r2, ip
 80007c8:	2320      	movs	r3, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	9100      	str	r1, [sp, #0]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	e780      	b.n	80006de <__udivmoddi4+0x6a>
 80007dc:	2320      	movs	r3, #32
 80007de:	4662      	mov	r2, ip
 80007e0:	0026      	movs	r6, r4
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	40de      	lsrs	r6, r3
 80007e6:	002f      	movs	r7, r5
 80007e8:	46b0      	mov	r8, r6
 80007ea:	4666      	mov	r6, ip
 80007ec:	40b7      	lsls	r7, r6
 80007ee:	4646      	mov	r6, r8
 80007f0:	003b      	movs	r3, r7
 80007f2:	4333      	orrs	r3, r6
 80007f4:	e7c8      	b.n	8000788 <__udivmoddi4+0x114>
 80007f6:	46c0      	nop			; (mov r8, r8)

080007f8 <__aeabi_fdiv>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	4657      	mov	r7, sl
 80007fc:	464e      	mov	r6, r9
 80007fe:	4645      	mov	r5, r8
 8000800:	46de      	mov	lr, fp
 8000802:	0244      	lsls	r4, r0, #9
 8000804:	b5e0      	push	{r5, r6, r7, lr}
 8000806:	0046      	lsls	r6, r0, #1
 8000808:	4688      	mov	r8, r1
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	0e36      	lsrs	r6, r6, #24
 800080e:	0fc7      	lsrs	r7, r0, #31
 8000810:	2e00      	cmp	r6, #0
 8000812:	d063      	beq.n	80008dc <__aeabi_fdiv+0xe4>
 8000814:	2eff      	cmp	r6, #255	; 0xff
 8000816:	d024      	beq.n	8000862 <__aeabi_fdiv+0x6a>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	00e4      	lsls	r4, r4, #3
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431c      	orrs	r4, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4699      	mov	r9, r3
 8000824:	469b      	mov	fp, r3
 8000826:	3e7f      	subs	r6, #127	; 0x7f
 8000828:	4643      	mov	r3, r8
 800082a:	4642      	mov	r2, r8
 800082c:	025d      	lsls	r5, r3, #9
 800082e:	0fd2      	lsrs	r2, r2, #31
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e1b      	lsrs	r3, r3, #24
 8000836:	4690      	mov	r8, r2
 8000838:	4692      	mov	sl, r2
 800083a:	d065      	beq.n	8000908 <__aeabi_fdiv+0x110>
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d055      	beq.n	80008ec <__aeabi_fdiv+0xf4>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	2100      	movs	r1, #0
 8000844:	00ed      	lsls	r5, r5, #3
 8000846:	04d2      	lsls	r2, r2, #19
 8000848:	3b7f      	subs	r3, #127	; 0x7f
 800084a:	4315      	orrs	r5, r2
 800084c:	1af6      	subs	r6, r6, r3
 800084e:	4643      	mov	r3, r8
 8000850:	464a      	mov	r2, r9
 8000852:	407b      	eors	r3, r7
 8000854:	2a0f      	cmp	r2, #15
 8000856:	d900      	bls.n	800085a <__aeabi_fdiv+0x62>
 8000858:	e08d      	b.n	8000976 <__aeabi_fdiv+0x17e>
 800085a:	486d      	ldr	r0, [pc, #436]	; (8000a10 <__aeabi_fdiv+0x218>)
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	5882      	ldr	r2, [r0, r2]
 8000860:	4697      	mov	pc, r2
 8000862:	2c00      	cmp	r4, #0
 8000864:	d154      	bne.n	8000910 <__aeabi_fdiv+0x118>
 8000866:	2308      	movs	r3, #8
 8000868:	4699      	mov	r9, r3
 800086a:	3b06      	subs	r3, #6
 800086c:	26ff      	movs	r6, #255	; 0xff
 800086e:	469b      	mov	fp, r3
 8000870:	e7da      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000872:	2500      	movs	r5, #0
 8000874:	4653      	mov	r3, sl
 8000876:	2902      	cmp	r1, #2
 8000878:	d01b      	beq.n	80008b2 <__aeabi_fdiv+0xba>
 800087a:	2903      	cmp	r1, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fdiv+0x88>
 800087e:	e0bf      	b.n	8000a00 <__aeabi_fdiv+0x208>
 8000880:	2901      	cmp	r1, #1
 8000882:	d028      	beq.n	80008d6 <__aeabi_fdiv+0xde>
 8000884:	0030      	movs	r0, r6
 8000886:	307f      	adds	r0, #127	; 0x7f
 8000888:	2800      	cmp	r0, #0
 800088a:	dd20      	ble.n	80008ce <__aeabi_fdiv+0xd6>
 800088c:	076a      	lsls	r2, r5, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000890:	220f      	movs	r2, #15
 8000892:	402a      	ands	r2, r5
 8000894:	2a04      	cmp	r2, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fdiv+0xa2>
 8000898:	3504      	adds	r5, #4
 800089a:	012a      	lsls	r2, r5, #4
 800089c:	d503      	bpl.n	80008a6 <__aeabi_fdiv+0xae>
 800089e:	0030      	movs	r0, r6
 80008a0:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <__aeabi_fdiv+0x21c>)
 80008a2:	3080      	adds	r0, #128	; 0x80
 80008a4:	4015      	ands	r5, r2
 80008a6:	28fe      	cmp	r0, #254	; 0xfe
 80008a8:	dc03      	bgt.n	80008b2 <__aeabi_fdiv+0xba>
 80008aa:	01ac      	lsls	r4, r5, #6
 80008ac:	0a64      	lsrs	r4, r4, #9
 80008ae:	b2c2      	uxtb	r2, r0
 80008b0:	e001      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2400      	movs	r4, #0
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	05d2      	lsls	r2, r2, #23
 80008ba:	0a60      	lsrs	r0, r4, #9
 80008bc:	07db      	lsls	r3, r3, #31
 80008be:	4310      	orrs	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	bc3c      	pop	{r2, r3, r4, r5}
 80008c4:	4690      	mov	r8, r2
 80008c6:	4699      	mov	r9, r3
 80008c8:	46a2      	mov	sl, r4
 80008ca:	46ab      	mov	fp, r5
 80008cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ce:	2201      	movs	r2, #1
 80008d0:	1a10      	subs	r0, r2, r0
 80008d2:	281b      	cmp	r0, #27
 80008d4:	dd7c      	ble.n	80009d0 <__aeabi_fdiv+0x1d8>
 80008d6:	2200      	movs	r2, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	e7ec      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d11d      	bne.n	800091c <__aeabi_fdiv+0x124>
 80008e0:	2304      	movs	r3, #4
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b03      	subs	r3, #3
 80008e6:	2600      	movs	r6, #0
 80008e8:	469b      	mov	fp, r3
 80008ea:	e79d      	b.n	8000828 <__aeabi_fdiv+0x30>
 80008ec:	3eff      	subs	r6, #255	; 0xff
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d120      	bne.n	8000934 <__aeabi_fdiv+0x13c>
 80008f2:	2102      	movs	r1, #2
 80008f4:	4643      	mov	r3, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	407b      	eors	r3, r7
 80008fa:	430a      	orrs	r2, r1
 80008fc:	2a0f      	cmp	r2, #15
 80008fe:	d8d8      	bhi.n	80008b2 <__aeabi_fdiv+0xba>
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <__aeabi_fdiv+0x220>)
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	5882      	ldr	r2, [r0, r2]
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d119      	bne.n	8000940 <__aeabi_fdiv+0x148>
 800090c:	2101      	movs	r1, #1
 800090e:	e7f1      	b.n	80008f4 <__aeabi_fdiv+0xfc>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	26ff      	movs	r6, #255	; 0xff
 8000918:	469b      	mov	fp, r3
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x30>
 800091c:	0020      	movs	r0, r4
 800091e:	f002 fb0d 	bl	8002f3c <__clzsi2>
 8000922:	2676      	movs	r6, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409c      	lsls	r4, r3
 8000928:	2300      	movs	r3, #0
 800092a:	4276      	negs	r6, r6
 800092c:	1a36      	subs	r6, r6, r0
 800092e:	4699      	mov	r9, r3
 8000930:	469b      	mov	fp, r3
 8000932:	e779      	b.n	8000828 <__aeabi_fdiv+0x30>
 8000934:	464a      	mov	r2, r9
 8000936:	2303      	movs	r3, #3
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2103      	movs	r1, #3
 800093e:	e786      	b.n	800084e <__aeabi_fdiv+0x56>
 8000940:	0028      	movs	r0, r5
 8000942:	f002 fafb 	bl	8002f3c <__clzsi2>
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	1836      	adds	r6, r6, r0
 800094a:	409d      	lsls	r5, r3
 800094c:	3676      	adds	r6, #118	; 0x76
 800094e:	2100      	movs	r1, #0
 8000950:	e77d      	b.n	800084e <__aeabi_fdiv+0x56>
 8000952:	2480      	movs	r4, #128	; 0x80
 8000954:	2300      	movs	r3, #0
 8000956:	03e4      	lsls	r4, r4, #15
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	e7ac      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 800095c:	2500      	movs	r5, #0
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	03db      	lsls	r3, r3, #15
 8000962:	421c      	tst	r4, r3
 8000964:	d028      	beq.n	80009b8 <__aeabi_fdiv+0x1c0>
 8000966:	421d      	tst	r5, r3
 8000968:	d126      	bne.n	80009b8 <__aeabi_fdiv+0x1c0>
 800096a:	432b      	orrs	r3, r5
 800096c:	025c      	lsls	r4, r3, #9
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	4643      	mov	r3, r8
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e79f      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000976:	0162      	lsls	r2, r4, #5
 8000978:	016c      	lsls	r4, r5, #5
 800097a:	42a2      	cmp	r2, r4
 800097c:	d224      	bcs.n	80009c8 <__aeabi_fdiv+0x1d0>
 800097e:	211b      	movs	r1, #27
 8000980:	2500      	movs	r5, #0
 8000982:	3e01      	subs	r6, #1
 8000984:	2701      	movs	r7, #1
 8000986:	0010      	movs	r0, r2
 8000988:	006d      	lsls	r5, r5, #1
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	2800      	cmp	r0, #0
 800098e:	db01      	blt.n	8000994 <__aeabi_fdiv+0x19c>
 8000990:	4294      	cmp	r4, r2
 8000992:	d801      	bhi.n	8000998 <__aeabi_fdiv+0x1a0>
 8000994:	1b12      	subs	r2, r2, r4
 8000996:	433d      	orrs	r5, r7
 8000998:	3901      	subs	r1, #1
 800099a:	2900      	cmp	r1, #0
 800099c:	d1f3      	bne.n	8000986 <__aeabi_fdiv+0x18e>
 800099e:	0014      	movs	r4, r2
 80009a0:	1e62      	subs	r2, r4, #1
 80009a2:	4194      	sbcs	r4, r2
 80009a4:	4325      	orrs	r5, r4
 80009a6:	e76d      	b.n	8000884 <__aeabi_fdiv+0x8c>
 80009a8:	46ba      	mov	sl, r7
 80009aa:	4659      	mov	r1, fp
 80009ac:	0025      	movs	r5, r4
 80009ae:	4653      	mov	r3, sl
 80009b0:	2902      	cmp	r1, #2
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x1be>
 80009b4:	e761      	b.n	800087a <__aeabi_fdiv+0x82>
 80009b6:	e77c      	b.n	80008b2 <__aeabi_fdiv+0xba>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	03db      	lsls	r3, r3, #15
 80009bc:	431c      	orrs	r4, r3
 80009be:	0264      	lsls	r4, r4, #9
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	003b      	movs	r3, r7
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	e776      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009c8:	1b12      	subs	r2, r2, r4
 80009ca:	211a      	movs	r1, #26
 80009cc:	2501      	movs	r5, #1
 80009ce:	e7d9      	b.n	8000984 <__aeabi_fdiv+0x18c>
 80009d0:	369e      	adds	r6, #158	; 0x9e
 80009d2:	002a      	movs	r2, r5
 80009d4:	40b5      	lsls	r5, r6
 80009d6:	002c      	movs	r4, r5
 80009d8:	40c2      	lsrs	r2, r0
 80009da:	1e65      	subs	r5, r4, #1
 80009dc:	41ac      	sbcs	r4, r5
 80009de:	4314      	orrs	r4, r2
 80009e0:	0762      	lsls	r2, r4, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009e4:	220f      	movs	r2, #15
 80009e6:	4022      	ands	r2, r4
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x1f6>
 80009ec:	3404      	adds	r4, #4
 80009ee:	0162      	lsls	r2, r4, #5
 80009f0:	d403      	bmi.n	80009fa <__aeabi_fdiv+0x202>
 80009f2:	01a4      	lsls	r4, r4, #6
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	2200      	movs	r2, #0
 80009f8:	e75d      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 80009fa:	2201      	movs	r2, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	e75a      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a00:	2480      	movs	r4, #128	; 0x80
 8000a02:	03e4      	lsls	r4, r4, #15
 8000a04:	432c      	orrs	r4, r5
 8000a06:	0264      	lsls	r4, r4, #9
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	e753      	b.n	80008b6 <__aeabi_fdiv+0xbe>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	08017624 	.word	0x08017624
 8000a14:	f7ffffff 	.word	0xf7ffffff
 8000a18:	08017664 	.word	0x08017664

08000a1c <__eqsf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	024e      	lsls	r6, r1, #9
 8000a22:	004c      	lsls	r4, r1, #1
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc9      	lsrs	r1, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00f      	beq.n	8000a56 <__eqsf2+0x3a>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d011      	beq.n	8000a5e <__eqsf2+0x42>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	d000      	beq.n	8000a42 <__eqsf2+0x26>
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d1fc      	bne.n	8000a40 <__eqsf2+0x24>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d00d      	beq.n	8000a66 <__eqsf2+0x4a>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f8      	bne.n	8000a40 <__eqsf2+0x24>
 8000a4e:	0028      	movs	r0, r5
 8000a50:	1e45      	subs	r5, r0, #1
 8000a52:	41a8      	sbcs	r0, r5
 8000a54:	e7f4      	b.n	8000a40 <__eqsf2+0x24>
 8000a56:	2001      	movs	r0, #1
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d1f1      	bne.n	8000a40 <__eqsf2+0x24>
 8000a5c:	e7eb      	b.n	8000a36 <__eqsf2+0x1a>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d1ed      	bne.n	8000a40 <__eqsf2+0x24>
 8000a64:	e7e9      	b.n	8000a3a <__eqsf2+0x1e>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7ea      	b.n	8000a40 <__eqsf2+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)

08000a6c <__gesf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	004a      	lsls	r2, r1, #1
 8000a70:	024e      	lsls	r6, r1, #9
 8000a72:	0245      	lsls	r5, r0, #9
 8000a74:	0044      	lsls	r4, r0, #1
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc3      	lsrs	r3, r0, #31
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2cff      	cmp	r4, #255	; 0xff
 8000a84:	d015      	beq.n	8000ab2 <__gesf2+0x46>
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d00e      	beq.n	8000aa8 <__gesf2+0x3c>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d115      	bne.n	8000aba <__gesf2+0x4e>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d101      	bne.n	8000a96 <__gesf2+0x2a>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d01c      	beq.n	8000ad0 <__gesf2+0x64>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d014      	beq.n	8000ac4 <__gesf2+0x58>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d027      	beq.n	8000aee <__gesf2+0x82>
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0ee      	beq.n	8000a8a <__gesf2+0x1e>
 8000aac:	2002      	movs	r0, #2
 8000aae:	4240      	negs	r0, r0
 8000ab0:	e7f9      	b.n	8000aa6 <__gesf2+0x3a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fa      	bne.n	8000aac <__gesf2+0x40>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00e      	beq.n	8000ad8 <__gesf2+0x6c>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d10e      	bne.n	8000adc <__gesf2+0x70>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0ed      	beq.n	8000a9e <__gesf2+0x32>
 8000ac2:	e00b      	b.n	8000adc <__gesf2+0x70>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	3901      	subs	r1, #1
 8000ac8:	4399      	bics	r1, r3
 8000aca:	0008      	movs	r0, r1
 8000acc:	3001      	adds	r0, #1
 8000ace:	e7ea      	b.n	8000aa6 <__gesf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e7      	beq.n	8000aa6 <__gesf2+0x3a>
 8000ad6:	e7e2      	b.n	8000a9e <__gesf2+0x32>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1e7      	bne.n	8000aac <__gesf2+0x40>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1de      	bne.n	8000a9e <__gesf2+0x32>
 8000ae0:	4294      	cmp	r4, r2
 8000ae2:	dd05      	ble.n	8000af0 <__gesf2+0x84>
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4008      	ands	r0, r1
 8000aea:	3801      	subs	r0, #1
 8000aec:	e7db      	b.n	8000aa6 <__gesf2+0x3a>
 8000aee:	2400      	movs	r4, #0
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	dc04      	bgt.n	8000afe <__gesf2+0x92>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d8d2      	bhi.n	8000a9e <__gesf2+0x32>
 8000af8:	2000      	movs	r0, #0
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d2d3      	bcs.n	8000aa6 <__gesf2+0x3a>
 8000afe:	1e58      	subs	r0, r3, #1
 8000b00:	2301      	movs	r3, #1
 8000b02:	4398      	bics	r0, r3
 8000b04:	3001      	adds	r0, #1
 8000b06:	e7ce      	b.n	8000aa6 <__gesf2+0x3a>

08000b08 <__lesf2>:
 8000b08:	b530      	push	{r4, r5, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0244      	lsls	r4, r0, #9
 8000b0e:	024d      	lsls	r5, r1, #9
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e00      	lsrs	r0, r0, #24
 8000b1c:	0fc9      	lsrs	r1, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x40>
 8000b22:	28ff      	cmp	r0, #255	; 0xff
 8000b24:	d00c      	beq.n	8000b40 <__lesf2+0x38>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d112      	bne.n	8000b50 <__lesf2+0x48>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d119      	bne.n	8000b62 <__lesf2+0x5a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__lesf2+0x5a>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d02b      	beq.n	8000b8e <__lesf2+0x86>
 8000b36:	2002      	movs	r0, #2
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4018      	ands	r0, r3
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	e026      	b.n	8000b8e <__lesf2+0x86>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d0f0      	beq.n	8000b26 <__lesf2+0x1e>
 8000b44:	2002      	movs	r0, #2
 8000b46:	e022      	b.n	8000b8e <__lesf2+0x86>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d1fb      	bne.n	8000b44 <__lesf2+0x3c>
 8000b4c:	28ff      	cmp	r0, #255	; 0xff
 8000b4e:	d01f      	beq.n	8000b90 <__lesf2+0x88>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d11f      	bne.n	8000b94 <__lesf2+0x8c>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d11d      	bne.n	8000b94 <__lesf2+0x8c>
 8000b58:	2002      	movs	r0, #2
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4018      	ands	r0, r3
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e015      	b.n	8000b8e <__lesf2+0x86>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d00e      	beq.n	8000b84 <__lesf2+0x7c>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d1e5      	bne.n	8000b36 <__lesf2+0x2e>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	dc04      	bgt.n	8000b7a <__lesf2+0x72>
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d8e0      	bhi.n	8000b36 <__lesf2+0x2e>
 8000b74:	2000      	movs	r0, #0
 8000b76:	42ac      	cmp	r4, r5
 8000b78:	d209      	bcs.n	8000b8e <__lesf2+0x86>
 8000b7a:	1e58      	subs	r0, r3, #1
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4398      	bics	r0, r3
 8000b80:	3001      	adds	r0, #1
 8000b82:	e004      	b.n	8000b8e <__lesf2+0x86>
 8000b84:	2301      	movs	r3, #1
 8000b86:	3901      	subs	r1, #1
 8000b88:	4399      	bics	r1, r3
 8000b8a:	0008      	movs	r0, r1
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	bd30      	pop	{r4, r5, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1d7      	bne.n	8000b44 <__lesf2+0x3c>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d1ce      	bne.n	8000b36 <__lesf2+0x2e>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	dde7      	ble.n	8000b6c <__lesf2+0x64>
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	1e58      	subs	r0, r3, #1
 8000ba0:	4008      	ands	r0, r1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7f3      	b.n	8000b8e <__lesf2+0x86>
 8000ba6:	46c0      	nop			; (mov r8, r8)

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	464e      	mov	r6, r9
 8000bac:	4657      	mov	r7, sl
 8000bae:	4645      	mov	r5, r8
 8000bb0:	46de      	mov	lr, fp
 8000bb2:	b5e0      	push	{r5, r6, r7, lr}
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0045      	lsls	r5, r0, #1
 8000bba:	b083      	sub	sp, #12
 8000bbc:	1c0f      	adds	r7, r1, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	0e2d      	lsrs	r5, r5, #24
 8000bc2:	0fc6      	lsrs	r6, r0, #31
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d057      	beq.n	8000c78 <__aeabi_fmul+0xd0>
 8000bc8:	2dff      	cmp	r5, #255	; 0xff
 8000bca:	d024      	beq.n	8000c16 <__aeabi_fmul+0x6e>
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	04c0      	lsls	r0, r0, #19
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4681      	mov	r9, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	469b      	mov	fp, r3
 8000bdc:	3d7f      	subs	r5, #127	; 0x7f
 8000bde:	027c      	lsls	r4, r7, #9
 8000be0:	007a      	lsls	r2, r7, #1
 8000be2:	0ffb      	lsrs	r3, r7, #31
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	4698      	mov	r8, r3
 8000bea:	d023      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000bec:	2aff      	cmp	r2, #255	; 0xff
 8000bee:	d04b      	beq.n	8000c88 <__aeabi_fmul+0xe0>
 8000bf0:	00e3      	lsls	r3, r4, #3
 8000bf2:	2480      	movs	r4, #128	; 0x80
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	04e4      	lsls	r4, r4, #19
 8000bf8:	3a7f      	subs	r2, #127	; 0x7f
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	18ad      	adds	r5, r5, r2
 8000bfe:	1c6b      	adds	r3, r5, #1
 8000c00:	4647      	mov	r7, r8
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4653      	mov	r3, sl
 8000c06:	4077      	eors	r7, r6
 8000c08:	003a      	movs	r2, r7
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d848      	bhi.n	8000ca0 <__aeabi_fmul+0xf8>
 8000c0e:	497d      	ldr	r1, [pc, #500]	; (8000e04 <__aeabi_fmul+0x25c>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	58cb      	ldr	r3, [r1, r3]
 8000c14:	469f      	mov	pc, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fmul+0x74>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fmul+0x180>
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b06      	subs	r3, #6
 8000c22:	469b      	mov	fp, r3
 8000c24:	027c      	lsls	r4, r7, #9
 8000c26:	007a      	lsls	r2, r7, #1
 8000c28:	0ffb      	lsrs	r3, r7, #31
 8000c2a:	25ff      	movs	r5, #255	; 0xff
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	4698      	mov	r8, r3
 8000c32:	d1db      	bne.n	8000bec <__aeabi_fmul+0x44>
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fmul+0x92>
 8000c38:	e090      	b.n	8000d5c <__aeabi_fmul+0x1b4>
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4692      	mov	sl, r2
 8000c42:	2001      	movs	r0, #1
 8000c44:	e7db      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c46:	464c      	mov	r4, r9
 8000c48:	4658      	mov	r0, fp
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d024      	beq.n	8000c9a <__aeabi_fmul+0xf2>
 8000c50:	2803      	cmp	r0, #3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0xae>
 8000c54:	e0cf      	b.n	8000df6 <__aeabi_fmul+0x24e>
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2801      	cmp	r0, #1
 8000c5c:	d14d      	bne.n	8000cfa <__aeabi_fmul+0x152>
 8000c5e:	0258      	lsls	r0, r3, #9
 8000c60:	05d2      	lsls	r2, r2, #23
 8000c62:	0a40      	lsrs	r0, r0, #9
 8000c64:	07ff      	lsls	r7, r7, #31
 8000c66:	4310      	orrs	r0, r2
 8000c68:	4338      	orrs	r0, r7
 8000c6a:	b003      	add	sp, #12
 8000c6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4699      	mov	r9, r3
 8000c72:	46a2      	mov	sl, r4
 8000c74:	46ab      	mov	fp, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d15b      	bne.n	8000d34 <__aeabi_fmul+0x18c>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7aa      	b.n	8000bde <__aeabi_fmul+0x36>
 8000c88:	35ff      	adds	r5, #255	; 0xff
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d160      	bne.n	8000d50 <__aeabi_fmul+0x1a8>
 8000c8e:	4652      	mov	r2, sl
 8000c90:	2302      	movs	r3, #2
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4692      	mov	sl, r2
 8000c96:	2002      	movs	r0, #2
 8000c98:	e7b1      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7de      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	0426      	lsls	r6, r4, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0418      	lsls	r0, r3, #16
 8000cae:	4661      	mov	r1, ip
 8000cb0:	0033      	movs	r3, r6
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	4343      	muls	r3, r0
 8000cba:	434e      	muls	r6, r1
 8000cbc:	4350      	muls	r0, r2
 8000cbe:	4354      	muls	r4, r2
 8000cc0:	1980      	adds	r0, r0, r6
 8000cc2:	0c1a      	lsrs	r2, r3, #16
 8000cc4:	1812      	adds	r2, r2, r0
 8000cc6:	4296      	cmp	r6, r2
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0x12a>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	0410      	lsls	r0, r2, #16
 8000cd8:	18c0      	adds	r0, r0, r3
 8000cda:	0183      	lsls	r3, r0, #6
 8000cdc:	1e5e      	subs	r6, r3, #1
 8000cde:	41b3      	sbcs	r3, r6
 8000ce0:	0e80      	lsrs	r0, r0, #26
 8000ce2:	4318      	orrs	r0, r3
 8000ce4:	0c13      	lsrs	r3, r2, #16
 8000ce6:	191b      	adds	r3, r3, r4
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	4303      	orrs	r3, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d579      	bpl.n	8000de6 <__aeabi_fmul+0x23e>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	0862      	lsrs	r2, r4, #1
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	327f      	adds	r2, #127	; 0x7f
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	dd4d      	ble.n	8000d9e <__aeabi_fmul+0x1f6>
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x168>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0123      	lsls	r3, r4, #4
 8000d12:	d503      	bpl.n	8000d1c <__aeabi_fmul+0x174>
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <__aeabi_fmul+0x260>)
 8000d16:	9a01      	ldr	r2, [sp, #4]
 8000d18:	401c      	ands	r4, r3
 8000d1a:	3280      	adds	r2, #128	; 0x80
 8000d1c:	2afe      	cmp	r2, #254	; 0xfe
 8000d1e:	dcbc      	bgt.n	8000c9a <__aeabi_fmul+0xf2>
 8000d20:	01a3      	lsls	r3, r4, #6
 8000d22:	0a5b      	lsrs	r3, r3, #9
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	e79a      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	25ff      	movs	r5, #255	; 0xff
 8000d30:	469b      	mov	fp, r3
 8000d32:	e754      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 f901 	bl	8002f3c <__clzsi2>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	2576      	movs	r5, #118	; 0x76
 8000d40:	409a      	lsls	r2, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	426d      	negs	r5, r5
 8000d46:	4691      	mov	r9, r2
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	e746      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d50:	4652      	mov	r2, sl
 8000d52:	2303      	movs	r3, #3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4692      	mov	sl, r2
 8000d58:	2003      	movs	r0, #3
 8000d5a:	e750      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f8ed 	bl	8002f3c <__clzsi2>
 8000d62:	1f43      	subs	r3, r0, #5
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	409c      	lsls	r4, r3
 8000d68:	3d76      	subs	r5, #118	; 0x76
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e747      	b.n	8000bfe <__aeabi_fmul+0x56>
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	2700      	movs	r7, #0
 8000d72:	03db      	lsls	r3, r3, #15
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	e772      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	e766      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	0032      	movs	r2, r6
 8000d80:	4658      	mov	r0, fp
 8000d82:	e762      	b.n	8000c4a <__aeabi_fmul+0xa2>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	464a      	mov	r2, r9
 8000d88:	03db      	lsls	r3, r3, #15
 8000d8a:	421a      	tst	r2, r3
 8000d8c:	d022      	beq.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d8e:	421c      	tst	r4, r3
 8000d90:	d120      	bne.n	8000dd4 <__aeabi_fmul+0x22c>
 8000d92:	4323      	orrs	r3, r4
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	4647      	mov	r7, r8
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	e75f      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	1a9a      	subs	r2, r3, r2
 8000da2:	2a1b      	cmp	r2, #27
 8000da4:	dc21      	bgt.n	8000dea <__aeabi_fmul+0x242>
 8000da6:	0023      	movs	r3, r4
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	319e      	adds	r1, #158	; 0x9e
 8000dae:	408c      	lsls	r4, r1
 8000db0:	001a      	movs	r2, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	1e5c      	subs	r4, r3, #1
 8000db6:	41a3      	sbcs	r3, r4
 8000db8:	4313      	orrs	r3, r2
 8000dba:	075a      	lsls	r2, r3, #29
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2a04      	cmp	r2, #4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_fmul+0x220>
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	015a      	lsls	r2, r3, #5
 8000dca:	d411      	bmi.n	8000df0 <__aeabi_fmul+0x248>
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e744      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0037      	movs	r7, r6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	e73b      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000de6:	9501      	str	r5, [sp, #4]
 8000de8:	e787      	b.n	8000cfa <__aeabi_fmul+0x152>
 8000dea:	2200      	movs	r2, #0
 8000dec:	2300      	movs	r3, #0
 8000dee:	e736      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df0:	2201      	movs	r2, #1
 8000df2:	2300      	movs	r3, #0
 8000df4:	e733      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	03db      	lsls	r3, r3, #15
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	0a5b      	lsrs	r3, r3, #9
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e72c      	b.n	8000c5e <__aeabi_fmul+0xb6>
 8000e04:	080176a4 	.word	0x080176a4
 8000e08:	f7ffffff 	.word	0xf7ffffff

08000e0c <__aeabi_fsub>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	4647      	mov	r7, r8
 8000e10:	46ce      	mov	lr, r9
 8000e12:	0044      	lsls	r4, r0, #1
 8000e14:	0fc2      	lsrs	r2, r0, #31
 8000e16:	b580      	push	{r7, lr}
 8000e18:	0247      	lsls	r7, r0, #9
 8000e1a:	0248      	lsls	r0, r1, #9
 8000e1c:	0a40      	lsrs	r0, r0, #9
 8000e1e:	4684      	mov	ip, r0
 8000e20:	4666      	mov	r6, ip
 8000e22:	0048      	lsls	r0, r1, #1
 8000e24:	0a7f      	lsrs	r7, r7, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	00f6      	lsls	r6, r6, #3
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	00fb      	lsls	r3, r7, #3
 8000e30:	0e00      	lsrs	r0, r0, #24
 8000e32:	0fc9      	lsrs	r1, r1, #31
 8000e34:	46b1      	mov	r9, r6
 8000e36:	28ff      	cmp	r0, #255	; 0xff
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x30>
 8000e3a:	e085      	b.n	8000f48 <__aeabi_fsub+0x13c>
 8000e3c:	2601      	movs	r6, #1
 8000e3e:	4071      	eors	r1, r6
 8000e40:	1a26      	subs	r6, r4, r0
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d057      	beq.n	8000ef6 <__aeabi_fsub+0xea>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	dd43      	ble.n	8000ed2 <__aeabi_fsub+0xc6>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x44>
 8000e4e:	e07f      	b.n	8000f50 <__aeabi_fsub+0x144>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x4c>
 8000e56:	e0aa      	b.n	8000fae <__aeabi_fsub+0x1a2>
 8000e58:	3e01      	subs	r6, #1
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x54>
 8000e5e:	e0f7      	b.n	8001050 <__aeabi_fsub+0x244>
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x5c>
 8000e66:	e08b      	b.n	8000f80 <__aeabi_fsub+0x174>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	099c      	lsrs	r4, r3, #6
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	f002 f865 	bl	8002f3c <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4084      	lsls	r4, r0
 8000e76:	4285      	cmp	r5, r0
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fsub+0x70>
 8000e7a:	e0d3      	b.n	8001024 <__aeabi_fsub+0x218>
 8000e7c:	1b45      	subs	r5, r0, r5
 8000e7e:	0023      	movs	r3, r4
 8000e80:	2020      	movs	r0, #32
 8000e82:	3501      	adds	r5, #1
 8000e84:	40eb      	lsrs	r3, r5
 8000e86:	1b45      	subs	r5, r0, r5
 8000e88:	40ac      	lsls	r4, r5
 8000e8a:	1e62      	subs	r2, r4, #1
 8000e8c:	4194      	sbcs	r4, r2
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2407      	movs	r4, #7
 8000e92:	2500      	movs	r5, #0
 8000e94:	401c      	ands	r4, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	4641      	mov	r1, r8
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x9e>
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	0159      	lsls	r1, r3, #5
 8000eac:	d400      	bmi.n	8000eb0 <__aeabi_fsub+0xa4>
 8000eae:	e080      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	b2ec      	uxtb	r4, r5
 8000eb4:	2dff      	cmp	r5, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xae>
 8000eb8:	e0a3      	b.n	8001002 <__aeabi_fsub+0x1f6>
 8000eba:	24ff      	movs	r4, #255	; 0xff
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	05e4      	lsls	r4, r4, #23
 8000ec2:	0a58      	lsrs	r0, r3, #9
 8000ec4:	07d2      	lsls	r2, r2, #31
 8000ec6:	4320      	orrs	r0, r4
 8000ec8:	4310      	orrs	r0, r2
 8000eca:	bc0c      	pop	{r2, r3}
 8000ecc:	4690      	mov	r8, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d174      	bne.n	8000fc0 <__aeabi_fsub+0x1b4>
 8000ed6:	1c60      	adds	r0, r4, #1
 8000ed8:	b2c0      	uxtb	r0, r0
 8000eda:	2801      	cmp	r0, #1
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_fsub+0xd4>
 8000ede:	e0a7      	b.n	8001030 <__aeabi_fsub+0x224>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	1a9c      	subs	r4, r3, r2
 8000ee4:	0162      	lsls	r2, r4, #5
 8000ee6:	d500      	bpl.n	8000eea <__aeabi_fsub+0xde>
 8000ee8:	e0b6      	b.n	8001058 <__aeabi_fsub+0x24c>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d1be      	bne.n	8000e6c <__aeabi_fsub+0x60>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e7e3      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	dc00      	bgt.n	8000efc <__aeabi_fsub+0xf0>
 8000efa:	e085      	b.n	8001008 <__aeabi_fsub+0x1fc>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d046      	beq.n	8000f8e <__aeabi_fsub+0x182>
 8000f00:	2cff      	cmp	r4, #255	; 0xff
 8000f02:	d049      	beq.n	8000f98 <__aeabi_fsub+0x18c>
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	4648      	mov	r0, r9
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2e1b      	cmp	r6, #27
 8000f12:	dc09      	bgt.n	8000f28 <__aeabi_fsub+0x11c>
 8000f14:	2020      	movs	r0, #32
 8000f16:	464c      	mov	r4, r9
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	4084      	lsls	r4, r0
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	0020      	movs	r0, r4
 8000f20:	40f2      	lsrs	r2, r6
 8000f22:	1e44      	subs	r4, r0, #1
 8000f24:	41a0      	sbcs	r0, r4
 8000f26:	4302      	orrs	r2, r0
 8000f28:	189b      	adds	r3, r3, r2
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	d528      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f2e:	3501      	adds	r5, #1
 8000f30:	2dff      	cmp	r5, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x12a>
 8000f34:	e0a8      	b.n	8001088 <__aeabi_fsub+0x27c>
 8000f36:	2201      	movs	r2, #1
 8000f38:	2407      	movs	r4, #7
 8000f3a:	4994      	ldr	r1, [pc, #592]	; (800118c <__aeabi_fsub+0x380>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	400b      	ands	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	401c      	ands	r4, r3
 8000f46:	e7a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x142>
 8000f4c:	e778      	b.n	8000e40 <__aeabi_fsub+0x34>
 8000f4e:	e775      	b.n	8000e3c <__aeabi_fsub+0x30>
 8000f50:	2cff      	cmp	r4, #255	; 0xff
 8000f52:	d054      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	4649      	mov	r1, r9
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2e1b      	cmp	r6, #27
 8000f62:	dc09      	bgt.n	8000f78 <__aeabi_fsub+0x16c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	4648      	mov	r0, r9
 8000f68:	1b89      	subs	r1, r1, r6
 8000f6a:	4088      	lsls	r0, r1
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	0001      	movs	r1, r0
 8000f70:	40f2      	lsrs	r2, r6
 8000f72:	1e48      	subs	r0, r1, #1
 8000f74:	4181      	sbcs	r1, r0
 8000f76:	430a      	orrs	r2, r1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d500      	bpl.n	8000f80 <__aeabi_fsub+0x174>
 8000f7e:	e773      	b.n	8000e68 <__aeabi_fsub+0x5c>
 8000f80:	2201      	movs	r2, #1
 8000f82:	4641      	mov	r1, r8
 8000f84:	400a      	ands	r2, r1
 8000f86:	0759      	lsls	r1, r3, #29
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x180>
 8000f8a:	e789      	b.n	8000ea0 <__aeabi_fsub+0x94>
 8000f8c:	e011      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f8e:	4648      	mov	r0, r9
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d158      	bne.n	8001046 <__aeabi_fsub+0x23a>
 8000f94:	2cff      	cmp	r4, #255	; 0xff
 8000f96:	d10c      	bne.n	8000fb2 <__aeabi_fsub+0x1a6>
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x194>
 8000f9e:	e78c      	b.n	8000eba <__aeabi_fsub+0xae>
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	03c0      	lsls	r0, r0, #15
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	0a5b      	lsrs	r3, r3, #9
 8000faa:	24ff      	movs	r4, #255	; 0xff
 8000fac:	e787      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fae:	2cff      	cmp	r4, #255	; 0xff
 8000fb0:	d025      	beq.n	8000ffe <__aeabi_fsub+0x1f2>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d0f0      	beq.n	8000f9a <__aeabi_fsub+0x18e>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	b2ec      	uxtb	r4, r5
 8000fbe:	e77e      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d04d      	beq.n	8001060 <__aeabi_fsub+0x254>
 8000fc4:	28ff      	cmp	r0, #255	; 0xff
 8000fc6:	d018      	beq.n	8000ffa <__aeabi_fsub+0x1ee>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	04e4      	lsls	r4, r4, #19
 8000fcc:	4272      	negs	r2, r6
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	2a1b      	cmp	r2, #27
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_fsub+0x1ca>
 8000fd4:	e0c4      	b.n	8001160 <__aeabi_fsub+0x354>
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	2520      	movs	r5, #32
 8000fda:	40d4      	lsrs	r4, r2
 8000fdc:	1aaa      	subs	r2, r5, r2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	0005      	movs	r5, r0
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4688      	mov	r8, r1
 8000fee:	e738      	b.n	8000e62 <__aeabi_fsub+0x56>
 8000ff0:	1c72      	adds	r2, r6, #1
 8000ff2:	d0f8      	beq.n	8000fe6 <__aeabi_fsub+0x1da>
 8000ff4:	43f2      	mvns	r2, r6
 8000ff6:	28ff      	cmp	r0, #255	; 0xff
 8000ff8:	d1ea      	bne.n	8000fd0 <__aeabi_fsub+0x1c4>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	25ff      	movs	r5, #255	; 0xff
 8001000:	e7d7      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	0a5b      	lsrs	r3, r3, #9
 8001006:	e75a      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001008:	2e00      	cmp	r6, #0
 800100a:	d141      	bne.n	8001090 <__aeabi_fsub+0x284>
 800100c:	1c65      	adds	r5, r4, #1
 800100e:	b2e9      	uxtb	r1, r5
 8001010:	2901      	cmp	r1, #1
 8001012:	dd45      	ble.n	80010a0 <__aeabi_fsub+0x294>
 8001014:	2dff      	cmp	r5, #255	; 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x20e>
 8001018:	e74f      	b.n	8000eba <__aeabi_fsub+0xae>
 800101a:	2407      	movs	r4, #7
 800101c:	444b      	add	r3, r9
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	401c      	ands	r4, r3
 8001022:	e738      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001024:	2207      	movs	r2, #7
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <__aeabi_fsub+0x384>)
 8001028:	1a2d      	subs	r5, r5, r0
 800102a:	4023      	ands	r3, r4
 800102c:	4014      	ands	r4, r2
 800102e:	e732      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001030:	2c00      	cmp	r4, #0
 8001032:	d11d      	bne.n	8001070 <__aeabi_fsub+0x264>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d17a      	bne.n	800112e <__aeabi_fsub+0x322>
 8001038:	464b      	mov	r3, r9
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_fsub+0x234>
 800103e:	e091      	b.n	8001164 <__aeabi_fsub+0x358>
 8001040:	000a      	movs	r2, r1
 8001042:	2500      	movs	r5, #0
 8001044:	e7b5      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001046:	3e01      	subs	r6, #1
 8001048:	2e00      	cmp	r6, #0
 800104a:	d119      	bne.n	8001080 <__aeabi_fsub+0x274>
 800104c:	444b      	add	r3, r9
 800104e:	e76c      	b.n	8000f2a <__aeabi_fsub+0x11e>
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d184      	bne.n	8000f5e <__aeabi_fsub+0x152>
 8001054:	25ff      	movs	r5, #255	; 0xff
 8001056:	e7ac      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001058:	464a      	mov	r2, r9
 800105a:	4688      	mov	r8, r1
 800105c:	1ad4      	subs	r4, r2, r3
 800105e:	e705      	b.n	8000e6c <__aeabi_fsub+0x60>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <__aeabi_fsub+0x1e4>
 8001064:	000a      	movs	r2, r1
 8001066:	28ff      	cmp	r0, #255	; 0xff
 8001068:	d0c8      	beq.n	8000ffc <__aeabi_fsub+0x1f0>
 800106a:	0005      	movs	r5, r0
 800106c:	464b      	mov	r3, r9
 800106e:	e7a0      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d149      	bne.n	8001108 <__aeabi_fsub+0x2fc>
 8001074:	464b      	mov	r3, r9
 8001076:	2b00      	cmp	r3, #0
 8001078:	d077      	beq.n	800116a <__aeabi_fsub+0x35e>
 800107a:	000a      	movs	r2, r1
 800107c:	25ff      	movs	r5, #255	; 0xff
 800107e:	e798      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001080:	2cff      	cmp	r4, #255	; 0xff
 8001082:	d000      	beq.n	8001086 <__aeabi_fsub+0x27a>
 8001084:	e743      	b.n	8000f0e <__aeabi_fsub+0x102>
 8001086:	e787      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001088:	000a      	movs	r2, r1
 800108a:	24ff      	movs	r4, #255	; 0xff
 800108c:	2300      	movs	r3, #0
 800108e:	e716      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d115      	bne.n	80010c0 <__aeabi_fsub+0x2b4>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d157      	bne.n	8001148 <__aeabi_fsub+0x33c>
 8001098:	28ff      	cmp	r0, #255	; 0xff
 800109a:	d1e6      	bne.n	800106a <__aeabi_fsub+0x25e>
 800109c:	464b      	mov	r3, r9
 800109e:	e77b      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d120      	bne.n	80010e6 <__aeabi_fsub+0x2da>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d057      	beq.n	8001158 <__aeabi_fsub+0x34c>
 80010a8:	4649      	mov	r1, r9
 80010aa:	2900      	cmp	r1, #0
 80010ac:	d053      	beq.n	8001156 <__aeabi_fsub+0x34a>
 80010ae:	444b      	add	r3, r9
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	d568      	bpl.n	8001186 <__aeabi_fsub+0x37a>
 80010b4:	2407      	movs	r4, #7
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <__aeabi_fsub+0x384>)
 80010b8:	401c      	ands	r4, r3
 80010ba:	2501      	movs	r5, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	e6ea      	b.n	8000e96 <__aeabi_fsub+0x8a>
 80010c0:	28ff      	cmp	r0, #255	; 0xff
 80010c2:	d0eb      	beq.n	800109c <__aeabi_fsub+0x290>
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	04d2      	lsls	r2, r2, #19
 80010c8:	4276      	negs	r6, r6
 80010ca:	4313      	orrs	r3, r2
 80010cc:	2e1b      	cmp	r6, #27
 80010ce:	dc53      	bgt.n	8001178 <__aeabi_fsub+0x36c>
 80010d0:	2520      	movs	r5, #32
 80010d2:	1bad      	subs	r5, r5, r6
 80010d4:	001a      	movs	r2, r3
 80010d6:	40ab      	lsls	r3, r5
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	1e5c      	subs	r4, r3, #1
 80010dc:	41a3      	sbcs	r3, r4
 80010de:	4313      	orrs	r3, r2
 80010e0:	444b      	add	r3, r9
 80010e2:	0005      	movs	r5, r0
 80010e4:	e721      	b.n	8000f2a <__aeabi_fsub+0x11e>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0d8      	beq.n	800109c <__aeabi_fsub+0x290>
 80010ea:	4649      	mov	r1, r9
 80010ec:	2900      	cmp	r1, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x2e6>
 80010f0:	e752      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	03c9      	lsls	r1, r1, #15
 80010f6:	420f      	tst	r7, r1
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x2f0>
 80010fa:	e74d      	b.n	8000f98 <__aeabi_fsub+0x18c>
 80010fc:	4660      	mov	r0, ip
 80010fe:	4208      	tst	r0, r1
 8001100:	d000      	beq.n	8001104 <__aeabi_fsub+0x2f8>
 8001102:	e749      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001104:	464b      	mov	r3, r9
 8001106:	e747      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001108:	4648      	mov	r0, r9
 800110a:	25ff      	movs	r5, #255	; 0xff
 800110c:	2800      	cmp	r0, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x306>
 8001110:	e74f      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	03d2      	lsls	r2, r2, #15
 8001116:	4217      	tst	r7, r2
 8001118:	d004      	beq.n	8001124 <__aeabi_fsub+0x318>
 800111a:	4660      	mov	r0, ip
 800111c:	4210      	tst	r0, r2
 800111e:	d101      	bne.n	8001124 <__aeabi_fsub+0x318>
 8001120:	464b      	mov	r3, r9
 8001122:	4688      	mov	r8, r1
 8001124:	2201      	movs	r2, #1
 8001126:	4641      	mov	r1, r8
 8001128:	25ff      	movs	r5, #255	; 0xff
 800112a:	400a      	ands	r2, r1
 800112c:	e741      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 800112e:	4648      	mov	r0, r9
 8001130:	2800      	cmp	r0, #0
 8001132:	d01f      	beq.n	8001174 <__aeabi_fsub+0x368>
 8001134:	1a1a      	subs	r2, r3, r0
 8001136:	0150      	lsls	r0, r2, #5
 8001138:	d520      	bpl.n	800117c <__aeabi_fsub+0x370>
 800113a:	464a      	mov	r2, r9
 800113c:	2407      	movs	r4, #7
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	401c      	ands	r4, r3
 8001142:	4688      	mov	r8, r1
 8001144:	2500      	movs	r5, #0
 8001146:	e6a6      	b.n	8000e96 <__aeabi_fsub+0x8a>
 8001148:	1c74      	adds	r4, r6, #1
 800114a:	d0c9      	beq.n	80010e0 <__aeabi_fsub+0x2d4>
 800114c:	43f6      	mvns	r6, r6
 800114e:	28ff      	cmp	r0, #255	; 0xff
 8001150:	d1bc      	bne.n	80010cc <__aeabi_fsub+0x2c0>
 8001152:	464b      	mov	r3, r9
 8001154:	e720      	b.n	8000f98 <__aeabi_fsub+0x18c>
 8001156:	4699      	mov	r9, r3
 8001158:	464b      	mov	r3, r9
 800115a:	2500      	movs	r5, #0
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	e72b      	b.n	8000fb8 <__aeabi_fsub+0x1ac>
 8001160:	2301      	movs	r3, #1
 8001162:	e740      	b.n	8000fe6 <__aeabi_fsub+0x1da>
 8001164:	2200      	movs	r2, #0
 8001166:	2300      	movs	r3, #0
 8001168:	e6a9      	b.n	8000ebe <__aeabi_fsub+0xb2>
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	2200      	movs	r2, #0
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	24ff      	movs	r4, #255	; 0xff
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0xb2>
 8001174:	2500      	movs	r5, #0
 8001176:	e71c      	b.n	8000fb2 <__aeabi_fsub+0x1a6>
 8001178:	2301      	movs	r3, #1
 800117a:	e7b1      	b.n	80010e0 <__aeabi_fsub+0x2d4>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d0f1      	beq.n	8001164 <__aeabi_fsub+0x358>
 8001180:	0013      	movs	r3, r2
 8001182:	2500      	movs	r5, #0
 8001184:	e6fc      	b.n	8000f80 <__aeabi_fsub+0x174>
 8001186:	2500      	movs	r5, #0
 8001188:	e6fa      	b.n	8000f80 <__aeabi_fsub+0x174>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	7dffffff 	.word	0x7dffffff
 8001190:	fbffffff 	.word	0xfbffffff

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	0e12      	lsrs	r2, r2, #24
 800119e:	2000      	movs	r0, #0
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x2c>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	d80c      	bhi.n	80011c2 <__aeabi_f2iz+0x2e>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a95      	cmp	r2, #149	; 0x95
 80011b0:	dc0a      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b2:	2096      	movs	r0, #150	; 0x96
 80011b4:	1a82      	subs	r2, r0, r2
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	4248      	negs	r0, r1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_f2iz+0x2c>
 80011be:	0008      	movs	r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011c4:	1898      	adds	r0, r3, r2
 80011c6:	e7fb      	b.n	80011c0 <__aeabi_f2iz+0x2c>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f4      	b.n	80011b8 <__aeabi_f2iz+0x24>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_ui2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	1e04      	subs	r4, r0, #0
 80011d8:	d034      	beq.n	8001244 <__aeabi_ui2f+0x70>
 80011da:	f001 feaf 	bl	8002f3c <__clzsi2>
 80011de:	229e      	movs	r2, #158	; 0x9e
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	2a96      	cmp	r2, #150	; 0x96
 80011e4:	dc07      	bgt.n	80011f6 <__aeabi_ui2f+0x22>
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	2808      	cmp	r0, #8
 80011ea:	dd2e      	ble.n	800124a <__aeabi_ui2f+0x76>
 80011ec:	3808      	subs	r0, #8
 80011ee:	4084      	lsls	r4, r0
 80011f0:	0260      	lsls	r0, r4, #9
 80011f2:	0a40      	lsrs	r0, r0, #9
 80011f4:	e021      	b.n	800123a <__aeabi_ui2f+0x66>
 80011f6:	2a99      	cmp	r2, #153	; 0x99
 80011f8:	dd09      	ble.n	800120e <__aeabi_ui2f+0x3a>
 80011fa:	0003      	movs	r3, r0
 80011fc:	0021      	movs	r1, r4
 80011fe:	331b      	adds	r3, #27
 8001200:	4099      	lsls	r1, r3
 8001202:	1e4b      	subs	r3, r1, #1
 8001204:	4199      	sbcs	r1, r3
 8001206:	2305      	movs	r3, #5
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	40dc      	lsrs	r4, r3
 800120c:	430c      	orrs	r4, r1
 800120e:	2805      	cmp	r0, #5
 8001210:	dd01      	ble.n	8001216 <__aeabi_ui2f+0x42>
 8001212:	1f43      	subs	r3, r0, #5
 8001214:	409c      	lsls	r4, r3
 8001216:	0023      	movs	r3, r4
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <__aeabi_ui2f+0x7c>)
 800121a:	400b      	ands	r3, r1
 800121c:	0765      	lsls	r5, r4, #29
 800121e:	d009      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001220:	250f      	movs	r5, #15
 8001222:	402c      	ands	r4, r5
 8001224:	2c04      	cmp	r4, #4
 8001226:	d005      	beq.n	8001234 <__aeabi_ui2f+0x60>
 8001228:	3304      	adds	r3, #4
 800122a:	015c      	lsls	r4, r3, #5
 800122c:	d502      	bpl.n	8001234 <__aeabi_ui2f+0x60>
 800122e:	229f      	movs	r2, #159	; 0x9f
 8001230:	400b      	ands	r3, r1
 8001232:	1a12      	subs	r2, r2, r0
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	0a58      	lsrs	r0, r3, #9
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0240      	lsls	r0, r0, #9
 800123c:	05d2      	lsls	r2, r2, #23
 800123e:	0a40      	lsrs	r0, r0, #9
 8001240:	4310      	orrs	r0, r2
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	2200      	movs	r2, #0
 8001246:	2000      	movs	r0, #0
 8001248:	e7f7      	b.n	800123a <__aeabi_ui2f+0x66>
 800124a:	0260      	lsls	r0, r4, #9
 800124c:	0a40      	lsrs	r0, r0, #9
 800124e:	e7f4      	b.n	800123a <__aeabi_ui2f+0x66>
 8001250:	fbffffff 	.word	0xfbffffff

08001254 <__aeabi_dadd>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	464f      	mov	r7, r9
 8001258:	4646      	mov	r6, r8
 800125a:	46d6      	mov	lr, sl
 800125c:	000c      	movs	r4, r1
 800125e:	0309      	lsls	r1, r1, #12
 8001260:	b5c0      	push	{r6, r7, lr}
 8001262:	0a49      	lsrs	r1, r1, #9
 8001264:	0f47      	lsrs	r7, r0, #29
 8001266:	005e      	lsls	r6, r3, #1
 8001268:	4339      	orrs	r1, r7
 800126a:	031f      	lsls	r7, r3, #12
 800126c:	0fdb      	lsrs	r3, r3, #31
 800126e:	469c      	mov	ip, r3
 8001270:	0065      	lsls	r5, r4, #1
 8001272:	0a7b      	lsrs	r3, r7, #9
 8001274:	0f57      	lsrs	r7, r2, #29
 8001276:	431f      	orrs	r7, r3
 8001278:	0d6d      	lsrs	r5, r5, #21
 800127a:	0fe4      	lsrs	r4, r4, #31
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	46a1      	mov	r9, r4
 8001280:	00c0      	lsls	r0, r0, #3
 8001282:	46b8      	mov	r8, r7
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	1bab      	subs	r3, r5, r6
 8001288:	4564      	cmp	r4, ip
 800128a:	d07b      	beq.n	8001384 <__aeabi_dadd+0x130>
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd5f      	ble.n	8001350 <__aeabi_dadd+0xfc>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x42>
 8001294:	e0a4      	b.n	80013e0 <__aeabi_dadd+0x18c>
 8001296:	003e      	movs	r6, r7
 8001298:	4316      	orrs	r6, r2
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x4a>
 800129c:	e112      	b.n	80014c4 <__aeabi_dadd+0x270>
 800129e:	1e5e      	subs	r6, r3, #1
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dadd+0x52>
 80012a4:	e19e      	b.n	80015e4 <__aeabi_dadd+0x390>
 80012a6:	1a87      	subs	r7, r0, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	2501      	movs	r5, #1
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	4240      	negs	r0, r0
 80012b4:	1a09      	subs	r1, r1, r0
 80012b6:	020b      	lsls	r3, r1, #8
 80012b8:	d400      	bmi.n	80012bc <__aeabi_dadd+0x68>
 80012ba:	e131      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	0a4e      	lsrs	r6, r1, #9
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x72>
 80012c4:	e16e      	b.n	80015a4 <__aeabi_dadd+0x350>
 80012c6:	0030      	movs	r0, r6
 80012c8:	f001 fe38 	bl	8002f3c <__clzsi2>
 80012cc:	0003      	movs	r3, r0
 80012ce:	3b08      	subs	r3, #8
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x82>
 80012d4:	e161      	b.n	800159a <__aeabi_dadd+0x346>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0039      	movs	r1, r7
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	409e      	lsls	r6, r3
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	409f      	lsls	r7, r3
 80012e2:	430e      	orrs	r6, r1
 80012e4:	429d      	cmp	r5, r3
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dadd+0x96>
 80012e8:	e151      	b.n	800158e <__aeabi_dadd+0x33a>
 80012ea:	1b5d      	subs	r5, r3, r5
 80012ec:	1c6b      	adds	r3, r5, #1
 80012ee:	2b1f      	cmp	r3, #31
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dadd+0xa0>
 80012f2:	e17c      	b.n	80015ee <__aeabi_dadd+0x39a>
 80012f4:	2120      	movs	r1, #32
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	003d      	movs	r5, r7
 80012fa:	0030      	movs	r0, r6
 80012fc:	408f      	lsls	r7, r1
 80012fe:	4088      	lsls	r0, r1
 8001300:	40dd      	lsrs	r5, r3
 8001302:	1e79      	subs	r1, r7, #1
 8001304:	418f      	sbcs	r7, r1
 8001306:	0031      	movs	r1, r6
 8001308:	2207      	movs	r2, #7
 800130a:	4328      	orrs	r0, r5
 800130c:	40d9      	lsrs	r1, r3
 800130e:	2500      	movs	r5, #0
 8001310:	4307      	orrs	r7, r0
 8001312:	403a      	ands	r2, r7
 8001314:	2a00      	cmp	r2, #0
 8001316:	d009      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001318:	230f      	movs	r3, #15
 800131a:	403b      	ands	r3, r7
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <__aeabi_dadd+0xd8>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	42bb      	cmp	r3, r7
 8001324:	41bf      	sbcs	r7, r7
 8001326:	427f      	negs	r7, r7
 8001328:	19c9      	adds	r1, r1, r7
 800132a:	001f      	movs	r7, r3
 800132c:	020b      	lsls	r3, r1, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0xde>
 8001330:	e226      	b.n	8001780 <__aeabi_dadd+0x52c>
 8001332:	1c6a      	adds	r2, r5, #1
 8001334:	4bc6      	ldr	r3, [pc, #792]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001336:	0555      	lsls	r5, r2, #21
 8001338:	0d6d      	lsrs	r5, r5, #21
 800133a:	429a      	cmp	r2, r3
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0xec>
 800133e:	e106      	b.n	800154e <__aeabi_dadd+0x2fa>
 8001340:	4ac4      	ldr	r2, [pc, #784]	; (8001654 <__aeabi_dadd+0x400>)
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	400a      	ands	r2, r1
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	0252      	lsls	r2, r2, #9
 800134a:	433b      	orrs	r3, r7
 800134c:	0b12      	lsrs	r2, r2, #12
 800134e:	e08e      	b.n	800146e <__aeabi_dadd+0x21a>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x102>
 8001354:	e0b8      	b.n	80014c8 <__aeabi_dadd+0x274>
 8001356:	1c6b      	adds	r3, r5, #1
 8001358:	055b      	lsls	r3, r3, #21
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	2b01      	cmp	r3, #1
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dadd+0x10e>
 8001360:	e130      	b.n	80015c4 <__aeabi_dadd+0x370>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d500      	bpl.n	8001376 <__aeabi_dadd+0x122>
 8001374:	e14c      	b.n	8001610 <__aeabi_dadd+0x3bc>
 8001376:	003b      	movs	r3, r7
 8001378:	4333      	orrs	r3, r6
 800137a:	d1a1      	bne.n	80012c0 <__aeabi_dadd+0x6c>
 800137c:	2200      	movs	r2, #0
 800137e:	2400      	movs	r4, #0
 8001380:	2500      	movs	r5, #0
 8001382:	e070      	b.n	8001466 <__aeabi_dadd+0x212>
 8001384:	2b00      	cmp	r3, #0
 8001386:	dc00      	bgt.n	800138a <__aeabi_dadd+0x136>
 8001388:	e0e5      	b.n	8001556 <__aeabi_dadd+0x302>
 800138a:	2e00      	cmp	r6, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x13c>
 800138e:	e083      	b.n	8001498 <__aeabi_dadd+0x244>
 8001390:	4eaf      	ldr	r6, [pc, #700]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001392:	42b5      	cmp	r5, r6
 8001394:	d060      	beq.n	8001458 <__aeabi_dadd+0x204>
 8001396:	2680      	movs	r6, #128	; 0x80
 8001398:	0436      	lsls	r6, r6, #16
 800139a:	4337      	orrs	r7, r6
 800139c:	46b8      	mov	r8, r7
 800139e:	2b38      	cmp	r3, #56	; 0x38
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_dadd+0x150>
 80013a2:	e13e      	b.n	8001622 <__aeabi_dadd+0x3ce>
 80013a4:	4643      	mov	r3, r8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	001f      	movs	r7, r3
 80013aa:	1e7a      	subs	r2, r7, #1
 80013ac:	4197      	sbcs	r7, r2
 80013ae:	183f      	adds	r7, r7, r0
 80013b0:	4287      	cmp	r7, r0
 80013b2:	4180      	sbcs	r0, r0
 80013b4:	4240      	negs	r0, r0
 80013b6:	1809      	adds	r1, r1, r0
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	d400      	bmi.n	80013be <__aeabi_dadd+0x16a>
 80013bc:	e0b0      	b.n	8001520 <__aeabi_dadd+0x2cc>
 80013be:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013c0:	3501      	adds	r5, #1
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x174>
 80013c6:	e0c3      	b.n	8001550 <__aeabi_dadd+0x2fc>
 80013c8:	4aa2      	ldr	r2, [pc, #648]	; (8001654 <__aeabi_dadd+0x400>)
 80013ca:	087b      	lsrs	r3, r7, #1
 80013cc:	400a      	ands	r2, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	400f      	ands	r7, r1
 80013d2:	431f      	orrs	r7, r3
 80013d4:	0851      	lsrs	r1, r2, #1
 80013d6:	07d3      	lsls	r3, r2, #31
 80013d8:	2207      	movs	r2, #7
 80013da:	431f      	orrs	r7, r3
 80013dc:	403a      	ands	r2, r7
 80013de:	e799      	b.n	8001314 <__aeabi_dadd+0xc0>
 80013e0:	4e9b      	ldr	r6, [pc, #620]	; (8001650 <__aeabi_dadd+0x3fc>)
 80013e2:	42b5      	cmp	r5, r6
 80013e4:	d038      	beq.n	8001458 <__aeabi_dadd+0x204>
 80013e6:	2680      	movs	r6, #128	; 0x80
 80013e8:	0436      	lsls	r6, r6, #16
 80013ea:	4337      	orrs	r7, r6
 80013ec:	46b8      	mov	r8, r7
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x1a0>
 80013f2:	e0dc      	b.n	80015ae <__aeabi_dadd+0x35a>
 80013f4:	2b1f      	cmp	r3, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x1a6>
 80013f8:	e130      	b.n	800165c <__aeabi_dadd+0x408>
 80013fa:	001e      	movs	r6, r3
 80013fc:	4647      	mov	r7, r8
 80013fe:	3e20      	subs	r6, #32
 8001400:	40f7      	lsrs	r7, r6
 8001402:	46bc      	mov	ip, r7
 8001404:	2b20      	cmp	r3, #32
 8001406:	d004      	beq.n	8001412 <__aeabi_dadd+0x1be>
 8001408:	2640      	movs	r6, #64	; 0x40
 800140a:	1af3      	subs	r3, r6, r3
 800140c:	4646      	mov	r6, r8
 800140e:	409e      	lsls	r6, r3
 8001410:	4332      	orrs	r2, r6
 8001412:	0017      	movs	r7, r2
 8001414:	4663      	mov	r3, ip
 8001416:	1e7a      	subs	r2, r7, #1
 8001418:	4197      	sbcs	r7, r2
 800141a:	431f      	orrs	r7, r3
 800141c:	e0cc      	b.n	80015b8 <__aeabi_dadd+0x364>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x1d0>
 8001422:	e204      	b.n	800182e <__aeabi_dadd+0x5da>
 8001424:	4643      	mov	r3, r8
 8001426:	4313      	orrs	r3, r2
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1d8>
 800142a:	e159      	b.n	80016e0 <__aeabi_dadd+0x48c>
 800142c:	074b      	lsls	r3, r1, #29
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	4318      	orrs	r0, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4219      	tst	r1, r3
 800143a:	d008      	beq.n	800144e <__aeabi_dadd+0x1fa>
 800143c:	4645      	mov	r5, r8
 800143e:	08ed      	lsrs	r5, r5, #3
 8001440:	421d      	tst	r5, r3
 8001442:	d104      	bne.n	800144e <__aeabi_dadd+0x1fa>
 8001444:	4643      	mov	r3, r8
 8001446:	08d0      	lsrs	r0, r2, #3
 8001448:	0759      	lsls	r1, r3, #29
 800144a:	4308      	orrs	r0, r1
 800144c:	0029      	movs	r1, r5
 800144e:	0f42      	lsrs	r2, r0, #29
 8001450:	00c9      	lsls	r1, r1, #3
 8001452:	4d7f      	ldr	r5, [pc, #508]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001454:	4311      	orrs	r1, r2
 8001456:	00c0      	lsls	r0, r0, #3
 8001458:	074b      	lsls	r3, r1, #29
 800145a:	08ca      	lsrs	r2, r1, #3
 800145c:	497c      	ldr	r1, [pc, #496]	; (8001650 <__aeabi_dadd+0x3fc>)
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	4303      	orrs	r3, r0
 8001462:	428d      	cmp	r5, r1
 8001464:	d068      	beq.n	8001538 <__aeabi_dadd+0x2e4>
 8001466:	0312      	lsls	r2, r2, #12
 8001468:	056d      	lsls	r5, r5, #21
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0d6d      	lsrs	r5, r5, #21
 800146e:	2100      	movs	r1, #0
 8001470:	0312      	lsls	r2, r2, #12
 8001472:	0018      	movs	r0, r3
 8001474:	0b13      	lsrs	r3, r2, #12
 8001476:	0d0a      	lsrs	r2, r1, #20
 8001478:	0512      	lsls	r2, r2, #20
 800147a:	431a      	orrs	r2, r3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <__aeabi_dadd+0x404>)
 800147e:	052d      	lsls	r5, r5, #20
 8001480:	4013      	ands	r3, r2
 8001482:	432b      	orrs	r3, r5
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	07e4      	lsls	r4, r4, #31
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	4323      	orrs	r3, r4
 800148c:	0019      	movs	r1, r3
 800148e:	bc1c      	pop	{r2, r3, r4}
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	46a2      	mov	sl, r4
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	003e      	movs	r6, r7
 800149a:	4316      	orrs	r6, r2
 800149c:	d012      	beq.n	80014c4 <__aeabi_dadd+0x270>
 800149e:	1e5e      	subs	r6, r3, #1
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x252>
 80014a4:	e100      	b.n	80016a8 <__aeabi_dadd+0x454>
 80014a6:	1887      	adds	r7, r0, r2
 80014a8:	4287      	cmp	r7, r0
 80014aa:	4180      	sbcs	r0, r0
 80014ac:	4441      	add	r1, r8
 80014ae:	4240      	negs	r0, r0
 80014b0:	1809      	adds	r1, r1, r0
 80014b2:	2501      	movs	r5, #1
 80014b4:	020b      	lsls	r3, r1, #8
 80014b6:	d533      	bpl.n	8001520 <__aeabi_dadd+0x2cc>
 80014b8:	2502      	movs	r5, #2
 80014ba:	e785      	b.n	80013c8 <__aeabi_dadd+0x174>
 80014bc:	4664      	mov	r4, ip
 80014be:	0033      	movs	r3, r6
 80014c0:	4641      	mov	r1, r8
 80014c2:	0010      	movs	r0, r2
 80014c4:	001d      	movs	r5, r3
 80014c6:	e7c7      	b.n	8001458 <__aeabi_dadd+0x204>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x27a>
 80014cc:	e0da      	b.n	8001684 <__aeabi_dadd+0x430>
 80014ce:	000c      	movs	r4, r1
 80014d0:	4304      	orrs	r4, r0
 80014d2:	d0f3      	beq.n	80014bc <__aeabi_dadd+0x268>
 80014d4:	1c5c      	adds	r4, r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x286>
 80014d8:	e19f      	b.n	800181a <__aeabi_dadd+0x5c6>
 80014da:	4c5d      	ldr	r4, [pc, #372]	; (8001650 <__aeabi_dadd+0x3fc>)
 80014dc:	42a6      	cmp	r6, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x28e>
 80014e0:	e12f      	b.n	8001742 <__aeabi_dadd+0x4ee>
 80014e2:	43db      	mvns	r3, r3
 80014e4:	2b38      	cmp	r3, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dadd+0x296>
 80014e8:	e166      	b.n	80017b8 <__aeabi_dadd+0x564>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x29c>
 80014ee:	e183      	b.n	80017f8 <__aeabi_dadd+0x5a4>
 80014f0:	2420      	movs	r4, #32
 80014f2:	0005      	movs	r5, r0
 80014f4:	1ae4      	subs	r4, r4, r3
 80014f6:	000f      	movs	r7, r1
 80014f8:	40dd      	lsrs	r5, r3
 80014fa:	40d9      	lsrs	r1, r3
 80014fc:	40a0      	lsls	r0, r4
 80014fe:	4643      	mov	r3, r8
 8001500:	40a7      	lsls	r7, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	1e44      	subs	r4, r0, #1
 8001506:	41a0      	sbcs	r0, r4
 8001508:	4698      	mov	r8, r3
 800150a:	432f      	orrs	r7, r5
 800150c:	4338      	orrs	r0, r7
 800150e:	1a17      	subs	r7, r2, r0
 8001510:	42ba      	cmp	r2, r7
 8001512:	4192      	sbcs	r2, r2
 8001514:	4643      	mov	r3, r8
 8001516:	4252      	negs	r2, r2
 8001518:	1a99      	subs	r1, r3, r2
 800151a:	4664      	mov	r4, ip
 800151c:	0035      	movs	r5, r6
 800151e:	e6ca      	b.n	80012b6 <__aeabi_dadd+0x62>
 8001520:	2207      	movs	r2, #7
 8001522:	403a      	ands	r2, r7
 8001524:	2a00      	cmp	r2, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x2d6>
 8001528:	e6f6      	b.n	8001318 <__aeabi_dadd+0xc4>
 800152a:	074b      	lsls	r3, r1, #29
 800152c:	08ca      	lsrs	r2, r1, #3
 800152e:	4948      	ldr	r1, [pc, #288]	; (8001650 <__aeabi_dadd+0x3fc>)
 8001530:	08ff      	lsrs	r7, r7, #3
 8001532:	433b      	orrs	r3, r7
 8001534:	428d      	cmp	r5, r1
 8001536:	d196      	bne.n	8001466 <__aeabi_dadd+0x212>
 8001538:	0019      	movs	r1, r3
 800153a:	4311      	orrs	r1, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x2ec>
 800153e:	e19e      	b.n	800187e <__aeabi_dadd+0x62a>
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0309      	lsls	r1, r1, #12
 8001544:	430a      	orrs	r2, r1
 8001546:	0312      	lsls	r2, r2, #12
 8001548:	0b12      	lsrs	r2, r2, #12
 800154a:	4d41      	ldr	r5, [pc, #260]	; (8001650 <__aeabi_dadd+0x3fc>)
 800154c:	e78f      	b.n	800146e <__aeabi_dadd+0x21a>
 800154e:	0015      	movs	r5, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2300      	movs	r3, #0
 8001554:	e78b      	b.n	800146e <__aeabi_dadd+0x21a>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x308>
 800155a:	e0c7      	b.n	80016ec <__aeabi_dadd+0x498>
 800155c:	1c6b      	adds	r3, r5, #1
 800155e:	055f      	lsls	r7, r3, #21
 8001560:	0d7f      	lsrs	r7, r7, #21
 8001562:	2f01      	cmp	r7, #1
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x314>
 8001566:	e0f1      	b.n	800174c <__aeabi_dadd+0x4f8>
 8001568:	4d39      	ldr	r5, [pc, #228]	; (8001650 <__aeabi_dadd+0x3fc>)
 800156a:	42ab      	cmp	r3, r5
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x31c>
 800156e:	e0b9      	b.n	80016e4 <__aeabi_dadd+0x490>
 8001570:	1885      	adds	r5, r0, r2
 8001572:	000a      	movs	r2, r1
 8001574:	4285      	cmp	r5, r0
 8001576:	4189      	sbcs	r1, r1
 8001578:	4442      	add	r2, r8
 800157a:	4249      	negs	r1, r1
 800157c:	1851      	adds	r1, r2, r1
 800157e:	2207      	movs	r2, #7
 8001580:	07cf      	lsls	r7, r1, #31
 8001582:	086d      	lsrs	r5, r5, #1
 8001584:	432f      	orrs	r7, r5
 8001586:	0849      	lsrs	r1, r1, #1
 8001588:	403a      	ands	r2, r7
 800158a:	001d      	movs	r5, r3
 800158c:	e6c2      	b.n	8001314 <__aeabi_dadd+0xc0>
 800158e:	2207      	movs	r2, #7
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <__aeabi_dadd+0x400>)
 8001592:	1aed      	subs	r5, r5, r3
 8001594:	4031      	ands	r1, r6
 8001596:	403a      	ands	r2, r7
 8001598:	e6bc      	b.n	8001314 <__aeabi_dadd+0xc0>
 800159a:	003e      	movs	r6, r7
 800159c:	3828      	subs	r0, #40	; 0x28
 800159e:	4086      	lsls	r6, r0
 80015a0:	2700      	movs	r7, #0
 80015a2:	e69f      	b.n	80012e4 <__aeabi_dadd+0x90>
 80015a4:	0038      	movs	r0, r7
 80015a6:	f001 fcc9 	bl	8002f3c <__clzsi2>
 80015aa:	3020      	adds	r0, #32
 80015ac:	e68e      	b.n	80012cc <__aeabi_dadd+0x78>
 80015ae:	4643      	mov	r3, r8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	001f      	movs	r7, r3
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	1bc7      	subs	r7, r0, r7
 80015ba:	42b8      	cmp	r0, r7
 80015bc:	4180      	sbcs	r0, r0
 80015be:	4240      	negs	r0, r0
 80015c0:	1a09      	subs	r1, r1, r0
 80015c2:	e678      	b.n	80012b6 <__aeabi_dadd+0x62>
 80015c4:	000e      	movs	r6, r1
 80015c6:	003b      	movs	r3, r7
 80015c8:	4306      	orrs	r6, r0
 80015ca:	4313      	orrs	r3, r2
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d161      	bne.n	8001694 <__aeabi_dadd+0x440>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x382>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dadd+0x56c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x388>
 80015da:	e11b      	b.n	8001814 <__aeabi_dadd+0x5c0>
 80015dc:	4664      	mov	r4, ip
 80015de:	0039      	movs	r1, r7
 80015e0:	0010      	movs	r0, r2
 80015e2:	e739      	b.n	8001458 <__aeabi_dadd+0x204>
 80015e4:	4f1a      	ldr	r7, [pc, #104]	; (8001650 <__aeabi_dadd+0x3fc>)
 80015e6:	42bb      	cmp	r3, r7
 80015e8:	d07a      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80015ea:	0033      	movs	r3, r6
 80015ec:	e6ff      	b.n	80013ee <__aeabi_dadd+0x19a>
 80015ee:	0030      	movs	r0, r6
 80015f0:	3d1f      	subs	r5, #31
 80015f2:	40e8      	lsrs	r0, r5
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d003      	beq.n	8001600 <__aeabi_dadd+0x3ac>
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	409e      	lsls	r6, r3
 80015fe:	4337      	orrs	r7, r6
 8001600:	1e7b      	subs	r3, r7, #1
 8001602:	419f      	sbcs	r7, r3
 8001604:	2207      	movs	r2, #7
 8001606:	4307      	orrs	r7, r0
 8001608:	403a      	ands	r2, r7
 800160a:	2100      	movs	r1, #0
 800160c:	2500      	movs	r5, #0
 800160e:	e789      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001610:	1a17      	subs	r7, r2, r0
 8001612:	4643      	mov	r3, r8
 8001614:	42ba      	cmp	r2, r7
 8001616:	41b6      	sbcs	r6, r6
 8001618:	1a59      	subs	r1, r3, r1
 800161a:	4276      	negs	r6, r6
 800161c:	1b8e      	subs	r6, r1, r6
 800161e:	4664      	mov	r4, ip
 8001620:	e64e      	b.n	80012c0 <__aeabi_dadd+0x6c>
 8001622:	2b1f      	cmp	r3, #31
 8001624:	dd00      	ble.n	8001628 <__aeabi_dadd+0x3d4>
 8001626:	e0ad      	b.n	8001784 <__aeabi_dadd+0x530>
 8001628:	2620      	movs	r6, #32
 800162a:	4647      	mov	r7, r8
 800162c:	1af6      	subs	r6, r6, r3
 800162e:	40b7      	lsls	r7, r6
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	46b2      	mov	sl, r6
 8001636:	40df      	lsrs	r7, r3
 8001638:	464e      	mov	r6, r9
 800163a:	433e      	orrs	r6, r7
 800163c:	0037      	movs	r7, r6
 800163e:	4656      	mov	r6, sl
 8001640:	40b2      	lsls	r2, r6
 8001642:	1e56      	subs	r6, r2, #1
 8001644:	41b2      	sbcs	r2, r6
 8001646:	4317      	orrs	r7, r2
 8001648:	4642      	mov	r2, r8
 800164a:	40da      	lsrs	r2, r3
 800164c:	1889      	adds	r1, r1, r2
 800164e:	e6ae      	b.n	80013ae <__aeabi_dadd+0x15a>
 8001650:	000007ff 	.word	0x000007ff
 8001654:	ff7fffff 	.word	0xff7fffff
 8001658:	800fffff 	.word	0x800fffff
 800165c:	2620      	movs	r6, #32
 800165e:	4647      	mov	r7, r8
 8001660:	1af6      	subs	r6, r6, r3
 8001662:	40b7      	lsls	r7, r6
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	46b2      	mov	sl, r6
 800166a:	40df      	lsrs	r7, r3
 800166c:	464e      	mov	r6, r9
 800166e:	433e      	orrs	r6, r7
 8001670:	0037      	movs	r7, r6
 8001672:	4656      	mov	r6, sl
 8001674:	40b2      	lsls	r2, r6
 8001676:	1e56      	subs	r6, r2, #1
 8001678:	41b2      	sbcs	r2, r6
 800167a:	4317      	orrs	r7, r2
 800167c:	4642      	mov	r2, r8
 800167e:	40da      	lsrs	r2, r3
 8001680:	1a89      	subs	r1, r1, r2
 8001682:	e799      	b.n	80015b8 <__aeabi_dadd+0x364>
 8001684:	4c7f      	ldr	r4, [pc, #508]	; (8001884 <__aeabi_dadd+0x630>)
 8001686:	42a6      	cmp	r6, r4
 8001688:	d05b      	beq.n	8001742 <__aeabi_dadd+0x4ee>
 800168a:	2480      	movs	r4, #128	; 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	425b      	negs	r3, r3
 8001690:	4321      	orrs	r1, r4
 8001692:	e727      	b.n	80014e4 <__aeabi_dadd+0x290>
 8001694:	2e00      	cmp	r6, #0
 8001696:	d10c      	bne.n	80016b2 <__aeabi_dadd+0x45e>
 8001698:	2b00      	cmp	r3, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x44a>
 800169c:	e0cb      	b.n	8001836 <__aeabi_dadd+0x5e2>
 800169e:	4664      	mov	r4, ip
 80016a0:	0039      	movs	r1, r7
 80016a2:	0010      	movs	r0, r2
 80016a4:	4d77      	ldr	r5, [pc, #476]	; (8001884 <__aeabi_dadd+0x630>)
 80016a6:	e6d7      	b.n	8001458 <__aeabi_dadd+0x204>
 80016a8:	4f76      	ldr	r7, [pc, #472]	; (8001884 <__aeabi_dadd+0x630>)
 80016aa:	42bb      	cmp	r3, r7
 80016ac:	d018      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016ae:	0033      	movs	r3, r6
 80016b0:	e675      	b.n	800139e <__aeabi_dadd+0x14a>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <__aeabi_dadd+0x48c>
 80016b6:	074b      	lsls	r3, r1, #29
 80016b8:	08c0      	lsrs	r0, r0, #3
 80016ba:	4318      	orrs	r0, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	4219      	tst	r1, r3
 80016c4:	d007      	beq.n	80016d6 <__aeabi_dadd+0x482>
 80016c6:	08fc      	lsrs	r4, r7, #3
 80016c8:	421c      	tst	r4, r3
 80016ca:	d104      	bne.n	80016d6 <__aeabi_dadd+0x482>
 80016cc:	0779      	lsls	r1, r7, #29
 80016ce:	08d0      	lsrs	r0, r2, #3
 80016d0:	4308      	orrs	r0, r1
 80016d2:	46e1      	mov	r9, ip
 80016d4:	0021      	movs	r1, r4
 80016d6:	464c      	mov	r4, r9
 80016d8:	0f42      	lsrs	r2, r0, #29
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	4311      	orrs	r1, r2
 80016de:	00c0      	lsls	r0, r0, #3
 80016e0:	4d68      	ldr	r5, [pc, #416]	; (8001884 <__aeabi_dadd+0x630>)
 80016e2:	e6b9      	b.n	8001458 <__aeabi_dadd+0x204>
 80016e4:	001d      	movs	r5, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	2300      	movs	r3, #0
 80016ea:	e6c0      	b.n	800146e <__aeabi_dadd+0x21a>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d15b      	bne.n	80017a8 <__aeabi_dadd+0x554>
 80016f0:	000d      	movs	r5, r1
 80016f2:	4305      	orrs	r5, r0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x4a4>
 80016f6:	e6e2      	b.n	80014be <__aeabi_dadd+0x26a>
 80016f8:	1c5d      	adds	r5, r3, #1
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4aa>
 80016fc:	e0b0      	b.n	8001860 <__aeabi_dadd+0x60c>
 80016fe:	4d61      	ldr	r5, [pc, #388]	; (8001884 <__aeabi_dadd+0x630>)
 8001700:	42ae      	cmp	r6, r5
 8001702:	d01f      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 8001704:	43db      	mvns	r3, r3
 8001706:	2b38      	cmp	r3, #56	; 0x38
 8001708:	dc71      	bgt.n	80017ee <__aeabi_dadd+0x59a>
 800170a:	2b1f      	cmp	r3, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dadd+0x4bc>
 800170e:	e096      	b.n	800183e <__aeabi_dadd+0x5ea>
 8001710:	2520      	movs	r5, #32
 8001712:	000f      	movs	r7, r1
 8001714:	1aed      	subs	r5, r5, r3
 8001716:	40af      	lsls	r7, r5
 8001718:	46b9      	mov	r9, r7
 800171a:	0007      	movs	r7, r0
 800171c:	46aa      	mov	sl, r5
 800171e:	40df      	lsrs	r7, r3
 8001720:	464d      	mov	r5, r9
 8001722:	433d      	orrs	r5, r7
 8001724:	002f      	movs	r7, r5
 8001726:	4655      	mov	r5, sl
 8001728:	40a8      	lsls	r0, r5
 800172a:	40d9      	lsrs	r1, r3
 800172c:	1e45      	subs	r5, r0, #1
 800172e:	41a8      	sbcs	r0, r5
 8001730:	4488      	add	r8, r1
 8001732:	4307      	orrs	r7, r0
 8001734:	18bf      	adds	r7, r7, r2
 8001736:	4297      	cmp	r7, r2
 8001738:	4192      	sbcs	r2, r2
 800173a:	4251      	negs	r1, r2
 800173c:	4441      	add	r1, r8
 800173e:	0035      	movs	r5, r6
 8001740:	e63a      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001742:	4664      	mov	r4, ip
 8001744:	0035      	movs	r5, r6
 8001746:	4641      	mov	r1, r8
 8001748:	0010      	movs	r0, r2
 800174a:	e685      	b.n	8001458 <__aeabi_dadd+0x204>
 800174c:	000b      	movs	r3, r1
 800174e:	4303      	orrs	r3, r0
 8001750:	2d00      	cmp	r5, #0
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x502>
 8001754:	e663      	b.n	800141e <__aeabi_dadd+0x1ca>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f5      	beq.n	8001746 <__aeabi_dadd+0x4f2>
 800175a:	4643      	mov	r3, r8
 800175c:	4313      	orrs	r3, r2
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x50e>
 8001760:	e67a      	b.n	8001458 <__aeabi_dadd+0x204>
 8001762:	1887      	adds	r7, r0, r2
 8001764:	4287      	cmp	r7, r0
 8001766:	4180      	sbcs	r0, r0
 8001768:	2207      	movs	r2, #7
 800176a:	4441      	add	r1, r8
 800176c:	4240      	negs	r0, r0
 800176e:	1809      	adds	r1, r1, r0
 8001770:	403a      	ands	r2, r7
 8001772:	020b      	lsls	r3, r1, #8
 8001774:	d400      	bmi.n	8001778 <__aeabi_dadd+0x524>
 8001776:	e6d5      	b.n	8001524 <__aeabi_dadd+0x2d0>
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <__aeabi_dadd+0x634>)
 800177a:	3501      	adds	r5, #1
 800177c:	4019      	ands	r1, r3
 800177e:	e5c9      	b.n	8001314 <__aeabi_dadd+0xc0>
 8001780:	0038      	movs	r0, r7
 8001782:	e669      	b.n	8001458 <__aeabi_dadd+0x204>
 8001784:	001e      	movs	r6, r3
 8001786:	4647      	mov	r7, r8
 8001788:	3e20      	subs	r6, #32
 800178a:	40f7      	lsrs	r7, r6
 800178c:	46bc      	mov	ip, r7
 800178e:	2b20      	cmp	r3, #32
 8001790:	d004      	beq.n	800179c <__aeabi_dadd+0x548>
 8001792:	2640      	movs	r6, #64	; 0x40
 8001794:	1af3      	subs	r3, r6, r3
 8001796:	4646      	mov	r6, r8
 8001798:	409e      	lsls	r6, r3
 800179a:	4332      	orrs	r2, r6
 800179c:	0017      	movs	r7, r2
 800179e:	4663      	mov	r3, ip
 80017a0:	1e7a      	subs	r2, r7, #1
 80017a2:	4197      	sbcs	r7, r2
 80017a4:	431f      	orrs	r7, r3
 80017a6:	e602      	b.n	80013ae <__aeabi_dadd+0x15a>
 80017a8:	4d36      	ldr	r5, [pc, #216]	; (8001884 <__aeabi_dadd+0x630>)
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	d0ca      	beq.n	8001744 <__aeabi_dadd+0x4f0>
 80017ae:	2580      	movs	r5, #128	; 0x80
 80017b0:	042d      	lsls	r5, r5, #16
 80017b2:	425b      	negs	r3, r3
 80017b4:	4329      	orrs	r1, r5
 80017b6:	e7a6      	b.n	8001706 <__aeabi_dadd+0x4b2>
 80017b8:	4308      	orrs	r0, r1
 80017ba:	1e41      	subs	r1, r0, #1
 80017bc:	4188      	sbcs	r0, r1
 80017be:	e6a6      	b.n	800150e <__aeabi_dadd+0x2ba>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x572>
 80017c4:	e648      	b.n	8001458 <__aeabi_dadd+0x204>
 80017c6:	1a87      	subs	r7, r0, r2
 80017c8:	4643      	mov	r3, r8
 80017ca:	42b8      	cmp	r0, r7
 80017cc:	41b6      	sbcs	r6, r6
 80017ce:	1acb      	subs	r3, r1, r3
 80017d0:	4276      	negs	r6, r6
 80017d2:	1b9e      	subs	r6, r3, r6
 80017d4:	0233      	lsls	r3, r6, #8
 80017d6:	d54b      	bpl.n	8001870 <__aeabi_dadd+0x61c>
 80017d8:	1a17      	subs	r7, r2, r0
 80017da:	4643      	mov	r3, r8
 80017dc:	42ba      	cmp	r2, r7
 80017de:	4192      	sbcs	r2, r2
 80017e0:	1a59      	subs	r1, r3, r1
 80017e2:	4252      	negs	r2, r2
 80017e4:	1a89      	subs	r1, r1, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	4664      	mov	r4, ip
 80017ea:	403a      	ands	r2, r7
 80017ec:	e592      	b.n	8001314 <__aeabi_dadd+0xc0>
 80017ee:	4301      	orrs	r1, r0
 80017f0:	000f      	movs	r7, r1
 80017f2:	1e79      	subs	r1, r7, #1
 80017f4:	418f      	sbcs	r7, r1
 80017f6:	e79d      	b.n	8001734 <__aeabi_dadd+0x4e0>
 80017f8:	001c      	movs	r4, r3
 80017fa:	000f      	movs	r7, r1
 80017fc:	3c20      	subs	r4, #32
 80017fe:	40e7      	lsrs	r7, r4
 8001800:	2b20      	cmp	r3, #32
 8001802:	d003      	beq.n	800180c <__aeabi_dadd+0x5b8>
 8001804:	2440      	movs	r4, #64	; 0x40
 8001806:	1ae3      	subs	r3, r4, r3
 8001808:	4099      	lsls	r1, r3
 800180a:	4308      	orrs	r0, r1
 800180c:	1e41      	subs	r1, r0, #1
 800180e:	4188      	sbcs	r0, r1
 8001810:	4338      	orrs	r0, r7
 8001812:	e67c      	b.n	800150e <__aeabi_dadd+0x2ba>
 8001814:	2200      	movs	r2, #0
 8001816:	2400      	movs	r4, #0
 8001818:	e625      	b.n	8001466 <__aeabi_dadd+0x212>
 800181a:	1a17      	subs	r7, r2, r0
 800181c:	4643      	mov	r3, r8
 800181e:	42ba      	cmp	r2, r7
 8001820:	4192      	sbcs	r2, r2
 8001822:	1a59      	subs	r1, r3, r1
 8001824:	4252      	negs	r2, r2
 8001826:	1a89      	subs	r1, r1, r2
 8001828:	4664      	mov	r4, ip
 800182a:	0035      	movs	r5, r6
 800182c:	e543      	b.n	80012b6 <__aeabi_dadd+0x62>
 800182e:	4641      	mov	r1, r8
 8001830:	0010      	movs	r0, r2
 8001832:	4d14      	ldr	r5, [pc, #80]	; (8001884 <__aeabi_dadd+0x630>)
 8001834:	e610      	b.n	8001458 <__aeabi_dadd+0x204>
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	2400      	movs	r4, #0
 800183a:	0312      	lsls	r2, r2, #12
 800183c:	e680      	b.n	8001540 <__aeabi_dadd+0x2ec>
 800183e:	001d      	movs	r5, r3
 8001840:	000f      	movs	r7, r1
 8001842:	3d20      	subs	r5, #32
 8001844:	40ef      	lsrs	r7, r5
 8001846:	46bc      	mov	ip, r7
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <__aeabi_dadd+0x600>
 800184c:	2540      	movs	r5, #64	; 0x40
 800184e:	1aeb      	subs	r3, r5, r3
 8001850:	4099      	lsls	r1, r3
 8001852:	4308      	orrs	r0, r1
 8001854:	0007      	movs	r7, r0
 8001856:	4663      	mov	r3, ip
 8001858:	1e78      	subs	r0, r7, #1
 800185a:	4187      	sbcs	r7, r0
 800185c:	431f      	orrs	r7, r3
 800185e:	e769      	b.n	8001734 <__aeabi_dadd+0x4e0>
 8001860:	1887      	adds	r7, r0, r2
 8001862:	4297      	cmp	r7, r2
 8001864:	419b      	sbcs	r3, r3
 8001866:	4441      	add	r1, r8
 8001868:	425b      	negs	r3, r3
 800186a:	18c9      	adds	r1, r1, r3
 800186c:	0035      	movs	r5, r6
 800186e:	e5a3      	b.n	80013b8 <__aeabi_dadd+0x164>
 8001870:	003b      	movs	r3, r7
 8001872:	4333      	orrs	r3, r6
 8001874:	d0ce      	beq.n	8001814 <__aeabi_dadd+0x5c0>
 8001876:	2207      	movs	r2, #7
 8001878:	0031      	movs	r1, r6
 800187a:	403a      	ands	r2, r7
 800187c:	e652      	b.n	8001524 <__aeabi_dadd+0x2d0>
 800187e:	2300      	movs	r3, #0
 8001880:	001a      	movs	r2, r3
 8001882:	e5f4      	b.n	800146e <__aeabi_dadd+0x21a>
 8001884:	000007ff 	.word	0x000007ff
 8001888:	ff7fffff 	.word	0xff7fffff

0800188c <__aeabi_ddiv>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	464e      	mov	r6, r9
 8001894:	4645      	mov	r5, r8
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	4683      	mov	fp, r0
 800189a:	0007      	movs	r7, r0
 800189c:	030e      	lsls	r6, r1, #12
 800189e:	0048      	lsls	r0, r1, #1
 80018a0:	b085      	sub	sp, #20
 80018a2:	4692      	mov	sl, r2
 80018a4:	001c      	movs	r4, r3
 80018a6:	0b36      	lsrs	r6, r6, #12
 80018a8:	0d40      	lsrs	r0, r0, #21
 80018aa:	0fcd      	lsrs	r5, r1, #31
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x26>
 80018b0:	e09d      	b.n	80019ee <__aeabi_ddiv+0x162>
 80018b2:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d039      	beq.n	800192c <__aeabi_ddiv+0xa0>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00f6      	lsls	r6, r6, #3
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431e      	orrs	r6, r3
 80018c0:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <__aeabi_ddiv+0x280>)
 80018c2:	0f7b      	lsrs	r3, r7, #29
 80018c4:	4333      	orrs	r3, r6
 80018c6:	4699      	mov	r9, r3
 80018c8:	4694      	mov	ip, r2
 80018ca:	0003      	movs	r3, r0
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2600      	movs	r6, #0
 80018d4:	00ff      	lsls	r7, r7, #3
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	0323      	lsls	r3, r4, #12
 80018da:	0b1b      	lsrs	r3, r3, #12
 80018dc:	4698      	mov	r8, r3
 80018de:	0063      	lsls	r3, r4, #1
 80018e0:	0fe4      	lsrs	r4, r4, #31
 80018e2:	4652      	mov	r2, sl
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	9401      	str	r4, [sp, #4]
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x60>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_ddiv+0x1c8>
 80018ec:	4986      	ldr	r1, [pc, #536]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80018ee:	428b      	cmp	r3, r1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x68>
 80018f2:	e09e      	b.n	8001a32 <__aeabi_ddiv+0x1a6>
 80018f4:	4642      	mov	r2, r8
 80018f6:	00d1      	lsls	r1, r2, #3
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0412      	lsls	r2, r2, #16
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4651      	mov	r1, sl
 8001900:	0f49      	lsrs	r1, r1, #29
 8001902:	4311      	orrs	r1, r2
 8001904:	468b      	mov	fp, r1
 8001906:	4981      	ldr	r1, [pc, #516]	; (8001b0c <__aeabi_ddiv+0x280>)
 8001908:	4652      	mov	r2, sl
 800190a:	468c      	mov	ip, r1
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4463      	add	r3, ip
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	2100      	movs	r1, #0
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	002b      	movs	r3, r5
 800191a:	4063      	eors	r3, r4
 800191c:	469a      	mov	sl, r3
 800191e:	2e0f      	cmp	r6, #15
 8001920:	d900      	bls.n	8001924 <__aeabi_ddiv+0x98>
 8001922:	e105      	b.n	8001b30 <__aeabi_ddiv+0x2a4>
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <__aeabi_ddiv+0x284>)
 8001926:	00b6      	lsls	r6, r6, #2
 8001928:	599b      	ldr	r3, [r3, r6]
 800192a:	469f      	mov	pc, r3
 800192c:	465b      	mov	r3, fp
 800192e:	4333      	orrs	r3, r6
 8001930:	4699      	mov	r9, r3
 8001932:	d000      	beq.n	8001936 <__aeabi_ddiv+0xaa>
 8001934:	e0b8      	b.n	8001aa8 <__aeabi_ddiv+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	2608      	movs	r6, #8
 800193a:	2700      	movs	r7, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	e7ca      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001942:	46cb      	mov	fp, r9
 8001944:	003a      	movs	r2, r7
 8001946:	9902      	ldr	r1, [sp, #8]
 8001948:	9501      	str	r5, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	469a      	mov	sl, r3
 800194e:	2902      	cmp	r1, #2
 8001950:	d027      	beq.n	80019a2 <__aeabi_ddiv+0x116>
 8001952:	2903      	cmp	r1, #3
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0xcc>
 8001956:	e280      	b.n	8001e5a <__aeabi_ddiv+0x5ce>
 8001958:	2901      	cmp	r1, #1
 800195a:	d044      	beq.n	80019e6 <__aeabi_ddiv+0x15a>
 800195c:	496d      	ldr	r1, [pc, #436]	; (8001b14 <__aeabi_ddiv+0x288>)
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	468c      	mov	ip, r1
 8001962:	4463      	add	r3, ip
 8001964:	001c      	movs	r4, r3
 8001966:	2c00      	cmp	r4, #0
 8001968:	dd38      	ble.n	80019dc <__aeabi_ddiv+0x150>
 800196a:	0753      	lsls	r3, r2, #29
 800196c:	d000      	beq.n	8001970 <__aeabi_ddiv+0xe4>
 800196e:	e213      	b.n	8001d98 <__aeabi_ddiv+0x50c>
 8001970:	08d2      	lsrs	r2, r2, #3
 8001972:	465b      	mov	r3, fp
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	d509      	bpl.n	800198c <__aeabi_ddiv+0x100>
 8001978:	4659      	mov	r1, fp
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <__aeabi_ddiv+0x28c>)
 800197c:	4019      	ands	r1, r3
 800197e:	468b      	mov	fp, r1
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	00c9      	lsls	r1, r1, #3
 8001984:	468c      	mov	ip, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4463      	add	r3, ip
 800198a:	001c      	movs	r4, r3
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <__aeabi_ddiv+0x290>)
 800198e:	429c      	cmp	r4, r3
 8001990:	dc07      	bgt.n	80019a2 <__aeabi_ddiv+0x116>
 8001992:	465b      	mov	r3, fp
 8001994:	0564      	lsls	r4, r4, #21
 8001996:	075f      	lsls	r7, r3, #29
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4317      	orrs	r7, r2
 800199c:	0b1b      	lsrs	r3, r3, #12
 800199e:	0d62      	lsrs	r2, r4, #21
 80019a0:	e002      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2700      	movs	r7, #0
 80019a6:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <__aeabi_ddiv+0x27c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	0b1c      	lsrs	r4, r3, #12
 80019ae:	0d0b      	lsrs	r3, r1, #20
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	4323      	orrs	r3, r4
 80019b4:	0514      	lsls	r4, r2, #20
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <__aeabi_ddiv+0x294>)
 80019b8:	0038      	movs	r0, r7
 80019ba:	4013      	ands	r3, r2
 80019bc:	431c      	orrs	r4, r3
 80019be:	4653      	mov	r3, sl
 80019c0:	0064      	lsls	r4, r4, #1
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	0864      	lsrs	r4, r4, #1
 80019c6:	431c      	orrs	r4, r3
 80019c8:	0021      	movs	r1, r4
 80019ca:	b005      	add	sp, #20
 80019cc:	bc3c      	pop	{r2, r3, r4, r5}
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	46a2      	mov	sl, r4
 80019d4:	46ab      	mov	fp, r5
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d8:	2201      	movs	r2, #1
 80019da:	4252      	negs	r2, r2
 80019dc:	2301      	movs	r3, #1
 80019de:	1b1b      	subs	r3, r3, r4
 80019e0:	2b38      	cmp	r3, #56	; 0x38
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_ddiv+0x15a>
 80019e4:	e1ad      	b.n	8001d42 <__aeabi_ddiv+0x4b6>
 80019e6:	2200      	movs	r2, #0
 80019e8:	2300      	movs	r3, #0
 80019ea:	2700      	movs	r7, #0
 80019ec:	e7dc      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4333      	orrs	r3, r6
 80019f2:	4699      	mov	r9, r3
 80019f4:	d05e      	beq.n	8001ab4 <__aeabi_ddiv+0x228>
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x170>
 80019fa:	e18a      	b.n	8001d12 <__aeabi_ddiv+0x486>
 80019fc:	0030      	movs	r0, r6
 80019fe:	f001 fa9d 	bl	8002f3c <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	3b0b      	subs	r3, #11
 8001a06:	2b1c      	cmp	r3, #28
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_ddiv+0x180>
 8001a0a:	e17b      	b.n	8001d04 <__aeabi_ddiv+0x478>
 8001a0c:	221d      	movs	r2, #29
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	465a      	mov	r2, fp
 8001a12:	0001      	movs	r1, r0
 8001a14:	40da      	lsrs	r2, r3
 8001a16:	3908      	subs	r1, #8
 8001a18:	408e      	lsls	r6, r1
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	465f      	mov	r7, fp
 8001a1e:	4333      	orrs	r3, r6
 8001a20:	4699      	mov	r9, r3
 8001a22:	408f      	lsls	r7, r1
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <__aeabi_ddiv+0x298>)
 8001a26:	2600      	movs	r6, #0
 8001a28:	1a1b      	subs	r3, r3, r0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	e752      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001a32:	4641      	mov	r1, r8
 8001a34:	4653      	mov	r3, sl
 8001a36:	430b      	orrs	r3, r1
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <__aeabi_ddiv+0x29c>)
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	468c      	mov	ip, r1
 8001a3e:	9b00      	ldr	r3, [sp, #0]
 8001a40:	4463      	add	r3, ip
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	465b      	mov	r3, fp
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d13b      	bne.n	8001ac2 <__aeabi_ddiv+0x236>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	431e      	orrs	r6, r3
 8001a50:	2102      	movs	r1, #2
 8001a52:	e761      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001a54:	4643      	mov	r3, r8
 8001a56:	4313      	orrs	r3, r2
 8001a58:	469b      	mov	fp, r3
 8001a5a:	d037      	beq.n	8001acc <__aeabi_ddiv+0x240>
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x1d8>
 8001a62:	e162      	b.n	8001d2a <__aeabi_ddiv+0x49e>
 8001a64:	4640      	mov	r0, r8
 8001a66:	f001 fa69 	bl	8002f3c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3b0b      	subs	r3, #11
 8001a6e:	2b1c      	cmp	r3, #28
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_ddiv+0x1e8>
 8001a72:	e153      	b.n	8001d1c <__aeabi_ddiv+0x490>
 8001a74:	0002      	movs	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	3a08      	subs	r2, #8
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	4688      	mov	r8, r1
 8001a7e:	211d      	movs	r1, #29
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	4651      	mov	r1, sl
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	000b      	movs	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	4653      	mov	r3, sl
 8001a90:	4093      	lsls	r3, r2
 8001a92:	001a      	movs	r2, r3
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4925      	ldr	r1, [pc, #148]	; (8001b2c <__aeabi_ddiv+0x2a0>)
 8001a98:	469c      	mov	ip, r3
 8001a9a:	4460      	add	r0, ip
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	468c      	mov	ip, r1
 8001aa0:	4463      	add	r3, ip
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	e737      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	46b1      	mov	r9, r6
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	260c      	movs	r6, #12
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	e711      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	2604      	movs	r6, #4
 8001abc:	2700      	movs	r7, #0
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e70a      	b.n	80018d8 <__aeabi_ddiv+0x4c>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	46c3      	mov	fp, r8
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	e725      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001acc:	3301      	adds	r3, #1
 8001ace:	431e      	orrs	r6, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	e720      	b.n	8001918 <__aeabi_ddiv+0x8c>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	469a      	mov	sl, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	2700      	movs	r7, #0
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001ae2:	e761      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	031b      	lsls	r3, r3, #12
 8001aea:	4219      	tst	r1, r3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_ddiv+0x264>
 8001aee:	e0e2      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af0:	4659      	mov	r1, fp
 8001af2:	4219      	tst	r1, r3
 8001af4:	d000      	beq.n	8001af8 <__aeabi_ddiv+0x26c>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_ddiv+0x42a>
 8001af8:	430b      	orrs	r3, r1
 8001afa:	031b      	lsls	r3, r3, #12
 8001afc:	0017      	movs	r7, r2
 8001afe:	0b1b      	lsrs	r3, r3, #12
 8001b00:	46a2      	mov	sl, r4
 8001b02:	4a01      	ldr	r2, [pc, #4]	; (8001b08 <__aeabi_ddiv+0x27c>)
 8001b04:	e750      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	000007ff 	.word	0x000007ff
 8001b0c:	fffffc01 	.word	0xfffffc01
 8001b10:	080176e4 	.word	0x080176e4
 8001b14:	000003ff 	.word	0x000003ff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	800fffff 	.word	0x800fffff
 8001b24:	fffffc0d 	.word	0xfffffc0d
 8001b28:	fffff801 	.word	0xfffff801
 8001b2c:	000003f3 	.word	0x000003f3
 8001b30:	45d9      	cmp	r9, fp
 8001b32:	d900      	bls.n	8001b36 <__aeabi_ddiv+0x2aa>
 8001b34:	e0cb      	b.n	8001cce <__aeabi_ddiv+0x442>
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001b38:	e0c6      	b.n	8001cc8 <__aeabi_ddiv+0x43c>
 8001b3a:	003c      	movs	r4, r7
 8001b3c:	4648      	mov	r0, r9
 8001b3e:	2700      	movs	r7, #0
 8001b40:	9b00      	ldr	r3, [sp, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	465b      	mov	r3, fp
 8001b48:	0e16      	lsrs	r6, r2, #24
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	0213      	lsls	r3, r2, #8
 8001b50:	4698      	mov	r8, r3
 8001b52:	0433      	lsls	r3, r6, #16
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	4699      	mov	r9, r3
 8001b58:	0c31      	lsrs	r1, r6, #16
 8001b5a:	9101      	str	r1, [sp, #4]
 8001b5c:	f7fe fb7e 	bl	800025c <__aeabi_uidivmod>
 8001b60:	464a      	mov	r2, r9
 8001b62:	4342      	muls	r2, r0
 8001b64:	040b      	lsls	r3, r1, #16
 8001b66:	0c21      	lsrs	r1, r4, #16
 8001b68:	0005      	movs	r5, r0
 8001b6a:	4319      	orrs	r1, r3
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d907      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b70:	1989      	adds	r1, r1, r6
 8001b72:	3d01      	subs	r5, #1
 8001b74:	428e      	cmp	r6, r1
 8001b76:	d803      	bhi.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d901      	bls.n	8001b80 <__aeabi_ddiv+0x2f4>
 8001b7c:	1e85      	subs	r5, r0, #2
 8001b7e:	1989      	adds	r1, r1, r6
 8001b80:	1a88      	subs	r0, r1, r2
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	f7fe fb6a 	bl	800025c <__aeabi_uidivmod>
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	468c      	mov	ip, r1
 8001b8c:	464a      	mov	r2, r9
 8001b8e:	0421      	lsls	r1, r4, #16
 8001b90:	4664      	mov	r4, ip
 8001b92:	4342      	muls	r2, r0
 8001b94:	0c09      	lsrs	r1, r1, #16
 8001b96:	0003      	movs	r3, r0
 8001b98:	4321      	orrs	r1, r4
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d904      	bls.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001b9e:	1989      	adds	r1, r1, r6
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	428e      	cmp	r6, r1
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001ba6:	e0f1      	b.n	8001d8c <__aeabi_ddiv+0x500>
 8001ba8:	042d      	lsls	r5, r5, #16
 8001baa:	431d      	orrs	r5, r3
 8001bac:	46ab      	mov	fp, r5
 8001bae:	4643      	mov	r3, r8
 8001bb0:	1a89      	subs	r1, r1, r2
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	0c28      	lsrs	r0, r5, #16
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	0c1d      	lsrs	r5, r3, #16
 8001bba:	465b      	mov	r3, fp
 8001bbc:	0c14      	lsrs	r4, r2, #16
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	435a      	muls	r2, r3
 8001bc6:	9403      	str	r4, [sp, #12]
 8001bc8:	436b      	muls	r3, r5
 8001bca:	4344      	muls	r4, r0
 8001bcc:	9502      	str	r5, [sp, #8]
 8001bce:	4368      	muls	r0, r5
 8001bd0:	191b      	adds	r3, r3, r4
 8001bd2:	0c15      	lsrs	r5, r2, #16
 8001bd4:	18eb      	adds	r3, r5, r3
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x356>
 8001bda:	2480      	movs	r4, #128	; 0x80
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	46a4      	mov	ip, r4
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1c      	lsrs	r4, r3, #16
 8001be4:	0415      	lsls	r5, r2, #16
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	1820      	adds	r0, r4, r0
 8001bec:	195d      	adds	r5, r3, r5
 8001bee:	4281      	cmp	r1, r0
 8001bf0:	d377      	bcc.n	8001ce2 <__aeabi_ddiv+0x456>
 8001bf2:	d073      	beq.n	8001cdc <__aeabi_ddiv+0x450>
 8001bf4:	1a0c      	subs	r4, r1, r0
 8001bf6:	4aa2      	ldr	r2, [pc, #648]	; (8001e80 <__aeabi_ddiv+0x5f4>)
 8001bf8:	1b7d      	subs	r5, r7, r5
 8001bfa:	42af      	cmp	r7, r5
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	4694      	mov	ip, r2
 8001c00:	9b00      	ldr	r3, [sp, #0]
 8001c02:	427f      	negs	r7, r7
 8001c04:	4463      	add	r3, ip
 8001c06:	1be0      	subs	r0, r4, r7
 8001c08:	001c      	movs	r4, r3
 8001c0a:	4286      	cmp	r6, r0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x384>
 8001c0e:	e0db      	b.n	8001dc8 <__aeabi_ddiv+0x53c>
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	f7fe fb23 	bl	800025c <__aeabi_uidivmod>
 8001c16:	464a      	mov	r2, r9
 8001c18:	4342      	muls	r2, r0
 8001c1a:	040b      	lsls	r3, r1, #16
 8001c1c:	0c29      	lsrs	r1, r5, #16
 8001c1e:	0007      	movs	r7, r0
 8001c20:	4319      	orrs	r1, r3
 8001c22:	428a      	cmp	r2, r1
 8001c24:	d907      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c26:	1989      	adds	r1, r1, r6
 8001c28:	3f01      	subs	r7, #1
 8001c2a:	428e      	cmp	r6, r1
 8001c2c:	d803      	bhi.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c2e:	428a      	cmp	r2, r1
 8001c30:	d901      	bls.n	8001c36 <__aeabi_ddiv+0x3aa>
 8001c32:	1e87      	subs	r7, r0, #2
 8001c34:	1989      	adds	r1, r1, r6
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	9901      	ldr	r1, [sp, #4]
 8001c3a:	f7fe fb0f 	bl	800025c <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	464a      	mov	r2, r9
 8001c42:	4689      	mov	r9, r1
 8001c44:	0429      	lsls	r1, r5, #16
 8001c46:	464d      	mov	r5, r9
 8001c48:	4342      	muls	r2, r0
 8001c4a:	0c09      	lsrs	r1, r1, #16
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4329      	orrs	r1, r5
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d907      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c54:	1989      	adds	r1, r1, r6
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428e      	cmp	r6, r1
 8001c5a:	d803      	bhi.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d901      	bls.n	8001c64 <__aeabi_ddiv+0x3d8>
 8001c60:	1e83      	subs	r3, r0, #2
 8001c62:	1989      	adds	r1, r1, r6
 8001c64:	043f      	lsls	r7, r7, #16
 8001c66:	1a89      	subs	r1, r1, r2
 8001c68:	003a      	movs	r2, r7
 8001c6a:	9f03      	ldr	r7, [sp, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	0038      	movs	r0, r7
 8001c70:	0413      	lsls	r3, r2, #16
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	4358      	muls	r0, r3
 8001c76:	4681      	mov	r9, r0
 8001c78:	9802      	ldr	r0, [sp, #8]
 8001c7a:	0c15      	lsrs	r5, r2, #16
 8001c7c:	436f      	muls	r7, r5
 8001c7e:	4343      	muls	r3, r0
 8001c80:	4345      	muls	r5, r0
 8001c82:	4648      	mov	r0, r9
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4684      	mov	ip, r0
 8001c88:	19db      	adds	r3, r3, r7
 8001c8a:	4463      	add	r3, ip
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_ddiv+0x40c>
 8001c90:	2080      	movs	r0, #128	; 0x80
 8001c92:	0240      	lsls	r0, r0, #9
 8001c94:	4684      	mov	ip, r0
 8001c96:	4465      	add	r5, ip
 8001c98:	4648      	mov	r0, r9
 8001c9a:	0c1f      	lsrs	r7, r3, #16
 8001c9c:	0400      	lsls	r0, r0, #16
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	197d      	adds	r5, r7, r5
 8001ca4:	1818      	adds	r0, r3, r0
 8001ca6:	42a9      	cmp	r1, r5
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x420>
 8001caa:	e084      	b.n	8001db6 <__aeabi_ddiv+0x52a>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x424>
 8001cae:	e07f      	b.n	8001db0 <__aeabi_ddiv+0x524>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	e657      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	464a      	mov	r2, r9
 8001cba:	031b      	lsls	r3, r3, #12
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	46aa      	mov	sl, r5
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001cc6:	e66f      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001cc8:	42ba      	cmp	r2, r7
 8001cca:	d900      	bls.n	8001cce <__aeabi_ddiv+0x442>
 8001ccc:	e735      	b.n	8001b3a <__aeabi_ddiv+0x2ae>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	07dc      	lsls	r4, r3, #31
 8001cd2:	0858      	lsrs	r0, r3, #1
 8001cd4:	087b      	lsrs	r3, r7, #1
 8001cd6:	431c      	orrs	r4, r3
 8001cd8:	07ff      	lsls	r7, r7, #31
 8001cda:	e734      	b.n	8001b46 <__aeabi_ddiv+0x2ba>
 8001cdc:	2400      	movs	r4, #0
 8001cde:	42af      	cmp	r7, r5
 8001ce0:	d289      	bcs.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001ce2:	4447      	add	r7, r8
 8001ce4:	4547      	cmp	r7, r8
 8001ce6:	41a4      	sbcs	r4, r4
 8001ce8:	465b      	mov	r3, fp
 8001cea:	4264      	negs	r4, r4
 8001cec:	19a4      	adds	r4, r4, r6
 8001cee:	1864      	adds	r4, r4, r1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d21e      	bcs.n	8001d34 <__aeabi_ddiv+0x4a8>
 8001cf6:	42a0      	cmp	r0, r4
 8001cf8:	d86d      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001cfc:	e0b6      	b.n	8001e6c <__aeabi_ddiv+0x5e0>
 8001cfe:	1a24      	subs	r4, r4, r0
 8001d00:	469b      	mov	fp, r3
 8001d02:	e778      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d04:	0003      	movs	r3, r0
 8001d06:	465a      	mov	r2, fp
 8001d08:	3b28      	subs	r3, #40	; 0x28
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	4691      	mov	r9, r2
 8001d10:	e688      	b.n	8001a24 <__aeabi_ddiv+0x198>
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 f912 	bl	8002f3c <__clzsi2>
 8001d18:	3020      	adds	r0, #32
 8001d1a:	e672      	b.n	8001a02 <__aeabi_ddiv+0x176>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	4652      	mov	r2, sl
 8001d20:	3b28      	subs	r3, #40	; 0x28
 8001d22:	409a      	lsls	r2, r3
 8001d24:	4693      	mov	fp, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	e6b4      	b.n	8001a94 <__aeabi_ddiv+0x208>
 8001d2a:	4650      	mov	r0, sl
 8001d2c:	f001 f906 	bl	8002f3c <__clzsi2>
 8001d30:	3020      	adds	r0, #32
 8001d32:	e69a      	b.n	8001a6a <__aeabi_ddiv+0x1de>
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d1e2      	bne.n	8001cfe <__aeabi_ddiv+0x472>
 8001d38:	45b8      	cmp	r8, r7
 8001d3a:	d9dc      	bls.n	8001cf6 <__aeabi_ddiv+0x46a>
 8001d3c:	1a34      	subs	r4, r6, r0
 8001d3e:	469b      	mov	fp, r3
 8001d40:	e759      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001d42:	2b1f      	cmp	r3, #31
 8001d44:	dc65      	bgt.n	8001e12 <__aeabi_ddiv+0x586>
 8001d46:	4c50      	ldr	r4, [pc, #320]	; (8001e88 <__aeabi_ddiv+0x5fc>)
 8001d48:	9900      	ldr	r1, [sp, #0]
 8001d4a:	46a4      	mov	ip, r4
 8001d4c:	465c      	mov	r4, fp
 8001d4e:	4461      	add	r1, ip
 8001d50:	0008      	movs	r0, r1
 8001d52:	408c      	lsls	r4, r1
 8001d54:	0011      	movs	r1, r2
 8001d56:	4082      	lsls	r2, r0
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	1e50      	subs	r0, r2, #1
 8001d5c:	4182      	sbcs	r2, r0
 8001d5e:	430c      	orrs	r4, r1
 8001d60:	4314      	orrs	r4, r2
 8001d62:	465a      	mov	r2, fp
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	0762      	lsls	r2, r4, #29
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	4022      	ands	r2, r4
 8001d70:	2a04      	cmp	r2, #4
 8001d72:	d005      	beq.n	8001d80 <__aeabi_ddiv+0x4f4>
 8001d74:	0022      	movs	r2, r4
 8001d76:	1d14      	adds	r4, r2, #4
 8001d78:	4294      	cmp	r4, r2
 8001d7a:	4189      	sbcs	r1, r1
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	185b      	adds	r3, r3, r1
 8001d80:	021a      	lsls	r2, r3, #8
 8001d82:	d562      	bpl.n	8001e4a <__aeabi_ddiv+0x5be>
 8001d84:	2201      	movs	r2, #1
 8001d86:	2300      	movs	r3, #0
 8001d88:	2700      	movs	r7, #0
 8001d8a:	e60d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001d8c:	428a      	cmp	r2, r1
 8001d8e:	d800      	bhi.n	8001d92 <__aeabi_ddiv+0x506>
 8001d90:	e70a      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d92:	1e83      	subs	r3, r0, #2
 8001d94:	1989      	adds	r1, r1, r6
 8001d96:	e707      	b.n	8001ba8 <__aeabi_ddiv+0x31c>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0x516>
 8001da0:	e5e6      	b.n	8001970 <__aeabi_ddiv+0xe4>
 8001da2:	1d17      	adds	r7, r2, #4
 8001da4:	4297      	cmp	r7, r2
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	4253      	negs	r3, r2
 8001daa:	449b      	add	fp, r3
 8001dac:	08fa      	lsrs	r2, r7, #3
 8001dae:	e5e0      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x52a>
 8001db4:	e5d7      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001db6:	1871      	adds	r1, r6, r1
 8001db8:	1e53      	subs	r3, r2, #1
 8001dba:	42b1      	cmp	r1, r6
 8001dbc:	d327      	bcc.n	8001e0e <__aeabi_ddiv+0x582>
 8001dbe:	42a9      	cmp	r1, r5
 8001dc0:	d315      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001dc2:	d058      	beq.n	8001e76 <__aeabi_ddiv+0x5ea>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	e773      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dc00      	bgt.n	8001dce <__aeabi_ddiv+0x542>
 8001dcc:	e604      	b.n	80019d8 <__aeabi_ddiv+0x14c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	449b      	add	fp, r3
 8001dd4:	e5cd      	b.n	8001972 <__aeabi_ddiv+0xe6>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4447      	add	r7, r8
 8001dda:	4547      	cmp	r7, r8
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	425b      	negs	r3, r3
 8001de0:	469c      	mov	ip, r3
 8001de2:	4249      	negs	r1, r1
 8001de4:	1989      	adds	r1, r1, r6
 8001de6:	190c      	adds	r4, r1, r4
 8001de8:	44e3      	add	fp, ip
 8001dea:	1a24      	subs	r4, r4, r0
 8001dec:	e703      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001dee:	4643      	mov	r3, r8
 8001df0:	005f      	lsls	r7, r3, #1
 8001df2:	4547      	cmp	r7, r8
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	46b8      	mov	r8, r7
 8001df8:	425b      	negs	r3, r3
 8001dfa:	199e      	adds	r6, r3, r6
 8001dfc:	3a02      	subs	r2, #2
 8001dfe:	1989      	adds	r1, r1, r6
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e04:	e754      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e06:	4540      	cmp	r0, r8
 8001e08:	d000      	beq.n	8001e0c <__aeabi_ddiv+0x580>
 8001e0a:	e751      	b.n	8001cb0 <__aeabi_ddiv+0x424>
 8001e0c:	e5ab      	b.n	8001966 <__aeabi_ddiv+0xda>
 8001e0e:	001a      	movs	r2, r3
 8001e10:	e7f6      	b.n	8001e00 <__aeabi_ddiv+0x574>
 8001e12:	211f      	movs	r1, #31
 8001e14:	465f      	mov	r7, fp
 8001e16:	4249      	negs	r1, r1
 8001e18:	1b0c      	subs	r4, r1, r4
 8001e1a:	40e7      	lsrs	r7, r4
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d007      	beq.n	8001e30 <__aeabi_ddiv+0x5a4>
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <__aeabi_ddiv+0x600>)
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	0018      	movs	r0, r3
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4083      	lsls	r3, r0
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	1e50      	subs	r0, r2, #1
 8001e32:	4182      	sbcs	r2, r0
 8001e34:	433a      	orrs	r2, r7
 8001e36:	2707      	movs	r7, #7
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4017      	ands	r7, r2
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_ddiv+0x5c6>
 8001e3e:	210f      	movs	r1, #15
 8001e40:	2300      	movs	r3, #0
 8001e42:	4011      	ands	r1, r2
 8001e44:	0014      	movs	r4, r2
 8001e46:	2904      	cmp	r1, #4
 8001e48:	d195      	bne.n	8001d76 <__aeabi_ddiv+0x4ea>
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	075f      	lsls	r7, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1b      	lsrs	r3, r3, #12
 8001e52:	08d2      	lsrs	r2, r2, #3
 8001e54:	4317      	orrs	r7, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	e5a6      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	4659      	mov	r1, fp
 8001e5e:	031b      	lsls	r3, r3, #12
 8001e60:	430b      	orrs	r3, r1
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	0017      	movs	r7, r2
 8001e66:	0b1b      	lsrs	r3, r3, #12
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <__aeabi_ddiv+0x5f8>)
 8001e6a:	e59d      	b.n	80019a8 <__aeabi_ddiv+0x11c>
 8001e6c:	42bd      	cmp	r5, r7
 8001e6e:	d8b2      	bhi.n	8001dd6 <__aeabi_ddiv+0x54a>
 8001e70:	469b      	mov	fp, r3
 8001e72:	2400      	movs	r4, #0
 8001e74:	e6bf      	b.n	8001bf6 <__aeabi_ddiv+0x36a>
 8001e76:	4580      	cmp	r8, r0
 8001e78:	d3b9      	bcc.n	8001dee <__aeabi_ddiv+0x562>
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	e7c3      	b.n	8001e06 <__aeabi_ddiv+0x57a>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000003ff 	.word	0x000003ff
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	0000041e 	.word	0x0000041e
 8001e8c:	0000043e 	.word	0x0000043e

08001e90 <__eqdf2>:
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	464f      	mov	r7, r9
 8001e94:	4646      	mov	r6, r8
 8001e96:	46d6      	mov	lr, sl
 8001e98:	4684      	mov	ip, r0
 8001e9a:	b5c0      	push	{r6, r7, lr}
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4e19      	ldr	r6, [pc, #100]	; (8001f04 <__eqdf2+0x74>)
 8001ea0:	0318      	lsls	r0, r3, #12
 8001ea2:	030f      	lsls	r7, r1, #12
 8001ea4:	004d      	lsls	r5, r1, #1
 8001ea6:	0b00      	lsrs	r0, r0, #12
 8001ea8:	005c      	lsls	r4, r3, #1
 8001eaa:	4682      	mov	sl, r0
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d6d      	lsrs	r5, r5, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d64      	lsrs	r4, r4, #21
 8001eb6:	0fdb      	lsrs	r3, r3, #31
 8001eb8:	2001      	movs	r0, #1
 8001eba:	42b5      	cmp	r5, r6
 8001ebc:	d00a      	beq.n	8001ed4 <__eqdf2+0x44>
 8001ebe:	42b4      	cmp	r4, r6
 8001ec0:	d003      	beq.n	8001eca <__eqdf2+0x3a>
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d101      	bne.n	8001eca <__eqdf2+0x3a>
 8001ec6:	4557      	cmp	r7, sl
 8001ec8:	d00c      	beq.n	8001ee4 <__eqdf2+0x54>
 8001eca:	bc1c      	pop	{r2, r3, r4}
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	4666      	mov	r6, ip
 8001ed6:	433e      	orrs	r6, r7
 8001ed8:	d1f7      	bne.n	8001eca <__eqdf2+0x3a>
 8001eda:	42ac      	cmp	r4, r5
 8001edc:	d1f5      	bne.n	8001eca <__eqdf2+0x3a>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	4314      	orrs	r4, r2
 8001ee2:	d1f2      	bne.n	8001eca <__eqdf2+0x3a>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	45c8      	cmp	r8, r9
 8001ee8:	d1ef      	bne.n	8001eca <__eqdf2+0x3a>
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d007      	beq.n	8001efe <__eqdf2+0x6e>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d1eb      	bne.n	8001eca <__eqdf2+0x3a>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	431f      	orrs	r7, r3
 8001ef6:	0038      	movs	r0, r7
 8001ef8:	1e47      	subs	r7, r0, #1
 8001efa:	41b8      	sbcs	r0, r7
 8001efc:	e7e5      	b.n	8001eca <__eqdf2+0x3a>
 8001efe:	2000      	movs	r0, #0
 8001f00:	e7e3      	b.n	8001eca <__eqdf2+0x3a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff

08001f08 <__gedf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	464f      	mov	r7, r9
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	46d6      	mov	lr, sl
 8001f10:	004d      	lsls	r5, r1, #1
 8001f12:	b5c0      	push	{r6, r7, lr}
 8001f14:	030e      	lsls	r6, r1, #12
 8001f16:	0fc9      	lsrs	r1, r1, #31
 8001f18:	468a      	mov	sl, r1
 8001f1a:	492c      	ldr	r1, [pc, #176]	; (8001fcc <__gedf2+0xc4>)
 8001f1c:	031f      	lsls	r7, r3, #12
 8001f1e:	005c      	lsls	r4, r3, #1
 8001f20:	4680      	mov	r8, r0
 8001f22:	0b36      	lsrs	r6, r6, #12
 8001f24:	0d6d      	lsrs	r5, r5, #21
 8001f26:	4691      	mov	r9, r2
 8001f28:	0b3f      	lsrs	r7, r7, #12
 8001f2a:	0d64      	lsrs	r4, r4, #21
 8001f2c:	0fdb      	lsrs	r3, r3, #31
 8001f2e:	428d      	cmp	r5, r1
 8001f30:	d01e      	beq.n	8001f70 <__gedf2+0x68>
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d016      	beq.n	8001f64 <__gedf2+0x5c>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d11e      	bne.n	8001f78 <__gedf2+0x70>
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	4684      	mov	ip, r0
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d101      	bne.n	8001f46 <__gedf2+0x3e>
 8001f42:	433a      	orrs	r2, r7
 8001f44:	d023      	beq.n	8001f8e <__gedf2+0x86>
 8001f46:	4662      	mov	r2, ip
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d01a      	beq.n	8001f82 <__gedf2+0x7a>
 8001f4c:	459a      	cmp	sl, r3
 8001f4e:	d029      	beq.n	8001fa4 <__gedf2+0x9c>
 8001f50:	4651      	mov	r1, sl
 8001f52:	2002      	movs	r0, #2
 8001f54:	3901      	subs	r1, #1
 8001f56:	4008      	ands	r0, r1
 8001f58:	3801      	subs	r0, #1
 8001f5a:	bc1c      	pop	{r2, r3, r4}
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f64:	0039      	movs	r1, r7
 8001f66:	4311      	orrs	r1, r2
 8001f68:	d0e5      	beq.n	8001f36 <__gedf2+0x2e>
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	4240      	negs	r0, r0
 8001f6e:	e7f4      	b.n	8001f5a <__gedf2+0x52>
 8001f70:	4330      	orrs	r0, r6
 8001f72:	d1fa      	bne.n	8001f6a <__gedf2+0x62>
 8001f74:	42ac      	cmp	r4, r5
 8001f76:	d00f      	beq.n	8001f98 <__gedf2+0x90>
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d10f      	bne.n	8001f9c <__gedf2+0x94>
 8001f7c:	433a      	orrs	r2, r7
 8001f7e:	d0e7      	beq.n	8001f50 <__gedf2+0x48>
 8001f80:	e00c      	b.n	8001f9c <__gedf2+0x94>
 8001f82:	2201      	movs	r2, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4393      	bics	r3, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	e7e5      	b.n	8001f5a <__gedf2+0x52>
 8001f8e:	4663      	mov	r3, ip
 8001f90:	2000      	movs	r0, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0e1      	beq.n	8001f5a <__gedf2+0x52>
 8001f96:	e7db      	b.n	8001f50 <__gedf2+0x48>
 8001f98:	433a      	orrs	r2, r7
 8001f9a:	d1e6      	bne.n	8001f6a <__gedf2+0x62>
 8001f9c:	459a      	cmp	sl, r3
 8001f9e:	d1d7      	bne.n	8001f50 <__gedf2+0x48>
 8001fa0:	42a5      	cmp	r5, r4
 8001fa2:	dcd5      	bgt.n	8001f50 <__gedf2+0x48>
 8001fa4:	42a5      	cmp	r5, r4
 8001fa6:	db05      	blt.n	8001fb4 <__gedf2+0xac>
 8001fa8:	42be      	cmp	r6, r7
 8001faa:	d8d1      	bhi.n	8001f50 <__gedf2+0x48>
 8001fac:	d008      	beq.n	8001fc0 <__gedf2+0xb8>
 8001fae:	2000      	movs	r0, #0
 8001fb0:	42be      	cmp	r6, r7
 8001fb2:	d2d2      	bcs.n	8001f5a <__gedf2+0x52>
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	3801      	subs	r0, #1
 8001fba:	4398      	bics	r0, r3
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	e7cc      	b.n	8001f5a <__gedf2+0x52>
 8001fc0:	45c8      	cmp	r8, r9
 8001fc2:	d8c5      	bhi.n	8001f50 <__gedf2+0x48>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	45c8      	cmp	r8, r9
 8001fc8:	d3f4      	bcc.n	8001fb4 <__gedf2+0xac>
 8001fca:	e7c6      	b.n	8001f5a <__gedf2+0x52>
 8001fcc:	000007ff 	.word	0x000007ff

08001fd0 <__ledf2>:
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	464f      	mov	r7, r9
 8001fd4:	4646      	mov	r6, r8
 8001fd6:	46d6      	mov	lr, sl
 8001fd8:	004d      	lsls	r5, r1, #1
 8001fda:	b5c0      	push	{r6, r7, lr}
 8001fdc:	030e      	lsls	r6, r1, #12
 8001fde:	0fc9      	lsrs	r1, r1, #31
 8001fe0:	468a      	mov	sl, r1
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <__ledf2+0xcc>)
 8001fe4:	031f      	lsls	r7, r3, #12
 8001fe6:	005c      	lsls	r4, r3, #1
 8001fe8:	4680      	mov	r8, r0
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	0d6d      	lsrs	r5, r5, #21
 8001fee:	4691      	mov	r9, r2
 8001ff0:	0b3f      	lsrs	r7, r7, #12
 8001ff2:	0d64      	lsrs	r4, r4, #21
 8001ff4:	0fdb      	lsrs	r3, r3, #31
 8001ff6:	428d      	cmp	r5, r1
 8001ff8:	d018      	beq.n	800202c <__ledf2+0x5c>
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d011      	beq.n	8002022 <__ledf2+0x52>
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d118      	bne.n	8002034 <__ledf2+0x64>
 8002002:	4330      	orrs	r0, r6
 8002004:	4684      	mov	ip, r0
 8002006:	2c00      	cmp	r4, #0
 8002008:	d11e      	bne.n	8002048 <__ledf2+0x78>
 800200a:	433a      	orrs	r2, r7
 800200c:	d11c      	bne.n	8002048 <__ledf2+0x78>
 800200e:	4663      	mov	r3, ip
 8002010:	2000      	movs	r0, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <__ledf2+0xa8>
 8002016:	4651      	mov	r1, sl
 8002018:	2002      	movs	r0, #2
 800201a:	3901      	subs	r1, #1
 800201c:	4008      	ands	r0, r1
 800201e:	3801      	subs	r0, #1
 8002020:	e02a      	b.n	8002078 <__ledf2+0xa8>
 8002022:	0039      	movs	r1, r7
 8002024:	4311      	orrs	r1, r2
 8002026:	d0ea      	beq.n	8001ffe <__ledf2+0x2e>
 8002028:	2002      	movs	r0, #2
 800202a:	e025      	b.n	8002078 <__ledf2+0xa8>
 800202c:	4330      	orrs	r0, r6
 800202e:	d1fb      	bne.n	8002028 <__ledf2+0x58>
 8002030:	42ac      	cmp	r4, r5
 8002032:	d026      	beq.n	8002082 <__ledf2+0xb2>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d126      	bne.n	8002086 <__ledf2+0xb6>
 8002038:	433a      	orrs	r2, r7
 800203a:	d124      	bne.n	8002086 <__ledf2+0xb6>
 800203c:	4651      	mov	r1, sl
 800203e:	2002      	movs	r0, #2
 8002040:	3901      	subs	r1, #1
 8002042:	4008      	ands	r0, r1
 8002044:	3801      	subs	r0, #1
 8002046:	e017      	b.n	8002078 <__ledf2+0xa8>
 8002048:	4662      	mov	r2, ip
 800204a:	2a00      	cmp	r2, #0
 800204c:	d00f      	beq.n	800206e <__ledf2+0x9e>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1e1      	bne.n	8002016 <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	db05      	blt.n	8002062 <__ledf2+0x92>
 8002056:	42be      	cmp	r6, r7
 8002058:	d8dd      	bhi.n	8002016 <__ledf2+0x46>
 800205a:	d019      	beq.n	8002090 <__ledf2+0xc0>
 800205c:	2000      	movs	r0, #0
 800205e:	42be      	cmp	r6, r7
 8002060:	d20a      	bcs.n	8002078 <__ledf2+0xa8>
 8002062:	4650      	mov	r0, sl
 8002064:	2301      	movs	r3, #1
 8002066:	3801      	subs	r0, #1
 8002068:	4398      	bics	r0, r3
 800206a:	3001      	adds	r0, #1
 800206c:	e004      	b.n	8002078 <__ledf2+0xa8>
 800206e:	2201      	movs	r2, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	4393      	bics	r3, r2
 8002074:	0018      	movs	r0, r3
 8002076:	3001      	adds	r0, #1
 8002078:	bc1c      	pop	{r2, r3, r4}
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	46a2      	mov	sl, r4
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	433a      	orrs	r2, r7
 8002084:	d1d0      	bne.n	8002028 <__ledf2+0x58>
 8002086:	459a      	cmp	sl, r3
 8002088:	d1c5      	bne.n	8002016 <__ledf2+0x46>
 800208a:	42a5      	cmp	r5, r4
 800208c:	dcc3      	bgt.n	8002016 <__ledf2+0x46>
 800208e:	e7e0      	b.n	8002052 <__ledf2+0x82>
 8002090:	45c8      	cmp	r8, r9
 8002092:	d8c0      	bhi.n	8002016 <__ledf2+0x46>
 8002094:	2000      	movs	r0, #0
 8002096:	45c8      	cmp	r8, r9
 8002098:	d3e3      	bcc.n	8002062 <__ledf2+0x92>
 800209a:	e7ed      	b.n	8002078 <__ledf2+0xa8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_dmul>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	4657      	mov	r7, sl
 80020a4:	46de      	mov	lr, fp
 80020a6:	464e      	mov	r6, r9
 80020a8:	4645      	mov	r5, r8
 80020aa:	b5e0      	push	{r5, r6, r7, lr}
 80020ac:	4683      	mov	fp, r0
 80020ae:	0006      	movs	r6, r0
 80020b0:	030f      	lsls	r7, r1, #12
 80020b2:	0048      	lsls	r0, r1, #1
 80020b4:	b087      	sub	sp, #28
 80020b6:	4692      	mov	sl, r2
 80020b8:	001d      	movs	r5, r3
 80020ba:	0b3f      	lsrs	r7, r7, #12
 80020bc:	0d40      	lsrs	r0, r0, #21
 80020be:	0fcc      	lsrs	r4, r1, #31
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x26>
 80020c4:	e06f      	b.n	80021a6 <__aeabi_dmul+0x106>
 80020c6:	4bde      	ldr	r3, [pc, #888]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d038      	beq.n	800213e <__aeabi_dmul+0x9e>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	00ff      	lsls	r7, r7, #3
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431f      	orrs	r7, r3
 80020d4:	0f73      	lsrs	r3, r6, #29
 80020d6:	433b      	orrs	r3, r7
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	4bda      	ldr	r3, [pc, #872]	; (8002444 <__aeabi_dmul+0x3a4>)
 80020dc:	2700      	movs	r7, #0
 80020de:	4699      	mov	r9, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	469b      	mov	fp, r3
 80020e4:	00f6      	lsls	r6, r6, #3
 80020e6:	4481      	add	r9, r0
 80020e8:	032b      	lsls	r3, r5, #12
 80020ea:	0069      	lsls	r1, r5, #1
 80020ec:	0b1b      	lsrs	r3, r3, #12
 80020ee:	4652      	mov	r2, sl
 80020f0:	4698      	mov	r8, r3
 80020f2:	0d49      	lsrs	r1, r1, #21
 80020f4:	0fed      	lsrs	r5, r5, #31
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x5c>
 80020fa:	e085      	b.n	8002208 <__aeabi_dmul+0x168>
 80020fc:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <__aeabi_dmul+0x3a0>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d100      	bne.n	8002104 <__aeabi_dmul+0x64>
 8002102:	e073      	b.n	80021ec <__aeabi_dmul+0x14c>
 8002104:	4643      	mov	r3, r8
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	48cc      	ldr	r0, [pc, #816]	; (8002444 <__aeabi_dmul+0x3a4>)
 8002112:	0f52      	lsrs	r2, r2, #29
 8002114:	4684      	mov	ip, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	4652      	mov	r2, sl
 800211a:	2000      	movs	r0, #0
 800211c:	4461      	add	r1, ip
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	4489      	add	r9, r1
 8002122:	0021      	movs	r1, r4
 8002124:	4069      	eors	r1, r5
 8002126:	9100      	str	r1, [sp, #0]
 8002128:	468c      	mov	ip, r1
 800212a:	2101      	movs	r1, #1
 800212c:	4449      	add	r1, r9
 800212e:	468a      	mov	sl, r1
 8002130:	2f0f      	cmp	r7, #15
 8002132:	d900      	bls.n	8002136 <__aeabi_dmul+0x96>
 8002134:	e090      	b.n	8002258 <__aeabi_dmul+0x1b8>
 8002136:	49c4      	ldr	r1, [pc, #784]	; (8002448 <__aeabi_dmul+0x3a8>)
 8002138:	00bf      	lsls	r7, r7, #2
 800213a:	59cf      	ldr	r7, [r1, r7]
 800213c:	46bf      	mov	pc, r7
 800213e:	465b      	mov	r3, fp
 8002140:	433b      	orrs	r3, r7
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	d000      	beq.n	8002148 <__aeabi_dmul+0xa8>
 8002146:	e16a      	b.n	800241e <__aeabi_dmul+0x37e>
 8002148:	2302      	movs	r3, #2
 800214a:	2708      	movs	r7, #8
 800214c:	2600      	movs	r6, #0
 800214e:	4681      	mov	r9, r0
 8002150:	469b      	mov	fp, r3
 8002152:	e7c9      	b.n	80020e8 <__aeabi_dmul+0x48>
 8002154:	0032      	movs	r2, r6
 8002156:	4658      	mov	r0, fp
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	4661      	mov	r1, ip
 800215c:	9100      	str	r1, [sp, #0]
 800215e:	2802      	cmp	r0, #2
 8002160:	d100      	bne.n	8002164 <__aeabi_dmul+0xc4>
 8002162:	e075      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002164:	2803      	cmp	r0, #3
 8002166:	d100      	bne.n	800216a <__aeabi_dmul+0xca>
 8002168:	e1fe      	b.n	8002568 <__aeabi_dmul+0x4c8>
 800216a:	2801      	cmp	r0, #1
 800216c:	d000      	beq.n	8002170 <__aeabi_dmul+0xd0>
 800216e:	e12c      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002170:	2300      	movs	r3, #0
 8002172:	2700      	movs	r7, #0
 8002174:	2600      	movs	r6, #0
 8002176:	2500      	movs	r5, #0
 8002178:	033f      	lsls	r7, r7, #12
 800217a:	0d2a      	lsrs	r2, r5, #20
 800217c:	0b3f      	lsrs	r7, r7, #12
 800217e:	48b3      	ldr	r0, [pc, #716]	; (800244c <__aeabi_dmul+0x3ac>)
 8002180:	0512      	lsls	r2, r2, #20
 8002182:	433a      	orrs	r2, r7
 8002184:	4002      	ands	r2, r0
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	4313      	orrs	r3, r2
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	07d1      	lsls	r1, r2, #31
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	430b      	orrs	r3, r1
 8002194:	0030      	movs	r0, r6
 8002196:	0019      	movs	r1, r3
 8002198:	b007      	add	sp, #28
 800219a:	bc3c      	pop	{r2, r3, r4, r5}
 800219c:	4690      	mov	r8, r2
 800219e:	4699      	mov	r9, r3
 80021a0:	46a2      	mov	sl, r4
 80021a2:	46ab      	mov	fp, r5
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	465b      	mov	r3, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x110>
 80021ae:	e12f      	b.n	8002410 <__aeabi_dmul+0x370>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x116>
 80021b4:	e1a5      	b.n	8002502 <__aeabi_dmul+0x462>
 80021b6:	0038      	movs	r0, r7
 80021b8:	f000 fec0 	bl	8002f3c <__clzsi2>
 80021bc:	0003      	movs	r3, r0
 80021be:	3b0b      	subs	r3, #11
 80021c0:	2b1c      	cmp	r3, #28
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dmul+0x126>
 80021c4:	e196      	b.n	80024f4 <__aeabi_dmul+0x454>
 80021c6:	221d      	movs	r2, #29
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	465a      	mov	r2, fp
 80021cc:	0001      	movs	r1, r0
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	465e      	mov	r6, fp
 80021d2:	3908      	subs	r1, #8
 80021d4:	408f      	lsls	r7, r1
 80021d6:	0013      	movs	r3, r2
 80021d8:	408e      	lsls	r6, r1
 80021da:	433b      	orrs	r3, r7
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <__aeabi_dmul+0x3b0>)
 80021e0:	2700      	movs	r7, #0
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	4699      	mov	r9, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	469b      	mov	fp, r3
 80021ea:	e77d      	b.n	80020e8 <__aeabi_dmul+0x48>
 80021ec:	4641      	mov	r1, r8
 80021ee:	4653      	mov	r3, sl
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4993      	ldr	r1, [pc, #588]	; (8002440 <__aeabi_dmul+0x3a0>)
 80021f4:	468c      	mov	ip, r1
 80021f6:	44e1      	add	r9, ip
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d000      	beq.n	80021fe <__aeabi_dmul+0x15e>
 80021fc:	e11a      	b.n	8002434 <__aeabi_dmul+0x394>
 80021fe:	2202      	movs	r2, #2
 8002200:	2002      	movs	r0, #2
 8002202:	4317      	orrs	r7, r2
 8002204:	2200      	movs	r2, #0
 8002206:	e78c      	b.n	8002122 <__aeabi_dmul+0x82>
 8002208:	4313      	orrs	r3, r2
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0x16e>
 800220c:	e10d      	b.n	800242a <__aeabi_dmul+0x38a>
 800220e:	4643      	mov	r3, r8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0x176>
 8002214:	e181      	b.n	800251a <__aeabi_dmul+0x47a>
 8002216:	4640      	mov	r0, r8
 8002218:	f000 fe90 	bl	8002f3c <__clzsi2>
 800221c:	0002      	movs	r2, r0
 800221e:	3a0b      	subs	r2, #11
 8002220:	2a1c      	cmp	r2, #28
 8002222:	dd00      	ble.n	8002226 <__aeabi_dmul+0x186>
 8002224:	e172      	b.n	800250c <__aeabi_dmul+0x46c>
 8002226:	0001      	movs	r1, r0
 8002228:	4643      	mov	r3, r8
 800222a:	3908      	subs	r1, #8
 800222c:	408b      	lsls	r3, r1
 800222e:	4698      	mov	r8, r3
 8002230:	231d      	movs	r3, #29
 8002232:	1a9a      	subs	r2, r3, r2
 8002234:	4653      	mov	r3, sl
 8002236:	40d3      	lsrs	r3, r2
 8002238:	001a      	movs	r2, r3
 800223a:	4643      	mov	r3, r8
 800223c:	4313      	orrs	r3, r2
 800223e:	4652      	mov	r2, sl
 8002240:	408a      	lsls	r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	1a08      	subs	r0, r1, r0
 8002246:	4982      	ldr	r1, [pc, #520]	; (8002450 <__aeabi_dmul+0x3b0>)
 8002248:	4689      	mov	r9, r1
 800224a:	4481      	add	r9, r0
 800224c:	2000      	movs	r0, #0
 800224e:	e768      	b.n	8002122 <__aeabi_dmul+0x82>
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <__aeabi_dmul+0x3a0>)
 8002252:	2700      	movs	r7, #0
 8002254:	2600      	movs	r6, #0
 8002256:	e78e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002258:	0c14      	lsrs	r4, r2, #16
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	0c12      	lsrs	r2, r2, #16
 800225e:	0011      	movs	r1, r2
 8002260:	0c37      	lsrs	r7, r6, #16
 8002262:	0436      	lsls	r6, r6, #16
 8002264:	0c35      	lsrs	r5, r6, #16
 8002266:	4379      	muls	r1, r7
 8002268:	0028      	movs	r0, r5
 800226a:	468c      	mov	ip, r1
 800226c:	002e      	movs	r6, r5
 800226e:	4360      	muls	r0, r4
 8002270:	4460      	add	r0, ip
 8002272:	4683      	mov	fp, r0
 8002274:	4356      	muls	r6, r2
 8002276:	0021      	movs	r1, r4
 8002278:	0c30      	lsrs	r0, r6, #16
 800227a:	4680      	mov	r8, r0
 800227c:	4658      	mov	r0, fp
 800227e:	4379      	muls	r1, r7
 8002280:	4440      	add	r0, r8
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	4584      	cmp	ip, r0
 8002286:	d906      	bls.n	8002296 <__aeabi_dmul+0x1f6>
 8002288:	4688      	mov	r8, r1
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0249      	lsls	r1, r1, #9
 800228e:	468c      	mov	ip, r1
 8002290:	44e0      	add	r8, ip
 8002292:	4641      	mov	r1, r8
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	0436      	lsls	r6, r6, #16
 8002298:	0c01      	lsrs	r1, r0, #16
 800229a:	0c36      	lsrs	r6, r6, #16
 800229c:	0400      	lsls	r0, r0, #16
 800229e:	468b      	mov	fp, r1
 80022a0:	1981      	adds	r1, r0, r6
 80022a2:	0c1e      	lsrs	r6, r3, #16
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	0019      	movs	r1, r3
 80022ac:	4379      	muls	r1, r7
 80022ae:	468c      	mov	ip, r1
 80022b0:	0028      	movs	r0, r5
 80022b2:	4375      	muls	r5, r6
 80022b4:	4465      	add	r5, ip
 80022b6:	46a8      	mov	r8, r5
 80022b8:	4358      	muls	r0, r3
 80022ba:	0c05      	lsrs	r5, r0, #16
 80022bc:	4445      	add	r5, r8
 80022be:	4377      	muls	r7, r6
 80022c0:	42a9      	cmp	r1, r5
 80022c2:	d903      	bls.n	80022cc <__aeabi_dmul+0x22c>
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	468c      	mov	ip, r1
 80022ca:	4467      	add	r7, ip
 80022cc:	0c29      	lsrs	r1, r5, #16
 80022ce:	468c      	mov	ip, r1
 80022d0:	0039      	movs	r1, r7
 80022d2:	0400      	lsls	r0, r0, #16
 80022d4:	0c00      	lsrs	r0, r0, #16
 80022d6:	042d      	lsls	r5, r5, #16
 80022d8:	182d      	adds	r5, r5, r0
 80022da:	4461      	add	r1, ip
 80022dc:	44ab      	add	fp, r5
 80022de:	9105      	str	r1, [sp, #20]
 80022e0:	4659      	mov	r1, fp
 80022e2:	9104      	str	r1, [sp, #16]
 80022e4:	9901      	ldr	r1, [sp, #4]
 80022e6:	040f      	lsls	r7, r1, #16
 80022e8:	0c3f      	lsrs	r7, r7, #16
 80022ea:	0c08      	lsrs	r0, r1, #16
 80022ec:	0039      	movs	r1, r7
 80022ee:	4351      	muls	r1, r2
 80022f0:	4342      	muls	r2, r0
 80022f2:	4690      	mov	r8, r2
 80022f4:	0002      	movs	r2, r0
 80022f6:	468c      	mov	ip, r1
 80022f8:	0c09      	lsrs	r1, r1, #16
 80022fa:	468b      	mov	fp, r1
 80022fc:	4362      	muls	r2, r4
 80022fe:	437c      	muls	r4, r7
 8002300:	4444      	add	r4, r8
 8002302:	445c      	add	r4, fp
 8002304:	45a0      	cmp	r8, r4
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x270>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	4688      	mov	r8, r1
 800230e:	4442      	add	r2, r8
 8002310:	0c21      	lsrs	r1, r4, #16
 8002312:	4688      	mov	r8, r1
 8002314:	4661      	mov	r1, ip
 8002316:	0409      	lsls	r1, r1, #16
 8002318:	0c09      	lsrs	r1, r1, #16
 800231a:	468c      	mov	ip, r1
 800231c:	0039      	movs	r1, r7
 800231e:	4359      	muls	r1, r3
 8002320:	4343      	muls	r3, r0
 8002322:	4370      	muls	r0, r6
 8002324:	437e      	muls	r6, r7
 8002326:	0c0f      	lsrs	r7, r1, #16
 8002328:	18f6      	adds	r6, r6, r3
 800232a:	0424      	lsls	r4, r4, #16
 800232c:	19be      	adds	r6, r7, r6
 800232e:	4464      	add	r4, ip
 8002330:	4442      	add	r2, r8
 8002332:	468c      	mov	ip, r1
 8002334:	42b3      	cmp	r3, r6
 8002336:	d903      	bls.n	8002340 <__aeabi_dmul+0x2a0>
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	4698      	mov	r8, r3
 800233e:	4440      	add	r0, r8
 8002340:	9b02      	ldr	r3, [sp, #8]
 8002342:	4661      	mov	r1, ip
 8002344:	4698      	mov	r8, r3
 8002346:	9b04      	ldr	r3, [sp, #16]
 8002348:	0437      	lsls	r7, r6, #16
 800234a:	4443      	add	r3, r8
 800234c:	469b      	mov	fp, r3
 800234e:	45ab      	cmp	fp, r5
 8002350:	41ad      	sbcs	r5, r5
 8002352:	426b      	negs	r3, r5
 8002354:	040d      	lsls	r5, r1, #16
 8002356:	9905      	ldr	r1, [sp, #20]
 8002358:	0c2d      	lsrs	r5, r5, #16
 800235a:	468c      	mov	ip, r1
 800235c:	197f      	adds	r7, r7, r5
 800235e:	4467      	add	r7, ip
 8002360:	18fd      	adds	r5, r7, r3
 8002362:	46a8      	mov	r8, r5
 8002364:	465d      	mov	r5, fp
 8002366:	192d      	adds	r5, r5, r4
 8002368:	42a5      	cmp	r5, r4
 800236a:	41a4      	sbcs	r4, r4
 800236c:	4693      	mov	fp, r2
 800236e:	4264      	negs	r4, r4
 8002370:	46a4      	mov	ip, r4
 8002372:	44c3      	add	fp, r8
 8002374:	44dc      	add	ip, fp
 8002376:	428f      	cmp	r7, r1
 8002378:	41bf      	sbcs	r7, r7
 800237a:	4598      	cmp	r8, r3
 800237c:	419b      	sbcs	r3, r3
 800237e:	4593      	cmp	fp, r2
 8002380:	4192      	sbcs	r2, r2
 8002382:	45a4      	cmp	ip, r4
 8002384:	41a4      	sbcs	r4, r4
 8002386:	425b      	negs	r3, r3
 8002388:	427f      	negs	r7, r7
 800238a:	431f      	orrs	r7, r3
 800238c:	0c36      	lsrs	r6, r6, #16
 800238e:	4252      	negs	r2, r2
 8002390:	4264      	negs	r4, r4
 8002392:	19bf      	adds	r7, r7, r6
 8002394:	4322      	orrs	r2, r4
 8002396:	18bf      	adds	r7, r7, r2
 8002398:	4662      	mov	r2, ip
 800239a:	1838      	adds	r0, r7, r0
 800239c:	0243      	lsls	r3, r0, #9
 800239e:	0dd2      	lsrs	r2, r2, #23
 80023a0:	9903      	ldr	r1, [sp, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	026a      	lsls	r2, r5, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	1e50      	subs	r0, r2, #1
 80023aa:	4182      	sbcs	r2, r0
 80023ac:	4661      	mov	r1, ip
 80023ae:	0ded      	lsrs	r5, r5, #23
 80023b0:	432a      	orrs	r2, r5
 80023b2:	024e      	lsls	r6, r1, #9
 80023b4:	4332      	orrs	r2, r6
 80023b6:	01d9      	lsls	r1, r3, #7
 80023b8:	d400      	bmi.n	80023bc <__aeabi_dmul+0x31c>
 80023ba:	e0b3      	b.n	8002524 <__aeabi_dmul+0x484>
 80023bc:	2601      	movs	r6, #1
 80023be:	0850      	lsrs	r0, r2, #1
 80023c0:	4032      	ands	r2, r6
 80023c2:	4302      	orrs	r2, r0
 80023c4:	07de      	lsls	r6, r3, #31
 80023c6:	4332      	orrs	r2, r6
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	4c22      	ldr	r4, [pc, #136]	; (8002454 <__aeabi_dmul+0x3b4>)
 80023cc:	4454      	add	r4, sl
 80023ce:	2c00      	cmp	r4, #0
 80023d0:	dd62      	ble.n	8002498 <__aeabi_dmul+0x3f8>
 80023d2:	0751      	lsls	r1, r2, #29
 80023d4:	d009      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023d6:	200f      	movs	r0, #15
 80023d8:	4010      	ands	r0, r2
 80023da:	2804      	cmp	r0, #4
 80023dc:	d005      	beq.n	80023ea <__aeabi_dmul+0x34a>
 80023de:	1d10      	adds	r0, r2, #4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	4252      	negs	r2, r2
 80023e6:	189b      	adds	r3, r3, r2
 80023e8:	0002      	movs	r2, r0
 80023ea:	01d9      	lsls	r1, r3, #7
 80023ec:	d504      	bpl.n	80023f8 <__aeabi_dmul+0x358>
 80023ee:	2480      	movs	r4, #128	; 0x80
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <__aeabi_dmul+0x3b8>)
 80023f2:	00e4      	lsls	r4, r4, #3
 80023f4:	4003      	ands	r3, r0
 80023f6:	4454      	add	r4, sl
 80023f8:	4818      	ldr	r0, [pc, #96]	; (800245c <__aeabi_dmul+0x3bc>)
 80023fa:	4284      	cmp	r4, r0
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x360>
 80023fe:	e727      	b.n	8002250 <__aeabi_dmul+0x1b0>
 8002400:	075e      	lsls	r6, r3, #29
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	0b1f      	lsrs	r7, r3, #12
 8002408:	0563      	lsls	r3, r4, #21
 800240a:	4316      	orrs	r6, r2
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	e6b2      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002410:	2300      	movs	r3, #0
 8002412:	4699      	mov	r9, r3
 8002414:	3301      	adds	r3, #1
 8002416:	2704      	movs	r7, #4
 8002418:	2600      	movs	r6, #0
 800241a:	469b      	mov	fp, r3
 800241c:	e664      	b.n	80020e8 <__aeabi_dmul+0x48>
 800241e:	2303      	movs	r3, #3
 8002420:	9701      	str	r7, [sp, #4]
 8002422:	4681      	mov	r9, r0
 8002424:	270c      	movs	r7, #12
 8002426:	469b      	mov	fp, r3
 8002428:	e65e      	b.n	80020e8 <__aeabi_dmul+0x48>
 800242a:	2201      	movs	r2, #1
 800242c:	2001      	movs	r0, #1
 800242e:	4317      	orrs	r7, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e676      	b.n	8002122 <__aeabi_dmul+0x82>
 8002434:	2303      	movs	r3, #3
 8002436:	2003      	movs	r0, #3
 8002438:	431f      	orrs	r7, r3
 800243a:	4643      	mov	r3, r8
 800243c:	e671      	b.n	8002122 <__aeabi_dmul+0x82>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	000007ff 	.word	0x000007ff
 8002444:	fffffc01 	.word	0xfffffc01
 8002448:	08017724 	.word	0x08017724
 800244c:	800fffff 	.word	0x800fffff
 8002450:	fffffc0d 	.word	0xfffffc0d
 8002454:	000003ff 	.word	0x000003ff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	000007fe 	.word	0x000007fe
 8002460:	2300      	movs	r3, #0
 8002462:	2780      	movs	r7, #128	; 0x80
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	033f      	lsls	r7, r7, #12
 8002468:	2600      	movs	r6, #0
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <__aeabi_dmul+0x4d8>)
 800246c:	e683      	b.n	8002176 <__aeabi_dmul+0xd6>
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	0032      	movs	r2, r6
 8002472:	46a4      	mov	ip, r4
 8002474:	4658      	mov	r0, fp
 8002476:	e670      	b.n	800215a <__aeabi_dmul+0xba>
 8002478:	46ac      	mov	ip, r5
 800247a:	e66e      	b.n	800215a <__aeabi_dmul+0xba>
 800247c:	2780      	movs	r7, #128	; 0x80
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	033f      	lsls	r7, r7, #12
 8002482:	4239      	tst	r1, r7
 8002484:	d02d      	beq.n	80024e2 <__aeabi_dmul+0x442>
 8002486:	423b      	tst	r3, r7
 8002488:	d12b      	bne.n	80024e2 <__aeabi_dmul+0x442>
 800248a:	431f      	orrs	r7, r3
 800248c:	033f      	lsls	r7, r7, #12
 800248e:	0b3f      	lsrs	r7, r7, #12
 8002490:	9500      	str	r5, [sp, #0]
 8002492:	0016      	movs	r6, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002496:	e66e      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002498:	2501      	movs	r5, #1
 800249a:	1b2d      	subs	r5, r5, r4
 800249c:	2d38      	cmp	r5, #56	; 0x38
 800249e:	dd00      	ble.n	80024a2 <__aeabi_dmul+0x402>
 80024a0:	e666      	b.n	8002170 <__aeabi_dmul+0xd0>
 80024a2:	2d1f      	cmp	r5, #31
 80024a4:	dc40      	bgt.n	8002528 <__aeabi_dmul+0x488>
 80024a6:	4835      	ldr	r0, [pc, #212]	; (800257c <__aeabi_dmul+0x4dc>)
 80024a8:	001c      	movs	r4, r3
 80024aa:	4450      	add	r0, sl
 80024ac:	0016      	movs	r6, r2
 80024ae:	4082      	lsls	r2, r0
 80024b0:	4084      	lsls	r4, r0
 80024b2:	40ee      	lsrs	r6, r5
 80024b4:	1e50      	subs	r0, r2, #1
 80024b6:	4182      	sbcs	r2, r0
 80024b8:	4334      	orrs	r4, r6
 80024ba:	4314      	orrs	r4, r2
 80024bc:	40eb      	lsrs	r3, r5
 80024be:	0762      	lsls	r2, r4, #29
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024c2:	220f      	movs	r2, #15
 80024c4:	4022      	ands	r2, r4
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dmul+0x436>
 80024ca:	0022      	movs	r2, r4
 80024cc:	1d14      	adds	r4, r2, #4
 80024ce:	4294      	cmp	r4, r2
 80024d0:	4180      	sbcs	r0, r0
 80024d2:	4240      	negs	r0, r0
 80024d4:	181b      	adds	r3, r3, r0
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	d53e      	bpl.n	8002558 <__aeabi_dmul+0x4b8>
 80024da:	2301      	movs	r3, #1
 80024dc:	2700      	movs	r7, #0
 80024de:	2600      	movs	r6, #0
 80024e0:	e649      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024e2:	2780      	movs	r7, #128	; 0x80
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	033f      	lsls	r7, r7, #12
 80024e8:	431f      	orrs	r7, r3
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	0b3f      	lsrs	r7, r7, #12
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <__aeabi_dmul+0x4d8>)
 80024f2:	e640      	b.n	8002176 <__aeabi_dmul+0xd6>
 80024f4:	0003      	movs	r3, r0
 80024f6:	465a      	mov	r2, fp
 80024f8:	3b28      	subs	r3, #40	; 0x28
 80024fa:	409a      	lsls	r2, r3
 80024fc:	2600      	movs	r6, #0
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	e66d      	b.n	80021de <__aeabi_dmul+0x13e>
 8002502:	4658      	mov	r0, fp
 8002504:	f000 fd1a 	bl	8002f3c <__clzsi2>
 8002508:	3020      	adds	r0, #32
 800250a:	e657      	b.n	80021bc <__aeabi_dmul+0x11c>
 800250c:	0003      	movs	r3, r0
 800250e:	4652      	mov	r2, sl
 8002510:	3b28      	subs	r3, #40	; 0x28
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	e693      	b.n	8002242 <__aeabi_dmul+0x1a2>
 800251a:	4650      	mov	r0, sl
 800251c:	f000 fd0e 	bl	8002f3c <__clzsi2>
 8002520:	3020      	adds	r0, #32
 8002522:	e67b      	b.n	800221c <__aeabi_dmul+0x17c>
 8002524:	46ca      	mov	sl, r9
 8002526:	e750      	b.n	80023ca <__aeabi_dmul+0x32a>
 8002528:	201f      	movs	r0, #31
 800252a:	001e      	movs	r6, r3
 800252c:	4240      	negs	r0, r0
 800252e:	1b04      	subs	r4, r0, r4
 8002530:	40e6      	lsrs	r6, r4
 8002532:	2d20      	cmp	r5, #32
 8002534:	d003      	beq.n	800253e <__aeabi_dmul+0x49e>
 8002536:	4c12      	ldr	r4, [pc, #72]	; (8002580 <__aeabi_dmul+0x4e0>)
 8002538:	4454      	add	r4, sl
 800253a:	40a3      	lsls	r3, r4
 800253c:	431a      	orrs	r2, r3
 800253e:	1e50      	subs	r0, r2, #1
 8002540:	4182      	sbcs	r2, r0
 8002542:	4332      	orrs	r2, r6
 8002544:	2607      	movs	r6, #7
 8002546:	2700      	movs	r7, #0
 8002548:	4016      	ands	r6, r2
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x4c0>
 800254c:	200f      	movs	r0, #15
 800254e:	2300      	movs	r3, #0
 8002550:	4010      	ands	r0, r2
 8002552:	0014      	movs	r4, r2
 8002554:	2804      	cmp	r0, #4
 8002556:	d1b9      	bne.n	80024cc <__aeabi_dmul+0x42c>
 8002558:	0022      	movs	r2, r4
 800255a:	075e      	lsls	r6, r3, #29
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	0b1f      	lsrs	r7, r3, #12
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	4316      	orrs	r6, r2
 8002564:	2300      	movs	r3, #0
 8002566:	e606      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002568:	2780      	movs	r7, #128	; 0x80
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	0016      	movs	r6, r2
 8002574:	4b00      	ldr	r3, [pc, #0]	; (8002578 <__aeabi_dmul+0x4d8>)
 8002576:	e5fe      	b.n	8002176 <__aeabi_dmul+0xd6>
 8002578:	000007ff 	.word	0x000007ff
 800257c:	0000041e 	.word	0x0000041e
 8002580:	0000043e 	.word	0x0000043e

08002584 <__aeabi_dsub>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	4657      	mov	r7, sl
 8002588:	464e      	mov	r6, r9
 800258a:	4645      	mov	r5, r8
 800258c:	46de      	mov	lr, fp
 800258e:	000c      	movs	r4, r1
 8002590:	0309      	lsls	r1, r1, #12
 8002592:	b5e0      	push	{r5, r6, r7, lr}
 8002594:	0a49      	lsrs	r1, r1, #9
 8002596:	0f46      	lsrs	r6, r0, #29
 8002598:	005f      	lsls	r7, r3, #1
 800259a:	4331      	orrs	r1, r6
 800259c:	031e      	lsls	r6, r3, #12
 800259e:	0fdb      	lsrs	r3, r3, #31
 80025a0:	0a76      	lsrs	r6, r6, #9
 80025a2:	469b      	mov	fp, r3
 80025a4:	0f53      	lsrs	r3, r2, #29
 80025a6:	4333      	orrs	r3, r6
 80025a8:	4ec8      	ldr	r6, [pc, #800]	; (80028cc <__aeabi_dsub+0x348>)
 80025aa:	0065      	lsls	r5, r4, #1
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	0fe4      	lsrs	r4, r4, #31
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	0d6d      	lsrs	r5, r5, #21
 80025b4:	46a2      	mov	sl, r4
 80025b6:	4681      	mov	r9, r0
 80025b8:	0d7f      	lsrs	r7, r7, #21
 80025ba:	469c      	mov	ip, r3
 80025bc:	4690      	mov	r8, r2
 80025be:	42b7      	cmp	r7, r6
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x40>
 80025c2:	e0b9      	b.n	8002738 <__aeabi_dsub+0x1b4>
 80025c4:	465b      	mov	r3, fp
 80025c6:	2601      	movs	r6, #1
 80025c8:	4073      	eors	r3, r6
 80025ca:	469b      	mov	fp, r3
 80025cc:	1bee      	subs	r6, r5, r7
 80025ce:	45a3      	cmp	fp, r4
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x50>
 80025d2:	e083      	b.n	80026dc <__aeabi_dsub+0x158>
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	dd63      	ble.n	80026a0 <__aeabi_dsub+0x11c>
 80025d8:	2f00      	cmp	r7, #0
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x5a>
 80025dc:	e0b1      	b.n	8002742 <__aeabi_dsub+0x1be>
 80025de:	4663      	mov	r3, ip
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x62>
 80025e4:	e123      	b.n	800282e <__aeabi_dsub+0x2aa>
 80025e6:	1e73      	subs	r3, r6, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x6a>
 80025ec:	e1ba      	b.n	8002964 <__aeabi_dsub+0x3e0>
 80025ee:	1a86      	subs	r6, r0, r2
 80025f0:	4663      	mov	r3, ip
 80025f2:	42b0      	cmp	r0, r6
 80025f4:	4180      	sbcs	r0, r0
 80025f6:	2501      	movs	r5, #1
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	4240      	negs	r0, r0
 80025fc:	1a09      	subs	r1, r1, r0
 80025fe:	020b      	lsls	r3, r1, #8
 8002600:	d400      	bmi.n	8002604 <__aeabi_dsub+0x80>
 8002602:	e147      	b.n	8002894 <__aeabi_dsub+0x310>
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	0a4b      	lsrs	r3, r1, #9
 8002608:	4698      	mov	r8, r3
 800260a:	4643      	mov	r3, r8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x8e>
 8002610:	e189      	b.n	8002926 <__aeabi_dsub+0x3a2>
 8002612:	4640      	mov	r0, r8
 8002614:	f000 fc92 	bl	8002f3c <__clzsi2>
 8002618:	0003      	movs	r3, r0
 800261a:	3b08      	subs	r3, #8
 800261c:	2b1f      	cmp	r3, #31
 800261e:	dd00      	ble.n	8002622 <__aeabi_dsub+0x9e>
 8002620:	e17c      	b.n	800291c <__aeabi_dsub+0x398>
 8002622:	2220      	movs	r2, #32
 8002624:	0030      	movs	r0, r6
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	4641      	mov	r1, r8
 800262a:	40d0      	lsrs	r0, r2
 800262c:	4099      	lsls	r1, r3
 800262e:	0002      	movs	r2, r0
 8002630:	409e      	lsls	r6, r3
 8002632:	430a      	orrs	r2, r1
 8002634:	429d      	cmp	r5, r3
 8002636:	dd00      	ble.n	800263a <__aeabi_dsub+0xb6>
 8002638:	e16a      	b.n	8002910 <__aeabi_dsub+0x38c>
 800263a:	1b5d      	subs	r5, r3, r5
 800263c:	1c6b      	adds	r3, r5, #1
 800263e:	2b1f      	cmp	r3, #31
 8002640:	dd00      	ble.n	8002644 <__aeabi_dsub+0xc0>
 8002642:	e194      	b.n	800296e <__aeabi_dsub+0x3ea>
 8002644:	2120      	movs	r1, #32
 8002646:	0010      	movs	r0, r2
 8002648:	0035      	movs	r5, r6
 800264a:	1ac9      	subs	r1, r1, r3
 800264c:	408e      	lsls	r6, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4088      	lsls	r0, r1
 8002652:	40dd      	lsrs	r5, r3
 8002654:	1e71      	subs	r1, r6, #1
 8002656:	418e      	sbcs	r6, r1
 8002658:	0011      	movs	r1, r2
 800265a:	2207      	movs	r2, #7
 800265c:	4328      	orrs	r0, r5
 800265e:	2500      	movs	r5, #0
 8002660:	4306      	orrs	r6, r0
 8002662:	4032      	ands	r2, r6
 8002664:	2a00      	cmp	r2, #0
 8002666:	d009      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002668:	230f      	movs	r3, #15
 800266a:	4033      	ands	r3, r6
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <__aeabi_dsub+0xf8>
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	42b3      	cmp	r3, r6
 8002674:	41b6      	sbcs	r6, r6
 8002676:	4276      	negs	r6, r6
 8002678:	1989      	adds	r1, r1, r6
 800267a:	001e      	movs	r6, r3
 800267c:	020b      	lsls	r3, r1, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xfe>
 8002680:	e23d      	b.n	8002afe <__aeabi_dsub+0x57a>
 8002682:	1c6a      	adds	r2, r5, #1
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <__aeabi_dsub+0x348>)
 8002686:	0555      	lsls	r5, r2, #21
 8002688:	0d6d      	lsrs	r5, r5, #21
 800268a:	429a      	cmp	r2, r3
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x10c>
 800268e:	e119      	b.n	80028c4 <__aeabi_dsub+0x340>
 8002690:	4a8f      	ldr	r2, [pc, #572]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002692:	08f6      	lsrs	r6, r6, #3
 8002694:	400a      	ands	r2, r1
 8002696:	0757      	lsls	r7, r2, #29
 8002698:	0252      	lsls	r2, r2, #9
 800269a:	4337      	orrs	r7, r6
 800269c:	0b12      	lsrs	r2, r2, #12
 800269e:	e09b      	b.n	80027d8 <__aeabi_dsub+0x254>
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x122>
 80026a4:	e0c5      	b.n	8002832 <__aeabi_dsub+0x2ae>
 80026a6:	1c6e      	adds	r6, r5, #1
 80026a8:	0576      	lsls	r6, r6, #21
 80026aa:	0d76      	lsrs	r6, r6, #21
 80026ac:	2e01      	cmp	r6, #1
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_dsub+0x12e>
 80026b0:	e148      	b.n	8002944 <__aeabi_dsub+0x3c0>
 80026b2:	4667      	mov	r7, ip
 80026b4:	1a86      	subs	r6, r0, r2
 80026b6:	1bcb      	subs	r3, r1, r7
 80026b8:	42b0      	cmp	r0, r6
 80026ba:	41bf      	sbcs	r7, r7
 80026bc:	427f      	negs	r7, r7
 80026be:	46b8      	mov	r8, r7
 80026c0:	001f      	movs	r7, r3
 80026c2:	4643      	mov	r3, r8
 80026c4:	1aff      	subs	r7, r7, r3
 80026c6:	003b      	movs	r3, r7
 80026c8:	46b8      	mov	r8, r7
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	d500      	bpl.n	80026d0 <__aeabi_dsub+0x14c>
 80026ce:	e15f      	b.n	8002990 <__aeabi_dsub+0x40c>
 80026d0:	4337      	orrs	r7, r6
 80026d2:	d19a      	bne.n	800260a <__aeabi_dsub+0x86>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2400      	movs	r4, #0
 80026d8:	2500      	movs	r5, #0
 80026da:	e079      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	dc00      	bgt.n	80026e2 <__aeabi_dsub+0x15e>
 80026e0:	e0fa      	b.n	80028d8 <__aeabi_dsub+0x354>
 80026e2:	2f00      	cmp	r7, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x164>
 80026e6:	e08d      	b.n	8002804 <__aeabi_dsub+0x280>
 80026e8:	4b78      	ldr	r3, [pc, #480]	; (80028cc <__aeabi_dsub+0x348>)
 80026ea:	429d      	cmp	r5, r3
 80026ec:	d067      	beq.n	80027be <__aeabi_dsub+0x23a>
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	4667      	mov	r7, ip
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431f      	orrs	r7, r3
 80026f6:	46bc      	mov	ip, r7
 80026f8:	2e38      	cmp	r6, #56	; 0x38
 80026fa:	dc00      	bgt.n	80026fe <__aeabi_dsub+0x17a>
 80026fc:	e152      	b.n	80029a4 <__aeabi_dsub+0x420>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	4193      	sbcs	r3, r2
 8002706:	181e      	adds	r6, r3, r0
 8002708:	4286      	cmp	r6, r0
 800270a:	4180      	sbcs	r0, r0
 800270c:	4240      	negs	r0, r0
 800270e:	1809      	adds	r1, r1, r0
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x192>
 8002714:	e0be      	b.n	8002894 <__aeabi_dsub+0x310>
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <__aeabi_dsub+0x348>)
 8002718:	3501      	adds	r5, #1
 800271a:	429d      	cmp	r5, r3
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x19c>
 800271e:	e0d2      	b.n	80028c6 <__aeabi_dsub+0x342>
 8002720:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <__aeabi_dsub+0x34c>)
 8002722:	0873      	lsrs	r3, r6, #1
 8002724:	400a      	ands	r2, r1
 8002726:	2101      	movs	r1, #1
 8002728:	400e      	ands	r6, r1
 800272a:	431e      	orrs	r6, r3
 800272c:	0851      	lsrs	r1, r2, #1
 800272e:	07d3      	lsls	r3, r2, #31
 8002730:	2207      	movs	r2, #7
 8002732:	431e      	orrs	r6, r3
 8002734:	4032      	ands	r2, r6
 8002736:	e795      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002738:	001e      	movs	r6, r3
 800273a:	4316      	orrs	r6, r2
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1bc>
 800273e:	e745      	b.n	80025cc <__aeabi_dsub+0x48>
 8002740:	e740      	b.n	80025c4 <__aeabi_dsub+0x40>
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <__aeabi_dsub+0x348>)
 8002744:	429d      	cmp	r5, r3
 8002746:	d03a      	beq.n	80027be <__aeabi_dsub+0x23a>
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	4667      	mov	r7, ip
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431f      	orrs	r7, r3
 8002750:	46bc      	mov	ip, r7
 8002752:	2e38      	cmp	r6, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x1d4>
 8002756:	e0eb      	b.n	8002930 <__aeabi_dsub+0x3ac>
 8002758:	2e1f      	cmp	r6, #31
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x1da>
 800275c:	e13a      	b.n	80029d4 <__aeabi_dsub+0x450>
 800275e:	0033      	movs	r3, r6
 8002760:	4667      	mov	r7, ip
 8002762:	3b20      	subs	r3, #32
 8002764:	40df      	lsrs	r7, r3
 8002766:	003b      	movs	r3, r7
 8002768:	2e20      	cmp	r6, #32
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x1f4>
 800276c:	2740      	movs	r7, #64	; 0x40
 800276e:	1bbf      	subs	r7, r7, r6
 8002770:	4666      	mov	r6, ip
 8002772:	40be      	lsls	r6, r7
 8002774:	4332      	orrs	r2, r6
 8002776:	4690      	mov	r8, r2
 8002778:	4646      	mov	r6, r8
 800277a:	1e72      	subs	r2, r6, #1
 800277c:	4196      	sbcs	r6, r2
 800277e:	4333      	orrs	r3, r6
 8002780:	e0da      	b.n	8002938 <__aeabi_dsub+0x3b4>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x204>
 8002786:	e214      	b.n	8002bb2 <__aeabi_dsub+0x62e>
 8002788:	4663      	mov	r3, ip
 800278a:	4313      	orrs	r3, r2
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x20c>
 800278e:	e168      	b.n	8002a62 <__aeabi_dsub+0x4de>
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	074e      	lsls	r6, r1, #29
 8002794:	08c0      	lsrs	r0, r0, #3
 8002796:	08c9      	lsrs	r1, r1, #3
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	4306      	orrs	r6, r0
 800279c:	4219      	tst	r1, r3
 800279e:	d008      	beq.n	80027b2 <__aeabi_dsub+0x22e>
 80027a0:	4660      	mov	r0, ip
 80027a2:	08c0      	lsrs	r0, r0, #3
 80027a4:	4218      	tst	r0, r3
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x22e>
 80027a8:	4663      	mov	r3, ip
 80027aa:	0001      	movs	r1, r0
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	075e      	lsls	r6, r3, #29
 80027b0:	4316      	orrs	r6, r2
 80027b2:	00f3      	lsls	r3, r6, #3
 80027b4:	4699      	mov	r9, r3
 80027b6:	00c9      	lsls	r1, r1, #3
 80027b8:	0f72      	lsrs	r2, r6, #29
 80027ba:	4d44      	ldr	r5, [pc, #272]	; (80028cc <__aeabi_dsub+0x348>)
 80027bc:	4311      	orrs	r1, r2
 80027be:	464b      	mov	r3, r9
 80027c0:	08de      	lsrs	r6, r3, #3
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <__aeabi_dsub+0x348>)
 80027c4:	074f      	lsls	r7, r1, #29
 80027c6:	4337      	orrs	r7, r6
 80027c8:	08ca      	lsrs	r2, r1, #3
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x24c>
 80027ce:	e06e      	b.n	80028ae <__aeabi_dsub+0x32a>
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	056d      	lsls	r5, r5, #21
 80027d4:	0b12      	lsrs	r2, r2, #12
 80027d6:	0d6d      	lsrs	r5, r5, #21
 80027d8:	2100      	movs	r1, #0
 80027da:	0312      	lsls	r2, r2, #12
 80027dc:	0b13      	lsrs	r3, r2, #12
 80027de:	0d0a      	lsrs	r2, r1, #20
 80027e0:	0512      	lsls	r2, r2, #20
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <__aeabi_dsub+0x350>)
 80027e6:	052d      	lsls	r5, r5, #20
 80027e8:	4013      	ands	r3, r2
 80027ea:	432b      	orrs	r3, r5
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	07e4      	lsls	r4, r4, #31
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	4323      	orrs	r3, r4
 80027f4:	0038      	movs	r0, r7
 80027f6:	0019      	movs	r1, r3
 80027f8:	bc3c      	pop	{r2, r3, r4, r5}
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	46ab      	mov	fp, r5
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002804:	4663      	mov	r3, ip
 8002806:	4313      	orrs	r3, r2
 8002808:	d011      	beq.n	800282e <__aeabi_dsub+0x2aa>
 800280a:	1e73      	subs	r3, r6, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x28e>
 8002810:	e107      	b.n	8002a22 <__aeabi_dsub+0x49e>
 8002812:	1886      	adds	r6, r0, r2
 8002814:	4286      	cmp	r6, r0
 8002816:	4180      	sbcs	r0, r0
 8002818:	4461      	add	r1, ip
 800281a:	4240      	negs	r0, r0
 800281c:	1809      	adds	r1, r1, r0
 800281e:	2501      	movs	r5, #1
 8002820:	020b      	lsls	r3, r1, #8
 8002822:	d537      	bpl.n	8002894 <__aeabi_dsub+0x310>
 8002824:	2502      	movs	r5, #2
 8002826:	e77b      	b.n	8002720 <__aeabi_dsub+0x19c>
 8002828:	003e      	movs	r6, r7
 800282a:	4661      	mov	r1, ip
 800282c:	4691      	mov	r9, r2
 800282e:	0035      	movs	r5, r6
 8002830:	e7c5      	b.n	80027be <__aeabi_dsub+0x23a>
 8002832:	465c      	mov	r4, fp
 8002834:	2d00      	cmp	r5, #0
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x2b6>
 8002838:	e0e1      	b.n	80029fe <__aeabi_dsub+0x47a>
 800283a:	000b      	movs	r3, r1
 800283c:	4303      	orrs	r3, r0
 800283e:	d0f3      	beq.n	8002828 <__aeabi_dsub+0x2a4>
 8002840:	1c73      	adds	r3, r6, #1
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x2c2>
 8002844:	e1ac      	b.n	8002ba0 <__aeabi_dsub+0x61c>
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <__aeabi_dsub+0x348>)
 8002848:	429f      	cmp	r7, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x2ca>
 800284c:	e13a      	b.n	8002ac4 <__aeabi_dsub+0x540>
 800284e:	43f3      	mvns	r3, r6
 8002850:	2b38      	cmp	r3, #56	; 0x38
 8002852:	dd00      	ble.n	8002856 <__aeabi_dsub+0x2d2>
 8002854:	e16f      	b.n	8002b36 <__aeabi_dsub+0x5b2>
 8002856:	2b1f      	cmp	r3, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x2d8>
 800285a:	e18c      	b.n	8002b76 <__aeabi_dsub+0x5f2>
 800285c:	2520      	movs	r5, #32
 800285e:	000e      	movs	r6, r1
 8002860:	1aed      	subs	r5, r5, r3
 8002862:	40ae      	lsls	r6, r5
 8002864:	46b0      	mov	r8, r6
 8002866:	0006      	movs	r6, r0
 8002868:	46aa      	mov	sl, r5
 800286a:	40de      	lsrs	r6, r3
 800286c:	4645      	mov	r5, r8
 800286e:	4335      	orrs	r5, r6
 8002870:	002e      	movs	r6, r5
 8002872:	4655      	mov	r5, sl
 8002874:	40d9      	lsrs	r1, r3
 8002876:	40a8      	lsls	r0, r5
 8002878:	4663      	mov	r3, ip
 800287a:	1e45      	subs	r5, r0, #1
 800287c:	41a8      	sbcs	r0, r5
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	469c      	mov	ip, r3
 8002882:	4330      	orrs	r0, r6
 8002884:	1a16      	subs	r6, r2, r0
 8002886:	42b2      	cmp	r2, r6
 8002888:	4192      	sbcs	r2, r2
 800288a:	4663      	mov	r3, ip
 800288c:	4252      	negs	r2, r2
 800288e:	1a99      	subs	r1, r3, r2
 8002890:	003d      	movs	r5, r7
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002894:	2207      	movs	r2, #7
 8002896:	4032      	ands	r2, r6
 8002898:	2a00      	cmp	r2, #0
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x31a>
 800289c:	e6e4      	b.n	8002668 <__aeabi_dsub+0xe4>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__aeabi_dsub+0x348>)
 80028a0:	08f6      	lsrs	r6, r6, #3
 80028a2:	074f      	lsls	r7, r1, #29
 80028a4:	4337      	orrs	r7, r6
 80028a6:	08ca      	lsrs	r2, r1, #3
 80028a8:	429d      	cmp	r5, r3
 80028aa:	d000      	beq.n	80028ae <__aeabi_dsub+0x32a>
 80028ac:	e790      	b.n	80027d0 <__aeabi_dsub+0x24c>
 80028ae:	003b      	movs	r3, r7
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x332>
 80028b4:	e1a6      	b.n	8002c04 <__aeabi_dsub+0x680>
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	431a      	orrs	r2, r3
 80028bc:	0312      	lsls	r2, r2, #12
 80028be:	0b12      	lsrs	r2, r2, #12
 80028c0:	4d02      	ldr	r5, [pc, #8]	; (80028cc <__aeabi_dsub+0x348>)
 80028c2:	e789      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028c4:	0015      	movs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2700      	movs	r7, #0
 80028ca:	e785      	b.n	80027d8 <__aeabi_dsub+0x254>
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	800fffff 	.word	0x800fffff
 80028d8:	2e00      	cmp	r6, #0
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x35a>
 80028dc:	e0c7      	b.n	8002a6e <__aeabi_dsub+0x4ea>
 80028de:	1c6b      	adds	r3, r5, #1
 80028e0:	055e      	lsls	r6, r3, #21
 80028e2:	0d76      	lsrs	r6, r6, #21
 80028e4:	2e01      	cmp	r6, #1
 80028e6:	dc00      	bgt.n	80028ea <__aeabi_dsub+0x366>
 80028e8:	e0f0      	b.n	8002acc <__aeabi_dsub+0x548>
 80028ea:	4dc8      	ldr	r5, [pc, #800]	; (8002c0c <__aeabi_dsub+0x688>)
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x36e>
 80028f0:	e0b9      	b.n	8002a66 <__aeabi_dsub+0x4e2>
 80028f2:	1885      	adds	r5, r0, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	4285      	cmp	r5, r0
 80028f8:	4189      	sbcs	r1, r1
 80028fa:	4462      	add	r2, ip
 80028fc:	4249      	negs	r1, r1
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	2207      	movs	r2, #7
 8002902:	07ce      	lsls	r6, r1, #31
 8002904:	086d      	lsrs	r5, r5, #1
 8002906:	432e      	orrs	r6, r5
 8002908:	0849      	lsrs	r1, r1, #1
 800290a:	4032      	ands	r2, r6
 800290c:	001d      	movs	r5, r3
 800290e:	e6a9      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002910:	49bf      	ldr	r1, [pc, #764]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002912:	1aed      	subs	r5, r5, r3
 8002914:	4011      	ands	r1, r2
 8002916:	2207      	movs	r2, #7
 8002918:	4032      	ands	r2, r6
 800291a:	e6a3      	b.n	8002664 <__aeabi_dsub+0xe0>
 800291c:	0032      	movs	r2, r6
 800291e:	3828      	subs	r0, #40	; 0x28
 8002920:	4082      	lsls	r2, r0
 8002922:	2600      	movs	r6, #0
 8002924:	e686      	b.n	8002634 <__aeabi_dsub+0xb0>
 8002926:	0030      	movs	r0, r6
 8002928:	f000 fb08 	bl	8002f3c <__clzsi2>
 800292c:	3020      	adds	r0, #32
 800292e:	e673      	b.n	8002618 <__aeabi_dsub+0x94>
 8002930:	4663      	mov	r3, ip
 8002932:	4313      	orrs	r3, r2
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	4193      	sbcs	r3, r2
 8002938:	1ac6      	subs	r6, r0, r3
 800293a:	42b0      	cmp	r0, r6
 800293c:	4180      	sbcs	r0, r0
 800293e:	4240      	negs	r0, r0
 8002940:	1a09      	subs	r1, r1, r0
 8002942:	e65c      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002944:	000e      	movs	r6, r1
 8002946:	4667      	mov	r7, ip
 8002948:	4306      	orrs	r6, r0
 800294a:	4317      	orrs	r7, r2
 800294c:	2d00      	cmp	r5, #0
 800294e:	d15e      	bne.n	8002a0e <__aeabi_dsub+0x48a>
 8002950:	2e00      	cmp	r6, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x3d2>
 8002954:	e0f3      	b.n	8002b3e <__aeabi_dsub+0x5ba>
 8002956:	2f00      	cmp	r7, #0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x3d8>
 800295a:	e11e      	b.n	8002b9a <__aeabi_dsub+0x616>
 800295c:	465c      	mov	r4, fp
 800295e:	4661      	mov	r1, ip
 8002960:	4691      	mov	r9, r2
 8002962:	e72c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002964:	4fa9      	ldr	r7, [pc, #676]	; (8002c0c <__aeabi_dsub+0x688>)
 8002966:	42be      	cmp	r6, r7
 8002968:	d07b      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 800296a:	001e      	movs	r6, r3
 800296c:	e6f1      	b.n	8002752 <__aeabi_dsub+0x1ce>
 800296e:	0010      	movs	r0, r2
 8002970:	3d1f      	subs	r5, #31
 8002972:	40e8      	lsrs	r0, r5
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <__aeabi_dsub+0x3fc>
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	409a      	lsls	r2, r3
 800297e:	4316      	orrs	r6, r2
 8002980:	1e73      	subs	r3, r6, #1
 8002982:	419e      	sbcs	r6, r3
 8002984:	2207      	movs	r2, #7
 8002986:	4306      	orrs	r6, r0
 8002988:	4032      	ands	r2, r6
 800298a:	2100      	movs	r1, #0
 800298c:	2500      	movs	r5, #0
 800298e:	e783      	b.n	8002898 <__aeabi_dsub+0x314>
 8002990:	1a16      	subs	r6, r2, r0
 8002992:	4663      	mov	r3, ip
 8002994:	42b2      	cmp	r2, r6
 8002996:	4180      	sbcs	r0, r0
 8002998:	1a59      	subs	r1, r3, r1
 800299a:	4240      	negs	r0, r0
 800299c:	1a0b      	subs	r3, r1, r0
 800299e:	4698      	mov	r8, r3
 80029a0:	465c      	mov	r4, fp
 80029a2:	e632      	b.n	800260a <__aeabi_dsub+0x86>
 80029a4:	2e1f      	cmp	r6, #31
 80029a6:	dd00      	ble.n	80029aa <__aeabi_dsub+0x426>
 80029a8:	e0ab      	b.n	8002b02 <__aeabi_dsub+0x57e>
 80029aa:	2720      	movs	r7, #32
 80029ac:	1bbb      	subs	r3, r7, r6
 80029ae:	469a      	mov	sl, r3
 80029b0:	4663      	mov	r3, ip
 80029b2:	4657      	mov	r7, sl
 80029b4:	40bb      	lsls	r3, r7
 80029b6:	4699      	mov	r9, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	464f      	mov	r7, r9
 80029bc:	40f3      	lsrs	r3, r6
 80029be:	431f      	orrs	r7, r3
 80029c0:	003b      	movs	r3, r7
 80029c2:	4657      	mov	r7, sl
 80029c4:	40ba      	lsls	r2, r7
 80029c6:	1e57      	subs	r7, r2, #1
 80029c8:	41ba      	sbcs	r2, r7
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4662      	mov	r2, ip
 80029ce:	40f2      	lsrs	r2, r6
 80029d0:	1889      	adds	r1, r1, r2
 80029d2:	e698      	b.n	8002706 <__aeabi_dsub+0x182>
 80029d4:	2720      	movs	r7, #32
 80029d6:	1bbb      	subs	r3, r7, r6
 80029d8:	469a      	mov	sl, r3
 80029da:	4663      	mov	r3, ip
 80029dc:	4657      	mov	r7, sl
 80029de:	40bb      	lsls	r3, r7
 80029e0:	4699      	mov	r9, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	464f      	mov	r7, r9
 80029e6:	40f3      	lsrs	r3, r6
 80029e8:	431f      	orrs	r7, r3
 80029ea:	003b      	movs	r3, r7
 80029ec:	4657      	mov	r7, sl
 80029ee:	40ba      	lsls	r2, r7
 80029f0:	1e57      	subs	r7, r2, #1
 80029f2:	41ba      	sbcs	r2, r7
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4662      	mov	r2, ip
 80029f8:	40f2      	lsrs	r2, r6
 80029fa:	1a89      	subs	r1, r1, r2
 80029fc:	e79c      	b.n	8002938 <__aeabi_dsub+0x3b4>
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a00:	429f      	cmp	r7, r3
 8002a02:	d05f      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a04:	2580      	movs	r5, #128	; 0x80
 8002a06:	042d      	lsls	r5, r5, #16
 8002a08:	4273      	negs	r3, r6
 8002a0a:	4329      	orrs	r1, r5
 8002a0c:	e720      	b.n	8002850 <__aeabi_dsub+0x2cc>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d10c      	bne.n	8002a2c <__aeabi_dsub+0x4a8>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x494>
 8002a16:	e0d0      	b.n	8002bba <__aeabi_dsub+0x636>
 8002a18:	465c      	mov	r4, fp
 8002a1a:	4661      	mov	r1, ip
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	4d7b      	ldr	r5, [pc, #492]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a20:	e6cd      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a22:	4f7a      	ldr	r7, [pc, #488]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a24:	42be      	cmp	r6, r7
 8002a26:	d01c      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a28:	001e      	movs	r6, r3
 8002a2a:	e665      	b.n	80026f8 <__aeabi_dsub+0x174>
 8002a2c:	2f00      	cmp	r7, #0
 8002a2e:	d018      	beq.n	8002a62 <__aeabi_dsub+0x4de>
 8002a30:	08c0      	lsrs	r0, r0, #3
 8002a32:	074e      	lsls	r6, r1, #29
 8002a34:	4306      	orrs	r6, r0
 8002a36:	2080      	movs	r0, #128	; 0x80
 8002a38:	08c9      	lsrs	r1, r1, #3
 8002a3a:	0300      	lsls	r0, r0, #12
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d008      	beq.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a40:	4663      	mov	r3, ip
 8002a42:	08dc      	lsrs	r4, r3, #3
 8002a44:	4204      	tst	r4, r0
 8002a46:	d104      	bne.n	8002a52 <__aeabi_dsub+0x4ce>
 8002a48:	0021      	movs	r1, r4
 8002a4a:	46da      	mov	sl, fp
 8002a4c:	08d2      	lsrs	r2, r2, #3
 8002a4e:	075e      	lsls	r6, r3, #29
 8002a50:	4316      	orrs	r6, r2
 8002a52:	00f3      	lsls	r3, r6, #3
 8002a54:	4699      	mov	r9, r3
 8002a56:	2401      	movs	r4, #1
 8002a58:	4653      	mov	r3, sl
 8002a5a:	00c9      	lsls	r1, r1, #3
 8002a5c:	0f72      	lsrs	r2, r6, #29
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	401c      	ands	r4, r3
 8002a62:	4d6a      	ldr	r5, [pc, #424]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a64:	e6ab      	b.n	80027be <__aeabi_dsub+0x23a>
 8002a66:	001d      	movs	r5, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2700      	movs	r7, #0
 8002a6c:	e6b4      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d159      	bne.n	8002b26 <__aeabi_dsub+0x5a2>
 8002a72:	000b      	movs	r3, r1
 8002a74:	4303      	orrs	r3, r0
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x4f6>
 8002a78:	e6d6      	b.n	8002828 <__aeabi_dsub+0x2a4>
 8002a7a:	1c73      	adds	r3, r6, #1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x4fc>
 8002a7e:	e0b2      	b.n	8002be6 <__aeabi_dsub+0x662>
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <__aeabi_dsub+0x688>)
 8002a82:	429f      	cmp	r7, r3
 8002a84:	d01e      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002a86:	43f3      	mvns	r3, r6
 8002a88:	2b38      	cmp	r3, #56	; 0x38
 8002a8a:	dc6f      	bgt.n	8002b6c <__aeabi_dsub+0x5e8>
 8002a8c:	2b1f      	cmp	r3, #31
 8002a8e:	dd00      	ble.n	8002a92 <__aeabi_dsub+0x50e>
 8002a90:	e097      	b.n	8002bc2 <__aeabi_dsub+0x63e>
 8002a92:	2520      	movs	r5, #32
 8002a94:	000e      	movs	r6, r1
 8002a96:	1aed      	subs	r5, r5, r3
 8002a98:	40ae      	lsls	r6, r5
 8002a9a:	46b0      	mov	r8, r6
 8002a9c:	0006      	movs	r6, r0
 8002a9e:	46aa      	mov	sl, r5
 8002aa0:	40de      	lsrs	r6, r3
 8002aa2:	4645      	mov	r5, r8
 8002aa4:	4335      	orrs	r5, r6
 8002aa6:	002e      	movs	r6, r5
 8002aa8:	4655      	mov	r5, sl
 8002aaa:	40a8      	lsls	r0, r5
 8002aac:	40d9      	lsrs	r1, r3
 8002aae:	1e45      	subs	r5, r0, #1
 8002ab0:	41a8      	sbcs	r0, r5
 8002ab2:	448c      	add	ip, r1
 8002ab4:	4306      	orrs	r6, r0
 8002ab6:	18b6      	adds	r6, r6, r2
 8002ab8:	4296      	cmp	r6, r2
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4251      	negs	r1, r2
 8002abe:	4461      	add	r1, ip
 8002ac0:	003d      	movs	r5, r7
 8002ac2:	e625      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002ac4:	003d      	movs	r5, r7
 8002ac6:	4661      	mov	r1, ip
 8002ac8:	4691      	mov	r9, r2
 8002aca:	e678      	b.n	80027be <__aeabi_dsub+0x23a>
 8002acc:	000b      	movs	r3, r1
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x552>
 8002ad4:	e655      	b.n	8002782 <__aeabi_dsub+0x1fe>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f5      	beq.n	8002ac6 <__aeabi_dsub+0x542>
 8002ada:	4663      	mov	r3, ip
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x55e>
 8002ae0:	e66d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002ae2:	1886      	adds	r6, r0, r2
 8002ae4:	4286      	cmp	r6, r0
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4461      	add	r1, ip
 8002aea:	4240      	negs	r0, r0
 8002aec:	1809      	adds	r1, r1, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	020b      	lsls	r3, r1, #8
 8002af2:	d400      	bmi.n	8002af6 <__aeabi_dsub+0x572>
 8002af4:	e6d0      	b.n	8002898 <__aeabi_dsub+0x314>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <__aeabi_dsub+0x68c>)
 8002af8:	3501      	adds	r5, #1
 8002afa:	4019      	ands	r1, r3
 8002afc:	e5b2      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002afe:	46b1      	mov	r9, r6
 8002b00:	e65d      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b02:	0033      	movs	r3, r6
 8002b04:	4667      	mov	r7, ip
 8002b06:	3b20      	subs	r3, #32
 8002b08:	40df      	lsrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	2e20      	cmp	r6, #32
 8002b0e:	d005      	beq.n	8002b1c <__aeabi_dsub+0x598>
 8002b10:	2740      	movs	r7, #64	; 0x40
 8002b12:	1bbf      	subs	r7, r7, r6
 8002b14:	4666      	mov	r6, ip
 8002b16:	40be      	lsls	r6, r7
 8002b18:	4332      	orrs	r2, r6
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4646      	mov	r6, r8
 8002b1e:	1e72      	subs	r2, r6, #1
 8002b20:	4196      	sbcs	r6, r2
 8002b22:	4333      	orrs	r3, r6
 8002b24:	e5ef      	b.n	8002706 <__aeabi_dsub+0x182>
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <__aeabi_dsub+0x688>)
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d0cb      	beq.n	8002ac4 <__aeabi_dsub+0x540>
 8002b2c:	2580      	movs	r5, #128	; 0x80
 8002b2e:	042d      	lsls	r5, r5, #16
 8002b30:	4273      	negs	r3, r6
 8002b32:	4329      	orrs	r1, r5
 8002b34:	e7a8      	b.n	8002a88 <__aeabi_dsub+0x504>
 8002b36:	4308      	orrs	r0, r1
 8002b38:	1e41      	subs	r1, r0, #1
 8002b3a:	4188      	sbcs	r0, r1
 8002b3c:	e6a2      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x5c0>
 8002b42:	e63c      	b.n	80027be <__aeabi_dsub+0x23a>
 8002b44:	4663      	mov	r3, ip
 8002b46:	1a86      	subs	r6, r0, r2
 8002b48:	1acf      	subs	r7, r1, r3
 8002b4a:	42b0      	cmp	r0, r6
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	425b      	negs	r3, r3
 8002b50:	1afb      	subs	r3, r7, r3
 8002b52:	4698      	mov	r8, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	d54e      	bpl.n	8002bf6 <__aeabi_dsub+0x672>
 8002b58:	1a16      	subs	r6, r2, r0
 8002b5a:	4663      	mov	r3, ip
 8002b5c:	42b2      	cmp	r2, r6
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a59      	subs	r1, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a89      	subs	r1, r1, r2
 8002b66:	465c      	mov	r4, fp
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e57b      	b.n	8002664 <__aeabi_dsub+0xe0>
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	000e      	movs	r6, r1
 8002b70:	1e71      	subs	r1, r6, #1
 8002b72:	418e      	sbcs	r6, r1
 8002b74:	e79f      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002b76:	001d      	movs	r5, r3
 8002b78:	000e      	movs	r6, r1
 8002b7a:	3d20      	subs	r5, #32
 8002b7c:	40ee      	lsrs	r6, r5
 8002b7e:	46b0      	mov	r8, r6
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d004      	beq.n	8002b8e <__aeabi_dsub+0x60a>
 8002b84:	2540      	movs	r5, #64	; 0x40
 8002b86:	1aeb      	subs	r3, r5, r3
 8002b88:	4099      	lsls	r1, r3
 8002b8a:	4308      	orrs	r0, r1
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	4648      	mov	r0, r9
 8002b90:	4643      	mov	r3, r8
 8002b92:	1e41      	subs	r1, r0, #1
 8002b94:	4188      	sbcs	r0, r1
 8002b96:	4318      	orrs	r0, r3
 8002b98:	e674      	b.n	8002884 <__aeabi_dsub+0x300>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	e617      	b.n	80027d0 <__aeabi_dsub+0x24c>
 8002ba0:	1a16      	subs	r6, r2, r0
 8002ba2:	4663      	mov	r3, ip
 8002ba4:	42b2      	cmp	r2, r6
 8002ba6:	4192      	sbcs	r2, r2
 8002ba8:	1a59      	subs	r1, r3, r1
 8002baa:	4252      	negs	r2, r2
 8002bac:	1a89      	subs	r1, r1, r2
 8002bae:	003d      	movs	r5, r7
 8002bb0:	e525      	b.n	80025fe <__aeabi_dsub+0x7a>
 8002bb2:	4661      	mov	r1, ip
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	4d15      	ldr	r5, [pc, #84]	; (8002c0c <__aeabi_dsub+0x688>)
 8002bb8:	e601      	b.n	80027be <__aeabi_dsub+0x23a>
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	0312      	lsls	r2, r2, #12
 8002bc0:	e679      	b.n	80028b6 <__aeabi_dsub+0x332>
 8002bc2:	001d      	movs	r5, r3
 8002bc4:	000e      	movs	r6, r1
 8002bc6:	3d20      	subs	r5, #32
 8002bc8:	40ee      	lsrs	r6, r5
 8002bca:	46b0      	mov	r8, r6
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d004      	beq.n	8002bda <__aeabi_dsub+0x656>
 8002bd0:	2540      	movs	r5, #64	; 0x40
 8002bd2:	1aeb      	subs	r3, r5, r3
 8002bd4:	4099      	lsls	r1, r3
 8002bd6:	4308      	orrs	r0, r1
 8002bd8:	4681      	mov	r9, r0
 8002bda:	464e      	mov	r6, r9
 8002bdc:	4643      	mov	r3, r8
 8002bde:	1e71      	subs	r1, r6, #1
 8002be0:	418e      	sbcs	r6, r1
 8002be2:	431e      	orrs	r6, r3
 8002be4:	e767      	b.n	8002ab6 <__aeabi_dsub+0x532>
 8002be6:	1886      	adds	r6, r0, r2
 8002be8:	4296      	cmp	r6, r2
 8002bea:	419b      	sbcs	r3, r3
 8002bec:	4461      	add	r1, ip
 8002bee:	425b      	negs	r3, r3
 8002bf0:	18c9      	adds	r1, r1, r3
 8002bf2:	003d      	movs	r5, r7
 8002bf4:	e58c      	b.n	8002710 <__aeabi_dsub+0x18c>
 8002bf6:	4647      	mov	r7, r8
 8002bf8:	4337      	orrs	r7, r6
 8002bfa:	d0ce      	beq.n	8002b9a <__aeabi_dsub+0x616>
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4641      	mov	r1, r8
 8002c00:	4032      	ands	r2, r6
 8002c02:	e649      	b.n	8002898 <__aeabi_dsub+0x314>
 8002c04:	2700      	movs	r7, #0
 8002c06:	003a      	movs	r2, r7
 8002c08:	e5e6      	b.n	80027d8 <__aeabi_dsub+0x254>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff

08002c14 <__aeabi_dcmpun>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4e0c      	ldr	r6, [pc, #48]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c18:	030d      	lsls	r5, r1, #12
 8002c1a:	031c      	lsls	r4, r3, #12
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	0b2d      	lsrs	r5, r5, #12
 8002c22:	0d49      	lsrs	r1, r1, #21
 8002c24:	0b24      	lsrs	r4, r4, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	42b1      	cmp	r1, r6
 8002c2a:	d008      	beq.n	8002c3e <__aeabi_dcmpun+0x2a>
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__aeabi_dcmpun+0x34>)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d103      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c34:	4314      	orrs	r4, r2
 8002c36:	0020      	movs	r0, r4
 8002c38:	1e44      	subs	r4, r0, #1
 8002c3a:	41a0      	sbcs	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	4305      	orrs	r5, r0
 8002c40:	2001      	movs	r0, #1
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d1fa      	bne.n	8002c3c <__aeabi_dcmpun+0x28>
 8002c46:	e7f1      	b.n	8002c2c <__aeabi_dcmpun+0x18>
 8002c48:	000007ff 	.word	0x000007ff

08002c4c <__aeabi_d2iz>:
 8002c4c:	b530      	push	{r4, r5, lr}
 8002c4e:	4d14      	ldr	r5, [pc, #80]	; (8002ca0 <__aeabi_d2iz+0x54>)
 8002c50:	030a      	lsls	r2, r1, #12
 8002c52:	004b      	lsls	r3, r1, #1
 8002c54:	0b12      	lsrs	r2, r2, #12
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	0fc9      	lsrs	r1, r1, #31
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	42ab      	cmp	r3, r5
 8002c5e:	dd11      	ble.n	8002c84 <__aeabi_d2iz+0x38>
 8002c60:	4c10      	ldr	r4, [pc, #64]	; (8002ca4 <__aeabi_d2iz+0x58>)
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	dc10      	bgt.n	8002c88 <__aeabi_d2iz+0x3c>
 8002c66:	2480      	movs	r4, #128	; 0x80
 8002c68:	0364      	lsls	r4, r4, #13
 8002c6a:	4322      	orrs	r2, r4
 8002c6c:	4c0e      	ldr	r4, [pc, #56]	; (8002ca8 <__aeabi_d2iz+0x5c>)
 8002c6e:	1ae4      	subs	r4, r4, r3
 8002c70:	2c1f      	cmp	r4, #31
 8002c72:	dd0c      	ble.n	8002c8e <__aeabi_d2iz+0x42>
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <__aeabi_d2iz+0x60>)
 8002c76:	1ac3      	subs	r3, r0, r3
 8002c78:	40da      	lsrs	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	425c      	negs	r4, r3
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d100      	bne.n	8002c84 <__aeabi_d2iz+0x38>
 8002c82:	001c      	movs	r4, r3
 8002c84:	0020      	movs	r0, r4
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <__aeabi_d2iz+0x64>)
 8002c8a:	18cc      	adds	r4, r1, r3
 8002c8c:	e7fa      	b.n	8002c84 <__aeabi_d2iz+0x38>
 8002c8e:	4d09      	ldr	r5, [pc, #36]	; (8002cb4 <__aeabi_d2iz+0x68>)
 8002c90:	40e0      	lsrs	r0, r4
 8002c92:	46ac      	mov	ip, r5
 8002c94:	4463      	add	r3, ip
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	e7ee      	b.n	8002c7c <__aeabi_d2iz+0x30>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	000003fe 	.word	0x000003fe
 8002ca4:	0000041d 	.word	0x0000041d
 8002ca8:	00000433 	.word	0x00000433
 8002cac:	00000413 	.word	0x00000413
 8002cb0:	7fffffff 	.word	0x7fffffff
 8002cb4:	fffffbed 	.word	0xfffffbed

08002cb8 <__aeabi_i2d>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d02d      	beq.n	8002d1a <__aeabi_i2d+0x62>
 8002cbe:	17c3      	asrs	r3, r0, #31
 8002cc0:	18c5      	adds	r5, r0, r3
 8002cc2:	405d      	eors	r5, r3
 8002cc4:	0fc4      	lsrs	r4, r0, #31
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f938 	bl	8002f3c <__clzsi2>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <__aeabi_i2d+0x6c>)
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	280a      	cmp	r0, #10
 8002cd6:	dd15      	ble.n	8002d04 <__aeabi_i2d+0x4c>
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4085      	lsls	r5, r0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	032d      	lsls	r5, r5, #12
 8002ce0:	0b2d      	lsrs	r5, r5, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	032d      	lsls	r5, r5, #12
 8002ce8:	0d0a      	lsrs	r2, r1, #20
 8002cea:	0b2d      	lsrs	r5, r5, #12
 8002cec:	0512      	lsls	r2, r2, #20
 8002cee:	432a      	orrs	r2, r5
 8002cf0:	4d0d      	ldr	r5, [pc, #52]	; (8002d28 <__aeabi_i2d+0x70>)
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	402a      	ands	r2, r5
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	07e4      	lsls	r4, r4, #31
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0019      	movs	r1, r3
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	0002      	movs	r2, r0
 8002d06:	0029      	movs	r1, r5
 8002d08:	3215      	adds	r2, #21
 8002d0a:	4091      	lsls	r1, r2
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	210b      	movs	r1, #11
 8002d10:	1a08      	subs	r0, r1, r0
 8002d12:	40c5      	lsrs	r5, r0
 8002d14:	032d      	lsls	r5, r5, #12
 8002d16:	0b2d      	lsrs	r5, r5, #12
 8002d18:	e7e3      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2500      	movs	r5, #0
 8002d20:	2200      	movs	r2, #0
 8002d22:	e7de      	b.n	8002ce2 <__aeabi_i2d+0x2a>
 8002d24:	0000041e 	.word	0x0000041e
 8002d28:	800fffff 	.word	0x800fffff

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d025      	beq.n	8002d7e <__aeabi_ui2d+0x52>
 8002d32:	f000 f903 	bl	8002f3c <__clzsi2>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <__aeabi_ui2d+0x5c>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dd12      	ble.n	8002d68 <__aeabi_ui2d+0x3c>
 8002d42:	380b      	subs	r0, #11
 8002d44:	4084      	lsls	r4, r0
 8002d46:	2200      	movs	r2, #0
 8002d48:	0324      	lsls	r4, r4, #12
 8002d4a:	0b24      	lsrs	r4, r4, #12
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0324      	lsls	r4, r4, #12
 8002d52:	0d0a      	lsrs	r2, r1, #20
 8002d54:	0b24      	lsrs	r4, r4, #12
 8002d56:	0512      	lsls	r2, r2, #20
 8002d58:	4322      	orrs	r2, r4
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__aeabi_ui2d+0x60>)
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	4022      	ands	r2, r4
 8002d60:	4313      	orrs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	0859      	lsrs	r1, r3, #1
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	0002      	movs	r2, r0
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	3215      	adds	r2, #21
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	000a      	movs	r2, r1
 8002d72:	210b      	movs	r1, #11
 8002d74:	1a08      	subs	r0, r1, r0
 8002d76:	40c4      	lsrs	r4, r0
 8002d78:	0324      	lsls	r4, r4, #12
 8002d7a:	0b24      	lsrs	r4, r4, #12
 8002d7c:	e7e6      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2400      	movs	r4, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	e7e2      	b.n	8002d4c <__aeabi_ui2d+0x20>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	0000041e 	.word	0x0000041e
 8002d8c:	800fffff 	.word	0x800fffff

08002d90 <__aeabi_f2d>:
 8002d90:	0041      	lsls	r1, r0, #1
 8002d92:	0e09      	lsrs	r1, r1, #24
 8002d94:	1c4b      	adds	r3, r1, #1
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	0246      	lsls	r6, r0, #9
 8002d9c:	0a75      	lsrs	r5, r6, #9
 8002d9e:	0fc4      	lsrs	r4, r0, #31
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	dd14      	ble.n	8002dce <__aeabi_f2d+0x3e>
 8002da4:	23e0      	movs	r3, #224	; 0xe0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	076d      	lsls	r5, r5, #29
 8002daa:	0b36      	lsrs	r6, r6, #12
 8002dac:	18cb      	adds	r3, r1, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	0d0a      	lsrs	r2, r1, #20
 8002db2:	0028      	movs	r0, r5
 8002db4:	0512      	lsls	r2, r2, #20
 8002db6:	4d1c      	ldr	r5, [pc, #112]	; (8002e28 <__aeabi_f2d+0x98>)
 8002db8:	4332      	orrs	r2, r6
 8002dba:	055b      	lsls	r3, r3, #21
 8002dbc:	402a      	ands	r2, r5
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	07e4      	lsls	r4, r4, #31
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	0019      	movs	r1, r3
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	d114      	bne.n	8002dfc <__aeabi_f2d+0x6c>
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d01e      	beq.n	8002e14 <__aeabi_f2d+0x84>
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f8b0 	bl	8002f3c <__clzsi2>
 8002ddc:	280a      	cmp	r0, #10
 8002dde:	dc1c      	bgt.n	8002e1a <__aeabi_f2d+0x8a>
 8002de0:	230b      	movs	r3, #11
 8002de2:	002a      	movs	r2, r5
 8002de4:	1a1b      	subs	r3, r3, r0
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	0003      	movs	r3, r0
 8002dea:	3315      	adds	r3, #21
 8002dec:	409d      	lsls	r5, r3
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <__aeabi_f2d+0x9c>)
 8002df0:	0312      	lsls	r2, r2, #12
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	055b      	lsls	r3, r3, #21
 8002df6:	0b16      	lsrs	r6, r2, #12
 8002df8:	0d5b      	lsrs	r3, r3, #21
 8002dfa:	e7d8      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002dfc:	2d00      	cmp	r5, #0
 8002dfe:	d006      	beq.n	8002e0e <__aeabi_f2d+0x7e>
 8002e00:	0b32      	lsrs	r2, r6, #12
 8002e02:	2680      	movs	r6, #128	; 0x80
 8002e04:	0336      	lsls	r6, r6, #12
 8002e06:	076d      	lsls	r5, r5, #29
 8002e08:	4316      	orrs	r6, r2
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e0c:	e7cf      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <__aeabi_f2d+0xa0>)
 8002e10:	2600      	movs	r6, #0
 8002e12:	e7cc      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2600      	movs	r6, #0
 8002e18:	e7c9      	b.n	8002dae <__aeabi_f2d+0x1e>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	002a      	movs	r2, r5
 8002e1e:	3b0b      	subs	r3, #11
 8002e20:	409a      	lsls	r2, r3
 8002e22:	2500      	movs	r5, #0
 8002e24:	e7e3      	b.n	8002dee <__aeabi_f2d+0x5e>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	800fffff 	.word	0x800fffff
 8002e2c:	00000389 	.word	0x00000389
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_d2f>:
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	004c      	lsls	r4, r1, #1
 8002e38:	0d64      	lsrs	r4, r4, #21
 8002e3a:	030b      	lsls	r3, r1, #12
 8002e3c:	1c62      	adds	r2, r4, #1
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	0f46      	lsrs	r6, r0, #29
 8002e42:	0552      	lsls	r2, r2, #21
 8002e44:	0fc9      	lsrs	r1, r1, #31
 8002e46:	431e      	orrs	r6, r3
 8002e48:	00c5      	lsls	r5, r0, #3
 8002e4a:	0d52      	lsrs	r2, r2, #21
 8002e4c:	2a01      	cmp	r2, #1
 8002e4e:	dd29      	ble.n	8002ea4 <__aeabi_d2f+0x70>
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <__aeabi_d2f+0xfc>)
 8002e52:	18e7      	adds	r7, r4, r3
 8002e54:	2ffe      	cmp	r7, #254	; 0xfe
 8002e56:	dc1c      	bgt.n	8002e92 <__aeabi_d2f+0x5e>
 8002e58:	2f00      	cmp	r7, #0
 8002e5a:	dd3b      	ble.n	8002ed4 <__aeabi_d2f+0xa0>
 8002e5c:	0180      	lsls	r0, r0, #6
 8002e5e:	1e43      	subs	r3, r0, #1
 8002e60:	4198      	sbcs	r0, r3
 8002e62:	2207      	movs	r2, #7
 8002e64:	00f3      	lsls	r3, r6, #3
 8002e66:	0f6d      	lsrs	r5, r5, #29
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	432b      	orrs	r3, r5
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	d004      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e72:	220f      	movs	r2, #15
 8002e74:	401a      	ands	r2, r3
 8002e76:	2a04      	cmp	r2, #4
 8002e78:	d000      	beq.n	8002e7c <__aeabi_d2f+0x48>
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	04d2      	lsls	r2, r2, #19
 8002e80:	401a      	ands	r2, r3
 8002e82:	d024      	beq.n	8002ece <__aeabi_d2f+0x9a>
 8002e84:	3701      	adds	r7, #1
 8002e86:	b2fa      	uxtb	r2, r7
 8002e88:	2fff      	cmp	r7, #255	; 0xff
 8002e8a:	d002      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	0a58      	lsrs	r0, r3, #9
 8002e90:	e001      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	2000      	movs	r0, #0
 8002e96:	0240      	lsls	r0, r0, #9
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	0a40      	lsrs	r0, r0, #9
 8002e9c:	07c9      	lsls	r1, r1, #31
 8002e9e:	4310      	orrs	r0, r2
 8002ea0:	4308      	orrs	r0, r1
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	4335      	orrs	r5, r6
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d104      	bne.n	8002eb4 <__aeabi_d2f+0x80>
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d10a      	bne.n	8002ec4 <__aeabi_d2f+0x90>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f0      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	d0ec      	beq.n	8002e92 <__aeabi_d2f+0x5e>
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	03c0      	lsls	r0, r0, #15
 8002ebc:	4330      	orrs	r0, r6
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	e7e9      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ec2:	2400      	movs	r4, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	0a58      	lsrs	r0, r3, #9
 8002eca:	b2e2      	uxtb	r2, r4
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_d2f+0x62>
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	003c      	movs	r4, r7
 8002ed2:	e7f8      	b.n	8002ec6 <__aeabi_d2f+0x92>
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	3317      	adds	r3, #23
 8002ed8:	dbf3      	blt.n	8002ec2 <__aeabi_d2f+0x8e>
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	261e      	movs	r6, #30
 8002ee2:	1bf6      	subs	r6, r6, r7
 8002ee4:	2e1f      	cmp	r6, #31
 8002ee6:	dd14      	ble.n	8002f12 <__aeabi_d2f+0xde>
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4252      	negs	r2, r2
 8002eec:	1bd7      	subs	r7, r2, r7
 8002eee:	001a      	movs	r2, r3
 8002ef0:	40fa      	lsrs	r2, r7
 8002ef2:	0017      	movs	r7, r2
 8002ef4:	2e20      	cmp	r6, #32
 8002ef6:	d004      	beq.n	8002f02 <__aeabi_d2f+0xce>
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <__aeabi_d2f+0x100>)
 8002efa:	4694      	mov	ip, r2
 8002efc:	4464      	add	r4, ip
 8002efe:	40a3      	lsls	r3, r4
 8002f00:	431d      	orrs	r5, r3
 8002f02:	002b      	movs	r3, r5
 8002f04:	1e5d      	subs	r5, r3, #1
 8002f06:	41ab      	sbcs	r3, r5
 8002f08:	2207      	movs	r2, #7
 8002f0a:	433b      	orrs	r3, r7
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	2700      	movs	r7, #0
 8002f10:	e7ad      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <__aeabi_d2f+0x104>)
 8002f14:	0028      	movs	r0, r5
 8002f16:	18a2      	adds	r2, r4, r2
 8002f18:	4095      	lsls	r5, r2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	1e6c      	subs	r4, r5, #1
 8002f1e:	41a5      	sbcs	r5, r4
 8002f20:	40f0      	lsrs	r0, r6
 8002f22:	2207      	movs	r2, #7
 8002f24:	432b      	orrs	r3, r5
 8002f26:	4303      	orrs	r3, r0
 8002f28:	401a      	ands	r2, r3
 8002f2a:	2700      	movs	r7, #0
 8002f2c:	e79f      	b.n	8002e6e <__aeabi_d2f+0x3a>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	fffffc80 	.word	0xfffffc80
 8002f34:	fffffca2 	.word	0xfffffca2
 8002f38:	fffffc82 	.word	0xfffffc82

08002f3c <__clzsi2>:
 8002f3c:	211c      	movs	r1, #28
 8002f3e:	2301      	movs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d301      	bcc.n	8002f4a <__clzsi2+0xe>
 8002f46:	0c00      	lsrs	r0, r0, #16
 8002f48:	3910      	subs	r1, #16
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	d301      	bcc.n	8002f54 <__clzsi2+0x18>
 8002f50:	0a00      	lsrs	r0, r0, #8
 8002f52:	3908      	subs	r1, #8
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0x22>
 8002f5a:	0900      	lsrs	r0, r0, #4
 8002f5c:	3904      	subs	r1, #4
 8002f5e:	a202      	add	r2, pc, #8	; (adr r2, 8002f68 <__clzsi2+0x2c>)
 8002f60:	5c10      	ldrb	r0, [r2, r0]
 8002f62:	1840      	adds	r0, r0, r1
 8002f64:	4770      	bx	lr
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	02020304 	.word	0x02020304
 8002f6c:	01010101 	.word	0x01010101
	...

08002f78 <__clzdi2>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d103      	bne.n	8002f86 <__clzdi2+0xe>
 8002f7e:	f7ff ffdd 	bl	8002f3c <__clzsi2>
 8002f82:	3020      	adds	r0, #32
 8002f84:	e002      	b.n	8002f8c <__clzdi2+0x14>
 8002f86:	1c08      	adds	r0, r1, #0
 8002f88:	f7ff ffd8 	bl	8002f3c <__clzsi2>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f90:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <NVIC_SystemReset+0x14>)
 8002f96:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <NVIC_SystemReset+0x18>)
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	e7fd      	b.n	8002f9e <NVIC_SystemReset+0xe>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	e000ed00 	.word	0xe000ed00
 8002fa8:	05fa0004 	.word	0x05fa0004

08002fac <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8002fac:	2000      	movs	r0, #0
 8002fae:	4770      	bx	lr

08002fb0 <resetCommand>:
#endif

/*-----------------------------------------------------------*/

static portBASE_TYPE resetCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8002fb0:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d101      	bne.n	8002fba <resetCommand+0xa>
 8002fb6:	b672      	cpsid	i
 8002fb8:	e7fe      	b.n	8002fb8 <resetCommand+0x8>

	NVIC_SystemReset();	
 8002fba:	f7ff ffe9 	bl	8002f90 <NVIC_SystemReset>
	...

08002fc0 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	0004      	movs	r4, r0
 8002fc6:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8002fcc:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d101      	bne.n	8002fd6 <setBaudrateCommand+0x16>
 8002fd2:	b672      	cpsid	i
 8002fd4:	e7fe      	b.n	8002fd4 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8002fd6:	aa01      	add	r2, sp, #4
 8002fd8:	2101      	movs	r1, #1
 8002fda:	0028      	movs	r0, r5
 8002fdc:	f00a fbc4 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	56c3      	ldrsb	r3, [r0, r3]
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d00c      	beq.n	8003002 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8002fe8:	466a      	mov	r2, sp
 8002fea:	2102      	movs	r1, #2
 8002fec:	0028      	movs	r0, r5
 8002fee:	f00a fbbb 	bl	800d768 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8002ff2:	f00f fc72 	bl	80128da <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8002ff6:	2213      	movs	r2, #19
 8002ff8:	490f      	ldr	r1, [pc, #60]	; (8003038 <setBaudrateCommand+0x78>)
 8002ffa:	0020      	movs	r0, r4
 8002ffc:	f00f fef7 	bl	8012dee <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8003000:	e016      	b.n	8003030 <setBaudrateCommand+0x70>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8003002:	3001      	adds	r0, #1
 8003004:	f00f fc69 	bl	80128da <atol>
 8003008:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800300a:	466a      	mov	r2, sp
 800300c:	2102      	movs	r1, #2
 800300e:	0028      	movs	r0, r5
 8003010:	f00a fbaa 	bl	800d768 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8003014:	f00f fc61 	bl	80128da <atol>
 8003018:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 800301a:	b2f0      	uxtb	r0, r6
 800301c:	0029      	movs	r1, r5
 800301e:	f00a fa03 	bl	800d428 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8003022:	23ff      	movs	r3, #255	; 0xff
 8003024:	4033      	ands	r3, r6
 8003026:	002a      	movs	r2, r5
 8003028:	4904      	ldr	r1, [pc, #16]	; (800303c <setBaudrateCommand+0x7c>)
 800302a:	0020      	movs	r0, r4
 800302c:	f010 f8e2 	bl	80131f4 <sprintf>
}
 8003030:	2000      	movs	r0, #0
 8003032:	b002      	add	sp, #8
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	080187f4 	.word	0x080187f4
 800303c:	080187cc 	.word	0x080187cc

08003040 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8003040:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003042:	2800      	cmp	r0, #0
 8003044:	d101      	bne.n	800304a <flashsizeCommand+0xa>
 8003046:	b672      	cpsid	i
 8003048:	e7fe      	b.n	8003048 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 800304a:	4b03      	ldr	r3, [pc, #12]	; (8003058 <flashsizeCommand+0x18>)
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	4903      	ldr	r1, [pc, #12]	; (800305c <flashsizeCommand+0x1c>)
 8003050:	f010 f8d0 	bl	80131f4 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003054:	2000      	movs	r0, #0
 8003056:	bd10      	pop	{r4, pc}
 8003058:	1ffff7cc 	.word	0x1ffff7cc
 800305c:	08017f6c 	.word	0x08017f6c

08003060 <pingCommand>:
{
 8003060:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8003062:	2800      	cmp	r0, #0
 8003064:	d01d      	beq.n	80030a2 <pingCommand+0x42>
	if (!moduleAlias[myID][0])
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <pingCommand+0x58>)
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	0093      	lsls	r3, r2, #2
 800306c:	189b      	adds	r3, r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4912      	ldr	r1, [pc, #72]	; (80030bc <pingCommand+0x5c>)
 8003072:	5c5b      	ldrb	r3, [r3, r1]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d116      	bne.n	80030a6 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8003078:	4911      	ldr	r1, [pc, #68]	; (80030c0 <pingCommand+0x60>)
 800307a:	f010 f8bb 	bl	80131f4 <sprintf>
	RTOS_IND_blink(200);	
 800307e:	2580      	movs	r5, #128	; 0x80
 8003080:	01ed      	lsls	r5, r5, #7
 8003082:	4c10      	ldr	r4, [pc, #64]	; (80030c4 <pingCommand+0x64>)
 8003084:	2201      	movs	r2, #1
 8003086:	0029      	movs	r1, r5
 8003088:	0020      	movs	r0, r4
 800308a:	f00d fb57 	bl	801073c <HAL_GPIO_WritePin>
 800308e:	20c8      	movs	r0, #200	; 0xc8
 8003090:	f00a fa51 	bl	800d536 <osDelay>
 8003094:	2200      	movs	r2, #0
 8003096:	0029      	movs	r1, r5
 8003098:	0020      	movs	r0, r4
 800309a:	f00d fb4f 	bl	801073c <HAL_GPIO_WritePin>
}
 800309e:	2000      	movs	r0, #0
 80030a0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80030a2:	b672      	cpsid	i
 80030a4:	e7fe      	b.n	80030a4 <pingCommand+0x44>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 80030a6:	0093      	lsls	r3, r2, #2
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <pingCommand+0x5c>)
 80030ae:	185b      	adds	r3, r3, r1
 80030b0:	4905      	ldr	r1, [pc, #20]	; (80030c8 <pingCommand+0x68>)
 80030b2:	f010 f89f 	bl	80131f4 <sprintf>
 80030b6:	e7e2      	b.n	800307e <pingCommand+0x1e>
 80030b8:	200011c8 	.word	0x200011c8
 80030bc:	200010c4 	.word	0x200010c4
 80030c0:	0801844c 	.word	0x0801844c
 80030c4:	48000800 	.word	0x48000800
 80030c8:	08018460 	.word	0x08018460

080030cc <StreamTimerCallback>:
{
 80030cc:	b510      	push	{r4, lr}
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 80030ce:	f00c f888 	bl	800f1e2 <pvTimerGetTimerID>
	StopStreamDMA(tid);
 80030d2:	b2c4      	uxtb	r4, r0
 80030d4:	0020      	movs	r0, r4
 80030d6:	f007 fb13 	bl	800a700 <StopStreamDMA>
	SwitchStreamDMAToMsg(tid);
 80030da:	0020      	movs	r0, r4
 80030dc:	f007 fb3e 	bl	800a75c <SwitchStreamDMAToMsg>
}
 80030e0:	bd10      	pop	{r4, pc}
	...

080030e4 <snipCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE snipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e6:	46d6      	mov	lr, sl
 80030e8:	464f      	mov	r7, r9
 80030ea:	4646      	mov	r6, r8
 80030ec:	b5c0      	push	{r6, r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	0004      	movs	r4, r0
	static const int8_t *pcMessageSnipButtonEventPressed = ( int8_t * ) "%sif b%d.pressed for %d";
	static const int8_t *pcMessageSnipButtonEventReleased = ( int8_t * ) "%sif b%d.released for %d";	
	static const int8_t *pcMessageSnipModuleParamConst = ( int8_t * ) "%sif %s %s %.1f";
	static const int8_t *pcMessageCmds = ( int8_t * ) "%s\n\r\t%s";
	static const int8_t *pcMessageEnd = ( int8_t * ) "\n\rend if\n\n\r";
	char status[2][7] = {"Paused", "Active"};
 80030f2:	aa06      	add	r2, sp, #24
 80030f4:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <snipCommand+0x1fc>)
 80030f6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80030f8:	c223      	stmia	r2!, {r0, r1, r5}
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	8013      	strh	r3, [r2, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80030fe:	2c00      	cmp	r4, #0
 8003100:	d101      	bne.n	8003106 <snipCommand+0x22>
 8003102:	b672      	cpsid	i
 8003104:	e7fe      	b.n	8003104 <snipCommand+0x20>
	
	/* Respond to the command */
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <snipCommand+0x200>)
 8003108:	7818      	ldrb	r0, [r3, #0]
 800310a:	2301      	movs	r3, #1
 800310c:	425b      	negs	r3, r3
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	3333      	adds	r3, #51	; 0x33
 8003112:	2237      	movs	r2, #55	; 0x37
 8003114:	4974      	ldr	r1, [pc, #464]	; (80032e8 <snipCommand+0x204>)
 8003116:	f00a f919 	bl	800d34c <writePxMutex>
	
	/* Go through all stored Snippets */
	uint8_t count = 1;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800311a:	4b74      	ldr	r3, [pc, #464]	; (80032ec <snipCommand+0x208>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d100      	bne.n	8003124 <snipCommand+0x40>
 8003122:	e0d0      	b.n	80032c6 <snipCommand+0x1e2>
 8003124:	2500      	movs	r5, #0
  {
		if (snippets[s].cond.conditionType)
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <snipCommand+0x20c>)
 8003128:	4698      	mov	r8, r3
 800312a:	e0ba      	b.n	80032a2 <snipCommand+0x1be>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 800312c:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <snipCommand+0x20c>)
 800312e:	4699      	mov	r9, r3
 8003130:	00ab      	lsls	r3, r5, #2
 8003132:	469a      	mov	sl, r3
 8003134:	195b      	adds	r3, r3, r5
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	444b      	add	r3, r9
 800313a:	7c1a      	ldrb	r2, [r3, #16]
 800313c:	00d3      	lsls	r3, r2, #3
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	aa06      	add	r2, sp, #24
 8003142:	4694      	mov	ip, r2
 8003144:	4463      	add	r3, ip
 8003146:	003a      	movs	r2, r7
 8003148:	496a      	ldr	r1, [pc, #424]	; (80032f4 <snipCommand+0x210>)
 800314a:	0020      	movs	r0, r4
 800314c:	f010 f852 	bl	80131f4 <sprintf>
		
		// Parse conditions
		switch (snippets[s].cond.conditionType)
 8003150:	4653      	mov	r3, sl
 8003152:	195b      	adds	r3, r3, r5
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	464a      	mov	r2, r9
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d02d      	beq.n	80031ba <snipCommand+0xd6>
 800315e:	2b03      	cmp	r3, #3
 8003160:	d000      	beq.n	8003164 <snipCommand+0x80>
 8003162:	e0a9      	b.n	80032b8 <snipCommand+0x1d4>
				
				break;
				
			case SNIP_COND_MODULE_PARAM_CONST:
				// Get the module parameter, math operator and constant values. 
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8003164:	00a9      	lsls	r1, r5, #2
 8003166:	1949      	adds	r1, r1, r5
 8003168:	0089      	lsls	r1, r1, #2
 800316a:	3106      	adds	r1, #6
 800316c:	4b60      	ldr	r3, [pc, #384]	; (80032f0 <snipCommand+0x20c>)
 800316e:	4699      	mov	r9, r3
 8003170:	4449      	add	r1, r9
 8003172:	2204      	movs	r2, #4
 8003174:	a805      	add	r0, sp, #20
 8003176:	f00f fe3a 	bl	8012dee <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 800317a:	00ad      	lsls	r5, r5, #2
 800317c:	19ad      	adds	r5, r5, r6
 800317e:	00ad      	lsls	r5, r5, #2
 8003180:	444d      	add	r5, r9
 8003182:	78ea      	ldrb	r2, [r5, #3]
 8003184:	3a01      	subs	r2, #1
 8003186:	0053      	lsls	r3, r2, #1
 8003188:	189b      	adds	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4a5a      	ldr	r2, [pc, #360]	; (80032f8 <snipCommand+0x214>)
 800318e:	18d3      	adds	r3, r2, r3
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4699      	mov	r9, r3
 8003194:	9805      	ldr	r0, [sp, #20]
 8003196:	f7ff fdfb 	bl	8002d90 <__aeabi_f2d>
 800319a:	9002      	str	r0, [sp, #8]
 800319c:	9103      	str	r1, [sp, #12]
 800319e:	786b      	ldrb	r3, [r5, #1]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	005a      	lsls	r2, r3, #1
 80031a4:	18d2      	adds	r2, r2, r3
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <snipCommand+0x218>)
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	464b      	mov	r3, r9
 80031ae:	0022      	movs	r2, r4
 80031b0:	4953      	ldr	r1, [pc, #332]	; (8003300 <snipCommand+0x21c>)
 80031b2:	0020      	movs	r0, r4
 80031b4:	f010 f81e 	bl	80131f4 <sprintf>
				break;
 80031b8:	e07e      	b.n	80032b8 <snipCommand+0x1d4>
				switch (snippets[s].cond.buffer1[1])
 80031ba:	00ab      	lsls	r3, r5, #2
 80031bc:	195b      	adds	r3, r3, r5
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <snipCommand+0x20c>)
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	3b05      	subs	r3, #5
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	2a09      	cmp	r2, #9
 80031cc:	d874      	bhi.n	80032b8 <snipCommand+0x1d4>
 80031ce:	0093      	lsls	r3, r2, #2
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <snipCommand+0x220>)
 80031d2:	58d3      	ldr	r3, [r2, r3]
 80031d4:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80031d6:	2314      	movs	r3, #20
 80031d8:	436b      	muls	r3, r5
 80031da:	4a45      	ldr	r2, [pc, #276]	; (80032f0 <snipCommand+0x20c>)
 80031dc:	18d2      	adds	r2, r2, r3
 80031de:	7893      	ldrb	r3, [r2, #2]
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	9200      	str	r2, [sp, #0]
 80031e4:	0022      	movs	r2, r4
 80031e6:	4948      	ldr	r1, [pc, #288]	; (8003308 <snipCommand+0x224>)
 80031e8:	0020      	movs	r0, r4
 80031ea:	f010 f803 	bl	80131f4 <sprintf>
        		break;
 80031ee:	e063      	b.n	80032b8 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80031f0:	2314      	movs	r3, #20
 80031f2:	436b      	muls	r3, r5
 80031f4:	4a3e      	ldr	r2, [pc, #248]	; (80032f0 <snipCommand+0x20c>)
 80031f6:	18d2      	adds	r2, r2, r3
 80031f8:	7893      	ldrb	r3, [r2, #2]
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	9200      	str	r2, [sp, #0]
 80031fe:	0022      	movs	r2, r4
 8003200:	4942      	ldr	r1, [pc, #264]	; (800330c <snipCommand+0x228>)
 8003202:	0020      	movs	r0, r4
 8003204:	f00f fff6 	bl	80131f4 <sprintf>
        		break;
 8003208:	e056      	b.n	80032b8 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 800320a:	2314      	movs	r3, #20
 800320c:	436b      	muls	r3, r5
 800320e:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <snipCommand+0x20c>)
 8003210:	18d2      	adds	r2, r2, r3
 8003212:	7893      	ldrb	r3, [r2, #2]
 8003214:	68d1      	ldr	r1, [r2, #12]
 8003216:	9101      	str	r1, [sp, #4]
 8003218:	7912      	ldrb	r2, [r2, #4]
 800321a:	9200      	str	r2, [sp, #0]
 800321c:	0022      	movs	r2, r4
 800321e:	493c      	ldr	r1, [pc, #240]	; (8003310 <snipCommand+0x22c>)
 8003220:	0020      	movs	r0, r4
 8003222:	f00f ffe7 	bl	80131f4 <sprintf>
        		break;
 8003226:	e047      	b.n	80032b8 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8003228:	2314      	movs	r3, #20
 800322a:	436b      	muls	r3, r5
 800322c:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <snipCommand+0x20c>)
 800322e:	18d2      	adds	r2, r2, r3
 8003230:	7893      	ldrb	r3, [r2, #2]
 8003232:	68d1      	ldr	r1, [r2, #12]
 8003234:	9101      	str	r1, [sp, #4]
 8003236:	7912      	ldrb	r2, [r2, #4]
 8003238:	9200      	str	r2, [sp, #0]
 800323a:	0022      	movs	r2, r4
 800323c:	4935      	ldr	r1, [pc, #212]	; (8003314 <snipCommand+0x230>)
 800323e:	0020      	movs	r0, r4
 8003240:	f00f ffd8 	bl	80131f4 <sprintf>
        		break;						
 8003244:	e038      	b.n	80032b8 <snipCommand+0x1d4>
		}
		
		// Parse commands
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
		{
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <snipCommand+0x234>)
 8003248:	0022      	movs	r2, r4
 800324a:	4934      	ldr	r1, [pc, #208]	; (800331c <snipCommand+0x238>)
 800324c:	0020      	movs	r0, r4
 800324e:	f00f ffd1 	bl	80131f4 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8003252:	4831      	ldr	r0, [pc, #196]	; (8003318 <snipCommand+0x234>)
 8003254:	f7fc ff60 	bl	8000118 <strlen>
 8003258:	0002      	movs	r2, r0
 800325a:	2100      	movs	r1, #0
 800325c:	482e      	ldr	r0, [pc, #184]	; (8003318 <snipCommand+0x234>)
 800325e:	f00f fdcf 	bl	8012e00 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8003262:	0029      	movs	r1, r5
 8003264:	68f0      	ldr	r0, [r6, #12]
 8003266:	f007 f921 	bl	800a4ac <ParseSnippetCommand>
 800326a:	2800      	cmp	r0, #0
 800326c:	d1eb      	bne.n	8003246 <snipCommand+0x162>
		}
		
		// Finish and write the buffer
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 800326e:	0020      	movs	r0, r4
 8003270:	f7fc ff52 	bl	8000118 <strlen>
 8003274:	1820      	adds	r0, r4, r0
 8003276:	220c      	movs	r2, #12
 8003278:	4929      	ldr	r1, [pc, #164]	; (8003320 <snipCommand+0x23c>)
 800327a:	f00f fdb8 	bl	8012dee <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800327e:	0020      	movs	r0, r4
 8003280:	f7fc ff4a 	bl	8000118 <strlen>
 8003284:	b282      	uxth	r2, r0
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <snipCommand+0x200>)
 8003288:	7818      	ldrb	r0, [r3, #0]
 800328a:	2301      	movs	r3, #1
 800328c:	425b      	negs	r3, r3
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	3333      	adds	r3, #51	; 0x33
 8003292:	0021      	movs	r1, r4
 8003294:	f00a f85a 	bl	800d34c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8003298:	003d      	movs	r5, r7
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <snipCommand+0x208>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	42bb      	cmp	r3, r7
 80032a0:	d911      	bls.n	80032c6 <snipCommand+0x1e2>
 80032a2:	1c6f      	adds	r7, r5, #1
 80032a4:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 80032a6:	002e      	movs	r6, r5
 80032a8:	00ab      	lsls	r3, r5, #2
 80032aa:	195b      	adds	r3, r3, r5
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4642      	mov	r2, r8
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d000      	beq.n	80032b8 <snipCommand+0x1d4>
 80032b6:	e739      	b.n	800312c <snipCommand+0x48>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80032b8:	4d17      	ldr	r5, [pc, #92]	; (8003318 <snipCommand+0x234>)
 80032ba:	00b3      	lsls	r3, r6, #2
 80032bc:	199b      	adds	r3, r3, r6
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4e0b      	ldr	r6, [pc, #44]	; (80032f0 <snipCommand+0x20c>)
 80032c2:	18f6      	adds	r6, r6, r3
 80032c4:	e7cd      	b.n	8003262 <snipCommand+0x17e>
		
		++count;
	}

	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 80032c6:	22a7      	movs	r2, #167	; 0xa7
 80032c8:	4916      	ldr	r1, [pc, #88]	; (8003324 <snipCommand+0x240>)
 80032ca:	0020      	movs	r0, r4
 80032cc:	f00f fd8f 	bl	8012dee <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	b00a      	add	sp, #40	; 0x28
 80032d4:	bc1c      	pop	{r2, r3, r4}
 80032d6:	4690      	mov	r8, r2
 80032d8:	4699      	mov	r9, r3
 80032da:	46a2      	mov	sl, r4
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	080175f0 	.word	0x080175f0
 80032e4:	20000a2f 	.word	0x20000a2f
 80032e8:	08018a14 	.word	0x08018a14
 80032ec:	20001403 	.word	0x20001403
 80032f0:	2000690c 	.word	0x2000690c
 80032f4:	08018a4c 	.word	0x08018a4c
 80032f8:	20000040 	.word	0x20000040
 80032fc:	08018260 	.word	0x08018260
 8003300:	08018ab8 	.word	0x08018ab8
 8003304:	08017764 	.word	0x08017764
 8003308:	08018a58 	.word	0x08018a58
 800330c:	08018a6c 	.word	0x08018a6c
 8003310:	08018a84 	.word	0x08018a84
 8003314:	08018a9c 	.word	0x08018a9c
 8003318:	20000e64 	.word	0x20000e64
 800331c:	08018ac8 	.word	0x08018ac8
 8003320:	08018ad0 	.word	0x08018ad0
 8003324:	08018adc 	.word	0x08018adc

08003328 <idcodeCommand>:
{	
 8003328:	b510      	push	{r4, lr}
 800332a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800332c:	d101      	bne.n	8003332 <idcodeCommand+0xa>
 800332e:	b672      	cpsid	i
 8003330:	e7fe      	b.n	8003330 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 8003332:	f00c f94b 	bl	800f5cc <HAL_GetDEVID>
	switch (dev)
 8003336:	0403      	lsls	r3, r0, #16
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <idcodeCommand+0x80>)
 800333c:	4694      	mov	ip, r2
 800333e:	4463      	add	r3, ip
 8003340:	2b08      	cmp	r3, #8
 8003342:	d82a      	bhi.n	800339a <idcodeCommand+0x72>
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4a19      	ldr	r2, [pc, #100]	; (80033ac <idcodeCommand+0x84>)
 8003348:	58d3      	ldr	r3, [r2, r3]
 800334a:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <idcodeCommand+0x88>)
 800334e:	4919      	ldr	r1, [pc, #100]	; (80033b4 <idcodeCommand+0x8c>)
 8003350:	0020      	movs	r0, r4
 8003352:	f00f ff4f 	bl	80131f4 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8003356:	f00c f933 	bl	800f5c0 <HAL_GetREVID>
 800335a:	0b03      	lsrs	r3, r0, #12
 800335c:	0022      	movs	r2, r4
 800335e:	4916      	ldr	r1, [pc, #88]	; (80033b8 <idcodeCommand+0x90>)
 8003360:	0020      	movs	r0, r4
 8003362:	f00f ff47 	bl	80131f4 <sprintf>
}
 8003366:	2000      	movs	r0, #0
 8003368:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <idcodeCommand+0x94>)
 800336c:	4911      	ldr	r1, [pc, #68]	; (80033b4 <idcodeCommand+0x8c>)
 800336e:	0020      	movs	r0, r4
 8003370:	f00f ff40 	bl	80131f4 <sprintf>
  		break;
 8003374:	e7ef      	b.n	8003356 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <idcodeCommand+0x98>)
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <idcodeCommand+0x8c>)
 800337a:	0020      	movs	r0, r4
 800337c:	f00f ff3a 	bl	80131f4 <sprintf>
  		break;
 8003380:	e7e9      	b.n	8003356 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <idcodeCommand+0x9c>)
 8003384:	490b      	ldr	r1, [pc, #44]	; (80033b4 <idcodeCommand+0x8c>)
 8003386:	0020      	movs	r0, r4
 8003388:	f00f ff34 	bl	80131f4 <sprintf>
  		break;
 800338c:	e7e3      	b.n	8003356 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <idcodeCommand+0xa0>)
 8003390:	4908      	ldr	r1, [pc, #32]	; (80033b4 <idcodeCommand+0x8c>)
 8003392:	0020      	movs	r0, r4
 8003394:	f00f ff2e 	bl	80131f4 <sprintf>
  		break;
 8003398:	e7dd      	b.n	8003356 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 800339a:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <idcodeCommand+0xa4>)
 800339c:	4905      	ldr	r1, [pc, #20]	; (80033b4 <idcodeCommand+0x8c>)
 800339e:	0020      	movs	r0, r4
 80033a0:	f00f ff28 	bl	80131f4 <sprintf>
  		break;
 80033a4:	e7d7      	b.n	8003356 <idcodeCommand+0x2e>
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	fffffbc0 	.word	0xfffffbc0
 80033ac:	0801778c 	.word	0x0801778c
 80033b0:	0801815c 	.word	0x0801815c
 80033b4:	08018168 	.word	0x08018168
 80033b8:	080181b4 	.word	0x080181b4
 80033bc:	0801817c 	.word	0x0801817c
 80033c0:	08018188 	.word	0x08018188
 80033c4:	08018194 	.word	0x08018194
 80033c8:	080181a0 	.word	0x080181a0
 80033cc:	080181ac 	.word	0x080181ac

080033d0 <uuidCommand>:
{
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80033d4:	d101      	bne.n	80033da <uuidCommand+0xa>
 80033d6:	b672      	cpsid	i
 80033d8:	e7fe      	b.n	80033d8 <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 80033da:	220e      	movs	r2, #14
 80033dc:	4911      	ldr	r1, [pc, #68]	; (8003424 <uuidCommand+0x54>)
 80033de:	f00f fd06 	bl	8012dee <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <uuidCommand+0x58>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4d11      	ldr	r5, [pc, #68]	; (800342c <uuidCommand+0x5c>)
 80033e8:	0022      	movs	r2, r4
 80033ea:	0029      	movs	r1, r5
 80033ec:	0020      	movs	r0, r4
 80033ee:	f00f ff01 	bl	80131f4 <sprintf>
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <uuidCommand+0x60>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0022      	movs	r2, r4
 80033f8:	0029      	movs	r1, r5
 80033fa:	0020      	movs	r0, r4
 80033fc:	f00f fefa 	bl	80131f4 <sprintf>
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <uuidCommand+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0022      	movs	r2, r4
 8003406:	0029      	movs	r1, r5
 8003408:	0020      	movs	r0, r4
 800340a:	f00f fef3 	bl	80131f4 <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 800340e:	0020      	movs	r0, r4
 8003410:	f7fc fe82 	bl	8000118 <strlen>
 8003414:	1820      	adds	r0, r4, r0
 8003416:	2203      	movs	r2, #3
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <uuidCommand+0x68>)
 800341a:	f00f fce8 	bl	8012dee <memcpy>
}
 800341e:	2000      	movs	r0, #0
 8003420:	bd70      	pop	{r4, r5, r6, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	08019a68 	.word	0x08019a68
 8003428:	1ffff7ac 	.word	0x1ffff7ac
 800342c:	08019a78 	.word	0x08019a78
 8003430:	1ffff7b0 	.word	0x1ffff7b0
 8003434:	1ffff7b4 	.word	0x1ffff7b4
 8003438:	0801a28c 	.word	0x0801a28c

0800343c <getCommand>:
{
 800343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343e:	46c6      	mov	lr, r8
 8003440:	b500      	push	{lr}
 8003442:	b082      	sub	sp, #8
 8003444:	0004      	movs	r4, r0
 8003446:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800344e:	2800      	cmp	r0, #0
 8003450:	d101      	bne.n	8003456 <getCommand+0x1a>
 8003452:	b672      	cpsid	i
 8003454:	e7fe      	b.n	8003454 <getCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003456:	aa01      	add	r2, sp, #4
 8003458:	2101      	movs	r1, #1
 800345a:	0030      	movs	r0, r6
 800345c:	f00a f984 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8003460:	0005      	movs	r5, r0
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <getCommand+0x1f8>)
 8003464:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8003466:	2204      	movs	r2, #4
 8003468:	4973      	ldr	r1, [pc, #460]	; (8003638 <getCommand+0x1fc>)
 800346a:	f00f ff07 	bl	801327c <strncmp>
 800346e:	2800      	cmp	r0, #0
 8003470:	d000      	beq.n	8003474 <getCommand+0x38>
 8003472:	e090      	b.n	8003596 <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8003474:	1d2f      	adds	r7, r5, #4
 8003476:	9b01      	ldr	r3, [sp, #4]
 8003478:	1f1e      	subs	r6, r3, #4
 800347a:	0032      	movs	r2, r6
 800347c:	496f      	ldr	r1, [pc, #444]	; (800363c <getCommand+0x200>)
 800347e:	0038      	movs	r0, r7
 8003480:	f00f fefc 	bl	801327c <strncmp>
 8003484:	2800      	cmp	r0, #0
 8003486:	d11e      	bne.n	80034c6 <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 8003488:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <getCommand+0x204>)
 800348a:	799b      	ldrb	r3, [r3, #6]
 800348c:	2b60      	cmp	r3, #96	; 0x60
 800348e:	d109      	bne.n	80034a4 <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8003490:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <getCommand+0x208>)
 8003492:	496d      	ldr	r1, [pc, #436]	; (8003648 <getCommand+0x20c>)
 8003494:	0020      	movs	r0, r4
 8003496:	f00f fead 	bl	80131f4 <sprintf>
}
 800349a:	2000      	movs	r0, #0
 800349c:	b002      	add	sp, #8
 800349e:	bc04      	pop	{r2}
 80034a0:	4690      	mov	r8, r2
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d105      	bne.n	80034b4 <getCommand+0x78>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80034a8:	4a68      	ldr	r2, [pc, #416]	; (800364c <getCommand+0x210>)
 80034aa:	4967      	ldr	r1, [pc, #412]	; (8003648 <getCommand+0x20c>)
 80034ac:	0020      	movs	r0, r4
 80034ae:	f00f fea1 	bl	80131f4 <sprintf>
 80034b2:	e7f2      	b.n	800349a <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d000      	beq.n	80034ba <getCommand+0x7e>
 80034b8:	e0b6      	b.n	8003628 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80034ba:	4a65      	ldr	r2, [pc, #404]	; (8003650 <getCommand+0x214>)
 80034bc:	4962      	ldr	r1, [pc, #392]	; (8003648 <getCommand+0x20c>)
 80034be:	0020      	movs	r0, r4
 80034c0:	f00f fe98 	bl	80131f4 <sprintf>
 80034c4:	e7e9      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80034c6:	0032      	movs	r2, r6
 80034c8:	4962      	ldr	r1, [pc, #392]	; (8003654 <getCommand+0x218>)
 80034ca:	0038      	movs	r0, r7
 80034cc:	f00f fed6 	bl	801327c <strncmp>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d11a      	bne.n	800350a <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80034d4:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <getCommand+0x204>)
 80034d6:	79db      	ldrb	r3, [r3, #7]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d105      	bne.n	80034e8 <getCommand+0xac>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80034dc:	4a59      	ldr	r2, [pc, #356]	; (8003644 <getCommand+0x208>)
 80034de:	495a      	ldr	r1, [pc, #360]	; (8003648 <getCommand+0x20c>)
 80034e0:	0020      	movs	r0, r4
 80034e2:	f00f fe87 	bl	80131f4 <sprintf>
 80034e6:	e7d8      	b.n	800349a <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <getCommand+0xbc>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <getCommand+0x210>)
 80034ee:	4956      	ldr	r1, [pc, #344]	; (8003648 <getCommand+0x20c>)
 80034f0:	0020      	movs	r0, r4
 80034f2:	f00f fe7f 	bl	80131f4 <sprintf>
 80034f6:	e7d0      	b.n	800349a <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d000      	beq.n	80034fe <getCommand+0xc2>
 80034fc:	e094      	b.n	8003628 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80034fe:	4a54      	ldr	r2, [pc, #336]	; (8003650 <getCommand+0x214>)
 8003500:	4951      	ldr	r1, [pc, #324]	; (8003648 <getCommand+0x20c>)
 8003502:	0020      	movs	r0, r4
 8003504:	f00f fe76 	bl	80131f4 <sprintf>
 8003508:	e7c7      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800350a:	0032      	movs	r2, r6
 800350c:	4952      	ldr	r1, [pc, #328]	; (8003658 <getCommand+0x21c>)
 800350e:	0038      	movs	r0, r7
 8003510:	f00f feb4 	bl	801327c <strncmp>
 8003514:	2800      	cmp	r0, #0
 8003516:	d106      	bne.n	8003526 <getCommand+0xea>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8003518:	4b49      	ldr	r3, [pc, #292]	; (8003640 <getCommand+0x204>)
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	494f      	ldr	r1, [pc, #316]	; (800365c <getCommand+0x220>)
 800351e:	0020      	movs	r0, r4
 8003520:	f00f fe68 	bl	80131f4 <sprintf>
 8003524:	e7b9      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8003526:	0032      	movs	r2, r6
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <getCommand+0x224>)
 800352a:	0038      	movs	r0, r7
 800352c:	f00f fea6 	bl	801327c <strncmp>
 8003530:	2800      	cmp	r0, #0
 8003532:	d106      	bne.n	8003542 <getCommand+0x106>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <getCommand+0x204>)
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	4948      	ldr	r1, [pc, #288]	; (800365c <getCommand+0x220>)
 800353a:	0020      	movs	r0, r4
 800353c:	f00f fe5a 	bl	80131f4 <sprintf>
 8003540:	e7ab      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8003542:	0032      	movs	r2, r6
 8003544:	4947      	ldr	r1, [pc, #284]	; (8003664 <getCommand+0x228>)
 8003546:	0038      	movs	r0, r7
 8003548:	f00f fe98 	bl	801327c <strncmp>
 800354c:	2800      	cmp	r0, #0
 800354e:	d106      	bne.n	800355e <getCommand+0x122>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <getCommand+0x204>)
 8003552:	885a      	ldrh	r2, [r3, #2]
 8003554:	4941      	ldr	r1, [pc, #260]	; (800365c <getCommand+0x220>)
 8003556:	0020      	movs	r0, r4
 8003558:	f00f fe4c 	bl	80131f4 <sprintf>
 800355c:	e79d      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 800355e:	0032      	movs	r2, r6
 8003560:	4941      	ldr	r1, [pc, #260]	; (8003668 <getCommand+0x22c>)
 8003562:	0038      	movs	r0, r7
 8003564:	f00f fe8a 	bl	801327c <strncmp>
 8003568:	2800      	cmp	r0, #0
 800356a:	d106      	bne.n	800357a <getCommand+0x13e>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 800356c:	4b34      	ldr	r3, [pc, #208]	; (8003640 <getCommand+0x204>)
 800356e:	791a      	ldrb	r2, [r3, #4]
 8003570:	493a      	ldr	r1, [pc, #232]	; (800365c <getCommand+0x220>)
 8003572:	0020      	movs	r0, r4
 8003574:	f00f fe3e 	bl	80131f4 <sprintf>
 8003578:	e78f      	b.n	800349a <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 800357a:	0032      	movs	r2, r6
 800357c:	493b      	ldr	r1, [pc, #236]	; (800366c <getCommand+0x230>)
 800357e:	0038      	movs	r0, r7
 8003580:	f00f fe7c 	bl	801327c <strncmp>
 8003584:	2800      	cmp	r0, #0
 8003586:	d10d      	bne.n	80035a4 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <getCommand+0x204>)
 800358a:	795a      	ldrb	r2, [r3, #5]
 800358c:	4933      	ldr	r1, [pc, #204]	; (800365c <getCommand+0x220>)
 800358e:	0020      	movs	r0, r4
 8003590:	f00f fe30 	bl	80131f4 <sprintf>
 8003594:	e781      	b.n	800349a <getCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 8003596:	2205      	movs	r2, #5
 8003598:	4935      	ldr	r1, [pc, #212]	; (8003670 <getCommand+0x234>)
 800359a:	0028      	movs	r0, r5
 800359c:	f00f fe6e 	bl	801327c <strncmp>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d005      	beq.n	80035b0 <getCommand+0x174>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80035a4:	2213      	movs	r2, #19
 80035a6:	4933      	ldr	r1, [pc, #204]	; (8003674 <getCommand+0x238>)
 80035a8:	0020      	movs	r0, r4
 80035aa:	f00f fc20 	bl	8012dee <memcpy>
 80035ae:	e774      	b.n	800349a <getCommand+0x5e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80035b0:	466a      	mov	r2, sp
 80035b2:	2102      	movs	r1, #2
 80035b4:	0030      	movs	r0, r6
 80035b6:	f00a f8d7 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80035ba:	0005      	movs	r5, r0
 80035bc:	4f2e      	ldr	r7, [pc, #184]	; (8003678 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80035be:	2600      	movs	r6, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80035c0:	0039      	movs	r1, r7
 80035c2:	0028      	movs	r0, r5
 80035c4:	f7fc fd9e 	bl	8000104 <strcmp>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d011      	beq.n	80035f0 <getCommand+0x1b4>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80035cc:	3601      	adds	r6, #1
 80035ce:	b2f6      	uxtb	r6, r6
 80035d0:	370a      	adds	r7, #10
 80035d2:	2e0a      	cmp	r6, #10
 80035d4:	d1f4      	bne.n	80035c0 <getCommand+0x184>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80035d6:	002a      	movs	r2, r5
 80035d8:	4928      	ldr	r1, [pc, #160]	; (800367c <getCommand+0x240>)
 80035da:	0020      	movs	r0, r4
 80035dc:	f00f fe0a 	bl	80131f4 <sprintf>
			return pdFALSE;
 80035e0:	e75b      	b.n	800349a <getCommand+0x5e>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 80035e2:	002b      	movs	r3, r5
 80035e4:	0022      	movs	r2, r4
 80035e6:	4926      	ldr	r1, [pc, #152]	; (8003680 <getCommand+0x244>)
 80035e8:	0020      	movs	r0, r4
 80035ea:	f00f fe03 	bl	80131f4 <sprintf>
 80035ee:	e015      	b.n	800361c <getCommand+0x1e0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 80035f0:	002a      	movs	r2, r5
 80035f2:	4924      	ldr	r1, [pc, #144]	; (8003684 <getCommand+0x248>)
 80035f4:	0020      	movs	r0, r4
 80035f6:	f00f fdfd 	bl	80131f4 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <getCommand+0x24c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d100      	bne.n	8003604 <getCommand+0x1c8>
 8003602:	e74a      	b.n	800349a <getCommand+0x5e>
 8003604:	2501      	movs	r5, #1
 8003606:	002b      	movs	r3, r5
 8003608:	40b3      	lsls	r3, r6
 800360a:	4698      	mov	r8, r3
				if (InGroup(j, i))
 800360c:	4f1f      	ldr	r7, [pc, #124]	; (800368c <getCommand+0x250>)
			for(j=1 ; j<=N ; j++)						// N modules
 800360e:	4e1e      	ldr	r6, [pc, #120]	; (8003688 <getCommand+0x24c>)
				if (InGroup(j, i))
 8003610:	1e6b      	subs	r3, r5, #1
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	5bdb      	ldrh	r3, [r3, r7]
 8003616:	4642      	mov	r2, r8
 8003618:	421a      	tst	r2, r3
 800361a:	d1e2      	bne.n	80035e2 <getCommand+0x1a6>
			for(j=1 ; j<=N ; j++)						// N modules
 800361c:	3501      	adds	r5, #1
 800361e:	b2ed      	uxtb	r5, r5
 8003620:	7833      	ldrb	r3, [r6, #0]
 8003622:	42ab      	cmp	r3, r5
 8003624:	d2f4      	bcs.n	8003610 <getCommand+0x1d4>
 8003626:	e738      	b.n	800349a <getCommand+0x5e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8003628:	002a      	movs	r2, r5
 800362a:	4919      	ldr	r1, [pc, #100]	; (8003690 <getCommand+0x254>)
 800362c:	0020      	movs	r0, r4
 800362e:	f00f fde1 	bl	80131f4 <sprintf>
 8003632:	e732      	b.n	800349a <getCommand+0x5e>
 8003634:	20001204 	.word	0x20001204
 8003638:	08017fb0 	.word	0x08017fb0
 800363c:	08017fb8 	.word	0x08017fb8
 8003640:	20006894 	.word	0x20006894
 8003644:	08017fc4 	.word	0x08017fc4
 8003648:	08017a24 	.word	0x08017a24
 800364c:	08017fc8 	.word	0x08017fc8
 8003650:	08017fcc 	.word	0x08017fcc
 8003654:	08017fd4 	.word	0x08017fd4
 8003658:	08017fdc 	.word	0x08017fdc
 800365c:	08019c28 	.word	0x08019c28
 8003660:	08017fe8 	.word	0x08017fe8
 8003664:	08017ff4 	.word	0x08017ff4
 8003668:	08018004 	.word	0x08018004
 800366c:	08018018 	.word	0x08018018
 8003670:	0801802c 	.word	0x0801802c
 8003674:	0801803c 	.word	0x0801803c
 8003678:	20000ea4 	.word	0x20000ea4
 800367c:	08018050 	.word	0x08018050
 8003680:	08018034 	.word	0x08018034
 8003684:	0801806c 	.word	0x0801806c
 8003688:	2000001c 	.word	0x2000001c
 800368c:	20000f08 	.word	0x20000f08
 8003690:	08018080 	.word	0x08018080

08003694 <prvRunTimeStatsCommand>:
{
 8003694:	b510      	push	{r4, lr}
 8003696:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003698:	d101      	bne.n	800369e <prvRunTimeStatsCommand+0xa>
 800369a:	b672      	cpsid	i
 800369c:	e7fe      	b.n	800369c <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 800369e:	2251      	movs	r2, #81	; 0x51
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <prvRunTimeStatsCommand+0x20>)
 80036a2:	f00f fba4 	bl	8012dee <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 80036a6:	0020      	movs	r0, r4
 80036a8:	3050      	adds	r0, #80	; 0x50
 80036aa:	f00b fab1 	bl	800ec10 <vTaskGetRunTimeStats>
}
 80036ae:	2000      	movs	r0, #0
 80036b0:	bd10      	pop	{r4, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	0801848c 	.word	0x0801848c

080036b8 <prvTaskStatsCommand>:
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80036bc:	d101      	bne.n	80036c2 <prvTaskStatsCommand+0xa>
 80036be:	b672      	cpsid	i
 80036c0:	e7fe      	b.n	80036c0 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80036c2:	225b      	movs	r2, #91	; 0x5b
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <prvTaskStatsCommand+0x20>)
 80036c6:	f00f fb92 	bl	8012dee <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 80036ca:	0020      	movs	r0, r4
 80036cc:	305a      	adds	r0, #90	; 0x5a
 80036ce:	f00b fa3f 	bl	800eb50 <vTaskList>
}
 80036d2:	2000      	movs	r0, #0
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	080184f0 	.word	0x080184f0

080036dc <TIM_USEC_Init>:
{
 80036dc:	b530      	push	{r4, r5, lr}
 80036de:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <TIM_USEC_Init+0x50>)
 80036e2:	69d1      	ldr	r1, [r2, #28]
 80036e4:	2080      	movs	r0, #128	; 0x80
 80036e6:	0040      	lsls	r0, r0, #1
 80036e8:	4301      	orrs	r1, r0
 80036ea:	61d1      	str	r1, [r2, #28]
 80036ec:	69d3      	ldr	r3, [r2, #28]
 80036ee:	4003      	ands	r3, r0
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 80036f4:	4c0e      	ldr	r4, [pc, #56]	; (8003730 <TIM_USEC_Init+0x54>)
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <TIM_USEC_Init+0x58>)
 80036f8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 80036fa:	f00d fc95 	bl	8011028 <HAL_RCC_GetPCLK1Freq>
 80036fe:	490e      	ldr	r1, [pc, #56]	; (8003738 <TIM_USEC_Init+0x5c>)
 8003700:	f7fc fd26 	bl	8000150 <__udivsi3>
 8003704:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003706:	2500      	movs	r5, #0
 8003708:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <TIM_USEC_Init+0x60>)
 800370c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800370e:	0020      	movs	r0, r4
 8003710:	f00e f998 	bl	8011a44 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003714:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003716:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 8003718:	a902      	add	r1, sp, #8
 800371a:	0020      	movs	r0, r4
 800371c:	f00e faf0 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim14);
 8003720:	0020      	movs	r0, r4
 8003722:	f00e f80b 	bl	801173c <HAL_TIM_Base_Start>
}
 8003726:	b005      	add	sp, #20
 8003728:	bd30      	pop	{r4, r5, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	40021000 	.word	0x40021000
 8003730:	200068b0 	.word	0x200068b0
 8003734:	40002000 	.word	0x40002000
 8003738:	000f4240 	.word	0x000f4240
 800373c:	0000ffff 	.word	0x0000ffff

08003740 <TIM_MSEC_Init>:
{
 8003740:	b530      	push	{r4, r5, lr}
 8003742:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <TIM_MSEC_Init+0x50>)
 8003746:	6991      	ldr	r1, [r2, #24]
 8003748:	2080      	movs	r0, #128	; 0x80
 800374a:	0240      	lsls	r0, r0, #9
 800374c:	4301      	orrs	r1, r0
 800374e:	6191      	str	r1, [r2, #24]
 8003750:	6993      	ldr	r3, [r2, #24]
 8003752:	4003      	ands	r3, r0
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 8003758:	4c0e      	ldr	r4, [pc, #56]	; (8003794 <TIM_MSEC_Init+0x54>)
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <TIM_MSEC_Init+0x58>)
 800375c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800375e:	f00d fc63 	bl	8011028 <HAL_RCC_GetPCLK1Freq>
 8003762:	21fa      	movs	r1, #250	; 0xfa
 8003764:	0089      	lsls	r1, r1, #2
 8003766:	f7fc fcf3 	bl	8000150 <__udivsi3>
 800376a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376c:	2500      	movs	r5, #0
 800376e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <TIM_MSEC_Init+0x5c>)
 8003772:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 8003774:	0020      	movs	r0, r4
 8003776:	f00e f965 	bl	8011a44 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800377e:	a902      	add	r1, sp, #8
 8003780:	0020      	movs	r0, r4
 8003782:	f00e fabd 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim15);
 8003786:	0020      	movs	r0, r4
 8003788:	f00d ffd8 	bl	801173c <HAL_TIM_Base_Start>
}
 800378c:	b005      	add	sp, #20
 800378e:	bd30      	pop	{r4, r5, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	200067e0 	.word	0x200067e0
 8003798:	40014000 	.word	0x40014000
 800379c:	0000ffff 	.word	0x0000ffff

080037a0 <minArr>:
{
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!Q[0])						// Not visited yet
 80037a2:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 80037a4:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d100      	bne.n	80037ac <minArr+0xc>
		smallest = arr[0];
 80037aa:	7804      	ldrb	r4, [r0, #0]
	for (int i=0 ; i<N ; i++) {
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <minArr+0x38>)
 80037ae:	781d      	ldrb	r5, [r3, #0]
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	dd0e      	ble.n	80037d2 <minArr+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2700      	movs	r7, #0
 80037b8:	e002      	b.n	80037c0 <minArr+0x20>
 80037ba:	3301      	adds	r3, #1
 80037bc:	42ab      	cmp	r3, r5
 80037be:	da09      	bge.n	80037d4 <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 80037c0:	5cc2      	ldrb	r2, [r0, r3]
 80037c2:	42a2      	cmp	r2, r4
 80037c4:	d2f9      	bcs.n	80037ba <minArr+0x1a>
 80037c6:	5cce      	ldrb	r6, [r1, r3]
 80037c8:	2e00      	cmp	r6, #0
 80037ca:	d1f6      	bne.n	80037ba <minArr+0x1a>
			index = i;
 80037cc:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 80037ce:	0014      	movs	r4, r2
 80037d0:	e7f3      	b.n	80037ba <minArr+0x1a>
	for (int i=0 ; i<N ; i++) {
 80037d2:	2700      	movs	r7, #0
}
 80037d4:	0038      	movs	r0, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d8:	2000001c 	.word	0x2000001c

080037dc <QnotEmpty>:
	for (int i=0 ; i<N ; i++) {
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <QnotEmpty+0x20>)
 80037de:	7819      	ldrb	r1, [r3, #0]
 80037e0:	2900      	cmp	r1, #0
 80037e2:	d008      	beq.n	80037f6 <QnotEmpty+0x1a>
 80037e4:	0003      	movs	r3, r0
 80037e6:	1841      	adds	r1, r0, r1
	char temp = 1;
 80037e8:	2001      	movs	r0, #1
		temp &= Q[i];
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	4010      	ands	r0, r2
 80037ee:	3301      	adds	r3, #1
	for (int i=0 ; i<N ; i++) {
 80037f0:	428b      	cmp	r3, r1
 80037f2:	d1fa      	bne.n	80037ea <QnotEmpty+0xe>
}
 80037f4:	4770      	bx	lr
	char temp = 1;
 80037f6:	2001      	movs	r0, #1
 80037f8:	e7fc      	b.n	80037f4 <QnotEmpty+0x18>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	2000001c 	.word	0x2000001c

08003800 <NotifyMessagingTask>:
{
 8003800:	b510      	push	{r4, lr}
	switch (port)
 8003802:	2805      	cmp	r0, #5
 8003804:	d80a      	bhi.n	800381c <NotifyMessagingTask+0x1c>
 8003806:	0080      	lsls	r0, r0, #2
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <NotifyMessagingTask+0x60>)
 800380a:	581b      	ldr	r3, [r3, r0]
 800380c:	469f      	mov	pc, r3
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <NotifyMessagingTask+0x64>)
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	2202      	movs	r2, #2
 8003816:	2100      	movs	r1, #0
 8003818:	f00b faac 	bl	800ed74 <xTaskGenericNotify>
}
 800381c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <NotifyMessagingTask+0x68>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	2202      	movs	r2, #2
 8003826:	2100      	movs	r1, #0
 8003828:	f00b faa4 	bl	800ed74 <xTaskGenericNotify>
 800382c:	e7f6      	b.n	800381c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <NotifyMessagingTask+0x6c>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	2300      	movs	r3, #0
 8003834:	2202      	movs	r2, #2
 8003836:	2100      	movs	r1, #0
 8003838:	f00b fa9c 	bl	800ed74 <xTaskGenericNotify>
 800383c:	e7ee      	b.n	800381c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <NotifyMessagingTask+0x70>)
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	2202      	movs	r2, #2
 8003846:	2100      	movs	r1, #0
 8003848:	f00b fa94 	bl	800ed74 <xTaskGenericNotify>
 800384c:	e7e6      	b.n	800381c <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <NotifyMessagingTask+0x74>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	2202      	movs	r2, #2
 8003856:	2100      	movs	r1, #0
 8003858:	f00b fa8c 	bl	800ed74 <xTaskGenericNotify>
}
 800385c:	e7de      	b.n	800381c <NotifyMessagingTask+0x1c>
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	080177b0 	.word	0x080177b0
 8003864:	20001600 	.word	0x20001600
 8003868:	20001604 	.word	0x20001604
 800386c:	20001608 	.word	0x20001608
 8003870:	2000160c 	.word	0x2000160c
 8003874:	20001610 	.word	0x20001610

08003878 <SaveToRO>:
{
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	46de      	mov	lr, fp
 800387c:	4657      	mov	r7, sl
 800387e:	464e      	mov	r6, r9
 8003880:	4645      	mov	r5, r8
 8003882:	b5e0      	push	{r5, r6, r7, lr}
 8003884:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 8003886:	2215      	movs	r2, #21
 8003888:	2100      	movs	r1, #0
 800388a:	a802      	add	r0, sp, #8
 800388c:	f00f fab8 	bl	8012e00 <memset>
	HAL_FLASH_Unlock();
 8003890:	f00c fd3a 	bl	8010308 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8003894:	4872      	ldr	r0, [pc, #456]	; (8003a60 <SaveToRO+0x1e8>)
 8003896:	f00c fdf9 	bl	801048c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800389a:	4872      	ldr	r0, [pc, #456]	; (8003a64 <SaveToRO+0x1ec>)
 800389c:	f00c fd50 	bl	8010340 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d112      	bne.n	80038ca <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80038a4:	4a70      	ldr	r2, [pc, #448]	; (8003a68 <SaveToRO+0x1f0>)
 80038a6:	6913      	ldr	r3, [r2, #16]
 80038a8:	2102      	movs	r1, #2
 80038aa:	438b      	bics	r3, r1
 80038ac:	6113      	str	r3, [r2, #16]
	if (myID)
 80038ae:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <SaveToRO+0x1f4>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d113      	bne.n	80038de <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80038b6:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <SaveToRO+0x1f8>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d100      	bne.n	80038c0 <SaveToRO+0x48>
 80038be:	e0ca      	b.n	8003a56 <SaveToRO+0x1de>
 80038c0:	2500      	movs	r5, #0
 80038c2:	4c6c      	ldr	r4, [pc, #432]	; (8003a74 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) 
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <SaveToRO+0x200>)
 80038c6:	4698      	mov	r8, r3
 80038c8:	e06e      	b.n	80039a8 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 80038ca:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <SaveToRO+0x204>)
 80038cc:	69d8      	ldr	r0, [r3, #28]
 80038ce:	b2c0      	uxtb	r0, r0
}
 80038d0:	b009      	add	sp, #36	; 0x24
 80038d2:	bc3c      	pop	{r2, r3, r4, r5}
 80038d4:	4690      	mov	r8, r2
 80038d6:	4699      	mov	r9, r3
 80038d8:	46a2      	mov	sl, r4
 80038da:	46ab      	mov	fp, r5
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 80038de:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <SaveToRO+0x208>)
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	0212      	lsls	r2, r2, #8
 80038e4:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 80038e6:	b292      	uxth	r2, r2
 80038e8:	2300      	movs	r3, #0
 80038ea:	495d      	ldr	r1, [pc, #372]	; (8003a60 <SaveToRO+0x1e8>)
 80038ec:	2001      	movs	r0, #1
 80038ee:	f00c fd55 	bl	801039c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80038f2:	485c      	ldr	r0, [pc, #368]	; (8003a64 <SaveToRO+0x1ec>)
 80038f4:	f00c fd24 	bl	8010340 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d111      	bne.n	8003920 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80038fc:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <SaveToRO+0x1f0>)
 80038fe:	6913      	ldr	r3, [r2, #16]
 8003900:	2101      	movs	r1, #1
 8003902:	438b      	bics	r3, r1
 8003904:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8003906:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <SaveToRO+0x208>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800390e:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0d0      	beq.n	80038b6 <SaveToRO+0x3e>
 8003914:	2316      	movs	r3, #22
 8003916:	469b      	mov	fp, r3
 8003918:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <SaveToRO+0x20c>)
 800391a:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800391c:	4698      	mov	r8, r3
 800391e:	e02a      	b.n	8003976 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 8003920:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <SaveToRO+0x204>)
 8003922:	69d8      	ldr	r0, [r3, #28]
 8003924:	b2c0      	uxtb	r0, r0
 8003926:	e7d3      	b.n	80038d0 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 8003928:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <SaveToRO+0x204>)
 800392a:	69d8      	ldr	r0, [r3, #28]
 800392c:	b2c0      	uxtb	r0, r0
 800392e:	e7cf      	b.n	80038d0 <SaveToRO+0x58>
 8003930:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003932:	42b4      	cmp	r4, r6
 8003934:	d017      	beq.n	8003966 <SaveToRO+0xee>
				if (array[i-1][0]) {
 8003936:	4643      	mov	r3, r8
 8003938:	5afb      	ldrh	r3, [r7, r3]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f8      	beq.n	8003930 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800393e:	8822      	ldrh	r2, [r4, #0]
 8003940:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <SaveToRO+0x1e8>)
 8003942:	18e9      	adds	r1, r5, r3
 8003944:	2300      	movs	r3, #0
 8003946:	2001      	movs	r0, #1
 8003948:	f00c fd28 	bl	801039c <HAL_FLASH_Program>
					add += 2;
 800394c:	3502      	adds	r5, #2
 800394e:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003950:	4844      	ldr	r0, [pc, #272]	; (8003a64 <SaveToRO+0x1ec>)
 8003952:	f00c fcf5 	bl	8010340 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8003956:	2800      	cmp	r0, #0
 8003958:	d1e6      	bne.n	8003928 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800395a:	4a43      	ldr	r2, [pc, #268]	; (8003a68 <SaveToRO+0x1f0>)
 800395c:	6913      	ldr	r3, [r2, #16]
 800395e:	2101      	movs	r1, #1
 8003960:	438b      	bics	r3, r1
 8003962:	6113      	str	r3, [r2, #16]
 8003964:	e7e4      	b.n	8003930 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 8003966:	464b      	mov	r3, r9
 8003968:	3301      	adds	r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4699      	mov	r9, r3
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <SaveToRO+0x208>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	454b      	cmp	r3, r9
 8003974:	d39f      	bcc.n	80038b6 <SaveToRO+0x3e>
 8003976:	465e      	mov	r6, fp
 8003978:	464b      	mov	r3, r9
 800397a:	435e      	muls	r6, r3
 800397c:	0034      	movs	r4, r6
 800397e:	3c16      	subs	r4, #22
 8003980:	4454      	add	r4, sl
 8003982:	4456      	add	r6, sl
				if (array[i-1][0]) {
 8003984:	1e5f      	subs	r7, r3, #1
 8003986:	465b      	mov	r3, fp
 8003988:	435f      	muls	r7, r3
 800398a:	e7d4      	b.n	8003936 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <SaveToRO+0x204>)
 800398e:	69d8      	ldr	r0, [r3, #28]
 8003990:	b2c0      	uxtb	r0, r0
 8003992:	e79d      	b.n	80038d0 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <SaveToRO+0x204>)
 8003996:	69d8      	ldr	r0, [r3, #28]
 8003998:	b2c0      	uxtb	r0, r0
 800399a:	e799      	b.n	80038d0 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800399c:	3501      	adds	r5, #1
 800399e:	b2ed      	uxtb	r5, r5
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <SaveToRO+0x1f8>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	d956      	bls.n	8003a56 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 80039a8:	9501      	str	r5, [sp, #4]
 80039aa:	00ab      	lsls	r3, r5, #2
 80039ac:	195b      	adds	r3, r3, r5
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4642      	mov	r2, r8
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f1      	beq.n	800399c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 80039b8:	23fe      	movs	r3, #254	; 0xfe
 80039ba:	aa02      	add	r2, sp, #8
 80039bc:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 80039be:	00a9      	lsls	r1, r5, #2
 80039c0:	1949      	adds	r1, r1, r5
 80039c2:	0089      	lsls	r1, r1, #2
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <SaveToRO+0x200>)
 80039c6:	469c      	mov	ip, r3
 80039c8:	4461      	add	r1, ip
 80039ca:	2214      	movs	r2, #20
 80039cc:	ab02      	add	r3, sp, #8
 80039ce:	1c58      	adds	r0, r3, #1
 80039d0:	f00f fa0d 	bl	8012dee <memcpy>
 80039d4:	2314      	movs	r3, #20
 80039d6:	469b      	mov	fp, r3
 80039d8:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 80039da:	ae02      	add	r6, sp, #8
 80039dc:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039de:	4f22      	ldr	r7, [pc, #136]	; (8003a68 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 80039e0:	5b32      	ldrh	r2, [r6, r4]
 80039e2:	2300      	movs	r3, #0
 80039e4:	0021      	movs	r1, r4
 80039e6:	2001      	movs	r0, #1
 80039e8:	f00c fcd8 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80039ec:	481d      	ldr	r0, [pc, #116]	; (8003a64 <SaveToRO+0x1ec>)
 80039ee:	f00c fca7 	bl	8010340 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1ca      	bne.n	800398c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2201      	movs	r2, #1
 80039fa:	4393      	bics	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 80039fe:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 8003a00:	455c      	cmp	r4, fp
 8003a02:	d1ed      	bne.n	80039e0 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003a04:	2700      	movs	r7, #0
 8003a06:	9a01      	ldr	r2, [sp, #4]
 8003a08:	0093      	lsls	r3, r2, #2
 8003a0a:	189e      	adds	r6, r3, r2
 8003a0c:	00b6      	lsls	r6, r6, #2
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <SaveToRO+0x200>)
 8003a10:	469a      	mov	sl, r3
 8003a12:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <SaveToRO+0x1f0>)
 8003a16:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003a18:	4653      	mov	r3, sl
 8003a1a:	68de      	ldr	r6, [r3, #12]
 8003a1c:	0030      	movs	r0, r6
 8003a1e:	f7fc fb7b 	bl	8000118 <strlen>
 8003a22:	3001      	adds	r0, #1
 8003a24:	0840      	lsrs	r0, r0, #1
 8003a26:	4287      	cmp	r7, r0
 8003a28:	d2b8      	bcs.n	800399c <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 8003a2a:	007b      	lsls	r3, r7, #1
 8003a2c:	5af2      	ldrh	r2, [r6, r3]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	0021      	movs	r1, r4
 8003a32:	2001      	movs	r0, #1
 8003a34:	f00c fcb2 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003a38:	480a      	ldr	r0, [pc, #40]	; (8003a64 <SaveToRO+0x1ec>)
 8003a3a:	f00c fc81 	bl	8010340 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d1a8      	bne.n	8003994 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a42:	465b      	mov	r3, fp
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2201      	movs	r2, #1
 8003a48:	4393      	bics	r3, r2
 8003a4a:	465a      	mov	r2, fp
 8003a4c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 8003a4e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003a50:	3701      	adds	r7, #1
 8003a52:	b2ff      	uxtb	r7, r7
 8003a54:	e7e0      	b.n	8003a18 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 8003a56:	f00c fc69 	bl	801032c <HAL_FLASH_Lock>
	return result;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e738      	b.n	80038d0 <SaveToRO+0x58>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	0801d800 	.word	0x0801d800
 8003a64:	0000c350 	.word	0x0000c350
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	200011c8 	.word	0x200011c8
 8003a70:	20001403 	.word	0x20001403
 8003a74:	0801dc00 	.word	0x0801dc00
 8003a78:	2000690c 	.word	0x2000690c
 8003a7c:	20006c88 	.word	0x20006c88
 8003a80:	2000001c 	.word	0x2000001c
 8003a84:	20000a30 	.word	0x20000a30

08003a88 <delSnipCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE delSnipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	0005      	movs	r5, r0
 8003a8e:	0010      	movs	r0, r2
	static const int8_t *pcMessageOK = ( int8_t * ) "Snippet was deleted. Type snip to view updated list\n\r";
	static const int8_t *pcMessageWrong = ( int8_t * ) "The Snippet number was not found\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	9303      	str	r3, [sp, #12]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	d101      	bne.n	8003a9c <delSnipCommand+0x14>
 8003a98:	b672      	cpsid	i
 8003a9a:	e7fe      	b.n	8003a9a <delSnipCommand+0x12>
	
	/* 1st parameter for Snippet index */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003a9c:	aa03      	add	r2, sp, #12
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f009 fe62 	bl	800d768 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003aa4:	f00e ff13 	bl	80128ce <atoi>
 8003aa8:	9001      	str	r0, [sp, #4]
 8003aaa:	b2c6      	uxtb	r6, r0
	
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003aac:	2e00      	cmp	r6, #0
 8003aae:	d003      	beq.n	8003ab8 <delSnipCommand+0x30>
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <delSnipCommand+0xc8>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	42b3      	cmp	r3, r6
 8003ab6:	d207      	bcs.n	8003ac8 <delSnipCommand+0x40>
	
	/* Respond to the command */
	if (result == BOS_OK)
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
	else
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003ab8:	2223      	movs	r2, #35	; 0x23
 8003aba:	4926      	ldr	r1, [pc, #152]	; (8003b54 <delSnipCommand+0xcc>)
 8003abc:	0028      	movs	r0, r5
 8003abe:	f00f f996 	bl	8012dee <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	b005      	add	sp, #20
 8003ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index-1].cond.conditionType = 0;
 8003ac8:	466b      	mov	r3, sp
 8003aca:	791a      	ldrb	r2, [r3, #4]
 8003acc:	3a01      	subs	r2, #1
 8003ace:	4822      	ldr	r0, [pc, #136]	; (8003b58 <delSnipCommand+0xd0>)
 8003ad0:	2314      	movs	r3, #20
 8003ad2:	4353      	muls	r3, r2
 8003ad4:	2700      	movs	r7, #0
 8003ad6:	541f      	strb	r7, [r3, r0]
		snippets[index-1].cond.mathOperator = 0;
 8003ad8:	18c4      	adds	r4, r0, r3
 8003ada:	7067      	strb	r7, [r4, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8003adc:	3302      	adds	r3, #2
 8003ade:	1818      	adds	r0, r3, r0
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	0039      	movs	r1, r7
 8003ae4:	f00f f98c 	bl	8012e00 <memset>
		snippets[index-1].state = false;
 8003ae8:	7427      	strb	r7, [r4, #16]
		free(snippets[index-1].cmd);
 8003aea:	68e0      	ldr	r0, [r4, #12]
 8003aec:	f00e ff3c 	bl	8012968 <free>
		snippets[index-1].cmd = NULL;
 8003af0:	60e7      	str	r7, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <delSnipCommand+0xc8>)
 8003af4:	781f      	ldrb	r7, [r3, #0]
 8003af6:	42be      	cmp	r6, r7
 8003af8:	d213      	bcs.n	8003b22 <delSnipCommand+0x9a>
 8003afa:	466b      	mov	r3, sp
 8003afc:	7919      	ldrb	r1, [r3, #4]
 8003afe:	2214      	movs	r2, #20
 8003b00:	0014      	movs	r4, r2
 8003b02:	434c      	muls	r4, r1
 8003b04:	4814      	ldr	r0, [pc, #80]	; (8003b58 <delSnipCommand+0xd0>)
 8003b06:	1824      	adds	r4, r4, r0
 8003b08:	1e7b      	subs	r3, r7, #1
 8003b0a:	1b9b      	subs	r3, r3, r6
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	185b      	adds	r3, r3, r1
 8003b10:	4353      	muls	r3, r2
 8003b12:	1880      	adds	r0, r0, r2
 8003b14:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 8003b16:	7823      	ldrb	r3, [r4, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10d      	bne.n	8003b38 <delSnipCommand+0xb0>
 8003b1c:	3414      	adds	r4, #20
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8003b1e:	42b4      	cmp	r4, r6
 8003b20:	d1f9      	bne.n	8003b16 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8003b22:	1e7b      	subs	r3, r7, #1
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <delSnipCommand+0xc8>)
 8003b26:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8003b28:	f7ff fea6 	bl	8003878 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003b2c:	2236      	movs	r2, #54	; 0x36
 8003b2e:	490b      	ldr	r1, [pc, #44]	; (8003b5c <delSnipCommand+0xd4>)
 8003b30:	0028      	movs	r0, r5
 8003b32:	f00f f95c 	bl	8012dee <memcpy>
 8003b36:	e7c4      	b.n	8003ac2 <delSnipCommand+0x3a>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8003b38:	2214      	movs	r2, #20
 8003b3a:	0021      	movs	r1, r4
 8003b3c:	0020      	movs	r0, r4
 8003b3e:	3814      	subs	r0, #20
 8003b40:	f00f f955 	bl	8012dee <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8003b44:	2214      	movs	r2, #20
 8003b46:	2100      	movs	r1, #0
 8003b48:	0020      	movs	r0, r4
 8003b4a:	f00f f959 	bl	8012e00 <memset>
 8003b4e:	e7e5      	b.n	8003b1c <delSnipCommand+0x94>
 8003b50:	20001403 	.word	0x20001403
 8003b54:	08017f28 	.word	0x08017f28
 8003b58:	2000690c 	.word	0x2000690c
 8003b5c:	08017ef0 	.word	0x08017ef0

08003b60 <pauseSnipCommand>:
{	
 8003b60:	b510      	push	{r4, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	0004      	movs	r4, r0
 8003b66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003b6c:	2c00      	cmp	r4, #0
 8003b6e:	d101      	bne.n	8003b74 <pauseSnipCommand+0x14>
 8003b70:	b672      	cpsid	i
 8003b72:	e7fe      	b.n	8003b72 <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003b74:	aa01      	add	r2, sp, #4
 8003b76:	2101      	movs	r1, #1
 8003b78:	f009 fdf6 	bl	800d768 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003b7c:	f00e fea7 	bl	80128ce <atoi>
 8003b80:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <pauseSnipCommand+0x2e>
 8003b86:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <pauseSnipCommand+0x60>)
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d207      	bcs.n	8003b9e <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003b8e:	2223      	movs	r2, #35	; 0x23
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <pauseSnipCommand+0x64>)
 8003b92:	0020      	movs	r0, r4
 8003b94:	f00f f92b 	bl	8012dee <memcpy>
}
 8003b98:	2000      	movs	r0, #0
 8003b9a:	b002      	add	sp, #8
 8003b9c:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8003b9e:	b2c0      	uxtb	r0, r0
 8003ba0:	3801      	subs	r0, #1
 8003ba2:	2314      	movs	r3, #20
 8003ba4:	4343      	muls	r3, r0
 8003ba6:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <pauseSnipCommand+0x68>)
 8003ba8:	18c0      	adds	r0, r0, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8003bae:	f7ff fe63 	bl	8003878 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003bb2:	2235      	movs	r2, #53	; 0x35
 8003bb4:	4905      	ldr	r1, [pc, #20]	; (8003bcc <pauseSnipCommand+0x6c>)
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	f00f f919 	bl	8012dee <memcpy>
 8003bbc:	e7ec      	b.n	8003b98 <pauseSnipCommand+0x38>
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	20001403 	.word	0x20001403
 8003bc4:	08017f28 	.word	0x08017f28
 8003bc8:	2000690c 	.word	0x2000690c
 8003bcc:	08018404 	.word	0x08018404

08003bd0 <actSnipCommand>:
{	
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	0004      	movs	r4, r0
 8003bd6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003bdc:	2c00      	cmp	r4, #0
 8003bde:	d101      	bne.n	8003be4 <actSnipCommand+0x14>
 8003be0:	b672      	cpsid	i
 8003be2:	e7fe      	b.n	8003be2 <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003be4:	aa01      	add	r2, sp, #4
 8003be6:	2101      	movs	r1, #1
 8003be8:	f009 fdbe 	bl	800d768 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003bec:	f00e fe6f 	bl	80128ce <atoi>
 8003bf0:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <actSnipCommand+0x2e>
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <actSnipCommand+0x60>)
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d207      	bcs.n	8003c0e <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003bfe:	2223      	movs	r2, #35	; 0x23
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <actSnipCommand+0x64>)
 8003c02:	0020      	movs	r0, r4
 8003c04:	f00f f8f3 	bl	8012dee <memcpy>
}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8003c0e:	b2c0      	uxtb	r0, r0
 8003c10:	3801      	subs	r0, #1
 8003c12:	2314      	movs	r3, #20
 8003c14:	4343      	muls	r3, r0
 8003c16:	4808      	ldr	r0, [pc, #32]	; (8003c38 <actSnipCommand+0x68>)
 8003c18:	18c0      	adds	r0, r0, r3
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8003c1e:	f7ff fe2b 	bl	8003878 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003c22:	2238      	movs	r2, #56	; 0x38
 8003c24:	4905      	ldr	r1, [pc, #20]	; (8003c3c <actSnipCommand+0x6c>)
 8003c26:	0020      	movs	r0, r4
 8003c28:	f00f f8e1 	bl	8012dee <memcpy>
 8003c2c:	e7ec      	b.n	8003c08 <actSnipCommand+0x38>
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20001403 	.word	0x20001403
 8003c34:	08017f28 	.word	0x08017f28
 8003c38:	2000690c 	.word	0x2000690c
 8003c3c:	08017c08 	.word	0x08017c08

08003c40 <ClearROtopology>:
{
 8003c40:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <ClearROtopology+0x20>)
 8003c44:	2100      	movs	r1, #0
 8003c46:	4807      	ldr	r0, [pc, #28]	; (8003c64 <ClearROtopology+0x24>)
 8003c48:	f00f f8da 	bl	8012e00 <memset>
	N = 1; myID = 0;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <ClearROtopology+0x28>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <ClearROtopology+0x2c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8003c58:	f7ff fe0e 	bl	8003878 <SaveToRO>
}
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	00000226 	.word	0x00000226
 8003c64:	20000a30 	.word	0x20000a30
 8003c68:	2000001c 	.word	0x2000001c
 8003c6c:	200011c8 	.word	0x200011c8

08003c70 <LoadROsnippets>:
{
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c72:	46de      	mov	lr, fp
 8003c74:	4657      	mov	r7, sl
 8003c76:	464e      	mov	r6, r9
 8003c78:	b5c0      	push	{r6, r7, lr}
 8003c7a:	b082      	sub	sp, #8
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8003c7c:	2032      	movs	r0, #50	; 0x32
 8003c7e:	f00e fe69 	bl	8012954 <malloc>
 8003c82:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003c84:	d100      	bne.n	8003c88 <LoadROsnippets+0x18>
 8003c86:	e071      	b.n	8003d6c <LoadROsnippets+0xfc>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <LoadROsnippets+0x100>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	20ff      	movs	r0, #255	; 0xff
 8003c8e:	2bfe      	cmp	r3, #254	; 0xfe
 8003c90:	d166      	bne.n	8003d60 <LoadROsnippets+0xf0>
 8003c92:	4e38      	ldr	r6, [pc, #224]	; (8003d74 <LoadROsnippets+0x104>)
 8003c94:	3b9a      	subs	r3, #154	; 0x9a
 8003c96:	469b      	mov	fp, r3
 8003c98:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8003c9a:	4d35      	ldr	r5, [pc, #212]	; (8003d70 <LoadROsnippets+0x100>)
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003c9c:	1c7b      	adds	r3, r7, #1
 8003c9e:	9301      	str	r3, [sp, #4]
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <LoadROsnippets+0x108>)
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	e023      	b.n	8003cee <LoadROsnippets+0x7e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003ca6:	2400      	movs	r4, #0
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	3b01      	subs	r3, #1
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <LoadROsnippets+0x46>
 8003cb2:	3401      	adds	r4, #1
 8003cb4:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char *) malloc(i);
 8003cb6:	0020      	movs	r0, r4
 8003cb8:	f00e fe4c 	bl	8012954 <malloc>
 8003cbc:	4653      	mov	r3, sl
 8003cbe:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d03f      	beq.n	8003d44 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8003cc4:	0022      	movs	r2, r4
 8003cc6:	0039      	movs	r1, r7
 8003cc8:	f00f f891 	bl	8012dee <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003ccc:	464b      	mov	r3, r9
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	464a      	mov	r2, r9
 8003cd4:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8003cd6:	0022      	movs	r2, r4
 8003cd8:	2100      	movs	r1, #0
 8003cda:	0038      	movs	r0, r7
 8003cdc:	f00f f890 	bl	8012e00 <memset>
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003ce0:	9b00      	ldr	r3, [sp, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce6:	d137      	bne.n	8003d58 <LoadROsnippets+0xe8>
 8003ce8:	3614      	adds	r6, #20
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8003cea:	455e      	cmp	r6, fp
 8003cec:	d034      	beq.n	8003d58 <LoadROsnippets+0xe8>
 8003cee:	0028      	movs	r0, r5
 8003cf0:	3014      	adds	r0, #20
{
 8003cf2:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8003cf4:	1b79      	subs	r1, r7, r5
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	54ca      	strb	r2, [r1, r3]
 8003cfa:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003cfc:	4283      	cmp	r3, r0
 8003cfe:	d1fa      	bne.n	8003cf6 <LoadROsnippets+0x86>
 8003d00:	3514      	adds	r5, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003d02:	46b2      	mov	sl, r6
 8003d04:	2214      	movs	r2, #20
 8003d06:	9901      	ldr	r1, [sp, #4]
 8003d08:	0030      	movs	r0, r6
 8003d0a:	f00f f870 	bl	8012dee <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003d0e:	2214      	movs	r2, #20
 8003d10:	2100      	movs	r1, #0
 8003d12:	0038      	movs	r0, r7
 8003d14:	f00f f874 	bl	8012e00 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003d18:	9500      	str	r5, [sp, #0]
 8003d1a:	782a      	ldrb	r2, [r5, #0]
 8003d1c:	1c93      	adds	r3, r2, #2
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d9c0      	bls.n	8003ca6 <LoadROsnippets+0x36>
 8003d24:	0039      	movs	r1, r7
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003d26:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8003d28:	700a      	strb	r2, [r1, #0]
			++currentAdd; ++i;
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	3401      	adds	r4, #1
 8003d2e:	b2e4      	uxtb	r4, r4
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003d30:	9500      	str	r5, [sp, #0]
 8003d32:	782a      	ldrb	r2, [r5, #0]
 8003d34:	1c93      	adds	r3, r2, #2
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d9b5      	bls.n	8003ca8 <LoadROsnippets+0x38>
 8003d3c:	3101      	adds	r1, #1
 8003d3e:	2c32      	cmp	r4, #50	; 0x32
 8003d40:	d1f2      	bne.n	8003d28 <LoadROsnippets+0xb8>
 8003d42:	e7b1      	b.n	8003ca8 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8003d44:	2214      	movs	r2, #20
 8003d46:	2100      	movs	r1, #0
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f00f f859 	bl	8012e00 <memset>
			free(snipBuffer);			
 8003d4e:	0038      	movs	r0, r7
 8003d50:	f00e fe0a 	bl	8012968 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003d54:	200e      	movs	r0, #14
 8003d56:	e003      	b.n	8003d60 <LoadROsnippets+0xf0>
	free(snipBuffer);
 8003d58:	0038      	movs	r0, r7
 8003d5a:	f00e fe05 	bl	8012968 <free>
	return BOS_OK;
 8003d5e:	2000      	movs	r0, #0
}
 8003d60:	b002      	add	sp, #8
 8003d62:	bc1c      	pop	{r2, r3, r4}
 8003d64:	4691      	mov	r9, r2
 8003d66:	469a      	mov	sl, r3
 8003d68:	46a3      	mov	fp, r4
 8003d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003d6c:	20fb      	movs	r0, #251	; 0xfb
 8003d6e:	e7f7      	b.n	8003d60 <LoadROsnippets+0xf0>
 8003d70:	0801dc00 	.word	0x0801dc00
 8003d74:	2000690c 	.word	0x2000690c
 8003d78:	20001403 	.word	0x20001403

08003d7c <LoadROtopology>:
{
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <LoadROtopology+0x74>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
	if (temp == 0xFFFF)				// Memory has been erased
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <LoadROtopology+0x78>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d025      	beq.n	8003dd6 <LoadROtopology+0x5a>
		N = (uint8_t) (temp>>8);
 8003d8a:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8003d8c:	d02b      	beq.n	8003de6 <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 8003d8e:	491a      	ldr	r1, [pc, #104]	; (8003df8 <LoadROtopology+0x7c>)
 8003d90:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <LoadROtopology+0x80>)
 8003d94:	7013      	strb	r3, [r2, #0]
		for(uint8_t i=1 ; i<=N ; i++)
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <LoadROtopology+0x7c>)
 8003d98:	781d      	ldrb	r5, [r3, #0]
	return result;
 8003d9a:	2000      	movs	r0, #0
		for(uint8_t i=1 ; i<=N ; i++)
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	d019      	beq.n	8003dd4 <LoadROtopology+0x58>
 8003da0:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8003da2:	2302      	movs	r3, #2
 8003da4:	2716      	movs	r7, #22
 8003da6:	4e16      	ldr	r6, [pc, #88]	; (8003e00 <LoadROtopology+0x84>)
 8003da8:	003a      	movs	r2, r7
 8003daa:	4362      	muls	r2, r4
 8003dac:	3a16      	subs	r2, #22
 8003dae:	1992      	adds	r2, r2, r6
 8003db0:	0018      	movs	r0, r3
 8003db2:	3016      	adds	r0, #22
 8003db4:	b280      	uxth	r0, r0
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8003db6:	490e      	ldr	r1, [pc, #56]	; (8003df0 <LoadROtopology+0x74>)
 8003db8:	1859      	adds	r1, r3, r1
 8003dba:	8809      	ldrh	r1, [r1, #0]
 8003dbc:	8011      	strh	r1, [r2, #0]
				add += 2;			
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3202      	adds	r2, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	d1f6      	bne.n	8003db6 <LoadROtopology+0x3a>
		for(uint8_t i=1 ; i<=N ; i++)
 8003dc8:	3401      	adds	r4, #1
 8003dca:	b2e4      	uxtb	r4, r4
				add += 2;			
 8003dcc:	0003      	movs	r3, r0
		for(uint8_t i=1 ; i<=N ; i++)
 8003dce:	42ac      	cmp	r4, r5
 8003dd0:	d9ea      	bls.n	8003da8 <LoadROtopology+0x2c>
	return result;
 8003dd2:	2000      	movs	r0, #0
}
 8003dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <LoadROtopology+0x7c>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <LoadROtopology+0x80>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003de2:	20fa      	movs	r0, #250	; 0xfa
 8003de4:	e7f6      	b.n	8003dd4 <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <LoadROtopology+0x7c>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	7011      	strb	r1, [r2, #0]
 8003dec:	e7d1      	b.n	8003d92 <LoadROtopology+0x16>
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	0801d800 	.word	0x0801d800
 8003df4:	0000ffff 	.word	0x0000ffff
 8003df8:	2000001c 	.word	0x2000001c
 8003dfc:	200011c8 	.word	0x200011c8
 8003e00:	20000a30 	.word	0x20000a30

08003e04 <SaveEEportsDir>:
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b083      	sub	sp, #12
	for(uint8_t i=1 ; i<=N ; i++)
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <SaveEEportsDir+0x4c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <SaveEEportsDir+0x42>
 8003e10:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003e12:	2300      	movs	r3, #0
 8003e14:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8003e16:	4e0f      	ldr	r6, [pc, #60]	; (8003e54 <SaveEEportsDir+0x50>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003e18:	4f0d      	ldr	r7, [pc, #52]	; (8003e50 <SaveEEportsDir+0x4c>)
 8003e1a:	e008      	b.n	8003e2e <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003e1c:	1c60      	adds	r0, r4, #1
 8003e1e:	f006 fde1 	bl	800a9e4 <EE_WriteVariable>
 8003e22:	e00a      	b.n	8003e3a <SaveEEportsDir+0x36>
	for(uint8_t i=1 ; i<=N ; i++)
 8003e24:	3401      	adds	r4, #1
 8003e26:	b2e4      	uxtb	r4, r4
 8003e28:	783b      	ldrb	r3, [r7, #0]
 8003e2a:	42a3      	cmp	r3, r4
 8003e2c:	d30d      	bcc.n	8003e4a <SaveEEportsDir+0x46>
		if (arrayPortsDir[i-1])
 8003e2e:	0025      	movs	r5, r4
 8003e30:	1e63      	subs	r3, r4, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	5b99      	ldrh	r1, [r3, r6]
 8003e36:	2900      	cmp	r1, #0
 8003e38:	d1f0      	bne.n	8003e1c <SaveEEportsDir+0x18>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003e3a:	3502      	adds	r5, #2
 8003e3c:	2d1b      	cmp	r5, #27
 8003e3e:	ddf1      	ble.n	8003e24 <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8003e40:	230a      	movs	r3, #10
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	e7ee      	b.n	8003e24 <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK; 
 8003e46:	2300      	movs	r3, #0
 8003e48:	9301      	str	r3, [sp, #4]
}
 8003e4a:	9801      	ldr	r0, [sp, #4]
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e50:	2000001c 	.word	0x2000001c
 8003e54:	20000c58 	.word	0x20000c58

08003e58 <ClearEEportsDir>:
{
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	b083      	sub	sp, #12
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8003e5c:	2232      	movs	r2, #50	; 0x32
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4813      	ldr	r0, [pc, #76]	; (8003eb0 <ClearEEportsDir+0x58>)
 8003e62:	f00e ffcd 	bl	8012e00 <memset>
	for(uint8_t i=1 ; i<=N ; i++)
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <ClearEEportsDir+0x5c>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01a      	beq.n	8003ea4 <ClearEEportsDir+0x4c>
 8003e6e:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003e70:	2300      	movs	r3, #0
 8003e72:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8003e74:	4e0e      	ldr	r6, [pc, #56]	; (8003eb0 <ClearEEportsDir+0x58>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003e76:	4f0f      	ldr	r7, [pc, #60]	; (8003eb4 <ClearEEportsDir+0x5c>)
 8003e78:	e008      	b.n	8003e8c <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003e7a:	1c60      	adds	r0, r4, #1
 8003e7c:	f006 fdb2 	bl	800a9e4 <EE_WriteVariable>
 8003e80:	e00a      	b.n	8003e98 <ClearEEportsDir+0x40>
	for(uint8_t i=1 ; i<=N ; i++)
 8003e82:	3401      	adds	r4, #1
 8003e84:	b2e4      	uxtb	r4, r4
 8003e86:	783b      	ldrb	r3, [r7, #0]
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d30d      	bcc.n	8003ea8 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i-1])
 8003e8c:	0025      	movs	r5, r4
 8003e8e:	1e63      	subs	r3, r4, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	5b99      	ldrh	r1, [r3, r6]
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d1f0      	bne.n	8003e7a <ClearEEportsDir+0x22>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003e98:	3502      	adds	r5, #2
 8003e9a:	2d1b      	cmp	r5, #27
 8003e9c:	ddf1      	ble.n	8003e82 <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	e7ee      	b.n	8003e82 <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK; 
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9301      	str	r3, [sp, #4]
}
 8003ea8:	9801      	ldr	r0, [sp, #4]
 8003eaa:	b003      	add	sp, #12
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	20000c58 	.word	0x20000c58
 8003eb4:	2000001c 	.word	0x2000001c

08003eb8 <LoadEEportsDir>:
{
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(uint8_t i=1 ; i<=N ; i++)
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <LoadEEportsDir+0x40>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8003ebe:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d017      	beq.n	8003ef4 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003ec4:	490d      	ldr	r1, [pc, #52]	; (8003efc <LoadEEportsDir+0x44>)
 8003ec6:	2002      	movs	r0, #2
 8003ec8:	f006 fd5c 	bl	800a984 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8003ecc:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003ece:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003ed0:	4f09      	ldr	r7, [pc, #36]	; (8003ef8 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003ed2:	4e0a      	ldr	r6, [pc, #40]	; (8003efc <LoadEEportsDir+0x44>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	b2e4      	uxtb	r4, r4
 8003ed8:	783b      	ldrb	r3, [r7, #0]
 8003eda:	42a3      	cmp	r3, r4
 8003edc:	d30a      	bcc.n	8003ef4 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003ede:	1e61      	subs	r1, r4, #1
 8003ee0:	0049      	lsls	r1, r1, #1
 8003ee2:	1871      	adds	r1, r6, r1
 8003ee4:	1c60      	adds	r0, r4, #1
 8003ee6:	f006 fd4d 	bl	800a984 <EE_ReadVariable>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003eea:	1ca3      	adds	r3, r4, #2
 8003eec:	2b1b      	cmp	r3, #27
 8003eee:	ddf1      	ble.n	8003ed4 <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003ef0:	250a      	movs	r5, #10
 8003ef2:	e7ef      	b.n	8003ed4 <LoadEEportsDir+0x1c>
}
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef8:	2000001c 	.word	0x2000001c
 8003efc:	20000c58 	.word	0x20000c58

08003f00 <SaveEEalias>:
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	46d6      	mov	lr, sl
 8003f04:	464f      	mov	r7, r9
 8003f06:	4646      	mov	r6, r8
 8003f08:	b5c0      	push	{r6, r7, lr}
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003f0a:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4698      	mov	r8, r3
		if (moduleAlias[i][0]) 				
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <SaveEEalias+0x7c>)
 8003f12:	469a      	mov	sl, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <SaveEEalias+0x80>)
 8003f16:	4699      	mov	r9, r3
 8003f18:	e005      	b.n	8003f26 <SaveEEalias+0x26>
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	b2f6      	uxtb	r6, r6
 8003f1e:	464b      	mov	r3, r9
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	42b3      	cmp	r3, r6
 8003f24:	d324      	bcc.n	8003f70 <SaveEEalias+0x70>
		if (moduleAlias[i][0]) 				
 8003f26:	00b3      	lsls	r3, r6, #2
 8003f28:	199b      	adds	r3, r3, r6
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f2      	beq.n	8003f1a <SaveEEalias+0x1a>
 8003f34:	00b5      	lsls	r5, r6, #2
 8003f36:	19ad      	adds	r5, r5, r6
 8003f38:	006d      	lsls	r5, r5, #1
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <SaveEEalias+0x7c>)
 8003f3c:	469c      	mov	ip, r3
 8003f3e:	4465      	add	r5, ip
 8003f40:	4644      	mov	r4, r8
 8003f42:	341c      	adds	r4, #28
 8003f44:	b2a4      	uxth	r4, r4
 8003f46:	4647      	mov	r7, r8
 8003f48:	3721      	adds	r7, #33	; 0x21
 8003f4a:	b2bf      	uxth	r7, r7
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003f4c:	782b      	ldrb	r3, [r5, #0]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	7869      	ldrb	r1, [r5, #1]
 8003f52:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8003f54:	b289      	uxth	r1, r1
 8003f56:	0020      	movs	r0, r4
 8003f58:	f006 fd44 	bl	800a9e4 <EE_WriteVariable>
 8003f5c:	3502      	adds	r5, #2
 8003f5e:	3401      	adds	r4, #1
 8003f60:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003f62:	42bc      	cmp	r4, r7
 8003f64:	d1f2      	bne.n	8003f4c <SaveEEalias+0x4c>
 8003f66:	4643      	mov	r3, r8
 8003f68:	3305      	adds	r3, #5
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	e7d4      	b.n	8003f1a <SaveEEalias+0x1a>
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	bc1c      	pop	{r2, r3, r4}
 8003f74:	4690      	mov	r8, r2
 8003f76:	4699      	mov	r9, r3
 8003f78:	46a2      	mov	sl, r4
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7c:	200010c4 	.word	0x200010c4
 8003f80:	2000001c 	.word	0x2000001c

08003f84 <LoadEEalias>:
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	46de      	mov	lr, fp
 8003f88:	4657      	mov	r7, sl
 8003f8a:	464e      	mov	r6, r9
 8003f8c:	4645      	mov	r5, r8
 8003f8e:	b5e0      	push	{r5, r6, r7, lr}
 8003f90:	b083      	sub	sp, #12
	uint16_t add = 0, temp = 0;
 8003f92:	466b      	mov	r3, sp
 8003f94:	2200      	movs	r2, #0
 8003f96:	80da      	strh	r2, [r3, #6]
 8003f98:	241c      	movs	r4, #28
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003f9a:	2700      	movs	r7, #0
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <LoadEEalias+0x7c>)
 8003f9e:	469a      	mov	sl, r3
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8003fa0:	469b      	mov	fp, r3
 8003fa2:	e00c      	b.n	8003fbe <LoadEEalias+0x3a>
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	444b      	add	r3, r9
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	445b      	add	r3, fp
 8003fae:	2200      	movs	r2, #0
 8003fb0:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003fb2:	3701      	adds	r7, #1
 8003fb4:	b2ff      	uxtb	r7, r7
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <LoadEEalias+0x80>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	42bb      	cmp	r3, r7
 8003fbc:	d317      	bcc.n	8003fee <LoadEEalias+0x6a>
 8003fbe:	00bd      	lsls	r5, r7, #2
 8003fc0:	19ed      	adds	r5, r5, r7
 8003fc2:	006d      	lsls	r5, r5, #1
 8003fc4:	4455      	add	r5, sl
 8003fc6:	1d63      	adds	r3, r4, #5
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003fcc:	466b      	mov	r3, sp
 8003fce:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003fd0:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003fd2:	0031      	movs	r1, r6
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f006 fcd5 	bl	800a984 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8003fda:	8833      	ldrh	r3, [r6, #0]
 8003fdc:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	702b      	strb	r3, [r5, #0]
 8003fe2:	3401      	adds	r4, #1
 8003fe4:	b2a4      	uxth	r4, r4
 8003fe6:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003fe8:	45a0      	cmp	r8, r4
 8003fea:	d1f2      	bne.n	8003fd2 <LoadEEalias+0x4e>
 8003fec:	e7da      	b.n	8003fa4 <LoadEEalias+0x20>
}
 8003fee:	2000      	movs	r0, #0
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ff4:	4690      	mov	r8, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	46a2      	mov	sl, r4
 8003ffa:	46ab      	mov	fp, r5
 8003ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	200010c4 	.word	0x200010c4
 8004004:	2000001c 	.word	0x2000001c

08004008 <LoadEEgroup>:
{
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	46d6      	mov	lr, sl
 800400c:	464f      	mov	r7, r9
 800400e:	4646      	mov	r6, r8
 8004010:	b5c0      	push	{r6, r7, lr}
 8004012:	b082      	sub	sp, #8
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8004014:	466b      	mov	r3, sp
 8004016:	2200      	movs	r2, #0
 8004018:	80da      	strh	r2, [r3, #6]
	for(i=0 ; i<N ; i++)			// N modules
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <LoadEEgroup+0x9c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01d      	beq.n	800405e <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8004022:	2500      	movs	r5, #0
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8004024:	4e20      	ldr	r6, [pc, #128]	; (80040a8 <LoadEEgroup+0xa0>)
	for(i=0 ; i<N ; i++)			// N modules
 8004026:	4c1f      	ldr	r4, [pc, #124]	; (80040a4 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8004028:	b2e9      	uxtb	r1, r5
 800402a:	0049      	lsls	r1, r1, #1
 800402c:	1871      	adds	r1, r6, r1
 800402e:	0028      	movs	r0, r5
 8004030:	30cb      	adds	r0, #203	; 0xcb
 8004032:	b280      	uxth	r0, r0
 8004034:	f006 fca6 	bl	800a984 <EE_ReadVariable>
		add++;
 8004038:	3501      	adds	r5, #1
 800403a:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 800403c:	7822      	ldrb	r2, [r4, #0]
 800403e:	b2eb      	uxtb	r3, r5
 8004040:	429a      	cmp	r2, r3
 8004042:	d8f1      	bhi.n	8004028 <LoadEEgroup+0x20>
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <LoadEEgroup+0xa4>)
 8004046:	4699      	mov	r9, r3
 8004048:	002c      	movs	r4, r5
 800404a:	3499      	adds	r4, #153	; 0x99
 800404c:	b2a4      	uxth	r4, r4
 800404e:	35cb      	adds	r5, #203	; 0xcb
 8004050:	b2ab      	uxth	r3, r5
 8004052:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8004054:	466b      	mov	r3, sp
 8004056:	1d9e      	adds	r6, r3, #6
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8004058:	2300      	movs	r3, #0
 800405a:	469a      	mov	sl, r3
 800405c:	e009      	b.n	8004072 <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800405e:	2500      	movs	r5, #0
 8004060:	e7f0      	b.n	8004044 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8004062:	464b      	mov	r3, r9
 8004064:	4652      	mov	r2, sl
 8004066:	725a      	strb	r2, [r3, #9]
 8004068:	230a      	movs	r3, #10
 800406a:	469c      	mov	ip, r3
 800406c:	44e1      	add	r9, ip
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 800406e:	4544      	cmp	r4, r8
 8004070:	d010      	beq.n	8004094 <LoadEEgroup+0x8c>
 8004072:	1d67      	adds	r7, r4, #5
 8004074:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8004076:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8004078:	0031      	movs	r1, r6
 800407a:	0020      	movs	r0, r4
 800407c:	f006 fc82 	bl	800a984 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8004080:	8833      	ldrh	r3, [r6, #0]
 8004082:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	702b      	strb	r3, [r5, #0]
 8004088:	3401      	adds	r4, #1
 800408a:	b2a4      	uxth	r4, r4
 800408c:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800408e:	42bc      	cmp	r4, r7
 8004090:	d1f2      	bne.n	8004078 <LoadEEgroup+0x70>
 8004092:	e7e6      	b.n	8004062 <LoadEEgroup+0x5a>
}
 8004094:	2000      	movs	r0, #0
 8004096:	b002      	add	sp, #8
 8004098:	bc1c      	pop	{r2, r3, r4}
 800409a:	4690      	mov	r8, r2
 800409c:	4699      	mov	r9, r3
 800409e:	46a2      	mov	sl, r4
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	2000001c 	.word	0x2000001c
 80040a8:	20000f08 	.word	0x20000f08
 80040ac:	20000ea4 	.word	0x20000ea4

080040b0 <SaveEEstreams>:
{
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	46de      	mov	lr, fp
 80040b4:	4657      	mov	r7, sl
 80040b6:	464e      	mov	r6, r9
 80040b8:	4645      	mov	r5, r8
 80040ba:	b5e0      	push	{r5, r6, r7, lr}
 80040bc:	000f      	movs	r7, r1
 80040be:	0016      	movs	r6, r2
 80040c0:	4699      	mov	r9, r3
 80040c2:	ab0a      	add	r3, sp, #40	; 0x28
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	469b      	mov	fp, r3
 80040c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80040ca:	781d      	ldrb	r5, [r3, #0]
 80040cc:	ab0c      	add	r3, sp, #48	; 0x30
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	469a      	mov	sl, r3
 80040d2:	ab0d      	add	r3, sp, #52	; 0x34
 80040d4:	781c      	ldrb	r4, [r3, #0]
 80040d6:	ab0e      	add	r3, sp, #56	; 0x38
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	4698      	mov	r8, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 80040dc:	b281      	uxth	r1, r0
 80040de:	20e4      	movs	r0, #228	; 0xe4
 80040e0:	f006 fc80 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 80040e4:	0a39      	lsrs	r1, r7, #8
 80040e6:	b289      	uxth	r1, r1
 80040e8:	20e5      	movs	r0, #229	; 0xe5
 80040ea:	f006 fc7b 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 80040ee:	b2b9      	uxth	r1, r7
 80040f0:	20e6      	movs	r0, #230	; 0xe6
 80040f2:	f006 fc77 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 80040f6:	0a31      	lsrs	r1, r6, #8
 80040f8:	b289      	uxth	r1, r1
 80040fa:	20e7      	movs	r0, #231	; 0xe7
 80040fc:	f006 fc72 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8004100:	b2b1      	uxth	r1, r6
 8004102:	20e8      	movs	r0, #232	; 0xe8
 8004104:	f006 fc6e 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8004108:	464b      	mov	r3, r9
 800410a:	0219      	lsls	r1, r3, #8
 800410c:	4459      	add	r1, fp
 800410e:	b289      	uxth	r1, r1
 8004110:	20e9      	movs	r0, #233	; 0xe9
 8004112:	f006 fc67 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8004116:	022d      	lsls	r5, r5, #8
 8004118:	4455      	add	r5, sl
 800411a:	b2a9      	uxth	r1, r5
 800411c:	20ea      	movs	r0, #234	; 0xea
 800411e:	f006 fc61 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8004122:	0224      	lsls	r4, r4, #8
 8004124:	4444      	add	r4, r8
 8004126:	b2a1      	uxth	r1, r4
 8004128:	20eb      	movs	r0, #235	; 0xeb
 800412a:	f006 fc5b 	bl	800a9e4 <EE_WriteVariable>
}
 800412e:	2000      	movs	r0, #0
 8004130:	bc3c      	pop	{r2, r3, r4, r5}
 8004132:	4690      	mov	r8, r2
 8004134:	4699      	mov	r9, r3
 8004136:	46a2      	mov	sl, r4
 8004138:	46ab      	mov	fp, r5
 800413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800413c <LoadEEparams>:
{
 800413c:	b510      	push	{r4, lr}
 800413e:	b082      	sub	sp, #8
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8004140:	208a      	movs	r0, #138	; 0x8a
 8004142:	466b      	mov	r3, sp
 8004144:	1d99      	adds	r1, r3, #6
 8004146:	0040      	lsls	r0, r0, #1
 8004148:	f006 fc1c 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 800414c:	2800      	cmp	r0, #0
 800414e:	d000      	beq.n	8004152 <LoadEEparams+0x16>
 8004150:	e064      	b.n	800421c <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8004152:	466b      	mov	r3, sp
 8004154:	3306      	adds	r3, #6
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	4a49      	ldr	r2, [pc, #292]	; (8004280 <LoadEEparams+0x144>)
 800415a:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	71d3      	strb	r3, [r2, #7]
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8004160:	2016      	movs	r0, #22
 8004162:	466b      	mov	r3, sp
 8004164:	1d99      	adds	r1, r3, #6
 8004166:	30ff      	adds	r0, #255	; 0xff
 8004168:	f006 fc0c 	bl	800a984 <EE_ReadVariable>
	if (!status1) 
 800416c:	2800      	cmp	r0, #0
 800416e:	d15c      	bne.n	800422a <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8004170:	466b      	mov	r3, sp
 8004172:	88da      	ldrh	r2, [r3, #6]
 8004174:	4b42      	ldr	r3, [pc, #264]	; (8004280 <LoadEEparams+0x144>)
 8004176:	801a      	strh	r2, [r3, #0]
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8004178:	208b      	movs	r0, #139	; 0x8b
 800417a:	466b      	mov	r3, sp
 800417c:	1d99      	adds	r1, r3, #6
 800417e:	0040      	lsls	r0, r0, #1
 8004180:	f006 fc00 	bl	800a984 <EE_ReadVariable>
	if (!status1) 
 8004184:	2800      	cmp	r0, #0
 8004186:	d155      	bne.n	8004234 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 8004188:	466b      	mov	r3, sp
 800418a:	88da      	ldrh	r2, [r3, #6]
 800418c:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <LoadEEparams+0x144>)
 800418e:	805a      	strh	r2, [r3, #2]
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8004190:	2018      	movs	r0, #24
 8004192:	466b      	mov	r3, sp
 8004194:	1d99      	adds	r1, r3, #6
 8004196:	30ff      	adds	r0, #255	; 0xff
 8004198:	f006 fbf4 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 800419c:	2800      	cmp	r0, #0
 800419e:	d14e      	bne.n	800423e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 80041a0:	466b      	mov	r3, sp
 80041a2:	3306      	adds	r3, #6
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4a36      	ldr	r2, [pc, #216]	; (8004280 <LoadEEparams+0x144>)
 80041a8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	7153      	strb	r3, [r2, #5]
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 80041ae:	208c      	movs	r0, #140	; 0x8c
 80041b0:	466b      	mov	r3, sp
 80041b2:	1d99      	adds	r1, r3, #6
 80041b4:	0040      	lsls	r0, r0, #1
 80041b6:	f006 fbe5 	bl	800a984 <EE_ReadVariable>
 80041ba:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 80041bc:	201a      	movs	r0, #26
 80041be:	a901      	add	r1, sp, #4
 80041c0:	30ff      	adds	r0, #255	; 0xff
 80041c2:	f006 fbdf 	bl	800a984 <EE_ReadVariable>
	if (!status1 && !status2) 
 80041c6:	4304      	orrs	r4, r0
 80041c8:	b2a4      	uxth	r4, r4
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	d13e      	bne.n	800424c <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 80041ce:	ab01      	add	r3, sp, #4
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	466a      	mov	r2, sp
 80041d6:	3206      	adds	r2, #6
 80041d8:	8812      	ldrh	r2, [r2, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	4a28      	ldr	r2, [pc, #160]	; (8004280 <LoadEEparams+0x144>)
 80041de:	6093      	str	r3, [r2, #8]
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 80041e0:	208d      	movs	r0, #141	; 0x8d
 80041e2:	466b      	mov	r3, sp
 80041e4:	1d99      	adds	r1, r3, #6
 80041e6:	0040      	lsls	r0, r0, #1
 80041e8:	f006 fbcc 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d13b      	bne.n	8004268 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 80041f0:	466b      	mov	r3, sp
 80041f2:	3306      	adds	r3, #6
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	4a22      	ldr	r2, [pc, #136]	; (8004280 <LoadEEparams+0x144>)
 80041f8:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	7353      	strb	r3, [r2, #13]
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 80041fe:	201c      	movs	r0, #28
 8004200:	466b      	mov	r3, sp
 8004202:	1d99      	adds	r1, r3, #6
 8004204:	30ff      	adds	r0, #255	; 0xff
 8004206:	f006 fbbd 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 800420a:	2800      	cmp	r0, #0
 800420c:	d032      	beq.n	8004274 <LoadEEparams+0x138>
		BOS.disableCLI = BOS_default.disableCLI;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <LoadEEparams+0x148>)
 8004210:	7eda      	ldrb	r2, [r3, #27]
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <LoadEEparams+0x144>)
 8004214:	76da      	strb	r2, [r3, #27]
}
 8004216:	2000      	movs	r0, #0
 8004218:	b002      	add	sp, #8
 800421a:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <LoadEEparams+0x144>)
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <LoadEEparams+0x148>)
 8004220:	7991      	ldrb	r1, [r2, #6]
 8004222:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8004224:	79d2      	ldrb	r2, [r2, #7]
 8004226:	71da      	strb	r2, [r3, #7]
 8004228:	e79a      	b.n	8004160 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <LoadEEparams+0x148>)
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <LoadEEparams+0x144>)
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	e7a1      	b.n	8004178 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <LoadEEparams+0x148>)
 8004236:	885a      	ldrh	r2, [r3, #2]
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <LoadEEparams+0x144>)
 800423a:	805a      	strh	r2, [r3, #2]
 800423c:	e7a8      	b.n	8004190 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <LoadEEparams+0x144>)
 8004240:	4a10      	ldr	r2, [pc, #64]	; (8004284 <LoadEEparams+0x148>)
 8004242:	7911      	ldrb	r1, [r2, #4]
 8004244:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8004246:	7952      	ldrb	r2, [r2, #5]
 8004248:	715a      	strb	r2, [r3, #5]
 800424a:	e7b0      	b.n	80041ae <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <LoadEEparams+0x14c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <LoadEEparams+0x144>)
 8004256:	22e1      	movs	r2, #225	; 0xe1
 8004258:	0252      	lsls	r2, r2, #9
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	e7c0      	b.n	80041e0 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <LoadEEparams+0x148>)
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <LoadEEparams+0x144>)
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	e7bb      	b.n	80041e0 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <LoadEEparams+0x144>)
 800426a:	2218      	movs	r2, #24
 800426c:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 800426e:	2200      	movs	r2, #0
 8004270:	731a      	strb	r2, [r3, #12]
 8004272:	e7c4      	b.n	80041fe <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 8004274:	466b      	mov	r3, sp
 8004276:	88da      	ldrh	r2, [r3, #6]
 8004278:	4b01      	ldr	r3, [pc, #4]	; (8004280 <LoadEEparams+0x144>)
 800427a:	76da      	strb	r2, [r3, #27]
 800427c:	e7cb      	b.n	8004216 <LoadEEparams+0xda>
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	20006894 	.word	0x20006894
 8004284:	20000000 	.word	0x20000000
 8004288:	20000a2e 	.word	0x20000a2e

0800428c <SaveEEparams>:
{
 800428c:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 800428e:	4c1a      	ldr	r4, [pc, #104]	; (80042f8 <SaveEEparams+0x6c>)
 8004290:	79e3      	ldrb	r3, [r4, #7]
 8004292:	015b      	lsls	r3, r3, #5
 8004294:	79a1      	ldrb	r1, [r4, #6]
 8004296:	4319      	orrs	r1, r3
 8004298:	208a      	movs	r0, #138	; 0x8a
 800429a:	0040      	lsls	r0, r0, #1
 800429c:	f006 fba2 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80042a0:	8821      	ldrh	r1, [r4, #0]
 80042a2:	2016      	movs	r0, #22
 80042a4:	30ff      	adds	r0, #255	; 0xff
 80042a6:	f006 fb9d 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 80042aa:	8861      	ldrh	r1, [r4, #2]
 80042ac:	208b      	movs	r0, #139	; 0x8b
 80042ae:	0040      	lsls	r0, r0, #1
 80042b0:	f006 fb98 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 80042b4:	7963      	ldrb	r3, [r4, #5]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	7b21      	ldrb	r1, [r4, #12]
 80042ba:	4319      	orrs	r1, r3
 80042bc:	2018      	movs	r0, #24
 80042be:	30ff      	adds	r0, #255	; 0xff
 80042c0:	f006 fb90 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80042c4:	8921      	ldrh	r1, [r4, #8]
 80042c6:	208c      	movs	r0, #140	; 0x8c
 80042c8:	0040      	lsls	r0, r0, #1
 80042ca:	f006 fb8b 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80042ce:	8961      	ldrh	r1, [r4, #10]
 80042d0:	201a      	movs	r0, #26
 80042d2:	30ff      	adds	r0, #255	; 0xff
 80042d4:	f006 fb86 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80042d8:	7b63      	ldrb	r3, [r4, #13]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	7921      	ldrb	r1, [r4, #4]
 80042de:	4319      	orrs	r1, r3
 80042e0:	208d      	movs	r0, #141	; 0x8d
 80042e2:	0040      	lsls	r0, r0, #1
 80042e4:	f006 fb7e 	bl	800a9e4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 80042e8:	7ee1      	ldrb	r1, [r4, #27]
 80042ea:	201c      	movs	r0, #28
 80042ec:	30ff      	adds	r0, #255	; 0xff
 80042ee:	f006 fb79 	bl	800a9e4 <EE_WriteVariable>
}
 80042f2:	2000      	movs	r0, #0
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20006894 	.word	0x20006894

080042fc <EE_FormatForFactoryReset>:
{
 80042fc:	b510      	push	{r4, lr}
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <EE_FormatForFactoryReset+0x1c>)
 8004300:	4a06      	ldr	r2, [pc, #24]	; (800431c <EE_FormatForFactoryReset+0x20>)
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d006      	beq.n	8004316 <EE_FormatForFactoryReset+0x1a>
		if (EE_Format() == HAL_OK) 
 8004308:	f006 fc14 	bl	800ab34 <EE_Format>
 800430c:	2800      	cmp	r0, #0
 800430e:	d102      	bne.n	8004316 <EE_FormatForFactoryReset+0x1a>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <EE_FormatForFactoryReset+0x20>)
 8004312:	4a01      	ldr	r2, [pc, #4]	; (8004318 <EE_FormatForFactoryReset+0x1c>)
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bd10      	pop	{r4, pc}
 8004318:	beefdead 	.word	0xbeefdead
 800431c:	20007ff0 	.word	0x20007ff0

08004320 <CheckForTimedButtonPress>:
{
 8004320:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8004322:	00c2      	lsls	r2, r0, #3
 8004324:	1812      	adds	r2, r2, r0
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <CheckForTimedButtonPress+0x74>)
 8004328:	189b      	adds	r3, r3, r2
 800432a:	789c      	ldrb	r4, [r3, #2]
	if (pressCounter[port] == t1)	
 800432c:	0082      	lsls	r2, r0, #2
 800432e:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <CheckForTimedButtonPress+0x78>)
 8004330:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004332:	0163      	lsls	r3, r4, #5
 8004334:	1b1b      	subs	r3, r3, r4
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	191b      	adds	r3, r3, r4
 800433a:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 800433c:	4299      	cmp	r1, r3
 800433e:	d01c      	beq.n	800437a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8004340:	00c2      	lsls	r2, r0, #3
 8004342:	1812      	adds	r2, r2, r0
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <CheckForTimedButtonPress+0x74>)
 8004346:	189b      	adds	r3, r3, r2
 8004348:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800434a:	0163      	lsls	r3, r4, #5
 800434c:	1b1b      	subs	r3, r3, r4
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	191b      	adds	r3, r3, r4
 8004352:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t2)	
 8004354:	4299      	cmp	r1, r3
 8004356:	d017      	beq.n	8004388 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8004358:	00c2      	lsls	r2, r0, #3
 800435a:	1812      	adds	r2, r2, r0
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <CheckForTimedButtonPress+0x74>)
 800435e:	189b      	adds	r3, r3, r2
 8004360:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004362:	0163      	lsls	r3, r4, #5
 8004364:	1b1b      	subs	r3, r3, r4
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	191b      	adds	r3, r3, r4
 800436a:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t3)	
 800436c:	4299      	cmp	r1, r3
 800436e:	d109      	bne.n	8004384 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 8004370:	0010      	movs	r0, r2
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <CheckForTimedButtonPress+0x74>)
 8004374:	220a      	movs	r2, #10
 8004376:	54c2      	strb	r2, [r0, r3]
 8004378:	e004      	b.n	8004384 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800437a:	00c3      	lsls	r3, r0, #3
 800437c:	1818      	adds	r0, r3, r0
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <CheckForTimedButtonPress+0x74>)
 8004380:	2209      	movs	r2, #9
 8004382:	54c2      	strb	r2, [r0, r3]
}
 8004384:	2000      	movs	r0, #0
 8004386:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8004388:	0010      	movs	r0, r2
 800438a:	4b02      	ldr	r3, [pc, #8]	; (8004394 <CheckForTimedButtonPress+0x74>)
 800438c:	220a      	movs	r2, #10
 800438e:	54c2      	strb	r2, [r0, r3]
 8004390:	e7f8      	b.n	8004384 <CheckForTimedButtonPress+0x64>
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	20000cdc 	.word	0x20000cdc
 8004398:	20001278 	.word	0x20001278

0800439c <CheckForTimedButtonRelease>:
{
 800439c:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800439e:	00c2      	lsls	r2, r0, #3
 80043a0:	1812      	adds	r2, r2, r0
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	795c      	ldrb	r4, [r3, #5]
	if (releaseCounter[port] == t1)	
 80043a8:	0082      	lsls	r2, r0, #2
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <CheckForTimedButtonRelease+0x78>)
 80043ac:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80043ae:	0163      	lsls	r3, r4, #5
 80043b0:	1b1b      	subs	r3, r3, r4
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	191b      	adds	r3, r3, r4
 80043b6:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 80043b8:	4299      	cmp	r1, r3
 80043ba:	d01c      	beq.n	80043f6 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80043bc:	00c2      	lsls	r2, r0, #3
 80043be:	1812      	adds	r2, r2, r0
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80043c6:	0163      	lsls	r3, r4, #5
 80043c8:	1b1b      	subs	r3, r3, r4
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	191b      	adds	r3, r3, r4
 80043ce:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t2)	
 80043d0:	4299      	cmp	r1, r3
 80043d2:	d017      	beq.n	8004404 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80043d4:	00c2      	lsls	r2, r0, #3
 80043d6:	1812      	adds	r2, r2, r0
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80043de:	0163      	lsls	r3, r4, #5
 80043e0:	1b1b      	subs	r3, r3, r4
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	191b      	adds	r3, r3, r4
 80043e6:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t3)	
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d109      	bne.n	8004400 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 80043ec:	0010      	movs	r0, r2
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 80043f0:	220d      	movs	r2, #13
 80043f2:	54c2      	strb	r2, [r0, r3]
 80043f4:	e004      	b.n	8004400 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80043f6:	00c3      	lsls	r3, r0, #3
 80043f8:	1818      	adds	r0, r3, r0
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 80043fc:	220c      	movs	r2, #12
 80043fe:	54c2      	strb	r2, [r0, r3]
}
 8004400:	2000      	movs	r0, #0
 8004402:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8004404:	0010      	movs	r0, r2
 8004406:	4b02      	ldr	r3, [pc, #8]	; (8004410 <CheckForTimedButtonRelease+0x74>)
 8004408:	220d      	movs	r2, #13
 800440a:	54c2      	strb	r2, [r0, r3]
 800440c:	e7f8      	b.n	8004400 <CheckForTimedButtonRelease+0x64>
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	20000cdc 	.word	0x20000cdc
 8004414:	2000129c 	.word	0x2000129c

08004418 <buttonPressedCallback>:
}
 8004418:	4770      	bx	lr

0800441a <buttonReleasedCallback>:
}
 800441a:	4770      	bx	lr

0800441c <buttonClickedCallback>:
}
 800441c:	4770      	bx	lr

0800441e <buttonDblClickedCallback>:
}
 800441e:	4770      	bx	lr

08004420 <buttonPressedForXCallback>:
}
 8004420:	4770      	bx	lr

08004422 <buttonReleasedForYCallback>:
}
 8004422:	4770      	bx	lr

08004424 <User_MessagingParser>:
}
 8004424:	2001      	movs	r0, #1
 8004426:	4770      	bx	lr

08004428 <RegisterUserCLICommands>:
}
 8004428:	4770      	bx	lr
	...

0800442c <RTC_CalendarConfig>:
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	46ce      	mov	lr, r9
 8004430:	b500      	push	{lr}
 8004432:	b08e      	sub	sp, #56	; 0x38
	char comDate[] = __DATE__, comTime[] = __TIME__;
 8004434:	ac05      	add	r4, sp, #20
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <RTC_CalendarConfig+0xdc>)
 8004438:	0022      	movs	r2, r4
 800443a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800443c:	c243      	stmia	r2!, {r0, r1, r6}
 800443e:	aa02      	add	r2, sp, #8
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <RTC_CalendarConfig+0xe0>)
 8004442:	cb03      	ldmia	r3!, {r0, r1}
 8004444:	c203      	stmia	r2!, {r0, r1}
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800444a:	2015      	movs	r0, #21
 800444c:	ab02      	add	r3, sp, #8
 800444e:	469c      	mov	ip, r3
 8004450:	4460      	add	r0, ip
 8004452:	f00e fa3c 	bl	80128ce <atoi>
 8004456:	b2c3      	uxtb	r3, r0
 8004458:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800445a:	2600      	movs	r6, #0
 800445c:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800445e:	a806      	add	r0, sp, #24
 8004460:	f00e fa35 	bl	80128ce <atoi>
 8004464:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 8004466:	70e6      	strb	r6, [r4, #3]
 8004468:	2401      	movs	r4, #1
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800446a:	4e29      	ldr	r6, [pc, #164]	; (8004510 <RTC_CalendarConfig+0xe4>)
 800446c:	e002      	b.n	8004474 <RTC_CalendarConfig+0x48>
 800446e:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 8004470:	2c0d      	cmp	r4, #13
 8004472:	d009      	beq.n	8004488 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 8004474:	00a3      	lsls	r3, r4, #2
 8004476:	3b04      	subs	r3, #4
 8004478:	58f1      	ldr	r1, [r6, r3]
 800447a:	a805      	add	r0, sp, #20
 800447c:	f7fb fe42 	bl	8000104 <strcmp>
 8004480:	2800      	cmp	r0, #0
 8004482:	d1f4      	bne.n	800446e <RTC_CalendarConfig+0x42>
			month = i + 1;
 8004484:	b2e5      	uxtb	r5, r4
 8004486:	e7f2      	b.n	800446e <RTC_CalendarConfig+0x42>
	seconds = atoi(comTime + 6);
 8004488:	ab02      	add	r3, sp, #8
 800448a:	1d98      	adds	r0, r3, #6
 800448c:	f00e fa1f 	bl	80128ce <atoi>
 8004490:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 8004492:	ac05      	add	r4, sp, #20
 8004494:	2600      	movs	r6, #0
 8004496:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 8004498:	ab02      	add	r3, sp, #8
 800449a:	1cd8      	adds	r0, r3, #3
 800449c:	f00e fa17 	bl	80128ce <atoi>
 80044a0:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 80044a2:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 80044a4:	a802      	add	r0, sp, #8
 80044a6:	f00e fa12 	bl	80128ce <atoi>
 80044aa:	0004      	movs	r4, r0
  sdatestructure.Year = year;
 80044ac:	a90d      	add	r1, sp, #52	; 0x34
 80044ae:	464b      	mov	r3, r9
 80044b0:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 80044b2:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 80044b4:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 80044b6:	2301      	movs	r3, #1
 80044b8:	700b      	strb	r3, [r1, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 80044ba:	2200      	movs	r2, #0
 80044bc:	4815      	ldr	r0, [pc, #84]	; (8004514 <RTC_CalendarConfig+0xe8>)
 80044be:	f00c ff7f 	bl	80113c0 <HAL_RTC_SetDate>
		return BOS_ERROR;
 80044c2:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d119      	bne.n	80044fc <RTC_CalendarConfig+0xd0>
  stimestructure.Hours = hours;
 80044c8:	a908      	add	r1, sp, #32
 80044ca:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 80044cc:	9b01      	ldr	r3, [sp, #4]
 80044ce:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 80044d0:	9b00      	ldr	r3, [sp, #0]
 80044d2:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 80044d4:	2300      	movs	r3, #0
 80044d6:	720b      	strb	r3, [r1, #8]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <RTC_CalendarConfig+0xec>)
 80044da:	3018      	adds	r0, #24
 80044dc:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044de:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80044e0:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 80044e2:	2200      	movs	r2, #0
 80044e4:	480b      	ldr	r0, [pc, #44]	; (8004514 <RTC_CalendarConfig+0xe8>)
 80044e6:	f00c fee5 	bl	80112b4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 80044ea:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d105      	bne.n	80044fc <RTC_CalendarConfig+0xd0>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <RTC_CalendarConfig+0xf0>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	4807      	ldr	r0, [pc, #28]	; (8004514 <RTC_CalendarConfig+0xe8>)
 80044f6:	f00d f827 	bl	8011548 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	b00e      	add	sp, #56	; 0x38
 8004500:	bc04      	pop	{r2}
 8004502:	4691      	mov	r9, r2
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	08017be4 	.word	0x08017be4
 800450c:	08017bf0 	.word	0x08017bf0
 8004510:	080182f8 	.word	0x080182f8
 8004514:	200068ec 	.word	0x200068ec
 8004518:	20006894 	.word	0x20006894
 800451c:	000032f2 	.word	0x000032f2

08004520 <RTC_Init>:
{
 8004520:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 8004522:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <RTC_Init+0x74>)
 8004524:	6a11      	ldr	r1, [r2, #32]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	430b      	orrs	r3, r1
 800452c:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800452e:	481a      	ldr	r0, [pc, #104]	; (8004598 <RTC_Init+0x78>)
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <RTC_Init+0x7c>)
 8004532:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8004534:	2300      	movs	r3, #0
 8004536:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 8004538:	227c      	movs	r2, #124	; 0x7c
 800453a:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <RTC_Init+0x80>)
 800453e:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004540:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004542:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004544:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 8004546:	f00c fe57 	bl	80111f8 <HAL_RTC_Init>
 800454a:	23ff      	movs	r3, #255	; 0xff
 800454c:	2800      	cmp	r0, #0
 800454e:	d11e      	bne.n	800458e <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 8004550:	2101      	movs	r1, #1
 8004552:	4811      	ldr	r0, [pc, #68]	; (8004598 <RTC_Init+0x78>)
 8004554:	f00c fffe 	bl	8011554 <HAL_RTCEx_BKUPRead>
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <RTC_Init+0x84>)
 800455a:	4298      	cmp	r0, r3
 800455c:	d10e      	bne.n	800457c <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <RTC_Init+0x74>)
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	d502      	bpl.n	800456c <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <RTC_Init+0x88>)
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <RTC_Init+0x74>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	015b      	lsls	r3, r3, #5
 8004572:	d505      	bpl.n	8004580 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <RTC_Init+0x88>)
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e001      	b.n	8004580 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800457c:	f7ff ff56 	bl	800442c <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <RTC_Init+0x74>)
 8004582:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	045b      	lsls	r3, r3, #17
 8004588:	430b      	orrs	r3, r1
 800458a:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	bd10      	pop	{r4, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40021000 	.word	0x40021000
 8004598:	200068ec 	.word	0x200068ec
 800459c:	40002800 	.word	0x40002800
 80045a0:	000007cf 	.word	0x000007cf
 80045a4:	000032f2 	.word	0x000032f2
 80045a8:	20000cbe 	.word	0x20000cbe

080045ac <IsModuleParameter>:
{
 80045ac:	b510      	push	{r4, lr}
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <IsModuleParameter+0x14>)
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	f7fb fda7 	bl	8000104 <strcmp>
 80045b6:	4243      	negs	r3, r0
 80045b8:	4158      	adcs	r0, r3
 80045ba:	b2c0      	uxtb	r0, r0
}
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	20000040 	.word	0x20000040

080045c4 <IsMathOperator>:
{
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	0004      	movs	r4, r0
		if (!strcmp(string, "="))
 80045c8:	491b      	ldr	r1, [pc, #108]	; (8004638 <IsMathOperator+0x74>)
 80045ca:	f7fb fd9b 	bl	8000104 <strcmp>
 80045ce:	0006      	movs	r6, r0
 80045d0:	2506      	movs	r5, #6
 80045d2:	2e00      	cmp	r6, #0
 80045d4:	d023      	beq.n	800461e <IsMathOperator+0x5a>
		else if (!strcmp(string, ">"))
 80045d6:	4919      	ldr	r1, [pc, #100]	; (800463c <IsMathOperator+0x78>)
 80045d8:	0020      	movs	r0, r4
 80045da:	f7fb fd93 	bl	8000104 <strcmp>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d01f      	beq.n	8004622 <IsMathOperator+0x5e>
		else if (!strcmp(string, "<"))
 80045e2:	4917      	ldr	r1, [pc, #92]	; (8004640 <IsMathOperator+0x7c>)
 80045e4:	0020      	movs	r0, r4
 80045e6:	f7fb fd8d 	bl	8000104 <strcmp>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d01b      	beq.n	8004626 <IsMathOperator+0x62>
		else if (!strcmp(string, ">="))
 80045ee:	4915      	ldr	r1, [pc, #84]	; (8004644 <IsMathOperator+0x80>)
 80045f0:	0020      	movs	r0, r4
 80045f2:	f7fb fd87 	bl	8000104 <strcmp>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d017      	beq.n	800462a <IsMathOperator+0x66>
		else if (!strcmp(string, "<="))
 80045fa:	4913      	ldr	r1, [pc, #76]	; (8004648 <IsMathOperator+0x84>)
 80045fc:	0020      	movs	r0, r4
 80045fe:	f7fb fd81 	bl	8000104 <strcmp>
 8004602:	2800      	cmp	r0, #0
 8004604:	d013      	beq.n	800462e <IsMathOperator+0x6a>
		else if (!strcmp(string, "!="))
 8004606:	4911      	ldr	r1, [pc, #68]	; (800464c <IsMathOperator+0x88>)
 8004608:	0020      	movs	r0, r4
 800460a:	f7fb fd7b 	bl	8000104 <strcmp>
 800460e:	2800      	cmp	r0, #0
 8004610:	d00f      	beq.n	8004632 <IsMathOperator+0x6e>
 8004612:	3d01      	subs	r5, #1
 8004614:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8004616:	2d00      	cmp	r5, #0
 8004618:	d1db      	bne.n	80045d2 <IsMathOperator+0xe>
	return 0;
 800461a:	2000      	movs	r0, #0
}
 800461c:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800461e:	2001      	movs	r0, #1
 8004620:	e7fc      	b.n	800461c <IsMathOperator+0x58>
			return MATH_GREATER;
 8004622:	2002      	movs	r0, #2
 8004624:	e7fa      	b.n	800461c <IsMathOperator+0x58>
			return MATH_SMALLER;
 8004626:	2003      	movs	r0, #3
 8004628:	e7f8      	b.n	800461c <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 800462a:	2004      	movs	r0, #4
 800462c:	e7f6      	b.n	800461c <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800462e:	2005      	movs	r0, #5
 8004630:	e7f4      	b.n	800461c <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8004632:	2006      	movs	r0, #6
 8004634:	e7f2      	b.n	800461c <IsMathOperator+0x58>
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	08017bcc 	.word	0x08017bcc
 800463c:	08017bd0 	.word	0x08017bd0
 8004640:	08017bd4 	.word	0x08017bd4
 8004644:	08017bd8 	.word	0x08017bd8
 8004648:	08017bdc 	.word	0x08017bdc
 800464c:	08017be0 	.word	0x08017be0

08004650 <SystemClock_Config>:
{
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004654:	2401      	movs	r4, #1
 8004656:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004658:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800465a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800465c:	2310      	movs	r3, #16
 800465e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004660:	2702      	movs	r7, #2
 8004662:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004664:	2680      	movs	r6, #128	; 0x80
 8004666:	0276      	lsls	r6, r6, #9
 8004668:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	035b      	lsls	r3, r3, #13
 800466e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004670:	2500      	movs	r5, #0
 8004672:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004674:	a80d      	add	r0, sp, #52	; 0x34
 8004676:	f00c f877 	bl	8010768 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800467a:	2307      	movs	r3, #7
 800467c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800467e:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004680:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004682:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8004684:	2101      	movs	r1, #1
 8004686:	a809      	add	r0, sp, #36	; 0x24
 8004688:	f00c fb30 	bl	8010cec <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <SystemClock_Config+0xa8>)
 800468e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004690:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004692:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004694:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004696:	a802      	add	r0, sp, #8
 8004698:	f00c fcd6 	bl	8011048 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4d17      	ldr	r5, [pc, #92]	; (80046fc <SystemClock_Config+0xac>)
 800469e:	69ea      	ldr	r2, [r5, #28]
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	0549      	lsls	r1, r1, #21
 80046a4:	430a      	orrs	r2, r1
 80046a6:	61ea      	str	r2, [r5, #28]
 80046a8:	69eb      	ldr	r3, [r5, #28]
 80046aa:	400b      	ands	r3, r1
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 80046b0:	f00c f850 	bl	8010754 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80046b4:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80046bc:	a802      	add	r0, sp, #8
 80046be:	f00c fcc3 	bl	8011048 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80046c2:	f00c fc9d 	bl	8011000 <HAL_RCC_GetHCLKFreq>
 80046c6:	21fa      	movs	r1, #250	; 0xfa
 80046c8:	0089      	lsls	r1, r1, #2
 80046ca:	f7fb fd41 	bl	8000150 <__udivsi3>
 80046ce:	f00a ffcd 	bl	800f66c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046d2:	2004      	movs	r0, #4
 80046d4:	f00a ffe6 	bl	800f6a4 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 80046d8:	69ab      	ldr	r3, [r5, #24]
 80046da:	4323      	orrs	r3, r4
 80046dc:	61ab      	str	r3, [r5, #24]
 80046de:	69ab      	ldr	r3, [r5, #24]
 80046e0:	401c      	ands	r4, r3
 80046e2:	9401      	str	r4, [sp, #4]
 80046e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046e6:	2001      	movs	r0, #1
 80046e8:	2200      	movs	r2, #0
 80046ea:	2100      	movs	r1, #0
 80046ec:	4240      	negs	r0, r0
 80046ee:	f00a ff75 	bl	800f5dc <HAL_NVIC_SetPriority>
}
 80046f2:	b01b      	add	sp, #108	; 0x6c
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	00040003 	.word	0x00040003
 80046fc:	40021000 	.word	0x40021000

08004700 <vRegisterCLICommands>:
{
 8004700:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8004702:	482f      	ldr	r0, [pc, #188]	; (80047c0 <vRegisterCLICommands+0xc0>)
 8004704:	f008 ff92 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8004708:	482e      	ldr	r0, [pc, #184]	; (80047c4 <vRegisterCLICommands+0xc4>)
 800470a:	f008 ff8f 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 800470e:	482e      	ldr	r0, [pc, #184]	; (80047c8 <vRegisterCLICommands+0xc8>)
 8004710:	f008 ff8c 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8004714:	482d      	ldr	r0, [pc, #180]	; (80047cc <vRegisterCLICommands+0xcc>)
 8004716:	f008 ff89 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 800471a:	482d      	ldr	r0, [pc, #180]	; (80047d0 <vRegisterCLICommands+0xd0>)
 800471c:	f008 ff86 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8004720:	482c      	ldr	r0, [pc, #176]	; (80047d4 <vRegisterCLICommands+0xd4>)
 8004722:	f008 ff83 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8004726:	482c      	ldr	r0, [pc, #176]	; (80047d8 <vRegisterCLICommands+0xd8>)
 8004728:	f008 ff80 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 800472c:	482b      	ldr	r0, [pc, #172]	; (80047dc <vRegisterCLICommands+0xdc>)
 800472e:	f008 ff7d 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8004732:	482b      	ldr	r0, [pc, #172]	; (80047e0 <vRegisterCLICommands+0xe0>)
 8004734:	f008 ff7a 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8004738:	482a      	ldr	r0, [pc, #168]	; (80047e4 <vRegisterCLICommands+0xe4>)
 800473a:	f008 ff77 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 800473e:	482a      	ldr	r0, [pc, #168]	; (80047e8 <vRegisterCLICommands+0xe8>)
 8004740:	f008 ff74 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8004744:	4829      	ldr	r0, [pc, #164]	; (80047ec <vRegisterCLICommands+0xec>)
 8004746:	f008 ff71 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 800474a:	4829      	ldr	r0, [pc, #164]	; (80047f0 <vRegisterCLICommands+0xf0>)
 800474c:	f008 ff6e 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8004750:	4828      	ldr	r0, [pc, #160]	; (80047f4 <vRegisterCLICommands+0xf4>)
 8004752:	f008 ff6b 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8004756:	4828      	ldr	r0, [pc, #160]	; (80047f8 <vRegisterCLICommands+0xf8>)
 8004758:	f008 ff68 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 800475c:	4827      	ldr	r0, [pc, #156]	; (80047fc <vRegisterCLICommands+0xfc>)
 800475e:	f008 ff65 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8004762:	4827      	ldr	r0, [pc, #156]	; (8004800 <vRegisterCLICommands+0x100>)
 8004764:	f008 ff62 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8004768:	4826      	ldr	r0, [pc, #152]	; (8004804 <vRegisterCLICommands+0x104>)
 800476a:	f008 ff5f 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 800476e:	4826      	ldr	r0, [pc, #152]	; (8004808 <vRegisterCLICommands+0x108>)
 8004770:	f008 ff5c 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8004774:	4825      	ldr	r0, [pc, #148]	; (800480c <vRegisterCLICommands+0x10c>)
 8004776:	f008 ff59 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 800477a:	4825      	ldr	r0, [pc, #148]	; (8004810 <vRegisterCLICommands+0x110>)
 800477c:	f008 ff56 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8004780:	4824      	ldr	r0, [pc, #144]	; (8004814 <vRegisterCLICommands+0x114>)
 8004782:	f008 ff53 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8004786:	4824      	ldr	r0, [pc, #144]	; (8004818 <vRegisterCLICommands+0x118>)
 8004788:	f008 ff50 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 800478c:	4823      	ldr	r0, [pc, #140]	; (800481c <vRegisterCLICommands+0x11c>)
 800478e:	f008 ff4d 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8004792:	4823      	ldr	r0, [pc, #140]	; (8004820 <vRegisterCLICommands+0x120>)
 8004794:	f008 ff4a 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8004798:	4822      	ldr	r0, [pc, #136]	; (8004824 <vRegisterCLICommands+0x124>)
 800479a:	f008 ff47 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 800479e:	4822      	ldr	r0, [pc, #136]	; (8004828 <vRegisterCLICommands+0x128>)
 80047a0:	f008 ff44 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 80047a4:	4821      	ldr	r0, [pc, #132]	; (800482c <vRegisterCLICommands+0x12c>)
 80047a6:	f008 ff41 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 80047aa:	4821      	ldr	r0, [pc, #132]	; (8004830 <vRegisterCLICommands+0x130>)
 80047ac:	f008 ff3e 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <vRegisterCLICommands+0x134>)
 80047b2:	221d      	movs	r2, #29
 80047b4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80047b6:	f006 ffb1 	bl	800b71c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80047ba:	f7ff fe35 	bl	8004428 <RegisterUserCLICommands>
}
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	0801854c 	.word	0x0801854c
 80047c4:	080184e0 	.word	0x080184e0
 80047c8:	0801847c 	.word	0x0801847c
 80047cc:	08017dd4 	.word	0x08017dd4
 80047d0:	08017f5c 	.word	0x08017f5c
 80047d4:	08018700 	.word	0x08018700
 80047d8:	080183f4 	.word	0x080183f4
 80047dc:	0801814c 	.word	0x0801814c
 80047e0:	08018b94 	.word	0x08018b94
 80047e4:	08018250 	.word	0x08018250
 80047e8:	080187bc 	.word	0x080187bc
 80047ec:	08017cbc 	.word	0x08017cbc
 80047f0:	080186f0 	.word	0x080186f0
 80047f4:	08018a04 	.word	0x08018a04
 80047f8:	080180a0 	.word	0x080180a0
 80047fc:	08017ee0 	.word	0x08017ee0
 8004800:	08019a0c 	.word	0x08019a0c
 8004804:	08017e48 	.word	0x08017e48
 8004808:	08018808 	.word	0x08018808
 800480c:	08019a80 	.word	0x08019a80
 8004810:	080181cc 	.word	0x080181cc
 8004814:	08017f8c 	.word	0x08017f8c
 8004818:	08018b84 	.word	0x08018b84
 800481c:	08017c40 	.word	0x08017c40
 8004820:	0801843c 	.word	0x0801843c
 8004824:	08017f4c 	.word	0x08017f4c
 8004828:	08017e20 	.word	0x08017e20
 800482c:	08019a58 	.word	0x08019a58
 8004830:	080199a0 	.word	0x080199a0
 8004834:	200067dc 	.word	0x200067dc

08004838 <GetUart>:
	switch (port)
 8004838:	2805      	cmp	r0, #5
 800483a:	d80b      	bhi.n	8004854 <GetUart+0x1c>
 800483c:	0080      	lsls	r0, r0, #2
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <GetUart+0x24>)
 8004840:	581b      	ldr	r3, [r3, r0]
 8004842:	469f      	mov	pc, r3
			return P2uart;
 8004844:	4806      	ldr	r0, [pc, #24]	; (8004860 <GetUart+0x28>)
 8004846:	e008      	b.n	800485a <GetUart+0x22>
			return P3uart;
 8004848:	4806      	ldr	r0, [pc, #24]	; (8004864 <GetUart+0x2c>)
 800484a:	e006      	b.n	800485a <GetUart+0x22>
			return P4uart;
 800484c:	4806      	ldr	r0, [pc, #24]	; (8004868 <GetUart+0x30>)
 800484e:	e004      	b.n	800485a <GetUart+0x22>
			return P5uart;
 8004850:	4806      	ldr	r0, [pc, #24]	; (800486c <GetUart+0x34>)
 8004852:	e002      	b.n	800485a <GetUart+0x22>
			return 0;
 8004854:	2000      	movs	r0, #0
 8004856:	e000      	b.n	800485a <GetUart+0x22>
			return P1uart;	
 8004858:	4805      	ldr	r0, [pc, #20]	; (8004870 <GetUart+0x38>)
}
 800485a:	4770      	bx	lr
 800485c:	080177c8 	.word	0x080177c8
 8004860:	20006bb4 	.word	0x20006bb4
 8004864:	20006b44 	.word	0x20006b44
 8004868:	200069ac 	.word	0x200069ac
 800486c:	20006acc 	.word	0x20006acc
 8004870:	20006a5c 	.word	0x20006a5c

08004874 <SetupDMAStreams>:
{
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	000e      	movs	r6, r1
 800487a:	0015      	movs	r5, r2
 800487c:	220f      	movs	r2, #15
 800487e:	446a      	add	r2, sp
 8004880:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8004882:	001c      	movs	r4, r3
 8004884:	ab0a      	add	r3, sp, #40	; 0x28
 8004886:	781f      	ldrb	r7, [r3, #0]
 8004888:	42bc      	cmp	r4, r7
 800488a:	d057      	beq.n	800493c <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800488c:	2c00      	cmp	r4, #0
 800488e:	d100      	bne.n	8004892 <SetupDMAStreams+0x1e>
 8004890:	e0ba      	b.n	8004a08 <SetupDMAStreams+0x194>
 8004892:	2f00      	cmp	r7, #0
 8004894:	d100      	bne.n	8004898 <SetupDMAStreams+0x24>
 8004896:	e0bb      	b.n	8004a10 <SetupDMAStreams+0x19c>
	if (direction == FORWARD) 
 8004898:	2800      	cmp	r0, #0
 800489a:	d054      	beq.n	8004946 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 800489c:	2801      	cmp	r0, #1
 800489e:	d100      	bne.n	80048a2 <SetupDMAStreams+0x2e>
 80048a0:	e089      	b.n	80049b6 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 80048a2:	2367      	movs	r3, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 80048a4:	2802      	cmp	r0, #2
 80048a6:	d000      	beq.n	80048aa <SetupDMAStreams+0x36>
 80048a8:	e0af      	b.n	8004a0a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 80048aa:	0020      	movs	r0, r4
 80048ac:	f7ff ffc4 	bl	8004838 <GetUart>
 80048b0:	0004      	movs	r4, r0
 80048b2:	0038      	movs	r0, r7
 80048b4:	f7ff ffc0 	bl	8004838 <GetUart>
 80048b8:	0001      	movs	r1, r0
 80048ba:	2201      	movs	r2, #1
 80048bc:	0020      	movs	r0, r4
 80048be:	f005 ff7f 	bl	800a7c0 <StartDMAstream>
 80048c2:	0003      	movs	r3, r0
 80048c4:	2817      	cmp	r0, #23
 80048c6:	d100      	bne.n	80048ca <SetupDMAStreams+0x56>
 80048c8:	e09f      	b.n	8004a0a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80048ca:	0168      	lsls	r0, r5, #5
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	0080      	lsls	r0, r0, #2
 80048d0:	1940      	adds	r0, r0, r5
 80048d2:	00c0      	lsls	r0, r0, #3
 80048d4:	21fa      	movs	r1, #250	; 0xfa
 80048d6:	0089      	lsls	r1, r1, #2
 80048d8:	f7fb fc3a 	bl	8000150 <__udivsi3>
 80048dc:	0004      	movs	r4, r0
 80048de:	250f      	movs	r5, #15
 80048e0:	446d      	add	r5, sp
 80048e2:	4b4c      	ldr	r3, [pc, #304]	; (8004a14 <SetupDMAStreams+0x1a0>)
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	002b      	movs	r3, r5
 80048e8:	2200      	movs	r2, #0
 80048ea:	0001      	movs	r1, r0
 80048ec:	484a      	ldr	r0, [pc, #296]	; (8004a18 <SetupDMAStreams+0x1a4>)
 80048ee:	f00a fb11 	bl	800ef14 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80048f2:	782d      	ldrb	r5, [r5, #0]
 80048f4:	1e6b      	subs	r3, r5, #1
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a48      	ldr	r2, [pc, #288]	; (8004a1c <SetupDMAStreams+0x1a8>)
 80048fa:	509e      	str	r6, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80048fc:	ab0a      	add	r3, sp, #40	; 0x28
 80048fe:	7818      	ldrb	r0, [r3, #0]
 8004900:	f7ff ff9a 	bl	8004838 <GetUart>
 8004904:	0007      	movs	r7, r0
 8004906:	0028      	movs	r0, r5
 8004908:	f7ff ff96 	bl	8004838 <GetUart>
 800490c:	0001      	movs	r1, r0
 800490e:	2201      	movs	r2, #1
 8004910:	0038      	movs	r0, r7
 8004912:	f005 ff55 	bl	800a7c0 <StartDMAstream>
 8004916:	0003      	movs	r3, r0
 8004918:	2817      	cmp	r0, #23
 800491a:	d076      	beq.n	8004a0a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 800491c:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <SetupDMAStreams+0x1a0>)
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	ab0a      	add	r3, sp, #40	; 0x28
 8004922:	2200      	movs	r2, #0
 8004924:	0021      	movs	r1, r4
 8004926:	483c      	ldr	r0, [pc, #240]	; (8004a18 <SetupDMAStreams+0x1a4>)
 8004928:	f00a faf4 	bl	800ef14 <xTimerCreate>
 800492c:	0005      	movs	r5, r0
		dmaStreamTotal[dst-1] = count;
 800492e:	ab0a      	add	r3, sp, #40	; 0x28
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <SetupDMAStreams+0x1a8>)
 8004938:	509e      	str	r6, [r3, r2]
 800493a:	e02c      	b.n	8004996 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 800493c:	4b38      	ldr	r3, [pc, #224]	; (8004a20 <SetupDMAStreams+0x1ac>)
 800493e:	2202      	movs	r2, #2
 8004940:	551a      	strb	r2, [r3, r4]
		return BOS_ERR_WrongParam;
 8004942:	2367      	movs	r3, #103	; 0x67
 8004944:	e061      	b.n	8004a0a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8004946:	0020      	movs	r0, r4
 8004948:	f7ff ff76 	bl	8004838 <GetUart>
 800494c:	0004      	movs	r4, r0
 800494e:	0038      	movs	r0, r7
 8004950:	f7ff ff72 	bl	8004838 <GetUart>
 8004954:	0001      	movs	r1, r0
 8004956:	2201      	movs	r2, #1
 8004958:	0020      	movs	r0, r4
 800495a:	f005 ff31 	bl	800a7c0 <StartDMAstream>
 800495e:	0003      	movs	r3, r0
 8004960:	2817      	cmp	r0, #23
 8004962:	d052      	beq.n	8004a0a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8004964:	240f      	movs	r4, #15
 8004966:	446c      	add	r4, sp
 8004968:	0168      	lsls	r0, r5, #5
 800496a:	1b40      	subs	r0, r0, r5
 800496c:	0080      	lsls	r0, r0, #2
 800496e:	1940      	adds	r0, r0, r5
 8004970:	00c0      	lsls	r0, r0, #3
 8004972:	21fa      	movs	r1, #250	; 0xfa
 8004974:	0089      	lsls	r1, r1, #2
 8004976:	f7fb fbeb 	bl	8000150 <__udivsi3>
 800497a:	0001      	movs	r1, r0
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <SetupDMAStreams+0x1a0>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	0023      	movs	r3, r4
 8004982:	2200      	movs	r2, #0
 8004984:	4824      	ldr	r0, [pc, #144]	; (8004a18 <SetupDMAStreams+0x1a4>)
 8004986:	f00a fac5 	bl	800ef14 <xTimerCreate>
 800498a:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <SetupDMAStreams+0x1a8>)
 8004994:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8004996:	2300      	movs	r3, #0
	if (xTimerStream != NULL)
 8004998:	2d00      	cmp	r5, #0
 800499a:	d036      	beq.n	8004a0a <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 800499c:	f009 fd52 	bl	800e444 <xTaskGetTickCount>
 80049a0:	0002      	movs	r2, r0
 80049a2:	2301      	movs	r3, #1
 80049a4:	425b      	negs	r3, r3
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	2101      	movs	r1, #1
 80049ac:	0028      	movs	r0, r5
 80049ae:	f00a fad1 	bl	800ef54 <xTimerGenericCommand>
	return BOS_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e029      	b.n	8004a0a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80049b6:	0038      	movs	r0, r7
 80049b8:	f7ff ff3e 	bl	8004838 <GetUart>
 80049bc:	0007      	movs	r7, r0
 80049be:	0020      	movs	r0, r4
 80049c0:	f7ff ff3a 	bl	8004838 <GetUart>
 80049c4:	0001      	movs	r1, r0
 80049c6:	2201      	movs	r2, #1
 80049c8:	0038      	movs	r0, r7
 80049ca:	f005 fef9 	bl	800a7c0 <StartDMAstream>
 80049ce:	0003      	movs	r3, r0
 80049d0:	2817      	cmp	r0, #23
 80049d2:	d01a      	beq.n	8004a0a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80049d4:	0168      	lsls	r0, r5, #5
 80049d6:	1b40      	subs	r0, r0, r5
 80049d8:	0080      	lsls	r0, r0, #2
 80049da:	1940      	adds	r0, r0, r5
 80049dc:	00c0      	lsls	r0, r0, #3
 80049de:	21fa      	movs	r1, #250	; 0xfa
 80049e0:	0089      	lsls	r1, r1, #2
 80049e2:	f7fb fbb5 	bl	8000150 <__udivsi3>
 80049e6:	0001      	movs	r1, r0
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <SetupDMAStreams+0x1a0>)
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	ab0a      	add	r3, sp, #40	; 0x28
 80049ee:	2200      	movs	r2, #0
 80049f0:	4809      	ldr	r0, [pc, #36]	; (8004a18 <SetupDMAStreams+0x1a4>)
 80049f2:	f00a fa8f 	bl	800ef14 <xTimerCreate>
 80049f6:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 80049f8:	230f      	movs	r3, #15
 80049fa:	446b      	add	r3, sp
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <SetupDMAStreams+0x1a8>)
 8004a04:	509e      	str	r6, [r3, r2]
 8004a06:	e7c6      	b.n	8004996 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8004a08:	2367      	movs	r3, #103	; 0x67
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	b005      	add	sp, #20
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8004a10:	2367      	movs	r3, #103	; 0x67
 8004a12:	e7fa      	b.n	8004a0a <SetupDMAStreams+0x196>
 8004a14:	080030cd 	.word	0x080030cd
 8004a18:	08017bfc 	.word	0x08017bfc
 8004a1c:	200015e4 	.word	0x200015e4
 8004a20:	20001270 	.word	0x20001270

08004a24 <LoadEEstreams>:
{
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	b084      	sub	sp, #16
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8004a28:	210e      	movs	r1, #14
 8004a2a:	4469      	add	r1, sp
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	800b      	strh	r3, [r1, #0]
 8004a30:	aa03      	add	r2, sp, #12
 8004a32:	8013      	strh	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8004a34:	20e4      	movs	r0, #228	; 0xe4
 8004a36:	f005 ffa5 	bl	800a984 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004a3a:	2600      	movs	r6, #0
	if (!status1) {
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d102      	bne.n	8004a46 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8004a40:	230e      	movs	r3, #14
 8004a42:	446b      	add	r3, sp
 8004a44:	781e      	ldrb	r6, [r3, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8004a46:	210e      	movs	r1, #14
 8004a48:	4469      	add	r1, sp
 8004a4a:	20e5      	movs	r0, #229	; 0xe5
 8004a4c:	f005 ff9a 	bl	800a984 <EE_ReadVariable>
 8004a50:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8004a52:	a903      	add	r1, sp, #12
 8004a54:	20e6      	movs	r0, #230	; 0xe6
 8004a56:	f005 ff95 	bl	800a984 <EE_ReadVariable>
	if (!status1 && !status2) {
 8004a5a:	4304      	orrs	r4, r0
 8004a5c:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004a5e:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	d106      	bne.n	8004a72 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8004a64:	230e      	movs	r3, #14
 8004a66:	446b      	add	r3, sp
 8004a68:	881d      	ldrh	r5, [r3, #0]
 8004a6a:	042d      	lsls	r5, r5, #16
 8004a6c:	ab03      	add	r3, sp, #12
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	18ed      	adds	r5, r5, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8004a72:	210e      	movs	r1, #14
 8004a74:	4469      	add	r1, sp
 8004a76:	20e7      	movs	r0, #231	; 0xe7
 8004a78:	f005 ff84 	bl	800a984 <EE_ReadVariable>
 8004a7c:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8004a7e:	a903      	add	r1, sp, #12
 8004a80:	20e8      	movs	r0, #232	; 0xe8
 8004a82:	f005 ff7f 	bl	800a984 <EE_ReadVariable>
	if (!status1 && !status2) {
 8004a86:	4320      	orrs	r0, r4
 8004a88:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004a8a:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d106      	bne.n	8004a9e <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8004a90:	230e      	movs	r3, #14
 8004a92:	446b      	add	r3, sp
 8004a94:	881c      	ldrh	r4, [r3, #0]
 8004a96:	0424      	lsls	r4, r4, #16
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	18e4      	adds	r4, r4, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8004a9e:	210e      	movs	r1, #14
 8004aa0:	4469      	add	r1, sp
 8004aa2:	20e9      	movs	r0, #233	; 0xe9
 8004aa4:	f005 ff6e 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d107      	bne.n	8004abc <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8004aac:	230e      	movs	r3, #14
 8004aae:	446b      	add	r3, sp
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	0a19      	lsrs	r1, r3, #8
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <LoadEEstreams+0x134>)
 8004ab6:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8004ab8:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <LoadEEstreams+0x138>)
 8004aba:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8004abc:	210e      	movs	r1, #14
 8004abe:	4469      	add	r1, sp
 8004ac0:	20ea      	movs	r0, #234	; 0xea
 8004ac2:	f005 ff5f 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d107      	bne.n	8004ada <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8004aca:	230e      	movs	r3, #14
 8004acc:	446b      	add	r3, sp
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	0a19      	lsrs	r1, r3, #8
 8004ad2:	4a23      	ldr	r2, [pc, #140]	; (8004b60 <LoadEEstreams+0x13c>)
 8004ad4:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8004ad6:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <LoadEEstreams+0x140>)
 8004ad8:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8004ada:	210e      	movs	r1, #14
 8004adc:	4469      	add	r1, sp
 8004ade:	20eb      	movs	r0, #235	; 0xeb
 8004ae0:	f005 ff50 	bl	800a984 <EE_ReadVariable>
	if (!status1) {
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d107      	bne.n	8004af8 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8004ae8:	230e      	movs	r3, #14
 8004aea:	446b      	add	r3, sp
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	0a19      	lsrs	r1, r3, #8
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <LoadEEstreams+0x144>)
 8004af2:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8004af4:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <LoadEEstreams+0x148>)
 8004af6:	7013      	strb	r3, [r2, #0]
	if (src1 && dst1)
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <LoadEEstreams+0x134>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <LoadEEstreams+0xe4>
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <LoadEEstreams+0x138>)
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d112      	bne.n	8004b2e <LoadEEstreams+0x10a>
	if (src2 && dst2)
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <LoadEEstreams+0x13c>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <LoadEEstreams+0xf4>
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <LoadEEstreams+0x140>)
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	d111      	bne.n	8004b3c <LoadEEstreams+0x118>
	if (src3 && dst3)
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <LoadEEstreams+0x144>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <LoadEEstreams+0x104>
 8004b20:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <LoadEEstreams+0x148>)
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	2a00      	cmp	r2, #0
 8004b26:	d110      	bne.n	8004b4a <LoadEEstreams+0x126>
}
 8004b28:	2000      	movs	r0, #0
 8004b2a:	b004      	add	sp, #16
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8004b2e:	9200      	str	r2, [sp, #0]
 8004b30:	0022      	movs	r2, r4
 8004b32:	0029      	movs	r1, r5
 8004b34:	0030      	movs	r0, r6
 8004b36:	f7ff fe9d 	bl	8004874 <SetupDMAStreams>
 8004b3a:	e7e5      	b.n	8004b08 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8004b3c:	9200      	str	r2, [sp, #0]
 8004b3e:	0022      	movs	r2, r4
 8004b40:	0029      	movs	r1, r5
 8004b42:	0030      	movs	r0, r6
 8004b44:	f7ff fe96 	bl	8004874 <SetupDMAStreams>
 8004b48:	e7e6      	b.n	8004b18 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8004b4a:	9200      	str	r2, [sp, #0]
 8004b4c:	0022      	movs	r2, r4
 8004b4e:	0029      	movs	r1, r5
 8004b50:	0030      	movs	r0, r6
 8004b52:	f7ff fe8f 	bl	8004874 <SetupDMAStreams>
 8004b56:	e7e7      	b.n	8004b28 <LoadEEstreams+0x104>
 8004b58:	20001315 	.word	0x20001315
 8004b5c:	20000e9f 	.word	0x20000e9f
 8004b60:	20001316 	.word	0x20001316
 8004b64:	20000ea0 	.word	0x20000ea0
 8004b68:	20001317 	.word	0x20001317
 8004b6c:	20000ea1 	.word	0x20000ea1

08004b70 <GetPortGPIOs>:
{
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	000e      	movs	r6, r1
 8004b74:	0015      	movs	r5, r2
 8004b76:	001c      	movs	r4, r3
	UART_HandleTypeDef* huart = GetUart(port);
 8004b78:	f7ff fe5e 	bl	8004838 <GetUart>
	if (huart == &huart1) 
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <GetPortGPIOs+0xa0>)
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	d017      	beq.n	8004bb2 <GetPortGPIOs+0x42>
	else if (huart == &huart2) 
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <GetPortGPIOs+0xa4>)
 8004b84:	4298      	cmp	r0, r3
 8004b86:	d022      	beq.n	8004bce <GetPortGPIOs+0x5e>
	else if (huart == &huart3) 
 8004b88:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <GetPortGPIOs+0xa8>)
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	d02a      	beq.n	8004be4 <GetPortGPIOs+0x74>
	else if (huart == &huart5) 
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <GetPortGPIOs+0xac>)
 8004b90:	4298      	cmp	r0, r3
 8004b92:	d033      	beq.n	8004bfc <GetPortGPIOs+0x8c>
	else if (huart == &huart6) 
 8004b94:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <GetPortGPIOs+0xb0>)
		result = BOS_ERROR;	
 8004b96:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 8004b98:	4290      	cmp	r0, r2
 8004b9a:	d116      	bne.n	8004bca <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 8004b9c:	2390      	movs	r3, #144	; 0x90
 8004b9e:	05db      	lsls	r3, r3, #23
 8004ba0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 8004ba6:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e00b      	b.n	8004bca <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 8004bb2:	2390      	movs	r3, #144	; 0x90
 8004bb4:	05db      	lsls	r3, r3, #23
 8004bb6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 8004bbe:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	9a04      	ldr	r2, [sp, #16]
 8004bc6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 8004bce:	2390      	movs	r3, #144	; 0x90
 8004bd0:	05db      	lsls	r3, r3, #23
 8004bd2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 8004bd8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 8004bda:	2308      	movs	r3, #8
 8004bdc:	9a04      	ldr	r2, [sp, #16]
 8004bde:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e7f2      	b.n	8004bca <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <GetPortGPIOs+0xb4>)
 8004be6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	00d2      	lsls	r2, r2, #3
 8004bec:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 8004bee:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	9a04      	ldr	r2, [sp, #16]
 8004bf6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e7e6      	b.n	8004bca <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <GetPortGPIOs+0xb4>)
 8004bfe:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 8004c00:	2208      	movs	r2, #8
 8004c02:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 8004c04:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 8004c06:	2310      	movs	r3, #16
 8004c08:	9a04      	ldr	r2, [sp, #16]
 8004c0a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e7dc      	b.n	8004bca <GetPortGPIOs+0x5a>
 8004c10:	20006acc 	.word	0x20006acc
 8004c14:	20006bb4 	.word	0x20006bb4
 8004c18:	200069ac 	.word	0x200069ac
 8004c1c:	20006a5c 	.word	0x20006a5c
 8004c20:	20006b44 	.word	0x20006b44
 8004c24:	48000400 	.word	0x48000400

08004c28 <SetupPortForRemoteBootloaderUpdate>:
{
 8004c28:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8004c2a:	f7ff fe05 	bl	8004838 <GetUart>
 8004c2e:	0004      	movs	r4, r0
	huart->Init.BaudRate = 57600;
 8004c30:	23e1      	movs	r3, #225	; 0xe1
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	015b      	lsls	r3, r3, #5
 8004c40:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8004c42:	f00d fcdd 	bl	8012600 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bd10      	pop	{r4, pc}
	...

08004c54 <testportCommand>:
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c56:	46d6      	mov	lr, sl
 8004c58:	4647      	mov	r7, r8
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004c66:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <testportCommand+0x19c>)
 8004c68:	7c1a      	ldrb	r2, [r3, #16]
 8004c6a:	ab02      	add	r3, sp, #8
 8004c6c:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004c6e:	2c00      	cmp	r4, #0
 8004c70:	d101      	bne.n	8004c76 <testportCommand+0x22>
 8004c72:	b672      	cpsid	i
 8004c74:	e7fe      	b.n	8004c74 <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004c76:	aa03      	add	r2, sp, #12
 8004c78:	2101      	movs	r1, #1
 8004c7a:	f008 fd75 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8004c7e:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004c80:	495c      	ldr	r1, [pc, #368]	; (8004df4 <testportCommand+0x1a0>)
 8004c82:	f7fb fa3f 	bl	8000104 <strcmp>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d000      	beq.n	8004c8c <testportCommand+0x38>
 8004c8a:	e077      	b.n	8004d7c <testportCommand+0x128>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004c8c:	4b5a      	ldr	r3, [pc, #360]	; (8004df8 <testportCommand+0x1a4>)
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	4b5a      	ldr	r3, [pc, #360]	; (8004dfc <testportCommand+0x1a8>)
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	3b01      	subs	r3, #1
 8004c96:	781e      	ldrb	r6, [r3, #0]
 8004c98:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8004c9a:	4b57      	ldr	r3, [pc, #348]	; (8004df8 <testportCommand+0x1a4>)
 8004c9c:	4698      	mov	r8, r3
 8004c9e:	b2eb      	uxtb	r3, r5
 8004ca0:	469a      	mov	sl, r3
 8004ca2:	4643      	mov	r3, r8
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4553      	cmp	r3, sl
 8004ca8:	d108      	bne.n	8004cbc <testportCommand+0x68>
 8004caa:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 8004cac:	2d06      	cmp	r5, #6
 8004cae:	d1f6      	bne.n	8004c9e <testportCommand+0x4a>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	b005      	add	sp, #20
 8004cb4:	bc0c      	pop	{r2, r3}
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	469a      	mov	sl, r3
 8004cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WriteVaule[0]=rand();
 8004cbc:	f00e f8b8 	bl	8012e30 <rand>
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8004cc4:	2364      	movs	r3, #100	; 0x64
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	3b5a      	subs	r3, #90	; 0x5a
 8004cca:	2201      	movs	r2, #1
 8004ccc:	0039      	movs	r1, r7
 8004cce:	4650      	mov	r0, sl
 8004cd0:	f008 fb3c 	bl	800d34c <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	f7ff fdaf 	bl	8004838 <GetUart>
 8004cda:	6803      	ldr	r3, [r0, #0]
 8004cdc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8004cde:	783a      	ldrb	r2, [r7, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d038      	beq.n	8004d58 <testportCommand+0x104>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8004ce6:	002a      	movs	r2, r5
 8004ce8:	4945      	ldr	r1, [pc, #276]	; (8004e00 <testportCommand+0x1ac>)
 8004cea:	0020      	movs	r0, r4
 8004cec:	f00e fa82 	bl	80131f4 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004cf0:	0020      	movs	r0, r4
 8004cf2:	f7fb fa11 	bl	8000118 <strlen>
 8004cf6:	b282      	uxth	r2, r0
 8004cf8:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <testportCommand+0x1a4>)
 8004cfa:	7818      	ldrb	r0, [r3, #0]
 8004cfc:	2364      	movs	r3, #100	; 0x64
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	3b5a      	subs	r3, #90	; 0x5a
 8004d02:	0021      	movs	r1, r4
 8004d04:	f008 fb22 	bl	800d34c <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004d08:	2254      	movs	r2, #84	; 0x54
 8004d0a:	493e      	ldr	r1, [pc, #248]	; (8004e04 <testportCommand+0x1b0>)
 8004d0c:	0020      	movs	r0, r4
 8004d0e:	f00e f86e 	bl	8012dee <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004d12:	0020      	movs	r0, r4
 8004d14:	f7fb fa00 	bl	8000118 <strlen>
 8004d18:	b282      	uxth	r2, r0
 8004d1a:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <testportCommand+0x1a4>)
 8004d1c:	7818      	ldrb	r0, [r3, #0]
 8004d1e:	2364      	movs	r3, #100	; 0x64
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	3b5a      	subs	r3, #90	; 0x5a
 8004d24:	0021      	movs	r1, r4
 8004d26:	f008 fb11 	bl	800d34c <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <testportCommand+0x1a4>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	019b      	lsls	r3, r3, #6
 8004d34:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <testportCommand+0x1b4>)
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	5d9b      	ldrb	r3, [r3, r6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1b5      	bne.n	8004caa <testportCommand+0x56>
 8004d3e:	4692      	mov	sl, r2
 8004d40:	4f2d      	ldr	r7, [pc, #180]	; (8004df8 <testportCommand+0x1a4>)
 8004d42:	2001      	movs	r0, #1
 8004d44:	f00a fc2e 	bl	800f5a4 <HAL_Delay>
 8004d48:	783b      	ldrb	r3, [r7, #0]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	4453      	add	r3, sl
 8004d50:	5d9b      	ldrb	r3, [r3, r6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f5      	beq.n	8004d42 <testportCommand+0xee>
 8004d56:	e7a8      	b.n	8004caa <testportCommand+0x56>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004d58:	002a      	movs	r2, r5
 8004d5a:	492c      	ldr	r1, [pc, #176]	; (8004e0c <testportCommand+0x1b8>)
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	f00e fa49 	bl	80131f4 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004d62:	0020      	movs	r0, r4
 8004d64:	f7fb f9d8 	bl	8000118 <strlen>
 8004d68:	b282      	uxth	r2, r0
 8004d6a:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <testportCommand+0x1a4>)
 8004d6c:	7818      	ldrb	r0, [r3, #0]
 8004d6e:	2364      	movs	r3, #100	; 0x64
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	3b5a      	subs	r3, #90	; 0x5a
 8004d74:	0021      	movs	r1, r4
 8004d76:	f008 fae9 	bl	800d34c <writePxMutex>
 8004d7a:	e7c5      	b.n	8004d08 <testportCommand+0xb4>
	else if (pcParameterString1[0] == 'p') {
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	56eb      	ldrsb	r3, [r5, r3]
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d005      	beq.n	8004d90 <testportCommand+0x13c>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004d84:	220f      	movs	r2, #15
 8004d86:	4922      	ldr	r1, [pc, #136]	; (8004e10 <testportCommand+0x1bc>)
 8004d88:	0020      	movs	r0, r4
 8004d8a:	f00e f830 	bl	8012dee <memcpy>
 8004d8e:	e78f      	b.n	8004cb0 <testportCommand+0x5c>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8004d90:	1c68      	adds	r0, r5, #1
 8004d92:	f00d fda2 	bl	80128da <atol>
 8004d96:	0005      	movs	r5, r0
 8004d98:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 8004d9a:	1e7b      	subs	r3, r7, #1
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d820      	bhi.n	8004de2 <testportCommand+0x18e>
        WriteVaule[0]=rand();
 8004da0:	f00e f846 	bl	8012e30 <rand>
 8004da4:	ae02      	add	r6, sp, #8
 8004da6:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8004da8:	2364      	movs	r3, #100	; 0x64
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	3b32      	subs	r3, #50	; 0x32
 8004dae:	2201      	movs	r2, #1
 8004db0:	0031      	movs	r1, r6
 8004db2:	0038      	movs	r0, r7
 8004db4:	f008 faca 	bl	800d34c <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8004db8:	0038      	movs	r0, r7
 8004dba:	f7ff fd3d 	bl	8004838 <GetUart>
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8004dc2:	7832      	ldrb	r2, [r6, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d105      	bne.n	8004dd6 <testportCommand+0x182>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8004dca:	b2ea      	uxtb	r2, r5
 8004dcc:	490f      	ldr	r1, [pc, #60]	; (8004e0c <testportCommand+0x1b8>)
 8004dce:	0020      	movs	r0, r4
 8004dd0:	f00e fa10 	bl	80131f4 <sprintf>
 8004dd4:	e76c      	b.n	8004cb0 <testportCommand+0x5c>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8004dd6:	b2ea      	uxtb	r2, r5
 8004dd8:	4909      	ldr	r1, [pc, #36]	; (8004e00 <testportCommand+0x1ac>)
 8004dda:	0020      	movs	r0, r4
 8004ddc:	f00e fa0a 	bl	80131f4 <sprintf>
 8004de0:	e766      	b.n	8004cb0 <testportCommand+0x5c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8004de2:	221b      	movs	r2, #27
 8004de4:	490b      	ldr	r1, [pc, #44]	; (8004e14 <testportCommand+0x1c0>)
 8004de6:	0020      	movs	r0, r4
 8004de8:	f00e f801 	bl	8012dee <memcpy>
	return pdFALSE;
 8004dec:	e760      	b.n	8004cb0 <testportCommand+0x5c>
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	080175f0 	.word	0x080175f0
 8004df4:	08017fc4 	.word	0x08017fc4
 8004df8:	20000a2f 	.word	0x20000a2f
 8004dfc:	2000157c 	.word	0x2000157c
 8004e00:	0801990c 	.word	0x0801990c
 8004e04:	08019920 	.word	0x08019920
 8004e08:	2000143c 	.word	0x2000143c
 8004e0c:	080198f0 	.word	0x080198f0
 8004e10:	08019974 	.word	0x08019974
 8004e14:	08019984 	.word	0x08019984

08004e18 <FindBroadcastRoutes>:
{
 8004e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1a:	46de      	mov	lr, fp
 8004e1c:	4657      	mov	r7, sl
 8004e1e:	464e      	mov	r6, r9
 8004e20:	4645      	mov	r5, r8
 8004e22:	b5e0      	push	{r5, r6, r7, lr}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8004e28:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <FindBroadcastRoutes+0x138>)
 8004e2a:	781d      	ldrb	r5, [r3, #0]
 8004e2c:	1deb      	adds	r3, r5, #7
 8004e2e:	08db      	lsrs	r3, r3, #3
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	466a      	mov	r2, sp
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	469d      	mov	sp, r3
 8004e38:	466c      	mov	r4, sp
	for(m=0 ; m<N ; m++)
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	d00b      	beq.n	8004e56 <FindBroadcastRoutes+0x3e>
 8004e3e:	4a45      	ldr	r2, [pc, #276]	; (8004f54 <FindBroadcastRoutes+0x13c>)
 8004e40:	1e6e      	subs	r6, r5, #1
 8004e42:	b2f6      	uxtb	r6, r6
 8004e44:	3601      	adds	r6, #1
 8004e46:	1936      	adds	r6, r6, r4
		modules[m] = 0;
 8004e48:	2100      	movs	r1, #0
 8004e4a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 8004e4c:	8011      	strh	r1, [r2, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8004e52:	42b3      	cmp	r3, r6
 8004e54:	d1f9      	bne.n	8004e4a <FindBroadcastRoutes+0x32>
	modules[src-1] = ++level;					// Tag the source
 8004e56:	3801      	subs	r0, #1
 8004e58:	2301      	movs	r3, #1
 8004e5a:	5423      	strb	r3, [r4, r0]
 8004e5c:	2216      	movs	r2, #22
 8004e5e:	4342      	muls	r2, r0
 8004e60:	3202      	adds	r2, #2
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <FindBroadcastRoutes+0x140>)
 8004e64:	18d2      	adds	r2, r2, r3
 8004e66:	2100      	movs	r1, #0
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8004e68:	4e3a      	ldr	r6, [pc, #232]	; (8004f54 <FindBroadcastRoutes+0x13c>)
 8004e6a:	0040      	lsls	r0, r0, #1
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8004e70:	3301      	adds	r3, #1
 8004e72:	469c      	mov	ip, r3
 8004e74:	60fd      	str	r5, [r7, #12]
 8004e76:	46a3      	mov	fp, r4
 8004e78:	e003      	b.n	8004e82 <FindBroadcastRoutes+0x6a>
 8004e7a:	3101      	adds	r1, #1
 8004e7c:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8004e7e:	2905      	cmp	r1, #5
 8004e80:	d011      	beq.n	8004ea6 <FindBroadcastRoutes+0x8e>
		if (array[src-1][p]) 
 8004e82:	8813      	ldrh	r3, [r2, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f8      	beq.n	8004e7a <FindBroadcastRoutes+0x62>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8004e88:	5b85      	ldrh	r5, [r0, r6]
 8004e8a:	46a9      	mov	r9, r5
 8004e8c:	4645      	mov	r5, r8
 8004e8e:	408d      	lsls	r5, r1
 8004e90:	46aa      	mov	sl, r5
 8004e92:	464d      	mov	r5, r9
 8004e94:	4654      	mov	r4, sl
 8004e96:	4325      	orrs	r5, r4
 8004e98:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8004e9a:	08db      	lsrs	r3, r3, #3
 8004e9c:	445b      	add	r3, fp
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4664      	mov	r4, ip
 8004ea2:	701c      	strb	r4, [r3, #0]
 8004ea4:	e7e9      	b.n	8004e7a <FindBroadcastRoutes+0x62>
 8004ea6:	68fd      	ldr	r5, [r7, #12]
 8004ea8:	465c      	mov	r4, fp
	++level;													// Move one level
 8004eaa:	2302      	movs	r3, #2
 8004eac:	4699      	mov	r9, r3
		++level;																					// Move one level
 8004eae:	464b      	mov	r3, r9
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	4699      	mov	r9, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	d040      	beq.n	8004f3c <FindBroadcastRoutes+0x124>
 8004eba:	4827      	ldr	r0, [pc, #156]	; (8004f58 <FindBroadcastRoutes+0x140>)
 8004ebc:	2100      	movs	r1, #0
		untaged = 0;																			// Reset the untaged counter
 8004ebe:	2600      	movs	r6, #0
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	425b      	negs	r3, r3
 8004ec4:	444b      	add	r3, r9
 8004ec6:	469c      	mov	ip, r3
 8004ec8:	e02c      	b.n	8004f24 <FindBroadcastRoutes+0x10c>
 8004eca:	3201      	adds	r2, #1
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8004ecc:	2a06      	cmp	r2, #6
 8004ece:	d021      	beq.n	8004f14 <FindBroadcastRoutes+0xfc>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8004ed0:	0053      	lsls	r3, r2, #1
 8004ed2:	5ac3      	ldrh	r3, [r0, r3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f8      	beq.n	8004eca <FindBroadcastRoutes+0xb2>
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	5ce1      	ldrb	r1, [r4, r3]
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	d1f3      	bne.n	8004eca <FindBroadcastRoutes+0xb2>
						bcastRoutes[m] |= (0x01 << (p-1));
 8004ee2:	1e51      	subs	r1, r2, #1
 8004ee4:	468a      	mov	sl, r1
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4655      	mov	r5, sl
 8004eea:	40a9      	lsls	r1, r5
 8004eec:	468a      	mov	sl, r1
 8004eee:	4919      	ldr	r1, [pc, #100]	; (8004f54 <FindBroadcastRoutes+0x13c>)
 8004ef0:	4645      	mov	r5, r8
 8004ef2:	5a69      	ldrh	r1, [r5, r1]
 8004ef4:	468b      	mov	fp, r1
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	465d      	mov	r5, fp
 8004efa:	4329      	orrs	r1, r5
 8004efc:	468a      	mov	sl, r1
 8004efe:	4915      	ldr	r1, [pc, #84]	; (8004f54 <FindBroadcastRoutes+0x13c>)
 8004f00:	4645      	mov	r5, r8
 8004f02:	4656      	mov	r6, sl
 8004f04:	526e      	strh	r6, [r5, r1]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8004f06:	4649      	mov	r1, r9
 8004f08:	54e1      	strb	r1, [r4, r3]
						++untaged;
 8004f0a:	68fe      	ldr	r6, [r7, #12]
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	b2f3      	uxtb	r3, r6
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e7da      	b.n	8004eca <FindBroadcastRoutes+0xb2>
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68fe      	ldr	r6, [r7, #12]
 8004f18:	687d      	ldr	r5, [r7, #4]
 8004f1a:	3101      	adds	r1, #1
 8004f1c:	3016      	adds	r0, #22
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8004f1e:	b2cb      	uxtb	r3, r1
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	d209      	bcs.n	8004f38 <FindBroadcastRoutes+0x120>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004f24:	5c63      	ldrb	r3, [r4, r1]
 8004f26:	4563      	cmp	r3, ip
 8004f28:	d1f7      	bne.n	8004f1a <FindBroadcastRoutes+0x102>
 8004f2a:	004b      	lsls	r3, r1, #1
 8004f2c:	4698      	mov	r8, r3
 8004f2e:	2201      	movs	r2, #1
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	60fe      	str	r6, [r7, #12]
 8004f34:	607d      	str	r5, [r7, #4]
 8004f36:	e7cb      	b.n	8004ed0 <FindBroadcastRoutes+0xb8>
	while (untaged);
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	d1b8      	bne.n	8004eae <FindBroadcastRoutes+0x96>
}
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b005      	add	sp, #20
 8004f42:	bc3c      	pop	{r2, r3, r4, r5}
 8004f44:	4690      	mov	r8, r2
 8004f46:	4699      	mov	r9, r3
 8004f48:	46a2      	mov	sl, r4
 8004f4a:	46ab      	mov	fp, r5
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	2000001c 	.word	0x2000001c
 8004f54:	20000c8c 	.word	0x20000c8c
 8004f58:	20000a30 	.word	0x20000a30

08004f5c <SendMessageFromPort>:
{
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	46de      	mov	lr, fp
 8004f60:	4657      	mov	r7, sl
 8004f62:	464e      	mov	r6, r9
 8004f64:	4645      	mov	r5, r8
 8004f66:	b5e0      	push	{r5, r6, r7, lr}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	4680      	mov	r8, r0
 8004f6c:	9102      	str	r1, [sp, #8]
 8004f6e:	0014      	movs	r4, r2
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	ab10      	add	r3, sp, #64	; 0x40
 8004f74:	881f      	ldrh	r7, [r3, #0]
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8004f76:	0003      	movs	r3, r0
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d100      	bne.n	8004f7e <SendMessageFromPort+0x22>
 8004f7c:	e16a      	b.n	8005254 <SendMessageFromPort+0x2f8>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d159      	bne.n	8005036 <SendMessageFromPort+0xda>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8004f82:	1c93      	adds	r3, r2, #2
 8004f84:	b2db      	uxtb	r3, r3
		return BOS_ERR_WrongParam; 
 8004f86:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d900      	bls.n	8004f8e <SendMessageFromPort+0x32>
 8004f8c:	e144      	b.n	8005218 <SendMessageFromPort+0x2bc>
	TaskPriority = uxTaskPriorityGet( NULL );
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f009 f9c0 	bl	800e314 <uxTaskPriorityGet>
 8004f94:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8004f96:	2105      	movs	r1, #5
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f009 f9cb 	bl	800e334 <vTaskPrioritySet>
	message[0] = 'H';						
 8004f9e:	4bbb      	ldr	r3, [pc, #748]	; (800528c <SendMessageFromPort+0x330>)
 8004fa0:	2248      	movs	r2, #72	; 0x48
 8004fa2:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8004fa4:	3212      	adds	r2, #18
 8004fa6:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8004fa8:	9b02      	ldr	r3, [sp, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d000      	beq.n	8004fb0 <SendMessageFromPort+0x54>
 8004fae:	e167      	b.n	8005280 <SendMessageFromPort+0x324>
		length = messageLength[numberOfParams-1];
 8004fb0:	3f01      	subs	r7, #1
 8004fb2:	4bb7      	ldr	r3, [pc, #732]	; (8005290 <SendMessageFromPort+0x334>)
 8004fb4:	5ddd      	ldrb	r5, [r3, r7]
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8004fb6:	48b5      	ldr	r0, [pc, #724]	; (800528c <SendMessageFromPort+0x330>)
 8004fb8:	00f9      	lsls	r1, r7, #3
 8004fba:	1bc9      	subs	r1, r1, r7
 8004fbc:	00c9      	lsls	r1, r1, #3
 8004fbe:	4fb5      	ldr	r7, [pc, #724]	; (8005294 <SendMessageFromPort+0x338>)
 8004fc0:	19c9      	adds	r1, r1, r7
 8004fc2:	002a      	movs	r2, r5
 8004fc4:	3003      	adds	r0, #3
 8004fc6:	f00d ff12 	bl	8012dee <memcpy>
	message[2] = length;
 8004fca:	4bb0      	ldr	r3, [pc, #704]	; (800528c <SendMessageFromPort+0x330>)
 8004fcc:	469a      	mov	sl, r3
 8004fce:	709d      	strb	r5, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);	
 8004fd0:	1cef      	adds	r7, r5, #3
 8004fd2:	003a      	movs	r2, r7
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	48b0      	ldr	r0, [pc, #704]	; (8005298 <SendMessageFromPort+0x33c>)
 8004fd8:	f00d ff09 	bl	8012dee <memcpy>
	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
 8004fdc:	17fe      	asrs	r6, r7, #31
 8004fde:	2303      	movs	r3, #3
 8004fe0:	469b      	mov	fp, r3
 8004fe2:	401e      	ands	r6, r3
 8004fe4:	19f6      	adds	r6, r6, r7
 8004fe6:	10b6      	asrs	r6, r6, #2
 8004fe8:	0032      	movs	r2, r6
 8004fea:	49ab      	ldr	r1, [pc, #684]	; (8005298 <SendMessageFromPort+0x33c>)
 8004fec:	48ab      	ldr	r0, [pc, #684]	; (800529c <SendMessageFromPort+0x340>)
 8004fee:	f00a fc1c 	bl	800f82a <HAL_CRC_Calculate>
 8004ff2:	4653      	mov	r3, sl
 8004ff4:	55d8      	strb	r0, [r3, r7]
	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
 8004ff6:	465b      	mov	r3, fp
 8004ff8:	423b      	tst	r3, r7
 8004ffa:	d000      	beq.n	8004ffe <SendMessageFromPort+0xa2>
 8004ffc:	e0f4      	b.n	80051e8 <SendMessageFromPort+0x28c>
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8004ffe:	2238      	movs	r2, #56	; 0x38
 8005000:	2100      	movs	r1, #0
 8005002:	48a5      	ldr	r0, [pc, #660]	; (8005298 <SendMessageFromPort+0x33c>)
 8005004:	f00d fefc 	bl	8012e00 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8005008:	3402      	adds	r4, #2
 800500a:	b2e4      	uxtb	r4, r4
 800500c:	2c01      	cmp	r4, #1
 800500e:	d900      	bls.n	8005012 <SendMessageFromPort+0xb6>
 8005010:	e0f4      	b.n	80051fc <SendMessageFromPort+0x2a0>
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <SendMessageFromPort+0xc8>
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <SendMessageFromPort+0xc8>
			src = message[4];
 800501e:	4b9b      	ldr	r3, [pc, #620]	; (800528c <SendMessageFromPort+0x330>)
 8005020:	791b      	ldrb	r3, [r3, #4]
 8005022:	9302      	str	r3, [sp, #8]
		FindBroadcastRoutes(src);
 8005024:	9802      	ldr	r0, [sp, #8]
 8005026:	f7ff fef7 	bl	8004e18 <FindBroadcastRoutes>
 800502a:	2600      	movs	r6, #0
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800502c:	2401      	movs	r4, #1
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 800502e:	4b9c      	ldr	r3, [pc, #624]	; (80052a0 <SendMessageFromPort+0x344>)
 8005030:	4698      	mov	r8, r3
 8005032:	4f9c      	ldr	r7, [pc, #624]	; (80052a4 <SendMessageFromPort+0x348>)
 8005034:	e0fc      	b.n	8005230 <SendMessageFromPort+0x2d4>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <SendMessageFromPort+0xe6>
 800503c:	2a00      	cmp	r2, #0
 800503e:	d100      	bne.n	8005042 <SendMessageFromPort+0xe6>
 8005040:	e10a      	b.n	8005258 <SendMessageFromPort+0x2fc>
	TaskPriority = uxTaskPriorityGet( NULL );
 8005042:	2000      	movs	r0, #0
 8005044:	f009 f966 	bl	800e314 <uxTaskPriorityGet>
 8005048:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 800504a:	2105      	movs	r1, #5
 800504c:	2000      	movs	r0, #0
 800504e:	f009 f971 	bl	800e334 <vTaskPrioritySet>
	message[0] = 'H';						
 8005052:	4b8e      	ldr	r3, [pc, #568]	; (800528c <SendMessageFromPort+0x330>)
 8005054:	2248      	movs	r2, #72	; 0x48
 8005056:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8005058:	3212      	adds	r2, #18
 800505a:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0a6      	beq.n	8004fb0 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d04e      	beq.n	8005106 <SendMessageFromPort+0x1aa>
		message[2] = length;	
 8005068:	4988      	ldr	r1, [pc, #544]	; (800528c <SendMessageFromPort+0x330>)
 800506a:	2300      	movs	r3, #0
 800506c:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 800506e:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8005074:	4a8c      	ldr	r2, [pc, #560]	; (80052a8 <SendMessageFromPort+0x34c>)
 8005076:	79d3      	ldrb	r3, [r2, #7]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	7992      	ldrb	r2, [r2, #6]
 800507c:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 800507e:	22ff      	movs	r2, #255	; 0xff
 8005080:	9803      	ldr	r0, [sp, #12]
 8005082:	4282      	cmp	r2, r0
 8005084:	4192      	sbcs	r2, r2
 8005086:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8005088:	0052      	lsls	r2, r2, #1
 800508a:	4313      	orrs	r3, r2
 800508c:	b2db      	uxtb	r3, r3
 800508e:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8005090:	7188      	strb	r0, [r1, #6]
 8005092:	2200      	movs	r2, #0
 8005094:	4692      	mov	sl, r2
		if (extendCode == true) {
 8005096:	28ff      	cmp	r0, #255	; 0xff
 8005098:	d903      	bls.n	80050a2 <SendMessageFromPort+0x146>
			message[6+shift] = (uint8_t) (code >> 8);		
 800509a:	0a02      	lsrs	r2, r0, #8
 800509c:	71ca      	strb	r2, [r1, #7]
			++shift;
 800509e:	2201      	movs	r2, #1
 80050a0:	4692      	mov	sl, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 80050a2:	2f2e      	cmp	r7, #46	; 0x2e
 80050a4:	d933      	bls.n	800510e <SendMessageFromPort+0x1b2>
			message[5] |= 0x80;		
 80050a6:	2280      	movs	r2, #128	; 0x80
 80050a8:	4252      	negs	r2, r2
 80050aa:	4313      	orrs	r3, r2
 80050ac:	4a77      	ldr	r2, [pc, #476]	; (800528c <SendMessageFromPort+0x330>)
 80050ae:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 80050b0:	4b7e      	ldr	r3, [pc, #504]	; (80052ac <SendMessageFromPort+0x350>)
 80050b2:	801f      	strh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 80050b4:	2500      	movs	r5, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80050b6:	272e      	movs	r7, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80050b8:	4653      	mov	r3, sl
 80050ba:	3307      	adds	r3, #7
 80050bc:	4694      	mov	ip, r2
 80050be:	4463      	add	r3, ip
 80050c0:	9305      	str	r3, [sp, #20]
			while (totalNumberOfParams != 0)
 80050c2:	4b7a      	ldr	r3, [pc, #488]	; (80052ac <SendMessageFromPort+0x350>)
 80050c4:	881e      	ldrh	r6, [r3, #0]
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	d02f      	beq.n	800512a <SendMessageFromPort+0x1ce>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 80050ca:	0039      	movs	r1, r7
 80050cc:	0030      	movs	r0, r6
 80050ce:	f7fb f83f 	bl	8000150 <__udivsi3>
 80050d2:	b280      	uxth	r0, r0
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d145      	bne.n	8005164 <SendMessageFromPort+0x208>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 80050d8:	4b6c      	ldr	r3, [pc, #432]	; (800528c <SendMessageFromPort+0x330>)
 80050da:	795a      	ldrb	r2, [r3, #5]
 80050dc:	237f      	movs	r3, #127	; 0x7f
 80050de:	4013      	ands	r3, r2
 80050e0:	4a6a      	ldr	r2, [pc, #424]	; (800528c <SendMessageFromPort+0x330>)
 80050e2:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80050e4:	4d72      	ldr	r5, [pc, #456]	; (80052b0 <SendMessageFromPort+0x354>)
 80050e6:	882b      	ldrh	r3, [r5, #0]
 80050e8:	4972      	ldr	r1, [pc, #456]	; (80052b4 <SendMessageFromPort+0x358>)
 80050ea:	18c9      	adds	r1, r1, r3
 80050ec:	0032      	movs	r2, r6
 80050ee:	9805      	ldr	r0, [sp, #20]
 80050f0:	f00d fe7d 	bl	8012dee <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	802b      	strh	r3, [r5, #0]
 80050f8:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <SendMessageFromPort+0x350>)
 80050fa:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80050fc:	1d35      	adds	r5, r6, #4
 80050fe:	4455      	add	r5, sl
 8005100:	b2ed      	uxtb	r5, r5
					numberOfParams = totalNumberOfParams;
 8005102:	0037      	movs	r7, r6
 8005104:	e7dd      	b.n	80050c2 <SendMessageFromPort+0x166>
		if (src == 0)		src = myID;
 8005106:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <SendMessageFromPort+0x348>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	e7ac      	b.n	8005068 <SendMessageFromPort+0x10c>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800510e:	4653      	mov	r3, sl
 8005110:	3307      	adds	r3, #7
 8005112:	485e      	ldr	r0, [pc, #376]	; (800528c <SendMessageFromPort+0x330>)
 8005114:	18c0      	adds	r0, r0, r3
 8005116:	4b66      	ldr	r3, [pc, #408]	; (80052b0 <SendMessageFromPort+0x354>)
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	4966      	ldr	r1, [pc, #408]	; (80052b4 <SendMessageFromPort+0x358>)
 800511c:	18c9      	adds	r1, r1, r3
 800511e:	003a      	movs	r2, r7
 8005120:	f00d fe65 	bl	8012dee <memcpy>
			length = numberOfParams + shift + 4;
 8005124:	1d3d      	adds	r5, r7, #4
 8005126:	4455      	add	r5, sl
 8005128:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true)
 800512a:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <SendMessageFromPort+0x35c>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d100      	bne.n	8005134 <SendMessageFromPort+0x1d8>
 8005132:	e74a      	b.n	8004fca <SendMessageFromPort+0x6e>
			if (dstGroupID < BOS_BROADCAST)
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <SendMessageFromPort+0x360>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2bff      	cmp	r3, #255	; 0xff
 800513a:	d100      	bne.n	800513e <SendMessageFromPort+0x1e2>
 800513c:	e090      	b.n	8005260 <SendMessageFromPort+0x304>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800513e:	4a60      	ldr	r2, [pc, #384]	; (80052c0 <SendMessageFromPort+0x364>)
 8005140:	7812      	ldrb	r2, [r2, #0]
 8005142:	4694      	mov	ip, r2
 8005144:	2a00      	cmp	r2, #0
 8005146:	d04d      	beq.n	80051e4 <SendMessageFromPort+0x288>
 8005148:	2601      	movs	r6, #1
 800514a:	409e      	lsls	r6, r3
 800514c:	485d      	ldr	r0, [pc, #372]	; (80052c4 <SendMessageFromPort+0x368>)
 800514e:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8005150:	2100      	movs	r1, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <SendMessageFromPort+0x330>)
 8005154:	4691      	mov	r9, r2
 8005156:	44b9      	add	r9, r7
 8005158:	0022      	movs	r2, r4
 800515a:	4664      	mov	r4, ip
 800515c:	46ac      	mov	ip, r5
 800515e:	4655      	mov	r5, sl
 8005160:	4692      	mov	sl, r2
 8005162:	e017      	b.n	8005194 <SendMessageFromPort+0x238>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8005164:	9700      	str	r7, [sp, #0]
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	0022      	movs	r2, r4
 800516a:	9902      	ldr	r1, [sp, #8]
 800516c:	4640      	mov	r0, r8
 800516e:	f7ff fef5 	bl	8004f5c <SendMessageFromPort>
					osDelay(10);
 8005172:	200a      	movs	r0, #10
 8005174:	f008 f9df 	bl	800d536 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8005178:	4a4c      	ldr	r2, [pc, #304]	; (80052ac <SendMessageFromPort+0x350>)
 800517a:	8813      	ldrh	r3, [r2, #0]
 800517c:	1bdb      	subs	r3, r3, r7
 800517e:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 8005180:	4a4b      	ldr	r2, [pc, #300]	; (80052b0 <SendMessageFromPort+0x354>)
 8005182:	8813      	ldrh	r3, [r2, #0]
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	8013      	strh	r3, [r2, #0]
 8005188:	e79b      	b.n	80050c2 <SendMessageFromPort+0x166>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800518a:	3301      	adds	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	3002      	adds	r0, #2
 8005190:	42a3      	cmp	r3, r4
 8005192:	d80d      	bhi.n	80051b0 <SendMessageFromPort+0x254>
					if (InGroup(i, dstGroupID))
 8005194:	8802      	ldrh	r2, [r0, #0]
 8005196:	4216      	tst	r6, r2
 8005198:	d0f7      	beq.n	800518a <SendMessageFromPort+0x22e>
						++groupMembers;							// Add this member
 800519a:	3101      	adds	r1, #1
 800519c:	b2c9      	uxtb	r1, r1
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800519e:	187a      	adds	r2, r7, r1
 80051a0:	3201      	adds	r2, #1
 80051a2:	2a2d      	cmp	r2, #45	; 0x2d
 80051a4:	dc5a      	bgt.n	800525c <SendMessageFromPort+0x300>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80051a6:	464a      	mov	r2, r9
 80051a8:	1852      	adds	r2, r2, r1
 80051aa:	1952      	adds	r2, r2, r5
 80051ac:	7193      	strb	r3, [r2, #6]
 80051ae:	e7ec      	b.n	800518a <SendMessageFromPort+0x22e>
 80051b0:	4654      	mov	r4, sl
 80051b2:	46aa      	mov	sl, r5
 80051b4:	4665      	mov	r5, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80051b6:	4653      	mov	r3, sl
 80051b8:	3307      	adds	r3, #7
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	185b      	adds	r3, r3, r1
 80051be:	4a33      	ldr	r2, [pc, #204]	; (800528c <SendMessageFromPort+0x330>)
 80051c0:	54d1      	strb	r1, [r2, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80051c2:	187f      	adds	r7, r7, r1
 80051c4:	3702      	adds	r7, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80051c6:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80051c8:	2f2d      	cmp	r7, #45	; 0x2d
 80051ca:	dc25      	bgt.n	8005218 <SendMessageFromPort+0x2bc>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80051cc:	483e      	ldr	r0, [pc, #248]	; (80052c8 <SendMessageFromPort+0x36c>)
 80051ce:	7802      	ldrb	r2, [r0, #0]
 80051d0:	3201      	adds	r2, #1
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	7002      	strb	r2, [r0, #0]
 80051d6:	482d      	ldr	r0, [pc, #180]	; (800528c <SendMessageFromPort+0x330>)
 80051d8:	18c3      	adds	r3, r0, r3
 80051da:	705a      	strb	r2, [r3, #1]
 80051dc:	3502      	adds	r5, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80051de:	186d      	adds	r5, r5, r1
 80051e0:	b2ed      	uxtb	r5, r5
 80051e2:	e6f2      	b.n	8004fca <SendMessageFromPort+0x6e>
			uint8_t groupMembers = 0;
 80051e4:	2100      	movs	r1, #0
 80051e6:	e7e6      	b.n	80051b6 <SendMessageFromPort+0x25a>
		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
 80051e8:	00b6      	lsls	r6, r6, #2
 80051ea:	492b      	ldr	r1, [pc, #172]	; (8005298 <SendMessageFromPort+0x33c>)
 80051ec:	1871      	adds	r1, r6, r1
 80051ee:	2201      	movs	r2, #1
 80051f0:	482a      	ldr	r0, [pc, #168]	; (800529c <SendMessageFromPort+0x340>)
 80051f2:	f00a faee 	bl	800f7d2 <HAL_CRC_Accumulate>
 80051f6:	4b25      	ldr	r3, [pc, #148]	; (800528c <SendMessageFromPort+0x330>)
 80051f8:	55d8      	strb	r0, [r3, r7]
 80051fa:	e700      	b.n	8004ffe <SendMessageFromPort+0xa2>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 80051fc:	1d2a      	adds	r2, r5, #4
 80051fe:	2332      	movs	r3, #50	; 0x32
 8005200:	4922      	ldr	r1, [pc, #136]	; (800528c <SendMessageFromPort+0x330>)
 8005202:	4640      	mov	r0, r8
 8005204:	f008 f8ec 	bl	800d3e0 <writePxDMAMutex>
	vTaskPrioritySet( NULL, TaskPriority );
 8005208:	9904      	ldr	r1, [sp, #16]
 800520a:	2000      	movs	r0, #0
 800520c:	f009 f892 	bl	800e334 <vTaskPrioritySet>
	responseStatus = BOS_ERR_NoResponse;
 8005210:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <SendMessageFromPort+0x370>)
 8005212:	2202      	movs	r2, #2
 8005214:	701a      	strb	r2, [r3, #0]
	return result;
 8005216:	2000      	movs	r0, #0
}
 8005218:	b007      	add	sp, #28
 800521a:	bc3c      	pop	{r2, r3, r4, r5}
 800521c:	4690      	mov	r8, r2
 800521e:	4699      	mov	r9, r3
 8005220:	46a2      	mov	sl, r4
 8005222:	46ab      	mov	fp, r5
 8005224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8005226:	3401      	adds	r4, #1
 8005228:	b2e4      	uxtb	r4, r4
 800522a:	3601      	adds	r6, #1
 800522c:	2c06      	cmp	r4, #6
 800522e:	d0eb      	beq.n	8005208 <SendMessageFromPort+0x2ac>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8005230:	783b      	ldrb	r3, [r7, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4642      	mov	r2, r8
 8005238:	5a9b      	ldrh	r3, [r3, r2]
 800523a:	4133      	asrs	r3, r6
 800523c:	07db      	lsls	r3, r3, #31
 800523e:	d5f2      	bpl.n	8005226 <SendMessageFromPort+0x2ca>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8005240:	1d2a      	adds	r2, r5, #4
 8005242:	2332      	movs	r3, #50	; 0x32
 8005244:	4911      	ldr	r1, [pc, #68]	; (800528c <SendMessageFromPort+0x330>)
 8005246:	0020      	movs	r0, r4
 8005248:	f008 f8ca 	bl	800d3e0 <writePxDMAMutex>
				Delay_ms(1);
 800524c:	2001      	movs	r0, #1
 800524e:	f00a f9a9 	bl	800f5a4 <HAL_Delay>
 8005252:	e7e8      	b.n	8005226 <SendMessageFromPort+0x2ca>
		return BOS_ERR_WrongParam; 
 8005254:	2067      	movs	r0, #103	; 0x67
 8005256:	e7df      	b.n	8005218 <SendMessageFromPort+0x2bc>
 8005258:	2067      	movs	r0, #103	; 0x67
 800525a:	e7dd      	b.n	8005218 <SendMessageFromPort+0x2bc>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800525c:	2069      	movs	r0, #105	; 0x69
 800525e:	e7db      	b.n	8005218 <SendMessageFromPort+0x2bc>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8005260:	1c7b      	adds	r3, r7, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8005262:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8005264:	2b2d      	cmp	r3, #45	; 0x2d
 8005266:	dcd7      	bgt.n	8005218 <SendMessageFromPort+0x2bc>
				message[7+shift+numberOfParams] = ++bcastID;
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <SendMessageFromPort+0x36c>)
 800526a:	7813      	ldrb	r3, [r2, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	7013      	strb	r3, [r2, #0]
 8005272:	4a06      	ldr	r2, [pc, #24]	; (800528c <SendMessageFromPort+0x330>)
 8005274:	19d7      	adds	r7, r2, r7
 8005276:	4457      	add	r7, sl
 8005278:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 800527a:	3501      	adds	r5, #1
 800527c:	b2ed      	uxtb	r5, r5
 800527e:	e6a4      	b.n	8004fca <SendMessageFromPort+0x6e>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d100      	bne.n	8005288 <SendMessageFromPort+0x32c>
 8005286:	e693      	b.n	8004fb0 <SendMessageFromPort+0x54>
 8005288:	e6ee      	b.n	8005068 <SendMessageFromPort+0x10c>
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20001054 	.word	0x20001054
 8005290:	2000108c 	.word	0x2000108c
 8005294:	20000d48 	.word	0x20000d48
 8005298:	20001584 	.word	0x20001584
 800529c:	20006c24 	.word	0x20006c24
 80052a0:	20000c8c 	.word	0x20000c8c
 80052a4:	200011c8 	.word	0x200011c8
 80052a8:	20006894 	.word	0x20006894
 80052ac:	20001318 	.word	0x20001318
 80052b0:	20001290 	.word	0x20001290
 80052b4:	20001094 	.word	0x20001094
 80052b8:	20000a2c 	.word	0x20000a2c
 80052bc:	2000001d 	.word	0x2000001d
 80052c0:	2000001c 	.word	0x2000001c
 80052c4:	20000f08 	.word	0x20000f08
 80052c8:	20000c8a 	.word	0x20000c8a
 80052cc:	200012c0 	.word	0x200012c0

080052d0 <BroadcastReceivedMessage>:
{
 80052d0:	b500      	push	{lr}
 80052d2:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <BroadcastReceivedMessage+0x38>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <BroadcastReceivedMessage+0x3c>)
 80052dc:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80052de:	28ff      	cmp	r0, #255	; 0xff
 80052e0:	d009      	beq.n	80052f6 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80052e2:	9100      	str	r1, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	22fe      	movs	r2, #254	; 0xfe
 80052e8:	2100      	movs	r1, #0
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7ff fe36 	bl	8004f5c <SendMessageFromPort>
}
 80052f0:	2000      	movs	r0, #0
 80052f2:	b003      	add	sp, #12
 80052f4:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 80052f6:	9100      	str	r1, [sp, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	32ff      	adds	r2, #255	; 0xff
 80052fc:	2100      	movs	r1, #0
 80052fe:	2000      	movs	r0, #0
 8005300:	f7ff fe2c 	bl	8004f5c <SendMessageFromPort>
 8005304:	e7f4      	b.n	80052f0 <BroadcastReceivedMessage+0x20>
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	20000a2c 	.word	0x20000a2c
 800530c:	2000001d 	.word	0x2000001d

08005310 <BroadcastMessage>:
{
 8005310:	b530      	push	{r4, r5, lr}
 8005312:	b083      	sub	sp, #12
 8005314:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8005316:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <BroadcastMessage+0x44>)
 8005318:	2501      	movs	r5, #1
 800531a:	701d      	strb	r5, [r3, #0]
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <BroadcastMessage+0x48>)
 800531e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8005320:	29ff      	cmp	r1, #255	; 0xff
 8005322:	d00e      	beq.n	8005342 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8005324:	9400      	str	r4, [sp, #0]
 8005326:	0013      	movs	r3, r2
 8005328:	22fe      	movs	r2, #254	; 0xfe
 800532a:	0001      	movs	r1, r0
 800532c:	2000      	movs	r0, #0
 800532e:	f7ff fe15 	bl	8004f5c <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8005332:	0022      	movs	r2, r4
 8005334:	2100      	movs	r1, #0
 8005336:	4809      	ldr	r0, [pc, #36]	; (800535c <BroadcastMessage+0x4c>)
 8005338:	f00d fd62 	bl	8012e00 <memset>
}
 800533c:	2000      	movs	r0, #0
 800533e:	b003      	add	sp, #12
 8005340:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8005342:	9400      	str	r4, [sp, #0]
 8005344:	0013      	movs	r3, r2
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	0001      	movs	r1, r0
 800534a:	2000      	movs	r0, #0
 800534c:	f7ff fe06 	bl	8004f5c <SendMessageFromPort>
 8005350:	e7ef      	b.n	8005332 <BroadcastMessage+0x22>
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	20000a2c 	.word	0x20000a2c
 8005358:	2000001d 	.word	0x2000001d
 800535c:	20001094 	.word	0x20001094

08005360 <ExploreNeighbors>:
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b083      	sub	sp, #12
 8005364:	0007      	movs	r7, r0
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8005366:	2401      	movs	r4, #1
			messageParams[0] = (uint8_t) (myPN >> 8);
 8005368:	4d0d      	ldr	r5, [pc, #52]	; (80053a0 <ExploreNeighbors+0x40>)
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800536a:	2603      	movs	r6, #3
		if (port != ignore) 
 800536c:	42a7      	cmp	r7, r4
 800536e:	d00f      	beq.n	8005390 <ExploreNeighbors+0x30>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <ExploreNeighbors+0x44>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	0a1a      	lsrs	r2, r3, #8
 8005376:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8005378:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 800537a:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800537c:	9600      	str	r6, [sp, #0]
 800537e:	230a      	movs	r3, #10
 8005380:	2200      	movs	r2, #0
 8005382:	2100      	movs	r1, #0
 8005384:	0020      	movs	r0, r4
 8005386:	f7ff fde9 	bl	8004f5c <SendMessageFromPort>
			osDelay(10);
 800538a:	200a      	movs	r0, #10
 800538c:	f008 f8d3 	bl	800d536 <osDelay>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8005390:	3401      	adds	r4, #1
 8005392:	b2e4      	uxtb	r4, r4
 8005394:	2c06      	cmp	r4, #6
 8005396:	d1e9      	bne.n	800536c <ExploreNeighbors+0xc>
}
 8005398:	2000      	movs	r0, #0
 800539a:	b003      	add	sp, #12
 800539c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	20001094 	.word	0x20001094
 80053a4:	2000001e 	.word	0x2000001e

080053a8 <StartMicroDelay>:
{
 80053a8:	b510      	push	{r4, lr}
 80053aa:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 80053ac:	f009 ff88 	bl	800f2c0 <vPortEnterCritical>
	if (Delay)
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d006      	beq.n	80053c2 <StartMicroDelay+0x1a>
		t0 = htim14.Instance->CNT;
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <StartMicroDelay+0x20>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim14.Instance->CNT - t0 <= Delay) {};
 80053ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80053bc:	1a5b      	subs	r3, r3, r1
 80053be:	42a3      	cmp	r3, r4
 80053c0:	d9fb      	bls.n	80053ba <StartMicroDelay+0x12>
	portEXIT_CRITICAL();
 80053c2:	f009 ff89 	bl	800f2d8 <vPortExitCritical>
}
 80053c6:	bd10      	pop	{r4, pc}
 80053c8:	200068b0 	.word	0x200068b0

080053cc <CheckAttachedButtons>:
{
 80053cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ce:	46de      	mov	lr, fp
 80053d0:	4657      	mov	r7, sl
 80053d2:	464e      	mov	r6, r9
 80053d4:	4645      	mov	r5, r8
 80053d6:	b5e0      	push	{r5, r6, r7, lr}
 80053d8:	b089      	sub	sp, #36	; 0x24
 80053da:	4dbd      	ldr	r5, [pc, #756]	; (80056d0 <CheckAttachedButtons+0x304>)
 80053dc:	2404      	movs	r4, #4
 80053de:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	469b      	mov	fp, r3
 80053e4:	4699      	mov	r9, r3
 80053e6:	e111      	b.n	800560c <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80053e8:	230e      	movs	r3, #14
 80053ea:	aa02      	add	r2, sp, #8
 80053ec:	4694      	mov	ip, r2
 80053ee:	4463      	add	r3, ip
 80053f0:	8819      	ldrh	r1, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	9807      	ldr	r0, [sp, #28]
 80053f6:	f00b f9a1 	bl	801073c <HAL_GPIO_WritePin>
 80053fa:	200a      	movs	r0, #10
 80053fc:	f7ff ffd4 	bl	80053a8 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8005400:	ab05      	add	r3, sp, #20
 8005402:	8819      	ldrh	r1, [r3, #0]
 8005404:	9806      	ldr	r0, [sp, #24]
 8005406:	f00b f993 	bl	8010730 <HAL_GPIO_ReadPin>
 800540a:	4681      	mov	r9, r0
 800540c:	e126      	b.n	800565c <CheckAttachedButtons+0x290>
			switch (button[i].type)
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 8005412:	464b      	mov	r3, r9
 8005414:	2b01      	cmp	r3, #1
 8005416:	d046      	beq.n	80054a6 <CheckAttachedButtons+0xda>
					else if (connected == GPIO_PIN_RESET)
 8005418:	2b00      	cmp	r3, #0
 800541a:	d100      	bne.n	800541e <CheckAttachedButtons+0x52>
 800541c:	e1c6      	b.n	80057ac <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON)												
 800541e:	465b      	mov	r3, fp
 8005420:	2b04      	cmp	r3, #4
 8005422:	d001      	beq.n	8005428 <CheckAttachedButtons+0x5c>
 8005424:	2b02      	cmp	r3, #2
 8005426:	d107      	bne.n	8005438 <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)	
 8005428:	4baa      	ldr	r3, [pc, #680]	; (80056d4 <CheckAttachedButtons+0x308>)
 800542a:	58e3      	ldr	r3, [r4, r3]
 800542c:	4aaa      	ldr	r2, [pc, #680]	; (80056d8 <CheckAttachedButtons+0x30c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d842      	bhi.n	80054b8 <CheckAttachedButtons+0xec>
					++pressCounter[i];																			// Advance the debounce counter
 8005432:	3301      	adds	r3, #1
 8005434:	4aa7      	ldr	r2, [pc, #668]	; (80056d4 <CheckAttachedButtons+0x308>)
 8005436:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF)												
 8005438:	23fd      	movs	r3, #253	; 0xfd
 800543a:	465a      	mov	r2, fp
 800543c:	4013      	ands	r3, r2
 800543e:	2b01      	cmp	r3, #1
 8005440:	d100      	bne.n	8005444 <CheckAttachedButtons+0x78>
 8005442:	e1b7      	b.n	80057b4 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8005444:	4ba3      	ldr	r3, [pc, #652]	; (80056d4 <CheckAttachedButtons+0x308>)
 8005446:	58e3      	ldr	r3, [r4, r3]
 8005448:	4aa4      	ldr	r2, [pc, #656]	; (80056dc <CheckAttachedButtons+0x310>)
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	4293      	cmp	r3, r2
 800544e:	d36f      	bcc.n	8005530 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce)
 8005450:	d045      	beq.n	80054de <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8005452:	4ba3      	ldr	r3, [pc, #652]	; (80056e0 <CheckAttachedButtons+0x314>)
 8005454:	58e3      	ldr	r3, [r4, r3]
 8005456:	429a      	cmp	r2, r3
 8005458:	d202      	bcs.n	8005460 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;					
 800545a:	4ba1      	ldr	r3, [pc, #644]	; (80056e0 <CheckAttachedButtons+0x314>)
 800545c:	2200      	movs	r2, #0
 800545e:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8005460:	4b9c      	ldr	r3, [pc, #624]	; (80056d4 <CheckAttachedButtons+0x308>)
 8005462:	58e3      	ldr	r3, [r4, r3]
 8005464:	4a9d      	ldr	r2, [pc, #628]	; (80056dc <CheckAttachedButtons+0x310>)
 8005466:	8852      	ldrh	r2, [r2, #2]
 8005468:	4293      	cmp	r3, r2
 800546a:	d952      	bls.n	8005512 <CheckAttachedButtons+0x146>
 800546c:	22f4      	movs	r2, #244	; 0xf4
 800546e:	32ff      	adds	r2, #255	; 0xff
 8005470:	4293      	cmp	r3, r2
 8005472:	d84e      	bhi.n	8005512 <CheckAttachedButtons+0x146>
					if (clicked == 0)
 8005474:	4b9b      	ldr	r3, [pc, #620]	; (80056e4 <CheckAttachedButtons+0x318>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d137      	bne.n	80054ec <CheckAttachedButtons+0x120>
						clicked = 1;																					// Record a possible single click 
 800547c:	4b99      	ldr	r3, [pc, #612]	; (80056e4 <CheckAttachedButtons+0x318>)
 800547e:	3af3      	subs	r2, #243	; 0xf3
 8005480:	3aff      	subs	r2, #255	; 0xff
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e054      	b.n	8005530 <CheckAttachedButtons+0x164>
					if (connected == GPIO_PIN_SET)	
 8005486:	464b      	mov	r3, r9
 8005488:	2b01      	cmp	r3, #1
 800548a:	d00f      	beq.n	80054ac <CheckAttachedButtons+0xe0>
					else if (connected == GPIO_PIN_RESET) 
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1c6      	bne.n	800541e <CheckAttachedButtons+0x52>
						state = OPEN;	
 8005490:	2303      	movs	r3, #3
 8005492:	469b      	mov	fp, r3
 8005494:	e18e      	b.n	80057b4 <CheckAttachedButtons+0x3e8>
					if (connected == GPIO_PIN_SET)	
 8005496:	464b      	mov	r3, r9
 8005498:	2b01      	cmp	r3, #1
 800549a:	d00a      	beq.n	80054b2 <CheckAttachedButtons+0xe6>
					else if (connected == GPIO_PIN_RESET) 
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1be      	bne.n	800541e <CheckAttachedButtons+0x52>
						state = OFF;
 80054a0:	2301      	movs	r3, #1
 80054a2:	469b      	mov	fp, r3
 80054a4:	e186      	b.n	80057b4 <CheckAttachedButtons+0x3e8>
						state = CLOSED;
 80054a6:	2304      	movs	r3, #4
 80054a8:	469b      	mov	fp, r3
 80054aa:	e7bd      	b.n	8005428 <CheckAttachedButtons+0x5c>
						state = CLOSED;
 80054ac:	2304      	movs	r3, #4
 80054ae:	469b      	mov	fp, r3
 80054b0:	e7ba      	b.n	8005428 <CheckAttachedButtons+0x5c>
 80054b2:	2302      	movs	r3, #2
 80054b4:	469b      	mov	fp, r3
 80054b6:	e7b7      	b.n	8005428 <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80054b8:	4b86      	ldr	r3, [pc, #536]	; (80056d4 <CheckAttachedButtons+0x308>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	50e2      	str	r2, [r4, r3]
 80054be:	e7bb      	b.n	8005438 <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 80054c0:	4b87      	ldr	r3, [pc, #540]	; (80056e0 <CheckAttachedButtons+0x314>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	50e2      	str	r2, [r4, r3]
 80054c6:	e17e      	b.n	80057c6 <CheckAttachedButtons+0x3fa>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80054c8:	4b87      	ldr	r3, [pc, #540]	; (80056e8 <CheckAttachedButtons+0x31c>)
 80054ca:	5cf3      	ldrb	r3, [r6, r3]
 80054cc:	4a83      	ldr	r2, [pc, #524]	; (80056dc <CheckAttachedButtons+0x310>)
 80054ce:	7952      	ldrb	r2, [r2, #5]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d200      	bcs.n	80054d6 <CheckAttachedButtons+0x10a>
 80054d4:	e183      	b.n	80057de <CheckAttachedButtons+0x412>
					++dblCounter[i];			
 80054d6:	3301      	adds	r3, #1
 80054d8:	4a83      	ldr	r2, [pc, #524]	; (80056e8 <CheckAttachedButtons+0x31c>)
 80054da:	54b3      	strb	r3, [r6, r2]
 80054dc:	e7b2      	b.n	8005444 <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80054de:	2107      	movs	r1, #7
 80054e0:	4640      	mov	r0, r8
 80054e2:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 80054e4:	3301      	adds	r3, #1
 80054e6:	497b      	ldr	r1, [pc, #492]	; (80056d4 <CheckAttachedButtons+0x308>)
 80054e8:	5063      	str	r3, [r4, r1]
 80054ea:	e7b2      	b.n	8005452 <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d11f      	bne.n	8005530 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 80054f0:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <CheckAttachedButtons+0x31c>)
 80054f2:	5cf3      	ldrb	r3, [r6, r3]
 80054f4:	4a79      	ldr	r2, [pc, #484]	; (80056dc <CheckAttachedButtons+0x310>)
 80054f6:	7912      	ldrb	r2, [r2, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d219      	bcs.n	8005530 <CheckAttachedButtons+0x164>
 80054fc:	4a77      	ldr	r2, [pc, #476]	; (80056dc <CheckAttachedButtons+0x310>)
 80054fe:	7952      	ldrb	r2, [r2, #5]
 8005500:	429a      	cmp	r2, r3
 8005502:	d915      	bls.n	8005530 <CheckAttachedButtons+0x164>
							clicked = 3;																				// Record a possible double click 
 8005504:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <CheckAttachedButtons+0x318>)
 8005506:	2203      	movs	r2, #3
 8005508:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800550a:	4b77      	ldr	r3, [pc, #476]	; (80056e8 <CheckAttachedButtons+0x31c>)
 800550c:	2200      	movs	r2, #0
 800550e:	54f2      	strb	r2, [r6, r3]
 8005510:	e00e      	b.n	8005530 <CheckAttachedButtons+0x164>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8005512:	3bf5      	subs	r3, #245	; 0xf5
 8005514:	3bff      	subs	r3, #255	; 0xff
 8005516:	4a75      	ldr	r2, [pc, #468]	; (80056ec <CheckAttachedButtons+0x320>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d809      	bhi.n	8005530 <CheckAttachedButtons+0x164>
					if (clicked)	clicked = 0;															// Cannot be a click
 800551c:	4b71      	ldr	r3, [pc, #452]	; (80056e4 <CheckAttachedButtons+0x318>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <CheckAttachedButtons+0x15e>
 8005524:	4b6f      	ldr	r3, [pc, #444]	; (80056e4 <CheckAttachedButtons+0x318>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800552a:	9803      	ldr	r0, [sp, #12]
 800552c:	f7fe fef8 	bl	8004320 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8005530:	4b6b      	ldr	r3, [pc, #428]	; (80056e0 <CheckAttachedButtons+0x314>)
 8005532:	58e3      	ldr	r3, [r4, r3]
 8005534:	4a69      	ldr	r2, [pc, #420]	; (80056dc <CheckAttachedButtons+0x310>)
 8005536:	8812      	ldrh	r2, [r2, #0]
 8005538:	4293      	cmp	r3, r2
 800553a:	d34d      	bcc.n	80055d8 <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800553c:	d02b      	beq.n	8005596 <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800553e:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <CheckAttachedButtons+0x308>)
 8005540:	58e3      	ldr	r3, [r4, r3]
 8005542:	429a      	cmp	r2, r3
 8005544:	d202      	bcs.n	800554c <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;				
 8005546:	4b63      	ldr	r3, [pc, #396]	; (80056d4 <CheckAttachedButtons+0x308>)
 8005548:	2200      	movs	r2, #0
 800554a:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <CheckAttachedButtons+0x314>)
 800554e:	58e3      	ldr	r3, [r4, r3]
 8005550:	4a62      	ldr	r2, [pc, #392]	; (80056dc <CheckAttachedButtons+0x310>)
 8005552:	8852      	ldrh	r2, [r2, #2]
 8005554:	4293      	cmp	r3, r2
 8005556:	d93a      	bls.n	80055ce <CheckAttachedButtons+0x202>
 8005558:	22f4      	movs	r2, #244	; 0xf4
 800555a:	32ff      	adds	r2, #255	; 0xff
 800555c:	4293      	cmp	r3, r2
 800555e:	d836      	bhi.n	80055ce <CheckAttachedButtons+0x202>
					if (clicked == 1)
 8005560:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <CheckAttachedButtons+0x318>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d01d      	beq.n	80055a4 <CheckAttachedButtons+0x1d8>
					else if (clicked == 3)
 8005568:	2b03      	cmp	r3, #3
 800556a:	d135      	bne.n	80055d8 <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 800556c:	3303      	adds	r3, #3
 800556e:	4642      	mov	r2, r8
 8005570:	7253      	strb	r3, [r2, #9]
						clicked = 0;																					// Prepare for a single click					
 8005572:	4b5c      	ldr	r3, [pc, #368]	; (80056e4 <CheckAttachedButtons+0x318>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8005578:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <CheckAttachedButtons+0x324>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d13f      	bne.n	8005600 <CheckAttachedButtons+0x234>
 8005580:	4643      	mov	r3, r8
 8005582:	7c5b      	ldrb	r3, [r3, #17]
 8005584:	079b      	lsls	r3, r3, #30
 8005586:	d53b      	bpl.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <CheckAttachedButtons+0x324>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800558e:	9803      	ldr	r0, [sp, #12]
 8005590:	f7fe ff45 	bl	800441e <buttonDblClickedCallback>
 8005594:	e034      	b.n	8005600 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8005596:	2108      	movs	r1, #8
 8005598:	4640      	mov	r0, r8
 800559a:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 800559c:	3301      	adds	r3, #1
 800559e:	4950      	ldr	r1, [pc, #320]	; (80056e0 <CheckAttachedButtons+0x314>)
 80055a0:	5063      	str	r3, [r4, r1]
 80055a2:	e7cc      	b.n	800553e <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;														// Record a single button click event
 80055a4:	3304      	adds	r3, #4
 80055a6:	4642      	mov	r2, r8
 80055a8:	7253      	strb	r3, [r2, #9]
						clicked = 2;																					// Prepare for a double click
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <CheckAttachedButtons+0x318>)
 80055ac:	2202      	movs	r2, #2
 80055ae:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80055b0:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <CheckAttachedButtons+0x324>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d123      	bne.n	8005600 <CheckAttachedButtons+0x234>
 80055b8:	4643      	mov	r3, r8
 80055ba:	7c5b      	ldrb	r3, [r3, #17]
 80055bc:	07db      	lsls	r3, r3, #31
 80055be:	d51f      	bpl.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80055c0:	4b4b      	ldr	r3, [pc, #300]	; (80056f0 <CheckAttachedButtons+0x324>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80055c6:	9803      	ldr	r0, [sp, #12]
 80055c8:	f7fe ff28 	bl	800441c <buttonClickedCallback>
 80055cc:	e018      	b.n	8005600 <CheckAttachedButtons+0x234>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80055ce:	3bf5      	subs	r3, #245	; 0xf5
 80055d0:	3bff      	subs	r3, #255	; 0xff
 80055d2:	4a46      	ldr	r2, [pc, #280]	; (80056ec <CheckAttachedButtons+0x320>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d909      	bls.n	80055ec <CheckAttachedButtons+0x220>
			switch (button[i].state)
 80055d8:	4643      	mov	r3, r8
 80055da:	7a5b      	ldrb	r3, [r3, #9]
 80055dc:	3b05      	subs	r3, #5
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	2a09      	cmp	r2, #9
 80055e2:	d80d      	bhi.n	8005600 <CheckAttachedButtons+0x234>
 80055e4:	0093      	lsls	r3, r2, #2
 80055e6:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <CheckAttachedButtons+0x328>)
 80055e8:	58d3      	ldr	r3, [r2, r3]
 80055ea:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80055ec:	9803      	ldr	r0, [sp, #12]
 80055ee:	f7fe fed5 	bl	800439c <CheckForTimedButtonRelease>
 80055f2:	e7f1      	b.n	80055d8 <CheckAttachedButtons+0x20c>
					buttonPressedCallback(i);
 80055f4:	9803      	ldr	r0, [sp, #12]
 80055f6:	f7fe ff0f 	bl	8004418 <buttonPressedCallback>
					button[i].state = NONE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	4642      	mov	r2, r8
 80055fe:	7253      	strb	r3, [r2, #9]
 8005600:	3601      	adds	r6, #1
 8005602:	3509      	adds	r5, #9
 8005604:	3404      	adds	r4, #4
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8005606:	2c18      	cmp	r4, #24
 8005608:	d100      	bne.n	800560c <CheckAttachedButtons+0x240>
 800560a:	e0ee      	b.n	80057ea <CheckAttachedButtons+0x41e>
 800560c:	b2f3      	uxtb	r3, r6
 800560e:	9303      	str	r3, [sp, #12]
 8005610:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8005612:	7aab      	ldrb	r3, [r5, #10]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f3      	beq.n	8005600 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8005618:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <CheckAttachedButtons+0x324>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d100      	bne.n	8005622 <CheckAttachedButtons+0x256>
 8005620:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8005622:	230e      	movs	r3, #14
 8005624:	aa02      	add	r2, sp, #8
 8005626:	4694      	mov	ip, r2
 8005628:	4463      	add	r3, ip
 800562a:	469a      	mov	sl, r3
 800562c:	af05      	add	r7, sp, #20
 800562e:	9700      	str	r7, [sp, #0]
 8005630:	ab06      	add	r3, sp, #24
 8005632:	4652      	mov	r2, sl
 8005634:	a907      	add	r1, sp, #28
 8005636:	9803      	ldr	r0, [sp, #12]
 8005638:	f7ff fa9a 	bl	8004b70 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 800563c:	4653      	mov	r3, sl
 800563e:	8819      	ldrh	r1, [r3, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	9807      	ldr	r0, [sp, #28]
 8005644:	f00b f87a 	bl	801073c <HAL_GPIO_WritePin>
 8005648:	200a      	movs	r0, #10
 800564a:	f7ff fead 	bl	80053a8 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 800564e:	8839      	ldrh	r1, [r7, #0]
 8005650:	9806      	ldr	r0, [sp, #24]
 8005652:	f00b f86d 	bl	8010730 <HAL_GPIO_ReadPin>
 8005656:	2800      	cmp	r0, #0
 8005658:	d100      	bne.n	800565c <CheckAttachedButtons+0x290>
 800565a:	e6c5      	b.n	80053e8 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 800565c:	230e      	movs	r3, #14
 800565e:	aa02      	add	r2, sp, #8
 8005660:	4694      	mov	ip, r2
 8005662:	4463      	add	r3, ip
 8005664:	8819      	ldrh	r1, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	9807      	ldr	r0, [sp, #28]
 800566a:	f00b f867 	bl	801073c <HAL_GPIO_WritePin>
			switch (button[i].type)
 800566e:	4643      	mov	r3, r8
 8005670:	7a9b      	ldrb	r3, [r3, #10]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d100      	bne.n	8005678 <CheckAttachedButtons+0x2ac>
 8005676:	e706      	b.n	8005486 <CheckAttachedButtons+0xba>
 8005678:	b2da      	uxtb	r2, r3
 800567a:	2a02      	cmp	r2, #2
 800567c:	d800      	bhi.n	8005680 <CheckAttachedButtons+0x2b4>
 800567e:	e6c6      	b.n	800540e <CheckAttachedButtons+0x42>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d100      	bne.n	8005686 <CheckAttachedButtons+0x2ba>
 8005684:	e707      	b.n	8005496 <CheckAttachedButtons+0xca>
 8005686:	2b04      	cmp	r3, #4
 8005688:	d000      	beq.n	800568c <CheckAttachedButtons+0x2c0>
 800568a:	e6c8      	b.n	800541e <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 800568c:	464b      	mov	r3, r9
 800568e:	2b01      	cmp	r3, #1
 8005690:	d100      	bne.n	8005694 <CheckAttachedButtons+0x2c8>
 8005692:	e08e      	b.n	80057b2 <CheckAttachedButtons+0x3e6>
					else if (connected == GPIO_PIN_RESET) 
 8005694:	2b00      	cmp	r3, #0
 8005696:	d000      	beq.n	800569a <CheckAttachedButtons+0x2ce>
 8005698:	e6c1      	b.n	800541e <CheckAttachedButtons+0x52>
 800569a:	2302      	movs	r3, #2
 800569c:	469b      	mov	fp, r3
 800569e:	e6c3      	b.n	8005428 <CheckAttachedButtons+0x5c>
					buttonReleasedCallback(i);
 80056a0:	9803      	ldr	r0, [sp, #12]
 80056a2:	f7fe feba 	bl	800441a <buttonReleasedCallback>
					button[i].state = NONE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	4642      	mov	r2, r8
 80056aa:	7253      	strb	r3, [r2, #9]
      		break;
 80056ac:	e7a8      	b.n	8005600 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <CheckAttachedButtons+0x324>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1a4      	bne.n	8005600 <CheckAttachedButtons+0x234>
 80056b6:	4643      	mov	r3, r8
 80056b8:	7c5b      	ldrb	r3, [r3, #17]
 80056ba:	075b      	lsls	r3, r3, #29
 80056bc:	d5a0      	bpl.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <CheckAttachedButtons+0x324>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 80056c4:	2101      	movs	r1, #1
 80056c6:	9803      	ldr	r0, [sp, #12]
 80056c8:	f7fe feaa 	bl	8004420 <buttonPressedForXCallback>
 80056cc:	e798      	b.n	8005600 <CheckAttachedButtons+0x234>
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000cdc 	.word	0x20000cdc
 80056d4:	20001278 	.word	0x20001278
 80056d8:	0000fffe 	.word	0x0000fffe
 80056dc:	20006894 	.word	0x20006894
 80056e0:	2000129c 	.word	0x2000129c
 80056e4:	20000e61 	.word	0x20000e61
 80056e8:	20000e98 	.word	0x20000e98
 80056ec:	0000fe0a 	.word	0x0000fe0a
 80056f0:	20000e9e 	.word	0x20000e9e
 80056f4:	080177e0 	.word	0x080177e0
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 80056f8:	4b3f      	ldr	r3, [pc, #252]	; (80057f8 <CheckAttachedButtons+0x42c>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d000      	beq.n	8005702 <CheckAttachedButtons+0x336>
 8005700:	e77e      	b.n	8005600 <CheckAttachedButtons+0x234>
 8005702:	4643      	mov	r3, r8
 8005704:	7c5b      	ldrb	r3, [r3, #17]
 8005706:	071b      	lsls	r3, r3, #28
 8005708:	d400      	bmi.n	800570c <CheckAttachedButtons+0x340>
 800570a:	e779      	b.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 800570c:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <CheckAttachedButtons+0x42c>)
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8005712:	2102      	movs	r1, #2
 8005714:	9803      	ldr	r0, [sp, #12]
 8005716:	f7fe fe83 	bl	8004420 <buttonPressedForXCallback>
 800571a:	e771      	b.n	8005600 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 800571c:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <CheckAttachedButtons+0x42c>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d000      	beq.n	8005726 <CheckAttachedButtons+0x35a>
 8005724:	e76c      	b.n	8005600 <CheckAttachedButtons+0x234>
 8005726:	4643      	mov	r3, r8
 8005728:	7c5b      	ldrb	r3, [r3, #17]
 800572a:	06db      	lsls	r3, r3, #27
 800572c:	d400      	bmi.n	8005730 <CheckAttachedButtons+0x364>
 800572e:	e767      	b.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <CheckAttachedButtons+0x42c>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8005736:	2103      	movs	r1, #3
 8005738:	9803      	ldr	r0, [sp, #12]
 800573a:	f7fe fe71 	bl	8004420 <buttonPressedForXCallback>
 800573e:	e75f      	b.n	8005600 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8005740:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <CheckAttachedButtons+0x42c>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d000      	beq.n	800574a <CheckAttachedButtons+0x37e>
 8005748:	e75a      	b.n	8005600 <CheckAttachedButtons+0x234>
 800574a:	4643      	mov	r3, r8
 800574c:	7c5b      	ldrb	r3, [r3, #17]
 800574e:	069b      	lsls	r3, r3, #26
 8005750:	d400      	bmi.n	8005754 <CheckAttachedButtons+0x388>
 8005752:	e755      	b.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8005754:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <CheckAttachedButtons+0x42c>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 800575a:	2101      	movs	r1, #1
 800575c:	9803      	ldr	r0, [sp, #12]
 800575e:	f7fe fe60 	bl	8004422 <buttonReleasedForYCallback>
 8005762:	e74d      	b.n	8005600 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8005764:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <CheckAttachedButtons+0x42c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d000      	beq.n	800576e <CheckAttachedButtons+0x3a2>
 800576c:	e748      	b.n	8005600 <CheckAttachedButtons+0x234>
 800576e:	4643      	mov	r3, r8
 8005770:	7c5b      	ldrb	r3, [r3, #17]
 8005772:	065b      	lsls	r3, r3, #25
 8005774:	d400      	bmi.n	8005778 <CheckAttachedButtons+0x3ac>
 8005776:	e743      	b.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <CheckAttachedButtons+0x42c>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 800577e:	2102      	movs	r1, #2
 8005780:	9803      	ldr	r0, [sp, #12]
 8005782:	f7fe fe4e 	bl	8004422 <buttonReleasedForYCallback>
 8005786:	e73b      	b.n	8005600 <CheckAttachedButtons+0x234>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <CheckAttachedButtons+0x42c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d000      	beq.n	8005792 <CheckAttachedButtons+0x3c6>
 8005790:	e736      	b.n	8005600 <CheckAttachedButtons+0x234>
 8005792:	4643      	mov	r3, r8
 8005794:	7c5b      	ldrb	r3, [r3, #17]
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d800      	bhi.n	800579c <CheckAttachedButtons+0x3d0>
 800579a:	e731      	b.n	8005600 <CheckAttachedButtons+0x234>
						delayButtonStateReset = true;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <CheckAttachedButtons+0x42c>)
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 80057a2:	2103      	movs	r1, #3
 80057a4:	9803      	ldr	r0, [sp, #12]
 80057a6:	f7fe fe3c 	bl	8004422 <buttonReleasedForYCallback>
 80057aa:	e729      	b.n	8005600 <CheckAttachedButtons+0x234>
						state = OPEN;			
 80057ac:	2303      	movs	r3, #3
 80057ae:	469b      	mov	fp, r3
 80057b0:	e000      	b.n	80057b4 <CheckAttachedButtons+0x3e8>
						state = OFF;
 80057b2:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <CheckAttachedButtons+0x430>)
 80057b6:	58e3      	ldr	r3, [r4, r3]
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <CheckAttachedButtons+0x434>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d900      	bls.n	80057c0 <CheckAttachedButtons+0x3f4>
 80057be:	e67f      	b.n	80054c0 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];																		// Advance the debounce counter
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <CheckAttachedButtons+0x430>)
 80057c4:	50a3      	str	r3, [r4, r2]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <CheckAttachedButtons+0x438>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d100      	bne.n	80057d0 <CheckAttachedButtons+0x404>
 80057ce:	e67b      	b.n	80054c8 <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <CheckAttachedButtons+0x43c>)
 80057d2:	5cf2      	ldrb	r2, [r6, r3]
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <CheckAttachedButtons+0x440>)
 80057d6:	795b      	ldrb	r3, [r3, #5]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d800      	bhi.n	80057de <CheckAttachedButtons+0x412>
 80057dc:	e632      	b.n	8005444 <CheckAttachedButtons+0x78>
					clicked = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	4a08      	ldr	r2, [pc, #32]	; (8005804 <CheckAttachedButtons+0x438>)
 80057e2:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <CheckAttachedButtons+0x43c>)
 80057e6:	54b3      	strb	r3, [r6, r2]
 80057e8:	e62c      	b.n	8005444 <CheckAttachedButtons+0x78>
}
 80057ea:	b009      	add	sp, #36	; 0x24
 80057ec:	bc3c      	pop	{r2, r3, r4, r5}
 80057ee:	4690      	mov	r8, r2
 80057f0:	4699      	mov	r9, r3
 80057f2:	46a2      	mov	sl, r4
 80057f4:	46ab      	mov	fp, r5
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f8:	20000e9e 	.word	0x20000e9e
 80057fc:	2000129c 	.word	0x2000129c
 8005800:	0000fffe 	.word	0x0000fffe
 8005804:	20000e61 	.word	0x20000e61
 8005808:	20000e98 	.word	0x20000e98
 800580c:	20006894 	.word	0x20006894

08005810 <StartMilliDelay>:
{
 8005810:	b510      	push	{r4, lr}
 8005812:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 8005814:	f009 fd54 	bl	800f2c0 <vPortEnterCritical>
	if (Delay)
 8005818:	2c00      	cmp	r4, #0
 800581a:	d006      	beq.n	800582a <StartMilliDelay+0x1a>
		t0 = htim15.Instance->CNT;
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <StartMilliDelay+0x20>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim15.Instance->CNT - t0 <= Delay) {};
 8005822:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005824:	1a5b      	subs	r3, r3, r1
 8005826:	42a3      	cmp	r3, r4
 8005828:	d9fb      	bls.n	8005822 <StartMilliDelay+0x12>
	portEXIT_CRITICAL();
 800582a:	f009 fd55 	bl	800f2d8 <vPortExitCritical>
}
 800582e:	bd10      	pop	{r4, pc}
 8005830:	200067e0 	.word	0x200067e0

08005834 <IsFactoryReset>:
{
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 8005838:	4b39      	ldr	r3, [pc, #228]	; (8005920 <IsFactoryReset+0xec>)
 800583a:	6959      	ldr	r1, [r3, #20]
 800583c:	2080      	movs	r0, #128	; 0x80
 800583e:	0280      	lsls	r0, r0, #10
 8005840:	4301      	orrs	r1, r0
 8005842:	6159      	str	r1, [r3, #20]
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	4002      	ands	r2, r0
 8005848:	9203      	str	r2, [sp, #12]
 800584a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800584c:	6959      	ldr	r1, [r3, #20]
 800584e:	2080      	movs	r0, #128	; 0x80
 8005850:	02c0      	lsls	r0, r0, #11
 8005852:	4301      	orrs	r1, r0
 8005854:	6159      	str	r1, [r3, #20]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	4002      	ands	r2, r0
 800585a:	9204      	str	r2, [sp, #16]
 800585c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	2080      	movs	r0, #128	; 0x80
 8005862:	0300      	lsls	r0, r0, #12
 8005864:	4301      	orrs	r1, r0
 8005866:	6159      	str	r1, [r3, #20]
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	4002      	ands	r2, r0
 800586c:	9205      	str	r2, [sp, #20]
 800586e:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	0349      	lsls	r1, r1, #13
 8005876:	430a      	orrs	r2, r1
 8005878:	615a      	str	r2, [r3, #20]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	400b      	ands	r3, r1
 800587e:	9306      	str	r3, [sp, #24]
 8005880:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8005882:	2522      	movs	r5, #34	; 0x22
 8005884:	446d      	add	r5, sp
 8005886:	ab08      	add	r3, sp, #32
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	ab0b      	add	r3, sp, #44	; 0x2c
 800588c:	002a      	movs	r2, r5
 800588e:	a90c      	add	r1, sp, #48	; 0x30
 8005890:	2001      	movs	r0, #1
 8005892:	f7ff f96d 	bl	8004b70 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 8005896:	ac07      	add	r4, sp, #28
 8005898:	9400      	str	r4, [sp, #0]
 800589a:	ab09      	add	r3, sp, #36	; 0x24
 800589c:	221e      	movs	r2, #30
 800589e:	446a      	add	r2, sp
 80058a0:	a90a      	add	r1, sp, #40	; 0x28
 80058a2:	2005      	movs	r0, #5
 80058a4:	f7ff f964 	bl	8004b70 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058a8:	2301      	movs	r3, #1
 80058aa:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ac:	2600      	movs	r6, #0
 80058ae:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 80058b0:	882b      	ldrh	r3, [r5, #0]
 80058b2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 80058b4:	a90d      	add	r1, sp, #52	; 0x34
 80058b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058b8:	f00a fe5a 	bl	8010570 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058bc:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 80058be:	2302      	movs	r3, #2
 80058c0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 80058c2:	8823      	ldrh	r3, [r4, #0]
 80058c4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 80058c6:	a90d      	add	r1, sp, #52	; 0x34
 80058c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ca:	f00a fe51 	bl	8010570 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80058ce:	8829      	ldrh	r1, [r5, #0]
 80058d0:	2200      	movs	r2, #0
 80058d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058d4:	f00a ff32 	bl	801073c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80058d8:	2005      	movs	r0, #5
 80058da:	f7ff ff99 	bl	8005810 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 80058de:	8821      	ldrh	r1, [r4, #0]
 80058e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e2:	f00a ff25 	bl	8010730 <HAL_GPIO_ReadPin>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d006      	beq.n	80058f8 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 80058ea:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <IsFactoryReset+0xf0>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	4252      	negs	r2, r2
 80058f0:	601a      	str	r2, [r3, #0]
	return 0;
 80058f2:	2000      	movs	r0, #0
}
 80058f4:	b012      	add	sp, #72	; 0x48
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80058f8:	2322      	movs	r3, #34	; 0x22
 80058fa:	446b      	add	r3, sp
 80058fc:	8819      	ldrh	r1, [r3, #0]
 80058fe:	2201      	movs	r2, #1
 8005900:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005902:	f00a ff1b 	bl	801073c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8005906:	2005      	movs	r0, #5
 8005908:	f7ff ff82 	bl	8005810 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800590c:	ab07      	add	r3, sp, #28
 800590e:	8819      	ldrh	r1, [r3, #0]
 8005910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005912:	f00a ff0d 	bl	8010730 <HAL_GPIO_ReadPin>
 8005916:	2801      	cmp	r0, #1
 8005918:	d1e7      	bne.n	80058ea <IsFactoryReset+0xb6>
			return 1;
 800591a:	2001      	movs	r0, #1
 800591c:	e7ea      	b.n	80058f4 <IsFactoryReset+0xc0>
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	40021000 	.word	0x40021000
 8005924:	20007ff0 	.word	0x20007ff0

08005928 <IsLowerCLIbaud>:
{
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800592c:	2512      	movs	r5, #18
 800592e:	446d      	add	r5, sp
 8005930:	ab04      	add	r3, sp, #16
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	ab07      	add	r3, sp, #28
 8005936:	002a      	movs	r2, r5
 8005938:	a908      	add	r1, sp, #32
 800593a:	2001      	movs	r0, #1
 800593c:	f7ff f918 	bl	8004b70 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8005940:	ac03      	add	r4, sp, #12
 8005942:	9400      	str	r4, [sp, #0]
 8005944:	ab05      	add	r3, sp, #20
 8005946:	220e      	movs	r2, #14
 8005948:	446a      	add	r2, sp
 800594a:	a906      	add	r1, sp, #24
 800594c:	2002      	movs	r0, #2
 800594e:	f7ff f90f 	bl	8004b70 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005952:	2301      	movs	r3, #1
 8005954:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2600      	movs	r6, #0
 8005958:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800595a:	882b      	ldrh	r3, [r5, #0]
 800595c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800595e:	a909      	add	r1, sp, #36	; 0x24
 8005960:	9808      	ldr	r0, [sp, #32]
 8005962:	f00a fe05 	bl	8010570 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005966:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8005968:	2302      	movs	r3, #2
 800596a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 800596c:	8823      	ldrh	r3, [r4, #0]
 800596e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8005970:	a909      	add	r1, sp, #36	; 0x24
 8005972:	9805      	ldr	r0, [sp, #20]
 8005974:	f00a fdfc 	bl	8010570 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8005978:	8829      	ldrh	r1, [r5, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	9808      	ldr	r0, [sp, #32]
 800597e:	f00a fedd 	bl	801073c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8005982:	2005      	movs	r0, #5
 8005984:	f7ff ff44 	bl	8005810 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8005988:	8821      	ldrh	r1, [r4, #0]
 800598a:	9805      	ldr	r0, [sp, #20]
 800598c:	f00a fed0 	bl	8010730 <HAL_GPIO_ReadPin>
	return 0;
 8005990:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8005992:	2800      	cmp	r0, #0
 8005994:	d002      	beq.n	800599c <IsLowerCLIbaud+0x74>
}
 8005996:	0018      	movs	r0, r3
 8005998:	b00e      	add	sp, #56	; 0x38
 800599a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800599c:	3312      	adds	r3, #18
 800599e:	446b      	add	r3, sp
 80059a0:	8819      	ldrh	r1, [r3, #0]
 80059a2:	2201      	movs	r2, #1
 80059a4:	9808      	ldr	r0, [sp, #32]
 80059a6:	f00a fec9 	bl	801073c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 80059aa:	2005      	movs	r0, #5
 80059ac:	f7ff ff30 	bl	8005810 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	8819      	ldrh	r1, [r3, #0]
 80059b4:	9805      	ldr	r0, [sp, #20]
 80059b6:	f00a febb 	bl	8010730 <HAL_GPIO_ReadPin>
 80059ba:	3801      	subs	r0, #1
 80059bc:	4243      	negs	r3, r0
 80059be:	4143      	adcs	r3, r0
			return 1;
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e7e8      	b.n	8005996 <IsLowerCLIbaud+0x6e>

080059c4 <SwapUartPins>:
{
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 80059c8:	d003      	beq.n	80059d2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 80059ca:	2901      	cmp	r1, #1
 80059cc:	d002      	beq.n	80059d4 <SwapUartPins+0x10>
		} else if (direction == NORMAL) {
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d016      	beq.n	8005a00 <SwapUartPins+0x3c>
}
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 80059d4:	f005 febe 	bl	800b754 <GetPort>
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <SwapUartPins+0x68>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4d14      	ldr	r5, [pc, #80]	; (8005a30 <SwapUartPins+0x6c>)
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	3801      	subs	r0, #1
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	0209      	lsls	r1, r1, #8
 80059e8:	000a      	movs	r2, r1
 80059ea:	4102      	asrs	r2, r0
 80059ec:	5b58      	ldrh	r0, [r3, r5]
 80059ee:	4302      	orrs	r2, r0
 80059f0:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80059f2:	2308      	movs	r3, #8
 80059f4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80059f6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 80059f8:	0020      	movs	r0, r4
 80059fa:	f00c fe01 	bl	8012600 <HAL_UART_Init>
 80059fe:	e7e8      	b.n	80059d2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 8005a00:	f005 fea8 	bl	800b754 <GetPort>
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <SwapUartPins+0x68>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	4d09      	ldr	r5, [pc, #36]	; (8005a30 <SwapUartPins+0x6c>)
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	3801      	subs	r0, #1
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	0209      	lsls	r1, r1, #8
 8005a14:	4101      	asrs	r1, r0
 8005a16:	5b5a      	ldrh	r2, [r3, r5]
 8005a18:	438a      	bics	r2, r1
 8005a1a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 8005a24:	0020      	movs	r0, r4
 8005a26:	f00c fdeb 	bl	8012600 <HAL_UART_Init>
}
 8005a2a:	e7d2      	b.n	80059d2 <SwapUartPins+0xe>
 8005a2c:	200011c8 	.word	0x200011c8
 8005a30:	20000c58 	.word	0x20000c58

08005a34 <FindRoute>:
{
 8005a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a36:	46de      	mov	lr, fp
 8005a38:	4657      	mov	r7, sl
 8005a3a:	464e      	mov	r6, r9
 8005a3c:	4645      	mov	r5, r8
 8005a3e:	b5e0      	push	{r5, r6, r7, lr}
 8005a40:	b08f      	sub	sp, #60	; 0x3c
 8005a42:	0005      	movs	r5, r0
 8005a44:	468a      	mov	sl, r1
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8005a46:	2232      	movs	r2, #50	; 0x32
 8005a48:	2100      	movs	r1, #0
 8005a4a:	a801      	add	r0, sp, #4
 8005a4c:	f00d f9d8 	bl	8012e00 <memset>
	memset(route,0,sizeof(route));
 8005a50:	2219      	movs	r2, #25
 8005a52:	2100      	movs	r1, #0
 8005a54:	485a      	ldr	r0, [pc, #360]	; (8005bc0 <FindRoute+0x18c>)
 8005a56:	f00d f9d3 	bl	8012e00 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8005a5a:	0029      	movs	r1, r5
 8005a5c:	1e68      	subs	r0, r5, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <FindRoute+0x190>)
 8005a62:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8005a64:	4a58      	ldr	r2, [pc, #352]	; (8005bc8 <FindRoute+0x194>)
 8005a66:	5413      	strb	r3, [r2, r0]
 8005a68:	2516      	movs	r5, #22
 8005a6a:	4345      	muls	r5, r0
 8005a6c:	3502      	adds	r5, #2
 8005a6e:	4b57      	ldr	r3, [pc, #348]	; (8005bcc <FindRoute+0x198>)
 8005a70:	18ed      	adds	r5, r5, r3
 8005a72:	002a      	movs	r2, r5
	for(int col=1 ; col<=6 ; col++)
 8005a74:	2001      	movs	r0, #1
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005a76:	4653      	mov	r3, sl
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	e003      	b.n	8005a84 <FindRoute+0x50>
	for(int col=1 ; col<=6 ; col++)
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	3202      	adds	r2, #2
 8005a80:	2807      	cmp	r0, #7
 8005a82:	d00f      	beq.n	8005aa4 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005a84:	8813      	ldrh	r3, [r2, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f8      	beq.n	8005a7c <FindRoute+0x48>
 8005a8a:	08db      	lsrs	r3, r3, #3
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d1f5      	bne.n	8005a7c <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8005a90:	4b4c      	ldr	r3, [pc, #304]	; (8005bc4 <FindRoute+0x190>)
 8005a92:	4453      	add	r3, sl
 8005a94:	3b01      	subs	r3, #1
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8005a9a:	4b49      	ldr	r3, [pc, #292]	; (8005bc0 <FindRoute+0x18c>)
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	701a      	strb	r2, [r3, #0]
			return col;	
 8005aa0:	b2c0      	uxtb	r0, r0
 8005aa2:	e085      	b.n	8005bb0 <FindRoute+0x17c>
	for (int i=1 ; i<=N ; i++)   					
 8005aa4:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <FindRoute+0x19c>)
 8005aa6:	781e      	ldrb	r6, [r3, #0]
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	dd11      	ble.n	8005ad0 <FindRoute+0x9c>
 8005aac:	2301      	movs	r3, #1
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8005aae:	24ff      	movs	r4, #255	; 0xff
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8005ab0:	4f45      	ldr	r7, [pc, #276]	; (8005bc8 <FindRoute+0x194>)
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	46ac      	mov	ip, r5
 8005ab6:	e002      	b.n	8005abe <FindRoute+0x8a>
	for (int i=1 ; i<=N ; i++)   					
 8005ab8:	3301      	adds	r3, #1
 8005aba:	42b3      	cmp	r3, r6
 8005abc:	dc07      	bgt.n	8005ace <FindRoute+0x9a>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	d0fa      	beq.n	8005ab8 <FindRoute+0x84>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	4d3f      	ldr	r5, [pc, #252]	; (8005bc4 <FindRoute+0x190>)
 8005ac6:	54ac      	strb	r4, [r5, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8005ac8:	18ba      	adds	r2, r7, r2
 8005aca:	7010      	strb	r0, [r2, #0]
 8005acc:	e7f4      	b.n	8005ab8 <FindRoute+0x84>
 8005ace:	4665      	mov	r5, ip
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8005ad0:	2400      	movs	r4, #0
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <FindRoute+0x198>)
 8005ad4:	4698      	mov	r8, r3
 8005ad6:	230e      	movs	r3, #14
 8005ad8:	4443      	add	r3, r8
 8005ada:	4656      	mov	r6, sl
 8005adc:	469b      	mov	fp, r3
 8005ade:	46a9      	mov	r9, r5
 8005ae0:	e01d      	b.n	8005b1e <FindRoute+0xea>
 8005ae2:	464d      	mov	r5, r9
 8005ae4:	46b2      	mov	sl, r6
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8005ae6:	0034      	movs	r4, r6
 8005ae8:	e034      	b.n	8005b54 <FindRoute+0x120>
 8005aea:	3102      	adds	r1, #2
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8005aec:	4281      	cmp	r1, r0
 8005aee:	d015      	beq.n	8005b1c <FindRoute+0xe8>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8005af0:	880b      	ldrh	r3, [r1, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f9      	beq.n	8005aea <FindRoute+0xb6>
				v = (array[u-1][n]>>3);
 8005af6:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	5cd7      	ldrb	r7, [r2, r3]
 8005afe:	2f00      	cmp	r7, #0
 8005b00:	d1f3      	bne.n	8005aea <FindRoute+0xb6>
					alt = routeDist[u-1] + 1;					// Add one hop
 8005b02:	4f30      	ldr	r7, [pc, #192]	; (8005bc4 <FindRoute+0x190>)
 8005b04:	5d7f      	ldrb	r7, [r7, r5]
 8005b06:	3701      	adds	r7, #1
 8005b08:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8005b0a:	4e2e      	ldr	r6, [pc, #184]	; (8005bc4 <FindRoute+0x190>)
 8005b0c:	5cf6      	ldrb	r6, [r6, r3]
 8005b0e:	42be      	cmp	r6, r7
 8005b10:	d9eb      	bls.n	8005aea <FindRoute+0xb6>
						routeDist[v-1] = alt; 
 8005b12:	4e2c      	ldr	r6, [pc, #176]	; (8005bc4 <FindRoute+0x190>)
 8005b14:	54f7      	strb	r7, [r6, r3]
						routePrev[v-1] = u; 
 8005b16:	4e2c      	ldr	r6, [pc, #176]	; (8005bc8 <FindRoute+0x194>)
 8005b18:	54f4      	strb	r4, [r6, r3]
 8005b1a:	e7e6      	b.n	8005aea <FindRoute+0xb6>
 8005b1c:	4656      	mov	r6, sl
	while (!QnotEmpty(Q))
 8005b1e:	a801      	add	r0, sp, #4
 8005b20:	f7fd fe5c 	bl	80037dc <QnotEmpty>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d113      	bne.n	8005b50 <FindRoute+0x11c>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8005b28:	a901      	add	r1, sp, #4
 8005b2a:	4826      	ldr	r0, [pc, #152]	; (8005bc4 <FindRoute+0x190>)
 8005b2c:	f7fd fe38 	bl	80037a0 <minArr>
 8005b30:	3001      	adds	r0, #1
 8005b32:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8005b34:	42b4      	cmp	r4, r6
 8005b36:	d0d4      	beq.n	8005ae2 <FindRoute+0xae>
			Q[u-1] = 1;													// Remove u from Q 
 8005b38:	1e65      	subs	r5, r4, #1
 8005b3a:	ab01      	add	r3, sp, #4
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	555a      	strb	r2, [r3, r5]
 8005b40:	2016      	movs	r0, #22
 8005b42:	4368      	muls	r0, r5
 8005b44:	1c81      	adds	r1, r0, #2
 8005b46:	4441      	add	r1, r8
 8005b48:	4458      	add	r0, fp
				if (!Q[v-1])												// v is still in Q
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	46b2      	mov	sl, r6
 8005b4e:	e7cf      	b.n	8005af0 <FindRoute+0xbc>
 8005b50:	464d      	mov	r5, r9
 8005b52:	46b2      	mov	sl, r6
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <FindRoute+0x194>)
 8005b56:	191b      	adds	r3, r3, r4
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	781a      	ldrb	r2, [r3, #0]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d00e      	beq.n	8005b80 <FindRoute+0x14c>
		route[j++] = u;          				// Push the vertex onto the stack
 8005b62:	4917      	ldr	r1, [pc, #92]	; (8005bc0 <FindRoute+0x18c>)
 8005b64:	468c      	mov	ip, r1
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005b66:	4e18      	ldr	r6, [pc, #96]	; (8005bc8 <FindRoute+0x194>)
 8005b68:	e000      	b.n	8005b6c <FindRoute+0x138>
 8005b6a:	000a      	movs	r2, r1
		route[j++] = u;          				// Push the vertex onto the stack
 8005b6c:	1c58      	adds	r0, r3, #1
 8005b6e:	4661      	mov	r1, ip
 8005b70:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005b72:	18b3      	adds	r3, r6, r2
 8005b74:	3b01      	subs	r3, #1
 8005b76:	7819      	ldrb	r1, [r3, #0]
 8005b78:	0014      	movs	r4, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8005b7a:	b2c3      	uxtb	r3, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d1f4      	bne.n	8005b6a <FindRoute+0x136>
	for(int col=1 ; col<=6 ; col++)	
 8005b80:	2001      	movs	r0, #1
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8005b82:	490f      	ldr	r1, [pc, #60]	; (8005bc0 <FindRoute+0x18c>)
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <FindRoute+0x190>)
 8005b86:	4453      	add	r3, sl
 8005b88:	001f      	movs	r7, r3
 8005b8a:	3f01      	subs	r7, #1
 8005b8c:	e003      	b.n	8005b96 <FindRoute+0x162>
	for(int col=1 ; col<=6 ; col++)	
 8005b8e:	3001      	adds	r0, #1
 8005b90:	3502      	adds	r5, #2
 8005b92:	2807      	cmp	r0, #7
 8005b94:	d00b      	beq.n	8005bae <FindRoute+0x17a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8005b96:	882b      	ldrh	r3, [r5, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f8      	beq.n	8005b8e <FindRoute+0x15a>
 8005b9c:	783a      	ldrb	r2, [r7, #0]
 8005b9e:	188a      	adds	r2, r1, r2
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	08db      	lsrs	r3, r3, #3
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d1f1      	bne.n	8005b8e <FindRoute+0x15a>
			return col;	
 8005baa:	b2c0      	uxtb	r0, r0
 8005bac:	e000      	b.n	8005bb0 <FindRoute+0x17c>
	return 0;			
 8005bae:	2000      	movs	r0, #0
}
 8005bb0:	b00f      	add	sp, #60	; 0x3c
 8005bb2:	bc3c      	pop	{r2, r3, r4, r5}
 8005bb4:	4690      	mov	r8, r2
 8005bb6:	4699      	mov	r9, r3
 8005bb8:	46a2      	mov	sl, r4
 8005bba:	46ab      	mov	fp, r5
 8005bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	200012c4 	.word	0x200012c4
 8005bc4:	200012e0 	.word	0x200012e0
 8005bc8:	200012fc 	.word	0x200012fc
 8005bcc:	20000a30 	.word	0x20000a30
 8005bd0:	2000001c 	.word	0x2000001c

08005bd4 <ForwardReceivedMessage>:
{
 8005bd4:	b530      	push	{r4, r5, lr}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <ForwardReceivedMessage+0x34>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8005be0:	1e42      	subs	r2, r0, #1
 8005be2:	00d3      	lsls	r3, r2, #3
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <ForwardReceivedMessage+0x38>)
 8005bea:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <ForwardReceivedMessage+0x3c>)
 8005bee:	7818      	ldrb	r0, [r3, #0]
 8005bf0:	0021      	movs	r1, r4
 8005bf2:	f7ff ff1f 	bl	8005a34 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8005bf6:	9500      	str	r5, [sp, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	0022      	movs	r2, r4
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f7ff f9ad 	bl	8004f5c <SendMessageFromPort>
}
 8005c02:	2000      	movs	r0, #0
 8005c04:	b003      	add	sp, #12
 8005c06:	bd30      	pop	{r4, r5, pc}
 8005c08:	20000a2c 	.word	0x20000a2c
 8005c0c:	20000d48 	.word	0x20000d48
 8005c10:	200011c8 	.word	0x200011c8

08005c14 <SendMessageToModule>:
{
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	b083      	sub	sp, #12
 8005c18:	0004      	movs	r4, r0
 8005c1a:	000e      	movs	r6, r1
 8005c1c:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 8005c1e:	28ff      	cmp	r0, #255	; 0xff
 8005c20:	d012      	beq.n	8005c48 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8005c22:	4f0d      	ldr	r7, [pc, #52]	; (8005c58 <SendMessageToModule+0x44>)
 8005c24:	7838      	ldrb	r0, [r7, #0]
 8005c26:	0021      	movs	r1, r4
 8005c28:	f7ff ff04 	bl	8005a34 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8005c2c:	7839      	ldrb	r1, [r7, #0]
 8005c2e:	9500      	str	r5, [sp, #0]
 8005c30:	0033      	movs	r3, r6
 8005c32:	0022      	movs	r2, r4
 8005c34:	f7ff f992 	bl	8004f5c <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8005c38:	002a      	movs	r2, r5
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4807      	ldr	r0, [pc, #28]	; (8005c5c <SendMessageToModule+0x48>)
 8005c3e:	f00d f8df 	bl	8012e00 <memset>
}
 8005c42:	2000      	movs	r0, #0
 8005c44:	b003      	add	sp, #12
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <SendMessageToModule+0x44>)
 8005c4a:	7818      	ldrb	r0, [r3, #0]
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	000a      	movs	r2, r1
 8005c50:	21ff      	movs	r1, #255	; 0xff
 8005c52:	f7ff fb5d 	bl	8005310 <BroadcastMessage>
 8005c56:	e7f4      	b.n	8005c42 <SendMessageToModule+0x2e>
 8005c58:	200011c8 	.word	0x200011c8
 8005c5c:	20001094 	.word	0x20001094

08005c60 <defaultCommand>:
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	0004      	movs	r4, r0
 8005c66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	d101      	bne.n	8005c74 <defaultCommand+0x14>
 8005c70:	b672      	cpsid	i
 8005c72:	e7fe      	b.n	8005c72 <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c74:	aa01      	add	r2, sp, #4
 8005c76:	2101      	movs	r1, #1
 8005c78:	f007 fd76 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8005c7c:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005c7e:	9e01      	ldr	r6, [sp, #4]
 8005c80:	0032      	movs	r2, r6
 8005c82:	491e      	ldr	r1, [pc, #120]	; (8005cfc <defaultCommand+0x9c>)
 8005c84:	f00d fafa 	bl	801327c <strncmp>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d01e      	beq.n	8005cca <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005c8c:	0032      	movs	r2, r6
 8005c8e:	491c      	ldr	r1, [pc, #112]	; (8005d00 <defaultCommand+0xa0>)
 8005c90:	0028      	movs	r0, r5
 8005c92:	f00d faf3 	bl	801327c <strncmp>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d12a      	bne.n	8005cf0 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2116      	movs	r1, #22
 8005c9e:	20ff      	movs	r0, #255	; 0xff
 8005ca0:	f7ff ffb8 	bl	8005c14 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <defaultCommand+0xa4>)
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	2064      	movs	r0, #100	; 0x64
 8005cac:	f007 fc43 	bl	800d536 <osDelay>
		ClearEEportsDir();
 8005cb0:	f7fe f8d2 	bl	8003e58 <ClearEEportsDir>
		ClearROtopology();
 8005cb4:	f7fd ffc4 	bl	8003c40 <ClearROtopology>
		osDelay(100);
 8005cb8:	2064      	movs	r0, #100	; 0x64
 8005cba:	f007 fc3c 	bl	800d536 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	4911      	ldr	r1, [pc, #68]	; (8005d08 <defaultCommand+0xa8>)
 8005cc2:	0020      	movs	r0, r4
 8005cc4:	f00d f893 	bl	8012dee <memcpy>
 8005cc8:	e00f      	b.n	8005cea <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005cca:	4910      	ldr	r1, [pc, #64]	; (8005d0c <defaultCommand+0xac>)
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <defaultCommand+0xb0>)
 8005cce:	000a      	movs	r2, r1
 8005cd0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005cd2:	c223      	stmia	r2!, {r0, r1, r5}
 8005cd4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005cd6:	c223      	stmia	r2!, {r0, r1, r5}
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005cdc:	f7fe fad6 	bl	800428c <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005ce0:	2227      	movs	r2, #39	; 0x27
 8005ce2:	490c      	ldr	r1, [pc, #48]	; (8005d14 <defaultCommand+0xb4>)
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f00d f882 	bl	8012dee <memcpy>
}
 8005cea:	2000      	movs	r0, #0
 8005cec:	b002      	add	sp, #8
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	4909      	ldr	r1, [pc, #36]	; (8005d18 <defaultCommand+0xb8>)
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f00d f87a 	bl	8012dee <memcpy>
 8005cfa:	e7f6      	b.n	8005cea <defaultCommand+0x8a>
 8005cfc:	08017e58 	.word	0x08017e58
 8005d00:	08017e88 	.word	0x08017e88
 8005d04:	20000f3a 	.word	0x20000f3a
 8005d08:	08017ea0 	.word	0x08017ea0
 8005d0c:	20006894 	.word	0x20006894
 8005d10:	20000000 	.word	0x20000000
 8005d14:	08017e60 	.word	0x08017e60
 8005d18:	08017e90 	.word	0x08017e90

08005d1c <DisplayTopology>:
{
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1e:	46d6      	mov	lr, sl
 8005d20:	464f      	mov	r7, r9
 8005d22:	4646      	mov	r6, r8
 8005d24:	b5c0      	push	{r6, r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	0005      	movs	r5, r0
 8005d2a:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8005d2c:	4c56      	ldr	r4, [pc, #344]	; (8005e88 <DisplayTopology+0x16c>)
 8005d2e:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <DisplayTopology+0x170>)
 8005d30:	0022      	movs	r2, r4
 8005d32:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005d34:	c243      	stmia	r2!, {r0, r1, r6}
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	889b      	ldrh	r3, [r3, #4]
 8005d3c:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005d3e:	0020      	movs	r0, r4
 8005d40:	f7fa f9ea 	bl	8000118 <strlen>
 8005d44:	b282      	uxth	r2, r0
 8005d46:	2301      	movs	r3, #1
 8005d48:	425b      	negs	r3, r3
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	3333      	adds	r3, #51	; 0x33
 8005d4e:	0021      	movs	r1, r4
 8005d50:	0028      	movs	r0, r5
 8005d52:	f007 fafb 	bl	800d34c <writePxMutex>
 8005d56:	2401      	movs	r4, #1
		sprintf(pcUserMessage, "P%d\t", i);
 8005d58:	4f4d      	ldr	r7, [pc, #308]	; (8005e90 <DisplayTopology+0x174>)
 8005d5a:	4d4b      	ldr	r5, [pc, #300]	; (8005e88 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005d5c:	2601      	movs	r6, #1
 8005d5e:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8005d60:	0022      	movs	r2, r4
 8005d62:	0039      	movs	r1, r7
 8005d64:	0028      	movs	r0, r5
 8005d66:	f00d fa45 	bl	80131f4 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005d6a:	0028      	movs	r0, r5
 8005d6c:	f7fa f9d4 	bl	8000118 <strlen>
 8005d70:	b282      	uxth	r2, r0
 8005d72:	9600      	str	r6, [sp, #0]
 8005d74:	2332      	movs	r3, #50	; 0x32
 8005d76:	0029      	movs	r1, r5
 8005d78:	9803      	ldr	r0, [sp, #12]
 8005d7a:	f007 fae7 	bl	800d34c <writePxMutex>
 8005d7e:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8005d80:	2c06      	cmp	r4, #6
 8005d82:	d1ed      	bne.n	8005d60 <DisplayTopology+0x44>
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8005d84:	2301      	movs	r3, #1
 8005d86:	425b      	negs	r3, r3
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	3333      	adds	r3, #51	; 0x33
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	4941      	ldr	r1, [pc, #260]	; (8005e94 <DisplayTopology+0x178>)
 8005d90:	9803      	ldr	r0, [sp, #12]
 8005d92:	f007 fadb 	bl	800d34c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <DisplayTopology+0x17c>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d065      	beq.n	8005e6a <DisplayTopology+0x14e>
 8005d9e:	2600      	movs	r6, #0
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005da0:	2701      	movs	r7, #1
 8005da2:	427f      	negs	r7, r7
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <DisplayTopology+0x180>)
 8005da6:	4699      	mov	r9, r3
 8005da8:	230c      	movs	r3, #12
 8005daa:	444b      	add	r3, r9
 8005dac:	469a      	mov	sl, r3
 8005dae:	e02a      	b.n	8005e06 <DisplayTopology+0xea>
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8005db0:	2307      	movs	r3, #7
 8005db2:	4013      	ands	r3, r2
 8005db4:	08d2      	lsrs	r2, r2, #3
 8005db6:	493a      	ldr	r1, [pc, #232]	; (8005ea0 <DisplayTopology+0x184>)
 8005db8:	4833      	ldr	r0, [pc, #204]	; (8005e88 <DisplayTopology+0x16c>)
 8005dba:	f00d fa1b 	bl	80131f4 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8005dbe:	4d32      	ldr	r5, [pc, #200]	; (8005e88 <DisplayTopology+0x16c>)
 8005dc0:	0028      	movs	r0, r5
 8005dc2:	f7fa f9a9 	bl	8000118 <strlen>
 8005dc6:	b282      	uxth	r2, r0
 8005dc8:	9700      	str	r7, [sp, #0]
 8005dca:	2332      	movs	r3, #50	; 0x32
 8005dcc:	0029      	movs	r1, r5
 8005dce:	9803      	ldr	r0, [sp, #12]
 8005dd0:	f007 fabc 	bl	800d34c <writePxMutex>
 8005dd4:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8005dd6:	42b4      	cmp	r4, r6
 8005dd8:	d007      	beq.n	8005dea <DisplayTopology+0xce>
			if (!array[row][col])
 8005dda:	8822      	ldrh	r2, [r4, #0]
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d1e7      	bne.n	8005db0 <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t",0);
 8005de0:	4930      	ldr	r1, [pc, #192]	; (8005ea4 <DisplayTopology+0x188>)
 8005de2:	4829      	ldr	r0, [pc, #164]	; (8005e88 <DisplayTopology+0x16c>)
 8005de4:	f00d fa06 	bl	80131f4 <sprintf>
 8005de8:	e7e9      	b.n	8005dbe <DisplayTopology+0xa2>
 8005dea:	4646      	mov	r6, r8
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8005dec:	9700      	str	r7, [sp, #0]
 8005dee:	2332      	movs	r3, #50	; 0x32
 8005df0:	2202      	movs	r2, #2
 8005df2:	492d      	ldr	r1, [pc, #180]	; (8005ea8 <DisplayTopology+0x18c>)
 8005df4:	9803      	ldr	r0, [sp, #12]
 8005df6:	f007 faa9 	bl	800d34c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	b2f6      	uxtb	r6, r6
 8005dfe:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <DisplayTopology+0x17c>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	42b3      	cmp	r3, r6
 8005e04:	d931      	bls.n	8005e6a <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8005e06:	1c72      	adds	r2, r6, #1
 8005e08:	4c1f      	ldr	r4, [pc, #124]	; (8005e88 <DisplayTopology+0x16c>)
 8005e0a:	4928      	ldr	r1, [pc, #160]	; (8005eac <DisplayTopology+0x190>)
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	f00d f9f1 	bl	80131f4 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005e12:	0020      	movs	r0, r4
 8005e14:	f7fa f980 	bl	8000118 <strlen>
 8005e18:	b282      	uxth	r2, r0
 8005e1a:	9700      	str	r7, [sp, #0]
 8005e1c:	2332      	movs	r3, #50	; 0x32
 8005e1e:	0021      	movs	r1, r4
 8005e20:	9803      	ldr	r0, [sp, #12]
 8005e22:	f007 fa93 	bl	800d34c <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005e26:	2516      	movs	r5, #22
 8005e28:	4375      	muls	r5, r6
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	5aeb      	ldrh	r3, [r5, r3]
 8005e2e:	0059      	lsls	r1, r3, #1
 8005e30:	18c9      	adds	r1, r1, r3
 8005e32:	0049      	lsls	r1, r1, #1
 8005e34:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <DisplayTopology+0x194>)
 8005e36:	18c9      	adds	r1, r1, r3
 8005e38:	2205      	movs	r2, #5
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f00d fa2f 	bl	801329e <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8005e40:	9700      	str	r7, [sp, #0]
 8005e42:	2332      	movs	r3, #50	; 0x32
 8005e44:	2205      	movs	r2, #5
 8005e46:	0021      	movs	r1, r4
 8005e48:	9c03      	ldr	r4, [sp, #12]
 8005e4a:	0020      	movs	r0, r4
 8005e4c:	f007 fa7e 	bl	800d34c <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8005e50:	9700      	str	r7, [sp, #0]
 8005e52:	2332      	movs	r3, #50	; 0x32
 8005e54:	2201      	movs	r2, #1
 8005e56:	4917      	ldr	r1, [pc, #92]	; (8005eb4 <DisplayTopology+0x198>)
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f007 fa77 	bl	800d34c <writePxMutex>
 8005e5e:	1cac      	adds	r4, r5, #2
 8005e60:	444c      	add	r4, r9
 8005e62:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t",0);
 8005e64:	46b0      	mov	r8, r6
 8005e66:	002e      	movs	r6, r5
 8005e68:	e7b7      	b.n	8005dda <DisplayTopology+0xbe>
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	3333      	adds	r3, #51	; 0x33
 8005e72:	2201      	movs	r2, #1
 8005e74:	4910      	ldr	r1, [pc, #64]	; (8005eb8 <DisplayTopology+0x19c>)
 8005e76:	9803      	ldr	r0, [sp, #12]
 8005e78:	f007 fa68 	bl	800d34c <writePxMutex>
}
 8005e7c:	b004      	add	sp, #16
 8005e7e:	bc1c      	pop	{r2, r3, r4}
 8005e80:	4690      	mov	r8, r2
 8005e82:	4699      	mov	r9, r3
 8005e84:	46a2      	mov	sl, r4
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	20001220 	.word	0x20001220
 8005e8c:	08017b94 	.word	0x08017b94
 8005e90:	08017ba8 	.word	0x08017ba8
 8005e94:	08019f78 	.word	0x08019f78
 8005e98:	2000001c 	.word	0x2000001c
 8005e9c:	20000a30 	.word	0x20000a30
 8005ea0:	08017bc0 	.word	0x08017bc0
 8005ea4:	08017bbc 	.word	0x08017bbc
 8005ea8:	08017a3c 	.word	0x08017a3c
 8005eac:	08017bb0 	.word	0x08017bb0
 8005eb0:	08018274 	.word	0x08018274
 8005eb4:	08017ba4 	.word	0x08017ba4
 8005eb8:	080192b4 	.word	0x080192b4

08005ebc <DisplayPortsDir>:
{
 8005ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ebe:	46c6      	mov	lr, r8
 8005ec0:	b500      	push	{lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	0005      	movs	r5, r0
 8005ec6:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8005ec8:	4c30      	ldr	r4, [pc, #192]	; (8005f8c <DisplayPortsDir+0xd0>)
 8005eca:	4b31      	ldr	r3, [pc, #196]	; (8005f90 <DisplayPortsDir+0xd4>)
 8005ecc:	0022      	movs	r2, r4
 8005ece:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005ed0:	c243      	stmia	r2!, {r0, r1, r6}
 8005ed2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005ed4:	c243      	stmia	r2!, {r0, r1, r6}
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005eda:	0020      	movs	r0, r4
 8005edc:	f7fa f91c 	bl	8000118 <strlen>
 8005ee0:	b282      	uxth	r2, r0
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	3333      	adds	r3, #51	; 0x33
 8005eea:	0021      	movs	r1, r4
 8005eec:	0028      	movs	r0, r5
 8005eee:	f007 fa2d 	bl	800d34c <writePxMutex>
	for (uint8_t i=1 ; i<=N ; i++) 
 8005ef2:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <DisplayPortsDir+0xd8>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4690      	mov	r8, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02c      	beq.n	8005f58 <DisplayPortsDir+0x9c>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005efe:	4e26      	ldr	r6, [pc, #152]	; (8005f98 <DisplayPortsDir+0xdc>)
 8005f00:	e025      	b.n	8005f4e <DisplayPortsDir+0x92>
 8005f02:	0023      	movs	r3, r4
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8005f04:	2c0a      	cmp	r4, #10
 8005f06:	d01a      	beq.n	8005f3e <DisplayPortsDir+0x82>
 8005f08:	1c5c      	adds	r4, r3, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005f0a:	5ba9      	ldrh	r1, [r5, r6]
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	0212      	lsls	r2, r2, #8
 8005f10:	411a      	asrs	r2, r3
 8005f12:	420a      	tst	r2, r1
 8005f14:	d0f5      	beq.n	8005f02 <DisplayPortsDir+0x46>
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8005f16:	4f1d      	ldr	r7, [pc, #116]	; (8005f8c <DisplayPortsDir+0xd0>)
 8005f18:	0023      	movs	r3, r4
 8005f1a:	4642      	mov	r2, r8
 8005f1c:	491f      	ldr	r1, [pc, #124]	; (8005f9c <DisplayPortsDir+0xe0>)
 8005f1e:	0038      	movs	r0, r7
 8005f20:	f00d f968 	bl	80131f4 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f24:	0038      	movs	r0, r7
 8005f26:	f7fa f8f7 	bl	8000118 <strlen>
 8005f2a:	b282      	uxth	r2, r0
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	425b      	negs	r3, r3
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	3333      	adds	r3, #51	; 0x33
 8005f34:	0039      	movs	r1, r7
 8005f36:	9803      	ldr	r0, [sp, #12]
 8005f38:	f007 fa08 	bl	800d34c <writePxMutex>
 8005f3c:	e7e1      	b.n	8005f02 <DisplayPortsDir+0x46>
	for (uint8_t i=1 ; i<=N ; i++) 
 8005f3e:	4643      	mov	r3, r8
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4698      	mov	r8, r3
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <DisplayPortsDir+0xd8>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4543      	cmp	r3, r8
 8005f4c:	d304      	bcc.n	8005f58 <DisplayPortsDir+0x9c>
{
 8005f4e:	2300      	movs	r3, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8005f50:	4642      	mov	r2, r8
 8005f52:	1e55      	subs	r5, r2, #1
 8005f54:	006d      	lsls	r5, r5, #1
 8005f56:	e7d7      	b.n	8005f08 <DisplayPortsDir+0x4c>
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8005f58:	4c0c      	ldr	r4, [pc, #48]	; (8005f8c <DisplayPortsDir+0xd0>)
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <DisplayPortsDir+0xe4>)
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005f60:	c223      	stmia	r2!, {r0, r1, r5}
 8005f62:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005f64:	c223      	stmia	r2!, {r0, r1, r5}
 8005f66:	cb03      	ldmia	r3!, {r0, r1}
 8005f68:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f6a:	0020      	movs	r0, r4
 8005f6c:	f7fa f8d4 	bl	8000118 <strlen>
 8005f70:	b282      	uxth	r2, r0
 8005f72:	2301      	movs	r3, #1
 8005f74:	425b      	negs	r3, r3
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	3333      	adds	r3, #51	; 0x33
 8005f7a:	0021      	movs	r1, r4
 8005f7c:	9803      	ldr	r0, [sp, #12]
 8005f7e:	f007 f9e5 	bl	800d34c <writePxMutex>
}
 8005f82:	b004      	add	sp, #16
 8005f84:	bc04      	pop	{r2}
 8005f86:	4690      	mov	r8, r2
 8005f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	20001220 	.word	0x20001220
 8005f90:	08017b44 	.word	0x08017b44
 8005f94:	2000001c 	.word	0x2000001c
 8005f98:	20000c58 	.word	0x20000c58
 8005f9c:	08017b60 	.word	0x08017b60
 8005fa0:	08017b74 	.word	0x08017b74

08005fa4 <DisplayModuleStatus>:
{
 8005fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa6:	46d6      	mov	lr, sl
 8005fa8:	b500      	push	{lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	9003      	str	r0, [sp, #12]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8005fae:	f007 fbd7 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8005fb2:	0004      	movs	r4, r0
	strcpy( (char *) pcOutputString, "");
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8005fb8:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <DisplayModuleStatus+0x24c>)
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	4d8d      	ldr	r5, [pc, #564]	; (80061f4 <DisplayModuleStatus+0x250>)
 8005fbe:	498e      	ldr	r1, [pc, #568]	; (80061f8 <DisplayModuleStatus+0x254>)
 8005fc0:	0028      	movs	r0, r5
 8005fc2:	f00d f917 	bl	80131f4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005fc6:	0029      	movs	r1, r5
 8005fc8:	0020      	movs	r0, r4
 8005fca:	f00d f933 	bl	8013234 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8005fce:	4b8b      	ldr	r3, [pc, #556]	; (80061fc <DisplayModuleStatus+0x258>)
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	498b      	ldr	r1, [pc, #556]	; (8006200 <DisplayModuleStatus+0x25c>)
 8005fd4:	0028      	movs	r0, r5
 8005fd6:	f00d f90d 	bl	80131f4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005fda:	0029      	movs	r1, r5
 8005fdc:	0020      	movs	r0, r4
 8005fde:	f00d f929 	bl	8013234 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4986      	ldr	r1, [pc, #536]	; (8006204 <DisplayModuleStatus+0x260>)
 8005fec:	0028      	movs	r0, r5
 8005fee:	f00d f901 	bl	80131f4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8005ff2:	0029      	movs	r1, r5
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	f00d f91d 	bl	8013234 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8005ffa:	4a83      	ldr	r2, [pc, #524]	; (8006208 <DisplayModuleStatus+0x264>)
 8005ffc:	4983      	ldr	r1, [pc, #524]	; (800620c <DisplayModuleStatus+0x268>)
 8005ffe:	0028      	movs	r0, r5
 8006000:	f00d f8f8 	bl	80131f4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8006004:	0029      	movs	r1, r5
 8006006:	0020      	movs	r0, r4
 8006008:	f00d f914 	bl	8013234 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 800600c:	4a80      	ldr	r2, [pc, #512]	; (8006210 <DisplayModuleStatus+0x26c>)
 800600e:	4981      	ldr	r1, [pc, #516]	; (8006214 <DisplayModuleStatus+0x270>)
 8006010:	0028      	movs	r0, r5
 8006012:	f00d f8ef 	bl	80131f4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8006016:	0029      	movs	r1, r5
 8006018:	0020      	movs	r0, r4
 800601a:	f00d f90b 	bl	8013234 <strcat>
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 800601e:	4b7e      	ldr	r3, [pc, #504]	; (8006218 <DisplayModuleStatus+0x274>)
 8006020:	002a      	movs	r2, r5
 8006022:	cb43      	ldmia	r3!, {r0, r1, r6}
 8006024:	c243      	stmia	r2!, {r0, r1, r6}
 8006026:	6819      	ldr	r1, [r3, #0]
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	8899      	ldrh	r1, [r3, #4]
 800602c:	8091      	strh	r1, [r2, #4]
 800602e:	799b      	ldrb	r3, [r3, #6]
 8006030:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8006032:	0029      	movs	r1, r5
 8006034:	0020      	movs	r0, r4
 8006036:	f00d f8fd 	bl	8013234 <strcat>
 800603a:	2601      	movs	r6, #1
		sprintf(pcUserMessage, "P%d: ", i);
 800603c:	4d6d      	ldr	r5, [pc, #436]	; (80061f4 <DisplayModuleStatus+0x250>)
		switch (portStatus[i])
 800603e:	4b77      	ldr	r3, [pc, #476]	; (800621c <DisplayModuleStatus+0x278>)
 8006040:	469a      	mov	sl, r3
 8006042:	e00e      	b.n	8006062 <DisplayModuleStatus+0xbe>
						sprintf(pcUserMessage, "Free\n\r"); break;
 8006044:	4b6b      	ldr	r3, [pc, #428]	; (80061f4 <DisplayModuleStatus+0x250>)
 8006046:	4a76      	ldr	r2, [pc, #472]	; (8006220 <DisplayModuleStatus+0x27c>)
 8006048:	6811      	ldr	r1, [r2, #0]
 800604a:	6019      	str	r1, [r3, #0]
 800604c:	8891      	ldrh	r1, [r2, #4]
 800604e:	8099      	strh	r1, [r3, #4]
 8006050:	7992      	ldrb	r2, [r2, #6]
 8006052:	719a      	strb	r2, [r3, #6]
		strcat( (char *) pcOutputString, pcUserMessage);
 8006054:	4967      	ldr	r1, [pc, #412]	; (80061f4 <DisplayModuleStatus+0x250>)
 8006056:	0020      	movs	r0, r4
 8006058:	f00d f8ec 	bl	8013234 <strcat>
 800605c:	3601      	adds	r6, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800605e:	2e06      	cmp	r6, #6
 8006060:	d039      	beq.n	80060d6 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 8006062:	0032      	movs	r2, r6
 8006064:	496f      	ldr	r1, [pc, #444]	; (8006224 <DisplayModuleStatus+0x280>)
 8006066:	0028      	movs	r0, r5
 8006068:	f00d f8c4 	bl	80131f4 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 800606c:	0029      	movs	r1, r5
 800606e:	0020      	movs	r0, r4
 8006070:	f00d f8e0 	bl	8013234 <strcat>
		switch (portStatus[i])
 8006074:	4653      	mov	r3, sl
 8006076:	5cf3      	ldrb	r3, [r6, r3]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d8eb      	bhi.n	8006054 <DisplayModuleStatus+0xb0>
 800607c:	4653      	mov	r3, sl
 800607e:	5cf3      	ldrb	r3, [r6, r3]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4a69      	ldr	r2, [pc, #420]	; (8006228 <DisplayModuleStatus+0x284>)
 8006084:	58d3      	ldr	r3, [r2, r3]
 8006086:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8006088:	495a      	ldr	r1, [pc, #360]	; (80061f4 <DisplayModuleStatus+0x250>)
 800608a:	4b68      	ldr	r3, [pc, #416]	; (800622c <DisplayModuleStatus+0x288>)
 800608c:	000a      	movs	r2, r1
 800608e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8006090:	c283      	stmia	r2!, {r0, r1, r7}
 8006092:	cb03      	ldmia	r3!, {r0, r1}
 8006094:	c203      	stmia	r2!, {r0, r1}
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	7013      	strb	r3, [r2, #0]
 800609a:	e7db      	b.n	8006054 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 800609c:	4a55      	ldr	r2, [pc, #340]	; (80061f4 <DisplayModuleStatus+0x250>)
 800609e:	4b64      	ldr	r3, [pc, #400]	; (8006230 <DisplayModuleStatus+0x28c>)
 80060a0:	cb83      	ldmia	r3!, {r0, r1, r7}
 80060a2:	c283      	stmia	r2!, {r0, r1, r7}
 80060a4:	e7d6      	b.n	8006054 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 80060a6:	4953      	ldr	r1, [pc, #332]	; (80061f4 <DisplayModuleStatus+0x250>)
 80060a8:	4b62      	ldr	r3, [pc, #392]	; (8006234 <DisplayModuleStatus+0x290>)
 80060aa:	000a      	movs	r2, r1
 80060ac:	cb83      	ldmia	r3!, {r0, r1, r7}
 80060ae:	c283      	stmia	r2!, {r0, r1, r7}
 80060b0:	cb83      	ldmia	r3!, {r0, r1, r7}
 80060b2:	c283      	stmia	r2!, {r0, r1, r7}
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	8013      	strh	r3, [r2, #0]
 80060b8:	e7cc      	b.n	8006054 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 80060ba:	494e      	ldr	r1, [pc, #312]	; (80061f4 <DisplayModuleStatus+0x250>)
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <DisplayModuleStatus+0x294>)
 80060be:	000a      	movs	r2, r1
 80060c0:	cb83      	ldmia	r3!, {r0, r1, r7}
 80060c2:	c283      	stmia	r2!, {r0, r1, r7}
 80060c4:	cb83      	ldmia	r3!, {r0, r1, r7}
 80060c6:	c283      	stmia	r2!, {r0, r1, r7}
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	6011      	str	r1, [r2, #0]
 80060cc:	8899      	ldrh	r1, [r3, #4]
 80060ce:	8091      	strh	r1, [r2, #4]
 80060d0:	799b      	ldrb	r3, [r3, #6]
 80060d2:	7193      	strb	r3, [r2, #6]
 80060d4:	e7be      	b.n	8006054 <DisplayModuleStatus+0xb0>
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 80060d6:	4947      	ldr	r1, [pc, #284]	; (80061f4 <DisplayModuleStatus+0x250>)
 80060d8:	4b58      	ldr	r3, [pc, #352]	; (800623c <DisplayModuleStatus+0x298>)
 80060da:	000a      	movs	r2, r1
 80060dc:	cb61      	ldmia	r3!, {r0, r5, r6}
 80060de:	c261      	stmia	r2!, {r0, r5, r6}
 80060e0:	cb61      	ldmia	r3!, {r0, r5, r6}
 80060e2:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 80060e4:	0020      	movs	r0, r4
 80060e6:	f00d f8a5 	bl	8013234 <strcat>
 80060ea:	4e55      	ldr	r6, [pc, #340]	; (8006240 <DisplayModuleStatus+0x29c>)
 80060ec:	2701      	movs	r7, #1
 80060ee:	e00d      	b.n	800610c <DisplayModuleStatus+0x168>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80060f0:	4d40      	ldr	r5, [pc, #256]	; (80061f4 <DisplayModuleStatus+0x250>)
 80060f2:	003a      	movs	r2, r7
 80060f4:	4953      	ldr	r1, [pc, #332]	; (8006244 <DisplayModuleStatus+0x2a0>)
 80060f6:	0028      	movs	r0, r5
 80060f8:	f00d f87c 	bl	80131f4 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80060fc:	0029      	movs	r1, r5
 80060fe:	0020      	movs	r0, r4
 8006100:	f00d f898 	bl	8013234 <strcat>
 8006104:	3701      	adds	r7, #1
 8006106:	3638      	adds	r6, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 8006108:	2f07      	cmp	r7, #7
 800610a:	d018      	beq.n	800613e <DisplayModuleStatus+0x19a>
		if (streamDMA[i-1].Instance == 0) {
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0ee      	beq.n	80060f0 <DisplayModuleStatus+0x14c>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8006112:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006114:	f005 fb1e 	bl	800b754 <GetPort>
 8006118:	0005      	movs	r5, r0
 800611a:	00bb      	lsls	r3, r7, #2
 800611c:	3b04      	subs	r3, #4
 800611e:	4a4a      	ldr	r2, [pc, #296]	; (8006248 <DisplayModuleStatus+0x2a4>)
 8006120:	58d0      	ldr	r0, [r2, r3]
 8006122:	f005 fb17 	bl	800b754 <GetPort>
 8006126:	9000      	str	r0, [sp, #0]
 8006128:	002b      	movs	r3, r5
 800612a:	003a      	movs	r2, r7
 800612c:	4947      	ldr	r1, [pc, #284]	; (800624c <DisplayModuleStatus+0x2a8>)
 800612e:	4831      	ldr	r0, [pc, #196]	; (80061f4 <DisplayModuleStatus+0x250>)
 8006130:	f00d f860 	bl	80131f4 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8006134:	492f      	ldr	r1, [pc, #188]	; (80061f4 <DisplayModuleStatus+0x250>)
 8006136:	0020      	movs	r0, r4
 8006138:	f00d f87c 	bl	8013234 <strcat>
 800613c:	e7e2      	b.n	8006104 <DisplayModuleStatus+0x160>
	strcat( (char *) pcOutputString, "\n\r");
 800613e:	0020      	movs	r0, r4
 8006140:	f7f9 ffea 	bl	8000118 <strlen>
 8006144:	1820      	adds	r0, r4, r0
 8006146:	2203      	movs	r2, #3
 8006148:	4941      	ldr	r1, [pc, #260]	; (8006250 <DisplayModuleStatus+0x2ac>)
 800614a:	f00c fe50 	bl	8012dee <memcpy>
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 800614e:	0020      	movs	r0, r4
 8006150:	f7f9 ffe2 	bl	8000118 <strlen>
 8006154:	1820      	adds	r0, r4, r0
 8006156:	221d      	movs	r2, #29
 8006158:	493e      	ldr	r1, [pc, #248]	; (8006254 <DisplayModuleStatus+0x2b0>)
 800615a:	f00c fe48 	bl	8012dee <memcpy>
	temp = strlen( (char *) pcOutputString);
 800615e:	0020      	movs	r0, r4
 8006160:	f7f9 ffda 	bl	8000118 <strlen>
 8006164:	4682      	mov	sl, r0
 8006166:	2200      	movs	r2, #0
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8006168:	4e3b      	ldr	r6, [pc, #236]	; (8006258 <DisplayModuleStatus+0x2b4>)
 800616a:	4f21      	ldr	r7, [pc, #132]	; (80061f0 <DisplayModuleStatus+0x24c>)
 800616c:	e002      	b.n	8006174 <DisplayModuleStatus+0x1d0>
 800616e:	002a      	movs	r2, r5
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8006170:	2d05      	cmp	r5, #5
 8006172:	d013      	beq.n	800619c <DisplayModuleStatus+0x1f8>
 8006174:	1c55      	adds	r5, r2, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8006176:	783b      	ldrb	r3, [r7, #0]
 8006178:	3b01      	subs	r3, #1
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	5b99      	ldrh	r1, [r3, r6]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	4113      	asrs	r3, r2
 8006184:	420b      	tst	r3, r1
 8006186:	d0f2      	beq.n	800616e <DisplayModuleStatus+0x1ca>
			sprintf(pcUserMessage, "P%d ", p);
 8006188:	002a      	movs	r2, r5
 800618a:	4934      	ldr	r1, [pc, #208]	; (800625c <DisplayModuleStatus+0x2b8>)
 800618c:	4819      	ldr	r0, [pc, #100]	; (80061f4 <DisplayModuleStatus+0x250>)
 800618e:	f00d f831 	bl	80131f4 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 8006192:	4918      	ldr	r1, [pc, #96]	; (80061f4 <DisplayModuleStatus+0x250>)
 8006194:	0020      	movs	r0, r4
 8006196:	f00d f84d 	bl	8013234 <strcat>
 800619a:	e7e8      	b.n	800616e <DisplayModuleStatus+0x1ca>
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 800619c:	0020      	movs	r0, r4
 800619e:	f7f9 ffbb 	bl	8000118 <strlen>
 80061a2:	4653      	mov	r3, sl
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	4298      	cmp	r0, r3
 80061aa:	d00e      	beq.n	80061ca <DisplayModuleStatus+0x226>
	strcat( (char *) pcOutputString, "\n\r");
 80061ac:	0020      	movs	r0, r4
 80061ae:	f7f9 ffb3 	bl	8000118 <strlen>
 80061b2:	1820      	adds	r0, r4, r0
 80061b4:	2203      	movs	r2, #3
 80061b6:	4926      	ldr	r1, [pc, #152]	; (8006250 <DisplayModuleStatus+0x2ac>)
 80061b8:	f00c fe19 	bl	8012dee <memcpy>
	if (port)
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <DisplayModuleStatus+0x232>
}
 80061c2:	b004      	add	sp, #16
 80061c4:	bc04      	pop	{r2}
 80061c6:	4692      	mov	sl, r2
 80061c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 80061ca:	1820      	adds	r0, r4, r0
 80061cc:	2205      	movs	r2, #5
 80061ce:	4924      	ldr	r1, [pc, #144]	; (8006260 <DisplayModuleStatus+0x2bc>)
 80061d0:	f00c fe0d 	bl	8012dee <memcpy>
 80061d4:	e7ea      	b.n	80061ac <DisplayModuleStatus+0x208>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 80061d6:	0020      	movs	r0, r4
 80061d8:	f7f9 ff9e 	bl	8000118 <strlen>
 80061dc:	b282      	uxth	r2, r0
 80061de:	2301      	movs	r3, #1
 80061e0:	425b      	negs	r3, r3
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	3333      	adds	r3, #51	; 0x33
 80061e6:	0021      	movs	r1, r4
 80061e8:	9803      	ldr	r0, [sp, #12]
 80061ea:	f007 f8af 	bl	800d34c <writePxMutex>
}
 80061ee:	e7e8      	b.n	80061c2 <DisplayModuleStatus+0x21e>
 80061f0:	200011c8 	.word	0x200011c8
 80061f4:	20001220 	.word	0x20001220
 80061f8:	080179a0 	.word	0x080179a0
 80061fc:	20000a2f 	.word	0x20000a2f
 8006200:	080179bc 	.word	0x080179bc
 8006204:	080179d8 	.word	0x080179d8
 8006208:	08017be4 	.word	0x08017be4
 800620c:	080179f8 	.word	0x080179f8
 8006210:	08017bf0 	.word	0x08017bf0
 8006214:	08017a10 	.word	0x08017a10
 8006218:	08017a2c 	.word	0x08017a2c
 800621c:	20001270 	.word	0x20001270
 8006220:	08017a48 	.word	0x08017a48
 8006224:	08017a40 	.word	0x08017a40
 8006228:	08017808 	.word	0x08017808
 800622c:	08017a50 	.word	0x08017a50
 8006230:	08017a68 	.word	0x08017a68
 8006234:	08017a74 	.word	0x08017a74
 8006238:	08017a90 	.word	0x08017a90
 800623c:	08017ab0 	.word	0x08017ab0
 8006240:	2000182c 	.word	0x2000182c
 8006244:	08017ac8 	.word	0x08017ac8
 8006248:	200015d0 	.word	0x200015d0
 800624c:	08017ae4 	.word	0x08017ae4
 8006250:	08017a3c 	.word	0x08017a3c
 8006254:	08017b14 	.word	0x08017b14
 8006258:	20000c58 	.word	0x20000c58
 800625c:	08017b34 	.word	0x08017b34
 8006260:	08017b3c 	.word	0x08017b3c

08006264 <statusCommand>:
{
 8006264:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8006266:	2800      	cmp	r0, #0
 8006268:	d101      	bne.n	800626e <statusCommand+0xa>
 800626a:	b672      	cpsid	i
 800626c:	e7fe      	b.n	800626c <statusCommand+0x8>
	DisplayModuleStatus(0);
 800626e:	2000      	movs	r0, #0
 8006270:	f7ff fe98 	bl	8005fa4 <DisplayModuleStatus>
}
 8006274:	2000      	movs	r0, #0
 8006276:	bd10      	pop	{r4, pc}

08006278 <GetID>:
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	46c6      	mov	lr, r8
 800627c:	b500      	push	{lr}
 800627e:	0005      	movs	r5, r0
	if(!strcmp(string, "me"))							/* Check keywords */
 8006280:	4929      	ldr	r1, [pc, #164]	; (8006328 <GetID+0xb0>)
 8006282:	f7f9 ff3f 	bl	8000104 <strcmp>
 8006286:	2800      	cmp	r0, #0
 8006288:	d010      	beq.n	80062ac <GetID+0x34>
	else if(!strcmp(string, "all"))							
 800628a:	4928      	ldr	r1, [pc, #160]	; (800632c <GetID+0xb4>)
 800628c:	0028      	movs	r0, r5
 800628e:	f7f9 ff39 	bl	8000104 <strcmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	d045      	beq.n	8006322 <GetID+0xaa>
	else if (string[0] == '#') 						/* Check IDs */
 8006296:	782b      	ldrb	r3, [r5, #0]
 8006298:	4698      	mov	r8, r3
 800629a:	2b23      	cmp	r3, #35	; 0x23
 800629c:	d00b      	beq.n	80062b6 <GetID+0x3e>
		for (i=0 ; i<N ; i++) {
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <GetID+0xb8>)
 80062a0:	781f      	ldrb	r7, [r3, #0]
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	d02a      	beq.n	80062fc <GetID+0x84>
 80062a6:	4e23      	ldr	r6, [pc, #140]	; (8006334 <GetID+0xbc>)
 80062a8:	2400      	movs	r4, #0
 80062aa:	e01c      	b.n	80062e6 <GetID+0x6e>
		return myID;
 80062ac:	4b22      	ldr	r3, [pc, #136]	; (8006338 <GetID+0xc0>)
 80062ae:	7818      	ldrb	r0, [r3, #0]
}
 80062b0:	bc04      	pop	{r2}
 80062b2:	4690      	mov	r8, r2
 80062b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 80062b6:	1c68      	adds	r0, r5, #1
 80062b8:	f00c fb0f 	bl	80128da <atol>
 80062bc:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <GetID+0x52>
 80062c2:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <GetID+0xb8>)
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d206      	bcs.n	80062d8 <GetID+0x60>
		else if (id == myID)
 80062ca:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <GetID+0xc0>)
 80062cc:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 80062ce:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d1ed      	bne.n	80062b0 <GetID+0x38>
			return myID;
 80062d4:	b210      	sxth	r0, r2
 80062d6:	e7eb      	b.n	80062b0 <GetID+0x38>
			return id;
 80062d8:	b218      	sxth	r0, r3
 80062da:	e7e9      	b.n	80062b0 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80062dc:	3401      	adds	r4, #1
 80062de:	b2e4      	uxtb	r4, r4
 80062e0:	360a      	adds	r6, #10
 80062e2:	42bc      	cmp	r4, r7
 80062e4:	d00a      	beq.n	80062fc <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80062e6:	0031      	movs	r1, r6
 80062e8:	0028      	movs	r0, r5
 80062ea:	f7f9 ff0b 	bl	8000104 <strcmp>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d1f4      	bne.n	80062dc <GetID+0x64>
 80062f2:	4643      	mov	r3, r8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f1      	beq.n	80062dc <GetID+0x64>
 80062f8:	b220      	sxth	r0, r4
 80062fa:	e7d9      	b.n	80062b0 <GetID+0x38>
 80062fc:	4f0f      	ldr	r7, [pc, #60]	; (800633c <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80062fe:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8006300:	0039      	movs	r1, r7
 8006302:	0028      	movs	r0, r5
 8006304:	f7f9 fefe 	bl	8000104 <strcmp>
 8006308:	2800      	cmp	r0, #0
 800630a:	d005      	beq.n	8006318 <GetID+0xa0>
 800630c:	3601      	adds	r6, #1
 800630e:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8006310:	2e0a      	cmp	r6, #10
 8006312:	d1f5      	bne.n	8006300 <GetID+0x88>
		return BOS_ERR_WrongName;			
 8006314:	2064      	movs	r0, #100	; 0x64
 8006316:	e7cb      	b.n	80062b0 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8006318:	0234      	lsls	r4, r6, #8
 800631a:	20fe      	movs	r0, #254	; 0xfe
 800631c:	4320      	orrs	r0, r4
 800631e:	b200      	sxth	r0, r0
 8006320:	e7c6      	b.n	80062b0 <GetID+0x38>
		return BOS_BROADCAST;				
 8006322:	20ff      	movs	r0, #255	; 0xff
 8006324:	e7c4      	b.n	80062b0 <GetID+0x38>
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	08017bc8 	.word	0x08017bc8
 800632c:	08017fc4 	.word	0x08017fc4
 8006330:	2000001c 	.word	0x2000001c
 8006334:	200010c4 	.word	0x200010c4
 8006338:	200011c8 	.word	0x200011c8
 800633c:	20000ea4 	.word	0x20000ea4

08006340 <NameModule>:
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b083      	sub	sp, #12
 8006344:	9001      	str	r0, [sp, #4]
 8006346:	000d      	movs	r5, r1
 8006348:	4c2a      	ldr	r4, [pc, #168]	; (80063f4 <NameModule+0xb4>)
 800634a:	0027      	movs	r7, r4
 800634c:	3710      	adds	r7, #16
		if (!strcmp(alias, BOSkeywords[i]))	
 800634e:	0021      	movs	r1, r4
 8006350:	0028      	movs	r0, r5
 8006352:	f7f9 fed7 	bl	8000104 <strcmp>
 8006356:	2800      	cmp	r0, #0
 8006358:	d043      	beq.n	80063e2 <NameModule+0xa2>
 800635a:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 800635c:	42bc      	cmp	r4, r7
 800635e:	d1f6      	bne.n	800634e <NameModule+0xe>
	for(i=1 ; i<N ; i++)
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <NameModule+0xb8>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d90f      	bls.n	8006388 <NameModule+0x48>
 8006368:	4c24      	ldr	r4, [pc, #144]	; (80063fc <NameModule+0xbc>)
 800636a:	009f      	lsls	r7, r3, #2
 800636c:	18ff      	adds	r7, r7, r3
 800636e:	007f      	lsls	r7, r7, #1
 8006370:	0023      	movs	r3, r4
 8006372:	3b0a      	subs	r3, #10
 8006374:	18ff      	adds	r7, r7, r3
		if (!strcmp(alias, moduleAlias[i]))	
 8006376:	0021      	movs	r1, r4
 8006378:	0028      	movs	r0, r5
 800637a:	f7f9 fec3 	bl	8000104 <strcmp>
 800637e:	2800      	cmp	r0, #0
 8006380:	d031      	beq.n	80063e6 <NameModule+0xa6>
 8006382:	340a      	adds	r4, #10
	for(i=1 ; i<N ; i++)
 8006384:	42bc      	cmp	r4, r7
 8006386:	d1f6      	bne.n	8006376 <NameModule+0x36>
 8006388:	4c1d      	ldr	r4, [pc, #116]	; (8006400 <NameModule+0xc0>)
 800638a:	0027      	movs	r7, r4
 800638c:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 800638e:	0021      	movs	r1, r4
 8006390:	0028      	movs	r0, r5
 8006392:	f7f9 feb7 	bl	8000104 <strcmp>
 8006396:	2800      	cmp	r0, #0
 8006398:	d028      	beq.n	80063ec <NameModule+0xac>
 800639a:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800639c:	42bc      	cmp	r4, r7
 800639e:	d1f6      	bne.n	800638e <NameModule+0x4e>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80063a0:	4c18      	ldr	r4, [pc, #96]	; (8006404 <NameModule+0xc4>)
 80063a2:	4b19      	ldr	r3, [pc, #100]	; (8006408 <NameModule+0xc8>)
 80063a4:	601c      	str	r4, [r3, #0]
 80063a6:	001e      	movs	r6, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80063ac:	0038      	movs	r0, r7
 80063ae:	f7f9 feb3 	bl	8000118 <strlen>
 80063b2:	0002      	movs	r2, r0
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80063b4:	0039      	movs	r1, r7
 80063b6:	0028      	movs	r0, r5
 80063b8:	f00c ff60 	bl	801327c <strncmp>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d017      	beq.n	80063f0 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80063c0:	6864      	ldr	r4, [r4, #4]
 80063c2:	6034      	str	r4, [r6, #0]
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	d1ef      	bne.n	80063a8 <NameModule+0x68>
	strcpy(moduleAlias[module], alias);
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	0098      	lsls	r0, r3, #2
 80063cc:	469c      	mov	ip, r3
 80063ce:	4460      	add	r0, ip
 80063d0:	0040      	lsls	r0, r0, #1
 80063d2:	4e0e      	ldr	r6, [pc, #56]	; (800640c <NameModule+0xcc>)
 80063d4:	1980      	adds	r0, r0, r6
 80063d6:	0029      	movs	r1, r5
 80063d8:	f00c ff48 	bl	801326c <strcpy>
	result = SaveEEalias();
 80063dc:	f7fd fd90 	bl	8003f00 <SaveEEalias>
	return result;
 80063e0:	e002      	b.n	80063e8 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80063e2:	2006      	movs	r0, #6
 80063e4:	e000      	b.n	80063e8 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80063e6:	2007      	movs	r0, #7
}
 80063e8:	b003      	add	sp, #12
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80063ec:	2007      	movs	r0, #7
 80063ee:	e7fb      	b.n	80063e8 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80063f0:	2008      	movs	r0, #8
 80063f2:	e7f9      	b.n	80063e8 <NameModule+0xa8>
 80063f4:	08017990 	.word	0x08017990
 80063f8:	2000001c 	.word	0x2000001c
 80063fc:	200010ce 	.word	0x200010ce
 8006400:	20000ea4 	.word	0x20000ea4
 8006404:	20000054 	.word	0x20000054
 8006408:	20001294 	.word	0x20001294
 800640c:	200010c4 	.word	0x200010c4

08006410 <nameCommand>:
{
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	0004      	movs	r4, r0
 8006414:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 8006416:	2c00      	cmp	r4, #0
 8006418:	d101      	bne.n	800641e <nameCommand+0xe>
 800641a:	b672      	cpsid	i
 800641c:	e7fe      	b.n	800641c <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800641e:	4d1c      	ldr	r5, [pc, #112]	; (8006490 <nameCommand+0x80>)
 8006420:	002a      	movs	r2, r5
 8006422:	2101      	movs	r1, #1
 8006424:	f007 f9a0 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8006428:	0001      	movs	r1, r0
 800642a:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <nameCommand+0x84>)
 800642c:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	2b09      	cmp	r3, #9
 8006432:	dd01      	ble.n	8006438 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006434:	2300      	movs	r3, #0
 8006436:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006438:	4b17      	ldr	r3, [pc, #92]	; (8006498 <nameCommand+0x88>)
 800643a:	7818      	ldrb	r0, [r3, #0]
 800643c:	f7ff ff80 	bl	8006340 <NameModule>
	if (result == BOS_OK)
 8006440:	2800      	cmp	r0, #0
 8006442:	d007      	beq.n	8006454 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006444:	2806      	cmp	r0, #6
 8006446:	d00e      	beq.n	8006466 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006448:	2807      	cmp	r0, #7
 800644a:	d013      	beq.n	8006474 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 800644c:	2808      	cmp	r0, #8
 800644e:	d018      	beq.n	8006482 <nameCommand+0x72>
}
 8006450:	2000      	movs	r0, #0
 8006452:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006454:	4b10      	ldr	r3, [pc, #64]	; (8006498 <nameCommand+0x88>)
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <nameCommand+0x84>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	490f      	ldr	r1, [pc, #60]	; (800649c <nameCommand+0x8c>)
 800645e:	0020      	movs	r0, r4
 8006460:	f00c fec8 	bl	80131f4 <sprintf>
 8006464:	e7f4      	b.n	8006450 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <nameCommand+0x84>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	490d      	ldr	r1, [pc, #52]	; (80064a0 <nameCommand+0x90>)
 800646c:	0020      	movs	r0, r4
 800646e:	f00c fec1 	bl	80131f4 <sprintf>
 8006472:	e7ed      	b.n	8006450 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <nameCommand+0x84>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	490a      	ldr	r1, [pc, #40]	; (80064a4 <nameCommand+0x94>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00c feba 	bl	80131f4 <sprintf>
 8006480:	e7e6      	b.n	8006450 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006482:	4b04      	ldr	r3, [pc, #16]	; (8006494 <nameCommand+0x84>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4908      	ldr	r1, [pc, #32]	; (80064a8 <nameCommand+0x98>)
 8006488:	0020      	movs	r0, r4
 800648a:	f00c feb3 	bl	80131f4 <sprintf>
 800648e:	e7df      	b.n	8006450 <nameCommand+0x40>
 8006490:	20001324 	.word	0x20001324
 8006494:	200011f8 	.word	0x200011f8
 8006498:	200011c8 	.word	0x200011c8
 800649c:	08018328 	.word	0x08018328
 80064a0:	08018340 	.word	0x08018340
 80064a4:	08018380 	.word	0x08018380
 80064a8:	080183b4 	.word	0x080183b4

080064ac <AddModuleToGroup>:
{
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	46c6      	mov	lr, r8
 80064b0:	b500      	push	{lr}
 80064b2:	0007      	movs	r7, r0
 80064b4:	000e      	movs	r6, r1
 80064b6:	4d3a      	ldr	r5, [pc, #232]	; (80065a0 <AddModuleToGroup+0xf4>)
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80064b8:	2400      	movs	r4, #0
		if (!strcmp(group, groupAlias[i]))	
 80064ba:	0029      	movs	r1, r5
 80064bc:	0030      	movs	r0, r6
 80064be:	f7f9 fe21 	bl	8000104 <strcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d050      	beq.n	8006568 <AddModuleToGroup+0xbc>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80064c6:	3401      	adds	r4, #1
 80064c8:	350a      	adds	r5, #10
 80064ca:	2c0a      	cmp	r4, #10
 80064cc:	d1f5      	bne.n	80064ba <AddModuleToGroup+0xe>
 80064ce:	4c35      	ldr	r4, [pc, #212]	; (80065a4 <AddModuleToGroup+0xf8>)
 80064d0:	0025      	movs	r5, r4
 80064d2:	3510      	adds	r5, #16
		if (!strcmp(group, BOSkeywords[j]))	
 80064d4:	0021      	movs	r1, r4
 80064d6:	0030      	movs	r0, r6
 80064d8:	f7f9 fe14 	bl	8000104 <strcmp>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d058      	beq.n	8006592 <AddModuleToGroup+0xe6>
 80064e0:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 80064e2:	42ac      	cmp	r4, r5
 80064e4:	d1f6      	bne.n	80064d4 <AddModuleToGroup+0x28>
	for(j=1 ; j<N ; j++)
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <AddModuleToGroup+0xfc>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d90f      	bls.n	800650e <AddModuleToGroup+0x62>
 80064ee:	4c2f      	ldr	r4, [pc, #188]	; (80065ac <AddModuleToGroup+0x100>)
 80064f0:	009d      	lsls	r5, r3, #2
 80064f2:	18ed      	adds	r5, r5, r3
 80064f4:	006d      	lsls	r5, r5, #1
 80064f6:	0023      	movs	r3, r4
 80064f8:	3b0a      	subs	r3, #10
 80064fa:	18ed      	adds	r5, r5, r3
		if (!strcmp(group, moduleAlias[j]))	
 80064fc:	0021      	movs	r1, r4
 80064fe:	0030      	movs	r0, r6
 8006500:	f7f9 fe00 	bl	8000104 <strcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	d046      	beq.n	8006596 <AddModuleToGroup+0xea>
 8006508:	340a      	adds	r4, #10
	for(j=1 ; j<N ; j++)
 800650a:	42ac      	cmp	r4, r5
 800650c:	d1f6      	bne.n	80064fc <AddModuleToGroup+0x50>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800650e:	4c28      	ldr	r4, [pc, #160]	; (80065b0 <AddModuleToGroup+0x104>)
 8006510:	4b28      	ldr	r3, [pc, #160]	; (80065b4 <AddModuleToGroup+0x108>)
 8006512:	601c      	str	r4, [r3, #0]
 8006514:	4698      	mov	r8, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800651a:	0028      	movs	r0, r5
 800651c:	f7f9 fdfc 	bl	8000118 <strlen>
 8006520:	0002      	movs	r2, r0
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8006522:	0029      	movs	r1, r5
 8006524:	0030      	movs	r0, r6
 8006526:	f00c fea9 	bl	801327c <strncmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	d035      	beq.n	800659a <AddModuleToGroup+0xee>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800652e:	6864      	ldr	r4, [r4, #4]
 8006530:	4643      	mov	r3, r8
 8006532:	601c      	str	r4, [r3, #0]
 8006534:	2c00      	cmp	r4, #0
 8006536:	d1ee      	bne.n	8006516 <AddModuleToGroup+0x6a>
		if (!groupAlias[i][0]) {	
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <AddModuleToGroup+0xf4>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <AddModuleToGroup+0xd2>
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <AddModuleToGroup+0xf4>)
 8006542:	330a      	adds	r3, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006544:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {	
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	2a00      	cmp	r2, #0
 800654a:	d019      	beq.n	8006580 <AddModuleToGroup+0xd4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800654c:	3401      	adds	r4, #1
 800654e:	330a      	adds	r3, #10
 8006550:	2c0a      	cmp	r4, #10
 8006552:	d1f8      	bne.n	8006546 <AddModuleToGroup+0x9a>
	groupModules[module-1] |= (0x0001<<i);
 8006554:	3f01      	subs	r7, #1
 8006556:	4918      	ldr	r1, [pc, #96]	; (80065b8 <AddModuleToGroup+0x10c>)
 8006558:	007f      	lsls	r7, r7, #1
 800655a:	2201      	movs	r2, #1
 800655c:	40a2      	lsls	r2, r4
 800655e:	5a7b      	ldrh	r3, [r7, r1]
 8006560:	4313      	orrs	r3, r2
 8006562:	527b      	strh	r3, [r7, r1]
	return result;
 8006564:	2000      	movs	r0, #0
 8006566:	e007      	b.n	8006578 <AddModuleToGroup+0xcc>
			groupModules[module-1] |= (0x0001<<i);	
 8006568:	3f01      	subs	r7, #1
 800656a:	4913      	ldr	r1, [pc, #76]	; (80065b8 <AddModuleToGroup+0x10c>)
 800656c:	007f      	lsls	r7, r7, #1
 800656e:	2201      	movs	r2, #1
 8006570:	40a2      	lsls	r2, r4
 8006572:	5a7b      	ldrh	r3, [r7, r1]
 8006574:	4313      	orrs	r3, r2
 8006576:	527b      	strh	r3, [r7, r1]
}
 8006578:	bc04      	pop	{r2}
 800657a:	4690      	mov	r8, r2
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800657e:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);	
 8006580:	00a0      	lsls	r0, r4, #2
 8006582:	1900      	adds	r0, r0, r4
 8006584:	0040      	lsls	r0, r0, #1
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <AddModuleToGroup+0xf4>)
 8006588:	1818      	adds	r0, r3, r0
 800658a:	0031      	movs	r1, r6
 800658c:	f00c fe6e 	bl	801326c <strcpy>
			break;
 8006590:	e7e0      	b.n	8006554 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8006592:	2006      	movs	r0, #6
 8006594:	e7f0      	b.n	8006578 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 8006596:	2007      	movs	r0, #7
 8006598:	e7ee      	b.n	8006578 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800659a:	2008      	movs	r0, #8
 800659c:	e7ec      	b.n	8006578 <AddModuleToGroup+0xcc>
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	20000ea4 	.word	0x20000ea4
 80065a4:	08017990 	.word	0x08017990
 80065a8:	2000001c 	.word	0x2000001c
 80065ac:	200010ce 	.word	0x200010ce
 80065b0:	20000054 	.word	0x20000054
 80065b4:	20001298 	.word	0x20001298
 80065b8:	20000f08 	.word	0x20000f08

080065bc <groupCommand>:
{
 80065bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065be:	46ce      	mov	lr, r9
 80065c0:	b500      	push	{lr}
 80065c2:	b090      	sub	sp, #64	; 0x40
 80065c4:	0004      	movs	r4, r0
 80065c6:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80065c8:	2227      	movs	r2, #39	; 0x27
 80065ca:	2100      	movs	r1, #0
 80065cc:	a806      	add	r0, sp, #24
 80065ce:	f00c fc17 	bl	8012e00 <memset>
 80065d2:	220a      	movs	r2, #10
 80065d4:	2100      	movs	r1, #0
 80065d6:	a803      	add	r0, sp, #12
 80065d8:	f00c fc12 	bl	8012e00 <memset>
	configASSERT( pcWriteBuffer );
 80065dc:	2c00      	cmp	r4, #0
 80065de:	d101      	bne.n	80065e4 <groupCommand+0x28>
 80065e0:	b672      	cpsid	i
 80065e2:	e7fe      	b.n	80065e2 <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065e4:	4d54      	ldr	r5, [pc, #336]	; (8006738 <groupCommand+0x17c>)
 80065e6:	002a      	movs	r2, r5
 80065e8:	2101      	movs	r1, #1
 80065ea:	9801      	ldr	r0, [sp, #4]
 80065ec:	f007 f8bc 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80065f0:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 80065f2:	682a      	ldr	r2, [r5, #0]
 80065f4:	a803      	add	r0, sp, #12
 80065f6:	f00c fe52 	bl	801329e <strncpy>
 80065fa:	4d50      	ldr	r5, [pc, #320]	; (800673c <groupCommand+0x180>)
 80065fc:	002f      	movs	r7, r5
 80065fe:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8006600:	0029      	movs	r1, r5
 8006602:	a803      	add	r0, sp, #12
 8006604:	f7f9 fd7e 	bl	8000104 <strcmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	d016      	beq.n	800663a <groupCommand+0x7e>
 800660c:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 800660e:	42bd      	cmp	r5, r7
 8006610:	d1f6      	bne.n	8006600 <groupCommand+0x44>
	type = 1;
 8006612:	2701      	movs	r7, #1
	count = 2;
 8006614:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <groupCommand+0x184>)
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 800661a:	3208      	adds	r2, #8
 800661c:	4949      	ldr	r1, [pc, #292]	; (8006744 <groupCommand+0x188>)
 800661e:	0020      	movs	r0, r4
 8006620:	f00c fbe5 	bl	8012dee <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 8006624:	4a48      	ldr	r2, [pc, #288]	; (8006748 <groupCommand+0x18c>)
 8006626:	2102      	movs	r1, #2
 8006628:	9801      	ldr	r0, [sp, #4]
 800662a:	f007 f89d 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800662e:	4b47      	ldr	r3, [pc, #284]	; (800674c <groupCommand+0x190>)
 8006630:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006632:	2800      	cmp	r0, #0
 8006634:	d061      	beq.n	80066fa <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006636:	4e44      	ldr	r6, [pc, #272]	; (8006748 <groupCommand+0x18c>)
 8006638:	e011      	b.n	800665e <groupCommand+0xa2>
			type = 0; break;
 800663a:	2700      	movs	r7, #0
 800663c:	e7ea      	b.n	8006614 <groupCommand+0x58>
		strcat( ( char * ) pcWriteBuffer, module);
 800663e:	a906      	add	r1, sp, #24
 8006640:	0020      	movs	r0, r4
 8006642:	f00c fdf7 	bl	8013234 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8006646:	1c69      	adds	r1, r5, #1
 8006648:	b249      	sxtb	r1, r1
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <groupCommand+0x184>)
 800664c:	7019      	strb	r1, [r3, #0]
 800664e:	4a3e      	ldr	r2, [pc, #248]	; (8006748 <groupCommand+0x18c>)
 8006650:	9801      	ldr	r0, [sp, #4]
 8006652:	f007 f889 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8006656:	4b3d      	ldr	r3, [pc, #244]	; (800674c <groupCommand+0x190>)
 8006658:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800665a:	2800      	cmp	r0, #0
 800665c:	d04d      	beq.n	80066fa <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 800665e:	6833      	ldr	r3, [r6, #0]
 8006660:	4699      	mov	r9, r3
 8006662:	ad06      	add	r5, sp, #24
 8006664:	001a      	movs	r2, r3
 8006666:	0001      	movs	r1, r0
 8006668:	0028      	movs	r0, r5
 800666a:	f00c fe18 	bl	801329e <strncpy>
 800666e:	2300      	movs	r3, #0
 8006670:	464a      	mov	r2, r9
 8006672:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006674:	0028      	movs	r0, r5
 8006676:	f7ff fdff 	bl	8006278 <GetID>
		if (modID < 0)	break;
 800667a:	2800      	cmp	r0, #0
 800667c:	db37      	blt.n	80066ee <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 800667e:	b2c0      	uxtb	r0, r0
 8006680:	a903      	add	r1, sp, #12
 8006682:	f7ff ff13 	bl	80064ac <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8006686:	2800      	cmp	r0, #0
 8006688:	d146      	bne.n	8006718 <groupCommand+0x15c>
		if (count > 2)
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <groupCommand+0x184>)
 800668c:	2500      	movs	r5, #0
 800668e:	575d      	ldrsb	r5, [r3, r5]
 8006690:	2d02      	cmp	r5, #2
 8006692:	ddd4      	ble.n	800663e <groupCommand+0x82>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8006694:	0020      	movs	r0, r4
 8006696:	f7f9 fd3f 	bl	8000118 <strlen>
 800669a:	1820      	adds	r0, r4, r0
 800669c:	2203      	movs	r2, #3
 800669e:	492c      	ldr	r1, [pc, #176]	; (8006750 <groupCommand+0x194>)
 80066a0:	f00c fba5 	bl	8012dee <memcpy>
 80066a4:	e7cb      	b.n	800663e <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	d009      	beq.n	80066be <groupCommand+0x102>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 80066aa:	aa03      	add	r2, sp, #12
 80066ac:	4929      	ldr	r1, [pc, #164]	; (8006754 <groupCommand+0x198>)
 80066ae:	a806      	add	r0, sp, #24
 80066b0:	f00c fda0 	bl	80131f4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 80066b4:	a906      	add	r1, sp, #24
 80066b6:	0020      	movs	r0, r4
 80066b8:	f00c fdbc 	bl	8013234 <strcat>
 80066bc:	e027      	b.n	800670e <groupCommand+0x152>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 80066be:	aa03      	add	r2, sp, #12
 80066c0:	4925      	ldr	r1, [pc, #148]	; (8006758 <groupCommand+0x19c>)
 80066c2:	a806      	add	r0, sp, #24
 80066c4:	f00c fd96 	bl	80131f4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 80066c8:	a906      	add	r1, sp, #24
 80066ca:	0020      	movs	r0, r4
 80066cc:	f00c fdb2 	bl	8013234 <strcat>
 80066d0:	e01d      	b.n	800670e <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 80066d2:	aa03      	add	r2, sp, #12
 80066d4:	4921      	ldr	r1, [pc, #132]	; (800675c <groupCommand+0x1a0>)
 80066d6:	0020      	movs	r0, r4
 80066d8:	f00c fd8c 	bl	80131f4 <sprintf>
 80066dc:	e017      	b.n	800670e <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 80066de:	2808      	cmp	r0, #8
 80066e0:	d115      	bne.n	800670e <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80066e2:	aa03      	add	r2, sp, #12
 80066e4:	491e      	ldr	r1, [pc, #120]	; (8006760 <groupCommand+0x1a4>)
 80066e6:	0020      	movs	r0, r4
 80066e8:	f00c fd84 	bl	80131f4 <sprintf>
 80066ec:	e00f      	b.n	800670e <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80066ee:	aa06      	add	r2, sp, #24
 80066f0:	491c      	ldr	r1, [pc, #112]	; (8006764 <groupCommand+0x1a8>)
 80066f2:	0020      	movs	r0, r4
 80066f4:	f00c fd7e 	bl	80131f4 <sprintf>
	return pdFALSE;
 80066f8:	e009      	b.n	800670e <groupCommand+0x152>
	else if (count == 2)
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <groupCommand+0x184>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b25b      	sxtb	r3, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d1d0      	bne.n	80066a6 <groupCommand+0xea>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8006704:	aa03      	add	r2, sp, #12
 8006706:	4918      	ldr	r1, [pc, #96]	; (8006768 <groupCommand+0x1ac>)
 8006708:	0020      	movs	r0, r4
 800670a:	f00c fd73 	bl	80131f4 <sprintf>
}
 800670e:	2000      	movs	r0, #0
 8006710:	b010      	add	sp, #64	; 0x40
 8006712:	bc04      	pop	{r2}
 8006714:	4691      	mov	r9, r2
 8006716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <groupCommand+0x184>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d0f0      	beq.n	8006704 <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 8006722:	2806      	cmp	r0, #6
 8006724:	d0d5      	beq.n	80066d2 <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 8006726:	2807      	cmp	r0, #7
 8006728:	d1d9      	bne.n	80066de <groupCommand+0x122>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 800672a:	aa03      	add	r2, sp, #12
 800672c:	490f      	ldr	r1, [pc, #60]	; (800676c <groupCommand+0x1b0>)
 800672e:	0020      	movs	r0, r4
 8006730:	f00c fd60 	bl	80131f4 <sprintf>
 8006734:	e7eb      	b.n	800670e <groupCommand+0x152>
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	20001328 	.word	0x20001328
 800673c:	20000ea4 	.word	0x20000ea4
 8006740:	20000e96 	.word	0x20000e96
 8006744:	080180b0 	.word	0x080180b0
 8006748:	2000131c 	.word	0x2000131c
 800674c:	200011f4 	.word	0x200011f4
 8006750:	080180bc 	.word	0x080180bc
 8006754:	080180ec 	.word	0x080180ec
 8006758:	08018108 	.word	0x08018108
 800675c:	08018340 	.word	0x08018340
 8006760:	080183b4 	.word	0x080183b4
 8006764:	08018128 	.word	0x08018128
 8006768:	080180c0 	.word	0x080180c0
 800676c:	08018380 	.word	0x08018380

08006770 <ReadPortsDir>:
{
 8006770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006772:	46de      	mov	lr, fp
 8006774:	464f      	mov	r7, r9
 8006776:	4646      	mov	r6, r8
 8006778:	b5c0      	push	{r6, r7, lr}
 800677a:	b082      	sub	sp, #8
	for (uint8_t i=1 ; i<=N ; i++) 
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <ReadPortsDir+0xa4>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03d      	beq.n	8006800 <ReadPortsDir+0x90>
 8006784:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 8006786:	2300      	movs	r3, #0
 8006788:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800678a:	4b23      	ldr	r3, [pc, #140]	; (8006818 <ReadPortsDir+0xa8>)
 800678c:	469b      	mov	fp, r3
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800678e:	4b23      	ldr	r3, [pc, #140]	; (800681c <ReadPortsDir+0xac>)
 8006790:	4698      	mov	r8, r3
 8006792:	e022      	b.n	80067da <ReadPortsDir+0x6a>
 8006794:	2600      	movs	r6, #0
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8006796:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8006798:	2780      	movs	r7, #128	; 0x80
 800679a:	023f      	lsls	r7, r7, #8
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800679c:	1e6b      	subs	r3, r5, #1
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4699      	mov	r9, r3
 80067a2:	e004      	b.n	80067ae <ReadPortsDir+0x3e>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 80067a4:	3401      	adds	r4, #1
 80067a6:	b2e4      	uxtb	r4, r4
 80067a8:	3601      	adds	r6, #1
 80067aa:	2c06      	cmp	r4, #6
 80067ac:	d00f      	beq.n	80067ce <ReadPortsDir+0x5e>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80067ae:	0020      	movs	r0, r4
 80067b0:	f7fe f842 	bl	8004838 <GetUart>
 80067b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	d1f4      	bne.n	80067a4 <ReadPortsDir+0x34>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 80067ba:	4643      	mov	r3, r8
 80067bc:	464a      	mov	r2, r9
 80067be:	5ad3      	ldrh	r3, [r2, r3]
 80067c0:	003a      	movs	r2, r7
 80067c2:	4132      	asrs	r2, r6
 80067c4:	4313      	orrs	r3, r2
 80067c6:	4642      	mov	r2, r8
 80067c8:	4649      	mov	r1, r9
 80067ca:	528b      	strh	r3, [r1, r2]
 80067cc:	e7ea      	b.n	80067a4 <ReadPortsDir+0x34>
	for (uint8_t i=1 ; i<=N ; i++) 
 80067ce:	3501      	adds	r5, #1
 80067d0:	b2ed      	uxtb	r5, r5
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <ReadPortsDir+0xa4>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	42ab      	cmp	r3, r5
 80067d8:	d314      	bcc.n	8006804 <ReadPortsDir+0x94>
		if (i != myID) {
 80067da:	465b      	mov	r3, fp
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	42ab      	cmp	r3, r5
 80067e0:	d0d8      	beq.n	8006794 <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2113      	movs	r1, #19
 80067e6:	0028      	movs	r0, r5
 80067e8:	f7ff fa14 	bl	8005c14 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80067ec:	2032      	movs	r0, #50	; 0x32
 80067ee:	f7ff f80f 	bl	8005810 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 80067f2:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <ReadPortsDir+0xb0>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0e9      	beq.n	80067ce <ReadPortsDir+0x5e>
				result = BOS_ERR_NoResponse;
 80067fa:	2302      	movs	r3, #2
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	e7e6      	b.n	80067ce <ReadPortsDir+0x5e>
	BOS_Status result = BOS_OK; 
 8006800:	2300      	movs	r3, #0
 8006802:	9301      	str	r3, [sp, #4]
}
 8006804:	9801      	ldr	r0, [sp, #4]
 8006806:	b002      	add	sp, #8
 8006808:	bc1c      	pop	{r2, r3, r4}
 800680a:	4690      	mov	r8, r2
 800680c:	4699      	mov	r9, r3
 800680e:	46a3      	mov	fp, r4
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	2000001c 	.word	0x2000001c
 8006818:	200011c8 	.word	0x200011c8
 800681c:	20000c58 	.word	0x20000c58
 8006820:	200012c0 	.word	0x200012c0

08006824 <infoCommand>:
{
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	b083      	sub	sp, #12
 8006828:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800682a:	d039      	beq.n	80068a0 <infoCommand+0x7c>
	if (N > 1)
 800682c:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <infoCommand+0xa4>)
 800682e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8006830:	2500      	movs	r5, #0
	if (N > 1)
 8006832:	2b01      	cmp	r3, #1
 8006834:	d902      	bls.n	800683c <infoCommand+0x18>
		result = ReadPortsDir();
 8006836:	f7ff ff9b 	bl	8006770 <ReadPortsDir>
 800683a:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800683c:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <infoCommand+0xa4>)
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	4922      	ldr	r1, [pc, #136]	; (80068cc <infoCommand+0xa8>)
 8006842:	0020      	movs	r0, r4
 8006844:	f00c fcd6 	bl	80131f4 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006848:	0020      	movs	r0, r4
 800684a:	f7f9 fc65 	bl	8000118 <strlen>
 800684e:	b282      	uxth	r2, r0
 8006850:	4e1f      	ldr	r6, [pc, #124]	; (80068d0 <infoCommand+0xac>)
 8006852:	7830      	ldrb	r0, [r6, #0]
 8006854:	2701      	movs	r7, #1
 8006856:	427f      	negs	r7, r7
 8006858:	9700      	str	r7, [sp, #0]
 800685a:	2332      	movs	r3, #50	; 0x32
 800685c:	0021      	movs	r1, r4
 800685e:	f006 fd75 	bl	800d34c <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006862:	2213      	movs	r2, #19
 8006864:	491b      	ldr	r1, [pc, #108]	; (80068d4 <infoCommand+0xb0>)
 8006866:	0020      	movs	r0, r4
 8006868:	f00c fac1 	bl	8012dee <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800686c:	0020      	movs	r0, r4
 800686e:	f7f9 fc53 	bl	8000118 <strlen>
 8006872:	b282      	uxth	r2, r0
 8006874:	7830      	ldrb	r0, [r6, #0]
 8006876:	9700      	str	r7, [sp, #0]
 8006878:	2332      	movs	r3, #50	; 0x32
 800687a:	0021      	movs	r1, r4
 800687c:	f006 fd66 	bl	800d34c <writePxMutex>
	DisplayTopology(PcPort);
 8006880:	7830      	ldrb	r0, [r6, #0]
 8006882:	f7ff fa4b 	bl	8005d1c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006886:	7830      	ldrb	r0, [r6, #0]
 8006888:	f7ff fb18 	bl	8005ebc <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 800688c:	2d02      	cmp	r5, #2
 800688e:	d009      	beq.n	80068a4 <infoCommand+0x80>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006890:	2202      	movs	r2, #2
 8006892:	4911      	ldr	r1, [pc, #68]	; (80068d8 <infoCommand+0xb4>)
 8006894:	0020      	movs	r0, r4
 8006896:	f00c faaa 	bl	8012dee <memcpy>
}
 800689a:	2000      	movs	r0, #0
 800689c:	b003      	add	sp, #12
 800689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80068a0:	b672      	cpsid	i
 80068a2:	e7fe      	b.n	80068a2 <infoCommand+0x7e>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 80068a4:	2244      	movs	r2, #68	; 0x44
 80068a6:	490d      	ldr	r1, [pc, #52]	; (80068dc <infoCommand+0xb8>)
 80068a8:	0020      	movs	r0, r4
 80068aa:	f00c faa0 	bl	8012dee <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 80068ae:	0020      	movs	r0, r4
 80068b0:	f7f9 fc32 	bl	8000118 <strlen>
 80068b4:	b282      	uxth	r2, r0
 80068b6:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <infoCommand+0xac>)
 80068b8:	7818      	ldrb	r0, [r3, #0]
 80068ba:	003b      	movs	r3, r7
 80068bc:	9700      	str	r7, [sp, #0]
 80068be:	3333      	adds	r3, #51	; 0x33
 80068c0:	0021      	movs	r1, r4
 80068c2:	f006 fd43 	bl	800d34c <writePxMutex>
 80068c6:	e7e3      	b.n	8006890 <infoCommand+0x6c>
 80068c8:	2000001c 	.word	0x2000001c
 80068cc:	080181dc 	.word	0x080181dc
 80068d0:	20000a2f 	.word	0x20000a2f
 80068d4:	080181f8 	.word	0x080181f8
 80068d8:	08017a44 	.word	0x08017a44
 80068dc:	0801820c 	.word	0x0801820c

080068e0 <UpdateMyPortsDir>:
{
 80068e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e2:	46c6      	mov	lr, r8
 80068e4:	b500      	push	{lr}
 80068e6:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80068e8:	2401      	movs	r4, #1
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <UpdateMyPortsDir+0x54>)
 80068ec:	4698      	mov	r8, r3
 80068ee:	4f12      	ldr	r7, [pc, #72]	; (8006938 <UpdateMyPortsDir+0x58>)
 80068f0:	2680      	movs	r6, #128	; 0x80
 80068f2:	0236      	lsls	r6, r6, #8
 80068f4:	e00a      	b.n	800690c <UpdateMyPortsDir+0x2c>
			SwapUartPins(GetUart(p), REVERSED);					
 80068f6:	0020      	movs	r0, r4
 80068f8:	f7fd ff9e 	bl	8004838 <GetUart>
 80068fc:	2101      	movs	r1, #1
 80068fe:	f7ff f861 	bl	80059c4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8006902:	3401      	adds	r4, #1
 8006904:	b2e4      	uxtb	r4, r4
 8006906:	3501      	adds	r5, #1
 8006908:	2c06      	cmp	r4, #6
 800690a:	d00f      	beq.n	800692c <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800690c:	783b      	ldrb	r3, [r7, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4642      	mov	r2, r8
 8006914:	5a9b      	ldrh	r3, [r3, r2]
 8006916:	0032      	movs	r2, r6
 8006918:	412a      	asrs	r2, r5
 800691a:	421a      	tst	r2, r3
 800691c:	d1eb      	bne.n	80068f6 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800691e:	0020      	movs	r0, r4
 8006920:	f7fd ff8a 	bl	8004838 <GetUart>
 8006924:	2100      	movs	r1, #0
 8006926:	f7ff f84d 	bl	80059c4 <SwapUartPins>
 800692a:	e7ea      	b.n	8006902 <UpdateMyPortsDir+0x22>
}
 800692c:	2000      	movs	r0, #0
 800692e:	bc04      	pop	{r2}
 8006930:	4690      	mov	r8, r2
 8006932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006934:	20000c58 	.word	0x20000c58
 8006938:	200011c8 	.word	0x200011c8

0800693c <StartScastDMAStream>:
{
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	46de      	mov	lr, fp
 8006940:	4657      	mov	r7, sl
 8006942:	464e      	mov	r6, r9
 8006944:	4645      	mov	r5, r8
 8006946:	b5e0      	push	{r5, r6, r7, lr}
 8006948:	b091      	sub	sp, #68	; 0x44
 800694a:	900f      	str	r0, [sp, #60]	; 0x3c
 800694c:	000c      	movs	r4, r1
 800694e:	9106      	str	r1, [sp, #24]
 8006950:	0015      	movs	r5, r2
 8006952:	920e      	str	r2, [sp, #56]	; 0x38
 8006954:	001e      	movs	r6, r3
 8006956:	ab1a      	add	r3, sp, #104	; 0x68
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	4698      	mov	r8, r3
 800695c:	ab1d      	add	r3, sp, #116	; 0x74
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	469a      	mov	sl, r3
	if (srcM != myID) {
 8006962:	4b5a      	ldr	r3, [pc, #360]	; (8006acc <StartScastDMAStream+0x190>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	428b      	cmp	r3, r1
 8006968:	d11e      	bne.n	80069a8 <StartScastDMAStream+0x6c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800696a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800696c:	0e1b      	lsrs	r3, r3, #24
 800696e:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8006970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	b2db      	uxtb	r3, r3
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8006978:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800697a:	0a1b      	lsrs	r3, r3, #8
 800697c:	b2db      	uxtb	r3, r3
 800697e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8006980:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006982:	0e1b      	lsrs	r3, r3, #24
 8006984:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8006986:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	b2db      	uxtb	r3, r3
 800698c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800698e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006990:	0a1b      	lsrs	r3, r3, #8
 8006992:	b2db      	uxtb	r3, r3
 8006994:	469b      	mov	fp, r3
 8006996:	4b4e      	ldr	r3, [pc, #312]	; (8006ad0 <StartScastDMAStream+0x194>)
 8006998:	1e5d      	subs	r5, r3, #1
 800699a:	2218      	movs	r2, #24
 800699c:	4691      	mov	r9, r2
 800699e:	4499      	add	r9, r3
				temp2 = dstP;
 80069a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a2:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80069a4:	4c4b      	ldr	r4, [pc, #300]	; (8006ad4 <StartScastDMAStream+0x198>)
 80069a6:	e05c      	b.n	8006a62 <StartScastDMAStream+0x126>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80069a8:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <StartScastDMAStream+0x198>)
 80069aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069ac:	0e12      	lsrs	r2, r2, #24
 80069ae:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 80069b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069b2:	0c12      	lsrs	r2, r2, #16
 80069b4:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 80069b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069b8:	0a12      	lsrs	r2, r2, #8
 80069ba:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 80069bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069be:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80069c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069c2:	0e12      	lsrs	r2, r2, #24
 80069c4:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 80069c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069c8:	0c12      	lsrs	r2, r2, #16
 80069ca:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 80069cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069ce:	0a12      	lsrs	r2, r2, #8
 80069d0:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 80069d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069d4:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 80069d6:	4642      	mov	r2, r8
 80069d8:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 80069da:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 80069dc:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 80069de:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 80069e0:	4652      	mov	r2, sl
 80069e2:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80069e4:	220d      	movs	r2, #13
 80069e6:	211c      	movs	r1, #28
 80069e8:	0020      	movs	r0, r4
 80069ea:	f7ff f913 	bl	8005c14 <SendMessageToModule>
}
 80069ee:	2000      	movs	r0, #0
 80069f0:	b011      	add	sp, #68	; 0x44
 80069f2:	bc3c      	pop	{r2, r3, r4, r5}
 80069f4:	4690      	mov	r8, r2
 80069f6:	4699      	mov	r9, r3
 80069f8:	46a2      	mov	sl, r4
 80069fa:	46ab      	mov	fp, r5
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80069fe:	9906      	ldr	r1, [sp, #24]
 8006a00:	f7ff f818 	bl	8005a34 <FindRoute>
 8006a04:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 8006a06:	0031      	movs	r1, r6
 8006a08:	9806      	ldr	r0, [sp, #24]
 8006a0a:	f7ff f813 	bl	8005a34 <FindRoute>
			if (route[i] == dstM) {
 8006a0e:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 8006a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8006a12:	42b0      	cmp	r0, r6
 8006a14:	d134      	bne.n	8006a80 <StartScastDMAStream+0x144>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006a16:	9a08      	ldr	r2, [sp, #32]
 8006a18:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8006a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1c:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8006a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a20:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8006a22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a24:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8006a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a28:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8006a2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a2c:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8006a2e:	465a      	mov	r2, fp
 8006a30:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8006a32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a34:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8006a36:	4642      	mov	r2, r8
 8006a38:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8006a3a:	9a07      	ldr	r2, [sp, #28]
 8006a3c:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8006a3e:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8006a40:	4653      	mov	r3, sl
 8006a42:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8006a44:	0031      	movs	r1, r6
 8006a46:	9806      	ldr	r0, [sp, #24]
 8006a48:	f7fe fff4 	bl	8005a34 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8006a4c:	7878      	ldrb	r0, [r7, #1]
 8006a4e:	220c      	movs	r2, #12
 8006a50:	211b      	movs	r1, #27
 8006a52:	f7ff f8df 	bl	8005c14 <SendMessageToModule>
			osDelay(10);
 8006a56:	200a      	movs	r0, #10
 8006a58:	f006 fd6d 	bl	800d536 <osDelay>
 8006a5c:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8006a5e:	454d      	cmp	r5, r9
 8006a60:	d013      	beq.n	8006a8a <StartScastDMAStream+0x14e>
		FindRoute(srcM, dstM);
 8006a62:	0031      	movs	r1, r6
 8006a64:	9806      	ldr	r0, [sp, #24]
 8006a66:	f7fe ffe5 	bl	8005a34 <FindRoute>
 8006a6a:	002f      	movs	r7, r5
		if (route[i]) 
 8006a6c:	7868      	ldrb	r0, [r5, #1]
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d0f4      	beq.n	8006a5c <StartScastDMAStream+0x120>
			if (route[i+1]) {
 8006a72:	78a9      	ldrb	r1, [r5, #2]
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d0c2      	beq.n	80069fe <StartScastDMAStream+0xc2>
				temp1 = FindRoute(route[i], route[i+1]);
 8006a78:	f7fe ffdc 	bl	8005a34 <FindRoute>
 8006a7c:	9007      	str	r0, [sp, #28]
 8006a7e:	e7c2      	b.n	8006a06 <StartScastDMAStream+0xca>
				temp2 = FindRoute(route[i], route[i-1]);
 8006a80:	7839      	ldrb	r1, [r7, #0]
 8006a82:	f7fe ffd7 	bl	8005a34 <FindRoute>
 8006a86:	0003      	movs	r3, r0
 8006a88:	e7c5      	b.n	8006a16 <StartScastDMAStream+0xda>
	if (srcM == dstM)
 8006a8a:	9806      	ldr	r0, [sp, #24]
 8006a8c:	42b0      	cmp	r0, r6
 8006a8e:	d118      	bne.n	8006ac2 <StartScastDMAStream+0x186>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8006a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a98:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7fd feea 	bl	8004874 <SetupDMAStreams>
	if (stored) {		
 8006aa0:	4653      	mov	r3, sl
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0a3      	beq.n	80069ee <StartScastDMAStream+0xb2>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9304      	str	r3, [sp, #16]
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ab8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006aba:	4640      	mov	r0, r8
 8006abc:	f7fd faf8 	bl	80040b0 <SaveEEstreams>
 8006ac0:	e795      	b.n	80069ee <StartScastDMAStream+0xb2>
		port = FindRoute(srcM, dstM);
 8006ac2:	0031      	movs	r1, r6
 8006ac4:	f7fe ffb6 	bl	8005a34 <FindRoute>
 8006ac8:	900e      	str	r0, [sp, #56]	; 0x38
 8006aca:	e7e1      	b.n	8006a90 <StartScastDMAStream+0x154>
 8006acc:	200011c8 	.word	0x200011c8
 8006ad0:	200012c4 	.word	0x200012c4
 8006ad4:	20001094 	.word	0x20001094

08006ad8 <remoteBootloaderUpdate>:
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b087      	sub	sp, #28
 8006adc:	0007      	movs	r7, r0
 8006ade:	000e      	movs	r6, r1
 8006ae0:	9205      	str	r2, [sp, #20]
 8006ae2:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 8006ae4:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006ae6:	7818      	ldrb	r0, [r3, #0]
 8006ae8:	f7fe ffa4 	bl	8005a34 <FindRoute>
 8006aec:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	d020      	beq.n	8006b34 <remoteBootloaderUpdate+0x5c>
 8006af2:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006af4:	781c      	ldrb	r4, [r3, #0]
 8006af6:	42b4      	cmp	r4, r6
 8006af8:	d060      	beq.n	8006bbc <remoteBootloaderUpdate+0xe4>
	if (src == myID)
 8006afa:	42bc      	cmp	r4, r7
 8006afc:	d033      	beq.n	8006b66 <remoteBootloaderUpdate+0x8e>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8006afe:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8006b00:	9805      	ldr	r0, [sp, #20]
 8006b02:	f7fe f891 	bl	8004c28 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8006b06:	9804      	ldr	r0, [sp, #16]
 8006b08:	f7fe f88e 	bl	8004c28 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d047      	beq.n	8006ba4 <remoteBootloaderUpdate+0xcc>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006b16:	7819      	ldrb	r1, [r3, #0]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	9302      	str	r3, [sp, #8]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	3303      	adds	r3, #3
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	000b      	movs	r3, r1
 8006b28:	9a04      	ldr	r2, [sp, #16]
 8006b2a:	9805      	ldr	r0, [sp, #20]
 8006b2c:	f7ff ff06 	bl	800693c <StartScastDMAStream>
}
 8006b30:	b007      	add	sp, #28
 8006b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <remoteBootloaderUpdate+0xf0>)
 8006b36:	199b      	adds	r3, r3, r6
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	2a01      	cmp	r2, #1
 8006b3e:	d00f      	beq.n	8006b60 <remoteBootloaderUpdate+0x88>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8006b40:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <remoteBootloaderUpdate+0xf4>)
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	3b01      	subs	r3, #1
 8006b46:	781c      	ldrb	r4, [r3, #0]
	if (src == myID)
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	42bb      	cmp	r3, r7
 8006b4e:	d1d7      	bne.n	8006b00 <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006b50:	f006 fe06 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8006b54:	0007      	movs	r7, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8006b56:	0032      	movs	r2, r6
 8006b58:	491d      	ldr	r1, [pc, #116]	; (8006bd0 <remoteBootloaderUpdate+0xf8>)
 8006b5a:	f00c fb4b 	bl	80131f4 <sprintf>
 8006b5e:	e00c      	b.n	8006b7a <remoteBootloaderUpdate+0xa2>
			lastModule = myID;
 8006b60:	4b18      	ldr	r3, [pc, #96]	; (8006bc4 <remoteBootloaderUpdate+0xec>)
 8006b62:	781c      	ldrb	r4, [r3, #0]
 8006b64:	e7f0      	b.n	8006b48 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006b66:	f006 fdfb 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8006b6a:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8006b6c:	2400      	movs	r4, #0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8006b6e:	002b      	movs	r3, r5
 8006b70:	0032      	movs	r2, r6
 8006b72:	4918      	ldr	r1, [pc, #96]	; (8006bd4 <remoteBootloaderUpdate+0xfc>)
 8006b74:	0038      	movs	r0, r7
 8006b76:	f00c fb3d 	bl	80131f4 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8006b7a:	0038      	movs	r0, r7
 8006b7c:	f7f9 facc 	bl	8000118 <strlen>
 8006b80:	1838      	adds	r0, r7, r0
 8006b82:	22fb      	movs	r2, #251	; 0xfb
 8006b84:	4914      	ldr	r1, [pc, #80]	; (8006bd8 <remoteBootloaderUpdate+0x100>)
 8006b86:	f00c f932 	bl	8012dee <memcpy>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8006b8a:	0038      	movs	r0, r7
 8006b8c:	f7f9 fac4 	bl	8000118 <strlen>
 8006b90:	b282      	uxth	r2, r0
 8006b92:	2332      	movs	r3, #50	; 0x32
 8006b94:	0039      	movs	r1, r7
 8006b96:	9805      	ldr	r0, [sp, #20]
 8006b98:	f006 fc02 	bl	800d3a0 <writePxITMutex>
		Delay_ms(100);
 8006b9c:	2064      	movs	r0, #100	; 0x64
 8006b9e:	f008 fd01 	bl	800f5a4 <HAL_Delay>
 8006ba2:	e7ad      	b.n	8006b00 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8006ba4:	9804      	ldr	r0, [sp, #16]
 8006ba6:	f7fd fe47 	bl	8004838 <GetUart>
 8006baa:	2101      	movs	r1, #1
 8006bac:	f7fe ff0a 	bl	80059c4 <SwapUartPins>
 8006bb0:	e7b0      	b.n	8006b14 <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006bb2:	f006 fdd5 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8006bb6:	0007      	movs	r7, r0
		myOutport = outport;
 8006bb8:	9504      	str	r5, [sp, #16]
 8006bba:	e7d8      	b.n	8006b6e <remoteBootloaderUpdate+0x96>
	if (src == myID)
 8006bbc:	42bc      	cmp	r4, r7
 8006bbe:	d0f8      	beq.n	8006bb2 <remoteBootloaderUpdate+0xda>
		myOutport = outport;
 8006bc0:	9504      	str	r5, [sp, #16]
 8006bc2:	e79d      	b.n	8006b00 <remoteBootloaderUpdate+0x28>
 8006bc4:	200011c8 	.word	0x200011c8
 8006bc8:	200012e0 	.word	0x200012e0
 8006bcc:	200012c4 	.word	0x200012c4
 8006bd0:	08018694 	.word	0x08018694
 8006bd4:	0801855c 	.word	0x0801855c
 8006bd8:	08018598 	.word	0x08018598

08006bdc <bootloaderUpdateCommand>:
{
 8006bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bde:	b085      	sub	sp, #20
 8006be0:	1e04      	subs	r4, r0, #0
 8006be2:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 8006be4:	d101      	bne.n	8006bea <bootloaderUpdateCommand+0xe>
 8006be6:	b672      	cpsid	i
 8006be8:	e7fe      	b.n	8006be8 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006bea:	4a47      	ldr	r2, [pc, #284]	; (8006d08 <bootloaderUpdateCommand+0x12c>)
 8006bec:	2101      	movs	r1, #1
 8006bee:	9803      	ldr	r0, [sp, #12]
 8006bf0:	f006 fdba 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d040      	beq.n	8006c7a <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8006bf8:	4b43      	ldr	r3, [pc, #268]	; (8006d08 <bootloaderUpdateCommand+0x12c>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4943      	ldr	r1, [pc, #268]	; (8006d0c <bootloaderUpdateCommand+0x130>)
 8006bfe:	f00c fb3d 	bl	801327c <strncmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d000      	beq.n	8006c08 <bootloaderUpdateCommand+0x2c>
 8006c06:	e078      	b.n	8006cfa <bootloaderUpdateCommand+0x11e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006c08:	4a41      	ldr	r2, [pc, #260]	; (8006d10 <bootloaderUpdateCommand+0x134>)
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	9803      	ldr	r0, [sp, #12]
 8006c0e:	f006 fdab 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8006c12:	4f40      	ldr	r7, [pc, #256]	; (8006d14 <bootloaderUpdateCommand+0x138>)
 8006c14:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006c16:	4a40      	ldr	r2, [pc, #256]	; (8006d18 <bootloaderUpdateCommand+0x13c>)
 8006c18:	2103      	movs	r1, #3
 8006c1a:	9803      	ldr	r0, [sp, #12]
 8006c1c:	f006 fda4 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8006c20:	4b3e      	ldr	r3, [pc, #248]	; (8006d1c <bootloaderUpdateCommand+0x140>)
 8006c22:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 8006c24:	6838      	ldr	r0, [r7, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8006c2a:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8006c2c:	2b23      	cmp	r3, #35	; 0x23
 8006c2e:	d046      	beq.n	8006cbe <bootloaderUpdateCommand+0xe2>
			if (pcParameterString3[0] == 'p') {
 8006c30:	4b3a      	ldr	r3, [pc, #232]	; (8006d1c <bootloaderUpdateCommand+0x140>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	56c3      	ldrsb	r3, [r0, r3]
 8006c38:	2b70      	cmp	r3, #112	; 0x70
 8006c3a:	d046      	beq.n	8006cca <bootloaderUpdateCommand+0xee>
				result = BOS_ERR_WrongValue;		
 8006c3c:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8006c3e:	4b38      	ldr	r3, [pc, #224]	; (8006d20 <bootloaderUpdateCommand+0x144>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	42b3      	cmp	r3, r6
 8006c44:	d046      	beq.n	8006cd4 <bootloaderUpdateCommand+0xf8>
				BOS.response = BOS_RESPONSE_NONE;							
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <bootloaderUpdateCommand+0x148>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <bootloaderUpdateCommand+0x14c>)
 8006c4e:	701d      	strb	r5, [r3, #0]
 8006c50:	3201      	adds	r2, #1
 8006c52:	211a      	movs	r1, #26
 8006c54:	0030      	movs	r0, r6
 8006c56:	f7fe ffdd 	bl	8005c14 <SendMessageToModule>
				osDelay(100);			
 8006c5a:	2064      	movs	r0, #100	; 0x64
 8006c5c:	f006 fc6b 	bl	800d536 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006c60:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <bootloaderUpdateCommand+0x150>)
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <bootloaderUpdateCommand+0x144>)
 8006c66:	7818      	ldrb	r0, [r3, #0]
 8006c68:	002b      	movs	r3, r5
 8006c6a:	0031      	movs	r1, r6
 8006c6c:	f7ff ff34 	bl	8006ad8 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006c70:	2f68      	cmp	r7, #104	; 0x68
 8006c72:	d042      	beq.n	8006cfa <bootloaderUpdateCommand+0x11e>
}
 8006c74:	2000      	movs	r0, #0
 8006c76:	b005      	add	sp, #20
 8006c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <bootloaderUpdateCommand+0x144>)
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	492c      	ldr	r1, [pc, #176]	; (8006d30 <bootloaderUpdateCommand+0x154>)
 8006c80:	0020      	movs	r0, r4
 8006c82:	f00c fab7 	bl	80131f4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006c86:	492b      	ldr	r1, [pc, #172]	; (8006d34 <bootloaderUpdateCommand+0x158>)
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f00c fad3 	bl	8013234 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006c8e:	0020      	movs	r0, r4
 8006c90:	f7f9 fa42 	bl	8000118 <strlen>
 8006c94:	b282      	uxth	r2, r0
 8006c96:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <bootloaderUpdateCommand+0x150>)
 8006c98:	7818      	ldrb	r0, [r3, #0]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	3333      	adds	r3, #51	; 0x33
 8006ca2:	0021      	movs	r1, r4
 8006ca4:	f006 fb52 	bl	800d34c <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006ca8:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <bootloaderUpdateCommand+0x15c>)
 8006caa:	4a24      	ldr	r2, [pc, #144]	; (8006d3c <bootloaderUpdateCommand+0x160>)
 8006cac:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <bootloaderUpdateCommand+0x164>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006cb4:	200a      	movs	r0, #10
 8006cb6:	f006 fc3e 	bl	800d536 <osDelay>
		NVIC_SystemReset();						
 8006cba:	f7fc f969 	bl	8002f90 <NVIC_SystemReset>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f00b fe0b 	bl	80128da <atol>
 8006cc4:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006cc6:	2700      	movs	r7, #0
 8006cc8:	e7b2      	b.n	8006c30 <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f00b fe05 	bl	80128da <atol>
 8006cd0:	b2c5      	uxtb	r5, r0
 8006cd2:	e7b4      	b.n	8006c3e <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	9100      	str	r1, [sp, #0]
 8006cd8:	2319      	movs	r3, #25
 8006cda:	000a      	movs	r2, r1
 8006cdc:	0028      	movs	r0, r5
 8006cde:	f7fe f93d 	bl	8004f5c <SendMessageFromPort>
				osDelay(100);
 8006ce2:	2064      	movs	r0, #100	; 0x64
 8006ce4:	f006 fc27 	bl	800d536 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <bootloaderUpdateCommand+0x144>)
 8006cea:	7818      	ldrb	r0, [r3, #0]
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <bootloaderUpdateCommand+0x150>)
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	002b      	movs	r3, r5
 8006cf2:	0001      	movs	r1, r0
 8006cf4:	f7ff fef0 	bl	8006ad8 <remoteBootloaderUpdate>
 8006cf8:	e7ba      	b.n	8006c70 <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006cfa:	220f      	movs	r2, #15
 8006cfc:	4911      	ldr	r1, [pc, #68]	; (8006d44 <bootloaderUpdateCommand+0x168>)
 8006cfe:	0020      	movs	r0, r4
 8006d00:	f00c f875 	bl	8012dee <memcpy>
 8006d04:	e7b6      	b.n	8006c74 <bootloaderUpdateCommand+0x98>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	20001320 	.word	0x20001320
 8006d0c:	08017dd0 	.word	0x08017dd0
 8006d10:	2000132c 	.word	0x2000132c
 8006d14:	20001208 	.word	0x20001208
 8006d18:	20001330 	.word	0x20001330
 8006d1c:	20001210 	.word	0x20001210
 8006d20:	200011c8 	.word	0x200011c8
 8006d24:	20006894 	.word	0x20006894
 8006d28:	20001094 	.word	0x20001094
 8006d2c:	20000a2f 	.word	0x20000a2f
 8006d30:	08017ccc 	.word	0x08017ccc
 8006d34:	08017cec 	.word	0x08017cec
 8006d38:	20007ff0 	.word	0x20007ff0
 8006d3c:	deadbeef 	.word	0xdeadbeef
 8006d40:	20000f3a 	.word	0x20000f3a
 8006d44:	08017e90 	.word	0x08017e90

08006d48 <PxMessagingTask>:
{
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4a:	46de      	mov	lr, fp
 8006d4c:	4657      	mov	r7, sl
 8006d4e:	464e      	mov	r6, r9
 8006d50:	4645      	mov	r5, r8
 8006d52:	b5e0      	push	{r5, r6, r7, lr}
 8006d54:	b095      	sub	sp, #84	; 0x54
	port = (int8_t)(unsigned) argument;
 8006d56:	b2c3      	uxtb	r3, r0
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	23ff      	movs	r3, #255	; 0xff
 8006d5c:	4003      	ands	r3, r0
 8006d5e:	4698      	mov	r8, r3
		if (messageLength[port-1])
 8006d60:	1e5c      	subs	r4, r3, #1
 8006d62:	00e3      	lsls	r3, r4, #3
 8006d64:	1b1b      	subs	r3, r3, r4
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	9309      	str	r3, [sp, #36]	; 0x24
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006d6a:	4ad8      	ldr	r2, [pc, #864]	; (80070cc <PxMessagingTask+0x384>)
 8006d6c:	18d3      	adds	r3, r2, r3
 8006d6e:	9305      	str	r3, [sp, #20]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d74:	4699      	mov	r9, r3
			if (cMessage[port-1][2]>>7) {
 8006d76:	00e6      	lsls	r6, r4, #3
 8006d78:	1b36      	subs	r6, r6, r4
 8006d7a:	00f6      	lsls	r6, r6, #3
 8006d7c:	1993      	adds	r3, r2, r6
 8006d7e:	3302      	adds	r3, #2
 8006d80:	469b      	mov	fp, r3
 8006d82:	e025      	b.n	8006dd0 <PxMessagingTask+0x88>
				longMessage = 1;
 8006d84:	4ad2      	ldr	r2, [pc, #840]	; (80070d0 <PxMessagingTask+0x388>)
 8006d86:	2001      	movs	r0, #1
 8006d88:	7010      	strb	r0, [r2, #0]
 8006d8a:	e032      	b.n	8006df2 <PxMessagingTask+0xaa>
				code = cMessage[port-1][3+shift];
 8006d8c:	4bcf      	ldr	r3, [pc, #828]	; (80070cc <PxMessagingTask+0x384>)
 8006d8e:	199b      	adds	r3, r3, r6
 8006d90:	189a      	adds	r2, r3, r2
 8006d92:	78d7      	ldrb	r7, [r2, #3]
 8006d94:	e048      	b.n	8006e28 <PxMessagingTask+0xe0>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8006d96:	2f19      	cmp	r7, #25
 8006d98:	d062      	beq.n	8006e60 <PxMessagingTask+0x118>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8006d9a:	2f1a      	cmp	r7, #26
 8006d9c:	d06a      	beq.n	8006e74 <PxMessagingTask+0x12c>
		if (result == BOS_ERR_UnknownMessage) {
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <PxMessagingTask+0x60>
 8006da4:	f001 fa40 	bl	8008228 <PxMessagingTask+0x14e0>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006da8:	4dca      	ldr	r5, [pc, #808]	; (80070d4 <PxMessagingTask+0x38c>)
 8006daa:	5d2a      	ldrb	r2, [r5, r4]
 8006dac:	2100      	movs	r1, #0
 8006dae:	9805      	ldr	r0, [sp, #20]
 8006db0:	f00c f826 	bl	8012e00 <memset>
		messageLength[port-1] = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8006db8:	4bc7      	ldr	r3, [pc, #796]	; (80070d8 <PxMessagingTask+0x390>)
 8006dba:	4642      	mov	r2, r8
 8006dbc:	5c9b      	ldrb	r3, [r3, r2]
 8006dbe:	3b02      	subs	r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d903      	bls.n	8006dcc <PxMessagingTask+0x84>
			portStatus[port] = FREE;
 8006dc4:	4bc4      	ldr	r3, [pc, #784]	; (80070d8 <PxMessagingTask+0x390>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4641      	mov	r1, r8
 8006dca:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8006dcc:	f008 fa6c 	bl	800f2a8 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4249      	negs	r1, r1
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f007 ff81 	bl	800ecdc <ulTaskNotifyTake>
		if (messageLength[port-1])
 8006dda:	4bbe      	ldr	r3, [pc, #760]	; (80070d4 <PxMessagingTask+0x38c>)
 8006ddc:	5d19      	ldrb	r1, [r3, r4]
 8006dde:	2900      	cmp	r1, #0
 8006de0:	d0dd      	beq.n	8006d9e <PxMessagingTask+0x56>
			if (cMessage[port-1][2]>>7) {
 8006de2:	465b      	mov	r3, fp
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b25a      	sxtb	r2, r3
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	dbcb      	blt.n	8006d84 <PxMessagingTask+0x3c>
				longMessage = 0;
 8006dec:	4ab8      	ldr	r2, [pc, #736]	; (80070d0 <PxMessagingTask+0x388>)
 8006dee:	2000      	movs	r0, #0
 8006df0:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port-1][0]; 
 8006df2:	4ab6      	ldr	r2, [pc, #728]	; (80070cc <PxMessagingTask+0x384>)
 8006df4:	5cb0      	ldrb	r0, [r6, r2]
 8006df6:	4682      	mov	sl, r0
			src = cMessage[port-1][1];	
 8006df8:	1992      	adds	r2, r2, r6
 8006dfa:	7852      	ldrb	r2, [r2, #1]
 8006dfc:	9206      	str	r2, [sp, #24]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8006dfe:	2201      	movs	r2, #1
 8006e00:	401a      	ands	r2, r3
			shift = 0;
 8006e02:	0015      	movs	r5, r2
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8006e04:	4fb5      	ldr	r7, [pc, #724]	; (80070dc <PxMessagingTask+0x394>)
 8006e06:	0718      	lsls	r0, r3, #28
 8006e08:	0f80      	lsrs	r0, r0, #30
 8006e0a:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8006e0c:	2060      	movs	r0, #96	; 0x60
 8006e0e:	4018      	ands	r0, r3
 8006e10:	71b8      	strb	r0, [r7, #6]
			if (extendCode == true) {		
 8006e12:	079b      	lsls	r3, r3, #30
 8006e14:	d5ba      	bpl.n	8006d8c <PxMessagingTask+0x44>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8006e16:	4bad      	ldr	r3, [pc, #692]	; (80070cc <PxMessagingTask+0x384>)
 8006e18:	199b      	adds	r3, r3, r6
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	7918      	ldrb	r0, [r3, #4]
 8006e1e:	0200      	lsls	r0, r0, #8
 8006e20:	78df      	ldrb	r7, [r3, #3]
 8006e22:	183f      	adds	r7, r7, r0
 8006e24:	b2bf      	uxth	r7, r7
				++shift;
 8006e26:	1c55      	adds	r5, r2, #1
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8006e28:	4653      	mov	r3, sl
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2bfc      	cmp	r3, #252	; 0xfc
 8006e30:	d901      	bls.n	8006e36 <PxMessagingTask+0xee>
 8006e32:	f001 fa10 	bl	8008256 <PxMessagingTask+0x150e>
 8006e36:	4baa      	ldr	r3, [pc, #680]	; (80070e0 <PxMessagingTask+0x398>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	4553      	cmp	r3, sl
 8006e3c:	d101      	bne.n	8006e42 <PxMessagingTask+0xfa>
 8006e3e:	f001 fa0a 	bl	8008256 <PxMessagingTask+0x150e>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <PxMessagingTask+0x102>
 8006e46:	f001 fa00 	bl	800824a <PxMessagingTask+0x1502>
				ForwardReceivedMessage(port);
 8006e4a:	9807      	ldr	r0, [sp, #28]
 8006e4c:	f7fe fec2 	bl	8005bd4 <ForwardReceivedMessage>
				if (BOS.trace)
 8006e50:	4ba2      	ldr	r3, [pc, #648]	; (80070dc <PxMessagingTask+0x394>)
 8006e52:	79db      	ldrb	r3, [r3, #7]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d09e      	beq.n	8006d96 <PxMessagingTask+0x4e>
					indMode = IND_SHORT_BLINK;
 8006e58:	4ba2      	ldr	r3, [pc, #648]	; (80070e4 <PxMessagingTask+0x39c>)
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e79a      	b.n	8006d96 <PxMessagingTask+0x4e>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8006e60:	2064      	movs	r0, #100	; 0x64
 8006e62:	f008 fb9f 	bl	800f5a4 <HAL_Delay>
 8006e66:	2300      	movs	r3, #0
 8006e68:	9a07      	ldr	r2, [sp, #28]
 8006e6a:	4651      	mov	r1, sl
 8006e6c:	9806      	ldr	r0, [sp, #24]
 8006e6e:	f7ff fe33 	bl	8006ad8 <remoteBootloaderUpdate>
 8006e72:	e794      	b.n	8006d9e <PxMessagingTask+0x56>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8006e74:	2064      	movs	r0, #100	; 0x64
 8006e76:	f008 fb95 	bl	800f5a4 <HAL_Delay>
 8006e7a:	4b94      	ldr	r3, [pc, #592]	; (80070cc <PxMessagingTask+0x384>)
 8006e7c:	199b      	adds	r3, r3, r6
 8006e7e:	5d5b      	ldrb	r3, [r3, r5]
 8006e80:	9a07      	ldr	r2, [sp, #28]
 8006e82:	4651      	mov	r1, sl
 8006e84:	9806      	ldr	r0, [sp, #24]
 8006e86:	f7ff fe27 	bl	8006ad8 <remoteBootloaderUpdate>
 8006e8a:	e788      	b.n	8006d9e <PxMessagingTask+0x56>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8006e8c:	4b8f      	ldr	r3, [pc, #572]	; (80070cc <PxMessagingTask+0x384>)
 8006e8e:	199b      	adds	r3, r3, r6
 8006e90:	1859      	adds	r1, r3, r1
 8006e92:	3901      	subs	r1, #1
 8006e94:	780b      	ldrb	r3, [r1, #0]
 8006e96:	4a94      	ldr	r2, [pc, #592]	; (80070e8 <PxMessagingTask+0x3a0>)
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d113      	bne.n	8006ec6 <PxMessagingTask+0x17e>
					result = BOS_ERR_MSG_Reflection;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	4699      	mov	r9, r3
				if (result == BOS_OK)
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d000      	beq.n	8006eaa <PxMessagingTask+0x162>
 8006ea8:	e779      	b.n	8006d9e <PxMessagingTask+0x56>
				shift += 4;
 8006eaa:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8006eac:	4b89      	ldr	r3, [pc, #548]	; (80070d4 <PxMessagingTask+0x38c>)
 8006eae:	5d19      	ldrb	r1, [r3, r4]
 8006eb0:	1b4a      	subs	r2, r1, r5
 8006eb2:	b2d3      	uxtb	r3, r2
 8006eb4:	4699      	mov	r9, r3
					switch (code)
 8006eb6:	2f23      	cmp	r7, #35	; 0x23
 8006eb8:	d901      	bls.n	8006ebe <PxMessagingTask+0x176>
 8006eba:	f001 f993 	bl	80081e4 <PxMessagingTask+0x149c>
 8006ebe:	00bb      	lsls	r3, r7, #2
 8006ec0:	4a8a      	ldr	r2, [pc, #552]	; (80070ec <PxMessagingTask+0x3a4>)
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8006ec6:	4a88      	ldr	r2, [pc, #544]	; (80070e8 <PxMessagingTask+0x3a0>)
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	4a89      	ldr	r2, [pc, #548]	; (80070f0 <PxMessagingTask+0x3a8>)
 8006ecc:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8006ece:	9907      	ldr	r1, [sp, #28]
 8006ed0:	20ff      	movs	r0, #255	; 0xff
 8006ed2:	f7fe f9fd 	bl	80052d0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8006ed6:	4b7f      	ldr	r3, [pc, #508]	; (80070d4 <PxMessagingTask+0x38c>)
 8006ed8:	5d1a      	ldrb	r2, [r3, r4]
 8006eda:	4b7c      	ldr	r3, [pc, #496]	; (80070cc <PxMessagingTask+0x384>)
 8006edc:	199b      	adds	r3, r3, r6
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e7dc      	b.n	8006ea2 <PxMessagingTask+0x15a>
							for (p=0 ; p<numOfParams ; p++) 
 8006ee8:	464b      	mov	r3, r9
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d020      	beq.n	8006f30 <PxMessagingTask+0x1e8>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	1e58      	subs	r0, r3, #1
 8006ef2:	0042      	lsls	r2, r0, #1
 8006ef4:	4b7f      	ldr	r3, [pc, #508]	; (80070f4 <PxMessagingTask+0x3ac>)
 8006ef6:	5ad3      	ldrh	r3, [r2, r3]
 8006ef8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006efa:	19e9      	adds	r1, r5, r7
 8006efc:	4a73      	ldr	r2, [pc, #460]	; (80070cc <PxMessagingTask+0x384>)
 8006efe:	1889      	adds	r1, r1, r2
 8006f00:	3201      	adds	r2, #1
 8006f02:	46bc      	mov	ip, r7
 8006f04:	4462      	add	r2, ip
 8006f06:	1955      	adds	r5, r2, r5
 8006f08:	464a      	mov	r2, r9
 8006f0a:	3a01      	subs	r2, #1
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	18ad      	adds	r5, r5, r2
 8006f10:	2780      	movs	r7, #128	; 0x80
 8006f12:	023f      	lsls	r7, r7, #8
 8006f14:	4684      	mov	ip, r0
 8006f16:	780a      	ldrb	r2, [r1, #0]
 8006f18:	3a01      	subs	r2, #1
 8006f1a:	0038      	movs	r0, r7
 8006f1c:	4110      	asrs	r0, r2
 8006f1e:	4303      	orrs	r3, r0
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3101      	adds	r1, #1
							for (p=0 ; p<numOfParams ; p++) 
 8006f24:	42a9      	cmp	r1, r5
 8006f26:	d1f6      	bne.n	8006f16 <PxMessagingTask+0x1ce>
 8006f28:	4660      	mov	r0, ip
 8006f2a:	0040      	lsls	r0, r0, #1
 8006f2c:	4a71      	ldr	r2, [pc, #452]	; (80070f4 <PxMessagingTask+0x3ac>)
 8006f2e:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8006f30:	4b71      	ldr	r3, [pc, #452]	; (80070f8 <PxMessagingTask+0x3b0>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
							break;		
 8006f36:	2300      	movs	r3, #0
 8006f38:	4699      	mov	r9, r3
 8006f3a:	e735      	b.n	8006da8 <PxMessagingTask+0x60>
							indMode = IND_PING;	osDelay(10);
 8006f3c:	4b69      	ldr	r3, [pc, #420]	; (80070e4 <PxMessagingTask+0x39c>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	200a      	movs	r0, #10
 8006f44:	f006 faf7 	bl	800d536 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8006f48:	4b64      	ldr	r3, [pc, #400]	; (80070dc <PxMessagingTask+0x394>)
 8006f4a:	799b      	ldrb	r3, [r3, #6]
 8006f4c:	2240      	movs	r2, #64	; 0x40
 8006f4e:	4393      	bics	r3, r2
 8006f50:	2200      	movs	r2, #0
 8006f52:	4691      	mov	r9, r2
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d000      	beq.n	8006f5a <PxMessagingTask+0x212>
 8006f58:	e726      	b.n	8006da8 <PxMessagingTask+0x60>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	9806      	ldr	r0, [sp, #24]
 8006f5e:	f7fe fe59 	bl	8005c14 <SendMessageToModule>
 8006f62:	e721      	b.n	8006da8 <PxMessagingTask+0x60>
							if (!moduleAlias[myID][0])
 8006f64:	4b5e      	ldr	r3, [pc, #376]	; (80070e0 <PxMessagingTask+0x398>)
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	0093      	lsls	r3, r2, #2
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	4a63      	ldr	r2, [pc, #396]	; (80070fc <PxMessagingTask+0x3b4>)
 8006f70:	5c9b      	ldrb	r3, [r3, r2]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d118      	bne.n	8006fa8 <PxMessagingTask+0x260>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8006f76:	9a06      	ldr	r2, [sp, #24]
 8006f78:	4961      	ldr	r1, [pc, #388]	; (8007100 <PxMessagingTask+0x3b8>)
 8006f7a:	4862      	ldr	r0, [pc, #392]	; (8007104 <PxMessagingTask+0x3bc>)
 8006f7c:	f00c f93a 	bl	80131f4 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8006f80:	4d60      	ldr	r5, [pc, #384]	; (8007104 <PxMessagingTask+0x3bc>)
 8006f82:	0028      	movs	r0, r5
 8006f84:	f7f9 f8c8 	bl	8000118 <strlen>
 8006f88:	b282      	uxth	r2, r0
 8006f8a:	4b5f      	ldr	r3, [pc, #380]	; (8007108 <PxMessagingTask+0x3c0>)
 8006f8c:	7818      	ldrb	r0, [r3, #0]
 8006f8e:	2301      	movs	r3, #1
 8006f90:	425b      	negs	r3, r3
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	3333      	adds	r3, #51	; 0x33
 8006f96:	0029      	movs	r1, r5
 8006f98:	f006 f9d8 	bl	800d34c <writePxMutex>
							responseStatus = BOS_OK;								
 8006f9c:	4b56      	ldr	r3, [pc, #344]	; (80070f8 <PxMessagingTask+0x3b0>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
							break;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	e6ff      	b.n	8006da8 <PxMessagingTask+0x60>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8006fa8:	230a      	movs	r3, #10
 8006faa:	9906      	ldr	r1, [sp, #24]
 8006fac:	434b      	muls	r3, r1
 8006fae:	4a53      	ldr	r2, [pc, #332]	; (80070fc <PxMessagingTask+0x3b4>)
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	000a      	movs	r2, r1
 8006fb4:	4955      	ldr	r1, [pc, #340]	; (800710c <PxMessagingTask+0x3c4>)
 8006fb6:	4853      	ldr	r0, [pc, #332]	; (8007104 <PxMessagingTask+0x3bc>)
 8006fb8:	f00c f91c 	bl	80131f4 <sprintf>
 8006fbc:	e7e0      	b.n	8006f80 <PxMessagingTask+0x238>
							IND_ON();
 8006fbe:	2180      	movs	r1, #128	; 0x80
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	01c9      	lsls	r1, r1, #7
 8006fc4:	4852      	ldr	r0, [pc, #328]	; (8007110 <PxMessagingTask+0x3c8>)
 8006fc6:	f009 fbb9 	bl	801073c <HAL_GPIO_WritePin>
							break;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4699      	mov	r9, r3
 8006fce:	e6eb      	b.n	8006da8 <PxMessagingTask+0x60>
							IND_OFF();
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	01c9      	lsls	r1, r1, #7
 8006fd6:	484e      	ldr	r0, [pc, #312]	; (8007110 <PxMessagingTask+0x3c8>)
 8006fd8:	f009 fbb0 	bl	801073c <HAL_GPIO_WritePin>
							break;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4699      	mov	r9, r3
 8006fe0:	e6e2      	b.n	8006da8 <PxMessagingTask+0x60>
							IND_toggle();
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	01c9      	lsls	r1, r1, #7
 8006fe6:	484a      	ldr	r0, [pc, #296]	; (8007110 <PxMessagingTask+0x3c8>)
 8006fe8:	f009 fbae 	bl	8010748 <HAL_GPIO_TogglePin>
							break;
 8006fec:	2300      	movs	r3, #0
 8006fee:	4699      	mov	r9, r3
 8006ff0:	e6da      	b.n	8006da8 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8006ff2:	4f48      	ldr	r7, [pc, #288]	; (8007114 <PxMessagingTask+0x3cc>)
 8006ff4:	00a3      	lsls	r3, r4, #2
 8006ff6:	4a35      	ldr	r2, [pc, #212]	; (80070cc <PxMessagingTask+0x384>)
 8006ff8:	1992      	adds	r2, r2, r6
 8006ffa:	1950      	adds	r0, r2, r5
 8006ffc:	7881      	ldrb	r1, [r0, #2]
 8006ffe:	468c      	mov	ip, r1
 8007000:	9906      	ldr	r1, [sp, #24]
 8007002:	0209      	lsls	r1, r1, #8
 8007004:	4461      	add	r1, ip
 8007006:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	5d51      	ldrb	r1, [r2, r5]
 800700c:	0209      	lsls	r1, r1, #8
 800700e:	7842      	ldrb	r2, [r0, #1]
 8007010:	1852      	adds	r2, r2, r1
 8007012:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8007014:	4b40      	ldr	r3, [pc, #256]	; (8007118 <PxMessagingTask+0x3d0>)
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	4a40      	ldr	r2, [pc, #256]	; (800711c <PxMessagingTask+0x3d4>)
 800701a:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8007020:	9d07      	ldr	r5, [sp, #28]
 8007022:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8007024:	2002      	movs	r0, #2
 8007026:	f006 fa86 	bl	800d536 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 800702a:	2303      	movs	r3, #3
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	2200      	movs	r2, #0
 8007032:	2100      	movs	r1, #0
 8007034:	0028      	movs	r0, r5
 8007036:	f7fd ff91 	bl	8004f5c <SendMessageFromPort>
							break;
 800703a:	2300      	movs	r3, #0
 800703c:	4699      	mov	r9, r3
 800703e:	e6b3      	b.n	8006da8 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8007040:	4f34      	ldr	r7, [pc, #208]	; (8007114 <PxMessagingTask+0x3cc>)
 8007042:	00a3      	lsls	r3, r4, #2
 8007044:	4a21      	ldr	r2, [pc, #132]	; (80070cc <PxMessagingTask+0x384>)
 8007046:	1992      	adds	r2, r2, r6
 8007048:	1950      	adds	r0, r2, r5
 800704a:	7881      	ldrb	r1, [r0, #2]
 800704c:	468c      	mov	ip, r1
 800704e:	9906      	ldr	r1, [sp, #24]
 8007050:	0209      	lsls	r1, r1, #8
 8007052:	4461      	add	r1, ip
 8007054:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	5d51      	ldrb	r1, [r2, r5]
 800705a:	0209      	lsls	r1, r1, #8
 800705c:	7842      	ldrb	r2, [r0, #1]
 800705e:	1852      	adds	r2, r2, r1
 8007060:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8007062:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <PxMessagingTask+0x3b0>)
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
							break;
 8007068:	2300      	movs	r3, #0
 800706a:	4699      	mov	r9, r3
 800706c:	e69c      	b.n	8006da8 <PxMessagingTask+0x60>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 800706e:	9807      	ldr	r0, [sp, #28]
 8007070:	f7fe f976 	bl	8005360 <ExploreNeighbors>
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <PxMessagingTask+0x39c>)
 8007076:	2202      	movs	r2, #2
 8007078:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 800707a:	200a      	movs	r0, #10
 800707c:	f006 fa5b 	bl	800d536 <osDelay>
 8007080:	4d24      	ldr	r5, [pc, #144]	; (8007114 <PxMessagingTask+0x3cc>)
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8007082:	2701      	movs	r7, #1
							osDelay(10); temp = 0;
 8007084:	2300      	movs	r3, #0
									messageParams[temp] = p;
 8007086:	46a1      	mov	r9, r4
 8007088:	001c      	movs	r4, r3
 800708a:	e004      	b.n	8007096 <PxMessagingTask+0x34e>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 800708c:	3701      	adds	r7, #1
 800708e:	b2ff      	uxtb	r7, r7
 8007090:	3504      	adds	r5, #4
 8007092:	2f06      	cmp	r7, #6
 8007094:	d00e      	beq.n	80070b4 <PxMessagingTask+0x36c>
								if (neighbors[p-1][0])
 8007096:	882b      	ldrh	r3, [r5, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f7      	beq.n	800708c <PxMessagingTask+0x344>
									messageParams[temp] = p;
 800709c:	4b1f      	ldr	r3, [pc, #124]	; (800711c <PxMessagingTask+0x3d4>)
 800709e:	551f      	strb	r7, [r3, r4]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 80070a0:	1c60      	adds	r0, r4, #1
 80070a2:	469c      	mov	ip, r3
 80070a4:	4460      	add	r0, ip
 80070a6:	2204      	movs	r2, #4
 80070a8:	0029      	movs	r1, r5
 80070aa:	f00b fea0 	bl	8012dee <memcpy>
									temp += 5;		
 80070ae:	3405      	adds	r4, #5
 80070b0:	b2e4      	uxtb	r4, r4
 80070b2:	e7eb      	b.n	800708c <PxMessagingTask+0x344>
 80070b4:	0023      	movs	r3, r4
 80070b6:	9408      	str	r4, [sp, #32]
 80070b8:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	210d      	movs	r1, #13
 80070be:	9806      	ldr	r0, [sp, #24]
 80070c0:	f7fe fda8 	bl	8005c14 <SendMessageToModule>
							break;
 80070c4:	2300      	movs	r3, #0
 80070c6:	4699      	mov	r9, r3
 80070c8:	e66e      	b.n	8006da8 <PxMessagingTask+0x60>
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	20000d48 	.word	0x20000d48
 80070d0:	20000f3b 	.word	0x20000f3b
 80070d4:	2000108c 	.word	0x2000108c
 80070d8:	20001270 	.word	0x20001270
 80070dc:	20006894 	.word	0x20006894
 80070e0:	200011c8 	.word	0x200011c8
 80070e4:	20000f3a 	.word	0x20000f3a
 80070e8:	20000c8b 	.word	0x20000c8b
 80070ec:	0801781c 	.word	0x0801781c
 80070f0:	20000c8a 	.word	0x20000c8a
 80070f4:	20000c58 	.word	0x20000c58
 80070f8:	200012c0 	.word	0x200012c0
 80070fc:	200010c4 	.word	0x200010c4
 8007100:	0801844c 	.word	0x0801844c
 8007104:	20001220 	.word	0x20001220
 8007108:	20000a2f 	.word	0x20000a2f
 800710c:	08018460 	.word	0x08018460
 8007110:	48000800 	.word	0x48000800
 8007114:	200011cc 	.word	0x200011cc
 8007118:	2000001e 	.word	0x2000001e
 800711c:	20001094 	.word	0x20001094
							temp = numOfParams/5;
 8007120:	2105      	movs	r1, #5
 8007122:	4648      	mov	r0, r9
 8007124:	f7f9 f814 	bl	8000150 <__udivsi3>
 8007128:	b2c2      	uxtb	r2, r0
 800712a:	9208      	str	r2, [sp, #32]
							for (uint8_t k=0 ; k<temp ; k++)  {
 800712c:	2a00      	cmp	r2, #0
 800712e:	d019      	beq.n	8007164 <PxMessagingTask+0x41c>
 8007130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007132:	194f      	adds	r7, r1, r5
 8007134:	4bdc      	ldr	r3, [pc, #880]	; (80074a8 <PxMessagingTask+0x760>)
 8007136:	18ff      	adds	r7, r7, r3
 8007138:	3305      	adds	r3, #5
 800713a:	468c      	mov	ip, r1
 800713c:	4463      	add	r3, ip
 800713e:	195d      	adds	r5, r3, r5
 8007140:	1e53      	subs	r3, r2, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	009a      	lsls	r2, r3, #2
 8007146:	18d3      	adds	r3, r2, r3
 8007148:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 800714a:	4bd8      	ldr	r3, [pc, #864]	; (80074ac <PxMessagingTask+0x764>)
 800714c:	4699      	mov	r9, r3
 800714e:	7838      	ldrb	r0, [r7, #0]
 8007150:	3801      	subs	r0, #1
 8007152:	0080      	lsls	r0, r0, #2
 8007154:	4448      	add	r0, r9
 8007156:	1c79      	adds	r1, r7, #1
 8007158:	2204      	movs	r2, #4
 800715a:	f00b fe48 	bl	8012dee <memcpy>
 800715e:	3705      	adds	r7, #5
							for (uint8_t k=0 ; k<temp ; k++)  {
 8007160:	42bd      	cmp	r5, r7
 8007162:	d1f4      	bne.n	800714e <PxMessagingTask+0x406>
							responseStatus = BOS_OK;
 8007164:	4bd2      	ldr	r3, [pc, #840]	; (80074b0 <PxMessagingTask+0x768>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
							break;
 800716a:	2300      	movs	r3, #0
 800716c:	4699      	mov	r9, r3
 800716e:	e61b      	b.n	8006da8 <PxMessagingTask+0x60>
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	18eb      	adds	r3, r5, r3
 8007174:	4acc      	ldr	r2, [pc, #816]	; (80074a8 <PxMessagingTask+0x760>)
 8007176:	4699      	mov	r9, r3
 8007178:	4491      	add	r9, r2
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800717a:	2701      	movs	r7, #1
 800717c:	464b      	mov	r3, r9
 800717e:	46a1      	mov	r9, r4
 8007180:	46aa      	mov	sl, r5
 8007182:	9d07      	ldr	r5, [sp, #28]
 8007184:	001c      	movs	r4, r3
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8007186:	42bd      	cmp	r5, r7
 8007188:	d005      	beq.n	8007196 <PxMessagingTask+0x44e>
 800718a:	0038      	movs	r0, r7
 800718c:	f7fd fb54 	bl	8004838 <GetUart>
 8007190:	7821      	ldrb	r1, [r4, #0]
 8007192:	f7fe fc17 	bl	80059c4 <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8007196:	3701      	adds	r7, #1
 8007198:	b2ff      	uxtb	r7, r7
 800719a:	3401      	adds	r4, #1
 800719c:	2f06      	cmp	r7, #6
 800719e:	d1f2      	bne.n	8007186 <PxMessagingTask+0x43e>
 80071a0:	464c      	mov	r4, r9
 80071a2:	4655      	mov	r5, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 80071a4:	9807      	ldr	r0, [sp, #28]
 80071a6:	f7fd fb47 	bl	8004838 <GetUart>
 80071aa:	4bbf      	ldr	r3, [pc, #764]	; (80074a8 <PxMessagingTask+0x760>)
 80071ac:	199b      	adds	r3, r3, r6
 80071ae:	195d      	adds	r5, r3, r5
 80071b0:	7aa9      	ldrb	r1, [r5, #10]
 80071b2:	f7fe fc07 	bl	80059c4 <SwapUartPins>
							break;
 80071b6:	2300      	movs	r3, #0
 80071b8:	4699      	mov	r9, r3
 80071ba:	e5f5      	b.n	8006da8 <PxMessagingTask+0x60>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 80071bc:	002a      	movs	r2, r5
 80071be:	4bba      	ldr	r3, [pc, #744]	; (80074a8 <PxMessagingTask+0x760>)
 80071c0:	199b      	adds	r3, r3, r6
 80071c2:	5d5b      	ldrb	r3, [r3, r5]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <PxMessagingTask+0x496>
								myID = cMessage[port-1][1+shift];
 80071c8:	2238      	movs	r2, #56	; 0x38
 80071ca:	4362      	muls	r2, r4
 80071cc:	4bb6      	ldr	r3, [pc, #728]	; (80074a8 <PxMessagingTask+0x760>)
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	195d      	adds	r5, r3, r5
 80071d2:	786a      	ldrb	r2, [r5, #1]
 80071d4:	4bb7      	ldr	r3, [pc, #732]	; (80074b4 <PxMessagingTask+0x76c>)
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	2300      	movs	r3, #0
 80071da:	4699      	mov	r9, r3
 80071dc:	e5e4      	b.n	8006da8 <PxMessagingTask+0x60>
 80071de:	2100      	movs	r1, #0
 80071e0:	4689      	mov	r9, r1
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d000      	beq.n	80071e8 <PxMessagingTask+0x4a0>
 80071e6:	e5df      	b.n	8006da8 <PxMessagingTask+0x60>
								messageParams[0] = 0;											/* change own ID */
 80071e8:	49b3      	ldr	r1, [pc, #716]	; (80074b8 <PxMessagingTask+0x770>)
 80071ea:	464d      	mov	r5, r9
 80071ec:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 80071ee:	2038      	movs	r0, #56	; 0x38
 80071f0:	4360      	muls	r0, r4
 80071f2:	4bad      	ldr	r3, [pc, #692]	; (80074a8 <PxMessagingTask+0x760>)
 80071f4:	181b      	adds	r3, r3, r0
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	785a      	ldrb	r2, [r3, #1]
 80071fa:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 80071fc:	7898      	ldrb	r0, [r3, #2]
 80071fe:	2303      	movs	r3, #3
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	330d      	adds	r3, #13
 8007204:	464a      	mov	r2, r9
 8007206:	4649      	mov	r1, r9
 8007208:	f7fd fea8 	bl	8004f5c <SendMessageFromPort>
 800720c:	e5cc      	b.n	8006da8 <PxMessagingTask+0x60>
							if (longMessage) {
 800720e:	4bab      	ldr	r3, [pc, #684]	; (80074bc <PxMessagingTask+0x774>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d012      	beq.n	800723c <PxMessagingTask+0x4f4>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8007216:	4baa      	ldr	r3, [pc, #680]	; (80074c0 <PxMessagingTask+0x778>)
 8007218:	469a      	mov	sl, r3
 800721a:	881f      	ldrh	r7, [r3, #0]
 800721c:	48a9      	ldr	r0, [pc, #676]	; (80074c4 <PxMessagingTask+0x77c>)
 800721e:	1838      	adds	r0, r7, r0
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	469c      	mov	ip, r3
 8007224:	4465      	add	r5, ip
 8007226:	49a0      	ldr	r1, [pc, #640]	; (80074a8 <PxMessagingTask+0x760>)
 8007228:	1869      	adds	r1, r5, r1
 800722a:	464a      	mov	r2, r9
 800722c:	f00b fddf 	bl	8012dee <memcpy>
								longMessageLastPtr += numOfParams;
 8007230:	444f      	add	r7, r9
 8007232:	4653      	mov	r3, sl
 8007234:	801f      	strh	r7, [r3, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	4699      	mov	r9, r3
 800723a:	e5b5      	b.n	8006da8 <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800723c:	4ba0      	ldr	r3, [pc, #640]	; (80074c0 <PxMessagingTask+0x778>)
 800723e:	469a      	mov	sl, r3
 8007240:	881f      	ldrh	r7, [r3, #0]
 8007242:	4ba0      	ldr	r3, [pc, #640]	; (80074c4 <PxMessagingTask+0x77c>)
 8007244:	18f8      	adds	r0, r7, r3
 8007246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007248:	469c      	mov	ip, r3
 800724a:	4465      	add	r5, ip
 800724c:	4996      	ldr	r1, [pc, #600]	; (80074a8 <PxMessagingTask+0x760>)
 800724e:	1869      	adds	r1, r5, r1
 8007250:	464a      	mov	r2, r9
 8007252:	f00b fdcc 	bl	8012dee <memcpy>
								longMessageLastPtr += numOfParams;
 8007256:	444f      	add	r7, r9
 8007258:	b2bf      	uxth	r7, r7
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 800725a:	2116      	movs	r1, #22
 800725c:	0038      	movs	r0, r7
 800725e:	f7f8 ff77 	bl	8000150 <__udivsi3>
 8007262:	4b99      	ldr	r3, [pc, #612]	; (80074c8 <PxMessagingTask+0x780>)
 8007264:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8007266:	003a      	movs	r2, r7
 8007268:	4996      	ldr	r1, [pc, #600]	; (80074c4 <PxMessagingTask+0x77c>)
 800726a:	4898      	ldr	r0, [pc, #608]	; (80074cc <PxMessagingTask+0x784>)
 800726c:	f00b fdbf 	bl	8012dee <memcpy>
								longMessageLastPtr = 0;
 8007270:	2500      	movs	r5, #0
 8007272:	4653      	mov	r3, sl
 8007274:	801d      	strh	r5, [r3, #0]
 8007276:	46a9      	mov	r9, r5
 8007278:	e596      	b.n	8006da8 <PxMessagingTask+0x60>
								for (p=1 ; p<=NumOfPorts ; p++) {
 800727a:	2501      	movs	r5, #1
							temp = 0;
 800727c:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800727e:	2780      	movs	r7, #128	; 0x80
 8007280:	023f      	lsls	r7, r7, #8
									messageParams[temp++] = p;
 8007282:	46a1      	mov	r9, r4
 8007284:	001c      	movs	r4, r3
 8007286:	e003      	b.n	8007290 <PxMessagingTask+0x548>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8007288:	3501      	adds	r5, #1
 800728a:	b2ed      	uxtb	r5, r5
 800728c:	2d06      	cmp	r5, #6
 800728e:	d00a      	beq.n	80072a6 <PxMessagingTask+0x55e>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8007290:	0028      	movs	r0, r5
 8007292:	f7fd fad1 	bl	8004838 <GetUart>
 8007296:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007298:	42bb      	cmp	r3, r7
 800729a:	d1f5      	bne.n	8007288 <PxMessagingTask+0x540>
									messageParams[temp++] = p;
 800729c:	1c63      	adds	r3, r4, #1
 800729e:	4a86      	ldr	r2, [pc, #536]	; (80074b8 <PxMessagingTask+0x770>)
 80072a0:	5515      	strb	r5, [r2, r4]
 80072a2:	b2dc      	uxtb	r4, r3
 80072a4:	e7f0      	b.n	8007288 <PxMessagingTask+0x540>
 80072a6:	0023      	movs	r3, r4
 80072a8:	9408      	str	r4, [sp, #32]
 80072aa:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	2114      	movs	r1, #20
 80072b0:	9806      	ldr	r0, [sp, #24]
 80072b2:	f7fe fcaf 	bl	8005c14 <SendMessageToModule>
							break;
 80072b6:	2300      	movs	r3, #0
 80072b8:	4699      	mov	r9, r3
 80072ba:	e575      	b.n	8006da8 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 80072bc:	4b7a      	ldr	r3, [pc, #488]	; (80074a8 <PxMessagingTask+0x760>)
 80072be:	199b      	adds	r3, r3, r6
 80072c0:	5d5f      	ldrb	r7, [r3, r5]
 80072c2:	063f      	lsls	r7, r7, #24
 80072c4:	195b      	adds	r3, r3, r5
 80072c6:	78da      	ldrb	r2, [r3, #3]
 80072c8:	18bf      	adds	r7, r7, r2
 80072ca:	785a      	ldrb	r2, [r3, #1]
 80072cc:	0412      	lsls	r2, r2, #16
 80072ce:	18bf      	adds	r7, r7, r2
 80072d0:	789a      	ldrb	r2, [r3, #2]
 80072d2:	0212      	lsls	r2, r2, #8
 80072d4:	18ba      	adds	r2, r7, r2
 80072d6:	9208      	str	r2, [sp, #32]
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	2bff      	cmp	r3, #255	; 0xff
 80072dc:	d014      	beq.n	8007308 <PxMessagingTask+0x5c0>
									for (p=0 ; p<numOfParams ; p++) 
 80072de:	464b      	mov	r3, r9
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <PxMessagingTask+0x5bc>
 80072e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e6:	1d0a      	adds	r2, r1, #4
 80072e8:	1952      	adds	r2, r2, r5
 80072ea:	4b6f      	ldr	r3, [pc, #444]	; (80074a8 <PxMessagingTask+0x760>)
 80072ec:	18d7      	adds	r7, r2, r3
 80072ee:	3305      	adds	r3, #5
 80072f0:	468c      	mov	ip, r1
 80072f2:	4463      	add	r3, ip
 80072f4:	195d      	adds	r5, r3, r5
 80072f6:	464b      	mov	r3, r9
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	18ed      	adds	r5, r5, r3
 80072fe:	46a1      	mov	r9, r4
 8007300:	002c      	movs	r4, r5
 8007302:	e011      	b.n	8007328 <PxMessagingTask+0x5e0>
								temp = temp32 = 0;
 8007304:	9308      	str	r3, [sp, #32]
 8007306:	e54f      	b.n	8006da8 <PxMessagingTask+0x60>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8007308:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 800730a:	9908      	ldr	r1, [sp, #32]
 800730c:	0028      	movs	r0, r5
 800730e:	f006 f88b 	bl	800d428 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8007312:	3501      	adds	r5, #1
 8007314:	b2ed      	uxtb	r5, r5
 8007316:	2d06      	cmp	r5, #6
 8007318:	d1f7      	bne.n	800730a <PxMessagingTask+0x5c2>
								temp = temp32 = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	9308      	str	r3, [sp, #32]
 800731e:	4699      	mov	r9, r3
 8007320:	e542      	b.n	8006da8 <PxMessagingTask+0x60>
 8007322:	3701      	adds	r7, #1
									for (p=0 ; p<numOfParams ; p++) 
 8007324:	42a7      	cmp	r7, r4
 8007326:	d008      	beq.n	800733a <PxMessagingTask+0x5f2>
										temp = cMessage[port-1][4+shift+p];
 8007328:	783d      	ldrb	r5, [r7, #0]
										if (temp>0 && temp<=NumOfPorts)	{
 800732a:	1e6b      	subs	r3, r5, #1
 800732c:	2b04      	cmp	r3, #4
 800732e:	d8f8      	bhi.n	8007322 <PxMessagingTask+0x5da>
											UpdateBaudrate(temp, temp32); 
 8007330:	9908      	ldr	r1, [sp, #32]
 8007332:	0028      	movs	r0, r5
 8007334:	f006 f878 	bl	800d428 <UpdateBaudrate>
 8007338:	e7f3      	b.n	8007322 <PxMessagingTask+0x5da>
 800733a:	464c      	mov	r4, r9
 800733c:	9508      	str	r5, [sp, #32]
 800733e:	2300      	movs	r3, #0
 8007340:	4699      	mov	r9, r3
 8007342:	e531      	b.n	8006da8 <PxMessagingTask+0x60>
								SaveToRO();
 8007344:	f7fc fa98 	bl	8003878 <SaveToRO>
							SaveEEportsDir();
 8007348:	f7fc fd5c 	bl	8003e04 <SaveEEportsDir>
							indMode = IND_PING;
 800734c:	4b60      	ldr	r3, [pc, #384]	; (80074d0 <PxMessagingTask+0x788>)
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
							break;
 8007352:	2300      	movs	r3, #0
 8007354:	4699      	mov	r9, r3
 8007356:	e527      	b.n	8006da8 <PxMessagingTask+0x60>
							ClearEEportsDir();
 8007358:	f7fc fd7e 	bl	8003e58 <ClearEEportsDir>
							ClearROtopology();
 800735c:	f7fc fc70 	bl	8003c40 <ClearROtopology>
							osDelay(100);
 8007360:	2064      	movs	r0, #100	; 0x64
 8007362:	f006 f8e8 	bl	800d536 <osDelay>
							indMode = IND_TOPOLOGY;
 8007366:	4b5a      	ldr	r3, [pc, #360]	; (80074d0 <PxMessagingTask+0x788>)
 8007368:	2202      	movs	r2, #2
 800736a:	701a      	strb	r2, [r3, #0]
							break;
 800736c:	2300      	movs	r3, #0
 800736e:	4699      	mov	r9, r3
 8007370:	e51a      	b.n	8006da8 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8007372:	f006 f9f5 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8007376:	900a      	str	r0, [sp, #40]	; 0x28
							if (dst == BOS_BROADCAST)
 8007378:	4653      	mov	r3, sl
 800737a:	2bff      	cmp	r3, #255	; 0xff
 800737c:	d011      	beq.n	80073a2 <PxMessagingTask+0x65a>
							else if (dst == BOS_MULTICAST)
 800737e:	2bfe      	cmp	r3, #254	; 0xfe
 8007380:	d01a      	beq.n	80073b8 <PxMessagingTask+0x670>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8007382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007384:	469c      	mov	ip, r3
 8007386:	4465      	add	r5, ip
 8007388:	4947      	ldr	r1, [pc, #284]	; (80074a8 <PxMessagingTask+0x760>)
 800738a:	1869      	adds	r1, r5, r1
 800738c:	464a      	mov	r2, r9
 800738e:	4851      	ldr	r0, [pc, #324]	; (80074d4 <PxMessagingTask+0x78c>)
 8007390:	f00b fd2d 	bl	8012dee <memcpy>
								temp = PcPort; PcPort = port;
 8007394:	4d50      	ldr	r5, [pc, #320]	; (80074d8 <PxMessagingTask+0x790>)
								if (BOS.response == BOS_RESPONSE_ALL)
 8007396:	4b51      	ldr	r3, [pc, #324]	; (80074dc <PxMessagingTask+0x794>)
 8007398:	4699      	mov	r9, r3
 800739a:	46a2      	mov	sl, r4
 800739c:	960c      	str	r6, [sp, #48]	; 0x30
 800739e:	9e07      	ldr	r6, [sp, #28]
 80073a0:	e019      	b.n	80073d6 <PxMessagingTask+0x68e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 80073a2:	464a      	mov	r2, r9
 80073a4:	3a01      	subs	r2, #1
 80073a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a8:	469c      	mov	ip, r3
 80073aa:	4465      	add	r5, ip
 80073ac:	493e      	ldr	r1, [pc, #248]	; (80074a8 <PxMessagingTask+0x760>)
 80073ae:	1869      	adds	r1, r5, r1
 80073b0:	4848      	ldr	r0, [pc, #288]	; (80074d4 <PxMessagingTask+0x78c>)
 80073b2:	f00b fd1c 	bl	8012dee <memcpy>
 80073b6:	e7ed      	b.n	8007394 <PxMessagingTask+0x64c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 80073b8:	464b      	mov	r3, r9
 80073ba:	9a08      	ldr	r2, [sp, #32]
 80073bc:	1a9a      	subs	r2, r3, r2
 80073be:	3a02      	subs	r2, #2
 80073c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c2:	469c      	mov	ip, r3
 80073c4:	4465      	add	r5, ip
 80073c6:	4938      	ldr	r1, [pc, #224]	; (80074a8 <PxMessagingTask+0x760>)
 80073c8:	1869      	adds	r1, r5, r1
 80073ca:	4842      	ldr	r0, [pc, #264]	; (80074d4 <PxMessagingTask+0x78c>)
 80073cc:	f00b fd0f 	bl	8012dee <memcpy>
 80073d0:	e7e0      	b.n	8007394 <PxMessagingTask+0x64c>
							while( xReturned != pdFALSE );								
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	d021      	beq.n	800741a <PxMessagingTask+0x6d2>
								temp = PcPort; PcPort = port;
 80073d6:	782f      	ldrb	r7, [r5, #0]
 80073d8:	702e      	strb	r6, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80073da:	2299      	movs	r2, #153	; 0x99
 80073dc:	0092      	lsls	r2, r2, #2
 80073de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073e0:	483c      	ldr	r0, [pc, #240]	; (80074d4 <PxMessagingTask+0x78c>)
 80073e2:	f006 f93f 	bl	800d664 <FreeRTOS_CLIProcessCommand>
 80073e6:	0004      	movs	r4, r0
								PcPort = temp;
 80073e8:	702f      	strb	r7, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 80073ea:	464b      	mov	r3, r9
 80073ec:	799b      	ldrb	r3, [r3, #6]
 80073ee:	2b60      	cmp	r3, #96	; 0x60
 80073f0:	d1ef      	bne.n	80073d2 <PxMessagingTask+0x68a>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80073f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073f4:	f7f8 fe90 	bl	8000118 <strlen>
 80073f8:	0002      	movs	r2, r0
 80073fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073fc:	482e      	ldr	r0, [pc, #184]	; (80074b8 <PxMessagingTask+0x770>)
 80073fe:	f00b fcf6 	bl	8012dee <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8007402:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007404:	f7f8 fe88 	bl	8000118 <strlen>
 8007408:	b282      	uxth	r2, r0
 800740a:	2118      	movs	r1, #24
 800740c:	9806      	ldr	r0, [sp, #24]
 800740e:	f7fe fc01 	bl	8005c14 <SendMessageToModule>
									osDelay(10); 
 8007412:	200a      	movs	r0, #10
 8007414:	f006 f88f 	bl	800d536 <osDelay>
 8007418:	e7db      	b.n	80073d2 <PxMessagingTask+0x68a>
 800741a:	4654      	mov	r4, sl
 800741c:	9708      	str	r7, [sp, #32]
 800741e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8007420:	2232      	movs	r2, #50	; 0x32
 8007422:	2100      	movs	r1, #0
 8007424:	482b      	ldr	r0, [pc, #172]	; (80074d4 <PxMessagingTask+0x78c>)
 8007426:	f00b fceb 	bl	8012e00 <memset>
							break;
 800742a:	2300      	movs	r3, #0
 800742c:	4699      	mov	r9, r3
 800742e:	e4bb      	b.n	8006da8 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8007430:	f006 f996 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 8007434:	0007      	movs	r7, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8007436:	f7f8 fe6f 	bl	8000118 <strlen>
 800743a:	0002      	movs	r2, r0
 800743c:	2100      	movs	r1, #0
 800743e:	0038      	movs	r0, r7
 8007440:	f00b fcde 	bl	8012e00 <memset>
							if (longMessage) {
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <PxMessagingTask+0x774>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d012      	beq.n	8007472 <PxMessagingTask+0x72a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <PxMessagingTask+0x778>)
 800744e:	469a      	mov	sl, r3
 8007450:	8818      	ldrh	r0, [r3, #0]
 8007452:	1838      	adds	r0, r7, r0
 8007454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007456:	469c      	mov	ip, r3
 8007458:	4465      	add	r5, ip
 800745a:	4913      	ldr	r1, [pc, #76]	; (80074a8 <PxMessagingTask+0x760>)
 800745c:	1869      	adds	r1, r5, r1
 800745e:	464a      	mov	r2, r9
 8007460:	f00b fcc5 	bl	8012dee <memcpy>
								longMessageLastPtr += numOfParams;
 8007464:	4653      	mov	r3, sl
 8007466:	881a      	ldrh	r2, [r3, #0]
 8007468:	444a      	add	r2, r9
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	2300      	movs	r3, #0
 800746e:	4699      	mov	r9, r3
 8007470:	e49a      	b.n	8006da8 <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <PxMessagingTask+0x778>)
 8007474:	469a      	mov	sl, r3
 8007476:	8818      	ldrh	r0, [r3, #0]
 8007478:	1838      	adds	r0, r7, r0
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	469c      	mov	ip, r3
 800747e:	4465      	add	r5, ip
 8007480:	4909      	ldr	r1, [pc, #36]	; (80074a8 <PxMessagingTask+0x760>)
 8007482:	1869      	adds	r1, r5, r1
 8007484:	464a      	mov	r2, r9
 8007486:	f00b fcb2 	bl	8012dee <memcpy>
								longMessageLastPtr = 0;
 800748a:	2500      	movs	r5, #0
 800748c:	4653      	mov	r3, sl
 800748e:	801d      	strh	r5, [r3, #0]
								responseStatus = BOS_OK;
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <PxMessagingTask+0x768>)
 8007492:	701d      	strb	r5, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8007494:	002b      	movs	r3, r5
 8007496:	002a      	movs	r2, r5
 8007498:	0029      	movs	r1, r5
 800749a:	4811      	ldr	r0, [pc, #68]	; (80074e0 <PxMessagingTask+0x798>)
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f007 fc69 	bl	800ed74 <xTaskGenericNotify>
 80074a2:	46a9      	mov	r9, r5
 80074a4:	e480      	b.n	8006da8 <PxMessagingTask+0x60>
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	20000d48 	.word	0x20000d48
 80074ac:	200011e0 	.word	0x200011e0
 80074b0:	200012c0 	.word	0x200012c0
 80074b4:	200011c8 	.word	0x200011c8
 80074b8:	20001094 	.word	0x20001094
 80074bc:	20000f3b 	.word	0x20000f3b
 80074c0:	20000f3c 	.word	0x20000f3c
 80074c4:	20000f40 	.word	0x20000f40
 80074c8:	2000001c 	.word	0x2000001c
 80074cc:	20000a30 	.word	0x20000a30
 80074d0:	20000f3a 	.word	0x20000f3a
 80074d4:	20000d14 	.word	0x20000d14
 80074d8:	20000a2f 	.word	0x20000a2f
 80074dc:	20006894 	.word	0x20006894
 80074e0:	20001628 	.word	0x20001628
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80074e4:	4be4      	ldr	r3, [pc, #912]	; (8007878 <PxMessagingTask+0xb30>)
 80074e6:	4ae5      	ldr	r2, [pc, #916]	; (800787c <PxMessagingTask+0xb34>)
 80074e8:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 80074ea:	4be5      	ldr	r3, [pc, #916]	; (8007880 <PxMessagingTask+0xb38>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 80074f0:	200a      	movs	r0, #10
 80074f2:	f006 f820 	bl	800d536 <osDelay>
								NVIC_SystemReset();												
 80074f6:	f7fb fd4b 	bl	8002f90 <NVIC_SystemReset>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 80074fa:	4fe2      	ldr	r7, [pc, #904]	; (8007884 <PxMessagingTask+0xb3c>)
 80074fc:	19bf      	adds	r7, r7, r6
 80074fe:	5d78      	ldrb	r0, [r7, r5]
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	3319      	adds	r3, #25
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	f7fd fd27 	bl	8004f5c <SendMessageFromPort>
								osDelay(100);
 800750e:	2064      	movs	r0, #100	; 0x64
 8007510:	f006 f811 	bl	800d536 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8007514:	5d7b      	ldrb	r3, [r7, r5]
 8007516:	4adc      	ldr	r2, [pc, #880]	; (8007888 <PxMessagingTask+0xb40>)
 8007518:	7811      	ldrb	r1, [r2, #0]
 800751a:	9a07      	ldr	r2, [sp, #28]
 800751c:	9806      	ldr	r0, [sp, #24]
 800751e:	f7ff fadb 	bl	8006ad8 <remoteBootloaderUpdate>
								break;
 8007522:	2300      	movs	r3, #0
 8007524:	4699      	mov	r9, r3
 8007526:	e43f      	b.n	8006da8 <PxMessagingTask+0x60>
							temp = cMessage[port-1][11+shift];
 8007528:	002f      	movs	r7, r5
 800752a:	230b      	movs	r3, #11
 800752c:	469a      	mov	sl, r3
 800752e:	44aa      	add	sl, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8007530:	464b      	mov	r3, r9
 8007532:	2b0f      	cmp	r3, #15
 8007534:	d011      	beq.n	800755a <PxMessagingTask+0x812>
							temp = cMessage[port-1][11+shift];
 8007536:	2238      	movs	r2, #56	; 0x38
 8007538:	4362      	muls	r2, r4
 800753a:	4bd2      	ldr	r3, [pc, #840]	; (8007884 <PxMessagingTask+0xb3c>)
 800753c:	189b      	adds	r3, r3, r2
 800753e:	4652      	mov	r2, sl
 8007540:	5c9b      	ldrb	r3, [r3, r2]
 8007542:	930a      	str	r3, [sp, #40]	; 0x28
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8007544:	464b      	mov	r3, r9
 8007546:	2b11      	cmp	r3, #17
 8007548:	d10e      	bne.n	8007568 <PxMessagingTask+0x820>
 800754a:	2238      	movs	r2, #56	; 0x38
 800754c:	4362      	muls	r2, r4
 800754e:	4bcd      	ldr	r3, [pc, #820]	; (8007884 <PxMessagingTask+0xb3c>)
 8007550:	189b      	adds	r3, r3, r2
 8007552:	195b      	adds	r3, r3, r5
 8007554:	7bdb      	ldrb	r3, [r3, #15]
 8007556:	930a      	str	r3, [sp, #40]	; 0x28
 8007558:	e006      	b.n	8007568 <PxMessagingTask+0x820>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800755a:	2238      	movs	r2, #56	; 0x38
 800755c:	4362      	muls	r2, r4
 800755e:	4bc9      	ldr	r3, [pc, #804]	; (8007884 <PxMessagingTask+0xb3c>)
 8007560:	189b      	adds	r3, r3, r2
 8007562:	195d      	adds	r5, r3, r5
 8007564:	7b6b      	ldrb	r3, [r5, #13]
 8007566:	930a      	str	r3, [sp, #40]	; 0x28
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8007568:	1c78      	adds	r0, r7, #1
 800756a:	9008      	str	r0, [sp, #32]
 800756c:	1cbd      	adds	r5, r7, #2
 800756e:	950d      	str	r5, [sp, #52]	; 0x34
 8007570:	1cf9      	adds	r1, r7, #3
 8007572:	910e      	str	r1, [sp, #56]	; 0x38
 8007574:	4bc3      	ldr	r3, [pc, #780]	; (8007884 <PxMessagingTask+0xb3c>)
 8007576:	199b      	adds	r3, r3, r6
 8007578:	5dda      	ldrb	r2, [r3, r7]
 800757a:	0612      	lsls	r2, r2, #24
 800757c:	5c59      	ldrb	r1, [r3, r1]
 800757e:	1852      	adds	r2, r2, r1
 8007580:	5c19      	ldrb	r1, [r3, r0]
 8007582:	0409      	lsls	r1, r1, #16
 8007584:	1852      	adds	r2, r2, r1
 8007586:	5d59      	ldrb	r1, [r3, r5]
 8007588:	0209      	lsls	r1, r1, #8
 800758a:	1852      	adds	r2, r2, r1
 800758c:	920c      	str	r2, [sp, #48]	; 0x30
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800758e:	1d3a      	adds	r2, r7, #4
 8007590:	920f      	str	r2, [sp, #60]	; 0x3c
 8007592:	1d79      	adds	r1, r7, #5
 8007594:	468c      	mov	ip, r1
 8007596:	1db9      	adds	r1, r7, #6
 8007598:	1df8      	adds	r0, r7, #7
 800759a:	5c9d      	ldrb	r5, [r3, r2]
 800759c:	062d      	lsls	r5, r5, #24
 800759e:	4662      	mov	r2, ip
 80075a0:	5c9a      	ldrb	r2, [r3, r2]
 80075a2:	0412      	lsls	r2, r2, #16
 80075a4:	18aa      	adds	r2, r5, r2
 80075a6:	5c1d      	ldrb	r5, [r3, r0]
 80075a8:	1952      	adds	r2, r2, r5
 80075aa:	5c5d      	ldrb	r5, [r3, r1]
 80075ac:	022d      	lsls	r5, r5, #8
 80075ae:	1955      	adds	r5, r2, r5
							if (temp == false)
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d15b      	bne.n	800766e <PxMessagingTask+0x926>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 80075b6:	4bb3      	ldr	r3, [pc, #716]	; (8007884 <PxMessagingTask+0xb3c>)
 80075b8:	199b      	adds	r3, r3, r6
 80075ba:	19db      	adds	r3, r3, r7
 80075bc:	7a5b      	ldrb	r3, [r3, #9]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <PxMessagingTask+0x88a>
 80075c2:	2138      	movs	r1, #56	; 0x38
 80075c4:	4361      	muls	r1, r4
 80075c6:	4aaf      	ldr	r2, [pc, #700]	; (8007884 <PxMessagingTask+0xb3c>)
 80075c8:	1852      	adds	r2, r2, r1
 80075ca:	19d2      	adds	r2, r2, r7
 80075cc:	7a91      	ldrb	r1, [r2, #10]
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d125      	bne.n	800761e <PxMessagingTask+0x8d6>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 80075d2:	4bac      	ldr	r3, [pc, #688]	; (8007884 <PxMessagingTask+0xb3c>)
 80075d4:	199b      	adds	r3, r3, r6
 80075d6:	4652      	mov	r2, sl
 80075d8:	5c9b      	ldrb	r3, [r3, r2]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <PxMessagingTask+0x8a6>
 80075de:	2138      	movs	r1, #56	; 0x38
 80075e0:	4361      	muls	r1, r4
 80075e2:	4aa8      	ldr	r2, [pc, #672]	; (8007884 <PxMessagingTask+0xb3c>)
 80075e4:	1852      	adds	r2, r2, r1
 80075e6:	19d2      	adds	r2, r2, r7
 80075e8:	7b11      	ldrb	r1, [r2, #12]
 80075ea:	2900      	cmp	r1, #0
 80075ec:	d123      	bne.n	8007636 <PxMessagingTask+0x8ee>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 80075ee:	4ba5      	ldr	r3, [pc, #660]	; (8007884 <PxMessagingTask+0xb3c>)
 80075f0:	199b      	adds	r3, r3, r6
 80075f2:	19db      	adds	r3, r3, r7
 80075f4:	7b5b      	ldrb	r3, [r3, #13]
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	2200      	movs	r2, #0
 80075fa:	4691      	mov	r9, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <PxMessagingTask+0x8bc>
 8007600:	f7ff fbd2 	bl	8006da8 <PxMessagingTask+0x60>
 8007604:	3238      	adds	r2, #56	; 0x38
 8007606:	4362      	muls	r2, r4
 8007608:	4b9e      	ldr	r3, [pc, #632]	; (8007884 <PxMessagingTask+0xb3c>)
 800760a:	189b      	adds	r3, r3, r2
 800760c:	19db      	adds	r3, r3, r7
 800760e:	7b9a      	ldrb	r2, [r3, #14]
 8007610:	454a      	cmp	r2, r9
 8007612:	d11c      	bne.n	800764e <PxMessagingTask+0x906>
 8007614:	9208      	str	r2, [sp, #32]
 8007616:	2300      	movs	r3, #0
 8007618:	4699      	mov	r9, r3
 800761a:	f7ff fbc5 	bl	8006da8 <PxMessagingTask+0x60>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800761e:	2038      	movs	r0, #56	; 0x38
 8007620:	4360      	muls	r0, r4
 8007622:	4a98      	ldr	r2, [pc, #608]	; (8007884 <PxMessagingTask+0xb3c>)
 8007624:	1812      	adds	r2, r2, r0
 8007626:	19d2      	adds	r2, r2, r7
 8007628:	7a10      	ldrb	r0, [r2, #8]
 800762a:	9100      	str	r1, [sp, #0]
 800762c:	002a      	movs	r2, r5
 800762e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007630:	f7fd f920 	bl	8004874 <SetupDMAStreams>
 8007634:	e7cd      	b.n	80075d2 <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8007636:	2038      	movs	r0, #56	; 0x38
 8007638:	4360      	muls	r0, r4
 800763a:	4a92      	ldr	r2, [pc, #584]	; (8007884 <PxMessagingTask+0xb3c>)
 800763c:	1812      	adds	r2, r2, r0
 800763e:	19d2      	adds	r2, r2, r7
 8007640:	7a10      	ldrb	r0, [r2, #8]
 8007642:	9100      	str	r1, [sp, #0]
 8007644:	002a      	movs	r2, r5
 8007646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007648:	f7fd f914 	bl	8004874 <SetupDMAStreams>
 800764c:	e7cf      	b.n	80075ee <PxMessagingTask+0x8a6>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800764e:	2138      	movs	r1, #56	; 0x38
 8007650:	4361      	muls	r1, r4
 8007652:	4b8c      	ldr	r3, [pc, #560]	; (8007884 <PxMessagingTask+0xb3c>)
 8007654:	185b      	adds	r3, r3, r1
 8007656:	19df      	adds	r7, r3, r7
 8007658:	7a38      	ldrb	r0, [r7, #8]
 800765a:	9200      	str	r2, [sp, #0]
 800765c:	9b08      	ldr	r3, [sp, #32]
 800765e:	002a      	movs	r2, r5
 8007660:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007662:	f7fd f907 	bl	8004874 <SetupDMAStreams>
 8007666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	f7ff fb9d 	bl	8006da8 <PxMessagingTask+0x60>
 800766e:	9705      	str	r7, [sp, #20]
 8007670:	4663      	mov	r3, ip
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	468b      	mov	fp, r1
 8007676:	4680      	mov	r8, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8007678:	2338      	movs	r3, #56	; 0x38
 800767a:	4363      	muls	r3, r4
 800767c:	4d81      	ldr	r5, [pc, #516]	; (8007884 <PxMessagingTask+0xb3c>)
 800767e:	18ed      	adds	r5, r5, r3
 8007680:	19ee      	adds	r6, r5, r7
 8007682:	7a31      	ldrb	r1, [r6, #8]
 8007684:	20e4      	movs	r0, #228	; 0xe4
 8007686:	f003 f9ad 	bl	800a9e4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800768a:	5deb      	ldrb	r3, [r5, r7]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	9f08      	ldr	r7, [sp, #32]
 8007690:	5de9      	ldrb	r1, [r5, r7]
 8007692:	18c9      	adds	r1, r1, r3
 8007694:	b289      	uxth	r1, r1
 8007696:	20e5      	movs	r0, #229	; 0xe5
 8007698:	f003 f9a4 	bl	800a9e4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800769c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800769e:	5deb      	ldrb	r3, [r5, r7]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80076a4:	5de9      	ldrb	r1, [r5, r7]
 80076a6:	18c9      	adds	r1, r1, r3
 80076a8:	b289      	uxth	r1, r1
 80076aa:	20e6      	movs	r0, #230	; 0xe6
 80076ac:	f003 f99a 	bl	800a9e4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 80076b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80076b2:	5deb      	ldrb	r3, [r5, r7]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	9a06      	ldr	r2, [sp, #24]
 80076b8:	5ca9      	ldrb	r1, [r5, r2]
 80076ba:	18c9      	adds	r1, r1, r3
 80076bc:	b289      	uxth	r1, r1
 80076be:	20e7      	movs	r0, #231	; 0xe7
 80076c0:	f003 f990 	bl	800a9e4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 80076c4:	465b      	mov	r3, fp
 80076c6:	5ceb      	ldrb	r3, [r5, r3]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	4642      	mov	r2, r8
 80076cc:	5ca9      	ldrb	r1, [r5, r2]
 80076ce:	18c9      	adds	r1, r1, r3
 80076d0:	b289      	uxth	r1, r1
 80076d2:	20e8      	movs	r0, #232	; 0xe8
 80076d4:	f003 f986 	bl	800a9e4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 80076d8:	7a73      	ldrb	r3, [r6, #9]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	7ab1      	ldrb	r1, [r6, #10]
 80076de:	18c9      	adds	r1, r1, r3
 80076e0:	b289      	uxth	r1, r1
 80076e2:	20e9      	movs	r0, #233	; 0xe9
 80076e4:	f003 f97e 	bl	800a9e4 <EE_WriteVariable>
								if (numOfParams == 19)
 80076e8:	464b      	mov	r3, r9
 80076ea:	2b13      	cmp	r3, #19
 80076ec:	d003      	beq.n	80076f6 <PxMessagingTask+0x9ae>
								if (numOfParams == 21)
 80076ee:	2b15      	cmp	r3, #21
 80076f0:	d012      	beq.n	8007718 <PxMessagingTask+0x9d0>
								NVIC_SystemReset();
 80076f2:	f7fb fc4d 	bl	8002f90 <NVIC_SystemReset>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 80076f6:	3325      	adds	r3, #37	; 0x25
 80076f8:	4363      	muls	r3, r4
 80076fa:	4c62      	ldr	r4, [pc, #392]	; (8007884 <PxMessagingTask+0xb3c>)
 80076fc:	18e4      	adds	r4, r4, r3
 80076fe:	4653      	mov	r3, sl
 8007700:	5ce3      	ldrb	r3, [r4, r3]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	9a05      	ldr	r2, [sp, #20]
 8007706:	4694      	mov	ip, r2
 8007708:	4464      	add	r4, ip
 800770a:	7b21      	ldrb	r1, [r4, #12]
 800770c:	18c9      	adds	r1, r1, r3
 800770e:	b289      	uxth	r1, r1
 8007710:	20ea      	movs	r0, #234	; 0xea
 8007712:	f003 f967 	bl	800a9e4 <EE_WriteVariable>
 8007716:	e7ec      	b.n	80076f2 <PxMessagingTask+0x9aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 8007718:	3323      	adds	r3, #35	; 0x23
 800771a:	435c      	muls	r4, r3
 800771c:	4b59      	ldr	r3, [pc, #356]	; (8007884 <PxMessagingTask+0xb3c>)
 800771e:	191b      	adds	r3, r3, r4
 8007720:	9a05      	ldr	r2, [sp, #20]
 8007722:	4694      	mov	ip, r2
 8007724:	4463      	add	r3, ip
 8007726:	7b5a      	ldrb	r2, [r3, #13]
 8007728:	0212      	lsls	r2, r2, #8
 800772a:	7b99      	ldrb	r1, [r3, #14]
 800772c:	1889      	adds	r1, r1, r2
 800772e:	b289      	uxth	r1, r1
 8007730:	20eb      	movs	r0, #235	; 0xeb
 8007732:	f003 f957 	bl	800a9e4 <EE_WriteVariable>
 8007736:	e7dc      	b.n	80076f2 <PxMessagingTask+0x9aa>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007738:	4f52      	ldr	r7, [pc, #328]	; (8007884 <PxMessagingTask+0xb3c>)
 800773a:	19bf      	adds	r7, r7, r6
 800773c:	1979      	adds	r1, r7, r5
 800773e:	7a8b      	ldrb	r3, [r1, #10]
 8007740:	930a      	str	r3, [sp, #40]	; 0x28
 8007742:	7aca      	ldrb	r2, [r1, #11]
 8007744:	4850      	ldr	r0, [pc, #320]	; (8007888 <PxMessagingTask+0xb40>)
 8007746:	7800      	ldrb	r0, [r0, #0]
 8007748:	4681      	mov	r9, r0
 800774a:	7a48      	ldrb	r0, [r1, #9]
 800774c:	4682      	mov	sl, r0
 800774e:	7b08      	ldrb	r0, [r1, #12]
 8007750:	1e43      	subs	r3, r0, #1
 8007752:	4198      	sbcs	r0, r3
 8007754:	9003      	str	r0, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8007756:	7908      	ldrb	r0, [r1, #4]
 8007758:	0600      	lsls	r0, r0, #24
 800775a:	4684      	mov	ip, r0
 800775c:	7948      	ldrb	r0, [r1, #5]
 800775e:	0400      	lsls	r0, r0, #16
 8007760:	4460      	add	r0, ip
 8007762:	79cb      	ldrb	r3, [r1, #7]
 8007764:	469c      	mov	ip, r3
 8007766:	4460      	add	r0, ip
 8007768:	798b      	ldrb	r3, [r1, #6]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	469c      	mov	ip, r3
 800776e:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007770:	9002      	str	r0, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8007772:	5d78      	ldrb	r0, [r7, r5]
 8007774:	0600      	lsls	r0, r0, #24
 8007776:	78cd      	ldrb	r5, [r1, #3]
 8007778:	1940      	adds	r0, r0, r5
 800777a:	784d      	ldrb	r5, [r1, #1]
 800777c:	042d      	lsls	r5, r5, #16
 800777e:	1940      	adds	r0, r0, r5
 8007780:	788d      	ldrb	r5, [r1, #2]
 8007782:	022d      	lsls	r5, r5, #8
 8007784:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007786:	9001      	str	r0, [sp, #4]
 8007788:	7a09      	ldrb	r1, [r1, #8]
 800778a:	9100      	str	r1, [sp, #0]
 800778c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778e:	4649      	mov	r1, r9
 8007790:	4650      	mov	r0, sl
 8007792:	f7ff f8d3 	bl	800693c <StartScastDMAStream>
							break;								
 8007796:	2300      	movs	r3, #0
 8007798:	4699      	mov	r9, r3
 800779a:	f7ff fb05 	bl	8006da8 <PxMessagingTask+0x60>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800779e:	4b39      	ldr	r3, [pc, #228]	; (8007884 <PxMessagingTask+0xb3c>)
 80077a0:	199b      	adds	r3, r3, r6
 80077a2:	5d5b      	ldrb	r3, [r3, r5]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d000      	beq.n	80077aa <PxMessagingTask+0xa62>
 80077a8:	e09b      	b.n	80078e2 <PxMessagingTask+0xb9a>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 80077aa:	2238      	movs	r2, #56	; 0x38
 80077ac:	4362      	muls	r2, r4
 80077ae:	4b35      	ldr	r3, [pc, #212]	; (8007884 <PxMessagingTask+0xb3c>)
 80077b0:	189b      	adds	r3, r3, r2
 80077b2:	195d      	adds	r5, r3, r5
 80077b4:	78ab      	ldrb	r3, [r5, #2]
 80077b6:	061b      	lsls	r3, r3, #24
 80077b8:	78ea      	ldrb	r2, [r5, #3]
 80077ba:	0412      	lsls	r2, r2, #16
 80077bc:	189b      	adds	r3, r3, r2
 80077be:	796a      	ldrb	r2, [r5, #5]
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	792a      	ldrb	r2, [r5, #4]
 80077c4:	0212      	lsls	r2, r2, #8
 80077c6:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 80077c8:	786a      	ldrb	r2, [r5, #1]
 80077ca:	3a01      	subs	r2, #1
 80077cc:	b2d1      	uxtb	r1, r2
 80077ce:	2907      	cmp	r1, #7
 80077d0:	d901      	bls.n	80077d6 <PxMessagingTask+0xa8e>
 80077d2:	f000 fd1d 	bl	8008210 <PxMessagingTask+0x14c8>
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	492c      	ldr	r1, [pc, #176]	; (800788c <PxMessagingTask+0xb44>)
 80077dc:	588a      	ldr	r2, [r1, r2]
 80077de:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	4b2b      	ldr	r3, [pc, #172]	; (8007890 <PxMessagingTask+0xb48>)
 80077e4:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80077e6:	2201      	movs	r2, #1
 80077e8:	211f      	movs	r1, #31
 80077ea:	9806      	ldr	r0, [sp, #24]
 80077ec:	f7fe fa12 	bl	8005c14 <SendMessageToModule>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4699      	mov	r9, r3
 80077f4:	f7ff fad8 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO int8_t *)temp32; 
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	4b25      	ldr	r3, [pc, #148]	; (8007890 <PxMessagingTask+0xb48>)
 80077fc:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80077fe:	2201      	movs	r2, #1
 8007800:	211f      	movs	r1, #31
 8007802:	9806      	ldr	r0, [sp, #24]
 8007804:	f7fe fa06 	bl	8005c14 <SendMessageToModule>
 8007808:	2300      	movs	r3, #0
 800780a:	4699      	mov	r9, r3
 800780c:	f7ff facc 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 8007810:	8819      	ldrh	r1, [r3, #0]
 8007812:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <PxMessagingTask+0xb48>)
 8007814:	7011      	strb	r1, [r2, #0]
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800781c:	2202      	movs	r2, #2
 800781e:	211f      	movs	r1, #31
 8007820:	9806      	ldr	r0, [sp, #24]
 8007822:	f7fe f9f7 	bl	8005c14 <SendMessageToModule>
 8007826:	2300      	movs	r3, #0
 8007828:	4699      	mov	r9, r3
 800782a:	f7ff fabd 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800782e:	8819      	ldrh	r1, [r3, #0]
 8007830:	4a17      	ldr	r2, [pc, #92]	; (8007890 <PxMessagingTask+0xb48>)
 8007832:	7011      	strb	r1, [r2, #0]
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b21b      	sxth	r3, r3
 8007838:	121b      	asrs	r3, r3, #8
 800783a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800783c:	2202      	movs	r2, #2
 800783e:	211f      	movs	r1, #31
 8007840:	9806      	ldr	r0, [sp, #24]
 8007842:	f7fe f9e7 	bl	8005c14 <SendMessageToModule>
 8007846:	2300      	movs	r3, #0
 8007848:	4699      	mov	r9, r3
 800784a:	f7ff faad 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	4a0f      	ldr	r2, [pc, #60]	; (8007890 <PxMessagingTask+0xb48>)
 8007852:	7011      	strb	r1, [r2, #0]
 8007854:	6819      	ldr	r1, [r3, #0]
 8007856:	0a09      	lsrs	r1, r1, #8
 8007858:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	0c09      	lsrs	r1, r1, #16
 800785e:	7091      	strb	r1, [r2, #2]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8007866:	2204      	movs	r2, #4
 8007868:	211f      	movs	r1, #31
 800786a:	9806      	ldr	r0, [sp, #24]
 800786c:	f7fe f9d2 	bl	8005c14 <SendMessageToModule>
 8007870:	2300      	movs	r3, #0
 8007872:	4699      	mov	r9, r3
 8007874:	f7ff fa98 	bl	8006da8 <PxMessagingTask+0x60>
 8007878:	20007ff0 	.word	0x20007ff0
 800787c:	deadbeef 	.word	0xdeadbeef
 8007880:	20000f3a 	.word	0x20000f3a
 8007884:	20000d48 	.word	0x20000d48
 8007888:	200011c8 	.word	0x200011c8
 800788c:	080178ac 	.word	0x080178ac
 8007890:	20001094 	.word	0x20001094
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	4aef      	ldr	r2, [pc, #956]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007898:	7011      	strb	r1, [r2, #0]
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	1209      	asrs	r1, r1, #8
 800789e:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	1409      	asrs	r1, r1, #16
 80078a4:	7091      	strb	r1, [r2, #2]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	161b      	asrs	r3, r3, #24
 80078aa:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 80078ac:	2204      	movs	r2, #4
 80078ae:	211f      	movs	r1, #31
 80078b0:	9806      	ldr	r0, [sp, #24]
 80078b2:	f7fe f9af 	bl	8005c14 <SendMessageToModule>
 80078b6:	2300      	movs	r3, #0
 80078b8:	4699      	mov	r9, r3
 80078ba:	f7ff fa75 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 80078be:	7819      	ldrb	r1, [r3, #0]
 80078c0:	4ae4      	ldr	r2, [pc, #912]	; (8007c54 <PxMessagingTask+0xf0c>)
 80078c2:	7011      	strb	r1, [r2, #0]
 80078c4:	7859      	ldrb	r1, [r3, #1]
 80078c6:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 80078c8:	7899      	ldrb	r1, [r3, #2]
 80078ca:	7091      	strb	r1, [r2, #2]
 80078cc:	78db      	ldrb	r3, [r3, #3]
 80078ce:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 80078d0:	2208      	movs	r2, #8
 80078d2:	211f      	movs	r1, #31
 80078d4:	9806      	ldr	r0, [sp, #24]
 80078d6:	f7fe f99d 	bl	8005c14 <SendMessageToModule>
 80078da:	2300      	movs	r3, #0
 80078dc:	4699      	mov	r9, r3
 80078de:	f7ff fa63 	bl	8006da8 <PxMessagingTask+0x60>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d01f      	beq.n	8007926 <PxMessagingTask+0xbde>
									}
 80078e6:	2200      	movs	r2, #0
 80078e8:	4691      	mov	r9, r2
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d801      	bhi.n	80078f2 <PxMessagingTask+0xbaa>
 80078ee:	f7ff fa5b 	bl	8006da8 <PxMessagingTask+0x60>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 80078f2:	3b04      	subs	r3, #4
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4ad8      	ldr	r2, [pc, #864]	; (8007c58 <PxMessagingTask+0xf10>)
 80078f8:	5899      	ldr	r1, [r3, r2]
 80078fa:	220f      	movs	r2, #15
 80078fc:	400a      	ands	r2, r1
 80078fe:	4bd5      	ldr	r3, [pc, #852]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007900:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 8007902:	454a      	cmp	r2, r9
 8007904:	d100      	bne.n	8007908 <PxMessagingTask+0xbc0>
 8007906:	e0b0      	b.n	8007a6a <PxMessagingTask+0xd22>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8007908:	0c09      	lsrs	r1, r1, #16
 800790a:	2380      	movs	r3, #128	; 0x80
 800790c:	059b      	lsls	r3, r3, #22
 800790e:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 8007910:	3a01      	subs	r2, #1
 8007912:	b2d0      	uxtb	r0, r2
 8007914:	2807      	cmp	r0, #7
 8007916:	d901      	bls.n	800791c <PxMessagingTask+0xbd4>
 8007918:	f000 fc82 	bl	8008220 <PxMessagingTask+0x14d8>
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	48ce      	ldr	r0, [pc, #824]	; (8007c5c <PxMessagingTask+0xf14>)
 8007922:	5882      	ldr	r2, [r0, r2]
 8007924:	4697      	mov	pc, r2
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 8007926:	4bce      	ldr	r3, [pc, #824]	; (8007c60 <PxMessagingTask+0xf18>)
 8007928:	2038      	movs	r0, #56	; 0x38
 800792a:	4360      	muls	r0, r4
 800792c:	1818      	adds	r0, r3, r0
 800792e:	1841      	adds	r1, r0, r1
 8007930:	3901      	subs	r1, #1
 8007932:	2000      	movs	r0, #0
 8007934:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8007936:	1c68      	adds	r0, r5, #1
 8007938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800793a:	4694      	mov	ip, r2
 800793c:	4460      	add	r0, ip
 800793e:	18c0      	adds	r0, r0, r3
 8007940:	f7fc fe34 	bl	80045ac <IsModuleParameter>
 8007944:	9008      	str	r0, [sp, #32]
									if (temp == 0) {																					// Parameter does not exist
 8007946:	2800      	cmp	r0, #0
 8007948:	d013      	beq.n	8007972 <PxMessagingTask+0xc2a>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800794a:	3801      	subs	r0, #1
 800794c:	4ac5      	ldr	r2, [pc, #788]	; (8007c64 <PxMessagingTask+0xf1c>)
 800794e:	210c      	movs	r1, #12
 8007950:	4341      	muls	r1, r0
 8007952:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8007954:	1852      	adds	r2, r2, r1
 8007956:	7912      	ldrb	r2, [r2, #4]
 8007958:	49be      	ldr	r1, [pc, #760]	; (8007c54 <PxMessagingTask+0xf0c>)
 800795a:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800795c:	3a01      	subs	r2, #1
 800795e:	b2d1      	uxtb	r1, r2
 8007960:	2907      	cmp	r1, #7
 8007962:	d901      	bls.n	8007968 <PxMessagingTask+0xc20>
 8007964:	f000 fc58 	bl	8008218 <PxMessagingTask+0x14d0>
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	49be      	ldr	r1, [pc, #760]	; (8007c68 <PxMessagingTask+0xf20>)
 800796e:	588a      	ldr	r2, [r1, r2]
 8007970:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8007972:	2201      	movs	r2, #1
 8007974:	211f      	movs	r1, #31
 8007976:	9806      	ldr	r0, [sp, #24]
 8007978:	f7fe f94c 	bl	8005c14 <SendMessageToModule>
 800797c:	2300      	movs	r3, #0
 800797e:	4699      	mov	r9, r3
 8007980:	f7ff fa12 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	4bb3      	ldr	r3, [pc, #716]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007988:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800798a:	2202      	movs	r2, #2
 800798c:	211f      	movs	r1, #31
 800798e:	9806      	ldr	r0, [sp, #24]
 8007990:	f7fe f940 	bl	8005c14 <SendMessageToModule>
 8007994:	2300      	movs	r3, #0
 8007996:	4699      	mov	r9, r3
 8007998:	f7ff fa06 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	4bad      	ldr	r3, [pc, #692]	; (8007c54 <PxMessagingTask+0xf0c>)
 80079a0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 80079a2:	2202      	movs	r2, #2
 80079a4:	211f      	movs	r1, #31
 80079a6:	9806      	ldr	r0, [sp, #24]
 80079a8:	f7fe f934 	bl	8005c14 <SendMessageToModule>
 80079ac:	2300      	movs	r3, #0
 80079ae:	4699      	mov	r9, r3
 80079b0:	f7ff f9fa 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 80079b4:	8819      	ldrh	r1, [r3, #0]
 80079b6:	4aa7      	ldr	r2, [pc, #668]	; (8007c54 <PxMessagingTask+0xf0c>)
 80079b8:	7051      	strb	r1, [r2, #1]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	0a1b      	lsrs	r3, r3, #8
 80079be:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 80079c0:	2203      	movs	r2, #3
 80079c2:	211f      	movs	r1, #31
 80079c4:	9806      	ldr	r0, [sp, #24]
 80079c6:	f7fe f925 	bl	8005c14 <SendMessageToModule>
 80079ca:	2300      	movs	r3, #0
 80079cc:	4699      	mov	r9, r3
 80079ce:	f7ff f9eb 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 80079d2:	8819      	ldrh	r1, [r3, #0]
 80079d4:	4a9f      	ldr	r2, [pc, #636]	; (8007c54 <PxMessagingTask+0xf0c>)
 80079d6:	7051      	strb	r1, [r2, #1]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b21b      	sxth	r3, r3
 80079dc:	121b      	asrs	r3, r3, #8
 80079de:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 80079e0:	2203      	movs	r2, #3
 80079e2:	211f      	movs	r1, #31
 80079e4:	9806      	ldr	r0, [sp, #24]
 80079e6:	f7fe f915 	bl	8005c14 <SendMessageToModule>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4699      	mov	r9, r3
 80079ee:	f7ff f9db 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	4a97      	ldr	r2, [pc, #604]	; (8007c54 <PxMessagingTask+0xf0c>)
 80079f6:	7051      	strb	r1, [r2, #1]
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	0a09      	lsrs	r1, r1, #8
 80079fc:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 80079fe:	6819      	ldr	r1, [r3, #0]
 8007a00:	0c09      	lsrs	r1, r1, #16
 8007a02:	70d1      	strb	r1, [r2, #3]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	0e1b      	lsrs	r3, r3, #24
 8007a08:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	211f      	movs	r1, #31
 8007a0e:	9806      	ldr	r0, [sp, #24]
 8007a10:	f7fe f900 	bl	8005c14 <SendMessageToModule>
 8007a14:	2300      	movs	r3, #0
 8007a16:	4699      	mov	r9, r3
 8007a18:	f7ff f9c6 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	4a8d      	ldr	r2, [pc, #564]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007a20:	7051      	strb	r1, [r2, #1]
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	1209      	asrs	r1, r1, #8
 8007a26:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8007a28:	6819      	ldr	r1, [r3, #0]
 8007a2a:	1409      	asrs	r1, r1, #16
 8007a2c:	70d1      	strb	r1, [r2, #3]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	161b      	asrs	r3, r3, #24
 8007a32:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8007a34:	2205      	movs	r2, #5
 8007a36:	211f      	movs	r1, #31
 8007a38:	9806      	ldr	r0, [sp, #24]
 8007a3a:	f7fe f8eb 	bl	8005c14 <SendMessageToModule>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4699      	mov	r9, r3
 8007a42:	f7ff f9b1 	bl	8006da8 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8007a46:	7819      	ldrb	r1, [r3, #0]
 8007a48:	4a82      	ldr	r2, [pc, #520]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007a4a:	7051      	strb	r1, [r2, #1]
 8007a4c:	7859      	ldrb	r1, [r3, #1]
 8007a4e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8007a50:	7899      	ldrb	r1, [r3, #2]
 8007a52:	70d1      	strb	r1, [r2, #3]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007a58:	2209      	movs	r2, #9
 8007a5a:	211f      	movs	r1, #31
 8007a5c:	9806      	ldr	r0, [sp, #24]
 8007a5e:	f7fe f8d9 	bl	8005c14 <SendMessageToModule>
 8007a62:	2300      	movs	r3, #0
 8007a64:	4699      	mov	r9, r3
 8007a66:	f7ff f99f 	bl	8006da8 <PxMessagingTask+0x60>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	211f      	movs	r1, #31
 8007a6e:	9806      	ldr	r0, [sp, #24]
 8007a70:	f7fe f8d0 	bl	8005c14 <SendMessageToModule>
 8007a74:	f7ff f998 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	4b76      	ldr	r3, [pc, #472]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007a7c:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007a7e:	2202      	movs	r2, #2
 8007a80:	211f      	movs	r1, #31
 8007a82:	9806      	ldr	r0, [sp, #24]
 8007a84:	f7fe f8c6 	bl	8005c14 <SendMessageToModule>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4699      	mov	r9, r3
 8007a8c:	f7ff f98c 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	4b70      	ldr	r3, [pc, #448]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007a94:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007a96:	2202      	movs	r2, #2
 8007a98:	211f      	movs	r1, #31
 8007a9a:	9806      	ldr	r0, [sp, #24]
 8007a9c:	f7fe f8ba 	bl	8005c14 <SendMessageToModule>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	f7ff f980 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8007aa8:	8819      	ldrh	r1, [r3, #0]
 8007aaa:	4a6a      	ldr	r2, [pc, #424]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007aac:	7051      	strb	r1, [r2, #1]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	0a1b      	lsrs	r3, r3, #8
 8007ab2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	211f      	movs	r1, #31
 8007ab8:	9806      	ldr	r0, [sp, #24]
 8007aba:	f7fe f8ab 	bl	8005c14 <SendMessageToModule>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4699      	mov	r9, r3
 8007ac2:	f7ff f971 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8007ac6:	8819      	ldrh	r1, [r3, #0]
 8007ac8:	4a62      	ldr	r2, [pc, #392]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007aca:	7051      	strb	r1, [r2, #1]
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b21b      	sxth	r3, r3
 8007ad0:	121b      	asrs	r3, r3, #8
 8007ad2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	211f      	movs	r1, #31
 8007ad8:	9806      	ldr	r0, [sp, #24]
 8007ada:	f7fe f89b 	bl	8005c14 <SendMessageToModule>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4699      	mov	r9, r3
 8007ae2:	f7ff f961 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	4a5a      	ldr	r2, [pc, #360]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007aea:	7051      	strb	r1, [r2, #1]
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	0a09      	lsrs	r1, r1, #8
 8007af0:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	0c09      	lsrs	r1, r1, #16
 8007af6:	70d1      	strb	r1, [r2, #3]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	0e1b      	lsrs	r3, r3, #24
 8007afc:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8007afe:	2205      	movs	r2, #5
 8007b00:	211f      	movs	r1, #31
 8007b02:	9806      	ldr	r0, [sp, #24]
 8007b04:	f7fe f886 	bl	8005c14 <SendMessageToModule>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	f7ff f94c 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	4a50      	ldr	r2, [pc, #320]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007b14:	7051      	strb	r1, [r2, #1]
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	1209      	asrs	r1, r1, #8
 8007b1a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8007b1c:	6819      	ldr	r1, [r3, #0]
 8007b1e:	1409      	asrs	r1, r1, #16
 8007b20:	70d1      	strb	r1, [r2, #3]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	161b      	asrs	r3, r3, #24
 8007b26:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8007b28:	2205      	movs	r2, #5
 8007b2a:	211f      	movs	r1, #31
 8007b2c:	9806      	ldr	r0, [sp, #24]
 8007b2e:	f7fe f871 	bl	8005c14 <SendMessageToModule>
 8007b32:	2300      	movs	r3, #0
 8007b34:	4699      	mov	r9, r3
 8007b36:	f7ff f937 	bl	8006da8 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	4b45      	ldr	r3, [pc, #276]	; (8007c54 <PxMessagingTask+0xf0c>)
 8007b3e:	705a      	strb	r2, [r3, #1]
 8007b40:	4a4a      	ldr	r2, [pc, #296]	; (8007c6c <PxMessagingTask+0xf24>)
 8007b42:	188a      	adds	r2, r1, r2
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8007b48:	4a49      	ldr	r2, [pc, #292]	; (8007c70 <PxMessagingTask+0xf28>)
 8007b4a:	188a      	adds	r2, r1, r2
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	70da      	strb	r2, [r3, #3]
 8007b50:	4a48      	ldr	r2, [pc, #288]	; (8007c74 <PxMessagingTask+0xf2c>)
 8007b52:	4694      	mov	ip, r2
 8007b54:	4461      	add	r1, ip
 8007b56:	780a      	ldrb	r2, [r1, #0]
 8007b58:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007b5a:	2209      	movs	r2, #9
 8007b5c:	211f      	movs	r1, #31
 8007b5e:	9806      	ldr	r0, [sp, #24]
 8007b60:	f7fe f858 	bl	8005c14 <SendMessageToModule>
 8007b64:	2300      	movs	r3, #0
 8007b66:	4699      	mov	r9, r3
 8007b68:	f7ff f91e 	bl	8006da8 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007b6c:	4b42      	ldr	r3, [pc, #264]	; (8007c78 <PxMessagingTask+0xf30>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2002      	movs	r0, #2
 8007b74:	4240      	negs	r0, r0
 8007b76:	17c1      	asrs	r1, r0, #31
 8007b78:	1812      	adds	r2, r2, r0
 8007b7a:	414b      	adcs	r3, r1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <PxMessagingTask+0xe4e>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8007b80:	4b3e      	ldr	r3, [pc, #248]	; (8007c7c <PxMessagingTask+0xf34>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b10      	cmp	r3, #16
 8007b86:	d100      	bne.n	8007b8a <PxMessagingTask+0xe42>
 8007b88:	e35b      	b.n	8008242 <PxMessagingTask+0x14fa>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	4b3b      	ldr	r3, [pc, #236]	; (8007c7c <PxMessagingTask+0xf34>)
 8007b8e:	701d      	strb	r5, [r3, #0]
 8007b90:	46a9      	mov	r9, r5
 8007b92:	f7ff f909 	bl	8006da8 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <PxMessagingTask+0xe56>
 8007b9a:	2a01      	cmp	r2, #1
 8007b9c:	d8f0      	bhi.n	8007b80 <PxMessagingTask+0xe38>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 8007b9e:	2238      	movs	r2, #56	; 0x38
 8007ba0:	4362      	muls	r2, r4
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <PxMessagingTask+0xf18>)
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	5d5b      	ldrb	r3, [r3, r5]
 8007ba8:	4a35      	ldr	r2, [pc, #212]	; (8007c80 <PxMessagingTask+0xf38>)
 8007baa:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d8e7      	bhi.n	8007b80 <PxMessagingTask+0xe38>
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4a34      	ldr	r2, [pc, #208]	; (8007c84 <PxMessagingTask+0xf3c>)
 8007bb4:	58d3      	ldr	r3, [r2, r3]
 8007bb6:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8007bb8:	4b30      	ldr	r3, [pc, #192]	; (8007c7c <PxMessagingTask+0xf34>)
 8007bba:	2210      	movs	r2, #16
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	f7ff f8f1 	bl	8006da8 <PxMessagingTask+0x60>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8007bc6:	4b2c      	ldr	r3, [pc, #176]	; (8007c78 <PxMessagingTask+0xf30>)
 8007bc8:	2238      	movs	r2, #56	; 0x38
 8007bca:	4362      	muls	r2, r4
 8007bcc:	4924      	ldr	r1, [pc, #144]	; (8007c60 <PxMessagingTask+0xf18>)
 8007bce:	1889      	adds	r1, r1, r2
 8007bd0:	1949      	adds	r1, r1, r5
 8007bd2:	784a      	ldrb	r2, [r1, #1]
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	e7d1      	b.n	8007b80 <PxMessagingTask+0xe38>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <PxMessagingTask+0xf30>)
 8007bde:	2238      	movs	r2, #56	; 0x38
 8007be0:	4362      	muls	r2, r4
 8007be2:	491f      	ldr	r1, [pc, #124]	; (8007c60 <PxMessagingTask+0xf18>)
 8007be4:	1889      	adds	r1, r1, r2
 8007be6:	1949      	adds	r1, r1, r5
 8007be8:	2201      	movs	r2, #1
 8007bea:	568a      	ldrsb	r2, [r1, r2]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	17d2      	asrs	r2, r2, #31
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	e7c5      	b.n	8007b80 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 8007bf4:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <PxMessagingTask+0xf30>)
 8007bf6:	2338      	movs	r3, #56	; 0x38
 8007bf8:	4363      	muls	r3, r4
 8007bfa:	4919      	ldr	r1, [pc, #100]	; (8007c60 <PxMessagingTask+0xf18>)
 8007bfc:	18c9      	adds	r1, r1, r3
 8007bfe:	1949      	adds	r1, r1, r5
 8007c00:	788b      	ldrb	r3, [r1, #2]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	7849      	ldrb	r1, [r1, #1]
 8007c06:	185b      	adds	r3, r3, r1
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	17db      	asrs	r3, r3, #31
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	e7b7      	b.n	8007b80 <PxMessagingTask+0xe38>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 8007c10:	4a19      	ldr	r2, [pc, #100]	; (8007c78 <PxMessagingTask+0xf30>)
 8007c12:	2338      	movs	r3, #56	; 0x38
 8007c14:	4363      	muls	r3, r4
 8007c16:	4912      	ldr	r1, [pc, #72]	; (8007c60 <PxMessagingTask+0xf18>)
 8007c18:	18c9      	adds	r1, r1, r3
 8007c1a:	1949      	adds	r1, r1, r5
 8007c1c:	788b      	ldrb	r3, [r1, #2]
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	7849      	ldrb	r1, [r1, #1]
 8007c22:	185b      	adds	r3, r3, r1
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	17db      	asrs	r3, r3, #31
 8007c28:	6053      	str	r3, [r2, #4]
 8007c2a:	e7a9      	b.n	8007b80 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8007c2c:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <PxMessagingTask+0xf30>)
 8007c2e:	2338      	movs	r3, #56	; 0x38
 8007c30:	4363      	muls	r3, r4
 8007c32:	490b      	ldr	r1, [pc, #44]	; (8007c60 <PxMessagingTask+0xf18>)
 8007c34:	18c9      	adds	r1, r1, r3
 8007c36:	1949      	adds	r1, r1, r5
 8007c38:	788b      	ldrb	r3, [r1, #2]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	78c8      	ldrb	r0, [r1, #3]
 8007c3e:	0400      	lsls	r0, r0, #16
 8007c40:	181b      	adds	r3, r3, r0
 8007c42:	7848      	ldrb	r0, [r1, #1]
 8007c44:	181b      	adds	r3, r3, r0
 8007c46:	7909      	ldrb	r1, [r1, #4]
 8007c48:	0609      	lsls	r1, r1, #24
 8007c4a:	185b      	adds	r3, r3, r1
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6053      	str	r3, [r2, #4]
 8007c52:	e795      	b.n	8007b80 <PxMessagingTask+0xe38>
 8007c54:	20001094 	.word	0x20001094
 8007c58:	2000681c 	.word	0x2000681c
 8007c5c:	080178cc 	.word	0x080178cc
 8007c60:	20000d48 	.word	0x20000d48
 8007c64:	20000040 	.word	0x20000040
 8007c68:	080178ec 	.word	0x080178ec
 8007c6c:	20000001 	.word	0x20000001
 8007c70:	20000002 	.word	0x20000002
 8007c74:	20000003 	.word	0x20000003
 8007c78:	200012b8 	.word	0x200012b8
 8007c7c:	200012c0 	.word	0x200012c0
 8007c80:	2000003c 	.word	0x2000003c
 8007c84:	0801790c 	.word	0x0801790c
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8007c88:	4ae5      	ldr	r2, [pc, #916]	; (8008020 <PxMessagingTask+0x12d8>)
 8007c8a:	2338      	movs	r3, #56	; 0x38
 8007c8c:	4363      	muls	r3, r4
 8007c8e:	49e5      	ldr	r1, [pc, #916]	; (8008024 <PxMessagingTask+0x12dc>)
 8007c90:	18c9      	adds	r1, r1, r3
 8007c92:	1949      	adds	r1, r1, r5
 8007c94:	788b      	ldrb	r3, [r1, #2]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	7848      	ldrb	r0, [r1, #1]
 8007c9a:	181b      	adds	r3, r3, r0
 8007c9c:	78c8      	ldrb	r0, [r1, #3]
 8007c9e:	0400      	lsls	r0, r0, #16
 8007ca0:	181b      	adds	r3, r3, r0
 8007ca2:	7909      	ldrb	r1, [r1, #4]
 8007ca4:	0609      	lsls	r1, r1, #24
 8007ca6:	185b      	adds	r3, r3, r1
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	17db      	asrs	r3, r3, #31
 8007cac:	6053      	str	r3, [r2, #4]
 8007cae:	e767      	b.n	8007b80 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8007cb0:	4adb      	ldr	r2, [pc, #876]	; (8008020 <PxMessagingTask+0x12d8>)
 8007cb2:	2338      	movs	r3, #56	; 0x38
 8007cb4:	4363      	muls	r3, r4
 8007cb6:	49db      	ldr	r1, [pc, #876]	; (8008024 <PxMessagingTask+0x12dc>)
 8007cb8:	18c9      	adds	r1, r1, r3
 8007cba:	1949      	adds	r1, r1, r5
 8007cbc:	788b      	ldrb	r3, [r1, #2]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	78c8      	ldrb	r0, [r1, #3]
 8007cc2:	0400      	lsls	r0, r0, #16
 8007cc4:	181b      	adds	r3, r3, r0
 8007cc6:	7848      	ldrb	r0, [r1, #1]
 8007cc8:	181b      	adds	r3, r3, r0
 8007cca:	7909      	ldrb	r1, [r1, #4]
 8007ccc:	0609      	lsls	r1, r1, #24
 8007cce:	185b      	adds	r3, r3, r1
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6053      	str	r3, [r2, #4]
 8007cd6:	e753      	b.n	8007b80 <PxMessagingTask+0xe38>
							responseStatus = BOS_OK;		// Initialize response
 8007cd8:	4bd3      	ldr	r3, [pc, #844]	; (8008028 <PxMessagingTask+0x12e0>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 8007cde:	46a9      	mov	r9, r5
 8007ce0:	4bd0      	ldr	r3, [pc, #832]	; (8008024 <PxMessagingTask+0x12dc>)
 8007ce2:	199b      	adds	r3, r3, r6
 8007ce4:	5d5b      	ldrb	r3, [r3, r5]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d100      	bne.n	8007cec <PxMessagingTask+0xfa4>
 8007cea:	e113      	b.n	8007f14 <PxMessagingTask+0x11cc>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 8007cec:	2b1e      	cmp	r3, #30
 8007cee:	d900      	bls.n	8007cf2 <PxMessagingTask+0xfaa>
 8007cf0:	e0f8      	b.n	8007ee4 <PxMessagingTask+0x119c>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 8007cf2:	1e5d      	subs	r5, r3, #1
 8007cf4:	00aa      	lsls	r2, r5, #2
 8007cf6:	4bcd      	ldr	r3, [pc, #820]	; (800802c <PxMessagingTask+0x12e4>)
 8007cf8:	58d2      	ldr	r2, [r2, r3]
 8007cfa:	0c13      	lsrs	r3, r2, #16
 8007cfc:	2180      	movs	r1, #128	; 0x80
 8007cfe:	0589      	lsls	r1, r1, #22
 8007d00:	468c      	mov	ip, r1
 8007d02:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 8007d04:	4649      	mov	r1, r9
 8007d06:	1c4f      	adds	r7, r1, #1
 8007d08:	2038      	movs	r0, #56	; 0x38
 8007d0a:	4360      	muls	r0, r4
 8007d0c:	49c5      	ldr	r1, [pc, #788]	; (8008024 <PxMessagingTask+0x12dc>)
 8007d0e:	1809      	adds	r1, r1, r0
 8007d10:	5dc9      	ldrb	r1, [r1, r7]
 8007d12:	468a      	mov	sl, r1
 8007d14:	3901      	subs	r1, #1
 8007d16:	b2c8      	uxtb	r0, r1
 8007d18:	2807      	cmp	r0, #7
 8007d1a:	d818      	bhi.n	8007d4e <PxMessagingTask+0x1006>
 8007d1c:	b2c9      	uxtb	r1, r1
 8007d1e:	0089      	lsls	r1, r1, #2
 8007d20:	48c3      	ldr	r0, [pc, #780]	; (8008030 <PxMessagingTask+0x12e8>)
 8007d22:	5841      	ldr	r1, [r0, r1]
 8007d24:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007d26:	0712      	lsls	r2, r2, #28
 8007d28:	d10a      	bne.n	8007d40 <PxMessagingTask+0xff8>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f00a fe12 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d027      	beq.n	8007d84 <PxMessagingTask+0x103c>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007d34:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007d36:	00ad      	lsls	r5, r5, #2
 8007d38:	0400      	lsls	r0, r0, #16
 8007d3a:	4450      	add	r0, sl
 8007d3c:	4abb      	ldr	r2, [pc, #748]	; (800802c <PxMessagingTask+0x12e4>)
 8007d3e:	50a8      	str	r0, [r5, r2]
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 8007d40:	2138      	movs	r1, #56	; 0x38
 8007d42:	4361      	muls	r1, r4
 8007d44:	4ab7      	ldr	r2, [pc, #732]	; (8008024 <PxMessagingTask+0x12dc>)
 8007d46:	1852      	adds	r2, r2, r1
 8007d48:	444a      	add	r2, r9
 8007d4a:	7892      	ldrb	r2, [r2, #2]
 8007d4c:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 8007d4e:	2338      	movs	r3, #56	; 0x38
 8007d50:	4363      	muls	r3, r4
 8007d52:	4ab4      	ldr	r2, [pc, #720]	; (8008024 <PxMessagingTask+0x12dc>)
 8007d54:	18d2      	adds	r2, r2, r3
 8007d56:	464b      	mov	r3, r9
 8007d58:	5cd3      	ldrb	r3, [r2, r3]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	0098      	lsls	r0, r3, #2
 8007d5e:	49b3      	ldr	r1, [pc, #716]	; (800802c <PxMessagingTask+0x12e4>)
 8007d60:	5841      	ldr	r1, [r0, r1]
 8007d62:	5dd2      	ldrb	r2, [r2, r7]
 8007d64:	200f      	movs	r0, #15
 8007d66:	4008      	ands	r0, r1
 8007d68:	4290      	cmp	r0, r2
 8007d6a:	d100      	bne.n	8007d6e <PxMessagingTask+0x1026>
 8007d6c:	e0bd      	b.n	8007eea <PxMessagingTask+0x11a2>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	48b0      	ldr	r0, [pc, #704]	; (8008034 <PxMessagingTask+0x12ec>)
 8007d72:	4684      	mov	ip, r0
 8007d74:	4462      	add	r2, ip
 8007d76:	400a      	ands	r2, r1
 8007d78:	49ac      	ldr	r1, [pc, #688]	; (800802c <PxMessagingTask+0x12e4>)
 8007d7a:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 8007d7c:	4baa      	ldr	r3, [pc, #680]	; (8008028 <PxMessagingTask+0x12e0>)
 8007d7e:	2214      	movs	r2, #20
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e0b2      	b.n	8007eea <PxMessagingTask+0x11a2>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8007d84:	4ba8      	ldr	r3, [pc, #672]	; (8008028 <PxMessagingTask+0x12e0>)
 8007d86:	2212      	movs	r2, #18
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e7e0      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007d8c:	0712      	lsls	r2, r2, #28
 8007d8e:	d10b      	bne.n	8007da8 <PxMessagingTask+0x1060>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007d90:	2001      	movs	r0, #1
 8007d92:	f00a fddf 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d100      	bne.n	8007d9c <PxMessagingTask+0x1054>
 8007d9a:	e2b1      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007d9c:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007d9e:	00ad      	lsls	r5, r5, #2
 8007da0:	0400      	lsls	r0, r0, #16
 8007da2:	3002      	adds	r0, #2
 8007da4:	4aa1      	ldr	r2, [pc, #644]	; (800802c <PxMessagingTask+0x12e4>)
 8007da6:	50a8      	str	r0, [r5, r2]
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 8007da8:	2138      	movs	r1, #56	; 0x38
 8007daa:	4361      	muls	r1, r4
 8007dac:	4a9d      	ldr	r2, [pc, #628]	; (8008024 <PxMessagingTask+0x12dc>)
 8007dae:	1852      	adds	r2, r2, r1
 8007db0:	444a      	add	r2, r9
 8007db2:	7892      	ldrb	r2, [r2, #2]
 8007db4:	b252      	sxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e7c9      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007dba:	0712      	lsls	r2, r2, #28
 8007dbc:	d10b      	bne.n	8007dd6 <PxMessagingTask+0x108e>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007dbe:	2002      	movs	r0, #2
 8007dc0:	f00a fdc8 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d100      	bne.n	8007dca <PxMessagingTask+0x1082>
 8007dc8:	e29a      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007dca:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007dcc:	00ad      	lsls	r5, r5, #2
 8007dce:	0400      	lsls	r0, r0, #16
 8007dd0:	3003      	adds	r0, #3
 8007dd2:	4a96      	ldr	r2, [pc, #600]	; (800802c <PxMessagingTask+0x12e4>)
 8007dd4:	50a8      	str	r0, [r5, r2]
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 8007dd6:	2138      	movs	r1, #56	; 0x38
 8007dd8:	4361      	muls	r1, r4
 8007dda:	4a92      	ldr	r2, [pc, #584]	; (8008024 <PxMessagingTask+0x12dc>)
 8007ddc:	1852      	adds	r2, r2, r1
 8007dde:	444a      	add	r2, r9
 8007de0:	78d1      	ldrb	r1, [r2, #3]
 8007de2:	0209      	lsls	r1, r1, #8
 8007de4:	7892      	ldrb	r2, [r2, #2]
 8007de6:	1852      	adds	r2, r2, r1
 8007de8:	b292      	uxth	r2, r2
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	e7af      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007dee:	0712      	lsls	r2, r2, #28
 8007df0:	d10b      	bne.n	8007e0a <PxMessagingTask+0x10c2>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007df2:	2002      	movs	r0, #2
 8007df4:	f00a fdae 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d100      	bne.n	8007dfe <PxMessagingTask+0x10b6>
 8007dfc:	e280      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007dfe:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007e00:	00ad      	lsls	r5, r5, #2
 8007e02:	0400      	lsls	r0, r0, #16
 8007e04:	3004      	adds	r0, #4
 8007e06:	4a89      	ldr	r2, [pc, #548]	; (800802c <PxMessagingTask+0x12e4>)
 8007e08:	50a8      	str	r0, [r5, r2]
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 8007e0a:	2138      	movs	r1, #56	; 0x38
 8007e0c:	4361      	muls	r1, r4
 8007e0e:	4a85      	ldr	r2, [pc, #532]	; (8008024 <PxMessagingTask+0x12dc>)
 8007e10:	1852      	adds	r2, r2, r1
 8007e12:	444a      	add	r2, r9
 8007e14:	78d1      	ldrb	r1, [r2, #3]
 8007e16:	0209      	lsls	r1, r1, #8
 8007e18:	7892      	ldrb	r2, [r2, #2]
 8007e1a:	1852      	adds	r2, r2, r1
 8007e1c:	b212      	sxth	r2, r2
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e795      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007e22:	0712      	lsls	r2, r2, #28
 8007e24:	d10b      	bne.n	8007e3e <PxMessagingTask+0x10f6>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007e26:	2004      	movs	r0, #4
 8007e28:	f00a fd94 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d100      	bne.n	8007e32 <PxMessagingTask+0x10ea>
 8007e30:	e266      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007e32:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007e34:	00ad      	lsls	r5, r5, #2
 8007e36:	0400      	lsls	r0, r0, #16
 8007e38:	3005      	adds	r0, #5
 8007e3a:	4a7c      	ldr	r2, [pc, #496]	; (800802c <PxMessagingTask+0x12e4>)
 8007e3c:	50a8      	str	r0, [r5, r2]
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 8007e3e:	2238      	movs	r2, #56	; 0x38
 8007e40:	4362      	muls	r2, r4
 8007e42:	4978      	ldr	r1, [pc, #480]	; (8008024 <PxMessagingTask+0x12dc>)
 8007e44:	1889      	adds	r1, r1, r2
 8007e46:	4449      	add	r1, r9
 8007e48:	78ca      	ldrb	r2, [r1, #3]
 8007e4a:	0212      	lsls	r2, r2, #8
 8007e4c:	7908      	ldrb	r0, [r1, #4]
 8007e4e:	0400      	lsls	r0, r0, #16
 8007e50:	1812      	adds	r2, r2, r0
 8007e52:	7888      	ldrb	r0, [r1, #2]
 8007e54:	1812      	adds	r2, r2, r0
 8007e56:	7949      	ldrb	r1, [r1, #5]
 8007e58:	0609      	lsls	r1, r1, #24
 8007e5a:	1852      	adds	r2, r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e776      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007e60:	0712      	lsls	r2, r2, #28
 8007e62:	d10b      	bne.n	8007e7c <PxMessagingTask+0x1134>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8007e64:	2004      	movs	r0, #4
 8007e66:	f00a fd75 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d100      	bne.n	8007e70 <PxMessagingTask+0x1128>
 8007e6e:	e247      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8007e70:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007e72:	00ad      	lsls	r5, r5, #2
 8007e74:	0400      	lsls	r0, r0, #16
 8007e76:	3006      	adds	r0, #6
 8007e78:	4a6c      	ldr	r2, [pc, #432]	; (800802c <PxMessagingTask+0x12e4>)
 8007e7a:	50a8      	str	r0, [r5, r2]
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 8007e7c:	2238      	movs	r2, #56	; 0x38
 8007e7e:	4362      	muls	r2, r4
 8007e80:	4968      	ldr	r1, [pc, #416]	; (8008024 <PxMessagingTask+0x12dc>)
 8007e82:	1889      	adds	r1, r1, r2
 8007e84:	4449      	add	r1, r9
 8007e86:	78ca      	ldrb	r2, [r1, #3]
 8007e88:	0212      	lsls	r2, r2, #8
 8007e8a:	7888      	ldrb	r0, [r1, #2]
 8007e8c:	1812      	adds	r2, r2, r0
 8007e8e:	7908      	ldrb	r0, [r1, #4]
 8007e90:	0400      	lsls	r0, r0, #16
 8007e92:	1812      	adds	r2, r2, r0
 8007e94:	7949      	ldrb	r1, [r1, #5]
 8007e96:	0609      	lsls	r1, r1, #24
 8007e98:	1852      	adds	r2, r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e757      	b.n	8007d4e <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007e9e:	0712      	lsls	r2, r2, #28
 8007ea0:	d10b      	bne.n	8007eba <PxMessagingTask+0x1172>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8007ea2:	2004      	movs	r0, #4
 8007ea4:	f00a fd56 	bl	8012954 <malloc>
												if (temp32 != 0) {
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d100      	bne.n	8007eae <PxMessagingTask+0x1166>
 8007eac:	e228      	b.n	8008300 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8007eae:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007eb0:	00ad      	lsls	r5, r5, #2
 8007eb2:	0400      	lsls	r0, r0, #16
 8007eb4:	3007      	adds	r0, #7
 8007eb6:	4a5d      	ldr	r2, [pc, #372]	; (800802c <PxMessagingTask+0x12e4>)
 8007eb8:	50a8      	str	r0, [r5, r2]
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 8007eba:	2238      	movs	r2, #56	; 0x38
 8007ebc:	4362      	muls	r2, r4
 8007ebe:	4959      	ldr	r1, [pc, #356]	; (8008024 <PxMessagingTask+0x12dc>)
 8007ec0:	1889      	adds	r1, r1, r2
 8007ec2:	4449      	add	r1, r9
 8007ec4:	78ca      	ldrb	r2, [r1, #3]
 8007ec6:	0212      	lsls	r2, r2, #8
 8007ec8:	7908      	ldrb	r0, [r1, #4]
 8007eca:	0400      	lsls	r0, r0, #16
 8007ecc:	1812      	adds	r2, r2, r0
 8007ece:	7888      	ldrb	r0, [r1, #2]
 8007ed0:	1812      	adds	r2, r2, r0
 8007ed2:	7949      	ldrb	r1, [r1, #5]
 8007ed4:	0609      	lsls	r1, r1, #24
 8007ed6:	1852      	adds	r2, r2, r1
 8007ed8:	4951      	ldr	r1, [pc, #324]	; (8008020 <PxMessagingTask+0x12d8>)
 8007eda:	600a      	str	r2, [r1, #0]
 8007edc:	2000      	movs	r0, #0
 8007ede:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e734      	b.n	8007d4e <PxMessagingTask+0x1006>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 8007ee4:	4b50      	ldr	r3, [pc, #320]	; (8008028 <PxMessagingTask+0x12e0>)
 8007ee6:	2213      	movs	r2, #19
 8007ee8:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 8007eea:	4b53      	ldr	r3, [pc, #332]	; (8008038 <PxMessagingTask+0x12f0>)
 8007eec:	799b      	ldrb	r3, [r3, #6]
 8007eee:	2240      	movs	r2, #64	; 0x40
 8007ef0:	4393      	bics	r3, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d001      	beq.n	8007efe <PxMessagingTask+0x11b6>
 8007efa:	f7fe ff55 	bl	8006da8 <PxMessagingTask+0x60>
								messageParams[0] = responseStatus;
 8007efe:	4b4a      	ldr	r3, [pc, #296]	; (8008028 <PxMessagingTask+0x12e0>)
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	4b4e      	ldr	r3, [pc, #312]	; (800803c <PxMessagingTask+0x12f4>)
 8007f04:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 8007f06:	2201      	movs	r2, #1
 8007f08:	2121      	movs	r1, #33	; 0x21
 8007f0a:	9806      	ldr	r0, [sp, #24]
 8007f0c:	f7fd fe82 	bl	8005c14 <SendMessageToModule>
 8007f10:	f7fe ff4a 	bl	8006da8 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8007f14:	2238      	movs	r2, #56	; 0x38
 8007f16:	4362      	muls	r2, r4
 8007f18:	4b42      	ldr	r3, [pc, #264]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	195b      	adds	r3, r3, r5
 8007f1e:	789d      	ldrb	r5, [r3, #2]
 8007f20:	062d      	lsls	r5, r5, #24
 8007f22:	78da      	ldrb	r2, [r3, #3]
 8007f24:	0412      	lsls	r2, r2, #16
 8007f26:	18ad      	adds	r5, r5, r2
 8007f28:	795a      	ldrb	r2, [r3, #5]
 8007f2a:	18ad      	adds	r5, r5, r2
 8007f2c:	791b      	ldrb	r3, [r3, #4]
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	18ed      	adds	r5, r5, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 8007f32:	23e0      	movs	r3, #224	; 0xe0
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	18ea      	adds	r2, r5, r3
 8007f38:	4b41      	ldr	r3, [pc, #260]	; (8008040 <PxMessagingTask+0x12f8>)
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d900      	bls.n	8007f40 <PxMessagingTask+0x11f8>
 8007f3e:	e083      	b.n	8008048 <PxMessagingTask+0x1300>
									switch (cMessage[port-1][1+shift])															// Requested format
 8007f40:	2238      	movs	r2, #56	; 0x38
 8007f42:	4362      	muls	r2, r4
 8007f44:	4b37      	ldr	r3, [pc, #220]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	444b      	add	r3, r9
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	2a07      	cmp	r2, #7
 8007f52:	d8ca      	bhi.n	8007eea <PxMessagingTask+0x11a2>
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4a3a      	ldr	r2, [pc, #232]	; (8008044 <PxMessagingTask+0x12fc>)
 8007f5a:	58d3      	ldr	r3, [r2, r3]
 8007f5c:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 8007f5e:	2238      	movs	r2, #56	; 0x38
 8007f60:	4362      	muls	r2, r4
 8007f62:	4b30      	ldr	r3, [pc, #192]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f64:	189b      	adds	r3, r3, r2
 8007f66:	444b      	add	r3, r9
 8007f68:	799b      	ldrb	r3, [r3, #6]
 8007f6a:	702b      	strb	r3, [r5, #0]
 8007f6c:	e7bd      	b.n	8007eea <PxMessagingTask+0x11a2>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 8007f6e:	2238      	movs	r2, #56	; 0x38
 8007f70:	4362      	muls	r2, r4
 8007f72:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f74:	189b      	adds	r3, r3, r2
 8007f76:	444b      	add	r3, r9
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	702b      	strb	r3, [r5, #0]
 8007f7e:	e7b4      	b.n	8007eea <PxMessagingTask+0x11a2>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 8007f80:	2238      	movs	r2, #56	; 0x38
 8007f82:	4362      	muls	r2, r4
 8007f84:	4b27      	ldr	r3, [pc, #156]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	444b      	add	r3, r9
 8007f8a:	79da      	ldrb	r2, [r3, #7]
 8007f8c:	0212      	lsls	r2, r2, #8
 8007f8e:	799b      	ldrb	r3, [r3, #6]
 8007f90:	189b      	adds	r3, r3, r2
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	802b      	strh	r3, [r5, #0]
 8007f96:	e7a8      	b.n	8007eea <PxMessagingTask+0x11a2>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 8007f98:	2238      	movs	r2, #56	; 0x38
 8007f9a:	4362      	muls	r2, r4
 8007f9c:	4b21      	ldr	r3, [pc, #132]	; (8008024 <PxMessagingTask+0x12dc>)
 8007f9e:	189b      	adds	r3, r3, r2
 8007fa0:	444b      	add	r3, r9
 8007fa2:	79da      	ldrb	r2, [r3, #7]
 8007fa4:	0212      	lsls	r2, r2, #8
 8007fa6:	799b      	ldrb	r3, [r3, #6]
 8007fa8:	189b      	adds	r3, r3, r2
 8007faa:	b21b      	sxth	r3, r3
 8007fac:	802b      	strh	r3, [r5, #0]
 8007fae:	e79c      	b.n	8007eea <PxMessagingTask+0x11a2>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 8007fb0:	2338      	movs	r3, #56	; 0x38
 8007fb2:	4363      	muls	r3, r4
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <PxMessagingTask+0x12dc>)
 8007fb6:	18d2      	adds	r2, r2, r3
 8007fb8:	444a      	add	r2, r9
 8007fba:	79d3      	ldrb	r3, [r2, #7]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	7a11      	ldrb	r1, [r2, #8]
 8007fc0:	0409      	lsls	r1, r1, #16
 8007fc2:	185b      	adds	r3, r3, r1
 8007fc4:	7991      	ldrb	r1, [r2, #6]
 8007fc6:	185b      	adds	r3, r3, r1
 8007fc8:	7a52      	ldrb	r2, [r2, #9]
 8007fca:	0612      	lsls	r2, r2, #24
 8007fcc:	189b      	adds	r3, r3, r2
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	e78b      	b.n	8007eea <PxMessagingTask+0x11a2>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 8007fd2:	2338      	movs	r3, #56	; 0x38
 8007fd4:	4363      	muls	r3, r4
 8007fd6:	4a13      	ldr	r2, [pc, #76]	; (8008024 <PxMessagingTask+0x12dc>)
 8007fd8:	18d2      	adds	r2, r2, r3
 8007fda:	444a      	add	r2, r9
 8007fdc:	79d3      	ldrb	r3, [r2, #7]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	7991      	ldrb	r1, [r2, #6]
 8007fe2:	185b      	adds	r3, r3, r1
 8007fe4:	7a11      	ldrb	r1, [r2, #8]
 8007fe6:	0409      	lsls	r1, r1, #16
 8007fe8:	185b      	adds	r3, r3, r1
 8007fea:	7a52      	ldrb	r2, [r2, #9]
 8007fec:	0612      	lsls	r2, r2, #24
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	602b      	str	r3, [r5, #0]
 8007ff2:	e77a      	b.n	8007eea <PxMessagingTask+0x11a2>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 8007ff4:	2338      	movs	r3, #56	; 0x38
 8007ff6:	4363      	muls	r3, r4
 8007ff8:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <PxMessagingTask+0x12dc>)
 8007ffa:	18d2      	adds	r2, r2, r3
 8007ffc:	444a      	add	r2, r9
 8007ffe:	79d3      	ldrb	r3, [r2, #7]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	7a11      	ldrb	r1, [r2, #8]
 8008004:	0409      	lsls	r1, r1, #16
 8008006:	185b      	adds	r3, r3, r1
 8008008:	7991      	ldrb	r1, [r2, #6]
 800800a:	185b      	adds	r3, r3, r1
 800800c:	7a52      	ldrb	r2, [r2, #9]
 800800e:	0612      	lsls	r2, r2, #24
 8008010:	189b      	adds	r3, r3, r2
 8008012:	4a03      	ldr	r2, [pc, #12]	; (8008020 <PxMessagingTask+0x12d8>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	2100      	movs	r1, #0
 8008018:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	e765      	b.n	8007eea <PxMessagingTask+0x11a2>
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	200012b8 	.word	0x200012b8
 8008024:	20000d48 	.word	0x20000d48
 8008028:	200012c0 	.word	0x200012c0
 800802c:	2000681c 	.word	0x2000681c
 8008030:	08017930 	.word	0x08017930
 8008034:	0000fff0 	.word	0x0000fff0
 8008038:	20006894 	.word	0x20006894
 800803c:	20001094 	.word	0x20001094
 8008040:	00007fff 	.word	0x00007fff
 8008044:	08017950 	.word	0x08017950
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 8008048:	4ab5      	ldr	r2, [pc, #724]	; (8008320 <PxMessagingTask+0x15d8>)
 800804a:	23f8      	movs	r3, #248	; 0xf8
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	18eb      	adds	r3, r5, r3
 8008050:	4293      	cmp	r3, r2
 8008052:	d903      	bls.n	800805c <PxMessagingTask+0x1314>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 8008054:	4bb3      	ldr	r3, [pc, #716]	; (8008324 <PxMessagingTask+0x15dc>)
 8008056:	2215      	movs	r2, #21
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e746      	b.n	8007eea <PxMessagingTask+0x11a2>
									HAL_FLASH_Unlock();
 800805c:	f008 f954 	bl	8010308 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 8008060:	2f22      	cmp	r7, #34	; 0x22
 8008062:	d012      	beq.n	800808a <PxMessagingTask+0x1342>
									if (responseStatus == BOS_OK)
 8008064:	4baf      	ldr	r3, [pc, #700]	; (8008324 <PxMessagingTask+0x15dc>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d129      	bne.n	80080c0 <PxMessagingTask+0x1378>
										switch (cMessage[port-1][1+shift])															// Requested format
 800806c:	2238      	movs	r2, #56	; 0x38
 800806e:	4362      	muls	r2, r4
 8008070:	4bad      	ldr	r3, [pc, #692]	; (8008328 <PxMessagingTask+0x15e0>)
 8008072:	189b      	adds	r3, r3, r2
 8008074:	444b      	add	r3, r9
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	3b01      	subs	r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	2a07      	cmp	r2, #7
 800807e:	d81f      	bhi.n	80080c0 <PxMessagingTask+0x1378>
 8008080:	b2db      	uxtb	r3, r3
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4aa9      	ldr	r2, [pc, #676]	; (800832c <PxMessagingTask+0x15e4>)
 8008086:	58d3      	ldr	r3, [r2, r3]
 8008088:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800808a:	2300      	movs	r3, #0
 800808c:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress = temp32;
 800808e:	9512      	str	r5, [sp, #72]	; 0x48
										erase.NbPages = 1;
 8008090:	3301      	adds	r3, #1
 8008092:	9313      	str	r3, [sp, #76]	; 0x4c
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 8008094:	a910      	add	r1, sp, #64	; 0x40
 8008096:	a811      	add	r0, sp, #68	; 0x44
 8008098:	f008 fa0a 	bl	80104b0 <HAL_FLASHEx_Erase>
 800809c:	900b      	str	r0, [sp, #44]	; 0x2c
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800809e:	2800      	cmp	r0, #0
 80080a0:	d102      	bne.n	80080a8 <PxMessagingTask+0x1360>
 80080a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a4:	3301      	adds	r3, #1
 80080a6:	d0dd      	beq.n	8008064 <PxMessagingTask+0x131c>
 80080a8:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <PxMessagingTask+0x15dc>)
 80080aa:	2216      	movs	r2, #22
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e7d9      	b.n	8008064 <PxMessagingTask+0x131c>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 80080b0:	882b      	ldrh	r3, [r5, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4a9e      	ldr	r2, [pc, #632]	; (8008330 <PxMessagingTask+0x15e8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00c      	beq.n	80080d4 <PxMessagingTask+0x138c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 80080ba:	4b9a      	ldr	r3, [pc, #616]	; (8008324 <PxMessagingTask+0x15dc>)
 80080bc:	2216      	movs	r2, #22
 80080be:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 80080c0:	f008 f934 	bl	801032c <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 80080c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d100      	bne.n	80080cc <PxMessagingTask+0x1384>
 80080ca:	e70e      	b.n	8007eea <PxMessagingTask+0x11a2>
 80080cc:	4b95      	ldr	r3, [pc, #596]	; (8008324 <PxMessagingTask+0x15dc>)
 80080ce:	2216      	movs	r2, #22
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	e70a      	b.n	8007eea <PxMessagingTask+0x11a2>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 80080d4:	2238      	movs	r2, #56	; 0x38
 80080d6:	4362      	muls	r2, r4
 80080d8:	4b93      	ldr	r3, [pc, #588]	; (8008328 <PxMessagingTask+0x15e0>)
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	444b      	add	r3, r9
 80080de:	799a      	ldrb	r2, [r3, #6]
 80080e0:	2300      	movs	r3, #0
 80080e2:	4994      	ldr	r1, [pc, #592]	; (8008334 <PxMessagingTask+0x15ec>)
 80080e4:	600a      	str	r2, [r1, #0]
 80080e6:	604b      	str	r3, [r1, #4]
 80080e8:	0029      	movs	r1, r5
 80080ea:	2001      	movs	r0, #1
 80080ec:	f008 f956 	bl	801039c <HAL_FLASH_Program>
 80080f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80080f2:	e7e5      	b.n	80080c0 <PxMessagingTask+0x1378>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 80080f4:	882b      	ldrh	r3, [r5, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4a8d      	ldr	r2, [pc, #564]	; (8008330 <PxMessagingTask+0x15e8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d003      	beq.n	8008106 <PxMessagingTask+0x13be>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 80080fe:	4b89      	ldr	r3, [pc, #548]	; (8008324 <PxMessagingTask+0x15dc>)
 8008100:	2216      	movs	r2, #22
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e7dc      	b.n	80080c0 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 8008106:	2238      	movs	r2, #56	; 0x38
 8008108:	4362      	muls	r2, r4
 800810a:	4b87      	ldr	r3, [pc, #540]	; (8008328 <PxMessagingTask+0x15e0>)
 800810c:	189b      	adds	r3, r3, r2
 800810e:	444b      	add	r3, r9
 8008110:	79da      	ldrb	r2, [r3, #7]
 8008112:	0212      	lsls	r2, r2, #8
 8008114:	799b      	ldrb	r3, [r3, #6]
 8008116:	18d2      	adds	r2, r2, r3
 8008118:	17d3      	asrs	r3, r2, #31
 800811a:	4986      	ldr	r1, [pc, #536]	; (8008334 <PxMessagingTask+0x15ec>)
 800811c:	600a      	str	r2, [r1, #0]
 800811e:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 8008120:	0029      	movs	r1, r5
 8008122:	2001      	movs	r0, #1
 8008124:	f008 f93a 	bl	801039c <HAL_FLASH_Program>
 8008128:	900b      	str	r0, [sp, #44]	; 0x2c
 800812a:	e7c9      	b.n	80080c0 <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	3301      	adds	r3, #1
 8008130:	d003      	beq.n	800813a <PxMessagingTask+0x13f2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8008132:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <PxMessagingTask+0x15dc>)
 8008134:	2216      	movs	r2, #22
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e7c2      	b.n	80080c0 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800813a:	2238      	movs	r2, #56	; 0x38
 800813c:	4362      	muls	r2, r4
 800813e:	4b7a      	ldr	r3, [pc, #488]	; (8008328 <PxMessagingTask+0x15e0>)
 8008140:	189b      	adds	r3, r3, r2
 8008142:	444b      	add	r3, r9
 8008144:	79da      	ldrb	r2, [r3, #7]
 8008146:	0212      	lsls	r2, r2, #8
 8008148:	7a19      	ldrb	r1, [r3, #8]
 800814a:	0409      	lsls	r1, r1, #16
 800814c:	1852      	adds	r2, r2, r1
 800814e:	7999      	ldrb	r1, [r3, #6]
 8008150:	1852      	adds	r2, r2, r1
 8008152:	7a5b      	ldrb	r3, [r3, #9]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	18d2      	adds	r2, r2, r3
 8008158:	2300      	movs	r3, #0
 800815a:	4976      	ldr	r1, [pc, #472]	; (8008334 <PxMessagingTask+0x15ec>)
 800815c:	600a      	str	r2, [r1, #0]
 800815e:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 8008160:	0029      	movs	r1, r5
 8008162:	2002      	movs	r0, #2
 8008164:	f008 f91a 	bl	801039c <HAL_FLASH_Program>
 8008168:	900b      	str	r0, [sp, #44]	; 0x2c
 800816a:	e7a9      	b.n	80080c0 <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	d003      	beq.n	800817a <PxMessagingTask+0x1432>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8008172:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <PxMessagingTask+0x15dc>)
 8008174:	2216      	movs	r2, #22
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e7a2      	b.n	80080c0 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800817a:	2238      	movs	r2, #56	; 0x38
 800817c:	4362      	muls	r2, r4
 800817e:	4b6a      	ldr	r3, [pc, #424]	; (8008328 <PxMessagingTask+0x15e0>)
 8008180:	189b      	adds	r3, r3, r2
 8008182:	444b      	add	r3, r9
 8008184:	79da      	ldrb	r2, [r3, #7]
 8008186:	0212      	lsls	r2, r2, #8
 8008188:	7a19      	ldrb	r1, [r3, #8]
 800818a:	0409      	lsls	r1, r1, #16
 800818c:	1852      	adds	r2, r2, r1
 800818e:	7999      	ldrb	r1, [r3, #6]
 8008190:	1852      	adds	r2, r2, r1
 8008192:	7a5b      	ldrb	r3, [r3, #9]
 8008194:	061b      	lsls	r3, r3, #24
 8008196:	18d2      	adds	r2, r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	4966      	ldr	r1, [pc, #408]	; (8008334 <PxMessagingTask+0x15ec>)
 800819c:	600a      	str	r2, [r1, #0]
 800819e:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 80081a0:	0029      	movs	r1, r5
 80081a2:	2003      	movs	r0, #3
 80081a4:	f008 f8fa 	bl	801039c <HAL_FLASH_Program>
 80081a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80081aa:	e789      	b.n	80080c0 <PxMessagingTask+0x1378>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 80081ac:	4b5e      	ldr	r3, [pc, #376]	; (8008328 <PxMessagingTask+0x15e0>)
 80081ae:	199b      	adds	r3, r3, r6
 80081b0:	5d5a      	ldrb	r2, [r3, r5]
 80081b2:	4b5c      	ldr	r3, [pc, #368]	; (8008324 <PxMessagingTask+0x15dc>)
 80081b4:	701a      	strb	r2, [r3, #0]
							break;	
 80081b6:	2300      	movs	r3, #0
 80081b8:	4699      	mov	r9, r3
 80081ba:	f7fe fdf5 	bl	8006da8 <PxMessagingTask+0x60>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 80081be:	464a      	mov	r2, r9
 80081c0:	3a01      	subs	r2, #1
 80081c2:	b292      	uxth	r2, r2
 80081c4:	1c69      	adds	r1, r5, #1
 80081c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c8:	469c      	mov	ip, r3
 80081ca:	4461      	add	r1, ip
 80081cc:	4b56      	ldr	r3, [pc, #344]	; (8008328 <PxMessagingTask+0x15e0>)
 80081ce:	18c9      	adds	r1, r1, r3
 80081d0:	199b      	adds	r3, r3, r6
 80081d2:	5d58      	ldrb	r0, [r3, r5]
 80081d4:	230a      	movs	r3, #10
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	f005 f8b8 	bl	800d34c <writePxMutex>
							break;
 80081dc:	2300      	movs	r3, #0
 80081de:	4699      	mov	r9, r3
 80081e0:	f7fe fde2 	bl	8006da8 <PxMessagingTask+0x60>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 80081e4:	9500      	str	r5, [sp, #0]
 80081e6:	4653      	mov	r3, sl
 80081e8:	9a06      	ldr	r2, [sp, #24]
 80081ea:	9907      	ldr	r1, [sp, #28]
 80081ec:	0038      	movs	r0, r7
 80081ee:	f7fc f919 	bl	8004424 <User_MessagingParser>
 80081f2:	4681      	mov	r9, r0
							if (result == BOS_ERR_UnknownMessage) {
 80081f4:	2801      	cmp	r0, #1
 80081f6:	d001      	beq.n	80081fc <PxMessagingTask+0x14b4>
 80081f8:	f7fe fdd6 	bl	8006da8 <PxMessagingTask+0x60>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 80081fc:	9500      	str	r5, [sp, #0]
 80081fe:	4653      	mov	r3, sl
 8008200:	9a06      	ldr	r2, [sp, #24]
 8008202:	9907      	ldr	r1, [sp, #28]
 8008204:	0038      	movs	r0, r7
 8008206:	f003 fcc5 	bl	800bb94 <Module_MessagingTask>
 800820a:	4681      	mov	r9, r0
 800820c:	f7fe fdc7 	bl	8006d9e <PxMessagingTask+0x56>
									switch (cMessage[port-1][1+shift])											// requested format
 8008210:	2300      	movs	r3, #0
 8008212:	4699      	mov	r9, r3
 8008214:	f7fe fdc3 	bl	8006d9e <PxMessagingTask+0x56>
									switch (messageParams[0])											// requested format
 8008218:	2300      	movs	r3, #0
 800821a:	4699      	mov	r9, r3
 800821c:	f7fe fdbf 	bl	8006d9e <PxMessagingTask+0x56>
										switch (messageParams[0])											// requested format
 8008220:	2300      	movs	r3, #0
 8008222:	4699      	mov	r9, r3
 8008224:	f7fe fdbb 	bl	8006d9e <PxMessagingTask+0x56>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 8008228:	2200      	movs	r2, #0
 800822a:	2100      	movs	r1, #0
 800822c:	9806      	ldr	r0, [sp, #24]
 800822e:	f7fd fcf1 	bl	8005c14 <SendMessageToModule>
			result = BOS_OK;			
 8008232:	2300      	movs	r3, #0
 8008234:	4699      	mov	r9, r3
 8008236:	f7fe fdb7 	bl	8006da8 <PxMessagingTask+0x60>
					switch (code)
 800823a:	2300      	movs	r3, #0
 800823c:	4699      	mov	r9, r3
 800823e:	f7fe fdb3 	bl	8006da8 <PxMessagingTask+0x60>
 8008242:	2300      	movs	r3, #0
 8008244:	4699      	mov	r9, r3
 8008246:	f7fe fdaf 	bl	8006da8 <PxMessagingTask+0x60>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800824a:	4553      	cmp	r3, sl
 800824c:	d003      	beq.n	8008256 <PxMessagingTask+0x150e>
 800824e:	2f10      	cmp	r7, #16
 8008250:	d001      	beq.n	8008256 <PxMessagingTask+0x150e>
 8008252:	f7fe fdfa 	bl	8006e4a <PxMessagingTask+0x102>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008256:	4653      	mov	r3, sl
 8008258:	2bff      	cmp	r3, #255	; 0xff
 800825a:	d101      	bne.n	8008260 <PxMessagingTask+0x1518>
 800825c:	f7fe fe16 	bl	8006e8c <PxMessagingTask+0x144>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008260:	2bfe      	cmp	r3, #254	; 0xfe
 8008262:	d001      	beq.n	8008268 <PxMessagingTask+0x1520>
 8008264:	f7fe fe1d 	bl	8006ea2 <PxMessagingTask+0x15a>
 8008268:	4b2f      	ldr	r3, [pc, #188]	; (8008328 <PxMessagingTask+0x15e0>)
 800826a:	199b      	adds	r3, r3, r6
 800826c:	1859      	adds	r1, r3, r1
 800826e:	3901      	subs	r1, #1
 8008270:	780b      	ldrb	r3, [r1, #0]
 8008272:	4a31      	ldr	r2, [pc, #196]	; (8008338 <PxMessagingTask+0x15f0>)
 8008274:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8008276:	2103      	movs	r1, #3
 8008278:	4689      	mov	r9, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800827a:	429a      	cmp	r2, r3
 800827c:	d101      	bne.n	8008282 <PxMessagingTask+0x153a>
 800827e:	f7fe fd8e 	bl	8006d9e <PxMessagingTask+0x56>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8008282:	4a2d      	ldr	r2, [pc, #180]	; (8008338 <PxMessagingTask+0x15f0>)
 8008284:	7013      	strb	r3, [r2, #0]
 8008286:	4a2d      	ldr	r2, [pc, #180]	; (800833c <PxMessagingTask+0x15f4>)
 8008288:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800828a:	9907      	ldr	r1, [sp, #28]
 800828c:	20fe      	movs	r0, #254	; 0xfe
 800828e:	f7fd f81f 	bl	80052d0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8008292:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <PxMessagingTask+0x15f8>)
 8008294:	5d19      	ldrb	r1, [r3, r4]
 8008296:	4b24      	ldr	r3, [pc, #144]	; (8008328 <PxMessagingTask+0x15e0>)
 8008298:	199b      	adds	r3, r3, r6
 800829a:	185a      	adds	r2, r3, r1
 800829c:	3a01      	subs	r2, #1
 800829e:	2000      	movs	r0, #0
 80082a0:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 80082a2:	1e8a      	subs	r2, r1, #2
 80082a4:	5c9b      	ldrb	r3, [r3, r2]
 80082a6:	9308      	str	r3, [sp, #32]
					for(i=0 ; i<temp ; i++)
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d035      	beq.n	8008318 <PxMessagingTask+0x15d0>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 80082ac:	1ad2      	subs	r2, r2, r3
 80082ae:	4694      	mov	ip, r2
 80082b0:	4b24      	ldr	r3, [pc, #144]	; (8008344 <PxMessagingTask+0x15fc>)
 80082b2:	7818      	ldrb	r0, [r3, #0]
 80082b4:	4b1c      	ldr	r3, [pc, #112]	; (8008328 <PxMessagingTask+0x15e0>)
 80082b6:	199b      	adds	r3, r3, r6
 80082b8:	5c9b      	ldrb	r3, [r3, r2]
 80082ba:	900a      	str	r0, [sp, #40]	; 0x28
 80082bc:	4283      	cmp	r3, r0
 80082be:	d019      	beq.n	80082f4 <PxMessagingTask+0x15ac>
 80082c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	4463      	add	r3, ip
 80082c6:	4a18      	ldr	r2, [pc, #96]	; (8008328 <PxMessagingTask+0x15e0>)
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	3201      	adds	r2, #1
 80082cc:	4681      	mov	r9, r0
 80082ce:	444a      	add	r2, r9
 80082d0:	9808      	ldr	r0, [sp, #32]
 80082d2:	3801      	subs	r0, #1
 80082d4:	b2c0      	uxtb	r0, r0
 80082d6:	4681      	mov	r9, r0
 80082d8:	444a      	add	r2, r9
 80082da:	4494      	add	ip, r2
 80082dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082de:	4660      	mov	r0, ip
 80082e0:	468c      	mov	ip, r1
 80082e2:	0011      	movs	r1, r2
					for(i=0 ; i<temp ; i++)
 80082e4:	4283      	cmp	r3, r0
 80082e6:	d017      	beq.n	8008318 <PxMessagingTask+0x15d0>
 80082e8:	3301      	adds	r3, #1
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 80082ea:	1e5a      	subs	r2, r3, #1
 80082ec:	7812      	ldrb	r2, [r2, #0]
 80082ee:	428a      	cmp	r2, r1
 80082f0:	d1f8      	bne.n	80082e4 <PxMessagingTask+0x159c>
 80082f2:	4661      	mov	r1, ip
				shift += 4;
 80082f4:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 80082f6:	1b4a      	subs	r2, r1, r5
 80082f8:	b2d3      	uxtb	r3, r2
 80082fa:	4699      	mov	r9, r3
 80082fc:	f7fe fddb 	bl	8006eb6 <PxMessagingTask+0x16e>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 8008300:	2338      	movs	r3, #56	; 0x38
 8008302:	4363      	muls	r3, r4
 8008304:	4a08      	ldr	r2, [pc, #32]	; (8008328 <PxMessagingTask+0x15e0>)
 8008306:	18d2      	adds	r2, r2, r3
 8008308:	464b      	mov	r3, r9
 800830a:	5cd3      	ldrb	r3, [r2, r3]
 800830c:	3b01      	subs	r3, #1
 800830e:	0098      	lsls	r0, r3, #2
 8008310:	490d      	ldr	r1, [pc, #52]	; (8008348 <PxMessagingTask+0x1600>)
 8008312:	5841      	ldr	r1, [r0, r1]
 8008314:	5dd2      	ldrb	r2, [r2, r7]
 8008316:	e52a      	b.n	8007d6e <PxMessagingTask+0x1026>
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8008318:	2366      	movs	r3, #102	; 0x66
 800831a:	4699      	mov	r9, r3
 800831c:	f7fe fd44 	bl	8006da8 <PxMessagingTask+0x60>
 8008320:	0001ffff 	.word	0x0001ffff
 8008324:	200012c0 	.word	0x200012c0
 8008328:	20000d48 	.word	0x20000d48
 800832c:	08017970 	.word	0x08017970
 8008330:	0000ffff 	.word	0x0000ffff
 8008334:	200012b8 	.word	0x200012b8
 8008338:	20000c8b 	.word	0x20000c8b
 800833c:	20000c8a 	.word	0x20000c8a
 8008340:	2000108c 	.word	0x2000108c
 8008344:	200011c8 	.word	0x200011c8
 8008348:	2000681c 	.word	0x2000681c

0800834c <scastCommand>:
{
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834e:	46de      	mov	lr, fp
 8008350:	4657      	mov	r7, sl
 8008352:	b580      	push	{r7, lr}
 8008354:	b09b      	sub	sp, #108	; 0x6c
 8008356:	0005      	movs	r5, r0
 8008358:	9009      	str	r0, [sp, #36]	; 0x24
 800835a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 800835c:	2300      	movs	r3, #0
 800835e:	9319      	str	r3, [sp, #100]	; 0x64
 8008360:	9318      	str	r3, [sp, #96]	; 0x60
 8008362:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8008364:	9316      	str	r3, [sp, #88]	; 0x58
 8008366:	9315      	str	r3, [sp, #84]	; 0x54
 8008368:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 800836a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 800836c:	220a      	movs	r2, #10
 800836e:	2100      	movs	r1, #0
 8008370:	a810      	add	r0, sp, #64	; 0x40
 8008372:	f00a fd45 	bl	8012e00 <memset>
 8008376:	220a      	movs	r2, #10
 8008378:	2100      	movs	r1, #0
 800837a:	a80d      	add	r0, sp, #52	; 0x34
 800837c:	f00a fd40 	bl	8012e00 <memset>
 8008380:	220a      	movs	r2, #10
 8008382:	2100      	movs	r1, #0
 8008384:	a80a      	add	r0, sp, #40	; 0x28
 8008386:	f00a fd3b 	bl	8012e00 <memset>
	configASSERT( pcWriteBuffer );
 800838a:	2d00      	cmp	r5, #0
 800838c:	d101      	bne.n	8008392 <scastCommand+0x46>
 800838e:	b672      	cpsid	i
 8008390:	e7fe      	b.n	8008390 <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8008392:	aa19      	add	r2, sp, #100	; 0x64
 8008394:	2101      	movs	r1, #1
 8008396:	0020      	movs	r0, r4
 8008398:	f005 f9e6 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 800839c:	2300      	movs	r3, #0
 800839e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80083a0:	2200      	movs	r2, #0
 80083a2:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 80083a4:	2b50      	cmp	r3, #80	; 0x50
 80083a6:	d100      	bne.n	80083aa <scastCommand+0x5e>
 80083a8:	e06d      	b.n	8008486 <scastCommand+0x13a>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80083aa:	aa18      	add	r2, sp, #96	; 0x60
 80083ac:	2102      	movs	r1, #2
 80083ae:	0020      	movs	r0, r4
 80083b0:	f005 f9da 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80083b4:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 80083b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083b8:	a810      	add	r0, sp, #64	; 0x40
 80083ba:	f00a ff70 	bl	801329e <strncpy>
	srcM = (uint8_t) GetID(par1);
 80083be:	a810      	add	r0, sp, #64	; 0x40
 80083c0:	f7fd ff5a 	bl	8006278 <GetID>
 80083c4:	b2c3      	uxtb	r3, r0
 80083c6:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80083c8:	aa17      	add	r2, sp, #92	; 0x5c
 80083ca:	2103      	movs	r1, #3
 80083cc:	0020      	movs	r0, r4
 80083ce:	f005 f9cb 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 80083d2:	2300      	movs	r3, #0
 80083d4:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80083d6:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 80083d8:	2b70      	cmp	r3, #112	; 0x70
 80083da:	d05a      	beq.n	8008492 <scastCommand+0x146>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80083dc:	aa16      	add	r2, sp, #88	; 0x58
 80083de:	2104      	movs	r1, #4
 80083e0:	0020      	movs	r0, r4
 80083e2:	f005 f9c1 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80083e6:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 80083e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083ea:	a80d      	add	r0, sp, #52	; 0x34
 80083ec:	f00a ff57 	bl	801329e <strncpy>
	dstM = (uint8_t) GetID(par2);
 80083f0:	a80d      	add	r0, sp, #52	; 0x34
 80083f2:	f7fd ff41 	bl	8006278 <GetID>
 80083f6:	b2c3      	uxtb	r3, r0
 80083f8:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80083fa:	aa15      	add	r2, sp, #84	; 0x54
 80083fc:	2105      	movs	r1, #5
 80083fe:	0020      	movs	r0, r4
 8008400:	f005 f9b2 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8008404:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008406:	0032      	movs	r2, r6
 8008408:	492b      	ldr	r1, [pc, #172]	; (80084b8 <scastCommand+0x16c>)
 800840a:	9007      	str	r0, [sp, #28]
 800840c:	f00a ff36 	bl	801327c <strncmp>
		direction = FORWARD;
 8008410:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8008412:	2800      	cmp	r0, #0
 8008414:	d00f      	beq.n	8008436 <scastCommand+0xea>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8008416:	0032      	movs	r2, r6
 8008418:	4928      	ldr	r1, [pc, #160]	; (80084bc <scastCommand+0x170>)
 800841a:	9807      	ldr	r0, [sp, #28]
 800841c:	f00a ff2e 	bl	801327c <strncmp>
		direction = BACKWARD;
 8008420:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8008422:	2800      	cmp	r0, #0
 8008424:	d007      	beq.n	8008436 <scastCommand+0xea>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8008426:	0032      	movs	r2, r6
 8008428:	4925      	ldr	r1, [pc, #148]	; (80084c0 <scastCommand+0x174>)
 800842a:	9807      	ldr	r0, [sp, #28]
 800842c:	f00a ff26 	bl	801327c <strncmp>
		direction = BIDIRECTIONAL;
 8008430:	4243      	negs	r3, r0
 8008432:	4158      	adcs	r0, r3
 8008434:	0045      	lsls	r5, r0, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8008436:	0032      	movs	r2, r6
 8008438:	9907      	ldr	r1, [sp, #28]
 800843a:	a80a      	add	r0, sp, #40	; 0x28
 800843c:	f00a ff2f 	bl	801329e <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8008440:	aa14      	add	r2, sp, #80	; 0x50
 8008442:	2106      	movs	r1, #6
 8008444:	0020      	movs	r0, r4
 8008446:	f005 f98f 	bl	800d768 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 800844a:	f00a fa46 	bl	80128da <atol>
 800844e:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8008450:	aa13      	add	r2, sp, #76	; 0x4c
 8008452:	2107      	movs	r1, #7
 8008454:	0020      	movs	r0, r4
 8008456:	f005 f987 	bl	800d768 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 800845a:	f00a fa3e 	bl	80128da <atol>
 800845e:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8008460:	2300      	movs	r3, #0
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	9002      	str	r0, [sp, #8]
 8008466:	9601      	str	r6, [sp, #4]
 8008468:	9500      	str	r5, [sp, #0]
 800846a:	465b      	mov	r3, fp
 800846c:	003a      	movs	r2, r7
 800846e:	4651      	mov	r1, sl
 8008470:	9808      	ldr	r0, [sp, #32]
 8008472:	f7fe fa63 	bl	800693c <StartScastDMAStream>
	if (result == BOS_OK) 
 8008476:	2800      	cmp	r0, #0
 8008478:	d010      	beq.n	800849c <scastCommand+0x150>
}
 800847a:	2000      	movs	r0, #0
 800847c:	b01b      	add	sp, #108	; 0x6c
 800847e:	bc0c      	pop	{r2, r3}
 8008480:	4692      	mov	sl, r2
 8008482:	469b      	mov	fp, r3
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8008486:	3001      	adds	r0, #1
 8008488:	f00a fa27 	bl	80128da <atol>
 800848c:	b2c3      	uxtb	r3, r0
 800848e:	9308      	str	r3, [sp, #32]
 8008490:	e78b      	b.n	80083aa <scastCommand+0x5e>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8008492:	3001      	adds	r0, #1
 8008494:	f00a fa21 	bl	80128da <atol>
 8008498:	b2c7      	uxtb	r7, r0
 800849a:	e79f      	b.n	80083dc <scastCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 800849c:	9404      	str	r4, [sp, #16]
 800849e:	9603      	str	r6, [sp, #12]
 80084a0:	ab0d      	add	r3, sp, #52	; 0x34
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	9701      	str	r7, [sp, #4]
 80084a6:	ab10      	add	r3, sp, #64	; 0x40
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	aa0a      	add	r2, sp, #40	; 0x28
 80084ae:	4905      	ldr	r1, [pc, #20]	; (80084c4 <scastCommand+0x178>)
 80084b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b2:	f00a fe9f 	bl	80131f4 <sprintf>
 80084b6:	e7e0      	b.n	800847a <scastCommand+0x12e>
 80084b8:	08018710 	.word	0x08018710
 80084bc:	08018718 	.word	0x08018718
 80084c0:	08018724 	.word	0x08018724
 80084c4:	08018734 	.word	0x08018734

080084c8 <AddPortButton>:
{
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	b08d      	sub	sp, #52	; 0x34
 80084cc:	0006      	movs	r6, r0
 80084ce:	000c      	movs	r4, r1
	if (BOS_initialized) {
 80084d0:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <AddPortButton+0x110>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d157      	bne.n	8008588 <AddPortButton+0xc0>
	portStatus[port] = PORTBUTTON;	
 80084d8:	4b40      	ldr	r3, [pc, #256]	; (80085dc <AddPortButton+0x114>)
 80084da:	2204      	movs	r2, #4
 80084dc:	551a      	strb	r2, [r3, r4]
	if (BOS_initialized) {
 80084de:	4b3e      	ldr	r3, [pc, #248]	; (80085d8 <AddPortButton+0x110>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d15a      	bne.n	800859c <AddPortButton+0xd4>
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 80084e6:	2512      	movs	r5, #18
 80084e8:	446d      	add	r5, sp
 80084ea:	af04      	add	r7, sp, #16
 80084ec:	9700      	str	r7, [sp, #0]
 80084ee:	ab05      	add	r3, sp, #20
 80084f0:	002a      	movs	r2, r5
 80084f2:	a906      	add	r1, sp, #24
 80084f4:	0020      	movs	r0, r4
 80084f6:	f7fc fb3b 	bl	8004b70 <GetPortGPIOs>
	GPIO_InitStruct.Pin = TX_Pin;
 80084fa:	882b      	ldrh	r3, [r5, #0]
 80084fc:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084fe:	2301      	movs	r3, #1
 8008500:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008502:	2500      	movs	r5, #0
 8008504:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008506:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8008508:	a907      	add	r1, sp, #28
 800850a:	9806      	ldr	r0, [sp, #24]
 800850c:	f008 f830 	bl	8010570 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RX_Pin;
 8008510:	883b      	ldrh	r3, [r7, #0]
 8008512:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008514:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008516:	2302      	movs	r3, #2
 8008518:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 800851a:	a907      	add	r1, sp, #28
 800851c:	9805      	ldr	r0, [sp, #20]
 800851e:	f008 f827 	bl	8010570 <HAL_GPIO_Init>
	button[port].type = buttonType;	
 8008522:	00e2      	lsls	r2, r4, #3
 8008524:	1912      	adds	r2, r2, r4
 8008526:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <AddPortButton+0x118>)
 8008528:	189b      	adds	r3, r3, r2
 800852a:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800852c:	0025      	movs	r5, r4
 800852e:	353a      	adds	r5, #58	; 0x3a
 8008530:	00ad      	lsls	r5, r5, #2
 8008532:	210e      	movs	r1, #14
 8008534:	4469      	add	r1, sp
 8008536:	0028      	movs	r0, r5
 8008538:	f002 fa24 	bl	800a984 <EE_ReadVariable>
	if(!res)																														// This variable exists
 800853c:	2800      	cmp	r0, #0
 800853e:	d133      	bne.n	80085a8 <AddPortButton+0xe0>
		temp8 = (uint8_t)(temp16 >> 8);
 8008540:	230e      	movs	r3, #14
 8008542:	446b      	add	r3, sp
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8008548:	091a      	lsrs	r2, r3, #4
 800854a:	42a2      	cmp	r2, r4
 800854c:	d103      	bne.n	8008556 <AddPortButton+0x8e>
 800854e:	220f      	movs	r2, #15
 8008550:	4013      	ands	r3, r2
 8008552:	42b3      	cmp	r3, r6
 8008554:	d015      	beq.n	8008582 <AddPortButton+0xba>
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008556:	0324      	lsls	r4, r4, #12
 8008558:	0231      	lsls	r1, r6, #8
 800855a:	4321      	orrs	r1, r4
 800855c:	b289      	uxth	r1, r1
 800855e:	230e      	movs	r3, #14
 8008560:	446b      	add	r3, sp
 8008562:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008564:	0028      	movs	r0, r5
 8008566:	f002 fa3d 	bl	800a9e4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800856a:	1c68      	adds	r0, r5, #1
 800856c:	2100      	movs	r1, #0
 800856e:	f002 fa39 	bl	800a9e4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008572:	1ca8      	adds	r0, r5, #2
 8008574:	2100      	movs	r1, #0
 8008576:	f002 fa35 	bl	800a9e4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 800857a:	1ce8      	adds	r0, r5, #3
 800857c:	2100      	movs	r1, #0
 800857e:	f002 fa31 	bl	800a9e4 <EE_WriteVariable>
}
 8008582:	2000      	movs	r0, #0
 8008584:	b00d      	add	sp, #52	; 0x34
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8008588:	008d      	lsls	r5, r1, #2
 800858a:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <AddPortButton+0x11c>)
 800858c:	58e8      	ldr	r0, [r5, r3]
 800858e:	f005 f81d 	bl	800d5cc <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008592:	4b15      	ldr	r3, [pc, #84]	; (80085e8 <AddPortButton+0x120>)
 8008594:	58e8      	ldr	r0, [r5, r3]
 8008596:	f005 f819 	bl	800d5cc <osSemaphoreRelease>
 800859a:	e79d      	b.n	80084d8 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800859c:	0020      	movs	r0, r4
 800859e:	f7fc f94b 	bl	8004838 <GetUart>
 80085a2:	f009 fbd4 	bl	8011d4e <HAL_UART_DeInit>
 80085a6:	e79e      	b.n	80084e6 <AddPortButton+0x1e>
		temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80085a8:	0324      	lsls	r4, r4, #12
 80085aa:	0231      	lsls	r1, r6, #8
 80085ac:	4321      	orrs	r1, r4
 80085ae:	b289      	uxth	r1, r1
 80085b0:	230e      	movs	r3, #14
 80085b2:	446b      	add	r3, sp
 80085b4:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 80085b6:	0028      	movs	r0, r5
 80085b8:	f002 fa14 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80085bc:	1c68      	adds	r0, r5, #1
 80085be:	2100      	movs	r1, #0
 80085c0:	f002 fa10 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80085c4:	1ca8      	adds	r0, r5, #2
 80085c6:	2100      	movs	r1, #0
 80085c8:	f002 fa0c 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80085cc:	1ce8      	adds	r0, r5, #3
 80085ce:	2100      	movs	r1, #0
 80085d0:	f002 fa08 	bl	800a9e4 <EE_WriteVariable>
 80085d4:	e7d5      	b.n	8008582 <AddPortButton+0xba>
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	20000a2d 	.word	0x20000a2d
 80085dc:	20001270 	.word	0x20001270
 80085e0:	20000cdc 	.word	0x20000cdc
 80085e4:	20006990 	.word	0x20006990
 80085e8:	20006974 	.word	0x20006974

080085ec <addbuttonCommand>:
{
 80085ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ee:	b087      	sub	sp, #28
 80085f0:	0006      	movs	r6, r0
 80085f2:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80085f4:	2300      	movs	r3, #0
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d101      	bne.n	8008602 <addbuttonCommand+0x16>
 80085fe:	b672      	cpsid	i
 8008600:	e7fe      	b.n	8008600 <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8008602:	aa05      	add	r2, sp, #20
 8008604:	2101      	movs	r1, #1
 8008606:	9803      	ldr	r0, [sp, #12]
 8008608:	f005 f8ae 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800860c:	0004      	movs	r4, r0
 800860e:	4b23      	ldr	r3, [pc, #140]	; (800869c <addbuttonCommand+0xb0>)
 8008610:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8008612:	9d05      	ldr	r5, [sp, #20]
 8008614:	002a      	movs	r2, r5
 8008616:	4922      	ldr	r1, [pc, #136]	; (80086a0 <addbuttonCommand+0xb4>)
 8008618:	f00a fe30 	bl	801327c <strncmp>
		type = MOMENTARY_NO;
 800861c:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 800861e:	2800      	cmp	r0, #0
 8008620:	d017      	beq.n	8008652 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8008622:	002a      	movs	r2, r5
 8008624:	491f      	ldr	r1, [pc, #124]	; (80086a4 <addbuttonCommand+0xb8>)
 8008626:	0020      	movs	r0, r4
 8008628:	f00a fe28 	bl	801327c <strncmp>
		type = MOMENTARY_NC;
 800862c:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 800862e:	2800      	cmp	r0, #0
 8008630:	d00f      	beq.n	8008652 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8008632:	002a      	movs	r2, r5
 8008634:	491c      	ldr	r1, [pc, #112]	; (80086a8 <addbuttonCommand+0xbc>)
 8008636:	0020      	movs	r0, r4
 8008638:	f00a fe20 	bl	801327c <strncmp>
		type = ONOFF_NO;
 800863c:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 800863e:	2800      	cmp	r0, #0
 8008640:	d007      	beq.n	8008652 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8008642:	002a      	movs	r2, r5
 8008644:	4919      	ldr	r1, [pc, #100]	; (80086ac <addbuttonCommand+0xc0>)
 8008646:	0020      	movs	r0, r4
 8008648:	f00a fe18 	bl	801327c <strncmp>
		type = ONOFF_NC;
 800864c:	4243      	negs	r3, r0
 800864e:	4158      	adcs	r0, r3
 8008650:	0087      	lsls	r7, r0, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008652:	aa04      	add	r2, sp, #16
 8008654:	2102      	movs	r1, #2
 8008656:	9803      	ldr	r0, [sp, #12]
 8008658:	f005 f886 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800865c:	2300      	movs	r3, #0
 800865e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8008660:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 8008662:	2b70      	cmp	r3, #112	; 0x70
 8008664:	d008      	beq.n	8008678 <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8008666:	0021      	movs	r1, r4
 8008668:	0038      	movs	r0, r7
 800866a:	f7ff ff2d 	bl	80084c8 <AddPortButton>
	if (result == BOS_OK) 
 800866e:	2800      	cmp	r0, #0
 8008670:	d007      	beq.n	8008682 <addbuttonCommand+0x96>
}
 8008672:	2000      	movs	r0, #0
 8008674:	b007      	add	sp, #28
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8008678:	3001      	adds	r0, #1
 800867a:	f00a f92e 	bl	80128da <atol>
 800867e:	b2c4      	uxtb	r4, r0
 8008680:	e7f1      	b.n	8008666 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <addbuttonCommand+0xb0>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	9905      	ldr	r1, [sp, #20]
 800868a:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 800868c:	9400      	str	r4, [sp, #0]
 800868e:	0023      	movs	r3, r4
 8008690:	4907      	ldr	r1, [pc, #28]	; (80086b0 <addbuttonCommand+0xc4>)
 8008692:	0030      	movs	r0, r6
 8008694:	f00a fdae 	bl	80131f4 <sprintf>
 8008698:	e7eb      	b.n	8008672 <addbuttonCommand+0x86>
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	200011fc 	.word	0x200011fc
 80086a0:	08017c50 	.word	0x08017c50
 80086a4:	08017c60 	.word	0x08017c60
 80086a8:	08017c70 	.word	0x08017c70
 80086ac:	08017c7c 	.word	0x08017c7c
 80086b0:	08017c88 	.word	0x08017c88

080086b4 <RemovePortButton>:
{
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	0005      	movs	r5, r0
	button[port].type = NONE;
 80086ba:	4836      	ldr	r0, [pc, #216]	; (8008794 <RemovePortButton+0xe0>)
 80086bc:	00e9      	lsls	r1, r5, #3
 80086be:	1949      	adds	r1, r1, r5
 80086c0:	1842      	adds	r2, r0, r1
 80086c2:	2300      	movs	r3, #0
 80086c4:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80086c6:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80086c8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 80086ca:	7093      	strb	r3, [r2, #2]
 80086cc:	70d3      	strb	r3, [r2, #3]
 80086ce:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 80086d0:	7153      	strb	r3, [r2, #5]
 80086d2:	7193      	strb	r3, [r2, #6]
 80086d4:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80086d6:	002c      	movs	r4, r5
 80086d8:	343a      	adds	r4, #58	; 0x3a
 80086da:	00a4      	lsls	r4, r4, #2
 80086dc:	466b      	mov	r3, sp
 80086de:	1d99      	adds	r1, r3, #6
 80086e0:	0020      	movs	r0, r4
 80086e2:	f002 f94f 	bl	800a984 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d02b      	beq.n	8008742 <RemovePortButton+0x8e>
	UART_HandleTypeDef* huart = GetUart(port);
 80086ea:	0028      	movs	r0, r5
 80086ec:	f7fc f8a4 	bl	8004838 <GetUart>
 80086f0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) 
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	4a28      	ldr	r2, [pc, #160]	; (8008798 <RemovePortButton+0xe4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d034      	beq.n	8008764 <RemovePortButton+0xb0>
	else if (huart->Instance == USART2) 
 80086fa:	4a28      	ldr	r2, [pc, #160]	; (800879c <RemovePortButton+0xe8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d035      	beq.n	800876c <RemovePortButton+0xb8>
	else if (huart->Instance == USART3) 
 8008700:	4a27      	ldr	r2, [pc, #156]	; (80087a0 <RemovePortButton+0xec>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d036      	beq.n	8008774 <RemovePortButton+0xc0>
	else if (huart->Instance == USART4) 
 8008706:	4a27      	ldr	r2, [pc, #156]	; (80087a4 <RemovePortButton+0xf0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d03f      	beq.n	800878c <RemovePortButton+0xd8>
	else if (huart->Instance == USART5) 
 800870c:	4a26      	ldr	r2, [pc, #152]	; (80087a8 <RemovePortButton+0xf4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d034      	beq.n	800877c <RemovePortButton+0xc8>
	else if (huart->Instance == USART6) 
 8008712:	4a26      	ldr	r2, [pc, #152]	; (80087ac <RemovePortButton+0xf8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d035      	beq.n	8008784 <RemovePortButton+0xd0>
	else if (huart->Instance == USART7) 
 8008718:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <RemovePortButton+0xfc>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d038      	beq.n	8008790 <RemovePortButton+0xdc>
	else if (huart->Instance == USART8) 
 800871e:	4a25      	ldr	r2, [pc, #148]	; (80087b4 <RemovePortButton+0x100>)
 8008720:	4694      	mov	ip, r2
 8008722:	4463      	add	r3, ip
 8008724:	1e5c      	subs	r4, r3, #1
 8008726:	41a3      	sbcs	r3, r4
 8008728:	425c      	negs	r4, r3
 800872a:	b2e4      	uxtb	r4, r4
	portStatus[port] = FREE;
 800872c:	4b22      	ldr	r3, [pc, #136]	; (80087b8 <RemovePortButton+0x104>)
 800872e:	2200      	movs	r2, #0
 8008730:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8008732:	3201      	adds	r2, #1
 8008734:	4921      	ldr	r1, [pc, #132]	; (80087bc <RemovePortButton+0x108>)
 8008736:	0030      	movs	r0, r6
 8008738:	f009 fb62 	bl	8011e00 <HAL_UART_Receive_IT>
}
 800873c:	0020      	movs	r0, r4
 800873e:	b002      	add	sp, #8
 8008740:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8008742:	2100      	movs	r1, #0
 8008744:	0020      	movs	r0, r4
 8008746:	f002 f94d 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800874a:	1c60      	adds	r0, r4, #1
 800874c:	2100      	movs	r1, #0
 800874e:	f002 f949 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008752:	1ca0      	adds	r0, r4, #2
 8008754:	2100      	movs	r1, #0
 8008756:	f002 f945 	bl	800a9e4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 800875a:	1ce0      	adds	r0, r4, #3
 800875c:	2100      	movs	r1, #0
 800875e:	f002 f941 	bl	800a9e4 <EE_WriteVariable>
 8008762:	e7c2      	b.n	80086ea <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008764:	f004 fc6e 	bl	800d044 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008768:	2400      	movs	r4, #0
 800876a:	e7df      	b.n	800872c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800876c:	f004 fc82 	bl	800d074 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008770:	2400      	movs	r4, #0
 8008772:	e7db      	b.n	800872c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008774:	f004 fc96 	bl	800d0a4 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008778:	2400      	movs	r4, #0
 800877a:	e7d7      	b.n	800872c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800877c:	f004 fcaa 	bl	800d0d4 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008780:	2400      	movs	r4, #0
 8008782:	e7d3      	b.n	800872c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008784:	f004 fcbe 	bl	800d104 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008788:	2400      	movs	r4, #0
 800878a:	e7cf      	b.n	800872c <RemovePortButton+0x78>
 800878c:	2400      	movs	r4, #0
 800878e:	e7cd      	b.n	800872c <RemovePortButton+0x78>
 8008790:	2400      	movs	r4, #0
 8008792:	e7cb      	b.n	800872c <RemovePortButton+0x78>
 8008794:	20000cdc 	.word	0x20000cdc
 8008798:	40013800 	.word	0x40013800
 800879c:	40004400 	.word	0x40004400
 80087a0:	40004800 	.word	0x40004800
 80087a4:	40004c00 	.word	0x40004c00
 80087a8:	40005000 	.word	0x40005000
 80087ac:	40011400 	.word	0x40011400
 80087b0:	40011800 	.word	0x40011800
 80087b4:	bffee400 	.word	0xbffee400
 80087b8:	20001270 	.word	0x20001270
 80087bc:	20000e60 	.word	0x20000e60

080087c0 <removebuttonCommand>:
{
 80087c0:	b530      	push	{r4, r5, lr}
 80087c2:	b083      	sub	sp, #12
 80087c4:	0005      	movs	r5, r0
 80087c6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 80087c8:	2300      	movs	r3, #0
 80087ca:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d101      	bne.n	80087d4 <removebuttonCommand+0x14>
 80087d0:	b672      	cpsid	i
 80087d2:	e7fe      	b.n	80087d2 <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80087d4:	aa01      	add	r2, sp, #4
 80087d6:	2101      	movs	r1, #1
 80087d8:	f004 ffc6 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80087dc:	2300      	movs	r3, #0
 80087de:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 80087e0:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 80087e2:	2b70      	cmp	r3, #112	; 0x70
 80087e4:	d007      	beq.n	80087f6 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 80087e6:	0020      	movs	r0, r4
 80087e8:	f7ff ff64 	bl	80086b4 <RemovePortButton>
	if (result == BOS_OK) 
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d007      	beq.n	8008800 <removebuttonCommand+0x40>
}
 80087f0:	2000      	movs	r0, #0
 80087f2:	b003      	add	sp, #12
 80087f4:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80087f6:	3001      	adds	r0, #1
 80087f8:	f00a f86f 	bl	80128da <atol>
 80087fc:	b2c4      	uxtb	r4, r0
 80087fe:	e7f2      	b.n	80087e6 <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8008800:	0023      	movs	r3, r4
 8008802:	0022      	movs	r2, r4
 8008804:	4902      	ldr	r1, [pc, #8]	; (8008810 <removebuttonCommand+0x50>)
 8008806:	0028      	movs	r0, r5
 8008808:	f00a fcf4 	bl	80131f4 <sprintf>
 800880c:	e7f0      	b.n	80087f0 <removebuttonCommand+0x30>
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	080186c8 	.word	0x080186c8

08008814 <SetButtonEvents>:
{
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	46de      	mov	lr, fp
 8008818:	4657      	mov	r7, sl
 800881a:	464e      	mov	r6, r9
 800881c:	4645      	mov	r5, r8
 800881e:	b5e0      	push	{r5, r6, r7, lr}
 8008820:	b085      	sub	sp, #20
 8008822:	0007      	movs	r7, r0
 8008824:	001e      	movs	r6, r3
 8008826:	ab0e      	add	r3, sp, #56	; 0x38
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	4698      	mov	r8, r3
 800882c:	ab0f      	add	r3, sp, #60	; 0x3c
 800882e:	781d      	ldrb	r5, [r3, #0]
 8008830:	ab10      	add	r3, sp, #64	; 0x40
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	469b      	mov	fp, r3
 8008836:	ab11      	add	r3, sp, #68	; 0x44
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	469a      	mov	sl, r3
 800883c:	ab12      	add	r3, sp, #72	; 0x48
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4699      	mov	r9, r3
 8008842:	ab13      	add	r3, sp, #76	; 0x4c
 8008844:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 8008846:	00fc      	lsls	r4, r7, #3
 8008848:	19e4      	adds	r4, r4, r7
 800884a:	4b9e      	ldr	r3, [pc, #632]	; (8008ac4 <SetButtonEvents+0x2b0>)
 800884c:	191b      	adds	r3, r3, r4
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d04c      	beq.n	80088ee <SetButtonEvents+0xda>
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008854:	00fc      	lsls	r4, r7, #3
 8008856:	19e4      	adds	r4, r4, r7
 8008858:	4b9a      	ldr	r3, [pc, #616]	; (8008ac4 <SetButtonEvents+0x2b0>)
 800885a:	191b      	adds	r3, r3, r4
 800885c:	709e      	strb	r6, [r3, #2]
 800885e:	4644      	mov	r4, r8
 8008860:	70dc      	strb	r4, [r3, #3]
 8008862:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008864:	465c      	mov	r4, fp
 8008866:	715c      	strb	r4, [r3, #5]
 8008868:	4654      	mov	r4, sl
 800886a:	719c      	strb	r4, [r3, #6]
 800886c:	464c      	mov	r4, r9
 800886e:	71dc      	strb	r4, [r3, #7]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008870:	2801      	cmp	r0, #1
 8008872:	d003      	beq.n	800887c <SetButtonEvents+0x68>
 8008874:	2800      	cmp	r0, #0
 8008876:	d113      	bne.n	80088a0 <SetButtonEvents+0x8c>
 8008878:	2900      	cmp	r1, #0
 800887a:	d042      	beq.n	8008902 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800887c:	00f9      	lsls	r1, r7, #3
 800887e:	19c9      	adds	r1, r1, r7
 8008880:	4b90      	ldr	r3, [pc, #576]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008882:	185b      	adds	r3, r3, r1
 8008884:	7a19      	ldrb	r1, [r3, #8]
 8008886:	2401      	movs	r4, #1
 8008888:	4321      	orrs	r1, r4
 800888a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800888c:	2801      	cmp	r0, #1
 800888e:	d10c      	bne.n	80088aa <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008890:	00fa      	lsls	r2, r7, #3
 8008892:	19d2      	adds	r2, r2, r7
 8008894:	4b8b      	ldr	r3, [pc, #556]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008896:	189b      	adds	r3, r3, r2
 8008898:	7a1a      	ldrb	r2, [r3, #8]
 800889a:	2102      	movs	r1, #2
 800889c:	430a      	orrs	r2, r1
 800889e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80088a0:	2801      	cmp	r0, #1
 80088a2:	d042      	beq.n	800892a <SetButtonEvents+0x116>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d152      	bne.n	800894e <SetButtonEvents+0x13a>
 80088a8:	e03d      	b.n	8008926 <SetButtonEvents+0x112>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d031      	beq.n	8008912 <SetButtonEvents+0xfe>
 80088ae:	e044      	b.n	800893a <SetButtonEvents+0x126>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d059      	beq.n	8008968 <SetButtonEvents+0x154>
 80088b4:	e06d      	b.n	8008992 <SetButtonEvents+0x17e>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d100      	bne.n	80088bc <SetButtonEvents+0xa8>
 80088ba:	e082      	b.n	80089c2 <SetButtonEvents+0x1ae>
 80088bc:	e097      	b.n	80089ee <SetButtonEvents+0x1da>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80088be:	2800      	cmp	r0, #0
 80088c0:	d100      	bne.n	80088c4 <SetButtonEvents+0xb0>
 80088c2:	e0f2      	b.n	8008aaa <SetButtonEvents+0x296>
 80088c4:	e09f      	b.n	8008a06 <SetButtonEvents+0x1f2>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 80088c6:	0a19      	lsrs	r1, r3, #8
 80088c8:	0209      	lsls	r1, r1, #8
 80088ca:	4311      	orrs	r1, r2
 80088cc:	ab02      	add	r3, sp, #8
 80088ce:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80088d0:	0020      	movs	r0, r4
 80088d2:	f002 f887 	bl	800a9e4 <EE_WriteVariable>
 80088d6:	e0ad      	b.n	8008a34 <SetButtonEvents+0x220>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 80088d8:	0019      	movs	r1, r3
 80088da:	9801      	ldr	r0, [sp, #4]
 80088dc:	f002 f882 	bl	800a9e4 <EE_WriteVariable>
 80088e0:	e0b7      	b.n	8008a52 <SetButtonEvents+0x23e>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 80088e2:	4653      	mov	r3, sl
 80088e4:	4319      	orrs	r1, r3
 80088e6:	0030      	movs	r0, r6
 80088e8:	f002 f87c 	bl	800a9e4 <EE_WriteVariable>
 80088ec:	e0c0      	b.n	8008a70 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80088ee:	200b      	movs	r0, #11
}
 80088f0:	b005      	add	sp, #20
 80088f2:	bc3c      	pop	{r2, r3, r4, r5}
 80088f4:	4690      	mov	r8, r2
 80088f6:	4699      	mov	r9, r3
 80088f8:	46a2      	mov	sl, r4
 80088fa:	46ab      	mov	fp, r5
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 80088fe:	200b      	movs	r0, #11
 8008900:	e7f6      	b.n	80088f0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008902:	00f9      	lsls	r1, r7, #3
 8008904:	19c9      	adds	r1, r1, r7
 8008906:	4b6f      	ldr	r3, [pc, #444]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008908:	185b      	adds	r3, r3, r1
 800890a:	7a19      	ldrb	r1, [r3, #8]
 800890c:	2401      	movs	r4, #1
 800890e:	43a1      	bics	r1, r4
 8008910:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008912:	2a00      	cmp	r2, #0
 8008914:	d1bc      	bne.n	8008890 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008916:	00fa      	lsls	r2, r7, #3
 8008918:	19d2      	adds	r2, r2, r7
 800891a:	4b6a      	ldr	r3, [pc, #424]	; (8008ac4 <SetButtonEvents+0x2b0>)
 800891c:	189b      	adds	r3, r3, r2
 800891e:	7a1a      	ldrb	r2, [r3, #8]
 8008920:	2102      	movs	r1, #2
 8008922:	438a      	bics	r2, r1
 8008924:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008926:	2e00      	cmp	r6, #0
 8008928:	d016      	beq.n	8008958 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800892a:	00fa      	lsls	r2, r7, #3
 800892c:	19d2      	adds	r2, r2, r7
 800892e:	4b65      	ldr	r3, [pc, #404]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008930:	189b      	adds	r3, r3, r2
 8008932:	7a1a      	ldrb	r2, [r3, #8]
 8008934:	2104      	movs	r1, #4
 8008936:	430a      	orrs	r2, r1
 8008938:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 800893a:	2801      	cmp	r0, #1
 800893c:	d1b8      	bne.n	80088b0 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800893e:	00fa      	lsls	r2, r7, #3
 8008940:	19d2      	adds	r2, r2, r7
 8008942:	4b60      	ldr	r3, [pc, #384]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008944:	189b      	adds	r3, r3, r2
 8008946:	7a1a      	ldrb	r2, [r3, #8]
 8008948:	2108      	movs	r1, #8
 800894a:	430a      	orrs	r2, r1
 800894c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800894e:	2801      	cmp	r0, #1
 8008950:	d017      	beq.n	8008982 <SetButtonEvents+0x16e>
 8008952:	2800      	cmp	r0, #0
 8008954:	d128      	bne.n	80089a8 <SetButtonEvents+0x194>
 8008956:	e012      	b.n	800897e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008958:	00fa      	lsls	r2, r7, #3
 800895a:	19d2      	adds	r2, r2, r7
 800895c:	4b59      	ldr	r3, [pc, #356]	; (8008ac4 <SetButtonEvents+0x2b0>)
 800895e:	189b      	adds	r3, r3, r2
 8008960:	7a1a      	ldrb	r2, [r3, #8]
 8008962:	2104      	movs	r1, #4
 8008964:	438a      	bics	r2, r1
 8008966:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008968:	4643      	mov	r3, r8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e7      	bne.n	800893e <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 800896e:	00fa      	lsls	r2, r7, #3
 8008970:	19d2      	adds	r2, r2, r7
 8008972:	4b54      	ldr	r3, [pc, #336]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008974:	189b      	adds	r3, r3, r2
 8008976:	7a1a      	ldrb	r2, [r3, #8]
 8008978:	2108      	movs	r1, #8
 800897a:	438a      	bics	r2, r1
 800897c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800897e:	2d00      	cmp	r5, #0
 8008980:	d017      	beq.n	80089b2 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008982:	00fa      	lsls	r2, r7, #3
 8008984:	19d2      	adds	r2, r2, r7
 8008986:	4b4f      	ldr	r3, [pc, #316]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008988:	189b      	adds	r3, r3, r2
 800898a:	7a1a      	ldrb	r2, [r3, #8]
 800898c:	2110      	movs	r1, #16
 800898e:	430a      	orrs	r2, r1
 8008990:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008992:	2801      	cmp	r0, #1
 8008994:	d000      	beq.n	8008998 <SetButtonEvents+0x184>
 8008996:	e78e      	b.n	80088b6 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008998:	00fa      	lsls	r2, r7, #3
 800899a:	19d2      	adds	r2, r2, r7
 800899c:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <SetButtonEvents+0x2b0>)
 800899e:	189b      	adds	r3, r3, r2
 80089a0:	7a1a      	ldrb	r2, [r3, #8]
 80089a2:	2120      	movs	r1, #32
 80089a4:	430a      	orrs	r2, r1
 80089a6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80089a8:	2801      	cmp	r0, #1
 80089aa:	d018      	beq.n	80089de <SetButtonEvents+0x1ca>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d12a      	bne.n	8008a06 <SetButtonEvents+0x1f2>
 80089b0:	e012      	b.n	80089d8 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 80089b2:	00fa      	lsls	r2, r7, #3
 80089b4:	19d2      	adds	r2, r2, r7
 80089b6:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <SetButtonEvents+0x2b0>)
 80089b8:	189b      	adds	r3, r3, r2
 80089ba:	7a1a      	ldrb	r2, [r3, #8]
 80089bc:	2110      	movs	r1, #16
 80089be:	438a      	bics	r2, r1
 80089c0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 80089c2:	465b      	mov	r3, fp
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e7      	bne.n	8008998 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 80089c8:	00fa      	lsls	r2, r7, #3
 80089ca:	19d2      	adds	r2, r2, r7
 80089cc:	4b3d      	ldr	r3, [pc, #244]	; (8008ac4 <SetButtonEvents+0x2b0>)
 80089ce:	189b      	adds	r3, r3, r2
 80089d0:	7a1a      	ldrb	r2, [r3, #8]
 80089d2:	2120      	movs	r1, #32
 80089d4:	438a      	bics	r2, r1
 80089d6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80089d8:	4653      	mov	r3, sl
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d05d      	beq.n	8008a9a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80089de:	00fa      	lsls	r2, r7, #3
 80089e0:	19d2      	adds	r2, r2, r7
 80089e2:	4b38      	ldr	r3, [pc, #224]	; (8008ac4 <SetButtonEvents+0x2b0>)
 80089e4:	189b      	adds	r3, r3, r2
 80089e6:	7a1a      	ldrb	r2, [r3, #8]
 80089e8:	2140      	movs	r1, #64	; 0x40
 80089ea:	430a      	orrs	r2, r1
 80089ec:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80089ee:	2801      	cmp	r0, #1
 80089f0:	d000      	beq.n	80089f4 <SetButtonEvents+0x1e0>
 80089f2:	e764      	b.n	80088be <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 80089f4:	00fa      	lsls	r2, r7, #3
 80089f6:	19d2      	adds	r2, r2, r7
 80089f8:	4b32      	ldr	r3, [pc, #200]	; (8008ac4 <SetButtonEvents+0x2b0>)
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	7a19      	ldrb	r1, [r3, #8]
 80089fe:	2280      	movs	r2, #128	; 0x80
 8008a00:	4252      	negs	r2, r2
 8008a02:	430a      	orrs	r2, r1
 8008a04:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008a06:	003c      	movs	r4, r7
 8008a08:	343a      	adds	r4, #58	; 0x3a
 8008a0a:	00a4      	lsls	r4, r4, #2
 8008a0c:	ab02      	add	r3, sp, #8
 8008a0e:	1d99      	adds	r1, r3, #6
 8008a10:	0020      	movs	r0, r4
 8008a12:	f001 ffb7 	bl	800a984 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d000      	beq.n	8008a1c <SetButtonEvents+0x208>
 8008a1a:	e770      	b.n	80088fe <SetButtonEvents+0xea>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008a1c:	ab02      	add	r3, sp, #8
 8008a1e:	3306      	adds	r3, #6
 8008a20:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008a22:	00fa      	lsls	r2, r7, #3
 8008a24:	19d2      	adds	r2, r2, r7
 8008a26:	4f27      	ldr	r7, [pc, #156]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008a28:	18bf      	adds	r7, r7, r2
 8008a2a:	7a3a      	ldrb	r2, [r7, #8]
 8008a2c:	b2d9      	uxtb	r1, r3
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d000      	beq.n	8008a34 <SetButtonEvents+0x220>
 8008a32:	e748      	b.n	80088c6 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008a34:	1c63      	adds	r3, r4, #1
 8008a36:	aa02      	add	r2, sp, #8
 8008a38:	1d97      	adds	r7, r2, #6
 8008a3a:	0039      	movs	r1, r7
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f001 ffa0 	bl	800a984 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008a44:	0236      	lsls	r6, r6, #8
 8008a46:	883a      	ldrh	r2, [r7, #0]
 8008a48:	465b      	mov	r3, fp
 8008a4a:	4333      	orrs	r3, r6
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d000      	beq.n	8008a52 <SetButtonEvents+0x23e>
 8008a50:	e742      	b.n	80088d8 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008a52:	1ca6      	adds	r6, r4, #2
 8008a54:	ab02      	add	r3, sp, #8
 8008a56:	1d9f      	adds	r7, r3, #6
 8008a58:	0039      	movs	r1, r7
 8008a5a:	0030      	movs	r0, r6
 8008a5c:	f001 ff92 	bl	800a984 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008a60:	4643      	mov	r3, r8
 8008a62:	0219      	lsls	r1, r3, #8
 8008a64:	883a      	ldrh	r2, [r7, #0]
 8008a66:	4653      	mov	r3, sl
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d000      	beq.n	8008a70 <SetButtonEvents+0x25c>
 8008a6e:	e738      	b.n	80088e2 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008a70:	3403      	adds	r4, #3
 8008a72:	ab02      	add	r3, sp, #8
 8008a74:	1d9e      	adds	r6, r3, #6
 8008a76:	0031      	movs	r1, r6
 8008a78:	0020      	movs	r0, r4
 8008a7a:	f001 ff83 	bl	800a984 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008a7e:	022d      	lsls	r5, r5, #8
 8008a80:	8832      	ldrh	r2, [r6, #0]
 8008a82:	464b      	mov	r3, r9
 8008a84:	432b      	orrs	r3, r5
	return result;
 8008a86:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d100      	bne.n	8008a8e <SetButtonEvents+0x27a>
 8008a8c:	e730      	b.n	80088f0 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008a8e:	0019      	movs	r1, r3
 8008a90:	0020      	movs	r0, r4
 8008a92:	f001 ffa7 	bl	800a9e4 <EE_WriteVariable>
	return result;
 8008a96:	2000      	movs	r0, #0
 8008a98:	e72a      	b.n	80088f0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008a9a:	00fa      	lsls	r2, r7, #3
 8008a9c:	19d2      	adds	r2, r2, r7
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	7a1a      	ldrb	r2, [r3, #8]
 8008aa4:	2140      	movs	r1, #64	; 0x40
 8008aa6:	438a      	bics	r2, r1
 8008aa8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008aaa:	464b      	mov	r3, r9
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1a1      	bne.n	80089f4 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008ab0:	00fa      	lsls	r2, r7, #3
 8008ab2:	19d2      	adds	r2, r2, r7
 8008ab4:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <SetButtonEvents+0x2b0>)
 8008ab6:	189b      	adds	r3, r3, r2
 8008ab8:	7a19      	ldrb	r1, [r3, #8]
 8008aba:	227f      	movs	r2, #127	; 0x7f
 8008abc:	400a      	ands	r2, r1
 8008abe:	721a      	strb	r2, [r3, #8]
 8008ac0:	e7a1      	b.n	8008a06 <SetButtonEvents+0x1f2>
 8008ac2:	46c0      	nop			; (mov r8, r8)
 8008ac4:	20000cdc 	.word	0x20000cdc

08008ac8 <LoadEEbuttons>:
{
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	46ce      	mov	lr, r9
 8008acc:	4647      	mov	r7, r8
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b089      	sub	sp, #36	; 0x24
	uint16_t temp16 = 0, status1 = 0; 
 8008ad2:	231e      	movs	r3, #30
 8008ad4:	446b      	add	r3, sp
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	801a      	strh	r2, [r3, #0]
 8008ada:	2501      	movs	r5, #1
 8008adc:	24ec      	movs	r4, #236	; 0xec
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8008ade:	001e      	movs	r6, r3
 8008ae0:	230f      	movs	r3, #15
 8008ae2:	4698      	mov	r8, r3
 8008ae4:	e004      	b.n	8008af0 <LoadEEbuttons+0x28>
 8008ae6:	3404      	adds	r4, #4
 8008ae8:	b2a4      	uxth	r4, r4
 8008aea:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8008aec:	2d07      	cmp	r5, #7
 8008aee:	d058      	beq.n	8008ba2 <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8008af0:	0031      	movs	r1, r6
 8008af2:	0020      	movs	r0, r4
 8008af4:	f001 ff46 	bl	800a984 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1f4      	bne.n	8008ae6 <LoadEEbuttons+0x1e>
			temp8 = (uint8_t)(temp16 >> 8);
 8008afc:	8831      	ldrh	r1, [r6, #0]
 8008afe:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8008b00:	091a      	lsrs	r2, r3, #4
 8008b02:	42aa      	cmp	r2, r5
 8008b04:	d1ef      	bne.n	8008ae6 <LoadEEbuttons+0x1e>
 8008b06:	4640      	mov	r0, r8
 8008b08:	4003      	ands	r3, r0
 8008b0a:	d0ec      	beq.n	8008ae6 <LoadEEbuttons+0x1e>
				button[i+1].type = temp8 & 0x0F;
 8008b0c:	00d0      	lsls	r0, r2, #3
 8008b0e:	1882      	adds	r2, r0, r2
 8008b10:	4827      	ldr	r0, [pc, #156]	; (8008bb0 <LoadEEbuttons+0xe8>)
 8008b12:	4681      	mov	r9, r0
 8008b14:	4491      	add	r9, r2
 8008b16:	464a      	mov	r2, r9
 8008b18:	7053      	strb	r3, [r2, #1]
				button[i+1].events = (uint8_t)temp16;
 8008b1a:	7211      	strb	r1, [r2, #8]
 8008b1c:	00af      	lsls	r7, r5, #2
 8008b1e:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8008b20:	0038      	movs	r0, r7
 8008b22:	30e9      	adds	r0, #233	; 0xe9
 8008b24:	b280      	uxth	r0, r0
 8008b26:	0031      	movs	r1, r6
 8008b28:	f001 ff2c 	bl	800a984 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8008b2c:	8833      	ldrh	r3, [r6, #0]
 8008b2e:	0a1a      	lsrs	r2, r3, #8
 8008b30:	4649      	mov	r1, r9
 8008b32:	708a      	strb	r2, [r1, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8008b34:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8008b36:	0038      	movs	r0, r7
 8008b38:	30ea      	adds	r0, #234	; 0xea
 8008b3a:	b280      	uxth	r0, r0
 8008b3c:	0031      	movs	r1, r6
 8008b3e:	f001 ff21 	bl	800a984 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8008b42:	8833      	ldrh	r3, [r6, #0]
 8008b44:	0a1a      	lsrs	r2, r3, #8
 8008b46:	4649      	mov	r1, r9
 8008b48:	70ca      	strb	r2, [r1, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8008b4a:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8008b4c:	37eb      	adds	r7, #235	; 0xeb
 8008b4e:	b2b8      	uxth	r0, r7
 8008b50:	0031      	movs	r1, r6
 8008b52:	f001 ff17 	bl	800a984 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8008b56:	8833      	ldrh	r3, [r6, #0]
 8008b58:	0a1a      	lsrs	r2, r3, #8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	710a      	strb	r2, [r1, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8008b5e:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i+1].type, i+1);
 8008b60:	b2ef      	uxtb	r7, r5
 8008b62:	7848      	ldrb	r0, [r1, #1]
 8008b64:	0039      	movs	r1, r7
 8008b66:	f7ff fcaf 	bl	80084c8 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	7a19      	ldrb	r1, [r3, #8]
 8008b6e:	789b      	ldrb	r3, [r3, #2]
 8008b70:	104a      	asrs	r2, r1, #1
 8008b72:	2001      	movs	r0, #1
 8008b74:	4002      	ands	r2, r0
 8008b76:	4001      	ands	r1, r0
 8008b78:	2000      	movs	r0, #0
 8008b7a:	9005      	str	r0, [sp, #20]
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	79c0      	ldrb	r0, [r0, #7]
 8008b80:	9004      	str	r0, [sp, #16]
 8008b82:	4648      	mov	r0, r9
 8008b84:	7980      	ldrb	r0, [r0, #6]
 8008b86:	9003      	str	r0, [sp, #12]
 8008b88:	4648      	mov	r0, r9
 8008b8a:	7940      	ldrb	r0, [r0, #5]
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	4648      	mov	r0, r9
 8008b90:	7900      	ldrb	r0, [r0, #4]
 8008b92:	9001      	str	r0, [sp, #4]
 8008b94:	4648      	mov	r0, r9
 8008b96:	78c0      	ldrb	r0, [r0, #3]
 8008b98:	9000      	str	r0, [sp, #0]
 8008b9a:	0038      	movs	r0, r7
 8008b9c:	f7ff fe3a 	bl	8008814 <SetButtonEvents>
 8008ba0:	e7a1      	b.n	8008ae6 <LoadEEbuttons+0x1e>
}
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	b009      	add	sp, #36	; 0x24
 8008ba6:	bc0c      	pop	{r2, r3}
 8008ba8:	4690      	mov	r8, r2
 8008baa:	4699      	mov	r9, r3
 8008bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	20000cdc 	.word	0x20000cdc

08008bb4 <LoadEEvars>:
{
 8008bb4:	b510      	push	{r4, lr}
	LoadROtopology();
 8008bb6:	f7fb f8e1 	bl	8003d7c <LoadROtopology>
	LoadEEportsDir();
 8008bba:	f7fb f97d 	bl	8003eb8 <LoadEEportsDir>
	LoadEEalias();
 8008bbe:	f7fb f9e1 	bl	8003f84 <LoadEEalias>
	LoadEEgroup();
 8008bc2:	f7fb fa21 	bl	8004008 <LoadEEgroup>
	LoadEEstreams();
 8008bc6:	f7fb ff2d 	bl	8004a24 <LoadEEstreams>
	LoadEEparams();	
 8008bca:	f7fb fab7 	bl	800413c <LoadEEparams>
	LoadEEbuttons();	
 8008bce:	f7ff ff7b 	bl	8008ac8 <LoadEEbuttons>
	LoadROsnippets();
 8008bd2:	f7fb f84d 	bl	8003c70 <LoadROsnippets>
}
 8008bd6:	bd10      	pop	{r4, pc}

08008bd8 <BOS_CalendarConfig>:
{
 8008bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bda:	46c6      	mov	lr, r8
 8008bdc:	b500      	push	{lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	ac0c      	add	r4, sp, #48	; 0x30
 8008be2:	7827      	ldrb	r7, [r4, #0]
 8008be4:	ac0d      	add	r4, sp, #52	; 0x34
 8008be6:	7824      	ldrb	r4, [r4, #0]
 8008be8:	46a0      	mov	r8, r4
 8008bea:	ac0e      	add	r4, sp, #56	; 0x38
 8008bec:	7825      	ldrb	r5, [r4, #0]
 8008bee:	ac0f      	add	r4, sp, #60	; 0x3c
 8008bf0:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 8008bf2:	ac05      	add	r4, sp, #20
 8008bf4:	3230      	adds	r2, #48	; 0x30
 8008bf6:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 8008bf8:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 8008bfa:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 8008bfc:	7023      	strb	r3, [r4, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	0021      	movs	r1, r4
 8008c02:	481f      	ldr	r0, [pc, #124]	; (8008c80 <BOS_CalendarConfig+0xa8>)
 8008c04:	f008 fbdc 	bl	80113c0 <HAL_RTC_SetDate>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d136      	bne.n	8008c7a <BOS_CalendarConfig+0xa2>
  stimestructure.Hours = hours;
 8008c0c:	466b      	mov	r3, sp
 8008c0e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 8008c10:	4642      	mov	r2, r8
 8008c12:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 8008c14:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 8008c16:	2300      	movs	r3, #0
 8008c18:	9304      	str	r3, [sp, #16]
	if (AMPM == RTC_AM) {
 8008c1a:	2e01      	cmp	r6, #1
 8008c1c:	d020      	beq.n	8008c60 <BOS_CalendarConfig+0x88>
	} else if (AMPM == RTC_PM) {
 8008c1e:	2e02      	cmp	r6, #2
 8008c20:	d024      	beq.n	8008c6c <BOS_CalendarConfig+0x94>
		BOS.hourformat = 24;
 8008c22:	4b18      	ldr	r3, [pc, #96]	; (8008c84 <BOS_CalendarConfig+0xac>)
 8008c24:	2218      	movs	r2, #24
 8008c26:	735a      	strb	r2, [r3, #13]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4669      	mov	r1, sp
 8008c2c:	4814      	ldr	r0, [pc, #80]	; (8008c80 <BOS_CalendarConfig+0xa8>)
 8008c2e:	f008 fb41 	bl	80112b4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 8008c32:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d10e      	bne.n	8008c56 <BOS_CalendarConfig+0x7e>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8008c38:	4a12      	ldr	r2, [pc, #72]	; (8008c84 <BOS_CalendarConfig+0xac>)
 8008c3a:	7b53      	ldrb	r3, [r2, #13]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	7911      	ldrb	r1, [r2, #4]
 8008c40:	4319      	orrs	r1, r3
 8008c42:	308d      	adds	r0, #141	; 0x8d
 8008c44:	0040      	lsls	r0, r0, #1
 8008c46:	f001 fecd 	bl	800a9e4 <EE_WriteVariable>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 8008c4a:	4a0f      	ldr	r2, [pc, #60]	; (8008c88 <BOS_CalendarConfig+0xb0>)
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	480c      	ldr	r0, [pc, #48]	; (8008c80 <BOS_CalendarConfig+0xa8>)
 8008c50:	f008 fc7a 	bl	8011548 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	b006      	add	sp, #24
 8008c5a:	bc04      	pop	{r2}
 8008c5c:	4690      	mov	r8, r2
 8008c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8008c60:	466a      	mov	r2, sp
 8008c62:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008c64:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <BOS_CalendarConfig+0xac>)
 8008c66:	220c      	movs	r2, #12
 8008c68:	735a      	strb	r2, [r3, #13]
 8008c6a:	e7dd      	b.n	8008c28 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 8008c6c:	2340      	movs	r3, #64	; 0x40
 8008c6e:	466a      	mov	r2, sp
 8008c70:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <BOS_CalendarConfig+0xac>)
 8008c74:	220c      	movs	r2, #12
 8008c76:	735a      	strb	r2, [r3, #13]
 8008c78:	e7d6      	b.n	8008c28 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	e7eb      	b.n	8008c56 <BOS_CalendarConfig+0x7e>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	200068ec 	.word	0x200068ec
 8008c84:	20006894 	.word	0x20006894
 8008c88:	000032f2 	.word	0x000032f2

08008c8c <GetTimeDate>:
{
 8008c8c:	b530      	push	{r4, r5, lr}
 8008c8e:	b089      	sub	sp, #36	; 0x24
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 8008c90:	4d16      	ldr	r5, [pc, #88]	; (8008cec <GetTimeDate+0x60>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	a902      	add	r1, sp, #8
 8008c96:	0028      	movs	r0, r5
 8008c98:	f008 fc0e 	bl	80114b8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 8008c9c:	ac07      	add	r4, sp, #28
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	0021      	movs	r1, r4
 8008ca2:	0028      	movs	r0, r5
 8008ca4:	f008 fc2e 	bl	8011504 <HAL_RTC_GetDate>
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 8008ca8:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <GetTimeDate+0x64>)
 8008caa:	aa02      	add	r2, sp, #8
 8008cac:	7a12      	ldrb	r2, [r2, #8]
 8008cae:	09d2      	lsrs	r2, r2, #7
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 8008cb4:	9a03      	ldr	r2, [sp, #12]
 8008cb6:	9201      	str	r2, [sp, #4]
 8008cb8:	0852      	lsrs	r2, r2, #1
 8008cba:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 8008cbc:	aa02      	add	r2, sp, #8
 8008cbe:	7892      	ldrb	r2, [r2, #2]
 8008cc0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 8008cc2:	aa02      	add	r2, sp, #8
 8008cc4:	7852      	ldrb	r2, [r2, #1]
 8008cc6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 8008cc8:	aa02      	add	r2, sp, #8
 8008cca:	7812      	ldrb	r2, [r2, #0]
 8008ccc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 8008cce:	78a2      	ldrb	r2, [r4, #2]
 8008cd0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 8008cd2:	7862      	ldrb	r2, [r4, #1]
 8008cd4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 8008cd6:	7822      	ldrb	r2, [r4, #0]
 8008cd8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 8008cda:	78e2      	ldrb	r2, [r4, #3]
 8008cdc:	21fa      	movs	r1, #250	; 0xfa
 8008cde:	00c9      	lsls	r1, r1, #3
 8008ce0:	468c      	mov	ip, r1
 8008ce2:	4462      	add	r2, ip
 8008ce4:	831a      	strh	r2, [r3, #24]
}
 8008ce6:	b009      	add	sp, #36	; 0x24
 8008ce8:	bd30      	pop	{r4, r5, pc}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	200068ec 	.word	0x200068ec
 8008cf0:	20006894 	.word	0x20006894

08008cf4 <BOS_Init>:
{
 8008cf4:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8008cf6:	f7fb fc13 	bl	8004520 <RTC_Init>
	GetTimeDate();
 8008cfa:	f7ff ffc7 	bl	8008c8c <GetTimeDate>
	EE_Init();
 8008cfe:	f001 ff7d 	bl	800abfc <EE_Init>
  GPIO_Init();
 8008d02:	f004 f85f 	bl	800cdc4 <GPIO_Init>
	DMA_Init();
 8008d06:	f003 f811 	bl	800bd2c <DMA_Init>
	TIM_USEC_Init();
 8008d0a:	f7fa fce7 	bl	80036dc <TIM_USEC_Init>
	CRC_Init();
 8008d0e:	f004 f823 	bl	800cd58 <CRC_Init>
	TIM_MSEC_Init();
 8008d12:	f7fa fd15 	bl	8003740 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8008d16:	f7fc fd8d 	bl	8005834 <IsFactoryReset>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d11a      	bne.n	8008d54 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8008d1e:	f7fc fe03 	bl	8005928 <IsLowerCLIbaud>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d01a      	beq.n	8008d5c <BOS_Init+0x68>
		CLI_LOW_Baudrate_Flag = 1;
 8008d26:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <BOS_Init+0x118>)
 8008d28:	2201      	movs	r2, #1
 8008d2a:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008d2c:	2032      	movs	r0, #50	; 0x32
 8008d2e:	f7fc fd6f 	bl	8005810 <StartMilliDelay>
		Module_Init();	
 8008d32:	f002 fcd1 	bl	800b6d8 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8008d36:	4b36      	ldr	r3, [pc, #216]	; (8008e10 <BOS_Init+0x11c>)
 8008d38:	22e1      	movs	r2, #225	; 0xe1
 8008d3a:	0252      	lsls	r2, r2, #9
 8008d3c:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008d3e:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8008d40:	001d      	movs	r5, r3
 8008d42:	68a9      	ldr	r1, [r5, #8]
 8008d44:	0020      	movs	r0, r4
 8008d46:	f004 fb6f 	bl	800d428 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	b2e4      	uxtb	r4, r4
 8008d4e:	2c06      	cmp	r4, #6
 8008d50:	d1f7      	bne.n	8008d42 <BOS_Init+0x4e>
 8008d52:	e008      	b.n	8008d66 <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8008d54:	f7fb fad2 	bl	80042fc <EE_FormatForFactoryReset>
		NVIC_SystemReset();
 8008d58:	f7fa f91a 	bl	8002f90 <NVIC_SystemReset>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008d5c:	2032      	movs	r0, #50	; 0x32
 8008d5e:	f7fc fd57 	bl	8005810 <StartMilliDelay>
		Module_Init();				
 8008d62:	f002 fcb9 	bl	800b6d8 <Module_Init>
	LoadEEvars();
 8008d66:	f7ff ff25 	bl	8008bb4 <LoadEEvars>
	UpdateMyPortsDir();
 8008d6a:	f7fd fdb9 	bl	80068e0 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8008d6e:	f003 fc3d 	bl	800c5ec <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8008d72:	4b28      	ldr	r3, [pc, #160]	; (8008e14 <BOS_Init+0x120>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d036      	beq.n	8008de8 <BOS_Init+0xf4>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008d7a:	2580      	movs	r5, #128	; 0x80
 8008d7c:	01ed      	lsls	r5, r5, #7
 8008d7e:	4c26      	ldr	r4, [pc, #152]	; (8008e18 <BOS_Init+0x124>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	0029      	movs	r1, r5
 8008d84:	0020      	movs	r0, r4
 8008d86:	f007 fcd9 	bl	801073c <HAL_GPIO_WritePin>
 8008d8a:	20fa      	movs	r0, #250	; 0xfa
 8008d8c:	0040      	lsls	r0, r0, #1
 8008d8e:	f7fc fd3f 	bl	8005810 <StartMilliDelay>
 8008d92:	2200      	movs	r2, #0
 8008d94:	0029      	movs	r1, r5
 8008d96:	0020      	movs	r0, r4
 8008d98:	f007 fcd0 	bl	801073c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008d9c:	2064      	movs	r0, #100	; 0x64
 8008d9e:	f7fc fd37 	bl	8005810 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008da2:	2201      	movs	r2, #1
 8008da4:	0029      	movs	r1, r5
 8008da6:	0020      	movs	r0, r4
 8008da8:	f007 fcc8 	bl	801073c <HAL_GPIO_WritePin>
 8008dac:	2064      	movs	r0, #100	; 0x64
 8008dae:	f7fc fd2f 	bl	8005810 <StartMilliDelay>
 8008db2:	2200      	movs	r2, #0
 8008db4:	0029      	movs	r1, r5
 8008db6:	0020      	movs	r0, r4
 8008db8:	f007 fcc0 	bl	801073c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008dbc:	2064      	movs	r0, #100	; 0x64
 8008dbe:	f7fc fd27 	bl	8005810 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	0029      	movs	r1, r5
 8008dc6:	0020      	movs	r0, r4
 8008dc8:	f007 fcb8 	bl	801073c <HAL_GPIO_WritePin>
 8008dcc:	2064      	movs	r0, #100	; 0x64
 8008dce:	f7fc fd1f 	bl	8005810 <StartMilliDelay>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	0029      	movs	r1, r5
 8008dd6:	0020      	movs	r0, r4
 8008dd8:	f007 fcb0 	bl	801073c <HAL_GPIO_WritePin>
	ResetUartORE();
 8008ddc:	f001 fd4a 	bl	800a874 <ResetUartORE>
	BOS_initialized = 1;
 8008de0:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <BOS_Init+0x128>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	701a      	strb	r2, [r3, #0]
}
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008de8:	2580      	movs	r5, #128	; 0x80
 8008dea:	01ed      	lsls	r5, r5, #7
 8008dec:	4c0a      	ldr	r4, [pc, #40]	; (8008e18 <BOS_Init+0x124>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	0029      	movs	r1, r5
 8008df2:	0020      	movs	r0, r4
 8008df4:	f007 fca2 	bl	801073c <HAL_GPIO_WritePin>
 8008df8:	20fa      	movs	r0, #250	; 0xfa
 8008dfa:	0040      	lsls	r0, r0, #1
 8008dfc:	f7fc fd08 	bl	8005810 <StartMilliDelay>
 8008e00:	2200      	movs	r2, #0
 8008e02:	0029      	movs	r1, r5
 8008e04:	0020      	movs	r0, r4
 8008e06:	f007 fc99 	bl	801073c <HAL_GPIO_WritePin>
 8008e0a:	e7e7      	b.n	8008ddc <BOS_Init+0xe8>
 8008e0c:	20000a2e 	.word	0x20000a2e
 8008e10:	20006894 	.word	0x20006894
 8008e14:	200011c8 	.word	0x200011c8
 8008e18:	48000800 	.word	0x48000800
 8008e1c:	20000a2d 	.word	0x20000a2d

08008e20 <timeCommand>:
{
 8008e20:	b510      	push	{r4, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8008e26:	d101      	bne.n	8008e2c <timeCommand+0xc>
 8008e28:	b672      	cpsid	i
 8008e2a:	e7fe      	b.n	8008e2a <timeCommand+0xa>
	GetTimeDate();
 8008e2c:	f7ff ff2e 	bl	8008c8c <GetTimeDate>
	if (BOS.hourformat == 24)
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <timeCommand+0x80>)
 8008e32:	7b5b      	ldrb	r3, [r3, #13]
 8008e34:	2b18      	cmp	r3, #24
 8008e36:	d004      	beq.n	8008e42 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8008e38:	2b0c      	cmp	r3, #12
 8008e3a:	d00e      	beq.n	8008e5a <timeCommand+0x3a>
}
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	b004      	add	sp, #16
 8008e40:	bd10      	pop	{r4, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8008e42:	4917      	ldr	r1, [pc, #92]	; (8008ea0 <timeCommand+0x80>)
 8008e44:	7c4b      	ldrb	r3, [r1, #17]
 8008e46:	7c8a      	ldrb	r2, [r1, #18]
 8008e48:	89c8      	ldrh	r0, [r1, #14]
 8008e4a:	9001      	str	r0, [sp, #4]
 8008e4c:	7c09      	ldrb	r1, [r1, #16]
 8008e4e:	9100      	str	r1, [sp, #0]
 8008e50:	4914      	ldr	r1, [pc, #80]	; (8008ea4 <timeCommand+0x84>)
 8008e52:	0020      	movs	r0, r4
 8008e54:	f00a f9ce 	bl	80131f4 <sprintf>
 8008e58:	e7f0      	b.n	8008e3c <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 8008e5a:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <timeCommand+0x80>)
 8008e5c:	7cdb      	ldrb	r3, [r3, #19]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d10d      	bne.n	8008e7e <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8008e62:	490f      	ldr	r1, [pc, #60]	; (8008ea0 <timeCommand+0x80>)
 8008e64:	7c4b      	ldrb	r3, [r1, #17]
 8008e66:	7c8a      	ldrb	r2, [r1, #18]
 8008e68:	480f      	ldr	r0, [pc, #60]	; (8008ea8 <timeCommand+0x88>)
 8008e6a:	9002      	str	r0, [sp, #8]
 8008e6c:	89c8      	ldrh	r0, [r1, #14]
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	7c09      	ldrb	r1, [r1, #16]
 8008e72:	9100      	str	r1, [sp, #0]
 8008e74:	490d      	ldr	r1, [pc, #52]	; (8008eac <timeCommand+0x8c>)
 8008e76:	0020      	movs	r0, r4
 8008e78:	f00a f9bc 	bl	80131f4 <sprintf>
 8008e7c:	e7de      	b.n	8008e3c <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d1dc      	bne.n	8008e3c <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 8008e82:	4907      	ldr	r1, [pc, #28]	; (8008ea0 <timeCommand+0x80>)
 8008e84:	7c4b      	ldrb	r3, [r1, #17]
 8008e86:	7c8a      	ldrb	r2, [r1, #18]
 8008e88:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <timeCommand+0x90>)
 8008e8a:	9002      	str	r0, [sp, #8]
 8008e8c:	89c8      	ldrh	r0, [r1, #14]
 8008e8e:	9001      	str	r0, [sp, #4]
 8008e90:	7c09      	ldrb	r1, [r1, #16]
 8008e92:	9100      	str	r1, [sp, #0]
 8008e94:	4905      	ldr	r1, [pc, #20]	; (8008eac <timeCommand+0x8c>)
 8008e96:	0020      	movs	r0, r4
 8008e98:	f00a f9ac 	bl	80131f4 <sprintf>
 8008e9c:	e7ce      	b.n	8008e3c <timeCommand+0x1c>
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	20006894 	.word	0x20006894
 8008ea4:	080199b0 	.word	0x080199b0
 8008ea8:	08019a04 	.word	0x08019a04
 8008eac:	080199d8 	.word	0x080199d8
 8008eb0:	08019a08 	.word	0x08019a08

08008eb4 <setCommand>:
{
 8008eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb6:	46ce      	mov	lr, r9
 8008eb8:	4647      	mov	r7, r8
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b08d      	sub	sp, #52	; 0x34
 8008ebe:	0005      	movs	r5, r0
 8008ec0:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec8:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8008eca:	9308      	str	r3, [sp, #32]
 8008ecc:	9307      	str	r3, [sp, #28]
	configASSERT( pcWriteBuffer );
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d101      	bne.n	8008ed6 <setCommand+0x22>
 8008ed2:	b672      	cpsid	i
 8008ed4:	e7fe      	b.n	8008ed4 <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8008ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ed8:	2101      	movs	r1, #1
 8008eda:	0020      	movs	r0, r4
 8008edc:	f004 fc44 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8008ee0:	0006      	movs	r6, r0
 8008ee2:	4bb3      	ldr	r3, [pc, #716]	; (80091b0 <setCommand+0x2fc>)
 8008ee4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	49b2      	ldr	r1, [pc, #712]	; (80091b4 <setCommand+0x300>)
 8008eea:	f00a f9c7 	bl	801327c <strncmp>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d015      	beq.n	8008f1e <setCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	49b0      	ldr	r1, [pc, #704]	; (80091b8 <setCommand+0x304>)
 8008ef6:	0030      	movs	r0, r6
 8008ef8:	f00a f9c0 	bl	801327c <strncmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d100      	bne.n	8008f02 <setCommand+0x4e>
 8008f00:	e180      	b.n	8009204 <setCommand+0x350>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8008f02:	2204      	movs	r2, #4
 8008f04:	49ad      	ldr	r1, [pc, #692]	; (80091bc <setCommand+0x308>)
 8008f06:	0030      	movs	r0, r6
 8008f08:	f00a f9b8 	bl	801327c <strncmp>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d100      	bne.n	8008f12 <setCommand+0x5e>
 8008f10:	e1e6      	b.n	80092e0 <setCommand+0x42c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8008f12:	2213      	movs	r2, #19
 8008f14:	49aa      	ldr	r1, [pc, #680]	; (80091c0 <setCommand+0x30c>)
 8008f16:	0028      	movs	r0, r5
 8008f18:	f009 ff69 	bl	8012dee <memcpy>
 8008f1c:	e1d7      	b.n	80092ce <setCommand+0x41a>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008f1e:	aa0a      	add	r2, sp, #40	; 0x28
 8008f20:	2102      	movs	r1, #2
 8008f22:	0020      	movs	r0, r4
 8008f24:	f004 fc20 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8008f28:	0004      	movs	r4, r0
 8008f2a:	4ba6      	ldr	r3, [pc, #664]	; (80091c4 <setCommand+0x310>)
 8008f2c:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8008f2e:	4ba0      	ldr	r3, [pc, #640]	; (80091b0 <setCommand+0x2fc>)
 8008f30:	681e      	ldr	r6, [r3, #0]
 8008f32:	3604      	adds	r6, #4
 8008f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f36:	1f1f      	subs	r7, r3, #4
 8008f38:	003a      	movs	r2, r7
 8008f3a:	49a3      	ldr	r1, [pc, #652]	; (80091c8 <setCommand+0x314>)
 8008f3c:	0030      	movs	r0, r6
 8008f3e:	f00a f99d 	bl	801327c <strncmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d153      	bne.n	8008fee <setCommand+0x13a>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8008f46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f48:	0032      	movs	r2, r6
 8008f4a:	49a0      	ldr	r1, [pc, #640]	; (80091cc <setCommand+0x318>)
 8008f4c:	0020      	movs	r0, r4
 8008f4e:	f00a f995 	bl	801327c <strncmp>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d115      	bne.n	8008f82 <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8008f56:	4b9e      	ldr	r3, [pc, #632]	; (80091d0 <setCommand+0x31c>)
 8008f58:	2160      	movs	r1, #96	; 0x60
 8008f5a:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008f5c:	79db      	ldrb	r3, [r3, #7]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	4319      	orrs	r1, r3
 8008f62:	308a      	adds	r0, #138	; 0x8a
 8008f64:	0040      	lsls	r0, r0, #1
 8008f66:	f001 fd3d 	bl	800a9e4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8008f6a:	4b91      	ldr	r3, [pc, #580]	; (80091b0 <setCommand+0x2fc>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f72:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8008f74:	4b93      	ldr	r3, [pc, #588]	; (80091c4 <setCommand+0x310>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4996      	ldr	r1, [pc, #600]	; (80091d4 <setCommand+0x320>)
 8008f7a:	0028      	movs	r0, r5
 8008f7c:	f00a f93a 	bl	80131f4 <sprintf>
	return pdFALSE;
 8008f80:	e1a5      	b.n	80092ce <setCommand+0x41a>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8008f82:	0032      	movs	r2, r6
 8008f84:	4994      	ldr	r1, [pc, #592]	; (80091d8 <setCommand+0x324>)
 8008f86:	0020      	movs	r0, r4
 8008f88:	f00a f978 	bl	801327c <strncmp>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d10a      	bne.n	8008fa6 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 8008f90:	4b8f      	ldr	r3, [pc, #572]	; (80091d0 <setCommand+0x31c>)
 8008f92:	2120      	movs	r1, #32
 8008f94:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008f96:	79db      	ldrb	r3, [r3, #7]
 8008f98:	021b      	lsls	r3, r3, #8
 8008f9a:	4319      	orrs	r1, r3
 8008f9c:	308a      	adds	r0, #138	; 0x8a
 8008f9e:	0040      	lsls	r0, r0, #1
 8008fa0:	f001 fd20 	bl	800a9e4 <EE_WriteVariable>
 8008fa4:	e7e1      	b.n	8008f6a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8008fa6:	0032      	movs	r2, r6
 8008fa8:	498c      	ldr	r1, [pc, #560]	; (80091dc <setCommand+0x328>)
 8008faa:	0020      	movs	r0, r4
 8008fac:	f00a f966 	bl	801327c <strncmp>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d10a      	bne.n	8008fca <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8008fb4:	4b86      	ldr	r3, [pc, #536]	; (80091d0 <setCommand+0x31c>)
 8008fb6:	2140      	movs	r1, #64	; 0x40
 8008fb8:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008fba:	79db      	ldrb	r3, [r3, #7]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4319      	orrs	r1, r3
 8008fc0:	308a      	adds	r0, #138	; 0x8a
 8008fc2:	0040      	lsls	r0, r0, #1
 8008fc4:	f001 fd0e 	bl	800a9e4 <EE_WriteVariable>
 8008fc8:	e7cf      	b.n	8008f6a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8008fca:	0032      	movs	r2, r6
 8008fcc:	4984      	ldr	r1, [pc, #528]	; (80091e0 <setCommand+0x32c>)
 8008fce:	0020      	movs	r0, r4
 8008fd0:	f00a f954 	bl	801327c <strncmp>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d000      	beq.n	8008fda <setCommand+0x126>
 8008fd8:	e2a7      	b.n	800952a <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8008fda:	4b7d      	ldr	r3, [pc, #500]	; (80091d0 <setCommand+0x31c>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8008fe0:	79d9      	ldrb	r1, [r3, #7]
 8008fe2:	0209      	lsls	r1, r1, #8
 8008fe4:	308a      	adds	r0, #138	; 0x8a
 8008fe6:	0040      	lsls	r0, r0, #1
 8008fe8:	f001 fcfc 	bl	800a9e4 <EE_WriteVariable>
 8008fec:	e7bd      	b.n	8008f6a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8008fee:	003a      	movs	r2, r7
 8008ff0:	497c      	ldr	r1, [pc, #496]	; (80091e4 <setCommand+0x330>)
 8008ff2:	0030      	movs	r0, r6
 8008ff4:	f00a f942 	bl	801327c <strncmp>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d14a      	bne.n	8009092 <setCommand+0x1de>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8008ffc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ffe:	0032      	movs	r2, r6
 8009000:	4972      	ldr	r1, [pc, #456]	; (80091cc <setCommand+0x318>)
 8009002:	0020      	movs	r0, r4
 8009004:	f00a f93a 	bl	801327c <strncmp>
 8009008:	2800      	cmp	r0, #0
 800900a:	d10b      	bne.n	8009024 <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 800900c:	4b70      	ldr	r3, [pc, #448]	; (80091d0 <setCommand+0x31c>)
 800900e:	2203      	movs	r2, #3
 8009010:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009012:	799b      	ldrb	r3, [r3, #6]
 8009014:	21c0      	movs	r1, #192	; 0xc0
 8009016:	0089      	lsls	r1, r1, #2
 8009018:	4319      	orrs	r1, r3
 800901a:	308a      	adds	r0, #138	; 0x8a
 800901c:	0040      	lsls	r0, r0, #1
 800901e:	f001 fce1 	bl	800a9e4 <EE_WriteVariable>
 8009022:	e7a2      	b.n	8008f6a <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8009024:	0032      	movs	r2, r6
 8009026:	496c      	ldr	r1, [pc, #432]	; (80091d8 <setCommand+0x324>)
 8009028:	0020      	movs	r0, r4
 800902a:	f00a f927 	bl	801327c <strncmp>
 800902e:	2800      	cmp	r0, #0
 8009030:	d10b      	bne.n	800904a <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 8009032:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <setCommand+0x31c>)
 8009034:	2201      	movs	r2, #1
 8009036:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009038:	799b      	ldrb	r3, [r3, #6]
 800903a:	2180      	movs	r1, #128	; 0x80
 800903c:	0049      	lsls	r1, r1, #1
 800903e:	4319      	orrs	r1, r3
 8009040:	308a      	adds	r0, #138	; 0x8a
 8009042:	4090      	lsls	r0, r2
 8009044:	f001 fcce 	bl	800a9e4 <EE_WriteVariable>
 8009048:	e78f      	b.n	8008f6a <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 800904a:	0032      	movs	r2, r6
 800904c:	495e      	ldr	r1, [pc, #376]	; (80091c8 <setCommand+0x314>)
 800904e:	0020      	movs	r0, r4
 8009050:	f00a f914 	bl	801327c <strncmp>
 8009054:	2800      	cmp	r0, #0
 8009056:	d10b      	bne.n	8009070 <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 8009058:	4b5d      	ldr	r3, [pc, #372]	; (80091d0 <setCommand+0x31c>)
 800905a:	2202      	movs	r2, #2
 800905c:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800905e:	799b      	ldrb	r3, [r3, #6]
 8009060:	2180      	movs	r1, #128	; 0x80
 8009062:	0089      	lsls	r1, r1, #2
 8009064:	4319      	orrs	r1, r3
 8009066:	308a      	adds	r0, #138	; 0x8a
 8009068:	0040      	lsls	r0, r0, #1
 800906a:	f001 fcbb 	bl	800a9e4 <EE_WriteVariable>
 800906e:	e77c      	b.n	8008f6a <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8009070:	0032      	movs	r2, r6
 8009072:	495b      	ldr	r1, [pc, #364]	; (80091e0 <setCommand+0x32c>)
 8009074:	0020      	movs	r0, r4
 8009076:	f00a f901 	bl	801327c <strncmp>
 800907a:	2800      	cmp	r0, #0
 800907c:	d000      	beq.n	8009080 <setCommand+0x1cc>
 800907e:	e254      	b.n	800952a <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 8009080:	4b53      	ldr	r3, [pc, #332]	; (80091d0 <setCommand+0x31c>)
 8009082:	2200      	movs	r2, #0
 8009084:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009086:	7999      	ldrb	r1, [r3, #6]
 8009088:	308a      	adds	r0, #138	; 0x8a
 800908a:	0040      	lsls	r0, r0, #1
 800908c:	f001 fcaa 	bl	800a9e4 <EE_WriteVariable>
 8009090:	e76b      	b.n	8008f6a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8009092:	003a      	movs	r2, r7
 8009094:	4954      	ldr	r1, [pc, #336]	; (80091e8 <setCommand+0x334>)
 8009096:	0030      	movs	r0, r6
 8009098:	f00a f8f0 	bl	801327c <strncmp>
 800909c:	2800      	cmp	r0, #0
 800909e:	d128      	bne.n	80090f2 <setCommand+0x23e>
			temp2 = atoi((const char *)pcParameterString2);
 80090a0:	0020      	movs	r0, r4
 80090a2:	f009 fc14 	bl	80128ce <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 80090a6:	23e1      	movs	r3, #225	; 0xe1
 80090a8:	031b      	lsls	r3, r3, #12
 80090aa:	4298      	cmp	r0, r3
 80090ac:	d900      	bls.n	80090b0 <setCommand+0x1fc>
 80090ae:	e23c      	b.n	800952a <setCommand+0x676>
				BOS.clibaudrate = temp2;
 80090b0:	4c47      	ldr	r4, [pc, #284]	; (80091d0 <setCommand+0x31c>)
 80090b2:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80090b4:	b281      	uxth	r1, r0
 80090b6:	208c      	movs	r0, #140	; 0x8c
 80090b8:	0040      	lsls	r0, r0, #1
 80090ba:	f001 fc93 	bl	800a9e4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80090be:	68a1      	ldr	r1, [r4, #8]
 80090c0:	0c09      	lsrs	r1, r1, #16
 80090c2:	201a      	movs	r0, #26
 80090c4:	30ff      	adds	r0, #255	; 0xff
 80090c6:	f001 fc8d 	bl	800a9e4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80090ca:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <setCommand+0x2fc>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090d2:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80090d4:	4b3b      	ldr	r3, [pc, #236]	; (80091c4 <setCommand+0x310>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	493e      	ldr	r1, [pc, #248]	; (80091d4 <setCommand+0x320>)
 80090da:	0028      	movs	r0, r5
 80090dc:	f00a f88a 	bl	80131f4 <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80090e0:	4942      	ldr	r1, [pc, #264]	; (80091ec <setCommand+0x338>)
 80090e2:	0028      	movs	r0, r5
 80090e4:	f00a f8a6 	bl	8013234 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80090e8:	4941      	ldr	r1, [pc, #260]	; (80091f0 <setCommand+0x33c>)
 80090ea:	0028      	movs	r0, r5
 80090ec:	f00a f8a2 	bl	8013234 <strcat>
 80090f0:	e0ed      	b.n	80092ce <setCommand+0x41a>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80090f2:	003a      	movs	r2, r7
 80090f4:	493f      	ldr	r1, [pc, #252]	; (80091f4 <setCommand+0x340>)
 80090f6:	0030      	movs	r0, r6
 80090f8:	f00a f8c0 	bl	801327c <strncmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d10d      	bne.n	800911c <setCommand+0x268>
			temp16 = atoi((const char *)pcParameterString2);
 8009100:	0020      	movs	r0, r4
 8009102:	f009 fbe4 	bl	80128ce <atoi>
 8009106:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8009108:	2900      	cmp	r1, #0
 800910a:	d100      	bne.n	800910e <setCommand+0x25a>
 800910c:	e20d      	b.n	800952a <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 800910e:	4b30      	ldr	r3, [pc, #192]	; (80091d0 <setCommand+0x31c>)
 8009110:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8009112:	2016      	movs	r0, #22
 8009114:	30ff      	adds	r0, #255	; 0xff
 8009116:	f001 fc65 	bl	800a9e4 <EE_WriteVariable>
 800911a:	e726      	b.n	8008f6a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800911c:	003a      	movs	r2, r7
 800911e:	4936      	ldr	r1, [pc, #216]	; (80091f8 <setCommand+0x344>)
 8009120:	0030      	movs	r0, r6
 8009122:	f00a f8ab 	bl	801327c <strncmp>
 8009126:	2800      	cmp	r0, #0
 8009128:	d10d      	bne.n	8009146 <setCommand+0x292>
			temp16 = atoi((const char *)pcParameterString2);
 800912a:	0020      	movs	r0, r4
 800912c:	f009 fbcf 	bl	80128ce <atoi>
 8009130:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8009132:	2900      	cmp	r1, #0
 8009134:	d100      	bne.n	8009138 <setCommand+0x284>
 8009136:	e1f8      	b.n	800952a <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <setCommand+0x31c>)
 800913a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 800913c:	208b      	movs	r0, #139	; 0x8b
 800913e:	0040      	lsls	r0, r0, #1
 8009140:	f001 fc50 	bl	800a9e4 <EE_WriteVariable>
 8009144:	e711      	b.n	8008f6a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8009146:	003a      	movs	r2, r7
 8009148:	492c      	ldr	r1, [pc, #176]	; (80091fc <setCommand+0x348>)
 800914a:	0030      	movs	r0, r6
 800914c:	f00a f896 	bl	801327c <strncmp>
 8009150:	2800      	cmp	r0, #0
 8009152:	d112      	bne.n	800917a <setCommand+0x2c6>
			temp16 = atoi((const char *)pcParameterString2);
 8009154:	0020      	movs	r0, r4
 8009156:	f009 fbba 	bl	80128ce <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800915a:	1e43      	subs	r3, r0, #1
 800915c:	b29b      	uxth	r3, r3
 800915e:	2bfe      	cmp	r3, #254	; 0xfe
 8009160:	d900      	bls.n	8009164 <setCommand+0x2b0>
 8009162:	e1e2      	b.n	800952a <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 8009164:	b2c0      	uxtb	r0, r0
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <setCommand+0x31c>)
 8009168:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800916a:	7959      	ldrb	r1, [r3, #5]
 800916c:	0209      	lsls	r1, r1, #8
 800916e:	4301      	orrs	r1, r0
 8009170:	2018      	movs	r0, #24
 8009172:	30ff      	adds	r0, #255	; 0xff
 8009174:	f001 fc36 	bl	800a9e4 <EE_WriteVariable>
 8009178:	e6f7      	b.n	8008f6a <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 800917a:	003a      	movs	r2, r7
 800917c:	4920      	ldr	r1, [pc, #128]	; (8009200 <setCommand+0x34c>)
 800917e:	0030      	movs	r0, r6
 8009180:	f00a f87c 	bl	801327c <strncmp>
 8009184:	2800      	cmp	r0, #0
 8009186:	d000      	beq.n	800918a <setCommand+0x2d6>
 8009188:	e6c3      	b.n	8008f12 <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 800918a:	0020      	movs	r0, r4
 800918c:	f009 fb9f 	bl	80128ce <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8009190:	1e43      	subs	r3, r0, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	2bfe      	cmp	r3, #254	; 0xfe
 8009196:	d900      	bls.n	800919a <setCommand+0x2e6>
 8009198:	e1c7      	b.n	800952a <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 800919a:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <setCommand+0x31c>)
 800919c:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800919e:	0200      	lsls	r0, r0, #8
 80091a0:	7919      	ldrb	r1, [r3, #4]
 80091a2:	4301      	orrs	r1, r0
 80091a4:	b289      	uxth	r1, r1
 80091a6:	2018      	movs	r0, #24
 80091a8:	30ff      	adds	r0, #255	; 0xff
 80091aa:	f001 fc1b 	bl	800a9e4 <EE_WriteVariable>
 80091ae:	e6dc      	b.n	8008f6a <setCommand+0xb6>
 80091b0:	20001200 	.word	0x20001200
 80091b4:	08017fb0 	.word	0x08017fb0
 80091b8:	0801890c 	.word	0x0801890c
 80091bc:	0801891c 	.word	0x0801891c
 80091c0:	0801803c 	.word	0x0801803c
 80091c4:	2000120c 	.word	0x2000120c
 80091c8:	08017fb8 	.word	0x08017fb8
 80091cc:	08017fc4 	.word	0x08017fc4
 80091d0:	20006894 	.word	0x20006894
 80091d4:	08018824 	.word	0x08018824
 80091d8:	08018818 	.word	0x08018818
 80091dc:	08018820 	.word	0x08018820
 80091e0:	08017fcc 	.word	0x08017fcc
 80091e4:	08017fd4 	.word	0x08017fd4
 80091e8:	08017fdc 	.word	0x08017fdc
 80091ec:	08018838 	.word	0x08018838
 80091f0:	08018868 	.word	0x08018868
 80091f4:	08017fe8 	.word	0x08017fe8
 80091f8:	08017ff4 	.word	0x08017ff4
 80091fc:	08018004 	.word	0x08018004
 8009200:	08018018 	.word	0x08018018
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009204:	aa0a      	add	r2, sp, #40	; 0x28
 8009206:	2102      	movs	r1, #2
 8009208:	0020      	movs	r0, r4
 800920a:	f004 faad 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800920e:	4bca      	ldr	r3, [pc, #808]	; (8009538 <setCommand+0x684>)
 8009210:	4699      	mov	r9, r3
 8009212:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8009214:	aa09      	add	r2, sp, #36	; 0x24
 8009216:	2103      	movs	r1, #3
 8009218:	0020      	movs	r0, r4
 800921a:	f004 faa5 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800921e:	4fc7      	ldr	r7, [pc, #796]	; (800953c <setCommand+0x688>)
 8009220:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8009222:	aa08      	add	r2, sp, #32
 8009224:	2104      	movs	r1, #4
 8009226:	0020      	movs	r0, r4
 8009228:	f004 fa9e 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800922c:	4ec4      	ldr	r6, [pc, #784]	; (8009540 <setCommand+0x68c>)
 800922e:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8009230:	aa07      	add	r2, sp, #28
 8009232:	2105      	movs	r1, #5
 8009234:	0020      	movs	r0, r4
 8009236:	f004 fa97 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800923a:	4cc2      	ldr	r4, [pc, #776]	; (8009544 <setCommand+0x690>)
 800923c:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 800923e:	464b      	mov	r3, r9
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f009 fb44 	bl	80128ce <atoi>
 8009246:	b2c3      	uxtb	r3, r0
 8009248:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800924a:	6838      	ldr	r0, [r7, #0]
 800924c:	f009 fb3f 	bl	80128ce <atoi>
 8009250:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8009252:	6830      	ldr	r0, [r6, #0]
 8009254:	f009 fb3b 	bl	80128ce <atoi>
 8009258:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 800925a:	6824      	ldr	r4, [r4, #0]
 800925c:	2c00      	cmp	r4, #0
 800925e:	d010      	beq.n	8009282 <setCommand+0x3ce>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8009260:	2202      	movs	r2, #2
 8009262:	49b9      	ldr	r1, [pc, #740]	; (8009548 <setCommand+0x694>)
 8009264:	0020      	movs	r0, r4
 8009266:	f00a f809 	bl	801327c <strncmp>
 800926a:	2800      	cmp	r0, #0
 800926c:	d035      	beq.n	80092da <setCommand+0x426>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 800926e:	2202      	movs	r2, #2
 8009270:	49b6      	ldr	r1, [pc, #728]	; (800954c <setCommand+0x698>)
 8009272:	0020      	movs	r0, r4
 8009274:	f00a f802 	bl	801327c <strncmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	d000      	beq.n	800927e <setCommand+0x3ca>
 800927c:	e155      	b.n	800952a <setCommand+0x676>
				temp84 = RTC_PM;
 800927e:	2302      	movs	r3, #2
 8009280:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8009282:	464b      	mov	r3, r9
 8009284:	2b17      	cmp	r3, #23
 8009286:	d900      	bls.n	800928a <setCommand+0x3d6>
 8009288:	e14f      	b.n	800952a <setCommand+0x676>
 800928a:	2f3b      	cmp	r7, #59	; 0x3b
 800928c:	d900      	bls.n	8009290 <setCommand+0x3dc>
 800928e:	e14c      	b.n	800952a <setCommand+0x676>
 8009290:	2e3b      	cmp	r6, #59	; 0x3b
 8009292:	d900      	bls.n	8009296 <setCommand+0x3e2>
 8009294:	e149      	b.n	800952a <setCommand+0x676>
				GetTimeDate();				
 8009296:	f7ff fcf9 	bl	8008c8c <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 800929a:	4cad      	ldr	r4, [pc, #692]	; (8009550 <setCommand+0x69c>)
 800929c:	7d23      	ldrb	r3, [r4, #20]
 800929e:	8b22      	ldrh	r2, [r4, #24]
 80092a0:	7d61      	ldrb	r1, [r4, #21]
 80092a2:	7da0      	ldrb	r0, [r4, #22]
 80092a4:	7b24      	ldrb	r4, [r4, #12]
 80092a6:	b264      	sxtb	r4, r4
 80092a8:	9404      	str	r4, [sp, #16]
 80092aa:	4644      	mov	r4, r8
 80092ac:	9403      	str	r4, [sp, #12]
 80092ae:	464c      	mov	r4, r9
 80092b0:	9402      	str	r4, [sp, #8]
 80092b2:	9701      	str	r7, [sp, #4]
 80092b4:	9600      	str	r6, [sp, #0]
 80092b6:	f7ff fc8f 	bl	8008bd8 <BOS_CalendarConfig>
 80092ba:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 80092bc:	2e00      	cmp	r6, #0
 80092be:	d100      	bne.n	80092c2 <setCommand+0x40e>
 80092c0:	e653      	b.n	8008f6a <setCommand+0xb6>
	else if (result == BOS_ERR_WrongParam)
 80092c2:	2e67      	cmp	r6, #103	; 0x67
 80092c4:	d100      	bne.n	80092c8 <setCommand+0x414>
 80092c6:	e624      	b.n	8008f12 <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 80092c8:	2e68      	cmp	r6, #104	; 0x68
 80092ca:	d100      	bne.n	80092ce <setCommand+0x41a>
 80092cc:	e12d      	b.n	800952a <setCommand+0x676>
}
 80092ce:	2000      	movs	r0, #0
 80092d0:	b00d      	add	sp, #52	; 0x34
 80092d2:	bc0c      	pop	{r2, r3}
 80092d4:	4690      	mov	r8, r2
 80092d6:	4699      	mov	r9, r3
 80092d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 80092da:	2301      	movs	r3, #1
 80092dc:	4698      	mov	r8, r3
 80092de:	e7d0      	b.n	8009282 <setCommand+0x3ce>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80092e0:	aa0a      	add	r2, sp, #40	; 0x28
 80092e2:	2102      	movs	r1, #2
 80092e4:	0020      	movs	r0, r4
 80092e6:	f004 fa3f 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80092ea:	4e93      	ldr	r6, [pc, #588]	; (8009538 <setCommand+0x684>)
 80092ec:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80092ee:	aa09      	add	r2, sp, #36	; 0x24
 80092f0:	2103      	movs	r1, #3
 80092f2:	0020      	movs	r0, r4
 80092f4:	f004 fa38 	bl	800d768 <FreeRTOS_CLIGetParameter>
 80092f8:	4b90      	ldr	r3, [pc, #576]	; (800953c <setCommand+0x688>)
 80092fa:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80092fc:	aa08      	add	r2, sp, #32
 80092fe:	2104      	movs	r1, #4
 8009300:	0020      	movs	r0, r4
 8009302:	f004 fa31 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8009306:	4b8e      	ldr	r3, [pc, #568]	; (8009540 <setCommand+0x68c>)
 8009308:	4698      	mov	r8, r3
 800930a:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800930c:	aa07      	add	r2, sp, #28
 800930e:	2105      	movs	r1, #5
 8009310:	0020      	movs	r0, r4
 8009312:	f004 fa29 	bl	800d768 <FreeRTOS_CLIGetParameter>
 8009316:	4c8b      	ldr	r4, [pc, #556]	; (8009544 <setCommand+0x690>)
 8009318:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 800931a:	4643      	mov	r3, r8
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f009 fad6 	bl	80128ce <atoi>
 8009322:	b2c3      	uxtb	r3, r0
 8009324:	4698      	mov	r8, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	f009 fad1 	bl	80128ce <atoi>
 800932c:	b283      	uxth	r3, r0
 800932e:	4699      	mov	r9, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8009330:	6834      	ldr	r4, [r6, #0]
 8009332:	2206      	movs	r2, #6
 8009334:	4987      	ldr	r1, [pc, #540]	; (8009554 <setCommand+0x6a0>)
 8009336:	0020      	movs	r0, r4
 8009338:	f009 ffa0 	bl	801327c <strncmp>
 800933c:	2800      	cmp	r0, #0
 800933e:	d100      	bne.n	8009342 <setCommand+0x48e>
 8009340:	e195      	b.n	800966e <setCommand+0x7ba>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8009342:	2207      	movs	r2, #7
 8009344:	4984      	ldr	r1, [pc, #528]	; (8009558 <setCommand+0x6a4>)
 8009346:	0020      	movs	r0, r4
 8009348:	f009 ff98 	bl	801327c <strncmp>
 800934c:	2800      	cmp	r0, #0
 800934e:	d100      	bne.n	8009352 <setCommand+0x49e>
 8009350:	e19b      	b.n	800968a <setCommand+0x7d6>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8009352:	2209      	movs	r2, #9
 8009354:	4981      	ldr	r1, [pc, #516]	; (800955c <setCommand+0x6a8>)
 8009356:	0020      	movs	r0, r4
 8009358:	f009 ff90 	bl	801327c <strncmp>
 800935c:	2800      	cmp	r0, #0
 800935e:	d100      	bne.n	8009362 <setCommand+0x4ae>
 8009360:	e195      	b.n	800968e <setCommand+0x7da>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8009362:	2208      	movs	r2, #8
 8009364:	497e      	ldr	r1, [pc, #504]	; (8009560 <setCommand+0x6ac>)
 8009366:	0020      	movs	r0, r4
 8009368:	f009 ff88 	bl	801327c <strncmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	d100      	bne.n	8009372 <setCommand+0x4be>
 8009370:	e18f      	b.n	8009692 <setCommand+0x7de>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8009372:	2206      	movs	r2, #6
 8009374:	497b      	ldr	r1, [pc, #492]	; (8009564 <setCommand+0x6b0>)
 8009376:	0020      	movs	r0, r4
 8009378:	f009 ff80 	bl	801327c <strncmp>
 800937c:	2800      	cmp	r0, #0
 800937e:	d100      	bne.n	8009382 <setCommand+0x4ce>
 8009380:	e189      	b.n	8009696 <setCommand+0x7e2>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8009382:	2208      	movs	r2, #8
 8009384:	4978      	ldr	r1, [pc, #480]	; (8009568 <setCommand+0x6b4>)
 8009386:	0020      	movs	r0, r4
 8009388:	f009 ff78 	bl	801327c <strncmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	d100      	bne.n	8009392 <setCommand+0x4de>
 8009390:	e183      	b.n	800969a <setCommand+0x7e6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8009392:	2206      	movs	r2, #6
 8009394:	4975      	ldr	r1, [pc, #468]	; (800956c <setCommand+0x6b8>)
 8009396:	0020      	movs	r0, r4
 8009398:	f009 ff70 	bl	801327c <strncmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	d100      	bne.n	80093a2 <setCommand+0x4ee>
 80093a0:	e17d      	b.n	800969e <setCommand+0x7ea>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80093a2:	4b66      	ldr	r3, [pc, #408]	; (800953c <setCommand+0x688>)
 80093a4:	681c      	ldr	r4, [r3, #0]
 80093a6:	2207      	movs	r2, #7
 80093a8:	4971      	ldr	r1, [pc, #452]	; (8009570 <setCommand+0x6bc>)
 80093aa:	0020      	movs	r0, r4
 80093ac:	f009 ff66 	bl	801327c <strncmp>
			result = BOS_ERR_WrongValue;		
 80093b0:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d101      	bne.n	80093ba <setCommand+0x506>
			result = BOS_ERR_WrongValue;		
 80093b6:	2668      	movs	r6, #104	; 0x68
 80093b8:	e783      	b.n	80092c2 <setCommand+0x40e>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80093ba:	2202      	movs	r2, #2
 80093bc:	496d      	ldr	r1, [pc, #436]	; (8009574 <setCommand+0x6c0>)
 80093be:	0020      	movs	r0, r4
 80093c0:	f009 ff5c 	bl	801327c <strncmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d100      	bne.n	80093ca <setCommand+0x516>
 80093c8:	e104      	b.n	80095d4 <setCommand+0x720>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 80093ca:	2208      	movs	r2, #8
 80093cc:	496a      	ldr	r1, [pc, #424]	; (8009578 <setCommand+0x6c4>)
 80093ce:	0020      	movs	r0, r4
 80093d0:	f009 ff54 	bl	801327c <strncmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d100      	bne.n	80093da <setCommand+0x526>
 80093d8:	e11f      	b.n	800961a <setCommand+0x766>
 80093da:	2202      	movs	r2, #2
 80093dc:	4967      	ldr	r1, [pc, #412]	; (800957c <setCommand+0x6c8>)
 80093de:	0020      	movs	r0, r4
 80093e0:	f009 ff4c 	bl	801327c <strncmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d100      	bne.n	80093ea <setCommand+0x536>
 80093e8:	e119      	b.n	800961e <setCommand+0x76a>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 80093ea:	2205      	movs	r2, #5
 80093ec:	4964      	ldr	r1, [pc, #400]	; (8009580 <setCommand+0x6cc>)
 80093ee:	0020      	movs	r0, r4
 80093f0:	f009 ff44 	bl	801327c <strncmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d100      	bne.n	80093fa <setCommand+0x546>
 80093f8:	e113      	b.n	8009622 <setCommand+0x76e>
 80093fa:	2202      	movs	r2, #2
 80093fc:	4961      	ldr	r1, [pc, #388]	; (8009584 <setCommand+0x6d0>)
 80093fe:	0020      	movs	r0, r4
 8009400:	f009 ff3c 	bl	801327c <strncmp>
 8009404:	2800      	cmp	r0, #0
 8009406:	d100      	bne.n	800940a <setCommand+0x556>
 8009408:	e10d      	b.n	8009626 <setCommand+0x772>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 800940a:	2205      	movs	r2, #5
 800940c:	495e      	ldr	r1, [pc, #376]	; (8009588 <setCommand+0x6d4>)
 800940e:	0020      	movs	r0, r4
 8009410:	f009 ff34 	bl	801327c <strncmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	d100      	bne.n	800941a <setCommand+0x566>
 8009418:	e107      	b.n	800962a <setCommand+0x776>
 800941a:	2202      	movs	r2, #2
 800941c:	495b      	ldr	r1, [pc, #364]	; (800958c <setCommand+0x6d8>)
 800941e:	0020      	movs	r0, r4
 8009420:	f009 ff2c 	bl	801327c <strncmp>
 8009424:	2800      	cmp	r0, #0
 8009426:	d100      	bne.n	800942a <setCommand+0x576>
 8009428:	e101      	b.n	800962e <setCommand+0x77a>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 800942a:	2203      	movs	r2, #3
 800942c:	4958      	ldr	r1, [pc, #352]	; (8009590 <setCommand+0x6dc>)
 800942e:	0020      	movs	r0, r4
 8009430:	f009 ff24 	bl	801327c <strncmp>
 8009434:	2800      	cmp	r0, #0
 8009436:	d100      	bne.n	800943a <setCommand+0x586>
 8009438:	e0fb      	b.n	8009632 <setCommand+0x77e>
 800943a:	2202      	movs	r2, #2
 800943c:	4955      	ldr	r1, [pc, #340]	; (8009594 <setCommand+0x6e0>)
 800943e:	0020      	movs	r0, r4
 8009440:	f009 ff1c 	bl	801327c <strncmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	d100      	bne.n	800944a <setCommand+0x596>
 8009448:	e0f5      	b.n	8009636 <setCommand+0x782>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 800944a:	2204      	movs	r2, #4
 800944c:	4952      	ldr	r1, [pc, #328]	; (8009598 <setCommand+0x6e4>)
 800944e:	0020      	movs	r0, r4
 8009450:	f009 ff14 	bl	801327c <strncmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	d100      	bne.n	800945a <setCommand+0x5a6>
 8009458:	e0ef      	b.n	800963a <setCommand+0x786>
 800945a:	2202      	movs	r2, #2
 800945c:	494f      	ldr	r1, [pc, #316]	; (800959c <setCommand+0x6e8>)
 800945e:	0020      	movs	r0, r4
 8009460:	f009 ff0c 	bl	801327c <strncmp>
 8009464:	2800      	cmp	r0, #0
 8009466:	d100      	bne.n	800946a <setCommand+0x5b6>
 8009468:	e0e9      	b.n	800963e <setCommand+0x78a>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 800946a:	2204      	movs	r2, #4
 800946c:	494c      	ldr	r1, [pc, #304]	; (80095a0 <setCommand+0x6ec>)
 800946e:	0020      	movs	r0, r4
 8009470:	f009 ff04 	bl	801327c <strncmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	d100      	bne.n	800947a <setCommand+0x5c6>
 8009478:	e0e3      	b.n	8009642 <setCommand+0x78e>
 800947a:	2202      	movs	r2, #2
 800947c:	4949      	ldr	r1, [pc, #292]	; (80095a4 <setCommand+0x6f0>)
 800947e:	0020      	movs	r0, r4
 8009480:	f009 fefc 	bl	801327c <strncmp>
 8009484:	2800      	cmp	r0, #0
 8009486:	d100      	bne.n	800948a <setCommand+0x5d6>
 8009488:	e0dd      	b.n	8009646 <setCommand+0x792>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 800948a:	2205      	movs	r2, #5
 800948c:	4946      	ldr	r1, [pc, #280]	; (80095a8 <setCommand+0x6f4>)
 800948e:	0020      	movs	r0, r4
 8009490:	f009 fef4 	bl	801327c <strncmp>
 8009494:	2800      	cmp	r0, #0
 8009496:	d100      	bne.n	800949a <setCommand+0x5e6>
 8009498:	e0d7      	b.n	800964a <setCommand+0x796>
 800949a:	2202      	movs	r2, #2
 800949c:	4943      	ldr	r1, [pc, #268]	; (80095ac <setCommand+0x6f8>)
 800949e:	0020      	movs	r0, r4
 80094a0:	f009 feec 	bl	801327c <strncmp>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d100      	bne.n	80094aa <setCommand+0x5f6>
 80094a8:	e0d1      	b.n	800964e <setCommand+0x79a>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 80094aa:	2209      	movs	r2, #9
 80094ac:	4940      	ldr	r1, [pc, #256]	; (80095b0 <setCommand+0x6fc>)
 80094ae:	0020      	movs	r0, r4
 80094b0:	f009 fee4 	bl	801327c <strncmp>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d100      	bne.n	80094ba <setCommand+0x606>
 80094b8:	e0cb      	b.n	8009652 <setCommand+0x79e>
 80094ba:	2202      	movs	r2, #2
 80094bc:	493d      	ldr	r1, [pc, #244]	; (80095b4 <setCommand+0x700>)
 80094be:	0020      	movs	r0, r4
 80094c0:	f009 fedc 	bl	801327c <strncmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d100      	bne.n	80094ca <setCommand+0x616>
 80094c8:	e0c5      	b.n	8009656 <setCommand+0x7a2>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 80094ca:	2207      	movs	r2, #7
 80094cc:	493a      	ldr	r1, [pc, #232]	; (80095b8 <setCommand+0x704>)
 80094ce:	0020      	movs	r0, r4
 80094d0:	f009 fed4 	bl	801327c <strncmp>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d100      	bne.n	80094da <setCommand+0x626>
 80094d8:	e0bf      	b.n	800965a <setCommand+0x7a6>
 80094da:	2202      	movs	r2, #2
 80094dc:	4937      	ldr	r1, [pc, #220]	; (80095bc <setCommand+0x708>)
 80094de:	0020      	movs	r0, r4
 80094e0:	f009 fecc 	bl	801327c <strncmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d100      	bne.n	80094ea <setCommand+0x636>
 80094e8:	e0b9      	b.n	800965e <setCommand+0x7aa>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 80094ea:	2208      	movs	r2, #8
 80094ec:	4934      	ldr	r1, [pc, #208]	; (80095c0 <setCommand+0x70c>)
 80094ee:	0020      	movs	r0, r4
 80094f0:	f009 fec4 	bl	801327c <strncmp>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d100      	bne.n	80094fa <setCommand+0x646>
 80094f8:	e0b3      	b.n	8009662 <setCommand+0x7ae>
 80094fa:	2202      	movs	r2, #2
 80094fc:	4931      	ldr	r1, [pc, #196]	; (80095c4 <setCommand+0x710>)
 80094fe:	0020      	movs	r0, r4
 8009500:	f009 febc 	bl	801327c <strncmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	d100      	bne.n	800950a <setCommand+0x656>
 8009508:	e0ad      	b.n	8009666 <setCommand+0x7b2>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 800950a:	2208      	movs	r2, #8
 800950c:	492e      	ldr	r1, [pc, #184]	; (80095c8 <setCommand+0x714>)
 800950e:	0020      	movs	r0, r4
 8009510:	f009 feb4 	bl	801327c <strncmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	d100      	bne.n	800951a <setCommand+0x666>
 8009518:	e0a7      	b.n	800966a <setCommand+0x7b6>
 800951a:	2202      	movs	r2, #2
 800951c:	492b      	ldr	r1, [pc, #172]	; (80095cc <setCommand+0x718>)
 800951e:	0020      	movs	r0, r4
 8009520:	f009 feac 	bl	801327c <strncmp>
			temp82 = DECEMBER;
 8009524:	240c      	movs	r4, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8009526:	2800      	cmp	r0, #0
 8009528:	d055      	beq.n	80095d6 <setCommand+0x722>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 800952a:	220f      	movs	r2, #15
 800952c:	4928      	ldr	r1, [pc, #160]	; (80095d0 <setCommand+0x71c>)
 800952e:	0028      	movs	r0, r5
 8009530:	f009 fc5d 	bl	8012dee <memcpy>
 8009534:	e6cb      	b.n	80092ce <setCommand+0x41a>
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	2000120c 	.word	0x2000120c
 800953c:	20001214 	.word	0x20001214
 8009540:	20001218 	.word	0x20001218
 8009544:	2000121c 	.word	0x2000121c
 8009548:	08018914 	.word	0x08018914
 800954c:	08018918 	.word	0x08018918
 8009550:	20006894 	.word	0x20006894
 8009554:	08018924 	.word	0x08018924
 8009558:	0801892c 	.word	0x0801892c
 800955c:	08018934 	.word	0x08018934
 8009560:	08018940 	.word	0x08018940
 8009564:	0801894c 	.word	0x0801894c
 8009568:	08018954 	.word	0x08018954
 800956c:	08018960 	.word	0x08018960
 8009570:	080189fc 	.word	0x080189fc
 8009574:	08018968 	.word	0x08018968
 8009578:	0801896c 	.word	0x0801896c
 800957c:	08018978 	.word	0x08018978
 8009580:	0801897c 	.word	0x0801897c
 8009584:	08018984 	.word	0x08018984
 8009588:	08018988 	.word	0x08018988
 800958c:	08018990 	.word	0x08018990
 8009590:	08018994 	.word	0x08018994
 8009594:	08018998 	.word	0x08018998
 8009598:	0801899c 	.word	0x0801899c
 800959c:	080189a4 	.word	0x080189a4
 80095a0:	080189a8 	.word	0x080189a8
 80095a4:	080189b0 	.word	0x080189b0
 80095a8:	080189b4 	.word	0x080189b4
 80095ac:	080189bc 	.word	0x080189bc
 80095b0:	080189c0 	.word	0x080189c0
 80095b4:	080189cc 	.word	0x080189cc
 80095b8:	080189d0 	.word	0x080189d0
 80095bc:	080189d8 	.word	0x080189d8
 80095c0:	080189dc 	.word	0x080189dc
 80095c4:	080189e8 	.word	0x080189e8
 80095c8:	080189ec 	.word	0x080189ec
 80095cc:	080189f8 	.word	0x080189f8
 80095d0:	08017e90 	.word	0x08017e90
			temp82 = JANUARY;
 80095d4:	2401      	movs	r4, #1
		if (result == BOS_OK) 
 80095d6:	2e00      	cmp	r6, #0
 80095d8:	d000      	beq.n	80095dc <setCommand+0x728>
 80095da:	e672      	b.n	80092c2 <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80095dc:	4643      	mov	r3, r8
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b1e      	cmp	r3, #30
 80095e2:	d8a2      	bhi.n	800952a <setCommand+0x676>
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <setCommand+0x7f0>)
 80095e6:	444b      	add	r3, r9
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b64      	cmp	r3, #100	; 0x64
 80095ec:	d89d      	bhi.n	800952a <setCommand+0x676>
				GetTimeDate();
 80095ee:	f7ff fb4d 	bl	8008c8c <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 80095f2:	4b2d      	ldr	r3, [pc, #180]	; (80096a8 <setCommand+0x7f4>)
 80095f4:	220c      	movs	r2, #12
 80095f6:	569a      	ldrsb	r2, [r3, r2]
 80095f8:	9204      	str	r2, [sp, #16]
 80095fa:	7cda      	ldrb	r2, [r3, #19]
 80095fc:	9203      	str	r2, [sp, #12]
 80095fe:	7c9a      	ldrb	r2, [r3, #18]
 8009600:	9202      	str	r2, [sp, #8]
 8009602:	7c5a      	ldrb	r2, [r3, #17]
 8009604:	9201      	str	r2, [sp, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	003b      	movs	r3, r7
 800960c:	464a      	mov	r2, r9
 800960e:	4641      	mov	r1, r8
 8009610:	0020      	movs	r0, r4
 8009612:	f7ff fae1 	bl	8008bd8 <BOS_CalendarConfig>
 8009616:	0006      	movs	r6, r0
 8009618:	e650      	b.n	80092bc <setCommand+0x408>
			temp82 = FEBRUARY;
 800961a:	2402      	movs	r4, #2
 800961c:	e7db      	b.n	80095d6 <setCommand+0x722>
 800961e:	2402      	movs	r4, #2
 8009620:	e7d9      	b.n	80095d6 <setCommand+0x722>
			temp82 = MARCH;
 8009622:	2403      	movs	r4, #3
 8009624:	e7d7      	b.n	80095d6 <setCommand+0x722>
 8009626:	2403      	movs	r4, #3
 8009628:	e7d5      	b.n	80095d6 <setCommand+0x722>
			temp82 = APRIL;
 800962a:	2404      	movs	r4, #4
 800962c:	e7d3      	b.n	80095d6 <setCommand+0x722>
 800962e:	2404      	movs	r4, #4
 8009630:	e7d1      	b.n	80095d6 <setCommand+0x722>
			temp82 = MAY;
 8009632:	2405      	movs	r4, #5
 8009634:	e7cf      	b.n	80095d6 <setCommand+0x722>
 8009636:	2405      	movs	r4, #5
 8009638:	e7cd      	b.n	80095d6 <setCommand+0x722>
			temp82 = JUNE;
 800963a:	2406      	movs	r4, #6
 800963c:	e7cb      	b.n	80095d6 <setCommand+0x722>
 800963e:	2406      	movs	r4, #6
 8009640:	e7c9      	b.n	80095d6 <setCommand+0x722>
			temp82 = JULY;
 8009642:	2407      	movs	r4, #7
 8009644:	e7c7      	b.n	80095d6 <setCommand+0x722>
 8009646:	2407      	movs	r4, #7
 8009648:	e7c5      	b.n	80095d6 <setCommand+0x722>
			temp82 = AUGUST;
 800964a:	2408      	movs	r4, #8
 800964c:	e7c3      	b.n	80095d6 <setCommand+0x722>
 800964e:	2408      	movs	r4, #8
 8009650:	e7c1      	b.n	80095d6 <setCommand+0x722>
			temp82 = SEPTEMBER;
 8009652:	2409      	movs	r4, #9
 8009654:	e7bf      	b.n	80095d6 <setCommand+0x722>
 8009656:	2409      	movs	r4, #9
 8009658:	e7bd      	b.n	80095d6 <setCommand+0x722>
			temp82 = OCTOBER;
 800965a:	240a      	movs	r4, #10
 800965c:	e7bb      	b.n	80095d6 <setCommand+0x722>
 800965e:	240a      	movs	r4, #10
 8009660:	e7b9      	b.n	80095d6 <setCommand+0x722>
			temp82 = NOVEMBER;
 8009662:	240b      	movs	r4, #11
 8009664:	e7b7      	b.n	80095d6 <setCommand+0x722>
 8009666:	240b      	movs	r4, #11
 8009668:	e7b5      	b.n	80095d6 <setCommand+0x722>
			temp82 = DECEMBER;
 800966a:	240c      	movs	r4, #12
 800966c:	e7b3      	b.n	80095d6 <setCommand+0x722>
			temp81 = MONDAY;
 800966e:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <setCommand+0x7f8>)
 8009672:	681c      	ldr	r4, [r3, #0]
 8009674:	2207      	movs	r2, #7
 8009676:	490e      	ldr	r1, [pc, #56]	; (80096b0 <setCommand+0x7fc>)
 8009678:	0020      	movs	r0, r4
 800967a:	f009 fdff 	bl	801327c <strncmp>
 800967e:	2600      	movs	r6, #0
 8009680:	2800      	cmp	r0, #0
 8009682:	d000      	beq.n	8009686 <setCommand+0x7d2>
 8009684:	e699      	b.n	80093ba <setCommand+0x506>
			temp82 = JANUARY;
 8009686:	2401      	movs	r4, #1
 8009688:	e7a8      	b.n	80095dc <setCommand+0x728>
			temp81 = TUESDAY;
 800968a:	2702      	movs	r7, #2
 800968c:	e7f0      	b.n	8009670 <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 800968e:	2703      	movs	r7, #3
 8009690:	e7ee      	b.n	8009670 <setCommand+0x7bc>
			temp81 = THURSDAY;
 8009692:	2704      	movs	r7, #4
 8009694:	e7ec      	b.n	8009670 <setCommand+0x7bc>
			temp81 = FRIDAY;
 8009696:	2705      	movs	r7, #5
 8009698:	e7ea      	b.n	8009670 <setCommand+0x7bc>
			temp81 = SATURDAY;
 800969a:	2706      	movs	r7, #6
 800969c:	e7e8      	b.n	8009670 <setCommand+0x7bc>
			temp81 = SUNDAY;
 800969e:	2707      	movs	r7, #7
 80096a0:	e7e6      	b.n	8009670 <setCommand+0x7bc>
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	fffff830 	.word	0xfffff830
 80096a8:	20006894 	.word	0x20006894
 80096ac:	20001214 	.word	0x20001214
 80096b0:	080189fc 	.word	0x080189fc

080096b4 <GetDateString>:
{
 80096b4:	b510      	push	{r4, lr}
 80096b6:	b082      	sub	sp, #8
  char *buffer = malloc(30 * sizeof(int8_t));
 80096b8:	201e      	movs	r0, #30
 80096ba:	f009 f94b 	bl	8012954 <malloc>
 80096be:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 80096c0:	221e      	movs	r2, #30
 80096c2:	2100      	movs	r1, #0
 80096c4:	f009 fb9c 	bl	8012e00 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 80096c8:	4908      	ldr	r1, [pc, #32]	; (80096ec <GetDateString+0x38>)
 80096ca:	7d8b      	ldrb	r3, [r1, #22]
 80096cc:	7d0a      	ldrb	r2, [r1, #20]
 80096ce:	3a01      	subs	r2, #1
 80096d0:	0092      	lsls	r2, r2, #2
 80096d2:	4807      	ldr	r0, [pc, #28]	; (80096f0 <GetDateString+0x3c>)
 80096d4:	5812      	ldr	r2, [r2, r0]
 80096d6:	8b08      	ldrh	r0, [r1, #24]
 80096d8:	9001      	str	r0, [sp, #4]
 80096da:	7d49      	ldrb	r1, [r1, #21]
 80096dc:	9100      	str	r1, [sp, #0]
 80096de:	4905      	ldr	r1, [pc, #20]	; (80096f4 <GetDateString+0x40>)
 80096e0:	0020      	movs	r0, r4
 80096e2:	f009 fd87 	bl	80131f4 <sprintf>
}
 80096e6:	0020      	movs	r0, r4
 80096e8:	b002      	add	sp, #8
 80096ea:	bd10      	pop	{r4, pc}
 80096ec:	20006894 	.word	0x20006894
 80096f0:	08019a90 	.word	0x08019a90
 80096f4:	08017f9c 	.word	0x08017f9c

080096f8 <dateCommand>:
{
 80096f8:	b510      	push	{r4, lr}
 80096fa:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80096fc:	d101      	bne.n	8009702 <dateCommand+0xa>
 80096fe:	b672      	cpsid	i
 8009700:	e7fe      	b.n	8009700 <dateCommand+0x8>
	GetTimeDate();
 8009702:	f7ff fac3 	bl	8008c8c <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8009706:	f7ff ffd5 	bl	80096b4 <GetDateString>
 800970a:	0002      	movs	r2, r0
 800970c:	4902      	ldr	r1, [pc, #8]	; (8009718 <dateCommand+0x20>)
 800970e:	0020      	movs	r0, r4
 8009710:	f009 fd70 	bl	80131f4 <sprintf>
}
 8009714:	2000      	movs	r0, #0
 8009716:	bd10      	pop	{r4, pc}
 8009718:	08017e30 	.word	0x08017e30

0800971c <Bridge>:
{
 800971c:	b500      	push	{lr}
 800971e:	b085      	sub	sp, #20
 8009720:	000a      	movs	r2, r1
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8009722:	4b07      	ldr	r3, [pc, #28]	; (8009740 <Bridge+0x24>)
 8009724:	7819      	ldrb	r1, [r3, #0]
 8009726:	2301      	movs	r3, #1
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	3b02      	subs	r3, #2
 800972c:	9302      	str	r3, [sp, #8]
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	3303      	adds	r3, #3
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	000b      	movs	r3, r1
 8009736:	f7fd f901 	bl	800693c <StartScastDMAStream>
}
 800973a:	b005      	add	sp, #20
 800973c:	bd00      	pop	{pc}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	200011c8 	.word	0x200011c8

08009744 <bridgeCommand>:
{	
 8009744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009746:	b083      	sub	sp, #12
 8009748:	0004      	movs	r4, r0
 800974a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8009752:	2800      	cmp	r0, #0
 8009754:	d101      	bne.n	800975a <bridgeCommand+0x16>
 8009756:	b672      	cpsid	i
 8009758:	e7fe      	b.n	8009758 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800975a:	aa01      	add	r2, sp, #4
 800975c:	2101      	movs	r1, #1
 800975e:	0028      	movs	r0, r5
 8009760:	f004 f802 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009764:	2300      	movs	r3, #0
 8009766:	56c3      	ldrsb	r3, [r0, r3]
 8009768:	2b70      	cmp	r3, #112	; 0x70
 800976a:	d00e      	beq.n	800978a <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800976c:	466a      	mov	r2, sp
 800976e:	2102      	movs	r1, #2
 8009770:	0028      	movs	r0, r5
 8009772:	f003 fff9 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009776:	2300      	movs	r3, #0
 8009778:	56c3      	ldrsb	r3, [r0, r3]
 800977a:	2b70      	cmp	r3, #112	; 0x70
 800977c:	d01e      	beq.n	80097bc <bridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800977e:	220f      	movs	r2, #15
 8009780:	491a      	ldr	r1, [pc, #104]	; (80097ec <bridgeCommand+0xa8>)
 8009782:	0020      	movs	r0, r4
 8009784:	f009 fb33 	bl	8012dee <memcpy>
 8009788:	e015      	b.n	80097b6 <bridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800978a:	3001      	adds	r0, #1
 800978c:	f009 f8a5 	bl	80128da <atol>
 8009790:	0006      	movs	r6, r0
 8009792:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009794:	466a      	mov	r2, sp
 8009796:	2102      	movs	r1, #2
 8009798:	0028      	movs	r0, r5
 800979a:	f003 ffe5 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800979e:	2300      	movs	r3, #0
 80097a0:	56c3      	ldrsb	r3, [r0, r3]
 80097a2:	2b70      	cmp	r3, #112	; 0x70
 80097a4:	d00e      	beq.n	80097c4 <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 80097a6:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 80097a8:	2867      	cmp	r0, #103	; 0x67
 80097aa:	d0e8      	beq.n	800977e <bridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 80097ac:	2217      	movs	r2, #23
 80097ae:	4910      	ldr	r1, [pc, #64]	; (80097f0 <bridgeCommand+0xac>)
 80097b0:	0020      	movs	r0, r4
 80097b2:	f009 fb1c 	bl	8012dee <memcpy>
}
 80097b6:	2000      	movs	r0, #0
 80097b8:	b003      	add	sp, #12
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80097bc:	3001      	adds	r0, #1
 80097be:	f009 f88c 	bl	80128da <atol>
 80097c2:	e7dc      	b.n	800977e <bridgeCommand+0x3a>
 80097c4:	3001      	adds	r0, #1
 80097c6:	f009 f888 	bl	80128da <atol>
 80097ca:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 80097cc:	b2c1      	uxtb	r1, r0
 80097ce:	0038      	movs	r0, r7
 80097d0:	f7ff ffa4 	bl	800971c <Bridge>
	if (result == BOS_OK) 
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1e7      	bne.n	80097a8 <bridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80097d8:	22ff      	movs	r2, #255	; 0xff
 80097da:	002b      	movs	r3, r5
 80097dc:	4013      	ands	r3, r2
 80097de:	4032      	ands	r2, r6
 80097e0:	4904      	ldr	r1, [pc, #16]	; (80097f4 <bridgeCommand+0xb0>)
 80097e2:	0020      	movs	r0, r4
 80097e4:	f009 fd06 	bl	80131f4 <sprintf>
 80097e8:	e7e5      	b.n	80097b6 <bridgeCommand+0x72>
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	08019974 	.word	0x08019974
 80097f0:	08017e08 	.word	0x08017e08
 80097f4:	08017de4 	.word	0x08017de4

080097f8 <Unbridge>:
{		
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	b087      	sub	sp, #28
 80097fc:	0004      	movs	r4, r0
 80097fe:	000d      	movs	r5, r1
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8009800:	2300      	movs	r3, #0
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	2100      	movs	r1, #0
 8009810:	2000      	movs	r0, #0
 8009812:	f7fa fc4d 	bl	80040b0 <SaveEEstreams>
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8009816:	1e62      	subs	r2, r4, #1
 8009818:	00d3      	lsls	r3, r2, #3
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4a14      	ldr	r2, [pc, #80]	; (8009870 <Unbridge+0x78>)
 8009820:	589b      	ldr	r3, [r3, r2]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d015      	beq.n	8009852 <Unbridge+0x5a>
 8009826:	1e6a      	subs	r2, r5, #1
 8009828:	00d3      	lsls	r3, r2, #3
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	4a10      	ldr	r2, [pc, #64]	; (8009870 <Unbridge+0x78>)
 8009830:	589b      	ldr	r3, [r3, r2]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8009836:	0020      	movs	r0, r4
 8009838:	f000 ff90 	bl	800a75c <SwitchStreamDMAToMsg>
 800983c:	2000      	movs	r0, #0
 800983e:	e006      	b.n	800984e <Unbridge+0x56>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8009840:	0020      	movs	r0, r4
 8009842:	f000 ff8b 	bl	800a75c <SwitchStreamDMAToMsg>
 8009846:	0028      	movs	r0, r5
 8009848:	f000 ff88 	bl	800a75c <SwitchStreamDMAToMsg>
 800984c:	2000      	movs	r0, #0
}
 800984e:	b007      	add	sp, #28
 8009850:	bd30      	pop	{r4, r5, pc}
	else if (streamDMA[port2-1].Instance != 0)
 8009852:	1e6a      	subs	r2, r5, #1
 8009854:	00d3      	lsls	r3, r2, #3
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	4a05      	ldr	r2, [pc, #20]	; (8009870 <Unbridge+0x78>)
 800985c:	589b      	ldr	r3, [r3, r2]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d004      	beq.n	800986c <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8009862:	0028      	movs	r0, r5
 8009864:	f000 ff7a 	bl	800a75c <SwitchStreamDMAToMsg>
 8009868:	2000      	movs	r0, #0
 800986a:	e7f0      	b.n	800984e <Unbridge+0x56>
	else {return BOS_ERR_WrongValue;}
 800986c:	2068      	movs	r0, #104	; 0x68
 800986e:	e7ee      	b.n	800984e <Unbridge+0x56>
 8009870:	2000182c 	.word	0x2000182c

08009874 <unbridgeCommand>:
{	
 8009874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009876:	b083      	sub	sp, #12
 8009878:	0004      	movs	r4, r0
 800987a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8009882:	2800      	cmp	r0, #0
 8009884:	d101      	bne.n	800988a <unbridgeCommand+0x16>
 8009886:	b672      	cpsid	i
 8009888:	e7fe      	b.n	8009888 <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800988a:	aa01      	add	r2, sp, #4
 800988c:	2101      	movs	r1, #1
 800988e:	0028      	movs	r0, r5
 8009890:	f003 ff6a 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009894:	2300      	movs	r3, #0
 8009896:	56c3      	ldrsb	r3, [r0, r3]
 8009898:	2b70      	cmp	r3, #112	; 0x70
 800989a:	d00e      	beq.n	80098ba <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800989c:	466a      	mov	r2, sp
 800989e:	2102      	movs	r1, #2
 80098a0:	0028      	movs	r0, r5
 80098a2:	f003 ff61 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80098a6:	2300      	movs	r3, #0
 80098a8:	56c3      	ldrsb	r3, [r0, r3]
 80098aa:	2b70      	cmp	r3, #112	; 0x70
 80098ac:	d01e      	beq.n	80098ec <unbridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 80098ae:	220f      	movs	r2, #15
 80098b0:	491a      	ldr	r1, [pc, #104]	; (800991c <unbridgeCommand+0xa8>)
 80098b2:	0020      	movs	r0, r4
 80098b4:	f009 fa9b 	bl	8012dee <memcpy>
 80098b8:	e015      	b.n	80098e6 <unbridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80098ba:	3001      	adds	r0, #1
 80098bc:	f009 f80d 	bl	80128da <atol>
 80098c0:	0006      	movs	r6, r0
 80098c2:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80098c4:	466a      	mov	r2, sp
 80098c6:	2102      	movs	r1, #2
 80098c8:	0028      	movs	r0, r5
 80098ca:	f003 ff4d 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80098ce:	2300      	movs	r3, #0
 80098d0:	56c3      	ldrsb	r3, [r0, r3]
 80098d2:	2b70      	cmp	r3, #112	; 0x70
 80098d4:	d00e      	beq.n	80098f4 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 80098d6:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 80098d8:	2867      	cmp	r0, #103	; 0x67
 80098da:	d0e8      	beq.n	80098ae <unbridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 80098dc:	2219      	movs	r2, #25
 80098de:	4910      	ldr	r1, [pc, #64]	; (8009920 <unbridgeCommand+0xac>)
 80098e0:	0020      	movs	r0, r4
 80098e2:	f009 fa84 	bl	8012dee <memcpy>
}
 80098e6:	2000      	movs	r0, #0
 80098e8:	b003      	add	sp, #12
 80098ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80098ec:	3001      	adds	r0, #1
 80098ee:	f008 fff4 	bl	80128da <atol>
 80098f2:	e7dc      	b.n	80098ae <unbridgeCommand+0x3a>
 80098f4:	3001      	adds	r0, #1
 80098f6:	f008 fff0 	bl	80128da <atol>
 80098fa:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 80098fc:	b2c1      	uxtb	r1, r0
 80098fe:	0038      	movs	r0, r7
 8009900:	f7ff ff7a 	bl	80097f8 <Unbridge>
	if (result == BOS_OK) 
 8009904:	2800      	cmp	r0, #0
 8009906:	d1e7      	bne.n	80098d8 <unbridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	002b      	movs	r3, r5
 800990c:	4013      	ands	r3, r2
 800990e:	4032      	ands	r2, r6
 8009910:	4904      	ldr	r1, [pc, #16]	; (8009924 <unbridgeCommand+0xb0>)
 8009912:	0020      	movs	r0, r4
 8009914:	f009 fc6e 	bl	80131f4 <sprintf>
 8009918:	e7e5      	b.n	80098e6 <unbridgeCommand+0x72>
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	08019974 	.word	0x08019974
 8009920:	08019a3c 	.word	0x08019a3c
 8009924:	08019a1c 	.word	0x08019a1c

08009928 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 800992c:	7804      	ldrb	r4, [r0, #0]
 800992e:	2c00      	cmp	r4, #0
 8009930:	d010      	beq.n	8009954 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009932:	2603      	movs	r6, #3
 8009934:	e004      	b.n	8009940 <StringToLowerCase+0x18>
 8009936:	702a      	strb	r2, [r5, #0]
 8009938:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 800993a:	782c      	ldrb	r4, [r5, #0]
 800993c:	2c00      	cmp	r4, #0
 800993e:	d009      	beq.n	8009954 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009940:	f008 fffa 	bl	8012938 <__locale_ctype_ptr>
 8009944:	1900      	adds	r0, r0, r4
 8009946:	7843      	ldrb	r3, [r0, #1]
 8009948:	4033      	ands	r3, r6
 800994a:	0022      	movs	r2, r4
 800994c:	2b01      	cmp	r3, #1
 800994e:	d1f2      	bne.n	8009936 <StringToLowerCase+0xe>
 8009950:	3220      	adds	r2, #32
 8009952:	e7f0      	b.n	8009936 <StringToLowerCase+0xe>
	}
}
 8009954:	bd70      	pop	{r4, r5, r6, pc}
	...

08009958 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8009958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995a:	46c6      	mov	lr, r8
 800995c:	b500      	push	{lr}
 800995e:	b088      	sub	sp, #32
 8009960:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8009962:	4bdc      	ldr	r3, [pc, #880]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009964:	781c      	ldrb	r4, [r3, #0]
 8009966:	2c05      	cmp	r4, #5
 8009968:	d100      	bne.n	800996c <ParseSnippetCondition+0x14>
 800996a:	e210      	b.n	8009d8e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 800996c:	49da      	ldr	r1, [pc, #872]	; (8009cd8 <ParseSnippetCondition+0x380>)
 800996e:	00a3      	lsls	r3, r4, #2
 8009970:	191a      	adds	r2, r3, r4
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	2000      	movs	r0, #0
 8009976:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8009978:	191a      	adds	r2, r3, r4
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	188a      	adds	r2, r1, r2
 800997e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8009980:	1918      	adds	r0, r3, r4
 8009982:	0080      	lsls	r0, r0, #2
 8009984:	3002      	adds	r0, #2
 8009986:	1840      	adds	r0, r0, r1
 8009988:	2204      	movs	r2, #4
 800998a:	2100      	movs	r1, #0
 800998c:	f009 fa38 	bl	8012e00 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8009990:	782b      	ldrb	r3, [r5, #0]
 8009992:	2b62      	cmp	r3, #98	; 0x62
 8009994:	d102      	bne.n	800999c <ParseSnippetCondition+0x44>
 8009996:	78ab      	ldrb	r3, [r5, #2]
 8009998:	2b2e      	cmp	r3, #46	; 0x2e
 800999a:	d032      	beq.n	8009a02 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 800999c:	4ecf      	ldr	r6, [pc, #828]	; (8009cdc <ParseSnippetCondition+0x384>)
 800999e:	0029      	movs	r1, r5
 80099a0:	0030      	movs	r0, r6
 80099a2:	f009 fc63 	bl	801326c <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 80099a6:	4cce      	ldr	r4, [pc, #824]	; (8009ce0 <ParseSnippetCondition+0x388>)
 80099a8:	0021      	movs	r1, r4
 80099aa:	0030      	movs	r0, r6
 80099ac:	f00a fade 	bl	8013f6c <strtok>
 80099b0:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 80099b2:	0021      	movs	r1, r4
 80099b4:	2000      	movs	r0, #0
 80099b6:	f00a fad9 	bl	8013f6c <strtok>
 80099ba:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 80099bc:	0021      	movs	r1, r4
 80099be:	2000      	movs	r0, #0
 80099c0:	f00a fad4 	bl	8013f6c <strtok>
 80099c4:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	d100      	bne.n	80099cc <ParseSnippetCondition+0x74>
 80099ca:	e1e5      	b.n	8009d98 <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 80099cc:	0028      	movs	r0, r5
 80099ce:	f7fa fded 	bl	80045ac <IsModuleParameter>
 80099d2:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80099d4:	d100      	bne.n	80099d8 <ParseSnippetCondition+0x80>
 80099d6:	e18f      	b.n	8009cf8 <ParseSnippetCondition+0x3a0>
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d000      	beq.n	80099de <ParseSnippetCondition+0x86>
 80099dc:	e18e      	b.n	8009cfc <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 80099de:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	d000      	beq.n	80099e6 <ParseSnippetCondition+0x8e>
 80099e4:	e1d4      	b.n	8009d90 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 80099e6:	4cbb      	ldr	r4, [pc, #748]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 80099e8:	7823      	ldrb	r3, [r4, #0]
 80099ea:	49bb      	ldr	r1, [pc, #748]	; (8009cd8 <ParseSnippetCondition+0x380>)
 80099ec:	009a      	lsls	r2, r3, #2
 80099ee:	18d0      	adds	r0, r2, r3
 80099f0:	0080      	lsls	r0, r0, #2
 80099f2:	3602      	adds	r6, #2
 80099f4:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80099f6:	180a      	adds	r2, r1, r0
 80099f8:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80099fa:	3301      	adds	r3, #1
 80099fc:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 80099fe:	2000      	movs	r0, #0
 8009a00:	e1c6      	b.n	8009d90 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8009a02:	786e      	ldrb	r6, [r5, #1]
 8009a04:	3e30      	subs	r6, #48	; 0x30
 8009a06:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 8009a08:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8009a0a:	2e05      	cmp	r6, #5
 8009a0c:	d900      	bls.n	8009a10 <ParseSnippetCondition+0xb8>
 8009a0e:	e1bf      	b.n	8009d90 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8009a10:	4ab1      	ldr	r2, [pc, #708]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009a12:	00a3      	lsls	r3, r4, #2
 8009a14:	1919      	adds	r1, r3, r4
 8009a16:	0089      	lsls	r1, r1, #2
 8009a18:	3001      	adds	r0, #1
 8009a1a:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8009a1c:	1853      	adds	r3, r2, r1
 8009a1e:	2200      	movs	r2, #0
 8009a20:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8009a22:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8009a24:	1cef      	adds	r7, r5, #3
 8009a26:	3207      	adds	r2, #7
 8009a28:	49ae      	ldr	r1, [pc, #696]	; (8009ce4 <ParseSnippetCondition+0x38c>)
 8009a2a:	0038      	movs	r0, r7
 8009a2c:	f009 fc26 	bl	801327c <strncmp>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d121      	bne.n	8009a78 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8009a34:	00a3      	lsls	r3, r4, #2
 8009a36:	191c      	adds	r4, r3, r4
 8009a38:	00a4      	lsls	r4, r4, #2
 8009a3a:	4ba7      	ldr	r3, [pc, #668]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009a3c:	191c      	adds	r4, r3, r4
 8009a3e:	2305      	movs	r3, #5
 8009a40:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8009a42:	00f2      	lsls	r2, r6, #3
 8009a44:	1992      	adds	r2, r2, r6
 8009a46:	4ba8      	ldr	r3, [pc, #672]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009a48:	189b      	adds	r3, r3, r2
 8009a4a:	7a1b      	ldrb	r3, [r3, #8]
 8009a4c:	07db      	lsls	r3, r3, #31
 8009a4e:	d504      	bpl.n	8009a5a <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8009a50:	4aa0      	ldr	r2, [pc, #640]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009a52:	7813      	ldrb	r3, [r2, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	7013      	strb	r3, [r2, #0]
 8009a58:	e19a      	b.n	8009d90 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	9305      	str	r3, [sp, #20]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	9302      	str	r3, [sp, #8]
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	0030      	movs	r0, r6
 8009a70:	f7fe fed0 	bl	8008814 <SetButtonEvents>
				status = BOS_OK;
 8009a74:	2000      	movs	r0, #0
 8009a76:	e7eb      	b.n	8009a50 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8009a78:	220e      	movs	r2, #14
 8009a7a:	499c      	ldr	r1, [pc, #624]	; (8009cec <ParseSnippetCondition+0x394>)
 8009a7c:	0038      	movs	r0, r7
 8009a7e:	f009 fbfd 	bl	801327c <strncmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d11c      	bne.n	8009ac0 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8009a86:	00a3      	lsls	r3, r4, #2
 8009a88:	191c      	adds	r4, r3, r4
 8009a8a:	00a4      	lsls	r4, r4, #2
 8009a8c:	4b92      	ldr	r3, [pc, #584]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009a8e:	191c      	adds	r4, r3, r4
 8009a90:	2306      	movs	r3, #6
 8009a92:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8009a94:	00f2      	lsls	r2, r6, #3
 8009a96:	1992      	adds	r2, r2, r6
 8009a98:	4b93      	ldr	r3, [pc, #588]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	7a1b      	ldrb	r3, [r3, #8]
 8009a9e:	079b      	lsls	r3, r3, #30
 8009aa0:	d4d6      	bmi.n	8009a50 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	9303      	str	r3, [sp, #12]
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	0030      	movs	r0, r6
 8009ab8:	f7fe feac 	bl	8008814 <SetButtonEvents>
				status = BOS_OK;					
 8009abc:	2000      	movs	r0, #0
 8009abe:	e7c7      	b.n	8009a50 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8009ac0:	220c      	movs	r2, #12
 8009ac2:	498b      	ldr	r1, [pc, #556]	; (8009cf0 <ParseSnippetCondition+0x398>)
 8009ac4:	0038      	movs	r0, r7
 8009ac6:	f009 fbd9 	bl	801327c <strncmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d17a      	bne.n	8009bc4 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 8009ace:	00f2      	lsls	r2, r6, #3
 8009ad0:	1992      	adds	r2, r2, r6
 8009ad2:	4b85      	ldr	r3, [pc, #532]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	789b      	ldrb	r3, [r3, #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d030      	beq.n	8009b3e <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 8009adc:	00f2      	lsls	r2, r6, #3
 8009ade:	1992      	adds	r2, r2, r6
 8009ae0:	4b81      	ldr	r3, [pc, #516]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009ae2:	189b      	adds	r3, r3, r2
 8009ae4:	78db      	ldrb	r3, [r3, #3]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d04a      	beq.n	8009b80 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 8009aea:	00f2      	lsls	r2, r6, #3
 8009aec:	1992      	adds	r2, r2, r6
 8009aee:	4b7e      	ldr	r3, [pc, #504]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009af0:	189b      	adds	r3, r3, r2
 8009af2:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8009af4:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1aa      	bne.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8009afa:	4f77      	ldr	r7, [pc, #476]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009afc:	00a3      	lsls	r3, r4, #2
 8009afe:	191b      	adds	r3, r3, r4
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	18fb      	adds	r3, r7, r3
 8009b04:	220b      	movs	r2, #11
 8009b06:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009b08:	0028      	movs	r0, r5
 8009b0a:	300f      	adds	r0, #15
 8009b0c:	f008 fedf 	bl	80128ce <atoi>
 8009b10:	b2c0      	uxtb	r0, r0
 8009b12:	4b70      	ldr	r3, [pc, #448]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	0093      	lsls	r3, r2, #2
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	18ff      	adds	r7, r7, r3
 8009b1e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009b20:	2301      	movs	r3, #1
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	2300      	movs	r3, #0
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	9303      	str	r3, [sp, #12]
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	9001      	str	r0, [sp, #4]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2200      	movs	r2, #0
 8009b32:	2100      	movs	r1, #0
 8009b34:	0030      	movs	r0, r6
 8009b36:	f7fe fe6d 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;	
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e788      	b.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8009b3e:	4f66      	ldr	r7, [pc, #408]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009b40:	00a3      	lsls	r3, r4, #2
 8009b42:	191b      	adds	r3, r3, r4
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	2209      	movs	r2, #9
 8009b4a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009b4c:	0028      	movs	r0, r5
 8009b4e:	300f      	adds	r0, #15
 8009b50:	f008 febd 	bl	80128ce <atoi>
 8009b54:	b2c3      	uxtb	r3, r0
 8009b56:	4a5f      	ldr	r2, [pc, #380]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009b58:	7811      	ldrb	r1, [r2, #0]
 8009b5a:	008a      	lsls	r2, r1, #2
 8009b5c:	1852      	adds	r2, r2, r1
 8009b5e:	0092      	lsls	r2, r2, #2
 8009b60:	18bf      	adds	r7, r7, r2
 8009b62:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009b64:	2201      	movs	r2, #1
 8009b66:	9205      	str	r2, [sp, #20]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	9204      	str	r2, [sp, #16]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	9202      	str	r2, [sp, #8]
 8009b70:	9201      	str	r2, [sp, #4]
 8009b72:	9200      	str	r2, [sp, #0]
 8009b74:	2100      	movs	r1, #0
 8009b76:	0030      	movs	r0, r6
 8009b78:	f7fe fe4c 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e767      	b.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8009b80:	4f55      	ldr	r7, [pc, #340]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009b82:	00a3      	lsls	r3, r4, #2
 8009b84:	191b      	adds	r3, r3, r4
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	220a      	movs	r2, #10
 8009b8c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009b8e:	0028      	movs	r0, r5
 8009b90:	300f      	adds	r0, #15
 8009b92:	f008 fe9c 	bl	80128ce <atoi>
 8009b96:	b2c0      	uxtb	r0, r0
 8009b98:	4b4e      	ldr	r3, [pc, #312]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009b9a:	781a      	ldrb	r2, [r3, #0]
 8009b9c:	0093      	lsls	r3, r2, #2
 8009b9e:	189b      	adds	r3, r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	18ff      	adds	r7, r7, r3
 8009ba4:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	2300      	movs	r3, #0
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	9302      	str	r3, [sp, #8]
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	9000      	str	r0, [sp, #0]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	0030      	movs	r0, r6
 8009bbc:	f7fe fe2a 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;		
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e745      	b.n	8009a50 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8009bc4:	220d      	movs	r2, #13
 8009bc6:	494b      	ldr	r1, [pc, #300]	; (8009cf4 <ParseSnippetCondition+0x39c>)
 8009bc8:	0038      	movs	r0, r7
 8009bca:	f009 fb57 	bl	801327c <strncmp>
 8009bce:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 8009bd0:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d000      	beq.n	8009bd8 <ParseSnippetCondition+0x280>
 8009bd6:	e73b      	b.n	8009a50 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 8009bd8:	00f2      	lsls	r2, r6, #3
 8009bda:	1992      	adds	r2, r2, r6
 8009bdc:	4b42      	ldr	r3, [pc, #264]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	795b      	ldrb	r3, [r3, #5]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d031      	beq.n	8009c4a <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8009be6:	00f2      	lsls	r2, r6, #3
 8009be8:	1992      	adds	r2, r2, r6
 8009bea:	4b3f      	ldr	r3, [pc, #252]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009bec:	189b      	adds	r3, r3, r2
 8009bee:	799b      	ldrb	r3, [r3, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d04c      	beq.n	8009c8e <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8009bf4:	00f2      	lsls	r2, r6, #3
 8009bf6:	1992      	adds	r2, r2, r6
 8009bf8:	4b3b      	ldr	r3, [pc, #236]	; (8009ce8 <ParseSnippetCondition+0x390>)
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8009bfe:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d000      	beq.n	8009c06 <ParseSnippetCondition+0x2ae>
 8009c04:	e724      	b.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8009c06:	4f34      	ldr	r7, [pc, #208]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009c08:	3314      	adds	r3, #20
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	435c      	muls	r4, r3
 8009c0e:	193c      	adds	r4, r7, r4
 8009c10:	3b06      	subs	r3, #6
 8009c12:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009c14:	0028      	movs	r0, r5
 8009c16:	3010      	adds	r0, #16
 8009c18:	f008 fe59 	bl	80128ce <atoi>
 8009c1c:	b2c0      	uxtb	r0, r0
 8009c1e:	4b2d      	ldr	r3, [pc, #180]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	4642      	mov	r2, r8
 8009c24:	4353      	muls	r3, r2
 8009c26:	18ff      	adds	r7, r7, r3
 8009c28:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	9004      	str	r0, [sp, #16]
 8009c30:	2400      	movs	r4, #0
 8009c32:	9403      	str	r4, [sp, #12]
 8009c34:	9402      	str	r4, [sp, #8]
 8009c36:	9401      	str	r4, [sp, #4]
 8009c38:	9400      	str	r4, [sp, #0]
 8009c3a:	0023      	movs	r3, r4
 8009c3c:	0022      	movs	r2, r4
 8009c3e:	0021      	movs	r1, r4
 8009c40:	0030      	movs	r0, r6
 8009c42:	f7fe fde7 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;	
 8009c46:	0020      	movs	r0, r4
 8009c48:	e702      	b.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8009c4a:	4f23      	ldr	r7, [pc, #140]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009c4c:	00a3      	lsls	r3, r4, #2
 8009c4e:	191b      	adds	r3, r3, r4
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	220c      	movs	r2, #12
 8009c56:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009c58:	0028      	movs	r0, r5
 8009c5a:	3010      	adds	r0, #16
 8009c5c:	f008 fe37 	bl	80128ce <atoi>
 8009c60:	b2c0      	uxtb	r0, r0
 8009c62:	4b1c      	ldr	r3, [pc, #112]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009c64:	781a      	ldrb	r2, [r3, #0]
 8009c66:	0093      	lsls	r3, r2, #2
 8009c68:	189b      	adds	r3, r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	18ff      	adds	r7, r7, r3
 8009c6e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8009c70:	2301      	movs	r3, #1
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	2300      	movs	r3, #0
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	9002      	str	r0, [sp, #8]
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	0030      	movs	r0, r6
 8009c86:	f7fe fdc5 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	e6e0      	b.n	8009a50 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8009c8e:	4f12      	ldr	r7, [pc, #72]	; (8009cd8 <ParseSnippetCondition+0x380>)
 8009c90:	00a3      	lsls	r3, r4, #2
 8009c92:	191b      	adds	r3, r3, r4
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	220d      	movs	r2, #13
 8009c9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009c9c:	0028      	movs	r0, r5
 8009c9e:	3010      	adds	r0, #16
 8009ca0:	f008 fe15 	bl	80128ce <atoi>
 8009ca4:	b2c0      	uxtb	r0, r0
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <ParseSnippetCondition+0x37c>)
 8009ca8:	781a      	ldrb	r2, [r3, #0]
 8009caa:	0093      	lsls	r3, r2, #2
 8009cac:	189b      	adds	r3, r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	18ff      	adds	r7, r7, r3
 8009cb2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	9305      	str	r3, [sp, #20]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	9003      	str	r0, [sp, #12]
 8009cbe:	9302      	str	r3, [sp, #8]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	0030      	movs	r0, r6
 8009cca:	f7fe fda3 	bl	8008814 <SetButtonEvents>
					status = BOS_OK;		
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e6be      	b.n	8009a50 <ParseSnippetCondition+0xf8>
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	20001403 	.word	0x20001403
 8009cd8:	2000690c 	.word	0x2000690c
 8009cdc:	20001368 	.word	0x20001368
 8009ce0:	08017a44 	.word	0x08017a44
 8009ce4:	08018a7c 	.word	0x08018a7c
 8009ce8:	20000cdc 	.word	0x20000cdc
 8009cec:	08019c8c 	.word	0x08019c8c
 8009cf0:	08019c9c 	.word	0x08019c9c
 8009cf4:	08019cac 	.word	0x08019cac
			else if (secondPart != NULL && thirdPart != NULL) 
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	d04f      	beq.n	8009d9c <ParseSnippetCondition+0x444>
 8009cfc:	2c00      	cmp	r4, #0
 8009cfe:	d04f      	beq.n	8009da0 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8009d00:	0020      	movs	r0, r4
 8009d02:	f7fa fc53 	bl	80045ac <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d024      	beq.n	8009d54 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8009d0a:	4b27      	ldr	r3, [pc, #156]	; (8009da8 <ParseSnippetCondition+0x450>)
 8009d0c:	781c      	ldrb	r4, [r3, #0]
 8009d0e:	4a27      	ldr	r2, [pc, #156]	; (8009dac <ParseSnippetCondition+0x454>)
 8009d10:	00a3      	lsls	r3, r4, #2
 8009d12:	1919      	adds	r1, r3, r4
 8009d14:	0089      	lsls	r1, r1, #2
 8009d16:	2704      	movs	r7, #4
 8009d18:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009d1a:	1919      	adds	r1, r3, r4
 8009d1c:	0089      	lsls	r1, r1, #2
 8009d1e:	1851      	adds	r1, r2, r1
 8009d20:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8009d22:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8009d24:	4d20      	ldr	r5, [pc, #128]	; (8009da8 <ParseSnippetCondition+0x450>)
 8009d26:	782c      	ldrb	r4, [r5, #0]
 8009d28:	0030      	movs	r0, r6
 8009d2a:	f7fa fc4b 	bl	80045c4 <IsMathOperator>
 8009d2e:	491f      	ldr	r1, [pc, #124]	; (8009dac <ParseSnippetCondition+0x454>)
 8009d30:	00a3      	lsls	r3, r4, #2
 8009d32:	191b      	adds	r3, r3, r4
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	18cb      	adds	r3, r1, r3
 8009d38:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8009d3a:	782a      	ldrb	r2, [r5, #0]
 8009d3c:	0093      	lsls	r3, r2, #2
 8009d3e:	189b      	adds	r3, r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	18cb      	adds	r3, r1, r3
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d02c      	beq.n	8009da4 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <ParseSnippetCondition+0x450>)
 8009d4e:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8009d50:	2000      	movs	r0, #0
 8009d52:	e01d      	b.n	8009d90 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8009d54:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <ParseSnippetCondition+0x450>)
 8009d56:	4698      	mov	r8, r3
 8009d58:	781a      	ldrb	r2, [r3, #0]
 8009d5a:	4f14      	ldr	r7, [pc, #80]	; (8009dac <ParseSnippetCondition+0x454>)
 8009d5c:	0093      	lsls	r3, r2, #2
 8009d5e:	1899      	adds	r1, r3, r2
 8009d60:	0089      	lsls	r1, r1, #2
 8009d62:	2003      	movs	r0, #3
 8009d64:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009d66:	187b      	adds	r3, r7, r1
 8009d68:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8009d6a:	0020      	movs	r0, r4
 8009d6c:	f008 fdaa 	bl	80128c4 <atof>
 8009d70:	f7f9 f860 	bl	8002e34 <__aeabi_d2f>
 8009d74:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8009d76:	4643      	mov	r3, r8
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	0098      	lsls	r0, r3, #2
 8009d7c:	18c0      	adds	r0, r0, r3
 8009d7e:	0080      	lsls	r0, r0, #2
 8009d80:	3006      	adds	r0, #6
 8009d82:	19c0      	adds	r0, r0, r7
 8009d84:	2204      	movs	r2, #4
 8009d86:	a907      	add	r1, sp, #28
 8009d88:	f009 f831 	bl	8012dee <memcpy>
 8009d8c:	e7ca      	b.n	8009d24 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8009d8e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8009d90:	b008      	add	sp, #32
 8009d92:	bc04      	pop	{r2}
 8009d94:	4690      	mov	r8, r2
 8009d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8009d98:	2067      	movs	r0, #103	; 0x67
 8009d9a:	e7f9      	b.n	8009d90 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8009d9c:	2067      	movs	r0, #103	; 0x67
 8009d9e:	e7f7      	b.n	8009d90 <ParseSnippetCondition+0x438>
 8009da0:	2067      	movs	r0, #103	; 0x67
 8009da2:	e7f5      	b.n	8009d90 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8009da4:	2067      	movs	r0, #103	; 0x67
 8009da6:	e7f3      	b.n	8009d90 <ParseSnippetCondition+0x438>
 8009da8:	20001403 	.word	0x20001403
 8009dac:	2000690c 	.word	0x2000690c

08009db0 <AddSnippet>:
{
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	000c      	movs	r4, r1
	switch (code)
 8009db4:	2802      	cmp	r0, #2
 8009db6:	d017      	beq.n	8009de8 <AddSnippet+0x38>
 8009db8:	2803      	cmp	r0, #3
 8009dba:	d003      	beq.n	8009dc4 <AddSnippet+0x14>
 8009dbc:	2801      	cmp	r0, #1
 8009dbe:	d00f      	beq.n	8009de0 <AddSnippet+0x30>
	return BOS_OK;
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	e00c      	b.n	8009dde <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8009dc4:	4b35      	ldr	r3, [pc, #212]	; (8009e9c <AddSnippet+0xec>)
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	3a01      	subs	r2, #1
 8009dca:	0093      	lsls	r3, r2, #2
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4a33      	ldr	r2, [pc, #204]	; (8009ea0 <AddSnippet+0xf0>)
 8009dd2:	18d3      	adds	r3, r2, r3
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8009dd8:	f7f9 fd4e 	bl	8003878 <SaveToRO>
	return BOS_OK;
 8009ddc:	2000      	movs	r0, #0
}
 8009dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8009de0:	0008      	movs	r0, r1
 8009de2:	f7ff fdb9 	bl	8009958 <ParseSnippetCondition>
 8009de6:	e7fa      	b.n	8009dde <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8009de8:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <AddSnippet+0xec>)
 8009dea:	781d      	ldrb	r5, [r3, #0]
 8009dec:	3d01      	subs	r5, #1
 8009dee:	00ab      	lsls	r3, r5, #2
 8009df0:	195b      	adds	r3, r3, r5
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4a2a      	ldr	r2, [pc, #168]	; (8009ea0 <AddSnippet+0xf0>)
 8009df6:	18d3      	adds	r3, r2, r3
 8009df8:	68de      	ldr	r6, [r3, #12]
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d03d      	beq.n	8009e7a <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8009dfe:	0030      	movs	r0, r6
 8009e00:	f7f6 f98a 	bl	8000118 <strlen>
 8009e04:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8009e06:	0020      	movs	r0, r4
 8009e08:	f7f6 f986 	bl	8000118 <strlen>
 8009e0c:	1839      	adds	r1, r7, r0
 8009e0e:	3102      	adds	r1, #2
 8009e10:	0030      	movs	r0, r6
 8009e12:	f009 f827 	bl	8012e64 <realloc>
 8009e16:	4e22      	ldr	r6, [pc, #136]	; (8009ea0 <AddSnippet+0xf0>)
 8009e18:	00ab      	lsls	r3, r5, #2
 8009e1a:	195d      	adds	r5, r3, r5
 8009e1c:	00ad      	lsls	r5, r5, #2
 8009e1e:	1975      	adds	r5, r6, r5
 8009e20:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8009e22:	4d1e      	ldr	r5, [pc, #120]	; (8009e9c <AddSnippet+0xec>)
 8009e24:	782a      	ldrb	r2, [r5, #0]
 8009e26:	3a01      	subs	r2, #1
 8009e28:	0093      	lsls	r3, r2, #2
 8009e2a:	189b      	adds	r3, r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	18f3      	adds	r3, r6, r3
 8009e30:	1c7a      	adds	r2, r7, #1
 8009e32:	68d8      	ldr	r0, [r3, #12]
 8009e34:	1880      	adds	r0, r0, r2
 8009e36:	0021      	movs	r1, r4
 8009e38:	f009 fa18 	bl	801326c <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8009e3c:	782a      	ldrb	r2, [r5, #0]
 8009e3e:	3a01      	subs	r2, #1
 8009e40:	0093      	lsls	r3, r2, #2
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	18f6      	adds	r6, r6, r3
 8009e48:	68f3      	ldr	r3, [r6, #12]
 8009e4a:	2213      	movs	r2, #19
 8009e4c:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <AddSnippet+0xec>)
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	3a01      	subs	r2, #1
 8009e54:	0093      	lsls	r3, r2, #2
 8009e56:	189b      	adds	r3, r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4911      	ldr	r1, [pc, #68]	; (8009ea0 <AddSnippet+0xf0>)
 8009e5c:	18cb      	adds	r3, r1, r3
 8009e5e:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8009e60:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1bb      	bne.n	8009dde <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8009e66:	0090      	lsls	r0, r2, #2
 8009e68:	1880      	adds	r0, r0, r2
 8009e6a:	0080      	lsls	r0, r0, #2
 8009e6c:	1840      	adds	r0, r0, r1
 8009e6e:	2214      	movs	r2, #20
 8009e70:	2100      	movs	r1, #0
 8009e72:	f008 ffc5 	bl	8012e00 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8009e76:	200e      	movs	r0, #14
 8009e78:	e7b1      	b.n	8009dde <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8009e7a:	0008      	movs	r0, r1
 8009e7c:	f7f6 f94c 	bl	8000118 <strlen>
 8009e80:	3001      	adds	r0, #1
 8009e82:	f008 fd67 	bl	8012954 <malloc>
 8009e86:	00ab      	lsls	r3, r5, #2
 8009e88:	195d      	adds	r5, r3, r5
 8009e8a:	00ad      	lsls	r5, r5, #2
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <AddSnippet+0xf0>)
 8009e8e:	195d      	adds	r5, r3, r5
 8009e90:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8009e92:	0021      	movs	r1, r4
 8009e94:	f009 f9ea 	bl	801326c <strcpy>
 8009e98:	e7d9      	b.n	8009e4e <AddSnippet+0x9e>
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	20001403 	.word	0x20001403
 8009ea0:	2000690c 	.word	0x2000690c

08009ea4 <CLI_CommandParser>:
{
 8009ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ea6:	46de      	mov	lr, fp
 8009ea8:	4657      	mov	r7, sl
 8009eaa:	464e      	mov	r6, r9
 8009eac:	4645      	mov	r5, r8
 8009eae:	b5e0      	push	{r5, r6, r7, lr}
 8009eb0:	b08b      	sub	sp, #44	; 0x2c
 8009eb2:	9004      	str	r0, [sp, #16]
 8009eb4:	4688      	mov	r8, r1
 8009eb6:	9203      	str	r2, [sp, #12]
 8009eb8:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8009eba:	2209      	movs	r2, #9
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	a807      	add	r0, sp, #28
 8009ec0:	f008 ff9e 	bl	8012e00 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8009ec4:	4fd5      	ldr	r7, [pc, #852]	; (800a21c <CLI_CommandParser+0x378>)
				if (id == myID) {
 8009ec6:	002e      	movs	r6, r5
 8009ec8:	e034      	b.n	8009f34 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8009eca:	2252      	movs	r2, #82	; 0x52
 8009ecc:	49d4      	ldr	r1, [pc, #848]	; (800a220 <CLI_CommandParser+0x37c>)
 8009ece:	0020      	movs	r0, r4
 8009ed0:	f008 ff8d 	bl	8012dee <memcpy>
				recordSnippet = 0;
 8009ed4:	4bd1      	ldr	r3, [pc, #836]	; (800a21c <CLI_CommandParser+0x378>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	e044      	b.n	8009f66 <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8009edc:	2206      	movs	r2, #6
 8009ede:	49d1      	ldr	r1, [pc, #836]	; (800a224 <CLI_CommandParser+0x380>)
 8009ee0:	9803      	ldr	r0, [sp, #12]
 8009ee2:	f009 f9cb 	bl	801327c <strncmp>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d053      	beq.n	8009f92 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8009eea:	2d02      	cmp	r5, #2
 8009eec:	d05e      	beq.n	8009fac <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8009eee:	212e      	movs	r1, #46	; 0x2e
 8009ef0:	9803      	ldr	r0, [sp, #12]
 8009ef2:	f009 f9ad 	bl	8013250 <strchr>
 8009ef6:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8009ef8:	d006      	beq.n	8009f08 <CLI_CommandParser+0x64>
 8009efa:	3803      	subs	r0, #3
 8009efc:	2203      	movs	r2, #3
 8009efe:	49ca      	ldr	r1, [pc, #808]	; (800a228 <CLI_CommandParser+0x384>)
 8009f00:	f009 f9bc 	bl	801327c <strncmp>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d160      	bne.n	8009fca <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8009f08:	2299      	movs	r2, #153	; 0x99
 8009f0a:	0092      	lsls	r2, r2, #2
 8009f0c:	0021      	movs	r1, r4
 8009f0e:	9803      	ldr	r0, [sp, #12]
 8009f10:	f003 fba8 	bl	800d664 <FreeRTOS_CLIProcessCommand>
 8009f14:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8009f16:	7823      	ldrb	r3, [r4, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d000      	beq.n	8009f1e <CLI_CommandParser+0x7a>
 8009f1c:	e16f      	b.n	800a1fe <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009f1e:	0020      	movs	r0, r4
 8009f20:	f7f6 f8fa 	bl	8000118 <strlen>
 8009f24:	0002      	movs	r2, r0
 8009f26:	2100      	movs	r1, #0
 8009f28:	0020      	movs	r0, r4
 8009f2a:	f008 ff69 	bl	8012e00 <memset>
	} while( xReturned != pdFALSE );
 8009f2e:	2e00      	cmp	r6, #0
 8009f30:	d100      	bne.n	8009f34 <CLI_CommandParser+0x90>
 8009f32:	e1ab      	b.n	800a28c <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8009f34:	9803      	ldr	r0, [sp, #12]
 8009f36:	f7ff fcf7 	bl	8009928 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8009f3a:	783d      	ldrb	r5, [r7, #0]
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	d1cd      	bne.n	8009edc <CLI_CommandParser+0x38>
 8009f40:	2203      	movs	r2, #3
 8009f42:	49ba      	ldr	r1, [pc, #744]	; (800a22c <CLI_CommandParser+0x388>)
 8009f44:	9803      	ldr	r0, [sp, #12]
 8009f46:	f009 f999 	bl	801327c <strncmp>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d1cf      	bne.n	8009eee <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	1cd9      	adds	r1, r3, #3
 8009f52:	3001      	adds	r0, #1
 8009f54:	f7ff ff2c 	bl	8009db0 <AddSnippet>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d1b6      	bne.n	8009eca <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8009f5c:	4baf      	ldr	r3, [pc, #700]	; (800a21c <CLI_CommandParser+0x378>)
 8009f5e:	2202      	movs	r2, #2
 8009f60:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8009f62:	230d      	movs	r3, #13
 8009f64:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8009f66:	7823      	ldrb	r3, [r4, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d100      	bne.n	8009f6e <CLI_CommandParser+0xca>
 8009f6c:	e186      	b.n	800a27c <CLI_CommandParser+0x3d8>
 8009f6e:	4643      	mov	r3, r8
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d100      	bne.n	8009f76 <CLI_CommandParser+0xd2>
 8009f74:	e19d      	b.n	800a2b2 <CLI_CommandParser+0x40e>
 8009f76:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8009f78:	0020      	movs	r0, r4
 8009f7a:	f7f6 f8cd 	bl	8000118 <strlen>
 8009f7e:	b282      	uxth	r2, r0
 8009f80:	2301      	movs	r3, #1
 8009f82:	425b      	negs	r3, r3
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	3333      	adds	r3, #51	; 0x33
 8009f88:	0021      	movs	r1, r4
 8009f8a:	9804      	ldr	r0, [sp, #16]
 8009f8c:	f003 f9de 	bl	800d34c <writePxMutex>
 8009f90:	e7c5      	b.n	8009f1e <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 8009f92:	4ba2      	ldr	r3, [pc, #648]	; (800a21c <CLI_CommandParser+0x378>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8009f98:	49a5      	ldr	r1, [pc, #660]	; (800a230 <CLI_CommandParser+0x38c>)
 8009f9a:	3003      	adds	r0, #3
 8009f9c:	f7ff ff08 	bl	8009db0 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8009fa0:	2241      	movs	r2, #65	; 0x41
 8009fa2:	49a4      	ldr	r1, [pc, #656]	; (800a234 <CLI_CommandParser+0x390>)
 8009fa4:	0020      	movs	r0, r4
 8009fa6:	f008 ff22 	bl	8012dee <memcpy>
			xReturned = pdFALSE;
 8009faa:	e7dc      	b.n	8009f66 <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8009fac:	9903      	ldr	r1, [sp, #12]
 8009fae:	2002      	movs	r0, #2
 8009fb0:	f7ff fefe 	bl	8009db0 <AddSnippet>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d102      	bne.n	8009fbe <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 8009fb8:	230d      	movs	r3, #13
 8009fba:	7023      	strb	r3, [r4, #0]
 8009fbc:	e7d3      	b.n	8009f66 <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8009fbe:	2252      	movs	r2, #82	; 0x52
 8009fc0:	4997      	ldr	r1, [pc, #604]	; (800a220 <CLI_CommandParser+0x37c>)
 8009fc2:	0020      	movs	r0, r4
 8009fc4:	f008 ff13 	bl	8012dee <memcpy>
 8009fc8:	e7cd      	b.n	8009f66 <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8009fca:	f008 fcb5 	bl	8012938 <__locale_ctype_ptr>
 8009fce:	786b      	ldrb	r3, [r5, #1]
 8009fd0:	18c0      	adds	r0, r0, r3
 8009fd2:	7843      	ldrb	r3, [r0, #1]
 8009fd4:	075b      	lsls	r3, r3, #29
 8009fd6:	d497      	bmi.n	8009f08 <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8009fd8:	9903      	ldr	r1, [sp, #12]
 8009fda:	1a6a      	subs	r2, r5, r1
 8009fdc:	a807      	add	r0, sp, #28
 8009fde:	f009 f95e 	bl	801329e <strncpy>
				id = GetID(idString);
 8009fe2:	a807      	add	r0, sp, #28
 8009fe4:	f7fc f948 	bl	8006278 <GetID>
 8009fe8:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8009fea:	4a93      	ldr	r2, [pc, #588]	; (800a238 <CLI_CommandParser+0x394>)
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	4693      	mov	fp, r2
 8009ff0:	4290      	cmp	r0, r2
 8009ff2:	d03d      	beq.n	800a070 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8009ff4:	2864      	cmp	r0, #100	; 0x64
 8009ff6:	d043      	beq.n	800a080 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 8009ff8:	2866      	cmp	r0, #102	; 0x66
 8009ffa:	d047      	beq.n	800a08c <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8009ffc:	28ff      	cmp	r0, #255	; 0xff
 8009ffe:	d04b      	beq.n	800a098 <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 800a000:	466b      	mov	r3, sp
 800a002:	7d1b      	ldrb	r3, [r3, #20]
 800a004:	469a      	mov	sl, r3
 800a006:	2bfe      	cmp	r3, #254	; 0xfe
 800a008:	d078      	beq.n	800a0fc <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800a00a:	3501      	adds	r5, #1
 800a00c:	2206      	movs	r2, #6
 800a00e:	498b      	ldr	r1, [pc, #556]	; (800a23c <CLI_CommandParser+0x398>)
 800a010:	0028      	movs	r0, r5
 800a012:	f009 f933 	bl	801327c <strncmp>
 800a016:	2800      	cmp	r0, #0
 800a018:	d000      	beq.n	800a01c <CLI_CommandParser+0x178>
 800a01a:	e0b4      	b.n	800a186 <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 800a01c:	4b88      	ldr	r3, [pc, #544]	; (800a240 <CLI_CommandParser+0x39c>)
 800a01e:	2200      	movs	r2, #0
 800a020:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 800a022:	2119      	movs	r1, #25
 800a024:	4650      	mov	r0, sl
 800a026:	f7fb fdf5 	bl	8005c14 <SendMessageToModule>
						osDelay(100);
 800a02a:	2064      	movs	r0, #100	; 0x64
 800a02c:	f003 fa83 	bl	800d536 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 800a030:	4b84      	ldr	r3, [pc, #528]	; (800a244 <CLI_CommandParser+0x3a0>)
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	4b80      	ldr	r3, [pc, #512]	; (800a238 <CLI_CommandParser+0x394>)
 800a036:	7818      	ldrb	r0, [r3, #0]
 800a038:	2300      	movs	r3, #0
 800a03a:	4651      	mov	r1, sl
 800a03c:	f7fc fd4c 	bl	8006ad8 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 800a040:	4b7f      	ldr	r3, [pc, #508]	; (800a240 <CLI_CommandParser+0x39c>)
 800a042:	799b      	ldrb	r3, [r3, #6]
 800a044:	2b60      	cmp	r3, #96	; 0x60
 800a046:	d18e      	bne.n	8009f66 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 800a048:	21fa      	movs	r1, #250	; 0xfa
 800a04a:	0089      	lsls	r1, r1, #2
 800a04c:	2001      	movs	r0, #1
 800a04e:	f004 fe45 	bl	800ecdc <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 800a052:	4b7d      	ldr	r3, [pc, #500]	; (800a248 <CLI_CommandParser+0x3a4>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d085      	beq.n	8009f66 <CLI_CommandParser+0xc2>
									++timedoutMsg;
 800a05a:	4a7c      	ldr	r2, [pc, #496]	; (800a24c <CLI_CommandParser+0x3a8>)
 800a05c:	8813      	ldrh	r3, [r2, #0]
 800a05e:	3301      	adds	r3, #1
 800a060:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 800a062:	9b05      	ldr	r3, [sp, #20]
 800a064:	0022      	movs	r2, r4
 800a066:	497a      	ldr	r1, [pc, #488]	; (800a250 <CLI_CommandParser+0x3ac>)
 800a068:	0020      	movs	r0, r4
 800a06a:	f009 f8c3 	bl	80131f4 <sprintf>
 800a06e:	e77a      	b.n	8009f66 <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800a070:	2299      	movs	r2, #153	; 0x99
 800a072:	1c68      	adds	r0, r5, #1
 800a074:	0092      	lsls	r2, r2, #2
 800a076:	0021      	movs	r1, r4
 800a078:	f003 faf4 	bl	800d664 <FreeRTOS_CLIProcessCommand>
 800a07c:	0006      	movs	r6, r0
 800a07e:	e74a      	b.n	8009f16 <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 800a080:	2227      	movs	r2, #39	; 0x27
 800a082:	4974      	ldr	r1, [pc, #464]	; (800a254 <CLI_CommandParser+0x3b0>)
 800a084:	0020      	movs	r0, r4
 800a086:	f008 feb2 	bl	8012dee <memcpy>
 800a08a:	e76c      	b.n	8009f66 <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800a08c:	2225      	movs	r2, #37	; 0x25
 800a08e:	4972      	ldr	r1, [pc, #456]	; (800a258 <CLI_CommandParser+0x3b4>)
 800a090:	0020      	movs	r0, r4
 800a092:	f008 feac 	bl	8012dee <memcpy>
 800a096:	e766      	b.n	8009f66 <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800a098:	2219      	movs	r2, #25
 800a09a:	2100      	movs	r1, #0
 800a09c:	486f      	ldr	r0, [pc, #444]	; (800a25c <CLI_CommandParser+0x3b8>)
 800a09e:	f008 feaf 	bl	8012e00 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800a0a2:	3501      	adds	r5, #1
 800a0a4:	9803      	ldr	r0, [sp, #12]
 800a0a6:	f7f6 f837 	bl	8000118 <strlen>
 800a0aa:	0006      	movs	r6, r0
 800a0ac:	ab07      	add	r3, sp, #28
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7f6 f832 	bl	8000118 <strlen>
 800a0b4:	1e72      	subs	r2, r6, #1
 800a0b6:	1a12      	subs	r2, r2, r0
 800a0b8:	0029      	movs	r1, r5
 800a0ba:	4869      	ldr	r0, [pc, #420]	; (800a260 <CLI_CommandParser+0x3bc>)
 800a0bc:	f009 f8ef 	bl	801329e <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800a0c0:	9803      	ldr	r0, [sp, #12]
 800a0c2:	f7f6 f829 	bl	8000118 <strlen>
 800a0c6:	0006      	movs	r6, r0
 800a0c8:	a807      	add	r0, sp, #28
 800a0ca:	f7f6 f825 	bl	8000118 <strlen>
 800a0ce:	1a33      	subs	r3, r6, r0
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2217      	movs	r2, #23
 800a0d4:	21ff      	movs	r1, #255	; 0xff
 800a0d6:	4658      	mov	r0, fp
 800a0d8:	f7fb f91a 	bl	8005310 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a0dc:	2299      	movs	r2, #153	; 0x99
 800a0de:	0092      	lsls	r2, r2, #2
 800a0e0:	0021      	movs	r1, r4
 800a0e2:	0028      	movs	r0, r5
 800a0e4:	f003 fabe 	bl	800d664 <FreeRTOS_CLIProcessCommand>
 800a0e8:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 800a0ea:	0020      	movs	r0, r4
 800a0ec:	f7f6 f814 	bl	8000118 <strlen>
 800a0f0:	1820      	adds	r0, r4, r0
 800a0f2:	221d      	movs	r2, #29
 800a0f4:	495b      	ldr	r1, [pc, #364]	; (800a264 <CLI_CommandParser+0x3c0>)
 800a0f6:	f008 fe7a 	bl	8012dee <memcpy>
 800a0fa:	e70c      	b.n	8009f16 <CLI_CommandParser+0x72>
					group = id >> 8;
 800a0fc:	9b05      	ldr	r3, [sp, #20]
 800a0fe:	121b      	asrs	r3, r3, #8
 800a100:	b2db      	uxtb	r3, r3
 800a102:	469a      	mov	sl, r3
 800a104:	4b58      	ldr	r3, [pc, #352]	; (800a268 <CLI_CommandParser+0x3c4>)
 800a106:	4699      	mov	r9, r3
 800a108:	4652      	mov	r2, sl
 800a10a:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800a10c:	2219      	movs	r2, #25
 800a10e:	2100      	movs	r1, #0
 800a110:	4852      	ldr	r0, [pc, #328]	; (800a25c <CLI_CommandParser+0x3b8>)
 800a112:	f008 fe75 	bl	8012e00 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800a116:	1c6b      	adds	r3, r5, #1
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	9803      	ldr	r0, [sp, #12]
 800a11c:	f7f5 fffc 	bl	8000118 <strlen>
 800a120:	0005      	movs	r5, r0
 800a122:	aa07      	add	r2, sp, #28
 800a124:	0010      	movs	r0, r2
 800a126:	f7f5 fff7 	bl	8000118 <strlen>
 800a12a:	3d01      	subs	r5, #1
 800a12c:	1a2a      	subs	r2, r5, r0
 800a12e:	9905      	ldr	r1, [sp, #20]
 800a130:	484b      	ldr	r0, [pc, #300]	; (800a260 <CLI_CommandParser+0x3bc>)
 800a132:	f009 f8b4 	bl	801329e <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800a136:	9803      	ldr	r0, [sp, #12]
 800a138:	f7f5 ffee 	bl	8000118 <strlen>
 800a13c:	0005      	movs	r5, r0
 800a13e:	a807      	add	r0, sp, #28
 800a140:	f7f5 ffea 	bl	8000118 <strlen>
 800a144:	1a2b      	subs	r3, r5, r0
 800a146:	b29b      	uxth	r3, r3
 800a148:	2217      	movs	r2, #23
 800a14a:	4651      	mov	r1, sl
 800a14c:	4658      	mov	r0, fp
 800a14e:	f7fb f8df 	bl	8005310 <BroadcastMessage>
					if (InGroup(myID, group))
 800a152:	4b39      	ldr	r3, [pc, #228]	; (800a238 <CLI_CommandParser+0x394>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	3b01      	subs	r3, #1
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4a44      	ldr	r2, [pc, #272]	; (800a26c <CLI_CommandParser+0x3c8>)
 800a15c:	5a9b      	ldrh	r3, [r3, r2]
 800a15e:	464a      	mov	r2, r9
 800a160:	7812      	ldrb	r2, [r2, #0]
 800a162:	4113      	asrs	r3, r2
 800a164:	07db      	lsls	r3, r3, #31
 800a166:	d406      	bmi.n	800a176 <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 800a168:	ab07      	add	r3, sp, #28
 800a16a:	0022      	movs	r2, r4
 800a16c:	4940      	ldr	r1, [pc, #256]	; (800a270 <CLI_CommandParser+0x3cc>)
 800a16e:	0020      	movs	r0, r4
 800a170:	f009 f840 	bl	80131f4 <sprintf>
 800a174:	e6cf      	b.n	8009f16 <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a176:	2299      	movs	r2, #153	; 0x99
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	0021      	movs	r1, r4
 800a17c:	9805      	ldr	r0, [sp, #20]
 800a17e:	f003 fa71 	bl	800d664 <FreeRTOS_CLIProcessCommand>
 800a182:	0006      	movs	r6, r0
 800a184:	e7f0      	b.n	800a168 <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 800a186:	9803      	ldr	r0, [sp, #12]
 800a188:	f7f5 ffc6 	bl	8000118 <strlen>
 800a18c:	0006      	movs	r6, r0
 800a18e:	ab07      	add	r3, sp, #28
 800a190:	0018      	movs	r0, r3
 800a192:	f7f5 ffc1 	bl	8000118 <strlen>
 800a196:	1e72      	subs	r2, r6, #1
 800a198:	1a12      	subs	r2, r2, r0
 800a19a:	0029      	movs	r1, r5
 800a19c:	4830      	ldr	r0, [pc, #192]	; (800a260 <CLI_CommandParser+0x3bc>)
 800a19e:	f009 f87e 	bl	801329e <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800a1a2:	9803      	ldr	r0, [sp, #12]
 800a1a4:	f7f5 ffb8 	bl	8000118 <strlen>
 800a1a8:	0005      	movs	r5, r0
 800a1aa:	a807      	add	r0, sp, #28
 800a1ac:	f7f5 ffb4 	bl	8000118 <strlen>
 800a1b0:	3d01      	subs	r5, #1
 800a1b2:	1a2a      	subs	r2, r5, r0
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	2117      	movs	r1, #23
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f7fb fd2b 	bl	8005c14 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 800a1be:	9a05      	ldr	r2, [sp, #20]
 800a1c0:	492c      	ldr	r1, [pc, #176]	; (800a274 <CLI_CommandParser+0x3d0>)
 800a1c2:	0020      	movs	r0, r4
 800a1c4:	f009 f816 	bl	80131f4 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 800a1c8:	7823      	ldrb	r3, [r4, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <CLI_CommandParser+0x330>
 800a1ce:	4643      	mov	r3, r8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d108      	bne.n	800a1e6 <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a1d4:	0020      	movs	r0, r4
 800a1d6:	f7f5 ff9f 	bl	8000118 <strlen>
 800a1da:	0002      	movs	r2, r0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	0020      	movs	r0, r4
 800a1e0:	f008 fe0e 	bl	8012e00 <memset>
 800a1e4:	e72c      	b.n	800a040 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800a1e6:	0020      	movs	r0, r4
 800a1e8:	f7f5 ff96 	bl	8000118 <strlen>
 800a1ec:	b282      	uxth	r2, r0
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	3331      	adds	r3, #49	; 0x31
 800a1f4:	0021      	movs	r1, r4
 800a1f6:	9804      	ldr	r0, [sp, #16]
 800a1f8:	f003 f8a8 	bl	800d34c <writePxMutex>
 800a1fc:	e7ea      	b.n	800a1d4 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800a1fe:	4643      	mov	r3, r8
 800a200:	2b00      	cmp	r3, #0
 800a202:	d100      	bne.n	800a206 <CLI_CommandParser+0x362>
 800a204:	e68b      	b.n	8009f1e <CLI_CommandParser+0x7a>
 800a206:	e6b7      	b.n	8009f78 <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800a208:	2301      	movs	r3, #1
 800a20a:	425b      	negs	r3, r3
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	3333      	adds	r3, #51	; 0x33
 800a210:	2238      	movs	r2, #56	; 0x38
 800a212:	4919      	ldr	r1, [pc, #100]	; (800a278 <CLI_CommandParser+0x3d4>)
 800a214:	9804      	ldr	r0, [sp, #16]
 800a216:	f003 f899 	bl	800d34c <writePxMutex>
}
 800a21a:	e043      	b.n	800a2a4 <CLI_CommandParser+0x400>
 800a21c:	20001430 	.word	0x20001430
 800a220:	08019acc 	.word	0x08019acc
 800a224:	08019b20 	.word	0x08019b20
 800a228:	08019b6c 	.word	0x08019b6c
 800a22c:	08019ac8 	.word	0x08019ac8
 800a230:	08017bac 	.word	0x08017bac
 800a234:	08019b28 	.word	0x08019b28
 800a238:	200011c8 	.word	0x200011c8
 800a23c:	08019414 	.word	0x08019414
 800a240:	20006894 	.word	0x20006894
 800a244:	20000a2f 	.word	0x20000a2f
 800a248:	200012c0 	.word	0x200012c0
 800a24c:	20001622 	.word	0x20001622
 800a250:	08019c30 	.word	0x08019c30
 800a254:	08019b70 	.word	0x08019b70
 800a258:	08019b98 	.word	0x08019b98
 800a25c:	20000cc0 	.word	0x20000cc0
 800a260:	20001094 	.word	0x20001094
 800a264:	08019bc0 	.word	0x08019bc0
 800a268:	20001402 	.word	0x20001402
 800a26c:	20000f08 	.word	0x20000f08
 800a270:	08019be0 	.word	0x08019be0
 800a274:	08019c0c 	.word	0x08019c0c
 800a278:	08019c50 	.word	0x08019c50
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a27c:	0020      	movs	r0, r4
 800a27e:	f7f5 ff4b 	bl	8000118 <strlen>
 800a282:	0002      	movs	r2, r0
 800a284:	2100      	movs	r1, #0
 800a286:	0020      	movs	r0, r4
 800a288:	f008 fdba 	bl	8012e00 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 800a28c:	2209      	movs	r2, #9
 800a28e:	2100      	movs	r1, #0
 800a290:	a807      	add	r0, sp, #28
 800a292:	f008 fdb5 	bl	8012e00 <memset>
	if(!recordSnippet && enableOutput)
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <CLI_CommandParser+0x420>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <CLI_CommandParser+0x400>
 800a29e:	4643      	mov	r3, r8
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1b1      	bne.n	800a208 <CLI_CommandParser+0x364>
}
 800a2a4:	b00b      	add	sp, #44	; 0x2c
 800a2a6:	bc3c      	pop	{r2, r3, r4, r5}
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	4699      	mov	r9, r3
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	46ab      	mov	fp, r5
 800a2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a2b2:	0020      	movs	r0, r4
 800a2b4:	f7f5 ff30 	bl	8000118 <strlen>
 800a2b8:	0002      	movs	r2, r0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	0020      	movs	r0, r4
 800a2be:	f008 fd9f 	bl	8012e00 <memset>
 800a2c2:	e7e3      	b.n	800a28c <CLI_CommandParser+0x3e8>
 800a2c4:	20001430 	.word	0x20001430

0800a2c8 <prvCLITask>:
{
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	46de      	mov	lr, fp
 800a2cc:	4657      	mov	r7, sl
 800a2ce:	464e      	mov	r6, r9
 800a2d0:	b5c0      	push	{r6, r7, lr}
 800a2d2:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	4249      	negs	r1, r1
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f004 fcff 	bl	800ecdc <ulTaskNotifyTake>
	cRxedChar = '\0';
 800a2de:	230f      	movs	r3, #15
 800a2e0:	aa02      	add	r2, sp, #8
 800a2e2:	4694      	mov	ip, r2
 800a2e4:	4463      	add	r3, ip
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a2ea:	f003 fa39 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 800a2ee:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 800a2f0:	23e1      	movs	r3, #225	; 0xe1
 800a2f2:	031b      	lsls	r3, r3, #12
 800a2f4:	4a5f      	ldr	r2, [pc, #380]	; (800a474 <prvCLITask+0x1ac>)
 800a2f6:	6892      	ldr	r2, [r2, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d00f      	beq.n	800a31c <prvCLITask+0x54>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a2fc:	2401      	movs	r4, #1
			if (port != PcPort)
 800a2fe:	4e5e      	ldr	r6, [pc, #376]	; (800a478 <prvCLITask+0x1b0>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a300:	001d      	movs	r5, r3
 800a302:	e003      	b.n	800a30c <prvCLITask+0x44>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a304:	3401      	adds	r4, #1
 800a306:	b2e4      	uxtb	r4, r4
 800a308:	2c06      	cmp	r4, #6
 800a30a:	d007      	beq.n	800a31c <prvCLITask+0x54>
			if (port != PcPort)
 800a30c:	7833      	ldrb	r3, [r6, #0]
 800a30e:	42a3      	cmp	r3, r4
 800a310:	d0f8      	beq.n	800a304 <prvCLITask+0x3c>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a312:	0029      	movs	r1, r5
 800a314:	0020      	movs	r0, r4
 800a316:	f003 f887 	bl	800d428 <UpdateBaudrate>
 800a31a:	e7f3      	b.n	800a304 <prvCLITask+0x3c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800a31c:	4b57      	ldr	r3, [pc, #348]	; (800a47c <prvCLITask+0x1b4>)
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	0053      	lsls	r3, r2, #1
 800a322:	189b      	adds	r3, r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4a56      	ldr	r2, [pc, #344]	; (800a480 <prvCLITask+0x1b8>)
 800a328:	189b      	adds	r3, r3, r2
 800a32a:	4a56      	ldr	r2, [pc, #344]	; (800a484 <prvCLITask+0x1bc>)
 800a32c:	7812      	ldrb	r2, [r2, #0]
 800a32e:	4c56      	ldr	r4, [pc, #344]	; (800a488 <prvCLITask+0x1c0>)
 800a330:	4d51      	ldr	r5, [pc, #324]	; (800a478 <prvCLITask+0x1b0>)
 800a332:	7829      	ldrb	r1, [r5, #0]
 800a334:	9100      	str	r1, [sp, #0]
 800a336:	4955      	ldr	r1, [pc, #340]	; (800a48c <prvCLITask+0x1c4>)
 800a338:	0020      	movs	r0, r4
 800a33a:	f008 ff5b 	bl	80131f4 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 800a33e:	7828      	ldrb	r0, [r5, #0]
 800a340:	230a      	movs	r3, #10
 800a342:	4a53      	ldr	r2, [pc, #332]	; (800a490 <prvCLITask+0x1c8>)
 800a344:	4953      	ldr	r1, [pc, #332]	; (800a494 <prvCLITask+0x1cc>)
 800a346:	f003 f82b 	bl	800d3a0 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800a34a:	0020      	movs	r0, r4
 800a34c:	f7f5 fee4 	bl	8000118 <strlen>
 800a350:	b282      	uxth	r2, r0
 800a352:	7828      	ldrb	r0, [r5, #0]
 800a354:	230a      	movs	r3, #10
 800a356:	0021      	movs	r1, r4
 800a358:	f003 f822 	bl	800d3a0 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 800a35c:	2300      	movs	r3, #0
 800a35e:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a360:	4b45      	ldr	r3, [pc, #276]	; (800a478 <prvCLITask+0x1b0>)
 800a362:	469a      	mov	sl, r3
 800a364:	4b4c      	ldr	r3, [pc, #304]	; (800a498 <prvCLITask+0x1d0>)
 800a366:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a368:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 800a36a:	4656      	mov	r6, sl
 800a36c:	e061      	b.n	800a432 <prvCLITask+0x16a>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 800a36e:	200f      	movs	r0, #15
 800a370:	ad02      	add	r5, sp, #8
 800a372:	46ac      	mov	ip, r5
 800a374:	4460      	add	r0, ip
 800a376:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800a378:	0198      	lsls	r0, r3, #6
 800a37a:	4a48      	ldr	r2, [pc, #288]	; (800a49c <prvCLITask+0x1d4>)
 800a37c:	1812      	adds	r2, r2, r0
 800a37e:	2000      	movs	r0, #0
 800a380:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 800a382:	4a45      	ldr	r2, [pc, #276]	; (800a498 <prvCLITask+0x1d0>)
 800a384:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 800a386:	240f      	movs	r4, #15
 800a388:	ab02      	add	r3, sp, #8
 800a38a:	469c      	mov	ip, r3
 800a38c:	4464      	add	r4, ip
 800a38e:	4b3a      	ldr	r3, [pc, #232]	; (800a478 <prvCLITask+0x1b0>)
 800a390:	7818      	ldrb	r0, [r3, #0]
 800a392:	230a      	movs	r3, #10
 800a394:	2201      	movs	r2, #1
 800a396:	0021      	movs	r1, r4
 800a398:	f003 f802 	bl	800d3a0 <writePxITMutex>
		if( cRxedChar == '\r' )
 800a39c:	7823      	ldrb	r3, [r4, #0]
 800a39e:	2b0d      	cmp	r3, #13
 800a3a0:	d028      	beq.n	800a3f4 <prvCLITask+0x12c>
			if( cRxedChar == '\n' )
 800a3a2:	2b0a      	cmp	r3, #10
 800a3a4:	d043      	beq.n	800a42e <prvCLITask+0x166>
			else if( cRxedChar == '\b' )
 800a3a6:	2b08      	cmp	r3, #8
 800a3a8:	d059      	beq.n	800a45e <prvCLITask+0x196>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800a3aa:	001a      	movs	r2, r3
 800a3ac:	3a20      	subs	r2, #32
 800a3ae:	2a5e      	cmp	r2, #94	; 0x5e
 800a3b0:	d83d      	bhi.n	800a42e <prvCLITask+0x166>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 800a3b2:	465a      	mov	r2, fp
 800a3b4:	2a31      	cmp	r2, #49	; 0x31
 800a3b6:	dc3a      	bgt.n	800a42e <prvCLITask+0x166>
						cInputString[ cInputIndex ] = cRxedChar;
 800a3b8:	4a39      	ldr	r2, [pc, #228]	; (800a4a0 <prvCLITask+0x1d8>)
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 800a3be:	465b      	mov	r3, fp
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b25b      	sxtb	r3, r3
 800a3c4:	469b      	mov	fp, r3
 800a3c6:	e032      	b.n	800a42e <prvCLITask+0x166>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 800a3cc:	f004 ff6c 	bl	800f2a8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a3d0:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 800a3d2:	7833      	ldrb	r3, [r6, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	0021      	movs	r1, r4
 800a3d8:	019a      	lsls	r2, r3, #6
 800a3da:	18aa      	adds	r2, r5, r2
 800a3dc:	5d12      	ldrb	r2, [r2, r4]
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	d1c5      	bne.n	800a36e <prvCLITask+0xa6>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 800a3e2:	2c3f      	cmp	r4, #63	; 0x3f
 800a3e4:	d0f0      	beq.n	800a3c8 <prvCLITask+0x100>
			taskYIELD();
 800a3e6:	f004 ff5f 	bl	800f2a8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a3ea:	3401      	adds	r4, #1
 800a3ec:	b2a4      	uxth	r4, r4
 800a3ee:	2c3f      	cmp	r4, #63	; 0x3f
 800a3f0:	d9ef      	bls.n	800a3d2 <prvCLITask+0x10a>
 800a3f2:	e7c8      	b.n	800a386 <prvCLITask+0xbe>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 800a3f4:	4b20      	ldr	r3, [pc, #128]	; (800a478 <prvCLITask+0x1b0>)
 800a3f6:	7818      	ldrb	r0, [r3, #0]
 800a3f8:	230a      	movs	r3, #10
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	4929      	ldr	r1, [pc, #164]	; (800a4a4 <prvCLITask+0x1dc>)
 800a3fe:	f002 ffcf 	bl	800d3a0 <writePxITMutex>
			if( cInputIndex == 0 )
 800a402:	465b      	mov	r3, fp
 800a404:	2b00      	cmp	r3, #0
 800a406:	d025      	beq.n	800a454 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800a408:	4c25      	ldr	r4, [pc, #148]	; (800a4a0 <prvCLITask+0x1d8>)
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <prvCLITask+0x1b0>)
 800a40c:	7818      	ldrb	r0, [r3, #0]
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	0022      	movs	r2, r4
 800a412:	2101      	movs	r1, #1
 800a414:	f7ff fd46 	bl	8009ea4 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800a418:	0021      	movs	r1, r4
 800a41a:	4823      	ldr	r0, [pc, #140]	; (800a4a8 <prvCLITask+0x1e0>)
 800a41c:	f008 ff26 	bl	801326c <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 800a420:	2232      	movs	r2, #50	; 0x32
 800a422:	2100      	movs	r1, #0
 800a424:	0020      	movs	r0, r4
 800a426:	f008 fceb 	bl	8012e00 <memset>
			cInputIndex = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	469b      	mov	fp, r3
		taskYIELD();
 800a42e:	f004 ff3b 	bl	800f2a8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a432:	4653      	mov	r3, sl
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	464a      	mov	r2, r9
 800a43a:	5cd2      	ldrb	r2, [r2, r3]
 800a43c:	b294      	uxth	r4, r2
 800a43e:	2c3f      	cmp	r4, #63	; 0x3f
 800a440:	d8a1      	bhi.n	800a386 <prvCLITask+0xbe>
			if (UARTRxBuf[PcPort-1][chr]) {
 800a442:	0011      	movs	r1, r2
 800a444:	019d      	lsls	r5, r3, #6
 800a446:	4815      	ldr	r0, [pc, #84]	; (800a49c <prvCLITask+0x1d4>)
 800a448:	1940      	adds	r0, r0, r5
 800a44a:	5c82      	ldrb	r2, [r0, r2]
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	d18e      	bne.n	800a36e <prvCLITask+0xa6>
 800a450:	4d12      	ldr	r5, [pc, #72]	; (800a49c <prvCLITask+0x1d4>)
 800a452:	e7c6      	b.n	800a3e2 <prvCLITask+0x11a>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 800a454:	4914      	ldr	r1, [pc, #80]	; (800a4a8 <prvCLITask+0x1e0>)
 800a456:	4812      	ldr	r0, [pc, #72]	; (800a4a0 <prvCLITask+0x1d8>)
 800a458:	f008 ff08 	bl	801326c <strcpy>
 800a45c:	e7d4      	b.n	800a408 <prvCLITask+0x140>
				if( cInputIndex > 0 )
 800a45e:	465b      	mov	r3, fp
 800a460:	2b00      	cmp	r3, #0
 800a462:	dde4      	ble.n	800a42e <prvCLITask+0x166>
					cInputIndex--;
 800a464:	3b01      	subs	r3, #1
 800a466:	b25b      	sxtb	r3, r3
 800a468:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 800a46a:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <prvCLITask+0x1d8>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	4659      	mov	r1, fp
 800a470:	545a      	strb	r2, [r3, r1]
 800a472:	e7dc      	b.n	800a42e <prvCLITask+0x166>
 800a474:	20006894 	.word	0x20006894
 800a478:	20000a2f 	.word	0x20000a2f
 800a47c:	2000001e 	.word	0x2000001e
 800a480:	08018274 	.word	0x08018274
 800a484:	200011c8 	.word	0x200011c8
 800a488:	20001404 	.word	0x20001404
 800a48c:	08019cbc 	.word	0x08019cbc
 800a490:	00000293 	.word	0x00000293
 800a494:	08019ce8 	.word	0x08019ce8
 800a498:	2000157c 	.word	0x2000157c
 800a49c:	2000143c 	.word	0x2000143c
 800a4a0:	20001334 	.word	0x20001334
 800a4a4:	0801a28c 	.word	0x0801a28c
 800a4a8:	200013d0 	.word	0x200013d0

0800a4ac <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <ParseSnippetCommand+0x78>)
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	3a01      	subs	r2, #1
 800a4b6:	0093      	lsls	r3, r2, #2
 800a4b8:	189b      	adds	r3, r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4a1a      	ldr	r2, [pc, #104]	; (800a528 <ParseSnippetCommand+0x7c>)
 800a4be:	18d3      	adds	r3, r2, r3
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d02c      	beq.n	800a520 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a4c6:	4b19      	ldr	r3, [pc, #100]	; (800a52c <ParseSnippetCommand+0x80>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d014      	beq.n	800a4f8 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 800a4ce:	4b17      	ldr	r3, [pc, #92]	; (800a52c <ParseSnippetCommand+0x80>)
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	782b      	ldrb	r3, [r5, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d012      	beq.n	800a4fe <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800a4d8:	2113      	movs	r1, #19
 800a4da:	0028      	movs	r0, r5
 800a4dc:	f008 feb8 	bl	8013250 <strchr>
 800a4e0:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 800a4e2:	d011      	beq.n	800a508 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 800a4e4:	1b42      	subs	r2, r0, r5
 800a4e6:	0029      	movs	r1, r5
 800a4e8:	0020      	movs	r0, r4
 800a4ea:	f008 fed8 	bl	801329e <strncpy>
		ptrStart = ptrEnd+1;
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <ParseSnippetCommand+0x80>)
 800a4f2:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	e006      	b.n	800a506 <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <ParseSnippetCommand+0x80>)
 800a4fa:	6018      	str	r0, [r3, #0]
 800a4fc:	e7e7      	b.n	800a4ce <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <ParseSnippetCommand+0x80>)
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
		return false;
 800a504:	2000      	movs	r0, #0
}
 800a506:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800a508:	0029      	movs	r1, r5
 800a50a:	0020      	movs	r0, r4
 800a50c:	f008 feae 	bl	801326c <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 800a510:	0020      	movs	r0, r4
 800a512:	f7f5 fe01 	bl	8000118 <strlen>
 800a516:	182d      	adds	r5, r5, r0
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <ParseSnippetCommand+0x80>)
 800a51a:	601d      	str	r5, [r3, #0]
	return true;
 800a51c:	2001      	movs	r0, #1
 800a51e:	e7f2      	b.n	800a506 <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a520:	2000      	movs	r0, #0
 800a522:	e7f0      	b.n	800a506 <ParseSnippetCommand+0x5a>
 800a524:	20001403 	.word	0x20001403
 800a528:	2000690c 	.word	0x2000690c
 800a52c:	2000142c 	.word	0x2000142c

0800a530 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a532:	b083      	sub	sp, #12
 800a534:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800a536:	0083      	lsls	r3, r0, #2
 800a538:	181b      	adds	r3, r3, r0
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4a3f      	ldr	r2, [pc, #252]	; (800a63c <CheckSnippetCondition+0x10c>)
 800a53e:	5c9b      	ldrb	r3, [r3, r2]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d003      	beq.n	800a54c <CheckSnippetCondition+0x1c>
 800a544:	2b03      	cmp	r3, #3
 800a546:	d015      	beq.n	800a574 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 800a548:	2000      	movs	r0, #0
 800a54a:	e011      	b.n	800a570 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 800a54c:	493b      	ldr	r1, [pc, #236]	; (800a63c <CheckSnippetCondition+0x10c>)
 800a54e:	0083      	lsls	r3, r0, #2
 800a550:	181a      	adds	r2, r3, r0
 800a552:	0092      	lsls	r2, r2, #2
 800a554:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 800a556:	7890      	ldrb	r0, [r2, #2]
 800a558:	00c2      	lsls	r2, r0, #3
 800a55a:	1812      	adds	r2, r2, r0
 800a55c:	191b      	adds	r3, r3, r4
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	18cb      	adds	r3, r1, r3
 800a562:	4937      	ldr	r1, [pc, #220]	; (800a640 <CheckSnippetCondition+0x110>)
 800a564:	5c50      	ldrb	r0, [r2, r1]
 800a566:	78db      	ldrb	r3, [r3, #3]
 800a568:	1ac0      	subs	r0, r0, r3
 800a56a:	4243      	negs	r3, r0
 800a56c:	4158      	adcs	r0, r3
 800a56e:	b2c0      	uxtb	r0, r0
}
 800a570:	b003      	add	sp, #12
 800a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 800a574:	4e31      	ldr	r6, [pc, #196]	; (800a63c <CheckSnippetCondition+0x10c>)
 800a576:	0085      	lsls	r5, r0, #2
 800a578:	182b      	adds	r3, r5, r0
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	18f3      	adds	r3, r6, r3
 800a57e:	78da      	ldrb	r2, [r3, #3]
 800a580:	3a01      	subs	r2, #1
 800a582:	0053      	lsls	r3, r2, #1
 800a584:	189b      	adds	r3, r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4a2e      	ldr	r2, [pc, #184]	; (800a644 <CheckSnippetCondition+0x114>)
 800a58a:	589b      	ldr	r3, [r3, r2]
 800a58c:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800a58e:	1829      	adds	r1, r5, r0
 800a590:	0089      	lsls	r1, r1, #2
 800a592:	3106      	adds	r1, #6
 800a594:	1989      	adds	r1, r1, r6
 800a596:	2204      	movs	r2, #4
 800a598:	a801      	add	r0, sp, #4
 800a59a:	f008 fc28 	bl	8012dee <memcpy>
			switch (snippets[index].cond.mathOperator)
 800a59e:	192d      	adds	r5, r5, r4
 800a5a0:	00ad      	lsls	r5, r5, #2
 800a5a2:	1975      	adds	r5, r6, r5
 800a5a4:	786b      	ldrb	r3, [r5, #1]
 800a5a6:	2b06      	cmp	r3, #6
 800a5a8:	d83f      	bhi.n	800a62a <CheckSnippetCondition+0xfa>
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4a26      	ldr	r2, [pc, #152]	; (800a648 <CheckSnippetCondition+0x118>)
 800a5ae:	58d3      	ldr	r3, [r2, r3]
 800a5b0:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 800a5b2:	1c39      	adds	r1, r7, #0
 800a5b4:	9801      	ldr	r0, [sp, #4]
 800a5b6:	f7f5 ff8b 	bl	80004d0 <__aeabi_fcmpeq>
 800a5ba:	1e43      	subs	r3, r0, #1
 800a5bc:	4198      	sbcs	r0, r3
 800a5be:	e7d7      	b.n	800a570 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 800a5c0:	1c39      	adds	r1, r7, #0
 800a5c2:	9801      	ldr	r0, [sp, #4]
 800a5c4:	f7f5 ff8a 	bl	80004dc <__aeabi_fcmplt>
 800a5c8:	1e43      	subs	r3, r0, #1
 800a5ca:	4198      	sbcs	r0, r3
 800a5cc:	e7d0      	b.n	800a570 <CheckSnippetCondition+0x40>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 800a5ce:	1c39      	adds	r1, r7, #0
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	f7f5 ff97 	bl	8000504 <__aeabi_fcmpgt>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d029      	beq.n	800a62e <CheckSnippetCondition+0xfe>
 800a5da:	2100      	movs	r1, #0
 800a5dc:	1c38      	adds	r0, r7, #0
 800a5de:	f7f5 ff77 	bl	80004d0 <__aeabi_fcmpeq>
 800a5e2:	4243      	negs	r3, r0
 800a5e4:	4158      	adcs	r0, r3
 800a5e6:	e7c3      	b.n	800a570 <CheckSnippetCondition+0x40>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800a5e8:	1c39      	adds	r1, r7, #0
 800a5ea:	9801      	ldr	r0, [sp, #4]
 800a5ec:	f7f5 ff80 	bl	80004f0 <__aeabi_fcmple>
 800a5f0:	1e43      	subs	r3, r0, #1
 800a5f2:	4198      	sbcs	r0, r3
 800a5f4:	e7bc      	b.n	800a570 <CheckSnippetCondition+0x40>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800a5f6:	1c39      	adds	r1, r7, #0
 800a5f8:	9801      	ldr	r0, [sp, #4]
 800a5fa:	f7f5 ff8d 	bl	8000518 <__aeabi_fcmpge>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d017      	beq.n	800a632 <CheckSnippetCondition+0x102>
 800a602:	2100      	movs	r1, #0
 800a604:	1c38      	adds	r0, r7, #0
 800a606:	f7f5 ff63 	bl	80004d0 <__aeabi_fcmpeq>
 800a60a:	4243      	negs	r3, r0
 800a60c:	4158      	adcs	r0, r3
 800a60e:	e7af      	b.n	800a570 <CheckSnippetCondition+0x40>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 800a610:	1c39      	adds	r1, r7, #0
 800a612:	9801      	ldr	r0, [sp, #4]
 800a614:	f7f5 ff5c 	bl	80004d0 <__aeabi_fcmpeq>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d10c      	bne.n	800a636 <CheckSnippetCondition+0x106>
 800a61c:	2100      	movs	r1, #0
 800a61e:	1c38      	adds	r0, r7, #0
 800a620:	f7f5 ff56 	bl	80004d0 <__aeabi_fcmpeq>
 800a624:	4243      	negs	r3, r0
 800a626:	4158      	adcs	r0, r3
 800a628:	e7a2      	b.n	800a570 <CheckSnippetCondition+0x40>
	return false;
 800a62a:	2000      	movs	r0, #0
 800a62c:	e7a0      	b.n	800a570 <CheckSnippetCondition+0x40>
 800a62e:	2000      	movs	r0, #0
 800a630:	e79e      	b.n	800a570 <CheckSnippetCondition+0x40>
 800a632:	2000      	movs	r0, #0
 800a634:	e79c      	b.n	800a570 <CheckSnippetCondition+0x40>
 800a636:	2000      	movs	r0, #0
 800a638:	e79a      	b.n	800a570 <CheckSnippetCondition+0x40>
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	2000690c 	.word	0x2000690c
 800a640:	20000cdc 	.word	0x20000cdc
 800a644:	20000040 	.word	0x20000040
 800a648:	08019aac 	.word	0x08019aac

0800a64c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 800a64e:	f003 f887 	bl	800d760 <FreeRTOS_CLIGetOutputBuffer>
 800a652:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a654:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <ExecuteSnippet+0x7c>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d032      	beq.n	800a6c2 <ExecuteSnippet+0x76>
 800a65c:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 800a65e:	4f1b      	ldr	r7, [pc, #108]	; (800a6cc <ExecuteSnippet+0x80>)
 800a660:	e01a      	b.n	800a698 <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 800a662:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <ExecuteSnippet+0x84>)
 800a664:	7818      	ldrb	r0, [r3, #0]
 800a666:	002b      	movs	r3, r5
 800a668:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <ExecuteSnippet+0x88>)
 800a66a:	2100      	movs	r1, #0
 800a66c:	f7ff fc1a 	bl	8009ea4 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 800a670:	0028      	movs	r0, r5
 800a672:	f7f5 fd51 	bl	8000118 <strlen>
 800a676:	0002      	movs	r2, r0
 800a678:	2100      	movs	r1, #0
 800a67a:	0028      	movs	r0, r5
 800a67c:	f008 fbc0 	bl	8012e00 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a680:	4914      	ldr	r1, [pc, #80]	; (800a6d4 <ExecuteSnippet+0x88>)
 800a682:	68f0      	ldr	r0, [r6, #12]
 800a684:	f7ff ff12 	bl	800a4ac <ParseSnippetCommand>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1ea      	bne.n	800a662 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a68c:	3401      	adds	r4, #1
 800a68e:	b2a4      	uxth	r4, r4
 800a690:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <ExecuteSnippet+0x7c>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	42a3      	cmp	r3, r4
 800a696:	d914      	bls.n	800a6c2 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 800a698:	00a3      	lsls	r3, r4, #2
 800a69a:	191b      	adds	r3, r3, r4
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	18fb      	adds	r3, r7, r3
 800a6a0:	7c1b      	ldrb	r3, [r3, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0f2      	beq.n	800a68c <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 800a6a6:	b2e0      	uxtb	r0, r4
 800a6a8:	f7ff ff42 	bl	800a530 <CheckSnippetCondition>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d0ed      	beq.n	800a68c <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800a6b0:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <ExecuteSnippet+0x8c>)
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a6b6:	00a3      	lsls	r3, r4, #2
 800a6b8:	191e      	adds	r6, r3, r4
 800a6ba:	00b6      	lsls	r6, r6, #2
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <ExecuteSnippet+0x80>)
 800a6be:	199e      	adds	r6, r3, r6
 800a6c0:	e7de      	b.n	800a680 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	20001403 	.word	0x20001403
 800a6cc:	2000690c 	.word	0x2000690c
 800a6d0:	20000a2f 	.word	0x20000a2f
 800a6d4:	2000139c 	.word	0x2000139c
 800a6d8:	20006894 	.word	0x20006894

0800a6dc <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 800a6dc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800a6de:	1e45      	subs	r5, r0, #1
 800a6e0:	00ec      	lsls	r4, r5, #3
 800a6e2:	1b60      	subs	r0, r4, r5
 800a6e4:	00c0      	lsls	r0, r0, #3
 800a6e6:	4e05      	ldr	r6, [pc, #20]	; (800a6fc <StopMsgDMA+0x20>)
 800a6e8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a6ea:	f005 f974 	bl	800f9d6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a6ee:	1b64      	subs	r4, r4, r5
 800a6f0:	00e4      	lsls	r4, r4, #3
 800a6f2:	59a3      	ldr	r3, [r4, r6]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]
}
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	20001634 	.word	0x20001634

0800a700 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 800a700:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800a702:	1e44      	subs	r4, r0, #1
 800a704:	00e5      	lsls	r5, r4, #3
 800a706:	1b28      	subs	r0, r5, r4
 800a708:	00c0      	lsls	r0, r0, #3
 800a70a:	4e07      	ldr	r6, [pc, #28]	; (800a728 <StopStreamDMA+0x28>)
 800a70c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a70e:	f005 f962 	bl	800f9d6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a712:	1b2d      	subs	r5, r5, r4
 800a714:	00ed      	lsls	r5, r5, #3
 800a716:	59aa      	ldr	r2, [r5, r6]
 800a718:	2300      	movs	r3, #0
 800a71a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 800a71c:	00a4      	lsls	r4, r4, #2
 800a71e:	4a03      	ldr	r2, [pc, #12]	; (800a72c <StopStreamDMA+0x2c>)
 800a720:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800a722:	4a03      	ldr	r2, [pc, #12]	; (800a730 <StopStreamDMA+0x30>)
 800a724:	50a3      	str	r3, [r4, r2]

}
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	2000182c 	.word	0x2000182c
 800a72c:	200015bc 	.word	0x200015bc
 800a730:	200015e4 	.word	0x200015e4

0800a734 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 800a734:	b510      	push	{r4, lr}
 800a736:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 800a738:	f7ff ffd0 	bl	800a6dc <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 800a73c:	3c01      	subs	r4, #1
 800a73e:	00e0      	lsls	r0, r4, #3
 800a740:	1b02      	subs	r2, r0, r4
 800a742:	00d2      	lsls	r2, r2, #3
 800a744:	4903      	ldr	r1, [pc, #12]	; (800a754 <SwitchMsgDMAToStream+0x20>)
 800a746:	5851      	ldr	r1, [r2, r1]
 800a748:	4b03      	ldr	r3, [pc, #12]	; (800a758 <SwitchMsgDMAToStream+0x24>)
 800a74a:	18d0      	adds	r0, r2, r3
 800a74c:	f001 fb42 	bl	800bdd4 <DMA_STREAM_CH_Init>
}
 800a750:	bd10      	pop	{r4, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	20001634 	.word	0x20001634
 800a758:	2000182c 	.word	0x2000182c

0800a75c <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 800a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75e:	b083      	sub	sp, #12
 800a760:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800a762:	f7ff ffcd 	bl	800a700 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 800a766:	9401      	str	r4, [sp, #4]
 800a768:	3c01      	subs	r4, #1
 800a76a:	00e7      	lsls	r7, r4, #3
 800a76c:	1b3d      	subs	r5, r7, r4
 800a76e:	00ed      	lsls	r5, r5, #3
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <SwitchStreamDMAToMsg+0x54>)
 800a772:	18ed      	adds	r5, r5, r3
 800a774:	4e0f      	ldr	r6, [pc, #60]	; (800a7b4 <SwitchStreamDMAToMsg+0x58>)
 800a776:	1b3b      	subs	r3, r7, r4
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	5999      	ldr	r1, [r3, r6]
 800a77c:	0028      	movs	r0, r5
 800a77e:	f001 fab3 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800a782:	1b3b      	subs	r3, r7, r4
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	18f3      	adds	r3, r6, r3
 800a788:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a78a:	f000 ffe3 	bl	800b754 <GetPort>
 800a78e:	2300      	movs	r3, #0
 800a790:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <SwitchStreamDMAToMsg+0x5c>)
 800a792:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 800a794:	1b3f      	subs	r7, r7, r4
 800a796:	00ff      	lsls	r7, r7, #3
 800a798:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 800a79a:	00a4      	lsls	r4, r4, #2
 800a79c:	4a07      	ldr	r2, [pc, #28]	; (800a7bc <SwitchStreamDMAToMsg+0x60>)
 800a79e:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800a7a0:	9801      	ldr	r0, [sp, #4]
 800a7a2:	f7fa f849 	bl	8004838 <GetUart>
 800a7a6:	0029      	movs	r1, r5
 800a7a8:	f001 ff08 	bl	800c5bc <DMA_MSG_RX_Setup>
		
}
 800a7ac:	b003      	add	sp, #12
 800a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7b0:	20001634 	.word	0x20001634
 800a7b4:	2000182c 	.word	0x2000182c
 800a7b8:	20001270 	.word	0x20001270
 800a7bc:	200015d0 	.word	0x200015d0

0800a7c0 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 800a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c2:	0005      	movs	r5, r0
 800a7c4:	000e      	movs	r6, r1
 800a7c6:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 800a7c8:	f000 ffc4 	bl	800b754 <GetPort>
 800a7cc:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	; (800a804 <StartDMAstream+0x44>)
 800a7d0:	5c1b      	ldrb	r3, [r3, r0]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d902      	bls.n	800a7dc <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800a7d6:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d112      	bne.n	800a802 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800a7dc:	0020      	movs	r0, r4
 800a7de:	f7ff ffa9 	bl	800a734 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 800a7e2:	1e63      	subs	r3, r4, #1
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4a08      	ldr	r2, [pc, #32]	; (800a808 <StartDMAstream+0x48>)
 800a7e8:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800a7ea:	4a06      	ldr	r2, [pc, #24]	; (800a804 <StartDMAstream+0x44>)
 800a7ec:	2102      	movs	r1, #2
 800a7ee:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 800a7f0:	4a06      	ldr	r2, [pc, #24]	; (800a80c <StartDMAstream+0x4c>)
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 800a7f6:	003a      	movs	r2, r7
 800a7f8:	0031      	movs	r1, r6
 800a7fa:	0028      	movs	r0, r5
 800a7fc:	f001 ff3c 	bl	800c678 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800a800:	2000      	movs	r0, #0
}
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a804:	20001270 	.word	0x20001270
 800a808:	200015d0 	.word	0x200015d0
 800a80c:	200015bc 	.word	0x200015bc

0800a810 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 800a814:	4b12      	ldr	r3, [pc, #72]	; (800a860 <DMA_IRQHandler+0x50>)
 800a816:	5c1b      	ldrb	r3, [r3, r0]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d008      	beq.n	800a82e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800a81c:	3c01      	subs	r4, #1
 800a81e:	00e0      	lsls	r0, r4, #3
 800a820:	1b00      	subs	r0, r0, r4
 800a822:	00c0      	lsls	r0, r0, #3
 800a824:	4c0f      	ldr	r4, [pc, #60]	; (800a864 <DMA_IRQHandler+0x54>)
 800a826:	1900      	adds	r0, r0, r4
 800a828:	f005 f8fe 	bl	800fa28 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800a82e:	1e45      	subs	r5, r0, #1
 800a830:	00e8      	lsls	r0, r5, #3
 800a832:	1b40      	subs	r0, r0, r5
 800a834:	00c0      	lsls	r0, r0, #3
 800a836:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <DMA_IRQHandler+0x58>)
 800a838:	18c0      	adds	r0, r0, r3
 800a83a:	f005 f8f5 	bl	800fa28 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800a83e:	00aa      	lsls	r2, r5, #2
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <DMA_IRQHandler+0x5c>)
 800a842:	58d2      	ldr	r2, [r2, r3]
 800a844:	2a00      	cmp	r2, #0
 800a846:	d006      	beq.n	800a856 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 800a848:	4909      	ldr	r1, [pc, #36]	; (800a870 <DMA_IRQHandler+0x60>)
 800a84a:	00ad      	lsls	r5, r5, #2
 800a84c:	586b      	ldr	r3, [r5, r1]
 800a84e:	3301      	adds	r3, #1
 800a850:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 800a852:	429a      	cmp	r2, r3
 800a854:	d8ea      	bhi.n	800a82c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800a856:	0020      	movs	r0, r4
 800a858:	f7ff ff52 	bl	800a700 <StopStreamDMA>
}
 800a85c:	e7e6      	b.n	800a82c <DMA_IRQHandler+0x1c>
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	20001270 	.word	0x20001270
 800a864:	20001634 	.word	0x20001634
 800a868:	2000182c 	.word	0x2000182c
 800a86c:	200015e4 	.word	0x200015e4
 800a870:	200015bc 	.word	0x200015bc

0800a874 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800a874:	4b08      	ldr	r3, [pc, #32]	; (800a898 <ResetUartORE+0x24>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	2308      	movs	r3, #8
 800a87a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800a87c:	4a07      	ldr	r2, [pc, #28]	; (800a89c <ResetUartORE+0x28>)
 800a87e:	6812      	ldr	r2, [r2, #0]
 800a880:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800a882:	4a07      	ldr	r2, [pc, #28]	; (800a8a0 <ResetUartORE+0x2c>)
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800a888:	4a06      	ldr	r2, [pc, #24]	; (800a8a4 <ResetUartORE+0x30>)
 800a88a:	6812      	ldr	r2, [r2, #0]
 800a88c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800a88e:	4a06      	ldr	r2, [pc, #24]	; (800a8a8 <ResetUartORE+0x34>)
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	6213      	str	r3, [r2, #32]
#endif
}
 800a894:	4770      	bx	lr
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	20006acc 	.word	0x20006acc
 800a89c:	20006bb4 	.word	0x20006bb4
 800a8a0:	200069ac 	.word	0x200069ac
 800a8a4:	20006a5c 	.word	0x20006a5c
 800a8a8:	20006b44 	.word	0x20006b44

0800a8ac <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	0006      	movs	r6, r0
 800a8b0:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 800a8b2:	f005 fd29 	bl	8010308 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a8b6:	4b2b      	ldr	r3, [pc, #172]	; (800a964 <EE_VerifyPageFullWriteVariable+0xb8>)
 800a8b8:	881a      	ldrh	r2, [r3, #0]
 800a8ba:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <EE_VerifyPageFullWriteVariable+0xbc>)
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d104      	bne.n	800a8d0 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 800a8c6:	4929      	ldr	r1, [pc, #164]	; (800a96c <EE_VerifyPageFullWriteVariable+0xc0>)
 800a8c8:	428a      	cmp	r2, r1
 800a8ca:	d007      	beq.n	800a8dc <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	e005      	b.n	800a8dc <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d143      	bne.n	800a95c <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 800a8d4:	4925      	ldr	r1, [pc, #148]	; (800a96c <EE_VerifyPageFullWriteVariable+0xc0>)
 800a8d6:	428b      	cmp	r3, r1
 800a8d8:	d042      	beq.n	800a960 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 800a8da:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a8dc:	4a24      	ldr	r2, [pc, #144]	; (800a970 <EE_VerifyPageFullWriteVariable+0xc4>)
 800a8de:	189c      	adds	r4, r3, r2
 800a8e0:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800a8e2:	02db      	lsls	r3, r3, #11
 800a8e4:	4a23      	ldr	r2, [pc, #140]	; (800a974 <EE_VerifyPageFullWriteVariable+0xc8>)
 800a8e6:	4694      	mov	ip, r2
 800a8e8:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	d005      	beq.n	800a8fc <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800a8f0:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 800a8f2:	429c      	cmp	r4, r3
 800a8f4:	d22e      	bcs.n	800a954 <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	d1f9      	bne.n	800a8f0 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 800a8fc:	002a      	movs	r2, r5
 800a8fe:	2300      	movs	r3, #0
 800a900:	0021      	movs	r1, r4
 800a902:	2001      	movs	r0, #1
 800a904:	f005 fd4a 	bl	801039c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a908:	481b      	ldr	r0, [pc, #108]	; (800a978 <EE_VerifyPageFullWriteVariable+0xcc>)
 800a90a:	f005 fd19 	bl	8010340 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800a90e:	2800      	cmp	r0, #0
 800a910:	d003      	beq.n	800a91a <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 800a912:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <EE_VerifyPageFullWriteVariable+0xd0>)
 800a914:	69d8      	ldr	r0, [r3, #28]
 800a916:	b280      	uxth	r0, r0
 800a918:	e01f      	b.n	800a95a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a91a:	4a19      	ldr	r2, [pc, #100]	; (800a980 <EE_VerifyPageFullWriteVariable+0xd4>)
 800a91c:	6913      	ldr	r3, [r2, #16]
 800a91e:	2101      	movs	r1, #1
 800a920:	438b      	bics	r3, r1
 800a922:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800a924:	1ca1      	adds	r1, r4, #2
 800a926:	0032      	movs	r2, r6
 800a928:	2300      	movs	r3, #0
 800a92a:	2001      	movs	r0, #1
 800a92c:	f005 fd36 	bl	801039c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a930:	4811      	ldr	r0, [pc, #68]	; (800a978 <EE_VerifyPageFullWriteVariable+0xcc>)
 800a932:	f005 fd05 	bl	8010340 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800a936:	2800      	cmp	r0, #0
 800a938:	d003      	beq.n	800a942 <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 800a93a:	4b10      	ldr	r3, [pc, #64]	; (800a97c <EE_VerifyPageFullWriteVariable+0xd0>)
 800a93c:	69d8      	ldr	r0, [r3, #28]
 800a93e:	b280      	uxth	r0, r0
 800a940:	e00b      	b.n	800a95a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a942:	4a0f      	ldr	r2, [pc, #60]	; (800a980 <EE_VerifyPageFullWriteVariable+0xd4>)
 800a944:	6913      	ldr	r3, [r2, #16]
 800a946:	2101      	movs	r1, #1
 800a948:	438b      	bics	r3, r1
 800a94a:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <EE_VerifyPageFullWriteVariable+0xd0>)
 800a94e:	69d8      	ldr	r0, [r3, #28]
 800a950:	b280      	uxth	r0, r0
 800a952:	e002      	b.n	800a95a <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 800a954:	f005 fcea 	bl	801032c <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800a958:	2080      	movs	r0, #128	; 0x80
}
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 800a95c:	20ab      	movs	r0, #171	; 0xab
 800a95e:	e7fc      	b.n	800a95a <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 800a960:	2302      	movs	r3, #2
 800a962:	e7bb      	b.n	800a8dc <EE_VerifyPageFullWriteVariable+0x30>
 800a964:	0801e000 	.word	0x0801e000
 800a968:	0801f000 	.word	0x0801f000
 800a96c:	0000eeee 	.word	0x0000eeee
 800a970:	0001003c 	.word	0x0001003c
 800a974:	0801effe 	.word	0x0801effe
 800a978:	0000c350 	.word	0x0000c350
 800a97c:	20006c88 	.word	0x20006c88
 800a980:	40022000 	.word	0x40022000

0800a984 <EE_ReadVariable>:
{
 800a984:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800a986:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <EE_ReadVariable+0x50>)
 800a988:	881c      	ldrh	r4, [r3, #0]
 800a98a:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800a98c:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <EE_ReadVariable+0x54>)
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 800a992:	2c00      	cmp	r4, #0
 800a994:	d006      	beq.n	800a9a4 <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800a99a:	20ab      	movs	r0, #171	; 0xab
 800a99c:	e019      	b.n	800a9d2 <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e017      	b.n	800a9d2 <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 800a9a2:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800a9a4:	02e3      	lsls	r3, r4, #11
 800a9a6:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <EE_ReadVariable+0x58>)
 800a9a8:	4694      	mov	ip, r2
 800a9aa:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800a9ac:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 800a9ae:	4a0c      	ldr	r2, [pc, #48]	; (800a9e0 <EE_ReadVariable+0x5c>)
 800a9b0:	4694      	mov	ip, r2
 800a9b2:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 800a9b4:	881a      	ldrh	r2, [r3, #0]
 800a9b6:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800a9b8:	4290      	cmp	r0, r2
 800a9ba:	d006      	beq.n	800a9ca <EE_ReadVariable+0x46>
      Address = Address - 4;
 800a9bc:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	d9ed      	bls.n	800a99e <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 800a9c2:	881a      	ldrh	r2, [r3, #0]
 800a9c4:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800a9c6:	4282      	cmp	r2, r0
 800a9c8:	d1f8      	bne.n	800a9bc <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800a9ca:	3b02      	subs	r3, #2
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 800a9d0:	2000      	movs	r0, #0
}
 800a9d2:	bd10      	pop	{r4, pc}
 800a9d4:	0801e000 	.word	0x0801e000
 800a9d8:	0801f000 	.word	0x0801f000
 800a9dc:	0801effe 	.word	0x0801effe
 800a9e0:	0801e002 	.word	0x0801e002

0800a9e4 <EE_WriteVariable>:
{
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	46de      	mov	lr, fp
 800a9e8:	4647      	mov	r7, r8
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	0005      	movs	r5, r0
 800a9f0:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800a9f2:	f005 fc89 	bl	8010308 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800a9f6:	0031      	movs	r1, r6
 800a9f8:	0028      	movs	r0, r5
 800a9fa:	f7ff ff57 	bl	800a8ac <EE_VerifyPageFullWriteVariable>
 800a9fe:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 800aa00:	2880      	cmp	r0, #128	; 0x80
 800aa02:	d007      	beq.n	800aa14 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800aa04:	f005 fc92 	bl	801032c <HAL_FLASH_Lock>
}
 800aa08:	0020      	movs	r0, r4
 800aa0a:	b003      	add	sp, #12
 800aa0c:	bc0c      	pop	{r2, r3}
 800aa0e:	4690      	mov	r8, r2
 800aa10:	469b      	mov	fp, r3
 800aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 800aa14:	f005 fc78 	bl	8010308 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800aa18:	4b3e      	ldr	r3, [pc, #248]	; (800ab14 <EE_WriteVariable+0x130>)
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800aa1e:	4a3e      	ldr	r2, [pc, #248]	; (800ab18 <EE_WriteVariable+0x134>)
 800aa20:	8812      	ldrh	r2, [r2, #0]
 800aa22:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800aa28:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d1ea      	bne.n	800aa04 <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 800aa2e:	4b3a      	ldr	r3, [pc, #232]	; (800ab18 <EE_WriteVariable+0x134>)
 800aa30:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 800aa32:	4b38      	ldr	r3, [pc, #224]	; (800ab14 <EE_WriteVariable+0x130>)
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	e003      	b.n	800aa40 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 800aa38:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <EE_WriteVariable+0x130>)
 800aa3a:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 800aa3c:	4b36      	ldr	r3, [pc, #216]	; (800ab18 <EE_WriteVariable+0x134>)
 800aa3e:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800aa40:	4a36      	ldr	r2, [pc, #216]	; (800ab1c <EE_WriteVariable+0x138>)
 800aa42:	2300      	movs	r3, #0
 800aa44:	9901      	ldr	r1, [sp, #4]
 800aa46:	2001      	movs	r0, #1
 800aa48:	f005 fca8 	bl	801039c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aa4c:	4834      	ldr	r0, [pc, #208]	; (800ab20 <EE_WriteVariable+0x13c>)
 800aa4e:	f005 fc77 	bl	8010340 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d003      	beq.n	800aa5e <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 800aa56:	4b33      	ldr	r3, [pc, #204]	; (800ab24 <EE_WriteVariable+0x140>)
 800aa58:	69dc      	ldr	r4, [r3, #28]
 800aa5a:	b2a4      	uxth	r4, r4
 800aa5c:	e7d2      	b.n	800aa04 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aa5e:	4a32      	ldr	r2, [pc, #200]	; (800ab28 <EE_WriteVariable+0x144>)
 800aa60:	6913      	ldr	r3, [r2, #16]
 800aa62:	2101      	movs	r1, #1
 800aa64:	438b      	bics	r3, r1
 800aa66:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800aa68:	0031      	movs	r1, r6
 800aa6a:	0028      	movs	r0, r5
 800aa6c:	f7ff ff1e 	bl	800a8ac <EE_VerifyPageFullWriteVariable>
 800aa70:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800aa72:	d1c7      	bne.n	800aa04 <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800aa74:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aa76:	4b2d      	ldr	r3, [pc, #180]	; (800ab2c <EE_WriteVariable+0x148>)
 800aa78:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800aa7a:	4e2d      	ldr	r6, [pc, #180]	; (800ab30 <EE_WriteVariable+0x14c>)
 800aa7c:	e003      	b.n	800aa86 <EE_WriteVariable+0xa2>
 800aa7e:	3701      	adds	r7, #1
 800aa80:	b2bf      	uxth	r7, r7
 800aa82:	42b7      	cmp	r7, r6
 800aa84:	d00f      	beq.n	800aaa6 <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 800aa86:	42bd      	cmp	r5, r7
 800aa88:	d0f9      	beq.n	800aa7e <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800aa8a:	4928      	ldr	r1, [pc, #160]	; (800ab2c <EE_WriteVariable+0x148>)
 800aa8c:	0038      	movs	r0, r7
 800aa8e:	f7ff ff79 	bl	800a984 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 800aa92:	2801      	cmp	r0, #1
 800aa94:	d0f3      	beq.n	800aa7e <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aa96:	4643      	mov	r3, r8
 800aa98:	8819      	ldrh	r1, [r3, #0]
 800aa9a:	0038      	movs	r0, r7
 800aa9c:	f7ff ff06 	bl	800a8ac <EE_VerifyPageFullWriteVariable>
 800aaa0:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800aaa2:	d0ec      	beq.n	800aa7e <EE_WriteVariable+0x9a>
 800aaa4:	e7ae      	b.n	800aa04 <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f005 fcf0 	bl	801048c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aaac:	481c      	ldr	r0, [pc, #112]	; (800ab20 <EE_WriteVariable+0x13c>)
 800aaae:	f005 fc47 	bl	8010340 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d003      	beq.n	800aabe <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 800aab6:	4b1b      	ldr	r3, [pc, #108]	; (800ab24 <EE_WriteVariable+0x140>)
 800aab8:	69dc      	ldr	r4, [r3, #28]
 800aaba:	b2a4      	uxth	r4, r4
 800aabc:	e7a2      	b.n	800aa04 <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800aabe:	2080      	movs	r0, #128	; 0x80
 800aac0:	0100      	lsls	r0, r0, #4
 800aac2:	4458      	add	r0, fp
 800aac4:	f005 fce2 	bl	801048c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aac8:	4815      	ldr	r0, [pc, #84]	; (800ab20 <EE_WriteVariable+0x13c>)
 800aaca:	f005 fc39 	bl	8010340 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800aace:	2800      	cmp	r0, #0
 800aad0:	d003      	beq.n	800aada <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 800aad2:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <EE_WriteVariable+0x140>)
 800aad4:	69dc      	ldr	r4, [r3, #28]
 800aad6:	b2a4      	uxth	r4, r4
 800aad8:	e794      	b.n	800aa04 <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800aada:	4a13      	ldr	r2, [pc, #76]	; (800ab28 <EE_WriteVariable+0x144>)
 800aadc:	6913      	ldr	r3, [r2, #16]
 800aade:	2102      	movs	r1, #2
 800aae0:	438b      	bics	r3, r1
 800aae2:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	9901      	ldr	r1, [sp, #4]
 800aaea:	2001      	movs	r0, #1
 800aaec:	f005 fc56 	bl	801039c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aaf0:	480b      	ldr	r0, [pc, #44]	; (800ab20 <EE_WriteVariable+0x13c>)
 800aaf2:	f005 fc25 	bl	8010340 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d003      	beq.n	800ab02 <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <EE_WriteVariable+0x140>)
 800aafc:	69dc      	ldr	r4, [r3, #28]
 800aafe:	b2a4      	uxth	r4, r4
 800ab00:	e780      	b.n	800aa04 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ab02:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <EE_WriteVariable+0x144>)
 800ab04:	6913      	ldr	r3, [r2, #16]
 800ab06:	2101      	movs	r1, #1
 800ab08:	438b      	bics	r3, r1
 800ab0a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800ab0c:	f005 fc0e 	bl	801032c <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 800ab10:	2400      	movs	r4, #0
 800ab12:	e777      	b.n	800aa04 <EE_WriteVariable+0x20>
 800ab14:	0801e000 	.word	0x0801e000
 800ab18:	0801f000 	.word	0x0801f000
 800ab1c:	0000eeee 	.word	0x0000eeee
 800ab20:	0000c350 	.word	0x0000c350
 800ab24:	20006c88 	.word	0x20006c88
 800ab28:	40022000 	.word	0x40022000
 800ab2c:	200015f8 	.word	0x200015f8
 800ab30:	00000401 	.word	0x00000401

0800ab34 <EE_Format>:
{
 800ab34:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800ab36:	f005 fbe7 	bl	8010308 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800ab3a:	4829      	ldr	r0, [pc, #164]	; (800abe0 <EE_Format+0xac>)
 800ab3c:	f005 fca6 	bl	801048c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab40:	4828      	ldr	r0, [pc, #160]	; (800abe4 <EE_Format+0xb0>)
 800ab42:	f005 fbfd 	bl	8010340 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d003      	beq.n	800ab52 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800ab4a:	4b27      	ldr	r3, [pc, #156]	; (800abe8 <EE_Format+0xb4>)
 800ab4c:	69d8      	ldr	r0, [r3, #28]
 800ab4e:	b280      	uxth	r0, r0
}
 800ab50:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ab52:	4826      	ldr	r0, [pc, #152]	; (800abec <EE_Format+0xb8>)
 800ab54:	f005 fc9a 	bl	801048c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab58:	4822      	ldr	r0, [pc, #136]	; (800abe4 <EE_Format+0xb0>)
 800ab5a:	f005 fbf1 	bl	8010340 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d003      	beq.n	800ab6a <EE_Format+0x36>
			return pFlash.ErrorCode;
 800ab62:	4b21      	ldr	r3, [pc, #132]	; (800abe8 <EE_Format+0xb4>)
 800ab64:	69d8      	ldr	r0, [r3, #28]
 800ab66:	b280      	uxth	r0, r0
 800ab68:	e7f2      	b.n	800ab50 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ab6a:	4a21      	ldr	r2, [pc, #132]	; (800abf0 <EE_Format+0xbc>)
 800ab6c:	6913      	ldr	r3, [r2, #16]
 800ab6e:	2102      	movs	r1, #2
 800ab70:	438b      	bics	r3, r1
 800ab72:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800ab74:	2200      	movs	r2, #0
 800ab76:	2300      	movs	r3, #0
 800ab78:	4919      	ldr	r1, [pc, #100]	; (800abe0 <EE_Format+0xac>)
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f005 fc0e 	bl	801039c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab80:	4818      	ldr	r0, [pc, #96]	; (800abe4 <EE_Format+0xb0>)
 800ab82:	f005 fbdd 	bl	8010340 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d003      	beq.n	800ab92 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800ab8a:	4b17      	ldr	r3, [pc, #92]	; (800abe8 <EE_Format+0xb4>)
 800ab8c:	69d8      	ldr	r0, [r3, #28]
 800ab8e:	b280      	uxth	r0, r0
 800ab90:	e7de      	b.n	800ab50 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ab92:	4a17      	ldr	r2, [pc, #92]	; (800abf0 <EE_Format+0xbc>)
 800ab94:	6913      	ldr	r3, [r2, #16]
 800ab96:	2101      	movs	r1, #1
 800ab98:	438b      	bics	r3, r1
 800ab9a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ab9c:	4815      	ldr	r0, [pc, #84]	; (800abf4 <EE_Format+0xc0>)
 800ab9e:	f005 fc75 	bl	801048c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aba2:	4810      	ldr	r0, [pc, #64]	; (800abe4 <EE_Format+0xb0>)
 800aba4:	f005 fbcc 	bl	8010340 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d003      	beq.n	800abb4 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800abac:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <EE_Format+0xb4>)
 800abae:	69d8      	ldr	r0, [r3, #28]
 800abb0:	b280      	uxth	r0, r0
 800abb2:	e7cd      	b.n	800ab50 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800abb4:	4810      	ldr	r0, [pc, #64]	; (800abf8 <EE_Format+0xc4>)
 800abb6:	f005 fc69 	bl	801048c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800abba:	480a      	ldr	r0, [pc, #40]	; (800abe4 <EE_Format+0xb0>)
 800abbc:	f005 fbc0 	bl	8010340 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d003      	beq.n	800abcc <EE_Format+0x98>
			return pFlash.ErrorCode;
 800abc4:	4b08      	ldr	r3, [pc, #32]	; (800abe8 <EE_Format+0xb4>)
 800abc6:	69d8      	ldr	r0, [r3, #28]
 800abc8:	b280      	uxth	r0, r0
 800abca:	e7c1      	b.n	800ab50 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800abcc:	4a08      	ldr	r2, [pc, #32]	; (800abf0 <EE_Format+0xbc>)
 800abce:	6913      	ldr	r3, [r2, #16]
 800abd0:	2101      	movs	r1, #1
 800abd2:	438b      	bics	r3, r1
 800abd4:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800abd6:	f005 fba9 	bl	801032c <HAL_FLASH_Lock>
  return FlashStatus;
 800abda:	2000      	movs	r0, #0
 800abdc:	e7b8      	b.n	800ab50 <EE_Format+0x1c>
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	0801e000 	.word	0x0801e000
 800abe4:	0000c350 	.word	0x0000c350
 800abe8:	20006c88 	.word	0x20006c88
 800abec:	0801e800 	.word	0x0801e800
 800abf0:	40022000 	.word	0x40022000
 800abf4:	0801f000 	.word	0x0801f000
 800abf8:	0801f800 	.word	0x0801f800

0800abfc <EE_Init>:
{
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	46c6      	mov	lr, r8
 800ac00:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800ac02:	f005 fb81 	bl	8010308 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800ac06:	4bbe      	ldr	r3, [pc, #760]	; (800af00 <EE_Init+0x304>)
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800ac0c:	4abd      	ldr	r2, [pc, #756]	; (800af04 <EE_Init+0x308>)
 800ac0e:	8812      	ldrh	r2, [r2, #0]
 800ac10:	b292      	uxth	r2, r2
  switch (PageStatusA)
 800ac12:	49bd      	ldr	r1, [pc, #756]	; (800af08 <EE_Init+0x30c>)
 800ac14:	428b      	cmp	r3, r1
 800ac16:	d100      	bne.n	800ac1a <EE_Init+0x1e>
 800ac18:	e074      	b.n	800ad04 <EE_Init+0x108>
 800ac1a:	49bc      	ldr	r1, [pc, #752]	; (800af0c <EE_Init+0x310>)
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	d011      	beq.n	800ac44 <EE_Init+0x48>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d100      	bne.n	800ac26 <EE_Init+0x2a>
 800ac24:	e109      	b.n	800ae3a <EE_Init+0x23e>
      FlashStatus = EE_Format();
 800ac26:	f7ff ff85 	bl	800ab34 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac2a:	48b9      	ldr	r0, [pc, #740]	; (800af10 <EE_Init+0x314>)
 800ac2c:	f005 fb88 	bl	8010340 <FLASH_WaitForLastOperation>
 800ac30:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800ac32:	2e00      	cmp	r6, #0
 800ac34:	d102      	bne.n	800ac3c <EE_Init+0x40>
	HAL_FLASH_Lock();
 800ac36:	f005 fb79 	bl	801032c <HAL_FLASH_Lock>
  return HAL_OK;
 800ac3a:	2600      	movs	r6, #0
}
 800ac3c:	0030      	movs	r0, r6
 800ac3e:	bc04      	pop	{r2}
 800ac40:	4690      	mov	r8, r2
 800ac42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d00d      	beq.n	800ac64 <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800ac48:	4baf      	ldr	r3, [pc, #700]	; (800af08 <EE_Init+0x30c>)
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d028      	beq.n	800aca0 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 800ac4e:	f7ff ff71 	bl	800ab34 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac52:	48af      	ldr	r0, [pc, #700]	; (800af10 <EE_Init+0x314>)
 800ac54:	f005 fb74 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d0ec      	beq.n	800ac36 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800ac5c:	4bad      	ldr	r3, [pc, #692]	; (800af14 <EE_Init+0x318>)
 800ac5e:	69de      	ldr	r6, [r3, #28]
 800ac60:	b2b6      	uxth	r6, r6
 800ac62:	e7eb      	b.n	800ac3c <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 800ac64:	48a6      	ldr	r0, [pc, #664]	; (800af00 <EE_Init+0x304>)
 800ac66:	f005 fc11 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac6a:	48a9      	ldr	r0, [pc, #676]	; (800af10 <EE_Init+0x314>)
 800ac6c:	f005 fb68 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d003      	beq.n	800ac7c <EE_Init+0x80>
          return pFlash.ErrorCode;
 800ac74:	4ba7      	ldr	r3, [pc, #668]	; (800af14 <EE_Init+0x318>)
 800ac76:	69de      	ldr	r6, [r3, #28]
 800ac78:	b2b6      	uxth	r6, r6
 800ac7a:	e7df      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ac7c:	48a6      	ldr	r0, [pc, #664]	; (800af18 <EE_Init+0x31c>)
 800ac7e:	f005 fc05 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac82:	48a3      	ldr	r0, [pc, #652]	; (800af10 <EE_Init+0x314>)
 800ac84:	f005 fb5c 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d105      	bne.n	800ac98 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ac8c:	4aa3      	ldr	r2, [pc, #652]	; (800af1c <EE_Init+0x320>)
 800ac8e:	6913      	ldr	r3, [r2, #16]
 800ac90:	2102      	movs	r1, #2
 800ac92:	438b      	bics	r3, r1
 800ac94:	6113      	str	r3, [r2, #16]
 800ac96:	e7ce      	b.n	800ac36 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ac98:	4b9e      	ldr	r3, [pc, #632]	; (800af14 <EE_Init+0x318>)
 800ac9a:	69de      	ldr	r6, [r3, #28]
 800ac9c:	b2b6      	uxth	r6, r6
 800ac9e:	e7cd      	b.n	800ac3c <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aca0:	4897      	ldr	r0, [pc, #604]	; (800af00 <EE_Init+0x304>)
 800aca2:	f005 fbf3 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aca6:	489a      	ldr	r0, [pc, #616]	; (800af10 <EE_Init+0x314>)
 800aca8:	f005 fb4a 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800acac:	2800      	cmp	r0, #0
 800acae:	d003      	beq.n	800acb8 <EE_Init+0xbc>
          return pFlash.ErrorCode;
 800acb0:	4b98      	ldr	r3, [pc, #608]	; (800af14 <EE_Init+0x318>)
 800acb2:	69de      	ldr	r6, [r3, #28]
 800acb4:	b2b6      	uxth	r6, r6
 800acb6:	e7c1      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800acb8:	4897      	ldr	r0, [pc, #604]	; (800af18 <EE_Init+0x31c>)
 800acba:	f005 fbe7 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800acbe:	4894      	ldr	r0, [pc, #592]	; (800af10 <EE_Init+0x314>)
 800acc0:	f005 fb3e 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d003      	beq.n	800acd0 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800acc8:	4b92      	ldr	r3, [pc, #584]	; (800af14 <EE_Init+0x318>)
 800acca:	69de      	ldr	r6, [r3, #28]
 800accc:	b2b6      	uxth	r6, r6
 800acce:	e7b5      	b.n	800ac3c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800acd0:	4a92      	ldr	r2, [pc, #584]	; (800af1c <EE_Init+0x320>)
 800acd2:	6913      	ldr	r3, [r2, #16]
 800acd4:	2102      	movs	r1, #2
 800acd6:	438b      	bics	r3, r1
 800acd8:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800acda:	2200      	movs	r2, #0
 800acdc:	2300      	movs	r3, #0
 800acde:	4989      	ldr	r1, [pc, #548]	; (800af04 <EE_Init+0x308>)
 800ace0:	2001      	movs	r0, #1
 800ace2:	f005 fb5b 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ace6:	488a      	ldr	r0, [pc, #552]	; (800af10 <EE_Init+0x314>)
 800ace8:	f005 fb2a 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800acec:	2800      	cmp	r0, #0
 800acee:	d105      	bne.n	800acfc <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800acf0:	4a8a      	ldr	r2, [pc, #552]	; (800af1c <EE_Init+0x320>)
 800acf2:	6913      	ldr	r3, [r2, #16]
 800acf4:	2101      	movs	r1, #1
 800acf6:	438b      	bics	r3, r1
 800acf8:	6113      	str	r3, [r2, #16]
 800acfa:	e79c      	b.n	800ac36 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800acfc:	4b85      	ldr	r3, [pc, #532]	; (800af14 <EE_Init+0x318>)
 800acfe:	69de      	ldr	r6, [r3, #28]
 800ad00:	b2b6      	uxth	r6, r6
 800ad02:	e79b      	b.n	800ac3c <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	d157      	bne.n	800adb8 <EE_Init+0x1bc>
 800ad08:	2401      	movs	r4, #1
  int16_t x = -1;
 800ad0a:	2701      	movs	r7, #1
 800ad0c:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800ad0e:	4d84      	ldr	r5, [pc, #528]	; (800af20 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ad10:	4b84      	ldr	r3, [pc, #528]	; (800af24 <EE_Init+0x328>)
 800ad12:	4698      	mov	r8, r3
 800ad14:	e005      	b.n	800ad22 <EE_Init+0x126>
            x = VarIdx;
 800ad16:	b227      	sxth	r7, r4
 800ad18:	e008      	b.n	800ad2c <EE_Init+0x130>
 800ad1a:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800ad1c:	4b82      	ldr	r3, [pc, #520]	; (800af28 <EE_Init+0x32c>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	d018      	beq.n	800ad54 <EE_Init+0x158>
 800ad22:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800ad24:	882b      	ldrh	r3, [r5, #0]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	42b3      	cmp	r3, r6
 800ad2a:	d0f4      	beq.n	800ad16 <EE_Init+0x11a>
          if (VarIdx != x)
 800ad2c:	42bc      	cmp	r4, r7
 800ad2e:	d0f4      	beq.n	800ad1a <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800ad30:	497c      	ldr	r1, [pc, #496]	; (800af24 <EE_Init+0x328>)
 800ad32:	0030      	movs	r0, r6
 800ad34:	f7ff fe26 	bl	800a984 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800ad38:	2801      	cmp	r0, #1
 800ad3a:	d0ee      	beq.n	800ad1a <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ad3c:	4643      	mov	r3, r8
 800ad3e:	8819      	ldrh	r1, [r3, #0]
 800ad40:	0030      	movs	r0, r6
 800ad42:	f7ff fdb3 	bl	800a8ac <EE_VerifyPageFullWriteVariable>
 800ad46:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad48:	4871      	ldr	r0, [pc, #452]	; (800af10 <EE_Init+0x314>)
 800ad4a:	f005 faf9 	bl	8010340 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d0e3      	beq.n	800ad1a <EE_Init+0x11e>
 800ad52:	e773      	b.n	800ac3c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800ad54:	2200      	movs	r2, #0
 800ad56:	2300      	movs	r3, #0
 800ad58:	4969      	ldr	r1, [pc, #420]	; (800af00 <EE_Init+0x304>)
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	f005 fb1e 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad60:	486b      	ldr	r0, [pc, #428]	; (800af10 <EE_Init+0x314>)
 800ad62:	f005 faed 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d003      	beq.n	800ad72 <EE_Init+0x176>
          return pFlash.ErrorCode;
 800ad6a:	4b6a      	ldr	r3, [pc, #424]	; (800af14 <EE_Init+0x318>)
 800ad6c:	69de      	ldr	r6, [r3, #28]
 800ad6e:	b2b6      	uxth	r6, r6
 800ad70:	e764      	b.n	800ac3c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad72:	4a6a      	ldr	r2, [pc, #424]	; (800af1c <EE_Init+0x320>)
 800ad74:	6913      	ldr	r3, [r2, #16]
 800ad76:	2101      	movs	r1, #1
 800ad78:	438b      	bics	r3, r1
 800ad7a:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad7c:	4861      	ldr	r0, [pc, #388]	; (800af04 <EE_Init+0x308>)
 800ad7e:	f005 fb85 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad82:	4863      	ldr	r0, [pc, #396]	; (800af10 <EE_Init+0x314>)
 800ad84:	f005 fadc 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d003      	beq.n	800ad94 <EE_Init+0x198>
          return pFlash.ErrorCode;
 800ad8c:	4b61      	ldr	r3, [pc, #388]	; (800af14 <EE_Init+0x318>)
 800ad8e:	69de      	ldr	r6, [r3, #28]
 800ad90:	b2b6      	uxth	r6, r6
 800ad92:	e753      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad94:	4865      	ldr	r0, [pc, #404]	; (800af2c <EE_Init+0x330>)
 800ad96:	f005 fb79 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad9a:	485d      	ldr	r0, [pc, #372]	; (800af10 <EE_Init+0x314>)
 800ad9c:	f005 fad0 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d105      	bne.n	800adb0 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ada4:	4a5d      	ldr	r2, [pc, #372]	; (800af1c <EE_Init+0x320>)
 800ada6:	6913      	ldr	r3, [r2, #16]
 800ada8:	2102      	movs	r1, #2
 800adaa:	438b      	bics	r3, r1
 800adac:	6113      	str	r3, [r2, #16]
 800adae:	e742      	b.n	800ac36 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800adb0:	4b58      	ldr	r3, [pc, #352]	; (800af14 <EE_Init+0x318>)
 800adb2:	69de      	ldr	r6, [r3, #28]
 800adb4:	b2b6      	uxth	r6, r6
 800adb6:	e741      	b.n	800ac3c <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 800adb8:	4b54      	ldr	r3, [pc, #336]	; (800af0c <EE_Init+0x310>)
 800adba:	429a      	cmp	r2, r3
 800adbc:	d00b      	beq.n	800add6 <EE_Init+0x1da>
        FlashStatus = EE_Format();
 800adbe:	f7ff feb9 	bl	800ab34 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800adc2:	4853      	ldr	r0, [pc, #332]	; (800af10 <EE_Init+0x314>)
 800adc4:	f005 fabc 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800adc8:	2800      	cmp	r0, #0
 800adca:	d100      	bne.n	800adce <EE_Init+0x1d2>
 800adcc:	e733      	b.n	800ac36 <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800adce:	4b51      	ldr	r3, [pc, #324]	; (800af14 <EE_Init+0x318>)
 800add0:	69de      	ldr	r6, [r3, #28]
 800add2:	b2b6      	uxth	r6, r6
 800add4:	e732      	b.n	800ac3c <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800add6:	484b      	ldr	r0, [pc, #300]	; (800af04 <EE_Init+0x308>)
 800add8:	f005 fb58 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800addc:	484c      	ldr	r0, [pc, #304]	; (800af10 <EE_Init+0x314>)
 800adde:	f005 faaf 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d003      	beq.n	800adee <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 800ade6:	4b4b      	ldr	r3, [pc, #300]	; (800af14 <EE_Init+0x318>)
 800ade8:	69de      	ldr	r6, [r3, #28]
 800adea:	b2b6      	uxth	r6, r6
 800adec:	e726      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800adee:	484f      	ldr	r0, [pc, #316]	; (800af2c <EE_Init+0x330>)
 800adf0:	f005 fb4c 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800adf4:	4846      	ldr	r0, [pc, #280]	; (800af10 <EE_Init+0x314>)
 800adf6:	f005 faa3 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d003      	beq.n	800ae06 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800adfe:	4b45      	ldr	r3, [pc, #276]	; (800af14 <EE_Init+0x318>)
 800ae00:	69de      	ldr	r6, [r3, #28]
 800ae02:	b2b6      	uxth	r6, r6
 800ae04:	e71a      	b.n	800ac3c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ae06:	4a45      	ldr	r2, [pc, #276]	; (800af1c <EE_Init+0x320>)
 800ae08:	6913      	ldr	r3, [r2, #16]
 800ae0a:	2102      	movs	r1, #2
 800ae0c:	438b      	bics	r3, r1
 800ae0e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800ae10:	2200      	movs	r2, #0
 800ae12:	2300      	movs	r3, #0
 800ae14:	493a      	ldr	r1, [pc, #232]	; (800af00 <EE_Init+0x304>)
 800ae16:	2001      	movs	r0, #1
 800ae18:	f005 fac0 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae1c:	483c      	ldr	r0, [pc, #240]	; (800af10 <EE_Init+0x314>)
 800ae1e:	f005 fa8f 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d003      	beq.n	800ae2e <EE_Init+0x232>
          return pFlash.ErrorCode;
 800ae26:	4b3b      	ldr	r3, [pc, #236]	; (800af14 <EE_Init+0x318>)
 800ae28:	69de      	ldr	r6, [r3, #28]
 800ae2a:	b2b6      	uxth	r6, r6
 800ae2c:	e706      	b.n	800ac3c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ae2e:	4a3b      	ldr	r2, [pc, #236]	; (800af1c <EE_Init+0x320>)
 800ae30:	6913      	ldr	r3, [r2, #16]
 800ae32:	2101      	movs	r1, #1
 800ae34:	438b      	bics	r3, r1
 800ae36:	6113      	str	r3, [r2, #16]
 800ae38:	e6fd      	b.n	800ac36 <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d009      	beq.n	800ae52 <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 800ae3e:	4b33      	ldr	r3, [pc, #204]	; (800af0c <EE_Init+0x310>)
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d010      	beq.n	800ae66 <EE_Init+0x26a>
 800ae44:	2401      	movs	r4, #1
  int16_t x = -1;
 800ae46:	2701      	movs	r7, #1
 800ae48:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800ae4a:	4d39      	ldr	r5, [pc, #228]	; (800af30 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ae4c:	4b35      	ldr	r3, [pc, #212]	; (800af24 <EE_Init+0x328>)
 800ae4e:	4698      	mov	r8, r3
 800ae50:	e02d      	b.n	800aeae <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 800ae52:	f7ff fe6f 	bl	800ab34 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae56:	482e      	ldr	r0, [pc, #184]	; (800af10 <EE_Init+0x314>)
 800ae58:	f005 fa72 	bl	8010340 <FLASH_WaitForLastOperation>
 800ae5c:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d100      	bne.n	800ae64 <EE_Init+0x268>
 800ae62:	e6e8      	b.n	800ac36 <EE_Init+0x3a>
 800ae64:	e6ea      	b.n	800ac3c <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae66:	4827      	ldr	r0, [pc, #156]	; (800af04 <EE_Init+0x308>)
 800ae68:	f005 fb10 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae6c:	4828      	ldr	r0, [pc, #160]	; (800af10 <EE_Init+0x314>)
 800ae6e:	f005 fa67 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d003      	beq.n	800ae7e <EE_Init+0x282>
          return pFlash.ErrorCode;
 800ae76:	4b27      	ldr	r3, [pc, #156]	; (800af14 <EE_Init+0x318>)
 800ae78:	69de      	ldr	r6, [r3, #28]
 800ae7a:	b2b6      	uxth	r6, r6
 800ae7c:	e6de      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ae7e:	482b      	ldr	r0, [pc, #172]	; (800af2c <EE_Init+0x330>)
 800ae80:	f005 fb04 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae84:	4822      	ldr	r0, [pc, #136]	; (800af10 <EE_Init+0x314>)
 800ae86:	f005 fa5b 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d105      	bne.n	800ae9a <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ae8e:	4a23      	ldr	r2, [pc, #140]	; (800af1c <EE_Init+0x320>)
 800ae90:	6913      	ldr	r3, [r2, #16]
 800ae92:	2102      	movs	r1, #2
 800ae94:	438b      	bics	r3, r1
 800ae96:	6113      	str	r3, [r2, #16]
 800ae98:	e6cd      	b.n	800ac36 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ae9a:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <EE_Init+0x318>)
 800ae9c:	69de      	ldr	r6, [r3, #28]
 800ae9e:	b2b6      	uxth	r6, r6
 800aea0:	e6cc      	b.n	800ac3c <EE_Init+0x40>
            x = VarIdx;
 800aea2:	b227      	sxth	r7, r4
 800aea4:	e008      	b.n	800aeb8 <EE_Init+0x2bc>
 800aea6:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800aea8:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <EE_Init+0x32c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d018      	beq.n	800aee0 <EE_Init+0x2e4>
 800aeae:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800aeb0:	882b      	ldrh	r3, [r5, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	42b3      	cmp	r3, r6
 800aeb6:	d0f4      	beq.n	800aea2 <EE_Init+0x2a6>
          if (VarIdx != x)
 800aeb8:	42bc      	cmp	r4, r7
 800aeba:	d0f4      	beq.n	800aea6 <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800aebc:	4919      	ldr	r1, [pc, #100]	; (800af24 <EE_Init+0x328>)
 800aebe:	0030      	movs	r0, r6
 800aec0:	f7ff fd60 	bl	800a984 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800aec4:	2801      	cmp	r0, #1
 800aec6:	d0ee      	beq.n	800aea6 <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aec8:	4643      	mov	r3, r8
 800aeca:	8819      	ldrh	r1, [r3, #0]
 800aecc:	0030      	movs	r0, r6
 800aece:	f7ff fced 	bl	800a8ac <EE_VerifyPageFullWriteVariable>
 800aed2:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aed4:	480e      	ldr	r0, [pc, #56]	; (800af10 <EE_Init+0x314>)
 800aed6:	f005 fa33 	bl	8010340 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d0e3      	beq.n	800aea6 <EE_Init+0x2aa>
 800aede:	e6ad      	b.n	800ac3c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800aee0:	2200      	movs	r2, #0
 800aee2:	2300      	movs	r3, #0
 800aee4:	4907      	ldr	r1, [pc, #28]	; (800af04 <EE_Init+0x308>)
 800aee6:	2001      	movs	r0, #1
 800aee8:	f005 fa58 	bl	801039c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aeec:	4808      	ldr	r0, [pc, #32]	; (800af10 <EE_Init+0x314>)
 800aeee:	f005 fa27 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d01e      	beq.n	800af34 <EE_Init+0x338>
          return pFlash.ErrorCode;
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <EE_Init+0x318>)
 800aef8:	69de      	ldr	r6, [r3, #28]
 800aefa:	b2b6      	uxth	r6, r6
 800aefc:	e69e      	b.n	800ac3c <EE_Init+0x40>
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	0801e000 	.word	0x0801e000
 800af04:	0801f000 	.word	0x0801f000
 800af08:	0000eeee 	.word	0x0000eeee
 800af0c:	0000ffff 	.word	0x0000ffff
 800af10:	0000c350 	.word	0x0000c350
 800af14:	20006c88 	.word	0x20006c88
 800af18:	0801e800 	.word	0x0801e800
 800af1c:	40022000 	.word	0x40022000
 800af20:	0801e006 	.word	0x0801e006
 800af24:	200015f8 	.word	0x200015f8
 800af28:	00000401 	.word	0x00000401
 800af2c:	0801f800 	.word	0x0801f800
 800af30:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800af34:	4a11      	ldr	r2, [pc, #68]	; (800af7c <EE_Init+0x380>)
 800af36:	6913      	ldr	r3, [r2, #16]
 800af38:	2101      	movs	r1, #1
 800af3a:	438b      	bics	r3, r1
 800af3c:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800af3e:	4810      	ldr	r0, [pc, #64]	; (800af80 <EE_Init+0x384>)
 800af40:	f005 faa4 	bl	801048c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af44:	480f      	ldr	r0, [pc, #60]	; (800af84 <EE_Init+0x388>)
 800af46:	f005 f9fb 	bl	8010340 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d003      	beq.n	800af56 <EE_Init+0x35a>
          return pFlash.ErrorCode;
 800af4e:	4b0e      	ldr	r3, [pc, #56]	; (800af88 <EE_Init+0x38c>)
 800af50:	69de      	ldr	r6, [r3, #28]
 800af52:	b2b6      	uxth	r6, r6
 800af54:	e672      	b.n	800ac3c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800af56:	480d      	ldr	r0, [pc, #52]	; (800af8c <EE_Init+0x390>)
 800af58:	f005 fa98 	bl	801048c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af5c:	4809      	ldr	r0, [pc, #36]	; (800af84 <EE_Init+0x388>)
 800af5e:	f005 f9ef 	bl	8010340 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800af62:	2800      	cmp	r0, #0
 800af64:	d105      	bne.n	800af72 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800af66:	4a05      	ldr	r2, [pc, #20]	; (800af7c <EE_Init+0x380>)
 800af68:	6913      	ldr	r3, [r2, #16]
 800af6a:	2102      	movs	r1, #2
 800af6c:	438b      	bics	r3, r1
 800af6e:	6113      	str	r3, [r2, #16]
 800af70:	e661      	b.n	800ac36 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <EE_Init+0x38c>)
 800af74:	69de      	ldr	r6, [r3, #28]
 800af76:	b2b6      	uxth	r6, r6
 800af78:	e660      	b.n	800ac3c <EE_Init+0x40>
 800af7a:	46c0      	nop			; (mov r8, r8)
 800af7c:	40022000 	.word	0x40022000
 800af80:	0801e000 	.word	0x0801e000
 800af84:	0000c350 	.word	0x0000c350
 800af88:	20006c88 	.word	0x20006c88
 800af8c:	0801e800 	.word	0x0801e800

0800af90 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 800af90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af92:	46c6      	mov	lr, r8
 800af94:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 800af96:	4c29      	ldr	r4, [pc, #164]	; (800b03c <StartDefaultTask+0xac>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 800af98:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 800af9a:	0027      	movs	r7, r4
 800af9c:	e01f      	b.n	800afde <StartDefaultTask+0x4e>
				RTOS_IND_blink(200);
 800af9e:	2680      	movs	r6, #128	; 0x80
 800afa0:	01f6      	lsls	r6, r6, #7
 800afa2:	4d27      	ldr	r5, [pc, #156]	; (800b040 <StartDefaultTask+0xb0>)
 800afa4:	2201      	movs	r2, #1
 800afa6:	0031      	movs	r1, r6
 800afa8:	0028      	movs	r0, r5
 800afaa:	f005 fbc7 	bl	801073c <HAL_GPIO_WritePin>
 800afae:	20c8      	movs	r0, #200	; 0xc8
 800afb0:	f002 fac1 	bl	800d536 <osDelay>
 800afb4:	2200      	movs	r2, #0
 800afb6:	0031      	movs	r1, r6
 800afb8:	0028      	movs	r0, r5
 800afba:	f005 fbbf 	bl	801073c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800afbe:	4b1f      	ldr	r3, [pc, #124]	; (800b03c <StartDefaultTask+0xac>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 800afc4:	f7fa fa02 	bl	80053cc <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 800afc8:	f7ff fb40 	bl	800a64c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 800afcc:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <StartDefaultTask+0xb4>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <StartDefaultTask+0x4a>
 800afd4:	4b1c      	ldr	r3, [pc, #112]	; (800b048 <StartDefaultTask+0xb8>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 800afda:	f004 f965 	bl	800f2a8 <vPortYield>
		switch (indMode)
 800afde:	7823      	ldrb	r3, [r4, #0]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d004      	beq.n	800afee <StartDefaultTask+0x5e>
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d016      	beq.n	800b016 <StartDefaultTask+0x86>
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d1eb      	bne.n	800afc4 <StartDefaultTask+0x34>
 800afec:	e7d7      	b.n	800af9e <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 800afee:	2680      	movs	r6, #128	; 0x80
 800aff0:	01f6      	lsls	r6, r6, #7
 800aff2:	4d13      	ldr	r5, [pc, #76]	; (800b040 <StartDefaultTask+0xb0>)
 800aff4:	2201      	movs	r2, #1
 800aff6:	0031      	movs	r1, r6
 800aff8:	0028      	movs	r0, r5
 800affa:	f005 fb9f 	bl	801073c <HAL_GPIO_WritePin>
 800affe:	2064      	movs	r0, #100	; 0x64
 800b000:	f002 fa99 	bl	800d536 <osDelay>
 800b004:	2200      	movs	r2, #0
 800b006:	0031      	movs	r1, r6
 800b008:	0028      	movs	r0, r5
 800b00a:	f005 fb97 	bl	801073c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800b00e:	2300      	movs	r3, #0
 800b010:	4642      	mov	r2, r8
 800b012:	7013      	strb	r3, [r2, #0]
				break;
 800b014:	e7d6      	b.n	800afc4 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 800b016:	2680      	movs	r6, #128	; 0x80
 800b018:	01f6      	lsls	r6, r6, #7
 800b01a:	4d09      	ldr	r5, [pc, #36]	; (800b040 <StartDefaultTask+0xb0>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	0031      	movs	r1, r6
 800b020:	0028      	movs	r0, r5
 800b022:	f005 fb8b 	bl	801073c <HAL_GPIO_WritePin>
 800b026:	201e      	movs	r0, #30
 800b028:	f002 fa85 	bl	800d536 <osDelay>
 800b02c:	2200      	movs	r2, #0
 800b02e:	0031      	movs	r1, r6
 800b030:	0028      	movs	r0, r5
 800b032:	f005 fb83 	bl	801073c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800b036:	2300      	movs	r3, #0
 800b038:	703b      	strb	r3, [r7, #0]
				break;
 800b03a:	e7c3      	b.n	800afc4 <StartDefaultTask+0x34>
 800b03c:	20000f3a 	.word	0x20000f3a
 800b040:	48000800 	.word	0x48000800
 800b044:	200011c9 	.word	0x200011c9
 800b048:	20000e9e 	.word	0x20000e9e

0800b04c <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04e:	46de      	mov	lr, fp
 800b050:	4657      	mov	r7, sl
 800b052:	464e      	mov	r6, r9
 800b054:	4645      	mov	r5, r8
 800b056:	b5e0      	push	{r5, r6, r7, lr}
 800b058:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	469b      	mov	fp, r3

						/* A.5.1. Copy the packet to message buffer */	
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
						} else {				// Message wraps around
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800b05e:	4bd6      	ldr	r3, [pc, #856]	; (800b3b8 <BackEndTask+0x36c>)
 800b060:	3b70      	subs	r3, #112	; 0x70
 800b062:	9306      	str	r3, [sp, #24]
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800b064:	4bd4      	ldr	r3, [pc, #848]	; (800b3b8 <BackEndTask+0x36c>)
 800b066:	3b70      	subs	r3, #112	; 0x70
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	46d9      	mov	r9, fp
 800b06c:	e1c4      	b.n	800b3f8 <BackEndTask+0x3ac>
 800b06e:	1ebb      	subs	r3, r7, #2
 800b070:	001a      	movs	r2, r3
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	4bd1      	ldr	r3, [pc, #836]	; (800b3bc <BackEndTask+0x370>)
 800b076:	4692      	mov	sl, r2
 800b078:	449a      	add	sl, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b07a:	4653      	mov	r3, sl
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	2a3f      	cmp	r2, #63	; 0x3f
 800b080:	dc17      	bgt.n	800b0b2 <BackEndTask+0x66>
							if (BOS.disableCLI == false)
 800b082:	4bcf      	ldr	r3, [pc, #828]	; (800b3c0 <BackEndTask+0x374>)
 800b084:	7edb      	ldrb	r3, [r3, #27]
 800b086:	469c      	mov	ip, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b088:	0013      	movs	r3, r2
							if (BOS.disableCLI == false)
 800b08a:	2100      	movs	r1, #0
 800b08c:	e004      	b.n	800b098 <BackEndTask+0x4c>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b08e:	2b3f      	cmp	r3, #63	; 0x3f
 800b090:	d023      	beq.n	800b0da <BackEndTask+0x8e>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b092:	3301      	adds	r3, #1
 800b094:	2b40      	cmp	r3, #64	; 0x40
 800b096:	d009      	beq.n	800b0ac <BackEndTask+0x60>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 800b098:	2b3e      	cmp	r3, #62	; 0x3e
 800b09a:	dcf8      	bgt.n	800b08e <BackEndTask+0x42>
 800b09c:	5cf0      	ldrb	r0, [r6, r3]
 800b09e:	2848      	cmp	r0, #72	; 0x48
 800b0a0:	d1f5      	bne.n	800b08e <BackEndTask+0x42>
 800b0a2:	18f0      	adds	r0, r6, r3
 800b0a4:	7840      	ldrb	r0, [r0, #1]
 800b0a6:	285a      	cmp	r0, #90	; 0x5a
 800b0a8:	d1f1      	bne.n	800b08e <BackEndTask+0x42>
 800b0aa:	4699      	mov	r9, r3
				if (emptyBuffer) {	
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d000      	beq.n	800b0b2 <BackEndTask+0x66>
 800b0b0:	e167      	b.n	800b382 <BackEndTask+0x336>
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	2b3d      	cmp	r3, #61	; 0x3d
 800b0b6:	d051      	beq.n	800b15c <BackEndTask+0x110>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 800b0b8:	2b3e      	cmp	r3, #62	; 0x3e
 800b0ba:	d100      	bne.n	800b0be <BackEndTask+0x72>
 800b0bc:	e0aa      	b.n	800b214 <BackEndTask+0x1c8>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 800b0be:	2b3f      	cmp	r3, #63	; 0x3f
 800b0c0:	d100      	bne.n	800b0c4 <BackEndTask+0x78>
 800b0c2:	e0ac      	b.n	800b21e <BackEndTask+0x1d2>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	019a      	lsls	r2, r3, #6
 800b0c8:	4bbe      	ldr	r3, [pc, #760]	; (800b3c4 <BackEndTask+0x378>)
 800b0ca:	189b      	adds	r3, r3, r2
 800b0cc:	444b      	add	r3, r9
 800b0ce:	789b      	ldrb	r3, [r3, #2]
 800b0d0:	9301      	str	r3, [sp, #4]
					parseStart = packetStart+3;
 800b0d2:	464b      	mov	r3, r9
 800b0d4:	3303      	adds	r3, #3
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	e046      	b.n	800b168 <BackEndTask+0x11c>
 800b0da:	9601      	str	r6, [sp, #4]
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b0dc:	203f      	movs	r0, #63	; 0x3f
 800b0de:	4680      	mov	r8, r0
 800b0e0:	44b0      	add	r8, r6
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	7800      	ldrb	r0, [r0, #0]
 800b0e6:	2848      	cmp	r0, #72	; 0x48
 800b0e8:	d005      	beq.n	800b0f6 <BackEndTask+0xaa>
							if (BOS.disableCLI == false)
 800b0ea:	4663      	mov	r3, ip
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d000      	beq.n	800b0f2 <BackEndTask+0xa6>
 800b0f0:	e147      	b.n	800b382 <BackEndTask+0x336>
 800b0f2:	9801      	ldr	r0, [sp, #4]
 800b0f4:	e00d      	b.n	800b112 <BackEndTask+0xc6>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b0f6:	7830      	ldrb	r0, [r6, #0]
 800b0f8:	285a      	cmp	r0, #90	; 0x5a
 800b0fa:	d1f6      	bne.n	800b0ea <BackEndTask+0x9e>
				if (emptyBuffer) {	
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d100      	bne.n	800b102 <BackEndTask+0xb6>
 800b100:	e08d      	b.n	800b21e <BackEndTask+0x1d2>
						packetStart = MSG_RX_BUF_SIZE-1;	
 800b102:	4699      	mov	r9, r3
 800b104:	e13d      	b.n	800b382 <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b106:	2a3f      	cmp	r2, #63	; 0x3f
 800b108:	d023      	beq.n	800b152 <BackEndTask+0x106>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800b10a:	3201      	adds	r2, #1
 800b10c:	2a40      	cmp	r2, #64	; 0x40
 800b10e:	d100      	bne.n	800b112 <BackEndTask+0xc6>
 800b110:	e137      	b.n	800b382 <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b112:	5c83      	ldrb	r3, [r0, r2]
 800b114:	2b0d      	cmp	r3, #13
 800b116:	d1f8      	bne.n	800b10a <BackEndTask+0xbe>
 800b118:	2a3e      	cmp	r2, #62	; 0x3e
 800b11a:	dcf4      	bgt.n	800b106 <BackEndTask+0xba>
 800b11c:	1881      	adds	r1, r0, r2
 800b11e:	784b      	ldrb	r3, [r1, #1]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1f0      	bne.n	800b106 <BackEndTask+0xba>
										UARTRxBuf[port-1][j] = 0;
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	0199      	lsls	r1, r3, #6
 800b128:	4ba6      	ldr	r3, [pc, #664]	; (800b3c4 <BackEndTask+0x378>)
 800b12a:	185b      	adds	r3, r3, r1
 800b12c:	2100      	movs	r1, #0
 800b12e:	5499      	strb	r1, [r3, r2]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 800b130:	3201      	adds	r2, #1
 800b132:	4653      	mov	r3, sl
 800b134:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 800b136:	4ba4      	ldr	r3, [pc, #656]	; (800b3c8 <BackEndTask+0x37c>)
 800b138:	781a      	ldrb	r2, [r3, #0]
 800b13a:	48a4      	ldr	r0, [pc, #656]	; (800b3cc <BackEndTask+0x380>)
 800b13c:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 800b13e:	2203      	movs	r2, #3
 800b140:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 800b142:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 800b144:	4ba2      	ldr	r3, [pc, #648]	; (800b3d0 <BackEndTask+0x384>)
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	3a01      	subs	r2, #1
 800b14c:	f003 fe12 	bl	800ed74 <xTaskGenericNotify>
										break;
 800b150:	e117      	b.n	800b382 <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b152:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 800b154:	2101      	movs	r1, #1
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1a8      	bne.n	800b0ac <BackEndTask+0x60>
 800b15a:	e7e3      	b.n	800b124 <BackEndTask+0xd8>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 800b15c:	0033      	movs	r3, r6
 800b15e:	333f      	adds	r3, #63	; 0x3f
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	9301      	str	r3, [sp, #4]
					parseStart = 0;				
 800b164:	2300      	movs	r3, #0
 800b166:	9304      	str	r3, [sp, #16]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	3303      	adds	r3, #3
 800b16c:	9302      	str	r3, [sp, #8]
 800b16e:	444b      	add	r3, r9
 800b170:	4698      	mov	r8, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 800b172:	2b3f      	cmp	r3, #63	; 0x3f
 800b174:	dd03      	ble.n	800b17e <BackEndTask+0x132>
					packetEnd -= MSG_RX_BUF_SIZE;
 800b176:	2340      	movs	r3, #64	; 0x40
 800b178:	425b      	negs	r3, r3
 800b17a:	469c      	mov	ip, r3
 800b17c:	44e0      	add	r8, ip
				if (packetStart != packetEnd)										// Non-empty packet
 800b17e:	45c1      	cmp	r9, r8
 800b180:	d100      	bne.n	800b184 <BackEndTask+0x138>
 800b182:	e0e1      	b.n	800b348 <BackEndTask+0x2fc>
					Delay_ms(1);
 800b184:	2001      	movs	r0, #1
 800b186:	f004 fa0d 	bl	800f5a4 <HAL_Delay>
					if (packetStart < packetEnd) {
 800b18a:	45c1      	cmp	r9, r8
 800b18c:	da4e      	bge.n	800b22c <BackEndTask+0x1e0>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800b18e:	4b91      	ldr	r3, [pc, #580]	; (800b3d4 <BackEndTask+0x388>)
 800b190:	18f9      	adds	r1, r7, r3
 800b192:	0189      	lsls	r1, r1, #6
 800b194:	4449      	add	r1, r9
 800b196:	4b8b      	ldr	r3, [pc, #556]	; (800b3c4 <BackEndTask+0x378>)
 800b198:	18c9      	adds	r1, r1, r3
 800b19a:	9a02      	ldr	r2, [sp, #8]
 800b19c:	488e      	ldr	r0, [pc, #568]	; (800b3d8 <BackEndTask+0x38c>)
 800b19e:	f007 fe26 	bl	8012dee <memcpy>
					crc8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (packetLength + 3)/4);
 800b1a2:	9b02      	ldr	r3, [sp, #8]
 800b1a4:	17d9      	asrs	r1, r3, #31
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	4011      	ands	r1, r2
 800b1aa:	469c      	mov	ip, r3
 800b1ac:	4461      	add	r1, ip
 800b1ae:	1088      	asrs	r0, r1, #2
 800b1b0:	9005      	str	r0, [sp, #20]
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	4988      	ldr	r1, [pc, #544]	; (800b3d8 <BackEndTask+0x38c>)
 800b1b6:	4889      	ldr	r0, [pc, #548]	; (800b3dc <BackEndTask+0x390>)
 800b1b8:	f004 fb37 	bl	800f82a <HAL_CRC_Calculate>
 800b1bc:	4b88      	ldr	r3, [pc, #544]	; (800b3e0 <BackEndTask+0x394>)
 800b1be:	7018      	strb	r0, [r3, #0]
					if ((packetLength + 3)%4 !=0)		// Non-word-aligned packet
 800b1c0:	2103      	movs	r1, #3
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	4219      	tst	r1, r3
 800b1c6:	d149      	bne.n	800b25c <BackEndTask+0x210>
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800b1c8:	2238      	movs	r2, #56	; 0x38
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4882      	ldr	r0, [pc, #520]	; (800b3d8 <BackEndTask+0x38c>)
 800b1ce:	f007 fe17 	bl	8012e00 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	019a      	lsls	r2, r3, #6
 800b1d6:	4b7b      	ldr	r3, [pc, #492]	; (800b3c4 <BackEndTask+0x378>)
 800b1d8:	189b      	adds	r3, r3, r2
 800b1da:	4642      	mov	r2, r8
 800b1dc:	5c9a      	ldrb	r2, [r3, r2]
 800b1de:	4b80      	ldr	r3, [pc, #512]	; (800b3e0 <BackEndTask+0x394>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d045      	beq.n	800b272 <BackEndTask+0x226>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 800b1e6:	45c1      	cmp	r9, r8
 800b1e8:	db00      	blt.n	800b1ec <BackEndTask+0x1a0>
 800b1ea:	e0ad      	b.n	800b348 <BackEndTask+0x2fc>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	3204      	adds	r2, #4
 800b1f0:	4b78      	ldr	r3, [pc, #480]	; (800b3d4 <BackEndTask+0x388>)
 800b1f2:	18f8      	adds	r0, r7, r3
 800b1f4:	0180      	lsls	r0, r0, #6
 800b1f6:	4448      	add	r0, r9
 800b1f8:	4b72      	ldr	r3, [pc, #456]	; (800b3c4 <BackEndTask+0x378>)
 800b1fa:	18c0      	adds	r0, r0, r3
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f007 fdff 	bl	8012e00 <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800b202:	4643      	mov	r3, r8
 800b204:	3301      	adds	r3, #1
 800b206:	4652      	mov	r2, sl
 800b208:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 800b20a:	4a76      	ldr	r2, [pc, #472]	; (800b3e4 <BackEndTask+0x398>)
 800b20c:	8813      	ldrh	r3, [r2, #0]
 800b20e:	3301      	adds	r3, #1
 800b210:	8013      	strh	r3, [r2, #0]
 800b212:	e0c2      	b.n	800b39a <BackEndTask+0x34e>
					packetLength = UARTRxBuf[port-1][0];
 800b214:	7833      	ldrb	r3, [r6, #0]
 800b216:	9301      	str	r3, [sp, #4]
					parseStart = 1;
 800b218:	2301      	movs	r3, #1
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	e7a4      	b.n	800b168 <BackEndTask+0x11c>
					packetLength = UARTRxBuf[port-1][1];
 800b21e:	7873      	ldrb	r3, [r6, #1]
 800b220:	9301      	str	r3, [sp, #4]
 800b222:	233f      	movs	r3, #63	; 0x3f
 800b224:	4699      	mov	r9, r3
					parseStart = 2;
 800b226:	3b3d      	subs	r3, #61	; 0x3d
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	e79d      	b.n	800b168 <BackEndTask+0x11c>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800b22c:	2240      	movs	r2, #64	; 0x40
 800b22e:	464b      	mov	r3, r9
 800b230:	1ad2      	subs	r2, r2, r3
 800b232:	4b68      	ldr	r3, [pc, #416]	; (800b3d4 <BackEndTask+0x388>)
 800b234:	18f9      	adds	r1, r7, r3
 800b236:	0189      	lsls	r1, r1, #6
 800b238:	4449      	add	r1, r9
 800b23a:	4b62      	ldr	r3, [pc, #392]	; (800b3c4 <BackEndTask+0x378>)
 800b23c:	18c9      	adds	r1, r1, r3
 800b23e:	9205      	str	r2, [sp, #20]
 800b240:	4865      	ldr	r0, [pc, #404]	; (800b3d8 <BackEndTask+0x38c>)
 800b242:	f007 fdd4 	bl	8012dee <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 800b246:	4964      	ldr	r1, [pc, #400]	; (800b3d8 <BackEndTask+0x38c>)
 800b248:	9b05      	ldr	r3, [sp, #20]
 800b24a:	469c      	mov	ip, r3
 800b24c:	4461      	add	r1, ip
 800b24e:	0008      	movs	r0, r1
 800b250:	9a02      	ldr	r2, [sp, #8]
 800b252:	1ad2      	subs	r2, r2, r3
 800b254:	0031      	movs	r1, r6
 800b256:	f007 fdca 	bl	8012dee <memcpy>
 800b25a:	e7a2      	b.n	800b1a2 <BackEndTask+0x156>
					crc8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((packetLength + 3)/4)*4], 1);
 800b25c:	9b05      	ldr	r3, [sp, #20]
 800b25e:	0099      	lsls	r1, r3, #2
 800b260:	4b5d      	ldr	r3, [pc, #372]	; (800b3d8 <BackEndTask+0x38c>)
 800b262:	18c9      	adds	r1, r1, r3
 800b264:	2201      	movs	r2, #1
 800b266:	485d      	ldr	r0, [pc, #372]	; (800b3dc <BackEndTask+0x390>)
 800b268:	f004 fab3 	bl	800f7d2 <HAL_CRC_Accumulate>
 800b26c:	4b5c      	ldr	r3, [pc, #368]	; (800b3e0 <BackEndTask+0x394>)
 800b26e:	7018      	strb	r0, [r3, #0]
 800b270:	e7aa      	b.n	800b1c8 <BackEndTask+0x17c>
						portStatus[port] = MSG;
 800b272:	2301      	movs	r3, #1
 800b274:	7023      	strb	r3, [r4, #0]
						messageLength[port-1] = packetLength;	
 800b276:	1ebb      	subs	r3, r7, #2
 800b278:	4a5b      	ldr	r2, [pc, #364]	; (800b3e8 <BackEndTask+0x39c>)
 800b27a:	9901      	ldr	r1, [sp, #4]
 800b27c:	54d1      	strb	r1, [r2, r3]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800b27e:	233f      	movs	r3, #63	; 0x3f
 800b280:	9c04      	ldr	r4, [sp, #16]
 800b282:	1b1b      	subs	r3, r3, r4
 800b284:	000a      	movs	r2, r1
 800b286:	428b      	cmp	r3, r1
 800b288:	db27      	blt.n	800b2da <BackEndTask+0x28e>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800b28a:	00f8      	lsls	r0, r7, #3
 800b28c:	1bc0      	subs	r0, r0, r7
 800b28e:	00c0      	lsls	r0, r0, #3
 800b290:	9b07      	ldr	r3, [sp, #28]
 800b292:	469c      	mov	ip, r3
 800b294:	4460      	add	r0, ip
 800b296:	4b4f      	ldr	r3, [pc, #316]	; (800b3d4 <BackEndTask+0x388>)
 800b298:	18f9      	adds	r1, r7, r3
 800b29a:	0189      	lsls	r1, r1, #6
 800b29c:	46a4      	mov	ip, r4
 800b29e:	4461      	add	r1, ip
 800b2a0:	4b48      	ldr	r3, [pc, #288]	; (800b3c4 <BackEndTask+0x378>)
 800b2a2:	18c9      	adds	r1, r1, r3
 800b2a4:	f007 fda3 	bl	8012dee <memcpy>
						if (packetStart < packetEnd) {
 800b2a8:	45c1      	cmp	r9, r8
 800b2aa:	da38      	bge.n	800b31e <BackEndTask+0x2d2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800b2ac:	9a01      	ldr	r2, [sp, #4]
 800b2ae:	3204      	adds	r2, #4
 800b2b0:	4b48      	ldr	r3, [pc, #288]	; (800b3d4 <BackEndTask+0x388>)
 800b2b2:	18f8      	adds	r0, r7, r3
 800b2b4:	0180      	lsls	r0, r0, #6
 800b2b6:	4448      	add	r0, r9
 800b2b8:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <BackEndTask+0x378>)
 800b2ba:	18c0      	adds	r0, r0, r3
 800b2bc:	2100      	movs	r1, #0
 800b2be:	f007 fd9f 	bl	8012e00 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800b2c2:	4643      	mov	r3, r8
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800b2ca:	4a48      	ldr	r2, [pc, #288]	; (800b3ec <BackEndTask+0x3a0>)
 800b2cc:	8813      	ldrh	r3, [r2, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 800b2d2:	0028      	movs	r0, r5
 800b2d4:	f7f8 fa94 	bl	8003800 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 800b2d8:	e053      	b.n	800b382 <BackEndTask+0x336>
 800b2da:	00fb      	lsls	r3, r7, #3
 800b2dc:	1bdb      	subs	r3, r3, r7
 800b2de:	00db      	lsls	r3, r3, #3
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800b2e0:	2440      	movs	r4, #64	; 0x40
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	1aa4      	subs	r4, r4, r2
 800b2e6:	9906      	ldr	r1, [sp, #24]
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	469c      	mov	ip, r3
 800b2ec:	4461      	add	r1, ip
 800b2ee:	0008      	movs	r0, r1
 800b2f0:	4938      	ldr	r1, [pc, #224]	; (800b3d4 <BackEndTask+0x388>)
 800b2f2:	1879      	adds	r1, r7, r1
 800b2f4:	0189      	lsls	r1, r1, #6
 800b2f6:	9a04      	ldr	r2, [sp, #16]
 800b2f8:	4694      	mov	ip, r2
 800b2fa:	4461      	add	r1, ip
 800b2fc:	4b31      	ldr	r3, [pc, #196]	; (800b3c4 <BackEndTask+0x378>)
 800b2fe:	18c9      	adds	r1, r1, r3
 800b300:	0022      	movs	r2, r4
 800b302:	f007 fd74 	bl	8012dee <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 800b306:	9802      	ldr	r0, [sp, #8]
 800b308:	3870      	subs	r0, #112	; 0x70
 800b30a:	1900      	adds	r0, r0, r4
 800b30c:	4b2a      	ldr	r3, [pc, #168]	; (800b3b8 <BackEndTask+0x36c>)
 800b30e:	469c      	mov	ip, r3
 800b310:	4460      	add	r0, ip
 800b312:	9b01      	ldr	r3, [sp, #4]
 800b314:	1b1a      	subs	r2, r3, r4
 800b316:	0031      	movs	r1, r6
 800b318:	f007 fd69 	bl	8012dee <memcpy>
 800b31c:	e7c4      	b.n	800b2a8 <BackEndTask+0x25c>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b31e:	2440      	movs	r4, #64	; 0x40
 800b320:	464b      	mov	r3, r9
 800b322:	1ae4      	subs	r4, r4, r3
 800b324:	4b2b      	ldr	r3, [pc, #172]	; (800b3d4 <BackEndTask+0x388>)
 800b326:	18f8      	adds	r0, r7, r3
 800b328:	0180      	lsls	r0, r0, #6
 800b32a:	4448      	add	r0, r9
 800b32c:	4b25      	ldr	r3, [pc, #148]	; (800b3c4 <BackEndTask+0x378>)
 800b32e:	18c0      	adds	r0, r0, r3
 800b330:	0022      	movs	r2, r4
 800b332:	2100      	movs	r1, #0
 800b334:	f007 fd64 	bl	8012e00 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b338:	9a01      	ldr	r2, [sp, #4]
 800b33a:	3204      	adds	r2, #4
 800b33c:	1b12      	subs	r2, r2, r4
 800b33e:	2100      	movs	r1, #0
 800b340:	0030      	movs	r0, r6
 800b342:	f007 fd5d 	bl	8012e00 <memset>
 800b346:	e7bc      	b.n	800b2c2 <BackEndTask+0x276>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b348:	2240      	movs	r2, #64	; 0x40
 800b34a:	464b      	mov	r3, r9
 800b34c:	1ad2      	subs	r2, r2, r3
 800b34e:	4b21      	ldr	r3, [pc, #132]	; (800b3d4 <BackEndTask+0x388>)
 800b350:	18f8      	adds	r0, r7, r3
 800b352:	0180      	lsls	r0, r0, #6
 800b354:	4448      	add	r0, r9
 800b356:	4b1b      	ldr	r3, [pc, #108]	; (800b3c4 <BackEndTask+0x378>)
 800b358:	18c0      	adds	r0, r0, r3
 800b35a:	9202      	str	r2, [sp, #8]
 800b35c:	2100      	movs	r1, #0
 800b35e:	f007 fd4f 	bl	8012e00 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b362:	9a01      	ldr	r2, [sp, #4]
 800b364:	3204      	adds	r2, #4
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	1ad2      	subs	r2, r2, r3
 800b36a:	2100      	movs	r1, #0
 800b36c:	0030      	movs	r0, r6
 800b36e:	f007 fd47 	bl	8012e00 <memset>
 800b372:	e746      	b.n	800b202 <BackEndTask+0x1b6>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 800b374:	0028      	movs	r0, r5
 800b376:	f7f9 fa5f 	bl	8004838 <GetUart>
 800b37a:	2240      	movs	r2, #64	; 0x40
 800b37c:	0031      	movs	r1, r6
 800b37e:	f006 fdff 	bl	8011f80 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 800b382:	3501      	adds	r5, #1
 800b384:	b2ed      	uxtb	r5, r5
 800b386:	3701      	adds	r7, #1
 800b388:	3640      	adds	r6, #64	; 0x40
 800b38a:	2d06      	cmp	r5, #6
 800b38c:	d032      	beq.n	800b3f4 <BackEndTask+0x3a8>
 800b38e:	1e7c      	subs	r4, r7, #1
 800b390:	445c      	add	r4, fp
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 800b392:	7823      	ldrb	r3, [r4, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d800      	bhi.n	800b39a <BackEndTask+0x34e>
 800b398:	e669      	b.n	800b06e <BackEndTask+0x22>
 800b39a:	1ebb      	subs	r3, r7, #2
 800b39c:	4a14      	ldr	r2, [pc, #80]	; (800b3f0 <BackEndTask+0x3a4>)
 800b39e:	4694      	mov	ip, r2
 800b3a0:	4463      	add	r3, ip
			if (MsgDMAStopped[port-1] == true) {
 800b3a2:	781a      	ldrb	r2, [r3, #0]
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d0ec      	beq.n	800b382 <BackEndTask+0x336>
				MsgDMAStopped[port-1] = false;
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 800b3ac:	7823      	ldrb	r3, [r4, #0]
 800b3ae:	2b05      	cmp	r3, #5
 800b3b0:	d1e0      	bne.n	800b374 <BackEndTask+0x328>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	7023      	strb	r3, [r4, #0]
 800b3b6:	e7dd      	b.n	800b374 <BackEndTask+0x328>
 800b3b8:	20000d48 	.word	0x20000d48
 800b3bc:	2000157c 	.word	0x2000157c
 800b3c0:	20006894 	.word	0x20006894
 800b3c4:	2000143c 	.word	0x2000143c
 800b3c8:	20000a2f 	.word	0x20000a2f
 800b3cc:	20001270 	.word	0x20001270
 800b3d0:	20001628 	.word	0x20001628
 800b3d4:	03fffffe 	.word	0x03fffffe
 800b3d8:	20001584 	.word	0x20001584
 800b3dc:	20006c24 	.word	0x20006c24
 800b3e0:	2000161a 	.word	0x2000161a
 800b3e4:	20001620 	.word	0x20001620
 800b3e8:	2000108c 	.word	0x2000108c
 800b3ec:	20001618 	.word	0x20001618
 800b3f0:	20001434 	.word	0x20001434
			}				
		}
		
		taskYIELD();
 800b3f4:	f003 ff58 	bl	800f2a8 <vPortYield>
 800b3f8:	4e02      	ldr	r6, [pc, #8]	; (800b404 <BackEndTask+0x3b8>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800b3fa:	2702      	movs	r7, #2
		for (port=1 ; port <= NumOfPorts; port++)
 800b3fc:	2501      	movs	r5, #1
 800b3fe:	4b02      	ldr	r3, [pc, #8]	; (800b408 <BackEndTask+0x3bc>)
 800b400:	469b      	mov	fp, r3
 800b402:	e7c4      	b.n	800b38e <BackEndTask+0x342>
 800b404:	2000143c 	.word	0x2000143c
 800b408:	20001270 	.word	0x20001270

0800b40c <MX_FREERTOS_Init>:
{
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800b410:	25a0      	movs	r5, #160	; 0xa0
 800b412:	006d      	lsls	r5, r5, #1
 800b414:	2400      	movs	r4, #0
 800b416:	9403      	str	r4, [sp, #12]
 800b418:	9402      	str	r4, [sp, #8]
 800b41a:	4b53      	ldr	r3, [pc, #332]	; (800b568 <MX_FREERTOS_Init+0x15c>)
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	2603      	movs	r6, #3
 800b420:	9600      	str	r6, [sp, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	002a      	movs	r2, r5
 800b426:	4951      	ldr	r1, [pc, #324]	; (800b56c <MX_FREERTOS_Init+0x160>)
 800b428:	4851      	ldr	r0, [pc, #324]	; (800b570 <MX_FREERTOS_Init+0x164>)
 800b42a:	f002 fe7f 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800b42e:	9403      	str	r4, [sp, #12]
 800b430:	9402      	str	r4, [sp, #8]
 800b432:	4b50      	ldr	r3, [pc, #320]	; (800b574 <MX_FREERTOS_Init+0x168>)
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	9600      	str	r6, [sp, #0]
 800b438:	2300      	movs	r3, #0
 800b43a:	002a      	movs	r2, r5
 800b43c:	494e      	ldr	r1, [pc, #312]	; (800b578 <MX_FREERTOS_Init+0x16c>)
 800b43e:	484f      	ldr	r0, [pc, #316]	; (800b57c <MX_FREERTOS_Init+0x170>)
 800b440:	f002 fe74 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 800b444:	9403      	str	r4, [sp, #12]
 800b446:	9402      	str	r4, [sp, #8]
 800b448:	4b4d      	ldr	r3, [pc, #308]	; (800b580 <MX_FREERTOS_Init+0x174>)
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	9600      	str	r6, [sp, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	002a      	movs	r2, r5
 800b452:	494c      	ldr	r1, [pc, #304]	; (800b584 <MX_FREERTOS_Init+0x178>)
 800b454:	484c      	ldr	r0, [pc, #304]	; (800b588 <MX_FREERTOS_Init+0x17c>)
 800b456:	f002 fe69 	bl	800e12c <xTaskGenericCreate>
	vRegisterCLICommands();
 800b45a:	f7f9 f951 	bl	8004700 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800b45e:	9403      	str	r4, [sp, #12]
 800b460:	9402      	str	r4, [sp, #8]
 800b462:	4b4a      	ldr	r3, [pc, #296]	; (800b58c <MX_FREERTOS_Init+0x180>)
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	9600      	str	r6, [sp, #0]
 800b468:	2300      	movs	r3, #0
 800b46a:	002a      	movs	r2, r5
 800b46c:	4948      	ldr	r1, [pc, #288]	; (800b590 <MX_FREERTOS_Init+0x184>)
 800b46e:	4849      	ldr	r0, [pc, #292]	; (800b594 <MX_FREERTOS_Init+0x188>)
 800b470:	f002 fe5c 	bl	800e12c <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 800b474:	4d48      	ldr	r5, [pc, #288]	; (800b598 <MX_FREERTOS_Init+0x18c>)
 800b476:	9403      	str	r4, [sp, #12]
 800b478:	9402      	str	r4, [sp, #8]
 800b47a:	4b48      	ldr	r3, [pc, #288]	; (800b59c <MX_FREERTOS_Init+0x190>)
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	3601      	adds	r6, #1
 800b480:	9600      	str	r6, [sp, #0]
 800b482:	2301      	movs	r3, #1
 800b484:	22a0      	movs	r2, #160	; 0xa0
 800b486:	4946      	ldr	r1, [pc, #280]	; (800b5a0 <MX_FREERTOS_Init+0x194>)
 800b488:	0028      	movs	r0, r5
 800b48a:	f002 fe4f 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800b48e:	9403      	str	r4, [sp, #12]
 800b490:	9402      	str	r4, [sp, #8]
 800b492:	4b44      	ldr	r3, [pc, #272]	; (800b5a4 <MX_FREERTOS_Init+0x198>)
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	9600      	str	r6, [sp, #0]
 800b498:	2302      	movs	r3, #2
 800b49a:	22a0      	movs	r2, #160	; 0xa0
 800b49c:	4942      	ldr	r1, [pc, #264]	; (800b5a8 <MX_FREERTOS_Init+0x19c>)
 800b49e:	0028      	movs	r0, r5
 800b4a0:	f002 fe44 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 800b4a4:	9403      	str	r4, [sp, #12]
 800b4a6:	9402      	str	r4, [sp, #8]
 800b4a8:	4b40      	ldr	r3, [pc, #256]	; (800b5ac <MX_FREERTOS_Init+0x1a0>)
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	9600      	str	r6, [sp, #0]
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	22a0      	movs	r2, #160	; 0xa0
 800b4b2:	493f      	ldr	r1, [pc, #252]	; (800b5b0 <MX_FREERTOS_Init+0x1a4>)
 800b4b4:	0028      	movs	r0, r5
 800b4b6:	f002 fe39 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800b4ba:	9403      	str	r4, [sp, #12]
 800b4bc:	9402      	str	r4, [sp, #8]
 800b4be:	4b3d      	ldr	r3, [pc, #244]	; (800b5b4 <MX_FREERTOS_Init+0x1a8>)
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	9600      	str	r6, [sp, #0]
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	22a0      	movs	r2, #160	; 0xa0
 800b4c8:	493b      	ldr	r1, [pc, #236]	; (800b5b8 <MX_FREERTOS_Init+0x1ac>)
 800b4ca:	0028      	movs	r0, r5
 800b4cc:	f002 fe2e 	bl	800e12c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800b4d0:	9403      	str	r4, [sp, #12]
 800b4d2:	9402      	str	r4, [sp, #8]
 800b4d4:	4b39      	ldr	r3, [pc, #228]	; (800b5bc <MX_FREERTOS_Init+0x1b0>)
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	9600      	str	r6, [sp, #0]
 800b4da:	2305      	movs	r3, #5
 800b4dc:	22a0      	movs	r2, #160	; 0xa0
 800b4de:	4938      	ldr	r1, [pc, #224]	; (800b5c0 <MX_FREERTOS_Init+0x1b4>)
 800b4e0:	0028      	movs	r0, r5
 800b4e2:	f002 fe23 	bl	800e12c <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 800b4e6:	940d      	str	r4, [sp, #52]	; 0x34
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	a80d      	add	r0, sp, #52	; 0x34
 800b4ec:	f002 f82b 	bl	800d546 <osSemaphoreCreate>
 800b4f0:	4e34      	ldr	r6, [pc, #208]	; (800b5c4 <MX_FREERTOS_Init+0x1b8>)
 800b4f2:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 800b4f4:	940c      	str	r4, [sp, #48]	; 0x30
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	a80c      	add	r0, sp, #48	; 0x30
 800b4fa:	f002 f824 	bl	800d546 <osSemaphoreCreate>
 800b4fe:	4d32      	ldr	r5, [pc, #200]	; (800b5c8 <MX_FREERTOS_Init+0x1bc>)
 800b500:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 800b502:	940b      	str	r4, [sp, #44]	; 0x2c
 800b504:	2101      	movs	r1, #1
 800b506:	a80b      	add	r0, sp, #44	; 0x2c
 800b508:	f002 f81d 	bl	800d546 <osSemaphoreCreate>
 800b50c:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800b50e:	940a      	str	r4, [sp, #40]	; 0x28
 800b510:	2101      	movs	r1, #1
 800b512:	a80a      	add	r0, sp, #40	; 0x28
 800b514:	f002 f817 	bl	800d546 <osSemaphoreCreate>
 800b518:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800b51a:	9409      	str	r4, [sp, #36]	; 0x24
 800b51c:	2101      	movs	r1, #1
 800b51e:	a809      	add	r0, sp, #36	; 0x24
 800b520:	f002 f811 	bl	800d546 <osSemaphoreCreate>
 800b524:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 800b526:	9408      	str	r4, [sp, #32]
 800b528:	2101      	movs	r1, #1
 800b52a:	a808      	add	r0, sp, #32
 800b52c:	f002 f80b 	bl	800d546 <osSemaphoreCreate>
 800b530:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 800b532:	9407      	str	r4, [sp, #28]
 800b534:	2101      	movs	r1, #1
 800b536:	a807      	add	r0, sp, #28
 800b538:	f002 f805 	bl	800d546 <osSemaphoreCreate>
 800b53c:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800b53e:	9406      	str	r4, [sp, #24]
 800b540:	2101      	movs	r1, #1
 800b542:	a806      	add	r0, sp, #24
 800b544:	f001 ffff 	bl	800d546 <osSemaphoreCreate>
 800b548:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 800b54a:	9405      	str	r4, [sp, #20]
 800b54c:	2101      	movs	r1, #1
 800b54e:	a805      	add	r0, sp, #20
 800b550:	f001 fff9 	bl	800d546 <osSemaphoreCreate>
 800b554:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 800b556:	9404      	str	r4, [sp, #16]
 800b558:	2101      	movs	r1, #1
 800b55a:	a804      	add	r0, sp, #16
 800b55c:	f001 fff3 	bl	800d546 <osSemaphoreCreate>
 800b560:	6168      	str	r0, [r5, #20]
}
 800b562:	b00e      	add	sp, #56	; 0x38
 800b564:	bd70      	pop	{r4, r5, r6, pc}
 800b566:	46c0      	nop			; (mov r8, r8)
 800b568:	2000161c 	.word	0x2000161c
 800b56c:	08019f7c 	.word	0x08019f7c
 800b570:	0800af91 	.word	0x0800af91
 800b574:	200015fc 	.word	0x200015fc
 800b578:	08019f88 	.word	0x08019f88
 800b57c:	0800b04d 	.word	0x0800b04d
 800b580:	20001614 	.word	0x20001614
 800b584:	08019f94 	.word	0x08019f94
 800b588:	080128c3 	.word	0x080128c3
 800b58c:	20001628 	.word	0x20001628
 800b590:	08019fa0 	.word	0x08019fa0
 800b594:	0800a2c9 	.word	0x0800a2c9
 800b598:	08006d49 	.word	0x08006d49
 800b59c:	20001600 	.word	0x20001600
 800b5a0:	08019fa8 	.word	0x08019fa8
 800b5a4:	20001604 	.word	0x20001604
 800b5a8:	08019fb4 	.word	0x08019fb4
 800b5ac:	20001608 	.word	0x20001608
 800b5b0:	08019fc0 	.word	0x08019fc0
 800b5b4:	2000160c 	.word	0x2000160c
 800b5b8:	08019fcc 	.word	0x08019fcc
 800b5bc:	20001610 	.word	0x20001610
 800b5c0:	08019fd8 	.word	0x08019fd8
 800b5c4:	20006990 	.word	0x20006990
 800b5c8:	20006974 	.word	0x20006974

0800b5cc <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800b5cc:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800b5ce:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <vMainConfigureTimerForRunTimeStats+0x14>)
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	4904      	ldr	r1, [pc, #16]	; (800b5e4 <vMainConfigureTimerForRunTimeStats+0x18>)
 800b5d4:	f7f4 fdbc 	bl	8000150 <__udivsi3>
 800b5d8:	4b03      	ldr	r3, [pc, #12]	; (800b5e8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800b5da:	6018      	str	r0, [r3, #0]
}
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	2000004c 	.word	0x2000004c
 800b5e4:	00002710 	.word	0x00002710
 800b5e8:	20001624 	.word	0x20001624

0800b5ec <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800b5ec:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <ulMainGetRunTimeCounterValue+0x40>)
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	21fa      	movs	r1, #250	; 0xfa
 800b5f4:	0089      	lsls	r1, r1, #2
 800b5f6:	f7f4 fdab 	bl	8000150 <__udivsi3>
 800b5fa:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <ulMainGetRunTimeCounterValue+0x44>)
 800b5fe:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 800b600:	f002 ff26 	bl	800e450 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 800b604:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <ulMainGetRunTimeCounterValue+0x48>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	015b      	lsls	r3, r3, #5
 800b60a:	d50d      	bpl.n	800b628 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800b60c:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b60e:	4b08      	ldr	r3, [pc, #32]	; (800b630 <ulMainGetRunTimeCounterValue+0x44>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 800b614:	0084      	lsls	r4, r0, #2
 800b616:	1824      	adds	r4, r4, r0
 800b618:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800b61a:	4b07      	ldr	r3, [pc, #28]	; (800b638 <ulMainGetRunTimeCounterValue+0x4c>)
 800b61c:	6819      	ldr	r1, [r3, #0]
 800b61e:	0028      	movs	r0, r5
 800b620:	f7f4 fd96 	bl	8000150 <__udivsi3>
 800b624:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 800b626:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b628:	1b2d      	subs	r5, r5, r4
 800b62a:	e7f3      	b.n	800b614 <ulMainGetRunTimeCounterValue+0x28>
 800b62c:	2000004c 	.word	0x2000004c
 800b630:	e000e018 	.word	0xe000e018
 800b634:	e000ed04 	.word	0xe000ed04
 800b638:	20001624 	.word	0x20001624

0800b63c <ledModeCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b63c:	b530      	push	{r4, r5, lr}
 800b63e:	b083      	sub	sp, #12
 800b640:	0005      	movs	r5, r0
 800b642:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b644:	2300      	movs	r3, #0
 800b646:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800b648:	2d00      	cmp	r5, #0
 800b64a:	d101      	bne.n	800b650 <ledModeCommand+0x14>
 800b64c:	b672      	cpsid	i
 800b64e:	e7fe      	b.n	800b64e <ledModeCommand+0x12>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b650:	aa01      	add	r2, sp, #4
 800b652:	2101      	movs	r1, #1
 800b654:	f002 f888 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800b658:	0004      	movs	r4, r0
								(
									pcCommandString,		/* The command string itself. */
									1,						/* Return the first parameter. */
									&xParameterStringLength1	/* Store the parameter string length. */
								);
	if (!strcmp( ( char * ) pcParameterString1, "on") || !strcmp( ( char * ) pcParameterString1, "ON"))
 800b65a:	4918      	ldr	r1, [pc, #96]	; (800b6bc <ledModeCommand+0x80>)
 800b65c:	f7f4 fd52 	bl	8000104 <strcmp>
 800b660:	2800      	cmp	r0, #0
 800b662:	d005      	beq.n	800b670 <ledModeCommand+0x34>
 800b664:	4916      	ldr	r1, [pc, #88]	; (800b6c0 <ledModeCommand+0x84>)
 800b666:	0020      	movs	r0, r4
 800b668:	f7f4 fd4c 	bl	8000104 <strcmp>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d10a      	bne.n	800b686 <ledModeCommand+0x4a>
		RelayindMode = 1;
 800b670:	4b14      	ldr	r3, [pc, #80]	; (800b6c4 <ledModeCommand+0x88>)
 800b672:	2201      	movs	r2, #1
 800b674:	701a      	strb	r2, [r3, #0]
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
		RelayindMode = 0;
	
	/* Respond to the command */
	if (RelayindMode) {
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800b676:	222d      	movs	r2, #45	; 0x2d
 800b678:	4913      	ldr	r1, [pc, #76]	; (800b6c8 <ledModeCommand+0x8c>)
 800b67a:	0028      	movs	r0, r5
 800b67c:	f007 fbb7 	bl	8012dee <memcpy>

	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800b680:	2000      	movs	r0, #0
 800b682:	b003      	add	sp, #12
 800b684:	bd30      	pop	{r4, r5, pc}
	else if (!strcmp( ( char * ) pcParameterString1, "off") || !strcmp( ( char * ) pcParameterString1, "OFF"))
 800b686:	4911      	ldr	r1, [pc, #68]	; (800b6cc <ledModeCommand+0x90>)
 800b688:	0020      	movs	r0, r4
 800b68a:	f7f4 fd3b 	bl	8000104 <strcmp>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d005      	beq.n	800b69e <ledModeCommand+0x62>
 800b692:	490f      	ldr	r1, [pc, #60]	; (800b6d0 <ledModeCommand+0x94>)
 800b694:	0020      	movs	r0, r4
 800b696:	f7f4 fd35 	bl	8000104 <strcmp>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d108      	bne.n	800b6b0 <ledModeCommand+0x74>
		RelayindMode = 0;
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <ledModeCommand+0x88>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	701a      	strb	r2, [r3, #0]
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800b6a4:	222e      	movs	r2, #46	; 0x2e
 800b6a6:	490b      	ldr	r1, [pc, #44]	; (800b6d4 <ledModeCommand+0x98>)
 800b6a8:	0028      	movs	r0, r5
 800b6aa:	f007 fba0 	bl	8012dee <memcpy>
 800b6ae:	e7e7      	b.n	800b680 <ledModeCommand+0x44>
	if (RelayindMode) {
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <ledModeCommand+0x88>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0f5      	beq.n	800b6a4 <ledModeCommand+0x68>
 800b6b8:	e7dd      	b.n	800b676 <ledModeCommand+0x3a>
 800b6ba:	46c0      	nop			; (mov r8, r8)
 800b6bc:	080190e8 	.word	0x080190e8
 800b6c0:	08019ff0 	.word	0x08019ff0
 800b6c4:	2000162d 	.word	0x2000162d
 800b6c8:	08019ffc 	.word	0x08019ffc
 800b6cc:	08019ff4 	.word	0x08019ff4
 800b6d0:	08019ff8 	.word	0x08019ff8
 800b6d4:	0801a02c 	.word	0x0801a02c

0800b6d8 <Module_Init>:
{	
 800b6d8:	b500      	push	{lr}
 800b6da:	b083      	sub	sp, #12
  MX_USART1_UART_Init();
 800b6dc:	f001 fcb2 	bl	800d044 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b6e0:	f001 fcc8 	bl	800d074 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b6e4:	f001 fcde 	bl	800d0a4 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b6e8:	f001 fcf4 	bl	800d0d4 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b6ec:	f001 fd0a 	bl	800d104 <MX_USART6_UART_Init>
	xTimerRelay = xTimerCreate( "RelayTimer", pdMS_TO_TICKS(1000), pdFALSE, ( void * ) 1, RelayTimerCallback );	
 800b6f0:	21fa      	movs	r1, #250	; 0xfa
 800b6f2:	4b07      	ldr	r3, [pc, #28]	; (800b710 <Module_Init+0x38>)
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	0089      	lsls	r1, r1, #2
 800b6fc:	4805      	ldr	r0, [pc, #20]	; (800b714 <Module_Init+0x3c>)
 800b6fe:	f003 fc09 	bl	800ef14 <xTimerCreate>
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <Module_Init+0x40>)
 800b704:	6018      	str	r0, [r3, #0]
	Relay_Init();
 800b706:	f001 fb93 	bl	800ce30 <Relay_Init>
}
 800b70a:	b003      	add	sp, #12
 800b70c:	bd00      	pop	{pc}
 800b70e:	46c0      	nop			; (mov r8, r8)
 800b710:	0800ba75 	.word	0x0800ba75
 800b714:	08019fe4 	.word	0x08019fe4
 800b718:	20001630 	.word	0x20001630

0800b71c <RegisterModuleCLICommands>:
{
 800b71c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &onCommandDefinition );
 800b71e:	4808      	ldr	r0, [pc, #32]	; (800b740 <RegisterModuleCLICommands+0x24>)
 800b720:	f001 ff84 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &offCommandDefinition );
 800b724:	4807      	ldr	r0, [pc, #28]	; (800b744 <RegisterModuleCLICommands+0x28>)
 800b726:	f001 ff81 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &toggleCommandDefinition );
 800b72a:	4807      	ldr	r0, [pc, #28]	; (800b748 <RegisterModuleCLICommands+0x2c>)
 800b72c:	f001 ff7e 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &ledModeCommandDefinition );
 800b730:	4806      	ldr	r0, [pc, #24]	; (800b74c <RegisterModuleCLICommands+0x30>)
 800b732:	f001 ff7b 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pwmCommandDefinition );
 800b736:	4806      	ldr	r0, [pc, #24]	; (800b750 <RegisterModuleCLICommands+0x34>)
 800b738:	f001 ff78 	bl	800d62c <FreeRTOS_CLIRegisterCommand>
}
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	46c0      	nop			; (mov r8, r8)
 800b740:	0801a110 	.word	0x0801a110
 800b744:	0801a090 	.word	0x0801a090
 800b748:	0801a370 	.word	0x0801a370
 800b74c:	0801a05c 	.word	0x0801a05c
 800b750:	0801a19c 	.word	0x0801a19c

0800b754 <GetPort>:
	if (huart->Instance == USART5)
 800b754:	6800      	ldr	r0, [r0, #0]
 800b756:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <GetPort+0x3c>)
 800b758:	4298      	cmp	r0, r3
 800b75a:	d011      	beq.n	800b780 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <GetPort+0x40>)
 800b75e:	4298      	cmp	r0, r3
 800b760:	d010      	beq.n	800b784 <GetPort+0x30>
	else if (huart->Instance == USART6)
 800b762:	4b0d      	ldr	r3, [pc, #52]	; (800b798 <GetPort+0x44>)
 800b764:	4298      	cmp	r0, r3
 800b766:	d00f      	beq.n	800b788 <GetPort+0x34>
	else if (huart->Instance == USART3)
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <GetPort+0x48>)
 800b76a:	4298      	cmp	r0, r3
 800b76c:	d00e      	beq.n	800b78c <GetPort+0x38>
	return 0;
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <GetPort+0x4c>)
 800b770:	469c      	mov	ip, r3
 800b772:	4460      	add	r0, ip
 800b774:	4243      	negs	r3, r0
 800b776:	4158      	adcs	r0, r3
 800b778:	4240      	negs	r0, r0
 800b77a:	2305      	movs	r3, #5
 800b77c:	4018      	ands	r0, r3
}
 800b77e:	4770      	bx	lr
			return P1;
 800b780:	2001      	movs	r0, #1
 800b782:	e7fc      	b.n	800b77e <GetPort+0x2a>
			return P2;
 800b784:	2002      	movs	r0, #2
 800b786:	e7fa      	b.n	800b77e <GetPort+0x2a>
			return P3;
 800b788:	2003      	movs	r0, #3
 800b78a:	e7f8      	b.n	800b77e <GetPort+0x2a>
			return P4;
 800b78c:	2004      	movs	r0, #4
 800b78e:	e7f6      	b.n	800b77e <GetPort+0x2a>
 800b790:	40005000 	.word	0x40005000
 800b794:	40004400 	.word	0x40004400
 800b798:	40011400 	.word	0x40011400
 800b79c:	40004800 	.word	0x40004800
 800b7a0:	bffec800 	.word	0xbffec800

0800b7a4 <TIM3_Init>:
{
 800b7a4:	b530      	push	{r4, r5, lr}
 800b7a6:	b095      	sub	sp, #84	; 0x54
  __TIM3_CLK_ENABLE();
 800b7a8:	4a24      	ldr	r2, [pc, #144]	; (800b83c <TIM3_Init+0x98>)
 800b7aa:	69d1      	ldr	r1, [r2, #28]
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	4319      	orrs	r1, r3
 800b7b0:	61d1      	str	r1, [r2, #28]
 800b7b2:	69d2      	ldr	r2, [r2, #28]
 800b7b4:	401a      	ands	r2, r3
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ba:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7bc:	2500      	movs	r5, #0
 800b7be:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = _Relay_PIN;
 800b7c4:	3b02      	subs	r3, #2
 800b7c6:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800b7c8:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800b7ca:	a90f      	add	r1, sp, #60	; 0x3c
 800b7cc:	481c      	ldr	r0, [pc, #112]	; (800b840 <TIM3_Init+0x9c>)
 800b7ce:	f004 fecf 	bl	8010570 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2010      	movs	r0, #16
 800b7d8:	f003 ff00 	bl	800f5dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b7dc:	2010      	movs	r0, #16
 800b7de:	f003 ff31 	bl	800f644 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 800b7e2:	4c18      	ldr	r4, [pc, #96]	; (800b844 <TIM3_Init+0xa0>)
 800b7e4:	4b18      	ldr	r3, [pc, #96]	; (800b848 <TIM3_Init+0xa4>)
 800b7e6:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (uint32_t)(HAL_RCC_GetSysClockFreq()/PWM_TIMER_CLOCK) - 1;
 800b7e8:	f005 fbba 	bl	8010f60 <HAL_RCC_GetSysClockFreq>
 800b7ec:	4917      	ldr	r1, [pc, #92]	; (800b84c <TIM3_Init+0xa8>)
 800b7ee:	f7f4 fcaf 	bl	8000150 <__udivsi3>
 800b7f2:	3801      	subs	r0, #1
 800b7f4:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7f6:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800b7f8:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7fa:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim3);
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	f006 f921 	bl	8011a44 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b802:	2380      	movs	r3, #128	; 0x80
 800b804:	015b      	lsls	r3, r3, #5
 800b806:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800b808:	a90b      	add	r1, sp, #44	; 0x2c
 800b80a:	0020      	movs	r0, r4
 800b80c:	f005 ffc4 	bl	8011798 <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim3);
 800b810:	0020      	movs	r0, r4
 800b812:	f006 f931 	bl	8011a78 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b816:	9509      	str	r5, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b818:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800b81a:	a909      	add	r1, sp, #36	; 0x24
 800b81c:	0020      	movs	r0, r4
 800b81e:	f006 fa6f 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b822:	2360      	movs	r3, #96	; 0x60
 800b824:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 800b826:	9503      	str	r5, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b828:	9504      	str	r5, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b82a:	9506      	str	r5, [sp, #24]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, _Relay_TIM_CH);
 800b82c:	2208      	movs	r2, #8
 800b82e:	a902      	add	r1, sp, #8
 800b830:	0020      	movs	r0, r4
 800b832:	f006 f97b 	bl	8011b2c <HAL_TIM_PWM_ConfigChannel>
}
 800b836:	b015      	add	sp, #84	; 0x54
 800b838:	bd30      	pop	{r4, r5, pc}
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	40021000 	.word	0x40021000
 800b840:	48000400 	.word	0x48000400
 800b844:	20006a20 	.word	0x20006a20
 800b848:	40000400 	.word	0x40000400
 800b84c:	00f42400 	.word	0x00f42400

0800b850 <TIM3_DeInit>:
{
 800b850:	b510      	push	{r4, lr}
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800b852:	2010      	movs	r0, #16
 800b854:	f003 ff00 	bl	800f658 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_DeInit(&htim3);
 800b858:	4c06      	ldr	r4, [pc, #24]	; (800b874 <TIM3_DeInit+0x24>)
 800b85a:	0020      	movs	r0, r4
 800b85c:	f005 ff4e 	bl	80116fc <HAL_TIM_Base_DeInit>
	HAL_TIM_PWM_DeInit(&htim3);
 800b860:	0020      	movs	r0, r4
 800b862:	f005 ff79 	bl	8011758 <HAL_TIM_PWM_DeInit>
	__TIM3_CLK_DISABLE();
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <TIM3_DeInit+0x28>)
 800b868:	69d3      	ldr	r3, [r2, #28]
 800b86a:	2102      	movs	r1, #2
 800b86c:	438b      	bics	r3, r1
 800b86e:	61d3      	str	r3, [r2, #28]
}
 800b870:	bd10      	pop	{r4, pc}
 800b872:	46c0      	nop			; (mov r8, r8)
 800b874:	20006a20 	.word	0x20006a20
 800b878:	40021000 	.word	0x40021000

0800b87c <Set_Relay_PWM>:
{	
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	1c0f      	adds	r7, r1, #0
	uint32_t ARR = PWM_TIMER_CLOCK / freq;
 800b880:	0001      	movs	r1, r0
 800b882:	4813      	ldr	r0, [pc, #76]	; (800b8d0 <Set_Relay_PWM+0x54>)
 800b884:	f7f4 fc64 	bl	8000150 <__udivsi3>
 800b888:	0006      	movs	r6, r0
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b88a:	4b12      	ldr	r3, [pc, #72]	; (800b8d4 <Set_Relay_PWM+0x58>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d11b      	bne.n	800b8ca <Set_Relay_PWM+0x4e>
	htim3.Instance->ARR = ARR - 1;
 800b892:	4c11      	ldr	r4, [pc, #68]	; (800b8d8 <Set_Relay_PWM+0x5c>)
 800b894:	6825      	ldr	r5, [r4, #0]
 800b896:	1e73      	subs	r3, r6, #1
 800b898:	62eb      	str	r3, [r5, #44]	; 0x2c
	htim3.Instance->CCR3 = ((float)dutycycle/100.0f) * ARR;
 800b89a:	4910      	ldr	r1, [pc, #64]	; (800b8dc <Set_Relay_PWM+0x60>)
 800b89c:	1c38      	adds	r0, r7, #0
 800b89e:	f7f4 ffab 	bl	80007f8 <__aeabi_fdiv>
 800b8a2:	1c07      	adds	r7, r0, #0
 800b8a4:	0030      	movs	r0, r6
 800b8a6:	f7f5 fc95 	bl	80011d4 <__aeabi_ui2f>
 800b8aa:	1c01      	adds	r1, r0, #0
 800b8ac:	1c38      	adds	r0, r7, #0
 800b8ae:	f7f5 f97b 	bl	8000ba8 <__aeabi_fmul>
 800b8b2:	f7f4 fe85 	bl	80005c0 <__aeabi_f2uiz>
 800b8b6:	63e8      	str	r0, [r5, #60]	; 0x3c
	if (HAL_TIM_PWM_Start(&htim3, _Relay_TIM_CH) != HAL_OK)	
 800b8b8:	2108      	movs	r1, #8
 800b8ba:	0020      	movs	r0, r4
 800b8bc:	f006 f9b8 	bl	8011c30 <HAL_TIM_PWM_Start>
 800b8c0:	1e43      	subs	r3, r0, #1
 800b8c2:	4198      	sbcs	r0, r3
 800b8c4:	4240      	negs	r0, r0
 800b8c6:	b2c0      	uxtb	r0, r0
}
 800b8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Relay_state != STATE_PWM)	TIM3_Init();
 800b8ca:	f7ff ff6b 	bl	800b7a4 <TIM3_Init>
 800b8ce:	e7e0      	b.n	800b892 <Set_Relay_PWM+0x16>
 800b8d0:	00f42400 	.word	0x00f42400
 800b8d4:	2000162c 	.word	0x2000162c
 800b8d8:	20006a20 	.word	0x20006a20
 800b8dc:	42c80000 	.word	0x42c80000

0800b8e0 <Relay_on>:
{	
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	0004      	movs	r4, r0
	if (Relay_state == STATE_PWM) 
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <Relay_on+0x98>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d02a      	beq.n	800b944 <Relay_on+0x64>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_SET);
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	4822      	ldr	r0, [pc, #136]	; (800b97c <Relay_on+0x9c>)
 800b8f4:	f004 ff22 	bl	801073c <HAL_GPIO_WritePin>
	if (RelayindMode) IND_ON();
 800b8f8:	4b21      	ldr	r3, [pc, #132]	; (800b980 <Relay_on+0xa0>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d12a      	bne.n	800b956 <Relay_on+0x76>
	if (timeout != portMAX_DELAY) 
 800b900:	1c63      	adds	r3, r4, #1
 800b902:	d017      	beq.n	800b934 <Relay_on+0x54>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b904:	4b1f      	ldr	r3, [pc, #124]	; (800b984 <Relay_on+0xa4>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	f003 fc60 	bl	800f1cc <xTimerIsTimerActive>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d129      	bne.n	800b964 <Relay_on+0x84>
		xTimerChangePeriod( xTimerRelay, pdMS_TO_TICKS(timeout), 100 );
 800b910:	0160      	lsls	r0, r4, #5
 800b912:	1b00      	subs	r0, r0, r4
 800b914:	0080      	lsls	r0, r0, #2
 800b916:	1900      	adds	r0, r0, r4
 800b918:	00c0      	lsls	r0, r0, #3
 800b91a:	21fa      	movs	r1, #250	; 0xfa
 800b91c:	0089      	lsls	r1, r1, #2
 800b91e:	f7f4 fc17 	bl	8000150 <__udivsi3>
 800b922:	0002      	movs	r2, r0
 800b924:	4b17      	ldr	r3, [pc, #92]	; (800b984 <Relay_on+0xa4>)
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	2364      	movs	r3, #100	; 0x64
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2300      	movs	r3, #0
 800b92e:	2104      	movs	r1, #4
 800b930:	f003 fb10 	bl	800ef54 <xTimerGenericCommand>
	Relay_state = STATE_ON; Relay_Oldstate = Relay_state;	
 800b934:	2301      	movs	r3, #1
 800b936:	4a10      	ldr	r2, [pc, #64]	; (800b978 <Relay_on+0x98>)
 800b938:	7013      	strb	r3, [r2, #0]
 800b93a:	4a13      	ldr	r2, [pc, #76]	; (800b988 <Relay_on+0xa8>)
 800b93c:	7013      	strb	r3, [r2, #0]
}
 800b93e:	2000      	movs	r0, #0
 800b940:	b002      	add	sp, #8
 800b942:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800b944:	2108      	movs	r1, #8
 800b946:	4811      	ldr	r0, [pc, #68]	; (800b98c <Relay_on+0xac>)
 800b948:	f006 f99a 	bl	8011c80 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800b94c:	f7ff ff80 	bl	800b850 <TIM3_DeInit>
		Relay_Init();
 800b950:	f001 fa6e 	bl	800ce30 <Relay_Init>
 800b954:	e7cb      	b.n	800b8ee <Relay_on+0xe>
	if (RelayindMode) IND_ON();
 800b956:	2180      	movs	r1, #128	; 0x80
 800b958:	2201      	movs	r2, #1
 800b95a:	01c9      	lsls	r1, r1, #7
 800b95c:	480c      	ldr	r0, [pc, #48]	; (800b990 <Relay_on+0xb0>)
 800b95e:	f004 feed 	bl	801073c <HAL_GPIO_WritePin>
 800b962:	e7cd      	b.n	800b900 <Relay_on+0x20>
		if( xTimerIsTimerActive(xTimerRelay) ) xTimerStop( xTimerRelay, 100 );
 800b964:	4b07      	ldr	r3, [pc, #28]	; (800b984 <Relay_on+0xa4>)
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	2364      	movs	r3, #100	; 0x64
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2300      	movs	r3, #0
 800b96e:	2200      	movs	r2, #0
 800b970:	2103      	movs	r1, #3
 800b972:	f003 faef 	bl	800ef54 <xTimerGenericCommand>
 800b976:	e7cb      	b.n	800b910 <Relay_on+0x30>
 800b978:	2000162c 	.word	0x2000162c
 800b97c:	48000400 	.word	0x48000400
 800b980:	2000162d 	.word	0x2000162d
 800b984:	20001630 	.word	0x20001630
 800b988:	2000003d 	.word	0x2000003d
 800b98c:	20006a20 	.word	0x20006a20
 800b990:	48000800 	.word	0x48000800

0800b994 <onCommand>:
{
 800b994:	b530      	push	{r4, r5, lr}
 800b996:	b083      	sub	sp, #12
 800b998:	0004      	movs	r4, r0
 800b99a:	0010      	movs	r0, r2
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800b99c:	2300      	movs	r3, #0
 800b99e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	d101      	bne.n	800b9a8 <onCommand+0x14>
 800b9a4:	b672      	cpsid	i
 800b9a6:	e7fe      	b.n	800b9a6 <onCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800b9a8:	aa01      	add	r2, sp, #4
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	f001 fedc 	bl	800d768 <FreeRTOS_CLIGetParameter>
 800b9b0:	0005      	movs	r5, r0
	if (!strcmp( ( char * ) pcParameterString1, "inf") || !strcmp( ( char * ) pcParameterString1, "INF"))
 800b9b2:	4915      	ldr	r1, [pc, #84]	; (800ba08 <onCommand+0x74>)
 800b9b4:	f7f4 fba6 	bl	8000104 <strcmp>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d005      	beq.n	800b9c8 <onCommand+0x34>
 800b9bc:	4913      	ldr	r1, [pc, #76]	; (800ba0c <onCommand+0x78>)
 800b9be:	0028      	movs	r0, r5
 800b9c0:	f7f4 fba0 	bl	8000104 <strcmp>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d108      	bne.n	800b9da <onCommand+0x46>
	result = Relay_on(timeout);	
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	4240      	negs	r0, r0
 800b9cc:	f7ff ff88 	bl	800b8e0 <Relay_on>
	if (result == H0FR6_OK) {
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d012      	beq.n	800b9fa <onCommand+0x66>
}
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	b003      	add	sp, #12
 800b9d8:	bd30      	pop	{r4, r5, pc}
		timeout = ( uint32_t ) atol( ( char * ) pcParameterString1 );
 800b9da:	0028      	movs	r0, r5
 800b9dc:	f006 ff7d 	bl	80128da <atol>
 800b9e0:	0005      	movs	r5, r0
	result = Relay_on(timeout);	
 800b9e2:	f7ff ff7d 	bl	800b8e0 <Relay_on>
	if (result == H0FR6_OK) {
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d1f4      	bne.n	800b9d4 <onCommand+0x40>
		if (timeout != portMAX_DELAY) {
 800b9ea:	1c6b      	adds	r3, r5, #1
 800b9ec:	d005      	beq.n	800b9fa <onCommand+0x66>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, timeout);
 800b9ee:	002a      	movs	r2, r5
 800b9f0:	4907      	ldr	r1, [pc, #28]	; (800ba10 <onCommand+0x7c>)
 800b9f2:	0020      	movs	r0, r4
 800b9f4:	f007 fbfe 	bl	80131f4 <sprintf>
 800b9f8:	e7ec      	b.n	800b9d4 <onCommand+0x40>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOKMessageInf);
 800b9fa:	2231      	movs	r2, #49	; 0x31
 800b9fc:	4905      	ldr	r1, [pc, #20]	; (800ba14 <onCommand+0x80>)
 800b9fe:	0020      	movs	r0, r4
 800ba00:	f007 f9f5 	bl	8012dee <memcpy>
 800ba04:	e7e6      	b.n	800b9d4 <onCommand+0x40>
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	0801a0a0 	.word	0x0801a0a0
 800ba0c:	0801a0a4 	.word	0x0801a0a4
 800ba10:	0801a0a8 	.word	0x0801a0a8
 800ba14:	0801a0dc 	.word	0x0801a0dc

0800ba18 <Relay_off>:
{	
 800ba18:	b510      	push	{r4, lr}
	if (Relay_state == STATE_PWM) 
 800ba1a:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <Relay_off+0x48>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d00d      	beq.n	800ba3e <Relay_off+0x26>
	HAL_GPIO_WritePin(_Relay_PORT,_Relay_PIN,GPIO_PIN_RESET);
 800ba22:	2200      	movs	r2, #0
 800ba24:	2101      	movs	r1, #1
 800ba26:	480f      	ldr	r0, [pc, #60]	; (800ba64 <Relay_off+0x4c>)
 800ba28:	f004 fe88 	bl	801073c <HAL_GPIO_WritePin>
	if (RelayindMode) IND_OFF();
 800ba2c:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <Relay_off+0x50>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10d      	bne.n	800ba50 <Relay_off+0x38>
	Relay_state = STATE_OFF;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <Relay_off+0x48>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
}
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	bd10      	pop	{r4, pc}
		HAL_TIM_PWM_Stop(&htim3, _Relay_TIM_CH);
 800ba3e:	2108      	movs	r1, #8
 800ba40:	480a      	ldr	r0, [pc, #40]	; (800ba6c <Relay_off+0x54>)
 800ba42:	f006 f91d 	bl	8011c80 <HAL_TIM_PWM_Stop>
		TIM3_DeInit();
 800ba46:	f7ff ff03 	bl	800b850 <TIM3_DeInit>
		Relay_Init();
 800ba4a:	f001 f9f1 	bl	800ce30 <Relay_Init>
 800ba4e:	e7e8      	b.n	800ba22 <Relay_off+0xa>
	if (RelayindMode) IND_OFF();
 800ba50:	2180      	movs	r1, #128	; 0x80
 800ba52:	2200      	movs	r2, #0
 800ba54:	01c9      	lsls	r1, r1, #7
 800ba56:	4806      	ldr	r0, [pc, #24]	; (800ba70 <Relay_off+0x58>)
 800ba58:	f004 fe70 	bl	801073c <HAL_GPIO_WritePin>
 800ba5c:	e7ea      	b.n	800ba34 <Relay_off+0x1c>
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	2000162c 	.word	0x2000162c
 800ba64:	48000400 	.word	0x48000400
 800ba68:	2000162d 	.word	0x2000162d
 800ba6c:	20006a20 	.word	0x20006a20
 800ba70:	48000800 	.word	0x48000800

0800ba74 <RelayTimerCallback>:
{
 800ba74:	b510      	push	{r4, lr}
	Relay_off();
 800ba76:	f7ff ffcf 	bl	800ba18 <Relay_off>
}
 800ba7a:	bd10      	pop	{r4, pc}

0800ba7c <offCommand>:
{
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800ba80:	d101      	bne.n	800ba86 <offCommand+0xa>
 800ba82:	b672      	cpsid	i
 800ba84:	e7fe      	b.n	800ba84 <offCommand+0x8>
	result = Relay_off();
 800ba86:	f7ff ffc7 	bl	800ba18 <Relay_off>
	if (result == H0FR6_OK) {
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d001      	beq.n	800ba92 <offCommand+0x16>
}
 800ba8e:	2000      	movs	r0, #0
 800ba90:	bd10      	pop	{r4, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800ba92:	2222      	movs	r2, #34	; 0x22
 800ba94:	4902      	ldr	r1, [pc, #8]	; (800baa0 <offCommand+0x24>)
 800ba96:	0020      	movs	r0, r4
 800ba98:	f007 f9a9 	bl	8012dee <memcpy>
 800ba9c:	e7f7      	b.n	800ba8e <offCommand+0x12>
 800ba9e:	46c0      	nop			; (mov r8, r8)
 800baa0:	0801a06c 	.word	0x0801a06c

0800baa4 <Relay_PWM>:
{	
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	1c05      	adds	r5, r0, #0
	if ( dutyCycle < 0 || dutyCycle > 100 )
 800baa8:	2100      	movs	r1, #0
 800baaa:	f7f4 fd17 	bl	80004dc <__aeabi_fcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d11e      	bne.n	800baf0 <Relay_PWM+0x4c>
 800bab2:	4911      	ldr	r1, [pc, #68]	; (800baf8 <Relay_PWM+0x54>)
 800bab4:	1c28      	adds	r0, r5, #0
 800bab6:	f7f4 fd25 	bl	8000504 <__aeabi_fcmpgt>
		return H0FR6_ERR_Wrong_Value;
 800baba:	2402      	movs	r4, #2
	if ( dutyCycle < 0 || dutyCycle > 100 )
 800babc:	2800      	cmp	r0, #0
 800babe:	d118      	bne.n	800baf2 <Relay_PWM+0x4e>
	result = Set_Relay_PWM(Relay_PWM_DEF_FREQ, dutyCycle);
 800bac0:	1c29      	adds	r1, r5, #0
 800bac2:	480e      	ldr	r0, [pc, #56]	; (800bafc <Relay_PWM+0x58>)
 800bac4:	f7ff feda 	bl	800b87c <Set_Relay_PWM>
 800bac8:	1e04      	subs	r4, r0, #0
	if (result == H0FR6_OK)
 800baca:	d112      	bne.n	800baf2 <Relay_PWM+0x4e>
		Relay_OldDC = dutyCycle;
 800bacc:	4b0c      	ldr	r3, [pc, #48]	; (800bb00 <Relay_PWM+0x5c>)
 800bace:	601d      	str	r5, [r3, #0]
		Relay_state = STATE_PWM; Relay_Oldstate = Relay_state;			
 800bad0:	2302      	movs	r3, #2
 800bad2:	4a0c      	ldr	r2, [pc, #48]	; (800bb04 <Relay_PWM+0x60>)
 800bad4:	7013      	strb	r3, [r2, #0]
 800bad6:	4a0c      	ldr	r2, [pc, #48]	; (800bb08 <Relay_PWM+0x64>)
 800bad8:	7013      	strb	r3, [r2, #0]
		if (RelayindMode) IND_ON();
 800bada:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <Relay_PWM+0x68>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <Relay_PWM+0x4e>
 800bae2:	2180      	movs	r1, #128	; 0x80
 800bae4:	2201      	movs	r2, #1
 800bae6:	01c9      	lsls	r1, r1, #7
 800bae8:	4809      	ldr	r0, [pc, #36]	; (800bb10 <Relay_PWM+0x6c>)
 800baea:	f004 fe27 	bl	801073c <HAL_GPIO_WritePin>
 800baee:	e000      	b.n	800baf2 <Relay_PWM+0x4e>
		return H0FR6_ERR_Wrong_Value;
 800baf0:	2402      	movs	r4, #2
}
 800baf2:	0020      	movs	r0, r4
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	42c80000 	.word	0x42c80000
 800bafc:	00005dc0 	.word	0x00005dc0
 800bb00:	20006a1c 	.word	0x20006a1c
 800bb04:	2000162c 	.word	0x2000162c
 800bb08:	2000003d 	.word	0x2000003d
 800bb0c:	2000162d 	.word	0x2000162d
 800bb10:	48000800 	.word	0x48000800

0800bb14 <Relay_toggle>:
{	
 800bb14:	b510      	push	{r4, lr}
	if (Relay_state) 
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <Relay_toggle+0x34>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d107      	bne.n	800bb2e <Relay_toggle+0x1a>
		if (Relay_Oldstate == STATE_ON)
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <Relay_toggle+0x38>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d006      	beq.n	800bb34 <Relay_toggle+0x20>
	Module_Status result = H0FR6_OK;	
 800bb26:	2000      	movs	r0, #0
		else if (Relay_Oldstate == STATE_PWM)
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d008      	beq.n	800bb3e <Relay_toggle+0x2a>
}
 800bb2c:	bd10      	pop	{r4, pc}
		result = Relay_off();
 800bb2e:	f7ff ff73 	bl	800ba18 <Relay_off>
 800bb32:	e7fb      	b.n	800bb2c <Relay_toggle+0x18>
			result = Relay_on(portMAX_DELAY);
 800bb34:	2001      	movs	r0, #1
 800bb36:	4240      	negs	r0, r0
 800bb38:	f7ff fed2 	bl	800b8e0 <Relay_on>
 800bb3c:	e7f6      	b.n	800bb2c <Relay_toggle+0x18>
			result = Relay_PWM(Relay_OldDC);
 800bb3e:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <Relay_toggle+0x3c>)
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f7ff ffaf 	bl	800baa4 <Relay_PWM>
 800bb46:	e7f1      	b.n	800bb2c <Relay_toggle+0x18>
 800bb48:	2000162c 	.word	0x2000162c
 800bb4c:	2000003d 	.word	0x2000003d
 800bb50:	20006a1c 	.word	0x20006a1c

0800bb54 <toggleCommand>:
{
 800bb54:	b510      	push	{r4, lr}
 800bb56:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800bb58:	d101      	bne.n	800bb5e <toggleCommand+0xa>
 800bb5a:	b672      	cpsid	i
 800bb5c:	e7fe      	b.n	800bb5c <toggleCommand+0x8>
	result = Relay_toggle();	
 800bb5e:	f7ff ffd9 	bl	800bb14 <Relay_toggle>
	if (result == H0FR6_OK) {
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d10e      	bne.n	800bb84 <toggleCommand+0x30>
		if (Relay_state) {
 800bb66:	4b08      	ldr	r3, [pc, #32]	; (800bb88 <toggleCommand+0x34>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <toggleCommand+0x26>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK0Message);
 800bb6e:	2222      	movs	r2, #34	; 0x22
 800bb70:	4906      	ldr	r1, [pc, #24]	; (800bb8c <toggleCommand+0x38>)
 800bb72:	0020      	movs	r0, r4
 800bb74:	f007 f93b 	bl	8012dee <memcpy>
 800bb78:	e004      	b.n	800bb84 <toggleCommand+0x30>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcOK1Message);
 800bb7a:	2221      	movs	r2, #33	; 0x21
 800bb7c:	4904      	ldr	r1, [pc, #16]	; (800bb90 <toggleCommand+0x3c>)
 800bb7e:	0020      	movs	r0, r4
 800bb80:	f007 f935 	bl	8012dee <memcpy>
}
 800bb84:	2000      	movs	r0, #0
 800bb86:	bd10      	pop	{r4, pc}
 800bb88:	2000162c 	.word	0x2000162c
 800bb8c:	0801a06c 	.word	0x0801a06c
 800bb90:	0801a34c 	.word	0x0801a34c

0800bb94 <Module_MessagingTask>:
{
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	46ce      	mov	lr, r9
 800bb98:	4647      	mov	r7, r8
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	ab08      	add	r3, sp, #32
 800bb9e:	781e      	ldrb	r6, [r3, #0]
	switch (code)
 800bba0:	4b2c      	ldr	r3, [pc, #176]	; (800bc54 <Module_MessagingTask+0xc0>)
 800bba2:	4298      	cmp	r0, r3
 800bba4:	d04c      	beq.n	800bc40 <Module_MessagingTask+0xac>
 800bba6:	d92e      	bls.n	800bc06 <Module_MessagingTask+0x72>
 800bba8:	23bc      	movs	r3, #188	; 0xbc
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4298      	cmp	r0, r3
 800bbae:	d04b      	beq.n	800bc48 <Module_MessagingTask+0xb4>
 800bbb0:	4b29      	ldr	r3, [pc, #164]	; (800bc58 <Module_MessagingTask+0xc4>)
 800bbb2:	4298      	cmp	r0, r3
 800bbb4:	d14c      	bne.n	800bc50 <Module_MessagingTask+0xbc>
			tempFloat = (float)( ((uint64_t)cMessage[port-1][shift]<<24) + ((uint64_t)cMessage[port-1][1+shift]<<16) + ((uint64_t)cMessage[port-1][2+shift]<<8) + ((uint64_t)cMessage[port-1][3+shift]) );
 800bbb6:	3901      	subs	r1, #1
 800bbb8:	4b28      	ldr	r3, [pc, #160]	; (800bc5c <Module_MessagingTask+0xc8>)
 800bbba:	4699      	mov	r9, r3
 800bbbc:	00c8      	lsls	r0, r1, #3
 800bbbe:	1a43      	subs	r3, r0, r1
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	444b      	add	r3, r9
 800bbc4:	199a      	adds	r2, r3, r6
 800bbc6:	4694      	mov	ip, r2
 800bbc8:	7852      	ldrb	r2, [r2, #1]
 800bbca:	2500      	movs	r5, #0
 800bbcc:	0414      	lsls	r4, r2, #16
 800bbce:	5d9b      	ldrb	r3, [r3, r6]
 800bbd0:	4698      	mov	r8, r3
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	4647      	mov	r7, r8
 800bbd6:	063a      	lsls	r2, r7, #24
 800bbd8:	18a4      	adds	r4, r4, r2
 800bbda:	415d      	adcs	r5, r3
 800bbdc:	4667      	mov	r7, ip
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	1912      	adds	r2, r2, r4
 800bbe4:	416b      	adcs	r3, r5
 800bbe6:	4666      	mov	r6, ip
 800bbe8:	78b1      	ldrb	r1, [r6, #2]
 800bbea:	2500      	movs	r5, #0
 800bbec:	020c      	lsls	r4, r1, #8
 800bbee:	1912      	adds	r2, r2, r4
 800bbf0:	416b      	adcs	r3, r5
 800bbf2:	0010      	movs	r0, r2
 800bbf4:	0019      	movs	r1, r3
 800bbf6:	f7f4 fd19 	bl	800062c <__aeabi_ul2f>
 800bbfa:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <Module_MessagingTask+0xcc>)
 800bbfc:	6018      	str	r0, [r3, #0]
			Relay_PWM(tempFloat);
 800bbfe:	f7ff ff51 	bl	800baa4 <Relay_PWM>
	Module_Status result = H0FR6_OK; 
 800bc02:	2000      	movs	r0, #0
			break;
 800bc04:	e018      	b.n	800bc38 <Module_MessagingTask+0xa4>
	switch (code)
 800bc06:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <Module_MessagingTask+0xd0>)
 800bc08:	4298      	cmp	r0, r3
 800bc0a:	d121      	bne.n	800bc50 <Module_MessagingTask+0xbc>
			temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];						
 800bc0c:	3901      	subs	r1, #1
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <Module_MessagingTask+0xc8>)
 800bc10:	00ca      	lsls	r2, r1, #3
 800bc12:	1a54      	subs	r4, r2, r1
 800bc14:	00e4      	lsls	r4, r4, #3
 800bc16:	191c      	adds	r4, r3, r4
 800bc18:	19a5      	adds	r5, r4, r6
 800bc1a:	7868      	ldrb	r0, [r5, #1]
 800bc1c:	0400      	lsls	r0, r0, #16
 800bc1e:	5da4      	ldrb	r4, [r4, r6]
 800bc20:	0624      	lsls	r4, r4, #24
 800bc22:	1900      	adds	r0, r0, r4
 800bc24:	78ec      	ldrb	r4, [r5, #3]
 800bc26:	1900      	adds	r0, r0, r4
 800bc28:	78ab      	ldrb	r3, [r5, #2]
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	18c0      	adds	r0, r0, r3
 800bc2e:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <Module_MessagingTask+0xd4>)
 800bc30:	6018      	str	r0, [r3, #0]
			Relay_on(temp32);
 800bc32:	f7ff fe55 	bl	800b8e0 <Relay_on>
	Module_Status result = H0FR6_OK; 
 800bc36:	2000      	movs	r0, #0
}
 800bc38:	bc0c      	pop	{r2, r3}
 800bc3a:	4690      	mov	r8, r2
 800bc3c:	4699      	mov	r9, r3
 800bc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Relay_off();
 800bc40:	f7ff feea 	bl	800ba18 <Relay_off>
	Module_Status result = H0FR6_OK; 
 800bc44:	2000      	movs	r0, #0
			break;
 800bc46:	e7f7      	b.n	800bc38 <Module_MessagingTask+0xa4>
			Relay_toggle();
 800bc48:	f7ff ff64 	bl	800bb14 <Relay_toggle>
	Module_Status result = H0FR6_OK; 
 800bc4c:	2000      	movs	r0, #0
			break;
 800bc4e:	e7f3      	b.n	800bc38 <Module_MessagingTask+0xa4>
			result = H0FR6_ERR_UnknownMessage;
 800bc50:	2001      	movs	r0, #1
 800bc52:	e7f1      	b.n	800bc38 <Module_MessagingTask+0xa4>
 800bc54:	000002ef 	.word	0x000002ef
 800bc58:	000002f1 	.word	0x000002f1
 800bc5c:	20000d48 	.word	0x20000d48
 800bc60:	20006b3c 	.word	0x20006b3c
 800bc64:	000002ee 	.word	0x000002ee
 800bc68:	20006b40 	.word	0x20006b40

0800bc6c <pwmCommand>:

/*-----------------------------------------------------------*/
#ifdef H0FR6
portBASE_TYPE pwmCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800bc6c:	b530      	push	{r4, r5, lr}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	0005      	movs	r5, r0
 800bc72:	0010      	movs	r0, r2
	Module_Status result = H0FR6_OK;
	
	int8_t *pcParameterString1; portBASE_TYPE xParameterStringLength1 = 0; 
 800bc74:	2300      	movs	r3, #0
 800bc76:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	d101      	bne.n	800bc80 <pwmCommand+0x14>
 800bc7c:	b672      	cpsid	i
 800bc7e:	e7fe      	b.n	800bc7e <pwmCommand+0x12>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter
 800bc80:	aa01      	add	r2, sp, #4
 800bc82:	2101      	movs	r1, #1
 800bc84:	f001 fd70 	bl	800d768 <FreeRTOS_CLIGetParameter>
									pcCommandString,		/* The command string itself. */
									1,						/* Return the first parameter. */
									&xParameterStringLength1	/* Store the parameter string length. */
								);
	
	dutycycle = ( float ) atof( ( char * ) pcParameterString1 );
 800bc88:	f006 fe1c 	bl	80128c4 <atof>
 800bc8c:	f7f7 f8d2 	bl	8002e34 <__aeabi_d2f>
 800bc90:	1c04      	adds	r4, r0, #0
	
	if (dutycycle < 0.0f || dutycycle > 100.0f)
 800bc92:	2100      	movs	r1, #0
 800bc94:	f7f4 fc22 	bl	80004dc <__aeabi_fcmplt>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d105      	bne.n	800bca8 <pwmCommand+0x3c>
 800bc9c:	490f      	ldr	r1, [pc, #60]	; (800bcdc <pwmCommand+0x70>)
 800bc9e:	1c20      	adds	r0, r4, #0
 800bca0:	f7f4 fc30 	bl	8000504 <__aeabi_fcmpgt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d005      	beq.n	800bcb4 <pwmCommand+0x48>
	
	/* Respond to the command */
	if (result == H0FR6_OK) {
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, dutycycle);
	} else if (result == H0FR6_ERR_Wrong_Value) {
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcWrongValue);
 800bca8:	2236      	movs	r2, #54	; 0x36
 800bcaa:	490d      	ldr	r1, [pc, #52]	; (800bce0 <pwmCommand+0x74>)
 800bcac:	0028      	movs	r0, r5
 800bcae:	f007 f89e 	bl	8012dee <memcpy>
 800bcb2:	e00d      	b.n	800bcd0 <pwmCommand+0x64>
		result = Relay_PWM(dutycycle);	
 800bcb4:	1c20      	adds	r0, r4, #0
 800bcb6:	f7ff fef5 	bl	800baa4 <Relay_PWM>
	if (result == H0FR6_OK) {
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d10b      	bne.n	800bcd6 <pwmCommand+0x6a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcOKMessage, dutycycle);
 800bcbe:	1c20      	adds	r0, r4, #0
 800bcc0:	f7f7 f866 	bl	8002d90 <__aeabi_f2d>
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	000b      	movs	r3, r1
 800bcc8:	4906      	ldr	r1, [pc, #24]	; (800bce4 <pwmCommand+0x78>)
 800bcca:	0028      	movs	r0, r5
 800bccc:	f007 fa92 	bl	80131f4 <sprintf>
	}
	
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	b003      	add	sp, #12
 800bcd4:	bd30      	pop	{r4, r5, pc}
	} else if (result == H0FR6_ERR_Wrong_Value) {
 800bcd6:	2802      	cmp	r0, #2
 800bcd8:	d1fa      	bne.n	800bcd0 <pwmCommand+0x64>
 800bcda:	e7e5      	b.n	800bca8 <pwmCommand+0x3c>
 800bcdc:	42c80000 	.word	0x42c80000
 800bce0:	0801a164 	.word	0x0801a164
 800bce4:	0801a120 	.word	0x0801a120

0800bce8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bce8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bcea:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bcec:	2300      	movs	r3, #0
 800bcee:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bcf0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bcf2:	2280      	movs	r2, #128	; 0x80
 800bcf4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bcf6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bcf8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bcfa:	3320      	adds	r3, #32
 800bcfc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bcfe:	2380      	movs	r3, #128	; 0x80
 800bd00:	019b      	lsls	r3, r3, #6
 800bd02:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bd04:	f003 fe08 	bl	800f918 <HAL_DMA_Init>
}
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bd0a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bd0c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bd0e:	2310      	movs	r3, #16
 800bd10:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bd16:	2280      	movs	r2, #128	; 0x80
 800bd18:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd1a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd1c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bd1e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bd20:	2380      	movs	r3, #128	; 0x80
 800bd22:	019b      	lsls	r3, r3, #6
 800bd24:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bd26:	f003 fdf7 	bl	800f918 <HAL_DMA_Init>
}
 800bd2a:	bd10      	pop	{r4, pc}

0800bd2c <DMA_Init>:
{
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800bd30:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <DMA_Init+0x7c>)
 800bd32:	6959      	ldr	r1, [r3, #20]
 800bd34:	2201      	movs	r2, #1
 800bd36:	4311      	orrs	r1, r2
 800bd38:	6159      	str	r1, [r3, #20]
 800bd3a:	6959      	ldr	r1, [r3, #20]
 800bd3c:	400a      	ands	r2, r1
 800bd3e:	9200      	str	r2, [sp, #0]
 800bd40:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800bd42:	6959      	ldr	r1, [r3, #20]
 800bd44:	2202      	movs	r2, #2
 800bd46:	4311      	orrs	r1, r2
 800bd48:	6159      	str	r1, [r3, #20]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	401a      	ands	r2, r3
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800bd52:	4c16      	ldr	r4, [pc, #88]	; (800bdac <DMA_Init+0x80>)
 800bd54:	4916      	ldr	r1, [pc, #88]	; (800bdb0 <DMA_Init+0x84>)
 800bd56:	0020      	movs	r0, r4
 800bd58:	f7ff ffc6 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800bd5c:	0020      	movs	r0, r4
 800bd5e:	3038      	adds	r0, #56	; 0x38
 800bd60:	4914      	ldr	r1, [pc, #80]	; (800bdb4 <DMA_Init+0x88>)
 800bd62:	f7ff ffc1 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800bd66:	0020      	movs	r0, r4
 800bd68:	3070      	adds	r0, #112	; 0x70
 800bd6a:	4913      	ldr	r1, [pc, #76]	; (800bdb8 <DMA_Init+0x8c>)
 800bd6c:	f7ff ffbc 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800bd70:	0020      	movs	r0, r4
 800bd72:	30a8      	adds	r0, #168	; 0xa8
 800bd74:	4911      	ldr	r1, [pc, #68]	; (800bdbc <DMA_Init+0x90>)
 800bd76:	f7ff ffb7 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	30e0      	adds	r0, #224	; 0xe0
 800bd7e:	4910      	ldr	r1, [pc, #64]	; (800bdc0 <DMA_Init+0x94>)
 800bd80:	f7ff ffb2 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800bd84:	4c0f      	ldr	r4, [pc, #60]	; (800bdc4 <DMA_Init+0x98>)
 800bd86:	4910      	ldr	r1, [pc, #64]	; (800bdc8 <DMA_Init+0x9c>)
 800bd88:	0020      	movs	r0, r4
 800bd8a:	f7ff ffbe 	bl	800bd0a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800bd8e:	0020      	movs	r0, r4
 800bd90:	3038      	adds	r0, #56	; 0x38
 800bd92:	490e      	ldr	r1, [pc, #56]	; (800bdcc <DMA_Init+0xa0>)
 800bd94:	f7ff ffb9 	bl	800bd0a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800bd98:	0020      	movs	r0, r4
 800bd9a:	3070      	adds	r0, #112	; 0x70
 800bd9c:	490c      	ldr	r1, [pc, #48]	; (800bdd0 <DMA_Init+0xa4>)
 800bd9e:	f7ff ffb4 	bl	800bd0a <DMA_MSG_TX_CH_Init>
}
 800bda2:	b002      	add	sp, #8
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	40021000 	.word	0x40021000
 800bdac:	20001634 	.word	0x20001634
 800bdb0:	40020008 	.word	0x40020008
 800bdb4:	40020030 	.word	0x40020030
 800bdb8:	40020058 	.word	0x40020058
 800bdbc:	4002006c 	.word	0x4002006c
 800bdc0:	4002041c 	.word	0x4002041c
 800bdc4:	20001784 	.word	0x20001784
 800bdc8:	4002001c 	.word	0x4002001c
 800bdcc:	40020044 	.word	0x40020044
 800bdd0:	40020080 	.word	0x40020080

0800bdd4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bdd4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bdd6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bddc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800bdde:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bde0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bde2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bde4:	3320      	adds	r3, #32
 800bde6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bde8:	2380      	movs	r3, #128	; 0x80
 800bdea:	015b      	lsls	r3, r3, #5
 800bdec:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bdee:	f003 fd93 	bl	800f918 <HAL_DMA_Init>
}
 800bdf2:	bd10      	pop	{r4, pc}

0800bdf4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800bdf4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bdf6:	6803      	ldr	r3, [r0, #0]
 800bdf8:	4a20      	ldr	r2, [pc, #128]	; (800be7c <SetupDMAInterrupts+0x88>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d020      	beq.n	800be40 <SetupDMAInterrupts+0x4c>
 800bdfe:	d827      	bhi.n	800be50 <SetupDMAInterrupts+0x5c>
 800be00:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <SetupDMAInterrupts+0x8c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d00e      	beq.n	800be24 <SetupDMAInterrupts+0x30>
 800be06:	d815      	bhi.n	800be34 <SetupDMAInterrupts+0x40>
 800be08:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <SetupDMAInterrupts+0x90>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d107      	bne.n	800be1e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800be0e:	2200      	movs	r2, #0
 800be10:	2009      	movs	r0, #9
 800be12:	f003 fbe3 	bl	800f5dc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800be16:	2009      	movs	r0, #9
 800be18:	f003 fc14 	bl	800f644 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800be1c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800be1e:	4a1a      	ldr	r2, [pc, #104]	; (800be88 <SetupDMAInterrupts+0x94>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d1fb      	bne.n	800be1c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800be24:	2200      	movs	r2, #0
 800be26:	200a      	movs	r0, #10
 800be28:	f003 fbd8 	bl	800f5dc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800be2c:	200a      	movs	r0, #10
 800be2e:	f003 fc09 	bl	800f644 <HAL_NVIC_EnableIRQ>
			break;
 800be32:	e7f3      	b.n	800be1c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800be34:	4a15      	ldr	r2, [pc, #84]	; (800be8c <SetupDMAInterrupts+0x98>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d002      	beq.n	800be40 <SetupDMAInterrupts+0x4c>
 800be3a:	4a15      	ldr	r2, [pc, #84]	; (800be90 <SetupDMAInterrupts+0x9c>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d1ed      	bne.n	800be1c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800be40:	2200      	movs	r2, #0
 800be42:	200b      	movs	r0, #11
 800be44:	f003 fbca 	bl	800f5dc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800be48:	200b      	movs	r0, #11
 800be4a:	f003 fbfb 	bl	800f644 <HAL_NVIC_EnableIRQ>
}
 800be4e:	e7e5      	b.n	800be1c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800be50:	4a10      	ldr	r2, [pc, #64]	; (800be94 <SetupDMAInterrupts+0xa0>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d0e6      	beq.n	800be24 <SetupDMAInterrupts+0x30>
 800be56:	d909      	bls.n	800be6c <SetupDMAInterrupts+0x78>
 800be58:	4a0f      	ldr	r2, [pc, #60]	; (800be98 <SetupDMAInterrupts+0xa4>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d0f0      	beq.n	800be40 <SetupDMAInterrupts+0x4c>
 800be5e:	4a0f      	ldr	r2, [pc, #60]	; (800be9c <SetupDMAInterrupts+0xa8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d0ed      	beq.n	800be40 <SetupDMAInterrupts+0x4c>
 800be64:	4a0e      	ldr	r2, [pc, #56]	; (800bea0 <SetupDMAInterrupts+0xac>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d1d8      	bne.n	800be1c <SetupDMAInterrupts+0x28>
 800be6a:	e7e9      	b.n	800be40 <SetupDMAInterrupts+0x4c>
 800be6c:	4a0d      	ldr	r2, [pc, #52]	; (800bea4 <SetupDMAInterrupts+0xb0>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d0e6      	beq.n	800be40 <SetupDMAInterrupts+0x4c>
 800be72:	4a0d      	ldr	r2, [pc, #52]	; (800bea8 <SetupDMAInterrupts+0xb4>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d0d5      	beq.n	800be24 <SetupDMAInterrupts+0x30>
 800be78:	e7d0      	b.n	800be1c <SetupDMAInterrupts+0x28>
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	4002006c 	.word	0x4002006c
 800be80:	40020030 	.word	0x40020030
 800be84:	40020008 	.word	0x40020008
 800be88:	4002001c 	.word	0x4002001c
 800be8c:	40020044 	.word	0x40020044
 800be90:	40020058 	.word	0x40020058
 800be94:	4002041c 	.word	0x4002041c
 800be98:	40020444 	.word	0x40020444
 800be9c:	40020458 	.word	0x40020458
 800bea0:	40020430 	.word	0x40020430
 800bea4:	40020080 	.word	0x40020080
 800bea8:	40020408 	.word	0x40020408

0800beac <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800beac:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800beae:	6803      	ldr	r3, [r0, #0]
 800beb0:	4a1a      	ldr	r2, [pc, #104]	; (800bf1c <UnSetupDMAInterrupts+0x70>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d018      	beq.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800beb6:	d81b      	bhi.n	800bef0 <UnSetupDMAInterrupts+0x44>
 800beb8:	4a19      	ldr	r2, [pc, #100]	; (800bf20 <UnSetupDMAInterrupts+0x74>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d00a      	beq.n	800bed4 <UnSetupDMAInterrupts+0x28>
 800bebe:	d80d      	bhi.n	800bedc <UnSetupDMAInterrupts+0x30>
 800bec0:	4a18      	ldr	r2, [pc, #96]	; (800bf24 <UnSetupDMAInterrupts+0x78>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d103      	bne.n	800bece <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bec6:	2009      	movs	r0, #9
 800bec8:	f003 fbc6 	bl	800f658 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800becc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bece:	4a16      	ldr	r2, [pc, #88]	; (800bf28 <UnSetupDMAInterrupts+0x7c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d1fb      	bne.n	800becc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bed4:	200a      	movs	r0, #10
 800bed6:	f003 fbbf 	bl	800f658 <HAL_NVIC_DisableIRQ>
			break;
 800beda:	e7f7      	b.n	800becc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <UnSetupDMAInterrupts+0x80>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d002      	beq.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800bee2:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <UnSetupDMAInterrupts+0x84>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d1f1      	bne.n	800becc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bee8:	200b      	movs	r0, #11
 800beea:	f003 fbb5 	bl	800f658 <HAL_NVIC_DisableIRQ>
}
 800beee:	e7ed      	b.n	800becc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bef0:	4a10      	ldr	r2, [pc, #64]	; (800bf34 <UnSetupDMAInterrupts+0x88>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d0ee      	beq.n	800bed4 <UnSetupDMAInterrupts+0x28>
 800bef6:	d909      	bls.n	800bf0c <UnSetupDMAInterrupts+0x60>
 800bef8:	4a0f      	ldr	r2, [pc, #60]	; (800bf38 <UnSetupDMAInterrupts+0x8c>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d0f4      	beq.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800befe:	4a0f      	ldr	r2, [pc, #60]	; (800bf3c <UnSetupDMAInterrupts+0x90>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d0f1      	beq.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800bf04:	4a0e      	ldr	r2, [pc, #56]	; (800bf40 <UnSetupDMAInterrupts+0x94>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d1e0      	bne.n	800becc <UnSetupDMAInterrupts+0x20>
 800bf0a:	e7ed      	b.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800bf0c:	4a0d      	ldr	r2, [pc, #52]	; (800bf44 <UnSetupDMAInterrupts+0x98>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d0ea      	beq.n	800bee8 <UnSetupDMAInterrupts+0x3c>
 800bf12:	4a0d      	ldr	r2, [pc, #52]	; (800bf48 <UnSetupDMAInterrupts+0x9c>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d0dd      	beq.n	800bed4 <UnSetupDMAInterrupts+0x28>
 800bf18:	e7d8      	b.n	800becc <UnSetupDMAInterrupts+0x20>
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	4002006c 	.word	0x4002006c
 800bf20:	40020030 	.word	0x40020030
 800bf24:	40020008 	.word	0x40020008
 800bf28:	4002001c 	.word	0x4002001c
 800bf2c:	40020044 	.word	0x40020044
 800bf30:	40020058 	.word	0x40020058
 800bf34:	4002041c 	.word	0x4002041c
 800bf38:	40020444 	.word	0x40020444
 800bf3c:	40020458 	.word	0x40020458
 800bf40:	40020430 	.word	0x40020430
 800bf44:	40020080 	.word	0x40020080
 800bf48:	40020408 	.word	0x40020408

0800bf4c <DMA_MSG_TX_UnSetup>:
{	
 800bf4c:	b510      	push	{r4, lr}
 800bf4e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bf50:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bf52:	f7ff ffab 	bl	800beac <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bf56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bf58:	2300      	movs	r3, #0
 800bf5a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800bf5c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bf5e:	bd10      	pop	{r4, pc}

0800bf60 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800bf60:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bf62:	6803      	ldr	r3, [r0, #0]
 800bf64:	4abd      	ldr	r2, [pc, #756]	; (800c25c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d02f      	beq.n	800bfca <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bf6a:	4abd      	ldr	r2, [pc, #756]	; (800c260 <RemapAndLinkDMAtoUARTRx+0x300>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d100      	bne.n	800bf72 <RemapAndLinkDMAtoUARTRx+0x12>
 800bf70:	e087      	b.n	800c082 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bf72:	4abc      	ldr	r2, [pc, #752]	; (800c264 <RemapAndLinkDMAtoUARTRx+0x304>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d100      	bne.n	800bf7a <RemapAndLinkDMAtoUARTRx+0x1a>
 800bf78:	e0dc      	b.n	800c134 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bf7a:	4abb      	ldr	r2, [pc, #748]	; (800c268 <RemapAndLinkDMAtoUARTRx+0x308>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d000      	beq.n	800bf82 <RemapAndLinkDMAtoUARTRx+0x22>
 800bf80:	e18a      	b.n	800c298 <RemapAndLinkDMAtoUARTRx+0x338>
 800bf82:	680b      	ldr	r3, [r1, #0]
 800bf84:	4ab9      	ldr	r2, [pc, #740]	; (800c26c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d100      	bne.n	800bf8c <RemapAndLinkDMAtoUARTRx+0x2c>
 800bf8a:	e12d      	b.n	800c1e8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800bf8c:	4ab8      	ldr	r2, [pc, #736]	; (800c270 <RemapAndLinkDMAtoUARTRx+0x310>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d100      	bne.n	800bf94 <RemapAndLinkDMAtoUARTRx+0x34>
 800bf92:	e134      	b.n	800c1fe <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800bf94:	4ab7      	ldr	r2, [pc, #732]	; (800c274 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d100      	bne.n	800bf9c <RemapAndLinkDMAtoUARTRx+0x3c>
 800bf9a:	e13c      	b.n	800c216 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800bf9c:	4ab6      	ldr	r2, [pc, #728]	; (800c278 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d100      	bne.n	800bfa4 <RemapAndLinkDMAtoUARTRx+0x44>
 800bfa2:	e144      	b.n	800c22e <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800bfa4:	4ab5      	ldr	r2, [pc, #724]	; (800c27c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d100      	bne.n	800bfac <RemapAndLinkDMAtoUARTRx+0x4c>
 800bfaa:	e14c      	b.n	800c246 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800bfac:	4ab4      	ldr	r2, [pc, #720]	; (800c280 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d11e      	bne.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800bfb2:	4ab4      	ldr	r2, [pc, #720]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bfb4:	23a8      	movs	r3, #168	; 0xa8
 800bfb6:	58d4      	ldr	r4, [r2, r3]
 800bfb8:	4db3      	ldr	r5, [pc, #716]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bfba:	402c      	ands	r4, r5
 800bfbc:	50d4      	str	r4, [r2, r3]
 800bfbe:	58d5      	ldr	r5, [r2, r3]
 800bfc0:	24b0      	movs	r4, #176	; 0xb0
 800bfc2:	0124      	lsls	r4, r4, #4
 800bfc4:	432c      	orrs	r4, r5
 800bfc6:	50d4      	str	r4, [r2, r3]
 800bfc8:	e012      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bfca:	680b      	ldr	r3, [r1, #0]
 800bfcc:	4aa7      	ldr	r2, [pc, #668]	; (800c26c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d011      	beq.n	800bff6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bfd2:	4aa7      	ldr	r2, [pc, #668]	; (800c270 <RemapAndLinkDMAtoUARTRx+0x310>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d019      	beq.n	800c00c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bfd8:	4aa6      	ldr	r2, [pc, #664]	; (800c274 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d022      	beq.n	800c024 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bfde:	4aa6      	ldr	r2, [pc, #664]	; (800c278 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d02b      	beq.n	800c03c <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bfe4:	4aa5      	ldr	r2, [pc, #660]	; (800c27c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d034      	beq.n	800c054 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bfea:	4aa5      	ldr	r2, [pc, #660]	; (800c280 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d03c      	beq.n	800c06a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800bff0:	6641      	str	r1, [r0, #100]	; 0x64
 800bff2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bff6:	4aa5      	ldr	r2, [pc, #660]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bff8:	23a8      	movs	r3, #168	; 0xa8
 800bffa:	58d4      	ldr	r4, [r2, r3]
 800bffc:	250f      	movs	r5, #15
 800bffe:	43ac      	bics	r4, r5
 800c000:	50d4      	str	r4, [r2, r3]
 800c002:	58d4      	ldr	r4, [r2, r3]
 800c004:	3d07      	subs	r5, #7
 800c006:	432c      	orrs	r4, r5
 800c008:	50d4      	str	r4, [r2, r3]
 800c00a:	e7f1      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c00c:	4a9f      	ldr	r2, [pc, #636]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c00e:	23a8      	movs	r3, #168	; 0xa8
 800c010:	58d4      	ldr	r4, [r2, r3]
 800c012:	4d9d      	ldr	r5, [pc, #628]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c014:	402c      	ands	r4, r5
 800c016:	50d4      	str	r4, [r2, r3]
 800c018:	58d5      	ldr	r5, [r2, r3]
 800c01a:	2480      	movs	r4, #128	; 0x80
 800c01c:	0124      	lsls	r4, r4, #4
 800c01e:	432c      	orrs	r4, r5
 800c020:	50d4      	str	r4, [r2, r3]
 800c022:	e7e5      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c024:	4a99      	ldr	r2, [pc, #612]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c026:	23a8      	movs	r3, #168	; 0xa8
 800c028:	58d4      	ldr	r4, [r2, r3]
 800c02a:	4d99      	ldr	r5, [pc, #612]	; (800c290 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c02c:	402c      	ands	r4, r5
 800c02e:	50d4      	str	r4, [r2, r3]
 800c030:	58d5      	ldr	r5, [r2, r3]
 800c032:	2480      	movs	r4, #128	; 0x80
 800c034:	0324      	lsls	r4, r4, #12
 800c036:	432c      	orrs	r4, r5
 800c038:	50d4      	str	r4, [r2, r3]
 800c03a:	e7d9      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c03c:	4a93      	ldr	r2, [pc, #588]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c03e:	23a8      	movs	r3, #168	; 0xa8
 800c040:	58d4      	ldr	r4, [r2, r3]
 800c042:	4d94      	ldr	r5, [pc, #592]	; (800c294 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c044:	402c      	ands	r4, r5
 800c046:	50d4      	str	r4, [r2, r3]
 800c048:	58d5      	ldr	r5, [r2, r3]
 800c04a:	2480      	movs	r4, #128	; 0x80
 800c04c:	0424      	lsls	r4, r4, #16
 800c04e:	432c      	orrs	r4, r5
 800c050:	50d4      	str	r4, [r2, r3]
 800c052:	e7cd      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c054:	4a8b      	ldr	r2, [pc, #556]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c056:	23a8      	movs	r3, #168	; 0xa8
 800c058:	58d4      	ldr	r4, [r2, r3]
 800c05a:	25f0      	movs	r5, #240	; 0xf0
 800c05c:	43ac      	bics	r4, r5
 800c05e:	50d4      	str	r4, [r2, r3]
 800c060:	58d4      	ldr	r4, [r2, r3]
 800c062:	3d70      	subs	r5, #112	; 0x70
 800c064:	432c      	orrs	r4, r5
 800c066:	50d4      	str	r4, [r2, r3]
 800c068:	e7c2      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c06a:	4a86      	ldr	r2, [pc, #536]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c06c:	23a8      	movs	r3, #168	; 0xa8
 800c06e:	58d4      	ldr	r4, [r2, r3]
 800c070:	4d85      	ldr	r5, [pc, #532]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c072:	402c      	ands	r4, r5
 800c074:	50d4      	str	r4, [r2, r3]
 800c076:	58d5      	ldr	r5, [r2, r3]
 800c078:	2480      	movs	r4, #128	; 0x80
 800c07a:	0124      	lsls	r4, r4, #4
 800c07c:	432c      	orrs	r4, r5
 800c07e:	50d4      	str	r4, [r2, r3]
 800c080:	e7b6      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c082:	680b      	ldr	r3, [r1, #0]
 800c084:	4a79      	ldr	r2, [pc, #484]	; (800c26c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d01a      	beq.n	800c0c0 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c08a:	4a79      	ldr	r2, [pc, #484]	; (800c270 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d022      	beq.n	800c0d6 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c090:	4a78      	ldr	r2, [pc, #480]	; (800c274 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d02b      	beq.n	800c0ee <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c096:	4a78      	ldr	r2, [pc, #480]	; (800c278 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d034      	beq.n	800c106 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c09c:	4a77      	ldr	r2, [pc, #476]	; (800c27c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d03d      	beq.n	800c11e <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c0a2:	4a77      	ldr	r2, [pc, #476]	; (800c280 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d1a3      	bne.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c0a8:	4a76      	ldr	r2, [pc, #472]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c0aa:	23a8      	movs	r3, #168	; 0xa8
 800c0ac:	58d4      	ldr	r4, [r2, r3]
 800c0ae:	4d76      	ldr	r5, [pc, #472]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c0b0:	402c      	ands	r4, r5
 800c0b2:	50d4      	str	r4, [r2, r3]
 800c0b4:	58d5      	ldr	r5, [r2, r3]
 800c0b6:	2490      	movs	r4, #144	; 0x90
 800c0b8:	0124      	lsls	r4, r4, #4
 800c0ba:	432c      	orrs	r4, r5
 800c0bc:	50d4      	str	r4, [r2, r3]
 800c0be:	e797      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c0c0:	4a72      	ldr	r2, [pc, #456]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0c2:	23a8      	movs	r3, #168	; 0xa8
 800c0c4:	58d4      	ldr	r4, [r2, r3]
 800c0c6:	250f      	movs	r5, #15
 800c0c8:	43ac      	bics	r4, r5
 800c0ca:	50d4      	str	r4, [r2, r3]
 800c0cc:	58d4      	ldr	r4, [r2, r3]
 800c0ce:	3d06      	subs	r5, #6
 800c0d0:	432c      	orrs	r4, r5
 800c0d2:	50d4      	str	r4, [r2, r3]
 800c0d4:	e78c      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c0d6:	4a6d      	ldr	r2, [pc, #436]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0d8:	23a8      	movs	r3, #168	; 0xa8
 800c0da:	58d4      	ldr	r4, [r2, r3]
 800c0dc:	4d6a      	ldr	r5, [pc, #424]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c0de:	402c      	ands	r4, r5
 800c0e0:	50d4      	str	r4, [r2, r3]
 800c0e2:	58d5      	ldr	r5, [r2, r3]
 800c0e4:	2490      	movs	r4, #144	; 0x90
 800c0e6:	0124      	lsls	r4, r4, #4
 800c0e8:	432c      	orrs	r4, r5
 800c0ea:	50d4      	str	r4, [r2, r3]
 800c0ec:	e780      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c0ee:	4a67      	ldr	r2, [pc, #412]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c0f0:	23a8      	movs	r3, #168	; 0xa8
 800c0f2:	58d4      	ldr	r4, [r2, r3]
 800c0f4:	4d66      	ldr	r5, [pc, #408]	; (800c290 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c0f6:	402c      	ands	r4, r5
 800c0f8:	50d4      	str	r4, [r2, r3]
 800c0fa:	58d5      	ldr	r5, [r2, r3]
 800c0fc:	2490      	movs	r4, #144	; 0x90
 800c0fe:	0324      	lsls	r4, r4, #12
 800c100:	432c      	orrs	r4, r5
 800c102:	50d4      	str	r4, [r2, r3]
 800c104:	e774      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c106:	4a61      	ldr	r2, [pc, #388]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c108:	23a8      	movs	r3, #168	; 0xa8
 800c10a:	58d4      	ldr	r4, [r2, r3]
 800c10c:	4d61      	ldr	r5, [pc, #388]	; (800c294 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c10e:	402c      	ands	r4, r5
 800c110:	50d4      	str	r4, [r2, r3]
 800c112:	58d5      	ldr	r5, [r2, r3]
 800c114:	2490      	movs	r4, #144	; 0x90
 800c116:	0424      	lsls	r4, r4, #16
 800c118:	432c      	orrs	r4, r5
 800c11a:	50d4      	str	r4, [r2, r3]
 800c11c:	e768      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c11e:	4a59      	ldr	r2, [pc, #356]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c120:	23a8      	movs	r3, #168	; 0xa8
 800c122:	58d4      	ldr	r4, [r2, r3]
 800c124:	25f0      	movs	r5, #240	; 0xf0
 800c126:	43ac      	bics	r4, r5
 800c128:	50d4      	str	r4, [r2, r3]
 800c12a:	58d4      	ldr	r4, [r2, r3]
 800c12c:	3d60      	subs	r5, #96	; 0x60
 800c12e:	432c      	orrs	r4, r5
 800c130:	50d4      	str	r4, [r2, r3]
 800c132:	e75d      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c134:	680b      	ldr	r3, [r1, #0]
 800c136:	4a4d      	ldr	r2, [pc, #308]	; (800c26c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d01b      	beq.n	800c174 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c13c:	4a4c      	ldr	r2, [pc, #304]	; (800c270 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d023      	beq.n	800c18a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c142:	4a4c      	ldr	r2, [pc, #304]	; (800c274 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d02c      	beq.n	800c1a2 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c148:	4a4b      	ldr	r2, [pc, #300]	; (800c278 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d035      	beq.n	800c1ba <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c14e:	4a4b      	ldr	r2, [pc, #300]	; (800c27c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d03e      	beq.n	800c1d2 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c154:	4a4a      	ldr	r2, [pc, #296]	; (800c280 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d000      	beq.n	800c15c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800c15a:	e749      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c15c:	4a49      	ldr	r2, [pc, #292]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c15e:	23a8      	movs	r3, #168	; 0xa8
 800c160:	58d4      	ldr	r4, [r2, r3]
 800c162:	4d49      	ldr	r5, [pc, #292]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c164:	402c      	ands	r4, r5
 800c166:	50d4      	str	r4, [r2, r3]
 800c168:	58d5      	ldr	r5, [r2, r3]
 800c16a:	24a0      	movs	r4, #160	; 0xa0
 800c16c:	0124      	lsls	r4, r4, #4
 800c16e:	432c      	orrs	r4, r5
 800c170:	50d4      	str	r4, [r2, r3]
 800c172:	e73d      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c174:	4a45      	ldr	r2, [pc, #276]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c176:	23a8      	movs	r3, #168	; 0xa8
 800c178:	58d4      	ldr	r4, [r2, r3]
 800c17a:	250f      	movs	r5, #15
 800c17c:	43ac      	bics	r4, r5
 800c17e:	50d4      	str	r4, [r2, r3]
 800c180:	58d4      	ldr	r4, [r2, r3]
 800c182:	3d05      	subs	r5, #5
 800c184:	432c      	orrs	r4, r5
 800c186:	50d4      	str	r4, [r2, r3]
 800c188:	e732      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c18a:	4a40      	ldr	r2, [pc, #256]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c18c:	23a8      	movs	r3, #168	; 0xa8
 800c18e:	58d4      	ldr	r4, [r2, r3]
 800c190:	4d3d      	ldr	r5, [pc, #244]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c192:	402c      	ands	r4, r5
 800c194:	50d4      	str	r4, [r2, r3]
 800c196:	58d5      	ldr	r5, [r2, r3]
 800c198:	24a0      	movs	r4, #160	; 0xa0
 800c19a:	0124      	lsls	r4, r4, #4
 800c19c:	432c      	orrs	r4, r5
 800c19e:	50d4      	str	r4, [r2, r3]
 800c1a0:	e726      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c1a2:	4a3a      	ldr	r2, [pc, #232]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c1a4:	23a8      	movs	r3, #168	; 0xa8
 800c1a6:	58d4      	ldr	r4, [r2, r3]
 800c1a8:	4d39      	ldr	r5, [pc, #228]	; (800c290 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c1aa:	402c      	ands	r4, r5
 800c1ac:	50d4      	str	r4, [r2, r3]
 800c1ae:	58d5      	ldr	r5, [r2, r3]
 800c1b0:	24a0      	movs	r4, #160	; 0xa0
 800c1b2:	0324      	lsls	r4, r4, #12
 800c1b4:	432c      	orrs	r4, r5
 800c1b6:	50d4      	str	r4, [r2, r3]
 800c1b8:	e71a      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c1ba:	4a34      	ldr	r2, [pc, #208]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c1bc:	23a8      	movs	r3, #168	; 0xa8
 800c1be:	58d4      	ldr	r4, [r2, r3]
 800c1c0:	4d34      	ldr	r5, [pc, #208]	; (800c294 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c1c2:	402c      	ands	r4, r5
 800c1c4:	50d4      	str	r4, [r2, r3]
 800c1c6:	58d5      	ldr	r5, [r2, r3]
 800c1c8:	24a0      	movs	r4, #160	; 0xa0
 800c1ca:	0424      	lsls	r4, r4, #16
 800c1cc:	432c      	orrs	r4, r5
 800c1ce:	50d4      	str	r4, [r2, r3]
 800c1d0:	e70e      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c1d2:	4a2c      	ldr	r2, [pc, #176]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c1d4:	23a8      	movs	r3, #168	; 0xa8
 800c1d6:	58d4      	ldr	r4, [r2, r3]
 800c1d8:	25f0      	movs	r5, #240	; 0xf0
 800c1da:	43ac      	bics	r4, r5
 800c1dc:	50d4      	str	r4, [r2, r3]
 800c1de:	58d4      	ldr	r4, [r2, r3]
 800c1e0:	3d50      	subs	r5, #80	; 0x50
 800c1e2:	432c      	orrs	r4, r5
 800c1e4:	50d4      	str	r4, [r2, r3]
 800c1e6:	e703      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c1e8:	4a28      	ldr	r2, [pc, #160]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c1ea:	23a8      	movs	r3, #168	; 0xa8
 800c1ec:	58d4      	ldr	r4, [r2, r3]
 800c1ee:	250f      	movs	r5, #15
 800c1f0:	43ac      	bics	r4, r5
 800c1f2:	50d4      	str	r4, [r2, r3]
 800c1f4:	58d4      	ldr	r4, [r2, r3]
 800c1f6:	3d04      	subs	r5, #4
 800c1f8:	432c      	orrs	r4, r5
 800c1fa:	50d4      	str	r4, [r2, r3]
 800c1fc:	e6f8      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c1fe:	4a23      	ldr	r2, [pc, #140]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c200:	23a8      	movs	r3, #168	; 0xa8
 800c202:	58d4      	ldr	r4, [r2, r3]
 800c204:	4d20      	ldr	r5, [pc, #128]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c206:	402c      	ands	r4, r5
 800c208:	50d4      	str	r4, [r2, r3]
 800c20a:	58d5      	ldr	r5, [r2, r3]
 800c20c:	24b0      	movs	r4, #176	; 0xb0
 800c20e:	0124      	lsls	r4, r4, #4
 800c210:	432c      	orrs	r4, r5
 800c212:	50d4      	str	r4, [r2, r3]
 800c214:	e6ec      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c216:	4a1d      	ldr	r2, [pc, #116]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c218:	23a8      	movs	r3, #168	; 0xa8
 800c21a:	58d4      	ldr	r4, [r2, r3]
 800c21c:	4d1c      	ldr	r5, [pc, #112]	; (800c290 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c21e:	402c      	ands	r4, r5
 800c220:	50d4      	str	r4, [r2, r3]
 800c222:	58d5      	ldr	r5, [r2, r3]
 800c224:	24b0      	movs	r4, #176	; 0xb0
 800c226:	0324      	lsls	r4, r4, #12
 800c228:	432c      	orrs	r4, r5
 800c22a:	50d4      	str	r4, [r2, r3]
 800c22c:	e6e0      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c22e:	4a17      	ldr	r2, [pc, #92]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c230:	23a8      	movs	r3, #168	; 0xa8
 800c232:	58d4      	ldr	r4, [r2, r3]
 800c234:	4d17      	ldr	r5, [pc, #92]	; (800c294 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c236:	402c      	ands	r4, r5
 800c238:	50d4      	str	r4, [r2, r3]
 800c23a:	58d5      	ldr	r5, [r2, r3]
 800c23c:	24b0      	movs	r4, #176	; 0xb0
 800c23e:	0424      	lsls	r4, r4, #16
 800c240:	432c      	orrs	r4, r5
 800c242:	50d4      	str	r4, [r2, r3]
 800c244:	e6d4      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c246:	4a0f      	ldr	r2, [pc, #60]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c248:	23a8      	movs	r3, #168	; 0xa8
 800c24a:	58d4      	ldr	r4, [r2, r3]
 800c24c:	25f0      	movs	r5, #240	; 0xf0
 800c24e:	43ac      	bics	r4, r5
 800c250:	50d4      	str	r4, [r2, r3]
 800c252:	58d4      	ldr	r4, [r2, r3]
 800c254:	3d40      	subs	r5, #64	; 0x40
 800c256:	432c      	orrs	r4, r5
 800c258:	50d4      	str	r4, [r2, r3]
 800c25a:	e6c9      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c25c:	40013800 	.word	0x40013800
 800c260:	40004400 	.word	0x40004400
 800c264:	40004800 	.word	0x40004800
 800c268:	40004c00 	.word	0x40004c00
 800c26c:	40020008 	.word	0x40020008
 800c270:	40020030 	.word	0x40020030
 800c274:	40020058 	.word	0x40020058
 800c278:	4002006c 	.word	0x4002006c
 800c27c:	4002041c 	.word	0x4002041c
 800c280:	40020430 	.word	0x40020430
 800c284:	40020400 	.word	0x40020400
 800c288:	fffff0ff 	.word	0xfffff0ff
 800c28c:	40020000 	.word	0x40020000
 800c290:	fff0ffff 	.word	0xfff0ffff
 800c294:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c298:	4ab9      	ldr	r2, [pc, #740]	; (800c580 <RemapAndLinkDMAtoUARTRx+0x620>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d159      	bne.n	800c352 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c29e:	680b      	ldr	r3, [r1, #0]
 800c2a0:	4ab8      	ldr	r2, [pc, #736]	; (800c584 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d01b      	beq.n	800c2de <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c2a6:	4ab8      	ldr	r2, [pc, #736]	; (800c588 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d023      	beq.n	800c2f4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c2ac:	4ab7      	ldr	r2, [pc, #732]	; (800c58c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d02c      	beq.n	800c30c <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c2b2:	4ab7      	ldr	r2, [pc, #732]	; (800c590 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d035      	beq.n	800c324 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c2b8:	4ab6      	ldr	r2, [pc, #728]	; (800c594 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d03e      	beq.n	800c33c <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c2be:	4ab6      	ldr	r2, [pc, #728]	; (800c598 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d000      	beq.n	800c2c6 <RemapAndLinkDMAtoUARTRx+0x366>
 800c2c4:	e694      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c2c6:	4ab5      	ldr	r2, [pc, #724]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c2c8:	23a8      	movs	r3, #168	; 0xa8
 800c2ca:	58d4      	ldr	r4, [r2, r3]
 800c2cc:	4db4      	ldr	r5, [pc, #720]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c2ce:	402c      	ands	r4, r5
 800c2d0:	50d4      	str	r4, [r2, r3]
 800c2d2:	58d5      	ldr	r5, [r2, r3]
 800c2d4:	24c0      	movs	r4, #192	; 0xc0
 800c2d6:	0124      	lsls	r4, r4, #4
 800c2d8:	432c      	orrs	r4, r5
 800c2da:	50d4      	str	r4, [r2, r3]
 800c2dc:	e688      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c2de:	4ab1      	ldr	r2, [pc, #708]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c2e0:	23a8      	movs	r3, #168	; 0xa8
 800c2e2:	58d4      	ldr	r4, [r2, r3]
 800c2e4:	250f      	movs	r5, #15
 800c2e6:	43ac      	bics	r4, r5
 800c2e8:	50d4      	str	r4, [r2, r3]
 800c2ea:	58d4      	ldr	r4, [r2, r3]
 800c2ec:	3d03      	subs	r5, #3
 800c2ee:	432c      	orrs	r4, r5
 800c2f0:	50d4      	str	r4, [r2, r3]
 800c2f2:	e67d      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c2f4:	4aab      	ldr	r2, [pc, #684]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c2f6:	23a8      	movs	r3, #168	; 0xa8
 800c2f8:	58d4      	ldr	r4, [r2, r3]
 800c2fa:	4da9      	ldr	r5, [pc, #676]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c2fc:	402c      	ands	r4, r5
 800c2fe:	50d4      	str	r4, [r2, r3]
 800c300:	58d5      	ldr	r5, [r2, r3]
 800c302:	24c0      	movs	r4, #192	; 0xc0
 800c304:	0124      	lsls	r4, r4, #4
 800c306:	432c      	orrs	r4, r5
 800c308:	50d4      	str	r4, [r2, r3]
 800c30a:	e671      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c30c:	4aa5      	ldr	r2, [pc, #660]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c30e:	23a8      	movs	r3, #168	; 0xa8
 800c310:	58d4      	ldr	r4, [r2, r3]
 800c312:	4da5      	ldr	r5, [pc, #660]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c314:	402c      	ands	r4, r5
 800c316:	50d4      	str	r4, [r2, r3]
 800c318:	58d5      	ldr	r5, [r2, r3]
 800c31a:	24c0      	movs	r4, #192	; 0xc0
 800c31c:	0324      	lsls	r4, r4, #12
 800c31e:	432c      	orrs	r4, r5
 800c320:	50d4      	str	r4, [r2, r3]
 800c322:	e665      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c324:	4a9f      	ldr	r2, [pc, #636]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c326:	23a8      	movs	r3, #168	; 0xa8
 800c328:	58d4      	ldr	r4, [r2, r3]
 800c32a:	4da0      	ldr	r5, [pc, #640]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c32c:	402c      	ands	r4, r5
 800c32e:	50d4      	str	r4, [r2, r3]
 800c330:	58d5      	ldr	r5, [r2, r3]
 800c332:	24c0      	movs	r4, #192	; 0xc0
 800c334:	0424      	lsls	r4, r4, #16
 800c336:	432c      	orrs	r4, r5
 800c338:	50d4      	str	r4, [r2, r3]
 800c33a:	e659      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c33c:	4a97      	ldr	r2, [pc, #604]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c33e:	23a8      	movs	r3, #168	; 0xa8
 800c340:	58d4      	ldr	r4, [r2, r3]
 800c342:	25f0      	movs	r5, #240	; 0xf0
 800c344:	43ac      	bics	r4, r5
 800c346:	50d4      	str	r4, [r2, r3]
 800c348:	58d4      	ldr	r4, [r2, r3]
 800c34a:	3d30      	subs	r5, #48	; 0x30
 800c34c:	432c      	orrs	r4, r5
 800c34e:	50d4      	str	r4, [r2, r3]
 800c350:	e64e      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c352:	4a97      	ldr	r2, [pc, #604]	; (800c5b0 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d159      	bne.n	800c40c <RemapAndLinkDMAtoUARTRx+0x4ac>
 800c358:	680b      	ldr	r3, [r1, #0]
 800c35a:	4a8a      	ldr	r2, [pc, #552]	; (800c584 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d01b      	beq.n	800c398 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c360:	4a89      	ldr	r2, [pc, #548]	; (800c588 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d023      	beq.n	800c3ae <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c366:	4a89      	ldr	r2, [pc, #548]	; (800c58c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d02c      	beq.n	800c3c6 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c36c:	4a88      	ldr	r2, [pc, #544]	; (800c590 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d035      	beq.n	800c3de <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c372:	4a88      	ldr	r2, [pc, #544]	; (800c594 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d03e      	beq.n	800c3f6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c378:	4a87      	ldr	r2, [pc, #540]	; (800c598 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d000      	beq.n	800c380 <RemapAndLinkDMAtoUARTRx+0x420>
 800c37e:	e637      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c380:	4a86      	ldr	r2, [pc, #536]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c382:	23a8      	movs	r3, #168	; 0xa8
 800c384:	58d4      	ldr	r4, [r2, r3]
 800c386:	4d86      	ldr	r5, [pc, #536]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c388:	402c      	ands	r4, r5
 800c38a:	50d4      	str	r4, [r2, r3]
 800c38c:	58d5      	ldr	r5, [r2, r3]
 800c38e:	24d0      	movs	r4, #208	; 0xd0
 800c390:	0124      	lsls	r4, r4, #4
 800c392:	432c      	orrs	r4, r5
 800c394:	50d4      	str	r4, [r2, r3]
 800c396:	e62b      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c398:	4a82      	ldr	r2, [pc, #520]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c39a:	23a8      	movs	r3, #168	; 0xa8
 800c39c:	58d4      	ldr	r4, [r2, r3]
 800c39e:	250f      	movs	r5, #15
 800c3a0:	43ac      	bics	r4, r5
 800c3a2:	50d4      	str	r4, [r2, r3]
 800c3a4:	58d4      	ldr	r4, [r2, r3]
 800c3a6:	3d02      	subs	r5, #2
 800c3a8:	432c      	orrs	r4, r5
 800c3aa:	50d4      	str	r4, [r2, r3]
 800c3ac:	e620      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c3ae:	4a7d      	ldr	r2, [pc, #500]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3b0:	23a8      	movs	r3, #168	; 0xa8
 800c3b2:	58d4      	ldr	r4, [r2, r3]
 800c3b4:	4d7a      	ldr	r5, [pc, #488]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c3b6:	402c      	ands	r4, r5
 800c3b8:	50d4      	str	r4, [r2, r3]
 800c3ba:	58d5      	ldr	r5, [r2, r3]
 800c3bc:	24d0      	movs	r4, #208	; 0xd0
 800c3be:	0124      	lsls	r4, r4, #4
 800c3c0:	432c      	orrs	r4, r5
 800c3c2:	50d4      	str	r4, [r2, r3]
 800c3c4:	e614      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c3c6:	4a77      	ldr	r2, [pc, #476]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3c8:	23a8      	movs	r3, #168	; 0xa8
 800c3ca:	58d4      	ldr	r4, [r2, r3]
 800c3cc:	4d76      	ldr	r5, [pc, #472]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c3ce:	402c      	ands	r4, r5
 800c3d0:	50d4      	str	r4, [r2, r3]
 800c3d2:	58d5      	ldr	r5, [r2, r3]
 800c3d4:	24d0      	movs	r4, #208	; 0xd0
 800c3d6:	0324      	lsls	r4, r4, #12
 800c3d8:	432c      	orrs	r4, r5
 800c3da:	50d4      	str	r4, [r2, r3]
 800c3dc:	e608      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c3de:	4a71      	ldr	r2, [pc, #452]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3e0:	23a8      	movs	r3, #168	; 0xa8
 800c3e2:	58d4      	ldr	r4, [r2, r3]
 800c3e4:	4d71      	ldr	r5, [pc, #452]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c3e6:	402c      	ands	r4, r5
 800c3e8:	50d4      	str	r4, [r2, r3]
 800c3ea:	58d5      	ldr	r5, [r2, r3]
 800c3ec:	24d0      	movs	r4, #208	; 0xd0
 800c3ee:	0424      	lsls	r4, r4, #16
 800c3f0:	432c      	orrs	r4, r5
 800c3f2:	50d4      	str	r4, [r2, r3]
 800c3f4:	e5fc      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c3f6:	4a69      	ldr	r2, [pc, #420]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c3f8:	23a8      	movs	r3, #168	; 0xa8
 800c3fa:	58d4      	ldr	r4, [r2, r3]
 800c3fc:	25f0      	movs	r5, #240	; 0xf0
 800c3fe:	43ac      	bics	r4, r5
 800c400:	50d4      	str	r4, [r2, r3]
 800c402:	58d4      	ldr	r4, [r2, r3]
 800c404:	3d20      	subs	r5, #32
 800c406:	432c      	orrs	r4, r5
 800c408:	50d4      	str	r4, [r2, r3]
 800c40a:	e5f1      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c40c:	4a69      	ldr	r2, [pc, #420]	; (800c5b4 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d159      	bne.n	800c4c6 <RemapAndLinkDMAtoUARTRx+0x566>
 800c412:	680b      	ldr	r3, [r1, #0]
 800c414:	4a5b      	ldr	r2, [pc, #364]	; (800c584 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d01b      	beq.n	800c452 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c41a:	4a5b      	ldr	r2, [pc, #364]	; (800c588 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d023      	beq.n	800c468 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c420:	4a5a      	ldr	r2, [pc, #360]	; (800c58c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d02c      	beq.n	800c480 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c426:	4a5a      	ldr	r2, [pc, #360]	; (800c590 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d035      	beq.n	800c498 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c42c:	4a59      	ldr	r2, [pc, #356]	; (800c594 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d03e      	beq.n	800c4b0 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c432:	4a59      	ldr	r2, [pc, #356]	; (800c598 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d000      	beq.n	800c43a <RemapAndLinkDMAtoUARTRx+0x4da>
 800c438:	e5da      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c43a:	4a58      	ldr	r2, [pc, #352]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c43c:	23a8      	movs	r3, #168	; 0xa8
 800c43e:	58d4      	ldr	r4, [r2, r3]
 800c440:	4d57      	ldr	r5, [pc, #348]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c442:	402c      	ands	r4, r5
 800c444:	50d4      	str	r4, [r2, r3]
 800c446:	58d5      	ldr	r5, [r2, r3]
 800c448:	24e0      	movs	r4, #224	; 0xe0
 800c44a:	0124      	lsls	r4, r4, #4
 800c44c:	432c      	orrs	r4, r5
 800c44e:	50d4      	str	r4, [r2, r3]
 800c450:	e5ce      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c452:	4a54      	ldr	r2, [pc, #336]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c454:	23a8      	movs	r3, #168	; 0xa8
 800c456:	58d4      	ldr	r4, [r2, r3]
 800c458:	250f      	movs	r5, #15
 800c45a:	43ac      	bics	r4, r5
 800c45c:	50d4      	str	r4, [r2, r3]
 800c45e:	58d4      	ldr	r4, [r2, r3]
 800c460:	3d01      	subs	r5, #1
 800c462:	432c      	orrs	r4, r5
 800c464:	50d4      	str	r4, [r2, r3]
 800c466:	e5c3      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c468:	4a4e      	ldr	r2, [pc, #312]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c46a:	23a8      	movs	r3, #168	; 0xa8
 800c46c:	58d4      	ldr	r4, [r2, r3]
 800c46e:	4d4c      	ldr	r5, [pc, #304]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c470:	402c      	ands	r4, r5
 800c472:	50d4      	str	r4, [r2, r3]
 800c474:	58d5      	ldr	r5, [r2, r3]
 800c476:	24e0      	movs	r4, #224	; 0xe0
 800c478:	0124      	lsls	r4, r4, #4
 800c47a:	432c      	orrs	r4, r5
 800c47c:	50d4      	str	r4, [r2, r3]
 800c47e:	e5b7      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c480:	4a48      	ldr	r2, [pc, #288]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c482:	23a8      	movs	r3, #168	; 0xa8
 800c484:	58d4      	ldr	r4, [r2, r3]
 800c486:	4d48      	ldr	r5, [pc, #288]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c488:	402c      	ands	r4, r5
 800c48a:	50d4      	str	r4, [r2, r3]
 800c48c:	58d5      	ldr	r5, [r2, r3]
 800c48e:	24e0      	movs	r4, #224	; 0xe0
 800c490:	0324      	lsls	r4, r4, #12
 800c492:	432c      	orrs	r4, r5
 800c494:	50d4      	str	r4, [r2, r3]
 800c496:	e5ab      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c498:	4a42      	ldr	r2, [pc, #264]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c49a:	23a8      	movs	r3, #168	; 0xa8
 800c49c:	58d4      	ldr	r4, [r2, r3]
 800c49e:	4d43      	ldr	r5, [pc, #268]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c4a0:	402c      	ands	r4, r5
 800c4a2:	50d4      	str	r4, [r2, r3]
 800c4a4:	58d5      	ldr	r5, [r2, r3]
 800c4a6:	24e0      	movs	r4, #224	; 0xe0
 800c4a8:	0424      	lsls	r4, r4, #16
 800c4aa:	432c      	orrs	r4, r5
 800c4ac:	50d4      	str	r4, [r2, r3]
 800c4ae:	e59f      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c4b0:	4a3a      	ldr	r2, [pc, #232]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c4b2:	23a8      	movs	r3, #168	; 0xa8
 800c4b4:	58d4      	ldr	r4, [r2, r3]
 800c4b6:	25f0      	movs	r5, #240	; 0xf0
 800c4b8:	43ac      	bics	r4, r5
 800c4ba:	50d4      	str	r4, [r2, r3]
 800c4bc:	58d4      	ldr	r4, [r2, r3]
 800c4be:	3d10      	subs	r5, #16
 800c4c0:	432c      	orrs	r4, r5
 800c4c2:	50d4      	str	r4, [r2, r3]
 800c4c4:	e594      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c4c6:	4a3c      	ldr	r2, [pc, #240]	; (800c5b8 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d000      	beq.n	800c4ce <RemapAndLinkDMAtoUARTRx+0x56e>
 800c4cc:	e590      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c4ce:	680b      	ldr	r3, [r1, #0]
 800c4d0:	4a2c      	ldr	r2, [pc, #176]	; (800c584 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d01b      	beq.n	800c50e <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c4d6:	4a2c      	ldr	r2, [pc, #176]	; (800c588 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d022      	beq.n	800c522 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c4dc:	4a2b      	ldr	r2, [pc, #172]	; (800c58c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d02b      	beq.n	800c53a <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c4e2:	4a2b      	ldr	r2, [pc, #172]	; (800c590 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d034      	beq.n	800c552 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c4e8:	4a2a      	ldr	r2, [pc, #168]	; (800c594 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d03d      	beq.n	800c56a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c4ee:	4a2a      	ldr	r2, [pc, #168]	; (800c598 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d000      	beq.n	800c4f6 <RemapAndLinkDMAtoUARTRx+0x596>
 800c4f4:	e57c      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c4f6:	4a29      	ldr	r2, [pc, #164]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c4f8:	23a8      	movs	r3, #168	; 0xa8
 800c4fa:	58d4      	ldr	r4, [r2, r3]
 800c4fc:	4d28      	ldr	r5, [pc, #160]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c4fe:	402c      	ands	r4, r5
 800c500:	50d4      	str	r4, [r2, r3]
 800c502:	58d5      	ldr	r5, [r2, r3]
 800c504:	24f0      	movs	r4, #240	; 0xf0
 800c506:	0124      	lsls	r4, r4, #4
 800c508:	432c      	orrs	r4, r5
 800c50a:	50d4      	str	r4, [r2, r3]
 800c50c:	e570      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c50e:	4a25      	ldr	r2, [pc, #148]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c510:	23a8      	movs	r3, #168	; 0xa8
 800c512:	58d5      	ldr	r5, [r2, r3]
 800c514:	260f      	movs	r6, #15
 800c516:	43b5      	bics	r5, r6
 800c518:	50d5      	str	r5, [r2, r3]
 800c51a:	58d4      	ldr	r4, [r2, r3]
 800c51c:	4334      	orrs	r4, r6
 800c51e:	50d4      	str	r4, [r2, r3]
 800c520:	e566      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c522:	4a20      	ldr	r2, [pc, #128]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c524:	23a8      	movs	r3, #168	; 0xa8
 800c526:	58d4      	ldr	r4, [r2, r3]
 800c528:	4d1d      	ldr	r5, [pc, #116]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c52a:	402c      	ands	r4, r5
 800c52c:	50d4      	str	r4, [r2, r3]
 800c52e:	58d5      	ldr	r5, [r2, r3]
 800c530:	24f0      	movs	r4, #240	; 0xf0
 800c532:	0124      	lsls	r4, r4, #4
 800c534:	432c      	orrs	r4, r5
 800c536:	50d4      	str	r4, [r2, r3]
 800c538:	e55a      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c53a:	4a1a      	ldr	r2, [pc, #104]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c53c:	23a8      	movs	r3, #168	; 0xa8
 800c53e:	58d4      	ldr	r4, [r2, r3]
 800c540:	4d19      	ldr	r5, [pc, #100]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c542:	402c      	ands	r4, r5
 800c544:	50d4      	str	r4, [r2, r3]
 800c546:	58d5      	ldr	r5, [r2, r3]
 800c548:	24f0      	movs	r4, #240	; 0xf0
 800c54a:	0324      	lsls	r4, r4, #12
 800c54c:	432c      	orrs	r4, r5
 800c54e:	50d4      	str	r4, [r2, r3]
 800c550:	e54e      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c552:	4a14      	ldr	r2, [pc, #80]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c554:	23a8      	movs	r3, #168	; 0xa8
 800c556:	58d4      	ldr	r4, [r2, r3]
 800c558:	4d14      	ldr	r5, [pc, #80]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c55a:	402c      	ands	r4, r5
 800c55c:	50d4      	str	r4, [r2, r3]
 800c55e:	58d5      	ldr	r5, [r2, r3]
 800c560:	24f0      	movs	r4, #240	; 0xf0
 800c562:	0424      	lsls	r4, r4, #16
 800c564:	432c      	orrs	r4, r5
 800c566:	50d4      	str	r4, [r2, r3]
 800c568:	e542      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c56a:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c56c:	23a8      	movs	r3, #168	; 0xa8
 800c56e:	58d5      	ldr	r5, [r2, r3]
 800c570:	26f0      	movs	r6, #240	; 0xf0
 800c572:	43b5      	bics	r5, r6
 800c574:	50d5      	str	r5, [r2, r3]
 800c576:	58d4      	ldr	r4, [r2, r3]
 800c578:	4334      	orrs	r4, r6
 800c57a:	50d4      	str	r4, [r2, r3]
 800c57c:	e538      	b.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x90>
 800c57e:	46c0      	nop			; (mov r8, r8)
 800c580:	40005000 	.word	0x40005000
 800c584:	40020008 	.word	0x40020008
 800c588:	40020030 	.word	0x40020030
 800c58c:	40020058 	.word	0x40020058
 800c590:	4002006c 	.word	0x4002006c
 800c594:	4002041c 	.word	0x4002041c
 800c598:	40020430 	.word	0x40020430
 800c59c:	40020400 	.word	0x40020400
 800c5a0:	fffff0ff 	.word	0xfffff0ff
 800c5a4:	40020000 	.word	0x40020000
 800c5a8:	fff0ffff 	.word	0xfff0ffff
 800c5ac:	ff0fffff 	.word	0xff0fffff
 800c5b0:	40011400 	.word	0x40011400
 800c5b4:	40011800 	.word	0x40011800
 800c5b8:	40011c00 	.word	0x40011c00

0800c5bc <DMA_MSG_RX_Setup>:
{	
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	0004      	movs	r4, r0
 800c5c0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c5c2:	f7ff fccd 	bl	800bf60 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	0028      	movs	r0, r5
 800c5ca:	f7ff fc13 	bl	800bdf4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c5ce:	0020      	movs	r0, r4
 800c5d0:	f7ff f8c0 	bl	800b754 <GetPort>
 800c5d4:	1e41      	subs	r1, r0, #1
 800c5d6:	0189      	lsls	r1, r1, #6
 800c5d8:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <DMA_MSG_RX_Setup+0x2c>)
 800c5da:	1809      	adds	r1, r1, r0
 800c5dc:	2240      	movs	r2, #64	; 0x40
 800c5de:	0020      	movs	r0, r4
 800c5e0:	f005 fcce 	bl	8011f80 <HAL_UART_Receive_DMA>
}
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	46c0      	nop			; (mov r8, r8)
 800c5e8:	2000143c 	.word	0x2000143c

0800c5ec <SetupMessagingRxDMAs>:
{	
 800c5ec:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c5ee:	4b17      	ldr	r3, [pc, #92]	; (800c64c <SetupMessagingRxDMAs+0x60>)
 800c5f0:	785b      	ldrb	r3, [r3, #1]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d010      	beq.n	800c618 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <SetupMessagingRxDMAs+0x60>)
 800c5f8:	789b      	ldrb	r3, [r3, #2]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d011      	beq.n	800c622 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800c5fe:	4b13      	ldr	r3, [pc, #76]	; (800c64c <SetupMessagingRxDMAs+0x60>)
 800c600:	78db      	ldrb	r3, [r3, #3]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d012      	beq.n	800c62c <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <SetupMessagingRxDMAs+0x60>)
 800c608:	791b      	ldrb	r3, [r3, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d013      	beq.n	800c636 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c60e:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <SetupMessagingRxDMAs+0x60>)
 800c610:	795b      	ldrb	r3, [r3, #5]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d014      	beq.n	800c640 <SetupMessagingRxDMAs+0x54>
}
 800c616:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c618:	490d      	ldr	r1, [pc, #52]	; (800c650 <SetupMessagingRxDMAs+0x64>)
 800c61a:	480e      	ldr	r0, [pc, #56]	; (800c654 <SetupMessagingRxDMAs+0x68>)
 800c61c:	f7ff ffce 	bl	800c5bc <DMA_MSG_RX_Setup>
 800c620:	e7e9      	b.n	800c5f6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c622:	490d      	ldr	r1, [pc, #52]	; (800c658 <SetupMessagingRxDMAs+0x6c>)
 800c624:	480d      	ldr	r0, [pc, #52]	; (800c65c <SetupMessagingRxDMAs+0x70>)
 800c626:	f7ff ffc9 	bl	800c5bc <DMA_MSG_RX_Setup>
 800c62a:	e7e8      	b.n	800c5fe <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c62c:	490c      	ldr	r1, [pc, #48]	; (800c660 <SetupMessagingRxDMAs+0x74>)
 800c62e:	480d      	ldr	r0, [pc, #52]	; (800c664 <SetupMessagingRxDMAs+0x78>)
 800c630:	f7ff ffc4 	bl	800c5bc <DMA_MSG_RX_Setup>
 800c634:	e7e7      	b.n	800c606 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c636:	490c      	ldr	r1, [pc, #48]	; (800c668 <SetupMessagingRxDMAs+0x7c>)
 800c638:	480c      	ldr	r0, [pc, #48]	; (800c66c <SetupMessagingRxDMAs+0x80>)
 800c63a:	f7ff ffbf 	bl	800c5bc <DMA_MSG_RX_Setup>
 800c63e:	e7e6      	b.n	800c60e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c640:	490b      	ldr	r1, [pc, #44]	; (800c670 <SetupMessagingRxDMAs+0x84>)
 800c642:	480c      	ldr	r0, [pc, #48]	; (800c674 <SetupMessagingRxDMAs+0x88>)
 800c644:	f7ff ffba 	bl	800c5bc <DMA_MSG_RX_Setup>
}
 800c648:	e7e5      	b.n	800c616 <SetupMessagingRxDMAs+0x2a>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	20001270 	.word	0x20001270
 800c650:	20001634 	.word	0x20001634
 800c654:	20006a5c 	.word	0x20006a5c
 800c658:	2000166c 	.word	0x2000166c
 800c65c:	20006bb4 	.word	0x20006bb4
 800c660:	200016a4 	.word	0x200016a4
 800c664:	20006b44 	.word	0x20006b44
 800c668:	200016dc 	.word	0x200016dc
 800c66c:	200069ac 	.word	0x200069ac
 800c670:	20001714 	.word	0x20001714
 800c674:	20006acc 	.word	0x20006acc

0800c678 <DMA_STREAM_Setup>:
{	
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	0005      	movs	r5, r0
 800c67c:	000f      	movs	r7, r1
 800c67e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c680:	f7ff f868 	bl	800b754 <GetPort>
	hDMA = &streamDMA[port-1];
 800c684:	3801      	subs	r0, #1
 800c686:	00c4      	lsls	r4, r0, #3
 800c688:	1a24      	subs	r4, r4, r0
 800c68a:	00e4      	lsls	r4, r4, #3
 800c68c:	4809      	ldr	r0, [pc, #36]	; (800c6b4 <DMA_STREAM_Setup+0x3c>)
 800c68e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c690:	0021      	movs	r1, r4
 800c692:	0028      	movs	r0, r5
 800c694:	f7ff fc64 	bl	800bf60 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c698:	2101      	movs	r1, #1
 800c69a:	0020      	movs	r0, r4
 800c69c:	f7ff fbaa 	bl	800bdf4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c6a0:	2369      	movs	r3, #105	; 0x69
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	3128      	adds	r1, #40	; 0x28
 800c6aa:	0032      	movs	r2, r6
 800c6ac:	0028      	movs	r0, r5
 800c6ae:	f005 fc67 	bl	8011f80 <HAL_UART_Receive_DMA>
}
 800c6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b4:	2000182c 	.word	0x2000182c

0800c6b8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c6b8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c6ba:	6803      	ldr	r3, [r0, #0]
 800c6bc:	4abd      	ldr	r2, [pc, #756]	; (800c9b4 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d02f      	beq.n	800c722 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c6c2:	4abd      	ldr	r2, [pc, #756]	; (800c9b8 <RemapAndLinkDMAtoUARTTx+0x300>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d100      	bne.n	800c6ca <RemapAndLinkDMAtoUARTTx+0x12>
 800c6c8:	e087      	b.n	800c7da <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c6ca:	4abc      	ldr	r2, [pc, #752]	; (800c9bc <RemapAndLinkDMAtoUARTTx+0x304>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d100      	bne.n	800c6d2 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c6d0:	e0dc      	b.n	800c88c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c6d2:	4abb      	ldr	r2, [pc, #748]	; (800c9c0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d000      	beq.n	800c6da <RemapAndLinkDMAtoUARTTx+0x22>
 800c6d8:	e18a      	b.n	800c9f0 <RemapAndLinkDMAtoUARTTx+0x338>
 800c6da:	680b      	ldr	r3, [r1, #0]
 800c6dc:	4ab9      	ldr	r2, [pc, #740]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d100      	bne.n	800c6e4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c6e2:	e12d      	b.n	800c940 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c6e4:	4ab8      	ldr	r2, [pc, #736]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d100      	bne.n	800c6ec <RemapAndLinkDMAtoUARTTx+0x34>
 800c6ea:	e134      	b.n	800c956 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c6ec:	4ab7      	ldr	r2, [pc, #732]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d100      	bne.n	800c6f4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c6f2:	e13c      	b.n	800c96e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c6f4:	4ab6      	ldr	r2, [pc, #728]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d100      	bne.n	800c6fc <RemapAndLinkDMAtoUARTTx+0x44>
 800c6fa:	e144      	b.n	800c986 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c6fc:	4ab5      	ldr	r2, [pc, #724]	; (800c9d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d100      	bne.n	800c704 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c702:	e14b      	b.n	800c99c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c704:	4ab4      	ldr	r2, [pc, #720]	; (800c9d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d11e      	bne.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c70a:	4ab4      	ldr	r2, [pc, #720]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c70c:	23a8      	movs	r3, #168	; 0xa8
 800c70e:	58d4      	ldr	r4, [r2, r3]
 800c710:	4db3      	ldr	r5, [pc, #716]	; (800c9e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c712:	402c      	ands	r4, r5
 800c714:	50d4      	str	r4, [r2, r3]
 800c716:	58d5      	ldr	r5, [r2, r3]
 800c718:	24b0      	movs	r4, #176	; 0xb0
 800c71a:	0324      	lsls	r4, r4, #12
 800c71c:	432c      	orrs	r4, r5
 800c71e:	50d4      	str	r4, [r2, r3]
 800c720:	e012      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c722:	680b      	ldr	r3, [r1, #0]
 800c724:	4aa7      	ldr	r2, [pc, #668]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d011      	beq.n	800c74e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c72a:	4aa7      	ldr	r2, [pc, #668]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d019      	beq.n	800c764 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c730:	4aa6      	ldr	r2, [pc, #664]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d022      	beq.n	800c77c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c736:	4aa6      	ldr	r2, [pc, #664]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d02b      	beq.n	800c794 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c73c:	4aa5      	ldr	r2, [pc, #660]	; (800c9d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d033      	beq.n	800c7aa <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c742:	4aa5      	ldr	r2, [pc, #660]	; (800c9d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d03c      	beq.n	800c7c2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c748:	6601      	str	r1, [r0, #96]	; 0x60
 800c74a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c74c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c74e:	4aa5      	ldr	r2, [pc, #660]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c750:	23a8      	movs	r3, #168	; 0xa8
 800c752:	58d4      	ldr	r4, [r2, r3]
 800c754:	25f0      	movs	r5, #240	; 0xf0
 800c756:	43ac      	bics	r4, r5
 800c758:	50d4      	str	r4, [r2, r3]
 800c75a:	58d4      	ldr	r4, [r2, r3]
 800c75c:	3d70      	subs	r5, #112	; 0x70
 800c75e:	432c      	orrs	r4, r5
 800c760:	50d4      	str	r4, [r2, r3]
 800c762:	e7f1      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c764:	4a9f      	ldr	r2, [pc, #636]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c766:	23a8      	movs	r3, #168	; 0xa8
 800c768:	58d4      	ldr	r4, [r2, r3]
 800c76a:	4d9f      	ldr	r5, [pc, #636]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c76c:	402c      	ands	r4, r5
 800c76e:	50d4      	str	r4, [r2, r3]
 800c770:	58d5      	ldr	r5, [r2, r3]
 800c772:	2480      	movs	r4, #128	; 0x80
 800c774:	0224      	lsls	r4, r4, #8
 800c776:	432c      	orrs	r4, r5
 800c778:	50d4      	str	r4, [r2, r3]
 800c77a:	e7e5      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c77c:	4a99      	ldr	r2, [pc, #612]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c77e:	23a8      	movs	r3, #168	; 0xa8
 800c780:	58d4      	ldr	r4, [r2, r3]
 800c782:	4d9a      	ldr	r5, [pc, #616]	; (800c9ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c784:	402c      	ands	r4, r5
 800c786:	50d4      	str	r4, [r2, r3]
 800c788:	58d5      	ldr	r5, [r2, r3]
 800c78a:	2480      	movs	r4, #128	; 0x80
 800c78c:	0524      	lsls	r4, r4, #20
 800c78e:	432c      	orrs	r4, r5
 800c790:	50d4      	str	r4, [r2, r3]
 800c792:	e7d9      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c794:	4a91      	ldr	r2, [pc, #580]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c796:	23a8      	movs	r3, #168	; 0xa8
 800c798:	58d4      	ldr	r4, [r2, r3]
 800c79a:	250f      	movs	r5, #15
 800c79c:	43ac      	bics	r4, r5
 800c79e:	50d4      	str	r4, [r2, r3]
 800c7a0:	58d4      	ldr	r4, [r2, r3]
 800c7a2:	3d07      	subs	r5, #7
 800c7a4:	432c      	orrs	r4, r5
 800c7a6:	50d4      	str	r4, [r2, r3]
 800c7a8:	e7ce      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c7aa:	4a8c      	ldr	r2, [pc, #560]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c7ac:	23a8      	movs	r3, #168	; 0xa8
 800c7ae:	58d4      	ldr	r4, [r2, r3]
 800c7b0:	4d8d      	ldr	r5, [pc, #564]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c7b2:	402c      	ands	r4, r5
 800c7b4:	50d4      	str	r4, [r2, r3]
 800c7b6:	58d5      	ldr	r5, [r2, r3]
 800c7b8:	2480      	movs	r4, #128	; 0x80
 800c7ba:	0224      	lsls	r4, r4, #8
 800c7bc:	432c      	orrs	r4, r5
 800c7be:	50d4      	str	r4, [r2, r3]
 800c7c0:	e7c2      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c7c2:	4a86      	ldr	r2, [pc, #536]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c7c4:	23a8      	movs	r3, #168	; 0xa8
 800c7c6:	58d4      	ldr	r4, [r2, r3]
 800c7c8:	4d85      	ldr	r5, [pc, #532]	; (800c9e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c7ca:	402c      	ands	r4, r5
 800c7cc:	50d4      	str	r4, [r2, r3]
 800c7ce:	58d5      	ldr	r5, [r2, r3]
 800c7d0:	2480      	movs	r4, #128	; 0x80
 800c7d2:	0324      	lsls	r4, r4, #12
 800c7d4:	432c      	orrs	r4, r5
 800c7d6:	50d4      	str	r4, [r2, r3]
 800c7d8:	e7b6      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c7da:	680b      	ldr	r3, [r1, #0]
 800c7dc:	4a79      	ldr	r2, [pc, #484]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d01a      	beq.n	800c818 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c7e2:	4a79      	ldr	r2, [pc, #484]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d022      	beq.n	800c82e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c7e8:	4a78      	ldr	r2, [pc, #480]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d02b      	beq.n	800c846 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c7ee:	4a78      	ldr	r2, [pc, #480]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d034      	beq.n	800c85e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c7f4:	4a77      	ldr	r2, [pc, #476]	; (800c9d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d03c      	beq.n	800c874 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c7fa:	4a77      	ldr	r2, [pc, #476]	; (800c9d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d1a3      	bne.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c800:	4a76      	ldr	r2, [pc, #472]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c802:	23a8      	movs	r3, #168	; 0xa8
 800c804:	58d4      	ldr	r4, [r2, r3]
 800c806:	4d76      	ldr	r5, [pc, #472]	; (800c9e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c808:	402c      	ands	r4, r5
 800c80a:	50d4      	str	r4, [r2, r3]
 800c80c:	58d5      	ldr	r5, [r2, r3]
 800c80e:	2490      	movs	r4, #144	; 0x90
 800c810:	0324      	lsls	r4, r4, #12
 800c812:	432c      	orrs	r4, r5
 800c814:	50d4      	str	r4, [r2, r3]
 800c816:	e797      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c818:	4a72      	ldr	r2, [pc, #456]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c81a:	23a8      	movs	r3, #168	; 0xa8
 800c81c:	58d4      	ldr	r4, [r2, r3]
 800c81e:	25f0      	movs	r5, #240	; 0xf0
 800c820:	43ac      	bics	r4, r5
 800c822:	50d4      	str	r4, [r2, r3]
 800c824:	58d4      	ldr	r4, [r2, r3]
 800c826:	3d60      	subs	r5, #96	; 0x60
 800c828:	432c      	orrs	r4, r5
 800c82a:	50d4      	str	r4, [r2, r3]
 800c82c:	e78c      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c82e:	4a6d      	ldr	r2, [pc, #436]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c830:	23a8      	movs	r3, #168	; 0xa8
 800c832:	58d4      	ldr	r4, [r2, r3]
 800c834:	4d6c      	ldr	r5, [pc, #432]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c836:	402c      	ands	r4, r5
 800c838:	50d4      	str	r4, [r2, r3]
 800c83a:	58d5      	ldr	r5, [r2, r3]
 800c83c:	2490      	movs	r4, #144	; 0x90
 800c83e:	0224      	lsls	r4, r4, #8
 800c840:	432c      	orrs	r4, r5
 800c842:	50d4      	str	r4, [r2, r3]
 800c844:	e780      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c846:	4a67      	ldr	r2, [pc, #412]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c848:	23a8      	movs	r3, #168	; 0xa8
 800c84a:	58d4      	ldr	r4, [r2, r3]
 800c84c:	4d67      	ldr	r5, [pc, #412]	; (800c9ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c84e:	402c      	ands	r4, r5
 800c850:	50d4      	str	r4, [r2, r3]
 800c852:	58d5      	ldr	r5, [r2, r3]
 800c854:	2490      	movs	r4, #144	; 0x90
 800c856:	0524      	lsls	r4, r4, #20
 800c858:	432c      	orrs	r4, r5
 800c85a:	50d4      	str	r4, [r2, r3]
 800c85c:	e774      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c85e:	4a5f      	ldr	r2, [pc, #380]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c860:	23a8      	movs	r3, #168	; 0xa8
 800c862:	58d4      	ldr	r4, [r2, r3]
 800c864:	250f      	movs	r5, #15
 800c866:	43ac      	bics	r4, r5
 800c868:	50d4      	str	r4, [r2, r3]
 800c86a:	58d4      	ldr	r4, [r2, r3]
 800c86c:	3d06      	subs	r5, #6
 800c86e:	432c      	orrs	r4, r5
 800c870:	50d4      	str	r4, [r2, r3]
 800c872:	e769      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c874:	4a59      	ldr	r2, [pc, #356]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c876:	23a8      	movs	r3, #168	; 0xa8
 800c878:	58d4      	ldr	r4, [r2, r3]
 800c87a:	4d5b      	ldr	r5, [pc, #364]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c87c:	402c      	ands	r4, r5
 800c87e:	50d4      	str	r4, [r2, r3]
 800c880:	58d5      	ldr	r5, [r2, r3]
 800c882:	2490      	movs	r4, #144	; 0x90
 800c884:	0224      	lsls	r4, r4, #8
 800c886:	432c      	orrs	r4, r5
 800c888:	50d4      	str	r4, [r2, r3]
 800c88a:	e75d      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c88c:	680b      	ldr	r3, [r1, #0]
 800c88e:	4a4d      	ldr	r2, [pc, #308]	; (800c9c4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d01b      	beq.n	800c8cc <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c894:	4a4c      	ldr	r2, [pc, #304]	; (800c9c8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d023      	beq.n	800c8e2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c89a:	4a4c      	ldr	r2, [pc, #304]	; (800c9cc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d02c      	beq.n	800c8fa <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c8a0:	4a4b      	ldr	r2, [pc, #300]	; (800c9d0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d035      	beq.n	800c912 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c8a6:	4a4b      	ldr	r2, [pc, #300]	; (800c9d4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d03d      	beq.n	800c928 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c8ac:	4a4a      	ldr	r2, [pc, #296]	; (800c9d8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d000      	beq.n	800c8b4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c8b2:	e749      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c8b4:	4a49      	ldr	r2, [pc, #292]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c8b6:	23a8      	movs	r3, #168	; 0xa8
 800c8b8:	58d4      	ldr	r4, [r2, r3]
 800c8ba:	4d49      	ldr	r5, [pc, #292]	; (800c9e0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c8bc:	402c      	ands	r4, r5
 800c8be:	50d4      	str	r4, [r2, r3]
 800c8c0:	58d5      	ldr	r5, [r2, r3]
 800c8c2:	24a0      	movs	r4, #160	; 0xa0
 800c8c4:	0324      	lsls	r4, r4, #12
 800c8c6:	432c      	orrs	r4, r5
 800c8c8:	50d4      	str	r4, [r2, r3]
 800c8ca:	e73d      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c8cc:	4a45      	ldr	r2, [pc, #276]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8ce:	23a8      	movs	r3, #168	; 0xa8
 800c8d0:	58d4      	ldr	r4, [r2, r3]
 800c8d2:	25f0      	movs	r5, #240	; 0xf0
 800c8d4:	43ac      	bics	r4, r5
 800c8d6:	50d4      	str	r4, [r2, r3]
 800c8d8:	58d4      	ldr	r4, [r2, r3]
 800c8da:	3d50      	subs	r5, #80	; 0x50
 800c8dc:	432c      	orrs	r4, r5
 800c8de:	50d4      	str	r4, [r2, r3]
 800c8e0:	e732      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c8e2:	4a40      	ldr	r2, [pc, #256]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8e4:	23a8      	movs	r3, #168	; 0xa8
 800c8e6:	58d4      	ldr	r4, [r2, r3]
 800c8e8:	4d3f      	ldr	r5, [pc, #252]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c8ea:	402c      	ands	r4, r5
 800c8ec:	50d4      	str	r4, [r2, r3]
 800c8ee:	58d5      	ldr	r5, [r2, r3]
 800c8f0:	24a0      	movs	r4, #160	; 0xa0
 800c8f2:	0224      	lsls	r4, r4, #8
 800c8f4:	432c      	orrs	r4, r5
 800c8f6:	50d4      	str	r4, [r2, r3]
 800c8f8:	e726      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c8fa:	4a3a      	ldr	r2, [pc, #232]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c8fc:	23a8      	movs	r3, #168	; 0xa8
 800c8fe:	58d4      	ldr	r4, [r2, r3]
 800c900:	4d3a      	ldr	r5, [pc, #232]	; (800c9ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c902:	402c      	ands	r4, r5
 800c904:	50d4      	str	r4, [r2, r3]
 800c906:	58d5      	ldr	r5, [r2, r3]
 800c908:	24a0      	movs	r4, #160	; 0xa0
 800c90a:	0524      	lsls	r4, r4, #20
 800c90c:	432c      	orrs	r4, r5
 800c90e:	50d4      	str	r4, [r2, r3]
 800c910:	e71a      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c912:	4a32      	ldr	r2, [pc, #200]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c914:	23a8      	movs	r3, #168	; 0xa8
 800c916:	58d4      	ldr	r4, [r2, r3]
 800c918:	250f      	movs	r5, #15
 800c91a:	43ac      	bics	r4, r5
 800c91c:	50d4      	str	r4, [r2, r3]
 800c91e:	58d4      	ldr	r4, [r2, r3]
 800c920:	3d05      	subs	r5, #5
 800c922:	432c      	orrs	r4, r5
 800c924:	50d4      	str	r4, [r2, r3]
 800c926:	e70f      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c928:	4a2c      	ldr	r2, [pc, #176]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c92a:	23a8      	movs	r3, #168	; 0xa8
 800c92c:	58d4      	ldr	r4, [r2, r3]
 800c92e:	4d2e      	ldr	r5, [pc, #184]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c930:	402c      	ands	r4, r5
 800c932:	50d4      	str	r4, [r2, r3]
 800c934:	58d5      	ldr	r5, [r2, r3]
 800c936:	24a0      	movs	r4, #160	; 0xa0
 800c938:	0224      	lsls	r4, r4, #8
 800c93a:	432c      	orrs	r4, r5
 800c93c:	50d4      	str	r4, [r2, r3]
 800c93e:	e703      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c940:	4a28      	ldr	r2, [pc, #160]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c942:	23a8      	movs	r3, #168	; 0xa8
 800c944:	58d4      	ldr	r4, [r2, r3]
 800c946:	25f0      	movs	r5, #240	; 0xf0
 800c948:	43ac      	bics	r4, r5
 800c94a:	50d4      	str	r4, [r2, r3]
 800c94c:	58d4      	ldr	r4, [r2, r3]
 800c94e:	3d40      	subs	r5, #64	; 0x40
 800c950:	432c      	orrs	r4, r5
 800c952:	50d4      	str	r4, [r2, r3]
 800c954:	e6f8      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c956:	4a23      	ldr	r2, [pc, #140]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c958:	23a8      	movs	r3, #168	; 0xa8
 800c95a:	58d4      	ldr	r4, [r2, r3]
 800c95c:	4d22      	ldr	r5, [pc, #136]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c95e:	402c      	ands	r4, r5
 800c960:	50d4      	str	r4, [r2, r3]
 800c962:	58d5      	ldr	r5, [r2, r3]
 800c964:	24b0      	movs	r4, #176	; 0xb0
 800c966:	0224      	lsls	r4, r4, #8
 800c968:	432c      	orrs	r4, r5
 800c96a:	50d4      	str	r4, [r2, r3]
 800c96c:	e6ec      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c96e:	4a1d      	ldr	r2, [pc, #116]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c970:	23a8      	movs	r3, #168	; 0xa8
 800c972:	58d4      	ldr	r4, [r2, r3]
 800c974:	4d1d      	ldr	r5, [pc, #116]	; (800c9ec <RemapAndLinkDMAtoUARTTx+0x334>)
 800c976:	402c      	ands	r4, r5
 800c978:	50d4      	str	r4, [r2, r3]
 800c97a:	58d5      	ldr	r5, [r2, r3]
 800c97c:	24b0      	movs	r4, #176	; 0xb0
 800c97e:	0524      	lsls	r4, r4, #20
 800c980:	432c      	orrs	r4, r5
 800c982:	50d4      	str	r4, [r2, r3]
 800c984:	e6e0      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c986:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c988:	23a8      	movs	r3, #168	; 0xa8
 800c98a:	58d4      	ldr	r4, [r2, r3]
 800c98c:	250f      	movs	r5, #15
 800c98e:	43ac      	bics	r4, r5
 800c990:	50d4      	str	r4, [r2, r3]
 800c992:	58d4      	ldr	r4, [r2, r3]
 800c994:	3d04      	subs	r5, #4
 800c996:	432c      	orrs	r4, r5
 800c998:	50d4      	str	r4, [r2, r3]
 800c99a:	e6d5      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c99c:	4a0f      	ldr	r2, [pc, #60]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x324>)
 800c99e:	23a8      	movs	r3, #168	; 0xa8
 800c9a0:	58d4      	ldr	r4, [r2, r3]
 800c9a2:	4d11      	ldr	r5, [pc, #68]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c9a4:	402c      	ands	r4, r5
 800c9a6:	50d4      	str	r4, [r2, r3]
 800c9a8:	58d5      	ldr	r5, [r2, r3]
 800c9aa:	24b0      	movs	r4, #176	; 0xb0
 800c9ac:	0224      	lsls	r4, r4, #8
 800c9ae:	432c      	orrs	r4, r5
 800c9b0:	50d4      	str	r4, [r2, r3]
 800c9b2:	e6c9      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
 800c9b4:	40013800 	.word	0x40013800
 800c9b8:	40004400 	.word	0x40004400
 800c9bc:	40004800 	.word	0x40004800
 800c9c0:	40004c00 	.word	0x40004c00
 800c9c4:	4002001c 	.word	0x4002001c
 800c9c8:	40020044 	.word	0x40020044
 800c9cc:	40020080 	.word	0x40020080
 800c9d0:	40020408 	.word	0x40020408
 800c9d4:	40020444 	.word	0x40020444
 800c9d8:	40020458 	.word	0x40020458
 800c9dc:	40020400 	.word	0x40020400
 800c9e0:	fff0ffff 	.word	0xfff0ffff
 800c9e4:	40020000 	.word	0x40020000
 800c9e8:	ffff0fff 	.word	0xffff0fff
 800c9ec:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c9f0:	4ab9      	ldr	r2, [pc, #740]	; (800ccd8 <RemapAndLinkDMAtoUARTTx+0x620>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d159      	bne.n	800caaa <RemapAndLinkDMAtoUARTTx+0x3f2>
 800c9f6:	680b      	ldr	r3, [r1, #0]
 800c9f8:	4ab8      	ldr	r2, [pc, #736]	; (800ccdc <RemapAndLinkDMAtoUARTTx+0x624>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d01b      	beq.n	800ca36 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c9fe:	4ab8      	ldr	r2, [pc, #736]	; (800cce0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d023      	beq.n	800ca4c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800ca04:	4ab7      	ldr	r2, [pc, #732]	; (800cce4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d02c      	beq.n	800ca64 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800ca0a:	4ab7      	ldr	r2, [pc, #732]	; (800cce8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d035      	beq.n	800ca7c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800ca10:	4ab6      	ldr	r2, [pc, #728]	; (800ccec <RemapAndLinkDMAtoUARTTx+0x634>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d03d      	beq.n	800ca92 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800ca16:	4ab6      	ldr	r2, [pc, #728]	; (800ccf0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d000      	beq.n	800ca1e <RemapAndLinkDMAtoUARTTx+0x366>
 800ca1c:	e694      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800ca1e:	4ab5      	ldr	r2, [pc, #724]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca20:	23a8      	movs	r3, #168	; 0xa8
 800ca22:	58d4      	ldr	r4, [r2, r3]
 800ca24:	4db4      	ldr	r5, [pc, #720]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ca26:	402c      	ands	r4, r5
 800ca28:	50d4      	str	r4, [r2, r3]
 800ca2a:	58d5      	ldr	r5, [r2, r3]
 800ca2c:	24c0      	movs	r4, #192	; 0xc0
 800ca2e:	0324      	lsls	r4, r4, #12
 800ca30:	432c      	orrs	r4, r5
 800ca32:	50d4      	str	r4, [r2, r3]
 800ca34:	e688      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800ca36:	4ab1      	ldr	r2, [pc, #708]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800ca38:	23a8      	movs	r3, #168	; 0xa8
 800ca3a:	58d4      	ldr	r4, [r2, r3]
 800ca3c:	25f0      	movs	r5, #240	; 0xf0
 800ca3e:	43ac      	bics	r4, r5
 800ca40:	50d4      	str	r4, [r2, r3]
 800ca42:	58d4      	ldr	r4, [r2, r3]
 800ca44:	3d30      	subs	r5, #48	; 0x30
 800ca46:	432c      	orrs	r4, r5
 800ca48:	50d4      	str	r4, [r2, r3]
 800ca4a:	e67d      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800ca4c:	4aab      	ldr	r2, [pc, #684]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800ca4e:	23a8      	movs	r3, #168	; 0xa8
 800ca50:	58d4      	ldr	r4, [r2, r3]
 800ca52:	4dab      	ldr	r5, [pc, #684]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ca54:	402c      	ands	r4, r5
 800ca56:	50d4      	str	r4, [r2, r3]
 800ca58:	58d5      	ldr	r5, [r2, r3]
 800ca5a:	24c0      	movs	r4, #192	; 0xc0
 800ca5c:	0224      	lsls	r4, r4, #8
 800ca5e:	432c      	orrs	r4, r5
 800ca60:	50d4      	str	r4, [r2, r3]
 800ca62:	e671      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800ca64:	4aa5      	ldr	r2, [pc, #660]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800ca66:	23a8      	movs	r3, #168	; 0xa8
 800ca68:	58d4      	ldr	r4, [r2, r3]
 800ca6a:	4da6      	ldr	r5, [pc, #664]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800ca6c:	402c      	ands	r4, r5
 800ca6e:	50d4      	str	r4, [r2, r3]
 800ca70:	58d5      	ldr	r5, [r2, r3]
 800ca72:	24c0      	movs	r4, #192	; 0xc0
 800ca74:	0524      	lsls	r4, r4, #20
 800ca76:	432c      	orrs	r4, r5
 800ca78:	50d4      	str	r4, [r2, r3]
 800ca7a:	e665      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800ca7c:	4a9d      	ldr	r2, [pc, #628]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca7e:	23a8      	movs	r3, #168	; 0xa8
 800ca80:	58d4      	ldr	r4, [r2, r3]
 800ca82:	250f      	movs	r5, #15
 800ca84:	43ac      	bics	r4, r5
 800ca86:	50d4      	str	r4, [r2, r3]
 800ca88:	58d4      	ldr	r4, [r2, r3]
 800ca8a:	3d03      	subs	r5, #3
 800ca8c:	432c      	orrs	r4, r5
 800ca8e:	50d4      	str	r4, [r2, r3]
 800ca90:	e65a      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800ca92:	4a98      	ldr	r2, [pc, #608]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca94:	23a8      	movs	r3, #168	; 0xa8
 800ca96:	58d4      	ldr	r4, [r2, r3]
 800ca98:	4d99      	ldr	r5, [pc, #612]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ca9a:	402c      	ands	r4, r5
 800ca9c:	50d4      	str	r4, [r2, r3]
 800ca9e:	58d5      	ldr	r5, [r2, r3]
 800caa0:	24c0      	movs	r4, #192	; 0xc0
 800caa2:	0224      	lsls	r4, r4, #8
 800caa4:	432c      	orrs	r4, r5
 800caa6:	50d4      	str	r4, [r2, r3]
 800caa8:	e64e      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800caaa:	4a97      	ldr	r2, [pc, #604]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x650>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d159      	bne.n	800cb64 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800cab0:	680b      	ldr	r3, [r1, #0]
 800cab2:	4a8a      	ldr	r2, [pc, #552]	; (800ccdc <RemapAndLinkDMAtoUARTTx+0x624>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d01b      	beq.n	800caf0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cab8:	4a89      	ldr	r2, [pc, #548]	; (800cce0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d023      	beq.n	800cb06 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cabe:	4a89      	ldr	r2, [pc, #548]	; (800cce4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d02c      	beq.n	800cb1e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cac4:	4a88      	ldr	r2, [pc, #544]	; (800cce8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d035      	beq.n	800cb36 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800caca:	4a88      	ldr	r2, [pc, #544]	; (800ccec <RemapAndLinkDMAtoUARTTx+0x634>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d03d      	beq.n	800cb4c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800cad0:	4a87      	ldr	r2, [pc, #540]	; (800ccf0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d000      	beq.n	800cad8 <RemapAndLinkDMAtoUARTTx+0x420>
 800cad6:	e637      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800cad8:	4a86      	ldr	r2, [pc, #536]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cada:	23a8      	movs	r3, #168	; 0xa8
 800cadc:	58d4      	ldr	r4, [r2, r3]
 800cade:	4d86      	ldr	r5, [pc, #536]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cae0:	402c      	ands	r4, r5
 800cae2:	50d4      	str	r4, [r2, r3]
 800cae4:	58d5      	ldr	r5, [r2, r3]
 800cae6:	24d0      	movs	r4, #208	; 0xd0
 800cae8:	0324      	lsls	r4, r4, #12
 800caea:	432c      	orrs	r4, r5
 800caec:	50d4      	str	r4, [r2, r3]
 800caee:	e62b      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800caf0:	4a82      	ldr	r2, [pc, #520]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800caf2:	23a8      	movs	r3, #168	; 0xa8
 800caf4:	58d4      	ldr	r4, [r2, r3]
 800caf6:	25f0      	movs	r5, #240	; 0xf0
 800caf8:	43ac      	bics	r4, r5
 800cafa:	50d4      	str	r4, [r2, r3]
 800cafc:	58d4      	ldr	r4, [r2, r3]
 800cafe:	3d20      	subs	r5, #32
 800cb00:	432c      	orrs	r4, r5
 800cb02:	50d4      	str	r4, [r2, r3]
 800cb04:	e620      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800cb06:	4a7d      	ldr	r2, [pc, #500]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cb08:	23a8      	movs	r3, #168	; 0xa8
 800cb0a:	58d4      	ldr	r4, [r2, r3]
 800cb0c:	4d7c      	ldr	r5, [pc, #496]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cb0e:	402c      	ands	r4, r5
 800cb10:	50d4      	str	r4, [r2, r3]
 800cb12:	58d5      	ldr	r5, [r2, r3]
 800cb14:	24d0      	movs	r4, #208	; 0xd0
 800cb16:	0224      	lsls	r4, r4, #8
 800cb18:	432c      	orrs	r4, r5
 800cb1a:	50d4      	str	r4, [r2, r3]
 800cb1c:	e614      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800cb1e:	4a77      	ldr	r2, [pc, #476]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cb20:	23a8      	movs	r3, #168	; 0xa8
 800cb22:	58d4      	ldr	r4, [r2, r3]
 800cb24:	4d77      	ldr	r5, [pc, #476]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cb26:	402c      	ands	r4, r5
 800cb28:	50d4      	str	r4, [r2, r3]
 800cb2a:	58d5      	ldr	r5, [r2, r3]
 800cb2c:	24d0      	movs	r4, #208	; 0xd0
 800cb2e:	0524      	lsls	r4, r4, #20
 800cb30:	432c      	orrs	r4, r5
 800cb32:	50d4      	str	r4, [r2, r3]
 800cb34:	e608      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800cb36:	4a6f      	ldr	r2, [pc, #444]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb38:	23a8      	movs	r3, #168	; 0xa8
 800cb3a:	58d4      	ldr	r4, [r2, r3]
 800cb3c:	250f      	movs	r5, #15
 800cb3e:	43ac      	bics	r4, r5
 800cb40:	50d4      	str	r4, [r2, r3]
 800cb42:	58d4      	ldr	r4, [r2, r3]
 800cb44:	3d02      	subs	r5, #2
 800cb46:	432c      	orrs	r4, r5
 800cb48:	50d4      	str	r4, [r2, r3]
 800cb4a:	e5fd      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800cb4c:	4a69      	ldr	r2, [pc, #420]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb4e:	23a8      	movs	r3, #168	; 0xa8
 800cb50:	58d4      	ldr	r4, [r2, r3]
 800cb52:	4d6b      	ldr	r5, [pc, #428]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cb54:	402c      	ands	r4, r5
 800cb56:	50d4      	str	r4, [r2, r3]
 800cb58:	58d5      	ldr	r5, [r2, r3]
 800cb5a:	24d0      	movs	r4, #208	; 0xd0
 800cb5c:	0224      	lsls	r4, r4, #8
 800cb5e:	432c      	orrs	r4, r5
 800cb60:	50d4      	str	r4, [r2, r3]
 800cb62:	e5f1      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cb64:	4a69      	ldr	r2, [pc, #420]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x654>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d159      	bne.n	800cc1e <RemapAndLinkDMAtoUARTTx+0x566>
 800cb6a:	680b      	ldr	r3, [r1, #0]
 800cb6c:	4a5b      	ldr	r2, [pc, #364]	; (800ccdc <RemapAndLinkDMAtoUARTTx+0x624>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d01b      	beq.n	800cbaa <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cb72:	4a5b      	ldr	r2, [pc, #364]	; (800cce0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d023      	beq.n	800cbc0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cb78:	4a5a      	ldr	r2, [pc, #360]	; (800cce4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d02c      	beq.n	800cbd8 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cb7e:	4a5a      	ldr	r2, [pc, #360]	; (800cce8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d035      	beq.n	800cbf0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cb84:	4a59      	ldr	r2, [pc, #356]	; (800ccec <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d03d      	beq.n	800cc06 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cb8a:	4a59      	ldr	r2, [pc, #356]	; (800ccf0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d000      	beq.n	800cb92 <RemapAndLinkDMAtoUARTTx+0x4da>
 800cb90:	e5da      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cb92:	4a58      	ldr	r2, [pc, #352]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb94:	23a8      	movs	r3, #168	; 0xa8
 800cb96:	58d4      	ldr	r4, [r2, r3]
 800cb98:	4d57      	ldr	r5, [pc, #348]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb9a:	402c      	ands	r4, r5
 800cb9c:	50d4      	str	r4, [r2, r3]
 800cb9e:	58d5      	ldr	r5, [r2, r3]
 800cba0:	24e0      	movs	r4, #224	; 0xe0
 800cba2:	0324      	lsls	r4, r4, #12
 800cba4:	432c      	orrs	r4, r5
 800cba6:	50d4      	str	r4, [r2, r3]
 800cba8:	e5ce      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800cbaa:	4a54      	ldr	r2, [pc, #336]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbac:	23a8      	movs	r3, #168	; 0xa8
 800cbae:	58d4      	ldr	r4, [r2, r3]
 800cbb0:	25f0      	movs	r5, #240	; 0xf0
 800cbb2:	43ac      	bics	r4, r5
 800cbb4:	50d4      	str	r4, [r2, r3]
 800cbb6:	58d4      	ldr	r4, [r2, r3]
 800cbb8:	3d10      	subs	r5, #16
 800cbba:	432c      	orrs	r4, r5
 800cbbc:	50d4      	str	r4, [r2, r3]
 800cbbe:	e5c3      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800cbc0:	4a4e      	ldr	r2, [pc, #312]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbc2:	23a8      	movs	r3, #168	; 0xa8
 800cbc4:	58d4      	ldr	r4, [r2, r3]
 800cbc6:	4d4e      	ldr	r5, [pc, #312]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cbc8:	402c      	ands	r4, r5
 800cbca:	50d4      	str	r4, [r2, r3]
 800cbcc:	58d5      	ldr	r5, [r2, r3]
 800cbce:	24e0      	movs	r4, #224	; 0xe0
 800cbd0:	0224      	lsls	r4, r4, #8
 800cbd2:	432c      	orrs	r4, r5
 800cbd4:	50d4      	str	r4, [r2, r3]
 800cbd6:	e5b7      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800cbd8:	4a48      	ldr	r2, [pc, #288]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbda:	23a8      	movs	r3, #168	; 0xa8
 800cbdc:	58d4      	ldr	r4, [r2, r3]
 800cbde:	4d49      	ldr	r5, [pc, #292]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cbe0:	402c      	ands	r4, r5
 800cbe2:	50d4      	str	r4, [r2, r3]
 800cbe4:	58d5      	ldr	r5, [r2, r3]
 800cbe6:	24e0      	movs	r4, #224	; 0xe0
 800cbe8:	0524      	lsls	r4, r4, #20
 800cbea:	432c      	orrs	r4, r5
 800cbec:	50d4      	str	r4, [r2, r3]
 800cbee:	e5ab      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800cbf0:	4a40      	ldr	r2, [pc, #256]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cbf2:	23a8      	movs	r3, #168	; 0xa8
 800cbf4:	58d4      	ldr	r4, [r2, r3]
 800cbf6:	250f      	movs	r5, #15
 800cbf8:	43ac      	bics	r4, r5
 800cbfa:	50d4      	str	r4, [r2, r3]
 800cbfc:	58d4      	ldr	r4, [r2, r3]
 800cbfe:	3d01      	subs	r5, #1
 800cc00:	432c      	orrs	r4, r5
 800cc02:	50d4      	str	r4, [r2, r3]
 800cc04:	e5a0      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800cc06:	4a3b      	ldr	r2, [pc, #236]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cc08:	23a8      	movs	r3, #168	; 0xa8
 800cc0a:	58d4      	ldr	r4, [r2, r3]
 800cc0c:	4d3c      	ldr	r5, [pc, #240]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cc0e:	402c      	ands	r4, r5
 800cc10:	50d4      	str	r4, [r2, r3]
 800cc12:	58d5      	ldr	r5, [r2, r3]
 800cc14:	24e0      	movs	r4, #224	; 0xe0
 800cc16:	0224      	lsls	r4, r4, #8
 800cc18:	432c      	orrs	r4, r5
 800cc1a:	50d4      	str	r4, [r2, r3]
 800cc1c:	e594      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800cc1e:	4a3c      	ldr	r2, [pc, #240]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x658>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d000      	beq.n	800cc26 <RemapAndLinkDMAtoUARTTx+0x56e>
 800cc24:	e590      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
 800cc26:	680b      	ldr	r3, [r1, #0]
 800cc28:	4a2c      	ldr	r2, [pc, #176]	; (800ccdc <RemapAndLinkDMAtoUARTTx+0x624>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d01b      	beq.n	800cc66 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800cc2e:	4a2c      	ldr	r2, [pc, #176]	; (800cce0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d022      	beq.n	800cc7a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800cc34:	4a2b      	ldr	r2, [pc, #172]	; (800cce4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d02b      	beq.n	800cc92 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800cc3a:	4a2b      	ldr	r2, [pc, #172]	; (800cce8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d034      	beq.n	800ccaa <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800cc40:	4a2a      	ldr	r2, [pc, #168]	; (800ccec <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d03b      	beq.n	800ccbe <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800cc46:	4a2a      	ldr	r2, [pc, #168]	; (800ccf0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d000      	beq.n	800cc4e <RemapAndLinkDMAtoUARTTx+0x596>
 800cc4c:	e57c      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800cc4e:	4a29      	ldr	r2, [pc, #164]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cc50:	23a8      	movs	r3, #168	; 0xa8
 800cc52:	58d4      	ldr	r4, [r2, r3]
 800cc54:	4d28      	ldr	r5, [pc, #160]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cc56:	402c      	ands	r4, r5
 800cc58:	50d4      	str	r4, [r2, r3]
 800cc5a:	58d5      	ldr	r5, [r2, r3]
 800cc5c:	24f0      	movs	r4, #240	; 0xf0
 800cc5e:	0324      	lsls	r4, r4, #12
 800cc60:	432c      	orrs	r4, r5
 800cc62:	50d4      	str	r4, [r2, r3]
 800cc64:	e570      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800cc66:	4a25      	ldr	r2, [pc, #148]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc68:	23a8      	movs	r3, #168	; 0xa8
 800cc6a:	58d5      	ldr	r5, [r2, r3]
 800cc6c:	26f0      	movs	r6, #240	; 0xf0
 800cc6e:	43b5      	bics	r5, r6
 800cc70:	50d5      	str	r5, [r2, r3]
 800cc72:	58d4      	ldr	r4, [r2, r3]
 800cc74:	4334      	orrs	r4, r6
 800cc76:	50d4      	str	r4, [r2, r3]
 800cc78:	e566      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800cc7a:	4a20      	ldr	r2, [pc, #128]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc7c:	23a8      	movs	r3, #168	; 0xa8
 800cc7e:	58d4      	ldr	r4, [r2, r3]
 800cc80:	4d1f      	ldr	r5, [pc, #124]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cc82:	402c      	ands	r4, r5
 800cc84:	50d4      	str	r4, [r2, r3]
 800cc86:	58d5      	ldr	r5, [r2, r3]
 800cc88:	24f0      	movs	r4, #240	; 0xf0
 800cc8a:	0224      	lsls	r4, r4, #8
 800cc8c:	432c      	orrs	r4, r5
 800cc8e:	50d4      	str	r4, [r2, r3]
 800cc90:	e55a      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800cc92:	4a1a      	ldr	r2, [pc, #104]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x644>)
 800cc94:	23a8      	movs	r3, #168	; 0xa8
 800cc96:	58d4      	ldr	r4, [r2, r3]
 800cc98:	4d1a      	ldr	r5, [pc, #104]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cc9a:	402c      	ands	r4, r5
 800cc9c:	50d4      	str	r4, [r2, r3]
 800cc9e:	58d5      	ldr	r5, [r2, r3]
 800cca0:	24f0      	movs	r4, #240	; 0xf0
 800cca2:	0524      	lsls	r4, r4, #20
 800cca4:	432c      	orrs	r4, r5
 800cca6:	50d4      	str	r4, [r2, r3]
 800cca8:	e54e      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800ccaa:	4a12      	ldr	r2, [pc, #72]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ccac:	23a8      	movs	r3, #168	; 0xa8
 800ccae:	58d5      	ldr	r5, [r2, r3]
 800ccb0:	260f      	movs	r6, #15
 800ccb2:	43b5      	bics	r5, r6
 800ccb4:	50d5      	str	r5, [r2, r3]
 800ccb6:	58d4      	ldr	r4, [r2, r3]
 800ccb8:	4334      	orrs	r4, r6
 800ccba:	50d4      	str	r4, [r2, r3]
 800ccbc:	e544      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800ccbe:	4a0d      	ldr	r2, [pc, #52]	; (800ccf4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ccc0:	23a8      	movs	r3, #168	; 0xa8
 800ccc2:	58d4      	ldr	r4, [r2, r3]
 800ccc4:	4d0e      	ldr	r5, [pc, #56]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ccc6:	402c      	ands	r4, r5
 800ccc8:	50d4      	str	r4, [r2, r3]
 800ccca:	58d5      	ldr	r5, [r2, r3]
 800cccc:	24f0      	movs	r4, #240	; 0xf0
 800ccce:	0224      	lsls	r4, r4, #8
 800ccd0:	432c      	orrs	r4, r5
 800ccd2:	50d4      	str	r4, [r2, r3]
 800ccd4:	e538      	b.n	800c748 <RemapAndLinkDMAtoUARTTx+0x90>
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	40005000 	.word	0x40005000
 800ccdc:	4002001c 	.word	0x4002001c
 800cce0:	40020044 	.word	0x40020044
 800cce4:	40020080 	.word	0x40020080
 800cce8:	40020408 	.word	0x40020408
 800ccec:	40020444 	.word	0x40020444
 800ccf0:	40020458 	.word	0x40020458
 800ccf4:	40020400 	.word	0x40020400
 800ccf8:	fff0ffff 	.word	0xfff0ffff
 800ccfc:	40020000 	.word	0x40020000
 800cd00:	ffff0fff 	.word	0xffff0fff
 800cd04:	f0ffffff 	.word	0xf0ffffff
 800cd08:	40011400 	.word	0x40011400
 800cd0c:	40011800 	.word	0x40011800
 800cd10:	40011c00 	.word	0x40011c00

0800cd14 <DMA_MSG_TX_Setup>:
{	
 800cd14:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800cd16:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <DMA_MSG_TX_Setup+0x38>)
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d012      	beq.n	800cd44 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800cd1e:	4b0b      	ldr	r3, [pc, #44]	; (800cd4c <DMA_MSG_TX_Setup+0x38>)
 800cd20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d010      	beq.n	800cd48 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800cd26:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <DMA_MSG_TX_Setup+0x38>)
 800cd28:	2394      	movs	r3, #148	; 0x94
 800cd2a:	58d3      	ldr	r3, [r2, r3]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d007      	beq.n	800cd40 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800cd30:	0021      	movs	r1, r4
 800cd32:	f7ff fcc1 	bl	800c6b8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cd36:	2100      	movs	r1, #0
 800cd38:	0020      	movs	r0, r4
 800cd3a:	f7ff f85b 	bl	800bdf4 <SetupDMAInterrupts>
}
 800cd3e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800cd40:	4c03      	ldr	r4, [pc, #12]	; (800cd50 <DMA_MSG_TX_Setup+0x3c>)
 800cd42:	e7f5      	b.n	800cd30 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800cd44:	4c01      	ldr	r4, [pc, #4]	; (800cd4c <DMA_MSG_TX_Setup+0x38>)
 800cd46:	e7f3      	b.n	800cd30 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800cd48:	4c02      	ldr	r4, [pc, #8]	; (800cd54 <DMA_MSG_TX_Setup+0x40>)
 800cd4a:	e7f1      	b.n	800cd30 <DMA_MSG_TX_Setup+0x1c>
 800cd4c:	20001784 	.word	0x20001784
 800cd50:	200017f4 	.word	0x200017f4
 800cd54:	200017bc 	.word	0x200017bc

0800cd58 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800cd58:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800cd5a:	4807      	ldr	r0, [pc, #28]	; (800cd78 <CRC_Init+0x20>)
 800cd5c:	4b07      	ldr	r3, [pc, #28]	; (800cd7c <CRC_Init+0x24>)
 800cd5e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800cd60:	2310      	movs	r3, #16
 800cd62:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800cd64:	2300      	movs	r3, #0
 800cd66:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800cd68:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800cd6a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800cd6c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800cd6e:	3303      	adds	r3, #3
 800cd70:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800cd72:	f002 fcfd 	bl	800f770 <HAL_CRC_Init>
}
 800cd76:	bd10      	pop	{r4, pc}
 800cd78:	20006c24 	.word	0x20006c24
 800cd7c:	40023000 	.word	0x40023000

0800cd80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800cd80:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800cd82:	4a05      	ldr	r2, [pc, #20]	; (800cd98 <HAL_CRC_MspInit+0x18>)
 800cd84:	6951      	ldr	r1, [r2, #20]
 800cd86:	2340      	movs	r3, #64	; 0x40
 800cd88:	4319      	orrs	r1, r3
 800cd8a:	6151      	str	r1, [r2, #20]
 800cd8c:	6952      	ldr	r2, [r2, #20]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	9b01      	ldr	r3, [sp, #4]
}
 800cd94:	b002      	add	sp, #8
 800cd96:	4770      	bx	lr
 800cd98:	40021000 	.word	0x40021000

0800cd9c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800cd9c:	b500      	push	{lr}
 800cd9e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800cda0:	2380      	movs	r3, #128	; 0x80
 800cda2:	01db      	lsls	r3, r3, #7
 800cda4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cda6:	2301      	movs	r3, #1
 800cda8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cdae:	3303      	adds	r3, #3
 800cdb0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cdb2:	a901      	add	r1, sp, #4
 800cdb4:	4802      	ldr	r0, [pc, #8]	; (800cdc0 <IND_LED_Init+0x24>)
 800cdb6:	f003 fbdb 	bl	8010570 <HAL_GPIO_Init>
}
 800cdba:	b007      	add	sp, #28
 800cdbc:	bd00      	pop	{pc}
 800cdbe:	46c0      	nop			; (mov r8, r8)
 800cdc0:	48000800 	.word	0x48000800

0800cdc4 <GPIO_Init>:
{
 800cdc4:	b500      	push	{lr}
 800cdc6:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800cdc8:	4b18      	ldr	r3, [pc, #96]	; (800ce2c <GPIO_Init+0x68>)
 800cdca:	6959      	ldr	r1, [r3, #20]
 800cdcc:	2080      	movs	r0, #128	; 0x80
 800cdce:	0300      	lsls	r0, r0, #12
 800cdd0:	4301      	orrs	r1, r0
 800cdd2:	6159      	str	r1, [r3, #20]
 800cdd4:	695a      	ldr	r2, [r3, #20]
 800cdd6:	4002      	ands	r2, r0
 800cdd8:	9201      	str	r2, [sp, #4]
 800cdda:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800cddc:	6959      	ldr	r1, [r3, #20]
 800cdde:	2080      	movs	r0, #128	; 0x80
 800cde0:	0280      	lsls	r0, r0, #10
 800cde2:	4301      	orrs	r1, r0
 800cde4:	6159      	str	r1, [r3, #20]
 800cde6:	695a      	ldr	r2, [r3, #20]
 800cde8:	4002      	ands	r2, r0
 800cdea:	9202      	str	r2, [sp, #8]
 800cdec:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800cdee:	6959      	ldr	r1, [r3, #20]
 800cdf0:	2080      	movs	r0, #128	; 0x80
 800cdf2:	0340      	lsls	r0, r0, #13
 800cdf4:	4301      	orrs	r1, r0
 800cdf6:	6159      	str	r1, [r3, #20]
 800cdf8:	695a      	ldr	r2, [r3, #20]
 800cdfa:	4002      	ands	r2, r0
 800cdfc:	9203      	str	r2, [sp, #12]
 800cdfe:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800ce00:	6959      	ldr	r1, [r3, #20]
 800ce02:	2080      	movs	r0, #128	; 0x80
 800ce04:	02c0      	lsls	r0, r0, #11
 800ce06:	4301      	orrs	r1, r0
 800ce08:	6159      	str	r1, [r3, #20]
 800ce0a:	695a      	ldr	r2, [r3, #20]
 800ce0c:	4002      	ands	r2, r0
 800ce0e:	9204      	str	r2, [sp, #16]
 800ce10:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ce12:	695a      	ldr	r2, [r3, #20]
 800ce14:	2180      	movs	r1, #128	; 0x80
 800ce16:	03c9      	lsls	r1, r1, #15
 800ce18:	430a      	orrs	r2, r1
 800ce1a:	615a      	str	r2, [r3, #20]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	400b      	ands	r3, r1
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800ce24:	f7ff ffba 	bl	800cd9c <IND_LED_Init>
}
 800ce28:	b007      	add	sp, #28
 800ce2a:	bd00      	pop	{pc}
 800ce2c:	40021000 	.word	0x40021000

0800ce30 <Relay_Init>:

/* --- Configure Relay GPIO --- 
*/
void Relay_Init(void)
{
 800ce30:	b500      	push	{lr}
 800ce32:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Relay_PIN;
 800ce34:	2301      	movs	r3, #1
 800ce36:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce38:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce3e:	3303      	adds	r3, #3
 800ce40:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Relay_PORT, &GPIO_InitStruct);
 800ce42:	a901      	add	r1, sp, #4
 800ce44:	4802      	ldr	r0, [pc, #8]	; (800ce50 <Relay_Init+0x20>)
 800ce46:	f003 fb93 	bl	8010570 <HAL_GPIO_Init>
}
 800ce4a:	b007      	add	sp, #28
 800ce4c:	bd00      	pop	{pc}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	48000400 	.word	0x48000400

0800ce54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ce54:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ce56:	f002 fb97 	bl	800f588 <HAL_IncTick>
  osSystickHandler();  
 800ce5a:	f000 fbdf 	bl	800d61c <osSystickHandler>

}
 800ce5e:	bd10      	pop	{r4, pc}

0800ce60 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ce60:	e7fe      	b.n	800ce60 <HardFault_Handler>
	...

0800ce64 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800ce64:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800ce66:	4802      	ldr	r0, [pc, #8]	; (800ce70 <USART1_IRQHandler+0xc>)
 800ce68:	f005 fca1 	bl	80127ae <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	46c0      	nop			; (mov r8, r8)
 800ce70:	20006acc 	.word	0x20006acc

0800ce74 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ce74:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ce76:	4802      	ldr	r0, [pc, #8]	; (800ce80 <USART2_IRQHandler+0xc>)
 800ce78:	f005 fc99 	bl	80127ae <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	46c0      	nop			; (mov r8, r8)
 800ce80:	20006bb4 	.word	0x20006bb4

0800ce84 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ce84:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ce86:	4805      	ldr	r0, [pc, #20]	; (800ce9c <USART3_8_IRQHandler+0x18>)
 800ce88:	f005 fc91 	bl	80127ae <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800ce8c:	4804      	ldr	r0, [pc, #16]	; (800cea0 <USART3_8_IRQHandler+0x1c>)
 800ce8e:	f005 fc8e 	bl	80127ae <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800ce92:	4804      	ldr	r0, [pc, #16]	; (800cea4 <USART3_8_IRQHandler+0x20>)
 800ce94:	f005 fc8b 	bl	80127ae <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ce98:	bd10      	pop	{r4, pc}
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	200069ac 	.word	0x200069ac
 800cea0:	20006a5c 	.word	0x20006a5c
 800cea4:	20006b44 	.word	0x20006b44

0800cea8 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cea8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ceaa:	2001      	movs	r0, #1
 800ceac:	f7fd fcb0 	bl	800a810 <DMA_IRQHandler>
	
}
 800ceb0:	bd10      	pop	{r4, pc}
	...

0800ceb4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800ceb4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	06db      	lsls	r3, r3, #27
 800cebc:	d408      	bmi.n	800ced0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cebe:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	05db      	lsls	r3, r3, #23
 800cec4:	d408      	bmi.n	800ced8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cec6:	4b09      	ldr	r3, [pc, #36]	; (800ceec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	06db      	lsls	r3, r3, #27
 800cecc:	d408      	bmi.n	800cee0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800cece:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800ced0:	2005      	movs	r0, #5
 800ced2:	f7fd fc9d 	bl	800a810 <DMA_IRQHandler>
 800ced6:	e7fa      	b.n	800cece <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800ced8:	2002      	movs	r0, #2
 800ceda:	f7fd fc99 	bl	800a810 <DMA_IRQHandler>
 800cede:	e7f6      	b.n	800cece <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cee0:	4803      	ldr	r0, [pc, #12]	; (800cef0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cee2:	f002 fda1 	bl	800fa28 <HAL_DMA_IRQHandler>
}
 800cee6:	e7f2      	b.n	800cece <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cee8:	40020400 	.word	0x40020400
 800ceec:	40020000 	.word	0x40020000
 800cef0:	20001784 	.word	0x20001784

0800cef4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cef4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cef6:	4b14      	ldr	r3, [pc, #80]	; (800cf48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	03db      	lsls	r3, r3, #15
 800cefc:	d413      	bmi.n	800cf26 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cefe:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	02db      	lsls	r3, r3, #11
 800cf04:	d413      	bmi.n	800cf2e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cf06:	4b11      	ldr	r3, [pc, #68]	; (800cf4c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	05db      	lsls	r3, r3, #23
 800cf0c:	d413      	bmi.n	800cf36 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cf0e:	4b0e      	ldr	r3, [pc, #56]	; (800cf48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	04db      	lsls	r3, r3, #19
 800cf14:	d413      	bmi.n	800cf3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cf16:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	01db      	lsls	r3, r3, #7
 800cf1c:	d506      	bpl.n	800cf2c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cf1e:	480c      	ldr	r0, [pc, #48]	; (800cf50 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cf20:	f002 fd82 	bl	800fa28 <HAL_DMA_IRQHandler>
	}
}
 800cf24:	e002      	b.n	800cf2c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cf26:	2003      	movs	r0, #3
 800cf28:	f7fd fc72 	bl	800a810 <DMA_IRQHandler>
}
 800cf2c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cf2e:	2004      	movs	r0, #4
 800cf30:	f7fd fc6e 	bl	800a810 <DMA_IRQHandler>
 800cf34:	e7fa      	b.n	800cf2c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cf36:	2006      	movs	r0, #6
 800cf38:	f7fd fc6a 	bl	800a810 <DMA_IRQHandler>
 800cf3c:	e7f6      	b.n	800cf2c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cf3e:	4805      	ldr	r0, [pc, #20]	; (800cf54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cf40:	f002 fd72 	bl	800fa28 <HAL_DMA_IRQHandler>
 800cf44:	e7f2      	b.n	800cf2c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cf46:	46c0      	nop			; (mov r8, r8)
 800cf48:	40020000 	.word	0x40020000
 800cf4c:	40020400 	.word	0x40020400
 800cf50:	200017f4 	.word	0x200017f4
 800cf54:	200017bc 	.word	0x200017bc

0800cf58 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cf62:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cf68:	f7fe fff0 	bl	800bf4c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cf6c:	0020      	movs	r0, r4
 800cf6e:	f7fe fbf1 	bl	800b754 <GetPort>
 800cf72:	0080      	lsls	r0, r0, #2
 800cf74:	4b03      	ldr	r3, [pc, #12]	; (800cf84 <HAL_UART_TxCpltCallback+0x2c>)
 800cf76:	58c0      	ldr	r0, [r0, r3]
 800cf78:	a901      	add	r1, sp, #4
 800cf7a:	f000 fed3 	bl	800dd24 <xQueueGiveFromISR>
}
 800cf7e:	b002      	add	sp, #8
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	46c0      	nop			; (mov r8, r8)
 800cf84:	20006974 	.word	0x20006974

0800cf88 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cf8c:	2369      	movs	r3, #105	; 0x69
 800cf8e:	2201      	movs	r2, #1
 800cf90:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cf92:	f7fe fbdf 	bl	800b754 <GetPort>
	if (portStatus[port] == STREAM) {
 800cf96:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <HAL_UART_ErrorCallback+0x40>)
 800cf98:	5c1b      	ldrb	r3, [r3, r0]
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	d005      	beq.n	800cfaa <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <HAL_UART_ErrorCallback+0x44>)
 800cfa0:	1818      	adds	r0, r3, r0
 800cfa2:	3801      	subs	r0, #1
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	7003      	strb	r3, [r0, #0]
	}	
}
 800cfa8:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cfaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	b292      	uxth	r2, r2
 800cfb2:	3801      	subs	r0, #1
 800cfb4:	0080      	lsls	r0, r0, #2
 800cfb6:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <HAL_UART_ErrorCallback+0x48>)
 800cfb8:	58c3      	ldr	r3, [r0, r3]
 800cfba:	6819      	ldr	r1, [r3, #0]
 800cfbc:	3128      	adds	r1, #40	; 0x28
 800cfbe:	0020      	movs	r0, r4
 800cfc0:	f004 ffde 	bl	8011f80 <HAL_UART_Receive_DMA>
 800cfc4:	e7f0      	b.n	800cfa8 <HAL_UART_ErrorCallback+0x20>
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	20001270 	.word	0x20001270
 800cfcc:	20001434 	.word	0x20001434
 800cfd0:	200015d0 	.word	0x200015d0

0800cfd4 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cfd8:	f7fe fbbc 	bl	800b754 <GetPort>
 800cfdc:	4b13      	ldr	r3, [pc, #76]	; (800d02c <HAL_UART_RxCpltCallback+0x58>)
 800cfde:	5c1b      	ldrb	r3, [r3, r0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d006      	beq.n	800cff2 <HAL_UART_RxCpltCallback+0x1e>
 800cfe4:	0020      	movs	r0, r4
 800cfe6:	f7fe fbb5 	bl	800b754 <GetPort>
 800cfea:	4b10      	ldr	r3, [pc, #64]	; (800d02c <HAL_UART_RxCpltCallback+0x58>)
 800cfec:	5c1b      	ldrb	r3, [r3, r0]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d11a      	bne.n	800d028 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800cff2:	0020      	movs	r0, r4
 800cff4:	f7fe fbae 	bl	800b754 <GetPort>
 800cff8:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <HAL_UART_RxCpltCallback+0x5c>)
 800cffa:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800cffc:	0020      	movs	r0, r4
 800cffe:	f7fe fba9 	bl	800b754 <GetPort>
 800d002:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <HAL_UART_RxCpltCallback+0x58>)
 800d004:	2205      	movs	r2, #5
 800d006:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d008:	0020      	movs	r0, r4
 800d00a:	f7fe fba3 	bl	800b754 <GetPort>
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <HAL_UART_RxCpltCallback+0x60>)
 800d010:	1818      	adds	r0, r3, r0
 800d012:	3801      	subs	r0, #1
 800d014:	2300      	movs	r3, #0
 800d016:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d018:	0020      	movs	r0, r4
 800d01a:	f7fe fb9b 	bl	800b754 <GetPort>
 800d01e:	4b06      	ldr	r3, [pc, #24]	; (800d038 <HAL_UART_RxCpltCallback+0x64>)
 800d020:	1818      	adds	r0, r3, r0
 800d022:	3801      	subs	r0, #1
 800d024:	2301      	movs	r3, #1
 800d026:	7003      	strb	r3, [r0, #0]
	}
}
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	20001270 	.word	0x20001270
 800d030:	20006894 	.word	0x20006894
 800d034:	2000157c 	.word	0x2000157c
 800d038:	20001434 	.word	0x20001434

0800d03c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d03c:	b672      	cpsid	i
 800d03e:	e7fe      	b.n	800d03e <vApplicationStackOverflowHook+0x2>

0800d040 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d040:	b672      	cpsid	i
 800d042:	e7fe      	b.n	800d042 <vApplicationMallocFailedHook+0x2>

0800d044 <MX_USART1_UART_Init>:


/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d044:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d046:	4809      	ldr	r0, [pc, #36]	; (800d06c <MX_USART1_UART_Init+0x28>)
 800d048:	4b09      	ldr	r3, [pc, #36]	; (800d070 <MX_USART1_UART_Init+0x2c>)
 800d04a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d04c:	23e1      	movs	r3, #225	; 0xe1
 800d04e:	031b      	lsls	r3, r3, #12
 800d050:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d052:	2300      	movs	r3, #0
 800d054:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d056:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d058:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d05a:	220c      	movs	r2, #12
 800d05c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d05e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d060:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d062:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d064:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d066:	f005 facb 	bl	8012600 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d06a:	bd10      	pop	{r4, pc}
 800d06c:	20006acc 	.word	0x20006acc
 800d070:	40013800 	.word	0x40013800

0800d074 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d074:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d076:	4809      	ldr	r0, [pc, #36]	; (800d09c <MX_USART2_UART_Init+0x28>)
 800d078:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <MX_USART2_UART_Init+0x2c>)
 800d07a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d07c:	23e1      	movs	r3, #225	; 0xe1
 800d07e:	031b      	lsls	r3, r3, #12
 800d080:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d082:	2300      	movs	r3, #0
 800d084:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d086:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d088:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d08a:	220c      	movs	r2, #12
 800d08c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d08e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d090:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d092:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d094:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d096:	f005 fab3 	bl	8012600 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d09a:	bd10      	pop	{r4, pc}
 800d09c:	20006bb4 	.word	0x20006bb4
 800d0a0:	40004400 	.word	0x40004400

0800d0a4 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d0a4:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d0a6:	4809      	ldr	r0, [pc, #36]	; (800d0cc <MX_USART3_UART_Init+0x28>)
 800d0a8:	4b09      	ldr	r3, [pc, #36]	; (800d0d0 <MX_USART3_UART_Init+0x2c>)
 800d0aa:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0ac:	23e1      	movs	r3, #225	; 0xe1
 800d0ae:	031b      	lsls	r3, r3, #12
 800d0b0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d0b6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d0b8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0ba:	220c      	movs	r2, #12
 800d0bc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0be:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0c0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0c2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0c4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d0c6:	f005 fa9b 	bl	8012600 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d0ca:	bd10      	pop	{r4, pc}
 800d0cc:	200069ac 	.word	0x200069ac
 800d0d0:	40004800 	.word	0x40004800

0800d0d4 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d0d4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d0d6:	4809      	ldr	r0, [pc, #36]	; (800d0fc <MX_USART5_UART_Init+0x28>)
 800d0d8:	4b09      	ldr	r3, [pc, #36]	; (800d100 <MX_USART5_UART_Init+0x2c>)
 800d0da:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0dc:	23e1      	movs	r3, #225	; 0xe1
 800d0de:	031b      	lsls	r3, r3, #12
 800d0e0:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d0e6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d0e8:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d0ea:	220c      	movs	r2, #12
 800d0ec:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0ee:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0f0:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0f2:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0f4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d0f6:	f005 fa83 	bl	8012600 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d0fa:	bd10      	pop	{r4, pc}
 800d0fc:	20006a5c 	.word	0x20006a5c
 800d100:	40005000 	.word	0x40005000

0800d104 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d104:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d106:	4809      	ldr	r0, [pc, #36]	; (800d12c <MX_USART6_UART_Init+0x28>)
 800d108:	4b09      	ldr	r3, [pc, #36]	; (800d130 <MX_USART6_UART_Init+0x2c>)
 800d10a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d10c:	23e1      	movs	r3, #225	; 0xe1
 800d10e:	031b      	lsls	r3, r3, #12
 800d110:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d112:	2300      	movs	r3, #0
 800d114:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d116:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d118:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d11a:	220c      	movs	r2, #12
 800d11c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d11e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d120:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d122:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d124:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d126:	f005 fa6b 	bl	8012600 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d12a:	bd10      	pop	{r4, pc}
 800d12c:	20006b44 	.word	0x20006b44
 800d130:	40011400 	.word	0x40011400

0800d134 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d136:	46ce      	mov	lr, r9
 800d138:	b500      	push	{lr}
 800d13a:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d13c:	6803      	ldr	r3, [r0, #0]
 800d13e:	4a7b      	ldr	r2, [pc, #492]	; (800d32c <HAL_UART_MspInit+0x1f8>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d014      	beq.n	800d16e <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d144:	4a7a      	ldr	r2, [pc, #488]	; (800d330 <HAL_UART_MspInit+0x1fc>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d03f      	beq.n	800d1ca <HAL_UART_MspInit+0x96>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d14a:	4a7a      	ldr	r2, [pc, #488]	; (800d334 <HAL_UART_MspInit+0x200>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d068      	beq.n	800d222 <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d150:	4a79      	ldr	r2, [pc, #484]	; (800d338 <HAL_UART_MspInit+0x204>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d007      	beq.n	800d166 <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d156:	4a79      	ldr	r2, [pc, #484]	; (800d33c <HAL_UART_MspInit+0x208>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d100      	bne.n	800d15e <HAL_UART_MspInit+0x2a>
 800d15c:	e08e      	b.n	800d27c <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d15e:	4a78      	ldr	r2, [pc, #480]	; (800d340 <HAL_UART_MspInit+0x20c>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d100      	bne.n	800d166 <HAL_UART_MspInit+0x32>
 800d164:	e0b5      	b.n	800d2d2 <HAL_UART_MspInit+0x19e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d166:	b00a      	add	sp, #40	; 0x28
 800d168:	bc04      	pop	{r2}
 800d16a:	4691      	mov	r9, r2
 800d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d16e:	4a75      	ldr	r2, [pc, #468]	; (800d344 <HAL_UART_MspInit+0x210>)
 800d170:	6991      	ldr	r1, [r2, #24]
 800d172:	2080      	movs	r0, #128	; 0x80
 800d174:	01c0      	lsls	r0, r0, #7
 800d176:	4301      	orrs	r1, r0
 800d178:	6191      	str	r1, [r2, #24]
 800d17a:	6993      	ldr	r3, [r2, #24]
 800d17c:	4003      	ands	r3, r0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d182:	2380      	movs	r3, #128	; 0x80
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d188:	2702      	movs	r7, #2
 800d18a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d18c:	2401      	movs	r4, #1
 800d18e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d190:	2603      	movs	r6, #3
 800d192:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d194:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d196:	2590      	movs	r5, #144	; 0x90
 800d198:	05ed      	lsls	r5, r5, #23
 800d19a:	a905      	add	r1, sp, #20
 800d19c:	0028      	movs	r0, r5
 800d19e:	f003 f9e7 	bl	8010570 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d1a2:	2380      	movs	r3, #128	; 0x80
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1a8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1aa:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d1ae:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d1b0:	a905      	add	r1, sp, #20
 800d1b2:	0028      	movs	r0, r5
 800d1b4:	f003 f9dc 	bl	8010570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	201b      	movs	r0, #27
 800d1be:	f002 fa0d 	bl	800f5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d1c2:	201b      	movs	r0, #27
 800d1c4:	f002 fa3e 	bl	800f644 <HAL_NVIC_EnableIRQ>
 800d1c8:	e7cd      	b.n	800d166 <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d1ca:	4a5e      	ldr	r2, [pc, #376]	; (800d344 <HAL_UART_MspInit+0x210>)
 800d1cc:	69d1      	ldr	r1, [r2, #28]
 800d1ce:	2080      	movs	r0, #128	; 0x80
 800d1d0:	0280      	lsls	r0, r0, #10
 800d1d2:	4301      	orrs	r1, r0
 800d1d4:	61d1      	str	r1, [r2, #28]
 800d1d6:	69d3      	ldr	r3, [r2, #28]
 800d1d8:	4003      	ands	r3, r0
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d1de:	2304      	movs	r3, #4
 800d1e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e2:	2702      	movs	r7, #2
 800d1e4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1e6:	2401      	movs	r4, #1
 800d1e8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1ea:	2603      	movs	r6, #3
 800d1ec:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d1ee:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1f0:	2590      	movs	r5, #144	; 0x90
 800d1f2:	05ed      	lsls	r5, r5, #23
 800d1f4:	a905      	add	r1, sp, #20
 800d1f6:	0028      	movs	r0, r5
 800d1f8:	f003 f9ba 	bl	8010570 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d1fc:	2308      	movs	r3, #8
 800d1fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d200:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d202:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d204:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d206:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d208:	a905      	add	r1, sp, #20
 800d20a:	0028      	movs	r0, r5
 800d20c:	f003 f9b0 	bl	8010570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d210:	2200      	movs	r2, #0
 800d212:	2101      	movs	r1, #1
 800d214:	201c      	movs	r0, #28
 800d216:	f002 f9e1 	bl	800f5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d21a:	201c      	movs	r0, #28
 800d21c:	f002 fa12 	bl	800f644 <HAL_NVIC_EnableIRQ>
 800d220:	e7a1      	b.n	800d166 <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d222:	4a48      	ldr	r2, [pc, #288]	; (800d344 <HAL_UART_MspInit+0x210>)
 800d224:	69d1      	ldr	r1, [r2, #28]
 800d226:	2080      	movs	r0, #128	; 0x80
 800d228:	02c0      	lsls	r0, r0, #11
 800d22a:	4301      	orrs	r1, r0
 800d22c:	61d1      	str	r1, [r2, #28]
 800d22e:	69d3      	ldr	r3, [r2, #28]
 800d230:	4003      	ands	r3, r0
 800d232:	9302      	str	r3, [sp, #8]
 800d234:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d236:	2380      	movs	r3, #128	; 0x80
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d23c:	2402      	movs	r4, #2
 800d23e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d240:	2701      	movs	r7, #1
 800d242:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d244:	2603      	movs	r6, #3
 800d246:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d248:	2504      	movs	r5, #4
 800d24a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d24c:	a905      	add	r1, sp, #20
 800d24e:	483e      	ldr	r0, [pc, #248]	; (800d348 <HAL_UART_MspInit+0x214>)
 800d250:	f003 f98e 	bl	8010570 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d254:	2380      	movs	r3, #128	; 0x80
 800d256:	011b      	lsls	r3, r3, #4
 800d258:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d25a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d25c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d25e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800d260:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d262:	a905      	add	r1, sp, #20
 800d264:	4838      	ldr	r0, [pc, #224]	; (800d348 <HAL_UART_MspInit+0x214>)
 800d266:	f003 f983 	bl	8010570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d26a:	2200      	movs	r2, #0
 800d26c:	2101      	movs	r1, #1
 800d26e:	201d      	movs	r0, #29
 800d270:	f002 f9b4 	bl	800f5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d274:	201d      	movs	r0, #29
 800d276:	f002 f9e5 	bl	800f644 <HAL_NVIC_EnableIRQ>
 800d27a:	e774      	b.n	800d166 <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800d27c:	4a31      	ldr	r2, [pc, #196]	; (800d344 <HAL_UART_MspInit+0x210>)
 800d27e:	69d1      	ldr	r1, [r2, #28]
 800d280:	2080      	movs	r0, #128	; 0x80
 800d282:	0340      	lsls	r0, r0, #13
 800d284:	4301      	orrs	r1, r0
 800d286:	61d1      	str	r1, [r2, #28]
 800d288:	69d3      	ldr	r3, [r2, #28]
 800d28a:	4003      	ands	r3, r0
 800d28c:	9303      	str	r3, [sp, #12]
 800d28e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d290:	2308      	movs	r3, #8
 800d292:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d294:	2402      	movs	r4, #2
 800d296:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d298:	2701      	movs	r7, #1
 800d29a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d29c:	2603      	movs	r6, #3
 800d29e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d2a0:	2504      	movs	r5, #4
 800d2a2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d2a4:	a905      	add	r1, sp, #20
 800d2a6:	4828      	ldr	r0, [pc, #160]	; (800d348 <HAL_UART_MspInit+0x214>)
 800d2a8:	f003 f962 	bl	8010570 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2b2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2b4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d2b6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d2b8:	a905      	add	r1, sp, #20
 800d2ba:	4823      	ldr	r0, [pc, #140]	; (800d348 <HAL_UART_MspInit+0x214>)
 800d2bc:	f003 f958 	bl	8010570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	201d      	movs	r0, #29
 800d2c6:	f002 f989 	bl	800f5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d2ca:	201d      	movs	r0, #29
 800d2cc:	f002 f9ba 	bl	800f644 <HAL_NVIC_EnableIRQ>
 800d2d0:	e749      	b.n	800d166 <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800d2d2:	4b1c      	ldr	r3, [pc, #112]	; (800d344 <HAL_UART_MspInit+0x210>)
 800d2d4:	699a      	ldr	r2, [r3, #24]
 800d2d6:	2420      	movs	r4, #32
 800d2d8:	4322      	orrs	r2, r4
 800d2da:	619a      	str	r2, [r3, #24]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	4023      	ands	r3, r4
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e8:	3b0e      	subs	r3, #14
 800d2ea:	4699      	mov	r9, r3
 800d2ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2ee:	2501      	movs	r5, #1
 800d2f0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2f2:	2703      	movs	r7, #3
 800d2f4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d2f6:	2605      	movs	r6, #5
 800d2f8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d2fa:	a905      	add	r1, sp, #20
 800d2fc:	2090      	movs	r0, #144	; 0x90
 800d2fe:	05c0      	lsls	r0, r0, #23
 800d300:	f003 f936 	bl	8010570 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d304:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d306:	464b      	mov	r3, r9
 800d308:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d30a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d30c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d30e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d310:	a905      	add	r1, sp, #20
 800d312:	2090      	movs	r0, #144	; 0x90
 800d314:	05c0      	lsls	r0, r0, #23
 800d316:	f003 f92b 	bl	8010570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d31a:	2200      	movs	r2, #0
 800d31c:	2101      	movs	r1, #1
 800d31e:	201d      	movs	r0, #29
 800d320:	f002 f95c 	bl	800f5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d324:	201d      	movs	r0, #29
 800d326:	f002 f98d 	bl	800f644 <HAL_NVIC_EnableIRQ>
}
 800d32a:	e71c      	b.n	800d166 <HAL_UART_MspInit+0x32>
 800d32c:	40013800 	.word	0x40013800
 800d330:	40004400 	.word	0x40004400
 800d334:	40004800 	.word	0x40004800
 800d338:	40004c00 	.word	0x40004c00
 800d33c:	40005000 	.word	0x40005000
 800d340:	40011400 	.word	0x40011400
 800d344:	40021000 	.word	0x40021000
 800d348:	48000400 	.word	0x48000400

0800d34c <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d34e:	b083      	sub	sp, #12
 800d350:	0004      	movs	r4, r0
 800d352:	000d      	movs	r5, r1
 800d354:	0016      	movs	r6, r2
 800d356:	9301      	str	r3, [sp, #4]
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d358:	f7f7 fa6e 	bl	8004838 <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d35c:	2701      	movs	r7, #1
	if (GetUart(port) != NULL) {
 800d35e:	2800      	cmp	r0, #0
 800d360:	d018      	beq.n	800d394 <writePxMutex+0x48>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d362:	00a3      	lsls	r3, r4, #2
 800d364:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <writePxMutex+0x50>)
 800d366:	5898      	ldr	r0, [r3, r2]
 800d368:	9901      	ldr	r1, [sp, #4]
 800d36a:	f000 f903 	bl	800d574 <osSemaphoreWait>
 800d36e:	2800      	cmp	r0, #0
 800d370:	d110      	bne.n	800d394 <writePxMutex+0x48>
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d372:	0020      	movs	r0, r4
 800d374:	f7f7 fa60 	bl	8004838 <GetUart>
 800d378:	9b08      	ldr	r3, [sp, #32]
 800d37a:	0032      	movs	r2, r6
 800d37c:	0029      	movs	r1, r5
 800d37e:	f005 f899 	bl	80124b4 <HAL_UART_Transmit>
 800d382:	1e07      	subs	r7, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d384:	d001      	beq.n	800d38a <writePxMutex+0x3e>
 800d386:	2803      	cmp	r0, #3
 800d388:	d1f3      	bne.n	800d372 <writePxMutex+0x26>
			}
			/* Give back the semaphore. */
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d38a:	00a4      	lsls	r4, r4, #2
 800d38c:	4b03      	ldr	r3, [pc, #12]	; (800d39c <writePxMutex+0x50>)
 800d38e:	58e0      	ldr	r0, [r4, r3]
 800d390:	f000 f91c 	bl	800d5cc <osSemaphoreRelease>
		}
	}
	
	return result;
}
 800d394:	0038      	movs	r0, r7
 800d396:	b003      	add	sp, #12
 800d398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	20006974 	.word	0x20006974

0800d3a0 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	0004      	movs	r4, r0
 800d3a4:	000e      	movs	r6, r1
 800d3a6:	0017      	movs	r7, r2
 800d3a8:	001d      	movs	r5, r3
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d3aa:	f7f7 fa45 	bl	8004838 <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3ae:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d008      	beq.n	800d3c6 <writePxITMutex+0x26>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3b4:	00a3      	lsls	r3, r4, #2
 800d3b6:	4a09      	ldr	r2, [pc, #36]	; (800d3dc <writePxITMutex+0x3c>)
 800d3b8:	5898      	ldr	r0, [r3, r2]
 800d3ba:	0029      	movs	r1, r5
 800d3bc:	f000 f8da 	bl	800d574 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3c0:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d001      	beq.n	800d3ca <writePxITMutex+0x2a>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d3ca:	0020      	movs	r0, r4
 800d3cc:	f7f7 fa34 	bl	8004838 <GetUart>
 800d3d0:	003a      	movs	r2, r7
 800d3d2:	0031      	movs	r1, r6
 800d3d4:	f004 fcd8 	bl	8011d88 <HAL_UART_Transmit_IT>
 800d3d8:	0003      	movs	r3, r0
 800d3da:	e7f4      	b.n	800d3c6 <writePxITMutex+0x26>
 800d3dc:	20006974 	.word	0x20006974

0800d3e0 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	0004      	movs	r4, r0
 800d3e6:	000f      	movs	r7, r1
 800d3e8:	9201      	str	r2, [sp, #4]
 800d3ea:	001e      	movs	r6, r3
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);
 800d3ec:	f7f7 fa24 	bl	8004838 <GetUart>
 800d3f0:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3f2:	2301      	movs	r3, #1

	if (hUart != NULL) {	
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d008      	beq.n	800d40a <writePxDMAMutex+0x2a>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3f8:	00a4      	lsls	r4, r4, #2
 800d3fa:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <writePxDMAMutex+0x44>)
 800d3fc:	58e0      	ldr	r0, [r4, r3]
 800d3fe:	0031      	movs	r1, r6
 800d400:	f000 f8b8 	bl	800d574 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d404:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d406:	2800      	cmp	r0, #0
 800d408:	d002      	beq.n	800d410 <writePxDMAMutex+0x30>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d40a:	0018      	movs	r0, r3
 800d40c:	b003      	add	sp, #12
 800d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d410:	0028      	movs	r0, r5
 800d412:	f7ff fc7f 	bl	800cd14 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d416:	9a01      	ldr	r2, [sp, #4]
 800d418:	0039      	movs	r1, r7
 800d41a:	0028      	movs	r0, r5
 800d41c:	f004 fd60 	bl	8011ee0 <HAL_UART_Transmit_DMA>
 800d420:	0003      	movs	r3, r0
 800d422:	e7f2      	b.n	800d40a <writePxDMAMutex+0x2a>
 800d424:	20006974 	.word	0x20006974

0800d428 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800d428:	b510      	push	{r4, lr}
 800d42a:	000c      	movs	r4, r1
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);
 800d42c:	f7f7 fa04 	bl	8004838 <GetUart>

	huart->Init.BaudRate = baudrate;
 800d430:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d432:	f005 f8e5 	bl	8012600 <HAL_UART_Init>
	
	return result;
}
 800d436:	2000      	movs	r0, #0
 800d438:	bd10      	pop	{r4, pc}
	...

0800d43c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d43c:	4816      	ldr	r0, [pc, #88]	; (800d498 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d43e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d440:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d442:	e003      	b.n	800d44c <LoopCopyDataInit>

0800d444 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d444:	4b15      	ldr	r3, [pc, #84]	; (800d49c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d446:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d448:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d44a:	3104      	adds	r1, #4

0800d44c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d44c:	4814      	ldr	r0, [pc, #80]	; (800d4a0 <LoopForever+0xc>)
  ldr r3, =_edata
 800d44e:	4b15      	ldr	r3, [pc, #84]	; (800d4a4 <LoopForever+0x10>)
  adds r2, r0, r1
 800d450:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d452:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d454:	d3f6      	bcc.n	800d444 <CopyDataInit>
  ldr r2, =_sbss
 800d456:	4a14      	ldr	r2, [pc, #80]	; (800d4a8 <LoopForever+0x14>)
  b LoopFillZerobss
 800d458:	e002      	b.n	800d460 <LoopFillZerobss>

0800d45a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d45a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d45c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d45e:	3204      	adds	r2, #4

0800d460 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d460:	4b12      	ldr	r3, [pc, #72]	; (800d4ac <LoopForever+0x18>)
  cmp r2, r3
 800d462:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d464:	d3f9      	bcc.n	800d45a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d466:	4812      	ldr	r0, [pc, #72]	; (800d4b0 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d468:	4912      	ldr	r1, [pc, #72]	; (800d4b4 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d46a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d46c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d46e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d470:	d005      	beq.n	800d47e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d472:	f000 f82b 	bl	800d4cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d476:	f005 fa37 	bl	80128e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d47a:	f005 fa16 	bl	80128aa <main>

0800d47e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d47e:	480e      	ldr	r0, [pc, #56]	; (800d4b8 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d480:	490e      	ldr	r1, [pc, #56]	; (800d4bc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d482:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d484:	480e      	ldr	r0, [pc, #56]	; (800d4c0 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d486:	490d      	ldr	r1, [pc, #52]	; (800d4bc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d488:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d48a:	480e      	ldr	r0, [pc, #56]	; (800d4c4 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d48c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d48e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d490:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d492:	4700      	bx	r0

0800d494 <LoopForever>:


LoopForever:
    b LoopForever
 800d494:	e7fe      	b.n	800d494 <LoopForever>
 800d496:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d498:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d49c:	0801a820 	.word	0x0801a820
  ldr r0, =_sdata
 800d4a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d4a4:	20000a10 	.word	0x20000a10
  ldr r2, =_sbss
 800d4a8:	20000a10 	.word	0x20000a10
  ldr r3, = _ebss
 800d4ac:	20006cb8 	.word	0x20006cb8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d4b0:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d4b4:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d4b8:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d4bc:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d4c0:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d4c4:	1fffd800 	.word	0x1fffd800

0800d4c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d4c8:	e7fe      	b.n	800d4c8 <ADC1_COMP_IRQHandler>
	...

0800d4cc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d4cc:	4b11      	ldr	r3, [pc, #68]	; (800d514 <SystemInit+0x48>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	430a      	orrs	r2, r1
 800d4d4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	480f      	ldr	r0, [pc, #60]	; (800d518 <SystemInit+0x4c>)
 800d4da:	4002      	ands	r2, r0
 800d4dc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	480e      	ldr	r0, [pc, #56]	; (800d51c <SystemInit+0x50>)
 800d4e2:	4002      	ands	r2, r0
 800d4e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	480d      	ldr	r0, [pc, #52]	; (800d520 <SystemInit+0x54>)
 800d4ea:	4002      	ands	r2, r0
 800d4ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	480c      	ldr	r0, [pc, #48]	; (800d524 <SystemInit+0x58>)
 800d4f2:	4002      	ands	r2, r0
 800d4f4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f8:	200f      	movs	r0, #15
 800d4fa:	4382      	bics	r2, r0
 800d4fc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d4fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d500:	4809      	ldr	r0, [pc, #36]	; (800d528 <SystemInit+0x5c>)
 800d502:	4002      	ands	r2, r0
 800d504:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d508:	438a      	bics	r2, r1
 800d50a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d50c:	2200      	movs	r2, #0
 800d50e:	609a      	str	r2, [r3, #8]

}
 800d510:	4770      	bx	lr
 800d512:	46c0      	nop			; (mov r8, r8)
 800d514:	40021000 	.word	0x40021000
 800d518:	08ffb80c 	.word	0x08ffb80c
 800d51c:	fef6ffff 	.word	0xfef6ffff
 800d520:	fffbffff 	.word	0xfffbffff
 800d524:	ffc0ffff 	.word	0xffc0ffff
 800d528:	fff0feac 	.word	0xfff0feac

0800d52c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d52c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d52e:	f000 ff55 	bl	800e3dc <vTaskStartScheduler>
  
  return osOK;
}
 800d532:	2000      	movs	r0, #0
 800d534:	bd10      	pop	{r4, pc}

0800d536 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d536:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d538:	2800      	cmp	r0, #0
 800d53a:	d100      	bne.n	800d53e <osDelay+0x8>
 800d53c:	3001      	adds	r0, #1
 800d53e:	f001 f889 	bl	800e654 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d542:	2000      	movs	r0, #0
 800d544:	bd10      	pop	{r4, pc}

0800d546 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d546:	b510      	push	{r4, lr}
 800d548:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d54a:	2901      	cmp	r1, #1
 800d54c:	d005      	beq.n	800d55a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d54e:	2100      	movs	r1, #0
 800d550:	f000 faf6 	bl	800db40 <xQueueCreateCountingSemaphore>
 800d554:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d556:	0020      	movs	r0, r4
 800d558:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d55a:	2203      	movs	r2, #3
 800d55c:	2100      	movs	r1, #0
 800d55e:	f000 fac8 	bl	800daf2 <xQueueGenericCreate>
 800d562:	1e04      	subs	r4, r0, #0
 800d564:	d0f7      	beq.n	800d556 <osSemaphoreCreate+0x10>
 800d566:	2300      	movs	r3, #0
 800d568:	2200      	movs	r2, #0
 800d56a:	2100      	movs	r1, #0
 800d56c:	f000 fafc 	bl	800db68 <xQueueGenericSend>
 800d570:	e7f1      	b.n	800d556 <osSemaphoreCreate+0x10>
	...

0800d574 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d574:	b500      	push	{lr}
 800d576:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d578:	2300      	movs	r3, #0
 800d57a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d021      	beq.n	800d5c4 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d580:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d584:	2b00      	cmp	r3, #0
 800d586:	d010      	beq.n	800d5aa <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d588:	aa01      	add	r2, sp, #4
 800d58a:	2100      	movs	r1, #0
 800d58c:	f000 fcae 	bl	800deec <xQueueReceiveFromISR>
 800d590:	0003      	movs	r3, r0
      return osErrorOS;
 800d592:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d594:	2b01      	cmp	r3, #1
 800d596:	d113      	bne.n	800d5c0 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d598:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800d59a:	9b01      	ldr	r3, [sp, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00f      	beq.n	800d5c0 <osSemaphoreWait+0x4c>
 800d5a0:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <osSemaphoreWait+0x54>)
 800d5a2:	2280      	movs	r2, #128	; 0x80
 800d5a4:	0552      	lsls	r2, r2, #21
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	e00a      	b.n	800d5c0 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	000a      	movs	r2, r1
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	f000 fbf3 	bl	800dd9a <xQueueGenericReceive>
  return osOK;
 800d5b4:	3801      	subs	r0, #1
 800d5b6:	1e43      	subs	r3, r0, #1
 800d5b8:	4198      	sbcs	r0, r3
 800d5ba:	4240      	negs	r0, r0
 800d5bc:	23ff      	movs	r3, #255	; 0xff
 800d5be:	4018      	ands	r0, r3
}
 800d5c0:	b003      	add	sp, #12
 800d5c2:	bd00      	pop	{pc}
    return osErrorParameter;
 800d5c4:	2080      	movs	r0, #128	; 0x80
 800d5c6:	e7fb      	b.n	800d5c0 <osSemaphoreWait+0x4c>
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d5cc:	b500      	push	{lr}
 800d5ce:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00f      	beq.n	800d5fc <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5dc:	a901      	add	r1, sp, #4
 800d5de:	f000 fba1 	bl	800dd24 <xQueueGiveFromISR>
 800d5e2:	0003      	movs	r3, r0
      return osErrorOS;
 800d5e4:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d114      	bne.n	800d614 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800d5ea:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d010      	beq.n	800d614 <osSemaphoreRelease+0x48>
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <osSemaphoreRelease+0x4c>)
 800d5f4:	2280      	movs	r2, #128	; 0x80
 800d5f6:	0552      	lsls	r2, r2, #21
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	e00b      	b.n	800d614 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	2200      	movs	r2, #0
 800d600:	2100      	movs	r1, #0
 800d602:	f000 fab1 	bl	800db68 <xQueueGenericSend>
      result = osErrorOS;
 800d606:	3801      	subs	r0, #1
 800d608:	4243      	negs	r3, r0
 800d60a:	4158      	adcs	r0, r3
 800d60c:	4240      	negs	r0, r0
 800d60e:	23fe      	movs	r3, #254	; 0xfe
 800d610:	4398      	bics	r0, r3
 800d612:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800d614:	b003      	add	sp, #12
 800d616:	bd00      	pop	{pc}
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d61c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d61e:	f001 fa0f 	bl	800ea40 <xTaskGetSchedulerState>
 800d622:	2801      	cmp	r0, #1
 800d624:	d001      	beq.n	800d62a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d626:	f001 fe91 	bl	800f34c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d62a:	bd10      	pop	{r4, pc}

0800d62c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d630:	d101      	bne.n	800d636 <FreeRTOS_CLIRegisterCommand+0xa>
 800d632:	b672      	cpsid	i
 800d634:	e7fe      	b.n	800d634 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d636:	2008      	movs	r0, #8
 800d638:	f001 fec4 	bl	800f3c4 <pvPortMalloc>
 800d63c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d63e:	d101      	bne.n	800d644 <FreeRTOS_CLIRegisterCommand+0x18>
 800d640:	b672      	cpsid	i
 800d642:	e7fe      	b.n	800d642 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d644:	f001 fe3c 	bl	800f2c0 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d648:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d64e:	4b04      	ldr	r3, [pc, #16]	; (800d660 <FreeRTOS_CLIRegisterCommand+0x34>)
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d654:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d656:	f001 fe3f 	bl	800f2d8 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d65a:	2001      	movs	r0, #1
 800d65c:	bd70      	pop	{r4, r5, r6, pc}
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	20000050 	.word	0x20000050

0800d664 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d666:	46d6      	mov	lr, sl
 800d668:	b500      	push	{lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	9001      	str	r0, [sp, #4]
 800d66e:	9102      	str	r1, [sp, #8]
 800d670:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d672:	4b37      	ldr	r3, [pc, #220]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00e      	beq.n	800d698 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	9a01      	ldr	r2, [sp, #4]
 800d680:	9903      	ldr	r1, [sp, #12]
 800d682:	9802      	ldr	r0, [sp, #8]
 800d684:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d686:	2800      	cmp	r0, #0
 800d688:	d102      	bne.n	800d690 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d68a:	4b31      	ldr	r3, [pc, #196]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d690:	b004      	add	sp, #16
 800d692:	bc04      	pop	{r2}
 800d694:	4692      	mov	sl, r2
 800d696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d698:	4d2e      	ldr	r5, [pc, #184]	; (800d754 <FreeRTOS_CLIProcessCommand+0xf0>)
 800d69a:	4a2d      	ldr	r2, [pc, #180]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d69c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d69e:	3320      	adds	r3, #32
 800d6a0:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d6a2:	0017      	movs	r7, r2
 800d6a4:	e00a      	b.n	800d6bc <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d6a6:	0002      	movs	r2, r0
 800d6a8:	0021      	movs	r1, r4
 800d6aa:	9801      	ldr	r0, [sp, #4]
 800d6ac:	f005 fde6 	bl	801327c <strncmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d00e      	beq.n	800d6d2 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d6b4:	686d      	ldr	r5, [r5, #4]
 800d6b6:	603d      	str	r5, [r7, #0]
 800d6b8:	2d00      	cmp	r5, #0
 800d6ba:	d012      	beq.n	800d6e2 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d6bc:	682e      	ldr	r6, [r5, #0]
 800d6be:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d6c0:	0020      	movs	r0, r4
 800d6c2:	f7f2 fd29 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d6c6:	9b01      	ldr	r3, [sp, #4]
 800d6c8:	5c1b      	ldrb	r3, [r3, r0]
 800d6ca:	4652      	mov	r2, sl
 800d6cc:	4393      	bics	r3, r2
 800d6ce:	d1f1      	bne.n	800d6b4 <FreeRTOS_CLIProcessCommand+0x50>
 800d6d0:	e7e9      	b.n	800d6a6 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d6d2:	200c      	movs	r0, #12
 800d6d4:	5630      	ldrsb	r0, [r6, r0]
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	da0a      	bge.n	800d6f0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d6da:	4b1d      	ldr	r3, [pc, #116]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1cb      	bne.n	800d67a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d6e2:	9a03      	ldr	r2, [sp, #12]
 800d6e4:	491c      	ldr	r1, [pc, #112]	; (800d758 <FreeRTOS_CLIProcessCommand+0xf4>)
 800d6e6:	9802      	ldr	r0, [sp, #8]
 800d6e8:	f005 fdd9 	bl	801329e <strncpy>
		xReturn = pdFALSE;
 800d6ec:	2000      	movs	r0, #0
	return xReturn;
 800d6ee:	e7cf      	b.n	800d690 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d6f0:	9a01      	ldr	r2, [sp, #4]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	56d3      	ldrsb	r3, [r2, r3]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d027      	beq.n	800d74a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800d6fa:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800d6fc:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d6fe:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800d700:	2501      	movs	r5, #1
 800d702:	e009      	b.n	800d718 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800d704:	2901      	cmp	r1, #1
 800d706:	d002      	beq.n	800d70e <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800d708:	3401      	adds	r4, #1
 800d70a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d70c:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800d70e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800d710:	2300      	movs	r3, #0
 800d712:	56d3      	ldrsb	r3, [r2, r3]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800d718:	2b20      	cmp	r3, #32
 800d71a:	d0f3      	beq.n	800d704 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800d71c:	0031      	movs	r1, r6
 800d71e:	e7f6      	b.n	800d70e <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d720:	2901      	cmp	r1, #1
 800d722:	d00f      	beq.n	800d744 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d724:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d0da      	beq.n	800d6e2 <FreeRTOS_CLIProcessCommand+0x7e>
 800d72c:	42a0      	cmp	r0, r4
 800d72e:	d0a4      	beq.n	800d67a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d730:	9a03      	ldr	r2, [sp, #12]
 800d732:	490a      	ldr	r1, [pc, #40]	; (800d75c <FreeRTOS_CLIProcessCommand+0xf8>)
 800d734:	9802      	ldr	r0, [sp, #8]
 800d736:	f005 fdb2 	bl	801329e <strncpy>
		pxCommand = NULL;
 800d73a:	4b05      	ldr	r3, [pc, #20]	; (800d750 <FreeRTOS_CLIProcessCommand+0xec>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	2000      	movs	r0, #0
 800d742:	e7a5      	b.n	800d690 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d744:	3c01      	subs	r4, #1
 800d746:	b264      	sxtb	r4, r4
 800d748:	e7ec      	b.n	800d724 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800d74a:	2400      	movs	r4, #0
 800d74c:	e7ea      	b.n	800d724 <FreeRTOS_CLIProcessCommand+0xc0>
 800d74e:	46c0      	nop			; (mov r8, r8)
 800d750:	20001be4 	.word	0x20001be4
 800d754:	20000054 	.word	0x20000054
 800d758:	0801a3d8 	.word	0x0801a3d8
 800d75c:	0801a380 	.word	0x0801a380

0800d760 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d760:	4800      	ldr	r0, [pc, #0]	; (800d764 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d762:	4770      	bx	lr
 800d764:	2000197c 	.word	0x2000197c

0800d768 <FreeRTOS_CLIGetParameter>:
{
 800d768:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d76e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d770:	2900      	cmp	r1, #0
 800d772:	d10b      	bne.n	800d78c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800d774:	2000      	movs	r0, #0
 800d776:	e02a      	b.n	800d7ce <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800d778:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d77a:	2300      	movs	r3, #0
 800d77c:	56c3      	ldrsb	r3, [r0, r3]
 800d77e:	2b20      	cmp	r3, #32
 800d780:	d0fa      	beq.n	800d778 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800d782:	2b00      	cmp	r3, #0
 800d784:	d022      	beq.n	800d7cc <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800d786:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d788:	42a1      	cmp	r1, r4
 800d78a:	d00d      	beq.n	800d7a8 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d78c:	2300      	movs	r3, #0
 800d78e:	56c3      	ldrsb	r3, [r0, r3]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d01f      	beq.n	800d7d4 <FreeRTOS_CLIGetParameter+0x6c>
 800d794:	2b20      	cmp	r3, #32
 800d796:	d0ef      	beq.n	800d778 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800d798:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d79a:	2300      	movs	r3, #0
 800d79c:	56c3      	ldrsb	r3, [r0, r3]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d018      	beq.n	800d7d4 <FreeRTOS_CLIGetParameter+0x6c>
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d1f8      	bne.n	800d798 <FreeRTOS_CLIGetParameter+0x30>
 800d7a6:	e7e7      	b.n	800d778 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7a8:	7803      	ldrb	r3, [r0, #0]
 800d7aa:	2120      	movs	r1, #32
 800d7ac:	438b      	bics	r3, r1
 800d7ae:	d00f      	beq.n	800d7d0 <FreeRTOS_CLIGetParameter+0x68>
 800d7b0:	0004      	movs	r4, r0
 800d7b2:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800d7b4:	6813      	ldr	r3, [r2, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800d7ba:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d7bc:	7821      	ldrb	r1, [r4, #0]
 800d7be:	43a9      	bics	r1, r5
 800d7c0:	d1f8      	bne.n	800d7b4 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800d7c2:	1e5a      	subs	r2, r3, #1
 800d7c4:	4193      	sbcs	r3, r2
 800d7c6:	425b      	negs	r3, r3
 800d7c8:	4018      	ands	r0, r3
 800d7ca:	e000      	b.n	800d7ce <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800d7cc:	2000      	movs	r0, #0
}
 800d7ce:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	e7fc      	b.n	800d7ce <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	56c3      	ldrsb	r3, [r0, r3]
 800d7d8:	e7d3      	b.n	800d782 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800d7dc <prvHelpCommand>:
{
 800d7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	0004      	movs	r4, r0
 800d7e2:	000d      	movs	r5, r1
 800d7e4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d7ea:	aa01      	add	r2, sp, #4
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	f7ff ffbb 	bl	800d768 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d027      	beq.n	800d846 <prvHelpCommand+0x6a>
 800d7f6:	2206      	movs	r2, #6
 800d7f8:	4930      	ldr	r1, [pc, #192]	; (800d8bc <prvHelpCommand+0xe0>)
 800d7fa:	f005 fd3f 	bl	801327c <strncmp>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d149      	bne.n	800d896 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800d802:	4b2f      	ldr	r3, [pc, #188]	; (800d8c0 <prvHelpCommand+0xe4>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b07      	cmp	r3, #7
 800d808:	d012      	beq.n	800d830 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d80a:	1c5f      	adds	r7, r3, #1
 800d80c:	b2ff      	uxtb	r7, r7
 800d80e:	4a2c      	ldr	r2, [pc, #176]	; (800d8c0 <prvHelpCommand+0xe4>)
 800d810:	7017      	strb	r7, [r2, #0]
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4a2b      	ldr	r2, [pc, #172]	; (800d8c4 <prvHelpCommand+0xe8>)
 800d816:	5899      	ldr	r1, [r3, r2]
 800d818:	002a      	movs	r2, r5
 800d81a:	0020      	movs	r0, r4
 800d81c:	f005 fd3f 	bl	801329e <strncpy>
			xReturn = pdTRUE;
 800d820:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d822:	2f07      	cmp	r7, #7
 800d824:	d137      	bne.n	800d896 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800d826:	4b26      	ldr	r3, [pc, #152]	; (800d8c0 <prvHelpCommand+0xe4>)
 800d828:	2200      	movs	r2, #0
 800d82a:	701a      	strb	r2, [r3, #0]
 800d82c:	2600      	movs	r6, #0
 800d82e:	e032      	b.n	800d896 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d830:	4b23      	ldr	r3, [pc, #140]	; (800d8c0 <prvHelpCommand+0xe4>)
 800d832:	2201      	movs	r2, #1
 800d834:	701a      	strb	r2, [r3, #0]
 800d836:	4b23      	ldr	r3, [pc, #140]	; (800d8c4 <prvHelpCommand+0xe8>)
 800d838:	6819      	ldr	r1, [r3, #0]
 800d83a:	002a      	movs	r2, r5
 800d83c:	0020      	movs	r0, r4
 800d83e:	f005 fd2e 	bl	801329e <strncpy>
			xReturn = pdTRUE;
 800d842:	2601      	movs	r6, #1
 800d844:	e027      	b.n	800d896 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800d846:	4b20      	ldr	r3, [pc, #128]	; (800d8c8 <prvHelpCommand+0xec>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d026      	beq.n	800d89c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800d84e:	4b1f      	ldr	r3, [pc, #124]	; (800d8cc <prvHelpCommand+0xf0>)
 800d850:	781a      	ldrb	r2, [r3, #0]
 800d852:	4b1f      	ldr	r3, [pc, #124]	; (800d8d0 <prvHelpCommand+0xf4>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d927      	bls.n	800d8aa <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d85a:	002a      	movs	r2, r5
 800d85c:	3a08      	subs	r2, #8
 800d85e:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <prvHelpCommand+0xec>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6859      	ldr	r1, [r3, #4]
 800d866:	0020      	movs	r0, r4
 800d868:	3008      	adds	r0, #8
 800d86a:	f005 fd18 	bl	801329e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d86e:	1c60      	adds	r0, r4, #1
 800d870:	4918      	ldr	r1, [pc, #96]	; (800d8d4 <prvHelpCommand+0xf8>)
 800d872:	f005 fcfb 	bl	801326c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d876:	2328      	movs	r3, #40	; 0x28
 800d878:	7023      	strb	r3, [r4, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	71a3      	strb	r3, [r4, #6]
 800d87e:	3b09      	subs	r3, #9
 800d880:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800d882:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <prvHelpCommand+0xec>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	6856      	ldr	r6, [r2, #4]
 800d888:	601e      	str	r6, [r3, #0]
		counter++;
 800d88a:	4a10      	ldr	r2, [pc, #64]	; (800d8cc <prvHelpCommand+0xf0>)
 800d88c:	7813      	ldrb	r3, [r2, #0]
 800d88e:	3301      	adds	r3, #1
 800d890:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800d892:	1e73      	subs	r3, r6, #1
 800d894:	419e      	sbcs	r6, r3
}
 800d896:	0030      	movs	r0, r6
 800d898:	b003      	add	sp, #12
 800d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800d89c:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <prvHelpCommand+0xec>)
 800d89e:	4a0e      	ldr	r2, [pc, #56]	; (800d8d8 <prvHelpCommand+0xfc>)
 800d8a0:	601a      	str	r2, [r3, #0]
			counter = 1;
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <prvHelpCommand+0xf0>)
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e7d1      	b.n	800d84e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d8aa:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <prvHelpCommand+0xec>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6859      	ldr	r1, [r3, #4]
 800d8b2:	002a      	movs	r2, r5
 800d8b4:	0020      	movs	r0, r4
 800d8b6:	f005 fcf2 	bl	801329e <strncpy>
 800d8ba:	e7e2      	b.n	800d882 <prvHelpCommand+0xa6>
 800d8bc:	08017e58 	.word	0x08017e58
 800d8c0:	20001bec 	.word	0x20001bec
 800d8c4:	20000020 	.word	0x20000020
 800d8c8:	20001be8 	.word	0x20001be8
 800d8cc:	20001be0 	.word	0x20001be0
 800d8d0:	200067dc 	.word	0x200067dc
 800d8d4:	080182c2 	.word	0x080182c2
 800d8d8:	20000054 	.word	0x20000054

0800d8dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8dc:	0003      	movs	r3, r0
 800d8de:	3308      	adds	r3, #8
 800d8e0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	4252      	negs	r2, r2
 800d8e6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d8f0:	4770      	bx	lr

0800d8f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8f6:	4770      	bx	lr

0800d8f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d8f8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d8fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d8fc:	689a      	ldr	r2, [r3, #8]
 800d8fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d900:	689a      	ldr	r2, [r3, #8]
 800d902:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d904:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d906:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d908:	6803      	ldr	r3, [r0, #0]
 800d90a:	3301      	adds	r3, #1
 800d90c:	6003      	str	r3, [r0, #0]
}
 800d90e:	4770      	bx	lr

0800d910 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d910:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d912:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d914:	0002      	movs	r2, r0
 800d916:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d918:	1c63      	adds	r3, r4, #1
 800d91a:	d102      	bne.n	800d922 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800d91c:	6902      	ldr	r2, [r0, #16]
 800d91e:	e004      	b.n	800d92a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d920:	001a      	movs	r2, r3
 800d922:	6853      	ldr	r3, [r2, #4]
 800d924:	681d      	ldr	r5, [r3, #0]
 800d926:	42a5      	cmp	r5, r4
 800d928:	d9fa      	bls.n	800d920 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d92a:	6853      	ldr	r3, [r2, #4]
 800d92c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d92e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d930:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d932:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d934:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d936:	6803      	ldr	r3, [r0, #0]
 800d938:	3301      	adds	r3, #1
 800d93a:	6003      	str	r3, [r0, #0]
}
 800d93c:	bd30      	pop	{r4, r5, pc}

0800d93e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d93e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d940:	6842      	ldr	r2, [r0, #4]
 800d942:	6881      	ldr	r1, [r0, #8]
 800d944:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d946:	6882      	ldr	r2, [r0, #8]
 800d948:	6841      	ldr	r1, [r0, #4]
 800d94a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d94c:	685a      	ldr	r2, [r3, #4]
 800d94e:	4282      	cmp	r2, r0
 800d950:	d005      	beq.n	800d95e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d952:	2200      	movs	r2, #0
 800d954:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	1e50      	subs	r0, r2, #1
 800d95a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d95c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d95e:	6882      	ldr	r2, [r0, #8]
 800d960:	605a      	str	r2, [r3, #4]
 800d962:	e7f6      	b.n	800d952 <uxListRemove+0x14>

0800d964 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	0004      	movs	r4, r0
 800d968:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d96a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d96c:	2a00      	cmp	r2, #0
 800d96e:	d10d      	bne.n	800d98c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800d970:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d97a:	3301      	adds	r3, #1
 800d97c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d980:	6860      	ldr	r0, [r4, #4]
 800d982:	f001 f8ab 	bl	800eadc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d986:	2300      	movs	r3, #0
 800d988:	6063      	str	r3, [r4, #4]
 800d98a:	e7f5      	b.n	800d978 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800d98c:	2d00      	cmp	r5, #0
 800d98e:	d10e      	bne.n	800d9ae <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d990:	6880      	ldr	r0, [r0, #8]
 800d992:	f005 fa2c 	bl	8012dee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d996:	68a3      	ldr	r3, [r4, #8]
 800d998:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d99a:	4694      	mov	ip, r2
 800d99c:	4463      	add	r3, ip
 800d99e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800d9a0:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9a2:	6862      	ldr	r2, [r4, #4]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d3e7      	bcc.n	800d978 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	60a3      	str	r3, [r4, #8]
 800d9ac:	e7e4      	b.n	800d978 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ae:	68c0      	ldr	r0, [r0, #12]
 800d9b0:	f005 fa1d 	bl	8012dee <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d9b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9b6:	425a      	negs	r2, r3
 800d9b8:	68e3      	ldr	r3, [r4, #12]
 800d9ba:	189b      	adds	r3, r3, r2
 800d9bc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9be:	6821      	ldr	r1, [r4, #0]
 800d9c0:	428b      	cmp	r3, r1
 800d9c2:	d203      	bcs.n	800d9cc <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d9c4:	6863      	ldr	r3, [r4, #4]
 800d9c6:	469c      	mov	ip, r3
 800d9c8:	4462      	add	r2, ip
 800d9ca:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800d9cc:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800d9ce:	2d02      	cmp	r5, #2
 800d9d0:	d1d2      	bne.n	800d978 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0cf      	beq.n	800d978 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800d9d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800d9de:	e7cb      	b.n	800d978 <prvCopyDataToQueue+0x14>

0800d9e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d9e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d9e6:	2a00      	cmp	r2, #0
 800d9e8:	d00b      	beq.n	800da02 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d9ea:	68c3      	ldr	r3, [r0, #12]
 800d9ec:	189b      	adds	r3, r3, r2
 800d9ee:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d9f0:	6841      	ldr	r1, [r0, #4]
 800d9f2:	428b      	cmp	r3, r1
 800d9f4:	d301      	bcc.n	800d9fa <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d9f6:	6803      	ldr	r3, [r0, #0]
 800d9f8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d9fa:	68c1      	ldr	r1, [r0, #12]
 800d9fc:	0020      	movs	r0, r4
 800d9fe:	f005 f9f6 	bl	8012dee <memcpy>
	}
}
 800da02:	bd10      	pop	{r4, pc}

0800da04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da08:	f001 fc5a 	bl	800f2c0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da0e:	2b00      	cmp	r3, #0
 800da10:	dd04      	ble.n	800da1c <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da12:	0025      	movs	r5, r4
 800da14:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d11f      	bne.n	800da5c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800da1c:	2301      	movs	r3, #1
 800da1e:	425b      	negs	r3, r3
 800da20:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800da22:	f001 fc59 	bl	800f2d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da26:	f001 fc4b 	bl	800f2c0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800da2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd04      	ble.n	800da3a <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da30:	0025      	movs	r5, r4
 800da32:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d121      	bne.n	800da7e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800da3a:	2301      	movs	r3, #1
 800da3c:	425b      	negs	r3, r3
 800da3e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da40:	f001 fc4a 	bl	800f2d8 <vPortExitCritical>
}
 800da44:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800da46:	f000 fff5 	bl	800ea34 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800da4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da4c:	3b01      	subs	r3, #1
 800da4e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800da50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800da52:	2b00      	cmp	r3, #0
 800da54:	dde2      	ble.n	800da1c <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d0df      	beq.n	800da1c <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da5c:	0028      	movs	r0, r5
 800da5e:	f000 ff67 	bl	800e930 <xTaskRemoveFromEventList>
 800da62:	2800      	cmp	r0, #0
 800da64:	d0f1      	beq.n	800da4a <prvUnlockQueue+0x46>
 800da66:	e7ee      	b.n	800da46 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800da68:	f000 ffe4 	bl	800ea34 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800da6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da6e:	3b01      	subs	r3, #1
 800da70:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800da72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da74:	2b00      	cmp	r3, #0
 800da76:	dde0      	ble.n	800da3a <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0dd      	beq.n	800da3a <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da7e:	0028      	movs	r0, r5
 800da80:	f000 ff56 	bl	800e930 <xTaskRemoveFromEventList>
 800da84:	2800      	cmp	r0, #0
 800da86:	d0f1      	beq.n	800da6c <prvUnlockQueue+0x68>
 800da88:	e7ee      	b.n	800da68 <prvUnlockQueue+0x64>

0800da8a <xQueueGenericReset>:
{
 800da8a:	b570      	push	{r4, r5, r6, lr}
 800da8c:	0004      	movs	r4, r0
 800da8e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800da90:	2800      	cmp	r0, #0
 800da92:	d101      	bne.n	800da98 <xQueueGenericReset+0xe>
 800da94:	b672      	cpsid	i
 800da96:	e7fe      	b.n	800da96 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800da98:	f001 fc12 	bl	800f2c0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800da9c:	6822      	ldr	r2, [r4, #0]
 800da9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800daa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800daa2:	434b      	muls	r3, r1
 800daa4:	18d0      	adds	r0, r2, r3
 800daa6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800daa8:	2000      	movs	r0, #0
 800daaa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800daac:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800daae:	1a5b      	subs	r3, r3, r1
 800dab0:	18d3      	adds	r3, r2, r3
 800dab2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dab4:	2301      	movs	r3, #1
 800dab6:	425b      	negs	r3, r3
 800dab8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800daba:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	d10f      	bne.n	800dae0 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac0:	6923      	ldr	r3, [r4, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d103      	bne.n	800dace <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800dac6:	f001 fc07 	bl	800f2d8 <vPortExitCritical>
}
 800daca:	2001      	movs	r0, #1
 800dacc:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dace:	0020      	movs	r0, r4
 800dad0:	3010      	adds	r0, #16
 800dad2:	f000 ff2d 	bl	800e930 <xTaskRemoveFromEventList>
 800dad6:	2801      	cmp	r0, #1
 800dad8:	d1f5      	bne.n	800dac6 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800dada:	f001 fbe5 	bl	800f2a8 <vPortYield>
 800dade:	e7f2      	b.n	800dac6 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dae0:	0020      	movs	r0, r4
 800dae2:	3010      	adds	r0, #16
 800dae4:	f7ff fefa 	bl	800d8dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dae8:	0020      	movs	r0, r4
 800daea:	3024      	adds	r0, #36	; 0x24
 800daec:	f7ff fef6 	bl	800d8dc <vListInitialise>
 800daf0:	e7e9      	b.n	800dac6 <xQueueGenericReset+0x3c>

0800daf2 <xQueueGenericCreate>:
{
 800daf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf4:	0005      	movs	r5, r0
 800daf6:	000e      	movs	r6, r1
 800daf8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d101      	bne.n	800db02 <xQueueGenericCreate+0x10>
 800dafe:	b672      	cpsid	i
 800db00:	e7fe      	b.n	800db00 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800db02:	2900      	cmp	r1, #0
 800db04:	d00c      	beq.n	800db20 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db06:	0008      	movs	r0, r1
 800db08:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db0a:	3055      	adds	r0, #85	; 0x55
 800db0c:	f001 fc5a 	bl	800f3c4 <pvPortMalloc>
 800db10:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db12:	d101      	bne.n	800db18 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800db14:	b672      	cpsid	i
 800db16:	e7fe      	b.n	800db16 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800db18:	0003      	movs	r3, r0
 800db1a:	3354      	adds	r3, #84	; 0x54
 800db1c:	6003      	str	r3, [r0, #0]
 800db1e:	e005      	b.n	800db2c <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db20:	2054      	movs	r0, #84	; 0x54
 800db22:	f001 fc4f 	bl	800f3c4 <pvPortMalloc>
 800db26:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800db28:	d0f4      	beq.n	800db14 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db2a:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800db2c:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800db2e:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db30:	2101      	movs	r1, #1
 800db32:	0020      	movs	r0, r4
 800db34:	f7ff ffa9 	bl	800da8a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800db38:	2350      	movs	r3, #80	; 0x50
 800db3a:	54e7      	strb	r7, [r4, r3]
}
 800db3c:	0020      	movs	r0, r4
 800db3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db40 <xQueueCreateCountingSemaphore>:
	{
 800db40:	b510      	push	{r4, lr}
 800db42:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800db44:	2800      	cmp	r0, #0
 800db46:	d101      	bne.n	800db4c <xQueueCreateCountingSemaphore+0xc>
 800db48:	b672      	cpsid	i
 800db4a:	e7fe      	b.n	800db4a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db4c:	4288      	cmp	r0, r1
 800db4e:	d201      	bcs.n	800db54 <xQueueCreateCountingSemaphore+0x14>
 800db50:	b672      	cpsid	i
 800db52:	e7fe      	b.n	800db52 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db54:	2202      	movs	r2, #2
 800db56:	2100      	movs	r1, #0
 800db58:	f7ff ffcb 	bl	800daf2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d001      	beq.n	800db64 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800db60:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800db62:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800db64:	b672      	cpsid	i
 800db66:	e7fe      	b.n	800db66 <xQueueCreateCountingSemaphore+0x26>

0800db68 <xQueueGenericSend>:
{
 800db68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6a:	46ce      	mov	lr, r9
 800db6c:	b500      	push	{lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	0004      	movs	r4, r0
 800db72:	9100      	str	r1, [sp, #0]
 800db74:	9201      	str	r2, [sp, #4]
 800db76:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800db78:	2800      	cmp	r0, #0
 800db7a:	d007      	beq.n	800db8c <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db7c:	9b00      	ldr	r3, [sp, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d106      	bne.n	800db90 <xQueueGenericSend+0x28>
 800db82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <xQueueGenericSend+0x28>
 800db88:	b672      	cpsid	i
 800db8a:	e7fe      	b.n	800db8a <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800db8c:	b672      	cpsid	i
 800db8e:	e7fe      	b.n	800db8e <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db90:	2d02      	cmp	r5, #2
 800db92:	d104      	bne.n	800db9e <xQueueGenericSend+0x36>
 800db94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db96:	2b01      	cmp	r3, #1
 800db98:	d001      	beq.n	800db9e <xQueueGenericSend+0x36>
 800db9a:	b672      	cpsid	i
 800db9c:	e7fe      	b.n	800db9c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db9e:	f000 ff4f 	bl	800ea40 <xTaskGetSchedulerState>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d104      	bne.n	800dbb0 <xQueueGenericSend+0x48>
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <xQueueGenericSend+0x4e>
 800dbac:	b672      	cpsid	i
 800dbae:	e7fe      	b.n	800dbae <xQueueGenericSend+0x46>
 800dbb0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dbb2:	2700      	movs	r7, #0
 800dbb4:	e02f      	b.n	800dc16 <xQueueGenericSend+0xae>
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	e7fb      	b.n	800dbb2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbba:	002a      	movs	r2, r5
 800dbbc:	9900      	ldr	r1, [sp, #0]
 800dbbe:	0020      	movs	r0, r4
 800dbc0:	f7ff fed0 	bl	800d964 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d104      	bne.n	800dbd4 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d00a      	beq.n	800dbe4 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800dbce:	f001 fb6b 	bl	800f2a8 <vPortYield>
 800dbd2:	e007      	b.n	800dbe4 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dbd4:	0020      	movs	r0, r4
 800dbd6:	3024      	adds	r0, #36	; 0x24
 800dbd8:	f000 feaa 	bl	800e930 <xTaskRemoveFromEventList>
 800dbdc:	2801      	cmp	r0, #1
 800dbde:	d101      	bne.n	800dbe4 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800dbe0:	f001 fb62 	bl	800f2a8 <vPortYield>
				taskEXIT_CRITICAL();
 800dbe4:	f001 fb78 	bl	800f2d8 <vPortExitCritical>
				return pdPASS;
 800dbe8:	2001      	movs	r0, #1
}
 800dbea:	b004      	add	sp, #16
 800dbec:	bc04      	pop	{r2}
 800dbee:	4691      	mov	r9, r2
 800dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800dbf2:	f001 fb71 	bl	800f2d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	e7f7      	b.n	800dbea <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800dbfa:	a802      	add	r0, sp, #8
 800dbfc:	f000 fed8 	bl	800e9b0 <vTaskSetTimeOutState>
 800dc00:	e016      	b.n	800dc30 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800dc02:	6467      	str	r7, [r4, #68]	; 0x44
 800dc04:	e01d      	b.n	800dc42 <xQueueGenericSend+0xda>
 800dc06:	64a7      	str	r7, [r4, #72]	; 0x48
 800dc08:	e01e      	b.n	800dc48 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800dc0a:	0020      	movs	r0, r4
 800dc0c:	f7ff fefa 	bl	800da04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc10:	f000 fcb0 	bl	800e574 <xTaskResumeAll>
 800dc14:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dc16:	f001 fb53 	bl	800f2c0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d3cb      	bcc.n	800dbba <xQueueGenericSend+0x52>
 800dc22:	2d02      	cmp	r5, #2
 800dc24:	d0c9      	beq.n	800dbba <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc26:	9b01      	ldr	r3, [sp, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d0e2      	beq.n	800dbf2 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dc2c:	2e00      	cmp	r6, #0
 800dc2e:	d0e4      	beq.n	800dbfa <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800dc30:	f001 fb52 	bl	800f2d8 <vPortExitCritical>
		vTaskSuspendAll();
 800dc34:	f000 fbfe 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc38:	f001 fb42 	bl	800f2c0 <vPortEnterCritical>
 800dc3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc3e:	3301      	adds	r3, #1
 800dc40:	d0df      	beq.n	800dc02 <xQueueGenericSend+0x9a>
 800dc42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc44:	3301      	adds	r3, #1
 800dc46:	d0de      	beq.n	800dc06 <xQueueGenericSend+0x9e>
 800dc48:	f001 fb46 	bl	800f2d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc4c:	a901      	add	r1, sp, #4
 800dc4e:	a802      	add	r0, sp, #8
 800dc50:	f000 febe 	bl	800e9d0 <xTaskCheckForTimeOut>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d117      	bne.n	800dc88 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc58:	f001 fb32 	bl	800f2c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc5e:	4699      	mov	r9, r3
 800dc60:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dc62:	f001 fb39 	bl	800f2d8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc66:	45b1      	cmp	r9, r6
 800dc68:	d1cf      	bne.n	800dc0a <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc6a:	0020      	movs	r0, r4
 800dc6c:	3010      	adds	r0, #16
 800dc6e:	9901      	ldr	r1, [sp, #4]
 800dc70:	f000 fe20 	bl	800e8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc74:	0020      	movs	r0, r4
 800dc76:	f7ff fec5 	bl	800da04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc7a:	f000 fc7b 	bl	800e574 <xTaskResumeAll>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d1c8      	bne.n	800dc14 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dc82:	f001 fb11 	bl	800f2a8 <vPortYield>
 800dc86:	e7c5      	b.n	800dc14 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800dc88:	0020      	movs	r0, r4
 800dc8a:	f7ff febb 	bl	800da04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc8e:	f000 fc71 	bl	800e574 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dc92:	2000      	movs	r0, #0
 800dc94:	e7a9      	b.n	800dbea <xQueueGenericSend+0x82>

0800dc96 <xQueueGenericSendFromISR>:
{
 800dc96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	0004      	movs	r4, r0
 800dc9c:	000d      	movs	r5, r1
 800dc9e:	0016      	movs	r6, r2
 800dca0:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d006      	beq.n	800dcb4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dca6:	2900      	cmp	r1, #0
 800dca8:	d106      	bne.n	800dcb8 <xQueueGenericSendFromISR+0x22>
 800dcaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <xQueueGenericSendFromISR+0x22>
 800dcb0:	b672      	cpsid	i
 800dcb2:	e7fe      	b.n	800dcb2 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800dcb4:	b672      	cpsid	i
 800dcb6:	e7fe      	b.n	800dcb6 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcb8:	2f02      	cmp	r7, #2
 800dcba:	d12a      	bne.n	800dd12 <xQueueGenericSendFromISR+0x7c>
 800dcbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d011      	beq.n	800dce6 <xQueueGenericSendFromISR+0x50>
 800dcc2:	b672      	cpsid	i
 800dcc4:	e7fe      	b.n	800dcc4 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800dcc6:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d01b      	beq.n	800dd06 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcce:	0020      	movs	r0, r4
 800dcd0:	3024      	adds	r0, #36	; 0x24
 800dcd2:	f000 fe2d 	bl	800e930 <xTaskRemoveFromEventList>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d015      	beq.n	800dd06 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	d001      	beq.n	800dce2 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcde:	6035      	str	r5, [r6, #0]
 800dce0:	e011      	b.n	800dd06 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800dce2:	2501      	movs	r5, #1
 800dce4:	e00f      	b.n	800dd06 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce6:	f001 fb07 	bl	800f2f8 <ulSetInterruptMaskFromISR>
 800dcea:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcee:	003a      	movs	r2, r7
 800dcf0:	0029      	movs	r1, r5
 800dcf2:	0020      	movs	r0, r4
 800dcf4:	f7ff fe36 	bl	800d964 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dcf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	d0e3      	beq.n	800dcc6 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800dcfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd00:	3301      	adds	r3, #1
 800dd02:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dd04:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dd06:	9801      	ldr	r0, [sp, #4]
 800dd08:	f001 fafb 	bl	800f302 <vClearInterruptMaskFromISR>
}
 800dd0c:	0028      	movs	r0, r5
 800dd0e:	b003      	add	sp, #12
 800dd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd12:	f001 faf1 	bl	800f2f8 <ulSetInterruptMaskFromISR>
 800dd16:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d3e6      	bcc.n	800dcee <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800dd20:	2500      	movs	r5, #0
 800dd22:	e7f0      	b.n	800dd06 <xQueueGenericSendFromISR+0x70>

0800dd24 <xQueueGiveFromISR>:
{
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	0004      	movs	r4, r0
 800dd28:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d004      	beq.n	800dd38 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d003      	beq.n	800dd3c <xQueueGiveFromISR+0x18>
 800dd34:	b672      	cpsid	i
 800dd36:	e7fe      	b.n	800dd36 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800dd38:	b672      	cpsid	i
 800dd3a:	e7fe      	b.n	800dd3a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dd3c:	6803      	ldr	r3, [r0, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01f      	beq.n	800dd82 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd42:	f001 fad9 	bl	800f2f8 <ulSetInterruptMaskFromISR>
 800dd46:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800dd4a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800dd4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d212      	bcs.n	800dd78 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800dd52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd54:	3301      	adds	r3, #1
 800dd56:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800dd58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	d116      	bne.n	800dd8c <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800dd5e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d008      	beq.n	800dd78 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd66:	0020      	movs	r0, r4
 800dd68:	3024      	adds	r0, #36	; 0x24
 800dd6a:	f000 fde1 	bl	800e930 <xTaskRemoveFromEventList>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d002      	beq.n	800dd78 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800dd72:	2f00      	cmp	r7, #0
 800dd74:	d00f      	beq.n	800dd96 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd76:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dd78:	0030      	movs	r0, r6
 800dd7a:	f001 fac2 	bl	800f302 <vClearInterruptMaskFromISR>
}
 800dd7e:	0028      	movs	r0, r5
 800dd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800dd82:	6843      	ldr	r3, [r0, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d0dc      	beq.n	800dd42 <xQueueGiveFromISR+0x1e>
 800dd88:	b672      	cpsid	i
 800dd8a:	e7fe      	b.n	800dd8a <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800dd8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd8e:	3301      	adds	r3, #1
 800dd90:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800dd92:	2501      	movs	r5, #1
 800dd94:	e7f0      	b.n	800dd78 <xQueueGiveFromISR+0x54>
 800dd96:	2501      	movs	r5, #1
 800dd98:	e7ee      	b.n	800dd78 <xQueueGiveFromISR+0x54>

0800dd9a <xQueueGenericReceive>:
{
 800dd9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd9c:	46c6      	mov	lr, r8
 800dd9e:	b500      	push	{lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	0004      	movs	r4, r0
 800dda4:	000e      	movs	r6, r1
 800dda6:	9201      	str	r2, [sp, #4]
 800dda8:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d006      	beq.n	800ddbc <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	d106      	bne.n	800ddc0 <xQueueGenericReceive+0x26>
 800ddb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d003      	beq.n	800ddc0 <xQueueGenericReceive+0x26>
 800ddb8:	b672      	cpsid	i
 800ddba:	e7fe      	b.n	800ddba <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800ddbc:	b672      	cpsid	i
 800ddbe:	e7fe      	b.n	800ddbe <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddc0:	f000 fe3e 	bl	800ea40 <xTaskGetSchedulerState>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d104      	bne.n	800ddd2 <xQueueGenericReceive+0x38>
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d004      	beq.n	800ddd8 <xQueueGenericReceive+0x3e>
 800ddce:	b672      	cpsid	i
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueGenericReceive+0x36>
 800ddd2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ddd4:	2700      	movs	r7, #0
 800ddd6:	e04b      	b.n	800de70 <xQueueGenericReceive+0xd6>
 800ddd8:	2500      	movs	r5, #0
 800ddda:	e7fb      	b.n	800ddd4 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800dddc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ddde:	0031      	movs	r1, r6
 800dde0:	0020      	movs	r0, r4
 800dde2:	f7ff fdfd 	bl	800d9e0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800dde6:	4643      	mov	r3, r8
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11a      	bne.n	800de22 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800ddec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ddf8:	f000 ff62 	bl	800ecc0 <pvTaskIncrementMutexHeldCount>
 800ddfc:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddfe:	6923      	ldr	r3, [r4, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d007      	beq.n	800de14 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800de04:	0020      	movs	r0, r4
 800de06:	3010      	adds	r0, #16
 800de08:	f000 fd92 	bl	800e930 <xTaskRemoveFromEventList>
 800de0c:	2801      	cmp	r0, #1
 800de0e:	d101      	bne.n	800de14 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800de10:	f001 fa4a 	bl	800f2a8 <vPortYield>
				taskEXIT_CRITICAL();
 800de14:	f001 fa60 	bl	800f2d8 <vPortExitCritical>
				return pdPASS;
 800de18:	2001      	movs	r0, #1
}
 800de1a:	b004      	add	sp, #16
 800de1c:	bc04      	pop	{r2}
 800de1e:	4690      	mov	r8, r2
 800de20:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800de22:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0f4      	beq.n	800de14 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de2a:	0020      	movs	r0, r4
 800de2c:	3024      	adds	r0, #36	; 0x24
 800de2e:	f000 fd7f 	bl	800e930 <xTaskRemoveFromEventList>
 800de32:	2800      	cmp	r0, #0
 800de34:	d0ee      	beq.n	800de14 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800de36:	f001 fa37 	bl	800f2a8 <vPortYield>
 800de3a:	e7eb      	b.n	800de14 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800de3c:	f001 fa4c 	bl	800f2d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800de40:	2000      	movs	r0, #0
 800de42:	e7ea      	b.n	800de1a <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800de44:	a802      	add	r0, sp, #8
 800de46:	f000 fdb3 	bl	800e9b0 <vTaskSetTimeOutState>
 800de4a:	e01b      	b.n	800de84 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800de4c:	6467      	str	r7, [r4, #68]	; 0x44
 800de4e:	e022      	b.n	800de96 <xQueueGenericReceive+0xfc>
 800de50:	64a7      	str	r7, [r4, #72]	; 0x48
 800de52:	e023      	b.n	800de9c <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800de54:	f001 fa34 	bl	800f2c0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800de58:	6860      	ldr	r0, [r4, #4]
 800de5a:	f000 fe01 	bl	800ea60 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800de5e:	f001 fa3b 	bl	800f2d8 <vPortExitCritical>
 800de62:	e02d      	b.n	800dec0 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800de64:	0020      	movs	r0, r4
 800de66:	f7ff fdcd 	bl	800da04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de6a:	f000 fb83 	bl	800e574 <xTaskResumeAll>
 800de6e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800de70:	f001 fa26 	bl	800f2c0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1b0      	bne.n	800dddc <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de7a:	9b01      	ldr	r3, [sp, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d0dd      	beq.n	800de3c <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800de80:	2d00      	cmp	r5, #0
 800de82:	d0df      	beq.n	800de44 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800de84:	f001 fa28 	bl	800f2d8 <vPortExitCritical>
		vTaskSuspendAll();
 800de88:	f000 fad4 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de8c:	f001 fa18 	bl	800f2c0 <vPortEnterCritical>
 800de90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800de92:	3301      	adds	r3, #1
 800de94:	d0da      	beq.n	800de4c <xQueueGenericReceive+0xb2>
 800de96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de98:	3301      	adds	r3, #1
 800de9a:	d0d9      	beq.n	800de50 <xQueueGenericReceive+0xb6>
 800de9c:	f001 fa1c 	bl	800f2d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dea0:	a901      	add	r1, sp, #4
 800dea2:	a802      	add	r0, sp, #8
 800dea4:	f000 fd94 	bl	800e9d0 <xTaskCheckForTimeOut>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d118      	bne.n	800dede <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800deac:	f001 fa08 	bl	800f2c0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800deb0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800deb2:	f001 fa11 	bl	800f2d8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deb6:	2d00      	cmp	r5, #0
 800deb8:	d1d4      	bne.n	800de64 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0c9      	beq.n	800de54 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dec0:	0020      	movs	r0, r4
 800dec2:	3024      	adds	r0, #36	; 0x24
 800dec4:	9901      	ldr	r1, [sp, #4]
 800dec6:	f000 fcf5 	bl	800e8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800deca:	0020      	movs	r0, r4
 800decc:	f7ff fd9a 	bl	800da04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ded0:	f000 fb50 	bl	800e574 <xTaskResumeAll>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d1ca      	bne.n	800de6e <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800ded8:	f001 f9e6 	bl	800f2a8 <vPortYield>
 800dedc:	e7c7      	b.n	800de6e <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800dede:	0020      	movs	r0, r4
 800dee0:	f7ff fd90 	bl	800da04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dee4:	f000 fb46 	bl	800e574 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800dee8:	2000      	movs	r0, #0
 800deea:	e796      	b.n	800de1a <xQueueGenericReceive+0x80>

0800deec <xQueueReceiveFromISR>:
{
 800deec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deee:	b083      	sub	sp, #12
 800def0:	0004      	movs	r4, r0
 800def2:	000f      	movs	r7, r1
 800def4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800def6:	2800      	cmp	r0, #0
 800def8:	d006      	beq.n	800df08 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800defa:	2900      	cmp	r1, #0
 800defc:	d106      	bne.n	800df0c <xQueueReceiveFromISR+0x20>
 800defe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <xQueueReceiveFromISR+0x20>
 800df04:	b672      	cpsid	i
 800df06:	e7fe      	b.n	800df06 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800df08:	b672      	cpsid	i
 800df0a:	e7fe      	b.n	800df0a <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df0c:	f001 f9f4 	bl	800f2f8 <ulSetInterruptMaskFromISR>
 800df10:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800df14:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01b      	beq.n	800df52 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df1a:	0039      	movs	r1, r7
 800df1c:	0020      	movs	r0, r4
 800df1e:	f7ff fd5f 	bl	800d9e0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800df22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df24:	3b01      	subs	r3, #1
 800df26:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800df28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df2a:	3301      	adds	r3, #1
 800df2c:	d004      	beq.n	800df38 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800df2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df30:	3301      	adds	r3, #1
 800df32:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800df34:	2501      	movs	r5, #1
 800df36:	e00c      	b.n	800df52 <xQueueReceiveFromISR+0x66>
 800df38:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d008      	beq.n	800df52 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df40:	0020      	movs	r0, r4
 800df42:	3010      	adds	r0, #16
 800df44:	f000 fcf4 	bl	800e930 <xTaskRemoveFromEventList>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d002      	beq.n	800df52 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800df4c:	2e00      	cmp	r6, #0
 800df4e:	d006      	beq.n	800df5e <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df50:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800df52:	9801      	ldr	r0, [sp, #4]
 800df54:	f001 f9d5 	bl	800f302 <vClearInterruptMaskFromISR>
}
 800df58:	0028      	movs	r0, r5
 800df5a:	b003      	add	sp, #12
 800df5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800df5e:	2501      	movs	r5, #1
 800df60:	e7f7      	b.n	800df52 <xQueueReceiveFromISR+0x66>
	...

0800df64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df64:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df66:	4b0a      	ldr	r3, [pc, #40]	; (800df90 <vQueueAddToRegistry+0x2c>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d009      	beq.n	800df82 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df6e:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df70:	4c07      	ldr	r4, [pc, #28]	; (800df90 <vQueueAddToRegistry+0x2c>)
 800df72:	00da      	lsls	r2, r3, #3
 800df74:	58a2      	ldr	r2, [r4, r2]
 800df76:	2a00      	cmp	r2, #0
 800df78:	d004      	beq.n	800df84 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df7a:	3301      	adds	r3, #1
 800df7c:	2b08      	cmp	r3, #8
 800df7e:	d1f8      	bne.n	800df72 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df80:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df82:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df84:	4a02      	ldr	r2, [pc, #8]	; (800df90 <vQueueAddToRegistry+0x2c>)
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df8a:	18d3      	adds	r3, r2, r3
 800df8c:	6058      	str	r0, [r3, #4]
				break;
 800df8e:	e7f7      	b.n	800df80 <vQueueAddToRegistry+0x1c>
 800df90:	20006c48 	.word	0x20006c48

0800df94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	0004      	movs	r4, r0
 800df98:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df9a:	f001 f991 	bl	800f2c0 <vPortEnterCritical>
 800df9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	d00b      	beq.n	800dfbc <vQueueWaitForMessageRestricted+0x28>
 800dfa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	d00b      	beq.n	800dfc2 <vQueueWaitForMessageRestricted+0x2e>
 800dfaa:	f001 f995 	bl	800f2d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dfae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d009      	beq.n	800dfc8 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dfb4:	0020      	movs	r0, r4
 800dfb6:	f7ff fd25 	bl	800da04 <prvUnlockQueue>
	}
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	6463      	str	r3, [r4, #68]	; 0x44
 800dfc0:	e7f0      	b.n	800dfa4 <vQueueWaitForMessageRestricted+0x10>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	64a3      	str	r3, [r4, #72]	; 0x48
 800dfc6:	e7f0      	b.n	800dfaa <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfc8:	0020      	movs	r0, r4
 800dfca:	3024      	adds	r0, #36	; 0x24
 800dfcc:	0029      	movs	r1, r5
 800dfce:	f000 fc95 	bl	800e8fc <vTaskPlaceOnEventListRestricted>
 800dfd2:	e7ef      	b.n	800dfb4 <vQueueWaitForMessageRestricted+0x20>

0800dfd4 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800dfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd6:	46d6      	mov	lr, sl
 800dfd8:	464f      	mov	r7, r9
 800dfda:	4646      	mov	r6, r8
 800dfdc:	b5c0      	push	{r6, r7, lr}
 800dfde:	0006      	movs	r6, r0
 800dfe0:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800dfe2:	6808      	ldr	r0, [r1, #0]
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d044      	beq.n	800e072 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800dfe8:	684b      	ldr	r3, [r1, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	604b      	str	r3, [r1, #4]
 800dfee:	2208      	movs	r2, #8
 800dff0:	4690      	mov	r8, r2
 800dff2:	4488      	add	r8, r1
 800dff4:	4543      	cmp	r3, r8
 800dff6:	d006      	beq.n	800e006 <prvListTaskWithinSingleList+0x32>
 800dff8:	684b      	ldr	r3, [r1, #4]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800dffe:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e000:	2302      	movs	r3, #2
 800e002:	469a      	mov	sl, r3
 800e004:	e018      	b.n	800e038 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e006:	68cb      	ldr	r3, [r1, #12]
 800e008:	604b      	str	r3, [r1, #4]
 800e00a:	e7f5      	b.n	800dff8 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e00c:	68cb      	ldr	r3, [r1, #12]
 800e00e:	604b      	str	r3, [r1, #4]
 800e010:	e017      	b.n	800e042 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e012:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e014:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e016:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e018:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e01a:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e01c:	783b      	ldrb	r3, [r7, #0]
 800e01e:	2ba5      	cmp	r3, #165	; 0xa5
 800e020:	d125      	bne.n	800e06e <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e022:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e024:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e026:	5cfc      	ldrb	r4, [r7, r3]
 800e028:	2ca5      	cmp	r4, #165	; 0xa5
 800e02a:	d0fb      	beq.n	800e024 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e02c:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e02e:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e030:	3001      	adds	r0, #1
 800e032:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e034:	45a9      	cmp	r9, r5
 800e036:	d01c      	beq.n	800e072 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e038:	684b      	ldr	r3, [r1, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	604b      	str	r3, [r1, #4]
 800e03e:	4598      	cmp	r8, r3
 800e040:	d0e4      	beq.n	800e00c <prvListTaskWithinSingleList+0x38>
 800e042:	684b      	ldr	r3, [r1, #4]
 800e044:	68dd      	ldr	r5, [r3, #12]
 800e046:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e048:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e04a:	002b      	movs	r3, r5
 800e04c:	3334      	adds	r3, #52	; 0x34
 800e04e:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e050:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e052:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e054:	4663      	mov	r3, ip
 800e056:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e058:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e05a:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e05c:	4663      	mov	r3, ip
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d1d7      	bne.n	800e012 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e062:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e064:	2b00      	cmp	r3, #0
 800e066:	d0d4      	beq.n	800e012 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e068:	4653      	mov	r3, sl
 800e06a:	7333      	strb	r3, [r6, #12]
 800e06c:	e7d1      	b.n	800e012 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e06e:	2300      	movs	r3, #0
 800e070:	e7dc      	b.n	800e02c <prvListTaskWithinSingleList+0x58>
	}
 800e072:	bc1c      	pop	{r2, r3, r4}
 800e074:	4690      	mov	r8, r2
 800e076:	4699      	mov	r9, r3
 800e078:	46a2      	mov	sl, r4
 800e07a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e07c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e07c:	4b08      	ldr	r3, [pc, #32]	; (800e0a0 <prvResetNextTaskUnblockTime+0x24>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d007      	beq.n	800e096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e086:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <prvResetNextTaskUnblockTime+0x24>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	4b04      	ldr	r3, [pc, #16]	; (800e0a4 <prvResetNextTaskUnblockTime+0x28>)
 800e092:	601a      	str	r2, [r3, #0]
	}
}
 800e094:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e096:	4b03      	ldr	r3, [pc, #12]	; (800e0a4 <prvResetNextTaskUnblockTime+0x28>)
 800e098:	2201      	movs	r2, #1
 800e09a:	4252      	negs	r2, r2
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	e7f9      	b.n	800e094 <prvResetNextTaskUnblockTime+0x18>
 800e0a0:	20001bf4 	.word	0x20001bf4
 800e0a4:	2000005c 	.word	0x2000005c

0800e0a8 <prvAddCurrentTaskToDelayedList>:
{
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e0ac:	4b0e      	ldr	r3, [pc, #56]	; (800e0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e0b2:	4b0e      	ldr	r3, [pc, #56]	; (800e0ec <prvAddCurrentTaskToDelayedList+0x44>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4283      	cmp	r3, r0
 800e0b8:	d80d      	bhi.n	800e0d6 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <prvAddCurrentTaskToDelayedList+0x48>)
 800e0bc:	6818      	ldr	r0, [r3, #0]
 800e0be:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e0c0:	6819      	ldr	r1, [r3, #0]
 800e0c2:	3104      	adds	r1, #4
 800e0c4:	f7ff fc24 	bl	800d910 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	d909      	bls.n	800e0e4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e0d0:	4b08      	ldr	r3, [pc, #32]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e0d2:	601c      	str	r4, [r3, #0]
}
 800e0d4:	e006      	b.n	800e0e4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e0d6:	4b08      	ldr	r3, [pc, #32]	; (800e0f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	4b03      	ldr	r3, [pc, #12]	; (800e0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e0dc:	6819      	ldr	r1, [r3, #0]
 800e0de:	3104      	adds	r1, #4
 800e0e0:	f7ff fc16 	bl	800d910 <vListInsert>
}
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	20001bf0 	.word	0x20001bf0
 800e0ec:	20001d10 	.word	0x20001d10
 800e0f0:	20001bf4 	.word	0x20001bf4
 800e0f4:	2000005c 	.word	0x2000005c
 800e0f8:	20001bf8 	.word	0x20001bf8

0800e0fc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e100:	f005 f8b4 	bl	801326c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e104:	0020      	movs	r0, r4
 800e106:	f7f2 f807 	bl	8000118 <strlen>
 800e10a:	0003      	movs	r3, r0
 800e10c:	280b      	cmp	r0, #11
 800e10e:	dc08      	bgt.n	800e122 <prvWriteNameToBuffer+0x26>
 800e110:	1820      	adds	r0, r4, r0
 800e112:	0022      	movs	r2, r4
 800e114:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e116:	2320      	movs	r3, #32
 800e118:	7003      	strb	r3, [r0, #0]
 800e11a:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e11c:	4290      	cmp	r0, r2
 800e11e:	d1fb      	bne.n	800e118 <prvWriteNameToBuffer+0x1c>
 800e120:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e122:	18e0      	adds	r0, r4, r3
 800e124:	2300      	movs	r3, #0
 800e126:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e128:	bd10      	pop	{r4, pc}
	...

0800e12c <xTaskGenericCreate>:
{
 800e12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e12e:	46d6      	mov	lr, sl
 800e130:	4647      	mov	r7, r8
 800e132:	b580      	push	{r7, lr}
 800e134:	b085      	sub	sp, #20
 800e136:	9002      	str	r0, [sp, #8]
 800e138:	000d      	movs	r5, r1
 800e13a:	0016      	movs	r6, r2
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e140:	2800      	cmp	r0, #0
 800e142:	d101      	bne.n	800e148 <xTaskGenericCreate+0x1c>
 800e144:	b672      	cpsid	i
 800e146:	e7fe      	b.n	800e146 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e148:	2f06      	cmp	r7, #6
 800e14a:	d901      	bls.n	800e150 <xTaskGenericCreate+0x24>
 800e14c:	b672      	cpsid	i
 800e14e:	e7fe      	b.n	800e14e <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <xTaskGenericCreate+0x38>
 800e156:	0090      	lsls	r0, r2, #2
 800e158:	f001 f934 	bl	800f3c4 <pvPortMalloc>
 800e15c:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e15e:	2800      	cmp	r0, #0
 800e160:	d100      	bne.n	800e164 <xTaskGenericCreate+0x38>
 800e162:	e0b7      	b.n	800e2d4 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e164:	2060      	movs	r0, #96	; 0x60
 800e166:	f001 f92d 	bl	800f3c4 <pvPortMalloc>
 800e16a:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e16c:	d100      	bne.n	800e170 <xTaskGenericCreate+0x44>
 800e16e:	e08b      	b.n	800e288 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e172:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e174:	00b2      	lsls	r2, r6, #2
 800e176:	21a5      	movs	r1, #165	; 0xa5
 800e178:	0018      	movs	r0, r3
 800e17a:	f004 fe41 	bl	8012e00 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e17e:	4b57      	ldr	r3, [pc, #348]	; (800e2dc <xTaskGenericCreate+0x1b0>)
 800e180:	18f3      	adds	r3, r6, r3
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e186:	4694      	mov	ip, r2
 800e188:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e18a:	2207      	movs	r2, #7
 800e18c:	4393      	bics	r3, r2
 800e18e:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e190:	782a      	ldrb	r2, [r5, #0]
 800e192:	2334      	movs	r3, #52	; 0x34
 800e194:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e196:	782b      	ldrb	r3, [r5, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d000      	beq.n	800e19e <xTaskGenericCreate+0x72>
 800e19c:	e07e      	b.n	800e29c <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e19e:	2500      	movs	r5, #0
 800e1a0:	2340      	movs	r3, #64	; 0x40
 800e1a2:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e1a4:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e1a6:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e1a8:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e1aa:	1d23      	adds	r3, r4, #4
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f7ff fb9f 	bl	800d8f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e1b4:	0020      	movs	r0, r4
 800e1b6:	3018      	adds	r0, #24
 800e1b8:	f7ff fb9b 	bl	800d8f2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e1bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1be:	2307      	movs	r3, #7
 800e1c0:	1bdb      	subs	r3, r3, r7
 800e1c2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e1c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e1c6:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e1c8:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e1ca:	235c      	movs	r3, #92	; 0x5c
 800e1cc:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1ce:	9a03      	ldr	r2, [sp, #12]
 800e1d0:	9902      	ldr	r1, [sp, #8]
 800e1d2:	4650      	mov	r0, sl
 800e1d4:	f001 f82c 	bl	800f230 <pxPortInitialiseStack>
 800e1d8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1dc:	42ab      	cmp	r3, r5
 800e1de:	d000      	beq.n	800e1e2 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1e0:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e1e2:	f001 f86d 	bl	800f2c0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e1e6:	4a3e      	ldr	r2, [pc, #248]	; (800e2e0 <xTaskGenericCreate+0x1b4>)
 800e1e8:	6813      	ldr	r3, [r2, #0]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e1ee:	4b3d      	ldr	r3, [pc, #244]	; (800e2e4 <xTaskGenericCreate+0x1b8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d162      	bne.n	800e2bc <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e1f6:	4b3b      	ldr	r3, [pc, #236]	; (800e2e4 <xTaskGenericCreate+0x1b8>)
 800e1f8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1fa:	6813      	ldr	r3, [r2, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d120      	bne.n	800e242 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e200:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e202:	3313      	adds	r3, #19
 800e204:	4698      	mov	r8, r3
 800e206:	4e38      	ldr	r6, [pc, #224]	; (800e2e8 <xTaskGenericCreate+0x1bc>)
 800e208:	4640      	mov	r0, r8
 800e20a:	4368      	muls	r0, r5
 800e20c:	1980      	adds	r0, r0, r6
 800e20e:	f7ff fb65 	bl	800d8dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e212:	3501      	adds	r5, #1
 800e214:	2d07      	cmp	r5, #7
 800e216:	d1f7      	bne.n	800e208 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e218:	4e34      	ldr	r6, [pc, #208]	; (800e2ec <xTaskGenericCreate+0x1c0>)
 800e21a:	0030      	movs	r0, r6
 800e21c:	f7ff fb5e 	bl	800d8dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e220:	4d33      	ldr	r5, [pc, #204]	; (800e2f0 <xTaskGenericCreate+0x1c4>)
 800e222:	0028      	movs	r0, r5
 800e224:	f7ff fb5a 	bl	800d8dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e228:	4832      	ldr	r0, [pc, #200]	; (800e2f4 <xTaskGenericCreate+0x1c8>)
 800e22a:	f7ff fb57 	bl	800d8dc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e22e:	4832      	ldr	r0, [pc, #200]	; (800e2f8 <xTaskGenericCreate+0x1cc>)
 800e230:	f7ff fb54 	bl	800d8dc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e234:	4831      	ldr	r0, [pc, #196]	; (800e2fc <xTaskGenericCreate+0x1d0>)
 800e236:	f7ff fb51 	bl	800d8dc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e23a:	4b31      	ldr	r3, [pc, #196]	; (800e300 <xTaskGenericCreate+0x1d4>)
 800e23c:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e23e:	4b31      	ldr	r3, [pc, #196]	; (800e304 <xTaskGenericCreate+0x1d8>)
 800e240:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e242:	4a31      	ldr	r2, [pc, #196]	; (800e308 <xTaskGenericCreate+0x1dc>)
 800e244:	6813      	ldr	r3, [r2, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e24a:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e24c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e24e:	4a2f      	ldr	r2, [pc, #188]	; (800e30c <xTaskGenericCreate+0x1e0>)
 800e250:	6812      	ldr	r2, [r2, #0]
 800e252:	4293      	cmp	r3, r2
 800e254:	d901      	bls.n	800e25a <xTaskGenericCreate+0x12e>
 800e256:	4a2d      	ldr	r2, [pc, #180]	; (800e30c <xTaskGenericCreate+0x1e0>)
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	2014      	movs	r0, #20
 800e25c:	4358      	muls	r0, r3
 800e25e:	4b22      	ldr	r3, [pc, #136]	; (800e2e8 <xTaskGenericCreate+0x1bc>)
 800e260:	18c0      	adds	r0, r0, r3
 800e262:	9901      	ldr	r1, [sp, #4]
 800e264:	f7ff fb48 	bl	800d8f8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e268:	f001 f836 	bl	800f2d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e26c:	4b28      	ldr	r3, [pc, #160]	; (800e310 <xTaskGenericCreate+0x1e4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e270:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00d      	beq.n	800e292 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e276:	4b1b      	ldr	r3, [pc, #108]	; (800e2e4 <xTaskGenericCreate+0x1b8>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27c:	42bb      	cmp	r3, r7
 800e27e:	d208      	bcs.n	800e292 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e280:	f001 f812 	bl	800f2a8 <vPortYield>
			xReturn = pdPASS;
 800e284:	2001      	movs	r0, #1
 800e286:	e004      	b.n	800e292 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e288:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e28a:	f001 f931 	bl	800f4f0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e28e:	2001      	movs	r0, #1
 800e290:	4240      	negs	r0, r0
}
 800e292:	b005      	add	sp, #20
 800e294:	bc0c      	pop	{r2, r3}
 800e296:	4690      	mov	r8, r2
 800e298:	469a      	mov	sl, r3
 800e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e29c:	1c6b      	adds	r3, r5, #1
 800e29e:	0022      	movs	r2, r4
 800e2a0:	3235      	adds	r2, #53	; 0x35
 800e2a2:	0021      	movs	r1, r4
 800e2a4:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e2a6:	7818      	ldrb	r0, [r3, #0]
 800e2a8:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e2aa:	7818      	ldrb	r0, [r3, #0]
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d100      	bne.n	800e2b2 <xTaskGenericCreate+0x186>
 800e2b0:	e775      	b.n	800e19e <xTaskGenericCreate+0x72>
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2b6:	4291      	cmp	r1, r2
 800e2b8:	d1f5      	bne.n	800e2a6 <xTaskGenericCreate+0x17a>
 800e2ba:	e770      	b.n	800e19e <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e2bc:	4b14      	ldr	r3, [pc, #80]	; (800e310 <xTaskGenericCreate+0x1e4>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1be      	bne.n	800e242 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e2c4:	4b07      	ldr	r3, [pc, #28]	; (800e2e4 <xTaskGenericCreate+0x1b8>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ca:	42bb      	cmp	r3, r7
 800e2cc:	d8b9      	bhi.n	800e242 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <xTaskGenericCreate+0x1b8>)
 800e2d0:	601c      	str	r4, [r3, #0]
 800e2d2:	e7b6      	b.n	800e242 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	4240      	negs	r0, r0
 800e2d8:	e7db      	b.n	800e292 <xTaskGenericCreate+0x166>
 800e2da:	46c0      	nop			; (mov r8, r8)
 800e2dc:	3fffffff 	.word	0x3fffffff
 800e2e0:	20001c8c 	.word	0x20001c8c
 800e2e4:	20001bf0 	.word	0x20001bf0
 800e2e8:	20001bfc 	.word	0x20001bfc
 800e2ec:	20001ca4 	.word	0x20001ca4
 800e2f0:	20001cb8 	.word	0x20001cb8
 800e2f4:	20001cd0 	.word	0x20001cd0
 800e2f8:	20001cfc 	.word	0x20001cfc
 800e2fc:	20001ce8 	.word	0x20001ce8
 800e300:	20001bf4 	.word	0x20001bf4
 800e304:	20001bf8 	.word	0x20001bf8
 800e308:	20001c98 	.word	0x20001c98
 800e30c:	20001ca0 	.word	0x20001ca0
 800e310:	20001ce4 	.word	0x20001ce4

0800e314 <uxTaskPriorityGet>:
	{
 800e314:	b510      	push	{r4, lr}
 800e316:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e318:	f000 ffd2 	bl	800f2c0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	d004      	beq.n	800e32a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e320:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e322:	f000 ffd9 	bl	800f2d8 <vPortExitCritical>
	}
 800e326:	0020      	movs	r0, r4
 800e328:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e32a:	4b01      	ldr	r3, [pc, #4]	; (800e330 <uxTaskPriorityGet+0x1c>)
 800e32c:	681c      	ldr	r4, [r3, #0]
 800e32e:	e7f7      	b.n	800e320 <uxTaskPriorityGet+0xc>
 800e330:	20001bf0 	.word	0x20001bf0

0800e334 <vTaskPrioritySet>:
	{
 800e334:	b570      	push	{r4, r5, r6, lr}
 800e336:	0004      	movs	r4, r0
 800e338:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e33a:	2906      	cmp	r1, #6
 800e33c:	d901      	bls.n	800e342 <vTaskPrioritySet+0xe>
 800e33e:	b672      	cpsid	i
 800e340:	e7fe      	b.n	800e340 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e342:	f000 ffbd 	bl	800f2c0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e346:	2c00      	cmp	r4, #0
 800e348:	d101      	bne.n	800e34e <vTaskPrioritySet+0x1a>
 800e34a:	4b21      	ldr	r3, [pc, #132]	; (800e3d0 <vTaskPrioritySet+0x9c>)
 800e34c:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e34e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e350:	4295      	cmp	r5, r2
 800e352:	d032      	beq.n	800e3ba <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800e354:	d934      	bls.n	800e3c0 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800e356:	4b1e      	ldr	r3, [pc, #120]	; (800e3d0 <vTaskPrioritySet+0x9c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	42a3      	cmp	r3, r4
 800e35c:	d036      	beq.n	800e3cc <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e35e:	4b1c      	ldr	r3, [pc, #112]	; (800e3d0 <vTaskPrioritySet+0x9c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	2600      	movs	r6, #0
 800e366:	429d      	cmp	r5, r3
 800e368:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e36a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e36c:	428a      	cmp	r2, r1
 800e36e:	d100      	bne.n	800e372 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800e370:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800e372:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e374:	69a3      	ldr	r3, [r4, #24]
 800e376:	2b00      	cmp	r3, #0
 800e378:	db02      	blt.n	800e380 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e37a:	2207      	movs	r2, #7
 800e37c:	1b55      	subs	r5, r2, r5
 800e37e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e380:	2314      	movs	r3, #20
 800e382:	434b      	muls	r3, r1
 800e384:	4a13      	ldr	r2, [pc, #76]	; (800e3d4 <vTaskPrioritySet+0xa0>)
 800e386:	189b      	adds	r3, r3, r2
 800e388:	6962      	ldr	r2, [r4, #20]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d111      	bne.n	800e3b2 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e38e:	1d25      	adds	r5, r4, #4
 800e390:	0028      	movs	r0, r5
 800e392:	f7ff fad4 	bl	800d93e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e398:	4a0f      	ldr	r2, [pc, #60]	; (800e3d8 <vTaskPrioritySet+0xa4>)
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d901      	bls.n	800e3a4 <vTaskPrioritySet+0x70>
 800e3a0:	4a0d      	ldr	r2, [pc, #52]	; (800e3d8 <vTaskPrioritySet+0xa4>)
 800e3a2:	6013      	str	r3, [r2, #0]
 800e3a4:	2014      	movs	r0, #20
 800e3a6:	4358      	muls	r0, r3
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <vTaskPrioritySet+0xa0>)
 800e3aa:	18c0      	adds	r0, r0, r3
 800e3ac:	0029      	movs	r1, r5
 800e3ae:	f7ff faa3 	bl	800d8f8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800e3b2:	2e01      	cmp	r6, #1
 800e3b4:	d101      	bne.n	800e3ba <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e3b6:	f000 ff77 	bl	800f2a8 <vPortYield>
		taskEXIT_CRITICAL();
 800e3ba:	f000 ff8d 	bl	800f2d8 <vPortExitCritical>
	}
 800e3be:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800e3c0:	4b03      	ldr	r3, [pc, #12]	; (800e3d0 <vTaskPrioritySet+0x9c>)
 800e3c2:	681e      	ldr	r6, [r3, #0]
 800e3c4:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e3c6:	4273      	negs	r3, r6
 800e3c8:	415e      	adcs	r6, r3
 800e3ca:	e7ce      	b.n	800e36a <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800e3cc:	2600      	movs	r6, #0
 800e3ce:	e7cc      	b.n	800e36a <vTaskPrioritySet+0x36>
 800e3d0:	20001bf0 	.word	0x20001bf0
 800e3d4:	20001bfc 	.word	0x20001bfc
 800e3d8:	20001ca0 	.word	0x20001ca0

0800e3dc <vTaskStartScheduler>:
{
 800e3dc:	b500      	push	{lr}
 800e3de:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9303      	str	r3, [sp, #12]
 800e3e4:	9302      	str	r3, [sp, #8]
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	22a0      	movs	r2, #160	; 0xa0
 800e3ec:	490d      	ldr	r1, [pc, #52]	; (800e424 <vTaskStartScheduler+0x48>)
 800e3ee:	480e      	ldr	r0, [pc, #56]	; (800e428 <vTaskStartScheduler+0x4c>)
 800e3f0:	f7ff fe9c 	bl	800e12c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e3f4:	2801      	cmp	r0, #1
 800e3f6:	d003      	beq.n	800e400 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d110      	bne.n	800e41e <vTaskStartScheduler+0x42>
 800e3fc:	b672      	cpsid	i
 800e3fe:	e7fe      	b.n	800e3fe <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e400:	f000 fd68 	bl	800eed4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e404:	2801      	cmp	r0, #1
 800e406:	d1f7      	bne.n	800e3f8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e408:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e40a:	4b08      	ldr	r3, [pc, #32]	; (800e42c <vTaskStartScheduler+0x50>)
 800e40c:	2201      	movs	r2, #1
 800e40e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e410:	4b07      	ldr	r3, [pc, #28]	; (800e430 <vTaskStartScheduler+0x54>)
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e416:	f7fd f8d9 	bl	800b5cc <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e41a:	f000 ff1b 	bl	800f254 <xPortStartScheduler>
}
 800e41e:	b005      	add	sp, #20
 800e420:	bd00      	pop	{pc}
 800e422:	46c0      	nop			; (mov r8, r8)
 800e424:	0801a4f8 	.word	0x0801a4f8
 800e428:	0800e69d 	.word	0x0800e69d
 800e42c:	20001ce4 	.word	0x20001ce4
 800e430:	20001d10 	.word	0x20001d10

0800e434 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e434:	4a02      	ldr	r2, [pc, #8]	; (800e440 <vTaskSuspendAll+0xc>)
 800e436:	6813      	ldr	r3, [r2, #0]
 800e438:	3301      	adds	r3, #1
 800e43a:	6013      	str	r3, [r2, #0]
}
 800e43c:	4770      	bx	lr
 800e43e:	46c0      	nop			; (mov r8, r8)
 800e440:	20001c94 	.word	0x20001c94

0800e444 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e444:	4b01      	ldr	r3, [pc, #4]	; (800e44c <xTaskGetTickCount+0x8>)
 800e446:	6818      	ldr	r0, [r3, #0]
}
 800e448:	4770      	bx	lr
 800e44a:	46c0      	nop			; (mov r8, r8)
 800e44c:	20001d10 	.word	0x20001d10

0800e450 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e450:	4b01      	ldr	r3, [pc, #4]	; (800e458 <xTaskGetTickCountFromISR+0x8>)
 800e452:	6818      	ldr	r0, [r3, #0]
}
 800e454:	4770      	bx	lr
 800e456:	46c0      	nop			; (mov r8, r8)
 800e458:	20001d10 	.word	0x20001d10

0800e45c <xTaskIncrementTick>:
{
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e460:	4b39      	ldr	r3, [pc, #228]	; (800e548 <xTaskIncrementTick+0xec>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d161      	bne.n	800e52c <xTaskIncrementTick+0xd0>
		++xTickCount;
 800e468:	4b38      	ldr	r3, [pc, #224]	; (800e54c <xTaskIncrementTick+0xf0>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	3201      	adds	r2, #1
 800e46e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e470:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e472:	2e00      	cmp	r6, #0
 800e474:	d112      	bne.n	800e49c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800e476:	4b36      	ldr	r3, [pc, #216]	; (800e550 <xTaskIncrementTick+0xf4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <xTaskIncrementTick+0x28>
 800e480:	b672      	cpsid	i
 800e482:	e7fe      	b.n	800e482 <xTaskIncrementTick+0x26>
 800e484:	4a32      	ldr	r2, [pc, #200]	; (800e550 <xTaskIncrementTick+0xf4>)
 800e486:	6811      	ldr	r1, [r2, #0]
 800e488:	4b32      	ldr	r3, [pc, #200]	; (800e554 <xTaskIncrementTick+0xf8>)
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	6010      	str	r0, [r2, #0]
 800e48e:	6019      	str	r1, [r3, #0]
 800e490:	4a31      	ldr	r2, [pc, #196]	; (800e558 <xTaskIncrementTick+0xfc>)
 800e492:	6813      	ldr	r3, [r2, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	f7ff fdf0 	bl	800e07c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e49c:	4b2f      	ldr	r3, [pc, #188]	; (800e55c <xTaskIncrementTick+0x100>)
 800e49e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e4a0:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e4a2:	42b3      	cmp	r3, r6
 800e4a4:	d833      	bhi.n	800e50e <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800e4a6:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a8:	4d29      	ldr	r5, [pc, #164]	; (800e550 <xTaskIncrementTick+0xf4>)
 800e4aa:	682b      	ldr	r3, [r5, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d029      	beq.n	800e506 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e4b2:	4b27      	ldr	r3, [pc, #156]	; (800e550 <xTaskIncrementTick+0xf4>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e4ba:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e4bc:	429e      	cmp	r6, r3
 800e4be:	d332      	bcc.n	800e526 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e4c0:	1d23      	adds	r3, r4, #4
 800e4c2:	9301      	str	r3, [sp, #4]
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7ff fa3a 	bl	800d93e <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d003      	beq.n	800e4d8 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4d0:	0020      	movs	r0, r4
 800e4d2:	3018      	adds	r0, #24
 800e4d4:	f7ff fa33 	bl	800d93e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e4d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4da:	4a21      	ldr	r2, [pc, #132]	; (800e560 <xTaskIncrementTick+0x104>)
 800e4dc:	6812      	ldr	r2, [r2, #0]
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d901      	bls.n	800e4e6 <xTaskIncrementTick+0x8a>
 800e4e2:	4a1f      	ldr	r2, [pc, #124]	; (800e560 <xTaskIncrementTick+0x104>)
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	0098      	lsls	r0, r3, #2
 800e4e8:	18c0      	adds	r0, r0, r3
 800e4ea:	0080      	lsls	r0, r0, #2
 800e4ec:	4b1d      	ldr	r3, [pc, #116]	; (800e564 <xTaskIncrementTick+0x108>)
 800e4ee:	18c0      	adds	r0, r0, r3
 800e4f0:	9901      	ldr	r1, [sp, #4]
 800e4f2:	f7ff fa01 	bl	800d8f8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4f6:	4b1c      	ldr	r3, [pc, #112]	; (800e568 <xTaskIncrementTick+0x10c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d3d3      	bcc.n	800e4aa <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800e502:	2701      	movs	r7, #1
 800e504:	e7d1      	b.n	800e4aa <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e506:	4b15      	ldr	r3, [pc, #84]	; (800e55c <xTaskIncrementTick+0x100>)
 800e508:	2201      	movs	r2, #1
 800e50a:	4252      	negs	r2, r2
 800e50c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e50e:	4b16      	ldr	r3, [pc, #88]	; (800e568 <xTaskIncrementTick+0x10c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	0093      	lsls	r3, r2, #2
 800e516:	189b      	adds	r3, r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4a12      	ldr	r2, [pc, #72]	; (800e564 <xTaskIncrementTick+0x108>)
 800e51c:	589b      	ldr	r3, [r3, r2]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d909      	bls.n	800e536 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800e522:	2701      	movs	r7, #1
 800e524:	e007      	b.n	800e536 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800e526:	4a0d      	ldr	r2, [pc, #52]	; (800e55c <xTaskIncrementTick+0x100>)
 800e528:	6013      	str	r3, [r2, #0]
							break;
 800e52a:	e7f0      	b.n	800e50e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800e52c:	4a0f      	ldr	r2, [pc, #60]	; (800e56c <xTaskIncrementTick+0x110>)
 800e52e:	6813      	ldr	r3, [r2, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e534:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800e536:	4b0e      	ldr	r3, [pc, #56]	; (800e570 <xTaskIncrementTick+0x114>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d000      	beq.n	800e540 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800e53e:	2701      	movs	r7, #1
}
 800e540:	0038      	movs	r0, r7
 800e542:	b003      	add	sp, #12
 800e544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e546:	46c0      	nop			; (mov r8, r8)
 800e548:	20001c94 	.word	0x20001c94
 800e54c:	20001d10 	.word	0x20001d10
 800e550:	20001bf4 	.word	0x20001bf4
 800e554:	20001bf8 	.word	0x20001bf8
 800e558:	20001ccc 	.word	0x20001ccc
 800e55c:	2000005c 	.word	0x2000005c
 800e560:	20001ca0 	.word	0x20001ca0
 800e564:	20001bfc 	.word	0x20001bfc
 800e568:	20001bf0 	.word	0x20001bf0
 800e56c:	20001c90 	.word	0x20001c90
 800e570:	20001d14 	.word	0x20001d14

0800e574 <xTaskResumeAll>:
{
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e576:	4b2f      	ldr	r3, [pc, #188]	; (800e634 <xTaskResumeAll+0xc0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <xTaskResumeAll+0xe>
 800e57e:	b672      	cpsid	i
 800e580:	e7fe      	b.n	800e580 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800e582:	f000 fe9d 	bl	800f2c0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e586:	4b2b      	ldr	r3, [pc, #172]	; (800e634 <xTaskResumeAll+0xc0>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	3a01      	subs	r2, #1
 800e58c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e58e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e590:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e592:	42a3      	cmp	r3, r4
 800e594:	d105      	bne.n	800e5a2 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e596:	4b28      	ldr	r3, [pc, #160]	; (800e638 <xTaskResumeAll+0xc4>)
 800e598:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e59a:	4d28      	ldr	r5, [pc, #160]	; (800e63c <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	d12a      	bne.n	800e5f6 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800e5a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e5a2:	f000 fe99 	bl	800f2d8 <vPortExitCritical>
}
 800e5a6:	0020      	movs	r0, r4
 800e5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800e5aa:	0098      	lsls	r0, r3, #2
 800e5ac:	18c0      	adds	r0, r0, r3
 800e5ae:	0080      	lsls	r0, r0, #2
 800e5b0:	4b23      	ldr	r3, [pc, #140]	; (800e640 <xTaskResumeAll+0xcc>)
 800e5b2:	18c0      	adds	r0, r0, r3
 800e5b4:	0021      	movs	r1, r4
 800e5b6:	f7ff f99f 	bl	800d8f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5ba:	4b22      	ldr	r3, [pc, #136]	; (800e644 <xTaskResumeAll+0xd0>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d214      	bcs.n	800e5f0 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5c6:	6833      	ldr	r3, [r6, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d016      	beq.n	800e5fa <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e5cc:	68eb      	ldr	r3, [r5, #12]
 800e5ce:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5d0:	0038      	movs	r0, r7
 800e5d2:	3018      	adds	r0, #24
 800e5d4:	f7ff f9b3 	bl	800d93e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e5d8:	1d3c      	adds	r4, r7, #4
 800e5da:	0020      	movs	r0, r4
 800e5dc:	f7ff f9af 	bl	800d93e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	4a19      	ldr	r2, [pc, #100]	; (800e648 <xTaskResumeAll+0xd4>)
 800e5e4:	6812      	ldr	r2, [r2, #0]
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d9df      	bls.n	800e5aa <xTaskResumeAll+0x36>
 800e5ea:	4a17      	ldr	r2, [pc, #92]	; (800e648 <xTaskResumeAll+0xd4>)
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	e7dc      	b.n	800e5aa <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800e5f0:	4b16      	ldr	r3, [pc, #88]	; (800e64c <xTaskResumeAll+0xd8>)
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5f6:	4e11      	ldr	r6, [pc, #68]	; (800e63c <xTaskResumeAll+0xc8>)
 800e5f8:	e7e5      	b.n	800e5c6 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e5fa:	4b15      	ldr	r3, [pc, #84]	; (800e650 <xTaskResumeAll+0xdc>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d005      	beq.n	800e60e <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e602:	4e13      	ldr	r6, [pc, #76]	; (800e650 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800e604:	4c11      	ldr	r4, [pc, #68]	; (800e64c <xTaskResumeAll+0xd8>)
 800e606:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e608:	6833      	ldr	r3, [r6, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d108      	bne.n	800e620 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800e60e:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <xTaskResumeAll+0xd8>)
 800e610:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e612:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800e614:	2b01      	cmp	r3, #1
 800e616:	d1c4      	bne.n	800e5a2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e618:	f000 fe46 	bl	800f2a8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e61c:	3401      	adds	r4, #1
 800e61e:	e7c0      	b.n	800e5a2 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800e620:	f7ff ff1c 	bl	800e45c <xTaskIncrementTick>
 800e624:	2800      	cmp	r0, #0
 800e626:	d000      	beq.n	800e62a <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800e628:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800e62a:	4a09      	ldr	r2, [pc, #36]	; (800e650 <xTaskResumeAll+0xdc>)
 800e62c:	6813      	ldr	r3, [r2, #0]
 800e62e:	3b01      	subs	r3, #1
 800e630:	6013      	str	r3, [r2, #0]
 800e632:	e7e9      	b.n	800e608 <xTaskResumeAll+0x94>
 800e634:	20001c94 	.word	0x20001c94
 800e638:	20001c8c 	.word	0x20001c8c
 800e63c:	20001cd0 	.word	0x20001cd0
 800e640:	20001bfc 	.word	0x20001bfc
 800e644:	20001bf0 	.word	0x20001bf0
 800e648:	20001ca0 	.word	0x20001ca0
 800e64c:	20001d14 	.word	0x20001d14
 800e650:	20001c90 	.word	0x20001c90

0800e654 <vTaskDelay>:
	{
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e658:	d016      	beq.n	800e688 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <vTaskDelay+0x3c>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <vTaskDelay+0x12>
 800e662:	b672      	cpsid	i
 800e664:	e7fe      	b.n	800e664 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800e666:	f7ff fee5 	bl	800e434 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e66a:	4b0a      	ldr	r3, [pc, #40]	; (800e694 <vTaskDelay+0x40>)
 800e66c:	681c      	ldr	r4, [r3, #0]
 800e66e:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e670:	4b09      	ldr	r3, [pc, #36]	; (800e698 <vTaskDelay+0x44>)
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	3004      	adds	r0, #4
 800e676:	f7ff f962 	bl	800d93e <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e67a:	0020      	movs	r0, r4
 800e67c:	f7ff fd14 	bl	800e0a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e680:	f7ff ff78 	bl	800e574 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e684:	2800      	cmp	r0, #0
 800e686:	d101      	bne.n	800e68c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e688:	f000 fe0e 	bl	800f2a8 <vPortYield>
	}
 800e68c:	bd70      	pop	{r4, r5, r6, pc}
 800e68e:	46c0      	nop			; (mov r8, r8)
 800e690:	20001c94 	.word	0x20001c94
 800e694:	20001d10 	.word	0x20001d10
 800e698:	20001bf0 	.word	0x20001bf0

0800e69c <prvIdleTask>:
{
 800e69c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e69e:	4d16      	ldr	r5, [pc, #88]	; (800e6f8 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e6a0:	4e16      	ldr	r6, [pc, #88]	; (800e6fc <prvIdleTask+0x60>)
 800e6a2:	e003      	b.n	800e6ac <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6a4:	4b16      	ldr	r3, [pc, #88]	; (800e700 <prvIdleTask+0x64>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d822      	bhi.n	800e6f2 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0f8      	beq.n	800e6a4 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e6b2:	f7ff febf 	bl	800e434 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e6b6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800e6b8:	f7ff ff5c 	bl	800e574 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e6bc:	2c00      	cmp	r4, #0
 800e6be:	d0f5      	beq.n	800e6ac <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e6c0:	f000 fdfe 	bl	800f2c0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e6c4:	4b0d      	ldr	r3, [pc, #52]	; (800e6fc <prvIdleTask+0x60>)
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6ca:	1d20      	adds	r0, r4, #4
 800e6cc:	f7ff f937 	bl	800d93e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e6d0:	4a0c      	ldr	r2, [pc, #48]	; (800e704 <prvIdleTask+0x68>)
 800e6d2:	6813      	ldr	r3, [r2, #0]
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800e6d8:	4a07      	ldr	r2, [pc, #28]	; (800e6f8 <prvIdleTask+0x5c>)
 800e6da:	6813      	ldr	r3, [r2, #0]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800e6e0:	f000 fdfa 	bl	800f2d8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e6e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e6e6:	f000 ff03 	bl	800f4f0 <vPortFree>
		vPortFree( pxTCB );
 800e6ea:	0020      	movs	r0, r4
 800e6ec:	f000 ff00 	bl	800f4f0 <vPortFree>
 800e6f0:	e7dc      	b.n	800e6ac <prvIdleTask+0x10>
				taskYIELD();
 800e6f2:	f000 fdd9 	bl	800f2a8 <vPortYield>
 800e6f6:	e7d9      	b.n	800e6ac <prvIdleTask+0x10>
 800e6f8:	20001c9c 	.word	0x20001c9c
 800e6fc:	20001cfc 	.word	0x20001cfc
 800e700:	20001bfc 	.word	0x20001bfc
 800e704:	20001c8c 	.word	0x20001c8c

0800e708 <uxTaskGetSystemState>:
	{
 800e708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e70a:	46c6      	mov	lr, r8
 800e70c:	b500      	push	{lr}
 800e70e:	0006      	movs	r6, r0
 800e710:	000d      	movs	r5, r1
 800e712:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e714:	f7ff fe8e 	bl	800e434 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e718:	4b1e      	ldr	r3, [pc, #120]	; (800e794 <uxTaskGetSystemState+0x8c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e71c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e71e:	42ab      	cmp	r3, r5
 800e720:	d831      	bhi.n	800e786 <uxTaskGetSystemState+0x7e>
 800e722:	4d1d      	ldr	r5, [pc, #116]	; (800e798 <uxTaskGetSystemState+0x90>)
 800e724:	002f      	movs	r7, r5
 800e726:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e728:	0160      	lsls	r0, r4, #5
 800e72a:	1830      	adds	r0, r6, r0
 800e72c:	2201      	movs	r2, #1
 800e72e:	0029      	movs	r1, r5
 800e730:	f7ff fc50 	bl	800dfd4 <prvListTaskWithinSingleList>
 800e734:	1824      	adds	r4, r4, r0
 800e736:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e738:	42bd      	cmp	r5, r7
 800e73a:	d1f5      	bne.n	800e728 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e73c:	4b17      	ldr	r3, [pc, #92]	; (800e79c <uxTaskGetSystemState+0x94>)
 800e73e:	6819      	ldr	r1, [r3, #0]
 800e740:	0160      	lsls	r0, r4, #5
 800e742:	1830      	adds	r0, r6, r0
 800e744:	2202      	movs	r2, #2
 800e746:	f7ff fc45 	bl	800dfd4 <prvListTaskWithinSingleList>
 800e74a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e74c:	4b14      	ldr	r3, [pc, #80]	; (800e7a0 <uxTaskGetSystemState+0x98>)
 800e74e:	6819      	ldr	r1, [r3, #0]
 800e750:	0160      	lsls	r0, r4, #5
 800e752:	1830      	adds	r0, r6, r0
 800e754:	2202      	movs	r2, #2
 800e756:	f7ff fc3d 	bl	800dfd4 <prvListTaskWithinSingleList>
 800e75a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e75c:	0160      	lsls	r0, r4, #5
 800e75e:	1830      	adds	r0, r6, r0
 800e760:	2204      	movs	r2, #4
 800e762:	4910      	ldr	r1, [pc, #64]	; (800e7a4 <uxTaskGetSystemState+0x9c>)
 800e764:	f7ff fc36 	bl	800dfd4 <prvListTaskWithinSingleList>
 800e768:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e76a:	0160      	lsls	r0, r4, #5
 800e76c:	1830      	adds	r0, r6, r0
 800e76e:	2203      	movs	r2, #3
 800e770:	490d      	ldr	r1, [pc, #52]	; (800e7a8 <uxTaskGetSystemState+0xa0>)
 800e772:	f7ff fc2f 	bl	800dfd4 <prvListTaskWithinSingleList>
 800e776:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e778:	4643      	mov	r3, r8
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e77e:	f7fc ff35 	bl	800b5ec <ulMainGetRunTimeCounterValue>
 800e782:	4643      	mov	r3, r8
 800e784:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e786:	f7ff fef5 	bl	800e574 <xTaskResumeAll>
	}
 800e78a:	0020      	movs	r0, r4
 800e78c:	bc04      	pop	{r2}
 800e78e:	4690      	mov	r8, r2
 800e790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e792:	46c0      	nop			; (mov r8, r8)
 800e794:	20001c8c 	.word	0x20001c8c
 800e798:	20001c74 	.word	0x20001c74
 800e79c:	20001bf4 	.word	0x20001bf4
 800e7a0:	20001bf8 	.word	0x20001bf8
 800e7a4:	20001cfc 	.word	0x20001cfc
 800e7a8:	20001ce8 	.word	0x20001ce8

0800e7ac <vTaskSwitchContext>:
{
 800e7ac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7ae:	4b3a      	ldr	r3, [pc, #232]	; (800e898 <vTaskSwitchContext+0xec>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e7b6:	4b39      	ldr	r3, [pc, #228]	; (800e89c <vTaskSwitchContext+0xf0>)
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
}
 800e7bc:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800e7be:	4b37      	ldr	r3, [pc, #220]	; (800e89c <vTaskSwitchContext+0xf0>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e7c4:	f7fc ff12 	bl	800b5ec <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e7c8:	4b35      	ldr	r3, [pc, #212]	; (800e8a0 <vTaskSwitchContext+0xf4>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4298      	cmp	r0, r3
 800e7ce:	d905      	bls.n	800e7dc <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e7d0:	4a34      	ldr	r2, [pc, #208]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e7d2:	6812      	ldr	r2, [r2, #0]
 800e7d4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e7d6:	1acb      	subs	r3, r1, r3
 800e7d8:	181b      	adds	r3, r3, r0
 800e7da:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e7dc:	4b30      	ldr	r3, [pc, #192]	; (800e8a0 <vTaskSwitchContext+0xf4>)
 800e7de:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e7e0:	4b30      	ldr	r3, [pc, #192]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6812      	ldr	r2, [r2, #0]
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d805      	bhi.n	800e7fa <vTaskSwitchContext+0x4e>
 800e7ee:	4b2d      	ldr	r3, [pc, #180]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	6819      	ldr	r1, [r3, #0]
 800e7f4:	3134      	adds	r1, #52	; 0x34
 800e7f6:	f7fe fc21 	bl	800d03c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e7fa:	4b2a      	ldr	r3, [pc, #168]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e800:	2214      	movs	r2, #20
 800e802:	4929      	ldr	r1, [pc, #164]	; (800e8a8 <vTaskSwitchContext+0xfc>)
 800e804:	f004 fae4 	bl	8012dd0 <memcmp>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d005      	beq.n	800e818 <vTaskSwitchContext+0x6c>
 800e80c:	4b25      	ldr	r3, [pc, #148]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	6819      	ldr	r1, [r3, #0]
 800e812:	3134      	adds	r1, #52	; 0x34
 800e814:	f7fe fc12 	bl	800d03c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e818:	4b24      	ldr	r3, [pc, #144]	; (800e8ac <vTaskSwitchContext+0x100>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	0093      	lsls	r3, r2, #2
 800e81e:	189b      	adds	r3, r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4a23      	ldr	r2, [pc, #140]	; (800e8b0 <vTaskSwitchContext+0x104>)
 800e824:	589b      	ldr	r3, [r3, r2]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d115      	bne.n	800e856 <vTaskSwitchContext+0xaa>
 800e82a:	4b20      	ldr	r3, [pc, #128]	; (800e8ac <vTaskSwitchContext+0x100>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00f      	beq.n	800e852 <vTaskSwitchContext+0xa6>
 800e832:	4a1e      	ldr	r2, [pc, #120]	; (800e8ac <vTaskSwitchContext+0x100>)
 800e834:	4c1e      	ldr	r4, [pc, #120]	; (800e8b0 <vTaskSwitchContext+0x104>)
 800e836:	0010      	movs	r0, r2
 800e838:	6813      	ldr	r3, [r2, #0]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	6811      	ldr	r1, [r2, #0]
 800e840:	008b      	lsls	r3, r1, #2
 800e842:	185b      	adds	r3, r3, r1
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	591b      	ldr	r3, [r3, r4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d104      	bne.n	800e856 <vTaskSwitchContext+0xaa>
 800e84c:	6803      	ldr	r3, [r0, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1f2      	bne.n	800e838 <vTaskSwitchContext+0x8c>
 800e852:	b672      	cpsid	i
 800e854:	e7fe      	b.n	800e854 <vTaskSwitchContext+0xa8>
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <vTaskSwitchContext+0x100>)
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	4c15      	ldr	r4, [pc, #84]	; (800e8b0 <vTaskSwitchContext+0x104>)
 800e85c:	0093      	lsls	r3, r2, #2
 800e85e:	1899      	adds	r1, r3, r2
 800e860:	0089      	lsls	r1, r1, #2
 800e862:	1861      	adds	r1, r4, r1
 800e864:	6848      	ldr	r0, [r1, #4]
 800e866:	6840      	ldr	r0, [r0, #4]
 800e868:	6048      	str	r0, [r1, #4]
 800e86a:	189b      	adds	r3, r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	3308      	adds	r3, #8
 800e870:	191b      	adds	r3, r3, r4
 800e872:	4298      	cmp	r0, r3
 800e874:	d009      	beq.n	800e88a <vTaskSwitchContext+0xde>
 800e876:	0093      	lsls	r3, r2, #2
 800e878:	189a      	adds	r2, r3, r2
 800e87a:	0092      	lsls	r2, r2, #2
 800e87c:	4b0c      	ldr	r3, [pc, #48]	; (800e8b0 <vTaskSwitchContext+0x104>)
 800e87e:	189a      	adds	r2, r3, r2
 800e880:	6853      	ldr	r3, [r2, #4]
 800e882:	68da      	ldr	r2, [r3, #12]
 800e884:	4b07      	ldr	r3, [pc, #28]	; (800e8a4 <vTaskSwitchContext+0xf8>)
 800e886:	601a      	str	r2, [r3, #0]
}
 800e888:	e798      	b.n	800e7bc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e88a:	6840      	ldr	r0, [r0, #4]
 800e88c:	2114      	movs	r1, #20
 800e88e:	4351      	muls	r1, r2
 800e890:	1863      	adds	r3, r4, r1
 800e892:	6058      	str	r0, [r3, #4]
 800e894:	e7ef      	b.n	800e876 <vTaskSwitchContext+0xca>
 800e896:	46c0      	nop			; (mov r8, r8)
 800e898:	20001c94 	.word	0x20001c94
 800e89c:	20001d14 	.word	0x20001d14
 800e8a0:	20001c88 	.word	0x20001c88
 800e8a4:	20001bf0 	.word	0x20001bf0
 800e8a8:	0801a4bc 	.word	0x0801a4bc
 800e8ac:	20001ca0 	.word	0x20001ca0
 800e8b0:	20001bfc 	.word	0x20001bfc

0800e8b4 <vTaskPlaceOnEventList>:
{
 800e8b4:	b570      	push	{r4, r5, r6, lr}
 800e8b6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d101      	bne.n	800e8c0 <vTaskPlaceOnEventList+0xc>
 800e8bc:	b672      	cpsid	i
 800e8be:	e7fe      	b.n	800e8be <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8c0:	4d0b      	ldr	r5, [pc, #44]	; (800e8f0 <vTaskPlaceOnEventList+0x3c>)
 800e8c2:	6829      	ldr	r1, [r5, #0]
 800e8c4:	3118      	adds	r1, #24
 800e8c6:	f7ff f823 	bl	800d910 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e8ca:	6828      	ldr	r0, [r5, #0]
 800e8cc:	3004      	adds	r0, #4
 800e8ce:	f7ff f836 	bl	800d93e <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e8d2:	1c63      	adds	r3, r4, #1
 800e8d4:	d005      	beq.n	800e8e2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800e8d6:	4b07      	ldr	r3, [pc, #28]	; (800e8f4 <vTaskPlaceOnEventList+0x40>)
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e8dc:	f7ff fbe4 	bl	800e0a8 <prvAddCurrentTaskToDelayedList>
}
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e8e2:	4b03      	ldr	r3, [pc, #12]	; (800e8f0 <vTaskPlaceOnEventList+0x3c>)
 800e8e4:	6819      	ldr	r1, [r3, #0]
 800e8e6:	3104      	adds	r1, #4
 800e8e8:	4803      	ldr	r0, [pc, #12]	; (800e8f8 <vTaskPlaceOnEventList+0x44>)
 800e8ea:	f7ff f805 	bl	800d8f8 <vListInsertEnd>
 800e8ee:	e7f7      	b.n	800e8e0 <vTaskPlaceOnEventList+0x2c>
 800e8f0:	20001bf0 	.word	0x20001bf0
 800e8f4:	20001d10 	.word	0x20001d10
 800e8f8:	20001ce8 	.word	0x20001ce8

0800e8fc <vTaskPlaceOnEventListRestricted>:
	{
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800e900:	2800      	cmp	r0, #0
 800e902:	d101      	bne.n	800e908 <vTaskPlaceOnEventListRestricted+0xc>
 800e904:	b672      	cpsid	i
 800e906:	e7fe      	b.n	800e906 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e908:	4c07      	ldr	r4, [pc, #28]	; (800e928 <vTaskPlaceOnEventListRestricted+0x2c>)
 800e90a:	6821      	ldr	r1, [r4, #0]
 800e90c:	3118      	adds	r1, #24
 800e90e:	f7fe fff3 	bl	800d8f8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e912:	6820      	ldr	r0, [r4, #0]
 800e914:	3004      	adds	r0, #4
 800e916:	f7ff f812 	bl	800d93e <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e91a:	4b04      	ldr	r3, [pc, #16]	; (800e92c <vTaskPlaceOnEventListRestricted+0x30>)
 800e91c:	6818      	ldr	r0, [r3, #0]
 800e91e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e920:	f7ff fbc2 	bl	800e0a8 <prvAddCurrentTaskToDelayedList>
	}
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	46c0      	nop			; (mov r8, r8)
 800e928:	20001bf0 	.word	0x20001bf0
 800e92c:	20001d10 	.word	0x20001d10

0800e930 <xTaskRemoveFromEventList>:
{
 800e930:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e932:	68c3      	ldr	r3, [r0, #12]
 800e934:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e936:	2d00      	cmp	r5, #0
 800e938:	d101      	bne.n	800e93e <xTaskRemoveFromEventList+0xe>
 800e93a:	b672      	cpsid	i
 800e93c:	e7fe      	b.n	800e93c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e93e:	002c      	movs	r4, r5
 800e940:	3418      	adds	r4, #24
 800e942:	0020      	movs	r0, r4
 800e944:	f7fe fffb 	bl	800d93e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e948:	4b13      	ldr	r3, [pc, #76]	; (800e998 <xTaskRemoveFromEventList+0x68>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d11e      	bne.n	800e98e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e950:	1d2c      	adds	r4, r5, #4
 800e952:	0020      	movs	r0, r4
 800e954:	f7fe fff3 	bl	800d93e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e958:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e95a:	4a10      	ldr	r2, [pc, #64]	; (800e99c <xTaskRemoveFromEventList+0x6c>)
 800e95c:	6812      	ldr	r2, [r2, #0]
 800e95e:	4293      	cmp	r3, r2
 800e960:	d901      	bls.n	800e966 <xTaskRemoveFromEventList+0x36>
 800e962:	4a0e      	ldr	r2, [pc, #56]	; (800e99c <xTaskRemoveFromEventList+0x6c>)
 800e964:	6013      	str	r3, [r2, #0]
 800e966:	0098      	lsls	r0, r3, #2
 800e968:	18c0      	adds	r0, r0, r3
 800e96a:	0080      	lsls	r0, r0, #2
 800e96c:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <xTaskRemoveFromEventList+0x70>)
 800e96e:	18c0      	adds	r0, r0, r3
 800e970:	0021      	movs	r1, r4
 800e972:	f7fe ffc1 	bl	800d8f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e976:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <xTaskRemoveFromEventList+0x74>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e97e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e980:	429a      	cmp	r2, r3
 800e982:	d903      	bls.n	800e98c <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800e984:	4b08      	ldr	r3, [pc, #32]	; (800e9a8 <xTaskRemoveFromEventList+0x78>)
 800e986:	2201      	movs	r2, #1
 800e988:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800e98a:	3001      	adds	r0, #1
}
 800e98c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e98e:	0021      	movs	r1, r4
 800e990:	4806      	ldr	r0, [pc, #24]	; (800e9ac <xTaskRemoveFromEventList+0x7c>)
 800e992:	f7fe ffb1 	bl	800d8f8 <vListInsertEnd>
 800e996:	e7ee      	b.n	800e976 <xTaskRemoveFromEventList+0x46>
 800e998:	20001c94 	.word	0x20001c94
 800e99c:	20001ca0 	.word	0x20001ca0
 800e9a0:	20001bfc 	.word	0x20001bfc
 800e9a4:	20001bf0 	.word	0x20001bf0
 800e9a8:	20001d14 	.word	0x20001d14
 800e9ac:	20001cd0 	.word	0x20001cd0

0800e9b0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d006      	beq.n	800e9c2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9b4:	4b04      	ldr	r3, [pc, #16]	; (800e9c8 <vTaskSetTimeOutState+0x18>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9ba:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <vTaskSetTimeOutState+0x1c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6043      	str	r3, [r0, #4]
}
 800e9c0:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800e9c2:	b672      	cpsid	i
 800e9c4:	e7fe      	b.n	800e9c4 <vTaskSetTimeOutState+0x14>
 800e9c6:	46c0      	nop			; (mov r8, r8)
 800e9c8:	20001ccc 	.word	0x20001ccc
 800e9cc:	20001d10 	.word	0x20001d10

0800e9d0 <xTaskCheckForTimeOut>:
{
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	0004      	movs	r4, r0
 800e9d4:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d003      	beq.n	800e9e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800e9da:	2900      	cmp	r1, #0
 800e9dc:	d103      	bne.n	800e9e6 <xTaskCheckForTimeOut+0x16>
 800e9de:	b672      	cpsid	i
 800e9e0:	e7fe      	b.n	800e9e0 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800e9e2:	b672      	cpsid	i
 800e9e4:	e7fe      	b.n	800e9e4 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800e9e6:	f000 fc6b 	bl	800f2c0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e9ea:	4b10      	ldr	r3, [pc, #64]	; (800ea2c <xTaskCheckForTimeOut+0x5c>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e9ee:	6833      	ldr	r3, [r6, #0]
 800e9f0:	1c59      	adds	r1, r3, #1
 800e9f2:	d019      	beq.n	800ea28 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f4:	490e      	ldr	r1, [pc, #56]	; (800ea30 <xTaskCheckForTimeOut+0x60>)
 800e9f6:	6809      	ldr	r1, [r1, #0]
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	4288      	cmp	r0, r1
 800e9fc:	d003      	beq.n	800ea06 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800e9fe:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea00:	6861      	ldr	r1, [r4, #4]
 800ea02:	4291      	cmp	r1, r2
 800ea04:	d904      	bls.n	800ea10 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea06:	6861      	ldr	r1, [r4, #4]
 800ea08:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ea0a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea0c:	4283      	cmp	r3, r0
 800ea0e:	d803      	bhi.n	800ea18 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800ea10:	f000 fc62 	bl	800f2d8 <vPortExitCritical>
}
 800ea14:	0028      	movs	r0, r5
 800ea16:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ea18:	1a9b      	subs	r3, r3, r2
 800ea1a:	185b      	adds	r3, r3, r1
 800ea1c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ea1e:	0020      	movs	r0, r4
 800ea20:	f7ff ffc6 	bl	800e9b0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ea24:	2500      	movs	r5, #0
 800ea26:	e7f3      	b.n	800ea10 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800ea28:	2500      	movs	r5, #0
 800ea2a:	e7f1      	b.n	800ea10 <xTaskCheckForTimeOut+0x40>
 800ea2c:	20001d10 	.word	0x20001d10
 800ea30:	20001ccc 	.word	0x20001ccc

0800ea34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <vTaskMissedYield+0x8>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	4770      	bx	lr
 800ea3c:	20001d14 	.word	0x20001d14

0800ea40 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ea40:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <xTaskGetSchedulerState+0x18>)
 800ea42:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea44:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d004      	beq.n	800ea54 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea4a:	4b04      	ldr	r3, [pc, #16]	; (800ea5c <xTaskGetSchedulerState+0x1c>)
 800ea4c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea4e:	4243      	negs	r3, r0
 800ea50:	4158      	adcs	r0, r3
 800ea52:	0040      	lsls	r0, r0, #1
	}
 800ea54:	4770      	bx	lr
 800ea56:	46c0      	nop			; (mov r8, r8)
 800ea58:	20001ce4 	.word	0x20001ce4
 800ea5c:	20001c94 	.word	0x20001c94

0800ea60 <vTaskPriorityInherit>:
	{
 800ea60:	b570      	push	{r4, r5, r6, lr}
 800ea62:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ea64:	d01a      	beq.n	800ea9c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ea68:	4b19      	ldr	r3, [pc, #100]	; (800ead0 <vTaskPriorityInherit+0x70>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d214      	bcs.n	800ea9c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea72:	6983      	ldr	r3, [r0, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	db05      	blt.n	800ea84 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea78:	4b15      	ldr	r3, [pc, #84]	; (800ead0 <vTaskPriorityInherit+0x70>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ea7e:	2307      	movs	r3, #7
 800ea80:	1a5b      	subs	r3, r3, r1
 800ea82:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ea84:	0093      	lsls	r3, r2, #2
 800ea86:	189b      	adds	r3, r3, r2
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4a12      	ldr	r2, [pc, #72]	; (800ead4 <vTaskPriorityInherit+0x74>)
 800ea8c:	189b      	adds	r3, r3, r2
 800ea8e:	6962      	ldr	r2, [r4, #20]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d004      	beq.n	800ea9e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea94:	4b0e      	ldr	r3, [pc, #56]	; (800ead0 <vTaskPriorityInherit+0x70>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ea9c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea9e:	1d25      	adds	r5, r4, #4
 800eaa0:	0028      	movs	r0, r5
 800eaa2:	f7fe ff4c 	bl	800d93e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaa6:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <vTaskPriorityInherit+0x70>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eaae:	4a0a      	ldr	r2, [pc, #40]	; (800ead8 <vTaskPriorityInherit+0x78>)
 800eab0:	6812      	ldr	r2, [r2, #0]
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d808      	bhi.n	800eac8 <vTaskPriorityInherit+0x68>
 800eab6:	0098      	lsls	r0, r3, #2
 800eab8:	18c0      	adds	r0, r0, r3
 800eaba:	0080      	lsls	r0, r0, #2
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <vTaskPriorityInherit+0x74>)
 800eabe:	18c0      	adds	r0, r0, r3
 800eac0:	0029      	movs	r1, r5
 800eac2:	f7fe ff19 	bl	800d8f8 <vListInsertEnd>
	}
 800eac6:	e7e9      	b.n	800ea9c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800eac8:	4a03      	ldr	r2, [pc, #12]	; (800ead8 <vTaskPriorityInherit+0x78>)
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	e7f3      	b.n	800eab6 <vTaskPriorityInherit+0x56>
 800eace:	46c0      	nop			; (mov r8, r8)
 800ead0:	20001bf0 	.word	0x20001bf0
 800ead4:	20001bfc 	.word	0x20001bfc
 800ead8:	20001ca0 	.word	0x20001ca0

0800eadc <xTaskPriorityDisinherit>:
	{
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eae0:	d02b      	beq.n	800eb3a <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800eae2:	4b18      	ldr	r3, [pc, #96]	; (800eb44 <xTaskPriorityDisinherit+0x68>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4283      	cmp	r3, r0
 800eae8:	d001      	beq.n	800eaee <xTaskPriorityDisinherit+0x12>
 800eaea:	b672      	cpsid	i
 800eaec:	e7fe      	b.n	800eaec <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800eaee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <xTaskPriorityDisinherit+0x1c>
 800eaf4:	b672      	cpsid	i
 800eaf6:	e7fe      	b.n	800eaf6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eafc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eafe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800eb00:	428a      	cmp	r2, r1
 800eb02:	d01c      	beq.n	800eb3e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800eb04:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb06:	4283      	cmp	r3, r0
 800eb08:	d118      	bne.n	800eb3c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb0a:	1d25      	adds	r5, r4, #4
 800eb0c:	0028      	movs	r0, r5
 800eb0e:	f7fe ff16 	bl	800d93e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb14:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb16:	2207      	movs	r2, #7
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb1c:	4a0a      	ldr	r2, [pc, #40]	; (800eb48 <xTaskPriorityDisinherit+0x6c>)
 800eb1e:	6812      	ldr	r2, [r2, #0]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d901      	bls.n	800eb28 <xTaskPriorityDisinherit+0x4c>
 800eb24:	4a08      	ldr	r2, [pc, #32]	; (800eb48 <xTaskPriorityDisinherit+0x6c>)
 800eb26:	6013      	str	r3, [r2, #0]
 800eb28:	2014      	movs	r0, #20
 800eb2a:	4358      	muls	r0, r3
 800eb2c:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <xTaskPriorityDisinherit+0x70>)
 800eb2e:	18c0      	adds	r0, r0, r3
 800eb30:	0029      	movs	r1, r5
 800eb32:	f7fe fee1 	bl	800d8f8 <vListInsertEnd>
					xReturn = pdTRUE;
 800eb36:	2001      	movs	r0, #1
 800eb38:	e000      	b.n	800eb3c <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800eb3a:	2000      	movs	r0, #0
	}
 800eb3c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800eb3e:	2000      	movs	r0, #0
 800eb40:	e7fc      	b.n	800eb3c <xTaskPriorityDisinherit+0x60>
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	20001bf0 	.word	0x20001bf0
 800eb48:	20001ca0 	.word	0x20001ca0
 800eb4c:	20001bfc 	.word	0x20001bfc

0800eb50 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb52:	b085      	sub	sp, #20
 800eb54:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eb56:	2300      	movs	r3, #0
 800eb58:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eb5a:	4b2b      	ldr	r3, [pc, #172]	; (800ec08 <vTaskList+0xb8>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	0140      	lsls	r0, r0, #5
 800eb64:	f000 fc2e 	bl	800f3c4 <pvPortMalloc>
 800eb68:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800eb6a:	d04a      	beq.n	800ec02 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800eb6c:	9903      	ldr	r1, [sp, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f7ff fdca 	bl	800e708 <uxTaskGetSystemState>
 800eb74:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800eb76:	2300      	movs	r3, #0
 800eb78:	9302      	str	r3, [sp, #8]
 800eb7a:	9a02      	ldr	r2, [sp, #8]
 800eb7c:	9b03      	ldr	r3, [sp, #12]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d23c      	bcs.n	800ebfc <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800eb82:	4e22      	ldr	r6, [pc, #136]	; (800ec0c <vTaskList+0xbc>)
 800eb84:	e027      	b.n	800ebd6 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800eb86:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d133      	bne.n	800ebf4 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	015b      	lsls	r3, r3, #5
 800eb90:	18fb      	adds	r3, r7, r3
 800eb92:	6859      	ldr	r1, [r3, #4]
 800eb94:	0020      	movs	r0, r4
 800eb96:	f7ff fab1 	bl	800e0fc <prvWriteNameToBuffer>
 800eb9a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800eb9c:	9b02      	ldr	r3, [sp, #8]
 800eb9e:	9a02      	ldr	r2, [sp, #8]
 800eba0:	9902      	ldr	r1, [sp, #8]
 800eba2:	015b      	lsls	r3, r3, #5
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	0149      	lsls	r1, r1, #5
 800ebaa:	1879      	adds	r1, r7, r1
 800ebac:	6889      	ldr	r1, [r1, #8]
 800ebae:	9101      	str	r1, [sp, #4]
 800ebb0:	0152      	lsls	r2, r2, #5
 800ebb2:	18ba      	adds	r2, r7, r2
 800ebb4:	8b92      	ldrh	r2, [r2, #28]
 800ebb6:	9200      	str	r2, [sp, #0]
 800ebb8:	002a      	movs	r2, r5
 800ebba:	0031      	movs	r1, r6
 800ebbc:	f004 fb1a 	bl	80131f4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ebc0:	0020      	movs	r0, r4
 800ebc2:	f7f1 faa9 	bl	8000118 <strlen>
 800ebc6:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ebc8:	9b02      	ldr	r3, [sp, #8]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	9302      	str	r3, [sp, #8]
 800ebce:	9a02      	ldr	r2, [sp, #8]
 800ebd0:	9b03      	ldr	r3, [sp, #12]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d212      	bcs.n	800ebfc <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebd6:	9b02      	ldr	r3, [sp, #8]
 800ebd8:	015b      	lsls	r3, r3, #5
 800ebda:	18fb      	adds	r3, r7, r3
 800ebdc:	7b1b      	ldrb	r3, [r3, #12]
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d00a      	beq.n	800ebf8 <vTaskList+0xa8>
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	2a02      	cmp	r2, #2
 800ebe6:	d9ce      	bls.n	800eb86 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ebe8:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d0ce      	beq.n	800eb8c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ebee:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d0cb      	beq.n	800eb8c <vTaskList+0x3c>
										cStatus = 0x00;
 800ebf4:	2500      	movs	r5, #0
										break;
 800ebf6:	e7c9      	b.n	800eb8c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ebf8:	2542      	movs	r5, #66	; 0x42
 800ebfa:	e7c7      	b.n	800eb8c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ebfc:	0038      	movs	r0, r7
 800ebfe:	f000 fc77 	bl	800f4f0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec02:	b005      	add	sp, #20
 800ec04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec06:	46c0      	nop			; (mov r8, r8)
 800ec08:	20001c8c 	.word	0x20001c8c
 800ec0c:	0801a4e8 	.word	0x0801a4e8

0800ec10 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec16:	2300      	movs	r3, #0
 800ec18:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec1a:	4b26      	ldr	r3, [pc, #152]	; (800ecb4 <vTaskGetRunTimeStats+0xa4>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	0140      	lsls	r0, r0, #5
 800ec24:	f000 fbce 	bl	800f3c4 <pvPortMalloc>
 800ec28:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec2a:	d014      	beq.n	800ec56 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec2c:	9903      	ldr	r1, [sp, #12]
 800ec2e:	aa01      	add	r2, sp, #4
 800ec30:	f7ff fd6a 	bl	800e708 <uxTaskGetSystemState>
 800ec34:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec36:	2164      	movs	r1, #100	; 0x64
 800ec38:	9801      	ldr	r0, [sp, #4]
 800ec3a:	f7f1 fa89 	bl	8000150 <__udivsi3>
 800ec3e:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d005      	beq.n	800ec50 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec44:	2300      	movs	r3, #0
 800ec46:	9302      	str	r3, [sp, #8]
 800ec48:	9a02      	ldr	r2, [sp, #8]
 800ec4a:	9b03      	ldr	r3, [sp, #12]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d316      	bcc.n	800ec7e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec50:	0030      	movs	r0, r6
 800ec52:	f000 fc4d 	bl	800f4f0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec56:	b004      	add	sp, #16
 800ec58:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ec5a:	9b02      	ldr	r3, [sp, #8]
 800ec5c:	015b      	lsls	r3, r3, #5
 800ec5e:	18f3      	adds	r3, r6, r3
 800ec60:	699a      	ldr	r2, [r3, #24]
 800ec62:	4915      	ldr	r1, [pc, #84]	; (800ecb8 <vTaskGetRunTimeStats+0xa8>)
 800ec64:	f004 fac6 	bl	80131f4 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ec68:	0020      	movs	r0, r4
 800ec6a:	f7f1 fa55 	bl	8000118 <strlen>
 800ec6e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	3301      	adds	r3, #1
 800ec74:	9302      	str	r3, [sp, #8]
 800ec76:	9a02      	ldr	r2, [sp, #8]
 800ec78:	9b03      	ldr	r3, [sp, #12]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d2e8      	bcs.n	800ec50 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ec7e:	9b02      	ldr	r3, [sp, #8]
 800ec80:	015b      	lsls	r3, r3, #5
 800ec82:	18f3      	adds	r3, r6, r3
 800ec84:	9901      	ldr	r1, [sp, #4]
 800ec86:	6998      	ldr	r0, [r3, #24]
 800ec88:	f7f1 fa62 	bl	8000150 <__udivsi3>
 800ec8c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ec8e:	9b02      	ldr	r3, [sp, #8]
 800ec90:	015b      	lsls	r3, r3, #5
 800ec92:	18f3      	adds	r3, r6, r3
 800ec94:	6859      	ldr	r1, [r3, #4]
 800ec96:	0020      	movs	r0, r4
 800ec98:	f7ff fa30 	bl	800e0fc <prvWriteNameToBuffer>
 800ec9c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ec9e:	2d00      	cmp	r5, #0
 800eca0:	d0db      	beq.n	800ec5a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eca2:	9b02      	ldr	r3, [sp, #8]
 800eca4:	015b      	lsls	r3, r3, #5
 800eca6:	18f3      	adds	r3, r6, r3
 800eca8:	699a      	ldr	r2, [r3, #24]
 800ecaa:	002b      	movs	r3, r5
 800ecac:	4903      	ldr	r1, [pc, #12]	; (800ecbc <vTaskGetRunTimeStats+0xac>)
 800ecae:	f004 faa1 	bl	80131f4 <sprintf>
 800ecb2:	e7d9      	b.n	800ec68 <vTaskGetRunTimeStats+0x58>
 800ecb4:	20001c8c 	.word	0x20001c8c
 800ecb8:	0801a4dc 	.word	0x0801a4dc
 800ecbc:	0801a4d0 	.word	0x0801a4d0

0800ecc0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecc0:	4b05      	ldr	r3, [pc, #20]	; (800ecd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d004      	beq.n	800ecd2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecc8:	4b03      	ldr	r3, [pc, #12]	; (800ecd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ecd2:	4b01      	ldr	r3, [pc, #4]	; (800ecd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800ecd4:	6818      	ldr	r0, [r3, #0]
	}
 800ecd6:	4770      	bx	lr
 800ecd8:	20001bf0 	.word	0x20001bf0

0800ecdc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	0005      	movs	r5, r0
 800ece0:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ece2:	f000 faed 	bl	800f2c0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ece6:	4b20      	ldr	r3, [pc, #128]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ecf0:	4b1d      	ldr	r3, [pc, #116]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	235c      	movs	r3, #92	; 0x5c
 800ecf6:	2101      	movs	r1, #1
 800ecf8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ecfa:	2c00      	cmp	r4, #0
 800ecfc:	d118      	bne.n	800ed30 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ecfe:	f000 faeb 	bl	800f2d8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed02:	f000 fadd 	bl	800f2c0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed06:	4b18      	ldr	r3, [pc, #96]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ed0c:	2c00      	cmp	r4, #0
 800ed0e:	d006      	beq.n	800ed1e <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed10:	2d00      	cmp	r5, #0
 800ed12:	d123      	bne.n	800ed5c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ed14:	4b14      	ldr	r3, [pc, #80]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ed1e:	4b12      	ldr	r3, [pc, #72]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	235c      	movs	r3, #92	; 0x5c
 800ed24:	2100      	movs	r1, #0
 800ed26:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ed28:	f000 fad6 	bl	800f2d8 <vPortExitCritical>

		return ulReturn;
	}
 800ed2c:	0020      	movs	r0, r4
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed30:	4b0d      	ldr	r3, [pc, #52]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed32:	6818      	ldr	r0, [r3, #0]
 800ed34:	3004      	adds	r0, #4
 800ed36:	f7fe fe02 	bl	800d93e <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ed3a:	1c63      	adds	r3, r4, #1
 800ed3c:	d007      	beq.n	800ed4e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800ed3e:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <ulTaskNotifyTake+0x90>)
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed44:	f7ff f9b0 	bl	800e0a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ed48:	f000 faae 	bl	800f2a8 <vPortYield>
 800ed4c:	e7d7      	b.n	800ecfe <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed4e:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed50:	6819      	ldr	r1, [r3, #0]
 800ed52:	3104      	adds	r1, #4
 800ed54:	4806      	ldr	r0, [pc, #24]	; (800ed70 <ulTaskNotifyTake+0x94>)
 800ed56:	f7fe fdcf 	bl	800d8f8 <vListInsertEnd>
 800ed5a:	e7f5      	b.n	800ed48 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed5c:	4b02      	ldr	r3, [pc, #8]	; (800ed68 <ulTaskNotifyTake+0x8c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2200      	movs	r2, #0
 800ed62:	659a      	str	r2, [r3, #88]	; 0x58
 800ed64:	e7db      	b.n	800ed1e <ulTaskNotifyTake+0x42>
 800ed66:	46c0      	nop			; (mov r8, r8)
 800ed68:	20001bf0 	.word	0x20001bf0
 800ed6c:	20001d10 	.word	0x20001d10
 800ed70:	20001ce8 	.word	0x20001ce8

0800ed74 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	0004      	movs	r4, r0
 800ed78:	000e      	movs	r6, r1
 800ed7a:	0015      	movs	r5, r2
 800ed7c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d101      	bne.n	800ed86 <xTaskGenericNotify+0x12>
 800ed82:	b672      	cpsid	i
 800ed84:	e7fe      	b.n	800ed84 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ed86:	f000 fa9b 	bl	800f2c0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ed8a:	2f00      	cmp	r7, #0
 800ed8c:	d001      	beq.n	800ed92 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ed8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed90:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ed92:	225c      	movs	r2, #92	; 0x5c
 800ed94:	5ca3      	ldrb	r3, [r4, r2]
 800ed96:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800ed98:	2102      	movs	r1, #2
 800ed9a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800ed9c:	2d02      	cmp	r5, #2
 800ed9e:	d015      	beq.n	800edcc <xTaskGenericNotify+0x58>
 800eda0:	d907      	bls.n	800edb2 <xTaskGenericNotify+0x3e>
 800eda2:	2d03      	cmp	r5, #3
 800eda4:	d016      	beq.n	800edd4 <xTaskGenericNotify+0x60>
 800eda6:	2d04      	cmp	r5, #4
 800eda8:	d105      	bne.n	800edb6 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d035      	beq.n	800ee1a <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800edae:	65a6      	str	r6, [r4, #88]	; 0x58
 800edb0:	e001      	b.n	800edb6 <xTaskGenericNotify+0x42>
			switch( eAction )
 800edb2:	2d01      	cmp	r5, #1
 800edb4:	d006      	beq.n	800edc4 <xTaskGenericNotify+0x50>
 800edb6:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d00d      	beq.n	800edd8 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edbc:	f000 fa8c 	bl	800f2d8 <vPortExitCritical>

		return xReturn;
	}
 800edc0:	0028      	movs	r0, r5
 800edc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800edc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edc6:	4316      	orrs	r6, r2
 800edc8:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800edca:	e7f4      	b.n	800edb6 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800edcc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edce:	3201      	adds	r2, #1
 800edd0:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800edd2:	e7f0      	b.n	800edb6 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800edd4:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800edd6:	e7ee      	b.n	800edb6 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edd8:	1d25      	adds	r5, r4, #4
 800edda:	0028      	movs	r0, r5
 800eddc:	f7fe fdaf 	bl	800d93e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ede0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ede2:	4a0f      	ldr	r2, [pc, #60]	; (800ee20 <xTaskGenericNotify+0xac>)
 800ede4:	6812      	ldr	r2, [r2, #0]
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d901      	bls.n	800edee <xTaskGenericNotify+0x7a>
 800edea:	4a0d      	ldr	r2, [pc, #52]	; (800ee20 <xTaskGenericNotify+0xac>)
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	2014      	movs	r0, #20
 800edf0:	4358      	muls	r0, r3
 800edf2:	4b0c      	ldr	r3, [pc, #48]	; (800ee24 <xTaskGenericNotify+0xb0>)
 800edf4:	18c0      	adds	r0, r0, r3
 800edf6:	0029      	movs	r1, r5
 800edf8:	f7fe fd7e 	bl	800d8f8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800edfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <xTaskGenericNotify+0x92>
 800ee02:	b672      	cpsid	i
 800ee04:	e7fe      	b.n	800ee04 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee06:	4b08      	ldr	r3, [pc, #32]	; (800ee28 <xTaskGenericNotify+0xb4>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	2501      	movs	r5, #1
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d9d3      	bls.n	800edbc <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800ee14:	f000 fa48 	bl	800f2a8 <vPortYield>
 800ee18:	e7d0      	b.n	800edbc <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800ee1a:	2500      	movs	r5, #0
 800ee1c:	e7ce      	b.n	800edbc <xTaskGenericNotify+0x48>
 800ee1e:	46c0      	nop			; (mov r8, r8)
 800ee20:	20001ca0 	.word	0x20001ca0
 800ee24:	20001bfc 	.word	0x20001bfc
 800ee28:	20001bf0 	.word	0x20001bf0

0800ee2c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee2c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee2e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee30:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ee32:	4291      	cmp	r1, r2
 800ee34:	d80b      	bhi.n	800ee4e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee36:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee38:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee3a:	6983      	ldr	r3, [r0, #24]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d211      	bcs.n	800ee64 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee40:	1d01      	adds	r1, r0, #4
 800ee42:	4b09      	ldr	r3, [pc, #36]	; (800ee68 <prvInsertTimerInActiveList+0x3c>)
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	f7fe fd63 	bl	800d910 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ee4a:	2400      	movs	r4, #0
 800ee4c:	e00a      	b.n	800ee64 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d202      	bcs.n	800ee58 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee52:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee54:	4299      	cmp	r1, r3
 800ee56:	d205      	bcs.n	800ee64 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee58:	1d01      	adds	r1, r0, #4
 800ee5a:	4b04      	ldr	r3, [pc, #16]	; (800ee6c <prvInsertTimerInActiveList+0x40>)
 800ee5c:	6818      	ldr	r0, [r3, #0]
 800ee5e:	f7fe fd57 	bl	800d910 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ee62:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800ee64:	0020      	movs	r0, r4
 800ee66:	bd10      	pop	{r4, pc}
 800ee68:	20001d1c 	.word	0x20001d1c
 800ee6c:	20001d18 	.word	0x20001d18

0800ee70 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee70:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee72:	f000 fa25 	bl	800f2c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee76:	4b11      	ldr	r3, [pc, #68]	; (800eebc <prvCheckForValidListAndQueue+0x4c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee7e:	f000 fa2b 	bl	800f2d8 <vPortExitCritical>
}
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800ee84:	4d0e      	ldr	r5, [pc, #56]	; (800eec0 <prvCheckForValidListAndQueue+0x50>)
 800ee86:	0028      	movs	r0, r5
 800ee88:	f7fe fd28 	bl	800d8dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee8c:	4c0d      	ldr	r4, [pc, #52]	; (800eec4 <prvCheckForValidListAndQueue+0x54>)
 800ee8e:	0020      	movs	r0, r4
 800ee90:	f7fe fd24 	bl	800d8dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee94:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <prvCheckForValidListAndQueue+0x58>)
 800ee96:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee98:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <prvCheckForValidListAndQueue+0x5c>)
 800ee9a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2110      	movs	r1, #16
 800eea0:	2004      	movs	r0, #4
 800eea2:	f7fe fe26 	bl	800daf2 <xQueueGenericCreate>
 800eea6:	4b05      	ldr	r3, [pc, #20]	; (800eebc <prvCheckForValidListAndQueue+0x4c>)
 800eea8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d101      	bne.n	800eeb2 <prvCheckForValidListAndQueue+0x42>
 800eeae:	b672      	cpsid	i
 800eeb0:	e7fe      	b.n	800eeb0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eeb2:	4907      	ldr	r1, [pc, #28]	; (800eed0 <prvCheckForValidListAndQueue+0x60>)
 800eeb4:	f7ff f856 	bl	800df64 <vQueueAddToRegistry>
 800eeb8:	e7e1      	b.n	800ee7e <prvCheckForValidListAndQueue+0xe>
 800eeba:	46c0      	nop			; (mov r8, r8)
 800eebc:	20001d4c 	.word	0x20001d4c
 800eec0:	20001d20 	.word	0x20001d20
 800eec4:	20001d34 	.word	0x20001d34
 800eec8:	20001d18 	.word	0x20001d18
 800eecc:	20001d1c 	.word	0x20001d1c
 800eed0:	0801a528 	.word	0x0801a528

0800eed4 <xTimerCreateTimerTask>:
{
 800eed4:	b500      	push	{lr}
 800eed6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800eed8:	f7ff ffca 	bl	800ee70 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eedc:	4b0a      	ldr	r3, [pc, #40]	; (800ef08 <xTimerCreateTimerTask+0x34>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00d      	beq.n	800ef00 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800eee4:	2300      	movs	r3, #0
 800eee6:	9303      	str	r3, [sp, #12]
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	3303      	adds	r3, #3
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	2300      	movs	r3, #0
 800eef2:	22a0      	movs	r2, #160	; 0xa0
 800eef4:	4905      	ldr	r1, [pc, #20]	; (800ef0c <xTimerCreateTimerTask+0x38>)
 800eef6:	4806      	ldr	r0, [pc, #24]	; (800ef10 <xTimerCreateTimerTask+0x3c>)
 800eef8:	f7ff f918 	bl	800e12c <xTaskGenericCreate>
	configASSERT( xReturn );
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d101      	bne.n	800ef04 <xTimerCreateTimerTask+0x30>
 800ef00:	b672      	cpsid	i
 800ef02:	e7fe      	b.n	800ef02 <xTimerCreateTimerTask+0x2e>
}
 800ef04:	b005      	add	sp, #20
 800ef06:	bd00      	pop	{pc}
 800ef08:	20001d4c 	.word	0x20001d4c
 800ef0c:	0801a530 	.word	0x0801a530
 800ef10:	0800f05d 	.word	0x0800f05d

0800ef14 <xTimerCreate>:
{
 800ef14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef16:	46c6      	mov	lr, r8
 800ef18:	b500      	push	{lr}
 800ef1a:	4680      	mov	r8, r0
 800ef1c:	000d      	movs	r5, r1
 800ef1e:	0017      	movs	r7, r2
 800ef20:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800ef22:	2900      	cmp	r1, #0
 800ef24:	d014      	beq.n	800ef50 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ef26:	202c      	movs	r0, #44	; 0x2c
 800ef28:	f000 fa4c 	bl	800f3c4 <pvPortMalloc>
 800ef2c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ef2e:	d00b      	beq.n	800ef48 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ef30:	f7ff ff9e 	bl	800ee70 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ef34:	4643      	mov	r3, r8
 800ef36:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef38:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ef3a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ef3c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef3e:	9b06      	ldr	r3, [sp, #24]
 800ef40:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef42:	1d20      	adds	r0, r4, #4
 800ef44:	f7fe fcd5 	bl	800d8f2 <vListInitialiseItem>
}
 800ef48:	0020      	movs	r0, r4
 800ef4a:	bc04      	pop	{r2}
 800ef4c:	4690      	mov	r8, r2
 800ef4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef50:	b672      	cpsid	i
 800ef52:	e7fe      	b.n	800ef52 <xTimerCreate+0x3e>

0800ef54 <xTimerGenericCommand>:
{
 800ef54:	b530      	push	{r4, r5, lr}
 800ef56:	b085      	sub	sp, #20
 800ef58:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800ef5a:	4b13      	ldr	r3, [pc, #76]	; (800efa8 <xTimerGenericCommand+0x54>)
 800ef5c:	681c      	ldr	r4, [r3, #0]
 800ef5e:	2c00      	cmp	r4, #0
 800ef60:	d020      	beq.n	800efa4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800ef62:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef64:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ef66:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef68:	2905      	cmp	r1, #5
 800ef6a:	dc13      	bgt.n	800ef94 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef6c:	f7ff fd68 	bl	800ea40 <xTaskGetSchedulerState>
 800ef70:	2802      	cmp	r0, #2
 800ef72:	d007      	beq.n	800ef84 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef74:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <xTimerGenericCommand+0x54>)
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4669      	mov	r1, sp
 800ef7e:	f7fe fdf3 	bl	800db68 <xQueueGenericSend>
 800ef82:	e00d      	b.n	800efa0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef84:	4b08      	ldr	r3, [pc, #32]	; (800efa8 <xTimerGenericCommand+0x54>)
 800ef86:	6818      	ldr	r0, [r3, #0]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	9a08      	ldr	r2, [sp, #32]
 800ef8c:	4669      	mov	r1, sp
 800ef8e:	f7fe fdeb 	bl	800db68 <xQueueGenericSend>
 800ef92:	e005      	b.n	800efa0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef94:	2300      	movs	r3, #0
 800ef96:	002a      	movs	r2, r5
 800ef98:	4669      	mov	r1, sp
 800ef9a:	0020      	movs	r0, r4
 800ef9c:	f7fe fe7b 	bl	800dc96 <xQueueGenericSendFromISR>
}
 800efa0:	b005      	add	sp, #20
 800efa2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800efa4:	2000      	movs	r0, #0
	return xReturn;
 800efa6:	e7fb      	b.n	800efa0 <xTimerGenericCommand+0x4c>
 800efa8:	20001d4c 	.word	0x20001d4c

0800efac <prvSampleTimeNow>:
{
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	46d6      	mov	lr, sl
 800efb0:	464f      	mov	r7, r9
 800efb2:	4646      	mov	r6, r8
 800efb4:	b5c0      	push	{r6, r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800efba:	f7ff fa43 	bl	800e444 <xTaskGetTickCount>
 800efbe:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800efc0:	4b23      	ldr	r3, [pc, #140]	; (800f050 <prvSampleTimeNow+0xa4>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4283      	cmp	r3, r0
 800efc6:	d80b      	bhi.n	800efe0 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800efc8:	2300      	movs	r3, #0
 800efca:	4642      	mov	r2, r8
 800efcc:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800efce:	4b20      	ldr	r3, [pc, #128]	; (800f050 <prvSampleTimeNow+0xa4>)
 800efd0:	601f      	str	r7, [r3, #0]
}
 800efd2:	0038      	movs	r0, r7
 800efd4:	b004      	add	sp, #16
 800efd6:	bc1c      	pop	{r2, r3, r4}
 800efd8:	4690      	mov	r8, r2
 800efda:	4699      	mov	r9, r3
 800efdc:	46a2      	mov	sl, r4
 800efde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efe0:	4e1c      	ldr	r6, [pc, #112]	; (800f054 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efe2:	2300      	movs	r3, #0
 800efe4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efe6:	6833      	ldr	r3, [r6, #0]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	2a00      	cmp	r2, #0
 800efec:	d026      	beq.n	800f03c <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eff4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eff6:	1d25      	adds	r5, r4, #4
 800eff8:	0028      	movs	r0, r5
 800effa:	f7fe fca0 	bl	800d93e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800effe:	0020      	movs	r0, r4
 800f000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f002:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f004:	69e3      	ldr	r3, [r4, #28]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d1ed      	bne.n	800efe6 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f00a:	69a3      	ldr	r3, [r4, #24]
 800f00c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f00e:	459a      	cmp	sl, r3
 800f010:	d209      	bcs.n	800f026 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f012:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f014:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f016:	4b0f      	ldr	r3, [pc, #60]	; (800f054 <prvSampleTimeNow+0xa8>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	9303      	str	r3, [sp, #12]
 800f01c:	0029      	movs	r1, r5
 800f01e:	0018      	movs	r0, r3
 800f020:	f7fe fc76 	bl	800d910 <vListInsert>
 800f024:	e7df      	b.n	800efe6 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f026:	464b      	mov	r3, r9
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	4652      	mov	r2, sl
 800f02c:	4649      	mov	r1, r9
 800f02e:	0020      	movs	r0, r4
 800f030:	f7ff ff90 	bl	800ef54 <xTimerGenericCommand>
				configASSERT( xResult );
 800f034:	2800      	cmp	r0, #0
 800f036:	d1d6      	bne.n	800efe6 <prvSampleTimeNow+0x3a>
 800f038:	b672      	cpsid	i
 800f03a:	e7fe      	b.n	800f03a <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f03c:	4a06      	ldr	r2, [pc, #24]	; (800f058 <prvSampleTimeNow+0xac>)
 800f03e:	4905      	ldr	r1, [pc, #20]	; (800f054 <prvSampleTimeNow+0xa8>)
 800f040:	6810      	ldr	r0, [r2, #0]
 800f042:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f044:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f046:	2301      	movs	r3, #1
 800f048:	4642      	mov	r2, r8
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	e7bf      	b.n	800efce <prvSampleTimeNow+0x22>
 800f04e:	46c0      	nop			; (mov r8, r8)
 800f050:	20001d48 	.word	0x20001d48
 800f054:	20001d18 	.word	0x20001d18
 800f058:	20001d1c 	.word	0x20001d1c

0800f05c <prvTimerTask>:
{
 800f05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f05e:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f060:	4e57      	ldr	r6, [pc, #348]	; (800f1c0 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f062:	4b58      	ldr	r3, [pc, #352]	; (800f1c4 <prvTimerTask+0x168>)
 800f064:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	2a00      	cmp	r2, #0
 800f06a:	d100      	bne.n	800f06e <prvTimerTask+0x12>
 800f06c:	e09c      	b.n	800f1a8 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f072:	f7ff f9df 	bl	800e434 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f076:	a808      	add	r0, sp, #32
 800f078:	f7ff ff98 	bl	800efac <prvSampleTimeNow>
 800f07c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f07e:	9b08      	ldr	r3, [sp, #32]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d000      	beq.n	800f086 <prvTimerTask+0x2a>
 800f084:	e099      	b.n	800f1ba <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f086:	42a0      	cmp	r0, r4
 800f088:	d233      	bcs.n	800f0f2 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f08a:	1b61      	subs	r1, r4, r5
 800f08c:	4b4e      	ldr	r3, [pc, #312]	; (800f1c8 <prvTimerTask+0x16c>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	f7fe ff80 	bl	800df94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f094:	f7ff fa6e 	bl	800e574 <xTaskResumeAll>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d050      	beq.n	800f13e <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f09c:	4c4a      	ldr	r4, [pc, #296]	; (800f1c8 <prvTimerTask+0x16c>)
 800f09e:	2300      	movs	r3, #0
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	a908      	add	r1, sp, #32
 800f0a4:	6820      	ldr	r0, [r4, #0]
 800f0a6:	f7fe fe78 	bl	800dd9a <xQueueGenericReceive>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d0d9      	beq.n	800f062 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f0ae:	9b08      	ldr	r3, [sp, #32]
 800f0b0:	9303      	str	r3, [sp, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	da0c      	bge.n	800f0d0 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0bc:	9304      	str	r3, [sp, #16]
 800f0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c0:	9305      	str	r3, [sp, #20]
 800f0c2:	9903      	ldr	r1, [sp, #12]
 800f0c4:	9804      	ldr	r0, [sp, #16]
 800f0c6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	9303      	str	r3, [sp, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	dbe6      	blt.n	800f09e <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f0d2:	696b      	ldr	r3, [r5, #20]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0d8:	1d28      	adds	r0, r5, #4
 800f0da:	f7fe fc30 	bl	800d93e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0de:	a807      	add	r0, sp, #28
 800f0e0:	f7ff ff64 	bl	800efac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f0e4:	9b08      	ldr	r3, [sp, #32]
 800f0e6:	9303      	str	r3, [sp, #12]
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	d8d8      	bhi.n	800f09e <prvTimerTask+0x42>
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	58f3      	ldr	r3, [r6, r3]
 800f0f0:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f0f2:	f7ff fa3f 	bl	800e574 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0f6:	4b33      	ldr	r3, [pc, #204]	; (800f1c4 <prvTimerTask+0x168>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0fe:	1d38      	adds	r0, r7, #4
 800f100:	f7fe fc1d 	bl	800d93e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d003      	beq.n	800f112 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	0038      	movs	r0, r7
 800f10e:	4798      	blx	r3
 800f110:	e7c4      	b.n	800f09c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	18e1      	adds	r1, r4, r3
 800f116:	0023      	movs	r3, r4
 800f118:	002a      	movs	r2, r5
 800f11a:	0038      	movs	r0, r7
 800f11c:	f7ff fe86 	bl	800ee2c <prvInsertTimerInActiveList>
 800f120:	2801      	cmp	r0, #1
 800f122:	d1f2      	bne.n	800f10a <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f124:	2100      	movs	r1, #0
 800f126:	9100      	str	r1, [sp, #0]
 800f128:	000b      	movs	r3, r1
 800f12a:	0022      	movs	r2, r4
 800f12c:	0038      	movs	r0, r7
 800f12e:	f7ff ff11 	bl	800ef54 <xTimerGenericCommand>
			configASSERT( xResult );
 800f132:	2800      	cmp	r0, #0
 800f134:	d1e9      	bne.n	800f10a <prvTimerTask+0xae>
 800f136:	b672      	cpsid	i
 800f138:	e7fe      	b.n	800f138 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f13a:	2400      	movs	r4, #0
 800f13c:	e7a5      	b.n	800f08a <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f13e:	f000 f8b3 	bl	800f2a8 <vPortYield>
 800f142:	e7ab      	b.n	800f09c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f146:	69aa      	ldr	r2, [r5, #24]
 800f148:	4694      	mov	ip, r2
 800f14a:	4463      	add	r3, ip
 800f14c:	0019      	movs	r1, r3
 800f14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f150:	0002      	movs	r2, r0
 800f152:	0028      	movs	r0, r5
 800f154:	f7ff fe6a 	bl	800ee2c <prvInsertTimerInActiveList>
 800f158:	2801      	cmp	r0, #1
 800f15a:	d1a0      	bne.n	800f09e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f15c:	0028      	movs	r0, r5
 800f15e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f160:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f162:	69eb      	ldr	r3, [r5, #28]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d19a      	bne.n	800f09e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16a:	69a9      	ldr	r1, [r5, #24]
 800f16c:	468c      	mov	ip, r1
 800f16e:	4463      	add	r3, ip
 800f170:	001a      	movs	r2, r3
 800f172:	2300      	movs	r3, #0
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	2100      	movs	r1, #0
 800f178:	0028      	movs	r0, r5
 800f17a:	f7ff feeb 	bl	800ef54 <xTimerGenericCommand>
							configASSERT( xResult );
 800f17e:	2800      	cmp	r0, #0
 800f180:	d18d      	bne.n	800f09e <prvTimerTask+0x42>
 800f182:	b672      	cpsid	i
 800f184:	e7fe      	b.n	800f184 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f186:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f188:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f18a:	2900      	cmp	r1, #0
 800f18c:	d006      	beq.n	800f19c <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f18e:	1841      	adds	r1, r0, r1
 800f190:	0003      	movs	r3, r0
 800f192:	0002      	movs	r2, r0
 800f194:	0028      	movs	r0, r5
 800f196:	f7ff fe49 	bl	800ee2c <prvInsertTimerInActiveList>
 800f19a:	e780      	b.n	800f09e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f19c:	b672      	cpsid	i
 800f19e:	e7fe      	b.n	800f19e <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f1a0:	0028      	movs	r0, r5
 800f1a2:	f000 f9a5 	bl	800f4f0 <vPortFree>
 800f1a6:	e77a      	b.n	800f09e <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f1a8:	f7ff f944 	bl	800e434 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ac:	a808      	add	r0, sp, #32
 800f1ae:	f7ff fefd 	bl	800efac <prvSampleTimeNow>
 800f1b2:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f1b4:	9b08      	ldr	r3, [sp, #32]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0bf      	beq.n	800f13a <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f1ba:	f7ff f9db 	bl	800e574 <xTaskResumeAll>
 800f1be:	e76d      	b.n	800f09c <prvTimerTask+0x40>
 800f1c0:	0801a500 	.word	0x0801a500
 800f1c4:	20001d18 	.word	0x20001d18
 800f1c8:	20001d4c 	.word	0x20001d4c

0800f1cc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f1d0:	f000 f876 	bl	800f2c0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f1d4:	6964      	ldr	r4, [r4, #20]
 800f1d6:	1e63      	subs	r3, r4, #1
 800f1d8:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
 800f1da:	f000 f87d 	bl	800f2d8 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f1de:	0020      	movs	r0, r4
 800f1e0:	bd10      	pop	{r4, pc}

0800f1e2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f1e2:	b510      	push	{r4, lr}
 800f1e4:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f1e6:	d101      	bne.n	800f1ec <pvTimerGetTimerID+0xa>
 800f1e8:	b672      	cpsid	i
 800f1ea:	e7fe      	b.n	800f1ea <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f1ec:	f000 f868 	bl	800f2c0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f1f0:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f1f2:	f000 f871 	bl	800f2d8 <vPortExitCritical>

	return pvReturn;
}
 800f1f6:	0020      	movs	r0, r4
 800f1f8:	bd10      	pop	{r4, pc}
	...

0800f1fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1fc:	4b03      	ldr	r3, [pc, #12]	; (800f20c <prvTaskExitError+0x10>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	3301      	adds	r3, #1
 800f202:	d001      	beq.n	800f208 <prvTaskExitError+0xc>
 800f204:	b672      	cpsid	i
 800f206:	e7fe      	b.n	800f206 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f208:	b672      	cpsid	i
 800f20a:	e7fe      	b.n	800f20a <prvTaskExitError+0xe>
 800f20c:	20000060 	.word	0x20000060

0800f210 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f210:	4a06      	ldr	r2, [pc, #24]	; (800f22c <pxCurrentTCBConst2>)
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	3020      	adds	r0, #32
 800f218:	f380 8809 	msr	PSP, r0
 800f21c:	2002      	movs	r0, #2
 800f21e:	f380 8814 	msr	CONTROL, r0
 800f222:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f224:	46ae      	mov	lr, r5
 800f226:	b662      	cpsie	i
 800f228:	bd00      	pop	{pc}
 800f22a:	46c0      	nop			; (mov r8, r8)

0800f22c <pxCurrentTCBConst2>:
 800f22c:	20001bf0 	.word	0x20001bf0

0800f230 <pxPortInitialiseStack>:
{
 800f230:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f232:	1f03      	subs	r3, r0, #4
 800f234:	2480      	movs	r4, #128	; 0x80
 800f236:	0464      	lsls	r4, r4, #17
 800f238:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f23a:	3b04      	subs	r3, #4
 800f23c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f23e:	3b04      	subs	r3, #4
 800f240:	4902      	ldr	r1, [pc, #8]	; (800f24c <pxPortInitialiseStack+0x1c>)
 800f242:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f244:	3b14      	subs	r3, #20
 800f246:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f248:	3840      	subs	r0, #64	; 0x40
}
 800f24a:	bd10      	pop	{r4, pc}
 800f24c:	0800f1fd 	.word	0x0800f1fd

0800f250 <SVC_Handler>:
}
 800f250:	4770      	bx	lr
	...

0800f254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f254:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f256:	4b0f      	ldr	r3, [pc, #60]	; (800f294 <xPortStartScheduler+0x40>)
 800f258:	6819      	ldr	r1, [r3, #0]
 800f25a:	22ff      	movs	r2, #255	; 0xff
 800f25c:	0412      	lsls	r2, r2, #16
 800f25e:	430a      	orrs	r2, r1
 800f260:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f262:	6819      	ldr	r1, [r3, #0]
 800f264:	22ff      	movs	r2, #255	; 0xff
 800f266:	0612      	lsls	r2, r2, #24
 800f268:	430a      	orrs	r2, r1
 800f26a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f26c:	4b0a      	ldr	r3, [pc, #40]	; (800f298 <xPortStartScheduler+0x44>)
 800f26e:	6818      	ldr	r0, [r3, #0]
 800f270:	21fa      	movs	r1, #250	; 0xfa
 800f272:	0089      	lsls	r1, r1, #2
 800f274:	f7f0 ff6c 	bl	8000150 <__udivsi3>
 800f278:	3801      	subs	r0, #1
 800f27a:	4b08      	ldr	r3, [pc, #32]	; (800f29c <xPortStartScheduler+0x48>)
 800f27c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f27e:	4b08      	ldr	r3, [pc, #32]	; (800f2a0 <xPortStartScheduler+0x4c>)
 800f280:	2207      	movs	r2, #7
 800f282:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f284:	4b07      	ldr	r3, [pc, #28]	; (800f2a4 <xPortStartScheduler+0x50>)
 800f286:	2200      	movs	r2, #0
 800f288:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f28a:	f7ff ffc1 	bl	800f210 <vPortStartFirstTask>
	prvTaskExitError();
 800f28e:	f7ff ffb5 	bl	800f1fc <prvTaskExitError>
 800f292:	46c0      	nop			; (mov r8, r8)
 800f294:	e000ed20 	.word	0xe000ed20
 800f298:	2000004c 	.word	0x2000004c
 800f29c:	e000e014 	.word	0xe000e014
 800f2a0:	e000e010 	.word	0xe000e010
 800f2a4:	20000060 	.word	0x20000060

0800f2a8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f2a8:	4b04      	ldr	r3, [pc, #16]	; (800f2bc <vPortYield+0x14>)
 800f2aa:	2280      	movs	r2, #128	; 0x80
 800f2ac:	0552      	lsls	r2, r2, #21
 800f2ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f2b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f2b4:	f3bf 8f6f 	isb	sy
}
 800f2b8:	4770      	bx	lr
 800f2ba:	46c0      	nop			; (mov r8, r8)
 800f2bc:	e000ed04 	.word	0xe000ed04

0800f2c0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f2c0:	b672      	cpsid	i
    uxCriticalNesting++;
 800f2c2:	4a04      	ldr	r2, [pc, #16]	; (800f2d4 <vPortEnterCritical+0x14>)
 800f2c4:	6813      	ldr	r3, [r2, #0]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f2ca:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f2ce:	f3bf 8f6f 	isb	sy
}
 800f2d2:	4770      	bx	lr
 800f2d4:	20000060 	.word	0x20000060

0800f2d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f2d8:	4b06      	ldr	r3, [pc, #24]	; (800f2f4 <vPortExitCritical+0x1c>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <vPortExitCritical+0xc>
 800f2e0:	b672      	cpsid	i
 800f2e2:	e7fe      	b.n	800f2e2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	4a03      	ldr	r2, [pc, #12]	; (800f2f4 <vPortExitCritical+0x1c>)
 800f2e8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d100      	bne.n	800f2f0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f2ee:	b662      	cpsie	i
}
 800f2f0:	4770      	bx	lr
 800f2f2:	46c0      	nop			; (mov r8, r8)
 800f2f4:	20000060 	.word	0x20000060

0800f2f8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f2f8:	f3ef 8010 	mrs	r0, PRIMASK
 800f2fc:	b672      	cpsid	i
 800f2fe:	4770      	bx	lr
}
 800f300:	2000      	movs	r0, #0

0800f302 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f302:	f380 8810 	msr	PRIMASK, r0
 800f306:	4770      	bx	lr

0800f308 <PendSV_Handler>:
	__asm volatile
 800f308:	f3ef 8009 	mrs	r0, PSP
 800f30c:	4b0e      	ldr	r3, [pc, #56]	; (800f348 <pxCurrentTCBConst>)
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	3820      	subs	r0, #32
 800f312:	6010      	str	r0, [r2, #0]
 800f314:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f316:	4644      	mov	r4, r8
 800f318:	464d      	mov	r5, r9
 800f31a:	4656      	mov	r6, sl
 800f31c:	465f      	mov	r7, fp
 800f31e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f320:	b508      	push	{r3, lr}
 800f322:	b672      	cpsid	i
 800f324:	f7ff fa42 	bl	800e7ac <vTaskSwitchContext>
 800f328:	b662      	cpsie	i
 800f32a:	bc0c      	pop	{r2, r3}
 800f32c:	6811      	ldr	r1, [r2, #0]
 800f32e:	6808      	ldr	r0, [r1, #0]
 800f330:	3010      	adds	r0, #16
 800f332:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f334:	46a0      	mov	r8, r4
 800f336:	46a9      	mov	r9, r5
 800f338:	46b2      	mov	sl, r6
 800f33a:	46bb      	mov	fp, r7
 800f33c:	f380 8809 	msr	PSP, r0
 800f340:	3820      	subs	r0, #32
 800f342:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f344:	4718      	bx	r3
 800f346:	46c0      	nop			; (mov r8, r8)

0800f348 <pxCurrentTCBConst>:
 800f348:	20001bf0 	.word	0x20001bf0

0800f34c <xPortSysTickHandler>:
{
 800f34c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f34e:	f7ff ffd3 	bl	800f2f8 <ulSetInterruptMaskFromISR>
 800f352:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f354:	f7ff f882 	bl	800e45c <xTaskIncrementTick>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d003      	beq.n	800f364 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f35c:	4b03      	ldr	r3, [pc, #12]	; (800f36c <xPortSysTickHandler+0x20>)
 800f35e:	2280      	movs	r2, #128	; 0x80
 800f360:	0552      	lsls	r2, r2, #21
 800f362:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f364:	0020      	movs	r0, r4
 800f366:	f7ff ffcc 	bl	800f302 <vClearInterruptMaskFromISR>
}
 800f36a:	bd10      	pop	{r4, pc}
 800f36c:	e000ed04 	.word	0xe000ed04

0800f370 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f370:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f372:	4b12      	ldr	r3, [pc, #72]	; (800f3bc <prvInsertBlockIntoFreeList+0x4c>)
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	4282      	cmp	r2, r0
 800f378:	d319      	bcc.n	800f3ae <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f37a:	685c      	ldr	r4, [r3, #4]
 800f37c:	1919      	adds	r1, r3, r4
 800f37e:	4288      	cmp	r0, r1
 800f380:	d103      	bne.n	800f38a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f382:	6841      	ldr	r1, [r0, #4]
 800f384:	1909      	adds	r1, r1, r4
 800f386:	6059      	str	r1, [r3, #4]
 800f388:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f38a:	6841      	ldr	r1, [r0, #4]
 800f38c:	1844      	adds	r4, r0, r1
 800f38e:	42a2      	cmp	r2, r4
 800f390:	d111      	bne.n	800f3b6 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f392:	4c0b      	ldr	r4, [pc, #44]	; (800f3c0 <prvInsertBlockIntoFreeList+0x50>)
 800f394:	6824      	ldr	r4, [r4, #0]
 800f396:	42a2      	cmp	r2, r4
 800f398:	d00b      	beq.n	800f3b2 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f39a:	6852      	ldr	r2, [r2, #4]
 800f39c:	1852      	adds	r2, r2, r1
 800f39e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	6812      	ldr	r2, [r2, #0]
 800f3a4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3a6:	4298      	cmp	r0, r3
 800f3a8:	d000      	beq.n	800f3ac <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3aa:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3ac:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3ae:	0013      	movs	r3, r2
 800f3b0:	e7e0      	b.n	800f374 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3b2:	6002      	str	r2, [r0, #0]
 800f3b4:	e7f7      	b.n	800f3a6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3b6:	6002      	str	r2, [r0, #0]
 800f3b8:	e7f5      	b.n	800f3a6 <prvInsertBlockIntoFreeList+0x36>
 800f3ba:	46c0      	nop			; (mov r8, r8)
 800f3bc:	20006798 	.word	0x20006798
 800f3c0:	20001d50 	.word	0x20001d50

0800f3c4 <pvPortMalloc>:
{
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f3c8:	f7ff f834 	bl	800e434 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f3cc:	4b41      	ldr	r3, [pc, #260]	; (800f4d4 <pvPortMalloc+0x110>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00a      	beq.n	800f3ea <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3d4:	4b40      	ldr	r3, [pc, #256]	; (800f4d8 <pvPortMalloc+0x114>)
 800f3d6:	681f      	ldr	r7, [r3, #0]
 800f3d8:	423c      	tst	r4, r7
 800f3da:	d02a      	beq.n	800f432 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800f3dc:	f7ff f8ca 	bl	800e574 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f3e0:	f7fd fe2e 	bl	800d040 <vApplicationMallocFailedHook>
 800f3e4:	2500      	movs	r5, #0
}
 800f3e6:	0028      	movs	r0, r5
 800f3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800f3ea:	4a3c      	ldr	r2, [pc, #240]	; (800f4dc <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3ec:	0753      	lsls	r3, r2, #29
 800f3ee:	d01e      	beq.n	800f42e <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3f0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f3f2:	2307      	movs	r3, #7
 800f3f4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f3f6:	4b3a      	ldr	r3, [pc, #232]	; (800f4e0 <pvPortMalloc+0x11c>)
 800f3f8:	18d3      	adds	r3, r2, r3
 800f3fa:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f3fc:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3fe:	4839      	ldr	r0, [pc, #228]	; (800f4e4 <pvPortMalloc+0x120>)
 800f400:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f402:	2100      	movs	r1, #0
 800f404:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f406:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f408:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f40a:	2007      	movs	r0, #7
 800f40c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f40e:	4831      	ldr	r0, [pc, #196]	; (800f4d4 <pvPortMalloc+0x110>)
 800f410:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f412:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f414:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f416:	1a99      	subs	r1, r3, r2
 800f418:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f41a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f41c:	4b32      	ldr	r3, [pc, #200]	; (800f4e8 <pvPortMalloc+0x124>)
 800f41e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f420:	4b32      	ldr	r3, [pc, #200]	; (800f4ec <pvPortMalloc+0x128>)
 800f422:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f424:	4b2c      	ldr	r3, [pc, #176]	; (800f4d8 <pvPortMalloc+0x114>)
 800f426:	2280      	movs	r2, #128	; 0x80
 800f428:	0612      	lsls	r2, r2, #24
 800f42a:	601a      	str	r2, [r3, #0]
 800f42c:	e7d2      	b.n	800f3d4 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f42e:	4b2c      	ldr	r3, [pc, #176]	; (800f4e0 <pvPortMalloc+0x11c>)
 800f430:	e7e5      	b.n	800f3fe <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800f432:	2c00      	cmp	r4, #0
 800f434:	d008      	beq.n	800f448 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800f436:	0023      	movs	r3, r4
 800f438:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f43a:	075a      	lsls	r2, r3, #29
 800f43c:	d002      	beq.n	800f444 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f43e:	2207      	movs	r2, #7
 800f440:	4393      	bics	r3, r2
 800f442:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f444:	2b00      	cmp	r3, #0
 800f446:	d102      	bne.n	800f44e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f448:	f7ff f894 	bl	800e574 <xTaskResumeAll>
 800f44c:	e7c8      	b.n	800f3e0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f44e:	4a27      	ldr	r2, [pc, #156]	; (800f4ec <pvPortMalloc+0x128>)
 800f450:	6816      	ldr	r6, [r2, #0]
 800f452:	429e      	cmp	r6, r3
 800f454:	d302      	bcc.n	800f45c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f456:	4a23      	ldr	r2, [pc, #140]	; (800f4e4 <pvPortMalloc+0x120>)
 800f458:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f45a:	e004      	b.n	800f466 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800f45c:	f7ff f88a 	bl	800e574 <xTaskResumeAll>
 800f460:	e7be      	b.n	800f3e0 <pvPortMalloc+0x1c>
 800f462:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f464:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f466:	6861      	ldr	r1, [r4, #4]
 800f468:	4299      	cmp	r1, r3
 800f46a:	d202      	bcs.n	800f472 <pvPortMalloc+0xae>
 800f46c:	6821      	ldr	r1, [r4, #0]
 800f46e:	2900      	cmp	r1, #0
 800f470:	d1f7      	bne.n	800f462 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800f472:	4918      	ldr	r1, [pc, #96]	; (800f4d4 <pvPortMalloc+0x110>)
 800f474:	6809      	ldr	r1, [r1, #0]
 800f476:	42a1      	cmp	r1, r4
 800f478:	d00b      	beq.n	800f492 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f47a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f47c:	6821      	ldr	r1, [r4, #0]
 800f47e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f480:	6862      	ldr	r2, [r4, #4]
 800f482:	1ad2      	subs	r2, r2, r3
 800f484:	2a10      	cmp	r2, #16
 800f486:	d90b      	bls.n	800f4a0 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f488:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f48a:	0741      	lsls	r1, r0, #29
 800f48c:	d004      	beq.n	800f498 <pvPortMalloc+0xd4>
 800f48e:	b672      	cpsid	i
 800f490:	e7fe      	b.n	800f490 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800f492:	f7ff f86f 	bl	800e574 <xTaskResumeAll>
 800f496:	e7a3      	b.n	800f3e0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f498:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f49a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f49c:	f7ff ff68 	bl	800f370 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4a0:	6862      	ldr	r2, [r4, #4]
 800f4a2:	1ab6      	subs	r6, r6, r2
 800f4a4:	4911      	ldr	r1, [pc, #68]	; (800f4ec <pvPortMalloc+0x128>)
 800f4a6:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4a8:	490f      	ldr	r1, [pc, #60]	; (800f4e8 <pvPortMalloc+0x124>)
 800f4aa:	6809      	ldr	r1, [r1, #0]
 800f4ac:	428e      	cmp	r6, r1
 800f4ae:	d201      	bcs.n	800f4b4 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4b0:	490d      	ldr	r1, [pc, #52]	; (800f4e8 <pvPortMalloc+0x124>)
 800f4b2:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4b4:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4b6:	4317      	orrs	r7, r2
 800f4b8:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f4be:	f7ff f859 	bl	800e574 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f4c2:	2d00      	cmp	r5, #0
 800f4c4:	d100      	bne.n	800f4c8 <pvPortMalloc+0x104>
 800f4c6:	e78b      	b.n	800f3e0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4c8:	076b      	lsls	r3, r5, #29
 800f4ca:	d100      	bne.n	800f4ce <pvPortMalloc+0x10a>
 800f4cc:	e78b      	b.n	800f3e6 <pvPortMalloc+0x22>
 800f4ce:	b672      	cpsid	i
 800f4d0:	e7fe      	b.n	800f4d0 <pvPortMalloc+0x10c>
 800f4d2:	46c0      	nop			; (mov r8, r8)
 800f4d4:	20001d50 	.word	0x20001d50
 800f4d8:	2000678c 	.word	0x2000678c
 800f4dc:	20001d54 	.word	0x20001d54
 800f4e0:	00004a38 	.word	0x00004a38
 800f4e4:	20006798 	.word	0x20006798
 800f4e8:	20006794 	.word	0x20006794
 800f4ec:	20006790 	.word	0x20006790

0800f4f0 <vPortFree>:
{
 800f4f0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d020      	beq.n	800f538 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4f6:	0003      	movs	r3, r0
 800f4f8:	3b08      	subs	r3, #8
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	4a0f      	ldr	r2, [pc, #60]	; (800f53c <vPortFree+0x4c>)
 800f4fe:	6812      	ldr	r2, [r2, #0]
 800f500:	421a      	tst	r2, r3
 800f502:	d101      	bne.n	800f508 <vPortFree+0x18>
 800f504:	b672      	cpsid	i
 800f506:	e7fe      	b.n	800f506 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f508:	0001      	movs	r1, r0
 800f50a:	3908      	subs	r1, #8
 800f50c:	6809      	ldr	r1, [r1, #0]
 800f50e:	2900      	cmp	r1, #0
 800f510:	d001      	beq.n	800f516 <vPortFree+0x26>
 800f512:	b672      	cpsid	i
 800f514:	e7fe      	b.n	800f514 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f516:	3808      	subs	r0, #8
 800f518:	0004      	movs	r4, r0
 800f51a:	4393      	bics	r3, r2
 800f51c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f51e:	f7fe ff89 	bl	800e434 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f522:	4a07      	ldr	r2, [pc, #28]	; (800f540 <vPortFree+0x50>)
 800f524:	6863      	ldr	r3, [r4, #4]
 800f526:	6811      	ldr	r1, [r2, #0]
 800f528:	468c      	mov	ip, r1
 800f52a:	4463      	add	r3, ip
 800f52c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f52e:	0020      	movs	r0, r4
 800f530:	f7ff ff1e 	bl	800f370 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f534:	f7ff f81e 	bl	800e574 <xTaskResumeAll>
}
 800f538:	bd10      	pop	{r4, pc}
 800f53a:	46c0      	nop			; (mov r8, r8)
 800f53c:	2000678c 	.word	0x2000678c
 800f540:	20006790 	.word	0x20006790

0800f544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f544:	b510      	push	{r4, lr}
 800f546:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f548:	f001 fd5a 	bl	8011000 <HAL_RCC_GetHCLKFreq>
 800f54c:	21fa      	movs	r1, #250	; 0xfa
 800f54e:	0089      	lsls	r1, r1, #2
 800f550:	f7f0 fdfe 	bl	8000150 <__udivsi3>
 800f554:	f000 f88a 	bl	800f66c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f558:	2001      	movs	r0, #1
 800f55a:	2200      	movs	r2, #0
 800f55c:	0021      	movs	r1, r4
 800f55e:	4240      	negs	r0, r0
 800f560:	f000 f83c 	bl	800f5dc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f564:	2000      	movs	r0, #0
 800f566:	bd10      	pop	{r4, pc}

0800f568 <HAL_Init>:
{
 800f568:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f56a:	4a06      	ldr	r2, [pc, #24]	; (800f584 <HAL_Init+0x1c>)
 800f56c:	6813      	ldr	r3, [r2, #0]
 800f56e:	2110      	movs	r1, #16
 800f570:	430b      	orrs	r3, r1
 800f572:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f574:	2000      	movs	r0, #0
 800f576:	f7ff ffe5 	bl	800f544 <HAL_InitTick>
  HAL_MspInit();
 800f57a:	f001 f8e9 	bl	8010750 <HAL_MspInit>
}
 800f57e:	2000      	movs	r0, #0
 800f580:	bd10      	pop	{r4, pc}
 800f582:	46c0      	nop			; (mov r8, r8)
 800f584:	40022000 	.word	0x40022000

0800f588 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f588:	4a02      	ldr	r2, [pc, #8]	; (800f594 <HAL_IncTick+0xc>)
 800f58a:	6813      	ldr	r3, [r2, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	6013      	str	r3, [r2, #0]
}
 800f590:	4770      	bx	lr
 800f592:	46c0      	nop			; (mov r8, r8)
 800f594:	200067a0 	.word	0x200067a0

0800f598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f598:	4b01      	ldr	r3, [pc, #4]	; (800f5a0 <HAL_GetTick+0x8>)
 800f59a:	6818      	ldr	r0, [r3, #0]
}
 800f59c:	4770      	bx	lr
 800f59e:	46c0      	nop			; (mov r8, r8)
 800f5a0:	200067a0 	.word	0x200067a0

0800f5a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f5aa:	f7ff fff5 	bl	800f598 <HAL_GetTick>
 800f5ae:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f5b0:	f7ff fff2 	bl	800f598 <HAL_GetTick>
 800f5b4:	9b01      	ldr	r3, [sp, #4]
 800f5b6:	1b00      	subs	r0, r0, r4
 800f5b8:	4298      	cmp	r0, r3
 800f5ba:	d3f9      	bcc.n	800f5b0 <HAL_Delay+0xc>
  {
  }
}
 800f5bc:	b002      	add	sp, #8
 800f5be:	bd10      	pop	{r4, pc}

0800f5c0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f5c0:	4b01      	ldr	r3, [pc, #4]	; (800f5c8 <HAL_GetREVID+0x8>)
 800f5c2:	6818      	ldr	r0, [r3, #0]
 800f5c4:	0c00      	lsrs	r0, r0, #16
}
 800f5c6:	4770      	bx	lr
 800f5c8:	40015800 	.word	0x40015800

0800f5cc <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f5cc:	4b02      	ldr	r3, [pc, #8]	; (800f5d8 <HAL_GetDEVID+0xc>)
 800f5ce:	6818      	ldr	r0, [r3, #0]
 800f5d0:	0500      	lsls	r0, r0, #20
 800f5d2:	0d00      	lsrs	r0, r0, #20
}
 800f5d4:	4770      	bx	lr
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	40015800 	.word	0x40015800

0800f5dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f5dc:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	db14      	blt.n	800f60c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5e2:	0883      	lsrs	r3, r0, #2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4a15      	ldr	r2, [pc, #84]	; (800f63c <HAL_NVIC_SetPriority+0x60>)
 800f5e8:	4694      	mov	ip, r2
 800f5ea:	4463      	add	r3, ip
 800f5ec:	26c0      	movs	r6, #192	; 0xc0
 800f5ee:	00b6      	lsls	r6, r6, #2
 800f5f0:	599d      	ldr	r5, [r3, r6]
 800f5f2:	2403      	movs	r4, #3
 800f5f4:	4020      	ands	r0, r4
 800f5f6:	00c0      	lsls	r0, r0, #3
 800f5f8:	22ff      	movs	r2, #255	; 0xff
 800f5fa:	0014      	movs	r4, r2
 800f5fc:	4084      	lsls	r4, r0
 800f5fe:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f600:	0189      	lsls	r1, r1, #6
 800f602:	400a      	ands	r2, r1
 800f604:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f606:	432a      	orrs	r2, r5
 800f608:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f60a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f60c:	b2c0      	uxtb	r0, r0
 800f60e:	230f      	movs	r3, #15
 800f610:	4003      	ands	r3, r0
 800f612:	3b08      	subs	r3, #8
 800f614:	089b      	lsrs	r3, r3, #2
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	4a09      	ldr	r2, [pc, #36]	; (800f640 <HAL_NVIC_SetPriority+0x64>)
 800f61a:	4694      	mov	ip, r2
 800f61c:	4463      	add	r3, ip
 800f61e:	69dd      	ldr	r5, [r3, #28]
 800f620:	2203      	movs	r2, #3
 800f622:	4010      	ands	r0, r2
 800f624:	00c0      	lsls	r0, r0, #3
 800f626:	24ff      	movs	r4, #255	; 0xff
 800f628:	0022      	movs	r2, r4
 800f62a:	4082      	lsls	r2, r0
 800f62c:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f62e:	0189      	lsls	r1, r1, #6
 800f630:	400c      	ands	r4, r1
 800f632:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f634:	432c      	orrs	r4, r5
 800f636:	61dc      	str	r4, [r3, #28]
 800f638:	e7e7      	b.n	800f60a <HAL_NVIC_SetPriority+0x2e>
 800f63a:	46c0      	nop			; (mov r8, r8)
 800f63c:	e000e100 	.word	0xe000e100
 800f640:	e000ed00 	.word	0xe000ed00

0800f644 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f644:	231f      	movs	r3, #31
 800f646:	4018      	ands	r0, r3
 800f648:	3b1e      	subs	r3, #30
 800f64a:	4083      	lsls	r3, r0
 800f64c:	4a01      	ldr	r2, [pc, #4]	; (800f654 <HAL_NVIC_EnableIRQ+0x10>)
 800f64e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f650:	4770      	bx	lr
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	e000e100 	.word	0xe000e100

0800f658 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f658:	231f      	movs	r3, #31
 800f65a:	4018      	ands	r0, r3
 800f65c:	3b1e      	subs	r3, #30
 800f65e:	4083      	lsls	r3, r0
 800f660:	4901      	ldr	r1, [pc, #4]	; (800f668 <HAL_NVIC_DisableIRQ+0x10>)
 800f662:	2280      	movs	r2, #128	; 0x80
 800f664:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f666:	4770      	bx	lr
 800f668:	e000e100 	.word	0xe000e100

0800f66c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f66c:	1e43      	subs	r3, r0, #1
 800f66e:	4a0a      	ldr	r2, [pc, #40]	; (800f698 <HAL_SYSTICK_Config+0x2c>)
 800f670:	2001      	movs	r0, #1
 800f672:	4293      	cmp	r3, r2
 800f674:	d80e      	bhi.n	800f694 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f676:	4a09      	ldr	r2, [pc, #36]	; (800f69c <HAL_SYSTICK_Config+0x30>)
 800f678:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f67a:	4809      	ldr	r0, [pc, #36]	; (800f6a0 <HAL_SYSTICK_Config+0x34>)
 800f67c:	6a03      	ldr	r3, [r0, #32]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	0a1b      	lsrs	r3, r3, #8
 800f682:	21c0      	movs	r1, #192	; 0xc0
 800f684:	0609      	lsls	r1, r1, #24
 800f686:	430b      	orrs	r3, r1
 800f688:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f68a:	2300      	movs	r3, #0
 800f68c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f68e:	3307      	adds	r3, #7
 800f690:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f692:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f694:	4770      	bx	lr
 800f696:	46c0      	nop			; (mov r8, r8)
 800f698:	00ffffff 	.word	0x00ffffff
 800f69c:	e000e010 	.word	0xe000e010
 800f6a0:	e000ed00 	.word	0xe000ed00

0800f6a4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f6a4:	2804      	cmp	r0, #4
 800f6a6:	d005      	beq.n	800f6b4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f6a8:	4a05      	ldr	r2, [pc, #20]	; (800f6c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800f6aa:	6813      	ldr	r3, [r2, #0]
 800f6ac:	2104      	movs	r1, #4
 800f6ae:	438b      	bics	r3, r1
 800f6b0:	6013      	str	r3, [r2, #0]
  }
}
 800f6b2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f6b4:	4a02      	ldr	r2, [pc, #8]	; (800f6c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800f6b6:	6813      	ldr	r3, [r2, #0]
 800f6b8:	2104      	movs	r1, #4
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	6013      	str	r3, [r2, #0]
 800f6be:	e7f8      	b.n	800f6b2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f6c0:	e000e010 	.word	0xe000e010

0800f6c4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6c6:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f6c8:	0891      	lsrs	r1, r2, #2
 800f6ca:	d013      	beq.n	800f6f4 <CRC_Handle_8+0x30>
 800f6cc:	0034      	movs	r4, r6
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	0017      	movs	r7, r2
 800f6d2:	439f      	bics	r7, r3
 800f6d4:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f6d6:	7823      	ldrb	r3, [r4, #0]
 800f6d8:	061b      	lsls	r3, r3, #24
 800f6da:	7865      	ldrb	r5, [r4, #1]
 800f6dc:	042d      	lsls	r5, r5, #16
 800f6de:	432b      	orrs	r3, r5
 800f6e0:	78e5      	ldrb	r5, [r4, #3]
 800f6e2:	432b      	orrs	r3, r5
 800f6e4:	78a5      	ldrb	r5, [r4, #2]
 800f6e6:	022d      	lsls	r5, r5, #8
 800f6e8:	432b      	orrs	r3, r5
 800f6ea:	6805      	ldr	r5, [r0, #0]
 800f6ec:	602b      	str	r3, [r5, #0]
 800f6ee:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800f6f0:	42bc      	cmp	r4, r7
 800f6f2:	d1f0      	bne.n	800f6d6 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	401a      	ands	r2, r3
 800f6f8:	d01e      	beq.n	800f738 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800f6fa:	2a01      	cmp	r2, #1
 800f6fc:	d00a      	beq.n	800f714 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800f6fe:	2a02      	cmp	r2, #2
 800f700:	d10d      	bne.n	800f71e <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f702:	0089      	lsls	r1, r1, #2
 800f704:	5c72      	ldrb	r2, [r6, r1]
 800f706:	0212      	lsls	r2, r2, #8
 800f708:	1871      	adds	r1, r6, r1
 800f70a:	784b      	ldrb	r3, [r1, #1]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	6802      	ldr	r2, [r0, #0]
 800f710:	8013      	strh	r3, [r2, #0]
 800f712:	e011      	b.n	800f738 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f714:	0089      	lsls	r1, r1, #2
 800f716:	5d8b      	ldrb	r3, [r1, r6]
 800f718:	6802      	ldr	r2, [r0, #0]
 800f71a:	7013      	strb	r3, [r2, #0]
 800f71c:	e00c      	b.n	800f738 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800f71e:	2a03      	cmp	r2, #3
 800f720:	d10a      	bne.n	800f738 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f722:	0089      	lsls	r1, r1, #2
 800f724:	5c72      	ldrb	r2, [r6, r1]
 800f726:	0212      	lsls	r2, r2, #8
 800f728:	1871      	adds	r1, r6, r1
 800f72a:	784b      	ldrb	r3, [r1, #1]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	6802      	ldr	r2, [r0, #0]
 800f730:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f732:	788b      	ldrb	r3, [r1, #2]
 800f734:	6802      	ldr	r2, [r0, #0]
 800f736:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f738:	6803      	ldr	r3, [r0, #0]
 800f73a:	6818      	ldr	r0, [r3, #0]
}
 800f73c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f73e <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f73e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f740:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f742:	0852      	lsrs	r2, r2, #1
 800f744:	d00b      	beq.n	800f75e <CRC_Handle_16+0x20>
 800f746:	000c      	movs	r4, r1
 800f748:	0097      	lsls	r7, r2, #2
 800f74a:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f74c:	8823      	ldrh	r3, [r4, #0]
 800f74e:	041b      	lsls	r3, r3, #16
 800f750:	8866      	ldrh	r6, [r4, #2]
 800f752:	4333      	orrs	r3, r6
 800f754:	6806      	ldr	r6, [r0, #0]
 800f756:	6033      	str	r3, [r6, #0]
 800f758:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800f75a:	42bc      	cmp	r4, r7
 800f75c:	d1f6      	bne.n	800f74c <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f75e:	07eb      	lsls	r3, r5, #31
 800f760:	d503      	bpl.n	800f76a <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f762:	0092      	lsls	r2, r2, #2
 800f764:	5a53      	ldrh	r3, [r2, r1]
 800f766:	6802      	ldr	r2, [r0, #0]
 800f768:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f76a:	6803      	ldr	r3, [r0, #0]
 800f76c:	6818      	ldr	r0, [r3, #0]
}
 800f76e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f770 <HAL_CRC_Init>:
{
 800f770:	b510      	push	{r4, lr}
 800f772:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f774:	d029      	beq.n	800f7ca <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f776:	7f43      	ldrb	r3, [r0, #29]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d01e      	beq.n	800f7ba <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f77c:	2302      	movs	r3, #2
 800f77e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f780:	0020      	movs	r0, r4
 800f782:	f000 f8b1 	bl	800f8e8 <HAL_CRCEx_Init>
 800f786:	2800      	cmp	r0, #0
 800f788:	d121      	bne.n	800f7ce <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f78a:	7963      	ldrb	r3, [r4, #5]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d118      	bne.n	800f7c2 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	2201      	movs	r2, #1
 800f794:	4252      	negs	r2, r2
 800f796:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f798:	6822      	ldr	r2, [r4, #0]
 800f79a:	6893      	ldr	r3, [r2, #8]
 800f79c:	2160      	movs	r1, #96	; 0x60
 800f79e:	438b      	bics	r3, r1
 800f7a0:	6961      	ldr	r1, [r4, #20]
 800f7a2:	430b      	orrs	r3, r1
 800f7a4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f7a6:	6822      	ldr	r2, [r4, #0]
 800f7a8:	6893      	ldr	r3, [r2, #8]
 800f7aa:	2180      	movs	r1, #128	; 0x80
 800f7ac:	438b      	bics	r3, r1
 800f7ae:	69a1      	ldr	r1, [r4, #24]
 800f7b0:	430b      	orrs	r3, r1
 800f7b2:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	7763      	strb	r3, [r4, #29]
}
 800f7b8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f7ba:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f7bc:	f7fd fae0 	bl	800cd80 <HAL_CRC_MspInit>
 800f7c0:	e7dc      	b.n	800f77c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	6922      	ldr	r2, [r4, #16]
 800f7c6:	611a      	str	r2, [r3, #16]
 800f7c8:	e7e6      	b.n	800f798 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800f7ca:	2001      	movs	r0, #1
 800f7cc:	e7f4      	b.n	800f7b8 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	e7f2      	b.n	800f7b8 <HAL_CRC_Init+0x48>

0800f7d2 <HAL_CRC_Accumulate>:
{
 800f7d2:	b510      	push	{r4, lr}
 800f7d4:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f7d6:	7f03      	ldrb	r3, [r0, #28]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d024      	beq.n	800f826 <HAL_CRC_Accumulate+0x54>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f7e4:	6a03      	ldr	r3, [r0, #32]
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	d01a      	beq.n	800f820 <HAL_CRC_Accumulate+0x4e>
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d007      	beq.n	800f7fe <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f7ee:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d011      	beq.n	800f818 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	7723      	strb	r3, [r4, #28]
}
 800f7fc:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	d007      	beq.n	800f812 <HAL_CRC_Accumulate+0x40>
 800f802:	000b      	movs	r3, r1
 800f804:	0092      	lsls	r2, r2, #2
 800f806:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f808:	6822      	ldr	r2, [r4, #0]
 800f80a:	cb01      	ldmia	r3!, {r0}
 800f80c:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800f80e:	428b      	cmp	r3, r1
 800f810:	d1fa      	bne.n	800f808 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800f812:	6823      	ldr	r3, [r4, #0]
 800f814:	6818      	ldr	r0, [r3, #0]
      break;
 800f816:	e7ed      	b.n	800f7f4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f818:	0020      	movs	r0, r4
 800f81a:	f7ff ff53 	bl	800f6c4 <CRC_Handle_8>
      break;
 800f81e:	e7e9      	b.n	800f7f4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f820:	f7ff ff8d 	bl	800f73e <CRC_Handle_16>
      break;
 800f824:	e7e6      	b.n	800f7f4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800f826:	2002      	movs	r0, #2
 800f828:	e7e8      	b.n	800f7fc <HAL_CRC_Accumulate+0x2a>

0800f82a <HAL_CRC_Calculate>:
{
 800f82a:	b570      	push	{r4, r5, r6, lr}
 800f82c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f82e:	7f03      	ldrb	r3, [r0, #28]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d029      	beq.n	800f888 <HAL_CRC_Calculate+0x5e>
 800f834:	2501      	movs	r5, #1
 800f836:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f838:	2302      	movs	r3, #2
 800f83a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f83c:	6800      	ldr	r0, [r0, #0]
 800f83e:	6883      	ldr	r3, [r0, #8]
 800f840:	432b      	orrs	r3, r5
 800f842:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800f844:	6a23      	ldr	r3, [r4, #32]
 800f846:	2b02      	cmp	r3, #2
 800f848:	d01a      	beq.n	800f880 <HAL_CRC_Calculate+0x56>
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d007      	beq.n	800f85e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f84e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f850:	2b01      	cmp	r3, #1
 800f852:	d011      	beq.n	800f878 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f854:	2301      	movs	r3, #1
 800f856:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f858:	2300      	movs	r3, #0
 800f85a:	7723      	strb	r3, [r4, #28]
}
 800f85c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f85e:	2a00      	cmp	r2, #0
 800f860:	d007      	beq.n	800f872 <HAL_CRC_Calculate+0x48>
 800f862:	000b      	movs	r3, r1
 800f864:	0092      	lsls	r2, r2, #2
 800f866:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f868:	6820      	ldr	r0, [r4, #0]
 800f86a:	cb20      	ldmia	r3!, {r5}
 800f86c:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f86e:	428b      	cmp	r3, r1
 800f870:	d1fa      	bne.n	800f868 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	6818      	ldr	r0, [r3, #0]
      break;
 800f876:	e7ed      	b.n	800f854 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f878:	0020      	movs	r0, r4
 800f87a:	f7ff ff23 	bl	800f6c4 <CRC_Handle_8>
      break;
 800f87e:	e7e9      	b.n	800f854 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f880:	0020      	movs	r0, r4
 800f882:	f7ff ff5c 	bl	800f73e <CRC_Handle_16>
      break;
 800f886:	e7e5      	b.n	800f854 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f888:	2002      	movs	r0, #2
 800f88a:	e7e7      	b.n	800f85c <HAL_CRC_Calculate+0x32>

0800f88c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f88c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f88e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f890:	2501      	movs	r5, #1
 800f892:	002c      	movs	r4, r5
 800f894:	409c      	lsls	r4, r3
 800f896:	4221      	tst	r1, r4
 800f898:	d10b      	bne.n	800f8b2 <HAL_CRCEx_Polynomial_Set+0x26>
 800f89a:	3b01      	subs	r3, #1
 800f89c:	d2f9      	bcs.n	800f892 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800f89e:	2a10      	cmp	r2, #16
 800f8a0:	d01c      	beq.n	800f8dc <HAL_CRCEx_Polynomial_Set+0x50>
 800f8a2:	2a18      	cmp	r2, #24
 800f8a4:	d01e      	beq.n	800f8e4 <HAL_CRCEx_Polynomial_Set+0x58>
 800f8a6:	2a08      	cmp	r2, #8
 800f8a8:	d109      	bne.n	800f8be <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800f8aa:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800f8ac:	2b0f      	cmp	r3, #15
 800f8ae:	d906      	bls.n	800f8be <HAL_CRCEx_Polynomial_Set+0x32>
 800f8b0:	e00e      	b.n	800f8d0 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800f8b2:	2a10      	cmp	r2, #16
 800f8b4:	d012      	beq.n	800f8dc <HAL_CRCEx_Polynomial_Set+0x50>
 800f8b6:	2a18      	cmp	r2, #24
 800f8b8:	d00c      	beq.n	800f8d4 <HAL_CRCEx_Polynomial_Set+0x48>
 800f8ba:	2a08      	cmp	r2, #8
 800f8bc:	d0f5      	beq.n	800f8aa <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f8be:	6803      	ldr	r3, [r0, #0]
 800f8c0:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f8c2:	6801      	ldr	r1, [r0, #0]
 800f8c4:	688b      	ldr	r3, [r1, #8]
 800f8c6:	2018      	movs	r0, #24
 800f8c8:	4383      	bics	r3, r0
 800f8ca:	431a      	orrs	r2, r3
 800f8cc:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800f8ce:	2400      	movs	r4, #0
}
 800f8d0:	0020      	movs	r0, r4
 800f8d2:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800f8d4:	2b06      	cmp	r3, #6
 800f8d6:	d9f2      	bls.n	800f8be <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800f8d8:	2401      	movs	r4, #1
 800f8da:	e7f9      	b.n	800f8d0 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800f8dc:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800f8de:	2b07      	cmp	r3, #7
 800f8e0:	d9ed      	bls.n	800f8be <HAL_CRCEx_Polynomial_Set+0x32>
 800f8e2:	e7f5      	b.n	800f8d0 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800f8e4:	2401      	movs	r4, #1
 800f8e6:	e7f3      	b.n	800f8d0 <HAL_CRCEx_Polynomial_Set+0x44>

0800f8e8 <HAL_CRCEx_Init>:
{
 800f8e8:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f8ea:	7903      	ldrb	r3, [r0, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d109      	bne.n	800f904 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f8f0:	6803      	ldr	r3, [r0, #0]
 800f8f2:	4a08      	ldr	r2, [pc, #32]	; (800f914 <HAL_CRCEx_Init+0x2c>)
 800f8f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f8f6:	6802      	ldr	r2, [r0, #0]
 800f8f8:	6893      	ldr	r3, [r2, #8]
 800f8fa:	2118      	movs	r1, #24
 800f8fc:	438b      	bics	r3, r1
 800f8fe:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 800f900:	2000      	movs	r0, #0
}
 800f902:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f904:	68c2      	ldr	r2, [r0, #12]
 800f906:	6881      	ldr	r1, [r0, #8]
 800f908:	f7ff ffc0 	bl	800f88c <HAL_CRCEx_Polynomial_Set>
 800f90c:	1e43      	subs	r3, r0, #1
 800f90e:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f910:	b2c0      	uxtb	r0, r0
 800f912:	e7f6      	b.n	800f902 <HAL_CRCEx_Init+0x1a>
 800f914:	04c11db7 	.word	0x04c11db7

0800f918 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f918:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d022      	beq.n	800f964 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f91e:	2321      	movs	r3, #33	; 0x21
 800f920:	5cc3      	ldrb	r3, [r0, r3]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d102      	bne.n	800f92c <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800f926:	3320      	adds	r3, #32
 800f928:	2200      	movs	r2, #0
 800f92a:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f92c:	2121      	movs	r1, #33	; 0x21
 800f92e:	2302      	movs	r3, #2
 800f930:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f932:	6804      	ldr	r4, [r0, #0]
 800f934:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f936:	4a0c      	ldr	r2, [pc, #48]	; (800f968 <HAL_DMA_Init+0x50>)
 800f938:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f93a:	6843      	ldr	r3, [r0, #4]
 800f93c:	6885      	ldr	r5, [r0, #8]
 800f93e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f940:	68c5      	ldr	r5, [r0, #12]
 800f942:	432b      	orrs	r3, r5
 800f944:	6905      	ldr	r5, [r0, #16]
 800f946:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f948:	6945      	ldr	r5, [r0, #20]
 800f94a:	432b      	orrs	r3, r5
 800f94c:	6985      	ldr	r5, [r0, #24]
 800f94e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f950:	69c5      	ldr	r5, [r0, #28]
 800f952:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f954:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f956:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f958:	2300      	movs	r3, #0
 800f95a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f95c:	3301      	adds	r3, #1
 800f95e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f960:	2000      	movs	r0, #0
}  
 800f962:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800f964:	2001      	movs	r0, #1
 800f966:	e7fc      	b.n	800f962 <HAL_DMA_Init+0x4a>
 800f968:	ffffc00f 	.word	0xffffc00f

0800f96c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f96c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f96e:	2420      	movs	r4, #32
 800f970:	5d04      	ldrb	r4, [r0, r4]
 800f972:	2c01      	cmp	r4, #1
 800f974:	d02d      	beq.n	800f9d2 <HAL_DMA_Start_IT+0x66>
 800f976:	2601      	movs	r6, #1
 800f978:	2420      	movs	r4, #32
 800f97a:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f97c:	3401      	adds	r4, #1
 800f97e:	2502      	movs	r5, #2
 800f980:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f982:	6805      	ldr	r5, [r0, #0]
 800f984:	682c      	ldr	r4, [r5, #0]
 800f986:	43b4      	bics	r4, r6
 800f988:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f98a:	6804      	ldr	r4, [r0, #0]
 800f98c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f98e:	6843      	ldr	r3, [r0, #4]
 800f990:	2b10      	cmp	r3, #16
 800f992:	d019      	beq.n	800f9c8 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f994:	6803      	ldr	r3, [r0, #0]
 800f996:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f998:	6803      	ldr	r3, [r0, #0]
 800f99a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f99c:	6802      	ldr	r2, [r0, #0]
 800f99e:	6813      	ldr	r3, [r2, #0]
 800f9a0:	2102      	movs	r1, #2
 800f9a2:	430b      	orrs	r3, r1
 800f9a4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f9a6:	6802      	ldr	r2, [r0, #0]
 800f9a8:	6813      	ldr	r3, [r2, #0]
 800f9aa:	3102      	adds	r1, #2
 800f9ac:	430b      	orrs	r3, r1
 800f9ae:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f9b0:	6802      	ldr	r2, [r0, #0]
 800f9b2:	6813      	ldr	r3, [r2, #0]
 800f9b4:	3104      	adds	r1, #4
 800f9b6:	430b      	orrs	r3, r1
 800f9b8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f9ba:	6802      	ldr	r2, [r0, #0]
 800f9bc:	6813      	ldr	r3, [r2, #0]
 800f9be:	3907      	subs	r1, #7
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800f9c4:	2000      	movs	r0, #0
} 
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f9c8:	6803      	ldr	r3, [r0, #0]
 800f9ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f9cc:	6803      	ldr	r3, [r0, #0]
 800f9ce:	60d9      	str	r1, [r3, #12]
 800f9d0:	e7e4      	b.n	800f99c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800f9d2:	2002      	movs	r0, #2
 800f9d4:	e7f7      	b.n	800f9c6 <HAL_DMA_Start_IT+0x5a>

0800f9d6 <HAL_DMA_Abort>:
{
 800f9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d8:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f9da:	6802      	ldr	r2, [r0, #0]
 800f9dc:	6813      	ldr	r3, [r2, #0]
 800f9de:	2101      	movs	r1, #1
 800f9e0:	438b      	bics	r3, r1
 800f9e2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f9e4:	f7ff fdd8 	bl	800f598 <HAL_GetTick>
 800f9e8:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f9ea:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f9ec:	26fa      	movs	r6, #250	; 0xfa
 800f9ee:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	421d      	tst	r5, r3
 800f9f6:	d00f      	beq.n	800fa18 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f9f8:	f7ff fdce 	bl	800f598 <HAL_GetTick>
 800f9fc:	1bc0      	subs	r0, r0, r7
 800f9fe:	42b0      	cmp	r0, r6
 800fa00:	d9f6      	bls.n	800f9f0 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800fa02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa04:	2220      	movs	r2, #32
 800fa06:	4313      	orrs	r3, r2
 800fa08:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fa0a:	2321      	movs	r3, #33	; 0x21
 800fa0c:	2103      	movs	r1, #3
 800fa0e:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fa10:	2300      	movs	r3, #0
 800fa12:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800fa14:	2003      	movs	r0, #3
 800fa16:	e006      	b.n	800fa26 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800fa18:	2321      	movs	r3, #33	; 0x21
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800fa1e:	3b01      	subs	r3, #1
 800fa20:	2200      	movs	r2, #0
 800fa22:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800fa24:	2000      	movs	r0, #0
}
 800fa26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa28 <HAL_DMA_IRQHandler>:
{        
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fa2c:	6803      	ldr	r3, [r0, #0]
 800fa2e:	4ab4      	ldr	r2, [pc, #720]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d94d      	bls.n	800fad0 <HAL_DMA_IRQHandler+0xa8>
 800fa34:	4ab3      	ldr	r2, [pc, #716]	; (800fd04 <HAL_DMA_IRQHandler+0x2dc>)
 800fa36:	6811      	ldr	r1, [r2, #0]
 800fa38:	4ab3      	ldr	r2, [pc, #716]	; (800fd08 <HAL_DMA_IRQHandler+0x2e0>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d026      	beq.n	800fa8c <HAL_DMA_IRQHandler+0x64>
 800fa3e:	4ab3      	ldr	r2, [pc, #716]	; (800fd0c <HAL_DMA_IRQHandler+0x2e4>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d02d      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x78>
 800fa44:	4ab2      	ldr	r2, [pc, #712]	; (800fd10 <HAL_DMA_IRQHandler+0x2e8>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d02c      	beq.n	800faa4 <HAL_DMA_IRQHandler+0x7c>
 800fa4a:	4ab2      	ldr	r2, [pc, #712]	; (800fd14 <HAL_DMA_IRQHandler+0x2ec>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d02c      	beq.n	800faaa <HAL_DMA_IRQHandler+0x82>
 800fa50:	4ab1      	ldr	r2, [pc, #708]	; (800fd18 <HAL_DMA_IRQHandler+0x2f0>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d02c      	beq.n	800fab0 <HAL_DMA_IRQHandler+0x88>
 800fa56:	4ab1      	ldr	r2, [pc, #708]	; (800fd1c <HAL_DMA_IRQHandler+0x2f4>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d02c      	beq.n	800fab6 <HAL_DMA_IRQHandler+0x8e>
 800fa5c:	4aa8      	ldr	r2, [pc, #672]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d02c      	beq.n	800fabc <HAL_DMA_IRQHandler+0x94>
 800fa62:	4aaf      	ldr	r2, [pc, #700]	; (800fd20 <HAL_DMA_IRQHandler+0x2f8>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d02c      	beq.n	800fac2 <HAL_DMA_IRQHandler+0x9a>
 800fa68:	4aae      	ldr	r2, [pc, #696]	; (800fd24 <HAL_DMA_IRQHandler+0x2fc>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d02b      	beq.n	800fac6 <HAL_DMA_IRQHandler+0x9e>
 800fa6e:	4aae      	ldr	r2, [pc, #696]	; (800fd28 <HAL_DMA_IRQHandler+0x300>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d02a      	beq.n	800faca <HAL_DMA_IRQHandler+0xa2>
 800fa74:	4aad      	ldr	r2, [pc, #692]	; (800fd2c <HAL_DMA_IRQHandler+0x304>)
 800fa76:	189a      	adds	r2, r3, r2
 800fa78:	4250      	negs	r0, r2
 800fa7a:	4142      	adcs	r2, r0
 800fa7c:	4252      	negs	r2, r2
 800fa7e:	48ac      	ldr	r0, [pc, #688]	; (800fd30 <HAL_DMA_IRQHandler+0x308>)
 800fa80:	4002      	ands	r2, r0
 800fa82:	2080      	movs	r0, #128	; 0x80
 800fa84:	0300      	lsls	r0, r0, #12
 800fa86:	4684      	mov	ip, r0
 800fa88:	4462      	add	r2, ip
 800fa8a:	e000      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fa8c:	2208      	movs	r2, #8
 800fa8e:	420a      	tst	r2, r1
 800fa90:	d100      	bne.n	800fa94 <HAL_DMA_IRQHandler+0x6c>
 800fa92:	e0e6      	b.n	800fc62 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	0712      	lsls	r2, r2, #28
 800fa98:	d500      	bpl.n	800fa9c <HAL_DMA_IRQHandler+0x74>
 800fa9a:	e097      	b.n	800fbcc <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	e0e0      	b.n	800fc62 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800faa0:	2280      	movs	r2, #128	; 0x80
 800faa2:	e7f4      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800faa4:	2280      	movs	r2, #128	; 0x80
 800faa6:	0112      	lsls	r2, r2, #4
 800faa8:	e7f1      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800faaa:	2280      	movs	r2, #128	; 0x80
 800faac:	0212      	lsls	r2, r2, #8
 800faae:	e7ee      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fab0:	2280      	movs	r2, #128	; 0x80
 800fab2:	0312      	lsls	r2, r2, #12
 800fab4:	e7eb      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fab6:	2280      	movs	r2, #128	; 0x80
 800fab8:	0412      	lsls	r2, r2, #16
 800faba:	e7e8      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fabc:	2280      	movs	r2, #128	; 0x80
 800fabe:	0512      	lsls	r2, r2, #20
 800fac0:	e7e5      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fac2:	2208      	movs	r2, #8
 800fac4:	e7e3      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fac6:	2280      	movs	r2, #128	; 0x80
 800fac8:	e7e1      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800faca:	2280      	movs	r2, #128	; 0x80
 800facc:	0112      	lsls	r2, r2, #4
 800face:	e7de      	b.n	800fa8e <HAL_DMA_IRQHandler+0x66>
 800fad0:	4a98      	ldr	r2, [pc, #608]	; (800fd34 <HAL_DMA_IRQHandler+0x30c>)
 800fad2:	6811      	ldr	r1, [r2, #0]
 800fad4:	4a8c      	ldr	r2, [pc, #560]	; (800fd08 <HAL_DMA_IRQHandler+0x2e0>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d026      	beq.n	800fb28 <HAL_DMA_IRQHandler+0x100>
 800fada:	4a8c      	ldr	r2, [pc, #560]	; (800fd0c <HAL_DMA_IRQHandler+0x2e4>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d05d      	beq.n	800fb9c <HAL_DMA_IRQHandler+0x174>
 800fae0:	4a8b      	ldr	r2, [pc, #556]	; (800fd10 <HAL_DMA_IRQHandler+0x2e8>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d05c      	beq.n	800fba0 <HAL_DMA_IRQHandler+0x178>
 800fae6:	4a8b      	ldr	r2, [pc, #556]	; (800fd14 <HAL_DMA_IRQHandler+0x2ec>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d05c      	beq.n	800fba6 <HAL_DMA_IRQHandler+0x17e>
 800faec:	4a8a      	ldr	r2, [pc, #552]	; (800fd18 <HAL_DMA_IRQHandler+0x2f0>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d05c      	beq.n	800fbac <HAL_DMA_IRQHandler+0x184>
 800faf2:	4a8a      	ldr	r2, [pc, #552]	; (800fd1c <HAL_DMA_IRQHandler+0x2f4>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d05c      	beq.n	800fbb2 <HAL_DMA_IRQHandler+0x18a>
 800faf8:	4a81      	ldr	r2, [pc, #516]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d05c      	beq.n	800fbb8 <HAL_DMA_IRQHandler+0x190>
 800fafe:	4a88      	ldr	r2, [pc, #544]	; (800fd20 <HAL_DMA_IRQHandler+0x2f8>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d05c      	beq.n	800fbbe <HAL_DMA_IRQHandler+0x196>
 800fb04:	4a87      	ldr	r2, [pc, #540]	; (800fd24 <HAL_DMA_IRQHandler+0x2fc>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d05b      	beq.n	800fbc2 <HAL_DMA_IRQHandler+0x19a>
 800fb0a:	4a87      	ldr	r2, [pc, #540]	; (800fd28 <HAL_DMA_IRQHandler+0x300>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d05a      	beq.n	800fbc6 <HAL_DMA_IRQHandler+0x19e>
 800fb10:	4a86      	ldr	r2, [pc, #536]	; (800fd2c <HAL_DMA_IRQHandler+0x304>)
 800fb12:	189a      	adds	r2, r3, r2
 800fb14:	4250      	negs	r0, r2
 800fb16:	4142      	adcs	r2, r0
 800fb18:	4252      	negs	r2, r2
 800fb1a:	4885      	ldr	r0, [pc, #532]	; (800fd30 <HAL_DMA_IRQHandler+0x308>)
 800fb1c:	4002      	ands	r2, r0
 800fb1e:	2080      	movs	r0, #128	; 0x80
 800fb20:	0300      	lsls	r0, r0, #12
 800fb22:	4684      	mov	ip, r0
 800fb24:	4462      	add	r2, ip
 800fb26:	e000      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fb28:	2208      	movs	r2, #8
 800fb2a:	420a      	tst	r2, r1
 800fb2c:	d000      	beq.n	800fb30 <HAL_DMA_IRQHandler+0x108>
 800fb2e:	e3ad      	b.n	801028c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fb30:	4a80      	ldr	r2, [pc, #512]	; (800fd34 <HAL_DMA_IRQHandler+0x30c>)
 800fb32:	6811      	ldr	r1, [r2, #0]
 800fb34:	4a74      	ldr	r2, [pc, #464]	; (800fd08 <HAL_DMA_IRQHandler+0x2e0>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d100      	bne.n	800fb3c <HAL_DMA_IRQHandler+0x114>
 800fb3a:	e198      	b.n	800fe6e <HAL_DMA_IRQHandler+0x446>
 800fb3c:	4a73      	ldr	r2, [pc, #460]	; (800fd0c <HAL_DMA_IRQHandler+0x2e4>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d100      	bne.n	800fb44 <HAL_DMA_IRQHandler+0x11c>
 800fb42:	e1da      	b.n	800fefa <HAL_DMA_IRQHandler+0x4d2>
 800fb44:	4a72      	ldr	r2, [pc, #456]	; (800fd10 <HAL_DMA_IRQHandler+0x2e8>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d100      	bne.n	800fb4c <HAL_DMA_IRQHandler+0x124>
 800fb4a:	e1d8      	b.n	800fefe <HAL_DMA_IRQHandler+0x4d6>
 800fb4c:	4a71      	ldr	r2, [pc, #452]	; (800fd14 <HAL_DMA_IRQHandler+0x2ec>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d100      	bne.n	800fb54 <HAL_DMA_IRQHandler+0x12c>
 800fb52:	e1d7      	b.n	800ff04 <HAL_DMA_IRQHandler+0x4dc>
 800fb54:	4a70      	ldr	r2, [pc, #448]	; (800fd18 <HAL_DMA_IRQHandler+0x2f0>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d100      	bne.n	800fb5c <HAL_DMA_IRQHandler+0x134>
 800fb5a:	e1d6      	b.n	800ff0a <HAL_DMA_IRQHandler+0x4e2>
 800fb5c:	4a6f      	ldr	r2, [pc, #444]	; (800fd1c <HAL_DMA_IRQHandler+0x2f4>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d100      	bne.n	800fb64 <HAL_DMA_IRQHandler+0x13c>
 800fb62:	e1d5      	b.n	800ff10 <HAL_DMA_IRQHandler+0x4e8>
 800fb64:	4a66      	ldr	r2, [pc, #408]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d100      	bne.n	800fb6c <HAL_DMA_IRQHandler+0x144>
 800fb6a:	e1d4      	b.n	800ff16 <HAL_DMA_IRQHandler+0x4ee>
 800fb6c:	4a6c      	ldr	r2, [pc, #432]	; (800fd20 <HAL_DMA_IRQHandler+0x2f8>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d100      	bne.n	800fb74 <HAL_DMA_IRQHandler+0x14c>
 800fb72:	e1d3      	b.n	800ff1c <HAL_DMA_IRQHandler+0x4f4>
 800fb74:	4a6b      	ldr	r2, [pc, #428]	; (800fd24 <HAL_DMA_IRQHandler+0x2fc>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d100      	bne.n	800fb7c <HAL_DMA_IRQHandler+0x154>
 800fb7a:	e1d1      	b.n	800ff20 <HAL_DMA_IRQHandler+0x4f8>
 800fb7c:	4a6a      	ldr	r2, [pc, #424]	; (800fd28 <HAL_DMA_IRQHandler+0x300>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d100      	bne.n	800fb84 <HAL_DMA_IRQHandler+0x15c>
 800fb82:	e1cf      	b.n	800ff24 <HAL_DMA_IRQHandler+0x4fc>
 800fb84:	4a69      	ldr	r2, [pc, #420]	; (800fd2c <HAL_DMA_IRQHandler+0x304>)
 800fb86:	189a      	adds	r2, r3, r2
 800fb88:	4250      	negs	r0, r2
 800fb8a:	4142      	adcs	r2, r0
 800fb8c:	4252      	negs	r2, r2
 800fb8e:	486a      	ldr	r0, [pc, #424]	; (800fd38 <HAL_DMA_IRQHandler+0x310>)
 800fb90:	4002      	ands	r2, r0
 800fb92:	2080      	movs	r0, #128	; 0x80
 800fb94:	02c0      	lsls	r0, r0, #11
 800fb96:	4684      	mov	ip, r0
 800fb98:	4462      	add	r2, ip
 800fb9a:	e169      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fb9c:	2280      	movs	r2, #128	; 0x80
 800fb9e:	e7c4      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fba0:	2280      	movs	r2, #128	; 0x80
 800fba2:	0112      	lsls	r2, r2, #4
 800fba4:	e7c1      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fba6:	2280      	movs	r2, #128	; 0x80
 800fba8:	0212      	lsls	r2, r2, #8
 800fbaa:	e7be      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbac:	2280      	movs	r2, #128	; 0x80
 800fbae:	0312      	lsls	r2, r2, #12
 800fbb0:	e7bb      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbb2:	2280      	movs	r2, #128	; 0x80
 800fbb4:	0412      	lsls	r2, r2, #16
 800fbb6:	e7b8      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbb8:	2280      	movs	r2, #128	; 0x80
 800fbba:	0512      	lsls	r2, r2, #20
 800fbbc:	e7b5      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbbe:	2208      	movs	r2, #8
 800fbc0:	e7b3      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbc2:	2280      	movs	r2, #128	; 0x80
 800fbc4:	e7b1      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
 800fbc6:	2280      	movs	r2, #128	; 0x80
 800fbc8:	0112      	lsls	r2, r2, #4
 800fbca:	e7ae      	b.n	800fb2a <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	2108      	movs	r1, #8
 800fbd0:	438a      	bics	r2, r1
 800fbd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	4a4a      	ldr	r2, [pc, #296]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d800      	bhi.n	800fbde <HAL_DMA_IRQHandler+0x1b6>
 800fbdc:	e0ae      	b.n	800fd3c <HAL_DMA_IRQHandler+0x314>
 800fbde:	4a4a      	ldr	r2, [pc, #296]	; (800fd08 <HAL_DMA_IRQHandler+0x2e0>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d027      	beq.n	800fc34 <HAL_DMA_IRQHandler+0x20c>
 800fbe4:	4a49      	ldr	r2, [pc, #292]	; (800fd0c <HAL_DMA_IRQHandler+0x2e4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d071      	beq.n	800fcce <HAL_DMA_IRQHandler+0x2a6>
 800fbea:	4a49      	ldr	r2, [pc, #292]	; (800fd10 <HAL_DMA_IRQHandler+0x2e8>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d070      	beq.n	800fcd2 <HAL_DMA_IRQHandler+0x2aa>
 800fbf0:	4a48      	ldr	r2, [pc, #288]	; (800fd14 <HAL_DMA_IRQHandler+0x2ec>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d070      	beq.n	800fcd8 <HAL_DMA_IRQHandler+0x2b0>
 800fbf6:	4a48      	ldr	r2, [pc, #288]	; (800fd18 <HAL_DMA_IRQHandler+0x2f0>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d070      	beq.n	800fcde <HAL_DMA_IRQHandler+0x2b6>
 800fbfc:	4a47      	ldr	r2, [pc, #284]	; (800fd1c <HAL_DMA_IRQHandler+0x2f4>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d070      	beq.n	800fce4 <HAL_DMA_IRQHandler+0x2bc>
 800fc02:	4a3f      	ldr	r2, [pc, #252]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d070      	beq.n	800fcea <HAL_DMA_IRQHandler+0x2c2>
 800fc08:	4a45      	ldr	r2, [pc, #276]	; (800fd20 <HAL_DMA_IRQHandler+0x2f8>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d070      	beq.n	800fcf0 <HAL_DMA_IRQHandler+0x2c8>
 800fc0e:	4a45      	ldr	r2, [pc, #276]	; (800fd24 <HAL_DMA_IRQHandler+0x2fc>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d06f      	beq.n	800fcf4 <HAL_DMA_IRQHandler+0x2cc>
 800fc14:	4a44      	ldr	r2, [pc, #272]	; (800fd28 <HAL_DMA_IRQHandler+0x300>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d06e      	beq.n	800fcf8 <HAL_DMA_IRQHandler+0x2d0>
 800fc1a:	4a44      	ldr	r2, [pc, #272]	; (800fd2c <HAL_DMA_IRQHandler+0x304>)
 800fc1c:	4694      	mov	ip, r2
 800fc1e:	4463      	add	r3, ip
 800fc20:	425a      	negs	r2, r3
 800fc22:	4153      	adcs	r3, r2
 800fc24:	425b      	negs	r3, r3
 800fc26:	4a42      	ldr	r2, [pc, #264]	; (800fd30 <HAL_DMA_IRQHandler+0x308>)
 800fc28:	4013      	ands	r3, r2
 800fc2a:	2280      	movs	r2, #128	; 0x80
 800fc2c:	0312      	lsls	r2, r2, #12
 800fc2e:	4694      	mov	ip, r2
 800fc30:	4463      	add	r3, ip
 800fc32:	e000      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fc34:	2308      	movs	r3, #8
 800fc36:	4a33      	ldr	r2, [pc, #204]	; (800fd04 <HAL_DMA_IRQHandler+0x2dc>)
 800fc38:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fc42:	2321      	movs	r3, #33	; 0x21
 800fc44:	3203      	adds	r2, #3
 800fc46:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 800fc54:	0020      	movs	r0, r4
 800fc56:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc58:	6823      	ldr	r3, [r4, #0]
 800fc5a:	4a29      	ldr	r2, [pc, #164]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d800      	bhi.n	800fc62 <HAL_DMA_IRQHandler+0x23a>
 800fc60:	e766      	b.n	800fb30 <HAL_DMA_IRQHandler+0x108>
 800fc62:	4a28      	ldr	r2, [pc, #160]	; (800fd04 <HAL_DMA_IRQHandler+0x2dc>)
 800fc64:	6811      	ldr	r1, [r2, #0]
 800fc66:	4a28      	ldr	r2, [pc, #160]	; (800fd08 <HAL_DMA_IRQHandler+0x2e0>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d100      	bne.n	800fc6e <HAL_DMA_IRQHandler+0x246>
 800fc6c:	e0ad      	b.n	800fdca <HAL_DMA_IRQHandler+0x3a2>
 800fc6e:	4a27      	ldr	r2, [pc, #156]	; (800fd0c <HAL_DMA_IRQHandler+0x2e4>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d100      	bne.n	800fc76 <HAL_DMA_IRQHandler+0x24e>
 800fc74:	e0e3      	b.n	800fe3e <HAL_DMA_IRQHandler+0x416>
 800fc76:	4a26      	ldr	r2, [pc, #152]	; (800fd10 <HAL_DMA_IRQHandler+0x2e8>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d100      	bne.n	800fc7e <HAL_DMA_IRQHandler+0x256>
 800fc7c:	e0e1      	b.n	800fe42 <HAL_DMA_IRQHandler+0x41a>
 800fc7e:	4a25      	ldr	r2, [pc, #148]	; (800fd14 <HAL_DMA_IRQHandler+0x2ec>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d100      	bne.n	800fc86 <HAL_DMA_IRQHandler+0x25e>
 800fc84:	e0e0      	b.n	800fe48 <HAL_DMA_IRQHandler+0x420>
 800fc86:	4a24      	ldr	r2, [pc, #144]	; (800fd18 <HAL_DMA_IRQHandler+0x2f0>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d100      	bne.n	800fc8e <HAL_DMA_IRQHandler+0x266>
 800fc8c:	e0df      	b.n	800fe4e <HAL_DMA_IRQHandler+0x426>
 800fc8e:	4a23      	ldr	r2, [pc, #140]	; (800fd1c <HAL_DMA_IRQHandler+0x2f4>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d100      	bne.n	800fc96 <HAL_DMA_IRQHandler+0x26e>
 800fc94:	e0de      	b.n	800fe54 <HAL_DMA_IRQHandler+0x42c>
 800fc96:	4a1a      	ldr	r2, [pc, #104]	; (800fd00 <HAL_DMA_IRQHandler+0x2d8>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d100      	bne.n	800fc9e <HAL_DMA_IRQHandler+0x276>
 800fc9c:	e0dd      	b.n	800fe5a <HAL_DMA_IRQHandler+0x432>
 800fc9e:	4a20      	ldr	r2, [pc, #128]	; (800fd20 <HAL_DMA_IRQHandler+0x2f8>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d100      	bne.n	800fca6 <HAL_DMA_IRQHandler+0x27e>
 800fca4:	e0dc      	b.n	800fe60 <HAL_DMA_IRQHandler+0x438>
 800fca6:	4a1f      	ldr	r2, [pc, #124]	; (800fd24 <HAL_DMA_IRQHandler+0x2fc>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d100      	bne.n	800fcae <HAL_DMA_IRQHandler+0x286>
 800fcac:	e0da      	b.n	800fe64 <HAL_DMA_IRQHandler+0x43c>
 800fcae:	4a1e      	ldr	r2, [pc, #120]	; (800fd28 <HAL_DMA_IRQHandler+0x300>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d100      	bne.n	800fcb6 <HAL_DMA_IRQHandler+0x28e>
 800fcb4:	e0d8      	b.n	800fe68 <HAL_DMA_IRQHandler+0x440>
 800fcb6:	4a1d      	ldr	r2, [pc, #116]	; (800fd2c <HAL_DMA_IRQHandler+0x304>)
 800fcb8:	189a      	adds	r2, r3, r2
 800fcba:	4250      	negs	r0, r2
 800fcbc:	4142      	adcs	r2, r0
 800fcbe:	4252      	negs	r2, r2
 800fcc0:	481d      	ldr	r0, [pc, #116]	; (800fd38 <HAL_DMA_IRQHandler+0x310>)
 800fcc2:	4002      	ands	r2, r0
 800fcc4:	2080      	movs	r0, #128	; 0x80
 800fcc6:	02c0      	lsls	r0, r0, #11
 800fcc8:	4684      	mov	ip, r0
 800fcca:	4462      	add	r2, ip
 800fccc:	e07e      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fcce:	2380      	movs	r3, #128	; 0x80
 800fcd0:	e7b1      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcd2:	2380      	movs	r3, #128	; 0x80
 800fcd4:	011b      	lsls	r3, r3, #4
 800fcd6:	e7ae      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcd8:	2380      	movs	r3, #128	; 0x80
 800fcda:	021b      	lsls	r3, r3, #8
 800fcdc:	e7ab      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcde:	2380      	movs	r3, #128	; 0x80
 800fce0:	031b      	lsls	r3, r3, #12
 800fce2:	e7a8      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fce4:	2380      	movs	r3, #128	; 0x80
 800fce6:	041b      	lsls	r3, r3, #16
 800fce8:	e7a5      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcea:	2380      	movs	r3, #128	; 0x80
 800fcec:	051b      	lsls	r3, r3, #20
 800fcee:	e7a2      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcf0:	2308      	movs	r3, #8
 800fcf2:	e7a0      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcf4:	2380      	movs	r3, #128	; 0x80
 800fcf6:	e79e      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcf8:	2380      	movs	r3, #128	; 0x80
 800fcfa:	011b      	lsls	r3, r3, #4
 800fcfc:	e79b      	b.n	800fc36 <HAL_DMA_IRQHandler+0x20e>
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	40020080 	.word	0x40020080
 800fd04:	40020400 	.word	0x40020400
 800fd08:	40020008 	.word	0x40020008
 800fd0c:	4002001c 	.word	0x4002001c
 800fd10:	40020030 	.word	0x40020030
 800fd14:	40020044 	.word	0x40020044
 800fd18:	40020058 	.word	0x40020058
 800fd1c:	4002006c 	.word	0x4002006c
 800fd20:	40020408 	.word	0x40020408
 800fd24:	4002041c 	.word	0x4002041c
 800fd28:	40020430 	.word	0x40020430
 800fd2c:	bffdfbbc 	.word	0xbffdfbbc
 800fd30:	fff88000 	.word	0xfff88000
 800fd34:	40020000 	.word	0x40020000
 800fd38:	fffc4000 	.word	0xfffc4000
 800fd3c:	4aaa      	ldr	r2, [pc, #680]	; (800ffe8 <HAL_DMA_IRQHandler+0x5c0>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d027      	beq.n	800fd92 <HAL_DMA_IRQHandler+0x36a>
 800fd42:	4aaa      	ldr	r2, [pc, #680]	; (800ffec <HAL_DMA_IRQHandler+0x5c4>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d028      	beq.n	800fd9a <HAL_DMA_IRQHandler+0x372>
 800fd48:	4aa9      	ldr	r2, [pc, #676]	; (800fff0 <HAL_DMA_IRQHandler+0x5c8>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d027      	beq.n	800fd9e <HAL_DMA_IRQHandler+0x376>
 800fd4e:	4aa9      	ldr	r2, [pc, #676]	; (800fff4 <HAL_DMA_IRQHandler+0x5cc>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d027      	beq.n	800fda4 <HAL_DMA_IRQHandler+0x37c>
 800fd54:	4aa8      	ldr	r2, [pc, #672]	; (800fff8 <HAL_DMA_IRQHandler+0x5d0>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d027      	beq.n	800fdaa <HAL_DMA_IRQHandler+0x382>
 800fd5a:	4aa8      	ldr	r2, [pc, #672]	; (800fffc <HAL_DMA_IRQHandler+0x5d4>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d027      	beq.n	800fdb0 <HAL_DMA_IRQHandler+0x388>
 800fd60:	4aa7      	ldr	r2, [pc, #668]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d027      	beq.n	800fdb6 <HAL_DMA_IRQHandler+0x38e>
 800fd66:	4aa7      	ldr	r2, [pc, #668]	; (8010004 <HAL_DMA_IRQHandler+0x5dc>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d027      	beq.n	800fdbc <HAL_DMA_IRQHandler+0x394>
 800fd6c:	4aa6      	ldr	r2, [pc, #664]	; (8010008 <HAL_DMA_IRQHandler+0x5e0>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d026      	beq.n	800fdc0 <HAL_DMA_IRQHandler+0x398>
 800fd72:	4aa6      	ldr	r2, [pc, #664]	; (801000c <HAL_DMA_IRQHandler+0x5e4>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d025      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x39c>
 800fd78:	4aa5      	ldr	r2, [pc, #660]	; (8010010 <HAL_DMA_IRQHandler+0x5e8>)
 800fd7a:	4694      	mov	ip, r2
 800fd7c:	4463      	add	r3, ip
 800fd7e:	425a      	negs	r2, r3
 800fd80:	4153      	adcs	r3, r2
 800fd82:	425b      	negs	r3, r3
 800fd84:	4aa3      	ldr	r2, [pc, #652]	; (8010014 <HAL_DMA_IRQHandler+0x5ec>)
 800fd86:	4013      	ands	r3, r2
 800fd88:	2280      	movs	r2, #128	; 0x80
 800fd8a:	0312      	lsls	r2, r2, #12
 800fd8c:	4694      	mov	ip, r2
 800fd8e:	4463      	add	r3, ip
 800fd90:	e000      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fd92:	2308      	movs	r3, #8
 800fd94:	4aa0      	ldr	r2, [pc, #640]	; (8010018 <HAL_DMA_IRQHandler+0x5f0>)
 800fd96:	6053      	str	r3, [r2, #4]
 800fd98:	e74f      	b.n	800fc3a <HAL_DMA_IRQHandler+0x212>
 800fd9a:	2380      	movs	r3, #128	; 0x80
 800fd9c:	e7fa      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fd9e:	2380      	movs	r3, #128	; 0x80
 800fda0:	011b      	lsls	r3, r3, #4
 800fda2:	e7f7      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fda4:	2380      	movs	r3, #128	; 0x80
 800fda6:	021b      	lsls	r3, r3, #8
 800fda8:	e7f4      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdaa:	2380      	movs	r3, #128	; 0x80
 800fdac:	031b      	lsls	r3, r3, #12
 800fdae:	e7f1      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdb0:	2380      	movs	r3, #128	; 0x80
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	e7ee      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdb6:	2380      	movs	r3, #128	; 0x80
 800fdb8:	051b      	lsls	r3, r3, #20
 800fdba:	e7eb      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdbc:	2308      	movs	r3, #8
 800fdbe:	e7e9      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdc0:	2380      	movs	r3, #128	; 0x80
 800fdc2:	e7e7      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
 800fdc4:	2380      	movs	r3, #128	; 0x80
 800fdc6:	011b      	lsls	r3, r3, #4
 800fdc8:	e7e4      	b.n	800fd94 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdca:	2204      	movs	r2, #4
 800fdcc:	420a      	tst	r2, r1
 800fdce:	d152      	bne.n	800fe76 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fdd0:	6821      	ldr	r1, [r4, #0]
 800fdd2:	4b92      	ldr	r3, [pc, #584]	; (801001c <HAL_DMA_IRQHandler+0x5f4>)
 800fdd4:	6818      	ldr	r0, [r3, #0]
 800fdd6:	4a84      	ldr	r2, [pc, #528]	; (800ffe8 <HAL_DMA_IRQHandler+0x5c0>)
 800fdd8:	4291      	cmp	r1, r2
 800fdda:	d100      	bne.n	800fdde <HAL_DMA_IRQHandler+0x3b6>
 800fddc:	e16b      	b.n	80100b6 <HAL_DMA_IRQHandler+0x68e>
 800fdde:	4a83      	ldr	r2, [pc, #524]	; (800ffec <HAL_DMA_IRQHandler+0x5c4>)
 800fde0:	4291      	cmp	r1, r2
 800fde2:	d100      	bne.n	800fde6 <HAL_DMA_IRQHandler+0x3be>
 800fde4:	e1aa      	b.n	801013c <HAL_DMA_IRQHandler+0x714>
 800fde6:	4a82      	ldr	r2, [pc, #520]	; (800fff0 <HAL_DMA_IRQHandler+0x5c8>)
 800fde8:	4291      	cmp	r1, r2
 800fdea:	d100      	bne.n	800fdee <HAL_DMA_IRQHandler+0x3c6>
 800fdec:	e1a8      	b.n	8010140 <HAL_DMA_IRQHandler+0x718>
 800fdee:	4a81      	ldr	r2, [pc, #516]	; (800fff4 <HAL_DMA_IRQHandler+0x5cc>)
 800fdf0:	4291      	cmp	r1, r2
 800fdf2:	d100      	bne.n	800fdf6 <HAL_DMA_IRQHandler+0x3ce>
 800fdf4:	e1a7      	b.n	8010146 <HAL_DMA_IRQHandler+0x71e>
 800fdf6:	4b80      	ldr	r3, [pc, #512]	; (800fff8 <HAL_DMA_IRQHandler+0x5d0>)
 800fdf8:	4299      	cmp	r1, r3
 800fdfa:	d100      	bne.n	800fdfe <HAL_DMA_IRQHandler+0x3d6>
 800fdfc:	e1a6      	b.n	801014c <HAL_DMA_IRQHandler+0x724>
 800fdfe:	4b7f      	ldr	r3, [pc, #508]	; (800fffc <HAL_DMA_IRQHandler+0x5d4>)
 800fe00:	4299      	cmp	r1, r3
 800fe02:	d100      	bne.n	800fe06 <HAL_DMA_IRQHandler+0x3de>
 800fe04:	e1a5      	b.n	8010152 <HAL_DMA_IRQHandler+0x72a>
 800fe06:	4b7e      	ldr	r3, [pc, #504]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800fe08:	4299      	cmp	r1, r3
 800fe0a:	d100      	bne.n	800fe0e <HAL_DMA_IRQHandler+0x3e6>
 800fe0c:	e1a4      	b.n	8010158 <HAL_DMA_IRQHandler+0x730>
 800fe0e:	4b7d      	ldr	r3, [pc, #500]	; (8010004 <HAL_DMA_IRQHandler+0x5dc>)
 800fe10:	4299      	cmp	r1, r3
 800fe12:	d100      	bne.n	800fe16 <HAL_DMA_IRQHandler+0x3ee>
 800fe14:	e1a3      	b.n	801015e <HAL_DMA_IRQHandler+0x736>
 800fe16:	4b7c      	ldr	r3, [pc, #496]	; (8010008 <HAL_DMA_IRQHandler+0x5e0>)
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	d100      	bne.n	800fe1e <HAL_DMA_IRQHandler+0x3f6>
 800fe1c:	e1a1      	b.n	8010162 <HAL_DMA_IRQHandler+0x73a>
 800fe1e:	4b7b      	ldr	r3, [pc, #492]	; (801000c <HAL_DMA_IRQHandler+0x5e4>)
 800fe20:	4299      	cmp	r1, r3
 800fe22:	d100      	bne.n	800fe26 <HAL_DMA_IRQHandler+0x3fe>
 800fe24:	e19f      	b.n	8010166 <HAL_DMA_IRQHandler+0x73e>
 800fe26:	4b7a      	ldr	r3, [pc, #488]	; (8010010 <HAL_DMA_IRQHandler+0x5e8>)
 800fe28:	18ca      	adds	r2, r1, r3
 800fe2a:	4253      	negs	r3, r2
 800fe2c:	415a      	adcs	r2, r3
 800fe2e:	4252      	negs	r2, r2
 800fe30:	4b7b      	ldr	r3, [pc, #492]	; (8010020 <HAL_DMA_IRQHandler+0x5f8>)
 800fe32:	4013      	ands	r3, r2
 800fe34:	2280      	movs	r2, #128	; 0x80
 800fe36:	0292      	lsls	r2, r2, #10
 800fe38:	4694      	mov	ip, r2
 800fe3a:	4463      	add	r3, ip
 800fe3c:	e13c      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe3e:	2240      	movs	r2, #64	; 0x40
 800fe40:	e7c4      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe42:	2280      	movs	r2, #128	; 0x80
 800fe44:	00d2      	lsls	r2, r2, #3
 800fe46:	e7c1      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe48:	2280      	movs	r2, #128	; 0x80
 800fe4a:	01d2      	lsls	r2, r2, #7
 800fe4c:	e7be      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe4e:	2280      	movs	r2, #128	; 0x80
 800fe50:	02d2      	lsls	r2, r2, #11
 800fe52:	e7bb      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe54:	2280      	movs	r2, #128	; 0x80
 800fe56:	03d2      	lsls	r2, r2, #15
 800fe58:	e7b8      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe5a:	2280      	movs	r2, #128	; 0x80
 800fe5c:	04d2      	lsls	r2, r2, #19
 800fe5e:	e7b5      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe60:	2204      	movs	r2, #4
 800fe62:	e7b3      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe64:	2240      	movs	r2, #64	; 0x40
 800fe66:	e7b1      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe68:	2280      	movs	r2, #128	; 0x80
 800fe6a:	00d2      	lsls	r2, r2, #3
 800fe6c:	e7ae      	b.n	800fdcc <HAL_DMA_IRQHandler+0x3a4>
 800fe6e:	2204      	movs	r2, #4
 800fe70:	420a      	tst	r2, r1
 800fe72:	d100      	bne.n	800fe76 <HAL_DMA_IRQHandler+0x44e>
 800fe74:	e208      	b.n	8010288 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	0752      	lsls	r2, r2, #29
 800fe7a:	d561      	bpl.n	800ff40 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	0692      	lsls	r2, r2, #26
 800fe80:	d403      	bmi.n	800fe8a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	2104      	movs	r1, #4
 800fe86:	438a      	bics	r2, r1
 800fe88:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	4a5c      	ldr	r2, [pc, #368]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d800      	bhi.n	800fe94 <HAL_DMA_IRQHandler+0x46c>
 800fe92:	e0c9      	b.n	8010028 <HAL_DMA_IRQHandler+0x600>
 800fe94:	4a54      	ldr	r2, [pc, #336]	; (800ffe8 <HAL_DMA_IRQHandler+0x5c0>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d047      	beq.n	800ff2a <HAL_DMA_IRQHandler+0x502>
 800fe9a:	4a54      	ldr	r2, [pc, #336]	; (800ffec <HAL_DMA_IRQHandler+0x5c4>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d100      	bne.n	800fea2 <HAL_DMA_IRQHandler+0x47a>
 800fea0:	e089      	b.n	800ffb6 <HAL_DMA_IRQHandler+0x58e>
 800fea2:	4a53      	ldr	r2, [pc, #332]	; (800fff0 <HAL_DMA_IRQHandler+0x5c8>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d100      	bne.n	800feaa <HAL_DMA_IRQHandler+0x482>
 800fea8:	e087      	b.n	800ffba <HAL_DMA_IRQHandler+0x592>
 800feaa:	4a52      	ldr	r2, [pc, #328]	; (800fff4 <HAL_DMA_IRQHandler+0x5cc>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d100      	bne.n	800feb2 <HAL_DMA_IRQHandler+0x48a>
 800feb0:	e086      	b.n	800ffc0 <HAL_DMA_IRQHandler+0x598>
 800feb2:	4a51      	ldr	r2, [pc, #324]	; (800fff8 <HAL_DMA_IRQHandler+0x5d0>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d100      	bne.n	800feba <HAL_DMA_IRQHandler+0x492>
 800feb8:	e085      	b.n	800ffc6 <HAL_DMA_IRQHandler+0x59e>
 800feba:	4a50      	ldr	r2, [pc, #320]	; (800fffc <HAL_DMA_IRQHandler+0x5d4>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d100      	bne.n	800fec2 <HAL_DMA_IRQHandler+0x49a>
 800fec0:	e084      	b.n	800ffcc <HAL_DMA_IRQHandler+0x5a4>
 800fec2:	4a4f      	ldr	r2, [pc, #316]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d100      	bne.n	800feca <HAL_DMA_IRQHandler+0x4a2>
 800fec8:	e083      	b.n	800ffd2 <HAL_DMA_IRQHandler+0x5aa>
 800feca:	4a4e      	ldr	r2, [pc, #312]	; (8010004 <HAL_DMA_IRQHandler+0x5dc>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d100      	bne.n	800fed2 <HAL_DMA_IRQHandler+0x4aa>
 800fed0:	e082      	b.n	800ffd8 <HAL_DMA_IRQHandler+0x5b0>
 800fed2:	4a4d      	ldr	r2, [pc, #308]	; (8010008 <HAL_DMA_IRQHandler+0x5e0>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d100      	bne.n	800feda <HAL_DMA_IRQHandler+0x4b2>
 800fed8:	e080      	b.n	800ffdc <HAL_DMA_IRQHandler+0x5b4>
 800feda:	4a4c      	ldr	r2, [pc, #304]	; (801000c <HAL_DMA_IRQHandler+0x5e4>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d07f      	beq.n	800ffe0 <HAL_DMA_IRQHandler+0x5b8>
 800fee0:	4a4b      	ldr	r2, [pc, #300]	; (8010010 <HAL_DMA_IRQHandler+0x5e8>)
 800fee2:	4694      	mov	ip, r2
 800fee4:	4463      	add	r3, ip
 800fee6:	425a      	negs	r2, r3
 800fee8:	4153      	adcs	r3, r2
 800feea:	425b      	negs	r3, r3
 800feec:	4a4d      	ldr	r2, [pc, #308]	; (8010024 <HAL_DMA_IRQHandler+0x5fc>)
 800feee:	4013      	ands	r3, r2
 800fef0:	2280      	movs	r2, #128	; 0x80
 800fef2:	02d2      	lsls	r2, r2, #11
 800fef4:	4694      	mov	ip, r2
 800fef6:	4463      	add	r3, ip
 800fef8:	e018      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fefa:	2240      	movs	r2, #64	; 0x40
 800fefc:	e7b8      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800fefe:	2280      	movs	r2, #128	; 0x80
 800ff00:	00d2      	lsls	r2, r2, #3
 800ff02:	e7b5      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff04:	2280      	movs	r2, #128	; 0x80
 800ff06:	01d2      	lsls	r2, r2, #7
 800ff08:	e7b2      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff0a:	2280      	movs	r2, #128	; 0x80
 800ff0c:	02d2      	lsls	r2, r2, #11
 800ff0e:	e7af      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff10:	2280      	movs	r2, #128	; 0x80
 800ff12:	03d2      	lsls	r2, r2, #15
 800ff14:	e7ac      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff16:	2280      	movs	r2, #128	; 0x80
 800ff18:	04d2      	lsls	r2, r2, #19
 800ff1a:	e7a9      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff1c:	2204      	movs	r2, #4
 800ff1e:	e7a7      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff20:	2240      	movs	r2, #64	; 0x40
 800ff22:	e7a5      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
 800ff24:	2280      	movs	r2, #128	; 0x80
 800ff26:	00d2      	lsls	r2, r2, #3
 800ff28:	e7a2      	b.n	800fe70 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ff2a:	2304      	movs	r3, #4
 800ff2c:	4a3b      	ldr	r2, [pc, #236]	; (801001c <HAL_DMA_IRQHandler+0x5f4>)
 800ff2e:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800ff30:	2321      	movs	r3, #33	; 0x21
 800ff32:	2211      	movs	r2, #17
 800ff34:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800ff36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 800ff3c:	0020      	movs	r0, r4
 800ff3e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800ff40:	6821      	ldr	r1, [r4, #0]
 800ff42:	4b2f      	ldr	r3, [pc, #188]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800ff44:	4299      	cmp	r1, r3
 800ff46:	d900      	bls.n	800ff4a <HAL_DMA_IRQHandler+0x522>
 800ff48:	e743      	b.n	800fdd2 <HAL_DMA_IRQHandler+0x3aa>
 800ff4a:	4b33      	ldr	r3, [pc, #204]	; (8010018 <HAL_DMA_IRQHandler+0x5f0>)
 800ff4c:	6818      	ldr	r0, [r3, #0]
 800ff4e:	4a26      	ldr	r2, [pc, #152]	; (800ffe8 <HAL_DMA_IRQHandler+0x5c0>)
 800ff50:	4291      	cmp	r1, r2
 800ff52:	d100      	bne.n	800ff56 <HAL_DMA_IRQHandler+0x52e>
 800ff54:	e10a      	b.n	801016c <HAL_DMA_IRQHandler+0x744>
 800ff56:	4a25      	ldr	r2, [pc, #148]	; (800ffec <HAL_DMA_IRQHandler+0x5c4>)
 800ff58:	4291      	cmp	r1, r2
 800ff5a:	d100      	bne.n	800ff5e <HAL_DMA_IRQHandler+0x536>
 800ff5c:	e10c      	b.n	8010178 <HAL_DMA_IRQHandler+0x750>
 800ff5e:	4a24      	ldr	r2, [pc, #144]	; (800fff0 <HAL_DMA_IRQHandler+0x5c8>)
 800ff60:	4291      	cmp	r1, r2
 800ff62:	d100      	bne.n	800ff66 <HAL_DMA_IRQHandler+0x53e>
 800ff64:	e10a      	b.n	801017c <HAL_DMA_IRQHandler+0x754>
 800ff66:	4a23      	ldr	r2, [pc, #140]	; (800fff4 <HAL_DMA_IRQHandler+0x5cc>)
 800ff68:	4291      	cmp	r1, r2
 800ff6a:	d100      	bne.n	800ff6e <HAL_DMA_IRQHandler+0x546>
 800ff6c:	e109      	b.n	8010182 <HAL_DMA_IRQHandler+0x75a>
 800ff6e:	4b22      	ldr	r3, [pc, #136]	; (800fff8 <HAL_DMA_IRQHandler+0x5d0>)
 800ff70:	4299      	cmp	r1, r3
 800ff72:	d100      	bne.n	800ff76 <HAL_DMA_IRQHandler+0x54e>
 800ff74:	e108      	b.n	8010188 <HAL_DMA_IRQHandler+0x760>
 800ff76:	4b21      	ldr	r3, [pc, #132]	; (800fffc <HAL_DMA_IRQHandler+0x5d4>)
 800ff78:	4299      	cmp	r1, r3
 800ff7a:	d100      	bne.n	800ff7e <HAL_DMA_IRQHandler+0x556>
 800ff7c:	e107      	b.n	801018e <HAL_DMA_IRQHandler+0x766>
 800ff7e:	4b20      	ldr	r3, [pc, #128]	; (8010000 <HAL_DMA_IRQHandler+0x5d8>)
 800ff80:	4299      	cmp	r1, r3
 800ff82:	d100      	bne.n	800ff86 <HAL_DMA_IRQHandler+0x55e>
 800ff84:	e106      	b.n	8010194 <HAL_DMA_IRQHandler+0x76c>
 800ff86:	4b1f      	ldr	r3, [pc, #124]	; (8010004 <HAL_DMA_IRQHandler+0x5dc>)
 800ff88:	4299      	cmp	r1, r3
 800ff8a:	d100      	bne.n	800ff8e <HAL_DMA_IRQHandler+0x566>
 800ff8c:	e105      	b.n	801019a <HAL_DMA_IRQHandler+0x772>
 800ff8e:	4b1e      	ldr	r3, [pc, #120]	; (8010008 <HAL_DMA_IRQHandler+0x5e0>)
 800ff90:	4299      	cmp	r1, r3
 800ff92:	d100      	bne.n	800ff96 <HAL_DMA_IRQHandler+0x56e>
 800ff94:	e103      	b.n	801019e <HAL_DMA_IRQHandler+0x776>
 800ff96:	4b1d      	ldr	r3, [pc, #116]	; (801000c <HAL_DMA_IRQHandler+0x5e4>)
 800ff98:	4299      	cmp	r1, r3
 800ff9a:	d100      	bne.n	800ff9e <HAL_DMA_IRQHandler+0x576>
 800ff9c:	e101      	b.n	80101a2 <HAL_DMA_IRQHandler+0x77a>
 800ff9e:	4b1c      	ldr	r3, [pc, #112]	; (8010010 <HAL_DMA_IRQHandler+0x5e8>)
 800ffa0:	18ca      	adds	r2, r1, r3
 800ffa2:	4253      	negs	r3, r2
 800ffa4:	415a      	adcs	r2, r3
 800ffa6:	4252      	negs	r2, r2
 800ffa8:	4b1d      	ldr	r3, [pc, #116]	; (8010020 <HAL_DMA_IRQHandler+0x5f8>)
 800ffaa:	4013      	ands	r3, r2
 800ffac:	2280      	movs	r2, #128	; 0x80
 800ffae:	0292      	lsls	r2, r2, #10
 800ffb0:	4694      	mov	ip, r2
 800ffb2:	4463      	add	r3, ip
 800ffb4:	e0db      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ffb6:	2340      	movs	r3, #64	; 0x40
 800ffb8:	e7b8      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffba:	2380      	movs	r3, #128	; 0x80
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	e7b5      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffc0:	2380      	movs	r3, #128	; 0x80
 800ffc2:	01db      	lsls	r3, r3, #7
 800ffc4:	e7b2      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffc6:	2380      	movs	r3, #128	; 0x80
 800ffc8:	02db      	lsls	r3, r3, #11
 800ffca:	e7af      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffcc:	2380      	movs	r3, #128	; 0x80
 800ffce:	03db      	lsls	r3, r3, #15
 800ffd0:	e7ac      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffd2:	2380      	movs	r3, #128	; 0x80
 800ffd4:	04db      	lsls	r3, r3, #19
 800ffd6:	e7a9      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffd8:	2304      	movs	r3, #4
 800ffda:	e7a7      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffdc:	2340      	movs	r3, #64	; 0x40
 800ffde:	e7a5      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffe0:	2380      	movs	r3, #128	; 0x80
 800ffe2:	00db      	lsls	r3, r3, #3
 800ffe4:	e7a2      	b.n	800ff2c <HAL_DMA_IRQHandler+0x504>
 800ffe6:	46c0      	nop			; (mov r8, r8)
 800ffe8:	40020008 	.word	0x40020008
 800ffec:	4002001c 	.word	0x4002001c
 800fff0:	40020030 	.word	0x40020030
 800fff4:	40020044 	.word	0x40020044
 800fff8:	40020058 	.word	0x40020058
 800fffc:	4002006c 	.word	0x4002006c
 8010000:	40020080 	.word	0x40020080
 8010004:	40020408 	.word	0x40020408
 8010008:	4002041c 	.word	0x4002041c
 801000c:	40020430 	.word	0x40020430
 8010010:	bffdfbbc 	.word	0xbffdfbbc
 8010014:	fff88000 	.word	0xfff88000
 8010018:	40020000 	.word	0x40020000
 801001c:	40020400 	.word	0x40020400
 8010020:	fffe2000 	.word	0xfffe2000
 8010024:	fffc4000 	.word	0xfffc4000
 8010028:	4a9b      	ldr	r2, [pc, #620]	; (8010298 <HAL_DMA_IRQHandler+0x870>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d027      	beq.n	801007e <HAL_DMA_IRQHandler+0x656>
 801002e:	4a9b      	ldr	r2, [pc, #620]	; (801029c <HAL_DMA_IRQHandler+0x874>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d028      	beq.n	8010086 <HAL_DMA_IRQHandler+0x65e>
 8010034:	4a9a      	ldr	r2, [pc, #616]	; (80102a0 <HAL_DMA_IRQHandler+0x878>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d027      	beq.n	801008a <HAL_DMA_IRQHandler+0x662>
 801003a:	4a9a      	ldr	r2, [pc, #616]	; (80102a4 <HAL_DMA_IRQHandler+0x87c>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d027      	beq.n	8010090 <HAL_DMA_IRQHandler+0x668>
 8010040:	4a99      	ldr	r2, [pc, #612]	; (80102a8 <HAL_DMA_IRQHandler+0x880>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d027      	beq.n	8010096 <HAL_DMA_IRQHandler+0x66e>
 8010046:	4a99      	ldr	r2, [pc, #612]	; (80102ac <HAL_DMA_IRQHandler+0x884>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d027      	beq.n	801009c <HAL_DMA_IRQHandler+0x674>
 801004c:	4a98      	ldr	r2, [pc, #608]	; (80102b0 <HAL_DMA_IRQHandler+0x888>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d027      	beq.n	80100a2 <HAL_DMA_IRQHandler+0x67a>
 8010052:	4a98      	ldr	r2, [pc, #608]	; (80102b4 <HAL_DMA_IRQHandler+0x88c>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d027      	beq.n	80100a8 <HAL_DMA_IRQHandler+0x680>
 8010058:	4a97      	ldr	r2, [pc, #604]	; (80102b8 <HAL_DMA_IRQHandler+0x890>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d026      	beq.n	80100ac <HAL_DMA_IRQHandler+0x684>
 801005e:	4a97      	ldr	r2, [pc, #604]	; (80102bc <HAL_DMA_IRQHandler+0x894>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d025      	beq.n	80100b0 <HAL_DMA_IRQHandler+0x688>
 8010064:	4a96      	ldr	r2, [pc, #600]	; (80102c0 <HAL_DMA_IRQHandler+0x898>)
 8010066:	4694      	mov	ip, r2
 8010068:	4463      	add	r3, ip
 801006a:	425a      	negs	r2, r3
 801006c:	4153      	adcs	r3, r2
 801006e:	425b      	negs	r3, r3
 8010070:	4a94      	ldr	r2, [pc, #592]	; (80102c4 <HAL_DMA_IRQHandler+0x89c>)
 8010072:	4013      	ands	r3, r2
 8010074:	2280      	movs	r2, #128	; 0x80
 8010076:	02d2      	lsls	r2, r2, #11
 8010078:	4694      	mov	ip, r2
 801007a:	4463      	add	r3, ip
 801007c:	e000      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 801007e:	2304      	movs	r3, #4
 8010080:	4a91      	ldr	r2, [pc, #580]	; (80102c8 <HAL_DMA_IRQHandler+0x8a0>)
 8010082:	6053      	str	r3, [r2, #4]
 8010084:	e754      	b.n	800ff30 <HAL_DMA_IRQHandler+0x508>
 8010086:	2340      	movs	r3, #64	; 0x40
 8010088:	e7fa      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 801008a:	2380      	movs	r3, #128	; 0x80
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	e7f7      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 8010090:	2380      	movs	r3, #128	; 0x80
 8010092:	01db      	lsls	r3, r3, #7
 8010094:	e7f4      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 8010096:	2380      	movs	r3, #128	; 0x80
 8010098:	02db      	lsls	r3, r3, #11
 801009a:	e7f1      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 801009c:	2380      	movs	r3, #128	; 0x80
 801009e:	03db      	lsls	r3, r3, #15
 80100a0:	e7ee      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 80100a2:	2380      	movs	r3, #128	; 0x80
 80100a4:	04db      	lsls	r3, r3, #19
 80100a6:	e7eb      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 80100a8:	2304      	movs	r3, #4
 80100aa:	e7e9      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 80100ac:	2340      	movs	r3, #64	; 0x40
 80100ae:	e7e7      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
 80100b0:	2380      	movs	r3, #128	; 0x80
 80100b2:	00db      	lsls	r3, r3, #3
 80100b4:	e7e4      	b.n	8010080 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80100b6:	2302      	movs	r3, #2
 80100b8:	4003      	ands	r3, r0
 80100ba:	1e5a      	subs	r2, r3, #1
 80100bc:	4193      	sbcs	r3, r2
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d100      	bne.n	80100c6 <HAL_DMA_IRQHandler+0x69e>
 80100c4:	e080      	b.n	80101c8 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80100c6:	680b      	ldr	r3, [r1, #0]
 80100c8:	079b      	lsls	r3, r3, #30
 80100ca:	d57d      	bpl.n	80101c8 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80100cc:	680b      	ldr	r3, [r1, #0]
 80100ce:	069b      	lsls	r3, r3, #26
 80100d0:	d403      	bmi.n	80100da <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80100d2:	680b      	ldr	r3, [r1, #0]
 80100d4:	2202      	movs	r2, #2
 80100d6:	4393      	bics	r3, r2
 80100d8:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	4a74      	ldr	r2, [pc, #464]	; (80102b0 <HAL_DMA_IRQHandler+0x888>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d800      	bhi.n	80100e4 <HAL_DMA_IRQHandler+0x6bc>
 80100e2:	e08a      	b.n	80101fa <HAL_DMA_IRQHandler+0x7d2>
 80100e4:	4a6c      	ldr	r2, [pc, #432]	; (8010298 <HAL_DMA_IRQHandler+0x870>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d05e      	beq.n	80101a8 <HAL_DMA_IRQHandler+0x780>
 80100ea:	4a6c      	ldr	r2, [pc, #432]	; (801029c <HAL_DMA_IRQHandler+0x874>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d100      	bne.n	80100f2 <HAL_DMA_IRQHandler+0x6ca>
 80100f0:	e06b      	b.n	80101ca <HAL_DMA_IRQHandler+0x7a2>
 80100f2:	4a6b      	ldr	r2, [pc, #428]	; (80102a0 <HAL_DMA_IRQHandler+0x878>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d06a      	beq.n	80101ce <HAL_DMA_IRQHandler+0x7a6>
 80100f8:	4a6a      	ldr	r2, [pc, #424]	; (80102a4 <HAL_DMA_IRQHandler+0x87c>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d06a      	beq.n	80101d4 <HAL_DMA_IRQHandler+0x7ac>
 80100fe:	4a6a      	ldr	r2, [pc, #424]	; (80102a8 <HAL_DMA_IRQHandler+0x880>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d06a      	beq.n	80101da <HAL_DMA_IRQHandler+0x7b2>
 8010104:	4a69      	ldr	r2, [pc, #420]	; (80102ac <HAL_DMA_IRQHandler+0x884>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d06a      	beq.n	80101e0 <HAL_DMA_IRQHandler+0x7b8>
 801010a:	4a69      	ldr	r2, [pc, #420]	; (80102b0 <HAL_DMA_IRQHandler+0x888>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d06a      	beq.n	80101e6 <HAL_DMA_IRQHandler+0x7be>
 8010110:	4a68      	ldr	r2, [pc, #416]	; (80102b4 <HAL_DMA_IRQHandler+0x88c>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d06a      	beq.n	80101ec <HAL_DMA_IRQHandler+0x7c4>
 8010116:	4a68      	ldr	r2, [pc, #416]	; (80102b8 <HAL_DMA_IRQHandler+0x890>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d069      	beq.n	80101f0 <HAL_DMA_IRQHandler+0x7c8>
 801011c:	4a67      	ldr	r2, [pc, #412]	; (80102bc <HAL_DMA_IRQHandler+0x894>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d068      	beq.n	80101f4 <HAL_DMA_IRQHandler+0x7cc>
 8010122:	4a67      	ldr	r2, [pc, #412]	; (80102c0 <HAL_DMA_IRQHandler+0x898>)
 8010124:	4694      	mov	ip, r2
 8010126:	4463      	add	r3, ip
 8010128:	425a      	negs	r2, r3
 801012a:	4153      	adcs	r3, r2
 801012c:	425b      	negs	r3, r3
 801012e:	4a67      	ldr	r2, [pc, #412]	; (80102cc <HAL_DMA_IRQHandler+0x8a4>)
 8010130:	4013      	ands	r3, r2
 8010132:	2280      	movs	r2, #128	; 0x80
 8010134:	0292      	lsls	r2, r2, #10
 8010136:	4694      	mov	ip, r2
 8010138:	4463      	add	r3, ip
 801013a:	e036      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801013c:	2320      	movs	r3, #32
 801013e:	e7bb      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010140:	2380      	movs	r3, #128	; 0x80
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	e7b8      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010146:	2380      	movs	r3, #128	; 0x80
 8010148:	019b      	lsls	r3, r3, #6
 801014a:	e7b5      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 801014c:	2380      	movs	r3, #128	; 0x80
 801014e:	029b      	lsls	r3, r3, #10
 8010150:	e7b2      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010152:	2380      	movs	r3, #128	; 0x80
 8010154:	039b      	lsls	r3, r3, #14
 8010156:	e7af      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010158:	2380      	movs	r3, #128	; 0x80
 801015a:	049b      	lsls	r3, r3, #18
 801015c:	e7ac      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 801015e:	2302      	movs	r3, #2
 8010160:	e7aa      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010162:	2320      	movs	r3, #32
 8010164:	e7a8      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 8010166:	2380      	movs	r3, #128	; 0x80
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	e7a5      	b.n	80100b8 <HAL_DMA_IRQHandler+0x690>
 801016c:	2302      	movs	r3, #2
 801016e:	4003      	ands	r3, r0
 8010170:	1e5a      	subs	r2, r3, #1
 8010172:	4193      	sbcs	r3, r2
 8010174:	b2db      	uxtb	r3, r3
 8010176:	e7a3      	b.n	80100c0 <HAL_DMA_IRQHandler+0x698>
 8010178:	2320      	movs	r3, #32
 801017a:	e7f8      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 801017c:	2380      	movs	r3, #128	; 0x80
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	e7f5      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 8010182:	2380      	movs	r3, #128	; 0x80
 8010184:	019b      	lsls	r3, r3, #6
 8010186:	e7f2      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 8010188:	2380      	movs	r3, #128	; 0x80
 801018a:	029b      	lsls	r3, r3, #10
 801018c:	e7ef      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 801018e:	2380      	movs	r3, #128	; 0x80
 8010190:	039b      	lsls	r3, r3, #14
 8010192:	e7ec      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 8010194:	2380      	movs	r3, #128	; 0x80
 8010196:	049b      	lsls	r3, r3, #18
 8010198:	e7e9      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 801019a:	2302      	movs	r3, #2
 801019c:	e7e7      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 801019e:	2320      	movs	r3, #32
 80101a0:	e7e5      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
 80101a2:	2380      	movs	r3, #128	; 0x80
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	e7e2      	b.n	801016e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80101a8:	2302      	movs	r3, #2
 80101aa:	4a49      	ldr	r2, [pc, #292]	; (80102d0 <HAL_DMA_IRQHandler+0x8a8>)
 80101ac:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80101ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101b0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80101b2:	2321      	movs	r3, #33	; 0x21
 80101b4:	2201      	movs	r2, #1
 80101b6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80101b8:	3b01      	subs	r3, #1
 80101ba:	2200      	movs	r2, #0
 80101bc:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80101be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80101c4:	0020      	movs	r0, r4
 80101c6:	4798      	blx	r3
}  
 80101c8:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80101ca:	2320      	movs	r3, #32
 80101cc:	e7ed      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101ce:	2380      	movs	r3, #128	; 0x80
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	e7ea      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101d4:	2380      	movs	r3, #128	; 0x80
 80101d6:	019b      	lsls	r3, r3, #6
 80101d8:	e7e7      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101da:	2380      	movs	r3, #128	; 0x80
 80101dc:	029b      	lsls	r3, r3, #10
 80101de:	e7e4      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101e0:	2380      	movs	r3, #128	; 0x80
 80101e2:	039b      	lsls	r3, r3, #14
 80101e4:	e7e1      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101e6:	2380      	movs	r3, #128	; 0x80
 80101e8:	049b      	lsls	r3, r3, #18
 80101ea:	e7de      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101ec:	2302      	movs	r3, #2
 80101ee:	e7dc      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101f0:	2320      	movs	r3, #32
 80101f2:	e7da      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101f4:	2380      	movs	r3, #128	; 0x80
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	e7d7      	b.n	80101aa <HAL_DMA_IRQHandler+0x782>
 80101fa:	4a27      	ldr	r2, [pc, #156]	; (8010298 <HAL_DMA_IRQHandler+0x870>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d027      	beq.n	8010250 <HAL_DMA_IRQHandler+0x828>
 8010200:	4a26      	ldr	r2, [pc, #152]	; (801029c <HAL_DMA_IRQHandler+0x874>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d028      	beq.n	8010258 <HAL_DMA_IRQHandler+0x830>
 8010206:	4a26      	ldr	r2, [pc, #152]	; (80102a0 <HAL_DMA_IRQHandler+0x878>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d027      	beq.n	801025c <HAL_DMA_IRQHandler+0x834>
 801020c:	4a25      	ldr	r2, [pc, #148]	; (80102a4 <HAL_DMA_IRQHandler+0x87c>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d027      	beq.n	8010262 <HAL_DMA_IRQHandler+0x83a>
 8010212:	4a25      	ldr	r2, [pc, #148]	; (80102a8 <HAL_DMA_IRQHandler+0x880>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d027      	beq.n	8010268 <HAL_DMA_IRQHandler+0x840>
 8010218:	4a24      	ldr	r2, [pc, #144]	; (80102ac <HAL_DMA_IRQHandler+0x884>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d027      	beq.n	801026e <HAL_DMA_IRQHandler+0x846>
 801021e:	4a24      	ldr	r2, [pc, #144]	; (80102b0 <HAL_DMA_IRQHandler+0x888>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d027      	beq.n	8010274 <HAL_DMA_IRQHandler+0x84c>
 8010224:	4a23      	ldr	r2, [pc, #140]	; (80102b4 <HAL_DMA_IRQHandler+0x88c>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d027      	beq.n	801027a <HAL_DMA_IRQHandler+0x852>
 801022a:	4a23      	ldr	r2, [pc, #140]	; (80102b8 <HAL_DMA_IRQHandler+0x890>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d026      	beq.n	801027e <HAL_DMA_IRQHandler+0x856>
 8010230:	4a22      	ldr	r2, [pc, #136]	; (80102bc <HAL_DMA_IRQHandler+0x894>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d025      	beq.n	8010282 <HAL_DMA_IRQHandler+0x85a>
 8010236:	4a22      	ldr	r2, [pc, #136]	; (80102c0 <HAL_DMA_IRQHandler+0x898>)
 8010238:	4694      	mov	ip, r2
 801023a:	4463      	add	r3, ip
 801023c:	425a      	negs	r2, r3
 801023e:	4153      	adcs	r3, r2
 8010240:	425b      	negs	r3, r3
 8010242:	4a22      	ldr	r2, [pc, #136]	; (80102cc <HAL_DMA_IRQHandler+0x8a4>)
 8010244:	4013      	ands	r3, r2
 8010246:	2280      	movs	r2, #128	; 0x80
 8010248:	0292      	lsls	r2, r2, #10
 801024a:	4694      	mov	ip, r2
 801024c:	4463      	add	r3, ip
 801024e:	e000      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 8010250:	2302      	movs	r3, #2
 8010252:	4a1d      	ldr	r2, [pc, #116]	; (80102c8 <HAL_DMA_IRQHandler+0x8a0>)
 8010254:	6053      	str	r3, [r2, #4]
 8010256:	e7aa      	b.n	80101ae <HAL_DMA_IRQHandler+0x786>
 8010258:	2320      	movs	r3, #32
 801025a:	e7fa      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 801025c:	2380      	movs	r3, #128	; 0x80
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	e7f7      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 8010262:	2380      	movs	r3, #128	; 0x80
 8010264:	019b      	lsls	r3, r3, #6
 8010266:	e7f4      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 8010268:	2380      	movs	r3, #128	; 0x80
 801026a:	029b      	lsls	r3, r3, #10
 801026c:	e7f1      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 801026e:	2380      	movs	r3, #128	; 0x80
 8010270:	039b      	lsls	r3, r3, #14
 8010272:	e7ee      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 8010274:	2380      	movs	r3, #128	; 0x80
 8010276:	049b      	lsls	r3, r3, #18
 8010278:	e7eb      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 801027a:	2302      	movs	r3, #2
 801027c:	e7e9      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 801027e:	2320      	movs	r3, #32
 8010280:	e7e7      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
 8010282:	2380      	movs	r3, #128	; 0x80
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	e7e4      	b.n	8010252 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010288:	6821      	ldr	r1, [r4, #0]
 801028a:	e65e      	b.n	800ff4a <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	0712      	lsls	r2, r2, #28
 8010290:	d500      	bpl.n	8010294 <HAL_DMA_IRQHandler+0x86c>
 8010292:	e49b      	b.n	800fbcc <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	e44b      	b.n	800fb30 <HAL_DMA_IRQHandler+0x108>
 8010298:	40020008 	.word	0x40020008
 801029c:	4002001c 	.word	0x4002001c
 80102a0:	40020030 	.word	0x40020030
 80102a4:	40020044 	.word	0x40020044
 80102a8:	40020058 	.word	0x40020058
 80102ac:	4002006c 	.word	0x4002006c
 80102b0:	40020080 	.word	0x40020080
 80102b4:	40020408 	.word	0x40020408
 80102b8:	4002041c 	.word	0x4002041c
 80102bc:	40020430 	.word	0x40020430
 80102c0:	bffdfbbc 	.word	0xbffdfbbc
 80102c4:	fffc4000 	.word	0xfffc4000
 80102c8:	40020000 	.word	0x40020000
 80102cc:	fffe2000 	.word	0xfffe2000
 80102d0:	40020400 	.word	0x40020400

080102d4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80102d4:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <FLASH_SetErrorCode+0x2c>)
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	06db      	lsls	r3, r3, #27
 80102da:	d504      	bpl.n	80102e6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80102dc:	4a09      	ldr	r2, [pc, #36]	; (8010304 <FLASH_SetErrorCode+0x30>)
 80102de:	69d3      	ldr	r3, [r2, #28]
 80102e0:	2102      	movs	r1, #2
 80102e2:	430b      	orrs	r3, r1
 80102e4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80102e6:	4b06      	ldr	r3, [pc, #24]	; (8010300 <FLASH_SetErrorCode+0x2c>)
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	075b      	lsls	r3, r3, #29
 80102ec:	d504      	bpl.n	80102f8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80102ee:	4a05      	ldr	r2, [pc, #20]	; (8010304 <FLASH_SetErrorCode+0x30>)
 80102f0:	69d3      	ldr	r3, [r2, #28]
 80102f2:	2101      	movs	r1, #1
 80102f4:	430b      	orrs	r3, r1
 80102f6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80102f8:	4b01      	ldr	r3, [pc, #4]	; (8010300 <FLASH_SetErrorCode+0x2c>)
 80102fa:	2214      	movs	r2, #20
 80102fc:	60da      	str	r2, [r3, #12]
}  
 80102fe:	4770      	bx	lr
 8010300:	40022000 	.word	0x40022000
 8010304:	20006c88 	.word	0x20006c88

08010308 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010308:	4b05      	ldr	r3, [pc, #20]	; (8010320 <HAL_FLASH_Unlock+0x18>)
 801030a:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 801030c:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 801030e:	061b      	lsls	r3, r3, #24
 8010310:	d505      	bpl.n	801031e <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010312:	4b03      	ldr	r3, [pc, #12]	; (8010320 <HAL_FLASH_Unlock+0x18>)
 8010314:	4a03      	ldr	r2, [pc, #12]	; (8010324 <HAL_FLASH_Unlock+0x1c>)
 8010316:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010318:	4a03      	ldr	r2, [pc, #12]	; (8010328 <HAL_FLASH_Unlock+0x20>)
 801031a:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 801031c:	2000      	movs	r0, #0
}
 801031e:	4770      	bx	lr
 8010320:	40022000 	.word	0x40022000
 8010324:	45670123 	.word	0x45670123
 8010328:	cdef89ab 	.word	0xcdef89ab

0801032c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801032c:	4a03      	ldr	r2, [pc, #12]	; (801033c <HAL_FLASH_Lock+0x10>)
 801032e:	6913      	ldr	r3, [r2, #16]
 8010330:	2180      	movs	r1, #128	; 0x80
 8010332:	430b      	orrs	r3, r1
 8010334:	6113      	str	r3, [r2, #16]
}
 8010336:	2000      	movs	r0, #0
 8010338:	4770      	bx	lr
 801033a:	46c0      	nop			; (mov r8, r8)
 801033c:	40022000 	.word	0x40022000

08010340 <FLASH_WaitForLastOperation>:
{
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010344:	f7ff f928 	bl	800f598 <HAL_GetTick>
 8010348:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801034a:	4e13      	ldr	r6, [pc, #76]	; (8010398 <FLASH_WaitForLastOperation+0x58>)
 801034c:	2501      	movs	r5, #1
 801034e:	68f3      	ldr	r3, [r6, #12]
 8010350:	421d      	tst	r5, r3
 8010352:	d00a      	beq.n	801036a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010354:	1c63      	adds	r3, r4, #1
 8010356:	d0fa      	beq.n	801034e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010358:	2c00      	cmp	r4, #0
 801035a:	d01a      	beq.n	8010392 <FLASH_WaitForLastOperation+0x52>
 801035c:	f7ff f91c 	bl	800f598 <HAL_GetTick>
 8010360:	1bc0      	subs	r0, r0, r7
 8010362:	42a0      	cmp	r0, r4
 8010364:	d9f3      	bls.n	801034e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010366:	2003      	movs	r0, #3
 8010368:	e012      	b.n	8010390 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801036a:	4b0b      	ldr	r3, [pc, #44]	; (8010398 <FLASH_WaitForLastOperation+0x58>)
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	069b      	lsls	r3, r3, #26
 8010370:	d502      	bpl.n	8010378 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010372:	4b09      	ldr	r3, [pc, #36]	; (8010398 <FLASH_WaitForLastOperation+0x58>)
 8010374:	2220      	movs	r2, #32
 8010376:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010378:	4b07      	ldr	r3, [pc, #28]	; (8010398 <FLASH_WaitForLastOperation+0x58>)
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	06db      	lsls	r3, r3, #27
 801037e:	d404      	bmi.n	801038a <FLASH_WaitForLastOperation+0x4a>
 8010380:	4b05      	ldr	r3, [pc, #20]	; (8010398 <FLASH_WaitForLastOperation+0x58>)
 8010382:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010384:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010386:	075b      	lsls	r3, r3, #29
 8010388:	d502      	bpl.n	8010390 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 801038a:	f7ff ffa3 	bl	80102d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801038e:	2001      	movs	r0, #1
}
 8010390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010392:	2003      	movs	r0, #3
 8010394:	e7fc      	b.n	8010390 <FLASH_WaitForLastOperation+0x50>
 8010396:	46c0      	nop			; (mov r8, r8)
 8010398:	40022000 	.word	0x40022000

0801039c <HAL_FLASH_Program>:
{
 801039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801039e:	46de      	mov	lr, fp
 80103a0:	4657      	mov	r7, sl
 80103a2:	464e      	mov	r6, r9
 80103a4:	4645      	mov	r5, r8
 80103a6:	b5e0      	push	{r5, r6, r7, lr}
 80103a8:	b083      	sub	sp, #12
 80103aa:	0004      	movs	r4, r0
 80103ac:	000e      	movs	r6, r1
 80103ae:	9201      	str	r2, [sp, #4]
 80103b0:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80103b2:	4b2a      	ldr	r3, [pc, #168]	; (801045c <HAL_FLASH_Program+0xc0>)
 80103b4:	7e1b      	ldrb	r3, [r3, #24]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d04b      	beq.n	8010452 <HAL_FLASH_Program+0xb6>
 80103ba:	4b28      	ldr	r3, [pc, #160]	; (801045c <HAL_FLASH_Program+0xc0>)
 80103bc:	2201      	movs	r2, #1
 80103be:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80103c0:	4827      	ldr	r0, [pc, #156]	; (8010460 <HAL_FLASH_Program+0xc4>)
 80103c2:	f7ff ffbd 	bl	8010340 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d139      	bne.n	801043e <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80103ca:	2c01      	cmp	r4, #1
 80103cc:	d043      	beq.n	8010456 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 80103ce:	3c02      	subs	r4, #2
 80103d0:	4263      	negs	r3, r4
 80103d2:	415c      	adcs	r4, r3
 80103d4:	4264      	negs	r4, r4
 80103d6:	2301      	movs	r3, #1
 80103d8:	439c      	bics	r4, r3
 80103da:	46a0      	mov	r8, r4
 80103dc:	3303      	adds	r3, #3
 80103de:	469c      	mov	ip, r3
 80103e0:	44e0      	add	r8, ip
{
 80103e2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80103e4:	4b1d      	ldr	r3, [pc, #116]	; (801045c <HAL_FLASH_Program+0xc0>)
 80103e6:	469b      	mov	fp, r3
 80103e8:	2300      	movs	r3, #0
 80103ea:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80103ec:	4c1d      	ldr	r4, [pc, #116]	; (8010464 <HAL_FLASH_Program+0xc8>)
 80103ee:	e01e      	b.n	801042e <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80103f0:	2220      	movs	r2, #32
 80103f2:	1ad2      	subs	r2, r2, r3
 80103f4:	4649      	mov	r1, r9
 80103f6:	4091      	lsls	r1, r2
 80103f8:	000a      	movs	r2, r1
 80103fa:	9901      	ldr	r1, [sp, #4]
 80103fc:	40d9      	lsrs	r1, r3
 80103fe:	000b      	movs	r3, r1
 8010400:	4313      	orrs	r3, r2
 8010402:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010404:	465a      	mov	r2, fp
 8010406:	4651      	mov	r1, sl
 8010408:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801040a:	6922      	ldr	r2, [r4, #16]
 801040c:	2701      	movs	r7, #1
 801040e:	433a      	orrs	r2, r7
 8010410:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010412:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010414:	4812      	ldr	r0, [pc, #72]	; (8010460 <HAL_FLASH_Program+0xc4>)
 8010416:	f7ff ff93 	bl	8010340 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801041a:	6923      	ldr	r3, [r4, #16]
 801041c:	43bb      	bics	r3, r7
 801041e:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010420:	2800      	cmp	r0, #0
 8010422:	d10c      	bne.n	801043e <HAL_FLASH_Program+0xa2>
 8010424:	3501      	adds	r5, #1
 8010426:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010428:	b2eb      	uxtb	r3, r5
 801042a:	4598      	cmp	r8, r3
 801042c:	d907      	bls.n	801043e <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801042e:	012b      	lsls	r3, r5, #4
 8010430:	2220      	movs	r2, #32
 8010432:	4252      	negs	r2, r2
 8010434:	189a      	adds	r2, r3, r2
 8010436:	d4db      	bmi.n	80103f0 <HAL_FLASH_Program+0x54>
 8010438:	464b      	mov	r3, r9
 801043a:	40d3      	lsrs	r3, r2
 801043c:	e7e1      	b.n	8010402 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 801043e:	4b07      	ldr	r3, [pc, #28]	; (801045c <HAL_FLASH_Program+0xc0>)
 8010440:	2200      	movs	r2, #0
 8010442:	761a      	strb	r2, [r3, #24]
}
 8010444:	b003      	add	sp, #12
 8010446:	bc3c      	pop	{r2, r3, r4, r5}
 8010448:	4690      	mov	r8, r2
 801044a:	4699      	mov	r9, r3
 801044c:	46a2      	mov	sl, r4
 801044e:	46ab      	mov	fp, r5
 8010450:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010452:	2002      	movs	r0, #2
 8010454:	e7f6      	b.n	8010444 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010456:	2301      	movs	r3, #1
 8010458:	4698      	mov	r8, r3
 801045a:	e7c2      	b.n	80103e2 <HAL_FLASH_Program+0x46>
 801045c:	20006c88 	.word	0x20006c88
 8010460:	0000c350 	.word	0x0000c350
 8010464:	40022000 	.word	0x40022000

08010468 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010468:	4b06      	ldr	r3, [pc, #24]	; (8010484 <FLASH_MassErase+0x1c>)
 801046a:	2200      	movs	r2, #0
 801046c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801046e:	4b06      	ldr	r3, [pc, #24]	; (8010488 <FLASH_MassErase+0x20>)
 8010470:	691a      	ldr	r2, [r3, #16]
 8010472:	2104      	movs	r1, #4
 8010474:	430a      	orrs	r2, r1
 8010476:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010478:	691a      	ldr	r2, [r3, #16]
 801047a:	313c      	adds	r1, #60	; 0x3c
 801047c:	430a      	orrs	r2, r1
 801047e:	611a      	str	r2, [r3, #16]
}
 8010480:	4770      	bx	lr
 8010482:	46c0      	nop			; (mov r8, r8)
 8010484:	20006c88 	.word	0x20006c88
 8010488:	40022000 	.word	0x40022000

0801048c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801048c:	4b06      	ldr	r3, [pc, #24]	; (80104a8 <FLASH_PageErase+0x1c>)
 801048e:	2200      	movs	r2, #0
 8010490:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010492:	4b06      	ldr	r3, [pc, #24]	; (80104ac <FLASH_PageErase+0x20>)
 8010494:	691a      	ldr	r2, [r3, #16]
 8010496:	2102      	movs	r1, #2
 8010498:	430a      	orrs	r2, r1
 801049a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801049c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801049e:	691a      	ldr	r2, [r3, #16]
 80104a0:	313e      	adds	r1, #62	; 0x3e
 80104a2:	430a      	orrs	r2, r1
 80104a4:	611a      	str	r2, [r3, #16]
}
 80104a6:	4770      	bx	lr
 80104a8:	20006c88 	.word	0x20006c88
 80104ac:	40022000 	.word	0x40022000

080104b0 <HAL_FLASHEx_Erase>:
{
 80104b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104b2:	46c6      	mov	lr, r8
 80104b4:	b500      	push	{lr}
 80104b6:	0006      	movs	r6, r0
 80104b8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80104ba:	4b2a      	ldr	r3, [pc, #168]	; (8010564 <HAL_FLASHEx_Erase+0xb4>)
 80104bc:	7e1b      	ldrb	r3, [r3, #24]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d04d      	beq.n	801055e <HAL_FLASHEx_Erase+0xae>
 80104c2:	4b28      	ldr	r3, [pc, #160]	; (8010564 <HAL_FLASHEx_Erase+0xb4>)
 80104c4:	2201      	movs	r2, #1
 80104c6:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80104c8:	6803      	ldr	r3, [r0, #0]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d029      	beq.n	8010522 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80104ce:	4826      	ldr	r0, [pc, #152]	; (8010568 <HAL_FLASHEx_Erase+0xb8>)
 80104d0:	f7ff ff36 	bl	8010340 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80104d4:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d129      	bne.n	801052e <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 80104da:	2301      	movs	r3, #1
 80104dc:	425b      	negs	r3, r3
 80104de:	4642      	mov	r2, r8
 80104e0:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80104e2:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80104e4:	68b3      	ldr	r3, [r6, #8]
 80104e6:	02db      	lsls	r3, r3, #11
 80104e8:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80104ea:	429c      	cmp	r4, r3
 80104ec:	d235      	bcs.n	801055a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80104ee:	4f1f      	ldr	r7, [pc, #124]	; (801056c <HAL_FLASHEx_Erase+0xbc>)
 80104f0:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80104f2:	0020      	movs	r0, r4
 80104f4:	f7ff ffca 	bl	801048c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80104f8:	481b      	ldr	r0, [pc, #108]	; (8010568 <HAL_FLASHEx_Erase+0xb8>)
 80104fa:	f7ff ff21 	bl	8010340 <FLASH_WaitForLastOperation>
 80104fe:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	43ab      	bics	r3, r5
 8010504:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010506:	2800      	cmp	r0, #0
 8010508:	d124      	bne.n	8010554 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 801050a:	2380      	movs	r3, #128	; 0x80
 801050c:	011b      	lsls	r3, r3, #4
 801050e:	469c      	mov	ip, r3
 8010510:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010512:	68b3      	ldr	r3, [r6, #8]
 8010514:	02db      	lsls	r3, r3, #11
 8010516:	6871      	ldr	r1, [r6, #4]
 8010518:	468c      	mov	ip, r1
 801051a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 801051c:	42a3      	cmp	r3, r4
 801051e:	d8e8      	bhi.n	80104f2 <HAL_FLASHEx_Erase+0x42>
 8010520:	e005      	b.n	801052e <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010522:	4811      	ldr	r0, [pc, #68]	; (8010568 <HAL_FLASHEx_Erase+0xb8>)
 8010524:	f7ff ff0c 	bl	8010340 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010528:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801052a:	2800      	cmp	r0, #0
 801052c:	d006      	beq.n	801053c <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 801052e:	4b0d      	ldr	r3, [pc, #52]	; (8010564 <HAL_FLASHEx_Erase+0xb4>)
 8010530:	2100      	movs	r1, #0
 8010532:	7619      	strb	r1, [r3, #24]
}
 8010534:	0010      	movs	r0, r2
 8010536:	bc04      	pop	{r2}
 8010538:	4690      	mov	r8, r2
 801053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 801053c:	f7ff ff94 	bl	8010468 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010540:	4809      	ldr	r0, [pc, #36]	; (8010568 <HAL_FLASHEx_Erase+0xb8>)
 8010542:	f7ff fefd 	bl	8010340 <FLASH_WaitForLastOperation>
 8010546:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010548:	4908      	ldr	r1, [pc, #32]	; (801056c <HAL_FLASHEx_Erase+0xbc>)
 801054a:	690b      	ldr	r3, [r1, #16]
 801054c:	2004      	movs	r0, #4
 801054e:	4383      	bics	r3, r0
 8010550:	610b      	str	r3, [r1, #16]
 8010552:	e7ec      	b.n	801052e <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010554:	4643      	mov	r3, r8
 8010556:	601c      	str	r4, [r3, #0]
            break;
 8010558:	e7e9      	b.n	801052e <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801055a:	2201      	movs	r2, #1
 801055c:	e7e7      	b.n	801052e <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 801055e:	2202      	movs	r2, #2
 8010560:	e7e8      	b.n	8010534 <HAL_FLASHEx_Erase+0x84>
 8010562:	46c0      	nop			; (mov r8, r8)
 8010564:	20006c88 	.word	0x20006c88
 8010568:	0000c350 	.word	0x0000c350
 801056c:	40022000 	.word	0x40022000

08010570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010572:	46de      	mov	lr, fp
 8010574:	4657      	mov	r7, sl
 8010576:	464e      	mov	r6, r9
 8010578:	4645      	mov	r5, r8
 801057a:	b5e0      	push	{r5, r6, r7, lr}
 801057c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801057e:	680a      	ldr	r2, [r1, #0]
 8010580:	2a00      	cmp	r2, #0
 8010582:	d100      	bne.n	8010586 <HAL_GPIO_Init+0x16>
 8010584:	e0bf      	b.n	8010706 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8010586:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010588:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801058a:	2410      	movs	r4, #16
 801058c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801058e:	3c0d      	subs	r4, #13
 8010590:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010592:	2480      	movs	r4, #128	; 0x80
 8010594:	0564      	lsls	r4, r4, #21
 8010596:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010598:	4c5e      	ldr	r4, [pc, #376]	; (8010714 <HAL_GPIO_Init+0x1a4>)
 801059a:	1904      	adds	r4, r0, r4
 801059c:	1e65      	subs	r5, r4, #1
 801059e:	41ac      	sbcs	r4, r5
 80105a0:	3404      	adds	r4, #4
 80105a2:	46a1      	mov	r9, r4
 80105a4:	e03b      	b.n	801061e <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 80105a6:	08dc      	lsrs	r4, r3, #3
 80105a8:	00a4      	lsls	r4, r4, #2
 80105aa:	1904      	adds	r4, r0, r4
 80105ac:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80105ae:	2507      	movs	r5, #7
 80105b0:	401d      	ands	r5, r3
 80105b2:	00ad      	lsls	r5, r5, #2
 80105b4:	220f      	movs	r2, #15
 80105b6:	40aa      	lsls	r2, r5
 80105b8:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80105ba:	690a      	ldr	r2, [r1, #16]
 80105bc:	40aa      	lsls	r2, r5
 80105be:	0015      	movs	r5, r2
 80105c0:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 80105c2:	6225      	str	r5, [r4, #32]
 80105c4:	e035      	b.n	8010632 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80105c6:	2500      	movs	r5, #0
 80105c8:	465a      	mov	r2, fp
 80105ca:	4095      	lsls	r5, r2
 80105cc:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80105ce:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80105d0:	4c51      	ldr	r4, [pc, #324]	; (8010718 <HAL_GPIO_Init+0x1a8>)
 80105d2:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80105d4:	9a01      	ldr	r2, [sp, #4]
 80105d6:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80105d8:	684a      	ldr	r2, [r1, #4]
 80105da:	03d2      	lsls	r2, r2, #15
 80105dc:	d500      	bpl.n	80105e0 <HAL_GPIO_Init+0x70>
 80105de:	e086      	b.n	80106ee <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80105e0:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80105e2:	4f4d      	ldr	r7, [pc, #308]	; (8010718 <HAL_GPIO_Init+0x1a8>)
 80105e4:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 80105e6:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80105e8:	684a      	ldr	r2, [r1, #4]
 80105ea:	0392      	lsls	r2, r2, #14
 80105ec:	d500      	bpl.n	80105f0 <HAL_GPIO_Init+0x80>
 80105ee:	e081      	b.n	80106f4 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80105f0:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80105f2:	4f49      	ldr	r7, [pc, #292]	; (8010718 <HAL_GPIO_Init+0x1a8>)
 80105f4:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80105f6:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80105f8:	684a      	ldr	r2, [r1, #4]
 80105fa:	02d2      	lsls	r2, r2, #11
 80105fc:	d47d      	bmi.n	80106fa <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80105fe:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010600:	4f45      	ldr	r7, [pc, #276]	; (8010718 <HAL_GPIO_Init+0x1a8>)
 8010602:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010604:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010606:	684a      	ldr	r2, [r1, #4]
 8010608:	0292      	lsls	r2, r2, #10
 801060a:	d479      	bmi.n	8010700 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801060c:	0022      	movs	r2, r4
 801060e:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010610:	4c41      	ldr	r4, [pc, #260]	; (8010718 <HAL_GPIO_Init+0x1a8>)
 8010612:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8010614:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010616:	680a      	ldr	r2, [r1, #0]
 8010618:	0014      	movs	r4, r2
 801061a:	40dc      	lsrs	r4, r3
 801061c:	d073      	beq.n	8010706 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801061e:	0034      	movs	r4, r6
 8010620:	409c      	lsls	r4, r3
 8010622:	4022      	ands	r2, r4
 8010624:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8010626:	d0f5      	beq.n	8010614 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010628:	684c      	ldr	r4, [r1, #4]
 801062a:	4642      	mov	r2, r8
 801062c:	4394      	bics	r4, r2
 801062e:	2c02      	cmp	r4, #2
 8010630:	d0b9      	beq.n	80105a6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8010632:	6804      	ldr	r4, [r0, #0]
 8010634:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010636:	4665      	mov	r5, ip
 8010638:	40bd      	lsls	r5, r7
 801063a:	43ed      	mvns	r5, r5
 801063c:	402c      	ands	r4, r5
 801063e:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010640:	684c      	ldr	r4, [r1, #4]
 8010642:	4662      	mov	r2, ip
 8010644:	4014      	ands	r4, r2
 8010646:	40bc      	lsls	r4, r7
 8010648:	465a      	mov	r2, fp
 801064a:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 801064c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801064e:	684c      	ldr	r4, [r1, #4]
 8010650:	4642      	mov	r2, r8
 8010652:	4394      	bics	r4, r2
 8010654:	3c01      	subs	r4, #1
 8010656:	2c01      	cmp	r4, #1
 8010658:	d813      	bhi.n	8010682 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 801065a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801065c:	402c      	ands	r4, r5
 801065e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010660:	68cc      	ldr	r4, [r1, #12]
 8010662:	40bc      	lsls	r4, r7
 8010664:	465a      	mov	r2, fp
 8010666:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8010668:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 801066a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801066c:	0032      	movs	r2, r6
 801066e:	409a      	lsls	r2, r3
 8010670:	4394      	bics	r4, r2
 8010672:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010674:	684a      	ldr	r2, [r1, #4]
 8010676:	0914      	lsrs	r4, r2, #4
 8010678:	4034      	ands	r4, r6
 801067a:	409c      	lsls	r4, r3
 801067c:	465a      	mov	r2, fp
 801067e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8010680:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8010682:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010684:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010686:	688d      	ldr	r5, [r1, #8]
 8010688:	40bd      	lsls	r5, r7
 801068a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 801068c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801068e:	684a      	ldr	r2, [r1, #4]
 8010690:	4654      	mov	r4, sl
 8010692:	4222      	tst	r2, r4
 8010694:	d0be      	beq.n	8010614 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010696:	4c21      	ldr	r4, [pc, #132]	; (801071c <HAL_GPIO_Init+0x1ac>)
 8010698:	69a5      	ldr	r5, [r4, #24]
 801069a:	4335      	orrs	r5, r6
 801069c:	61a5      	str	r5, [r4, #24]
 801069e:	69a4      	ldr	r4, [r4, #24]
 80106a0:	4034      	ands	r4, r6
 80106a2:	9403      	str	r4, [sp, #12]
 80106a4:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80106a6:	089c      	lsrs	r4, r3, #2
 80106a8:	00a4      	lsls	r4, r4, #2
 80106aa:	4a1d      	ldr	r2, [pc, #116]	; (8010720 <HAL_GPIO_Init+0x1b0>)
 80106ac:	4693      	mov	fp, r2
 80106ae:	445c      	add	r4, fp
 80106b0:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80106b2:	4667      	mov	r7, ip
 80106b4:	401f      	ands	r7, r3
 80106b6:	00ba      	lsls	r2, r7, #2
 80106b8:	4693      	mov	fp, r2
 80106ba:	270f      	movs	r7, #15
 80106bc:	4097      	lsls	r7, r2
 80106be:	43bd      	bics	r5, r7
 80106c0:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80106c2:	2590      	movs	r5, #144	; 0x90
 80106c4:	05ed      	lsls	r5, r5, #23
 80106c6:	42a8      	cmp	r0, r5
 80106c8:	d100      	bne.n	80106cc <HAL_GPIO_Init+0x15c>
 80106ca:	e77c      	b.n	80105c6 <HAL_GPIO_Init+0x56>
 80106cc:	4d15      	ldr	r5, [pc, #84]	; (8010724 <HAL_GPIO_Init+0x1b4>)
 80106ce:	42a8      	cmp	r0, r5
 80106d0:	d007      	beq.n	80106e2 <HAL_GPIO_Init+0x172>
 80106d2:	4d15      	ldr	r5, [pc, #84]	; (8010728 <HAL_GPIO_Init+0x1b8>)
 80106d4:	42a8      	cmp	r0, r5
 80106d6:	d006      	beq.n	80106e6 <HAL_GPIO_Init+0x176>
 80106d8:	4d14      	ldr	r5, [pc, #80]	; (801072c <HAL_GPIO_Init+0x1bc>)
 80106da:	42a8      	cmp	r0, r5
 80106dc:	d005      	beq.n	80106ea <HAL_GPIO_Init+0x17a>
 80106de:	464d      	mov	r5, r9
 80106e0:	e772      	b.n	80105c8 <HAL_GPIO_Init+0x58>
 80106e2:	0035      	movs	r5, r6
 80106e4:	e770      	b.n	80105c8 <HAL_GPIO_Init+0x58>
 80106e6:	2502      	movs	r5, #2
 80106e8:	e76e      	b.n	80105c8 <HAL_GPIO_Init+0x58>
 80106ea:	4665      	mov	r5, ip
 80106ec:	e76c      	b.n	80105c8 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 80106ee:	9a01      	ldr	r2, [sp, #4]
 80106f0:	4314      	orrs	r4, r2
 80106f2:	e776      	b.n	80105e2 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80106f4:	9a01      	ldr	r2, [sp, #4]
 80106f6:	4314      	orrs	r4, r2
 80106f8:	e77b      	b.n	80105f2 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 80106fa:	9a01      	ldr	r2, [sp, #4]
 80106fc:	4314      	orrs	r4, r2
 80106fe:	e77f      	b.n	8010600 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8010700:	9a01      	ldr	r2, [sp, #4]
 8010702:	4322      	orrs	r2, r4
 8010704:	e784      	b.n	8010610 <HAL_GPIO_Init+0xa0>
  } 
}
 8010706:	b005      	add	sp, #20
 8010708:	bc3c      	pop	{r2, r3, r4, r5}
 801070a:	4690      	mov	r8, r2
 801070c:	4699      	mov	r9, r3
 801070e:	46a2      	mov	sl, r4
 8010710:	46ab      	mov	fp, r5
 8010712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010714:	b7fff000 	.word	0xb7fff000
 8010718:	40010400 	.word	0x40010400
 801071c:	40021000 	.word	0x40021000
 8010720:	40010000 	.word	0x40010000
 8010724:	48000400 	.word	0x48000400
 8010728:	48000800 	.word	0x48000800
 801072c:	48000c00 	.word	0x48000c00

08010730 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010730:	6900      	ldr	r0, [r0, #16]
 8010732:	4008      	ands	r0, r1
 8010734:	1e41      	subs	r1, r0, #1
 8010736:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010738:	b2c0      	uxtb	r0, r0
  }
 801073a:	4770      	bx	lr

0801073c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801073c:	2a00      	cmp	r2, #0
 801073e:	d101      	bne.n	8010744 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010740:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010742:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010744:	6181      	str	r1, [r0, #24]
 8010746:	e7fc      	b.n	8010742 <HAL_GPIO_WritePin+0x6>

08010748 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010748:	6943      	ldr	r3, [r0, #20]
 801074a:	4059      	eors	r1, r3
 801074c:	6141      	str	r1, [r0, #20]
}
 801074e:	4770      	bx	lr

08010750 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010750:	4770      	bx	lr
	...

08010754 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010754:	4a03      	ldr	r2, [pc, #12]	; (8010764 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010756:	6811      	ldr	r1, [r2, #0]
 8010758:	2380      	movs	r3, #128	; 0x80
 801075a:	005b      	lsls	r3, r3, #1
 801075c:	430b      	orrs	r3, r1
 801075e:	6013      	str	r3, [r2, #0]
}
 8010760:	4770      	bx	lr
 8010762:	46c0      	nop			; (mov r8, r8)
 8010764:	40007000 	.word	0x40007000

08010768 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076a:	46c6      	mov	lr, r8
 801076c:	b500      	push	{lr}
 801076e:	b082      	sub	sp, #8
 8010770:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010772:	6803      	ldr	r3, [r0, #0]
 8010774:	07db      	lsls	r3, r3, #31
 8010776:	d538      	bpl.n	80107ea <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010778:	4bbd      	ldr	r3, [pc, #756]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	230c      	movs	r3, #12
 801077e:	4013      	ands	r3, r2
 8010780:	2b04      	cmp	r3, #4
 8010782:	d02a      	beq.n	80107da <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010784:	4bba      	ldr	r3, [pc, #744]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010786:	685a      	ldr	r2, [r3, #4]
 8010788:	230c      	movs	r3, #12
 801078a:	4013      	ands	r3, r2
 801078c:	2b08      	cmp	r3, #8
 801078e:	d108      	bne.n	80107a2 <HAL_RCC_OscConfig+0x3a>
 8010790:	4bb7      	ldr	r3, [pc, #732]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	22c0      	movs	r2, #192	; 0xc0
 8010796:	0252      	lsls	r2, r2, #9
 8010798:	4013      	ands	r3, r2
 801079a:	2280      	movs	r2, #128	; 0x80
 801079c:	0252      	lsls	r2, r2, #9
 801079e:	4293      	cmp	r3, r2
 80107a0:	d01b      	beq.n	80107da <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80107a2:	4bb3      	ldr	r3, [pc, #716]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	49b3      	ldr	r1, [pc, #716]	; (8010a74 <HAL_RCC_OscConfig+0x30c>)
 80107a8:	400a      	ands	r2, r1
 80107aa:	601a      	str	r2, [r3, #0]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	49b2      	ldr	r1, [pc, #712]	; (8010a78 <HAL_RCC_OscConfig+0x310>)
 80107b0:	400a      	ands	r2, r1
 80107b2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107b4:	f7fe fef0 	bl	800f598 <HAL_GetTick>
 80107b8:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80107ba:	4ead      	ldr	r6, [pc, #692]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80107bc:	2580      	movs	r5, #128	; 0x80
 80107be:	02ad      	lsls	r5, r5, #10
 80107c0:	6833      	ldr	r3, [r6, #0]
 80107c2:	422b      	tst	r3, r5
 80107c4:	d039      	beq.n	801083a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80107c6:	f7fe fee7 	bl	800f598 <HAL_GetTick>
 80107ca:	1bc0      	subs	r0, r0, r7
 80107cc:	2864      	cmp	r0, #100	; 0x64
 80107ce:	d9f7      	bls.n	80107c0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80107d0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80107d2:	b002      	add	sp, #8
 80107d4:	bc04      	pop	{r2}
 80107d6:	4690      	mov	r8, r2
 80107d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80107da:	4ba5      	ldr	r3, [pc, #660]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	039b      	lsls	r3, r3, #14
 80107e0:	d503      	bpl.n	80107ea <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 80107e2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80107e4:	6863      	ldr	r3, [r4, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0f3      	beq.n	80107d2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80107ea:	6823      	ldr	r3, [r4, #0]
 80107ec:	079b      	lsls	r3, r3, #30
 80107ee:	d400      	bmi.n	80107f2 <HAL_RCC_OscConfig+0x8a>
 80107f0:	e08d      	b.n	801090e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80107f2:	4b9f      	ldr	r3, [pc, #636]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	220c      	movs	r2, #12
 80107f8:	421a      	tst	r2, r3
 80107fa:	d077      	beq.n	80108ec <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80107fc:	4b9c      	ldr	r3, [pc, #624]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	230c      	movs	r3, #12
 8010802:	4013      	ands	r3, r2
 8010804:	2b08      	cmp	r3, #8
 8010806:	d068      	beq.n	80108da <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010808:	68e3      	ldr	r3, [r4, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d100      	bne.n	8010810 <HAL_RCC_OscConfig+0xa8>
 801080e:	e0a1      	b.n	8010954 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8010810:	4a97      	ldr	r2, [pc, #604]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010812:	6813      	ldr	r3, [r2, #0]
 8010814:	2101      	movs	r1, #1
 8010816:	430b      	orrs	r3, r1
 8010818:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801081a:	f7fe febd 	bl	800f598 <HAL_GetTick>
 801081e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010820:	4e93      	ldr	r6, [pc, #588]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010822:	2502      	movs	r5, #2
 8010824:	6833      	ldr	r3, [r6, #0]
 8010826:	421d      	tst	r5, r3
 8010828:	d000      	beq.n	801082c <HAL_RCC_OscConfig+0xc4>
 801082a:	e08a      	b.n	8010942 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801082c:	f7fe feb4 	bl	800f598 <HAL_GetTick>
 8010830:	1bc0      	subs	r0, r0, r7
 8010832:	2864      	cmp	r0, #100	; 0x64
 8010834:	d9f6      	bls.n	8010824 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8010836:	2003      	movs	r0, #3
 8010838:	e7cb      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801083a:	6863      	ldr	r3, [r4, #4]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d00b      	beq.n	8010858 <HAL_RCC_OscConfig+0xf0>
 8010840:	2b00      	cmp	r3, #0
 8010842:	d122      	bne.n	801088a <HAL_RCC_OscConfig+0x122>
 8010844:	4b8a      	ldr	r3, [pc, #552]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	498a      	ldr	r1, [pc, #552]	; (8010a74 <HAL_RCC_OscConfig+0x30c>)
 801084a:	400a      	ands	r2, r1
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	4989      	ldr	r1, [pc, #548]	; (8010a78 <HAL_RCC_OscConfig+0x310>)
 8010852:	400a      	ands	r2, r1
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	e005      	b.n	8010864 <HAL_RCC_OscConfig+0xfc>
 8010858:	4a85      	ldr	r2, [pc, #532]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801085a:	6811      	ldr	r1, [r2, #0]
 801085c:	2380      	movs	r3, #128	; 0x80
 801085e:	025b      	lsls	r3, r3, #9
 8010860:	430b      	orrs	r3, r1
 8010862:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010864:	6863      	ldr	r3, [r4, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d027      	beq.n	80108ba <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801086a:	f7fe fe95 	bl	800f598 <HAL_GetTick>
 801086e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010870:	4e7f      	ldr	r6, [pc, #508]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010872:	2580      	movs	r5, #128	; 0x80
 8010874:	02ad      	lsls	r5, r5, #10
 8010876:	6833      	ldr	r3, [r6, #0]
 8010878:	422b      	tst	r3, r5
 801087a:	d1b6      	bne.n	80107ea <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801087c:	f7fe fe8c 	bl	800f598 <HAL_GetTick>
 8010880:	1bc0      	subs	r0, r0, r7
 8010882:	2864      	cmp	r0, #100	; 0x64
 8010884:	d9f7      	bls.n	8010876 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8010886:	2003      	movs	r0, #3
 8010888:	e7a3      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801088a:	2b05      	cmp	r3, #5
 801088c:	d009      	beq.n	80108a2 <HAL_RCC_OscConfig+0x13a>
 801088e:	4b78      	ldr	r3, [pc, #480]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	4978      	ldr	r1, [pc, #480]	; (8010a74 <HAL_RCC_OscConfig+0x30c>)
 8010894:	400a      	ands	r2, r1
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	4977      	ldr	r1, [pc, #476]	; (8010a78 <HAL_RCC_OscConfig+0x310>)
 801089c:	400a      	ands	r2, r1
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	e7e0      	b.n	8010864 <HAL_RCC_OscConfig+0xfc>
 80108a2:	4b73      	ldr	r3, [pc, #460]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80108a4:	6819      	ldr	r1, [r3, #0]
 80108a6:	2280      	movs	r2, #128	; 0x80
 80108a8:	02d2      	lsls	r2, r2, #11
 80108aa:	430a      	orrs	r2, r1
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	6819      	ldr	r1, [r3, #0]
 80108b0:	2280      	movs	r2, #128	; 0x80
 80108b2:	0252      	lsls	r2, r2, #9
 80108b4:	430a      	orrs	r2, r1
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	e7d4      	b.n	8010864 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80108ba:	f7fe fe6d 	bl	800f598 <HAL_GetTick>
 80108be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108c0:	4e6b      	ldr	r6, [pc, #428]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80108c2:	2580      	movs	r5, #128	; 0x80
 80108c4:	02ad      	lsls	r5, r5, #10
 80108c6:	6833      	ldr	r3, [r6, #0]
 80108c8:	422b      	tst	r3, r5
 80108ca:	d08e      	beq.n	80107ea <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108cc:	f7fe fe64 	bl	800f598 <HAL_GetTick>
 80108d0:	1bc0      	subs	r0, r0, r7
 80108d2:	2864      	cmp	r0, #100	; 0x64
 80108d4:	d9f7      	bls.n	80108c6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80108d6:	2003      	movs	r0, #3
 80108d8:	e77b      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80108da:	4b65      	ldr	r3, [pc, #404]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	22c0      	movs	r2, #192	; 0xc0
 80108e0:	0252      	lsls	r2, r2, #9
 80108e2:	4013      	ands	r3, r2
 80108e4:	2280      	movs	r2, #128	; 0x80
 80108e6:	0212      	lsls	r2, r2, #8
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d18d      	bne.n	8010808 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80108ec:	4b60      	ldr	r3, [pc, #384]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	079b      	lsls	r3, r3, #30
 80108f2:	d504      	bpl.n	80108fe <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80108f4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80108f6:	68e3      	ldr	r3, [r4, #12]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d000      	beq.n	80108fe <HAL_RCC_OscConfig+0x196>
 80108fc:	e769      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80108fe:	495c      	ldr	r1, [pc, #368]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010900:	680a      	ldr	r2, [r1, #0]
 8010902:	6923      	ldr	r3, [r4, #16]
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	20f8      	movs	r0, #248	; 0xf8
 8010908:	4382      	bics	r2, r0
 801090a:	4313      	orrs	r3, r2
 801090c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	071b      	lsls	r3, r3, #28
 8010912:	d547      	bpl.n	80109a4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010914:	6a23      	ldr	r3, [r4, #32]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d030      	beq.n	801097c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801091a:	4a55      	ldr	r2, [pc, #340]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801091c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801091e:	2101      	movs	r1, #1
 8010920:	430b      	orrs	r3, r1
 8010922:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010924:	f7fe fe38 	bl	800f598 <HAL_GetTick>
 8010928:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801092a:	4e51      	ldr	r6, [pc, #324]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801092c:	2502      	movs	r5, #2
 801092e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010930:	421d      	tst	r5, r3
 8010932:	d137      	bne.n	80109a4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010934:	f7fe fe30 	bl	800f598 <HAL_GetTick>
 8010938:	1bc0      	subs	r0, r0, r7
 801093a:	2864      	cmp	r0, #100	; 0x64
 801093c:	d9f7      	bls.n	801092e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801093e:	2003      	movs	r0, #3
 8010940:	e747      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010942:	494b      	ldr	r1, [pc, #300]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010944:	680a      	ldr	r2, [r1, #0]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	20f8      	movs	r0, #248	; 0xf8
 801094c:	4382      	bics	r2, r0
 801094e:	4313      	orrs	r3, r2
 8010950:	600b      	str	r3, [r1, #0]
 8010952:	e7dc      	b.n	801090e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8010954:	4a46      	ldr	r2, [pc, #280]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010956:	6813      	ldr	r3, [r2, #0]
 8010958:	2101      	movs	r1, #1
 801095a:	438b      	bics	r3, r1
 801095c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801095e:	f7fe fe1b 	bl	800f598 <HAL_GetTick>
 8010962:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010964:	4e42      	ldr	r6, [pc, #264]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010966:	2502      	movs	r5, #2
 8010968:	6833      	ldr	r3, [r6, #0]
 801096a:	421d      	tst	r5, r3
 801096c:	d0cf      	beq.n	801090e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801096e:	f7fe fe13 	bl	800f598 <HAL_GetTick>
 8010972:	1bc0      	subs	r0, r0, r7
 8010974:	2864      	cmp	r0, #100	; 0x64
 8010976:	d9f7      	bls.n	8010968 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8010978:	2003      	movs	r0, #3
 801097a:	e72a      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 801097c:	4a3c      	ldr	r2, [pc, #240]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801097e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010980:	2101      	movs	r1, #1
 8010982:	438b      	bics	r3, r1
 8010984:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010986:	f7fe fe07 	bl	800f598 <HAL_GetTick>
 801098a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801098c:	4e38      	ldr	r6, [pc, #224]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 801098e:	2502      	movs	r5, #2
 8010990:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010992:	421d      	tst	r5, r3
 8010994:	d006      	beq.n	80109a4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010996:	f7fe fdff 	bl	800f598 <HAL_GetTick>
 801099a:	1bc0      	subs	r0, r0, r7
 801099c:	2864      	cmp	r0, #100	; 0x64
 801099e:	d9f7      	bls.n	8010990 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80109a0:	2003      	movs	r0, #3
 80109a2:	e716      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	075b      	lsls	r3, r3, #29
 80109a8:	d442      	bmi.n	8010a30 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	06db      	lsls	r3, r3, #27
 80109ae:	d512      	bpl.n	80109d6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80109b0:	6963      	ldr	r3, [r4, #20]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d100      	bne.n	80109b8 <HAL_RCC_OscConfig+0x250>
 80109b6:	e0ce      	b.n	8010b56 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80109b8:	3305      	adds	r3, #5
 80109ba:	d000      	beq.n	80109be <HAL_RCC_OscConfig+0x256>
 80109bc:	e0ec      	b.n	8010b98 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80109be:	4a2c      	ldr	r2, [pc, #176]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80109c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80109c2:	2104      	movs	r1, #4
 80109c4:	438b      	bics	r3, r1
 80109c6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80109c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80109ca:	69a3      	ldr	r3, [r4, #24]
 80109cc:	00db      	lsls	r3, r3, #3
 80109ce:	20f8      	movs	r0, #248	; 0xf8
 80109d0:	4381      	bics	r1, r0
 80109d2:	430b      	orrs	r3, r1
 80109d4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	069b      	lsls	r3, r3, #26
 80109da:	d400      	bmi.n	80109de <HAL_RCC_OscConfig+0x276>
 80109dc:	e106      	b.n	8010bec <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80109de:	4b24      	ldr	r3, [pc, #144]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	230c      	movs	r3, #12
 80109e4:	4013      	ands	r3, r2
 80109e6:	2b0c      	cmp	r3, #12
 80109e8:	d100      	bne.n	80109ec <HAL_RCC_OscConfig+0x284>
 80109ea:	e0f6      	b.n	8010bda <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80109ec:	4b20      	ldr	r3, [pc, #128]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 80109ee:	685a      	ldr	r2, [r3, #4]
 80109f0:	230c      	movs	r3, #12
 80109f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80109f4:	2b08      	cmp	r3, #8
 80109f6:	d100      	bne.n	80109fa <HAL_RCC_OscConfig+0x292>
 80109f8:	e0e7      	b.n	8010bca <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80109fa:	69e3      	ldr	r3, [r4, #28]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d100      	bne.n	8010a02 <HAL_RCC_OscConfig+0x29a>
 8010a00:	e116      	b.n	8010c30 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8010a02:	4a1b      	ldr	r2, [pc, #108]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010a04:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8010a06:	2380      	movs	r3, #128	; 0x80
 8010a08:	025b      	lsls	r3, r3, #9
 8010a0a:	430b      	orrs	r3, r1
 8010a0c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010a0e:	f7fe fdc3 	bl	800f598 <HAL_GetTick>
 8010a12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010a14:	4e16      	ldr	r6, [pc, #88]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010a16:	2580      	movs	r5, #128	; 0x80
 8010a18:	026d      	lsls	r5, r5, #9
 8010a1a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010a1c:	422b      	tst	r3, r5
 8010a1e:	d000      	beq.n	8010a22 <HAL_RCC_OscConfig+0x2ba>
 8010a20:	e0e4      	b.n	8010bec <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010a22:	f7fe fdb9 	bl	800f598 <HAL_GetTick>
 8010a26:	1bc0      	subs	r0, r0, r7
 8010a28:	2864      	cmp	r0, #100	; 0x64
 8010a2a:	d9f6      	bls.n	8010a1a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8010a2c:	2003      	movs	r0, #3
 8010a2e:	e6d0      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010a30:	4a0f      	ldr	r2, [pc, #60]	; (8010a70 <HAL_RCC_OscConfig+0x308>)
 8010a32:	69d1      	ldr	r1, [r2, #28]
 8010a34:	2080      	movs	r0, #128	; 0x80
 8010a36:	0540      	lsls	r0, r0, #21
 8010a38:	4301      	orrs	r1, r0
 8010a3a:	61d1      	str	r1, [r2, #28]
 8010a3c:	69d3      	ldr	r3, [r2, #28]
 8010a3e:	4003      	ands	r3, r0
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010a44:	4a0d      	ldr	r2, [pc, #52]	; (8010a7c <HAL_RCC_OscConfig+0x314>)
 8010a46:	6811      	ldr	r1, [r2, #0]
 8010a48:	2380      	movs	r3, #128	; 0x80
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	430b      	orrs	r3, r1
 8010a4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010a50:	f7fe fda2 	bl	800f598 <HAL_GetTick>
 8010a54:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010a56:	4e09      	ldr	r6, [pc, #36]	; (8010a7c <HAL_RCC_OscConfig+0x314>)
 8010a58:	2580      	movs	r5, #128	; 0x80
 8010a5a:	006d      	lsls	r5, r5, #1
 8010a5c:	6833      	ldr	r3, [r6, #0]
 8010a5e:	422b      	tst	r3, r5
 8010a60:	d10e      	bne.n	8010a80 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010a62:	f7fe fd99 	bl	800f598 <HAL_GetTick>
 8010a66:	1bc0      	subs	r0, r0, r7
 8010a68:	2864      	cmp	r0, #100	; 0x64
 8010a6a:	d9f7      	bls.n	8010a5c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8010a6c:	2003      	movs	r0, #3
 8010a6e:	e6b0      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
 8010a70:	40021000 	.word	0x40021000
 8010a74:	fffeffff 	.word	0xfffeffff
 8010a78:	fffbffff 	.word	0xfffbffff
 8010a7c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010a80:	4b95      	ldr	r3, [pc, #596]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010a82:	6a1a      	ldr	r2, [r3, #32]
 8010a84:	2101      	movs	r1, #1
 8010a86:	438a      	bics	r2, r1
 8010a88:	621a      	str	r2, [r3, #32]
 8010a8a:	6a1a      	ldr	r2, [r3, #32]
 8010a8c:	3103      	adds	r1, #3
 8010a8e:	438a      	bics	r2, r1
 8010a90:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8010a92:	f7fe fd81 	bl	800f598 <HAL_GetTick>
 8010a96:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a98:	4e8f      	ldr	r6, [pc, #572]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010a9a:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a9c:	4f8f      	ldr	r7, [pc, #572]	; (8010cdc <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a9e:	6a33      	ldr	r3, [r6, #32]
 8010aa0:	421d      	tst	r5, r3
 8010aa2:	d007      	beq.n	8010ab4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010aa4:	f7fe fd78 	bl	800f598 <HAL_GetTick>
 8010aa8:	4643      	mov	r3, r8
 8010aaa:	1ac0      	subs	r0, r0, r3
 8010aac:	42b8      	cmp	r0, r7
 8010aae:	d9f6      	bls.n	8010a9e <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8010ab0:	2003      	movs	r0, #3
 8010ab2:	e68e      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010ab4:	68a3      	ldr	r3, [r4, #8]
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d00b      	beq.n	8010ad2 <HAL_RCC_OscConfig+0x36a>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d123      	bne.n	8010b06 <HAL_RCC_OscConfig+0x39e>
 8010abe:	4b86      	ldr	r3, [pc, #536]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010ac0:	6a1a      	ldr	r2, [r3, #32]
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	438a      	bics	r2, r1
 8010ac6:	621a      	str	r2, [r3, #32]
 8010ac8:	6a1a      	ldr	r2, [r3, #32]
 8010aca:	3103      	adds	r1, #3
 8010acc:	438a      	bics	r2, r1
 8010ace:	621a      	str	r2, [r3, #32]
 8010ad0:	e004      	b.n	8010adc <HAL_RCC_OscConfig+0x374>
 8010ad2:	4a81      	ldr	r2, [pc, #516]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010ad4:	6a13      	ldr	r3, [r2, #32]
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	430b      	orrs	r3, r1
 8010ada:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010adc:	68a3      	ldr	r3, [r4, #8]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d027      	beq.n	8010b32 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8010ae2:	f7fe fd59 	bl	800f598 <HAL_GetTick>
 8010ae6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010ae8:	4e7b      	ldr	r6, [pc, #492]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010aea:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010aec:	4f7b      	ldr	r7, [pc, #492]	; (8010cdc <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010aee:	6a33      	ldr	r3, [r6, #32]
 8010af0:	421d      	tst	r5, r3
 8010af2:	d000      	beq.n	8010af6 <HAL_RCC_OscConfig+0x38e>
 8010af4:	e759      	b.n	80109aa <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010af6:	f7fe fd4f 	bl	800f598 <HAL_GetTick>
 8010afa:	4643      	mov	r3, r8
 8010afc:	1ac0      	subs	r0, r0, r3
 8010afe:	42b8      	cmp	r0, r7
 8010b00:	d9f5      	bls.n	8010aee <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8010b02:	2003      	movs	r0, #3
 8010b04:	e665      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b06:	2b05      	cmp	r3, #5
 8010b08:	d009      	beq.n	8010b1e <HAL_RCC_OscConfig+0x3b6>
 8010b0a:	4b73      	ldr	r3, [pc, #460]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b0c:	6a1a      	ldr	r2, [r3, #32]
 8010b0e:	2101      	movs	r1, #1
 8010b10:	438a      	bics	r2, r1
 8010b12:	621a      	str	r2, [r3, #32]
 8010b14:	6a1a      	ldr	r2, [r3, #32]
 8010b16:	3103      	adds	r1, #3
 8010b18:	438a      	bics	r2, r1
 8010b1a:	621a      	str	r2, [r3, #32]
 8010b1c:	e7de      	b.n	8010adc <HAL_RCC_OscConfig+0x374>
 8010b1e:	4b6e      	ldr	r3, [pc, #440]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b20:	6a1a      	ldr	r2, [r3, #32]
 8010b22:	2104      	movs	r1, #4
 8010b24:	430a      	orrs	r2, r1
 8010b26:	621a      	str	r2, [r3, #32]
 8010b28:	6a1a      	ldr	r2, [r3, #32]
 8010b2a:	3903      	subs	r1, #3
 8010b2c:	430a      	orrs	r2, r1
 8010b2e:	621a      	str	r2, [r3, #32]
 8010b30:	e7d4      	b.n	8010adc <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8010b32:	f7fe fd31 	bl	800f598 <HAL_GetTick>
 8010b36:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b38:	4e67      	ldr	r6, [pc, #412]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b3a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b3c:	4f67      	ldr	r7, [pc, #412]	; (8010cdc <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b3e:	6a33      	ldr	r3, [r6, #32]
 8010b40:	421d      	tst	r5, r3
 8010b42:	d100      	bne.n	8010b46 <HAL_RCC_OscConfig+0x3de>
 8010b44:	e731      	b.n	80109aa <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b46:	f7fe fd27 	bl	800f598 <HAL_GetTick>
 8010b4a:	4643      	mov	r3, r8
 8010b4c:	1ac0      	subs	r0, r0, r3
 8010b4e:	42b8      	cmp	r0, r7
 8010b50:	d9f5      	bls.n	8010b3e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8010b52:	2003      	movs	r0, #3
 8010b54:	e63d      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010b56:	4b60      	ldr	r3, [pc, #384]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b5a:	2104      	movs	r1, #4
 8010b5c:	430a      	orrs	r2, r1
 8010b5e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8010b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b62:	3903      	subs	r1, #3
 8010b64:	430a      	orrs	r2, r1
 8010b66:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010b68:	f7fe fd16 	bl	800f598 <HAL_GetTick>
 8010b6c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010b6e:	4e5a      	ldr	r6, [pc, #360]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b70:	2502      	movs	r5, #2
 8010b72:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010b74:	421d      	tst	r5, r3
 8010b76:	d106      	bne.n	8010b86 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010b78:	f7fe fd0e 	bl	800f598 <HAL_GetTick>
 8010b7c:	1bc0      	subs	r0, r0, r7
 8010b7e:	2864      	cmp	r0, #100	; 0x64
 8010b80:	d9f7      	bls.n	8010b72 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8010b82:	2003      	movs	r0, #3
 8010b84:	e625      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010b86:	4954      	ldr	r1, [pc, #336]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b88:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010b8a:	69a3      	ldr	r3, [r4, #24]
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	20f8      	movs	r0, #248	; 0xf8
 8010b90:	4382      	bics	r2, r0
 8010b92:	4313      	orrs	r3, r2
 8010b94:	634b      	str	r3, [r1, #52]	; 0x34
 8010b96:	e71e      	b.n	80109d6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010b98:	4b4f      	ldr	r3, [pc, #316]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b9c:	2104      	movs	r1, #4
 8010b9e:	430a      	orrs	r2, r1
 8010ba0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8010ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ba4:	3903      	subs	r1, #3
 8010ba6:	438a      	bics	r2, r1
 8010ba8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010baa:	f7fe fcf5 	bl	800f598 <HAL_GetTick>
 8010bae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010bb0:	4e49      	ldr	r6, [pc, #292]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010bb2:	2502      	movs	r5, #2
 8010bb4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010bb6:	421d      	tst	r5, r3
 8010bb8:	d100      	bne.n	8010bbc <HAL_RCC_OscConfig+0x454>
 8010bba:	e70c      	b.n	80109d6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010bbc:	f7fe fcec 	bl	800f598 <HAL_GetTick>
 8010bc0:	1bc0      	subs	r0, r0, r7
 8010bc2:	2864      	cmp	r0, #100	; 0x64
 8010bc4:	d9f6      	bls.n	8010bb4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8010bc6:	2003      	movs	r0, #3
 8010bc8:	e603      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010bca:	4b43      	ldr	r3, [pc, #268]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	22c0      	movs	r2, #192	; 0xc0
 8010bd0:	0252      	lsls	r2, r2, #9
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d000      	beq.n	8010bda <HAL_RCC_OscConfig+0x472>
 8010bd8:	e70f      	b.n	80109fa <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010bda:	4b3f      	ldr	r3, [pc, #252]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bde:	03db      	lsls	r3, r3, #15
 8010be0:	d504      	bpl.n	8010bec <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8010be2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010be4:	69e3      	ldr	r3, [r4, #28]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d000      	beq.n	8010bec <HAL_RCC_OscConfig+0x484>
 8010bea:	e5f2      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8010bee:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d100      	bne.n	8010bf6 <HAL_RCC_OscConfig+0x48e>
 8010bf4:	e5ed      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010bf6:	4a38      	ldr	r2, [pc, #224]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010bf8:	6851      	ldr	r1, [r2, #4]
 8010bfa:	220c      	movs	r2, #12
 8010bfc:	400a      	ands	r2, r1
 8010bfe:	2a08      	cmp	r2, #8
 8010c00:	d068      	beq.n	8010cd4 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c02:	2b02      	cmp	r3, #2
 8010c04:	d029      	beq.n	8010c5a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8010c06:	4a34      	ldr	r2, [pc, #208]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c08:	6813      	ldr	r3, [r2, #0]
 8010c0a:	4935      	ldr	r1, [pc, #212]	; (8010ce0 <HAL_RCC_OscConfig+0x578>)
 8010c0c:	400b      	ands	r3, r1
 8010c0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010c10:	f7fe fcc2 	bl	800f598 <HAL_GetTick>
 8010c14:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c16:	4d30      	ldr	r5, [pc, #192]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c18:	2480      	movs	r4, #128	; 0x80
 8010c1a:	04a4      	lsls	r4, r4, #18
 8010c1c:	682b      	ldr	r3, [r5, #0]
 8010c1e:	4223      	tst	r3, r4
 8010c20:	d056      	beq.n	8010cd0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c22:	f7fe fcb9 	bl	800f598 <HAL_GetTick>
 8010c26:	1b80      	subs	r0, r0, r6
 8010c28:	2864      	cmp	r0, #100	; 0x64
 8010c2a:	d9f7      	bls.n	8010c1c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8010c2c:	2003      	movs	r0, #3
 8010c2e:	e5d0      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8010c30:	4a29      	ldr	r2, [pc, #164]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010c34:	492b      	ldr	r1, [pc, #172]	; (8010ce4 <HAL_RCC_OscConfig+0x57c>)
 8010c36:	400b      	ands	r3, r1
 8010c38:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010c3a:	f7fe fcad 	bl	800f598 <HAL_GetTick>
 8010c3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010c40:	4e25      	ldr	r6, [pc, #148]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c42:	2580      	movs	r5, #128	; 0x80
 8010c44:	026d      	lsls	r5, r5, #9
 8010c46:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010c48:	422b      	tst	r3, r5
 8010c4a:	d0cf      	beq.n	8010bec <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010c4c:	f7fe fca4 	bl	800f598 <HAL_GetTick>
 8010c50:	1bc0      	subs	r0, r0, r7
 8010c52:	2864      	cmp	r0, #100	; 0x64
 8010c54:	d9f7      	bls.n	8010c46 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8010c56:	2003      	movs	r0, #3
 8010c58:	e5bb      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8010c5a:	4a1f      	ldr	r2, [pc, #124]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c5c:	6813      	ldr	r3, [r2, #0]
 8010c5e:	4920      	ldr	r1, [pc, #128]	; (8010ce0 <HAL_RCC_OscConfig+0x578>)
 8010c60:	400b      	ands	r3, r1
 8010c62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010c64:	f7fe fc98 	bl	800f598 <HAL_GetTick>
 8010c68:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010c6a:	4e1b      	ldr	r6, [pc, #108]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c6c:	2580      	movs	r5, #128	; 0x80
 8010c6e:	04ad      	lsls	r5, r5, #18
 8010c70:	6833      	ldr	r3, [r6, #0]
 8010c72:	422b      	tst	r3, r5
 8010c74:	d006      	beq.n	8010c84 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c76:	f7fe fc8f 	bl	800f598 <HAL_GetTick>
 8010c7a:	1bc0      	subs	r0, r0, r7
 8010c7c:	2864      	cmp	r0, #100	; 0x64
 8010c7e:	d9f7      	bls.n	8010c70 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8010c80:	2003      	movs	r0, #3
 8010c82:	e5a6      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010c84:	4b14      	ldr	r3, [pc, #80]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c88:	210f      	movs	r1, #15
 8010c8a:	438a      	bics	r2, r1
 8010c8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010c8e:	430a      	orrs	r2, r1
 8010c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8010c92:	6859      	ldr	r1, [r3, #4]
 8010c94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010c96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010c98:	4302      	orrs	r2, r0
 8010c9a:	4813      	ldr	r0, [pc, #76]	; (8010ce8 <HAL_RCC_OscConfig+0x580>)
 8010c9c:	4001      	ands	r1, r0
 8010c9e:	430a      	orrs	r2, r1
 8010ca0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8010ca2:	6819      	ldr	r1, [r3, #0]
 8010ca4:	2280      	movs	r2, #128	; 0x80
 8010ca6:	0452      	lsls	r2, r2, #17
 8010ca8:	430a      	orrs	r2, r1
 8010caa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8010cac:	f7fe fc74 	bl	800f598 <HAL_GetTick>
 8010cb0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010cb2:	4d09      	ldr	r5, [pc, #36]	; (8010cd8 <HAL_RCC_OscConfig+0x570>)
 8010cb4:	2480      	movs	r4, #128	; 0x80
 8010cb6:	04a4      	lsls	r4, r4, #18
 8010cb8:	682b      	ldr	r3, [r5, #0]
 8010cba:	4223      	tst	r3, r4
 8010cbc:	d106      	bne.n	8010ccc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cbe:	f7fe fc6b 	bl	800f598 <HAL_GetTick>
 8010cc2:	1b80      	subs	r0, r0, r6
 8010cc4:	2864      	cmp	r0, #100	; 0x64
 8010cc6:	d9f7      	bls.n	8010cb8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8010cc8:	2003      	movs	r0, #3
 8010cca:	e582      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8010ccc:	2000      	movs	r0, #0
 8010cce:	e580      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	e57e      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	e57c      	b.n	80107d2 <HAL_RCC_OscConfig+0x6a>
 8010cd8:	40021000 	.word	0x40021000
 8010cdc:	00001388 	.word	0x00001388
 8010ce0:	feffffff 	.word	0xfeffffff
 8010ce4:	fffeffff 	.word	0xfffeffff
 8010ce8:	ffc27fff 	.word	0xffc27fff

08010cec <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cee:	46ce      	mov	lr, r9
 8010cf0:	4647      	mov	r7, r8
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	0005      	movs	r5, r0
 8010cf6:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010cf8:	4b95      	ldr	r3, [pc, #596]	; (8010f50 <HAL_RCC_ClockConfig+0x264>)
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	4013      	ands	r3, r2
 8010d00:	428b      	cmp	r3, r1
 8010d02:	d300      	bcc.n	8010d06 <HAL_RCC_ClockConfig+0x1a>
 8010d04:	e089      	b.n	8010e1a <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d06:	4992      	ldr	r1, [pc, #584]	; (8010f50 <HAL_RCC_ClockConfig+0x264>)
 8010d08:	680b      	ldr	r3, [r1, #0]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4393      	bics	r3, r2
 8010d0e:	4323      	orrs	r3, r4
 8010d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010d12:	680b      	ldr	r3, [r1, #0]
 8010d14:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8010d16:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010d18:	42a2      	cmp	r2, r4
 8010d1a:	d003      	beq.n	8010d24 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010d1c:	bc0c      	pop	{r2, r3}
 8010d1e:	4690      	mov	r8, r2
 8010d20:	4699      	mov	r9, r3
 8010d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d24:	682b      	ldr	r3, [r5, #0]
 8010d26:	079b      	lsls	r3, r3, #30
 8010d28:	d506      	bpl.n	8010d38 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010d2a:	4a8a      	ldr	r2, [pc, #552]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010d2c:	6853      	ldr	r3, [r2, #4]
 8010d2e:	21f0      	movs	r1, #240	; 0xf0
 8010d30:	438b      	bics	r3, r1
 8010d32:	68a9      	ldr	r1, [r5, #8]
 8010d34:	430b      	orrs	r3, r1
 8010d36:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010d38:	682b      	ldr	r3, [r5, #0]
 8010d3a:	07db      	lsls	r3, r3, #31
 8010d3c:	d400      	bmi.n	8010d40 <HAL_RCC_ClockConfig+0x54>
 8010d3e:	e0f7      	b.n	8010f30 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d40:	686b      	ldr	r3, [r5, #4]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d009      	beq.n	8010d5a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d02b      	beq.n	8010da2 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010d4a:	2b03      	cmp	r3, #3
 8010d4c:	d02f      	beq.n	8010dae <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d4e:	4a81      	ldr	r2, [pc, #516]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010d50:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010d52:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d54:	0792      	lsls	r2, r2, #30
 8010d56:	d405      	bmi.n	8010d64 <HAL_RCC_ClockConfig+0x78>
 8010d58:	e7e0      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d5a:	4a7e      	ldr	r2, [pc, #504]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010d5c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010d5e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d60:	0392      	lsls	r2, r2, #14
 8010d62:	d5db      	bpl.n	8010d1c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010d64:	497b      	ldr	r1, [pc, #492]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010d66:	684a      	ldr	r2, [r1, #4]
 8010d68:	2003      	movs	r0, #3
 8010d6a:	4382      	bics	r2, r0
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010d70:	f7fe fc12 	bl	800f598 <HAL_GetTick>
 8010d74:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d76:	686b      	ldr	r3, [r5, #4]
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d01e      	beq.n	8010dba <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d02c      	beq.n	8010dda <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010d80:	2b03      	cmp	r3, #3
 8010d82:	d03a      	beq.n	8010dfa <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010d84:	4f73      	ldr	r7, [pc, #460]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010d86:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d88:	4b73      	ldr	r3, [pc, #460]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010d8a:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	421e      	tst	r6, r3
 8010d90:	d100      	bne.n	8010d94 <HAL_RCC_ClockConfig+0xa8>
 8010d92:	e0cd      	b.n	8010f30 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d94:	f7fe fc00 	bl	800f598 <HAL_GetTick>
 8010d98:	1b00      	subs	r0, r0, r4
 8010d9a:	4540      	cmp	r0, r8
 8010d9c:	d9f6      	bls.n	8010d8c <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010d9e:	2003      	movs	r0, #3
 8010da0:	e7bc      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010da2:	4a6c      	ldr	r2, [pc, #432]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010da4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010da6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010da8:	0192      	lsls	r2, r2, #6
 8010daa:	d4db      	bmi.n	8010d64 <HAL_RCC_ClockConfig+0x78>
 8010dac:	e7b6      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010dae:	4a69      	ldr	r2, [pc, #420]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8010db2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010db4:	03d2      	lsls	r2, r2, #15
 8010db6:	d4d5      	bmi.n	8010d64 <HAL_RCC_ClockConfig+0x78>
 8010db8:	e7b0      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010dba:	4f66      	ldr	r7, [pc, #408]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010dbc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dbe:	4b66      	ldr	r3, [pc, #408]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010dc0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4033      	ands	r3, r6
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d100      	bne.n	8010dcc <HAL_RCC_ClockConfig+0xe0>
 8010dca:	e0b1      	b.n	8010f30 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dcc:	f7fe fbe4 	bl	800f598 <HAL_GetTick>
 8010dd0:	1b00      	subs	r0, r0, r4
 8010dd2:	4540      	cmp	r0, r8
 8010dd4:	d9f5      	bls.n	8010dc2 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8010dd6:	2003      	movs	r0, #3
 8010dd8:	e7a0      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010dda:	4f5e      	ldr	r7, [pc, #376]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010ddc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dde:	4b5e      	ldr	r3, [pc, #376]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010de0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4033      	ands	r3, r6
 8010de6:	2b08      	cmp	r3, #8
 8010de8:	d100      	bne.n	8010dec <HAL_RCC_ClockConfig+0x100>
 8010dea:	e0a1      	b.n	8010f30 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dec:	f7fe fbd4 	bl	800f598 <HAL_GetTick>
 8010df0:	1b00      	subs	r0, r0, r4
 8010df2:	4540      	cmp	r0, r8
 8010df4:	d9f5      	bls.n	8010de2 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8010df6:	2003      	movs	r0, #3
 8010df8:	e790      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010dfa:	4f56      	ldr	r7, [pc, #344]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010dfc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010dfe:	4b56      	ldr	r3, [pc, #344]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010e00:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4033      	ands	r3, r6
 8010e06:	2b0c      	cmp	r3, #12
 8010e08:	d100      	bne.n	8010e0c <HAL_RCC_ClockConfig+0x120>
 8010e0a:	e091      	b.n	8010f30 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e0c:	f7fe fbc4 	bl	800f598 <HAL_GetTick>
 8010e10:	1b00      	subs	r0, r0, r4
 8010e12:	4540      	cmp	r0, r8
 8010e14:	d9f5      	bls.n	8010e02 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8010e16:	2003      	movs	r0, #3
 8010e18:	e780      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010e1a:	6803      	ldr	r3, [r0, #0]
 8010e1c:	079b      	lsls	r3, r3, #30
 8010e1e:	d506      	bpl.n	8010e2e <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e20:	4a4c      	ldr	r2, [pc, #304]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e22:	6853      	ldr	r3, [r2, #4]
 8010e24:	21f0      	movs	r1, #240	; 0xf0
 8010e26:	438b      	bics	r3, r1
 8010e28:	6881      	ldr	r1, [r0, #8]
 8010e2a:	430b      	orrs	r3, r1
 8010e2c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010e2e:	682b      	ldr	r3, [r5, #0]
 8010e30:	07db      	lsls	r3, r3, #31
 8010e32:	d571      	bpl.n	8010f18 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e34:	686b      	ldr	r3, [r5, #4]
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d009      	beq.n	8010e4e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d02d      	beq.n	8010e9a <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d031      	beq.n	8010ea6 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e42:	4a44      	ldr	r2, [pc, #272]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e44:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010e46:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e48:	0792      	lsls	r2, r2, #30
 8010e4a:	d406      	bmi.n	8010e5a <HAL_RCC_ClockConfig+0x16e>
 8010e4c:	e766      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e4e:	4a41      	ldr	r2, [pc, #260]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e50:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010e52:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e54:	0392      	lsls	r2, r2, #14
 8010e56:	d400      	bmi.n	8010e5a <HAL_RCC_ClockConfig+0x16e>
 8010e58:	e760      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e5a:	493e      	ldr	r1, [pc, #248]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e5c:	684a      	ldr	r2, [r1, #4]
 8010e5e:	2003      	movs	r0, #3
 8010e60:	4382      	bics	r2, r0
 8010e62:	4313      	orrs	r3, r2
 8010e64:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010e66:	f7fe fb97 	bl	800f598 <HAL_GetTick>
 8010e6a:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e6c:	686b      	ldr	r3, [r5, #4]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d01f      	beq.n	8010eb2 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d02e      	beq.n	8010ed4 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010e76:	2b03      	cmp	r3, #3
 8010e78:	d03d      	beq.n	8010ef6 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010e7a:	4b36      	ldr	r3, [pc, #216]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e7c:	4698      	mov	r8, r3
 8010e7e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e80:	4b35      	ldr	r3, [pc, #212]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010e82:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010e84:	4643      	mov	r3, r8
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	421f      	tst	r7, r3
 8010e8a:	d045      	beq.n	8010f18 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e8c:	f7fe fb84 	bl	800f598 <HAL_GetTick>
 8010e90:	1b80      	subs	r0, r0, r6
 8010e92:	4548      	cmp	r0, r9
 8010e94:	d9f6      	bls.n	8010e84 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8010e96:	2003      	movs	r0, #3
 8010e98:	e740      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e9a:	4a2e      	ldr	r2, [pc, #184]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010e9c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010e9e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010ea0:	0192      	lsls	r2, r2, #6
 8010ea2:	d4da      	bmi.n	8010e5a <HAL_RCC_ClockConfig+0x16e>
 8010ea4:	e73a      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010ea6:	4a2b      	ldr	r2, [pc, #172]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8010eaa:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010eac:	03d2      	lsls	r2, r2, #15
 8010eae:	d4d4      	bmi.n	8010e5a <HAL_RCC_ClockConfig+0x16e>
 8010eb0:	e734      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010eb2:	4b28      	ldr	r3, [pc, #160]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010eb4:	4698      	mov	r8, r3
 8010eb6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010eb8:	4b27      	ldr	r3, [pc, #156]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010eba:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010ebc:	4643      	mov	r3, r8
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	403b      	ands	r3, r7
 8010ec2:	2b04      	cmp	r3, #4
 8010ec4:	d028      	beq.n	8010f18 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ec6:	f7fe fb67 	bl	800f598 <HAL_GetTick>
 8010eca:	1b80      	subs	r0, r0, r6
 8010ecc:	4548      	cmp	r0, r9
 8010ece:	d9f5      	bls.n	8010ebc <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8010ed0:	2003      	movs	r0, #3
 8010ed2:	e723      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ed4:	4b1f      	ldr	r3, [pc, #124]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010ed6:	4698      	mov	r8, r3
 8010ed8:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010eda:	4b1f      	ldr	r3, [pc, #124]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010edc:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ede:	4643      	mov	r3, r8
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	403b      	ands	r3, r7
 8010ee4:	2b08      	cmp	r3, #8
 8010ee6:	d017      	beq.n	8010f18 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ee8:	f7fe fb56 	bl	800f598 <HAL_GetTick>
 8010eec:	1b80      	subs	r0, r0, r6
 8010eee:	4548      	cmp	r0, r9
 8010ef0:	d9f5      	bls.n	8010ede <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8010ef2:	2003      	movs	r0, #3
 8010ef4:	e712      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010ef6:	4b17      	ldr	r3, [pc, #92]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010ef8:	4698      	mov	r8, r3
 8010efa:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010efc:	4b16      	ldr	r3, [pc, #88]	; (8010f58 <HAL_RCC_ClockConfig+0x26c>)
 8010efe:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010f00:	4643      	mov	r3, r8
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	403b      	ands	r3, r7
 8010f06:	2b0c      	cmp	r3, #12
 8010f08:	d006      	beq.n	8010f18 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010f0a:	f7fe fb45 	bl	800f598 <HAL_GetTick>
 8010f0e:	1b80      	subs	r0, r0, r6
 8010f10:	4548      	cmp	r0, r9
 8010f12:	d9f5      	bls.n	8010f00 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8010f14:	2003      	movs	r0, #3
 8010f16:	e701      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010f18:	490d      	ldr	r1, [pc, #52]	; (8010f50 <HAL_RCC_ClockConfig+0x264>)
 8010f1a:	680b      	ldr	r3, [r1, #0]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	4393      	bics	r3, r2
 8010f20:	4323      	orrs	r3, r4
 8010f22:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010f24:	680b      	ldr	r3, [r1, #0]
 8010f26:	401a      	ands	r2, r3
      return HAL_ERROR;
 8010f28:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010f2a:	42a2      	cmp	r2, r4
 8010f2c:	d000      	beq.n	8010f30 <HAL_RCC_ClockConfig+0x244>
 8010f2e:	e6f5      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010f30:	682b      	ldr	r3, [r5, #0]
 8010f32:	075b      	lsls	r3, r3, #29
 8010f34:	d506      	bpl.n	8010f44 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010f36:	4a07      	ldr	r2, [pc, #28]	; (8010f54 <HAL_RCC_ClockConfig+0x268>)
 8010f38:	6853      	ldr	r3, [r2, #4]
 8010f3a:	4908      	ldr	r1, [pc, #32]	; (8010f5c <HAL_RCC_ClockConfig+0x270>)
 8010f3c:	400b      	ands	r3, r1
 8010f3e:	68e9      	ldr	r1, [r5, #12]
 8010f40:	430b      	orrs	r3, r1
 8010f42:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010f44:	2000      	movs	r0, #0
 8010f46:	f7fe fafd 	bl	800f544 <HAL_InitTick>
  return HAL_OK;
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	e6e6      	b.n	8010d1c <HAL_RCC_ClockConfig+0x30>
 8010f4e:	46c0      	nop			; (mov r8, r8)
 8010f50:	40022000 	.word	0x40022000
 8010f54:	40021000 	.word	0x40021000
 8010f58:	00001388 	.word	0x00001388
 8010f5c:	fffff8ff 	.word	0xfffff8ff

08010f60 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f60:	b530      	push	{r4, r5, lr}
 8010f62:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010f64:	aa04      	add	r2, sp, #16
 8010f66:	4b21      	ldr	r3, [pc, #132]	; (8010fec <HAL_RCC_GetSysClockFreq+0x8c>)
 8010f68:	0018      	movs	r0, r3
 8010f6a:	c832      	ldmia	r0!, {r1, r4, r5}
 8010f6c:	c232      	stmia	r2!, {r1, r4, r5}
 8010f6e:	0011      	movs	r1, r2
 8010f70:	6802      	ldr	r2, [r0, #0]
 8010f72:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010f74:	466a      	mov	r2, sp
 8010f76:	3310      	adds	r3, #16
 8010f78:	cb13      	ldmia	r3!, {r0, r1, r4}
 8010f7a:	c213      	stmia	r2!, {r0, r1, r4}
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010f80:	4b1b      	ldr	r3, [pc, #108]	; (8010ff0 <HAL_RCC_GetSysClockFreq+0x90>)
 8010f82:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010f84:	200c      	movs	r0, #12
 8010f86:	4018      	ands	r0, r3
 8010f88:	2808      	cmp	r0, #8
 8010f8a:	d00a      	beq.n	8010fa2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010f8c:	380c      	subs	r0, #12
 8010f8e:	4243      	negs	r3, r0
 8010f90:	4158      	adcs	r0, r3
 8010f92:	4240      	negs	r0, r0
 8010f94:	4b17      	ldr	r3, [pc, #92]	; (8010ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8010f96:	4018      	ands	r0, r3
 8010f98:	4b17      	ldr	r3, [pc, #92]	; (8010ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8010f9a:	469c      	mov	ip, r3
 8010f9c:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010f9e:	b009      	add	sp, #36	; 0x24
 8010fa0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010fa2:	0c99      	lsrs	r1, r3, #18
 8010fa4:	220f      	movs	r2, #15
 8010fa6:	4011      	ands	r1, r2
 8010fa8:	a804      	add	r0, sp, #16
 8010faa:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010fac:	4910      	ldr	r1, [pc, #64]	; (8010ff0 <HAL_RCC_GetSysClockFreq+0x90>)
 8010fae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010fb0:	400a      	ands	r2, r1
 8010fb2:	4669      	mov	r1, sp
 8010fb4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010fb6:	22c0      	movs	r2, #192	; 0xc0
 8010fb8:	0252      	lsls	r2, r2, #9
 8010fba:	4013      	ands	r3, r2
 8010fbc:	2280      	movs	r2, #128	; 0x80
 8010fbe:	0252      	lsls	r2, r2, #9
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d008      	beq.n	8010fd6 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010fc4:	22c0      	movs	r2, #192	; 0xc0
 8010fc6:	0252      	lsls	r2, r2, #9
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d009      	beq.n	8010fe0 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010fcc:	480a      	ldr	r0, [pc, #40]	; (8010ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8010fce:	f7ef f8bf 	bl	8000150 <__udivsi3>
 8010fd2:	4360      	muls	r0, r4
 8010fd4:	e7e3      	b.n	8010f9e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8010fd6:	4808      	ldr	r0, [pc, #32]	; (8010ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8010fd8:	f7ef f8ba 	bl	8000150 <__udivsi3>
 8010fdc:	4360      	muls	r0, r4
 8010fde:	e7de      	b.n	8010f9e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010fe0:	4806      	ldr	r0, [pc, #24]	; (8010ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8010fe2:	f7ef f8b5 	bl	8000150 <__udivsi3>
 8010fe6:	4360      	muls	r0, r4
 8010fe8:	e7d9      	b.n	8010f9e <HAL_RCC_GetSysClockFreq+0x3e>
 8010fea:	46c0      	nop			; (mov r8, r8)
 8010fec:	08017604 	.word	0x08017604
 8010ff0:	40021000 	.word	0x40021000
 8010ff4:	02625a00 	.word	0x02625a00
 8010ff8:	007a1200 	.word	0x007a1200
 8010ffc:	02dc6c00 	.word	0x02dc6c00

08011000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011000:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011002:	f7ff ffad 	bl	8010f60 <HAL_RCC_GetSysClockFreq>
 8011006:	4b05      	ldr	r3, [pc, #20]	; (801101c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	061b      	lsls	r3, r3, #24
 801100c:	0f1b      	lsrs	r3, r3, #28
 801100e:	4a04      	ldr	r2, [pc, #16]	; (8011020 <HAL_RCC_GetHCLKFreq+0x20>)
 8011010:	5cd3      	ldrb	r3, [r2, r3]
 8011012:	40d8      	lsrs	r0, r3
 8011014:	4b03      	ldr	r3, [pc, #12]	; (8011024 <HAL_RCC_GetHCLKFreq+0x24>)
 8011016:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011018:	bd10      	pop	{r4, pc}
 801101a:	46c0      	nop			; (mov r8, r8)
 801101c:	40021000 	.word	0x40021000
 8011020:	0801a538 	.word	0x0801a538
 8011024:	2000004c 	.word	0x2000004c

08011028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011028:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801102a:	f7ff ffe9 	bl	8011000 <HAL_RCC_GetHCLKFreq>
 801102e:	4b04      	ldr	r3, [pc, #16]	; (8011040 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	055b      	lsls	r3, r3, #21
 8011034:	0f5b      	lsrs	r3, r3, #29
 8011036:	4a03      	ldr	r2, [pc, #12]	; (8011044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011038:	5cd3      	ldrb	r3, [r2, r3]
 801103a:	40d8      	lsrs	r0, r3
}    
 801103c:	bd10      	pop	{r4, pc}
 801103e:	46c0      	nop			; (mov r8, r8)
 8011040:	40021000 	.word	0x40021000
 8011044:	0801a538 	.word	0x0801a538

08011048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104a:	46c6      	mov	lr, r8
 801104c:	b500      	push	{lr}
 801104e:	b082      	sub	sp, #8
 8011050:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011052:	6803      	ldr	r3, [r0, #0]
 8011054:	03db      	lsls	r3, r3, #15
 8011056:	d507      	bpl.n	8011068 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011058:	4b43      	ldr	r3, [pc, #268]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801105a:	6a1b      	ldr	r3, [r3, #32]
 801105c:	6842      	ldr	r2, [r0, #4]
 801105e:	4053      	eors	r3, r2
 8011060:	22c0      	movs	r2, #192	; 0xc0
 8011062:	0092      	lsls	r2, r2, #2
 8011064:	4213      	tst	r3, r2
 8011066:	d136      	bne.n	80110d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011068:	6823      	ldr	r3, [r4, #0]
 801106a:	07db      	lsls	r3, r3, #31
 801106c:	d506      	bpl.n	801107c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801106e:	4a3e      	ldr	r2, [pc, #248]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011070:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011072:	2103      	movs	r1, #3
 8011074:	438b      	bics	r3, r1
 8011076:	68a1      	ldr	r1, [r4, #8]
 8011078:	430b      	orrs	r3, r1
 801107a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	079b      	lsls	r3, r3, #30
 8011080:	d506      	bpl.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011082:	4a39      	ldr	r2, [pc, #228]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011084:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011086:	4939      	ldr	r1, [pc, #228]	; (801116c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011088:	400b      	ands	r3, r1
 801108a:	68e1      	ldr	r1, [r4, #12]
 801108c:	430b      	orrs	r3, r1
 801108e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011090:	6823      	ldr	r3, [r4, #0]
 8011092:	035b      	lsls	r3, r3, #13
 8011094:	d506      	bpl.n	80110a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011096:	4a34      	ldr	r2, [pc, #208]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011098:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801109a:	4935      	ldr	r1, [pc, #212]	; (8011170 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 801109c:	400b      	ands	r3, r1
 801109e:	6921      	ldr	r1, [r4, #16]
 80110a0:	430b      	orrs	r3, r1
 80110a2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80110a4:	6823      	ldr	r3, [r4, #0]
 80110a6:	069b      	lsls	r3, r3, #26
 80110a8:	d506      	bpl.n	80110b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80110aa:	4a2f      	ldr	r2, [pc, #188]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110ae:	2110      	movs	r1, #16
 80110b0:	438b      	bics	r3, r1
 80110b2:	6961      	ldr	r1, [r4, #20]
 80110b4:	430b      	orrs	r3, r1
 80110b6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80110b8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	055b      	lsls	r3, r3, #21
 80110be:	d506      	bpl.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80110c0:	4a29      	ldr	r2, [pc, #164]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80110c4:	2140      	movs	r1, #64	; 0x40
 80110c6:	438b      	bics	r3, r1
 80110c8:	69a1      	ldr	r1, [r4, #24]
 80110ca:	430b      	orrs	r3, r1
 80110cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80110ce:	b002      	add	sp, #8
 80110d0:	bc04      	pop	{r2}
 80110d2:	4690      	mov	r8, r2
 80110d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80110d6:	4a24      	ldr	r2, [pc, #144]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80110d8:	69d1      	ldr	r1, [r2, #28]
 80110da:	2080      	movs	r0, #128	; 0x80
 80110dc:	0540      	lsls	r0, r0, #21
 80110de:	4301      	orrs	r1, r0
 80110e0:	61d1      	str	r1, [r2, #28]
 80110e2:	69d3      	ldr	r3, [r2, #28]
 80110e4:	4003      	ands	r3, r0
 80110e6:	9301      	str	r3, [sp, #4]
 80110e8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110ea:	4a22      	ldr	r2, [pc, #136]	; (8011174 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80110ec:	6811      	ldr	r1, [r2, #0]
 80110ee:	2380      	movs	r3, #128	; 0x80
 80110f0:	005b      	lsls	r3, r3, #1
 80110f2:	430b      	orrs	r3, r1
 80110f4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80110f6:	f7fe fa4f 	bl	800f598 <HAL_GetTick>
 80110fa:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80110fc:	4e1d      	ldr	r6, [pc, #116]	; (8011174 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80110fe:	2580      	movs	r5, #128	; 0x80
 8011100:	006d      	lsls	r5, r5, #1
 8011102:	6833      	ldr	r3, [r6, #0]
 8011104:	422b      	tst	r3, r5
 8011106:	d106      	bne.n	8011116 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011108:	f7fe fa46 	bl	800f598 <HAL_GetTick>
 801110c:	1bc0      	subs	r0, r0, r7
 801110e:	2864      	cmp	r0, #100	; 0x64
 8011110:	d9f7      	bls.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011112:	2003      	movs	r0, #3
 8011114:	e7db      	b.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011116:	4b14      	ldr	r3, [pc, #80]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011118:	6a18      	ldr	r0, [r3, #32]
 801111a:	4a17      	ldr	r2, [pc, #92]	; (8011178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801111c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801111e:	6a1d      	ldr	r5, [r3, #32]
 8011120:	2180      	movs	r1, #128	; 0x80
 8011122:	0249      	lsls	r1, r1, #9
 8011124:	4329      	orrs	r1, r5
 8011126:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011128:	6a19      	ldr	r1, [r3, #32]
 801112a:	4d14      	ldr	r5, [pc, #80]	; (801117c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801112c:	4029      	ands	r1, r5
 801112e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011130:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011132:	0783      	lsls	r3, r0, #30
 8011134:	d407      	bmi.n	8011146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011136:	4a0c      	ldr	r2, [pc, #48]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011138:	6a13      	ldr	r3, [r2, #32]
 801113a:	490f      	ldr	r1, [pc, #60]	; (8011178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801113c:	400b      	ands	r3, r1
 801113e:	6861      	ldr	r1, [r4, #4]
 8011140:	430b      	orrs	r3, r1
 8011142:	6213      	str	r3, [r2, #32]
 8011144:	e790      	b.n	8011068 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011146:	f7fe fa27 	bl	800f598 <HAL_GetTick>
 801114a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801114c:	4e06      	ldr	r6, [pc, #24]	; (8011168 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801114e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011150:	4f0b      	ldr	r7, [pc, #44]	; (8011180 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011152:	6a33      	ldr	r3, [r6, #32]
 8011154:	421d      	tst	r5, r3
 8011156:	d1ee      	bne.n	8011136 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011158:	f7fe fa1e 	bl	800f598 <HAL_GetTick>
 801115c:	4643      	mov	r3, r8
 801115e:	1ac0      	subs	r0, r0, r3
 8011160:	42b8      	cmp	r0, r7
 8011162:	d9f6      	bls.n	8011152 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8011164:	2003      	movs	r0, #3
 8011166:	e7b2      	b.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011168:	40021000 	.word	0x40021000
 801116c:	fffcffff 	.word	0xfffcffff
 8011170:	fff3ffff 	.word	0xfff3ffff
 8011174:	40007000 	.word	0x40007000
 8011178:	fffffcff 	.word	0xfffffcff
 801117c:	fffeffff 	.word	0xfffeffff
 8011180:	00001388 	.word	0x00001388

08011184 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011184:	4770      	bx	lr

08011186 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8011186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011188:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801118a:	6802      	ldr	r2, [r0, #0]
 801118c:	68d3      	ldr	r3, [r2, #12]
 801118e:	21a0      	movs	r1, #160	; 0xa0
 8011190:	438b      	bics	r3, r1
 8011192:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011194:	f7fe fa00 	bl	800f598 <HAL_GetTick>
 8011198:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801119a:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801119c:	26fa      	movs	r6, #250	; 0xfa
 801119e:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80111a0:	6823      	ldr	r3, [r4, #0]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	421d      	tst	r5, r3
 80111a6:	d106      	bne.n	80111b6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80111a8:	f7fe f9f6 	bl	800f598 <HAL_GetTick>
 80111ac:	1bc0      	subs	r0, r0, r7
 80111ae:	42b0      	cmp	r0, r6
 80111b0:	d9f6      	bls.n	80111a0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80111b2:	2003      	movs	r0, #3
 80111b4:	e000      	b.n	80111b8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80111b6:	2000      	movs	r0, #0
}
 80111b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80111ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111bc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111be:	6803      	ldr	r3, [r0, #0]
 80111c0:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80111c2:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111c4:	0652      	lsls	r2, r2, #25
 80111c6:	d500      	bpl.n	80111ca <RTC_EnterInitMode+0x10>
}
 80111c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80111ca:	2201      	movs	r2, #1
 80111cc:	4252      	negs	r2, r2
 80111ce:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80111d0:	f7fe f9e2 	bl	800f598 <HAL_GetTick>
 80111d4:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111d6:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80111d8:	26fa      	movs	r6, #250	; 0xfa
 80111da:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	421d      	tst	r5, r3
 80111e2:	d106      	bne.n	80111f2 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80111e4:	f7fe f9d8 	bl	800f598 <HAL_GetTick>
 80111e8:	1bc0      	subs	r0, r0, r7
 80111ea:	42b0      	cmp	r0, r6
 80111ec:	d9f6      	bls.n	80111dc <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80111ee:	2003      	movs	r0, #3
 80111f0:	e7ea      	b.n	80111c8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80111f2:	2000      	movs	r0, #0
 80111f4:	e7e8      	b.n	80111c8 <RTC_EnterInitMode+0xe>
	...

080111f8 <HAL_RTC_Init>:
{
 80111f8:	b570      	push	{r4, r5, r6, lr}
 80111fa:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80111fc:	d046      	beq.n	801128c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80111fe:	7f43      	ldrb	r3, [r0, #29]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d038      	beq.n	8011276 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011204:	2302      	movs	r3, #2
 8011206:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011208:	6823      	ldr	r3, [r4, #0]
 801120a:	22ca      	movs	r2, #202	; 0xca
 801120c:	625a      	str	r2, [r3, #36]	; 0x24
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	3a77      	subs	r2, #119	; 0x77
 8011212:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011214:	0020      	movs	r0, r4
 8011216:	f7ff ffd0 	bl	80111ba <RTC_EnterInitMode>
 801121a:	2800      	cmp	r0, #0
 801121c:	d12f      	bne.n	801127e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801121e:	6822      	ldr	r2, [r4, #0]
 8011220:	6893      	ldr	r3, [r2, #8]
 8011222:	491b      	ldr	r1, [pc, #108]	; (8011290 <HAL_RTC_Init+0x98>)
 8011224:	400b      	ands	r3, r1
 8011226:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011228:	6822      	ldr	r2, [r4, #0]
 801122a:	6891      	ldr	r1, [r2, #8]
 801122c:	6863      	ldr	r3, [r4, #4]
 801122e:	6925      	ldr	r5, [r4, #16]
 8011230:	432b      	orrs	r3, r5
 8011232:	6965      	ldr	r5, [r4, #20]
 8011234:	432b      	orrs	r3, r5
 8011236:	430b      	orrs	r3, r1
 8011238:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	68e2      	ldr	r2, [r4, #12]
 801123e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011240:	6822      	ldr	r2, [r4, #0]
 8011242:	6911      	ldr	r1, [r2, #16]
 8011244:	68a3      	ldr	r3, [r4, #8]
 8011246:	041b      	lsls	r3, r3, #16
 8011248:	430b      	orrs	r3, r1
 801124a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801124c:	6822      	ldr	r2, [r4, #0]
 801124e:	68d3      	ldr	r3, [r2, #12]
 8011250:	2180      	movs	r1, #128	; 0x80
 8011252:	438b      	bics	r3, r1
 8011254:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011256:	6822      	ldr	r2, [r4, #0]
 8011258:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801125a:	490e      	ldr	r1, [pc, #56]	; (8011294 <HAL_RTC_Init+0x9c>)
 801125c:	400b      	ands	r3, r1
 801125e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011260:	6822      	ldr	r2, [r4, #0]
 8011262:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011264:	69a1      	ldr	r1, [r4, #24]
 8011266:	430b      	orrs	r3, r1
 8011268:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	22ff      	movs	r2, #255	; 0xff
 801126e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011270:	2301      	movs	r3, #1
 8011272:	7763      	strb	r3, [r4, #29]
}
 8011274:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011276:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011278:	f7ff ff84 	bl	8011184 <HAL_RTC_MspInit>
 801127c:	e7c2      	b.n	8011204 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	22ff      	movs	r2, #255	; 0xff
 8011282:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011284:	2304      	movs	r3, #4
 8011286:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011288:	2001      	movs	r0, #1
 801128a:	e7f3      	b.n	8011274 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 801128c:	2001      	movs	r0, #1
 801128e:	e7f1      	b.n	8011274 <HAL_RTC_Init+0x7c>
 8011290:	ff8fffbf 	.word	0xff8fffbf
 8011294:	fffbffff 	.word	0xfffbffff

08011298 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011298:	2809      	cmp	r0, #9
 801129a:	d909      	bls.n	80112b0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 801129c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 801129e:	3301      	adds	r3, #1
    Value -= 10;
 80112a0:	380a      	subs	r0, #10
 80112a2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80112a4:	2809      	cmp	r0, #9
 80112a6:	d8fa      	bhi.n	801129e <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80112a8:	011b      	lsls	r3, r3, #4
 80112aa:	4318      	orrs	r0, r3
 80112ac:	b2c0      	uxtb	r0, r0
}
 80112ae:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80112b0:	2300      	movs	r3, #0
 80112b2:	e7f9      	b.n	80112a8 <RTC_ByteToBcd2+0x10>

080112b4 <HAL_RTC_SetTime>:
{
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	46c6      	mov	lr, r8
 80112b8:	b500      	push	{lr}
 80112ba:	0004      	movs	r4, r0
 80112bc:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80112be:	7f03      	ldrb	r3, [r0, #28]
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d100      	bne.n	80112c6 <HAL_RTC_SetTime+0x12>
 80112c4:	e075      	b.n	80113b2 <HAL_RTC_SetTime+0xfe>
 80112c6:	2301      	movs	r3, #1
 80112c8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80112ca:	3301      	adds	r3, #1
 80112cc:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	d144      	bne.n	801135c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80112d2:	6803      	ldr	r3, [r0, #0]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	065b      	lsls	r3, r3, #25
 80112d8:	d401      	bmi.n	80112de <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80112da:	2300      	movs	r3, #0
 80112dc:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80112de:	7830      	ldrb	r0, [r6, #0]
 80112e0:	f7ff ffda 	bl	8011298 <RTC_ByteToBcd2>
 80112e4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80112e6:	7870      	ldrb	r0, [r6, #1]
 80112e8:	f7ff ffd6 	bl	8011298 <RTC_ByteToBcd2>
 80112ec:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80112ee:	78b0      	ldrb	r0, [r6, #2]
 80112f0:	f7ff ffd2 	bl	8011298 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80112f4:	7a35      	ldrb	r5, [r6, #8]
 80112f6:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80112f8:	4305      	orrs	r5, r0
 80112fa:	4643      	mov	r3, r8
 80112fc:	0418      	lsls	r0, r3, #16
 80112fe:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011300:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011302:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	22ca      	movs	r2, #202	; 0xca
 8011308:	625a      	str	r2, [r3, #36]	; 0x24
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	3a77      	subs	r2, #119	; 0x77
 801130e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011310:	0020      	movs	r0, r4
 8011312:	f7ff ff52 	bl	80111ba <RTC_EnterInitMode>
 8011316:	1e07      	subs	r7, r0, #0
 8011318:	d131      	bne.n	801137e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801131a:	6823      	ldr	r3, [r4, #0]
 801131c:	4826      	ldr	r0, [pc, #152]	; (80113b8 <HAL_RTC_SetTime+0x104>)
 801131e:	4005      	ands	r5, r0
 8011320:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011322:	6822      	ldr	r2, [r4, #0]
 8011324:	6893      	ldr	r3, [r2, #8]
 8011326:	4925      	ldr	r1, [pc, #148]	; (80113bc <HAL_RTC_SetTime+0x108>)
 8011328:	400b      	ands	r3, r1
 801132a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801132c:	6822      	ldr	r2, [r4, #0]
 801132e:	6891      	ldr	r1, [r2, #8]
 8011330:	68f3      	ldr	r3, [r6, #12]
 8011332:	6930      	ldr	r0, [r6, #16]
 8011334:	4303      	orrs	r3, r0
 8011336:	430b      	orrs	r3, r1
 8011338:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801133a:	6822      	ldr	r2, [r4, #0]
 801133c:	68d3      	ldr	r3, [r2, #12]
 801133e:	2180      	movs	r1, #128	; 0x80
 8011340:	438b      	bics	r3, r1
 8011342:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	069b      	lsls	r3, r3, #26
 801134a:	d524      	bpl.n	8011396 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801134c:	6823      	ldr	r3, [r4, #0]
 801134e:	22ff      	movs	r2, #255	; 0xff
 8011350:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011352:	2301      	movs	r3, #1
 8011354:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011356:	2300      	movs	r3, #0
 8011358:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801135a:	e018      	b.n	801138e <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801135c:	6803      	ldr	r3, [r0, #0]
 801135e:	689b      	ldr	r3, [r3, #8]
 8011360:	065b      	lsls	r3, r3, #25
 8011362:	d401      	bmi.n	8011368 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8011364:	2300      	movs	r3, #0
 8011366:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011368:	7835      	ldrb	r5, [r6, #0]
 801136a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801136c:	7870      	ldrb	r0, [r6, #1]
 801136e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011370:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011372:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011374:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011376:	7a30      	ldrb	r0, [r6, #8]
 8011378:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801137a:	4305      	orrs	r5, r0
 801137c:	e7c2      	b.n	8011304 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801137e:	6823      	ldr	r3, [r4, #0]
 8011380:	22ff      	movs	r2, #255	; 0xff
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011384:	2304      	movs	r3, #4
 8011386:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011388:	2300      	movs	r3, #0
 801138a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801138c:	2701      	movs	r7, #1
}
 801138e:	0038      	movs	r0, r7
 8011390:	bc04      	pop	{r2}
 8011392:	4690      	mov	r8, r2
 8011394:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011396:	0020      	movs	r0, r4
 8011398:	f7ff fef5 	bl	8011186 <HAL_RTC_WaitForSynchro>
 801139c:	2800      	cmp	r0, #0
 801139e:	d0d5      	beq.n	801134c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	22ff      	movs	r2, #255	; 0xff
 80113a4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80113a6:	2304      	movs	r3, #4
 80113a8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80113aa:	2300      	movs	r3, #0
 80113ac:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80113ae:	2701      	movs	r7, #1
 80113b0:	e7ed      	b.n	801138e <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80113b2:	2702      	movs	r7, #2
 80113b4:	e7eb      	b.n	801138e <HAL_RTC_SetTime+0xda>
 80113b6:	46c0      	nop			; (mov r8, r8)
 80113b8:	007f7f7f 	.word	0x007f7f7f
 80113bc:	fffbffff 	.word	0xfffbffff

080113c0 <HAL_RTC_SetDate>:
{
 80113c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113c2:	46c6      	mov	lr, r8
 80113c4:	b500      	push	{lr}
 80113c6:	0004      	movs	r4, r0
 80113c8:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80113ca:	7f03      	ldrb	r3, [r0, #28]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d03a      	beq.n	8011446 <HAL_RTC_SetDate+0x86>
 80113d0:	2301      	movs	r3, #1
 80113d2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80113d4:	3301      	adds	r3, #1
 80113d6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80113d8:	2a00      	cmp	r2, #0
 80113da:	d136      	bne.n	801144a <HAL_RTC_SetDate+0x8a>
 80113dc:	784b      	ldrb	r3, [r1, #1]
 80113de:	06da      	lsls	r2, r3, #27
 80113e0:	d503      	bpl.n	80113ea <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80113e2:	2210      	movs	r2, #16
 80113e4:	4393      	bics	r3, r2
 80113e6:	330a      	adds	r3, #10
 80113e8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80113ea:	78f0      	ldrb	r0, [r6, #3]
 80113ec:	f7ff ff54 	bl	8011298 <RTC_ByteToBcd2>
 80113f0:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80113f2:	7870      	ldrb	r0, [r6, #1]
 80113f4:	f7ff ff50 	bl	8011298 <RTC_ByteToBcd2>
 80113f8:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80113fa:	78b0      	ldrb	r0, [r6, #2]
 80113fc:	f7ff ff4c 	bl	8011298 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011400:	7835      	ldrb	r5, [r6, #0]
 8011402:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011404:	4305      	orrs	r5, r0
 8011406:	4643      	mov	r3, r8
 8011408:	0418      	lsls	r0, r3, #16
 801140a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801140c:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801140e:	433d      	orrs	r5, r7
 8011410:	e025      	b.n	801145e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	22ff      	movs	r2, #255	; 0xff
 8011416:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011418:	2304      	movs	r3, #4
 801141a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801141c:	2300      	movs	r3, #0
 801141e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011420:	2601      	movs	r6, #1
}
 8011422:	0030      	movs	r0, r6
 8011424:	bc04      	pop	{r2}
 8011426:	4690      	mov	r8, r2
 8011428:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801142a:	0020      	movs	r0, r4
 801142c:	f7ff feab 	bl	8011186 <HAL_RTC_WaitForSynchro>
 8011430:	2800      	cmp	r0, #0
 8011432:	d02c      	beq.n	801148e <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011434:	6823      	ldr	r3, [r4, #0]
 8011436:	22ff      	movs	r2, #255	; 0xff
 8011438:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801143a:	2304      	movs	r3, #4
 801143c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801143e:	2300      	movs	r3, #0
 8011440:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011442:	2601      	movs	r6, #1
 8011444:	e7ed      	b.n	8011422 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011446:	2602      	movs	r6, #2
 8011448:	e7eb      	b.n	8011422 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801144a:	78cd      	ldrb	r5, [r1, #3]
 801144c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801144e:	7848      	ldrb	r0, [r1, #1]
 8011450:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011452:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011454:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011456:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011458:	7808      	ldrb	r0, [r1, #0]
 801145a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801145c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801145e:	6823      	ldr	r3, [r4, #0]
 8011460:	22ca      	movs	r2, #202	; 0xca
 8011462:	625a      	str	r2, [r3, #36]	; 0x24
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	3a77      	subs	r2, #119	; 0x77
 8011468:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801146a:	0020      	movs	r0, r4
 801146c:	f7ff fea5 	bl	80111ba <RTC_EnterInitMode>
 8011470:	1e06      	subs	r6, r0, #0
 8011472:	d1ce      	bne.n	8011412 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	480a      	ldr	r0, [pc, #40]	; (80114a0 <HAL_RTC_SetDate+0xe0>)
 8011478:	4005      	ands	r5, r0
 801147a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801147c:	6822      	ldr	r2, [r4, #0]
 801147e:	68d3      	ldr	r3, [r2, #12]
 8011480:	2180      	movs	r1, #128	; 0x80
 8011482:	438b      	bics	r3, r1
 8011484:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	069b      	lsls	r3, r3, #26
 801148c:	d5cd      	bpl.n	801142a <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	22ff      	movs	r2, #255	; 0xff
 8011492:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011494:	2301      	movs	r3, #1
 8011496:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011498:	2300      	movs	r3, #0
 801149a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 801149c:	e7c1      	b.n	8011422 <HAL_RTC_SetDate+0x62>
 801149e:	46c0      	nop			; (mov r8, r8)
 80114a0:	00ffff3f 	.word	0x00ffff3f

080114a4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80114a4:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80114a6:	0900      	lsrs	r0, r0, #4
 80114a8:	0083      	lsls	r3, r0, #2
 80114aa:	181b      	adds	r3, r3, r0
 80114ac:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80114ae:	200f      	movs	r0, #15
 80114b0:	4010      	ands	r0, r2
 80114b2:	1818      	adds	r0, r3, r0
 80114b4:	b2c0      	uxtb	r0, r0
}
 80114b6:	4770      	bx	lr

080114b8 <HAL_RTC_GetTime>:
{
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80114bc:	6803      	ldr	r3, [r0, #0]
 80114be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c0:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	490e      	ldr	r1, [pc, #56]	; (8011500 <HAL_RTC_GetTime+0x48>)
 80114c8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80114ca:	0c19      	lsrs	r1, r3, #16
 80114cc:	203f      	movs	r0, #63	; 0x3f
 80114ce:	4008      	ands	r0, r1
 80114d0:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80114d2:	0a1e      	lsrs	r6, r3, #8
 80114d4:	b2f6      	uxtb	r6, r6
 80114d6:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80114d8:	b2dc      	uxtb	r4, r3
 80114da:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80114dc:	2340      	movs	r3, #64	; 0x40
 80114de:	400b      	ands	r3, r1
 80114e0:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 80114e2:	2a00      	cmp	r2, #0
 80114e4:	d10a      	bne.n	80114fc <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80114e6:	f7ff ffdd 	bl	80114a4 <RTC_Bcd2ToByte>
 80114ea:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80114ec:	0030      	movs	r0, r6
 80114ee:	f7ff ffd9 	bl	80114a4 <RTC_Bcd2ToByte>
 80114f2:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80114f4:	0020      	movs	r0, r4
 80114f6:	f7ff ffd5 	bl	80114a4 <RTC_Bcd2ToByte>
 80114fa:	70a8      	strb	r0, [r5, #2]
}
 80114fc:	2000      	movs	r0, #0
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	007f7f7f 	.word	0x007f7f7f

08011504 <HAL_RTC_GetDate>:
{
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011508:	6803      	ldr	r3, [r0, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	490d      	ldr	r1, [pc, #52]	; (8011544 <HAL_RTC_GetDate+0x40>)
 801150e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011510:	0c18      	lsrs	r0, r3, #16
 8011512:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011514:	04dd      	lsls	r5, r3, #19
 8011516:	0eed      	lsrs	r5, r5, #27
 8011518:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801151a:	b2de      	uxtb	r6, r3
 801151c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801151e:	041b      	lsls	r3, r3, #16
 8011520:	0f5b      	lsrs	r3, r3, #29
 8011522:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011524:	2a00      	cmp	r2, #0
 8011526:	d10a      	bne.n	801153e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011528:	f7ff ffbc 	bl	80114a4 <RTC_Bcd2ToByte>
 801152c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801152e:	0028      	movs	r0, r5
 8011530:	f7ff ffb8 	bl	80114a4 <RTC_Bcd2ToByte>
 8011534:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011536:	0030      	movs	r0, r6
 8011538:	f7ff ffb4 	bl	80114a4 <RTC_Bcd2ToByte>
 801153c:	70a0      	strb	r0, [r4, #2]
}
 801153e:	2000      	movs	r0, #0
 8011540:	bd70      	pop	{r4, r5, r6, pc}
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	00ffff3f 	.word	0x00ffff3f

08011548 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011548:	6803      	ldr	r3, [r0, #0]
 801154a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801154c:	0089      	lsls	r1, r1, #2
 801154e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011550:	600a      	str	r2, [r1, #0]
}
 8011552:	4770      	bx	lr

08011554 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011554:	6803      	ldr	r3, [r0, #0]
 8011556:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011558:	0089      	lsls	r1, r1, #2
 801155a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801155c:	6808      	ldr	r0, [r1, #0]
}
 801155e:	4770      	bx	lr

08011560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011560:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011562:	6a03      	ldr	r3, [r0, #32]
 8011564:	2201      	movs	r2, #1
 8011566:	4393      	bics	r3, r2
 8011568:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801156a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801156c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801156e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011570:	2573      	movs	r5, #115	; 0x73
 8011572:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011574:	680d      	ldr	r5, [r1, #0]
 8011576:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011578:	2502      	movs	r5, #2
 801157a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801157c:	688d      	ldr	r5, [r1, #8]
 801157e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011580:	4d19      	ldr	r5, [pc, #100]	; (80115e8 <TIM_OC1_SetConfig+0x88>)
 8011582:	42a8      	cmp	r0, r5
 8011584:	d00f      	beq.n	80115a6 <TIM_OC1_SetConfig+0x46>
 8011586:	4d19      	ldr	r5, [pc, #100]	; (80115ec <TIM_OC1_SetConfig+0x8c>)
 8011588:	42a8      	cmp	r0, r5
 801158a:	d01e      	beq.n	80115ca <TIM_OC1_SetConfig+0x6a>
 801158c:	4d18      	ldr	r5, [pc, #96]	; (80115f0 <TIM_OC1_SetConfig+0x90>)
 801158e:	42a8      	cmp	r0, r5
 8011590:	d022      	beq.n	80115d8 <TIM_OC1_SetConfig+0x78>
 8011592:	4d18      	ldr	r5, [pc, #96]	; (80115f4 <TIM_OC1_SetConfig+0x94>)
 8011594:	42a8      	cmp	r0, r5
 8011596:	d112      	bne.n	80115be <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011598:	2508      	movs	r5, #8
 801159a:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801159c:	68cd      	ldr	r5, [r1, #12]
 801159e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80115a0:	2504      	movs	r5, #4
 80115a2:	43ab      	bics	r3, r5
 80115a4:	e005      	b.n	80115b2 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 80115a6:	2508      	movs	r5, #8
 80115a8:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80115aa:	68cd      	ldr	r5, [r1, #12]
 80115ac:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80115ae:	2504      	movs	r5, #4
 80115b0:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80115b2:	4d11      	ldr	r5, [pc, #68]	; (80115f8 <TIM_OC1_SetConfig+0x98>)
 80115b4:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80115b6:	694d      	ldr	r5, [r1, #20]
 80115b8:	698e      	ldr	r6, [r1, #24]
 80115ba:	4335      	orrs	r5, r6
 80115bc:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115be:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115c0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80115c2:	684a      	ldr	r2, [r1, #4]
 80115c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c6:	6203      	str	r3, [r0, #32]
}
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 80115ca:	2508      	movs	r5, #8
 80115cc:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80115ce:	68cd      	ldr	r5, [r1, #12]
 80115d0:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80115d2:	2504      	movs	r5, #4
 80115d4:	43ab      	bics	r3, r5
 80115d6:	e7ec      	b.n	80115b2 <TIM_OC1_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC1NP;
 80115d8:	2508      	movs	r5, #8
 80115da:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80115dc:	68cd      	ldr	r5, [r1, #12]
 80115de:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80115e0:	2504      	movs	r5, #4
 80115e2:	43ab      	bics	r3, r5
 80115e4:	e7e5      	b.n	80115b2 <TIM_OC1_SetConfig+0x52>
 80115e6:	46c0      	nop			; (mov r8, r8)
 80115e8:	40012c00 	.word	0x40012c00
 80115ec:	40014000 	.word	0x40014000
 80115f0:	40014400 	.word	0x40014400
 80115f4:	40014800 	.word	0x40014800
 80115f8:	fffffcff 	.word	0xfffffcff

080115fc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80115fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80115fe:	6a03      	ldr	r3, [r0, #32]
 8011600:	4a17      	ldr	r2, [pc, #92]	; (8011660 <TIM_OC3_SetConfig+0x64>)
 8011602:	4013      	ands	r3, r2
 8011604:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011606:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011608:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801160a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801160c:	2473      	movs	r4, #115	; 0x73
 801160e:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011610:	680c      	ldr	r4, [r1, #0]
 8011612:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011614:	4c13      	ldr	r4, [pc, #76]	; (8011664 <TIM_OC3_SetConfig+0x68>)
 8011616:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8011618:	688c      	ldr	r4, [r1, #8]
 801161a:	0224      	lsls	r4, r4, #8
 801161c:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801161e:	4c12      	ldr	r4, [pc, #72]	; (8011668 <TIM_OC3_SetConfig+0x6c>)
 8011620:	42a0      	cmp	r0, r4
 8011622:	d009      	beq.n	8011638 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011624:	4c11      	ldr	r4, [pc, #68]	; (801166c <TIM_OC3_SetConfig+0x70>)
 8011626:	42a0      	cmp	r0, r4
 8011628:	d00d      	beq.n	8011646 <TIM_OC3_SetConfig+0x4a>
 801162a:	4c11      	ldr	r4, [pc, #68]	; (8011670 <TIM_OC3_SetConfig+0x74>)
 801162c:	42a0      	cmp	r0, r4
 801162e:	d00a      	beq.n	8011646 <TIM_OC3_SetConfig+0x4a>
 8011630:	4c10      	ldr	r4, [pc, #64]	; (8011674 <TIM_OC3_SetConfig+0x78>)
 8011632:	42a0      	cmp	r0, r4
 8011634:	d10e      	bne.n	8011654 <TIM_OC3_SetConfig+0x58>
 8011636:	e006      	b.n	8011646 <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8011638:	4c0f      	ldr	r4, [pc, #60]	; (8011678 <TIM_OC3_SetConfig+0x7c>)
 801163a:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8);
 801163c:	68cb      	ldr	r3, [r1, #12]
 801163e:	021b      	lsls	r3, r3, #8
 8011640:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8011642:	4c0e      	ldr	r4, [pc, #56]	; (801167c <TIM_OC3_SetConfig+0x80>)
 8011644:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011646:	4c0e      	ldr	r4, [pc, #56]	; (8011680 <TIM_OC3_SetConfig+0x84>)
 8011648:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 801164a:	698a      	ldr	r2, [r1, #24]
 801164c:	694e      	ldr	r6, [r1, #20]
 801164e:	4332      	orrs	r2, r6
 8011650:	0112      	lsls	r2, r2, #4
 8011652:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011654:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011656:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011658:	684a      	ldr	r2, [r1, #4]
 801165a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801165c:	6203      	str	r3, [r0, #32]
}
 801165e:	bd70      	pop	{r4, r5, r6, pc}
 8011660:	fffffeff 	.word	0xfffffeff
 8011664:	fffffdff 	.word	0xfffffdff
 8011668:	40012c00 	.word	0x40012c00
 801166c:	40014000 	.word	0x40014000
 8011670:	40014400 	.word	0x40014400
 8011674:	40014800 	.word	0x40014800
 8011678:	fffff7ff 	.word	0xfffff7ff
 801167c:	fffffbff 	.word	0xfffffbff
 8011680:	ffffcfff 	.word	0xffffcfff

08011684 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011684:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011686:	6a03      	ldr	r3, [r0, #32]
 8011688:	4a13      	ldr	r2, [pc, #76]	; (80116d8 <TIM_OC4_SetConfig+0x54>)
 801168a:	4013      	ands	r3, r2
 801168c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801168e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011690:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011692:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011694:	4d11      	ldr	r5, [pc, #68]	; (80116dc <TIM_OC4_SetConfig+0x58>)
 8011696:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011698:	680d      	ldr	r5, [r1, #0]
 801169a:	022d      	lsls	r5, r5, #8
 801169c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801169e:	4d10      	ldr	r5, [pc, #64]	; (80116e0 <TIM_OC4_SetConfig+0x5c>)
 80116a0:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80116a2:	688a      	ldr	r2, [r1, #8]
 80116a4:	0312      	lsls	r2, r2, #12
 80116a6:	432a      	orrs	r2, r5

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80116a8:	4d0e      	ldr	r5, [pc, #56]	; (80116e4 <TIM_OC4_SetConfig+0x60>)
 80116aa:	42a8      	cmp	r0, r5
 80116ac:	d008      	beq.n	80116c0 <TIM_OC4_SetConfig+0x3c>
 80116ae:	4d0e      	ldr	r5, [pc, #56]	; (80116e8 <TIM_OC4_SetConfig+0x64>)
 80116b0:	42a8      	cmp	r0, r5
 80116b2:	d005      	beq.n	80116c0 <TIM_OC4_SetConfig+0x3c>
 80116b4:	4d0d      	ldr	r5, [pc, #52]	; (80116ec <TIM_OC4_SetConfig+0x68>)
 80116b6:	42a8      	cmp	r0, r5
 80116b8:	d002      	beq.n	80116c0 <TIM_OC4_SetConfig+0x3c>
 80116ba:	4d0d      	ldr	r5, [pc, #52]	; (80116f0 <TIM_OC4_SetConfig+0x6c>)
 80116bc:	42a8      	cmp	r0, r5
 80116be:	d104      	bne.n	80116ca <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80116c0:	4d0c      	ldr	r5, [pc, #48]	; (80116f4 <TIM_OC4_SetConfig+0x70>)
 80116c2:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80116c4:	694d      	ldr	r5, [r1, #20]
 80116c6:	01ad      	lsls	r5, r5, #6
 80116c8:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ca:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116cc:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116ce:	684b      	ldr	r3, [r1, #4]
 80116d0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d2:	6202      	str	r2, [r0, #32]
}
 80116d4:	bd30      	pop	{r4, r5, pc}
 80116d6:	46c0      	nop			; (mov r8, r8)
 80116d8:	ffffefff 	.word	0xffffefff
 80116dc:	ffff8cff 	.word	0xffff8cff
 80116e0:	ffffdfff 	.word	0xffffdfff
 80116e4:	40012c00 	.word	0x40012c00
 80116e8:	40014000 	.word	0x40014000
 80116ec:	40014400 	.word	0x40014400
 80116f0:	40014800 	.word	0x40014800
 80116f4:	ffffbfff 	.word	0xffffbfff

080116f8 <HAL_TIM_Base_MspInit>:
}
 80116f8:	4770      	bx	lr

080116fa <HAL_TIM_Base_MspDeInit>:
}
 80116fa:	4770      	bx	lr

080116fc <HAL_TIM_Base_DeInit>:
{
 80116fc:	b510      	push	{r4, lr}
 80116fe:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8011700:	2339      	movs	r3, #57	; 0x39
 8011702:	2202      	movs	r2, #2
 8011704:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8011706:	6803      	ldr	r3, [r0, #0]
 8011708:	6a19      	ldr	r1, [r3, #32]
 801170a:	4a0a      	ldr	r2, [pc, #40]	; (8011734 <HAL_TIM_Base_DeInit+0x38>)
 801170c:	4211      	tst	r1, r2
 801170e:	d107      	bne.n	8011720 <HAL_TIM_Base_DeInit+0x24>
 8011710:	6a19      	ldr	r1, [r3, #32]
 8011712:	4a09      	ldr	r2, [pc, #36]	; (8011738 <HAL_TIM_Base_DeInit+0x3c>)
 8011714:	4211      	tst	r1, r2
 8011716:	d103      	bne.n	8011720 <HAL_TIM_Base_DeInit+0x24>
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	2101      	movs	r1, #1
 801171c:	438a      	bics	r2, r1
 801171e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8011720:	0020      	movs	r0, r4
 8011722:	f7ff ffea 	bl	80116fa <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8011726:	2300      	movs	r3, #0
 8011728:	2239      	movs	r2, #57	; 0x39
 801172a:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 801172c:	3a01      	subs	r2, #1
 801172e:	54a3      	strb	r3, [r4, r2]
}
 8011730:	2000      	movs	r0, #0
 8011732:	bd10      	pop	{r4, pc}
 8011734:	00001111 	.word	0x00001111
 8011738:	00000444 	.word	0x00000444

0801173c <HAL_TIM_Base_Start>:
{
 801173c:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 801173e:	2239      	movs	r2, #57	; 0x39
 8011740:	2302      	movs	r3, #2
 8011742:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011744:	6804      	ldr	r4, [r0, #0]
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	2101      	movs	r1, #1
 801174a:	430b      	orrs	r3, r1
 801174c:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 801174e:	5481      	strb	r1, [r0, r2]
}
 8011750:	2000      	movs	r0, #0
 8011752:	bd10      	pop	{r4, pc}

08011754 <HAL_TIM_PWM_MspInit>:
}
 8011754:	4770      	bx	lr

08011756 <HAL_TIM_PWM_MspDeInit>:
}
 8011756:	4770      	bx	lr

08011758 <HAL_TIM_PWM_DeInit>:
{
 8011758:	b510      	push	{r4, lr}
 801175a:	0004      	movs	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801175c:	2339      	movs	r3, #57	; 0x39
 801175e:	2202      	movs	r2, #2
 8011760:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8011762:	6803      	ldr	r3, [r0, #0]
 8011764:	6a19      	ldr	r1, [r3, #32]
 8011766:	4a0a      	ldr	r2, [pc, #40]	; (8011790 <HAL_TIM_PWM_DeInit+0x38>)
 8011768:	4211      	tst	r1, r2
 801176a:	d107      	bne.n	801177c <HAL_TIM_PWM_DeInit+0x24>
 801176c:	6a19      	ldr	r1, [r3, #32]
 801176e:	4a09      	ldr	r2, [pc, #36]	; (8011794 <HAL_TIM_PWM_DeInit+0x3c>)
 8011770:	4211      	tst	r1, r2
 8011772:	d103      	bne.n	801177c <HAL_TIM_PWM_DeInit+0x24>
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	2101      	movs	r1, #1
 8011778:	438a      	bics	r2, r1
 801177a:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 801177c:	0020      	movs	r0, r4
 801177e:	f7ff ffea 	bl	8011756 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8011782:	2300      	movs	r3, #0
 8011784:	2239      	movs	r2, #57	; 0x39
 8011786:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8011788:	3a01      	subs	r2, #1
 801178a:	54a3      	strb	r3, [r4, r2]
}
 801178c:	2000      	movs	r0, #0
 801178e:	bd10      	pop	{r4, pc}
 8011790:	00001111 	.word	0x00001111
 8011794:	00000444 	.word	0x00000444

08011798 <HAL_TIM_ConfigClockSource>:
{
 8011798:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 801179a:	2338      	movs	r3, #56	; 0x38
 801179c:	5cc3      	ldrb	r3, [r0, r3]
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d100      	bne.n	80117a4 <HAL_TIM_ConfigClockSource+0xc>
 80117a2:	e0cb      	b.n	801193c <HAL_TIM_ConfigClockSource+0x1a4>
 80117a4:	2338      	movs	r3, #56	; 0x38
 80117a6:	2201      	movs	r2, #1
 80117a8:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80117aa:	3301      	adds	r3, #1
 80117ac:	3201      	adds	r2, #1
 80117ae:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80117b0:	6802      	ldr	r2, [r0, #0]
 80117b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117b4:	4c62      	ldr	r4, [pc, #392]	; (8011940 <HAL_TIM_ConfigClockSource+0x1a8>)
 80117b6:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80117b8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80117ba:	680b      	ldr	r3, [r1, #0]
 80117bc:	2b40      	cmp	r3, #64	; 0x40
 80117be:	d100      	bne.n	80117c2 <HAL_TIM_ConfigClockSource+0x2a>
 80117c0:	e092      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x150>
 80117c2:	d922      	bls.n	801180a <HAL_TIM_ConfigClockSource+0x72>
 80117c4:	2b70      	cmp	r3, #112	; 0x70
 80117c6:	d063      	beq.n	8011890 <HAL_TIM_ConfigClockSource+0xf8>
 80117c8:	d83a      	bhi.n	8011840 <HAL_TIM_ConfigClockSource+0xa8>
 80117ca:	2b50      	cmp	r3, #80	; 0x50
 80117cc:	d100      	bne.n	80117d0 <HAL_TIM_ConfigClockSource+0x38>
 80117ce:	e071      	b.n	80118b4 <HAL_TIM_ConfigClockSource+0x11c>
 80117d0:	2b60      	cmp	r3, #96	; 0x60
 80117d2:	d155      	bne.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80117d4:	6803      	ldr	r3, [r0, #0]
 80117d6:	684a      	ldr	r2, [r1, #4]
 80117d8:	68c9      	ldr	r1, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80117da:	6a1c      	ldr	r4, [r3, #32]
 80117dc:	2510      	movs	r5, #16
 80117de:	43ac      	bics	r4, r5
 80117e0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80117e2:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 80117e4:	6a1c      	ldr	r4, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80117e6:	4e57      	ldr	r6, [pc, #348]	; (8011944 <HAL_TIM_ConfigClockSource+0x1ac>)
 80117e8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12);
 80117ea:	0309      	lsls	r1, r1, #12
 80117ec:	4329      	orrs	r1, r5

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80117ee:	25a0      	movs	r5, #160	; 0xa0
 80117f0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4);
 80117f2:	0112      	lsls	r2, r2, #4
 80117f4:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80117f6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80117f8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80117fa:	6802      	ldr	r2, [r0, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80117fc:	6893      	ldr	r3, [r2, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80117fe:	2170      	movs	r1, #112	; 0x70
 8011800:	438b      	bics	r3, r1
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011802:	3909      	subs	r1, #9
 8011804:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011806:	6093      	str	r3, [r2, #8]
 8011808:	e03a      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 801180a:	2b10      	cmp	r3, #16
 801180c:	d100      	bne.n	8011810 <HAL_TIM_ConfigClockSource+0x78>
 801180e:	e085      	b.n	801191c <HAL_TIM_ConfigClockSource+0x184>
 8011810:	d90c      	bls.n	801182c <HAL_TIM_ConfigClockSource+0x94>
 8011812:	2b20      	cmp	r3, #32
 8011814:	d100      	bne.n	8011818 <HAL_TIM_ConfigClockSource+0x80>
 8011816:	e089      	b.n	801192c <HAL_TIM_ConfigClockSource+0x194>
 8011818:	2b30      	cmp	r3, #48	; 0x30
 801181a:	d131      	bne.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 801181c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801181e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011820:	2170      	movs	r1, #112	; 0x70
 8011822:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011824:	3939      	subs	r1, #57	; 0x39
 8011826:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011828:	6093      	str	r3, [r2, #8]
 801182a:	e029      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 801182c:	2b00      	cmp	r3, #0
 801182e:	d127      	bne.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011830:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 8011832:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011834:	2170      	movs	r1, #112	; 0x70
 8011836:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011838:	3969      	subs	r1, #105	; 0x69
 801183a:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 801183c:	6093      	str	r3, [r2, #8]
 801183e:	e01f      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8011840:	2280      	movs	r2, #128	; 0x80
 8011842:	0152      	lsls	r2, r2, #5
 8011844:	4293      	cmp	r3, r2
 8011846:	d016      	beq.n	8011876 <HAL_TIM_ConfigClockSource+0xde>
 8011848:	2280      	movs	r2, #128	; 0x80
 801184a:	0192      	lsls	r2, r2, #6
 801184c:	4293      	cmp	r3, r2
 801184e:	d117      	bne.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ETR_SetConfig(htim->Instance,
 8011850:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8011852:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011854:	4a3c      	ldr	r2, [pc, #240]	; (8011948 <HAL_TIM_ConfigClockSource+0x1b0>)
 8011856:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011858:	688b      	ldr	r3, [r1, #8]
 801185a:	684d      	ldr	r5, [r1, #4]
 801185c:	432b      	orrs	r3, r5
 801185e:	68c9      	ldr	r1, [r1, #12]
 8011860:	0209      	lsls	r1, r1, #8
 8011862:	430b      	orrs	r3, r1
 8011864:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011866:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011868:	6802      	ldr	r2, [r0, #0]
 801186a:	6891      	ldr	r1, [r2, #8]
 801186c:	2380      	movs	r3, #128	; 0x80
 801186e:	01db      	lsls	r3, r3, #7
 8011870:	430b      	orrs	r3, r1
 8011872:	6093      	str	r3, [r2, #8]
    break;
 8011874:	e004      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8011876:	6802      	ldr	r2, [r0, #0]
 8011878:	6893      	ldr	r3, [r2, #8]
 801187a:	2107      	movs	r1, #7
 801187c:	438b      	bics	r3, r1
 801187e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8011880:	2339      	movs	r3, #57	; 0x39
 8011882:	2201      	movs	r2, #1
 8011884:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8011886:	3b01      	subs	r3, #1
 8011888:	2200      	movs	r2, #0
 801188a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 801188c:	2000      	movs	r0, #0
}
 801188e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8011890:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8011892:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011894:	4a2c      	ldr	r2, [pc, #176]	; (8011948 <HAL_TIM_ConfigClockSource+0x1b0>)
 8011896:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011898:	688b      	ldr	r3, [r1, #8]
 801189a:	684d      	ldr	r5, [r1, #4]
 801189c:	432b      	orrs	r3, r5
 801189e:	68c9      	ldr	r1, [r1, #12]
 80118a0:	0209      	lsls	r1, r1, #8
 80118a2:	430b      	orrs	r3, r1
 80118a4:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80118a6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80118a8:	6802      	ldr	r2, [r0, #0]
 80118aa:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80118ac:	2177      	movs	r1, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80118ae:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80118b0:	6093      	str	r3, [r2, #8]
    break;
 80118b2:	e7e5      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80118b4:	6803      	ldr	r3, [r0, #0]
 80118b6:	684c      	ldr	r4, [r1, #4]
 80118b8:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80118ba:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118bc:	6a1d      	ldr	r5, [r3, #32]
 80118be:	2601      	movs	r6, #1
 80118c0:	43b5      	bics	r5, r6
 80118c2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118c4:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118c6:	36ef      	adds	r6, #239	; 0xef
 80118c8:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 80118ca:	0112      	lsls	r2, r2, #4
 80118cc:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80118ce:	250a      	movs	r5, #10
 80118d0:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80118d2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80118d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80118d6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80118d8:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 80118da:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80118dc:	2170      	movs	r1, #112	; 0x70
 80118de:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80118e0:	3919      	subs	r1, #25
 80118e2:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 80118e4:	6093      	str	r3, [r2, #8]
 80118e6:	e7cb      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80118e8:	6803      	ldr	r3, [r0, #0]
 80118ea:	684c      	ldr	r4, [r1, #4]
 80118ec:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80118ee:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118f0:	6a1d      	ldr	r5, [r3, #32]
 80118f2:	2601      	movs	r6, #1
 80118f4:	43b5      	bics	r5, r6
 80118f6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118f8:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118fa:	36ef      	adds	r6, #239	; 0xef
 80118fc:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4);
 80118fe:	0112      	lsls	r2, r2, #4
 8011900:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011902:	250a      	movs	r5, #10
 8011904:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8011906:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8011908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801190a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801190c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801190e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011910:	2170      	movs	r1, #112	; 0x70
 8011912:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011914:	3929      	subs	r1, #41	; 0x29
 8011916:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011918:	6093      	str	r3, [r2, #8]
 801191a:	e7b1      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 801191c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801191e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011920:	2170      	movs	r1, #112	; 0x70
 8011922:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011924:	3959      	subs	r1, #89	; 0x59
 8011926:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011928:	6093      	str	r3, [r2, #8]
 801192a:	e7a9      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 801192c:	6802      	ldr	r2, [r0, #0]
   tmpsmcr = TIMx->SMCR;
 801192e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011930:	2170      	movs	r1, #112	; 0x70
 8011932:	438b      	bics	r3, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8011934:	3949      	subs	r1, #73	; 0x49
 8011936:	430b      	orrs	r3, r1
   TIMx->SMCR = tmpsmcr;
 8011938:	6093      	str	r3, [r2, #8]
 801193a:	e7a1      	b.n	8011880 <HAL_TIM_ConfigClockSource+0xe8>
  __HAL_LOCK(htim);
 801193c:	2002      	movs	r0, #2
 801193e:	e7a6      	b.n	801188e <HAL_TIM_ConfigClockSource+0xf6>
 8011940:	ffff0088 	.word	0xffff0088
 8011944:	ffff0fff 	.word	0xffff0fff
 8011948:	ffff00ff 	.word	0xffff00ff

0801194c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 801194c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801194e:	4a36      	ldr	r2, [pc, #216]	; (8011a28 <TIM_Base_SetConfig+0xdc>)
 8011950:	4290      	cmp	r0, r2
 8011952:	d022      	beq.n	801199a <TIM_Base_SetConfig+0x4e>
 8011954:	2280      	movs	r2, #128	; 0x80
 8011956:	05d2      	lsls	r2, r2, #23
 8011958:	4290      	cmp	r0, r2
 801195a:	d014      	beq.n	8011986 <TIM_Base_SetConfig+0x3a>
 801195c:	4a33      	ldr	r2, [pc, #204]	; (8011a2c <TIM_Base_SetConfig+0xe0>)
 801195e:	4290      	cmp	r0, r2
 8011960:	d016      	beq.n	8011990 <TIM_Base_SetConfig+0x44>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011962:	4a33      	ldr	r2, [pc, #204]	; (8011a30 <TIM_Base_SetConfig+0xe4>)
 8011964:	4290      	cmp	r0, r2
 8011966:	d040      	beq.n	80119ea <TIM_Base_SetConfig+0x9e>
 8011968:	4a32      	ldr	r2, [pc, #200]	; (8011a34 <TIM_Base_SetConfig+0xe8>)
 801196a:	4290      	cmp	r0, r2
 801196c:	d047      	beq.n	80119fe <TIM_Base_SetConfig+0xb2>
 801196e:	4a32      	ldr	r2, [pc, #200]	; (8011a38 <TIM_Base_SetConfig+0xec>)
 8011970:	4290      	cmp	r0, r2
 8011972:	d04e      	beq.n	8011a12 <TIM_Base_SetConfig+0xc6>
 8011974:	4a31      	ldr	r2, [pc, #196]	; (8011a3c <TIM_Base_SetConfig+0xf0>)
 8011976:	4290      	cmp	r0, r2
 8011978:	d02d      	beq.n	80119d6 <TIM_Base_SetConfig+0x8a>
  TIMx->CR1 = tmpcr1;
 801197a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801197c:	688b      	ldr	r3, [r1, #8]
 801197e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011980:	680b      	ldr	r3, [r1, #0]
 8011982:	6283      	str	r3, [r0, #40]	; 0x28
 8011984:	e024      	b.n	80119d0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011986:	2270      	movs	r2, #112	; 0x70
 8011988:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801198a:	684a      	ldr	r2, [r1, #4]
 801198c:	4313      	orrs	r3, r2
 801198e:	e008      	b.n	80119a2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011990:	2270      	movs	r2, #112	; 0x70
 8011992:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011994:	684a      	ldr	r2, [r1, #4]
 8011996:	4313      	orrs	r3, r2
 8011998:	e003      	b.n	80119a2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801199a:	2270      	movs	r2, #112	; 0x70
 801199c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801199e:	684a      	ldr	r2, [r1, #4]
 80119a0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80119a2:	4a27      	ldr	r2, [pc, #156]	; (8011a40 <TIM_Base_SetConfig+0xf4>)
 80119a4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80119a6:	68ca      	ldr	r2, [r1, #12]
 80119a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80119aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80119ac:	688b      	ldr	r3, [r1, #8]
 80119ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80119b0:	680b      	ldr	r3, [r1, #0]
 80119b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80119b4:	4b1c      	ldr	r3, [pc, #112]	; (8011a28 <TIM_Base_SetConfig+0xdc>)
 80119b6:	4298      	cmp	r0, r3
 80119b8:	d008      	beq.n	80119cc <TIM_Base_SetConfig+0x80>
 80119ba:	4b1e      	ldr	r3, [pc, #120]	; (8011a34 <TIM_Base_SetConfig+0xe8>)
 80119bc:	4298      	cmp	r0, r3
 80119be:	d005      	beq.n	80119cc <TIM_Base_SetConfig+0x80>
 80119c0:	4b1d      	ldr	r3, [pc, #116]	; (8011a38 <TIM_Base_SetConfig+0xec>)
 80119c2:	4298      	cmp	r0, r3
 80119c4:	d002      	beq.n	80119cc <TIM_Base_SetConfig+0x80>
 80119c6:	4b1d      	ldr	r3, [pc, #116]	; (8011a3c <TIM_Base_SetConfig+0xf0>)
 80119c8:	4298      	cmp	r0, r3
 80119ca:	d101      	bne.n	80119d0 <TIM_Base_SetConfig+0x84>
    TIMx->RCR = Structure->RepetitionCounter;
 80119cc:	690b      	ldr	r3, [r1, #16]
 80119ce:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80119d0:	2301      	movs	r3, #1
 80119d2:	6143      	str	r3, [r0, #20]
}
 80119d4:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80119d6:	4a1a      	ldr	r2, [pc, #104]	; (8011a40 <TIM_Base_SetConfig+0xf4>)
 80119d8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80119da:	68ca      	ldr	r2, [r1, #12]
 80119dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80119de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80119e0:	688b      	ldr	r3, [r1, #8]
 80119e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80119e4:	680b      	ldr	r3, [r1, #0]
 80119e6:	6283      	str	r3, [r0, #40]	; 0x28
 80119e8:	e7f0      	b.n	80119cc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80119ea:	4a15      	ldr	r2, [pc, #84]	; (8011a40 <TIM_Base_SetConfig+0xf4>)
 80119ec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80119ee:	68ca      	ldr	r2, [r1, #12]
 80119f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80119f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80119f4:	688b      	ldr	r3, [r1, #8]
 80119f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80119f8:	680b      	ldr	r3, [r1, #0]
 80119fa:	6283      	str	r3, [r0, #40]	; 0x28
 80119fc:	e7e8      	b.n	80119d0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 80119fe:	4a10      	ldr	r2, [pc, #64]	; (8011a40 <TIM_Base_SetConfig+0xf4>)
 8011a00:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a02:	68ca      	ldr	r2, [r1, #12]
 8011a04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a08:	688b      	ldr	r3, [r1, #8]
 8011a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a0c:	680b      	ldr	r3, [r1, #0]
 8011a0e:	6283      	str	r3, [r0, #40]	; 0x28
 8011a10:	e7dc      	b.n	80119cc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a12:	4a0b      	ldr	r2, [pc, #44]	; (8011a40 <TIM_Base_SetConfig+0xf4>)
 8011a14:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a16:	68ca      	ldr	r2, [r1, #12]
 8011a18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011a1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011a1c:	688b      	ldr	r3, [r1, #8]
 8011a1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011a20:	680b      	ldr	r3, [r1, #0]
 8011a22:	6283      	str	r3, [r0, #40]	; 0x28
 8011a24:	e7d2      	b.n	80119cc <TIM_Base_SetConfig+0x80>
 8011a26:	46c0      	nop			; (mov r8, r8)
 8011a28:	40012c00 	.word	0x40012c00
 8011a2c:	40000400 	.word	0x40000400
 8011a30:	40002000 	.word	0x40002000
 8011a34:	40014000 	.word	0x40014000
 8011a38:	40014400 	.word	0x40014400
 8011a3c:	40014800 	.word	0x40014800
 8011a40:	fffffcff 	.word	0xfffffcff

08011a44 <HAL_TIM_Base_Init>:
{
 8011a44:	b570      	push	{r4, r5, r6, lr}
 8011a46:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011a48:	d014      	beq.n	8011a74 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011a4a:	2339      	movs	r3, #57	; 0x39
 8011a4c:	5cc3      	ldrb	r3, [r0, r3]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00a      	beq.n	8011a68 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011a52:	2539      	movs	r5, #57	; 0x39
 8011a54:	2302      	movs	r3, #2
 8011a56:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a58:	1d21      	adds	r1, r4, #4
 8011a5a:	6820      	ldr	r0, [r4, #0]
 8011a5c:	f7ff ff76 	bl	801194c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011a60:	2301      	movs	r3, #1
 8011a62:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011a64:	2000      	movs	r0, #0
}
 8011a66:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011a68:	3338      	adds	r3, #56	; 0x38
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8011a6e:	f7ff fe43 	bl	80116f8 <HAL_TIM_Base_MspInit>
 8011a72:	e7ee      	b.n	8011a52 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8011a74:	2001      	movs	r0, #1
 8011a76:	e7f6      	b.n	8011a66 <HAL_TIM_Base_Init+0x22>

08011a78 <HAL_TIM_PWM_Init>:
{
 8011a78:	b570      	push	{r4, r5, r6, lr}
 8011a7a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011a7c:	d014      	beq.n	8011aa8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011a7e:	2339      	movs	r3, #57	; 0x39
 8011a80:	5cc3      	ldrb	r3, [r0, r3]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00a      	beq.n	8011a9c <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011a86:	2539      	movs	r5, #57	; 0x39
 8011a88:	2302      	movs	r3, #2
 8011a8a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a8c:	1d21      	adds	r1, r4, #4
 8011a8e:	6820      	ldr	r0, [r4, #0]
 8011a90:	f7ff ff5c 	bl	801194c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011a94:	2301      	movs	r3, #1
 8011a96:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011a98:	2000      	movs	r0, #0
}
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011a9c:	3338      	adds	r3, #56	; 0x38
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8011aa2:	f7ff fe57 	bl	8011754 <HAL_TIM_PWM_MspInit>
 8011aa6:	e7ee      	b.n	8011a86 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	e7f6      	b.n	8011a9a <HAL_TIM_PWM_Init+0x22>

08011aac <TIM_OC2_SetConfig>:
{
 8011aac:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011aae:	6a03      	ldr	r3, [r0, #32]
 8011ab0:	2210      	movs	r2, #16
 8011ab2:	4393      	bics	r3, r2
 8011ab4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011ab6:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8011ab8:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8011aba:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011abc:	4c15      	ldr	r4, [pc, #84]	; (8011b14 <TIM_OC2_SetConfig+0x68>)
 8011abe:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8011ac0:	680c      	ldr	r4, [r1, #0]
 8011ac2:	0224      	lsls	r4, r4, #8
 8011ac4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8011ac6:	2420      	movs	r4, #32
 8011ac8:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4);
 8011aca:	688c      	ldr	r4, [r1, #8]
 8011acc:	0124      	lsls	r4, r4, #4
 8011ace:	4322      	orrs	r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011ad0:	4c11      	ldr	r4, [pc, #68]	; (8011b18 <TIM_OC2_SetConfig+0x6c>)
 8011ad2:	42a0      	cmp	r0, r4
 8011ad4:	d009      	beq.n	8011aea <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8011ad6:	4c11      	ldr	r4, [pc, #68]	; (8011b1c <TIM_OC2_SetConfig+0x70>)
 8011ad8:	42a0      	cmp	r0, r4
 8011ada:	d00e      	beq.n	8011afa <TIM_OC2_SetConfig+0x4e>
 8011adc:	4c10      	ldr	r4, [pc, #64]	; (8011b20 <TIM_OC2_SetConfig+0x74>)
 8011ade:	42a0      	cmp	r0, r4
 8011ae0:	d00b      	beq.n	8011afa <TIM_OC2_SetConfig+0x4e>
 8011ae2:	4c10      	ldr	r4, [pc, #64]	; (8011b24 <TIM_OC2_SetConfig+0x78>)
 8011ae4:	42a0      	cmp	r0, r4
 8011ae6:	d10f      	bne.n	8011b08 <TIM_OC2_SetConfig+0x5c>
 8011ae8:	e007      	b.n	8011afa <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011aea:	2480      	movs	r4, #128	; 0x80
 8011aec:	43a2      	bics	r2, r4
 8011aee:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8011af0:	68ca      	ldr	r2, [r1, #12]
 8011af2:	0112      	lsls	r2, r2, #4
 8011af4:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8011af6:	2440      	movs	r4, #64	; 0x40
 8011af8:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011afa:	4c0b      	ldr	r4, [pc, #44]	; (8011b28 <TIM_OC2_SetConfig+0x7c>)
 8011afc:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8011afe:	698b      	ldr	r3, [r1, #24]
 8011b00:	694e      	ldr	r6, [r1, #20]
 8011b02:	4333      	orrs	r3, r6
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8011b08:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011b0a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011b0c:	684b      	ldr	r3, [r1, #4]
 8011b0e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011b10:	6202      	str	r2, [r0, #32]
}
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	ffff8cff 	.word	0xffff8cff
 8011b18:	40012c00 	.word	0x40012c00
 8011b1c:	40014000 	.word	0x40014000
 8011b20:	40014400 	.word	0x40014400
 8011b24:	40014800 	.word	0x40014800
 8011b28:	fffff3ff 	.word	0xfffff3ff

08011b2c <HAL_TIM_PWM_ConfigChannel>:
{
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	0004      	movs	r4, r0
 8011b30:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8011b32:	2338      	movs	r3, #56	; 0x38
 8011b34:	5cc3      	ldrb	r3, [r0, r3]
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d069      	beq.n	8011c0e <HAL_TIM_PWM_ConfigChannel+0xe2>
 8011b3a:	2338      	movs	r3, #56	; 0x38
 8011b3c:	2101      	movs	r1, #1
 8011b3e:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8011b40:	3301      	adds	r3, #1
 8011b42:	3101      	adds	r1, #1
 8011b44:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8011b46:	2a04      	cmp	r2, #4
 8011b48:	d037      	beq.n	8011bba <HAL_TIM_PWM_ConfigChannel+0x8e>
 8011b4a:	d919      	bls.n	8011b80 <HAL_TIM_PWM_ConfigChannel+0x54>
 8011b4c:	2a08      	cmp	r2, #8
 8011b4e:	d04a      	beq.n	8011be6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8011b50:	2a0c      	cmp	r2, #12
 8011b52:	d12a      	bne.n	8011baa <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011b54:	0029      	movs	r1, r5
 8011b56:	6800      	ldr	r0, [r0, #0]
 8011b58:	f7ff fd94 	bl	8011684 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011b5c:	6822      	ldr	r2, [r4, #0]
 8011b5e:	69d1      	ldr	r1, [r2, #28]
 8011b60:	2380      	movs	r3, #128	; 0x80
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	430b      	orrs	r3, r1
 8011b66:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011b68:	6822      	ldr	r2, [r4, #0]
 8011b6a:	69d3      	ldr	r3, [r2, #28]
 8011b6c:	4929      	ldr	r1, [pc, #164]	; (8011c14 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8011b6e:	400b      	ands	r3, r1
 8011b70:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	69d1      	ldr	r1, [r2, #28]
 8011b76:	692b      	ldr	r3, [r5, #16]
 8011b78:	021b      	lsls	r3, r3, #8
 8011b7a:	430b      	orrs	r3, r1
 8011b7c:	61d3      	str	r3, [r2, #28]
    break;
 8011b7e:	e014      	b.n	8011baa <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	d112      	bne.n	8011baa <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011b84:	0029      	movs	r1, r5
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	f7ff fcea 	bl	8011560 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011b8c:	6822      	ldr	r2, [r4, #0]
 8011b8e:	6993      	ldr	r3, [r2, #24]
 8011b90:	2108      	movs	r1, #8
 8011b92:	430b      	orrs	r3, r1
 8011b94:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011b96:	6822      	ldr	r2, [r4, #0]
 8011b98:	6993      	ldr	r3, [r2, #24]
 8011b9a:	3904      	subs	r1, #4
 8011b9c:	438b      	bics	r3, r1
 8011b9e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011ba0:	6822      	ldr	r2, [r4, #0]
 8011ba2:	6993      	ldr	r3, [r2, #24]
 8011ba4:	6929      	ldr	r1, [r5, #16]
 8011ba6:	430b      	orrs	r3, r1
 8011ba8:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8011baa:	2339      	movs	r3, #57	; 0x39
 8011bac:	2201      	movs	r2, #1
 8011bae:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011bb6:	2000      	movs	r0, #0
}
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011bba:	0029      	movs	r1, r5
 8011bbc:	6800      	ldr	r0, [r0, #0]
 8011bbe:	f7ff ff75 	bl	8011aac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011bc2:	6822      	ldr	r2, [r4, #0]
 8011bc4:	6991      	ldr	r1, [r2, #24]
 8011bc6:	2380      	movs	r3, #128	; 0x80
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	430b      	orrs	r3, r1
 8011bcc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011bce:	6822      	ldr	r2, [r4, #0]
 8011bd0:	6993      	ldr	r3, [r2, #24]
 8011bd2:	4910      	ldr	r1, [pc, #64]	; (8011c14 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8011bd4:	400b      	ands	r3, r1
 8011bd6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8011bd8:	6822      	ldr	r2, [r4, #0]
 8011bda:	6991      	ldr	r1, [r2, #24]
 8011bdc:	692b      	ldr	r3, [r5, #16]
 8011bde:	021b      	lsls	r3, r3, #8
 8011be0:	430b      	orrs	r3, r1
 8011be2:	6193      	str	r3, [r2, #24]
    break;
 8011be4:	e7e1      	b.n	8011baa <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011be6:	0029      	movs	r1, r5
 8011be8:	6800      	ldr	r0, [r0, #0]
 8011bea:	f7ff fd07 	bl	80115fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011bee:	6822      	ldr	r2, [r4, #0]
 8011bf0:	69d3      	ldr	r3, [r2, #28]
 8011bf2:	2108      	movs	r1, #8
 8011bf4:	430b      	orrs	r3, r1
 8011bf6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011bf8:	6822      	ldr	r2, [r4, #0]
 8011bfa:	69d3      	ldr	r3, [r2, #28]
 8011bfc:	3904      	subs	r1, #4
 8011bfe:	438b      	bics	r3, r1
 8011c00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011c02:	6822      	ldr	r2, [r4, #0]
 8011c04:	69d3      	ldr	r3, [r2, #28]
 8011c06:	6929      	ldr	r1, [r5, #16]
 8011c08:	430b      	orrs	r3, r1
 8011c0a:	61d3      	str	r3, [r2, #28]
    break;
 8011c0c:	e7cd      	b.n	8011baa <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8011c0e:	2002      	movs	r0, #2
 8011c10:	e7d2      	b.n	8011bb8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8011c12:	46c0      	nop			; (mov r8, r8)
 8011c14:	fffffbff 	.word	0xfffffbff

08011c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011c18:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c1a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8011c1c:	2401      	movs	r4, #1
 8011c1e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8011c20:	43a3      	bics	r3, r4
 8011c22:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8011c24:	6a03      	ldr	r3, [r0, #32]
 8011c26:	408a      	lsls	r2, r1
 8011c28:	431a      	orrs	r2, r3
 8011c2a:	6202      	str	r2, [r0, #32]
}
 8011c2c:	bd10      	pop	{r4, pc}
	...

08011c30 <HAL_TIM_PWM_Start>:
{
 8011c30:	b510      	push	{r4, lr}
 8011c32:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011c34:	2201      	movs	r2, #1
 8011c36:	6800      	ldr	r0, [r0, #0]
 8011c38:	f7ff ffee 	bl	8011c18 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	4a0c      	ldr	r2, [pc, #48]	; (8011c70 <HAL_TIM_PWM_Start+0x40>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d008      	beq.n	8011c56 <HAL_TIM_PWM_Start+0x26>
 8011c44:	4a0b      	ldr	r2, [pc, #44]	; (8011c74 <HAL_TIM_PWM_Start+0x44>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d005      	beq.n	8011c56 <HAL_TIM_PWM_Start+0x26>
 8011c4a:	4a0b      	ldr	r2, [pc, #44]	; (8011c78 <HAL_TIM_PWM_Start+0x48>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d002      	beq.n	8011c56 <HAL_TIM_PWM_Start+0x26>
 8011c50:	4a0a      	ldr	r2, [pc, #40]	; (8011c7c <HAL_TIM_PWM_Start+0x4c>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d104      	bne.n	8011c60 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8011c56:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011c58:	2280      	movs	r2, #128	; 0x80
 8011c5a:	0212      	lsls	r2, r2, #8
 8011c5c:	430a      	orrs	r2, r1
 8011c5e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8011c60:	6822      	ldr	r2, [r4, #0]
 8011c62:	6813      	ldr	r3, [r2, #0]
 8011c64:	2101      	movs	r1, #1
 8011c66:	430b      	orrs	r3, r1
 8011c68:	6013      	str	r3, [r2, #0]
}
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	46c0      	nop			; (mov r8, r8)
 8011c70:	40012c00 	.word	0x40012c00
 8011c74:	40014000 	.word	0x40014000
 8011c78:	40014400 	.word	0x40014400
 8011c7c:	40014800 	.word	0x40014800

08011c80 <HAL_TIM_PWM_Stop>:
{
 8011c80:	b510      	push	{r4, lr}
 8011c82:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011c84:	2200      	movs	r2, #0
 8011c86:	6800      	ldr	r0, [r0, #0]
 8011c88:	f7ff ffc6 	bl	8011c18 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	4a15      	ldr	r2, [pc, #84]	; (8011ce4 <HAL_TIM_PWM_Stop+0x64>)
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d01a      	beq.n	8011cca <HAL_TIM_PWM_Stop+0x4a>
 8011c94:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <HAL_TIM_PWM_Stop+0x68>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d017      	beq.n	8011cca <HAL_TIM_PWM_Stop+0x4a>
 8011c9a:	4a14      	ldr	r2, [pc, #80]	; (8011cec <HAL_TIM_PWM_Stop+0x6c>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d014      	beq.n	8011cca <HAL_TIM_PWM_Stop+0x4a>
 8011ca0:	4a13      	ldr	r2, [pc, #76]	; (8011cf0 <HAL_TIM_PWM_Stop+0x70>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d011      	beq.n	8011cca <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	6a19      	ldr	r1, [r3, #32]
 8011caa:	4a12      	ldr	r2, [pc, #72]	; (8011cf4 <HAL_TIM_PWM_Stop+0x74>)
 8011cac:	4211      	tst	r1, r2
 8011cae:	d107      	bne.n	8011cc0 <HAL_TIM_PWM_Stop+0x40>
 8011cb0:	6a19      	ldr	r1, [r3, #32]
 8011cb2:	4a11      	ldr	r2, [pc, #68]	; (8011cf8 <HAL_TIM_PWM_Stop+0x78>)
 8011cb4:	4211      	tst	r1, r2
 8011cb6:	d103      	bne.n	8011cc0 <HAL_TIM_PWM_Stop+0x40>
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	2101      	movs	r1, #1
 8011cbc:	438a      	bics	r2, r1
 8011cbe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011cc0:	2339      	movs	r3, #57	; 0x39
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	54e2      	strb	r2, [r4, r3]
}
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8011cca:	6a19      	ldr	r1, [r3, #32]
 8011ccc:	4a09      	ldr	r2, [pc, #36]	; (8011cf4 <HAL_TIM_PWM_Stop+0x74>)
 8011cce:	4211      	tst	r1, r2
 8011cd0:	d1e9      	bne.n	8011ca6 <HAL_TIM_PWM_Stop+0x26>
 8011cd2:	6a19      	ldr	r1, [r3, #32]
 8011cd4:	4a08      	ldr	r2, [pc, #32]	; (8011cf8 <HAL_TIM_PWM_Stop+0x78>)
 8011cd6:	4211      	tst	r1, r2
 8011cd8:	d1e5      	bne.n	8011ca6 <HAL_TIM_PWM_Stop+0x26>
 8011cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cdc:	4907      	ldr	r1, [pc, #28]	; (8011cfc <HAL_TIM_PWM_Stop+0x7c>)
 8011cde:	400a      	ands	r2, r1
 8011ce0:	645a      	str	r2, [r3, #68]	; 0x44
 8011ce2:	e7e0      	b.n	8011ca6 <HAL_TIM_PWM_Stop+0x26>
 8011ce4:	40012c00 	.word	0x40012c00
 8011ce8:	40014000 	.word	0x40014000
 8011cec:	40014400 	.word	0x40014400
 8011cf0:	40014800 	.word	0x40014800
 8011cf4:	00001111 	.word	0x00001111
 8011cf8:	00000444 	.word	0x00000444
 8011cfc:	ffff7fff 	.word	0xffff7fff

08011d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011d02:	2338      	movs	r3, #56	; 0x38
 8011d04:	5cc3      	ldrb	r3, [r0, r3]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d01e      	beq.n	8011d48 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8011d0a:	2238      	movs	r2, #56	; 0x38
 8011d0c:	2501      	movs	r5, #1
 8011d0e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011d10:	2439      	movs	r4, #57	; 0x39
 8011d12:	2302      	movs	r3, #2
 8011d14:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011d16:	6806      	ldr	r6, [r0, #0]
 8011d18:	6873      	ldr	r3, [r6, #4]
 8011d1a:	2770      	movs	r7, #112	; 0x70
 8011d1c:	43bb      	bics	r3, r7
 8011d1e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d20:	6806      	ldr	r6, [r0, #0]
 8011d22:	6873      	ldr	r3, [r6, #4]
 8011d24:	680f      	ldr	r7, [r1, #0]
 8011d26:	433b      	orrs	r3, r7
 8011d28:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d2a:	6806      	ldr	r6, [r0, #0]
 8011d2c:	68b3      	ldr	r3, [r6, #8]
 8011d2e:	2780      	movs	r7, #128	; 0x80
 8011d30:	43bb      	bics	r3, r7
 8011d32:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d34:	6806      	ldr	r6, [r0, #0]
 8011d36:	68b3      	ldr	r3, [r6, #8]
 8011d38:	6849      	ldr	r1, [r1, #4]
 8011d3a:	430b      	orrs	r3, r1
 8011d3c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011d3e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011d40:	2300      	movs	r3, #0
 8011d42:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011d44:	2000      	movs	r0, #0
}
 8011d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8011d48:	2002      	movs	r0, #2
 8011d4a:	e7fc      	b.n	8011d46 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011d4c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011d4c:	4770      	bx	lr

08011d4e <HAL_UART_DeInit>:
{
 8011d4e:	b570      	push	{r4, r5, r6, lr}
 8011d50:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011d52:	2001      	movs	r0, #1
  if(huart == NULL)
 8011d54:	2c00      	cmp	r4, #0
 8011d56:	d016      	beq.n	8011d86 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8011d58:	2669      	movs	r6, #105	; 0x69
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011d5e:	6822      	ldr	r2, [r4, #0]
 8011d60:	6813      	ldr	r3, [r2, #0]
 8011d62:	2101      	movs	r1, #1
 8011d64:	438b      	bics	r3, r1
 8011d66:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	2500      	movs	r5, #0
 8011d6c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011d6e:	6823      	ldr	r3, [r4, #0]
 8011d70:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011d72:	6823      	ldr	r3, [r4, #0]
 8011d74:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011d76:	0020      	movs	r0, r4
 8011d78:	f7ff ffe8 	bl	8011d4c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d7c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011d7e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011d80:	2368      	movs	r3, #104	; 0x68
 8011d82:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011d84:	2000      	movs	r0, #0
}
 8011d86:	bd70      	pop	{r4, r5, r6, pc}

08011d88 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d88:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d8a:	2369      	movs	r3, #105	; 0x69
 8011d8c:	5cc3      	ldrb	r3, [r0, r3]
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d004      	beq.n	8011d9c <HAL_UART_Transmit_IT+0x14>
 8011d92:	2369      	movs	r3, #105	; 0x69
 8011d94:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011d96:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d98:	2c22      	cmp	r4, #34	; 0x22
 8011d9a:	d127      	bne.n	8011dec <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8011d9c:	2900      	cmp	r1, #0
 8011d9e:	d02b      	beq.n	8011df8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011da2:	2a00      	cmp	r2, #0
 8011da4:	d022      	beq.n	8011dec <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011da6:	3367      	adds	r3, #103	; 0x67
 8011da8:	5cc3      	ldrb	r3, [r0, r3]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d026      	beq.n	8011dfc <HAL_UART_Transmit_IT+0x74>
 8011dae:	2368      	movs	r3, #104	; 0x68
 8011db0:	2401      	movs	r4, #1
 8011db2:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8011db4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011db6:	3b18      	subs	r3, #24
 8011db8:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011dba:	3302      	adds	r3, #2
 8011dbc:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011dc2:	3369      	adds	r3, #105	; 0x69
 8011dc4:	5cc3      	ldrb	r3, [r0, r3]
 8011dc6:	2b22      	cmp	r3, #34	; 0x22
 8011dc8:	d012      	beq.n	8011df0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011dca:	2369      	movs	r3, #105	; 0x69
 8011dcc:	2212      	movs	r2, #18
 8011dce:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011dd0:	6802      	ldr	r2, [r0, #0]
 8011dd2:	6893      	ldr	r3, [r2, #8]
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	430b      	orrs	r3, r1
 8011dd8:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011dda:	2368      	movs	r3, #104	; 0x68
 8011ddc:	2200      	movs	r2, #0
 8011dde:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011de0:	6802      	ldr	r2, [r0, #0]
 8011de2:	6813      	ldr	r3, [r2, #0]
 8011de4:	317f      	adds	r1, #127	; 0x7f
 8011de6:	430b      	orrs	r3, r1
 8011de8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011dea:	2300      	movs	r3, #0
  }
}
 8011dec:	0018      	movs	r0, r3
 8011dee:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011df0:	3347      	adds	r3, #71	; 0x47
 8011df2:	2232      	movs	r2, #50	; 0x32
 8011df4:	54c2      	strb	r2, [r0, r3]
 8011df6:	e7eb      	b.n	8011dd0 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e7f7      	b.n	8011dec <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	e7f5      	b.n	8011dec <HAL_UART_Transmit_IT+0x64>

08011e00 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e00:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e02:	2369      	movs	r3, #105	; 0x69
 8011e04:	5cc3      	ldrb	r3, [r0, r3]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d004      	beq.n	8011e14 <HAL_UART_Receive_IT+0x14>
 8011e0a:	2369      	movs	r3, #105	; 0x69
 8011e0c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e0e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e10:	2c12      	cmp	r4, #18
 8011e12:	d14e      	bne.n	8011eb2 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8011e14:	2900      	cmp	r1, #0
 8011e16:	d05d      	beq.n	8011ed4 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8011e18:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011e1a:	2a00      	cmp	r2, #0
 8011e1c:	d049      	beq.n	8011eb2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011e1e:	3367      	adds	r3, #103	; 0x67
 8011e20:	5cc3      	ldrb	r3, [r0, r3]
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d058      	beq.n	8011ed8 <HAL_UART_Receive_IT+0xd8>
 8011e26:	2368      	movs	r3, #104	; 0x68
 8011e28:	2401      	movs	r4, #1
 8011e2a:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8011e2c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011e2e:	3b10      	subs	r3, #16
 8011e30:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011e32:	3302      	adds	r3, #2
 8011e34:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8011e36:	6883      	ldr	r3, [r0, #8]
 8011e38:	2280      	movs	r2, #128	; 0x80
 8011e3a:	0152      	lsls	r2, r2, #5
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d008      	beq.n	8011e52 <HAL_UART_Receive_IT+0x52>
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d115      	bne.n	8011e70 <HAL_UART_Receive_IT+0x70>
 8011e44:	6903      	ldr	r3, [r0, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10e      	bne.n	8011e68 <HAL_UART_Receive_IT+0x68>
 8011e4a:	335c      	adds	r3, #92	; 0x5c
 8011e4c:	22ff      	movs	r2, #255	; 0xff
 8011e4e:	52c2      	strh	r2, [r0, r3]
 8011e50:	e012      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
 8011e52:	6903      	ldr	r3, [r0, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d103      	bne.n	8011e60 <HAL_UART_Receive_IT+0x60>
 8011e58:	335c      	adds	r3, #92	; 0x5c
 8011e5a:	4a20      	ldr	r2, [pc, #128]	; (8011edc <HAL_UART_Receive_IT+0xdc>)
 8011e5c:	52c2      	strh	r2, [r0, r3]
 8011e5e:	e00b      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
 8011e60:	235c      	movs	r3, #92	; 0x5c
 8011e62:	22ff      	movs	r2, #255	; 0xff
 8011e64:	52c2      	strh	r2, [r0, r3]
 8011e66:	e007      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
 8011e68:	235c      	movs	r3, #92	; 0x5c
 8011e6a:	227f      	movs	r2, #127	; 0x7f
 8011e6c:	52c2      	strh	r2, [r0, r3]
 8011e6e:	e003      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
 8011e70:	2280      	movs	r2, #128	; 0x80
 8011e72:	0552      	lsls	r2, r2, #21
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d01e      	beq.n	8011eb6 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011e7c:	3369      	adds	r3, #105	; 0x69
 8011e7e:	5cc3      	ldrb	r3, [r0, r3]
 8011e80:	2b12      	cmp	r3, #18
 8011e82:	d023      	beq.n	8011ecc <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011e84:	2369      	movs	r3, #105	; 0x69
 8011e86:	2222      	movs	r2, #34	; 0x22
 8011e88:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011e8a:	6802      	ldr	r2, [r0, #0]
 8011e8c:	6811      	ldr	r1, [r2, #0]
 8011e8e:	2380      	movs	r3, #128	; 0x80
 8011e90:	005b      	lsls	r3, r3, #1
 8011e92:	430b      	orrs	r3, r1
 8011e94:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e96:	6802      	ldr	r2, [r0, #0]
 8011e98:	6893      	ldr	r3, [r2, #8]
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	430b      	orrs	r3, r1
 8011e9e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011ea0:	2368      	movs	r3, #104	; 0x68
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011ea6:	6802      	ldr	r2, [r0, #0]
 8011ea8:	6813      	ldr	r3, [r2, #0]
 8011eaa:	311f      	adds	r1, #31
 8011eac:	430b      	orrs	r3, r1
 8011eae:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011eb0:	2300      	movs	r3, #0
  }
}
 8011eb2:	0018      	movs	r0, r3
 8011eb4:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8011eb6:	6903      	ldr	r3, [r0, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d103      	bne.n	8011ec4 <HAL_UART_Receive_IT+0xc4>
 8011ebc:	335c      	adds	r3, #92	; 0x5c
 8011ebe:	227f      	movs	r2, #127	; 0x7f
 8011ec0:	52c2      	strh	r2, [r0, r3]
 8011ec2:	e7d9      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
 8011ec4:	235c      	movs	r3, #92	; 0x5c
 8011ec6:	223f      	movs	r2, #63	; 0x3f
 8011ec8:	52c2      	strh	r2, [r0, r3]
 8011eca:	e7d5      	b.n	8011e78 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011ecc:	3357      	adds	r3, #87	; 0x57
 8011ece:	2232      	movs	r2, #50	; 0x32
 8011ed0:	54c2      	strb	r2, [r0, r3]
 8011ed2:	e7da      	b.n	8011e8a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e7ec      	b.n	8011eb2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011ed8:	2302      	movs	r3, #2
 8011eda:	e7ea      	b.n	8011eb2 <HAL_UART_Receive_IT+0xb2>
 8011edc:	000001ff 	.word	0x000001ff

08011ee0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011ee4:	2369      	movs	r3, #105	; 0x69
 8011ee6:	5cc3      	ldrb	r3, [r0, r3]
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d004      	beq.n	8011ef6 <HAL_UART_Transmit_DMA+0x16>
 8011eec:	2369      	movs	r3, #105	; 0x69
 8011eee:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011ef0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011ef2:	2b22      	cmp	r3, #34	; 0x22
 8011ef4:	d134      	bne.n	8011f60 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8011ef6:	2900      	cmp	r1, #0
 8011ef8:	d037      	beq.n	8011f6a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8011efa:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	d02f      	beq.n	8011f60 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8011f00:	2368      	movs	r3, #104	; 0x68
 8011f02:	5ce3      	ldrb	r3, [r4, r3]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d032      	beq.n	8011f6e <HAL_UART_Transmit_DMA+0x8e>
 8011f08:	2368      	movs	r3, #104	; 0x68
 8011f0a:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8011f0c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011f0e:	3b18      	subs	r3, #24
 8011f10:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8011f12:	3302      	adds	r3, #2
 8011f14:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f16:	2300      	movs	r3, #0
 8011f18:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011f1a:	3369      	adds	r3, #105	; 0x69
 8011f1c:	5ce3      	ldrb	r3, [r4, r3]
 8011f1e:	2b22      	cmp	r3, #34	; 0x22
 8011f20:	d01f      	beq.n	8011f62 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011f22:	2369      	movs	r3, #105	; 0x69
 8011f24:	2012      	movs	r0, #18
 8011f26:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f2a:	4812      	ldr	r0, [pc, #72]	; (8011f74 <HAL_UART_Transmit_DMA+0x94>)
 8011f2c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f30:	4811      	ldr	r0, [pc, #68]	; (8011f78 <HAL_UART_Transmit_DMA+0x98>)
 8011f32:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f36:	4811      	ldr	r0, [pc, #68]	; (8011f7c <HAL_UART_Transmit_DMA+0x9c>)
 8011f38:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011f3a:	6820      	ldr	r0, [r4, #0]
 8011f3c:	3028      	adds	r0, #40	; 0x28
 8011f3e:	0013      	movs	r3, r2
 8011f40:	0002      	movs	r2, r0
 8011f42:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011f44:	f7fd fd12 	bl	800f96c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	2240      	movs	r2, #64	; 0x40
 8011f4c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011f4e:	6822      	ldr	r2, [r4, #0]
 8011f50:	6893      	ldr	r3, [r2, #8]
 8011f52:	2180      	movs	r1, #128	; 0x80
 8011f54:	430b      	orrs	r3, r1
 8011f56:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011f58:	2368      	movs	r3, #104	; 0x68
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011f5e:	2000      	movs	r0, #0
  }
}
 8011f60:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f62:	3347      	adds	r3, #71	; 0x47
 8011f64:	3031      	adds	r0, #49	; 0x31
 8011f66:	54e0      	strb	r0, [r4, r3]
 8011f68:	e7de      	b.n	8011f28 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8011f6a:	2001      	movs	r0, #1
 8011f6c:	e7f8      	b.n	8011f60 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8011f6e:	2002      	movs	r0, #2
 8011f70:	e7f6      	b.n	8011f60 <HAL_UART_Transmit_DMA+0x80>
 8011f72:	46c0      	nop			; (mov r8, r8)
 8011f74:	08012019 	.word	0x08012019
 8011f78:	0801204b 	.word	0x0801204b
 8011f7c:	0801209b 	.word	0x0801209b

08011f80 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f80:	b510      	push	{r4, lr}
 8011f82:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f84:	2069      	movs	r0, #105	; 0x69
 8011f86:	5c20      	ldrb	r0, [r4, r0]
 8011f88:	2801      	cmp	r0, #1
 8011f8a:	d004      	beq.n	8011f96 <HAL_UART_Receive_DMA+0x16>
 8011f8c:	2369      	movs	r3, #105	; 0x69
 8011f8e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f90:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f92:	2b12      	cmp	r3, #18
 8011f94:	d130      	bne.n	8011ff8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8011f96:	2900      	cmp	r1, #0
 8011f98:	d033      	beq.n	8012002 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8011f9a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011f9c:	2a00      	cmp	r2, #0
 8011f9e:	d02b      	beq.n	8011ff8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8011fa0:	2368      	movs	r3, #104	; 0x68
 8011fa2:	5ce3      	ldrb	r3, [r4, r3]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d02e      	beq.n	8012006 <HAL_UART_Receive_DMA+0x86>
 8011fa8:	2368      	movs	r3, #104	; 0x68
 8011faa:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8011fac:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011fae:	3b10      	subs	r3, #16
 8011fb0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011fb6:	3369      	adds	r3, #105	; 0x69
 8011fb8:	5ce3      	ldrb	r3, [r4, r3]
 8011fba:	2b12      	cmp	r3, #18
 8011fbc:	d01d      	beq.n	8011ffa <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011fbe:	2369      	movs	r3, #105	; 0x69
 8011fc0:	2022      	movs	r0, #34	; 0x22
 8011fc2:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fc6:	4811      	ldr	r0, [pc, #68]	; (801200c <HAL_UART_Receive_DMA+0x8c>)
 8011fc8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fcc:	4810      	ldr	r0, [pc, #64]	; (8012010 <HAL_UART_Receive_DMA+0x90>)
 8011fce:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fd2:	4810      	ldr	r0, [pc, #64]	; (8012014 <HAL_UART_Receive_DMA+0x94>)
 8011fd4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	3024      	adds	r0, #36	; 0x24
 8011fda:	0013      	movs	r3, r2
 8011fdc:	000a      	movs	r2, r1
 8011fde:	0001      	movs	r1, r0
 8011fe0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011fe2:	f7fd fcc3 	bl	800f96c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011fe6:	6822      	ldr	r2, [r4, #0]
 8011fe8:	6893      	ldr	r3, [r2, #8]
 8011fea:	2140      	movs	r1, #64	; 0x40
 8011fec:	430b      	orrs	r3, r1
 8011fee:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011ff0:	2368      	movs	r3, #104	; 0x68
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011ff6:	2000      	movs	r0, #0
  }
}
 8011ff8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011ffa:	3357      	adds	r3, #87	; 0x57
 8011ffc:	3031      	adds	r0, #49	; 0x31
 8011ffe:	54e0      	strb	r0, [r4, r3]
 8012000:	e7e0      	b.n	8011fc4 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8012002:	2001      	movs	r0, #1
 8012004:	e7f8      	b.n	8011ff8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012006:	2002      	movs	r0, #2
 8012008:	e7f6      	b.n	8011ff8 <HAL_UART_Receive_DMA+0x78>
 801200a:	46c0      	nop			; (mov r8, r8)
 801200c:	08012055 	.word	0x08012055
 8012010:	08012091 	.word	0x08012091
 8012014:	0801209b 	.word	0x0801209b

08012018 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012018:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801201a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801201c:	6802      	ldr	r2, [r0, #0]
 801201e:	6812      	ldr	r2, [r2, #0]
 8012020:	0692      	lsls	r2, r2, #26
 8012022:	d40d      	bmi.n	8012040 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8012024:	2252      	movs	r2, #82	; 0x52
 8012026:	2100      	movs	r1, #0
 8012028:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 801202a:	6819      	ldr	r1, [r3, #0]
 801202c:	688a      	ldr	r2, [r1, #8]
 801202e:	2080      	movs	r0, #128	; 0x80
 8012030:	4382      	bics	r2, r0
 8012032:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	6813      	ldr	r3, [r2, #0]
 8012038:	2140      	movs	r1, #64	; 0x40
 801203a:	430b      	orrs	r3, r1
 801203c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 801203e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012040:	0018      	movs	r0, r3
 8012042:	f7fa ff89 	bl	800cf58 <HAL_UART_TxCpltCallback>
}
 8012046:	e7fa      	b.n	801203e <UART_DMATransmitCplt+0x26>

08012048 <HAL_UART_TxHalfCpltCallback>:
}
 8012048:	4770      	bx	lr

0801204a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801204a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801204c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801204e:	f7ff fffb 	bl	8012048 <HAL_UART_TxHalfCpltCallback>
}
 8012052:	bd10      	pop	{r4, pc}

08012054 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012054:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012056:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012058:	6802      	ldr	r2, [r0, #0]
 801205a:	6812      	ldr	r2, [r2, #0]
 801205c:	0692      	lsls	r2, r2, #26
 801205e:	d40e      	bmi.n	801207e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012060:	225a      	movs	r2, #90	; 0x5a
 8012062:	2100      	movs	r1, #0
 8012064:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012066:	6819      	ldr	r1, [r3, #0]
 8012068:	688a      	ldr	r2, [r1, #8]
 801206a:	2040      	movs	r0, #64	; 0x40
 801206c:	4382      	bics	r2, r0
 801206e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012070:	2269      	movs	r2, #105	; 0x69
 8012072:	5c9a      	ldrb	r2, [r3, r2]
 8012074:	2a32      	cmp	r2, #50	; 0x32
 8012076:	d006      	beq.n	8012086 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012078:	2269      	movs	r2, #105	; 0x69
 801207a:	2101      	movs	r1, #1
 801207c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801207e:	0018      	movs	r0, r3
 8012080:	f7fa ffa8 	bl	800cfd4 <HAL_UART_RxCpltCallback>
}
 8012084:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012086:	3237      	adds	r2, #55	; 0x37
 8012088:	2112      	movs	r1, #18
 801208a:	5499      	strb	r1, [r3, r2]
 801208c:	e7f7      	b.n	801207e <UART_DMAReceiveCplt+0x2a>

0801208e <HAL_UART_RxHalfCpltCallback>:
}
 801208e:	4770      	bx	lr

08012090 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012090:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012092:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012094:	f7ff fffb 	bl	801208e <HAL_UART_RxHalfCpltCallback>
}
 8012098:	bd10      	pop	{r4, pc}

0801209a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801209a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801209c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801209e:	2300      	movs	r3, #0
 80120a0:	225a      	movs	r2, #90	; 0x5a
 80120a2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80120a4:	3a08      	subs	r2, #8
 80120a6:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80120a8:	3369      	adds	r3, #105	; 0x69
 80120aa:	3a51      	subs	r2, #81	; 0x51
 80120ac:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80120ae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80120b0:	320f      	adds	r2, #15
 80120b2:	4313      	orrs	r3, r2
 80120b4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80120b6:	f7fa ff67 	bl	800cf88 <HAL_UART_ErrorCallback>
}
 80120ba:	bd10      	pop	{r4, pc}

080120bc <UART_SetConfig>:
{
 80120bc:	b570      	push	{r4, r5, r6, lr}
 80120be:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80120c0:	6801      	ldr	r1, [r0, #0]
 80120c2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80120c4:	6883      	ldr	r3, [r0, #8]
 80120c6:	6900      	ldr	r0, [r0, #16]
 80120c8:	4303      	orrs	r3, r0
 80120ca:	6960      	ldr	r0, [r4, #20]
 80120cc:	4303      	orrs	r3, r0
 80120ce:	69e0      	ldr	r0, [r4, #28]
 80120d0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80120d2:	487e      	ldr	r0, [pc, #504]	; (80122cc <UART_SetConfig+0x210>)
 80120d4:	4002      	ands	r2, r0
 80120d6:	4313      	orrs	r3, r2
 80120d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80120da:	6822      	ldr	r2, [r4, #0]
 80120dc:	6853      	ldr	r3, [r2, #4]
 80120de:	497c      	ldr	r1, [pc, #496]	; (80122d0 <UART_SetConfig+0x214>)
 80120e0:	400b      	ands	r3, r1
 80120e2:	68e1      	ldr	r1, [r4, #12]
 80120e4:	430b      	orrs	r3, r1
 80120e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80120e8:	6821      	ldr	r1, [r4, #0]
 80120ea:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80120ec:	69a3      	ldr	r3, [r4, #24]
 80120ee:	6a20      	ldr	r0, [r4, #32]
 80120f0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80120f2:	4878      	ldr	r0, [pc, #480]	; (80122d4 <UART_SetConfig+0x218>)
 80120f4:	4002      	ands	r2, r0
 80120f6:	4313      	orrs	r3, r2
 80120f8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120fa:	6825      	ldr	r5, [r4, #0]
 80120fc:	4b76      	ldr	r3, [pc, #472]	; (80122d8 <UART_SetConfig+0x21c>)
 80120fe:	429d      	cmp	r5, r3
 8012100:	d022      	beq.n	8012148 <UART_SetConfig+0x8c>
 8012102:	4b76      	ldr	r3, [pc, #472]	; (80122dc <UART_SetConfig+0x220>)
 8012104:	429d      	cmp	r5, r3
 8012106:	d034      	beq.n	8012172 <UART_SetConfig+0xb6>
 8012108:	4b75      	ldr	r3, [pc, #468]	; (80122e0 <UART_SetConfig+0x224>)
 801210a:	429d      	cmp	r5, r3
 801210c:	d100      	bne.n	8012110 <UART_SetConfig+0x54>
 801210e:	e06b      	b.n	80121e8 <UART_SetConfig+0x12c>
 8012110:	4b74      	ldr	r3, [pc, #464]	; (80122e4 <UART_SetConfig+0x228>)
 8012112:	429d      	cmp	r5, r3
 8012114:	d100      	bne.n	8012118 <UART_SetConfig+0x5c>
 8012116:	e08e      	b.n	8012236 <UART_SetConfig+0x17a>
 8012118:	4b73      	ldr	r3, [pc, #460]	; (80122e8 <UART_SetConfig+0x22c>)
 801211a:	429d      	cmp	r5, r3
 801211c:	d100      	bne.n	8012120 <UART_SetConfig+0x64>
 801211e:	e08a      	b.n	8012236 <UART_SetConfig+0x17a>
 8012120:	4b72      	ldr	r3, [pc, #456]	; (80122ec <UART_SetConfig+0x230>)
 8012122:	429d      	cmp	r5, r3
 8012124:	d100      	bne.n	8012128 <UART_SetConfig+0x6c>
 8012126:	e086      	b.n	8012236 <UART_SetConfig+0x17a>
 8012128:	4b71      	ldr	r3, [pc, #452]	; (80122f0 <UART_SetConfig+0x234>)
 801212a:	429d      	cmp	r5, r3
 801212c:	d100      	bne.n	8012130 <UART_SetConfig+0x74>
 801212e:	e082      	b.n	8012236 <UART_SetConfig+0x17a>
 8012130:	4b70      	ldr	r3, [pc, #448]	; (80122f4 <UART_SetConfig+0x238>)
 8012132:	429d      	cmp	r5, r3
 8012134:	d100      	bne.n	8012138 <UART_SetConfig+0x7c>
 8012136:	e07e      	b.n	8012236 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012138:	2380      	movs	r3, #128	; 0x80
 801213a:	021b      	lsls	r3, r3, #8
 801213c:	69e2      	ldr	r2, [r4, #28]
 801213e:	429a      	cmp	r2, r3
 8012140:	d100      	bne.n	8012144 <UART_SetConfig+0x88>
 8012142:	e072      	b.n	801222a <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8012144:	2001      	movs	r0, #1
 8012146:	e04e      	b.n	80121e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012148:	4b6b      	ldr	r3, [pc, #428]	; (80122f8 <UART_SetConfig+0x23c>)
 801214a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801214c:	2303      	movs	r3, #3
 801214e:	4013      	ands	r3, r2
 8012150:	2b01      	cmp	r3, #1
 8012152:	d100      	bne.n	8012156 <UART_SetConfig+0x9a>
 8012154:	e09a      	b.n	801228c <UART_SetConfig+0x1d0>
 8012156:	2b00      	cmp	r3, #0
 8012158:	d02f      	beq.n	80121ba <UART_SetConfig+0xfe>
 801215a:	2b02      	cmp	r3, #2
 801215c:	d100      	bne.n	8012160 <UART_SetConfig+0xa4>
 801215e:	e0a5      	b.n	80122ac <UART_SetConfig+0x1f0>
 8012160:	2b03      	cmp	r3, #3
 8012162:	d01a      	beq.n	801219a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012164:	2380      	movs	r3, #128	; 0x80
 8012166:	021b      	lsls	r3, r3, #8
 8012168:	69e2      	ldr	r2, [r4, #28]
 801216a:	429a      	cmp	r2, r3
 801216c:	d060      	beq.n	8012230 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801216e:	2001      	movs	r0, #1
 8012170:	e039      	b.n	80121e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012172:	4b61      	ldr	r3, [pc, #388]	; (80122f8 <UART_SetConfig+0x23c>)
 8012174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012176:	22c0      	movs	r2, #192	; 0xc0
 8012178:	0292      	lsls	r2, r2, #10
 801217a:	4013      	ands	r3, r2
 801217c:	2280      	movs	r2, #128	; 0x80
 801217e:	0252      	lsls	r2, r2, #9
 8012180:	4293      	cmp	r3, r2
 8012182:	d100      	bne.n	8012186 <UART_SetConfig+0xca>
 8012184:	e082      	b.n	801228c <UART_SetConfig+0x1d0>
 8012186:	d916      	bls.n	80121b6 <UART_SetConfig+0xfa>
 8012188:	2280      	movs	r2, #128	; 0x80
 801218a:	0292      	lsls	r2, r2, #10
 801218c:	4293      	cmp	r3, r2
 801218e:	d100      	bne.n	8012192 <UART_SetConfig+0xd6>
 8012190:	e08c      	b.n	80122ac <UART_SetConfig+0x1f0>
 8012192:	22c0      	movs	r2, #192	; 0xc0
 8012194:	0292      	lsls	r2, r2, #10
 8012196:	4293      	cmp	r3, r2
 8012198:	d1e4      	bne.n	8012164 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801219a:	2380      	movs	r3, #128	; 0x80
 801219c:	021b      	lsls	r3, r3, #8
 801219e:	69e2      	ldr	r2, [r4, #28]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d038      	beq.n	8012216 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80121a4:	6861      	ldr	r1, [r4, #4]
 80121a6:	4855      	ldr	r0, [pc, #340]	; (80122fc <UART_SetConfig+0x240>)
 80121a8:	f7ed ffd2 	bl	8000150 <__udivsi3>
 80121ac:	0400      	lsls	r0, r0, #16
 80121ae:	0c00      	lsrs	r0, r0, #16
 80121b0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80121b2:	2000      	movs	r0, #0
        break;
 80121b4:	e017      	b.n	80121e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1d4      	bne.n	8012164 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121ba:	2380      	movs	r3, #128	; 0x80
 80121bc:	021b      	lsls	r3, r3, #8
 80121be:	69e2      	ldr	r2, [r4, #28]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d13d      	bne.n	8012240 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80121c4:	f7fe ff30 	bl	8011028 <HAL_RCC_GetPCLK1Freq>
 80121c8:	0040      	lsls	r0, r0, #1
 80121ca:	6861      	ldr	r1, [r4, #4]
 80121cc:	f7ed ffc0 	bl	8000150 <__udivsi3>
 80121d0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80121d2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80121d4:	220f      	movs	r2, #15
 80121d6:	0019      	movs	r1, r3
 80121d8:	4391      	bics	r1, r2
 80121da:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80121dc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80121de:	071b      	lsls	r3, r3, #28
 80121e0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80121e2:	4313      	orrs	r3, r2
 80121e4:	60cb      	str	r3, [r1, #12]
}
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121e8:	4b43      	ldr	r3, [pc, #268]	; (80122f8 <UART_SetConfig+0x23c>)
 80121ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ec:	22c0      	movs	r2, #192	; 0xc0
 80121ee:	0312      	lsls	r2, r2, #12
 80121f0:	4013      	ands	r3, r2
 80121f2:	2280      	movs	r2, #128	; 0x80
 80121f4:	02d2      	lsls	r2, r2, #11
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d02d      	beq.n	8012256 <UART_SetConfig+0x19a>
 80121fa:	d913      	bls.n	8012224 <UART_SetConfig+0x168>
 80121fc:	2280      	movs	r2, #128	; 0x80
 80121fe:	0312      	lsls	r2, r2, #12
 8012200:	4293      	cmp	r3, r2
 8012202:	d036      	beq.n	8012272 <UART_SetConfig+0x1b6>
 8012204:	22c0      	movs	r2, #192	; 0xc0
 8012206:	0312      	lsls	r2, r2, #12
 8012208:	4293      	cmp	r3, r2
 801220a:	d1ab      	bne.n	8012164 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801220c:	2380      	movs	r3, #128	; 0x80
 801220e:	021b      	lsls	r3, r3, #8
 8012210:	69e2      	ldr	r2, [r4, #28]
 8012212:	429a      	cmp	r2, r3
 8012214:	d1c6      	bne.n	80121a4 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012216:	6861      	ldr	r1, [r4, #4]
 8012218:	4839      	ldr	r0, [pc, #228]	; (8012300 <UART_SetConfig+0x244>)
 801221a:	f7ed ff99 	bl	8000150 <__udivsi3>
 801221e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012220:	2000      	movs	r0, #0
        break;
 8012222:	e7d7      	b.n	80121d4 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012224:	2b00      	cmp	r3, #0
 8012226:	d0c8      	beq.n	80121ba <UART_SetConfig+0xfe>
 8012228:	e79c      	b.n	8012164 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 801222a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801222c:	2300      	movs	r3, #0
 801222e:	e7d1      	b.n	80121d4 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8012230:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012232:	2300      	movs	r3, #0
 8012234:	e7ce      	b.n	80121d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012236:	2380      	movs	r3, #128	; 0x80
 8012238:	021b      	lsls	r3, r3, #8
 801223a:	69e2      	ldr	r2, [r4, #28]
 801223c:	429a      	cmp	r2, r3
 801223e:	d0c1      	beq.n	80121c4 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012240:	f7fe fef2 	bl	8011028 <HAL_RCC_GetPCLK1Freq>
 8012244:	6825      	ldr	r5, [r4, #0]
 8012246:	6861      	ldr	r1, [r4, #4]
 8012248:	f7ed ff82 	bl	8000150 <__udivsi3>
 801224c:	0400      	lsls	r0, r0, #16
 801224e:	0c00      	lsrs	r0, r0, #16
 8012250:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012252:	2000      	movs	r0, #0
  return ret;
 8012254:	e7c7      	b.n	80121e6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012256:	2380      	movs	r3, #128	; 0x80
 8012258:	021b      	lsls	r3, r3, #8
 801225a:	69e2      	ldr	r2, [r4, #28]
 801225c:	429a      	cmp	r2, r3
 801225e:	d11a      	bne.n	8012296 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012260:	f7fe fe7e 	bl	8010f60 <HAL_RCC_GetSysClockFreq>
 8012264:	0040      	lsls	r0, r0, #1
 8012266:	6861      	ldr	r1, [r4, #4]
 8012268:	f7ed ff72 	bl	8000150 <__udivsi3>
 801226c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801226e:	2000      	movs	r0, #0
        break;
 8012270:	e7b0      	b.n	80121d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012272:	2380      	movs	r3, #128	; 0x80
 8012274:	021b      	lsls	r3, r3, #8
 8012276:	69e2      	ldr	r2, [r4, #28]
 8012278:	429a      	cmp	r2, r3
 801227a:	d11c      	bne.n	80122b6 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801227c:	6861      	ldr	r1, [r4, #4]
 801227e:	2080      	movs	r0, #128	; 0x80
 8012280:	0240      	lsls	r0, r0, #9
 8012282:	f7ed ff65 	bl	8000150 <__udivsi3>
 8012286:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012288:	2000      	movs	r0, #0
        break;
 801228a:	e7a3      	b.n	80121d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801228c:	2380      	movs	r3, #128	; 0x80
 801228e:	021b      	lsls	r3, r3, #8
 8012290:	69e2      	ldr	r2, [r4, #28]
 8012292:	429a      	cmp	r2, r3
 8012294:	d0e4      	beq.n	8012260 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012296:	f7fe fe63 	bl	8010f60 <HAL_RCC_GetSysClockFreq>
 801229a:	6825      	ldr	r5, [r4, #0]
 801229c:	6861      	ldr	r1, [r4, #4]
 801229e:	f7ed ff57 	bl	8000150 <__udivsi3>
 80122a2:	0400      	lsls	r0, r0, #16
 80122a4:	0c00      	lsrs	r0, r0, #16
 80122a6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80122a8:	2000      	movs	r0, #0
        break;
 80122aa:	e79c      	b.n	80121e6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122ac:	2380      	movs	r3, #128	; 0x80
 80122ae:	021b      	lsls	r3, r3, #8
 80122b0:	69e2      	ldr	r2, [r4, #28]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d0e2      	beq.n	801227c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80122b6:	6861      	ldr	r1, [r4, #4]
 80122b8:	2080      	movs	r0, #128	; 0x80
 80122ba:	0200      	lsls	r0, r0, #8
 80122bc:	f7ed ff48 	bl	8000150 <__udivsi3>
 80122c0:	0400      	lsls	r0, r0, #16
 80122c2:	0c00      	lsrs	r0, r0, #16
 80122c4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80122c6:	2000      	movs	r0, #0
        break;
 80122c8:	e78d      	b.n	80121e6 <UART_SetConfig+0x12a>
 80122ca:	46c0      	nop			; (mov r8, r8)
 80122cc:	efff69f3 	.word	0xefff69f3
 80122d0:	ffffcfff 	.word	0xffffcfff
 80122d4:	fffff4ff 	.word	0xfffff4ff
 80122d8:	40013800 	.word	0x40013800
 80122dc:	40004400 	.word	0x40004400
 80122e0:	40004800 	.word	0x40004800
 80122e4:	40004c00 	.word	0x40004c00
 80122e8:	40005000 	.word	0x40005000
 80122ec:	40011400 	.word	0x40011400
 80122f0:	40011800 	.word	0x40011800
 80122f4:	40011c00 	.word	0x40011c00
 80122f8:	40021000 	.word	0x40021000
 80122fc:	007a1200 	.word	0x007a1200
 8012300:	00f42400 	.word	0x00f42400

08012304 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012304:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012306:	07db      	lsls	r3, r3, #31
 8012308:	d506      	bpl.n	8012318 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801230a:	6802      	ldr	r2, [r0, #0]
 801230c:	6853      	ldr	r3, [r2, #4]
 801230e:	492c      	ldr	r1, [pc, #176]	; (80123c0 <UART_AdvFeatureConfig+0xbc>)
 8012310:	400b      	ands	r3, r1
 8012312:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012314:	430b      	orrs	r3, r1
 8012316:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801231a:	079b      	lsls	r3, r3, #30
 801231c:	d506      	bpl.n	801232c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801231e:	6802      	ldr	r2, [r0, #0]
 8012320:	6853      	ldr	r3, [r2, #4]
 8012322:	4928      	ldr	r1, [pc, #160]	; (80123c4 <UART_AdvFeatureConfig+0xc0>)
 8012324:	400b      	ands	r3, r1
 8012326:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012328:	430b      	orrs	r3, r1
 801232a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801232c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801232e:	075b      	lsls	r3, r3, #29
 8012330:	d506      	bpl.n	8012340 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012332:	6802      	ldr	r2, [r0, #0]
 8012334:	6853      	ldr	r3, [r2, #4]
 8012336:	4924      	ldr	r1, [pc, #144]	; (80123c8 <UART_AdvFeatureConfig+0xc4>)
 8012338:	400b      	ands	r3, r1
 801233a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801233c:	430b      	orrs	r3, r1
 801233e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012340:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012342:	071b      	lsls	r3, r3, #28
 8012344:	d506      	bpl.n	8012354 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012346:	6802      	ldr	r2, [r0, #0]
 8012348:	6853      	ldr	r3, [r2, #4]
 801234a:	4920      	ldr	r1, [pc, #128]	; (80123cc <UART_AdvFeatureConfig+0xc8>)
 801234c:	400b      	ands	r3, r1
 801234e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012350:	430b      	orrs	r3, r1
 8012352:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012354:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012356:	06db      	lsls	r3, r3, #27
 8012358:	d506      	bpl.n	8012368 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801235a:	6802      	ldr	r2, [r0, #0]
 801235c:	6893      	ldr	r3, [r2, #8]
 801235e:	491c      	ldr	r1, [pc, #112]	; (80123d0 <UART_AdvFeatureConfig+0xcc>)
 8012360:	400b      	ands	r3, r1
 8012362:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012364:	430b      	orrs	r3, r1
 8012366:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801236a:	069b      	lsls	r3, r3, #26
 801236c:	d506      	bpl.n	801237c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801236e:	6802      	ldr	r2, [r0, #0]
 8012370:	6893      	ldr	r3, [r2, #8]
 8012372:	4918      	ldr	r1, [pc, #96]	; (80123d4 <UART_AdvFeatureConfig+0xd0>)
 8012374:	400b      	ands	r3, r1
 8012376:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012378:	430b      	orrs	r3, r1
 801237a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801237c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801237e:	065b      	lsls	r3, r3, #25
 8012380:	d50b      	bpl.n	801239a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012382:	6802      	ldr	r2, [r0, #0]
 8012384:	6853      	ldr	r3, [r2, #4]
 8012386:	4914      	ldr	r1, [pc, #80]	; (80123d8 <UART_AdvFeatureConfig+0xd4>)
 8012388:	400b      	ands	r3, r1
 801238a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801238c:	430b      	orrs	r3, r1
 801238e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012390:	2380      	movs	r3, #128	; 0x80
 8012392:	035b      	lsls	r3, r3, #13
 8012394:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012396:	429a      	cmp	r2, r3
 8012398:	d00a      	beq.n	80123b0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801239a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801239c:	061b      	lsls	r3, r3, #24
 801239e:	d506      	bpl.n	80123ae <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80123a0:	6802      	ldr	r2, [r0, #0]
 80123a2:	6853      	ldr	r3, [r2, #4]
 80123a4:	490d      	ldr	r1, [pc, #52]	; (80123dc <UART_AdvFeatureConfig+0xd8>)
 80123a6:	400b      	ands	r3, r1
 80123a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80123aa:	430b      	orrs	r3, r1
 80123ac:	6053      	str	r3, [r2, #4]
}
 80123ae:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80123b0:	6802      	ldr	r2, [r0, #0]
 80123b2:	6853      	ldr	r3, [r2, #4]
 80123b4:	490a      	ldr	r1, [pc, #40]	; (80123e0 <UART_AdvFeatureConfig+0xdc>)
 80123b6:	400b      	ands	r3, r1
 80123b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80123ba:	430b      	orrs	r3, r1
 80123bc:	6053      	str	r3, [r2, #4]
 80123be:	e7ec      	b.n	801239a <UART_AdvFeatureConfig+0x96>
 80123c0:	fffdffff 	.word	0xfffdffff
 80123c4:	fffeffff 	.word	0xfffeffff
 80123c8:	fffbffff 	.word	0xfffbffff
 80123cc:	ffff7fff 	.word	0xffff7fff
 80123d0:	ffffefff 	.word	0xffffefff
 80123d4:	ffffdfff 	.word	0xffffdfff
 80123d8:	ffefffff 	.word	0xffefffff
 80123dc:	fff7ffff 	.word	0xfff7ffff
 80123e0:	ff9fffff 	.word	0xff9fffff

080123e4 <UART_WaitOnFlagUntilTimeout>:
{
 80123e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123e6:	46c6      	mov	lr, r8
 80123e8:	b500      	push	{lr}
 80123ea:	0006      	movs	r6, r0
 80123ec:	000c      	movs	r4, r1
 80123ee:	0017      	movs	r7, r2
 80123f0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80123f2:	f7fd f8d1 	bl	800f598 <HAL_GetTick>
 80123f6:	4680      	mov	r8, r0
  if(Status == RESET)
 80123f8:	2f00      	cmp	r7, #0
 80123fa:	d029      	beq.n	8012450 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80123fc:	6832      	ldr	r2, [r6, #0]
 80123fe:	69d3      	ldr	r3, [r2, #28]
 8012400:	4023      	ands	r3, r4
 8012402:	42a3      	cmp	r3, r4
 8012404:	d152      	bne.n	80124ac <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012406:	1c6b      	adds	r3, r5, #1
 8012408:	d0f9      	beq.n	80123fe <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801240a:	2d00      	cmp	r5, #0
 801240c:	d005      	beq.n	801241a <UART_WaitOnFlagUntilTimeout+0x36>
 801240e:	f7fd f8c3 	bl	800f598 <HAL_GetTick>
 8012412:	4643      	mov	r3, r8
 8012414:	1ac0      	subs	r0, r0, r3
 8012416:	42a8      	cmp	r0, r5
 8012418:	d9f0      	bls.n	80123fc <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801241a:	6832      	ldr	r2, [r6, #0]
 801241c:	6813      	ldr	r3, [r2, #0]
 801241e:	2180      	movs	r1, #128	; 0x80
 8012420:	438b      	bics	r3, r1
 8012422:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012424:	6832      	ldr	r2, [r6, #0]
 8012426:	6813      	ldr	r3, [r2, #0]
 8012428:	3960      	subs	r1, #96	; 0x60
 801242a:	438b      	bics	r3, r1
 801242c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801242e:	6832      	ldr	r2, [r6, #0]
 8012430:	6813      	ldr	r3, [r2, #0]
 8012432:	491f      	ldr	r1, [pc, #124]	; (80124b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012434:	400b      	ands	r3, r1
 8012436:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012438:	6831      	ldr	r1, [r6, #0]
 801243a:	688b      	ldr	r3, [r1, #8]
 801243c:	2201      	movs	r2, #1
 801243e:	4393      	bics	r3, r2
 8012440:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012442:	2369      	movs	r3, #105	; 0x69
 8012444:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012446:	3b01      	subs	r3, #1
 8012448:	2200      	movs	r2, #0
 801244a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801244c:	2003      	movs	r0, #3
 801244e:	e02a      	b.n	80124a6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012450:	6832      	ldr	r2, [r6, #0]
 8012452:	69d3      	ldr	r3, [r2, #28]
 8012454:	4023      	ands	r3, r4
 8012456:	42a3      	cmp	r3, r4
 8012458:	d024      	beq.n	80124a4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801245a:	1c6b      	adds	r3, r5, #1
 801245c:	d0f9      	beq.n	8012452 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801245e:	2d00      	cmp	r5, #0
 8012460:	d005      	beq.n	801246e <UART_WaitOnFlagUntilTimeout+0x8a>
 8012462:	f7fd f899 	bl	800f598 <HAL_GetTick>
 8012466:	4643      	mov	r3, r8
 8012468:	1ac0      	subs	r0, r0, r3
 801246a:	42a8      	cmp	r0, r5
 801246c:	d9f0      	bls.n	8012450 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801246e:	6832      	ldr	r2, [r6, #0]
 8012470:	6813      	ldr	r3, [r2, #0]
 8012472:	2180      	movs	r1, #128	; 0x80
 8012474:	438b      	bics	r3, r1
 8012476:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012478:	6832      	ldr	r2, [r6, #0]
 801247a:	6813      	ldr	r3, [r2, #0]
 801247c:	3960      	subs	r1, #96	; 0x60
 801247e:	438b      	bics	r3, r1
 8012480:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012482:	6832      	ldr	r2, [r6, #0]
 8012484:	6813      	ldr	r3, [r2, #0]
 8012486:	490a      	ldr	r1, [pc, #40]	; (80124b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012488:	400b      	ands	r3, r1
 801248a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801248c:	6831      	ldr	r1, [r6, #0]
 801248e:	688b      	ldr	r3, [r1, #8]
 8012490:	2201      	movs	r2, #1
 8012492:	4393      	bics	r3, r2
 8012494:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012496:	2369      	movs	r3, #105	; 0x69
 8012498:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801249a:	3b01      	subs	r3, #1
 801249c:	2200      	movs	r2, #0
 801249e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80124a0:	2003      	movs	r0, #3
 80124a2:	e000      	b.n	80124a6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80124a4:	2000      	movs	r0, #0
}
 80124a6:	bc04      	pop	{r2}
 80124a8:	4690      	mov	r8, r2
 80124aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80124ac:	2000      	movs	r0, #0
 80124ae:	e7fa      	b.n	80124a6 <UART_WaitOnFlagUntilTimeout+0xc2>
 80124b0:	fffffeff 	.word	0xfffffeff

080124b4 <HAL_UART_Transmit>:
{
 80124b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124b6:	b083      	sub	sp, #12
 80124b8:	0004      	movs	r4, r0
 80124ba:	000e      	movs	r6, r1
 80124bc:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80124be:	2369      	movs	r3, #105	; 0x69
 80124c0:	5cc3      	ldrb	r3, [r0, r3]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d004      	beq.n	80124d0 <HAL_UART_Transmit+0x1c>
 80124c6:	2369      	movs	r3, #105	; 0x69
 80124c8:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80124ca:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80124cc:	2b22      	cmp	r3, #34	; 0x22
 80124ce:	d153      	bne.n	8012578 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80124d0:	2e00      	cmp	r6, #0
 80124d2:	d050      	beq.n	8012576 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80124d4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80124d6:	2a00      	cmp	r2, #0
 80124d8:	d04e      	beq.n	8012578 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80124da:	2368      	movs	r3, #104	; 0x68
 80124dc:	5ce3      	ldrb	r3, [r4, r3]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d04c      	beq.n	801257c <HAL_UART_Transmit+0xc8>
 80124e2:	2368      	movs	r3, #104	; 0x68
 80124e4:	2101      	movs	r1, #1
 80124e6:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124e8:	2300      	movs	r3, #0
 80124ea:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80124ec:	3369      	adds	r3, #105	; 0x69
 80124ee:	5ce3      	ldrb	r3, [r4, r3]
 80124f0:	2b22      	cmp	r3, #34	; 0x22
 80124f2:	d008      	beq.n	8012506 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80124f4:	2369      	movs	r3, #105	; 0x69
 80124f6:	2112      	movs	r1, #18
 80124f8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80124fa:	2350      	movs	r3, #80	; 0x50
 80124fc:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80124fe:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012500:	2580      	movs	r5, #128	; 0x80
 8012502:	016d      	lsls	r5, r5, #5
 8012504:	e00a      	b.n	801251c <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012506:	3347      	adds	r3, #71	; 0x47
 8012508:	3131      	adds	r1, #49	; 0x31
 801250a:	54e1      	strb	r1, [r4, r3]
 801250c:	e7f5      	b.n	80124fa <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801250e:	7833      	ldrb	r3, [r6, #0]
 8012510:	6822      	ldr	r2, [r4, #0]
 8012512:	8513      	strh	r3, [r2, #40]	; 0x28
 8012514:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8012516:	5be2      	ldrh	r2, [r4, r7]
 8012518:	2a00      	cmp	r2, #0
 801251a:	d016      	beq.n	801254a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 801251c:	3a01      	subs	r2, #1
 801251e:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	2200      	movs	r2, #0
 8012524:	2180      	movs	r1, #128	; 0x80
 8012526:	0020      	movs	r0, r4
 8012528:	f7ff ff5c 	bl	80123e4 <UART_WaitOnFlagUntilTimeout>
 801252c:	2800      	cmp	r0, #0
 801252e:	d127      	bne.n	8012580 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012530:	68a3      	ldr	r3, [r4, #8]
 8012532:	42ab      	cmp	r3, r5
 8012534:	d1eb      	bne.n	801250e <HAL_UART_Transmit+0x5a>
 8012536:	6923      	ldr	r3, [r4, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d1e8      	bne.n	801250e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801253c:	8833      	ldrh	r3, [r6, #0]
 801253e:	05db      	lsls	r3, r3, #23
 8012540:	0ddb      	lsrs	r3, r3, #23
 8012542:	6822      	ldr	r2, [r4, #0]
 8012544:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012546:	3602      	adds	r6, #2
 8012548:	e7e5      	b.n	8012516 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801254a:	9b01      	ldr	r3, [sp, #4]
 801254c:	2140      	movs	r1, #64	; 0x40
 801254e:	0020      	movs	r0, r4
 8012550:	f7ff ff48 	bl	80123e4 <UART_WaitOnFlagUntilTimeout>
 8012554:	2800      	cmp	r0, #0
 8012556:	d115      	bne.n	8012584 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012558:	2369      	movs	r3, #105	; 0x69
 801255a:	5ce3      	ldrb	r3, [r4, r3]
 801255c:	2b32      	cmp	r3, #50	; 0x32
 801255e:	d006      	beq.n	801256e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012560:	2369      	movs	r3, #105	; 0x69
 8012562:	2201      	movs	r2, #1
 8012564:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012566:	2368      	movs	r3, #104	; 0x68
 8012568:	2200      	movs	r2, #0
 801256a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801256c:	e004      	b.n	8012578 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801256e:	3337      	adds	r3, #55	; 0x37
 8012570:	2222      	movs	r2, #34	; 0x22
 8012572:	54e2      	strb	r2, [r4, r3]
 8012574:	e7f7      	b.n	8012566 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8012576:	2001      	movs	r0, #1
}
 8012578:	b003      	add	sp, #12
 801257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 801257c:	2002      	movs	r0, #2
 801257e:	e7fb      	b.n	8012578 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012580:	2003      	movs	r0, #3
 8012582:	e7f9      	b.n	8012578 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012584:	2003      	movs	r0, #3
 8012586:	e7f7      	b.n	8012578 <HAL_UART_Transmit+0xc4>

08012588 <UART_CheckIdleState>:
{
 8012588:	b510      	push	{r4, lr}
 801258a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801258c:	2300      	movs	r3, #0
 801258e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012590:	6803      	ldr	r3, [r0, #0]
 8012592:	4a18      	ldr	r2, [pc, #96]	; (80125f4 <UART_CheckIdleState+0x6c>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d005      	beq.n	80125a4 <UART_CheckIdleState+0x1c>
 8012598:	4a17      	ldr	r2, [pc, #92]	; (80125f8 <UART_CheckIdleState+0x70>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d002      	beq.n	80125a4 <UART_CheckIdleState+0x1c>
 801259e:	4a17      	ldr	r2, [pc, #92]	; (80125fc <UART_CheckIdleState+0x74>)
 80125a0:	4293      	cmp	r3, r2
 80125a2:	d106      	bne.n	80125b2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	071b      	lsls	r3, r3, #28
 80125a8:	d40b      	bmi.n	80125c2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	075b      	lsls	r3, r3, #29
 80125b0:	d413      	bmi.n	80125da <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80125b2:	2369      	movs	r3, #105	; 0x69
 80125b4:	2201      	movs	r2, #1
 80125b6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80125b8:	3b01      	subs	r3, #1
 80125ba:	2200      	movs	r2, #0
 80125bc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80125be:	2000      	movs	r0, #0
}
 80125c0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80125c2:	23fa      	movs	r3, #250	; 0xfa
 80125c4:	2180      	movs	r1, #128	; 0x80
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	2200      	movs	r2, #0
 80125ca:	0389      	lsls	r1, r1, #14
 80125cc:	0020      	movs	r0, r4
 80125ce:	f7ff ff09 	bl	80123e4 <UART_WaitOnFlagUntilTimeout>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d0e9      	beq.n	80125aa <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80125d6:	2003      	movs	r0, #3
 80125d8:	e7f2      	b.n	80125c0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80125da:	23fa      	movs	r3, #250	; 0xfa
 80125dc:	2180      	movs	r1, #128	; 0x80
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	2200      	movs	r2, #0
 80125e2:	03c9      	lsls	r1, r1, #15
 80125e4:	0020      	movs	r0, r4
 80125e6:	f7ff fefd 	bl	80123e4 <UART_WaitOnFlagUntilTimeout>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d0e1      	beq.n	80125b2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80125ee:	2003      	movs	r0, #3
 80125f0:	e7e6      	b.n	80125c0 <UART_CheckIdleState+0x38>
 80125f2:	46c0      	nop			; (mov r8, r8)
 80125f4:	40013800 	.word	0x40013800
 80125f8:	40004400 	.word	0x40004400
 80125fc:	40004800 	.word	0x40004800

08012600 <HAL_UART_Init>:
{
 8012600:	b510      	push	{r4, lr}
 8012602:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012604:	d030      	beq.n	8012668 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012606:	2369      	movs	r3, #105	; 0x69
 8012608:	5cc3      	ldrb	r3, [r0, r3]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d022      	beq.n	8012654 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801260e:	2369      	movs	r3, #105	; 0x69
 8012610:	2202      	movs	r2, #2
 8012612:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012614:	6822      	ldr	r2, [r4, #0]
 8012616:	6813      	ldr	r3, [r2, #0]
 8012618:	2101      	movs	r1, #1
 801261a:	438b      	bics	r3, r1
 801261c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801261e:	0020      	movs	r0, r4
 8012620:	f7ff fd4c 	bl	80120bc <UART_SetConfig>
 8012624:	2801      	cmp	r0, #1
 8012626:	d014      	beq.n	8012652 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801262a:	2b00      	cmp	r3, #0
 801262c:	d118      	bne.n	8012660 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801262e:	6822      	ldr	r2, [r4, #0]
 8012630:	6853      	ldr	r3, [r2, #4]
 8012632:	490e      	ldr	r1, [pc, #56]	; (801266c <HAL_UART_Init+0x6c>)
 8012634:	400b      	ands	r3, r1
 8012636:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012638:	6822      	ldr	r2, [r4, #0]
 801263a:	6893      	ldr	r3, [r2, #8]
 801263c:	212a      	movs	r1, #42	; 0x2a
 801263e:	438b      	bics	r3, r1
 8012640:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012642:	6822      	ldr	r2, [r4, #0]
 8012644:	6813      	ldr	r3, [r2, #0]
 8012646:	3929      	subs	r1, #41	; 0x29
 8012648:	430b      	orrs	r3, r1
 801264a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801264c:	0020      	movs	r0, r4
 801264e:	f7ff ff9b 	bl	8012588 <UART_CheckIdleState>
}
 8012652:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012654:	3368      	adds	r3, #104	; 0x68
 8012656:	2200      	movs	r2, #0
 8012658:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801265a:	f7fa fd6b 	bl	800d134 <HAL_UART_MspInit>
 801265e:	e7d6      	b.n	801260e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012660:	0020      	movs	r0, r4
 8012662:	f7ff fe4f 	bl	8012304 <UART_AdvFeatureConfig>
 8012666:	e7e2      	b.n	801262e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012668:	2001      	movs	r0, #1
 801266a:	e7f2      	b.n	8012652 <HAL_UART_Init+0x52>
 801266c:	ffffb7ff 	.word	0xffffb7ff

08012670 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012670:	2369      	movs	r3, #105	; 0x69
 8012672:	5cc3      	ldrb	r3, [r0, r3]
 8012674:	2b12      	cmp	r3, #18
 8012676:	d004      	beq.n	8012682 <UART_Transmit_IT+0x12>
 8012678:	2369      	movs	r3, #105	; 0x69
 801267a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801267c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801267e:	2a32      	cmp	r2, #50	; 0x32
 8012680:	d113      	bne.n	80126aa <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012682:	2352      	movs	r3, #82	; 0x52
 8012684:	5ac3      	ldrh	r3, [r0, r3]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d011      	beq.n	80126ae <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801268a:	2380      	movs	r3, #128	; 0x80
 801268c:	015b      	lsls	r3, r3, #5
 801268e:	6882      	ldr	r2, [r0, #8]
 8012690:	429a      	cmp	r2, r3
 8012692:	d018      	beq.n	80126c6 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012694:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012696:	1c5a      	adds	r2, r3, #1
 8012698:	64c2      	str	r2, [r0, #76]	; 0x4c
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	6802      	ldr	r2, [r0, #0]
 801269e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80126a0:	2252      	movs	r2, #82	; 0x52
 80126a2:	5a83      	ldrh	r3, [r0, r2]
 80126a4:	3b01      	subs	r3, #1
 80126a6:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 80126a8:	2300      	movs	r3, #0
  }
}
 80126aa:	0018      	movs	r0, r3
 80126ac:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80126ae:	6802      	ldr	r2, [r0, #0]
 80126b0:	6813      	ldr	r3, [r2, #0]
 80126b2:	2180      	movs	r1, #128	; 0x80
 80126b4:	438b      	bics	r3, r1
 80126b6:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80126b8:	6802      	ldr	r2, [r0, #0]
 80126ba:	6813      	ldr	r3, [r2, #0]
 80126bc:	3940      	subs	r1, #64	; 0x40
 80126be:	430b      	orrs	r3, r1
 80126c0:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80126c2:	2300      	movs	r3, #0
 80126c4:	e7f1      	b.n	80126aa <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126c6:	6903      	ldr	r3, [r0, #16]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d1e3      	bne.n	8012694 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80126cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	05db      	lsls	r3, r3, #23
 80126d2:	0ddb      	lsrs	r3, r3, #23
 80126d4:	6802      	ldr	r2, [r0, #0]
 80126d6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80126d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80126da:	3302      	adds	r3, #2
 80126dc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80126de:	e7df      	b.n	80126a0 <UART_Transmit_IT+0x30>

080126e0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80126e0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80126e2:	6802      	ldr	r2, [r0, #0]
 80126e4:	6813      	ldr	r3, [r2, #0]
 80126e6:	2140      	movs	r1, #64	; 0x40
 80126e8:	438b      	bics	r3, r1
 80126ea:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80126ec:	2369      	movs	r3, #105	; 0x69
 80126ee:	5cc3      	ldrb	r3, [r0, r3]
 80126f0:	2b32      	cmp	r3, #50	; 0x32
 80126f2:	d00a      	beq.n	801270a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80126f4:	6801      	ldr	r1, [r0, #0]
 80126f6:	688b      	ldr	r3, [r1, #8]
 80126f8:	2201      	movs	r2, #1
 80126fa:	4393      	bics	r3, r2
 80126fc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80126fe:	2369      	movs	r3, #105	; 0x69
 8012700:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012702:	f7fa fc29 	bl	800cf58 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012706:	2000      	movs	r0, #0
 8012708:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801270a:	3337      	adds	r3, #55	; 0x37
 801270c:	2222      	movs	r2, #34	; 0x22
 801270e:	54c2      	strb	r2, [r0, r3]
 8012710:	e7f7      	b.n	8012702 <UART_EndTransmit_IT+0x22>
	...

08012714 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012714:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012716:	2369      	movs	r3, #105	; 0x69
 8012718:	5cc3      	ldrb	r3, [r0, r3]
 801271a:	2b22      	cmp	r3, #34	; 0x22
 801271c:	d004      	beq.n	8012728 <UART_Receive_IT+0x14>
 801271e:	2369      	movs	r3, #105	; 0x69
 8012720:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012722:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012724:	2b32      	cmp	r3, #50	; 0x32
 8012726:	d12d      	bne.n	8012784 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8012728:	235c      	movs	r3, #92	; 0x5c
 801272a:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801272c:	2280      	movs	r2, #128	; 0x80
 801272e:	0152      	lsls	r2, r2, #5
 8012730:	6883      	ldr	r3, [r0, #8]
 8012732:	4293      	cmp	r3, r2
 8012734:	d028      	beq.n	8012788 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012736:	6803      	ldr	r3, [r0, #0]
 8012738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801273a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801273c:	1c54      	adds	r4, r2, #1
 801273e:	6544      	str	r4, [r0, #84]	; 0x54
 8012740:	400b      	ands	r3, r1
 8012742:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012744:	225a      	movs	r2, #90	; 0x5a
 8012746:	5a83      	ldrh	r3, [r0, r2]
 8012748:	3b01      	subs	r3, #1
 801274a:	b29b      	uxth	r3, r3
 801274c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801274e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012750:	2b00      	cmp	r3, #0
 8012752:	d117      	bne.n	8012784 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012754:	6802      	ldr	r2, [r0, #0]
 8012756:	6813      	ldr	r3, [r2, #0]
 8012758:	2120      	movs	r1, #32
 801275a:	438b      	bics	r3, r1
 801275c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801275e:	2369      	movs	r3, #105	; 0x69
 8012760:	5cc3      	ldrb	r3, [r0, r3]
 8012762:	2b32      	cmp	r3, #50	; 0x32
 8012764:	d01c      	beq.n	80127a0 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012766:	6802      	ldr	r2, [r0, #0]
 8012768:	6813      	ldr	r3, [r2, #0]
 801276a:	490f      	ldr	r1, [pc, #60]	; (80127a8 <UART_Receive_IT+0x94>)
 801276c:	400b      	ands	r3, r1
 801276e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012770:	6801      	ldr	r1, [r0, #0]
 8012772:	688b      	ldr	r3, [r1, #8]
 8012774:	2201      	movs	r2, #1
 8012776:	4393      	bics	r3, r2
 8012778:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 801277a:	2369      	movs	r3, #105	; 0x69
 801277c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801277e:	f7fa fc29 	bl	800cfd4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012782:	2200      	movs	r2, #0
  }
}
 8012784:	0010      	movs	r0, r2
 8012786:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012788:	6903      	ldr	r3, [r0, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1d3      	bne.n	8012736 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801278e:	6803      	ldr	r3, [r0, #0]
 8012790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012792:	400b      	ands	r3, r1
 8012794:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012796:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012798:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801279a:	3302      	adds	r3, #2
 801279c:	6543      	str	r3, [r0, #84]	; 0x54
 801279e:	e7d1      	b.n	8012744 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80127a0:	3337      	adds	r3, #55	; 0x37
 80127a2:	2212      	movs	r2, #18
 80127a4:	54c2      	strb	r2, [r0, r3]
 80127a6:	e7ea      	b.n	801277e <UART_Receive_IT+0x6a>
 80127a8:	fffffeff 	.word	0xfffffeff

080127ac <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80127ac:	4770      	bx	lr

080127ae <HAL_UART_IRQHandler>:
{
 80127ae:	b510      	push	{r4, lr}
 80127b0:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80127b2:	6803      	ldr	r3, [r0, #0]
 80127b4:	69da      	ldr	r2, [r3, #28]
 80127b6:	07d2      	lsls	r2, r2, #31
 80127b8:	d509      	bpl.n	80127ce <HAL_UART_IRQHandler+0x20>
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	05d2      	lsls	r2, r2, #23
 80127be:	d506      	bpl.n	80127ce <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80127c0:	2201      	movs	r2, #1
 80127c2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80127c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80127c6:	4313      	orrs	r3, r2
 80127c8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80127ca:	2369      	movs	r3, #105	; 0x69
 80127cc:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	69da      	ldr	r2, [r3, #28]
 80127d2:	0792      	lsls	r2, r2, #30
 80127d4:	d50b      	bpl.n	80127ee <HAL_UART_IRQHandler+0x40>
 80127d6:	689a      	ldr	r2, [r3, #8]
 80127d8:	07d2      	lsls	r2, r2, #31
 80127da:	d508      	bpl.n	80127ee <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80127dc:	2202      	movs	r2, #2
 80127de:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80127e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80127e2:	3202      	adds	r2, #2
 80127e4:	4313      	orrs	r3, r2
 80127e6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80127e8:	2369      	movs	r3, #105	; 0x69
 80127ea:	3a03      	subs	r2, #3
 80127ec:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	69da      	ldr	r2, [r3, #28]
 80127f2:	0752      	lsls	r2, r2, #29
 80127f4:	d50b      	bpl.n	801280e <HAL_UART_IRQHandler+0x60>
 80127f6:	689a      	ldr	r2, [r3, #8]
 80127f8:	07d2      	lsls	r2, r2, #31
 80127fa:	d508      	bpl.n	801280e <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80127fc:	2204      	movs	r2, #4
 80127fe:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012800:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012802:	3a02      	subs	r2, #2
 8012804:	4313      	orrs	r3, r2
 8012806:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012808:	2369      	movs	r3, #105	; 0x69
 801280a:	3a01      	subs	r2, #1
 801280c:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	69da      	ldr	r2, [r3, #28]
 8012812:	0712      	lsls	r2, r2, #28
 8012814:	d50a      	bpl.n	801282c <HAL_UART_IRQHandler+0x7e>
 8012816:	689a      	ldr	r2, [r3, #8]
 8012818:	07d2      	lsls	r2, r2, #31
 801281a:	d507      	bpl.n	801282c <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 801281c:	2208      	movs	r2, #8
 801281e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012820:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012822:	4313      	orrs	r3, r2
 8012824:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012826:	2369      	movs	r3, #105	; 0x69
 8012828:	3a07      	subs	r2, #7
 801282a:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 801282c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801282e:	2b00      	cmp	r3, #0
 8012830:	d11c      	bne.n	801286c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	69da      	ldr	r2, [r3, #28]
 8012836:	02d2      	lsls	r2, r2, #11
 8012838:	d502      	bpl.n	8012840 <HAL_UART_IRQHandler+0x92>
 801283a:	689a      	ldr	r2, [r3, #8]
 801283c:	0252      	lsls	r2, r2, #9
 801283e:	d419      	bmi.n	8012874 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	69da      	ldr	r2, [r3, #28]
 8012844:	0692      	lsls	r2, r2, #26
 8012846:	d502      	bpl.n	801284e <HAL_UART_IRQHandler+0xa0>
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	069b      	lsls	r3, r3, #26
 801284c:	d41c      	bmi.n	8012888 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	69da      	ldr	r2, [r3, #28]
 8012852:	0612      	lsls	r2, r2, #24
 8012854:	d502      	bpl.n	801285c <HAL_UART_IRQHandler+0xae>
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	061b      	lsls	r3, r3, #24
 801285a:	d41e      	bmi.n	801289a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	69da      	ldr	r2, [r3, #28]
 8012860:	0652      	lsls	r2, r2, #25
 8012862:	d502      	bpl.n	801286a <HAL_UART_IRQHandler+0xbc>
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	065b      	lsls	r3, r3, #25
 8012868:	d41b      	bmi.n	80128a2 <HAL_UART_IRQHandler+0xf4>
}
 801286a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 801286c:	0020      	movs	r0, r4
 801286e:	f7fa fb8b 	bl	800cf88 <HAL_UART_ErrorCallback>
 8012872:	e7de      	b.n	8012832 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012874:	2280      	movs	r2, #128	; 0x80
 8012876:	0352      	lsls	r2, r2, #13
 8012878:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801287a:	2369      	movs	r3, #105	; 0x69
 801287c:	2201      	movs	r2, #1
 801287e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012880:	0020      	movs	r0, r4
 8012882:	f7ff ff93 	bl	80127ac <HAL_UARTEx_WakeupCallback>
 8012886:	e7db      	b.n	8012840 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012888:	0020      	movs	r0, r4
 801288a:	f7ff ff43 	bl	8012714 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801288e:	6822      	ldr	r2, [r4, #0]
 8012890:	6993      	ldr	r3, [r2, #24]
 8012892:	2108      	movs	r1, #8
 8012894:	430b      	orrs	r3, r1
 8012896:	6193      	str	r3, [r2, #24]
 8012898:	e7d9      	b.n	801284e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801289a:	0020      	movs	r0, r4
 801289c:	f7ff fee8 	bl	8012670 <UART_Transmit_IT>
 80128a0:	e7dc      	b.n	801285c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80128a2:	0020      	movs	r0, r4
 80128a4:	f7ff ff1c 	bl	80126e0 <UART_EndTransmit_IT>
}
 80128a8:	e7df      	b.n	801286a <HAL_UART_IRQHandler+0xbc>

080128aa <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 80128aa:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80128ac:	f7fc fe5c 	bl	800f568 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80128b0:	f7f1 fece 	bl	8004650 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 80128b4:	f7f6 fa1e 	bl	8008cf4 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80128b8:	f7f8 fda8 	bl	800b40c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80128bc:	f7fa fe36 	bl	800d52c <osKernelStart>
 80128c0:	e7fe      	b.n	80128c0 <main+0x16>

080128c2 <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 80128c2:	e7fe      	b.n	80128c2 <UserTask>

080128c4 <atof>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	2100      	movs	r1, #0
 80128c8:	f001 fb3e 	bl	8013f48 <strtod>
 80128cc:	bd10      	pop	{r4, pc}

080128ce <atoi>:
 80128ce:	b510      	push	{r4, lr}
 80128d0:	220a      	movs	r2, #10
 80128d2:	2100      	movs	r1, #0
 80128d4:	f001 fc04 	bl	80140e0 <strtol>
 80128d8:	bd10      	pop	{r4, pc}

080128da <atol>:
 80128da:	b510      	push	{r4, lr}
 80128dc:	220a      	movs	r2, #10
 80128de:	2100      	movs	r1, #0
 80128e0:	f001 fbfe 	bl	80140e0 <strtol>
 80128e4:	bd10      	pop	{r4, pc}
	...

080128e8 <__libc_init_array>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	2600      	movs	r6, #0
 80128ec:	4d0c      	ldr	r5, [pc, #48]	; (8012920 <__libc_init_array+0x38>)
 80128ee:	4c0d      	ldr	r4, [pc, #52]	; (8012924 <__libc_init_array+0x3c>)
 80128f0:	1b64      	subs	r4, r4, r5
 80128f2:	10a4      	asrs	r4, r4, #2
 80128f4:	42a6      	cmp	r6, r4
 80128f6:	d109      	bne.n	801290c <__libc_init_array+0x24>
 80128f8:	2600      	movs	r6, #0
 80128fa:	f004 fe6d 	bl	80175d8 <_init>
 80128fe:	4d0a      	ldr	r5, [pc, #40]	; (8012928 <__libc_init_array+0x40>)
 8012900:	4c0a      	ldr	r4, [pc, #40]	; (801292c <__libc_init_array+0x44>)
 8012902:	1b64      	subs	r4, r4, r5
 8012904:	10a4      	asrs	r4, r4, #2
 8012906:	42a6      	cmp	r6, r4
 8012908:	d105      	bne.n	8012916 <__libc_init_array+0x2e>
 801290a:	bd70      	pop	{r4, r5, r6, pc}
 801290c:	00b3      	lsls	r3, r6, #2
 801290e:	58eb      	ldr	r3, [r5, r3]
 8012910:	4798      	blx	r3
 8012912:	3601      	adds	r6, #1
 8012914:	e7ee      	b.n	80128f4 <__libc_init_array+0xc>
 8012916:	00b3      	lsls	r3, r6, #2
 8012918:	58eb      	ldr	r3, [r5, r3]
 801291a:	4798      	blx	r3
 801291c:	3601      	adds	r6, #1
 801291e:	e7f2      	b.n	8012906 <__libc_init_array+0x1e>
 8012920:	0801a814 	.word	0x0801a814
 8012924:	0801a814 	.word	0x0801a814
 8012928:	0801a814 	.word	0x0801a814
 801292c:	0801a81c 	.word	0x0801a81c

08012930 <__locale_ctype_ptr_l>:
 8012930:	30ec      	adds	r0, #236	; 0xec
 8012932:	6800      	ldr	r0, [r0, #0]
 8012934:	4770      	bx	lr
	...

08012938 <__locale_ctype_ptr>:
 8012938:	4b04      	ldr	r3, [pc, #16]	; (801294c <__locale_ctype_ptr+0x14>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801293e:	2b00      	cmp	r3, #0
 8012940:	d100      	bne.n	8012944 <__locale_ctype_ptr+0xc>
 8012942:	4b03      	ldr	r3, [pc, #12]	; (8012950 <__locale_ctype_ptr+0x18>)
 8012944:	33ec      	adds	r3, #236	; 0xec
 8012946:	6818      	ldr	r0, [r3, #0]
 8012948:	4770      	bx	lr
 801294a:	46c0      	nop			; (mov r8, r8)
 801294c:	20000064 	.word	0x20000064
 8012950:	20000490 	.word	0x20000490

08012954 <malloc>:
 8012954:	b510      	push	{r4, lr}
 8012956:	4b03      	ldr	r3, [pc, #12]	; (8012964 <malloc+0x10>)
 8012958:	0001      	movs	r1, r0
 801295a:	6818      	ldr	r0, [r3, #0]
 801295c:	f000 f80e 	bl	801297c <_malloc_r>
 8012960:	bd10      	pop	{r4, pc}
 8012962:	46c0      	nop			; (mov r8, r8)
 8012964:	20000064 	.word	0x20000064

08012968 <free>:
 8012968:	b510      	push	{r4, lr}
 801296a:	4b03      	ldr	r3, [pc, #12]	; (8012978 <free+0x10>)
 801296c:	0001      	movs	r1, r0
 801296e:	6818      	ldr	r0, [r3, #0]
 8012970:	f003 fd10 	bl	8016394 <_free_r>
 8012974:	bd10      	pop	{r4, pc}
 8012976:	46c0      	nop			; (mov r8, r8)
 8012978:	20000064 	.word	0x20000064

0801297c <_malloc_r>:
 801297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801297e:	000d      	movs	r5, r1
 8012980:	b085      	sub	sp, #20
 8012982:	350b      	adds	r5, #11
 8012984:	9001      	str	r0, [sp, #4]
 8012986:	2d16      	cmp	r5, #22
 8012988:	d908      	bls.n	801299c <_malloc_r+0x20>
 801298a:	2307      	movs	r3, #7
 801298c:	439d      	bics	r5, r3
 801298e:	d506      	bpl.n	801299e <_malloc_r+0x22>
 8012990:	230c      	movs	r3, #12
 8012992:	9a01      	ldr	r2, [sp, #4]
 8012994:	6013      	str	r3, [r2, #0]
 8012996:	2000      	movs	r0, #0
 8012998:	b005      	add	sp, #20
 801299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801299c:	2510      	movs	r5, #16
 801299e:	428d      	cmp	r5, r1
 80129a0:	d3f6      	bcc.n	8012990 <_malloc_r+0x14>
 80129a2:	9801      	ldr	r0, [sp, #4]
 80129a4:	f000 fa34 	bl	8012e10 <__malloc_lock>
 80129a8:	23f8      	movs	r3, #248	; 0xf8
 80129aa:	33ff      	adds	r3, #255	; 0xff
 80129ac:	4ac4      	ldr	r2, [pc, #784]	; (8012cc0 <_malloc_r+0x344>)
 80129ae:	429d      	cmp	r5, r3
 80129b0:	d820      	bhi.n	80129f4 <_malloc_r+0x78>
 80129b2:	0029      	movs	r1, r5
 80129b4:	3108      	adds	r1, #8
 80129b6:	1851      	adds	r1, r2, r1
 80129b8:	0008      	movs	r0, r1
 80129ba:	684c      	ldr	r4, [r1, #4]
 80129bc:	3808      	subs	r0, #8
 80129be:	08eb      	lsrs	r3, r5, #3
 80129c0:	4284      	cmp	r4, r0
 80129c2:	d104      	bne.n	80129ce <_malloc_r+0x52>
 80129c4:	68cc      	ldr	r4, [r1, #12]
 80129c6:	3302      	adds	r3, #2
 80129c8:	469c      	mov	ip, r3
 80129ca:	42a1      	cmp	r1, r4
 80129cc:	d02a      	beq.n	8012a24 <_malloc_r+0xa8>
 80129ce:	2303      	movs	r3, #3
 80129d0:	6862      	ldr	r2, [r4, #4]
 80129d2:	68a1      	ldr	r1, [r4, #8]
 80129d4:	439a      	bics	r2, r3
 80129d6:	0013      	movs	r3, r2
 80129d8:	68e2      	ldr	r2, [r4, #12]
 80129da:	18e3      	adds	r3, r4, r3
 80129dc:	60ca      	str	r2, [r1, #12]
 80129de:	6091      	str	r1, [r2, #8]
 80129e0:	2201      	movs	r2, #1
 80129e2:	6859      	ldr	r1, [r3, #4]
 80129e4:	430a      	orrs	r2, r1
 80129e6:	605a      	str	r2, [r3, #4]
 80129e8:	9801      	ldr	r0, [sp, #4]
 80129ea:	f000 fa19 	bl	8012e20 <__malloc_unlock>
 80129ee:	0020      	movs	r0, r4
 80129f0:	3008      	adds	r0, #8
 80129f2:	e7d1      	b.n	8012998 <_malloc_r+0x1c>
 80129f4:	0a69      	lsrs	r1, r5, #9
 80129f6:	233f      	movs	r3, #63	; 0x3f
 80129f8:	2900      	cmp	r1, #0
 80129fa:	d003      	beq.n	8012a04 <_malloc_r+0x88>
 80129fc:	2904      	cmp	r1, #4
 80129fe:	d828      	bhi.n	8012a52 <_malloc_r+0xd6>
 8012a00:	09ab      	lsrs	r3, r5, #6
 8012a02:	3338      	adds	r3, #56	; 0x38
 8012a04:	2103      	movs	r1, #3
 8012a06:	468c      	mov	ip, r1
 8012a08:	00d8      	lsls	r0, r3, #3
 8012a0a:	1880      	adds	r0, r0, r2
 8012a0c:	68c4      	ldr	r4, [r0, #12]
 8012a0e:	4284      	cmp	r4, r0
 8012a10:	d006      	beq.n	8012a20 <_malloc_r+0xa4>
 8012a12:	4666      	mov	r6, ip
 8012a14:	6861      	ldr	r1, [r4, #4]
 8012a16:	43b1      	bics	r1, r6
 8012a18:	1b4f      	subs	r7, r1, r5
 8012a1a:	2f0f      	cmp	r7, #15
 8012a1c:	dd31      	ble.n	8012a82 <_malloc_r+0x106>
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	3301      	adds	r3, #1
 8012a22:	469c      	mov	ip, r3
 8012a24:	6914      	ldr	r4, [r2, #16]
 8012a26:	49a7      	ldr	r1, [pc, #668]	; (8012cc4 <_malloc_r+0x348>)
 8012a28:	428c      	cmp	r4, r1
 8012a2a:	d055      	beq.n	8012ad8 <_malloc_r+0x15c>
 8012a2c:	2303      	movs	r3, #3
 8012a2e:	6860      	ldr	r0, [r4, #4]
 8012a30:	4398      	bics	r0, r3
 8012a32:	0003      	movs	r3, r0
 8012a34:	1b46      	subs	r6, r0, r5
 8012a36:	2e0f      	cmp	r6, #15
 8012a38:	dd31      	ble.n	8012a9e <_malloc_r+0x122>
 8012a3a:	2701      	movs	r7, #1
 8012a3c:	1960      	adds	r0, r4, r5
 8012a3e:	433d      	orrs	r5, r7
 8012a40:	4337      	orrs	r7, r6
 8012a42:	6065      	str	r5, [r4, #4]
 8012a44:	6150      	str	r0, [r2, #20]
 8012a46:	6110      	str	r0, [r2, #16]
 8012a48:	60c1      	str	r1, [r0, #12]
 8012a4a:	6081      	str	r1, [r0, #8]
 8012a4c:	6047      	str	r7, [r0, #4]
 8012a4e:	50e6      	str	r6, [r4, r3]
 8012a50:	e7ca      	b.n	80129e8 <_malloc_r+0x6c>
 8012a52:	2914      	cmp	r1, #20
 8012a54:	d802      	bhi.n	8012a5c <_malloc_r+0xe0>
 8012a56:	000b      	movs	r3, r1
 8012a58:	335b      	adds	r3, #91	; 0x5b
 8012a5a:	e7d3      	b.n	8012a04 <_malloc_r+0x88>
 8012a5c:	2954      	cmp	r1, #84	; 0x54
 8012a5e:	d802      	bhi.n	8012a66 <_malloc_r+0xea>
 8012a60:	0b2b      	lsrs	r3, r5, #12
 8012a62:	336e      	adds	r3, #110	; 0x6e
 8012a64:	e7ce      	b.n	8012a04 <_malloc_r+0x88>
 8012a66:	23aa      	movs	r3, #170	; 0xaa
 8012a68:	005b      	lsls	r3, r3, #1
 8012a6a:	4299      	cmp	r1, r3
 8012a6c:	d802      	bhi.n	8012a74 <_malloc_r+0xf8>
 8012a6e:	0beb      	lsrs	r3, r5, #15
 8012a70:	3377      	adds	r3, #119	; 0x77
 8012a72:	e7c7      	b.n	8012a04 <_malloc_r+0x88>
 8012a74:	4894      	ldr	r0, [pc, #592]	; (8012cc8 <_malloc_r+0x34c>)
 8012a76:	237e      	movs	r3, #126	; 0x7e
 8012a78:	4281      	cmp	r1, r0
 8012a7a:	d8c3      	bhi.n	8012a04 <_malloc_r+0x88>
 8012a7c:	0cab      	lsrs	r3, r5, #18
 8012a7e:	337c      	adds	r3, #124	; 0x7c
 8012a80:	e7c0      	b.n	8012a04 <_malloc_r+0x88>
 8012a82:	68e6      	ldr	r6, [r4, #12]
 8012a84:	2f00      	cmp	r7, #0
 8012a86:	db08      	blt.n	8012a9a <_malloc_r+0x11e>
 8012a88:	68a3      	ldr	r3, [r4, #8]
 8012a8a:	1861      	adds	r1, r4, r1
 8012a8c:	60de      	str	r6, [r3, #12]
 8012a8e:	60b3      	str	r3, [r6, #8]
 8012a90:	2301      	movs	r3, #1
 8012a92:	684a      	ldr	r2, [r1, #4]
 8012a94:	4313      	orrs	r3, r2
 8012a96:	604b      	str	r3, [r1, #4]
 8012a98:	e7a6      	b.n	80129e8 <_malloc_r+0x6c>
 8012a9a:	0034      	movs	r4, r6
 8012a9c:	e7b7      	b.n	8012a0e <_malloc_r+0x92>
 8012a9e:	6151      	str	r1, [r2, #20]
 8012aa0:	6111      	str	r1, [r2, #16]
 8012aa2:	2e00      	cmp	r6, #0
 8012aa4:	db05      	blt.n	8012ab2 <_malloc_r+0x136>
 8012aa6:	2101      	movs	r1, #1
 8012aa8:	1823      	adds	r3, r4, r0
 8012aaa:	685a      	ldr	r2, [r3, #4]
 8012aac:	4311      	orrs	r1, r2
 8012aae:	6059      	str	r1, [r3, #4]
 8012ab0:	e79a      	b.n	80129e8 <_malloc_r+0x6c>
 8012ab2:	4986      	ldr	r1, [pc, #536]	; (8012ccc <_malloc_r+0x350>)
 8012ab4:	6857      	ldr	r7, [r2, #4]
 8012ab6:	4288      	cmp	r0, r1
 8012ab8:	d900      	bls.n	8012abc <_malloc_r+0x140>
 8012aba:	e090      	b.n	8012bde <_malloc_r+0x262>
 8012abc:	08c3      	lsrs	r3, r0, #3
 8012abe:	39ff      	subs	r1, #255	; 0xff
 8012ac0:	1098      	asrs	r0, r3, #2
 8012ac2:	39ff      	subs	r1, #255	; 0xff
 8012ac4:	4081      	lsls	r1, r0
 8012ac6:	00db      	lsls	r3, r3, #3
 8012ac8:	4339      	orrs	r1, r7
 8012aca:	6051      	str	r1, [r2, #4]
 8012acc:	189a      	adds	r2, r3, r2
 8012ace:	6893      	ldr	r3, [r2, #8]
 8012ad0:	60e2      	str	r2, [r4, #12]
 8012ad2:	60a3      	str	r3, [r4, #8]
 8012ad4:	6094      	str	r4, [r2, #8]
 8012ad6:	60dc      	str	r4, [r3, #12]
 8012ad8:	4663      	mov	r3, ip
 8012ada:	2201      	movs	r2, #1
 8012adc:	4978      	ldr	r1, [pc, #480]	; (8012cc0 <_malloc_r+0x344>)
 8012ade:	109b      	asrs	r3, r3, #2
 8012ae0:	6848      	ldr	r0, [r1, #4]
 8012ae2:	409a      	lsls	r2, r3
 8012ae4:	4290      	cmp	r0, r2
 8012ae6:	d32d      	bcc.n	8012b44 <_malloc_r+0x1c8>
 8012ae8:	4202      	tst	r2, r0
 8012aea:	d109      	bne.n	8012b00 <_malloc_r+0x184>
 8012aec:	2303      	movs	r3, #3
 8012aee:	4664      	mov	r4, ip
 8012af0:	439c      	bics	r4, r3
 8012af2:	0023      	movs	r3, r4
 8012af4:	3304      	adds	r3, #4
 8012af6:	469c      	mov	ip, r3
 8012af8:	0052      	lsls	r2, r2, #1
 8012afa:	4202      	tst	r2, r0
 8012afc:	d100      	bne.n	8012b00 <_malloc_r+0x184>
 8012afe:	e0a4      	b.n	8012c4a <_malloc_r+0x2ce>
 8012b00:	4663      	mov	r3, ip
 8012b02:	00db      	lsls	r3, r3, #3
 8012b04:	18cb      	adds	r3, r1, r3
 8012b06:	9303      	str	r3, [sp, #12]
 8012b08:	001f      	movs	r7, r3
 8012b0a:	4663      	mov	r3, ip
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	68fc      	ldr	r4, [r7, #12]
 8012b10:	42bc      	cmp	r4, r7
 8012b12:	d000      	beq.n	8012b16 <_malloc_r+0x19a>
 8012b14:	e09c      	b.n	8012c50 <_malloc_r+0x2d4>
 8012b16:	2003      	movs	r0, #3
 8012b18:	9b02      	ldr	r3, [sp, #8]
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	9302      	str	r3, [sp, #8]
 8012b20:	4203      	tst	r3, r0
 8012b22:	d1f4      	bne.n	8012b0e <_malloc_r+0x192>
 8012b24:	4663      	mov	r3, ip
 8012b26:	2003      	movs	r0, #3
 8012b28:	4203      	tst	r3, r0
 8012b2a:	d000      	beq.n	8012b2e <_malloc_r+0x1b2>
 8012b2c:	e0b3      	b.n	8012c96 <_malloc_r+0x31a>
 8012b2e:	684b      	ldr	r3, [r1, #4]
 8012b30:	4393      	bics	r3, r2
 8012b32:	604b      	str	r3, [r1, #4]
 8012b34:	4b62      	ldr	r3, [pc, #392]	; (8012cc0 <_malloc_r+0x344>)
 8012b36:	0052      	lsls	r2, r2, #1
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d302      	bcc.n	8012b44 <_malloc_r+0x1c8>
 8012b3e:	2a00      	cmp	r2, #0
 8012b40:	d000      	beq.n	8012b44 <_malloc_r+0x1c8>
 8012b42:	e0b9      	b.n	8012cb8 <_malloc_r+0x33c>
 8012b44:	2303      	movs	r3, #3
 8012b46:	688f      	ldr	r7, [r1, #8]
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	439a      	bics	r2, r3
 8012b4c:	9202      	str	r2, [sp, #8]
 8012b4e:	42aa      	cmp	r2, r5
 8012b50:	d303      	bcc.n	8012b5a <_malloc_r+0x1de>
 8012b52:	1b52      	subs	r2, r2, r5
 8012b54:	2a0f      	cmp	r2, #15
 8012b56:	dd00      	ble.n	8012b5a <_malloc_r+0x1de>
 8012b58:	e116      	b.n	8012d88 <_malloc_r+0x40c>
 8012b5a:	4b5d      	ldr	r3, [pc, #372]	; (8012cd0 <_malloc_r+0x354>)
 8012b5c:	2008      	movs	r0, #8
 8012b5e:	681e      	ldr	r6, [r3, #0]
 8012b60:	f002 fd26 	bl	80155b0 <sysconf>
 8012b64:	4b5b      	ldr	r3, [pc, #364]	; (8012cd4 <_malloc_r+0x358>)
 8012b66:	3610      	adds	r6, #16
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	1976      	adds	r6, r6, r5
 8012b6c:	9003      	str	r0, [sp, #12]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	d003      	beq.n	8012b7a <_malloc_r+0x1fe>
 8012b72:	3e01      	subs	r6, #1
 8012b74:	1836      	adds	r6, r6, r0
 8012b76:	4243      	negs	r3, r0
 8012b78:	401e      	ands	r6, r3
 8012b7a:	0031      	movs	r1, r6
 8012b7c:	9801      	ldr	r0, [sp, #4]
 8012b7e:	f000 fb27 	bl	80131d0 <_sbrk_r>
 8012b82:	0004      	movs	r4, r0
 8012b84:	1c43      	adds	r3, r0, #1
 8012b86:	d100      	bne.n	8012b8a <_malloc_r+0x20e>
 8012b88:	e0d6      	b.n	8012d38 <_malloc_r+0x3bc>
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	18fb      	adds	r3, r7, r3
 8012b8e:	4283      	cmp	r3, r0
 8012b90:	d903      	bls.n	8012b9a <_malloc_r+0x21e>
 8012b92:	4a4b      	ldr	r2, [pc, #300]	; (8012cc0 <_malloc_r+0x344>)
 8012b94:	4297      	cmp	r7, r2
 8012b96:	d000      	beq.n	8012b9a <_malloc_r+0x21e>
 8012b98:	e0ce      	b.n	8012d38 <_malloc_r+0x3bc>
 8012b9a:	494f      	ldr	r1, [pc, #316]	; (8012cd8 <_malloc_r+0x35c>)
 8012b9c:	680a      	ldr	r2, [r1, #0]
 8012b9e:	18b2      	adds	r2, r6, r2
 8012ba0:	600a      	str	r2, [r1, #0]
 8012ba2:	9903      	ldr	r1, [sp, #12]
 8012ba4:	4694      	mov	ip, r2
 8012ba6:	1e48      	subs	r0, r1, #1
 8012ba8:	42a3      	cmp	r3, r4
 8012baa:	d000      	beq.n	8012bae <_malloc_r+0x232>
 8012bac:	e09a      	b.n	8012ce4 <_malloc_r+0x368>
 8012bae:	4203      	tst	r3, r0
 8012bb0:	d000      	beq.n	8012bb4 <_malloc_r+0x238>
 8012bb2:	e097      	b.n	8012ce4 <_malloc_r+0x368>
 8012bb4:	9a02      	ldr	r2, [sp, #8]
 8012bb6:	4b42      	ldr	r3, [pc, #264]	; (8012cc0 <_malloc_r+0x344>)
 8012bb8:	1992      	adds	r2, r2, r6
 8012bba:	2601      	movs	r6, #1
 8012bbc:	689b      	ldr	r3, [r3, #8]
 8012bbe:	4316      	orrs	r6, r2
 8012bc0:	605e      	str	r6, [r3, #4]
 8012bc2:	4b45      	ldr	r3, [pc, #276]	; (8012cd8 <_malloc_r+0x35c>)
 8012bc4:	4a45      	ldr	r2, [pc, #276]	; (8012cdc <_malloc_r+0x360>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	6811      	ldr	r1, [r2, #0]
 8012bca:	428b      	cmp	r3, r1
 8012bcc:	d900      	bls.n	8012bd0 <_malloc_r+0x254>
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	4a43      	ldr	r2, [pc, #268]	; (8012ce0 <_malloc_r+0x364>)
 8012bd2:	6811      	ldr	r1, [r2, #0]
 8012bd4:	428b      	cmp	r3, r1
 8012bd6:	d800      	bhi.n	8012bda <_malloc_r+0x25e>
 8012bd8:	e0ae      	b.n	8012d38 <_malloc_r+0x3bc>
 8012bda:	6013      	str	r3, [r2, #0]
 8012bdc:	e0ac      	b.n	8012d38 <_malloc_r+0x3bc>
 8012bde:	0a40      	lsrs	r0, r0, #9
 8012be0:	2804      	cmp	r0, #4
 8012be2:	d810      	bhi.n	8012c06 <_malloc_r+0x28a>
 8012be4:	0999      	lsrs	r1, r3, #6
 8012be6:	3138      	adds	r1, #56	; 0x38
 8012be8:	00ce      	lsls	r6, r1, #3
 8012bea:	18b6      	adds	r6, r6, r2
 8012bec:	68b0      	ldr	r0, [r6, #8]
 8012bee:	4286      	cmp	r6, r0
 8012bf0:	d124      	bne.n	8012c3c <_malloc_r+0x2c0>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	1089      	asrs	r1, r1, #2
 8012bf6:	408b      	lsls	r3, r1
 8012bf8:	433b      	orrs	r3, r7
 8012bfa:	6053      	str	r3, [r2, #4]
 8012bfc:	60e6      	str	r6, [r4, #12]
 8012bfe:	60a0      	str	r0, [r4, #8]
 8012c00:	60b4      	str	r4, [r6, #8]
 8012c02:	60c4      	str	r4, [r0, #12]
 8012c04:	e768      	b.n	8012ad8 <_malloc_r+0x15c>
 8012c06:	2814      	cmp	r0, #20
 8012c08:	d802      	bhi.n	8012c10 <_malloc_r+0x294>
 8012c0a:	0001      	movs	r1, r0
 8012c0c:	315b      	adds	r1, #91	; 0x5b
 8012c0e:	e7eb      	b.n	8012be8 <_malloc_r+0x26c>
 8012c10:	2854      	cmp	r0, #84	; 0x54
 8012c12:	d802      	bhi.n	8012c1a <_malloc_r+0x29e>
 8012c14:	0b19      	lsrs	r1, r3, #12
 8012c16:	316e      	adds	r1, #110	; 0x6e
 8012c18:	e7e6      	b.n	8012be8 <_malloc_r+0x26c>
 8012c1a:	21aa      	movs	r1, #170	; 0xaa
 8012c1c:	0049      	lsls	r1, r1, #1
 8012c1e:	4288      	cmp	r0, r1
 8012c20:	d802      	bhi.n	8012c28 <_malloc_r+0x2ac>
 8012c22:	0bd9      	lsrs	r1, r3, #15
 8012c24:	3177      	adds	r1, #119	; 0x77
 8012c26:	e7df      	b.n	8012be8 <_malloc_r+0x26c>
 8012c28:	4e27      	ldr	r6, [pc, #156]	; (8012cc8 <_malloc_r+0x34c>)
 8012c2a:	217e      	movs	r1, #126	; 0x7e
 8012c2c:	42b0      	cmp	r0, r6
 8012c2e:	d8db      	bhi.n	8012be8 <_malloc_r+0x26c>
 8012c30:	0c99      	lsrs	r1, r3, #18
 8012c32:	317c      	adds	r1, #124	; 0x7c
 8012c34:	e7d8      	b.n	8012be8 <_malloc_r+0x26c>
 8012c36:	6880      	ldr	r0, [r0, #8]
 8012c38:	4286      	cmp	r6, r0
 8012c3a:	d004      	beq.n	8012c46 <_malloc_r+0x2ca>
 8012c3c:	2103      	movs	r1, #3
 8012c3e:	6842      	ldr	r2, [r0, #4]
 8012c40:	438a      	bics	r2, r1
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d8f7      	bhi.n	8012c36 <_malloc_r+0x2ba>
 8012c46:	68c6      	ldr	r6, [r0, #12]
 8012c48:	e7d8      	b.n	8012bfc <_malloc_r+0x280>
 8012c4a:	2304      	movs	r3, #4
 8012c4c:	449c      	add	ip, r3
 8012c4e:	e753      	b.n	8012af8 <_malloc_r+0x17c>
 8012c50:	2003      	movs	r0, #3
 8012c52:	6863      	ldr	r3, [r4, #4]
 8012c54:	4383      	bics	r3, r0
 8012c56:	1b5e      	subs	r6, r3, r5
 8012c58:	68e0      	ldr	r0, [r4, #12]
 8012c5a:	2e0f      	cmp	r6, #15
 8012c5c:	dd0e      	ble.n	8012c7c <_malloc_r+0x300>
 8012c5e:	2701      	movs	r7, #1
 8012c60:	1962      	adds	r2, r4, r5
 8012c62:	433d      	orrs	r5, r7
 8012c64:	6065      	str	r5, [r4, #4]
 8012c66:	68a5      	ldr	r5, [r4, #8]
 8012c68:	4337      	orrs	r7, r6
 8012c6a:	60e8      	str	r0, [r5, #12]
 8012c6c:	6085      	str	r5, [r0, #8]
 8012c6e:	614a      	str	r2, [r1, #20]
 8012c70:	610a      	str	r2, [r1, #16]
 8012c72:	4914      	ldr	r1, [pc, #80]	; (8012cc4 <_malloc_r+0x348>)
 8012c74:	6057      	str	r7, [r2, #4]
 8012c76:	60d1      	str	r1, [r2, #12]
 8012c78:	6091      	str	r1, [r2, #8]
 8012c7a:	e6e8      	b.n	8012a4e <_malloc_r+0xd2>
 8012c7c:	2e00      	cmp	r6, #0
 8012c7e:	db08      	blt.n	8012c92 <_malloc_r+0x316>
 8012c80:	2201      	movs	r2, #1
 8012c82:	18e3      	adds	r3, r4, r3
 8012c84:	6859      	ldr	r1, [r3, #4]
 8012c86:	430a      	orrs	r2, r1
 8012c88:	605a      	str	r2, [r3, #4]
 8012c8a:	68a3      	ldr	r3, [r4, #8]
 8012c8c:	60d8      	str	r0, [r3, #12]
 8012c8e:	6083      	str	r3, [r0, #8]
 8012c90:	e6aa      	b.n	80129e8 <_malloc_r+0x6c>
 8012c92:	0004      	movs	r4, r0
 8012c94:	e73c      	b.n	8012b10 <_malloc_r+0x194>
 8012c96:	2301      	movs	r3, #1
 8012c98:	425b      	negs	r3, r3
 8012c9a:	449c      	add	ip, r3
 8012c9c:	9b03      	ldr	r3, [sp, #12]
 8012c9e:	6818      	ldr	r0, [r3, #0]
 8012ca0:	3b08      	subs	r3, #8
 8012ca2:	9003      	str	r0, [sp, #12]
 8012ca4:	4298      	cmp	r0, r3
 8012ca6:	d100      	bne.n	8012caa <_malloc_r+0x32e>
 8012ca8:	e73c      	b.n	8012b24 <_malloc_r+0x1a8>
 8012caa:	e743      	b.n	8012b34 <_malloc_r+0x1b8>
 8012cac:	2004      	movs	r0, #4
 8012cae:	0052      	lsls	r2, r2, #1
 8012cb0:	4484      	add	ip, r0
 8012cb2:	421a      	tst	r2, r3
 8012cb4:	d0fa      	beq.n	8012cac <_malloc_r+0x330>
 8012cb6:	e723      	b.n	8012b00 <_malloc_r+0x184>
 8012cb8:	9802      	ldr	r0, [sp, #8]
 8012cba:	4684      	mov	ip, r0
 8012cbc:	e7f9      	b.n	8012cb2 <_malloc_r+0x336>
 8012cbe:	46c0      	nop			; (mov r8, r8)
 8012cc0:	200005fc 	.word	0x200005fc
 8012cc4:	20000604 	.word	0x20000604
 8012cc8:	00000554 	.word	0x00000554
 8012ccc:	000001ff 	.word	0x000001ff
 8012cd0:	200067d4 	.word	0x200067d4
 8012cd4:	20000a04 	.word	0x20000a04
 8012cd8:	200067a4 	.word	0x200067a4
 8012cdc:	200067cc 	.word	0x200067cc
 8012ce0:	200067d0 	.word	0x200067d0
 8012ce4:	492e      	ldr	r1, [pc, #184]	; (8012da0 <_malloc_r+0x424>)
 8012ce6:	680a      	ldr	r2, [r1, #0]
 8012ce8:	3201      	adds	r2, #1
 8012cea:	d133      	bne.n	8012d54 <_malloc_r+0x3d8>
 8012cec:	600c      	str	r4, [r1, #0]
 8012cee:	2307      	movs	r3, #7
 8012cf0:	4023      	ands	r3, r4
 8012cf2:	d002      	beq.n	8012cfa <_malloc_r+0x37e>
 8012cf4:	2208      	movs	r2, #8
 8012cf6:	1ad3      	subs	r3, r2, r3
 8012cf8:	18e4      	adds	r4, r4, r3
 8012cfa:	9a03      	ldr	r2, [sp, #12]
 8012cfc:	19a6      	adds	r6, r4, r6
 8012cfe:	18d3      	adds	r3, r2, r3
 8012d00:	4006      	ands	r6, r0
 8012d02:	1b9e      	subs	r6, r3, r6
 8012d04:	0031      	movs	r1, r6
 8012d06:	9801      	ldr	r0, [sp, #4]
 8012d08:	f000 fa62 	bl	80131d0 <_sbrk_r>
 8012d0c:	1c43      	adds	r3, r0, #1
 8012d0e:	d101      	bne.n	8012d14 <_malloc_r+0x398>
 8012d10:	0020      	movs	r0, r4
 8012d12:	2600      	movs	r6, #0
 8012d14:	4a23      	ldr	r2, [pc, #140]	; (8012da4 <_malloc_r+0x428>)
 8012d16:	1b00      	subs	r0, r0, r4
 8012d18:	6813      	ldr	r3, [r2, #0]
 8012d1a:	199b      	adds	r3, r3, r6
 8012d1c:	6013      	str	r3, [r2, #0]
 8012d1e:	2301      	movs	r3, #1
 8012d20:	4a21      	ldr	r2, [pc, #132]	; (8012da8 <_malloc_r+0x42c>)
 8012d22:	1986      	adds	r6, r0, r6
 8012d24:	431e      	orrs	r6, r3
 8012d26:	6094      	str	r4, [r2, #8]
 8012d28:	6066      	str	r6, [r4, #4]
 8012d2a:	4297      	cmp	r7, r2
 8012d2c:	d100      	bne.n	8012d30 <_malloc_r+0x3b4>
 8012d2e:	e748      	b.n	8012bc2 <_malloc_r+0x246>
 8012d30:	9a02      	ldr	r2, [sp, #8]
 8012d32:	2a0f      	cmp	r2, #15
 8012d34:	d813      	bhi.n	8012d5e <_malloc_r+0x3e2>
 8012d36:	6063      	str	r3, [r4, #4]
 8012d38:	2203      	movs	r2, #3
 8012d3a:	4b1b      	ldr	r3, [pc, #108]	; (8012da8 <_malloc_r+0x42c>)
 8012d3c:	689b      	ldr	r3, [r3, #8]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4393      	bics	r3, r2
 8012d42:	1b5a      	subs	r2, r3, r5
 8012d44:	42ab      	cmp	r3, r5
 8012d46:	d301      	bcc.n	8012d4c <_malloc_r+0x3d0>
 8012d48:	2a0f      	cmp	r2, #15
 8012d4a:	dc1d      	bgt.n	8012d88 <_malloc_r+0x40c>
 8012d4c:	9801      	ldr	r0, [sp, #4]
 8012d4e:	f000 f867 	bl	8012e20 <__malloc_unlock>
 8012d52:	e620      	b.n	8012996 <_malloc_r+0x1a>
 8012d54:	1ae3      	subs	r3, r4, r3
 8012d56:	4a13      	ldr	r2, [pc, #76]	; (8012da4 <_malloc_r+0x428>)
 8012d58:	4463      	add	r3, ip
 8012d5a:	6013      	str	r3, [r2, #0]
 8012d5c:	e7c7      	b.n	8012cee <_malloc_r+0x372>
 8012d5e:	2207      	movs	r2, #7
 8012d60:	9e02      	ldr	r6, [sp, #8]
 8012d62:	3e0c      	subs	r6, #12
 8012d64:	4396      	bics	r6, r2
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	4013      	ands	r3, r2
 8012d6a:	2205      	movs	r2, #5
 8012d6c:	4333      	orrs	r3, r6
 8012d6e:	607b      	str	r3, [r7, #4]
 8012d70:	19bb      	adds	r3, r7, r6
 8012d72:	605a      	str	r2, [r3, #4]
 8012d74:	609a      	str	r2, [r3, #8]
 8012d76:	2e0f      	cmp	r6, #15
 8012d78:	d800      	bhi.n	8012d7c <_malloc_r+0x400>
 8012d7a:	e722      	b.n	8012bc2 <_malloc_r+0x246>
 8012d7c:	0039      	movs	r1, r7
 8012d7e:	9801      	ldr	r0, [sp, #4]
 8012d80:	3108      	adds	r1, #8
 8012d82:	f003 fb07 	bl	8016394 <_free_r>
 8012d86:	e71c      	b.n	8012bc2 <_malloc_r+0x246>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	0018      	movs	r0, r3
 8012d8c:	4906      	ldr	r1, [pc, #24]	; (8012da8 <_malloc_r+0x42c>)
 8012d8e:	4328      	orrs	r0, r5
 8012d90:	688c      	ldr	r4, [r1, #8]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	1965      	adds	r5, r4, r5
 8012d96:	6060      	str	r0, [r4, #4]
 8012d98:	608d      	str	r5, [r1, #8]
 8012d9a:	606b      	str	r3, [r5, #4]
 8012d9c:	e624      	b.n	80129e8 <_malloc_r+0x6c>
 8012d9e:	46c0      	nop			; (mov r8, r8)
 8012da0:	20000a04 	.word	0x20000a04
 8012da4:	200067a4 	.word	0x200067a4
 8012da8:	200005fc 	.word	0x200005fc

08012dac <__ascii_mbtowc>:
 8012dac:	b082      	sub	sp, #8
 8012dae:	2900      	cmp	r1, #0
 8012db0:	d100      	bne.n	8012db4 <__ascii_mbtowc+0x8>
 8012db2:	a901      	add	r1, sp, #4
 8012db4:	1e10      	subs	r0, r2, #0
 8012db6:	d006      	beq.n	8012dc6 <__ascii_mbtowc+0x1a>
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d006      	beq.n	8012dca <__ascii_mbtowc+0x1e>
 8012dbc:	7813      	ldrb	r3, [r2, #0]
 8012dbe:	600b      	str	r3, [r1, #0]
 8012dc0:	7810      	ldrb	r0, [r2, #0]
 8012dc2:	1e43      	subs	r3, r0, #1
 8012dc4:	4198      	sbcs	r0, r3
 8012dc6:	b002      	add	sp, #8
 8012dc8:	4770      	bx	lr
 8012dca:	2002      	movs	r0, #2
 8012dcc:	4240      	negs	r0, r0
 8012dce:	e7fa      	b.n	8012dc6 <__ascii_mbtowc+0x1a>

08012dd0 <memcmp>:
 8012dd0:	b530      	push	{r4, r5, lr}
 8012dd2:	2400      	movs	r4, #0
 8012dd4:	42a2      	cmp	r2, r4
 8012dd6:	d101      	bne.n	8012ddc <memcmp+0xc>
 8012dd8:	2000      	movs	r0, #0
 8012dda:	e005      	b.n	8012de8 <memcmp+0x18>
 8012ddc:	5d03      	ldrb	r3, [r0, r4]
 8012dde:	1c65      	adds	r5, r4, #1
 8012de0:	5d0c      	ldrb	r4, [r1, r4]
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	d001      	beq.n	8012dea <memcmp+0x1a>
 8012de6:	1b18      	subs	r0, r3, r4
 8012de8:	bd30      	pop	{r4, r5, pc}
 8012dea:	002c      	movs	r4, r5
 8012dec:	e7f2      	b.n	8012dd4 <memcmp+0x4>

08012dee <memcpy>:
 8012dee:	2300      	movs	r3, #0
 8012df0:	b510      	push	{r4, lr}
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d100      	bne.n	8012df8 <memcpy+0xa>
 8012df6:	bd10      	pop	{r4, pc}
 8012df8:	5ccc      	ldrb	r4, [r1, r3]
 8012dfa:	54c4      	strb	r4, [r0, r3]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	e7f8      	b.n	8012df2 <memcpy+0x4>

08012e00 <memset>:
 8012e00:	0003      	movs	r3, r0
 8012e02:	1812      	adds	r2, r2, r0
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d100      	bne.n	8012e0a <memset+0xa>
 8012e08:	4770      	bx	lr
 8012e0a:	7019      	strb	r1, [r3, #0]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	e7f9      	b.n	8012e04 <memset+0x4>

08012e10 <__malloc_lock>:
 8012e10:	b510      	push	{r4, lr}
 8012e12:	4802      	ldr	r0, [pc, #8]	; (8012e1c <__malloc_lock+0xc>)
 8012e14:	f003 feb2 	bl	8016b7c <__retarget_lock_acquire_recursive>
 8012e18:	bd10      	pop	{r4, pc}
 8012e1a:	46c0      	nop			; (mov r8, r8)
 8012e1c:	20006cac 	.word	0x20006cac

08012e20 <__malloc_unlock>:
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4802      	ldr	r0, [pc, #8]	; (8012e2c <__malloc_unlock+0xc>)
 8012e24:	f003 feab 	bl	8016b7e <__retarget_lock_release_recursive>
 8012e28:	bd10      	pop	{r4, pc}
 8012e2a:	46c0      	nop			; (mov r8, r8)
 8012e2c:	20006cac 	.word	0x20006cac

08012e30 <rand>:
 8012e30:	4b09      	ldr	r3, [pc, #36]	; (8012e58 <rand+0x28>)
 8012e32:	b510      	push	{r4, lr}
 8012e34:	681c      	ldr	r4, [r3, #0]
 8012e36:	4a09      	ldr	r2, [pc, #36]	; (8012e5c <rand+0x2c>)
 8012e38:	34a8      	adds	r4, #168	; 0xa8
 8012e3a:	6820      	ldr	r0, [r4, #0]
 8012e3c:	6861      	ldr	r1, [r4, #4]
 8012e3e:	4b08      	ldr	r3, [pc, #32]	; (8012e60 <rand+0x30>)
 8012e40:	f7ed fb94 	bl	800056c <__aeabi_lmul>
 8012e44:	2201      	movs	r2, #1
 8012e46:	2300      	movs	r3, #0
 8012e48:	1880      	adds	r0, r0, r2
 8012e4a:	4159      	adcs	r1, r3
 8012e4c:	6020      	str	r0, [r4, #0]
 8012e4e:	6061      	str	r1, [r4, #4]
 8012e50:	0048      	lsls	r0, r1, #1
 8012e52:	0840      	lsrs	r0, r0, #1
 8012e54:	bd10      	pop	{r4, pc}
 8012e56:	46c0      	nop			; (mov r8, r8)
 8012e58:	20000064 	.word	0x20000064
 8012e5c:	4c957f2d 	.word	0x4c957f2d
 8012e60:	5851f42d 	.word	0x5851f42d

08012e64 <realloc>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	4b03      	ldr	r3, [pc, #12]	; (8012e74 <realloc+0x10>)
 8012e68:	000a      	movs	r2, r1
 8012e6a:	0001      	movs	r1, r0
 8012e6c:	6818      	ldr	r0, [r3, #0]
 8012e6e:	f000 f803 	bl	8012e78 <_realloc_r>
 8012e72:	bd10      	pop	{r4, pc}
 8012e74:	20000064 	.word	0x20000064

08012e78 <_realloc_r>:
 8012e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e7a:	b087      	sub	sp, #28
 8012e7c:	9003      	str	r0, [sp, #12]
 8012e7e:	1e0c      	subs	r4, r1, #0
 8012e80:	9205      	str	r2, [sp, #20]
 8012e82:	d106      	bne.n	8012e92 <_realloc_r+0x1a>
 8012e84:	0011      	movs	r1, r2
 8012e86:	f7ff fd79 	bl	801297c <_malloc_r>
 8012e8a:	0007      	movs	r7, r0
 8012e8c:	0038      	movs	r0, r7
 8012e8e:	b007      	add	sp, #28
 8012e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e92:	9803      	ldr	r0, [sp, #12]
 8012e94:	f7ff ffbc 	bl	8012e10 <__malloc_lock>
 8012e98:	0023      	movs	r3, r4
 8012e9a:	3b08      	subs	r3, #8
 8012e9c:	685f      	ldr	r7, [r3, #4]
 8012e9e:	9302      	str	r3, [sp, #8]
 8012ea0:	003a      	movs	r2, r7
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	9e05      	ldr	r6, [sp, #20]
 8012ea6:	439a      	bics	r2, r3
 8012ea8:	360b      	adds	r6, #11
 8012eaa:	9204      	str	r2, [sp, #16]
 8012eac:	2e16      	cmp	r6, #22
 8012eae:	d908      	bls.n	8012ec2 <_realloc_r+0x4a>
 8012eb0:	3304      	adds	r3, #4
 8012eb2:	439e      	bics	r6, r3
 8012eb4:	9601      	str	r6, [sp, #4]
 8012eb6:	d506      	bpl.n	8012ec6 <_realloc_r+0x4e>
 8012eb8:	230c      	movs	r3, #12
 8012eba:	9a03      	ldr	r2, [sp, #12]
 8012ebc:	2700      	movs	r7, #0
 8012ebe:	6013      	str	r3, [r2, #0]
 8012ec0:	e7e4      	b.n	8012e8c <_realloc_r+0x14>
 8012ec2:	2310      	movs	r3, #16
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	9b01      	ldr	r3, [sp, #4]
 8012ec8:	9a05      	ldr	r2, [sp, #20]
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d3f4      	bcc.n	8012eb8 <_realloc_r+0x40>
 8012ece:	9b01      	ldr	r3, [sp, #4]
 8012ed0:	9a04      	ldr	r2, [sp, #16]
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	dc00      	bgt.n	8012ed8 <_realloc_r+0x60>
 8012ed6:	e16f      	b.n	80131b8 <_realloc_r+0x340>
 8012ed8:	9b02      	ldr	r3, [sp, #8]
 8012eda:	48bc      	ldr	r0, [pc, #752]	; (80131cc <_realloc_r+0x354>)
 8012edc:	189b      	adds	r3, r3, r2
 8012ede:	6882      	ldr	r2, [r0, #8]
 8012ee0:	4694      	mov	ip, r2
 8012ee2:	685a      	ldr	r2, [r3, #4]
 8012ee4:	459c      	cmp	ip, r3
 8012ee6:	d006      	beq.n	8012ef6 <_realloc_r+0x7e>
 8012ee8:	2501      	movs	r5, #1
 8012eea:	0011      	movs	r1, r2
 8012eec:	43a9      	bics	r1, r5
 8012eee:	1859      	adds	r1, r3, r1
 8012ef0:	6849      	ldr	r1, [r1, #4]
 8012ef2:	4229      	tst	r1, r5
 8012ef4:	d146      	bne.n	8012f84 <_realloc_r+0x10c>
 8012ef6:	2103      	movs	r1, #3
 8012ef8:	438a      	bics	r2, r1
 8012efa:	9904      	ldr	r1, [sp, #16]
 8012efc:	188e      	adds	r6, r1, r2
 8012efe:	9901      	ldr	r1, [sp, #4]
 8012f00:	459c      	cmp	ip, r3
 8012f02:	d117      	bne.n	8012f34 <_realloc_r+0xbc>
 8012f04:	3110      	adds	r1, #16
 8012f06:	42b1      	cmp	r1, r6
 8012f08:	dc3e      	bgt.n	8012f88 <_realloc_r+0x110>
 8012f0a:	9901      	ldr	r1, [sp, #4]
 8012f0c:	9b02      	ldr	r3, [sp, #8]
 8012f0e:	468c      	mov	ip, r1
 8012f10:	4463      	add	r3, ip
 8012f12:	6083      	str	r3, [r0, #8]
 8012f14:	001a      	movs	r2, r3
 8012f16:	1a73      	subs	r3, r6, r1
 8012f18:	2601      	movs	r6, #1
 8012f1a:	4333      	orrs	r3, r6
 8012f1c:	6053      	str	r3, [r2, #4]
 8012f1e:	0023      	movs	r3, r4
 8012f20:	3b08      	subs	r3, #8
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	9803      	ldr	r0, [sp, #12]
 8012f26:	4016      	ands	r6, r2
 8012f28:	430e      	orrs	r6, r1
 8012f2a:	605e      	str	r6, [r3, #4]
 8012f2c:	f7ff ff78 	bl	8012e20 <__malloc_unlock>
 8012f30:	0027      	movs	r7, r4
 8012f32:	e7ab      	b.n	8012e8c <_realloc_r+0x14>
 8012f34:	42b1      	cmp	r1, r6
 8012f36:	dc27      	bgt.n	8012f88 <_realloc_r+0x110>
 8012f38:	68da      	ldr	r2, [r3, #12]
 8012f3a:	689b      	ldr	r3, [r3, #8]
 8012f3c:	60da      	str	r2, [r3, #12]
 8012f3e:	6093      	str	r3, [r2, #8]
 8012f40:	9b01      	ldr	r3, [sp, #4]
 8012f42:	9a02      	ldr	r2, [sp, #8]
 8012f44:	1af4      	subs	r4, r6, r3
 8012f46:	9b02      	ldr	r3, [sp, #8]
 8012f48:	1992      	adds	r2, r2, r6
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	9304      	str	r3, [sp, #16]
 8012f4e:	2301      	movs	r3, #1
 8012f50:	9804      	ldr	r0, [sp, #16]
 8012f52:	4018      	ands	r0, r3
 8012f54:	2c0f      	cmp	r4, #15
 8012f56:	d800      	bhi.n	8012f5a <_realloc_r+0xe2>
 8012f58:	e130      	b.n	80131bc <_realloc_r+0x344>
 8012f5a:	9d01      	ldr	r5, [sp, #4]
 8012f5c:	9902      	ldr	r1, [sp, #8]
 8012f5e:	4328      	orrs	r0, r5
 8012f60:	1949      	adds	r1, r1, r5
 8012f62:	9d02      	ldr	r5, [sp, #8]
 8012f64:	431c      	orrs	r4, r3
 8012f66:	6068      	str	r0, [r5, #4]
 8012f68:	604c      	str	r4, [r1, #4]
 8012f6a:	6850      	ldr	r0, [r2, #4]
 8012f6c:	3108      	adds	r1, #8
 8012f6e:	4303      	orrs	r3, r0
 8012f70:	6053      	str	r3, [r2, #4]
 8012f72:	9803      	ldr	r0, [sp, #12]
 8012f74:	f003 fa0e 	bl	8016394 <_free_r>
 8012f78:	9803      	ldr	r0, [sp, #12]
 8012f7a:	f7ff ff51 	bl	8012e20 <__malloc_unlock>
 8012f7e:	9f02      	ldr	r7, [sp, #8]
 8012f80:	3708      	adds	r7, #8
 8012f82:	e783      	b.n	8012e8c <_realloc_r+0x14>
 8012f84:	2200      	movs	r2, #0
 8012f86:	0013      	movs	r3, r2
 8012f88:	07f9      	lsls	r1, r7, #31
 8012f8a:	d500      	bpl.n	8012f8e <_realloc_r+0x116>
 8012f8c:	e0c6      	b.n	801311c <_realloc_r+0x2a4>
 8012f8e:	0021      	movs	r1, r4
 8012f90:	3908      	subs	r1, #8
 8012f92:	680d      	ldr	r5, [r1, #0]
 8012f94:	9902      	ldr	r1, [sp, #8]
 8012f96:	1b4d      	subs	r5, r1, r5
 8012f98:	2103      	movs	r1, #3
 8012f9a:	686f      	ldr	r7, [r5, #4]
 8012f9c:	438f      	bics	r7, r1
 8012f9e:	9904      	ldr	r1, [sp, #16]
 8012fa0:	187f      	adds	r7, r7, r1
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d100      	bne.n	8012fa8 <_realloc_r+0x130>
 8012fa6:	e084      	b.n	80130b2 <_realloc_r+0x23a>
 8012fa8:	19d6      	adds	r6, r2, r7
 8012faa:	459c      	cmp	ip, r3
 8012fac:	d148      	bne.n	8013040 <_realloc_r+0x1c8>
 8012fae:	9b01      	ldr	r3, [sp, #4]
 8012fb0:	3310      	adds	r3, #16
 8012fb2:	42b3      	cmp	r3, r6
 8012fb4:	dc7d      	bgt.n	80130b2 <_realloc_r+0x23a>
 8012fb6:	68aa      	ldr	r2, [r5, #8]
 8012fb8:	68eb      	ldr	r3, [r5, #12]
 8012fba:	002f      	movs	r7, r5
 8012fbc:	60d3      	str	r3, [r2, #12]
 8012fbe:	609a      	str	r2, [r3, #8]
 8012fc0:	000a      	movs	r2, r1
 8012fc2:	3a04      	subs	r2, #4
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	2a24      	cmp	r2, #36	; 0x24
 8012fc8:	d835      	bhi.n	8013036 <_realloc_r+0x1be>
 8012fca:	003b      	movs	r3, r7
 8012fcc:	2a13      	cmp	r2, #19
 8012fce:	d908      	bls.n	8012fe2 <_realloc_r+0x16a>
 8012fd0:	6823      	ldr	r3, [r4, #0]
 8012fd2:	60ab      	str	r3, [r5, #8]
 8012fd4:	6863      	ldr	r3, [r4, #4]
 8012fd6:	60eb      	str	r3, [r5, #12]
 8012fd8:	2a1b      	cmp	r2, #27
 8012fda:	d81a      	bhi.n	8013012 <_realloc_r+0x19a>
 8012fdc:	002b      	movs	r3, r5
 8012fde:	3408      	adds	r4, #8
 8012fe0:	3310      	adds	r3, #16
 8012fe2:	6822      	ldr	r2, [r4, #0]
 8012fe4:	601a      	str	r2, [r3, #0]
 8012fe6:	6862      	ldr	r2, [r4, #4]
 8012fe8:	605a      	str	r2, [r3, #4]
 8012fea:	68a2      	ldr	r2, [r4, #8]
 8012fec:	609a      	str	r2, [r3, #8]
 8012fee:	9b01      	ldr	r3, [sp, #4]
 8012ff0:	18ea      	adds	r2, r5, r3
 8012ff2:	4b76      	ldr	r3, [pc, #472]	; (80131cc <_realloc_r+0x354>)
 8012ff4:	609a      	str	r2, [r3, #8]
 8012ff6:	9b01      	ldr	r3, [sp, #4]
 8012ff8:	1af3      	subs	r3, r6, r3
 8012ffa:	2601      	movs	r6, #1
 8012ffc:	4333      	orrs	r3, r6
 8012ffe:	6053      	str	r3, [r2, #4]
 8013000:	686b      	ldr	r3, [r5, #4]
 8013002:	401e      	ands	r6, r3
 8013004:	9b01      	ldr	r3, [sp, #4]
 8013006:	431e      	orrs	r6, r3
 8013008:	606e      	str	r6, [r5, #4]
 801300a:	9803      	ldr	r0, [sp, #12]
 801300c:	f7ff ff08 	bl	8012e20 <__malloc_unlock>
 8013010:	e73c      	b.n	8012e8c <_realloc_r+0x14>
 8013012:	68a3      	ldr	r3, [r4, #8]
 8013014:	612b      	str	r3, [r5, #16]
 8013016:	68e3      	ldr	r3, [r4, #12]
 8013018:	616b      	str	r3, [r5, #20]
 801301a:	2a24      	cmp	r2, #36	; 0x24
 801301c:	d003      	beq.n	8013026 <_realloc_r+0x1ae>
 801301e:	002b      	movs	r3, r5
 8013020:	3410      	adds	r4, #16
 8013022:	3318      	adds	r3, #24
 8013024:	e7dd      	b.n	8012fe2 <_realloc_r+0x16a>
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	61ab      	str	r3, [r5, #24]
 801302a:	002b      	movs	r3, r5
 801302c:	6962      	ldr	r2, [r4, #20]
 801302e:	3320      	adds	r3, #32
 8013030:	61ea      	str	r2, [r5, #28]
 8013032:	3418      	adds	r4, #24
 8013034:	e7d5      	b.n	8012fe2 <_realloc_r+0x16a>
 8013036:	0021      	movs	r1, r4
 8013038:	0038      	movs	r0, r7
 801303a:	f003 fdac 	bl	8016b96 <memmove>
 801303e:	e7d6      	b.n	8012fee <_realloc_r+0x176>
 8013040:	9a01      	ldr	r2, [sp, #4]
 8013042:	42b2      	cmp	r2, r6
 8013044:	dc35      	bgt.n	80130b2 <_realloc_r+0x23a>
 8013046:	0028      	movs	r0, r5
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	3008      	adds	r0, #8
 801304e:	60da      	str	r2, [r3, #12]
 8013050:	6093      	str	r3, [r2, #8]
 8013052:	68aa      	ldr	r2, [r5, #8]
 8013054:	68eb      	ldr	r3, [r5, #12]
 8013056:	60d3      	str	r3, [r2, #12]
 8013058:	609a      	str	r2, [r3, #8]
 801305a:	9a04      	ldr	r2, [sp, #16]
 801305c:	3a04      	subs	r2, #4
 801305e:	2a24      	cmp	r2, #36	; 0x24
 8013060:	d823      	bhi.n	80130aa <_realloc_r+0x232>
 8013062:	2a13      	cmp	r2, #19
 8013064:	d907      	bls.n	8013076 <_realloc_r+0x1fe>
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	60ab      	str	r3, [r5, #8]
 801306a:	6863      	ldr	r3, [r4, #4]
 801306c:	60eb      	str	r3, [r5, #12]
 801306e:	2a1b      	cmp	r2, #27
 8013070:	d809      	bhi.n	8013086 <_realloc_r+0x20e>
 8013072:	3408      	adds	r4, #8
 8013074:	3008      	adds	r0, #8
 8013076:	6823      	ldr	r3, [r4, #0]
 8013078:	6003      	str	r3, [r0, #0]
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	6043      	str	r3, [r0, #4]
 801307e:	68a3      	ldr	r3, [r4, #8]
 8013080:	6083      	str	r3, [r0, #8]
 8013082:	9502      	str	r5, [sp, #8]
 8013084:	e75c      	b.n	8012f40 <_realloc_r+0xc8>
 8013086:	68a3      	ldr	r3, [r4, #8]
 8013088:	612b      	str	r3, [r5, #16]
 801308a:	68e3      	ldr	r3, [r4, #12]
 801308c:	616b      	str	r3, [r5, #20]
 801308e:	2a24      	cmp	r2, #36	; 0x24
 8013090:	d003      	beq.n	801309a <_realloc_r+0x222>
 8013092:	0028      	movs	r0, r5
 8013094:	3410      	adds	r4, #16
 8013096:	3018      	adds	r0, #24
 8013098:	e7ed      	b.n	8013076 <_realloc_r+0x1fe>
 801309a:	0028      	movs	r0, r5
 801309c:	6923      	ldr	r3, [r4, #16]
 801309e:	3020      	adds	r0, #32
 80130a0:	61ab      	str	r3, [r5, #24]
 80130a2:	6963      	ldr	r3, [r4, #20]
 80130a4:	3418      	adds	r4, #24
 80130a6:	61eb      	str	r3, [r5, #28]
 80130a8:	e7e5      	b.n	8013076 <_realloc_r+0x1fe>
 80130aa:	0021      	movs	r1, r4
 80130ac:	f003 fd73 	bl	8016b96 <memmove>
 80130b0:	e7e7      	b.n	8013082 <_realloc_r+0x20a>
 80130b2:	9b01      	ldr	r3, [sp, #4]
 80130b4:	42bb      	cmp	r3, r7
 80130b6:	dc31      	bgt.n	801311c <_realloc_r+0x2a4>
 80130b8:	0028      	movs	r0, r5
 80130ba:	68aa      	ldr	r2, [r5, #8]
 80130bc:	68eb      	ldr	r3, [r5, #12]
 80130be:	3008      	adds	r0, #8
 80130c0:	60d3      	str	r3, [r2, #12]
 80130c2:	609a      	str	r2, [r3, #8]
 80130c4:	9a04      	ldr	r2, [sp, #16]
 80130c6:	3a04      	subs	r2, #4
 80130c8:	2a24      	cmp	r2, #36	; 0x24
 80130ca:	d823      	bhi.n	8013114 <_realloc_r+0x29c>
 80130cc:	2a13      	cmp	r2, #19
 80130ce:	d907      	bls.n	80130e0 <_realloc_r+0x268>
 80130d0:	6823      	ldr	r3, [r4, #0]
 80130d2:	60ab      	str	r3, [r5, #8]
 80130d4:	6863      	ldr	r3, [r4, #4]
 80130d6:	60eb      	str	r3, [r5, #12]
 80130d8:	2a1b      	cmp	r2, #27
 80130da:	d809      	bhi.n	80130f0 <_realloc_r+0x278>
 80130dc:	3408      	adds	r4, #8
 80130de:	3008      	adds	r0, #8
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	6003      	str	r3, [r0, #0]
 80130e4:	6863      	ldr	r3, [r4, #4]
 80130e6:	6043      	str	r3, [r0, #4]
 80130e8:	68a3      	ldr	r3, [r4, #8]
 80130ea:	6083      	str	r3, [r0, #8]
 80130ec:	003e      	movs	r6, r7
 80130ee:	e7c8      	b.n	8013082 <_realloc_r+0x20a>
 80130f0:	68a3      	ldr	r3, [r4, #8]
 80130f2:	612b      	str	r3, [r5, #16]
 80130f4:	68e3      	ldr	r3, [r4, #12]
 80130f6:	616b      	str	r3, [r5, #20]
 80130f8:	2a24      	cmp	r2, #36	; 0x24
 80130fa:	d003      	beq.n	8013104 <_realloc_r+0x28c>
 80130fc:	0028      	movs	r0, r5
 80130fe:	3410      	adds	r4, #16
 8013100:	3018      	adds	r0, #24
 8013102:	e7ed      	b.n	80130e0 <_realloc_r+0x268>
 8013104:	0028      	movs	r0, r5
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	3020      	adds	r0, #32
 801310a:	61ab      	str	r3, [r5, #24]
 801310c:	6963      	ldr	r3, [r4, #20]
 801310e:	3418      	adds	r4, #24
 8013110:	61eb      	str	r3, [r5, #28]
 8013112:	e7e5      	b.n	80130e0 <_realloc_r+0x268>
 8013114:	0021      	movs	r1, r4
 8013116:	f003 fd3e 	bl	8016b96 <memmove>
 801311a:	e7e7      	b.n	80130ec <_realloc_r+0x274>
 801311c:	9905      	ldr	r1, [sp, #20]
 801311e:	9803      	ldr	r0, [sp, #12]
 8013120:	f7ff fc2c 	bl	801297c <_malloc_r>
 8013124:	1e07      	subs	r7, r0, #0
 8013126:	d100      	bne.n	801312a <_realloc_r+0x2b2>
 8013128:	e76f      	b.n	801300a <_realloc_r+0x192>
 801312a:	0023      	movs	r3, r4
 801312c:	2201      	movs	r2, #1
 801312e:	3b08      	subs	r3, #8
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	4393      	bics	r3, r2
 8013134:	9a02      	ldr	r2, [sp, #8]
 8013136:	18d3      	adds	r3, r2, r3
 8013138:	0002      	movs	r2, r0
 801313a:	3a08      	subs	r2, #8
 801313c:	4293      	cmp	r3, r2
 801313e:	d105      	bne.n	801314c <_realloc_r+0x2d4>
 8013140:	685e      	ldr	r6, [r3, #4]
 8013142:	2303      	movs	r3, #3
 8013144:	439e      	bics	r6, r3
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	18f6      	adds	r6, r6, r3
 801314a:	e6f9      	b.n	8012f40 <_realloc_r+0xc8>
 801314c:	9a04      	ldr	r2, [sp, #16]
 801314e:	3a04      	subs	r2, #4
 8013150:	2a24      	cmp	r2, #36	; 0x24
 8013152:	d82d      	bhi.n	80131b0 <_realloc_r+0x338>
 8013154:	2a13      	cmp	r2, #19
 8013156:	d928      	bls.n	80131aa <_realloc_r+0x332>
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	6003      	str	r3, [r0, #0]
 801315c:	6863      	ldr	r3, [r4, #4]
 801315e:	6043      	str	r3, [r0, #4]
 8013160:	2a1b      	cmp	r2, #27
 8013162:	d80e      	bhi.n	8013182 <_realloc_r+0x30a>
 8013164:	0022      	movs	r2, r4
 8013166:	0003      	movs	r3, r0
 8013168:	3208      	adds	r2, #8
 801316a:	3308      	adds	r3, #8
 801316c:	6811      	ldr	r1, [r2, #0]
 801316e:	6019      	str	r1, [r3, #0]
 8013170:	6851      	ldr	r1, [r2, #4]
 8013172:	6059      	str	r1, [r3, #4]
 8013174:	6892      	ldr	r2, [r2, #8]
 8013176:	609a      	str	r2, [r3, #8]
 8013178:	0021      	movs	r1, r4
 801317a:	9803      	ldr	r0, [sp, #12]
 801317c:	f003 f90a 	bl	8016394 <_free_r>
 8013180:	e743      	b.n	801300a <_realloc_r+0x192>
 8013182:	68a3      	ldr	r3, [r4, #8]
 8013184:	6083      	str	r3, [r0, #8]
 8013186:	68e3      	ldr	r3, [r4, #12]
 8013188:	60c3      	str	r3, [r0, #12]
 801318a:	2a24      	cmp	r2, #36	; 0x24
 801318c:	d004      	beq.n	8013198 <_realloc_r+0x320>
 801318e:	0022      	movs	r2, r4
 8013190:	0003      	movs	r3, r0
 8013192:	3210      	adds	r2, #16
 8013194:	3310      	adds	r3, #16
 8013196:	e7e9      	b.n	801316c <_realloc_r+0x2f4>
 8013198:	6923      	ldr	r3, [r4, #16]
 801319a:	0022      	movs	r2, r4
 801319c:	6103      	str	r3, [r0, #16]
 801319e:	0003      	movs	r3, r0
 80131a0:	6961      	ldr	r1, [r4, #20]
 80131a2:	3218      	adds	r2, #24
 80131a4:	3318      	adds	r3, #24
 80131a6:	6141      	str	r1, [r0, #20]
 80131a8:	e7e0      	b.n	801316c <_realloc_r+0x2f4>
 80131aa:	0003      	movs	r3, r0
 80131ac:	0022      	movs	r2, r4
 80131ae:	e7dd      	b.n	801316c <_realloc_r+0x2f4>
 80131b0:	0021      	movs	r1, r4
 80131b2:	f003 fcf0 	bl	8016b96 <memmove>
 80131b6:	e7df      	b.n	8013178 <_realloc_r+0x300>
 80131b8:	9e04      	ldr	r6, [sp, #16]
 80131ba:	e6c1      	b.n	8012f40 <_realloc_r+0xc8>
 80131bc:	9902      	ldr	r1, [sp, #8]
 80131be:	4306      	orrs	r6, r0
 80131c0:	604e      	str	r6, [r1, #4]
 80131c2:	6851      	ldr	r1, [r2, #4]
 80131c4:	430b      	orrs	r3, r1
 80131c6:	6053      	str	r3, [r2, #4]
 80131c8:	e6d6      	b.n	8012f78 <_realloc_r+0x100>
 80131ca:	46c0      	nop			; (mov r8, r8)
 80131cc:	200005fc 	.word	0x200005fc

080131d0 <_sbrk_r>:
 80131d0:	2300      	movs	r3, #0
 80131d2:	b570      	push	{r4, r5, r6, lr}
 80131d4:	4c06      	ldr	r4, [pc, #24]	; (80131f0 <_sbrk_r+0x20>)
 80131d6:	0005      	movs	r5, r0
 80131d8:	0008      	movs	r0, r1
 80131da:	6023      	str	r3, [r4, #0]
 80131dc:	f004 f9ec 	bl	80175b8 <_sbrk>
 80131e0:	1c43      	adds	r3, r0, #1
 80131e2:	d103      	bne.n	80131ec <_sbrk_r+0x1c>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d000      	beq.n	80131ec <_sbrk_r+0x1c>
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	46c0      	nop			; (mov r8, r8)
 80131f0:	20006cb4 	.word	0x20006cb4

080131f4 <sprintf>:
 80131f4:	b40e      	push	{r1, r2, r3}
 80131f6:	b500      	push	{lr}
 80131f8:	490b      	ldr	r1, [pc, #44]	; (8013228 <sprintf+0x34>)
 80131fa:	b09c      	sub	sp, #112	; 0x70
 80131fc:	ab1d      	add	r3, sp, #116	; 0x74
 80131fe:	9002      	str	r0, [sp, #8]
 8013200:	9006      	str	r0, [sp, #24]
 8013202:	9107      	str	r1, [sp, #28]
 8013204:	9104      	str	r1, [sp, #16]
 8013206:	4809      	ldr	r0, [pc, #36]	; (801322c <sprintf+0x38>)
 8013208:	4909      	ldr	r1, [pc, #36]	; (8013230 <sprintf+0x3c>)
 801320a:	cb04      	ldmia	r3!, {r2}
 801320c:	9105      	str	r1, [sp, #20]
 801320e:	6800      	ldr	r0, [r0, #0]
 8013210:	a902      	add	r1, sp, #8
 8013212:	9301      	str	r3, [sp, #4]
 8013214:	f000 ff78 	bl	8014108 <_svfprintf_r>
 8013218:	2300      	movs	r3, #0
 801321a:	9a02      	ldr	r2, [sp, #8]
 801321c:	7013      	strb	r3, [r2, #0]
 801321e:	b01c      	add	sp, #112	; 0x70
 8013220:	bc08      	pop	{r3}
 8013222:	b003      	add	sp, #12
 8013224:	4718      	bx	r3
 8013226:	46c0      	nop			; (mov r8, r8)
 8013228:	7fffffff 	.word	0x7fffffff
 801322c:	20000064 	.word	0x20000064
 8013230:	ffff0208 	.word	0xffff0208

08013234 <strcat>:
 8013234:	0002      	movs	r2, r0
 8013236:	b510      	push	{r4, lr}
 8013238:	7813      	ldrb	r3, [r2, #0]
 801323a:	1c54      	adds	r4, r2, #1
 801323c:	2b00      	cmp	r3, #0
 801323e:	d105      	bne.n	801324c <strcat+0x18>
 8013240:	5ccc      	ldrb	r4, [r1, r3]
 8013242:	54d4      	strb	r4, [r2, r3]
 8013244:	3301      	adds	r3, #1
 8013246:	2c00      	cmp	r4, #0
 8013248:	d1fa      	bne.n	8013240 <strcat+0xc>
 801324a:	bd10      	pop	{r4, pc}
 801324c:	0022      	movs	r2, r4
 801324e:	e7f3      	b.n	8013238 <strcat+0x4>

08013250 <strchr>:
 8013250:	b2c9      	uxtb	r1, r1
 8013252:	7803      	ldrb	r3, [r0, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d004      	beq.n	8013262 <strchr+0x12>
 8013258:	428b      	cmp	r3, r1
 801325a:	d100      	bne.n	801325e <strchr+0xe>
 801325c:	4770      	bx	lr
 801325e:	3001      	adds	r0, #1
 8013260:	e7f7      	b.n	8013252 <strchr+0x2>
 8013262:	424b      	negs	r3, r1
 8013264:	4159      	adcs	r1, r3
 8013266:	4249      	negs	r1, r1
 8013268:	4008      	ands	r0, r1
 801326a:	e7f7      	b.n	801325c <strchr+0xc>

0801326c <strcpy>:
 801326c:	0003      	movs	r3, r0
 801326e:	780a      	ldrb	r2, [r1, #0]
 8013270:	3101      	adds	r1, #1
 8013272:	701a      	strb	r2, [r3, #0]
 8013274:	3301      	adds	r3, #1
 8013276:	2a00      	cmp	r2, #0
 8013278:	d1f9      	bne.n	801326e <strcpy+0x2>
 801327a:	4770      	bx	lr

0801327c <strncmp>:
 801327c:	2300      	movs	r3, #0
 801327e:	b530      	push	{r4, r5, lr}
 8013280:	429a      	cmp	r2, r3
 8013282:	d00a      	beq.n	801329a <strncmp+0x1e>
 8013284:	3a01      	subs	r2, #1
 8013286:	5cc4      	ldrb	r4, [r0, r3]
 8013288:	5ccd      	ldrb	r5, [r1, r3]
 801328a:	42ac      	cmp	r4, r5
 801328c:	d104      	bne.n	8013298 <strncmp+0x1c>
 801328e:	4293      	cmp	r3, r2
 8013290:	d002      	beq.n	8013298 <strncmp+0x1c>
 8013292:	3301      	adds	r3, #1
 8013294:	2c00      	cmp	r4, #0
 8013296:	d1f6      	bne.n	8013286 <strncmp+0xa>
 8013298:	1b63      	subs	r3, r4, r5
 801329a:	0018      	movs	r0, r3
 801329c:	bd30      	pop	{r4, r5, pc}

0801329e <strncpy>:
 801329e:	b530      	push	{r4, r5, lr}
 80132a0:	0005      	movs	r5, r0
 80132a2:	2a00      	cmp	r2, #0
 80132a4:	d100      	bne.n	80132a8 <strncpy+0xa>
 80132a6:	bd30      	pop	{r4, r5, pc}
 80132a8:	780c      	ldrb	r4, [r1, #0]
 80132aa:	3a01      	subs	r2, #1
 80132ac:	1c6b      	adds	r3, r5, #1
 80132ae:	702c      	strb	r4, [r5, #0]
 80132b0:	3101      	adds	r1, #1
 80132b2:	2c00      	cmp	r4, #0
 80132b4:	d105      	bne.n	80132c2 <strncpy+0x24>
 80132b6:	189a      	adds	r2, r3, r2
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d0f4      	beq.n	80132a6 <strncpy+0x8>
 80132bc:	701c      	strb	r4, [r3, #0]
 80132be:	3301      	adds	r3, #1
 80132c0:	e7fa      	b.n	80132b8 <strncpy+0x1a>
 80132c2:	001d      	movs	r5, r3
 80132c4:	e7ed      	b.n	80132a2 <strncpy+0x4>
	...

080132c8 <sulp>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	0016      	movs	r6, r2
 80132cc:	000d      	movs	r5, r1
 80132ce:	f003 ff17 	bl	8017100 <__ulp>
 80132d2:	2e00      	cmp	r6, #0
 80132d4:	d00d      	beq.n	80132f2 <sulp+0x2a>
 80132d6:	236b      	movs	r3, #107	; 0x6b
 80132d8:	006a      	lsls	r2, r5, #1
 80132da:	0d52      	lsrs	r2, r2, #21
 80132dc:	1a9b      	subs	r3, r3, r2
 80132de:	2b00      	cmp	r3, #0
 80132e0:	dd07      	ble.n	80132f2 <sulp+0x2a>
 80132e2:	2400      	movs	r4, #0
 80132e4:	4a03      	ldr	r2, [pc, #12]	; (80132f4 <sulp+0x2c>)
 80132e6:	051b      	lsls	r3, r3, #20
 80132e8:	189d      	adds	r5, r3, r2
 80132ea:	002b      	movs	r3, r5
 80132ec:	0022      	movs	r2, r4
 80132ee:	f7ee fed7 	bl	80020a0 <__aeabi_dmul>
 80132f2:	bd70      	pop	{r4, r5, r6, pc}
 80132f4:	3ff00000 	.word	0x3ff00000

080132f8 <_strtod_l>:
 80132f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fa:	b0a7      	sub	sp, #156	; 0x9c
 80132fc:	9307      	str	r3, [sp, #28]
 80132fe:	2300      	movs	r3, #0
 8013300:	9004      	str	r0, [sp, #16]
 8013302:	9807      	ldr	r0, [sp, #28]
 8013304:	9322      	str	r3, [sp, #136]	; 0x88
 8013306:	9106      	str	r1, [sp, #24]
 8013308:	921d      	str	r2, [sp, #116]	; 0x74
 801330a:	f003 fc28 	bl	8016b5e <__localeconv_l>
 801330e:	0005      	movs	r5, r0
 8013310:	6800      	ldr	r0, [r0, #0]
 8013312:	f7ec ff01 	bl	8000118 <strlen>
 8013316:	2600      	movs	r6, #0
 8013318:	2700      	movs	r7, #0
 801331a:	9b06      	ldr	r3, [sp, #24]
 801331c:	9005      	str	r0, [sp, #20]
 801331e:	9321      	str	r3, [sp, #132]	; 0x84
 8013320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013322:	781a      	ldrb	r2, [r3, #0]
 8013324:	2a0d      	cmp	r2, #13
 8013326:	d839      	bhi.n	801339c <_strtod_l+0xa4>
 8013328:	2a09      	cmp	r2, #9
 801332a:	d23d      	bcs.n	80133a8 <_strtod_l+0xb0>
 801332c:	2a00      	cmp	r2, #0
 801332e:	d044      	beq.n	80133ba <_strtod_l+0xc2>
 8013330:	2300      	movs	r3, #0
 8013332:	9313      	str	r3, [sp, #76]	; 0x4c
 8013334:	2200      	movs	r2, #0
 8013336:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8013338:	920c      	str	r2, [sp, #48]	; 0x30
 801333a:	7823      	ldrb	r3, [r4, #0]
 801333c:	2b30      	cmp	r3, #48	; 0x30
 801333e:	d000      	beq.n	8013342 <_strtod_l+0x4a>
 8013340:	e07e      	b.n	8013440 <_strtod_l+0x148>
 8013342:	7863      	ldrb	r3, [r4, #1]
 8013344:	2b58      	cmp	r3, #88	; 0x58
 8013346:	d002      	beq.n	801334e <_strtod_l+0x56>
 8013348:	2b78      	cmp	r3, #120	; 0x78
 801334a:	d000      	beq.n	801334e <_strtod_l+0x56>
 801334c:	e06e      	b.n	801342c <_strtod_l+0x134>
 801334e:	9b07      	ldr	r3, [sp, #28]
 8013350:	4a96      	ldr	r2, [pc, #600]	; (80135ac <_strtod_l+0x2b4>)
 8013352:	9302      	str	r3, [sp, #8]
 8013354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013356:	a921      	add	r1, sp, #132	; 0x84
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	ab22      	add	r3, sp, #136	; 0x88
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	9804      	ldr	r0, [sp, #16]
 8013360:	ab23      	add	r3, sp, #140	; 0x8c
 8013362:	f003 f914 	bl	801658e <__gethex>
 8013366:	2507      	movs	r5, #7
 8013368:	9005      	str	r0, [sp, #20]
 801336a:	4005      	ands	r5, r0
 801336c:	d005      	beq.n	801337a <_strtod_l+0x82>
 801336e:	2d06      	cmp	r5, #6
 8013370:	d12f      	bne.n	80133d2 <_strtod_l+0xda>
 8013372:	2300      	movs	r3, #0
 8013374:	3401      	adds	r4, #1
 8013376:	9421      	str	r4, [sp, #132]	; 0x84
 8013378:	9313      	str	r3, [sp, #76]	; 0x4c
 801337a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <_strtod_l+0x8e>
 8013380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013382:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013384:	601a      	str	r2, [r3, #0]
 8013386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013388:	2b00      	cmp	r3, #0
 801338a:	d01d      	beq.n	80133c8 <_strtod_l+0xd0>
 801338c:	2380      	movs	r3, #128	; 0x80
 801338e:	0032      	movs	r2, r6
 8013390:	061b      	lsls	r3, r3, #24
 8013392:	18fb      	adds	r3, r7, r3
 8013394:	0010      	movs	r0, r2
 8013396:	0019      	movs	r1, r3
 8013398:	b027      	add	sp, #156	; 0x9c
 801339a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801339c:	2a2b      	cmp	r2, #43	; 0x2b
 801339e:	d016      	beq.n	80133ce <_strtod_l+0xd6>
 80133a0:	2a2d      	cmp	r2, #45	; 0x2d
 80133a2:	d003      	beq.n	80133ac <_strtod_l+0xb4>
 80133a4:	2a20      	cmp	r2, #32
 80133a6:	d1c3      	bne.n	8013330 <_strtod_l+0x38>
 80133a8:	3301      	adds	r3, #1
 80133aa:	e7b8      	b.n	801331e <_strtod_l+0x26>
 80133ac:	2201      	movs	r2, #1
 80133ae:	9213      	str	r2, [sp, #76]	; 0x4c
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	9221      	str	r2, [sp, #132]	; 0x84
 80133b4:	785b      	ldrb	r3, [r3, #1]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1bc      	bne.n	8013334 <_strtod_l+0x3c>
 80133ba:	9b06      	ldr	r3, [sp, #24]
 80133bc:	9321      	str	r3, [sp, #132]	; 0x84
 80133be:	2300      	movs	r3, #0
 80133c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80133c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d1db      	bne.n	8013380 <_strtod_l+0x88>
 80133c8:	0032      	movs	r2, r6
 80133ca:	003b      	movs	r3, r7
 80133cc:	e7e2      	b.n	8013394 <_strtod_l+0x9c>
 80133ce:	2200      	movs	r2, #0
 80133d0:	e7ed      	b.n	80133ae <_strtod_l+0xb6>
 80133d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	d007      	beq.n	80133e8 <_strtod_l+0xf0>
 80133d8:	2135      	movs	r1, #53	; 0x35
 80133da:	a824      	add	r0, sp, #144	; 0x90
 80133dc:	f003 ff7d 	bl	80172da <__copybits>
 80133e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80133e2:	9804      	ldr	r0, [sp, #16]
 80133e4:	f003 fc12 	bl	8016c0c <_Bfree>
 80133e8:	1e68      	subs	r0, r5, #1
 80133ea:	2804      	cmp	r0, #4
 80133ec:	d806      	bhi.n	80133fc <_strtod_l+0x104>
 80133ee:	f7ec fe9b 	bl	8000128 <__gnu_thumb1_case_uqi>
 80133f2:	030c      	.short	0x030c
 80133f4:	1917      	.short	0x1917
 80133f6:	0c          	.byte	0x0c
 80133f7:	00          	.byte	0x00
 80133f8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80133fa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80133fc:	9b05      	ldr	r3, [sp, #20]
 80133fe:	071b      	lsls	r3, r3, #28
 8013400:	d5bb      	bpl.n	801337a <_strtod_l+0x82>
 8013402:	2380      	movs	r3, #128	; 0x80
 8013404:	061b      	lsls	r3, r3, #24
 8013406:	431f      	orrs	r7, r3
 8013408:	e7b7      	b.n	801337a <_strtod_l+0x82>
 801340a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801340c:	4a68      	ldr	r2, [pc, #416]	; (80135b0 <_strtod_l+0x2b8>)
 801340e:	4969      	ldr	r1, [pc, #420]	; (80135b4 <_strtod_l+0x2bc>)
 8013410:	401a      	ands	r2, r3
 8013412:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013414:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013416:	185b      	adds	r3, r3, r1
 8013418:	051b      	lsls	r3, r3, #20
 801341a:	431a      	orrs	r2, r3
 801341c:	0017      	movs	r7, r2
 801341e:	e7ed      	b.n	80133fc <_strtod_l+0x104>
 8013420:	4f65      	ldr	r7, [pc, #404]	; (80135b8 <_strtod_l+0x2c0>)
 8013422:	e7eb      	b.n	80133fc <_strtod_l+0x104>
 8013424:	2601      	movs	r6, #1
 8013426:	4f65      	ldr	r7, [pc, #404]	; (80135bc <_strtod_l+0x2c4>)
 8013428:	4276      	negs	r6, r6
 801342a:	e7e7      	b.n	80133fc <_strtod_l+0x104>
 801342c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801342e:	1c5a      	adds	r2, r3, #1
 8013430:	9221      	str	r2, [sp, #132]	; 0x84
 8013432:	785b      	ldrb	r3, [r3, #1]
 8013434:	2b30      	cmp	r3, #48	; 0x30
 8013436:	d0f9      	beq.n	801342c <_strtod_l+0x134>
 8013438:	2b00      	cmp	r3, #0
 801343a:	d09e      	beq.n	801337a <_strtod_l+0x82>
 801343c:	2301      	movs	r3, #1
 801343e:	930c      	str	r3, [sp, #48]	; 0x30
 8013440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013442:	220a      	movs	r2, #10
 8013444:	9312      	str	r3, [sp, #72]	; 0x48
 8013446:	2300      	movs	r3, #0
 8013448:	930b      	str	r3, [sp, #44]	; 0x2c
 801344a:	9308      	str	r3, [sp, #32]
 801344c:	930a      	str	r3, [sp, #40]	; 0x28
 801344e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013450:	7804      	ldrb	r4, [r0, #0]
 8013452:	0023      	movs	r3, r4
 8013454:	3b30      	subs	r3, #48	; 0x30
 8013456:	b2d9      	uxtb	r1, r3
 8013458:	2909      	cmp	r1, #9
 801345a:	d934      	bls.n	80134c6 <_strtod_l+0x1ce>
 801345c:	9a05      	ldr	r2, [sp, #20]
 801345e:	6829      	ldr	r1, [r5, #0]
 8013460:	f7ff ff0c 	bl	801327c <strncmp>
 8013464:	2800      	cmp	r0, #0
 8013466:	d040      	beq.n	80134ea <_strtod_l+0x1f2>
 8013468:	2000      	movs	r0, #0
 801346a:	0023      	movs	r3, r4
 801346c:	4684      	mov	ip, r0
 801346e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013470:	9007      	str	r0, [sp, #28]
 8013472:	9205      	str	r2, [sp, #20]
 8013474:	2220      	movs	r2, #32
 8013476:	0019      	movs	r1, r3
 8013478:	4391      	bics	r1, r2
 801347a:	000a      	movs	r2, r1
 801347c:	2100      	movs	r1, #0
 801347e:	2a45      	cmp	r2, #69	; 0x45
 8013480:	d000      	beq.n	8013484 <_strtod_l+0x18c>
 8013482:	e0bf      	b.n	8013604 <_strtod_l+0x30c>
 8013484:	9b05      	ldr	r3, [sp, #20]
 8013486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013488:	4303      	orrs	r3, r0
 801348a:	4313      	orrs	r3, r2
 801348c:	428b      	cmp	r3, r1
 801348e:	d094      	beq.n	80133ba <_strtod_l+0xc2>
 8013490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013492:	9306      	str	r3, [sp, #24]
 8013494:	3301      	adds	r3, #1
 8013496:	9321      	str	r3, [sp, #132]	; 0x84
 8013498:	9b06      	ldr	r3, [sp, #24]
 801349a:	785b      	ldrb	r3, [r3, #1]
 801349c:	2b2b      	cmp	r3, #43	; 0x2b
 801349e:	d100      	bne.n	80134a2 <_strtod_l+0x1aa>
 80134a0:	e082      	b.n	80135a8 <_strtod_l+0x2b0>
 80134a2:	000c      	movs	r4, r1
 80134a4:	2b2d      	cmp	r3, #45	; 0x2d
 80134a6:	d105      	bne.n	80134b4 <_strtod_l+0x1bc>
 80134a8:	2401      	movs	r4, #1
 80134aa:	9b06      	ldr	r3, [sp, #24]
 80134ac:	3302      	adds	r3, #2
 80134ae:	9321      	str	r3, [sp, #132]	; 0x84
 80134b0:	9b06      	ldr	r3, [sp, #24]
 80134b2:	789b      	ldrb	r3, [r3, #2]
 80134b4:	001a      	movs	r2, r3
 80134b6:	3a30      	subs	r2, #48	; 0x30
 80134b8:	2a09      	cmp	r2, #9
 80134ba:	d800      	bhi.n	80134be <_strtod_l+0x1c6>
 80134bc:	e084      	b.n	80135c8 <_strtod_l+0x2d0>
 80134be:	9a06      	ldr	r2, [sp, #24]
 80134c0:	2100      	movs	r1, #0
 80134c2:	9221      	str	r2, [sp, #132]	; 0x84
 80134c4:	e09e      	b.n	8013604 <_strtod_l+0x30c>
 80134c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80134c8:	2908      	cmp	r1, #8
 80134ca:	dc09      	bgt.n	80134e0 <_strtod_l+0x1e8>
 80134cc:	9908      	ldr	r1, [sp, #32]
 80134ce:	4351      	muls	r1, r2
 80134d0:	18cb      	adds	r3, r1, r3
 80134d2:	9308      	str	r3, [sp, #32]
 80134d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d6:	3001      	adds	r0, #1
 80134d8:	3301      	adds	r3, #1
 80134da:	930a      	str	r3, [sp, #40]	; 0x28
 80134dc:	9021      	str	r0, [sp, #132]	; 0x84
 80134de:	e7b6      	b.n	801344e <_strtod_l+0x156>
 80134e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80134e2:	4351      	muls	r1, r2
 80134e4:	18cb      	adds	r3, r1, r3
 80134e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134e8:	e7f4      	b.n	80134d4 <_strtod_l+0x1dc>
 80134ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134ec:	9b05      	ldr	r3, [sp, #20]
 80134ee:	4694      	mov	ip, r2
 80134f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134f2:	4463      	add	r3, ip
 80134f4:	9321      	str	r3, [sp, #132]	; 0x84
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	d036      	beq.n	801356a <_strtod_l+0x272>
 80134fc:	4684      	mov	ip, r0
 80134fe:	9205      	str	r2, [sp, #20]
 8013500:	001a      	movs	r2, r3
 8013502:	3a30      	subs	r2, #48	; 0x30
 8013504:	2a09      	cmp	r2, #9
 8013506:	d912      	bls.n	801352e <_strtod_l+0x236>
 8013508:	2201      	movs	r2, #1
 801350a:	9207      	str	r2, [sp, #28]
 801350c:	e7b2      	b.n	8013474 <_strtod_l+0x17c>
 801350e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013510:	3001      	adds	r0, #1
 8013512:	1c5a      	adds	r2, r3, #1
 8013514:	9221      	str	r2, [sp, #132]	; 0x84
 8013516:	785b      	ldrb	r3, [r3, #1]
 8013518:	2b30      	cmp	r3, #48	; 0x30
 801351a:	d0f8      	beq.n	801350e <_strtod_l+0x216>
 801351c:	001a      	movs	r2, r3
 801351e:	3a31      	subs	r2, #49	; 0x31
 8013520:	2a08      	cmp	r2, #8
 8013522:	d83c      	bhi.n	801359e <_strtod_l+0x2a6>
 8013524:	4684      	mov	ip, r0
 8013526:	2000      	movs	r0, #0
 8013528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801352a:	9005      	str	r0, [sp, #20]
 801352c:	9212      	str	r2, [sp, #72]	; 0x48
 801352e:	3b30      	subs	r3, #48	; 0x30
 8013530:	1c42      	adds	r2, r0, #1
 8013532:	2b00      	cmp	r3, #0
 8013534:	d013      	beq.n	801355e <_strtod_l+0x266>
 8013536:	210a      	movs	r1, #10
 8013538:	4494      	add	ip, r2
 801353a:	9a05      	ldr	r2, [sp, #20]
 801353c:	1885      	adds	r5, r0, r2
 801353e:	42aa      	cmp	r2, r5
 8013540:	d115      	bne.n	801356e <_strtod_l+0x276>
 8013542:	9905      	ldr	r1, [sp, #20]
 8013544:	9a05      	ldr	r2, [sp, #20]
 8013546:	3101      	adds	r1, #1
 8013548:	1809      	adds	r1, r1, r0
 801354a:	1812      	adds	r2, r2, r0
 801354c:	9105      	str	r1, [sp, #20]
 801354e:	2a08      	cmp	r2, #8
 8013550:	dc1b      	bgt.n	801358a <_strtod_l+0x292>
 8013552:	220a      	movs	r2, #10
 8013554:	9908      	ldr	r1, [sp, #32]
 8013556:	434a      	muls	r2, r1
 8013558:	189b      	adds	r3, r3, r2
 801355a:	2200      	movs	r2, #0
 801355c:	9308      	str	r3, [sp, #32]
 801355e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013560:	0010      	movs	r0, r2
 8013562:	1c59      	adds	r1, r3, #1
 8013564:	9121      	str	r1, [sp, #132]	; 0x84
 8013566:	785b      	ldrb	r3, [r3, #1]
 8013568:	e7ca      	b.n	8013500 <_strtod_l+0x208>
 801356a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801356c:	e7d4      	b.n	8013518 <_strtod_l+0x220>
 801356e:	1c54      	adds	r4, r2, #1
 8013570:	2a08      	cmp	r2, #8
 8013572:	dc04      	bgt.n	801357e <_strtod_l+0x286>
 8013574:	9a08      	ldr	r2, [sp, #32]
 8013576:	434a      	muls	r2, r1
 8013578:	9208      	str	r2, [sp, #32]
 801357a:	0022      	movs	r2, r4
 801357c:	e7df      	b.n	801353e <_strtod_l+0x246>
 801357e:	2c10      	cmp	r4, #16
 8013580:	dcfb      	bgt.n	801357a <_strtod_l+0x282>
 8013582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013584:	434a      	muls	r2, r1
 8013586:	920b      	str	r2, [sp, #44]	; 0x2c
 8013588:	e7f7      	b.n	801357a <_strtod_l+0x282>
 801358a:	9905      	ldr	r1, [sp, #20]
 801358c:	2200      	movs	r2, #0
 801358e:	2910      	cmp	r1, #16
 8013590:	dce5      	bgt.n	801355e <_strtod_l+0x266>
 8013592:	210a      	movs	r1, #10
 8013594:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013596:	4341      	muls	r1, r0
 8013598:	185b      	adds	r3, r3, r1
 801359a:	930b      	str	r3, [sp, #44]	; 0x2c
 801359c:	e7df      	b.n	801355e <_strtod_l+0x266>
 801359e:	2200      	movs	r2, #0
 80135a0:	4694      	mov	ip, r2
 80135a2:	9205      	str	r2, [sp, #20]
 80135a4:	3201      	adds	r2, #1
 80135a6:	e7b0      	b.n	801350a <_strtod_l+0x212>
 80135a8:	000c      	movs	r4, r1
 80135aa:	e77e      	b.n	80134aa <_strtod_l+0x1b2>
 80135ac:	0801a558 	.word	0x0801a558
 80135b0:	ffefffff 	.word	0xffefffff
 80135b4:	00000433 	.word	0x00000433
 80135b8:	7ff00000 	.word	0x7ff00000
 80135bc:	7fffffff 	.word	0x7fffffff
 80135c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135c2:	1c5a      	adds	r2, r3, #1
 80135c4:	9221      	str	r2, [sp, #132]	; 0x84
 80135c6:	785b      	ldrb	r3, [r3, #1]
 80135c8:	2b30      	cmp	r3, #48	; 0x30
 80135ca:	d0f9      	beq.n	80135c0 <_strtod_l+0x2c8>
 80135cc:	001a      	movs	r2, r3
 80135ce:	3a31      	subs	r2, #49	; 0x31
 80135d0:	2100      	movs	r1, #0
 80135d2:	2a08      	cmp	r2, #8
 80135d4:	d816      	bhi.n	8013604 <_strtod_l+0x30c>
 80135d6:	3b30      	subs	r3, #48	; 0x30
 80135d8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80135da:	930e      	str	r3, [sp, #56]	; 0x38
 80135dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135de:	1c59      	adds	r1, r3, #1
 80135e0:	9121      	str	r1, [sp, #132]	; 0x84
 80135e2:	785b      	ldrb	r3, [r3, #1]
 80135e4:	001a      	movs	r2, r3
 80135e6:	3a30      	subs	r2, #48	; 0x30
 80135e8:	2a09      	cmp	r2, #9
 80135ea:	d932      	bls.n	8013652 <_strtod_l+0x35a>
 80135ec:	1b4a      	subs	r2, r1, r5
 80135ee:	4dad      	ldr	r5, [pc, #692]	; (80138a4 <_strtod_l+0x5ac>)
 80135f0:	0029      	movs	r1, r5
 80135f2:	2a08      	cmp	r2, #8
 80135f4:	dc03      	bgt.n	80135fe <_strtod_l+0x306>
 80135f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80135f8:	42a9      	cmp	r1, r5
 80135fa:	dd00      	ble.n	80135fe <_strtod_l+0x306>
 80135fc:	0029      	movs	r1, r5
 80135fe:	2c00      	cmp	r4, #0
 8013600:	d000      	beq.n	8013604 <_strtod_l+0x30c>
 8013602:	4249      	negs	r1, r1
 8013604:	9a05      	ldr	r2, [sp, #20]
 8013606:	2a00      	cmp	r2, #0
 8013608:	d149      	bne.n	801369e <_strtod_l+0x3a6>
 801360a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801360c:	4310      	orrs	r0, r2
 801360e:	d000      	beq.n	8013612 <_strtod_l+0x31a>
 8013610:	e6b3      	b.n	801337a <_strtod_l+0x82>
 8013612:	9a07      	ldr	r2, [sp, #28]
 8013614:	2a00      	cmp	r2, #0
 8013616:	d000      	beq.n	801361a <_strtod_l+0x322>
 8013618:	e6cf      	b.n	80133ba <_strtod_l+0xc2>
 801361a:	2b4e      	cmp	r3, #78	; 0x4e
 801361c:	d025      	beq.n	801366a <_strtod_l+0x372>
 801361e:	dc1f      	bgt.n	8013660 <_strtod_l+0x368>
 8013620:	2b49      	cmp	r3, #73	; 0x49
 8013622:	d000      	beq.n	8013626 <_strtod_l+0x32e>
 8013624:	e6c9      	b.n	80133ba <_strtod_l+0xc2>
 8013626:	49a0      	ldr	r1, [pc, #640]	; (80138a8 <_strtod_l+0x5b0>)
 8013628:	a821      	add	r0, sp, #132	; 0x84
 801362a:	f003 f9ed 	bl	8016a08 <__match>
 801362e:	2800      	cmp	r0, #0
 8013630:	d100      	bne.n	8013634 <_strtod_l+0x33c>
 8013632:	e6c2      	b.n	80133ba <_strtod_l+0xc2>
 8013634:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013636:	499d      	ldr	r1, [pc, #628]	; (80138ac <_strtod_l+0x5b4>)
 8013638:	3b01      	subs	r3, #1
 801363a:	a821      	add	r0, sp, #132	; 0x84
 801363c:	9321      	str	r3, [sp, #132]	; 0x84
 801363e:	f003 f9e3 	bl	8016a08 <__match>
 8013642:	2800      	cmp	r0, #0
 8013644:	d102      	bne.n	801364c <_strtod_l+0x354>
 8013646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013648:	3301      	adds	r3, #1
 801364a:	9321      	str	r3, [sp, #132]	; 0x84
 801364c:	4f98      	ldr	r7, [pc, #608]	; (80138b0 <_strtod_l+0x5b8>)
 801364e:	2600      	movs	r6, #0
 8013650:	e693      	b.n	801337a <_strtod_l+0x82>
 8013652:	220a      	movs	r2, #10
 8013654:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013656:	434a      	muls	r2, r1
 8013658:	18d2      	adds	r2, r2, r3
 801365a:	3a30      	subs	r2, #48	; 0x30
 801365c:	920e      	str	r2, [sp, #56]	; 0x38
 801365e:	e7bd      	b.n	80135dc <_strtod_l+0x2e4>
 8013660:	2b69      	cmp	r3, #105	; 0x69
 8013662:	d0e0      	beq.n	8013626 <_strtod_l+0x32e>
 8013664:	2b6e      	cmp	r3, #110	; 0x6e
 8013666:	d000      	beq.n	801366a <_strtod_l+0x372>
 8013668:	e6a7      	b.n	80133ba <_strtod_l+0xc2>
 801366a:	4992      	ldr	r1, [pc, #584]	; (80138b4 <_strtod_l+0x5bc>)
 801366c:	a821      	add	r0, sp, #132	; 0x84
 801366e:	f003 f9cb 	bl	8016a08 <__match>
 8013672:	2800      	cmp	r0, #0
 8013674:	d100      	bne.n	8013678 <_strtod_l+0x380>
 8013676:	e6a0      	b.n	80133ba <_strtod_l+0xc2>
 8013678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	2b28      	cmp	r3, #40	; 0x28
 801367e:	d10c      	bne.n	801369a <_strtod_l+0x3a2>
 8013680:	aa24      	add	r2, sp, #144	; 0x90
 8013682:	498d      	ldr	r1, [pc, #564]	; (80138b8 <_strtod_l+0x5c0>)
 8013684:	a821      	add	r0, sp, #132	; 0x84
 8013686:	f003 f9d3 	bl	8016a30 <__hexnan>
 801368a:	2805      	cmp	r0, #5
 801368c:	d105      	bne.n	801369a <_strtod_l+0x3a2>
 801368e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013690:	4a87      	ldr	r2, [pc, #540]	; (80138b0 <_strtod_l+0x5b8>)
 8013692:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013694:	431a      	orrs	r2, r3
 8013696:	0017      	movs	r7, r2
 8013698:	e66f      	b.n	801337a <_strtod_l+0x82>
 801369a:	4f88      	ldr	r7, [pc, #544]	; (80138bc <_strtod_l+0x5c4>)
 801369c:	e7d7      	b.n	801364e <_strtod_l+0x356>
 801369e:	4663      	mov	r3, ip
 80136a0:	1acb      	subs	r3, r1, r3
 80136a2:	9307      	str	r3, [sp, #28]
 80136a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d101      	bne.n	80136ae <_strtod_l+0x3b6>
 80136aa:	9b05      	ldr	r3, [sp, #20]
 80136ac:	930a      	str	r3, [sp, #40]	; 0x28
 80136ae:	9c05      	ldr	r4, [sp, #20]
 80136b0:	2c10      	cmp	r4, #16
 80136b2:	dd00      	ble.n	80136b6 <_strtod_l+0x3be>
 80136b4:	2410      	movs	r4, #16
 80136b6:	9808      	ldr	r0, [sp, #32]
 80136b8:	f7ef fb38 	bl	8002d2c <__aeabi_ui2d>
 80136bc:	9b05      	ldr	r3, [sp, #20]
 80136be:	0006      	movs	r6, r0
 80136c0:	000f      	movs	r7, r1
 80136c2:	2b09      	cmp	r3, #9
 80136c4:	dc15      	bgt.n	80136f2 <_strtod_l+0x3fa>
 80136c6:	9b07      	ldr	r3, [sp, #28]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d100      	bne.n	80136ce <_strtod_l+0x3d6>
 80136cc:	e655      	b.n	801337a <_strtod_l+0x82>
 80136ce:	9b07      	ldr	r3, [sp, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	dc00      	bgt.n	80136d6 <_strtod_l+0x3de>
 80136d4:	e07d      	b.n	80137d2 <_strtod_l+0x4da>
 80136d6:	2b16      	cmp	r3, #22
 80136d8:	dc62      	bgt.n	80137a0 <_strtod_l+0x4a8>
 80136da:	00dc      	lsls	r4, r3, #3
 80136dc:	4b78      	ldr	r3, [pc, #480]	; (80138c0 <_strtod_l+0x5c8>)
 80136de:	0032      	movs	r2, r6
 80136e0:	1919      	adds	r1, r3, r4
 80136e2:	003b      	movs	r3, r7
 80136e4:	6808      	ldr	r0, [r1, #0]
 80136e6:	6849      	ldr	r1, [r1, #4]
 80136e8:	f7ee fcda 	bl	80020a0 <__aeabi_dmul>
 80136ec:	0006      	movs	r6, r0
 80136ee:	000f      	movs	r7, r1
 80136f0:	e643      	b.n	801337a <_strtod_l+0x82>
 80136f2:	0022      	movs	r2, r4
 80136f4:	4b72      	ldr	r3, [pc, #456]	; (80138c0 <_strtod_l+0x5c8>)
 80136f6:	3a09      	subs	r2, #9
 80136f8:	00d2      	lsls	r2, r2, #3
 80136fa:	189b      	adds	r3, r3, r2
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	f7ee fcce 	bl	80020a0 <__aeabi_dmul>
 8013704:	0006      	movs	r6, r0
 8013706:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013708:	000f      	movs	r7, r1
 801370a:	f7ef fb0f 	bl	8002d2c <__aeabi_ui2d>
 801370e:	000b      	movs	r3, r1
 8013710:	0002      	movs	r2, r0
 8013712:	0039      	movs	r1, r7
 8013714:	0030      	movs	r0, r6
 8013716:	f7ed fd9d 	bl	8001254 <__aeabi_dadd>
 801371a:	9b05      	ldr	r3, [sp, #20]
 801371c:	0006      	movs	r6, r0
 801371e:	000f      	movs	r7, r1
 8013720:	2b0f      	cmp	r3, #15
 8013722:	ddd0      	ble.n	80136c6 <_strtod_l+0x3ce>
 8013724:	9b05      	ldr	r3, [sp, #20]
 8013726:	1b1c      	subs	r4, r3, r4
 8013728:	9b07      	ldr	r3, [sp, #28]
 801372a:	18e4      	adds	r4, r4, r3
 801372c:	2c00      	cmp	r4, #0
 801372e:	dc00      	bgt.n	8013732 <_strtod_l+0x43a>
 8013730:	e094      	b.n	801385c <_strtod_l+0x564>
 8013732:	230f      	movs	r3, #15
 8013734:	4023      	ands	r3, r4
 8013736:	d00a      	beq.n	801374e <_strtod_l+0x456>
 8013738:	4961      	ldr	r1, [pc, #388]	; (80138c0 <_strtod_l+0x5c8>)
 801373a:	00db      	lsls	r3, r3, #3
 801373c:	18c9      	adds	r1, r1, r3
 801373e:	0032      	movs	r2, r6
 8013740:	6808      	ldr	r0, [r1, #0]
 8013742:	6849      	ldr	r1, [r1, #4]
 8013744:	003b      	movs	r3, r7
 8013746:	f7ee fcab 	bl	80020a0 <__aeabi_dmul>
 801374a:	0006      	movs	r6, r0
 801374c:	000f      	movs	r7, r1
 801374e:	230f      	movs	r3, #15
 8013750:	439c      	bics	r4, r3
 8013752:	d06e      	beq.n	8013832 <_strtod_l+0x53a>
 8013754:	3326      	adds	r3, #38	; 0x26
 8013756:	33ff      	adds	r3, #255	; 0xff
 8013758:	429c      	cmp	r4, r3
 801375a:	dd48      	ble.n	80137ee <_strtod_l+0x4f6>
 801375c:	2400      	movs	r4, #0
 801375e:	9405      	str	r4, [sp, #20]
 8013760:	940b      	str	r4, [sp, #44]	; 0x2c
 8013762:	940a      	str	r4, [sp, #40]	; 0x28
 8013764:	2322      	movs	r3, #34	; 0x22
 8013766:	2600      	movs	r6, #0
 8013768:	9a04      	ldr	r2, [sp, #16]
 801376a:	4f51      	ldr	r7, [pc, #324]	; (80138b0 <_strtod_l+0x5b8>)
 801376c:	6013      	str	r3, [r2, #0]
 801376e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013770:	42b3      	cmp	r3, r6
 8013772:	d100      	bne.n	8013776 <_strtod_l+0x47e>
 8013774:	e601      	b.n	801337a <_strtod_l+0x82>
 8013776:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013778:	9804      	ldr	r0, [sp, #16]
 801377a:	f003 fa47 	bl	8016c0c <_Bfree>
 801377e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013780:	9804      	ldr	r0, [sp, #16]
 8013782:	f003 fa43 	bl	8016c0c <_Bfree>
 8013786:	9905      	ldr	r1, [sp, #20]
 8013788:	9804      	ldr	r0, [sp, #16]
 801378a:	f003 fa3f 	bl	8016c0c <_Bfree>
 801378e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013790:	9804      	ldr	r0, [sp, #16]
 8013792:	f003 fa3b 	bl	8016c0c <_Bfree>
 8013796:	0021      	movs	r1, r4
 8013798:	9804      	ldr	r0, [sp, #16]
 801379a:	f003 fa37 	bl	8016c0c <_Bfree>
 801379e:	e5ec      	b.n	801337a <_strtod_l+0x82>
 80137a0:	2325      	movs	r3, #37	; 0x25
 80137a2:	9a05      	ldr	r2, [sp, #20]
 80137a4:	1a9b      	subs	r3, r3, r2
 80137a6:	9a07      	ldr	r2, [sp, #28]
 80137a8:	4293      	cmp	r3, r2
 80137aa:	dbbb      	blt.n	8013724 <_strtod_l+0x42c>
 80137ac:	230f      	movs	r3, #15
 80137ae:	9a05      	ldr	r2, [sp, #20]
 80137b0:	4c43      	ldr	r4, [pc, #268]	; (80138c0 <_strtod_l+0x5c8>)
 80137b2:	1a9d      	subs	r5, r3, r2
 80137b4:	00e9      	lsls	r1, r5, #3
 80137b6:	1861      	adds	r1, r4, r1
 80137b8:	0032      	movs	r2, r6
 80137ba:	6808      	ldr	r0, [r1, #0]
 80137bc:	6849      	ldr	r1, [r1, #4]
 80137be:	003b      	movs	r3, r7
 80137c0:	f7ee fc6e 	bl	80020a0 <__aeabi_dmul>
 80137c4:	9b07      	ldr	r3, [sp, #28]
 80137c6:	1b5e      	subs	r6, r3, r5
 80137c8:	00f6      	lsls	r6, r6, #3
 80137ca:	19a6      	adds	r6, r4, r6
 80137cc:	6832      	ldr	r2, [r6, #0]
 80137ce:	6873      	ldr	r3, [r6, #4]
 80137d0:	e78a      	b.n	80136e8 <_strtod_l+0x3f0>
 80137d2:	9b07      	ldr	r3, [sp, #28]
 80137d4:	3316      	adds	r3, #22
 80137d6:	dba5      	blt.n	8013724 <_strtod_l+0x42c>
 80137d8:	9b07      	ldr	r3, [sp, #28]
 80137da:	0030      	movs	r0, r6
 80137dc:	00da      	lsls	r2, r3, #3
 80137de:	4b38      	ldr	r3, [pc, #224]	; (80138c0 <_strtod_l+0x5c8>)
 80137e0:	0039      	movs	r1, r7
 80137e2:	1a9b      	subs	r3, r3, r2
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	f7ee f850 	bl	800188c <__aeabi_ddiv>
 80137ec:	e77e      	b.n	80136ec <_strtod_l+0x3f4>
 80137ee:	2300      	movs	r3, #0
 80137f0:	0030      	movs	r0, r6
 80137f2:	0039      	movs	r1, r7
 80137f4:	001d      	movs	r5, r3
 80137f6:	1124      	asrs	r4, r4, #4
 80137f8:	2c01      	cmp	r4, #1
 80137fa:	dc1d      	bgt.n	8013838 <_strtod_l+0x540>
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <_strtod_l+0x50c>
 8013800:	0006      	movs	r6, r0
 8013802:	000f      	movs	r7, r1
 8013804:	4b2f      	ldr	r3, [pc, #188]	; (80138c4 <_strtod_l+0x5cc>)
 8013806:	00ed      	lsls	r5, r5, #3
 8013808:	18ff      	adds	r7, r7, r3
 801380a:	4b2f      	ldr	r3, [pc, #188]	; (80138c8 <_strtod_l+0x5d0>)
 801380c:	0032      	movs	r2, r6
 801380e:	195d      	adds	r5, r3, r5
 8013810:	6828      	ldr	r0, [r5, #0]
 8013812:	6869      	ldr	r1, [r5, #4]
 8013814:	003b      	movs	r3, r7
 8013816:	f7ee fc43 	bl	80020a0 <__aeabi_dmul>
 801381a:	4b25      	ldr	r3, [pc, #148]	; (80138b0 <_strtod_l+0x5b8>)
 801381c:	4a2b      	ldr	r2, [pc, #172]	; (80138cc <_strtod_l+0x5d4>)
 801381e:	0006      	movs	r6, r0
 8013820:	400b      	ands	r3, r1
 8013822:	4293      	cmp	r3, r2
 8013824:	d89a      	bhi.n	801375c <_strtod_l+0x464>
 8013826:	4a2a      	ldr	r2, [pc, #168]	; (80138d0 <_strtod_l+0x5d8>)
 8013828:	4293      	cmp	r3, r2
 801382a:	d913      	bls.n	8013854 <_strtod_l+0x55c>
 801382c:	2601      	movs	r6, #1
 801382e:	4f29      	ldr	r7, [pc, #164]	; (80138d4 <_strtod_l+0x5dc>)
 8013830:	4276      	negs	r6, r6
 8013832:	2300      	movs	r3, #0
 8013834:	9306      	str	r3, [sp, #24]
 8013836:	e07b      	b.n	8013930 <_strtod_l+0x638>
 8013838:	2201      	movs	r2, #1
 801383a:	4214      	tst	r4, r2
 801383c:	d007      	beq.n	801384e <_strtod_l+0x556>
 801383e:	4a22      	ldr	r2, [pc, #136]	; (80138c8 <_strtod_l+0x5d0>)
 8013840:	00eb      	lsls	r3, r5, #3
 8013842:	189b      	adds	r3, r3, r2
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	f7ee fc2a 	bl	80020a0 <__aeabi_dmul>
 801384c:	2301      	movs	r3, #1
 801384e:	3501      	adds	r5, #1
 8013850:	1064      	asrs	r4, r4, #1
 8013852:	e7d1      	b.n	80137f8 <_strtod_l+0x500>
 8013854:	23d4      	movs	r3, #212	; 0xd4
 8013856:	049b      	lsls	r3, r3, #18
 8013858:	18cf      	adds	r7, r1, r3
 801385a:	e7ea      	b.n	8013832 <_strtod_l+0x53a>
 801385c:	2c00      	cmp	r4, #0
 801385e:	d0e8      	beq.n	8013832 <_strtod_l+0x53a>
 8013860:	230f      	movs	r3, #15
 8013862:	4264      	negs	r4, r4
 8013864:	4023      	ands	r3, r4
 8013866:	d00a      	beq.n	801387e <_strtod_l+0x586>
 8013868:	4a15      	ldr	r2, [pc, #84]	; (80138c0 <_strtod_l+0x5c8>)
 801386a:	00db      	lsls	r3, r3, #3
 801386c:	18d3      	adds	r3, r2, r3
 801386e:	0030      	movs	r0, r6
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	0039      	movs	r1, r7
 8013876:	f7ee f809 	bl	800188c <__aeabi_ddiv>
 801387a:	0006      	movs	r6, r0
 801387c:	000f      	movs	r7, r1
 801387e:	1124      	asrs	r4, r4, #4
 8013880:	d0d7      	beq.n	8013832 <_strtod_l+0x53a>
 8013882:	2c1f      	cmp	r4, #31
 8013884:	dd28      	ble.n	80138d8 <_strtod_l+0x5e0>
 8013886:	2400      	movs	r4, #0
 8013888:	9405      	str	r4, [sp, #20]
 801388a:	940b      	str	r4, [sp, #44]	; 0x2c
 801388c:	940a      	str	r4, [sp, #40]	; 0x28
 801388e:	2322      	movs	r3, #34	; 0x22
 8013890:	9a04      	ldr	r2, [sp, #16]
 8013892:	2600      	movs	r6, #0
 8013894:	6013      	str	r3, [r2, #0]
 8013896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013898:	2700      	movs	r7, #0
 801389a:	2b00      	cmp	r3, #0
 801389c:	d000      	beq.n	80138a0 <_strtod_l+0x5a8>
 801389e:	e76a      	b.n	8013776 <_strtod_l+0x47e>
 80138a0:	e56b      	b.n	801337a <_strtod_l+0x82>
 80138a2:	46c0      	nop			; (mov r8, r8)
 80138a4:	00004e1f 	.word	0x00004e1f
 80138a8:	0801a5ad 	.word	0x0801a5ad
 80138ac:	0801a700 	.word	0x0801a700
 80138b0:	7ff00000 	.word	0x7ff00000
 80138b4:	0801a5b5 	.word	0x0801a5b5
 80138b8:	0801a56c 	.word	0x0801a56c
 80138bc:	fff80000 	.word	0xfff80000
 80138c0:	0801a738 	.word	0x0801a738
 80138c4:	fcb00000 	.word	0xfcb00000
 80138c8:	0801a710 	.word	0x0801a710
 80138cc:	7ca00000 	.word	0x7ca00000
 80138d0:	7c900000 	.word	0x7c900000
 80138d4:	7fefffff 	.word	0x7fefffff
 80138d8:	2310      	movs	r3, #16
 80138da:	4023      	ands	r3, r4
 80138dc:	9306      	str	r3, [sp, #24]
 80138de:	d001      	beq.n	80138e4 <_strtod_l+0x5ec>
 80138e0:	236a      	movs	r3, #106	; 0x6a
 80138e2:	9306      	str	r3, [sp, #24]
 80138e4:	2300      	movs	r3, #0
 80138e6:	0030      	movs	r0, r6
 80138e8:	0039      	movs	r1, r7
 80138ea:	001d      	movs	r5, r3
 80138ec:	2c00      	cmp	r4, #0
 80138ee:	dd00      	ble.n	80138f2 <_strtod_l+0x5fa>
 80138f0:	e10e      	b.n	8013b10 <_strtod_l+0x818>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d001      	beq.n	80138fa <_strtod_l+0x602>
 80138f6:	0006      	movs	r6, r0
 80138f8:	000f      	movs	r7, r1
 80138fa:	9b06      	ldr	r3, [sp, #24]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00f      	beq.n	8013920 <_strtod_l+0x628>
 8013900:	236b      	movs	r3, #107	; 0x6b
 8013902:	0079      	lsls	r1, r7, #1
 8013904:	0d49      	lsrs	r1, r1, #21
 8013906:	003a      	movs	r2, r7
 8013908:	1a5b      	subs	r3, r3, r1
 801390a:	2b00      	cmp	r3, #0
 801390c:	dd08      	ble.n	8013920 <_strtod_l+0x628>
 801390e:	2b1f      	cmp	r3, #31
 8013910:	dc00      	bgt.n	8013914 <_strtod_l+0x61c>
 8013912:	e112      	b.n	8013b3a <_strtod_l+0x842>
 8013914:	2600      	movs	r6, #0
 8013916:	2b34      	cmp	r3, #52	; 0x34
 8013918:	dc00      	bgt.n	801391c <_strtod_l+0x624>
 801391a:	e107      	b.n	8013b2c <_strtod_l+0x834>
 801391c:	27dc      	movs	r7, #220	; 0xdc
 801391e:	04bf      	lsls	r7, r7, #18
 8013920:	2200      	movs	r2, #0
 8013922:	2300      	movs	r3, #0
 8013924:	0030      	movs	r0, r6
 8013926:	0039      	movs	r1, r7
 8013928:	f7ec fd98 	bl	800045c <__aeabi_dcmpeq>
 801392c:	2800      	cmp	r0, #0
 801392e:	d1aa      	bne.n	8013886 <_strtod_l+0x58e>
 8013930:	9b08      	ldr	r3, [sp, #32]
 8013932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013938:	9b05      	ldr	r3, [sp, #20]
 801393a:	9804      	ldr	r0, [sp, #16]
 801393c:	f003 f9ae 	bl	8016c9c <__s2b>
 8013940:	900b      	str	r0, [sp, #44]	; 0x2c
 8013942:	2800      	cmp	r0, #0
 8013944:	d100      	bne.n	8013948 <_strtod_l+0x650>
 8013946:	e709      	b.n	801375c <_strtod_l+0x464>
 8013948:	9b07      	ldr	r3, [sp, #28]
 801394a:	9a07      	ldr	r2, [sp, #28]
 801394c:	17db      	asrs	r3, r3, #31
 801394e:	4252      	negs	r2, r2
 8013950:	4013      	ands	r3, r2
 8013952:	9315      	str	r3, [sp, #84]	; 0x54
 8013954:	9b07      	ldr	r3, [sp, #28]
 8013956:	2400      	movs	r4, #0
 8013958:	43db      	mvns	r3, r3
 801395a:	9a07      	ldr	r2, [sp, #28]
 801395c:	17db      	asrs	r3, r3, #31
 801395e:	401a      	ands	r2, r3
 8013960:	921c      	str	r2, [sp, #112]	; 0x70
 8013962:	9405      	str	r4, [sp, #20]
 8013964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013966:	9804      	ldr	r0, [sp, #16]
 8013968:	6859      	ldr	r1, [r3, #4]
 801396a:	f003 f927 	bl	8016bbc <_Balloc>
 801396e:	900a      	str	r0, [sp, #40]	; 0x28
 8013970:	2800      	cmp	r0, #0
 8013972:	d100      	bne.n	8013976 <_strtod_l+0x67e>
 8013974:	e6f6      	b.n	8013764 <_strtod_l+0x46c>
 8013976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	310c      	adds	r1, #12
 801397e:	1c9a      	adds	r2, r3, #2
 8013980:	0092      	lsls	r2, r2, #2
 8013982:	300c      	adds	r0, #12
 8013984:	9308      	str	r3, [sp, #32]
 8013986:	f7ff fa32 	bl	8012dee <memcpy>
 801398a:	ab24      	add	r3, sp, #144	; 0x90
 801398c:	9301      	str	r3, [sp, #4]
 801398e:	ab23      	add	r3, sp, #140	; 0x8c
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	0032      	movs	r2, r6
 8013994:	003b      	movs	r3, r7
 8013996:	9804      	ldr	r0, [sp, #16]
 8013998:	960e      	str	r6, [sp, #56]	; 0x38
 801399a:	970f      	str	r7, [sp, #60]	; 0x3c
 801399c:	f003 fc22 	bl	80171e4 <__d2b>
 80139a0:	9022      	str	r0, [sp, #136]	; 0x88
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d100      	bne.n	80139a8 <_strtod_l+0x6b0>
 80139a6:	e6dd      	b.n	8013764 <_strtod_l+0x46c>
 80139a8:	2101      	movs	r1, #1
 80139aa:	9804      	ldr	r0, [sp, #16]
 80139ac:	f003 f9fd 	bl	8016daa <__i2b>
 80139b0:	9005      	str	r0, [sp, #20]
 80139b2:	2800      	cmp	r0, #0
 80139b4:	d100      	bne.n	80139b8 <_strtod_l+0x6c0>
 80139b6:	e6d5      	b.n	8013764 <_strtod_l+0x46c>
 80139b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	da00      	bge.n	80139c0 <_strtod_l+0x6c8>
 80139be:	e0c1      	b.n	8013b44 <_strtod_l+0x84c>
 80139c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80139c2:	189d      	adds	r5, r3, r2
 80139c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80139c6:	4694      	mov	ip, r2
 80139c8:	9906      	ldr	r1, [sp, #24]
 80139ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80139cc:	1a5b      	subs	r3, r3, r1
 80139ce:	2136      	movs	r1, #54	; 0x36
 80139d0:	189b      	adds	r3, r3, r2
 80139d2:	1a8a      	subs	r2, r1, r2
 80139d4:	49b2      	ldr	r1, [pc, #712]	; (8013ca0 <_strtod_l+0x9a8>)
 80139d6:	3b01      	subs	r3, #1
 80139d8:	2001      	movs	r0, #1
 80139da:	428b      	cmp	r3, r1
 80139dc:	db00      	blt.n	80139e0 <_strtod_l+0x6e8>
 80139de:	e0bd      	b.n	8013b5c <_strtod_l+0x864>
 80139e0:	1ac9      	subs	r1, r1, r3
 80139e2:	1a52      	subs	r2, r2, r1
 80139e4:	291f      	cmp	r1, #31
 80139e6:	dd00      	ble.n	80139ea <_strtod_l+0x6f2>
 80139e8:	e0b1      	b.n	8013b4e <_strtod_l+0x856>
 80139ea:	4088      	lsls	r0, r1
 80139ec:	2300      	movs	r3, #0
 80139ee:	9014      	str	r0, [sp, #80]	; 0x50
 80139f0:	9310      	str	r3, [sp, #64]	; 0x40
 80139f2:	18ab      	adds	r3, r5, r2
 80139f4:	9308      	str	r3, [sp, #32]
 80139f6:	0013      	movs	r3, r2
 80139f8:	9a06      	ldr	r2, [sp, #24]
 80139fa:	4463      	add	r3, ip
 80139fc:	18d3      	adds	r3, r2, r3
 80139fe:	9a08      	ldr	r2, [sp, #32]
 8013a00:	930c      	str	r3, [sp, #48]	; 0x30
 8013a02:	002b      	movs	r3, r5
 8013a04:	4295      	cmp	r5, r2
 8013a06:	dd00      	ble.n	8013a0a <_strtod_l+0x712>
 8013a08:	0013      	movs	r3, r2
 8013a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	dd00      	ble.n	8013a12 <_strtod_l+0x71a>
 8013a10:	0013      	movs	r3, r2
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	dd06      	ble.n	8013a24 <_strtod_l+0x72c>
 8013a16:	9a08      	ldr	r2, [sp, #32]
 8013a18:	1aed      	subs	r5, r5, r3
 8013a1a:	1ad2      	subs	r2, r2, r3
 8013a1c:	9208      	str	r2, [sp, #32]
 8013a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a20:	1ad2      	subs	r2, r2, r3
 8013a22:	920c      	str	r2, [sp, #48]	; 0x30
 8013a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d017      	beq.n	8013a5a <_strtod_l+0x762>
 8013a2a:	001a      	movs	r2, r3
 8013a2c:	9905      	ldr	r1, [sp, #20]
 8013a2e:	9804      	ldr	r0, [sp, #16]
 8013a30:	f003 fa54 	bl	8016edc <__pow5mult>
 8013a34:	9005      	str	r0, [sp, #20]
 8013a36:	2800      	cmp	r0, #0
 8013a38:	d100      	bne.n	8013a3c <_strtod_l+0x744>
 8013a3a:	e693      	b.n	8013764 <_strtod_l+0x46c>
 8013a3c:	0001      	movs	r1, r0
 8013a3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013a40:	9804      	ldr	r0, [sp, #16]
 8013a42:	f003 f9bb 	bl	8016dbc <__multiply>
 8013a46:	9012      	str	r0, [sp, #72]	; 0x48
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d100      	bne.n	8013a4e <_strtod_l+0x756>
 8013a4c:	e68a      	b.n	8013764 <_strtod_l+0x46c>
 8013a4e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a50:	9804      	ldr	r0, [sp, #16]
 8013a52:	f003 f8db 	bl	8016c0c <_Bfree>
 8013a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a58:	9322      	str	r3, [sp, #136]	; 0x88
 8013a5a:	9b08      	ldr	r3, [sp, #32]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	dd00      	ble.n	8013a62 <_strtod_l+0x76a>
 8013a60:	e07f      	b.n	8013b62 <_strtod_l+0x86a>
 8013a62:	9b07      	ldr	r3, [sp, #28]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	dd08      	ble.n	8013a7a <_strtod_l+0x782>
 8013a68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a6c:	9804      	ldr	r0, [sp, #16]
 8013a6e:	f003 fa35 	bl	8016edc <__pow5mult>
 8013a72:	900a      	str	r0, [sp, #40]	; 0x28
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d100      	bne.n	8013a7a <_strtod_l+0x782>
 8013a78:	e674      	b.n	8013764 <_strtod_l+0x46c>
 8013a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	dd08      	ble.n	8013a92 <_strtod_l+0x79a>
 8013a80:	001a      	movs	r2, r3
 8013a82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a84:	9804      	ldr	r0, [sp, #16]
 8013a86:	f003 fa6b 	bl	8016f60 <__lshift>
 8013a8a:	900a      	str	r0, [sp, #40]	; 0x28
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d100      	bne.n	8013a92 <_strtod_l+0x79a>
 8013a90:	e668      	b.n	8013764 <_strtod_l+0x46c>
 8013a92:	2d00      	cmp	r5, #0
 8013a94:	dd08      	ble.n	8013aa8 <_strtod_l+0x7b0>
 8013a96:	002a      	movs	r2, r5
 8013a98:	9905      	ldr	r1, [sp, #20]
 8013a9a:	9804      	ldr	r0, [sp, #16]
 8013a9c:	f003 fa60 	bl	8016f60 <__lshift>
 8013aa0:	9005      	str	r0, [sp, #20]
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d100      	bne.n	8013aa8 <_strtod_l+0x7b0>
 8013aa6:	e65d      	b.n	8013764 <_strtod_l+0x46c>
 8013aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aaa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013aac:	9804      	ldr	r0, [sp, #16]
 8013aae:	f003 fac3 	bl	8017038 <__mdiff>
 8013ab2:	1e04      	subs	r4, r0, #0
 8013ab4:	d100      	bne.n	8013ab8 <_strtod_l+0x7c0>
 8013ab6:	e655      	b.n	8013764 <_strtod_l+0x46c>
 8013ab8:	2500      	movs	r5, #0
 8013aba:	68c3      	ldr	r3, [r0, #12]
 8013abc:	9905      	ldr	r1, [sp, #20]
 8013abe:	60c5      	str	r5, [r0, #12]
 8013ac0:	9312      	str	r3, [sp, #72]	; 0x48
 8013ac2:	f003 fa9f 	bl	8017004 <__mcmp>
 8013ac6:	42a8      	cmp	r0, r5
 8013ac8:	da55      	bge.n	8013b76 <_strtod_l+0x87e>
 8013aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013acc:	42ab      	cmp	r3, r5
 8013ace:	d11b      	bne.n	8013b08 <_strtod_l+0x810>
 8013ad0:	42ae      	cmp	r6, r5
 8013ad2:	d119      	bne.n	8013b08 <_strtod_l+0x810>
 8013ad4:	033b      	lsls	r3, r7, #12
 8013ad6:	42ab      	cmp	r3, r5
 8013ad8:	d116      	bne.n	8013b08 <_strtod_l+0x810>
 8013ada:	22d6      	movs	r2, #214	; 0xd6
 8013adc:	4b71      	ldr	r3, [pc, #452]	; (8013ca4 <_strtod_l+0x9ac>)
 8013ade:	04d2      	lsls	r2, r2, #19
 8013ae0:	403b      	ands	r3, r7
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d910      	bls.n	8013b08 <_strtod_l+0x810>
 8013ae6:	6963      	ldr	r3, [r4, #20]
 8013ae8:	42ab      	cmp	r3, r5
 8013aea:	d102      	bne.n	8013af2 <_strtod_l+0x7fa>
 8013aec:	6923      	ldr	r3, [r4, #16]
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	dd0a      	ble.n	8013b08 <_strtod_l+0x810>
 8013af2:	0021      	movs	r1, r4
 8013af4:	2201      	movs	r2, #1
 8013af6:	9804      	ldr	r0, [sp, #16]
 8013af8:	f003 fa32 	bl	8016f60 <__lshift>
 8013afc:	9905      	ldr	r1, [sp, #20]
 8013afe:	0004      	movs	r4, r0
 8013b00:	f003 fa80 	bl	8017004 <__mcmp>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	dc6b      	bgt.n	8013be0 <_strtod_l+0x8e8>
 8013b08:	9b06      	ldr	r3, [sp, #24]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d178      	bne.n	8013c00 <_strtod_l+0x908>
 8013b0e:	e632      	b.n	8013776 <_strtod_l+0x47e>
 8013b10:	2201      	movs	r2, #1
 8013b12:	4214      	tst	r4, r2
 8013b14:	d007      	beq.n	8013b26 <_strtod_l+0x82e>
 8013b16:	4a64      	ldr	r2, [pc, #400]	; (8013ca8 <_strtod_l+0x9b0>)
 8013b18:	00eb      	lsls	r3, r5, #3
 8013b1a:	18d3      	adds	r3, r2, r3
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	f7ee fabe 	bl	80020a0 <__aeabi_dmul>
 8013b24:	2301      	movs	r3, #1
 8013b26:	3501      	adds	r5, #1
 8013b28:	1064      	asrs	r4, r4, #1
 8013b2a:	e6df      	b.n	80138ec <_strtod_l+0x5f4>
 8013b2c:	2101      	movs	r1, #1
 8013b2e:	3b20      	subs	r3, #32
 8013b30:	4249      	negs	r1, r1
 8013b32:	4099      	lsls	r1, r3
 8013b34:	400a      	ands	r2, r1
 8013b36:	0017      	movs	r7, r2
 8013b38:	e6f2      	b.n	8013920 <_strtod_l+0x628>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	4252      	negs	r2, r2
 8013b3e:	409a      	lsls	r2, r3
 8013b40:	4016      	ands	r6, r2
 8013b42:	e6ed      	b.n	8013920 <_strtod_l+0x628>
 8013b44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b46:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013b48:	1ad2      	subs	r2, r2, r3
 8013b4a:	4694      	mov	ip, r2
 8013b4c:	e73c      	b.n	80139c8 <_strtod_l+0x6d0>
 8013b4e:	4957      	ldr	r1, [pc, #348]	; (8013cac <_strtod_l+0x9b4>)
 8013b50:	1acb      	subs	r3, r1, r3
 8013b52:	0001      	movs	r1, r0
 8013b54:	4099      	lsls	r1, r3
 8013b56:	9110      	str	r1, [sp, #64]	; 0x40
 8013b58:	9014      	str	r0, [sp, #80]	; 0x50
 8013b5a:	e74a      	b.n	80139f2 <_strtod_l+0x6fa>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	9310      	str	r3, [sp, #64]	; 0x40
 8013b60:	e7fa      	b.n	8013b58 <_strtod_l+0x860>
 8013b62:	9a08      	ldr	r2, [sp, #32]
 8013b64:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013b66:	9804      	ldr	r0, [sp, #16]
 8013b68:	f003 f9fa 	bl	8016f60 <__lshift>
 8013b6c:	9022      	str	r0, [sp, #136]	; 0x88
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	d000      	beq.n	8013b74 <_strtod_l+0x87c>
 8013b72:	e776      	b.n	8013a62 <_strtod_l+0x76a>
 8013b74:	e5f6      	b.n	8013764 <_strtod_l+0x46c>
 8013b76:	970c      	str	r7, [sp, #48]	; 0x30
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d000      	beq.n	8013b7e <_strtod_l+0x886>
 8013b7c:	e0a0      	b.n	8013cc0 <_strtod_l+0x9c8>
 8013b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b80:	033b      	lsls	r3, r7, #12
 8013b82:	0b1b      	lsrs	r3, r3, #12
 8013b84:	2a00      	cmp	r2, #0
 8013b86:	d027      	beq.n	8013bd8 <_strtod_l+0x8e0>
 8013b88:	4a49      	ldr	r2, [pc, #292]	; (8013cb0 <_strtod_l+0x9b8>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d157      	bne.n	8013c3e <_strtod_l+0x946>
 8013b8e:	2201      	movs	r2, #1
 8013b90:	9b06      	ldr	r3, [sp, #24]
 8013b92:	4252      	negs	r2, r2
 8013b94:	0031      	movs	r1, r6
 8013b96:	0010      	movs	r0, r2
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00b      	beq.n	8013bb4 <_strtod_l+0x8bc>
 8013b9c:	25d4      	movs	r5, #212	; 0xd4
 8013b9e:	4b41      	ldr	r3, [pc, #260]	; (8013ca4 <_strtod_l+0x9ac>)
 8013ba0:	04ed      	lsls	r5, r5, #19
 8013ba2:	403b      	ands	r3, r7
 8013ba4:	0010      	movs	r0, r2
 8013ba6:	42ab      	cmp	r3, r5
 8013ba8:	d804      	bhi.n	8013bb4 <_strtod_l+0x8bc>
 8013baa:	306c      	adds	r0, #108	; 0x6c
 8013bac:	0d1b      	lsrs	r3, r3, #20
 8013bae:	1ac3      	subs	r3, r0, r3
 8013bb0:	409a      	lsls	r2, r3
 8013bb2:	0010      	movs	r0, r2
 8013bb4:	4281      	cmp	r1, r0
 8013bb6:	d142      	bne.n	8013c3e <_strtod_l+0x946>
 8013bb8:	4b3e      	ldr	r3, [pc, #248]	; (8013cb4 <_strtod_l+0x9bc>)
 8013bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d102      	bne.n	8013bc6 <_strtod_l+0x8ce>
 8013bc0:	1c4b      	adds	r3, r1, #1
 8013bc2:	d100      	bne.n	8013bc6 <_strtod_l+0x8ce>
 8013bc4:	e5ce      	b.n	8013764 <_strtod_l+0x46c>
 8013bc6:	4b37      	ldr	r3, [pc, #220]	; (8013ca4 <_strtod_l+0x9ac>)
 8013bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bca:	2600      	movs	r6, #0
 8013bcc:	401a      	ands	r2, r3
 8013bce:	0013      	movs	r3, r2
 8013bd0:	2280      	movs	r2, #128	; 0x80
 8013bd2:	0352      	lsls	r2, r2, #13
 8013bd4:	189f      	adds	r7, r3, r2
 8013bd6:	e797      	b.n	8013b08 <_strtod_l+0x810>
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d130      	bne.n	8013c3e <_strtod_l+0x946>
 8013bdc:	2e00      	cmp	r6, #0
 8013bde:	d12e      	bne.n	8013c3e <_strtod_l+0x946>
 8013be0:	9906      	ldr	r1, [sp, #24]
 8013be2:	003b      	movs	r3, r7
 8013be4:	4a2f      	ldr	r2, [pc, #188]	; (8013ca4 <_strtod_l+0x9ac>)
 8013be6:	2900      	cmp	r1, #0
 8013be8:	d020      	beq.n	8013c2c <_strtod_l+0x934>
 8013bea:	0011      	movs	r1, r2
 8013bec:	20d6      	movs	r0, #214	; 0xd6
 8013bee:	4039      	ands	r1, r7
 8013bf0:	04c0      	lsls	r0, r0, #19
 8013bf2:	4281      	cmp	r1, r0
 8013bf4:	dc1a      	bgt.n	8013c2c <_strtod_l+0x934>
 8013bf6:	23dc      	movs	r3, #220	; 0xdc
 8013bf8:	049b      	lsls	r3, r3, #18
 8013bfa:	4299      	cmp	r1, r3
 8013bfc:	dc00      	bgt.n	8013c00 <_strtod_l+0x908>
 8013bfe:	e646      	b.n	801388e <_strtod_l+0x596>
 8013c00:	4b2d      	ldr	r3, [pc, #180]	; (8013cb8 <_strtod_l+0x9c0>)
 8013c02:	0030      	movs	r0, r6
 8013c04:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c06:	2300      	movs	r3, #0
 8013c08:	931a      	str	r3, [sp, #104]	; 0x68
 8013c0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c0e:	0039      	movs	r1, r7
 8013c10:	f7ee fa46 	bl	80020a0 <__aeabi_dmul>
 8013c14:	0006      	movs	r6, r0
 8013c16:	000f      	movs	r7, r1
 8013c18:	1e0b      	subs	r3, r1, #0
 8013c1a:	d000      	beq.n	8013c1e <_strtod_l+0x926>
 8013c1c:	e5ab      	b.n	8013776 <_strtod_l+0x47e>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d000      	beq.n	8013c24 <_strtod_l+0x92c>
 8013c22:	e5a8      	b.n	8013776 <_strtod_l+0x47e>
 8013c24:	9a04      	ldr	r2, [sp, #16]
 8013c26:	3322      	adds	r3, #34	; 0x22
 8013c28:	6013      	str	r3, [r2, #0]
 8013c2a:	e5a4      	b.n	8013776 <_strtod_l+0x47e>
 8013c2c:	2601      	movs	r6, #1
 8013c2e:	4013      	ands	r3, r2
 8013c30:	4a22      	ldr	r2, [pc, #136]	; (8013cbc <_strtod_l+0x9c4>)
 8013c32:	4276      	negs	r6, r6
 8013c34:	189b      	adds	r3, r3, r2
 8013c36:	4a1e      	ldr	r2, [pc, #120]	; (8013cb0 <_strtod_l+0x9b8>)
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	0017      	movs	r7, r2
 8013c3c:	e764      	b.n	8013b08 <_strtod_l+0x810>
 8013c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d015      	beq.n	8013c70 <_strtod_l+0x978>
 8013c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c48:	4213      	tst	r3, r2
 8013c4a:	d100      	bne.n	8013c4e <_strtod_l+0x956>
 8013c4c:	e75c      	b.n	8013b08 <_strtod_l+0x810>
 8013c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c50:	9a06      	ldr	r2, [sp, #24]
 8013c52:	0030      	movs	r0, r6
 8013c54:	0039      	movs	r1, r7
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d00f      	beq.n	8013c7a <_strtod_l+0x982>
 8013c5a:	f7ff fb35 	bl	80132c8 <sulp>
 8013c5e:	0002      	movs	r2, r0
 8013c60:	000b      	movs	r3, r1
 8013c62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c66:	f7ed faf5 	bl	8001254 <__aeabi_dadd>
 8013c6a:	0006      	movs	r6, r0
 8013c6c:	000f      	movs	r7, r1
 8013c6e:	e74b      	b.n	8013b08 <_strtod_l+0x810>
 8013c70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c72:	4233      	tst	r3, r6
 8013c74:	d100      	bne.n	8013c78 <_strtod_l+0x980>
 8013c76:	e747      	b.n	8013b08 <_strtod_l+0x810>
 8013c78:	e7e9      	b.n	8013c4e <_strtod_l+0x956>
 8013c7a:	f7ff fb25 	bl	80132c8 <sulp>
 8013c7e:	0002      	movs	r2, r0
 8013c80:	000b      	movs	r3, r1
 8013c82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c86:	f7ee fc7d 	bl	8002584 <__aeabi_dsub>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	0006      	movs	r6, r0
 8013c90:	000f      	movs	r7, r1
 8013c92:	f7ec fbe3 	bl	800045c <__aeabi_dcmpeq>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d000      	beq.n	8013c9c <_strtod_l+0x9a4>
 8013c9a:	e5f8      	b.n	801388e <_strtod_l+0x596>
 8013c9c:	e734      	b.n	8013b08 <_strtod_l+0x810>
 8013c9e:	46c0      	nop			; (mov r8, r8)
 8013ca0:	fffffc02 	.word	0xfffffc02
 8013ca4:	7ff00000 	.word	0x7ff00000
 8013ca8:	0801a580 	.word	0x0801a580
 8013cac:	fffffbe2 	.word	0xfffffbe2
 8013cb0:	000fffff 	.word	0x000fffff
 8013cb4:	7fefffff 	.word	0x7fefffff
 8013cb8:	39500000 	.word	0x39500000
 8013cbc:	fff00000 	.word	0xfff00000
 8013cc0:	9905      	ldr	r1, [sp, #20]
 8013cc2:	0020      	movs	r0, r4
 8013cc4:	f003 fae2 	bl	801728c <__ratio>
 8013cc8:	2380      	movs	r3, #128	; 0x80
 8013cca:	2200      	movs	r2, #0
 8013ccc:	05db      	lsls	r3, r3, #23
 8013cce:	9008      	str	r0, [sp, #32]
 8013cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8013cd2:	f7ec fbd3 	bl	800047c <__aeabi_dcmple>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d100      	bne.n	8013cdc <_strtod_l+0x9e4>
 8013cda:	e07f      	b.n	8013ddc <_strtod_l+0xae4>
 8013cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d04b      	beq.n	8013d7a <_strtod_l+0xa82>
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	4b8a      	ldr	r3, [pc, #552]	; (8013f10 <_strtod_l+0xc18>)
 8013ce6:	9210      	str	r2, [sp, #64]	; 0x40
 8013ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8013cea:	4b89      	ldr	r3, [pc, #548]	; (8013f10 <_strtod_l+0xc18>)
 8013cec:	9308      	str	r3, [sp, #32]
 8013cee:	4a89      	ldr	r2, [pc, #548]	; (8013f14 <_strtod_l+0xc1c>)
 8013cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	9314      	str	r3, [sp, #80]	; 0x50
 8013cf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013cf8:	4b87      	ldr	r3, [pc, #540]	; (8013f18 <_strtod_l+0xc20>)
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d000      	beq.n	8013d00 <_strtod_l+0xa08>
 8013cfe:	e0ba      	b.n	8013e76 <_strtod_l+0xb7e>
 8013d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d04:	921a      	str	r2, [sp, #104]	; 0x68
 8013d06:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d08:	4a84      	ldr	r2, [pc, #528]	; (8013f1c <_strtod_l+0xc24>)
 8013d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d0c:	4694      	mov	ip, r2
 8013d0e:	4463      	add	r3, ip
 8013d10:	001f      	movs	r7, r3
 8013d12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d16:	0030      	movs	r0, r6
 8013d18:	0039      	movs	r1, r7
 8013d1a:	920c      	str	r2, [sp, #48]	; 0x30
 8013d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8013d1e:	f003 f9ef 	bl	8017100 <__ulp>
 8013d22:	0002      	movs	r2, r0
 8013d24:	000b      	movs	r3, r1
 8013d26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013d28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d2a:	f7ee f9b9 	bl	80020a0 <__aeabi_dmul>
 8013d2e:	0032      	movs	r2, r6
 8013d30:	003b      	movs	r3, r7
 8013d32:	f7ed fa8f 	bl	8001254 <__aeabi_dadd>
 8013d36:	4a77      	ldr	r2, [pc, #476]	; (8013f14 <_strtod_l+0xc1c>)
 8013d38:	4b79      	ldr	r3, [pc, #484]	; (8013f20 <_strtod_l+0xc28>)
 8013d3a:	0006      	movs	r6, r0
 8013d3c:	400a      	ands	r2, r1
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d964      	bls.n	8013e0c <_strtod_l+0xb14>
 8013d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d44:	4a77      	ldr	r2, [pc, #476]	; (8013f24 <_strtod_l+0xc2c>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d103      	bne.n	8013d52 <_strtod_l+0xa5a>
 8013d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	d100      	bne.n	8013d52 <_strtod_l+0xa5a>
 8013d50:	e508      	b.n	8013764 <_strtod_l+0x46c>
 8013d52:	2601      	movs	r6, #1
 8013d54:	4f73      	ldr	r7, [pc, #460]	; (8013f24 <_strtod_l+0xc2c>)
 8013d56:	4276      	negs	r6, r6
 8013d58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d5a:	9804      	ldr	r0, [sp, #16]
 8013d5c:	f002 ff56 	bl	8016c0c <_Bfree>
 8013d60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d62:	9804      	ldr	r0, [sp, #16]
 8013d64:	f002 ff52 	bl	8016c0c <_Bfree>
 8013d68:	9905      	ldr	r1, [sp, #20]
 8013d6a:	9804      	ldr	r0, [sp, #16]
 8013d6c:	f002 ff4e 	bl	8016c0c <_Bfree>
 8013d70:	0021      	movs	r1, r4
 8013d72:	9804      	ldr	r0, [sp, #16]
 8013d74:	f002 ff4a 	bl	8016c0c <_Bfree>
 8013d78:	e5f4      	b.n	8013964 <_strtod_l+0x66c>
 8013d7a:	2e00      	cmp	r6, #0
 8013d7c:	d11e      	bne.n	8013dbc <_strtod_l+0xac4>
 8013d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d80:	031b      	lsls	r3, r3, #12
 8013d82:	d121      	bne.n	8013dc8 <_strtod_l+0xad0>
 8013d84:	9808      	ldr	r0, [sp, #32]
 8013d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4b61      	ldr	r3, [pc, #388]	; (8013f10 <_strtod_l+0xc18>)
 8013d8c:	f7ec fb6c 	bl	8000468 <__aeabi_dcmplt>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d11f      	bne.n	8013dd4 <_strtod_l+0xadc>
 8013d94:	9808      	ldr	r0, [sp, #32]
 8013d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d98:	2200      	movs	r2, #0
 8013d9a:	4b63      	ldr	r3, [pc, #396]	; (8013f28 <_strtod_l+0xc30>)
 8013d9c:	f7ee f980 	bl	80020a0 <__aeabi_dmul>
 8013da0:	0005      	movs	r5, r0
 8013da2:	9108      	str	r1, [sp, #32]
 8013da4:	2280      	movs	r2, #128	; 0x80
 8013da6:	0612      	lsls	r2, r2, #24
 8013da8:	4694      	mov	ip, r2
 8013daa:	9b08      	ldr	r3, [sp, #32]
 8013dac:	951e      	str	r5, [sp, #120]	; 0x78
 8013dae:	4463      	add	r3, ip
 8013db0:	931f      	str	r3, [sp, #124]	; 0x7c
 8013db2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013db6:	9210      	str	r2, [sp, #64]	; 0x40
 8013db8:	9311      	str	r3, [sp, #68]	; 0x44
 8013dba:	e798      	b.n	8013cee <_strtod_l+0x9f6>
 8013dbc:	2e01      	cmp	r6, #1
 8013dbe:	d103      	bne.n	8013dc8 <_strtod_l+0xad0>
 8013dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d100      	bne.n	8013dc8 <_strtod_l+0xad0>
 8013dc6:	e562      	b.n	801388e <_strtod_l+0x596>
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4b58      	ldr	r3, [pc, #352]	; (8013f2c <_strtod_l+0xc34>)
 8013dcc:	2500      	movs	r5, #0
 8013dce:	9210      	str	r2, [sp, #64]	; 0x40
 8013dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8013dd2:	e78a      	b.n	8013cea <_strtod_l+0x9f2>
 8013dd4:	4b54      	ldr	r3, [pc, #336]	; (8013f28 <_strtod_l+0xc30>)
 8013dd6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013dd8:	9308      	str	r3, [sp, #32]
 8013dda:	e7e3      	b.n	8013da4 <_strtod_l+0xaac>
 8013ddc:	4b52      	ldr	r3, [pc, #328]	; (8013f28 <_strtod_l+0xc30>)
 8013dde:	9808      	ldr	r0, [sp, #32]
 8013de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013de2:	2200      	movs	r2, #0
 8013de4:	f7ee f95c 	bl	80020a0 <__aeabi_dmul>
 8013de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dea:	0005      	movs	r5, r0
 8013dec:	9108      	str	r1, [sp, #32]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d107      	bne.n	8013e02 <_strtod_l+0xb0a>
 8013df2:	2380      	movs	r3, #128	; 0x80
 8013df4:	061b      	lsls	r3, r3, #24
 8013df6:	18cb      	adds	r3, r1, r3
 8013df8:	9016      	str	r0, [sp, #88]	; 0x58
 8013dfa:	9317      	str	r3, [sp, #92]	; 0x5c
 8013dfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e00:	e7d9      	b.n	8013db6 <_strtod_l+0xabe>
 8013e02:	0002      	movs	r2, r0
 8013e04:	9b08      	ldr	r3, [sp, #32]
 8013e06:	9216      	str	r2, [sp, #88]	; 0x58
 8013e08:	9317      	str	r3, [sp, #92]	; 0x5c
 8013e0a:	e7f7      	b.n	8013dfc <_strtod_l+0xb04>
 8013e0c:	23d4      	movs	r3, #212	; 0xd4
 8013e0e:	049b      	lsls	r3, r3, #18
 8013e10:	18cf      	adds	r7, r1, r3
 8013e12:	9b06      	ldr	r3, [sp, #24]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d19f      	bne.n	8013d58 <_strtod_l+0xa60>
 8013e18:	4b3e      	ldr	r3, [pc, #248]	; (8013f14 <_strtod_l+0xc1c>)
 8013e1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e1c:	970c      	str	r7, [sp, #48]	; 0x30
 8013e1e:	403b      	ands	r3, r7
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d199      	bne.n	8013d58 <_strtod_l+0xa60>
 8013e24:	9908      	ldr	r1, [sp, #32]
 8013e26:	0028      	movs	r0, r5
 8013e28:	f7ee ff10 	bl	8002c4c <__aeabi_d2iz>
 8013e2c:	f7ee ff44 	bl	8002cb8 <__aeabi_i2d>
 8013e30:	000b      	movs	r3, r1
 8013e32:	0002      	movs	r2, r0
 8013e34:	9908      	ldr	r1, [sp, #32]
 8013e36:	0028      	movs	r0, r5
 8013e38:	f7ee fba4 	bl	8002584 <__aeabi_dsub>
 8013e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e3e:	9008      	str	r0, [sp, #32]
 8013e40:	9109      	str	r1, [sp, #36]	; 0x24
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d104      	bne.n	8013e50 <_strtod_l+0xb58>
 8013e46:	2e00      	cmp	r6, #0
 8013e48:	d102      	bne.n	8013e50 <_strtod_l+0xb58>
 8013e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e4c:	031b      	lsls	r3, r3, #12
 8013e4e:	d058      	beq.n	8013f02 <_strtod_l+0xc0a>
 8013e50:	9808      	ldr	r0, [sp, #32]
 8013e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e54:	4a36      	ldr	r2, [pc, #216]	; (8013f30 <_strtod_l+0xc38>)
 8013e56:	4b37      	ldr	r3, [pc, #220]	; (8013f34 <_strtod_l+0xc3c>)
 8013e58:	f7ec fb06 	bl	8000468 <__aeabi_dcmplt>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d000      	beq.n	8013e62 <_strtod_l+0xb6a>
 8013e60:	e489      	b.n	8013776 <_strtod_l+0x47e>
 8013e62:	9808      	ldr	r0, [sp, #32]
 8013e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e66:	4a34      	ldr	r2, [pc, #208]	; (8013f38 <_strtod_l+0xc40>)
 8013e68:	4b2f      	ldr	r3, [pc, #188]	; (8013f28 <_strtod_l+0xc30>)
 8013e6a:	f7ec fb11 	bl	8000490 <__aeabi_dcmpgt>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d100      	bne.n	8013e74 <_strtod_l+0xb7c>
 8013e72:	e771      	b.n	8013d58 <_strtod_l+0xa60>
 8013e74:	e47f      	b.n	8013776 <_strtod_l+0x47e>
 8013e76:	9b06      	ldr	r3, [sp, #24]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d02a      	beq.n	8013ed2 <_strtod_l+0xbda>
 8013e7c:	23d4      	movs	r3, #212	; 0xd4
 8013e7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e80:	04db      	lsls	r3, r3, #19
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d825      	bhi.n	8013ed2 <_strtod_l+0xbda>
 8013e86:	4a2d      	ldr	r2, [pc, #180]	; (8013f3c <_strtod_l+0xc44>)
 8013e88:	4b2d      	ldr	r3, [pc, #180]	; (8013f40 <_strtod_l+0xc48>)
 8013e8a:	0028      	movs	r0, r5
 8013e8c:	9908      	ldr	r1, [sp, #32]
 8013e8e:	f7ec faf5 	bl	800047c <__aeabi_dcmple>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d016      	beq.n	8013ec4 <_strtod_l+0xbcc>
 8013e96:	0028      	movs	r0, r5
 8013e98:	9908      	ldr	r1, [sp, #32]
 8013e9a:	f7ec fba9 	bl	80005f0 <__aeabi_d2uiz>
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d100      	bne.n	8013ea4 <_strtod_l+0xbac>
 8013ea2:	3001      	adds	r0, #1
 8013ea4:	f7ee ff42 	bl	8002d2c <__aeabi_ui2d>
 8013ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013eaa:	0005      	movs	r5, r0
 8013eac:	9108      	str	r1, [sp, #32]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d122      	bne.n	8013ef8 <_strtod_l+0xc00>
 8013eb2:	2380      	movs	r3, #128	; 0x80
 8013eb4:	061b      	lsls	r3, r3, #24
 8013eb6:	18cb      	adds	r3, r1, r3
 8013eb8:	9018      	str	r0, [sp, #96]	; 0x60
 8013eba:	9319      	str	r3, [sp, #100]	; 0x64
 8013ebc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ec0:	9210      	str	r2, [sp, #64]	; 0x40
 8013ec2:	9311      	str	r3, [sp, #68]	; 0x44
 8013ec4:	22d6      	movs	r2, #214	; 0xd6
 8013ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ec8:	04d2      	lsls	r2, r2, #19
 8013eca:	189b      	adds	r3, r3, r2
 8013ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ece:	1a9b      	subs	r3, r3, r2
 8013ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ed2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013ed4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ed6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013ed8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013eda:	f003 f911 	bl	8017100 <__ulp>
 8013ede:	0002      	movs	r2, r0
 8013ee0:	000b      	movs	r3, r1
 8013ee2:	0030      	movs	r0, r6
 8013ee4:	0039      	movs	r1, r7
 8013ee6:	f7ee f8db 	bl	80020a0 <__aeabi_dmul>
 8013eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eee:	f7ed f9b1 	bl	8001254 <__aeabi_dadd>
 8013ef2:	0006      	movs	r6, r0
 8013ef4:	000f      	movs	r7, r1
 8013ef6:	e78c      	b.n	8013e12 <_strtod_l+0xb1a>
 8013ef8:	0002      	movs	r2, r0
 8013efa:	9b08      	ldr	r3, [sp, #32]
 8013efc:	9218      	str	r2, [sp, #96]	; 0x60
 8013efe:	9319      	str	r3, [sp, #100]	; 0x64
 8013f00:	e7dc      	b.n	8013ebc <_strtod_l+0xbc4>
 8013f02:	4a0b      	ldr	r2, [pc, #44]	; (8013f30 <_strtod_l+0xc38>)
 8013f04:	4b0f      	ldr	r3, [pc, #60]	; (8013f44 <_strtod_l+0xc4c>)
 8013f06:	9808      	ldr	r0, [sp, #32]
 8013f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f0a:	f7ec faad 	bl	8000468 <__aeabi_dcmplt>
 8013f0e:	e7ae      	b.n	8013e6e <_strtod_l+0xb76>
 8013f10:	3ff00000 	.word	0x3ff00000
 8013f14:	7ff00000 	.word	0x7ff00000
 8013f18:	7fe00000 	.word	0x7fe00000
 8013f1c:	fcb00000 	.word	0xfcb00000
 8013f20:	7c9fffff 	.word	0x7c9fffff
 8013f24:	7fefffff 	.word	0x7fefffff
 8013f28:	3fe00000 	.word	0x3fe00000
 8013f2c:	bff00000 	.word	0xbff00000
 8013f30:	94a03595 	.word	0x94a03595
 8013f34:	3fdfffff 	.word	0x3fdfffff
 8013f38:	35afe535 	.word	0x35afe535
 8013f3c:	ffc00000 	.word	0xffc00000
 8013f40:	41dfffff 	.word	0x41dfffff
 8013f44:	3fcfffff 	.word	0x3fcfffff

08013f48 <strtod>:
 8013f48:	4b06      	ldr	r3, [pc, #24]	; (8013f64 <strtod+0x1c>)
 8013f4a:	b510      	push	{r4, lr}
 8013f4c:	0004      	movs	r4, r0
 8013f4e:	6818      	ldr	r0, [r3, #0]
 8013f50:	000a      	movs	r2, r1
 8013f52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d100      	bne.n	8013f5a <strtod+0x12>
 8013f58:	4b03      	ldr	r3, [pc, #12]	; (8013f68 <strtod+0x20>)
 8013f5a:	0021      	movs	r1, r4
 8013f5c:	f7ff f9cc 	bl	80132f8 <_strtod_l>
 8013f60:	bd10      	pop	{r4, pc}
 8013f62:	46c0      	nop			; (mov r8, r8)
 8013f64:	20000064 	.word	0x20000064
 8013f68:	20000490 	.word	0x20000490

08013f6c <strtok>:
 8013f6c:	4b03      	ldr	r3, [pc, #12]	; (8013f7c <strtok+0x10>)
 8013f6e:	b510      	push	{r4, lr}
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	2301      	movs	r3, #1
 8013f74:	325c      	adds	r2, #92	; 0x5c
 8013f76:	f000 f803 	bl	8013f80 <__strtok_r>
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	20000064 	.word	0x20000064

08013f80 <__strtok_r>:
 8013f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d104      	bne.n	8013f90 <__strtok_r+0x10>
 8013f86:	6810      	ldr	r0, [r2, #0]
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d101      	bne.n	8013f90 <__strtok_r+0x10>
 8013f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8e:	0020      	movs	r0, r4
 8013f90:	000e      	movs	r6, r1
 8013f92:	7805      	ldrb	r5, [r0, #0]
 8013f94:	1c44      	adds	r4, r0, #1
 8013f96:	7837      	ldrb	r7, [r6, #0]
 8013f98:	2f00      	cmp	r7, #0
 8013f9a:	d104      	bne.n	8013fa6 <__strtok_r+0x26>
 8013f9c:	2d00      	cmp	r5, #0
 8013f9e:	d110      	bne.n	8013fc2 <__strtok_r+0x42>
 8013fa0:	6015      	str	r5, [r2, #0]
 8013fa2:	0028      	movs	r0, r5
 8013fa4:	e7f2      	b.n	8013f8c <__strtok_r+0xc>
 8013fa6:	3601      	adds	r6, #1
 8013fa8:	42bd      	cmp	r5, r7
 8013faa:	d1f4      	bne.n	8013f96 <__strtok_r+0x16>
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d1ee      	bne.n	8013f8e <__strtok_r+0xe>
 8013fb0:	6014      	str	r4, [r2, #0]
 8013fb2:	7003      	strb	r3, [r0, #0]
 8013fb4:	e7ea      	b.n	8013f8c <__strtok_r+0xc>
 8013fb6:	0033      	movs	r3, r6
 8013fb8:	e00d      	b.n	8013fd6 <__strtok_r+0x56>
 8013fba:	3501      	adds	r5, #1
 8013fbc:	2f00      	cmp	r7, #0
 8013fbe:	d103      	bne.n	8013fc8 <__strtok_r+0x48>
 8013fc0:	001c      	movs	r4, r3
 8013fc2:	000d      	movs	r5, r1
 8013fc4:	7826      	ldrb	r6, [r4, #0]
 8013fc6:	1c63      	adds	r3, r4, #1
 8013fc8:	782f      	ldrb	r7, [r5, #0]
 8013fca:	42be      	cmp	r6, r7
 8013fcc:	d1f5      	bne.n	8013fba <__strtok_r+0x3a>
 8013fce:	2e00      	cmp	r6, #0
 8013fd0:	d0f1      	beq.n	8013fb6 <__strtok_r+0x36>
 8013fd2:	2100      	movs	r1, #0
 8013fd4:	7021      	strb	r1, [r4, #0]
 8013fd6:	6013      	str	r3, [r2, #0]
 8013fd8:	e7d8      	b.n	8013f8c <__strtok_r+0xc>
	...

08013fdc <_strtol_l.isra.0>:
 8013fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fde:	001f      	movs	r7, r3
 8013fe0:	000e      	movs	r6, r1
 8013fe2:	b087      	sub	sp, #28
 8013fe4:	9005      	str	r0, [sp, #20]
 8013fe6:	9101      	str	r1, [sp, #4]
 8013fe8:	9202      	str	r2, [sp, #8]
 8013fea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013fec:	7834      	ldrb	r4, [r6, #0]
 8013fee:	f7fe fc9f 	bl	8012930 <__locale_ctype_ptr_l>
 8013ff2:	2208      	movs	r2, #8
 8013ff4:	1900      	adds	r0, r0, r4
 8013ff6:	7843      	ldrb	r3, [r0, #1]
 8013ff8:	1c75      	adds	r5, r6, #1
 8013ffa:	4013      	ands	r3, r2
 8013ffc:	d136      	bne.n	801406c <_strtol_l.isra.0+0x90>
 8013ffe:	2c2d      	cmp	r4, #45	; 0x2d
 8014000:	d136      	bne.n	8014070 <_strtol_l.isra.0+0x94>
 8014002:	1cb5      	adds	r5, r6, #2
 8014004:	7874      	ldrb	r4, [r6, #1]
 8014006:	2601      	movs	r6, #1
 8014008:	2f00      	cmp	r7, #0
 801400a:	d062      	beq.n	80140d2 <_strtol_l.isra.0+0xf6>
 801400c:	2f10      	cmp	r7, #16
 801400e:	d109      	bne.n	8014024 <_strtol_l.isra.0+0x48>
 8014010:	2c30      	cmp	r4, #48	; 0x30
 8014012:	d107      	bne.n	8014024 <_strtol_l.isra.0+0x48>
 8014014:	2220      	movs	r2, #32
 8014016:	782b      	ldrb	r3, [r5, #0]
 8014018:	4393      	bics	r3, r2
 801401a:	2b58      	cmp	r3, #88	; 0x58
 801401c:	d154      	bne.n	80140c8 <_strtol_l.isra.0+0xec>
 801401e:	2710      	movs	r7, #16
 8014020:	786c      	ldrb	r4, [r5, #1]
 8014022:	3502      	adds	r5, #2
 8014024:	4b2d      	ldr	r3, [pc, #180]	; (80140dc <_strtol_l.isra.0+0x100>)
 8014026:	0039      	movs	r1, r7
 8014028:	18f3      	adds	r3, r6, r3
 801402a:	0018      	movs	r0, r3
 801402c:	9303      	str	r3, [sp, #12]
 801402e:	f7ec f915 	bl	800025c <__aeabi_uidivmod>
 8014032:	9104      	str	r1, [sp, #16]
 8014034:	2101      	movs	r1, #1
 8014036:	2300      	movs	r3, #0
 8014038:	4249      	negs	r1, r1
 801403a:	0002      	movs	r2, r0
 801403c:	468c      	mov	ip, r1
 801403e:	0018      	movs	r0, r3
 8014040:	0021      	movs	r1, r4
 8014042:	3930      	subs	r1, #48	; 0x30
 8014044:	2909      	cmp	r1, #9
 8014046:	d81a      	bhi.n	801407e <_strtol_l.isra.0+0xa2>
 8014048:	000c      	movs	r4, r1
 801404a:	42a7      	cmp	r7, r4
 801404c:	dd23      	ble.n	8014096 <_strtol_l.isra.0+0xba>
 801404e:	1c59      	adds	r1, r3, #1
 8014050:	d009      	beq.n	8014066 <_strtol_l.isra.0+0x8a>
 8014052:	4663      	mov	r3, ip
 8014054:	4282      	cmp	r2, r0
 8014056:	d306      	bcc.n	8014066 <_strtol_l.isra.0+0x8a>
 8014058:	d102      	bne.n	8014060 <_strtol_l.isra.0+0x84>
 801405a:	9904      	ldr	r1, [sp, #16]
 801405c:	42a1      	cmp	r1, r4
 801405e:	db02      	blt.n	8014066 <_strtol_l.isra.0+0x8a>
 8014060:	2301      	movs	r3, #1
 8014062:	4378      	muls	r0, r7
 8014064:	1820      	adds	r0, r4, r0
 8014066:	782c      	ldrb	r4, [r5, #0]
 8014068:	3501      	adds	r5, #1
 801406a:	e7e9      	b.n	8014040 <_strtol_l.isra.0+0x64>
 801406c:	002e      	movs	r6, r5
 801406e:	e7bc      	b.n	8013fea <_strtol_l.isra.0+0xe>
 8014070:	2c2b      	cmp	r4, #43	; 0x2b
 8014072:	d001      	beq.n	8014078 <_strtol_l.isra.0+0x9c>
 8014074:	001e      	movs	r6, r3
 8014076:	e7c7      	b.n	8014008 <_strtol_l.isra.0+0x2c>
 8014078:	1cb5      	adds	r5, r6, #2
 801407a:	7874      	ldrb	r4, [r6, #1]
 801407c:	e7fa      	b.n	8014074 <_strtol_l.isra.0+0x98>
 801407e:	0021      	movs	r1, r4
 8014080:	3941      	subs	r1, #65	; 0x41
 8014082:	2919      	cmp	r1, #25
 8014084:	d801      	bhi.n	801408a <_strtol_l.isra.0+0xae>
 8014086:	3c37      	subs	r4, #55	; 0x37
 8014088:	e7df      	b.n	801404a <_strtol_l.isra.0+0x6e>
 801408a:	0021      	movs	r1, r4
 801408c:	3961      	subs	r1, #97	; 0x61
 801408e:	2919      	cmp	r1, #25
 8014090:	d801      	bhi.n	8014096 <_strtol_l.isra.0+0xba>
 8014092:	3c57      	subs	r4, #87	; 0x57
 8014094:	e7d9      	b.n	801404a <_strtol_l.isra.0+0x6e>
 8014096:	1c5a      	adds	r2, r3, #1
 8014098:	d108      	bne.n	80140ac <_strtol_l.isra.0+0xd0>
 801409a:	9a05      	ldr	r2, [sp, #20]
 801409c:	3323      	adds	r3, #35	; 0x23
 801409e:	6013      	str	r3, [r2, #0]
 80140a0:	9b02      	ldr	r3, [sp, #8]
 80140a2:	9803      	ldr	r0, [sp, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d109      	bne.n	80140bc <_strtol_l.isra.0+0xe0>
 80140a8:	b007      	add	sp, #28
 80140aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ac:	2e00      	cmp	r6, #0
 80140ae:	d000      	beq.n	80140b2 <_strtol_l.isra.0+0xd6>
 80140b0:	4240      	negs	r0, r0
 80140b2:	9a02      	ldr	r2, [sp, #8]
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	d0f7      	beq.n	80140a8 <_strtol_l.isra.0+0xcc>
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d001      	beq.n	80140c0 <_strtol_l.isra.0+0xe4>
 80140bc:	1e6b      	subs	r3, r5, #1
 80140be:	9301      	str	r3, [sp, #4]
 80140c0:	9b02      	ldr	r3, [sp, #8]
 80140c2:	9a01      	ldr	r2, [sp, #4]
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	e7ef      	b.n	80140a8 <_strtol_l.isra.0+0xcc>
 80140c8:	2430      	movs	r4, #48	; 0x30
 80140ca:	2f00      	cmp	r7, #0
 80140cc:	d1aa      	bne.n	8014024 <_strtol_l.isra.0+0x48>
 80140ce:	2708      	movs	r7, #8
 80140d0:	e7a8      	b.n	8014024 <_strtol_l.isra.0+0x48>
 80140d2:	2c30      	cmp	r4, #48	; 0x30
 80140d4:	d09e      	beq.n	8014014 <_strtol_l.isra.0+0x38>
 80140d6:	270a      	movs	r7, #10
 80140d8:	e7a4      	b.n	8014024 <_strtol_l.isra.0+0x48>
 80140da:	46c0      	nop			; (mov r8, r8)
 80140dc:	7fffffff 	.word	0x7fffffff

080140e0 <strtol>:
 80140e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140e2:	0013      	movs	r3, r2
 80140e4:	4a06      	ldr	r2, [pc, #24]	; (8014100 <strtol+0x20>)
 80140e6:	0005      	movs	r5, r0
 80140e8:	6810      	ldr	r0, [r2, #0]
 80140ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80140ec:	2c00      	cmp	r4, #0
 80140ee:	d100      	bne.n	80140f2 <strtol+0x12>
 80140f0:	4c04      	ldr	r4, [pc, #16]	; (8014104 <strtol+0x24>)
 80140f2:	000a      	movs	r2, r1
 80140f4:	9400      	str	r4, [sp, #0]
 80140f6:	0029      	movs	r1, r5
 80140f8:	f7ff ff70 	bl	8013fdc <_strtol_l.isra.0>
 80140fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80140fe:	46c0      	nop			; (mov r8, r8)
 8014100:	20000064 	.word	0x20000064
 8014104:	20000490 	.word	0x20000490

08014108 <_svfprintf_r>:
 8014108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410a:	b0d9      	sub	sp, #356	; 0x164
 801410c:	910b      	str	r1, [sp, #44]	; 0x2c
 801410e:	9209      	str	r2, [sp, #36]	; 0x24
 8014110:	001c      	movs	r4, r3
 8014112:	900a      	str	r0, [sp, #40]	; 0x28
 8014114:	f002 fd26 	bl	8016b64 <_localeconv_r>
 8014118:	6803      	ldr	r3, [r0, #0]
 801411a:	0018      	movs	r0, r3
 801411c:	931c      	str	r3, [sp, #112]	; 0x70
 801411e:	f7eb fffb 	bl	8000118 <strlen>
 8014122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014124:	9014      	str	r0, [sp, #80]	; 0x50
 8014126:	899b      	ldrh	r3, [r3, #12]
 8014128:	061b      	lsls	r3, r3, #24
 801412a:	d518      	bpl.n	801415e <_svfprintf_r+0x56>
 801412c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801412e:	691b      	ldr	r3, [r3, #16]
 8014130:	9308      	str	r3, [sp, #32]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d113      	bne.n	801415e <_svfprintf_r+0x56>
 8014136:	2140      	movs	r1, #64	; 0x40
 8014138:	980a      	ldr	r0, [sp, #40]	; 0x28
 801413a:	f7fe fc1f 	bl	801297c <_malloc_r>
 801413e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014140:	6018      	str	r0, [r3, #0]
 8014142:	6118      	str	r0, [r3, #16]
 8014144:	2800      	cmp	r0, #0
 8014146:	d107      	bne.n	8014158 <_svfprintf_r+0x50>
 8014148:	230c      	movs	r3, #12
 801414a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801414c:	6013      	str	r3, [r2, #0]
 801414e:	3b0d      	subs	r3, #13
 8014150:	9315      	str	r3, [sp, #84]	; 0x54
 8014152:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014154:	b059      	add	sp, #356	; 0x164
 8014156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014158:	2340      	movs	r3, #64	; 0x40
 801415a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801415c:	6153      	str	r3, [r2, #20]
 801415e:	2600      	movs	r6, #0
 8014160:	af2f      	add	r7, sp, #188	; 0xbc
 8014162:	972c      	str	r7, [sp, #176]	; 0xb0
 8014164:	962e      	str	r6, [sp, #184]	; 0xb8
 8014166:	962d      	str	r6, [sp, #180]	; 0xb4
 8014168:	960d      	str	r6, [sp, #52]	; 0x34
 801416a:	961a      	str	r6, [sp, #104]	; 0x68
 801416c:	9619      	str	r6, [sp, #100]	; 0x64
 801416e:	961e      	str	r6, [sp, #120]	; 0x78
 8014170:	961d      	str	r6, [sp, #116]	; 0x74
 8014172:	9613      	str	r6, [sp, #76]	; 0x4c
 8014174:	961b      	str	r6, [sp, #108]	; 0x6c
 8014176:	961f      	str	r6, [sp, #124]	; 0x7c
 8014178:	9615      	str	r6, [sp, #84]	; 0x54
 801417a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801417c:	782b      	ldrb	r3, [r5, #0]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d002      	beq.n	8014188 <_svfprintf_r+0x80>
 8014182:	2b25      	cmp	r3, #37	; 0x25
 8014184:	d000      	beq.n	8014188 <_svfprintf_r+0x80>
 8014186:	e095      	b.n	80142b4 <_svfprintf_r+0x1ac>
 8014188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801418a:	1aee      	subs	r6, r5, r3
 801418c:	d017      	beq.n	80141be <_svfprintf_r+0xb6>
 801418e:	603b      	str	r3, [r7, #0]
 8014190:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014192:	607e      	str	r6, [r7, #4]
 8014194:	199b      	adds	r3, r3, r6
 8014196:	932e      	str	r3, [sp, #184]	; 0xb8
 8014198:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801419a:	3708      	adds	r7, #8
 801419c:	9308      	str	r3, [sp, #32]
 801419e:	3301      	adds	r3, #1
 80141a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80141a2:	2b07      	cmp	r3, #7
 80141a4:	dd08      	ble.n	80141b8 <_svfprintf_r+0xb0>
 80141a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80141a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141ac:	f003 f900 	bl	80173b0 <__ssprint_r>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d000      	beq.n	80141b6 <_svfprintf_r+0xae>
 80141b4:	e2d9      	b.n	801476a <_svfprintf_r+0x662>
 80141b6:	af2f      	add	r7, sp, #188	; 0xbc
 80141b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141ba:	199b      	adds	r3, r3, r6
 80141bc:	9315      	str	r3, [sp, #84]	; 0x54
 80141be:	782b      	ldrb	r3, [r5, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d101      	bne.n	80141c8 <_svfprintf_r+0xc0>
 80141c4:	f001 f9e5 	bl	8015592 <_svfprintf_r+0x148a>
 80141c8:	1c6b      	adds	r3, r5, #1
 80141ca:	221b      	movs	r2, #27
 80141cc:	9311      	str	r3, [sp, #68]	; 0x44
 80141ce:	2300      	movs	r3, #0
 80141d0:	a91e      	add	r1, sp, #120	; 0x78
 80141d2:	1852      	adds	r2, r2, r1
 80141d4:	7013      	strb	r3, [r2, #0]
 80141d6:	2201      	movs	r2, #1
 80141d8:	001e      	movs	r6, r3
 80141da:	2520      	movs	r5, #32
 80141dc:	4252      	negs	r2, r2
 80141de:	9208      	str	r2, [sp, #32]
 80141e0:	9316      	str	r3, [sp, #88]	; 0x58
 80141e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	930e      	str	r3, [sp, #56]	; 0x38
 80141e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141ea:	3301      	adds	r3, #1
 80141ec:	9311      	str	r3, [sp, #68]	; 0x44
 80141ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80141f0:	3820      	subs	r0, #32
 80141f2:	285a      	cmp	r0, #90	; 0x5a
 80141f4:	d901      	bls.n	80141fa <_svfprintf_r+0xf2>
 80141f6:	f000 fe3d 	bl	8014e74 <_svfprintf_r+0xd6c>
 80141fa:	f7eb ff9f 	bl	800013c <__gnu_thumb1_case_shi>
 80141fe:	009e      	.short	0x009e
 8014200:	063b063b 	.word	0x063b063b
 8014204:	063b00a7 	.word	0x063b00a7
 8014208:	063b063b 	.word	0x063b063b
 801420c:	063b0080 	.word	0x063b0080
 8014210:	00a9063b 	.word	0x00a9063b
 8014214:	063b00b3 	.word	0x063b00b3
 8014218:	00b900b1 	.word	0x00b900b1
 801421c:	00dd063b 	.word	0x00dd063b
 8014220:	00df00df 	.word	0x00df00df
 8014224:	00df00df 	.word	0x00df00df
 8014228:	00df00df 	.word	0x00df00df
 801422c:	00df00df 	.word	0x00df00df
 8014230:	063b00df 	.word	0x063b00df
 8014234:	063b063b 	.word	0x063b063b
 8014238:	063b063b 	.word	0x063b063b
 801423c:	063b063b 	.word	0x063b063b
 8014240:	063b0240 	.word	0x063b0240
 8014244:	01fd010a 	.word	0x01fd010a
 8014248:	02400240 	.word	0x02400240
 801424c:	063b0240 	.word	0x063b0240
 8014250:	063b063b 	.word	0x063b063b
 8014254:	00f1063b 	.word	0x00f1063b
 8014258:	063b063b 	.word	0x063b063b
 801425c:	063b04e2 	.word	0x063b04e2
 8014260:	063b063b 	.word	0x063b063b
 8014264:	063b0537 	.word	0x063b0537
 8014268:	063b0557 	.word	0x063b0557
 801426c:	005d063b 	.word	0x005d063b
 8014270:	063b063b 	.word	0x063b063b
 8014274:	063b063b 	.word	0x063b063b
 8014278:	063b063b 	.word	0x063b063b
 801427c:	063b063b 	.word	0x063b063b
 8014280:	063b0240 	.word	0x063b0240
 8014284:	01ff010a 	.word	0x01ff010a
 8014288:	02400240 	.word	0x02400240
 801428c:	00f30240 	.word	0x00f30240
 8014290:	010601ff 	.word	0x010601ff
 8014294:	00ff063b 	.word	0x00ff063b
 8014298:	04c5063b 	.word	0x04c5063b
 801429c:	052704e4 	.word	0x052704e4
 80142a0:	063b0106 	.word	0x063b0106
 80142a4:	fff20537 	.word	0xfff20537
 80142a8:	063b0559 	.word	0x063b0559
 80142ac:	0582063b 	.word	0x0582063b
 80142b0:	fff2063b 	.word	0xfff2063b
 80142b4:	3501      	adds	r5, #1
 80142b6:	e761      	b.n	801417c <_svfprintf_r+0x74>
 80142b8:	4bcb      	ldr	r3, [pc, #812]	; (80145e8 <_svfprintf_r+0x4e0>)
 80142ba:	2220      	movs	r2, #32
 80142bc:	931e      	str	r3, [sp, #120]	; 0x78
 80142be:	4032      	ands	r2, r6
 80142c0:	d101      	bne.n	80142c6 <_svfprintf_r+0x1be>
 80142c2:	f000 fd21 	bl	8014d08 <_svfprintf_r+0xc00>
 80142c6:	2307      	movs	r3, #7
 80142c8:	3407      	adds	r4, #7
 80142ca:	439c      	bics	r4, r3
 80142cc:	0023      	movs	r3, r4
 80142ce:	3308      	adds	r3, #8
 80142d0:	9312      	str	r3, [sp, #72]	; 0x48
 80142d2:	6823      	ldr	r3, [r4, #0]
 80142d4:	6864      	ldr	r4, [r4, #4]
 80142d6:	9306      	str	r3, [sp, #24]
 80142d8:	9407      	str	r4, [sp, #28]
 80142da:	07f3      	lsls	r3, r6, #31
 80142dc:	d50a      	bpl.n	80142f4 <_svfprintf_r+0x1ec>
 80142de:	9b06      	ldr	r3, [sp, #24]
 80142e0:	9a07      	ldr	r2, [sp, #28]
 80142e2:	4313      	orrs	r3, r2
 80142e4:	d006      	beq.n	80142f4 <_svfprintf_r+0x1ec>
 80142e6:	2230      	movs	r2, #48	; 0x30
 80142e8:	ab25      	add	r3, sp, #148	; 0x94
 80142ea:	701a      	strb	r2, [r3, #0]
 80142ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142ee:	705a      	strb	r2, [r3, #1]
 80142f0:	2302      	movs	r3, #2
 80142f2:	431e      	orrs	r6, r3
 80142f4:	4bbd      	ldr	r3, [pc, #756]	; (80145ec <_svfprintf_r+0x4e4>)
 80142f6:	401e      	ands	r6, r3
 80142f8:	2302      	movs	r3, #2
 80142fa:	f000 fc74 	bl	8014be6 <_svfprintf_r+0xade>
 80142fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014300:	f002 fc30 	bl	8016b64 <_localeconv_r>
 8014304:	6843      	ldr	r3, [r0, #4]
 8014306:	0018      	movs	r0, r3
 8014308:	931f      	str	r3, [sp, #124]	; 0x7c
 801430a:	f7eb ff05 	bl	8000118 <strlen>
 801430e:	901b      	str	r0, [sp, #108]	; 0x6c
 8014310:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014312:	f002 fc27 	bl	8016b64 <_localeconv_r>
 8014316:	6883      	ldr	r3, [r0, #8]
 8014318:	9313      	str	r3, [sp, #76]	; 0x4c
 801431a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801431c:	2b00      	cmp	r3, #0
 801431e:	d100      	bne.n	8014322 <_svfprintf_r+0x21a>
 8014320:	e75f      	b.n	80141e2 <_svfprintf_r+0xda>
 8014322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014324:	2b00      	cmp	r3, #0
 8014326:	d100      	bne.n	801432a <_svfprintf_r+0x222>
 8014328:	e75b      	b.n	80141e2 <_svfprintf_r+0xda>
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d100      	bne.n	8014332 <_svfprintf_r+0x22a>
 8014330:	e757      	b.n	80141e2 <_svfprintf_r+0xda>
 8014332:	2380      	movs	r3, #128	; 0x80
 8014334:	00db      	lsls	r3, r3, #3
 8014336:	431e      	orrs	r6, r3
 8014338:	e753      	b.n	80141e2 <_svfprintf_r+0xda>
 801433a:	231b      	movs	r3, #27
 801433c:	aa1e      	add	r2, sp, #120	; 0x78
 801433e:	189b      	adds	r3, r3, r2
 8014340:	781a      	ldrb	r2, [r3, #0]
 8014342:	2a00      	cmp	r2, #0
 8014344:	d000      	beq.n	8014348 <_svfprintf_r+0x240>
 8014346:	e74c      	b.n	80141e2 <_svfprintf_r+0xda>
 8014348:	701d      	strb	r5, [r3, #0]
 801434a:	e74a      	b.n	80141e2 <_svfprintf_r+0xda>
 801434c:	2301      	movs	r3, #1
 801434e:	e7f2      	b.n	8014336 <_svfprintf_r+0x22e>
 8014350:	6823      	ldr	r3, [r4, #0]
 8014352:	3404      	adds	r4, #4
 8014354:	9316      	str	r3, [sp, #88]	; 0x58
 8014356:	2b00      	cmp	r3, #0
 8014358:	db00      	blt.n	801435c <_svfprintf_r+0x254>
 801435a:	e742      	b.n	80141e2 <_svfprintf_r+0xda>
 801435c:	425b      	negs	r3, r3
 801435e:	9316      	str	r3, [sp, #88]	; 0x58
 8014360:	2304      	movs	r3, #4
 8014362:	e7e8      	b.n	8014336 <_svfprintf_r+0x22e>
 8014364:	231b      	movs	r3, #27
 8014366:	aa1e      	add	r2, sp, #120	; 0x78
 8014368:	189b      	adds	r3, r3, r2
 801436a:	222b      	movs	r2, #43	; 0x2b
 801436c:	701a      	strb	r2, [r3, #0]
 801436e:	e738      	b.n	80141e2 <_svfprintf_r+0xda>
 8014370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014374:	7812      	ldrb	r2, [r2, #0]
 8014376:	3301      	adds	r3, #1
 8014378:	920e      	str	r2, [sp, #56]	; 0x38
 801437a:	2a2a      	cmp	r2, #42	; 0x2a
 801437c:	d008      	beq.n	8014390 <_svfprintf_r+0x288>
 801437e:	2200      	movs	r2, #0
 8014380:	9208      	str	r2, [sp, #32]
 8014382:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014384:	001a      	movs	r2, r3
 8014386:	3930      	subs	r1, #48	; 0x30
 8014388:	2909      	cmp	r1, #9
 801438a:	d90c      	bls.n	80143a6 <_svfprintf_r+0x29e>
 801438c:	9211      	str	r2, [sp, #68]	; 0x44
 801438e:	e72e      	b.n	80141ee <_svfprintf_r+0xe6>
 8014390:	6821      	ldr	r1, [r4, #0]
 8014392:	1d22      	adds	r2, r4, #4
 8014394:	9108      	str	r1, [sp, #32]
 8014396:	2900      	cmp	r1, #0
 8014398:	da02      	bge.n	80143a0 <_svfprintf_r+0x298>
 801439a:	2101      	movs	r1, #1
 801439c:	4249      	negs	r1, r1
 801439e:	9108      	str	r1, [sp, #32]
 80143a0:	0014      	movs	r4, r2
 80143a2:	9311      	str	r3, [sp, #68]	; 0x44
 80143a4:	e71d      	b.n	80141e2 <_svfprintf_r+0xda>
 80143a6:	200a      	movs	r0, #10
 80143a8:	9a08      	ldr	r2, [sp, #32]
 80143aa:	4342      	muls	r2, r0
 80143ac:	1852      	adds	r2, r2, r1
 80143ae:	9208      	str	r2, [sp, #32]
 80143b0:	781a      	ldrb	r2, [r3, #0]
 80143b2:	3301      	adds	r3, #1
 80143b4:	920e      	str	r2, [sp, #56]	; 0x38
 80143b6:	e7e4      	b.n	8014382 <_svfprintf_r+0x27a>
 80143b8:	2380      	movs	r3, #128	; 0x80
 80143ba:	e7bc      	b.n	8014336 <_svfprintf_r+0x22e>
 80143bc:	2300      	movs	r3, #0
 80143be:	9316      	str	r3, [sp, #88]	; 0x58
 80143c0:	220a      	movs	r2, #10
 80143c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80143c4:	4353      	muls	r3, r2
 80143c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143c8:	3a30      	subs	r2, #48	; 0x30
 80143ca:	18d3      	adds	r3, r2, r3
 80143cc:	9316      	str	r3, [sp, #88]	; 0x58
 80143ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143d0:	1c5a      	adds	r2, r3, #1
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	9211      	str	r2, [sp, #68]	; 0x44
 80143d6:	930e      	str	r3, [sp, #56]	; 0x38
 80143d8:	3b30      	subs	r3, #48	; 0x30
 80143da:	2b09      	cmp	r3, #9
 80143dc:	d9f0      	bls.n	80143c0 <_svfprintf_r+0x2b8>
 80143de:	e7d5      	b.n	801438c <_svfprintf_r+0x284>
 80143e0:	2308      	movs	r3, #8
 80143e2:	e7a8      	b.n	8014336 <_svfprintf_r+0x22e>
 80143e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b68      	cmp	r3, #104	; 0x68
 80143ea:	d105      	bne.n	80143f8 <_svfprintf_r+0x2f0>
 80143ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143ee:	3301      	adds	r3, #1
 80143f0:	9311      	str	r3, [sp, #68]	; 0x44
 80143f2:	2380      	movs	r3, #128	; 0x80
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	e79e      	b.n	8014336 <_svfprintf_r+0x22e>
 80143f8:	2340      	movs	r3, #64	; 0x40
 80143fa:	e79c      	b.n	8014336 <_svfprintf_r+0x22e>
 80143fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	2b6c      	cmp	r3, #108	; 0x6c
 8014402:	d104      	bne.n	801440e <_svfprintf_r+0x306>
 8014404:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014406:	3301      	adds	r3, #1
 8014408:	9311      	str	r3, [sp, #68]	; 0x44
 801440a:	432e      	orrs	r6, r5
 801440c:	e6e9      	b.n	80141e2 <_svfprintf_r+0xda>
 801440e:	2310      	movs	r3, #16
 8014410:	e791      	b.n	8014336 <_svfprintf_r+0x22e>
 8014412:	1d23      	adds	r3, r4, #4
 8014414:	6822      	ldr	r2, [r4, #0]
 8014416:	9312      	str	r3, [sp, #72]	; 0x48
 8014418:	ab3f      	add	r3, sp, #252	; 0xfc
 801441a:	701a      	strb	r2, [r3, #0]
 801441c:	221b      	movs	r2, #27
 801441e:	2000      	movs	r0, #0
 8014420:	a91e      	add	r1, sp, #120	; 0x78
 8014422:	1852      	adds	r2, r2, r1
 8014424:	7010      	strb	r0, [r2, #0]
 8014426:	2201      	movs	r2, #1
 8014428:	0005      	movs	r5, r0
 801442a:	900c      	str	r0, [sp, #48]	; 0x30
 801442c:	9208      	str	r2, [sp, #32]
 801442e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014430:	9010      	str	r0, [sp, #64]	; 0x40
 8014432:	900f      	str	r0, [sp, #60]	; 0x3c
 8014434:	9309      	str	r3, [sp, #36]	; 0x24
 8014436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014438:	9a08      	ldr	r2, [sp, #32]
 801443a:	9318      	str	r3, [sp, #96]	; 0x60
 801443c:	4293      	cmp	r3, r2
 801443e:	da00      	bge.n	8014442 <_svfprintf_r+0x33a>
 8014440:	9218      	str	r2, [sp, #96]	; 0x60
 8014442:	231b      	movs	r3, #27
 8014444:	aa1e      	add	r2, sp, #120	; 0x78
 8014446:	189b      	adds	r3, r3, r2
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	1e5a      	subs	r2, r3, #1
 801444c:	4193      	sbcs	r3, r2
 801444e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014450:	18d3      	adds	r3, r2, r3
 8014452:	9318      	str	r3, [sp, #96]	; 0x60
 8014454:	2302      	movs	r3, #2
 8014456:	4033      	ands	r3, r6
 8014458:	9320      	str	r3, [sp, #128]	; 0x80
 801445a:	d002      	beq.n	8014462 <_svfprintf_r+0x35a>
 801445c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801445e:	3302      	adds	r3, #2
 8014460:	9318      	str	r3, [sp, #96]	; 0x60
 8014462:	2384      	movs	r3, #132	; 0x84
 8014464:	4033      	ands	r3, r6
 8014466:	9321      	str	r3, [sp, #132]	; 0x84
 8014468:	d121      	bne.n	80144ae <_svfprintf_r+0x3a6>
 801446a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801446c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801446e:	1a9c      	subs	r4, r3, r2
 8014470:	2c00      	cmp	r4, #0
 8014472:	dd1c      	ble.n	80144ae <_svfprintf_r+0x3a6>
 8014474:	0039      	movs	r1, r7
 8014476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014478:	485d      	ldr	r0, [pc, #372]	; (80145f0 <_svfprintf_r+0x4e8>)
 801447a:	9322      	str	r3, [sp, #136]	; 0x88
 801447c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801447e:	3301      	adds	r3, #1
 8014480:	3108      	adds	r1, #8
 8014482:	6038      	str	r0, [r7, #0]
 8014484:	2c10      	cmp	r4, #16
 8014486:	dd01      	ble.n	801448c <_svfprintf_r+0x384>
 8014488:	f000 fd08 	bl	8014e9c <_svfprintf_r+0xd94>
 801448c:	607c      	str	r4, [r7, #4]
 801448e:	18a4      	adds	r4, r4, r2
 8014490:	942e      	str	r4, [sp, #184]	; 0xb8
 8014492:	932d      	str	r3, [sp, #180]	; 0xb4
 8014494:	000f      	movs	r7, r1
 8014496:	2b07      	cmp	r3, #7
 8014498:	dd09      	ble.n	80144ae <_svfprintf_r+0x3a6>
 801449a:	aa2c      	add	r2, sp, #176	; 0xb0
 801449c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801449e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144a0:	f002 ff86 	bl	80173b0 <__ssprint_r>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d001      	beq.n	80144ac <_svfprintf_r+0x3a4>
 80144a8:	f001 f852 	bl	8015550 <_svfprintf_r+0x1448>
 80144ac:	af2f      	add	r7, sp, #188	; 0xbc
 80144ae:	231b      	movs	r3, #27
 80144b0:	aa1e      	add	r2, sp, #120	; 0x78
 80144b2:	189b      	adds	r3, r3, r2
 80144b4:	781a      	ldrb	r2, [r3, #0]
 80144b6:	2a00      	cmp	r2, #0
 80144b8:	d017      	beq.n	80144ea <_svfprintf_r+0x3e2>
 80144ba:	603b      	str	r3, [r7, #0]
 80144bc:	2301      	movs	r3, #1
 80144be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80144c0:	607b      	str	r3, [r7, #4]
 80144c2:	0013      	movs	r3, r2
 80144c4:	3301      	adds	r3, #1
 80144c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80144c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144ca:	3708      	adds	r7, #8
 80144cc:	9322      	str	r3, [sp, #136]	; 0x88
 80144ce:	3301      	adds	r3, #1
 80144d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80144d2:	2b07      	cmp	r3, #7
 80144d4:	dd09      	ble.n	80144ea <_svfprintf_r+0x3e2>
 80144d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80144d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144dc:	f002 ff68 	bl	80173b0 <__ssprint_r>
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d001      	beq.n	80144e8 <_svfprintf_r+0x3e0>
 80144e4:	f001 f834 	bl	8015550 <_svfprintf_r+0x1448>
 80144e8:	af2f      	add	r7, sp, #188	; 0xbc
 80144ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d019      	beq.n	8014524 <_svfprintf_r+0x41c>
 80144f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144f2:	9320      	str	r3, [sp, #128]	; 0x80
 80144f4:	ab25      	add	r3, sp, #148	; 0x94
 80144f6:	603b      	str	r3, [r7, #0]
 80144f8:	2302      	movs	r3, #2
 80144fa:	607b      	str	r3, [r7, #4]
 80144fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144fe:	3708      	adds	r7, #8
 8014500:	3302      	adds	r3, #2
 8014502:	932e      	str	r3, [sp, #184]	; 0xb8
 8014504:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014506:	9320      	str	r3, [sp, #128]	; 0x80
 8014508:	3301      	adds	r3, #1
 801450a:	932d      	str	r3, [sp, #180]	; 0xb4
 801450c:	2b07      	cmp	r3, #7
 801450e:	dd09      	ble.n	8014524 <_svfprintf_r+0x41c>
 8014510:	aa2c      	add	r2, sp, #176	; 0xb0
 8014512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014516:	f002 ff4b 	bl	80173b0 <__ssprint_r>
 801451a:	2800      	cmp	r0, #0
 801451c:	d001      	beq.n	8014522 <_svfprintf_r+0x41a>
 801451e:	f001 f817 	bl	8015550 <_svfprintf_r+0x1448>
 8014522:	af2f      	add	r7, sp, #188	; 0xbc
 8014524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014526:	2b80      	cmp	r3, #128	; 0x80
 8014528:	d121      	bne.n	801456e <_svfprintf_r+0x466>
 801452a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801452c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801452e:	1a9c      	subs	r4, r3, r2
 8014530:	2c00      	cmp	r4, #0
 8014532:	dd1c      	ble.n	801456e <_svfprintf_r+0x466>
 8014534:	0039      	movs	r1, r7
 8014536:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014538:	482e      	ldr	r0, [pc, #184]	; (80145f4 <_svfprintf_r+0x4ec>)
 801453a:	9320      	str	r3, [sp, #128]	; 0x80
 801453c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801453e:	3301      	adds	r3, #1
 8014540:	3108      	adds	r1, #8
 8014542:	6038      	str	r0, [r7, #0]
 8014544:	2c10      	cmp	r4, #16
 8014546:	dd01      	ble.n	801454c <_svfprintf_r+0x444>
 8014548:	f000 fcbc 	bl	8014ec4 <_svfprintf_r+0xdbc>
 801454c:	607c      	str	r4, [r7, #4]
 801454e:	18a4      	adds	r4, r4, r2
 8014550:	942e      	str	r4, [sp, #184]	; 0xb8
 8014552:	932d      	str	r3, [sp, #180]	; 0xb4
 8014554:	000f      	movs	r7, r1
 8014556:	2b07      	cmp	r3, #7
 8014558:	dd09      	ble.n	801456e <_svfprintf_r+0x466>
 801455a:	aa2c      	add	r2, sp, #176	; 0xb0
 801455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801455e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014560:	f002 ff26 	bl	80173b0 <__ssprint_r>
 8014564:	2800      	cmp	r0, #0
 8014566:	d001      	beq.n	801456c <_svfprintf_r+0x464>
 8014568:	f000 fff2 	bl	8015550 <_svfprintf_r+0x1448>
 801456c:	af2f      	add	r7, sp, #188	; 0xbc
 801456e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014570:	9a08      	ldr	r2, [sp, #32]
 8014572:	1a9c      	subs	r4, r3, r2
 8014574:	2c00      	cmp	r4, #0
 8014576:	dd1c      	ble.n	80145b2 <_svfprintf_r+0x4aa>
 8014578:	0039      	movs	r1, r7
 801457a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801457c:	481d      	ldr	r0, [pc, #116]	; (80145f4 <_svfprintf_r+0x4ec>)
 801457e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014580:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014582:	3301      	adds	r3, #1
 8014584:	3108      	adds	r1, #8
 8014586:	6038      	str	r0, [r7, #0]
 8014588:	2c10      	cmp	r4, #16
 801458a:	dd01      	ble.n	8014590 <_svfprintf_r+0x488>
 801458c:	f000 fcb4 	bl	8014ef8 <_svfprintf_r+0xdf0>
 8014590:	18a2      	adds	r2, r4, r2
 8014592:	607c      	str	r4, [r7, #4]
 8014594:	922e      	str	r2, [sp, #184]	; 0xb8
 8014596:	932d      	str	r3, [sp, #180]	; 0xb4
 8014598:	000f      	movs	r7, r1
 801459a:	2b07      	cmp	r3, #7
 801459c:	dd09      	ble.n	80145b2 <_svfprintf_r+0x4aa>
 801459e:	aa2c      	add	r2, sp, #176	; 0xb0
 80145a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145a4:	f002 ff04 	bl	80173b0 <__ssprint_r>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d001      	beq.n	80145b0 <_svfprintf_r+0x4a8>
 80145ac:	f000 ffd0 	bl	8015550 <_svfprintf_r+0x1448>
 80145b0:	af2f      	add	r7, sp, #188	; 0xbc
 80145b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80145b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80145b6:	05f3      	lsls	r3, r6, #23
 80145b8:	d501      	bpl.n	80145be <_svfprintf_r+0x4b6>
 80145ba:	f000 fcb1 	bl	8014f20 <_svfprintf_r+0xe18>
 80145be:	9a08      	ldr	r2, [sp, #32]
 80145c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c2:	4694      	mov	ip, r2
 80145c4:	603b      	str	r3, [r7, #0]
 80145c6:	9b08      	ldr	r3, [sp, #32]
 80145c8:	607b      	str	r3, [r7, #4]
 80145ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145cc:	4463      	add	r3, ip
 80145ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80145d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145d2:	9308      	str	r3, [sp, #32]
 80145d4:	3301      	adds	r3, #1
 80145d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80145d8:	2b07      	cmp	r3, #7
 80145da:	dd01      	ble.n	80145e0 <_svfprintf_r+0x4d8>
 80145dc:	f000 fd94 	bl	8015108 <_svfprintf_r+0x1000>
 80145e0:	3708      	adds	r7, #8
 80145e2:	f000 fce4 	bl	8014fae <_svfprintf_r+0xea6>
 80145e6:	46c0      	nop			; (mov r8, r8)
 80145e8:	0801a5c9 	.word	0x0801a5c9
 80145ec:	fffffbff 	.word	0xfffffbff
 80145f0:	0801a5dc 	.word	0x0801a5dc
 80145f4:	0801a5ec 	.word	0x0801a5ec
 80145f8:	2310      	movs	r3, #16
 80145fa:	431e      	orrs	r6, r3
 80145fc:	06b3      	lsls	r3, r6, #26
 80145fe:	d52c      	bpl.n	801465a <_svfprintf_r+0x552>
 8014600:	2307      	movs	r3, #7
 8014602:	3407      	adds	r4, #7
 8014604:	439c      	bics	r4, r3
 8014606:	0023      	movs	r3, r4
 8014608:	3308      	adds	r3, #8
 801460a:	9312      	str	r3, [sp, #72]	; 0x48
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	6864      	ldr	r4, [r4, #4]
 8014610:	9306      	str	r3, [sp, #24]
 8014612:	9407      	str	r4, [sp, #28]
 8014614:	9b07      	ldr	r3, [sp, #28]
 8014616:	2b00      	cmp	r3, #0
 8014618:	da0b      	bge.n	8014632 <_svfprintf_r+0x52a>
 801461a:	9906      	ldr	r1, [sp, #24]
 801461c:	9a07      	ldr	r2, [sp, #28]
 801461e:	2400      	movs	r4, #0
 8014620:	424b      	negs	r3, r1
 8014622:	4194      	sbcs	r4, r2
 8014624:	9306      	str	r3, [sp, #24]
 8014626:	9407      	str	r4, [sp, #28]
 8014628:	231b      	movs	r3, #27
 801462a:	aa1e      	add	r2, sp, #120	; 0x78
 801462c:	189b      	adds	r3, r3, r2
 801462e:	222d      	movs	r2, #45	; 0x2d
 8014630:	701a      	strb	r2, [r3, #0]
 8014632:	9b08      	ldr	r3, [sp, #32]
 8014634:	3301      	adds	r3, #1
 8014636:	d000      	beq.n	801463a <_svfprintf_r+0x532>
 8014638:	e382      	b.n	8014d40 <_svfprintf_r+0xc38>
 801463a:	9b07      	ldr	r3, [sp, #28]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d000      	beq.n	8014642 <_svfprintf_r+0x53a>
 8014640:	e3b0      	b.n	8014da4 <_svfprintf_r+0xc9c>
 8014642:	9b06      	ldr	r3, [sp, #24]
 8014644:	2b09      	cmp	r3, #9
 8014646:	d900      	bls.n	801464a <_svfprintf_r+0x542>
 8014648:	e3ac      	b.n	8014da4 <_svfprintf_r+0xc9c>
 801464a:	23e7      	movs	r3, #231	; 0xe7
 801464c:	aa1e      	add	r2, sp, #120	; 0x78
 801464e:	189b      	adds	r3, r3, r2
 8014650:	9a06      	ldr	r2, [sp, #24]
 8014652:	3230      	adds	r2, #48	; 0x30
 8014654:	701a      	strb	r2, [r3, #0]
 8014656:	9309      	str	r3, [sp, #36]	; 0x24
 8014658:	e395      	b.n	8014d86 <_svfprintf_r+0xc7e>
 801465a:	1d23      	adds	r3, r4, #4
 801465c:	9312      	str	r3, [sp, #72]	; 0x48
 801465e:	06f3      	lsls	r3, r6, #27
 8014660:	d504      	bpl.n	801466c <_svfprintf_r+0x564>
 8014662:	6823      	ldr	r3, [r4, #0]
 8014664:	9306      	str	r3, [sp, #24]
 8014666:	17db      	asrs	r3, r3, #31
 8014668:	9307      	str	r3, [sp, #28]
 801466a:	e7d3      	b.n	8014614 <_svfprintf_r+0x50c>
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	0672      	lsls	r2, r6, #25
 8014670:	d501      	bpl.n	8014676 <_svfprintf_r+0x56e>
 8014672:	b21b      	sxth	r3, r3
 8014674:	e7f6      	b.n	8014664 <_svfprintf_r+0x55c>
 8014676:	05b2      	lsls	r2, r6, #22
 8014678:	d5f4      	bpl.n	8014664 <_svfprintf_r+0x55c>
 801467a:	b25b      	sxtb	r3, r3
 801467c:	e7f2      	b.n	8014664 <_svfprintf_r+0x55c>
 801467e:	2307      	movs	r3, #7
 8014680:	3407      	adds	r4, #7
 8014682:	439c      	bics	r4, r3
 8014684:	0023      	movs	r3, r4
 8014686:	2201      	movs	r2, #1
 8014688:	3308      	adds	r3, #8
 801468a:	9312      	str	r3, [sp, #72]	; 0x48
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	4252      	negs	r2, r2
 8014690:	931a      	str	r3, [sp, #104]	; 0x68
 8014692:	6863      	ldr	r3, [r4, #4]
 8014694:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014696:	005c      	lsls	r4, r3, #1
 8014698:	0864      	lsrs	r4, r4, #1
 801469a:	9319      	str	r3, [sp, #100]	; 0x64
 801469c:	0028      	movs	r0, r5
 801469e:	4bcf      	ldr	r3, [pc, #828]	; (80149dc <_svfprintf_r+0x8d4>)
 80146a0:	0021      	movs	r1, r4
 80146a2:	f7ee fab7 	bl	8002c14 <__aeabi_dcmpun>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d125      	bne.n	80146f6 <_svfprintf_r+0x5ee>
 80146aa:	2201      	movs	r2, #1
 80146ac:	4bcb      	ldr	r3, [pc, #812]	; (80149dc <_svfprintf_r+0x8d4>)
 80146ae:	4252      	negs	r2, r2
 80146b0:	0028      	movs	r0, r5
 80146b2:	0021      	movs	r1, r4
 80146b4:	f7eb fee2 	bl	800047c <__aeabi_dcmple>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d11c      	bne.n	80146f6 <_svfprintf_r+0x5ee>
 80146bc:	2200      	movs	r2, #0
 80146be:	2300      	movs	r3, #0
 80146c0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80146c2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80146c4:	f7eb fed0 	bl	8000468 <__aeabi_dcmplt>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d004      	beq.n	80146d6 <_svfprintf_r+0x5ce>
 80146cc:	231b      	movs	r3, #27
 80146ce:	aa1e      	add	r2, sp, #120	; 0x78
 80146d0:	189b      	adds	r3, r3, r2
 80146d2:	222d      	movs	r2, #45	; 0x2d
 80146d4:	701a      	strb	r2, [r3, #0]
 80146d6:	4bc2      	ldr	r3, [pc, #776]	; (80149e0 <_svfprintf_r+0x8d8>)
 80146d8:	9309      	str	r3, [sp, #36]	; 0x24
 80146da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146dc:	2b47      	cmp	r3, #71	; 0x47
 80146de:	dc01      	bgt.n	80146e4 <_svfprintf_r+0x5dc>
 80146e0:	4bc0      	ldr	r3, [pc, #768]	; (80149e4 <_svfprintf_r+0x8dc>)
 80146e2:	9309      	str	r3, [sp, #36]	; 0x24
 80146e4:	2380      	movs	r3, #128	; 0x80
 80146e6:	439e      	bics	r6, r3
 80146e8:	2300      	movs	r3, #0
 80146ea:	930c      	str	r3, [sp, #48]	; 0x30
 80146ec:	3303      	adds	r3, #3
 80146ee:	9308      	str	r3, [sp, #32]
 80146f0:	2300      	movs	r3, #0
 80146f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80146f4:	e34f      	b.n	8014d96 <_svfprintf_r+0xc8e>
 80146f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80146f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146fa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80146fc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80146fe:	f7ee fa89 	bl	8002c14 <__aeabi_dcmpun>
 8014702:	2800      	cmp	r0, #0
 8014704:	d00e      	beq.n	8014724 <_svfprintf_r+0x61c>
 8014706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014708:	2b00      	cmp	r3, #0
 801470a:	da04      	bge.n	8014716 <_svfprintf_r+0x60e>
 801470c:	231b      	movs	r3, #27
 801470e:	aa1e      	add	r2, sp, #120	; 0x78
 8014710:	189b      	adds	r3, r3, r2
 8014712:	222d      	movs	r2, #45	; 0x2d
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	4bb4      	ldr	r3, [pc, #720]	; (80149e8 <_svfprintf_r+0x8e0>)
 8014718:	9309      	str	r3, [sp, #36]	; 0x24
 801471a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801471c:	2b47      	cmp	r3, #71	; 0x47
 801471e:	dce1      	bgt.n	80146e4 <_svfprintf_r+0x5dc>
 8014720:	4bb2      	ldr	r3, [pc, #712]	; (80149ec <_svfprintf_r+0x8e4>)
 8014722:	e7de      	b.n	80146e2 <_svfprintf_r+0x5da>
 8014724:	2320      	movs	r3, #32
 8014726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014728:	439a      	bics	r2, r3
 801472a:	920f      	str	r2, [sp, #60]	; 0x3c
 801472c:	2a41      	cmp	r2, #65	; 0x41
 801472e:	d124      	bne.n	801477a <_svfprintf_r+0x672>
 8014730:	2230      	movs	r2, #48	; 0x30
 8014732:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014734:	ab25      	add	r3, sp, #148	; 0x94
 8014736:	701a      	strb	r2, [r3, #0]
 8014738:	3228      	adds	r2, #40	; 0x28
 801473a:	2961      	cmp	r1, #97	; 0x61
 801473c:	d100      	bne.n	8014740 <_svfprintf_r+0x638>
 801473e:	3220      	adds	r2, #32
 8014740:	705a      	strb	r2, [r3, #1]
 8014742:	2302      	movs	r3, #2
 8014744:	431e      	orrs	r6, r3
 8014746:	9b08      	ldr	r3, [sp, #32]
 8014748:	2b63      	cmp	r3, #99	; 0x63
 801474a:	dc00      	bgt.n	801474e <_svfprintf_r+0x646>
 801474c:	e09e      	b.n	801488c <_svfprintf_r+0x784>
 801474e:	1c59      	adds	r1, r3, #1
 8014750:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014752:	f7fe f913 	bl	801297c <_malloc_r>
 8014756:	9009      	str	r0, [sp, #36]	; 0x24
 8014758:	2800      	cmp	r0, #0
 801475a:	d000      	beq.n	801475e <_svfprintf_r+0x656>
 801475c:	e09b      	b.n	8014896 <_svfprintf_r+0x78e>
 801475e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014760:	899a      	ldrh	r2, [r3, #12]
 8014762:	2340      	movs	r3, #64	; 0x40
 8014764:	4313      	orrs	r3, r2
 8014766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014768:	8193      	strh	r3, [r2, #12]
 801476a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801476c:	899b      	ldrh	r3, [r3, #12]
 801476e:	065b      	lsls	r3, r3, #25
 8014770:	d400      	bmi.n	8014774 <_svfprintf_r+0x66c>
 8014772:	e4ee      	b.n	8014152 <_svfprintf_r+0x4a>
 8014774:	2301      	movs	r3, #1
 8014776:	425b      	negs	r3, r3
 8014778:	e4ea      	b.n	8014150 <_svfprintf_r+0x48>
 801477a:	9b08      	ldr	r3, [sp, #32]
 801477c:	900c      	str	r0, [sp, #48]	; 0x30
 801477e:	3301      	adds	r3, #1
 8014780:	d100      	bne.n	8014784 <_svfprintf_r+0x67c>
 8014782:	e08b      	b.n	801489c <_svfprintf_r+0x794>
 8014784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014786:	2b47      	cmp	r3, #71	; 0x47
 8014788:	d103      	bne.n	8014792 <_svfprintf_r+0x68a>
 801478a:	9b08      	ldr	r3, [sp, #32]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d100      	bne.n	8014792 <_svfprintf_r+0x68a>
 8014790:	e087      	b.n	80148a2 <_svfprintf_r+0x79a>
 8014792:	2380      	movs	r3, #128	; 0x80
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4333      	orrs	r3, r6
 8014798:	9320      	str	r3, [sp, #128]	; 0x80
 801479a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801479c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801479e:	2b00      	cmp	r3, #0
 80147a0:	db00      	blt.n	80147a4 <_svfprintf_r+0x69c>
 80147a2:	e082      	b.n	80148aa <_svfprintf_r+0x7a2>
 80147a4:	2280      	movs	r2, #128	; 0x80
 80147a6:	0612      	lsls	r2, r2, #24
 80147a8:	4694      	mov	ip, r2
 80147aa:	4463      	add	r3, ip
 80147ac:	930d      	str	r3, [sp, #52]	; 0x34
 80147ae:	232d      	movs	r3, #45	; 0x2d
 80147b0:	9322      	str	r3, [sp, #136]	; 0x88
 80147b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147b4:	2b41      	cmp	r3, #65	; 0x41
 80147b6:	d000      	beq.n	80147ba <_svfprintf_r+0x6b2>
 80147b8:	e105      	b.n	80149c6 <_svfprintf_r+0x8be>
 80147ba:	aa26      	add	r2, sp, #152	; 0x98
 80147bc:	0020      	movs	r0, r4
 80147be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80147c0:	f002 fdc4 	bl	801734c <frexp>
 80147c4:	23ff      	movs	r3, #255	; 0xff
 80147c6:	2200      	movs	r2, #0
 80147c8:	059b      	lsls	r3, r3, #22
 80147ca:	f7ed fc69 	bl	80020a0 <__aeabi_dmul>
 80147ce:	2200      	movs	r2, #0
 80147d0:	2300      	movs	r3, #0
 80147d2:	0004      	movs	r4, r0
 80147d4:	000d      	movs	r5, r1
 80147d6:	f7eb fe41 	bl	800045c <__aeabi_dcmpeq>
 80147da:	2800      	cmp	r0, #0
 80147dc:	d001      	beq.n	80147e2 <_svfprintf_r+0x6da>
 80147de:	2301      	movs	r3, #1
 80147e0:	9326      	str	r3, [sp, #152]	; 0x98
 80147e2:	4b83      	ldr	r3, [pc, #524]	; (80149f0 <_svfprintf_r+0x8e8>)
 80147e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80147e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147e8:	2b61      	cmp	r3, #97	; 0x61
 80147ea:	d101      	bne.n	80147f0 <_svfprintf_r+0x6e8>
 80147ec:	4b81      	ldr	r3, [pc, #516]	; (80149f4 <_svfprintf_r+0x8ec>)
 80147ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80147f0:	9b08      	ldr	r3, [sp, #32]
 80147f2:	3b01      	subs	r3, #1
 80147f4:	9310      	str	r3, [sp, #64]	; 0x40
 80147f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f8:	9318      	str	r3, [sp, #96]	; 0x60
 80147fa:	2200      	movs	r2, #0
 80147fc:	4b7e      	ldr	r3, [pc, #504]	; (80149f8 <_svfprintf_r+0x8f0>)
 80147fe:	0020      	movs	r0, r4
 8014800:	0029      	movs	r1, r5
 8014802:	f7ed fc4d 	bl	80020a0 <__aeabi_dmul>
 8014806:	000d      	movs	r5, r1
 8014808:	0004      	movs	r4, r0
 801480a:	f7ee fa1f 	bl	8002c4c <__aeabi_d2iz>
 801480e:	9021      	str	r0, [sp, #132]	; 0x84
 8014810:	f7ee fa52 	bl	8002cb8 <__aeabi_i2d>
 8014814:	0002      	movs	r2, r0
 8014816:	000b      	movs	r3, r1
 8014818:	0020      	movs	r0, r4
 801481a:	0029      	movs	r1, r5
 801481c:	f7ed feb2 	bl	8002584 <__aeabi_dsub>
 8014820:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014822:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014824:	3301      	adds	r3, #1
 8014826:	930d      	str	r3, [sp, #52]	; 0x34
 8014828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801482a:	0004      	movs	r4, r0
 801482c:	5c9b      	ldrb	r3, [r3, r2]
 801482e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014830:	000d      	movs	r5, r1
 8014832:	7013      	strb	r3, [r2, #0]
 8014834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014836:	9323      	str	r3, [sp, #140]	; 0x8c
 8014838:	3301      	adds	r3, #1
 801483a:	d00a      	beq.n	8014852 <_svfprintf_r+0x74a>
 801483c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801483e:	2200      	movs	r2, #0
 8014840:	3b01      	subs	r3, #1
 8014842:	9310      	str	r3, [sp, #64]	; 0x40
 8014844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014846:	9318      	str	r3, [sp, #96]	; 0x60
 8014848:	2300      	movs	r3, #0
 801484a:	f7eb fe07 	bl	800045c <__aeabi_dcmpeq>
 801484e:	2800      	cmp	r0, #0
 8014850:	d0d3      	beq.n	80147fa <_svfprintf_r+0x6f2>
 8014852:	2200      	movs	r2, #0
 8014854:	4b69      	ldr	r3, [pc, #420]	; (80149fc <_svfprintf_r+0x8f4>)
 8014856:	0020      	movs	r0, r4
 8014858:	0029      	movs	r1, r5
 801485a:	f7eb fe19 	bl	8000490 <__aeabi_dcmpgt>
 801485e:	2800      	cmp	r0, #0
 8014860:	d126      	bne.n	80148b0 <_svfprintf_r+0x7a8>
 8014862:	2200      	movs	r2, #0
 8014864:	4b65      	ldr	r3, [pc, #404]	; (80149fc <_svfprintf_r+0x8f4>)
 8014866:	0020      	movs	r0, r4
 8014868:	0029      	movs	r1, r5
 801486a:	f7eb fdf7 	bl	800045c <__aeabi_dcmpeq>
 801486e:	2800      	cmp	r0, #0
 8014870:	d002      	beq.n	8014878 <_svfprintf_r+0x770>
 8014872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014874:	07db      	lsls	r3, r3, #31
 8014876:	d41b      	bmi.n	80148b0 <_svfprintf_r+0x7a8>
 8014878:	2130      	movs	r1, #48	; 0x30
 801487a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801487c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801487e:	1898      	adds	r0, r3, r2
 8014880:	930d      	str	r3, [sp, #52]	; 0x34
 8014882:	1ac2      	subs	r2, r0, r3
 8014884:	d426      	bmi.n	80148d4 <_svfprintf_r+0x7cc>
 8014886:	7019      	strb	r1, [r3, #0]
 8014888:	3301      	adds	r3, #1
 801488a:	e7f9      	b.n	8014880 <_svfprintf_r+0x778>
 801488c:	2300      	movs	r3, #0
 801488e:	930c      	str	r3, [sp, #48]	; 0x30
 8014890:	ab3f      	add	r3, sp, #252	; 0xfc
 8014892:	9309      	str	r3, [sp, #36]	; 0x24
 8014894:	e77d      	b.n	8014792 <_svfprintf_r+0x68a>
 8014896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014898:	930c      	str	r3, [sp, #48]	; 0x30
 801489a:	e77a      	b.n	8014792 <_svfprintf_r+0x68a>
 801489c:	2306      	movs	r3, #6
 801489e:	9308      	str	r3, [sp, #32]
 80148a0:	e777      	b.n	8014792 <_svfprintf_r+0x68a>
 80148a2:	9b08      	ldr	r3, [sp, #32]
 80148a4:	930c      	str	r3, [sp, #48]	; 0x30
 80148a6:	2301      	movs	r3, #1
 80148a8:	e7f9      	b.n	801489e <_svfprintf_r+0x796>
 80148aa:	930d      	str	r3, [sp, #52]	; 0x34
 80148ac:	2300      	movs	r3, #0
 80148ae:	e77f      	b.n	80147b0 <_svfprintf_r+0x6a8>
 80148b0:	2030      	movs	r0, #48	; 0x30
 80148b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148b4:	932a      	str	r3, [sp, #168]	; 0xa8
 80148b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148b8:	7bda      	ldrb	r2, [r3, #15]
 80148ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80148bc:	3b01      	subs	r3, #1
 80148be:	932a      	str	r3, [sp, #168]	; 0xa8
 80148c0:	7819      	ldrb	r1, [r3, #0]
 80148c2:	4291      	cmp	r1, r2
 80148c4:	d07d      	beq.n	80149c2 <_svfprintf_r+0x8ba>
 80148c6:	1c4a      	adds	r2, r1, #1
 80148c8:	b2d2      	uxtb	r2, r2
 80148ca:	2939      	cmp	r1, #57	; 0x39
 80148cc:	d101      	bne.n	80148d2 <_svfprintf_r+0x7ca>
 80148ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80148d0:	7a92      	ldrb	r2, [r2, #10]
 80148d2:	701a      	strb	r2, [r3, #0]
 80148d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148d8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80148da:	1a9b      	subs	r3, r3, r2
 80148dc:	930d      	str	r3, [sp, #52]	; 0x34
 80148de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148e0:	2b47      	cmp	r3, #71	; 0x47
 80148e2:	d000      	beq.n	80148e6 <_svfprintf_r+0x7de>
 80148e4:	e0d2      	b.n	8014a8c <_svfprintf_r+0x984>
 80148e6:	1ceb      	adds	r3, r5, #3
 80148e8:	db03      	blt.n	80148f2 <_svfprintf_r+0x7ea>
 80148ea:	9b08      	ldr	r3, [sp, #32]
 80148ec:	42ab      	cmp	r3, r5
 80148ee:	db00      	blt.n	80148f2 <_svfprintf_r+0x7ea>
 80148f0:	e0fd      	b.n	8014aee <_svfprintf_r+0x9e6>
 80148f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148f4:	3b02      	subs	r3, #2
 80148f6:	930e      	str	r3, [sp, #56]	; 0x38
 80148f8:	2238      	movs	r2, #56	; 0x38
 80148fa:	466b      	mov	r3, sp
 80148fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148fe:	189b      	adds	r3, r3, r2
 8014900:	3a18      	subs	r2, #24
 8014902:	4391      	bics	r1, r2
 8014904:	1e6c      	subs	r4, r5, #1
 8014906:	000a      	movs	r2, r1
 8014908:	9426      	str	r4, [sp, #152]	; 0x98
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	2100      	movs	r1, #0
 801490e:	2a41      	cmp	r2, #65	; 0x41
 8014910:	d102      	bne.n	8014918 <_svfprintf_r+0x810>
 8014912:	330f      	adds	r3, #15
 8014914:	b2db      	uxtb	r3, r3
 8014916:	3101      	adds	r1, #1
 8014918:	aa28      	add	r2, sp, #160	; 0xa0
 801491a:	7013      	strb	r3, [r2, #0]
 801491c:	232b      	movs	r3, #43	; 0x2b
 801491e:	2c00      	cmp	r4, #0
 8014920:	da02      	bge.n	8014928 <_svfprintf_r+0x820>
 8014922:	2401      	movs	r4, #1
 8014924:	232d      	movs	r3, #45	; 0x2d
 8014926:	1b64      	subs	r4, r4, r5
 8014928:	7053      	strb	r3, [r2, #1]
 801492a:	2c09      	cmp	r4, #9
 801492c:	dc00      	bgt.n	8014930 <_svfprintf_r+0x828>
 801492e:	e0c7      	b.n	8014ac0 <_svfprintf_r+0x9b8>
 8014930:	2537      	movs	r5, #55	; 0x37
 8014932:	ab1e      	add	r3, sp, #120	; 0x78
 8014934:	18ed      	adds	r5, r5, r3
 8014936:	1e6b      	subs	r3, r5, #1
 8014938:	0020      	movs	r0, r4
 801493a:	210a      	movs	r1, #10
 801493c:	9308      	str	r3, [sp, #32]
 801493e:	f7eb fd77 	bl	8000430 <__aeabi_idivmod>
 8014942:	1e6b      	subs	r3, r5, #1
 8014944:	3130      	adds	r1, #48	; 0x30
 8014946:	7019      	strb	r1, [r3, #0]
 8014948:	0020      	movs	r0, r4
 801494a:	210a      	movs	r1, #10
 801494c:	f7eb fc8a 	bl	8000264 <__divsi3>
 8014950:	0004      	movs	r4, r0
 8014952:	2809      	cmp	r0, #9
 8014954:	dd00      	ble.n	8014958 <_svfprintf_r+0x850>
 8014956:	e0ac      	b.n	8014ab2 <_svfprintf_r+0x9aa>
 8014958:	232a      	movs	r3, #42	; 0x2a
 801495a:	2137      	movs	r1, #55	; 0x37
 801495c:	aa1e      	add	r2, sp, #120	; 0x78
 801495e:	3d02      	subs	r5, #2
 8014960:	3430      	adds	r4, #48	; 0x30
 8014962:	702c      	strb	r4, [r5, #0]
 8014964:	189b      	adds	r3, r3, r2
 8014966:	1889      	adds	r1, r1, r2
 8014968:	001a      	movs	r2, r3
 801496a:	428d      	cmp	r5, r1
 801496c:	d200      	bcs.n	8014970 <_svfprintf_r+0x868>
 801496e:	e0a2      	b.n	8014ab6 <_svfprintf_r+0x9ae>
 8014970:	ab28      	add	r3, sp, #160	; 0xa0
 8014972:	1ad3      	subs	r3, r2, r3
 8014974:	931d      	str	r3, [sp, #116]	; 0x74
 8014976:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801497a:	4694      	mov	ip, r2
 801497c:	4463      	add	r3, ip
 801497e:	9308      	str	r3, [sp, #32]
 8014980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014982:	2b01      	cmp	r3, #1
 8014984:	dc01      	bgt.n	801498a <_svfprintf_r+0x882>
 8014986:	07f3      	lsls	r3, r6, #31
 8014988:	d504      	bpl.n	8014994 <_svfprintf_r+0x88c>
 801498a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801498c:	9b08      	ldr	r3, [sp, #32]
 801498e:	4694      	mov	ip, r2
 8014990:	4463      	add	r3, ip
 8014992:	9308      	str	r3, [sp, #32]
 8014994:	2280      	movs	r2, #128	; 0x80
 8014996:	4b1a      	ldr	r3, [pc, #104]	; (8014a00 <_svfprintf_r+0x8f8>)
 8014998:	0052      	lsls	r2, r2, #1
 801499a:	4033      	ands	r3, r6
 801499c:	431a      	orrs	r2, r3
 801499e:	2300      	movs	r3, #0
 80149a0:	001d      	movs	r5, r3
 80149a2:	9220      	str	r2, [sp, #128]	; 0x80
 80149a4:	9310      	str	r3, [sp, #64]	; 0x40
 80149a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d100      	bne.n	80149b0 <_svfprintf_r+0x8a8>
 80149ae:	e270      	b.n	8014e92 <_svfprintf_r+0xd8a>
 80149b0:	231b      	movs	r3, #27
 80149b2:	aa1e      	add	r2, sp, #120	; 0x78
 80149b4:	189b      	adds	r3, r3, r2
 80149b6:	222d      	movs	r2, #45	; 0x2d
 80149b8:	701a      	strb	r2, [r3, #0]
 80149ba:	2300      	movs	r3, #0
 80149bc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80149be:	9317      	str	r3, [sp, #92]	; 0x5c
 80149c0:	e539      	b.n	8014436 <_svfprintf_r+0x32e>
 80149c2:	7018      	strb	r0, [r3, #0]
 80149c4:	e779      	b.n	80148ba <_svfprintf_r+0x7b2>
 80149c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149c8:	2b46      	cmp	r3, #70	; 0x46
 80149ca:	d01b      	beq.n	8014a04 <_svfprintf_r+0x8fc>
 80149cc:	9d08      	ldr	r5, [sp, #32]
 80149ce:	2b45      	cmp	r3, #69	; 0x45
 80149d0:	d101      	bne.n	80149d6 <_svfprintf_r+0x8ce>
 80149d2:	9b08      	ldr	r3, [sp, #32]
 80149d4:	1c5d      	adds	r5, r3, #1
 80149d6:	2302      	movs	r3, #2
 80149d8:	e016      	b.n	8014a08 <_svfprintf_r+0x900>
 80149da:	46c0      	nop			; (mov r8, r8)
 80149dc:	7fefffff 	.word	0x7fefffff
 80149e0:	0801a5ac 	.word	0x0801a5ac
 80149e4:	0801a5a8 	.word	0x0801a5a8
 80149e8:	0801a5b4 	.word	0x0801a5b4
 80149ec:	0801a5b0 	.word	0x0801a5b0
 80149f0:	0801a5c9 	.word	0x0801a5c9
 80149f4:	0801a5b8 	.word	0x0801a5b8
 80149f8:	40300000 	.word	0x40300000
 80149fc:	3fe00000 	.word	0x3fe00000
 8014a00:	fffffbff 	.word	0xfffffbff
 8014a04:	2303      	movs	r3, #3
 8014a06:	9d08      	ldr	r5, [sp, #32]
 8014a08:	aa2a      	add	r2, sp, #168	; 0xa8
 8014a0a:	9204      	str	r2, [sp, #16]
 8014a0c:	aa27      	add	r2, sp, #156	; 0x9c
 8014a0e:	9203      	str	r2, [sp, #12]
 8014a10:	aa26      	add	r2, sp, #152	; 0x98
 8014a12:	9202      	str	r2, [sp, #8]
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	9501      	str	r5, [sp, #4]
 8014a18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a1a:	0022      	movs	r2, r4
 8014a1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a1e:	f000 fe79 	bl	8015714 <_dtoa_r>
 8014a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a24:	9009      	str	r0, [sp, #36]	; 0x24
 8014a26:	2b47      	cmp	r3, #71	; 0x47
 8014a28:	d101      	bne.n	8014a2e <_svfprintf_r+0x926>
 8014a2a:	07f3      	lsls	r3, r6, #31
 8014a2c:	d524      	bpl.n	8014a78 <_svfprintf_r+0x970>
 8014a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a30:	195b      	adds	r3, r3, r5
 8014a32:	9310      	str	r3, [sp, #64]	; 0x40
 8014a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a36:	2b46      	cmp	r3, #70	; 0x46
 8014a38:	d113      	bne.n	8014a62 <_svfprintf_r+0x95a>
 8014a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	2b30      	cmp	r3, #48	; 0x30
 8014a40:	d10a      	bne.n	8014a58 <_svfprintf_r+0x950>
 8014a42:	2200      	movs	r2, #0
 8014a44:	2300      	movs	r3, #0
 8014a46:	0020      	movs	r0, r4
 8014a48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a4a:	f7eb fd07 	bl	800045c <__aeabi_dcmpeq>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d102      	bne.n	8014a58 <_svfprintf_r+0x950>
 8014a52:	2301      	movs	r3, #1
 8014a54:	1b5d      	subs	r5, r3, r5
 8014a56:	9526      	str	r5, [sp, #152]	; 0x98
 8014a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a5c:	4694      	mov	ip, r2
 8014a5e:	4463      	add	r3, ip
 8014a60:	9310      	str	r3, [sp, #64]	; 0x40
 8014a62:	2200      	movs	r2, #0
 8014a64:	2300      	movs	r3, #0
 8014a66:	0020      	movs	r0, r4
 8014a68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a6a:	f7eb fcf7 	bl	800045c <__aeabi_dcmpeq>
 8014a6e:	2230      	movs	r2, #48	; 0x30
 8014a70:	2800      	cmp	r0, #0
 8014a72:	d006      	beq.n	8014a82 <_svfprintf_r+0x97a>
 8014a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a76:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a7a:	e72c      	b.n	80148d6 <_svfprintf_r+0x7ce>
 8014a7c:	1c59      	adds	r1, r3, #1
 8014a7e:	912a      	str	r1, [sp, #168]	; 0xa8
 8014a80:	701a      	strb	r2, [r3, #0]
 8014a82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014a86:	4299      	cmp	r1, r3
 8014a88:	d8f8      	bhi.n	8014a7c <_svfprintf_r+0x974>
 8014a8a:	e7f5      	b.n	8014a78 <_svfprintf_r+0x970>
 8014a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a8e:	2b46      	cmp	r3, #70	; 0x46
 8014a90:	d000      	beq.n	8014a94 <_svfprintf_r+0x98c>
 8014a92:	e731      	b.n	80148f8 <_svfprintf_r+0x7f0>
 8014a94:	9b08      	ldr	r3, [sp, #32]
 8014a96:	2d00      	cmp	r5, #0
 8014a98:	dd21      	ble.n	8014ade <_svfprintf_r+0x9d6>
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d101      	bne.n	8014aa2 <_svfprintf_r+0x99a>
 8014a9e:	07f3      	lsls	r3, r6, #31
 8014aa0:	d54a      	bpl.n	8014b38 <_svfprintf_r+0xa30>
 8014aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014aa4:	18eb      	adds	r3, r5, r3
 8014aa6:	9a08      	ldr	r2, [sp, #32]
 8014aa8:	18d3      	adds	r3, r2, r3
 8014aaa:	9308      	str	r3, [sp, #32]
 8014aac:	2366      	movs	r3, #102	; 0x66
 8014aae:	930e      	str	r3, [sp, #56]	; 0x38
 8014ab0:	e034      	b.n	8014b1c <_svfprintf_r+0xa14>
 8014ab2:	9d08      	ldr	r5, [sp, #32]
 8014ab4:	e73f      	b.n	8014936 <_svfprintf_r+0x82e>
 8014ab6:	782a      	ldrb	r2, [r5, #0]
 8014ab8:	3501      	adds	r5, #1
 8014aba:	701a      	strb	r2, [r3, #0]
 8014abc:	3301      	adds	r3, #1
 8014abe:	e753      	b.n	8014968 <_svfprintf_r+0x860>
 8014ac0:	232a      	movs	r3, #42	; 0x2a
 8014ac2:	aa1e      	add	r2, sp, #120	; 0x78
 8014ac4:	189b      	adds	r3, r3, r2
 8014ac6:	2900      	cmp	r1, #0
 8014ac8:	d105      	bne.n	8014ad6 <_svfprintf_r+0x9ce>
 8014aca:	2230      	movs	r2, #48	; 0x30
 8014acc:	ab28      	add	r3, sp, #160	; 0xa0
 8014ace:	709a      	strb	r2, [r3, #2]
 8014ad0:	232b      	movs	r3, #43	; 0x2b
 8014ad2:	aa1e      	add	r2, sp, #120	; 0x78
 8014ad4:	189b      	adds	r3, r3, r2
 8014ad6:	3430      	adds	r4, #48	; 0x30
 8014ad8:	1c5a      	adds	r2, r3, #1
 8014ada:	701c      	strb	r4, [r3, #0]
 8014adc:	e748      	b.n	8014970 <_svfprintf_r+0x868>
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <_svfprintf_r+0x9e0>
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	421e      	tst	r6, r3
 8014ae6:	d029      	beq.n	8014b3c <_svfprintf_r+0xa34>
 8014ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014aea:	3301      	adds	r3, #1
 8014aec:	e7db      	b.n	8014aa6 <_svfprintf_r+0x99e>
 8014aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014af0:	42ab      	cmp	r3, r5
 8014af2:	dc06      	bgt.n	8014b02 <_svfprintf_r+0x9fa>
 8014af4:	07f3      	lsls	r3, r6, #31
 8014af6:	d524      	bpl.n	8014b42 <_svfprintf_r+0xa3a>
 8014af8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014afa:	18eb      	adds	r3, r5, r3
 8014afc:	9308      	str	r3, [sp, #32]
 8014afe:	2367      	movs	r3, #103	; 0x67
 8014b00:	e7d5      	b.n	8014aae <_svfprintf_r+0x9a6>
 8014b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b06:	4694      	mov	ip, r2
 8014b08:	4463      	add	r3, ip
 8014b0a:	9308      	str	r3, [sp, #32]
 8014b0c:	2367      	movs	r3, #103	; 0x67
 8014b0e:	930e      	str	r3, [sp, #56]	; 0x38
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	dc03      	bgt.n	8014b1c <_svfprintf_r+0xa14>
 8014b14:	9b08      	ldr	r3, [sp, #32]
 8014b16:	1b5b      	subs	r3, r3, r5
 8014b18:	3301      	adds	r3, #1
 8014b1a:	9308      	str	r3, [sp, #32]
 8014b1c:	2380      	movs	r3, #128	; 0x80
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	401e      	ands	r6, r3
 8014b22:	2300      	movs	r3, #0
 8014b24:	960f      	str	r6, [sp, #60]	; 0x3c
 8014b26:	9310      	str	r3, [sp, #64]	; 0x40
 8014b28:	2e00      	cmp	r6, #0
 8014b2a:	d100      	bne.n	8014b2e <_svfprintf_r+0xa26>
 8014b2c:	e73c      	b.n	80149a8 <_svfprintf_r+0x8a0>
 8014b2e:	2d00      	cmp	r5, #0
 8014b30:	dc27      	bgt.n	8014b82 <_svfprintf_r+0xa7a>
 8014b32:	2300      	movs	r3, #0
 8014b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b36:	e737      	b.n	80149a8 <_svfprintf_r+0x8a0>
 8014b38:	9508      	str	r5, [sp, #32]
 8014b3a:	e7b7      	b.n	8014aac <_svfprintf_r+0x9a4>
 8014b3c:	2266      	movs	r2, #102	; 0x66
 8014b3e:	920e      	str	r2, [sp, #56]	; 0x38
 8014b40:	e7eb      	b.n	8014b1a <_svfprintf_r+0xa12>
 8014b42:	9508      	str	r5, [sp, #32]
 8014b44:	e7db      	b.n	8014afe <_svfprintf_r+0x9f6>
 8014b46:	42ab      	cmp	r3, r5
 8014b48:	da0e      	bge.n	8014b68 <_svfprintf_r+0xa60>
 8014b4a:	1aed      	subs	r5, r5, r3
 8014b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b4e:	785b      	ldrb	r3, [r3, #1]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d012      	beq.n	8014b7a <_svfprintf_r+0xa72>
 8014b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b56:	3301      	adds	r3, #1
 8014b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	2bff      	cmp	r3, #255	; 0xff
 8014b66:	d1ee      	bne.n	8014b46 <_svfprintf_r+0xa3e>
 8014b68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b6c:	189b      	adds	r3, r3, r2
 8014b6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014b70:	4353      	muls	r3, r2
 8014b72:	9a08      	ldr	r2, [sp, #32]
 8014b74:	189b      	adds	r3, r3, r2
 8014b76:	9308      	str	r3, [sp, #32]
 8014b78:	e716      	b.n	80149a8 <_svfprintf_r+0x8a0>
 8014b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8014b80:	e7ee      	b.n	8014b60 <_svfprintf_r+0xa58>
 8014b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b86:	e7eb      	b.n	8014b60 <_svfprintf_r+0xa58>
 8014b88:	0022      	movs	r2, r4
 8014b8a:	ca08      	ldmia	r2!, {r3}
 8014b8c:	9212      	str	r2, [sp, #72]	; 0x48
 8014b8e:	06b2      	lsls	r2, r6, #26
 8014b90:	d508      	bpl.n	8014ba4 <_svfprintf_r+0xa9c>
 8014b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b94:	601a      	str	r2, [r3, #0]
 8014b96:	17d2      	asrs	r2, r2, #31
 8014b98:	605a      	str	r2, [r3, #4]
 8014b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8014ba0:	f7ff faeb 	bl	801417a <_svfprintf_r+0x72>
 8014ba4:	06f2      	lsls	r2, r6, #27
 8014ba6:	d502      	bpl.n	8014bae <_svfprintf_r+0xaa6>
 8014ba8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014baa:	601a      	str	r2, [r3, #0]
 8014bac:	e7f5      	b.n	8014b9a <_svfprintf_r+0xa92>
 8014bae:	0672      	lsls	r2, r6, #25
 8014bb0:	d502      	bpl.n	8014bb8 <_svfprintf_r+0xab0>
 8014bb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bb4:	801a      	strh	r2, [r3, #0]
 8014bb6:	e7f0      	b.n	8014b9a <_svfprintf_r+0xa92>
 8014bb8:	05b2      	lsls	r2, r6, #22
 8014bba:	d5f5      	bpl.n	8014ba8 <_svfprintf_r+0xaa0>
 8014bbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bbe:	701a      	strb	r2, [r3, #0]
 8014bc0:	e7eb      	b.n	8014b9a <_svfprintf_r+0xa92>
 8014bc2:	2310      	movs	r3, #16
 8014bc4:	431e      	orrs	r6, r3
 8014bc6:	2220      	movs	r2, #32
 8014bc8:	4032      	ands	r2, r6
 8014bca:	d025      	beq.n	8014c18 <_svfprintf_r+0xb10>
 8014bcc:	2307      	movs	r3, #7
 8014bce:	3407      	adds	r4, #7
 8014bd0:	439c      	bics	r4, r3
 8014bd2:	0023      	movs	r3, r4
 8014bd4:	3308      	adds	r3, #8
 8014bd6:	9312      	str	r3, [sp, #72]	; 0x48
 8014bd8:	6823      	ldr	r3, [r4, #0]
 8014bda:	6864      	ldr	r4, [r4, #4]
 8014bdc:	9306      	str	r3, [sp, #24]
 8014bde:	9407      	str	r4, [sp, #28]
 8014be0:	4bc2      	ldr	r3, [pc, #776]	; (8014eec <_svfprintf_r+0xde4>)
 8014be2:	401e      	ands	r6, r3
 8014be4:	2300      	movs	r3, #0
 8014be6:	221b      	movs	r2, #27
 8014be8:	a91e      	add	r1, sp, #120	; 0x78
 8014bea:	1852      	adds	r2, r2, r1
 8014bec:	2100      	movs	r1, #0
 8014bee:	7011      	strb	r1, [r2, #0]
 8014bf0:	9a08      	ldr	r2, [sp, #32]
 8014bf2:	3201      	adds	r2, #1
 8014bf4:	d100      	bne.n	8014bf8 <_svfprintf_r+0xaf0>
 8014bf6:	e0a6      	b.n	8014d46 <_svfprintf_r+0xc3e>
 8014bf8:	0032      	movs	r2, r6
 8014bfa:	2180      	movs	r1, #128	; 0x80
 8014bfc:	9807      	ldr	r0, [sp, #28]
 8014bfe:	438e      	bics	r6, r1
 8014c00:	9906      	ldr	r1, [sp, #24]
 8014c02:	4301      	orrs	r1, r0
 8014c04:	d000      	beq.n	8014c08 <_svfprintf_r+0xb00>
 8014c06:	e09e      	b.n	8014d46 <_svfprintf_r+0xc3e>
 8014c08:	9908      	ldr	r1, [sp, #32]
 8014c0a:	2900      	cmp	r1, #0
 8014c0c:	d100      	bne.n	8014c10 <_svfprintf_r+0xb08>
 8014c0e:	e125      	b.n	8014e5c <_svfprintf_r+0xd54>
 8014c10:	2b01      	cmp	r3, #1
 8014c12:	d000      	beq.n	8014c16 <_svfprintf_r+0xb0e>
 8014c14:	e09a      	b.n	8014d4c <_svfprintf_r+0xc44>
 8014c16:	e518      	b.n	801464a <_svfprintf_r+0x542>
 8014c18:	1d23      	adds	r3, r4, #4
 8014c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c1c:	2310      	movs	r3, #16
 8014c1e:	4033      	ands	r3, r6
 8014c20:	d003      	beq.n	8014c2a <_svfprintf_r+0xb22>
 8014c22:	6823      	ldr	r3, [r4, #0]
 8014c24:	9306      	str	r3, [sp, #24]
 8014c26:	9207      	str	r2, [sp, #28]
 8014c28:	e7da      	b.n	8014be0 <_svfprintf_r+0xad8>
 8014c2a:	2240      	movs	r2, #64	; 0x40
 8014c2c:	4032      	ands	r2, r6
 8014c2e:	d004      	beq.n	8014c3a <_svfprintf_r+0xb32>
 8014c30:	6822      	ldr	r2, [r4, #0]
 8014c32:	b292      	uxth	r2, r2
 8014c34:	9206      	str	r2, [sp, #24]
 8014c36:	9307      	str	r3, [sp, #28]
 8014c38:	e7d2      	b.n	8014be0 <_svfprintf_r+0xad8>
 8014c3a:	2380      	movs	r3, #128	; 0x80
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4033      	ands	r3, r6
 8014c40:	d002      	beq.n	8014c48 <_svfprintf_r+0xb40>
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	e7ed      	b.n	8014c24 <_svfprintf_r+0xb1c>
 8014c48:	6822      	ldr	r2, [r4, #0]
 8014c4a:	e7f3      	b.n	8014c34 <_svfprintf_r+0xb2c>
 8014c4c:	1d23      	adds	r3, r4, #4
 8014c4e:	49a8      	ldr	r1, [pc, #672]	; (8014ef0 <_svfprintf_r+0xde8>)
 8014c50:	aa25      	add	r2, sp, #148	; 0x94
 8014c52:	9312      	str	r3, [sp, #72]	; 0x48
 8014c54:	6823      	ldr	r3, [r4, #0]
 8014c56:	8011      	strh	r1, [r2, #0]
 8014c58:	4aa6      	ldr	r2, [pc, #664]	; (8014ef4 <_svfprintf_r+0xdec>)
 8014c5a:	9306      	str	r3, [sp, #24]
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	921e      	str	r2, [sp, #120]	; 0x78
 8014c60:	2278      	movs	r2, #120	; 0x78
 8014c62:	9307      	str	r3, [sp, #28]
 8014c64:	3302      	adds	r3, #2
 8014c66:	431e      	orrs	r6, r3
 8014c68:	920e      	str	r2, [sp, #56]	; 0x38
 8014c6a:	e7bc      	b.n	8014be6 <_svfprintf_r+0xade>
 8014c6c:	1d23      	adds	r3, r4, #4
 8014c6e:	9312      	str	r3, [sp, #72]	; 0x48
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	2400      	movs	r4, #0
 8014c74:	9309      	str	r3, [sp, #36]	; 0x24
 8014c76:	231b      	movs	r3, #27
 8014c78:	aa1e      	add	r2, sp, #120	; 0x78
 8014c7a:	189b      	adds	r3, r3, r2
 8014c7c:	701c      	strb	r4, [r3, #0]
 8014c7e:	9b08      	ldr	r3, [sp, #32]
 8014c80:	3301      	adds	r3, #1
 8014c82:	d00e      	beq.n	8014ca2 <_svfprintf_r+0xb9a>
 8014c84:	9a08      	ldr	r2, [sp, #32]
 8014c86:	0021      	movs	r1, r4
 8014c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c8a:	f001 ff79 	bl	8016b80 <memchr>
 8014c8e:	900c      	str	r0, [sp, #48]	; 0x30
 8014c90:	42a0      	cmp	r0, r4
 8014c92:	d100      	bne.n	8014c96 <_svfprintf_r+0xb8e>
 8014c94:	e100      	b.n	8014e98 <_svfprintf_r+0xd90>
 8014c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c98:	1a83      	subs	r3, r0, r2
 8014c9a:	9308      	str	r3, [sp, #32]
 8014c9c:	940c      	str	r4, [sp, #48]	; 0x30
 8014c9e:	0023      	movs	r3, r4
 8014ca0:	e527      	b.n	80146f2 <_svfprintf_r+0x5ea>
 8014ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ca4:	f7eb fa38 	bl	8000118 <strlen>
 8014ca8:	9008      	str	r0, [sp, #32]
 8014caa:	e7f7      	b.n	8014c9c <_svfprintf_r+0xb94>
 8014cac:	2310      	movs	r3, #16
 8014cae:	431e      	orrs	r6, r3
 8014cb0:	2220      	movs	r2, #32
 8014cb2:	4032      	ands	r2, r6
 8014cb4:	d00b      	beq.n	8014cce <_svfprintf_r+0xbc6>
 8014cb6:	2307      	movs	r3, #7
 8014cb8:	3407      	adds	r4, #7
 8014cba:	439c      	bics	r4, r3
 8014cbc:	0023      	movs	r3, r4
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	9312      	str	r3, [sp, #72]	; 0x48
 8014cc2:	6823      	ldr	r3, [r4, #0]
 8014cc4:	6864      	ldr	r4, [r4, #4]
 8014cc6:	9306      	str	r3, [sp, #24]
 8014cc8:	9407      	str	r4, [sp, #28]
 8014cca:	2301      	movs	r3, #1
 8014ccc:	e78b      	b.n	8014be6 <_svfprintf_r+0xade>
 8014cce:	1d23      	adds	r3, r4, #4
 8014cd0:	9312      	str	r3, [sp, #72]	; 0x48
 8014cd2:	2310      	movs	r3, #16
 8014cd4:	4033      	ands	r3, r6
 8014cd6:	d003      	beq.n	8014ce0 <_svfprintf_r+0xbd8>
 8014cd8:	6823      	ldr	r3, [r4, #0]
 8014cda:	9306      	str	r3, [sp, #24]
 8014cdc:	9207      	str	r2, [sp, #28]
 8014cde:	e7f4      	b.n	8014cca <_svfprintf_r+0xbc2>
 8014ce0:	2240      	movs	r2, #64	; 0x40
 8014ce2:	4032      	ands	r2, r6
 8014ce4:	d004      	beq.n	8014cf0 <_svfprintf_r+0xbe8>
 8014ce6:	6822      	ldr	r2, [r4, #0]
 8014ce8:	b292      	uxth	r2, r2
 8014cea:	9206      	str	r2, [sp, #24]
 8014cec:	9307      	str	r3, [sp, #28]
 8014cee:	e7ec      	b.n	8014cca <_svfprintf_r+0xbc2>
 8014cf0:	2380      	movs	r3, #128	; 0x80
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	4033      	ands	r3, r6
 8014cf6:	d002      	beq.n	8014cfe <_svfprintf_r+0xbf6>
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	e7ed      	b.n	8014cda <_svfprintf_r+0xbd2>
 8014cfe:	6822      	ldr	r2, [r4, #0]
 8014d00:	e7f3      	b.n	8014cea <_svfprintf_r+0xbe2>
 8014d02:	4b7c      	ldr	r3, [pc, #496]	; (8014ef4 <_svfprintf_r+0xdec>)
 8014d04:	f7ff fad9 	bl	80142ba <_svfprintf_r+0x1b2>
 8014d08:	1d23      	adds	r3, r4, #4
 8014d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d0c:	2310      	movs	r3, #16
 8014d0e:	4033      	ands	r3, r6
 8014d10:	d004      	beq.n	8014d1c <_svfprintf_r+0xc14>
 8014d12:	6823      	ldr	r3, [r4, #0]
 8014d14:	9306      	str	r3, [sp, #24]
 8014d16:	9207      	str	r2, [sp, #28]
 8014d18:	f7ff fadf 	bl	80142da <_svfprintf_r+0x1d2>
 8014d1c:	2240      	movs	r2, #64	; 0x40
 8014d1e:	4032      	ands	r2, r6
 8014d20:	d005      	beq.n	8014d2e <_svfprintf_r+0xc26>
 8014d22:	6822      	ldr	r2, [r4, #0]
 8014d24:	b292      	uxth	r2, r2
 8014d26:	9206      	str	r2, [sp, #24]
 8014d28:	9307      	str	r3, [sp, #28]
 8014d2a:	f7ff fad6 	bl	80142da <_svfprintf_r+0x1d2>
 8014d2e:	2380      	movs	r3, #128	; 0x80
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	4033      	ands	r3, r6
 8014d34:	d002      	beq.n	8014d3c <_svfprintf_r+0xc34>
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	e7eb      	b.n	8014d14 <_svfprintf_r+0xc0c>
 8014d3c:	6822      	ldr	r2, [r4, #0]
 8014d3e:	e7f2      	b.n	8014d26 <_svfprintf_r+0xc1e>
 8014d40:	0032      	movs	r2, r6
 8014d42:	2301      	movs	r3, #1
 8014d44:	e759      	b.n	8014bfa <_svfprintf_r+0xaf2>
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d100      	bne.n	8014d4c <_svfprintf_r+0xc44>
 8014d4a:	e476      	b.n	801463a <_svfprintf_r+0x532>
 8014d4c:	2b02      	cmp	r3, #2
 8014d4e:	d06b      	beq.n	8014e28 <_svfprintf_r+0xd20>
 8014d50:	2507      	movs	r5, #7
 8014d52:	ab58      	add	r3, sp, #352	; 0x160
 8014d54:	1e5a      	subs	r2, r3, #1
 8014d56:	9209      	str	r2, [sp, #36]	; 0x24
 8014d58:	9a06      	ldr	r2, [sp, #24]
 8014d5a:	1e59      	subs	r1, r3, #1
 8014d5c:	402a      	ands	r2, r5
 8014d5e:	3230      	adds	r2, #48	; 0x30
 8014d60:	700a      	strb	r2, [r1, #0]
 8014d62:	9907      	ldr	r1, [sp, #28]
 8014d64:	074c      	lsls	r4, r1, #29
 8014d66:	9906      	ldr	r1, [sp, #24]
 8014d68:	08c8      	lsrs	r0, r1, #3
 8014d6a:	9907      	ldr	r1, [sp, #28]
 8014d6c:	4304      	orrs	r4, r0
 8014d6e:	08c9      	lsrs	r1, r1, #3
 8014d70:	9107      	str	r1, [sp, #28]
 8014d72:	0021      	movs	r1, r4
 8014d74:	9807      	ldr	r0, [sp, #28]
 8014d76:	9406      	str	r4, [sp, #24]
 8014d78:	4301      	orrs	r1, r0
 8014d7a:	d111      	bne.n	8014da0 <_svfprintf_r+0xc98>
 8014d7c:	07f1      	lsls	r1, r6, #31
 8014d7e:	d502      	bpl.n	8014d86 <_svfprintf_r+0xc7e>
 8014d80:	3b02      	subs	r3, #2
 8014d82:	2a30      	cmp	r2, #48	; 0x30
 8014d84:	d173      	bne.n	8014e6e <_svfprintf_r+0xd66>
 8014d86:	9b08      	ldr	r3, [sp, #32]
 8014d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d8c:	ab58      	add	r3, sp, #352	; 0x160
 8014d8e:	1a9b      	subs	r3, r3, r2
 8014d90:	9308      	str	r3, [sp, #32]
 8014d92:	2300      	movs	r3, #0
 8014d94:	930c      	str	r3, [sp, #48]	; 0x30
 8014d96:	9310      	str	r3, [sp, #64]	; 0x40
 8014d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d9a:	001d      	movs	r5, r3
 8014d9c:	f7ff fb4b 	bl	8014436 <_svfprintf_r+0x32e>
 8014da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da2:	e7d7      	b.n	8014d54 <_svfprintf_r+0xc4c>
 8014da4:	2480      	movs	r4, #128	; 0x80
 8014da6:	2300      	movs	r3, #0
 8014da8:	00e4      	lsls	r4, r4, #3
 8014daa:	930d      	str	r3, [sp, #52]	; 0x34
 8014dac:	4034      	ands	r4, r6
 8014dae:	ab58      	add	r3, sp, #352	; 0x160
 8014db0:	3b01      	subs	r3, #1
 8014db2:	9309      	str	r3, [sp, #36]	; 0x24
 8014db4:	220a      	movs	r2, #10
 8014db6:	9806      	ldr	r0, [sp, #24]
 8014db8:	9907      	ldr	r1, [sp, #28]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	f7eb fbb6 	bl	800052c <__aeabi_uldivmod>
 8014dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dc2:	3230      	adds	r2, #48	; 0x30
 8014dc4:	701a      	strb	r2, [r3, #0]
 8014dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dc8:	3301      	adds	r3, #1
 8014dca:	930d      	str	r3, [sp, #52]	; 0x34
 8014dcc:	2c00      	cmp	r4, #0
 8014dce:	d01d      	beq.n	8014e0c <_svfprintf_r+0xd04>
 8014dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d118      	bne.n	8014e0c <_svfprintf_r+0xd04>
 8014dda:	2aff      	cmp	r2, #255	; 0xff
 8014ddc:	d016      	beq.n	8014e0c <_svfprintf_r+0xd04>
 8014dde:	9b07      	ldr	r3, [sp, #28]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d102      	bne.n	8014dea <_svfprintf_r+0xce2>
 8014de4:	9b06      	ldr	r3, [sp, #24]
 8014de6:	2b09      	cmp	r3, #9
 8014de8:	d910      	bls.n	8014e0c <_svfprintf_r+0xd04>
 8014dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014dee:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014df0:	1a9b      	subs	r3, r3, r2
 8014df2:	0018      	movs	r0, r3
 8014df4:	9309      	str	r3, [sp, #36]	; 0x24
 8014df6:	f7fe fa52 	bl	801329e <strncpy>
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dfe:	920d      	str	r2, [sp, #52]	; 0x34
 8014e00:	785b      	ldrb	r3, [r3, #1]
 8014e02:	1e5a      	subs	r2, r3, #1
 8014e04:	4193      	sbcs	r3, r2
 8014e06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e08:	18d3      	adds	r3, r2, r3
 8014e0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e0c:	220a      	movs	r2, #10
 8014e0e:	9806      	ldr	r0, [sp, #24]
 8014e10:	9907      	ldr	r1, [sp, #28]
 8014e12:	2300      	movs	r3, #0
 8014e14:	f7eb fb8a 	bl	800052c <__aeabi_uldivmod>
 8014e18:	9006      	str	r0, [sp, #24]
 8014e1a:	9107      	str	r1, [sp, #28]
 8014e1c:	9b06      	ldr	r3, [sp, #24]
 8014e1e:	9a07      	ldr	r2, [sp, #28]
 8014e20:	4313      	orrs	r3, r2
 8014e22:	d0b0      	beq.n	8014d86 <_svfprintf_r+0xc7e>
 8014e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e26:	e7c3      	b.n	8014db0 <_svfprintf_r+0xca8>
 8014e28:	200f      	movs	r0, #15
 8014e2a:	ab58      	add	r3, sp, #352	; 0x160
 8014e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014e32:	3b01      	subs	r3, #1
 8014e34:	9309      	str	r3, [sp, #36]	; 0x24
 8014e36:	9b06      	ldr	r3, [sp, #24]
 8014e38:	4003      	ands	r3, r0
 8014e3a:	5cd3      	ldrb	r3, [r2, r3]
 8014e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e3e:	7013      	strb	r3, [r2, #0]
 8014e40:	9b07      	ldr	r3, [sp, #28]
 8014e42:	0719      	lsls	r1, r3, #28
 8014e44:	9b06      	ldr	r3, [sp, #24]
 8014e46:	091a      	lsrs	r2, r3, #4
 8014e48:	9b07      	ldr	r3, [sp, #28]
 8014e4a:	4311      	orrs	r1, r2
 8014e4c:	091b      	lsrs	r3, r3, #4
 8014e4e:	9307      	str	r3, [sp, #28]
 8014e50:	000b      	movs	r3, r1
 8014e52:	9a07      	ldr	r2, [sp, #28]
 8014e54:	9106      	str	r1, [sp, #24]
 8014e56:	4313      	orrs	r3, r2
 8014e58:	d1e9      	bne.n	8014e2e <_svfprintf_r+0xd26>
 8014e5a:	e794      	b.n	8014d86 <_svfprintf_r+0xc7e>
 8014e5c:	a958      	add	r1, sp, #352	; 0x160
 8014e5e:	9109      	str	r1, [sp, #36]	; 0x24
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d190      	bne.n	8014d86 <_svfprintf_r+0xc7e>
 8014e64:	07d3      	lsls	r3, r2, #31
 8014e66:	d58e      	bpl.n	8014d86 <_svfprintf_r+0xc7e>
 8014e68:	23e7      	movs	r3, #231	; 0xe7
 8014e6a:	aa1e      	add	r2, sp, #120	; 0x78
 8014e6c:	189b      	adds	r3, r3, r2
 8014e6e:	2230      	movs	r2, #48	; 0x30
 8014e70:	f7ff fbf0 	bl	8014654 <_svfprintf_r+0x54c>
 8014e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d100      	bne.n	8014e7c <_svfprintf_r+0xd74>
 8014e7a:	e38a      	b.n	8015592 <_svfprintf_r+0x148a>
 8014e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e7e:	ab3f      	add	r3, sp, #252	; 0xfc
 8014e80:	701a      	strb	r2, [r3, #0]
 8014e82:	221b      	movs	r2, #27
 8014e84:	2000      	movs	r0, #0
 8014e86:	a91e      	add	r1, sp, #120	; 0x78
 8014e88:	1852      	adds	r2, r2, r1
 8014e8a:	7010      	strb	r0, [r2, #0]
 8014e8c:	9412      	str	r4, [sp, #72]	; 0x48
 8014e8e:	f7ff faca 	bl	8014426 <_svfprintf_r+0x31e>
 8014e92:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e96:	e592      	b.n	80149be <_svfprintf_r+0x8b6>
 8014e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e9a:	e42a      	b.n	80146f2 <_svfprintf_r+0x5ea>
 8014e9c:	2010      	movs	r0, #16
 8014e9e:	1812      	adds	r2, r2, r0
 8014ea0:	6078      	str	r0, [r7, #4]
 8014ea2:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ea4:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ea6:	2b07      	cmp	r3, #7
 8014ea8:	dd08      	ble.n	8014ebc <_svfprintf_r+0xdb4>
 8014eaa:	aa2c      	add	r2, sp, #176	; 0xb0
 8014eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eb0:	f002 fa7e 	bl	80173b0 <__ssprint_r>
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d000      	beq.n	8014eba <_svfprintf_r+0xdb2>
 8014eb8:	e34a      	b.n	8015550 <_svfprintf_r+0x1448>
 8014eba:	a92f      	add	r1, sp, #188	; 0xbc
 8014ebc:	3c10      	subs	r4, #16
 8014ebe:	000f      	movs	r7, r1
 8014ec0:	f7ff fad8 	bl	8014474 <_svfprintf_r+0x36c>
 8014ec4:	2010      	movs	r0, #16
 8014ec6:	1812      	adds	r2, r2, r0
 8014ec8:	6078      	str	r0, [r7, #4]
 8014eca:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ecc:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ece:	2b07      	cmp	r3, #7
 8014ed0:	dd08      	ble.n	8014ee4 <_svfprintf_r+0xddc>
 8014ed2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ed6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ed8:	f002 fa6a 	bl	80173b0 <__ssprint_r>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d000      	beq.n	8014ee2 <_svfprintf_r+0xdda>
 8014ee0:	e336      	b.n	8015550 <_svfprintf_r+0x1448>
 8014ee2:	a92f      	add	r1, sp, #188	; 0xbc
 8014ee4:	3c10      	subs	r4, #16
 8014ee6:	000f      	movs	r7, r1
 8014ee8:	f7ff fb24 	bl	8014534 <_svfprintf_r+0x42c>
 8014eec:	fffffbff 	.word	0xfffffbff
 8014ef0:	00007830 	.word	0x00007830
 8014ef4:	0801a5b8 	.word	0x0801a5b8
 8014ef8:	2010      	movs	r0, #16
 8014efa:	1812      	adds	r2, r2, r0
 8014efc:	6078      	str	r0, [r7, #4]
 8014efe:	922e      	str	r2, [sp, #184]	; 0xb8
 8014f00:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f02:	2b07      	cmp	r3, #7
 8014f04:	dd08      	ble.n	8014f18 <_svfprintf_r+0xe10>
 8014f06:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f0c:	f002 fa50 	bl	80173b0 <__ssprint_r>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d000      	beq.n	8014f16 <_svfprintf_r+0xe0e>
 8014f14:	e31c      	b.n	8015550 <_svfprintf_r+0x1448>
 8014f16:	a92f      	add	r1, sp, #188	; 0xbc
 8014f18:	3c10      	subs	r4, #16
 8014f1a:	000f      	movs	r7, r1
 8014f1c:	f7ff fb2c 	bl	8014578 <_svfprintf_r+0x470>
 8014f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f22:	2b65      	cmp	r3, #101	; 0x65
 8014f24:	dc00      	bgt.n	8014f28 <_svfprintf_r+0xe20>
 8014f26:	e259      	b.n	80153dc <_svfprintf_r+0x12d4>
 8014f28:	2200      	movs	r2, #0
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014f2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014f30:	f7eb fa94 	bl	800045c <__aeabi_dcmpeq>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d07c      	beq.n	8015032 <_svfprintf_r+0xf2a>
 8014f38:	4b81      	ldr	r3, [pc, #516]	; (8015140 <_svfprintf_r+0x1038>)
 8014f3a:	603b      	str	r3, [r7, #0]
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	607b      	str	r3, [r7, #4]
 8014f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f42:	3708      	adds	r7, #8
 8014f44:	3301      	adds	r3, #1
 8014f46:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f4a:	9308      	str	r3, [sp, #32]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f50:	2b07      	cmp	r3, #7
 8014f52:	dd08      	ble.n	8014f66 <_svfprintf_r+0xe5e>
 8014f54:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f5a:	f002 fa29 	bl	80173b0 <__ssprint_r>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d000      	beq.n	8014f64 <_svfprintf_r+0xe5c>
 8014f62:	e2f5      	b.n	8015550 <_svfprintf_r+0x1448>
 8014f64:	af2f      	add	r7, sp, #188	; 0xbc
 8014f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	db01      	blt.n	8014f72 <_svfprintf_r+0xe6a>
 8014f6e:	07f3      	lsls	r3, r6, #31
 8014f70:	d51d      	bpl.n	8014fae <_svfprintf_r+0xea6>
 8014f72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f76:	4694      	mov	ip, r2
 8014f78:	603b      	str	r3, [r7, #0]
 8014f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f7c:	607b      	str	r3, [r7, #4]
 8014f7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f80:	3708      	adds	r7, #8
 8014f82:	4463      	add	r3, ip
 8014f84:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f86:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f88:	9308      	str	r3, [sp, #32]
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f8e:	2b07      	cmp	r3, #7
 8014f90:	dd08      	ble.n	8014fa4 <_svfprintf_r+0xe9c>
 8014f92:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f98:	f002 fa0a 	bl	80173b0 <__ssprint_r>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d000      	beq.n	8014fa2 <_svfprintf_r+0xe9a>
 8014fa0:	e2d6      	b.n	8015550 <_svfprintf_r+0x1448>
 8014fa2:	af2f      	add	r7, sp, #188	; 0xbc
 8014fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fa6:	2510      	movs	r5, #16
 8014fa8:	1e5c      	subs	r4, r3, #1
 8014faa:	2c00      	cmp	r4, #0
 8014fac:	dc2f      	bgt.n	801500e <_svfprintf_r+0xf06>
 8014fae:	0773      	lsls	r3, r6, #29
 8014fb0:	d500      	bpl.n	8014fb4 <_svfprintf_r+0xeac>
 8014fb2:	e2af      	b.n	8015514 <_svfprintf_r+0x140c>
 8014fb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014fb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	da00      	bge.n	8014fbe <_svfprintf_r+0xeb6>
 8014fbc:	0013      	movs	r3, r2
 8014fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014fc0:	18d3      	adds	r3, r2, r3
 8014fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8014fc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014fc6:	9308      	str	r3, [sp, #32]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d007      	beq.n	8014fdc <_svfprintf_r+0xed4>
 8014fcc:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fd2:	f002 f9ed 	bl	80173b0 <__ssprint_r>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d000      	beq.n	8014fdc <_svfprintf_r+0xed4>
 8014fda:	e2b9      	b.n	8015550 <_svfprintf_r+0x1448>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d000      	beq.n	8014fe8 <_svfprintf_r+0xee0>
 8014fe6:	e2cf      	b.n	8015588 <_svfprintf_r+0x1480>
 8014fe8:	af2f      	add	r7, sp, #188	; 0xbc
 8014fea:	e5d6      	b.n	8014b9a <_svfprintf_r+0xa92>
 8014fec:	3210      	adds	r2, #16
 8014fee:	607d      	str	r5, [r7, #4]
 8014ff0:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ff2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ff4:	2b07      	cmp	r3, #7
 8014ff6:	dd08      	ble.n	801500a <_svfprintf_r+0xf02>
 8014ff8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ffc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ffe:	f002 f9d7 	bl	80173b0 <__ssprint_r>
 8015002:	2800      	cmp	r0, #0
 8015004:	d000      	beq.n	8015008 <_svfprintf_r+0xf00>
 8015006:	e2a3      	b.n	8015550 <_svfprintf_r+0x1448>
 8015008:	a92f      	add	r1, sp, #188	; 0xbc
 801500a:	000f      	movs	r7, r1
 801500c:	3c10      	subs	r4, #16
 801500e:	0039      	movs	r1, r7
 8015010:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015012:	484c      	ldr	r0, [pc, #304]	; (8015144 <_svfprintf_r+0x103c>)
 8015014:	9308      	str	r3, [sp, #32]
 8015016:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015018:	3301      	adds	r3, #1
 801501a:	3108      	adds	r1, #8
 801501c:	6038      	str	r0, [r7, #0]
 801501e:	2c10      	cmp	r4, #16
 8015020:	dce4      	bgt.n	8014fec <_svfprintf_r+0xee4>
 8015022:	607c      	str	r4, [r7, #4]
 8015024:	18a4      	adds	r4, r4, r2
 8015026:	942e      	str	r4, [sp, #184]	; 0xb8
 8015028:	932d      	str	r3, [sp, #180]	; 0xb4
 801502a:	000f      	movs	r7, r1
 801502c:	2b07      	cmp	r3, #7
 801502e:	ddbe      	ble.n	8014fae <_svfprintf_r+0xea6>
 8015030:	e06a      	b.n	8015108 <_svfprintf_r+0x1000>
 8015032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015034:	2b00      	cmp	r3, #0
 8015036:	dd00      	ble.n	801503a <_svfprintf_r+0xf32>
 8015038:	e086      	b.n	8015148 <_svfprintf_r+0x1040>
 801503a:	4b41      	ldr	r3, [pc, #260]	; (8015140 <_svfprintf_r+0x1038>)
 801503c:	603b      	str	r3, [r7, #0]
 801503e:	2301      	movs	r3, #1
 8015040:	607b      	str	r3, [r7, #4]
 8015042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015044:	3708      	adds	r7, #8
 8015046:	3301      	adds	r3, #1
 8015048:	932e      	str	r3, [sp, #184]	; 0xb8
 801504a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801504c:	9308      	str	r3, [sp, #32]
 801504e:	3301      	adds	r3, #1
 8015050:	932d      	str	r3, [sp, #180]	; 0xb4
 8015052:	2b07      	cmp	r3, #7
 8015054:	dd08      	ble.n	8015068 <_svfprintf_r+0xf60>
 8015056:	aa2c      	add	r2, sp, #176	; 0xb0
 8015058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801505a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801505c:	f002 f9a8 	bl	80173b0 <__ssprint_r>
 8015060:	2800      	cmp	r0, #0
 8015062:	d000      	beq.n	8015066 <_svfprintf_r+0xf5e>
 8015064:	e274      	b.n	8015550 <_svfprintf_r+0x1448>
 8015066:	af2f      	add	r7, sp, #188	; 0xbc
 8015068:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801506a:	2b00      	cmp	r3, #0
 801506c:	d104      	bne.n	8015078 <_svfprintf_r+0xf70>
 801506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015070:	2b00      	cmp	r3, #0
 8015072:	d101      	bne.n	8015078 <_svfprintf_r+0xf70>
 8015074:	07f3      	lsls	r3, r6, #31
 8015076:	d59a      	bpl.n	8014fae <_svfprintf_r+0xea6>
 8015078:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801507a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801507c:	4694      	mov	ip, r2
 801507e:	603b      	str	r3, [r7, #0]
 8015080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015082:	607b      	str	r3, [r7, #4]
 8015084:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015086:	3708      	adds	r7, #8
 8015088:	4463      	add	r3, ip
 801508a:	932e      	str	r3, [sp, #184]	; 0xb8
 801508c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801508e:	9308      	str	r3, [sp, #32]
 8015090:	3301      	adds	r3, #1
 8015092:	932d      	str	r3, [sp, #180]	; 0xb4
 8015094:	2b07      	cmp	r3, #7
 8015096:	dd08      	ble.n	80150aa <_svfprintf_r+0xfa2>
 8015098:	aa2c      	add	r2, sp, #176	; 0xb0
 801509a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801509c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801509e:	f002 f987 	bl	80173b0 <__ssprint_r>
 80150a2:	2800      	cmp	r0, #0
 80150a4:	d000      	beq.n	80150a8 <_svfprintf_r+0xfa0>
 80150a6:	e253      	b.n	8015550 <_svfprintf_r+0x1448>
 80150a8:	af2f      	add	r7, sp, #188	; 0xbc
 80150aa:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80150ac:	2c00      	cmp	r4, #0
 80150ae:	da1a      	bge.n	80150e6 <_svfprintf_r+0xfde>
 80150b0:	0039      	movs	r1, r7
 80150b2:	2510      	movs	r5, #16
 80150b4:	4264      	negs	r4, r4
 80150b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150b8:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80150ba:	9308      	str	r3, [sp, #32]
 80150bc:	1c5a      	adds	r2, r3, #1
 80150be:	4b21      	ldr	r3, [pc, #132]	; (8015144 <_svfprintf_r+0x103c>)
 80150c0:	3708      	adds	r7, #8
 80150c2:	600b      	str	r3, [r1, #0]
 80150c4:	2c10      	cmp	r4, #16
 80150c6:	dc29      	bgt.n	801511c <_svfprintf_r+0x1014>
 80150c8:	604c      	str	r4, [r1, #4]
 80150ca:	1824      	adds	r4, r4, r0
 80150cc:	942e      	str	r4, [sp, #184]	; 0xb8
 80150ce:	922d      	str	r2, [sp, #180]	; 0xb4
 80150d0:	2a07      	cmp	r2, #7
 80150d2:	dd08      	ble.n	80150e6 <_svfprintf_r+0xfde>
 80150d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80150d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150da:	f002 f969 	bl	80173b0 <__ssprint_r>
 80150de:	2800      	cmp	r0, #0
 80150e0:	d000      	beq.n	80150e4 <_svfprintf_r+0xfdc>
 80150e2:	e235      	b.n	8015550 <_svfprintf_r+0x1448>
 80150e4:	af2f      	add	r7, sp, #188	; 0xbc
 80150e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80150e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ea:	468c      	mov	ip, r1
 80150ec:	603b      	str	r3, [r7, #0]
 80150ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150f0:	607b      	str	r3, [r7, #4]
 80150f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150f4:	4463      	add	r3, ip
 80150f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80150f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150fa:	1c5a      	adds	r2, r3, #1
 80150fc:	9308      	str	r3, [sp, #32]
 80150fe:	922d      	str	r2, [sp, #180]	; 0xb4
 8015100:	2a07      	cmp	r2, #7
 8015102:	dc01      	bgt.n	8015108 <_svfprintf_r+0x1000>
 8015104:	f7ff fa6c 	bl	80145e0 <_svfprintf_r+0x4d8>
 8015108:	aa2c      	add	r2, sp, #176	; 0xb0
 801510a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801510c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801510e:	f002 f94f 	bl	80173b0 <__ssprint_r>
 8015112:	2800      	cmp	r0, #0
 8015114:	d000      	beq.n	8015118 <_svfprintf_r+0x1010>
 8015116:	e21b      	b.n	8015550 <_svfprintf_r+0x1448>
 8015118:	af2f      	add	r7, sp, #188	; 0xbc
 801511a:	e748      	b.n	8014fae <_svfprintf_r+0xea6>
 801511c:	3010      	adds	r0, #16
 801511e:	604d      	str	r5, [r1, #4]
 8015120:	902e      	str	r0, [sp, #184]	; 0xb8
 8015122:	922d      	str	r2, [sp, #180]	; 0xb4
 8015124:	2a07      	cmp	r2, #7
 8015126:	dd08      	ble.n	801513a <_svfprintf_r+0x1032>
 8015128:	aa2c      	add	r2, sp, #176	; 0xb0
 801512a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801512c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801512e:	f002 f93f 	bl	80173b0 <__ssprint_r>
 8015132:	2800      	cmp	r0, #0
 8015134:	d000      	beq.n	8015138 <_svfprintf_r+0x1030>
 8015136:	e20b      	b.n	8015550 <_svfprintf_r+0x1448>
 8015138:	af2f      	add	r7, sp, #188	; 0xbc
 801513a:	3c10      	subs	r4, #16
 801513c:	0039      	movs	r1, r7
 801513e:	e7ba      	b.n	80150b6 <_svfprintf_r+0xfae>
 8015140:	0801a5da 	.word	0x0801a5da
 8015144:	0801a5ec 	.word	0x0801a5ec
 8015148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801514a:	002c      	movs	r4, r5
 801514c:	429d      	cmp	r5, r3
 801514e:	dd00      	ble.n	8015152 <_svfprintf_r+0x104a>
 8015150:	001c      	movs	r4, r3
 8015152:	2c00      	cmp	r4, #0
 8015154:	dd15      	ble.n	8015182 <_svfprintf_r+0x107a>
 8015156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015158:	607c      	str	r4, [r7, #4]
 801515a:	603b      	str	r3, [r7, #0]
 801515c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801515e:	3708      	adds	r7, #8
 8015160:	18e3      	adds	r3, r4, r3
 8015162:	932e      	str	r3, [sp, #184]	; 0xb8
 8015164:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015166:	9308      	str	r3, [sp, #32]
 8015168:	3301      	adds	r3, #1
 801516a:	932d      	str	r3, [sp, #180]	; 0xb4
 801516c:	2b07      	cmp	r3, #7
 801516e:	dd08      	ble.n	8015182 <_svfprintf_r+0x107a>
 8015170:	aa2c      	add	r2, sp, #176	; 0xb0
 8015172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015174:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015176:	f002 f91b 	bl	80173b0 <__ssprint_r>
 801517a:	2800      	cmp	r0, #0
 801517c:	d000      	beq.n	8015180 <_svfprintf_r+0x1078>
 801517e:	e1e7      	b.n	8015550 <_svfprintf_r+0x1448>
 8015180:	af2f      	add	r7, sp, #188	; 0xbc
 8015182:	43e3      	mvns	r3, r4
 8015184:	17db      	asrs	r3, r3, #31
 8015186:	401c      	ands	r4, r3
 8015188:	1b2c      	subs	r4, r5, r4
 801518a:	2c00      	cmp	r4, #0
 801518c:	dd1a      	ble.n	80151c4 <_svfprintf_r+0x10bc>
 801518e:	0039      	movs	r1, r7
 8015190:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015192:	48d4      	ldr	r0, [pc, #848]	; (80154e4 <_svfprintf_r+0x13dc>)
 8015194:	9308      	str	r3, [sp, #32]
 8015196:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015198:	3301      	adds	r3, #1
 801519a:	3108      	adds	r1, #8
 801519c:	6038      	str	r0, [r7, #0]
 801519e:	2c10      	cmp	r4, #16
 80151a0:	dd00      	ble.n	80151a4 <_svfprintf_r+0x109c>
 80151a2:	e089      	b.n	80152b8 <_svfprintf_r+0x11b0>
 80151a4:	607c      	str	r4, [r7, #4]
 80151a6:	18a4      	adds	r4, r4, r2
 80151a8:	942e      	str	r4, [sp, #184]	; 0xb8
 80151aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80151ac:	000f      	movs	r7, r1
 80151ae:	2b07      	cmp	r3, #7
 80151b0:	dd08      	ble.n	80151c4 <_svfprintf_r+0x10bc>
 80151b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80151b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151b8:	f002 f8fa 	bl	80173b0 <__ssprint_r>
 80151bc:	2800      	cmp	r0, #0
 80151be:	d000      	beq.n	80151c2 <_svfprintf_r+0x10ba>
 80151c0:	e1c6      	b.n	8015550 <_svfprintf_r+0x1448>
 80151c2:	af2f      	add	r7, sp, #188	; 0xbc
 80151c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151c6:	195d      	adds	r5, r3, r5
 80151c8:	0573      	lsls	r3, r6, #21
 80151ca:	d50d      	bpl.n	80151e8 <_svfprintf_r+0x10e0>
 80151cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d000      	beq.n	80151d4 <_svfprintf_r+0x10cc>
 80151d2:	e084      	b.n	80152de <_svfprintf_r+0x11d6>
 80151d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d000      	beq.n	80151dc <_svfprintf_r+0x10d4>
 80151da:	e083      	b.n	80152e4 <_svfprintf_r+0x11dc>
 80151dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151e0:	189b      	adds	r3, r3, r2
 80151e2:	429d      	cmp	r5, r3
 80151e4:	d900      	bls.n	80151e8 <_svfprintf_r+0x10e0>
 80151e6:	001d      	movs	r5, r3
 80151e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151ec:	4293      	cmp	r3, r2
 80151ee:	db01      	blt.n	80151f4 <_svfprintf_r+0x10ec>
 80151f0:	07f3      	lsls	r3, r6, #31
 80151f2:	d518      	bpl.n	8015226 <_svfprintf_r+0x111e>
 80151f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80151f8:	4694      	mov	ip, r2
 80151fa:	603b      	str	r3, [r7, #0]
 80151fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151fe:	607b      	str	r3, [r7, #4]
 8015200:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015202:	3708      	adds	r7, #8
 8015204:	4463      	add	r3, ip
 8015206:	932e      	str	r3, [sp, #184]	; 0xb8
 8015208:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801520a:	9308      	str	r3, [sp, #32]
 801520c:	3301      	adds	r3, #1
 801520e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015210:	2b07      	cmp	r3, #7
 8015212:	dd08      	ble.n	8015226 <_svfprintf_r+0x111e>
 8015214:	aa2c      	add	r2, sp, #176	; 0xb0
 8015216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015218:	980a      	ldr	r0, [sp, #40]	; 0x28
 801521a:	f002 f8c9 	bl	80173b0 <__ssprint_r>
 801521e:	2800      	cmp	r0, #0
 8015220:	d000      	beq.n	8015224 <_svfprintf_r+0x111c>
 8015222:	e195      	b.n	8015550 <_svfprintf_r+0x1448>
 8015224:	af2f      	add	r7, sp, #188	; 0xbc
 8015226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801522a:	4694      	mov	ip, r2
 801522c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801522e:	4463      	add	r3, ip
 8015230:	1b5b      	subs	r3, r3, r5
 8015232:	1a54      	subs	r4, r2, r1
 8015234:	429c      	cmp	r4, r3
 8015236:	dd00      	ble.n	801523a <_svfprintf_r+0x1132>
 8015238:	001c      	movs	r4, r3
 801523a:	2c00      	cmp	r4, #0
 801523c:	dd14      	ble.n	8015268 <_svfprintf_r+0x1160>
 801523e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015240:	603d      	str	r5, [r7, #0]
 8015242:	18e3      	adds	r3, r4, r3
 8015244:	932e      	str	r3, [sp, #184]	; 0xb8
 8015246:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015248:	607c      	str	r4, [r7, #4]
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	3301      	adds	r3, #1
 801524e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015250:	3708      	adds	r7, #8
 8015252:	2b07      	cmp	r3, #7
 8015254:	dd08      	ble.n	8015268 <_svfprintf_r+0x1160>
 8015256:	aa2c      	add	r2, sp, #176	; 0xb0
 8015258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801525a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801525c:	f002 f8a8 	bl	80173b0 <__ssprint_r>
 8015260:	2800      	cmp	r0, #0
 8015262:	d000      	beq.n	8015266 <_svfprintf_r+0x115e>
 8015264:	e174      	b.n	8015550 <_svfprintf_r+0x1448>
 8015266:	af2f      	add	r7, sp, #188	; 0xbc
 8015268:	43e3      	mvns	r3, r4
 801526a:	17db      	asrs	r3, r3, #31
 801526c:	401c      	ands	r4, r3
 801526e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015272:	2510      	movs	r5, #16
 8015274:	1a9b      	subs	r3, r3, r2
 8015276:	1b1c      	subs	r4, r3, r4
 8015278:	2c00      	cmp	r4, #0
 801527a:	dc00      	bgt.n	801527e <_svfprintf_r+0x1176>
 801527c:	e697      	b.n	8014fae <_svfprintf_r+0xea6>
 801527e:	0039      	movs	r1, r7
 8015280:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015282:	4898      	ldr	r0, [pc, #608]	; (80154e4 <_svfprintf_r+0x13dc>)
 8015284:	9308      	str	r3, [sp, #32]
 8015286:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015288:	3301      	adds	r3, #1
 801528a:	3108      	adds	r1, #8
 801528c:	6038      	str	r0, [r7, #0]
 801528e:	2c10      	cmp	r4, #16
 8015290:	dc00      	bgt.n	8015294 <_svfprintf_r+0x118c>
 8015292:	e6c6      	b.n	8015022 <_svfprintf_r+0xf1a>
 8015294:	3210      	adds	r2, #16
 8015296:	607d      	str	r5, [r7, #4]
 8015298:	922e      	str	r2, [sp, #184]	; 0xb8
 801529a:	932d      	str	r3, [sp, #180]	; 0xb4
 801529c:	2b07      	cmp	r3, #7
 801529e:	dd08      	ble.n	80152b2 <_svfprintf_r+0x11aa>
 80152a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80152a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152a6:	f002 f883 	bl	80173b0 <__ssprint_r>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d000      	beq.n	80152b0 <_svfprintf_r+0x11a8>
 80152ae:	e14f      	b.n	8015550 <_svfprintf_r+0x1448>
 80152b0:	a92f      	add	r1, sp, #188	; 0xbc
 80152b2:	3c10      	subs	r4, #16
 80152b4:	000f      	movs	r7, r1
 80152b6:	e7e2      	b.n	801527e <_svfprintf_r+0x1176>
 80152b8:	2010      	movs	r0, #16
 80152ba:	1812      	adds	r2, r2, r0
 80152bc:	6078      	str	r0, [r7, #4]
 80152be:	922e      	str	r2, [sp, #184]	; 0xb8
 80152c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80152c2:	2b07      	cmp	r3, #7
 80152c4:	dd08      	ble.n	80152d8 <_svfprintf_r+0x11d0>
 80152c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80152c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152cc:	f002 f870 	bl	80173b0 <__ssprint_r>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d000      	beq.n	80152d6 <_svfprintf_r+0x11ce>
 80152d4:	e13c      	b.n	8015550 <_svfprintf_r+0x1448>
 80152d6:	a92f      	add	r1, sp, #188	; 0xbc
 80152d8:	3c10      	subs	r4, #16
 80152da:	000f      	movs	r7, r1
 80152dc:	e757      	b.n	801518e <_svfprintf_r+0x1086>
 80152de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d061      	beq.n	80153a8 <_svfprintf_r+0x12a0>
 80152e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152e6:	3b01      	subs	r3, #1
 80152e8:	9310      	str	r3, [sp, #64]	; 0x40
 80152ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80152ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152ee:	4694      	mov	ip, r2
 80152f0:	603b      	str	r3, [r7, #0]
 80152f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152f4:	607b      	str	r3, [r7, #4]
 80152f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152f8:	3708      	adds	r7, #8
 80152fa:	4463      	add	r3, ip
 80152fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80152fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015300:	9308      	str	r3, [sp, #32]
 8015302:	3301      	adds	r3, #1
 8015304:	932d      	str	r3, [sp, #180]	; 0xb4
 8015306:	2b07      	cmp	r3, #7
 8015308:	dd08      	ble.n	801531c <_svfprintf_r+0x1214>
 801530a:	aa2c      	add	r2, sp, #176	; 0xb0
 801530c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801530e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015310:	f002 f84e 	bl	80173b0 <__ssprint_r>
 8015314:	2800      	cmp	r0, #0
 8015316:	d000      	beq.n	801531a <_svfprintf_r+0x1212>
 8015318:	e11a      	b.n	8015550 <_svfprintf_r+0x1448>
 801531a:	af2f      	add	r7, sp, #188	; 0xbc
 801531c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015320:	189b      	adds	r3, r3, r2
 8015322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015324:	1b5b      	subs	r3, r3, r5
 8015326:	7814      	ldrb	r4, [r2, #0]
 8015328:	429c      	cmp	r4, r3
 801532a:	dd00      	ble.n	801532e <_svfprintf_r+0x1226>
 801532c:	001c      	movs	r4, r3
 801532e:	2c00      	cmp	r4, #0
 8015330:	dd14      	ble.n	801535c <_svfprintf_r+0x1254>
 8015332:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015334:	603d      	str	r5, [r7, #0]
 8015336:	18e3      	adds	r3, r4, r3
 8015338:	932e      	str	r3, [sp, #184]	; 0xb8
 801533a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801533c:	607c      	str	r4, [r7, #4]
 801533e:	9308      	str	r3, [sp, #32]
 8015340:	3301      	adds	r3, #1
 8015342:	932d      	str	r3, [sp, #180]	; 0xb4
 8015344:	3708      	adds	r7, #8
 8015346:	2b07      	cmp	r3, #7
 8015348:	dd08      	ble.n	801535c <_svfprintf_r+0x1254>
 801534a:	aa2c      	add	r2, sp, #176	; 0xb0
 801534c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015350:	f002 f82e 	bl	80173b0 <__ssprint_r>
 8015354:	2800      	cmp	r0, #0
 8015356:	d000      	beq.n	801535a <_svfprintf_r+0x1252>
 8015358:	e0fa      	b.n	8015550 <_svfprintf_r+0x1448>
 801535a:	af2f      	add	r7, sp, #188	; 0xbc
 801535c:	43e3      	mvns	r3, r4
 801535e:	17db      	asrs	r3, r3, #31
 8015360:	401c      	ands	r4, r3
 8015362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	1b1c      	subs	r4, r3, r4
 8015368:	2c00      	cmp	r4, #0
 801536a:	dd19      	ble.n	80153a0 <_svfprintf_r+0x1298>
 801536c:	0039      	movs	r1, r7
 801536e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015370:	485c      	ldr	r0, [pc, #368]	; (80154e4 <_svfprintf_r+0x13dc>)
 8015372:	9308      	str	r3, [sp, #32]
 8015374:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015376:	3301      	adds	r3, #1
 8015378:	3108      	adds	r1, #8
 801537a:	6038      	str	r0, [r7, #0]
 801537c:	2c10      	cmp	r4, #16
 801537e:	dc1a      	bgt.n	80153b6 <_svfprintf_r+0x12ae>
 8015380:	607c      	str	r4, [r7, #4]
 8015382:	18a4      	adds	r4, r4, r2
 8015384:	942e      	str	r4, [sp, #184]	; 0xb8
 8015386:	932d      	str	r3, [sp, #180]	; 0xb4
 8015388:	000f      	movs	r7, r1
 801538a:	2b07      	cmp	r3, #7
 801538c:	dd08      	ble.n	80153a0 <_svfprintf_r+0x1298>
 801538e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015392:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015394:	f002 f80c 	bl	80173b0 <__ssprint_r>
 8015398:	2800      	cmp	r0, #0
 801539a:	d000      	beq.n	801539e <_svfprintf_r+0x1296>
 801539c:	e0d8      	b.n	8015550 <_svfprintf_r+0x1448>
 801539e:	af2f      	add	r7, sp, #188	; 0xbc
 80153a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	18ed      	adds	r5, r5, r3
 80153a6:	e711      	b.n	80151cc <_svfprintf_r+0x10c4>
 80153a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153aa:	3b01      	subs	r3, #1
 80153ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80153ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153b0:	3b01      	subs	r3, #1
 80153b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80153b4:	e799      	b.n	80152ea <_svfprintf_r+0x11e2>
 80153b6:	2010      	movs	r0, #16
 80153b8:	1812      	adds	r2, r2, r0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	922e      	str	r2, [sp, #184]	; 0xb8
 80153be:	932d      	str	r3, [sp, #180]	; 0xb4
 80153c0:	2b07      	cmp	r3, #7
 80153c2:	dd08      	ble.n	80153d6 <_svfprintf_r+0x12ce>
 80153c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80153c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153ca:	f001 fff1 	bl	80173b0 <__ssprint_r>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d000      	beq.n	80153d4 <_svfprintf_r+0x12cc>
 80153d2:	e0bd      	b.n	8015550 <_svfprintf_r+0x1448>
 80153d4:	a92f      	add	r1, sp, #188	; 0xbc
 80153d6:	3c10      	subs	r4, #16
 80153d8:	000f      	movs	r7, r1
 80153da:	e7c7      	b.n	801536c <_svfprintf_r+0x1264>
 80153dc:	003c      	movs	r4, r7
 80153de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80153e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153e4:	9308      	str	r3, [sp, #32]
 80153e6:	3101      	adds	r1, #1
 80153e8:	3301      	adds	r3, #1
 80153ea:	3408      	adds	r4, #8
 80153ec:	2a01      	cmp	r2, #1
 80153ee:	dc03      	bgt.n	80153f8 <_svfprintf_r+0x12f0>
 80153f0:	2201      	movs	r2, #1
 80153f2:	4216      	tst	r6, r2
 80153f4:	d100      	bne.n	80153f8 <_svfprintf_r+0x12f0>
 80153f6:	e088      	b.n	801550a <_svfprintf_r+0x1402>
 80153f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153fa:	912e      	str	r1, [sp, #184]	; 0xb8
 80153fc:	603a      	str	r2, [r7, #0]
 80153fe:	2201      	movs	r2, #1
 8015400:	932d      	str	r3, [sp, #180]	; 0xb4
 8015402:	607a      	str	r2, [r7, #4]
 8015404:	2b07      	cmp	r3, #7
 8015406:	dd08      	ble.n	801541a <_svfprintf_r+0x1312>
 8015408:	aa2c      	add	r2, sp, #176	; 0xb0
 801540a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801540c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540e:	f001 ffcf 	bl	80173b0 <__ssprint_r>
 8015412:	2800      	cmp	r0, #0
 8015414:	d000      	beq.n	8015418 <_svfprintf_r+0x1310>
 8015416:	e09b      	b.n	8015550 <_svfprintf_r+0x1448>
 8015418:	ac2f      	add	r4, sp, #188	; 0xbc
 801541a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801541c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801541e:	4694      	mov	ip, r2
 8015420:	6023      	str	r3, [r4, #0]
 8015422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015424:	6063      	str	r3, [r4, #4]
 8015426:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015428:	3408      	adds	r4, #8
 801542a:	4463      	add	r3, ip
 801542c:	932e      	str	r3, [sp, #184]	; 0xb8
 801542e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015430:	9308      	str	r3, [sp, #32]
 8015432:	3301      	adds	r3, #1
 8015434:	932d      	str	r3, [sp, #180]	; 0xb4
 8015436:	2b07      	cmp	r3, #7
 8015438:	dd08      	ble.n	801544c <_svfprintf_r+0x1344>
 801543a:	aa2c      	add	r2, sp, #176	; 0xb0
 801543c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801543e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015440:	f001 ffb6 	bl	80173b0 <__ssprint_r>
 8015444:	2800      	cmp	r0, #0
 8015446:	d000      	beq.n	801544a <_svfprintf_r+0x1342>
 8015448:	e082      	b.n	8015550 <_svfprintf_r+0x1448>
 801544a:	ac2f      	add	r4, sp, #188	; 0xbc
 801544c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801544e:	2200      	movs	r2, #0
 8015450:	1e5d      	subs	r5, r3, #1
 8015452:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015454:	2300      	movs	r3, #0
 8015456:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015458:	f7eb f800 	bl	800045c <__aeabi_dcmpeq>
 801545c:	2800      	cmp	r0, #0
 801545e:	d12c      	bne.n	80154ba <_svfprintf_r+0x13b2>
 8015460:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015462:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015464:	9308      	str	r3, [sp, #32]
 8015466:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015468:	6065      	str	r5, [r4, #4]
 801546a:	1c5a      	adds	r2, r3, #1
 801546c:	930e      	str	r3, [sp, #56]	; 0x38
 801546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015470:	922d      	str	r2, [sp, #180]	; 0xb4
 8015472:	3301      	adds	r3, #1
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	9b08      	ldr	r3, [sp, #32]
 8015478:	3408      	adds	r4, #8
 801547a:	3b01      	subs	r3, #1
 801547c:	185b      	adds	r3, r3, r1
 801547e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015480:	2a07      	cmp	r2, #7
 8015482:	dd07      	ble.n	8015494 <_svfprintf_r+0x138c>
 8015484:	aa2c      	add	r2, sp, #176	; 0xb0
 8015486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015488:	980a      	ldr	r0, [sp, #40]	; 0x28
 801548a:	f001 ff91 	bl	80173b0 <__ssprint_r>
 801548e:	2800      	cmp	r0, #0
 8015490:	d15e      	bne.n	8015550 <_svfprintf_r+0x1448>
 8015492:	ac2f      	add	r4, sp, #188	; 0xbc
 8015494:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015496:	ab28      	add	r3, sp, #160	; 0xa0
 8015498:	4694      	mov	ip, r2
 801549a:	6023      	str	r3, [r4, #0]
 801549c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801549e:	6063      	str	r3, [r4, #4]
 80154a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154a2:	4463      	add	r3, ip
 80154a4:	932e      	str	r3, [sp, #184]	; 0xb8
 80154a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154a8:	9308      	str	r3, [sp, #32]
 80154aa:	3301      	adds	r3, #1
 80154ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ae:	2b07      	cmp	r3, #7
 80154b0:	dd00      	ble.n	80154b4 <_svfprintf_r+0x13ac>
 80154b2:	e629      	b.n	8015108 <_svfprintf_r+0x1000>
 80154b4:	3408      	adds	r4, #8
 80154b6:	0027      	movs	r7, r4
 80154b8:	e579      	b.n	8014fae <_svfprintf_r+0xea6>
 80154ba:	2710      	movs	r7, #16
 80154bc:	2d00      	cmp	r5, #0
 80154be:	dde9      	ble.n	8015494 <_svfprintf_r+0x138c>
 80154c0:	0021      	movs	r1, r4
 80154c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154c4:	4807      	ldr	r0, [pc, #28]	; (80154e4 <_svfprintf_r+0x13dc>)
 80154c6:	9308      	str	r3, [sp, #32]
 80154c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154ca:	3301      	adds	r3, #1
 80154cc:	3108      	adds	r1, #8
 80154ce:	6020      	str	r0, [r4, #0]
 80154d0:	2d10      	cmp	r5, #16
 80154d2:	dc09      	bgt.n	80154e8 <_svfprintf_r+0x13e0>
 80154d4:	6065      	str	r5, [r4, #4]
 80154d6:	000c      	movs	r4, r1
 80154d8:	18ad      	adds	r5, r5, r2
 80154da:	952e      	str	r5, [sp, #184]	; 0xb8
 80154dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80154de:	2b07      	cmp	r3, #7
 80154e0:	ddd8      	ble.n	8015494 <_svfprintf_r+0x138c>
 80154e2:	e7cf      	b.n	8015484 <_svfprintf_r+0x137c>
 80154e4:	0801a5ec 	.word	0x0801a5ec
 80154e8:	3210      	adds	r2, #16
 80154ea:	6067      	str	r7, [r4, #4]
 80154ec:	922e      	str	r2, [sp, #184]	; 0xb8
 80154ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80154f0:	2b07      	cmp	r3, #7
 80154f2:	dd07      	ble.n	8015504 <_svfprintf_r+0x13fc>
 80154f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80154f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154fa:	f001 ff59 	bl	80173b0 <__ssprint_r>
 80154fe:	2800      	cmp	r0, #0
 8015500:	d126      	bne.n	8015550 <_svfprintf_r+0x1448>
 8015502:	a92f      	add	r1, sp, #188	; 0xbc
 8015504:	3d10      	subs	r5, #16
 8015506:	000c      	movs	r4, r1
 8015508:	e7da      	b.n	80154c0 <_svfprintf_r+0x13b8>
 801550a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801550c:	912e      	str	r1, [sp, #184]	; 0xb8
 801550e:	c705      	stmia	r7!, {r0, r2}
 8015510:	932d      	str	r3, [sp, #180]	; 0xb4
 8015512:	e7e4      	b.n	80154de <_svfprintf_r+0x13d6>
 8015514:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015516:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015518:	2510      	movs	r5, #16
 801551a:	1a9c      	subs	r4, r3, r2
 801551c:	2c00      	cmp	r4, #0
 801551e:	dc00      	bgt.n	8015522 <_svfprintf_r+0x141a>
 8015520:	e548      	b.n	8014fb4 <_svfprintf_r+0xeac>
 8015522:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015524:	4921      	ldr	r1, [pc, #132]	; (80155ac <_svfprintf_r+0x14a4>)
 8015526:	9308      	str	r3, [sp, #32]
 8015528:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801552a:	3301      	adds	r3, #1
 801552c:	6039      	str	r1, [r7, #0]
 801552e:	2c10      	cmp	r4, #16
 8015530:	dc19      	bgt.n	8015566 <_svfprintf_r+0x145e>
 8015532:	607c      	str	r4, [r7, #4]
 8015534:	18a4      	adds	r4, r4, r2
 8015536:	942e      	str	r4, [sp, #184]	; 0xb8
 8015538:	932d      	str	r3, [sp, #180]	; 0xb4
 801553a:	2b07      	cmp	r3, #7
 801553c:	dc00      	bgt.n	8015540 <_svfprintf_r+0x1438>
 801553e:	e539      	b.n	8014fb4 <_svfprintf_r+0xeac>
 8015540:	aa2c      	add	r2, sp, #176	; 0xb0
 8015542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015544:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015546:	f001 ff33 	bl	80173b0 <__ssprint_r>
 801554a:	2800      	cmp	r0, #0
 801554c:	d100      	bne.n	8015550 <_svfprintf_r+0x1448>
 801554e:	e531      	b.n	8014fb4 <_svfprintf_r+0xeac>
 8015550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015552:	2b00      	cmp	r3, #0
 8015554:	d101      	bne.n	801555a <_svfprintf_r+0x1452>
 8015556:	f7ff f908 	bl	801476a <_svfprintf_r+0x662>
 801555a:	0019      	movs	r1, r3
 801555c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801555e:	f000 ff19 	bl	8016394 <_free_r>
 8015562:	f7ff f902 	bl	801476a <_svfprintf_r+0x662>
 8015566:	3210      	adds	r2, #16
 8015568:	607d      	str	r5, [r7, #4]
 801556a:	922e      	str	r2, [sp, #184]	; 0xb8
 801556c:	932d      	str	r3, [sp, #180]	; 0xb4
 801556e:	3708      	adds	r7, #8
 8015570:	2b07      	cmp	r3, #7
 8015572:	dd07      	ble.n	8015584 <_svfprintf_r+0x147c>
 8015574:	aa2c      	add	r2, sp, #176	; 0xb0
 8015576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015578:	980a      	ldr	r0, [sp, #40]	; 0x28
 801557a:	f001 ff19 	bl	80173b0 <__ssprint_r>
 801557e:	2800      	cmp	r0, #0
 8015580:	d1e6      	bne.n	8015550 <_svfprintf_r+0x1448>
 8015582:	af2f      	add	r7, sp, #188	; 0xbc
 8015584:	3c10      	subs	r4, #16
 8015586:	e7cc      	b.n	8015522 <_svfprintf_r+0x141a>
 8015588:	990c      	ldr	r1, [sp, #48]	; 0x30
 801558a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801558c:	f000 ff02 	bl	8016394 <_free_r>
 8015590:	e52a      	b.n	8014fe8 <_svfprintf_r+0xee0>
 8015592:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015594:	9306      	str	r3, [sp, #24]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d101      	bne.n	801559e <_svfprintf_r+0x1496>
 801559a:	f7ff f8e6 	bl	801476a <_svfprintf_r+0x662>
 801559e:	aa2c      	add	r2, sp, #176	; 0xb0
 80155a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155a4:	f001 ff04 	bl	80173b0 <__ssprint_r>
 80155a8:	f7ff f8df 	bl	801476a <_svfprintf_r+0x662>
 80155ac:	0801a5dc 	.word	0x0801a5dc

080155b0 <sysconf>:
 80155b0:	2380      	movs	r3, #128	; 0x80
 80155b2:	b510      	push	{r4, lr}
 80155b4:	015b      	lsls	r3, r3, #5
 80155b6:	2808      	cmp	r0, #8
 80155b8:	d004      	beq.n	80155c4 <sysconf+0x14>
 80155ba:	f000 fe7d 	bl	80162b8 <__errno>
 80155be:	2316      	movs	r3, #22
 80155c0:	6003      	str	r3, [r0, #0]
 80155c2:	3b17      	subs	r3, #23
 80155c4:	0018      	movs	r0, r3
 80155c6:	bd10      	pop	{r4, pc}

080155c8 <__ascii_wctomb>:
 80155c8:	1e0b      	subs	r3, r1, #0
 80155ca:	d004      	beq.n	80155d6 <__ascii_wctomb+0xe>
 80155cc:	2aff      	cmp	r2, #255	; 0xff
 80155ce:	d904      	bls.n	80155da <__ascii_wctomb+0x12>
 80155d0:	238a      	movs	r3, #138	; 0x8a
 80155d2:	6003      	str	r3, [r0, #0]
 80155d4:	3b8b      	subs	r3, #139	; 0x8b
 80155d6:	0018      	movs	r0, r3
 80155d8:	4770      	bx	lr
 80155da:	700a      	strb	r2, [r1, #0]
 80155dc:	2301      	movs	r3, #1
 80155de:	e7fa      	b.n	80155d6 <__ascii_wctomb+0xe>

080155e0 <register_fini>:
 80155e0:	4b03      	ldr	r3, [pc, #12]	; (80155f0 <register_fini+0x10>)
 80155e2:	b510      	push	{r4, lr}
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d002      	beq.n	80155ee <register_fini+0xe>
 80155e8:	4802      	ldr	r0, [pc, #8]	; (80155f4 <register_fini+0x14>)
 80155ea:	f000 f805 	bl	80155f8 <atexit>
 80155ee:	bd10      	pop	{r4, pc}
 80155f0:	00000000 	.word	0x00000000
 80155f4:	080162c5 	.word	0x080162c5

080155f8 <atexit>:
 80155f8:	2300      	movs	r3, #0
 80155fa:	b510      	push	{r4, lr}
 80155fc:	0001      	movs	r1, r0
 80155fe:	001a      	movs	r2, r3
 8015600:	0018      	movs	r0, r3
 8015602:	f001 ff53 	bl	80174ac <__register_exitproc>
 8015606:	bd10      	pop	{r4, pc}

08015608 <quorem>:
 8015608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560a:	6903      	ldr	r3, [r0, #16]
 801560c:	690c      	ldr	r4, [r1, #16]
 801560e:	b089      	sub	sp, #36	; 0x24
 8015610:	0007      	movs	r7, r0
 8015612:	9105      	str	r1, [sp, #20]
 8015614:	2600      	movs	r6, #0
 8015616:	42a3      	cmp	r3, r4
 8015618:	db65      	blt.n	80156e6 <quorem+0xde>
 801561a:	000b      	movs	r3, r1
 801561c:	3c01      	subs	r4, #1
 801561e:	3314      	adds	r3, #20
 8015620:	00a5      	lsls	r5, r4, #2
 8015622:	9303      	str	r3, [sp, #12]
 8015624:	195b      	adds	r3, r3, r5
 8015626:	9304      	str	r3, [sp, #16]
 8015628:	0003      	movs	r3, r0
 801562a:	3314      	adds	r3, #20
 801562c:	9302      	str	r3, [sp, #8]
 801562e:	195d      	adds	r5, r3, r5
 8015630:	9b04      	ldr	r3, [sp, #16]
 8015632:	6828      	ldr	r0, [r5, #0]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	1c59      	adds	r1, r3, #1
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	f7ea fd89 	bl	8000150 <__udivsi3>
 801563e:	9001      	str	r0, [sp, #4]
 8015640:	42b0      	cmp	r0, r6
 8015642:	d029      	beq.n	8015698 <quorem+0x90>
 8015644:	9b03      	ldr	r3, [sp, #12]
 8015646:	9802      	ldr	r0, [sp, #8]
 8015648:	469c      	mov	ip, r3
 801564a:	9606      	str	r6, [sp, #24]
 801564c:	4662      	mov	r2, ip
 801564e:	ca08      	ldmia	r2!, {r3}
 8015650:	4694      	mov	ip, r2
 8015652:	9a01      	ldr	r2, [sp, #4]
 8015654:	b299      	uxth	r1, r3
 8015656:	4351      	muls	r1, r2
 8015658:	0c1b      	lsrs	r3, r3, #16
 801565a:	4353      	muls	r3, r2
 801565c:	1989      	adds	r1, r1, r6
 801565e:	0c0a      	lsrs	r2, r1, #16
 8015660:	189b      	adds	r3, r3, r2
 8015662:	9307      	str	r3, [sp, #28]
 8015664:	0c1e      	lsrs	r6, r3, #16
 8015666:	6803      	ldr	r3, [r0, #0]
 8015668:	b289      	uxth	r1, r1
 801566a:	b29a      	uxth	r2, r3
 801566c:	9b06      	ldr	r3, [sp, #24]
 801566e:	18d2      	adds	r2, r2, r3
 8015670:	6803      	ldr	r3, [r0, #0]
 8015672:	1a52      	subs	r2, r2, r1
 8015674:	0c19      	lsrs	r1, r3, #16
 8015676:	466b      	mov	r3, sp
 8015678:	8b9b      	ldrh	r3, [r3, #28]
 801567a:	1acb      	subs	r3, r1, r3
 801567c:	1411      	asrs	r1, r2, #16
 801567e:	185b      	adds	r3, r3, r1
 8015680:	1419      	asrs	r1, r3, #16
 8015682:	b292      	uxth	r2, r2
 8015684:	041b      	lsls	r3, r3, #16
 8015686:	431a      	orrs	r2, r3
 8015688:	9b04      	ldr	r3, [sp, #16]
 801568a:	9106      	str	r1, [sp, #24]
 801568c:	c004      	stmia	r0!, {r2}
 801568e:	4563      	cmp	r3, ip
 8015690:	d2dc      	bcs.n	801564c <quorem+0x44>
 8015692:	682b      	ldr	r3, [r5, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d02d      	beq.n	80156f4 <quorem+0xec>
 8015698:	9905      	ldr	r1, [sp, #20]
 801569a:	0038      	movs	r0, r7
 801569c:	f001 fcb2 	bl	8017004 <__mcmp>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	db1f      	blt.n	80156e4 <quorem+0xdc>
 80156a4:	2500      	movs	r5, #0
 80156a6:	9b01      	ldr	r3, [sp, #4]
 80156a8:	9802      	ldr	r0, [sp, #8]
 80156aa:	3301      	adds	r3, #1
 80156ac:	9903      	ldr	r1, [sp, #12]
 80156ae:	9301      	str	r3, [sp, #4]
 80156b0:	6802      	ldr	r2, [r0, #0]
 80156b2:	c908      	ldmia	r1!, {r3}
 80156b4:	b292      	uxth	r2, r2
 80156b6:	1955      	adds	r5, r2, r5
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	1aaa      	subs	r2, r5, r2
 80156bc:	6805      	ldr	r5, [r0, #0]
 80156be:	0c1b      	lsrs	r3, r3, #16
 80156c0:	0c2d      	lsrs	r5, r5, #16
 80156c2:	1aeb      	subs	r3, r5, r3
 80156c4:	1415      	asrs	r5, r2, #16
 80156c6:	195b      	adds	r3, r3, r5
 80156c8:	141d      	asrs	r5, r3, #16
 80156ca:	b292      	uxth	r2, r2
 80156cc:	041b      	lsls	r3, r3, #16
 80156ce:	4313      	orrs	r3, r2
 80156d0:	c008      	stmia	r0!, {r3}
 80156d2:	9b04      	ldr	r3, [sp, #16]
 80156d4:	428b      	cmp	r3, r1
 80156d6:	d2eb      	bcs.n	80156b0 <quorem+0xa8>
 80156d8:	9a02      	ldr	r2, [sp, #8]
 80156da:	00a3      	lsls	r3, r4, #2
 80156dc:	18d3      	adds	r3, r2, r3
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	2a00      	cmp	r2, #0
 80156e2:	d011      	beq.n	8015708 <quorem+0x100>
 80156e4:	9e01      	ldr	r6, [sp, #4]
 80156e6:	0030      	movs	r0, r6
 80156e8:	b009      	add	sp, #36	; 0x24
 80156ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ec:	682b      	ldr	r3, [r5, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d104      	bne.n	80156fc <quorem+0xf4>
 80156f2:	3c01      	subs	r4, #1
 80156f4:	9b02      	ldr	r3, [sp, #8]
 80156f6:	3d04      	subs	r5, #4
 80156f8:	42ab      	cmp	r3, r5
 80156fa:	d3f7      	bcc.n	80156ec <quorem+0xe4>
 80156fc:	613c      	str	r4, [r7, #16]
 80156fe:	e7cb      	b.n	8015698 <quorem+0x90>
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	2a00      	cmp	r2, #0
 8015704:	d104      	bne.n	8015710 <quorem+0x108>
 8015706:	3c01      	subs	r4, #1
 8015708:	9a02      	ldr	r2, [sp, #8]
 801570a:	3b04      	subs	r3, #4
 801570c:	429a      	cmp	r2, r3
 801570e:	d3f7      	bcc.n	8015700 <quorem+0xf8>
 8015710:	613c      	str	r4, [r7, #16]
 8015712:	e7e7      	b.n	80156e4 <quorem+0xdc>

08015714 <_dtoa_r>:
 8015714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015716:	0014      	movs	r4, r2
 8015718:	001d      	movs	r5, r3
 801571a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801571c:	b09b      	sub	sp, #108	; 0x6c
 801571e:	9002      	str	r0, [sp, #8]
 8015720:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8015722:	9406      	str	r4, [sp, #24]
 8015724:	9507      	str	r5, [sp, #28]
 8015726:	2900      	cmp	r1, #0
 8015728:	d009      	beq.n	801573e <_dtoa_r+0x2a>
 801572a:	2301      	movs	r3, #1
 801572c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801572e:	4093      	lsls	r3, r2
 8015730:	604a      	str	r2, [r1, #4]
 8015732:	608b      	str	r3, [r1, #8]
 8015734:	f001 fa6a 	bl	8016c0c <_Bfree>
 8015738:	2300      	movs	r3, #0
 801573a:	9a02      	ldr	r2, [sp, #8]
 801573c:	6413      	str	r3, [r2, #64]	; 0x40
 801573e:	2d00      	cmp	r5, #0
 8015740:	da20      	bge.n	8015784 <_dtoa_r+0x70>
 8015742:	2301      	movs	r3, #1
 8015744:	6033      	str	r3, [r6, #0]
 8015746:	006b      	lsls	r3, r5, #1
 8015748:	085b      	lsrs	r3, r3, #1
 801574a:	9307      	str	r3, [sp, #28]
 801574c:	9c07      	ldr	r4, [sp, #28]
 801574e:	4bb2      	ldr	r3, [pc, #712]	; (8015a18 <_dtoa_r+0x304>)
 8015750:	0022      	movs	r2, r4
 8015752:	9317      	str	r3, [sp, #92]	; 0x5c
 8015754:	401a      	ands	r2, r3
 8015756:	429a      	cmp	r2, r3
 8015758:	d117      	bne.n	801578a <_dtoa_r+0x76>
 801575a:	4bb0      	ldr	r3, [pc, #704]	; (8015a1c <_dtoa_r+0x308>)
 801575c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	9b06      	ldr	r3, [sp, #24]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d103      	bne.n	801576e <_dtoa_r+0x5a>
 8015766:	0324      	lsls	r4, r4, #12
 8015768:	d101      	bne.n	801576e <_dtoa_r+0x5a>
 801576a:	f000 fd89 	bl	8016280 <_dtoa_r+0xb6c>
 801576e:	4bac      	ldr	r3, [pc, #688]	; (8015a20 <_dtoa_r+0x30c>)
 8015770:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015772:	9308      	str	r3, [sp, #32]
 8015774:	2a00      	cmp	r2, #0
 8015776:	d002      	beq.n	801577e <_dtoa_r+0x6a>
 8015778:	4baa      	ldr	r3, [pc, #680]	; (8015a24 <_dtoa_r+0x310>)
 801577a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801577c:	6013      	str	r3, [r2, #0]
 801577e:	9808      	ldr	r0, [sp, #32]
 8015780:	b01b      	add	sp, #108	; 0x6c
 8015782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015784:	2300      	movs	r3, #0
 8015786:	6033      	str	r3, [r6, #0]
 8015788:	e7e0      	b.n	801574c <_dtoa_r+0x38>
 801578a:	9e06      	ldr	r6, [sp, #24]
 801578c:	9f07      	ldr	r7, [sp, #28]
 801578e:	2200      	movs	r2, #0
 8015790:	2300      	movs	r3, #0
 8015792:	0030      	movs	r0, r6
 8015794:	0039      	movs	r1, r7
 8015796:	f7ea fe61 	bl	800045c <__aeabi_dcmpeq>
 801579a:	1e05      	subs	r5, r0, #0
 801579c:	d00b      	beq.n	80157b6 <_dtoa_r+0xa2>
 801579e:	2301      	movs	r3, #1
 80157a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80157a2:	6013      	str	r3, [r2, #0]
 80157a4:	4ba0      	ldr	r3, [pc, #640]	; (8015a28 <_dtoa_r+0x314>)
 80157a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157a8:	9308      	str	r3, [sp, #32]
 80157aa:	2a00      	cmp	r2, #0
 80157ac:	d0e7      	beq.n	801577e <_dtoa_r+0x6a>
 80157ae:	4a9f      	ldr	r2, [pc, #636]	; (8015a2c <_dtoa_r+0x318>)
 80157b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80157b2:	600a      	str	r2, [r1, #0]
 80157b4:	e7e3      	b.n	801577e <_dtoa_r+0x6a>
 80157b6:	ab18      	add	r3, sp, #96	; 0x60
 80157b8:	9301      	str	r3, [sp, #4]
 80157ba:	ab19      	add	r3, sp, #100	; 0x64
 80157bc:	9300      	str	r3, [sp, #0]
 80157be:	0032      	movs	r2, r6
 80157c0:	003b      	movs	r3, r7
 80157c2:	9802      	ldr	r0, [sp, #8]
 80157c4:	f001 fd0e 	bl	80171e4 <__d2b>
 80157c8:	0063      	lsls	r3, r4, #1
 80157ca:	9003      	str	r0, [sp, #12]
 80157cc:	0d5b      	lsrs	r3, r3, #21
 80157ce:	d074      	beq.n	80158ba <_dtoa_r+0x1a6>
 80157d0:	033a      	lsls	r2, r7, #12
 80157d2:	4c97      	ldr	r4, [pc, #604]	; (8015a30 <_dtoa_r+0x31c>)
 80157d4:	0b12      	lsrs	r2, r2, #12
 80157d6:	4314      	orrs	r4, r2
 80157d8:	0021      	movs	r1, r4
 80157da:	4a96      	ldr	r2, [pc, #600]	; (8015a34 <_dtoa_r+0x320>)
 80157dc:	0030      	movs	r0, r6
 80157de:	9516      	str	r5, [sp, #88]	; 0x58
 80157e0:	189e      	adds	r6, r3, r2
 80157e2:	2200      	movs	r2, #0
 80157e4:	4b94      	ldr	r3, [pc, #592]	; (8015a38 <_dtoa_r+0x324>)
 80157e6:	f7ec fecd 	bl	8002584 <__aeabi_dsub>
 80157ea:	4a94      	ldr	r2, [pc, #592]	; (8015a3c <_dtoa_r+0x328>)
 80157ec:	4b94      	ldr	r3, [pc, #592]	; (8015a40 <_dtoa_r+0x32c>)
 80157ee:	f7ec fc57 	bl	80020a0 <__aeabi_dmul>
 80157f2:	4a94      	ldr	r2, [pc, #592]	; (8015a44 <_dtoa_r+0x330>)
 80157f4:	4b94      	ldr	r3, [pc, #592]	; (8015a48 <_dtoa_r+0x334>)
 80157f6:	f7eb fd2d 	bl	8001254 <__aeabi_dadd>
 80157fa:	0004      	movs	r4, r0
 80157fc:	0030      	movs	r0, r6
 80157fe:	000d      	movs	r5, r1
 8015800:	f7ed fa5a 	bl	8002cb8 <__aeabi_i2d>
 8015804:	4a91      	ldr	r2, [pc, #580]	; (8015a4c <_dtoa_r+0x338>)
 8015806:	4b92      	ldr	r3, [pc, #584]	; (8015a50 <_dtoa_r+0x33c>)
 8015808:	f7ec fc4a 	bl	80020a0 <__aeabi_dmul>
 801580c:	0002      	movs	r2, r0
 801580e:	000b      	movs	r3, r1
 8015810:	0020      	movs	r0, r4
 8015812:	0029      	movs	r1, r5
 8015814:	f7eb fd1e 	bl	8001254 <__aeabi_dadd>
 8015818:	0004      	movs	r4, r0
 801581a:	000d      	movs	r5, r1
 801581c:	f7ed fa16 	bl	8002c4c <__aeabi_d2iz>
 8015820:	2200      	movs	r2, #0
 8015822:	0007      	movs	r7, r0
 8015824:	2300      	movs	r3, #0
 8015826:	0020      	movs	r0, r4
 8015828:	0029      	movs	r1, r5
 801582a:	f7ea fe1d 	bl	8000468 <__aeabi_dcmplt>
 801582e:	2800      	cmp	r0, #0
 8015830:	d009      	beq.n	8015846 <_dtoa_r+0x132>
 8015832:	0038      	movs	r0, r7
 8015834:	f7ed fa40 	bl	8002cb8 <__aeabi_i2d>
 8015838:	002b      	movs	r3, r5
 801583a:	0022      	movs	r2, r4
 801583c:	f7ea fe0e 	bl	800045c <__aeabi_dcmpeq>
 8015840:	4243      	negs	r3, r0
 8015842:	4158      	adcs	r0, r3
 8015844:	1a3f      	subs	r7, r7, r0
 8015846:	2301      	movs	r3, #1
 8015848:	9314      	str	r3, [sp, #80]	; 0x50
 801584a:	2f16      	cmp	r7, #22
 801584c:	d80d      	bhi.n	801586a <_dtoa_r+0x156>
 801584e:	4981      	ldr	r1, [pc, #516]	; (8015a54 <_dtoa_r+0x340>)
 8015850:	00fb      	lsls	r3, r7, #3
 8015852:	18c9      	adds	r1, r1, r3
 8015854:	6808      	ldr	r0, [r1, #0]
 8015856:	6849      	ldr	r1, [r1, #4]
 8015858:	9a06      	ldr	r2, [sp, #24]
 801585a:	9b07      	ldr	r3, [sp, #28]
 801585c:	f7ea fe18 	bl	8000490 <__aeabi_dcmpgt>
 8015860:	2800      	cmp	r0, #0
 8015862:	d046      	beq.n	80158f2 <_dtoa_r+0x1de>
 8015864:	2300      	movs	r3, #0
 8015866:	3f01      	subs	r7, #1
 8015868:	9314      	str	r3, [sp, #80]	; 0x50
 801586a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801586c:	1b9e      	subs	r6, r3, r6
 801586e:	2300      	movs	r3, #0
 8015870:	930a      	str	r3, [sp, #40]	; 0x28
 8015872:	0033      	movs	r3, r6
 8015874:	3b01      	subs	r3, #1
 8015876:	930b      	str	r3, [sp, #44]	; 0x2c
 8015878:	d504      	bpl.n	8015884 <_dtoa_r+0x170>
 801587a:	2301      	movs	r3, #1
 801587c:	1b9b      	subs	r3, r3, r6
 801587e:	930a      	str	r3, [sp, #40]	; 0x28
 8015880:	2300      	movs	r3, #0
 8015882:	930b      	str	r3, [sp, #44]	; 0x2c
 8015884:	2f00      	cmp	r7, #0
 8015886:	db36      	blt.n	80158f6 <_dtoa_r+0x1e2>
 8015888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801588a:	9711      	str	r7, [sp, #68]	; 0x44
 801588c:	19db      	adds	r3, r3, r7
 801588e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015890:	2300      	movs	r3, #0
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015896:	2401      	movs	r4, #1
 8015898:	2b09      	cmp	r3, #9
 801589a:	d900      	bls.n	801589e <_dtoa_r+0x18a>
 801589c:	e082      	b.n	80159a4 <_dtoa_r+0x290>
 801589e:	2b05      	cmp	r3, #5
 80158a0:	dd02      	ble.n	80158a8 <_dtoa_r+0x194>
 80158a2:	2400      	movs	r4, #0
 80158a4:	3b04      	subs	r3, #4
 80158a6:	9320      	str	r3, [sp, #128]	; 0x80
 80158a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80158aa:	1e98      	subs	r0, r3, #2
 80158ac:	2803      	cmp	r0, #3
 80158ae:	d900      	bls.n	80158b2 <_dtoa_r+0x19e>
 80158b0:	e082      	b.n	80159b8 <_dtoa_r+0x2a4>
 80158b2:	f7ea fc39 	bl	8000128 <__gnu_thumb1_case_uqi>
 80158b6:	7573      	.short	0x7573
 80158b8:	6828      	.short	0x6828
 80158ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80158bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80158be:	189e      	adds	r6, r3, r2
 80158c0:	4b65      	ldr	r3, [pc, #404]	; (8015a58 <_dtoa_r+0x344>)
 80158c2:	18f2      	adds	r2, r6, r3
 80158c4:	2a20      	cmp	r2, #32
 80158c6:	dd0f      	ble.n	80158e8 <_dtoa_r+0x1d4>
 80158c8:	2340      	movs	r3, #64	; 0x40
 80158ca:	1a9b      	subs	r3, r3, r2
 80158cc:	409c      	lsls	r4, r3
 80158ce:	4b63      	ldr	r3, [pc, #396]	; (8015a5c <_dtoa_r+0x348>)
 80158d0:	9806      	ldr	r0, [sp, #24]
 80158d2:	18f3      	adds	r3, r6, r3
 80158d4:	40d8      	lsrs	r0, r3
 80158d6:	4320      	orrs	r0, r4
 80158d8:	f7ed fa28 	bl	8002d2c <__aeabi_ui2d>
 80158dc:	2301      	movs	r3, #1
 80158de:	4c60      	ldr	r4, [pc, #384]	; (8015a60 <_dtoa_r+0x34c>)
 80158e0:	3e01      	subs	r6, #1
 80158e2:	1909      	adds	r1, r1, r4
 80158e4:	9316      	str	r3, [sp, #88]	; 0x58
 80158e6:	e77c      	b.n	80157e2 <_dtoa_r+0xce>
 80158e8:	2320      	movs	r3, #32
 80158ea:	9806      	ldr	r0, [sp, #24]
 80158ec:	1a9b      	subs	r3, r3, r2
 80158ee:	4098      	lsls	r0, r3
 80158f0:	e7f2      	b.n	80158d8 <_dtoa_r+0x1c4>
 80158f2:	9014      	str	r0, [sp, #80]	; 0x50
 80158f4:	e7b9      	b.n	801586a <_dtoa_r+0x156>
 80158f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158f8:	1bdb      	subs	r3, r3, r7
 80158fa:	930a      	str	r3, [sp, #40]	; 0x28
 80158fc:	427b      	negs	r3, r7
 80158fe:	9304      	str	r3, [sp, #16]
 8015900:	2300      	movs	r3, #0
 8015902:	9311      	str	r3, [sp, #68]	; 0x44
 8015904:	e7c6      	b.n	8015894 <_dtoa_r+0x180>
 8015906:	2301      	movs	r3, #1
 8015908:	930d      	str	r3, [sp, #52]	; 0x34
 801590a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801590c:	2b00      	cmp	r3, #0
 801590e:	dd57      	ble.n	80159c0 <_dtoa_r+0x2ac>
 8015910:	930c      	str	r3, [sp, #48]	; 0x30
 8015912:	9309      	str	r3, [sp, #36]	; 0x24
 8015914:	2200      	movs	r2, #0
 8015916:	9902      	ldr	r1, [sp, #8]
 8015918:	644a      	str	r2, [r1, #68]	; 0x44
 801591a:	3204      	adds	r2, #4
 801591c:	0010      	movs	r0, r2
 801591e:	9902      	ldr	r1, [sp, #8]
 8015920:	3014      	adds	r0, #20
 8015922:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015924:	4298      	cmp	r0, r3
 8015926:	d950      	bls.n	80159ca <_dtoa_r+0x2b6>
 8015928:	9802      	ldr	r0, [sp, #8]
 801592a:	f001 f947 	bl	8016bbc <_Balloc>
 801592e:	9b02      	ldr	r3, [sp, #8]
 8015930:	9008      	str	r0, [sp, #32]
 8015932:	6418      	str	r0, [r3, #64]	; 0x40
 8015934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015936:	2b0e      	cmp	r3, #14
 8015938:	d900      	bls.n	801593c <_dtoa_r+0x228>
 801593a:	e10c      	b.n	8015b56 <_dtoa_r+0x442>
 801593c:	2c00      	cmp	r4, #0
 801593e:	d100      	bne.n	8015942 <_dtoa_r+0x22e>
 8015940:	e109      	b.n	8015b56 <_dtoa_r+0x442>
 8015942:	9b06      	ldr	r3, [sp, #24]
 8015944:	9c07      	ldr	r4, [sp, #28]
 8015946:	9312      	str	r3, [sp, #72]	; 0x48
 8015948:	9413      	str	r4, [sp, #76]	; 0x4c
 801594a:	2f00      	cmp	r7, #0
 801594c:	dc00      	bgt.n	8015950 <_dtoa_r+0x23c>
 801594e:	e08b      	b.n	8015a68 <_dtoa_r+0x354>
 8015950:	210f      	movs	r1, #15
 8015952:	003a      	movs	r2, r7
 8015954:	4b3f      	ldr	r3, [pc, #252]	; (8015a54 <_dtoa_r+0x340>)
 8015956:	400a      	ands	r2, r1
 8015958:	00d2      	lsls	r2, r2, #3
 801595a:	189b      	adds	r3, r3, r2
 801595c:	681d      	ldr	r5, [r3, #0]
 801595e:	685e      	ldr	r6, [r3, #4]
 8015960:	2302      	movs	r3, #2
 8015962:	113c      	asrs	r4, r7, #4
 8015964:	930e      	str	r3, [sp, #56]	; 0x38
 8015966:	06e3      	lsls	r3, r4, #27
 8015968:	d50b      	bpl.n	8015982 <_dtoa_r+0x26e>
 801596a:	4b3e      	ldr	r3, [pc, #248]	; (8015a64 <_dtoa_r+0x350>)
 801596c:	400c      	ands	r4, r1
 801596e:	6a1a      	ldr	r2, [r3, #32]
 8015970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015972:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015974:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015976:	f7eb ff89 	bl	800188c <__aeabi_ddiv>
 801597a:	2303      	movs	r3, #3
 801597c:	9006      	str	r0, [sp, #24]
 801597e:	9107      	str	r1, [sp, #28]
 8015980:	930e      	str	r3, [sp, #56]	; 0x38
 8015982:	2300      	movs	r3, #0
 8015984:	e03b      	b.n	80159fe <_dtoa_r+0x2ea>
 8015986:	2301      	movs	r3, #1
 8015988:	930d      	str	r3, [sp, #52]	; 0x34
 801598a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801598c:	18fb      	adds	r3, r7, r3
 801598e:	930c      	str	r3, [sp, #48]	; 0x30
 8015990:	3301      	adds	r3, #1
 8015992:	9309      	str	r3, [sp, #36]	; 0x24
 8015994:	2b00      	cmp	r3, #0
 8015996:	dcbd      	bgt.n	8015914 <_dtoa_r+0x200>
 8015998:	2301      	movs	r3, #1
 801599a:	e7bb      	b.n	8015914 <_dtoa_r+0x200>
 801599c:	2300      	movs	r3, #0
 801599e:	e7b3      	b.n	8015908 <_dtoa_r+0x1f4>
 80159a0:	2300      	movs	r3, #0
 80159a2:	e7f1      	b.n	8015988 <_dtoa_r+0x274>
 80159a4:	2300      	movs	r3, #0
 80159a6:	940d      	str	r4, [sp, #52]	; 0x34
 80159a8:	9320      	str	r3, [sp, #128]	; 0x80
 80159aa:	3b01      	subs	r3, #1
 80159ac:	2200      	movs	r2, #0
 80159ae:	930c      	str	r3, [sp, #48]	; 0x30
 80159b0:	9309      	str	r3, [sp, #36]	; 0x24
 80159b2:	3313      	adds	r3, #19
 80159b4:	9221      	str	r2, [sp, #132]	; 0x84
 80159b6:	e7ad      	b.n	8015914 <_dtoa_r+0x200>
 80159b8:	2301      	movs	r3, #1
 80159ba:	930d      	str	r3, [sp, #52]	; 0x34
 80159bc:	3b02      	subs	r3, #2
 80159be:	e7f5      	b.n	80159ac <_dtoa_r+0x298>
 80159c0:	2301      	movs	r3, #1
 80159c2:	930c      	str	r3, [sp, #48]	; 0x30
 80159c4:	9309      	str	r3, [sp, #36]	; 0x24
 80159c6:	001a      	movs	r2, r3
 80159c8:	e7f4      	b.n	80159b4 <_dtoa_r+0x2a0>
 80159ca:	9802      	ldr	r0, [sp, #8]
 80159cc:	3101      	adds	r1, #1
 80159ce:	6441      	str	r1, [r0, #68]	; 0x44
 80159d0:	0052      	lsls	r2, r2, #1
 80159d2:	e7a3      	b.n	801591c <_dtoa_r+0x208>
 80159d4:	2301      	movs	r3, #1
 80159d6:	421c      	tst	r4, r3
 80159d8:	d00e      	beq.n	80159f8 <_dtoa_r+0x2e4>
 80159da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159dc:	4a21      	ldr	r2, [pc, #132]	; (8015a64 <_dtoa_r+0x350>)
 80159de:	3301      	adds	r3, #1
 80159e0:	930e      	str	r3, [sp, #56]	; 0x38
 80159e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159e4:	0028      	movs	r0, r5
 80159e6:	00db      	lsls	r3, r3, #3
 80159e8:	189b      	adds	r3, r3, r2
 80159ea:	0031      	movs	r1, r6
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	f7ec fb56 	bl	80020a0 <__aeabi_dmul>
 80159f4:	0005      	movs	r5, r0
 80159f6:	000e      	movs	r6, r1
 80159f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159fa:	1064      	asrs	r4, r4, #1
 80159fc:	3301      	adds	r3, #1
 80159fe:	9310      	str	r3, [sp, #64]	; 0x40
 8015a00:	2c00      	cmp	r4, #0
 8015a02:	d1e7      	bne.n	80159d4 <_dtoa_r+0x2c0>
 8015a04:	9806      	ldr	r0, [sp, #24]
 8015a06:	9907      	ldr	r1, [sp, #28]
 8015a08:	002a      	movs	r2, r5
 8015a0a:	0033      	movs	r3, r6
 8015a0c:	f7eb ff3e 	bl	800188c <__aeabi_ddiv>
 8015a10:	9006      	str	r0, [sp, #24]
 8015a12:	9107      	str	r1, [sp, #28]
 8015a14:	e043      	b.n	8015a9e <_dtoa_r+0x38a>
 8015a16:	46c0      	nop			; (mov r8, r8)
 8015a18:	7ff00000 	.word	0x7ff00000
 8015a1c:	0000270f 	.word	0x0000270f
 8015a20:	0801a706 	.word	0x0801a706
 8015a24:	0801a709 	.word	0x0801a709
 8015a28:	0801a5da 	.word	0x0801a5da
 8015a2c:	0801a5db 	.word	0x0801a5db
 8015a30:	3ff00000 	.word	0x3ff00000
 8015a34:	fffffc01 	.word	0xfffffc01
 8015a38:	3ff80000 	.word	0x3ff80000
 8015a3c:	636f4361 	.word	0x636f4361
 8015a40:	3fd287a7 	.word	0x3fd287a7
 8015a44:	8b60c8b3 	.word	0x8b60c8b3
 8015a48:	3fc68a28 	.word	0x3fc68a28
 8015a4c:	509f79fb 	.word	0x509f79fb
 8015a50:	3fd34413 	.word	0x3fd34413
 8015a54:	0801a738 	.word	0x0801a738
 8015a58:	00000432 	.word	0x00000432
 8015a5c:	00000412 	.word	0x00000412
 8015a60:	fe100000 	.word	0xfe100000
 8015a64:	0801a710 	.word	0x0801a710
 8015a68:	2302      	movs	r3, #2
 8015a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8015a6c:	2f00      	cmp	r7, #0
 8015a6e:	d016      	beq.n	8015a9e <_dtoa_r+0x38a>
 8015a70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015a72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015a74:	427c      	negs	r4, r7
 8015a76:	330d      	adds	r3, #13
 8015a78:	4023      	ands	r3, r4
 8015a7a:	4acf      	ldr	r2, [pc, #828]	; (8015db8 <_dtoa_r+0x6a4>)
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	18d3      	adds	r3, r2, r3
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	f7ec fb0c 	bl	80020a0 <__aeabi_dmul>
 8015a88:	2300      	movs	r3, #0
 8015a8a:	2601      	movs	r6, #1
 8015a8c:	001d      	movs	r5, r3
 8015a8e:	9006      	str	r0, [sp, #24]
 8015a90:	9107      	str	r1, [sp, #28]
 8015a92:	1124      	asrs	r4, r4, #4
 8015a94:	2c00      	cmp	r4, #0
 8015a96:	d000      	beq.n	8015a9a <_dtoa_r+0x386>
 8015a98:	e08c      	b.n	8015bb4 <_dtoa_r+0x4a0>
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d1b8      	bne.n	8015a10 <_dtoa_r+0x2fc>
 8015a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d100      	bne.n	8015aa6 <_dtoa_r+0x392>
 8015aa4:	e096      	b.n	8015bd4 <_dtoa_r+0x4c0>
 8015aa6:	9c06      	ldr	r4, [sp, #24]
 8015aa8:	9d07      	ldr	r5, [sp, #28]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	4bc3      	ldr	r3, [pc, #780]	; (8015dbc <_dtoa_r+0x6a8>)
 8015aae:	0020      	movs	r0, r4
 8015ab0:	0029      	movs	r1, r5
 8015ab2:	f7ea fcd9 	bl	8000468 <__aeabi_dcmplt>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d100      	bne.n	8015abc <_dtoa_r+0x3a8>
 8015aba:	e08b      	b.n	8015bd4 <_dtoa_r+0x4c0>
 8015abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d100      	bne.n	8015ac4 <_dtoa_r+0x3b0>
 8015ac2:	e087      	b.n	8015bd4 <_dtoa_r+0x4c0>
 8015ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	dd41      	ble.n	8015b4e <_dtoa_r+0x43a>
 8015aca:	4bbd      	ldr	r3, [pc, #756]	; (8015dc0 <_dtoa_r+0x6ac>)
 8015acc:	2200      	movs	r2, #0
 8015ace:	0020      	movs	r0, r4
 8015ad0:	0029      	movs	r1, r5
 8015ad2:	f7ec fae5 	bl	80020a0 <__aeabi_dmul>
 8015ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ad8:	9006      	str	r0, [sp, #24]
 8015ada:	9107      	str	r1, [sp, #28]
 8015adc:	3301      	adds	r3, #1
 8015ade:	930e      	str	r3, [sp, #56]	; 0x38
 8015ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ae2:	1e7e      	subs	r6, r7, #1
 8015ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ae6:	9310      	str	r3, [sp, #64]	; 0x40
 8015ae8:	f7ed f8e6 	bl	8002cb8 <__aeabi_i2d>
 8015aec:	9a06      	ldr	r2, [sp, #24]
 8015aee:	9b07      	ldr	r3, [sp, #28]
 8015af0:	f7ec fad6 	bl	80020a0 <__aeabi_dmul>
 8015af4:	2200      	movs	r2, #0
 8015af6:	4bb3      	ldr	r3, [pc, #716]	; (8015dc4 <_dtoa_r+0x6b0>)
 8015af8:	f7eb fbac 	bl	8001254 <__aeabi_dadd>
 8015afc:	4ab2      	ldr	r2, [pc, #712]	; (8015dc8 <_dtoa_r+0x6b4>)
 8015afe:	900e      	str	r0, [sp, #56]	; 0x38
 8015b00:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015b06:	4694      	mov	ip, r2
 8015b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b0a:	4463      	add	r3, ip
 8015b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8015b0e:	001d      	movs	r5, r3
 8015b10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d161      	bne.n	8015bda <_dtoa_r+0x4c6>
 8015b16:	9806      	ldr	r0, [sp, #24]
 8015b18:	9907      	ldr	r1, [sp, #28]
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	4bab      	ldr	r3, [pc, #684]	; (8015dcc <_dtoa_r+0x6b8>)
 8015b1e:	f7ec fd31 	bl	8002584 <__aeabi_dsub>
 8015b22:	0022      	movs	r2, r4
 8015b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b26:	9006      	str	r0, [sp, #24]
 8015b28:	9107      	str	r1, [sp, #28]
 8015b2a:	f7ea fcb1 	bl	8000490 <__aeabi_dcmpgt>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d000      	beq.n	8015b34 <_dtoa_r+0x420>
 8015b32:	e2aa      	b.n	801608a <_dtoa_r+0x976>
 8015b34:	48a6      	ldr	r0, [pc, #664]	; (8015dd0 <_dtoa_r+0x6bc>)
 8015b36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b38:	4684      	mov	ip, r0
 8015b3a:	4461      	add	r1, ip
 8015b3c:	000b      	movs	r3, r1
 8015b3e:	9806      	ldr	r0, [sp, #24]
 8015b40:	9907      	ldr	r1, [sp, #28]
 8015b42:	0022      	movs	r2, r4
 8015b44:	f7ea fc90 	bl	8000468 <__aeabi_dcmplt>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d000      	beq.n	8015b4e <_dtoa_r+0x43a>
 8015b4c:	e297      	b.n	801607e <_dtoa_r+0x96a>
 8015b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b52:	9306      	str	r3, [sp, #24]
 8015b54:	9407      	str	r4, [sp, #28]
 8015b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	da00      	bge.n	8015b5e <_dtoa_r+0x44a>
 8015b5c:	e15e      	b.n	8015e1c <_dtoa_r+0x708>
 8015b5e:	2f0e      	cmp	r7, #14
 8015b60:	dd00      	ble.n	8015b64 <_dtoa_r+0x450>
 8015b62:	e15b      	b.n	8015e1c <_dtoa_r+0x708>
 8015b64:	4b94      	ldr	r3, [pc, #592]	; (8015db8 <_dtoa_r+0x6a4>)
 8015b66:	00fa      	lsls	r2, r7, #3
 8015b68:	189b      	adds	r3, r3, r2
 8015b6a:	685c      	ldr	r4, [r3, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	9304      	str	r3, [sp, #16]
 8015b70:	9405      	str	r4, [sp, #20]
 8015b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	db00      	blt.n	8015b7a <_dtoa_r+0x466>
 8015b78:	e0da      	b.n	8015d30 <_dtoa_r+0x61c>
 8015b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dd00      	ble.n	8015b82 <_dtoa_r+0x46e>
 8015b80:	e0d6      	b.n	8015d30 <_dtoa_r+0x61c>
 8015b82:	d000      	beq.n	8015b86 <_dtoa_r+0x472>
 8015b84:	e27f      	b.n	8016086 <_dtoa_r+0x972>
 8015b86:	9804      	ldr	r0, [sp, #16]
 8015b88:	9905      	ldr	r1, [sp, #20]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	4b8f      	ldr	r3, [pc, #572]	; (8015dcc <_dtoa_r+0x6b8>)
 8015b8e:	f7ec fa87 	bl	80020a0 <__aeabi_dmul>
 8015b92:	9a06      	ldr	r2, [sp, #24]
 8015b94:	9b07      	ldr	r3, [sp, #28]
 8015b96:	f7ea fc85 	bl	80004a4 <__aeabi_dcmpge>
 8015b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b9c:	9304      	str	r3, [sp, #16]
 8015b9e:	001e      	movs	r6, r3
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d000      	beq.n	8015ba6 <_dtoa_r+0x492>
 8015ba4:	e251      	b.n	801604a <_dtoa_r+0x936>
 8015ba6:	9b08      	ldr	r3, [sp, #32]
 8015ba8:	9a08      	ldr	r2, [sp, #32]
 8015baa:	1c5d      	adds	r5, r3, #1
 8015bac:	2331      	movs	r3, #49	; 0x31
 8015bae:	3701      	adds	r7, #1
 8015bb0:	7013      	strb	r3, [r2, #0]
 8015bb2:	e24d      	b.n	8016050 <_dtoa_r+0x93c>
 8015bb4:	4234      	tst	r4, r6
 8015bb6:	d00a      	beq.n	8015bce <_dtoa_r+0x4ba>
 8015bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bba:	4a86      	ldr	r2, [pc, #536]	; (8015dd4 <_dtoa_r+0x6c0>)
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	930e      	str	r3, [sp, #56]	; 0x38
 8015bc0:	00eb      	lsls	r3, r5, #3
 8015bc2:	189b      	adds	r3, r3, r2
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	f7ec fa6a 	bl	80020a0 <__aeabi_dmul>
 8015bcc:	0033      	movs	r3, r6
 8015bce:	1064      	asrs	r4, r4, #1
 8015bd0:	3501      	adds	r5, #1
 8015bd2:	e75f      	b.n	8015a94 <_dtoa_r+0x380>
 8015bd4:	003e      	movs	r6, r7
 8015bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd8:	e784      	b.n	8015ae4 <_dtoa_r+0x3d0>
 8015bda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bdc:	1e5a      	subs	r2, r3, #1
 8015bde:	4b76      	ldr	r3, [pc, #472]	; (8015db8 <_dtoa_r+0x6a4>)
 8015be0:	00d2      	lsls	r2, r2, #3
 8015be2:	189b      	adds	r3, r3, r2
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	6859      	ldr	r1, [r3, #4]
 8015be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d04b      	beq.n	8015c86 <_dtoa_r+0x572>
 8015bee:	0002      	movs	r2, r0
 8015bf0:	000b      	movs	r3, r1
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	4978      	ldr	r1, [pc, #480]	; (8015dd8 <_dtoa_r+0x6c4>)
 8015bf6:	f7eb fe49 	bl	800188c <__aeabi_ddiv>
 8015bfa:	002b      	movs	r3, r5
 8015bfc:	0022      	movs	r2, r4
 8015bfe:	f7ec fcc1 	bl	8002584 <__aeabi_dsub>
 8015c02:	9b08      	ldr	r3, [sp, #32]
 8015c04:	900e      	str	r0, [sp, #56]	; 0x38
 8015c06:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c08:	9315      	str	r3, [sp, #84]	; 0x54
 8015c0a:	9806      	ldr	r0, [sp, #24]
 8015c0c:	9907      	ldr	r1, [sp, #28]
 8015c0e:	f7ed f81d 	bl	8002c4c <__aeabi_d2iz>
 8015c12:	0004      	movs	r4, r0
 8015c14:	f7ed f850 	bl	8002cb8 <__aeabi_i2d>
 8015c18:	0002      	movs	r2, r0
 8015c1a:	000b      	movs	r3, r1
 8015c1c:	9806      	ldr	r0, [sp, #24]
 8015c1e:	9907      	ldr	r1, [sp, #28]
 8015c20:	f7ec fcb0 	bl	8002584 <__aeabi_dsub>
 8015c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c26:	3430      	adds	r4, #48	; 0x30
 8015c28:	1c5d      	adds	r5, r3, #1
 8015c2a:	701c      	strb	r4, [r3, #0]
 8015c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c30:	9006      	str	r0, [sp, #24]
 8015c32:	9107      	str	r1, [sp, #28]
 8015c34:	f7ea fc18 	bl	8000468 <__aeabi_dcmplt>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d16c      	bne.n	8015d16 <_dtoa_r+0x602>
 8015c3c:	9a06      	ldr	r2, [sp, #24]
 8015c3e:	9b07      	ldr	r3, [sp, #28]
 8015c40:	2000      	movs	r0, #0
 8015c42:	495e      	ldr	r1, [pc, #376]	; (8015dbc <_dtoa_r+0x6a8>)
 8015c44:	f7ec fc9e 	bl	8002584 <__aeabi_dsub>
 8015c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c4c:	f7ea fc0c 	bl	8000468 <__aeabi_dcmplt>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d000      	beq.n	8015c56 <_dtoa_r+0x542>
 8015c54:	e0c3      	b.n	8015dde <_dtoa_r+0x6ca>
 8015c56:	9b08      	ldr	r3, [sp, #32]
 8015c58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c5a:	1aeb      	subs	r3, r5, r3
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	dc00      	bgt.n	8015c62 <_dtoa_r+0x54e>
 8015c60:	e775      	b.n	8015b4e <_dtoa_r+0x43a>
 8015c62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c66:	2200      	movs	r2, #0
 8015c68:	4b55      	ldr	r3, [pc, #340]	; (8015dc0 <_dtoa_r+0x6ac>)
 8015c6a:	f7ec fa19 	bl	80020a0 <__aeabi_dmul>
 8015c6e:	2200      	movs	r2, #0
 8015c70:	900e      	str	r0, [sp, #56]	; 0x38
 8015c72:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c74:	9806      	ldr	r0, [sp, #24]
 8015c76:	9907      	ldr	r1, [sp, #28]
 8015c78:	4b51      	ldr	r3, [pc, #324]	; (8015dc0 <_dtoa_r+0x6ac>)
 8015c7a:	f7ec fa11 	bl	80020a0 <__aeabi_dmul>
 8015c7e:	9515      	str	r5, [sp, #84]	; 0x54
 8015c80:	9006      	str	r0, [sp, #24]
 8015c82:	9107      	str	r1, [sp, #28]
 8015c84:	e7c1      	b.n	8015c0a <_dtoa_r+0x4f6>
 8015c86:	0022      	movs	r2, r4
 8015c88:	002b      	movs	r3, r5
 8015c8a:	f7ec fa09 	bl	80020a0 <__aeabi_dmul>
 8015c8e:	9c08      	ldr	r4, [sp, #32]
 8015c90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c92:	0023      	movs	r3, r4
 8015c94:	4694      	mov	ip, r2
 8015c96:	900e      	str	r0, [sp, #56]	; 0x38
 8015c98:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c9a:	4463      	add	r3, ip
 8015c9c:	9315      	str	r3, [sp, #84]	; 0x54
 8015c9e:	9806      	ldr	r0, [sp, #24]
 8015ca0:	9907      	ldr	r1, [sp, #28]
 8015ca2:	f7ec ffd3 	bl	8002c4c <__aeabi_d2iz>
 8015ca6:	0005      	movs	r5, r0
 8015ca8:	f7ed f806 	bl	8002cb8 <__aeabi_i2d>
 8015cac:	000b      	movs	r3, r1
 8015cae:	0002      	movs	r2, r0
 8015cb0:	9806      	ldr	r0, [sp, #24]
 8015cb2:	9907      	ldr	r1, [sp, #28]
 8015cb4:	f7ec fc66 	bl	8002584 <__aeabi_dsub>
 8015cb8:	3530      	adds	r5, #48	; 0x30
 8015cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cbc:	7025      	strb	r5, [r4, #0]
 8015cbe:	3401      	adds	r4, #1
 8015cc0:	9006      	str	r0, [sp, #24]
 8015cc2:	9107      	str	r1, [sp, #28]
 8015cc4:	42a3      	cmp	r3, r4
 8015cc6:	d12a      	bne.n	8015d1e <_dtoa_r+0x60a>
 8015cc8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015cca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ccc:	9a08      	ldr	r2, [sp, #32]
 8015cce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cd0:	4694      	mov	ip, r2
 8015cd2:	4463      	add	r3, ip
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	001d      	movs	r5, r3
 8015cd8:	4b3f      	ldr	r3, [pc, #252]	; (8015dd8 <_dtoa_r+0x6c4>)
 8015cda:	f7eb fabb 	bl	8001254 <__aeabi_dadd>
 8015cde:	0002      	movs	r2, r0
 8015ce0:	000b      	movs	r3, r1
 8015ce2:	9806      	ldr	r0, [sp, #24]
 8015ce4:	9907      	ldr	r1, [sp, #28]
 8015ce6:	f7ea fbd3 	bl	8000490 <__aeabi_dcmpgt>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d000      	beq.n	8015cf0 <_dtoa_r+0x5dc>
 8015cee:	e076      	b.n	8015dde <_dtoa_r+0x6ca>
 8015cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cf4:	2000      	movs	r0, #0
 8015cf6:	4938      	ldr	r1, [pc, #224]	; (8015dd8 <_dtoa_r+0x6c4>)
 8015cf8:	f7ec fc44 	bl	8002584 <__aeabi_dsub>
 8015cfc:	0002      	movs	r2, r0
 8015cfe:	000b      	movs	r3, r1
 8015d00:	9806      	ldr	r0, [sp, #24]
 8015d02:	9907      	ldr	r1, [sp, #28]
 8015d04:	f7ea fbb0 	bl	8000468 <__aeabi_dcmplt>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d100      	bne.n	8015d0e <_dtoa_r+0x5fa>
 8015d0c:	e71f      	b.n	8015b4e <_dtoa_r+0x43a>
 8015d0e:	1e6b      	subs	r3, r5, #1
 8015d10:	781a      	ldrb	r2, [r3, #0]
 8015d12:	2a30      	cmp	r2, #48	; 0x30
 8015d14:	d001      	beq.n	8015d1a <_dtoa_r+0x606>
 8015d16:	0037      	movs	r7, r6
 8015d18:	e03f      	b.n	8015d9a <_dtoa_r+0x686>
 8015d1a:	001d      	movs	r5, r3
 8015d1c:	e7f7      	b.n	8015d0e <_dtoa_r+0x5fa>
 8015d1e:	9806      	ldr	r0, [sp, #24]
 8015d20:	9907      	ldr	r1, [sp, #28]
 8015d22:	2200      	movs	r2, #0
 8015d24:	4b26      	ldr	r3, [pc, #152]	; (8015dc0 <_dtoa_r+0x6ac>)
 8015d26:	f7ec f9bb 	bl	80020a0 <__aeabi_dmul>
 8015d2a:	9006      	str	r0, [sp, #24]
 8015d2c:	9107      	str	r1, [sp, #28]
 8015d2e:	e7b6      	b.n	8015c9e <_dtoa_r+0x58a>
 8015d30:	9e08      	ldr	r6, [sp, #32]
 8015d32:	9a04      	ldr	r2, [sp, #16]
 8015d34:	9b05      	ldr	r3, [sp, #20]
 8015d36:	9806      	ldr	r0, [sp, #24]
 8015d38:	9907      	ldr	r1, [sp, #28]
 8015d3a:	f7eb fda7 	bl	800188c <__aeabi_ddiv>
 8015d3e:	f7ec ff85 	bl	8002c4c <__aeabi_d2iz>
 8015d42:	0004      	movs	r4, r0
 8015d44:	f7ec ffb8 	bl	8002cb8 <__aeabi_i2d>
 8015d48:	9a04      	ldr	r2, [sp, #16]
 8015d4a:	9b05      	ldr	r3, [sp, #20]
 8015d4c:	f7ec f9a8 	bl	80020a0 <__aeabi_dmul>
 8015d50:	0002      	movs	r2, r0
 8015d52:	000b      	movs	r3, r1
 8015d54:	9806      	ldr	r0, [sp, #24]
 8015d56:	9907      	ldr	r1, [sp, #28]
 8015d58:	f7ec fc14 	bl	8002584 <__aeabi_dsub>
 8015d5c:	0023      	movs	r3, r4
 8015d5e:	3330      	adds	r3, #48	; 0x30
 8015d60:	7033      	strb	r3, [r6, #0]
 8015d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d64:	9b08      	ldr	r3, [sp, #32]
 8015d66:	1c75      	adds	r5, r6, #1
 8015d68:	1aeb      	subs	r3, r5, r3
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d148      	bne.n	8015e00 <_dtoa_r+0x6ec>
 8015d6e:	0002      	movs	r2, r0
 8015d70:	000b      	movs	r3, r1
 8015d72:	f7eb fa6f 	bl	8001254 <__aeabi_dadd>
 8015d76:	9a04      	ldr	r2, [sp, #16]
 8015d78:	9b05      	ldr	r3, [sp, #20]
 8015d7a:	9006      	str	r0, [sp, #24]
 8015d7c:	9107      	str	r1, [sp, #28]
 8015d7e:	f7ea fb87 	bl	8000490 <__aeabi_dcmpgt>
 8015d82:	2800      	cmp	r0, #0
 8015d84:	d12a      	bne.n	8015ddc <_dtoa_r+0x6c8>
 8015d86:	9a04      	ldr	r2, [sp, #16]
 8015d88:	9b05      	ldr	r3, [sp, #20]
 8015d8a:	9806      	ldr	r0, [sp, #24]
 8015d8c:	9907      	ldr	r1, [sp, #28]
 8015d8e:	f7ea fb65 	bl	800045c <__aeabi_dcmpeq>
 8015d92:	2800      	cmp	r0, #0
 8015d94:	d001      	beq.n	8015d9a <_dtoa_r+0x686>
 8015d96:	07e3      	lsls	r3, r4, #31
 8015d98:	d420      	bmi.n	8015ddc <_dtoa_r+0x6c8>
 8015d9a:	9903      	ldr	r1, [sp, #12]
 8015d9c:	9802      	ldr	r0, [sp, #8]
 8015d9e:	f000 ff35 	bl	8016c0c <_Bfree>
 8015da2:	2300      	movs	r3, #0
 8015da4:	702b      	strb	r3, [r5, #0]
 8015da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015da8:	3701      	adds	r7, #1
 8015daa:	601f      	str	r7, [r3, #0]
 8015dac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d100      	bne.n	8015db4 <_dtoa_r+0x6a0>
 8015db2:	e4e4      	b.n	801577e <_dtoa_r+0x6a>
 8015db4:	601d      	str	r5, [r3, #0]
 8015db6:	e4e2      	b.n	801577e <_dtoa_r+0x6a>
 8015db8:	0801a738 	.word	0x0801a738
 8015dbc:	3ff00000 	.word	0x3ff00000
 8015dc0:	40240000 	.word	0x40240000
 8015dc4:	401c0000 	.word	0x401c0000
 8015dc8:	fcc00000 	.word	0xfcc00000
 8015dcc:	40140000 	.word	0x40140000
 8015dd0:	7cc00000 	.word	0x7cc00000
 8015dd4:	0801a710 	.word	0x0801a710
 8015dd8:	3fe00000 	.word	0x3fe00000
 8015ddc:	003e      	movs	r6, r7
 8015dde:	1e6b      	subs	r3, r5, #1
 8015de0:	781a      	ldrb	r2, [r3, #0]
 8015de2:	2a39      	cmp	r2, #57	; 0x39
 8015de4:	d106      	bne.n	8015df4 <_dtoa_r+0x6e0>
 8015de6:	9a08      	ldr	r2, [sp, #32]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d107      	bne.n	8015dfc <_dtoa_r+0x6e8>
 8015dec:	2330      	movs	r3, #48	; 0x30
 8015dee:	7013      	strb	r3, [r2, #0]
 8015df0:	0013      	movs	r3, r2
 8015df2:	3601      	adds	r6, #1
 8015df4:	781a      	ldrb	r2, [r3, #0]
 8015df6:	3201      	adds	r2, #1
 8015df8:	701a      	strb	r2, [r3, #0]
 8015dfa:	e78c      	b.n	8015d16 <_dtoa_r+0x602>
 8015dfc:	001d      	movs	r5, r3
 8015dfe:	e7ee      	b.n	8015dde <_dtoa_r+0x6ca>
 8015e00:	2200      	movs	r2, #0
 8015e02:	4ba4      	ldr	r3, [pc, #656]	; (8016094 <_dtoa_r+0x980>)
 8015e04:	f7ec f94c 	bl	80020a0 <__aeabi_dmul>
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	9006      	str	r0, [sp, #24]
 8015e0e:	9107      	str	r1, [sp, #28]
 8015e10:	002e      	movs	r6, r5
 8015e12:	f7ea fb23 	bl	800045c <__aeabi_dcmpeq>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	d08b      	beq.n	8015d32 <_dtoa_r+0x61e>
 8015e1a:	e7be      	b.n	8015d9a <_dtoa_r+0x686>
 8015e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e1e:	2a00      	cmp	r2, #0
 8015e20:	d100      	bne.n	8015e24 <_dtoa_r+0x710>
 8015e22:	e0da      	b.n	8015fda <_dtoa_r+0x8c6>
 8015e24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e26:	2a01      	cmp	r2, #1
 8015e28:	dd00      	ble.n	8015e2c <_dtoa_r+0x718>
 8015e2a:	e0bd      	b.n	8015fa8 <_dtoa_r+0x894>
 8015e2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e2e:	2a00      	cmp	r2, #0
 8015e30:	d100      	bne.n	8015e34 <_dtoa_r+0x720>
 8015e32:	e0b5      	b.n	8015fa0 <_dtoa_r+0x88c>
 8015e34:	4a98      	ldr	r2, [pc, #608]	; (8016098 <_dtoa_r+0x984>)
 8015e36:	189b      	adds	r3, r3, r2
 8015e38:	9d04      	ldr	r5, [sp, #16]
 8015e3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e3e:	2101      	movs	r1, #1
 8015e40:	18d2      	adds	r2, r2, r3
 8015e42:	920a      	str	r2, [sp, #40]	; 0x28
 8015e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e46:	9802      	ldr	r0, [sp, #8]
 8015e48:	18d3      	adds	r3, r2, r3
 8015e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e4c:	f000 ffad 	bl	8016daa <__i2b>
 8015e50:	0006      	movs	r6, r0
 8015e52:	2c00      	cmp	r4, #0
 8015e54:	dd0e      	ble.n	8015e74 <_dtoa_r+0x760>
 8015e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	dd0b      	ble.n	8015e74 <_dtoa_r+0x760>
 8015e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e5e:	0023      	movs	r3, r4
 8015e60:	4294      	cmp	r4, r2
 8015e62:	dd00      	ble.n	8015e66 <_dtoa_r+0x752>
 8015e64:	0013      	movs	r3, r2
 8015e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e68:	1ae4      	subs	r4, r4, r3
 8015e6a:	1ad2      	subs	r2, r2, r3
 8015e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8015e6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e70:	1ad3      	subs	r3, r2, r3
 8015e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e74:	9b04      	ldr	r3, [sp, #16]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d01f      	beq.n	8015eba <_dtoa_r+0x7a6>
 8015e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d100      	bne.n	8015e82 <_dtoa_r+0x76e>
 8015e80:	e0af      	b.n	8015fe2 <_dtoa_r+0x8ce>
 8015e82:	2d00      	cmp	r5, #0
 8015e84:	d011      	beq.n	8015eaa <_dtoa_r+0x796>
 8015e86:	0031      	movs	r1, r6
 8015e88:	002a      	movs	r2, r5
 8015e8a:	9802      	ldr	r0, [sp, #8]
 8015e8c:	f001 f826 	bl	8016edc <__pow5mult>
 8015e90:	9a03      	ldr	r2, [sp, #12]
 8015e92:	0001      	movs	r1, r0
 8015e94:	0006      	movs	r6, r0
 8015e96:	9802      	ldr	r0, [sp, #8]
 8015e98:	f000 ff90 	bl	8016dbc <__multiply>
 8015e9c:	9903      	ldr	r1, [sp, #12]
 8015e9e:	9010      	str	r0, [sp, #64]	; 0x40
 8015ea0:	9802      	ldr	r0, [sp, #8]
 8015ea2:	f000 feb3 	bl	8016c0c <_Bfree>
 8015ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ea8:	9303      	str	r3, [sp, #12]
 8015eaa:	9b04      	ldr	r3, [sp, #16]
 8015eac:	1b5a      	subs	r2, r3, r5
 8015eae:	d004      	beq.n	8015eba <_dtoa_r+0x7a6>
 8015eb0:	9903      	ldr	r1, [sp, #12]
 8015eb2:	9802      	ldr	r0, [sp, #8]
 8015eb4:	f001 f812 	bl	8016edc <__pow5mult>
 8015eb8:	9003      	str	r0, [sp, #12]
 8015eba:	2101      	movs	r1, #1
 8015ebc:	9802      	ldr	r0, [sp, #8]
 8015ebe:	f000 ff74 	bl	8016daa <__i2b>
 8015ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ec4:	9004      	str	r0, [sp, #16]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d100      	bne.n	8015ecc <_dtoa_r+0x7b8>
 8015eca:	e1e3      	b.n	8016294 <_dtoa_r+0xb80>
 8015ecc:	001a      	movs	r2, r3
 8015ece:	0001      	movs	r1, r0
 8015ed0:	9802      	ldr	r0, [sp, #8]
 8015ed2:	f001 f803 	bl	8016edc <__pow5mult>
 8015ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015ed8:	9004      	str	r0, [sp, #16]
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	dd00      	ble.n	8015ee0 <_dtoa_r+0x7cc>
 8015ede:	e082      	b.n	8015fe6 <_dtoa_r+0x8d2>
 8015ee0:	2500      	movs	r5, #0
 8015ee2:	9b06      	ldr	r3, [sp, #24]
 8015ee4:	42ab      	cmp	r3, r5
 8015ee6:	d10e      	bne.n	8015f06 <_dtoa_r+0x7f2>
 8015ee8:	9b07      	ldr	r3, [sp, #28]
 8015eea:	031b      	lsls	r3, r3, #12
 8015eec:	42ab      	cmp	r3, r5
 8015eee:	d10a      	bne.n	8015f06 <_dtoa_r+0x7f2>
 8015ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ef2:	9a07      	ldr	r2, [sp, #28]
 8015ef4:	4213      	tst	r3, r2
 8015ef6:	d006      	beq.n	8015f06 <_dtoa_r+0x7f2>
 8015ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015efa:	3501      	adds	r5, #1
 8015efc:	3301      	adds	r3, #1
 8015efe:	930a      	str	r3, [sp, #40]	; 0x28
 8015f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f02:	3301      	adds	r3, #1
 8015f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f08:	2001      	movs	r0, #1
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d16c      	bne.n	8015fe8 <_dtoa_r+0x8d4>
 8015f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f10:	1818      	adds	r0, r3, r0
 8015f12:	231f      	movs	r3, #31
 8015f14:	4018      	ands	r0, r3
 8015f16:	d07e      	beq.n	8016016 <_dtoa_r+0x902>
 8015f18:	3301      	adds	r3, #1
 8015f1a:	1a1b      	subs	r3, r3, r0
 8015f1c:	2b04      	cmp	r3, #4
 8015f1e:	dd70      	ble.n	8016002 <_dtoa_r+0x8ee>
 8015f20:	231c      	movs	r3, #28
 8015f22:	1a18      	subs	r0, r3, r0
 8015f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f26:	1824      	adds	r4, r4, r0
 8015f28:	181b      	adds	r3, r3, r0
 8015f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f2e:	181b      	adds	r3, r3, r0
 8015f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	dd05      	ble.n	8015f44 <_dtoa_r+0x830>
 8015f38:	001a      	movs	r2, r3
 8015f3a:	9903      	ldr	r1, [sp, #12]
 8015f3c:	9802      	ldr	r0, [sp, #8]
 8015f3e:	f001 f80f 	bl	8016f60 <__lshift>
 8015f42:	9003      	str	r0, [sp, #12]
 8015f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	dd05      	ble.n	8015f56 <_dtoa_r+0x842>
 8015f4a:	001a      	movs	r2, r3
 8015f4c:	9904      	ldr	r1, [sp, #16]
 8015f4e:	9802      	ldr	r0, [sp, #8]
 8015f50:	f001 f806 	bl	8016f60 <__lshift>
 8015f54:	9004      	str	r0, [sp, #16]
 8015f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d05e      	beq.n	801601a <_dtoa_r+0x906>
 8015f5c:	9904      	ldr	r1, [sp, #16]
 8015f5e:	9803      	ldr	r0, [sp, #12]
 8015f60:	f001 f850 	bl	8017004 <__mcmp>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	da58      	bge.n	801601a <_dtoa_r+0x906>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	220a      	movs	r2, #10
 8015f6c:	9903      	ldr	r1, [sp, #12]
 8015f6e:	9802      	ldr	r0, [sp, #8]
 8015f70:	f000 fe56 	bl	8016c20 <__multadd>
 8015f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f76:	3f01      	subs	r7, #1
 8015f78:	9003      	str	r0, [sp, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d100      	bne.n	8015f80 <_dtoa_r+0x86c>
 8015f7e:	e190      	b.n	80162a2 <_dtoa_r+0xb8e>
 8015f80:	2300      	movs	r3, #0
 8015f82:	0031      	movs	r1, r6
 8015f84:	220a      	movs	r2, #10
 8015f86:	9802      	ldr	r0, [sp, #8]
 8015f88:	f000 fe4a 	bl	8016c20 <__multadd>
 8015f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f8e:	0006      	movs	r6, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	dd00      	ble.n	8015f96 <_dtoa_r+0x882>
 8015f94:	e088      	b.n	80160a8 <_dtoa_r+0x994>
 8015f96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f98:	2b02      	cmp	r3, #2
 8015f9a:	dc00      	bgt.n	8015f9e <_dtoa_r+0x88a>
 8015f9c:	e084      	b.n	80160a8 <_dtoa_r+0x994>
 8015f9e:	e044      	b.n	801602a <_dtoa_r+0x916>
 8015fa0:	2336      	movs	r3, #54	; 0x36
 8015fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015fa4:	1a9b      	subs	r3, r3, r2
 8015fa6:	e747      	b.n	8015e38 <_dtoa_r+0x724>
 8015fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015faa:	1e5d      	subs	r5, r3, #1
 8015fac:	9b04      	ldr	r3, [sp, #16]
 8015fae:	42ab      	cmp	r3, r5
 8015fb0:	db08      	blt.n	8015fc4 <_dtoa_r+0x8b0>
 8015fb2:	1b5d      	subs	r5, r3, r5
 8015fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	da0c      	bge.n	8015fd4 <_dtoa_r+0x8c0>
 8015fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fbe:	1a9c      	subs	r4, r3, r2
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	e73b      	b.n	8015e3c <_dtoa_r+0x728>
 8015fc4:	9b04      	ldr	r3, [sp, #16]
 8015fc6:	9504      	str	r5, [sp, #16]
 8015fc8:	1aea      	subs	r2, r5, r3
 8015fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fcc:	2500      	movs	r5, #0
 8015fce:	189b      	adds	r3, r3, r2
 8015fd0:	9311      	str	r3, [sp, #68]	; 0x44
 8015fd2:	e7ef      	b.n	8015fb4 <_dtoa_r+0x8a0>
 8015fd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd8:	e730      	b.n	8015e3c <_dtoa_r+0x728>
 8015fda:	9d04      	ldr	r5, [sp, #16]
 8015fdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015fde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015fe0:	e737      	b.n	8015e52 <_dtoa_r+0x73e>
 8015fe2:	9a04      	ldr	r2, [sp, #16]
 8015fe4:	e764      	b.n	8015eb0 <_dtoa_r+0x79c>
 8015fe6:	2500      	movs	r5, #0
 8015fe8:	9b04      	ldr	r3, [sp, #16]
 8015fea:	9a04      	ldr	r2, [sp, #16]
 8015fec:	691b      	ldr	r3, [r3, #16]
 8015fee:	9310      	str	r3, [sp, #64]	; 0x40
 8015ff0:	3303      	adds	r3, #3
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	18d3      	adds	r3, r2, r3
 8015ff6:	6858      	ldr	r0, [r3, #4]
 8015ff8:	f000 fe8e 	bl	8016d18 <__hi0bits>
 8015ffc:	2320      	movs	r3, #32
 8015ffe:	1a18      	subs	r0, r3, r0
 8016000:	e785      	b.n	8015f0e <_dtoa_r+0x7fa>
 8016002:	2b04      	cmp	r3, #4
 8016004:	d095      	beq.n	8015f32 <_dtoa_r+0x81e>
 8016006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016008:	331c      	adds	r3, #28
 801600a:	18d2      	adds	r2, r2, r3
 801600c:	920a      	str	r2, [sp, #40]	; 0x28
 801600e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016010:	18e4      	adds	r4, r4, r3
 8016012:	18d3      	adds	r3, r2, r3
 8016014:	e78c      	b.n	8015f30 <_dtoa_r+0x81c>
 8016016:	0003      	movs	r3, r0
 8016018:	e7f5      	b.n	8016006 <_dtoa_r+0x8f2>
 801601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801601c:	2b00      	cmp	r3, #0
 801601e:	dc3d      	bgt.n	801609c <_dtoa_r+0x988>
 8016020:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016022:	2b02      	cmp	r3, #2
 8016024:	dd3a      	ble.n	801609c <_dtoa_r+0x988>
 8016026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016028:	930c      	str	r3, [sp, #48]	; 0x30
 801602a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801602c:	2b00      	cmp	r3, #0
 801602e:	d10c      	bne.n	801604a <_dtoa_r+0x936>
 8016030:	9904      	ldr	r1, [sp, #16]
 8016032:	2205      	movs	r2, #5
 8016034:	9802      	ldr	r0, [sp, #8]
 8016036:	f000 fdf3 	bl	8016c20 <__multadd>
 801603a:	9004      	str	r0, [sp, #16]
 801603c:	0001      	movs	r1, r0
 801603e:	9803      	ldr	r0, [sp, #12]
 8016040:	f000 ffe0 	bl	8017004 <__mcmp>
 8016044:	2800      	cmp	r0, #0
 8016046:	dd00      	ble.n	801604a <_dtoa_r+0x936>
 8016048:	e5ad      	b.n	8015ba6 <_dtoa_r+0x492>
 801604a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801604c:	9d08      	ldr	r5, [sp, #32]
 801604e:	43df      	mvns	r7, r3
 8016050:	2300      	movs	r3, #0
 8016052:	9309      	str	r3, [sp, #36]	; 0x24
 8016054:	9904      	ldr	r1, [sp, #16]
 8016056:	9802      	ldr	r0, [sp, #8]
 8016058:	f000 fdd8 	bl	8016c0c <_Bfree>
 801605c:	2e00      	cmp	r6, #0
 801605e:	d100      	bne.n	8016062 <_dtoa_r+0x94e>
 8016060:	e69b      	b.n	8015d9a <_dtoa_r+0x686>
 8016062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016064:	2b00      	cmp	r3, #0
 8016066:	d005      	beq.n	8016074 <_dtoa_r+0x960>
 8016068:	42b3      	cmp	r3, r6
 801606a:	d003      	beq.n	8016074 <_dtoa_r+0x960>
 801606c:	0019      	movs	r1, r3
 801606e:	9802      	ldr	r0, [sp, #8]
 8016070:	f000 fdcc 	bl	8016c0c <_Bfree>
 8016074:	0031      	movs	r1, r6
 8016076:	9802      	ldr	r0, [sp, #8]
 8016078:	f000 fdc8 	bl	8016c0c <_Bfree>
 801607c:	e68d      	b.n	8015d9a <_dtoa_r+0x686>
 801607e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016080:	9304      	str	r3, [sp, #16]
 8016082:	001e      	movs	r6, r3
 8016084:	e7e1      	b.n	801604a <_dtoa_r+0x936>
 8016086:	2300      	movs	r3, #0
 8016088:	e7fa      	b.n	8016080 <_dtoa_r+0x96c>
 801608a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801608c:	0037      	movs	r7, r6
 801608e:	9304      	str	r3, [sp, #16]
 8016090:	001e      	movs	r6, r3
 8016092:	e588      	b.n	8015ba6 <_dtoa_r+0x492>
 8016094:	40240000 	.word	0x40240000
 8016098:	00000433 	.word	0x00000433
 801609c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d100      	bne.n	80160a4 <_dtoa_r+0x990>
 80160a2:	e0b2      	b.n	801620a <_dtoa_r+0xaf6>
 80160a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a6:	930c      	str	r3, [sp, #48]	; 0x30
 80160a8:	2c00      	cmp	r4, #0
 80160aa:	dd05      	ble.n	80160b8 <_dtoa_r+0x9a4>
 80160ac:	0031      	movs	r1, r6
 80160ae:	0022      	movs	r2, r4
 80160b0:	9802      	ldr	r0, [sp, #8]
 80160b2:	f000 ff55 	bl	8016f60 <__lshift>
 80160b6:	0006      	movs	r6, r0
 80160b8:	0030      	movs	r0, r6
 80160ba:	2d00      	cmp	r5, #0
 80160bc:	d011      	beq.n	80160e2 <_dtoa_r+0x9ce>
 80160be:	6871      	ldr	r1, [r6, #4]
 80160c0:	9802      	ldr	r0, [sp, #8]
 80160c2:	f000 fd7b 	bl	8016bbc <_Balloc>
 80160c6:	0031      	movs	r1, r6
 80160c8:	0004      	movs	r4, r0
 80160ca:	6933      	ldr	r3, [r6, #16]
 80160cc:	310c      	adds	r1, #12
 80160ce:	1c9a      	adds	r2, r3, #2
 80160d0:	0092      	lsls	r2, r2, #2
 80160d2:	300c      	adds	r0, #12
 80160d4:	f7fc fe8b 	bl	8012dee <memcpy>
 80160d8:	2201      	movs	r2, #1
 80160da:	0021      	movs	r1, r4
 80160dc:	9802      	ldr	r0, [sp, #8]
 80160de:	f000 ff3f 	bl	8016f60 <__lshift>
 80160e2:	9609      	str	r6, [sp, #36]	; 0x24
 80160e4:	0006      	movs	r6, r0
 80160e6:	9b08      	ldr	r3, [sp, #32]
 80160e8:	930a      	str	r3, [sp, #40]	; 0x28
 80160ea:	9904      	ldr	r1, [sp, #16]
 80160ec:	9803      	ldr	r0, [sp, #12]
 80160ee:	f7ff fa8b 	bl	8015608 <quorem>
 80160f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160f4:	900d      	str	r0, [sp, #52]	; 0x34
 80160f6:	0004      	movs	r4, r0
 80160f8:	9803      	ldr	r0, [sp, #12]
 80160fa:	f000 ff83 	bl	8017004 <__mcmp>
 80160fe:	0032      	movs	r2, r6
 8016100:	9010      	str	r0, [sp, #64]	; 0x40
 8016102:	9904      	ldr	r1, [sp, #16]
 8016104:	9802      	ldr	r0, [sp, #8]
 8016106:	f000 ff97 	bl	8017038 <__mdiff>
 801610a:	2301      	movs	r3, #1
 801610c:	930b      	str	r3, [sp, #44]	; 0x2c
 801610e:	68c3      	ldr	r3, [r0, #12]
 8016110:	3430      	adds	r4, #48	; 0x30
 8016112:	0005      	movs	r5, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	d104      	bne.n	8016122 <_dtoa_r+0xa0e>
 8016118:	0001      	movs	r1, r0
 801611a:	9803      	ldr	r0, [sp, #12]
 801611c:	f000 ff72 	bl	8017004 <__mcmp>
 8016120:	900b      	str	r0, [sp, #44]	; 0x2c
 8016122:	0029      	movs	r1, r5
 8016124:	9802      	ldr	r0, [sp, #8]
 8016126:	f000 fd71 	bl	8016c0c <_Bfree>
 801612a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801612c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801612e:	4313      	orrs	r3, r2
 8016130:	d10e      	bne.n	8016150 <_dtoa_r+0xa3c>
 8016132:	9a06      	ldr	r2, [sp, #24]
 8016134:	3301      	adds	r3, #1
 8016136:	4213      	tst	r3, r2
 8016138:	d10a      	bne.n	8016150 <_dtoa_r+0xa3c>
 801613a:	2c39      	cmp	r4, #57	; 0x39
 801613c:	d026      	beq.n	801618c <_dtoa_r+0xa78>
 801613e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016140:	2b00      	cmp	r3, #0
 8016142:	dd01      	ble.n	8016148 <_dtoa_r+0xa34>
 8016144:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016146:	3431      	adds	r4, #49	; 0x31
 8016148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801614a:	1c5d      	adds	r5, r3, #1
 801614c:	701c      	strb	r4, [r3, #0]
 801614e:	e781      	b.n	8016054 <_dtoa_r+0x940>
 8016150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016152:	2b00      	cmp	r3, #0
 8016154:	db07      	blt.n	8016166 <_dtoa_r+0xa52>
 8016156:	001d      	movs	r5, r3
 8016158:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801615a:	431d      	orrs	r5, r3
 801615c:	d122      	bne.n	80161a4 <_dtoa_r+0xa90>
 801615e:	2301      	movs	r3, #1
 8016160:	9a06      	ldr	r2, [sp, #24]
 8016162:	4213      	tst	r3, r2
 8016164:	d11e      	bne.n	80161a4 <_dtoa_r+0xa90>
 8016166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016168:	2b00      	cmp	r3, #0
 801616a:	dded      	ble.n	8016148 <_dtoa_r+0xa34>
 801616c:	9903      	ldr	r1, [sp, #12]
 801616e:	2201      	movs	r2, #1
 8016170:	9802      	ldr	r0, [sp, #8]
 8016172:	f000 fef5 	bl	8016f60 <__lshift>
 8016176:	9904      	ldr	r1, [sp, #16]
 8016178:	9003      	str	r0, [sp, #12]
 801617a:	f000 ff43 	bl	8017004 <__mcmp>
 801617e:	2800      	cmp	r0, #0
 8016180:	dc02      	bgt.n	8016188 <_dtoa_r+0xa74>
 8016182:	d1e1      	bne.n	8016148 <_dtoa_r+0xa34>
 8016184:	07e3      	lsls	r3, r4, #31
 8016186:	d5df      	bpl.n	8016148 <_dtoa_r+0xa34>
 8016188:	2c39      	cmp	r4, #57	; 0x39
 801618a:	d1db      	bne.n	8016144 <_dtoa_r+0xa30>
 801618c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801618e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016190:	1c5d      	adds	r5, r3, #1
 8016192:	2339      	movs	r3, #57	; 0x39
 8016194:	7013      	strb	r3, [r2, #0]
 8016196:	1e6b      	subs	r3, r5, #1
 8016198:	781a      	ldrb	r2, [r3, #0]
 801619a:	2a39      	cmp	r2, #57	; 0x39
 801619c:	d067      	beq.n	801626e <_dtoa_r+0xb5a>
 801619e:	3201      	adds	r2, #1
 80161a0:	701a      	strb	r2, [r3, #0]
 80161a2:	e757      	b.n	8016054 <_dtoa_r+0x940>
 80161a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161a6:	1c5d      	adds	r5, r3, #1
 80161a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	dd04      	ble.n	80161b8 <_dtoa_r+0xaa4>
 80161ae:	2c39      	cmp	r4, #57	; 0x39
 80161b0:	d0ec      	beq.n	801618c <_dtoa_r+0xa78>
 80161b2:	3401      	adds	r4, #1
 80161b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b6:	e7c9      	b.n	801614c <_dtoa_r+0xa38>
 80161b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161bc:	701c      	strb	r4, [r3, #0]
 80161be:	9b08      	ldr	r3, [sp, #32]
 80161c0:	1aeb      	subs	r3, r5, r3
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d03e      	beq.n	8016244 <_dtoa_r+0xb30>
 80161c6:	2300      	movs	r3, #0
 80161c8:	220a      	movs	r2, #10
 80161ca:	9903      	ldr	r1, [sp, #12]
 80161cc:	9802      	ldr	r0, [sp, #8]
 80161ce:	f000 fd27 	bl	8016c20 <__multadd>
 80161d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d4:	9003      	str	r0, [sp, #12]
 80161d6:	42b3      	cmp	r3, r6
 80161d8:	d109      	bne.n	80161ee <_dtoa_r+0xada>
 80161da:	2300      	movs	r3, #0
 80161dc:	220a      	movs	r2, #10
 80161de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161e0:	9802      	ldr	r0, [sp, #8]
 80161e2:	f000 fd1d 	bl	8016c20 <__multadd>
 80161e6:	9009      	str	r0, [sp, #36]	; 0x24
 80161e8:	0006      	movs	r6, r0
 80161ea:	950a      	str	r5, [sp, #40]	; 0x28
 80161ec:	e77d      	b.n	80160ea <_dtoa_r+0x9d6>
 80161ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161f0:	2300      	movs	r3, #0
 80161f2:	220a      	movs	r2, #10
 80161f4:	9802      	ldr	r0, [sp, #8]
 80161f6:	f000 fd13 	bl	8016c20 <__multadd>
 80161fa:	2300      	movs	r3, #0
 80161fc:	9009      	str	r0, [sp, #36]	; 0x24
 80161fe:	220a      	movs	r2, #10
 8016200:	0031      	movs	r1, r6
 8016202:	9802      	ldr	r0, [sp, #8]
 8016204:	f000 fd0c 	bl	8016c20 <__multadd>
 8016208:	e7ee      	b.n	80161e8 <_dtoa_r+0xad4>
 801620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801620c:	930c      	str	r3, [sp, #48]	; 0x30
 801620e:	9b08      	ldr	r3, [sp, #32]
 8016210:	9306      	str	r3, [sp, #24]
 8016212:	9904      	ldr	r1, [sp, #16]
 8016214:	9803      	ldr	r0, [sp, #12]
 8016216:	f7ff f9f7 	bl	8015608 <quorem>
 801621a:	9b06      	ldr	r3, [sp, #24]
 801621c:	3030      	adds	r0, #48	; 0x30
 801621e:	1c5d      	adds	r5, r3, #1
 8016220:	7018      	strb	r0, [r3, #0]
 8016222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016224:	9b08      	ldr	r3, [sp, #32]
 8016226:	0004      	movs	r4, r0
 8016228:	1aeb      	subs	r3, r5, r3
 801622a:	429a      	cmp	r2, r3
 801622c:	dd08      	ble.n	8016240 <_dtoa_r+0xb2c>
 801622e:	2300      	movs	r3, #0
 8016230:	220a      	movs	r2, #10
 8016232:	9903      	ldr	r1, [sp, #12]
 8016234:	9802      	ldr	r0, [sp, #8]
 8016236:	f000 fcf3 	bl	8016c20 <__multadd>
 801623a:	9506      	str	r5, [sp, #24]
 801623c:	9003      	str	r0, [sp, #12]
 801623e:	e7e8      	b.n	8016212 <_dtoa_r+0xafe>
 8016240:	2300      	movs	r3, #0
 8016242:	9309      	str	r3, [sp, #36]	; 0x24
 8016244:	9903      	ldr	r1, [sp, #12]
 8016246:	2201      	movs	r2, #1
 8016248:	9802      	ldr	r0, [sp, #8]
 801624a:	f000 fe89 	bl	8016f60 <__lshift>
 801624e:	9904      	ldr	r1, [sp, #16]
 8016250:	9003      	str	r0, [sp, #12]
 8016252:	f000 fed7 	bl	8017004 <__mcmp>
 8016256:	2800      	cmp	r0, #0
 8016258:	dc9d      	bgt.n	8016196 <_dtoa_r+0xa82>
 801625a:	d101      	bne.n	8016260 <_dtoa_r+0xb4c>
 801625c:	07e3      	lsls	r3, r4, #31
 801625e:	d49a      	bmi.n	8016196 <_dtoa_r+0xa82>
 8016260:	1e6b      	subs	r3, r5, #1
 8016262:	781a      	ldrb	r2, [r3, #0]
 8016264:	2a30      	cmp	r2, #48	; 0x30
 8016266:	d000      	beq.n	801626a <_dtoa_r+0xb56>
 8016268:	e6f4      	b.n	8016054 <_dtoa_r+0x940>
 801626a:	001d      	movs	r5, r3
 801626c:	e7f8      	b.n	8016260 <_dtoa_r+0xb4c>
 801626e:	9a08      	ldr	r2, [sp, #32]
 8016270:	429a      	cmp	r2, r3
 8016272:	d103      	bne.n	801627c <_dtoa_r+0xb68>
 8016274:	2331      	movs	r3, #49	; 0x31
 8016276:	3701      	adds	r7, #1
 8016278:	7013      	strb	r3, [r2, #0]
 801627a:	e6eb      	b.n	8016054 <_dtoa_r+0x940>
 801627c:	001d      	movs	r5, r3
 801627e:	e78a      	b.n	8016196 <_dtoa_r+0xa82>
 8016280:	4b0b      	ldr	r3, [pc, #44]	; (80162b0 <_dtoa_r+0xb9c>)
 8016282:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016284:	9308      	str	r3, [sp, #32]
 8016286:	4b0b      	ldr	r3, [pc, #44]	; (80162b4 <_dtoa_r+0xba0>)
 8016288:	2a00      	cmp	r2, #0
 801628a:	d001      	beq.n	8016290 <_dtoa_r+0xb7c>
 801628c:	f7ff fa75 	bl	801577a <_dtoa_r+0x66>
 8016290:	f7ff fa75 	bl	801577e <_dtoa_r+0x6a>
 8016294:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016296:	2b01      	cmp	r3, #1
 8016298:	dc00      	bgt.n	801629c <_dtoa_r+0xb88>
 801629a:	e621      	b.n	8015ee0 <_dtoa_r+0x7cc>
 801629c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801629e:	2001      	movs	r0, #1
 80162a0:	e635      	b.n	8015f0e <_dtoa_r+0x7fa>
 80162a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	dcb2      	bgt.n	801620e <_dtoa_r+0xafa>
 80162a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162aa:	2b02      	cmp	r3, #2
 80162ac:	ddaf      	ble.n	801620e <_dtoa_r+0xafa>
 80162ae:	e6bc      	b.n	801602a <_dtoa_r+0x916>
 80162b0:	0801a6fd 	.word	0x0801a6fd
 80162b4:	0801a705 	.word	0x0801a705

080162b8 <__errno>:
 80162b8:	4b01      	ldr	r3, [pc, #4]	; (80162c0 <__errno+0x8>)
 80162ba:	6818      	ldr	r0, [r3, #0]
 80162bc:	4770      	bx	lr
 80162be:	46c0      	nop			; (mov r8, r8)
 80162c0:	20000064 	.word	0x20000064

080162c4 <__libc_fini_array>:
 80162c4:	b570      	push	{r4, r5, r6, lr}
 80162c6:	4d07      	ldr	r5, [pc, #28]	; (80162e4 <__libc_fini_array+0x20>)
 80162c8:	4c07      	ldr	r4, [pc, #28]	; (80162e8 <__libc_fini_array+0x24>)
 80162ca:	1b64      	subs	r4, r4, r5
 80162cc:	10a4      	asrs	r4, r4, #2
 80162ce:	2c00      	cmp	r4, #0
 80162d0:	d102      	bne.n	80162d8 <__libc_fini_array+0x14>
 80162d2:	f001 f987 	bl	80175e4 <_fini>
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	3c01      	subs	r4, #1
 80162da:	00a3      	lsls	r3, r4, #2
 80162dc:	58eb      	ldr	r3, [r5, r3]
 80162de:	4798      	blx	r3
 80162e0:	e7f5      	b.n	80162ce <__libc_fini_array+0xa>
 80162e2:	46c0      	nop			; (mov r8, r8)
 80162e4:	0801a81c 	.word	0x0801a81c
 80162e8:	0801a820 	.word	0x0801a820

080162ec <_malloc_trim_r>:
 80162ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162ee:	0005      	movs	r5, r0
 80162f0:	2008      	movs	r0, #8
 80162f2:	000c      	movs	r4, r1
 80162f4:	f7ff f95c 	bl	80155b0 <sysconf>
 80162f8:	0007      	movs	r7, r0
 80162fa:	0028      	movs	r0, r5
 80162fc:	f7fc fd88 	bl	8012e10 <__malloc_lock>
 8016300:	2203      	movs	r2, #3
 8016302:	4e21      	ldr	r6, [pc, #132]	; (8016388 <_malloc_trim_r+0x9c>)
 8016304:	0039      	movs	r1, r7
 8016306:	68b3      	ldr	r3, [r6, #8]
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	4393      	bics	r3, r2
 801630c:	1b18      	subs	r0, r3, r4
 801630e:	3811      	subs	r0, #17
 8016310:	19c0      	adds	r0, r0, r7
 8016312:	9301      	str	r3, [sp, #4]
 8016314:	f7e9 ff1c 	bl	8000150 <__udivsi3>
 8016318:	1e44      	subs	r4, r0, #1
 801631a:	437c      	muls	r4, r7
 801631c:	42a7      	cmp	r7, r4
 801631e:	dd04      	ble.n	801632a <_malloc_trim_r+0x3e>
 8016320:	0028      	movs	r0, r5
 8016322:	f7fc fd7d 	bl	8012e20 <__malloc_unlock>
 8016326:	2000      	movs	r0, #0
 8016328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801632a:	2100      	movs	r1, #0
 801632c:	0028      	movs	r0, r5
 801632e:	f7fc ff4f 	bl	80131d0 <_sbrk_r>
 8016332:	68b3      	ldr	r3, [r6, #8]
 8016334:	9a01      	ldr	r2, [sp, #4]
 8016336:	189b      	adds	r3, r3, r2
 8016338:	4298      	cmp	r0, r3
 801633a:	d1f1      	bne.n	8016320 <_malloc_trim_r+0x34>
 801633c:	4261      	negs	r1, r4
 801633e:	0028      	movs	r0, r5
 8016340:	f7fc ff46 	bl	80131d0 <_sbrk_r>
 8016344:	1c43      	adds	r3, r0, #1
 8016346:	d110      	bne.n	801636a <_malloc_trim_r+0x7e>
 8016348:	2100      	movs	r1, #0
 801634a:	0028      	movs	r0, r5
 801634c:	f7fc ff40 	bl	80131d0 <_sbrk_r>
 8016350:	68b2      	ldr	r2, [r6, #8]
 8016352:	1a81      	subs	r1, r0, r2
 8016354:	290f      	cmp	r1, #15
 8016356:	dde3      	ble.n	8016320 <_malloc_trim_r+0x34>
 8016358:	4b0c      	ldr	r3, [pc, #48]	; (801638c <_malloc_trim_r+0xa0>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	1ac0      	subs	r0, r0, r3
 801635e:	4b0c      	ldr	r3, [pc, #48]	; (8016390 <_malloc_trim_r+0xa4>)
 8016360:	6018      	str	r0, [r3, #0]
 8016362:	2301      	movs	r3, #1
 8016364:	430b      	orrs	r3, r1
 8016366:	6053      	str	r3, [r2, #4]
 8016368:	e7da      	b.n	8016320 <_malloc_trim_r+0x34>
 801636a:	68b2      	ldr	r2, [r6, #8]
 801636c:	2601      	movs	r6, #1
 801636e:	9b01      	ldr	r3, [sp, #4]
 8016370:	0028      	movs	r0, r5
 8016372:	1b1b      	subs	r3, r3, r4
 8016374:	4333      	orrs	r3, r6
 8016376:	6053      	str	r3, [r2, #4]
 8016378:	4b05      	ldr	r3, [pc, #20]	; (8016390 <_malloc_trim_r+0xa4>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	1b14      	subs	r4, r2, r4
 801637e:	601c      	str	r4, [r3, #0]
 8016380:	f7fc fd4e 	bl	8012e20 <__malloc_unlock>
 8016384:	0030      	movs	r0, r6
 8016386:	e7cf      	b.n	8016328 <_malloc_trim_r+0x3c>
 8016388:	200005fc 	.word	0x200005fc
 801638c:	20000a04 	.word	0x20000a04
 8016390:	200067a4 	.word	0x200067a4

08016394 <_free_r>:
 8016394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016396:	1e0d      	subs	r5, r1, #0
 8016398:	9001      	str	r0, [sp, #4]
 801639a:	d02d      	beq.n	80163f8 <_free_r+0x64>
 801639c:	f7fc fd38 	bl	8012e10 <__malloc_lock>
 80163a0:	2301      	movs	r3, #1
 80163a2:	0029      	movs	r1, r5
 80163a4:	469c      	mov	ip, r3
 80163a6:	3908      	subs	r1, #8
 80163a8:	684f      	ldr	r7, [r1, #4]
 80163aa:	4662      	mov	r2, ip
 80163ac:	003b      	movs	r3, r7
 80163ae:	4666      	mov	r6, ip
 80163b0:	4393      	bics	r3, r2
 80163b2:	18c8      	adds	r0, r1, r3
 80163b4:	6845      	ldr	r5, [r0, #4]
 80163b6:	3202      	adds	r2, #2
 80163b8:	4395      	bics	r5, r2
 80163ba:	4a4a      	ldr	r2, [pc, #296]	; (80164e4 <_free_r+0x150>)
 80163bc:	4037      	ands	r7, r6
 80163be:	6896      	ldr	r6, [r2, #8]
 80163c0:	4286      	cmp	r6, r0
 80163c2:	d11a      	bne.n	80163fa <_free_r+0x66>
 80163c4:	195b      	adds	r3, r3, r5
 80163c6:	2f00      	cmp	r7, #0
 80163c8:	d106      	bne.n	80163d8 <_free_r+0x44>
 80163ca:	6808      	ldr	r0, [r1, #0]
 80163cc:	1a09      	subs	r1, r1, r0
 80163ce:	688d      	ldr	r5, [r1, #8]
 80163d0:	181b      	adds	r3, r3, r0
 80163d2:	68c8      	ldr	r0, [r1, #12]
 80163d4:	60e8      	str	r0, [r5, #12]
 80163d6:	6085      	str	r5, [r0, #8]
 80163d8:	2001      	movs	r0, #1
 80163da:	4318      	orrs	r0, r3
 80163dc:	6048      	str	r0, [r1, #4]
 80163de:	6091      	str	r1, [r2, #8]
 80163e0:	4a41      	ldr	r2, [pc, #260]	; (80164e8 <_free_r+0x154>)
 80163e2:	6812      	ldr	r2, [r2, #0]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d804      	bhi.n	80163f2 <_free_r+0x5e>
 80163e8:	4b40      	ldr	r3, [pc, #256]	; (80164ec <_free_r+0x158>)
 80163ea:	9801      	ldr	r0, [sp, #4]
 80163ec:	6819      	ldr	r1, [r3, #0]
 80163ee:	f7ff ff7d 	bl	80162ec <_malloc_trim_r>
 80163f2:	9801      	ldr	r0, [sp, #4]
 80163f4:	f7fc fd14 	bl	8012e20 <__malloc_unlock>
 80163f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80163fa:	2600      	movs	r6, #0
 80163fc:	6045      	str	r5, [r0, #4]
 80163fe:	42b7      	cmp	r7, r6
 8016400:	d109      	bne.n	8016416 <_free_r+0x82>
 8016402:	680f      	ldr	r7, [r1, #0]
 8016404:	4c3a      	ldr	r4, [pc, #232]	; (80164f0 <_free_r+0x15c>)
 8016406:	1bc9      	subs	r1, r1, r7
 8016408:	19db      	adds	r3, r3, r7
 801640a:	688f      	ldr	r7, [r1, #8]
 801640c:	42a7      	cmp	r7, r4
 801640e:	d02b      	beq.n	8016468 <_free_r+0xd4>
 8016410:	68cc      	ldr	r4, [r1, #12]
 8016412:	60fc      	str	r4, [r7, #12]
 8016414:	60a7      	str	r7, [r4, #8]
 8016416:	1947      	adds	r7, r0, r5
 8016418:	687c      	ldr	r4, [r7, #4]
 801641a:	2701      	movs	r7, #1
 801641c:	423c      	tst	r4, r7
 801641e:	d10b      	bne.n	8016438 <_free_r+0xa4>
 8016420:	195b      	adds	r3, r3, r5
 8016422:	6885      	ldr	r5, [r0, #8]
 8016424:	2e00      	cmp	r6, #0
 8016426:	d121      	bne.n	801646c <_free_r+0xd8>
 8016428:	4c31      	ldr	r4, [pc, #196]	; (80164f0 <_free_r+0x15c>)
 801642a:	42a5      	cmp	r5, r4
 801642c:	d11e      	bne.n	801646c <_free_r+0xd8>
 801642e:	003e      	movs	r6, r7
 8016430:	6151      	str	r1, [r2, #20]
 8016432:	6111      	str	r1, [r2, #16]
 8016434:	60cd      	str	r5, [r1, #12]
 8016436:	608d      	str	r5, [r1, #8]
 8016438:	2001      	movs	r0, #1
 801643a:	0005      	movs	r5, r0
 801643c:	431d      	orrs	r5, r3
 801643e:	604d      	str	r5, [r1, #4]
 8016440:	50cb      	str	r3, [r1, r3]
 8016442:	2e00      	cmp	r6, #0
 8016444:	d1d5      	bne.n	80163f2 <_free_r+0x5e>
 8016446:	4d2b      	ldr	r5, [pc, #172]	; (80164f4 <_free_r+0x160>)
 8016448:	42ab      	cmp	r3, r5
 801644a:	d813      	bhi.n	8016474 <_free_r+0xe0>
 801644c:	08db      	lsrs	r3, r3, #3
 801644e:	109d      	asrs	r5, r3, #2
 8016450:	40a8      	lsls	r0, r5
 8016452:	6854      	ldr	r4, [r2, #4]
 8016454:	00db      	lsls	r3, r3, #3
 8016456:	4320      	orrs	r0, r4
 8016458:	6050      	str	r0, [r2, #4]
 801645a:	189a      	adds	r2, r3, r2
 801645c:	6893      	ldr	r3, [r2, #8]
 801645e:	60ca      	str	r2, [r1, #12]
 8016460:	608b      	str	r3, [r1, #8]
 8016462:	6091      	str	r1, [r2, #8]
 8016464:	60d9      	str	r1, [r3, #12]
 8016466:	e7c4      	b.n	80163f2 <_free_r+0x5e>
 8016468:	4666      	mov	r6, ip
 801646a:	e7d4      	b.n	8016416 <_free_r+0x82>
 801646c:	68c0      	ldr	r0, [r0, #12]
 801646e:	60e8      	str	r0, [r5, #12]
 8016470:	6085      	str	r5, [r0, #8]
 8016472:	e7e1      	b.n	8016438 <_free_r+0xa4>
 8016474:	0a5d      	lsrs	r5, r3, #9
 8016476:	2d04      	cmp	r5, #4
 8016478:	d812      	bhi.n	80164a0 <_free_r+0x10c>
 801647a:	0998      	lsrs	r0, r3, #6
 801647c:	3038      	adds	r0, #56	; 0x38
 801647e:	00c6      	lsls	r6, r0, #3
 8016480:	18b6      	adds	r6, r6, r2
 8016482:	68b5      	ldr	r5, [r6, #8]
 8016484:	2703      	movs	r7, #3
 8016486:	42ae      	cmp	r6, r5
 8016488:	d125      	bne.n	80164d6 <_free_r+0x142>
 801648a:	2301      	movs	r3, #1
 801648c:	1080      	asrs	r0, r0, #2
 801648e:	4083      	lsls	r3, r0
 8016490:	6850      	ldr	r0, [r2, #4]
 8016492:	4303      	orrs	r3, r0
 8016494:	6053      	str	r3, [r2, #4]
 8016496:	60ce      	str	r6, [r1, #12]
 8016498:	608d      	str	r5, [r1, #8]
 801649a:	60b1      	str	r1, [r6, #8]
 801649c:	60e9      	str	r1, [r5, #12]
 801649e:	e7a8      	b.n	80163f2 <_free_r+0x5e>
 80164a0:	2d14      	cmp	r5, #20
 80164a2:	d802      	bhi.n	80164aa <_free_r+0x116>
 80164a4:	0028      	movs	r0, r5
 80164a6:	305b      	adds	r0, #91	; 0x5b
 80164a8:	e7e9      	b.n	801647e <_free_r+0xea>
 80164aa:	2d54      	cmp	r5, #84	; 0x54
 80164ac:	d802      	bhi.n	80164b4 <_free_r+0x120>
 80164ae:	0b18      	lsrs	r0, r3, #12
 80164b0:	306e      	adds	r0, #110	; 0x6e
 80164b2:	e7e4      	b.n	801647e <_free_r+0xea>
 80164b4:	20aa      	movs	r0, #170	; 0xaa
 80164b6:	0040      	lsls	r0, r0, #1
 80164b8:	4285      	cmp	r5, r0
 80164ba:	d802      	bhi.n	80164c2 <_free_r+0x12e>
 80164bc:	0bd8      	lsrs	r0, r3, #15
 80164be:	3077      	adds	r0, #119	; 0x77
 80164c0:	e7dd      	b.n	801647e <_free_r+0xea>
 80164c2:	4e0d      	ldr	r6, [pc, #52]	; (80164f8 <_free_r+0x164>)
 80164c4:	207e      	movs	r0, #126	; 0x7e
 80164c6:	42b5      	cmp	r5, r6
 80164c8:	d8d9      	bhi.n	801647e <_free_r+0xea>
 80164ca:	0c98      	lsrs	r0, r3, #18
 80164cc:	307c      	adds	r0, #124	; 0x7c
 80164ce:	e7d6      	b.n	801647e <_free_r+0xea>
 80164d0:	68ad      	ldr	r5, [r5, #8]
 80164d2:	42ae      	cmp	r6, r5
 80164d4:	d003      	beq.n	80164de <_free_r+0x14a>
 80164d6:	686a      	ldr	r2, [r5, #4]
 80164d8:	43ba      	bics	r2, r7
 80164da:	429a      	cmp	r2, r3
 80164dc:	d8f8      	bhi.n	80164d0 <_free_r+0x13c>
 80164de:	68ee      	ldr	r6, [r5, #12]
 80164e0:	e7d9      	b.n	8016496 <_free_r+0x102>
 80164e2:	46c0      	nop			; (mov r8, r8)
 80164e4:	200005fc 	.word	0x200005fc
 80164e8:	20000a08 	.word	0x20000a08
 80164ec:	200067d4 	.word	0x200067d4
 80164f0:	20000604 	.word	0x20000604
 80164f4:	000001ff 	.word	0x000001ff
 80164f8:	00000554 	.word	0x00000554

080164fc <rshift>:
 80164fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164fe:	0004      	movs	r4, r0
 8016500:	6905      	ldr	r5, [r0, #16]
 8016502:	3414      	adds	r4, #20
 8016504:	114b      	asrs	r3, r1, #5
 8016506:	0026      	movs	r6, r4
 8016508:	429d      	cmp	r5, r3
 801650a:	dd14      	ble.n	8016536 <rshift+0x3a>
 801650c:	221f      	movs	r2, #31
 801650e:	00ad      	lsls	r5, r5, #2
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4011      	ands	r1, r2
 8016514:	1965      	adds	r5, r4, r5
 8016516:	18e3      	adds	r3, r4, r3
 8016518:	0022      	movs	r2, r4
 801651a:	2900      	cmp	r1, #0
 801651c:	d01e      	beq.n	801655c <rshift+0x60>
 801651e:	cb04      	ldmia	r3!, {r2}
 8016520:	2720      	movs	r7, #32
 8016522:	40ca      	lsrs	r2, r1
 8016524:	46a4      	mov	ip, r4
 8016526:	1a7f      	subs	r7, r7, r1
 8016528:	4666      	mov	r6, ip
 801652a:	429d      	cmp	r5, r3
 801652c:	d80b      	bhi.n	8016546 <rshift+0x4a>
 801652e:	6032      	str	r2, [r6, #0]
 8016530:	2a00      	cmp	r2, #0
 8016532:	d000      	beq.n	8016536 <rshift+0x3a>
 8016534:	3604      	adds	r6, #4
 8016536:	1b33      	subs	r3, r6, r4
 8016538:	109b      	asrs	r3, r3, #2
 801653a:	6103      	str	r3, [r0, #16]
 801653c:	42a6      	cmp	r6, r4
 801653e:	d101      	bne.n	8016544 <rshift+0x48>
 8016540:	2300      	movs	r3, #0
 8016542:	6143      	str	r3, [r0, #20]
 8016544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016546:	681e      	ldr	r6, [r3, #0]
 8016548:	40be      	lsls	r6, r7
 801654a:	4332      	orrs	r2, r6
 801654c:	4666      	mov	r6, ip
 801654e:	c604      	stmia	r6!, {r2}
 8016550:	cb04      	ldmia	r3!, {r2}
 8016552:	46b4      	mov	ip, r6
 8016554:	40ca      	lsrs	r2, r1
 8016556:	e7e7      	b.n	8016528 <rshift+0x2c>
 8016558:	cb02      	ldmia	r3!, {r1}
 801655a:	c202      	stmia	r2!, {r1}
 801655c:	0016      	movs	r6, r2
 801655e:	429d      	cmp	r5, r3
 8016560:	d8fa      	bhi.n	8016558 <rshift+0x5c>
 8016562:	e7e8      	b.n	8016536 <rshift+0x3a>

08016564 <__hexdig_fun>:
 8016564:	0003      	movs	r3, r0
 8016566:	3b30      	subs	r3, #48	; 0x30
 8016568:	2b09      	cmp	r3, #9
 801656a:	d803      	bhi.n	8016574 <__hexdig_fun+0x10>
 801656c:	3820      	subs	r0, #32
 801656e:	b2c3      	uxtb	r3, r0
 8016570:	0018      	movs	r0, r3
 8016572:	4770      	bx	lr
 8016574:	0003      	movs	r3, r0
 8016576:	3b61      	subs	r3, #97	; 0x61
 8016578:	2b05      	cmp	r3, #5
 801657a:	d801      	bhi.n	8016580 <__hexdig_fun+0x1c>
 801657c:	3847      	subs	r0, #71	; 0x47
 801657e:	e7f6      	b.n	801656e <__hexdig_fun+0xa>
 8016580:	0002      	movs	r2, r0
 8016582:	3a41      	subs	r2, #65	; 0x41
 8016584:	2300      	movs	r3, #0
 8016586:	2a05      	cmp	r2, #5
 8016588:	d8f2      	bhi.n	8016570 <__hexdig_fun+0xc>
 801658a:	3827      	subs	r0, #39	; 0x27
 801658c:	e7ef      	b.n	801656e <__hexdig_fun+0xa>

0801658e <__gethex>:
 801658e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016590:	b08d      	sub	sp, #52	; 0x34
 8016592:	9005      	str	r0, [sp, #20]
 8016594:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016596:	9109      	str	r1, [sp, #36]	; 0x24
 8016598:	9202      	str	r2, [sp, #8]
 801659a:	930a      	str	r3, [sp, #40]	; 0x28
 801659c:	f000 fadf 	bl	8016b5e <__localeconv_l>
 80165a0:	6803      	ldr	r3, [r0, #0]
 80165a2:	0018      	movs	r0, r3
 80165a4:	9307      	str	r3, [sp, #28]
 80165a6:	f7e9 fdb7 	bl	8000118 <strlen>
 80165aa:	2202      	movs	r2, #2
 80165ac:	9b07      	ldr	r3, [sp, #28]
 80165ae:	4252      	negs	r2, r2
 80165b0:	181b      	adds	r3, r3, r0
 80165b2:	3b01      	subs	r3, #1
 80165b4:	781b      	ldrb	r3, [r3, #0]
 80165b6:	9004      	str	r0, [sp, #16]
 80165b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80165ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165bc:	6819      	ldr	r1, [r3, #0]
 80165be:	1c8b      	adds	r3, r1, #2
 80165c0:	1a52      	subs	r2, r2, r1
 80165c2:	18d1      	adds	r1, r2, r3
 80165c4:	9301      	str	r3, [sp, #4]
 80165c6:	9108      	str	r1, [sp, #32]
 80165c8:	9901      	ldr	r1, [sp, #4]
 80165ca:	3301      	adds	r3, #1
 80165cc:	7808      	ldrb	r0, [r1, #0]
 80165ce:	2830      	cmp	r0, #48	; 0x30
 80165d0:	d0f7      	beq.n	80165c2 <__gethex+0x34>
 80165d2:	f7ff ffc7 	bl	8016564 <__hexdig_fun>
 80165d6:	1e07      	subs	r7, r0, #0
 80165d8:	d000      	beq.n	80165dc <__gethex+0x4e>
 80165da:	e06f      	b.n	80166bc <__gethex+0x12e>
 80165dc:	9a04      	ldr	r2, [sp, #16]
 80165de:	9907      	ldr	r1, [sp, #28]
 80165e0:	9801      	ldr	r0, [sp, #4]
 80165e2:	f7fc fe4b 	bl	801327c <strncmp>
 80165e6:	2800      	cmp	r0, #0
 80165e8:	d000      	beq.n	80165ec <__gethex+0x5e>
 80165ea:	e06d      	b.n	80166c8 <__gethex+0x13a>
 80165ec:	9b01      	ldr	r3, [sp, #4]
 80165ee:	9a04      	ldr	r2, [sp, #16]
 80165f0:	189c      	adds	r4, r3, r2
 80165f2:	7820      	ldrb	r0, [r4, #0]
 80165f4:	f7ff ffb6 	bl	8016564 <__hexdig_fun>
 80165f8:	2800      	cmp	r0, #0
 80165fa:	d069      	beq.n	80166d0 <__gethex+0x142>
 80165fc:	9401      	str	r4, [sp, #4]
 80165fe:	9b01      	ldr	r3, [sp, #4]
 8016600:	7818      	ldrb	r0, [r3, #0]
 8016602:	2830      	cmp	r0, #48	; 0x30
 8016604:	d009      	beq.n	801661a <__gethex+0x8c>
 8016606:	f7ff ffad 	bl	8016564 <__hexdig_fun>
 801660a:	4243      	negs	r3, r0
 801660c:	4143      	adcs	r3, r0
 801660e:	9303      	str	r3, [sp, #12]
 8016610:	2301      	movs	r3, #1
 8016612:	0026      	movs	r6, r4
 8016614:	9308      	str	r3, [sp, #32]
 8016616:	9c01      	ldr	r4, [sp, #4]
 8016618:	e004      	b.n	8016624 <__gethex+0x96>
 801661a:	9b01      	ldr	r3, [sp, #4]
 801661c:	3301      	adds	r3, #1
 801661e:	9301      	str	r3, [sp, #4]
 8016620:	e7ed      	b.n	80165fe <__gethex+0x70>
 8016622:	3401      	adds	r4, #1
 8016624:	7820      	ldrb	r0, [r4, #0]
 8016626:	f7ff ff9d 	bl	8016564 <__hexdig_fun>
 801662a:	2800      	cmp	r0, #0
 801662c:	d1f9      	bne.n	8016622 <__gethex+0x94>
 801662e:	9a04      	ldr	r2, [sp, #16]
 8016630:	9907      	ldr	r1, [sp, #28]
 8016632:	0020      	movs	r0, r4
 8016634:	f7fc fe22 	bl	801327c <strncmp>
 8016638:	2800      	cmp	r0, #0
 801663a:	d109      	bne.n	8016650 <__gethex+0xc2>
 801663c:	2e00      	cmp	r6, #0
 801663e:	d10a      	bne.n	8016656 <__gethex+0xc8>
 8016640:	9b04      	ldr	r3, [sp, #16]
 8016642:	18e4      	adds	r4, r4, r3
 8016644:	0026      	movs	r6, r4
 8016646:	7820      	ldrb	r0, [r4, #0]
 8016648:	f7ff ff8c 	bl	8016564 <__hexdig_fun>
 801664c:	2800      	cmp	r0, #0
 801664e:	d139      	bne.n	80166c4 <__gethex+0x136>
 8016650:	2700      	movs	r7, #0
 8016652:	42be      	cmp	r6, r7
 8016654:	d001      	beq.n	801665a <__gethex+0xcc>
 8016656:	1b37      	subs	r7, r6, r4
 8016658:	00bf      	lsls	r7, r7, #2
 801665a:	7823      	ldrb	r3, [r4, #0]
 801665c:	2b50      	cmp	r3, #80	; 0x50
 801665e:	d001      	beq.n	8016664 <__gethex+0xd6>
 8016660:	2b70      	cmp	r3, #112	; 0x70
 8016662:	d142      	bne.n	80166ea <__gethex+0x15c>
 8016664:	7863      	ldrb	r3, [r4, #1]
 8016666:	2b2b      	cmp	r3, #43	; 0x2b
 8016668:	d034      	beq.n	80166d4 <__gethex+0x146>
 801666a:	2b2d      	cmp	r3, #45	; 0x2d
 801666c:	d036      	beq.n	80166dc <__gethex+0x14e>
 801666e:	2300      	movs	r3, #0
 8016670:	1c66      	adds	r6, r4, #1
 8016672:	9306      	str	r3, [sp, #24]
 8016674:	7830      	ldrb	r0, [r6, #0]
 8016676:	f7ff ff75 	bl	8016564 <__hexdig_fun>
 801667a:	1e43      	subs	r3, r0, #1
 801667c:	b2db      	uxtb	r3, r3
 801667e:	2b18      	cmp	r3, #24
 8016680:	d833      	bhi.n	80166ea <__gethex+0x15c>
 8016682:	3810      	subs	r0, #16
 8016684:	0005      	movs	r5, r0
 8016686:	3601      	adds	r6, #1
 8016688:	7830      	ldrb	r0, [r6, #0]
 801668a:	f7ff ff6b 	bl	8016564 <__hexdig_fun>
 801668e:	1e43      	subs	r3, r0, #1
 8016690:	b2db      	uxtb	r3, r3
 8016692:	2b18      	cmp	r3, #24
 8016694:	d924      	bls.n	80166e0 <__gethex+0x152>
 8016696:	9b06      	ldr	r3, [sp, #24]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d000      	beq.n	801669e <__gethex+0x110>
 801669c:	426d      	negs	r5, r5
 801669e:	197f      	adds	r7, r7, r5
 80166a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a2:	601e      	str	r6, [r3, #0]
 80166a4:	9b03      	ldr	r3, [sp, #12]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d021      	beq.n	80166ee <__gethex+0x160>
 80166aa:	9b08      	ldr	r3, [sp, #32]
 80166ac:	2606      	movs	r6, #6
 80166ae:	425a      	negs	r2, r3
 80166b0:	4153      	adcs	r3, r2
 80166b2:	425b      	negs	r3, r3
 80166b4:	401e      	ands	r6, r3
 80166b6:	0030      	movs	r0, r6
 80166b8:	b00d      	add	sp, #52	; 0x34
 80166ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166bc:	2300      	movs	r3, #0
 80166be:	9303      	str	r3, [sp, #12]
 80166c0:	001e      	movs	r6, r3
 80166c2:	e7a8      	b.n	8016616 <__gethex+0x88>
 80166c4:	3401      	adds	r4, #1
 80166c6:	e7be      	b.n	8016646 <__gethex+0xb8>
 80166c8:	9c01      	ldr	r4, [sp, #4]
 80166ca:	2301      	movs	r3, #1
 80166cc:	9303      	str	r3, [sp, #12]
 80166ce:	e7c4      	b.n	801665a <__gethex+0xcc>
 80166d0:	0007      	movs	r7, r0
 80166d2:	e7fa      	b.n	80166ca <__gethex+0x13c>
 80166d4:	2300      	movs	r3, #0
 80166d6:	9306      	str	r3, [sp, #24]
 80166d8:	1ca6      	adds	r6, r4, #2
 80166da:	e7cb      	b.n	8016674 <__gethex+0xe6>
 80166dc:	2301      	movs	r3, #1
 80166de:	e7fa      	b.n	80166d6 <__gethex+0x148>
 80166e0:	230a      	movs	r3, #10
 80166e2:	435d      	muls	r5, r3
 80166e4:	182d      	adds	r5, r5, r0
 80166e6:	3d10      	subs	r5, #16
 80166e8:	e7cd      	b.n	8016686 <__gethex+0xf8>
 80166ea:	0026      	movs	r6, r4
 80166ec:	e7d8      	b.n	80166a0 <__gethex+0x112>
 80166ee:	9b01      	ldr	r3, [sp, #4]
 80166f0:	9903      	ldr	r1, [sp, #12]
 80166f2:	1ae3      	subs	r3, r4, r3
 80166f4:	3b01      	subs	r3, #1
 80166f6:	2b07      	cmp	r3, #7
 80166f8:	dc47      	bgt.n	801678a <__gethex+0x1fc>
 80166fa:	9805      	ldr	r0, [sp, #20]
 80166fc:	f000 fa5e 	bl	8016bbc <_Balloc>
 8016700:	0003      	movs	r3, r0
 8016702:	3314      	adds	r3, #20
 8016704:	9303      	str	r3, [sp, #12]
 8016706:	9308      	str	r3, [sp, #32]
 8016708:	2300      	movs	r3, #0
 801670a:	0005      	movs	r5, r0
 801670c:	001e      	movs	r6, r3
 801670e:	9306      	str	r3, [sp, #24]
 8016710:	9b01      	ldr	r3, [sp, #4]
 8016712:	42a3      	cmp	r3, r4
 8016714:	d33c      	bcc.n	8016790 <__gethex+0x202>
 8016716:	9c08      	ldr	r4, [sp, #32]
 8016718:	9b03      	ldr	r3, [sp, #12]
 801671a:	c440      	stmia	r4!, {r6}
 801671c:	1ae4      	subs	r4, r4, r3
 801671e:	10a4      	asrs	r4, r4, #2
 8016720:	612c      	str	r4, [r5, #16]
 8016722:	0030      	movs	r0, r6
 8016724:	f000 faf8 	bl	8016d18 <__hi0bits>
 8016728:	9b02      	ldr	r3, [sp, #8]
 801672a:	0164      	lsls	r4, r4, #5
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	1a26      	subs	r6, r4, r0
 8016730:	9301      	str	r3, [sp, #4]
 8016732:	429e      	cmp	r6, r3
 8016734:	dd5f      	ble.n	80167f6 <__gethex+0x268>
 8016736:	1af6      	subs	r6, r6, r3
 8016738:	0031      	movs	r1, r6
 801673a:	0028      	movs	r0, r5
 801673c:	f000 fde3 	bl	8017306 <__any_on>
 8016740:	1e04      	subs	r4, r0, #0
 8016742:	d00f      	beq.n	8016764 <__gethex+0x1d6>
 8016744:	2401      	movs	r4, #1
 8016746:	211f      	movs	r1, #31
 8016748:	0020      	movs	r0, r4
 801674a:	1e73      	subs	r3, r6, #1
 801674c:	4019      	ands	r1, r3
 801674e:	4088      	lsls	r0, r1
 8016750:	0001      	movs	r1, r0
 8016752:	115a      	asrs	r2, r3, #5
 8016754:	9803      	ldr	r0, [sp, #12]
 8016756:	0092      	lsls	r2, r2, #2
 8016758:	5812      	ldr	r2, [r2, r0]
 801675a:	420a      	tst	r2, r1
 801675c:	d002      	beq.n	8016764 <__gethex+0x1d6>
 801675e:	42a3      	cmp	r3, r4
 8016760:	dc41      	bgt.n	80167e6 <__gethex+0x258>
 8016762:	2402      	movs	r4, #2
 8016764:	0031      	movs	r1, r6
 8016766:	0028      	movs	r0, r5
 8016768:	f7ff fec8 	bl	80164fc <rshift>
 801676c:	19bf      	adds	r7, r7, r6
 801676e:	9b02      	ldr	r3, [sp, #8]
 8016770:	689b      	ldr	r3, [r3, #8]
 8016772:	9304      	str	r3, [sp, #16]
 8016774:	42bb      	cmp	r3, r7
 8016776:	da4e      	bge.n	8016816 <__gethex+0x288>
 8016778:	0029      	movs	r1, r5
 801677a:	9805      	ldr	r0, [sp, #20]
 801677c:	f000 fa46 	bl	8016c0c <_Bfree>
 8016780:	2300      	movs	r3, #0
 8016782:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016784:	26a3      	movs	r6, #163	; 0xa3
 8016786:	6013      	str	r3, [r2, #0]
 8016788:	e795      	b.n	80166b6 <__gethex+0x128>
 801678a:	3101      	adds	r1, #1
 801678c:	105b      	asrs	r3, r3, #1
 801678e:	e7b2      	b.n	80166f6 <__gethex+0x168>
 8016790:	1e63      	subs	r3, r4, #1
 8016792:	9309      	str	r3, [sp, #36]	; 0x24
 8016794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	4293      	cmp	r3, r2
 801679a:	d015      	beq.n	80167c8 <__gethex+0x23a>
 801679c:	9b06      	ldr	r3, [sp, #24]
 801679e:	2b20      	cmp	r3, #32
 80167a0:	d105      	bne.n	80167ae <__gethex+0x220>
 80167a2:	9b08      	ldr	r3, [sp, #32]
 80167a4:	601e      	str	r6, [r3, #0]
 80167a6:	2600      	movs	r6, #0
 80167a8:	3304      	adds	r3, #4
 80167aa:	9308      	str	r3, [sp, #32]
 80167ac:	9606      	str	r6, [sp, #24]
 80167ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b0:	7818      	ldrb	r0, [r3, #0]
 80167b2:	f7ff fed7 	bl	8016564 <__hexdig_fun>
 80167b6:	230f      	movs	r3, #15
 80167b8:	4018      	ands	r0, r3
 80167ba:	9b06      	ldr	r3, [sp, #24]
 80167bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80167be:	4098      	lsls	r0, r3
 80167c0:	3304      	adds	r3, #4
 80167c2:	4306      	orrs	r6, r0
 80167c4:	9306      	str	r3, [sp, #24]
 80167c6:	e7a3      	b.n	8016710 <__gethex+0x182>
 80167c8:	2301      	movs	r3, #1
 80167ca:	9a04      	ldr	r2, [sp, #16]
 80167cc:	1a9c      	subs	r4, r3, r2
 80167ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167d0:	191c      	adds	r4, r3, r4
 80167d2:	9b01      	ldr	r3, [sp, #4]
 80167d4:	429c      	cmp	r4, r3
 80167d6:	d3e1      	bcc.n	801679c <__gethex+0x20e>
 80167d8:	9907      	ldr	r1, [sp, #28]
 80167da:	0020      	movs	r0, r4
 80167dc:	f7fc fd4e 	bl	801327c <strncmp>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d1db      	bne.n	801679c <__gethex+0x20e>
 80167e4:	e794      	b.n	8016710 <__gethex+0x182>
 80167e6:	1eb1      	subs	r1, r6, #2
 80167e8:	0028      	movs	r0, r5
 80167ea:	f000 fd8c 	bl	8017306 <__any_on>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d0b7      	beq.n	8016762 <__gethex+0x1d4>
 80167f2:	2403      	movs	r4, #3
 80167f4:	e7b6      	b.n	8016764 <__gethex+0x1d6>
 80167f6:	9b01      	ldr	r3, [sp, #4]
 80167f8:	2400      	movs	r4, #0
 80167fa:	429e      	cmp	r6, r3
 80167fc:	dab7      	bge.n	801676e <__gethex+0x1e0>
 80167fe:	1b9e      	subs	r6, r3, r6
 8016800:	0029      	movs	r1, r5
 8016802:	0032      	movs	r2, r6
 8016804:	9805      	ldr	r0, [sp, #20]
 8016806:	f000 fbab 	bl	8016f60 <__lshift>
 801680a:	0003      	movs	r3, r0
 801680c:	3314      	adds	r3, #20
 801680e:	0005      	movs	r5, r0
 8016810:	1bbf      	subs	r7, r7, r6
 8016812:	9303      	str	r3, [sp, #12]
 8016814:	e7ab      	b.n	801676e <__gethex+0x1e0>
 8016816:	9b02      	ldr	r3, [sp, #8]
 8016818:	685e      	ldr	r6, [r3, #4]
 801681a:	42be      	cmp	r6, r7
 801681c:	dd6b      	ble.n	80168f6 <__gethex+0x368>
 801681e:	9b01      	ldr	r3, [sp, #4]
 8016820:	1bf6      	subs	r6, r6, r7
 8016822:	42b3      	cmp	r3, r6
 8016824:	dc32      	bgt.n	801688c <__gethex+0x2fe>
 8016826:	9b02      	ldr	r3, [sp, #8]
 8016828:	68db      	ldr	r3, [r3, #12]
 801682a:	2b02      	cmp	r3, #2
 801682c:	d026      	beq.n	801687c <__gethex+0x2ee>
 801682e:	2b03      	cmp	r3, #3
 8016830:	d028      	beq.n	8016884 <__gethex+0x2f6>
 8016832:	2b01      	cmp	r3, #1
 8016834:	d119      	bne.n	801686a <__gethex+0x2dc>
 8016836:	9b01      	ldr	r3, [sp, #4]
 8016838:	42b3      	cmp	r3, r6
 801683a:	d116      	bne.n	801686a <__gethex+0x2dc>
 801683c:	2b01      	cmp	r3, #1
 801683e:	dc0d      	bgt.n	801685c <__gethex+0x2ce>
 8016840:	9b02      	ldr	r3, [sp, #8]
 8016842:	2662      	movs	r6, #98	; 0x62
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	9301      	str	r3, [sp, #4]
 8016848:	9a01      	ldr	r2, [sp, #4]
 801684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801684c:	601a      	str	r2, [r3, #0]
 801684e:	2301      	movs	r3, #1
 8016850:	9a03      	ldr	r2, [sp, #12]
 8016852:	612b      	str	r3, [r5, #16]
 8016854:	6013      	str	r3, [r2, #0]
 8016856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016858:	601d      	str	r5, [r3, #0]
 801685a:	e72c      	b.n	80166b6 <__gethex+0x128>
 801685c:	9901      	ldr	r1, [sp, #4]
 801685e:	0028      	movs	r0, r5
 8016860:	3901      	subs	r1, #1
 8016862:	f000 fd50 	bl	8017306 <__any_on>
 8016866:	2800      	cmp	r0, #0
 8016868:	d1ea      	bne.n	8016840 <__gethex+0x2b2>
 801686a:	0029      	movs	r1, r5
 801686c:	9805      	ldr	r0, [sp, #20]
 801686e:	f000 f9cd 	bl	8016c0c <_Bfree>
 8016872:	2300      	movs	r3, #0
 8016874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016876:	2650      	movs	r6, #80	; 0x50
 8016878:	6013      	str	r3, [r2, #0]
 801687a:	e71c      	b.n	80166b6 <__gethex+0x128>
 801687c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801687e:	2b00      	cmp	r3, #0
 8016880:	d0de      	beq.n	8016840 <__gethex+0x2b2>
 8016882:	e7f2      	b.n	801686a <__gethex+0x2dc>
 8016884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016886:	2b00      	cmp	r3, #0
 8016888:	d1da      	bne.n	8016840 <__gethex+0x2b2>
 801688a:	e7ee      	b.n	801686a <__gethex+0x2dc>
 801688c:	1e77      	subs	r7, r6, #1
 801688e:	2c00      	cmp	r4, #0
 8016890:	d12f      	bne.n	80168f2 <__gethex+0x364>
 8016892:	2f00      	cmp	r7, #0
 8016894:	d004      	beq.n	80168a0 <__gethex+0x312>
 8016896:	0039      	movs	r1, r7
 8016898:	0028      	movs	r0, r5
 801689a:	f000 fd34 	bl	8017306 <__any_on>
 801689e:	0004      	movs	r4, r0
 80168a0:	231f      	movs	r3, #31
 80168a2:	117a      	asrs	r2, r7, #5
 80168a4:	401f      	ands	r7, r3
 80168a6:	3b1e      	subs	r3, #30
 80168a8:	40bb      	lsls	r3, r7
 80168aa:	9903      	ldr	r1, [sp, #12]
 80168ac:	0092      	lsls	r2, r2, #2
 80168ae:	5852      	ldr	r2, [r2, r1]
 80168b0:	421a      	tst	r2, r3
 80168b2:	d001      	beq.n	80168b8 <__gethex+0x32a>
 80168b4:	2302      	movs	r3, #2
 80168b6:	431c      	orrs	r4, r3
 80168b8:	9b01      	ldr	r3, [sp, #4]
 80168ba:	0031      	movs	r1, r6
 80168bc:	1b9b      	subs	r3, r3, r6
 80168be:	2602      	movs	r6, #2
 80168c0:	0028      	movs	r0, r5
 80168c2:	9301      	str	r3, [sp, #4]
 80168c4:	f7ff fe1a 	bl	80164fc <rshift>
 80168c8:	9b02      	ldr	r3, [sp, #8]
 80168ca:	685f      	ldr	r7, [r3, #4]
 80168cc:	2c00      	cmp	r4, #0
 80168ce:	d040      	beq.n	8016952 <__gethex+0x3c4>
 80168d0:	9b02      	ldr	r3, [sp, #8]
 80168d2:	68db      	ldr	r3, [r3, #12]
 80168d4:	2b02      	cmp	r3, #2
 80168d6:	d010      	beq.n	80168fa <__gethex+0x36c>
 80168d8:	2b03      	cmp	r3, #3
 80168da:	d012      	beq.n	8016902 <__gethex+0x374>
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d106      	bne.n	80168ee <__gethex+0x360>
 80168e0:	07a2      	lsls	r2, r4, #30
 80168e2:	d504      	bpl.n	80168ee <__gethex+0x360>
 80168e4:	9a03      	ldr	r2, [sp, #12]
 80168e6:	6812      	ldr	r2, [r2, #0]
 80168e8:	4314      	orrs	r4, r2
 80168ea:	421c      	tst	r4, r3
 80168ec:	d10c      	bne.n	8016908 <__gethex+0x37a>
 80168ee:	2310      	movs	r3, #16
 80168f0:	e02e      	b.n	8016950 <__gethex+0x3c2>
 80168f2:	2401      	movs	r4, #1
 80168f4:	e7d4      	b.n	80168a0 <__gethex+0x312>
 80168f6:	2601      	movs	r6, #1
 80168f8:	e7e8      	b.n	80168cc <__gethex+0x33e>
 80168fa:	2301      	movs	r3, #1
 80168fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80168fe:	1a9b      	subs	r3, r3, r2
 8016900:	9313      	str	r3, [sp, #76]	; 0x4c
 8016902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016904:	2b00      	cmp	r3, #0
 8016906:	d0f2      	beq.n	80168ee <__gethex+0x360>
 8016908:	692c      	ldr	r4, [r5, #16]
 801690a:	00a3      	lsls	r3, r4, #2
 801690c:	9304      	str	r3, [sp, #16]
 801690e:	002b      	movs	r3, r5
 8016910:	00a2      	lsls	r2, r4, #2
 8016912:	3314      	adds	r3, #20
 8016914:	1899      	adds	r1, r3, r2
 8016916:	2200      	movs	r2, #0
 8016918:	4694      	mov	ip, r2
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	1c50      	adds	r0, r2, #1
 801691e:	d01d      	beq.n	801695c <__gethex+0x3ce>
 8016920:	3201      	adds	r2, #1
 8016922:	601a      	str	r2, [r3, #0]
 8016924:	002b      	movs	r3, r5
 8016926:	3314      	adds	r3, #20
 8016928:	2e02      	cmp	r6, #2
 801692a:	d13a      	bne.n	80169a2 <__gethex+0x414>
 801692c:	9a02      	ldr	r2, [sp, #8]
 801692e:	9901      	ldr	r1, [sp, #4]
 8016930:	6812      	ldr	r2, [r2, #0]
 8016932:	3a01      	subs	r2, #1
 8016934:	428a      	cmp	r2, r1
 8016936:	d10a      	bne.n	801694e <__gethex+0x3c0>
 8016938:	114a      	asrs	r2, r1, #5
 801693a:	211f      	movs	r1, #31
 801693c:	9801      	ldr	r0, [sp, #4]
 801693e:	0092      	lsls	r2, r2, #2
 8016940:	4001      	ands	r1, r0
 8016942:	2001      	movs	r0, #1
 8016944:	0004      	movs	r4, r0
 8016946:	408c      	lsls	r4, r1
 8016948:	58d3      	ldr	r3, [r2, r3]
 801694a:	4223      	tst	r3, r4
 801694c:	d148      	bne.n	80169e0 <__gethex+0x452>
 801694e:	2320      	movs	r3, #32
 8016950:	431e      	orrs	r6, r3
 8016952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016954:	601d      	str	r5, [r3, #0]
 8016956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016958:	601f      	str	r7, [r3, #0]
 801695a:	e6ac      	b.n	80166b6 <__gethex+0x128>
 801695c:	4662      	mov	r2, ip
 801695e:	c304      	stmia	r3!, {r2}
 8016960:	4299      	cmp	r1, r3
 8016962:	d8da      	bhi.n	801691a <__gethex+0x38c>
 8016964:	68ab      	ldr	r3, [r5, #8]
 8016966:	429c      	cmp	r4, r3
 8016968:	db12      	blt.n	8016990 <__gethex+0x402>
 801696a:	686b      	ldr	r3, [r5, #4]
 801696c:	9805      	ldr	r0, [sp, #20]
 801696e:	1c59      	adds	r1, r3, #1
 8016970:	f000 f924 	bl	8016bbc <_Balloc>
 8016974:	0029      	movs	r1, r5
 8016976:	692b      	ldr	r3, [r5, #16]
 8016978:	9003      	str	r0, [sp, #12]
 801697a:	1c9a      	adds	r2, r3, #2
 801697c:	0092      	lsls	r2, r2, #2
 801697e:	310c      	adds	r1, #12
 8016980:	300c      	adds	r0, #12
 8016982:	f7fc fa34 	bl	8012dee <memcpy>
 8016986:	0029      	movs	r1, r5
 8016988:	9805      	ldr	r0, [sp, #20]
 801698a:	f000 f93f 	bl	8016c0c <_Bfree>
 801698e:	9d03      	ldr	r5, [sp, #12]
 8016990:	692b      	ldr	r3, [r5, #16]
 8016992:	1c5a      	adds	r2, r3, #1
 8016994:	612a      	str	r2, [r5, #16]
 8016996:	2201      	movs	r2, #1
 8016998:	3304      	adds	r3, #4
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	18eb      	adds	r3, r5, r3
 801699e:	605a      	str	r2, [r3, #4]
 80169a0:	e7c0      	b.n	8016924 <__gethex+0x396>
 80169a2:	692a      	ldr	r2, [r5, #16]
 80169a4:	42a2      	cmp	r2, r4
 80169a6:	dd0a      	ble.n	80169be <__gethex+0x430>
 80169a8:	2101      	movs	r1, #1
 80169aa:	0028      	movs	r0, r5
 80169ac:	f7ff fda6 	bl	80164fc <rshift>
 80169b0:	9b02      	ldr	r3, [sp, #8]
 80169b2:	3701      	adds	r7, #1
 80169b4:	689b      	ldr	r3, [r3, #8]
 80169b6:	2601      	movs	r6, #1
 80169b8:	42bb      	cmp	r3, r7
 80169ba:	dac8      	bge.n	801694e <__gethex+0x3c0>
 80169bc:	e6dc      	b.n	8016778 <__gethex+0x1ea>
 80169be:	241f      	movs	r4, #31
 80169c0:	9a01      	ldr	r2, [sp, #4]
 80169c2:	2601      	movs	r6, #1
 80169c4:	4022      	ands	r2, r4
 80169c6:	1e14      	subs	r4, r2, #0
 80169c8:	d0c1      	beq.n	801694e <__gethex+0x3c0>
 80169ca:	9a04      	ldr	r2, [sp, #16]
 80169cc:	189b      	adds	r3, r3, r2
 80169ce:	3b04      	subs	r3, #4
 80169d0:	6818      	ldr	r0, [r3, #0]
 80169d2:	f000 f9a1 	bl	8016d18 <__hi0bits>
 80169d6:	2120      	movs	r1, #32
 80169d8:	1b0c      	subs	r4, r1, r4
 80169da:	42a0      	cmp	r0, r4
 80169dc:	dbe4      	blt.n	80169a8 <__gethex+0x41a>
 80169de:	e7b6      	b.n	801694e <__gethex+0x3c0>
 80169e0:	0006      	movs	r6, r0
 80169e2:	e7b4      	b.n	801694e <__gethex+0x3c0>

080169e4 <L_shift>:
 80169e4:	2308      	movs	r3, #8
 80169e6:	b570      	push	{r4, r5, r6, lr}
 80169e8:	2520      	movs	r5, #32
 80169ea:	1a9a      	subs	r2, r3, r2
 80169ec:	0092      	lsls	r2, r2, #2
 80169ee:	1aad      	subs	r5, r5, r2
 80169f0:	6843      	ldr	r3, [r0, #4]
 80169f2:	6806      	ldr	r6, [r0, #0]
 80169f4:	001c      	movs	r4, r3
 80169f6:	40ac      	lsls	r4, r5
 80169f8:	40d3      	lsrs	r3, r2
 80169fa:	4334      	orrs	r4, r6
 80169fc:	6004      	str	r4, [r0, #0]
 80169fe:	6043      	str	r3, [r0, #4]
 8016a00:	3004      	adds	r0, #4
 8016a02:	4288      	cmp	r0, r1
 8016a04:	d3f4      	bcc.n	80169f0 <L_shift+0xc>
 8016a06:	bd70      	pop	{r4, r5, r6, pc}

08016a08 <__match>:
 8016a08:	b530      	push	{r4, r5, lr}
 8016a0a:	6803      	ldr	r3, [r0, #0]
 8016a0c:	780c      	ldrb	r4, [r1, #0]
 8016a0e:	3301      	adds	r3, #1
 8016a10:	2c00      	cmp	r4, #0
 8016a12:	d102      	bne.n	8016a1a <__match+0x12>
 8016a14:	6003      	str	r3, [r0, #0]
 8016a16:	2001      	movs	r0, #1
 8016a18:	bd30      	pop	{r4, r5, pc}
 8016a1a:	781a      	ldrb	r2, [r3, #0]
 8016a1c:	0015      	movs	r5, r2
 8016a1e:	3d41      	subs	r5, #65	; 0x41
 8016a20:	2d19      	cmp	r5, #25
 8016a22:	d800      	bhi.n	8016a26 <__match+0x1e>
 8016a24:	3220      	adds	r2, #32
 8016a26:	3101      	adds	r1, #1
 8016a28:	42a2      	cmp	r2, r4
 8016a2a:	d0ef      	beq.n	8016a0c <__match+0x4>
 8016a2c:	2000      	movs	r0, #0
 8016a2e:	e7f3      	b.n	8016a18 <__match+0x10>

08016a30 <__hexnan>:
 8016a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a32:	b08b      	sub	sp, #44	; 0x2c
 8016a34:	9201      	str	r2, [sp, #4]
 8016a36:	680a      	ldr	r2, [r1, #0]
 8016a38:	9901      	ldr	r1, [sp, #4]
 8016a3a:	1153      	asrs	r3, r2, #5
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	18cb      	adds	r3, r1, r3
 8016a40:	9304      	str	r3, [sp, #16]
 8016a42:	231f      	movs	r3, #31
 8016a44:	401a      	ands	r2, r3
 8016a46:	9008      	str	r0, [sp, #32]
 8016a48:	9206      	str	r2, [sp, #24]
 8016a4a:	d002      	beq.n	8016a52 <__hexnan+0x22>
 8016a4c:	9b04      	ldr	r3, [sp, #16]
 8016a4e:	3304      	adds	r3, #4
 8016a50:	9304      	str	r3, [sp, #16]
 8016a52:	9b04      	ldr	r3, [sp, #16]
 8016a54:	2500      	movs	r5, #0
 8016a56:	1f1e      	subs	r6, r3, #4
 8016a58:	0037      	movs	r7, r6
 8016a5a:	0034      	movs	r4, r6
 8016a5c:	9b08      	ldr	r3, [sp, #32]
 8016a5e:	6035      	str	r5, [r6, #0]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	9507      	str	r5, [sp, #28]
 8016a64:	9305      	str	r3, [sp, #20]
 8016a66:	9502      	str	r5, [sp, #8]
 8016a68:	9b05      	ldr	r3, [sp, #20]
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a6e:	9b05      	ldr	r3, [sp, #20]
 8016a70:	785b      	ldrb	r3, [r3, #1]
 8016a72:	9303      	str	r3, [sp, #12]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d028      	beq.n	8016aca <__hexnan+0x9a>
 8016a78:	9803      	ldr	r0, [sp, #12]
 8016a7a:	f7ff fd73 	bl	8016564 <__hexdig_fun>
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	d145      	bne.n	8016b0e <__hexnan+0xde>
 8016a82:	9b03      	ldr	r3, [sp, #12]
 8016a84:	2b20      	cmp	r3, #32
 8016a86:	d819      	bhi.n	8016abc <__hexnan+0x8c>
 8016a88:	9b02      	ldr	r3, [sp, #8]
 8016a8a:	9a07      	ldr	r2, [sp, #28]
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	dd12      	ble.n	8016ab6 <__hexnan+0x86>
 8016a90:	42bc      	cmp	r4, r7
 8016a92:	d206      	bcs.n	8016aa2 <__hexnan+0x72>
 8016a94:	2d07      	cmp	r5, #7
 8016a96:	dc04      	bgt.n	8016aa2 <__hexnan+0x72>
 8016a98:	002a      	movs	r2, r5
 8016a9a:	0039      	movs	r1, r7
 8016a9c:	0020      	movs	r0, r4
 8016a9e:	f7ff ffa1 	bl	80169e4 <L_shift>
 8016aa2:	9b01      	ldr	r3, [sp, #4]
 8016aa4:	2508      	movs	r5, #8
 8016aa6:	429c      	cmp	r4, r3
 8016aa8:	d905      	bls.n	8016ab6 <__hexnan+0x86>
 8016aaa:	1f27      	subs	r7, r4, #4
 8016aac:	2500      	movs	r5, #0
 8016aae:	003c      	movs	r4, r7
 8016ab0:	9b02      	ldr	r3, [sp, #8]
 8016ab2:	603d      	str	r5, [r7, #0]
 8016ab4:	9307      	str	r3, [sp, #28]
 8016ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ab8:	9305      	str	r3, [sp, #20]
 8016aba:	e7d5      	b.n	8016a68 <__hexnan+0x38>
 8016abc:	9b03      	ldr	r3, [sp, #12]
 8016abe:	2b29      	cmp	r3, #41	; 0x29
 8016ac0:	d14a      	bne.n	8016b58 <__hexnan+0x128>
 8016ac2:	9b05      	ldr	r3, [sp, #20]
 8016ac4:	9a08      	ldr	r2, [sp, #32]
 8016ac6:	3302      	adds	r3, #2
 8016ac8:	6013      	str	r3, [r2, #0]
 8016aca:	9b02      	ldr	r3, [sp, #8]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d043      	beq.n	8016b58 <__hexnan+0x128>
 8016ad0:	42bc      	cmp	r4, r7
 8016ad2:	d206      	bcs.n	8016ae2 <__hexnan+0xb2>
 8016ad4:	2d07      	cmp	r5, #7
 8016ad6:	dc04      	bgt.n	8016ae2 <__hexnan+0xb2>
 8016ad8:	002a      	movs	r2, r5
 8016ada:	0039      	movs	r1, r7
 8016adc:	0020      	movs	r0, r4
 8016ade:	f7ff ff81 	bl	80169e4 <L_shift>
 8016ae2:	9b01      	ldr	r3, [sp, #4]
 8016ae4:	429c      	cmp	r4, r3
 8016ae6:	d926      	bls.n	8016b36 <__hexnan+0x106>
 8016ae8:	cc04      	ldmia	r4!, {r2}
 8016aea:	601a      	str	r2, [r3, #0]
 8016aec:	3304      	adds	r3, #4
 8016aee:	42a6      	cmp	r6, r4
 8016af0:	d2fa      	bcs.n	8016ae8 <__hexnan+0xb8>
 8016af2:	2200      	movs	r2, #0
 8016af4:	c304      	stmia	r3!, {r2}
 8016af6:	429e      	cmp	r6, r3
 8016af8:	d2fc      	bcs.n	8016af4 <__hexnan+0xc4>
 8016afa:	6833      	ldr	r3, [r6, #0]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d104      	bne.n	8016b0a <__hexnan+0xda>
 8016b00:	9b01      	ldr	r3, [sp, #4]
 8016b02:	429e      	cmp	r6, r3
 8016b04:	d126      	bne.n	8016b54 <__hexnan+0x124>
 8016b06:	2301      	movs	r3, #1
 8016b08:	6033      	str	r3, [r6, #0]
 8016b0a:	2005      	movs	r0, #5
 8016b0c:	e025      	b.n	8016b5a <__hexnan+0x12a>
 8016b0e:	9b02      	ldr	r3, [sp, #8]
 8016b10:	3501      	adds	r5, #1
 8016b12:	3301      	adds	r3, #1
 8016b14:	9302      	str	r3, [sp, #8]
 8016b16:	2d08      	cmp	r5, #8
 8016b18:	dd06      	ble.n	8016b28 <__hexnan+0xf8>
 8016b1a:	9b01      	ldr	r3, [sp, #4]
 8016b1c:	429c      	cmp	r4, r3
 8016b1e:	d9ca      	bls.n	8016ab6 <__hexnan+0x86>
 8016b20:	2300      	movs	r3, #0
 8016b22:	2501      	movs	r5, #1
 8016b24:	3c04      	subs	r4, #4
 8016b26:	6023      	str	r3, [r4, #0]
 8016b28:	220f      	movs	r2, #15
 8016b2a:	6823      	ldr	r3, [r4, #0]
 8016b2c:	4010      	ands	r0, r2
 8016b2e:	011b      	lsls	r3, r3, #4
 8016b30:	4318      	orrs	r0, r3
 8016b32:	6020      	str	r0, [r4, #0]
 8016b34:	e7bf      	b.n	8016ab6 <__hexnan+0x86>
 8016b36:	9b06      	ldr	r3, [sp, #24]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d0de      	beq.n	8016afa <__hexnan+0xca>
 8016b3c:	2120      	movs	r1, #32
 8016b3e:	9a06      	ldr	r2, [sp, #24]
 8016b40:	9b04      	ldr	r3, [sp, #16]
 8016b42:	1a89      	subs	r1, r1, r2
 8016b44:	2201      	movs	r2, #1
 8016b46:	4252      	negs	r2, r2
 8016b48:	40ca      	lsrs	r2, r1
 8016b4a:	3b04      	subs	r3, #4
 8016b4c:	6819      	ldr	r1, [r3, #0]
 8016b4e:	400a      	ands	r2, r1
 8016b50:	601a      	str	r2, [r3, #0]
 8016b52:	e7d2      	b.n	8016afa <__hexnan+0xca>
 8016b54:	3e04      	subs	r6, #4
 8016b56:	e7d0      	b.n	8016afa <__hexnan+0xca>
 8016b58:	2004      	movs	r0, #4
 8016b5a:	b00b      	add	sp, #44	; 0x2c
 8016b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b5e <__localeconv_l>:
 8016b5e:	30f0      	adds	r0, #240	; 0xf0
 8016b60:	4770      	bx	lr
	...

08016b64 <_localeconv_r>:
 8016b64:	4b03      	ldr	r3, [pc, #12]	; (8016b74 <_localeconv_r+0x10>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	d100      	bne.n	8016b70 <_localeconv_r+0xc>
 8016b6e:	4802      	ldr	r0, [pc, #8]	; (8016b78 <_localeconv_r+0x14>)
 8016b70:	30f0      	adds	r0, #240	; 0xf0
 8016b72:	4770      	bx	lr
 8016b74:	20000064 	.word	0x20000064
 8016b78:	20000490 	.word	0x20000490

08016b7c <__retarget_lock_acquire_recursive>:
 8016b7c:	4770      	bx	lr

08016b7e <__retarget_lock_release_recursive>:
 8016b7e:	4770      	bx	lr

08016b80 <memchr>:
 8016b80:	b2c9      	uxtb	r1, r1
 8016b82:	1882      	adds	r2, r0, r2
 8016b84:	4290      	cmp	r0, r2
 8016b86:	d101      	bne.n	8016b8c <memchr+0xc>
 8016b88:	2000      	movs	r0, #0
 8016b8a:	4770      	bx	lr
 8016b8c:	7803      	ldrb	r3, [r0, #0]
 8016b8e:	428b      	cmp	r3, r1
 8016b90:	d0fb      	beq.n	8016b8a <memchr+0xa>
 8016b92:	3001      	adds	r0, #1
 8016b94:	e7f6      	b.n	8016b84 <memchr+0x4>

08016b96 <memmove>:
 8016b96:	b510      	push	{r4, lr}
 8016b98:	4288      	cmp	r0, r1
 8016b9a:	d902      	bls.n	8016ba2 <memmove+0xc>
 8016b9c:	188b      	adds	r3, r1, r2
 8016b9e:	4298      	cmp	r0, r3
 8016ba0:	d303      	bcc.n	8016baa <memmove+0x14>
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	e007      	b.n	8016bb6 <memmove+0x20>
 8016ba6:	5c8b      	ldrb	r3, [r1, r2]
 8016ba8:	5483      	strb	r3, [r0, r2]
 8016baa:	3a01      	subs	r2, #1
 8016bac:	d2fb      	bcs.n	8016ba6 <memmove+0x10>
 8016bae:	bd10      	pop	{r4, pc}
 8016bb0:	5ccc      	ldrb	r4, [r1, r3]
 8016bb2:	54c4      	strb	r4, [r0, r3]
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d1fa      	bne.n	8016bb0 <memmove+0x1a>
 8016bba:	e7f8      	b.n	8016bae <memmove+0x18>

08016bbc <_Balloc>:
 8016bbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016bbe:	b570      	push	{r4, r5, r6, lr}
 8016bc0:	0004      	movs	r4, r0
 8016bc2:	000d      	movs	r5, r1
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d012      	beq.n	8016bee <_Balloc+0x32>
 8016bc8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016bca:	00ab      	lsls	r3, r5, #2
 8016bcc:	18d3      	adds	r3, r2, r3
 8016bce:	6818      	ldr	r0, [r3, #0]
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d115      	bne.n	8016c00 <_Balloc+0x44>
 8016bd4:	2101      	movs	r1, #1
 8016bd6:	000e      	movs	r6, r1
 8016bd8:	40ae      	lsls	r6, r5
 8016bda:	1d72      	adds	r2, r6, #5
 8016bdc:	0092      	lsls	r2, r2, #2
 8016bde:	0020      	movs	r0, r4
 8016be0:	f000 fcbe 	bl	8017560 <_calloc_r>
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d009      	beq.n	8016bfc <_Balloc+0x40>
 8016be8:	6045      	str	r5, [r0, #4]
 8016bea:	6086      	str	r6, [r0, #8]
 8016bec:	e00a      	b.n	8016c04 <_Balloc+0x48>
 8016bee:	2221      	movs	r2, #33	; 0x21
 8016bf0:	2104      	movs	r1, #4
 8016bf2:	f000 fcb5 	bl	8017560 <_calloc_r>
 8016bf6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	d1e5      	bne.n	8016bc8 <_Balloc+0xc>
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	bd70      	pop	{r4, r5, r6, pc}
 8016c00:	6802      	ldr	r2, [r0, #0]
 8016c02:	601a      	str	r2, [r3, #0]
 8016c04:	2300      	movs	r3, #0
 8016c06:	6103      	str	r3, [r0, #16]
 8016c08:	60c3      	str	r3, [r0, #12]
 8016c0a:	e7f8      	b.n	8016bfe <_Balloc+0x42>

08016c0c <_Bfree>:
 8016c0c:	2900      	cmp	r1, #0
 8016c0e:	d006      	beq.n	8016c1e <_Bfree+0x12>
 8016c10:	684b      	ldr	r3, [r1, #4]
 8016c12:	009a      	lsls	r2, r3, #2
 8016c14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016c16:	189b      	adds	r3, r3, r2
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	600a      	str	r2, [r1, #0]
 8016c1c:	6019      	str	r1, [r3, #0]
 8016c1e:	4770      	bx	lr

08016c20 <__multadd>:
 8016c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c22:	001e      	movs	r6, r3
 8016c24:	2314      	movs	r3, #20
 8016c26:	469c      	mov	ip, r3
 8016c28:	0007      	movs	r7, r0
 8016c2a:	000c      	movs	r4, r1
 8016c2c:	2000      	movs	r0, #0
 8016c2e:	690d      	ldr	r5, [r1, #16]
 8016c30:	448c      	add	ip, r1
 8016c32:	4663      	mov	r3, ip
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	3001      	adds	r0, #1
 8016c38:	b299      	uxth	r1, r3
 8016c3a:	4663      	mov	r3, ip
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4351      	muls	r1, r2
 8016c40:	0c1b      	lsrs	r3, r3, #16
 8016c42:	4353      	muls	r3, r2
 8016c44:	1989      	adds	r1, r1, r6
 8016c46:	0c0e      	lsrs	r6, r1, #16
 8016c48:	199b      	adds	r3, r3, r6
 8016c4a:	b289      	uxth	r1, r1
 8016c4c:	0c1e      	lsrs	r6, r3, #16
 8016c4e:	041b      	lsls	r3, r3, #16
 8016c50:	185b      	adds	r3, r3, r1
 8016c52:	4661      	mov	r1, ip
 8016c54:	c108      	stmia	r1!, {r3}
 8016c56:	468c      	mov	ip, r1
 8016c58:	4285      	cmp	r5, r0
 8016c5a:	dcea      	bgt.n	8016c32 <__multadd+0x12>
 8016c5c:	2e00      	cmp	r6, #0
 8016c5e:	d01b      	beq.n	8016c98 <__multadd+0x78>
 8016c60:	68a3      	ldr	r3, [r4, #8]
 8016c62:	42ab      	cmp	r3, r5
 8016c64:	dc12      	bgt.n	8016c8c <__multadd+0x6c>
 8016c66:	6863      	ldr	r3, [r4, #4]
 8016c68:	0038      	movs	r0, r7
 8016c6a:	1c59      	adds	r1, r3, #1
 8016c6c:	f7ff ffa6 	bl	8016bbc <_Balloc>
 8016c70:	0021      	movs	r1, r4
 8016c72:	6923      	ldr	r3, [r4, #16]
 8016c74:	9001      	str	r0, [sp, #4]
 8016c76:	1c9a      	adds	r2, r3, #2
 8016c78:	0092      	lsls	r2, r2, #2
 8016c7a:	310c      	adds	r1, #12
 8016c7c:	300c      	adds	r0, #12
 8016c7e:	f7fc f8b6 	bl	8012dee <memcpy>
 8016c82:	0021      	movs	r1, r4
 8016c84:	0038      	movs	r0, r7
 8016c86:	f7ff ffc1 	bl	8016c0c <_Bfree>
 8016c8a:	9c01      	ldr	r4, [sp, #4]
 8016c8c:	1d2b      	adds	r3, r5, #4
 8016c8e:	009b      	lsls	r3, r3, #2
 8016c90:	18e3      	adds	r3, r4, r3
 8016c92:	3501      	adds	r5, #1
 8016c94:	605e      	str	r6, [r3, #4]
 8016c96:	6125      	str	r5, [r4, #16]
 8016c98:	0020      	movs	r0, r4
 8016c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016c9c <__s2b>:
 8016c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c9e:	0006      	movs	r6, r0
 8016ca0:	0018      	movs	r0, r3
 8016ca2:	000c      	movs	r4, r1
 8016ca4:	3008      	adds	r0, #8
 8016ca6:	2109      	movs	r1, #9
 8016ca8:	9301      	str	r3, [sp, #4]
 8016caa:	0015      	movs	r5, r2
 8016cac:	f7e9 fada 	bl	8000264 <__divsi3>
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	2100      	movs	r1, #0
 8016cb4:	4283      	cmp	r3, r0
 8016cb6:	db1f      	blt.n	8016cf8 <__s2b+0x5c>
 8016cb8:	0030      	movs	r0, r6
 8016cba:	f7ff ff7f 	bl	8016bbc <_Balloc>
 8016cbe:	9b08      	ldr	r3, [sp, #32]
 8016cc0:	6143      	str	r3, [r0, #20]
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	6103      	str	r3, [r0, #16]
 8016cc6:	2d09      	cmp	r5, #9
 8016cc8:	dd19      	ble.n	8016cfe <__s2b+0x62>
 8016cca:	0023      	movs	r3, r4
 8016ccc:	3309      	adds	r3, #9
 8016cce:	001f      	movs	r7, r3
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	1964      	adds	r4, r4, r5
 8016cd4:	783b      	ldrb	r3, [r7, #0]
 8016cd6:	0001      	movs	r1, r0
 8016cd8:	3b30      	subs	r3, #48	; 0x30
 8016cda:	220a      	movs	r2, #10
 8016cdc:	0030      	movs	r0, r6
 8016cde:	3701      	adds	r7, #1
 8016ce0:	f7ff ff9e 	bl	8016c20 <__multadd>
 8016ce4:	42a7      	cmp	r7, r4
 8016ce6:	d1f5      	bne.n	8016cd4 <__s2b+0x38>
 8016ce8:	9b00      	ldr	r3, [sp, #0]
 8016cea:	195c      	adds	r4, r3, r5
 8016cec:	3c08      	subs	r4, #8
 8016cee:	002f      	movs	r7, r5
 8016cf0:	9b01      	ldr	r3, [sp, #4]
 8016cf2:	429f      	cmp	r7, r3
 8016cf4:	db06      	blt.n	8016d04 <__s2b+0x68>
 8016cf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016cf8:	005b      	lsls	r3, r3, #1
 8016cfa:	3101      	adds	r1, #1
 8016cfc:	e7da      	b.n	8016cb4 <__s2b+0x18>
 8016cfe:	340a      	adds	r4, #10
 8016d00:	2509      	movs	r5, #9
 8016d02:	e7f4      	b.n	8016cee <__s2b+0x52>
 8016d04:	1b63      	subs	r3, r4, r5
 8016d06:	5ddb      	ldrb	r3, [r3, r7]
 8016d08:	0001      	movs	r1, r0
 8016d0a:	3b30      	subs	r3, #48	; 0x30
 8016d0c:	220a      	movs	r2, #10
 8016d0e:	0030      	movs	r0, r6
 8016d10:	f7ff ff86 	bl	8016c20 <__multadd>
 8016d14:	3701      	adds	r7, #1
 8016d16:	e7eb      	b.n	8016cf0 <__s2b+0x54>

08016d18 <__hi0bits>:
 8016d18:	0003      	movs	r3, r0
 8016d1a:	0c02      	lsrs	r2, r0, #16
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	4282      	cmp	r2, r0
 8016d20:	d101      	bne.n	8016d26 <__hi0bits+0xe>
 8016d22:	041b      	lsls	r3, r3, #16
 8016d24:	3010      	adds	r0, #16
 8016d26:	0e1a      	lsrs	r2, r3, #24
 8016d28:	d101      	bne.n	8016d2e <__hi0bits+0x16>
 8016d2a:	3008      	adds	r0, #8
 8016d2c:	021b      	lsls	r3, r3, #8
 8016d2e:	0f1a      	lsrs	r2, r3, #28
 8016d30:	d101      	bne.n	8016d36 <__hi0bits+0x1e>
 8016d32:	3004      	adds	r0, #4
 8016d34:	011b      	lsls	r3, r3, #4
 8016d36:	0f9a      	lsrs	r2, r3, #30
 8016d38:	d101      	bne.n	8016d3e <__hi0bits+0x26>
 8016d3a:	3002      	adds	r0, #2
 8016d3c:	009b      	lsls	r3, r3, #2
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	db03      	blt.n	8016d4a <__hi0bits+0x32>
 8016d42:	3001      	adds	r0, #1
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	d400      	bmi.n	8016d4a <__hi0bits+0x32>
 8016d48:	2020      	movs	r0, #32
 8016d4a:	4770      	bx	lr

08016d4c <__lo0bits>:
 8016d4c:	2207      	movs	r2, #7
 8016d4e:	6803      	ldr	r3, [r0, #0]
 8016d50:	b510      	push	{r4, lr}
 8016d52:	0001      	movs	r1, r0
 8016d54:	401a      	ands	r2, r3
 8016d56:	d00d      	beq.n	8016d74 <__lo0bits+0x28>
 8016d58:	2401      	movs	r4, #1
 8016d5a:	2000      	movs	r0, #0
 8016d5c:	4223      	tst	r3, r4
 8016d5e:	d105      	bne.n	8016d6c <__lo0bits+0x20>
 8016d60:	3002      	adds	r0, #2
 8016d62:	4203      	tst	r3, r0
 8016d64:	d003      	beq.n	8016d6e <__lo0bits+0x22>
 8016d66:	40e3      	lsrs	r3, r4
 8016d68:	0020      	movs	r0, r4
 8016d6a:	600b      	str	r3, [r1, #0]
 8016d6c:	bd10      	pop	{r4, pc}
 8016d6e:	089b      	lsrs	r3, r3, #2
 8016d70:	600b      	str	r3, [r1, #0]
 8016d72:	e7fb      	b.n	8016d6c <__lo0bits+0x20>
 8016d74:	b29c      	uxth	r4, r3
 8016d76:	0010      	movs	r0, r2
 8016d78:	2c00      	cmp	r4, #0
 8016d7a:	d101      	bne.n	8016d80 <__lo0bits+0x34>
 8016d7c:	2010      	movs	r0, #16
 8016d7e:	0c1b      	lsrs	r3, r3, #16
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	2a00      	cmp	r2, #0
 8016d84:	d101      	bne.n	8016d8a <__lo0bits+0x3e>
 8016d86:	3008      	adds	r0, #8
 8016d88:	0a1b      	lsrs	r3, r3, #8
 8016d8a:	071a      	lsls	r2, r3, #28
 8016d8c:	d101      	bne.n	8016d92 <__lo0bits+0x46>
 8016d8e:	3004      	adds	r0, #4
 8016d90:	091b      	lsrs	r3, r3, #4
 8016d92:	079a      	lsls	r2, r3, #30
 8016d94:	d101      	bne.n	8016d9a <__lo0bits+0x4e>
 8016d96:	3002      	adds	r0, #2
 8016d98:	089b      	lsrs	r3, r3, #2
 8016d9a:	07da      	lsls	r2, r3, #31
 8016d9c:	d4e8      	bmi.n	8016d70 <__lo0bits+0x24>
 8016d9e:	085b      	lsrs	r3, r3, #1
 8016da0:	d001      	beq.n	8016da6 <__lo0bits+0x5a>
 8016da2:	3001      	adds	r0, #1
 8016da4:	e7e4      	b.n	8016d70 <__lo0bits+0x24>
 8016da6:	2020      	movs	r0, #32
 8016da8:	e7e0      	b.n	8016d6c <__lo0bits+0x20>

08016daa <__i2b>:
 8016daa:	b510      	push	{r4, lr}
 8016dac:	000c      	movs	r4, r1
 8016dae:	2101      	movs	r1, #1
 8016db0:	f7ff ff04 	bl	8016bbc <_Balloc>
 8016db4:	2301      	movs	r3, #1
 8016db6:	6144      	str	r4, [r0, #20]
 8016db8:	6103      	str	r3, [r0, #16]
 8016dba:	bd10      	pop	{r4, pc}

08016dbc <__multiply>:
 8016dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dbe:	690b      	ldr	r3, [r1, #16]
 8016dc0:	0014      	movs	r4, r2
 8016dc2:	6912      	ldr	r2, [r2, #16]
 8016dc4:	b089      	sub	sp, #36	; 0x24
 8016dc6:	000d      	movs	r5, r1
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	da01      	bge.n	8016dd0 <__multiply+0x14>
 8016dcc:	0025      	movs	r5, r4
 8016dce:	000c      	movs	r4, r1
 8016dd0:	692f      	ldr	r7, [r5, #16]
 8016dd2:	6926      	ldr	r6, [r4, #16]
 8016dd4:	6869      	ldr	r1, [r5, #4]
 8016dd6:	19bb      	adds	r3, r7, r6
 8016dd8:	9302      	str	r3, [sp, #8]
 8016dda:	68ab      	ldr	r3, [r5, #8]
 8016ddc:	19ba      	adds	r2, r7, r6
 8016dde:	4293      	cmp	r3, r2
 8016de0:	da00      	bge.n	8016de4 <__multiply+0x28>
 8016de2:	3101      	adds	r1, #1
 8016de4:	f7ff feea 	bl	8016bbc <_Balloc>
 8016de8:	0002      	movs	r2, r0
 8016dea:	19bb      	adds	r3, r7, r6
 8016dec:	3214      	adds	r2, #20
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	18d3      	adds	r3, r2, r3
 8016df2:	469c      	mov	ip, r3
 8016df4:	2100      	movs	r1, #0
 8016df6:	0013      	movs	r3, r2
 8016df8:	9004      	str	r0, [sp, #16]
 8016dfa:	4563      	cmp	r3, ip
 8016dfc:	d31d      	bcc.n	8016e3a <__multiply+0x7e>
 8016dfe:	3514      	adds	r5, #20
 8016e00:	00bf      	lsls	r7, r7, #2
 8016e02:	19eb      	adds	r3, r5, r7
 8016e04:	3414      	adds	r4, #20
 8016e06:	00b6      	lsls	r6, r6, #2
 8016e08:	9305      	str	r3, [sp, #20]
 8016e0a:	19a3      	adds	r3, r4, r6
 8016e0c:	9503      	str	r5, [sp, #12]
 8016e0e:	9401      	str	r4, [sp, #4]
 8016e10:	9307      	str	r3, [sp, #28]
 8016e12:	9b07      	ldr	r3, [sp, #28]
 8016e14:	9901      	ldr	r1, [sp, #4]
 8016e16:	4299      	cmp	r1, r3
 8016e18:	d311      	bcc.n	8016e3e <__multiply+0x82>
 8016e1a:	9b02      	ldr	r3, [sp, #8]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	dd06      	ble.n	8016e2e <__multiply+0x72>
 8016e20:	2304      	movs	r3, #4
 8016e22:	425b      	negs	r3, r3
 8016e24:	449c      	add	ip, r3
 8016e26:	4663      	mov	r3, ip
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d051      	beq.n	8016ed2 <__multiply+0x116>
 8016e2e:	9b04      	ldr	r3, [sp, #16]
 8016e30:	9a02      	ldr	r2, [sp, #8]
 8016e32:	0018      	movs	r0, r3
 8016e34:	611a      	str	r2, [r3, #16]
 8016e36:	b009      	add	sp, #36	; 0x24
 8016e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e3a:	c302      	stmia	r3!, {r1}
 8016e3c:	e7dd      	b.n	8016dfa <__multiply+0x3e>
 8016e3e:	9b01      	ldr	r3, [sp, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	b298      	uxth	r0, r3
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d01c      	beq.n	8016e82 <__multiply+0xc6>
 8016e48:	0015      	movs	r5, r2
 8016e4a:	2600      	movs	r6, #0
 8016e4c:	9f03      	ldr	r7, [sp, #12]
 8016e4e:	cf02      	ldmia	r7!, {r1}
 8016e50:	682c      	ldr	r4, [r5, #0]
 8016e52:	b28b      	uxth	r3, r1
 8016e54:	4343      	muls	r3, r0
 8016e56:	0c09      	lsrs	r1, r1, #16
 8016e58:	4341      	muls	r1, r0
 8016e5a:	b2a4      	uxth	r4, r4
 8016e5c:	191b      	adds	r3, r3, r4
 8016e5e:	199b      	adds	r3, r3, r6
 8016e60:	000e      	movs	r6, r1
 8016e62:	6829      	ldr	r1, [r5, #0]
 8016e64:	9506      	str	r5, [sp, #24]
 8016e66:	0c09      	lsrs	r1, r1, #16
 8016e68:	1871      	adds	r1, r6, r1
 8016e6a:	0c1e      	lsrs	r6, r3, #16
 8016e6c:	1989      	adds	r1, r1, r6
 8016e6e:	0c0e      	lsrs	r6, r1, #16
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	0409      	lsls	r1, r1, #16
 8016e74:	430b      	orrs	r3, r1
 8016e76:	c508      	stmia	r5!, {r3}
 8016e78:	9b05      	ldr	r3, [sp, #20]
 8016e7a:	42bb      	cmp	r3, r7
 8016e7c:	d8e7      	bhi.n	8016e4e <__multiply+0x92>
 8016e7e:	9b06      	ldr	r3, [sp, #24]
 8016e80:	605e      	str	r6, [r3, #4]
 8016e82:	9b01      	ldr	r3, [sp, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	0c1d      	lsrs	r5, r3, #16
 8016e88:	d01e      	beq.n	8016ec8 <__multiply+0x10c>
 8016e8a:	0010      	movs	r0, r2
 8016e8c:	2700      	movs	r7, #0
 8016e8e:	6813      	ldr	r3, [r2, #0]
 8016e90:	9e03      	ldr	r6, [sp, #12]
 8016e92:	6831      	ldr	r1, [r6, #0]
 8016e94:	6804      	ldr	r4, [r0, #0]
 8016e96:	b289      	uxth	r1, r1
 8016e98:	4369      	muls	r1, r5
 8016e9a:	0c24      	lsrs	r4, r4, #16
 8016e9c:	1909      	adds	r1, r1, r4
 8016e9e:	19c9      	adds	r1, r1, r7
 8016ea0:	040f      	lsls	r7, r1, #16
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	433b      	orrs	r3, r7
 8016ea6:	6003      	str	r3, [r0, #0]
 8016ea8:	ce80      	ldmia	r6!, {r7}
 8016eaa:	6843      	ldr	r3, [r0, #4]
 8016eac:	0c3f      	lsrs	r7, r7, #16
 8016eae:	436f      	muls	r7, r5
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	18fb      	adds	r3, r7, r3
 8016eb4:	0c09      	lsrs	r1, r1, #16
 8016eb6:	185b      	adds	r3, r3, r1
 8016eb8:	9905      	ldr	r1, [sp, #20]
 8016eba:	9006      	str	r0, [sp, #24]
 8016ebc:	0c1f      	lsrs	r7, r3, #16
 8016ebe:	3004      	adds	r0, #4
 8016ec0:	42b1      	cmp	r1, r6
 8016ec2:	d8e6      	bhi.n	8016e92 <__multiply+0xd6>
 8016ec4:	9906      	ldr	r1, [sp, #24]
 8016ec6:	604b      	str	r3, [r1, #4]
 8016ec8:	9b01      	ldr	r3, [sp, #4]
 8016eca:	3204      	adds	r2, #4
 8016ecc:	3304      	adds	r3, #4
 8016ece:	9301      	str	r3, [sp, #4]
 8016ed0:	e79f      	b.n	8016e12 <__multiply+0x56>
 8016ed2:	9b02      	ldr	r3, [sp, #8]
 8016ed4:	3b01      	subs	r3, #1
 8016ed6:	9302      	str	r3, [sp, #8]
 8016ed8:	e79f      	b.n	8016e1a <__multiply+0x5e>
	...

08016edc <__pow5mult>:
 8016edc:	2303      	movs	r3, #3
 8016ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ee0:	4013      	ands	r3, r2
 8016ee2:	0006      	movs	r6, r0
 8016ee4:	000f      	movs	r7, r1
 8016ee6:	0015      	movs	r5, r2
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d008      	beq.n	8016efe <__pow5mult+0x22>
 8016eec:	491a      	ldr	r1, [pc, #104]	; (8016f58 <__pow5mult+0x7c>)
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	009a      	lsls	r2, r3, #2
 8016ef2:	5852      	ldr	r2, [r2, r1]
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	0039      	movs	r1, r7
 8016ef8:	f7ff fe92 	bl	8016c20 <__multadd>
 8016efc:	0007      	movs	r7, r0
 8016efe:	10ad      	asrs	r5, r5, #2
 8016f00:	d027      	beq.n	8016f52 <__pow5mult+0x76>
 8016f02:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016f04:	2c00      	cmp	r4, #0
 8016f06:	d107      	bne.n	8016f18 <__pow5mult+0x3c>
 8016f08:	4914      	ldr	r1, [pc, #80]	; (8016f5c <__pow5mult+0x80>)
 8016f0a:	0030      	movs	r0, r6
 8016f0c:	f7ff ff4d 	bl	8016daa <__i2b>
 8016f10:	2300      	movs	r3, #0
 8016f12:	0004      	movs	r4, r0
 8016f14:	64b0      	str	r0, [r6, #72]	; 0x48
 8016f16:	6003      	str	r3, [r0, #0]
 8016f18:	2301      	movs	r3, #1
 8016f1a:	421d      	tst	r5, r3
 8016f1c:	d00a      	beq.n	8016f34 <__pow5mult+0x58>
 8016f1e:	0039      	movs	r1, r7
 8016f20:	0022      	movs	r2, r4
 8016f22:	0030      	movs	r0, r6
 8016f24:	f7ff ff4a 	bl	8016dbc <__multiply>
 8016f28:	0039      	movs	r1, r7
 8016f2a:	9001      	str	r0, [sp, #4]
 8016f2c:	0030      	movs	r0, r6
 8016f2e:	f7ff fe6d 	bl	8016c0c <_Bfree>
 8016f32:	9f01      	ldr	r7, [sp, #4]
 8016f34:	106d      	asrs	r5, r5, #1
 8016f36:	d00c      	beq.n	8016f52 <__pow5mult+0x76>
 8016f38:	6820      	ldr	r0, [r4, #0]
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d107      	bne.n	8016f4e <__pow5mult+0x72>
 8016f3e:	0022      	movs	r2, r4
 8016f40:	0021      	movs	r1, r4
 8016f42:	0030      	movs	r0, r6
 8016f44:	f7ff ff3a 	bl	8016dbc <__multiply>
 8016f48:	2300      	movs	r3, #0
 8016f4a:	6020      	str	r0, [r4, #0]
 8016f4c:	6003      	str	r3, [r0, #0]
 8016f4e:	0004      	movs	r4, r0
 8016f50:	e7e2      	b.n	8016f18 <__pow5mult+0x3c>
 8016f52:	0038      	movs	r0, r7
 8016f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f56:	46c0      	nop			; (mov r8, r8)
 8016f58:	0801a800 	.word	0x0801a800
 8016f5c:	00000271 	.word	0x00000271

08016f60 <__lshift>:
 8016f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f62:	000d      	movs	r5, r1
 8016f64:	0017      	movs	r7, r2
 8016f66:	692b      	ldr	r3, [r5, #16]
 8016f68:	1154      	asrs	r4, r2, #5
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	18e3      	adds	r3, r4, r3
 8016f6e:	9301      	str	r3, [sp, #4]
 8016f70:	3301      	adds	r3, #1
 8016f72:	9300      	str	r3, [sp, #0]
 8016f74:	6849      	ldr	r1, [r1, #4]
 8016f76:	68ab      	ldr	r3, [r5, #8]
 8016f78:	9002      	str	r0, [sp, #8]
 8016f7a:	9a00      	ldr	r2, [sp, #0]
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	db35      	blt.n	8016fec <__lshift+0x8c>
 8016f80:	9802      	ldr	r0, [sp, #8]
 8016f82:	f7ff fe1b 	bl	8016bbc <_Balloc>
 8016f86:	2300      	movs	r3, #0
 8016f88:	0002      	movs	r2, r0
 8016f8a:	0006      	movs	r6, r0
 8016f8c:	0019      	movs	r1, r3
 8016f8e:	3214      	adds	r2, #20
 8016f90:	42a3      	cmp	r3, r4
 8016f92:	db2e      	blt.n	8016ff2 <__lshift+0x92>
 8016f94:	43e3      	mvns	r3, r4
 8016f96:	17db      	asrs	r3, r3, #31
 8016f98:	401c      	ands	r4, r3
 8016f9a:	002b      	movs	r3, r5
 8016f9c:	00a4      	lsls	r4, r4, #2
 8016f9e:	1914      	adds	r4, r2, r4
 8016fa0:	692a      	ldr	r2, [r5, #16]
 8016fa2:	3314      	adds	r3, #20
 8016fa4:	0092      	lsls	r2, r2, #2
 8016fa6:	189a      	adds	r2, r3, r2
 8016fa8:	4694      	mov	ip, r2
 8016faa:	221f      	movs	r2, #31
 8016fac:	4017      	ands	r7, r2
 8016fae:	d024      	beq.n	8016ffa <__lshift+0x9a>
 8016fb0:	3201      	adds	r2, #1
 8016fb2:	1bd2      	subs	r2, r2, r7
 8016fb4:	9203      	str	r2, [sp, #12]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	6819      	ldr	r1, [r3, #0]
 8016fba:	0020      	movs	r0, r4
 8016fbc:	40b9      	lsls	r1, r7
 8016fbe:	430a      	orrs	r2, r1
 8016fc0:	c404      	stmia	r4!, {r2}
 8016fc2:	cb04      	ldmia	r3!, {r2}
 8016fc4:	9903      	ldr	r1, [sp, #12]
 8016fc6:	40ca      	lsrs	r2, r1
 8016fc8:	459c      	cmp	ip, r3
 8016fca:	d8f5      	bhi.n	8016fb8 <__lshift+0x58>
 8016fcc:	6042      	str	r2, [r0, #4]
 8016fce:	2a00      	cmp	r2, #0
 8016fd0:	d002      	beq.n	8016fd8 <__lshift+0x78>
 8016fd2:	9b01      	ldr	r3, [sp, #4]
 8016fd4:	3302      	adds	r3, #2
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	9b00      	ldr	r3, [sp, #0]
 8016fda:	9802      	ldr	r0, [sp, #8]
 8016fdc:	3b01      	subs	r3, #1
 8016fde:	6133      	str	r3, [r6, #16]
 8016fe0:	0029      	movs	r1, r5
 8016fe2:	f7ff fe13 	bl	8016c0c <_Bfree>
 8016fe6:	0030      	movs	r0, r6
 8016fe8:	b005      	add	sp, #20
 8016fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fec:	3101      	adds	r1, #1
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	e7c3      	b.n	8016f7a <__lshift+0x1a>
 8016ff2:	0098      	lsls	r0, r3, #2
 8016ff4:	5011      	str	r1, [r2, r0]
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	e7ca      	b.n	8016f90 <__lshift+0x30>
 8016ffa:	cb04      	ldmia	r3!, {r2}
 8016ffc:	c404      	stmia	r4!, {r2}
 8016ffe:	459c      	cmp	ip, r3
 8017000:	d8fb      	bhi.n	8016ffa <__lshift+0x9a>
 8017002:	e7e9      	b.n	8016fd8 <__lshift+0x78>

08017004 <__mcmp>:
 8017004:	690a      	ldr	r2, [r1, #16]
 8017006:	6903      	ldr	r3, [r0, #16]
 8017008:	b530      	push	{r4, r5, lr}
 801700a:	1a9b      	subs	r3, r3, r2
 801700c:	d10d      	bne.n	801702a <__mcmp+0x26>
 801700e:	0092      	lsls	r2, r2, #2
 8017010:	3014      	adds	r0, #20
 8017012:	3114      	adds	r1, #20
 8017014:	1884      	adds	r4, r0, r2
 8017016:	1889      	adds	r1, r1, r2
 8017018:	3c04      	subs	r4, #4
 801701a:	3904      	subs	r1, #4
 801701c:	6825      	ldr	r5, [r4, #0]
 801701e:	680a      	ldr	r2, [r1, #0]
 8017020:	4295      	cmp	r5, r2
 8017022:	d004      	beq.n	801702e <__mcmp+0x2a>
 8017024:	2301      	movs	r3, #1
 8017026:	4295      	cmp	r5, r2
 8017028:	d304      	bcc.n	8017034 <__mcmp+0x30>
 801702a:	0018      	movs	r0, r3
 801702c:	bd30      	pop	{r4, r5, pc}
 801702e:	42a0      	cmp	r0, r4
 8017030:	d3f2      	bcc.n	8017018 <__mcmp+0x14>
 8017032:	e7fa      	b.n	801702a <__mcmp+0x26>
 8017034:	425b      	negs	r3, r3
 8017036:	e7f8      	b.n	801702a <__mcmp+0x26>

08017038 <__mdiff>:
 8017038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801703a:	000d      	movs	r5, r1
 801703c:	b085      	sub	sp, #20
 801703e:	0007      	movs	r7, r0
 8017040:	0011      	movs	r1, r2
 8017042:	0028      	movs	r0, r5
 8017044:	0014      	movs	r4, r2
 8017046:	f7ff ffdd 	bl	8017004 <__mcmp>
 801704a:	1e06      	subs	r6, r0, #0
 801704c:	d108      	bne.n	8017060 <__mdiff+0x28>
 801704e:	0001      	movs	r1, r0
 8017050:	0038      	movs	r0, r7
 8017052:	f7ff fdb3 	bl	8016bbc <_Balloc>
 8017056:	2301      	movs	r3, #1
 8017058:	6146      	str	r6, [r0, #20]
 801705a:	6103      	str	r3, [r0, #16]
 801705c:	b005      	add	sp, #20
 801705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017060:	2301      	movs	r3, #1
 8017062:	9301      	str	r3, [sp, #4]
 8017064:	2800      	cmp	r0, #0
 8017066:	db04      	blt.n	8017072 <__mdiff+0x3a>
 8017068:	0023      	movs	r3, r4
 801706a:	002c      	movs	r4, r5
 801706c:	001d      	movs	r5, r3
 801706e:	2300      	movs	r3, #0
 8017070:	9301      	str	r3, [sp, #4]
 8017072:	6861      	ldr	r1, [r4, #4]
 8017074:	0038      	movs	r0, r7
 8017076:	f7ff fda1 	bl	8016bbc <_Balloc>
 801707a:	002f      	movs	r7, r5
 801707c:	2200      	movs	r2, #0
 801707e:	9b01      	ldr	r3, [sp, #4]
 8017080:	6926      	ldr	r6, [r4, #16]
 8017082:	60c3      	str	r3, [r0, #12]
 8017084:	3414      	adds	r4, #20
 8017086:	00b3      	lsls	r3, r6, #2
 8017088:	18e3      	adds	r3, r4, r3
 801708a:	9302      	str	r3, [sp, #8]
 801708c:	692b      	ldr	r3, [r5, #16]
 801708e:	3714      	adds	r7, #20
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	18fb      	adds	r3, r7, r3
 8017094:	9303      	str	r3, [sp, #12]
 8017096:	0003      	movs	r3, r0
 8017098:	4694      	mov	ip, r2
 801709a:	3314      	adds	r3, #20
 801709c:	cc20      	ldmia	r4!, {r5}
 801709e:	cf04      	ldmia	r7!, {r2}
 80170a0:	9201      	str	r2, [sp, #4]
 80170a2:	b2aa      	uxth	r2, r5
 80170a4:	4494      	add	ip, r2
 80170a6:	466a      	mov	r2, sp
 80170a8:	4661      	mov	r1, ip
 80170aa:	8892      	ldrh	r2, [r2, #4]
 80170ac:	0c2d      	lsrs	r5, r5, #16
 80170ae:	1a8a      	subs	r2, r1, r2
 80170b0:	9901      	ldr	r1, [sp, #4]
 80170b2:	0c09      	lsrs	r1, r1, #16
 80170b4:	1a69      	subs	r1, r5, r1
 80170b6:	1415      	asrs	r5, r2, #16
 80170b8:	1949      	adds	r1, r1, r5
 80170ba:	140d      	asrs	r5, r1, #16
 80170bc:	b292      	uxth	r2, r2
 80170be:	0409      	lsls	r1, r1, #16
 80170c0:	430a      	orrs	r2, r1
 80170c2:	601a      	str	r2, [r3, #0]
 80170c4:	9a03      	ldr	r2, [sp, #12]
 80170c6:	46ac      	mov	ip, r5
 80170c8:	3304      	adds	r3, #4
 80170ca:	42ba      	cmp	r2, r7
 80170cc:	d8e6      	bhi.n	801709c <__mdiff+0x64>
 80170ce:	9902      	ldr	r1, [sp, #8]
 80170d0:	001a      	movs	r2, r3
 80170d2:	428c      	cmp	r4, r1
 80170d4:	d305      	bcc.n	80170e2 <__mdiff+0xaa>
 80170d6:	3a04      	subs	r2, #4
 80170d8:	6813      	ldr	r3, [r2, #0]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d00e      	beq.n	80170fc <__mdiff+0xc4>
 80170de:	6106      	str	r6, [r0, #16]
 80170e0:	e7bc      	b.n	801705c <__mdiff+0x24>
 80170e2:	cc04      	ldmia	r4!, {r2}
 80170e4:	b291      	uxth	r1, r2
 80170e6:	4461      	add	r1, ip
 80170e8:	140d      	asrs	r5, r1, #16
 80170ea:	0c12      	lsrs	r2, r2, #16
 80170ec:	1952      	adds	r2, r2, r5
 80170ee:	1415      	asrs	r5, r2, #16
 80170f0:	b289      	uxth	r1, r1
 80170f2:	0412      	lsls	r2, r2, #16
 80170f4:	430a      	orrs	r2, r1
 80170f6:	46ac      	mov	ip, r5
 80170f8:	c304      	stmia	r3!, {r2}
 80170fa:	e7e8      	b.n	80170ce <__mdiff+0x96>
 80170fc:	3e01      	subs	r6, #1
 80170fe:	e7ea      	b.n	80170d6 <__mdiff+0x9e>

08017100 <__ulp>:
 8017100:	000b      	movs	r3, r1
 8017102:	4910      	ldr	r1, [pc, #64]	; (8017144 <__ulp+0x44>)
 8017104:	b510      	push	{r4, lr}
 8017106:	4019      	ands	r1, r3
 8017108:	4b0f      	ldr	r3, [pc, #60]	; (8017148 <__ulp+0x48>)
 801710a:	18c9      	adds	r1, r1, r3
 801710c:	2900      	cmp	r1, #0
 801710e:	dd04      	ble.n	801711a <__ulp+0x1a>
 8017110:	2200      	movs	r2, #0
 8017112:	000b      	movs	r3, r1
 8017114:	0010      	movs	r0, r2
 8017116:	0019      	movs	r1, r3
 8017118:	bd10      	pop	{r4, pc}
 801711a:	4249      	negs	r1, r1
 801711c:	1509      	asrs	r1, r1, #20
 801711e:	2200      	movs	r2, #0
 8017120:	2300      	movs	r3, #0
 8017122:	2913      	cmp	r1, #19
 8017124:	dc04      	bgt.n	8017130 <__ulp+0x30>
 8017126:	2080      	movs	r0, #128	; 0x80
 8017128:	0300      	lsls	r0, r0, #12
 801712a:	4108      	asrs	r0, r1
 801712c:	0003      	movs	r3, r0
 801712e:	e7f1      	b.n	8017114 <__ulp+0x14>
 8017130:	3914      	subs	r1, #20
 8017132:	2001      	movs	r0, #1
 8017134:	291e      	cmp	r1, #30
 8017136:	dc02      	bgt.n	801713e <__ulp+0x3e>
 8017138:	241f      	movs	r4, #31
 801713a:	1a61      	subs	r1, r4, r1
 801713c:	4088      	lsls	r0, r1
 801713e:	0002      	movs	r2, r0
 8017140:	e7e8      	b.n	8017114 <__ulp+0x14>
 8017142:	46c0      	nop			; (mov r8, r8)
 8017144:	7ff00000 	.word	0x7ff00000
 8017148:	fcc00000 	.word	0xfcc00000

0801714c <__b2d>:
 801714c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801714e:	0006      	movs	r6, r0
 8017150:	6903      	ldr	r3, [r0, #16]
 8017152:	3614      	adds	r6, #20
 8017154:	009b      	lsls	r3, r3, #2
 8017156:	18f3      	adds	r3, r6, r3
 8017158:	1f1d      	subs	r5, r3, #4
 801715a:	682c      	ldr	r4, [r5, #0]
 801715c:	000f      	movs	r7, r1
 801715e:	0020      	movs	r0, r4
 8017160:	9301      	str	r3, [sp, #4]
 8017162:	f7ff fdd9 	bl	8016d18 <__hi0bits>
 8017166:	2320      	movs	r3, #32
 8017168:	1a1b      	subs	r3, r3, r0
 801716a:	603b      	str	r3, [r7, #0]
 801716c:	491c      	ldr	r1, [pc, #112]	; (80171e0 <__b2d+0x94>)
 801716e:	280a      	cmp	r0, #10
 8017170:	dc16      	bgt.n	80171a0 <__b2d+0x54>
 8017172:	230b      	movs	r3, #11
 8017174:	0027      	movs	r7, r4
 8017176:	1a1b      	subs	r3, r3, r0
 8017178:	40df      	lsrs	r7, r3
 801717a:	4339      	orrs	r1, r7
 801717c:	469c      	mov	ip, r3
 801717e:	000b      	movs	r3, r1
 8017180:	2100      	movs	r1, #0
 8017182:	42ae      	cmp	r6, r5
 8017184:	d202      	bcs.n	801718c <__b2d+0x40>
 8017186:	9901      	ldr	r1, [sp, #4]
 8017188:	3908      	subs	r1, #8
 801718a:	6809      	ldr	r1, [r1, #0]
 801718c:	3015      	adds	r0, #21
 801718e:	4084      	lsls	r4, r0
 8017190:	4660      	mov	r0, ip
 8017192:	40c1      	lsrs	r1, r0
 8017194:	430c      	orrs	r4, r1
 8017196:	0022      	movs	r2, r4
 8017198:	0010      	movs	r0, r2
 801719a:	0019      	movs	r1, r3
 801719c:	b003      	add	sp, #12
 801719e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171a0:	2700      	movs	r7, #0
 80171a2:	42ae      	cmp	r6, r5
 80171a4:	d202      	bcs.n	80171ac <__b2d+0x60>
 80171a6:	9d01      	ldr	r5, [sp, #4]
 80171a8:	3d08      	subs	r5, #8
 80171aa:	682f      	ldr	r7, [r5, #0]
 80171ac:	380b      	subs	r0, #11
 80171ae:	4684      	mov	ip, r0
 80171b0:	1e03      	subs	r3, r0, #0
 80171b2:	d012      	beq.n	80171da <__b2d+0x8e>
 80171b4:	409c      	lsls	r4, r3
 80171b6:	2020      	movs	r0, #32
 80171b8:	4321      	orrs	r1, r4
 80171ba:	003c      	movs	r4, r7
 80171bc:	1ac0      	subs	r0, r0, r3
 80171be:	40c4      	lsrs	r4, r0
 80171c0:	4321      	orrs	r1, r4
 80171c2:	000b      	movs	r3, r1
 80171c4:	2100      	movs	r1, #0
 80171c6:	42b5      	cmp	r5, r6
 80171c8:	d901      	bls.n	80171ce <__b2d+0x82>
 80171ca:	3d04      	subs	r5, #4
 80171cc:	6829      	ldr	r1, [r5, #0]
 80171ce:	4664      	mov	r4, ip
 80171d0:	40c1      	lsrs	r1, r0
 80171d2:	40a7      	lsls	r7, r4
 80171d4:	430f      	orrs	r7, r1
 80171d6:	003a      	movs	r2, r7
 80171d8:	e7de      	b.n	8017198 <__b2d+0x4c>
 80171da:	4321      	orrs	r1, r4
 80171dc:	000b      	movs	r3, r1
 80171de:	e7fa      	b.n	80171d6 <__b2d+0x8a>
 80171e0:	3ff00000 	.word	0x3ff00000

080171e4 <__d2b>:
 80171e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171e6:	001d      	movs	r5, r3
 80171e8:	2101      	movs	r1, #1
 80171ea:	0014      	movs	r4, r2
 80171ec:	9f08      	ldr	r7, [sp, #32]
 80171ee:	f7ff fce5 	bl	8016bbc <_Balloc>
 80171f2:	032b      	lsls	r3, r5, #12
 80171f4:	006d      	lsls	r5, r5, #1
 80171f6:	0006      	movs	r6, r0
 80171f8:	0b1b      	lsrs	r3, r3, #12
 80171fa:	0d6d      	lsrs	r5, r5, #21
 80171fc:	d124      	bne.n	8017248 <__d2b+0x64>
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	2c00      	cmp	r4, #0
 8017202:	d027      	beq.n	8017254 <__d2b+0x70>
 8017204:	4668      	mov	r0, sp
 8017206:	9400      	str	r4, [sp, #0]
 8017208:	f7ff fda0 	bl	8016d4c <__lo0bits>
 801720c:	9c00      	ldr	r4, [sp, #0]
 801720e:	2800      	cmp	r0, #0
 8017210:	d01e      	beq.n	8017250 <__d2b+0x6c>
 8017212:	9b01      	ldr	r3, [sp, #4]
 8017214:	2120      	movs	r1, #32
 8017216:	001a      	movs	r2, r3
 8017218:	1a09      	subs	r1, r1, r0
 801721a:	408a      	lsls	r2, r1
 801721c:	40c3      	lsrs	r3, r0
 801721e:	4322      	orrs	r2, r4
 8017220:	6172      	str	r2, [r6, #20]
 8017222:	9301      	str	r3, [sp, #4]
 8017224:	9c01      	ldr	r4, [sp, #4]
 8017226:	61b4      	str	r4, [r6, #24]
 8017228:	1e63      	subs	r3, r4, #1
 801722a:	419c      	sbcs	r4, r3
 801722c:	3401      	adds	r4, #1
 801722e:	6134      	str	r4, [r6, #16]
 8017230:	2d00      	cmp	r5, #0
 8017232:	d018      	beq.n	8017266 <__d2b+0x82>
 8017234:	4b12      	ldr	r3, [pc, #72]	; (8017280 <__d2b+0x9c>)
 8017236:	18ed      	adds	r5, r5, r3
 8017238:	2335      	movs	r3, #53	; 0x35
 801723a:	182d      	adds	r5, r5, r0
 801723c:	603d      	str	r5, [r7, #0]
 801723e:	1a18      	subs	r0, r3, r0
 8017240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017242:	6018      	str	r0, [r3, #0]
 8017244:	0030      	movs	r0, r6
 8017246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017248:	2280      	movs	r2, #128	; 0x80
 801724a:	0352      	lsls	r2, r2, #13
 801724c:	4313      	orrs	r3, r2
 801724e:	e7d6      	b.n	80171fe <__d2b+0x1a>
 8017250:	6174      	str	r4, [r6, #20]
 8017252:	e7e7      	b.n	8017224 <__d2b+0x40>
 8017254:	a801      	add	r0, sp, #4
 8017256:	f7ff fd79 	bl	8016d4c <__lo0bits>
 801725a:	2401      	movs	r4, #1
 801725c:	9b01      	ldr	r3, [sp, #4]
 801725e:	6134      	str	r4, [r6, #16]
 8017260:	6173      	str	r3, [r6, #20]
 8017262:	3020      	adds	r0, #32
 8017264:	e7e4      	b.n	8017230 <__d2b+0x4c>
 8017266:	4b07      	ldr	r3, [pc, #28]	; (8017284 <__d2b+0xa0>)
 8017268:	18c0      	adds	r0, r0, r3
 801726a:	4b07      	ldr	r3, [pc, #28]	; (8017288 <__d2b+0xa4>)
 801726c:	6038      	str	r0, [r7, #0]
 801726e:	18e3      	adds	r3, r4, r3
 8017270:	009b      	lsls	r3, r3, #2
 8017272:	18f3      	adds	r3, r6, r3
 8017274:	6958      	ldr	r0, [r3, #20]
 8017276:	f7ff fd4f 	bl	8016d18 <__hi0bits>
 801727a:	0164      	lsls	r4, r4, #5
 801727c:	1a20      	subs	r0, r4, r0
 801727e:	e7df      	b.n	8017240 <__d2b+0x5c>
 8017280:	fffffbcd 	.word	0xfffffbcd
 8017284:	fffffbce 	.word	0xfffffbce
 8017288:	3fffffff 	.word	0x3fffffff

0801728c <__ratio>:
 801728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801728e:	b085      	sub	sp, #20
 8017290:	000f      	movs	r7, r1
 8017292:	a902      	add	r1, sp, #8
 8017294:	0006      	movs	r6, r0
 8017296:	f7ff ff59 	bl	801714c <__b2d>
 801729a:	0004      	movs	r4, r0
 801729c:	000d      	movs	r5, r1
 801729e:	0038      	movs	r0, r7
 80172a0:	a903      	add	r1, sp, #12
 80172a2:	9400      	str	r4, [sp, #0]
 80172a4:	9501      	str	r5, [sp, #4]
 80172a6:	f7ff ff51 	bl	801714c <__b2d>
 80172aa:	6936      	ldr	r6, [r6, #16]
 80172ac:	693f      	ldr	r7, [r7, #16]
 80172ae:	0002      	movs	r2, r0
 80172b0:	1bf7      	subs	r7, r6, r7
 80172b2:	017e      	lsls	r6, r7, #5
 80172b4:	46b4      	mov	ip, r6
 80172b6:	9f03      	ldr	r7, [sp, #12]
 80172b8:	9e02      	ldr	r6, [sp, #8]
 80172ba:	000b      	movs	r3, r1
 80172bc:	1bf6      	subs	r6, r6, r7
 80172be:	4466      	add	r6, ip
 80172c0:	0537      	lsls	r7, r6, #20
 80172c2:	2e00      	cmp	r6, #0
 80172c4:	dd07      	ble.n	80172d6 <__ratio+0x4a>
 80172c6:	1979      	adds	r1, r7, r5
 80172c8:	9101      	str	r1, [sp, #4]
 80172ca:	9800      	ldr	r0, [sp, #0]
 80172cc:	9901      	ldr	r1, [sp, #4]
 80172ce:	f7ea fadd 	bl	800188c <__aeabi_ddiv>
 80172d2:	b005      	add	sp, #20
 80172d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172d6:	1bcb      	subs	r3, r1, r7
 80172d8:	e7f7      	b.n	80172ca <__ratio+0x3e>

080172da <__copybits>:
 80172da:	0013      	movs	r3, r2
 80172dc:	3901      	subs	r1, #1
 80172de:	b510      	push	{r4, lr}
 80172e0:	1149      	asrs	r1, r1, #5
 80172e2:	6912      	ldr	r2, [r2, #16]
 80172e4:	3101      	adds	r1, #1
 80172e6:	0089      	lsls	r1, r1, #2
 80172e8:	3314      	adds	r3, #20
 80172ea:	0092      	lsls	r2, r2, #2
 80172ec:	1841      	adds	r1, r0, r1
 80172ee:	189a      	adds	r2, r3, r2
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d803      	bhi.n	80172fc <__copybits+0x22>
 80172f4:	2300      	movs	r3, #0
 80172f6:	4281      	cmp	r1, r0
 80172f8:	d803      	bhi.n	8017302 <__copybits+0x28>
 80172fa:	bd10      	pop	{r4, pc}
 80172fc:	cb10      	ldmia	r3!, {r4}
 80172fe:	c010      	stmia	r0!, {r4}
 8017300:	e7f6      	b.n	80172f0 <__copybits+0x16>
 8017302:	c008      	stmia	r0!, {r3}
 8017304:	e7f7      	b.n	80172f6 <__copybits+0x1c>

08017306 <__any_on>:
 8017306:	0002      	movs	r2, r0
 8017308:	6900      	ldr	r0, [r0, #16]
 801730a:	b510      	push	{r4, lr}
 801730c:	3214      	adds	r2, #20
 801730e:	114b      	asrs	r3, r1, #5
 8017310:	4298      	cmp	r0, r3
 8017312:	db12      	blt.n	801733a <__any_on+0x34>
 8017314:	dd0b      	ble.n	801732e <__any_on+0x28>
 8017316:	201f      	movs	r0, #31
 8017318:	4001      	ands	r1, r0
 801731a:	d008      	beq.n	801732e <__any_on+0x28>
 801731c:	0098      	lsls	r0, r3, #2
 801731e:	5884      	ldr	r4, [r0, r2]
 8017320:	0020      	movs	r0, r4
 8017322:	40c8      	lsrs	r0, r1
 8017324:	4088      	lsls	r0, r1
 8017326:	0001      	movs	r1, r0
 8017328:	2001      	movs	r0, #1
 801732a:	428c      	cmp	r4, r1
 801732c:	d104      	bne.n	8017338 <__any_on+0x32>
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	18d3      	adds	r3, r2, r3
 8017332:	4293      	cmp	r3, r2
 8017334:	d803      	bhi.n	801733e <__any_on+0x38>
 8017336:	2000      	movs	r0, #0
 8017338:	bd10      	pop	{r4, pc}
 801733a:	0003      	movs	r3, r0
 801733c:	e7f7      	b.n	801732e <__any_on+0x28>
 801733e:	3b04      	subs	r3, #4
 8017340:	6819      	ldr	r1, [r3, #0]
 8017342:	2900      	cmp	r1, #0
 8017344:	d0f5      	beq.n	8017332 <__any_on+0x2c>
 8017346:	2001      	movs	r0, #1
 8017348:	e7f6      	b.n	8017338 <__any_on+0x32>
	...

0801734c <frexp>:
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	0014      	movs	r4, r2
 8017350:	2500      	movs	r5, #0
 8017352:	6025      	str	r5, [r4, #0]
 8017354:	4d10      	ldr	r5, [pc, #64]	; (8017398 <frexp+0x4c>)
 8017356:	004b      	lsls	r3, r1, #1
 8017358:	000a      	movs	r2, r1
 801735a:	085b      	lsrs	r3, r3, #1
 801735c:	42ab      	cmp	r3, r5
 801735e:	dc1a      	bgt.n	8017396 <frexp+0x4a>
 8017360:	001d      	movs	r5, r3
 8017362:	4305      	orrs	r5, r0
 8017364:	d017      	beq.n	8017396 <frexp+0x4a>
 8017366:	4d0d      	ldr	r5, [pc, #52]	; (801739c <frexp+0x50>)
 8017368:	42ab      	cmp	r3, r5
 801736a:	dc09      	bgt.n	8017380 <frexp+0x34>
 801736c:	2200      	movs	r2, #0
 801736e:	4b0c      	ldr	r3, [pc, #48]	; (80173a0 <frexp+0x54>)
 8017370:	f7ea fe96 	bl	80020a0 <__aeabi_dmul>
 8017374:	2536      	movs	r5, #54	; 0x36
 8017376:	000a      	movs	r2, r1
 8017378:	004b      	lsls	r3, r1, #1
 801737a:	426d      	negs	r5, r5
 801737c:	085b      	lsrs	r3, r3, #1
 801737e:	6025      	str	r5, [r4, #0]
 8017380:	4d08      	ldr	r5, [pc, #32]	; (80173a4 <frexp+0x58>)
 8017382:	151b      	asrs	r3, r3, #20
 8017384:	195b      	adds	r3, r3, r5
 8017386:	6825      	ldr	r5, [r4, #0]
 8017388:	18eb      	adds	r3, r5, r3
 801738a:	6023      	str	r3, [r4, #0]
 801738c:	4b06      	ldr	r3, [pc, #24]	; (80173a8 <frexp+0x5c>)
 801738e:	401a      	ands	r2, r3
 8017390:	4b06      	ldr	r3, [pc, #24]	; (80173ac <frexp+0x60>)
 8017392:	4313      	orrs	r3, r2
 8017394:	0019      	movs	r1, r3
 8017396:	bd70      	pop	{r4, r5, r6, pc}
 8017398:	7fefffff 	.word	0x7fefffff
 801739c:	000fffff 	.word	0x000fffff
 80173a0:	43500000 	.word	0x43500000
 80173a4:	fffffc02 	.word	0xfffffc02
 80173a8:	800fffff 	.word	0x800fffff
 80173ac:	3fe00000 	.word	0x3fe00000

080173b0 <__ssprint_r>:
 80173b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173b2:	6893      	ldr	r3, [r2, #8]
 80173b4:	b087      	sub	sp, #28
 80173b6:	9002      	str	r0, [sp, #8]
 80173b8:	000c      	movs	r4, r1
 80173ba:	0016      	movs	r6, r2
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d063      	beq.n	8017488 <__ssprint_r+0xd8>
 80173c0:	6813      	ldr	r3, [r2, #0]
 80173c2:	9303      	str	r3, [sp, #12]
 80173c4:	2300      	movs	r3, #0
 80173c6:	001f      	movs	r7, r3
 80173c8:	9305      	str	r3, [sp, #20]
 80173ca:	2f00      	cmp	r7, #0
 80173cc:	d02e      	beq.n	801742c <__ssprint_r+0x7c>
 80173ce:	68a5      	ldr	r5, [r4, #8]
 80173d0:	42af      	cmp	r7, r5
 80173d2:	d347      	bcc.n	8017464 <__ssprint_r+0xb4>
 80173d4:	2390      	movs	r3, #144	; 0x90
 80173d6:	89a2      	ldrh	r2, [r4, #12]
 80173d8:	00db      	lsls	r3, r3, #3
 80173da:	421a      	tst	r2, r3
 80173dc:	d042      	beq.n	8017464 <__ssprint_r+0xb4>
 80173de:	2003      	movs	r0, #3
 80173e0:	6921      	ldr	r1, [r4, #16]
 80173e2:	6823      	ldr	r3, [r4, #0]
 80173e4:	1a5b      	subs	r3, r3, r1
 80173e6:	9304      	str	r3, [sp, #16]
 80173e8:	6963      	ldr	r3, [r4, #20]
 80173ea:	4343      	muls	r3, r0
 80173ec:	0fd8      	lsrs	r0, r3, #31
 80173ee:	18c3      	adds	r3, r0, r3
 80173f0:	105b      	asrs	r3, r3, #1
 80173f2:	9301      	str	r3, [sp, #4]
 80173f4:	9b04      	ldr	r3, [sp, #16]
 80173f6:	9801      	ldr	r0, [sp, #4]
 80173f8:	3301      	adds	r3, #1
 80173fa:	19db      	adds	r3, r3, r7
 80173fc:	4283      	cmp	r3, r0
 80173fe:	d900      	bls.n	8017402 <__ssprint_r+0x52>
 8017400:	9301      	str	r3, [sp, #4]
 8017402:	0553      	lsls	r3, r2, #21
 8017404:	d544      	bpl.n	8017490 <__ssprint_r+0xe0>
 8017406:	9901      	ldr	r1, [sp, #4]
 8017408:	9802      	ldr	r0, [sp, #8]
 801740a:	f7fb fab7 	bl	801297c <_malloc_r>
 801740e:	1e05      	subs	r5, r0, #0
 8017410:	d114      	bne.n	801743c <__ssprint_r+0x8c>
 8017412:	230c      	movs	r3, #12
 8017414:	9a02      	ldr	r2, [sp, #8]
 8017416:	2001      	movs	r0, #1
 8017418:	6013      	str	r3, [r2, #0]
 801741a:	2340      	movs	r3, #64	; 0x40
 801741c:	89a2      	ldrh	r2, [r4, #12]
 801741e:	4240      	negs	r0, r0
 8017420:	4313      	orrs	r3, r2
 8017422:	81a3      	strh	r3, [r4, #12]
 8017424:	2300      	movs	r3, #0
 8017426:	60b3      	str	r3, [r6, #8]
 8017428:	6073      	str	r3, [r6, #4]
 801742a:	e02f      	b.n	801748c <__ssprint_r+0xdc>
 801742c:	9b03      	ldr	r3, [sp, #12]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	9305      	str	r3, [sp, #20]
 8017432:	9b03      	ldr	r3, [sp, #12]
 8017434:	685f      	ldr	r7, [r3, #4]
 8017436:	3308      	adds	r3, #8
 8017438:	9303      	str	r3, [sp, #12]
 801743a:	e7c6      	b.n	80173ca <__ssprint_r+0x1a>
 801743c:	9a04      	ldr	r2, [sp, #16]
 801743e:	6921      	ldr	r1, [r4, #16]
 8017440:	f7fb fcd5 	bl	8012dee <memcpy>
 8017444:	89a3      	ldrh	r3, [r4, #12]
 8017446:	4a18      	ldr	r2, [pc, #96]	; (80174a8 <__ssprint_r+0xf8>)
 8017448:	401a      	ands	r2, r3
 801744a:	2380      	movs	r3, #128	; 0x80
 801744c:	4313      	orrs	r3, r2
 801744e:	81a3      	strh	r3, [r4, #12]
 8017450:	9b04      	ldr	r3, [sp, #16]
 8017452:	6125      	str	r5, [r4, #16]
 8017454:	18ed      	adds	r5, r5, r3
 8017456:	6025      	str	r5, [r4, #0]
 8017458:	003d      	movs	r5, r7
 801745a:	9b01      	ldr	r3, [sp, #4]
 801745c:	9a04      	ldr	r2, [sp, #16]
 801745e:	6163      	str	r3, [r4, #20]
 8017460:	1a9b      	subs	r3, r3, r2
 8017462:	60a3      	str	r3, [r4, #8]
 8017464:	42bd      	cmp	r5, r7
 8017466:	d900      	bls.n	801746a <__ssprint_r+0xba>
 8017468:	003d      	movs	r5, r7
 801746a:	002a      	movs	r2, r5
 801746c:	9905      	ldr	r1, [sp, #20]
 801746e:	6820      	ldr	r0, [r4, #0]
 8017470:	f7ff fb91 	bl	8016b96 <memmove>
 8017474:	68a3      	ldr	r3, [r4, #8]
 8017476:	1b5b      	subs	r3, r3, r5
 8017478:	60a3      	str	r3, [r4, #8]
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	195d      	adds	r5, r3, r5
 801747e:	68b3      	ldr	r3, [r6, #8]
 8017480:	6025      	str	r5, [r4, #0]
 8017482:	1bdb      	subs	r3, r3, r7
 8017484:	60b3      	str	r3, [r6, #8]
 8017486:	d1d1      	bne.n	801742c <__ssprint_r+0x7c>
 8017488:	2000      	movs	r0, #0
 801748a:	6070      	str	r0, [r6, #4]
 801748c:	b007      	add	sp, #28
 801748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017490:	9a01      	ldr	r2, [sp, #4]
 8017492:	9802      	ldr	r0, [sp, #8]
 8017494:	f7fb fcf0 	bl	8012e78 <_realloc_r>
 8017498:	1e05      	subs	r5, r0, #0
 801749a:	d1d9      	bne.n	8017450 <__ssprint_r+0xa0>
 801749c:	6921      	ldr	r1, [r4, #16]
 801749e:	9802      	ldr	r0, [sp, #8]
 80174a0:	f7fe ff78 	bl	8016394 <_free_r>
 80174a4:	e7b5      	b.n	8017412 <__ssprint_r+0x62>
 80174a6:	46c0      	nop			; (mov r8, r8)
 80174a8:	fffffb7f 	.word	0xfffffb7f

080174ac <__register_exitproc>:
 80174ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174ae:	4d29      	ldr	r5, [pc, #164]	; (8017554 <__register_exitproc+0xa8>)
 80174b0:	0006      	movs	r6, r0
 80174b2:	6828      	ldr	r0, [r5, #0]
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	9100      	str	r1, [sp, #0]
 80174b8:	0017      	movs	r7, r2
 80174ba:	f7ff fb5f 	bl	8016b7c <__retarget_lock_acquire_recursive>
 80174be:	4b26      	ldr	r3, [pc, #152]	; (8017558 <__register_exitproc+0xac>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	001c      	movs	r4, r3
 80174c4:	34fc      	adds	r4, #252	; 0xfc
 80174c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d103      	bne.n	80174d4 <__register_exitproc+0x28>
 80174cc:	334d      	adds	r3, #77	; 0x4d
 80174ce:	33ff      	adds	r3, #255	; 0xff
 80174d0:	0018      	movs	r0, r3
 80174d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80174d4:	6843      	ldr	r3, [r0, #4]
 80174d6:	2b1f      	cmp	r3, #31
 80174d8:	dd18      	ble.n	801750c <__register_exitproc+0x60>
 80174da:	4b20      	ldr	r3, [pc, #128]	; (801755c <__register_exitproc+0xb0>)
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d105      	bne.n	80174ec <__register_exitproc+0x40>
 80174e0:	6828      	ldr	r0, [r5, #0]
 80174e2:	f7ff fb4c 	bl	8016b7e <__retarget_lock_release_recursive>
 80174e6:	2001      	movs	r0, #1
 80174e8:	4240      	negs	r0, r0
 80174ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80174ec:	20c8      	movs	r0, #200	; 0xc8
 80174ee:	0040      	lsls	r0, r0, #1
 80174f0:	f7fb fa30 	bl	8012954 <malloc>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	d0f3      	beq.n	80174e0 <__register_exitproc+0x34>
 80174f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80174fa:	2300      	movs	r3, #0
 80174fc:	6002      	str	r2, [r0, #0]
 80174fe:	22c4      	movs	r2, #196	; 0xc4
 8017500:	0052      	lsls	r2, r2, #1
 8017502:	6043      	str	r3, [r0, #4]
 8017504:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017506:	5083      	str	r3, [r0, r2]
 8017508:	3204      	adds	r2, #4
 801750a:	5083      	str	r3, [r0, r2]
 801750c:	6843      	ldr	r3, [r0, #4]
 801750e:	2e00      	cmp	r6, #0
 8017510:	d014      	beq.n	801753c <__register_exitproc+0x90>
 8017512:	009a      	lsls	r2, r3, #2
 8017514:	1882      	adds	r2, r0, r2
 8017516:	0011      	movs	r1, r2
 8017518:	3188      	adds	r1, #136	; 0x88
 801751a:	600f      	str	r7, [r1, #0]
 801751c:	2101      	movs	r1, #1
 801751e:	0004      	movs	r4, r0
 8017520:	4099      	lsls	r1, r3
 8017522:	3485      	adds	r4, #133	; 0x85
 8017524:	34ff      	adds	r4, #255	; 0xff
 8017526:	6865      	ldr	r5, [r4, #4]
 8017528:	32fc      	adds	r2, #252	; 0xfc
 801752a:	430d      	orrs	r5, r1
 801752c:	6065      	str	r5, [r4, #4]
 801752e:	9d01      	ldr	r5, [sp, #4]
 8017530:	60d5      	str	r5, [r2, #12]
 8017532:	2e02      	cmp	r6, #2
 8017534:	d102      	bne.n	801753c <__register_exitproc+0x90>
 8017536:	68a2      	ldr	r2, [r4, #8]
 8017538:	4311      	orrs	r1, r2
 801753a:	60a1      	str	r1, [r4, #8]
 801753c:	1c5a      	adds	r2, r3, #1
 801753e:	6042      	str	r2, [r0, #4]
 8017540:	3302      	adds	r3, #2
 8017542:	9a00      	ldr	r2, [sp, #0]
 8017544:	009b      	lsls	r3, r3, #2
 8017546:	501a      	str	r2, [r3, r0]
 8017548:	4b02      	ldr	r3, [pc, #8]	; (8017554 <__register_exitproc+0xa8>)
 801754a:	6818      	ldr	r0, [r3, #0]
 801754c:	f7ff fb17 	bl	8016b7e <__retarget_lock_release_recursive>
 8017550:	2000      	movs	r0, #0
 8017552:	e7ca      	b.n	80174ea <__register_exitproc+0x3e>
 8017554:	20000a0c 	.word	0x20000a0c
 8017558:	0801a548 	.word	0x0801a548
 801755c:	08012955 	.word	0x08012955

08017560 <_calloc_r>:
 8017560:	b510      	push	{r4, lr}
 8017562:	4351      	muls	r1, r2
 8017564:	f7fb fa0a 	bl	801297c <_malloc_r>
 8017568:	1e04      	subs	r4, r0, #0
 801756a:	d01a      	beq.n	80175a2 <_calloc_r+0x42>
 801756c:	0003      	movs	r3, r0
 801756e:	3b08      	subs	r3, #8
 8017570:	685a      	ldr	r2, [r3, #4]
 8017572:	2303      	movs	r3, #3
 8017574:	439a      	bics	r2, r3
 8017576:	3a04      	subs	r2, #4
 8017578:	2a24      	cmp	r2, #36	; 0x24
 801757a:	d819      	bhi.n	80175b0 <_calloc_r+0x50>
 801757c:	0003      	movs	r3, r0
 801757e:	2a13      	cmp	r2, #19
 8017580:	d90b      	bls.n	801759a <_calloc_r+0x3a>
 8017582:	2100      	movs	r1, #0
 8017584:	3308      	adds	r3, #8
 8017586:	6001      	str	r1, [r0, #0]
 8017588:	6041      	str	r1, [r0, #4]
 801758a:	2a1b      	cmp	r2, #27
 801758c:	d905      	bls.n	801759a <_calloc_r+0x3a>
 801758e:	6081      	str	r1, [r0, #8]
 8017590:	60c1      	str	r1, [r0, #12]
 8017592:	2a24      	cmp	r2, #36	; 0x24
 8017594:	d007      	beq.n	80175a6 <_calloc_r+0x46>
 8017596:	0003      	movs	r3, r0
 8017598:	3310      	adds	r3, #16
 801759a:	2200      	movs	r2, #0
 801759c:	601a      	str	r2, [r3, #0]
 801759e:	605a      	str	r2, [r3, #4]
 80175a0:	609a      	str	r2, [r3, #8]
 80175a2:	0020      	movs	r0, r4
 80175a4:	bd10      	pop	{r4, pc}
 80175a6:	0003      	movs	r3, r0
 80175a8:	6101      	str	r1, [r0, #16]
 80175aa:	3318      	adds	r3, #24
 80175ac:	6141      	str	r1, [r0, #20]
 80175ae:	e7f4      	b.n	801759a <_calloc_r+0x3a>
 80175b0:	2100      	movs	r1, #0
 80175b2:	f7fb fc25 	bl	8012e00 <memset>
 80175b6:	e7f4      	b.n	80175a2 <_calloc_r+0x42>

080175b8 <_sbrk>:
 80175b8:	4b05      	ldr	r3, [pc, #20]	; (80175d0 <_sbrk+0x18>)
 80175ba:	0002      	movs	r2, r0
 80175bc:	6819      	ldr	r1, [r3, #0]
 80175be:	2900      	cmp	r1, #0
 80175c0:	d101      	bne.n	80175c6 <_sbrk+0xe>
 80175c2:	4904      	ldr	r1, [pc, #16]	; (80175d4 <_sbrk+0x1c>)
 80175c4:	6019      	str	r1, [r3, #0]
 80175c6:	6818      	ldr	r0, [r3, #0]
 80175c8:	1882      	adds	r2, r0, r2
 80175ca:	601a      	str	r2, [r3, #0]
 80175cc:	4770      	bx	lr
 80175ce:	46c0      	nop			; (mov r8, r8)
 80175d0:	200067d8 	.word	0x200067d8
 80175d4:	20006cb8 	.word	0x20006cb8

080175d8 <_init>:
 80175d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175da:	46c0      	nop			; (mov r8, r8)
 80175dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175de:	bc08      	pop	{r3}
 80175e0:	469e      	mov	lr, r3
 80175e2:	4770      	bx	lr

080175e4 <_fini>:
 80175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e6:	46c0      	nop			; (mov r8, r8)
 80175e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ea:	bc08      	pop	{r3}
 80175ec:	469e      	mov	lr, r3
 80175ee:	4770      	bx	lr
